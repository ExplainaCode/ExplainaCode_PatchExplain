record_number,buggy_code,fixed_code,code_similarity
72001,"/** 
 * open the archive file for read or rw.
 * @throws IOException
 */
private void openDocument() throws IOException {
  try {
    if (rf == null) {
      if (!isWritable && !useNativeLock) {
        rf=new RandomAccessFile(archiveName,""String_Node_Str"");
      }
 else {
        rf=new RandomAccessFile(archiveName,""String_Node_Str"");
      }
    }
    head=ArchiveHeader.read(rf);
    if (systemId == null) {
      systemId=head.systemId;
    }
    if (dependId == null) {
      dependId=head.dependId;
    }
    BLOCK_SIZE=head.blockSize;
    caches=new BlockManager(new CacheEventAdapter(),BLOCK_SIZE);
    totalBlocks=(int)((rf.length() + BLOCK_SIZE - 1) / BLOCK_SIZE);
    totalDiskBlocks=totalBlocks;
    allocTbl=AllocTable.loadTable(this);
    entryTbl=NameTable.loadTable(this);
    entries=new HashMap();
    Iterator iter=entryTbl.listEntries().iterator();
    while (iter.hasNext()) {
      NameEntry nameEnt=(NameEntry)iter.next();
      entries.put(nameEnt.getName(),new ArchiveEntryV2(this,nameEnt));
    }
  }
 catch (  IOException ex) {
    if (rf != null) {
      rf.close();
      rf=null;
    }
    throw ex;
  }
}","/** 
 * open the archive file for read or rw.
 * @throws IOException
 */
private void openDocument() throws IOException {
  try {
    if (rf == null) {
      if (!isWritable && !useNativeLock) {
        rf=new RandomAccessFile(archiveName,""String_Node_Str"");
      }
 else {
        rf=new RandomAccessFile(archiveName,""String_Node_Str"");
      }
    }
    head=ArchiveHeader.read(rf);
    if (systemId == null) {
      systemId=head.systemId;
    }
    if (dependId == null) {
      dependId=head.dependId;
    }
    BLOCK_SIZE=head.blockSize;
    if (enableCache) {
      caches=new BlockManager(new CacheEventAdapter(),BLOCK_SIZE);
    }
    totalBlocks=(int)((rf.length() + BLOCK_SIZE - 1) / BLOCK_SIZE);
    totalDiskBlocks=totalBlocks;
    allocTbl=AllocTable.loadTable(this);
    entryTbl=NameTable.loadTable(this);
    entries=new HashMap();
    Iterator iter=entryTbl.listEntries().iterator();
    while (iter.hasNext()) {
      NameEntry nameEnt=(NameEntry)iter.next();
      entries.put(nameEnt.getName(),new ArchiveEntryV2(this,nameEnt));
    }
  }
 catch (  IOException ex) {
    if (rf != null) {
      rf.close();
      rf=null;
    }
    throw ex;
  }
}",0.9865626354573038
72002,"/** 
 * create the document
 * @throws IOException
 */
private void createDocument() throws IOException {
  try {
    if (!isTransient) {
      if (rf == null) {
        File parentFile=new File(archiveName).getParentFile();
        if (parentFile != null && !parentFile.exists()) {
          parentFile.mkdirs();
        }
        rf=new RandomAccessFile(archiveName,""String_Node_Str"");
      }
      rf.setLength(0);
    }
    BLOCK_SIZE=getDefaultBlockSize();
    caches=new BlockManager(new CacheEventAdapter(),BLOCK_SIZE);
    totalBlocks=3;
    totalDiskBlocks=0;
    head=new ArchiveHeader(BLOCK_SIZE);
    head.flush(this);
    allocTbl=AllocTable.createTable(this);
    entryTbl=NameTable.createTable(this);
    entries=new HashMap();
  }
 catch (  IOException ex) {
    if (rf != null) {
      rf.close();
      rf=null;
    }
    throw ex;
  }
}","/** 
 * create the document
 * @throws IOException
 */
private void createDocument() throws IOException {
  try {
    if (!isTransient) {
      if (rf == null) {
        File parentFile=new File(archiveName).getParentFile();
        if (parentFile != null && !parentFile.exists()) {
          parentFile.mkdirs();
        }
        rf=new RandomAccessFile(archiveName,""String_Node_Str"");
      }
      rf.setLength(0);
    }
    BLOCK_SIZE=getDefaultBlockSize();
    if (enableCache) {
      caches=new BlockManager(new CacheEventAdapter(),BLOCK_SIZE);
    }
    totalBlocks=3;
    totalDiskBlocks=0;
    head=new ArchiveHeader(BLOCK_SIZE);
    head.flush(this);
    allocTbl=AllocTable.createTable(this);
    entryTbl=NameTable.createTable(this);
    entries=new HashMap();
  }
 catch (  IOException ex) {
    if (rf != null) {
      rf.close();
      rf=null;
    }
    throw ex;
  }
}",0.9822145725760184
72003,"public int getUsedCache(){
  return caches.getUsedCache();
}","public int getUsedCache(){
  if (caches != null) {
    return caches.getUsedCache();
  }
  return 0;
}",0.7407407407407407
72004,"/** 
 * load report item emitters extension definitions
 */
protected void loadEmitterExtensionDefns(){
  IExtension[] exts=getExtensions(EXTENSION_POINT_EMITTERS);
  if (exts == null) {
    return;
  }
  for (int i=0; i < exts.length; i++) {
    String namespace=exts[i].getNamespace();
    IConfigurationElement[] configs=exts[i].getConfigurationElements();
    for (int j=0; j < configs.length; j++) {
      String format=configs[j].getAttribute(""String_Node_Str"");
      String mimeType=configs[j].getAttribute(""String_Node_Str"");
      String id=configs[j].getAttribute(""String_Node_Str"");
      String pagination=configs[j].getAttribute(""String_Node_Str"");
      if (pagination == null) {
        pagination=PAGE_BREAK_PAGINATION;
      }
      String icon=configs[j].getAttribute(""String_Node_Str"");
      Boolean outDisplayNone=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      String fileExtension=configs[j].getAttribute(""String_Node_Str"");
      Boolean isHidden=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      EmitterInfo emitterInfo=new EmitterInfo(format,id,pagination,mimeType,icon,namespace,fileExtension,outDisplayNone,isHidden,configs[j]);
      emitterExtensions.add(emitterInfo);
      assert(format != null);
      formats.put(format.toLowerCase(Locale.ENGLISH),emitterInfo);
      emitters.put(id,emitterInfo);
      logger.log(Level.FINE,""String_Node_Str"",new String[]{format,id});
    }
  }
}","/** 
 * load report item emitters extension definitions
 */
protected void loadEmitterExtensionDefns(){
  IExtension[] exts=getExtensions(EXTENSION_POINT_EMITTERS);
  if (exts == null) {
    return;
  }
  for (int i=0; i < exts.length; i++) {
    String namespace=exts[i].getNamespace();
    IConfigurationElement[] configs=exts[i].getConfigurationElements();
    for (int j=0; j < configs.length; j++) {
      String format=configs[j].getAttribute(""String_Node_Str"");
      String mimeType=configs[j].getAttribute(""String_Node_Str"");
      String id=configs[j].getAttribute(""String_Node_Str"");
      String pagination=configs[j].getAttribute(""String_Node_Str"");
      if (pagination == null) {
        pagination=PAGE_BREAK_PAGINATION;
      }
      String icon=configs[j].getAttribute(""String_Node_Str"");
      Boolean outDisplayNone=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      String fileExtension=configs[j].getAttribute(""String_Node_Str"");
      Boolean isHidden=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      EmitterInfo emitterInfo=new EmitterInfo(format,id,pagination,mimeType,icon,namespace,fileExtension,outDisplayNone,isHidden,configs[j]);
      emitterExtensions.add(emitterInfo);
      assert(format != null);
      formats.put(format,emitterInfo);
      emitters.put(id,emitterInfo);
      logger.log(Level.FINE,""String_Node_Str"",new String[]{format,id});
    }
  }
}",0.9902097902097902
72005,"/** 
 * Return the URLs of Workspace projects.
 * @return
 */
private static List<URL> getWorkspaceProjectURLs(){
  List<URL> urls=new ArrayList<URL>();
  String classPath=System.getProperty(""String_Node_Str"");
  if (classPath == null || classPath.length() == 0)   return urls;
  String[] classPathArray=classPath.split(File.pathSeparator,-1);
  int count=classPathArray.length;
  for (int i=0; i < count; i++) {
    File file=new File(classPathArray[i]);
    try {
      urls.add(file.toURL());
    }
 catch (    MalformedURLException e) {
    }
  }
  return urls;
}","/** 
 * Return the URLs of Workspace projects.
 * @return
 */
private static List<URL> getWorkspaceProjectURLs(){
  List<URL> urls=new ArrayList<URL>();
  String classPath=DatasetClassPathHelper.getWorkspaceClassPath();
  if (classPath == null || classPath.length() == 0)   return urls;
  String[] classPathArray=classPath.split(File.pathSeparator,-1);
  int count=classPathArray.length;
  for (int i=0; i < count; i++) {
    File file=new File(classPathArray[i]);
    try {
      urls.add(file.toURL());
    }
 catch (    MalformedURLException e) {
    }
  }
  return urls;
}",0.9361329833770778
72006,"/** 
 * @return the user-defined font directory
 */
public String getFontDirectory();","/** 
 * @deprecated
 * @return the user-defined font directory
 */
public String getFontDirectory();",0.918918918918919
72007,"/** 
 * @param fontDirectory the user-defined font directory
 */
public void setFontDirectory(String fontDirectory);","/** 
 * @deprecated
 * @param fontDirectory the user-defined font directory
 */
public void setFontDirectory(String fontDirectory);",0.9392712550607288
72008,"/** 
 * @return if font is embedded
 */
public boolean isEmbededFont();","/** 
 * @deprecated
 * @return if font is embedded
 */
public boolean isEmbededFont();",0.9044585987261148
72009,"/** 
 * @param isEmbededFont
 */
public void setEmbededFont(boolean isEmbededFont);","/** 
 * @deprecated
 * @param isEmbededFont
 */
public void setEmbededFont(boolean isEmbededFont);",0.9171270718232044
72010,"protected void setupLayoutOptions(){
  if (options != null) {
    Object fitToPage=options.get(IPDFRenderOption.FIT_TO_PAGE);
    if (fitToPage != null && fitToPage instanceof Boolean) {
      if (((Boolean)fitToPage).booleanValue()) {
        context.setFitToPage(true);
      }
    }
    Object pageBreakOnly=options.get(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY);
    if (pageBreakOnly != null && pageBreakOnly instanceof Boolean) {
      if (((Boolean)pageBreakOnly).booleanValue()) {
        context.setPagebreakPaginationOnly(true);
      }
    }
    Object pageOverflow=options.get(IPDFRenderOption.PAGE_OVERFLOW);
    if (pageOverflow != null && pageOverflow instanceof Integer) {
      int pageOverflowType=((Integer)pageOverflow).intValue();
      context.setPageOverflow(pageOverflowType);
    }
 else {
      if (context.fitToPage()) {
        context.setPageOverflow(IPDFRenderOption.FIT_TO_PAGE_SIZE);
      }
    }
    Object textWrapping=options.get(IPDFRenderOption.PDF_TEXT_WRAPPING);
    if (textWrapping != null && textWrapping instanceof Boolean) {
      if (!((Boolean)textWrapping).booleanValue()) {
        context.setTextWrapping(false);
      }
    }
    Object fontSubstitution=options.get(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
    if (fontSubstitution != null && fontSubstitution instanceof Boolean) {
      if (!((Boolean)fontSubstitution).booleanValue()) {
        context.setFontSubstitution(false);
      }
    }
    Object bidiProcessing=options.get(IPDFRenderOption.PDF_BIDI_PROCESSING);
    if (bidiProcessing != null && bidiProcessing instanceof Boolean) {
      if (!((Boolean)bidiProcessing).booleanValue()) {
        context.setBidiProcessing(false);
      }
    }
    Object hyhenation=options.get(IPDFRenderOption.PDF_HYPHENATION);
    if (hyhenation != null && hyhenation instanceof Boolean) {
      if (((Boolean)hyhenation).booleanValue()) {
        context.setEnableHyphenation(true);
      }
    }
    Object dpi=options.get(IPDFRenderOption.DPI);
    if (dpi != null && dpi instanceof Integer) {
      int screenDpi=((Integer)dpi).intValue();
      context.setDpi(screenDpi);
    }
  }
}","protected void setupLayoutOptions(){
  if (options != null) {
    Object fitToPage=options.get(IPDFRenderOption.FIT_TO_PAGE);
    if (fitToPage != null && fitToPage instanceof Boolean) {
      if (((Boolean)fitToPage).booleanValue()) {
        context.setFitToPage(true);
      }
    }
    Object pageBreakOnly=options.get(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY);
    if (pageBreakOnly != null && pageBreakOnly instanceof Boolean) {
      if (((Boolean)pageBreakOnly).booleanValue()) {
        context.setPagebreakPaginationOnly(true);
      }
    }
    Object pageOverflow=options.get(IPDFRenderOption.PAGE_OVERFLOW);
    if (pageOverflow != null && pageOverflow instanceof Integer) {
      int pageOverflowType=((Integer)pageOverflow).intValue();
      context.setPageOverflow(pageOverflowType);
      if (pageOverflowType == IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES) {
        context.setPagebreakPaginationOnly(false);
      }
 else {
        context.setPagebreakPaginationOnly(true);
      }
    }
 else {
      if (context.fitToPage()) {
        context.setPageOverflow(IPDFRenderOption.FIT_TO_PAGE_SIZE);
        context.setPagebreakPaginationOnly(true);
      }
    }
    Object textWrapping=options.get(IPDFRenderOption.PDF_TEXT_WRAPPING);
    if (textWrapping != null && textWrapping instanceof Boolean) {
      if (!((Boolean)textWrapping).booleanValue()) {
        context.setTextWrapping(false);
      }
    }
    Object fontSubstitution=options.get(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
    if (fontSubstitution != null && fontSubstitution instanceof Boolean) {
      if (!((Boolean)fontSubstitution).booleanValue()) {
        context.setFontSubstitution(false);
      }
    }
    Object bidiProcessing=options.get(IPDFRenderOption.PDF_BIDI_PROCESSING);
    if (bidiProcessing != null && bidiProcessing instanceof Boolean) {
      if (!((Boolean)bidiProcessing).booleanValue()) {
        context.setBidiProcessing(false);
      }
    }
    Object hyhenation=options.get(IPDFRenderOption.PDF_HYPHENATION);
    if (hyhenation != null && hyhenation instanceof Boolean) {
      if (((Boolean)hyhenation).booleanValue()) {
        context.setEnableHyphenation(true);
      }
    }
    Object dpi=options.get(IPDFRenderOption.DPI);
    if (dpi != null && dpi instanceof Integer) {
      int screenDpi=((Integer)dpi).intValue();
      context.setDpi(screenDpi);
    }
  }
}",0.9447635881573132
72011,"/** 
 * This method is used for back-forward compatible. For the new DTE api store the original ComputedColumnHandle expression as a parameter value now, we should retrive expression value from ComputedColumnHandle's expression(old) or argument value.
 * @param bindingColumn
 * @return
 */
public static String getAggregationExpression(ComputedColumnHandle bindingColumn){
  if (bindingColumn.getExpression() != null)   return bindingColumn.getExpression();
  String functionName=bindingColumn.getAggregateFunction();
  try {
    IAggrFunction function=getAggregationManager().getAggregation(functionName);
    for (    IParameterDefn param : function.getParameterDefn()) {
      if (param.isDataField()) {
        for (Iterator iterator=bindingColumn.argumentsIterator(); iterator.hasNext(); ) {
          AggregationArgumentHandle arg=(AggregationArgumentHandle)iterator.next();
          if (arg.getName().equals(param.getName())) {
            return arg.getValue();
          }
        }
      }
    }
  }
 catch (  BirtException e) {
  }
  return null;
}","/** 
 * This method is used for back-forward compatible. For the new DTE api store the original ComputedColumnHandle expression as a parameter value now, we should retrive expression value from ComputedColumnHandle's expression(old) or argument value.
 * @param bindingColumn
 * @return
 */
public static String getAggregationExpression(ComputedColumnHandle bindingColumn){
  if (bindingColumn.getExpression() != null)   return bindingColumn.getExpression();
  String functionName=bindingColumn.getAggregateFunction();
  try {
    IAggrFunction function=getAggregationManager().getAggregation(functionName);
    for (    IParameterDefn param : function.getParameterDefn()) {
      if (param.isDataField()) {
        for (Iterator iterator=bindingColumn.argumentsIterator(); iterator.hasNext(); ) {
          AggregationArgumentHandle arg=(AggregationArgumentHandle)iterator.next();
          if (DataAdapterUtil.adaptArgumentName(arg.getName()).equals(param.getName())) {
            return arg.getValue();
          }
        }
      }
    }
  }
 catch (  BirtException e) {
  }
  return null;
}",0.9782104775150672
72012,"private void initFunction(){
  cmbFunction.setItems(getFunctionDisplayNames());
  if (binding == null) {
    cmbFunction.select(0);
    handleFunctionSelectEvent();
    return;
  }
  try {
    String functionString=getFunctionDisplayName(DataAdapterUtil.adaptModelAggregationType(binding.getAggregateFunction()));
    int itemIndex=getItemIndex(getFunctionDisplayNames(),functionString);
    cmbFunction.select(itemIndex);
    handleFunctionSelectEvent();
  }
 catch (  AdapterException e) {
    ExceptionHandler.handle(e);
  }
  for (Iterator iterator=binding.argumentsIterator(); iterator.hasNext(); ) {
    AggregationArgumentHandle arg=(AggregationArgumentHandle)iterator.next();
    if (paramsMap.containsKey(arg.getName())) {
      if (arg.getValue() != null) {
        Control control=paramsMap.get(arg.getName());
        if (control instanceof Text) {
          ((Text)control).setText(arg.getValue());
        }
 else         if (control instanceof Combo) {
          ((Combo)control).setText(arg.getValue());
        }
      }
    }
  }
}","private void initFunction(){
  cmbFunction.setItems(getFunctionDisplayNames());
  if (binding == null) {
    cmbFunction.select(0);
    handleFunctionSelectEvent();
    return;
  }
  try {
    String functionString=getFunctionDisplayName(DataAdapterUtil.adaptModelAggregationType(binding.getAggregateFunction()));
    int itemIndex=getItemIndex(getFunctionDisplayNames(),functionString);
    cmbFunction.select(itemIndex);
    handleFunctionSelectEvent();
  }
 catch (  AdapterException e) {
    ExceptionHandler.handle(e);
  }
  for (Iterator iterator=binding.argumentsIterator(); iterator.hasNext(); ) {
    AggregationArgumentHandle arg=(AggregationArgumentHandle)iterator.next();
    String argName=DataAdapterUtil.adaptArgumentName(arg.getName());
    if (paramsMap.containsKey(argName)) {
      if (arg.getValue() != null) {
        Control control=paramsMap.get(argName);
        if (control instanceof Text) {
          ((Text)control).setText(arg.getValue());
        }
 else         if (control instanceof Combo) {
          ((Combo)control).setText(arg.getValue());
        }
      }
    }
  }
}",0.9624129930394432
72013,"private void initFunction(){
  cmbFunction.setItems(getFunctionDisplayNames());
  if (binding == null) {
    cmbFunction.select(0);
    handleFunctionSelectEvent();
    return;
  }
  try {
    String functionString=getFunctionDisplayName(DataAdapterUtil.adaptModelAggregationType(binding.getAggregateFunction()));
    int itemIndex=getItemIndex(getFunctionDisplayNames(),functionString);
    cmbFunction.select(itemIndex);
    handleFunctionSelectEvent();
  }
 catch (  AdapterException e) {
    ExceptionHandler.handle(e);
  }
  for (Iterator iterator=binding.argumentsIterator(); iterator.hasNext(); ) {
    AggregationArgumentHandle arg=(AggregationArgumentHandle)iterator.next();
    if (paramsMap.containsKey(arg.getName())) {
      if (arg.getValue() != null) {
        Control control=paramsMap.get(arg.getName());
        if (control instanceof Text) {
          ((Text)control).setText(arg.getValue());
        }
 else         if (control instanceof Combo) {
          ((Combo)control).setText(arg.getValue());
        }
      }
    }
  }
}","private void initFunction(){
  cmbFunction.setItems(getFunctionDisplayNames());
  if (binding == null) {
    cmbFunction.select(0);
    handleFunctionSelectEvent();
    return;
  }
  try {
    String functionString=getFunctionDisplayName(DataAdapterUtil.adaptModelAggregationType(binding.getAggregateFunction()));
    int itemIndex=getItemIndex(getFunctionDisplayNames(),functionString);
    cmbFunction.select(itemIndex);
    handleFunctionSelectEvent();
  }
 catch (  AdapterException e) {
    ExceptionHandler.handle(e);
  }
  for (Iterator iterator=binding.argumentsIterator(); iterator.hasNext(); ) {
    AggregationArgumentHandle arg=(AggregationArgumentHandle)iterator.next();
    String argName=DataAdapterUtil.adaptArgumentName(arg.getName());
    if (paramsMap.containsKey(argName)) {
      if (arg.getValue() != null) {
        Control control=paramsMap.get(argName);
        if (control instanceof Text) {
          ((Text)control).setText(arg.getValue());
        }
 else         if (control instanceof Combo) {
          ((Combo)control).setText(arg.getValue());
        }
      }
    }
  }
}",0.9624129930394432
72014,"public void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  if (d.getDatatype().equals(Data.NUMBER)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (d.getDatatype().equals(Data.DATE)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  d.formatTxt();
  String txt=d.getText();
  if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=capitalize(txt);
  }
 else   if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toUpperCase();
  }
 else   if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toLowerCase();
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}","public void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  if (d.getDatatype().equals(Data.NUMBER)) {
    if (d.getText().equals((NAN_STRING))) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (d.getDatatype().equals(Data.DATE)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  d.formatTxt();
  String txt=d.getText();
  if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=capitalize(txt);
  }
 else   if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toUpperCase();
  }
 else   if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toLowerCase();
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}",0.935761254425898
72015,"/** 
 * Sets the <code>'class'</code> property and stores the style to styleMap object.
 * @param styleName the style name
 */
protected void setStyleName(String styleName,IContent content){
  StringBuffer classBuffer=new StringBuffer();
  if (styleName != null) {
    if (null != htmlIDNamespace) {
      String htmlStyleName=htmlIDNamespace + styleName;
      if (outputtedStyles.contains(htmlStyleName)) {
        classBuffer.append(htmlStyleName);
      }
    }
 else {
      if (outputtedStyles.contains(styleName)) {
        classBuffer.append(styleName);
      }
    }
  }
  if (hasCsslinks) {
    Object genBy=content.getGenerateBy();
    if (genBy instanceof StyledElementDesign) {
      DesignElementHandle handle=((StyledElementDesign)genBy).getHandle();
      if (handle != null) {
        String name=handle.getStringProperty(ReportItemHandle.STYLE_PROP);
        if (name != null) {
          if (classBuffer.length() != 0) {
            classBuffer.append(""String_Node_Str"" + name);
          }
 else {
            classBuffer.append(name);
          }
        }
      }
    }
  }
  if (classBuffer.length() != 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,classBuffer.toString());
  }
}","/** 
 * Sets the <code>'class'</code> property and stores the style to styleMap object.
 * @param styleName the style name
 */
protected void setStyleName(String styleName,IContent content){
  StringBuffer classBuffer=new StringBuffer();
  if (styleName != null) {
    if (outputtedStyles.contains(styleName)) {
      if (null != htmlIDNamespace) {
        classBuffer.append(htmlIDNamespace + styleName);
      }
 else {
        classBuffer.append(styleName);
      }
    }
  }
  if (hasCsslinks) {
    Object genBy=content.getGenerateBy();
    if (genBy instanceof StyledElementDesign) {
      DesignElementHandle handle=((StyledElementDesign)genBy).getHandle();
      if (handle != null) {
        String name=handle.getStringProperty(ReportItemHandle.STYLE_PROP);
        if (name != null) {
          if (classBuffer.length() != 0) {
            classBuffer.append(""String_Node_Str"" + name);
          }
 else {
            classBuffer.append(name);
          }
        }
      }
    }
  }
  if (classBuffer.length() != 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,classBuffer.toString());
  }
}",0.8910117238384716
72016,"protected void addColumBinding(IBaseQueryDefinition transfer,ComputedColumnHandle columnBinding) throws BirtException {
  String name=columnBinding.getName();
  String expr=columnBinding.getExpression();
  String type=columnBinding.getDataType();
  String displayName=columnBinding.getDisplayName();
  String aggregateOn=columnBinding.getAggregateOn();
  int dbType=ModelDteApiAdapter.toDteDataType(type);
  IBaseExpression dbExpr=null;
  if (expr != null) {
    dbExpr=new ScriptExpression(expr,dbType);
    if (aggregateOn != null) {
      dbExpr.setGroupName(aggregateOn);
    }
  }
  IBinding binding=new Binding(name,dbExpr);
  binding.setDisplayName(displayName);
  if (aggregateOn != null) {
    binding.addAggregateOn(aggregateOn);
  }
  if (columnBinding.getAggregateFunction() != null) {
    binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(columnBinding.getAggregateFunction()));
  }
  String filter=columnBinding.getFilterExpression();
  if (filter != null) {
    binding.setFilter(new ScriptExpression(filter));
  }
  Iterator arguments=columnBinding.argumentsIterator();
  if (arguments != null) {
    while (arguments.hasNext()) {
      AggregationArgumentHandle argumentHandle=(AggregationArgumentHandle)arguments.next();
      String argument=argumentHandle.getValue();
      if (argument != null) {
        binding.addArgument(argumentHandle.getName(),new ScriptExpression(argument));
      }
    }
  }
  binding.setDataType(dbType);
  transfer.addBinding(binding);
}","protected void addColumBinding(IBaseQueryDefinition transfer,ComputedColumnHandle columnBinding) throws BirtException {
  String name=columnBinding.getName();
  String expr=columnBinding.getExpression();
  String type=columnBinding.getDataType();
  String displayName=columnBinding.getDisplayName();
  String aggregateOn=columnBinding.getAggregateOn();
  int dbType=ModelDteApiAdapter.toDteDataType(type);
  IBaseExpression dbExpr=null;
  if (expr != null) {
    dbExpr=new ScriptExpression(expr,dbType);
    if (aggregateOn != null) {
      dbExpr.setGroupName(aggregateOn);
    }
  }
  IBinding binding=new Binding(name,dbExpr);
  binding.setDisplayName(displayName);
  if (aggregateOn != null) {
    binding.addAggregateOn(aggregateOn);
  }
  if (columnBinding.getAggregateFunction() != null) {
    binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(columnBinding.getAggregateFunction()));
  }
  String filter=columnBinding.getFilterExpression();
  if (filter != null) {
    binding.setFilter(new ScriptExpression(filter));
  }
  Iterator arguments=columnBinding.argumentsIterator();
  if (arguments != null) {
    while (arguments.hasNext()) {
      AggregationArgumentHandle argumentHandle=(AggregationArgumentHandle)arguments.next();
      String argument=argumentHandle.getValue();
      if (argument != null) {
        binding.addArgument(adaptArgumentName(argumentHandle),new ScriptExpression(argument));
      }
    }
  }
  binding.setDataType(dbType);
  transfer.addBinding(binding);
}",0.9910388317291736
72017,"/** 
 * @return the test
 */
public static Test suite(){
  TestSuite test=new TestSuite();
  test.addTestSuite(ContentCommandTest.class);
  test.addTestSuite(ContentExceptionTest.class);
  test.addTestSuite(CustomMsgCommandTest.class);
  test.addTestSuite(CustomMsgExceptionTest.class);
  test.addTestSuite(ExtendsCommandTest.class);
  test.addTestSuite(ExtendsExceptionTest.class);
  test.addTestSuite(NameCommandTest.class);
  test.addTestSuite(NameExceptionTest.class);
  test.addTestSuite(PropertyCommandTest.class);
  test.addTestSuite(PropertyNameExceptionTest.class);
  test.addTestSuite(StyleCommandTest.class);
  test.addTestSuite(StyleExceptionTest.class);
  test.addTestSuite(TemplateCommandTest.class);
  test.addTestSuite(UserPropertyCommandTest.class);
  test.addTestSuite(UserPropertyExceptionTest.class);
  return test;
}","/** 
 * @return the test
 */
public static Test suite(){
  TestSuite test=new TestSuite();
  test.addTestSuite(ContentCommandTest.class);
  test.addTestSuite(ContentExceptionTest.class);
  test.addTestSuite(CustomMsgCommandTest.class);
  test.addTestSuite(CustomMsgExceptionTest.class);
  test.addTestSuite(ExtendsCommandTest.class);
  test.addTestSuite(ExtendsExceptionTest.class);
  test.addTestSuite(NameCommandTest.class);
  test.addTestSuite(NameExceptionTest.class);
  test.addTestSuite(PropertyCommandTest.class);
  test.addTestSuite(PropertyNameExceptionTest.class);
  test.addTestSuite(StyleCommandTest.class);
  test.addTestSuite(StyleExceptionTest.class);
  test.addTestSuite(TemplateCommandTest.class);
  test.addTestSuite(UserPropertyCommandTest.class);
  test.addTestSuite(UserPropertyExceptionTest.class);
  test.addTestSuite(CssCommandTest.class);
  return test;
}",0.974956319161328
72018,"/** 
 * Create PDF render option.
 * @param servletPath
 * @param request
 * @param pageOverflow
 * @param isDesigner
 * @return the PDF render option
 */
private PDFRenderOption createPDFRenderOption(String servletPath,HttpServletRequest request,int pageOverflow,boolean isDesigner){
  String baseURL=null;
  if (!isDesigner)   baseURL=ParameterAccessor.getBaseURL();
  if (baseURL == null) {
    if (ParameterAccessor.isOpenAsAttachment(request)) {
      baseURL=request.getScheme() + ""String_Node_Str"" + request.getServerName()+ ""String_Node_Str""+ request.getServerPort();
    }
 else {
      baseURL=""String_Node_Str"";
    }
  }
  baseURL+=request.getContextPath();
  PDFRenderOption renderOption=new PDFRenderOption();
  if (servletPath != null && servletPath.length() > 0) {
    renderOption.setBaseURL(baseURL + servletPath);
  }
 else {
    renderOption.setBaseURL(baseURL + IBirtConstants.SERVLET_PATH_RUN);
  }
  renderOption.setSupportedImageFormats(""String_Node_Str"");
switch (pageOverflow) {
case IBirtConstants.PAGE_OVERFLOW_AUTO:
    renderOption.setOption(PDFRenderOption.PAGE_OVERFLOW,new Integer(PDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES));
  break;
case IBirtConstants.PAGE_OVERFLOW_ACTUAL:
renderOption.setOption(PDFRenderOption.PAGE_OVERFLOW,new Integer(PDFRenderOption.ENLARGE_PAGE_SIZE));
break;
case IBirtConstants.PAGE_OVERFLOW_FITTOPAGE:
renderOption.setOption(PDFRenderOption.FIT_TO_PAGE,Boolean.TRUE);
break;
default :
renderOption.setOption(PDFRenderOption.PAGE_OVERFLOW,new Integer(PDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES));
}
renderOption.setOption(PDFRenderOption.PAGEBREAK_PAGINATION_ONLY,Boolean.TRUE);
return renderOption;
}","/** 
 * Create PDF render option.
 * @param servletPath
 * @param request
 * @param pageOverflow
 * @param isDesigner
 * @return the PDF render option
 */
private PDFRenderOption createPDFRenderOption(String servletPath,HttpServletRequest request,int pageOverflow,boolean isDesigner){
  String baseURL=null;
  if (!isDesigner)   baseURL=ParameterAccessor.getBaseURL();
  if (baseURL == null) {
    if (ParameterAccessor.isOpenAsAttachment(request)) {
      baseURL=request.getScheme() + ""String_Node_Str"" + request.getServerName()+ ""String_Node_Str""+ request.getServerPort();
    }
 else {
      baseURL=""String_Node_Str"";
    }
  }
  baseURL+=request.getContextPath();
  PDFRenderOption renderOption=new PDFRenderOption();
  if (servletPath != null && servletPath.length() > 0) {
    renderOption.setBaseURL(baseURL + servletPath);
  }
 else {
    renderOption.setBaseURL(baseURL + IBirtConstants.SERVLET_PATH_RUN);
  }
  renderOption.setSupportedImageFormats(""String_Node_Str"");
switch (pageOverflow) {
case IBirtConstants.PAGE_OVERFLOW_AUTO:
    renderOption.setOption(PDFRenderOption.PAGE_OVERFLOW,new Integer(PDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES));
  break;
case IBirtConstants.PAGE_OVERFLOW_ACTUAL:
renderOption.setOption(PDFRenderOption.PAGE_OVERFLOW,new Integer(PDFRenderOption.ENLARGE_PAGE_SIZE));
break;
case IBirtConstants.PAGE_OVERFLOW_FITTOPAGE:
renderOption.setOption(PDFRenderOption.FIT_TO_PAGE,Boolean.TRUE);
break;
default :
renderOption.setOption(PDFRenderOption.PAGE_OVERFLOW,new Integer(PDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES));
}
renderOption.setOption(PDFRenderOption.PAGEBREAK_PAGINATION_ONLY,Boolean.FALSE);
return renderOption;
}",0.9978909310033144
72019,"/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content) throws BadElementException, MalformedURLException, IOException {
  Image image=null;
  String uri=content.getURI();
  String mimeType=content.getMIMEType();
  String extension=content.getExtension();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    return null;
  }
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    ReportDesignHandle design=content.getReportContent().getDesign().getReportDesign();
  URL url=design.findResource(uri,IResourceLocator.IMAGE);
InputStream in=url.openStream();
try {
byte[] buffer;
if (SvgFile.isSvg(content.getURI())) {
  buffer=SvgFile.transSvgToArray(in);
}
 else {
  ArrayList<Byte> bytes=new ArrayList<Byte>();
  int data=in.read();
  while (data != -1) {
    bytes.add((byte)data);
    data=in.read();
  }
  buffer=new byte[bytes.size()];
  for (int i=0; i < buffer.length; i++) {
    buffer[i]=bytes.get(i);
  }
}
image=Image.getInstance(buffer);
}
 catch (Exception ex) {
logger.log(Level.WARNING,ex.getMessage(),ex);
}
 finally {
in.close();
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
byte[] data=content.getData();
in=new ByteArrayInputStream(data);
if (SvgFile.isSvg(mimeType,uri,extension)) data=SvgFile.transSvgToArray(in);
image=Image.getInstance(data);
break;
case IImageContent.IMAGE_URL:
if (SvgFile.isSvg(uri)) {
image=Image.getInstance(SvgFile.transSvgToArray(uri));
}
 else {
image=Image.getInstance(new URL(content.getURI()));
}
break;
default :
assert(false);
}
if (image != null) {
int resolutionX=0;
int resolutionY=0;
int contentResolution=content.getResolution();
if (contentResolution != 0) {
resolutionX=contentResolution;
resolutionY=contentResolution;
}
 else {
resolutionX=image.getDpiX();
resolutionY=image.getDpiY();
if (0 == resolutionX || 0 == resolutionY) {
resolutionX=context.getDpi();
resolutionY=context.getDpi();
}
if (0 == resolutionX || 0 == resolutionY) {
resolutionX=96;
resolutionY=96;
}
}
return new Dimension((int)(image.plainWidth() * 1000 / resolutionX * 72),(int)(image.plainHeight() * 1000 / resolutionY * 72));
}
return null;
}","/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content) throws BadElementException, MalformedURLException, IOException {
  Image image=null;
  String uri=content.getURI();
  String mimeType=content.getMIMEType();
  String extension=content.getExtension();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    return null;
  }
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    ReportDesignHandle design=content.getReportContent().getDesign().getReportDesign();
  URL url=design.findResource(uri,IResourceLocator.IMAGE);
InputStream in=url.openStream();
try {
byte[] buffer;
if (SvgFile.isSvg(content.getURI())) {
  buffer=SvgFile.transSvgToArray(in);
}
 else {
  ArrayList<Byte> bytes=new ArrayList<Byte>();
  int data=in.read();
  while (data != -1) {
    bytes.add((byte)data);
    data=in.read();
  }
  buffer=new byte[bytes.size()];
  for (int i=0; i < buffer.length; i++) {
    buffer[i]=bytes.get(i);
  }
}
image=Image.getInstance(buffer);
}
 catch (Exception ex) {
logger.log(Level.WARNING,ex.getMessage(),ex);
}
 finally {
in.close();
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
byte[] data=content.getData();
in=new ByteArrayInputStream(data);
if (SvgFile.isSvg(mimeType,uri,extension)) data=SvgFile.transSvgToArray(in);
image=Image.getInstance(data);
break;
case IImageContent.IMAGE_URL:
if (SvgFile.isSvg(uri)) {
image=Image.getInstance(SvgFile.transSvgToArray(uri));
}
 else {
image=Image.getInstance(new URL(content.getURI()));
}
break;
default :
assert(false);
}
if (image != null) {
int resolutionX=0;
int resolutionY=0;
int contentResolution=content.getResolution();
if (contentResolution != 0) {
resolutionX=contentResolution;
resolutionY=contentResolution;
}
 else {
if (0 == resolutionX || 0 == resolutionY) {
resolutionX=context.getDpi();
resolutionY=context.getDpi();
}
if (0 == resolutionX || 0 == resolutionY) {
resolutionX=96;
resolutionY=96;
}
}
return new Dimension((int)(image.plainWidth() * 1000 / resolutionX * 72),(int)(image.plainHeight() * 1000 / resolutionY * 72));
}
return null;
}",0.9874567474048442
72020,"/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
        paramBindingCandidates.put(modelParam.getName(),new ExpressionAdapter(defaultValueExpr,org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType())));
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),new ExpressionAdapter(modelParamBinding.getExpression(),DataType.ANY_TYPE));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ExpressionAdapter expression=(ExpressionAdapter)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
        if (defaultValueExpr != null)         paramBindingCandidates.put(modelParam.getName(),new ExpressionAdapter(defaultValueExpr,org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType())));
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      if (modelParamBinding.getExpression() != null)       paramBindingCandidates.put(modelParamBinding.getParamName(),new ExpressionAdapter(modelParamBinding.getExpression(),DataType.ANY_TYPE));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ExpressionAdapter expression=(ExpressionAdapter)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}",0.9381417480591034
72021,"/** 
 * @param modelDataSet
 * @param dteDataSet
 * @return
 */
private Iterator populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle) {
          String linkedReportParam=((OdaDataSetParameterHandle)modelParam).getParamName();
          if (linkedReportParam != null) {
            ParameterHandle ph=modelDataSet.getModuleHandle().findParameter(linkedReportParam);
            if (ph instanceof ScalarParameterHandle) {
              if (((ScalarParameterHandle)ph).getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE)) {
                throw new DataException(ResourceConstants.Linked_REPORT_PARAM_ALLOW_MULTI_VALUES,new String[]{linkedReportParam,modelParam.getName()});
              }
            }
            defaultValueExpr=ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName());
          }
        }
 else {
          defaultValueExpr=modelParam.getDefaultValue();
        }
        dteDataSet.addParameter(newParam(modelParam));
        paramBindingCandidates.put(modelParam.getName(),new ScriptExpression(defaultValueExpr,DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType())));
      }
 else {
        dteDataSet.addParameter(newParam(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),new ScriptExpression(modelParamBinding.getExpression()));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ScriptExpression expression=(ScriptExpression)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
    }
  }
  return elmtIter;
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 * @return
 */
private Iterator populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle) {
          String linkedReportParam=((OdaDataSetParameterHandle)modelParam).getParamName();
          if (linkedReportParam != null) {
            ParameterHandle ph=modelDataSet.getModuleHandle().findParameter(linkedReportParam);
            if (ph instanceof ScalarParameterHandle) {
              if (((ScalarParameterHandle)ph).getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE)) {
                throw new DataException(ResourceConstants.Linked_REPORT_PARAM_ALLOW_MULTI_VALUES,new String[]{linkedReportParam,modelParam.getName()});
              }
            }
            defaultValueExpr=ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName());
          }
 else {
            defaultValueExpr=modelParam.getDefaultValue();
          }
        }
 else {
          defaultValueExpr=modelParam.getDefaultValue();
        }
        dteDataSet.addParameter(newParam(modelParam));
        paramBindingCandidates.put(modelParam.getName(),new ScriptExpression(defaultValueExpr,DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType())));
      }
 else {
        dteDataSet.addParameter(newParam(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),new ScriptExpression(modelParamBinding.getExpression()));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ScriptExpression expression=(ScriptExpression)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
    }
  }
  return elmtIter;
}",0.9841715087156884
72022,"private IInputParameterBinding newInputParamBinding(String paramName,ScriptExpression paramValueExpr){
  if (paramValueExpr == null)   return null;
  return new InputParameterBinding(paramName,paramValueExpr);
}","private IInputParameterBinding newInputParamBinding(String paramName,ScriptExpression paramValueExpr){
  if (paramValueExpr == null || paramValueExpr.getText() == null)   return null;
  return new InputParameterBinding(paramName,paramValueExpr);
}",0.9213973799126638
72023,"/** 
 * Contructor
 * @param launch
 * @param vm
 * @param name
 * @param process
 * @param listenPort
 * @param eventPort
 * @param tempFolder
 */
public ScriptDebugTarget(ILaunch launch,ReportVMClient vm,String name,IProcess process,int listenPort,String tempFolder){
  super(null);
  this.launch=launch;
  this.reportVM=vm;
  this.name=name;
  this.process=process;
  this.tempFolder=tempFolder;
  this.listenPort=listenPort;
  launch.addDebugTarget(this);
  vm.addVMListener(this);
  setTerminating(false);
  setTerminated(false);
  thread=new ScriptDebugThread(this);
  threads=new IThread[]{thread};
  DebugPlugin.getDefault().getBreakpointManager().addBreakpointListener(this);
  while (!isTerminated()) {
    try {
      vm.connect(listenPort);
      break;
    }
 catch (    VMException e) {
      continue;
    }
  }
}","/** 
 * Contructor
 * @param launch
 * @param vm
 * @param name
 * @param process
 * @param listenPort
 * @param eventPort
 * @param tempFolder
 */
public ScriptDebugTarget(ILaunch launch,ReportVMClient vm,String name,IProcess process,int listenPort,String tempFolder){
  super(null);
  this.launch=launch;
  this.reportVM=vm;
  this.name=name;
  this.process=process;
  this.tempFolder=tempFolder;
  this.listenPort=listenPort;
  launch.addDebugTarget(this);
  vm.addVMListener(this);
  setTerminating(false);
  setTerminated(false);
  thread=new ScriptDebugThread(this);
  threads=new IThread[]{thread};
  DebugPlugin.getDefault().getBreakpointManager().addBreakpointListener(this);
  while (!isTerminated()) {
    try {
      vm.connect(listenPort);
      break;
    }
 catch (    VMException e) {
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e1) {
      }
      continue;
    }
  }
}",0.9337899543378996
72024,"/** 
 * load report item emitters extension definitions
 */
protected void loadEmitterExtensionDefns(){
  IExtension[] exts=getExtensions(EXTENSION_POINT_EMITTERS);
  if (exts == null) {
    return;
  }
  for (int i=0; i < exts.length; i++) {
    String namespace=exts[i].getNamespace();
    IConfigurationElement[] configs=exts[i].getConfigurationElements();
    for (int j=0; j < configs.length; j++) {
      String format=configs[j].getAttribute(""String_Node_Str"");
      String mimeType=configs[j].getAttribute(""String_Node_Str"");
      String id=configs[j].getAttribute(""String_Node_Str"");
      String pagination=configs[j].getAttribute(""String_Node_Str"");
      if (pagination == null) {
        pagination=PAGE_BREAK_PAGINATION;
      }
      String icon=configs[j].getAttribute(""String_Node_Str"");
      Boolean outDisplayNone=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      String fileExtension=configs[j].getAttribute(""String_Node_Str"");
      Boolean isHidden=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      EmitterInfo emitterInfo=new EmitterInfo(format,id,pagination,mimeType,icon,namespace,fileExtension,outDisplayNone,isHidden,configs[j]);
      emitterExtensions.add(emitterInfo);
      assert(format != null);
      formats.put(format.toLowerCase(),emitterInfo);
      emitters.put(id,emitterInfo);
      logger.log(Level.FINE,""String_Node_Str"",new String[]{format,id});
    }
  }
}","/** 
 * load report item emitters extension definitions
 */
protected void loadEmitterExtensionDefns(){
  IExtension[] exts=getExtensions(EXTENSION_POINT_EMITTERS);
  if (exts == null) {
    return;
  }
  for (int i=0; i < exts.length; i++) {
    String namespace=exts[i].getNamespace();
    IConfigurationElement[] configs=exts[i].getConfigurationElements();
    for (int j=0; j < configs.length; j++) {
      String format=configs[j].getAttribute(""String_Node_Str"");
      String mimeType=configs[j].getAttribute(""String_Node_Str"");
      String id=configs[j].getAttribute(""String_Node_Str"");
      String pagination=configs[j].getAttribute(""String_Node_Str"");
      if (pagination == null) {
        pagination=PAGE_BREAK_PAGINATION;
      }
      String icon=configs[j].getAttribute(""String_Node_Str"");
      Boolean outDisplayNone=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      String fileExtension=configs[j].getAttribute(""String_Node_Str"");
      Boolean isHidden=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      EmitterInfo emitterInfo=new EmitterInfo(format,id,pagination,mimeType,icon,namespace,fileExtension,outDisplayNone,isHidden,configs[j]);
      emitterExtensions.add(emitterInfo);
      assert(format != null);
      formats.put(format.toLowerCase(Locale.ENGLISH),emitterInfo);
      emitters.put(id,emitterInfo);
      logger.log(Level.FINE,""String_Node_Str"",new String[]{format,id});
    }
  }
}",0.9951287404314544
72025,"public boolean next() throws BirtException {
  checkStarted();
  if (this.columnValueMap == null)   return false;
  currRowIndex++;
  readCurrentRow();
  return this.columnValueMap != null;
}","public boolean next() throws BirtException {
  checkStarted();
  if (this.columnValueMap == null)   return false;
  currRowIndex++;
  readCurrentRow();
  return this.columnValueMap != null && this.columnValueMap.size() > 0;
}",0.9182692307692308
72026,"/** 
 * Gets the support list of the given property handle. Note: this method returns all supported elements including invisible ones from UI. To get supported UI element list, check   {@link UIUtil#getUIElementSupportList()}
 * @param propertyHandle
 * @return
 */
public static List<IElementDefn> getElementSupportList(PropertyHandle propertyHandle){
  List<IElementDefn> list=new ArrayList<IElementDefn>();
  IPropertyDefn propertyDefn=propertyHandle.getPropertyDefn();
  if (propertyDefn != null) {
    list.addAll(propertyDefn.getAllowedElements(true));
    list.removeAll(notSupportList);
  }
  List<IElementDefn> availableList=new ArrayList<IElementDefn>();
  for (Iterator<IElementDefn> iterator=list.iterator(); iterator.hasNext(); ) {
    IElementDefn type=iterator.next();
    if (propertyHandle.canContain(type.getName())) {
      availableList.add(type);
    }
  }
  return availableList;
}","/** 
 * Gets the support list of the given property handle. Note: this method returns all supported elements including invisible ones from UI. To get supported UI element list, check  {@link UIUtil#getUIElementSupportList()}
 * @param propertyHandle
 * @return
 */
public static List<IElementDefn> getElementSupportList(PropertyHandle propertyHandle){
  List<IElementDefn> list=new ArrayList<IElementDefn>();
  IPropertyDefn propertyDefn=propertyHandle.getPropertyDefn();
  if (propertyDefn != null) {
    list.addAll(propertyDefn.getAllowedElements(true));
    list.removeAll(notSupportList);
  }
  List<IElementDefn> availableList=new ArrayList<IElementDefn>();
  for (Iterator<IElementDefn> iterator=list.iterator(); iterator.hasNext(); ) {
    IElementDefn type=iterator.next();
    if (propertyHandle.canContain(type.getName())) {
      availableList.add(type);
    }
  }
  return availableList;
}",0.9994459833795014
72027,"/** 
 * Get methods with specified comparator
 * @param classInfo
 * @param comp The comparator
 * @return List of methods
 */
public static List getMethods(IClassInfo classInfo,Comparator comp){
  List methods=classInfo.getMethods();
  Collections.sort(methods,comp);
  return methods;
}","/** 
 * Get methods with default comparator
 * @param classInfo
 * @return List of methods
 */
public static List getMethods(IClassInfo classInfo,boolean includeConstructor,Comparator comp){
  List mds=new ArrayList();
  if (includeConstructor) {
    IMethodInfo mi=classInfo.getConstructor();
    if (mi != null) {
      mds.add(mi);
    }
  }
  List methods=classInfo.getMethods();
  Collections.sort(methods,comp);
  mds.addAll(methods);
  return mds;
}",0.6209677419354839
72028,"/** 
 * Updates the format Pattern String, and Preview.
 */
private void updatePreview(){
  markDirty(hasLoaded);
  String category=provider.getCategory4UIDisplayName(typeChoicer.getText());
  setCategory(category);
  Date sampleDateTime=defaultDate;
  if (getPreviewText() != null && !getPreviewText().equals(defaultDateTime)) {
    try {
      sampleDateTime=new Date(getPreviewText());
    }
 catch (    Exception e) {
    }
  }
  if (provider.DATETIEM_FORMAT_TYPE_CUSTOM.equals(category)) {
    String pattern=formatCode.getText();
    String fmtStr;
    String text=previewTextBox.getText();
    if (StringUtil.isBlank(text) || defaultDateTime.equals(text)) {
      fmtStr=new DateFormatter(pattern,ULocale.getDefault()).format(sampleDateTime);
    }
 else {
      try {
        fmtStr=new DateFormatter(pattern,ULocale.getDefault()).format(new Date(text));
      }
 catch (      Exception e) {
        fmtStr=PREVIEW_TEXT_INVALID_DATETIME_TO_PREVIEW;
      }
    }
    cusPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
 else {
    String pattern=null;
    if (!provider.DATETIEM_FORMAT_TYPE_UNFORMATTED.equals(category)) {
      pattern=FormatDateTimePattern.getPatternForCategory(category);
    }
    String fmtStr=new DateFormatter(pattern).format(sampleDateTime);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
  return;
}","/** 
 * Updates the format Pattern String, and Preview.
 */
private void updatePreview(){
  markDirty(hasLoaded);
  String category=provider.getCategory4UIDisplayName(typeChoicer.getText());
  setCategory(category);
  boolean invalidPreviewText=false;
  Date sampleDateTime=defaultDate;
  if (getPreviewText() != null && !getPreviewText().equals(defaultDateTime)) {
    try {
      sampleDateTime=new DateFormatter(ENTER_DATE_TIME_GUIDE_FORMAT,ULocale.getDefault()).parse(getPreviewText());
    }
 catch (    Exception e) {
      invalidPreviewText=true;
    }
  }
  if (provider.DATETIEM_FORMAT_TYPE_CUSTOM.equals(category)) {
    String pattern=formatCode.getText();
    String fmtStr;
    if (invalidPreviewText) {
      fmtStr=PREVIEW_TEXT_INVALID_DATETIME_TO_PREVIEW;
    }
 else {
      try {
        fmtStr=new DateFormatter(pattern,ULocale.getDefault()).format(sampleDateTime);
      }
 catch (      Exception e) {
        fmtStr=PREVIEW_TEXT_INVALID_DATETIME_TO_PREVIEW;
      }
    }
    cusPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
 else {
    String pattern=null;
    if (!provider.DATETIEM_FORMAT_TYPE_UNFORMATTED.equals(category)) {
      pattern=FormatDateTimePattern.getPatternForCategory(category);
    }
    String fmtStr=new DateFormatter(pattern).format(sampleDateTime);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
  return;
}",0.7396386822529224
72029,"/** 
 * Updates the format Pattern String, and Preview.
 */
private void updatePreview(){
  markDirty(hasLoaded);
  String category=getCategory4UIDisplayName(typeChoicer.getText());
  setCategory(category);
  Date sampleDateTime=defaultDate;
  if (getPreviewText() != null && !getPreviewText().equals(defaultDateTime)) {
    try {
      sampleDateTime=new Date(getPreviewText());
    }
 catch (    Exception e) {
    }
  }
  if (formatAdapter.getCustomCategoryName().equals(category)) {
    String pattern=formatCode.getText();
    String fmtStr;
    String text=previewTextBox.getText();
    if (StringUtil.isBlank(text) || defaultDateTime.equals(text)) {
      fmtStr=new DateFormatter(pattern,ULocale.getDefault()).format(sampleDateTime);
    }
 else {
      try {
        fmtStr=new DateFormatter(pattern).format(DataTypeUtil.toDate(text));
      }
 catch (      Exception e) {
        fmtStr=PREVIEW_TEXT_INVALID_DATETIME_TO_PREVIEW;
      }
    }
    cusPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
 else {
    String pattern=null;
    if (!formatAdapter.getUnformattedCategoryDisplayName().equals(category)) {
      pattern=FormatDateTimePattern.getPatternForCategory(category);
      setPattern(pattern);
    }
 else {
      pattern=formatAdapter.getUnformattedCategoryName();
      setPattern(null);
    }
    String fmtStr=new DateFormatter(pattern).format(sampleDateTime);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
  }
}","/** 
 * Updates the format Pattern String, and Preview.
 */
private void updatePreview(){
  markDirty(hasLoaded);
  String category=getCategory4UIDisplayName(typeChoicer.getText());
  setCategory(category);
  boolean invalidPreviewText=false;
  Date sampleDateTime=defaultDate;
  if (getPreviewText() != null && !getPreviewText().equals(defaultDateTime)) {
    try {
      sampleDateTime=new DateFormatter(ENTER_DATE_TIME_GUIDE_FORMAT,ULocale.getDefault()).parse(getPreviewText());
    }
 catch (    Exception e) {
      invalidPreviewText=true;
    }
  }
  if (formatAdapter.getCustomCategoryName().equals(category)) {
    String pattern=formatCode.getText();
    String fmtStr;
    if (invalidPreviewText) {
      fmtStr=PREVIEW_TEXT_INVALID_DATETIME_TO_PREVIEW;
    }
 else {
      try {
        fmtStr=new DateFormatter(pattern,ULocale.getDefault()).format(sampleDateTime);
      }
 catch (      Exception e) {
        fmtStr=PREVIEW_TEXT_INVALID_DATETIME_TO_PREVIEW;
      }
    }
    cusPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
 else {
    String pattern=null;
    if (!formatAdapter.getUnformattedCategoryDisplayName().equals(category)) {
      pattern=FormatDateTimePattern.getPatternForCategory(category);
      setPattern(pattern);
    }
 else {
      pattern=formatAdapter.getUnformattedCategoryName();
      setPattern(null);
    }
    String fmtStr=new DateFormatter(pattern).format(sampleDateTime);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
  }
}",0.6825025092004015
72030,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(metaData.getColumnTypeName(i + 1));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
  }
  updateModel(dataSetHandle,items);
  return items;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
  }
  updateModel(dataSetHandle,items);
  return items;
}",0.7982283464566929
72031,"/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(metaData.getColumnTypeName(i + 1));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
  }
  return items;
}","/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
  }
  return items;
}",0.7418136020151134
72032,"protected IReportLayoutEngine createReportLayoutEngine(String pagination,IRenderOption options){
  IReportLayoutEngine layoutEngine=LayoutEngineFactory.createLayoutEngine(pagination);
  if (options != null) {
    Object fitToPage=renderOptions.getOption(IPDFRenderOption.FIT_TO_PAGE);
    if (fitToPage != null) {
      layoutEngine.setOption(IPDFRenderOption.FIT_TO_PAGE,fitToPage);
    }
    Object pagebreakOnly=renderOptions.getOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY);
    if (pagebreakOnly != null) {
      layoutEngine.setOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY,pagebreakOnly);
    }
    Object pageOverflow=renderOptions.getOption(IPDFRenderOption.PAGE_OVERFLOW);
    if (pageOverflow != null) {
      layoutEngine.setOption(IPDFRenderOption.PAGE_OVERFLOW,pageOverflow);
    }
    Object outputDisplayNone=renderOptions.getOption(IPDFRenderOption.OUTPUT_DISPLAY_NONE);
    if (outputDisplayNone != null) {
      layoutEngine.setOption(IPDFRenderOption.OUTPUT_DISPLAY_NONE,outputDisplayNone);
    }
    Object pdfTextWrapping=renderOptions.getOption(IPDFRenderOption.PDF_TEXT_WRAPPING);
    if (pdfTextWrapping != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_TEXT_WRAPPING,pdfTextWrapping);
    }
    Object pdfFontSubstitution=renderOptions.getOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
    if (pdfFontSubstitution != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION,pdfFontSubstitution);
    }
    layoutEngine.setOption(IRenderOption.RTL_FLAG,renderOptions.getOption(IRenderOption.RTL_FLAG));
    Object pdfBidiProcessing=renderOptions.getOption(IPDFRenderOption.PDF_BIDI_PROCESSING);
    if (pdfBidiProcessing != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_BIDI_PROCESSING,pdfBidiProcessing);
    }
    Object pdfHyphenation=renderOptions.getOption(IPDFRenderOption.PDF_HYPHENATION);
    if (pdfHyphenation != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_HYPHENATION,pdfHyphenation);
    }
  }
  layoutEngine.setOption(TASK_TYPE,new Integer(taskType));
  return layoutEngine;
}","protected IReportLayoutEngine createReportLayoutEngine(String pagination,IRenderOption options){
  IReportLayoutEngine layoutEngine=LayoutEngineFactory.createLayoutEngine(pagination);
  if (options != null) {
    Object fitToPage=renderOptions.getOption(IPDFRenderOption.FIT_TO_PAGE);
    if (fitToPage != null) {
      layoutEngine.setOption(IPDFRenderOption.FIT_TO_PAGE,fitToPage);
    }
    Object pagebreakOnly=renderOptions.getOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY);
    if (pagebreakOnly != null) {
      layoutEngine.setOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY,pagebreakOnly);
    }
    Object pageOverflow=renderOptions.getOption(IPDFRenderOption.PAGE_OVERFLOW);
    if (pageOverflow != null) {
      layoutEngine.setOption(IPDFRenderOption.PAGE_OVERFLOW,pageOverflow);
    }
    Object outputDisplayNone=renderOptions.getOption(IPDFRenderOption.OUTPUT_DISPLAY_NONE);
    if (outputDisplayNone != null) {
      layoutEngine.setOption(IPDFRenderOption.OUTPUT_DISPLAY_NONE,outputDisplayNone);
    }
    Object pdfTextWrapping=renderOptions.getOption(IPDFRenderOption.PDF_TEXT_WRAPPING);
    if (pdfTextWrapping != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_TEXT_WRAPPING,pdfTextWrapping);
    }
    Object pdfFontSubstitution=renderOptions.getOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
    if (pdfFontSubstitution != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION,pdfFontSubstitution);
    }
    layoutEngine.setOption(IRenderOption.RTL_FLAG,renderOptions.getOption(IRenderOption.RTL_FLAG));
    Object pdfBidiProcessing=renderOptions.getOption(IPDFRenderOption.PDF_BIDI_PROCESSING);
    if (pdfBidiProcessing != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_BIDI_PROCESSING,pdfBidiProcessing);
    }
    Object pdfHyphenation=renderOptions.getOption(IPDFRenderOption.PDF_HYPHENATION);
    if (pdfHyphenation != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_HYPHENATION,pdfHyphenation);
    }
    Object dpi=renderOptions.getOption(IPDFRenderOption.DPI);
    if (dpi != null) {
      layoutEngine.setOption(IPDFRenderOption.DPI,dpi);
    }
  }
  layoutEngine.setOption(TASK_TYPE,new Integer(taskType));
  return layoutEngine;
}",0.965869514743441
72033,"/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content) throws BadElementException, MalformedURLException, IOException {
  Image image=null;
  String uri=content.getURI();
  String mimeType=content.getMIMEType();
  String extension=content.getExtension();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    return null;
  }
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    ReportDesignHandle design=content.getReportContent().getDesign().getReportDesign();
  URL url=design.findResource(uri,IResourceLocator.IMAGE);
InputStream in=url.openStream();
try {
byte[] buffer;
if (SvgFile.isSvg(content.getURI())) {
  buffer=SvgFile.transSvgToArray(in);
}
 else {
  ArrayList<Byte> bytes=new ArrayList<Byte>();
  int data=in.read();
  while (data != -1) {
    bytes.add((byte)data);
    data=in.read();
  }
  buffer=new byte[bytes.size()];
  for (int i=0; i < buffer.length; i++) {
    buffer[i]=bytes.get(i);
  }
}
image=Image.getInstance(buffer);
}
 catch (Exception ex) {
logger.log(Level.WARNING,ex.getMessage(),ex);
}
 finally {
in.close();
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
byte[] data=content.getData();
in=new ByteArrayInputStream(data);
if (SvgFile.isSvg(mimeType,uri,extension)) data=SvgFile.transSvgToArray(in);
image=Image.getInstance(data);
break;
case IImageContent.IMAGE_URL:
if (SvgFile.isSvg(uri)) {
image=Image.getInstance(SvgFile.transSvgToArray(uri));
}
 else {
image=Image.getInstance(new URL(content.getURI()));
}
break;
default :
assert(false);
}
if (image != null) {
int resolution=96;
int contentResolution=content.getResolution();
if (contentResolution != 0) {
resolution=contentResolution;
}
return new Dimension((int)(image.plainWidth() * 1000 / resolution * 72),(int)(image.plainHeight() * 1000 / resolution * 72));
}
return null;
}","/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content) throws BadElementException, MalformedURLException, IOException {
  Image image=null;
  String uri=content.getURI();
  String mimeType=content.getMIMEType();
  String extension=content.getExtension();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    return null;
  }
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    ReportDesignHandle design=content.getReportContent().getDesign().getReportDesign();
  URL url=design.findResource(uri,IResourceLocator.IMAGE);
InputStream in=url.openStream();
try {
byte[] buffer;
if (SvgFile.isSvg(content.getURI())) {
  buffer=SvgFile.transSvgToArray(in);
}
 else {
  ArrayList<Byte> bytes=new ArrayList<Byte>();
  int data=in.read();
  while (data != -1) {
    bytes.add((byte)data);
    data=in.read();
  }
  buffer=new byte[bytes.size()];
  for (int i=0; i < buffer.length; i++) {
    buffer[i]=bytes.get(i);
  }
}
image=Image.getInstance(buffer);
}
 catch (Exception ex) {
logger.log(Level.WARNING,ex.getMessage(),ex);
}
 finally {
in.close();
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
byte[] data=content.getData();
in=new ByteArrayInputStream(data);
if (SvgFile.isSvg(mimeType,uri,extension)) data=SvgFile.transSvgToArray(in);
image=Image.getInstance(data);
break;
case IImageContent.IMAGE_URL:
if (SvgFile.isSvg(uri)) {
image=Image.getInstance(SvgFile.transSvgToArray(uri));
}
 else {
image=Image.getInstance(new URL(content.getURI()));
}
break;
default :
assert(false);
}
if (image != null) {
int resolutionX=0;
int resolutionY=0;
int contentResolution=content.getResolution();
if (contentResolution != 0) {
resolutionX=contentResolution;
resolutionY=contentResolution;
}
 else {
resolutionX=image.getDpiX();
resolutionY=image.getDpiY();
if (0 == resolutionX || 0 == resolutionY) {
resolutionX=context.getDpi();
resolutionY=context.getDpi();
}
if (0 == resolutionX || 0 == resolutionY) {
resolutionX=96;
resolutionY=96;
}
}
return new Dimension((int)(image.plainWidth() * 1000 / resolutionX * 72),(int)(image.plainHeight() * 1000 / resolutionY * 72));
}
return null;
}",0.8818825679689285
72034,"public void setPagebreakPaginationOnly(boolean pageBreakPaginationOnly){
  this.pageBreakPaginationOnly=pageBreakPaginationOnly;
}","public void setPagebreakPaginationOnly(boolean pageBreakPaginationOnly){
  this.pageBreakPaginationOnly=pageBreakPaginationOnly;
  setAutoPageBreak(!pageBreakPaginationOnly);
}",0.8496732026143791
72035,"protected void setupLayoutOptions(){
  if (options != null) {
    Object fitToPage=options.get(IPDFRenderOption.FIT_TO_PAGE);
    if (fitToPage != null && fitToPage instanceof Boolean) {
      if (((Boolean)fitToPage).booleanValue()) {
        context.setFitToPage(true);
      }
    }
    Object pageBreakOnly=options.get(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY);
    if (pageBreakOnly != null && pageBreakOnly instanceof Boolean) {
      if (((Boolean)pageBreakOnly).booleanValue()) {
        context.setPagebreakPaginationOnly(true);
      }
    }
    Object pageOverflow=options.get(IPDFRenderOption.PAGE_OVERFLOW);
    if (pageOverflow != null) {
      int pageOverflowType=((Integer)pageOverflow).intValue();
      context.setPageOverflow(pageOverflowType);
    }
 else {
      if (context.fitToPage()) {
        context.setPageOverflow(IPDFRenderOption.FIT_TO_PAGE_SIZE);
      }
    }
    Object textWrapping=options.get(IPDFRenderOption.PDF_TEXT_WRAPPING);
    if (textWrapping != null && textWrapping instanceof Boolean) {
      if (!((Boolean)textWrapping).booleanValue()) {
        context.setTextWrapping(false);
      }
    }
    Object fontSubstitution=options.get(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
    if (fontSubstitution != null && fontSubstitution instanceof Boolean) {
      if (!((Boolean)fontSubstitution).booleanValue()) {
        context.setFontSubstitution(false);
      }
    }
    Object bidiProcessing=options.get(IPDFRenderOption.PDF_BIDI_PROCESSING);
    if (bidiProcessing != null && bidiProcessing instanceof Boolean) {
      if (!((Boolean)bidiProcessing).booleanValue()) {
        context.setBidiProcessing(false);
      }
    }
    Object hyhenation=options.get(IPDFRenderOption.PDF_HYPHENATION);
    if (hyhenation != null && hyhenation instanceof Boolean) {
      if (((Boolean)hyhenation).booleanValue()) {
        context.setEnableHyphenation(true);
      }
    }
  }
}","protected void setupLayoutOptions(){
  if (options != null) {
    Object fitToPage=options.get(IPDFRenderOption.FIT_TO_PAGE);
    if (fitToPage != null && fitToPage instanceof Boolean) {
      if (((Boolean)fitToPage).booleanValue()) {
        context.setFitToPage(true);
      }
    }
    Object pageBreakOnly=options.get(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY);
    if (pageBreakOnly != null && pageBreakOnly instanceof Boolean) {
      if (((Boolean)pageBreakOnly).booleanValue()) {
        context.setPagebreakPaginationOnly(true);
      }
    }
    Object pageOverflow=options.get(IPDFRenderOption.PAGE_OVERFLOW);
    if (pageOverflow != null && pageOverflow instanceof Integer) {
      int pageOverflowType=((Integer)pageOverflow).intValue();
      context.setPageOverflow(pageOverflowType);
    }
 else {
      if (context.fitToPage()) {
        context.setPageOverflow(IPDFRenderOption.FIT_TO_PAGE_SIZE);
      }
    }
    Object textWrapping=options.get(IPDFRenderOption.PDF_TEXT_WRAPPING);
    if (textWrapping != null && textWrapping instanceof Boolean) {
      if (!((Boolean)textWrapping).booleanValue()) {
        context.setTextWrapping(false);
      }
    }
    Object fontSubstitution=options.get(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
    if (fontSubstitution != null && fontSubstitution instanceof Boolean) {
      if (!((Boolean)fontSubstitution).booleanValue()) {
        context.setFontSubstitution(false);
      }
    }
    Object bidiProcessing=options.get(IPDFRenderOption.PDF_BIDI_PROCESSING);
    if (bidiProcessing != null && bidiProcessing instanceof Boolean) {
      if (!((Boolean)bidiProcessing).booleanValue()) {
        context.setBidiProcessing(false);
      }
    }
    Object hyhenation=options.get(IPDFRenderOption.PDF_HYPHENATION);
    if (hyhenation != null && hyhenation instanceof Boolean) {
      if (((Boolean)hyhenation).booleanValue()) {
        context.setEnableHyphenation(true);
      }
    }
    Object dpi=options.get(IPDFRenderOption.DPI);
    if (dpi != null && dpi instanceof Integer) {
      int screenDpi=((Integer)dpi).intValue();
      context.setDpi(screenDpi);
    }
  }
}",0.945759368836292
72036,"public TextArea getNextArea(int maxLineWidth){
  if (!hasNextArea()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TextArea textArea=getNextTextArea(maxLineWidth);
  offset+=textArea.getTextLength();
  return textArea;
}","public TextArea getNextArea(int maxLineWidth){
  if (!hasNextArea()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TextArea textArea=getNextTextArea(maxLineWidth);
  offset+=textArea.getTextLength();
  System.out.print(textArea.getText());
  System.out.print(""String_Node_Str"" + offset + ""String_Node_Str"");
  return textArea;
}",0.8118466898954704
72037,"private List<JavaClassField> getFields(Class<?> clazz){
  Method[] methods=clazz.getMethods();
  List<JavaClassField> jsFields=new ArrayList<JavaClassField>();
  List<String> setMethodList=new ArrayList<String>();
  String methodName;
  for (int i=0; i < methods.length; i++) {
    methodName=methods[i].getName();
    if (methodName.startsWith(""String_Node_Str"") && methods[i].getParameterTypes() != null && methods[i].getParameterTypes().length == 1) {
      setMethodList.add(methodName.substring(3));
      continue;
    }
  }
  for (int i=0; i < methods.length; i++) {
    methodName=methods[i].getName();
    if (methods[i].getName().startsWith(""String_Node_Str"") && methods[i].getParameterTypes() != null && methods[i].getParameterTypes().length == 0) {
      if (setMethodList.contains(methodName.substring(3))) {
        Class<?> type=methods[i].getReturnType();
        JavaClassField field=new JavaClassField(methods[i].getDeclaringClass(),getFieldName(methodName),getSimpleName(type),type.isArray());
        if (!jsFields.contains(field))         jsFields.add(field);
      }
    }
  }
  Field[] fields=clazz.getFields();
  for (int i=0; i < fields.length; i++) {
    jsFields.add(new JavaClassField(fields[i]));
  }
  if (clazz.isArray())   jsFields.add(new JavaClassField(clazz,""String_Node_Str"",Integer.TYPE.getName(),false));
  return jsFields;
}","private List<JavaClassField> getFields(Class<?> clazz){
  Method[] methods=clazz.getMethods();
  List<JavaClassField> jsFields=new ArrayList<JavaClassField>();
  List<String> setMethodList=new ArrayList<String>();
  String methodName;
  for (int i=0; i < methods.length; i++) {
    methodName=methods[i].getName();
    if (methodName.startsWith(""String_Node_Str"") && methods[i].getParameterTypes() != null && methods[i].getParameterTypes().length == 1) {
      setMethodList.add(methodName.substring(3));
      continue;
    }
  }
  for (int i=0; i < methods.length; i++) {
    methodName=methods[i].getName();
    if (methods[i].getName().startsWith(""String_Node_Str"") && methods[i].getParameterTypes() != null && methods[i].getParameterTypes().length == 0) {
      if (setMethodList.contains(methodName.substring(3))) {
        Class<?> type=methods[i].getReturnType();
        JavaClassField field=new JavaClassField(methods[i].getDeclaringClass(),getFieldName(methodName),getClazzName(type),type.isArray());
        if (!jsFields.contains(field))         jsFields.add(field);
      }
    }
  }
  Field[] fields=clazz.getFields();
  for (int i=0; i < fields.length; i++) {
    jsFields.add(new JavaClassField(fields[i]));
  }
  if (clazz.isArray())   jsFields.add(new JavaClassField(clazz,""String_Node_Str"",Integer.TYPE.getName(),false));
  return jsFields;
}",0.9959633027522936
72038,"private Object getSimpleName(String name){
  return name.substring(name.lastIndexOf(""String_Node_Str"") + 1);
}","private String getSimpleName(String name){
  return name.substring(name.lastIndexOf(""String_Node_Str"") + 1);
}",0.9545454545454546
72039,"public String getDisplayText(){
  if (displayText == null) {
    StringBuffer strbuf=new StringBuffer(getName());
    strbuf.append(""String_Node_Str"");
    if (field != null && field.getType() != null) {
      strbuf.append(getSimpleName(field.getType()));
      strbuf.append(""String_Node_Str"");
    }
 else     if (type != null) {
      strbuf.append(getSimpleName(this.type.getName()));
      if (isArray) {
        strbuf.append(""String_Node_Str"");
      }
      strbuf.append(""String_Node_Str"");
    }
 else     if (typeName != null) {
      strbuf.append(typeName);
      strbuf.append(""String_Node_Str"");
    }
    if (field == null) {
      strbuf.append(getSimpleName(declareClazz));
    }
 else {
      strbuf.append(getSimpleName(field.getDeclaringClass()));
    }
    displayText=strbuf.toString();
    strbuf=null;
  }
  return displayText;
}","public String getDisplayText(){
  if (displayText == null) {
    StringBuffer strbuf=new StringBuffer(getName());
    strbuf.append(""String_Node_Str"");
    if (field != null && field.getType() != null) {
      strbuf.append(getSimpleName(field.getType()));
      strbuf.append(""String_Node_Str"");
    }
 else     if (type != null) {
      strbuf.append(getSimpleName(this.type.getName()));
      if (isArray) {
        strbuf.append(""String_Node_Str"");
      }
      strbuf.append(""String_Node_Str"");
    }
 else     if (typeName != null) {
      strbuf.append(getSimpleName(typeName));
      strbuf.append(""String_Node_Str"");
    }
    if (field == null) {
      strbuf.append(getSimpleName(declareClazz));
    }
 else {
      strbuf.append(getSimpleName(field.getDeclaringClass()));
    }
    displayText=strbuf.toString();
    strbuf=null;
  }
  return displayText;
}",0.9820289855072464
72040,"public void formatTxt(){
  if (txt == null) {
    return;
  }
 else   if (datatype.equals(Data.DATE)) {
    txt=ExcelUtil.formatDate(txt);
  }
 else   if (datatype.equals(Data.NUMBER) && txt.toString().length() > 31) {
    txt=ExcelUtil.formatNumber(txt);
  }
}","public void formatTxt(){
  if (txt == null) {
    return;
  }
 else   if (datatype.equals(Data.DATE)) {
    txt=ExcelUtil.formatDate(txt);
  }
 else   if (datatype.equals(Data.NUMBER)) {
    Number number=(Number)txt;
    if (ExcelUtil.isBigNumber(number)) {
      txt=ExcelUtil.formatNumberAsScienceNotation(number);
    }
 else     if (txt.toString().length() > 31) {
      txt=ExcelUtil.formatNumberAsDecimal(number);
    }
  }
}",0.7215007215007215
72041,"public static String getType(Object val){
  if (val instanceof Number) {
    if (isNumber(val.toString())) {
      return Data.NUMBER;
    }
 else {
      return Data.STRING;
    }
  }
 else   if (val instanceof Date) {
    return Data.DATE;
  }
 else   if (val instanceof Calendar) {
    return Data.CALENDAR;
  }
 else {
    return Data.STRING;
  }
}","public static String getType(Object val){
  if (val instanceof Number) {
    return Data.NUMBER;
  }
 else   if (val instanceof Date) {
    return Data.DATE;
  }
 else   if (val instanceof Calendar) {
    return Data.CALENDAR;
  }
 else {
    return Data.STRING;
  }
}",0.4032258064516129
72042,"public void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  if (d.getDatatype().equals(Data.NUMBER) && ExcelUtil.isNumber(d.getText())) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (d.getDatatype().equals(Data.DATE)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  d.formatTxt();
  String txt=d.getText();
  if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=capitalize(txt);
  }
 else   if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toUpperCase();
  }
 else   if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toLowerCase();
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}","public void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  if (d.getDatatype().equals(Data.NUMBER)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (d.getDatatype().equals(Data.DATE)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  d.formatTxt();
  String txt=d.getText();
  if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=capitalize(txt);
  }
 else   if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toUpperCase();
  }
 else   if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toLowerCase();
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}",0.9814323607427056
72043,"@Override public void prepare() throws BirtException {
  if (!(handle instanceof ExtendedItemHandle)) {
    return;
  }
  CrosstabReportItemHandle crosstab=(CrosstabReportItemHandle)((ExtendedItemHandle)handle).getReportItem();
  if (crosstab == null) {
    return;
  }
  new CrosstabPreparationHandler(crosstab,context).handle();
}","@Override public void prepare() throws BirtException {
  if (!(handle instanceof ExtendedItemHandle)) {
    return;
  }
  CrosstabReportItemHandle crosstab=(CrosstabReportItemHandle)((ExtendedItemHandle)handle).getReportItem();
  if (crosstab == null) {
    return;
  }
  context.evaluate(""String_Node_Str"");
  new CrosstabPreparationHandler(crosstab,context).handle();
}",0.9445234708392604
72044,"/** 
 * @param dataExpr
 * @param odiResult
 * @param scope
 * @param logger
 * @return
 * @throws BirtException
 */
public static Object evaluateExpression(IBaseExpression dataExpr,IResultIterator odiResult,Scriptable scope) throws BirtException {
  Object exprValue=null;
  if (dataExpr == null)   throw new DataException(ResourceConstants.BAD_DATA_EXPRESSION);
  Object handle=dataExpr.getHandle();
  if (handle instanceof CompiledExpression) {
    CompiledExpression expr=(CompiledExpression)handle;
    Object value=evaluateCompiledExpression(expr,odiResult,scope);
    try {
      if (value instanceof BirtException)       throw (BirtException)value;
      exprValue=DataTypeUtil.convert(value,dataExpr.getDataType());
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
 else   if (handle instanceof ConditionalExpression) {
    ConditionalExpression ce=(ConditionalExpression)handle;
    Object resultExpr=evaluateExpression(ce.getExpression(),odiResult,scope);
    Object[] op1Value=new Object[0], op2Value=new Object[0];
    boolean isCombined=false;
    if (ce.getOperand1() != null) {
      if (ce.getOperand1() instanceof IScriptExpression) {
        op1Value=new Object[1];
        op1Value[0]=evaluateExpression(ce.getOperand1(),odiResult,scope);
      }
 else       if (ce.getOperand1() instanceof IExpressionCollection) {
        isCombined=true;
        Object[] exprs=((IExpressionCollection)ce.getOperand1()).getExpressions().toArray();
        int length=exprs.length;
        Object[] result=new Object[length];
        for (int i=0; i < length; i++) {
          result[i]=evaluateExpression((IBaseExpression)exprs[i],odiResult,scope);
        }
        op1Value=flatternMultipleValues(result);
      }
    }
    if (ce.getOperand2() != null) {
      if (ce.getOperand2() instanceof IScriptExpression) {
        op2Value=new Object[1];
        op2Value[0]=evaluateExpression(ce.getOperand2(),odiResult,scope);
      }
    }
    if (isCombined)     exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),op1Value);
 else     exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),op1Value.length > 0 ? op1Value[0] : null,op2Value.length > 0 ? op2Value[0] : null);
  }
 else {
    DataException e=new DataException(ResourceConstants.INVALID_EXPR_HANDLE);
    throw e;
  }
  if (exprValue instanceof DataExceptionMocker) {
    throw ((DataExceptionMocker)exprValue).getCause();
  }
  return exprValue;
}","/** 
 * @param dataExpr
 * @param odiResult
 * @param scope
 * @param logger
 * @return
 * @throws BirtException
 */
public static Object evaluateExpression(IBaseExpression dataExpr,IResultIterator odiResult,Scriptable scope) throws BirtException {
  Object exprValue=null;
  if (dataExpr == null)   throw new DataException(ResourceConstants.BAD_DATA_EXPRESSION);
  Object handle=dataExpr.getHandle();
  if (handle instanceof CompiledExpression) {
    CompiledExpression expr=(CompiledExpression)handle;
    Object value=evaluateCompiledExpression(expr,odiResult,scope);
    try {
      if (value instanceof BirtException)       throw (BirtException)value;
      exprValue=DataTypeUtil.convert(value,dataExpr.getDataType());
    }
 catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
 else   if (handle instanceof ConditionalExpression) {
    ConditionalExpression ce=(ConditionalExpression)handle;
    Object resultExpr=evaluateExpression(ce.getExpression(),odiResult,scope);
    Object[] op1Value=new Object[0], op2Value=new Object[0];
    boolean isCombined=false;
    if (ce.getOperand1() != null) {
      if (ce.getOperand1() instanceof IScriptExpression) {
        op1Value=new Object[1];
        op1Value[0]=evaluateExpression(ce.getOperand1(),odiResult,scope);
      }
 else       if (ce.getOperand1() instanceof IExpressionCollection) {
        isCombined=true;
        Object[] exprs=((IExpressionCollection)ce.getOperand1()).getExpressions().toArray();
        int length=exprs.length;
        Object[] result=new Object[length];
        for (int i=0; i < length; i++) {
          result[i]=evaluateExpression((IBaseExpression)exprs[i],odiResult,scope);
        }
        op1Value=flatternMultipleValues(result);
      }
    }
    if (ce.getOperand2() != null) {
      if (ce.getOperand2() instanceof IScriptExpression) {
        op2Value=new Object[1];
        op2Value[0]=evaluateExpression(ce.getOperand2(),odiResult,scope);
      }
    }
    if (isCombined)     exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),op1Value);
 else     exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),op1Value.length > 0 ? op1Value[0] : null,op2Value.length > 0 ? op2Value[0] : null);
  }
 else {
    DataException e=new DataException(ResourceConstants.INVALID_EXPR_HANDLE);
    throw e;
  }
  return exprValue;
}",0.9739058968563796
72045,"/** 
 * TODO: need refactoring
 * @param dataExpr
 * @return
 * @throws BirtException
 */
public static Object evaluateValue(IBaseExpression dataExpr,int index,IResultObject roObject,Scriptable scope) throws BirtException {
  Object exprValue=null;
  Object handle=dataExpr == null ? null : dataExpr.getHandle();
  if (handle instanceof CompiledExpression) {
    CompiledExpression expr=(CompiledExpression)handle;
    Object value=evaluateCompiledExpression(expr,index,roObject,scope);
    try {
      exprValue=DataTypeUtil.convert(value,dataExpr.getDataType());
    }
 catch (    BirtException e) {
      throw new DataException(ResourceConstants.INCONVERTIBLE_DATATYPE,new Object[]{value,value.getClass(),DataType.getClass(dataExpr.getDataType())});
    }
  }
 else   if (dataExpr instanceof ConditionalExpression) {
    ConditionalExpression ce=(ConditionalExpression)dataExpr;
    Object resultExpr=evaluateValue(ce.getExpression(),index,roObject,scope);
    Object[] op1Value=new Object[0], op2Value=new Object[0];
    boolean isCombined=false;
    if (ce.getOperand1() != null) {
      if (ce.getOperand1() instanceof IScriptExpression) {
        op1Value=new Object[1];
        op1Value[0]=evaluateValue(ce.getOperand1(),index,roObject,scope);
      }
 else       if (ce.getOperand1() instanceof IExpressionCollection) {
        isCombined=true;
        Object[] exprs=((IExpressionCollection)ce.getOperand1()).getExpressions().toArray();
        int length=exprs.length;
        Object[] result=new Object[length];
        for (int i=0; i < length; i++) {
          result[i]=evaluateValue((IBaseExpression)exprs[i],index,roObject,scope);
        }
        op1Value=flatternMultipleValues(result);
      }
    }
    if (ce.getOperand2() != null) {
      if (ce.getOperand2() instanceof IScriptExpression) {
        op2Value=new Object[1];
        op2Value[0]=evaluateValue(ce.getOperand2(),index,roObject,scope);
      }
 else       if (ce.getOperand2() instanceof IExpressionCollection) {
        Object[] exprs=((IExpressionCollection)ce.getOperand2()).getExpressions().toArray();
        int length=exprs.length;
        Object[] result=new Object[length];
        for (int i=0; i < length; i++) {
          result[i]=evaluateValue((IBaseExpression)exprs[i],index,roObject,scope);
        }
        op2Value=flatternMultipleValues(result);
      }
    }
    if (isCombined)     exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),op1Value);
 else     exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),op1Value.length > 0 ? op1Value[0] : null,op2Value.length > 0 ? op2Value[0] : null);
  }
 else {
    DataException e=new DataException(ResourceConstants.INVALID_EXPR_HANDLE);
    throw e;
  }
  if (exprValue instanceof DataExceptionMocker) {
    throw ((DataExceptionMocker)exprValue).getCause();
  }
  return exprValue;
}","/** 
 * TODO: need refactoring
 * @param dataExpr
 * @return
 * @throws BirtException
 */
public static Object evaluateValue(IBaseExpression dataExpr,int index,IResultObject roObject,Scriptable scope) throws BirtException {
  Object exprValue=null;
  Object handle=dataExpr == null ? null : dataExpr.getHandle();
  if (handle instanceof CompiledExpression) {
    CompiledExpression expr=(CompiledExpression)handle;
    Object value=evaluateCompiledExpression(expr,index,roObject,scope);
    try {
      exprValue=DataTypeUtil.convert(value,dataExpr.getDataType());
    }
 catch (    BirtException e) {
      throw new DataException(ResourceConstants.INCONVERTIBLE_DATATYPE,new Object[]{value,value.getClass(),DataType.getClass(dataExpr.getDataType())});
    }
  }
 else   if (dataExpr instanceof ConditionalExpression) {
    ConditionalExpression ce=(ConditionalExpression)dataExpr;
    Object resultExpr=evaluateValue(ce.getExpression(),index,roObject,scope);
    Object[] op1Value=new Object[0], op2Value=new Object[0];
    boolean isCombined=false;
    if (ce.getOperand1() != null) {
      if (ce.getOperand1() instanceof IScriptExpression) {
        op1Value=new Object[1];
        op1Value[0]=evaluateValue(ce.getOperand1(),index,roObject,scope);
      }
 else       if (ce.getOperand1() instanceof IExpressionCollection) {
        isCombined=true;
        Object[] exprs=((IExpressionCollection)ce.getOperand1()).getExpressions().toArray();
        int length=exprs.length;
        Object[] result=new Object[length];
        for (int i=0; i < length; i++) {
          result[i]=evaluateValue((IBaseExpression)exprs[i],index,roObject,scope);
        }
        op1Value=flatternMultipleValues(result);
      }
    }
    if (ce.getOperand2() != null) {
      if (ce.getOperand2() instanceof IScriptExpression) {
        op2Value=new Object[1];
        op2Value[0]=evaluateValue(ce.getOperand2(),index,roObject,scope);
      }
 else       if (ce.getOperand2() instanceof IExpressionCollection) {
        Object[] exprs=((IExpressionCollection)ce.getOperand2()).getExpressions().toArray();
        int length=exprs.length;
        Object[] result=new Object[length];
        for (int i=0; i < length; i++) {
          result[i]=evaluateValue((IBaseExpression)exprs[i],index,roObject,scope);
        }
        op2Value=flatternMultipleValues(result);
      }
    }
    if (isCombined)     exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),op1Value);
 else     exprValue=ScriptEvalUtil.evalConditionalExpr(resultExpr,ce.getOperator(),op1Value.length > 0 ? op1Value[0] : null,op2Value.length > 0 ? op2Value[0] : null);
  }
 else {
    DataException e=new DataException(ResourceConstants.INVALID_EXPR_HANDLE);
    throw e;
  }
  return exprValue;
}",0.97751814480439
72046,"public Object getValue(String exprName) throws BirtException {
  checkStarted();
  logger.logp(Level.FINER,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(exprName));
  if (this.isFirstRowPepared) {
    if (this.isEmpty())     this.next();
 else     this.prepareCurrentRow();
  }
  if (!this.boundColumnValueMap.containsKey(exprName)) {
    if (this.resultService.getBindingExpr(exprName) != null) {
      return prepareBindingColumn(exprName);
    }
    throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,exprName);
  }
  Object exprValue=boundColumnValueMap.get(exprName);
  if (exprValue instanceof BirtException)   throw (BirtException)exprValue;
  if (exprValue instanceof DataExceptionMocker)   throw ((DataExceptionMocker)exprValue).getCause();
  return exprValue;
}","public Object getValue(String exprName) throws BirtException {
  checkStarted();
  logger.logp(Level.FINER,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(exprName));
  if (this.isFirstRowPepared) {
    if (this.isEmpty())     this.next();
 else     this.prepareCurrentRow();
  }
  if (!this.boundColumnValueMap.containsKey(exprName)) {
    if (this.resultService.getBindingExpr(exprName) != null) {
      return prepareBindingColumn(exprName);
    }
    throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,exprName);
  }
  Object exprValue=boundColumnValueMap.get(exprName);
  if (exprValue instanceof BirtException)   throw (BirtException)exprValue;
  return exprValue;
}",0.9260450160771704
72047,"public Object get(String name,Scriptable scope){
  if (ScriptConstants.OUTER_RESULT_KEYWORD.equalsIgnoreCase(name)) {
    if (this.parentHelper == null) {
      return new DataExceptionMocker(new DataException(ResourceConstants.NO_OUTER_RESULTS_EXIST));
    }
 else     return this.parentHelper.getScriptable();
  }
  try {
    return this.currentIterator.getValue(name);
  }
 catch (  BirtException e) {
    return e;
  }
}","public Object get(String name,Scriptable scope){
  if (ScriptConstants.OUTER_RESULT_KEYWORD.equalsIgnoreCase(name)) {
    if (this.parentHelper == null) {
      throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.NO_OUTER_RESULTS_EXIST));
    }
 else     return this.parentHelper.getScriptable();
  }
  try {
    return this.currentIterator.getValue(name);
  }
 catch (  BirtException e) {
    return e;
  }
}",0.8744292237442922
72048,"public Object evaluate(Context context,Scriptable scope) throws DataException {
  Object temp=this.script.exec(context,scope);
  temp=JavascriptEvalUtil.convertJavascriptValue(temp);
  if (temp instanceof ScriptableObject) {
    if (temp instanceof DataExceptionMocker)     throw DataException.wrap(((DataExceptionMocker)temp).getCause());
    return ((ScriptableObject)temp).getDefaultValue(null);
  }
  return temp;
}","public Object evaluate(Context context,Scriptable scope) throws DataException {
  Object temp=this.script.exec(context,scope);
  temp=JavascriptEvalUtil.convertJavascriptValue(temp);
  if (temp instanceof ScriptableObject) {
    return ((ScriptableObject)temp).getDefaultValue(null);
  }
  return temp;
}",0.6832641770401107
72049,"public Object get(String name,Scriptable start){
  if (ScriptConstants.OUTER_RESULT_KEYWORD.equalsIgnoreCase(name)) {
    if (parent == null) {
      return new DataExceptionMocker(new DataException(ResourceConstants.NO_OUTER_RESULTS_EXIST));
    }
 else {
      return parent;
    }
  }
  if (valueCacheMap.containsKey(name))   return valueCacheMap.get(name);
  try {
    IBaseExpression baseExpr=exprManager.getExpr(name);
    Object value=ExprEvaluateUtil.evaluateRawExpression(baseExpr,scope);
    Object obValue=JavascriptEvalUtil.convertToJavascriptValue(value,scope);
    valueCacheMap.put(name,obValue);
    return obValue;
  }
 catch (  BirtException e) {
    return null;
  }
}","public Object get(String name,Scriptable start){
  if (ScriptConstants.OUTER_RESULT_KEYWORD.equalsIgnoreCase(name)) {
    if (parent == null) {
      throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.NO_OUTER_RESULTS_EXIST));
    }
 else {
      return parent;
    }
  }
  if (valueCacheMap.containsKey(name))   return valueCacheMap.get(name);
  try {
    IBaseExpression baseExpr=exprManager.getExpr(name);
    Object value=ExprEvaluateUtil.evaluateRawExpression(baseExpr,scope);
    Object obValue=JavascriptEvalUtil.convertToJavascriptValue(value,scope);
    valueCacheMap.put(name,obValue);
    return obValue;
  }
 catch (  BirtException e) {
    return null;
  }
}",0.9215406562054208
72050,"public Object get(String name,Scriptable start){
  if (ScriptConstants.OUTER_RESULT_KEYWORD.equalsIgnoreCase(name)) {
    if (this.helper.getParent() != null)     return helper.getParent().getScriptable();
 else     return new DataExceptionMocker(new DataException(ResourceConstants.NO_OUTER_RESULTS_EXIST));
  }
  int rowIndex=-1;
  try {
    rowIndex=odiResult.getCurrentResultIndex();
  }
 catch (  BirtException e1) {
  }
  if (ScriptConstants.ROW_NUM_KEYWORD.equalsIgnoreCase(name) || ""String_Node_Str"".equalsIgnoreCase(name)) {
    return new Integer(rowIndex);
  }
  if (rowIndex == currRowIndex && valueCacheMap.containsKey(name)) {
    return valueCacheMap.get(name);
  }
 else {
    Object value=null;
    try {
      IBinding binding=this.exprManager.getBinding(name);
      if (binding == null) {
        return new DataExceptionMocker(new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name));
      }
      if (binding.getAggrFunction() != null)       return this.odiResult.getAggrValue(name);
      IBaseExpression dataExpr=this.exprManager.getExpr(name);
      if (dataExpr == null) {
        return new DataExceptionMocker(new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name));
      }
      value=ExprEvaluateUtil.evaluateValue(dataExpr,this.odiResult.getCurrentResultIndex(),this.odiResult.getCurrentResult(),this.scope);
      value=JavascriptEvalUtil.convertToJavascriptValue(DataTypeUtil.convert(value,binding.getDataType()),this.scope);
    }
 catch (    BirtException e) {
      value=null;
    }
    if (this.currRowIndex != rowIndex) {
      this.valueCacheMap.clear();
      this.currRowIndex=rowIndex;
    }
    valueCacheMap.put(name,value);
    return value;
  }
}","public Object get(String name,Scriptable start){
  if (ScriptConstants.OUTER_RESULT_KEYWORD.equalsIgnoreCase(name)) {
    if (this.helper.getParent() != null)     return helper.getParent().getScriptable();
 else     throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.NO_OUTER_RESULTS_EXIST));
  }
  int rowIndex=-1;
  try {
    rowIndex=odiResult.getCurrentResultIndex();
  }
 catch (  BirtException e1) {
  }
  if (ScriptConstants.ROW_NUM_KEYWORD.equalsIgnoreCase(name) || ""String_Node_Str"".equalsIgnoreCase(name)) {
    return new Integer(rowIndex);
  }
  if (rowIndex == currRowIndex && valueCacheMap.containsKey(name)) {
    return valueCacheMap.get(name);
  }
 else {
    Object value=null;
    try {
      IBinding binding=this.exprManager.getBinding(name);
      if (binding == null) {
        throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.INVALID_BOUND_COLUMN_NAME,new String[]{name}));
      }
      if (binding.getAggrFunction() != null)       return this.odiResult.getAggrValue(name);
      IBaseExpression dataExpr=this.exprManager.getExpr(name);
      if (dataExpr == null) {
        throw Context.reportRuntimeError(DataResourceHandle.getInstance().getMessage(ResourceConstants.INVALID_BOUND_COLUMN_NAME,new String[]{name}));
      }
      value=ExprEvaluateUtil.evaluateValue(dataExpr,this.odiResult.getCurrentResultIndex(),this.odiResult.getCurrentResult(),this.scope);
      value=JavascriptEvalUtil.convertToJavascriptValue(DataTypeUtil.convert(value,binding.getDataType()),this.scope);
    }
 catch (    BirtException e) {
      value=null;
    }
    if (this.currRowIndex != rowIndex) {
      this.valueCacheMap.clear();
      this.currRowIndex=rowIndex;
    }
    valueCacheMap.put(name,value);
    return value;
  }
}",0.8992117117117117
72051,"/** 
 * Gets a named property
 */
public Object get(String name,Scriptable start){
  logger.entering(JSRowObject.class.getName(),""String_Node_Str"",name);
  if (name.equals(DATA_SET)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"");
    return dataSet.getJSDataSetObject();
  }
 else   if (name.equals(COLUMN_MD)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",getColumnMetadataScriptable());
    return getColumnMetadataScriptable();
  }
 else   if (name.equals(ROW_POSITION)) {
    try {
      return new Integer(dataSet.getCurrentRowIndex());
    }
 catch (    DataException e) {
      logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    }
  }
  try {
    if (dataSet.getCurrentRow() == null)     return null;
    Object value=dataSet.getDataRow().getColumnValue(name);
    return JavascriptEvalUtil.convertToJavascriptValue(value,dataSet.getSharedScope());
  }
 catch (  BirtException e) {
    logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    return new DataExceptionMocker(e);
  }
}","/** 
 * Gets a named property
 */
public Object get(String name,Scriptable start){
  logger.entering(JSRowObject.class.getName(),""String_Node_Str"",name);
  if (name.equals(DATA_SET)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"");
    return dataSet.getJSDataSetObject();
  }
 else   if (name.equals(COLUMN_MD)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",getColumnMetadataScriptable());
    return getColumnMetadataScriptable();
  }
 else   if (name.equals(ROW_POSITION)) {
    try {
      return new Integer(dataSet.getCurrentRowIndex());
    }
 catch (    DataException e) {
      logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    }
  }
  try {
    if (dataSet.getCurrentRow() == null)     return null;
    Object value=dataSet.getDataRow().getColumnValue(name);
    return JavascriptEvalUtil.convertToJavascriptValue(value,dataSet.getSharedScope());
  }
 catch (  BirtException e) {
    logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    throw Context.reportRuntimeError(e.getLocalizedMessage());
  }
}",0.966804979253112
72052,"/** 
 * Evaluates a ROM script and converts the result type into one accepted by BIRT: Double (for all numeric types), java.util.Date, String, Boolean. Converts Javascript exception and script runtime exceptions to DataException
 * @param cx
 * @param scope
 * @param scriptText
 * @param source
 * @param lineNo
 * @return
 * @throws DataException
 */
public static Object evaluateJSAsExpr(Context cx,Scriptable scope,String scriptText,String source,int lineNo) throws DataException {
  if (logger.isLoggable(Level.FINER))   logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + scriptText + ""String_Node_Str""+ source+ ""String_Node_Str""+ lineNo);
  Object result;
  try {
    result=JavascriptEvalUtil.evaluateScript(cx,scope,scriptText,source,lineNo);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  if (result instanceof DataExceptionMocker) {
    throw DataException.wrap(((DataExceptionMocker)result).getCause());
  }
  return result;
}","/** 
 * Evaluates a ROM script and converts the result type into one accepted by BIRT: Double (for all numeric types), java.util.Date, String, Boolean. Converts Javascript exception and script runtime exceptions to DataException
 * @param cx
 * @param scope
 * @param scriptText
 * @param source
 * @param lineNo
 * @return
 * @throws DataException
 */
public static Object evaluateJSAsExpr(Context cx,Scriptable scope,String scriptText,String source,int lineNo) throws DataException {
  if (logger.isLoggable(Level.FINER))   logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + scriptText + ""String_Node_Str""+ source+ ""String_Node_Str""+ lineNo);
  Object result;
  try {
    result=JavascriptEvalUtil.evaluateScript(cx,scope,scriptText,source,lineNo);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  return result;
}",0.92027822364901
72053,"public static String formatDate(Object data){
  if (data == null) {
    return null;
  }
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  Date date=null;
  if (data instanceof com.ibm.icu.util.Calendar) {
    date=((com.ibm.icu.util.Calendar)data).getTime();
  }
 else   if (data instanceof Date) {
    date=(Date)data;
  }
 else {
    return null;
  }
  return dateFormat.format(date);
}","public static String formatDate(Object data){
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  Date date=getDate(data);
  if (date == null) {
    return null;
  }
  return dateFormat.format(date);
}",0.6277602523659306
72054,"public void addDateTime(Object txt,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  Rule rule=getCurrentContainer().getRule();
  StyleEntry entry=engine.getStyle(style,rule);
  Data data=null;
  txt=((IDataContent)txt).getValue();
  data=createDateData(txt,entry,style.getDateTimeFormat());
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  data.setRule(rule);
  addData(data);
}","public void addDateTime(Object txt,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  Rule rule=getCurrentContainer().getRule();
  StyleEntry entry=engine.getStyle(style,rule);
  Data data=null;
  IDataContent dataContent=(IDataContent)txt;
  Object value=dataContent.getValue();
  Date date=ExcelUtil.getDate(value);
  if (date != null && date.getYear() >= 0) {
    data=createDateData(value,entry,style.getDateTimeFormat());
    data.setHyperlinkDef(link);
    data.setBookmark(bookmark);
    data.setRule(rule);
    addData(data);
  }
 else {
    addData(dataContent.getText(),style,link,bookmark);
  }
}",0.4613861386138614
72055,"/** 
 * @return
 * @throws DataException
 */
private boolean loadFromCache() throws DataException {
  if (this.dataSource == null)   return false;
  if (!(this.baseQueryDefn instanceof IQueryDefinition))   return false;
  return this.session.getDataSetCacheManager().doesLoadFromCache(this.dataSource.getDesign(),this.dataSet.getDesign(),new ParameterUtil(this.tabularOuterResults == null ? null : this.tabularOuterResults.getQueryScope(),this.dataSet,(IQueryDefinition)this.baseQueryDefn,this.getQueryScope()).resolveDataSetParameters(true),this.queryAppContext);
}","/** 
 * @return
 * @throws DataException
 */
private boolean loadFromCache() throws DataException {
  if (!(this.baseQueryDefn instanceof IQueryDefinition))   return false;
  return this.session.getDataSetCacheManager().doesLoadFromCache(this.dataSource == null ? null : this.dataSource.getDesign(),this.dataSet.getDesign(),new ParameterUtil(this.tabularOuterResults == null ? null : this.tabularOuterResults.getQueryScope(),this.dataSet,(IQueryDefinition)this.baseQueryDefn,this.getQueryScope()).resolveDataSetParameters(true),this.queryAppContext);
}",0.2772808586762075
72056,"/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
        paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
        paramBindingCandidates.put(modelParam.getName(),new ExpressionAdapter(defaultValueExpr,org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType())));
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),new ExpressionAdapter(modelParamBinding.getExpression(),DataType.ANY_TYPE));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ExpressionAdapter expression=(ExpressionAdapter)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}",0.9209176788124156
72057,"/** 
 * Constructs instance based on param name and expression 
 */
public InputParamBindingAdapter(String paramName,String bindingExpr){
  super(paramName,new ExpressionAdapter(bindingExpr,DataType.ANY_TYPE));
}","/** 
 * Constructs instance base on param name, expression, and type.
 * @param paramName
 * @param bindingExpr
 * @param type
 */
public InputParamBindingAdapter(String paramName,ExpressionAdapter bindingExpr){
  super(paramName,bindingExpr);
}",0.5382932166301969
72058,"/** 
 * @param modelDataSet
 * @param dteDataSet
 * @return
 */
private Iterator populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName());
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        dteDataSet.addParameter(newParam(modelParam));
        paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
      }
 else {
        dteDataSet.addParameter(newParam(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
    }
  }
  return elmtIter;
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 * @return
 */
private Iterator populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName());
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        dteDataSet.addParameter(newParam(modelParam));
        paramBindingCandidates.put(modelParam.getName(),new ScriptExpression(defaultValueExpr,DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType())));
      }
 else {
        dteDataSet.addParameter(newParam(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),new ScriptExpression(modelParamBinding.getExpression()));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ScriptExpression expression=(ScriptExpression)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
    }
  }
  return elmtIter;
}",0.9388092613009924
72059,"/** 
 * Creates a new DtE API IParameterDefinition from a model's DataSetParameterHandle.
 */
IParameterDefinition newParam(DataSetParameterHandle modelParam){
  ParameterDefinition dteParam=new ParameterDefinition();
  dteParam.setName(modelParam.getName());
  if (modelParam.getPosition() != null)   dteParam.setPosition(modelParam.getPosition().intValue());
  if (modelParam.getNativeDataType() != null)   dteParam.setNativeType(modelParam.getNativeDataType().intValue());
  if (modelParam instanceof OdaDataSetParameterHandle) {
    dteParam.setNativeName(((OdaDataSetParameterHandle)modelParam).getNativeName());
  }
  dteParam.setType(toDteDataType(modelParam.getDataType()));
  dteParam.setInputMode(modelParam.isInput());
  dteParam.setOutputMode(modelParam.isOutput());
  dteParam.setNullable(modelParam.allowNull());
  dteParam.setInputOptional(modelParam.isOptional());
  dteParam.setDefaultInputValue(modelParam.getDefaultValue());
  return dteParam;
}","/** 
 * Creates a new DtE API IParameterDefinition from a model's DataSetParameterHandle.
 */
IParameterDefinition newParam(DataSetParameterHandle modelParam){
  ParameterDefinition dteParam=new ParameterDefinition();
  dteParam.setName(modelParam.getName());
  if (modelParam.getPosition() != null)   dteParam.setPosition(modelParam.getPosition().intValue());
  if (modelParam.getNativeDataType() != null)   dteParam.setNativeType(modelParam.getNativeDataType().intValue());
  if (modelParam instanceof OdaDataSetParameterHandle) {
    dteParam.setNativeName(((OdaDataSetParameterHandle)modelParam).getNativeName());
  }
  dteParam.setType(DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType()));
  dteParam.setInputMode(modelParam.isInput());
  dteParam.setOutputMode(modelParam.isOutput());
  dteParam.setNullable(modelParam.allowNull());
  dteParam.setInputOptional(modelParam.isOptional());
  dteParam.setDefaultInputValue(modelParam.getDefaultValue());
  return dteParam;
}",0.9642492339121552
72060,"private IInputParameterBinding newInputParamBinding(String paramName,String paramValue){
  if (paramValue == null)   return null;
  ScriptExpression paramValueExpr=new ScriptExpression(paramValue);
  return new InputParameterBinding(paramName,paramValueExpr);
}","private IInputParameterBinding newInputParamBinding(String paramName,ScriptExpression paramValueExpr){
  if (paramValueExpr == null)   return null;
  return new InputParameterBinding(paramName,paramValueExpr);
}",0.7966101694915254
72061,"public boolean exportable() throws DataException {
  return this.exportable();
}","public boolean exportable() throws DataException {
  return this.exportable;
}",0.9873417721518988
72062,"public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  if (shutdownListenerList != null) {
    for (int i=0; i < shutdownListenerList.size(); i++) {
      ((IShutdownListener)shutdownListenerList.get(i)).dataEngineShutdown();
    }
    shutdownListenerList.clear();
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  clearTempFile();
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}","public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  if (shutdownListenerList != null) {
    for (int i=0; i < shutdownListenerList.size(); i++) {
      ((IShutdownListener)shutdownListenerList.get(i)).dataEngineShutdown();
    }
    shutdownListenerList.clear();
  }
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  clearTempFile();
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}",0.6115618661257607
72063,"protected IResultIterator executeOdiQuery(IEventHandler eventHandler,StopSign stopSign) throws DataException {
  customDataSet.open();
  dataSet.afterOpen();
  ICandidateQuery candidateQuery=(ICandidateQuery)odiQuery;
  return candidateQuery.execute(eventHandler,stopSign);
}","protected IResultIterator executeOdiQuery(IEventHandler eventHandler,StopSign stopSign) throws DataException {
  customDataSet.open();
  dataSetAfterOpen();
  ICandidateQuery candidateQuery=(ICandidateQuery)odiQuery;
  return candidateQuery.execute(eventHandler,stopSign);
}",0.6484517304189436
72064,"public void close(){
  if (odiQuery == null) {
    logger.logp(Level.FINER,QueryExecutor.class.getName(),""String_Node_Str"",""String_Node_Str"");
    return;
  }
  try {
    dataSet.beforeClose();
  }
 catch (  DataException e) {
    logger.logp(Level.FINE,QueryExecutor.class.getName(),""String_Node_Str"",e.getMessage(),e);
  }
  if (odiResult != null) {
    try {
      odiResult.close();
    }
 catch (    DataException e1) {
      e1.printStackTrace();
    }
  }
  odiQuery.close();
  try {
    dataSet.close();
  }
 catch (  DataException e) {
    logger.logp(Level.FINE,QueryExecutor.class.getName(),""String_Node_Str"",e.getMessage(),e);
  }
  odiQuery=null;
  odiDataSource=null;
  odiResult=null;
  queryScope=null;
  isPrepared=false;
  isExecuted=false;
  try {
    dataSet.afterClose();
  }
 catch (  DataException e) {
    logger.logp(Level.FINE,QueryExecutor.class.getName(),""String_Node_Str"",e.getMessage(),e);
  }
  dataSet=null;
  dataSource=null;
  logger.logp(Level.FINER,QueryExecutor.class.getName(),""String_Node_Str"",""String_Node_Str"");
}","public void close(){
  if (odiQuery == null) {
    logger.logp(Level.FINER,QueryExecutor.class.getName(),""String_Node_Str"",""String_Node_Str"");
    return;
  }
  try {
    dataSetBeforeClose();
  }
 catch (  DataException e) {
    logger.logp(Level.FINE,QueryExecutor.class.getName(),""String_Node_Str"",e.getMessage(),e);
  }
  if (odiResult != null) {
    try {
      odiResult.close();
    }
 catch (    DataException e1) {
      e1.printStackTrace();
    }
  }
  odiQuery.close();
  try {
    dataSet.close();
  }
 catch (  DataException e) {
    logger.logp(Level.FINE,QueryExecutor.class.getName(),""String_Node_Str"",e.getMessage(),e);
  }
  odiQuery=null;
  odiDataSource=null;
  odiResult=null;
  queryScope=null;
  isPrepared=false;
  isExecuted=false;
  try {
    dataSetAfterClose();
  }
 catch (  DataException e) {
    logger.logp(Level.FINE,QueryExecutor.class.getName(),""String_Node_Str"",e.getMessage(),e);
  }
  dataSet=null;
  dataSource=null;
  logger.logp(Level.FINER,QueryExecutor.class.getName(),""String_Node_Str"",""String_Node_Str"");
}",0.9971509971509972
72065,"private void init(){
  if (debugScript) {
    server=new ReportVMServer();
    server.addVMListener(this);
    Context cx=Context.enter();
    try {
      server.start(getListenPort(),cx);
    }
 catch (    VMException e1) {
      throw new Error(Messages.getString(""String_Node_Str""));
    }
  }
  engineConfig=new LauncherEngineConfig();
  engineConfig.setEngineHome(getEngineHome());
  try {
    Platform.startup(engineConfig);
  }
 catch (  BirtException e) {
    throw new Error(Messages.getString(""String_Node_Str""));
  }
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  configEngine();
  this.engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
}","private void init(){
  if (debugScript) {
    server=new ReportVMServer();
    server.addVMListener(this);
    Context cx=Context.enter();
    try {
      server.start(getListenPort(),cx);
    }
 catch (    VMException e1) {
      throw new Error(Messages.getString(""String_Node_Str""));
    }
  }
  engineConfig=new LauncherEngineConfig();
  engineConfig.setEngineHome(getEngineHome());
  try {
    Platform.startup(engineConfig);
  }
 catch (  BirtException e) {
    throw new Error(Messages.getString(""String_Node_Str""));
  }
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  configEngine();
  this.engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
  initParameters();
}",0.9873417721518988
72066,"private void addParameter(Map map,String key,String value){
  String temp=key.substring(ATTR_PARAMRTER.length());
  map.put(temp,value);
}","private void addParameter(Map map,String key,String value){
  String temp=key.substring(ATTR_PARAMRTER.length());
  map.put(temp,getParameterObject(temp,value));
}",0.9169435215946844
72067,"private void initParameters(){
  Properties propertys=System.getProperties();
  Iterator itor=propertys.keySet().iterator();
  while (itor.hasNext()) {
    String str=(String)itor.next();
    if (str.startsWith(ATTR_PARAMRTER)) {
      addParameter(paramValues,str,propertys.getProperty(str));
    }
 else     if (str.startsWith(ATTR_MULPARAMRTER + ""String_Node_Str"")) {
      addMulitipleParameter(paramValues,str,propertys.getProperty(str));
    }
  }
}","private void initParameters(){
  if (allParameters == null) {
    allParameters=new ArrayList();
    IReportRunnable runnable;
    try {
      runnable=engine.openReportDesign(reportDesignFile);
      List list=runnable.getDesignHandle().getRoot().getParametersAndParameterGroups();
      initAllParameters(allParameters,list);
    }
 catch (    EngineException e) {
    }
  }
  Properties propertys=System.getProperties();
  Iterator itor=propertys.keySet().iterator();
  while (itor.hasNext()) {
    String str=(String)itor.next();
    if (str.startsWith(ATTR_PARAMRTER)) {
      addParameter(paramValues,str,propertys.getProperty(str));
    }
 else     if (str.startsWith(ATTR_MULPARAMRTER + ""String_Node_Str"")) {
      addMulitipleParameter(paramValues,str,propertys.getProperty(str));
    }
  }
}",0.7245222929936306
72068,"public ReportLauncher(){
  reportDesignFile=getFileName();
  debugScript=(getDebugType() & DEBUG_TYPE_JAVA_SCRIPT) == DEBUG_TYPE_JAVA_SCRIPT;
  targetFormat=getTargetFormat();
  initParameters();
}","public ReportLauncher(){
  reportDesignFile=getFileName();
  debugScript=(getDebugType() & DEBUG_TYPE_JAVA_SCRIPT) == DEBUG_TYPE_JAVA_SCRIPT;
  targetFormat=getTargetFormat();
}",0.946524064171123
72069,"private void addMulitipleParameter(Map map,String key,String value){
  List list=new ArrayList();
  String temp=key.substring(ATTR_MULPARAMRTER.length() + 1);
  list.add(value);
  int i=1;
  Properties propertys=System.getProperties();
  Set set=propertys.keySet();
  while (set.contains(ATTR_MULPARAMRTER + i + temp)) {
    list.add(propertys.get(ATTR_MULPARAMRTER + i + temp));
    i++;
  }
  Object[] objs=new Object[list.size()];
  list.toArray(objs);
  map.put(temp,objs);
}","private void addMulitipleParameter(Map map,String key,String value){
  List list=new ArrayList();
  String temp=key.substring(ATTR_MULPARAMRTER.length() + 1);
  list.add(getParameterObject(temp,value));
  int i=1;
  Properties propertys=System.getProperties();
  Set set=propertys.keySet();
  while (set.contains(ATTR_MULPARAMRTER + i + temp)) {
    list.add(getParameterObject(temp,(String)propertys.get(ATTR_MULPARAMRTER + i + temp)));
    i++;
  }
  Object[] objs=new Object[list.size()];
  list.toArray(objs);
  map.put(temp,objs);
}",0.9429133858267716
72070,"/** 
 * Creates scalar parameter.
 * @param paramHandle
 * @return scalar parameter.
 */
private ScalarParameter createScalarParameter(ScalarParameterHandle paramHandle){
  ScalarParameter param=null;
  String controlType=paramHandle.getControlType();
  if (controlType.equals(LIST_BOX)) {
    boolean mustMatch=paramHandle.isMustMatch();
    if (mustMatch) {
      param=new ListBoxParameter(paramHandle,task);
    }
 else {
      param=new ComboBoxParameter(paramHandle,task);
    }
  }
 else   if (controlType.equals(TEXT_BOX)) {
    param=new StaticTextParameter(paramHandle,task);
  }
 else   if (controlType.equals(RADIO_BUTTON)) {
    param=new RadioParameter(paramHandle,task);
  }
  return param;
}","/** 
 * Creates scalar parameter.
 * @param paramHandle
 * @return scalar parameter.
 */
private ScalarParameter createScalarParameter(ScalarParameterHandle paramHandle){
  ScalarParameter param=null;
  String controlType=paramHandle.getControlType();
  if (controlType.equals(LIST_BOX)) {
    boolean mustMatch=paramHandle.isMustMatch();
    if (mustMatch) {
      param=new ListBoxParameter(paramHandle,task);
    }
 else {
      param=new ComboBoxParameter(paramHandle,task);
    }
  }
 else   if (controlType.equals(TEXT_BOX)) {
    param=new StaticTextParameter(paramHandle,task);
  }
 else   if (controlType.equals(RADIO_BUTTON)) {
    param=new RadioParameter(paramHandle,task);
  }
 else   if (controlType.equals(CHECK_BOX)) {
    param=new StaticTextParameter(paramHandle,task);
  }
  return param;
}",0.9155672823218998
72071,"public void setPagebreakPaginationOnly(boolean pageBreakPaginationOnly){
  this.pageBreakPaginationOnly=pageBreakPaginationOnly;
}","public void setPagebreakPaginationOnly(boolean pageBreakPaginationOnly){
  this.pageBreakPaginationOnly=pageBreakPaginationOnly;
  setAutoPageBreak(!pageBreakPaginationOnly);
}",0.8496732026143791
72072,"public boolean canLeaveThePage(){
  if (isDirty()) {
    MessageDialog prefDialog=new MessageDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),null,Messages.getString(""String_Node_Str""),MessageDialog.INFORMATION,new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},0);
    int ret=prefDialog.open();
switch (ret) {
case 0:
      isLeaving=true;
    getReportEditor().doSave(null);
  break;
case 1:
if (getEditorInput() != null) {
  this.setInput(getEditorInput());
}
break;
case 2:
return false;
}
}
int errorLine=getErrorLIine(false);
if (errorLine > -1) {
if (errorDetail != null && errorDetail.getErrorCode().equals(ErrorDetail.DESIGN_EXCEPTION_UNSUPPORTED_VERSION)) {
MessageDialog.openError(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),errorDetail.getMessage());
}
 else {
MessageDialog.openError(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
}
setFocus();
setHighlightLine(errorLine);
return false;
}
return true;
}","public boolean canLeaveThePage(){
  if (isDirty()) {
    MessageDialog prefDialog=new MessageDialog(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),null,Messages.getString(""String_Node_Str""),MessageDialog.INFORMATION,new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},0);
    int ret=prefDialog.open();
switch (ret) {
case 0:
      isLeaving=true;
    getReportEditor().doSave(null);
  break;
case 1:
if (getEditorInput() != null) {
  this.setInput(getEditorInput());
}
clearDirtyFlag();
break;
case 2:
return false;
}
}
int errorLine=getErrorLIine(false);
if (errorLine > -1) {
if (errorDetail != null && errorDetail.getErrorCode().equals(ErrorDetail.DESIGN_EXCEPTION_UNSUPPORTED_VERSION)) {
MessageDialog.openError(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),errorDetail.getMessage());
}
 else {
MessageDialog.openError(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
}
setFocus();
setHighlightLine(errorLine);
return false;
}
return true;
}",0.9920071047957372
72073,"/** 
 * load report item emitters extension definitions
 */
protected void loadEmitterExtensionDefns(){
  IExtension[] exts=getExtensions(EXTENSION_POINT_EMITTERS);
  if (exts == null) {
    return;
  }
  for (int i=0; i < exts.length; i++) {
    String namespace=exts[i].getNamespace();
    IConfigurationElement[] configs=exts[i].getConfigurationElements();
    for (int j=0; j < configs.length; j++) {
      String format=configs[j].getAttribute(""String_Node_Str"");
      String mimeType=configs[j].getAttribute(""String_Node_Str"");
      String id=configs[j].getAttribute(""String_Node_Str"");
      String pagination=configs[j].getAttribute(""String_Node_Str"");
      String icon=configs[j].getAttribute(""String_Node_Str"");
      Boolean outDisplayNone=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      String fileExtension=configs[j].getAttribute(""String_Node_Str"");
      Boolean isHidden=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      EmitterInfo emitterInfo=new EmitterInfo(format,id,pagination,mimeType,icon,namespace,fileExtension,outDisplayNone,isHidden,configs[j]);
      emitterExtensions.add(emitterInfo);
      assert(format != null);
      formats.put(format.toLowerCase(),emitterInfo);
      emitters.put(id,emitterInfo);
      logger.log(Level.FINE,""String_Node_Str"",new String[]{format,id});
    }
  }
}","/** 
 * load report item emitters extension definitions
 */
protected void loadEmitterExtensionDefns(){
  IExtension[] exts=getExtensions(EXTENSION_POINT_EMITTERS);
  if (exts == null) {
    return;
  }
  for (int i=0; i < exts.length; i++) {
    String namespace=exts[i].getNamespace();
    IConfigurationElement[] configs=exts[i].getConfigurationElements();
    for (int j=0; j < configs.length; j++) {
      String format=configs[j].getAttribute(""String_Node_Str"");
      String mimeType=configs[j].getAttribute(""String_Node_Str"");
      String id=configs[j].getAttribute(""String_Node_Str"");
      String pagination=configs[j].getAttribute(""String_Node_Str"");
      if (pagination == null) {
        pagination=PAGE_BREAK_PAGINATION;
      }
      String icon=configs[j].getAttribute(""String_Node_Str"");
      Boolean outDisplayNone=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      String fileExtension=configs[j].getAttribute(""String_Node_Str"");
      Boolean isHidden=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      EmitterInfo emitterInfo=new EmitterInfo(format,id,pagination,mimeType,icon,namespace,fileExtension,outDisplayNone,isHidden,configs[j]);
      emitterExtensions.add(emitterInfo);
      assert(format != null);
      formats.put(format.toLowerCase(),emitterInfo);
      emitters.put(id,emitterInfo);
      logger.log(Level.FINE,""String_Node_Str"",new String[]{format,id});
    }
  }
}",0.9704823614110872
72074,"/** 
 * Checks if the selected resources can be modified.
 * @return <code>true</code> if the selected resources can be modified,<code>false</code> otherwise.
 */
protected boolean canModifySelectedResources(){
  Collection<?> resources=getSelectedResources();
  if (resources == null || resources.isEmpty()) {
    return false;
  }
  for (  Object resource : resources) {
    if (resource instanceof ResourceEntryWrapper) {
      if (((ResourceEntryWrapper)resource).getParent() instanceof FragmentResourceEntry) {
        return false;
      }
    }
 else     if (resource instanceof PathResourceEntry) {
      if (((PathResourceEntry)resource).isRoot()) {
        return false;
      }
    }
 else     if (resource instanceof FragmentResourceEntry) {
      return false;
    }
  }
  return true;
}","/** 
 * Checks if the selected resources can be modified.
 * @return <code>true</code> if the selected resources can be modified,<code>false</code> otherwise.
 */
protected boolean canModifySelectedResources(){
  Collection<?> resources=getSelectedResources();
  if (resources == null || resources.isEmpty()) {
    return false;
  }
  for (  Object resource : resources) {
    if (resource instanceof ResourceEntryWrapper) {
      if (((ResourceEntryWrapper)resource).getParent() instanceof FragmentResourceEntry) {
        return false;
      }
    }
 else     if (resource instanceof PathResourceEntry) {
      if (((PathResourceEntry)resource).isRoot()) {
        return false;
      }
    }
 else     if (resource instanceof FragmentResourceEntry) {
      return false;
    }
 else     if (resource instanceof ReportElementEntry) {
      return false;
    }
  }
  return true;
}",0.9512485136741974
72075,"public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  odaStatement=dataSource.prepareStatement(queryText,queryType);
  addProperties();
  addParameterDefns();
  addCustomFields(odaStatement);
  addColumnHints(odaStatement);
  if (this.projectedFields != null)   odaStatement.setColumnsProjection(this.projectedFields);
  odaStatement.setMaxRows(this.getRowFetchLimit());
  try {
    IOdaDataSetDesign design=null;
    if (session.getDataSetCacheManager().getCurrentDataSetDesign() instanceof IOdaDataSetDesign)     design=(IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign();
    resultMetadata=getMetaData((IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign(),odaStatement);
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}","public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  odaStatement=dataSource.prepareStatement(queryText,queryType);
  addProperties();
  addParameterDefns();
  IOdaDataSetDesign design=null;
  if (session.getDataSetCacheManager().getCurrentDataSetDesign() instanceof IOdaDataSetDesign)   design=(IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign();
  if (design != null) {
    if (design.getPrimaryResultSetName() != null) {
      addCustomFields(design.getPrimaryResultSetName(),odaStatement);
      addColumnHints(design.getPrimaryResultSetName(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetName(),this.projectedFields);
    }
 else     if (design.getPrimaryResultSetNumber() > 0) {
      addCustomFields(design.getPrimaryResultSetNumber(),odaStatement);
      addColumnHints(design.getPrimaryResultSetNumber(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetNumber(),this.projectedFields);
    }
 else {
      prepareColumns();
    }
  }
 else {
    prepareColumns();
  }
  odaStatement.setMaxRows(this.getRowFetchLimit());
  try {
    resultMetadata=getMetaData((IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign(),odaStatement);
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}",0.4469320066334992
72076,"/** 
 * Declares custom fields on Oda statement
 * @param stmt
 * @throws DataException
 */
private void addCustomFields(PreparedStatement stmt) throws DataException {
  if (this.customFields != null) {
    Iterator it=this.customFields.iterator();
    while (it.hasNext()) {
      CustomField customField=(CustomField)it.next();
      stmt.declareCustomColumn(customField.getName(),DataType.getClass(customField.getDataType()));
    }
  }
}","private void addCustomFields(int rsetNumber,PreparedStatement stmt) throws DataException {
  if (this.customFields != null) {
    Iterator it=this.customFields.iterator();
    while (it.hasNext()) {
      CustomField customField=(CustomField)it.next();
      stmt.declareCustomColumn(rsetNumber,customField.getName(),DataType.getClass(customField.getDataType()));
    }
  }
}",0.7254901960784313
72077,"/** 
 * Adds Odi column hints to ODA statement
 * @param stmt
 * @throws DataException
 */
private void addColumnHints(PreparedStatement stmt) throws DataException {
}","private void addColumnHints(int rsetNumber,PreparedStatement stmt) throws DataException {
}",0.5891472868217055
72078,"public boolean execute() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(callStat);
  try {
{
      if (!maxRowsUpToDate) {
        callStat.setMaxRows(maxrows);
        maxRowsUpToDate=true;
      }
      this.registerOutputParameter();
      boolean execute=callStat.execute();
      if (this.cachedResultSet != null) {
        IResultSet ret=this.cachedResultSet;
        this.cachedResultSet=null;
        execute=true;
      }
      this.populateOutputParamResultSet();
      this.isExecuted=true;
      return execute;
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.QUERY_EXECUTE_FAIL,e);
  }
}","public boolean execute() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(callStat);
  return this.executeQuery() != null;
}",0.4158004158004158
72079,"public int[] resolveFixedLayout(int maxWidth){
  int columnNumber=table.getColumnCount();
  DimensionType[] columns=new DimensionType[columnNumber];
  for (int i=0; i < columnNumber; i++) {
    IColumn column=table.getColumn(i);
    DimensionType w=column.getWidth();
    if (startCol < 0) {
      startCol=i;
    }
    endCol=i;
    if (w == null) {
      columns[i]=null;
    }
 else {
      columns[i]=new DimensionType(w.getMeasure(),w.getUnits());
    }
  }
  if (startCol < 0)   startCol=0;
  if (endCol < 0)   endCol=0;
  int specifiedWidth=getDimensionValue(tableContent.getWidth(),maxWidth);
  int tableWidth;
  if (specifiedWidth > 0) {
    tableWidth=specifiedWidth;
  }
 else {
    tableWidth=maxWidth;
  }
  formalize(columns,tableWidth);
  return resolve(tableWidth,columns);
}","public int[] resolveFixedLayout(int maxWidth){
  int columnNumber=table.getColumnCount();
  DimensionType[] columns=new DimensionType[columnNumber];
  for (int i=0; i < columnNumber; i++) {
    IColumn column=table.getColumn(i);
    DimensionType w=column.getWidth();
    if (startCol < 0) {
      startCol=i;
    }
    endCol=i;
    if (w == null) {
      columns[i]=null;
    }
 else {
      columns[i]=new DimensionType(w.getMeasure(),w.getUnits());
    }
  }
  if (startCol < 0)   startCol=0;
  if (endCol < 0)   endCol=0;
  int specifiedWidth=getDimensionValue(tableContent.getWidth(),maxWidth);
  int tableWidth;
  if (specifiedWidth > 0) {
    tableWidth=specifiedWidth;
  }
 else {
    tableWidth=maxWidth;
  }
  return formalize(columns,tableWidth);
}",0.9709864603481624
72080,"protected void formalize(DimensionType[] columns,int tableWidth){
  ArrayList percentageList=new ArrayList();
  ArrayList unsetList=new ArrayList();
  double total=0.0f;
  int fixedLength=0;
  for (int i=0; i < columns.length; i++) {
    if (columns[i] == null) {
      unsetList.add(new Integer(i));
    }
 else     if (EngineIRConstants.UNITS_PERCENTAGE.equals(columns[i].getUnits())) {
      percentageList.add(new Integer(i));
      total+=columns[i].getMeasure();
    }
 else     if (EngineIRConstants.UNITS_EM.equals(columns[i].getUnits()) || EngineIRConstants.UNITS_EX.equals(columns[i].getUnits())) {
      int len=TableLayout.this.getDimensionValue(columns[i],PropertyUtil.getDimensionValue(table.getComputedStyle().getProperty(StyleConstants.STYLE_FONT_SIZE)));
      fixedLength+=len;
    }
 else {
      int len=TableLayout.this.getDimensionValue(columns[i],tableWidth);
      fixedLength+=len;
    }
  }
  if (fixedLength >= tableWidth) {
    for (int i=0; i < unsetList.size(); i++) {
      Integer index=(Integer)unsetList.get(i);
      columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
    }
    for (int i=0; i < percentageList.size(); i++) {
      Integer index=(Integer)percentageList.get(i);
      columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
    }
  }
 else {
    float leftPercentage=(((float)(tableWidth - fixedLength)) / tableWidth) * 100.0f;
    if (unsetList.isEmpty()) {
      double ratio=leftPercentage / total;
      for (int i=0; i < percentageList.size(); i++) {
        Integer index=(Integer)percentageList.get(i);
        columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
      }
    }
 else {
      if (total < leftPercentage) {
        double delta=leftPercentage - total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          columns[index.intValue()]=new DimensionType(delta / (double)unsetList.size(),EngineIRConstants.UNITS_PERCENTAGE);
        }
      }
 else {
        double ratio=leftPercentage / total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
        }
        for (int i=0; i < percentageList.size(); i++) {
          Integer index=(Integer)percentageList.get(i);
          columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
        }
      }
    }
  }
}","protected int[] formalize(DimensionType[] columns,int tableWidth){
  ArrayList percentageList=new ArrayList();
  ArrayList unsetList=new ArrayList();
  int[] resolvedColumnWidth=new int[columns.length];
  double total=0.0f;
  int fixedLength=0;
  for (int i=0; i < columns.length; i++) {
    if (columns[i] == null) {
      unsetList.add(new Integer(i));
    }
 else     if (EngineIRConstants.UNITS_PERCENTAGE.equals(columns[i].getUnits())) {
      percentageList.add(new Integer(i));
      total+=columns[i].getMeasure();
    }
 else     if (EngineIRConstants.UNITS_EM.equals(columns[i].getUnits()) || EngineIRConstants.UNITS_EX.equals(columns[i].getUnits())) {
      int len=TableLayout.this.getDimensionValue(columns[i],PropertyUtil.getDimensionValue(table.getComputedStyle().getProperty(StyleConstants.STYLE_FONT_SIZE)));
      resolvedColumnWidth[i]=len;
      fixedLength+=len;
    }
 else {
      int len=TableLayout.this.getDimensionValue(columns[i],tableWidth);
      resolvedColumnWidth[i]=len;
      fixedLength+=len;
    }
  }
  if (unsetList.isEmpty() && percentageList.isEmpty()) {
    return resolvedColumnWidth;
  }
  if (fixedLength >= tableWidth) {
    for (int i=0; i < unsetList.size(); i++) {
      Integer index=(Integer)unsetList.get(i);
      columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
      resolvedColumnWidth[index.intValue()]=0;
    }
    for (int i=0; i < percentageList.size(); i++) {
      Integer index=(Integer)percentageList.get(i);
      columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
      resolvedColumnWidth[index.intValue()]=0;
    }
  }
 else {
    float leftPercentage=(((float)(tableWidth - fixedLength)) / tableWidth) * 100.0f;
    if (unsetList.isEmpty()) {
      double ratio=leftPercentage / total;
      for (int i=0; i < percentageList.size(); i++) {
        Integer index=(Integer)percentageList.get(i);
        columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
        resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
      }
    }
 else {
      if (total < leftPercentage) {
        double delta=leftPercentage - total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          columns[index.intValue()]=new DimensionType(delta / (double)unsetList.size(),EngineIRConstants.UNITS_PERCENTAGE);
          resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
        }
      }
 else {
        double ratio=leftPercentage / total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
          resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()]);
        }
        for (int i=0; i < percentageList.size(); i++) {
          Integer index=(Integer)percentageList.get(i);
          columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
          resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
        }
      }
    }
  }
  return resolvedColumnWidth;
}",0.8643564356435643
72081,"public void connect(InetAddress host,int listenPort) throws VMException {
  try {
    requestSocket=new Socket(host,listenPort);
    requestWriter=new ObjectOutputStream(requestSocket.getOutputStream());
    requestReader=new ObjectInputStream(requestSocket.getInputStream());
    eventSocket=new Socket(host,listenPort);
    eventReader=new ObjectInputStream(eventSocket.getInputStream());
    isTerminated=false;
    isConnected=true;
    logger.info(Messages.getString(""String_Node_Str""));
    addDeferredBreakPoints();
    startEventDispatch();
  }
 catch (  Exception e) {
    throw new VMException(e);
  }
}","public void connect(InetAddress host,int listenPort) throws VMException {
  try {
    requestSocket=new Socket(""String_Node_Str"",listenPort);
    requestWriter=new ObjectOutputStream(requestSocket.getOutputStream());
    requestReader=new ObjectInputStream(requestSocket.getInputStream());
    eventSocket=new Socket(""String_Node_Str"",listenPort);
    eventReader=new ObjectInputStream(eventSocket.getInputStream());
    isTerminated=false;
    isConnected=true;
    logger.info(Messages.getString(""String_Node_Str""));
    addDeferredBreakPoints();
    startEventDispatch();
  }
 catch (  Exception e) {
    throw new VMException(e);
  }
}",0.9664536741214056
72082,"public void start(int listenPort,Context cx) throws VMException {
  try {
    serverSocket=new ServerSocket(listenPort,50,InetAddress.getLocalHost());
    Socket clientRequestSocket=serverSocket.accept();
    clientRequestReader=new ObjectInputStream(clientRequestSocket.getInputStream());
    clientRequestWriter=new ObjectOutputStream(clientRequestSocket.getOutputStream());
    Socket clientEventSocket=serverSocket.accept();
    clientEventWriter=new ObjectOutputStream(clientEventSocket.getOutputStream());
    logger.info(Messages.getString(""String_Node_Str""));
    isShutdown=false;
    vm.attach(cx,true);
    startRequestDispatch();
  }
 catch (  IOException e) {
    throw new VMException(e);
  }
}","public void start(int listenPort,Context cx) throws VMException {
  try {
    serverSocket=new ServerSocket(listenPort,50,null);
    Socket clientRequestSocket=serverSocket.accept();
    clientRequestReader=new ObjectInputStream(clientRequestSocket.getInputStream());
    clientRequestWriter=new ObjectOutputStream(clientRequestSocket.getOutputStream());
    Socket clientEventSocket=serverSocket.accept();
    clientEventWriter=new ObjectOutputStream(clientEventSocket.getOutputStream());
    logger.info(Messages.getString(""String_Node_Str""));
    isShutdown=false;
    vm.attach(cx,true);
    startRequestDispatch();
  }
 catch (  IOException e) {
    throw new VMException(e);
  }
}",0.9784791965566716
72083,"protected int[] formalize(DimensionType[] columns,int tableWidth){
  ArrayList percentageList=new ArrayList();
  ArrayList unsetList=new ArrayList();
  int[] resolvedColumnWidth=new int[columns.length];
  double total=0.0f;
  int fixedLength=0;
  for (int i=0; i < columns.length; i++) {
    if (columns[i] == null) {
      unsetList.add(new Integer(i));
    }
 else     if (EngineIRConstants.UNITS_PERCENTAGE.equals(columns[i].getUnits())) {
      percentageList.add(new Integer(i));
      total+=columns[i].getMeasure();
    }
 else     if (EngineIRConstants.UNITS_EM.equals(columns[i].getUnits()) || EngineIRConstants.UNITS_EX.equals(columns[i].getUnits())) {
      int len=TableLayout.this.getDimensionValue(columns[i],PropertyUtil.getDimensionValue(table.getComputedStyle().getProperty(StyleConstants.STYLE_FONT_SIZE)));
      resolvedColumnWidth[i]=len;
      fixedLength+=len;
    }
 else {
      int len=TableLayout.this.getDimensionValue(columns[i],tableWidth);
      resolvedColumnWidth[i]=len;
      fixedLength+=len;
    }
  }
  if (unsetList.isEmpty() && percentageList.isEmpty()) {
    return resolvedColumnWidth;
  }
  if (fixedLength >= tableWidth) {
    for (int i=0; i < unsetList.size(); i++) {
      Integer index=(Integer)unsetList.get(i);
      columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
      resolvedColumnWidth[index.intValue()]=0;
    }
    for (int i=0; i < percentageList.size(); i++) {
      Integer index=(Integer)percentageList.get(i);
      columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
      resolvedColumnWidth[index.intValue()]=0;
    }
  }
 else {
    float leftPercentage=(((float)(tableWidth - fixedLength)) / tableWidth) * 100.0f;
    if (unsetList.isEmpty()) {
      double ratio=leftPercentage / total;
      for (int i=0; i < percentageList.size(); i++) {
        Integer index=(Integer)percentageList.get(i);
        columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
        resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
      }
    }
 else {
      if (total < leftPercentage) {
        double delta=leftPercentage - total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          columns[index.intValue()]=new DimensionType(delta / (double)unsetList.size(),EngineIRConstants.UNITS_PERCENTAGE);
          resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
        }
      }
 else {
        double ratio=leftPercentage / total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
          resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()]);
        }
        for (int i=0; i < percentageList.size(); i++) {
          Integer index=(Integer)percentageList.get(i);
          columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
          resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
        }
      }
    }
  }
  return resolvedColumnWidth;
}","protected int[] formalize(DimensionType[] columns,int tableWidth){
  ArrayList percentageList=new ArrayList();
  ArrayList unsetList=new ArrayList();
  int[] resolvedColumnWidth=new int[columns.length];
  double total=0.0f;
  int fixedLength=0;
  for (int i=0; i < columns.length; i++) {
    if (columns[i] == null) {
      unsetList.add(new Integer(i));
    }
 else     if (EngineIRConstants.UNITS_PERCENTAGE.equals(columns[i].getUnits())) {
      percentageList.add(new Integer(i));
      total+=columns[i].getMeasure();
    }
 else     if (EngineIRConstants.UNITS_EM.equals(columns[i].getUnits()) || EngineIRConstants.UNITS_EX.equals(columns[i].getUnits())) {
      int len=TableLayout.this.getDimensionValue(columns[i],PropertyUtil.getDimensionValue(table.getComputedStyle().getProperty(StyleConstants.STYLE_FONT_SIZE)));
      resolvedColumnWidth[i]=len;
      fixedLength+=len;
    }
 else {
      int len=TableLayout.this.getDimensionValue(columns[i],tableWidth);
      resolvedColumnWidth[i]=len;
      fixedLength+=len;
    }
  }
  if (unsetList.isEmpty() && percentageList.isEmpty()) {
    return resolvedColumnWidth;
  }
  if (fixedLength >= tableWidth) {
    for (int i=0; i < unsetList.size(); i++) {
      Integer index=(Integer)unsetList.get(i);
      columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
      resolvedColumnWidth[index.intValue()]=0;
    }
    for (int i=0; i < percentageList.size(); i++) {
      Integer index=(Integer)percentageList.get(i);
      columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
      resolvedColumnWidth[index.intValue()]=0;
    }
  }
 else {
    float leftPercentage=(((float)(tableWidth - fixedLength)) / tableWidth) * 100.0f;
    if (unsetList.isEmpty()) {
      double ratio=leftPercentage / total;
      for (int i=0; i < percentageList.size(); i++) {
        Integer index=(Integer)percentageList.get(i);
        columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
        resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
      }
    }
 else {
      if (total < leftPercentage) {
        double delta=leftPercentage - total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          columns[index.intValue()]=new DimensionType(delta / (double)unsetList.size(),EngineIRConstants.UNITS_PERCENTAGE);
          resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
        }
        for (int i=0; i < percentageList.size(); i++) {
          Integer index=(Integer)percentageList.get(i);
          columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure(),columns[index.intValue()].getUnits());
          resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
        }
      }
 else {
        double ratio=leftPercentage / total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
          resolvedColumnWidth[index.intValue()]=0;
        }
        for (int i=0; i < percentageList.size(); i++) {
          Integer index=(Integer)percentageList.get(i);
          columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
          resolvedColumnWidth[index.intValue()]=TableLayout.this.getDimensionValue(columns[index.intValue()],tableWidth);
        }
      }
    }
  }
  return resolvedColumnWidth;
}",0.9390820584144646
72084,"public void startPage(IPageContent page){
  if (orientation == null) {
    orientation=capitalize(page.getOrientation());
  }
}","public void startPage(IPageContent page){
  if (orientation == null) {
    orientation=capitalize(page.getOrientation());
  }
  if (needOutputInMasterPage(page.getPageHeader()) && needOutputInMasterPage(page.getPageFooter())) {
    outputInMasterPage=true;
    pageHeader=formatHeaderFooter(page.getPageHeader(),true);
    pageFooter=formatHeaderFooter(page.getPageFooter(),false);
  }
  if (!outputInMasterPage && page.getPageHeader() != null) {
    contentVisitor.visitChildren(page.getPageHeader(),null);
  }
}",0.396875
72085,"private void endSheet(ExcelWriter writer){
  writer.endTable();
  if (orientation != null) {
    writer.declareWorkSheetOptions(orientation);
  }
  writer.closeSheet();
}","private void endSheet(ExcelWriter writer){
  writer.endTable();
  writer.declareWorkSheetOptions(orientation,pageHeader,pageFooter);
  writer.closeSheet();
}",0.8256880733944955
72086,"public void endPage(IPageContent page){
}","public void endPage(IPageContent page){
  if (!outputInMasterPage && page.getPageFooter() != null) {
    contentVisitor.visitChildren(page.getPageFooter(),null);
  }
}",0.3942307692307692
72087,"public void declareWorkSheetOptions(String orientation){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",orientation);
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}","public void declareWorkSheetOptions(String orientation,String pageHeader,String pageFooter){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  if (orientation != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",orientation);
    writer.closeTag(""String_Node_Str"");
  }
  if (pageHeader != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",pageHeader);
    writer.closeTag(""String_Node_Str"");
  }
  if (pageFooter != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",pageFooter);
    writer.closeTag(""String_Node_Str"");
  }
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}",0.6018596787827557
72088,"/** 
 * Sort all form pages in the relative order.
 * @param formPageList
 * @return
 */
private static List sortFormPageList(List formPageList){
  List olist=new ArrayList(formPageList.size());
  olist.addAll(formPageList);
  List rlist=new ArrayList(olist.size());
  List unlist=new ArrayList();
  boolean resolved=true;
  while (olist.size() > 0 && resolved) {
    resolved=false;
    for (int i=0; i < olist.size(); i++) {
      FormPageDef element=(FormPageDef)olist.get(i);
      if (element.relative == null) {
        rlist.add(element);
        resolved=true;
      }
 else {
        int relativePosition=getRelativeElementPosition(element,rlist);
        if (relativePosition == -1) {
          relativePosition=getRelativeElementPosition(element,olist);
          if (relativePosition == -1) {
            rlist.add(element);
            resolved=true;
          }
 else {
            unlist.add(element);
          }
        }
 else {
          rlist.add(relativePosition + element.position,element);
          resolved=true;
        }
      }
    }
    for (Iterator itr=unlist.iterator(); itr.hasNext(); ) {
      FormPageDef element=(FormPageDef)itr.next();
      int relativePosition=getRelativeElementPosition(element,rlist);
      if (relativePosition != -1) {
        rlist.add(relativePosition + element.position,element);
        itr.remove();
        resolved=true;
      }
    }
    olist.removeAll(rlist);
  }
  rlist.addAll(unlist);
  return rlist;
}","/** 
 * Sort all form pages in the relative order.
 * @param formPageList
 * @return
 */
private static List sortFormPageList(List formPageList){
  List olist=new ArrayList(formPageList.size());
  olist.addAll(formPageList);
  List rlist=new ArrayList(olist.size());
  List unlist=new ArrayList();
  boolean resolved=true;
  while (olist.size() > 0 && resolved) {
    resolved=false;
    for (int i=0; i < olist.size(); i++) {
      FormPageDef element=(FormPageDef)olist.get(i);
      if (element.relative == null) {
        rlist.add(element);
        resolved=true;
      }
 else {
        int relativePosition=getRelativeElementPosition(element,rlist);
        if (relativePosition == -1) {
          relativePosition=getRelativeElementPosition(element,olist);
          if (relativePosition == -1) {
            rlist.add(element);
            resolved=true;
          }
 else {
            unlist.add(element);
          }
        }
 else {
          rlist.add(relativePosition + element.position,element);
          resolved=true;
        }
      }
    }
    unlist.removeAll(rlist);
    for (Iterator itr=unlist.iterator(); itr.hasNext(); ) {
      FormPageDef element=(FormPageDef)itr.next();
      int relativePosition=getRelativeElementPosition(element,rlist);
      if (relativePosition != -1) {
        rlist.add(relativePosition + element.position,element);
        itr.remove();
        resolved=true;
      }
    }
    olist.removeAll(rlist);
  }
  rlist.addAll(unlist);
  return rlist;
}",0.99026518966096
72089,"public void layout(){
  init();
  if (PropertyUtil.isInlineElement(image)) {
    assert(parent instanceof IInlineStackingLayout);
    IInlineStackingLayout lineParent=(IInlineStackingLayout)parent;
    if (root.getAllocatedWidth() > parent.getCurrentMaxContentWidth()) {
      if (!lineParent.isEmptyLine()) {
        boolean ret=lineParent.endLine();
        layout();
      }
    }
  }
  boolean succeed=parent.addArea(root,0);
  if (succeed) {
    return;
  }
 else {
    if (!parent.isPageEmpty()) {
      parent.autoPageBreak();
    }
    parent.addToRoot(root,parent.contextList.size() - 1);
    if (parent.isInBlockStacking) {
      parent.flushFinishedPage();
    }
  }
}","public void layout(){
  init();
  if (PropertyUtil.isInlineElement(image)) {
    assert(parent instanceof IInlineStackingLayout);
    IInlineStackingLayout lineParent=(IInlineStackingLayout)parent;
    if (root.getAllocatedWidth() > parent.getCurrentMaxContentWidth()) {
      if (!lineParent.isEmptyLine()) {
        boolean ret=lineParent.endLine();
        layout();
      }
    }
 else {
      parent.addToRoot(root,0);
      return;
    }
  }
 else {
    boolean succeed=parent.addArea(root,0);
    if (succeed) {
      return;
    }
 else {
      if (!parent.isPageEmpty()) {
        parent.autoPageBreak();
      }
      parent.addToRoot(root,parent.contextList.size() - 1);
      if (parent.isInBlockStacking) {
        parent.flushFinishedPage();
      }
    }
  }
}",0.8459422283356258
72090,"public final IFigure createFigure(final ExtendedItemHandle eih){
  try {
    eih.loadExtendedElement();
  }
 catch (  ExtendedElementException eeex) {
    logger.log(eeex);
  }
  try {
    final ChartReportItemImpl iri=(ChartReportItemImpl)eih.getReportItem();
    final DesignerRepresentation dr=new DesignerRepresentation(iri);
    iri.setDesignerRepresentation(dr);
    if (iri.isCopied() && ChartXTabUtil.isPlotChart(eih)) {
      ChartWithAxes cwa=(ChartWithAxes)iri.getProperty(ChartReportItemConstants.PROPERTY_CHART);
      Axis yAxis=(Axis)((Axis)cwa.getAxes().get(0)).getAssociatedAxes().get(0);
      if (yAxis.getLineAttributes().isVisible() && ChartXTabUtil.findReferenceChart(eih) == null) {
        AggregationCellHandle containerCell=ChartXTabUtil.getXtabContainerCell(eih);
        AggregationCellHandle grandTotalCell=ChartXTabUIUtil.getGrandTotalAggregationCell(containerCell,cwa.isTransposed());
        Object content=ChartXTabUtil.getFirstContent(grandTotalCell);
        if (ChartXTabUtil.isAxisChart((DesignElementHandle)content)) {
          final ExtendedItemHandle axisChart=(ExtendedItemHandle)content;
          if (!axisChart.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART).equals(eih))           Display.getCurrent().asyncExec(new Runnable(){
            public void run(){
              try {
                axisChart.setProperty(ChartReportItemConstants.PROPERTY_HOST_CHART,eih);
              }
 catch (              SemanticException e) {
                logger.log(e);
              }
            }
          }
);
        }
      }
    }
 else     if (ChartXTabUtil.isAxisChart(eih)) {
      DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
      if (hostChart != null) {
        hostChart.getContainer().addListener(createDeleteChartListener(eih));
      }
    }
    return dr;
  }
 catch (  BirtException e) {
    logger.log(e);
    return null;
  }
}","public final IFigure createFigure(final ExtendedItemHandle eih){
  try {
    eih.loadExtendedElement();
  }
 catch (  ExtendedElementException eeex) {
    logger.log(eeex);
  }
  try {
    final ChartReportItemImpl iri=(ChartReportItemImpl)eih.getReportItem();
    final DesignerRepresentation dr=new DesignerRepresentation(iri);
    iri.setDesignerRepresentation(dr);
    if (iri.isCopied() && ChartXTabUtil.isPlotChart(eih)) {
      ChartWithAxes cwa=(ChartWithAxes)iri.getProperty(ChartReportItemConstants.PROPERTY_CHART);
      Axis yAxis=(Axis)((Axis)cwa.getAxes().get(0)).getAssociatedAxes().get(0);
      if (yAxis.getLineAttributes().isVisible() && ChartXTabUtil.findReferenceChart(eih) == null) {
        AggregationCellHandle containerCell=ChartXTabUtil.getXtabContainerCell(eih);
        AggregationCellHandle grandTotalCell=ChartXTabUIUtil.getGrandTotalAggregationCell(containerCell,cwa.isTransposed());
        Object content=ChartXTabUtil.getFirstContent(grandTotalCell);
        if (ChartXTabUtil.isAxisChart((DesignElementHandle)content)) {
          final ExtendedItemHandle axisChart=(ExtendedItemHandle)content;
          if (!axisChart.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART).equals(eih))           Display.getCurrent().asyncExec(new Runnable(){
            public void run(){
              try {
                axisChart.setProperty(ChartReportItemConstants.PROPERTY_HOST_CHART,eih);
              }
 catch (              SemanticException e) {
                logger.log(e);
              }
            }
          }
);
        }
      }
    }
 else     if (ChartXTabUtil.isAxisChart(eih)) {
      DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
      if (hostChart != null) {
        Listener listener=createDeleteChartListener(eih);
        DesignElementHandle cell=hostChart.getContainer();
        cell.addListener(listener);
        if (cell.getContainer() != null) {
          cell.getContainer().addListener(listener);
        }
      }
    }
    return dr;
  }
 catch (  BirtException e) {
    logger.log(e);
    return null;
  }
}",0.9411764705882352
72091,"/** 
 * Close the tag when implement the inline box.
 */
protected void closeInlineBoxTag(){
  writer.closeTag(HTMLTags.TAG_TD);
  writer.closeTag(HTMLTags.TAG_TR);
  writer.closeTag(HTMLTags.TAG_TABLE);
}","/** 
 * Close the tag when implement the inline box.
 */
protected void closeInlineBoxTag(){
  writer.closeTag(HTMLTags.TAG_TD);
  writer.closeTag(HTMLTags.TAG_TR);
  writer.closeTag(HTMLTags.TAG_TABLE);
  writer.closeTag(HTMLTags.TAG_DIV);
}",0.9172259507829976
72092,"/** 
 * Open the tag when implement the inline box.
 */
protected void openInlineBoxTag(){
  writer.openTag(HTMLTags.TAG_TABLE);
  writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  writer.openTag(HTMLTags.TAG_TR);
  writer.openTag(HTMLTags.TAG_TD);
}","/** 
 * Open the tag when implement the inline box.
 */
protected void openInlineBoxTag(){
  writer.openTag(HTMLTags.TAG_DIV);
  writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  writer.openTag(HTMLTags.TAG_TABLE);
  writer.openTag(HTMLTags.TAG_TR);
  writer.openTag(HTMLTags.TAG_TD);
}",0.9169675090252708
72093,"public boolean execute() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(callStat);
  try {
{
      if (!maxRowsUpToDate) {
        callStat.setMaxRows(maxrows);
        maxRowsUpToDate=true;
      }
      this.registerOutputParameter();
      boolean execute=callStat.execute();
      this.populateOutputParamResultSet();
      this.isExecuted=true;
      return execute;
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.QUERY_EXECUTE_FAIL,e);
  }
}","public boolean execute() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(callStat);
  try {
{
      if (!maxRowsUpToDate) {
        callStat.setMaxRows(maxrows);
        maxRowsUpToDate=true;
      }
      this.registerOutputParameter();
      boolean execute=callStat.execute();
      if (this.cachedResultSet != null) {
        IResultSet ret=this.cachedResultSet;
        this.cachedResultSet=null;
        execute=true;
      }
      this.populateOutputParamResultSet();
      this.isExecuted=true;
      return execute;
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.QUERY_EXECUTE_FAIL,e);
  }
}",0.8851963746223565
72094,"public void startPage(IPageContent page){
}","public void startPage(IPageContent page){
  if (orientation == null) {
    orientation=capitalize(page.getOrientation());
  }
}",0.5058823529411764
72095,"private void endSheet(ExcelWriter writer){
  writer.endTable();
  writer.closeSheet();
}","private void endSheet(ExcelWriter writer){
  writer.endTable();
  if (orientation != null) {
    writer.declareWorkSheetOptions(orientation);
  }
  writer.closeSheet();
}",0.6821705426356589
72096,"public void end(IReportContent report){
  engine.complete();
  boolean isRTLSheet=false;
  String reportOrientation=report.getDesign().getReportDesign().getBidiOrientation();
  if (""String_Node_Str"".equalsIgnoreCase(reportOrientation))   isRTLSheet=true;
  ExcelWriter writer=new ExcelWriter(out,context,isRTLSheet);
  writer.writeDeclarations();
  writer.writeDocumentProperties(report);
  writer.declareStyles(engine.getStyleMap());
  writer.defineNames(engine.getNamesRefer());
  int count=0;
  if (tempWriter != null) {
    tempWriter.close(false);
    File file=new File(tempfilePath);
    writer.insertSheet(file);
    file.delete();
  }
  if (engine.getRowCount() != 0) {
    startSheet(writer);
    while (count < engine.getRowCount()) {
      outputData(engine.getRow(count),writer);
      count++;
    }
    endSheet(writer);
  }
  writer.close(true);
  sheetIndex=1;
}","public void end(IReportContent report){
  engine.complete();
  boolean isRTLSheet=false;
  String reportOrientation=report.getDesign().getReportDesign().getBidiOrientation();
  if (""String_Node_Str"".equalsIgnoreCase(reportOrientation))   isRTLSheet=true;
  ExcelWriter writer=new ExcelWriter(out,context,isRTLSheet);
  writer.writeDeclarations();
  writer.writeDocumentProperties(report);
  writer.declareStyles(engine.getStyleMap());
  writer.defineNames(engine.getNamesRefer());
  if (tempWriter != null) {
    tempWriter.close(false);
    File file=new File(tempfilePath);
    writer.insertSheet(file);
    file.delete();
    if (engine.getRowCount() != 0) {
      outputCacheData(writer);
    }
  }
 else {
    outputCacheData(writer);
  }
  writer.close(true);
  sheetIndex=1;
}",0.8736462093862816
72097,"public boolean execute() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(callStat);
  if (this.cachedResultSet != null) {
    IResultSet ret=this.cachedResultSet;
    this.cachedResultSet=null;
    return true;
  }
  try {
{
      if (!maxRowsUpToDate) {
        callStat.setMaxRows(maxrows);
        maxRowsUpToDate=true;
      }
      this.registerOutputParameter();
      boolean execute=callStat.execute();
      this.populateOutputParamResultSet();
      this.isExecuted=true;
      return execute;
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.QUERY_EXECUTE_FAIL,e);
  }
}","public boolean execute() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(callStat);
  try {
{
      if (!maxRowsUpToDate) {
        callStat.setMaxRows(maxrows);
        maxRowsUpToDate=true;
      }
      this.registerOutputParameter();
      boolean execute=callStat.execute();
      this.populateOutputParamResultSet();
      this.isExecuted=true;
      return execute;
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.QUERY_EXECUTE_FAIL,e);
  }
}",0.8994627782041443
72098,"/** 
 * Returns the real path based on working folder. If file path is an absolute path, return it directly. Else, return the absolute path based on working folder.
 * @param filePath
 * @param request
 * @return
 */
public static String getRealPathOnWorkingFolder(String filePath,HttpServletRequest request){
  if (!isRelativePath(filePath))   return filePath;
  if (isRelativePath(workingFolder)) {
    filePath=getRealPath(workingFolder + ""String_Node_Str"" + filePath,request.getSession().getServletContext());
  }
 else {
    filePath=workingFolder + File.separator + filePath;
  }
  return filePath;
}","/** 
 * Returns the real path based on working folder. If file path is an absolute path, return it directly. Else, return the absolute path based on working folder.
 * @param filePath
 * @param request
 * @return
 */
public static String getRealPathOnWorkingFolder(String filePath,HttpServletRequest request){
  if (filePath == null || filePath.length() == 0) {
    return filePath;
  }
  if (!isRelativePath(filePath))   return filePath;
  if (isRelativePath(workingFolder)) {
    filePath=getRealPath(workingFolder + ""String_Node_Str"" + filePath,request.getSession().getServletContext());
  }
 else {
    filePath=workingFolder + File.separator + filePath;
  }
  return filePath;
}",0.9402637703646236
72099,"/** 
 * submit current line to parent true if succeed
 * @return
 */
protected void closeLayout(){
  int size=contextList.size();
  if (size == 1) {
    currentContext=contextList.removeFirst();
    currentContext.root.setHeight(Math.max(currentContext.root.getHeight(),lineHeight));
    if (currentContext.root.getChildrenCount() > 0) {
      align(currentContext,false);
      boolean succeed=parent.addArea(currentContext.root,parent.contextList.size() - 1);
      if (succeed) {
        return;
      }
 else {
        parent.autoPageBreak();
        parent.addToRoot(currentContext.root,parent.contextList.size() - 1);
        if (isInBlockStacking) {
          parent.flushFinishedPage();
        }
      }
    }
  }
 else {
    for (int i=0; i < size; i++) {
      currentContext=contextList.removeFirst();
      if (currentContext.root.getChildrenCount() > 0) {
        parent.addToRoot(currentContext.root,i);
      }
      if (isInBlockStacking) {
        parent.flushFinishedPage();
      }
    }
  }
}","/** 
 * submit current line to parent true if succeed
 * @return
 */
protected void closeLayout(){
  int size=contextList.size();
  if (size == 1) {
    currentContext=contextList.removeFirst();
    currentContext.root.setHeight(Math.max(currentContext.root.getHeight(),lineHeight));
    if (currentContext.root.getChildrenCount() > 0) {
      align(currentContext,false);
      boolean succeed=parent.addArea(currentContext.root,parent.contextList.size() - 1);
      if (succeed) {
        return;
      }
 else {
        parent.autoPageBreak();
        parent.addToRoot(currentContext.root,parent.contextList.size() - 1);
        if (isInBlockStacking) {
          parent.flushFinishedPage();
        }
      }
    }
  }
 else {
    for (int i=0; i < size; i++) {
      currentContext=contextList.removeFirst();
      if (currentContext.root.getChildrenCount() > 0) {
        parent.addToRoot(currentContext.root,i);
      }
    }
    if (parent.isInBlockStacking) {
      parent.flushFinishedPage();
    }
  }
}",0.9896398618648248
72100,"public LineLayout(LayoutEngineContext context,ContainerLayout parent){
  super(context,parent,null);
}","public LineLayout(LayoutEngineContext context,ContainerLayout parent){
  super(context,parent,null);
  isInBlockStacking=false;
}",0.8831168831168831
72101,"protected void initialize(){
  currentContext=new ContainerContext();
  contextList.add(currentContext);
  createRoot();
  currentContext.maxAvaWidth=parent.getCurrentMaxContentWidth();
  currentContext.maxAvaHeight=parent.getCurrentMaxContentHeight();
  currentContext.root.setWidth(parent.getCurrentMaxContentWidth());
  lineHeight=((BlockStackingLayout)parent).getLineHeight();
  if (parent.content != null) {
    if (CSSConstants.CSS_RTL_VALUE.equals(parent.content.getComputedStyle().getDirection()))     baseLevel=Bidi.DIRECTION_RIGHT_TO_LEFT;
  }
}","protected void initialize(){
  int currentIP=0;
  if (contextList.size() > 0) {
    currentIP=contextList.get(contextList.size() - 1).currentIP;
  }
  currentContext=new ContainerContext();
  currentContext.currentIP=currentIP;
  contextList.add(currentContext);
  createRoot();
  currentContext.maxAvaWidth=parent.getCurrentMaxContentWidth();
  currentContext.maxAvaHeight=parent.getCurrentMaxContentHeight();
  currentContext.root.setWidth(parent.getCurrentMaxContentWidth());
  lineHeight=((BlockStackingLayout)parent).getLineHeight();
  if (parent.content != null) {
    if (CSSConstants.CSS_RTL_VALUE.equals(parent.content.getComputedStyle().getDirection()))     baseLevel=Bidi.DIRECTION_RIGHT_TO_LEFT;
  }
}",0.8753943217665615
72102,"public void outputPage(IPageContent page){
  context.emitter.outputPage(page);
  context.pageNumber++;
}","public void outputPage(IPageContent page){
  context.emitter.outputPage(page);
}",0.8695652173913043
72103,"protected IPageContent createPageContent(){
  MasterPageDesign pageDesign=getMasterPage(report);
  return ReportExecutorUtil.executeMasterPage(reportExecutor,context.pageNumber,pageDesign);
}","protected IPageContent createPageContent(){
  MasterPageDesign pageDesign=getMasterPage(report);
  return ReportExecutorUtil.executeMasterPage(reportExecutor,context.pageNumber++,pageDesign);
}",0.9947916666666666
72104,"protected void closeLayout(ContainerContext currentContext,int index,boolean finished){
  if (currentContext.root != null) {
    if (unresolvedRow != null) {
      TableContext tc=(TableContext)(tbl.currentContext);
      tc.layout.setUnresolvedRow(unresolvedRow);
    }
    tbl.updateRow((RowArea)currentContext.root,specifiedHeight,index);
    if (finished || !isRowEmpty(currentContext)) {
      tbl.addRow((RowArea)currentContext.root,index);
      parent.addToRoot(currentContext.root,index);
    }
    if (!finished && unresolvedRow == null) {
      TableContext tc=(TableContext)(tbl.contextList.get(index));
      unresolvedRow=tc.layout.getUnresolvedRow();
    }
  }
}","protected void closeLayout(ContainerContext currentContext,int index,boolean finished){
  if (currentContext.root != null) {
    boolean added=false;
    if (unresolvedRow != null) {
      TableContext tc=(TableContext)(tbl.contextList.get(index));
      tc.layout.setUnresolvedRow(unresolvedRow);
    }
    tbl.updateRow((RowArea)currentContext.root,specifiedHeight,index);
    if (finished || !isRowEmpty(currentContext)) {
      tbl.addRow((RowArea)currentContext.root,index);
      parent.addToRoot(currentContext.root,index);
      added=true;
    }
    if (!finished && unresolvedRow == null) {
      TableContext tc=(TableContext)(tbl.contextList.get(index));
      if (added) {
        unresolvedRow=tc.layout.getUnresolvedRow();
      }
 else {
        unresolvedRow=tc.layout.getUnresolvedRow((RowArea)currentContext.root);
      }
    }
  }
}",0.8679738562091504
72105,"public void updateRow(RowArea rowArea,int specifiedHeight){
  Row lastRow=getPreviousRow();
  Row row=new Row(rowArea,startCol,endCol);
  int height=specifiedHeight;
  CellArea previousCellArea=null;
  for (int i=startCol; i <= endCol; i++) {
    CellArea lastCell=null;
    if (lastRow != null) {
      lastCell=lastRow.getCell(i);
    }
    CellArea cell=row.getCell(i);
    if (lastCell != null && (lastCell.getRowSpan() > 1)) {
      if (lastCell.getRowSpan() == 2) {
        if (lastCell instanceof DummyCell) {
          height=Math.max(height,lastCell.getHeight());
        }
 else {
          height=Math.max(height,lastCell.getHeight() - lastRow.getArea().getHeight());
        }
      }
      i=i + lastCell.getColSpan() - 1;
    }
 else {
      if (cell != null) {
        if (cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
        }
        if (!(cell instanceof DummyCell)) {
          previousCellArea=cell;
        }
      }
      if (cell == null) {
        ICellContent cellContent=null;
        int rowSpan=1;
        if (unresolvedRow != null) {
          lastCell=unresolvedRow.getCell(i);
          if (lastCell != null) {
            cellContent=(ICellContent)lastCell.getContent();
            rowSpan=lastCell.getRowSpan();
          }
        }
        if (cellContent == null) {
          cellContent=tableContent.getReportContent().createCellContent();
          cellContent.setColumn(i);
          cellContent.setColSpan(1);
          cellContent.setRowSpan(1);
          cellContent.setParent(rowArea.getContent());
        }
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        resolveBorderConflict(emptyCell,true);
        IStyle areaStyle=emptyCell.getStyle();
        areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
        areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        if (previousCellArea != null) {
          int index=rowArea.indexOf(previousCellArea);
          rowArea.addChild(index,emptyCell);
        }
 else {
          rowArea.addChild(0,emptyCell);
        }
        i=i + emptyCell.getColSpan() - 1;
      }
    }
  }
  if (height >= 0) {
    Iterator iter=rowArea.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (cell.getRowSpan() == 1) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    rowArea.setHeight(height);
  }
}","public void updateRow(RowArea rowArea,int specifiedHeight){
  Row lastRow=getPreviousRow();
  Row row=new Row(rowArea,startCol,endCol);
  int height=specifiedHeight;
  CellArea previousCellArea=null;
  for (int i=startCol; i <= endCol; i++) {
    CellArea lastCell=null;
    if (lastRow != null) {
      lastCell=lastRow.getCell(i);
    }
    CellArea cell=row.getCell(i);
    if (lastCell != null && (lastCell.getRowSpan() > 1)) {
      if (lastCell.getRowSpan() == 2) {
        if (lastCell instanceof DummyCell) {
          height=Math.max(height,lastCell.getHeight());
        }
 else {
          height=Math.max(height,lastCell.getHeight() - lastRow.getArea().getHeight());
        }
      }
      i=i + lastCell.getColSpan() - 1;
    }
 else {
      if (cell != null) {
        if (cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
        }
        if (!(cell instanceof DummyCell)) {
          previousCellArea=cell;
        }
      }
      if (cell == null) {
        ICellContent cellContent=null;
        int rowSpan=1;
        if (unresolvedRow != null) {
          lastCell=unresolvedRow.getCell(i);
          if (lastCell != null) {
            cellContent=(ICellContent)lastCell.getContent();
            rowSpan=lastCell.getRowSpan();
          }
        }
        if (cellContent == null) {
          cellContent=tableContent.getReportContent().createCellContent();
          cellContent.setColumn(i);
          cellContent.setColSpan(1);
          cellContent.setRowSpan(1);
          cellContent.setParent(rowArea.getContent());
        }
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        if (previousCellArea != null) {
          lastCellContent=(ICellContent)previousCellArea.getContent();
        }
        resolveBorderConflict(emptyCell,true);
        IStyle areaStyle=emptyCell.getStyle();
        areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
        areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        if (previousCellArea != null) {
          int index=rowArea.indexOf(previousCellArea);
          rowArea.addChild(index + 1,emptyCell);
        }
 else {
          rowArea.addChild(0,emptyCell);
        }
        i=i + emptyCell.getColSpan() - 1;
      }
    }
  }
  if (height >= 0) {
    Iterator iter=rowArea.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (cell.getRowSpan() == 1) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    rowArea.setHeight(height);
  }
}",0.9772105742935278
72106,"public Row getUnresolvedRow(){
  return (Row)rows.getCurrent();
}","public Row getUnresolvedRow(RowArea row){
  addRow(row);
  Row unResolvedRow=(Row)rows.getCurrent();
  rows.removeLast();
  return unResolvedRow;
}",0.5660377358490566
72107,"protected void repeatHeader(){
  if (bandStatus == IBandContent.BAND_GROUP_HEADER) {
    return;
  }
  if (!((IGroupContent)content).isHeaderRepeat()) {
    return;
  }
  IBandContent header=((IGroupContent)content).getHeader();
  if (header == null || header.getChildren().isEmpty()) {
    return;
  }
  TableRegionLayout rLayout=tableLM.getTableRegionLayout();
  rLayout.initialize(header);
  rLayout.layout();
  TableArea tableRegion=(TableArea)header.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getAllocatedHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      addArea(area);
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void repeatHeader(){
  if (bandStatus == IBandContent.BAND_GROUP_HEADER) {
    return;
  }
  if (!((IGroupContent)content).isHeaderRepeat()) {
    return;
  }
  IBandContent header=((IGroupContent)content).getHeader();
  if (header == null || header.getChildren().isEmpty()) {
    return;
  }
  TableRegionLayout rLayout=tableLM.getTableRegionLayout();
  rLayout.initialize(header);
  rLayout.layout();
  TableArea tableRegion=(TableArea)header.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getAllocatedHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    TableContext tableContext=(TableContext)tableLM.contextList.getLast();
    while (iter.hasNext()) {
      ContainerArea area=(ContainerArea)iter.next();
      Iterator rowIter=area.getChildren();
      while (rowIter.hasNext()) {
        AbstractArea row=(AbstractArea)rowIter.next();
        if (row instanceof RowArea) {
          tableContext.layout.addRow((RowArea)row);
        }
      }
    }
    iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      addArea(area);
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}",0.7857491459248414
72108,"protected void closeLayout(ContainerContext currentContext,int index,boolean finished){
  TableContext tableContext=(TableContext)currentContext;
  int borderHeight=0;
  if (tableContext.layout != null) {
    int height=tableContext.layout.resolveAll();
    if (0 != height) {
      currentContext.currentBP=currentContext.currentBP + height;
    }
    borderHeight=tableContext.layout.resolveBottomBorder();
    tableContext.layout.remove((TableArea)currentContext.root);
  }
  currentContext.root.setHeight(currentContext.currentBP + getOffsetY() + borderHeight);
  parent.addToRoot(currentContext.root,index);
}","protected void closeLayout(ContainerContext currentContext,int index,boolean finished){
  if (currentContext.root == null || currentContext.root.getChildrenCount() == 0) {
    return;
  }
  TableContext tableContext=(TableContext)currentContext;
  int borderHeight=0;
  if (tableContext.layout != null) {
    int height=tableContext.layout.resolveAll();
    if (0 != height) {
      currentContext.currentBP=currentContext.currentBP + height;
    }
    borderHeight=tableContext.layout.resolveBottomBorder();
    tableContext.layout.remove((TableArea)currentContext.root);
  }
  currentContext.root.setHeight(currentContext.currentBP + getOffsetY() + borderHeight);
  parent.addToRoot(currentContext.root,index);
}",0.9246987951807228
72109,"public boolean supportDataType(int dataType){
  if (dataType == DataType.ANY_TYPE || dataType == DataType.UNKNOWN_TYPE)   return true;
  for (int i=0; i < supportedDataTypes.length; i++) {
    if (supportedDataTypes[i] == dataType) {
      return true;
    }
  }
  return false;
}","public boolean supportDataType(int dataType){
  if (dataType == DataType.UNKNOWN_TYPE)   return true;
  for (int i=0; i < supportedDataTypes.length; i++) {
    if (supportedDataTypes[i] == DataType.ANY_TYPE || supportedDataTypes[i] == dataType) {
      return true;
    }
  }
  return false;
}",0.4677137870855148
72110,"protected boolean valid(int row,int col){
  if (col >= getColumnCount() || row > getColumnSize(col)) {
    return false;
  }
  int start=((Integer)colrow.get(new Integer(col))).intValue();
  return (row >= start && row < getColumnSize(col) && col < getColumnCount());
}","protected boolean valid(int row,int col){
  if (col >= getColumnCount() || row > getColumnSize(col)) {
    return false;
  }
  int start=((Integer)columnId2StartLine.get(new Integer(col))).intValue();
  return (row >= start && row < getColumnSize(col) && col < getColumnCount());
}",0.9672727272727272
72111,"public void addData(int col,Object data){
  List column=(List)columns.get(col);
  column.add(data);
  if (data instanceof Data) {
    BookmarkDef bookmark=((Data)data).getBookmark();
    if (null == bookmark) {
      return;
    }
    int rowNo=((Integer)colrow.get(new Integer(col))).intValue() + getColumnSize(col);
    bookmark.setColumnNo(col + 1);
    bookmark.setRowNo(rowNo);
    bookmarks.add(bookmark);
  }
}","public void addData(int col,Object data){
  if ((getColumnSize(col) > height) || (col >= getColumnCount())) {
    emitter.outputSheet();
    clearCachedSheetData();
  }
  List column=(List)columns.get(col);
  column.add(data);
  if (data instanceof Data) {
    BookmarkDef bookmark=((Data)data).getBookmark();
    if (null == bookmark) {
      return;
    }
    int rowNo=((Integer)columnId2StartLine.get(new Integer(col))).intValue() + getColumnSize(col);
    bookmark.setColumnNo(col + 1);
    bookmark.setRowNo(rowNo);
    bookmarks.add(bookmark);
  }
}",0.8509763617677287
72112,"public void insertColumns(int col,int size){
  if (size == 0) {
    return;
  }
  int c_width=getColumnCount();
  Integer collen=new Integer(getColumnSize(col));
  int m_start=col + 1;
  int m_size=c_width - m_start;
  m_size=Math.max(0,m_size);
  Object[] mcol=new Object[m_size];
  Map temp=new HashMap();
  for (int i=m_start, j=0; j < m_size; i++, j++) {
    Integer column=new Integer(i);
    Object row=colrow.get(column);
    int npos=i + size;
    if (npos < width) {
      temp.put(new Integer(npos),row);
      mcol[j]=columns.get(m_start);
    }
    columns.remove(m_start);
  }
  colrow.putAll(temp);
  for (int i=m_start; i <= col + size; i++) {
    if (i < width) {
      if (i > columns.size()) {
        columns.add(new ArrayList());
        colrow.put(new Integer(columns.size() - 1),collen);
      }
 else {
        columns.add(i,new ArrayList());
        colrow.put(new Integer(i),collen);
      }
    }
  }
  for (int i=0; i < mcol.length; i++) {
    if (mcol[i] == null) {
      continue;
    }
    columns.add(mcol[i]);
  }
}","public void insertColumns(int col,int size){
  if (size == 0) {
    return;
  }
  int columnCount=getColumnCount();
  int m_start=col + 1;
  int m_size=columnCount - m_start;
  m_size=Math.max(0,m_size);
  ArrayList[] mcol=new ArrayList[m_size];
  Map<Integer,Integer> temp=new HashMap<Integer,Integer>();
  for (int i=m_start, j=0; j < m_size; i++, j++) {
    Integer column=new Integer(i);
    Integer row=columnId2StartLine.get(column);
    int npos=i + size;
    if (npos < width) {
      temp.put(new Integer(npos),row);
      mcol[j]=columns.get(m_start);
    }
    columns.remove(m_start);
  }
  columnId2StartLine.putAll(temp);
  Integer rowCount=new Integer(getColumnSize(col));
  for (int i=m_start; i <= col + size; i++) {
    if (i < width) {
      if (i > columns.size()) {
        columns.add(new ArrayList());
        columnId2StartLine.put(new Integer(columns.size() - 1),rowCount);
      }
 else {
        columns.add(i,new ArrayList());
        columnId2StartLine.put(new Integer(i),rowCount);
      }
    }
  }
  for (int i=0; i < mcol.length; i++) {
    if (mcol[i] == null) {
      continue;
    }
    columns.add(mcol[i]);
  }
}",0.8047337278106509
72113,"public int getColumnSize(int column){
  if (column < getColumnCount()) {
    return ((Integer)colrow.get(new Integer(column))).intValue() + ((List)columns.get(column)).size();
  }
 else {
    return -1;
  }
}","public int getColumnSize(int column){
  if (column < getColumnCount()) {
    return ((Integer)columnId2StartLine.get(new Integer(column))).intValue() + ((List)columns.get(column)).size();
  }
 else {
    return -1;
  }
}",0.9579439252336448
72114,"public ArrayList getBookmarks(){
  return bookmarks;
}","public List<BookmarkDef> getBookmarks(){
  return bookmarks;
}",0.8448275862068966
72115,"public DataCache(int width){
  Integer start=new Integer(0);
  columns.add(new ArrayList());
  colrow.put(start,start);
  this.width=width;
}","public DataCache(int width,int height,ExcelEmitter emitter){
  columns.add(new ArrayList<Data>());
  columnId2StartLine.put(0,0);
  this.width=width;
  this.height=height;
  this.emitter=emitter;
}",0.6331360946745562
72116,"public Object getData(int col,int row){
  if (!valid(row,col)) {
    return null;
  }
 else {
    int start=((Integer)colrow.get(new Integer(col))).intValue();
    List data=(List)columns.get(col);
    if (data.size() > (row - start)) {
      return data.get(row - start);
    }
 else {
      return null;
    }
  }
}","public Object getData(int col,int row){
  if (!valid(row,col)) {
    return null;
  }
 else {
    int start=((Integer)columnId2StartLine.get(new Integer(col))).intValue();
    List data=(List)columns.get(col);
    if (data.size() > (row - start)) {
      return data.get(row - start);
    }
 else {
      return null;
    }
  }
}",0.9442724458204336
72117,"public void end(IReportContent report){
  engine.complete();
  boolean isRTLSheet=false;
  String reportOrientation=report.getDesign().getReportDesign().getBidiOrientation();
  if (""String_Node_Str"".equalsIgnoreCase(reportOrientation))   isRTLSheet=true;
  ExcelWriter writer=new ExcelWriter(out,context,isRTLSheet);
  writer.writeDeclarations();
  writer.writeDocumentProperties(report);
  writer.declareStyles(engine.getStyleMap());
  writer.defineNames(engine.getNamesRefer());
  startSheet(writer);
  int count=0;
  while (count < engine.getRowCount()) {
    if ((count % (engine.MAX_ROW + 1)) == 0 && count != 0) {
      endSheet(writer);
      startSheet(writer);
    }
    outputData(engine.getRow(count),writer);
    count++;
  }
  endSheet(writer);
  writer.close(true);
  sheetIndex=1;
}","public void end(IReportContent report){
  engine.complete();
  boolean isRTLSheet=false;
  String reportOrientation=report.getDesign().getReportDesign().getBidiOrientation();
  if (""String_Node_Str"".equalsIgnoreCase(reportOrientation))   isRTLSheet=true;
  ExcelWriter writer=new ExcelWriter(out,context,isRTLSheet);
  writer.writeDeclarations();
  writer.writeDocumentProperties(report);
  writer.declareStyles(engine.getStyleMap());
  writer.defineNames(engine.getNamesRefer());
  int count=0;
  if (tempWriter != null) {
    tempWriter.close(false);
    File file=new File(tempfilePath);
    writer.insertSheet(file);
    file.delete();
  }
  if (engine.getRowCount() != 0) {
    startSheet(writer);
    while (count < engine.getRowCount()) {
      outputData(engine.getRow(count),writer);
      count++;
    }
    endSheet(writer);
  }
  writer.close(true);
  sheetIndex=1;
}",0.779236276849642
72118,"public void start(IReportContent report){
  setupRenderOptions();
  IStyle style=report.getRoot().getComputedStyle();
  SimpleMasterPageDesign master=(SimpleMasterPageDesign)report.getDesign().getPageSetup().getMasterPage(0);
  engine=new ExcelLayoutEngine(new PageDef(master,style),context);
}","public void start(IReportContent report){
  setupRenderOptions();
  IStyle style=report.getRoot().getComputedStyle();
  SimpleMasterPageDesign master=(SimpleMasterPageDesign)report.getDesign().getPageSetup().getMasterPage(0);
  engine=new ExcelLayoutEngine(new PageDef(master,style),context,this);
  tempfilePath=System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str""+ Thread.currentThread().getId();
}",0.8212290502793296
72119,"private void initalize(PageDef page){
  axis=new AxisProcessor();
  axis.addCoordinate(page.contentwidth);
  setCacheSize();
  Rule rule=new Rule(0,page.contentwidth);
  cache=new DataCache(MAX_COLUMN);
  engine=new StyleEngine(this);
  containers.push(createContainer(rule,page.style));
}","private void initalize(PageDef page){
  axis=new AxisProcessor();
  axis.addCoordinate(page.contentwidth);
  setCacheSize();
  Rule rule=new Rule(0,page.contentwidth);
  cache=new DataCache(MAX_COLUMN,MAX_ROW,emitter);
  engine=new StyleEngine(this);
  containers.push(createContainer(rule,page.style));
}",0.9730639730639732
72120,"public ExcelLayoutEngine(PageDef page,ExcelContext context){
  this.context=context;
  initalize(page);
}","public ExcelLayoutEngine(PageDef page,ExcelContext context,ExcelEmitter emitter){
  this.context=context;
  this.emitter=emitter;
  initalize(page);
}",0.8235294117647058
72121,"public void addTable(TableInfo table,IStyle style){
  Rule rule=getCurrentContainer().getRule();
  int start=rule.getStart();
  int[] npos=new int[table.getColumnCount() + 1];
  npos[0]=start;
  for (int i=1; i <= table.getColumnCount(); i++) {
    npos[i]=npos[i - 1] + table.getColumnWidth(i - 1);
  }
  int[] scale=axis.getRange(start,rule.getEnd());
  for (int i=0; i < scale.length - 1; i++) {
    int sp=scale[i];
    int se=scale[i + 1];
    int[] range=inRange(sp,se,npos);
    if (range.length > 0) {
      int pos=axis.getCoordinateIndex(sp);
      cache.insertColumns(pos,range.length);
      for (int j=0; j < range.length; j++) {
        axis.addCoordinate(range[j]);
      }
    }
  }
  XlsContainer container=createContainer(rule,style);
  XlsTable tcontainer=new XlsTable(table,container);
  addContainer(tcontainer);
  tables.push(tcontainer);
}","public void addTable(TableInfo table,IStyle style){
  Rule rule=getCurrentContainer().getRule();
  int start=rule.getStart();
  int[] npos=new int[table.getColumnCount() + 1];
  npos[0]=start;
  for (int i=1; i <= table.getColumnCount(); i++) {
    npos[i]=npos[i - 1] + table.getColumnWidth(i - 1);
  }
  int[] scale=axis.getRange(start,rule.getEnd());
  for (int i=0; i < scale.length - 1; i++) {
    int startPosition=scale[i];
    int endPostion=scale[i + 1];
    int[] range=inRange(startPosition,endPostion,npos);
    if (range.length > 0) {
      int pos=axis.getCoordinateIndex(startPosition);
      cache.insertColumns(pos,range.length);
      for (int j=0; j < range.length; j++) {
        axis.addCoordinate(range[j]);
      }
    }
  }
  XlsContainer container=createContainer(rule,style);
  XlsTable tcontainer=new XlsTable(table,container);
  addContainer(tcontainer);
  tables.push(tcontainer);
}",0.9125775521714607
72122,"public ArrayList getNamesRefer(){
  return cache.getBookmarks();
}","public List<BookmarkDef> getNamesRefer(){
  return cache.getBookmarks();
}",0.8714285714285714
72123,"/** 
 * @param parentQuery parent query
 * @param design current root design
 * @return queries array of this design
 */
public IDataQueryDefinition[] build(IDataQueryDefinition parentQuery,ReportItemDesign design){
synchronized (report) {
    Object result=design.accept(queryBuilder,parentQuery);
    if (result == null) {
      return null;
    }
    IDataQueryDefinition[] queries=(IDataQueryDefinition[])result;
    design.setQueries(queries);
    if (!design.useCachedResult()) {
      for (int i=0; i < queries.length; i++) {
        IDataQueryDefinition query=queries[i];
        if (query != null) {
          String queryId=String.valueOf(design.getID());
          if (i > 0) {
            queryId=queryId + ""String_Node_Str"" + String.valueOf(i);
          }
          query.setName(queryId);
          this.queryIDs.put(query,queryId);
          if (query instanceof IBaseQueryDefinition) {
            IBaseQueryDefinition baseQuery=(IBaseQueryDefinition)query;
            ResultMetaData metaData=new ResultMetaData(baseQuery);
            resultMetaData.put(baseQuery,metaData);
          }
          registerQueryAndElement(query,design);
          if (!(query instanceof ISubqueryDefinition)) {
            this.queries.add(query);
          }
 else           if (query instanceof ISubqueryDefinition) {
            if (!(parentQuery instanceof IBaseQueryDefinition)) {
              context.addException(design.getHandle(),new EngineException(MessageConstants.SUBQUERY_CREATE_ERROR,design.getID()));
            }
            IBaseQueryDefinition pQuery=(IBaseQueryDefinition)parentQuery;
            Collection subQueries=pQuery.getSubqueries();
            if (!subQueries.contains(query)) {
              subQueries.add(query);
            }
          }
        }
      }
      registerQueryToHandle(design,queries);
      resolveQueryReference(design,queries);
      return queries;
    }
 else {
      for (int i=0; i < queries.length; i++) {
        IDataQueryDefinition query=queries[i];
        if (query instanceof IBaseQueryDefinition) {
          IBaseQueryDefinition baseQuery=(IBaseQueryDefinition)query;
          ResultMetaData metaData=new ResultMetaData(baseQuery);
          resultMetaData.put(baseQuery,metaData);
        }
      }
      registerQueryToHandle(design,queries);
      return null;
    }
  }
}","/** 
 * @param parentQuery parent query
 * @param design current root design
 * @return queries array of this design
 */
public IDataQueryDefinition[] build(IDataQueryDefinition parentQuery,ReportItemDesign design){
synchronized (report) {
    Object result=design.accept(queryBuilder,parentQuery);
    if (result == null) {
      return null;
    }
    IDataQueryDefinition[] queries=(IDataQueryDefinition[])result;
    design.setQueries(queries);
    if (!design.useCachedResult()) {
      for (int i=0; i < queries.length; i++) {
        IDataQueryDefinition query=queries[i];
        if (query != null) {
          String queryId=String.valueOf(design.getID());
          if (i > 0) {
            queryId=queryId + ""String_Node_Str"" + String.valueOf(i);
          }
          if (query instanceof IQueryDefinition) {
            query.setName(queryId);
          }
          this.queryIDs.put(query,queryId);
          if (query instanceof IBaseQueryDefinition) {
            IBaseQueryDefinition baseQuery=(IBaseQueryDefinition)query;
            ResultMetaData metaData=new ResultMetaData(baseQuery);
            resultMetaData.put(baseQuery,metaData);
          }
          registerQueryAndElement(query,design);
          if (!(query instanceof ISubqueryDefinition)) {
            this.queries.add(query);
          }
 else           if (query instanceof ISubqueryDefinition) {
            if (!(parentQuery instanceof IBaseQueryDefinition)) {
              context.addException(design.getHandle(),new EngineException(MessageConstants.SUBQUERY_CREATE_ERROR,design.getID()));
            }
            IBaseQueryDefinition pQuery=(IBaseQueryDefinition)parentQuery;
            Collection subQueries=pQuery.getSubqueries();
            if (!subQueries.contains(query)) {
              subQueries.add(query);
            }
          }
        }
      }
      registerQueryToHandle(design,queries);
      resolveQueryReference(design,queries);
      return queries;
    }
 else {
      for (int i=0; i < queries.length; i++) {
        IDataQueryDefinition query=queries[i];
        if (query instanceof IBaseQueryDefinition) {
          IBaseQueryDefinition baseQuery=(IBaseQueryDefinition)query;
          ResultMetaData metaData=new ResultMetaData(baseQuery);
          resultMetaData.put(baseQuery,metaData);
        }
      }
      registerQueryToHandle(design,queries);
      return null;
    }
  }
}",0.9863244266778876
72124,"protected void resolveTotalPage(IContentEmitter emitter){
  IContent con=context.getUnresolvedContent();
  if (!(con instanceof IAutoTextContent)) {
    return;
  }
  IAutoTextContent totalPageContent=(IAutoTextContent)con;
  if (null != totalPageContent) {
    NumberFormatter nf=new NumberFormatter();
    String patternStr=totalPageContent.getComputedStyle().getNumberFormat();
    nf.applyPattern(patternStr);
    long totalPageCount=context.totalPage > 0 ? context.totalPage : context.pageCount;
    totalPageContent.setText(nf.format(totalPageCount));
    AbstractArea totalPageArea=null;
    ChunkGenerator cg=new ChunkGenerator(context.getFontManager(),totalPageContent,true,true);
    if (cg.hasMore()) {
      Chunk c=cg.getNext();
      Dimension d=new Dimension((int)(c.getFontInfo().getWordWidth(c.getText()) * PDFConstants.LAYOUT_TO_PDF_RATIO),(int)(c.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      totalPageArea=(AbstractArea)AreaFactory.createTextArea(totalPageContent,c.getFontInfo(),false);
      totalPageArea.setWidth(Math.min(context.getMaxWidth(),d.getWidth()));
      totalPageArea.setHeight(Math.min(context.getMaxHeight(),d.getHeight()));
    }
    totalPageContent.setExtension(IContent.LAYOUT_EXTENSION,totalPageArea);
    emitter.startAutoText(totalPageContent);
  }
}","protected void resolveTotalPage(IContentEmitter emitter){
  IContent con=context.getUnresolvedContent();
  if (!(con instanceof IAutoTextContent)) {
    return;
  }
  IAutoTextContent totalPageContent=(IAutoTextContent)con;
  if (null != totalPageContent) {
    NumberFormatter nf=new NumberFormatter();
    String patternStr=totalPageContent.getComputedStyle().getNumberFormat();
    nf.applyPattern(patternStr);
    long totalPageCount=0;
    if (context.autoPageBreak) {
      totalPageCount=context.pageCount;
    }
 else {
      totalPageCount=context.totalPage > 0 ? context.totalPage : context.pageCount;
    }
    totalPageContent.setText(nf.format(totalPageCount));
    AbstractArea totalPageArea=null;
    ChunkGenerator cg=new ChunkGenerator(context.getFontManager(),totalPageContent,true,true);
    if (cg.hasMore()) {
      Chunk c=cg.getNext();
      Dimension d=new Dimension((int)(c.getFontInfo().getWordWidth(c.getText()) * PDFConstants.LAYOUT_TO_PDF_RATIO),(int)(c.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      totalPageArea=(AbstractArea)AreaFactory.createTextArea(totalPageContent,c.getFontInfo(),false);
      totalPageArea.setWidth(Math.min(context.getMaxWidth(),d.getWidth()));
      totalPageArea.setHeight(Math.min(context.getMaxHeight(),d.getHeight()));
    }
    totalPageContent.setExtension(IContent.LAYOUT_EXTENSION,totalPageArea);
    emitter.startAutoText(totalPageContent);
  }
}",0.9576547231270358
72125,"protected void addCaption(String caption){
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  TableRegionLayout rLayout=getTableRegionLayout();
  IContent row=generateCaptionRow(tableContent.getCaption());
  rLayout.initialize(row);
  rLayout.layout();
  TableArea tableRegion=(TableArea)row.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null) {
    Iterator iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      RowArea rowArea=(RowArea)iter.next();
      addArea(rowArea);
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void addCaption(String caption){
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  TableRegionLayout rLayout=getTableRegionLayout();
  IContent row=generateCaptionRow(tableContent.getCaption());
  rLayout.initialize(row);
  rLayout.layout();
  TableArea tableRegion=(TableArea)row.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null) {
    Iterator iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      RowArea rowArea=(RowArea)iter.next();
      addArea(rowArea);
    }
  }
  row.setExtension(IContent.LAYOUT_EXTENSION,null);
  regionLayout=null;
}",0.9745275267050124
72126,"/** 
 * populate the extended extensions information.
 * @param name
 * @param aggrFunc
 * @param elem
 * @param aggrWrapper 
 */
private void populateExtendedAggrInfo(String name,IAggregation aggrFunc,IConfigurationElement elem,AggrFunctionWrapper aggrWrapper){
  IConfigurationElement[] uiInfo=elem.getChildren(ELEMENT_UIINFO);
  assert(uiInfo != null && uiInfo.length == 1);
  String paramInfo=uiInfo[0].getAttribute(ATTRIBUTE_PARAMETER_META_INFO);
  String textInfo=uiInfo[0].getAttribute(ATTRIBUTE_TEXT_DATA);
  aggrWrapper.setDisplayName(textInfo);
  List paramList=new ArrayList();
  String[] paramInfos=paramInfo.split(""String_Node_Str"");
  boolean[] paramFlags=aggrFunc.getParameterDefn();
  if (paramInfos != null && paramInfos.length > 0) {
    for (int k=0; k < paramInfos.length; k++) {
      final String s=paramInfos[k].trim();
      int index=s.indexOf(' ');
      String paramName=null;
      if (index > 0) {
        paramName=s.substring(index + 1).trim();
      }
 else {
        paramName=paramInfos[k];
      }
      ParameterDefn paramDefn=new ParameterDefn(paramName,paramName,!paramFlags[k],true);
      paramList.add(paramDefn);
    }
  }
  IParameterDefn[] params=new IParameterDefn[paramList.size()];
  paramList.toArray(params);
  aggrWrapper.setParameterDefn(params);
}","/** 
 * populate the extended extensions information.
 * @param name
 * @param aggrFunc
 * @param elem
 * @param aggrWrapper 
 */
private void populateExtendedAggrInfo(String name,IAggregation aggrFunc,IConfigurationElement elem,AggrFunctionWrapper aggrWrapper) throws DataException {
  IConfigurationElement[] uiInfo=elem.getChildren(ELEMENT_UIINFO);
  assert(uiInfo != null && uiInfo.length == 1);
  String paramInfo=uiInfo[0].getAttribute(ATTRIBUTE_PARAMETER_META_INFO);
  String textInfo=uiInfo[0].getAttribute(ATTRIBUTE_TEXT_DATA);
  aggrWrapper.setDisplayName(textInfo);
  List paramList=new ArrayList();
  String[] paramInfos=paramInfo.split(""String_Node_Str"");
  boolean[] paramFlags=aggrFunc.getParameterDefn();
  if (paramInfos != null && paramInfos.length > 0 && paramFlags != null) {
    if (paramInfos.length != paramFlags.length)     throw new DataException(ResourceConstants.INCONSISTENT_AGGREGATION_ARGUMENT_DEFINITION);
    for (int k=0; k < paramInfos.length; k++) {
      final String s=paramInfos[k].trim();
      int index=s.indexOf(' ');
      String paramName=null;
      if (index > 0) {
        paramName=s.substring(index + 1).trim();
      }
 else {
        paramName=paramInfos[k];
      }
      ParameterDefn paramDefn=new ParameterDefn(paramName,paramName,!paramFlags[k],true);
      paramList.add(paramDefn);
    }
  }
  IParameterDefn[] params=new IParameterDefn[paramList.size()];
  paramList.toArray(params);
  aggrWrapper.setParameterDefn(params);
}",0.9335249730506648
72127,"/** 
 * @param subElems
 * @throws DataException
 */
private void populateDeprecatedAggregations(IConfigurationElement[] subElems) throws DataException {
  if (subElems == null)   return;
  for (int j=0; j < subElems.length; j++) {
    try {
      IAggregation aggrFunc=(IAggregation)subElems[j].createExecutableExtension(ATTRIBUTE_AGGREGATION_CLASS);
      String name=aggrFunc.getName().toUpperCase();
      AggrFunctionWrapper aggrWrapper=new AggrFunctionWrapper(aggrFunc);
      populateExtendedAggrInfo(name,aggrFunc,subElems[j],aggrWrapper);
      if (aggrMap.put(name,aggrWrapper) != null)       throw new DataException(ResourceConstants.DUPLICATE_AGGREGATION_NAME,name);
      allAggrNames.add(name);
    }
 catch (    FrameworkException exception) {
    }
  }
}","/** 
 * @param subElems
 * @throws DataException
 */
private void populateDeprecatedAggregations(IConfigurationElement[] subElems) throws DataException {
  if (subElems == null)   return;
  for (int j=0; j < subElems.length; j++) {
    try {
      IAggregation aggrFunc=(IAggregation)subElems[j].createExecutableExtension(ATTRIBUTE_AGGREGATION_CLASS);
      String name=aggrFunc.getName().toUpperCase();
      AggrFunctionWrapper aggrWrapper=new AggrFunctionWrapper(aggrFunc);
      populateExtendedAggrInfo(name,aggrFunc,subElems[j],aggrWrapper);
      if (aggrMap.put(name,aggrWrapper) != null)       throw new DataException(ResourceConstants.DUPLICATE_AGGREGATION_NAME,name);
      allAggrNames.add(name);
    }
 catch (    Exception e) {
      logger.logp(Level.WARNING,AggrFunctionWrapper.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    }
  }
}",0.9074187614960147
72128,"public IModelEventProcessor getModelProcessor(){
  return new DesignerOutlineEventProcessor(this);
}","public IModelEventProcessor getModelProcessor(){
  return new DesignerOutlineEventProcessor(this){
    @Override public void clear(){
      super.clear();
      if (isDispose()) {
        return;
      }
      getTreeViewer().refresh();
    }
  }
;
}",0.5542857142857143
72129,"public Object getAdapter(Class key){
  if (key == IModelEventProcessor.class) {
    return new GraphicsViewModelEventProcessor(this){
      public void clear(){
        super.clear();
        SetCurrentEditModelCommand c=new SetCurrentEditModelCommand(HandleAdapterFactory.getInstance().getLibraryHandleAdapter().getOldEditorModel());
        Object obj=HandleAdapterFactory.getInstance().getLibraryHandleAdapter().getCurrentEditorModel();
        if (obj instanceof DesignElementHandle && ((DesignElementHandle)obj).getContainer() != null) {
          c=new SetCurrentEditModelCommand(obj);
        }
        c.execute();
      }
    }
;
  }
  return super.getAdapter(key);
}","public Object getAdapter(Class key){
  if (key == IModelEventProcessor.class) {
    return new GraphicsViewModelEventProcessor(this){
      public void clear(){
        Object oldObj=HandleAdapterFactory.getInstance().getLibraryHandleAdapter().getOldEditorModel();
        SetCurrentEditModelCommand c=new SetCurrentEditModelCommand(oldObj);
        Object obj=HandleAdapterFactory.getInstance().getLibraryHandleAdapter().getCurrentEditorModel();
        if (obj instanceof DesignElementHandle && ((DesignElementHandle)obj).getContainer() != null) {
          c=new SetCurrentEditModelCommand(obj);
        }
 else         if (oldObj instanceof DesignElementHandle && ((DesignElementHandle)oldObj).getContainer() == null) {
          c=new SetCurrentEditModelCommand(null);
        }
        c.execute();
      }
    }
;
  }
  return super.getAdapter(key);
}",0.7731421121251629
72130,"public void clear(){
  super.clear();
  SetCurrentEditModelCommand c=new SetCurrentEditModelCommand(HandleAdapterFactory.getInstance().getLibraryHandleAdapter().getOldEditorModel());
  Object obj=HandleAdapterFactory.getInstance().getLibraryHandleAdapter().getCurrentEditorModel();
  if (obj instanceof DesignElementHandle && ((DesignElementHandle)obj).getContainer() != null) {
    c=new SetCurrentEditModelCommand(obj);
  }
  c.execute();
}","public void clear(){
  Object oldObj=HandleAdapterFactory.getInstance().getLibraryHandleAdapter().getOldEditorModel();
  SetCurrentEditModelCommand c=new SetCurrentEditModelCommand(oldObj);
  Object obj=HandleAdapterFactory.getInstance().getLibraryHandleAdapter().getCurrentEditorModel();
  if (obj instanceof DesignElementHandle && ((DesignElementHandle)obj).getContainer() != null) {
    c=new SetCurrentEditModelCommand(obj);
  }
 else   if (oldObj instanceof DesignElementHandle && ((DesignElementHandle)oldObj).getContainer() == null) {
    c=new SetCurrentEditModelCommand(null);
  }
  c.execute();
}",0.6736641221374046
72131,"protected void closeLayout(ContainerContext currentContext,int index,boolean finished){
  PageArea page=(PageArea)currentContext.root;
  int overFlowType=context.getPageOverflow();
  if (overFlowType == IPDFRenderOption.FIT_TO_PAGE_SIZE) {
    float scale=calculatePageScale(currentContext,page);
    if (1f == scale) {
      ((PageContext)currentContext).pageContent.setExtension(IContent.LAYOUT_EXTENSION,page);
      return;
    }
    page.setScale(scale);
    updatePageDimension(scale,page);
  }
 else   if (overFlowType == IPDFRenderOption.ENLARGE_PAGE_SIZE) {
    updatePageDimension(page);
  }
  ((PageContext)currentContext).pageContent.setExtension(IContent.LAYOUT_EXTENSION,page);
  outputPage(((PageContext)currentContext).pageContent);
}","protected void closeLayout(ContainerContext currentContext,int index,boolean finished){
  PageArea page=(PageArea)currentContext.root;
  int overFlowType=context.getPageOverflow();
  if (overFlowType == IPDFRenderOption.FIT_TO_PAGE_SIZE) {
    float scale=calculatePageScale(currentContext,page);
    if (1f == scale) {
      ((PageContext)currentContext).pageContent.setExtension(IContent.LAYOUT_EXTENSION,page);
      outputPage(((PageContext)currentContext).pageContent);
      return;
    }
    page.setScale(scale);
    updatePageDimension(scale,page);
  }
 else   if (overFlowType == IPDFRenderOption.ENLARGE_PAGE_SIZE) {
    updatePageDimension(page);
  }
  ((PageContext)currentContext).pageContent.setExtension(IContent.LAYOUT_EXTENSION,page);
  outputPage(((PageContext)currentContext).pageContent);
}",0.9609224855861628
72132,"private ProjectedColumns getProjectedColumns(Integer resultSetNum,IResultSet odaResultSet) throws DataException {
  final String methodName=""String_Node_Str"";
  sm_logger.entering(m_nestedClassName,methodName,resultSetNum);
  ProjectedColumns projectedColumns=(ProjectedColumns)m_seqProjectedColumns.get(resultSetNum);
  if (projectedColumns != null && !m_incompleteProjectedColumns.contains(resultSetNum)) {
    sm_logger.exiting(m_nestedClassName,methodName,projectedColumns);
    return projectedColumns;
  }
  IResultSetMetaData odaRuntimeMetadata=tryGetRuntimeMetaData(resultSetNum,odaResultSet);
  boolean hasOdaRuntimeMetadata=odaRuntimeMetadata != null;
  if (!hasOdaRuntimeMetadata) {
    sm_logger.logp(Level.INFO,m_nestedClassName,methodName,""String_Node_Str"" + resultSetNum);
    odaRuntimeMetadata=m_stmt.getRuntimeMetaData();
  }
  ProjectedColumns newProjectedColumns=doGetProjectedColumns(odaRuntimeMetadata);
  if (projectedColumns == null) {
    projectedColumns=newProjectedColumns;
    if (!hasOdaRuntimeMetadata)     m_incompleteProjectedColumns.add(resultSetNum);
  }
 else   if (m_incompleteProjectedColumns.contains(resultSetNum)) {
    updateProjectedColumns(newProjectedColumns,projectedColumns);
    projectedColumns=newProjectedColumns;
    if (hasOdaRuntimeMetadata)     m_incompleteProjectedColumns.remove(resultSetNum);
  }
  m_seqProjectedColumns.put(resultSetNum,projectedColumns);
  sm_logger.exiting(m_nestedClassName,methodName,projectedColumns);
  return projectedColumns;
}","private ProjectedColumns getProjectedColumns(Integer resultSetNum,IResultSet odaResultSet) throws DataException {
  final String methodName=""String_Node_Str"";
  sm_logger.entering(m_nestedClassName,methodName,resultSetNum);
  ProjectedColumns projectedColumns=(ProjectedColumns)m_seqProjectedColumns.get(resultSetNum);
  if (projectedColumns != null && !m_incompleteProjectedColumns.contains(resultSetNum)) {
    sm_logger.exiting(m_nestedClassName,methodName,projectedColumns);
    return projectedColumns;
  }
  IResultSetMetaData odaRuntimeMetadata=tryGetRuntimeMetaData(resultSetNum,odaResultSet);
  boolean hasOdaRuntimeMetadata=odaRuntimeMetadata != null;
  if (!hasOdaRuntimeMetadata) {
    sm_logger.logp(Level.INFO,m_nestedClassName,methodName,""String_Node_Str"" + resultSetNum);
    odaRuntimeMetadata=m_stmt.getRuntimeMetaData();
  }
  ProjectedColumns newProjectedColumns=doGetProjectedColumns(odaRuntimeMetadata);
  if (projectedColumns == null) {
    List customColumns=this.m_stmt.getProjectedColumns().getCustomColumns();
    if (customColumns != null) {
      for (int i=0; i < customColumns.size(); i++) {
        CustomColumn column=(CustomColumn)customColumns.get(i);
        newProjectedColumns.addCustomColumn(column.getName(),column.getType());
      }
    }
    projectedColumns=newProjectedColumns;
    if (!hasOdaRuntimeMetadata)     m_incompleteProjectedColumns.add(resultSetNum);
  }
 else   if (m_incompleteProjectedColumns.contains(resultSetNum)) {
    updateProjectedColumns(newProjectedColumns,projectedColumns);
    projectedColumns=newProjectedColumns;
    if (hasOdaRuntimeMetadata)     m_incompleteProjectedColumns.remove(resultSetNum);
  }
  m_seqProjectedColumns.put(resultSetNum,projectedColumns);
  sm_logger.exiting(m_nestedClassName,methodName,projectedColumns);
  return projectedColumns;
}",0.898594077176189
72133,"protected void addCaption(String caption){
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  TableRegionLayout rLayout=getTableRegionLayout();
  IContent row=generateCaptionRow(tableContent.getCaption());
  rLayout.initialize(row);
  rLayout.layout();
  TableArea tableRegion=(TableArea)content.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null) {
    Iterator iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      RowArea rowArea=(RowArea)iter.next();
      addArea(rowArea);
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void addCaption(String caption){
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  TableRegionLayout rLayout=getTableRegionLayout();
  IContent row=generateCaptionRow(tableContent.getCaption());
  rLayout.initialize(row);
  rLayout.layout();
  TableArea tableRegion=(TableArea)row.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null) {
    Iterator iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      RowArea rowArea=(RowArea)iter.next();
      addArea(rowArea);
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}",0.9916943521594684
72134,"public void prepare(String command) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"" + command + ""String_Node_Str"");
  try {
    if (command == null) {
      logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
      throw new OdaException(""String_Node_Str"");
    }
    paramUtil=new SPParameterPositionUtil(command,'@');
    this.callStat=conn.prepareCall(command);
    this.cachedResultMetaData=null;
    this.cachedResultSet=null;
    this.cachedParameterMetaData=null;
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.STATEMENT_CANNOT_PREPARE,e);
  }
}","public void prepare(String command) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"" + command + ""String_Node_Str"");
  try {
    if (command == null) {
      logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
      throw new OdaException(""String_Node_Str"");
    }
    paramUtil=new SPParameterPositionUtil(command,conn.getMetaData().getIdentifierQuoteString());
    this.callStat=conn.prepareCall(command);
    this.cachedResultMetaData=null;
    this.cachedResultSet=null;
    this.cachedParameterMetaData=null;
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.STATEMENT_CANNOT_PREPARE,e);
  }
}",0.967741935483871
72135,"/** 
 * get parameter metadata from database matadata
 */
private java.util.List getCallableParamMetaData(){
  java.util.List paramMetaDataList=new ArrayList();
  try {
    DatabaseMetaData metaData=conn.getMetaData();
    String cataLog=conn.getCatalog();
    ArrayList schemaList=null;
    String columnNamePattern=null;
    String procedureNamePattern=this.paramUtil.getProcedureName();
    String packagePattern=""String_Node_Str"";
    String schemaPattern=this.paramUtil.getSchemaName();
    if (!metaData.supportsCatalogsInProcedureCalls()) {
      packagePattern=this.paramUtil.getPackageName();
    }
    if (schemaPattern != null) {
      schemaList=new ArrayList();
      schemaList.add(schemaPattern);
    }
 else {
      java.sql.ResultSet rs=metaData.getSchemas();
      schemaList=createSchemaList(rs);
      rs.close();
    }
    if (schemaList == null || schemaList.size() == 0) {
      if (schemaList == null)       schemaList=new ArrayList();
      schemaList.add(""String_Node_Str"");
      columnNamePattern=""String_Node_Str"";
    }
    for (int i=0; i < schemaList.size(); i++) {
      java.sql.ResultSet rs=null;
      if (packagePattern.trim().length() > 0)       rs=metaData.getProcedureColumns(packagePattern,schemaList.get(i).toString(),procedureNamePattern,columnNamePattern);
 else       rs=metaData.getProcedureColumns(cataLog,schemaList.get(i).toString(),procedureNamePattern,columnNamePattern);
      while (rs.next()) {
        ParameterDefn p=new ParameterDefn();
        p.setParamName(rs.getString(""String_Node_Str""));
        p.setParamInOutType(rs.getInt(""String_Node_Str""));
        p.setParamType(rs.getInt(""String_Node_Str""));
        p.setParamTypeName(rs.getString(""String_Node_Str""));
        p.setPrecision(rs.getInt(""String_Node_Str""));
        p.setScale(rs.getInt(""String_Node_Str""));
        p.setIsNullable(rs.getInt(""String_Node_Str""));
        if (p.getParamType() == Types.OTHER)         correctParamType(p);
        paramMetaDataList.add(p);
      }
      rs.close();
    }
  }
 catch (  SQLException e) {
  }
catch (  JDBCException ex) {
  }
  return paramMetaDataList;
}","/** 
 * get parameter metadata from database matadata
 */
private java.util.List getCallableParamMetaData(){
  java.util.List paramMetaDataList=new ArrayList();
  try {
    DatabaseMetaData metaData=conn.getMetaData();
    String cataLog=conn.getCatalog();
    String procedureNamePattern=getNamePattern(this.paramUtil.getProcedure());
    String schemaPattern=null;
    if (this.paramUtil.getSchema() != null) {
      schemaPattern=getNamePattern(this.paramUtil.getSchema());
    }
    if (!metaData.supportsCatalogsInProcedureCalls()) {
      if (this.paramUtil.getPackage() != null) {
        cataLog=getNamePattern(this.paramUtil.getPackage());
      }
    }
    java.sql.ResultSet rs=null;
    rs=metaData.getProcedureColumns(cataLog,schemaPattern,procedureNamePattern,null);
    while (rs.next()) {
      ParameterDefn p=new ParameterDefn();
      p.setParamName(rs.getString(""String_Node_Str""));
      p.setParamInOutType(rs.getInt(""String_Node_Str""));
      p.setParamType(rs.getInt(""String_Node_Str""));
      p.setParamTypeName(rs.getString(""String_Node_Str""));
      p.setPrecision(rs.getInt(""String_Node_Str""));
      p.setScale(rs.getInt(""String_Node_Str""));
      p.setIsNullable(rs.getInt(""String_Node_Str""));
      if (p.getParamType() == Types.OTHER)       correctParamType(p);
      paramMetaDataList.add(p);
    }
    rs.close();
  }
 catch (  SQLException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
catch (  JDBCException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
  return paramMetaDataList;
}",0.5140365222131371
72136,"IOdaDataSetDesign newOdaDataSet(OdaDataSetHandle modelDataSet,ExecutionContext context) throws BirtException {
  OdaDataSetDesign dteDataSet=new OdaDataSetDesign(modelDataSet.getQualifiedName());
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(modelDataSet,context);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(modelDataSet,dteDataSet);
  String queryTextBinding=modelDataSet.getPropertyBinding(OdaDataSet.QUERY_TEXT_PROP);
  if (needPropertyBinding() && queryTextBinding != null && queryTextBinding.length() > 0 && context.getDataEngine() instanceof DteDataEngine) {
    dteDataSet.setQueryText(evaluatePropertyBindingExpr(queryTextBinding));
  }
 else {
    dteDataSet.setQueryText(modelDataSet.getQueryText());
  }
  dteDataSet.setExtensionID(modelDataSet.getExtensionID());
  dteDataSet.setPrimaryResultSetName(modelDataSet.getResultSetName());
  Map staticProps=getExtensionProperties(modelDataSet,modelDataSet.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=modelDataSet.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=this.evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteDataSet.addPublicProperty((String)propName,propValue);
    }
  }
  Iterator elmtIter=modelDataSet.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteDataSet.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  return dteDataSet;
}","IOdaDataSetDesign newOdaDataSet(OdaDataSetHandle modelDataSet,ExecutionContext context) throws BirtException {
  OdaDataSetDesign dteDataSet=new OdaDataSetDesign(modelDataSet.getQualifiedName());
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(modelDataSet,context);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(modelDataSet,dteDataSet);
  String queryTextBinding=modelDataSet.getPropertyBinding(OdaDataSet.QUERY_TEXT_PROP);
  if (needPropertyBinding() && queryTextBinding != null && queryTextBinding.length() > 0 && context.getDataEngine() instanceof DteDataEngine) {
    dteDataSet.setQueryText(evaluatePropertyBindingExpr(queryTextBinding));
  }
 else {
    dteDataSet.setQueryText(modelDataSet.getQueryText());
  }
  dteDataSet.setExtensionID(modelDataSet.getExtensionID());
  dteDataSet.setPrimaryResultSetName(modelDataSet.getResultSetName());
  if (modelDataSet.getPropertyHandle(IOdaDataSetModel.RESULT_SET_NUMBER_PROP).isSet())   dteDataSet.setPrimaryResultSetNumber(modelDataSet.getResultSetNumber());
  Map staticProps=getExtensionProperties(modelDataSet,modelDataSet.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=modelDataSet.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=this.evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteDataSet.addPublicProperty((String)propName,propValue);
    }
  }
  Iterator elmtIter=modelDataSet.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteDataSet.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  return dteDataSet;
}",0.9598811292719168
72137,"protected MasterPageDesign getMasterPage(IReportContent report){
  MasterPageDesign pageDesign=null;
  if (masterPageName != null && !""String_Node_Str"".equals(masterPageName)) {
    pageDesign=report.getDesign().findMasterPage(masterPageName);
    if (pageDesign != null) {
      return pageDesign;
    }
  }
  return getDefaultMasterPage(report);
}","protected MasterPageDesign getMasterPage(IReportContent report){
  if (masterPage != null) {
    return masterPage;
  }
  return getDefaultMasterPage(report);
}",0.6011787819253438
72138,"public PageLayout(IReportExecutor executor,LayoutEngineContext context,ContainerLayout parent,IContent content){
  super(context,parent,content);
  this.reportExecutor=executor;
  pageContent=(IPageContent)content;
  masterPageName=pageContent.getName();
  report=pageContent.getReportContent();
}","public PageLayout(IReportExecutor executor,LayoutEngineContext context,ContainerLayout parent,IContent content){
  super(context,parent,content);
  this.reportExecutor=executor;
  pageContent=(IPageContent)content;
  masterPage=(MasterPageDesign)pageContent.getGenerateBy();
  report=pageContent.getReportContent();
}",0.9413680781758956
72139,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws IOException, BirtException, DataException {
  Map<?,?> candidateAppContext=new HashMap();
  if (appContext != null)   candidateAppContext.putAll(appContext);
  Map<ReportElementHandle,IQueryDefinition> queryMap=new HashMap<ReportElementHandle,IQueryDefinition>();
  Map<ReportElementHandle,List<ColumnMeta>> metaMap=new HashMap<ReportElementHandle,List<ColumnMeta>>();
  prepareForCubeGeneration(cubeHandle,queryMap,metaMap);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,candidateAppContext,queryMap,metaMap);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,queryMap.get(cubeHandle),metaMap.get(cubeHandle),candidateAppContext),this.toStringArray(measureNames),stopSign);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws IOException, BirtException, DataException {
  Map<?,?> candidateAppContext=new HashMap();
  if (appContext != null)   candidateAppContext.putAll(appContext);
  Map<ReportElementHandle,IQueryDefinition> queryMap=new HashMap<ReportElementHandle,IQueryDefinition>();
  Map<ReportElementHandle,List<ColumnMeta>> metaMap=new HashMap<ReportElementHandle,List<ColumnMeta>>();
  prepareForCubeGeneration(cubeHandle,queryMap,metaMap);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,candidateAppContext,queryMap,metaMap);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,queryMap.get(cubeHandle),metaMap.get(cubeHandle),candidateAppContext),this.toStringArray(measureNames),stopSign);
}",0.9975320829220138
72140,"public EditPart createEditPart(EditPart context,Object model){
  EditPart editPart=null;
  if (model instanceof LibraryHandle) {
    return new LibraryReportDesignEditPart(model);
  }
  if (ignoreModel(model)) {
    editPart=new EmptyEditPart(model);
  }
  if (editPart != null) {
    return editPart;
  }
  editPart=super.createEditPart(context,model);
  if (!(editPart instanceof DestroyEditPart) && (editPart == null || editPart instanceof DummyEditpart)) {
    editPart=new EmptyEditPart(model);
  }
  return editPart;
}","public EditPart createEditPart(EditPart context,Object model){
  EditPart editPart=null;
  if (model instanceof LibraryHandle) {
    return new LibraryReportDesignEditPart(model);
  }
  if (ignoreModel(model)) {
    editPart=new EmptyEditPart(model);
  }
  if (editPart != null) {
    return editPart;
  }
  editPart=super.createEditPart(context,model);
  if (!(editPart instanceof DestroyEditPart) && (editPart == null || editPart instanceof DummyEditpart)) {
    editPart=new EmptyEditPart(model);
  }
  if (editPart instanceof AreaEditPart) {
    editPart=new EmptyEditPart(model);
  }
  return editPart;
}",0.8949691085613416
72141,"/** 
 * @param dataSetName
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSet(DataSetHandle handle,boolean keepDataSetFilter,boolean disAllowAggregation) throws AdapterException, BirtException {
  if (handle == null)   throw new AdapterException(ResourceConstants.DATASETHANDLE_NULL_ERROR);
  DataSourceHandle dataSourceHandle=handle.getDataSource();
  if (dataSourceHandle != null) {
    IBaseDataSourceDesign dsourceDesign=this.modelAdaptor.adaptDataSource(dataSourceHandle);
    dataEngine.defineDataSource(dsourceDesign);
  }
  if (handle instanceof JointDataSetHandle) {
    defineSourceDataSets((JointDataSetHandle)handle);
  }
  BaseDataSetDesign baseDS=this.modelAdaptor.adaptDataSet(handle);
  if (useResultHints == false && handle.equals(major)) {
    baseDS.getResultSetHints().clear();
  }
  if (!keepDataSetFilter) {
    if (baseDS.getFilters() != null)     baseDS.getFilters().clear();
  }
  if (disAllowAggregation) {
    List computedColumns=baseDS.getComputedColumns();
    if (computedColumns != null && computedColumns.size() != 0) {
      Iterator it=computedColumns.iterator();
      while (it.hasNext()) {
        IComputedColumn computedColumn=(IComputedColumn)it.next();
        if (computedColumn.getAggregateFunction() != null)         it.remove();
      }
    }
  }
  dataEngine.defineDataSet(baseDS);
}","/** 
 * @param dataSetName
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSet(DataSetHandle handle,boolean keepDataSetFilter,boolean disAllowAggregation) throws AdapterException, BirtException {
  if (handle == null)   throw new AdapterException(ResourceConstants.DATASETHANDLE_NULL_ERROR);
  DataSourceHandle dataSourceHandle=handle.getDataSource();
  if (dataSourceHandle != null) {
    IBaseDataSourceDesign dsourceDesign=this.modelAdaptor.adaptDataSource(dataSourceHandle);
    dataEngine.defineDataSource(dsourceDesign);
  }
  if (handle instanceof JointDataSetHandle) {
    defineSourceDataSets((JointDataSetHandle)handle);
  }
  BaseDataSetDesign baseDS=this.modelAdaptor.adaptDataSet(handle);
  if (useResultHints == false && handle.equals(major)) {
    baseDS.getResultSetHints().clear();
  }
  if (!keepDataSetFilter) {
    if (baseDS.getFilters() != null)     baseDS.getFilters().clear();
  }
  if (disAllowAggregation) {
    List computedColumns=baseDS.getComputedColumns();
    if (computedColumns != null && computedColumns.size() != 0) {
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null) {
          computedColumns.set(i,new ComputedColumn(computedColumn.getName(),""String_Node_Str""));
        }
      }
    }
  }
  dataEngine.defineDataSet(baseDS);
}",0.8756679729248308
72142,"private static List populateArgument(ComputedColumnHandle modelCmptdColumn){
  List argument=new ArrayList();
  Iterator it=modelCmptdColumn.argumentsIterator();
  while (it != null && it.hasNext()) {
    AggregationArgumentHandle arg=(AggregationArgumentHandle)it.next();
    if (arg.getValue() != null)     argument.add(new ScriptExpression(arg.getValue()));
 else     argument.add(new ScriptExpression(""String_Node_Str""));
  }
  return argument;
}","private static List populateArgument(ComputedColumnHandle modelCmptdColumn){
  List argument=new ArrayList();
  Iterator it=modelCmptdColumn.argumentsIterator();
  while (it != null && it.hasNext()) {
    AggregationArgumentHandle arg=(AggregationArgumentHandle)it.next();
    if (arg.getValue() != null)     argument.add(new ScriptExpression(arg.getValue()));
 else     argument.add(new ScriptExpression(null));
  }
  return argument;
}",0.9763246899661782
72143,"protected void verticalAlign(){
  Iterator iter=currentContext.root.getChildren();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    IStyle childStyle=child.getStyle();
    String vAlign=childStyle.getVerticalAlign();
    if (childStyle == null) {
      continue;
    }
    int spacing=currentContext.root.getHeight() - child.getAllocatedHeight();
    if (spacing < 0) {
      spacing=0;
    }
    if (CSSConstants.CSS_BASELINE_VALUE.equalsIgnoreCase(vAlign)) {
      int lineHeight=((ContainerLayout)parent).getLineHeight();
      if (lineHeight > 0) {
        child.setPosition(child.getX(),child.getY() + getMaxBaseLine() - child.getBaseLine() + spacing / 2);
      }
 else {
        child.setPosition(child.getX(),child.getY() + getMaxBaseLine() - child.getBaseLine());
      }
    }
 else     if (CSSConstants.CSS_BOTTOM_VALUE.equalsIgnoreCase(vAlign)) {
      child.setPosition(child.getX(),spacing + child.getY());
    }
 else     if (CSSConstants.CSS_MIDDLE_VALUE.equalsIgnoreCase(vAlign)) {
      child.setPosition(child.getX(),spacing / 2 + child.getY());
    }
  }
}","protected void verticalAlign(){
  Iterator iter=currentContext.root.getChildren();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    IStyle childStyle=child.getStyle();
    String vAlign=childStyle.getVerticalAlign();
    if (childStyle == null) {
      continue;
    }
    int spacing=currentContext.root.getContentHeight() - child.getAllocatedHeight();
    if (spacing < 0) {
      spacing=0;
    }
    if (CSSConstants.CSS_BASELINE_VALUE.equalsIgnoreCase(vAlign)) {
      int lineHeight=((ContainerLayout)parent).getLineHeight();
      if (lineHeight > 0) {
        child.setPosition(child.getX(),child.getY() + getMaxBaseLine() - child.getBaseLine() + spacing / 2);
      }
 else {
        child.setPosition(child.getX(),child.getY() + getMaxBaseLine() - child.getBaseLine());
      }
    }
 else     if (CSSConstants.CSS_BOTTOM_VALUE.equalsIgnoreCase(vAlign)) {
      child.setPosition(child.getX(),child.getY() + spacing);
    }
 else     if (CSSConstants.CSS_MIDDLE_VALUE.equalsIgnoreCase(vAlign)) {
      child.setPosition(child.getX(),child.getY() + spacing / 2);
    }
  }
}",0.9698605488079172
72144,"private int getMaxBaseLine(){
  int maxChildrenBaseLine=currentContext.root.getMaxChildrenBaseLine();
  if (maxChildrenBaseLine == 0) {
    Iterator iter=currentContext.root.getChildren();
    int maxChildrenBaseLineBelow=currentContext.root.getMaxChildrenBaseLineBelow();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      maxChildrenBaseLine=Math.max(maxChildrenBaseLine,child.getBaseLine());
      maxChildrenBaseLineBelow=Math.max(maxChildrenBaseLineBelow,child.getAllocatedHeight() - child.getBaseLine());
    }
    currentContext.root.setContentHeight(Math.max(currentContext.root.getContentHeight(),maxChildrenBaseLine + maxChildrenBaseLineBelow));
    currentContext.root.setBaseLine(maxChildrenBaseLine);
    currentContext.root.setMaxChildrenBaseLine(maxChildrenBaseLine);
    currentContext.root.setMaxChildrenBaseLineBelow(maxChildrenBaseLineBelow);
  }
  return maxChildrenBaseLine;
}","/** 
 * Calculates the max baseline, and update the root height if necessary.
 * @return the max baseline.
 */
private int getMaxBaseLine(){
  int maxChildrenBaseLine=currentContext.root.getMaxChildrenBaseLine();
  if (maxChildrenBaseLine == 0) {
    int maxChildrenBaseLineBelow=0;
    Iterator iter=currentContext.root.getChildren();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      maxChildrenBaseLine=Math.max(maxChildrenBaseLine,child.getBaseLine());
      maxChildrenBaseLineBelow=Math.max(maxChildrenBaseLineBelow,child.getAllocatedHeight() - child.getBaseLine());
    }
    currentContext.root.setContentHeight(Math.max(currentContext.root.getContentHeight(),maxChildrenBaseLine + maxChildrenBaseLineBelow));
    currentContext.root.setBaseLine(maxChildrenBaseLine);
    currentContext.root.setMaxChildrenBaseLine(maxChildrenBaseLine);
    currentContext.root.setMaxChildrenBaseLineBelow(maxChildrenBaseLineBelow);
  }
  return maxChildrenBaseLine;
}",0.8636599274235355
72145,"public void defineNames(List namesRefer){
  writer.openTag(""String_Node_Str"");
  for (Iterator it=namesRefer.iterator(); it.hasNext(); ) {
    BookmarkDef bookmark=(BookmarkDef)it.next();
    String name=bookmark.getName();
    String refer=bookmark.getRefer();
    defineName(name,refer);
  }
  writer.closeTag(""String_Node_Str"");
}","public void defineNames(List namesRefer){
  writer.openTag(""String_Node_Str"");
  for (Iterator it=namesRefer.iterator(); it.hasNext(); ) {
    BookmarkDef bookmark=(BookmarkDef)it.next();
    String name=bookmark.getName();
    String refer=bookmark.getRefer();
    if (!bookmarkNames.contains(name)) {
      defineName(name,refer);
      bookmarkNames.add(name);
    }
 else {
      logger.log(Level.WARNING,""String_Node_Str"" + name);
    }
  }
  writer.closeTag(""String_Node_Str"");
  bookmarkNames.clear();
}",0.7900355871886121
72146,"/** 
 * adapt the obsolete query definition for backward compatibility.
 * @param query
 * @return
 * @throws DataException
 */
private void adaptCubeQueryDefinition(ICubeQueryDefinition query) throws DataException {
  List bindings=query.getBindings();
  List levelExprList=getAllAggrOns(query);
  for (int i=0; i < bindings.size(); i++) {
    IBinding binding=(IBinding)bindings.get(i);
    String measureName=OlapExpressionCompiler.getReferencedScriptObject(binding.getExpression(),ScriptConstants.MEASURE_SCRIPTABLE);
    if (measureName != null) {
      if (binding.getAggrFunction() == null) {
        String aggrFunc=getAggrFunction(query,measureName);
        binding.setAggrFunction(aggrFunc);
        if (binding.getAggregatOns().size() == 0) {
          for (Iterator itr=levelExprList.iterator(); itr.hasNext(); ) {
            binding.addAggregateOn(itr.next().toString());
          }
        }
      }
    }
  }
}","/** 
 * adapt the obsolete query definition for backward compatibility.
 * @param query
 * @return
 * @throws DataException
 */
private void adaptCubeQueryDefinition(ICubeQueryDefinition query) throws DataException {
  List bindings=query.getBindings();
  List levelExprList=getAllAggrOns(query);
  for (int i=0; i < bindings.size(); i++) {
    IBinding binding=(IBinding)bindings.get(i);
    String measureName=OlapExpressionUtil.getMeasure(binding.getExpression());
    if (measureName != null) {
      if (binding.getAggrFunction() == null) {
        String aggrFunc=getAggrFunction(query,measureName);
        binding.setAggrFunction(aggrFunc);
        if (binding.getAggregatOns().size() == 0) {
          for (Iterator itr=levelExprList.iterator(); itr.hasNext(); ) {
            binding.addAggregateOn(itr.next().toString());
          }
        }
      }
    }
  }
}",0.95338512763596
72147,"private void handleColumnPageBreak(ColumnEvent event,IColumn col) throws OLAPException {
  columnCursor.setPosition(event.dataPosition);
  if (event.type == ColumnEvent.COLUMN_TOTAL_CHANGE) {
    int currentGroupIndex=GroupUtil.getGroupIndex(columnGroups,event.dimensionIndex,event.levelIndex);
    if (event.isLocationBefore) {
      boolean isFirst=((DimensionCursor)groupCursors.get(currentGroupIndex)).isFirst();
      if (pageBreakBeforeInts[currentGroupIndex] == 1 || (pageBreakBeforeInts[currentGroupIndex] == 2 && !isFirst)) {
        col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
      }
      if (notifyNextPageBreak != -1) {
        notifyNextPageBreak=-1;
        col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
      }
    }
 else {
      if (pageBreakAfterInts[currentGroupIndex] == 1) {
        col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_AFTER,IStyle.ALWAYS_VALUE);
      }
 else       if (pageBreakAfterInts[currentGroupIndex] == 2) {
        boolean isLast=((DimensionCursor)groupCursors.get(currentGroupIndex)).isLast();
        if (!isLast) {
          notifyNextPageBreak=currentGroupIndex;
        }
      }
    }
  }
 else   if (event.type == ColumnEvent.COLUMN_EDGE_CHANGE) {
    int startingGrouplevel=GroupUtil.getStartingGroupLevel(columnCursor,groupCursors);
    int startBound=startingGrouplevel == 0 ? 0 : (startingGrouplevel - 1);
    for (int i=startBound; i < pageBreakBeforeInts.length; i++) {
      if (!hasTotalBefore[i]) {
        if (pageBreakBeforeInts[i] == 1) {
          col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
          break;
        }
 else         if (pageBreakBeforeInts[i] == 2) {
          boolean isFirst=((DimensionCursor)groupCursors.get(i)).isFirst();
          if (!isFirst) {
            col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
            break;
          }
        }
      }
    }
    if (notifyNextPageBreak != -1 && (startingGrouplevel <= notifyNextPageBreak + 1)) {
      notifyNextPageBreak=-1;
      col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
    }
    int endingGroupLevel=GroupUtil.getEndingGroupLevel(columnCursor,groupCursors);
    int endBound=endingGroupLevel == 0 ? 0 : (endingGroupLevel - 1);
    for (int i=endBound; i < pageBreakAfterInts.length; i++) {
      if (!hasTotalAfter[i]) {
        if (pageBreakAfterInts[i] == 1) {
          col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_AFTER,IStyle.ALWAYS_VALUE);
        }
 else         if (pageBreakAfterInts[i] == 2) {
          boolean isLast=((DimensionCursor)groupCursors.get(i)).isLast();
          if (!isLast) {
            notifyNextPageBreak=i;
          }
        }
      }
    }
  }
 else   if (event.type == ColumnEvent.GRAND_TOTAL_CHANGE) {
    if (notifyNextPageBreak != -1) {
      notifyNextPageBreak=-1;
      col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
    }
  }
}","private void handleColumnPageBreak(ColumnEvent event,IColumn col) throws OLAPException {
  columnCursor.setPosition(event.dataPosition);
  if (event.type == ColumnEvent.COLUMN_TOTAL_CHANGE) {
    int currentGroupIndex=GroupUtil.getGroupIndex(columnGroups,event.dimensionIndex,event.levelIndex);
    if (event.isLocationBefore) {
      if (event.measureIndex == -1 || event.measureIndex == firstTotalMeasureIndex[currentGroupIndex]) {
        boolean isFirst=((DimensionCursor)groupCursors.get(currentGroupIndex)).isFirst();
        if (pageBreakBeforeInts[currentGroupIndex] == 1 || (pageBreakBeforeInts[currentGroupIndex] == 2 && !isFirst)) {
          col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
        }
        if (notifyNextPageBreak != -1) {
          notifyNextPageBreak=-1;
          col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
        }
      }
    }
 else {
      if (event.measureIndex == -1 || event.measureIndex == lastTotalMeasureIndex[currentGroupIndex]) {
        if (pageBreakAfterInts[currentGroupIndex] == 1) {
          col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_AFTER,IStyle.ALWAYS_VALUE);
        }
 else         if (pageBreakAfterInts[currentGroupIndex] == 2) {
          boolean isLast=((DimensionCursor)groupCursors.get(currentGroupIndex)).isLast();
          if (!isLast) {
            notifyNextPageBreak=currentGroupIndex;
          }
        }
      }
    }
  }
 else   if (event.type == ColumnEvent.COLUMN_EDGE_CHANGE) {
    if (event.measureIndex == -1 || event.measureIndex == 0) {
      int startingGrouplevel=GroupUtil.getStartingGroupLevel(columnCursor,groupCursors);
      int startBound=startingGrouplevel == 0 ? 0 : (startingGrouplevel - 1);
      for (int i=startBound; i < pageBreakBeforeInts.length; i++) {
        if (!hasTotalBefore[i]) {
          if (pageBreakBeforeInts[i] == 1) {
            col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
            break;
          }
 else           if (pageBreakBeforeInts[i] == 2) {
            boolean isFirst=((DimensionCursor)groupCursors.get(i)).isFirst();
            if (!isFirst) {
              col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
              break;
            }
          }
        }
      }
      if (notifyNextPageBreak != -1 && (startingGrouplevel <= notifyNextPageBreak + 1)) {
        notifyNextPageBreak=-1;
        col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
      }
    }
    if (event.measureIndex == -1 || event.measureIndex == lastMeasureIndex) {
      int endingGroupLevel=GroupUtil.getEndingGroupLevel(columnCursor,groupCursors);
      int endBound=endingGroupLevel == 0 ? 0 : (endingGroupLevel - 1);
      for (int i=endBound; i < pageBreakAfterInts.length; i++) {
        if (!hasTotalAfter[i]) {
          if (pageBreakAfterInts[i] == 1) {
            col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_AFTER,IStyle.ALWAYS_VALUE);
          }
 else           if (pageBreakAfterInts[i] == 2) {
            boolean isLast=((DimensionCursor)groupCursors.get(i)).isLast();
            if (!isLast) {
              notifyNextPageBreak=i;
            }
          }
        }
      }
    }
  }
 else   if (event.type == ColumnEvent.GRAND_TOTAL_CHANGE) {
    if (event.measureIndex == -1 || event.measureIndex == firstGrandTotalMeasureIndex) {
      if (notifyNextPageBreak != -1) {
        notifyNextPageBreak=-1;
        col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
      }
    }
  }
}",0.859504132231405
72148,"TableColumnGenerator(CrosstabReportItemHandle item,IColumnWalker walker,IBaseResultSet resultSet,EdgeCursor columnCursor,List<EdgeGroup> columnGroups) throws OLAPException {
  this.crosstabItem=item;
  this.walker=walker;
  this.columnCursor=columnCursor;
  this.columnGroups=columnGroups;
  if (columnCursor != null) {
    groupCursors=columnCursor.getDimensionCursor();
  }
  if (columnGroups.size() > 0) {
    pageBreakBeforeInts=new int[columnGroups.size()];
    pageBreakAfterInts=new int[columnGroups.size()];
    hasTotalBefore=new boolean[columnGroups.size()];
    hasTotalAfter=new boolean[columnGroups.size()];
    Arrays.fill(hasTotalBefore,false);
    Arrays.fill(hasTotalAfter,false);
    String pageBreak;
    boolean allowTotal=crosstabItem.getMeasureCount() > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE;
    for (int i=0; i < columnGroups.size(); i++) {
      EdgeGroup eg=columnGroups.get(i);
      LevelViewHandle lv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,eg.dimensionIndex).getLevel(eg.levelIndex);
      pageBreak=lv.getPageBreakBefore();
      pageBreakBeforeInts[i]=DesignChoiceConstants.PAGE_BREAK_BEFORE_ALWAYS.equals(pageBreak) ? 1 : (DesignChoiceConstants.PAGE_BREAK_BEFORE_ALWAYS_EXCLUDING_FIRST.equals(pageBreak) ? 2 : 0);
      pageBreak=lv.getPageBreakAfter();
      pageBreakAfterInts[i]=DesignChoiceConstants.PAGE_BREAK_AFTER_ALWAYS.equals(pageBreak) ? 1 : (DesignChoiceConstants.PAGE_BREAK_AFTER_ALWAYS_EXCLUDING_LAST.equals(pageBreak) ? 2 : 0);
      if (allowTotal && i != columnGroups.size() - 1 && lv.getAggregationHeader() != null) {
        if (AGGREGATION_HEADER_LOCATION_BEFORE.equals(lv.getAggregationHeaderLocation())) {
          hasTotalBefore[i]=true;
        }
 else         if (AGGREGATION_HEADER_LOCATION_AFTER.equals(lv.getAggregationHeaderLocation())) {
          hasTotalAfter[i]=true;
        }
      }
    }
  }
  int rdCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
  if (rdCount > 0) {
    DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,rdCount - 1);
    if (dv.getLevelCount() > 0) {
      LevelViewHandle lv=dv.getLevel(dv.getLevelCount() - 1);
      rowDimension=dv.getCubeDimensionName();
      rowLevel=lv.getCubeLevelName();
    }
  }
}","TableColumnGenerator(CrosstabReportItemHandle item,IColumnWalker walker,IBaseResultSet resultSet,EdgeCursor columnCursor,List<EdgeGroup> columnGroups) throws OLAPException {
  this.crosstabItem=item;
  this.walker=walker;
  this.columnCursor=columnCursor;
  this.columnGroups=columnGroups;
  if (columnCursor != null) {
    groupCursors=columnCursor.getDimensionCursor();
  }
  if (columnGroups.size() > 0) {
    pageBreakBeforeInts=new int[columnGroups.size()];
    pageBreakAfterInts=new int[columnGroups.size()];
    hasTotalBefore=new boolean[columnGroups.size()];
    hasTotalAfter=new boolean[columnGroups.size()];
    Arrays.fill(hasTotalBefore,false);
    Arrays.fill(hasTotalAfter,false);
    firstTotalMeasureIndex=new int[columnGroups.size()];
    lastTotalMeasureIndex=new int[columnGroups.size()];
    Arrays.fill(firstTotalMeasureIndex,-1);
    Arrays.fill(lastTotalMeasureIndex,-1);
    int totalMeasureCount=crosstabItem.getMeasureCount();
    lastMeasureIndex=totalMeasureCount - 1;
    firstGrandTotalMeasureIndex=-1;
    String pageBreak;
    boolean allowTotal=totalMeasureCount > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE;
    for (int i=0; i < columnGroups.size(); i++) {
      EdgeGroup eg=columnGroups.get(i);
      LevelViewHandle lv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,eg.dimensionIndex).getLevel(eg.levelIndex);
      pageBreak=lv.getPageBreakBefore();
      pageBreakBeforeInts[i]=DesignChoiceConstants.PAGE_BREAK_BEFORE_ALWAYS.equals(pageBreak) ? 1 : (DesignChoiceConstants.PAGE_BREAK_BEFORE_ALWAYS_EXCLUDING_FIRST.equals(pageBreak) ? 2 : 0);
      pageBreak=lv.getPageBreakAfter();
      pageBreakAfterInts[i]=DesignChoiceConstants.PAGE_BREAK_AFTER_ALWAYS.equals(pageBreak) ? 1 : (DesignChoiceConstants.PAGE_BREAK_AFTER_ALWAYS_EXCLUDING_LAST.equals(pageBreak) ? 2 : 0);
      if (allowTotal && i != columnGroups.size() - 1 && lv.getAggregationHeader() != null) {
        if (AGGREGATION_HEADER_LOCATION_BEFORE.equals(lv.getAggregationHeaderLocation())) {
          hasTotalBefore[i]=true;
        }
 else         if (AGGREGATION_HEADER_LOCATION_AFTER.equals(lv.getAggregationHeaderLocation())) {
          hasTotalAfter[i]=true;
        }
        List mvs=lv.getAggregationMeasures();
        if (mvs.size() > 0) {
          firstTotalMeasureIndex[i]=((MeasureViewHandle)mvs.get(0)).getIndex();
          lastTotalMeasureIndex[i]=((MeasureViewHandle)mvs.get(mvs.size() - 1)).getIndex();
        }
      }
    }
    if (allowTotal && crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE) != null) {
      List mvs=crosstabItem.getAggregationMeasures(COLUMN_AXIS_TYPE);
      if (mvs.size() > 0) {
        firstGrandTotalMeasureIndex=((MeasureViewHandle)mvs.get(0)).getIndex();
      }
    }
  }
  int rdCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
  if (rdCount > 0) {
    DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,rdCount - 1);
    if (dv.getLevelCount() > 0) {
      LevelViewHandle lv=dv.getLevel(dv.getLevelCount() - 1);
      rowDimension=dv.getCubeDimensionName();
      rowLevel=lv.getCubeLevelName();
    }
  }
}",0.8331143232588699
72149,"public static boolean isNumber(String val){
  try {
    new BigDecimal(val);
    return true;
  }
 catch (  Exception e) {
    return false;
  }
}","public static boolean isNumber(String val){
  try {
    BigDecimal num=new BigDecimal(val);
    if (num.compareTo(new BigDecimal(Double.MAX_VALUE)) != 1)     return true;
 else     return false;
  }
 catch (  Exception e) {
    return false;
  }
}",0.6921119592875318
72150,"/** 
 * Builds and computes preferred sizes of various chart components offscreen using the provided display server.
 * @param ids A display server using which the chart may be built.
 * @param cmDesignTime The design time chart model (bound to a dataset).
 * @param externalContext An external context object.
 * @param bo The bounds associated with the chart being built.
 * @param rtc Encapsulates the runtime environment for the build process.
 * @param externalProcessor An external style processor. If it's null, an implicit processor will be used.
 * @return An instance of a generated chart state that encapsulates builtchart information that may be subsequently rendered.
 * @throws ChartException
 */
public final GeneratedChartState build(IDisplayServer ids,Chart cmDesignTime,Bounds bo,IExternalContext externalContext,RunTimeContext rtc,IStyleProcessor externalProcessor) throws ChartException {
  if (ids == null || cmDesignTime == null || bo == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle());
  }
  if (rtc == null) {
    rtc=new RunTimeContext();
  }
  if (rtc.getULocale() == null) {
    rtc.setULocale(ULocale.getDefault());
  }
  IChartScriptContext icsc=rtc.getScriptContext();
  if (icsc == null) {
    ChartScriptContext csc=new ChartScriptContext();
    Chart cmRunTime=(Chart)EcoreUtil.copy(cmDesignTime);
    ChartUtil.pruneInvisibleSeries(cmRunTime);
    csc.setChartInstance(cmRunTime);
    csc.setExternalContext(externalContext);
    csc.setULocale(rtc.getULocale());
    csc.setLogger(logger);
    rtc.setScriptContext(csc);
    icsc=csc;
  }
 else   if (icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setLogger(logger);
    Chart cmRuntime=(Chart)EcoreUtil.copy(cmDesignTime);
    ChartUtil.pruneInvisibleSeries(cmRuntime);
    cmRuntime.getBlock().setBounds(bo);
    ((ChartScriptContext)icsc).setChartInstance(cmRuntime);
  }
  if (externalContext != null && icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setExternalContext(externalContext);
  }
  final Chart cmRunTime=icsc.getChartInstance();
  ScriptHandler sh=rtc.getScriptHandler();
  if (sh == null) {
    sh=new ScriptHandler();
    rtc.setScriptHandler(sh);
    sh.setScriptClassLoader(rtc.getScriptClassLoader());
    sh.setScriptContext(icsc);
    final String sScriptContent=cmRunTime.getScript();
    if (externalContext != null && externalContext.getScriptable() != null) {
      sh.init(externalContext.getScriptable());
    }
 else {
      sh.init(null);
    }
    sh.setRunTimeModel(cmRunTime);
    if (sScriptContent != null && sScriptContent.length() > 0 && rtc.isScriptingEnabled()) {
      sh.register(null,sScriptContent);
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.START_GENERATION,cmRunTime);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_GENERATION,cmRunTime,rtc.getScriptContext());
  prepareStyles(cmRunTime,externalProcessor);
  int iChartType=UNDEFINED;
  Object oComputations=null;
  if (cmRunTime instanceof ChartWithAxes) {
    iChartType=WITH_AXES;
    try {
      if (cmRunTime.getDimension() == ChartDimension.THREE_DIMENSIONAL_LITERAL) {
        oComputations=new PlotWith3DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
 else {
        oComputations=new PlotWith2DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
    }
 catch (    Exception e) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,e);
    }
  }
 else   if (cmRunTime instanceof ChartWithoutAxes) {
    iChartType=WITHOUT_AXES;
    oComputations=new PlotWithoutAxes(ids,(ChartWithoutAxes)cmRunTime,rtc);
  }
  if (oComputations == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{cmRunTime},Messages.getResourceBundle(rtc.getULocale()));
  }
  final LinkedHashMap lhmRenderers=new LinkedHashMap();
  BaseRenderer[] brna=null;
  try {
    brna=BaseRenderer.instances(cmRunTime,rtc,oComputations);
    for (int i=0; i < brna.length; i++) {
      lhmRenderers.put(brna[i].getSeries(),new LegendItemRenderingHints(brna[i],BoundsImpl.create(0,0,0,0)));
    }
    rtc.setSeriesRenderers(lhmRenderers);
    rtc.setLegendLayoutHints(null);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  if (oComputations instanceof PlotWith2DAxes) {
    PlotWith2DAxes pwa=(PlotWith2DAxes)oComputations;
    pwa.initDynamicPlotBounds(bo);
  }
  Block bl=cmRunTime.getBlock();
  final LayoutManager lm=new LayoutManager(bl);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_LAYOUT,cmRunTime);
  lm.doLayout(ids,cmRunTime,bo,rtc);
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_LAYOUT,cmRunTime);
  Bounds boPlot=cmRunTime.getPlot().getBounds();
  Insets insPlot=cmRunTime.getPlot().getInsets();
  boPlot=boPlot.adjustedInstance(insPlot);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_COMPUTATIONS,cmRunTime,oComputations);
  long lTimer=System.currentTimeMillis();
  if (iChartType == WITH_AXES) {
    PlotWithAxes pwa=(PlotWithAxes)oComputations;
    try {
      pwa.compute(boPlot);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
 else   if (iChartType == WITHOUT_AXES) {
    PlotWithoutAxes pwoa=(PlotWithoutAxes)oComputations;
    try {
      pwoa.compute(boPlot);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_COMPUTATIONS,cmRunTime,oComputations);
  final Collection co=lhmRenderers.values();
  final LegendItemRenderingHints[] lirha=(LegendItemRenderingHints[])co.toArray(new LegendItemRenderingHints[co.size()]);
  final int iSize=lhmRenderers.size();
  BaseRenderer br;
  for (int i=0; i < iSize; i++) {
    br=lirha[i].getRenderer();
    br.set(brna);
    br.set(ids);
    br.set(rtc);
    try {
      if (br.getComputations() instanceof PlotWithoutAxes) {
        br.set(((PlotWithoutAxes)br.getComputations()).getSeriesRenderingHints(br.getSeries()));
      }
 else {
        br.set(((PlotWithAxes)br.getComputations()).getSeriesRenderingHints(br.getSeriesDefinition(),br.getSeries()));
      }
      ScriptHandler.callFunction(sh,ScriptHandler.START_COMPUTE_SERIES,br.getSeries());
      br.compute(bo,cmRunTime.getPlot(),br.getSeriesRenderingHints());
      ScriptHandler.callFunction(sh,ScriptHandler.FINISH_COMPUTE_SERIES,br.getSeries());
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Long(System.currentTimeMillis() - lTimer)},rtc.getULocale()));
  final GeneratedChartState gcs=new GeneratedChartState(ids,cmRunTime,lhmRenderers,rtc,oComputations);
  if (sh != null) {
    sh.setGeneratedChartState(gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.FINISH_GENERATION,gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_GENERATION,gcs,rtc.getScriptContext());
  }
  return gcs;
}","/** 
 * Builds and computes preferred sizes of various chart components offscreen using the provided display server.
 * @param ids A display server using which the chart may be built.
 * @param cmDesignTime The design time chart model (bound to a dataset).
 * @param externalContext An external context object.
 * @param bo The bounds associated with the chart being built.
 * @param rtc Encapsulates the runtime environment for the build process.
 * @param externalProcessor An external style processor. If it's null, an implicit processor will be used.
 * @return An instance of a generated chart state that encapsulates builtchart information that may be subsequently rendered.
 * @throws ChartException
 */
public final GeneratedChartState build(IDisplayServer ids,Chart cmDesignTime,Bounds bo,IExternalContext externalContext,RunTimeContext rtc,IStyleProcessor externalProcessor) throws ChartException {
  if (ids == null || cmDesignTime == null || bo == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle());
  }
  if (rtc == null) {
    rtc=new RunTimeContext();
  }
  if (rtc.getULocale() == null) {
    rtc.setULocale(ULocale.getDefault());
  }
  IChartScriptContext icsc=rtc.getScriptContext();
  if (icsc == null) {
    ChartScriptContext csc=new ChartScriptContext();
    Chart cmRunTime=(Chart)EcoreUtil.copy(cmDesignTime);
    csc.setChartInstance(cmRunTime);
    csc.setExternalContext(externalContext);
    csc.setULocale(rtc.getULocale());
    csc.setLogger(logger);
    rtc.setScriptContext(csc);
    icsc=csc;
  }
 else   if (icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setLogger(logger);
    Chart cmRuntime=(Chart)EcoreUtil.copy(cmDesignTime);
    cmRuntime.getBlock().setBounds(bo);
    ((ChartScriptContext)icsc).setChartInstance(cmRuntime);
  }
  if (externalContext != null && icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setExternalContext(externalContext);
  }
  final Chart cmRunTime=icsc.getChartInstance();
  ScriptHandler sh=rtc.getScriptHandler();
  if (sh == null) {
    sh=new ScriptHandler();
    rtc.setScriptHandler(sh);
    sh.setScriptClassLoader(rtc.getScriptClassLoader());
    sh.setScriptContext(icsc);
    final String sScriptContent=cmRunTime.getScript();
    if (externalContext != null && externalContext.getScriptable() != null) {
      sh.init(externalContext.getScriptable());
    }
 else {
      sh.init(null);
    }
    sh.setRunTimeModel(cmRunTime);
    if (sScriptContent != null && sScriptContent.length() > 0 && rtc.isScriptingEnabled()) {
      sh.register(null,sScriptContent);
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.START_GENERATION,cmRunTime);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_GENERATION,cmRunTime,rtc.getScriptContext());
  prepareStyles(cmRunTime,externalProcessor);
  int iChartType=UNDEFINED;
  Object oComputations=null;
  if (cmRunTime instanceof ChartWithAxes) {
    iChartType=WITH_AXES;
    try {
      if (cmRunTime.getDimension() == ChartDimension.THREE_DIMENSIONAL_LITERAL) {
        oComputations=new PlotWith3DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
 else {
        oComputations=new PlotWith2DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
    }
 catch (    Exception e) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,e);
    }
  }
 else   if (cmRunTime instanceof ChartWithoutAxes) {
    iChartType=WITHOUT_AXES;
    oComputations=new PlotWithoutAxes(ids,(ChartWithoutAxes)cmRunTime,rtc);
  }
  if (oComputations == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{cmRunTime},Messages.getResourceBundle(rtc.getULocale()));
  }
  final LinkedHashMap lhmRenderers=new LinkedHashMap();
  BaseRenderer[] brna=null;
  try {
    brna=BaseRenderer.instances(cmRunTime,rtc,oComputations);
    for (int i=0; i < brna.length; i++) {
      lhmRenderers.put(brna[i].getSeries(),new LegendItemRenderingHints(brna[i],BoundsImpl.create(0,0,0,0)));
    }
    rtc.setSeriesRenderers(lhmRenderers);
    rtc.setLegendLayoutHints(null);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  if (oComputations instanceof PlotWith2DAxes) {
    PlotWith2DAxes pwa=(PlotWith2DAxes)oComputations;
    pwa.initDynamicPlotBounds(bo);
  }
  Block bl=cmRunTime.getBlock();
  final LayoutManager lm=new LayoutManager(bl);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_LAYOUT,cmRunTime);
  lm.doLayout(ids,cmRunTime,bo,rtc);
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_LAYOUT,cmRunTime);
  Bounds boPlot=cmRunTime.getPlot().getBounds();
  Insets insPlot=cmRunTime.getPlot().getInsets();
  boPlot=boPlot.adjustedInstance(insPlot);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_COMPUTATIONS,cmRunTime,oComputations);
  long lTimer=System.currentTimeMillis();
  if (iChartType == WITH_AXES) {
    PlotWithAxes pwa=(PlotWithAxes)oComputations;
    try {
      pwa.compute(boPlot);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
 else   if (iChartType == WITHOUT_AXES) {
    PlotWithoutAxes pwoa=(PlotWithoutAxes)oComputations;
    try {
      pwoa.compute(boPlot);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_COMPUTATIONS,cmRunTime,oComputations);
  final Collection co=lhmRenderers.values();
  final LegendItemRenderingHints[] lirha=(LegendItemRenderingHints[])co.toArray(new LegendItemRenderingHints[co.size()]);
  final int iSize=lhmRenderers.size();
  BaseRenderer br;
  for (int i=0; i < iSize; i++) {
    br=lirha[i].getRenderer();
    br.set(brna);
    br.set(ids);
    br.set(rtc);
    try {
      if (br.getComputations() instanceof PlotWithoutAxes) {
        br.set(((PlotWithoutAxes)br.getComputations()).getSeriesRenderingHints(br.getSeries()));
      }
 else {
        br.set(((PlotWithAxes)br.getComputations()).getSeriesRenderingHints(br.getSeriesDefinition(),br.getSeries()));
      }
      ScriptHandler.callFunction(sh,ScriptHandler.START_COMPUTE_SERIES,br.getSeries());
      br.compute(bo,cmRunTime.getPlot(),br.getSeriesRenderingHints());
      ScriptHandler.callFunction(sh,ScriptHandler.FINISH_COMPUTE_SERIES,br.getSeries());
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Long(System.currentTimeMillis() - lTimer)},rtc.getULocale()));
  final GeneratedChartState gcs=new GeneratedChartState(ids,cmRunTime,lhmRenderers,rtc,oComputations);
  if (sh != null) {
    sh.setGeneratedChartState(gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.FINISH_GENERATION,gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_GENERATION,gcs,rtc.getScriptContext());
  }
  return gcs;
}",0.9934320849636668
72151,"public void close(){
  if (statementMap.size() > 0) {
    Iterator keySet=statementMap.keySet().iterator();
    while (keySet.hasNext()) {
      PreparedStatement stmt=(PreparedStatement)keySet.next();
      try {
        stmt.close();
      }
 catch (      DataException e) {
        logger.logp(Level.FINE,className,""String_Node_Str"",""String_Node_Str"",e);
      }
    }
    statementMap.clear();
  }
  Set<CacheConnection> it=this.getOdaConnections(false);
  if (it.size() > 1) {
    CacheConnection conn=it.iterator().next();
    conn.currentStatements=0;
    it.remove(conn);
    for (    CacheConnection connections : it) {
      try {
        connections.odaConn.close();
      }
 catch (      DataException e) {
        e.printStackTrace();
      }
    }
    it.clear();
    it.add(conn);
  }
}","public void close(){
  if (statementMap.size() > 0) {
    Iterator keySet=statementMap.keySet().iterator();
    while (keySet.hasNext()) {
      PreparedStatement stmt=(PreparedStatement)keySet.next();
      try {
        stmt.close();
      }
 catch (      Exception e) {
        logger.logp(Level.FINE,className,""String_Node_Str"",""String_Node_Str"",e);
      }
    }
    statementMap.clear();
  }
  Set<CacheConnection> it=this.getOdaConnections(false);
  if (it.size() > 1) {
    CacheConnection conn=it.iterator().next();
    conn.currentStatements=0;
    it.remove(conn);
    for (    CacheConnection connections : it) {
      try {
        connections.odaConn.close();
      }
 catch (      Exception e) {
        logger.logp(Level.FINE,className,""String_Node_Str"",""String_Node_Str"",e);
      }
    }
    it.clear();
    it.add(conn);
  }
}",0.9416767922235724
72152,"public void run() throws EngineException {
  doValidateParameters();
  loadDesign();
}","public void run() throws EngineException {
  usingParameterValues();
  loadDesign();
}",0.8953488372093024
72153,"public void open(Properties connProperties) throws OdaException {
  if (connProperties == null) {
    IllegalArgumentException e=new IllegalArgumentException(""String_Node_Str"");
    logger.logp(java.util.logging.Level.FINE,Connection.class.getName(),""String_Node_Str"",e.getMessage(),e);
    throw e;
  }
  if (logger.isLoggable(Level.FINE)) {
    String logMsg=""String_Node_Str"";
    for (Enumeration enumeration=connProperties.propertyNames(); enumeration.hasMoreElements(); ) {
      String propName=(String)enumeration.nextElement();
      String lcPropName=propName.toLowerCase();
      String propVal;
      if (lcPropName.indexOf(""String_Node_Str"") >= 0 || lcPropName.indexOf(""String_Node_Str"") >= 0)       propVal=""String_Node_Str"";
 else       propVal=connProperties.getProperty(propName);
      logMsg+=propName + ""String_Node_Str"" + propVal+ ""String_Node_Str"";
    }
    logger.logp(Level.FINE,Connection.class.getName(),""String_Node_Str"",logMsg);
  }
  close();
  String dataSource=connProperties.getProperty(Constants.ODADataSource);
  if (dataSource != null) {
    UnsupportedOperationException e=new UnsupportedOperationException(""String_Node_Str"");
    logger.logp(java.util.logging.Level.FINE,Connection.class.getName(),""String_Node_Str"",e.getMessage(),e);
    throw e;
  }
 else {
    String url=connProperties.getProperty(Constants.ODAURL);
    String jndiName=connProperties.getProperty(Constants.ODAJndiName);
    if ((url == null || url.length() == 0) && (jndiName == null || jndiName.length() == 0)) {
      throw new JDBCException(ResourceConstants.DRIVER_MISSING_PROPERTIES,ResourceConstants.ERROR_MISSING_PROPERTIES);
    }
    connectByUrl(url,connProperties);
  }
}","public void open(Properties connProperties) throws OdaException {
  if (connProperties == null) {
    IllegalArgumentException e=new IllegalArgumentException(""String_Node_Str"");
    logger.logp(java.util.logging.Level.FINE,Connection.class.getName(),""String_Node_Str"",e.getMessage(),e);
    throw e;
  }
  if (logger.isLoggable(Level.FINE)) {
    String logMsg=""String_Node_Str"";
    for (Enumeration enumeration=connProperties.propertyNames(); enumeration.hasMoreElements(); ) {
      String propName=(String)enumeration.nextElement();
      String lcPropName=propName.toLowerCase();
      String propVal;
      if (lcPropName.indexOf(""String_Node_Str"") >= 0 || lcPropName.indexOf(""String_Node_Str"") >= 0)       propVal=""String_Node_Str"";
 else {
        propVal=connProperties.getProperty(propName);
        if (lcPropName.equals(""String_Node_Str"")) {
          propVal=LogUtil.encryptURL(propVal);
        }
      }
      logMsg+=propName + ""String_Node_Str"" + propVal+ ""String_Node_Str"";
    }
    logger.logp(Level.FINE,Connection.class.getName(),""String_Node_Str"",logMsg);
  }
  close();
  String dataSource=connProperties.getProperty(Constants.ODADataSource);
  if (dataSource != null) {
    UnsupportedOperationException e=new UnsupportedOperationException(""String_Node_Str"");
    logger.logp(java.util.logging.Level.FINE,Connection.class.getName(),""String_Node_Str"",e.getMessage(),e);
    throw e;
  }
 else {
    String url=connProperties.getProperty(Constants.ODAURL);
    String jndiName=connProperties.getProperty(Constants.ODAJndiName);
    if ((url == null || url.length() == 0) && (jndiName == null || jndiName.length() == 0)) {
      throw new JDBCException(ResourceConstants.DRIVER_MISSING_PROPERTIES,ResourceConstants.ERROR_MISSING_PROPERTIES);
    }
    connectByUrl(url,connProperties);
  }
}",0.9654778887303852
72154,"/** 
 * Gets a JDBC connection from the specified JNDI data source URL, or if not available, directly from the specified driver and JDBC driver url.
 * @param driverClass   the class name of JDBC driver
 * @param url           JDBC connection URL
 * @param jndiNameUrl   the JNDI name to look up a Data Source name service; may be null or empty
 * @param connectionProperties  properties for establising connection
 * @return              a JDBC connection
 * @throws SQLException
 * @throws OdaException
 */
public Connection getConnection(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  validateConnectionUrl(url,jndiNameUrl);
  if (logger.isLoggable(Level.FINE))   logger.fine(""String_Node_Str"" + driverClass + ""String_Node_Str""+ url+ ""String_Node_Str""+ jndiNameUrl);
  return doConnect(driverClass,url,jndiNameUrl,connectionProperties,driverClassPath);
}","/** 
 * Gets a JDBC connection from the specified JNDI data source URL, or if not available, directly from the specified driver and JDBC driver url.
 * @param driverClass   the class name of JDBC driver
 * @param url           JDBC connection URL
 * @param jndiNameUrl   the JNDI name to look up a Data Source name service; may be null or empty
 * @param connectionProperties  properties for establising connection
 * @return              a JDBC connection
 * @throws SQLException
 * @throws OdaException
 */
public Connection getConnection(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  validateConnectionUrl(url,jndiNameUrl);
  if (logger.isLoggable(Level.FINE))   logger.fine(""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(url)+ ""String_Node_Str""+ jndiNameUrl);
  return doConnect(driverClass,url,jndiNameUrl,connectionProperties,driverClassPath);
}",0.9866666666666668
72155,"/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  assert(url != null);
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ url);
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + url);
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  Exception e) {
    throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
  }
}","/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  assert(url != null);
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(url));
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + LogUtil.encryptURL(url));
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  Exception e) {
    throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
  }
}",0.9780405405405406
72156,"public java.sql.Connection connect(String u,Properties p) throws SQLException {
  logger.entering(WrappedDriver.class.getName() + ""String_Node_Str"" + driverClass,""String_Node_Str"",u);
  try {
    return this.driver.connect(u,p);
  }
 catch (  RuntimeException e) {
    throw new SQLException(e.getMessage());
  }
}","public java.sql.Connection connect(String u,Properties p) throws SQLException {
  logger.entering(WrappedDriver.class.getName() + ""String_Node_Str"" + driverClass,""String_Node_Str"",LogUtil.encryptURL(u));
  try {
    return this.driver.connect(u,p);
  }
 catch (  RuntimeException e) {
    throw new SQLException(e.getMessage());
  }
}",0.9660493827160492
72157,"public boolean acceptsURL(String u) throws SQLException {
  boolean res=this.driver.acceptsURL(u);
  if (logger.isLoggable(Level.FINER))   logger.log(Level.FINER,""String_Node_Str"" + driverClass + ""String_Node_Str""+ u+ ""String_Node_Str""+ res);
  return res;
}","public boolean acceptsURL(String u) throws SQLException {
  boolean res=this.driver.acceptsURL(u);
  if (logger.isLoggable(Level.FINER))   logger.log(Level.FINER,""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(u)+ ""String_Node_Str""+ res);
  return res;
}",0.9589552238805972
72158,"public static String parse(String dateTime){
  if (dateTime == null) {
    return ""String_Node_Str"";
  }
  if (dateTime.indexOf(""String_Node_Str"") != -1) {
    String dateFormat=null;
    DateFormatter dateFormatter=new DateFormatter(dateTime);
    return dateFormatter.getFormatCode();
  }
  StringBuffer buffer=new StringBuffer();
  boolean inQuto=false;
  for (int count=0; count < dateTime.length(); count++) {
    char tempChar=dateTime.charAt(count);
    if (inQuto) {
      if (tempChar == '\'' && nextIsQuto(dateTime,count)) {
        buffer.append(tempChar);
        count++;
      }
 else {
        if (tempChar == '\'') {
          inQuto=false;
        }
 else {
          buffer.append(tempChar);
        }
      }
    }
 else {
      if (tempChar == '\'') {
        if (nextIsQuto(dateTime,count)) {
          buffer.append(tempChar);
          count++;
        }
 else {
          inQuto=true;
        }
      }
 else {
        if (tempChar == 'a') {
          buffer.append(""String_Node_Str"");
          continue;
        }
        if (""String_Node_Str"".indexOf(tempChar) != -1) {
          continue;
        }
        buffer.append(tempChar);
      }
    }
  }
  return buffer.toString();
}","public static String parse(String dateTime){
  if (dateTime == null) {
    return ""String_Node_Str"";
  }
  if (dateTime.indexOf(""String_Node_Str"") != -1) {
    String dateFormat=null;
    DateFormatter dateFormatter=new DateFormatter(dateTime);
    dateTime=dateFormatter.getFormatCode();
  }
  StringBuffer buffer=new StringBuffer();
  boolean inQuto=false;
  for (int count=0; count < dateTime.length(); count++) {
    char tempChar=dateTime.charAt(count);
    if (inQuto) {
      if (tempChar == '\'' && nextIsQuto(dateTime,count)) {
        buffer.append(tempChar);
        count++;
      }
 else {
        if (tempChar == '\'') {
          inQuto=false;
        }
 else {
          buffer.append(tempChar);
        }
      }
    }
 else {
      if (tempChar == '\'') {
        if (nextIsQuto(dateTime,count)) {
          buffer.append(tempChar);
          count++;
        }
 else {
          inQuto=true;
        }
      }
 else {
        if (tempChar == 'a') {
          buffer.append(""String_Node_Str"");
          continue;
        }
        if (""String_Node_Str"".indexOf(tempChar) != -1) {
          continue;
        }
        buffer.append(tempChar);
      }
    }
  }
  return buffer.toString();
}",0.9933774834437086
72159,"/** 
 * Add aggregate bindings of value series for grouping case.
 * @param query
 * @param seriesDefinitions
 * @param innerMostGroupDef
 * @param valueExprMap
 * @param baseSD
 * @throws DataException
 * @throws DataException
 */
protected void addValueSeriesAggregateBindingForGrouping(BaseQueryDefinition query,EList seriesDefinitions,GroupDefinition innerMostGroupDef,Map valueExprMap,SeriesDefinition baseSD) throws ChartException {
  for (Iterator iter=seriesDefinitions.iterator(); iter.hasNext(); ) {
    SeriesDefinition orthSD=(SeriesDefinition)iter.next();
    Series series=orthSD.getDesignTimeSeries();
    List qlist=ChartEngine.instance().getDataSetProcessor(series.getClass()).getDataDefinitionsForGrouping(series);
    for (Iterator iter_datadef=series.getDataDefinition().iterator(); iter_datadef.hasNext(); ) {
      Query qry=(Query)iter_datadef.next();
      String expr=qry.getDefinition();
      if (expr == null || ""String_Node_Str"".equals(expr)) {
        continue;
      }
      String aggName=ChartUtil.getAggregateFuncExpr(orthSD,baseSD);
      if (aggName == null || ""String_Node_Str"".equals(aggName)) {
        continue;
      }
      String name=ChartUtil.getValueSeriesFullExpression(expr,orthSD,baseSD);
      if (fNameSet.contains(name)) {
        continue;
      }
      fNameSet.add(name);
      Binding colBinding=new Binding(name);
      colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
      if (qlist.contains(qry)) {
        try {
          setBindingExpressionDueToAggregation(colBinding,expr,aggName);
        }
 catch (        DataException e1) {
          throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e1);
        }
        if (innerMostGroupDef != null) {
          try {
            colBinding.addAggregateOn(innerMostGroupDef.getName());
          }
 catch (          DataException e) {
            throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
          }
        }
        colBinding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggName));
        IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggName);
        if (aFunc.getParametersCount() > 0) {
          Object[] parameters=ChartUtil.getAggFunParameters(orthSD,baseSD);
          for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
            String param=(String)parameters[i];
            colBinding.addArgument(new ScriptExpression(param));
          }
        }
      }
 else {
        colBinding.setExpression(new ScriptExpression(expr));
      }
      String newExpr=getExpressionForEvaluator(name);
      try {
        query.addBinding(colBinding);
      }
 catch (      DataException e) {
        throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
      }
      valueExprMap.put(expr,new String[]{name,newExpr});
    }
  }
}","/** 
 * Add aggregate bindings of value series for grouping case.
 * @param query
 * @param seriesDefinitions
 * @param innerMostGroupDef
 * @param valueExprMap
 * @param baseSD
 * @throws DataException
 * @throws DataException
 */
protected void addValueSeriesAggregateBindingForGrouping(BaseQueryDefinition query,EList seriesDefinitions,GroupDefinition innerMostGroupDef,Map valueExprMap,SeriesDefinition baseSD) throws ChartException {
  for (Iterator iter=seriesDefinitions.iterator(); iter.hasNext(); ) {
    SeriesDefinition orthSD=(SeriesDefinition)iter.next();
    Series series=orthSD.getDesignTimeSeries();
    List qlist=ChartEngine.instance().getDataSetProcessor(series.getClass()).getDataDefinitionsForGrouping(series);
    for (Iterator iter_datadef=series.getDataDefinition().iterator(); iter_datadef.hasNext(); ) {
      Query qry=(Query)iter_datadef.next();
      String expr=qry.getDefinition();
      if (expr == null || ""String_Node_Str"".equals(expr)) {
        continue;
      }
      String aggName=ChartUtil.getAggregateFuncExpr(orthSD,baseSD);
      if (aggName == null || ""String_Node_Str"".equals(aggName)) {
        continue;
      }
      String name=ChartUtil.getValueSeriesFullExpression(expr,orthSD,baseSD);
      if (fNameSet.contains(name)) {
        continue;
      }
      fNameSet.add(name);
      Binding colBinding=new Binding(name);
      colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
      if (qlist.contains(qry)) {
        try {
          colBinding.setExportable(false);
          setBindingExpressionDueToAggregation(colBinding,expr,aggName);
          if (innerMostGroupDef != null) {
            colBinding.addAggregateOn(innerMostGroupDef.getName());
          }
        }
 catch (        DataException e1) {
          throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e1);
        }
        colBinding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggName));
        IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggName);
        if (aFunc.getParametersCount() > 0) {
          Object[] parameters=ChartUtil.getAggFunParameters(orthSD,baseSD);
          for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
            String param=(String)parameters[i];
            colBinding.addArgument(new ScriptExpression(param));
          }
        }
      }
 else {
        colBinding.setExpression(new ScriptExpression(expr));
      }
      String newExpr=getExpressionForEvaluator(name);
      try {
        query.addBinding(colBinding);
      }
 catch (      DataException e) {
        throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
      }
      valueExprMap.put(expr,new String[]{name,newExpr});
    }
  }
}",0.6852756454989533
72160,"/** 
 * @param query
 * @param categorySD
 * @param orthSD
 * @param orthAxisArray
 * @return
 * @throws ChartException
 */
private GroupDefinition initYGroupingNSortKey(BaseQueryDefinition query,SeriesDefinition categorySD,SeriesDefinition orthSD,Object[] orthAxisArray) throws ChartException {
  GroupDefinition yGroupingDefinition=createOrthogonalGroupingDefinition(orthSD);
  if (yGroupingDefinition != null) {
    query.addGroup(yGroupingDefinition);
    if (!orthSD.isSetSorting()) {
      return yGroupingDefinition;
    }
    SortDefinition sortDefinition=new SortDefinition();
    sortDefinition.setSortStrength(ISortDefinition.DEFAULT_SORT_STRENGTH);
    sortDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(orthSD.getSorting()));
    String sortKey=null;
    if (orthSD.getSortKey() != null && orthSD.getSortKey().getDefinition() != null) {
      sortKey=orthSD.getSortKey().getDefinition();
    }
    if (sortKey == null || yGroupingDefinition.getKeyExpression().equals(sortKey)) {
      sortDefinition.setExpression(yGroupingDefinition.getKeyExpression());
    }
 else {
      String name=generateUniqueBindingName(sortKey);
      Binding binding=new Binding(name);
      try {
        query.addBinding(binding);
        binding.setExpression(new ScriptExpression(sortKey));
        binding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        binding.addAggregateOn(yGroupingDefinition.getName());
      }
 catch (      DataException e) {
        throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
      }
      String aggFunc=getAggFunExpr(sortKey,categorySD,orthAxisArray);
      if (aggFunc != null) {
        binding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggFunc));
        IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggFunc);
        if (aFunc.getParametersCount() > 0) {
          Object[] parameters=ChartUtil.getAggFunParameters(orthSD,categorySD);
          for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
            String param=(String)parameters[i];
            binding.addArgument(new ScriptExpression(param));
          }
        }
      }
      sortDefinition.setExpression(ExpressionUtil.createRowExpression(binding.getBindingName()));
    }
    yGroupingDefinition.addSort(sortDefinition);
  }
  return yGroupingDefinition;
}","/** 
 * @param query
 * @param categorySD
 * @param orthSD
 * @param orthAxisArray
 * @return
 * @throws ChartException
 */
private GroupDefinition initYGroupingNSortKey(BaseQueryDefinition query,SeriesDefinition categorySD,SeriesDefinition orthSD,Object[] orthAxisArray) throws ChartException {
  GroupDefinition yGroupingDefinition=createOrthogonalGroupingDefinition(orthSD);
  if (yGroupingDefinition != null) {
    query.addGroup(yGroupingDefinition);
    if (!orthSD.isSetSorting()) {
      return yGroupingDefinition;
    }
    SortDefinition sortDefinition=new SortDefinition();
    sortDefinition.setSortStrength(ISortDefinition.DEFAULT_SORT_STRENGTH);
    sortDefinition.setSortDirection(ChartReportItemUtil.convertToDtESortDirection(orthSD.getSorting()));
    String sortKey=null;
    if (orthSD.getSortKey() != null && orthSD.getSortKey().getDefinition() != null) {
      sortKey=orthSD.getSortKey().getDefinition();
    }
    if (sortKey == null || yGroupingDefinition.getKeyExpression().equals(sortKey)) {
      sortDefinition.setExpression(yGroupingDefinition.getKeyExpression());
    }
 else {
      String name=generateUniqueBindingName(sortKey);
      Binding binding=new Binding(name);
      try {
        query.addBinding(binding);
        binding.setExpression(new ScriptExpression(sortKey));
        binding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        binding.addAggregateOn(yGroupingDefinition.getName());
        binding.setExportable(false);
      }
 catch (      DataException e) {
        throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,e);
      }
      String aggFunc=getAggFunExpr(sortKey,categorySD,orthAxisArray);
      if (aggFunc != null) {
        binding.setAggrFunction(ChartReportItemUtil.convertToDtEAggFunction(aggFunc));
        IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggFunc);
        if (aFunc.getParametersCount() > 0) {
          Object[] parameters=ChartUtil.getAggFunParameters(orthSD,categorySD);
          for (int i=0; i < parameters.length && i < aFunc.getParametersCount(); i++) {
            String param=(String)parameters[i];
            binding.addArgument(new ScriptExpression(param));
          }
        }
      }
      sortDefinition.setExpression(ExpressionUtil.createRowExpression(binding.getBindingName()));
    }
    yGroupingDefinition.addSort(sortDefinition);
  }
  return yGroupingDefinition;
}",0.992171405026782
72161,"/** 
 * Creates the cube query definition for chart. If parent definition is null, it's usually used for Live preview in chart builder. If chart in xtab, will return sub cube query definition.
 * @param parent
 * @return ICubeQueryDefinition for cube consuming orISubCubeQueryDefinition for chart in xtab case
 * @throws BirtException
 */
public IBaseCubeQueryDefinition createCubeQuery(IDataQueryDefinition parent) throws BirtException {
  bSingleChart=parent == null;
  CubeHandle cubeHandle=handle.getCube();
  ICubeQueryDefinition cubeQuery=null;
  if (cubeHandle == null) {
    cubeHandle=ChartXTabUtil.getBindingCube(handle);
    if (cubeHandle == null) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.NULL_DATASET,Messages.getString(""String_Node_Str""));
    }
    if (!bSingleChart) {
      ISubCubeQueryDefinition subQuery=createSubCubeQuery();
      if (subQuery != null) {
        if (parent instanceof ICubeQueryDefinition) {
          addMinMaxBinding((ICubeQueryDefinition)parent);
        }
        return subQuery;
      }
    }
  }
  cubeQuery=ChartXTabUtil.getCubeElementFactory().createCubeQuery(cubeHandle.getQualifiedName());
  initBindings(cubeQuery,cubeHandle);
  List<SeriesDefinition> sdList=getAllSeriesDefinitions(cm);
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=sdList.get(i);
    List<Query> queryList=sd.getDesignTimeSeries().getDataDefinition();
    for (int j=0; j < queryList.size(); j++) {
      Query query=queryList.get(j);
      bindSeriesQuery(query.getDefinition(),cubeQuery,cubeHandle);
    }
    bindSeriesQuery(sd.getQuery().getDefinition(),cubeQuery,cubeHandle);
  }
  Collection<ILevelDefinition> levelsInOrder=getAllLevelsInHierarchyOrder(cubeHandle,cubeQuery);
  for (Iterator<String> measureNames=registeredMeasures.keySet().iterator(); measureNames.hasNext(); ) {
    Binding binding=registeredBindings.get(measureNames.next());
    if (binding != null && binding.getAggregatOns().isEmpty()) {
      for (Iterator<ILevelDefinition> levels=levelsInOrder.iterator(); levels.hasNext(); ) {
        ILevelDefinition level=levels.next();
        String dimensionName=level.getHierarchy().getDimension().getName();
        binding.addAggregateOn(ExpressionUtil.createJSDimensionExpression(dimensionName,level.getName()));
      }
    }
  }
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=(SeriesDefinition)sdList.get(i);
    addSorting(cubeQuery,cubeHandle,sd,i);
  }
  addCubeFilter(cubeQuery);
  return cubeQuery;
}","/** 
 * Creates the cube query definition for chart. If parent definition is null, it's usually used for Live preview in chart builder. If chart in xtab, will return sub cube query definition.
 * @param parent
 * @return ICubeQueryDefinition for cube consuming orISubCubeQueryDefinition for chart in xtab case
 * @throws BirtException
 */
public IBaseCubeQueryDefinition createCubeQuery(IDataQueryDefinition parent) throws BirtException {
  bSingleChart=parent == null;
  CubeHandle cubeHandle=handle.getCube();
  ICubeQueryDefinition cubeQuery=null;
  if (cubeHandle == null) {
    cubeHandle=ChartXTabUtil.getBindingCube(handle);
    if (cubeHandle == null) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.NULL_DATASET,Messages.getString(""String_Node_Str""));
    }
    if (!bSingleChart) {
      ISubCubeQueryDefinition subQuery=createSubCubeQuery();
      if (subQuery != null) {
        if (parent instanceof ICubeQueryDefinition) {
          addMinMaxBinding((ICubeQueryDefinition)parent);
        }
        return subQuery;
      }
    }
  }
  cubeQuery=ChartXTabUtil.getCubeElementFactory().createCubeQuery(cubeHandle.getQualifiedName());
  initBindings(cubeQuery,cubeHandle);
  List<SeriesDefinition> sdList=getAllSeriesDefinitions(cm);
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=sdList.get(i);
    List<Query> queryList=sd.getDesignTimeSeries().getDataDefinition();
    for (int j=0; j < queryList.size(); j++) {
      Query query=queryList.get(j);
      bindSeriesQuery(query.getDefinition(),cubeQuery,cubeHandle);
    }
    bindSeriesQuery(sd.getQuery().getDefinition(),cubeQuery,cubeHandle);
  }
  Collection<ILevelDefinition> levelsInOrder=getAllLevelsInHierarchyOrder(cubeHandle,cubeQuery);
  for (Iterator<String> measureNames=registeredMeasures.keySet().iterator(); measureNames.hasNext(); ) {
    IBinding binding=registeredBindings.get(measureNames.next());
    if (binding != null && binding.getAggregatOns().isEmpty()) {
      for (Iterator<ILevelDefinition> levels=levelsInOrder.iterator(); levels.hasNext(); ) {
        ILevelDefinition level=levels.next();
        String dimensionName=level.getHierarchy().getDimension().getName();
        binding.addAggregateOn(ExpressionUtil.createJSDimensionExpression(dimensionName,level.getName()));
      }
    }
  }
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=(SeriesDefinition)sdList.get(i);
    addSorting(cubeQuery,cubeHandle,sd,i);
  }
  addCubeFilter(cubeQuery);
  return cubeQuery;
}",0.99980186249257
72162,"/** 
 * Adds min and max binding to parent query definition
 * @param parent
 * @throws BirtException
 */
private void addMinMaxBinding(ICubeQueryDefinition parent) throws BirtException {
  List bs=parent.getBindings();
  Axis xAxis=(Axis)((ChartWithAxes)cm).getAxes().get(0);
  SeriesDefinition sdValue=(SeriesDefinition)((ChartWithAxes)cm).getOrthogonalAxes(xAxis,true)[0].getSeriesDefinitions().get(0);
  Query queryValue=(Query)sdValue.getDesignTimeSeries().getDataDefinition().get(0);
  String bindingValue=ChartXTabUtil.getBindingName(queryValue.getDefinition(),false);
  String maxBindingName=ChartReportItemConstants.QUERY_MAX + bindingValue;
  String minBindingName=ChartReportItemConstants.QUERY_MIN + bindingValue;
  for (int i=0; i < bs.size(); i++) {
    Binding binding=(Binding)bs.get(i);
    if (binding.getBindingName().equals(maxBindingName) || binding.getBindingName().equals(minBindingName)) {
      return;
    }
  }
  for (Iterator bindings=ChartReportItemUtil.getAllColumnBindingsIterator(handle); bindings.hasNext(); ) {
    ComputedColumnHandle column=(ComputedColumnHandle)bindings.next();
    if (column.getName().equals(bindingValue)) {
      IBinding maxBinding=new Binding(maxBindingName);
      maxBinding.setExpression(new ScriptExpression(queryValue.getDefinition()));
      maxBinding.setAggrFunction(IBuildInAggregation.TOTAL_MAX_FUNC);
      IBinding minBinding=new Binding(minBindingName);
      minBinding.setExpression(new ScriptExpression(queryValue.getDefinition()));
      minBinding.setAggrFunction(IBuildInAggregation.TOTAL_MIN_FUNC);
      ICubeOperation op=ChartXTabUtil.getCubeElementFactory().getCubeOperationFactory().createAddingNestAggregationsOperation(new IBinding[]{maxBinding,minBinding});
      parent.addCubeOperation(op);
      break;
    }
  }
}","/** 
 * Adds min and max binding to parent query definition
 * @param parent
 * @throws BirtException
 */
private void addMinMaxBinding(ICubeQueryDefinition parent) throws BirtException {
  List<IBinding> bs=parent.getBindings();
  Axis xAxis=(Axis)((ChartWithAxes)cm).getAxes().get(0);
  SeriesDefinition sdValue=(SeriesDefinition)((ChartWithAxes)cm).getOrthogonalAxes(xAxis,true)[0].getSeriesDefinitions().get(0);
  Query queryValue=(Query)sdValue.getDesignTimeSeries().getDataDefinition().get(0);
  String bindingValue=ChartXTabUtil.getBindingName(queryValue.getDefinition(),false);
  String maxBindingName=ChartReportItemConstants.QUERY_MAX + bindingValue;
  String minBindingName=ChartReportItemConstants.QUERY_MIN + bindingValue;
  for (int i=0; i < bs.size(); i++) {
    IBinding binding=bs.get(i);
    if (binding.getBindingName().equals(maxBindingName) || binding.getBindingName().equals(minBindingName)) {
      return;
    }
  }
  for (Iterator<ComputedColumnHandle> bindings=ChartReportItemUtil.getAllColumnBindingsIterator(handle); bindings.hasNext(); ) {
    ComputedColumnHandle column=bindings.next();
    if (column.getName().equals(bindingValue)) {
      IBinding maxBinding=new Binding(maxBindingName);
      maxBinding.setExpression(new ScriptExpression(queryValue.getDefinition()));
      maxBinding.setAggrFunction(IBuildInAggregation.TOTAL_MAX_FUNC);
      maxBinding.setExportable(false);
      IBinding minBinding=new Binding(minBindingName);
      minBinding.setExpression(new ScriptExpression(queryValue.getDefinition()));
      minBinding.setAggrFunction(IBuildInAggregation.TOTAL_MIN_FUNC);
      minBinding.setExportable(false);
      ICubeOperation op=ChartXTabUtil.getCubeElementFactory().getCubeOperationFactory().createAddingNestAggregationsOperation(new IBinding[]{maxBinding,minBinding});
      parent.addCubeOperation(op);
      break;
    }
  }
}",0.9614967462039046
72163,"/** 
 * Adds measure or row/column edge according to query expression.
 */
private void bindSeriesQuery(String expr,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  if (expr != null && expr.length() > 0) {
    String bindingName=ChartXTabUtil.getBindingName(expr,true);
    Binding colBinding=null;
    if (bindingName != null) {
      List<String> nameList=ChartXTabUtil.getBindingNameList(expr);
      if (nameList.size() > 1) {
        for (        String bn : nameList) {
          bindSeriesQuery(ExpressionUtil.createJSDataExpression(bn),cubeQuery,cube);
        }
        return;
      }
      colBinding=registeredBindings.get(bindingName);
    }
    if (colBinding != null) {
      bindingName=colBinding.getBindingName();
      expr=registeredQueries.get(bindingName);
      if (!cubeQuery.getBindings().contains(colBinding)) {
        cubeQuery.addBinding(colBinding);
      }
      if (ChartXTabUtil.isBinding(expr,true)) {
        bindSeriesQuery(expr,cubeQuery,cube);
        return;
      }
      String measure=ChartXTabUtil.getMeasureName(expr);
      if (measure != null) {
        if (registeredMeasures.containsKey(bindingName)) {
          return;
        }
        IMeasureDefinition mDef=cubeQuery.createMeasure(measure);
        String aggFun=DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction());
        mDef.setAggrFunction(aggFun);
        registeredMeasures.put(bindingName,mDef);
      }
 else       if (ChartXTabUtil.isDimensionExpresion(expr)) {
        if (registeredLevels.containsKey(bindingName)) {
          return;
        }
        String[] levels=ChartXTabUtil.getLevelNameFromDimensionExpression(expr);
        String dimensionName=levels[0];
        final int edgeType=getEdgeType(dimensionName);
        IEdgeDefinition edge=cubeQuery.getEdge(edgeType);
        IHierarchyDefinition hieDef=null;
        if (edge == null) {
          edge=cubeQuery.createEdge(edgeType);
          IDimensionDefinition dimDef=edge.createDimension(dimensionName);
          hieDef=dimDef.createHierarchy(cube.getDimension(dimDef.getName()).getDefaultHierarchy().getName());
        }
 else {
          hieDef=(IHierarchyDefinition)((IDimensionDefinition)edge.getDimensions().get(0)).getHierarchy().get(0);
        }
        boolean bMultipleLevels=!hieDef.getLevels().isEmpty();
        ILevelDefinition levelDef=hieDef.createLevel(levels[1]);
        registeredLevels.put(bindingName,levelDef);
        LevelHandle levelHandle=handle.getModuleHandle().findLevel(levelDef.getHierarchy().getDimension().getName() + ""String_Node_Str"" + levelDef.getName());
        registeredLevelHandles.put(levelHandle,levelDef);
        if (bMultipleLevels) {
          Iterator levelsInOrder=getAllLevelsInHierarchyOrder(cube,cubeQuery).iterator();
          hieDef.getLevels().clear();
          while (levelsInOrder.hasNext()) {
            ILevelDefinition level=(ILevelDefinition)levelsInOrder.next();
            hieDef.createLevel(level.getName());
          }
        }
      }
    }
  }
}","/** 
 * Adds measure or row/column edge according to query expression.
 */
private void bindSeriesQuery(String expr,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  if (expr != null && expr.length() > 0) {
    String bindingName=ChartXTabUtil.getBindingName(expr,true);
    IBinding colBinding=null;
    if (bindingName != null) {
      List<String> nameList=ChartXTabUtil.getBindingNameList(expr);
      if (nameList.size() > 1) {
        for (        String bn : nameList) {
          bindSeriesQuery(ExpressionUtil.createJSDataExpression(bn),cubeQuery,cube);
        }
        return;
      }
      colBinding=registeredBindings.get(bindingName);
    }
    if (colBinding != null) {
      bindingName=colBinding.getBindingName();
      expr=registeredQueries.get(bindingName);
      if (!cubeQuery.getBindings().contains(colBinding)) {
        cubeQuery.addBinding(colBinding);
      }
      if (ChartXTabUtil.isBinding(expr,true)) {
        bindSeriesQuery(expr,cubeQuery,cube);
        return;
      }
      String measure=ChartXTabUtil.getMeasureName(expr);
      if (measure != null) {
        if (registeredMeasures.containsKey(bindingName)) {
          return;
        }
        IMeasureDefinition mDef=cubeQuery.createMeasure(measure);
        String aggFun=DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction());
        mDef.setAggrFunction(aggFun);
        registeredMeasures.put(bindingName,mDef);
      }
 else       if (ChartXTabUtil.isDimensionExpresion(expr)) {
        if (registeredLevels.containsKey(bindingName)) {
          return;
        }
        String[] levels=ChartXTabUtil.getLevelNameFromDimensionExpression(expr);
        String dimensionName=levels[0];
        final int edgeType=getEdgeType(dimensionName);
        IEdgeDefinition edge=cubeQuery.getEdge(edgeType);
        IHierarchyDefinition hieDef=null;
        if (edge == null) {
          edge=cubeQuery.createEdge(edgeType);
          IDimensionDefinition dimDef=edge.createDimension(dimensionName);
          hieDef=dimDef.createHierarchy(cube.getDimension(dimDef.getName()).getDefaultHierarchy().getName());
        }
 else {
          hieDef=(IHierarchyDefinition)((IDimensionDefinition)edge.getDimensions().get(0)).getHierarchy().get(0);
        }
        boolean bMultipleLevels=!hieDef.getLevels().isEmpty();
        ILevelDefinition levelDef=hieDef.createLevel(levels[1]);
        registeredLevels.put(bindingName,levelDef);
        LevelHandle levelHandle=handle.getModuleHandle().findLevel(levelDef.getHierarchy().getDimension().getName() + ""String_Node_Str"" + levelDef.getName());
        registeredLevelHandles.put(levelHandle,levelDef);
        if (bMultipleLevels) {
          Iterator levelsInOrder=getAllLevelsInHierarchyOrder(cube,cubeQuery).iterator();
          hieDef.getLevels().clear();
          while (levelsInOrder.hasNext()) {
            ILevelDefinition level=(ILevelDefinition)levelsInOrder.next();
            hieDef.createLevel(level.getName());
          }
        }
      }
    }
  }
}",0.9998365211705084
72164,"private void addSorting(ICubeQueryDefinition cubeQuery,CubeHandle cube,SeriesDefinition sd,int i) throws BirtException {
  if (sd.getSortKey() == null) {
    return;
  }
  String sortKey=sd.getSortKey().getDefinition();
  if (sd.isSetSorting() && sortKey != null && sortKey.length() > 0) {
    String sortKeyBinding=ChartXTabUtil.getBindingName(sd.getSortKey().getDefinition(),true);
    if (registeredLevels.containsKey(sortKeyBinding)) {
      ICubeSortDefinition sortDef=ChartXTabUtil.getCubeElementFactory().createCubeSortDefinition(sortKey,registeredLevels.get(sortKeyBinding),null,null,sd.getSorting() == SortOption.ASCENDING_LITERAL ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
      cubeQuery.addSort(sortDef);
    }
 else     if (registeredMeasures.containsKey(sortKeyBinding)) {
      Query targetQuery=i > 0 ? sd.getQuery() : (Query)sd.getDesignTimeSeries().getDataDefinition().get(0);
      IMeasureDefinition mDef=registeredMeasures.get(sortKeyBinding);
      String targetBindingName=ChartXTabUtil.getBindingName(targetQuery.getDefinition(),true);
      Binding measureBinding=registeredBindings.get(sortKeyBinding);
      Binding aggBinding=new Binding(measureBinding.getBindingName() + targetBindingName);
      aggBinding.setDataType(measureBinding.getDataType());
      aggBinding.setExpression(measureBinding.getExpression());
      aggBinding.addAggregateOn(registeredQueries.get(targetBindingName));
      aggBinding.setAggrFunction(mDef.getAggrFunction());
      cubeQuery.addBinding(aggBinding);
      ICubeSortDefinition sortDef=ChartXTabUtil.getCubeElementFactory().createCubeSortDefinition(ExpressionUtil.createJSDataExpression(aggBinding.getBindingName()),registeredLevels.get(targetBindingName),null,null,sd.getSorting() == SortOption.ASCENDING_LITERAL ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
      cubeQuery.addSort(sortDef);
    }
  }
}","private void addSorting(ICubeQueryDefinition cubeQuery,CubeHandle cube,SeriesDefinition sd,int i) throws BirtException {
  if (sd.getSortKey() == null) {
    return;
  }
  String sortKey=sd.getSortKey().getDefinition();
  if (sd.isSetSorting() && sortKey != null && sortKey.length() > 0) {
    String sortKeyBinding=ChartXTabUtil.getBindingName(sd.getSortKey().getDefinition(),true);
    if (registeredLevels.containsKey(sortKeyBinding)) {
      ICubeSortDefinition sortDef=ChartXTabUtil.getCubeElementFactory().createCubeSortDefinition(sortKey,registeredLevels.get(sortKeyBinding),null,null,sd.getSorting() == SortOption.ASCENDING_LITERAL ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
      cubeQuery.addSort(sortDef);
    }
 else     if (registeredMeasures.containsKey(sortKeyBinding)) {
      Query targetQuery=i > 0 ? sd.getQuery() : (Query)sd.getDesignTimeSeries().getDataDefinition().get(0);
      IMeasureDefinition mDef=registeredMeasures.get(sortKeyBinding);
      String targetBindingName=ChartXTabUtil.getBindingName(targetQuery.getDefinition(),true);
      IBinding measureBinding=registeredBindings.get(sortKeyBinding);
      IBinding aggBinding=new Binding(measureBinding.getBindingName() + targetBindingName);
      aggBinding.setDataType(measureBinding.getDataType());
      aggBinding.setExpression(measureBinding.getExpression());
      aggBinding.addAggregateOn(registeredQueries.get(targetBindingName));
      aggBinding.setAggrFunction(mDef.getAggrFunction());
      aggBinding.setExportable(false);
      cubeQuery.addBinding(aggBinding);
      ICubeSortDefinition sortDef=ChartXTabUtil.getCubeElementFactory().createCubeSortDefinition(ExpressionUtil.createJSDataExpression(aggBinding.getBindingName()),registeredLevels.get(targetBindingName),null,null,sd.getSorting() == SortOption.ASCENDING_LITERAL ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
      cubeQuery.addSort(sortDef);
    }
  }
}",0.9892978334638476
72165,"private void initBindings(ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  for (Iterator bindings=ChartReportItemUtil.getAllColumnBindingsIterator(handle); bindings.hasNext(); ) {
    ComputedColumnHandle column=(ComputedColumnHandle)bindings.next();
    Binding binding=new Binding(column.getName());
    binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
    binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
    String expression=column.getExpression();
    if (expression == null) {
      for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
        AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
        expression=aah.getValue();
      }
    }
    binding.setExpression(new ScriptExpression(expression));
    List lstAggOn=column.getAggregateOnList();
    if (expression == null || !bSingleChart && !lstAggOn.isEmpty()) {
      addAggregateOn(binding,lstAggOn,cubeQuery,cube);
    }
    registeredBindings.put(column.getName(),binding);
    registeredQueries.put(binding.getBindingName(),expression);
  }
}","private void initBindings(ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  for (Iterator bindings=ChartReportItemUtil.getAllColumnBindingsIterator(handle); bindings.hasNext(); ) {
    ComputedColumnHandle column=(ComputedColumnHandle)bindings.next();
    IBinding binding=new Binding(column.getName());
    binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
    binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
    String expression=column.getExpression();
    if (expression == null) {
      for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
        AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
        expression=aah.getValue();
      }
    }
    binding.setExpression(new ScriptExpression(expression));
    List lstAggOn=column.getAggregateOnList();
    if (expression == null || !bSingleChart && !lstAggOn.isEmpty()) {
      addAggregateOn(binding,lstAggOn,cubeQuery,cube);
    }
    registeredBindings.put(column.getName(),binding);
    registeredQueries.put(binding.getBindingName(),expression);
  }
}",0.9995845450768592
72166,"/** 
 * The used style should be style of area which is writable, and the others are styles of content which is read-only.
 * @param tableRight
 * @param columnRight
 * @param cellRight
 * @param usedStyle
 */
public void resolveTableRightBorder(IStyle tableRight,IStyle rowRight,IStyle columnRight,IStyle cellRight,IStyle usedStyle){
  resolveBorder(tableRightBorderCache,new BorderStyleInfo[]{new BorderStyleInfo(cellRight,POSITION_RIGHT),new BorderStyleInfo(columnRight,POSITION_RIGHT),new BorderStyleInfo(rowRight,POSITION_RIGHT),new BorderStyleInfo(tableRight,POSITION_RIGHT)},new BorderStyleInfo(usedStyle,POSITION_RIGHT));
}","/** 
 * The used style should be style of area which is writable, and the others are styles of content which is read-only.
 * @param tableRight
 * @param columnRight
 * @param cellRight
 * @param usedStyle
 */
public void resolveTableRightBorder(IStyle tableRight,IStyle rowRight,IStyle columnRight,IStyle cellRight,IStyle usedStyle){
  resolveBorder(tableRightBorderCache,new BorderStyleInfo[]{new BorderStyleInfo(cellRight,POSITION_TRAIL),new BorderStyleInfo(columnRight,POSITION_TRAIL),new BorderStyleInfo(rowRight,POSITION_TRAIL),new BorderStyleInfo(tableRight,POSITION_TRAIL)},new BorderStyleInfo(usedStyle,POSITION_TRAIL));
}",0.960380348652932
72167,"/** 
 * The used style should be style of area which is writable, and the others are styles of content which is read-only.
 * @param preColumnRight
 * @param columnLeft
 * @param preCellRight
 * @param cellLeft
 * @param usedStyle
 */
public void resolveCellLeftBorder(IStyle preColumnRight,IStyle columnLeft,IStyle preCellRight,IStyle cellLeft,IStyle usedStyle){
  resolveBorder(cellLeftBorderCache,new BorderStyleInfo[]{new BorderStyleInfo(preCellRight,POSITION_RIGHT),new BorderStyleInfo(cellLeft,POSITION_LEFT),new BorderStyleInfo(preColumnRight,POSITION_RIGHT),new BorderStyleInfo(columnLeft,POSITION_LEFT)},new BorderStyleInfo(usedStyle,POSITION_LEFT));
}","/** 
 * The used style should be style of area which is writable, and the others are styles of content which is read-only.
 * @param preColumnRight
 * @param columnLeft
 * @param preCellRight
 * @param cellLeft
 * @param usedStyle
 */
public void resolveCellLeftBorder(IStyle preColumnRight,IStyle columnLeft,IStyle preCellRight,IStyle cellLeft,IStyle usedStyle){
  resolveBorder(cellLeftBorderCache,new BorderStyleInfo[]{new BorderStyleInfo(preCellRight,POSITION_TRAIL),new BorderStyleInfo(cellLeft,POSITION_LEAD),new BorderStyleInfo(preColumnRight,POSITION_TRAIL),new BorderStyleInfo(columnLeft,POSITION_LEAD)},new BorderStyleInfo(usedStyle,POSITION_LEAD));
}",0.9757942511346444
72168,"/** 
 * The used style should be style of area which is writable, and the others are styles of content which is read-only.
 * @param tableLeft
 * @param columnLeft
 * @param cellLeft
 * @param usedStyle
 */
public void resolveTableLeftBorder(IStyle tableLeft,IStyle rowLeft,IStyle columnLeft,IStyle cellLeft,IStyle usedStyle){
  resolveBorder(tableLeftBorderCache,new BorderStyleInfo[]{new BorderStyleInfo(cellLeft,POSITION_LEFT),new BorderStyleInfo(columnLeft,POSITION_LEFT),new BorderStyleInfo(rowLeft,POSITION_LEFT),new BorderStyleInfo(tableLeft,POSITION_LEFT)},new BorderStyleInfo(usedStyle,POSITION_LEFT));
}","/** 
 * The used style should be style of area which is writable, and the others are styles of content which is read-only.
 * @param tableLeft
 * @param columnLeft
 * @param cellLeft
 * @param usedStyle
 */
public void resolveTableLeftBorder(IStyle tableLeft,IStyle rowLeft,IStyle columnLeft,IStyle cellLeft,IStyle usedStyle){
  resolveBorder(tableLeftBorderCache,new BorderStyleInfo[]{new BorderStyleInfo(cellLeft,POSITION_LEAD),new BorderStyleInfo(columnLeft,POSITION_LEAD),new BorderStyleInfo(rowLeft,POSITION_LEAD),new BorderStyleInfo(tableLeft,POSITION_LEAD)},new BorderStyleInfo(usedStyle,POSITION_LEAD));
}",0.9836867862969004
72169,"public TableLayoutInfo(int[] colWidth){
  this.colWidth=colWidth;
  this.columnNumber=colWidth.length;
  this.xPositions=new int[columnNumber];
  this.tableWidth=0;
  boolean rtl=tableContent.getReportContent().getDesign().getReportDesign().isDirectionRTL();
  for (int i=0; i < columnNumber; i++) {
    if (rtl) {
      xPositions[i]=parent.getCurrentMaxContentWidth() - tableWidth - colWidth[i];
    }
 else     xPositions[i]=tableWidth;
    tableWidth+=colWidth[i];
  }
}","public TableLayoutInfo(int[] colWidth){
  this.colWidth=colWidth;
  this.columnNumber=colWidth.length;
  this.xPositions=new int[columnNumber];
  this.tableWidth=0;
  if (tableContent.isRTL()) {
    for (int i=0; i < columnNumber; i++) {
      xPositions[i]=parent.getCurrentMaxContentWidth() - tableWidth - colWidth[i];
      tableWidth+=colWidth[i];
    }
  }
 else {
    for (int i=0; i < columnNumber; i++) {
      xPositions[i]=tableWidth;
      tableWidth+=colWidth[i];
    }
  }
}",0.740894901144641
72170,"/** 
 * resolve cell border conflict
 * @param cellArea
 */
public void resolveBorderConflict(CellArea cellArea,boolean isFirst){
  IContent cellContent=cellArea.getContent();
  int columnID=cellArea.getColumnID();
  int colSpan=cellArea.getColSpan();
  IRowContent row=(IRowContent)cellContent.getParent();
  IStyle cellContentStyle=cellContent.getComputedStyle();
  IStyle cellAreaStyle=cellArea.getStyle();
  IStyle tableStyle=tableContent.getComputedStyle();
  IStyle rowStyle=row.getComputedStyle();
  IStyle columnStyle=getColumnStyle(columnID);
  IStyle preRowStyle=null;
  IStyle preColumnStyle=getColumnStyle(columnID - 1);
  IStyle leftCellContentStyle=null;
  IStyle topCellStyle=null;
  boolean rtl=tableContent.getReportContent().getDesign().getReportDesign().isDirectionRTL();
  Row lastRow=null;
  if (rows.size() > 0) {
    lastRow=(Row)rows.getCurrent();
  }
  leftCellContentStyle=getLeftCellContentStyle(lastRow,columnID);
  if (lastRow != null) {
    preRowStyle=lastRow.getContent().getComputedStyle();
    CellArea cell=lastRow.getCell(columnID);
    if (cell != null && cell.getContent() != null) {
      topCellStyle=cell.getContent().getComputedStyle();
    }
  }
  if (rows.size() == 0 && lastRow == null) {
    if (isFirst) {
      bcr.resolveTableTopBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveTableTopBorder(tableStyle,null,columnStyle,null,cellAreaStyle);
    }
    if (columnID == startCol) {
      if (rtl) {
        bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
        bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle,cellAreaStyle);
      }
 else       bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      if (!rtl || columnID + colSpan - 1 != endCol)       bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle,cellAreaStyle);
    }
    if (columnID + colSpan - 1 == endCol) {
      if (rtl)       bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
 else       bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
  }
 else {
    if (isFirst) {
      bcr.resolveCellTopBorder(preRowStyle,rowStyle,topCellStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveCellTopBorder(preRowStyle,null,topCellStyle,null,cellAreaStyle);
    }
    if (columnID == startCol) {
      if (rtl) {
        bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
        bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle,cellAreaStyle);
      }
 else       bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      if (!rtl || columnID + colSpan - 1 != endCol)       bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle,cellAreaStyle);
    }
    if (columnID + colSpan - 1 == endCol) {
      if (rtl)       bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
 else       bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
  }
  lastCellContent=(ICellContent)cellContent;
}","/** 
 * resolve cell border conflict
 * @param cellArea
 */
public void resolveBorderConflict(CellArea cellArea,boolean isFirst){
  IContent cellContent=cellArea.getContent();
  int columnID=cellArea.getColumnID();
  int colSpan=cellArea.getColSpan();
  IRowContent row=(IRowContent)cellContent.getParent();
  IStyle cellContentStyle=cellContent.getComputedStyle();
  IStyle cellAreaStyle=cellArea.getStyle();
  IStyle tableStyle=tableContent.getComputedStyle();
  IStyle rowStyle=row.getComputedStyle();
  IStyle columnStyle=getColumnStyle(columnID);
  IStyle preRowStyle=null;
  IStyle preColumnStyle=getColumnStyle(columnID - 1);
  IStyle leftCellContentStyle=null;
  IStyle topCellStyle=null;
  Row lastRow=null;
  if (rows.size() > 0) {
    lastRow=(Row)rows.getCurrent();
  }
  leftCellContentStyle=getLeftCellContentStyle(lastRow,columnID);
  if (lastRow != null) {
    preRowStyle=lastRow.getContent().getComputedStyle();
    CellArea cell=lastRow.getCell(columnID);
    if (cell != null && cell.getContent() != null) {
      topCellStyle=cell.getContent().getComputedStyle();
    }
  }
  if (rows.size() == 0 && lastRow == null) {
    if (isFirst) {
      bcr.resolveTableTopBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveTableTopBorder(tableStyle,null,columnStyle,null,cellAreaStyle);
    }
    if (columnID == startCol) {
      bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle,cellAreaStyle);
    }
    if (columnID + colSpan - 1 == endCol) {
      bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
  }
 else {
    if (isFirst) {
      bcr.resolveCellTopBorder(preRowStyle,rowStyle,topCellStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveCellTopBorder(preRowStyle,null,topCellStyle,null,cellAreaStyle);
    }
    if (columnID == startCol) {
      bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle,cellAreaStyle);
    }
    if (columnID + colSpan - 1 == endCol) {
      bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
  }
  lastCellContent=(ICellContent)cellContent;
}",0.6176973009907756
72171,"protected void verticalAlign(CellArea c){
  CellArea cell;
  if (c instanceof DummyCell) {
    cell=((DummyCell)c).getCell();
  }
 else {
    cell=c;
  }
  IContent content=cell.getContent();
  if (content == null) {
    return;
  }
  CSSValue verticalAlign=content.getComputedStyle().getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  if (IStyle.BOTTOM_VALUE.equals(verticalAlign) || IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
    int totalHeight=0;
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      totalHeight+=child.getAllocatedHeight();
    }
    int offset=cell.getContentHeight() - totalHeight;
    if (offset > 0) {
      if (IStyle.BOTTOM_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset);
        }
      }
 else       if (IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset / 2);
        }
      }
    }
  }
  CSSValue align=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
  if ((IStyle.RIGHT_VALUE.equals(align) || IStyle.CENTER_VALUE.equals(align))) {
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      int spacing=cell.getContentWidth() - area.getAllocatedWidth();
      if (spacing > 0) {
        if (IStyle.RIGHT_VALUE.equals(align)) {
          area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
        }
 else         if (IStyle.CENTER_VALUE.equals(align)) {
          area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
        }
      }
    }
  }
}","protected void verticalAlign(CellArea c){
  CellArea cell;
  if (c instanceof DummyCell) {
    cell=((DummyCell)c).getCell();
  }
 else {
    cell=c;
  }
  IContent content=cell.getContent();
  if (content == null) {
    return;
  }
  CSSValue verticalAlign=content.getComputedStyle().getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  if (IStyle.BOTTOM_VALUE.equals(verticalAlign) || IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
    int totalHeight=0;
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      totalHeight+=child.getAllocatedHeight();
    }
    int offset=cell.getContentHeight() - totalHeight;
    if (offset > 0) {
      if (IStyle.BOTTOM_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset);
        }
      }
 else       if (IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset / 2);
        }
      }
    }
  }
  CSSValue align=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
  boolean isRightAligned=IStyle.RIGHT_VALUE.equals(align) || IStyle.JUSTIFY_VALUE.equals(align) && content.isRTL();
  if ((isRightAligned || IStyle.CENTER_VALUE.equals(align))) {
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      int spacing=cell.getContentWidth() - area.getAllocatedWidth();
      if (spacing > 0) {
        if (isRightAligned) {
          area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
        }
 else         if (IStyle.CENTER_VALUE.equals(align)) {
          area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
        }
      }
    }
  }
}",0.9625431246919663
72172,"public TableAreaLayout(ITableContent tableContent,TableLayoutInfo layoutInfo,int startCol,int endCol){
  this.tableContent=tableContent;
  this.layoutInfo=layoutInfo;
  this.startCol=startCol;
  this.endCol=endCol;
}","public TableAreaLayout(ITableContent tableContent,TableLayoutInfo layoutInfo,int startCol,int endCol){
  this.tableContent=tableContent;
  this.layoutInfo=layoutInfo;
  this.startCol=startCol;
  this.endCol=endCol;
  if (tableContent != null)   bcr.setRTL(tableContent.isRTL());
}",0.8709677419354839
72173,"public boolean addArea(AbstractArea area){
  CellArea cArea=(CellArea)area;
  root.addChild(area);
  cArea.setPosition(tbl.getXPos(cArea.getColumnID()),0);
  return true;
}","public boolean addArea(AbstractArea area){
  CellArea cArea=(CellArea)area;
  root.addChild(area);
  int columnID=cArea.getColumnID();
  int colSpan=cArea.getColSpan();
  if (colSpan > 1 && content.isRTL()) {
    columnID+=colSpan - 1;
  }
  cArea.setPosition(tbl.getXPos(columnID),0);
  return true;
}",0.679324894514768
72174,"public TableAreaLayout(ITableContent tableContent,TableLayoutInfo layoutInfo,int startCol,int endCol){
  this.tableContent=tableContent;
  this.layoutInfo=layoutInfo;
  this.startCol=startCol;
  this.endCol=endCol;
}","public TableAreaLayout(ITableContent tableContent,TableLayoutInfo layoutInfo,int startCol,int endCol){
  this.tableContent=tableContent;
  this.layoutInfo=layoutInfo;
  this.startCol=startCol;
  this.endCol=endCol;
  if (tableContent != null)   bcr.setRTL(tableContent.isRTL());
}",0.8709677419354839
72175,"/** 
 * @param parent
 * @return
 */
public static ClassLoader getCustomScriptClassLoader(ClassLoader parent,ModuleHandle handle){
  List<URL> urls=getClassPathURLs();
  loadResourceFolderScriptLibs(handle,urls);
  if (urls.size() == 0)   return parent;
  return new URLClassLoader(urls.toArray(new URL[0]),parent);
}","/** 
 * @param parent
 * @return
 */
public static ClassLoader getCustomScriptClassLoader(ClassLoader parent){
  List<URL> urls=getClassPathURLs();
  if (urls.size() == 0)   return parent;
  return new URLClassLoader(urls.toArray(new URL[0]),parent);
}",0.8857644991212654
72176,"/** 
 * Return the URLs of ScriptLib jars.
 * @return
 */
private static List<URL> getDefaultViewerScriptLibURLs(){
  List<URL> urls=new ArrayList<URL>();
  try {
    Bundle bundle=Platform.getBundle(VIEWER_NAMESPACE);
    Enumeration bundleFile=bundle.getEntryPaths(BIRT_SCRIPTLIB);
    while (bundleFile.hasMoreElements()) {
      String o=bundleFile.nextElement().toString();
      if (o.endsWith(""String_Node_Str""))       urls.add(bundle.getResource(o));
    }
  }
 catch (  Exception e) {
  }
  return urls;
}","/** 
 * Return the URLs of ScriptLib jars.
 * @return
 */
private static List<URL> getDefaultViewerScriptLibURLs(){
  List<URL> urls=new ArrayList<URL>();
  try {
    Bundle bundle=Platform.getBundle(VIEWER_NAMESPACE);
    Enumeration bundleFile=bundle.getEntryPaths(BIRT_SCRIPTLIB);
    while (bundleFile.hasMoreElements()) {
      String o=bundleFile.nextElement().toString();
      if (o.endsWith(""String_Node_Str""))       urls.add(bundle.getResource(o));
    }
    URL classes=bundle.getEntry(BIRT_CLASSES);
    if (classes != null) {
      urls.add(classes);
    }
  }
 catch (  Exception e) {
  }
  return urls;
}",0.9073256840247133
72177,"/** 
 * Builds the direction style.
 * @param styleBuffer The <code>StringBuffer</code> to which the result is output.
 * @param style The style object.
 * @author bidi_hcg
 */
public static void buildBidiDirection(StringBuffer styleBuffer,IStyle style){
  if (style != null) {
    String direction=style.getDirection();
    if (direction != null) {
      if (CSSConstants.CSS_RTL_VALUE.equals(direction))       buildProperty(styleBuffer,IStyle.CSS_DIRECTION_PROPERTY,IStyle.CSS_RTL_VALUE);
 else       if (CSSConstants.CSS_LTR_VALUE.equals(direction))       buildProperty(styleBuffer,IStyle.CSS_DIRECTION_PROPERTY,IStyle.CSS_LTR_VALUE);
    }
  }
}","/** 
 * Builds the direction style.
 * @param styleBuffer The <code>StringBuffer</code> to which the result is output.
 * @param style The style object.
 * @author bidi_hcg
 */
public static void buildBidiDirection(StringBuffer styleBuffer,IStyle style){
  if (style != null) {
    String direction=style.getDirection();
    if (direction != null) {
      buildProperty(styleBuffer,IStyle.CSS_DIRECTION_PROPERTY,direction);
    }
  }
}",0.7859778597785978
72178,"/** 
 * @param parent
 * @return
 */
public static ClassLoader getCustomScriptClassLoader(ClassLoader parent){
  List<URL> urls=getClassPathURLs();
  if (urls.size() == 0)   return parent;
  return new URLClassLoader(urls.toArray(new URL[0]),parent);
}","/** 
 * @param parent
 * @return
 */
public static ClassLoader getCustomScriptClassLoader(ClassLoader parent,ModuleHandle handle){
  List<URL> urls=getClassPathURLs();
  loadResourceFolderScriptLibs(handle,urls);
  if (urls.size() == 0)   return parent;
  return new URLClassLoader(urls.toArray(new URL[0]),parent);
}",0.8857644991212654
72179,"private List getProjectPath(IProject project){
  List retValue=new ArrayList();
  if (!hasJavaNature(project)) {
    return retValue;
  }
  IJavaProject fCurrJProject=JavaCore.create(project);
  IClasspathEntry[] classpathEntries=null;
  boolean projectExists=(project.exists() && project.getFile(""String_Node_Str"").exists());
  if (projectExists) {
    if (classpathEntries == null) {
      classpathEntries=fCurrJProject.readRawClasspath();
    }
  }
  if (classpathEntries != null) {
    retValue=getExistingEntries(classpathEntries);
  }
  return retValue;
}","private List getProjectPath(IProject project){
  List retValue=new ArrayList();
  if (!hasJavaNature(project)) {
    return retValue;
  }
  IJavaProject fCurrJProject=JavaCore.create(project);
  IClasspathEntry[] classpathEntries=null;
  boolean projectExists=(project.exists() && project.getFile(""String_Node_Str"").exists());
  if (projectExists) {
    if (classpathEntries == null) {
      classpathEntries=fCurrJProject.readRawClasspath();
    }
  }
  if (classpathEntries != null) {
    retValue=getExistingEntries(classpathEntries,project);
  }
  return retValue;
}",0.9929328621908128
72180,"private String getProjectOutClassPath(IProject project){
  if (!hasJavaNature(project)) {
    return null;
  }
  IJavaProject fCurrJProject=JavaCore.create(project);
  IPath path=null;
  boolean projectExists=(project.exists() && project.getFile(""String_Node_Str"").exists());
  if (projectExists) {
    if (path == null) {
      path=fCurrJProject.readOutputLocation();
      String curPath=path.toOSString();
      String directPath=project.getLocation().toOSString();
      int index=directPath.lastIndexOf(File.separator);
      String absPath=directPath.substring(0,index) + curPath;
      return absPath;
    }
  }
  return null;
}","private String getProjectOutClassPath(IProject project){
  if (!hasJavaNature(project)) {
    return null;
  }
  IJavaProject fCurrJProject=JavaCore.create(project);
  IPath path=null;
  boolean projectExists=(project.exists() && project.getFile(""String_Node_Str"").exists());
  if (projectExists) {
    if (path == null) {
      path=fCurrJProject.readOutputLocation();
      String absPath=getFullPath(path,project);
      return absPath;
    }
  }
  return null;
}",0.7622504537205081
72181,"private List getExistingEntries(IClasspathEntry[] classpathEntries){
  ArrayList newClassPath=new ArrayList();
  for (int i=0; i < classpathEntries.length; i++) {
    IClasspathEntry curr=classpathEntries[i];
    if (curr.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {
      try {
        newClassPath.add(curr.getPath().toFile().toURL());
      }
 catch (      MalformedURLException e) {
      }
    }
  }
  return newClassPath;
}","private List getExistingEntries(IClasspathEntry[] classpathEntries,IProject project){
  ArrayList newClassPath=new ArrayList();
  for (int i=0; i < classpathEntries.length; i++) {
    IClasspathEntry curr=classpathEntries[i];
    if (curr.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {
      try {
        boolean inWorkSpace=true;
        IWorkspace space=ResourcesPlugin.getWorkspace();
        if (space == null || space.getRoot() == null) {
          inWorkSpace=false;
        }
        IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
        IPath path=curr.getPath();
        if (root.findMember(path) == null) {
          inWorkSpace=false;
        }
        if (inWorkSpace) {
          String absPath=getFullPath(path,root.findMember(path).getProject());
          URL url=new URL(""String_Node_Str"" + absPath);
          newClassPath.add(url);
        }
 else {
          newClassPath.add(curr.getPath().toFile().toURL());
        }
      }
 catch (      MalformedURLException e) {
      }
    }
  }
  return newClassPath;
}",0.5232636547538773
72182,"private void addResultSetRelation(String pRsetId,String rowId,String queryId,String rsetId){
  int intRowId=Integer.parseInt(rowId);
  rsetIndex.addResultSet(queryId,pRsetId,intRowId,rsetId);
}","private void addResultSetRelation(String pRsetId,String rowId,String queryId,String rsetId){
  rsetIndex.addResultSet(queryId,pRsetId,rowId,rsetId);
}",0.8688046647230321
72183,"protected String getResultID(String pRsetId,String rowId,String queryId){
  int intRowId=Integer.parseInt(rowId);
  String resultSetId=rsetIndex.getResultSet(queryId,pRsetId,intRowId);
  return resultSetId;
}","protected String getResultID(String pRsetId,String rowId,String queryId){
  return rsetIndex.getResultSet(queryId,pRsetId,rowId);
}",0.7433628318584071
72184,"public String getResultSet(String query,String parent,int row){
  QueryResultSets rsets=queries.get(query);
  if (rsets != null) {
    String rset=rsets.getResultSet(parent,row);
    if (rset == null) {
      if (parent != null) {
        int charAt=parent.indexOf(""String_Node_Str"");
        if (charAt != -1) {
          String root=parent.substring(0,charAt);
          return rsets.getResultSet(root,row);
        }
      }
    }
    return rset;
  }
  return null;
}","public String getResultSet(String query,String parent,String row){
  QueryResultSets rsets=queries.get(query);
  if (rsets != null) {
    String rset=rsets.getResultSet(parent,row);
    if (rset == null) {
      if (parent != null) {
        int charAt=parent.indexOf(""String_Node_Str"");
        if (charAt != -1) {
          String root=parent.substring(0,charAt);
          return rsets.getResultSet(root,row);
        }
      }
    }
    return rset;
  }
  return null;
}",0.9904761904761904
72185,"public void addResultSet(String query,String parent,int row,String rset){
  QueryResultSets rsets=queries.get(query);
  if (rsets == null) {
    rsets=new QueryResultSets();
    queries.put(query,rsets);
  }
  rsets.addResultSet(parent,row,rset);
}","public void addResultSet(String query,String parent,String row,String rset){
  QueryResultSets rsets=queries.get(query);
  if (rsets == null) {
    rsets=new QueryResultSets();
    queries.put(query,rsets);
  }
  rsets.addResultSet(parent,row,rset);
}",0.9819639278557114
72186,"private void initializeClassLoader(){
  if (applicationClassLoader == null) {
    applicationClassLoader=new ApplicationClassLoader(engine,runnable);
    getScriptContext().getContext().setApplicationClassLoader(applicationClassLoader);
  }
}","private void initializeClassLoader(){
  if (applicationClassLoader == null) {
    applicationClassLoader=new ApplicationClassLoader(engine,runnable);
    getScriptContext().setApplicationClassLoader(applicationClassLoader);
  }
}",0.9723991507430998
72187,"/** 
 * Creates a new page.
 * @param page the PageArea specified from layout
 */
public void newPage(float pageWidth,float pageHeight,Color backgroundColor){
  currentPageNum++;
  imageInfos.clear();
  this.pageWidth=pageWidth;
  this.pageHeight=pageHeight;
  println(""String_Node_Str"");
  println(""String_Node_Str"" + currentPageNum + ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  drawBackgroundColor(backgroundColor,0,0,pageWidth,pageHeight);
}","/** 
 * Creates a new page.
 * @param page the PageArea specified from layout
 */
public void newPage(float pageWidth,float pageHeight,Color backgroundColor){
  currentPageNum++;
  imageInfos.clear();
  if (pageWidth > this.pageWidth) {
    this.pageWidth=pageWidth;
  }
  if (pageHeight > this.pageHeight) {
    this.pageHeight=pageHeight;
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"" + currentPageNum + ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  drawBackgroundColor(backgroundColor,0,0,pageWidth,pageHeight);
}",0.9308176100628932
72188,"public void run(){
  loadDesign();
}","public void run() throws EngineException {
  doValidateParameters();
  loadDesign();
}",0.5901639344262295
72189,"/** 
 * Draws image at the contentByte
 * @param image the ImageArea specified from the layout
 */
protected void drawImage(IImageArea image){
  int imageX=currentX + getX(image);
  int imageY=currentY + getY(image);
  IImageContent imageContent=((IImageContent)image.getContent());
  InputStream in=null;
  boolean isSvg=false;
  int height=getHeight(image);
  int width=getWidth(image);
  String helpText=imageContent.getHelpText();
  try {
    String uri=imageContent.getURI();
    String extension=imageContent.getExtension();
switch (imageContent.getImageSource()) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URL:
      if (null == uri)       return;
    if (uri != null && uri.endsWith(""String_Node_Str"")) {
      isSvg=true;
    }
  if (isSvg) {
    pageGraphic.drawImage(uri,transSvgToArray(uri),extension,imageX,imageY,height,width,helpText);
  }
 else {
    pageGraphic.drawImage(uri,extension,imageX,imageY,height,width,helpText);
  }
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
byte[] data=imageContent.getData();
if (null == data) return;
in=new ByteArrayInputStream(data);
isSvg=((imageContent.getMIMEType() != null) && imageContent.getMIMEType().equalsIgnoreCase(""String_Node_Str"")) || ((uri != null) && uri.toLowerCase().endsWith(""String_Node_Str"")) || ((imageContent.getExtension() != null) && imageContent.getExtension().toLowerCase().endsWith(""String_Node_Str""));
if (isSvg) data=transSvgToArray(in);
pageGraphic.drawImage(uri,data,extension,imageX,imageY,height,width,helpText);
break;
}
if (in == null) return;
}
 catch (Throwable t) {
log(t,Level.WARNING);
}
 finally {
if (in != null) {
try {
in.close();
in=null;
}
 catch (IOException e) {
log(e,Level.WARNING);
}
}
}
}","/** 
 * Draws image at the contentByte
 * @param image the ImageArea specified from the layout
 */
protected void drawImage(IImageArea image){
  int imageX=currentX + getX(image);
  int imageY=currentY + getY(image);
  IImageContent imageContent=((IImageContent)image.getContent());
  InputStream in=null;
  int height=getHeight(image);
  int width=getWidth(image);
  String helpText=imageContent.getHelpText();
  try {
    String uri=imageContent.getURI();
    String extension=imageContent.getExtension();
switch (imageContent.getImageSource()) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URL:
      if (null == uri)       return;
    if (SvgFile.isSvg(uri)) {
      pageGraphic.drawImage(uri,SvgFile.transSvgToArray(uri),extension,imageX,imageY,height,width,helpText);
    }
 else {
      pageGraphic.drawImage(uri,extension,imageX,imageY,height,width,helpText);
    }
  break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
byte[] data=imageContent.getData();
if (null == data) return;
in=new ByteArrayInputStream(data);
String mimeType=imageContent.getMIMEType();
if (SvgFile.isSvg(mimeType,uri,extension)) data=SvgFile.transSvgToArray(in);
pageGraphic.drawImage(uri,data,extension,imageX,imageY,height,width,helpText);
break;
}
if (in == null) return;
}
 catch (Throwable t) {
log(t,Level.WARNING);
}
 finally {
if (in != null) {
try {
in.close();
in=null;
}
 catch (IOException e) {
log(e,Level.WARNING);
}
}
}
}",0.768796992481203
72190,"/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content) throws BadElementException, MalformedURLException, IOException {
  Image image=null;
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    ReportDesignHandle design=content.getReportContent().getDesign().getReportDesign();
  URL url=design.findResource(content.getURI(),IResourceLocator.IMAGE);
InputStream in=url.openStream();
try {
byte[] buffer=new byte[in.available()];
in.read(buffer);
image=Image.getInstance(buffer);
}
 catch (Exception ex) {
logger.log(Level.WARNING,ex.getMessage(),ex);
}
 finally {
in.close();
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
image=Image.getInstance(content.getData());
break;
case IImageContent.IMAGE_URL:
image=Image.getInstance(new URL(content.getURI()));
break;
default :
assert(false);
}
if (image != null) {
int resolution=96;
int contentResolution=content.getResolution();
if (contentResolution != 0) {
resolution=contentResolution;
}
return new Dimension((int)(image.plainWidth() * 1000 / resolution * 72),(int)(image.plainHeight() * 1000 / resolution * 72));
}
return null;
}","/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content) throws BadElementException, MalformedURLException, IOException {
  Image image=null;
  String uri=content.getURI();
  String mimeType=content.getMIMEType();
  String extension=content.getExtension();
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    ReportDesignHandle design=content.getReportContent().getDesign().getReportDesign();
  URL url=design.findResource(uri,IResourceLocator.IMAGE);
InputStream in=url.openStream();
try {
byte[] buffer;
if (SvgFile.isSvg(content.getURI())) {
  buffer=SvgFile.transSvgToArray(in);
}
 else {
  ArrayList<Byte> bytes=new ArrayList<Byte>();
  int data=in.read();
  while (data != -1) {
    bytes.add((byte)data);
    data=in.read();
  }
  buffer=new byte[bytes.size()];
  for (int i=0; i < buffer.length; i++) {
    buffer[i]=bytes.get(i);
  }
}
image=Image.getInstance(buffer);
}
 catch (Exception ex) {
logger.log(Level.WARNING,ex.getMessage(),ex);
}
 finally {
in.close();
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
byte[] data=content.getData();
in=new ByteArrayInputStream(data);
if (SvgFile.isSvg(mimeType,uri,extension)) data=SvgFile.transSvgToArray(in);
image=Image.getInstance(data);
break;
case IImageContent.IMAGE_URL:
if (SvgFile.isSvg(uri)) {
image=Image.getInstance(SvgFile.transSvgToArray(uri));
}
 else {
image=Image.getInstance(new URL(content.getURI()));
}
break;
default :
assert(false);
}
if (image != null) {
int resolution=96;
int contentResolution=content.getResolution();
if (contentResolution != 0) {
resolution=contentResolution;
}
return new Dimension((int)(image.plainWidth() * 1000 / resolution * 72),(int)(image.plainHeight() * 1000 / resolution * 72));
}
return null;
}",0.7755595886267392
72191,"public boolean supportsNamedParameters() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,DataSourceMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  try {
    return dbMetadata.supportsNamedParameters();
  }
 catch (  SQLException e) {
    return false;
  }
}","public boolean supportsNamedParameters() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,DataSourceMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  return false;
}",0.8049281314168378
72192,"protected AbstractParseState generalJumpTo(){
  IPropertyDefn jmpDefn=null;
  if (struct != null)   jmpDefn=struct.getDefn().getMember(name);
 else   jmpDefn=element.getPropertyDefn(name);
  if (jmpDefn != null && ((PropertyDefn)jmpDefn).isElementType()) {
    ElementPropertyState state=new ElementPropertyState(handler,element);
    state.setName(name);
    return state;
  }
  if (element instanceof ReportDesign && THUMBNAIL_PROP == nameValue) {
    Base64PropertyState state=new Base64PropertyState(handler,element,IReportDesignModel.CHARSET);
    state.setName(name);
    return state;
  }
  if (struct instanceof EmbeddedImage && DATA_MEMBER == nameValue) {
    Base64PropertyState state=new Base64PropertyState(handler,element,propDefn,struct,EmbeddedImage.CHARSET);
    state.setName(name);
    return state;
  }
  if (struct instanceof OdaDesignerState && CONTENT_AS_BLOB_MEMBER == nameValue) {
    Base64PropertyState state=new Base64PropertyState(handler,element,propDefn,struct,OdaDesignerState.CHARSET);
    state.setName(name);
    return state;
  }
  if (ON_CREATE_METHOD == nameValue && (element instanceof Cell || element instanceof TableRow)) {
    CompatibleMiscExpressionState state=new CompatibleMiscExpressionState(handler,element);
    state.setName(name);
    return state;
  }
  if (propDefn != null && (propDefn.getTypeCode() == IPropertyType.SCRIPT_TYPE || propDefn.getTypeCode() == IPropertyType.XML_TYPE) && handler.versionNumber >= VersionUtil.VERSION_3_2_16) {
    if (!(propDefn instanceof ExtensionPropertyDefn && ((ExtensionPropertyDefn)propDefn).hasOwnModel())) {
      CompatibleCDATAPropertyState state=new CompatibleCDATAPropertyState(handler,element);
      state.setName(name);
      return state;
    }
  }
  return super.generalJumpTo();
}","protected AbstractParseState generalJumpTo(){
  IPropertyDefn jmpDefn=null;
  if (struct != null)   jmpDefn=struct.getDefn().getMember(name);
 else   jmpDefn=element.getPropertyDefn(name);
  if (jmpDefn != null && ((PropertyDefn)jmpDefn).isElementType()) {
    ElementPropertyState state=new ElementPropertyState(handler,element);
    state.setName(name);
    return state;
  }
  if (element instanceof ReportDesign && THUMBNAIL_PROP == nameValue) {
    Base64PropertyState state=new Base64PropertyState(handler,element,IReportDesignModel.CHARSET);
    state.setName(name);
    return state;
  }
  if (struct instanceof EmbeddedImage && DATA_MEMBER == nameValue) {
    Base64PropertyState state=new Base64PropertyState(handler,element,propDefn,struct,EmbeddedImage.CHARSET);
    state.setName(name);
    return state;
  }
  if (struct instanceof OdaDesignerState && CONTENT_AS_BLOB_MEMBER == nameValue) {
    Base64PropertyState state=new Base64PropertyState(handler,element,propDefn,struct,OdaDesignerState.CHARSET);
    state.setName(name);
    return state;
  }
  if (ON_CREATE_METHOD == nameValue && (element instanceof Cell || element instanceof TableRow)) {
    CompatibleMiscExpressionState state=new CompatibleMiscExpressionState(handler,element);
    state.setName(name);
    return state;
  }
  if (jmpDefn != null && (jmpDefn.getTypeCode() == IPropertyType.SCRIPT_TYPE || jmpDefn.getTypeCode() == IPropertyType.XML_TYPE) && handler.versionNumber >= VersionUtil.VERSION_3_2_16) {
    if (!(jmpDefn instanceof ExtensionPropertyDefn && ((ExtensionPropertyDefn)jmpDefn).hasOwnModel())) {
      CompatibleCDATAPropertyState state=new CompatibleCDATAPropertyState(handler,element);
      state.setName(name);
      return state;
    }
  }
  return super.generalJumpTo();
}",0.9929755549311604
72193,"/** 
 * Returns if the specified translation is contained in the translation table.
 * @param trans a given <code>Translation</code>
 * @return <code>true</code> if the <code>Translation</code> iscontained in the translation talbe, return <code>false</code> otherwise.
 */
public boolean contains(Translation trans){
  return translations.contains(trans);
}","/** 
 * Returns if the specified translation is contained in the translation table.
 * @param trans a given <code>Translation</code>
 * @return <code>true</code> if the <code>Translation</code> is contained inthe translation talbe, return <code>false</code> otherwise.
 */
public boolean contains(Translation trans){
  return translations.contains(trans);
}",0.9635854341736696
72194,"/** 
 * Finds an embedded image by name.
 * @param imageName the embedded image name
 * @return the defined image that matches, or <code>null</code> if theimage name was not found in the embedded images.
 */
public EmbeddedImage findImage(String imageName){
  StructureDefn defn=(StructureDefn)MetaDataDictionary.getInstance().getStructure(EmbeddedImage.EMBEDDED_IMAGE_STRUCT);
  return (EmbeddedImage)StructureRefUtil.findStructure(this,defn,imageName);
}","/** 
 * Finds an embedded image by name.
 * @param imageName the embedded image name
 * @return the defined image that matches, or <code>null</code> if the imagename was not found in the embedded images.
 */
public EmbeddedImage findImage(String imageName){
  StructureDefn defn=(StructureDefn)MetaDataDictionary.getInstance().getStructure(EmbeddedImage.EMBEDDED_IMAGE_STRUCT);
  return (EmbeddedImage)StructureRefUtil.findStructure(this,defn,imageName);
}",0.986842105263158
72195,"/** 
 * Returns the <code>URL</code> object if the file with <code>fileName</code> exists. This method takes the following search steps: <ul> <li>Search file taking <code>fileName</code> as absolute file name; <li>Search file taking <code>fileName</code> as relative file name and basing ""base"" property of module; <li>Search file with the file locator (<code>IResourceLocator</code>) in session. </ul>
 * @param fileName file name to search
 * @param fileType file type. The value should be one of: <ul> <li><code>IResourceLocator.IMAGE</code> <li><code>IResourceLocator.LIBRARY</code> <li><code>IResourceLocator.MESSAGEFILE</code> </ul> Any invalid value will be treated as <code>IResourceLocator.IMAGE</code>.
 * @return the <code>URL</code> object if the file with<code>fileName</code> is found, or null otherwise.
 */
public URL findResource(String fileName,int fileType){
  URL url=getSession().getResourceLocator().findResource((ModuleHandle)getHandle(this),fileName,fileType);
  return url;
}","/** 
 * Returns the <code>URL</code> object if the file with <code>fileName</code> exists. This method takes the following search steps: <ul> <li>Search file taking <code>fileName</code> as absolute file name; <li> Search file taking <code>fileName</code> as relative file name and basing ""base"" property of module; <li>Search file with the file locator (<code> IResourceLocator</code>) in session. </ul>
 * @param fileName file name to search
 * @param fileType file type. The value should be one of: <ul> <li><code>IResourceLocator.IMAGE</code> <li><code> IResourceLocator.LIBRARY</code> <li><code> IResourceLocator.MESSAGEFILE</code> </ul> Any invalid value will be treated as <code>IResourceLocator.IMAGE</code>.
 * @return the <code>URL</code> object if the file with<code>fileName</code> is found, or null otherwise.
 */
public URL findResource(String fileName,int fileType){
  URL url=getSession().getResourceLocator().findResource((ModuleHandle)getHandle(this),fileName,fileType);
  return url;
}",0.998003992015968
72196,"/** 
 * @param parent
 * @return
 */
public static ClassLoader getCustomScriptClassLoader(ClassLoader parent){
  List<URL> urls=getClassPathURLs();
  if (urls.size() == 0)   return parent;
  return new URLClassLoader(urls.toArray(new URL[0]),parent);
}","/** 
 * @param parent
 * @return
 */
public static ClassLoader getCustomScriptClassLoader(ClassLoader parent,ModuleHandle handle){
  List<URL> urls=getClassPathURLs();
  loadResourceFolderScriptLibs(handle,urls);
  if (urls.size() == 0)   return parent;
  return new URLClassLoader(urls.toArray(new URL[0]),parent);
}",0.8857644991212654
72197,"public void setUp() throws Exception {
  super.setUp();
  expectedValue=new ArrayList();
  this.GEN_add_filter=false;
  this.GEN_add_group=false;
  this.GEN_subquery_on_group=false;
  this.PRE_add_filter=false;
  this.PRE_add_sort=false;
  this.PRE_change_oldbinding=false;
  this.PRE_add_group=false;
}","public void setUp() throws Exception {
  super.setUp();
  expectedValue=new ArrayList();
  this.GEN_add_filter=false;
  this.GEN_add_group=false;
  this.GEN_add_secondGroup=false;
  this.GEN_subquery_on_group=false;
  this.GEN_useDetail=true;
  this.GEN_make_empty=false;
  this.PRE_add_filter=false;
  this.PRE_add_sort=false;
  this.PRE_change_oldbinding=false;
  this.PRE_add_group=false;
  this.PRE_printGroupInfo=false;
}",0.831275720164609
72198,"/** 
 * @param GEN_add_filter
 * @param GEN_add_group
 * @param qd
 * @throws BirtException
 */
private void _preBasicIV(QueryDefinition qd) throws BirtException {
  qd.setQueryResultsID(this.queryResultID);
  IQueryResults qr=myPreDataEngine.prepare(qd).execute(null);
  IResultIterator ri=qr.getResultIterator();
  ri.moveTo(0);
  do {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri.getValue(totalExprName[i]) + ""String_Node_Str"";
    this.testPrintln(abc + ri.getRowId());
  }
 while (ri.next());
  ri.close();
  myPreDataEngine.shutdown();
}","/** 
 * @param GEN_add_filter
 * @param GEN_add_group
 * @param qd
 * @throws BirtException
 */
private void _preBasicIV(QueryDefinition qd) throws BirtException {
  qd.setQueryResultsID(this.queryResultID);
  IQueryResults qr=myPreDataEngine.prepare(qd).execute(null);
  IResultIterator ri=qr.getResultIterator();
  ri.moveTo(0);
  if (!ri.isEmpty()) {
    do {
      String abc=""String_Node_Str"";
      for (int i=0; i < rowExprName.length; i++)       abc+=ri.getValue(rowExprName[i]) + ""String_Node_Str"";
      for (int i=0; i < totalExprName.length; i++)       abc+=ri.getValue(totalExprName[i]) + ""String_Node_Str"";
      if (this.PRE_printGroupInfo)       this.testPrintln(abc + ri.getRowId() + ""String_Node_Str""+ ri.getRowIndex()+ ""String_Node_Str""+ ri.getStartingGroupLevel()+ ""String_Node_Str""+ ri.getEndingGroupLevel());
 else       this.testPrintln(abc + ri.getRowId());
    }
 while (ri.next());
  }
  ri.close();
  myPreDataEngine.shutdown();
}",0.8374622356495468
72199,"/** 
 * @return
 */
private QueryDefinition newGenIVReportQuery(){
  QueryDefinition qd=newReportQuery();
  if (GEN_add_filter == true) {
    String columnBindingNameFilter=""String_Node_Str"";
    IBaseExpression columnBindingExprFilter=new ScriptExpression(""String_Node_Str"");
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    GEN_filterDefn=new FilterDefinition(filterExpr);
    qd.addResultSetExpression(columnBindingNameFilter,columnBindingExprFilter);
    qd.addFilter(GEN_filterDefn);
  }
  String columnBindingNameSort=""String_Node_Str"";
  IBaseExpression columnBindingExprSort=new ScriptExpression(""String_Node_Str"");
  SortDefinition sortDefn=new SortDefinition();
  sortDefn.setColumn(columnBindingNameSort);
  qd.addResultSetExpression(columnBindingNameSort,columnBindingExprSort);
  qd.addSort(sortDefn);
  if (GEN_add_group == true) {
    String columnBindingNameGroup=""String_Node_Str"";
    IBaseExpression columnBindingExprGroup=new ScriptExpression(""String_Node_Str"");
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addResultSetExpression(columnBindingNameGroup,columnBindingExprGroup);
    qd.addGroup(gd);
  }
  return qd;
}","/** 
 * @return
 */
private QueryDefinition newGenIVReportQuery(){
  QueryDefinition qd=newReportQuery();
  if (GEN_add_filter == true) {
    String columnBindingNameFilter=""String_Node_Str"";
    IBaseExpression columnBindingExprFilter=new ScriptExpression(""String_Node_Str"");
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    GEN_filterDefn=new FilterDefinition(filterExpr);
    qd.addResultSetExpression(columnBindingNameFilter,columnBindingExprFilter);
    qd.addFilter(GEN_filterDefn);
  }
  if (GEN_make_empty == true) {
    String columnBindingNameFilter=""String_Node_Str"";
    IBaseExpression columnBindingExprFilter=new ScriptExpression(""String_Node_Str"");
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    qd.addResultSetExpression(columnBindingNameFilter,columnBindingExprFilter);
    qd.addFilter(new FilterDefinition(filterExpr));
  }
  String columnBindingNameSort=""String_Node_Str"";
  IBaseExpression columnBindingExprSort=new ScriptExpression(""String_Node_Str"");
  SortDefinition sortDefn=new SortDefinition();
  sortDefn.setColumn(columnBindingNameSort);
  qd.addResultSetExpression(columnBindingNameSort,columnBindingExprSort);
  qd.addSort(sortDefn);
  if (GEN_add_group == true) {
    String columnBindingNameGroup=""String_Node_Str"";
    IBaseExpression columnBindingExprGroup=new ScriptExpression(""String_Node_Str"");
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addResultSetExpression(columnBindingNameGroup,columnBindingExprGroup);
    qd.addGroup(gd);
  }
  if (GEN_add_secondGroup == true) {
    String columnBindingNameGroup=""String_Node_Str"";
    IBaseExpression columnBindingExprGroup=new ScriptExpression(""String_Node_Str"");
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addResultSetExpression(columnBindingNameGroup,columnBindingExprGroup);
    qd.addGroup(gd);
  }
  qd.setUsesDetails(this.GEN_useDetail);
  return qd;
}",0.75093399750934
72200,"public void paintControl(PaintEvent e){
  GC gc=e.gc;
  Rectangle rect=sep.getBounds();
  gc.setForeground(ColorConstants.darkGray);
  gc.drawLine(0,0,rect.width,0);
}","public void paintControl(PaintEvent e){
  GC gc=e.gc;
  Rectangle rect=sep.getBounds();
  gc.setForeground(ReportColorConstants.DarkGrayForground);
  gc.drawLine(0,0,rect.width,0);
}",0.9512893982808024
72201,"public void createPartControl(Composite parent){
  Font font=parent.getFont();
  Composite composite=ScriptSWTFactory.createComposite(parent,font,1,1,GridData.FILL_HORIZONTAL,0,0);
  Composite header=ScriptSWTFactory.createComposite(composite,font,2,1,GridData.FILL_HORIZONTAL,5,5);
  Label lblScript=new Label(header,SWT.NONE);
  lblScript.setText(SCRIPT_LABEL);
  final FontData fd=lblScript.getFont().getFontData()[0];
  Font labelFont=FontManager.getFont(fd.getName(),fd.getHeight(),SWT.BOLD);
  lblScript.setFont(labelFont);
  GridData gd=new GridData(GridData.BEGINNING);
  gd.horizontalIndent=5;
  gd.verticalAlignment=GridData.CENTER;
  lblScript.setLayoutData(gd);
  messageLabel=new Label(header,SWT.NONE);
  GridData labelLayoutData=new GridData(GridData.FILL_HORIZONTAL);
  labelLayoutData.verticalAlignment=GridData.END;
  messageLabel.setLayoutData(labelLayoutData);
  messageLabel.setText(getLabelMessage());
  messageLabel.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if (outlinePage != null) {
        outlinePage.selectionItem(getDebugJSInput().getId());
      }
    }
  }
);
  final Composite sep=new Composite(composite,SWT.NONE);
  GridData layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.heightHint=1;
  sep.setLayoutData(layoutData);
  sep.addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent e){
      GC gc=e.gc;
      Rectangle rect=sep.getBounds();
      gc.setForeground(ColorConstants.darkGray);
      gc.drawLine(0,0,rect.width,0);
    }
  }
);
  Composite mainComsite=new Composite(composite,SWT.NONE);
  mainComsite.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).create());
  mainComsite.setLayout(new FillLayout());
  super.createPartControl(mainComsite);
  if (getEditorInput() != null && getViewer() != null) {
    getViewer().getTextWidget().setEnabled(((DebugJsInput)getEditorInput()).sourceAvailable());
  }
}","public void createPartControl(Composite parent){
  Font font=parent.getFont();
  Composite composite=ScriptSWTFactory.createComposite(parent,font,1,1,GridData.FILL_HORIZONTAL,0,0);
  Composite header=ScriptSWTFactory.createComposite(composite,font,2,1,GridData.FILL_HORIZONTAL,5,5);
  Label lblScript=new Label(header,SWT.NONE);
  lblScript.setText(SCRIPT_LABEL);
  final FontData fd=lblScript.getFont().getFontData()[0];
  Font labelFont=FontManager.getFont(fd.getName(),fd.getHeight(),SWT.BOLD);
  lblScript.setFont(labelFont);
  GridData gd=new GridData(GridData.BEGINNING);
  gd.horizontalIndent=5;
  gd.verticalAlignment=GridData.CENTER;
  lblScript.setLayoutData(gd);
  messageLabel=new Label(header,SWT.NONE);
  GridData labelLayoutData=new GridData(GridData.FILL_HORIZONTAL);
  labelLayoutData.verticalAlignment=GridData.END;
  messageLabel.setLayoutData(labelLayoutData);
  messageLabel.setText(getLabelMessage());
  messageLabel.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if (outlinePage != null) {
        outlinePage.selectionItem(getDebugJSInput().getId());
      }
    }
  }
);
  final Composite sep=new Composite(composite,SWT.NONE);
  GridData layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.heightHint=1;
  sep.setLayoutData(layoutData);
  sep.addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent e){
      GC gc=e.gc;
      Rectangle rect=sep.getBounds();
      gc.setForeground(ReportColorConstants.DarkGrayForground);
      gc.drawLine(0,0,rect.width,0);
    }
  }
);
  Composite mainComsite=new Composite(composite,SWT.NONE);
  mainComsite.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).create());
  mainComsite.setLayout(new FillLayout());
  super.createPartControl(mainComsite);
  if (getEditorInput() != null && getViewer() != null) {
    getViewer().getTextWidget().setEnabled(((DebugJsInput)getEditorInput()).sourceAvailable());
  }
}",0.987988755430616
72202,"/** 
 * Get the foreground color.
 * @param handle The handle of design element.
 * @return fore ground color
 */
public int getForegroundColor(DesignElementHandle handle){
  Object obj=handle.getProperty(StyleHandle.COLOR_PROP);
  int color=handle.getPropertyHandle(StyleHandle.COLOR_PROP).getIntValue();
  if (obj == null) {
    return 0x0;
  }
  return color;
}","/** 
 * Get the foreground color.
 * @param handle The handle of design element.
 * @return fore ground color
 */
public int getForegroundColor(DesignElementHandle handle){
  Object obj=handle.getProperty(StyleHandle.COLOR_PROP);
  int color=handle.getPropertyHandle(StyleHandle.COLOR_PROP).getIntValue();
  if (obj == null) {
    return SWT.COLOR_LIST_FOREGROUND;
  }
  return color;
}",0.9626666666666668
72203,"/** 
 * Get the background color.
 * @param handle The handle of design element.
 * @return back ground color
 */
public int getBackgroundColor(DesignElementHandle handle){
  Object obj=handle.getProperty(StyleHandle.BACKGROUND_COLOR_PROP);
  int color=handle.getPropertyHandle(StyleHandle.BACKGROUND_COLOR_PROP).getIntValue();
  if (obj == null) {
    return 0xFFFFFF;
  }
  return color;
}","/** 
 * Get the background color.
 * @param handle The handle of design element.
 * @return back ground color
 */
public int getBackgroundColor(DesignElementHandle handle){
  Object obj=handle.getProperty(StyleHandle.BACKGROUND_COLOR_PROP);
  int color=handle.getPropertyHandle(StyleHandle.BACKGROUND_COLOR_PROP).getIntValue();
  if (obj == null) {
    return SWT.COLOR_LIST_BACKGROUND;
  }
  return color;
}",0.9586983729662076
72204,"/** 
 * Get session handle
 * @return Session handle
 */
public SessionHandle getSessionHandle(){
  if (sessionHandle == null) {
    sessionHandle=new DesignEngine(new DesignConfig()).newSessionHandle(ULocale.getDefault());
  }
  return sessionHandle;
}","/** 
 * Get session handle
 * @return Session handle
 */
public SessionHandle getSessionHandle(){
  if (sessionHandle == null) {
    sessionHandle=new DesignEngine(new DesignConfig()).newSessionHandle(ULocale.getDefault());
    try {
      if (!CorePlugin.isUseNormalTheme()) {
        sessionHandle.setDefaultValue(StyleHandle.COLOR_PROP,DEUtil.getRGBInt(CorePlugin.ReportForeground.getRGB()));
      }
    }
 catch (    PropertyValueException e) {
    }
  }
  return sessionHandle;
}",0.6856368563685636
72205,"protected IFigure createDragSourceFeedbackFigure(){
  Figure r=new Figure(){
    protected void paintFigure(    Graphics graphics){
      Rectangle rect=getBounds().getCopy();
      graphics.setXORMode(true);
      graphics.setForegroundColor(ColorConstants.white);
      graphics.setBackgroundColor(new Color(null,31,31,31));
      graphics.translate(getLocation());
      PointList outline=new PointList();
      outline.addPoint(0,0);
      outline.addPoint(rect.width,0);
      outline.addPoint(rect.width - 1,0);
      outline.addPoint(rect.width - 1,rect.height - 1);
      outline.addPoint(0,rect.height - 1);
      graphics.fillPolygon(outline);
      PointList innerLine=new PointList();
      innerLine.addPoint(rect.width - 0 - 1,0);
      innerLine.addPoint(rect.width - 0 - 1,0);
      innerLine.addPoint(rect.width - 1,0);
      innerLine.addPoint(rect.width - 0 - 1,0);
      innerLine.addPoint(0,0);
      innerLine.addPoint(0,rect.height - 1);
      innerLine.addPoint(rect.width - 1,rect.height - 1);
      innerLine.addPoint(rect.width - 1,0);
      graphics.drawPolygon(innerLine);
      graphics.drawLine(rect.width - 0 - 1,0,rect.width - 1,0);
      graphics.translate(getLocation().getNegated());
    }
  }
;
  r.setBounds(getInitialFeedbackBounds());
  addFeedback(r);
  return r;
}","protected IFigure createDragSourceFeedbackFigure(){
  Figure r=new Figure(){
    protected void paintFigure(    Graphics graphics){
      Rectangle rect=getBounds().getCopy();
      graphics.setXORMode(true);
      graphics.setForegroundColor(ColorConstants.white);
      graphics.setBackgroundColor(ColorManager.getColor(31,31,31));
      graphics.translate(getLocation());
      PointList outline=new PointList();
      outline.addPoint(0,0);
      outline.addPoint(rect.width,0);
      outline.addPoint(rect.width - 1,0);
      outline.addPoint(rect.width - 1,rect.height - 1);
      outline.addPoint(0,rect.height - 1);
      graphics.fillPolygon(outline);
      PointList innerLine=new PointList();
      innerLine.addPoint(rect.width - 0 - 1,0);
      innerLine.addPoint(rect.width - 0 - 1,0);
      innerLine.addPoint(rect.width - 1,0);
      innerLine.addPoint(rect.width - 0 - 1,0);
      innerLine.addPoint(0,0);
      innerLine.addPoint(0,rect.height - 1);
      innerLine.addPoint(rect.width - 1,rect.height - 1);
      innerLine.addPoint(rect.width - 1,0);
      graphics.drawPolygon(innerLine);
      graphics.drawLine(rect.width - 0 - 1,0,rect.width - 1,0);
      graphics.translate(getLocation().getNegated());
    }
  }
;
  r.setBounds(getInitialFeedbackBounds());
  addFeedback(r);
  return r;
}",0.9896907216494846
72206,"protected void paintFigure(Graphics graphics){
  Rectangle rect=getBounds().getCopy();
  graphics.setXORMode(true);
  graphics.setForegroundColor(ColorConstants.white);
  graphics.setBackgroundColor(new Color(null,31,31,31));
  graphics.translate(getLocation());
  PointList outline=new PointList();
  outline.addPoint(0,0);
  outline.addPoint(rect.width,0);
  outline.addPoint(rect.width - 1,0);
  outline.addPoint(rect.width - 1,rect.height - 1);
  outline.addPoint(0,rect.height - 1);
  graphics.fillPolygon(outline);
  PointList innerLine=new PointList();
  innerLine.addPoint(rect.width - 0 - 1,0);
  innerLine.addPoint(rect.width - 0 - 1,0);
  innerLine.addPoint(rect.width - 1,0);
  innerLine.addPoint(rect.width - 0 - 1,0);
  innerLine.addPoint(0,0);
  innerLine.addPoint(0,rect.height - 1);
  innerLine.addPoint(rect.width - 1,rect.height - 1);
  innerLine.addPoint(rect.width - 1,0);
  graphics.drawPolygon(innerLine);
  graphics.drawLine(rect.width - 0 - 1,0,rect.width - 1,0);
  graphics.translate(getLocation().getNegated());
}","protected void paintFigure(Graphics graphics){
  Rectangle rect=getBounds().getCopy();
  graphics.setXORMode(true);
  graphics.setForegroundColor(ColorConstants.white);
  graphics.setBackgroundColor(ColorManager.getColor(31,31,31));
  graphics.translate(getLocation());
  PointList outline=new PointList();
  outline.addPoint(0,0);
  outline.addPoint(rect.width,0);
  outline.addPoint(rect.width - 1,0);
  outline.addPoint(rect.width - 1,rect.height - 1);
  outline.addPoint(0,rect.height - 1);
  graphics.fillPolygon(outline);
  PointList innerLine=new PointList();
  innerLine.addPoint(rect.width - 0 - 1,0);
  innerLine.addPoint(rect.width - 0 - 1,0);
  innerLine.addPoint(rect.width - 1,0);
  innerLine.addPoint(rect.width - 0 - 1,0);
  innerLine.addPoint(0,0);
  innerLine.addPoint(0,rect.height - 1);
  innerLine.addPoint(rect.width - 1,rect.height - 1);
  innerLine.addPoint(rect.width - 1,0);
  graphics.drawPolygon(innerLine);
  graphics.drawLine(rect.width - 0 - 1,0,rect.width - 1,0);
  graphics.translate(getLocation().getNegated());
}",0.9870627695256348
72207,"protected EditPolicy createChildEditPolicy(EditPart child){
  return new ResizableEditPolicy(){
    protected IFigure createDragSourceFeedbackFigure(){
      Figure r=new Figure(){
        protected void paintFigure(        Graphics graphics){
          Rectangle rect=getBounds().getCopy();
          graphics.setXORMode(true);
          graphics.setForegroundColor(ColorConstants.white);
          graphics.setBackgroundColor(new Color(null,31,31,31));
          graphics.translate(getLocation());
          PointList outline=new PointList();
          outline.addPoint(0,0);
          outline.addPoint(rect.width,0);
          outline.addPoint(rect.width - 1,0);
          outline.addPoint(rect.width - 1,rect.height - 1);
          outline.addPoint(0,rect.height - 1);
          graphics.fillPolygon(outline);
          PointList innerLine=new PointList();
          innerLine.addPoint(rect.width - 0 - 1,0);
          innerLine.addPoint(rect.width - 0 - 1,0);
          innerLine.addPoint(rect.width - 1,0);
          innerLine.addPoint(rect.width - 0 - 1,0);
          innerLine.addPoint(0,0);
          innerLine.addPoint(0,rect.height - 1);
          innerLine.addPoint(rect.width - 1,rect.height - 1);
          innerLine.addPoint(rect.width - 1,0);
          graphics.drawPolygon(innerLine);
          graphics.drawLine(rect.width - 0 - 1,0,rect.width - 1,0);
          graphics.translate(getLocation().getNegated());
        }
      }
;
      r.setBounds(getInitialFeedbackBounds());
      addFeedback(r);
      return r;
    }
  }
;
}","protected EditPolicy createChildEditPolicy(EditPart child){
  return new ResizableEditPolicy(){
    protected IFigure createDragSourceFeedbackFigure(){
      Figure r=new Figure(){
        protected void paintFigure(        Graphics graphics){
          Rectangle rect=getBounds().getCopy();
          graphics.setXORMode(true);
          graphics.setForegroundColor(ColorConstants.white);
          graphics.setBackgroundColor(ColorManager.getColor(31,31,31));
          graphics.translate(getLocation());
          PointList outline=new PointList();
          outline.addPoint(0,0);
          outline.addPoint(rect.width,0);
          outline.addPoint(rect.width - 1,0);
          outline.addPoint(rect.width - 1,rect.height - 1);
          outline.addPoint(0,rect.height - 1);
          graphics.fillPolygon(outline);
          PointList innerLine=new PointList();
          innerLine.addPoint(rect.width - 0 - 1,0);
          innerLine.addPoint(rect.width - 0 - 1,0);
          innerLine.addPoint(rect.width - 1,0);
          innerLine.addPoint(rect.width - 0 - 1,0);
          innerLine.addPoint(0,0);
          innerLine.addPoint(0,rect.height - 1);
          innerLine.addPoint(rect.width - 1,rect.height - 1);
          innerLine.addPoint(rect.width - 1,0);
          graphics.drawPolygon(innerLine);
          graphics.drawLine(rect.width - 0 - 1,0,rect.width - 1,0);
          graphics.translate(getLocation().getNegated());
        }
      }
;
      r.setBounds(getInitialFeedbackBounds());
      addFeedback(r);
      return r;
    }
  }
;
}",0.9912875121006776
72208,"public void paintControl(PaintEvent e){
  GC gc=e.gc;
  Rectangle rect=sep.getBounds();
  gc.setForeground(ColorConstants.darkGray);
  gc.drawLine(0,0,rect.width,0);
}","public void paintControl(PaintEvent e){
  GC gc=e.gc;
  Rectangle rect=sep.getBounds();
  gc.setForeground(ReportColorConstants.DarkGrayForground);
  gc.drawLine(0,0,rect.width,0);
}",0.9512893982808024
72209,"/** 
 * Creates tool bar pane.
 * @param parent the parent of controller
 * @return a tool bar pane
 */
protected Composite createController(Composite parent){
  Composite barPane=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(8,false);
  GridData gdata=new GridData(GridData.FILL_HORIZONTAL);
  barPane.setLayout(layout);
  barPane.setLayoutData(gdata);
  initScriptLabel(barPane);
  initComboBoxes(barPane);
  butReset=new Button(barPane,SWT.PUSH);
  butReset.setText(Messages.getString(""String_Node_Str""));
  GridData layoutData=new GridData();
  layoutData.horizontalIndent=6;
  butReset.setLayoutData(layoutData);
  butReset.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      SourceViewer viewer=getViewer();
      if (viewer != null) {
        viewer.getTextWidget().setText(""String_Node_Str"");
        setFocus();
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  butValidate=new Button(barPane,SWT.PUSH);
  butValidate.setText(Messages.getString(""String_Node_Str""));
  layoutData=new GridData();
  layoutData.horizontalIndent=6;
  butValidate.setLayoutData(layoutData);
  butValidate.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      doValidate();
    }
  }
);
  validateIcon=new Label(barPane,SWT.NULL);
  Label column=new Label(barPane,SWT.SEPARATOR | SWT.VERTICAL);
  layoutData=new GridData();
  layoutData.heightHint=20;
  layoutData.horizontalIndent=10;
  column.setLayoutData(layoutData);
  ano=new Label(barPane,0);
  layoutData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_CENTER);
  ano.setLayoutData(layoutData);
  final Composite sep=new Composite(parent,0);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.heightHint=1;
  sep.setLayoutData(layoutData);
  sep.addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent e){
      GC gc=e.gc;
      Rectangle rect=sep.getBounds();
      gc.setForeground(ColorConstants.darkGray);
      gc.drawLine(0,0,rect.width,0);
    }
  }
);
  return barPane;
}","/** 
 * Creates tool bar pane.
 * @param parent the parent of controller
 * @return a tool bar pane
 */
protected Composite createController(Composite parent){
  Composite barPane=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(8,false);
  GridData gdata=new GridData(GridData.FILL_HORIZONTAL);
  barPane.setLayout(layout);
  barPane.setLayoutData(gdata);
  initScriptLabel(barPane);
  initComboBoxes(barPane);
  butReset=new Button(barPane,SWT.PUSH);
  butReset.setText(Messages.getString(""String_Node_Str""));
  GridData layoutData=new GridData();
  layoutData.horizontalIndent=6;
  butReset.setLayoutData(layoutData);
  butReset.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      SourceViewer viewer=getViewer();
      if (viewer != null) {
        viewer.getTextWidget().setText(""String_Node_Str"");
        setFocus();
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  butValidate=new Button(barPane,SWT.PUSH);
  butValidate.setText(Messages.getString(""String_Node_Str""));
  layoutData=new GridData();
  layoutData.horizontalIndent=6;
  butValidate.setLayoutData(layoutData);
  butValidate.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      doValidate();
    }
  }
);
  validateIcon=new Label(barPane,SWT.NULL);
  Label column=new Label(barPane,SWT.SEPARATOR | SWT.VERTICAL);
  layoutData=new GridData();
  layoutData.heightHint=20;
  layoutData.horizontalIndent=10;
  column.setLayoutData(layoutData);
  ano=new Label(barPane,0);
  layoutData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_CENTER);
  ano.setLayoutData(layoutData);
  final Composite sep=new Composite(parent,0);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.heightHint=1;
  sep.setLayoutData(layoutData);
  sep.addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent e){
      GC gc=e.gc;
      Rectangle rect=sep.getBounds();
      gc.setForeground(ReportColorConstants.DarkGrayForground);
      gc.drawLine(0,0,rect.width,0);
    }
  }
);
  return barPane;
}",0.9961000229410416
72210,"public void handleEvent(Event event){
  TreeItem item=(TreeItem)event.item;
  if (event.item.getData() instanceof CssStyleSheetHandle || event.item.getData() instanceof CssSharedStyleHandle) {
    Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
    if (!item.getForeground().equals(gray)) {
      item.setForeground(gray);
    }
  }
 else {
    Color black=Display.getCurrent().getSystemColor(SWT.COLOR_BLACK);
    if (!item.getForeground().equals(black)) {
      item.setForeground(black);
    }
  }
}","public void handleEvent(Event event){
  TreeItem item=(TreeItem)event.item;
  if (event.item.getData() instanceof CssStyleSheetHandle || event.item.getData() instanceof CssSharedStyleHandle) {
    Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
    if (!item.getForeground().equals(gray)) {
      item.setForeground(gray);
    }
  }
 else {
    Color black=ReportColorConstants.ReportForeground;
    if (!item.getForeground().equals(black)) {
      item.setForeground(black);
    }
  }
}",0.9175557710960232
72211,"/** 
 * Creates the SWT control for this page under the given parent control. <p> Clients should not call this method (the workbench calls this method when it needs to, which may be never). </p>
 * @param parent the parent control
 */
public void createControl(Composite parent){
  super.createControl(parent);
  createContextMenu();
  ViewsTreeProvider provider=new ViewsTreeProvider();
  getTreeViewer().setContentProvider(provider);
  getTreeViewer().setLabelProvider(provider);
  getSelectionSynchronizer().setTreeViewer(getTreeViewer());
  new RenameListener(getTreeViewer()).apply();
  getTreeViewer().setSorter(new ItemSorter());
  addDragAndDropListener();
  init(reportHandle);
  getTreeViewer().expandToLevel(2);
  final Tree tree=getTreeViewer().getTree();
  tree.addListener(SWT.PaintItem,new Listener(){
    public void handleEvent(    Event event){
      TreeItem item=(TreeItem)event.item;
      if (event.item.getData() instanceof CssStyleSheetHandle || event.item.getData() instanceof CssSharedStyleHandle) {
        Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
        if (!item.getForeground().equals(gray)) {
          item.setForeground(gray);
        }
      }
 else {
        Color black=Display.getCurrent().getSystemColor(SWT.COLOR_BLACK);
        if (!item.getForeground().equals(black)) {
          item.setForeground(black);
        }
      }
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if ((e.stateMask & SWT.CTRL) != 0 || (e.stateMask & SWT.SHIFT) != 0) {
        setSingleSelection(e);
      }
    }
    private void setSingleSelection(    MouseEvent e){
      IStructuredSelection selection=(IStructuredSelection)getSelection();
      if (!selection.isEmpty() && selection.size() > 1) {
        boolean includeCell=false;
        for (Iterator iterator=selection.iterator(); iterator.hasNext(); ) {
          Object obj=iterator.next();
          if (obj instanceof CellHandle) {
            if (includeCell) {
              TreeItem item=getTreeViewer().getTree().getItem(new Point(e.x,e.y));
              if (item != null)               getTreeViewer().getTree().setSelection(new TreeItem[]{item});
              break;
            }
            includeCell=true;
          }
        }
      }
    }
  }
);
  tree.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      if (getSelection() instanceof StructuredSelection) {
        List list=new ArrayList();
        Object selectedObject=((StructuredSelection)getSelection()).getFirstElement();
        list.add(selectedObject);
        ReportRequest r=new ReportRequest();
        r.setType(ReportRequest.OPEN_EDITOR);
        r.setRequestConvert(new IRequestConvert(){
          public List convertSelectionToModelLisr(          List list){
            List lst=new ArrayList();
            for (Iterator itr=list.iterator(); itr.hasNext(); ) {
              Object obj=itr.next();
              lst.add(obj);
            }
            return lst;
          }
        }
);
        r.setSelectionObject(list);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
        try {
          Tree tree=(Tree)e.getSource();
          TreeItem[] selectedItems=tree.getSelection();
          if (selectedItems.length > 0) {
            if (selectedItems[0].getExpanded()) {
              selectedItems[0].setExpanded(false);
            }
 else {
              getTreeViewer().expandToLevel(selectedObject,selectedItems[0].getExpanded() ? 0 : 1);
            }
          }
        }
 catch (        Exception e2) {
        }
      }
    }
  }
);
  tree.addMouseTrackListener(new MouseTrackAdapter(){
    public void mouseHover(    MouseEvent event){
      Widget widget=event.widget;
      if (widget == tree) {
        Point pt=new Point(event.x,event.y);
        TreeItem item=tree.getItem(pt);
        if (item == null || item.getData() == null) {
          tree.setToolTipText(null);
        }
 else {
          tree.setToolTipText(getTooltip(item.getData()));
        }
      }
    }
  }
);
  SessionHandleAdapter.getInstance().getMediator(reportHandle).addColleague(getSelectionSynchronizer());
  if (backup != null) {
    backup.restoreBackup(getTreeViewer());
    getTreeViewer().getTree().addTreeListener(new TreeListener(){
      public void treeCollapsed(      TreeEvent e){
        Item item=(Item)e.item;
        backup.updateCollapsedStatus(getTreeViewer(),item.getData());
      }
      public void treeExpanded(      TreeEvent e){
        Item item=(Item)e.item;
        backup.updateExpandedStatus(getTreeViewer(),item.getData());
      }
    }
);
  }
}","/** 
 * Creates the SWT control for this page under the given parent control. <p> Clients should not call this method (the workbench calls this method when it needs to, which may be never). </p>
 * @param parent the parent control
 */
public void createControl(Composite parent){
  super.createControl(parent);
  createContextMenu();
  ViewsTreeProvider provider=new ViewsTreeProvider();
  getTreeViewer().setContentProvider(provider);
  getTreeViewer().setLabelProvider(provider);
  getSelectionSynchronizer().setTreeViewer(getTreeViewer());
  new RenameListener(getTreeViewer()).apply();
  getTreeViewer().setSorter(new ItemSorter());
  addDragAndDropListener();
  init(reportHandle);
  getTreeViewer().expandToLevel(2);
  final Tree tree=getTreeViewer().getTree();
  tree.addListener(SWT.PaintItem,new Listener(){
    public void handleEvent(    Event event){
      TreeItem item=(TreeItem)event.item;
      if (event.item.getData() instanceof CssStyleSheetHandle || event.item.getData() instanceof CssSharedStyleHandle) {
        Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
        if (!item.getForeground().equals(gray)) {
          item.setForeground(gray);
        }
      }
 else {
        Color black=ReportColorConstants.ReportForeground;
        if (!item.getForeground().equals(black)) {
          item.setForeground(black);
        }
      }
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if ((e.stateMask & SWT.CTRL) != 0 || (e.stateMask & SWT.SHIFT) != 0) {
        setSingleSelection(e);
      }
    }
    private void setSingleSelection(    MouseEvent e){
      IStructuredSelection selection=(IStructuredSelection)getSelection();
      if (!selection.isEmpty() && selection.size() > 1) {
        boolean includeCell=false;
        for (Iterator iterator=selection.iterator(); iterator.hasNext(); ) {
          Object obj=iterator.next();
          if (obj instanceof CellHandle) {
            if (includeCell) {
              TreeItem item=getTreeViewer().getTree().getItem(new Point(e.x,e.y));
              if (item != null)               getTreeViewer().getTree().setSelection(new TreeItem[]{item});
              break;
            }
            includeCell=true;
          }
        }
      }
    }
  }
);
  tree.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      if (getSelection() instanceof StructuredSelection) {
        List list=new ArrayList();
        Object selectedObject=((StructuredSelection)getSelection()).getFirstElement();
        list.add(selectedObject);
        ReportRequest r=new ReportRequest();
        r.setType(ReportRequest.OPEN_EDITOR);
        r.setRequestConvert(new IRequestConvert(){
          public List convertSelectionToModelLisr(          List list){
            List lst=new ArrayList();
            for (Iterator itr=list.iterator(); itr.hasNext(); ) {
              Object obj=itr.next();
              lst.add(obj);
            }
            return lst;
          }
        }
);
        r.setSelectionObject(list);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
        try {
          Tree tree=(Tree)e.getSource();
          TreeItem[] selectedItems=tree.getSelection();
          if (selectedItems.length > 0) {
            if (selectedItems[0].getExpanded()) {
              selectedItems[0].setExpanded(false);
            }
 else {
              getTreeViewer().expandToLevel(selectedObject,selectedItems[0].getExpanded() ? 0 : 1);
            }
          }
        }
 catch (        Exception e2) {
        }
      }
    }
  }
);
  tree.addMouseTrackListener(new MouseTrackAdapter(){
    public void mouseHover(    MouseEvent event){
      Widget widget=event.widget;
      if (widget == tree) {
        Point pt=new Point(event.x,event.y);
        TreeItem item=tree.getItem(pt);
        if (item == null || item.getData() == null) {
          tree.setToolTipText(null);
        }
 else {
          tree.setToolTipText(getTooltip(item.getData()));
        }
      }
    }
  }
);
  SessionHandleAdapter.getInstance().getMediator(reportHandle).addColleague(getSelectionSynchronizer());
  if (backup != null) {
    backup.restoreBackup(getTreeViewer());
    getTreeViewer().getTree().addTreeListener(new TreeListener(){
      public void treeCollapsed(      TreeEvent e){
        Item item=(Item)e.item;
        backup.updateCollapsedStatus(getTreeViewer(),item.getData());
      }
      public void treeExpanded(      TreeEvent e){
        Item item=(Item)e.item;
        backup.updateExpandedStatus(getTreeViewer(),item.getData());
      }
    }
);
  }
}",0.9917147351861564
72212,"public boolean performDrop(Object transfer,Object target,int operation,DNDLocation location){
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(""String_Node_Str"");
  TabularCubeHandle cube=(TabularCubeHandle)transfer;
  ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (cube.getModuleHandle() != moduleHandle && cube.getRoot() instanceof LibraryHandle) {
    try {
      UIUtil.includeLibrary(moduleHandle,(LibraryHandle)cube.getRoot());
      cube=(TabularCubeHandle)moduleHandle.getElementFactory().newElementFrom(cube,cube.getName());
      moduleHandle.getCubes().add(cube);
    }
 catch (    Exception e) {
      stack.rollback();
      return false;
    }
  }
  ExtendedItemHandle handle=null;
  String name=ReportPlugin.getDefault().getCustomName(ICrosstabConstants.CROSSTAB_EXTENSION_NAME);
  try {
    handle=CrosstabExtendedItemFactory.createCrosstabReportItem(SessionHandleAdapter.getInstance().getReportDesignHandle(),null,name);
  }
 catch (  Exception e) {
    stack.rollback();
    return false;
  }
  if (target instanceof EditPart) {
    EditPart editPart=(EditPart)target;
    if (editPart != null) {
      try {
        CreateRequest request=new CreateRequest();
        request.getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,handle);
        request.setLocation(location.getPoint());
        Command command=editPart.getCommand(request);
        if (command != null && command.canExecute()) {
          editPart.getViewer().getEditDomain().getCommandStack().execute(command);
          handle.setProperty(IReportItemModel.CUBE_PROP,cube);
          List dimensions=cube.getContents(CubeHandle.DIMENSIONS_PROP);
          for (Iterator iterator=dimensions.iterator(); iterator.hasNext(); ) {
            TabularDimensionHandle dimension=(TabularDimensionHandle)iterator.next();
            if (dimension.isTimeType()) {
              createDimensionViewHandle(handle,dimension,ICrosstabConstants.COLUMN_AXIS_TYPE);
            }
 else {
              createDimensionViewHandle(handle,dimension,ICrosstabConstants.ROW_AXIS_TYPE);
            }
          }
          List measureGroups=cube.getContents(CubeHandle.MEASURE_GROUPS_PROP);
          int index=0;
          for (Iterator iterator=measureGroups.iterator(); iterator.hasNext(); ) {
            MeasureGroupHandle measureGroup=(MeasureGroupHandle)iterator.next();
            List measures=measureGroup.getContents(MeasureGroupHandle.MEASURES_PROP);
            for (int j=0; j < measures.size(); j++) {
              Object temp=measures.get(j);
              if (temp instanceof MeasureHandle) {
                addMeasureHandle(handle,(MeasureHandle)temp,index++);
              }
            }
          }
          stack.commit();
          return true;
        }
      }
 catch (      Exception e) {
        stack.rollback();
        return false;
      }
    }
  }
  Map map=new HashMap();
  map.put(DesignerConstants.KEY_NEWOBJECT,handle);
  CreateCommand command=new CreateCommand(map);
  try {
    SlotHandle parentModel=getTargetSlotHandle(target,ICrosstabConstants.CROSSTAB_EXTENSION_NAME);
    if (parentModel != null) {
      command.setParent(parentModel);
    }
 else {
      command.setParent(SessionHandleAdapter.getInstance().getReportDesignHandle());
    }
    command.execute();
    handle.setProperty(IReportItemModel.CUBE_PROP,cube);
    List dimensions=cube.getContents(CubeHandle.DIMENSIONS_PROP);
    for (Iterator iterator=dimensions.iterator(); iterator.hasNext(); ) {
      TabularDimensionHandle dimension=(TabularDimensionHandle)iterator.next();
      if (dimension.isTimeType()) {
        createDimensionViewHandle(handle,dimension,ICrosstabConstants.COLUMN_AXIS_TYPE);
      }
 else {
        createDimensionViewHandle(handle,dimension,ICrosstabConstants.ROW_AXIS_TYPE);
      }
    }
    List measureGroups=cube.getContents(CubeHandle.MEASURE_GROUPS_PROP);
    int index=0;
    for (Iterator iterator=measureGroups.iterator(); iterator.hasNext(); ) {
      MeasureGroupHandle measureGroup=(MeasureGroupHandle)iterator.next();
      List measures=measureGroup.getContents(MeasureGroupHandle.MEASURES_PROP);
      for (int j=0; j < measures.size(); j++) {
        Object temp=measures.get(j);
        if (temp instanceof MeasureHandle) {
          addMeasureHandle(handle,(MeasureHandle)temp,index++);
        }
      }
    }
    stack.commit();
    if (target instanceof EditPart) {
      ((EditPart)target).getViewer().flush();
    }
    ReportRequest request=new ReportRequest();
    List selectionObjects=new ArrayList();
    selectionObjects.add(handle);
    request.setSelectionObject(selectionObjects);
    request.setType(ReportRequest.SELECTION);
    SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
    if (SessionHandleAdapter.getInstance().getReportDesignHandle() instanceof LibraryHandle) {
      HandleAdapterFactory.getInstance().getLibraryHandleAdapter().setCurrentEditorModel(handle,LibraryHandleAdapter.CREATE_ELEMENT);
    }
  }
 catch (  Exception e) {
    stack.rollback();
    return false;
  }
  return true;
}","public boolean performDrop(Object transfer,Object target,int operation,DNDLocation location){
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(""String_Node_Str"");
  TabularCubeHandle cube=(TabularCubeHandle)transfer;
  ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (cube.getModuleHandle() != moduleHandle && cube.getRoot() instanceof LibraryHandle) {
    try {
      UIUtil.includeLibrary(moduleHandle,(LibraryHandle)cube.getRoot());
      cube=(TabularCubeHandle)moduleHandle.getElementFactory().newElementFrom(cube,cube.getName());
      moduleHandle.getCubes().add(cube);
    }
 catch (    Exception e) {
      stack.rollback();
      return false;
    }
  }
  ExtendedItemHandle handle=null;
  String name=ReportPlugin.getDefault().getCustomName(ICrosstabConstants.CROSSTAB_EXTENSION_NAME);
  try {
    handle=CrosstabExtendedItemFactory.createCrosstabReportItem(SessionHandleAdapter.getInstance().getReportDesignHandle(),null,name);
  }
 catch (  Exception e) {
    stack.rollback();
    return false;
  }
  if (target instanceof EditPart) {
    EditPartViewer viewer=((EditPart)target).getViewer();
    EditPart editPart=(EditPart)target;
    if (editPart != null) {
      try {
        CreateRequest request=new CreateRequest();
        request.getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,handle);
        request.setLocation(location.getPoint());
        Command command=editPart.getCommand(request);
        if (command != null && command.canExecute()) {
          viewer.getEditDomain().getCommandStack().execute(command);
          handle.setProperty(IReportItemModel.CUBE_PROP,cube);
          List dimensions=cube.getContents(CubeHandle.DIMENSIONS_PROP);
          for (Iterator iterator=dimensions.iterator(); iterator.hasNext(); ) {
            TabularDimensionHandle dimension=(TabularDimensionHandle)iterator.next();
            if (dimension.isTimeType()) {
              createDimensionViewHandle(handle,dimension,ICrosstabConstants.COLUMN_AXIS_TYPE);
            }
 else {
              createDimensionViewHandle(handle,dimension,ICrosstabConstants.ROW_AXIS_TYPE);
            }
          }
          List measureGroups=cube.getContents(CubeHandle.MEASURE_GROUPS_PROP);
          int index=0;
          for (Iterator iterator=measureGroups.iterator(); iterator.hasNext(); ) {
            MeasureGroupHandle measureGroup=(MeasureGroupHandle)iterator.next();
            List measures=measureGroup.getContents(MeasureGroupHandle.MEASURES_PROP);
            for (int j=0; j < measures.size(); j++) {
              Object temp=measures.get(j);
              if (temp instanceof MeasureHandle) {
                addMeasureHandle(handle,(MeasureHandle)temp,index++);
              }
            }
          }
          stack.commit();
          viewer.flush();
          viewer.getControl().setFocus();
          ReportCreationTool.selectAddedObject(handle,viewer);
          return true;
        }
      }
 catch (      Exception e) {
        stack.rollback();
        return false;
      }
    }
  }
  Map map=new HashMap();
  map.put(DesignerConstants.KEY_NEWOBJECT,handle);
  CreateCommand command=new CreateCommand(map);
  try {
    SlotHandle parentModel=getTargetSlotHandle(target,ICrosstabConstants.CROSSTAB_EXTENSION_NAME);
    if (parentModel != null) {
      command.setParent(parentModel);
    }
 else {
      command.setParent(SessionHandleAdapter.getInstance().getReportDesignHandle());
    }
    command.execute();
    handle.setProperty(IReportItemModel.CUBE_PROP,cube);
    List dimensions=cube.getContents(CubeHandle.DIMENSIONS_PROP);
    for (Iterator iterator=dimensions.iterator(); iterator.hasNext(); ) {
      TabularDimensionHandle dimension=(TabularDimensionHandle)iterator.next();
      if (dimension.isTimeType()) {
        createDimensionViewHandle(handle,dimension,ICrosstabConstants.COLUMN_AXIS_TYPE);
      }
 else {
        createDimensionViewHandle(handle,dimension,ICrosstabConstants.ROW_AXIS_TYPE);
      }
    }
    List measureGroups=cube.getContents(CubeHandle.MEASURE_GROUPS_PROP);
    int index=0;
    for (Iterator iterator=measureGroups.iterator(); iterator.hasNext(); ) {
      MeasureGroupHandle measureGroup=(MeasureGroupHandle)iterator.next();
      List measures=measureGroup.getContents(MeasureGroupHandle.MEASURES_PROP);
      for (int j=0; j < measures.size(); j++) {
        Object temp=measures.get(j);
        if (temp instanceof MeasureHandle) {
          addMeasureHandle(handle,(MeasureHandle)temp,index++);
        }
      }
    }
    stack.commit();
    if (target instanceof EditPart) {
      ((EditPart)target).getViewer().flush();
    }
    ReportRequest request=new ReportRequest();
    List selectionObjects=new ArrayList();
    selectionObjects.add(handle);
    request.setSelectionObject(selectionObjects);
    request.setType(ReportRequest.SELECTION);
    SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
    if (SessionHandleAdapter.getInstance().getReportDesignHandle() instanceof LibraryHandle) {
      HandleAdapterFactory.getInstance().getLibraryHandleAdapter().setCurrentEditorModel(handle,LibraryHandleAdapter.CREATE_ELEMENT);
    }
  }
 catch (  Exception e) {
    stack.rollback();
    return false;
  }
  return true;
}",0.9804594414259842
72213,"protected void setToggleButtonEnabled(String buttonId,boolean isEnabled){
  String id=getNodePath() + buttonId;
  if (getContext().isEnabled(buttonId)) {
    getToggleButton(id).setEnabled(isEnabled);
  }
 else {
    getToggleButton(id).setEnabled(false);
  }
}","protected void setToggleButtonEnabled(String buttonId,boolean isEnabled){
  String id=getNodePath() + buttonId;
  if (getContext().isEnabled(id)) {
    getToggleButton(id).setEnabled(isEnabled);
  }
 else {
    getToggleButton(id).setEnabled(false);
  }
}",0.9844961240310076
72214,"protected DataSetDesign collectDataSetDesign(DataSetDesign design){
  if (getControl() == null || getControl().isDisposed() || m_sqbDialog == null)   return design;
  if (m_sqbDialog.isDirty()) {
    SQLQueryUtility.updateDataSetDesign(design,m_sqbDialog.getSQLQueryStatement(),getConnectionProfile(false,false));
    m_sqbDialog.setDirty(false);
  }
  return design;
}","protected DataSetDesign collectDataSetDesign(DataSetDesign design){
  if (getControl() == null || getControl().isDisposed() || m_sqbDialog == null)   return design;
  String name=this.getInitializationDesign().getName();
  if (m_sqbDialog.isDirty()) {
    SQLQueryUtility.updateDataSetDesign(design,m_sqbDialog.getSQLQueryStatement(),getConnectionProfile(false,false),name);
    m_sqbDialog.setDirty(false);
  }
  return design;
}",0.9236545682102628
72215,"static void updateDataSetDesign(DataSetDesign dataSetDesign,final QueryStatement queryStmt,IConnectionProfile connProfile){
  dataSetDesign.setQueryText(EMPTY_STRING);
  boolean wasProfileConnected=(connProfile.getConnectionState() == IConnectionProfile.CONNECTED_STATE);
  IConnection customConn=null;
  try {
    IDriver customDriver=new Driver();
    customConn=customDriver.getConnection(null);
    assert(customConn instanceof Connection);
    ((Connection)customConn).open(connProfile);
    updateQueryMetaData(dataSetDesign,customConn,queryStmt);
  }
 catch (  OdaException e) {
    e.printStackTrace();
    String queryText=dataSetDesign.getQueryText();
    if (queryText == null || queryText.length() == 0)     updateQueryText(dataSetDesign,queryStmt);
    dataSetDesign.setResultSets(null);
    dataSetDesign.setParameters(null);
  }
 finally {
    if (!wasProfileConnected)     closeConnection(customConn);
  }
}","static void updateDataSetDesign(DataSetDesign dataSetDesign,final QueryStatement queryStmt,IConnectionProfile connProfile,String dataSetName){
  if (dataSetName != null)   dataSetDesign.setName(dataSetName);
  dataSetDesign.setQueryText(EMPTY_STRING);
  boolean wasProfileConnected=(connProfile.getConnectionState() == IConnectionProfile.CONNECTED_STATE);
  IConnection customConn=null;
  try {
    IDriver customDriver=new Driver();
    customConn=customDriver.getConnection(null);
    assert(customConn instanceof Connection);
    ((Connection)customConn).open(connProfile);
    updateQueryMetaData(dataSetDesign,customConn,queryStmt);
  }
 catch (  OdaException e) {
    e.printStackTrace();
    String queryText=dataSetDesign.getQueryText();
    if (queryText == null || queryText.length() == 0)     updateQueryText(dataSetDesign,queryStmt);
    dataSetDesign.setResultSets(null);
    dataSetDesign.setParameters(null);
  }
 finally {
    if (!wasProfileConnected)     closeConnection(customConn);
  }
}",0.9564766839378238
72216,"/** 
 * @param queryDefn
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSourceDataSet(IQueryDefinition queryDefn,boolean keepDataSetFilter,boolean allowAggregation) throws AdapterException, BirtException {
  String dataSetName=queryDefn.getDataSetName();
  ModuleHandle module=sessionContext.getModuleHandle();
  if (module != null) {
    List l=module.getAllDataSets();
    DataSetHandle handle=null;
    for (int i=0; i < l.size(); i++) {
      if (((DataSetHandle)l.get(i)).getQualifiedName() != null && ((DataSetHandle)l.get(i)).getQualifiedName().equals(dataSetName)) {
        handle=(DataSetHandle)l.get(i);
      }
    }
    major=handle;
    defineDataSet(handle,keepDataSetFilter,allowAggregation);
  }
}","/** 
 * @param queryDefn
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSourceDataSet(IQueryDefinition queryDefn,boolean keepDataSetFilter,boolean allowAggregation) throws AdapterException, BirtException {
  String dataSetName=queryDefn.getDataSetName();
  ModuleHandle module=sessionContext.getModuleHandle();
  if (module != null) {
    List l=module.getAllDataSets();
    DataSetHandle handle=null;
    for (int i=0; i < l.size(); i++) {
      if (((DataSetHandle)l.get(i)).getQualifiedName() != null && ((DataSetHandle)l.get(i)).getQualifiedName().equals(dataSetName)) {
        handle=(DataSetHandle)l.get(i);
        break;
      }
    }
    major=handle;
    defineDataSet(handle,keepDataSetFilter,allowAggregation);
  }
}",0.9900596421471172
72217,"protected void handleDrop(){
  updateTargetRequest();
  updateTargetEditPart();
  if (DNDService.getInstance().performDrop(TemplateTransfer.getInstance().getTemplate(),getTargetEditPart(),DND.DROP_DEFAULT,new DNDLocation(getDropLocation()))) {
    return;
  }
  boolean isScalarparameter=false;
  boolean isResultSetColumn=false;
  boolean isEmbeddImage=false;
  final Object template=TemplateTransfer.getInstance().getTemplate();
  Assert.isNotNull(template);
  Assert.isTrue(handleValidateDrag(template));
  AbstractToolHandleExtends preHandle=null;
  String transName=null;
  if (template instanceof String) {
    PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
    if (template.toString().startsWith(IReportElementConstants.REPORT_ELEMENT_EXTENDED)) {
      String extensionName=template.toString().substring(IReportElementConstants.REPORT_ELEMENT_EXTENDED.length());
      for (int i=0; i < entries.length; i++) {
        if (entries[i].getItemName().equals(extensionName)) {
          try {
            CommandUtils.setVariable(""String_Node_Str"",getTargetEditPart());
            CommandUtils.setVariable(""String_Node_Str"",getTargetRequest());
            getCreateRequest().getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,entries[i].executeCreate());
            selectAddedObject();
            return;
          }
 catch (          Exception e) {
            ExceptionHandler.handle(e);
          }
        }
      }
    }
    transName=TRANS_LABEL_CREATE_ELEMENT;
    preHandle=BasePaletteFactory.getAbstractToolHandleExtendsFromPaletteName(template);
  }
 else   if (handleValidateInsert(template)) {
    transName=InsertInLayoutAction.DISPLAY_TEXT;
    Object objectType=getFactory(template).getObjectType();
    if (objectType instanceof DataSetHandle) {
      preHandle=new DataSetToolExtends();
    }
 else     if (objectType instanceof DataSetItemModel) {
      preHandle=new DataSetColumnToolExtends();
    }
 else     if (objectType instanceof ResultSetColumnHandle) {
      isResultSetColumn=true;
      preHandle=new DataSetColumnToolExtends();
    }
 else     if (objectType instanceof ScalarParameterHandle) {
      isScalarparameter=true;
      preHandle=new ParameterToolExtends();
    }
 else     if (objectType instanceof DimensionHandle) {
      preHandle=new DimensionHandleToolExtends();
    }
 else     if (objectType instanceof MeasureHandle) {
      preHandle=new MeasureHandleToolExtends();
    }
  }
 else   if (handleValidateLibrary(template)) {
    Object dragObj=getSingleTransferData(template);
    if (dragObj instanceof EmbeddedImageHandle) {
      isEmbeddImage=true;
      preHandle=new ImageToolExtends();
    }
 else     preHandle=new LibraryElementsToolHandleExtends((DesignElementHandle)dragObj);
  }
 else   if (handleValidateOutline(template)) {
    Object dragObj=getSingleTransferData(template);
    if (dragObj instanceof EmbeddedImageHandle) {
      isEmbeddImage=true;
      preHandle=new ImageToolExtends();
    }
  }
  if (preHandle != null) {
    CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
    stack.startTrans(transName);
    preHandle.setRequest(this.getCreateRequest());
    preHandle.setTargetEditPart(getTargetEditPart());
    if (isEmbeddImage) {
      Object dragObj=getSingleTransferData(template);
      if (dragObj instanceof EmbeddedImageHandle) {
        ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
        LibraryHandle library=(LibraryHandle)((EmbeddedImageHandle)dragObj).getElementHandle().getRoot();
        try {
          if (UIUtil.includeLibrary(moduleHandle,library)) {
            EmbeddedImage image=StructureFactory.newEmbeddedImageFrom((EmbeddedImageHandle)dragObj,moduleHandle);
            DNDUtil.addEmbeddedImageHandle(getTargetEditPart().getModel(),image);
          }
        }
 catch (        Exception e) {
          ExceptionHandler.handle(e);
        }
      }
    }
    Command command=this.getCommand();
    if (command != null && command.canExecute()) {
      if (!(preHandle.preHandleMouseUp())) {
        stack.rollback();
        return;
      }
    }
    boolean isTheme=checkTheme(preHandle,getSingleTransferData(template));
    if (!isTheme) {
      super.handleDrop();
      if (!preHandle.postHandleCreation()) {
        stack.rollback();
        return;
      }
      if (isScalarparameter || isResultSetColumn) {
        Request request=new Request(ReportRequest.CREATE_SCALARPARAMETER_OR_RESULTSETCOLUMN);
        selectAddedObject(request);
      }
 else       if (isEmbeddImage) {
        Object dragObj=getSingleTransferData(template);
        final Object model=getCreateRequest().getExtendedData().get(DesignerConstants.KEY_NEWOBJECT);
        try {
          ((ImageHandle)model).setImageName(((EmbeddedImageHandle)dragObj).getName());
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
        Request request=new Request(ReportRequest.SELECTION);
        selectAddedObject(request);
      }
 else       selectAddedObject();
    }
    stack.commit();
  }
}","protected void handleDrop(){
  updateTargetRequest();
  updateTargetEditPart();
  if (DNDService.getInstance().performDrop(TemplateTransfer.getInstance().getTemplate(),getTargetEditPart(),DND.DROP_DEFAULT,new DNDLocation(getDropLocation()))) {
    return;
  }
  boolean isScalarparameter=false;
  boolean isResultSetColumn=false;
  boolean isEmbeddImage=false;
  final Object template=TemplateTransfer.getInstance().getTemplate();
  Assert.isNotNull(template);
  Assert.isTrue(handleValidateDrag(template));
  AbstractToolHandleExtends preHandle=null;
  String transName=null;
  if (template instanceof String) {
    PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
    if (template.toString().startsWith(IReportElementConstants.REPORT_ELEMENT_EXTENDED)) {
      String extensionName=template.toString().substring(IReportElementConstants.REPORT_ELEMENT_EXTENDED.length());
      for (int i=0; i < entries.length; i++) {
        if (entries[i].getItemName().equals(extensionName)) {
          try {
            CommandUtils.setVariable(""String_Node_Str"",getTargetEditPart());
            CommandUtils.setVariable(""String_Node_Str"",getTargetRequest());
            getCreateRequest().getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,entries[i].executeCreate());
            selectAddedObject();
            return;
          }
 catch (          Exception e) {
            ExceptionHandler.handle(e);
          }
        }
      }
    }
    transName=TRANS_LABEL_CREATE_ELEMENT;
    preHandle=BasePaletteFactory.getAbstractToolHandleExtendsFromPaletteName(template);
  }
 else   if (handleValidateInsert(template)) {
    transName=InsertInLayoutAction.DISPLAY_TEXT;
    Object objectType=getFactory(template).getObjectType();
    if (objectType instanceof DataSetHandle) {
      preHandle=new DataSetToolExtends();
    }
 else     if (objectType instanceof DataSetItemModel) {
      preHandle=new DataSetColumnToolExtends();
    }
 else     if (objectType instanceof ResultSetColumnHandle) {
      isResultSetColumn=true;
      preHandle=new DataSetColumnToolExtends();
    }
 else     if (objectType instanceof ScalarParameterHandle) {
      isScalarparameter=true;
      preHandle=new ParameterToolExtends();
    }
 else     if (objectType instanceof DimensionHandle) {
      preHandle=new DimensionHandleToolExtends();
    }
 else     if (objectType instanceof MeasureHandle) {
      preHandle=new MeasureHandleToolExtends();
    }
  }
 else   if (handleValidateLibrary(template)) {
    Object dragObj=getSingleTransferData(template);
    if (dragObj instanceof EmbeddedImageHandle) {
      isEmbeddImage=true;
      preHandle=new ImageToolExtends();
    }
 else     preHandle=new LibraryElementsToolHandleExtends((DesignElementHandle)dragObj);
  }
 else   if (handleValidateOutline(template)) {
    Object dragObj=getSingleTransferData(template);
    if (dragObj instanceof EmbeddedImageHandle) {
      isEmbeddImage=true;
      preHandle=new ImageToolExtends();
    }
  }
  if (preHandle != null) {
    CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
    stack.startTrans(transName);
    preHandle.setRequest(this.getCreateRequest());
    preHandle.setTargetEditPart(getTargetEditPart());
    if (isEmbeddImage) {
      Object dragObj=getSingleTransferData(template);
      if (dragObj instanceof EmbeddedImageHandle) {
        if (((EmbeddedImageHandle)dragObj).getElementHandle().getRoot() instanceof LibraryHandle) {
          ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
          LibraryHandle library=(LibraryHandle)((EmbeddedImageHandle)dragObj).getElementHandle().getRoot();
          try {
            if (UIUtil.includeLibrary(moduleHandle,library)) {
              EmbeddedImage image=StructureFactory.newEmbeddedImageFrom((EmbeddedImageHandle)dragObj,moduleHandle);
              DNDUtil.addEmbeddedImageHandle(getTargetEditPart().getModel(),image);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.handle(e);
          }
        }
      }
    }
    Command command=this.getCommand();
    if (command != null && command.canExecute()) {
      if (!(preHandle.preHandleMouseUp())) {
        stack.rollback();
        return;
      }
    }
    boolean isTheme=checkTheme(preHandle,getSingleTransferData(template));
    if (!isTheme) {
      super.handleDrop();
      if (!preHandle.postHandleCreation()) {
        stack.rollback();
        return;
      }
      if (isScalarparameter || isResultSetColumn) {
        Request request=new Request(ReportRequest.CREATE_SCALARPARAMETER_OR_RESULTSETCOLUMN);
        selectAddedObject(request);
      }
 else       if (isEmbeddImage) {
        Object dragObj=getSingleTransferData(template);
        final Object model=getCreateRequest().getExtendedData().get(DesignerConstants.KEY_NEWOBJECT);
        try {
          ((ImageHandle)model).setImageName(((EmbeddedImageHandle)dragObj).getName());
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
        Request request=new Request(ReportRequest.SELECTION);
        selectAddedObject(request);
      }
 else       selectAddedObject();
    }
    stack.commit();
  }
}",0.9872807862786664
72218,"public void dataEngineShutdown(){
  Map<ConnectionProp,Set<CacheConnection>> odaConnectionsMap=DataSource.dataEngineLevelConnectionPool.get(this.session);
  if (odaConnectionsMap == null)   return;
  ConnectionProp connProp=new ConnectionProp(DataSource.this.driverName,DataSource.this.connectionProps,DataSource.this.appContext);
  Set<CacheConnection> odaConnections=odaConnectionsMap.get(connProp);
  if (odaConnections == null)   return;
  for (  CacheConnection conn : odaConnections) {
    try {
      conn.odaConn.close();
    }
 catch (    DataException e) {
      e.printStackTrace();
    }
  }
  DataSource.dataEngineLevelConnectionPool.remove(this.session);
}","public void dataEngineShutdown(){
  Map<ConnectionProp,Set<CacheConnection>> odaConnectionsMap=DataSource.dataEngineLevelConnectionPool.remove(this.session);
  if (odaConnectionsMap == null)   return;
  ConnectionProp connProp=new ConnectionProp(DataSource.this.driverName,DataSource.this.connectionProps,DataSource.this.appContext);
  Set<CacheConnection> odaConnections=odaConnectionsMap.get(connProp);
  if (odaConnections == null)   return;
  for (  CacheConnection conn : odaConnections) {
    try {
      conn.odaConn.close();
    }
 catch (    DataException e) {
      e.printStackTrace();
    }
  }
}",0.9420970266040688
72219,"protected Control createDialogArea(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.DIALOG_DATA_SET_FILTER);
  getShell().setText(Messages.getString(""String_Node_Str""));
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout gl=new GridLayout();
  composite.setLayout(gl);
  FormPage filterFormPage=new FormPage(composite,FormPage.FULL_FUNCTION,fFilterHandleProvider,true);
  filterFormPage.setLayoutData(new GridData(GridData.FILL_BOTH));
  List handleList=new ArrayList();
  handleList.add(fReportItemHandle);
  filterFormPage.setInput(handleList);
  return composite;
}","protected Control createDialogArea(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.DIALOG_DATA_SET_FILTER);
  getShell().setText(Messages.getString(""String_Node_Str""));
  Composite composite=(Composite)super.createDialogArea(parent);
  FormPage filterFormPage=new FormPage(composite,FormPage.FULL_FUNCTION,fFilterHandleProvider,true);
  filterFormPage.setLayoutData(new GridData(GridData.FILL_BOTH));
  List handleList=new ArrayList();
  handleList.add(fReportItemHandle);
  filterFormPage.setInput(handleList);
  return composite;
}",0.9478186484174508
72220,"/** 
 * Layouts widgets for Full UI type.
 */
protected void fullLayout(){
  FormLayout layout=new FormLayout();
  layout.marginHeight=WidgetUtil.SPACING;
  layout.marginWidth=WidgetUtil.SPACING;
  layout.spacing=WidgetUtil.SPACING;
  setLayout(layout);
  int btnWidth=60;
  int height=QUICK_BUTTON_HEIGHT - 2;
  FormData data=new FormData();
  data.right=new FormAttachment(100);
  data.top=new FormAttachment(0,height);
  data.width=Math.max(btnWidth,btnAdd.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  btnAdd.setLayoutData(data);
  data=new FormData();
  data.top=new FormAttachment(btnAdd,0,SWT.BOTTOM);
  data.left=new FormAttachment(btnAdd,0,SWT.LEFT);
  data.width=Math.max(btnWidth,btnEdit.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  btnEdit.setLayoutData(data);
  data=new FormData();
  data.top=new FormAttachment(btnEdit,0,SWT.BOTTOM);
  data.left=new FormAttachment(btnEdit,0,SWT.LEFT);
  data.width=Math.max(btnWidth,btnDel.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  btnDel.setLayoutData(data);
  data=new FormData();
  data.top=new FormAttachment(btnDel,0,SWT.BOTTOM);
  data.left=new FormAttachment(btnDel,0,SWT.LEFT);
  data.width=Math.max(btnWidth,btnUp.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  btnUp.setLayoutData(data);
  data=new FormData();
  data.top=new FormAttachment(btnUp,0,SWT.BOTTOM);
  data.left=new FormAttachment(btnUp,0,SWT.LEFT);
  data.width=Math.max(btnWidth,btnDown.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  btnDown.setLayoutData(data);
  data=new FormData();
  data.top=new FormAttachment(btnAdd,0,SWT.TOP);
  data.bottom=new FormAttachment(100);
  data.left=new FormAttachment(0,0);
  data.right=new FormAttachment(btnAdd,0,SWT.LEFT);
  table.setLayoutData(data);
}","/** 
 * Layouts widgets for Full UI type.
 */
protected void fullLayout(){
  FormLayout layout=new FormLayout();
  layout.marginHeight=WidgetUtil.SPACING;
  layout.marginWidth=WidgetUtil.SPACING;
  layout.spacing=WidgetUtil.SPACING;
  setLayout(layout);
  int maxWidth=0;
  int btnWidth=60;
  int height=QUICK_BUTTON_HEIGHT - 2;
  FormData data=new FormData();
  data.right=new FormAttachment(100);
  data.top=new FormAttachment(0,height);
  data.width=Math.max(btnWidth,btnAdd.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  maxWidth=maxWidth < data.width ? data.width : maxWidth;
  btnAdd.setLayoutData(data);
  data=new FormData();
  data.top=new FormAttachment(btnAdd,0,SWT.BOTTOM);
  data.left=new FormAttachment(btnAdd,0,SWT.LEFT);
  data.width=Math.max(btnWidth,btnEdit.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  maxWidth=maxWidth < data.width ? data.width : maxWidth;
  btnEdit.setLayoutData(data);
  data=new FormData();
  data.top=new FormAttachment(btnEdit,0,SWT.BOTTOM);
  data.left=new FormAttachment(btnEdit,0,SWT.LEFT);
  data.width=Math.max(btnWidth,btnDel.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  maxWidth=maxWidth < data.width ? data.width : maxWidth;
  btnDel.setLayoutData(data);
  data=new FormData();
  data.top=new FormAttachment(btnDel,0,SWT.BOTTOM);
  data.left=new FormAttachment(btnDel,0,SWT.LEFT);
  data.width=Math.max(btnWidth,btnUp.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  maxWidth=maxWidth < data.width ? data.width : maxWidth;
  btnUp.setLayoutData(data);
  data=new FormData();
  data.top=new FormAttachment(btnUp,0,SWT.BOTTOM);
  data.left=new FormAttachment(btnUp,0,SWT.LEFT);
  data.width=Math.max(btnWidth,btnDown.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  maxWidth=maxWidth < data.width ? data.width : maxWidth;
  btnDown.setLayoutData(data);
  int addWidth=((FormData)btnAdd.getLayoutData()).width;
  if (maxWidth > addWidth) {
    ((FormData)btnAdd.getLayoutData()).right=new FormAttachment(100,addWidth - maxWidth);
  }
  data=new FormData();
  data.top=new FormAttachment(btnAdd,0,SWT.TOP);
  data.bottom=new FormAttachment(100);
  data.left=new FormAttachment(0);
  data.right=new FormAttachment(btnAdd,0,SWT.LEFT);
  table.setLayoutData(data);
}",0.8127853881278538
72221,"/** 
 * @param paramBindingIt
 * @return
 */
private List convertParamterBindings(Iterator paramBindingIt){
  if (paramBindingIt == null)   return null;
  List parameterBindings=new ArrayList();
  while (paramBindingIt.hasNext()) {
    ParamBindingHandle paramBinding=(ParamBindingHandle)paramBindingIt.next();
    if (paramBinding.getExpression() != null) {
      ScriptExpression paramValueExpr=new ScriptExpression(paramBinding.getExpression());
      InputParameterBinding inputParamBinding=new InputParameterBinding(paramBinding.getParamName(),paramValueExpr);
      parameterBindings.add(inputParamBinding);
    }
  }
  return parameterBindings;
}","/** 
 * @param paramBindingIt
 * @return
 */
private List convertParamterBindings(Iterator paramBindingIt){
  if (paramBindingIt == null)   return null;
  List parameterBindings=new ArrayList();
  while (paramBindingIt.hasNext()) {
    Object paramObj=paramBindingIt.next();
    if (paramObj instanceof ParamBindingHandle) {
      ParamBindingHandle paramBinding=(ParamBindingHandle)paramObj;
      if (paramBinding.getExpression() != null) {
        ScriptExpression paramValueExpr=new ScriptExpression(paramBinding.getExpression());
        InputParameterBinding inputParamBinding=new InputParameterBinding(paramBinding.getParamName(),paramValueExpr);
        parameterBindings.add(inputParamBinding);
      }
    }
 else     if (paramObj instanceof OdaDataSetParameterHandle) {
      OdaDataSetParameterHandle paramBinding=(OdaDataSetParameterHandle)paramObj;
      if (paramBinding.getDefaultValue() != null) {
        ScriptExpression paramValueExpr=new ScriptExpression(paramBinding.getDefaultValue());
        InputParameterBinding inputParamBinding=new InputParameterBinding(paramBinding.getName(),paramValueExpr);
        parameterBindings.add(inputParamBinding);
      }
    }
  }
  return parameterBindings;
}",0.6534970635344367
72222,"/** 
 * Deletes existed problem markers and adds new markers
 * @throws CoreException
 */
protected void refreshMarkers(IEditorInput input) throws CoreException {
  IResource file=getFile(input);
  if (file != null) {
    file.deleteMarkers(IMarker.PROBLEM,true,IResource.DEPTH_INFINITE);
    ModuleHandle reportDesignHandle=getModel();
    if (reportDesignHandle == null) {
      return;
    }
    reportDesignHandle.checkReport();
    List list=reportDesignHandle.getErrorList();
    int errorListSize=list.size();
    list.addAll(reportDesignHandle.getWarningList());
    for (int i=0, m=list.size(); i < m; i++) {
      ErrorDetail errorDetail=(ErrorDetail)list.get(i);
      IMarker marker=file.createMarker(IMarker.PROBLEM);
      Map<String,Object> attrib=new HashMap<String,Object>();
      if (i < errorListSize) {
        attrib.put(IMarker.SEVERITY,IMarker.SEVERITY_ERROR);
      }
 else {
        attrib.put(IMarker.SEVERITY,IMarker.SEVERITY_WARNING);
      }
      attrib.put(IMarker.MESSAGE,errorDetail.getMessage());
      attrib.put(IMarker.LINE_NUMBER,errorDetail.getLineNo());
      attrib.put(IMarker.LOCATION,errorDetail.getTagName());
      if (errorDetail.getElement() != null && errorDetail.getElement().getID() != 0) {
        attrib.put(ELEMENT_ID,new Integer((int)errorDetail.getElement().getID()));
      }
      marker.setAttributes(attrib);
    }
  }
}","/** 
 * Deletes existed problem markers and adds new markers
 * @throws CoreException
 */
public void refreshMarkers(IEditorInput input) throws CoreException {
  IResource file=getFile(input);
  if (file != null) {
    file.deleteMarkers(IMarker.PROBLEM,true,IResource.DEPTH_INFINITE);
    ModuleHandle reportDesignHandle=getModel();
    if (reportDesignHandle == null) {
      return;
    }
    reportDesignHandle.checkReport();
    List list=reportDesignHandle.getErrorList();
    int errorListSize=list.size();
    list.addAll(reportDesignHandle.getWarningList());
    for (int i=0, m=list.size(); i < m; i++) {
      ErrorDetail errorDetail=(ErrorDetail)list.get(i);
      IMarker marker=file.createMarker(IMarker.PROBLEM);
      Map<String,Object> attrib=new HashMap<String,Object>();
      if (i < errorListSize) {
        attrib.put(IMarker.SEVERITY,IMarker.SEVERITY_ERROR);
      }
 else {
        attrib.put(IMarker.SEVERITY,IMarker.SEVERITY_WARNING);
      }
      attrib.put(IMarker.MESSAGE,errorDetail.getMessage());
      attrib.put(IMarker.LINE_NUMBER,errorDetail.getLineNo());
      attrib.put(IMarker.LOCATION,errorDetail.getTagName());
      if (errorDetail.getElement() != null && errorDetail.getElement().getID() != 0) {
        attrib.put(ELEMENT_ID,new Integer((int)errorDetail.getElement().getID()));
      }
      marker.setAttributes(attrib);
    }
  }
}",0.9960130482058716
72223,"public void testAddSecond() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2005,10,22);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(2006,10,5);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1795,10,15,10,10,9);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  Date[] values=new Date[]{d1,d2,d3};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}","public void testAddSecond() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2005,10,22);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(2006,10,5);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1995,10,15,10,10,9);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  Date[] values=new Date[]{d1,d2,d3};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}",0.9983221476510068
72224,"public void testAddWeek() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2005,10,22);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(2006,10,5);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1795,10,29);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  Date[] values=new Date[]{d1,d2,d3};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}","public void testAddWeek() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2005,10,22);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(2006,10,5);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1995,10,29);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  Date[] values=new Date[]{d1,d2,d3};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}",0.9982935153583616
72225,"public void testAddHour() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2005,10,22);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(2006,10,5);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1795,10,15,10,0,0);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1970,0,22,0,0,0);
  c.clear();
  Date[] values=new Date[]{d1,d2,d3,null};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}","public void testAddHour() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2005,10,22);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(2006,10,5);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1995,10,15,10,0,0);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1970,0,22,0,0,0);
  c.clear();
  Date[] values=new Date[]{d1,d2,d3,null};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}",0.998473282442748
72226,"public void testAddDay() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2005,10,22);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(2006,10,5);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1795,10,25);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  Date[] values=new Date[]{d1,d2,d3};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}","public void testAddDay() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2005,10,22);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(2006,10,5);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1995,10,25);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  Date[] values=new Date[]{d1,d2,d3};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}",0.9982905982905984
72227,"public void testAddMonth() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2006,8,15);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1795,10,15);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1901,0,15);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  Date[] values=new Date[]{d1,d2,d3};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}","public void testAddMonth() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2006,8,15);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1995,10,15);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1941,0,15);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  Date[] values=new Date[]{d1,d2,d3};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}",0.9965870307167236
72228,"public void testAddMinute() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2005,10,22);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(2006,10,5);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1795,10,15,10,10,0);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  Date[] values=new Date[]{d1,d2,d3};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}","public void testAddMinute() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2005,10,22);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(2006,10,5);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1995,10,15,10,10,0);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  Date[] values=new Date[]{d1,d2,d3};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}",0.9983221476510068
72229,"public void testAddQuarter() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2006,4,15);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1797,3,15);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1903,2,15);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  Date[] values=new Date[]{d1,d2,d3};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}","public void testAddQuarter() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2006,4,15);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1997,3,15);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1933,2,15);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  Date[] values=new Date[]{d1,d2,d3};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}",0.9965928449744464
72230,"protected void collectResponseState(){
  if (getControl() == null || getControl().isDisposed() || m_sqbDialog == null)   return;
  super.collectResponseState();
  SQLBuilderDesignState sqbState=m_sqbDialog.saveSQBState(getDataSetDesignName());
  if (sqbState == null)   return;
  String sqbStateContent=sqbState.toString();
  if (sqbStateContent.length() == 0)   return;
  DesignerState designerState=DesignFactory.eINSTANCE.createDesignerState();
  designerState.setNewStateContentAsString(sqbStateContent);
  designerState.setVersion(sqbState.getVersion());
  setResponseDesignerState(designerState);
}","protected void collectResponseState(){
  if (getControl() == null || getControl().isDisposed() || m_sqbDialog == null) {
    setResponseDesignerState(getInitializationDesignerState());
    return;
  }
  super.collectResponseState();
  SQLBuilderDesignState sqbState=m_sqbDialog.saveSQBState(getDataSetDesignName());
  if (sqbState == null)   return;
  String sqbStateContent=sqbState.toString();
  if (sqbStateContent.length() == 0)   return;
  DesignerState designerState=DesignFactory.eINSTANCE.createDesignerState();
  designerState.setNewStateContentAsString(sqbStateContent);
  designerState.setVersion(sqbState.getVersion());
  setResponseDesignerState(designerState);
}",0.9296875
72231,public void addArgument(IBaseExpression expr) throws DataException ;,"public void addArgument(String name,IBaseExpression expr) throws DataException ;",0.918918918918919
72232,"/** 
 * populate the extended extensions information.
 * @param name
 * @param aggrFunc
 * @param elem
 * @param aggrWrapper 
 */
private void populateExtendedAggrInfo(String name,IAggregation aggrFunc,IConfigurationElement elem,AggrFunctionWrapper aggrWrapper){
  IConfigurationElement[] uiInfo=elem.getChildren(ELEMENT_UIINFO);
  assert(uiInfo != null && uiInfo.length == 1);
  String paramInfo=uiInfo[0].getAttribute(ATTRIBUTE_PARAMETER_META_INFO);
  String textInfo=uiInfo[0].getAttribute(ATTRIBUTE_TEXT_DATA);
  aggrWrapper.setDisplayName(textInfo);
  List paramList=new ArrayList();
  String[] paramInfos=paramInfo.split(""String_Node_Str"");
  boolean[] paramFlags=aggrFunc.getParameterDefn();
  if (paramInfos != null && paramInfos.length > 0) {
    populateDataFiledParameterDefn(paramList);
    for (int k=0; k < paramInfos.length; k++) {
      final String s=paramInfos[k].trim();
      int index=s.indexOf(' ');
      String paramName=null;
      if (index > 0) {
        paramName=s.substring(index + 1).trim();
      }
 else {
        paramName=paramInfos[k];
      }
      if (k + 1 >= paramFlags.length) {
        break;
      }
      ParameterDefn paramDefn=new ParameterDefn(paramName,paramName,!paramFlags[k + 1],false);
      paramList.add(paramDefn);
    }
  }
  IParameterDefn[] params=new IParameterDefn[paramList.size()];
  paramList.toArray(params);
  aggrWrapper.setParameterDefn(params);
}","/** 
 * populate the extended extensions information.
 * @param name
 * @param aggrFunc
 * @param elem
 * @param aggrWrapper 
 */
private void populateExtendedAggrInfo(String name,IAggregation aggrFunc,IConfigurationElement elem,AggrFunctionWrapper aggrWrapper){
  IConfigurationElement[] uiInfo=elem.getChildren(ELEMENT_UIINFO);
  assert(uiInfo != null && uiInfo.length == 1);
  String paramInfo=uiInfo[0].getAttribute(ATTRIBUTE_PARAMETER_META_INFO);
  String textInfo=uiInfo[0].getAttribute(ATTRIBUTE_TEXT_DATA);
  aggrWrapper.setDisplayName(textInfo);
  List paramList=new ArrayList();
  String[] paramInfos=paramInfo.split(""String_Node_Str"");
  boolean[] paramFlags=aggrFunc.getParameterDefn();
  if (paramInfos != null && paramInfos.length > 0) {
    for (int k=0; k < paramInfos.length; k++) {
      final String s=paramInfos[k].trim();
      int index=s.indexOf(' ');
      String paramName=null;
      if (index > 0) {
        paramName=s.substring(index + 1).trim();
      }
 else {
        paramName=paramInfos[k];
      }
      ParameterDefn paramDefn=new ParameterDefn(paramName,paramName,!paramFlags[k],true);
      paramList.add(paramDefn);
    }
  }
  IParameterDefn[] params=new IParameterDefn[paramList.size()];
  paramList.toArray(params);
  aggrWrapper.setParameterDefn(params);
}",0.95539992628087
72233,"public Binding(String name,IBaseExpression expr){
  if (name == null || name.trim().equals(""String_Node_Str"")) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.name=name;
  this.expr=expr;
  this.aggregateOn=new ArrayList();
  this.argument=new ArrayList();
  if (expr != null)   this.dataType=expr.getDataType();
 else   this.dataType=DataType.ANY_TYPE;
}","public Binding(String name,IBaseExpression expr){
  this.name=name;
  this.expr=expr;
  this.aggregateOn=new ArrayList();
  this.argument=new LinkedHashMap();
  this.orderedArgument=new ArrayList();
  if (expr != null)   this.dataType=expr.getDataType();
 else   this.dataType=DataType.ANY_TYPE;
  this.exportable=true;
}",0.5057142857142857
72234,"public void addArgument(IBaseExpression expr){
  this.argument.add(expr);
}","public void addArgument(String name,IBaseExpression expr){
  this.argument.put(name,expr);
}",0.8622754491017964
72235,"public List getArguments(){
  return this.argument;
}","public List getArguments() throws DataException {
  if (this.aggrFunc == null)   return this.orderedArgument;
  if (this.orderedArgument.size() > 0)   return this.orderedArgument;
  IAggrFunction info=AggregationManager.getInstance().getAggregation(this.aggrFunc);
  if (info == null)   return this.orderedArgument;
  IParameterDefn[] parameters=info.getParameterDefn();
  if (parameters != null) {
    for (int i=0; i < parameters.length; i++) {
      IParameterDefn pInfo=parameters[i];
      if (this.argument.get(pInfo.getName()) != null) {
        orderedArgument.add(this.argument.get(pInfo.getName()));
      }
    }
  }
  return orderedArgument;
}",0.0875706214689265
72236,"protected void addColumBinding(IBaseQueryDefinition transfer,ComputedColumnHandle columnBinding) throws BirtException {
  String name=columnBinding.getName();
  String expr=columnBinding.getExpression();
  String type=columnBinding.getDataType();
  String displayName=columnBinding.getDisplayName();
  String aggregateOn=columnBinding.getAggregateOn();
  int dbType=ModelDteApiAdapter.toDteDataType(type);
  IBaseExpression dbExpr=null;
  if (expr != null) {
    dbExpr=new ScriptExpression(expr,dbType);
    if (aggregateOn != null) {
      dbExpr.setGroupName(aggregateOn);
    }
  }
  IBinding binding=new Binding(name,dbExpr);
  binding.setDisplayName(displayName);
  if (aggregateOn != null) {
    binding.addAggregateOn(aggregateOn);
  }
  if (columnBinding.getAggregateFunction() != null) {
    binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(columnBinding.getAggregateFunction()));
  }
  String filter=columnBinding.getFilterExpression();
  if (filter != null) {
    binding.setFilter(new ScriptExpression(filter));
  }
  Iterator arguments=columnBinding.argumentsIterator();
  if (arguments != null) {
    while (arguments.hasNext()) {
      AggregationArgumentHandle argumentHandle=(AggregationArgumentHandle)arguments.next();
      String argument=argumentHandle.getValue();
      if (argument != null) {
        binding.addArgument(new ScriptExpression(argument));
      }
    }
  }
  transfer.addBinding(binding);
}","protected void addColumBinding(IBaseQueryDefinition transfer,ComputedColumnHandle columnBinding) throws BirtException {
  String name=columnBinding.getName();
  String expr=columnBinding.getExpression();
  String type=columnBinding.getDataType();
  String displayName=columnBinding.getDisplayName();
  String aggregateOn=columnBinding.getAggregateOn();
  int dbType=ModelDteApiAdapter.toDteDataType(type);
  IBaseExpression dbExpr=null;
  if (expr != null) {
    dbExpr=new ScriptExpression(expr,dbType);
    if (aggregateOn != null) {
      dbExpr.setGroupName(aggregateOn);
    }
  }
  IBinding binding=new Binding(name,dbExpr);
  binding.setDisplayName(displayName);
  if (aggregateOn != null) {
    binding.addAggregateOn(aggregateOn);
  }
  if (columnBinding.getAggregateFunction() != null) {
    binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(columnBinding.getAggregateFunction()));
  }
  String filter=columnBinding.getFilterExpression();
  if (filter != null) {
    binding.setFilter(new ScriptExpression(filter));
  }
  Iterator arguments=columnBinding.argumentsIterator();
  if (arguments != null) {
    while (arguments.hasNext()) {
      AggregationArgumentHandle argumentHandle=(AggregationArgumentHandle)arguments.next();
      String argument=argumentHandle.getValue();
      if (argument != null) {
        binding.addArgument(argumentHandle.getName(),new ScriptExpression(argument));
      }
    }
  }
  transfer.addBinding(binding);
}",0.9914295509084676
72237,"/** 
 * Gets the support list of the given property handle. Note: this method returns all supported elements including invisible ones from UI. To get supported UI element list, check  {@link UIUtil#getUIElementSupportList()}
 * @param propertyHandle
 * @return
 */
public static List<IElementDefn> getElementSupportList(PropertyHandle propertyHandle){
  List<IElementDefn> list=new ArrayList<IElementDefn>();
  IPropertyDefn propertyDefn=propertyHandle.getPropertyDefn();
  if (propertyDefn != null) {
    list.addAll(propertyDefn.getAllowedElements(true));
    list.removeAll(notSupportList);
  }
  List<IElementDefn> availableList=new ArrayList<IElementDefn>();
  for (Iterator<IElementDefn> iterator=list.iterator(); iterator.hasNext(); ) {
    IElementDefn type=iterator.next();
    if (propertyHandle.canContain(type.getName())) {
      availableList.add(type);
    }
  }
  return availableList;
}","/** 
 * Gets the support list of the given property handle. Note: this method returns all supported elements including invisible ones from UI. To get supported UI element list, check   {@link UIUtil#getUIElementSupportList()}
 * @param propertyHandle
 * @return
 */
public static List<IElementDefn> getElementSupportList(PropertyHandle propertyHandle){
  List<IElementDefn> list=new ArrayList<IElementDefn>();
  IPropertyDefn propertyDefn=propertyHandle.getPropertyDefn();
  if (propertyDefn != null) {
    list.addAll(propertyDefn.getAllowedElements(true));
    list.removeAll(notSupportList);
  }
  List<IElementDefn> availableList=new ArrayList<IElementDefn>();
  for (Iterator<IElementDefn> iterator=list.iterator(); iterator.hasNext(); ) {
    IElementDefn type=iterator.next();
    if (propertyHandle.canContain(type.getName())) {
      availableList.add(type);
    }
  }
  return availableList;
}",0.9994459833795014
72238,"/** 
 * Converts an Integer value to an RGB object value, the Integer format is 0xRRGGBB.
 * @param rgbValue Integer value.
 * @return RGB value.
 */
public static RGB getRGBValue(int rgbValue){
  if (rgbValue == -1) {
    return null;
  }
  return new RGB((rgbValue >> 16) & 0xff,(rgbValue >> 8) & 0xff,rgbValue & 0xff);
}","/** 
 * Converts an Integer value to an RGB object value, the Integer format is xRRGGBB.
 * @param rgbValue Integer value.
 * @return RGB value.
 */
public static RGB getRGBValue(int rgbValue){
  if (rgbValue == -1) {
    return null;
  }
  return new RGB((rgbValue >> 16) & 0xff,(rgbValue >> 8) & 0xff,rgbValue & 0xff);
}",0.3565891472868217
72239,"/** 
 * Converts an RGB object value to an Integer value, the Integer format is 0xRRGGBB.
 * @param rgb RGB value.
 * @return Integer value.
 */
public static int getRGBInt(RGB rgb){
  if (rgb == null) {
    return -1;
  }
  return ((rgb.red & 0xff) << 16) | ((rgb.green & 0xff) << 8) | (rgb.blue & 0xff);
}","/** 
 * Converts an RGB object value to an Integer value, the Integer format is xRRGGBB.
 * @param rgb RGB value.
 * @return Integer value.
 */
public static int getRGBInt(RGB rgb){
  if (rgb == null) {
    return -1;
  }
  return ((rgb.red & 0xff) << 16) | ((rgb.green & 0xff) << 8) | (rgb.blue & 0xff);
}",0.99836867862969
72240,"public void start(BundleContext context) throws Exception {
  super.start(context);
  ReportPlugin.getDefault().addIgnoreViewID(LibraryExplorerView.ID);
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  ReportPlugin.getDefault().addIgnoreViewID(LibraryExplorerView.ID);
  Hashtable<String,Object> dict=new Hashtable<String,Object>();
  dict.put(Constants.SERVICE_RANKING,new Integer(3));
  syncService=context.registerService(IReportResourceSynchronizer.class.getName(),new IDEResourceSynchronizer(),dict);
}",0.5651376146788991
72241,"/** 
 * Deletes existed problem markers and adds new markers
 * @throws CoreException
 */
protected void refreshMarkers(IEditorInput input) throws CoreException {
  IResource file=getFile(input);
  if (file != null) {
    file.deleteMarkers(IMarker.PROBLEM,true,IResource.DEPTH_INFINITE);
    ModuleHandle reportDesignHandle=getModel();
    if (reportDesignHandle == null) {
      return;
    }
    reportDesignHandle.checkReport();
    List list=reportDesignHandle.getErrorList();
    int errorListSize=list.size();
    list.addAll(reportDesignHandle.getWarningList());
    for (int i=0, m=list.size(); i < m; i++) {
      ErrorDetail errorDetail=(ErrorDetail)list.get(i);
      IMarker marker=file.createMarker(IMarker.PROBLEM);
      if (i < errorListSize)       marker.setAttribute(IMarker.SEVERITY,IMarker.SEVERITY_ERROR);
 else       marker.setAttribute(IMarker.SEVERITY,IMarker.SEVERITY_WARNING);
      marker.setAttribute(IMarker.MESSAGE,errorDetail.getMessage());
      marker.setAttribute(IMarker.LINE_NUMBER,errorDetail.getLineNo());
      marker.setAttribute(IMarker.LOCATION,errorDetail.getTagName());
      if (errorDetail.getElement() != null && errorDetail.getElement().getID() != 0) {
        marker.setAttribute(ELEMENT_ID,new Integer((int)errorDetail.getElement().getID()));
      }
    }
  }
}","/** 
 * Deletes existed problem markers and adds new markers
 * @throws CoreException
 */
protected void refreshMarkers(IEditorInput input) throws CoreException {
  IResource file=getFile(input);
  if (file != null) {
    file.deleteMarkers(IMarker.PROBLEM,true,IResource.DEPTH_INFINITE);
    ModuleHandle reportDesignHandle=getModel();
    if (reportDesignHandle == null) {
      return;
    }
    reportDesignHandle.checkReport();
    List list=reportDesignHandle.getErrorList();
    int errorListSize=list.size();
    list.addAll(reportDesignHandle.getWarningList());
    for (int i=0, m=list.size(); i < m; i++) {
      ErrorDetail errorDetail=(ErrorDetail)list.get(i);
      IMarker marker=file.createMarker(IMarker.PROBLEM);
      Map<String,Object> attrib=new HashMap<String,Object>();
      if (i < errorListSize) {
        attrib.put(IMarker.SEVERITY,IMarker.SEVERITY_ERROR);
      }
 else {
        attrib.put(IMarker.SEVERITY,IMarker.SEVERITY_WARNING);
      }
      attrib.put(IMarker.MESSAGE,errorDetail.getMessage());
      attrib.put(IMarker.LINE_NUMBER,errorDetail.getLineNo());
      attrib.put(IMarker.LOCATION,errorDetail.getTagName());
      if (errorDetail.getElement() != null && errorDetail.getElement().getID() != 0) {
        attrib.put(ELEMENT_ID,new Integer((int)errorDetail.getElement().getID()));
      }
      marker.setAttributes(attrib);
    }
  }
}",0.8997772828507795
72242,"public boolean supportDataType(int dataType){
  for (int i=0; i < supportedDataTypes.length; i++) {
    if (supportedDataTypes[i] == DataType.ANY_TYPE || supportedDataTypes[i] == dataType) {
      return true;
    }
  }
  return false;
}","public boolean supportDataType(int dataType){
  if (dataType == DataType.ANY_TYPE || dataType == DataType.UNKNOWN_TYPE)   return true;
  for (int i=0; i < supportedDataTypes.length; i++) {
    if (supportedDataTypes[i] == dataType) {
      return true;
    }
  }
  return false;
}",0.6034816247582205
72243,"/** 
 * @param name
 * @param displayName
 * @param isOptional
 * @param isDataField
 * @param supportedDataTypes
 * @param description
 */
public ParameterDefn(String name,String displayName,boolean isOptional,boolean isDataField,int[] supportedDataTypes,String description){
  this.name=name;
  this.isOptional=isOptional;
  this.isDataField=isDataField;
  this.displayName=displayName;
  this.supportedDataTypes=supportedDataTypes;
  this.description=description;
}","/** 
 * @param name
 * @param displayName
 * @param isOptional
 * @param isDataField
 * @param supportedDataTypes
 * @param description
 */
public ParameterDefn(String name,String displayName,boolean isOptional,boolean isDataField,int[] supportedDataTypes,String description){
}",0.7453083109919572
72244,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.INTEGER_DOUBLE_DATE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.947845804988662
72245,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,true,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,true,true,SupportedDataTypes.ANY,""String_Node_Str"")};
}",0.96
72246,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),false,false,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),false,false,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.949438202247191
72247,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.ANY,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.9647058823529412
72248,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.INTEGER_DOUBLE_DATE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.947845804988662
72249,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.ANY,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.9647058823529412
72250,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),true,false,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),true,false,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),true,false,SupportedDataTypes.CALCULATABLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),true,false,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.945121951219512
72251,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.ANY,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.9647058823529412
72252,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.INTEGER_DOUBLE_DATE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),false,false,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),false,false,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.9428172942817294
72253,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),true,false,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),true,false,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.9492957746478872
72254,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,true,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,true,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.9585253456221198
72255,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),true,false,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),true,false,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.9492957746478872
72256,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.9587155963302753
72257,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.9587155963302753
72258,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.9587155963302753
72259,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.9587155963302753
72260,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),false,false,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),false,false,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.949438202247191
72261,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.ANY,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),false,false,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),false,false,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.9529243937232524
72262,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.9587155963302753
72263,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.9587155963302753
72264,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),true,false,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),true,false,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.9492957746478872
72265,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),true,false,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),true,false,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.9492957746478872
72266,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.ANY,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),true,false,SupportedDataTypes.ANY,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),true,false,SupportedDataTypes.ANY,""String_Node_Str"")};
}",0.9779086892488954
72267,"/** 
 * @throws BirtException
 */
public void testDefineDataSource() throws BirtException {
  ScriptExpression expr;
  IQueryDefinition queryDefn;
  expr=new ScriptExpression(""String_Node_Str"");
  queryDefn=getScriptQueryDefn(expr);
  try {
    IPreparedQuery preparedQuery=myDataEngine.prepare(queryDefn);
    IQueryResults queryResults=preparedQuery.execute(null);
    queryResults.getResultIterator();
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  expr=new ScriptExpression(""String_Node_Str"");
  queryDefn=getJDBCQueryDefn(expr);
  try {
    IPreparedQuery preparedQuery=myDataEngine.prepare(queryDefn);
    IQueryResults queryResults=preparedQuery.execute(null);
    queryResults.getResultIterator();
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
}","/** 
 * @throws BirtException
 */
public void testDefineDataSource() throws BirtException {
  ScriptExpression expr;
  IQueryDefinition queryDefn;
  expr=new ScriptExpression(""String_Node_Str"");
  queryDefn=getScriptQueryDefn(expr);
  try {
    IPreparedQuery preparedQuery=myDataEngine.prepare(queryDefn);
    IQueryResults queryResults=preparedQuery.execute(null);
    IResultIterator it=queryResults.getResultIterator();
    it.close();
    queryResults.close();
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
  expr=new ScriptExpression(""String_Node_Str"");
  queryDefn=getJDBCQueryDefn(expr);
  try {
    IPreparedQuery preparedQuery=myDataEngine.prepare(queryDefn);
    IQueryResults queryResults=preparedQuery.execute(null);
    IResultIterator it=queryResults.getResultIterator();
    it.close();
    queryResults.close();
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
}",0.8561236623067776
72268,"/** 
 * @param appContext
 * @throws DataException
 */
private void configureDataSetCache(Scriptable outerScope,IQueryDefinition querySpec,Map appContext,Scriptable scope) throws DataException {
  if (querySpec == null)   return;
  String queryResultID=querySpec.getQueryResultsID();
  if (queryResultID != null)   return;
  if (dataSetDesign == null)   return;
  if (!getDataSetCacheManager().needsToCache(dataSetDesign,appContext))   return;
  Collection parameterHints=null;
  IBaseDataSourceDesign dataSourceDesign=null;
  DataSourceRuntime dsRuntime=this.dataEngine.getDataSourceRuntime(dataSetDesign.getDataSourceName());
  if (dsRuntime != null) {
    dataSourceDesign=dsRuntime.getDesign();
    DataSetRuntime dataSet=DataSetRuntime.newInstance(dataSetDesign,null);
    parameterHints=new ParameterUtil(outerScope,dataSet,this.queryDefn,scope).resolveDataSetParameters(true);
  }
  getDataSetCacheManager().setDataSourceAndDataSet(dataSourceDesign,dataSetDesign,parameterHints,this.appContext);
}","/** 
 * @param appContext
 * @throws DataException
 */
private void configureDataSetCache(Scriptable outerScope,IQueryDefinition querySpec,Map appContext,Scriptable scope) throws DataException {
  if (querySpec == null)   return;
  String queryResultID=querySpec.getQueryResultsID();
  if (queryResultID != null)   return;
  if (dataSetDesign == null)   return;
  Collection parameterHints=null;
  IBaseDataSourceDesign dataSourceDesign=null;
  DataSourceRuntime dsRuntime=this.dataEngine.getDataSourceRuntime(dataSetDesign.getDataSourceName());
  if (dsRuntime != null) {
    dataSourceDesign=dsRuntime.getDesign();
    DataSetRuntime dataSet=DataSetRuntime.newInstance(dataSetDesign,null);
    parameterHints=new ParameterUtil(outerScope,dataSet,this.queryDefn,scope).resolveDataSetParameters(true);
  }
  getDataSetCacheManager().setDataSourceAndDataSet(dataSourceDesign,dataSetDesign,parameterHints,this.appContext);
}",0.9574247144340602
72269,"/** 
 * Update data set parameter name from latest data element attributes.
 * @param dataAttrs the latest data element attributes
 * @param setParam the data set parameter
 * @param params the iterator of data set parameters
 * @param retList list contain data set parameter
 */
private void updateROMDataSetParameterName(DataElementAttributes dataAttrs,OdaDataSetParameter setParam,List retList){
  if (dataAttrs == null)   return;
  String nativeName=dataAttrs.getName();
  String name=setParam.getName();
  if (StringUtil.isBlank(name)) {
    setParam.setName(nativeName);
  }
  setParam.setNativeName(nativeName);
}","/** 
 * Update data set parameter name from latest data element attributes.
 * @param dataAttrs the latest data element attributes
 * @param setParam the data set parameter
 * @param params the iterator of data set parameters
 * @param retList list contain data set parameter
 */
private void updateROMDataSetParameterName(DataElementAttributes dataAttrs,OdaDataSetParameter setParam,List retList){
  if (dataAttrs == null)   return;
  String nativeName=dataAttrs.getName();
  String name=setParam.getName();
  if (StringUtil.isBlank(name) || !name.equalsIgnoreCase(nativeName)) {
    setParam.setName(nativeName);
  }
  setParam.setNativeName(nativeName);
}",0.970266040688576
72270,"/** 
 * Tests the 'bidiTextDirection' style in TOC.
 * @throws Exception
 */
public void testTOC() throws Exception {
  openDesign(IN_FILE_NAME);
  LabelHandle label=designHandle.getElementFactory().newLabel(null);
  Object defaultDir=design.getProperty(design,ORIENTATION);
  testPropertyFromSelector(label,false,true);
  designHandle.getBody().add(label);
  testPropertyFromSelector(label,designHandle.isDirectionRTL(),true);
  label.setTocExpression(""String_Node_Str"");
  TOCHandle tocHandle=label.getTOC();
  CommandStack stack=designHandle.getCommandStack();
  stack.startTrans(null);
  StyleHandle style=designHandle.getElementFactory().newStyle(""String_Node_Str"");
  style.setTextDirection(LTR);
  designHandle.getStyles().add(style);
  tocHandle.setStyleName(style.getName());
  stack.commit();
  assertEquals(style.getTextDirection(),tocHandle.getTextDirection());
  stack.undo();
  designHandle.getStyles().add(style);
  tocHandle.setStyleName(style.getName());
  assertEquals(style.getTextDirection(),tocHandle.getTextDirection());
  stack.undo();
}","/** 
 * Tests the 'bidiTextDirection' style in TOC.
 * @throws Exception
 */
public void testTOC() throws Exception {
  openDesign(IN_FILE_NAME);
  LabelHandle label=designHandle.getElementFactory().newLabel(null);
  String defaultDir=designHandle.getStringProperty(ORIENTATION);
  testPropertyFromSelector(label,false,true);
  designHandle.getBody().add(label);
  testPropertyFromSelector(label,designHandle.isDirectionRTL(),true);
  label.setTocExpression(""String_Node_Str"");
  TOCHandle tocHandle=label.getTOC();
  CommandStack stack=designHandle.getCommandStack();
  stack.startTrans(null);
  StyleHandle style=designHandle.getElementFactory().newStyle(""String_Node_Str"");
  style.setTextDirection(LTR);
  designHandle.getStyles().add(style);
  tocHandle.setStyleName(style.getName());
  stack.commit();
  assertEquals(style.getTextDirection(),tocHandle.getTextDirection());
  stack.undo();
  designHandle.getStyles().add(style);
  tocHandle.setStyleName(style.getName());
  assertEquals(style.getTextDirection(),tocHandle.getTextDirection());
  stack.undo();
}",0.9816470588235294
72271,"/** 
 * Test highlight writer.
 * @throws Exception any exception during reading/writting the design file.
 */
public void testWriteHighlightRules() throws Exception {
  openDesign(IN_FILE_NAME_1);
  StyleHandle styleHandle=designHandle.findStyle(""String_Node_Str"");
  Iterator highlightHandles=styleHandle.highlightRulesIterator();
  assertNotNull(highlightHandles);
  HighlightRuleHandle highlightHandle=(HighlightRuleHandle)highlightHandles.next();
  try {
    highlightHandle.setTextDirection(""String_Node_Str"");
    fail();
  }
 catch (  PropertyValueException e) {
    assertEquals(e.getErrorCode(),PropertyValueException.DESIGN_EXCEPTION_CHOICE_NOT_FOUND);
  }
  highlightHandle.setTextDirection(LTR);
  highlightHandle=(HighlightRuleHandle)highlightHandles.next();
  assertNotNull(highlightHandle);
  highlightHandle.setTextDirection(RTL);
  assertEquals(RTL,highlightHandle.getTextDirection());
  save();
}","/** 
 * Test highlight writer.
 * @throws Exception any exception during reading/writting the design file.
 */
public void testWriteHighlightRules() throws Exception {
  openDesign(IN_FILE_NAME_1);
  StyleHandle styleHandle=designHandle.findStyle(""String_Node_Str"");
  Iterator highlightHandles=styleHandle.highlightRulesIterator();
  assertNotNull(highlightHandles);
  HighlightRuleHandle highlightHandle=(HighlightRuleHandle)highlightHandles.next();
  try {
    highlightHandle.setTextDirection(""String_Node_Str"");
    fail();
  }
 catch (  PropertyValueException e) {
    assertEquals(e.getErrorCode(),PropertyValueException.DESIGN_EXCEPTION_CHOICE_NOT_FOUND);
  }
  highlightHandle.setTextDirection(LTR);
  highlightHandle=(HighlightRuleHandle)highlightHandles.next();
  assertNotNull(highlightHandle);
  highlightHandle.setTextDirection(RTL);
  assertEquals(RTL,highlightHandle.getTextDirection());
  save();
  assertTrue(compareFile(GOLDEN_FILE_NAME_1));
}",0.974960042621204
72272,"public void init(IEditorSite site,IEditorInput input) throws PartInitException {
  super.init(site,input);
  try {
    reportXMLEditor=new StructuredTextEditor(){
      @Override public void doSave(      IProgressMonitor progressMonitor){
        super.doSave(progressMonitor);
        clearDirtyFlag();
      }
    }
;
    reportXMLEditor.init(site,input);
  }
 catch (  Exception e) {
  }
}","@Override public void init(IEditorSite site,IEditorInput input) throws PartInitException {
  IReportProvider provider=getProvider();
  if (provider != null) {
    setDocumentProvider(provider.getReportDocumentProvider(input));
  }
  super.init(site,input);
}",0.3230769230769231
72273,"public IParameterMetaData getParameterMetaData() throws OdaException {
  assertNotNull(callStat);
  if (this.cachedParameterMetaData != null)   return this.cachedParameterMetaData;
  int[] positionArray=paramUtil.getParameterPositions();
  List paramMetaList1=this.getCallableParamMetaData();
  List paramMetaList2=new ArrayList();
  int containsReturnValue=0;
  if (paramMetaList1.size() > 0 && paramUtil.containsReturnValue()) {
    if (((ParameterDefn)paramMetaList1.get(0)).getParamInOutType() == 5) {
      paramMetaList2.add(((ParameterDefn)paramMetaList1.get(0)));
      containsReturnValue++;
    }
  }
  for (int i=0; i < positionArray.length; i++) {
    int index=positionArray[i];
    if (paramMetaList1.size() >= index)     paramMetaList2.add(paramMetaList1.get(index - 1 + containsReturnValue));
 else     throw new OdaException(ResourceConstants.PREPARESTATEMENT_PARAMETER_METADATA_CANNOT_GET);
  }
  cachedParameterMetaData=new SPParameterMetaData(paramMetaList2);
  return cachedParameterMetaData;
}","public IParameterMetaData getParameterMetaData() throws OdaException {
  assertNotNull(callStat);
  if (this.cachedParameterMetaData != null)   return this.cachedParameterMetaData;
  int[] positionArray=paramUtil.getParameterPositions();
  List paramMetaList1=this.getCallableParamMetaData();
  List paramMetaList2=new ArrayList();
  int containsReturnValue=0;
  if (paramMetaList1.size() > 0) {
    if (((ParameterDefn)paramMetaList1.get(0)).getParamInOutType() == 5) {
      if (paramUtil.containsReturnValue())       paramMetaList2.add(((ParameterDefn)paramMetaList1.get(0)));
      containsReturnValue++;
    }
  }
  for (int i=0; i < positionArray.length; i++) {
    int index=positionArray[i];
    if (paramMetaList1.size() >= index)     paramMetaList2.add(paramMetaList1.get(index - 1 + containsReturnValue));
 else     throw new OdaException(ResourceConstants.PREPARESTATEMENT_PARAMETER_METADATA_CANNOT_GET);
  }
  cachedParameterMetaData=new SPParameterMetaData(paramMetaList2);
  return cachedParameterMetaData;
}",0.9617271835132484
72274,"public void documentChanged(DocumentEvent event){
  if (isTextListenerEnable) {
    markDirty();
  }
}","public void documentChanged(DocumentEvent event){
  if (isTextListenerEnable) {
    markDirty();
  }
  String text=getEditorText();
  boolean butEnabled=editorUIEnabled && text != null && text.length() > 0;
  butReset.setEnabled(butEnabled);
  butValidate.setEnabled(butEnabled);
}",0.5326370757180157
72275,"IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(MessageConstants.EXTENTION_ID_MISSING_ERROR,source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(dteSource);
  return dteSource;
}","IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(MessageConstants.EXTENTION_ID_MISSING_ERROR,source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0 && context.getDataEngine() instanceof DteDataEngine) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(dteSource);
  return dteSource;
}",0.9843656043295248
72276,"/** 
 * Creates a new DtE API Computed Column from a model computed column. Could return null if no expression is defined.
 * @throws EngineException
 */
IComputedColumn newComputedColumn(ComputedColumnHandle modelCmptdColumn) throws EngineException {
  if (modelCmptdColumn.getExpression() == null && modelCmptdColumn.getAggregateFunction() == null) {
    throw new EngineException(MessageConstants.MISSING_COMPUTED_COLUMN_EXPRESSION_EXCEPTION,modelCmptdColumn.getName());
  }
  List argumentList=new ArrayList();
  Iterator argumentIter=modelCmptdColumn.argumentsIterator();
  while (argumentIter.hasNext()) {
    argumentList.add(new ScriptExpression(((AggregationArgumentHandle)argumentIter.next()).getValue()));
  }
  return new ComputedColumn(modelCmptdColumn.getName(),modelCmptdColumn.getExpression(),toDteDataType(modelCmptdColumn.getDataType()),modelCmptdColumn.getAggregateFunction(),modelCmptdColumn.getFilterExpression() == null ? null : new ScriptExpression(modelCmptdColumn.getFilterExpression()),argumentList);
}","/** 
 * Creates a new DtE API Computed Column from a model computed column. Could return null if no expression is defined.
 * @throws EngineException
 */
IComputedColumn newComputedColumn(ComputedColumnHandle modelCmptdColumn) throws EngineException {
  if (modelCmptdColumn.getExpression() == null && modelCmptdColumn.getAggregateFunction() == null) {
    throw new EngineException(MessageConstants.MISSING_COMPUTED_COLUMN_EXPRESSION_EXCEPTION,modelCmptdColumn.getName());
  }
  Map argumentList=new HashMap();
  Iterator argumentIter=modelCmptdColumn.argumentsIterator();
  while (argumentIter.hasNext()) {
    AggregationArgumentHandle handle=(AggregationArgumentHandle)argumentIter.next();
    argumentList.put(handle.getName(),new ScriptExpression(handle.getValue()));
  }
  List orderedArgument=new ArrayList();
  try {
    if (modelCmptdColumn.getAggregateFunction() != null) {
      IAggrFunction info=AggregationManager.getInstance().getAggregation(modelCmptdColumn.getAggregateFunction());
      if (info != null) {
        IParameterDefn[] parameters=info.getParameterDefn();
        if (parameters != null) {
          for (int i=0; i < parameters.length; i++) {
            IParameterDefn pInfo=parameters[i];
            if (argumentList.get(pInfo.getName()) != null) {
              orderedArgument.add(argumentList.get(pInfo.getName()));
            }
          }
        }
      }
    }
  }
 catch (  DataException e) {
    throw new EngineException(e.getLocalizedMessage(),e);
  }
  return new ComputedColumn(modelCmptdColumn.getName(),modelCmptdColumn.getExpression(),toDteDataType(modelCmptdColumn.getDataType()),modelCmptdColumn.getAggregateFunction(),modelCmptdColumn.getFilterExpression() == null ? null : new ScriptExpression(modelCmptdColumn.getFilterExpression()),orderedArgument);
}",0.3926683115967571
72277,"IOdaDataSetDesign newOdaDataSet(OdaDataSetHandle modelDataSet,ExecutionContext context) throws BirtException {
  OdaDataSetDesign dteDataSet=new OdaDataSetDesign(modelDataSet.getQualifiedName());
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(modelDataSet,context);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(modelDataSet,dteDataSet);
  String queryTextBinding=modelDataSet.getPropertyBinding(OdaDataSet.QUERY_TEXT_PROP);
  if (needPropertyBinding() && queryTextBinding != null && queryTextBinding.length() > 0) {
    dteDataSet.setQueryText(evaluatePropertyBindingExpr(queryTextBinding));
  }
 else {
    dteDataSet.setQueryText(modelDataSet.getQueryText());
  }
  dteDataSet.setExtensionID(modelDataSet.getExtensionID());
  dteDataSet.setPrimaryResultSetName(modelDataSet.getResultSetName());
  Map staticProps=getExtensionProperties(modelDataSet,modelDataSet.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=modelDataSet.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=this.evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteDataSet.addPublicProperty((String)propName,propValue);
    }
  }
  Iterator elmtIter=modelDataSet.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteDataSet.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  return dteDataSet;
}","IOdaDataSetDesign newOdaDataSet(OdaDataSetHandle modelDataSet,ExecutionContext context) throws BirtException {
  OdaDataSetDesign dteDataSet=new OdaDataSetDesign(modelDataSet.getQualifiedName());
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(modelDataSet,context);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(modelDataSet,dteDataSet);
  String queryTextBinding=modelDataSet.getPropertyBinding(OdaDataSet.QUERY_TEXT_PROP);
  if (needPropertyBinding() && queryTextBinding != null && queryTextBinding.length() > 0 && context.getDataEngine() instanceof DteDataEngine) {
    dteDataSet.setQueryText(evaluatePropertyBindingExpr(queryTextBinding));
  }
 else {
    dteDataSet.setQueryText(modelDataSet.getQueryText());
  }
  dteDataSet.setExtensionID(modelDataSet.getExtensionID());
  dteDataSet.setPrimaryResultSetName(modelDataSet.getResultSetName());
  Map staticProps=getExtensionProperties(modelDataSet,modelDataSet.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=modelDataSet.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=this.evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteDataSet.addPublicProperty((String)propName,propValue);
    }
  }
  Iterator elmtIter=modelDataSet.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteDataSet.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  return dteDataSet;
}",0.9864016736401674
72278,"private void simulateItalic(PdfContentByte cb,float x,float y){
  float alpha=(float)Math.tan(0f * Math.PI / 180);
  float beta=EmitterUtil.getItalicHorizontalCoefficient();
  cb.setTextMatrix(1,alpha,beta,1,x,y);
}","private void simulateItalic(PdfContentByte cb,float x,float y){
  float beta=EmitterUtil.ITALIC_HORIZONTAL_COEFFICIENT;
  cb.setTextMatrix(1,0,beta,1,x,y);
}",0.6989247311827957
72279,"public void drawString(String str,float x,float y,FontInfo fontInfo,float letterSpacing,float wordSpacing,Color color,boolean linethrough,boolean overline,boolean underline,CSSValue align){
  y=transformY(y);
  String text=str;
  if (fontInfo != null) {
    BaseFont baseFont=fontInfo.getBaseFont();
    String fontName=baseFont.getPostscriptFontName();
    text=applyFont(fontName,fontInfo.getFontStyle(),fontInfo.getFontSize(),text);
  }
  color=color == null ? Color.black : color;
  outputColor(color);
  out.print(x + ""String_Node_Str"" + y+ ""String_Node_Str"");
  out.print(wordSpacing + ""String_Node_Str"" + letterSpacing+ ""String_Node_Str"");
  out.println(text + ""String_Node_Str"");
}","public void drawString(String str,float x,float y,FontInfo fontInfo,float letterSpacing,float wordSpacing,Color color,boolean linethrough,boolean overline,boolean underline,CSSValue align){
  y=transformY(y);
  String text=str;
  String drawCommand=""String_Node_Str"";
  boolean needSimulateItalic=false;
  if (fontInfo != null) {
    float fontSize=fontInfo.getFontSize();
    int fontStyle=fontInfo.getFontStyle();
    if (fontInfo.getSimulation()) {
      if (fontStyle == Font.BOLD || fontStyle == Font.BOLDITALIC) {
        float offset=(float)(fontSize * Math.log10(fontSize) / 100);
        drawCommand=offset + ""String_Node_Str"";
      }
      if (fontStyle == Font.ITALIC || fontStyle == Font.BOLDITALIC) {
        needSimulateItalic=true;
      }
    }
    BaseFont baseFont=fontInfo.getBaseFont();
    String fontName=baseFont.getPostscriptFontName();
    text=applyFont(fontName,fontStyle,fontSize,text);
  }
  color=color == null ? Color.black : color;
  outputColor(color);
  out.print(x + ""String_Node_Str"" + y+ ""String_Node_Str"");
  out.print(wordSpacing + ""String_Node_Str"" + letterSpacing+ ""String_Node_Str"");
  out.println(text + ""String_Node_Str"" + needSimulateItalic+ ""String_Node_Str""+ drawCommand);
}",0.6917844060701204
72280,"/** 
 * @param parent
 * @return
 */
public static ClassLoader getCustomScriptClassLoader(ClassLoader parent){
  String classPath=System.getProperty(""String_Node_Str"");
  if (classPath == null || classPath.length() == 0)   return parent;
  String[] classPathArray=classPath.split(File.pathSeparator,-1);
  int count=classPathArray.length;
  URL[] urls=new URL[count];
  for (int i=0; i < count; i++) {
    File file=new File(classPathArray[i]);
    try {
      urls[i]=file.toURL();
    }
 catch (    MalformedURLException e) {
      urls[i]=null;
    }
  }
  return new URLClassLoader(urls,parent);
}","/** 
 * @param parent
 * @return
 */
public static ClassLoader getCustomScriptClassLoader(ClassLoader parent){
  List<URL> urls=getClassPathURLs();
  if (urls.size() == 0)   return parent;
  return new URLClassLoader(urls.toArray(new URL[0]),parent);
}",0.3094958968347011
72281,"public IQueryResults executeQuery(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt) throws BirtException {
  return new QueryExecutionHelper(this.dataEngine,this.modelAdaptor,this.sessionContext).executeQuery(queryDefn,paramBindingIt,filterIt,bindingIt);
}","public IQueryResults executeQuery(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt) throws BirtException {
  return new QueryExecutionHelper(this.dataEngine,this.modelAdaptor,this.sessionContext).executeQuery(queryDefn,paramBindingIt,filterIt,bindingIt,this.sessionContext.getTopScope());
}",0.9455128205128204
72282,"IQueryResults executeQuery(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt,boolean keepDataSetFilter,boolean disAllowAggregation) throws BirtException {
  defineDataSourceDataSet(queryDefn,keepDataSetFilter,disAllowAggregation);
  populateQueryDefn(queryDefn,paramBindingIt,filterIt,bindingIt,disAllowAggregation);
  return dataEngine.prepare(queryDefn,sessionContext.getAppContext()).execute(null);
}","IQueryResults executeQuery(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt,boolean keepDataSetFilter,boolean disAllowAggregation,Scriptable scope) throws BirtException {
  defineDataSourceDataSet(queryDefn,keepDataSetFilter,disAllowAggregation);
  populateQueryDefn(queryDefn,paramBindingIt,filterIt,bindingIt,disAllowAggregation);
  return dataEngine.prepare(queryDefn,sessionContext.getAppContext()).execute(scope);
}",0.9711111111111111
72283,"private int getActualPageBodySize(PageArea page,int direction){
  int pref=0;
  IContainerArea body=page.getBody();
  if (body == null) {
    return 0;
  }
  Iterator iter=page.getBody().getChildren();
  while (iter.hasNext()) {
    AbstractArea area=(AbstractArea)iter.next();
    if (direction == BODY_HEIGHT) {
      pref=Math.max(pref,area.getAllocatedHeight());
    }
 else {
      pref=Math.max(pref,area.getAllocatedWidth());
    }
  }
  return pref;
}","private int getActualPageBodySize(PageArea page,int direction){
  int pref=0;
  IContainerArea body=page.getBody();
  if (body == null) {
    return 0;
  }
  Iterator iter=page.getBody().getChildren();
  while (iter.hasNext()) {
    AbstractArea area=(AbstractArea)iter.next();
    if (direction == BODY_HEIGHT) {
      pref=Math.max(pref,area.getAllocatedY() + area.getAllocatedHeight());
    }
 else {
      pref=Math.max(pref,area.getAllocatedY() + area.getAllocatedWidth());
    }
  }
  return pref;
}",0.9522821576763484
72284,"public void render() throws Exception {
  setupRenderOption();
  IContentEmitter emitter=createContentEmitter();
  String format=executionContext.getOutputFormat();
  IReportExecutor executor=new ReportletExecutor(executionContext,offset);
  executor=new SuppressDuplciateReportExecutor(executor);
  executor=new LocalizedReportExecutor(executionContext,executor);
  executionContext.setExecutor(executor);
  initializeContentEmitter(emitter,executor);
  IReportLayoutEngine layoutEngine=createReportLayoutEngine(pagination,renderOptions);
  layoutEngine.setLocale(executionContext.getLocale());
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
    layoutEngine.setPageHandler(handle);
    CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
    outputEmitters.addEmitter(emitter);
    outputEmitters.addEmitter(handle.getEmitter());
    emitter=outputEmitters;
  }
  startRender();
  IReportContent report=executor.execute();
  emitter.start(report);
  layoutEngine.layout(executor,report,emitter,false);
  layoutEngine.close();
  emitter.end(report);
  closeRender();
  executor.close();
  pageCount=layoutEngine.getPageCount();
}","public void render() throws Exception {
  setupRenderOption();
  IContentEmitter emitter=createContentEmitter();
  String format=executionContext.getOutputFormat();
  IReportExecutor executor=new ReportletExecutor(executionContext,offset);
  executor=new SuppressDuplciateReportExecutor(executor);
  executor=new LocalizedReportExecutor(executionContext,executor);
  executionContext.setExecutor(executor);
  initializeContentEmitter(emitter,executor);
  IReportLayoutEngine layoutEngine=createReportLayoutEngine(pagination,renderOptions);
  layoutEngine.setLocale(executionContext.getLocale());
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
    layoutEngine.setPageHandler(handle);
    CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
    outputEmitters.addEmitter(new PDFLayoutEmitter(emitter,renderOptions,executionContext.getLocale(),totalPage));
    outputEmitters.addEmitter(handle.getEmitter());
    emitter=outputEmitters;
  }
  startRender();
  IReportContent report=executor.execute();
  emitter.start(report);
  layoutEngine.layout(executor,report,emitter,false);
  layoutEngine.close();
  emitter.end(report);
  closeRender();
  executor.close();
  pageCount=layoutEngine.getPageCount();
}",0.9658086822896658
72285,"public void writeAlignment(String horizontal,String vertical,String direction,boolean wrapText){
  writer.openTag(""String_Node_Str"");
  if (isValid(horizontal)) {
    writer.attribute(""String_Node_Str"",horizontal);
  }
  if (isValid(vertical)) {
    writer.attribute(""String_Node_Str"",vertical);
  }
  if (isValid(direction)) {
    if (BIRTConstants.BIRT_RTL_VALUE.equals(direction))     writer.attribute(""String_Node_Str"",""String_Node_Str"");
 else     writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (wrapText) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.closeTag(""String_Node_Str"");
}","public void writeAlignment(String horizontal,String vertical,String direction,boolean wrapText){
  writer.openTag(""String_Node_Str"");
  if (isValid(horizontal)) {
    writer.attribute(""String_Node_Str"",horizontal);
  }
  if (isValid(vertical)) {
    writer.attribute(""String_Node_Str"",vertical);
  }
  if (isValid(direction)) {
    if (CSSConstants.CSS_RTL_VALUE.equals(direction))     writer.attribute(""String_Node_Str"",""String_Node_Str"");
 else     writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (wrapText) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.closeTag(""String_Node_Str"");
}",0.9746434231378764
72286,"protected void initialize(){
  createRoot();
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  maxAvaHeight=parent.getCurrentMaxContentHeight();
  root.setWidth(parent.getCurrentMaxContentWidth());
  lineHeight=((BlockStackingLayout)parent).getLineHeight();
  if (parent.content != null) {
    if (BIRTConstants.BIRT_RTL_VALUE.equals(parent.content.getComputedStyle().getDirection()))     baseLevel=Bidi.DIRECTION_RIGHT_TO_LEFT;
  }
}","protected void initialize(){
  createRoot();
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  maxAvaHeight=parent.getCurrentMaxContentHeight();
  root.setWidth(parent.getCurrentMaxContentWidth());
  lineHeight=((BlockStackingLayout)parent).getLineHeight();
  if (parent.content != null) {
    if (CSSConstants.CSS_RTL_VALUE.equals(parent.content.getComputedStyle().getDirection()))     baseLevel=Bidi.DIRECTION_RIGHT_TO_LEFT;
  }
}",0.9839080459770116
72287,"public ChunkGenerator(FontMappingManager fontManager,ITextContent textContent,boolean bidiProcessing,boolean fontSubstitution){
  this.fontManager=fontManager;
  this.textContent=textContent;
  this.text=textContent.getText();
  this.bidiProcessing=bidiProcessing;
  this.fontSubstitution=fontSubstitution;
  if (text == null || text.length() == 0)   return;
  if (bidiProcessing) {
    if (BIRTConstants.BIRT_RTL_VALUE.equals(textContent.getComputedStyle().getDirection())) {
      bidiSplitter=new BidiSplitter(new Chunk(text,0,Bidi.DIRECTION_RIGHT_TO_LEFT,Bidi.DIRECTION_RIGHT_TO_LEFT));
    }
 else {
      bidiSplitter=new BidiSplitter(new Chunk(text,0,Bidi.DIRECTION_LEFT_TO_RIGHT,Bidi.DIRECTION_LEFT_TO_RIGHT));
    }
  }
  if (null == bidiSplitter) {
    fontSplitter=new FontSplitter(fontManager,new Chunk(text),textContent,fontSubstitution);
  }
 else {
    if (bidiSplitter.hasMore()) {
      fontSplitter=new FontSplitter(fontManager,bidiSplitter.getNext(),textContent,fontSubstitution);
    }
  }
}","public ChunkGenerator(FontMappingManager fontManager,ITextContent textContent,boolean bidiProcessing,boolean fontSubstitution){
  this.fontManager=fontManager;
  this.textContent=textContent;
  this.text=textContent.getText();
  this.bidiProcessing=bidiProcessing;
  this.fontSubstitution=fontSubstitution;
  if (text == null || text.length() == 0)   return;
  if (bidiProcessing) {
    if (CSSConstants.CSS_RTL_VALUE.equals(textContent.getComputedStyle().getDirection())) {
      bidiSplitter=new BidiSplitter(new Chunk(text,0,Bidi.DIRECTION_RIGHT_TO_LEFT,Bidi.DIRECTION_RIGHT_TO_LEFT));
    }
 else {
      bidiSplitter=new BidiSplitter(new Chunk(text,0,Bidi.DIRECTION_LEFT_TO_RIGHT,Bidi.DIRECTION_LEFT_TO_RIGHT));
    }
  }
  if (null == bidiSplitter) {
    fontSplitter=new FontSplitter(fontManager,new Chunk(text),textContent,fontSubstitution);
  }
 else {
    if (bidiSplitter.hasMore()) {
      fontSplitter=new FontSplitter(fontManager,bidiSplitter.getNext(),textContent,fontSubstitution);
    }
  }
}",0.9831683168316832
72288,"private int getActualPageBodyHeight(PageArea page){
  int prefHeight=0;
  Iterator iter=page.getBody().getChildren();
  while (iter.hasNext()) {
    AbstractArea area=(AbstractArea)iter.next();
    prefHeight=Math.max(prefHeight,area.getAllocatedHeight());
  }
  return prefHeight;
}","private int getActualPageBodyHeight(PageArea page){
  return getActualPageBodySize(page,BODY_HEIGHT);
}",0.3471502590673575
72289,"/** 
 * Creates a page in given output format.
 * @param page	a layout page.
 */
protected void addPage(PageArea page){
  newPage(page);
  currentX=0;
  currentY=0;
  startContainer(page.getRoot());
  visitContainer(page.getHeader());
  visitContainer(page.getFooter());
  startContainer(page.getBody());
  enterBody();
  visitChildren(page.getBody());
  exitBody();
  endContainer(page.getBody());
  endContainer(page.getRoot());
  endContainer(page);
}","/** 
 * Creates a page in given output format.
 * @param page	a layout page.
 */
protected void addPage(PageArea page){
  newPage(page);
  currentX=0;
  currentY=0;
  IContainerArea pageRoot=page.getRoot();
  if (pageRoot != null) {
    startContainer(page.getRoot());
    IContainerArea pageHeader=page.getHeader();
    if (pageHeader != null) {
      visitContainer(pageHeader);
    }
    IContainerArea pageFooter=page.getFooter();
    if (pageFooter != null) {
      visitContainer(pageFooter);
    }
    IContainerArea pageBody=page.getBody();
    if (pageBody != null) {
      startContainer(pageBody);
      enterBody();
      visitChildren(pageBody);
      exitBody();
      endContainer(pageBody);
    }
    endContainer(page.getRoot());
  }
  endContainer(page);
}",0.4657980456026058
72290,"/** 
 * Output a layout PageArea, extend the pageArea into multiple physical pages if needed.
 * @param page
 */
protected void visitPage(PageArea page){
  scale=page.getScale();
  if (page.isExtendToMultiplePages()) {
    int pageBodyHeight=getActualPageBodyHeight(page);
    int pageBodyWidth=getActualPageBodyWidth(page);
    int definedBodyHeight=page.getBody().getHeight();
    int definedBodyWidth=page.getBody().getWidth();
    if (pageBodyHeight > definedBodyHeight) {
      addExtendDirection(EXTEND_ON_VERTICAL);
    }
    if (pageBodyWidth > definedBodyWidth) {
      addExtendDirection(EXTEND_ON_HORIZONTAL);
    }
    offsetX=0;
    offsetY=0;
    if (extendDirection == EXTEND_NONE) {
      addPage(page);
    }
 else     if (extendDirection == EXTEND_ON_HORIZONTAL) {
      do {
        addPage(page);
        offsetX+=definedBodyWidth;
      }
 while (offsetX < pageBodyWidth - ignoredOverflow);
    }
 else     if (extendDirection == EXTEND_ON_VERTICAL) {
      do {
        addPage(page);
        offsetY+=definedBodyHeight;
      }
 while (offsetY < pageBodyHeight - ignoredOverflow);
    }
 else     if (extendDirection == EXTEND_ON_HORIZONTAL_AND_VERTICAL) {
      do {
        do {
          addPage(page);
          offsetX+=definedBodyWidth;
        }
 while (offsetX < pageBodyWidth - ignoredOverflow);
        offsetX=0;
        offsetY+=definedBodyHeight;
      }
 while (offsetY < pageBodyHeight - ignoredOverflow);
    }
    setExtendDirection(EXTEND_NONE);
  }
 else {
    addPage(page);
  }
}","/** 
 * Output a layout PageArea, extend the pageArea into multiple physical pages if needed.
 * @param page
 */
protected void visitPage(PageArea page){
  scale=page.getScale();
  if (page.isExtendToMultiplePages()) {
    int pageBodyHeight=getActualPageBodyHeight(page);
    int pageBodyWidth=getActualPageBodyWidth(page);
    IContainerArea pageBody=page.getBody();
    int definedBodyHeight=0;
    int definedBodyWidth=0;
    if (pageBody != null) {
      definedBodyHeight=pageBody.getHeight();
      definedBodyWidth=pageBody.getWidth();
    }
    if (pageBodyHeight > definedBodyHeight) {
      addExtendDirection(EXTEND_ON_VERTICAL);
    }
    if (pageBodyWidth > definedBodyWidth) {
      addExtendDirection(EXTEND_ON_HORIZONTAL);
    }
    offsetX=0;
    offsetY=0;
    if (extendDirection == EXTEND_NONE) {
      addPage(page);
    }
 else     if (extendDirection == EXTEND_ON_HORIZONTAL) {
      do {
        addPage(page);
        offsetX+=definedBodyWidth;
      }
 while (offsetX < pageBodyWidth - ignoredOverflow);
    }
 else     if (extendDirection == EXTEND_ON_VERTICAL) {
      do {
        addPage(page);
        offsetY+=definedBodyHeight;
      }
 while (offsetY < pageBodyHeight - ignoredOverflow);
    }
 else     if (extendDirection == EXTEND_ON_HORIZONTAL_AND_VERTICAL) {
      do {
        do {
          addPage(page);
          offsetX+=definedBodyWidth;
        }
 while (offsetX < pageBodyWidth - ignoredOverflow);
        offsetX=0;
        offsetY+=definedBodyHeight;
      }
 while (offsetY < pageBodyHeight - ignoredOverflow);
    }
    setExtendDirection(EXTEND_NONE);
  }
 else {
    addPage(page);
  }
}",0.920695102685624
72291,"private int getActualPageBodyWidth(PageArea page){
  int prefWidth=0;
  Iterator iter=page.getBody().getChildren();
  while (iter.hasNext()) {
    AbstractArea area=(AbstractArea)iter.next();
    prefWidth=Math.max(prefWidth,area.getAllocatedWidth());
  }
  return prefWidth;
}","private int getActualPageBodyWidth(PageArea page){
  return getActualPageBodySize(page,BODY_WIDTH);
}",0.3492063492063492
72292,"/** 
 * Initializes the Jdbc related information , used  by this page ( such as the Jdbc Connection , Catalog Name etc )
 */
protected void initialJdbcInfo(){
  createMetaDataProvider();
  jdbcConnection=connectMetadataProvider(metaDataProvider,this.getDataSetDesign().getDataSourceDesign());
  this.odaConnectionProvider.connect();
  try {
    if (jdbcConnection != null) {
      isSchemaSupported=metaDataProvider.isSchemaSupported();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.showException(this.getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
}","/** 
 * Initializes the Jdbc related information , used  by this page ( such as the Jdbc Connection , Catalog Name etc )
 */
protected void initialJdbcInfo(){
  createMetaDataProvider();
  jdbcConnection=connectMetadataProvider(metaDataProvider,this.getDataSetDesign().getDataSourceDesign());
  if (jdbcConnection != null) {
    try {
      isSchemaSupported=metaDataProvider.isSchemaSupported();
      this.odaConnectionProvider.connect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
}",0.7497805092186128
72293,"public void testFitToPageTrue() throws EngineException {
  List pages=getPages(true,false);
  float[] scales=new float[]{0.75f,0.75f,0.75f,0.75f,0.75f,0.75f,0.75f,0.75f};
  assertTrue(pages.size() == scales.length);
  for (int i=0; i < pages.size(); i++) {
    PageArea page=(PageArea)pages.get(i);
    assertEquals(new Float(scales[i]),new Float(page.getScale()));
  }
  pages=getPages(true,true);
  scales=new float[]{0.75f,0.75f,0.75f,0.234f};
  assertTrue(pages.size() == scales.length);
  for (int i=0; i < pages.size(); i++) {
    PageArea page=(PageArea)pages.get(i);
    float delta=scales[i] - page.getScale();
    assertTrue(delta > -0.001 && delta < 0.001);
  }
}","public void testFitToPageTrue() throws EngineException {
  List pages=getPages(true,true);
  float[] scales=new float[]{0.75f,0.75f,0.75f,0.23f};
  assertTrue(pages.size() == scales.length);
  for (int i=0; i < pages.size(); i++) {
    PageArea page=(PageArea)pages.get(i);
    float delta=scales[i] - page.getScale();
    assertTrue(delta > -0.01 && delta < 0.01);
  }
}",0.6564593301435406
72294,"public void testPagebreakPaginationOnlyFalse() throws EngineException {
  assertEquals(8,getPages(false,false).size());
}","public void testPagebreakPaginationOnlyFalse() throws EngineException {
  assertEquals(4,getPages(false,false).size());
}",0.9917355371900828
72295,"/** 
 * The page layout is controlled by three render options: <ul> <li>OUTPUT-MASTER-PAGE</li> <li>OUTPUT-MARGIN</li> <li>FLOATING-FOOTER</li> </ul> The layout effect matrix are demostrate in following table: <table border=""all""> <tr> <th>PAGE</th> <th>MARGIN</th> <th>FOOTER</th> <th>effect</th> </tr> <tr valign=""top""> <td rowspan=""4"">TRUE</td> <td rowspan=""2"">TRUE</td> <td >FALSE</td> <td> <table border=""all"" style=""width:2in;height:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td>LM</td> <td valign=""top"">header</td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr> <td>LM</td> <td><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> <table> </td> </table> <tr valign=""top""> <td>TRUE</td> <td> <table border=""all"" style=""width:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td >LM</td> <td valign=""top""><div>header</div></td> <td >RM</td> </tr> <tr> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td valign=""top""><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> </table> </td> </tr> <tr valign=""top""> <td rowspan=""2"">FALSE</td> <td>TRUE</td> <td> <table border=""all"" style=""width:1.6in;height:1in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr style=""height:100%""> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td> <table border=""all"" style=""width:1.6in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td>ANY</td> <td>ANY</td> <td> <table border=""all"" style=""width:1.6in;""> <tr> <td>BODY</td> </tr> </table> </td> </tr> </table>
 */
public void startPage(IPageContent page){
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  boolean fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  StringBuffer styleBuffer=new StringBuffer();
  writer.openTag(HTMLTags.TAG_TABLE);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  styleBuffer.append(""String_Node_Str"");
  if (pageNo > 1) {
    styleBuffer.append(""String_Node_Str"");
  }
  if (page != null && outputMasterPageContent) {
    htmlEmitter.buildPageStyle(page,styleBuffer);
    if (fixedReport) {
      DimensionType width=getPageWidth(page);
      if (width != null) {
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(width.toString());
        styleBuffer.append(""String_Node_Str"");
      }
    }
 else {
      styleBuffer.append(""String_Node_Str"");
    }
    if (!pageFooterFloatFlag) {
      DimensionType height=getPageHeight(page);
      if (height != null) {
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(height.toString());
        styleBuffer.append(""String_Node_Str"");
      }
    }
    if (fixedReport) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(""String_Node_Str"");
    }
  }
 else {
    styleBuffer.append(""String_Node_Str"");
  }
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  if (page != null && outputMasterPageContent) {
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
    }
    writer.openTag(HTMLTags.TAG_COL);
    writer.closeTag(HTMLTags.TAG_COL);
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
      outputVMargin(page.getMarginTop());
    }
    if (showPageHeader(page)) {
      writer.openTag(HTMLTags.TAG_TR);
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginLeft());
      }
      outputPageBand(page,page.getPageHeader());
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginRight());
      }
      writer.closeTag(HTMLTags.TAG_TR);
    }
  }
  writer.openTag(HTMLTags.TAG_TR);
  if (!pageFooterFloatFlag) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  if (page != null && outputMasterPageContent && outputMasterPageMargins) {
    outputHMargin(page.getMarginLeft());
  }
  writer.openTag(HTMLTags.TAG_TD);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  if (htmlRtLFlag) {
    writer.attribute(HTMLTags.ATTR_HTML_DIR,CSSConstants.CSS_RTL_VALUE);
  }
}","/** 
 * The page layout is controlled by three render options: <ul> <li>OUTPUT-MASTER-PAGE</li> <li>OUTPUT-MARGIN</li> <li>FLOATING-FOOTER</li> </ul> The layout effect matrix are demostrate in following table: <table border=""all""> <tr> <th>PAGE</th> <th>MARGIN</th> <th>FOOTER</th> <th>effect</th> </tr> <tr valign=""top""> <td rowspan=""4"">TRUE</td> <td rowspan=""2"">TRUE</td> <td >FALSE</td> <td> <table border=""all"" style=""width:2in;height:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td>LM</td> <td valign=""top"">header</td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr> <td>LM</td> <td><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> <table> </td> </table> <tr valign=""top""> <td>TRUE</td> <td> <table border=""all"" style=""width:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td >LM</td> <td valign=""top""><div>header</div></td> <td >RM</td> </tr> <tr> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td valign=""top""><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> </table> </td> </tr> <tr valign=""top""> <td rowspan=""2"">FALSE</td> <td>TRUE</td> <td> <table border=""all"" style=""width:1.6in;height:1in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr style=""height:100%""> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td> <table border=""all"" style=""width:1.6in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td>ANY</td> <td>ANY</td> <td> <table border=""all"" style=""width:1.6in;""> <tr> <td>BODY</td> </tr> </table> </td> </tr> </table>
 */
public void startPage(IPageContent page){
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  if (pageNo > 1) {
    writer.writeCode(""String_Node_Str"");
  }
  boolean fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  StringBuffer styleBuffer=new StringBuffer();
  writer.openTag(HTMLTags.TAG_TABLE);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  styleBuffer.append(""String_Node_Str"");
  if (page != null && outputMasterPageContent) {
    htmlEmitter.buildPageStyle(page,styleBuffer);
    if (fixedReport) {
      DimensionType width=getPageWidth(page);
      if (width != null) {
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(width.toString());
        styleBuffer.append(""String_Node_Str"");
      }
    }
 else {
      styleBuffer.append(""String_Node_Str"");
    }
    if (!pageFooterFloatFlag) {
      DimensionType height=getPageHeight(page);
      if (height != null) {
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(height.toString());
        styleBuffer.append(""String_Node_Str"");
      }
    }
    if (fixedReport) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(""String_Node_Str"");
    }
  }
 else {
    styleBuffer.append(""String_Node_Str"");
  }
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  if (page != null && outputMasterPageContent) {
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
    }
    writer.openTag(HTMLTags.TAG_COL);
    writer.closeTag(HTMLTags.TAG_COL);
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
      outputVMargin(page.getMarginTop());
    }
    if (showPageHeader(page)) {
      writer.openTag(HTMLTags.TAG_TR);
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginLeft());
      }
      outputPageBand(page,page.getPageHeader());
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginRight());
      }
      writer.closeTag(HTMLTags.TAG_TR);
    }
  }
  writer.openTag(HTMLTags.TAG_TR);
  if (!pageFooterFloatFlag) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  if (page != null && outputMasterPageContent && outputMasterPageMargins) {
    outputHMargin(page.getMarginLeft());
  }
  writer.openTag(HTMLTags.TAG_TD);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  if (htmlRtLFlag) {
    writer.attribute(HTMLTags.ATTR_HTML_DIR,CSSConstants.CSS_RTL_VALUE);
  }
}",0.9858064516129031
72296,"/** 
 * @param dataSourceQuery
 * @param resultSet
 * @param resultClass
 * @param stopSign
 * @throws DataException
 */
public SimpleResultSet(DataSourceQuery dataSourceQuery,ResultSet resultSet,IResultClass resultClass,IEventHandler handler,StopSign stopSign) throws DataException {
  this.rowResultSet=new RowResultSet(new SmartCacheRequest(dataSourceQuery.getMaxRows(),dataSourceQuery.getFetchEvents(),new OdiAdapter(resultSet),resultClass,false));
  this.currResultObj=this.rowResultSet.next(stopSign);
  this.resultSet=resultSet;
  this.stopSign=stopSign;
  this.handler=handler;
}","/** 
 * @param dataSourceQuery
 * @param resultSet
 * @param resultClass
 * @param stopSign
 * @throws DataException
 */
public SimpleResultSet(DataSourceQuery dataSourceQuery,ResultSet resultSet,IResultClass resultClass,IEventHandler handler,StopSign stopSign) throws DataException {
  this.rowResultSet=new RowResultSet(new SmartCacheRequest(dataSourceQuery.getMaxRows(),dataSourceQuery.getFetchEvents(),new OdiAdapter(resultSet),resultClass,false));
  this.currResultObj=this.rowResultSet.next(stopSign);
  this.rowCount=(this.currResultObj != null) ? -1 : 0;
  this.resultSet=resultSet;
  this.stopSign=stopSign;
  this.handler=handler;
}",0.8803905614320586
72297,"public int getRowCount() throws DataException {
  return this.currResultObj == null ? 0 : -1;
}","public int getRowCount() throws DataException {
  return this.rowCount;
}",0.7976190476190477
72298,"public boolean next() throws BirtException {
  checkStarted();
  currRowIndex++;
  if (currRowIndex < rowCount) {
    readCurrentRow();
    return true;
  }
  return false;
}","public boolean next() throws BirtException {
  checkStarted();
  if (this.columnValueMap == null)   return false;
  currRowIndex++;
  readCurrentRow();
  return this.columnValueMap != null;
}",0.6575342465753424
72299,"/** 
 * @throws DataException
 */
private void readCurrentRow() throws DataException {
  try {
    rowIndex=IOUtil.readInt(rowInputStream);
    startingGroupLevel=IOUtil.readInt(rowInputStream);
    endingGroupLevel=IOUtil.readInt(rowInputStream);
    columnValueMap.clear();
    for (int i=0; i < columnList.size(); i++) {
      columnValueMap.put(columnList.get(i),IOUtil.readObject(rowInputStream,DataEngineSession.getCurrentClassLoader()));
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_CACHE_TEMPFILE_ERROR);
  }
}","/** 
 * @throws DataException
 */
private void readCurrentRow() throws DataException {
  try {
    rowIndex=IOUtil.readInt(rowInputStream);
    if (rowIndex == -1) {
      this.columnValueMap=null;
      return;
    }
    startingGroupLevel=IOUtil.readInt(rowInputStream);
    endingGroupLevel=IOUtil.readInt(rowInputStream);
    columnValueMap.clear();
    for (int i=0; i < columnList.size(); i++) {
      columnValueMap.put(columnList.get(i),IOUtil.readObject(rowInputStream,DataEngineSession.getCurrentClassLoader()));
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_CACHE_TEMPFILE_ERROR);
  }
}",0.935
72300,"/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CacheResultIterator(String tempDir,IQueryResults queryResults) throws DataException {
  Object[] params={tempDir,queryResults.getID()};
  logger.entering(CacheResultIterator.class.getName(),""String_Node_Str"",params);
  this.columnValueMap=new HashMap();
  this.currRowIndex=-1;
  this.queryResults=queryResults;
  try {
    createCacheInputStream(tempDir);
    resultClass=new ResultClass(this.metaInputStream);
    rowCount=IOUtil.readInt(rowInputStream);
    int columnSize=IOUtil.readInt(rowInputStream);
    columnList=new ArrayList();
    for (int i=0; i < columnSize; i++) {
      columnList.add(IOUtil.readObject(rowInputStream,DataEngineSession.getCurrentClassLoader()));
    }
    logger.exiting(CacheResultIterator.class.getName(),""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    throw new DataException(ResourceConstants.OPEN_CACHE_TEMPFILE_ERROR);
  }
catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_CACHE_TEMPFILE_ERROR);
  }
}","/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CacheResultIterator(String tempDir,IQueryResults queryResults) throws DataException {
  Object[] params={tempDir,queryResults.getID()};
  logger.entering(CacheResultIterator.class.getName(),""String_Node_Str"",params);
  this.columnValueMap=new HashMap();
  this.currRowIndex=-1;
  this.queryResults=queryResults;
  try {
    createCacheInputStream(tempDir);
    resultClass=new ResultClass(this.metaInputStream);
    rowCount=IOUtil.readInt(rowInputStream);
    if (rowCount == -1)     rowCount=Integer.MAX_VALUE;
    int columnSize=IOUtil.readInt(rowInputStream);
    columnList=new ArrayList();
    for (int i=0; i < columnSize; i++) {
      columnList.add(IOUtil.readObject(rowInputStream,DataEngineSession.getCurrentClassLoader()));
    }
    logger.exiting(CacheResultIterator.class.getName(),""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    throw new DataException(ResourceConstants.OPEN_CACHE_TEMPFILE_ERROR);
  }
catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_CACHE_TEMPFILE_ERROR);
  }
}",0.9744525547445256
72301,"/** 
 * @throws DataException 
 * @throws IOException 
 */
private void closeCacheOutputStream() throws DataException {
  try {
    if (rowOutputStream != null) {
      rowOutputStream.close();
      rowOutputStream=null;
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.CLOSE_CACHE_TEMPFILE_ERROR);
  }
}","/** 
 * @throws DataException 
 * @throws IOException 
 */
private void closeCacheOutputStream() throws DataException {
  try {
    if (rowOutputStream != null) {
      IOUtil.writeInt(rowOutputStream,-1);
      rowOutputStream.close();
      rowOutputStream=null;
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.CLOSE_CACHE_TEMPFILE_ERROR);
  }
}",0.9403606102635228
72302,"/** 
 * whethter the expression has aggregation 
 * @param oldExpression
 * @return
 * @throws BirtException
 */
public static boolean hasAggregation(String expression){
  if (expression == null)   return false;
  try {
    return ExpressionParserUtility.hasAggregation(expression,ExpressionUtil.ROW_INDICATOR);
  }
 catch (  BirtException e) {
    return false;
  }
}","/** 
 * whethter the expression has aggregation 
 * @param oldExpression
 * @return
 * @throws BirtException
 */
public static boolean hasAggregation(String expression){
  if (expression == null)   return false;
  try {
    return ExpressionParserUtility.hasAggregation(expression,ExpressionUtil.ROW_INDICATOR) || ExpressionParserUtility.hasAggregation(expression,ExpressionUtil.DATASET_ROW_INDICATOR);
  }
 catch (  BirtException e) {
    return false;
  }
}",0.8899637243047158
72303,"/** 
 * Run nested query.
 */
private void runNestedQuery() throws Exception {
  IPreparedQuery preparedQueryCustomer=dataEngine.prepare(queryDefnCustomer,this.getAppContext());
  IPreparedQuery preparedQueryCall=dataEngine.prepare(queryDefnCall,this.getAppContext());
  ScriptContext scriptContext=new ScriptContext();
  IQueryResults queryResultsCustomer=preparedQueryCustomer.execute(scriptContext.getScope());
  IResultIterator resultItCustomer=queryResultsCustomer.getResultIterator();
  testPrintln(""String_Node_Str"");
  while (resultItCustomer.next()) {
    testPrint(""String_Node_Str"");
    testPrint(evalAsString(bindingNameCustomer[1],resultItCustomer));
    testPrint(""String_Node_Str"");
    testPrint(evalAsString(bindingNameCustomer[2],resultItCustomer));
    testPrintln(""String_Node_Str"");
    testPrint(""String_Node_Str"");
    testPrint(evalAsString(bindingNameCustomer[3],resultItCustomer));
    testPrintln(""String_Node_Str"");
    scriptContext.enterScope();
    IQueryResults queryResultsCalls=preparedQueryCall.execute(queryResultsCustomer,scriptContext.getScope());
    IResultIterator resultItCalls=queryResultsCalls.getResultIterator();
    while (resultItCalls.next()) {
      for (int i=1; i < expressionsCall.length; i++) {
        testPrint(evalAsString(bindingNameCall[i],resultItCalls));
        testPrint(""String_Node_Str"");
      }
      testPrintln(""String_Node_Str"");
    }
    scriptContext.exitScope();
    testPrintln(""String_Node_Str"");
  }
  scriptContext.exit();
  checkOutputFile();
}","/** 
 * Run nested query.
 */
private void runNestedQuery() throws Exception {
  IPreparedQuery preparedQueryCustomer=dataEngine.prepare(queryDefnCustomer,this.getAppContext());
  IPreparedQuery preparedQueryCall=dataEngine.prepare(queryDefnCall,this.getAppContext());
  ScriptContext scriptContext=new ScriptContext();
  IQueryResults queryResultsCustomer=preparedQueryCustomer.execute(scriptContext.getScope());
  IResultIterator resultItCustomer=queryResultsCustomer.getResultIterator();
  testPrintln(""String_Node_Str"");
  while (resultItCustomer.next()) {
    resultItCustomer.getStartingGroupLevel();
    resultItCustomer.getEndingGroupLevel();
    testPrint(""String_Node_Str"");
    testPrint(evalAsString(bindingNameCustomer[1],resultItCustomer));
    testPrint(""String_Node_Str"");
    testPrint(evalAsString(bindingNameCustomer[2],resultItCustomer));
    testPrintln(""String_Node_Str"");
    testPrint(""String_Node_Str"");
    testPrint(evalAsString(bindingNameCustomer[3],resultItCustomer));
    testPrintln(""String_Node_Str"");
    scriptContext.enterScope();
    IQueryResults queryResultsCalls=preparedQueryCall.execute(queryResultsCustomer,scriptContext.getScope());
    IResultIterator resultItCalls=queryResultsCalls.getResultIterator();
    while (resultItCalls.next()) {
      for (int i=1; i < expressionsCall.length; i++) {
        testPrint(evalAsString(bindingNameCall[i],resultItCalls));
        testPrint(""String_Node_Str"");
      }
      testPrintln(""String_Node_Str"");
    }
    scriptContext.exitScope();
    testPrintln(""String_Node_Str"");
  }
  scriptContext.exit();
  checkOutputFile();
}",0.97131931166348
72304,"private String createSignature(IMethodInfo info){
  StringBuffer signature=new StringBuffer();
  String javaDoc=info.getJavaDoc();
  if (javaDoc != null && javaDoc.length() > 0) {
    signature.append(""String_Node_Str"");
    signature.append(info.getJavaDoc());
  }
  signature.append(""String_Node_Str"");
  signature.append(info.getName());
  signature.append(""String_Node_Str"");
  Iterator iter=info.argumentListIterator();
  if (iter.hasNext()) {
    IArgumentInfoList argumentList=(IArgumentInfoList)iter.next();
    for (Iterator argumentIter=argumentList.argumentsIterator(); argumentIter.hasNext(); ) {
      IArgumentInfo argument=(IArgumentInfo)argumentIter.next();
      String argName=argument.getName();
      if (argName == null || argName.length() == 0) {
        String type=argument.getType();
        argName=JSEditor.convertToParameterName(type);
      }
      signature.append(argName);
      if (argumentIter.hasNext()) {
        signature.append(""String_Node_Str"");
      }
    }
  }
  signature.append(""String_Node_Str"");
  return signature.toString();
}","private String createSignature(IMethodInfo info){
  StringBuffer signature=new StringBuffer();
  String javaDoc=info.getJavaDoc();
  if (javaDoc != null && javaDoc.length() > 0) {
    signature.append(""String_Node_Str"");
    signature.append(info.getJavaDoc());
  }
  if (info instanceof ITemplateMethodInfo) {
    String code=((ITemplateMethodInfo)info).getCodeTemplate();
    if (code != null) {
      signature.append(""String_Node_Str"").append(code).append(""String_Node_Str"");
      return signature.toString();
    }
  }
  signature.append(""String_Node_Str"");
  signature.append(info.getName());
  signature.append(""String_Node_Str"");
  Iterator iter=info.argumentListIterator();
  if (iter.hasNext()) {
    IArgumentInfoList argumentList=(IArgumentInfoList)iter.next();
    for (Iterator argumentIter=argumentList.argumentsIterator(); argumentIter.hasNext(); ) {
      IArgumentInfo argument=(IArgumentInfo)argumentIter.next();
      String argName=argument.getName();
      if (argName == null || argName.length() == 0) {
        String type=argument.getType();
        argName=JSEditor.convertToParameterName(type);
      }
      signature.append(argName);
      if (argumentIter.hasNext()) {
        signature.append(""String_Node_Str"");
      }
    }
  }
  signature.append(""String_Node_Str"");
  return signature.toString();
}",0.5139061851390618
72305,"protected void drawTextAt(ITextArea text,int x,int y,int width,int height,TextStyle textStyle){
  pageGraphic.drawText(text.getNotFlippedText(),x,y,width,height,textStyle);
}","protected void drawTextAt(ITextArea text,int x,int y,int width,int height,TextStyle textStyle){
  pageGraphic.drawText(text.getLogicalOrderText(),x,y,width,height,textStyle);
}",0.9542857142857144
72306,"public IStyle getStyle(){
  if (style == null) {
    if (inlineStyle == null) {
      inlineStyle=report.createStyle();
    }
    String styleClass=getStyleClass();
    if (styleClass != null) {
      IStyle classStyle=report.findStyle(styleClass);
      style=new CompositeStyle(classStyle,inlineStyle);
    }
 else {
      style=inlineStyle;
    }
  }
  return style;
}","public IStyle getStyle(){
  if (style == null) {
    if (inlineStyle == null) {
      inlineStyle=report.createStyle();
    }
    String styleClass=getStyleClass();
    if (styleClass != null) {
      IStyle classStyle=report.findStyle(styleClass);
      style=new CompositeStyle(classStyle,inlineStyle);
    }
 else {
      style=inlineStyle;
    }
  }
  return new ContentStyle((AbstractStyle)style);
}",0.944516129032258
72307,"/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  currentX-=getX(container);
  currentY-=getY(container);
  if (container instanceof PageArea) {
    pageGraphic.dispose();
    if (((PageArea)container).isExtendToMultiplePages() && (extendDirection != EXTEND_NONE) && !extendDirectionMask) {
      int originalX=currentX;
      int originalY=currentY;
      if (extendDirection == EXTEND_ON_VERTICAL) {
        int startX=originalX;
        int startY=originalY + pageHeight;
        while (startY < maxHeight) {
          visitContainer(container,startX,startY);
          startY+=pageHeight;
        }
      }
 else       if (extendDirection == EXTEND_ON_HORIZONTAL) {
        int startX=originalX + pageWidth;
        int startY=originalY;
        while (startX < maxWidth) {
          visitContainer(container,startX,startY);
          startX+=pageWidth;
        }
      }
 else       if (extendDirection == EXTEND_ON_HORIZONTAL_AND_VERTICAL) {
        int startX=originalX + pageWidth;
        int startY=originalY;
        while (startY < maxHeight) {
          while (startX < maxWidth) {
            visitContainer(container,startX,startY);
            startX+=pageWidth;
          }
          startX=originalX;
          startY+=pageHeight;
        }
      }
      setExtendDirection(EXTEND_NONE);
      maxWidth=0;
      maxHeight=0;
    }
  }
 else {
    if (container instanceof TableArea) {
      drawTableBorder((TableArea)container);
    }
 else     if (!(container instanceof CellArea)) {
      BorderInfo[] borders=cacheBorderInfo(container);
      drawBorder(borders);
    }
    if (container.needClip()) {
      pageGraphic.clipRestore();
    }
  }
}","/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  currentX-=getX(container);
  currentY-=getY(container);
  if (container instanceof PageArea) {
    pageGraphic.dispose();
  }
 else {
    if (container instanceof TableArea) {
      drawTableBorder((TableArea)container);
    }
 else     if (!(container instanceof CellArea)) {
      BorderInfo[] borders=cacheBorderInfo(container);
      drawBorder(borders);
    }
    if (container.needClip()) {
      pageGraphic.clipRestore();
    }
  }
}",0.5154384520378756
72308,"/** 
 * If the container is a PageArea, this method creates a PDF page. If the container is the other containerAreas, such as TableArea, or just the border of textArea/imageArea this method draws the border and background of the given container.
 * @param container the ContainerArea specified from layout
 * @param offsetX for any (x,y) in the ContainerArea, if x<offsetX, the (x,y) will be omitted.
 * @param offsetY for any (x,y) in the ContainerArea, if y<offsetY, the (x,y) will be omitted.
 */
protected void startContainer(IContainerArea container,int offsetX,int offsetY){
  if (container instanceof PageArea) {
    scale=container.getScale();
    newPage(container);
    currentX=-offsetX;
    currentY=-offsetY;
  }
 else {
    if (container.needClip()) {
      pageGraphic.clipSave();
      clip(container);
    }
    drawContainer(container);
    currentX+=getX(container);
    currentY+=getY(container);
  }
}","/** 
 * The container may be a TableArea, RowArea, etc. Or just the border of textArea/imageArea. This method draws the border and background of the given container.
 * @param container the ContainerArea specified from layout
 */
protected void startContainer(IContainerArea container){
  if (container.needClip()) {
    pageGraphic.clipSave();
    clip(container);
  }
  drawContainer(container);
  currentX+=getX(container);
  currentY+=getY(container);
}",0.6076867295141407
72309,"/** 
 * Gets the output format. always returns ""postscript"".
 */
public abstract String getOutputFormat();","/** 
 * Gets the output format.
 */
public abstract String getOutputFormat();",0.8415300546448088
72310,"/** 
 * Creates a new PDF page
 * @param page the PageArea specified from layout
 */
protected void newPage(IContainerArea page){
  pageHeight=getHeight(page);
  pageWidth=getWidth(page);
  Color backgroundColor=PropertyUtil.getColor(page.getStyle().getProperty(StyleConstants.STYLE_BACKGROUND_COLOR));
  pageGraphic=pageDevice.newPage(pageWidth,pageHeight,backgroundColor);
  drawBackgroundImage(page.getStyle(),0,0,pageWidth,pageHeight);
}","/** 
 * Creates a new PDF page
 * @param page the PageArea specified from layout
 */
protected void newPage(IContainerArea page){
  int pageHeight=getHeight(page);
  int pageWidth=getWidth(page);
  Color backgroundColor=PropertyUtil.getColor(page.getStyle().getProperty(StyleConstants.STYLE_BACKGROUND_COLOR));
  pageGraphic=pageDevice.newPage(pageWidth,pageHeight,backgroundColor);
  drawBackgroundImage(page.getStyle(),0,0,pageWidth,pageHeight);
}",0.991011235955056
72311,"public void visitContainer(IContainerArea container){
  startContainer(container);
  visitChildren(container);
  endContainer(container);
}","/** 
 * Visits a container
 * @param container
 * @param offsetX
 * @param offsetY
 */
public void visitContainer(IContainerArea container){
  if (container instanceof PageArea) {
    visitPage((PageArea)container);
  }
 else {
    startContainer(container);
    visitChildren(container);
    endContainer(container);
  }
}",0.5367965367965368
72312,"/** 
 * Creates selected expression trees with given filter list.
 * @param dataSetList list for DataSet tree
 * @param filterList list of filters
 */
public void createFilteredExpressionTree(List dataSetList,List filterList){
  if (filter(TREE_NAME_CONTEXT,filterList)) {
    createContextCatagory();
  }
  if (filter(TREE_NAME_PARAMETERS,filterList)) {
    createParamtersCategory();
  }
  if (filter(TREE_NAME_NATIVE_OBJECTS,filterList)) {
    createNativeObjectsCategory();
  }
  if (filter(TREE_NAME_BIRT_OBJECTS,filterList)) {
    createBirtObjectsCategory();
  }
  if (filter(TREE_NAME_OPERATORS,filterList)) {
    createOperatorsCategory();
  }
}","/** 
 * Creates selected expression trees with given filter list.
 * @param dataSetList list for DataSet tree
 * @param filterList list of filters
 */
public void createFilteredExpressionTree(List dataSetList,List filterList){
  if (filter(TREE_NAME_CONTEXT,filterList)) {
    createContextCatagory();
  }
  if (filter(TREE_NAME_PARAMETERS,filterList)) {
    createParamtersCategory();
  }
  if (filter(TREE_NAME_NATIVE_OBJECTS,filterList)) {
    createNativeObjectsCategory();
  }
  if (filter(TREE_NAME_BIRT_OBJECTS,filterList)) {
    createBirtObjectsCategory();
  }
  if (filter(TREE_NAME_OPERATORS,filterList)) {
    createOperatorsCategory();
  }
  if (currentMethodName != null) {
    switchContext();
  }
}",0.956140350877193
72313,"public void selectionChanged(SelectionChangedEvent event){
  ISelection selection=event.getSelection();
  if (selection != null) {
    Object[] sel=((IStructuredSelection)selection).toArray();
    if (sel.length == 1) {
      if (sel[0] instanceof IPropertyDefn) {
        IPropertyDefn elePropDefn=(IPropertyDefn)sel[0];
        switchContext(elePropDefn.getName());
      }
    }
  }
}","public void selectionChanged(SelectionChangedEvent event){
  ISelection selection=event.getSelection();
  if (selection != null) {
    Object[] sel=((IStructuredSelection)selection).toArray();
    if (sel.length == 1) {
      if (sel[0] instanceof IPropertyDefn) {
        IPropertyDefn elePropDefn=(IPropertyDefn)sel[0];
        currentMethodName=elePropDefn.getName();
        currentContextName=elePropDefn.getContext();
        switchContext();
      }
    }
  }
}",0.856140350877193
72314,"private void updateClientContext(){
  if (CLIENT_CONTEXT.equals(currentMethodName)) {
    if (parametersItem != null && !parametersItem.isDisposed()) {
      parametersItem.dispose();
      parametersItem=null;
    }
    if (birtObjectsItem != null && !birtObjectsItem.isDisposed()) {
      birtObjectsItem.dispose();
      birtObjectsItem=null;
    }
  }
 else {
    if (parametersItem == null || parametersItem.isDisposed()) {
      int idx=tree.indexOf(contextItem);
      if (idx == -1) {
        parametersItem=createTopTreeItem(tree,TREE_ITEM_PARAMETERS);
      }
 else {
        parametersItem=createTopTreeItem(tree,TREE_ITEM_PARAMETERS,idx + 1);
      }
      buildParameterTree();
    }
    if (birtObjectsItem == null || birtObjectsItem.isDisposed()) {
      int idx=tree.indexOf(nativeObejctsItem);
      if (idx == -1) {
        birtObjectsItem=createTopTreeItem(tree,TREE_ITEM_BIRT_OBJECTS);
      }
 else {
        birtObjectsItem=createTopTreeItem(tree,TREE_ITEM_BIRT_OBJECTS,idx + 1);
      }
      createObjects(birtObjectsItem,OBJECTS_TYPE_BIRT);
    }
  }
}","private void updateClientContext(){
  if (CLIENT_CONTEXT.equals(currentContextName)) {
    if (parametersItem != null && !parametersItem.isDisposed()) {
      parametersItem.dispose();
      parametersItem=null;
    }
    if (birtObjectsItem != null && !birtObjectsItem.isDisposed()) {
      birtObjectsItem.dispose();
      birtObjectsItem=null;
    }
  }
 else {
    if (parametersItem == null || parametersItem.isDisposed()) {
      int idx=tree.indexOf(contextItem);
      if (idx == -1) {
        parametersItem=createTopTreeItem(tree,TREE_ITEM_PARAMETERS);
      }
 else {
        parametersItem=createTopTreeItem(tree,TREE_ITEM_PARAMETERS,idx + 1);
      }
      buildParameterTree();
    }
    if (birtObjectsItem == null || birtObjectsItem.isDisposed()) {
      int idx=tree.indexOf(nativeObejctsItem);
      if (idx == -1) {
        birtObjectsItem=createTopTreeItem(tree,TREE_ITEM_BIRT_OBJECTS);
      }
 else {
        birtObjectsItem=createTopTreeItem(tree,TREE_ITEM_BIRT_OBJECTS,idx + 1);
      }
      createObjects(birtObjectsItem,OBJECTS_TYPE_BIRT);
    }
  }
}",0.993967517401392
72315,"protected void switchContext(String context){
  if (tree == null || tree.isDisposed() || context == null) {
    return;
  }
  currentMethodName=context;
  createContextObjects(currentMethodName);
  updateClientContext();
  updateDynamicItems();
}","protected void switchContext(){
  if (tree == null || tree.isDisposed()) {
    return;
  }
  createContextObjects(currentMethodName);
  updateClientContext();
  updateDynamicItems();
}",0.8558139534883721
72316,"/** 
 * Compute the row span include data span and subtotal span for row edge area, this doesn't consider for multiple vertical measures.
 */
public static int computeRowSpan(CrosstabReportItemHandle crosstabItem,List rowGroups,int dimensionIndex,int levelIndex,EdgeCursor rowEdgeCursor,boolean isLayoutDownThenOver) throws OLAPException {
}","/** 
 * Compute the row span include data span and subtotal span for row edge area, this doesn't consider for multiple vertical measures.
 */
public static int computeRowSpan(CrosstabReportItemHandle crosstabItem,List<EdgeGroup> rowGroups,int dimensionIndex,int levelIndex,EdgeCursor rowEdgeCursor,boolean isLayoutDownThenOver) throws OLAPException {
}",0.984126984126984
72317,"/** 
 * Returns 1-based starting group index, 0 means start of entire edge
 */
public static int getStartingGroupLevel(EdgeCursor edgeCursor,List groupCursors) throws OLAPException {
  if (edgeCursor.isFirst()) {
    return 0;
  }
  for (int i=0; i < groupCursors.size() - 1; i++) {
    DimensionCursor dc=(DimensionCursor)groupCursors.get(i);
    if (GroupUtil.isDummyGroup(dc)) {
      return i == 0 ? 1 : i;
    }
    if (dc.getEdgeStart() == edgeCursor.getPosition()) {
      return i + 1;
    }
  }
  return groupCursors.size();
}","/** 
 * Returns 1-based starting group index, 0 means start of entire edge
 */
public static int getStartingGroupLevel(EdgeCursor edgeCursor,List<DimensionCursor> groupCursors) throws OLAPException {
  if (edgeCursor.isFirst()) {
    return 0;
  }
  for (int i=0; i < groupCursors.size() - 1; i++) {
    DimensionCursor dc=groupCursors.get(i);
    if (GroupUtil.isDummyGroup(dc)) {
      return i == 0 ? 1 : i;
    }
    if (dc.getEdgeStart() == edgeCursor.getPosition()) {
      return i + 1;
    }
  }
  return groupCursors.size();
}",0.9682242990654204
72318,"/** 
 * Check if this group is a leaf group, e.g. the innerest non-dummy group.
 */
public static boolean isLeafGroup(List groupCursors,int groupIndex) throws OLAPException {
  for (int i=groupIndex + 1; i < groupCursors.size(); i++) {
    DimensionCursor dc=(DimensionCursor)groupCursors.get(i);
    if (!isDummyGroup(dc)) {
      return false;
    }
  }
  return true;
}","/** 
 * Check if this group is a leaf group, e.g. the innerest non-dummy group.
 */
public static boolean isLeafGroup(List<DimensionCursor> groupCursors,int groupIndex) throws OLAPException {
  for (int i=groupIndex + 1; i < groupCursors.size(); i++) {
    DimensionCursor dc=groupCursors.get(i);
    if (!isDummyGroup(dc)) {
      return false;
    }
  }
  return true;
}",0.9543010752688172
72319,"/** 
 * Returns the accumulated group index for current level element from given group list.
 * @param groups
 * @param dimensionIndex
 * @param levelIndex If this is negative(<0), means the last level index in given dimension.
 * @return
 */
public static int getGroupIndex(List groups,int dimensionIndex,int levelIndex){
  if (levelIndex < 0) {
    for (int i=groups.size() - 1; i >= 0; i--) {
      EdgeGroup gp=(EdgeGroup)groups.get(i);
      if (gp.dimensionIndex == dimensionIndex) {
        return i;
      }
    }
  }
 else {
    for (int i=0; i < groups.size(); i++) {
      EdgeGroup gp=(EdgeGroup)groups.get(i);
      if (gp.dimensionIndex == dimensionIndex && gp.levelIndex == levelIndex) {
        return i;
      }
    }
  }
  return -1;
}","/** 
 * Returns the accumulated group index for current level element from given group list.
 * @param groups
 * @param dimensionIndex
 * @param levelIndex If this is negative(<0), means the last level index in given dimension.
 * @return
 */
public static int getGroupIndex(List<EdgeGroup> groups,int dimensionIndex,int levelIndex){
  if (levelIndex < 0) {
    for (int i=groups.size() - 1; i >= 0; i--) {
      EdgeGroup gp=groups.get(i);
      if (gp.dimensionIndex == dimensionIndex) {
        return i;
      }
    }
  }
 else {
    for (int i=0; i < groups.size(); i++) {
      EdgeGroup gp=groups.get(i);
      if (gp.dimensionIndex == dimensionIndex && gp.levelIndex == levelIndex) {
        return i;
      }
    }
  }
  return -1;
}",0.9779264214046822
72320,"/** 
 * Returns the next group on given group list.
 */
public static EdgeGroup getNextGroup(List groups,int currentDimensionIndex,int currentLevelIndex){
  int currentGroup=-1;
  for (int i=0; i < groups.size(); i++) {
    EdgeGroup gp=(EdgeGroup)groups.get(i);
    if (gp.dimensionIndex == currentDimensionIndex && gp.levelIndex == currentLevelIndex) {
      currentGroup=i;
      break;
    }
  }
  if (currentGroup >= 0 && currentGroup < groups.size() - 1) {
    return (EdgeGroup)groups.get(currentGroup + 1);
  }
  return null;
}","/** 
 * Returns the next group on given group list.
 */
public static EdgeGroup getNextGroup(List<EdgeGroup> groups,int currentDimensionIndex,int currentLevelIndex){
  int currentGroup=-1;
  for (int i=0; i < groups.size(); i++) {
    EdgeGroup gp=groups.get(i);
    if (gp.dimensionIndex == currentDimensionIndex && gp.levelIndex == currentLevelIndex) {
      currentGroup=i;
      break;
    }
  }
  if (currentGroup >= 0 && currentGroup < groups.size() - 1) {
    return groups.get(currentGroup + 1);
  }
  return null;
}",0.9688385269121812
72321,"/** 
 * Returns 1-based ending group index, 0 means end of entire edge.
 */
public static int getEndingGroupLevel(EdgeCursor edgeCursor,List groupCursors) throws OLAPException {
  if (edgeCursor.isLast()) {
    return 0;
  }
  for (int i=0; i < groupCursors.size() - 1; i++) {
    DimensionCursor dc=(DimensionCursor)groupCursors.get(i);
    if (GroupUtil.isDummyGroup(dc)) {
      return i == 0 ? 1 : i;
    }
    if (dc.getEdgeEnd() == edgeCursor.getPosition()) {
      return i + 1;
    }
  }
  return groupCursors.size();
}","/** 
 * Returns 1-based ending group index, 0 means end of entire edge.
 */
public static int getEndingGroupLevel(EdgeCursor edgeCursor,List<DimensionCursor> groupCursors) throws OLAPException {
  if (edgeCursor.isLast()) {
    return 0;
  }
  for (int i=0; i < groupCursors.size() - 1; i++) {
    DimensionCursor dc=groupCursors.get(i);
    if (GroupUtil.isDummyGroup(dc)) {
      return i == 0 ? 1 : i;
    }
    if (dc.getEdgeEnd() == edgeCursor.getPosition()) {
      return i + 1;
    }
  }
  return groupCursors.size();
}",0.967741935483871
72322,"/** 
 * Returns the span between current group to last group.
 */
public static int computeGroupSpan(List groups,int dimensionIndex,int levelIndex){
  int currentGroup=-1;
  for (int i=0; i < groups.size(); i++) {
    EdgeGroup gp=(EdgeGroup)groups.get(i);
    if (gp.dimensionIndex == dimensionIndex && gp.levelIndex == levelIndex) {
      currentGroup=i;
      break;
    }
  }
  if (currentGroup == -1) {
    return 1;
  }
  return groups.size() - currentGroup - 1;
}","/** 
 * Returns the span between current group to last group.
 */
public static int computeGroupSpan(List<EdgeGroup> groups,int dimensionIndex,int levelIndex){
  int currentGroup=-1;
  for (int i=0; i < groups.size(); i++) {
    EdgeGroup gp=groups.get(i);
    if (gp.dimensionIndex == dimensionIndex && gp.levelIndex == levelIndex) {
      currentGroup=i;
      break;
    }
  }
  if (currentGroup == -1) {
    return 1;
  }
  return groups.size() - currentGroup - 1;
}",0.9765957446808512
72323,"/** 
 * Computes row span for aggreagtion cell by given target span over dimension and level.
 * @param crosstabItem
 * @param rowGroups
 * @param targetDimensionIndex
 * @param targetLevelIndex
 * @param rowEdgeCursor
 * @return
 * @throws OLAPException
 */
public static int computeAggregationCellRowOverSpan(CrosstabReportItemHandle crosstabItem,List rowGroups,LevelHandle targetSpanLevel,EdgeCursor rowEdgeCursor) throws OLAPException {
  if (rowEdgeCursor == null || targetSpanLevel == null) {
    return 1;
  }
  long startPosition=rowEdgeCursor.getPosition();
  int targetGroupIndex=getGroupIndex(rowGroups,targetSpanLevel);
  boolean verticalHeader=MEASURE_DIRECTION_VERTICAL.equals(crosstabItem.getMeasureDirection());
  int factor=verticalHeader ? Math.max(crosstabItem.getMeasureCount(),1) : 1;
  if (targetGroupIndex != -1) {
    long currentPosition=startPosition;
    long edgeEndPosition;
    DimensionCursor dc;
    if (targetGroupIndex > 0) {
      dc=(DimensionCursor)rowEdgeCursor.getDimensionCursor().get(targetGroupIndex - 1);
      edgeEndPosition=dc.getEdgeEnd();
    }
 else {
      edgeEndPosition=Long.MAX_VALUE;
    }
    int span=0;
    while (currentPosition <= edgeEndPosition && !rowEdgeCursor.isAfterLast()) {
      span+=factor;
      for (int i=rowGroups.size() - 2; i >= targetGroupIndex; i--) {
        dc=(DimensionCursor)rowEdgeCursor.getDimensionCursor().get(i);
        if (isDummyGroup(dc)) {
          continue;
        }
        if (currentPosition == dc.getEdgeEnd()) {
          EdgeGroup gp=(EdgeGroup)rowGroups.get(i);
          DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,gp.dimensionIndex);
          LevelViewHandle lv=dv.getLevel(gp.levelIndex);
          if (lv.getAggregationHeader() != null) {
            span+=getTotalRowSpan(crosstabItem,gp.dimensionIndex,gp.levelIndex,verticalHeader);
          }
        }
 else {
          break;
        }
      }
      rowEdgeCursor.next();
      currentPosition=rowEdgeCursor.getPosition();
    }
    rowEdgeCursor.setPosition(startPosition);
    return span;
  }
  return factor;
}","/** 
 * Computes row span for aggreagtion cell by given target span over dimension and level.
 * @param crosstabItem
 * @param rowGroups
 * @param targetDimensionIndex
 * @param targetLevelIndex
 * @param rowEdgeCursor
 * @return
 * @throws OLAPException
 */
public static int computeAggregationCellRowOverSpan(CrosstabReportItemHandle crosstabItem,List<EdgeGroup> rowGroups,LevelHandle targetSpanLevel,EdgeCursor rowEdgeCursor) throws OLAPException {
  if (rowEdgeCursor == null || targetSpanLevel == null) {
    return 1;
  }
  long startPosition=rowEdgeCursor.getPosition();
  int targetGroupIndex=getGroupIndex(rowGroups,targetSpanLevel);
  boolean verticalHeader=MEASURE_DIRECTION_VERTICAL.equals(crosstabItem.getMeasureDirection());
  int factor=verticalHeader ? Math.max(crosstabItem.getMeasureCount(),1) : 1;
  if (targetGroupIndex != -1) {
    long currentPosition=startPosition;
    long edgeEndPosition;
    DimensionCursor dc;
    if (targetGroupIndex > 0) {
      dc=(DimensionCursor)rowEdgeCursor.getDimensionCursor().get(targetGroupIndex - 1);
      edgeEndPosition=dc.getEdgeEnd();
    }
 else {
      edgeEndPosition=Long.MAX_VALUE;
    }
    int span=0;
    while (currentPosition <= edgeEndPosition && !rowEdgeCursor.isAfterLast()) {
      span+=factor;
      for (int i=rowGroups.size() - 2; i >= targetGroupIndex; i--) {
        dc=(DimensionCursor)rowEdgeCursor.getDimensionCursor().get(i);
        if (isDummyGroup(dc)) {
          continue;
        }
        if (currentPosition == dc.getEdgeEnd()) {
          EdgeGroup gp=rowGroups.get(i);
          DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,gp.dimensionIndex);
          LevelViewHandle lv=dv.getLevel(gp.levelIndex);
          if (lv.getAggregationHeader() != null) {
            span+=getTotalRowSpan(crosstabItem,gp.dimensionIndex,gp.levelIndex,verticalHeader);
          }
        }
 else {
          break;
        }
      }
      rowEdgeCursor.next();
      currentPosition=rowEdgeCursor.getPosition();
    }
    rowEdgeCursor.setPosition(startPosition);
    return span;
  }
  return factor;
}",0.9947569113441372
72324,"/** 
 * Returns the previous group on specific axis
 */
public static EdgeGroup getPreviousGroup(List groups,int currentDimensionIndex,int currentLevelIndex){
  int currentGroup=-1;
  for (int i=0; i < groups.size(); i++) {
    EdgeGroup gp=(EdgeGroup)groups.get(i);
    if (gp.dimensionIndex == currentDimensionIndex && gp.levelIndex == currentLevelIndex) {
      currentGroup=i;
      break;
    }
  }
  if (currentGroup > 0 && currentGroup < groups.size()) {
    return (EdgeGroup)groups.get(currentGroup - 1);
  }
  return null;
}","/** 
 * Returns the previous group on specific axis
 */
public static EdgeGroup getPreviousGroup(List<EdgeGroup> groups,int currentDimensionIndex,int currentLevelIndex){
  int currentGroup=-1;
  for (int i=0; i < groups.size(); i++) {
    EdgeGroup gp=groups.get(i);
    if (gp.dimensionIndex == currentDimensionIndex && gp.levelIndex == currentLevelIndex) {
      currentGroup=i;
      break;
    }
  }
  if (currentGroup > 0 && currentGroup < groups.size()) {
    return groups.get(currentGroup - 1);
  }
  return null;
}",0.9687795648060548
72325,"/** 
 * Returns the next group index on given group list.
 */
public static int getNextGroupIndex(List groups,int currentDimensionIndex,int currentLevelIndex){
  int currentGroup=-1;
  for (int i=0; i < groups.size(); i++) {
    EdgeGroup gp=(EdgeGroup)groups.get(i);
    if (gp.dimensionIndex == currentDimensionIndex && gp.levelIndex == currentLevelIndex) {
      currentGroup=i;
      break;
    }
  }
  if (currentGroup >= 0 && currentGroup < groups.size() - 1) {
    return currentGroup + 1;
  }
  return -1;
}","/** 
 * Returns the next group index on given group list.
 */
public static int getNextGroupIndex(List<EdgeGroup> groups,int currentDimensionIndex,int currentLevelIndex){
  int currentGroup=-1;
  for (int i=0; i < groups.size(); i++) {
    EdgeGroup gp=groups.get(i);
    if (gp.dimensionIndex == currentDimensionIndex && gp.levelIndex == currentLevelIndex) {
      currentGroup=i;
      break;
    }
  }
  if (currentGroup >= 0 && currentGroup < groups.size() - 1) {
    return currentGroup + 1;
  }
  return -1;
}",0.9786407766990292
72326,"/** 
 * Checks if current group is the first group
 */
public static boolean isFirstGroup(List groups,int dimensionIndex,int levelIndex){
  if (groups.size() > 0) {
    EdgeGroup eg=(EdgeGroup)groups.get(0);
    return dimensionIndex == eg.dimensionIndex && levelIndex == eg.levelIndex;
  }
  return false;
}","/** 
 * Checks if current group is the first group
 */
public static boolean isFirstGroup(List<EdgeGroup> groups,int dimensionIndex,int levelIndex){
  if (groups.size() > 0) {
    EdgeGroup eg=groups.get(0);
    return dimensionIndex == eg.dimensionIndex && levelIndex == eg.levelIndex;
  }
  return false;
}",0.9642857142857144
72327,"/** 
 * Returns a list of groups on specific axis.
 */
public static List getGroups(CrosstabReportItemHandle crosstabItem,int axisType){
  List groups=new ArrayList();
  int dimCount=crosstabItem.getDimensionCount(axisType);
  if (dimCount > 0) {
    for (int i=0; i < dimCount; i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(axisType,i);
      for (int j=0; j < dv.getLevelCount(); j++) {
        groups.add(new EdgeGroup(i,j,dv.getCubeDimensionName(),dv.getLevel(j).getCubeLevelName()));
      }
    }
  }
  return groups;
}","/** 
 * Returns a list of groups on specific axis.
 */
public static List<EdgeGroup> getGroups(CrosstabReportItemHandle crosstabItem,int axisType){
  List<EdgeGroup> groups=new ArrayList<EdgeGroup>();
  int dimCount=crosstabItem.getDimensionCount(axisType);
  if (dimCount > 0) {
    for (int i=0; i < dimCount; i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(axisType,i);
      for (int j=0; j < dv.getLevelCount(); j++) {
        groups.add(new EdgeGroup(i,j,dv.getCubeDimensionName(),dv.getLevel(j).getCubeLevelName()));
      }
    }
  }
  return groups;
}",0.9704035874439462
72328,"protected void drawTextAt(ITextArea text,int x,int y,int width,int height,TextStyle textStyle){
  pageGraphic.drawText(text.getText(),x,y,width,height,textStyle);
}","protected void drawTextAt(ITextArea text,int x,int y,int width,int height,TextStyle textStyle){
  pageGraphic.drawText(text.getNotFlippedText(),x,y,width,height,textStyle);
}",0.970414201183432
72329,"private static void updateParameterDesign(DataSetDesign dataSetDesign,final QueryStatement queryStmt){
  if (dataSetDesign == null || queryStmt == null)   return;
  List paramVars=StatementHelper.getAllVariablesInQueryStatement(queryStmt,false);
  if (paramVars.isEmpty()) {
    dataSetDesign.setParameters(null);
    return;
  }
  DataSetParameters dataSetParams=DesignFactory.eINSTANCE.createDataSetParameters();
  dataSetDesign.setParameters(dataSetParams);
  Iterator paramVarsIter=paramVars.iterator();
  int index=0;
  while (paramVarsIter.hasNext()) {
    ValueExpressionVariable var=(ValueExpressionVariable)paramVarsIter.next();
    index++;
    ParameterDefinition paramDefn=DesignFactory.eINSTANCE.createParameterDefinition();
    paramDefn.setInOutMode(ParameterMode.IN_LITERAL);
    DataElementAttributes paramAttrs=DesignFactory.eINSTANCE.createDataElementAttributes();
    paramDefn.setAttributes(paramAttrs);
    paramAttrs.setPosition(index);
    paramAttrs.setName(var.getName());
    convertToDataElementAttributes(var,paramAttrs);
    adjustParameterDefinition(paramDefn);
    dataSetParams.getParameterDefinitions().add(paramDefn);
  }
}","private static void updateParameterDesign(DataSetDesign dataSetDesign,final QueryStatement queryStmt){
  if (dataSetDesign == null || queryStmt == null)   return;
  List paramVars=StatementHelper.getAllVariablesInQueryStatement(queryStmt,false);
  if (paramVars.isEmpty()) {
    dataSetDesign.setParameters(null);
    if (dataSetDesign.getPrivateProperties() != null) {
      dataSetDesign.getPrivateProperties().setProperty(PRIVATE_PRO_PARAMETERMETADATA,EMPTY_STRING);
    }
    return;
  }
  DataSetParameters dataSetParams=DesignFactory.eINSTANCE.createDataSetParameters();
  dataSetDesign.setParameters(dataSetParams);
  Iterator paramVarsIter=paramVars.iterator();
  int index=0;
  StringBuffer buf=new StringBuffer();
  while (paramVarsIter.hasNext()) {
    ValueExpressionVariable var=(ValueExpressionVariable)paramVarsIter.next();
    index++;
    ParameterDefinition paramDefn=DesignFactory.eINSTANCE.createParameterDefinition();
    paramDefn.setInOutMode(ParameterMode.IN_LITERAL);
    DataElementAttributes paramAttrs=DesignFactory.eINSTANCE.createDataElementAttributes();
    paramDefn.setAttributes(paramAttrs);
    paramAttrs.setPosition(index);
    paramAttrs.setName(var.getName());
    convertToDataElementAttributes(var,paramAttrs);
    adjustParameterDefinition(paramDefn);
    dataSetParams.getParameterDefinitions().add(paramDefn);
    if (var.getName() != null && var.getName().trim().length() > 0) {
      if (buf.toString().length() > 0) {
        buf.append(CONST_PARAMS_DELIMITER + index + CONST_PARAM_NAME_DELIMITER+ var.getName());
      }
 else {
        buf.append(index + CONST_PARAM_NAME_DELIMITER + var.getName());
      }
    }
  }
  if (dataSetDesign.getPrivateProperties() == null) {
    try {
      Properties props=new Properties();
      props.setProperty(PRIVATE_PRO_PARAMETERMETADATA,EMPTY_STRING);
      dataSetDesign.setPrivateProperties(DesignSessionUtil.createDataSetNonPublicProperties(dataSetDesign.getOdaExtensionDataSourceId(),dataSetDesign.getOdaExtensionDataSetId(),props));
    }
 catch (    OdaException e) {
      return;
    }
  }
  dataSetDesign.getPrivateProperties().setProperty(PRIVATE_PRO_PARAMETERMETADATA,buf.toString());
}",0.6925837320574163
72330,"/** 
 * intialize the render options used to render the report. the render options are load from: <li> engine level default options</li> <li> engine level format options</li> <li> engine level emitter options</li> <li> task level options </li>
 * @throws EngineException 
 */
protected void setupRenderOption() throws EngineException {
  ExtensionManager extManager=ExtensionManager.getInstance();
  if (renderOptions != null) {
    format=renderOptions.getOutputFormat();
    emitterID=renderOptions.getEmitterID();
    if (emitterID != null) {
      boolean validEmitterID=extManager.isValidEmitterID(emitterID);
      if (!validEmitterID) {
        log.log(Level.SEVERE,MessageConstants.INVALID_EMITTER_ID,emitterID);
        throw new EngineException(MessageConstants.INVALID_EMITTER_ID,emitterID);
      }
    }
 else {
      if (format == null) {
        format=RenderOption.OUTPUT_FORMAT_HTML;
        emitterID=RenderOption.OUTPUT_EMITTERID_HTML;
      }
 else {
        boolean supportedFormat=extManager.isSupportedFormat(format);
        if (!supportedFormat) {
          log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
          throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
        }
 else {
          emitterID=extManager.getEmitterID(format);
        }
      }
    }
  }
  Map appContext=executionContext.getAppContext();
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext instanceof PDFRenderContext) {
      PDFRenderContext pdfContext=(PDFRenderContext)renderContext;
      mergeOption(renderOptions,PDFRenderOption.BASE_URL,pdfContext.getBaseURL());
      mergeOption(renderOptions,PDFRenderOption.FONT_DIRECTORY,pdfContext.getFontDirectory());
      mergeOption(renderOptions,PDFRenderOption.SUPPORTED_IMAGE_FORMATS,pdfContext.getSupportedImageFormats());
      mergeOption(renderOptions,PDFRenderOption.IS_EMBEDDED_FONT,new Boolean(pdfContext.isEmbededFont()));
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext instanceof HTMLRenderContext) {
      HTMLRenderContext htmlContext=(HTMLRenderContext)renderContext;
      mergeOption(renderOptions,HTMLRenderOption.BASE_IMAGE_URL,htmlContext.getBaseImageURL());
      mergeOption(renderOptions,HTMLRenderOption.BASE_URL,htmlContext.getBaseURL());
      mergeOption(renderOptions,HTMLRenderOption.IMAGE_DIRECTROY,htmlContext.getImageDirectory());
      mergeOption(renderOptions,HTMLRenderOption.SUPPORTED_IMAGE_FORMATS,htmlContext.getSupportedImageFormats());
    }
  }
  HashMap options=new HashMap();
  HashMap configs=engine.getConfig().getEmitterConfigs();
  IRenderOption defaultOptions=(IRenderOption)configs.get(IEngineConfig.DEFAULT_RENDER_OPTION);
  if (defaultOptions == null) {
    defaultOptions=(IRenderOption)configs.get(IRenderOption.OUTPUT_FORMAT_HTML);
  }
  if (defaultOptions != null) {
    options.putAll(defaultOptions.getOptions());
  }
  IRenderOption formatOptions=(IRenderOption)configs.get(emitterID);
  if (formatOptions != null) {
    options.putAll(formatOptions.getOptions());
  }
  if (emitterID != null) {
    IRenderOption emitterOptions=(IRenderOption)configs.get(emitterID);
    if (emitterOptions != null) {
      options.putAll(emitterOptions.getOptions());
    }
  }
  if (renderOptions != null) {
    options.putAll(renderOptions.getOptions());
  }
  IRenderOption allOptions=new RenderOption(options);
  executionContext.setRenderOption(allOptions);
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext == null) {
      PDFRenderOption pdfOptions=new PDFRenderOption(allOptions);
      PDFRenderContext pdfContext=new PDFRenderContext();
      pdfContext.setBaseURL(pdfOptions.getBaseURL());
      pdfContext.setEmbededFont(pdfOptions.isEmbededFont());
      pdfContext.setFontDirectory(pdfOptions.getFontDirectory());
      pdfContext.setSupportedImageFormats(pdfOptions.getSupportedImageFormats());
      appContext.put(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT,pdfContext);
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext == null) {
      HTMLRenderContext htmlContext=new HTMLRenderContext();
      HTMLRenderOption htmlOptions=new HTMLRenderOption(allOptions);
      htmlContext.setBaseImageURL(htmlOptions.getBaseImageURL());
      htmlContext.setBaseURL(htmlOptions.getBaseURL());
      htmlContext.setImageDirectory(htmlOptions.getImageDirectory());
      htmlContext.setSupportedImageFormats(htmlOptions.getSupportedImageFormats());
      htmlContext.SetRenderOption(allOptions);
      appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,htmlContext);
    }
  }
}","/** 
 * intialize the render options used to render the report. the render options are load from: <li> engine level default options</li> <li> engine level format options</li> <li> engine level emitter options</li> <li> task level options </li>
 * @throws EngineException 
 */
protected void setupRenderOption() throws EngineException {
  ExtensionManager extManager=ExtensionManager.getInstance();
  if (renderOptions != null) {
    format=renderOptions.getOutputFormat();
    emitterID=renderOptions.getEmitterID();
    if (emitterID != null) {
      boolean validEmitterID=extManager.isValidEmitterID(emitterID);
      if (!validEmitterID) {
        log.log(Level.SEVERE,MessageConstants.INVALID_EMITTER_ID,emitterID);
        throw new EngineException(MessageConstants.INVALID_EMITTER_ID,emitterID);
      }
      if (null == format) {
        renderOptions.setOutputFormat(extManager.getFormat(emitterID));
      }
    }
 else {
      if (format == null) {
        format=RenderOption.OUTPUT_FORMAT_HTML;
        renderOptions.setOutputFormat(format);
        emitterID=RenderOption.OUTPUT_EMITTERID_HTML;
      }
 else {
        boolean supportedFormat=extManager.isSupportedFormat(format);
        if (!supportedFormat) {
          log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
          throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
        }
 else {
          emitterID=extManager.getEmitterID(format);
        }
      }
    }
  }
  Map appContext=executionContext.getAppContext();
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext instanceof PDFRenderContext) {
      PDFRenderContext pdfContext=(PDFRenderContext)renderContext;
      mergeOption(renderOptions,PDFRenderOption.BASE_URL,pdfContext.getBaseURL());
      mergeOption(renderOptions,PDFRenderOption.FONT_DIRECTORY,pdfContext.getFontDirectory());
      mergeOption(renderOptions,PDFRenderOption.SUPPORTED_IMAGE_FORMATS,pdfContext.getSupportedImageFormats());
      mergeOption(renderOptions,PDFRenderOption.IS_EMBEDDED_FONT,new Boolean(pdfContext.isEmbededFont()));
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext instanceof HTMLRenderContext) {
      HTMLRenderContext htmlContext=(HTMLRenderContext)renderContext;
      mergeOption(renderOptions,HTMLRenderOption.BASE_IMAGE_URL,htmlContext.getBaseImageURL());
      mergeOption(renderOptions,HTMLRenderOption.BASE_URL,htmlContext.getBaseURL());
      mergeOption(renderOptions,HTMLRenderOption.IMAGE_DIRECTROY,htmlContext.getImageDirectory());
      mergeOption(renderOptions,HTMLRenderOption.SUPPORTED_IMAGE_FORMATS,htmlContext.getSupportedImageFormats());
    }
  }
  HashMap options=new HashMap();
  HashMap configs=engine.getConfig().getEmitterConfigs();
  IRenderOption defaultOptions=(IRenderOption)configs.get(IEngineConfig.DEFAULT_RENDER_OPTION);
  if (defaultOptions == null) {
    defaultOptions=(IRenderOption)configs.get(IRenderOption.OUTPUT_FORMAT_HTML);
  }
  if (defaultOptions != null) {
    options.putAll(defaultOptions.getOptions());
  }
  IRenderOption formatOptions=(IRenderOption)configs.get(emitterID);
  if (formatOptions != null) {
    options.putAll(formatOptions.getOptions());
  }
  if (emitterID != null) {
    IRenderOption emitterOptions=(IRenderOption)configs.get(emitterID);
    if (emitterOptions != null) {
      options.putAll(emitterOptions.getOptions());
    }
  }
  if (renderOptions != null) {
    options.putAll(renderOptions.getOptions());
  }
  IRenderOption allOptions=new RenderOption(options);
  executionContext.setRenderOption(allOptions);
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext == null) {
      PDFRenderOption pdfOptions=new PDFRenderOption(allOptions);
      PDFRenderContext pdfContext=new PDFRenderContext();
      pdfContext.setBaseURL(pdfOptions.getBaseURL());
      pdfContext.setEmbededFont(pdfOptions.isEmbededFont());
      pdfContext.setFontDirectory(pdfOptions.getFontDirectory());
      pdfContext.setSupportedImageFormats(pdfOptions.getSupportedImageFormats());
      appContext.put(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT,pdfContext);
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext == null) {
      HTMLRenderContext htmlContext=new HTMLRenderContext();
      HTMLRenderOption htmlOptions=new HTMLRenderOption(allOptions);
      htmlContext.setBaseImageURL(htmlOptions.getBaseImageURL());
      htmlContext.setBaseURL(htmlOptions.getBaseURL());
      htmlContext.setImageDirectory(htmlOptions.getImageDirectory());
      htmlContext.setSupportedImageFormats(htmlOptions.getSupportedImageFormats());
      htmlContext.SetRenderOption(allOptions);
      appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,htmlContext);
    }
  }
}",0.9795069795069796
72331,"public IReportItemExecutor getNextChild(){
  if (null != childIterator && childIterator.hasNext()) {
    IContent child=(IContent)childIterator.next();
    return manager.createExecutor(child);
  }
  return null;
}","public IReportItemExecutor getNextChild(){
  if (null != childIterator && childIterator.hasNext()) {
    IContent child=(IContent)childIterator.next();
    return manager.createExecutor(this,child);
  }
  return null;
}",0.9884526558891455
72332,"public IContent execute(){
  if (null == content) {
    return null;
  }
  childIterator=content.getChildren().iterator();
  if (cloneContent) {
    return content.cloneContent(false);
  }
  return content;
}","public IContent execute(){
  if (null == content) {
    return null;
  }
  childIterator=content.getChildren().iterator();
  if (cloneContent) {
    content=content.cloneContent(false);
    IReportItemExecutor parent=getParent();
    if (parent != null) {
      content.setParent(parent.getContent());
    }
  }
  return content;
}",0.686456400742115
72333,"DOMReportItemExecutor createExecutor(IContent content){
  DOMReportItemExecutor executor=null;
  if (!freeList.isEmpty()) {
    executor=(DOMReportItemExecutor)freeList.removeFirst();
  }
 else {
    executor=new DOMReportItemExecutor(this);
  }
  executor.setContent(content);
  return executor;
}","DOMReportItemExecutor createExecutor(DOMReportItemExecutor parent,IContent content){
  DOMReportItemExecutor executor=null;
  if (!freeList.isEmpty()) {
    executor=(DOMReportItemExecutor)freeList.removeFirst();
  }
 else {
    executor=new DOMReportItemExecutor(this);
  }
  executor.setContent(content);
  executor.setParent(parent);
  return executor;
}",0.9099236641221374
72334,"/** 
 * Returns current page instance if the currently selected page index is not -1, or <code>null</code> if it is.
 * @return active page instance if selected, or <code>null</code> if nopage is currently active.
 */
public IFormPage getCurrentPageInstance(){
  int index=getCurrentPage();
  if (index != -1) {
    Object page=pages.get(index);
    if (page instanceof IFormPage)     return (IFormPage)page;
  }
  return null;
}","/** 
 * Returns current page instance if the currently selected page index is not -1, or <code>null</code> if it is.
 * @return active page instance if selected, or <code>null</code> if no pageis currently active.
 */
public IFormPage getCurrentPageInstance(){
  int index=getCurrentPage();
  if (index != -1) {
    Object page=pages.get(index);
    if (page instanceof IFormPage)     return (IFormPage)page;
  }
  return null;
}",0.9883449883449884
72335,"public void setFocus(){
  super.setFocus();
  if (getCurrentPage() < 0 || getCurrentPage() > pages.size() - 1) {
    return;
  }
  bingdingKey(getCurrentPage());
}","public void setFocus(){
  super.setFocus();
  if (pages == null || getCurrentPage() < 0 || getCurrentPage() > pages.size() - 1) {
    return;
  }
  bingdingKey(getCurrentPage());
}",0.9504373177842566
72336,"/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DteLevelDataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByRowKeyCountTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.util.DirectedGraphTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.DimensionSegmentsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableHelperTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableHelperTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableRowIteratorWithFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}","/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DteLevelDataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByRowKeyCountTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.util.DirectedGraphTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.DimensionSegmentsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableHelperTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableHelperTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableRowIteratorWithFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}",0.9717191763830316
72337,"/** 
 * Tests ACLExpression for report item
 * @throws SemanticException
 */
public void testACL() throws SemanticException {
  TextItemHandle textHandle=(TextItemHandle)designHandle.findElement(""String_Node_Str"");
  String aclExp=""String_Node_Str"";
  textHandle.setACLExpression(aclExp);
  assertEquals(aclExp,textHandle.getACLExpression());
  assertFalse(textHandle.cascadeACL());
  textHandle.setCascadeACL(true);
  assertFalse(textHandle.cascadeACL());
  assertFalse((Boolean)(textHandle.getProperty(IReportItemModel.CASCADE_ACL_PROP)));
  aclExp=""String_Node_Str"";
  textHandle.setACLExpression(aclExp);
  assertEquals(aclExp,textHandle.getACLExpression());
  aclExp=""String_Node_Str"";
  textHandle.setACLExpression(aclExp);
  assertEquals(aclExp,textHandle.getACLExpression());
  aclExp=""String_Node_Str"";
  textHandle.setACLExpression(aclExp);
  assertEquals(aclExp,textHandle.getACLExpression());
}","/** 
 * Tests ACLExpression for report item
 * @throws SemanticException
 */
public void testACL() throws SemanticException {
  TextItemHandle textHandle=(TextItemHandle)designHandle.findElement(""String_Node_Str"");
  String aclExp=""String_Node_Str"";
  textHandle.setACLExpression(aclExp);
  assertEquals(aclExp,textHandle.getACLExpression());
  assertFalse(textHandle.cascadeACL());
  textHandle.setCascadeACL(true);
  assertFalse(textHandle.cascadeACL());
  assertFalse(((Boolean)textHandle.getProperty(IReportItemModel.CASCADE_ACL_PROP)).booleanValue());
  aclExp=""String_Node_Str"";
  textHandle.setACLExpression(aclExp);
  assertEquals(aclExp,textHandle.getACLExpression());
  aclExp=""String_Node_Str"";
  textHandle.setACLExpression(aclExp);
  assertEquals(aclExp,textHandle.getACLExpression());
  aclExp=""String_Node_Str"";
  textHandle.setACLExpression(aclExp);
  assertEquals(aclExp,textHandle.getACLExpression());
}",0.9906951286261632
72338,"private boolean checkTransposed(AggregationCellHandle cell){
  if (ChartXTabUtil.isDetailCell(cell)) {
    if (cell.getAggregationOnColumn() == null) {
      return true;
    }
    MeasureViewHandle mv=(MeasureViewHandle)cell.getContainer();
    for (int i=0; i < mv.getAggregationCount(); i++) {
      AggregationCellHandle otherCell=mv.getAggregationCell(i);
      if (cell.getDimensionView(ICrosstabConstants.ROW_AXIS_TYPE) == otherCell.getDimensionView(ICrosstabConstants.ROW_AXIS_TYPE) && cell.getLevelView(ICrosstabConstants.ROW_AXIS_TYPE) == otherCell.getLevelView(ICrosstabConstants.ROW_AXIS_TYPE)) {
        Object content=ChartXTabUtil.getFirstContent(otherCell);
        if (ChartXTabUtil.isPlotChart((DesignElementHandle)content)) {
          return true;
        }
      }
    }
    Object content=ChartXTabUtil.getFirstContent(cell);
    if (ChartXTabUtil.isPlotChart((DesignElementHandle)content)) {
      return ((ChartWithAxes)ChartXTabUtil.getChartFromHandle((ExtendedItemHandle)content)).isTransposed();
    }
  }
  if (ChartXTabUtil.isAggregationCell(cell)) {
    LevelHandle levelRow=cell.getAggregationOnRow();
    LevelHandle levelColumn=cell.getAggregationOnColumn();
    if (levelRow != null && levelColumn == null) {
      return true;
    }
    if (levelRow == null && levelColumn != null) {
      return false;
    }
    if (levelRow != null && levelColumn != null) {
      return isInSubtotal(cell,ICrosstabConstants.COLUMN_AXIS_TYPE);
    }
    return false;
  }
  List<ExtendedItemHandle> chartInOtherMeasure=ChartXTabUIUtil.findChartInOtherMeasures(cell,true);
  if (!chartInOtherMeasure.isEmpty()) {
    return ((ChartWithAxes)ChartXTabUtil.getChartFromHandle(chartInOtherMeasure.get(0))).isTransposed();
  }
  return cell.getCrosstab().getMeasureDirection().equals(ICrosstabConstants.MEASURE_DIRECTION_HORIZONTAL);
}","private boolean checkTransposed(AggregationCellHandle cell){
  if (ChartXTabUtil.isDetailCell(cell)) {
    if (cell.getAggregationOnColumn() == null) {
      return true;
    }
    if (cell.getAggregationOnRow() == null) {
      return false;
    }
    MeasureViewHandle mv=(MeasureViewHandle)cell.getContainer();
    for (int i=0; i < mv.getAggregationCount(); i++) {
      AggregationCellHandle otherCell=mv.getAggregationCell(i);
      if (cell.getDimensionView(ICrosstabConstants.ROW_AXIS_TYPE) == otherCell.getDimensionView(ICrosstabConstants.ROW_AXIS_TYPE) && cell.getLevelView(ICrosstabConstants.ROW_AXIS_TYPE) == otherCell.getLevelView(ICrosstabConstants.ROW_AXIS_TYPE)) {
        Object content=ChartXTabUtil.getFirstContent(otherCell);
        if (ChartXTabUtil.isPlotChart((DesignElementHandle)content)) {
          return true;
        }
      }
    }
    Object content=ChartXTabUtil.getFirstContent(cell);
    if (ChartXTabUtil.isPlotChart((DesignElementHandle)content)) {
      return ((ChartWithAxes)ChartXTabUtil.getChartFromHandle((ExtendedItemHandle)content)).isTransposed();
    }
  }
  if (ChartXTabUtil.isAggregationCell(cell)) {
    LevelHandle levelRow=cell.getAggregationOnRow();
    LevelHandle levelColumn=cell.getAggregationOnColumn();
    if (levelRow != null && levelColumn == null) {
      return true;
    }
    if (levelRow == null && levelColumn != null) {
      return false;
    }
    if (levelRow != null && levelColumn != null) {
      return isInSubtotal(cell,ICrosstabConstants.COLUMN_AXIS_TYPE);
    }
    return false;
  }
  List<ExtendedItemHandle> chartInOtherMeasure=ChartXTabUIUtil.findChartInOtherMeasures(cell,true);
  if (!chartInOtherMeasure.isEmpty()) {
    return ((ChartWithAxes)ChartXTabUtil.getChartFromHandle(chartInOtherMeasure.get(0))).isTransposed();
  }
  return cell.getCrosstab().getMeasureDirection().equals(ICrosstabConstants.MEASURE_DIRECTION_HORIZONTAL);
}",0.980911983032874
72339,"public Composite createDataDragSource(Composite parent){
  cmpStack=new Composite(parent,SWT.NONE);
  cmpStack.setLayoutData(new GridData(GridData.FILL_BOTH));
  stackLayout=new StackLayout();
  stackLayout.marginHeight=0;
  stackLayout.marginWidth=0;
  cmpStack.setLayout(stackLayout);
  cmpCubeTree=ChartUIUtil.createCompositeWrapper(cmpStack);
  cmpDataPreview=ChartUIUtil.createCompositeWrapper(cmpStack);
  Label label=new Label(cmpCubeTree,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell()) {
    Label description=new Label(cmpCubeTree,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      description.setLayoutData(gd);
      description.setText(Messages.getString(""String_Node_Str""));
    }
  }
  cubeTreeViewer=new TreeViewer(cmpCubeTree,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  cubeTreeViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)cubeTreeViewer.getTree().getLayoutData()).heightHint=120;
  ViewsTreeProvider provider=new ViewsTreeProvider();
  cubeTreeViewer.setLabelProvider(provider);
  cubeTreeViewer.setContentProvider(provider);
  cubeTreeViewer.setInput(getCube());
  final DragSource dragSource=new DragSource(cubeTreeViewer.getTree(),DND.DROP_COPY);
  dragSource.setTransfer(new Transfer[]{SimpleTextTransfer.getInstance()});
  dragSource.addDragListener(new DragSourceListener(){
    private String text=null;
    public void dragFinished(    DragSourceEvent event){
    }
    public void dragSetData(    DragSourceEvent event){
      event.data=text;
    }
    public void dragStart(    DragSourceEvent event){
      text=createCubeExpression();
      if (text == null) {
        event.doit=false;
      }
    }
  }
);
  cubeTreeViewer.getTree().addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      if (event.button == 3 && event.widget instanceof Tree) {
        Tree tree=(Tree)event.widget;
        TreeItem treeItem=tree.getSelection()[0];
        if (treeItem.getData() instanceof LevelHandle || treeItem.getData() instanceof MeasureHandle) {
          tree.setMenu(createMenuManager(treeItem.getData()).createContextMenu(tree));
          tree.getMenu().setVisible(true);
        }
 else {
          tree.setMenu(null);
        }
      }
    }
  }
);
  label=new Label(cmpDataPreview,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  Label description=new Label(cmpDataPreview,SWT.WRAP);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    description.setLayoutData(gd);
    description.setText(Messages.getString(""String_Node_Str""));
  }
  tablePreview=new CustomPreviewTable(cmpDataPreview,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.FULL_SELECTION);
{
    GridData gridData=new GridData(GridData.FILL_BOTH);
    gridData.widthHint=400;
    gridData.heightHint=120;
    tablePreview.setLayoutData(gridData);
    tablePreview.setHeaderAlignment(SWT.LEFT);
    tablePreview.addListener(CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE,this);
  }
  updateDragDataSource();
  return cmpStack;
}","public Composite createDataDragSource(Composite parent){
  cmpStack=new Composite(parent,SWT.NONE);
  cmpStack.setLayoutData(new GridData(GridData.FILL_BOTH));
  stackLayout=new StackLayout();
  stackLayout.marginHeight=0;
  stackLayout.marginWidth=0;
  cmpStack.setLayout(stackLayout);
  cmpCubeTree=ChartUIUtil.createCompositeWrapper(cmpStack);
  cmpDataPreview=ChartUIUtil.createCompositeWrapper(cmpStack);
  Label label=new Label(cmpCubeTree,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    Label description=new Label(cmpCubeTree,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      description.setLayoutData(gd);
      description.setText(Messages.getString(""String_Node_Str""));
    }
  }
  cubeTreeViewer=new TreeViewer(cmpCubeTree,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  cubeTreeViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)cubeTreeViewer.getTree().getLayoutData()).heightHint=120;
  ViewsTreeProvider provider=new ViewsTreeProvider();
  cubeTreeViewer.setLabelProvider(provider);
  cubeTreeViewer.setContentProvider(provider);
  cubeTreeViewer.setInput(getCube());
  final DragSource dragSource=new DragSource(cubeTreeViewer.getTree(),DND.DROP_COPY);
  dragSource.setTransfer(new Transfer[]{SimpleTextTransfer.getInstance()});
  dragSource.addDragListener(new DragSourceListener(){
    private String text=null;
    public void dragFinished(    DragSourceEvent event){
    }
    public void dragSetData(    DragSourceEvent event){
      event.data=text;
    }
    public void dragStart(    DragSourceEvent event){
      text=createCubeExpression();
      if (text == null) {
        event.doit=false;
      }
    }
  }
);
  cubeTreeViewer.getTree().addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      if (event.button == 3 && event.widget instanceof Tree) {
        Tree tree=(Tree)event.widget;
        TreeItem treeItem=tree.getSelection()[0];
        if (treeItem.getData() instanceof LevelHandle || treeItem.getData() instanceof MeasureHandle) {
          tree.setMenu(createMenuManager(treeItem.getData()).createContextMenu(tree));
          tree.getMenu().setVisible(true);
        }
 else {
          tree.setMenu(null);
        }
      }
    }
  }
);
  label=new Label(cmpDataPreview,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    Label description=new Label(cmpDataPreview,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      description.setLayoutData(gd);
      description.setText(Messages.getString(""String_Node_Str""));
    }
  }
  tablePreview=new CustomPreviewTable(cmpDataPreview,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.FULL_SELECTION);
{
    GridData gridData=new GridData(GridData.FILL_BOTH);
    gridData.widthHint=400;
    gridData.heightHint=120;
    tablePreview.setLayoutData(gridData);
    tablePreview.setHeaderAlignment(SWT.LEFT);
    tablePreview.addListener(CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE,this);
  }
  updateDragDataSource();
  return cmpStack;
}",0.9810462471569372
72340,"@Override public void updateView(AggregationCellHandle cell,int type){
  Object contentItem=ChartXTabUtil.getFirstContent(cell);
  if (contentItem instanceof ExtendedItemHandle) {
    ExtendedItemHandle handle=(ExtendedItemHandle)contentItem;
    try {
      if (ChartXTabUtil.isPlotChart(handle)) {
        ChartReportItemImpl reportItem=(ChartReportItemImpl)handle.getReportItem();
        ChartWithAxes cm=(ChartWithAxes)reportItem.getProperty(ChartReportItemConstants.PROPERTY_CHART);
        ChartWithAxes cmNew=cm;
        if (cm == null) {
          return;
        }
        cmNew=(ChartWithAxes)EcoreUtil.copy(cm);
        if (type == CHANGE_ORIENTATION_TYPE) {
          cmNew.setTransposed(cell.getCrosstab().getMeasureDirection().equals(ICrosstabConstants.MEASURE_DIRECTION_HORIZONTAL));
        }
        updateChartQueries(cmNew,cell);
        reportItem.executeSetModelCommand(handle,cm,cmNew);
        if (cmNew.isTransposed()) {
          cell.setSpanOverOnRow(cell.getAggregationOnRow());
          cell.setSpanOverOnColumn(null);
        }
 else {
          cell.setSpanOverOnColumn(cell.getAggregationOnColumn());
          cell.setSpanOverOnRow(null);
        }
        if (type == CHANGE_ORIENTATION_TYPE) {
          ChartXTabUIUtil.updateXTabForAxis(cell,handle,cm.isTransposed(),cmNew);
        }
 else {
          ChartXTabUIUtil.updateAxisChart(cell,cmNew,handle);
          ChartXTabUIUtil.updateXTabDirection(cell.getCrosstab(),cmNew.isTransposed());
        }
        ChartInXTabStatusManager.updateGrandItemStatus(cell);
      }
 else       if (ChartXTabUtil.isAxisChart(handle)) {
        ExtendedItemHandle hostChartHandle=(ExtendedItemHandle)handle.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
        if (hostChartHandle == null) {
          handle.dropAndClear();
          return;
        }
        if (type != CHANGE_ORIENTATION_TYPE) {
          ChartReportItemImpl reportItem=(ChartReportItemImpl)handle.getReportItem();
          ChartWithAxes cm=(ChartWithAxes)reportItem.getProperty(ChartReportItemConstants.PROPERTY_CHART);
          ChartXTabUIUtil.updateXTabDirection(cell.getCrosstab(),cm.isTransposed());
        }
      }
    }
 catch (    BirtException e) {
      ExceptionHandler.handle(e);
    }
  }
}","@Override public void updateView(AggregationCellHandle cell,int type){
  Object contentItem=ChartXTabUtil.getFirstContent(cell);
  if (contentItem instanceof ExtendedItemHandle) {
    ExtendedItemHandle handle=(ExtendedItemHandle)contentItem;
    try {
      if (ChartXTabUtil.isPlotChart(handle)) {
        ChartReportItemImpl reportItem=(ChartReportItemImpl)handle.getReportItem();
        ChartWithAxes cm=(ChartWithAxes)reportItem.getProperty(ChartReportItemConstants.PROPERTY_CHART);
        ChartWithAxes cmNew=cm;
        if (cm == null) {
          return;
        }
        cmNew=(ChartWithAxes)EcoreUtil.copy(cm);
        if (type == CHANGE_ORIENTATION_TYPE && cell.getAggregationOnColumn() != null && cell.getAggregationOnRow() != null && !ChartXTabUtil.isAggregationCell(cell)) {
          cmNew.setTransposed(cell.getCrosstab().getMeasureDirection().equals(ICrosstabConstants.MEASURE_DIRECTION_HORIZONTAL));
        }
        updateChartQueries(cmNew,cell);
        reportItem.executeSetModelCommand(handle,cm,cmNew);
        if (cmNew.isTransposed()) {
          cell.setSpanOverOnRow(cell.getAggregationOnRow());
          cell.setSpanOverOnColumn(null);
        }
 else {
          cell.setSpanOverOnColumn(cell.getAggregationOnColumn());
          cell.setSpanOverOnRow(null);
        }
        if (type == CHANGE_ORIENTATION_TYPE) {
          ChartXTabUIUtil.updateXTabForAxis(cell,handle,cm.isTransposed(),cmNew);
        }
 else {
          ChartXTabUIUtil.updateAxisChart(cell,cmNew,handle);
          ChartXTabUIUtil.updateXTabDirection(cell.getCrosstab(),cmNew.isTransposed());
        }
        ChartInXTabStatusManager.updateGrandItemStatus(cell);
      }
 else       if (ChartXTabUtil.isAxisChart(handle)) {
        ExtendedItemHandle hostChartHandle=(ExtendedItemHandle)handle.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
        if (hostChartHandle == null) {
          handle.dropAndClear();
          return;
        }
        if (type != CHANGE_ORIENTATION_TYPE) {
          ChartReportItemImpl reportItem=(ChartReportItemImpl)handle.getReportItem();
          ChartWithAxes cm=(ChartWithAxes)reportItem.getProperty(ChartReportItemConstants.PROPERTY_CHART);
          ChartXTabUIUtil.updateXTabDirection(cell.getCrosstab(),cm.isTransposed());
        }
      }
    }
 catch (    BirtException e) {
      ExceptionHandler.handle(e);
    }
  }
}",0.9740843863782396
72341,"/** 
 * @param interval
 * @param dataType
 * @param intervalStart
 * @param intervalRange
 * @return
 * @throws DataException
 */
public static ICalculator getGroupCalculator(int interval,int dataType,Object intervalStart,double intervalRange) throws AdapterException {
  if (!isValidInterval(interval,dataType)) {
    return null;
  }
  try {
switch (interval) {
case IGroupDefinition.YEAR_INTERVAL:
      return new YearGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.MONTH_INTERVAL:
    return new MonthGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.QUARTER_INTERVAL:
  return new QuarterGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.WEEK_INTERVAL:
return new WeekGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.DAY_INTERVAL:
return new DayGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.HOUR_INTERVAL:
return new HourGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.MINUTE_INTERVAL:
return new MinuteGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.SECOND_INTERVAL:
return new SecondGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.NUMERIC_INTERVAL:
return new NumericGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.STRING_PREFIX_INTERVAL:
return new StringGroupCalculator(intervalStart,intervalRange);
default :
throw new DataException(ResourceConstants.BAD_GROUP_INTERVAL_INVALID);
}
}
 catch (BirtException be) {
throw new AdapterException(be.getLocalizedMessage());
}
}","/** 
 * @param interval
 * @param dataType
 * @param intervalStart
 * @param intervalRange
 * @return
 * @throws DataException
 */
public static ICalculator getGroupCalculator(int interval,int dataType,Object intervalStart,double intervalRange) throws AdapterException {
  if (!isValidInterval(interval,dataType)) {
    return null;
  }
  try {
switch (interval) {
case IGroupDefinition.YEAR_INTERVAL:
      return new YearGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.MONTH_INTERVAL:
    return new MonthGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.QUARTER_INTERVAL:
  return new QuarterGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.WEEK_INTERVAL:
return new WeekGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.DAY_INTERVAL:
return new DayGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.HOUR_INTERVAL:
return new HourGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.MINUTE_INTERVAL:
return new MinuteGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.SECOND_INTERVAL:
return new SecondGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.NUMERIC_INTERVAL:
return new NumericGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.STRING_PREFIX_INTERVAL:
return new StringGroupCalculator(intervalStart,intervalRange);
default :
throw new DataException(ResourceConstants.BAD_GROUP_INTERVAL_INVALID);
}
}
 catch (BirtException be) {
throw new AdapterException(be.getLocalizedMessage(),be);
}
}",0.9990381532542482
72342,"/** 
 * @param cubeHandle
 * @param query
 * @param resultMetaList
 * @throws DataException 
 * @throws AdapterException 
 */
private static void prepareMeasure(TabularCubeHandle cubeHandle,QueryDefinition query,List metaList) throws AdapterException {
  try {
    List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
    for (int i=0; i < measureGroups.size(); i++) {
      MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
      List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
      for (int j=0; j < measures.size(); j++) {
        MeasureHandle measure=(MeasureHandle)measures.get(j);
        String function=measure.getFunction();
        String exprText=measure.getMeasureExpression();
        IScriptExpression expr=exprText != null ? new ScriptExpression(exprText) : null;
        if (query.getGroups().size() > 0) {
          Binding binding=new Binding(measure.getName(),expr);
          binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(function));
          IGroupDefinition group=(IGroupDefinition)query.getGroups().get(query.getGroups().size() - 1);
          binding.addAggregateOn(group.getName());
          query.addBinding(binding);
        }
 else {
          query.addBinding(new Binding(measure.getName(),expr));
        }
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(measure.getName(),null,DataSetIterator.ColumnMeta.MEASURE_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(measure.getDataType()));
        metaList.add(meta);
      }
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}","/** 
 * @param cubeHandle
 * @param query
 * @param resultMetaList
 * @throws DataException 
 * @throws AdapterException 
 */
private static void prepareMeasure(TabularCubeHandle cubeHandle,QueryDefinition query,List metaList) throws AdapterException {
  try {
    List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
    for (int i=0; i < measureGroups.size(); i++) {
      MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
      List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
      for (int j=0; j < measures.size(); j++) {
        MeasureHandle measure=(MeasureHandle)measures.get(j);
        String function=measure.getFunction();
        String exprText=measure.getMeasureExpression();
        IScriptExpression expr=exprText != null ? new ScriptExpression(exprText) : null;
        if (query.getGroups().size() > 0) {
          Binding binding=new Binding(measure.getName(),expr);
          binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(function));
          IGroupDefinition group=(IGroupDefinition)query.getGroups().get(query.getGroups().size() - 1);
          binding.addAggregateOn(group.getName());
          query.addBinding(binding);
        }
 else {
          query.addBinding(new Binding(measure.getName(),expr));
        }
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(measure.getName(),null,DataSetIterator.ColumnMeta.MEASURE_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(measure.getDataType()));
        metaList.add(meta);
      }
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9994026284348864
72343,"/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws AdapterException
 */
private static void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String dimName) throws AdapterException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      DataSetIterator.ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange())),DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=DataSetIterator.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),processor,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        IDataProcessor processor=null;
        String bindingExpr=null;
        if (level.getDateTimeLevelType() != null && DataSetIterator.DATE_TIME_ATTR_NAME.equals(levelAttr.getName())) {
          processor=new DataSetIterator.DateTimeAttributeProcessor(level.getDateTimeLevelType());
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
        }
 else {
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName());
        }
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName())),processor,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(bindingExpr)));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getDisplayColumnName(level.getName())),null,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(level.getDisplayColumnName())));
      }
      String levelName=DataSetIterator.createLevelName(dimName,level.getName());
      query.addBinding(new Binding(levelName,new ScriptExpression(exprString,type)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      gd.setKeyExpression(ExpressionUtil.createJSRowExpression(levelName));
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}","/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws AdapterException
 */
private static void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String dimName) throws AdapterException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      DataSetIterator.ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange())),DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=DataSetIterator.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),processor,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        IDataProcessor processor=null;
        String bindingExpr=null;
        if (level.getDateTimeLevelType() != null && DataSetIterator.DATE_TIME_ATTR_NAME.equals(levelAttr.getName())) {
          processor=new DataSetIterator.DateTimeAttributeProcessor(level.getDateTimeLevelType());
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
        }
 else {
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName());
        }
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName())),processor,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(bindingExpr)));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getDisplayColumnName(level.getName())),null,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(level.getDisplayColumnName())));
      }
      String levelName=DataSetIterator.createLevelName(dimName,level.getName());
      query.addBinding(new Binding(levelName,new ScriptExpression(exprString,type)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      gd.setKeyExpression(ExpressionUtil.createJSRowExpression(levelName));
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9998220007119972
72344,"public Object process(Object d) throws AdapterException {
  try {
    return this.calculator.calculate(d);
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}","public Object process(Object d) throws AdapterException {
  try {
    return this.calculator.calculate(d);
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9950738916256158
72345,"/** 
 * @param queryDefn
 * @param paramBindingIt
 * @param filterIt
 * @param bindingIt
 * @throws AdapterException 
 */
private void populateQueryDefn(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt,boolean disAllowAggregation) throws AdapterException {
  try {
    while (bindingIt != null && bindingIt.hasNext()) {
      IBinding binding=this.modelAdaptor.adaptBinding((ComputedColumnHandle)bindingIt.next());
      if (disAllowAggregation && binding.getAggrFunction() != null)       continue;
      queryDefn.addBinding(binding);
    }
    List parameterBindings=convertParamterBindings(paramBindingIt);
    if (parameterBindings != null)     queryDefn.getInputParamBindings().addAll(parameterBindings);
    List filters=convertFilters(filterIt);
    if (filters != null)     queryDefn.getFilters().addAll(filters);
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}","/** 
 * @param queryDefn
 * @param paramBindingIt
 * @param filterIt
 * @param bindingIt
 * @throws AdapterException 
 */
private void populateQueryDefn(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt,boolean disAllowAggregation) throws AdapterException {
  try {
    while (bindingIt != null && bindingIt.hasNext()) {
      IBinding binding=this.modelAdaptor.adaptBinding((ComputedColumnHandle)bindingIt.next());
      if (disAllowAggregation && binding.getAggrFunction() != null)       continue;
      queryDefn.addBinding(binding);
    }
    List parameterBindings=convertParamterBindings(paramBindingIt);
    if (parameterBindings != null)     queryDefn.getInputParamBindings().addAll(parameterBindings);
    List filters=convertFilters(filterIt);
    if (filters != null)     queryDefn.getFilters().addAll(filters);
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9989550679205852
72346,"private void outputNamedImageSource(String name,ArrayImageSource imageSource){
  out.println('/' + name + ""String_Node_Str"");
  int count=outputImageSource(imageSource,""String_Node_Str"",""String_Node_Str"");
  out.print(""String_Node_Str"" + count + ""String_Node_Str"");
  out.println(imageSource.getWidth() + ""String_Node_Str"" + imageSource.getHeight()+ ""String_Node_Str"");
}","private void outputNamedImageSource(String name,ArrayImageSource imageSource){
  out.println(""String_Node_Str"");
  outputImageSource(imageSource);
  out.println(""String_Node_Str"" + name + ""String_Node_Str""+ imageSource.getWidth()+ ""String_Node_Str""+ imageSource.getHeight()+ ""String_Node_Str"");
}",0.5427286356821589
72347,"private void outputUncachedImage(Image image,float x,float y,float width,float height) throws IOException {
  ArrayImageSource imageSource=getImageSource(image);
  out.print(x + ""String_Node_Str"" + y+ ""String_Node_Str"");
  out.print(width + ""String_Node_Str"" + height+ ""String_Node_Str"");
  out.print(imageSource.getWidth() + ""String_Node_Str"" + imageSource.getHeight());
  out.println(""String_Node_Str"");
  outputUncachedImageSource(imageSource);
  out.println(""String_Node_Str"");
}","private void outputUncachedImage(Image image,float x,float y,float width,float height) throws IOException {
  ArrayImageSource imageSource=getImageSource(image);
  out.print(x + ""String_Node_Str"" + y+ ""String_Node_Str"");
  out.print(width + ""String_Node_Str"" + height+ ""String_Node_Str"");
  out.print(imageSource.getWidth() + ""String_Node_Str"" + imageSource.getHeight());
  out.println(""String_Node_Str"");
  outputImageSource(imageSource);
  out.println(""String_Node_Str"");
}",0.9916492693110648
72348,"private int outputImageSource(ArrayImageSource imageSource,String prefix,String suffix){
  int originalWidth=imageSource.getWidth();
  int originalHeight=imageSource.getHeight();
  StringBuffer buffer=new StringBuffer();
  int count=0;
  for (int i=0; i < originalHeight; i++) {
    for (int j=0; j < originalWidth; j++) {
      int pixel=imageSource.getRGB(j,i);
      int alpha=(pixel >> 24) & 0xff;
      int red=(pixel >> 16) & 0xff;
      int green=(pixel >> 8) & 0xff;
      int blue=pixel & 0xff;
      red=transferColor(alpha,red);
      green=transferColor(alpha,green);
      blue=transferColor(alpha,blue);
      toBytes(buffer,red);
      toBytes(buffer,green);
      toBytes(buffer,blue);
      if (buffer.length() >= 250) {
        outputBuffer(buffer,prefix,suffix);
        ++count;
      }
    }
  }
  if (buffer.length() > 0) {
    outputBuffer(buffer,prefix,suffix);
    ++count;
  }
  return count;
}","private void outputImageSource(ArrayImageSource imageSource){
  int originalWidth=imageSource.getWidth();
  int originalHeight=imageSource.getHeight();
  try {
    ByteArrayOutputStream byteOut=new ByteArrayOutputStream();
    DeflaterOutputStream deflateOut=new DeflaterOutputStream(byteOut,new Deflater(Deflater.DEFAULT_COMPRESSION));
    for (int i=0; i < originalHeight; i++) {
      for (int j=0; j < originalWidth; j++) {
        int pixel=imageSource.getRGB(j,i);
        int alpha=(pixel >> 24) & 0xff;
        int red=(pixel >> 16) & 0xff;
        int green=(pixel >> 8) & 0xff;
        int blue=pixel & 0xff;
        deflateOut.write(transferColor(alpha,red));
        deflateOut.write(transferColor(alpha,green));
        deflateOut.write(transferColor(alpha,blue));
      }
    }
    deflateOut.finish();
    deflateOut.close();
    byte[] byteArray=byteOut.toByteArray();
    byteOut.close();
    out.print(Util.toHexString(byteArray) + ""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.4418247052793439
72349,"public String getDirection(){
  return null;
}","public String getDirection(){
  return getCssText(STYLE_DIRECTION);
}",0.7304347826086957
72350,"public void setDirection(String direction) throws DOMException {
}","public void setDirection(String direction) throws DOMException {
  setCssText(STYLE_DIRECTION,direction);
}",0.7630057803468208
72351,"public BIRTPropertyManagerFactory(){
  vms=new ValueManager[PerfectHash.TOTAL_KEYWORDS];
  vms[StyleConstants.STYLE_TEXT_ALIGN]=new TextAlignManager(CSSConstants.CSS_TEXT_ALIGN_PROPERTY,CSSValueConstants.LEFT_VALUE);
  vms[StyleConstants.STYLE_TEXT_INDENT]=new LengthManager(CSSConstants.CSS_TEXT_INDENT_PROPERTY,true,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_NUMBER_ALIGN]=new TextAlignManager(BIRTConstants.BIRT_NUMBER_ALIGN_PROPERTY,CSSValueConstants.NONE_VALUE);
  vms[StyleConstants.STYLE_NUMBER_FORMAT]=new StringManager(BIRTConstants.BIRT_NUMBER_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_STRING_FORMAT]=new StringManager(BIRTConstants.BIRT_STRING_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_DATE_FORMAT]=new StringManager(BIRTConstants.BIRT_DATE_TIME_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_SQL_DATE_FORMAT]=new StringManager(BIRTConstants.BIRT_DATE_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_SQL_TIME_FORMAT]=new StringManager(BIRTConstants.BIRT_TIME_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_VERTICAL_ALIGN]=new VerticalAlignManager();
  vms[StyleConstants.STYLE_LINE_HEIGHT]=new LineHeightManager();
  vms[StyleConstants.STYLE_BACKGROUND_REPEAT]=new BackgroundRepeatManager();
  vms[StyleConstants.STYLE_BACKGROUND_ATTACHMENT]=new BackgroundAttachmentManager();
  vms[StyleConstants.STYLE_CAN_SHRINK]=new BooleanManager(BIRTConstants.BIRT_CAN_SHRINK_PROPERTY,true,false);
  vms[StyleConstants.STYLE_TEXT_OVERLINE]=new TextOverlineManager();
  vms[StyleConstants.STYLE_TEXT_UNDERLINE]=new TextUnderlineManager();
  vms[StyleConstants.STYLE_TEXT_LINETHROUGH]=new TextLineThroughManager();
  vms[StyleConstants.STYLE_BACKGROUND_IMAGE]=new URIManager(CSSConstants.CSS_BACKGROUND_IMAGE_PROPERTY,false,CSSValueConstants.NONE_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_TOP_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_LEFT_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_RIGHT_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_BOTTOM_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_COLOR]=new ColorManager(CSSConstants.CSS_COLOR_PROPERTY,true,CSSValueConstants.BLACK_RGB_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_TOP_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_LEFT_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_RIGHT_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_BOTTOM_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_COLOR]=new ColorManager(CSSConstants.CSS_BACKGROUND_COLOR_PROPERTY,false,CSSValueConstants.TRANSPARENT_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_TOP_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_LEFT_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_RIGHT_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_BOTTOM_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_LETTER_SPACING]=new SpacingManager(CSSConstants.CSS_LETTER_SPACING_PROPERTY);
  vms[StyleConstants.STYLE_FONT_WEIGHT]=new FontWeightManager();
  vms[StyleConstants.STYLE_FONT_VARIANT]=new FontVariantManager();
  vms[StyleConstants.STYLE_MARGIN_LEFT]=new MarginManager(CSSConstants.CSS_MARGIN_LEFT_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_RIGHT]=new MarginManager(CSSConstants.CSS_MARGIN_RIGHT_PROPERTY);
  vms[StyleConstants.STYLE_DISPLAY]=new DisplayManager();
  vms[StyleConstants.STYLE_TEXT_TRANSFORM]=new TextTransformManager();
  vms[StyleConstants.STYLE_BACKGROUND_POSITION_Y]=new BackgroundPositionYManager();
  vms[StyleConstants.STYLE_PADDING_LEFT]=new LengthManager(CSSConstants.CSS_PADDING_LEFT_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_PADDING_RIGHT]=new LengthManager(CSSConstants.CSS_PADDING_RIGHT_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_FONT_SIZE]=new FontSizeManager();
  vms[StyleConstants.STYLE_FONT_STYLE]=new FontStyleManager();
  vms[StyleConstants.STYLE_WHITE_SPACE]=new WhiteSpaceManager();
  vms[StyleConstants.STYLE_ORPHANS]=new IntegerManager(CSSConstants.CSS_ORPHANS_PROPERTY,true,2);
  vms[StyleConstants.STYLE_MASTER_PAGE]=new StringManager(BIRTConstants.BIRT_MASTER_PAGE_PROPERTY,false,null);
  vms[StyleConstants.STYLE_WORD_SPACING]=new SpacingManager(CSSConstants.CSS_WORD_SPACING_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_POSITION_X]=new BackgroundPositionXManager();
  vms[StyleConstants.STYLE_PAGE_BREAK_BEFORE]=new PageBreakBeforeAfterManager(CSSConstants.CSS_PAGE_BREAK_BEFORE_PROPERTY);
  vms[StyleConstants.STYLE_PAGE_BREAK_INSIDE]=new PageBreakInsideManager();
  vms[StyleConstants.STYLE_SHOW_IF_BLANK]=new BooleanManager(BIRTConstants.BIRT_SHOW_IF_BLANK_PROPERTY,true,false);
  vms[StyleConstants.STYLE_FONT_FAMILY]=new FontFamilyManager();
  vms[StyleConstants.STYLE_PAGE_BREAK_AFTER]=new PageBreakBeforeAfterManager(CSSConstants.CSS_PAGE_BREAK_AFTER_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_BOTTOM]=new MarginManager(CSSConstants.CSS_MARGIN_BOTTOM_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_TOP]=new MarginManager(CSSConstants.CSS_MARGIN_TOP_PROPERTY);
  vms[StyleConstants.STYLE_WIDOWS]=new IntegerManager(CSSConstants.CSS_WIDOWS_PROPERTY,true,2);
  vms[StyleConstants.STYLE_PADDING_BOTTOM]=new LengthManager(CSSConstants.CSS_PADDING_BOTTOM_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_PADDING_TOP]=new LengthManager(CSSConstants.CSS_PADDING_TOP_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_VISIBLE_FORMAT]=new VisibleFormatManager();
}","public BIRTPropertyManagerFactory(){
  vms=new ValueManager[PerfectHash.TOTAL_KEYWORDS];
  vms[StyleConstants.STYLE_TEXT_ALIGN]=new TextAlignManager(CSSConstants.CSS_TEXT_ALIGN_PROPERTY,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_TEXT_INDENT]=new LengthManager(CSSConstants.CSS_TEXT_INDENT_PROPERTY,true,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_NUMBER_ALIGN]=new TextAlignManager(BIRTConstants.BIRT_NUMBER_ALIGN_PROPERTY,CSSValueConstants.NONE_VALUE);
  vms[StyleConstants.STYLE_NUMBER_FORMAT]=new StringManager(BIRTConstants.BIRT_NUMBER_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_STRING_FORMAT]=new StringManager(BIRTConstants.BIRT_STRING_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_DATE_FORMAT]=new StringManager(BIRTConstants.BIRT_DATE_TIME_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_SQL_DATE_FORMAT]=new StringManager(BIRTConstants.BIRT_DATE_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_SQL_TIME_FORMAT]=new StringManager(BIRTConstants.BIRT_TIME_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_VERTICAL_ALIGN]=new VerticalAlignManager();
  vms[StyleConstants.STYLE_LINE_HEIGHT]=new LineHeightManager();
  vms[StyleConstants.STYLE_BACKGROUND_REPEAT]=new BackgroundRepeatManager();
  vms[StyleConstants.STYLE_BACKGROUND_ATTACHMENT]=new BackgroundAttachmentManager();
  vms[StyleConstants.STYLE_CAN_SHRINK]=new BooleanManager(BIRTConstants.BIRT_CAN_SHRINK_PROPERTY,true,false);
  vms[StyleConstants.STYLE_TEXT_OVERLINE]=new TextOverlineManager();
  vms[StyleConstants.STYLE_TEXT_UNDERLINE]=new TextUnderlineManager();
  vms[StyleConstants.STYLE_TEXT_LINETHROUGH]=new TextLineThroughManager();
  vms[StyleConstants.STYLE_BACKGROUND_IMAGE]=new URIManager(CSSConstants.CSS_BACKGROUND_IMAGE_PROPERTY,false,CSSValueConstants.NONE_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_TOP_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_LEFT_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_RIGHT_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_BOTTOM_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_COLOR]=new ColorManager(CSSConstants.CSS_COLOR_PROPERTY,true,CSSValueConstants.BLACK_RGB_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_TOP_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_LEFT_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_RIGHT_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_BOTTOM_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_COLOR]=new ColorManager(CSSConstants.CSS_BACKGROUND_COLOR_PROPERTY,false,CSSValueConstants.TRANSPARENT_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_TOP_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_LEFT_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_RIGHT_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_BOTTOM_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_LETTER_SPACING]=new SpacingManager(CSSConstants.CSS_LETTER_SPACING_PROPERTY);
  vms[StyleConstants.STYLE_FONT_WEIGHT]=new FontWeightManager();
  vms[StyleConstants.STYLE_FONT_VARIANT]=new FontVariantManager();
  vms[StyleConstants.STYLE_MARGIN_LEFT]=new MarginManager(CSSConstants.CSS_MARGIN_LEFT_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_RIGHT]=new MarginManager(CSSConstants.CSS_MARGIN_RIGHT_PROPERTY);
  vms[StyleConstants.STYLE_DISPLAY]=new DisplayManager();
  vms[StyleConstants.STYLE_TEXT_TRANSFORM]=new TextTransformManager();
  vms[StyleConstants.STYLE_BACKGROUND_POSITION_Y]=new BackgroundPositionYManager();
  vms[StyleConstants.STYLE_PADDING_LEFT]=new LengthManager(CSSConstants.CSS_PADDING_LEFT_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_PADDING_RIGHT]=new LengthManager(CSSConstants.CSS_PADDING_RIGHT_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_FONT_SIZE]=new FontSizeManager();
  vms[StyleConstants.STYLE_FONT_STYLE]=new FontStyleManager();
  vms[StyleConstants.STYLE_WHITE_SPACE]=new WhiteSpaceManager();
  vms[StyleConstants.STYLE_ORPHANS]=new IntegerManager(CSSConstants.CSS_ORPHANS_PROPERTY,true,2);
  vms[StyleConstants.STYLE_MASTER_PAGE]=new StringManager(BIRTConstants.BIRT_MASTER_PAGE_PROPERTY,false,null);
  vms[StyleConstants.STYLE_WORD_SPACING]=new SpacingManager(CSSConstants.CSS_WORD_SPACING_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_POSITION_X]=new BackgroundPositionXManager();
  vms[StyleConstants.STYLE_PAGE_BREAK_BEFORE]=new PageBreakBeforeAfterManager(CSSConstants.CSS_PAGE_BREAK_BEFORE_PROPERTY);
  vms[StyleConstants.STYLE_PAGE_BREAK_INSIDE]=new PageBreakInsideManager();
  vms[StyleConstants.STYLE_SHOW_IF_BLANK]=new BooleanManager(BIRTConstants.BIRT_SHOW_IF_BLANK_PROPERTY,true,false);
  vms[StyleConstants.STYLE_FONT_FAMILY]=new FontFamilyManager();
  vms[StyleConstants.STYLE_PAGE_BREAK_AFTER]=new PageBreakBeforeAfterManager(CSSConstants.CSS_PAGE_BREAK_AFTER_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_BOTTOM]=new MarginManager(CSSConstants.CSS_MARGIN_BOTTOM_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_TOP]=new MarginManager(CSSConstants.CSS_MARGIN_TOP_PROPERTY);
  vms[StyleConstants.STYLE_WIDOWS]=new IntegerManager(CSSConstants.CSS_WIDOWS_PROPERTY,true,2);
  vms[StyleConstants.STYLE_PADDING_BOTTOM]=new LengthManager(CSSConstants.CSS_PADDING_BOTTOM_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_PADDING_TOP]=new LengthManager(CSSConstants.CSS_PADDING_TOP_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_VISIBLE_FORMAT]=new VisibleFormatManager();
  vms[StyleConstants.STYLE_DIRECTION]=new StringManager(BIRTConstants.CSS_DIRECTION_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
}",0.9880961765865196
72352,"public static int hash(String str){
  int hashValue=str.length();
switch (hashValue) {
default :
    hashValue+=asso_values[str.charAt(11)];
case 11:
case 10:
case 9:
case 8:
case 7:
  hashValue+=asso_values[str.charAt(6)];
case 6:
case 5:
case 4:
case 3:
case 2:
case 1:
hashValue+=asso_values[str.charAt(0)];
break;
}
return hashValue + asso_values[str.charAt(str.length() - 1)];
}","public static int hash(String str){
  int hashValue=str.length();
switch (hashValue) {
default :
    hashValue+=asso_values[str.charAt(11)];
case 11:
case 10:
case 9:
case 8:
case 7:
case 6:
  hashValue+=asso_values[str.charAt(5)];
case 5:
case 4:
case 3:
hashValue+=asso_values[str.charAt(2)];
break;
}
return hashValue + asso_values[str.charAt(str.length() - 1)];
}",0.952
72353,"public static String parse(String dateTime){
  if (dateTime == null) {
    return ""String_Node_Str"";
  }
  if (dateTime.indexOf(""String_Node_Str"") != -1) {
    return dateTime;
  }
  StringBuffer buffer=new StringBuffer();
  boolean inQuto=false;
  for (int count=0; count < dateTime.length(); count++) {
    char tempChar=dateTime.charAt(count);
    if (inQuto) {
      if (tempChar == '\'' && nextIsQuto(dateTime,count)) {
        buffer.append(tempChar);
        count++;
      }
 else {
        if (tempChar == '\'') {
          inQuto=false;
        }
 else {
          buffer.append(tempChar);
        }
      }
    }
 else {
      if (tempChar == '\'') {
        if (nextIsQuto(dateTime,count)) {
          buffer.append(tempChar);
          count++;
        }
 else {
          inQuto=true;
        }
      }
 else {
        if (tempChar == 'a') {
          buffer.append(""String_Node_Str"");
          continue;
        }
        if (""String_Node_Str"".indexOf(tempChar) != -1) {
          continue;
        }
        buffer.append(tempChar);
      }
    }
  }
  return buffer.toString();
}","public static String parse(String dateTime){
  if (dateTime == null) {
    return ""String_Node_Str"";
  }
  if (dateTime.indexOf(""String_Node_Str"") != -1) {
    String dateFormat=null;
    DateFormatter dateFormatter=new DateFormatter(dateTime);
    return dateFormatter.getFormatCode();
  }
  StringBuffer buffer=new StringBuffer();
  boolean inQuto=false;
  for (int count=0; count < dateTime.length(); count++) {
    char tempChar=dateTime.charAt(count);
    if (inQuto) {
      if (tempChar == '\'' && nextIsQuto(dateTime,count)) {
        buffer.append(tempChar);
        count++;
      }
 else {
        if (tempChar == '\'') {
          inQuto=false;
        }
 else {
          buffer.append(tempChar);
        }
      }
    }
 else {
      if (tempChar == '\'') {
        if (nextIsQuto(dateTime,count)) {
          buffer.append(tempChar);
          count++;
        }
 else {
          inQuto=true;
        }
      }
 else {
        if (tempChar == 'a') {
          buffer.append(""String_Node_Str"");
          continue;
        }
        if (""String_Node_Str"".indexOf(tempChar) != -1) {
          continue;
        }
        buffer.append(tempChar);
      }
    }
  }
  return buffer.toString();
}",0.9461805555555556
72354,"protected IReportLayoutEngine createReportLayoutEngine(String pagination,IRenderOption options){
  IReportLayoutEngine layoutEngine=LayoutEngineFactory.createLayoutEngine(pagination);
  if (options != null) {
    Object fitToPage=renderOptions.getOption(IPDFRenderOption.FIT_TO_PAGE);
    if (fitToPage != null) {
      layoutEngine.setOption(IPDFRenderOption.FIT_TO_PAGE,fitToPage);
    }
    Object pagebreakOnly=renderOptions.getOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY);
    if (pagebreakOnly != null) {
      layoutEngine.setOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY,pagebreakOnly);
    }
    Object pageOverflow=renderOptions.getOption(IPDFRenderOption.PAGE_OVERFLOW);
    if (pageOverflow != null) {
      layoutEngine.setOption(IPDFRenderOption.PAGE_OVERFLOW,pageOverflow);
    }
    Object outputDisplayNone=renderOptions.getOption(IPDFRenderOption.OUTPUT_DISPLAY_NONE);
    if (outputDisplayNone != null) {
      layoutEngine.setOption(IPDFRenderOption.OUTPUT_DISPLAY_NONE,outputDisplayNone);
    }
    Object pdfTextWrapping=renderOptions.getOption(IPDFRenderOption.PDF_TEXT_WRAPPING);
    if (pdfTextWrapping != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_TEXT_WRAPPING,pdfTextWrapping);
    }
    Object pdfFontSubstitution=renderOptions.getOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
    if (pdfFontSubstitution != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION,pdfFontSubstitution);
    }
    Object pdfBidiProcessing=renderOptions.getOption(IPDFRenderOption.PDF_BIDI_PROCESSING);
    if (pdfBidiProcessing != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_BIDI_PROCESSING,pdfBidiProcessing);
    }
    Object pdfHyphenation=renderOptions.getOption(IPDFRenderOption.PDF_HYPHENATION);
    if (pdfHyphenation != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_HYPHENATION,pdfHyphenation);
    }
  }
  layoutEngine.setOption(TASK_TYPE,new Integer(taskType));
  return layoutEngine;
}","protected IReportLayoutEngine createReportLayoutEngine(String pagination,IRenderOption options){
  IReportLayoutEngine layoutEngine=LayoutEngineFactory.createLayoutEngine(pagination);
  if (options != null) {
    Object fitToPage=renderOptions.getOption(IPDFRenderOption.FIT_TO_PAGE);
    if (fitToPage != null) {
      layoutEngine.setOption(IPDFRenderOption.FIT_TO_PAGE,fitToPage);
    }
    Object pagebreakOnly=renderOptions.getOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY);
    if (pagebreakOnly != null) {
      layoutEngine.setOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY,pagebreakOnly);
    }
    Object pageOverflow=renderOptions.getOption(IPDFRenderOption.PAGE_OVERFLOW);
    if (pageOverflow != null) {
      layoutEngine.setOption(IPDFRenderOption.PAGE_OVERFLOW,pageOverflow);
    }
    Object outputDisplayNone=renderOptions.getOption(IPDFRenderOption.OUTPUT_DISPLAY_NONE);
    if (outputDisplayNone != null) {
      layoutEngine.setOption(IPDFRenderOption.OUTPUT_DISPLAY_NONE,outputDisplayNone);
    }
    Object pdfTextWrapping=renderOptions.getOption(IPDFRenderOption.PDF_TEXT_WRAPPING);
    if (pdfTextWrapping != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_TEXT_WRAPPING,pdfTextWrapping);
    }
    Object pdfFontSubstitution=renderOptions.getOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
    if (pdfFontSubstitution != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION,pdfFontSubstitution);
    }
    layoutEngine.setOption(IRenderOption.RTL_FLAG,renderOptions.getOption(IRenderOption.RTL_FLAG));
    Object pdfBidiProcessing=renderOptions.getOption(IPDFRenderOption.PDF_BIDI_PROCESSING);
    if (pdfBidiProcessing != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_BIDI_PROCESSING,pdfBidiProcessing);
    }
    Object pdfHyphenation=renderOptions.getOption(IPDFRenderOption.PDF_HYPHENATION);
    if (pdfHyphenation != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_HYPHENATION,pdfHyphenation);
    }
  }
  layoutEngine.setOption(TASK_TYPE,new Integer(taskType));
  return layoutEngine;
}",0.9753694581280788
72355,"/** 
 * Refreshes all resources.
 */
protected void refreshAll(){
  Display display=getShell().getDisplay();
  display.asyncExec(new Runnable(){
    public void run(){
      viewerPage.refreshRoot();
    }
  }
);
}","/** 
 * Refreshes all resources.
 */
protected void refreshAll(){
  Display display=getShell().getDisplay();
  display.asyncExec(new Runnable(){
    public void run(){
      if (viewerPage != null) {
        viewerPage.refreshRoot();
      }
    }
  }
);
}",0.9106382978723404
72356,"public boolean equals(Object object){
  if (object == null)   return false;
  if (!(object instanceof ResourceEntryWrapper || object instanceof String))   return false;
  if (object == this)   return true;
 else {
    if (object instanceof PathResourceEntry) {
      ResourceEntryWrapper temp=(ResourceEntryWrapper)object;
      if (temp.proxy.equals(this.proxy) && temp.type == this.type)       return true;
    }
 else     if (object instanceof String) {
      try {
        if (object.equals(ResourceAction.convertToFile(getURL()).getAbsolutePath())) {
          return true;
        }
      }
 catch (      IOException e) {
        return false;
      }
    }
  }
  return false;
}","public boolean equals(Object object){
  if (object == null)   return false;
  if (!(object instanceof ResourceEntryWrapper || object instanceof String))   return false;
  if (object == this)   return true;
 else {
    if (object instanceof ResourceEntryWrapper) {
      ResourceEntryWrapper temp=(ResourceEntryWrapper)object;
      if (temp.proxy.equals(this.proxy) && temp.type == this.type)       return true;
    }
 else     if (object instanceof String) {
      try {
        if (object.equals(ResourceAction.convertToFile(getURL()).getAbsolutePath())) {
          return true;
        }
      }
 catch (      IOException e) {
        return false;
      }
    }
  }
  return false;
}",0.9919883466860888
72357,"public boolean equals(Object object){
  if (object == null)   return false;
  if (!(object instanceof FragmentResourceEntry))   return false;
  if (object == this)   return true;
 else {
    FragmentResourceEntry temp=(FragmentResourceEntry)object;
    if (temp.path.equals(this.path))     return true;
  }
  return false;
}","@Override public boolean equals(Object object){
  if (object == null)   return false;
  if (!(object instanceof FragmentResourceEntry || object instanceof String))   return false;
  if (object == this)   return true;
 else {
    if (object instanceof FragmentResourceEntry) {
      FragmentResourceEntry temp=(FragmentResourceEntry)object;
      if (temp.path.equals(this.path)) {
        return true;
      }
    }
 else     if (object instanceof String) {
      if (object.equals(this.path)) {
        return true;
      }
    }
  }
  return false;
}",0.6689497716894978
72358,"static void handleElement(Element ele,Map cssStyles,IContent content,ActionContent action,int index){
  IStyle cssStyle=(IStyle)cssStyles.get(ele);
  if (cssStyle != null) {
    if (""String_Node_Str"".equals(cssStyle.getDisplay())) {
      return;
    }
  }
  String tagName=ele.getTagName();
  if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    outputImg(ele,cssStyles,content);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IReportContent report=content.getReportContent();
    ITableContent table=report.createTableContent();
    addChild(content,table);
    Column column1=new Column(report);
    column1.setWidth(new DimensionType(2,""String_Node_Str""));
    table.addColumn(column1);
    column1=new Column(report);
    table.addColumn(column1);
    handleStyle(ele,cssStyles,table);
    processNodes(ele,cssStyles,table,action);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    IReportContent report=content.getReportContent();
    IRowContent row=report.createRowContent();
    addChild(content,row);
    handleStyle(ele,cssStyles,row);
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    style.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    ICellContent orderCell=report.createCellContent();
    orderCell.setRowSpan(1);
    orderCell.setColumn(0);
    orderCell.setColSpan(1);
    orderCell.setInlineStyle(style);
    addChild(row,orderCell);
    TextContent text=(TextContent)report.createTextContent();
    addChild(orderCell,text);
    if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new Integer(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new String(new char[]{'\u2022',' ',' ',' ',' '}));
    }
    ICellContent childCell=report.createCellContent();
    childCell.setRowSpan(1);
    childCell.setColumn(1);
    childCell.setColSpan(1);
    childCell.setInlineStyle(style);
    addChild(row,childCell);
    processNodes(ele,cssStyles,childCell,action);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (tagName.toLowerCase().equals(""String_Node_Str"")) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action);
    }
 else {
      processNodes(ele,cssStyles,container,action);
    }
  }
 else   if (""String_Node_Str"".equals(tagName.toLowerCase())) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action);
  }
}","static void handleElement(Element ele,Map cssStyles,IContent content,ActionContent action,int index){
  IStyle cssStyle=(IStyle)cssStyles.get(ele);
  if (cssStyle != null) {
    if (""String_Node_Str"".equals(cssStyle.getDisplay())) {
      return;
    }
  }
  String tagName=ele.getTagName();
  if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    outputImg(ele,cssStyles,content);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IReportContent report=content.getReportContent();
    ITableContent table=report.createTableContent();
    addChild(content,table);
    Column column1=new Column(report);
    column1.setWidth(new DimensionType(2,""String_Node_Str""));
    table.addColumn(column1);
    column1=new Column(report);
    table.addColumn(column1);
    handleStyle(ele,cssStyles,table);
    processNodes(ele,cssStyles,table,action);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    IReportContent report=content.getReportContent();
    IRowContent row=report.createRowContent();
    addChild(content,row);
    handleStyle(ele,cssStyles,row);
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    style.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    ICellContent orderCell=report.createCellContent();
    orderCell.setRowSpan(1);
    orderCell.setColumn(0);
    orderCell.setColSpan(1);
    orderCell.setInlineStyle(style);
    addChild(row,orderCell);
    TextContent text=(TextContent)report.createTextContent();
    addChild(orderCell,text);
    if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new Integer(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new String(new char[]{'\u2022'}));
    }
    ICellContent childCell=report.createCellContent();
    childCell.setRowSpan(1);
    childCell.setColumn(1);
    childCell.setColSpan(1);
    childCell.setInlineStyle(style);
    addChild(row,childCell);
    processNodes(ele,cssStyles,childCell,action);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (tagName.toLowerCase().equals(""String_Node_Str"")) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action);
    }
 else {
      processNodes(ele,cssStyles,container,action);
    }
  }
 else   if (""String_Node_Str"".equals(tagName.toLowerCase())) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action);
  }
}",0.9983267098933276
72359,"public IStyle getComputedStyle(){
  if (computedStyle == null) {
    if (inlineStyle == null || inlineStyle.isEmpty()) {
      String cacheKey=styleClass;
      ITableContent table=((IRowContent)parent).getTable();
      int column=getColumn();
      if (column >= 0 && column < table.getColumnCount()) {
        IColumn tblColumn=table.getColumn(column);
        if (tblColumn != null) {
          String columnStyleClass=tblColumn.getStyleClass();
          if (columnStyleClass != null) {
            cacheKey=cacheKey + columnStyleClass;
          }
        }
      }
      ComputedStyle pcs=(ComputedStyle)((IContent)parent).getComputedStyle();
      ComputedStyle cs=pcs.getCachedStyle(cacheKey);
      if (cs == null) {
        cs=new CellComputedStyle(this);
        pcs.addCachedStyle(styleClass,cs);
      }
      computedStyle=cs;
    }
 else {
      computedStyle=new CellComputedStyle(this);
    }
  }
  return computedStyle;
}","public IStyle getComputedStyle(){
  if (computedStyle == null) {
    if (inlineStyle == null || inlineStyle.isEmpty()) {
      String cacheKey=getStyleClass();
      ITableContent table=((IRowContent)parent).getTable();
      int column=getColumn();
      if (column >= 0 && column < table.getColumnCount()) {
        IColumn tblColumn=table.getColumn(column);
        if (tblColumn != null) {
          String columnStyleClass=tblColumn.getStyleClass();
          if (columnStyleClass != null) {
            cacheKey=cacheKey + columnStyleClass;
          }
        }
      }
      ComputedStyle pcs=(ComputedStyle)((IContent)parent).getComputedStyle();
      ComputedStyle cs=pcs.getCachedStyle(cacheKey);
      if (cs == null) {
        cs=new CellComputedStyle(this);
        pcs.addCachedStyle(cacheKey,cs);
      }
      computedStyle=cs;
    }
 else {
      computedStyle=new CellComputedStyle(this);
    }
  }
  return computedStyle;
}",0.9771640998406798
72360,"/** 
 * @param query
 * @param dataSet
 * @return
 * @throws DataException
 */
public static Strategy getQueryExecutionStrategy(IQueryDefinition query,IBaseDataSetDesign dataSet) throws DataException {
  if (query.getGroups() != null && query.getGroups().size() > 0)   return Strategy.Complex;
  if (query.getFilters() != null && query.getFilters().size() > 0) {
    if (FilterUtil.hasMutipassFilters(query.getFilters()))     return Strategy.Complex;
  }
  if (query.getSorts() != null && query.getSorts().size() > 0)   return Strategy.Complex;
  if (query.getSubqueries() != null && query.getSubqueries().size() > 0)   return Strategy.Complex;
  if (query.getBindings() != null) {
    Iterator bindingIt=query.getBindings().values().iterator();
    while (bindingIt.hasNext()) {
      IBinding binding=(IBinding)bindingIt.next();
      if (binding.getAggrFunction() != null)       return Strategy.Complex;
      if (binding.getExpression() instanceof IScriptExpression) {
        if (ExpressionUtil.hasAggregation(((IScriptExpression)binding.getExpression()).getText())) {
          return Strategy.Complex;
        }
      }
    }
  }
  if (dataSet != null) {
    if (dataSet.getFilters() != null) {
      if (FilterUtil.hasMutipassFilters(dataSet.getFilters())) {
        return Strategy.Complex;
      }
    }
    if (dataSet.needDistinctValue())     return Strategy.Complex;
    if (dataSet.getComputedColumns() != null) {
      List computedColumns=dataSet.getComputedColumns();
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null)         return Strategy.Complex;
        if (computedColumn.getExpression() instanceof IScriptExpression) {
          if (ExpressionUtil.hasAggregation(((IScriptExpression)computedColumn.getExpression()).getText())) {
            return Strategy.Complex;
          }
        }
      }
    }
  }
  return Strategy.Simple;
}","/** 
 * @param query
 * @param dataSet
 * @return
 * @throws DataException
 */
public static Strategy getQueryExecutionStrategy(IQueryDefinition query,IBaseDataSetDesign dataSet) throws DataException {
  if (query.getGroups() != null && query.getGroups().size() > 0)   return Strategy.Complex;
  if (query.getFilters() != null && query.getFilters().size() > 0) {
    return Strategy.Complex;
  }
  if (query.getSorts() != null && query.getSorts().size() > 0)   return Strategy.Complex;
  if (query.getSubqueries() != null && query.getSubqueries().size() > 0)   return Strategy.Complex;
  if (query.getBindings() != null) {
    Iterator bindingIt=query.getBindings().values().iterator();
    while (bindingIt.hasNext()) {
      IBinding binding=(IBinding)bindingIt.next();
      if (binding.getAggrFunction() != null)       return Strategy.Complex;
      if (binding.getExpression() instanceof IScriptExpression) {
        if (ExpressionUtil.hasAggregation(((IScriptExpression)binding.getExpression()).getText())) {
          return Strategy.Complex;
        }
      }
    }
  }
  if (dataSet != null) {
    if (dataSet.getFilters() != null) {
      if (FilterUtil.hasMutipassFilters(dataSet.getFilters())) {
        return Strategy.Complex;
      }
    }
    if (dataSet.needDistinctValue())     return Strategy.Complex;
    if (dataSet.getComputedColumns() != null) {
      List computedColumns=dataSet.getComputedColumns();
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null)         return Strategy.Complex;
        if (computedColumn.getExpression() instanceof IScriptExpression) {
          if (ExpressionUtil.hasAggregation(((IScriptExpression)computedColumn.getExpression()).getText())) {
            return Strategy.Complex;
          }
        }
      }
    }
  }
  return Strategy.Simple;
}",0.9850367740299264
72361,"/** 
 * @param dataSourceQuery
 * @param resultSet
 * @param resultClass
 * @param stopSign
 * @throws DataException
 */
public SimpleResultSet(DataSourceQuery dataSourceQuery,ResultSet resultSet,IResultClass resultClass,StopSign stopSign) throws DataException {
  this.rowResultSet=new RowResultSet(new SmartCacheRequest(dataSourceQuery.getMaxRows(),dataSourceQuery.getFetchEvents(),new OdiAdapter(resultSet),resultClass,false));
  this.currResultObj=this.rowResultSet.next(stopSign);
  this.resultSet=resultSet;
  this.stopSign=stopSign;
}","/** 
 * @param dataSourceQuery
 * @param resultSet
 * @param resultClass
 * @param stopSign
 * @throws DataException
 */
public SimpleResultSet(DataSourceQuery dataSourceQuery,ResultSet resultSet,IResultClass resultClass,IEventHandler handler,StopSign stopSign) throws DataException {
  this.rowResultSet=new RowResultSet(new SmartCacheRequest(dataSourceQuery.getMaxRows(),dataSourceQuery.getFetchEvents(),new OdiAdapter(resultSet),resultClass,false));
  this.currResultObj=this.rowResultSet.next(stopSign);
  this.resultSet=resultSet;
  this.stopSign=stopSign;
  this.handler=handler;
}",0.9592198581560284
72362,"public IExecutorHelper getExecutorHelper(){
  return null;
}","public IExecutorHelper getExecutorHelper(){
  return this.handler.getExecutorHelper();
}",0.7972972972972973
72363,"public void close() throws DataException {
  this.resultSet.close();
}","public void close() throws DataException {
  if (this.resultSet != null) {
    this.resultSet.close();
    this.resultSet=null;
  }
}",0.6896551724137931
72364,"/** 
 * constructor
 * @param page the viewer
 * @param registry the registry
 */
public LibraryExplorerContextMenuProvider(LibraryExplorerTreeViewPage page){
  super(page.getTreeViewer());
  this.page=page;
  clipboard=new Clipboard(page.getSite().getShell().getDisplay());
  refreshExplorerAction=new RefreshResourceExplorerAction(page);
  useLibraryAction=new AddSelectedLibToCurrentReportDesignAction(page.getTreeViewer());
  deleteLibraryandCssAction=new DeleteResourceAction(page);
  addResourceAction=new AddResourceAction(page);
  renameLibraryandCssAction=new RenameResourceAction(page);
  newFolderAction=new NewFolderAction(page);
  moveLibraryandCssAction=new MoveResourceAction(page);
  newLibraryAction=new NewLibraryAction(page);
  copyLibraryandCssAction=new CopyResourceAction(page,clipboard);
  pasteLibraryandCssAction=new PasteResourceAction(page,clipboard);
  newMenuGroup.add(newFolderAction);
  newMenuGroup.add(newLibraryAction);
}","/** 
 * constructor
 * @param page the viewer
 * @param registry the registry
 */
public LibraryExplorerContextMenuProvider(LibraryExplorerTreeViewPage page){
  super(page.getTreeViewer());
  this.page=page;
  clipboard=new Clipboard(page.getSite().getShell().getDisplay());
  filterAction=new FilterResourceAction(page);
  refreshExplorerAction=new RefreshResourceExplorerAction(page);
  useLibraryAction=new AddSelectedLibToCurrentReportDesignAction(page.getTreeViewer());
  deleteResourceAction=new DeleteResourceAction(page);
  addResourceAction=new AddResourceAction(page);
  renameResourceAction=new RenameResourceAction(page);
  newFolderAction=new NewFolderAction(page);
  moveResourceAction=new MoveResourceAction(page);
  newLibraryAction=new NewLibraryAction(page);
  copyResourceAction=new CopyResourceAction(page,clipboard);
  pasteResourceAction=new PasteResourceAction(page,clipboard);
  newMenuGroup.add(newFolderAction);
  newMenuGroup.add(newLibraryAction);
  handleGlobalAction();
  page.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      resetActionStatus();
      updateActionBars();
    }
  }
);
}",0.4339360222531293
72365,"/** 
 * Builds the context menu. Single selection menu and multiple selection menu are created while selecting just single element or multiple elements
 * @param menu the menu
 */
public void buildContextMenu(IMenuManager menu){
  if (Policy.TRACING_MENU_SHOW) {
    System.out.println(""String_Node_Str"");
  }
  resetActionStatus();
  menu.removeAll();
  menu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
  menu.add(new Separator());
  IStructuredSelection selection=(IStructuredSelection)page.getSelection();
  if (selection != null && selection.getFirstElement() != null) {
    Object selected=selection.getFirstElement();
    if (selected instanceof ReportResourceEntry) {
      selected=((ReportResourceEntry)selected).getReportElement();
    }
    if (selected instanceof ResourceEntryWrapper) {
      int type=((ResourceEntryWrapper)selected).getType();
      if (type == ResourceEntryWrapper.LIBRARY) {
        menu.add(useLibraryAction);
      }
 else       if (type == ResourceEntryWrapper.CSS_STYLE_SHEET) {
        menu.add(new UseCssInReportDesignAction(page));
        menu.add(new UseCssInThemeAction(page));
      }
      if (((ResourceEntryWrapper)selected).getParent() instanceof PathResourceEntry) {
        menu.add(new Separator());
        menu.add(newMenuGroup);
        menu.add(addResourceAction);
      }
      menu.add(new Separator());
      menu.add(copyLibraryandCssAction);
      if (((ResourceEntryWrapper)selected).getParent() instanceof PathResourceEntry) {
        menu.add(pasteLibraryandCssAction);
        menu.add(deleteLibraryandCssAction);
        menu.add(moveLibraryandCssAction);
        menu.add(renameLibraryandCssAction);
        menu.add(new Separator());
      }
    }
 else     if (selected instanceof LibraryHandle) {
      menu.add(useLibraryAction);
      menu.add(new Separator());
    }
 else     if (selected instanceof CssStyleSheetHandle) {
      menu.add(new UseCssInReportDesignAction(page));
      menu.add(new UseCssInThemeAction(page));
      menu.add(new Separator());
    }
 else     if (selected instanceof PathResourceEntry) {
      menu.add(newMenuGroup);
      menu.add(addResourceAction);
      menu.add(new Separator());
      menu.add(copyLibraryandCssAction);
      menu.add(pasteLibraryandCssAction);
      menu.add(deleteLibraryandCssAction);
      menu.add(moveLibraryandCssAction);
      menu.add(renameLibraryandCssAction);
      menu.add(new Separator());
    }
 else     if (selected instanceof FragmentResourceEntry) {
      if (copyLibraryandCssAction.isEnabled()) {
        menu.add(copyLibraryandCssAction);
        menu.add(new Separator());
      }
    }
    if (canAddtoReport(selected)) {
      if (selection.size() == 1) {
        AddElementtoReport addElementAction=new AddElementtoReport((StructuredViewer)getViewer());
        addElementAction.setSelectedElement(selected);
        menu.add(addElementAction);
        menu.add(new Separator());
      }
    }
    menu.add(new Separator());
    menu.add(refreshExplorerAction);
  }
 else {
    menu.add(addResourceAction);
    menu.add(new Separator());
    menu.add(refreshExplorerAction);
  }
}","/** 
 * Builds the context menu. Single selection menu and multiple selection menu are created while selecting just single element or multiple elements
 * @param menu the menu
 */
public void buildContextMenu(IMenuManager menu){
  if (Policy.TRACING_MENU_SHOW) {
    System.out.println(""String_Node_Str"");
  }
  resetActionStatus();
  menu.removeAll();
  menu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
  menu.add(new Separator());
  IStructuredSelection selection=(IStructuredSelection)page.getSelection();
  if (selection != null && selection.getFirstElement() != null) {
    Object selected=selection.getFirstElement();
    if (selected instanceof ReportResourceEntry) {
      selected=((ReportResourceEntry)selected).getReportElement();
    }
    if (selected instanceof ResourceEntryWrapper) {
      int type=((ResourceEntryWrapper)selected).getType();
      if (type == ResourceEntryWrapper.LIBRARY) {
        menu.add(useLibraryAction);
      }
 else       if (type == ResourceEntryWrapper.CSS_STYLE_SHEET) {
        menu.add(new UseCssInReportDesignAction(page));
        menu.add(new UseCssInThemeAction(page));
      }
      if (((ResourceEntryWrapper)selected).getParent() instanceof PathResourceEntry) {
        menu.add(new Separator());
        menu.add(newMenuGroup);
        menu.add(addResourceAction);
      }
      menu.add(new Separator());
      menu.add(copyResourceAction);
      if (((ResourceEntryWrapper)selected).getParent() instanceof PathResourceEntry) {
        menu.add(pasteResourceAction);
        menu.add(deleteResourceAction);
        menu.add(moveResourceAction);
        menu.add(renameResourceAction);
        menu.add(new Separator());
      }
    }
 else     if (selected instanceof LibraryHandle) {
      menu.add(useLibraryAction);
      menu.add(new Separator());
    }
 else     if (selected instanceof CssStyleSheetHandle) {
      menu.add(new UseCssInReportDesignAction(page));
      menu.add(new UseCssInThemeAction(page));
      menu.add(new Separator());
    }
 else     if (selected instanceof PathResourceEntry) {
      menu.add(newMenuGroup);
      menu.add(addResourceAction);
      menu.add(new Separator());
      menu.add(copyResourceAction);
      menu.add(pasteResourceAction);
      menu.add(deleteResourceAction);
      menu.add(moveResourceAction);
      menu.add(renameResourceAction);
      menu.add(new Separator());
    }
 else     if (selected instanceof FragmentResourceEntry) {
      if (copyResourceAction.isEnabled()) {
        menu.add(copyResourceAction);
        menu.add(new Separator());
      }
    }
    if (canAddtoReport(selected)) {
      if (selection.size() == 1) {
        AddElementtoReport addElementAction=new AddElementtoReport((StructuredViewer)getViewer());
        addElementAction.setSelectedElement(selected);
        menu.add(addElementAction);
        menu.add(new Separator());
      }
    }
    menu.add(new Separator());
    menu.add(refreshExplorerAction);
  }
 else {
    menu.add(addResourceAction);
    menu.add(new Separator());
    menu.add(refreshExplorerAction);
  }
}",0.849727651393784
72366,"/** 
 * Resets all action status.
 */
private void resetActionStatus(){
  refreshExplorerAction.setEnabled(refreshExplorerAction.isEnabled());
  useLibraryAction.setEnabled(useLibraryAction.isEnabled());
  deleteLibraryandCssAction.setEnabled(deleteLibraryandCssAction.isEnabled());
  addResourceAction.setEnabled(addResourceAction.isEnabled());
  renameLibraryandCssAction.setEnabled(renameLibraryandCssAction.isEnabled());
  newFolderAction.setEnabled(newFolderAction.isEnabled());
  moveLibraryandCssAction.setEnabled(moveLibraryandCssAction.isEnabled());
  newLibraryAction.setEnabled(newLibraryAction.isEnabled());
  copyLibraryandCssAction.setEnabled(copyLibraryandCssAction.isEnabled());
  pasteLibraryandCssAction.setEnabled(pasteLibraryandCssAction.isEnabled());
}","/** 
 * Resets all action status.
 */
private void resetActionStatus(){
  filterAction.setEnabled(isEnabled());
  refreshExplorerAction.setEnabled(refreshExplorerAction.isEnabled());
  useLibraryAction.setEnabled(useLibraryAction.isEnabled());
  deleteResourceAction.setEnabled(deleteResourceAction.isEnabled());
  addResourceAction.setEnabled(addResourceAction.isEnabled());
  renameResourceAction.setEnabled(renameResourceAction.isEnabled());
  newFolderAction.setEnabled(newFolderAction.isEnabled());
  moveResourceAction.setEnabled(moveResourceAction.isEnabled());
  newLibraryAction.setEnabled(newLibraryAction.isEnabled());
  copyResourceAction.setEnabled(copyResourceAction.isEnabled());
  pasteResourceAction.setEnabled(pasteResourceAction.isEnabled());
}",0.8059895833333334
72367,"/** 
 * Fires a selection changed event.
 * @param selection the new selection
 */
protected void fireSelectionChanged(ISelection selection){
  final SelectionChangedEvent event=new SelectionChangedEvent(this,selection);
  ReportRequest request=new ReportRequest(this);
  List list=new ArrayList();
  if (selection instanceof IStructuredSelection) {
    list=((IStructuredSelection)selection).toList();
  }
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  Object[] listeners=selectionChangedListeners.getListeners();
  for (int i=0; i < listeners.length; ++i) {
    final ISelectionChangedListener l=(ISelectionChangedListener)listeners[i];
    SafeRunner.run(new SafeRunnable(){
      public void run(){
        l.selectionChanged(event);
      }
    }
);
  }
}","/** 
 * Fires a selection changed event.
 * @param selection the new selection
 */
private void fireSelectionChanged(ISelection selection){
  final SelectionChangedEvent event=new SelectionChangedEvent(this,selection);
  ReportRequest request=new ReportRequest(this);
  List<?> list=new ArrayList();
  if (selection instanceof IStructuredSelection) {
    list=((IStructuredSelection)selection).toList();
  }
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  Object[] listeners=selectionChangedListeners.getListeners();
  for (int i=0; i < listeners.length; ++i) {
    final ISelectionChangedListener l=(ISelectionChangedListener)listeners[i];
    SafeRunner.run(new SafeRunnable(){
      public void run(){
        l.selectionChanged(event);
      }
    }
);
  }
}",0.9913842619184376
72368,"/** 
 * @param schemaName
 * @return
 */
private boolean containsTableInSchema(String schemaName,boolean showSystemTable){
  String[] tableTypes=showSystemTable ? new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""} : new String[]{""String_Node_Str"",""String_Node_Str""};
  ResultSet rs=metaDataProvider.getAlltables(metaDataProvider.getCatalog(),schemaName,""String_Node_Str"",tableTypes);
  if (rs != null) {
    try {
      while (rs.next()) {
        return true;
      }
    }
 catch (    SQLException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
  }
  return false;
}","/** 
 * @param schemaName
 * @return
 */
private boolean containsTableInSchema(String schemaName,boolean showSystemTable){
  String dbType=getSelectedDbType();
  String namePattern=SQLUtility.getTailoredSearchText(searchTxt.getText());
  if (dbType.equalsIgnoreCase(DbType.PROCEDURE_STRING)) {
    return containsProcedure(schemaName,namePattern);
  }
 else   if (dbType.equalsIgnoreCase(DbType.TABLE_STRING)) {
    return containsTableOfTableType(schemaName,showSystemTable);
  }
 else   if (dbType.equalsIgnoreCase(DbType.VIEW_STRING)) {
    return containsTableOfViewType(schemaName);
  }
  return containsTableOfAllType(schemaName,namePattern,showSystemTable);
}",0.2519809825673534
72369,"/** 
 * Test the function that whether an element/structure can be exported.
 * @throws Exception
 */
public void testCanExport() throws Exception {
  openDesign(""String_Node_Str"");
  openLibrary(""String_Node_Str"");
  DataSetHandle ds=designHandle.findDataSet(""String_Node_Str"");
  assertTrue(ElementExportUtil.canExport(ds,libraryHandle,false));
  DataSetHandle tmpDs=libraryHandle.getElementFactory().newScriptDataSet(""String_Node_Str"");
  libraryHandle.getDataSets().add(tmpDs);
  assertFalse(ElementExportUtil.canExport(ds,libraryHandle,false));
  assertTrue(ElementExportUtil.canExport(ds,libraryHandle,true));
  StyleHandle style1=designHandle.findStyle(""String_Node_Str"");
  assertFalse(ElementExportUtil.canExport(style1,libraryHandle,false));
  CustomColorHandle color1=(CustomColorHandle)designHandle.customColorsIterator().next();
  assertTrue(ElementExportUtil.canExport(color1,libraryHandle,false));
  CustomColor tmpColor1=StructureFactory.createCustomColor();
  tmpColor1.setName(""String_Node_Str"");
  libraryHandle.getPropertyHandle(IModuleModel.COLOR_PALETTE_PROP).addItem(tmpColor1);
  assertFalse(ElementExportUtil.canExport(color1,libraryHandle,false));
  assertTrue(ElementExportUtil.canExport(color1,libraryHandle,true));
}","/** 
 * Test the function that whether an element/structure can be exported.
 * @throws Exception
 */
public void testCanExport() throws Exception {
  openDesign(""String_Node_Str"");
  openLibrary(""String_Node_Str"");
  DataSetHandle ds=designHandle.findDataSet(""String_Node_Str"");
  assertTrue(ElementExportUtil.canExport(ds,libraryHandle,false));
  DataSetHandle tmpDs=libraryHandle.getElementFactory().newScriptDataSet(""String_Node_Str"");
  libraryHandle.getDataSets().add(tmpDs);
  assertFalse(ElementExportUtil.canExport(ds,libraryHandle,false));
  assertTrue(ElementExportUtil.canExport(ds,libraryHandle,true));
  StyleHandle style1=designHandle.findStyle(""String_Node_Str"");
  assertFalse(ElementExportUtil.canExport(style1,libraryHandle,false));
  TableHandle table=(TableHandle)designHandle.findElement(""String_Node_Str"");
  GroupHandle group=(GroupHandle)table.getGroups().get(0);
  assertFalse(ElementExportUtil.canExport(group,libraryHandle,false));
  CustomColorHandle color1=(CustomColorHandle)designHandle.customColorsIterator().next();
  assertTrue(ElementExportUtil.canExport(color1,libraryHandle,false));
  CustomColor tmpColor1=StructureFactory.createCustomColor();
  tmpColor1.setName(""String_Node_Str"");
  libraryHandle.getPropertyHandle(IModuleModel.COLOR_PALETTE_PROP).addItem(tmpColor1);
  assertFalse(ElementExportUtil.canExport(color1,libraryHandle,false));
  assertTrue(ElementExportUtil.canExport(color1,libraryHandle,true));
}",0.9229058561897702
72370,"/** 
 * Checks whether the given structure can be exported into one library. Currently, only allows structures such as <code>EmbeddedImage</code>,<code>CustomColor</code> and <code>ConfigVariable</code>.
 * @param structToExport the handle of the structure to export.
 * @param targetLibraryHandle the handle of target library
 * @param canOverride indicates whether the element with the same name in target library will be overridden.
 * @return <code>true</code> if the element can be exported successfully.Otherwise <code>false</code>.
 */
public static boolean canExport(StructureHandle structToExport,LibraryHandle targetLibraryHandle,boolean canOverride){
  try {
    ElementExporter.checkStructureToExport(structToExport);
  }
 catch (  IllegalArgumentException e) {
    return false;
  }
  if (targetLibraryHandle == null)   return false;
  IPropertyDefn propDefn=null;
  String structName=structToExport.getDefn().getName();
  if (EmbeddedImage.EMBEDDED_IMAGE_STRUCT.equals(structName))   propDefn=targetLibraryHandle.getPropertyDefn(IModuleModel.IMAGES_PROP);
 else   if (CustomColor.CUSTOM_COLOR_STRUCT.equals(structName))   propDefn=targetLibraryHandle.getPropertyDefn(IModuleModel.COLOR_PALETTE_PROP);
 else   if (ConfigVariable.CONFIG_VAR_STRUCT.equals(structName))   propDefn=targetLibraryHandle.getPropertyDefn(IModuleModel.CONFIG_VARS_PROP);
 else {
    return false;
  }
  if (canOverride)   return true;
  List results=StructureListValidator.getInstance().validateForAdding(targetLibraryHandle,propDefn,targetLibraryHandle.getListProperty(propDefn.getName()),structToExport.getStructure());
  if (results.isEmpty())   return true;
  return false;
}","/** 
 * Checks whether the given structure can be exported into one library. Currently, only allows structures such as <code>EmbeddedImage</code>,<code>CustomColor</code> and <code>ConfigVariable</code>.
 * @param structToExport the handle of the structure to export.
 * @param targetLibraryHandle the handle of target library
 * @param canOverride indicates whether the element with the same name in target library will be overridden.
 * @return <code>true</code> if the element can be exported successfully.Otherwise <code>false</code>.
 */
public static boolean canExport(StructureHandle structToExport,LibraryHandle targetLibraryHandle,boolean canOverride){
  if (structToExport == null || targetLibraryHandle == null)   return false;
  try {
    ElementExporter.checkStructureToExport(structToExport);
  }
 catch (  IllegalArgumentException e) {
    return false;
  }
  IPropertyDefn propDefn=null;
  String structName=structToExport.getDefn().getName();
  if (EmbeddedImage.EMBEDDED_IMAGE_STRUCT.equals(structName))   propDefn=targetLibraryHandle.getPropertyDefn(IModuleModel.IMAGES_PROP);
 else   if (CustomColor.CUSTOM_COLOR_STRUCT.equals(structName))   propDefn=targetLibraryHandle.getPropertyDefn(IModuleModel.COLOR_PALETTE_PROP);
 else   if (ConfigVariable.CONFIG_VAR_STRUCT.equals(structName))   propDefn=targetLibraryHandle.getPropertyDefn(IModuleModel.CONFIG_VARS_PROP);
 else {
    return false;
  }
  if (canOverride)   return true;
  List results=StructureListValidator.getInstance().validateForAdding(targetLibraryHandle,propDefn,targetLibraryHandle.getListProperty(propDefn.getName()),structToExport.getStructure());
  if (results.isEmpty())   return true;
  return false;
}",0.961904761904762
72371,"public void end(IReportContent report){
  engine.complete();
  ExcelWriter writer=new ExcelWriter(out,context);
  writer.writeDeclarations();
  writer.writeDocumentProperties(report);
  writer.declareStyles(engine.getStyleMap());
  writer.defineNames(engine.getNamesRefer());
  startSheet(writer);
  int count=0;
  while (count < engine.getRowCount()) {
    if ((count % (engine.MAX_ROW + 1)) == 0 && count != 0) {
      endSheet(writer);
      startSheet(writer);
    }
    outputData(engine.getRow(count),writer);
    count++;
  }
  endSheet(writer);
  writer.close(true);
  sheetIndex=1;
}","public void end(IReportContent report){
  engine.complete();
  boolean isRTLSheet=false;
  String reportOrientation=report.getDesign().getReportDesign().getBidiOrientation();
  if (""String_Node_Str"".equalsIgnoreCase(reportOrientation))   isRTLSheet=true;
  ExcelWriter writer=new ExcelWriter(out,context,isRTLSheet);
  writer.writeDeclarations();
  writer.writeDocumentProperties(report);
  writer.declareStyles(engine.getStyleMap());
  writer.defineNames(engine.getNamesRefer());
  startSheet(writer);
  int count=0;
  while (count < engine.getRowCount()) {
    if ((count % (engine.MAX_ROW + 1)) == 0 && count != 0) {
      endSheet(writer);
      startSheet(writer);
    }
    outputData(engine.getRow(count),writer);
    count++;
  }
  endSheet(writer);
  writer.close(true);
  sheetIndex=1;
}",0.8524118070554355
72372,"public ExcelWriter(OutputStream out,String encoding,ExcelContext context){
  this.context=context;
  writer.open(out,encoding);
}","/** 
 * @author bidi_acgc
 * @param isRTLSheet:represents the direction of the excel sheet.
 */
public ExcelWriter(OutputStream out,String encoding,ExcelContext context,boolean isRTLSheet){
  this.context=context;
  this.isRTLSheet=isRTLSheet;
  writer.open(out,encoding);
}",0.6401985111662531
72373,"public IStyle getComputedStyle(){
  if (computedStyle == null) {
    if (parent == null) {
      computedStyle=new ComputedStyle(this);
    }
 else {
      if (inlineStyle == null || inlineStyle.isEmpty()) {
        ComputedStyle pcs=(ComputedStyle)((IContent)parent).getComputedStyle();
        ComputedStyle cs=pcs.getCachedStyle(styleClass);
        if (cs == null) {
          cs=new ComputedStyle(this);
          pcs.addCachedStyle(styleClass,cs);
        }
        computedStyle=cs;
      }
 else {
        computedStyle=new ComputedStyle(this);
      }
    }
  }
  return computedStyle;
}","public IStyle getComputedStyle(){
  if (computedStyle == null) {
    if (parent == null) {
      computedStyle=new ComputedStyle(this);
    }
 else {
      if (inlineStyle == null || inlineStyle.isEmpty()) {
        String styleClass=getStyleClass();
        ComputedStyle pcs=(ComputedStyle)((IContent)parent).getComputedStyle();
        ComputedStyle cs=pcs.getCachedStyle(styleClass);
        if (cs == null) {
          cs=new ComputedStyle(this);
          pcs.addCachedStyle(styleClass,cs);
        }
        computedStyle=cs;
      }
 else {
        computedStyle=new ComputedStyle(this);
      }
    }
  }
  return computedStyle;
}",0.9651821862348178
72374,"public static IArea createTextArea(ITextContent textContent,int offset,int baseLevel,int runDirection,FontInfo fontInfo){
  return new TextArea(textContent,offset,baseLevel,runDirection,fontInfo);
}","public static IArea createTextArea(ITextContent textContent,int offset,int baseLevel,int runLevel,FontInfo fontInfo){
  return new TextArea(textContent,offset,baseLevel,runLevel,fontInfo);
}",0.9381443298969072
72375,"public TextArea(ITextContent textContent,int offset,int baseLevel,int runDirection,FontInfo fontInfo){
  super(textContent);
  this.textContent=textContent;
  this.fi=fontInfo;
  height=(int)(fi.getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO);
  baseLine=this.fi.getBaseline();
  this.offset=offset;
  this.runDirection=runDirection;
  this.lineBreak=false;
  removePadding();
  removeBorder();
  removeMargin();
}","public TextArea(ITextContent textContent,int offset,int baseLevel,int runLevel,FontInfo fontInfo){
  super(textContent);
  this.textContent=textContent;
  this.fi=fontInfo;
  height=(int)(fi.getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO);
  baseLine=this.fi.getBaseline();
  this.offset=offset;
  this.runLevel=runLevel;
  this.lineBreak=false;
  removePadding();
  removeBorder();
  removeMargin();
}",0.9490291262135924
72376,"/** 
 * Gets the text in visual order.
 * @param text the original text.
 * @return the text in visual order.
 */
public String getText(){
  calculateText();
  if (runDirection == Bidi.DIRECTION_LEFT_TO_RIGHT) {
    return text;
  }
 else {
    return flip(text);
  }
}","/** 
 * Gets the text in visual order.
 * @param text the original text.
 * @return the text in visual order.
 */
public String getText(){
  calculateText();
  if ((runLevel & 1) == 0) {
    return text;
  }
 else {
    return flip(text);
  }
}",0.8927875243664717
72377,"/** 
 * Reverse text
 * @param text
 * @return
 */
private String flip(String text){
  char[] indexChars=text.toCharArray();
  int start=0;
  int end=indexChars.length;
  int mid=(start + end) / 2;
  --end;
  for (; start < mid; ++start, --end) {
    char temp=indexChars[start];
    indexChars[start]=indexChars[end];
    indexChars[end]=temp;
  }
  return new String(indexChars);
}","private String flip(String text){
  return Bidi.writeReverse(text,Bidi.OUTPUT_REVERSE | Bidi.DO_MIRRORING);
}",0.2154471544715447
72378,"/** 
 * Gets the reverse text if the run direction is RtL, If the run direction is LtR, the text keeps the same.
 * @param text						the original text.
 * @return							the reverse text.
 */
private String getReverseText(String text){
  if (chunk.getRunDirection() == Bidi.DIRECTION_LEFT_TO_RIGHT) {
    return text;
  }
 else {
    return flip(text);
  }
}","/** 
 * Gets the reverse text if the run direction is RtL, If the run direction is LtR, the text keeps the same.
 * @param text						the original text.
 * @return							the reverse text.
 */
private String getReverseText(String text){
  if ((chunk.getRunLevel() & 1) == 0) {
    return text;
  }
 else {
    return flip(text);
  }
}",0.9259796806966618
72379,"/** 
 * true if succeed to new a line.
 */
public boolean newLine(){
{
    return lineLM.endLine();
  }
}","/** 
 * true if succeed to new a line.
 */
public boolean newLine(){
{
    return parentLM.endLine();
  }
}",0.9622641509433962
72380,"public InlineTextLayout(LayoutEngineContext context,ContainerLayout parentContext,IContent content){
  super(context,parentContext,content);
  lineLM=(InlineStackingLayout)parentContext;
  ITextContent textContent=(ITextContent)content;
  lineLM.setTextIndent(textContent);
  String text=textContent.getText();
  if (text != null && text.length() != 0) {
    transform(textContent);
    this.textContent=textContent;
    comp=new TextCompositor(textContent,context.getFontManager(),context.getBidiProcessing(),context.getFontSubstitution(),context.getTextWrapping(),context.isEnableHyphenation(),context.getLocale());
  }
}","public InlineTextLayout(LayoutEngineContext context,ContainerLayout parentContext,IContent content){
  super(context,parentContext,content);
  parentLM=(InlineStackingLayout)parentContext;
  ITextContent textContent=(ITextContent)content;
  parentLM.setTextIndent(textContent);
  String text=textContent.getText();
  if (text != null && text.length() != 0) {
    transform(textContent);
    this.textContent=textContent;
    comp=new TextCompositor(textContent,context.getFontManager(),context.getBidiProcessing(),context.getFontSubstitution(),context.getTextWrapping(),context.isEnableHyphenation(),context.getLocale());
    ContainerLayout ancestor=parentLM;
    do {
      if (null == ancestor) {
        comp.setNewLineStatus(true);
        return;
      }
      if (!ancestor.isRootEmpty()) {
        comp.setNewLineStatus(false);
        return;
      }
      if (ancestor instanceof LineLayout) {
        comp.setNewLineStatus(ancestor.isRootEmpty());
        return;
      }
      ancestor=ancestor.getParent();
    }
 while (true);
  }
}",0.7369682444577591
72381,"public int getFreeSpace(){
  return lineLM.getCurrentMaxContentWidth();
}","public int getFreeSpace(){
  return parentLM.getCurrentMaxContentWidth();
}",0.945945945945946
72382,"public void addTextArea(AbstractArea textArea){
{
    lineLM.addArea(textArea);
  }
}","public void addTextArea(AbstractArea textArea){
{
    parentLM.addArea(textArea);
  }
}",0.9534883720930232
72383,"protected void initialize(){
  createRoot();
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  maxAvaHeight=parent.getCurrentMaxContentHeight();
  root.setWidth(parent.getCurrentMaxContentWidth());
  lineHeight=((BlockStackingLayout)parent).getLineHeight();
}","protected void initialize(){
  createRoot();
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  maxAvaHeight=parent.getCurrentMaxContentHeight();
  root.setWidth(parent.getCurrentMaxContentWidth());
  lineHeight=((BlockStackingLayout)parent).getLineHeight();
  if (parent.content != null) {
    if (BIRTConstants.BIRT_RTL_VALUE.equals(parent.content.getComputedStyle().getDirection()))     baseLevel=Bidi.DIRECTION_RIGHT_TO_LEFT;
  }
}",0.7489239598278336
72384,"protected void align(boolean lastLine){
  assert(parent instanceof BlockStackingLayout);
  String align=((BlockStackingLayout)parent).getTextAlign();
  if ((CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align) || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
    int spacing=root.getWidth() - currentIP;
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (spacing > 0) {
        if (CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align)) {
          area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
        }
 else         if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
          area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
        }
      }
    }
  }
 else   if (CSSConstants.CSS_JUSTIFY_VALUE.equalsIgnoreCase(align) && !lastLine) {
    justify();
  }
  verticalAlign();
}","protected void align(boolean lastLine){
  assert(parent instanceof BlockStackingLayout);
  String align=((BlockStackingLayout)parent).getTextAlign();
  if ((CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align) || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
    int spacing=root.getWidth() - currentIP;
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (spacing > 0) {
        if (CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align)) {
          area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
        }
 else         if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
          area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
        }
      }
    }
  }
 else   if (CSSConstants.CSS_JUSTIFY_VALUE.equalsIgnoreCase(align) && !lastLine) {
    justify();
  }
  if (context.getBidiProcessing())   reorderVisually();
  verticalAlign();
}",0.971252566735113
72385,"private TextArea getNextTextArea(int maxLineWidth){
  if (null != wordVestige) {
    TextArea textArea=(TextArea)AreaFactory.createTextArea(textContent,offset,lineBaseLevel,lineRunDirection,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,wordVestige);
    return textArea;
  }
  if (null != remainWord) {
    TextArea textArea=(TextArea)AreaFactory.createTextArea(textContent,offset,lineBaseLevel,lineRunDirection,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,remainWord);
    remainWord=null;
    return textArea;
  }
  if (null == remainWords || !remainWords.hasWord()) {
    Chunk chunk=remainChunks.getNext();
    if (chunk == Chunk.HARD_LINE_BREAK) {
      FontHandler handler=new FontHandler(fontManager,textContent,false);
      TextArea textArea=(TextArea)AreaFactory.createTextArea(textContent,handler.getFontInfo(),true);
      textArea.setTextLength(1);
      hasLineBreak=true;
      return textArea;
    }
    fontInfo=chunk.getFontInfo();
    lineBaseLevel=chunk.getBaseLevel();
    lineRunDirection=chunk.getRunDirection();
    remainWords=new WordRecognizerWrapper(chunk.getText(),locale);
  }
  TextArea textArea=(TextArea)AreaFactory.createTextArea(textContent,offset,lineBaseLevel,lineRunDirection,fontInfo);
  textArea.setMaxWidth(maxLineWidth);
  textArea.setWidth(0);
  addWordsIntoTextArea(textArea,remainWords);
  return textArea;
}","private TextArea getNextTextArea(int maxLineWidth){
  if (null != wordVestige) {
    TextArea textArea=(TextArea)AreaFactory.createTextArea(textContent,offset,lineBaseLevel,runLevel,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,wordVestige);
    return textArea;
  }
  if (null != remainWord) {
    TextArea textArea=(TextArea)AreaFactory.createTextArea(textContent,offset,lineBaseLevel,runLevel,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,remainWord);
    remainWord=null;
    return textArea;
  }
  if (null == remainWords || !remainWords.hasWord()) {
    Chunk chunk=remainChunks.getNext();
    if (chunk == Chunk.HARD_LINE_BREAK) {
      FontHandler handler=new FontHandler(fontManager,textContent,false);
      TextArea textArea=(TextArea)AreaFactory.createTextArea(textContent,handler.getFontInfo(),true);
      textArea.setTextLength(1);
      hasLineBreak=true;
      return textArea;
    }
    fontInfo=chunk.getFontInfo();
    lineBaseLevel=chunk.getBaseLevel();
    runLevel=chunk.getRunLevel();
    remainWords=new WordRecognizerWrapper(chunk.getText(),locale);
  }
  TextArea textArea=(TextArea)AreaFactory.createTextArea(textContent,offset,lineBaseLevel,runLevel,fontInfo);
  textArea.setMaxWidth(maxLineWidth);
  textArea.setWidth(0);
  addWordsIntoTextArea(textArea,remainWords);
  return textArea;
}",0.9556010928961748
72386,"public IStyle getComputedStyle(){
  if (computedStyle == null) {
    if (inlineStyle == null || inlineStyle.isEmpty()) {
      String cacheKey=styleClass;
      ITableContent table=((IRowContent)parent).getTable();
      if (column >= 0 && column < table.getColumnCount()) {
        IColumn tblColumn=table.getColumn(column);
        if (tblColumn != null) {
          String columnStyleClass=tblColumn.getStyleClass();
          if (columnStyleClass != null) {
            cacheKey=cacheKey + columnStyleClass;
          }
        }
      }
      ComputedStyle pcs=(ComputedStyle)((IContent)parent).getComputedStyle();
      ComputedStyle cs=pcs.getCachedStyle(cacheKey);
      if (cs == null) {
        cs=new CellComputedStyle(this);
        pcs.addCachedStyle(styleClass,cs);
      }
      computedStyle=cs;
    }
 else {
      computedStyle=new CellComputedStyle(this);
    }
  }
  return computedStyle;
}","public IStyle getComputedStyle(){
  if (computedStyle == null) {
    if (inlineStyle == null || inlineStyle.isEmpty()) {
      String cacheKey=styleClass;
      ITableContent table=((IRowContent)parent).getTable();
      int column=getColumn();
      if (column >= 0 && column < table.getColumnCount()) {
        IColumn tblColumn=table.getColumn(column);
        if (tblColumn != null) {
          String columnStyleClass=tblColumn.getStyleClass();
          if (columnStyleClass != null) {
            cacheKey=cacheKey + columnStyleClass;
          }
        }
      }
      ComputedStyle pcs=(ComputedStyle)((IContent)parent).getComputedStyle();
      ComputedStyle cs=pcs.getCachedStyle(cacheKey);
      if (cs == null) {
        cs=new CellComputedStyle(this);
        pcs.addCachedStyle(styleClass,cs);
      }
      computedStyle=cs;
    }
 else {
      computedStyle=new CellComputedStyle(this);
    }
  }
  return computedStyle;
}",0.9837837837837838
72387,"AbstractArea(IReportContent report){
  if (report != null) {
    assert(report instanceof ReportContent);
    style=new AreaStyle(((ReportContent)report).getCSSEngine());
  }
 else {
    style=new AreaStyle(new BIRTCSSEngine());
  }
}","AbstractArea(IReportContent report){
  if (report != null) {
    assert(report instanceof ReportContent);
    style=new AreaStyle(((ReportContent)report).getCSSEngine());
  }
 else {
    style=new AreaStyle(emptyCssEngine);
  }
}",0.9546436285097192
72388,"private void declareStyle(StyleEntry style,int id){
  boolean wrapText=context.getWrappingText();
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  if (id >= StyleEngine.RESERVE_STYLE_ID) {
    String horizontalAlign=style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign,wrapText);
    writer.openTag(""String_Node_Str"");
    String bottomColor=style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    String topColor=style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    String leftColor=style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    String rightColor=style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    String size=style.getProperty(StyleConstant.FONT_SIZE_PROP);
    String fontStyle=style.getProperty(StyleConstant.FONT_STYLE_PROP);
    String fontWeight=style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    String strikeThrough=style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    String underline=style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    String color=style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    String bgColor=style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
    writeBackGroudColor(bgColor);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}","private void declareStyle(StyleEntry style,int id){
  boolean wrapText=context.getWrappingText();
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  if (id >= StyleEngine.RESERVE_STYLE_ID) {
    String direction=style.getProperty(StyleConstant.DIRECTION_PROP);
    String horizontalAlign=style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign,direction,wrapText);
    writer.openTag(""String_Node_Str"");
    String bottomColor=style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    String topColor=style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    String leftColor=style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    String rightColor=style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    String size=style.getProperty(StyleConstant.FONT_SIZE_PROP);
    String fontStyle=style.getProperty(StyleConstant.FONT_STYLE_PROP);
    String fontWeight=style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    String strikeThrough=style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    String underline=style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    String color=style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    String bgColor=style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
    writeBackGroudColor(bgColor);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}",0.9843871975019516
72389,"public void writeAlignment(String horizontal,String vertical,boolean wrapText){
  writer.openTag(""String_Node_Str"");
  if (isValid(horizontal)) {
    writer.attribute(""String_Node_Str"",horizontal);
  }
  if (isValid(vertical)) {
    writer.attribute(""String_Node_Str"",vertical);
  }
  if (wrapText) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.closeTag(""String_Node_Str"");
}","public void writeAlignment(String horizontal,String vertical,String direction,boolean wrapText){
  writer.openTag(""String_Node_Str"");
  if (isValid(horizontal)) {
    writer.attribute(""String_Node_Str"",horizontal);
  }
  if (isValid(vertical)) {
    writer.attribute(""String_Node_Str"",vertical);
  }
  if (isValid(direction)) {
    if (BIRTConstants.BIRT_RTL_VALUE.equals(direction))     writer.attribute(""String_Node_Str"",""String_Node_Str"");
 else     writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (wrapText) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.closeTag(""String_Node_Str"");
}",0.778743961352657
72390,"public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontWeight(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getTextLineThrough(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getTextUnderline(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  return entry;
}","public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontWeight(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getTextLineThrough(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getTextUnderline(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  entry.setProperty(StyleConstant.DIRECTION_PROP,style.getDirection());
  return entry;
}",0.989067719404798
72391,"/** 
 * populate the extended extensions information.
 * @param name
 * @param aggrFunc
 * @param elem
 * @param aggrWrapper 
 */
private void populateExtendedAggrInfo(String name,IAggregation aggrFunc,IConfigurationElement elem,AggrFunctionWrapper aggrWrapper){
  IConfigurationElement[] uiInfo=elem.getChildren(ELEMENT_UIINFO);
  assert(uiInfo != null && uiInfo.length == 1);
  String paramInfo=uiInfo[0].getAttribute(ATTRIBUTE_PARAMETER_META_INFO);
  String textInfo=uiInfo[0].getAttribute(ATTRIBUTE_TEXT_DATA);
  aggrWrapper.setDisplayName(textInfo);
  List paramList=new ArrayList();
  String[] paramInfos=paramInfo.split(""String_Node_Str"");
  boolean[] paramFlags=aggrFunc.getParameterDefn();
  if (paramInfos != null && paramInfos.length > 0) {
    populateDataFiledParameterDefn(paramList);
    for (int k=0; k < paramInfos.length; k++) {
      final String s=paramInfos[k].trim();
      int index=s.indexOf(' ');
      String paramName=null;
      if (index > 0) {
        paramName=s.substring(index + 1).trim();
      }
 else {
        paramName=paramInfos[k];
      }
      if (k + 1 >= paramFlags.length) {
        break;
      }
      ParameterDefn paramDefn=new ParameterDefn(paramName,paramName,!paramFlags[k + 1],false);
      paramList.add(paramDefn);
    }
  }
  aggrWrapper.setParameterDefn(null);
}","/** 
 * populate the extended extensions information.
 * @param name
 * @param aggrFunc
 * @param elem
 * @param aggrWrapper 
 */
private void populateExtendedAggrInfo(String name,IAggregation aggrFunc,IConfigurationElement elem,AggrFunctionWrapper aggrWrapper){
  IConfigurationElement[] uiInfo=elem.getChildren(ELEMENT_UIINFO);
  assert(uiInfo != null && uiInfo.length == 1);
  String paramInfo=uiInfo[0].getAttribute(ATTRIBUTE_PARAMETER_META_INFO);
  String textInfo=uiInfo[0].getAttribute(ATTRIBUTE_TEXT_DATA);
  aggrWrapper.setDisplayName(textInfo);
  List paramList=new ArrayList();
  String[] paramInfos=paramInfo.split(""String_Node_Str"");
  boolean[] paramFlags=aggrFunc.getParameterDefn();
  if (paramInfos != null && paramInfos.length > 0) {
    populateDataFiledParameterDefn(paramList);
    for (int k=0; k < paramInfos.length; k++) {
      final String s=paramInfos[k].trim();
      int index=s.indexOf(' ');
      String paramName=null;
      if (index > 0) {
        paramName=s.substring(index + 1).trim();
      }
 else {
        paramName=paramInfos[k];
      }
      if (k + 1 >= paramFlags.length) {
        break;
      }
      ParameterDefn paramDefn=new ParameterDefn(paramName,paramName,!paramFlags[k + 1],false);
      paramList.add(paramDefn);
    }
  }
  IParameterDefn[] params=new IParameterDefn[paramList.size()];
  paramList.toArray(params);
  aggrWrapper.setParameterDefn(params);
}",0.9623124771313576
72392,"protected IContentEmitter createContentEmitter() throws EngineException {
  String format=renderOptions.getOutputFormat();
  if (format == null) {
    format=RenderOption.OUTPUT_FORMAT_HTML;
  }
  ExtensionManager extManager=ExtensionManager.getInstance();
  boolean supported=false;
  Collection supportedFormats=extManager.getSupportedFormat();
  Iterator iter=supportedFormats.iterator();
  while (iter.hasNext()) {
    String supportedFormat=(String)iter.next();
    if (supportedFormat != null && supportedFormat.equalsIgnoreCase(format)) {
      supported=true;
      break;
    }
  }
  if (!supported) {
    log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
    throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
  }
  pagination=extManager.getPagination(format);
  Boolean outputDisplayNone=extManager.getOutputDisplayNone(format);
  if (!renderOptions.hasOption(IRenderOption.OUTPUT_DISPLAY_NONE)) {
    renderOptions.setOption(IRenderOption.OUTPUT_DISPLAY_NONE,outputDisplayNone);
  }
  IContentEmitter emitter=null;
  try {
    emitter=extManager.createEmitter(format,emitterID);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,format,t);
  }
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,format);
  }
  return emitter;
}","protected IContentEmitter createContentEmitter() throws EngineException {
  ExtensionManager extManager=ExtensionManager.getInstance();
  pagination=extManager.getPagination(emitterID);
  Boolean outputDisplayNone=extManager.getOutputDisplayNone(emitterID);
  if (!renderOptions.hasOption(IRenderOption.OUTPUT_DISPLAY_NONE)) {
    renderOptions.setOption(IRenderOption.OUTPUT_DISPLAY_NONE,outputDisplayNone);
  }
  IContentEmitter emitter=null;
  try {
    emitter=extManager.createEmitter(format,emitterID);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,format,t);
  }
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,format);
  }
  return emitter;
}",0.5874009178139341
72393,"/** 
 * intialize the render options used to render the report. the render options are load from: <li> engine level default options</li> <li> engine level format options</li> <li> engine level emitter options</li> <li> task level options </li>
 */
protected void setupRenderOption(){
  String format=RenderOption.OUTPUT_FORMAT_HTML;
  ;
  if (renderOptions != null) {
    format=renderOptions.getOutputFormat();
    if (format == null || format.length() == 0) {
      format=RenderOption.OUTPUT_FORMAT_HTML;
      renderOptions.setOutputFormat(format);
    }
  }
  Map appContext=executionContext.getAppContext();
  if (IRenderOption.OUTPUT_FORMAT_PDF.equals(format)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext instanceof PDFRenderContext) {
      PDFRenderContext pdfContext=(PDFRenderContext)renderContext;
      mergeOption(renderOptions,PDFRenderOption.BASE_URL,pdfContext.getBaseURL());
      mergeOption(renderOptions,PDFRenderOption.FONT_DIRECTORY,pdfContext.getFontDirectory());
      mergeOption(renderOptions,PDFRenderOption.SUPPORTED_IMAGE_FORMATS,pdfContext.getSupportedImageFormats());
      mergeOption(renderOptions,PDFRenderOption.IS_EMBEDDED_FONT,new Boolean(pdfContext.isEmbededFont()));
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext instanceof HTMLRenderContext) {
      HTMLRenderContext htmlContext=(HTMLRenderContext)renderContext;
      mergeOption(renderOptions,HTMLRenderOption.BASE_IMAGE_URL,htmlContext.getBaseImageURL());
      mergeOption(renderOptions,HTMLRenderOption.BASE_URL,htmlContext.getBaseURL());
      mergeOption(renderOptions,HTMLRenderOption.IMAGE_DIRECTROY,htmlContext.getImageDirectory());
      mergeOption(renderOptions,HTMLRenderOption.SUPPORTED_IMAGE_FORMATS,htmlContext.getSupportedImageFormats());
    }
  }
  HashMap options=new HashMap();
  HashMap configs=engine.getConfig().getEmitterConfigs();
  IRenderOption defaultOptions=(IRenderOption)configs.get(IEngineConfig.DEFAULT_RENDER_OPTION);
  if (defaultOptions == null) {
    defaultOptions=(IRenderOption)configs.get(IRenderOption.OUTPUT_FORMAT_HTML);
  }
  if (defaultOptions != null) {
    options.putAll(defaultOptions.getOptions());
  }
  IRenderOption formatOptions=(IRenderOption)configs.get(format);
  if (formatOptions != null) {
    options.putAll(formatOptions.getOptions());
  }
  if (emitterID != null) {
    IRenderOption emitterOptions=(IRenderOption)configs.get(emitterID);
    if (emitterOptions != null) {
      options.putAll(emitterOptions.getOptions());
    }
  }
  if (renderOptions != null) {
    options.putAll(renderOptions.getOptions());
  }
  IRenderOption allOptions=new RenderOption(options);
  executionContext.setRenderOption(allOptions);
  if (IRenderOption.OUTPUT_FORMAT_PDF.equals(format)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext == null) {
      PDFRenderOption pdfOptions=new PDFRenderOption(allOptions);
      PDFRenderContext pdfContext=new PDFRenderContext();
      pdfContext.setBaseURL(pdfOptions.getBaseURL());
      pdfContext.setEmbededFont(pdfOptions.isEmbededFont());
      pdfContext.setFontDirectory(pdfOptions.getFontDirectory());
      pdfContext.setSupportedImageFormats(pdfOptions.getSupportedImageFormats());
      appContext.put(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT,pdfContext);
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext == null) {
      HTMLRenderContext htmlContext=new HTMLRenderContext();
      HTMLRenderOption htmlOptions=new HTMLRenderOption(allOptions);
      htmlContext.setBaseImageURL(htmlOptions.getBaseImageURL());
      htmlContext.setBaseURL(htmlOptions.getBaseURL());
      htmlContext.setImageDirectory(htmlOptions.getImageDirectory());
      htmlContext.setSupportedImageFormats(htmlOptions.getSupportedImageFormats());
      htmlContext.SetRenderOption(allOptions);
      appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,htmlContext);
    }
  }
}","/** 
 * intialize the render options used to render the report. the render options are load from: <li> engine level default options</li> <li> engine level format options</li> <li> engine level emitter options</li> <li> task level options </li>
 * @throws EngineException 
 */
protected void setupRenderOption() throws EngineException {
  ExtensionManager extManager=ExtensionManager.getInstance();
  if (renderOptions != null) {
    format=renderOptions.getOutputFormat();
    emitterID=renderOptions.getEmitterID();
    if (emitterID != null) {
      boolean invalidEmitterID=extManager.isInvalidEmitterID(emitterID);
      if (!invalidEmitterID) {
        log.log(Level.SEVERE,MessageConstants.INVALID_EMITTER_ID,emitterID);
        throw new EngineException(MessageConstants.INVALID_EMITTER_ID,emitterID);
      }
    }
 else {
      if (format == null) {
        format=RenderOption.OUTPUT_FORMAT_HTML;
        emitterID=RenderOption.OUTPUT_EMITTERID_HTML;
      }
 else {
        boolean supportedFormat=extManager.isSupportedFormat(format);
        if (!supportedFormat) {
          log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
          throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
        }
 else {
          emitterID=extManager.getEmitterID(format);
        }
      }
    }
  }
  Map appContext=executionContext.getAppContext();
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext instanceof PDFRenderContext) {
      PDFRenderContext pdfContext=(PDFRenderContext)renderContext;
      mergeOption(renderOptions,PDFRenderOption.BASE_URL,pdfContext.getBaseURL());
      mergeOption(renderOptions,PDFRenderOption.FONT_DIRECTORY,pdfContext.getFontDirectory());
      mergeOption(renderOptions,PDFRenderOption.SUPPORTED_IMAGE_FORMATS,pdfContext.getSupportedImageFormats());
      mergeOption(renderOptions,PDFRenderOption.IS_EMBEDDED_FONT,new Boolean(pdfContext.isEmbededFont()));
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext instanceof HTMLRenderContext) {
      HTMLRenderContext htmlContext=(HTMLRenderContext)renderContext;
      mergeOption(renderOptions,HTMLRenderOption.BASE_IMAGE_URL,htmlContext.getBaseImageURL());
      mergeOption(renderOptions,HTMLRenderOption.BASE_URL,htmlContext.getBaseURL());
      mergeOption(renderOptions,HTMLRenderOption.IMAGE_DIRECTROY,htmlContext.getImageDirectory());
      mergeOption(renderOptions,HTMLRenderOption.SUPPORTED_IMAGE_FORMATS,htmlContext.getSupportedImageFormats());
    }
  }
  HashMap options=new HashMap();
  HashMap configs=engine.getConfig().getEmitterConfigs();
  IRenderOption defaultOptions=(IRenderOption)configs.get(IEngineConfig.DEFAULT_RENDER_OPTION);
  if (defaultOptions == null) {
    defaultOptions=(IRenderOption)configs.get(IRenderOption.OUTPUT_FORMAT_HTML);
  }
  if (defaultOptions != null) {
    options.putAll(defaultOptions.getOptions());
  }
  IRenderOption formatOptions=(IRenderOption)configs.get(emitterID);
  if (formatOptions != null) {
    options.putAll(formatOptions.getOptions());
  }
  if (emitterID != null) {
    IRenderOption emitterOptions=(IRenderOption)configs.get(emitterID);
    if (emitterOptions != null) {
      options.putAll(emitterOptions.getOptions());
    }
  }
  if (renderOptions != null) {
    options.putAll(renderOptions.getOptions());
  }
  IRenderOption allOptions=new RenderOption(options);
  executionContext.setRenderOption(allOptions);
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext == null) {
      PDFRenderOption pdfOptions=new PDFRenderOption(allOptions);
      PDFRenderContext pdfContext=new PDFRenderContext();
      pdfContext.setBaseURL(pdfOptions.getBaseURL());
      pdfContext.setEmbededFont(pdfOptions.isEmbededFont());
      pdfContext.setFontDirectory(pdfOptions.getFontDirectory());
      pdfContext.setSupportedImageFormats(pdfOptions.getSupportedImageFormats());
      appContext.put(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT,pdfContext);
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext == null) {
      HTMLRenderContext htmlContext=new HTMLRenderContext();
      HTMLRenderOption htmlOptions=new HTMLRenderOption(allOptions);
      htmlContext.setBaseImageURL(htmlOptions.getBaseImageURL());
      htmlContext.setBaseURL(htmlOptions.getBaseURL());
      htmlContext.setImageDirectory(htmlOptions.getImageDirectory());
      htmlContext.setSupportedImageFormats(htmlOptions.getSupportedImageFormats());
      htmlContext.SetRenderOption(allOptions);
      appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,htmlContext);
    }
  }
}",0.5860332749562172
72394,"/** 
 * @param format the output format
 * @return the pagination for the specific format
 */
public String getPagination(String format){
  if (format != null) {
    format=format.toLowerCase();
  }
  if (formats.containsKey(format)) {
    return ((EmitterInfo)formats.get(format)).getPagination();
  }
  return PAGE_BREAK_PAGINATION;
}","/** 
 * @param emitterId emitterId
 * @return the pagination for the specified emitter ID.
 */
public String getPagination(String emitterId){
  if (emitterId != null) {
    for (    EmitterInfo emitterInfo : emitterExtensions) {
      if (emitterId.equals(emitterInfo.getID())) {
        return emitterInfo.getPagination();
      }
    }
  }
  return PAGE_BREAK_PAGINATION;
}",0.4922644163150492
72395,"public Boolean getOutputDisplayNone(String format){
  if (format != null) {
    format=format.toLowerCase();
  }
  if (formats.containsKey(format)) {
    return ((EmitterInfo)formats.get(format)).getOutputDisplayNone();
  }
  return DEFAULT_OUTPUT_DISPLAY_NONE;
}","public Boolean getOutputDisplayNone(String emitterId){
  if (emitterId != null) {
    for (    EmitterInfo emitterInfo : emitterExtensions) {
      if (emitterId.equals(emitterInfo.getID())) {
        return emitterInfo.getOutputDisplayNone();
      }
    }
  }
  return DEFAULT_OUTPUT_DISPLAY_NONE;
}",0.5106382978723404
72396,"/** 
 * intialize the render options used to render the report. the render options are load from: <li> engine level default options</li> <li> engine level format options</li> <li> engine level emitter options</li> <li> task level options </li>
 * @throws EngineException 
 */
protected void setupRenderOption() throws EngineException {
  ExtensionManager extManager=ExtensionManager.getInstance();
  if (renderOptions != null) {
    format=renderOptions.getOutputFormat();
    emitterID=renderOptions.getEmitterID();
    if (emitterID != null) {
      boolean invalidEmitterID=extManager.isInvalidEmitterID(emitterID);
      if (!invalidEmitterID) {
        log.log(Level.SEVERE,MessageConstants.INVALID_EMITTER_ID,emitterID);
        throw new EngineException(MessageConstants.INVALID_EMITTER_ID,emitterID);
      }
    }
 else {
      if (format == null) {
        format=RenderOption.OUTPUT_FORMAT_HTML;
        emitterID=RenderOption.OUTPUT_EMITTERID_HTML;
      }
 else {
        boolean supportedFormat=extManager.isSupportedFormat(format);
        if (!supportedFormat) {
          log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
          throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
        }
 else {
          emitterID=extManager.getEmitterID(format);
        }
      }
    }
  }
  Map appContext=executionContext.getAppContext();
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext instanceof PDFRenderContext) {
      PDFRenderContext pdfContext=(PDFRenderContext)renderContext;
      mergeOption(renderOptions,PDFRenderOption.BASE_URL,pdfContext.getBaseURL());
      mergeOption(renderOptions,PDFRenderOption.FONT_DIRECTORY,pdfContext.getFontDirectory());
      mergeOption(renderOptions,PDFRenderOption.SUPPORTED_IMAGE_FORMATS,pdfContext.getSupportedImageFormats());
      mergeOption(renderOptions,PDFRenderOption.IS_EMBEDDED_FONT,new Boolean(pdfContext.isEmbededFont()));
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext instanceof HTMLRenderContext) {
      HTMLRenderContext htmlContext=(HTMLRenderContext)renderContext;
      mergeOption(renderOptions,HTMLRenderOption.BASE_IMAGE_URL,htmlContext.getBaseImageURL());
      mergeOption(renderOptions,HTMLRenderOption.BASE_URL,htmlContext.getBaseURL());
      mergeOption(renderOptions,HTMLRenderOption.IMAGE_DIRECTROY,htmlContext.getImageDirectory());
      mergeOption(renderOptions,HTMLRenderOption.SUPPORTED_IMAGE_FORMATS,htmlContext.getSupportedImageFormats());
    }
  }
  HashMap options=new HashMap();
  HashMap configs=engine.getConfig().getEmitterConfigs();
  IRenderOption defaultOptions=(IRenderOption)configs.get(IEngineConfig.DEFAULT_RENDER_OPTION);
  if (defaultOptions == null) {
    defaultOptions=(IRenderOption)configs.get(IRenderOption.OUTPUT_FORMAT_HTML);
  }
  if (defaultOptions != null) {
    options.putAll(defaultOptions.getOptions());
  }
  IRenderOption formatOptions=(IRenderOption)configs.get(emitterID);
  if (formatOptions != null) {
    options.putAll(formatOptions.getOptions());
  }
  if (emitterID != null) {
    IRenderOption emitterOptions=(IRenderOption)configs.get(emitterID);
    if (emitterOptions != null) {
      options.putAll(emitterOptions.getOptions());
    }
  }
  if (renderOptions != null) {
    options.putAll(renderOptions.getOptions());
  }
  IRenderOption allOptions=new RenderOption(options);
  executionContext.setRenderOption(allOptions);
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext == null) {
      PDFRenderOption pdfOptions=new PDFRenderOption(allOptions);
      PDFRenderContext pdfContext=new PDFRenderContext();
      pdfContext.setBaseURL(pdfOptions.getBaseURL());
      pdfContext.setEmbededFont(pdfOptions.isEmbededFont());
      pdfContext.setFontDirectory(pdfOptions.getFontDirectory());
      pdfContext.setSupportedImageFormats(pdfOptions.getSupportedImageFormats());
      appContext.put(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT,pdfContext);
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext == null) {
      HTMLRenderContext htmlContext=new HTMLRenderContext();
      HTMLRenderOption htmlOptions=new HTMLRenderOption(allOptions);
      htmlContext.setBaseImageURL(htmlOptions.getBaseImageURL());
      htmlContext.setBaseURL(htmlOptions.getBaseURL());
      htmlContext.setImageDirectory(htmlOptions.getImageDirectory());
      htmlContext.setSupportedImageFormats(htmlOptions.getSupportedImageFormats());
      htmlContext.SetRenderOption(allOptions);
      appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,htmlContext);
    }
  }
}","/** 
 * intialize the render options used to render the report. the render options are load from: <li> engine level default options</li> <li> engine level format options</li> <li> engine level emitter options</li> <li> task level options </li>
 * @throws EngineException 
 */
protected void setupRenderOption() throws EngineException {
  ExtensionManager extManager=ExtensionManager.getInstance();
  if (renderOptions != null) {
    format=renderOptions.getOutputFormat();
    emitterID=renderOptions.getEmitterID();
    if (emitterID != null) {
      boolean validEmitterID=extManager.isValidEmitterID(emitterID);
      if (!validEmitterID) {
        log.log(Level.SEVERE,MessageConstants.INVALID_EMITTER_ID,emitterID);
        throw new EngineException(MessageConstants.INVALID_EMITTER_ID,emitterID);
      }
    }
 else {
      if (format == null) {
        format=RenderOption.OUTPUT_FORMAT_HTML;
        emitterID=RenderOption.OUTPUT_EMITTERID_HTML;
      }
 else {
        boolean supportedFormat=extManager.isSupportedFormat(format);
        if (!supportedFormat) {
          log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
          throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
        }
 else {
          emitterID=extManager.getEmitterID(format);
        }
      }
    }
  }
  Map appContext=executionContext.getAppContext();
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext instanceof PDFRenderContext) {
      PDFRenderContext pdfContext=(PDFRenderContext)renderContext;
      mergeOption(renderOptions,PDFRenderOption.BASE_URL,pdfContext.getBaseURL());
      mergeOption(renderOptions,PDFRenderOption.FONT_DIRECTORY,pdfContext.getFontDirectory());
      mergeOption(renderOptions,PDFRenderOption.SUPPORTED_IMAGE_FORMATS,pdfContext.getSupportedImageFormats());
      mergeOption(renderOptions,PDFRenderOption.IS_EMBEDDED_FONT,new Boolean(pdfContext.isEmbededFont()));
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext instanceof HTMLRenderContext) {
      HTMLRenderContext htmlContext=(HTMLRenderContext)renderContext;
      mergeOption(renderOptions,HTMLRenderOption.BASE_IMAGE_URL,htmlContext.getBaseImageURL());
      mergeOption(renderOptions,HTMLRenderOption.BASE_URL,htmlContext.getBaseURL());
      mergeOption(renderOptions,HTMLRenderOption.IMAGE_DIRECTROY,htmlContext.getImageDirectory());
      mergeOption(renderOptions,HTMLRenderOption.SUPPORTED_IMAGE_FORMATS,htmlContext.getSupportedImageFormats());
    }
  }
  HashMap options=new HashMap();
  HashMap configs=engine.getConfig().getEmitterConfigs();
  IRenderOption defaultOptions=(IRenderOption)configs.get(IEngineConfig.DEFAULT_RENDER_OPTION);
  if (defaultOptions == null) {
    defaultOptions=(IRenderOption)configs.get(IRenderOption.OUTPUT_FORMAT_HTML);
  }
  if (defaultOptions != null) {
    options.putAll(defaultOptions.getOptions());
  }
  IRenderOption formatOptions=(IRenderOption)configs.get(emitterID);
  if (formatOptions != null) {
    options.putAll(formatOptions.getOptions());
  }
  if (emitterID != null) {
    IRenderOption emitterOptions=(IRenderOption)configs.get(emitterID);
    if (emitterOptions != null) {
      options.putAll(emitterOptions.getOptions());
    }
  }
  if (renderOptions != null) {
    options.putAll(renderOptions.getOptions());
  }
  IRenderOption allOptions=new RenderOption(options);
  executionContext.setRenderOption(allOptions);
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext == null) {
      PDFRenderOption pdfOptions=new PDFRenderOption(allOptions);
      PDFRenderContext pdfContext=new PDFRenderContext();
      pdfContext.setBaseURL(pdfOptions.getBaseURL());
      pdfContext.setEmbededFont(pdfOptions.isEmbededFont());
      pdfContext.setFontDirectory(pdfOptions.getFontDirectory());
      pdfContext.setSupportedImageFormats(pdfOptions.getSupportedImageFormats());
      appContext.put(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT,pdfContext);
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext == null) {
      HTMLRenderContext htmlContext=new HTMLRenderContext();
      HTMLRenderOption htmlOptions=new HTMLRenderOption(allOptions);
      htmlContext.setBaseImageURL(htmlOptions.getBaseImageURL());
      htmlContext.setBaseURL(htmlOptions.getBaseURL());
      htmlContext.setImageDirectory(htmlOptions.getImageDirectory());
      htmlContext.setSupportedImageFormats(htmlOptions.getSupportedImageFormats());
      htmlContext.SetRenderOption(allOptions);
      appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,htmlContext);
    }
  }
}",0.9991961414790996
72397,"/** 
 * @param cubeHandle
 * @param query
 * @param resultMetaList
 * @throws DataException 
 * @throws AdapterException 
 */
private static void prepareMeasure(TabularCubeHandle cubeHandle,QueryDefinition query,List metaList) throws AdapterException {
  try {
    List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
    for (int i=0; i < measureGroups.size(); i++) {
      MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
      List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
      for (int j=0; j < measures.size(); j++) {
        MeasureHandle measure=(MeasureHandle)measures.get(j);
        String function=measure.getFunction();
        if (query.getGroups().size() > 0) {
          if (measure.getMeasureExpression() == null || measure.getMeasureExpression().trim().length() == 0)           throw new AdapterException(ResourceConstants.INVALID_MEASURE_EXPRESSION,measure.getName());
          Binding binding=new Binding(measure.getName(),new ScriptExpression(measure.getMeasureExpression()));
          binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(function));
          IGroupDefinition group=(IGroupDefinition)query.getGroups().get(query.getGroups().size() - 1);
          binding.addAggregateOn(group.getName());
          query.addBinding(binding);
        }
 else {
          query.addBinding(new Binding(measure.getName(),new ScriptExpression(measure.getMeasureExpression())));
        }
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(measure.getName(),null,DataSetIterator.ColumnMeta.MEASURE_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(measure.getDataType()));
        metaList.add(meta);
      }
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}","/** 
 * @param cubeHandle
 * @param query
 * @param resultMetaList
 * @throws DataException 
 * @throws AdapterException 
 */
private static void prepareMeasure(TabularCubeHandle cubeHandle,QueryDefinition query,List metaList) throws AdapterException {
  try {
    List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
    for (int i=0; i < measureGroups.size(); i++) {
      MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
      List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
      for (int j=0; j < measures.size(); j++) {
        MeasureHandle measure=(MeasureHandle)measures.get(j);
        String function=measure.getFunction();
        String exprText=measure.getMeasureExpression();
        IScriptExpression expr=exprText != null ? new ScriptExpression(exprText) : null;
        if (query.getGroups().size() > 0) {
          Binding binding=new Binding(measure.getName(),expr);
          binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(function));
          IGroupDefinition group=(IGroupDefinition)query.getGroups().get(query.getGroups().size() - 1);
          binding.addAggregateOn(group.getName());
          query.addBinding(binding);
        }
 else {
          query.addBinding(new Binding(measure.getName(),expr));
        }
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(measure.getName(),null,DataSetIterator.ColumnMeta.MEASURE_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(measure.getDataType()));
        metaList.add(meta);
      }
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}",0.8454960091220068
72398,"public int isNullable(int param) throws OdaException {
  return IParameterMetaData.parameterModeUnknown;
}","public int isNullable(int param) throws OdaException {
  return IParameterMetaData.parameterNullableUnknown;
}",0.9537037037037036
72399,"public int getParameterMode(int param) throws OdaException {
  IParameterDefinition defn=(IParameterDefinition)paraDefnList[param];
  if (defn.isInputMode() && defn.isOutputMode())   return IParameterMetaData.parameterModeInOut;
 else   if (defn.isInputMode())   return IParameterMetaData.parameterModeIn;
 else   if (defn.isOutputMode())   return IParameterMetaData.parameterModeOut;
 else   return IParameterMetaData.parameterModeUnknown;
}","public int getParameterMode(int param) throws OdaException {
  IParameterDefinition defn=(IParameterDefinition)paraDefnList[param - 1];
  if (defn.isInputMode() && defn.isOutputMode())   return IParameterMetaData.parameterModeInOut;
 else   if (defn.isInputMode())   return IParameterMetaData.parameterModeIn;
 else   if (defn.isOutputMode())   return IParameterMetaData.parameterModeOut;
 else   return IParameterMetaData.parameterModeUnknown;
}",0.9954954954954957
72400,"public int getParameterType(int param) throws OdaException {
  IParameterDefinition defn=(IParameterDefinition)paraDefnList[param];
  Class dataTypeClass=DataType.getClass(defn.getType());
  return DataTypeUtil.toOdaType(dataTypeClass);
}","public int getParameterType(int param) throws OdaException {
  IParameterDefinition defn=(IParameterDefinition)paraDefnList[param - 1];
  Class dataTypeClass=DataType.getClass(defn.getType());
  return DataTypeUtil.toOdaType(dataTypeClass);
}",0.9916666666666668
72401,"/** 
 * get parameter metadata from database matadata
 */
private java.util.List getCallableParamMetaData(){
  java.util.List paramMetaDataList=new ArrayList();
  try {
    DatabaseMetaData metaData=conn.getMetaData();
    String cataLog=conn.getCatalog();
    ArrayList schemaList=null;
    String columnNamePattern=null;
    String procedureNamePattern=this.paramUtil.getProcedureName();
    String packagePattern=""String_Node_Str"";
    String schemaPattern=this.paramUtil.getSchemaName();
    if (!metaData.supportsCatalogsInProcedureCalls()) {
      packagePattern=this.paramUtil.getPackageName();
    }
    if (schemaPattern != null) {
      schemaList=new ArrayList();
      schemaList.add(schemaPattern);
    }
 else {
      java.sql.ResultSet rs=metaData.getSchemas();
      schemaList=createSchemaList(rs);
      rs.close();
    }
    if (schemaList == null || schemaList.size() == 0) {
      if (schemaList == null)       schemaList=new ArrayList();
      schemaList.add(""String_Node_Str"");
      columnNamePattern=""String_Node_Str"";
    }
    for (int i=0; i < schemaList.size(); i++) {
      java.sql.ResultSet rs=null;
      if (packagePattern.trim().length() > 0)       rs=metaData.getProcedureColumns(packagePattern,schemaList.get(i).toString(),procedureNamePattern,columnNamePattern);
 else       rs=metaData.getProcedureColumns(cataLog,schemaList.get(i).toString(),procedureNamePattern,columnNamePattern);
      while (rs.next()) {
        ParameterDefn p=new ParameterDefn();
        p.setParamName(rs.getString(""String_Node_Str""));
        p.setParamInOutType(rs.getInt(""String_Node_Str""));
        p.setParamType(rs.getInt(""String_Node_Str""));
        p.setParamTypeName(rs.getString(""String_Node_Str""));
        p.setPrecision(rs.getInt(""String_Node_Str""));
        p.setScale(rs.getInt(""String_Node_Str""));
        p.setIsNullable(rs.getInt(""String_Node_Str""));
        if (p.getParamType() == Types.OTHER)         correctParamType(p);
        if (p.getParamInOutType() != 5)         paramMetaDataList.add(p);
      }
      rs.close();
    }
  }
 catch (  SQLException e) {
  }
catch (  JDBCException ex) {
  }
  return paramMetaDataList;
}","/** 
 * get parameter metadata from database matadata
 */
private java.util.List getCallableParamMetaData(){
  java.util.List paramMetaDataList=new ArrayList();
  try {
    DatabaseMetaData metaData=conn.getMetaData();
    String cataLog=conn.getCatalog();
    ArrayList schemaList=null;
    String columnNamePattern=null;
    String procedureNamePattern=this.paramUtil.getProcedureName();
    String packagePattern=""String_Node_Str"";
    String schemaPattern=this.paramUtil.getSchemaName();
    if (!metaData.supportsCatalogsInProcedureCalls()) {
      packagePattern=this.paramUtil.getPackageName();
    }
    if (schemaPattern != null) {
      schemaList=new ArrayList();
      schemaList.add(schemaPattern);
    }
 else {
      java.sql.ResultSet rs=metaData.getSchemas();
      schemaList=createSchemaList(rs);
      rs.close();
    }
    if (schemaList == null || schemaList.size() == 0) {
      if (schemaList == null)       schemaList=new ArrayList();
      schemaList.add(""String_Node_Str"");
      columnNamePattern=""String_Node_Str"";
    }
    for (int i=0; i < schemaList.size(); i++) {
      java.sql.ResultSet rs=null;
      if (packagePattern.trim().length() > 0)       rs=metaData.getProcedureColumns(packagePattern,schemaList.get(i).toString(),procedureNamePattern,columnNamePattern);
 else       rs=metaData.getProcedureColumns(cataLog,schemaList.get(i).toString(),procedureNamePattern,columnNamePattern);
      while (rs.next()) {
        ParameterDefn p=new ParameterDefn();
        p.setParamName(rs.getString(""String_Node_Str""));
        p.setParamInOutType(rs.getInt(""String_Node_Str""));
        p.setParamType(rs.getInt(""String_Node_Str""));
        p.setParamTypeName(rs.getString(""String_Node_Str""));
        p.setPrecision(rs.getInt(""String_Node_Str""));
        p.setScale(rs.getInt(""String_Node_Str""));
        p.setIsNullable(rs.getInt(""String_Node_Str""));
        if (p.getParamType() == Types.OTHER)         correctParamType(p);
        paramMetaDataList.add(p);
      }
      rs.close();
    }
  }
 catch (  SQLException e) {
  }
catch (  JDBCException ex) {
  }
  return paramMetaDataList;
}",0.9906629318394023
72402,"private int getParameterType(int i) throws OdaException {
  if (parameterDefn.getParameterType(i) != Types.CHAR)   return parameterDefn.getParameterType(i);
  IParameterMetaData paramMetaData=getParameterMetaData();
  if (paramMetaData != null && paramMetaData.getParameterCount() > i)   return paramMetaData.getParameterType(i + 1);
 else   return parameterDefn.getParameterType(i);
}","private int getParameterType(int i) throws OdaException {
  if (parameterDefn.getParameterType(i) != Types.CHAR)   return parameterDefn.getParameterType(i);
  IParameterMetaData paramMetaData=getParameterMetaData();
  if (paramMetaData != null && paramMetaData.getParameterCount() >= i)   return paramMetaData.getParameterType(i);
 else   return parameterDefn.getParameterType(i);
}",0.8761408083441982
72403,"public IParameterMetaData getParameterMetaData() throws OdaException {
  assertNotNull(callStat);
  if (this.cachedParameterMetaData != null)   return this.cachedParameterMetaData;
  int[] positionArray=paramUtil.getParameterPositions();
  List paramMetaList1=this.getCallableParamMetaData();
  List paramMetaList2=new ArrayList();
  for (int i=0; i < positionArray.length; i++) {
    int index=positionArray[i];
    if (paramMetaList1.size() >= index)     paramMetaList2.add(paramMetaList1.get(index - 1));
 else     throw new OdaException(ResourceConstants.PREPARESTATEMENT_PARAMETER_METADATA_CANNOT_GET);
  }
  cachedParameterMetaData=new SPParameterMetaData(paramMetaList2);
  return cachedParameterMetaData;
}","public IParameterMetaData getParameterMetaData() throws OdaException {
  assertNotNull(callStat);
  if (this.cachedParameterMetaData != null)   return this.cachedParameterMetaData;
  int[] positionArray=paramUtil.getParameterPositions();
  List paramMetaList1=this.getCallableParamMetaData();
  List paramMetaList2=new ArrayList();
  int containsReturnValue=0;
  if (paramMetaList1.size() > 0 && paramUtil.containsReturnValue()) {
    if (((ParameterDefn)paramMetaList1.get(0)).getParamInOutType() == 5) {
      paramMetaList2.add(((ParameterDefn)paramMetaList1.get(0)));
      containsReturnValue++;
    }
  }
  for (int i=0; i < positionArray.length; i++) {
    int index=positionArray[i];
    if (paramMetaList1.size() >= index)     paramMetaList2.add(paramMetaList1.get(index - 1 + containsReturnValue));
 else     throw new OdaException(ResourceConstants.PREPARESTATEMENT_PARAMETER_METADATA_CANNOT_GET);
  }
  cachedParameterMetaData=new SPParameterMetaData(paramMetaList2);
  return cachedParameterMetaData;
}",0.7842683632157317
72404,"private java.sql.ResultSet getOutputParamResultSet() throws OdaException, SQLException {
  if (parameterDefn != null) {
    for (int i=0; i < parameterDefn.getParameterCount(); i++) {
      if (parameterDefn.getParameterMode(i) == IParameterMetaData.parameterModeOut) {
        Object expected=callStat.getObject(i + 1);
        if (expected instanceof java.sql.ResultSet)         return (java.sql.ResultSet)expected;
      }
    }
  }
  return null;
}","private java.sql.ResultSet getOutputParamResultSet() throws OdaException, SQLException {
  if (parameterDefn != null) {
    for (int i=1; i <= parameterDefn.getParameterCount(); i++) {
      if (parameterDefn.getParameterMode(i) == IParameterMetaData.parameterModeOut) {
        Object expected=callStat.getObject(i);
        if (expected instanceof java.sql.ResultSet)         return (java.sql.ResultSet)expected;
      }
    }
  }
  return null;
}",0.9922308546059934
72405,"public void setNull(int parameterId) throws OdaException {
  assertNotNull(callStat);
  try {
    if (this.getParameterMetaData() != null) {
      this.callStat.setNull(parameterId,this.getParameterMetaData().getParameterType(parameterId));
    }
 else {
      this.callStat.setNull(parameterId,java.sql.Types.OTHER);
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_NULL_VALUE,e);
  }
}","public void setNull(int parameterId) throws OdaException {
  assertNotNull(callStat);
  try {
    if (this.getParameterMetaData() != null) {
      this.callStat.setNull(parameterId,getParameterType(parameterId));
    }
 else {
      this.callStat.setNull(parameterId,java.sql.Types.OTHER);
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_NULL_VALUE,e);
  }
}",0.9678899082568808
72406,"/** 
 * get parameter metadata for callableStatement, if metadata is null or data mode is unknown or SQLException is thrown, register output parameter on DatabaseMetadata, else register output parameter on statement's metadata.
 * @throws OdaException
 */
private void registerOutputParameter() throws OdaException {
  if (parameterDefn != null) {
    for (int i=0; i < parameterDefn.getParameterCount(); i++) {
      if (parameterDefn.getParameterMode(i) == IParameterMetaData.parameterModeOut || parameterDefn.getParameterMode(i) == IParameterMetaData.parameterModeInOut) {
        registerOutParameter(i + 1,getParameterType(i));
      }
    }
  }
}","/** 
 * get parameter metadata for callableStatement, if metadata is null or data mode is unknown or SQLException is thrown, register output parameter on DatabaseMetadata, else register output parameter on statement's metadata.
 * @throws OdaException
 */
private void registerOutputParameter() throws OdaException {
  if (parameterDefn != null) {
    for (int i=1; i <= parameterDefn.getParameterCount(); i++) {
      if (parameterDefn.getParameterMode(i) == IParameterMetaData.parameterModeOut || parameterDefn.getParameterMode(i) == IParameterMetaData.parameterModeInOut) {
        registerOutParameter(i,getParameterType(i));
      }
    }
  }
}",0.994619523443505
72407,"private void parseProcedureName(String sqlTxt,int[] point) throws JDBCException {
  int start=sqlTxt.toLowerCase().indexOf(""String_Node_Str"");
  int end=point[0];
  if (point[0] == -1 && point[1] == -1) {
    end=sqlTxt.indexOf(""String_Node_Str"");
  }
  if (start == -1 || start + 4 >= end)   throw new JDBCException(ResourceConstants.INVALID_STORED_PRECEDURE,ResourceConstants.ERROR_INVALID_STATEMENT);
  String name=sqlTxt.substring(start + 4,end).trim();
  String[] pattern=name.split(""String_Node_Str"");
  for (int i=0; i < pattern.length; i++) {
    pattern[i]=escapeIdentifier(pattern[i]);
  }
  namePattern=pattern;
}","private void parseProcedureName(String sqlTxt,int[] point) throws JDBCException {
  int start=sqlTxt.toLowerCase().indexOf(""String_Node_Str"");
  int end=point[0];
  if (point[0] == -1 && point[1] == -1) {
    end=sqlTxt.indexOf(""String_Node_Str"");
  }
  if (start == -1 || start + 4 >= end)   throw new JDBCException(ResourceConstants.INVALID_STORED_PRECEDURE,ResourceConstants.ERROR_INVALID_STATEMENT);
  if (sqlTxt.substring(0,start).matches(""String_Node_Str"")) {
    this.containsReturnValue=true;
  }
  String name=sqlTxt.substring(start + 4,end).trim();
  String[] pattern=name.split(""String_Node_Str"");
  for (int i=0; i < pattern.length; i++) {
    pattern[i]=escapeIdentifier(pattern[i]);
  }
  namePattern=pattern;
}",0.9073387694588584
72408,"public int compare(Object o1,Object o2){
  Object3D obj1=getObjectFromEvent(o1);
  Object3D obj2=getObjectFromEvent(o2);
  if (obj1.getZMax() > obj2.getZMax()) {
    return -1;
  }
 else   if (obj1.getZMax() < obj2.getZMax()) {
    return 1;
  }
 else {
    return 0;
  }
}","public int compare(Object o1,Object o2){
  Object3D obj1=getObjectFromEvent(o1,true);
  Object3D obj2=getObjectFromEvent(o2,true);
  if (obj1.getZMax() > obj2.getZMax()) {
    return -1;
  }
 else   if (obj1.getZMax() < obj2.getZMax()) {
    return 1;
  }
 else {
    return 0;
  }
}",0.9820143884892086
72409,"protected Object3D getObjectFromEvent(Object event){
  if (event instanceof WrappedInstruction) {
    event=((WrappedInstruction)event).getEvent();
  }
  if (event instanceof I3DRenderEvent) {
    if (event instanceof Area3DRenderEvent) {
      return ((I3DRenderEvent)((Area3DRenderEvent)event).getElement(0)).getObject3D();
    }
 else {
      return ((I3DRenderEvent)event).getObject3D();
    }
  }
 else {
    throw new IllegalArgumentException();
  }
}","public static Object3D getObjectFromEvent(Object event,boolean bParent){
  if (event instanceof WrappedInstruction) {
    event=((WrappedInstruction)event).getEvent();
  }
  if (event instanceof I3DRenderEvent) {
    if (event instanceof Area3DRenderEvent) {
      return ((I3DRenderEvent)((Area3DRenderEvent)event).getElement(0)).getObject3D();
    }
 else     if (bParent && event instanceof Line3DRenderEvent && ((Line3DRenderEvent)event).getObject3DParent() != null) {
      return ((Line3DRenderEvent)event).getObject3DParent();
    }
 else {
      return ((I3DRenderEvent)event).getObject3D();
    }
  }
 else {
    throw new IllegalArgumentException();
  }
}",0.8003565062388592
72410,"Matrix getTransformMatrix(){
  Matrix m=Matrix.identity(4,4);
  m.set(2,2,-1);
  for (Iterator itr=ROT.getAngles().iterator(); itr.hasNext(); ) {
    Angle3D agl=(Angle3D)itr.next();
    if (agl.getType() == AngleType.NONE_LITERAL) {
      m=rotateMatrixY(m,agl.getYAngle());
      m=rotateMatrixX(m,agl.getXAngle());
      m=rotateMatrixZ(m,agl.getZAngle());
    }
 else {
switch (agl.getType().getValue()) {
case AngleType.X:
        m=rotateMatrixX(m,agl.getAxisAngle());
      break;
case AngleType.Y:
    m=rotateMatrixY(m,agl.getAxisAngle());
  break;
case AngleType.Z:
m=rotateMatrixZ(m,agl.getAxisAngle());
break;
}
}
}
return m;
}","Matrix getTransformMatrix(){
  Matrix m=Matrix.identity(4,4);
  m.set(2,2,-1);
  for (Iterator<?> itr=ROT.getAngles().iterator(); itr.hasNext(); ) {
    Angle3D agl=(Angle3D)itr.next();
    if (agl.getType() == AngleType.NONE_LITERAL) {
      m=rotateMatrixY(m,agl.getYAngle());
      m=rotateMatrixX(m,agl.getXAngle());
      m=rotateMatrixZ(m,agl.getZAngle());
    }
 else {
switch (agl.getType().getValue()) {
case AngleType.X:
        m=rotateMatrixX(m,agl.getAxisAngle());
      break;
case AngleType.Y:
    m=rotateMatrixY(m,agl.getAxisAngle());
  break;
case AngleType.Z:
m=rotateMatrixZ(m,agl.getAxisAngle());
break;
}
}
}
return m;
}",0.9976580796252928
72411,"protected void zsort(List rtList){
  Collections.sort(rtList,new Comparator(){
    public int compare(    Object o1,    Object o2){
      Object3D obj1=getObjectFromEvent(o1);
      Object3D obj2=getObjectFromEvent(o2);
      if (obj1.getZMax() > obj2.getZMax()) {
        return -1;
      }
 else       if (obj1.getZMax() < obj2.getZMax()) {
        return 1;
      }
 else {
        return 0;
      }
    }
  }
);
}","protected void zsort(List rtList){
  Collections.sort(rtList,new Comparator(){
    public int compare(    Object o1,    Object o2){
      Object3D obj1=getObjectFromEvent(o1,true);
      Object3D obj2=getObjectFromEvent(o2,true);
      if (obj1.getZMax() > obj2.getZMax()) {
        return -1;
      }
 else       if (obj1.getZMax() < obj2.getZMax()) {
        return 1;
      }
 else {
        return 0;
      }
    }
  }
);
}",0.9881516587677726
72412,"protected void overlapSwap(List rtList){
  for (int i=0; i < rtList.size(); i++) {
    long max_loop=rtList.size() - i;
    int n=-1;
    boolean restart=true;
    while (restart && n < max_loop) {
      restart=false;
      n++;
      Object event=rtList.get(i);
      Object3D far=getObjectFromEvent(event);
      for (int j=i + 1; j < rtList.size(); j++) {
        Object event2=rtList.get(j);
        Object3D near=getObjectFromEvent(event2);
        if (far.testZOverlap(near)) {
          if (far.testSwap(near,this)) {
            rtList.set(i,event2);
            rtList.set(j,event);
            restart=true;
            break;
          }
        }
      }
    }
  }
}","protected void overlapSwap(List rtList){
  HashSet<Object> hs=new HashSet<Object>();
  for (int i=0; i < rtList.size(); i++) {
    long max_loop=rtList.size() - i;
    int n=-1;
    boolean restart=true;
    while (restart && n < max_loop) {
      restart=false;
      n++;
      Object event=rtList.get(i);
      Object3D far=getObjectFromEvent(event,true);
      for (int j=i + 1; j < rtList.size(); j++) {
        Object event2=rtList.get(j);
        Object3D near=getObjectFromEvent(event2,true);
        Object3D nearParent=getParentObject(event2);
        if (far == near) {
          if (nearParent == null) {
            rtList.set(i,event2);
            rtList.set(j,event);
            restart=true;
            break;
          }
 else {
            continue;
          }
        }
        if (far.testZOverlap(near)) {
          boolean bSwap=far.testSwap(near,this);
          if (bSwap) {
            boolean bSwapedFromFront=hs.contains(event);
            bSwap=!bSwapedFromFront;
            if (bSwap) {
              hs.add(event2);
            }
          }
          if (bSwap) {
            rtList.set(i,event2);
            rtList.set(j,event);
            restart=true;
            break;
          }
        }
      }
    }
  }
}",0.6880496637351268
72413,"/** 
 * compile the expression
 * @param expression
 * @return List contains all column reference
 * @throws BirtException
 */
public static List compileColumnExpression(ExpressionParserUtility util,String expression,boolean rowMode) throws BirtException {
  if (expression == null || expression.trim().length() == 0)   return new ArrayList();
  if (rowMode)   util.ROW_INDICATOR=ROW_COLUMN_INDICATOR;
 else   util.ROW_INDICATOR=DATASETROW_INDICATOR;
  List columnExprList=new ArrayList();
  columnExprList.clear();
  Context context=Context.enter();
  try {
    ScriptOrFnNode tree=util.parse(expression,context);
    util.CompiledExprFromTree(expression,context,tree,columnExprList);
  }
 catch (  Exception ex) {
    throw new CoreException(ResourceConstants.INVALID_EXPRESSION,expression,ex);
  }
 finally {
    Context.exit();
  }
  return columnExprList;
}","/** 
 * compile the expression
 * @param expression
 * @return List contains all column reference
 * @throws BirtException
 */
public static List compileColumnExpression(ExpressionParserUtility util,String expression,String indicator) throws BirtException {
  if (expression == null || expression.trim().length() == 0)   return new ArrayList();
  util.ROW_INDICATOR=indicator;
  List columnExprList=new ArrayList();
  columnExprList.clear();
  Context context=Context.enter();
  try {
    ScriptOrFnNode tree=util.parse(expression,context);
    util.CompiledExprFromTree(expression,context,tree,columnExprList);
  }
 catch (  Exception ex) {
    throw new CoreException(ResourceConstants.INVALID_EXPRESSION,expression,ex);
  }
 finally {
    Context.exit();
  }
  return columnExprList;
}",0.926060606060606
72414,"static boolean isDirectColumnRef(String expression,boolean mode) throws BirtException {
  ExpressionParserUtility util=new ExpressionParserUtility();
  util.isDirectColumnRef=false;
  compileColumnExpression(util,expression,mode);
  return util.isDirectColumnRef;
}","static boolean isDirectColumnRef(String expression,String indicator) throws BirtException {
  ExpressionParserUtility util=new ExpressionParserUtility();
  util.isDirectColumnRef=false;
  compileColumnExpression(util,expression,indicator);
  return util.isDirectColumnRef;
}",0.9313543599257884
72415,"/** 
 * @return
 * @throws BirtException 
 */
static boolean hasAggregation(String expression,boolean mode) throws BirtException {
  ExpressionParserUtility util=new ExpressionParserUtility();
  util.hasAggregation=false;
  compileColumnExpression(util,expression,mode);
  return util.hasAggregation;
}","/** 
 * @return
 * @throws BirtException 
 */
static boolean hasAggregation(String expression,String indicator) throws BirtException {
  ExpressionParserUtility util=new ExpressionParserUtility();
  util.hasAggregation=false;
  compileColumnExpression(util,expression,indicator);
  return util.hasAggregation;
}",0.9396411092985318
72416,"/** 
 * Get the simplest column binding name. Such as dataSetRow[""col1""] pattern, we will return the column name ""col1""
 * @param oldExpression
 * @return
 * @throws BirtException
 */
public static String getColumnName(String oldExpression) throws BirtException {
  List columnsLists=extractColumnExpressions(oldExpression,false);
  if (columnsLists.size() != 1 || !ExpressionParserUtility.isDirectColumnRef(oldExpression,false))   return null;
  return ((IColumnBinding)columnsLists.get(0)).getResultSetColumnName();
}","/** 
 * Get the simplest column binding name. Such as dataSetRow[""col1""] pattern, we will return the column name ""col1""
 * @param oldExpression
 * @return
 * @throws BirtException
 */
public static String getColumnName(String oldExpression) throws BirtException {
  List columnsLists=extractColumnExpressions(oldExpression,ExpressionUtil.DATASET_ROW_INDICATOR);
  if (columnsLists.size() != 1 || !ExpressionParserUtility.isDirectColumnRef(oldExpression,ExpressionUtil.DATASET_ROW_INDICATOR))   return null;
  return ((IColumnBinding)columnsLists.get(0)).getResultSetColumnName();
}",0.9254545454545454
72417,"/** 
 * Get the simplest column binding name. Such as row[""col1""] pattern, we will return the column name ""col1""
 * @param oldExpression
 * @return
 * @throws BirtException
 */
public static String getColumnBindingName(String oldExpression) throws BirtException {
  List columnsLists=extractColumnExpressions(oldExpression,true);
  if (columnsLists.size() != 1 || !ExpressionParserUtility.isDirectColumnRef(oldExpression,true))   return null;
  return ((IColumnBinding)columnsLists.get(0)).getResultSetColumnName();
}","/** 
 * Get the simplest column binding name. Such as row[""col1""] pattern, we will return the column name ""col1""
 * @param oldExpression
 * @return
 * @throws BirtException
 */
public static String getColumnBindingName(String oldExpression) throws BirtException {
  List columnsLists=extractColumnExpressions(oldExpression,ExpressionUtil.ROW_INDICATOR);
  if (columnsLists.size() != 1 || !ExpressionParserUtility.isDirectColumnRef(oldExpression,ExpressionUtil.ROW_INDICATOR))   return null;
  return ((IColumnBinding)columnsLists.get(0)).getResultSetColumnName();
}",0.9408502772643254
72418,"/** 
 * Extract all column expression info
 * @param oldExpression
 * @param mode if true, it means to compile the ""row"" expression.else extract ""dataSetRow"" expression
 * @return
 * @throws BirtException
 */
public static List extractColumnExpressions(String oldExpression,boolean mode) throws BirtException {
  if (oldExpression == null || oldExpression.trim().length() == 0)   return new ArrayList();
  return ExpressionParserUtility.compileColumnExpression(new ExpressionParserUtility(),oldExpression,mode);
}","/** 
 * Extract all column expression info
 * @param oldExpression
 * @param mode if true, it means to compile the ""row"" expression.else extract ""dataSetRow"" expression
 * @return
 * @throws BirtException
 */
public static List extractColumnExpressions(String oldExpression,String indicator) throws BirtException {
  if (oldExpression == null || oldExpression.trim().length() == 0)   return new ArrayList();
  return ExpressionParserUtility.compileColumnExpression(new ExpressionParserUtility(),oldExpression,indicator);
}",0.9603864734299516
72419,"/** 
 * whethter the expression has aggregation 
 * @param oldExpression
 * @return
 * @throws BirtException
 */
public static boolean hasAggregation(String expression){
  if (expression == null)   return false;
  try {
    return ExpressionParserUtility.hasAggregation(expression,true);
  }
 catch (  BirtException e) {
    return false;
  }
}","/** 
 * whethter the expression has aggregation 
 * @param oldExpression
 * @return
 * @throws BirtException
 */
public static boolean hasAggregation(String expression){
  if (expression == null)   return false;
  try {
    return ExpressionParserUtility.hasAggregation(expression,ExpressionUtil.ROW_INDICATOR);
  }
 catch (  BirtException e) {
    return false;
  }
}",0.9550561797752808
72420,"public void testExpression1(){
  String expression=oldExpressions[1];
  try {
    List list=ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 1);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}","public void testExpression1(){
  String expression=oldExpressions[1];
  try {
    List list=extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 1);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}",0.9563567362428842
72421,"public void testExpression9(){
  String expression=oldExpressions[9];
  try {
    List list=ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 1);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}","public void testExpression9(){
  String expression=oldExpressions[9];
  try {
    List list=extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 1);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}",0.9563567362428842
72422,"public void testExpression8(){
  String expression=oldExpressions[8];
  try {
    List list=ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 1);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}","public void testExpression8(){
  String expression=oldExpressions[8];
  try {
    List list=extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 1);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}",0.9563567362428842
72423,"public void testExpression7(){
  String expression=oldExpressions[7];
  try {
    ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(expression));
    fail(""String_Node_Str"");
  }
 catch (  BirtException e) {
  }
}","public void testExpression7(){
  String expression=oldExpressions[7];
  try {
    extractColumnExpression(new ScriptExpression(expression));
    fail(""String_Node_Str"");
  }
 catch (  BirtException e) {
  }
}",0.9476082004555808
72424,"public void testExpression6(){
  String expression=oldExpressions[6];
  try {
    List list=ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 1);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}","public void testExpression6(){
  String expression=oldExpressions[6];
  try {
    List list=extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 1);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}",0.9563567362428842
72425,"public void testExpression5(){
  String expression=oldExpressions[5];
  try {
    ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(expression));
    fail(""String_Node_Str"");
  }
 catch (  BirtException e) {
  }
}","public void testExpression5(){
  String expression=oldExpressions[5];
  try {
    extractColumnExpression(new ScriptExpression(expression));
    fail(""String_Node_Str"");
  }
 catch (  BirtException e) {
  }
}",0.9476082004555808
72426,"public void testExpression4(){
  String expression=oldExpressions[4];
  try {
    ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(expression));
    fail(""String_Node_Str"");
  }
 catch (  BirtException e) {
  }
}","public void testExpression4(){
  String expression=oldExpressions[4];
  try {
    extractColumnExpression(new ScriptExpression(expression));
    fail(""String_Node_Str"");
  }
 catch (  BirtException e) {
  }
}",0.9476082004555808
72427,"public void testExpression3(){
  String expression=oldExpressions[3];
  try {
    List list=ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 2);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}","public void testExpression3(){
  String expression=oldExpressions[3];
  try {
    List list=extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 2);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}",0.9563567362428842
72428,"public void testExpression2(){
  String expression=oldExpressions[2];
  try {
    List list=ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 1);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}","public void testExpression2(){
  String expression=oldExpressions[2];
  try {
    List list=extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 1);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}",0.9563567362428842
72429,"public void testAggregationExpression13(){
  String expression=""String_Node_Str"";
  String expression2=""String_Node_Str"";
  String expression3=""String_Node_Str"";
  try {
    List list=ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 1);
    list=ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(expression2));
    assertTrue(list.size() == 1);
    list=ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(expression3));
    assertTrue(list.size() == 3);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}","public void testAggregationExpression13(){
  String expression=""String_Node_Str"";
  String expression2=""String_Node_Str"";
  String expression3=""String_Node_Str"";
  try {
    List list=extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 1);
    list=extractColumnExpression(new ScriptExpression(expression2));
    assertTrue(list.size() == 1);
    list=extractColumnExpression(new ScriptExpression(expression3));
    assertTrue(list.size() == 3);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}",0.6415739948674081
72430,"public void testConditionalExpression(){
  IConditionalExpression ce1=new ConditionalExpression(""String_Node_Str"",1,""String_Node_Str"");
  IConditionalExpression ce2=new ConditionalExpression(""String_Node_Str"",1,""String_Node_Str"");
  IConditionalExpression ce3=new ConditionalExpression(""String_Node_Str"",1,""String_Node_Str"");
  try {
    List list=ExpressionCompilerUtil.extractColumnExpression(ce1);
    assertEquals(list.size(),2);
    list=ExpressionCompilerUtil.extractColumnExpression(ce2);
    assertEquals(list.size(),1);
    list=ExpressionCompilerUtil.extractColumnExpression(ce3);
    assertEquals(list.size(),3);
  }
 catch (  DataException e) {
    fail(""String_Node_Str"");
  }
}","public void testConditionalExpression(){
  IConditionalExpression ce1=new ConditionalExpression(""String_Node_Str"",1,""String_Node_Str"");
  IConditionalExpression ce2=new ConditionalExpression(""String_Node_Str"",1,""String_Node_Str"");
  IConditionalExpression ce3=new ConditionalExpression(""String_Node_Str"",1,""String_Node_Str"");
  try {
    List list=extractColumnExpression(ce1);
    assertEquals(list.size(),2);
    list=extractColumnExpression(ce2);
    assertEquals(list.size(),1);
    list=extractColumnExpression(ce3);
    assertEquals(list.size(),3);
  }
 catch (  DataException e) {
    fail(""String_Node_Str"");
  }
}",0.9474485910129474
72431,"public void testExpression11(){
  String expression=oldExpressions[11];
  try {
    List list=ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 1);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}","public void testExpression11(){
  String expression=oldExpressions[11];
  try {
    List list=extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 1);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}",0.9566854990583804
72432,"public void testExpression12(){
  String expression=oldExpressions[12];
  try {
    List list=ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 2);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}","public void testExpression12(){
  String expression=oldExpressions[12];
  try {
    List list=extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 2);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}",0.9566854990583804
72433,"public void testExpression10(){
  String expression=oldExpressions[10];
  try {
    List list=ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 2);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}","public void testExpression10(){
  String expression=oldExpressions[10];
  try {
    List list=extractColumnExpression(new ScriptExpression(expression));
    assertTrue(list.size() == 2);
  }
 catch (  BirtException e) {
    fail(""String_Node_Str"");
  }
}",0.9566854990583804
72434,"public Object getSummaryValue(){
  if (count <= 1)   return null;
  Number ret=null;
  try {
    ret=calculator.divide(calculator.subtract(calculator.multiply(count,squareSum),calculator.multiply(sum,sum)),calculator.multiply(count,calculator.subtract(count,1)));
    return calculator.getTypedObject(Math.sqrt(ret.doubleValue()));
  }
 catch (  DataException e) {
    return null;
  }
}","public Object getSummaryValue(){
  if (count <= 1)   return null;
  Number ret=null;
  try {
    ret=calculator.divide(calculator.subtract(calculator.multiply(count,squareSum),calculator.multiply(sum,sum)),calculator.multiply(count,calculator.subtract(count,1)));
    return calculator.add(0,Math.sqrt(ret.doubleValue()));
  }
 catch (  DataException e) {
    return null;
  }
}",0.9725490196078432
72435,"/** 
 * constructor
 */
public LauncherEngineConfig(){
  super();
  HTMLRenderOption emitterConfig=(HTMLRenderOption)getEmitterConfigs().get(RenderOption.OUTPUT_FORMAT_HTML);
  emitterConfig.setImageHandler(new HTMLCompleteImageHandler());
}","/** 
 * constructor
 */
public LauncherEngineConfig(){
  super();
  HTMLRenderOption emitterConfig=(HTMLRenderOption)getEmitterConfigs().get(RenderOption.OUTPUT_FORMAT_HTML);
  if (emitterConfig == null) {
    emitterConfig=new HTMLRenderOption();
  }
  emitterConfig.setActionHandler(new HTMLActionHandler(){
    public String getURL(    IAction actionDefn,    Object context){
      if (actionDefn.getType() == IAction.ACTION_DRILLTHROUGH)       return ""String_Node_Str"" + URLEncoder.encode(super.getURL(actionDefn,context));
      return super.getURL(actionDefn,context);
    }
  }
);
  emitterConfig.setImageDirectory(IMAGE_PATH);
  getEmitterConfigs().put(RenderOption.OUTPUT_FORMAT_HTML,emitterConfig);
}",0.4290220820189274
72436,"private void configEngine(){
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler(){
    public String getURL(    IAction actionDefn,    Object context){
      if (actionDefn.getType() == IAction.ACTION_DRILLTHROUGH)       return ""String_Node_Str"" + URLEncoder.encode(super.getURL(actionDefn,context));
      return super.getURL(actionDefn,context);
    }
  }
);
  engineConfig.getEmitterConfigs().put(RenderOption.OUTPUT_FORMAT_HTML,emitterConfig);
  String userClassPath=getUserClassPath();
  logger.info(""String_Node_Str"" + userClassPath);
  System.clearProperty(EngineConstants.PROJECT_CLASSPATH_KEY);
  if (userClassPath != null) {
    engineConfig.getAppContext().put(EngineConstants.PROJECT_CLASSPATH_KEY,userClassPath);
    System.setProperty(EngineConstants.PROJECT_CLASSPATH_KEY,userClassPath);
  }
}","private void configEngine(){
  String userClassPath=getUserClassPath();
  logger.info(""String_Node_Str"" + userClassPath);
  System.clearProperty(EngineConstants.PROJECT_CLASSPATH_KEY);
  if (userClassPath != null) {
    engineConfig.getAppContext().put(EngineConstants.PROJECT_CLASSPATH_KEY,userClassPath);
    System.setProperty(EngineConstants.PROJECT_CLASSPATH_KEY,userClassPath);
  }
}",0.6184419713831478
72437,"boolean finalLaunchCheck(final ILaunchConfiguration configuration,String mode,IProgressMonitor monitor) throws CoreException {
  paramValues=new HashMap();
  LauncherEngineConfig engineConfig=new LauncherEngineConfig();
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  final IReportEngine engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
  configEngine(engineConfig);
  final String fileName=covertVariables(configuration.getAttribute(ATTR_REPORT_FILE_NAME,""String_Node_Str""));
  final int taskType=configuration.getAttribute(ATTR_TASK_TYPE,DEFAULT_TASK_TYPE);
  Display display=DebugUI.getStandardDisplay();
  if (display.getThread().equals(Thread.currentThread())) {
    return getParameterValues(getInputParameters(fileName,taskType,engine),paramValues);
  }
  final Object[] result=new Object[]{Boolean.FALSE};
  Runnable r=new Runnable(){
    public void run(){
      result[0]=new Boolean(getParameterValues(getInputParameters(fileName,taskType,engine),paramValues));
    }
  }
;
  DebugUI.getStandardDisplay().syncExec(r);
  return ((Boolean)result[0]).booleanValue();
}","boolean finalLaunchCheck(final ILaunchConfiguration configuration,String mode,IProgressMonitor monitor) throws CoreException {
  paramValues=new HashMap();
  LauncherEngineConfig engineConfig=new LauncherEngineConfig();
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  final IReportEngine engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
  final String fileName=covertVariables(configuration.getAttribute(ATTR_REPORT_FILE_NAME,""String_Node_Str""));
  final int taskType=configuration.getAttribute(ATTR_TASK_TYPE,DEFAULT_TASK_TYPE);
  Display display=DebugUI.getStandardDisplay();
  if (display.getThread().equals(Thread.currentThread())) {
    return getParameterValues(getInputParameters(fileName,taskType,engine),paramValues);
  }
  final Object[] result=new Object[]{Boolean.FALSE};
  Runnable r=new Runnable(){
    public void run(){
      result[0]=new Boolean(getParameterValues(getInputParameters(fileName,taskType,engine),paramValues));
    }
  }
;
  DebugUI.getStandardDisplay().syncExec(r);
  return ((Boolean)result[0]).booleanValue();
}",0.9874161073825504
72438,"/** 
 * @param parentQuery parent query
 * @param design current root design
 * @return queries array of this design
 */
public IDataQueryDefinition[] build(IDataQueryDefinition parentQuery,ReportItemDesign design){
synchronized (report) {
    Object result=design.accept(queryBuilder,parentQuery);
    if (result == null) {
      return null;
    }
    IDataQueryDefinition[] queries=(IDataQueryDefinition[])result;
    design.setQueries(queries);
    if (!design.useCachedResult()) {
      for (int i=0; i < queries.length; i++) {
        IDataQueryDefinition query=queries[i];
        if (query != null) {
          String queryId=String.valueOf(design.getID());
          if (i > 0) {
            queryId=queryId + ""String_Node_Str"" + String.valueOf(i);
          }
          this.queryIDs.put(query,queryId);
          if (query instanceof IBaseQueryDefinition) {
            IBaseQueryDefinition baseQuery=(IBaseQueryDefinition)query;
            ResultMetaData metaData=new ResultMetaData(baseQuery);
            resultMetaData.put(baseQuery,metaData);
          }
          registerQueryAndElement(query,design);
          if (!(query instanceof ISubqueryDefinition)) {
            this.queries.add(query);
          }
 else           if (query instanceof ISubqueryDefinition) {
            if (!(parentQuery instanceof IBaseQueryDefinition)) {
              context.addException(design.getHandle(),new EngineException(MessageConstants.SUBQUERY_CREATE_ERROR,+design.getID()));
            }
            IBaseQueryDefinition pQuery=(IBaseQueryDefinition)parentQuery;
            Collection subQueries=pQuery.getSubqueries();
            if (!subQueries.contains(query)) {
              subQueries.add(query);
            }
          }
        }
      }
      registerQueryToHandle(design,queries);
      resolveQueryReference(design,queries);
      return queries;
    }
 else {
      for (int i=0; i < queries.length; i++) {
        IDataQueryDefinition query=queries[i];
        if (query instanceof IBaseQueryDefinition) {
          IBaseQueryDefinition baseQuery=(IBaseQueryDefinition)query;
          ResultMetaData metaData=new ResultMetaData(baseQuery);
          resultMetaData.put(baseQuery,metaData);
        }
      }
      registerQueryToHandle(design,queries);
      return null;
    }
  }
}","/** 
 * @param parentQuery parent query
 * @param design current root design
 * @return queries array of this design
 */
public IDataQueryDefinition[] build(IDataQueryDefinition parentQuery,ReportItemDesign design){
synchronized (report) {
    Object result=design.accept(queryBuilder,parentQuery);
    if (result == null) {
      return null;
    }
    IDataQueryDefinition[] queries=(IDataQueryDefinition[])result;
    design.setQueries(queries);
    if (!design.useCachedResult()) {
      for (int i=0; i < queries.length; i++) {
        IDataQueryDefinition query=queries[i];
        if (query != null) {
          String queryId=String.valueOf(design.getID());
          if (i > 0) {
            queryId=queryId + ""String_Node_Str"" + String.valueOf(i);
          }
          this.queryIDs.put(query,queryId);
          if (query instanceof IBaseQueryDefinition) {
            IBaseQueryDefinition baseQuery=(IBaseQueryDefinition)query;
            ResultMetaData metaData=new ResultMetaData(baseQuery);
            resultMetaData.put(baseQuery,metaData);
          }
          registerQueryAndElement(query,design);
          if (!(query instanceof ISubqueryDefinition)) {
            this.queries.add(query);
          }
 else           if (query instanceof ISubqueryDefinition) {
            if (!(parentQuery instanceof IBaseQueryDefinition)) {
              context.addException(design.getHandle(),new EngineException(MessageConstants.SUBQUERY_CREATE_ERROR,design.getID()));
            }
            IBaseQueryDefinition pQuery=(IBaseQueryDefinition)parentQuery;
            Collection subQueries=pQuery.getSubqueries();
            if (!subQueries.contains(query)) {
              subQueries.add(query);
            }
          }
        }
      }
      registerQueryToHandle(design,queries);
      resolveQueryReference(design,queries);
      return queries;
    }
 else {
      for (int i=0; i < queries.length; i++) {
        IDataQueryDefinition query=queries[i];
        if (query instanceof IBaseQueryDefinition) {
          IBaseQueryDefinition baseQuery=(IBaseQueryDefinition)query;
          ResultMetaData metaData=new ResultMetaData(baseQuery);
          resultMetaData.put(baseQuery,metaData);
        }
      }
      registerQueryToHandle(design,queries);
      return null;
    }
  }
}",0.9997835966241072
72439,"/** 
 * @param aggregationDef
 * @param facttableRowIterator
 * @throws DataException 
 */
AggregationCalculator(AggregationDefinition aggregationDef,DimColumn[] parameterColNames,IDataSet4Aggregation.MetaInfo metaInfo) throws IOException, DataException {
  Object[] params={aggregationDef,parameterColNames,metaInfo};
  logger.entering(AggregationCalculator.class.getName(),""String_Node_Str"",params);
  this.aggregation=aggregationDef;
  AggregationFunctionDefinition[] aggregationFunction=aggregationDef.getAggregationFunctions();
  if (aggregationDef.getLevels() == null)   this.levelCount=0;
 else   this.levelCount=aggregationDef.getLevels().length;
  if (aggregationFunction != null) {
    this.accumulators=new Accumulator[aggregationFunction.length];
    this.measureIndexes=new int[aggregationFunction.length];
    this.parameterColIndex=new int[aggregationFunction.length];
    for (int i=0; i < aggregationFunction.length; i++) {
      IAggrFunction aggregation=AggregationManager.getInstance().getAggregation(aggregationFunction[i].getFunctionName());
      if (aggregation == null) {
        throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + aggregationFunction[i].getFunctionName());
      }
      if (AggregationUtil.needDataField(aggregation)) {
        this.parameterColIndex[i]=find(parameterColNames,aggregationFunction[i].getParaCol());
      }
 else {
        this.parameterColIndex[i]=-1;
      }
      this.accumulators[i]=aggregation.newAccumulator();
      this.accumulators[i].start();
      this.measureIndexes[i]=metaInfo.getMeasureIndex(aggregationFunction[i].getMeasureName());
    }
  }
  result=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  measureInfos=metaInfo.getMeasureInfos();
  facttableRow=new FacttableRow(measureInfos);
  logger.exiting(AggregationCalculator.class.getName(),""String_Node_Str"");
}","/** 
 * @param aggregationDef
 * @param facttableRowIterator
 * @throws DataException 
 */
AggregationCalculator(AggregationDefinition aggregationDef,DimColumn[] parameterColNames,IDataSet4Aggregation.MetaInfo metaInfo) throws IOException, DataException {
  Object[] params={aggregationDef,parameterColNames,metaInfo};
  logger.entering(AggregationCalculator.class.getName(),""String_Node_Str"",params);
  this.aggregation=aggregationDef;
  AggregationFunctionDefinition[] aggregationFunction=aggregationDef.getAggregationFunctions();
  if (aggregationDef.getLevels() == null)   this.levelCount=0;
 else   this.levelCount=aggregationDef.getLevels().length;
  if (aggregationFunction != null) {
    this.accumulators=new Accumulator[aggregationFunction.length];
    this.measureIndexes=new int[aggregationFunction.length];
    this.parameterColIndex=new int[aggregationFunction.length];
    for (int i=0; i < aggregationFunction.length; i++) {
      IAggrFunction aggregation=AggregationManager.getInstance().getAggregation(aggregationFunction[i].getFunctionName());
      if (aggregation == null) {
        throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + aggregationFunction[i].getFunctionName());
      }
      if (AggregationUtil.needDataField(aggregation)) {
        this.parameterColIndex[i]=find(parameterColNames,aggregationFunction[i].getParaCol());
      }
 else {
        this.parameterColIndex[i]=-1;
      }
      this.accumulators[i]=aggregation.newAccumulator();
      this.accumulators[i].start();
      final String measureName=aggregationFunction[i].getMeasureName();
      this.measureIndexes[i]=metaInfo.getMeasureIndex(measureName);
      if (this.measureIndexes[i] == -1 && measureName != null) {
        throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,measureName);
      }
    }
  }
  result=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  measureInfos=metaInfo.getMeasureInfos();
  facttableRow=new FacttableRow(measureInfos);
  logger.exiting(AggregationCalculator.class.getName(),""String_Node_Str"");
}",0.9310513447432764
72440,"/** 
 * Creates a new render task and configure it.
 * @param out output stream
 * @param reportDocument report document
 * @param inputOptions input options
 * @param pageNumber page number
 * @param activeIds active IDs
 * @return configured render task
 * @throws AxisFault
 */
private IRenderTask createRenderTask(OutputStream out,IReportDocument reportDocument,InputOptions inputOptions,long pageNumber,List activeIds) throws AxisFault {
  HttpServletRequest request=(HttpServletRequest)inputOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)inputOptions.getOption(InputOptions.OPT_LOCALE);
  Boolean isMasterPageContent=(Boolean)inputOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  boolean masterPage=isMasterPageContent == null ? true : isMasterPageContent.booleanValue();
  Boolean svgFlag=(Boolean)inputOptions.getOption(InputOptions.OPT_SVG_FLAG);
  Boolean isRtl=(Boolean)inputOptions.getOption(InputOptions.OPT_RTL);
  boolean rtl=isRtl.booleanValue();
  String format=(String)inputOptions.getOption(InputOptions.OPT_FORMAT);
  String emitterId=(String)inputOptions.getOption(InputOptions.OPT_EMITTER_ID);
  String iServletPath=(String)inputOptions.getOption(InputOptions.OPT_SERVLET_PATH);
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.isPDFLayout(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner());
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  if (!IBirtConstants.EXCEL_RENDER_FORMAT.equalsIgnoreCase(format)) {
    ((IRenderOption)renderOption).setOption(IRenderOption.HTML_PAGINATION,Boolean.TRUE);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  renderOption.setEmitterID(emitterId);
  ViewerHTMLActionHandler handler=null;
  if (ParameterAccessor.isPDFLayout(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  if (pageNumber > 0) {
    initializeEmitterConfigs(request,renderOption.getOptions());
  }
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  return renderTask;
}","/** 
 * Creates a new render task and configure it.
 * @param out output stream
 * @param reportDocument report document
 * @param inputOptions input options
 * @param pageNumber page number
 * @param activeIds active IDs
 * @return configured render task
 * @throws AxisFault
 */
private IRenderTask createRenderTask(OutputStream out,IReportDocument reportDocument,InputOptions inputOptions,long pageNumber,List activeIds) throws AxisFault {
  HttpServletRequest request=(HttpServletRequest)inputOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)inputOptions.getOption(InputOptions.OPT_LOCALE);
  Boolean isMasterPageContent=(Boolean)inputOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  boolean masterPage=isMasterPageContent == null ? true : isMasterPageContent.booleanValue();
  Boolean svgFlag=(Boolean)inputOptions.getOption(InputOptions.OPT_SVG_FLAG);
  Boolean isRtl=(Boolean)inputOptions.getOption(InputOptions.OPT_RTL);
  boolean rtl=isRtl.booleanValue();
  String format=(String)inputOptions.getOption(InputOptions.OPT_FORMAT);
  String emitterId=(String)inputOptions.getOption(InputOptions.OPT_EMITTER_ID);
  String iServletPath=(String)inputOptions.getOption(InputOptions.OPT_SERVLET_PATH);
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.isPDFLayout(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner());
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  if (!IBirtConstants.EXCEL_RENDER_FORMAT.equalsIgnoreCase(format)) {
    ((IRenderOption)renderOption).setOption(IRenderOption.HTML_PAGINATION,Boolean.TRUE);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  renderOption.setEmitterID(emitterId);
  ViewerHTMLActionHandler handler=null;
  if (ParameterAccessor.isPDFLayout(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
  handler.setPageOverflow(request.getParameter(ParameterAccessor.PARAM_PAGE_OVERFLOW));
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  if (pageNumber > 0) {
    initializeEmitterConfigs(request,renderOption.getOptions());
  }
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  return renderTask;
}",0.9893307468477208
72441,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  boolean isExtractPattern=isContainExtractInfo(action);
  if (isExtractPattern)   baseURL=createBaseURLWithExtractPattern(baseURL);
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (isContainExtractInfo(action)) {
      try {
        link.append(ParameterAccessor.PARAMETER_SEPARATOR);
        link.append(action.getActionString());
      }
 catch (      Exception e) {
      }
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            Object[] values;
            if (valueObj instanceof Object[]) {
              values=(Object[])valueObj;
            }
 else {
              values=new Object[1];
              values[0]=valueObj;
            }
            for (int i=0; i < values.length; i++) {
              String value=DataUtil.getDisplayValue(values[i]);
              if (value != null) {
                link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
              }
 else {
                link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISNULL,URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE)));
              }
            }
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    if (svg != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
    }
    if (isDesigner != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  boolean isExtractPattern=isContainExtractInfo(action);
  if (isExtractPattern)   baseURL=createBaseURLWithExtractPattern(baseURL);
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (isContainExtractInfo(action)) {
      try {
        link.append(ParameterAccessor.PARAMETER_SEPARATOR);
        link.append(action.getActionString());
      }
 catch (      Exception e) {
      }
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            Object[] values;
            if (valueObj instanceof Object[]) {
              values=(Object[])valueObj;
            }
 else {
              values=new Object[1];
              values[0]=valueObj;
            }
            for (int i=0; i < values.length; i++) {
              String value=DataUtil.getDisplayValue(values[i]);
              if (value != null) {
                link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
              }
 else {
                link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISNULL,URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE)));
              }
            }
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    if (svg != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
    }
    if (isDesigner != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
    }
    if (pageOverflow != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_PAGE_OVERFLOW,pageOverflow));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.986149079642792
72442,"/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  ;
  boolean isExtractPattern=isContainExtractInfo(action);
  if (isExtractPattern)   baseURL=createBaseURLWithExtractPattern(baseURL);
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0 || baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (isContainExtractInfo(action)) {
    try {
      link.append(action.getActionString());
      link.append(ParameterAccessor.PARAMETER_SEPARATOR);
    }
 catch (    Exception e) {
    }
  }
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  if (svg != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
  }
  if (isDesigner != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null) {
      String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
    if (!action.isBookmark())     link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
  }
  return link.toString();
}","/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  ;
  boolean isExtractPattern=isContainExtractInfo(action);
  if (isExtractPattern)   baseURL=createBaseURLWithExtractPattern(baseURL);
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0 || baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (isContainExtractInfo(action)) {
    try {
      link.append(action.getActionString());
      link.append(ParameterAccessor.PARAMETER_SEPARATOR);
    }
 catch (    Exception e) {
    }
  }
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  if (svg != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
  }
  if (isDesigner != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
  }
  if (pageOverflow != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_PAGE_OVERFLOW,pageOverflow));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null) {
      String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
    if (!action.isBookmark())     link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
  }
  return link.toString();
}",0.9818227091633466
72443,"public Object get(String arg0,Scriptable scope){
  try {
    if (ScriptConstants.OUTER_RESULT_KEYWORD.equals(arg0))     return cursor.getObject(ScriptConstants.OUTER_RESULT_KEYWORD);
    return cursor.getObject(arg0);
  }
 catch (  OLAPException e) {
    return null;
  }
}","public Object get(String arg0,Scriptable scope){
  try {
    if (ScriptConstants.OUTER_RESULT_KEYWORD.equals(arg0))     return cursor.getObject(ScriptConstants.OUTER_RESULT_KEYWORD);
    return cursor.getObject(arg0);
  }
 catch (  OLAPException e) {
    throw Context.reportRuntimeError(e.getLocalizedMessage());
  }
}",0.8885135135135135
72444,"/** 
 * constructor
 * @param page the viewer
 * @param registry the registry
 */
public LibraryExplorerContextMenuProvider(LibraryExplorerTreeViewPage page){
  super(page.getTreeViewer());
  this.page=page;
  clipboard=new Clipboard(page.getSite().getShell().getDisplay());
  refreshExplorerAction=new RefreshResourceExplorerAction(page);
  useLibraryAction=new AddSelectedLibToCurrentReportDesignAction(page.getTreeViewer());
  deleteLibraryandCssAction=new DeleteResourceAction(page);
  addResourceAction=new AddResourceAction(page);
  renameLibraryandCssAction=new RenameResourceAction(page);
  newFolderAction=new NewFolderAction(page);
  moveLibraryandCssAction=new MoveResourceAction(page);
  newLibraryAction=new NewLibraryAction(page);
  copyLibraryandCssAction=new CopyResourceAction(page,clipboard);
  pasteLibraryandCssAction=new PasteResourceAction(page,clipboard);
}","/** 
 * constructor
 * @param page the viewer
 * @param registry the registry
 */
public LibraryExplorerContextMenuProvider(LibraryExplorerTreeViewPage page){
  super(page.getTreeViewer());
  this.page=page;
  clipboard=new Clipboard(page.getSite().getShell().getDisplay());
  refreshExplorerAction=new RefreshResourceExplorerAction(page);
  useLibraryAction=new AddSelectedLibToCurrentReportDesignAction(page.getTreeViewer());
  deleteLibraryandCssAction=new DeleteResourceAction(page);
  addResourceAction=new AddResourceAction(page);
  renameLibraryandCssAction=new RenameResourceAction(page);
  newFolderAction=new NewFolderAction(page);
  moveLibraryandCssAction=new MoveResourceAction(page);
  newLibraryAction=new NewLibraryAction(page);
  copyLibraryandCssAction=new CopyResourceAction(page,clipboard);
  pasteLibraryandCssAction=new PasteResourceAction(page,clipboard);
  newMenuGroup.add(newFolderAction);
  newMenuGroup.add(newLibraryAction);
}",0.9591280653950952
72445,"/** 
 * Builds the context menu. Single selection menu and multiple selection menu are created while selecting just single element or multiple elements
 * @param menu the menu
 */
public void buildContextMenu(IMenuManager menu){
  if (Policy.TRACING_MENU_SHOW) {
    System.out.println(""String_Node_Str"");
  }
  menu.removeAll();
  menu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
  menu.add(new Separator());
  IStructuredSelection selection=(IStructuredSelection)getViewer().getSelection();
  if (selection != null && selection.getFirstElement() != null) {
    Object selected=selection.getFirstElement();
    if (selected instanceof ReportResourceEntry)     selected=((ReportResourceEntry)selected).getReportElement();
    if (selected instanceof ResourceEntryWrapper && ((ResourceEntryWrapper)selected).getType() == ResourceEntryWrapper.LIBRARY) {
      if (useLibraryAction.isEnabled()) {
        menu.add(useLibraryAction);
        menu.add(new Separator());
      }
      if (copyLibraryandCssAction.isEnabled()) {
        menu.add(copyLibraryandCssAction);
      }
      if (deleteLibraryandCssAction.isEnabled()) {
        menu.add(deleteLibraryandCssAction);
      }
      if (moveLibraryandCssAction.isEnabled()) {
        menu.add(moveLibraryandCssAction);
      }
      if (renameLibraryandCssAction.isEnabled()) {
        menu.add(renameLibraryandCssAction);
      }
      menu.add(new Separator());
    }
 else     if (selected instanceof ResourceEntryWrapper && ((ResourceEntryWrapper)selected).getType() == ResourceEntryWrapper.CSS_STYLE_SHEET) {
      menu.add(new UseCssInReportDesignAction(page));
      menu.add(new UseCssInThemeAction(page));
      menu.add(new Separator());
      if (copyLibraryandCssAction.isEnabled()) {
        menu.add(copyLibraryandCssAction);
      }
      if (deleteLibraryandCssAction.isEnabled()) {
        menu.add(deleteLibraryandCssAction);
      }
      if (moveLibraryandCssAction.isEnabled()) {
        menu.add(moveLibraryandCssAction);
      }
      if (renameLibraryandCssAction.isEnabled()) {
        menu.add(renameLibraryandCssAction);
      }
      menu.add(new Separator());
    }
 else     if (selected instanceof LibraryHandle) {
      if (useLibraryAction.isEnabled()) {
        menu.add(useLibraryAction);
        menu.add(new Separator());
      }
    }
 else     if (selected instanceof CssStyleSheetHandle) {
      menu.add(new UseCssInReportDesignAction(page));
      menu.add(new UseCssInThemeAction(page));
      menu.add(new Separator());
    }
 else     if (selected instanceof PathResourceEntry) {
      if (!((PathResourceEntry)selected).isFile()) {
        IMenuManager newMenu=new MenuManager(Messages.getString(""String_Node_Str""));
        menu.add(newMenu);
        newMenu.add(newFolderAction);
        newMenu.add(newLibraryAction);
        if (addResourceAction.isEnabled()) {
          menu.add(addResourceAction);
        }
        menu.add(new Separator());
        if (pasteLibraryandCssAction.isEnabled()) {
          menu.add(pasteLibraryandCssAction);
        }
        if (deleteLibraryandCssAction.isEnabled()) {
          menu.add(deleteLibraryandCssAction);
        }
        if (renameLibraryandCssAction.isEnabled()) {
          menu.add(renameLibraryandCssAction);
        }
        menu.add(new Separator());
      }
 else {
        if (copyLibraryandCssAction.isEnabled()) {
          menu.add(copyLibraryandCssAction);
        }
        if (deleteLibraryandCssAction.isEnabled()) {
          menu.add(deleteLibraryandCssAction);
        }
        if (moveLibraryandCssAction.isEnabled()) {
          menu.add(moveLibraryandCssAction);
        }
        if (renameLibraryandCssAction.isEnabled()) {
          menu.add(renameLibraryandCssAction);
        }
        menu.add(new Separator());
      }
    }
    if (canAddtoReport(selected)) {
      if (selection.size() == 1) {
        AddElementtoReport addElementAction=new AddElementtoReport((StructuredViewer)getViewer());
        addElementAction.setSelectedElement(selected);
        menu.add(addElementAction);
        menu.add(new Separator());
      }
    }
    menu.add(new Separator());
    menu.add(refreshExplorerAction);
  }
 else {
    menu.add(addResourceAction);
    menu.add(new Separator());
    menu.add(refreshExplorerAction);
  }
}","/** 
 * Builds the context menu. Single selection menu and multiple selection menu are created while selecting just single element or multiple elements
 * @param menu the menu
 */
public void buildContextMenu(IMenuManager menu){
  if (Policy.TRACING_MENU_SHOW) {
    System.out.println(""String_Node_Str"");
  }
  resetActionStatus();
  menu.removeAll();
  menu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
  menu.add(new Separator());
  IStructuredSelection selection=(IStructuredSelection)page.getSelection();
  if (selection != null && selection.getFirstElement() != null) {
    Object selected=selection.getFirstElement();
    if (selected instanceof ReportResourceEntry) {
      selected=((ReportResourceEntry)selected).getReportElement();
    }
    if (selected instanceof ResourceEntryWrapper) {
      int type=((ResourceEntryWrapper)selected).getType();
      if (type == ResourceEntryWrapper.LIBRARY) {
        menu.add(useLibraryAction);
      }
 else       if (type == ResourceEntryWrapper.CSS_STYLE_SHEET) {
        menu.add(new UseCssInReportDesignAction(page));
        menu.add(new UseCssInThemeAction(page));
      }
      if (((ResourceEntryWrapper)selected).getParent() instanceof PathResourceEntry) {
        menu.add(new Separator());
        menu.add(newMenuGroup);
        menu.add(addResourceAction);
      }
      menu.add(new Separator());
      menu.add(copyLibraryandCssAction);
      if (((ResourceEntryWrapper)selected).getParent() instanceof PathResourceEntry) {
        menu.add(pasteLibraryandCssAction);
        menu.add(deleteLibraryandCssAction);
        menu.add(moveLibraryandCssAction);
        menu.add(renameLibraryandCssAction);
        menu.add(new Separator());
      }
    }
 else     if (selected instanceof LibraryHandle) {
      menu.add(useLibraryAction);
      menu.add(new Separator());
    }
 else     if (selected instanceof CssStyleSheetHandle) {
      menu.add(new UseCssInReportDesignAction(page));
      menu.add(new UseCssInThemeAction(page));
      menu.add(new Separator());
    }
 else     if (selected instanceof PathResourceEntry) {
      menu.add(newMenuGroup);
      menu.add(addResourceAction);
      menu.add(new Separator());
      menu.add(copyLibraryandCssAction);
      menu.add(pasteLibraryandCssAction);
      menu.add(deleteLibraryandCssAction);
      menu.add(moveLibraryandCssAction);
      menu.add(renameLibraryandCssAction);
      menu.add(new Separator());
    }
 else     if (selected instanceof FragmentResourceEntry) {
      if (copyLibraryandCssAction.isEnabled()) {
        menu.add(copyLibraryandCssAction);
        menu.add(new Separator());
      }
    }
    if (canAddtoReport(selected)) {
      if (selection.size() == 1) {
        AddElementtoReport addElementAction=new AddElementtoReport((StructuredViewer)getViewer());
        addElementAction.setSelectedElement(selected);
        menu.add(addElementAction);
        menu.add(new Separator());
      }
    }
    menu.add(new Separator());
    menu.add(refreshExplorerAction);
  }
 else {
    menu.add(addResourceAction);
    menu.add(new Separator());
    menu.add(refreshExplorerAction);
  }
}",0.5363502476904539
72446,"public void addData(int col,Object data){
  if ((getColumnSize(col) < height) && (col < getColumnCount())) {
    ((List)columns.get(col)).add(data);
  }
  if (data instanceof Data) {
    BookmarkDef bookmark=((Data)data).getBookmark();
    if (null == bookmark) {
      return;
    }
    int rowNo=((Integer)colrow.get(new Integer(col))).intValue() + getColumnSize(col);
    bookmark.setColumnNo(col + 1);
    bookmark.setRowNo(rowNo);
    bookmarks.add(bookmark);
  }
}","public void addData(int col,Object data){
  List column=(List)columns.get(col);
  column.add(data);
  if (data instanceof Data) {
    BookmarkDef bookmark=((Data)data).getBookmark();
    if (null == bookmark) {
      return;
    }
    int rowNo=((Integer)colrow.get(new Integer(col))).intValue() + getColumnSize(col);
    bookmark.setColumnNo(col + 1);
    bookmark.setRowNo(rowNo);
    bookmarks.add(bookmark);
  }
}",0.8252536640360767
72447,"public DataCache(int height,int width){
  Integer start=new Integer(0);
  columns.add(new ArrayList());
  colrow.put(start,start);
  this.height=height;
  this.width=width;
}","public DataCache(int width){
  Integer start=new Integer(0);
  columns.add(new ArrayList());
  colrow.put(start,start);
  this.width=width;
}",0.8952380952380953
72448,"public void end(IReportContent report){
  engine.complete();
  ExcelWriter writer=new ExcelWriter(out,context);
  writer.writeDeclarations();
  writer.writeDocumentProperties(report);
  writer.declareStyles(engine.getStyleMap());
  writer.defineNames(engine.getNamesRefer());
  writer.startSheet(1);
  writer.startTable(engine.getCoordinates());
  int count=0;
  while (count < engine.getRowCount()) {
    outputData(engine.getRow(count),writer);
    count++;
  }
  writer.endTable();
  writer.closeSheet();
  writer.close(true);
}","public void end(IReportContent report){
  engine.complete();
  ExcelWriter writer=new ExcelWriter(out,context);
  writer.writeDeclarations();
  writer.writeDocumentProperties(report);
  writer.declareStyles(engine.getStyleMap());
  writer.defineNames(engine.getNamesRefer());
  startSheet(writer);
  int count=0;
  while (count < engine.getRowCount()) {
    if ((count % (engine.MAX_ROW + 1)) == 0 && count != 0) {
      endSheet(writer);
      startSheet(writer);
    }
    outputData(engine.getRow(count),writer);
    count++;
  }
  endSheet(writer);
  writer.close(true);
  sheetIndex=1;
}",0.7497773820124666
72449,"private void initalize(PageDef page){
  axis=new AxisProcessor();
  axis.addCoordinate(page.contentwidth);
  setCacheSize();
  Rule rule=new Rule(0,page.contentwidth);
  cache=new DataCache(MAX_ROW,MAX_COLUMN);
  engine=new StyleEngine(this);
  containers.push(createContainer(rule,page.style));
}","private void initalize(PageDef page){
  axis=new AxisProcessor();
  axis.addCoordinate(page.contentwidth);
  setCacheSize();
  Rule rule=new Rule(0,page.contentwidth);
  cache=new DataCache(MAX_COLUMN);
  engine=new StyleEngine(this);
  containers.push(createContainer(rule,page.style));
}",0.9863481228668942
72450,"public int getRowCount(){
  int realcount=cache.getMaxRow();
  return Math.min(realcount,MAX_ROW - 1);
}","public int getRowCount(){
  int realcount=cache.getMaxRow();
  return realcount;
}",0.8817204301075269
72451,"private void calculateText(){
  if (blankLine) {
    this.text=null;
  }
 else {
    this.text=textContent.getText().substring(offset,offset + textLength);
  }
}","private void calculateText(){
  if (blankLine) {
    this.text=""String_Node_Str"";
  }
 else {
    this.text=textContent.getText().substring(offset,offset + textLength);
  }
}",0.9432835820895522
72452,"protected boolean layoutChildren(){
  if (null == textContent)   return false;
  while (comp.hasNextArea()) {
    TextArea area=comp.getNextArea(getFreeSpace());
    if (!area.isBlankLine()) {
      addTextArea(area);
      comp.setNewLineStatus(false);
    }
    if (area.isLineBreak()) {
      if (newLine()) {
        comp.setNewLineStatus(true);
      }
 else {
        return true;
      }
    }
  }
  return false;
}","protected boolean layoutChildren(){
  if (null == textContent)   return false;
  while (comp.hasNextArea()) {
    TextArea area=comp.getNextArea(getFreeSpace());
    addTextArea(area);
    comp.setNewLineStatus(false);
    if (area.isLineBreak()) {
      if (newLine()) {
        comp.setNewLineStatus(true);
      }
 else {
        return true;
      }
    }
  }
  return false;
}",0.9489414694894148
72453,"/** 
 * layout a word, add the word to the line buffer.
 * @param word the word
 */
private void addWordIntoTextArea(TextArea textArea,Word word){
  int textLength=word.getLength();
  int wordWidth=getWordWidth(fontInfo,word);
  wordWidth+=letterSpacing * textLength;
  if (textArea.hasSpace(wordWidth)) {
    addWord(textArea,textLength,wordWidth);
    wordVestige=null;
    if (remainWords.hasWord()) {
      if (textArea.hasSpace(wordSpacing)) {
        textArea.addWordSpacing(wordSpacing);
      }
 else {
        textArea.setLineBreak(true);
        hasLineBreak=true;
      }
    }
  }
 else {
    if (isNewLine && textArea.isEmpty()) {
      if (hyphenation) {
        doHyphenation(word.getValue(),textArea);
      }
 else {
        addWord(textArea,textLength,wordWidth);
        wordVestige=null;
      }
    }
 else {
      wordVestige=null;
      remainWord=word;
    }
    textArea.setLineBreak(true);
    hasLineBreak=true;
  }
}","/** 
 * layout a word, add the word to the line buffer.
 * @param word the word
 */
private void addWordIntoTextArea(TextArea textArea,Word word){
  int textLength=word.getLength();
  int wordWidth=getWordWidth(fontInfo,word);
  wordWidth+=letterSpacing * textLength;
  if (textArea.hasSpace(wordWidth)) {
    addWord(textArea,textLength,wordWidth);
    if (remainWords.hasWord()) {
      if (textArea.hasSpace(wordSpacing)) {
        textArea.addWordSpacing(wordSpacing);
      }
 else {
        textArea.setLineBreak(true);
        hasLineBreak=true;
      }
    }
  }
 else {
    if (isNewLine && textArea.isEmpty()) {
      if (hyphenation) {
        doHyphenation(word.getValue(),textArea);
      }
 else {
        addWord(textArea,textLength,wordWidth);
      }
    }
 else {
      wordVestige=null;
      remainWord=word;
    }
    textArea.setLineBreak(true);
    hasLineBreak=true;
  }
}",0.9739130434782608
72454,"private void doHyphenation(String str,TextArea area){
  IHyphenationManager hm=new DefaultHyphenationManager();
  Hyphenation hyph=hm.getHyphenation(str);
  FontInfo fi=area.getFontInfo();
  int endHyphenIndex=hyphen(0,area.getMaxWidth() - area.getWidth(),hyph,fi);
  if (endHyphenIndex == 0 && area.getWidth() == 0 && area.getMaxWidth() == 0) {
    addWord(area,1,getTextWidth(fi,hyph.getHyphenText(0,1)));
    wordVestige=new Word(str,1,str.length());
  }
 else {
    addWord(area,endHyphenIndex,getTextWidth(fi,hyph.getHyphenText(0,endHyphenIndex)) + letterSpacing * (endHyphenIndex - 1));
    wordVestige=new Word(str,endHyphenIndex,str.length());
  }
}","private void doHyphenation(String str,TextArea area){
  IHyphenationManager hm=new DefaultHyphenationManager();
  Hyphenation hyph=hm.getHyphenation(str);
  FontInfo fi=area.getFontInfo();
  if (area.getMaxWidth() < 0) {
    addWordVestige(area,1,getTextWidth(fi,hyph.getHyphenText(0,1)),str.substring(1,str.length()));
    return;
  }
  int endHyphenIndex=hyphen(0,area.getMaxWidth() - area.getWidth(),hyph,fi);
  if (endHyphenIndex == 0 && area.getWidth() == 0) {
    addWordVestige(area,1,getTextWidth(fi,hyph.getHyphenText(0,1)),str.substring(1,str.length()));
  }
 else {
    addWordVestige(area,endHyphenIndex,getTextWidth(fi,hyph.getHyphenText(0,endHyphenIndex)) + letterSpacing * (endHyphenIndex - 1),str.substring(endHyphenIndex,str.length()));
  }
}",0.481638418079096
72455,"public static double convertTo(DimensionType value){
  if (value == null || DimensionType.UNITS_PERCENTAGE.equalsIgnoreCase(value.getUnits())) {
    return -1;
  }
  if (DimensionType.UNITS_PX.equalsIgnoreCase(value.getUnits())) {
    return value.getMeasure() * PX_TWIPS;
  }
  double val=value.convertTo(DimensionType.UNITS_IN);
  return val * INCH_TWIPS;
}","public static double convertTo(DimensionType value){
  if (value == null || DimensionType.UNITS_PERCENTAGE.equalsIgnoreCase(value.getUnits())) {
    return -1;
  }
  if (DimensionType.UNITS_PX.equalsIgnoreCase(value.getUnits())) {
    return value.getMeasure() * PX_TWIPS;
  }
  if (DimensionType.UNITS_EM.equalsIgnoreCase(value.getUnits()) || DimensionType.UNITS_EX.equalsIgnoreCase(value.getUnits())) {
    return value.getMeasure() * 12 * PT_TWIPS;
  }
  double val=value.convertTo(DimensionType.UNITS_IN);
  return val * INCH_TWIPS;
}",0.8004459308807135
72456,"private void outputNamedImageSource(String name,ImageSource imageSource){
  out.println('/' + name + ""String_Node_Str"");
  int count=outputImageSource(imageSource,""String_Node_Str"",""String_Node_Str"");
  out.print(""String_Node_Str"" + count + ""String_Node_Str"");
  out.println(imageSource.getWidth() + ""String_Node_Str"" + imageSource.getHeight()+ ""String_Node_Str"");
}","private void outputNamedImageSource(String name,ArrayImageSource imageSource){
  out.println('/' + name + ""String_Node_Str"");
  int count=outputImageSource(imageSource,""String_Node_Str"",""String_Node_Str"");
  out.print(""String_Node_Str"" + count + ""String_Node_Str"");
  out.println(imageSource.getWidth() + ""String_Node_Str"" + imageSource.getHeight()+ ""String_Node_Str"");
}",0.9932157394843962
72457,"private String getImageName(String imageId,Image image) throws IOException {
  String name=(String)cachedImageSource.get(imageId);
  if (name == null) {
    name=""String_Node_Str"" + imageIndex++;
    cachedImageSource.put(imageId,name);
    ImageSource imageSource=getImageSource(image);
    outputNamedImageSource(name,imageSource);
  }
  return name;
}","private String getImageName(String imageId,Image image) throws IOException {
  String name=(String)cachedImageSource.get(imageId);
  if (name == null) {
    name=""String_Node_Str"" + imageIndex++;
    cachedImageSource.put(imageId,name);
    ArrayImageSource imageSource=getImageSource(image);
    outputNamedImageSource(name,imageSource);
  }
  return name;
}",0.9929873772791024
72458,"private void outputUncachedImage(Image image,float x,float y,float width,float height) throws IOException {
  ImageSource imageSource=getImageSource(image);
  out.print(x + ""String_Node_Str"" + y+ ""String_Node_Str"");
  out.print(width + ""String_Node_Str"" + height+ ""String_Node_Str"");
  out.print(imageSource.getWidth() + ""String_Node_Str"" + imageSource.getHeight());
  out.println(""String_Node_Str"");
  outputImageSource(imageSource,""String_Node_Str"",""String_Node_Str"");
  out.println(""String_Node_Str"");
}","private void outputUncachedImage(Image image,float x,float y,float width,float height) throws IOException {
  ArrayImageSource imageSource=getImageSource(image);
  out.print(x + ""String_Node_Str"" + y+ ""String_Node_Str"");
  out.print(width + ""String_Node_Str"" + height+ ""String_Node_Str"");
  out.print(imageSource.getWidth() + ""String_Node_Str"" + imageSource.getHeight());
  out.println(""String_Node_Str"");
  outputUncachedImageSource(imageSource);
  out.println(""String_Node_Str"");
}",0.9039433771486348
72459,"/** 
 * Constructor.
 * @param out Output stream for PostScript output.
 * @param title title of the postscript document.
 */
public PostscriptWriter(OutputStream o,String title){
  this.out=new PrintStream(o);
  this.cachedImageSource=new HashMap();
  emitProlog(title);
}","/** 
 * Constructor.
 * @param out Output stream for PostScript output.
 * @param title title of the postscript document.
 */
public PostscriptWriter(OutputStream o,String title){
  this.out=new PrintStream(o);
  this.cachedImageSource=new HashMap<String,String>();
  emitProlog(title);
}",0.9732620320855616
72460,"private void outputCachedImage(String imageId,Image image,float x,float y,float width,float height) throws IOException {
  String imageName=getImageName(imageId,image);
  out.print(imageName + ""String_Node_Str"");
  out.print(x + ""String_Node_Str"" + y+ ""String_Node_Str"");
  out.print(width + ""String_Node_Str"" + height+ ""String_Node_Str"");
  out.println(""String_Node_Str"");
}","private void outputCachedImage(String imageId,Image image,float x,float y,float width,float height) throws IOException {
  String imageName=getImageName(imageId,image);
  out.print(imageName + ""String_Node_Str"");
  out.print(x + ""String_Node_Str"" + y+ ""String_Node_Str"");
  out.println(width + ""String_Node_Str"" + height+ ""String_Node_Str"");
}",0.9498607242339832
72461,"private int outputImageSource(ImageSource imageSource,String prefix,String suffix){
  int originalWidth=imageSource.getWidth();
  int originalHeight=imageSource.getHeight();
  StringBuffer buffer=new StringBuffer();
  int count=0;
  for (int i=0; i < originalHeight; i++) {
    for (int j=0; j < originalWidth; j++) {
      int pixel=imageSource.getRGB(j,i);
      int alpha=(pixel >> 24) & 0xff;
      int red=(pixel >> 16) & 0xff;
      int green=(pixel >> 8) & 0xff;
      int blue=pixel & 0xff;
      red=transferColor(alpha,red);
      green=transferColor(alpha,green);
      blue=transferColor(alpha,blue);
      toBytes(buffer,red);
      toBytes(buffer,green);
      toBytes(buffer,blue);
      if (buffer.length() >= 250) {
        outputBuffer(buffer,prefix,suffix);
        ++count;
      }
    }
  }
  if (buffer.length() > 0) {
    outputBuffer(buffer,prefix,suffix);
    ++count;
  }
  return count;
}","private int outputImageSource(ArrayImageSource imageSource,String prefix,String suffix){
  int originalWidth=imageSource.getWidth();
  int originalHeight=imageSource.getHeight();
  StringBuffer buffer=new StringBuffer();
  int count=0;
  for (int i=0; i < originalHeight; i++) {
    for (int j=0; j < originalWidth; j++) {
      int pixel=imageSource.getRGB(j,i);
      int alpha=(pixel >> 24) & 0xff;
      int red=(pixel >> 16) & 0xff;
      int green=(pixel >> 8) & 0xff;
      int blue=pixel & 0xff;
      red=transferColor(alpha,red);
      green=transferColor(alpha,green);
      blue=transferColor(alpha,blue);
      toBytes(buffer,red);
      toBytes(buffer,green);
      toBytes(buffer,blue);
      if (buffer.length() >= 250) {
        outputBuffer(buffer,prefix,suffix);
        ++count;
      }
    }
  }
  if (buffer.length() > 0) {
    outputBuffer(buffer,prefix,suffix);
    ++count;
  }
  return count;
}",0.997275204359673
72462,"/** 
 * Loads scripts that are stored in an external file. Used to support include-script. Each script file should be load only once. and the script in the file must be encoded in UTF-8.
 * @param fileName script file name
 */
public void loadScript(String fileName){
  ReportDesignHandle reportDesign=this.getDesign();
  URL url=null;
  if (reportDesign != null) {
    url=reportDesign.findResource(fileName,IResourceLocator.LIBRARY);
  }
  if (url == null) {
    return;
  }
  try {
    InputStream in=url.openStream();
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    byte[] buffer=new byte[1024];
    int size=in.read(buffer);
    while (size != -1) {
      out.write(buffer,0,size);
      size=in.read(buffer);
    }
    byte[] script=out.toByteArray();
    ScriptExpression scriptExpr=new ScriptExpression(new String(script,""String_Node_Str""),fileName,1);
    execute(scriptExpr);
    in.close();
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"" + fileName + ""String_Node_Str"",ex);
    addException(new EngineException(MessageConstants.SCRIPT_FILE_LOAD_ERROR,url.toString(),ex));
  }
}","/** 
 * Loads scripts that are stored in an external file. Used to support include-script. Each script file should be load only once. and the script in the file must be encoded in UTF-8.
 * @param fileName script file name
 */
public void loadScript(String fileName){
  ReportDesignHandle reportDesign=this.getDesign();
  URL url=null;
  if (reportDesign != null) {
    url=reportDesign.findResource(fileName,IResourceLocator.LIBRARY);
  }
  if (url == null) {
    log.log(Level.SEVERE,""String_Node_Str"" + fileName + ""String_Node_Str"");
    addException(new EngineException(MessageConstants.SCRIPT_FILE_LOAD_ERROR,fileName));
    return;
  }
  try {
    InputStream in=url.openStream();
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    byte[] buffer=new byte[1024];
    int size=in.read(buffer);
    while (size != -1) {
      out.write(buffer,0,size);
      size=in.read(buffer);
    }
    byte[] script=out.toByteArray();
    ScriptExpression scriptExpr=new ScriptExpression(new String(script,""String_Node_Str""),fileName,1);
    execute(scriptExpr);
    in.close();
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"" + fileName + ""String_Node_Str"",ex);
    addException(new EngineException(MessageConstants.SCRIPT_FILE_LOAD_ERROR,url.toString(),ex));
  }
}",0.9320148331273176
72463,"protected void initialize(){
  createRoot();
  calculateSpecifiedWidth();
  offsetX=root.getContentX();
  offsetY=root.getContentY();
  if (specifiedWidth > 0) {
    root.setAllocatedWidth(specifiedWidth);
  }
 else {
    root.setAllocatedWidth(parent.getCurrentMaxContentWidth());
  }
  maxAvaWidth=root.getContentWidth();
  root.setAllocatedHeight(parent.getCurrentMaxContentHeight());
  maxAvaHeight=root.getContentHeight();
}","protected void initialize(){
  createRoot();
  validateBoxProperty(content,root.getStyle(),parent.getCurrentMaxContentWidth(),context.getMaxHeight());
  calculateSpecifiedWidth();
  offsetX=root.getContentX();
  offsetY=root.getContentY();
  if (specifiedWidth > 0) {
    root.setAllocatedWidth(specifiedWidth);
  }
 else {
    root.setAllocatedWidth(parent.getCurrentMaxContentWidth());
  }
  maxAvaWidth=root.getContentWidth();
  root.setAllocatedHeight(parent.getCurrentMaxContentHeight());
  maxAvaHeight=root.getContentHeight();
}",0.8900414937759336
72464,"protected void initialize(){
  createRoot();
  offsetX=root.getContentX();
  offsetY=root.getContentY();
  maxAvaWidth=root.getContentWidth();
  root.setAllocatedHeight(parent.getCurrentMaxContentHeight());
  maxAvaHeight=root.getContentHeight();
}","protected void initialize(){
  createRoot();
  validateBoxProperty(root.getStyle(),columnWidth,context.getMaxHeight());
  offsetX=root.getContentX();
  offsetY=root.getContentY();
  maxAvaWidth=root.getContentWidth();
  root.setAllocatedHeight(parent.getCurrentMaxContentHeight());
  maxAvaHeight=root.getContentHeight();
}",0.8686514886164624
72465,"protected void validateBoxProperty(IStyle style,int maxWidth,int maxHeight){
  int leftMargin=getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_LEFT),maxWidth);
  int rightMargin=getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_RIGHT),maxWidth);
  int topMargin=getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_TOP),maxWidth);
  int bottomMargin=getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_BOTTOM),maxWidth);
  int leftPadding=Math.max(0,getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),maxWidth));
  int rightPadding=Math.max(0,getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),maxWidth));
  int topPadding=Math.max(0,getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),maxWidth));
  int bottomPadding=Math.max(0,getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),maxWidth));
  int leftBorder=Math.max(0,getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH),0));
  int rightBorder=Math.max(0,getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH),0));
  int topBorder=Math.max(0,getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH),0));
  int bottomBorder=Math.max(0,getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH),0));
  int[] vs=new int[]{rightMargin,leftMargin,rightPadding,leftPadding,rightBorder,leftBorder};
  resolveBoxConflict(vs,maxWidth);
  int[] hs=new int[]{bottomMargin,topMargin,bottomPadding,topPadding,bottomBorder,topBorder};
  resolveBoxConflict(hs,maxHeight);
  style.setProperty(IStyle.STYLE_MARGIN_LEFT,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,vs[1]));
  style.setProperty(IStyle.STYLE_MARGIN_RIGHT,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,vs[0]));
  style.setProperty(IStyle.STYLE_MARGIN_TOP,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,hs[1]));
  style.setProperty(IStyle.STYLE_MARGIN_BOTTOM,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,hs[0]));
  style.setProperty(IStyle.STYLE_PADDING_LEFT,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,vs[3]));
  style.setProperty(IStyle.STYLE_PADDING_RIGHT,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,vs[2]));
  style.setProperty(IStyle.STYLE_PADDING_TOP,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,hs[3]));
  style.setProperty(IStyle.STYLE_PADDING_BOTTOM,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,hs[2]));
  style.setProperty(IStyle.STYLE_BORDER_LEFT_WIDTH,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,vs[5]));
  style.setProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,vs[4]));
  style.setProperty(IStyle.STYLE_BORDER_TOP_WIDTH,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,hs[5]));
  style.setProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,hs[4]));
}","protected void validateBoxProperty(IStyle style,int maxWidth,int maxHeight){
  int leftMargin=getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_LEFT),maxWidth);
  int rightMargin=getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_RIGHT),maxWidth);
  int topMargin=getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_TOP),maxWidth);
  int bottomMargin=getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_BOTTOM),maxWidth);
  int leftPadding=Math.max(0,getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),maxWidth));
  int rightPadding=Math.max(0,getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),maxWidth));
  int topPadding=Math.max(0,getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),maxWidth));
  int bottomPadding=Math.max(0,getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),maxWidth));
  int leftBorder=Math.max(0,getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH),0));
  int rightBorder=Math.max(0,getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH),0));
  int topBorder=Math.max(0,getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH),0));
  int bottomBorder=Math.max(0,getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH),0));
  int[] vs=new int[]{rightMargin,leftMargin,rightPadding,leftPadding,rightBorder,leftBorder};
  resolveBoxConflict(vs,maxWidth);
  int[] hs=new int[]{bottomMargin,topMargin,bottomPadding,topPadding,bottomBorder,topBorder};
  style.setProperty(IStyle.STYLE_MARGIN_LEFT,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,vs[1]));
  style.setProperty(IStyle.STYLE_MARGIN_RIGHT,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,vs[0]));
  style.setProperty(IStyle.STYLE_MARGIN_TOP,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,hs[1]));
  style.setProperty(IStyle.STYLE_MARGIN_BOTTOM,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,hs[0]));
  style.setProperty(IStyle.STYLE_PADDING_LEFT,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,vs[3]));
  style.setProperty(IStyle.STYLE_PADDING_RIGHT,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,vs[2]));
  style.setProperty(IStyle.STYLE_PADDING_TOP,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,hs[3]));
  style.setProperty(IStyle.STYLE_PADDING_BOTTOM,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,hs[2]));
  style.setProperty(IStyle.STYLE_BORDER_LEFT_WIDTH,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,vs[5]));
  style.setProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,vs[4]));
  style.setProperty(IStyle.STYLE_BORDER_TOP_WIDTH,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,hs[5]));
  style.setProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH,new FloatValue(CSSPrimitiveValue.CSS_NUMBER,hs[4]));
}",0.9933847850055126
72466,"/** 
 * Find a connection available for new statements in the pool, or create a new one if none available 
 */
private CacheConnection getAvailableConnection() throws DataException {
  Iterator it=this.getOdaConnections().iterator();
  while (it.hasNext()) {
    CacheConnection c=(CacheConnection)(it.next());
    if (c.currentStatements < c.maxStatements)     return c;
  }
  return newConnection();
}","/** 
 * Find a connection available for new statements in the pool, or create a new one if none available 
 */
private CacheConnection getAvailableConnection() throws DataException {
  Iterator it=this.getOdaConnections(true).iterator();
  while (it.hasNext()) {
    CacheConnection c=(CacheConnection)(it.next());
    if (c.currentStatements < c.maxStatements)     return c;
  }
  return newConnection();
}",0.9950617283950616
72467,"private Set<CacheConnection> getOdaConnections(){
  if (DataSource.dataEngineLevelConnectionPool.get(this.session) == null) {
    DataSource.dataEngineLevelConnectionPool.put(this.session,new HashMap<ConnectionProp,Set<CacheConnection>>());
  }
  Map<ConnectionProp,Set<CacheConnection>> odaConnectionsMap=DataSource.dataEngineLevelConnectionPool.get(this.session);
  ConnectionProp connProp=new ConnectionProp(this.driverName,this.connectionProps,this.appContext);
  if (odaConnectionsMap.get(connProp) == null) {
    odaConnectionsMap.put(connProp,new HashSet<CacheConnection>());
  }
  return odaConnectionsMap.get(connProp);
}","private Set<CacheConnection> getOdaConnections(boolean populateToCache){
  if (DataSource.dataEngineLevelConnectionPool.get(this.session) == null) {
    if (populateToCache) {
      DataSource.dataEngineLevelConnectionPool.put(this.session,new HashMap<ConnectionProp,Set<CacheConnection>>());
    }
 else {
      return new HashSet<CacheConnection>();
    }
  }
  Map<ConnectionProp,Set<CacheConnection>> odaConnectionsMap=DataSource.dataEngineLevelConnectionPool.get(this.session);
  ConnectionProp connProp=new ConnectionProp(this.driverName,this.connectionProps,this.appContext);
  if (odaConnectionsMap.get(connProp) == null) {
    odaConnectionsMap.put(connProp,new HashSet<CacheConnection>());
  }
  return odaConnectionsMap.get(connProp);
}",0.915032679738562
72468,"public boolean isOpen(){
  return this.getOdaConnections().size() > 0;
}","public boolean isOpen(){
  return this.getOdaConnections(false).size() > 0;
}",0.9664429530201344
72469,"/** 
 * Opens a new Connection and add it to the pool
 * @return
 * @throws DataException
 */
private CacheConnection newConnection() throws DataException {
  CacheConnection conn=new CacheConnection();
  conn.odaConn=ConnectionManager.getInstance().openConnection(driverName,connectionProps,appContext);
  int max=conn.odaConn.getMaxQueries();
  if (max != 0)   conn.maxStatements=max;
  this.getOdaConnections().add(conn);
  return conn;
}","/** 
 * Opens a new Connection and add it to the pool
 * @return
 * @throws DataException
 */
private CacheConnection newConnection() throws DataException {
  CacheConnection conn=new CacheConnection();
  conn.odaConn=ConnectionManager.getInstance().openConnection(driverName,connectionProps,appContext);
  int max=conn.odaConn.getMaxQueries();
  if (max != 0)   conn.maxStatements=max;
  this.getOdaConnections(true).add(conn);
  return conn;
}",0.9548532731376976
72470,"public void close(){
  if (statementMap.size() > 0) {
    Iterator keySet=statementMap.keySet().iterator();
    while (keySet.hasNext()) {
      PreparedStatement stmt=(PreparedStatement)keySet.next();
      try {
        stmt.close();
      }
 catch (      DataException e) {
        logger.logp(Level.FINE,className,""String_Node_Str"",""String_Node_Str"",e);
      }
    }
    statementMap.clear();
  }
  Set<CacheConnection> it=this.getOdaConnections();
  if (it.size() > 1) {
    CacheConnection conn=it.iterator().next();
    conn.currentStatements=0;
    it.remove(conn);
    for (    CacheConnection connections : it) {
      try {
        connections.odaConn.close();
      }
 catch (      DataException e) {
        e.printStackTrace();
      }
    }
    it.clear();
    it.add(conn);
  }
}","public void close(){
  if (statementMap.size() > 0) {
    Iterator keySet=statementMap.keySet().iterator();
    while (keySet.hasNext()) {
      PreparedStatement stmt=(PreparedStatement)keySet.next();
      try {
        stmt.close();
      }
 catch (      DataException e) {
        logger.logp(Level.FINE,className,""String_Node_Str"",""String_Node_Str"",e);
      }
    }
    statementMap.clear();
  }
  Set<CacheConnection> it=this.getOdaConnections(false);
  if (it.size() > 1) {
    CacheConnection conn=it.iterator().next();
    conn.currentStatements=0;
    it.remove(conn);
    for (    CacheConnection connections : it) {
      try {
        connections.odaConn.close();
      }
 catch (      DataException e) {
        e.printStackTrace();
      }
    }
    it.clear();
    it.add(conn);
  }
}",0.996869129618034
72471,"public IStyle getComputedStyle(){
  if (computedStyle == null) {
    CSSEngine cssEngine=null;
    if (report != null) {
      assert(report instanceof ReportContent);
      cssEngine=((ReportContent)report).getCSSEngine();
    }
    if (cssEngine == null) {
      cssEngine=new BIRTCSSEngine();
    }
    computedStyle=new ComputedStyle(this);
  }
  return computedStyle;
}","public IStyle getComputedStyle(){
  if (computedStyle == null) {
    if (parent == null) {
      computedStyle=new ComputedStyle(this);
    }
 else {
      if (inlineStyle == null || inlineStyle.isEmpty()) {
        ComputedStyle pcs=(ComputedStyle)((IContent)parent).getComputedStyle();
        ComputedStyle cs=pcs.getCachedStyle(styleClass);
        if (cs == null) {
          cs=new ComputedStyle(this);
          pcs.addCachedStyle(styleClass,cs);
        }
        computedStyle=cs;
      }
 else {
        computedStyle=new ComputedStyle(this);
      }
    }
  }
  return computedStyle;
}",0.3443298969072165
72472,"public IStyle getComputedStyle(){
  if (computedStyle == null) {
    computedStyle=new CellComputedStyle(this);
  }
  return computedStyle;
}","public IStyle getComputedStyle(){
  if (computedStyle == null) {
    if (inlineStyle == null || inlineStyle.isEmpty()) {
      String cacheKey=styleClass;
      ITableContent table=((IRowContent)parent).getTable();
      if (column >= 0 && column < table.getColumnCount()) {
        IColumn tblColumn=table.getColumn(column);
        if (tblColumn != null) {
          String columnStyleClass=tblColumn.getStyleClass();
          if (columnStyleClass != null) {
            cacheKey=cacheKey + columnStyleClass;
          }
        }
      }
      ComputedStyle pcs=(ComputedStyle)((IContent)parent).getComputedStyle();
      ComputedStyle cs=pcs.getCachedStyle(cacheKey);
      if (cs == null) {
        cs=new CellComputedStyle(this);
        pcs.addCachedStyle(styleClass,cs);
      }
      computedStyle=cs;
    }
 else {
      computedStyle=new CellComputedStyle(this);
    }
  }
  return computedStyle;
}",0.1864890580399619
72473,"public CSSValue getProperty(int index){
  if (values[index] != null) {
    return values[index];
  }
  if (parent != null) {
    return parent.getProperty(index);
  }
  return null;
}","public CSSValue getProperty(int index){
  if (!resolveFlags[index]) {
    if (parent != null) {
      values[index]=parent.getProperty(index);
    }
    resolveFlags[index]=true;
  }
  return values[index];
}",0.4552429667519181
72474,"public void setProperty(int index,CSSValue value){
  values[index]=value;
}","public void setProperty(int index,CSSValue value){
  values[index]=value;
  resolveFlags[index]=true;
}",0.8426966292134831
72475,"public IReportRunnable getReportRunnable(){
  loadMainInfoLazily();
  return getReportRunnable(true,systemId);
}","public synchronized IReportRunnable getReportRunnable(){
  loadMainInfoLazily();
  if (reportRunnable == null) {
    reportRunnable=getReportRunnable(true,systemId);
  }
  return reportRunnable.cloneRunnable();
}",0.6481481481481481
72476,"private ClassLoader getClassLoader(String systemId){
  if (applicationClassLoader == null) {
    applicationClassLoader=new ApplicationClassLoader(engine,getReportRunnable(false,systemId));
  }
  return applicationClassLoader;
}","public synchronized ClassLoader getClassLoader(){
  if (applicationClassLoader == null) {
    loadMainInfoLazily();
    applicationClassLoader=createClassLoader(systemId);
  }
  return applicationClassLoader;
}",0.1917808219178082
72477,"private void loadBasicInfoV0(DataInputStream di,ReportDocumentCoreInfo documentInfo) throws IOException {
  documentInfo.checkpoint=CHECKPOINT_INIT;
  documentInfo.pageCount=PAGECOUNT_INIT;
  documentInfo.checkpoint=IOUtil.readInt(di);
  documentInfo.pageCount=IOUtil.readLong(di);
  if (isLoaded && documentInfo.checkpoint == checkpoint) {
    return;
  }
  String orgSystemId=IOUtil.readString(di);
  if (systemId == null) {
    documentInfo.systemId=orgSystemId;
  }
 else {
    documentInfo.systemId=systemId;
  }
}","private void loadBasicInfoV0(DataInputStream di,ReportDocumentCoreInfo documentInfo) throws IOException {
  documentInfo.checkpoint=CHECKPOINT_INIT;
  documentInfo.pageCount=PAGECOUNT_INIT;
  documentInfo.checkpoint=IOUtil.readInt(di);
  documentInfo.pageCount=IOUtil.readLong(di);
  if (isLoaded && documentInfo.checkpoint == checkpoint) {
    return;
  }
  String orgSystemId=IOUtil.readString(di);
  if (systemId == null) {
    systemId=orgSystemId;
  }
}",0.9375639713408394
72478,"private void loadOldBasicInfo(DataInputStream coreStream,ReportDocumentCoreInfo documentInfo) throws IOException {
  documentInfo.checkpoint=CHECKPOINT_INIT;
  documentInfo.pageCount=PAGECOUNT_INIT;
  if (!archive.exists(CHECKPOINT_STREAM)) {
    documentInfo.checkpoint=CHECKPOINT_END;
    initializePageHintReader();
    if (pageHintReader != null) {
      documentInfo.pageCount=pageHintReader.getTotalPage();
    }
  }
 else {
    RAInputStream in=archive.getStream(CHECKPOINT_STREAM);
    try {
      DataInputStream di=new DataInputStream(in);
      documentInfo.checkpoint=IOUtil.readInt(di);
      documentInfo.pageCount=IOUtil.readLong(di);
    }
  finally {
      if (in != null) {
        in.close();
      }
    }
    if (documentInfo.checkpoint == checkpoint) {
      return;
    }
  }
  String orgSystemId=IOUtil.readString(coreStream);
  if (systemId == null) {
    documentInfo.systemId=orgSystemId;
  }
 else {
    documentInfo.systemId=systemId;
  }
}","private void loadOldBasicInfo(DataInputStream coreStream,ReportDocumentCoreInfo documentInfo) throws IOException {
  documentInfo.checkpoint=CHECKPOINT_INIT;
  documentInfo.pageCount=PAGECOUNT_INIT;
  if (!archive.exists(CHECKPOINT_STREAM)) {
    documentInfo.checkpoint=CHECKPOINT_END;
    initializePageHintReader();
    if (pageHintReader != null) {
      documentInfo.pageCount=pageHintReader.getTotalPage();
    }
  }
 else {
    RAInputStream in=archive.getStream(CHECKPOINT_STREAM);
    try {
      DataInputStream di=new DataInputStream(in);
      documentInfo.checkpoint=IOUtil.readInt(di);
      documentInfo.pageCount=IOUtil.readLong(di);
    }
  finally {
      if (in != null) {
        in.close();
      }
    }
    if (documentInfo.checkpoint == checkpoint) {
      return;
    }
  }
  String orgSystemId=IOUtil.readString(coreStream);
  if (systemId == null) {
    systemId=orgSystemId;
  }
}",0.9675013319126264
72479,"protected void doRefreshV0(DataInputStream di) throws IOException {
  ReportDocumentCoreInfo documentInfo=new ReportDocumentCoreInfo();
  loadBasicInfoV0(di,documentInfo);
  if (isLoaded && documentInfo.checkpoint == checkpoint) {
    return;
  }
  loadMainInfo(di,documentInfo);
  checkpoint=documentInfo.checkpoint;
  pageCount=documentInfo.pageCount;
  systemId=documentInfo.systemId;
  globalVariables=documentInfo.globalVariables;
  parameters=documentInfo.parameters;
  applicationClassLoader=documentInfo.applicationClassLoader;
  if (documentInfo.checkpoint == CHECKPOINT_END) {
    bookmarks=readMap(di);
    tocTree=new TOCTree();
    TOCBuilder.read(tocTree,di,applicationClassLoader);
    reportletsIndexById=readMap(di);
    reportletsIndexByBookmark=readMap(di);
  }
}","protected void doRefreshV0(DataInputStream di) throws IOException {
  ReportDocumentCoreInfo documentInfo=new ReportDocumentCoreInfo();
  loadBasicInfoV0(di,documentInfo);
  if (isLoaded && documentInfo.checkpoint == checkpoint) {
    return;
  }
  loadMainInfo(di,documentInfo);
  checkpoint=documentInfo.checkpoint;
  pageCount=documentInfo.pageCount;
  globalVariables=documentInfo.globalVariables;
  parameters=documentInfo.parameters;
  if (documentInfo.checkpoint == CHECKPOINT_END) {
    bookmarks=readMap(di);
    tocTree=new TOCTree();
    TOCBuilder.read(tocTree,di,applicationClassLoader);
    reportletsIndexById=readMap(di);
    reportletsIndexByBookmark=readMap(di);
  }
}",0.9346049046321526
72480,"public ITOCTree getTOCTree(String format,ULocale locale,TimeZone timeZone){
  if (!isComplete()) {
    return null;
  }
  intializeTOC();
  TOCTree result=new TOCTree(tocTree.getTOCRoot(),format,locale,timeZone,((ReportRunnable)getReportRunnable()).getReport());
  return result;
}","public ITOCTree getTOCTree(String format,ULocale locale,TimeZone timeZone){
  if (!isComplete()) {
    return null;
  }
  intializeTOC();
  TOCTree result=new TOCTree(tocTree.getTOCRoot(),format,locale,timeZone,((ReportRunnable)getOnPreparedRunnable()).getReport());
  return result;
}",0.9717314487632508
72481,"protected void doOldRefresh(DataInputStream coreStream) throws IOException {
  ReportDocumentCoreInfo documentInfo=new ReportDocumentCoreInfo();
  loadOldBasicInfo(coreStream,documentInfo);
  if (documentInfo.checkpoint == CHECKPOINT_INIT) {
    return;
  }
  loadMainInfo(coreStream,documentInfo);
  checkpoint=documentInfo.checkpoint;
  pageCount=documentInfo.pageCount;
  systemId=documentInfo.systemId;
  globalVariables=documentInfo.globalVariables;
  parameters=documentInfo.parameters;
  applicationClassLoader=documentInfo.applicationClassLoader;
}","protected void doOldRefresh(DataInputStream coreStream) throws IOException {
  ReportDocumentCoreInfo documentInfo=new ReportDocumentCoreInfo();
  loadOldBasicInfo(coreStream,documentInfo);
  if (documentInfo.checkpoint == CHECKPOINT_INIT) {
    return;
  }
  loadMainInfo(coreStream,documentInfo);
  checkpoint=documentInfo.checkpoint;
  pageCount=documentInfo.pageCount;
  globalVariables=documentInfo.globalVariables;
  parameters=documentInfo.parameters;
}",0.905511811023622
72482,"private void loadMainInfo(DataInputStream coreStream,ReportDocumentCoreInfo documentInfo) throws IOException {
  documentInfo.applicationClassLoader=getClassLoader(documentInfo.systemId);
  Map originalParameters=IOUtil.readMap(coreStream,documentInfo.applicationClassLoader);
  documentInfo.parameters=convertToCompatibleParameter(originalParameters);
  documentInfo.globalVariables=(HashMap)IOUtil.readMap(coreStream,documentInfo.applicationClassLoader);
}","private void loadMainInfo(DataInputStream coreStream,ReportDocumentCoreInfo documentInfo) throws IOException {
  if (applicationClassLoader == null) {
    applicationClassLoader=createClassLoader(systemId);
  }
  Map originalParameters=IOUtil.readMap(coreStream,applicationClassLoader);
  documentInfo.parameters=convertToCompatibleParameter(originalParameters);
  documentInfo.globalVariables=(HashMap)IOUtil.readMap(coreStream,applicationClassLoader);
}",0.8784227820372399
72483,"/** 
 * @param dataType
 * @return
 */
public static ICalculator getCalculator(Class<?> clz){
  if (clz.equals(Boolean.class)) {
    return new BooleanCalculator();
  }
 else   if (clz.equals(Date.class)) {
    return new DateCalculator();
  }
 else   if (clz.equals(String.class)) {
    return new StringCalculator();
  }
 else   if (clz.equals(BigDecimal.class)) {
    return new BigDecimalCalculator();
  }
 else {
    return new NumberCalculator();
  }
}","/** 
 * @param dataType
 * @return
 */
public static ICalculator getCalculator(Class<?> clz){
  if (clz.equals(Boolean.class)) {
    return new BooleanCalculator();
  }
 else   if (Date.class.isAssignableFrom(clz)) {
    return new DateCalculator();
  }
 else   if (clz.equals(String.class)) {
    return new StringCalculator();
  }
 else   if (clz.equals(BigDecimal.class)) {
    return new BigDecimalCalculator();
  }
 else {
    return new NumberCalculator();
  }
}",0.9503239740820736
72484,"/** 
 * layout a word, add the word to the line buffer.
 * @param word the word
 */
private void addWordIntoTextArea(TextArea textArea,Word word){
  int textLength=word.getLength();
  int wordWidth=getWordWidth(fontInfo,word);
  wordWidth+=letterSpacing * textLength;
  if (textArea.hasSpace(wordWidth)) {
    addWord(textArea,textLength,wordWidth);
    if (remainWords.hasWord()) {
      if (textArea.hasSpace(wordSpacing)) {
        textArea.addWordSpacing(wordSpacing);
      }
 else {
        textArea.setLineBreak(true);
        hasLineBreak=true;
      }
    }
  }
 else {
    if (isNewLine && textArea.isEmpty()) {
      if (hyphenation) {
        doHyphenation(word.getValue(),textArea);
      }
 else {
        addWord(textArea,textLength,wordWidth);
      }
    }
 else {
      wordVestige=null;
      remainWord=word;
    }
    textArea.setLineBreak(true);
    hasLineBreak=true;
  }
}","/** 
 * layout a word, add the word to the line buffer.
 * @param word the word
 */
private void addWordIntoTextArea(TextArea textArea,Word word){
  int textLength=word.getLength();
  int wordWidth=getWordWidth(fontInfo,word);
  wordWidth+=letterSpacing * textLength;
  if (textArea.hasSpace(wordWidth)) {
    addWord(textArea,textLength,wordWidth);
    wordVestige=null;
    if (remainWords.hasWord()) {
      if (textArea.hasSpace(wordSpacing)) {
        textArea.addWordSpacing(wordSpacing);
      }
 else {
        textArea.setLineBreak(true);
        hasLineBreak=true;
      }
    }
  }
 else {
    if (isNewLine && textArea.isEmpty()) {
      if (hyphenation) {
        doHyphenation(word.getValue(),textArea);
      }
 else {
        addWord(textArea,textLength,wordWidth);
      }
    }
 else {
      wordVestige=null;
      remainWord=word;
    }
    textArea.setLineBreak(true);
    hasLineBreak=true;
  }
}",0.98787210584344
72485,"private void addWordVestige(TextArea area,int textLength,int wordWidth,String vestigeString){
  addWord(area,textLength,wordWidth);
  if (vestigeString.length() == 0) {
    wordVestige=null;
  }
 else {
    wordVestige=new Word(vestigeString,0,vestigeString.length());
  }
  return;
}","private void addWordVestige(TextArea area,int vestigeTextLength,int vestigeWordWidth,String vestigeString){
  addWord(area,vestigeTextLength,vestigeWordWidth);
  if (vestigeString.length() == 0) {
    wordVestige=null;
  }
 else {
    wordVestige=new Word(vestigeString,0,vestigeString.length());
  }
}",0.9215017064846416
72486,"synchronized public boolean removeEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.removeEntry(name);
  }
 else {
    throw new IOException(""String_Node_Str"" + af.getName() + ""String_Node_Str"");
  }
}","synchronized public boolean removeEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.removeEntry(name);
  }
 else {
    throw new IOException(""String_Node_Str"" + name + ""String_Node_Str""+ systemId);
  }
}",0.8801652892561983
72487,"/** 
 * save the file. If the file is transient file, after saving, it will be converts to normal file.
 * @throws IOException
 */
public void save() throws IOException {
  if (isArchiveFileAvailable(af)) {
    if (af instanceof ArchiveFileV2) {
      ((ArchiveFileV2)af).save();
    }
 else {
      af.flush();
    }
  }
 else {
    throw new IOException(""String_Node_Str"" + af.getName() + ""String_Node_Str"");
  }
}","/** 
 * save the file. If the file is transient file, after saving, it will be converts to normal file.
 * @throws IOException
 */
public void save() throws IOException {
  if (isArchiveFileAvailable(af)) {
    if (af instanceof ArchiveFileV2) {
      ((ArchiveFileV2)af).save();
    }
 else {
      af.flush();
    }
  }
 else {
    throw new IOException(""String_Node_Str"" + systemId);
  }
}",0.9554455445544554
72488,"synchronized public void flush() throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.flush();
  }
 else {
    throw new IOException(""String_Node_Str"" + af.getName() + ""String_Node_Str"");
  }
}","synchronized public void flush() throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.flush();
  }
 else {
    throw new IOException(""String_Node_Str"" + systemId);
  }
}",0.9114583333333334
72489,"synchronized public ArchiveEntry getEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.getEntry(name);
  }
 else {
    throw new IOException(""String_Node_Str"" + af.getName() + ""String_Node_Str"");
  }
}","synchronized public ArchiveEntry getEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.getEntry(name);
  }
 else {
    throw new IOException(""String_Node_Str"" + name + ""String_Node_Str""+ systemId);
  }
}",0.8755186721991701
72490,"synchronized public void refresh() throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.refresh();
  }
 else {
    throw new IOException(""String_Node_Str"" + af.getName() + ""String_Node_Str"");
  }
}","synchronized public void refresh() throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.refresh();
  }
 else {
    throw new IOException(""String_Node_Str"" + systemId);
  }
}",0.9132653061224488
72491,"synchronized public ArchiveEntry createEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.createEntry(name);
  }
 else {
    throw new IOException(""String_Node_Str"" + af.getName() + ""String_Node_Str"");
  }
}","synchronized public ArchiveEntry createEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.createEntry(name);
  }
 else {
    throw new IOException(""String_Node_Str"" + name + ""String_Node_Str""+ systemId);
  }
}",0.8825910931174089
72492,"public void unlockEntry(Object locker) throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.unlockEntry(locker);
  }
 else {
    throw new IOException(""String_Node_Str"" + af.getName() + ""String_Node_Str"");
  }
}","public void unlockEntry(Object locker) throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.unlockEntry(locker);
  }
 else {
    throw new IOException(""String_Node_Str"" + systemId);
  }
}",0.919047619047619
72493,"private void assertWritable() throws IOException {
  assertOpen();
  if (!isWritable) {
    throw new IOException(""String_Node_Str"");
  }
}","private void assertWritable() throws IOException {
  assertOpen();
  if (!isWritable) {
    throw new IOException(""String_Node_Str"" + systemId);
  }
}",0.9619377162629758
72494,"private void assertOpen() throws IOException {
  if (isClosed) {
    throw new IOException(""String_Node_Str"");
  }
}","private void assertOpen() throws IOException {
  if (isClosed) {
    throw new IOException(""String_Node_Str"" + systemId);
  }
}",0.9547325102880658
72495,"/** 
 * Convert String without specified locale to java.util.Date Try to format the given String for JRE default Locale, if it fails, try to format the String for Locale.US 
 * @param source the String to be convert
 * @param locate the locate of the string
 * @return result Date
 */
private static Date toDate(String source) throws BirtException {
  try {
    return toDateISO8601(source);
  }
 catch (  BirtException e) {
    try {
      return toDate(source,ULocale.getDefault());
    }
 catch (    BirtException use) {
      return toDate(source,DEFAULT_LOCALE);
    }
  }
}","/** 
 * Convert String without specified locale to java.util.Date Try to format the given String for JRE default Locale, if it fails, try to format the String for Locale.US 
 * @param source the String to be convert
 * @param locate the locate of the string
 * @return result Date
 */
private static Date toDate(String source) throws BirtException {
  try {
    return toDateISO8601(source);
  }
 catch (  BirtException e) {
    try {
      return toDate(source,JRE_DEFAULT_LOCALE);
    }
 catch (    BirtException use) {
      return toDate(source,DEFAULT_LOCALE);
    }
  }
}",0.8477508650519031
72496,"/** 
 * Boolean -> BigDecimal true 	-> 1 others 	-> 0  Date -> BigDecimal Date.getTime(); String -> BigDecimal new BigDecimal(String);
 * @param source
 * @return
 * @throws BirtException
 */
public static BigDecimal toBigDecimal(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof BigDecimal) {
    return (BigDecimal)source;
  }
 else   if (source instanceof Number) {
    String str=((Number)source).toString();
    try {
      return new BigDecimal(str);
    }
 catch (    NumberFormatException e) {
      throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{str,""String_Node_Str""});
    }
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new BigDecimal(1d);
    return new BigDecimal(0d);
  }
 else   if (source instanceof Date) {
    long longValue=((Date)source).getTime();
    return new BigDecimal(longValue);
  }
 else   if (source instanceof String) {
    try {
      return new BigDecimal((String)source);
    }
 catch (    NumberFormatException e) {
      try {
        Number number=NumberFormat.getInstance(ULocale.getDefault()).parse((String)source);
        if (number != null)         return new BigDecimal(number.toString());
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
 catch (      ParseException e1) {
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}","/** 
 * Boolean -> BigDecimal true 	-> 1 others 	-> 0  Date -> BigDecimal Date.getTime(); String -> BigDecimal new BigDecimal(String);
 * @param source
 * @return
 * @throws BirtException
 */
public static BigDecimal toBigDecimal(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof BigDecimal) {
    return (BigDecimal)source;
  }
 else   if (source instanceof Number) {
    String str=((Number)source).toString();
    try {
      return new BigDecimal(str);
    }
 catch (    NumberFormatException e) {
      throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{str,""String_Node_Str""});
    }
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new BigDecimal(1d);
    return new BigDecimal(0d);
  }
 else   if (source instanceof Date) {
    long longValue=((Date)source).getTime();
    return new BigDecimal(longValue);
  }
 else   if (source instanceof String) {
    try {
      return new BigDecimal((String)source);
    }
 catch (    NumberFormatException e) {
      try {
        Number number=NumberFormat.getInstance(JRE_DEFAULT_LOCALE).parse((String)source);
        if (number != null)         return new BigDecimal(number.toString());
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
 catch (      ParseException e1) {
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}",0.9898929845422116
72497,"/** 
 * Boolean -> Integer true 	-> 1 others 	-> 0  Date -> Integer Date.getTime(); String -> Integer Integer.valueOf();
 * @param source
 * @return
 * @throws BirtException
 */
public static Integer toInteger(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Integer) {
    return (Integer)source;
  }
 else   if (source instanceof Number) {
    int intValue=((Number)source).intValue();
    return new Integer(intValue);
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new Integer(1);
    return new Integer(0);
  }
 else   if (source instanceof Date) {
    long longValue=((Date)source).getTime();
    return new Integer((int)longValue);
  }
 else   if (source instanceof String) {
    try {
      return new Integer(Double.valueOf((String)source).intValue());
    }
 catch (    NumberFormatException e) {
      try {
        Number number=NumberFormat.getInstance(ULocale.getDefault()).parse((String)source);
        if (number != null)         return new Integer(number.intValue());
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
 catch (      ParseException e1) {
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}","/** 
 * Boolean -> Integer true 	-> 1 others 	-> 0  Date -> Integer Date.getTime(); String -> Integer Integer.valueOf();
 * @param source
 * @return
 * @throws BirtException
 */
public static Integer toInteger(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Integer) {
    return (Integer)source;
  }
 else   if (source instanceof Number) {
    int intValue=((Number)source).intValue();
    return new Integer(intValue);
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new Integer(1);
    return new Integer(0);
  }
 else   if (source instanceof Date) {
    long longValue=((Date)source).getTime();
    return new Integer((int)longValue);
  }
 else   if (source instanceof String) {
    try {
      return new Integer(Double.valueOf((String)source).intValue());
    }
 catch (    NumberFormatException e) {
      try {
        Number number=NumberFormat.getInstance(JRE_DEFAULT_LOCALE).parse((String)source);
        if (number != null)         return new Integer(number.intValue());
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
 catch (      ParseException e1) {
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}",0.9887566137566136
72498,"/** 
 * Boolean -> Double true 	-> 1 others 	-> 0  Date -> Double Date.getTime(); String -> Double Double.valueOf(String);
 * @param source
 * @return
 * @throws BirtException
 */
public static Double toDouble(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Double) {
    return (Double)source;
  }
 else   if (source instanceof Number) {
    double doubleValue=((Number)source).doubleValue();
    return new Double(doubleValue);
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new Double(1d);
    return new Double(0d);
  }
 else   if (source instanceof Date) {
    double doubleValue=((Date)source).getTime();
    return new Double(doubleValue);
  }
 else   if (source instanceof String) {
    try {
      return Double.valueOf((String)source);
    }
 catch (    NumberFormatException e) {
      try {
        Number number=NumberFormat.getInstance(ULocale.getDefault()).parse((String)source);
        if (number != null)         return new Double(number.doubleValue());
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
 catch (      ParseException e1) {
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}","/** 
 * Boolean -> Double true 	-> 1 others 	-> 0  Date -> Double Date.getTime(); String -> Double Double.valueOf(String);
 * @param source
 * @return
 * @throws BirtException
 */
public static Double toDouble(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Double) {
    return (Double)source;
  }
 else   if (source instanceof Number) {
    double doubleValue=((Number)source).doubleValue();
    return new Double(doubleValue);
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new Double(1d);
    return new Double(0d);
  }
 else   if (source instanceof Date) {
    double doubleValue=((Date)source).getTime();
    return new Double(doubleValue);
  }
 else   if (source instanceof String) {
    try {
      return Double.valueOf((String)source);
    }
 catch (    NumberFormatException e) {
      try {
        Number number=NumberFormat.getInstance(JRE_DEFAULT_LOCALE).parse((String)source);
        if (number != null)         return new Double(number.doubleValue());
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
 catch (      ParseException e1) {
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}",0.9886591060707138
72499,"/** 
 * @param source
 * @return
 */
private Double toDouble(String source) throws DataException {
  try {
    return Double.valueOf((String)source);
  }
 catch (  NumberFormatException e) {
    try {
      Number number=NumberFormat.getInstance(ULocale.getDefault()).parse((String)source);
      if (number != null)       return new Double(number.doubleValue());
      throw DataException.wrap(new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""}));
    }
 catch (    ParseException e1) {
      throw DataException.wrap(new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""}));
    }
  }
}","/** 
 * @param source
 * @return
 */
private Double toDouble(String source) throws DataException {
  try {
    return Double.valueOf((String)source);
  }
 catch (  NumberFormatException e) {
    try {
      Number number=NumberFormat.getInstance(locale).parse((String)source);
      if (number != null)       return new Double(number.doubleValue());
      throw DataException.wrap(new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""}));
    }
 catch (    ParseException e1) {
      throw DataException.wrap(new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""}));
    }
  }
}",0.9807407407407408
72500,"static void handleElement(Element ele,Map cssStyles,IContent content,ActionContent action,int index){
  IStyle cssStyle=(IStyle)cssStyles.get(ele);
  if (cssStyle != null) {
    if (""String_Node_Str"".equals(cssStyle.getDisplay())) {
      return;
    }
  }
  String tagName=ele.getTagName();
  if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    outputImg(ele,cssStyles,content);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.BLOCK_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.MIDDLE_VALUE);
    IContainerContent container=content.getReportContent().createContainerContent();
    container.setInlineStyle(style);
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    IContainerContent orderContainer=content.getReportContent().createContainerContent();
    CSSValue fontSizeValue=content.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE);
    orderContainer.setWidth(new DimensionType(2.1 * PropertyUtil.getDimensionValue(fontSizeValue) / 1000.0,EngineIRConstants.UNITS_PT));
    orderContainer.setInlineStyle(style);
    addChild(container,orderContainer);
    TextContent text=(TextContent)content.getReportContent().createTextContent();
    addChild(orderContainer,text);
    if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new Integer(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new String(new char[]{'\u2022',' ',' ',' ',' '}));
    }
    text.setInlineStyle(style);
    IContainerContent childContainer=content.getReportContent().createContainerContent();
    addChild(container,childContainer);
    childContainer.setInlineStyle(style);
    processNodes(ele,cssStyles,childContainer,action);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (tagName.toLowerCase().equals(""String_Node_Str"")) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action);
    }
 else {
      processNodes(ele,cssStyles,container,action);
    }
  }
 else   if (""String_Node_Str"".equals(tagName.toLowerCase())) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action);
  }
}","static void handleElement(Element ele,Map cssStyles,IContent content,ActionContent action,int index){
  IStyle cssStyle=(IStyle)cssStyles.get(ele);
  if (cssStyle != null) {
    if (""String_Node_Str"".equals(cssStyle.getDisplay())) {
      return;
    }
  }
  String tagName=ele.getTagName();
  if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    outputImg(ele,cssStyles,content);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IReportContent report=content.getReportContent();
    ITableContent table=report.createTableContent();
    addChild(content,table);
    Column column1=new Column(report);
    column1.setWidth(new DimensionType(2,""String_Node_Str""));
    table.addColumn(column1);
    column1=new Column(report);
    table.addColumn(column1);
    handleStyle(ele,cssStyles,table);
    processNodes(ele,cssStyles,table,action);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    IReportContent report=content.getReportContent();
    IRowContent row=report.createRowContent();
    addChild(content,row);
    handleStyle(ele,cssStyles,row);
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    style.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    ICellContent orderCell=report.createCellContent();
    orderCell.setRowSpan(1);
    orderCell.setColumn(0);
    orderCell.setColSpan(1);
    orderCell.setInlineStyle(style);
    addChild(row,orderCell);
    TextContent text=(TextContent)report.createTextContent();
    addChild(orderCell,text);
    if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new Integer(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new String(new char[]{'\u2022',' ',' ',' ',' '}));
    }
    ICellContent childCell=report.createCellContent();
    childCell.setRowSpan(1);
    childCell.setColumn(1);
    childCell.setColSpan(1);
    childCell.setInlineStyle(style);
    addChild(row,childCell);
    processNodes(ele,cssStyles,childCell,action);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (tagName.toLowerCase().equals(""String_Node_Str"")) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action);
    }
 else {
      processNodes(ele,cssStyles,container,action);
    }
  }
 else   if (""String_Node_Str"".equals(tagName.toLowerCase())) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action);
  }
}",0.7481767481767482
72501,"public int getContentX(){
  return PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH)) + PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT));
}","public int getContentX(){
  return PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH),width) + PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),width);
}",0.9705882352941176
72502,"public int getContentY(){
  return PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH)) + PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP));
}","public int getContentY(){
  return PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH),width) + PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),width);
}",0.9702970297029704
72503,"/** 
 * Checks if a text is in a table header/footer or group header/footer.
 * @param text
 * @return
 */
private boolean isInHeaderFooter(ITextContent text,HashMap map){
  Object generateBy=text.getGenerateBy();
  IElement parent=text.getParent();
  while (parent != null) {
    if (parent instanceof IContent) {
      IContent content=(IContent)parent;
      ReportItemDesign design=(ReportItemDesign)content.getGenerateBy();
      if (design != null && design.getQuery() != null) {
        map.put(generateBy,Boolean.FALSE);
        return false;
      }
    }
    if (parent instanceof IBandContent) {
      IBandContent bandContent=(IBandContent)parent;
      int bandType=bandContent.getBandType();
      if (bandType == IBandContent.BAND_HEADER || bandType == IBandContent.BAND_FOOTER || bandType == IBandContent.BAND_GROUP_HEADER || bandType == IBandContent.BAND_GROUP_FOOTER) {
        IElement bandParent=bandContent.getParent();
        while (bandParent instanceof IGroupContent) {
          bandParent=bandParent.getParent();
        }
        if (bandParent instanceof ITableContent) {
          map.put(generateBy,Boolean.TRUE);
          return true;
        }
      }
    }
    parent=parent.getParent();
  }
  map.put(generateBy,Boolean.FALSE);
  return false;
}","/** 
 * Checks if a text is in a table header/footer or group header/footer.
 * @param text
 * @return
 */
private boolean isInHeaderFooter(ITextContent text,HashMap map){
  Object generateBy=text.getGenerateBy();
  IElement parent=text.getParent();
  while (parent != null) {
    if (parent instanceof IContent) {
      IContent content=(IContent)parent;
      Object parentGenerateBy=content.getGenerateBy();
      if (parentGenerateBy instanceof ReportItemDesign) {
        ReportItemDesign design=(ReportItemDesign)parentGenerateBy;
        if (design.getQuery() != null) {
          map.put(generateBy,Boolean.FALSE);
          return false;
        }
      }
 else       if (null != parentGenerateBy) {
        map.put(generateBy,Boolean.FALSE);
        return false;
      }
    }
    if (parent instanceof IBandContent) {
      IBandContent bandContent=(IBandContent)parent;
      int bandType=bandContent.getBandType();
      if (bandType == IBandContent.BAND_HEADER || bandType == IBandContent.BAND_FOOTER || bandType == IBandContent.BAND_GROUP_HEADER || bandType == IBandContent.BAND_GROUP_FOOTER) {
        IElement bandParent=bandContent.getParent();
        while (bandParent instanceof IGroupContent) {
          bandParent=bandParent.getParent();
        }
        if (bandParent instanceof ITableContent) {
          map.put(generateBy,Boolean.TRUE);
          return true;
        }
      }
    }
    parent=parent.getParent();
  }
  map.put(generateBy,Boolean.FALSE);
  return false;
}",0.8825852782764811
72504,"private void doHyphenation(String str,TextArea area){
  IHyphenationManager hm=new DefaultHyphenationManager();
  Hyphenation hyph=hm.getHyphenation(str);
  FontInfo fi=area.getFontInfo();
  int endHyphenIndex=hyphen(0,area.getMaxWidth() - area.getWidth(),hyph,fi);
  if (endHyphenIndex == 0 && area.getWidth() == 0 && area.getMaxWidth() == 0) {
    addWord(area,1,getTextWidth(fi,hyph.getHyphenText(0,1)));
    wordVestige=new Word(str,1,str.length());
  }
 else {
    addWord(area,endHyphenIndex,getTextWidth(fi,hyph.getHyphenText(0,endHyphenIndex)));
    wordVestige=new Word(str,endHyphenIndex,str.length());
  }
}","private void doHyphenation(String str,TextArea area){
  IHyphenationManager hm=new DefaultHyphenationManager();
  Hyphenation hyph=hm.getHyphenation(str);
  FontInfo fi=area.getFontInfo();
  int endHyphenIndex=hyphen(0,area.getMaxWidth() - area.getWidth(),hyph,fi);
  if (endHyphenIndex == 0 && area.getWidth() == 0 && area.getMaxWidth() == 0) {
    addWord(area,1,getTextWidth(fi,hyph.getHyphenText(0,1)));
    wordVestige=new Word(str,1,str.length());
  }
 else {
    addWord(area,endHyphenIndex,getTextWidth(fi,hyph.getHyphenText(0,endHyphenIndex)) + letterSpacing * (endHyphenIndex - 1));
    wordVestige=new Word(str,endHyphenIndex,str.length());
  }
}",0.9694117647058824
72505,"public TextArea getNextArea(int maxLineWidth){
  if (!hasNextArea()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TextArea textArea=getNextTextArea(maxLineWidth);
  offset+=textArea.getTextLength();
  return textArea;
}","public TextArea getNextArea(int maxLineWidth){
  if (!hasNextArea()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TextArea textArea=getNextTextArea(maxLineWidth);
  offset+=textArea.getTextLength();
  System.out.print(textArea.getText());
  System.out.print(""String_Node_Str"" + offset + ""String_Node_Str"");
  return textArea;
}",0.8118466898954704
72506,"protected void addCaption(String caption){
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  IReportContent report=tableContent.getReportContent();
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setText(caption);
  captionLabel.getStyle().setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  ICellContent cell=report.createCellContent();
  cell.setColSpan(tableContent.getColumnCount());
  cell.setRowSpan(1);
  cell.setColumn(0);
  captionLabel.setParent(cell);
  cell.getChildren().add(captionLabel);
  IRowContent row=report.createRowContent();
  row.getChildren().add(cell);
  cell.setParent(row);
  ITableBandContent band=report.createTableBandContent();
  band.getChildren().add(row);
  row.setParent(band);
  band.setParent(tableContent);
  Layout regionLayout=new RegionLayout(context,band,null);
  regionLayout.layout();
  TableArea tableRegion=(TableArea)content.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      RowArea rowArea=(RowArea)iter.next();
      addArea(rowArea);
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void addCaption(String caption){
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  Layout rLayout=getTableRegionLayout();
  rLayout.layout();
  TableArea tableRegion=(TableArea)content.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null) {
    Iterator iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      RowArea rowArea=(RowArea)iter.next();
      addArea(rowArea);
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}",0.5256049521665729
72507,"protected void initialize(){
  createRoot();
  buildTableLayoutInfo();
  root.setWidth(layoutInfo.getTableWidth());
  maxAvaWidth=layoutInfo.getTableWidth();
  rowCount=0;
  if (parent != null) {
    root.setAllocatedHeight(parent.getCurrentMaxContentHeight());
  }
 else {
    root.setAllocatedHeight(context.getMaxHeight());
  }
  if (layout == null) {
    int start=0;
    int end=tableContent.getColumnCount() - 1;
    layout=new TableAreaLayout(tableContent,layoutInfo,start,end);
  }
}","protected void initialize(){
  createRoot();
  buildTableLayoutInfo();
  root.setWidth(layoutInfo.getTableWidth());
  maxAvaWidth=layoutInfo.getTableWidth();
  rowCount=0;
  if (parent != null) {
    root.setAllocatedHeight(parent.getCurrentMaxContentHeight());
  }
 else {
    root.setAllocatedHeight(context.getMaxHeight());
  }
  if (layout == null) {
    int start=0;
    int end=tableContent.getColumnCount() - 1;
    layout=new TableAreaLayout(tableContent,layoutInfo,start,end);
  }
  addCaption(tableContent.getCaption());
}",0.959921798631476
72508,"public boolean endLine(){
  boolean ret=true;
  if (root != null && root.getChildrenCount() > 0) {
    closeLayout();
  }
  if (lineParent != null) {
    ret=lineParent.endLine();
    initialize();
  }
  return true;
}","public boolean endLine(){
  lineCount++;
  boolean ret=true;
  if (root != null && root.getChildrenCount() > 0) {
    closeLayout();
  }
  if (lineParent != null) {
    ret=lineParent.endLine();
    initialize();
  }
  return true;
}",0.966740576496674
72509,"protected void closeLayout(){
  if (root != null) {
    IStyle areaStyle=root.getStyle();
    int width=getCurrentIP() + getOffsetX() + getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_PADDING_RIGHT))+ getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_BORDER_RIGHT_WIDTH));
    root.setWidth(width);
    int height=0;
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      height=Math.max(height,child.getAllocatedHeight());
    }
    root.setContentHeight(height);
  }
  verticalAlign();
  parent.addArea(root);
}","protected void closeLayout(){
  if (root != null) {
    IStyle areaStyle=root.getStyle();
    int width=getCurrentIP() + getOffsetX() + getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_PADDING_RIGHT))+ getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_BORDER_RIGHT_WIDTH));
    if (lineCount == 1) {
      calculateSpecifiedWidth();
      if (specifiedWidth > width) {
        width=specifiedWidth;
      }
    }
    root.setWidth(width);
    int height=0;
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      height=Math.max(height,child.getAllocatedHeight());
    }
    root.setContentHeight(height);
  }
  verticalAlign();
  parent.addArea(root);
}",0.8972653362897265
72510,"public Object visitForeign(IForeignContent foreign,Object value){
  assert(false);
  return null;
}","public Object visitForeign(IForeignContent foreign,Object value){
  boolean isInline=PropertyUtil.isInlineElement(foreign);
  if (isInline) {
    return new InlineContainerLayout(context,parent,foreign);
  }
 else {
    return new BlockStackingLayout(context,parent,foreign);
  }
}",0.4
72511,"public Object visitTableGroup(ITableGroupContent group,Object value){
  return new BlockStackingLayout(context,parent,group);
}","public Object visitTableGroup(ITableGroupContent group,Object value){
  return new TableBandLayout(context,parent,group);
}",0.936
72512,"public void startForeign(IForeignContent foreign){
  if (IForeignContent.HTML_TYPE.equals(foreign.getRawType())) {
    HTML2Content.html2Content(foreign);
    java.util.Collection children=foreign.getChildren();
    if (children != null && !children.isEmpty()) {
      Iterator iter=children.iterator();
      IContent child=(IContent)iter.next();
      visitContent(child,this);
    }
    foreign.getChildren().clear();
  }
 else {
    startContent(foreign);
  }
}","public void startForeign(IForeignContent foreign){
  if (IForeignContent.HTML_TYPE.equals(foreign.getRawType())) {
    _startContainer(foreign);
    HTML2Content.html2Content(foreign);
    java.util.Collection children=foreign.getChildren();
    if (children != null && !children.isEmpty()) {
      Iterator iter=children.iterator();
      IContent child=(IContent)iter.next();
      visitContent(child,this);
    }
    foreign.getChildren().clear();
    _endContainer(foreign);
  }
 else {
    startContent(foreign);
  }
}",0.9412955465587044
72513,"public void endContainer(IContainerContent container){
  boolean isInline=PropertyUtil.isInlineElement(container);
  ContainerLayout layout;
  if (isInline) {
    if (current instanceof InlineStackingLayout) {
    }
 else {
      assert(false);
    }
  }
 else {
    if (current instanceof InlineStackingLayout) {
      while (current instanceof InlineStackingLayout) {
        current.closeLayout();
        current=current.getParent();
      }
    }
 else {
    }
  }
  current.closeLayout();
  current=current.getParent();
}","public void endContainer(IContainerContent container){
  _endContainer(container);
}",0.2520458265139116
72514,"public void startContainer(IContainerContent container){
  boolean isInline=PropertyUtil.isInlineElement(container);
  Layout layout;
  if (isInline) {
    if (current instanceof InlineStackingLayout) {
    }
 else {
      Layout lineLayout=factory.createLayoutManager(current,null);
      lineLayout.initialize();
      current=(ContainerLayout)lineLayout;
    }
  }
 else {
    if (current instanceof InlineStackingLayout) {
      while (current instanceof InlineStackingLayout) {
        current.closeLayout();
        current=current.getParent();
      }
    }
  }
  layout=factory.createLayoutManager(current,container);
  if (layout != null) {
    current=(ContainerLayout)layout;
    layout.initialize();
  }
}","public void startContainer(IContainerContent container){
  _startContainer(container);
}",0.1962732919254658
72515,"public void endCell(ICellContent cell){
  endTableContainer(cell);
}","public void endCell(ICellContent cell){
  endContainer(cell);
}",0.9618320610687024
72516,"/** 
 * Gets the baseline
 * @return the baseline
 */
public int getBaseLine(){
  return height;
}","/** 
 * Gets the baseline
 * @return the baseline
 */
public int getBaseLine(){
  if (baseLine == 0) {
    return height;
  }
 else {
    return baseLine;
  }
}",0.7596899224806202
72517,"public TextArea(ITextContent textContent,int offset,int baseLevel,int runDirection,FontInfo fontInfo){
  super(textContent);
  this.textContent=textContent;
  this.fi=fontInfo;
  height=(int)(fi.getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO);
  this.offset=offset;
  this.runDirection=runDirection;
  this.lineBreak=false;
  removePadding();
  removeBorder();
  removeMargin();
}","public TextArea(ITextContent textContent,int offset,int baseLevel,int runDirection,FontInfo fontInfo){
  super(textContent);
  this.textContent=textContent;
  this.fi=fontInfo;
  height=(int)(fi.getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO);
  baseLine=this.fi.getBaseline();
  this.offset=offset;
  this.runDirection=runDirection;
  this.lineBreak=false;
  removePadding();
  removeBorder();
  removeMargin();
}",0.9576059850374063
72518,"private int getMaxBaseLine(){
  int maxChildrenBaseLine=root.getMaxChildrenBaseLine();
  if (maxChildrenBaseLine == 0) {
    Iterator iter=root.getChildren();
    int maxChildrenBaseLineBelow=root.getMaxChildrenBaseLineBelow();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      maxChildrenBaseLine=Math.max(maxChildrenBaseLine,child.getBaseLine());
      maxChildrenBaseLineBelow=Math.max(maxChildrenBaseLineBelow,child.getAllocatedHeight() - child.getBaseLine());
    }
    root.setContentHeight(Math.max(root.getContentHeight(),maxChildrenBaseLine + maxChildrenBaseLineBelow));
    root.setMaxChildrenBaseLine(maxChildrenBaseLine);
    root.setMaxChildrenBaseLineBelow(maxChildrenBaseLineBelow);
  }
  return maxChildrenBaseLine;
}","private int getMaxBaseLine(){
  int maxChildrenBaseLine=root.getMaxChildrenBaseLine();
  if (maxChildrenBaseLine == 0) {
    Iterator iter=root.getChildren();
    int maxChildrenBaseLineBelow=root.getMaxChildrenBaseLineBelow();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      maxChildrenBaseLine=Math.max(maxChildrenBaseLine,child.getBaseLine());
      maxChildrenBaseLineBelow=Math.max(maxChildrenBaseLineBelow,child.getAllocatedHeight() - child.getBaseLine());
    }
    root.setContentHeight(Math.max(root.getContentHeight(),maxChildrenBaseLine + maxChildrenBaseLineBelow));
    root.setBaseLine(maxChildrenBaseLine);
    root.setMaxChildrenBaseLine(maxChildrenBaseLine);
    root.setMaxChildrenBaseLineBelow(maxChildrenBaseLineBelow);
  }
  return maxChildrenBaseLine;
}",0.9728363866077068
72519,"public TextArea getNextArea(int maxLineWidth){
  if (!hasNextArea()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TextArea textArea=getNextTextArea(maxLineWidth);
  offset+=textArea.getTextLength();
  System.out.print(textArea.getText());
  System.out.print(""String_Node_Str"" + offset + ""String_Node_Str"");
  return textArea;
}","public TextArea getNextArea(int maxLineWidth){
  if (!hasNextArea()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TextArea textArea=getNextTextArea(maxLineWidth);
  offset+=textArea.getTextLength();
  return textArea;
}",0.8013937282229965
72520,"public void start(){
  super.start();
  sum=0D;
}","public void start(){
  super.start();
  this.hasNotNullValue=false;
  sum=0D;
}",0.765625
72521,"public void testTotalSum() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_SUM_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(1,ag.getParameterDefn().length);
  assertTrue(!ag.getParameterDefn()[0].isOptional());
  ac.start();
  for (int i=0; i < doubleArray1.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray1[i])});
  }
  ac.finish();
  assertEquals(new Double(82.0),ac.getValue());
  ac.start();
  for (int i=0; i < doubleArray2.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray2[i])});
  }
  ac.finish();
  assertEquals(new Double(69.0),ac.getValue());
  ac.start();
  for (int i=0; i < str1.length; i++) {
    ac.onRow(new Object[]{str1[i]});
  }
  ac.finish();
  assertEquals(new Double(69.0),ac.getValue());
  ac.start();
  ac.finish();
  assertEquals(new Double(0D),ac.getValue());
  ac.start();
  try {
    ac.getValue();
    assertTrue(false);
  }
 catch (  RuntimeException e) {
    assertTrue(true);
  }
  ac.start();
  try {
    for (int i=0; i < str2.length; i++) {
      ac.onRow(new Object[]{str2[i]});
    }
    fail();
  }
 catch (  DataException e) {
    assertTrue(true);
  }
  ac.finish();
  ac.start();
  for (int i=0; i < bigDecimalArray.length; i++) {
    ac.onRow(new Object[]{bigDecimalArray[i]});
  }
  ac.finish();
  assertEquals(new BigDecimal(""String_Node_Str""),ac.getValue());
}","public void testTotalSum() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_SUM_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(1,ag.getParameterDefn().length);
  assertTrue(!ag.getParameterDefn()[0].isOptional());
  ac.start();
  for (int i=0; i < doubleArray1.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray1[i])});
  }
  ac.finish();
  assertEquals(new Double(82.0),ac.getValue());
  ac.start();
  for (int i=0; i < doubleArray2.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray2[i])});
  }
  ac.finish();
  assertEquals(new Double(69.0),ac.getValue());
  ac.start();
  for (int i=0; i < str1.length; i++) {
    ac.onRow(new Object[]{str1[i]});
  }
  ac.finish();
  assertEquals(new Double(69.0),ac.getValue());
  ac.start();
  ac.finish();
  assertEquals(null,ac.getValue());
  ac.start();
  try {
    ac.getValue();
    assertTrue(false);
  }
 catch (  RuntimeException e) {
    assertTrue(true);
  }
  ac.start();
  try {
    for (int i=0; i < str2.length; i++) {
      ac.onRow(new Object[]{str2[i]});
    }
    fail();
  }
 catch (  DataException e) {
    assertTrue(true);
  }
  ac.finish();
  ac.start();
  for (int i=0; i < bigDecimalArray.length; i++) {
    ac.onRow(new Object[]{bigDecimalArray[i]});
  }
  ac.finish();
  assertEquals(new BigDecimal(""String_Node_Str""),ac.getValue());
}",0.9946666666666668
72522,"/** 
 * Test whether all the column bindings exist.
 * @param bindingName
 * @param binding
 * @throws DataException
 */
private void checkColumnBindingExist(String bindingName,String referName,List binding,IBaseQueryDefinition baseQueryDefn) throws DataException {
  if (ScriptConstants.ROW_NUM_KEYWORD.equals(bindingName) || ScriptConstants.OUTER_RESULT_KEYWORD.equals(bindingName)) {
    return;
  }
  for (int i=0; i < binding.size(); i++) {
    if (bindingName.equals(binding.get(i).toString()))     return;
  }
  this.validateInParentQuery(bindingName,baseQueryDefn,referName);
}","/** 
 * Test whether all the column bindings exist.
 * @param bindingName
 * @param binding
 * @throws DataException
 */
private void checkColumnBindingExist(String bindingName,String referName,List binding,IBaseQueryDefinition baseQueryDefn) throws DataException {
  if (ScriptConstants.ROW_NUM_KEYWORD.equals(referName) || ScriptConstants.OUTER_RESULT_KEYWORD.equals(referName)) {
    return;
  }
  for (int i=0; i < binding.size(); i++) {
    if (referName.equals(binding.get(i).toString()))     return;
  }
  this.validateInParentQuery(bindingName,baseQueryDefn,referName);
}",0.9690721649484536
72523,"private void validateInParentQuery(String bindingName,IBaseQueryDefinition baseQueryDefn,String name) throws DataException {
  String expr=findExpression(bindingName,name,baseQueryDefn.getParentQuery());
  if (expr == null) {
    throw new DataException(ResourceConstants.COLUMN_BINDING_REFER_TO_INEXIST_BINDING,new Object[]{bindingName,name});
  }
 else   if (ExpressionUtil.hasAggregation(expr)) {
    throw new DataException(ResourceConstants.COLUMN_BINDING_REFER_TO_AGGREGATION_COLUMN_BINDING_IN_PARENT_QUERY,bindingName);
  }
}","private void validateInParentQuery(String bindingName,IBaseQueryDefinition baseQueryDefn,String name) throws DataException {
  if (baseQueryDefn == null)   throw new DataException(ResourceConstants.COLUMN_BINDING_REFER_TO_INEXIST_BINDING,new Object[]{bindingName,name});
  String expr=findExpression(bindingName,name,baseQueryDefn.getParentQuery());
  if (expr == null) {
    throw new DataException(ResourceConstants.COLUMN_BINDING_REFER_TO_INEXIST_BINDING,new Object[]{bindingName,name});
  }
 else   if (ExpressionUtil.hasAggregation(expr)) {
    throw new DataException(ResourceConstants.COLUMN_BINDING_REFER_TO_AGGREGATION_COLUMN_BINDING_IN_PARENT_QUERY,bindingName);
  }
}",0.7504132231404959
72524,"/** 
 * @param a
 * @param b
 * @return
 */
private BigDecimal[] convert(Object a,Object b) throws DataException {
  BigDecimal[] args=new BigDecimal[2];
  args[0]=(a instanceof Number) ? BigDecimal.valueOf(((Number)a).doubleValue()) : (BigDecimal)a;
  args[1]=(b instanceof Number) ? BigDecimal.valueOf(((Number)b).doubleValue()) : (BigDecimal)b;
  return args;
}","/** 
 * @param a
 * @param b
 * @return
 */
private BigDecimal[] convert(Object a,Object b) throws DataException {
  BigDecimal[] args=new BigDecimal[2];
  args[0]=(!(a instanceof BigDecimal)) ? BigDecimal.valueOf(((Number)a).doubleValue()) : (BigDecimal)a;
  args[1]=(!(b instanceof BigDecimal)) ? BigDecimal.valueOf(((Number)b).doubleValue()) : (BigDecimal)b;
  return args;
}",0.9487870619946092
72525,"/** 
 * Create a URLClassLoader based on the given file list
 * @param jdbcDriverFiles a File List
 * @return URLClassLoader
 */
private static URLClassLoader createClassLoader(List jdbcDriverFiles){
  URL[] urlList=new URL[jdbcDriverFiles.size()];
  for (int i=0; i < jdbcDriverFiles.size(); i++) {
    try {
      urlList[i]=new URL(""String_Node_Str"",null,((File)jdbcDriverFiles.get(i)).getAbsolutePath());
    }
 catch (    MalformedURLException e) {
      ExceptionHandler.showException(PlatformUI.getWorkbench().getDisplay().getActiveShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
    }
  }
  URLClassLoader urlClassLoader=new URLClassLoader(urlList,ClassLoader.getSystemClassLoader());
  return urlClassLoader;
}","/** 
 * Create a URLClassLoader based on the given file list
 * @param jdbcDriverFiles a File List
 * @return URLClassLoader
 */
private static URLClassLoader createClassLoader(File jdbcDriverFile){
  URL[] urlList=new URL[1];
  try {
    urlList[0]=new URL(""String_Node_Str"",null,jdbcDriverFile.getAbsolutePath());
  }
 catch (  MalformedURLException e) {
    ExceptionHandler.showException(PlatformUI.getWorkbench().getDisplay().getActiveShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
  URLClassLoader urlClassLoader=new URLClassLoader(urlList,ClassLoader.getSystemClassLoader());
  return urlClassLoader;
}",0.8782918149466192
72526,"/** 
 * Found drivers in the Jar file List
 * @param file
 * @return a List of JDBCDriverInformation
 */
public static void getJdbcDriverFromFile(List fileList){
  if (failLoadFileList != null) {
    boolean duplicated;
    for (int i=0; i < failLoadFileList.size(); i++) {
      duplicated=false;
      File failToLoadFile=(File)failLoadFileList.get(i);
      for (int j=0; j < fileList.size(); j++) {
        if (failToLoadFile.getName().equals(((File)fileList.get(j)).getName())) {
          duplicated=true;
          break;
        }
      }
      if (!duplicated)       fileList.add(failToLoadFile);
    }
  }
  URLClassLoader urlClassLoader=createClassLoader(fileList);
  jdbcDriverInfos.addAll(getJDBCDriverInfoList(fileList,urlClassLoader));
}","/** 
 * Found drivers in the Jar file List
 * @param file
 * @return a List of JDBCDriverInformation
 */
public static void getJdbcDriverFromFile(List fileList){
  if (failLoadFileList != null) {
    boolean duplicated;
    for (int i=0; i < failLoadFileList.size(); i++) {
      duplicated=false;
      File failToLoadFile=(File)failLoadFileList.get(i);
      for (int j=0; j < fileList.size(); j++) {
        if (failToLoadFile.getName().equals(((File)fileList.get(j)).getName())) {
          duplicated=true;
          break;
        }
      }
      if (!duplicated)       fileList.add(failToLoadFile);
    }
  }
  jdbcDriverInfos.addAll(getJDBCDriverInfoList(fileList));
}",0.9467787114845938
72527,"/** 
 * Get the corresponding drivers list by the given JarFile
 * @param JarFile jar
 * @return List that contains the corresponding drivers
 */
public static List getDriverByJar(JarFile jar){
  List drivers=null;
  if (jar == null)   return drivers;
  List jarList=new ArrayList(1);
  jarList.add(new File(jar.getFilePath()));
  URLClassLoader urlClassLoader=createClassLoader(jarList);
  drivers=getJDBCDriverInfoList(jarList,urlClassLoader);
  return drivers;
}","/** 
 * Get the corresponding drivers list by the given JarFile
 * @param JarFile jar
 * @return List that contains the corresponding drivers
 */
public static List getDriverByJar(JarFile jar){
  List drivers=null;
  if (jar == null)   return drivers;
  List jarList=new ArrayList(1);
  jarList.add(new File(jar.getFilePath()));
  drivers=getJDBCDriverInfoList(jarList);
  return drivers;
}",0.912280701754386
72528,"/** 
 * Get a List of JDBCDriverInformations loaded from the given fileList
 * @param fileList the File List
 * @param urlClassLoader
 * @return List of JDBCDriverInformation
 */
private static List getJDBCDriverInfoList(List fileList,URLClassLoader urlClassLoader){
  List driverList=new ArrayList();
  for (int i=0; i < fileList.size(); i++) {
    String[] resourceNames=getAllResouceNames((File)fileList.get(i));
    List subDriverList=new ArrayList();
    for (int j=0; j < resourceNames.length; j++) {
      String resourceName=resourceNames[j];
      if (resourceName.endsWith(""String_Node_Str"")) {
        resourceName=modifyResourceName(resourceName);
        Class aClass=loadClass(urlClassLoader,resourceName);
        if (isImplementedDriver(aClass)) {
          JDBCDriverInformation info=JDBCDriverInformation.newInstance(aClass);
          if (info != null) {
            driverList.add(info);
            subDriverList.add(info);
          }
        }
      }
    }
    if (subDriverList.isEmpty()) {
      if (!failLoadFileList.contains(fileList.get(i)))       failLoadFileList.add(fileList.get(i));
    }
 else {
      if (failLoadFileList.contains(fileList.get(i)))       failLoadFileList.remove(fileList.get(i));
    }
    file2Drivers.put(((File)fileList.get(i)).getName(),subDriverList);
  }
  return driverList;
}","/** 
 * Get a List of JDBCDriverInformations loaded from the given fileList
 * @param fileList the File List
 * @param urlClassLoader
 * @return List of JDBCDriverInformation
 */
private static List getJDBCDriverInfoList(List fileList){
  List driverList=new ArrayList();
  for (int i=0; i < fileList.size(); i++) {
    URLClassLoader urlClassLoader=createClassLoader((File)fileList.get(i));
    String[] resourceNames=getAllResouceNames((File)fileList.get(i));
    List subDriverList=new ArrayList();
    for (int j=0; j < resourceNames.length; j++) {
      String resourceName=resourceNames[j];
      if (resourceName.endsWith(""String_Node_Str"")) {
        resourceName=modifyResourceName(resourceName);
        Class aClass=loadClass(urlClassLoader,resourceName);
        if (isImplementedDriver(aClass)) {
          JDBCDriverInformation info=JDBCDriverInformation.newInstance(aClass);
          if (info != null) {
            driverList.add(info);
            subDriverList.add(info);
          }
        }
      }
    }
    if (subDriverList.isEmpty()) {
      if (!failLoadFileList.contains(fileList.get(i)))       failLoadFileList.add(fileList.get(i));
    }
 else {
      if (failLoadFileList.contains(fileList.get(i)))       failLoadFileList.remove(fileList.get(i));
    }
    file2Drivers.put(((File)fileList.get(i)).getName(),subDriverList);
  }
  return driverList;
}",0.9234167893961708
72529,"/** 
 * Search files under ""drivers"" directory for JDBC drivers. Found drivers are added to jdbdDriverInfos as JDBCDriverInformation instances
 */
private static void addDriversFromFiles(){
  List jdbcDriverFiles=JdbcDriverConfigUtil.getDriverFiles();
  if (jdbcDriverFiles == null || jdbcDriverFiles.size() == 0)   return;
  URLClassLoader urlClassLoader=createClassLoader(jdbcDriverFiles);
  List driverList=getJDBCDriverInfoList(jdbcDriverFiles,urlClassLoader);
  jdbcDriverInfos.addAll(driverList);
  for (int i=0; i < driverList.size(); i++) {
    JDBCDriverInformation info=(JDBCDriverInformation)driverList.get(i);
    driverNameMap.put(info.getDriverClassName(),info);
  }
}","/** 
 * Search files under ""drivers"" directory for JDBC drivers. Found drivers are added to jdbdDriverInfos as JDBCDriverInformation instances
 */
private static void addDriversFromFiles(){
  List jdbcDriverFiles=JdbcDriverConfigUtil.getDriverFiles();
  if (jdbcDriverFiles == null || jdbcDriverFiles.size() == 0)   return;
  List driverList=getJDBCDriverInfoList(jdbcDriverFiles);
  jdbcDriverInfos.addAll(driverList);
  for (int i=0; i < driverList.size(); i++) {
    JDBCDriverInformation info=(JDBCDriverInformation)driverList.get(i);
    driverNameMap.put(info.getDriverClassName(),info);
  }
}",0.87743950039032
72530,"public Object visitTableBand(ITableBandContent tableBand,Object value){
  return new BlockStackingLayout(context,parent,tableBand);
}","public Object visitTableBand(ITableBandContent tableBand,Object value){
  return new TableBandLayout(context,parent,tableBand);
}",0.9389312977099236
72531,"/** 
 * @param stream
 * @param consumer
 */
public SaxParser(XMLDataInputStream stream,ISaxParserConsumer consumer){
  super(stream,consumer);
}","/** 
 * @param stream
 * @param consumer
 */
public SaxParser(XMLDataInputStream stream,ISaxParserConsumer consumer,boolean useNameSpace){
  super(stream,consumer,useNameSpace);
}",0.8950617283950617
72532,"/** 
 * Returns a List jdbc Drivers. The Drivers are searched from predefined directories in the DTE plug-in. Currently it is expected that the jdbc drivers are in the ""drivers"" directory of the DTE oda.jdbc plug-in.
 * @param driverName
 * @return
 */
public static List getJdbcDriversFromODADir(String driverName){
  if (jdbcDriverInfos != null) {
    if (!driverNameMap.containsValue(jdbcDriverInfos.get(0)))     jdbcDriverInfos.remove(0);
    if (JdbcDriverManagerDialog.needResetPreferences()) {
      resetPreferences();
      JdbcDriverManagerDialog.resetDriverChangedStatus();
    }
    return jdbcDriverInfos;
  }
  jdbcDriverInfos=new ArrayList();
  failLoadFileList=new ArrayList();
  driverNameMap=new HashMap();
  file2Drivers=new Hashtable();
  addDriversFromFiles();
  final String ODBCJDBCDriverName=""String_Node_Str"";
  JDBCDriverInformation ODBCJDBCInfo=null;
  JDBCDriverInformation driverInfos[]=JDBCDriverInfoManager.getDrivers();
  for (int i=0; i < driverInfos.length; i++) {
    JDBCDriverInformation newInfo=driverInfos[i];
    JDBCDriverInformation existing=(JDBCDriverInformation)driverNameMap.get(newInfo.getDriverClassName());
    if (existing == null) {
      if (newInfo.getDriverClassName().equalsIgnoreCase(ODBCJDBCDriverName)) {
        ODBCJDBCInfo=newInfo;
        continue;
      }
      jdbcDriverInfos.add(newInfo);
      driverNameMap.put(newInfo.getDriverClassName(),newInfo);
    }
 else {
      existing.setDisplayName(newInfo.getDisplayName());
      existing.setUrlFormat(newInfo.getUrlFormat());
    }
  }
  if (ODBCJDBCInfo != null) {
    jdbcDriverInfos.add(ODBCJDBCInfo);
    driverNameMap.put(ODBCJDBCInfo.getDriverClassName(),ODBCJDBCInfo);
  }
  resetPreferences();
  return jdbcDriverInfos;
}","/** 
 * Returns a List jdbc Drivers. The Drivers are searched from predefined directories in the DTE plug-in. Currently it is expected that the jdbc drivers are in the ""drivers"" directory of the DTE oda.jdbc plug-in.
 * @param driverName
 * @return
 */
public static List getJdbcDriversFromODADir(String driverName){
  if (jdbcDriverInfos != null) {
    if (!driverNameMap.containsValue(jdbcDriverInfos.get(0)))     jdbcDriverInfos.remove(0);
    if (JdbcDriverManagerDialog.needResetPreferences()) {
      resetPreferences();
      JdbcDriverManagerDialog.resetDriverChangedStatus();
    }
    return getDriverList();
  }
  jdbcDriverInfos=new ArrayList();
  failLoadFileList=new ArrayList();
  driverNameMap=new HashMap();
  file2Drivers=new Hashtable();
  addDriversFromFiles();
  final String ODBCJDBCDriverName=""String_Node_Str"";
  JDBCDriverInformation ODBCJDBCInfo=null;
  JDBCDriverInformation driverInfos[]=JDBCDriverInfoManager.getDrivers();
  for (int i=0; i < driverInfos.length; i++) {
    JDBCDriverInformation newInfo=driverInfos[i];
    JDBCDriverInformation existing=(JDBCDriverInformation)driverNameMap.get(newInfo.getDriverClassName());
    if (existing == null) {
      if (newInfo.getDriverClassName().equalsIgnoreCase(ODBCJDBCDriverName)) {
        ODBCJDBCInfo=newInfo;
        continue;
      }
      jdbcDriverInfos.add(newInfo);
      driverNameMap.put(newInfo.getDriverClassName(),newInfo);
    }
 else {
      existing.setDisplayName(newInfo.getDisplayName());
      existing.setUrlFormat(newInfo.getUrlFormat());
    }
  }
  if (ODBCJDBCInfo != null) {
    jdbcDriverInfos.add(ODBCJDBCInfo);
    driverNameMap.put(ODBCJDBCInfo.getDriverClassName(),ODBCJDBCInfo);
  }
  resetPreferences();
  return getDriverList();
}",0.982808022922636
72533,"/** 
 * @return
 */
public static List getDriverList(){
  return jdbcDriverInfos;
}","/** 
 * @return
 */
public static List getDriverList(){
  HashSet jdbcDriverSet=new HashSet();
  for (int i=0; i < jdbcDriverInfos.size(); i++) {
    jdbcDriverSet.add(jdbcDriverInfos.get(i));
  }
  return new ArrayList(jdbcDriverSet);
}",0.38125
72534,"public static IArea createTextArea(ITextContent content,String text,FontInfo fi){
  return new TextArea(content,text,fi);
}","public static IArea createTextArea(ITextContent textContent,int offset,int baseLevel,int runDirection,FontInfo fontInfo){
  return new TextArea(textContent,offset,baseLevel,runDirection,fontInfo);
}",0.6978193146417445
72535,"public String getText(){
  if (blankLine) {
    return null;
  }
 else {
    this.text=textContent.getText().substring(offset,offset + textLength);
    return text;
  }
}","/** 
 * Gets the text in visual order.
 * @param text the original text.
 * @return the text in visual order.
 */
public String getText(){
  calculateText();
  if (runDirection == Bidi.DIRECTION_LEFT_TO_RIGHT) {
    return text;
  }
 else {
    return flip(text);
  }
}",0.337129840546697
72536,"protected void resolveTotalPage(IContentEmitter emitter){
  IContent con=context.getUnresolvedContent();
  if (!(con instanceof IAutoTextContent)) {
    return;
  }
  IAutoTextContent totalPageContent=(IAutoTextContent)con;
  if (null != totalPageContent) {
    NumberFormatter nf=new NumberFormatter();
    String patternStr=totalPageContent.getComputedStyle().getNumberFormat();
    nf.applyPattern(patternStr);
    long totalPageCount=context.totalPage > 0 ? context.totalPage : context.pageCount;
    totalPageContent.setText(nf.format(totalPageCount));
    AbstractArea totalPageArea=null;
    ChunkGenerator cg=new ChunkGenerator(context.getFontManager(),totalPageContent,true,true);
    if (cg.hasMore()) {
      Chunk c=cg.getNext();
      Dimension d=new Dimension((int)(c.getFontInfo().getWordWidth(c.getText()) * PDFConstants.LAYOUT_TO_PDF_RATIO),(int)(c.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      totalPageArea=(AbstractArea)AreaFactory.createTextArea(totalPageContent,c.getText(),c.getFontInfo());
      totalPageArea.setWidth(Math.min(context.getMaxWidth(),d.getWidth()));
      totalPageArea.setHeight(Math.min(context.getMaxHeight(),d.getHeight()));
    }
    totalPageContent.setExtension(IContent.LAYOUT_EXTENSION,totalPageArea);
    emitter.startAutoText(totalPageContent);
  }
}","protected void resolveTotalPage(IContentEmitter emitter){
  IContent con=context.getUnresolvedContent();
  if (!(con instanceof IAutoTextContent)) {
    return;
  }
  IAutoTextContent totalPageContent=(IAutoTextContent)con;
  if (null != totalPageContent) {
    NumberFormatter nf=new NumberFormatter();
    String patternStr=totalPageContent.getComputedStyle().getNumberFormat();
    nf.applyPattern(patternStr);
    long totalPageCount=context.totalPage > 0 ? context.totalPage : context.pageCount;
    totalPageContent.setText(nf.format(totalPageCount));
    AbstractArea totalPageArea=null;
    ChunkGenerator cg=new ChunkGenerator(context.getFontManager(),totalPageContent,true,true);
    if (cg.hasMore()) {
      Chunk c=cg.getNext();
      Dimension d=new Dimension((int)(c.getFontInfo().getWordWidth(c.getText()) * PDFConstants.LAYOUT_TO_PDF_RATIO),(int)(c.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      totalPageArea=(AbstractArea)AreaFactory.createTextArea(totalPageContent,c.getFontInfo(),false);
      totalPageArea.setWidth(Math.min(context.getMaxWidth(),d.getWidth()));
      totalPageArea.setHeight(Math.min(context.getMaxHeight(),d.getHeight()));
    }
    totalPageContent.setExtension(IContent.LAYOUT_EXTENSION,totalPageArea);
    emitter.startAutoText(totalPageContent);
  }
}",0.98868778280543
72537,"private TextArea getNextTextArea(int maxLineWidth){
  if (null != wordVestige) {
    TextArea textArea=new TextArea(textContent,offset,lineBaseLevel,lineRunDirection,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,wordVestige);
    return textArea;
  }
  if (null != remainWord) {
    TextArea textArea=new TextArea(textContent,offset,lineBaseLevel,lineRunDirection,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,remainWord);
    remainWord=null;
    return textArea;
  }
  if (null == remainWords || !remainWords.hasWord()) {
    Chunk chunk=remainChunks.getNext();
    if (chunk == Chunk.HARD_LINE_BREAK) {
      FontHandler handler=new FontHandler(fontManager,textContent,false);
      TextArea textArea=new TextArea(textContent,handler.getFontInfo());
      textArea.setTextLength(1);
      hasLineBreak=true;
      return textArea;
    }
    fontInfo=chunk.getFontInfo();
    lineBaseLevel=chunk.getBaseLevel();
    lineRunDirection=chunk.getRunDirection();
    remainWords=new WordRecognizerWrapper(chunk.getText(),locale);
  }
  TextArea textArea=new TextArea(textContent,offset,lineBaseLevel,lineRunDirection,fontInfo);
  textArea.setMaxWidth(maxLineWidth);
  textArea.setWidth(0);
  addWordsIntoTextArea(textArea,remainWords);
  return textArea;
}","private TextArea getNextTextArea(int maxLineWidth){
  if (null != wordVestige) {
    TextArea textArea=(TextArea)AreaFactory.createTextArea(textContent,offset,lineBaseLevel,lineRunDirection,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,wordVestige);
    return textArea;
  }
  if (null != remainWord) {
    TextArea textArea=(TextArea)AreaFactory.createTextArea(textContent,offset,lineBaseLevel,lineRunDirection,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,remainWord);
    remainWord=null;
    return textArea;
  }
  if (null == remainWords || !remainWords.hasWord()) {
    Chunk chunk=remainChunks.getNext();
    if (chunk == Chunk.HARD_LINE_BREAK) {
      FontHandler handler=new FontHandler(fontManager,textContent,false);
      TextArea textArea=(TextArea)AreaFactory.createTextArea(textContent,handler.getFontInfo(),true);
      textArea.setTextLength(1);
      hasLineBreak=true;
      return textArea;
    }
    fontInfo=chunk.getFontInfo();
    lineBaseLevel=chunk.getBaseLevel();
    lineRunDirection=chunk.getRunDirection();
    remainWords=new WordRecognizerWrapper(chunk.getText(),locale);
  }
  TextArea textArea=(TextArea)AreaFactory.createTextArea(textContent,offset,lineBaseLevel,lineRunDirection,fontInfo);
  textArea.setMaxWidth(maxLineWidth);
  textArea.setWidth(0);
  addWordsIntoTextArea(textArea,remainWords);
  return textArea;
}",0.7977645826056584
72538,"public void testFixedTableLayout() throws EngineException {
  String designFile=""String_Node_Str"";
  List pageAreas=getpageAreas(designFile);
  assertEquals(1,pageAreas.size());
  PageArea pageArea=(PageArea)pageAreas.get(0);
  ContainerArea body=(ContainerArea)pageArea.getBody();
  assertTrue(body.getChildrenCount() == 11);
  Iterator iter=body.getChildren();
  TableArea table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,288,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,108,180});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,177,111});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,72,216});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{108,108,216});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,208,80});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{432,0,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{216,432,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{216,432,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{216,216,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{50,10,40});
}","public void testFixedTableLayout() throws EngineException {
  String designFile=""String_Node_Str"";
  List pageAreas=getpageAreas(designFile);
  assertEquals(1,pageAreas.size());
  PageArea pageArea=(PageArea)pageAreas.get(0);
  ContainerArea body=(ContainerArea)pageArea.getBody();
  assertTrue(body.getChildrenCount() == 11);
  Iterator iter=body.getChildren();
  TableArea table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,288,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,108,180});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,177,111});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,72,216});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{108,108,216});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,208,80});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{0,432,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{216,432,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{216,432,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{216,216});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{50,10,40});
}",0.9976762199845082
72539,"protected boolean isPagedExecutor(){
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    return !needPaginate();
  }
  boolean paged=true;
  IRenderOption renderOption=executionContext.getRenderOption();
  HTMLRenderOption htmlRenderOption=new HTMLRenderOption(renderOption);
  boolean htmlPagination=htmlRenderOption.getHtmlPagination();
  if (!htmlPagination) {
    paged=false;
  }
  return paged;
}","protected boolean isPagedExecutor(){
  boolean paged=true;
  IRenderOption renderOption=executionContext.getRenderOption();
  HTMLRenderOption htmlRenderOption=new HTMLRenderOption(renderOption);
  boolean htmlPagination=htmlRenderOption.getHtmlPagination();
  if (!htmlPagination) {
    paged=false;
  }
  return paged;
}",0.8667563930013459
72540,"void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      layoutPageHandler.addPageHandler(new LayoutPageHandler());
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}","void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      emitter=new PDFLayoutEmitter(emitter,renderOptions,executionContext.getLocale(),0l);
    }
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      layoutPageHandler.addPageHandler(new LayoutPageHandler());
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}",0.9670896114195084
72541,"public static IReportLayoutEngine createLayoutEngine(String paginationType){
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(paginationType)) {
    try {
      Class clazz=Class.forName(""String_Node_Str"");
      Object engine=clazz.newInstance();
      return (IReportLayoutEngine)engine;
    }
 catch (    Exception ex) {
    }
    return null;
  }
  return new HTMLReportLayoutEngine();
}","public static IReportLayoutEngine createLayoutEngine(String paginationType){
  return new HTMLReportLayoutEngine();
}",0.4579256360078277
72542,"public void openPage(IContent[] contentList,IContentEmitter emitter){
}","public void openPage(INode[] nodeList){
}",0.6607142857142857
72543,"public void closePage(IContent[] contentList,IContentEmitter emitter){
}","public void closePage(INode[] nodeList){
}",0.6666666666666666
72544,"public void flush(){
  if (page != null) {
    page.flush();
    pageBreakEvent();
    if (!page.finished) {
      context.setPageNumber(context.getPageNumber() + 1);
      context.setPageCount(context.getPageCount() + 1);
    }
    generator.reset();
    context.removeLayoutHint();
    context.clearPageHint();
    currentNode=null;
  }
}","public void flush(){
  if (page != null) {
    context.addTableColumnHints(columnHints);
    page.flush();
    pageBreakEvent();
    if (!page.finished) {
      context.setPageNumber(context.getPageNumber() + 1);
      context.setPageCount(context.getPageCount() + 1);
    }
    generator.reset();
    context.removeLayoutHint();
    context.clearPageHint();
    currentNode=null;
  }
}",0.9366391184573004
72545,"protected void pageBreakEvent(){
  context.setPageHint(generator.getPageHint());
  context.addTableColumnHints(columnHints);
  long pageNumber=context.getPageNumber();
  ILayoutPageHandler pageHandler=context.getLayoutEngine().getPageHandler();
  if (pageHandler != null) {
    pageHandler.onPage(pageNumber,context);
  }
}","protected void pageBreakEvent(){
  context.setPageHint(generator.getPageHint());
  long pageNumber=context.getPageNumber();
  ILayoutPageHandler pageHandler=context.getLayoutEngine().getPageHandler();
  if (pageHandler != null) {
    pageHandler.onPage(pageNumber,context);
  }
}",0.9269102990033222
72546,"public void openPage(IContent[] contentList,IContentEmitter emitter){
}","public void openPage(INode[] nodeList){
}",0.6607142857142857
72547,"public void closePage(IContent[] contentList,IContentEmitter emitter){
}","public void closePage(INode[] nodeList){
}",0.6666666666666666
72548,"public void addTableColumnHint(TableColumnHint hint){
  columnHints.add(hint);
}","public void addTableColumnHint(TableColumnHint hint){
  context.addTableColumnHint(hint);
}",0.8771929824561403
72549,"public void openPage(IContent[] contentList,IContentEmitter emitter){
  int length=contentList.length;
  if (length > 0) {
    for (int i=length - 1; i >= 0; i--) {
      startContainer(contentList[i],false,emitter,true);
    }
  }
}","public void openPage(INode[] nodeList){
  int length=nodeList.length;
  if (length > 0) {
    for (int i=length - 1; i >= 0; i--) {
      AbstractNode node=(AbstractNode)nodeList[i];
      startContainer(node.content,false,node.emitter,true);
    }
  }
}",0.7145790554414785
72550,"protected void endCell(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  AbstractNode current=(AbstractNode)currentNode;
  if (!current.isFirst) {
    current.setFinished(false);
  }
 else {
    current.setFinished(finished);
  }
  if (currentNode.isStarted()) {
    currentNode.end();
  }
  currentNode=currentNode.getParent();
}","protected void endCell(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  AbstractNode current=(AbstractNode)currentNode;
  if (!current.isFirst) {
    current.setFinished(false);
  }
 else {
    current.setFinished(finished);
  }
  if (currentNode.isStarted()) {
    currentNode.end();
  }
 else {
  }
  currentNode=currentNode.getParent();
}",0.9835164835164836
72551,"public void closePage(IContent[] contentList,IContentEmitter emitter){
  int length=contentList.length;
  if (length > 0) {
    for (int i=0; i < length; i++) {
      endContainer(contentList[i],false,emitter,true);
    }
  }
  finished=true;
}","public void closePage(INode[] nodeList){
  int length=nodeList.length;
  if (length > 0) {
    for (int i=0; i < length; i++) {
      AbstractNode node=(AbstractNode)nodeList[i];
      endContainer(node.content,false,node.emitter,true);
    }
  }
  finished=true;
}",0.7269155206286837
72552,"protected void pageBreakEvent(){
  context.setPageHint(generator.getPageHint());
  context.addTableColumnHints(this.columnHints);
  long pageNumber=context.getPageNumber();
  ILayoutPageHandler pageHandler=context.getLayoutEngine().getPageHandler();
  if (pageHandler != null) {
    pageHandler.onPage(pageNumber,context);
  }
}","protected void pageBreakEvent(){
  context.setPageHint(generator.getPageHint());
  long pageNumber=context.getPageNumber();
  ILayoutPageHandler pageHandler=context.getLayoutEngine().getPageHandler();
  if (pageHandler != null) {
    pageHandler.onPage(pageNumber,context);
  }
}",0.9192751235584844
72553,"public void openPage(IContent[] contentList,IContentEmitter emitter);",public void openPage(INode[] nodeList);,0.6481481481481481
72554,"public void closePage(IContent[] contentList,IContentEmitter emitter);",public void closePage(INode[] nodeList);,0.6545454545454545
72555,"protected void closeLayout(){
  if (root == null) {
    return;
  }
  IStyle areaStyle=root.getStyle();
  int height=getCurrentBP() + getOffsetY() + getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_PADDING_BOTTOM))+ getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_WIDTH));
  root.setHeight(height);
  if (parent != null) {
    parent.addArea(root);
  }
 else {
    content.setExtension(IContent.LAYOUT_EXTENSION,root);
  }
}","protected void closeLayout(){
  if (root == null) {
    return;
  }
  IStyle areaStyle=root.getStyle();
  int height=getCurrentBP() + getOffsetY() + getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_PADDING_BOTTOM))+ getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_WIDTH));
  calculateSpecifiedHeight();
  if (specifiedHeight > height) {
    CSSValue verticalAlign=areaStyle.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
    if (IStyle.BOTTOM_VALUE.equals(verticalAlign) || IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
      int offset=specifiedHeight - height;
      if (IStyle.BOTTOM_VALUE.equals(verticalAlign)) {
        Iterator iter=root.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset);
        }
      }
 else       if (IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
        Iterator iter=root.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedPosition(child.getAllocatedX(),child.getAllocatedY() + offset / 2);
        }
      }
    }
    height=specifiedHeight;
  }
  root.setHeight(height);
  if (parent != null) {
    parent.addArea(root);
  }
 else {
    content.setExtension(IContent.LAYOUT_EXTENSION,root);
  }
}",0.5005405405405405
72556,"/** 
 * Adds default connection profile property provider service, if none is already defined in the appContext object. This will trigger the use of the DTP ODA framework service to apply  the connection property values defined in an external connection profile store,  for opening a connection.
 * @param appContext    application context object passed thru into the data engine
 * @return          updated application context object for passing thruto the DTP oda.consumer 
 */
private Map addProfileProviderService(Map appContext){
  Map providerAppContext=appContext;
  if (providerAppContext == null)   providerAppContext=new HashMap();
  if (!providerAppContext.containsKey(IPropertyProvider.ODA_CONSUMER_ID)) {
    providerAppContext.put(IPropertyProvider.ODA_CONSUMER_ID,DTP_CONN_PROFILE_APPL_ID);
    if (getLogger().isLoggable(Level.INFO))     getLogger().logp(Level.INFO,sm_className,""String_Node_Str"",""String_Node_Str"" + DTP_CONN_PROFILE_APPL_ID);
  }
  return providerAppContext;
}","/** 
 * Adds default connection profile property provider service, if none is already defined in the appContext object. This will trigger the use of the DTP ODA framework service to apply  the connection property values defined in an external connection profile store,  for opening a connection.
 * @param appContext    application context object passed thru into the data engine
 * @return          updated application context object for passing thruto the DTP oda.consumer 
 */
private Map addProfileProviderService(Map appContext){
  Map providerAppContext=appContext;
  if (providerAppContext == null)   providerAppContext=new HashMap();
  if (!providerAppContext.containsKey(IPropertyProvider.ODA_CONSUMER_ID)) {
    providerAppContext.put(IPropertyProvider.ODA_CONSUMER_ID,DTP_CONN_PROFILE_APPL_ID);
    if (getLogger().isLoggable(Level.FINE))     getLogger().logp(Level.FINE,sm_className,""String_Node_Str"",""String_Node_Str"" + DTP_CONN_PROFILE_APPL_ID);
  }
  return providerAppContext;
}",0.9668008048289738
72557,"private void logNullNativeName(){
  if (getNativeName() != null)   return;
  sm_logger.logp(Level.INFO,sm_className + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + getRomName() + ""String_Node_Str"");
}","private void logNullNativeName(){
  if (getNativeName() != null)   return;
  sm_logger.logp(Level.FINE,sm_className + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + getRomName() + ""String_Node_Str"");
}",0.9904761904761904
72558,"public void open(Properties connProperties) throws OdaException {
  if (connProperties == null) {
    IllegalArgumentException e=new IllegalArgumentException(""String_Node_Str"");
    logger.logp(java.util.logging.Level.FINE,Connection.class.getName(),""String_Node_Str"",e.getMessage(),e);
    throw e;
  }
  if (logger.isLoggable(Level.INFO)) {
    String logMsg=""String_Node_Str"";
    for (Enumeration enumeration=connProperties.propertyNames(); enumeration.hasMoreElements(); ) {
      String propName=(String)enumeration.nextElement();
      String lcPropName=propName.toLowerCase();
      String propVal;
      if (lcPropName.indexOf(""String_Node_Str"") >= 0 || lcPropName.indexOf(""String_Node_Str"") >= 0)       propVal=""String_Node_Str"";
 else       propVal=connProperties.getProperty(propName);
      logMsg+=propName + ""String_Node_Str"" + propVal+ ""String_Node_Str"";
    }
    logger.logp(Level.FINE,Connection.class.getName(),""String_Node_Str"",logMsg);
  }
  close();
  String dataSource=connProperties.getProperty(Constants.ODADataSource);
  if (dataSource != null) {
    UnsupportedOperationException e=new UnsupportedOperationException(""String_Node_Str"");
    logger.logp(java.util.logging.Level.FINE,Connection.class.getName(),""String_Node_Str"",e.getMessage(),e);
    throw e;
  }
 else {
    String url=connProperties.getProperty(Constants.ODAURL);
    String jndiName=connProperties.getProperty(Constants.ODAJndiName);
    if ((url == null || url.length() == 0) && (jndiName == null || jndiName.length() == 0)) {
      throw new JDBCException(ResourceConstants.DRIVER_MISSING_PROPERTIES,ResourceConstants.ERROR_MISSING_PROPERTIES);
    }
    connectByUrl(url,connProperties);
  }
}","public void open(Properties connProperties) throws OdaException {
  if (connProperties == null) {
    IllegalArgumentException e=new IllegalArgumentException(""String_Node_Str"");
    logger.logp(java.util.logging.Level.FINE,Connection.class.getName(),""String_Node_Str"",e.getMessage(),e);
    throw e;
  }
  if (logger.isLoggable(Level.FINE)) {
    String logMsg=""String_Node_Str"";
    for (Enumeration enumeration=connProperties.propertyNames(); enumeration.hasMoreElements(); ) {
      String propName=(String)enumeration.nextElement();
      String lcPropName=propName.toLowerCase();
      String propVal;
      if (lcPropName.indexOf(""String_Node_Str"") >= 0 || lcPropName.indexOf(""String_Node_Str"") >= 0)       propVal=""String_Node_Str"";
 else       propVal=connProperties.getProperty(propName);
      logMsg+=propName + ""String_Node_Str"" + propVal+ ""String_Node_Str"";
    }
    logger.logp(Level.FINE,Connection.class.getName(),""String_Node_Str"",logMsg);
  }
  close();
  String dataSource=connProperties.getProperty(Constants.ODADataSource);
  if (dataSource != null) {
    UnsupportedOperationException e=new UnsupportedOperationException(""String_Node_Str"");
    logger.logp(java.util.logging.Level.FINE,Connection.class.getName(),""String_Node_Str"",e.getMessage(),e);
    throw e;
  }
 else {
    String url=connProperties.getProperty(Constants.ODAURL);
    String jndiName=connProperties.getProperty(Constants.ODAJndiName);
    if ((url == null || url.length() == 0) && (jndiName == null || jndiName.length() == 0)) {
      throw new JDBCException(ResourceConstants.DRIVER_MISSING_PROPERTIES,ResourceConstants.ERROR_MISSING_PROPERTIES);
    }
    connectByUrl(url,connProperties);
  }
}",0.9988179669030732
72559,"/** 
 * Obtain a JDBC connection from a Data Source connection factory via the specified JNDI name service.  May return null if no JNDI Name URL is specified, or not able to obtain a connection from the JNDI name service.
 */
private Connection getJndiDSConnection(String driverClass,String jndiNameUrl,Properties connectionProperties){
  if (jndiNameUrl == null || jndiNameUrl.length() == 0)   return null;
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + jndiNameUrl);
  IConnectionFactory factory=new JndiDataSource();
  Connection jndiDSConnection=null;
  try {
    jndiDSConnection=factory.getConnection(driverClass,jndiNameUrl,connectionProperties);
  }
 catch (  SQLException e) {
    if (logger.isLoggable(Level.INFO))     logger.info(""String_Node_Str"" + e.toString());
  }
  return jndiDSConnection;
}","/** 
 * Obtain a JDBC connection from a Data Source connection factory via the specified JNDI name service.  May return null if no JNDI Name URL is specified, or not able to obtain a connection from the JNDI name service.
 */
private Connection getJndiDSConnection(String driverClass,String jndiNameUrl,Properties connectionProperties){
  if (jndiNameUrl == null || jndiNameUrl.length() == 0)   return null;
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + jndiNameUrl);
  IConnectionFactory factory=new JndiDataSource();
  Connection jndiDSConnection=null;
  try {
    jndiDSConnection=factory.getConnection(driverClass,jndiNameUrl,connectionProperties);
  }
 catch (  SQLException e) {
    if (logger.isLoggable(Level.FINE))     logger.info(""String_Node_Str"" + e.toString());
  }
  return jndiDSConnection;
}",0.9976019184652278
72560,"public void loadAndRegisterDriver(String className,Collection<String> driverClassPath) throws OdaException {
  if (className == null || className.length() == 0)   return;
  if (isDeregistered(className)) {
    throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
  }
 else   if (this.registeredDrivers.containsKey(className)) {
    return;
  }
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + className);
  }
  Driver driver=findDriver(className,driverClassPath);
  if (driver != null) {
    try {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + className);
      DriverManager.registerDriver(new WrappedDriver(driver,className));
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  registeredDrivers.put(className,DRIVER_REGISTERED);
}","public void loadAndRegisterDriver(String className,Collection<String> driverClassPath) throws OdaException {
  if (className == null || className.length() == 0)   return;
  if (isDeregistered(className)) {
    throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
  }
 else   if (this.registeredDrivers.containsKey(className)) {
    return;
  }
  if (logger.isLoggable(Level.FINE)) {
    logger.info(""String_Node_Str"" + className);
  }
  Driver driver=findDriver(className,driverClassPath);
  if (driver != null) {
    try {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + className);
      DriverManager.registerDriver(new WrappedDriver(driver,className));
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  registeredDrivers.put(className,DRIVER_REGISTERED);
}",0.997698504027618
72561,"/** 
 * This is used for UPDATE, the data in report document as data source for transformation.
 * @return
 * @throws DataException
 */
public IExprDataResultSet loadExprDataResultSet() throws DataException {
  if (version == VersionManager.VERSION_2_0)   throw new DataException(ResourceConstants.WRONG_VERSION);
  InputStream inputStream=streamManager.getInStream(DataEngineContext.EXPR_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  BufferedInputStream buffStream=new BufferedInputStream(inputStream);
  ExprMetaInfo[] exprMetas=ExprMetaUtil.loadExprMetaInfo(buffStream);
  try {
    buffStream.close();
    inputStream.close();
  }
 catch (  IOException e) {
  }
  IExprDataResultSet exprDataResultSet=null;
  if (streamManager.isBasedOnSecondRD() == false)   exprDataResultSet=new ExprDataResultSet1(streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),exprMetas,version,version < VersionManager.VERSION_2_2_1_3 ? null : this.loadDataSetData());
 else   exprDataResultSet=new ExprDataResultSet2(tempDir,streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),streamManager.getInStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),streamManager.getInStream(DataEngineContext.ROW_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.PARENT_SCOPE),exprMetas,version,version < VersionManager.VERSION_2_2_1_3 ? null : this.loadDataSetData());
  return exprDataResultSet;
}","/** 
 * This is used for UPDATE, the data in report document as data source for transformation.
 * @return
 * @throws DataException
 */
public IExprDataResultSet loadExprDataResultSet() throws DataException {
  if (version == VersionManager.VERSION_2_0)   throw new DataException(ResourceConstants.WRONG_VERSION);
  ExprMetaInfo[] exprMetas=loadExprMetaInfo();
  IExprDataResultSet exprDataResultSet=null;
  if (streamManager.isBasedOnSecondRD() == false)   exprDataResultSet=new ExprDataResultSet1(streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),exprMetas,version,version < VersionManager.VERSION_2_2_1_3 ? null : this.loadDataSetData());
 else   exprDataResultSet=new ExprDataResultSet2(tempDir,streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),streamManager.getInStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),streamManager.getInStream(DataEngineContext.ROW_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.PARENT_SCOPE),exprMetas,version,version < VersionManager.VERSION_2_2_1_3 ? null : this.loadDataSetData());
  return exprDataResultSet;
}",0.8829022988505747
72562,"public void testTotalRunningCount() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_RUNNINGCOUNT_FUNC,ag.getName());
  assertEquals(IAggrFunction.RUNNING_AGGR,ag.getType());
  assertEquals(0,ag.getParameterDefn().length);
  ac.start();
  for (int i=0; i < doubleArray1.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray1[i]),new Double(5)});
    assertEquals(new Integer(i + 1),ac.getValue());
  }
  ac.finish();
}","public void testTotalRunningCount() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_RUNNINGCOUNT_FUNC,ag.getName());
  assertEquals(IAggrFunction.RUNNING_AGGR,ag.getType());
  assertEquals(1,ag.getParameterDefn().length);
  ac.start();
  for (int i=0; i < doubleArray1.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray1[i]),new Double(5)});
    assertEquals(new Integer(i + 1),ac.getValue());
  }
  ac.finish();
  ac.start();
  for (int i=0; i < anyObjectArray.length; i++) {
    ac.onRow(new Object[]{anyObjectArray[i]});
  }
  ac.finish();
  assertEquals(new Integer(5),ac.getValue());
  ac.start();
  for (int i=0; i < anyObjectArray.length; i++) {
    ac.onRow(null);
  }
  ac.finish();
  assertEquals(new Integer(8),ac.getValue());
}",0.7705263157894737
72563,"/** 
 * Returns the driverName.
 * @return 
 */
String getDriverName(){
  return driverName;
}","/** 
 * Returns the driverName.
 * @return
 */
String getDriverName(){
  return driverName;
}",0.9946524064171124
72564,"/** 
 * Find a connection available for new statements in the pool, or create a new one if none available 
 */
private CacheConnection getAvailableConnection() throws DataException {
  Iterator it=odaConnections.iterator();
  while (it.hasNext()) {
    CacheConnection c=(CacheConnection)(it.next());
    if (c.currentStatements < c.maxStatements)     return c;
  }
  return newConnection();
}","/** 
 * Find a connection available for new statements in the pool, or create a new one if none available 
 */
private CacheConnection getAvailableConnection() throws DataException {
  Iterator it=this.getOdaConnections().iterator();
  while (it.hasNext()) {
    CacheConnection c=(CacheConnection)(it.next());
    if (c.currentStatements < c.maxStatements)     return c;
  }
  return newConnection();
}",0.984924623115578
72565,"public ICandidateQuery newCandidateQuery(){
  return new CandidateQuery(this.session);
}","public ICandidateQuery newCandidateQuery(boolean fromCache) throws DataException {
  if (fromCache) {
    return new org.eclipse.birt.data.engine.executor.dscache.CandidateQuery(session);
  }
 else {
    return new CandidateQuery(this.session);
  }
}",0.3313609467455621
72566,"/** 
 * @param driverName
 * @param connProperties
 */
DataSource(String driverName,Map connProperties,DataEngineSession session){
  this.driverName=driverName;
  if (connProperties != null)   this.connectionProps.putAll(connProperties);
  this.session=session;
}","/** 
 * @param driverName
 * @param connProperties
 * @param session
 * @param info
 */
public DataSource(String driverName,Map connProperties,DataEngineSession session){
  this.driverName=driverName;
  if (connProperties != null)   this.connectionProps.putAll(connProperties);
  this.session=session;
  this.session.getEngine().addShutdownListener(new ShutdownListener(session));
}",0.8155038759689922
72567,"public boolean isOpen(){
  return odaConnections.size() > 0;
}","public boolean isOpen(){
  return this.getOdaConnections().size() > 0;
}",0.9104477611940298
72568,"/** 
 * Opens a new Connection and add it to the pool
 * @return
 * @throws DataException
 */
private CacheConnection newConnection() throws DataException {
  CacheConnection conn=new CacheConnection();
  conn.odaConn=ConnectionManager.getInstance().openConnection(driverName,connectionProps,appContext);
  int max=conn.odaConn.getMaxQueries();
  if (max != 0)   conn.maxStatements=max;
  this.odaConnections.add(conn);
  return conn;
}","/** 
 * Opens a new Connection and add it to the pool
 * @return
 * @throws DataException
 */
private CacheConnection newConnection() throws DataException {
  CacheConnection conn=new CacheConnection();
  conn.odaConn=ConnectionManager.getInstance().openConnection(driverName,connectionProps,appContext);
  int max=conn.odaConn.getMaxQueries();
  if (max != 0)   conn.maxStatements=max;
  this.getOdaConnections().add(conn);
  return conn;
}",0.9623717217787914
72569,"public IDataSourceQuery newQuery(String queryType,String queryText) throws DataException {
  return new DataSourceQuery(this,queryType,queryText,this.session);
}","public IDataSourceQuery newQuery(String queryType,String queryText,boolean fromCache) throws DataException {
  if (fromCache) {
    return new org.eclipse.birt.data.engine.executor.dscache.DataSourceQuery(this.session);
  }
 else {
    return new DataSourceQuery(this,queryType,queryText,this.session);
  }
}",0.579957356076759
72570,"public void close(){
  if (statementMap.size() > 0) {
    Iterator keySet=statementMap.keySet().iterator();
    while (keySet.hasNext()) {
      PreparedStatement stmt=(PreparedStatement)keySet.next();
      try {
        stmt.close();
      }
 catch (      DataException e) {
        logger.logp(Level.FINE,className,""String_Node_Str"",""String_Node_Str"",e);
      }
    }
    statementMap.clear();
  }
  Iterator it=odaConnections.iterator();
  while (it.hasNext()) {
    CacheConnection c=(CacheConnection)(it.next());
    try {
      c.odaConn.close();
    }
 catch (    DataException e) {
      logger.logp(Level.FINE,className,""String_Node_Str"",""String_Node_Str"",e);
    }
  }
  odaConnections.clear();
}","public void close(){
  if (statementMap.size() > 0) {
    Iterator keySet=statementMap.keySet().iterator();
    while (keySet.hasNext()) {
      PreparedStatement stmt=(PreparedStatement)keySet.next();
      try {
        stmt.close();
      }
 catch (      DataException e) {
        logger.logp(Level.FINE,className,""String_Node_Str"",""String_Node_Str"",e);
      }
    }
    statementMap.clear();
  }
  Set<CacheConnection> it=this.getOdaConnections();
  if (it.size() > 1) {
    CacheConnection conn=it.iterator().next();
    conn.currentStatements=0;
    it.remove(conn);
    for (    CacheConnection connections : it) {
      try {
        connections.odaConn.close();
      }
 catch (      DataException e) {
        e.printStackTrace();
      }
    }
    it.clear();
    it.add(conn);
  }
}",0.6050531914893617
72571,"public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  if (!visible) {
    return;
  }
  if (isFirstContent) {
    startPageContent(content);
    isFirstContent=false;
  }
  if (emitter != null) {
    if (content.getContentType() == IContent.PAGE_CONTENT) {
      ContentEmitterUtil.endContent(pageContent,emitter);
    }
 else {
      ContentEmitterUtil.endContent(content,emitter);
    }
  }
}","public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  if (!visible) {
    return;
  }
  if (isFirstContent) {
    startPageContent(content);
    isFirstContent=false;
  }
  if (emitter != null) {
    if (content.getContentType() == IContent.PAGE_CONTENT) {
      ContentEmitterUtil.endContent(pageContent,emitter);
      context.clearPageHint();
    }
 else {
      ContentEmitterUtil.endContent(content,emitter);
    }
  }
}",0.9661941112322792
72572,"public int compare(Viewer viewer,Object e1,Object e2){
  if (e1 instanceof DesignElementEntry)   e1=((DesignElementEntry)e1).getReportElement();
  if (e2 instanceof DesignElementEntry)   e2=((DesignElementEntry)e2).getReportElement();
  return super.compare(viewer,e1,e2);
}","public int compare(Viewer viewer,Object e1,Object e2){
  if (e1 instanceof ResourceEntry && e2 instanceof ResourceEntry) {
    if ((((ResourceEntry)e1).isFile() ^ ((ResourceEntry)e2).isFile())) {
      return ((ResourceEntry)e1).isFile() ? 1 : -1;
    }
  }
  if (e1 instanceof DesignElementEntry)   e1=((DesignElementEntry)e1).getReportElement();
  if (e2 instanceof DesignElementEntry)   e2=((DesignElementEntry)e2).getReportElement();
  return super.compare(viewer,e1,e2);
}",0.729693741677763
72573,"/** 
 * Creates the tree view
 * @param parent the parent
 */
protected TreeViewer createTreeViewer(Composite parent){
  treeViewer=new TreeViewer(parent,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
  treeViewer.setSorter(new ItemSorter(){
    public int compare(    Viewer viewer,    Object e1,    Object e2){
      if (e1 instanceof DesignElementEntry)       e1=((DesignElementEntry)e1).getReportElement();
      if (e2 instanceof DesignElementEntry)       e2=((DesignElementEntry)e2).getReportElement();
      return super.compare(viewer,e1,e2);
    }
  }
);
  configTreeViewer();
  initPage();
  refreshRoot();
  return treeViewer;
}","/** 
 * Creates the tree view
 * @param parent the parent
 */
protected TreeViewer createTreeViewer(Composite parent){
  treeViewer=new TreeViewer(parent,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
  treeViewer.setSorter(new ItemSorter(){
    public int compare(    Viewer viewer,    Object e1,    Object e2){
      if (e1 instanceof ResourceEntry && e2 instanceof ResourceEntry) {
        if ((((ResourceEntry)e1).isFile() ^ ((ResourceEntry)e2).isFile())) {
          return ((ResourceEntry)e1).isFile() ? 1 : -1;
        }
      }
      if (e1 instanceof DesignElementEntry)       e1=((DesignElementEntry)e1).getReportElement();
      if (e2 instanceof DesignElementEntry)       e2=((DesignElementEntry)e2).getReportElement();
      return super.compare(viewer,e1,e2);
    }
  }
);
  configTreeViewer();
  initPage();
  refreshRoot();
  return treeViewer;
}",0.8504359490274983
72574,"/** 
 * save the metadata into the streams.
 * @param key
 */
private void storeDteMetaInfo(String pRsetId,String rowId,String queryId,String rsetId){
  try {
    if (context.isExecutingMasterPage()) {
      if (pRsetId == null) {
        rowId=String.valueOf(context.getPageNumber());
      }
    }
    DteMetaInfoIOUtil.storeMetaInfo(dos,pRsetId,rowId,queryId,rsetId);
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getMessage());
  }
}","/** 
 * save the metadata into the streams.
 * @param key
 */
private void storeDteMetaInfo(String pRsetId,String rowId,String queryId,String rsetId){
  try {
    if (context.isExecutingMasterPage()) {
      if (pRsetId == null) {
        rowId=""String_Node_Str"";
      }
    }
    DteMetaInfoIOUtil.storeMetaInfo(dos,pRsetId,rowId,queryId,rsetId);
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getMessage());
  }
}",0.9387755102040816
72575,"private String loadResultSetID(IBaseResultSet parentResult,String queryID) throws BirtException {
  String resultSetID=null;
  if (parentResult == null) {
    if (context.isExecutingMasterPage()) {
      long pageNumber=context.getPageNumber();
      resultSetID=getResultID(null,String.valueOf(pageNumber),queryID);
      if (resultSetID == null) {
        resultSetID=getResultID(null,""String_Node_Str"",queryID);
      }
    }
 else {
      resultSetID=getResultID(null,""String_Node_Str"",queryID);
    }
  }
 else {
    String pRsetId;
    if (parentResult instanceof QueryResultSet) {
      pRsetId=((QueryResultSet)parentResult).getQueryResultsID();
    }
 else {
      pRsetId=((CubeResultSet)parentResult).getQueryResultsID();
    }
    String rowid=parentResult.getRawID();
    resultSetID=getResultID(pRsetId,rowid,queryID);
  }
  return resultSetID;
}","private String loadResultSetID(IBaseResultSet parentResult,String queryID) throws BirtException {
  String resultSetID=null;
  if (parentResult == null) {
    if (context.isExecutingMasterPage()) {
      resultSetID=getResultID(null,""String_Node_Str"",queryID);
      if (resultSetID == null) {
        long pageNumber=context.getPageNumber();
        resultSetID=getResultID(null,String.valueOf(pageNumber),queryID);
        if (resultSetID == null) {
          resultSetID=getResultID(null,""String_Node_Str"",queryID);
        }
      }
    }
 else {
      resultSetID=getResultID(null,""String_Node_Str"",queryID);
    }
  }
 else {
    String pRsetId;
    if (parentResult instanceof QueryResultSet) {
      pRsetId=((QueryResultSet)parentResult).getQueryResultsID();
    }
 else {
      pRsetId=((CubeResultSet)parentResult).getQueryResultsID();
    }
    String rowid=parentResult.getRawID();
    resultSetID=getResultID(pRsetId,rowid,queryID);
  }
  return resultSetID;
}",0.9378407851690296
72576,"/** 
 * save the metadata into the streams.
 * @param key
 */
private void storeDteMetaInfo(String pRsetId,String rowId,String queryId,String rsetId){
  if (dos != null) {
    try {
      if (context.isExecutingMasterPage()) {
        if (pRsetId == null) {
          rowId=String.valueOf(context.getPageNumber());
        }
      }
      DteMetaInfoIOUtil.storeMetaInfo(dos,pRsetId,rowId,queryId,rsetId);
    }
 catch (    IOException e) {
      logger.log(Level.SEVERE,e.getMessage());
    }
  }
}","/** 
 * save the metadata into the streams.
 * @param key
 */
private void storeDteMetaInfo(String pRsetId,String rowId,String queryId,String rsetId){
  if (dos != null) {
    try {
      if (context.isExecutingMasterPage()) {
        if (pRsetId == null) {
          rowId=""String_Node_Str"";
        }
      }
      DteMetaInfoIOUtil.storeMetaInfo(dos,pRsetId,rowId,queryId,rsetId);
    }
 catch (    IOException e) {
      logger.log(Level.SEVERE,e.getMessage());
    }
  }
}",0.944672131147541
72577,"private String loadResultSetID(IBaseResultSet parentResult,String queryID) throws BirtException {
  String resultSetID=null;
  if (parentResult == null) {
    if (context.isExecutingMasterPage()) {
      long pageNumber=context.getPageNumber();
      resultSetID=getResultID(null,String.valueOf(pageNumber),queryID);
      if (resultSetID == null) {
        resultSetID=getResultID(null,""String_Node_Str"",queryID);
      }
    }
 else {
      resultSetID=getResultID(null,""String_Node_Str"",queryID);
    }
  }
 else {
    String pRsetId;
    if (parentResult instanceof QueryResultSet) {
      pRsetId=((QueryResultSet)parentResult).getQueryResultsID();
    }
 else {
      pRsetId=((CubeResultSet)parentResult).getQueryResultsID();
    }
    String rowid=parentResult.getRawID();
    resultSetID=getResultID(pRsetId,rowid,queryID);
  }
  return resultSetID;
}","private String loadResultSetID(IBaseResultSet parentResult,String queryID) throws BirtException {
  String resultSetID=null;
  if (parentResult == null) {
    if (context.isExecutingMasterPage()) {
      resultSetID=getResultID(null,""String_Node_Str"",queryID);
      if (resultSetID == null) {
        long pageNumber=context.getPageNumber();
        resultSetID=getResultID(null,String.valueOf(pageNumber),queryID);
        if (resultSetID == null) {
          resultSetID=getResultID(null,""String_Node_Str"",queryID);
        }
      }
    }
 else {
      resultSetID=getResultID(null,""String_Node_Str"",queryID);
    }
  }
 else {
    String pRsetId;
    if (parentResult instanceof QueryResultSet) {
      pRsetId=((QueryResultSet)parentResult).getQueryResultsID();
    }
 else {
      pRsetId=((CubeResultSet)parentResult).getQueryResultsID();
    }
    String rowid=parentResult.getRawID();
    resultSetID=getResultID(pRsetId,rowid,queryID);
  }
  return resultSetID;
}",0.9378407851690296
72578,"public void onRow(Object[] args) throws DataException {
  count++;
}","public void onRow(Object[] args) throws DataException {
  if (!countByColumn || args == null || args.length == 0) {
    if (countByColumn) {
      countByColumn=false;
    }
    ++count;
  }
 else   if (args.length > 0 && args[0] != null) {
    ++count;
  }
}",0.3669724770642202
72579,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,true,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}",0.527027027027027
72580,"protected BoundingBox computeBox(IDisplayServer xs,RunTimeContext rtc) throws ChartException {
  final String sPreviousValue=getLabel().getCaption().getValue();
  getLabel().getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
  try {
    return Methods.computeBox(xs,IConstants.TOP,getLabel(),0,0);
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
  }
 finally {
    getLabel().getCaption().setValue(sPreviousValue);
  }
}","protected BoundingBox computeBox(IDisplayServer xs,RunTimeContext rtc) throws ChartException {
  Label la=LabelImpl.copyInstance(getLabel());
  final String sPreviousValue=getLabel().getCaption().getValue();
  la.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
  try {
    return Methods.computeBox(xs,IConstants.TOP,la,0,0);
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
  }
}",0.8588709677419355
72581,"protected BoundingBox computeBox(IDisplayServer xs,RunTimeContext rtc) throws ChartException {
  final String sPreviousValue=getLabel().getCaption().getValue();
  getLabel().getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
  double dWrapping=0;
  EObject container=eContainer();
  if (container instanceof Block) {
    dWrapping=((Block)container).getBounds().getWidth() / 72 * xs.getDpiResolution();
  }
  try {
    return Methods.computeBox(xs,IConstants.TOP,getLabel(),0,0,dWrapping);
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
  }
}","protected BoundingBox computeBox(IDisplayServer xs,RunTimeContext rtc) throws ChartException {
  Label la=LabelImpl.copyInstance(getLabel());
  final String sPreviousValue=la.getCaption().getValue();
  la.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
  double dWrapping=0;
  EObject container=eContainer();
  if (container instanceof Block) {
    dWrapping=((Block)container).getBounds().getWidth() / 72 * xs.getDpiResolution();
  }
  try {
    return Methods.computeBox(xs,IConstants.TOP,la,0,0,dWrapping);
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
  }
}",0.9361046959199384
72582,"/** 
 * Renders the Chart Title Block
 * @param ipr The Primitive Renderer of a Device Renderer
 * @param b The TitleBlock to render
 * @throws ChartException
 */
public void renderTitle(IPrimitiveRenderer ipr,TitleBlock b) throws ChartException {
  TextAlignment restoreValue=b.getLabel().getCaption().getFont().getAlignment();
  b.getLabel().getCaption().getFont().setAlignment(switchTextAlignment(restoreValue));
  renderLabel(ipr,b,StructureSource.createTitle(b));
  b.getLabel().getCaption().getFont().setAlignment(restoreValue);
  if (isInteractivityEnabled()) {
    Trigger tg;
    EList elTriggers=b.getTriggers();
    Location[] loaHotspot=new Location[4];
    final double dScale=getDeviceScale();
    Bounds bo=b.getBounds().scaledInstance(dScale);
    double dLeft=bo.getLeft();
    double dTop=bo.getTop();
    double dWidth=bo.getWidth();
    double dHeight=bo.getHeight();
    loaHotspot[0]=LocationImpl.create(dLeft,dTop);
    loaHotspot[1]=LocationImpl.create(dLeft + dWidth,dTop);
    loaHotspot[2]=LocationImpl.create(dLeft + dWidth,dTop + dHeight);
    loaHotspot[3]=LocationImpl.create(dLeft,dTop + dHeight);
    if (!elTriggers.isEmpty()) {
      final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createTitle(b),InteractionEvent.class);
      for (int t=0; t < elTriggers.size(); t++) {
        tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
        processTrigger(tg,StructureSource.createTitle(b));
        iev.addTrigger(tg);
      }
      final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createTitle(b),PolygonRenderEvent.class);
      pre.setPoints(loaHotspot);
      iev.setHotSpot(pre);
      ipr.enableInteraction(iev);
    }
  }
}","/** 
 * Renders the Chart Title Block
 * @param ipr The Primitive Renderer of a Device Renderer
 * @param b The TitleBlock to render
 * @throws ChartException
 */
public void renderTitle(IPrimitiveRenderer ipr,TitleBlock b) throws ChartException {
  TextAlignment restoreValue=b.getLabel().getCaption().getFont().getAlignment();
  b.getLabel().getCaption().getFont().setAlignment(switchTextAlignment(restoreValue));
  double dWrapping=0;
  EObject container=b.eContainer();
  if (container instanceof Block) {
    dWrapping=((Block)container).getBounds().getWidth() / 72 * xs.getDpiResolution();
    final ITextMetrics itm=xs.getTextMetrics(b.getLabel());
    if (dWrapping > 0) {
      itm.reuse(b.getLabel(),dWrapping);
    }
  }
  renderLabel(ipr,b,StructureSource.createTitle(b));
  b.getLabel().getCaption().getFont().setAlignment(restoreValue);
  if (isInteractivityEnabled()) {
    Trigger tg;
    EList elTriggers=b.getTriggers();
    Location[] loaHotspot=new Location[4];
    final double dScale=getDeviceScale();
    Bounds bo=b.getBounds().scaledInstance(dScale);
    double dLeft=bo.getLeft();
    double dTop=bo.getTop();
    double dWidth=bo.getWidth();
    double dHeight=bo.getHeight();
    loaHotspot[0]=LocationImpl.create(dLeft,dTop);
    loaHotspot[1]=LocationImpl.create(dLeft + dWidth,dTop);
    loaHotspot[2]=LocationImpl.create(dLeft + dWidth,dTop + dHeight);
    loaHotspot[3]=LocationImpl.create(dLeft,dTop + dHeight);
    if (!elTriggers.isEmpty()) {
      final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createTitle(b),InteractionEvent.class);
      for (int t=0; t < elTriggers.size(); t++) {
        tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
        processTrigger(tg,StructureSource.createTitle(b));
        iev.addTrigger(tg);
      }
      final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createTitle(b),PolygonRenderEvent.class);
      pre.setPoints(loaHotspot);
      iev.setHotSpot(pre);
      ipr.enableInteraction(iev);
    }
  }
}",0.9183040330920372
72583,"private void init(){
  this.setSize(getParent().getClientArea().width,getParent().getClientArea().height);
  vListeners=new Vector();
}","private void init(){
  this.setSize(getParent().getClientArea().width,getParent().getClientArea().height);
  vListeners=new Vector<Listener>();
}",0.9642857142857144
72584,"private String buildString(){
  if (sKey != null && sKey.length() > 0) {
    return sKey + ExternalizedTextEditorComposite.SEPARATOR + sCurrent;
  }
  return sCurrent;
}","private String buildString(){
  if (sKey != null && sKey.length() > 0) {
    return sKey + ExternalizedTextEditorComposite.SEPARATOR + sCurrent;
  }
 else   if (sCurrent.contains(ExternalizedTextEditorComposite.SEPARATOR)) {
    return ExternalizedTextEditorComposite.SEPARATOR + sCurrent;
  }
 else {
    return sCurrent;
  }
}",0.6519114688128773
72585,"public ExternalizedTextEditorComposite(Composite parent,int style,int iHeightHint,int iWidthHint,List keys,IUIServiceProvider serviceprovider,String sText){
  super(parent,SWT.NONE);
  this.iStyle=style;
  this.iHeightHint=iHeightHint;
  this.iWidthHint=iWidthHint;
  this.keys=keys;
  this.serviceprovider=serviceprovider;
  init();
  placeComponents();
  setText(sText);
}","public ExternalizedTextEditorComposite(Composite parent,int style,int iHeightHint,int iWidthHint,List<String> keys,IUIServiceProvider serviceprovider,String sText){
  super(parent,SWT.NONE);
  this.iStyle=style;
  this.iHeightHint=iHeightHint;
  this.iWidthHint=iWidthHint;
  this.keys=keys;
  this.serviceprovider=serviceprovider;
  init();
  placeComponents();
  setText(sText);
}",0.9894179894179894
72586,"/** 
 * @return ""key=defaultValue""
 */
private String buildString(){
  StringBuffer sbText=new StringBuffer(""String_Node_Str"");
  String sKey=cmbKeys.getText();
  if (cbExternalize.getSelection()) {
    sbText.append(sKey);
    sbText.append(ExternalizedTextEditorComposite.SEPARATOR);
  }
  sbText.append(txtValue.getText());
  return sbText.toString();
}","/** 
 * @return ""key=defaultValue""
 */
private String buildString(){
  StringBuffer sbText=new StringBuffer(""String_Node_Str"");
  String sKey=cmbKeys.getText();
  if (cbExternalize.getSelection()) {
    sbText.append(sKey);
    sbText.append(ExternalizedTextEditorComposite.SEPARATOR);
  }
 else   if (txtValue.getText().contains(ExternalizedTextEditorComposite.SEPARATOR)) {
    sbText.append(ExternalizedTextEditorComposite.SEPARATOR);
  }
  sbText.append(txtValue.getText());
  return sbText.toString();
}",0.7199074074074074
72587,"/** 
 * @param parent
 * @param style
 */
public ExternalizedTextEditorDialog(Shell parent,String sText,List keys,IUIServiceProvider serviceprovider,String defaultValue){
  super(parent);
  this.sResult=sText;
  this.sInputValue=getValueComponent(sText);
  this.keys=keys;
  this.serviceprovider=serviceprovider;
  this.defaultValue=defaultValue;
}","/** 
 * @param parent
 * @param style
 */
public ExternalizedTextEditorDialog(Shell parent,String sText,List<String> keys,IUIServiceProvider serviceprovider,String defaultValue){
  super(parent);
  this.sResult=sText;
  this.sInputValue=getValueComponent(sText);
  this.keys=keys;
  this.serviceprovider=serviceprovider;
  this.defaultValue=defaultValue;
}",0.9886363636363636
72588,"public void dispose(){
  if (container != null || !container.isDisposed())   container.dispose();
  deRegisterEventManager();
}","public void dispose(){
  if (container != null && !container.isDisposed()) {
    container.dispose();
  }
  deRegisterEventManager();
}",0.9541984732824428
72589,"public void postElementEvent(){
  if (fTableViewer.getContentProvider() == null) {
    return;
  }
  if (fTableViewer != null) {
    fTableViewer.setInput(input);
    refreshTableItemView();
  }
}","public void postElementEvent(){
  if (fTableViewer == null || fTableViewer.getContentProvider() == null) {
    return;
  }
  if (fTableViewer != null) {
    fTableViewer.setInput(input);
    refreshTableItemView();
  }
}",0.9423076923076924
72590,"/** 
 * Test if the handle is from library.
 * @param handle
 * @return
 */
public static boolean isReferenceElement(DesignElementHandle handle){
  return handle.getExtends() != null;
}","/** 
 * Test if the handle is from library.
 * @param handle
 * @return
 * @deprecated use {@link #isLinkedElement(DesignElementHandle)}
 */
public static boolean isReferenceElement(DesignElementHandle handle){
  return isLinkedElement(handle);
}",0.7424593967517401
72591,"public Image getNodeIcon(Object model){
  if (model instanceof DesignElementHandle && ((DesignElementHandle)model).getSemanticErrors().size() > 0) {
    return ReportPlatformUIImages.getImage(ISharedImages.IMG_OBJS_ERROR_TSK);
  }
  if (OlapUtil.needLibraryImage(model))   return UIHelper.getImage(BuilderConstancts.IMAGE_LINK_CUBE);
 else   return UIHelper.getImage(BuilderConstancts.IMAGE_CUBE);
}","public Image getNodeIcon(Object model){
  if (model instanceof DesignElementHandle && ((DesignElementHandle)model).getSemanticErrors().size() > 0) {
    return ReportPlatformUIImages.getImage(ISharedImages.IMG_OBJS_ERROR_TSK);
  }
  if (OlapUtil.isFromLibrary(model))   return UIHelper.getImage(BuilderConstancts.IMAGE_LINK_CUBE);
 else   return UIHelper.getImage(BuilderConstancts.IMAGE_CUBE);
}",0.981132075471698
72592,"public static boolean isFromLibrary(Object model){
  if (model instanceof DesignElementHandle) {
    DesignElementHandle handle=(DesignElementHandle)model;
    if (handle.getExtends() != null && handle.getExtends().getRoot() instanceof LibraryHandle) {
      return true;
    }
  }
  return false;
}","public static boolean isFromLibrary(Object model){
  if (model instanceof DesignElementHandle) {
    return DEUtil.isLinkedElement((DesignElementHandle)model);
  }
  return false;
}",0.6625
72593,"private static boolean isLinkImg(DesignElementHandle handle){
  if (!(handle.getRoot() instanceof LibraryHandle || (handle.getExtends() != null && handle.getExtends().getRoot() instanceof LibraryHandle))) {
    return false;
  }
  if ((handle instanceof DataSourceHandle) || (handle instanceof DataSetHandle) || (handle instanceof GridHandle)|| (handle instanceof ImageHandle)|| (handle instanceof DataItemHandle)|| (handle instanceof LabelHandle)|| (handle instanceof ListingHandle)|| (handle instanceof TableHandle)|| (handle instanceof TextItemHandle)|| (handle instanceof TextDataHandle)) {
    return true;
  }
  return false;
}","private static boolean isLinkImg(DesignElementHandle handle){
  if (!DEUtil.isLinkedElement(handle)) {
    return false;
  }
  if ((handle instanceof DataSourceHandle) || (handle instanceof DataSetHandle) || (handle instanceof GridHandle)|| (handle instanceof ImageHandle)|| (handle instanceof DataItemHandle)|| (handle instanceof LabelHandle)|| (handle instanceof ListingHandle)|| (handle instanceof TableHandle)|| (handle instanceof TextItemHandle)|| (handle instanceof TextDataHandle)) {
    return true;
  }
  return false;
}",0.8674698795180723
72594,"public boolean isEnabled(){
  boolean enabled=true;
  if (measureViewHandle instanceof ComputedMeasureViewHandle) {
    enabled=false;
  }
 else {
    if (OlapUtil.isFromLibrary(measureViewHandle.getCrosstabHandle())) {
      return false;
    }
    IAggregationCellViewProvider provider=providerWrapper.getProvider(expectedView);
    SwitchCellInfo info=new SwitchCellInfo(measureViewHandle.getCrosstab(),SwitchCellInfo.MEASURE);
    info.setMeasureInfo(true,measureViewHandle.getCubeMeasureName(),expectedView);
    enabled=provider.canSwitch(info);
    IAggregationCellViewProvider matchProvider=providerWrapper.getMatchProvider(measureViewHandle.getCell());
    if (matchProvider != null && matchProvider.getViewName().equals(expectedView)) {
      enabled=false;
    }
  }
  setEnabled(enabled);
  return enabled;
}","public boolean isEnabled(){
  boolean enabled=true;
  if (measureViewHandle instanceof ComputedMeasureViewHandle) {
    enabled=false;
  }
 else {
    if (DEUtil.isLinkedElement(measureViewHandle.getCrosstabHandle())) {
      return false;
    }
    IAggregationCellViewProvider provider=providerWrapper.getProvider(expectedView);
    SwitchCellInfo info=new SwitchCellInfo(measureViewHandle.getCrosstab(),SwitchCellInfo.MEASURE);
    info.setMeasureInfo(true,measureViewHandle.getCubeMeasureName(),expectedView);
    enabled=provider.canSwitch(info);
    IAggregationCellViewProvider matchProvider=providerWrapper.getMatchProvider(measureViewHandle.getCell());
    if (matchProvider != null && matchProvider.getViewName().equals(expectedView)) {
      enabled=false;
    }
  }
  setEnabled(enabled);
  return enabled;
}",0.9841463414634146
72595,"public Image getNodeIcon(Object model){
  if (model instanceof DesignElementHandle && ((DesignElementHandle)model).getSemanticErrors().size() > 0) {
    return ReportPlatformUIImages.getImage(ISharedImages.IMG_OBJS_ERROR_TSK);
  }
  if (OlapUtil.needLibraryImage(model))   return CrosstabUIHelper.getImage(CrosstabUIHelper.CROSSTAB_LINK_IMAGE);
  return CrosstabUIHelper.getImage(CrosstabUIHelper.CROSSTAB_IMAGE);
}","public Image getNodeIcon(Object model){
  if (model instanceof DesignElementHandle && ((DesignElementHandle)model).getSemanticErrors().size() > 0) {
    return ReportPlatformUIImages.getImage(ISharedImages.IMG_OBJS_ERROR_TSK);
  }
  if (model instanceof DesignElementHandle && DEUtil.isLinkedElement((DesignElementHandle)model))   return CrosstabUIHelper.getImage(CrosstabUIHelper.CROSSTAB_LINK_IMAGE);
  return CrosstabUIHelper.getImage(CrosstabUIHelper.CROSSTAB_IMAGE);
}",0.8806306306306306
72596,"public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (isGrandTotal(binding) && isSort)         continue;
        if (this.getReferencedMeasureName(binding.getExpression()) != null) {
          if (this.isLeafLevel(cubeDefn,target) && this.isMeasureBinding(cubeDefn,binding)) {
            result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
            continue;
          }
 else           if (isGrandTotal(binding)) {
            result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
            continue;
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1) {
              if (fromSameEdge(aggrOns,cubeDefn))               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
 else               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              int candidateEdge=getAxisQualifierEdgeType(dimLevel,cubeDefn);
              if (candidateEdge != -1) {
                if (getAxisQualifierLevel(next,cubeDefn.getEdge(candidateEdge)) != null)                 result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
              }
            }
            break;
          }
        }
        continue;
      }
      result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.DIMENSION_TYPE));
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      if (!OlapExpressionUtil.isDirectRerenrence(binding.getExpression(),bindings)) {
        result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.OTHER_TYPE));
        continue;
      }
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (isGrandTotal(binding) && isSort)         continue;
        if (this.getReferencedMeasureName(binding.getExpression()) != null) {
          if (this.isLeafLevel(cubeDefn,target) && this.isMeasureBinding(cubeDefn,binding)) {
            result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
            continue;
          }
 else           if (isGrandTotal(binding)) {
            result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
            continue;
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1) {
              if (fromSameEdge(aggrOns,cubeDefn))               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
 else               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              int candidateEdge=getAxisQualifierEdgeType(dimLevel,cubeDefn);
              if (candidateEdge != -1) {
                if (getAxisQualifierLevel(next,cubeDefn.getEdge(candidateEdge)) != null)                 result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
              }
            }
            break;
          }
        }
        continue;
      }
      result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.DIMENSION_TYPE));
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.96
72597,"private void populateSeriesTypes(Collection allChartType,Series series,Orientation orientation){
  Iterator iterTypes=allChartType.iterator();
  while (iterTypes.hasNext()) {
    IChartType type=(IChartType)iterTypes.next();
    Series newSeries=type.getSeries();
    if (htSeriesNames == null) {
      htSeriesNames=new Hashtable<String,Series>(20);
    }
    if (newSeries.canParticipateInCombination()) {
      if (!(newSeries instanceof StockSeries) || (orientation.getValue() == Orientation.VERTICAL)) {
        String sDisplayName=newSeries.getDisplayName();
        htSeriesNames.put(sDisplayName,newSeries);
        cbSeriesType.add(sDisplayName);
      }
      if (type.getName().equals(chartModel.getType())) {
        cbSeriesType.select(cbSeriesType.getItemCount() - 1);
      }
    }
  }
}","private void populateSeriesTypes(Collection<IChartType> allChartType,Series series,Orientation orientation){
  Iterator<IChartType> iterTypes=allChartType.iterator();
  while (iterTypes.hasNext()) {
    IChartType type=iterTypes.next();
    Series newSeries=type.getSeries();
    if (htSeriesNames == null) {
      htSeriesNames=new Hashtable<String,Series>(20);
    }
    if (newSeries.canParticipateInCombination()) {
      if (!(newSeries instanceof StockSeries) || (orientation.getValue() == Orientation.VERTICAL)) {
        String sDisplayName=newSeries.getDisplayName();
        htSeriesNames.put(sDisplayName,newSeries);
        cbSeriesType.add(sDisplayName);
      }
      if (type.getName().equals(chartModel.getType())) {
        cbSeriesType.select(cbSeriesType.getItemCount() - 1);
      }
    }
  }
}",0.8948019801980198
72598,"public void widgetSelected(SelectionEvent e){
  boolean needUpdateModel=false;
  Object oSelected=e.getSource();
  if (oSelected.getClass().equals(Button.class)) {
    needUpdateModel=true;
    if (oSelected.equals(cbOrientation)) {
      if (cbOrientation.getSelection()) {
        orientation=Orientation.HORIZONTAL_LITERAL;
      }
 else {
        orientation=Orientation.VERTICAL_LITERAL;
      }
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      populateSeriesTypesList();
      ChartCacheManager.getInstance().cacheOrientation(sType,orientation);
    }
 else {
      Button btn=(Button)e.getSource();
      if (btn.getSelection()) {
        if (this.sSubType != null && !getSubtypeFromButton(btn).equals(sSubType)) {
          int iTypeIndex=vSubTypeNames.indexOf(sSubType);
          if (iTypeIndex >= 0) {
            ((Button)cmpTypeButtons.getChildren()[iTypeIndex]).setSelection(false);
            cmpTypeButtons.redraw();
          }
        }
        ChartUIUtil.saveLabelPositionIntoCache(getSeriesDefinitionForProcessing());
        sSubType=getSubtypeFromButton(btn);
        ChartCacheManager.getInstance().cacheSubtype(sType,sSubType);
      }
 else {
        if (this.sSubType != null && getSubtypeFromButton(btn).equals(sSubType)) {
          btn.setSelection(true);
        }
      }
    }
  }
 else   if (oSelected.getClass().equals(Table.class)) {
    sType=((String)((TableItem)e.item).getData()).trim();
    if (!sOldType.equals(sType)) {
      sOldType=sType;
      if (!getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
        if (chartModel != null && chartModel instanceof ChartWithAxes) {
          Orientation lastOrientation=ChartCacheManager.getInstance().findOrientation(sType);
          if (lastOrientation != null && this.orientation != lastOrientation) {
            this.orientation=lastOrientation;
            this.rotateAxisTitle((ChartWithAxes)chartModel);
          }
          if (lastOrientation == null) {
            this.orientation=Orientation.VERTICAL_LITERAL;
          }
        }
      }
      if (chartModel != null && chartModel instanceof ChartWithAxes && ChartCacheManager.getInstance().findCategory(sType) != null) {
        boolean bCategory=ChartCacheManager.getInstance().findCategory(sType).booleanValue();
        ((Axis)((ChartWithAxes)chartModel).getAxes().get(0)).setCategoryAxis(bCategory);
      }
      sSubType=null;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      cmpMisc.layout();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbMultipleY)) {
    needUpdateModel=true;
    lblSeriesType.setEnabled(isTwoAxesEnabled());
    Axis xAxis=((Axis)((ChartWithAxes)chartModel).getAxes().get(0));
    ((ChartWizardContext)getContext()).setMoreAxesSupported(cbMultipleY.getSelectionIndex() == 2);
    if (chartModel instanceof ChartWithoutAxes) {
      throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
    }
    ChartAdapter.beginIgnoreNotifications();
    int iAxisNumber=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
    if (cbMultipleY.getSelectionIndex() == 0) {
      if (iAxisNumber > 1) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 1);
      }
    }
 else     if (cbMultipleY.getSelectionIndex() == 1) {
      if (iAxisNumber == 1) {
        ChartUIUtil.addAxis((ChartWithAxes)chartModel);
      }
 else       if (iAxisNumber > 2) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 2);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (xAxis.getAssociatedAxes().size() > 1) {
      String lastSeriesType=ChartCacheManager.getInstance().findSeriesType();
      if (lastSeriesType != null) {
        cbSeriesType.setText(lastSeriesType);
      }
 else {
        Axis overlayAxis=(Axis)xAxis.getAssociatedAxes().get(1);
        String sDisplayName=((SeriesDefinition)overlayAxis.getSeriesDefinitions().get(0)).getDesignTimeSeries().getDisplayName();
        cbSeriesType.setText(sDisplayName);
      }
      changeOverlaySeriesType();
    }
    cbSeriesType.setEnabled(isTwoAxesEnabled());
    if (updateDimensionCombo(sType)) {
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
    }
    cmpMisc.layout();
  }
 else   if (oSelected.equals(cbDimension)) {
    String newDimension=cbDimension.getItem(cbDimension.getSelectionIndex());
    if (!newDimension.equals(sDimension)) {
      sDimension=newDimension;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbSeriesType)) {
    needUpdateModel=true;
    changeOverlaySeriesType();
  }
 else   if (oSelected.equals(cbOutput)) {
    ((ChartWizardContext)getContext()).setOutputFormat(cbOutput.getText());
    if (container != null && container instanceof ChartWizard) {
      ((ChartWizard)container).updateApplayButton();
    }
  }
  if (needUpdateModel) {
    ChartAdapter.notifyUpdateApply();
    refreshChart();
    doPreview();
    if (oSelected.getClass().equals(Table.class)) {
      populateSeriesTypesList();
    }
 else     if (oSelected.equals(cbOrientation)) {
      if (chartModel instanceof ChartWithAxes) {
        rotateAxisTitle((ChartWithAxes)chartModel);
      }
    }
  }
}","public void widgetSelected(SelectionEvent e){
  boolean needUpdateModel=false;
  Object oSelected=e.getSource();
  if (oSelected.getClass().equals(Button.class)) {
    needUpdateModel=true;
    if (oSelected.equals(cbOrientation)) {
      if (cbOrientation.getSelection()) {
        orientation=Orientation.HORIZONTAL_LITERAL;
      }
 else {
        orientation=Orientation.VERTICAL_LITERAL;
      }
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      populateSeriesTypesList();
      ChartCacheManager.getInstance().cacheOrientation(sType,orientation);
    }
 else {
      Button btn=(Button)e.getSource();
      if (btn.getSelection()) {
        if (this.sSubType != null && !getSubtypeFromButton(btn).equals(sSubType)) {
          int iTypeIndex=vSubTypeNames.indexOf(sSubType);
          if (iTypeIndex >= 0) {
            ((Button)cmpTypeButtons.getChildren()[iTypeIndex]).setSelection(false);
            cmpTypeButtons.redraw();
          }
        }
        ChartUIUtil.saveLabelPositionIntoCache(getSeriesDefinitionForProcessing());
        sSubType=getSubtypeFromButton(btn);
        ChartCacheManager.getInstance().cacheSubtype(sType,sSubType);
      }
 else {
        if (this.sSubType != null && getSubtypeFromButton(btn).equals(sSubType)) {
          btn.setSelection(true);
        }
      }
    }
  }
 else   if (oSelected.getClass().equals(Table.class)) {
    sType=((String)((TableItem)e.item).getData()).trim();
    if (!sOldType.equals(sType)) {
      sOldType=sType;
      if (!getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
        if (chartModel != null && chartModel instanceof ChartWithAxes) {
          Orientation lastOrientation=ChartCacheManager.getInstance().findOrientation(sType);
          if (lastOrientation != null && this.orientation != lastOrientation) {
            this.orientation=lastOrientation;
            this.rotateAxisTitle((ChartWithAxes)chartModel);
          }
          if (lastOrientation == null) {
            this.orientation=htTypes.get(sType).getDefaultOrientation();
          }
        }
      }
      if (chartModel != null && chartModel instanceof ChartWithAxes && ChartCacheManager.getInstance().findCategory(sType) != null) {
        boolean bCategory=ChartCacheManager.getInstance().findCategory(sType).booleanValue();
        ((Axis)((ChartWithAxes)chartModel).getAxes().get(0)).setCategoryAxis(bCategory);
      }
      sSubType=null;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      cmpMisc.layout();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbMultipleY)) {
    needUpdateModel=true;
    lblSeriesType.setEnabled(isTwoAxesEnabled());
    Axis xAxis=((Axis)((ChartWithAxes)chartModel).getAxes().get(0));
    ((ChartWizardContext)getContext()).setMoreAxesSupported(cbMultipleY.getSelectionIndex() == 2);
    if (chartModel instanceof ChartWithoutAxes) {
      throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
    }
    ChartAdapter.beginIgnoreNotifications();
    int iAxisNumber=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
    if (cbMultipleY.getSelectionIndex() == 0) {
      if (iAxisNumber > 1) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 1);
      }
    }
 else     if (cbMultipleY.getSelectionIndex() == 1) {
      if (iAxisNumber == 1) {
        ChartUIUtil.addAxis((ChartWithAxes)chartModel);
      }
 else       if (iAxisNumber > 2) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 2);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (xAxis.getAssociatedAxes().size() > 1) {
      String lastSeriesType=ChartCacheManager.getInstance().findSeriesType();
      if (lastSeriesType != null) {
        cbSeriesType.setText(lastSeriesType);
      }
 else {
        Axis overlayAxis=(Axis)xAxis.getAssociatedAxes().get(1);
        String sDisplayName=((SeriesDefinition)overlayAxis.getSeriesDefinitions().get(0)).getDesignTimeSeries().getDisplayName();
        cbSeriesType.setText(sDisplayName);
      }
      changeOverlaySeriesType();
    }
    cbSeriesType.setEnabled(isTwoAxesEnabled());
    if (updateDimensionCombo(sType)) {
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
    }
    cmpMisc.layout();
  }
 else   if (oSelected.equals(cbDimension)) {
    String newDimension=cbDimension.getItem(cbDimension.getSelectionIndex());
    if (!newDimension.equals(sDimension)) {
      sDimension=newDimension;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbSeriesType)) {
    needUpdateModel=true;
    changeOverlaySeriesType();
  }
 else   if (oSelected.equals(cbOutput)) {
    ((ChartWizardContext)getContext()).setOutputFormat(cbOutput.getText());
    if (container != null && container instanceof ChartWizard) {
      ((ChartWizard)container).updateApplayButton();
    }
  }
  if (needUpdateModel) {
    ChartAdapter.notifyUpdateApply();
    refreshChart();
    doPreview();
    if (oSelected.getClass().equals(Table.class)) {
      populateSeriesTypesList();
    }
 else     if (oSelected.equals(cbOrientation)) {
      if (chartModel instanceof ChartWithAxes) {
        rotateAxisTitle((ChartWithAxes)chartModel);
      }
    }
  }
}",0.995516532785354
72599,"/** 
 * Updates the dimension combo according to chart type and axes number
 * @param sSelectedType Chart type
 * @return whether the dimension is changed after updating
 */
private boolean updateDimensionCombo(String sSelectedType){
  boolean isOldExist=false;
  IChartType chartType=(IChartType)htTypes.get(sSelectedType);
  String[] dimensionArray=chartType.getSupportedDimensions();
  int axesNum=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
  if (sDimension == null) {
    sDimension=chartType.getDefaultDimension();
    isOldExist=true;
  }
  cbDimension.removeAll();
  for (int i=0; i < dimensionArray.length; i++) {
    boolean isSupported=chartType.isDimensionSupported(dimensionArray[i],(ChartWizardContext)context,axesNum,0);
    if (isSupported) {
      cbDimension.add(dimensionArray[i]);
    }
    if (!isOldExist && sDimension.equals(dimensionArray[i])) {
      isOldExist=isSupported;
    }
  }
  if (!isOldExist) {
    sDimension=chartType.getDefaultDimension();
  }
  cbDimension.setText(sDimension);
  return !isOldExist;
}","/** 
 * Updates the dimension combo according to chart type and axes number
 * @param sSelectedType Chart type
 * @return whether the dimension is changed after updating
 */
private boolean updateDimensionCombo(String sSelectedType){
  boolean isOldExist=false;
  IChartType chartType=htTypes.get(sSelectedType);
  String[] dimensionArray=chartType.getSupportedDimensions();
  int axesNum=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
  if (sDimension == null) {
    sDimension=chartType.getDefaultDimension();
    isOldExist=true;
  }
  cbDimension.removeAll();
  for (int i=0; i < dimensionArray.length; i++) {
    boolean isSupported=chartType.isDimensionSupported(dimensionArray[i],(ChartWizardContext)context,axesNum,0);
    if (isSupported) {
      cbDimension.add(dimensionArray[i]);
    }
    if (!isOldExist && sDimension.equals(dimensionArray[i])) {
      isOldExist=isSupported;
    }
  }
  if (!isOldExist) {
    sDimension=chartType.getDefaultDimension();
  }
  cbDimension.setText(sDimension);
  return !isOldExist;
}",0.9942307692307693
72600,"public void createControl(Composite parent){
  manipulateCompatible();
  initControl(parent);
  if (previewPainter == null) {
    previewPainter=createPreviewPainter();
  }
  doPreview();
}","public void createControl(Composite parent){
  manipulateCompatible();
  initControl(parent);
  if (previewPainter == null) {
    previewPainter=createPreviewPainter();
  }
  if (!isSutaskPreviewable(getCurrentSubtask())) {
    doPreview();
  }
}",0.8689655172413793
72601,"private void populateSeriesTypesList(){
  cbSeriesType.removeAll();
  Series series=getSeriesDefinitionForProcessing().getDesignTimeSeries();
  if (series.canParticipateInCombination()) {
    populateSeriesTypes(ChartUIExtensionsImpl.instance().getUIChartTypeExtensions(getContext().getClass().getSimpleName()),series,this.orientation);
  }
 else {
    String seriesName=series.getDisplayName();
    ;
    cbSeriesType.add(seriesName);
    cbSeriesType.select(0);
  }
  if (this.chartModel != null && chartModel instanceof ChartWithAxes) {
    String lastType=ChartCacheManager.getInstance().findSeriesType();
    if (lastType != null) {
      cbSeriesType.setText(lastType);
    }
 else {
      Axis xAxis=((Axis)((ChartWithAxes)chartModel).getAxes().get(0));
      if (xAxis.getAssociatedAxes().size() > 1) {
        Axis overlayAxis=(Axis)xAxis.getAssociatedAxes().get(1);
        if (!overlayAxis.getSeriesDefinitions().isEmpty()) {
          String sDisplayName=((SeriesDefinition)overlayAxis.getSeriesDefinitions().get(0)).getDesignTimeSeries().getDisplayName();
          cbSeriesType.setText(sDisplayName);
        }
      }
    }
    changeOverlaySeriesType();
    refreshChart();
    doPreview();
  }
}","private void populateSeriesTypesList(boolean bPreivew){
  cbSeriesType.removeAll();
  Series series=getSeriesDefinitionForProcessing().getDesignTimeSeries();
  if (series.canParticipateInCombination()) {
    populateSeriesTypes(ChartUIExtensionsImpl.instance().getUIChartTypeExtensions(getContext().getClass().getSimpleName()),series,this.orientation);
  }
 else {
    String seriesName=series.getDisplayName();
    ;
    cbSeriesType.add(seriesName);
    cbSeriesType.select(0);
  }
  if (this.chartModel != null && chartModel instanceof ChartWithAxes) {
    String lastType=ChartCacheManager.getInstance().findSeriesType();
    if (lastType != null) {
      cbSeriesType.setText(lastType);
    }
 else {
      Axis xAxis=((Axis)((ChartWithAxes)chartModel).getAxes().get(0));
      if (xAxis.getAssociatedAxes().size() > 1) {
        Axis overlayAxis=(Axis)xAxis.getAssociatedAxes().get(1);
        if (!overlayAxis.getSeriesDefinitions().isEmpty()) {
          String sDisplayName=((SeriesDefinition)overlayAxis.getSeriesDefinitions().get(0)).getDesignTimeSeries().getDisplayName();
          cbSeriesType.setText(sDisplayName);
        }
      }
    }
    changeOverlaySeriesType();
    refreshChart();
    if (bPreivew) {
      doPreview();
    }
  }
}",0.9821717990275528
72602,"private void placeComponents(){
  foSashForm=new SashForm(topControl,SWT.VERTICAL);
{
    GridLayout layout=new GridLayout();
    foSashForm.setLayout(layout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    gridData.heightHint=570;
    foSashForm.setLayoutData(gridData);
  }
  createPreviewArea();
  createTypeArea();
  setDefaultTypeSelection();
  refreshChart();
  populateSeriesTypesList();
}","private void placeComponents(){
  foSashForm=new SashForm(topControl,SWT.VERTICAL);
{
    GridLayout layout=new GridLayout();
    foSashForm.setLayout(layout);
    GridData gridData=new GridData(GridData.FILL_BOTH);
    gridData.heightHint=570;
    foSashForm.setLayoutData(gridData);
  }
  createPreviewArea();
  createTypeArea();
  setDefaultTypeSelection();
  refreshChart();
  populateSeriesTypesList(false);
}",0.993924665856622
72603,"public void widgetSelected(SelectionEvent e){
  boolean needUpdateModel=false;
  Object oSelected=e.getSource();
  if (oSelected.getClass().equals(Button.class)) {
    needUpdateModel=true;
    if (oSelected.equals(cbOrientation)) {
      if (cbOrientation.getSelection()) {
        orientation=Orientation.HORIZONTAL_LITERAL;
      }
 else {
        orientation=Orientation.VERTICAL_LITERAL;
      }
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      populateSeriesTypesList();
      ChartCacheManager.getInstance().cacheOrientation(sType,orientation);
    }
 else {
      Button btn=(Button)e.getSource();
      if (btn.getSelection()) {
        if (this.sSubType != null && !getSubtypeFromButton(btn).equals(sSubType)) {
          int iTypeIndex=vSubTypeNames.indexOf(sSubType);
          if (iTypeIndex >= 0) {
            ((Button)cmpTypeButtons.getChildren()[iTypeIndex]).setSelection(false);
            cmpTypeButtons.redraw();
          }
        }
        ChartUIUtil.saveLabelPositionIntoCache(getSeriesDefinitionForProcessing());
        sSubType=getSubtypeFromButton(btn);
        ChartCacheManager.getInstance().cacheSubtype(sType,sSubType);
      }
 else {
        if (this.sSubType != null && getSubtypeFromButton(btn).equals(sSubType)) {
          btn.setSelection(true);
        }
      }
    }
  }
 else   if (oSelected.getClass().equals(Table.class)) {
    sType=((String)((TableItem)e.item).getData()).trim();
    if (!sOldType.equals(sType)) {
      sOldType=sType;
      if (!getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
        if (chartModel != null && chartModel instanceof ChartWithAxes) {
          Orientation lastOrientation=ChartCacheManager.getInstance().findOrientation(sType);
          if (lastOrientation != null && this.orientation != lastOrientation) {
            this.orientation=lastOrientation;
            this.rotateAxisTitle((ChartWithAxes)chartModel);
          }
          if (lastOrientation == null) {
            this.orientation=htTypes.get(sType).getDefaultOrientation();
          }
        }
      }
      if (chartModel != null && chartModel instanceof ChartWithAxes && ChartCacheManager.getInstance().findCategory(sType) != null) {
        boolean bCategory=ChartCacheManager.getInstance().findCategory(sType).booleanValue();
        ((Axis)((ChartWithAxes)chartModel).getAxes().get(0)).setCategoryAxis(bCategory);
      }
      sSubType=null;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      cmpMisc.layout();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbMultipleY)) {
    needUpdateModel=true;
    lblSeriesType.setEnabled(isTwoAxesEnabled());
    Axis xAxis=((Axis)((ChartWithAxes)chartModel).getAxes().get(0));
    ((ChartWizardContext)getContext()).setMoreAxesSupported(cbMultipleY.getSelectionIndex() == 2);
    if (chartModel instanceof ChartWithoutAxes) {
      throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
    }
    ChartAdapter.beginIgnoreNotifications();
    int iAxisNumber=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
    if (cbMultipleY.getSelectionIndex() == 0) {
      if (iAxisNumber > 1) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 1);
      }
    }
 else     if (cbMultipleY.getSelectionIndex() == 1) {
      if (iAxisNumber == 1) {
        ChartUIUtil.addAxis((ChartWithAxes)chartModel);
      }
 else       if (iAxisNumber > 2) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 2);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (xAxis.getAssociatedAxes().size() > 1) {
      String lastSeriesType=ChartCacheManager.getInstance().findSeriesType();
      if (lastSeriesType != null) {
        cbSeriesType.setText(lastSeriesType);
      }
 else {
        Axis overlayAxis=(Axis)xAxis.getAssociatedAxes().get(1);
        String sDisplayName=((SeriesDefinition)overlayAxis.getSeriesDefinitions().get(0)).getDesignTimeSeries().getDisplayName();
        cbSeriesType.setText(sDisplayName);
      }
      changeOverlaySeriesType();
    }
    cbSeriesType.setEnabled(isTwoAxesEnabled());
    if (updateDimensionCombo(sType)) {
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
    }
    cmpMisc.layout();
  }
 else   if (oSelected.equals(cbDimension)) {
    String newDimension=cbDimension.getItem(cbDimension.getSelectionIndex());
    if (!newDimension.equals(sDimension)) {
      sDimension=newDimension;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbSeriesType)) {
    needUpdateModel=true;
    changeOverlaySeriesType();
  }
 else   if (oSelected.equals(cbOutput)) {
    ((ChartWizardContext)getContext()).setOutputFormat(cbOutput.getText());
    if (container != null && container instanceof ChartWizard) {
      ((ChartWizard)container).updateApplayButton();
    }
  }
  if (needUpdateModel) {
    ChartAdapter.notifyUpdateApply();
    refreshChart();
    doPreview();
    if (oSelected.getClass().equals(Table.class)) {
      populateSeriesTypesList();
    }
 else     if (oSelected.equals(cbOrientation)) {
      if (chartModel instanceof ChartWithAxes) {
        rotateAxisTitle((ChartWithAxes)chartModel);
      }
    }
  }
}","public void widgetSelected(SelectionEvent e){
  boolean needUpdateModel=false;
  Object oSelected=e.getSource();
  if (oSelected.getClass().equals(Button.class)) {
    needUpdateModel=true;
    if (oSelected.equals(cbOrientation)) {
      if (cbOrientation.getSelection()) {
        orientation=Orientation.HORIZONTAL_LITERAL;
      }
 else {
        orientation=Orientation.VERTICAL_LITERAL;
      }
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      populateSeriesTypesList(true);
      ChartCacheManager.getInstance().cacheOrientation(sType,orientation);
    }
 else {
      Button btn=(Button)e.getSource();
      if (btn.getSelection()) {
        if (this.sSubType != null && !getSubtypeFromButton(btn).equals(sSubType)) {
          int iTypeIndex=vSubTypeNames.indexOf(sSubType);
          if (iTypeIndex >= 0) {
            ((Button)cmpTypeButtons.getChildren()[iTypeIndex]).setSelection(false);
            cmpTypeButtons.redraw();
          }
        }
        ChartUIUtil.saveLabelPositionIntoCache(getSeriesDefinitionForProcessing());
        sSubType=getSubtypeFromButton(btn);
        ChartCacheManager.getInstance().cacheSubtype(sType,sSubType);
      }
 else {
        if (this.sSubType != null && getSubtypeFromButton(btn).equals(sSubType)) {
          btn.setSelection(true);
        }
      }
    }
  }
 else   if (oSelected.getClass().equals(Table.class)) {
    sType=((String)((TableItem)e.item).getData()).trim();
    if (!sOldType.equals(sType)) {
      sOldType=sType;
      if (!getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
        if (chartModel != null && chartModel instanceof ChartWithAxes) {
          Orientation lastOrientation=ChartCacheManager.getInstance().findOrientation(sType);
          if (lastOrientation != null && this.orientation != lastOrientation) {
            this.orientation=lastOrientation;
            this.rotateAxisTitle((ChartWithAxes)chartModel);
          }
          if (lastOrientation == null) {
            this.orientation=htTypes.get(sType).getDefaultOrientation();
          }
        }
      }
      if (chartModel != null && chartModel instanceof ChartWithAxes && ChartCacheManager.getInstance().findCategory(sType) != null) {
        boolean bCategory=ChartCacheManager.getInstance().findCategory(sType).booleanValue();
        ((Axis)((ChartWithAxes)chartModel).getAxes().get(0)).setCategoryAxis(bCategory);
      }
      sSubType=null;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      cmpMisc.layout();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbMultipleY)) {
    needUpdateModel=true;
    lblSeriesType.setEnabled(isTwoAxesEnabled());
    Axis xAxis=((Axis)((ChartWithAxes)chartModel).getAxes().get(0));
    ((ChartWizardContext)getContext()).setMoreAxesSupported(cbMultipleY.getSelectionIndex() == 2);
    if (chartModel instanceof ChartWithoutAxes) {
      throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
    }
    ChartAdapter.beginIgnoreNotifications();
    int iAxisNumber=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
    if (cbMultipleY.getSelectionIndex() == 0) {
      if (iAxisNumber > 1) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 1);
      }
    }
 else     if (cbMultipleY.getSelectionIndex() == 1) {
      if (iAxisNumber == 1) {
        ChartUIUtil.addAxis((ChartWithAxes)chartModel);
      }
 else       if (iAxisNumber > 2) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 2);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (xAxis.getAssociatedAxes().size() > 1) {
      String lastSeriesType=ChartCacheManager.getInstance().findSeriesType();
      if (lastSeriesType != null) {
        cbSeriesType.setText(lastSeriesType);
      }
 else {
        Axis overlayAxis=(Axis)xAxis.getAssociatedAxes().get(1);
        String sDisplayName=((SeriesDefinition)overlayAxis.getSeriesDefinitions().get(0)).getDesignTimeSeries().getDisplayName();
        cbSeriesType.setText(sDisplayName);
      }
      changeOverlaySeriesType();
    }
    cbSeriesType.setEnabled(isTwoAxesEnabled());
    if (updateDimensionCombo(sType)) {
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
    }
    cmpMisc.layout();
  }
 else   if (oSelected.equals(cbDimension)) {
    String newDimension=cbDimension.getItem(cbDimension.getSelectionIndex());
    if (!newDimension.equals(sDimension)) {
      sDimension=newDimension;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbSeriesType)) {
    needUpdateModel=true;
    changeOverlaySeriesType();
  }
 else   if (oSelected.equals(cbOutput)) {
    ((ChartWizardContext)getContext()).setOutputFormat(cbOutput.getText());
    if (container != null && container instanceof ChartWizard) {
      ((ChartWizard)container).updateApplayButton();
    }
  }
  if (needUpdateModel) {
    ChartAdapter.notifyUpdateApply();
    refreshChart();
    doPreview();
    if (oSelected.getClass().equals(Table.class)) {
      populateSeriesTypesList(true);
    }
 else     if (oSelected.equals(cbOrientation)) {
      if (chartModel instanceof ChartWithAxes) {
        rotateAxisTitle((ChartWithAxes)chartModel);
      }
    }
  }
}",0.999254287844892
72604,"private Data createDateData(Object txt,StyleEntry entry,String timeFormat){
  timeFormat=ExcelUtil.parse(timeFormat);
  if (timeFormat.equals(""String_Node_Str"")) {
    timeFormat=""String_Node_Str"";
  }
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,timeFormat);
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.DATE);
  return new Data(txt,entry,Data.DATE);
}","private Data createDateData(Object txt,StyleEntry entry,String timeFormat){
  timeFormat=ExcelUtil.parse(timeFormat);
  if (timeFormat.equals(""String_Node_Str"")) {
    if (txt instanceof java.sql.Date) {
      timeFormat=""String_Node_Str"";
    }
 else     if (txt instanceof java.sql.Time) {
      timeFormat=""String_Node_Str"";
    }
 else {
      timeFormat=""String_Node_Str"";
    }
  }
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,timeFormat);
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.DATE);
  return new Data(txt,entry,Data.DATE);
}",0.7982646420824295
72605,"public JSObjectMetaData getReturn(){
  JSObjectMetaData meta=JSSyntaxContext.getEnginJSObject(method.getReturnType());
  if (meta == null)   try {
    return JSSyntaxContext.getJavaClassMeta(method.getReturnType());
  }
 catch (  ClassNotFoundException e) {
    return null;
  }
  return meta;
}","public JSObjectMetaData getReturn(){
  JSObjectMetaData meta=JSSyntaxContext.getEnginJSObject(method.getReturnType());
  if (meta == null) {
    try {
      return JSSyntaxContext.getJavaClassMeta(method.getReturnType());
    }
 catch (    ClassNotFoundException e) {
      return null;
    }
  }
  return meta;
}",0.950657894736842
72606,"private CompletionProposal[] getCompletionProposals(JSObjectMetaData meta,int offset){
  List proposals=new ArrayList();
  int wordLength=currentWord == null ? 0 : currentWord.length();
  JSField[] members=meta.getFields();
  if (members != null) {
    for (int i=0; i < members.length; i++) {
      if (currentWord == null || currentWord.equals(""String_Node_Str"") || members[i].getName().toLowerCase().startsWith(currentWord.toLowerCase())) {
        proposals.add(new CompletionProposal(members[i].getName(),offset - wordLength,wordLength,members[i].getName().length(),getMemberImage(members[i].getVisibility()),members[i].getDisplayText(),null,null));
      }
    }
  }
  JSMethod[] methods=meta.getMethods();
  if (methods != null) {
    for (int i=0; i < methods.length; i++) {
      if (currentWord == null || currentWord.equals(""String_Node_Str"") || methods[i].getName().toLowerCase().startsWith(currentWord.toLowerCase())) {
        proposals.add(new CompletionProposal(""String_Node_Str"" + methods[i].getName() + ""String_Node_Str"",offset - wordLength - 1,wordLength + 1,methods[i].getName().length() + 2,getMethodImage(methods[i].getVisibility()),methods[i].getDisplayText(),null,null));
      }
    }
  }
  return (CompletionProposal[])proposals.toArray(new CompletionProposal[proposals.size()]);
}","private CompletionProposal[] getCompletionProposals(JSObjectMetaData meta,int offset){
  List<CompletionProposal> proposals=new ArrayList<CompletionProposal>();
  int wordLength=currentWord == null ? 0 : currentWord.length();
  JSField[] members=meta.getFields();
  if (members != null) {
    for (int i=0; i < members.length; i++) {
      if (currentWord == null || currentWord.equals(""String_Node_Str"") || members[i].getName().toLowerCase().startsWith(currentWord.toLowerCase())) {
        proposals.add(new CompletionProposal(members[i].getName(),offset - wordLength,wordLength,members[i].getName().length(),getMemberImage(members[i].getVisibility()),members[i].getDisplayText(),null,null));
      }
    }
  }
  JSMethod[] methods=meta.getMethods();
  if (methods != null) {
    for (int i=0; i < methods.length; i++) {
      if (currentWord == null || currentWord.equals(""String_Node_Str"") || methods[i].getName().toLowerCase().startsWith(currentWord.toLowerCase())) {
        JSObjectMetaData[] args=methods[i].getArguments();
        boolean hasArg=args != null && args.length > 0;
        proposals.add(new CompletionProposal(""String_Node_Str"" + methods[i].getName() + ""String_Node_Str"",offset - wordLength - 1,wordLength + 1,methods[i].getName().length() + (hasArg ? 2 : 3),getMethodImage(methods[i].getVisibility()),methods[i].getDisplayText(),null,null));
      }
    }
  }
  return proposals.toArray(new CompletionProposal[proposals.size()]);
}",0.9145546705286024
72607,"public JSObjectMetaData getVariableMeta(String variableName){
  if (objectMetaMap.containsKey(variableName))   return (JSObjectMetaData)objectMetaMap.get(variableName);
 else   return getEnginJSObject(variableName);
}","public JSObjectMetaData getVariableMeta(String variableName){
  if (objectMetaMap.containsKey(variableName)) {
    return objectMetaMap.get(variableName);
  }
 else {
    return getEnginJSObject(variableName);
  }
}",0.6666666666666666
72608,"public static JSObjectMetaData[] getAllEnginJSObjects(){
  return (JSObjectMetaData[])engineObjectMap.values().toArray(new JSObjectMetaData[engineObjectMap.values().size()]);
}","public static JSObjectMetaData[] getAllEnginJSObjects(){
  return engineObjectMap.values().toArray(new JSObjectMetaData[engineObjectMap.values().size()]);
}",0.9397590361445785
72609,"public static JSObjectMetaData getJavaClassMeta(String className) throws ClassNotFoundException {
  JSObjectMetaData meta=null;
  if (!classMap.containsKey(className)) {
    meta=new JavaClassJSObject(className);
    classMap.put(className,meta);
  }
 else {
    meta=(JSObjectMetaData)classMap.get(className);
  }
  return meta;
}","public static JSObjectMetaData getJavaClassMeta(String className) throws ClassNotFoundException {
  if (className == null) {
    return null;
  }
  JSObjectMetaData meta=null;
  if (!javaObjectMap.containsKey(className)) {
    meta=new JavaClassJSObject(className);
    javaObjectMap.put(className,meta);
  }
 else {
    meta=javaObjectMap.get(className);
  }
  return meta;
}",0.842998585572843
72610,"private void printCube(CubeCursor cursor,List columnEdgeBindingNames,String rowEdgeBindingNames,String measureBindingNames,String columnAggr,String rowAggr,String overallAggr) throws Exception {
  EdgeCursor edge1=(EdgeCursor)(cursor.getOrdinateEdge().get(0));
  EdgeCursor edge2=(EdgeCursor)(cursor.getOrdinateEdge().get(1));
  String[] lines=new String[edge1.getDimensionCursor().size()];
  for (int i=0; i < lines.length; i++) {
    lines[i]=""String_Node_Str"";
  }
  while (edge1.next()) {
    for (int i=0; i < lines.length; i++) {
      lines[i]+=cursor.getObject(columnEdgeBindingNames.get(i).toString()) + ""String_Node_Str"";
    }
  }
  if (rowAggr != null)   lines[lines.length - 1]+=""String_Node_Str"";
  String output=""String_Node_Str"";
  for (int i=0; i < lines.length; i++) {
    output+=""String_Node_Str"" + lines[i];
  }
  while (edge2.next()) {
    String line=cursor.getObject(rowEdgeBindingNames).toString() + ""String_Node_Str"";
    edge1.beforeFirst();
    while (edge1.next()) {
      line+=cursor.getObject(measureBindingNames) + ""String_Node_Str"";
    }
    if (rowAggr != null)     line+=cursor.getObject(rowAggr);
    output+=""String_Node_Str"" + line;
  }
  if (columnAggr != null) {
    String line=""String_Node_Str"" + ""String_Node_Str"";
    edge1.beforeFirst();
    while (edge1.next()) {
      line+=cursor.getObject(columnAggr) + ""String_Node_Str"";
    }
    if (overallAggr != null)     line+=cursor.getObject(overallAggr);
    output+=""String_Node_Str"" + line;
  }
  this.testPrint(output);
  this.checkOutputFile();
}","private void printCube(CubeCursor cursor,List columnEdgeBindingNames,List rowEdgeBindingNames,String measureBindingName,String[] columnAggrs) throws Exception {
  String output=getOutputFromCursor(cursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingName,columnAggrs);
  this.testPrint(output);
}",0.1447084233261339
72611,"/** 
 * @param result
 * @param key
 * @throws EngineException 
 */
private void addConditionalExprBindings(TotalExprBinding result,IConditionalExpression key,List bindings,String groupName,boolean isCube) throws EngineException {
  try {
    IConditionalExpression ce=key;
    if (!hasAggregationInFilter(key)) {
      result.addNewExpression(ce);
      return;
    }
    if (groupName != null)     ce.setGroupName(groupName);
    String bindingName=TOTAL_PREFIX + totalColumnSuffix;
    totalColumnSuffix++;
    Binding columnBinding=new Binding(bindingName,ce);
    if (groupName != null) {
      columnBinding.addAggregateOn(groupName);
    }
    List allColumnBindings=new ArrayList();
    allColumnBindings.add(columnBinding);
    result.addColumnBindings(allColumnBindings);
    if (!isCube) {
      result.addNewExpression(org.eclipse.birt.core.data.ExpressionUtil.createJSRowExpression(bindingName));
    }
 else {
      result.addNewExpression(org.eclipse.birt.core.data.ExpressionUtil.createJSDataExpression(bindingName));
    }
  }
 catch (  DataException e) {
    throw new EngineException(e.getLocalizedMessage());
  }
}","/** 
 * @param result
 * @param key
 * @throws EngineException 
 */
private void addConditionalExprBindings(TotalExprBinding result,IConditionalExpression key,List bindings,String groupName,boolean isCube) throws EngineException {
  try {
    IConditionalExpression ce=key;
    if (!hasAggregationInFilter(key)) {
      result.addNewExpression(ce);
      return;
    }
    if (groupName != null)     ce.setGroupName(groupName);
    String bindingName=TOTAL_PREFIX + totalColumnSuffix;
    totalColumnSuffix++;
    Binding columnBinding=new Binding(bindingName,ce);
    if (groupName != null) {
      columnBinding.addAggregateOn(groupName);
    }
    List allColumnBindings=new ArrayList();
    allColumnBindings.add(columnBinding);
    result.addColumnBindings(allColumnBindings);
    if (!isCube) {
      result.addNewExpression(org.eclipse.birt.core.data.ExpressionUtil.createJSRowExpression(bindingName));
    }
 else {
      result.addNewExpression(org.eclipse.birt.core.data.ExpressionUtil.createJSDataExpression(bindingName));
    }
  }
 catch (  DataException e) {
    throw new EngineException(e);
  }
}",0.9902048085485308
72612,"/** 
 * Translate the old expression with ""row"" as indicator to new expression using ""dataSetRow"" as indicator.
 * @param oldExpression
 * @return
 * @throws DataException
 */
private String prepareTotalExpression(String oldExpression,List columnBindings,String groupName,boolean isCube) throws EngineException {
  try {
    if (oldExpression == null)     return null;
    char[] chars=oldExpression.toCharArray();
    if (chars.length < 8)     return oldExpression;
 else {
      ParseIndicator indicator=new ParseIndicator(0,0,false,false,true,true);
      for (int i=0; i < chars.length; i++) {
        indicator=getParseIndicator(chars,i,indicator.omitNextQuote(),indicator.getCandidateKey1(),indicator.getCandidateKey2());
        i=indicator.getNewIndex();
        if (i >= indicator.getRetrieveSize() + 6) {
          if (indicator.isCandidateKey() && chars[i - indicator.getRetrieveSize() - 6] == 'T' && chars[i - indicator.getRetrieveSize() - 5] == 'o' && chars[i - indicator.getRetrieveSize() - 4] == 't' && chars[i - indicator.getRetrieveSize() - 3] == 'a' && chars[i - indicator.getRetrieveSize() - 2] == 'l' && chars[i - indicator.getRetrieveSize() - 1] == '.') {
            if (i - indicator.getRetrieveSize() - 7 <= 0 || isValidProceeding(chars[i - indicator.getRetrieveSize() - 7])) {
              String firstPart=oldExpression.substring(0,i - indicator.getRetrieveSize() - 6);
              int startIndex=i - indicator.getRetrieveSize() - 6;
              i=advanceToNextValidEncloser(chars,i);
              String secondPart=""String_Node_Str"";
              String name=""String_Node_Str"";
              String expr=""String_Node_Str"";
              if (i < chars.length) {
                int endIndex=i + 1;
                expr=oldExpression.substring(startIndex,endIndex);
                secondPart=prepareTotalExpression(oldExpression.substring(i + 1 - indicator.getRetrieveSize()),columnBindings,groupName,isCube);
              }
 else {
                expr=oldExpression.substring(startIndex);
              }
              boolean shouldAddToList=true;
              for (int j=0; j < columnBindings.size(); j++) {
                IBaseExpression expression=((IBinding)columnBindings.get(j)).getExpression();
                if (expression instanceof IScriptExpression) {
                  if (oldExpression.equals(((IScriptExpression)expression).getText())) {
                    shouldAddToList=false;
                    name=((IBinding)columnBindings.get(j)).getBindingName();
                    break;
                  }
                }
              }
              if (shouldAddToList) {
                name=TOTAL_PREFIX + totalColumnSuffix;
                totalColumnSuffix++;
                ScriptExpression se=new ScriptExpression(expr);
                se.setGroupName(groupName);
                Binding columnBinding=new Binding(name,se);
                columnBindings.add(columnBinding);
              }
              String newExpression=null;
              if (!isCube) {
                newExpression=firstPart + org.eclipse.birt.core.data.ExpressionUtil.createJSRowExpression(name) + secondPart;
              }
 else {
                newExpression=firstPart + org.eclipse.birt.core.data.ExpressionUtil.createJSDataExpression(name) + secondPart;
              }
              return newExpression;
            }
          }
        }
      }
    }
    return oldExpression;
  }
 catch (  DataException e) {
    throw new EngineException(e.getLocalizedMessage());
  }
}","/** 
 * Translate the old expression with ""row"" as indicator to new expression using ""dataSetRow"" as indicator.
 * @param oldExpression
 * @return
 * @throws DataException
 */
private String prepareTotalExpression(String oldExpression,List columnBindings,String groupName,boolean isCube) throws EngineException {
  try {
    if (oldExpression == null)     return null;
    char[] chars=oldExpression.toCharArray();
    if (chars.length < 8)     return oldExpression;
 else {
      ParseIndicator indicator=new ParseIndicator(0,0,false,false,true,true);
      for (int i=0; i < chars.length; i++) {
        indicator=getParseIndicator(chars,i,indicator.omitNextQuote(),indicator.getCandidateKey1(),indicator.getCandidateKey2());
        i=indicator.getNewIndex();
        if (i >= indicator.getRetrieveSize() + 6) {
          if (indicator.isCandidateKey() && chars[i - indicator.getRetrieveSize() - 6] == 'T' && chars[i - indicator.getRetrieveSize() - 5] == 'o' && chars[i - indicator.getRetrieveSize() - 4] == 't' && chars[i - indicator.getRetrieveSize() - 3] == 'a' && chars[i - indicator.getRetrieveSize() - 2] == 'l' && chars[i - indicator.getRetrieveSize() - 1] == '.') {
            if (i - indicator.getRetrieveSize() - 7 <= 0 || isValidProceeding(chars[i - indicator.getRetrieveSize() - 7])) {
              String firstPart=oldExpression.substring(0,i - indicator.getRetrieveSize() - 6);
              int startIndex=i - indicator.getRetrieveSize() - 6;
              i=advanceToNextValidEncloser(chars,i);
              String secondPart=""String_Node_Str"";
              String name=""String_Node_Str"";
              String expr=""String_Node_Str"";
              if (i < chars.length) {
                int endIndex=i + 1;
                expr=oldExpression.substring(startIndex,endIndex);
                secondPart=prepareTotalExpression(oldExpression.substring(i + 1 - indicator.getRetrieveSize()),columnBindings,groupName,isCube);
              }
 else {
                expr=oldExpression.substring(startIndex);
              }
              boolean shouldAddToList=true;
              for (int j=0; j < columnBindings.size(); j++) {
                IBaseExpression expression=((IBinding)columnBindings.get(j)).getExpression();
                if (expression instanceof IScriptExpression) {
                  if (oldExpression.equals(((IScriptExpression)expression).getText())) {
                    shouldAddToList=false;
                    name=((IBinding)columnBindings.get(j)).getBindingName();
                    break;
                  }
                }
              }
              if (shouldAddToList) {
                name=TOTAL_PREFIX + totalColumnSuffix;
                totalColumnSuffix++;
                ScriptExpression se=new ScriptExpression(expr);
                se.setGroupName(groupName);
                Binding columnBinding=new Binding(name,se);
                columnBindings.add(columnBinding);
              }
              String newExpression=null;
              if (!isCube) {
                newExpression=firstPart + org.eclipse.birt.core.data.ExpressionUtil.createJSRowExpression(name) + secondPart;
              }
 else {
                newExpression=firstPart + org.eclipse.birt.core.data.ExpressionUtil.createJSDataExpression(name) + secondPart;
              }
              return newExpression;
            }
          }
        }
      }
    }
    return oldExpression;
  }
 catch (  DataException e) {
    throw new EngineException(e);
  }
}",0.9968714448236632
72613,"public IBaseResultSet executeQuery(IBaseResultSet parent,IDataQueryDefinition query,Object handle){
  IDataEngine dataEngine=context.getDataEngine();
  if (query != null) {
    boolean useCache=false;
    if (handle instanceof ReportItemHandle) {
      ReportItemHandle referenceHandle=((ReportItemHandle)handle).getDataBindingReference();
      if (referenceHandle != null) {
        useCache=true;
      }
    }
    try {
      IBaseResultSet rset=dataEngine.execute(parent,query,useCache);
      context.setResultSet(rset);
      return rset;
    }
 catch (    BirtException ex) {
      log.log(Level.SEVERE,ex.getMessage(),ex);
      context.addException(this.getDesignHandle(),new EngineException(ex.getLocalizedMessage(),ex));
      return null;
    }
  }
  return null;
}","public IBaseResultSet executeQuery(IBaseResultSet parent,IDataQueryDefinition query,Object handle){
  IDataEngine dataEngine=context.getDataEngine();
  if (query != null) {
    boolean useCache=false;
    if (handle instanceof ReportItemHandle) {
      ReportItemHandle referenceHandle=((ReportItemHandle)handle).getDataBindingReference();
      if (referenceHandle != null) {
        useCache=true;
      }
    }
    try {
      IBaseResultSet rset=dataEngine.execute(parent,query,useCache);
      context.setResultSet(rset);
      return rset;
    }
 catch (    BirtException ex) {
      log.log(Level.SEVERE,ex.getMessage(),ex);
      context.addException(this.getDesignHandle(),new EngineException(ex));
      return null;
    }
  }
  return null;
}",0.983670803396473
72614,"public IContent execute(){
  ExtendedItemDesign extDesign=(ExtendedItemDesign)design;
  IForeignContent extContent=report.createForeignContent();
  setContent(extContent);
  try {
    executeQueries();
  }
 catch (  BirtException ex) {
    logger.log(Level.SEVERE,ex.getMessage(),ex);
    context.addException(design.getHandle(),new EngineException(ex.getLocalizedMessage(),ex));
    return null;
  }
  initializeContent(extDesign,extContent);
  processAction(extDesign,extContent);
  processBookmark(extDesign,extContent);
  processStyle(extDesign,extContent);
  processVisibility(extDesign,extContent);
  generateContent(extDesign,extContent);
  return extContent;
}","public IContent execute(){
  ExtendedItemDesign extDesign=(ExtendedItemDesign)design;
  IForeignContent extContent=report.createForeignContent();
  setContent(extContent);
  try {
    executeQueries();
  }
 catch (  BirtException ex) {
    logger.log(Level.SEVERE,ex.getMessage(),ex);
    context.addException(design.getHandle(),new EngineException(ex));
    return null;
  }
  initializeContent(extDesign,extContent);
  processAction(extDesign,extContent);
  processBookmark(extDesign,extContent);
  processStyle(extDesign,extContent);
  processVisibility(extDesign,extContent);
  generateContent(extDesign,extContent);
  return extContent;
}",0.98093058733791
72615,"protected void doExecute() throws Exception {
  InstanceID iid=content.getInstanceID();
  DataID dataId=iid.getDataID();
  if (dataId != null) {
    IBaseResultSet rset=getResultSet();
    if (rset == null) {
      rset=restoreParentResultSet();
    }
    if (rset != null) {
      if (rset instanceof IQueryResultSet) {
        IQueryResultSet qrset=(IQueryResultSet)rset;
        long rowId=dataId.getRowID();
        if (rowId != -1) {
          qrset.skipTo(rowId);
        }
      }
 else       if (rset instanceof ICubeResultSet) {
        ICubeResultSet crset=(ICubeResultSet)rset;
        String cid=dataId.getCellID();
        if (cid != null) {
          crset.skipTo(cid);
        }
      }
    }
  }
  executeQuery();
}","protected void doExecute() throws IOException, BirtException {
  InstanceID iid=content.getInstanceID();
  DataID dataId=iid.getDataID();
  if (dataId != null) {
    IBaseResultSet rset=getResultSet();
    if (rset == null) {
      rset=restoreParentResultSet();
    }
    if (rset != null) {
      if (rset instanceof IQueryResultSet) {
        IQueryResultSet qrset=(IQueryResultSet)rset;
        long rowId=dataId.getRowID();
        if (rowId != -1) {
          qrset.skipTo(rowId);
        }
      }
 else       if (rset instanceof ICubeResultSet) {
        ICubeResultSet crset=(ICubeResultSet)rset;
        String cid=dataId.getCellID();
        if (cid != null) {
          crset.skipTo(cid);
        }
      }
    }
  }
  executeQuery();
}",0.9885057471264368
72616,"public IContent execute(){
  if (!executed) {
    executed=true;
    try {
      if (offset != -1) {
        generateUniqueID();
        content=reader.loadContent(offset);
        content.setGenerateBy(design);
        instanceId=content.getInstanceID();
        IContent pContent=getParentContent();
        if (pContent != null) {
          content.setParent(pContent);
          instanceId=new InstanceID(pContent.getInstanceID(),instanceId.getUniqueID(),instanceId.getComponentID(),instanceId.getDataID());
          content.setInstanceID(instanceId);
        }
        doExecute();
      }
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,ex.getMessage(),ex);
      context.addException(this.getDesign(),new EngineException(ex.getLocalizedMessage(),ex));
    }
  }
  return content;
}","public IContent execute(){
  if (!executed) {
    executed=true;
    try {
      if (offset != -1) {
        generateUniqueID();
        content=reader.loadContent(offset);
        content.setGenerateBy(design);
        instanceId=content.getInstanceID();
        IContent pContent=getParentContent();
        if (pContent != null) {
          content.setParent(pContent);
          instanceId=new InstanceID(pContent.getInstanceID(),instanceId.getUniqueID(),instanceId.getComponentID(),instanceId.getDataID());
          content.setInstanceID(instanceId);
        }
        doExecute();
      }
    }
 catch (    BirtException ex) {
      logger.log(Level.WARNING,ex.getMessage(),ex);
      context.addException(this.getDesign(),new EngineException(ex));
    }
catch (    IOException ex) {
      logger.log(Level.WARNING,ex.getMessage(),ex);
      context.addException(this.getDesign(),new EngineException(ex.getLocalizedMessage(),ex));
    }
  }
  return content;
}",0.90468133107727
72617,"/** 
 * @param obj
 * @param considerParam
 * @return
 */
public boolean isDataSourceDataSetEqual(DataSourceAndDataSet obj,boolean considerParam){
  IBaseDataSourceDesign dataSourceDesign2=((DataSourceAndDataSet)obj).dataSourceDesign;
  IBaseDataSetDesign dataSetDesign2=((DataSourceAndDataSet)obj).dataSetDesign;
  Collection paramterHints2=((DataSourceAndDataSet)obj).paramterHints;
  if (this.dataSourceDesign == dataSourceDesign2) {
    if (this.dataSetDesign == dataSetDesign2) {
      if (!considerParam)       return true;
      if (isEqualParamterHints(this.paramterHints,paramterHints2))       return true;
    }
 else     if (this.dataSetDesign == null || dataSetDesign2 == null) {
      return false;
    }
  }
 else   if (this.dataSourceDesign == null || dataSourceDesign2 == null) {
    return false;
  }
 else {
    if ((this.dataSetDesign != dataSetDesign2) && (this.dataSetDesign == null || dataSetDesign2 == null))     return false;
  }
  if (isEqualDataSourceDesign(dataSourceDesign,dataSourceDesign2) == false)   return false;
  if (isEqualDataSetDesign(dataSetDesign,dataSetDesign2) == false)   return false;
  if (!considerParam)   return true;
  if (this.isEqualParamterHints(this.paramterHints,paramterHints2) == false)   return false;
  return true;
}","/** 
 * @param obj
 * @param considerParam
 * @return
 */
public boolean isDataSourceDataSetEqual(DataSourceAndDataSet obj,boolean considerParam){
  IBaseDataSourceDesign dataSourceDesign2=((DataSourceAndDataSet)obj).dataSourceDesign;
  IBaseDataSetDesign dataSetDesign2=((DataSourceAndDataSet)obj).dataSetDesign;
  Collection paramterHints2=((DataSourceAndDataSet)obj).paramterHints;
  if (this.dataSourceDesign == dataSourceDesign2) {
    if (this.dataSetDesign == dataSetDesign2) {
      if (!considerParam)       return true;
      if (isEqualParameterHints(this.paramterHints,paramterHints2))       return true;
    }
 else     if (this.dataSetDesign == null || dataSetDesign2 == null) {
      return false;
    }
  }
 else   if (this.dataSourceDesign == null || dataSourceDesign2 == null) {
    return false;
  }
 else {
    if ((this.dataSetDesign != dataSetDesign2) && (this.dataSetDesign == null || dataSetDesign2 == null))     return false;
  }
  if (isEqualDataSourceDesign(dataSourceDesign,dataSourceDesign2) == false)   return false;
  if (isEqualDataSetDesign(dataSetDesign,dataSetDesign2) == false)   return false;
  if (!considerParam)   return true;
  if (this.isEqualParameterHints(this.paramterHints,paramterHints2) == false)   return false;
  return true;
}",0.9992163009404388
72618,"public IPageDevice createPageDevice(String title,IReportContext context,IReportContent report) throws Exception {
  currentPageDevice=new PDFPageDevice(output,title,context,report);
  return currentPageDevice;
}","public IPageDevice createPageDevice(String title,String author,String comments,IReportContext context,IReportContent report) throws Exception {
  currentPageDevice=new PDFPageDevice(output,title,author,comments,context,report);
  return currentPageDevice;
}",0.9017094017094016
72619,"public IPageDevice createPageDevice(String title,IReportContext context,IReportContent report){
  try {
    return new PostscriptPageDevice(output,title);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage());
  }
  return null;
}","public IPageDevice createPageDevice(String title,String description,String author,IReportContext context,IReportContent report){
  try {
    return new PostscriptPageDevice(output,title,author,description);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage());
  }
  return null;
}",0.9054545454545454
72620,"public void startRenderer() throws IOException {
  FileUtil.load(""String_Node_Str"",out);
}","public void startRenderer(String author,String description) throws IOException {
  out.println(""String_Node_Str"" + author);
  FileUtil.load(""String_Node_Str"",out);
}",0.7058823529411765
72621,"public PostscriptPageDevice(OutputStream output,String title) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  writer.startRenderer();
}","public PostscriptPageDevice(OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  writer.startRenderer(author,description);
}",0.9057301293900184
72622,"/** 
 * @param isLeftDataSet
 * @param dataSetName
 * @return
 * @throws DataException
 */
private IQueryResults populatePreparedQuery(boolean isLeftDataSet,String dataSetName) throws DataException {
  List conditions=PreparedJointDataSourceQuery.this.dataSet.getJoinConditions();
  QueryDefinition queryDefinition=new QueryDefinition();
  queryDefinition.setDataSetName(dataSetName);
  setParameterBindings(dataEngine,dataSetName,isLeftDataSet,queryDefinition);
  for (int i=0; i < conditions.size(); i++) {
    addSortToQuery((IJoinCondition)conditions.get(i),isLeftDataSet,queryDefinition);
  }
  IPreparedQuery preparedQuery=PreparedQueryUtil.newInstance(dataEngine,queryDefinition,appContext);
  try {
    return preparedQuery.execute(null);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * @param isLeftDataSet
 * @param dataSetName
 * @return
 * @throws DataException
 */
private IQueryResults populatePreparedQuery(IQueryResults outer,boolean isLeftDataSet,String dataSetName) throws DataException {
  List conditions=PreparedJointDataSourceQuery.this.dataSet.getJoinConditions();
  QueryDefinition queryDefinition=new QueryDefinition();
  queryDefinition.setDataSetName(dataSetName);
  setParameterBindings(dataEngine,dataSetName,isLeftDataSet,queryDefinition);
  for (int i=0; i < conditions.size(); i++) {
    addSortToQuery((IJoinCondition)conditions.get(i),isLeftDataSet,queryDefinition);
  }
  IPreparedQuery preparedQuery=PreparedQueryUtil.newInstance(dataEngine,queryDefinition,appContext);
  try {
    return preparedQuery.execute(outer,null);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9843561973525872
72623,"protected IQuery createOdiQuery() throws DataException {
  setCurrentDataSet(dataSetDesign);
  try {
    populatePreparedQuery();
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  initializeResultClass(dataEngine,appContext);
  return new JointDataSetQuery(resultClass);
}","protected IQuery createOdiQuery() throws DataException {
  setCurrentDataSet(dataSetDesign);
  try {
    populatePreparedQuery(this.tabularOuterResults == null ? null : (IQueryResults)this.tabularOuterResults);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  initializeResultClass(dataEngine,appContext);
  return new JointDataSetQuery(resultClass);
}",0.8789237668161435
72624,"/** 
 * @return
 */
public String nextID(){
  String k=QURE_ID_PREFIX + (currentId++);
  System.out.println(k);
  return k;
}","/** 
 * @return
 */
public String nextID(){
  return QURE_ID_PREFIX + (currentId++);
}",0.7867298578199052
72625,"private String getDriverClassPath(){
  return (this.appContext != null && this.appContext.get(IConnectionFactory.DRIVER_CLASSPATH) != null) ? this.appContext.get(IConnectionFactory.DRIVER_CLASSPATH).toString() : null;
}","@SuppressWarnings(""String_Node_Str"") private Collection<String> getDriverClassPath(){
  if (this.appContext == null)   return null;
  if (this.appContext.get(IConnectionFactory.DRIVER_CLASSPATH) == null)   return null;
  Object classPath=this.appContext.get(IConnectionFactory.DRIVER_CLASSPATH);
  if (classPath instanceof String) {
    ArrayList<String> result=new ArrayList<String>();
    result.add(classPath.toString());
    return result;
  }
 else   if (classPath instanceof Collection) {
    ArrayList<String> result=new ArrayList<String>();
    for (    Object aClassPath : (Collection)classPath) {
      if (aClassPath != null)       result.add(aClassPath.toString());
    }
    return result;
  }
  return null;
}",0.3609341825902335
72626,"/** 
 * Look for the Driver from drivers directory if it not in plugin class path
 * @param className
 * @return Driver instance
 * @throws OdaException 
 */
private Driver findDriver(String className,String driverClassPath) throws OdaException {
  Class driverClass=null;
  try {
    driverClass=Class.forName(className);
    logger.info(""String_Node_Str"" + className);
  }
 catch (  ClassNotFoundException e) {
    if (logger.isLoggable(Level.FINE)) {
      logger.info(""String_Node_Str"" + className + ""String_Node_Str"");
    }
    driverClass=loadExtraDriver(className,true,driverClassPath);
    if (driverClass == null) {
      logger.warning(""String_Node_Str"" + className);
      throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
    }
  }
  Driver driver=null;
  try {
    driver=(Driver)driverClass.newInstance();
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + className,e);
    throw new JDBCException(ResourceConstants.CANNOT_INSTANTIATE_DRIVER,null,className);
  }
  return driver;
}","/** 
 * Look for the Driver from drivers directory if it not in plugin class path
 * @param className
 * @return Driver instance
 * @throws OdaException 
 */
private Driver findDriver(String className,Collection<String> driverClassPath) throws OdaException {
  Class driverClass=null;
  try {
    driverClass=Class.forName(className);
    logger.info(""String_Node_Str"" + className);
  }
 catch (  ClassNotFoundException e) {
    if (logger.isLoggable(Level.FINE)) {
      logger.info(""String_Node_Str"" + className + ""String_Node_Str"");
    }
    driverClass=loadExtraDriver(className,true,driverClassPath);
    if (driverClass == null) {
      logger.warning(""String_Node_Str"" + className);
      throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
    }
  }
  Driver driver=null;
  try {
    driver=(Driver)driverClass.newInstance();
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + className,e);
    throw new JDBCException(ResourceConstants.CANNOT_INSTANTIATE_DRIVER,null,className);
  }
  return driver;
}",0.9886578449905482
72627,"/** 
 * Search driver in the ""drivers"" directory and load it if found
 * @param className
 * @return
 * @throws OdaException 
 * @throws DriverException
 * @throws OdaException
 */
private Class loadExtraDriver(String className,boolean refreshUrlsWhenFail,String driverClassPath) throws OdaException {
}","/** 
 * Search driver in the ""drivers"" directory and load it if found
 * @param className
 * @return
 * @throws OdaException 
 * @throws DriverException
 * @throws OdaException
 */
private Class loadExtraDriver(String className,boolean refreshUrlsWhenFail,Collection<String> driverClassPath) throws OdaException {
}",0.9805825242718448
72628,"/** 
 * Refresh the URL list of DriverClassLoader
 * @return if the refreshURL is different than the former one then return true otherwisereturn false
 * @throws OdaException 
 */
public boolean refreshURLs() throws OdaException {
  if (bundle == null)   return false;
  boolean foundNew=false;
  if (driverClassPath != null) {
    try {
      File driverClassFile=new File(driverClassPath);
      if (driverClassFile.exists()) {
        this.addURL(driverClassFile.toURI().toURL());
        if (driverClassFile.isDirectory()) {
          File[] driverFiles=driverClassFile.listFiles(new FileFilter(){
            public boolean accept(            File pathname){
              if (pathname.isFile() && OdaJdbcDriver.isDriverFile(pathname.getName())) {
                return true;
              }
              return false;
            }
          }
);
          for (int i=0; i < driverFiles.length; i++) {
            if (!fileSet.contains(driverFiles[i].getName())) {
              foundNew=true;
              fileSet.add(driverFiles[i].getName());
              addURL(driverFiles[i].toURI().toURL());
              logger.info(""String_Node_Str"" + driverFiles[i].getName() + ""String_Node_Str""+ driverFiles[i].toURI().toURL());
            }
          }
        }
      }
    }
 catch (    MalformedURLException e) {
      throw new OdaException(e);
    }
  }
  Enumeration files=bundle.getEntryPaths(OdaJdbcDriver.Constants.DRIVER_DIRECTORY);
  while (files != null && files.hasMoreElements()) {
    String fileName=(String)files.nextElement();
    if (OdaJdbcDriver.isDriverFile(fileName)) {
      if (!fileSet.contains(fileName)) {
        foundNew=true;
        fileSet.add(fileName);
        URL bundleURL=bundle.getEntry(fileName);
        try {
          URL fileURL=FileLocator.resolve(bundleURL);
          addURL(fileURL);
          addURL(bundleURL);
        }
 catch (        IOException e) {
          logger.log(Level.SEVERE,""String_Node_Str"" + bundleURL + ""String_Node_Str""+ ""String_Node_Str"",e);
        }
        logger.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ bundleURL);
      }
    }
  }
  return foundNew;
}","/** 
 * Refresh the URL list of DriverClassLoader
 * @return if the refreshURL is different than the former one then return true otherwisereturn false
 * @throws OdaException 
 */
public boolean refreshURLs() throws OdaException {
  if (bundle == null)   return false;
  boolean foundNew=false;
  if (driverClassPath != null && driverClassPath.size() > 0) {
    try {
      for (      String classPath : driverClassPath) {
        File driverClassFile=new File(classPath);
        if (driverClassFile.exists()) {
          this.addURL(driverClassFile.toURI().toURL());
          if (driverClassFile.isDirectory()) {
            File[] driverFiles=driverClassFile.listFiles(new FileFilter(){
              public boolean accept(              File pathname){
                if (pathname.isFile() && OdaJdbcDriver.isDriverFile(pathname.getName())) {
                  return true;
                }
                return false;
              }
            }
);
            for (int i=0; i < driverFiles.length; i++) {
              if (!fileSet.contains(driverFiles[i].getName())) {
                foundNew=true;
                fileSet.add(driverFiles[i].getName());
                addURL(driverFiles[i].toURI().toURL());
                logger.info(""String_Node_Str"" + driverFiles[i].getName() + ""String_Node_Str""+ driverFiles[i].toURI().toURL());
              }
            }
          }
        }
      }
    }
 catch (    MalformedURLException e) {
      throw new OdaException(e);
    }
  }
  Enumeration files=bundle.getEntryPaths(OdaJdbcDriver.Constants.DRIVER_DIRECTORY);
  while (files != null && files.hasMoreElements()) {
    String fileName=(String)files.nextElement();
    if (OdaJdbcDriver.isDriverFile(fileName)) {
      if (!fileSet.contains(fileName)) {
        foundNew=true;
        fileSet.add(fileName);
        URL bundleURL=bundle.getEntry(fileName);
        try {
          URL fileURL=FileLocator.resolve(bundleURL);
          addURL(fileURL);
          addURL(bundleURL);
        }
 catch (        IOException e) {
          logger.log(Level.SEVERE,""String_Node_Str"" + bundleURL + ""String_Node_Str""+ ""String_Node_Str"",e);
        }
        logger.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ bundleURL);
      }
    }
  }
  return foundNew;
}",0.9040415443666742
72629,"/** 
 * Gets a JDBC connection from the specified JNDI data source URL, or if not available, directly from the specified driver and JDBC driver url.
 * @param driverClass   the class name of JDBC driver
 * @param url           JDBC connection URL
 * @param jndiNameUrl   the JNDI name to look up a Data Source name service; may be null or empty
 * @param connectionProperties  properties for establising connection
 * @return              a JDBC connection
 * @throws SQLException
 * @throws OdaException
 */
public Connection getConnection(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,String driverClassPath) throws SQLException, OdaException {
  validateConnectionUrl(url,jndiNameUrl);
  if (logger.isLoggable(Level.FINE))   logger.fine(""String_Node_Str"" + driverClass + ""String_Node_Str""+ url+ ""String_Node_Str""+ jndiNameUrl);
  return doConnect(driverClass,url,jndiNameUrl,connectionProperties,driverClassPath);
}","/** 
 * Gets a JDBC connection from the specified JNDI data source URL, or if not available, directly from the specified driver and JDBC driver url.
 * @param driverClass   the class name of JDBC driver
 * @param url           JDBC connection URL
 * @param jndiNameUrl   the JNDI name to look up a Data Source name service; may be null or empty
 * @param connectionProperties  properties for establising connection
 * @return              a JDBC connection
 * @throws SQLException
 * @throws OdaException
 */
public Connection getConnection(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  validateConnectionUrl(url,jndiNameUrl);
  if (logger.isLoggable(Level.FINE))   logger.fine(""String_Node_Str"" + driverClass + ""String_Node_Str""+ url+ ""String_Node_Str""+ jndiNameUrl);
  return doConnect(driverClass,url,jndiNameUrl,connectionProperties,driverClassPath);
}",0.9874869655891554
72630,"/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,String driverClassPath) throws SQLException, OdaException {
  assert(url != null);
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ url);
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + url);
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  Exception e) {
    throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
  }
}","/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  assert(url != null);
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ url);
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + url);
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  Exception e) {
    throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(e.getLocalizedMessage()));
  }
}",0.9896373056994818
72631,"public DriverClassLoader(String driverClassPath) throws OdaException {
  super(new URL[0],DriverClassLoader.class.getClassLoader());
  logger.entering(DriverClassLoader.class.getName(),""String_Node_Str"");
  this.driverClassPath=driverClassPath;
  bundle=Platform.getBundle(""String_Node_Str"");
  if (bundle == null) {
    logger.severe(""String_Node_Str"");
  }
 else {
    refreshURLs();
  }
}","public DriverClassLoader(Collection<String> driverClassPath) throws OdaException {
  super(new URL[0],DriverClassLoader.class.getClassLoader());
  logger.entering(DriverClassLoader.class.getName(),""String_Node_Str"");
  this.driverClassPath=driverClassPath;
  bundle=Platform.getBundle(""String_Node_Str"");
  if (bundle == null) {
    logger.severe(""String_Node_Str"");
  }
 else {
    refreshURLs();
  }
}",0.9697732997481108
72632,"public void loadAndRegisterDriver(String className,String driverClassPath) throws OdaException {
  if (className == null || className.length() == 0)   return;
  if (isDeregistered(className)) {
    throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
  }
 else   if (this.registeredDrivers.containsKey(className)) {
    return;
  }
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + className);
  }
  Driver driver=findDriver(className,driverClassPath);
  if (driver != null) {
    try {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + className);
      DriverManager.registerDriver(new WrappedDriver(driver,className));
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  registeredDrivers.put(className,DRIVER_REGISTERED);
}","public void loadAndRegisterDriver(String className,Collection<String> driverClassPath) throws OdaException {
  if (className == null || className.length() == 0)   return;
  if (isDeregistered(className)) {
    throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
  }
 else   if (this.registeredDrivers.containsKey(className)) {
    return;
  }
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + className);
  }
  Driver driver=findDriver(className,driverClassPath);
  if (driver != null) {
    try {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + className);
      DriverManager.registerDriver(new WrappedDriver(driver,className));
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  registeredDrivers.put(className,DRIVER_REGISTERED);
}",0.9860950173812284
72633,"/** 
 * save the design into the stream.
 * @param design design handler
 */
public ReportRunnable saveDesign(ReportRunnable runnable,ReportRunnable originalRunnable){
  RAOutputStream out=null;
  ReportRunnable newRunnable=runnable;
  try {
    if (originalRunnable != null && runnable != originalRunnable) {
      ReportDesignHandle design=runnable.getReport();
      out=archive.createRandomAccessStream(ORIGINAL_DESIGN_STREAM);
      DocumentUtil.serialize(design,out);
    }
    ReportDesignHandle design=runnable.getReport();
    out=archive.createRandomAccessStream(DESIGN_STREAM);
    ReportDesignHandle newDesign=DocumentUtil.serialize(design,out);
    designName=design.getFileName();
    newRunnable=new ReportRunnable(newDesign);
    newRunnable.setReportEngine(engine);
    newRunnable.setReportName(runnable.getReportName());
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception ex) {
      }
    }
    out=null;
  }
  return newRunnable;
}","/** 
 * save the design into the stream.
 * @param design design handler
 */
public ReportRunnable saveDesign(ReportRunnable runnable,ReportRunnable originalRunnable){
  RAOutputStream out=null;
  ReportRunnable newRunnable=runnable;
  try {
    if (originalRunnable != null && runnable != originalRunnable) {
      ReportDesignHandle design=runnable.getReport();
      out=archive.createRandomAccessStream(ORIGINAL_DESIGN_STREAM);
      DocumentUtil.serialize(design,out);
      out.close();
    }
    ReportDesignHandle design=runnable.getReport();
    out=archive.createRandomAccessStream(DESIGN_STREAM);
    ReportDesignHandle newDesign=DocumentUtil.serialize(design,out);
    designName=design.getFileName();
    newRunnable=new ReportRunnable(newDesign);
    newRunnable.setReportEngine(engine);
    newRunnable.setReportName(runnable.getReportName());
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception ex) {
      }
    }
    out=null;
  }
  return newRunnable;
}",0.9913202375513932
72634,"public void dispose(){
  super.dispose();
  if (browser != null && !browser.isDisposed()) {
    WebViewer.cancel(browser);
  }
  bParameter=null;
  browser=null;
  model=null;
}","public void dispose(){
  super.dispose();
  if (browser != null && !browser.isDisposed()) {
    WebViewer.cancel(browser);
    browser.stop();
  }
  bParameter=null;
  browser=null;
  model=null;
}",0.946524064171123
72635,"/** 
 * handle something when try to leave the page
 */
public void handleLeaveThePage(){
  if (browser != null && !browser.isDisposed()) {
    WebViewer.cancel(browser);
    browser.setUrl(""String_Node_Str"");
  }
}","/** 
 * handle something when try to leave the page
 */
public void handleLeaveThePage(){
  if (browser != null && !browser.isDisposed()) {
    WebViewer.cancel(browser);
    browser.stop();
    browser.setUrl(""String_Node_Str"");
  }
}",0.9555555555555556
72636,"/** 
 * Create PDF render option.
 * @param servletPath
 * @param request
 * @param isDesigner
 * @return the PDF render option
 */
private PDFRenderOption createPDFRenderOption(String servletPath,HttpServletRequest request,boolean isDesigner){
  String baseURL=null;
  if (!isDesigner)   baseURL=ParameterAccessor.getBaseURL();
  if (baseURL == null) {
    if (ParameterAccessor.isOpenAsAttachment(request)) {
      baseURL=request.getScheme() + ""String_Node_Str"" + request.getServerName()+ ""String_Node_Str""+ request.getServerPort();
    }
 else {
      baseURL=""String_Node_Str"";
    }
  }
  baseURL+=request.getContextPath();
  PDFRenderOption renderOption=new PDFRenderOption();
  if (servletPath != null && servletPath.length() > 0) {
    renderOption.setBaseURL(baseURL + servletPath);
  }
 else {
    renderOption.setBaseURL(baseURL + IBirtConstants.SERVLET_PATH_RUN);
  }
  renderOption.setSupportedImageFormats(""String_Node_Str"");
switch (ParameterAccessor.getPageOverflow(request)) {
case IBirtConstants.PAGE_OVERFLOW_AUTO:
    renderOption.setOption(PDFRenderOption.PAGE_OVERFLOW,PDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES);
  break;
case IBirtConstants.PAGE_OVERFLOW_ACTUAL:
renderOption.setOption(PDFRenderOption.PAGE_OVERFLOW,PDFRenderOption.ENLARGE_PAGE_SIZE);
break;
case IBirtConstants.PAGE_OVERFLOW_FITTOPAGE:
renderOption.setOption(PDFRenderOption.FIT_TO_PAGE,Boolean.TRUE);
break;
default :
renderOption.setOption(PDFRenderOption.PAGE_OVERFLOW,PDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES);
}
renderOption.setOption(PDFRenderOption.PAGEBREAK_PAGINATION_ONLY,Boolean.TRUE);
return renderOption;
}","/** 
 * Create PDF render option.
 * @param servletPath
 * @param request
 * @param isDesigner
 * @return the PDF render option
 */
private PDFRenderOption createPDFRenderOption(String servletPath,HttpServletRequest request,boolean isDesigner){
  String baseURL=null;
  if (!isDesigner)   baseURL=ParameterAccessor.getBaseURL();
  if (baseURL == null) {
    if (ParameterAccessor.isOpenAsAttachment(request)) {
      baseURL=request.getScheme() + ""String_Node_Str"" + request.getServerName()+ ""String_Node_Str""+ request.getServerPort();
    }
 else {
      baseURL=""String_Node_Str"";
    }
  }
  baseURL+=request.getContextPath();
  PDFRenderOption renderOption=new PDFRenderOption();
  if (servletPath != null && servletPath.length() > 0) {
    renderOption.setBaseURL(baseURL + servletPath);
  }
 else {
    renderOption.setBaseURL(baseURL + IBirtConstants.SERVLET_PATH_RUN);
  }
  renderOption.setSupportedImageFormats(""String_Node_Str"");
switch (ParameterAccessor.getPageOverflow(request)) {
case IBirtConstants.PAGE_OVERFLOW_AUTO:
    renderOption.setOption(PDFRenderOption.PAGE_OVERFLOW,new Integer(PDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES));
  break;
case IBirtConstants.PAGE_OVERFLOW_ACTUAL:
renderOption.setOption(PDFRenderOption.PAGE_OVERFLOW,new Integer(PDFRenderOption.ENLARGE_PAGE_SIZE));
break;
case IBirtConstants.PAGE_OVERFLOW_FITTOPAGE:
renderOption.setOption(PDFRenderOption.FIT_TO_PAGE,Boolean.TRUE);
break;
default :
renderOption.setOption(PDFRenderOption.PAGE_OVERFLOW,new Integer(PDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES));
}
renderOption.setOption(PDFRenderOption.PAGEBREAK_PAGINATION_ONLY,Boolean.TRUE);
return renderOption;
}",0.9880331389996933
72637,"/** 
 * Constructor.
 * @param engine
 */
public DataEngineSession(DataEngineImpl engine){
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  Context cx=Context.enter();
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(cx);
  }
  new CoreJavaScriptInitializer().initialize(cx,scope);
  Context.exit();
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode()+ File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(this);
  classLoaderHolder.set(engine.getContext().getClassLoader());
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}","/** 
 * Constructor.
 * @param engine
 */
public DataEngineSession(DataEngineImpl engine){
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  Context cx=Context.enter();
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(cx);
  }
  new CoreJavaScriptInitializer().initialize(cx,scope);
  Context.exit();
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode()+ File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(this);
  classLoaderHolder.set(engine.getContext().getClassLoader());
  this.queryResultIDUtil=new QueryResultIDUtil();
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}",0.9687108886107636
72638,"public String getID(){
  if (queryResultID == null)   queryResultID=QueryResultIDUtil.nextID();
  return queryResultID;
}","public String getID(){
  if (queryResultID == null)   queryResultID=session.getQueryResultIDUtil().nextID();
  return queryResultID;
}",0.9490196078431372
72639,"/** 
 * @return
 * @throws BirtException 
 */
private IResultIterator execSubQuery(String parentQueryResultID,String name,Scriptable scope,Scriptable parentScope) throws BirtException {
  Object ob=subQueryMap.get(name);
  if (ob == null)   return null;
  PreparedDummyQuery preparedQuery=new PreparedDummyQuery(context,(ISubqueryDefinition)ob,scope);
  preparedQuery.subQueryName=name;
  preparedQuery.subQueryIndex=0;
  QueryResults queryResults=(QueryResults)preparedQuery.executeQuery(scope,parentScope);
  queryResults.setID(parentQueryResultID);
  return queryResults.getResultIterator();
}","/** 
 * @return
 * @throws BirtException 
 */
private IResultIterator execSubQuery(String parentQueryResultID,String name,Scriptable scope,Scriptable parentScope) throws BirtException {
  Object ob=subQueryMap.get(name);
  if (ob == null)   return null;
  PreparedDummyQuery preparedQuery=new PreparedDummyQuery((ISubqueryDefinition)ob,session);
  preparedQuery.subQueryName=name;
  preparedQuery.subQueryIndex=0;
  QueryResults queryResults=(QueryResults)preparedQuery.executeQuery(scope,parentScope);
  queryResults.setID(parentQueryResultID);
  return queryResults.getResultIterator();
}",0.9443507588532885
72640,"/** 
 * @param context
 * @param subQueryDefn
 * @param sharedScope
 */
PreparedDummyQuery(DataEngineContext context,ISubqueryDefinition subQueryDefn,Scriptable sharedScope){
  Object[] params={context,subQueryDefn,sharedScope};
  logger.entering(PreparedDummyQuery.class.getName(),""String_Node_Str"",params);
  this.subQueryDefn=subQueryDefn;
  init(context,subQueryDefn,sharedScope);
  logger.exiting(PreparedDummyQuery.class.getName(),""String_Node_Str"");
}","/** 
 * @param context
 * @param subQueryDefn
 * @param sharedScope
 */
PreparedDummyQuery(ISubqueryDefinition subQueryDefn,DataEngineSession session){
  Object[] params={subQueryDefn,session};
  logger.entering(PreparedDummyQuery.class.getName(),""String_Node_Str"",params);
  this.subQueryDefn=subQueryDefn;
  this.session=session;
  init(session.getEngineContext(),subQueryDefn,session.getSharedScope());
  logger.exiting(PreparedDummyQuery.class.getName(),""String_Node_Str"");
}",0.7129135538954109
72641,"/** 
 * @return
 */
private RDSaveUtil getRdSaveUtil(){
  if (this.rdSaveUtil == null) {
    rdSaveUtil=new RDSaveUtil(context,queryDefn,queryResults.getID());
  }
  return this.rdSaveUtil;
}","/** 
 * @return
 */
private RDSaveUtil getRdSaveUtil(){
  if (this.rdSaveUtil == null) {
    rdSaveUtil=new RDSaveUtil(session.getEngineContext(),queryDefn,queryResults.getID());
  }
  return this.rdSaveUtil;
}",0.9476309226932668
72642,"/** 
 * Return the QueryResults. But the execution of query would be deferred
 * @param outerResults If query is nested within another query, this is the outer query's query result handle.
 * @param scope The ElementState object for the report item using the query; this acts as the JS scope for evaluating script expressions.
 * @param executor
 * @parem dataSourceQuery
 */
QueryResults doPrepare(IBaseQueryResults outerResults,Scriptable scope,QueryExecutor executor,PreparedDataSourceQuery dataSourceQuery) throws DataException {
  if (this.baseQueryDefn == null) {
    DataException e=new DataException(ResourceConstants.PREPARED_QUERY_CLOSED);
    logger.logp(Level.WARNING,PreparedQuery.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  executor.setAppContext(this.appContext);
  logger.finer(""String_Node_Str"");
  executor.prepareExecution(outerResults,scope);
  logger.finer(""String_Node_Str"");
  QueryResults result=new QueryResults(new ServiceForQueryResults(this.session,executor.getQueryScope(),executor.getNestedLevel() + 1,dataSourceQuery,queryService,executor,this.baseQueryDefn,this.exprManager));
  if (this.baseQueryDefn.cacheQueryResults()) {
    result.setID(QueryResultIDUtil.nextID());
  }
  return result;
}","/** 
 * Return the QueryResults. But the execution of query would be deferred
 * @param outerResults If query is nested within another query, this is the outer query's query result handle.
 * @param scope The ElementState object for the report item using the query; this acts as the JS scope for evaluating script expressions.
 * @param executor
 * @parem dataSourceQuery
 */
QueryResults doPrepare(IBaseQueryResults outerResults,Scriptable scope,QueryExecutor executor,PreparedDataSourceQuery dataSourceQuery) throws DataException {
  if (this.baseQueryDefn == null) {
    DataException e=new DataException(ResourceConstants.PREPARED_QUERY_CLOSED);
    logger.logp(Level.WARNING,PreparedQuery.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  executor.setAppContext(this.appContext);
  logger.finer(""String_Node_Str"");
  executor.prepareExecution(outerResults,scope);
  logger.finer(""String_Node_Str"");
  QueryResults result=new QueryResults(new ServiceForQueryResults(this.session,executor.getQueryScope(),executor.getNestedLevel() + 1,dataSourceQuery,queryService,executor,this.baseQueryDefn,this.exprManager));
  if (this.baseQueryDefn.cacheQueryResults()) {
    result.setID(this.session.getQueryResultIDUtil().nextID());
  }
  return result;
}",0.9928853754940712
72643,"public IResultIterator getSecondaryIterator(String subQueryName,Scriptable subScope) throws DataException {
  Collection subQueries=this.getQueryResults().getPreparedQuery().getReportQueryDefn().getSubqueries();
  Iterator subIt=subQueries.iterator();
  HashMap subQueryMap=new HashMap();
  while (subIt.hasNext()) {
    ISubqueryDefinition subquery=(ISubqueryDefinition)subIt.next();
    subQueryMap.put(subquery.getName(),subquery);
  }
  PreparedDummyQuery preparedQuery=new PreparedDummyQuery(session.getEngineContext(),((ISubqueryDefinition)subQueryMap.get(subQueryName)),subScope);
  IQueryResults queryResults;
  try {
    queryResults=(IQueryResults)preparedQuery.executeQuery(subScope,subScope);
    return queryResults.getResultIterator();
  }
 catch (  BirtException e) {
    throw new DataException(e.getMessage());
  }
}","public IResultIterator getSecondaryIterator(String subQueryName,Scriptable subScope) throws DataException {
  Collection subQueries=this.getQueryResults().getPreparedQuery().getReportQueryDefn().getSubqueries();
  Iterator subIt=subQueries.iterator();
  HashMap subQueryMap=new HashMap();
  while (subIt.hasNext()) {
    ISubqueryDefinition subquery=(ISubqueryDefinition)subIt.next();
    subQueryMap.put(subquery.getName(),subquery);
  }
  PreparedDummyQuery preparedQuery=new PreparedDummyQuery(((ISubqueryDefinition)subQueryMap.get(subQueryName)),session);
  IQueryResults queryResults;
  try {
    queryResults=(IQueryResults)preparedQuery.executeQuery(subScope,subScope);
    return queryResults.getResultIterator();
  }
 catch (  BirtException e) {
    throw new DataException(e.getMessage());
  }
}",0.912087912087912
72644,"public String getID(){
  if (selfQueryResultID == null)   selfQueryResultID=QueryResultIDUtil.nextID();
  return QueryResultIDUtil.buildID(rootQueryResultID,selfQueryResultID);
}","public String getID(){
  if (selfQueryResultID == null)   selfQueryResultID=this.session.getQueryResultIDUtil().nextID();
  return QueryResultIDUtil.buildID(rootQueryResultID,selfQueryResultID);
}",0.9518716577540108
72645,"/** 
 * @return save util used in report document GENERATION time
 */
private RDSaveHelper getRdSaveHelper(){
  if (this.rdSaveHelper == null) {
    rdSaveHelper=new RDSaveHelper(this.resultService.getSession().getEngineContext(),this.resultService.getQueryDefn(),this.odiResult,new IDInfo(this.resultService.getQueryResults().getID()));
  }
  return this.rdSaveHelper;
}","/** 
 * @return save util used in report document GENERATION time
 * @throws DataException 
 */
private RDSaveHelper getRdSaveHelper() throws DataException {
  if (this.rdSaveHelper == null) {
    IDInfo id=null;
    if (this.resultService.getQueryDefn() instanceof ISubqueryDefinition) {
      id=new IDInfo(null,this.resultService.getQueryDefn().getName());
    }
 else {
      id=new IDInfo(this.resultService.getQueryResults().getID());
    }
    rdSaveHelper=new RDSaveHelper(this.resultService.getSession().getEngineContext(),this.resultService.getQueryDefn(),this.odiResult,id);
  }
  return this.rdSaveHelper;
}",0.5393939393939394
72646,"/** 
 * @param streamManager
 * @return
 * @throws DataException
 */
public static String getNextID(DataEngineContext context,String rootQueryResultID) throws DataException {
  StreamManager streamManager=new StreamManager(context,new QueryResultInfo(rootQueryResultID,null,-1));
  Set idSet=getIDMap(streamManager).keySet();
  String queryID=null;
  while (true) {
    queryID=QueryResultIDUtil.nextID();
    if (idSet.contains(queryID) == false)     break;
  }
  return queryID;
}","/** 
 * @param streamManager
 * @return
 * @throws DataException
 */
public static String getNextID(DataEngineSession session,String rootQueryResultID) throws DataException {
  StreamManager streamManager=new StreamManager(session.getEngineContext(),new QueryResultInfo(rootQueryResultID,null,-1));
  Set idSet=getIDMap(streamManager).keySet();
  String queryID=null;
  while (true) {
    queryID=session.getQueryResultIDUtil().nextID();
    if (idSet.contains(queryID) == false)     break;
  }
  return queryID;
}",0.9357429718875502
72647,"/** 
 * @return
 */
public static String nextID(){
  int id=((Integer)qursStart.get()).intValue();
  qursStart.set(new Integer(id + 1));
  return QURE_ID_PREFIX + (id);
}","/** 
 * @return
 */
public String nextID(){
  String k=QURE_ID_PREFIX + (currentId++);
  System.out.println(k);
  return k;
}",0.4949152542372881
72648,"/** 
 * No instance
 */
private QueryResultIDUtil(){
}","/** 
 * No instance
 */
public QueryResultIDUtil(){
}",0.9158878504672896
72649,"private IAggregationResultSet[] populateRs(CubeQueryExecutor executor,AggregationDefinition[] aggrDefns,CubeQueryExecutorHelper cubeQueryExcutorHelper2,MeasureNameManager manager,StopSign stopSign,boolean saveToRD) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  String id=null;
  if (executor.getCubeQueryDefinition().getQueryResultsID() == null) {
    rs=cubeQueryExcutorHelper.execute(aggrDefns,new StopSign());
    CubeOperationsExecutor coe=new CubeOperationsExecutor(executor.getCubeQueryDefinition(),executor.getSession().getSharedScope());
    rs=coe.execute(rs,manager,stopSign);
    if (executor.getCubeQueryDefinition().cacheQueryResults()) {
      id=QueryResultIDUtil.nextID();
      File tmpDir=new File(executor.getSession().getTempDir());
      if (!tmpDir.exists() || !tmpDir.isDirectory()) {
        tmpDir.mkdirs();
      }
      ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(executor.getSession().getTempDir() + ""String_Node_Str"",""String_Node_Str""));
      AggregationResultSetSaveUtil.save(id,rs,writer);
      writer.finish();
    }
    if (saveToRD) {
      if (id != null) {
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
 else {
        id=QueryResultIDUtil.nextID();
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
    }
  }
 else {
    id=executor.getCubeQueryDefinition().getQueryResultsID();
    rs=AggregationResultSetSaveUtil.load(id,new FileArchiveReader(executor.getSession().getTempDir() + ""String_Node_Str""),VersionManager.getLatestVersion());
  }
  executor.setQueryResultsId(id);
  return rs;
}","private IAggregationResultSet[] populateRs(CubeQueryExecutor executor,AggregationDefinition[] aggrDefns,CubeQueryExecutorHelper cubeQueryExcutorHelper2,MeasureNameManager manager,StopSign stopSign,boolean saveToRD) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  String id=null;
  if (executor.getCubeQueryDefinition().getQueryResultsID() == null) {
    rs=cubeQueryExcutorHelper.execute(aggrDefns,new StopSign());
    CubeOperationsExecutor coe=new CubeOperationsExecutor(executor.getCubeQueryDefinition(),executor.getSession().getSharedScope());
    rs=coe.execute(rs,manager,stopSign);
    if (executor.getCubeQueryDefinition().cacheQueryResults()) {
      id=executor.getSession().getQueryResultIDUtil().nextID();
      File tmpDir=new File(executor.getSession().getTempDir());
      if (!tmpDir.exists() || !tmpDir.isDirectory()) {
        tmpDir.mkdirs();
      }
      ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(executor.getSession().getTempDir() + ""String_Node_Str"",""String_Node_Str""));
      AggregationResultSetSaveUtil.save(id,rs,writer);
      writer.finish();
    }
    if (saveToRD) {
      if (id != null) {
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
 else {
        id=executor.getSession().getQueryResultIDUtil().nextID();
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
    }
  }
 else {
    id=executor.getCubeQueryDefinition().getQueryResultsID();
    rs=AggregationResultSetSaveUtil.load(id,new FileArchiveReader(executor.getSession().getTempDir() + ""String_Node_Str""),VersionManager.getLatestVersion());
  }
  executor.setQueryResultsId(id);
  return rs;
}",0.983947681331748
72650,"public Object getAdater(Object adaptableObject){
  if (this.adapter != null && this.isSingleton) {
    return this.adapter;
  }
  if (this.adapterInstance != null) {
    return this.adapter=this.adapterInstance;
  }
  if (this.factory != null) {
    this.adapter=this.factory.getAdapter(adaptableObject,this.adapterType);
  }
  if (this.adapter == null && this.includeWorkbenchContribute) {
    this.adapter=Platform.getAdapterManager().getAdapter(adaptableObject,this.adapterType);
  }
  return adapter;
}","public Object getAdater(Object adaptableObject){
  if (this.adapter != null && this.isSingleton) {
    return this.adapter;
  }
  if (this.adapterInstance != null) {
    return this.adapterInstance;
  }
  Object apt=null;
  if (this.factory != null) {
    apt=this.factory.getAdapter(adaptableObject,this.adapterType);
  }
  if (apt == null && this.includeWorkbenchContribute) {
    apt=Platform.getAdapterManager().getAdapter(adaptableObject,this.adapterType);
  }
  if (this.isSingleton) {
    this.adapter=apt;
  }
  return apt;
}",0.848893166506256
72651,"public void testIrr(){
  double a[]=new double[]{-70000,12000,15000};
  Object jsNumber=Context.javaToJS(a,scope);
  ScriptableObject.putProperty(scope,""String_Node_Str"",jsNumber);
  String script4=""String_Node_Str"";
  double value4=eval(script4);
  assertEquals(-0.44,value4,0.01);
  String script1=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  double value1=eval(script1);
  assertEquals(0.0866,value1,0.0001);
  String script2=""String_Node_Str"";
  double value2=eval(script2);
  assertEquals(-0.021244848272999998,value2,Double.MIN_VALUE);
  String script3=""String_Node_Str"";
  double value3=eval(script3);
  assertEquals(-0.44,value3,0.01);
  assertFalse(hasException);
}","public void testIrr(){
  double a[]=new double[]{-70000,12000,15000};
  Object jsNumber=Context.javaToJS(a,scope);
  ScriptableObject.putProperty(scope,""String_Node_Str"",jsNumber);
  String script4=""String_Node_Str"";
  double value4=eval(script4);
  assertEquals(-0.44,value4,0.01);
  String script1=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  double value1=eval(script1);
  assertEquals(0.0866,value1,0.0001);
  String script2=""String_Node_Str"";
  double value2=eval(script2);
  assertEquals(-0.021244848273899997,value2,Double.MIN_VALUE);
  String script3=""String_Node_Str"";
  double value3=eval(script3);
  assertEquals(-0.44,value3,0.01);
  assertFalse(hasException);
}",0.9956521739130436
72652,"public void partClosed(IWorkbenchPart part){
  if (part == this && getModel() != null) {
    SessionHandleAdapter.getInstance().clear(getModel());
  }
}","public void partClosed(IWorkbenchPart part){
  if (part == this && getModel() != null) {
    SessionHandleAdapter.getInstance().clear(getModel());
    if (getModel() != null) {
      GlobalActionFactory.removeStackActions(getModel().getCommandStack());
    }
  }
}",0.7307692307692307
72653,"public void partClosed(IWorkbenchPart part){
  if (part instanceof ReportEditorProxy) {
    instance.partClosed(((ReportEditorProxy)part).getEditorPart());
  }
 else {
    instance.partClosed(part);
  }
  if (part == this) {
    SessionHandleAdapter.getInstance().clear(instance.getModel());
  }
}","public void partClosed(IWorkbenchPart part){
  if (part instanceof ReportEditorProxy) {
    instance.partClosed(((ReportEditorProxy)part).getEditorPart());
  }
 else {
    instance.partClosed(part);
  }
  if (part == this) {
    SessionHandleAdapter.getInstance().clear(instance.getModel());
    if (instance.getModel() != null) {
      GlobalActionFactory.removeStackActions(instance.getModel().getCommandStack());
    }
  }
}",0.8204419889502762
72654,"public static IEditorPart getActiveEditor(String id){
  IWorkbenchPage tPage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (tPage == null)   return null;
  IEditorPart activeEditPart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
  IEditorReference[] v=tPage.getEditorReferences();
  int i;
  for (i=0; i < v.length; i++) {
    if (v[i].getId().equals(id)) {
      IEditorPart temp=(IEditorPart)v[i].getPart(true);
      if (temp == activeEditPart)       return activeEditPart;
    }
  }
  return null;
}","public static IEditorPart getActiveEditor(String id){
  IWorkbenchPage tPage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (tPage == null)   return null;
  IEditorPart activeEditPart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
  IEditorReference[] v=tPage.getEditorReferences();
  int i;
  for (i=0; i < v.length; i++) {
    if (v[i].getId().equals(id)) {
      IEditorPart temp=(IEditorPart)v[i].getPart(false);
      if (temp == activeEditPart)       return activeEditPart;
    }
  }
  return null;
}",0.9939077458659704
72655,"/** 
 * This method is called when the plug-in is stopped
 */
public void stop(BundleContext context) throws Exception {
  super.stop(context);
  cellLeftCursor.dispose();
  Platform.getExtensionRegistry().removeRegistryChangeListener(DNDService.getInstance());
}","/** 
 * This method is called when the plug-in is stopped
 */
public void stop(BundleContext context) throws Exception {
  super.stop(context);
  ignore.clear();
  if (cellLeftCursor != null) {
    cellLeftCursor.dispose();
  }
  if (cellRightCursor != null) {
    cellRightCursor.dispose();
  }
  Platform.getExtensionRegistry().removeRegistryChangeListener(DNDService.getInstance());
}",0.7753846153846153
72656,"/** 
 * Set default element names for preference
 * @param store The preference for store
 */
private void setDefaultElementNamePreference(IPreferences store){
  List tmpList=DEUtil.getMetaDataDictionary().getElements();
  List tmpList2=DEUtil.getMetaDataDictionary().getExtensions();
  tmpList.addAll(tmpList2);
  int i;
  StringBuffer bufferDefaultName=new StringBuffer();
  StringBuffer bufferCustomName=new StringBuffer();
  StringBuffer bufferPreference=new StringBuffer();
  int nameOption;
  IElementDefn elementDefn;
  for (i=0; i < tmpList.size(); i++) {
    elementDefn=(IElementDefn)(tmpList.get(i));
    nameOption=elementDefn.getNameOption();
    if (nameOption == MetaDataConstants.NO_NAME || filteName(elementDefn)) {
      continue;
    }
    nameCount++;
    bufferDefaultName.append(elementDefn.getName());
    bufferDefaultName.append(PREFERENCE_DELIMITER);
    bufferCustomName.append(""String_Node_Str"");
    bufferCustomName.append(PREFERENCE_DELIMITER);
    appendDefaultPreference(elementDefn.getName(),bufferPreference);
  }
  store.setDefault(DEFAULT_NAME_PREFERENCE,bufferDefaultName.toString());
  store.setDefault(CUSTOM_NAME_PREFERENCE,bufferCustomName.toString());
  store.setDefault(DESCRIPTION_PREFERENCE,bufferPreference.toString());
  initFilterMap(store,ResourceFilter.generateCVSFilter());
  initFilterMap(store,ResourceFilter.generateDotResourceFilter());
  initFilterMap(store,ResourceFilter.generateEmptyFolderFilter());
}","/** 
 * Set default element names for preference
 * @param store The preference for store
 */
private void setDefaultElementNamePreference(IPreferences store){
  List tmpList=DEUtil.getMetaDataDictionary().getElements();
  List tmpList2=DEUtil.getMetaDataDictionary().getExtensions();
  tmpList.addAll(tmpList2);
  int i;
  StringBuffer bufferDefaultName=new StringBuffer();
  StringBuffer bufferCustomName=new StringBuffer();
  StringBuffer bufferPreference=new StringBuffer();
  int nameOption;
  IElementDefn elementDefn;
  for (i=0; i < tmpList.size(); i++) {
    elementDefn=(IElementDefn)(tmpList.get(i));
    nameOption=elementDefn.getNameOption();
    if (nameOption == MetaDataConstants.NO_NAME || filteName(elementDefn)) {
      continue;
    }
    bufferDefaultName.append(elementDefn.getName());
    bufferDefaultName.append(PREFERENCE_DELIMITER);
    bufferCustomName.append(""String_Node_Str"");
    bufferCustomName.append(PREFERENCE_DELIMITER);
    appendDefaultPreference(elementDefn.getName(),bufferPreference);
  }
  store.setDefault(DEFAULT_NAME_PREFERENCE,bufferDefaultName.toString());
  store.setDefault(CUSTOM_NAME_PREFERENCE,bufferCustomName.toString());
  store.setDefault(DESCRIPTION_PREFERENCE,bufferPreference.toString());
  initFilterMap(store,ResourceFilter.generateCVSFilter());
  initFilterMap(store,ResourceFilter.generateDotResourceFilter());
  initFilterMap(store,ResourceFilter.generateEmptyFolderFilter());
}",0.9941480206540448
72657,"public ArchiveFile getArchive(){
  return archive;
}","public IArchiveFile getArchive(){
  return archive;
}",0.9904761904761904
72658,"public ArchiveWriter(ArchiveFile archive) throws IOException {
  this.archive=archive;
  shareArchive=true;
  streams=new HashSet();
}","public ArchiveWriter(IArchiveFile archive) throws IOException {
  this.archive=archive;
  shareArchive=true;
  streams=new HashSet();
}",0.9962825278810408
72659,"public ArchiveFile getArchive(){
  return archive;
}","public IArchiveFile getArchive(){
  return archive;
}",0.9904761904761904
72660,"/** 
 * Gets a named property
 */
public Object get(String name,Scriptable start){
  logger.entering(JSRowObject.class.getName(),""String_Node_Str"",name);
  if (name.equals(DATA_SET)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"");
    return dataSet.getJSDataSetObject();
  }
 else   if (name.equals(COLUMN_MD)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",getColumnMetadataScriptable());
    return getColumnMetadataScriptable();
  }
 else   if (name.equals(ROW_POSITION)) {
    try {
      return new Integer(dataSet.getCurrentRowIndex());
    }
 catch (    DataException e) {
      logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    }
  }
  try {
    Object value=dataSet.getDataRow().getColumnValue(name);
    return JavascriptEvalUtil.convertToJavascriptValue(value,dataSet.getSharedScope());
  }
 catch (  BirtException e) {
    logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    return new DataExceptionMocker(e);
  }
}","/** 
 * Gets a named property
 */
public Object get(String name,Scriptable start){
  logger.entering(JSRowObject.class.getName(),""String_Node_Str"",name);
  if (name.equals(DATA_SET)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"");
    return dataSet.getJSDataSetObject();
  }
 else   if (name.equals(COLUMN_MD)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",getColumnMetadataScriptable());
    return getColumnMetadataScriptable();
  }
 else   if (name.equals(ROW_POSITION)) {
    try {
      return new Integer(dataSet.getCurrentRowIndex());
    }
 catch (    DataException e) {
      logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    }
  }
  try {
    if (dataSet.getCurrentRow() == null)     return null;
    Object value=dataSet.getDataRow().getColumnValue(name);
    return JavascriptEvalUtil.convertToJavascriptValue(value,dataSet.getSharedScope());
  }
 catch (  BirtException e) {
    logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    return new DataExceptionMocker(e);
  }
}",0.9750859106529208
72661,"/** 
 * Fixes a PNG problem related to transparency. See http://homepage.ntlworld.com/bobosola/ for detail.
 */
protected void fixTransparentPNG(){
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
}","/** 
 * Fixes a PNG problem related to transparency. See http://homepage.ntlworld.com/bobosola/ for detail.
 */
protected void fixTransparentPNG(){
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
  writer.writeCode(""String_Node_Str"");
}",0.9597107438016528
72662,"protected void addCaption(String caption){
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  IReportContent report=tableContent.getReportContent();
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setText(caption);
  captionLabel.getStyle().setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  ICellContent cell=report.createCellContent();
  cell.setColSpan(tableContent.getColumnCount());
  cell.setRowSpan(1);
  cell.setColumn(0);
  captionLabel.setParent(cell);
  cell.getChildren().add(captionLabel);
  IRowContent row=report.createRowContent();
  row.getChildren().add(cell);
  cell.setParent(row);
  ITableBandContent band=report.createTableBandContent();
  band.getChildren().add(row);
  row.setParent(band);
  band.setParent(tableContent);
  PDFTableRegionLM regionLM=getTableRegionLayout();
  regionLM.initialize(band);
  regionLM.layout();
  TableArea tableRegion=(TableArea)content.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      RowArea rowArea=(RowArea)iter.next();
      addArea(rowArea,false,false);
      repeatRowCount++;
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}","protected void addCaption(String caption){
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  IReportContent report=tableContent.getReportContent();
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setText(caption);
  captionLabel.getStyle().setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  ICellContent cell=report.createCellContent();
  cell.setColSpan(tableContent.getColumnCount());
  cell.setRowSpan(1);
  cell.setColumn(0);
  captionLabel.setParent(cell);
  cell.getChildren().add(captionLabel);
  IRowContent row=report.createRowContent();
  row.getChildren().add(cell);
  cell.getStyle().setProperty(IStyle.STYLE_BORDER_TOP_STYLE,IStyle.HIDDEN_VALUE);
  cell.getStyle().setProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE,IStyle.HIDDEN_VALUE);
  cell.getStyle().setProperty(IStyle.STYLE_BORDER_LEFT_STYLE,IStyle.HIDDEN_VALUE);
  cell.getStyle().setProperty(IStyle.STYLE_BORDER_RIGHT_STYLE,IStyle.HIDDEN_VALUE);
  cell.setParent(row);
  ITableBandContent band=report.createTableBandContent();
  band.getChildren().add(row);
  row.setParent(band);
  band.setParent(tableContent);
  PDFTableRegionLM regionLM=getTableRegionLayout();
  regionLM.initialize(band);
  regionLM.layout();
  TableArea tableRegion=(TableArea)content.getExtension(IContent.LAYOUT_EXTENSION);
  if (tableRegion != null && tableRegion.getHeight() < getCurrentMaxContentHeight()) {
    Iterator iter=tableRegion.getChildren();
    while (iter.hasNext()) {
      RowArea rowArea=(RowArea)iter.next();
      addArea(rowArea,false,false);
      repeatRowCount++;
    }
  }
  content.setExtension(IContent.LAYOUT_EXTENSION,null);
}",0.8882195448460509
72663,"/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DteLevelDataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByRowKeyCountTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.util.DirectedGraphTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}","/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DteLevelDataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByRowKeyCountTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.util.DirectedGraphTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.DimensionSegmentsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableHelperTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableHelperTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableRowIteratorWithFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}",0.9660125689367706
72664,"private String getOutputFromCursor(CubeCursor cursor,List columnEdgeBindingNames,List rowEdgeBindingNames,String measureBindingName,String[] columnAggrs) throws OLAPException {
  EdgeCursor edge1=(EdgeCursor)(cursor.getOrdinateEdge().get(0));
  EdgeCursor edge2=(EdgeCursor)(cursor.getOrdinateEdge().get(1));
  String[] lines=new String[columnEdgeBindingNames.size()];
  for (int i=0; i < columnEdgeBindingNames.size(); i++) {
    lines[i]=""String_Node_Str"";
  }
  while (edge1.next()) {
    for (int i=0; i < columnEdgeBindingNames.size(); i++) {
      lines[i]+=cursor.getObject(columnEdgeBindingNames.get(i).toString()) + ""String_Node_Str"";
    }
  }
  String output=""String_Node_Str"";
  for (int i=0; i < lines.length; i++) {
    output+=""String_Node_Str"" + lines[i];
  }
  while (edge2.next()) {
    String line=""String_Node_Str"";
    for (int i=0; i < rowEdgeBindingNames.size(); i++) {
      line+=cursor.getObject(rowEdgeBindingNames.get(i).toString()).toString() + ""String_Node_Str"";
    }
    edge1.beforeFirst();
    while (edge1.next()) {
      line+=cursor.getObject(measureBindingName) + ""String_Node_Str"";
    }
    output+=""String_Node_Str"" + line;
  }
  String line=""String_Node_Str"" + ""String_Node_Str"";
  edge1.beforeFirst();
  edge2.first();
  while (edge1.next()) {
    line+=cursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
  }
  output+=""String_Node_Str"" + line;
  line=""String_Node_Str"" + ""String_Node_Str"";
  edge1.beforeFirst();
  edge2.first();
  while (edge1.next()) {
    line+=cursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
  }
  output+=""String_Node_Str"" + line;
  line=""String_Node_Str"" + ""String_Node_Str"";
  edge1.beforeFirst();
  edge2.first();
  while (edge1.next()) {
    line+=cursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
  }
  output+=""String_Node_Str"" + line;
  line=""String_Node_Str"" + ""String_Node_Str"";
  edge1.beforeFirst();
  edge2.first();
  while (edge1.next()) {
    line+=cursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
  }
  output+=""String_Node_Str"" + line + ""String_Node_Str"";
  return output;
}","private String getOutputFromCursor(CubeCursor cursor,List columnEdgeBindingNames,List rowEdgeBindingNames,String measureBindingName,String[] columnAggrs) throws OLAPException {
  EdgeCursor edge1=(EdgeCursor)(cursor.getOrdinateEdge().get(0));
  EdgeCursor edge2=(EdgeCursor)(cursor.getOrdinateEdge().get(1));
  String[] lines=new String[columnEdgeBindingNames.size()];
  for (int i=0; i < columnEdgeBindingNames.size(); i++) {
    lines[i]=""String_Node_Str"";
  }
  while (edge1.next()) {
    for (int i=0; i < columnEdgeBindingNames.size(); i++) {
      lines[i]+=cursor.getObject(columnEdgeBindingNames.get(i).toString()) + ""String_Node_Str"";
    }
  }
  String output=""String_Node_Str"";
  for (int i=0; i < lines.length; i++) {
    output+=""String_Node_Str"" + lines[i];
  }
  while (edge2.next()) {
    String line=""String_Node_Str"";
    for (int i=0; i < rowEdgeBindingNames.size(); i++) {
      line+=cursor.getObject(rowEdgeBindingNames.get(i).toString()).toString() + ""String_Node_Str"";
    }
    edge1.beforeFirst();
    while (edge1.next()) {
      line+=cursor.getObject(measureBindingName) + ""String_Node_Str"";
    }
    output+=""String_Node_Str"" + line;
  }
  String line=""String_Node_Str"" + ""String_Node_Str"";
  edge1.beforeFirst();
  edge2.first();
  while (edge1.next()) {
    line+=cursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
  }
  output+=""String_Node_Str"" + line;
  line=""String_Node_Str"" + ""String_Node_Str"";
  edge1.beforeFirst();
  edge2.first();
  while (edge1.next()) {
    line+=cursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
  }
  output+=""String_Node_Str"" + line;
  line=""String_Node_Str"" + ""String_Node_Str"";
  edge1.beforeFirst();
  edge2.first();
  while (edge1.next()) {
    line+=cursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
  }
  output+=""String_Node_Str"" + line;
  line=""String_Node_Str"" + ""String_Node_Str"";
  edge1.beforeFirst();
  edge2.first();
  while (edge1.next()) {
    line+=cursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
  }
  output+=""String_Node_Str"" + line;
  line=""String_Node_Str"" + ""String_Node_Str"";
  edge1.beforeFirst();
  edge2.first();
  while (edge1.next()) {
    line+=cursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
  }
  output+=""String_Node_Str"" + line;
  line=""String_Node_Str"" + ""String_Node_Str"";
  edge1.beforeFirst();
  edge2.first();
  while (edge1.next()) {
    line+=cursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
  }
  output+=""String_Node_Str"" + line + ""String_Node_Str"";
  return output;
}",0.8914930555555556
72665,"/** 
 * Test use aggregation with one more arguments, referenced using ""dimension"".
 * @throws Exception
 */
public void testAddingNestAggregations() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  binding6.addAggregateOn(""String_Node_Str"");
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.addAggregateOn(""String_Node_Str"");
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  binding9.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding9.addAggregateOn(""String_Node_Str"");
  ICubeOperation cubeOperation1=new AddingNestAggregations(new IBinding[]{binding7,binding8});
  ICubeOperation cubeOperation2=new AddingNestAggregations(new IBinding[]{binding9});
  cqd.addCubeOperation(cubeOperation1);
  cqd.addCubeOperation(cubeOperation2);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(createPresentationContext());
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"",new String[0]);
  this.checkOutputFile();
  cursor.close();
}","/** 
 * Test adding nest aggregations cube operation	
 * @throws Exception
 */
public void testAddingNestAggregations() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  binding6.addAggregateOn(""String_Node_Str"");
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding8.addAggregateOn(""String_Node_Str"");
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  binding9.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding9.addAggregateOn(""String_Node_Str"");
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  binding10.setAggrFunction(IBuildInAggregation.TOTAL_MAX_FUNC);
  binding10.addAggregateOn(""String_Node_Str"");
  binding10.addAggregateOn(""String_Node_Str"");
  binding10.addAggregateOn(""String_Node_Str"");
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  binding11.setAggrFunction(IBuildInAggregation.TOTAL_MAX_FUNC);
  ICubeOperation cubeOperation1=new AddingNestAggregations(new IBinding[]{binding7,binding8,binding10,binding11});
  ICubeOperation cubeOperation2=new AddingNestAggregations(new IBinding[]{binding9});
  cqd.addCubeOperation(cubeOperation1);
  cqd.addCubeOperation(cubeOperation2);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(createPresentationContext());
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,""String_Node_Str"",new String[0]);
  this.checkOutputFile();
  cursor.close();
}",0.9058778332693046
72666,"protected IStyle getElementStyle(IContent content){
  IStyle style=isEmbeddable ? content.getStyle() : content.getInlineStyle();
  if (style == null || style.isEmpty()) {
    return null;
  }
  return style;
}","protected IStyle getElementStyle(IContent content){
  IStyle style=content.getInlineStyle();
  if (style == null || style.isEmpty()) {
    return null;
  }
  return style;
}",0.9057591623036648
72667,"public HTMLEmitter(HTMLReportEmitter reportEmitter,HTMLWriter writer,boolean isEmbeddable,String layoutPreference){
  this.reportEmitter=reportEmitter;
  this.writer=writer;
  this.isEmbeddable=isEmbeddable;
  this.layoutPreference=layoutPreference;
}","public HTMLEmitter(HTMLReportEmitter reportEmitter,HTMLWriter writer,String layoutPreference){
  this.reportEmitter=reportEmitter;
  this.writer=writer;
  this.layoutPreference=layoutPreference;
}",0.8769574944071589
72668,"public HTMLPerformanceOptimize(HTMLReportEmitter reportEmitter,HTMLWriter writer,boolean isEmbeddable,String layoutPreference){
  super(reportEmitter,writer,isEmbeddable,layoutPreference);
}","public HTMLPerformanceOptimize(HTMLReportEmitter reportEmitter,HTMLWriter writer,String layoutPreference){
  super(reportEmitter,writer,layoutPreference);
}",0.9017341040462428
72669,"/** 
 * Build the style of column
 */
public void buildColumnStyle(IColumn column,StringBuffer styleBuffer){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,column.getWidth());
  IStyle style=column.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  String value=style.getVerticalAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  if (!isEmbeddable) {
    style=column.getInlineStyle();
    if (style == null) {
      return;
    }
  }
  if (style.isEmpty()) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}","/** 
 * Build the style of column
 */
public void buildColumnStyle(IColumn column,StringBuffer styleBuffer){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,column.getWidth());
  IStyle style=column.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  String value=style.getVerticalAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  style=column.getInlineStyle();
  if (style == null || style.isEmpty()) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.5648854961832062
72670,"/** 
 * Sets the <code>'class'</code> property and stores the style to styleMap object.
 * @param styleName the style name
 */
protected void setStyleName(String styleName,IContent content){
  StringBuffer classBuffer=new StringBuffer();
  if (isEmbeddable) {
    return;
  }
  if (styleName != null && outputtedStyles.contains(styleName)) {
    classBuffer.append(styleName);
  }
  if (hasCsslinks) {
    Object genBy=content.getGenerateBy();
    if (genBy instanceof StyledElementDesign) {
      DesignElementHandle handle=((StyledElementDesign)genBy).getHandle();
      if (handle != null) {
        String name=handle.getStringProperty(ReportItemHandle.STYLE_PROP);
        if (name != null) {
          if (classBuffer.length() != 0) {
            classBuffer.append(""String_Node_Str"" + name);
          }
 else {
            classBuffer.append(name);
          }
        }
      }
    }
  }
  if (classBuffer.length() != 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,classBuffer.toString());
  }
}","/** 
 * Sets the <code>'class'</code> property and stores the style to styleMap object.
 * @param styleName the style name
 */
protected void setStyleName(String styleName,IContent content){
  StringBuffer classBuffer=new StringBuffer();
  if (styleName != null && outputtedStyles.contains(styleName)) {
    classBuffer.append(styleName);
  }
  if (hasCsslinks) {
    Object genBy=content.getGenerateBy();
    if (genBy instanceof StyledElementDesign) {
      DesignElementHandle handle=((StyledElementDesign)genBy).getHandle();
      if (handle != null) {
        String name=handle.getStringProperty(ReportItemHandle.STYLE_PROP);
        if (name != null) {
          if (classBuffer.length() != 0) {
            classBuffer.append(""String_Node_Str"" + name);
          }
 else {
            classBuffer.append(name);
          }
        }
      }
    }
  }
  if (classBuffer.length() != 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,classBuffer.toString());
  }
}",0.9806910569105692
72671,"public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (htmlRtLFlag) {
    String reportStyleName=report == null ? null : report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      if (null != style) {
        style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.RIGHT_VALUE);
      }
    }
  }
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
  }
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,isEmbeddable,layoutPreference);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,isEmbeddable,layoutPreference);
  }
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      htmlEmitter.buildDefaultStyle(defaultStyleBuffer,style);
    }
  }
  if (isEmbeddable) {
    fixTransparentPNG();
    fixRedirect();
    writer.openTag(HTMLTags.TAG_DIV);
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_HEAD);
  if (designHandle != null) {
    String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
    if (title == null) {
      if (renderOption != null) {
        HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
        title=htmlOption.getHtmlTitle();
      }
    }
    if (title != null) {
      writer.openTag(HTMLTags.TAG_TITLE);
      writer.text(title);
      writer.closeTag(HTMLTags.TAG_TITLE);
    }
  }
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  String defaultStyleName=""String_Node_Str"";
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    writer.style('.' + defaultStyleName,defaultStyleBuffer.toString());
    Map styles=reportDesign.getStyles();
    Iterator iter=styles.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      String styleName=(String)entry.getKey();
      style=(IStyle)entry.getValue();
      styleBuffer.setLength(0);
      htmlEmitter.buildStyle(styleBuffer,style);
      if (styleBuffer.length() > 0) {
        writer.style('.' + styleName,styleBuffer.toString());
        outputtedStyles.add(styleName);
      }
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  hasCsslinks=false;
  if (designHandle != null) {
    Iterator iter=designHandle.includeCssesIterator();
    while (iter.hasNext()) {
      IncludedCssStyleSheetHandle cssStyleSheetHandle=(IncludedCssStyleSheetHandle)iter.next();
      String href=cssStyleSheetHandle.getExternalCssURI();
      if (href != null) {
        hasCsslinks=true;
        writer.openTag(HTMLTags.TAG_LINK);
        writer.attribute(HTMLTags.ATTR_REL,""String_Node_Str"");
        writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
        writer.attribute(HTMLTags.ATTR_HREF,href);
        writer.closeTag(HTMLTags.TAG_LINK);
      }
    }
  }
  fixTransparentPNG();
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
  }
  if (outputMasterPageContent) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
}","public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (htmlRtLFlag) {
    String reportStyleName=report == null ? null : report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      if (null != style) {
        style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.RIGHT_VALUE);
      }
    }
  }
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
  }
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,layoutPreference);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,layoutPreference);
  }
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      htmlEmitter.buildDefaultStyle(defaultStyleBuffer,style);
    }
  }
  String defaultStyleName=""String_Node_Str"";
  if (isEmbeddable) {
    outputCSSStyles(defaultStyleName,defaultStyleBuffer,reportDesign,designHandle);
    fixTransparentPNG();
    fixRedirect();
    writer.openTag(HTMLTags.TAG_DIV);
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_HEAD);
  if (designHandle != null) {
    String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
    if (title == null) {
      if (renderOption != null) {
        HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
        title=htmlOption.getHtmlTitle();
      }
    }
    if (title != null) {
      writer.openTag(HTMLTags.TAG_TITLE);
      writer.text(title);
      writer.closeTag(HTMLTags.TAG_TITLE);
    }
  }
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  outputCSSStyles(defaultStyleName,defaultStyleBuffer,reportDesign,designHandle);
  fixTransparentPNG();
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
  }
  if (outputMasterPageContent) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
}",0.6613672496025437
72672,"public HTMLVisionOptimize(HTMLReportEmitter reportEmitter,HTMLWriter writer,boolean isEmbeddable,String layoutPreference){
  super(reportEmitter,writer,isEmbeddable,layoutPreference);
}","public HTMLVisionOptimize(HTMLReportEmitter reportEmitter,HTMLWriter writer,String layoutPreference){
  super(reportEmitter,writer,layoutPreference);
}",0.8988095238095238
72673,"/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        if (defaultValueExpr != null) {
          dteDataSet.addParameter(new ParameterAdapter(modelParam));
          paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
        }
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
        paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}",0.9202695115103874
72674,"/** 
 * @param modelDataSet
 * @param dteDataSet
 * @return
 */
private Iterator populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName());
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        if (defaultValueExpr != null) {
          dteDataSet.addParameter(newParam(modelParam));
          paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
        }
      }
 else {
        dteDataSet.addParameter(newParam(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
    }
  }
  return elmtIter;
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 * @return
 */
private Iterator populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName());
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        dteDataSet.addParameter(newParam(modelParam));
        paramBindingCandidates.put(modelParam.getName(),defaultValueExpr);
      }
 else {
        dteDataSet.addParameter(newParam(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),modelParamBinding.getExpression());
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      String expression=(String)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
    }
  }
  return elmtIter;
}",0.9267192784667418
72675,"/** 
 * Gets the width
 * @return the width
 */
public int getWidth(){
  DimensionHandle handle=getColumnHandle().getWidth();
  if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(handle.getUnits())) {
    Object obj=getTableParent();
    if (obj instanceof GridHandle) {
      obj=HandleAdapterFactory.getInstance().getGridHandleAdapter(obj);
    }
 else {
      obj=HandleAdapterFactory.getInstance().getTableHandleAdapter(obj);
    }
    if (obj instanceof TableHandleAdapter) {
      int containerWidth=((TableHandleAdapter)obj).getClientAreaSize().width;
      return (int)(handle.getMeasure() * containerWidth / 100);
    }
  }
  int px=(int)DEUtil.convertoToPixel(handle);
  if (px <= 0) {
    TableHandleAdapter adapter=HandleAdapterFactory.getInstance().getTableHandleAdapter(getTableParent());
    return adapter.getDefaultWidth(getColumnNumber());
  }
  return px;
}","/** 
 * Gets the width
 * @return the width
 */
public int getWidth(){
  DimensionHandle handle=getColumnHandle().getWidth();
  if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(handle.getUnits())) {
    Object obj=getTableParent();
    if (obj instanceof GridHandle) {
      obj=HandleAdapterFactory.getInstance().getGridHandleAdapter(obj);
    }
 else {
      obj=HandleAdapterFactory.getInstance().getTableHandleAdapter(obj);
    }
    if (obj instanceof TableHandleAdapter) {
      int containerWidth=((TableHandleAdapter)obj).getClientAreaSize().width;
      return (int)(handle.getMeasure() * containerWidth / 100);
    }
  }
  int px=(int)(DEUtil.convertoToPixel(handle) + 0.5);
  if (px <= 0) {
    TableHandleAdapter adapter=HandleAdapterFactory.getInstance().getTableHandleAdapter(getTableParent());
    return adapter.getDefaultWidth(getColumnNumber());
  }
  return px;
}",0.9954493742889648
72676,"/** 
 * Returns the raw column with, if it's a fix value, covert it to Pixel unit, if it's a relative value or none, retain it.
 * @return The raw width
 */
public String getRawWidth(){
  DimensionHandle handle=getColumnHandle().getWidth();
  String unit=handle.getUnits();
  if (unit == null || unit.length() == 0) {
    return ""String_Node_Str"";
  }
 else   if (unit.equals(DesignChoiceConstants.UNITS_PERCENTAGE)) {
    return String.valueOf(handle.getMeasure()) + unit;
  }
 else {
    int px=(int)DEUtil.convertoToPixel(handle);
    if (px <= 0) {
      TableHandleAdapter adapter=HandleAdapterFactory.getInstance().getTableHandleAdapter(getTableParent());
      return String.valueOf(adapter.getDefaultWidth(getColumnNumber()));
    }
    return String.valueOf(px);
  }
}","/** 
 * Returns the raw column with, if it's a fix value, covert it to Pixel unit, if it's a relative value or none, retain it.
 * @return The raw width
 */
public String getRawWidth(){
  DimensionHandle handle=getColumnHandle().getWidth();
  String unit=handle.getUnits();
  if (unit == null || unit.length() == 0) {
    return ""String_Node_Str"";
  }
 else   if (unit.equals(DesignChoiceConstants.UNITS_PERCENTAGE)) {
    return String.valueOf(handle.getMeasure()) + unit;
  }
 else {
    int px=(int)(DEUtil.convertoToPixel(handle) + 0.5);
    if (px <= 0) {
      TableHandleAdapter adapter=HandleAdapterFactory.getInstance().getTableHandleAdapter(getTableParent());
      return String.valueOf(adapter.getDefaultWidth(getColumnNumber()));
    }
    return String.valueOf(px);
  }
}",0.9948783610755442
72677,"/** 
 * Gets the height
 * @return
 */
public int getHeight(){
  DimensionHandle handle=getRowHandle().getHeight();
  int px=(int)DEUtil.convertoToPixel(handle);
  if (px <= 0) {
    px=DEFAULT_HEIGHT;
  }
  return px;
}","/** 
 * Gets the height
 * @return
 */
public int getHeight(){
  DimensionHandle handle=getRowHandle().getHeight();
  int px=(int)(DEUtil.convertoToPixel(handle) + 0.5);
  if (px <= 0) {
    px=DEFAULT_HEIGHT;
  }
  return px;
}",0.9821428571428572
72678,"/** 
 * Gets the width
 * @return the width
 */
public int getWidth(){
  DimensionHandle handle=getColumnHandle().getWidth();
  if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(handle.getUnits())) {
    Object obj=getTableParent();
    if (obj instanceof GridHandle) {
      obj=HandleAdapterFactory.getInstance().getGridHandleAdapter(obj);
    }
 else {
      obj=HandleAdapterFactory.getInstance().getTableHandleAdapter(obj);
    }
    if (obj instanceof TableHandleAdapter) {
      int containerWidth=((TableHandleAdapter)obj).getClientAreaSize().width;
      return (int)(handle.getMeasure() * containerWidth / 100);
    }
  }
  int px=(int)(DEUtil.convertoToPixel(handle) + 0.5);
  if (px <= 0) {
    TableHandleAdapter adapter=HandleAdapterFactory.getInstance().getTableHandleAdapter(getTableParent());
    return adapter.getDefaultWidth(getColumnNumber());
  }
  return px;
}","/** 
 * Gets the width
 * @return the width
 */
public int getWidth(){
  DimensionHandle handle=getColumnHandle().getWidth();
  if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(handle.getUnits())) {
    Object obj=getTableParent();
    if (obj instanceof GridHandle) {
      obj=HandleAdapterFactory.getInstance().getGridHandleAdapter(obj);
    }
 else {
      obj=HandleAdapterFactory.getInstance().getTableHandleAdapter(obj);
    }
    if (obj instanceof TableHandleAdapter) {
      int containerWidth=((TableHandleAdapter)obj).getClientAreaSize().width;
      return (int)(handle.getMeasure() * containerWidth / 100);
    }
  }
  int px=(int)DEUtil.convertoToPixel(handle);
  if (px <= 0) {
    TableHandleAdapter adapter=HandleAdapterFactory.getInstance().getTableHandleAdapter(getTableParent());
    return adapter.getDefaultWidth(getColumnNumber());
  }
  return px;
}",0.9954493742889648
72679,"/** 
 * Returns the raw column with, if it's a fix value, covert it to Pixel unit, if it's a relative value or none, retain it.
 * @return The raw width
 */
public String getRawWidth(){
  DimensionHandle handle=getColumnHandle().getWidth();
  String unit=handle.getUnits();
  if (unit == null || unit.length() == 0) {
    return ""String_Node_Str"";
  }
 else   if (unit.equals(DesignChoiceConstants.UNITS_PERCENTAGE)) {
    return String.valueOf(handle.getMeasure()) + unit;
  }
 else {
    int px=(int)(DEUtil.convertoToPixel(handle) + 0.5);
    if (px <= 0) {
      TableHandleAdapter adapter=HandleAdapterFactory.getInstance().getTableHandleAdapter(getTableParent());
      return String.valueOf(adapter.getDefaultWidth(getColumnNumber()));
    }
    return String.valueOf(px);
  }
}","/** 
 * Returns the raw column with, if it's a fix value, covert it to Pixel unit, if it's a relative value or none, retain it.
 * @return The raw width
 */
public String getRawWidth(){
  DimensionHandle handle=getColumnHandle().getWidth();
  String unit=handle.getUnits();
  if (unit == null || unit.length() == 0) {
    return ""String_Node_Str"";
  }
 else   if (unit.equals(DesignChoiceConstants.UNITS_PERCENTAGE)) {
    return String.valueOf(handle.getMeasure()) + unit;
  }
 else {
    int px=(int)DEUtil.convertoToPixel(handle);
    if (px <= 0) {
      TableHandleAdapter adapter=HandleAdapterFactory.getInstance().getTableHandleAdapter(getTableParent());
      return String.valueOf(adapter.getDefaultWidth(getColumnNumber()));
    }
    return String.valueOf(px);
  }
}",0.9948783610755442
72680,"/** 
 * Gets the height
 * @return
 */
public int getHeight(){
  DimensionHandle handle=getRowHandle().getHeight();
  int px=(int)(DEUtil.convertoToPixel(handle) + 0.5);
  if (px <= 0) {
    px=DEFAULT_HEIGHT;
  }
  return px;
}","/** 
 * Gets the height
 * @return
 */
public int getHeight(){
  DimensionHandle handle=getRowHandle().getHeight();
  int px=(int)DEUtil.convertoToPixel(handle);
  if (px <= 0) {
    px=DEFAULT_HEIGHT;
  }
  return px;
}",0.9821428571428572
72681,"private void loadDteMetaInfo(IDocArchiveReader reader) throws IOException {
  ArrayList result=DteMetaInfoIOUtil.loadAllDteMetaInfo(reader);
  if (result != null) {
    StringBuffer buffer=new StringBuffer();
    for (int i=0; i < result.size(); i++) {
      String[] rsetRelation=(String[])result.get(i);
      String pRsetId=rsetRelation[0];
      String rowId=rsetRelation[1];
      String queryId=rsetRelation[2];
      String rsetId=rsetRelation[3];
      buffer.setLength(0);
      buffer.append(pRsetId);
      buffer.append(""String_Node_Str"");
      buffer.append(rowId);
      buffer.append(""String_Node_Str"");
      buffer.append(queryId);
      rsetRelations.put(buffer.toString(),rsetId);
    }
  }
}","private void loadDteMetaInfo(IDocArchiveReader reader) throws IOException {
  ArrayList result=DteMetaInfoIOUtil.loadAllDteMetaInfo(reader);
  if (result != null) {
    for (int i=0; i < result.size(); i++) {
      String[] rsetRelation=(String[])result.get(i);
      String pRsetId=rsetRelation[0];
      String rowId=rsetRelation[1];
      String queryId=rsetRelation[2];
      String rsetId=rsetRelation[3];
      addResultSetRelation(pRsetId,rowId,queryId,rsetId);
    }
  }
}",0.7567114093959731
72682,"protected String getResultID(String pRsetId,String rowId,String queryId){
  keyBuffer.setLength(0);
  keyBuffer.append(pRsetId);
  keyBuffer.append(""String_Node_Str"");
  keyBuffer.append(rowId);
  keyBuffer.append(""String_Node_Str"");
  keyBuffer.append(queryId);
  String rsetId=(String)rsetRelations.get(keyBuffer.toString());
  if (rsetId == null) {
    if (pRsetId != null) {
      int charAt=pRsetId.indexOf(""String_Node_Str"");
      if (charAt != -1) {
        String rootId=pRsetId.substring(0,charAt);
        keyBuffer.setLength(0);
        keyBuffer.append(rootId);
        keyBuffer.append(""String_Node_Str"");
        keyBuffer.append(rowId);
        keyBuffer.append(""String_Node_Str"");
        keyBuffer.append(queryId);
        rsetId=(String)rsetRelations.get(keyBuffer.toString());
      }
    }
  }
  return rsetId;
}","protected String getResultID(String pRsetId,String rowId,String queryId){
  int intRowId=Integer.parseInt(rowId);
  String resultSetId=findResultSetId(pRsetId,intRowId,queryId);
  if (resultSetId == null) {
    if (pRsetId != null) {
      int charAt=pRsetId.indexOf(""String_Node_Str"");
      if (charAt != -1) {
        String rootId=pRsetId.substring(0,charAt);
        resultSetId=findResultSetId(rootId,intRowId,queryId);
      }
    }
  }
  return resultSetId;
}",0.4569230769230769
72683,"public DerbyClassLoader(){
  super(new URL[0],DerbyClassLoader.class.getClassLoader());
  Bundle derbyBundle=Platform.getBundle(""String_Node_Str"");
  if (derbyBundle == null) {
    logger.severe(""String_Node_Str"");
  }
 else {
    URL fileURL=derbyBundle.getEntry(""String_Node_Str"");
    if (fileURL == null) {
      logger.severe(""String_Node_Str"");
    }
 else {
      addURL(fileURL);
      isGood=true;
    }
  }
}","public DerbyClassLoader(){
  super(new URL[0],DerbyClassLoader.class.getClassLoader());
  Bundle derbyBundle=Platform.getBundle(""String_Node_Str"");
  if (derbyBundle == null) {
    logger.severe(""String_Node_Str"");
  }
 else {
    URL fileURL=derbyBundle.getEntry(""String_Node_Str"");
    try {
      fileURL=FileLocator.toFileURL(fileURL);
      if (fileURL == null) {
        logger.severe(""String_Node_Str"");
      }
 else {
        addURL(fileURL);
        isGood=true;
      }
    }
 catch (    IOException e) {
      logger.severe(""String_Node_Str"");
    }
  }
}",0.7208121827411168
72684,"/** 
 * @param figure
 * @param g
 * @param side
 * @param style
 * @param width the border width array, arranged by {top, bottom, left, right};
 * @param color
 * @param insets
 */
protected void drawBorder(IFigure figure,Graphics g,int side,int style,int[] width,String color,Insets insets){
  Rectangle r=figure.getBounds().getCopy().crop(DEFAULT_CROP).crop(insets);
  if (style != 0) {
    g.setForegroundColor(ColorManager.getColor(ColorUtil.parseColor(color)));
    if (style == -2) {
      BorderUtil.drawDoubleLine(g,side,width,r);
    }
 else {
      BorderUtil.drawSingleLine(g,side,style,width,r);
    }
  }
 else {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,side,r);
  }
  g.restoreState();
}","/** 
 * @param figure
 * @param g
 * @param side
 * @param style
 * @param width the border width array, arranged by {top, bottom, left, right};
 * @param color
 * @param insets
 */
protected void drawBorder(IFigure figure,Graphics g,int side,int style,int[] width,String color,Insets insets){
  Rectangle r=figure.getBounds().getCopy().crop(DEFAULT_CROP).crop(insets);
  if (style != 0) {
    g.setForegroundColor(ColorManager.getColor(ColorUtil.parseColor(color)));
    BorderUtil.drawBorderLine(g,side,style,width,r);
  }
 else {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,side,r);
  }
  g.restoreState();
}",0.7018284106891702
72685,"/** 
 * @param figure
 * @param g
 * @param side
 * @param style
 * @param width the border width array, arranged by {top, bottom, left, right};
 * @param color
 * @param insets
 */
protected void drawBorder(IFigure figure,Graphics g,int side,int style,int[] width,int color,Insets insets){
  Rectangle r=figure.getBounds().getCopy().crop(insets);
  if (style != 0) {
    g.setForegroundColor(ColorManager.getColor(color));
    if (style == -2) {
      BorderUtil.drawDoubleLine(g,side,width,r);
    }
 else {
      BorderUtil.drawSingleLine(g,side,style,width,r);
    }
  }
 else {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,side,r);
  }
  g.restoreState();
}","/** 
 * @param figure
 * @param g
 * @param side
 * @param style
 * @param width the border width array, arranged by {top, bottom, left, right};
 * @param color
 * @param insets
 */
protected void drawBorder(IFigure figure,Graphics g,int side,int style,int[] width,int color,Insets insets){
  Rectangle r=figure.getBounds().getCopy().crop(insets);
  if (style != 0) {
    g.setForegroundColor(ColorManager.getColor(color));
    BorderUtil.drawBorderLine(g,side,style,width,r);
  }
 else {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,side,r);
  }
  g.restoreState();
}",0.6821589205397302
72686,"/** 
 * Draw border of the section
 * @param figure
 * @param g
 * @param in
 * @param side
 * @param style
 * @param width
 * @param color
 */
private void drawBorder(IFigure figure,Graphics g,Insets in,int side,int style,int[] width,int color){
  Rectangle r=figure.getBounds().getCropped(in);
  if (style != 0) {
    g.setForegroundColor(ColorManager.getColor(color));
    if (style == -2) {
      BorderUtil.drawDoubleLine(g,side,width,r);
    }
 else {
      BorderUtil.drawSingleLine(g,side,style,width,r);
    }
  }
 else {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,side,r);
  }
  g.restoreState();
}","/** 
 * Draw border of the section
 * @param figure
 * @param g
 * @param in
 * @param side
 * @param style
 * @param width
 * @param color
 */
private void drawBorder(IFigure figure,Graphics g,Insets in,int side,int style,int[] width,int color){
  Rectangle r=figure.getBounds().getCropped(in);
  if (style != 0) {
    g.setForegroundColor(ColorManager.getColor(color));
    BorderUtil.drawBorderLine(g,side,style,width,r);
  }
 else {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,side,r);
  }
  g.restoreState();
}",0.8699186991869918
72687,"/** 
 * @param g
 * @param rowIndex
 * @param colIndex
 * @param data [style][width][color][rowIndex][colIndex].
 */
private void drawTop(Graphics g,int rowIndex,int colIndex,int x,int y,int w,int h,int[] data){
  if (data[0] == 0 && data[1] == 0) {
    return;
  }
  int nLeftWidth=0;
  int nLeftStyle=0;
  int nLeftX=-1;
  int nLeftY=-1;
  if (colIndex > 0) {
    int[] nLeft=borderData[(rowIndex) * (2 * colCount + 1) + colIndex - 1];
    nLeftWidth=nLeft[1];
    nLeftStyle=nLeft[0];
    nLeftX=nLeft[3];
    nLeftY=nLeft[4];
  }
  int nRightWidth=0;
  int nRightStyle=0;
  int nRightX=-1;
  int nRightY=-1;
  if (colIndex < colCount - 1) {
    int[] nRight=borderData[(rowIndex) * (2 * colCount + 1) + colIndex + 1];
    nRightWidth=nRight[1];
    nRightStyle=nRight[0];
    nRightX=nRight[3];
    nRightY=nRight[4];
  }
  int nLeftTopWidth=0;
  int nLeftTopStyle=0;
  int nLeftTopX=-1;
  int nLeftTopY=-1;
  if (rowIndex > 0 && colIndex >= 0) {
    int[] nLeftTop=borderData[(rowIndex - 1) * (2 * colCount + 1) + colCount + colIndex];
    nLeftTopWidth=nLeftTop[1];
    nLeftTopStyle=nLeftTop[0];
    nLeftTopX=nLeftTop[3];
    nLeftTopY=nLeftTop[4];
  }
  int nLeftBottomWidth=0;
  int nLeftBottomStyle=0;
  int nLeftBottomX=-1;
  int nLeftBottomY=-1;
  if (rowIndex <= rowCount - 1 && colIndex >= 0) {
    int[] nLeftBottom=borderData[(rowIndex) * (2 * colCount + 1) + colCount + colIndex];
    nLeftBottomWidth=nLeftBottom[1];
    nLeftBottomStyle=nLeftBottom[0];
    nLeftBottomX=nLeftBottom[3];
    nLeftBottomY=nLeftBottom[4];
  }
  int nRightTopWidth=0;
  int nRightTopStyle=0;
  int nRightTopX=-1;
  int nRightTopY=-1;
  if (rowIndex > 0 && colIndex <= colCount - 1) {
    int[] nRightTop=borderData[(rowIndex - 1) * (2 * colCount + 1) + colCount + colIndex + 1];
    nRightTopWidth=nRightTop[1];
    nRightTopStyle=nRightTop[0];
    nRightTopX=nRightTop[3];
    nRightTopY=nRightTop[4];
  }
  int nRightBottomWidth=0;
  int nRightBottomStyle=0;
  int nRightBottomX=-1;
  int nRightBottomY=-1;
  if (rowIndex <= rowCount - 1 && colIndex <= colCount - 1) {
    int[] nRightBottom=borderData[(rowIndex) * (2 * colCount + 1) + colCount + colIndex + 1];
    nRightBottomWidth=nRightBottom[1];
    nRightBottomStyle=nRightBottom[0];
    nRightBottomX=nRightBottom[3];
    nRightBottomY=nRightBottom[4];
  }
  int nlexWidth=Math.max(nLeftTopWidth,nLeftBottomWidth);
  boolean exLeft=false;
  boolean exRight=false;
  int rx=(colIndex == 0) ? (x + nlexWidth) : (x + nlexWidth / 2);
  int rw=(colIndex == 0) ? (w - nlexWidth) : (w - nlexWidth / 2);
  if (TableBorderCollisionArbiter.canExtend(data,nLeftWidth,nLeftStyle,nLeftBottomWidth,nLeftBottomStyle,nLeftBottomX,nLeftBottomY,nLeftTopWidth,nLeftTopStyle,nLeftTopX,nLeftTopY,true,false) || TableBorderCollisionArbiter.isBrotherWin(data,nLeftWidth,nLeftStyle,nLeftX,nLeftY,nLeftBottomWidth,nLeftBottomStyle,nLeftBottomX,nLeftBottomY,nLeftTopWidth,nLeftTopStyle,nLeftTopX,nLeftTopY,true,false) || (data[3] == -2)) {
    rx=(colIndex == 0) ? (x) : (x - nlexWidth / 2 - nlexWidth % 2);
    rw=(colIndex == 0) ? (w) : (w + nlexWidth / 2 + nlexWidth % 2);
    exLeft=true;
  }
  int nrexWidth=Math.max(nRightTopWidth,nRightBottomWidth);
  if (TableBorderCollisionArbiter.canExtend(data,nRightWidth,nRightStyle,nRightTopWidth,nRightTopStyle,nRightTopX,nRightTopY,nRightBottomWidth,nRightBottomStyle,nRightBottomX,nRightBottomY,false,false) || TableBorderCollisionArbiter.isBrotherWin(data,nRightWidth,nRightStyle,nRightX,nRightY,nRightTopWidth,nRightTopStyle,nRightTopX,nRightTopY,nRightBottomWidth,nRightBottomStyle,nRightBottomX,nRightBottomY,false,false) || (data[3] == -2 && rowIndex == colCount - 1)) {
    rw+=((colIndex == colCount - 1) ? (0) : (nrexWidth / 2));
    exRight=true;
  }
 else {
    rw-=((colIndex == colCount - 1) ? (nrexWidth) : (nrexWidth / 2 + nrexWidth % 2));
  }
  int direction=BorderUtil.TOP;
  int[] widths=new int[]{data[1],0,0,0};
  if (data[3] == nLeftTopX && data[4] == nLeftTopY && data[3] == nRightTopX && data[4] == nRightTopY) {
    direction=BorderUtil.BOTTOM;
    widths[0]=0;
    widths[1]=data[1];
    widths[2]=exLeft ? nLeftTopWidth : 0;
    widths[3]=exRight ? nRightTopWidth : 0;
  }
 else   if (data[3] == nLeftTopX && data[4] == nLeftTopY) {
    direction=BorderUtil.BOTTOM;
    widths[0]=0;
    widths[1]=data[1];
    widths[2]=exLeft ? nLeftTopWidth : 0;
    widths[3]=0;
  }
 else   if (data[3] == nRightTopX && data[4] == nRightTopY) {
    direction=BorderUtil.BOTTOM;
    widths[0]=0;
    widths[1]=data[1];
    widths[2]=0;
    widths[3]=exRight ? nRightTopWidth : 0;
  }
 else   if (data[3] == nLeftBottomX && data[4] == nLeftBottomY && data[3] == nRightBottomX && data[4] == nRightBottomY) {
    widths[0]=data[1];
    widths[1]=0;
    widths[2]=exLeft ? nLeftBottomWidth : 0;
    widths[3]=exRight ? nRightBottomWidth : 0;
  }
 else   if (data[3] == nLeftBottomX && data[4] == nLeftBottomY) {
    widths[0]=data[1];
    widths[1]=0;
    widths[2]=exLeft ? nLeftBottomWidth : 0;
    widths[3]=0;
  }
 else   if (data[3] == nRightBottomX && data[4] == nRightBottomY) {
    widths[0]=data[1];
    widths[1]=0;
    widths[2]=0;
    widths[3]=exRight ? nRightBottomWidth : 0;
  }
 else   if (data[3] != rowIndex || data[4] != colIndex) {
    direction=BorderUtil.TOP;
    widths[0]=data[1];
    widths[1]=0;
    widths[2]=0;
    widths[3]=0;
  }
  Rectangle r=new Rectangle(rx,y + h - data[1] / 2 - data[1] % 2,rw,data[1]);
  if (rowIndex == 0) {
    r.y=y;
  }
  if (data[0] != 0) {
    g.setForegroundColor(ColorManager.getColor(data[2]));
    if (data[0] == -2) {
      BorderUtil.drawDoubleLine(g,direction,widths,r);
    }
 else {
      BorderUtil.drawSingleLine(g,direction,data[0],widths,r);
    }
  }
 else   if (data[1] > 0) {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,direction,r);
  }
}","/** 
 * @param g
 * @param rowIndex
 * @param colIndex
 * @param data [style][width][color][rowIndex][colIndex].
 */
private void drawTop(Graphics g,int rowIndex,int colIndex,int x,int y,int w,int h,int[] data){
  if (data[0] == 0 && data[1] == 0) {
    return;
  }
  int nLeftWidth=0;
  int nLeftStyle=0;
  int nLeftX=-1;
  int nLeftY=-1;
  if (colIndex > 0) {
    int[] nLeft=borderData[(rowIndex) * (2 * colCount + 1) + colIndex - 1];
    nLeftWidth=nLeft[1];
    nLeftStyle=nLeft[0];
    nLeftX=nLeft[3];
    nLeftY=nLeft[4];
  }
  int nRightWidth=0;
  int nRightStyle=0;
  int nRightX=-1;
  int nRightY=-1;
  if (colIndex < colCount - 1) {
    int[] nRight=borderData[(rowIndex) * (2 * colCount + 1) + colIndex + 1];
    nRightWidth=nRight[1];
    nRightStyle=nRight[0];
    nRightX=nRight[3];
    nRightY=nRight[4];
  }
  int nLeftTopWidth=0;
  int nLeftTopStyle=0;
  int nLeftTopX=-1;
  int nLeftTopY=-1;
  if (rowIndex > 0 && colIndex >= 0) {
    int[] nLeftTop=borderData[(rowIndex - 1) * (2 * colCount + 1) + colCount + colIndex];
    nLeftTopWidth=nLeftTop[1];
    nLeftTopStyle=nLeftTop[0];
    nLeftTopX=nLeftTop[3];
    nLeftTopY=nLeftTop[4];
  }
  int nLeftBottomWidth=0;
  int nLeftBottomStyle=0;
  int nLeftBottomX=-1;
  int nLeftBottomY=-1;
  if (rowIndex <= rowCount - 1 && colIndex >= 0) {
    int[] nLeftBottom=borderData[(rowIndex) * (2 * colCount + 1) + colCount + colIndex];
    nLeftBottomWidth=nLeftBottom[1];
    nLeftBottomStyle=nLeftBottom[0];
    nLeftBottomX=nLeftBottom[3];
    nLeftBottomY=nLeftBottom[4];
  }
  int nRightTopWidth=0;
  int nRightTopStyle=0;
  int nRightTopX=-1;
  int nRightTopY=-1;
  if (rowIndex > 0 && colIndex <= colCount - 1) {
    int[] nRightTop=borderData[(rowIndex - 1) * (2 * colCount + 1) + colCount + colIndex + 1];
    nRightTopWidth=nRightTop[1];
    nRightTopStyle=nRightTop[0];
    nRightTopX=nRightTop[3];
    nRightTopY=nRightTop[4];
  }
  int nRightBottomWidth=0;
  int nRightBottomStyle=0;
  int nRightBottomX=-1;
  int nRightBottomY=-1;
  if (rowIndex <= rowCount - 1 && colIndex <= colCount - 1) {
    int[] nRightBottom=borderData[(rowIndex) * (2 * colCount + 1) + colCount + colIndex + 1];
    nRightBottomWidth=nRightBottom[1];
    nRightBottomStyle=nRightBottom[0];
    nRightBottomX=nRightBottom[3];
    nRightBottomY=nRightBottom[4];
  }
  int nlexWidth=Math.max(nLeftTopWidth,nLeftBottomWidth);
  boolean exLeft=false;
  boolean exRight=false;
  int rx=(colIndex == 0) ? (x + nlexWidth) : (x + nlexWidth / 2);
  int rw=(colIndex == 0) ? (w - nlexWidth) : (w - nlexWidth / 2);
  if (TableBorderCollisionArbiter.canExtend(data,nLeftWidth,nLeftStyle,nLeftBottomWidth,nLeftBottomStyle,nLeftBottomX,nLeftBottomY,nLeftTopWidth,nLeftTopStyle,nLeftTopX,nLeftTopY,true,false) || TableBorderCollisionArbiter.isBrotherWin(data,nLeftWidth,nLeftStyle,nLeftX,nLeftY,nLeftBottomWidth,nLeftBottomStyle,nLeftBottomX,nLeftBottomY,nLeftTopWidth,nLeftTopStyle,nLeftTopX,nLeftTopY,true,false) || (data[3] == -2)) {
    rx=(colIndex == 0) ? (x) : (x - nlexWidth / 2 - nlexWidth % 2);
    rw=(colIndex == 0) ? (w) : (w + nlexWidth / 2 + nlexWidth % 2);
    exLeft=true;
  }
  int nrexWidth=Math.max(nRightTopWidth,nRightBottomWidth);
  if (TableBorderCollisionArbiter.canExtend(data,nRightWidth,nRightStyle,nRightTopWidth,nRightTopStyle,nRightTopX,nRightTopY,nRightBottomWidth,nRightBottomStyle,nRightBottomX,nRightBottomY,false,false) || TableBorderCollisionArbiter.isBrotherWin(data,nRightWidth,nRightStyle,nRightX,nRightY,nRightTopWidth,nRightTopStyle,nRightTopX,nRightTopY,nRightBottomWidth,nRightBottomStyle,nRightBottomX,nRightBottomY,false,false) || (data[3] == -2 && rowIndex == colCount - 1)) {
    rw+=((colIndex == colCount - 1) ? (0) : (nrexWidth / 2));
    exRight=true;
  }
 else {
    rw-=((colIndex == colCount - 1) ? (nrexWidth) : (nrexWidth / 2 + nrexWidth % 2));
  }
  int direction=BorderUtil.TOP;
  int[] widths=new int[]{data[1],0,0,0};
  if (data[3] == nLeftTopX && data[4] == nLeftTopY && data[3] == nRightTopX && data[4] == nRightTopY) {
    direction=BorderUtil.BOTTOM;
    widths[0]=0;
    widths[1]=data[1];
    widths[2]=exLeft ? nLeftTopWidth : 0;
    widths[3]=exRight ? nRightTopWidth : 0;
  }
 else   if (data[3] == nLeftTopX && data[4] == nLeftTopY) {
    direction=BorderUtil.BOTTOM;
    widths[0]=0;
    widths[1]=data[1];
    widths[2]=exLeft ? nLeftTopWidth : 0;
    widths[3]=0;
  }
 else   if (data[3] == nRightTopX && data[4] == nRightTopY) {
    direction=BorderUtil.BOTTOM;
    widths[0]=0;
    widths[1]=data[1];
    widths[2]=0;
    widths[3]=exRight ? nRightTopWidth : 0;
  }
 else   if (data[3] == nLeftBottomX && data[4] == nLeftBottomY && data[3] == nRightBottomX && data[4] == nRightBottomY) {
    widths[0]=data[1];
    widths[1]=0;
    widths[2]=exLeft ? nLeftBottomWidth : 0;
    widths[3]=exRight ? nRightBottomWidth : 0;
  }
 else   if (data[3] == nLeftBottomX && data[4] == nLeftBottomY) {
    widths[0]=data[1];
    widths[1]=0;
    widths[2]=exLeft ? nLeftBottomWidth : 0;
    widths[3]=0;
  }
 else   if (data[3] == nRightBottomX && data[4] == nRightBottomY) {
    widths[0]=data[1];
    widths[1]=0;
    widths[2]=0;
    widths[3]=exRight ? nRightBottomWidth : 0;
  }
 else   if (data[3] != rowIndex || data[4] != colIndex) {
    direction=BorderUtil.TOP;
    widths[0]=data[1];
    widths[1]=0;
    widths[2]=0;
    widths[3]=0;
  }
  Rectangle r=new Rectangle(rx,y + h - data[1] / 2 - data[1] % 2,rw,data[1]);
  if (rowIndex == 0) {
    r.y=y;
  }
  if (data[0] != 0) {
    g.setForegroundColor(ColorManager.getColor(data[2]));
    BorderUtil.drawBorderLine(g,direction,data[0],widths,r);
  }
 else   if (data[1] > 0) {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,direction,r);
  }
}",0.9888027562446168
72688,"/** 
 * @param g
 * @param rowIndex
 * @param colIndex
 * @param data [style][width][color][rowIndex][colIndex].
 */
private void drawLeft(Graphics g,int rowIndex,int colIndex,int x,int y,int w,int h,int[] data){
  if (data[0] == 0 && data[1] == 0) {
    return;
  }
  int nTopWidth=0;
  int nTopStyle=0;
  int nTopX=-1;
  int nTopY=-1;
  if (rowIndex > 0) {
    int[] nTop=borderData[(rowIndex - 1) * (2 * colCount + 1) + colCount + colIndex];
    nTopWidth=nTop[1];
    nTopStyle=nTop[0];
    nTopX=nTop[3];
    nTopY=nTop[4];
  }
  int nBottomWidth=0;
  int nBottomStyle=0;
  int nBottomX=-1;
  int nBottomY=-1;
  if (rowIndex < rowCount - 1) {
    int[] nBottom=borderData[(rowIndex + 1) * (2 * colCount + 1) + colCount + colIndex];
    nBottomWidth=nBottom[1];
    nBottomStyle=nBottom[0];
    nBottomX=nBottom[3];
    nBottomY=nBottom[4];
  }
  int nTopLeftWidth=0;
  int nTopLeftStyle=0;
  int nTopLeftX=-1;
  int nTopLeftY=-1;
  if (colIndex > 0 && rowIndex >= 0) {
    int[] nTopLeft=borderData[rowIndex * (2 * colCount + 1) + colIndex - 1];
    nTopLeftWidth=nTopLeft[1];
    nTopLeftStyle=nTopLeft[0];
    nTopLeftX=nTopLeft[3];
    nTopLeftY=nTopLeft[4];
  }
  int nTopRightWidth=0;
  int nTopRightStyle=0;
  int nTopRightX=-1;
  int nTopRightY=-1;
  if (colIndex >= 0 && rowIndex >= 0) {
    int[] nTopRight=borderData[rowIndex * (2 * colCount + 1) + colIndex];
    nTopRightWidth=nTopRight[1];
    nTopRightStyle=nTopRight[0];
    nTopRightX=nTopRight[3];
    nTopRightY=nTopRight[4];
  }
  int nBottomLeftWidth=0;
  int nBottomLeftStyle=0;
  int nBottomLeftX=-1;
  int nBottomLeftY=-1;
  if (colIndex > 0 && rowIndex <= rowCount - 1) {
    int[] nBottomLeft=borderData[(rowIndex + 1) * (2 * colCount + 1) + colIndex - 1];
    nBottomLeftWidth=nBottomLeft[1];
    nBottomLeftStyle=nBottomLeft[0];
    nBottomLeftX=nBottomLeft[3];
    nBottomLeftY=nBottomLeft[4];
  }
  int nBottomRightWidth=0;
  int nBottomRightStyle=0;
  int nBottomRightX=-1;
  int nBottomRightY=-1;
  if (colIndex >= 0 && rowIndex <= rowCount - 1) {
    int[] nBottomRight=borderData[(rowIndex + 1) * (2 * colCount + 1) + colIndex];
    nBottomRightWidth=nBottomRight[1];
    nBottomRightStyle=nBottomRight[0];
    nBottomRightX=nBottomRight[3];
    nBottomRightY=nBottomRight[4];
  }
  int ntexWidth=Math.max(nTopLeftWidth,nTopRightWidth);
  boolean exTop=false;
  boolean exBottom=false;
  int ry=(rowIndex == 0) ? (y + ntexWidth) : (y + ntexWidth / 2);
  int rh=(rowIndex == 0) ? (h - ntexWidth) : (h - ntexWidth / 2);
  if (TableBorderCollisionArbiter.canExtend(data,nTopWidth,nTopStyle,nTopLeftWidth,nTopLeftStyle,nTopLeftX,nTopLeftY,nTopRightWidth,nTopRightStyle,nTopRightX,nTopRightY,true,true) || TableBorderCollisionArbiter.isBrotherWin(data,nTopWidth,nTopStyle,nTopX,nTopY,nTopLeftWidth,nTopLeftStyle,nTopLeftX,nTopLeftY,nTopRightWidth,nTopRightStyle,nTopRightX,nTopRightY,true,true) || (data[3] == -2)) {
    ry=(rowIndex == 0) ? (y) : (y - ntexWidth / 2 - ntexWidth % 2);
    rh=(rowIndex == 0) ? (h) : (h + ntexWidth / 2 + ntexWidth % 2);
    exTop=true;
  }
  int nbexWidth=Math.max(nBottomLeftWidth,nBottomRightWidth);
  if (TableBorderCollisionArbiter.canExtend(data,nBottomWidth,nBottomStyle,nBottomRightWidth,nBottomRightStyle,nBottomRightX,nBottomRightY,nBottomLeftWidth,nBottomLeftStyle,nBottomLeftX,nBottomLeftY,false,true) || TableBorderCollisionArbiter.isBrotherWin(data,nBottomWidth,nBottomStyle,nBottomX,nBottomY,nBottomRightWidth,nBottomRightStyle,nBottomRightX,nBottomRightY,nBottomLeftWidth,nBottomLeftStyle,nBottomLeftX,nBottomLeftY,false,true) || (data[3] == -2 && rowIndex == rowCount - 1)) {
    rh+=((rowIndex == rowCount - 1) ? (0) : (nbexWidth / 2));
    exBottom=true;
  }
 else {
    rh-=((rowIndex == rowCount - 1) ? (nbexWidth) : (nbexWidth / 2 + nbexWidth % 2));
  }
  int direction=BorderUtil.LEFT;
  int[] widths=new int[]{0,0,data[1],0};
  if (data[3] == nTopLeftX && data[4] == nTopLeftY && data[3] == nBottomLeftX && data[4] == nBottomLeftY) {
    direction=BorderUtil.RIGHT;
    widths[0]=exTop ? nTopLeftWidth : 0;
    widths[1]=exBottom ? nBottomLeftWidth : 0;
    widths[2]=0;
    widths[3]=data[1];
  }
 else   if (data[3] == nTopLeftX && data[4] == nTopLeftY) {
    direction=BorderUtil.RIGHT;
    widths[0]=exTop ? nTopLeftWidth : 0;
    widths[1]=0;
    widths[2]=0;
    widths[3]=data[1];
  }
 else   if (data[3] == nBottomLeftX && data[4] == nBottomLeftY) {
    direction=BorderUtil.RIGHT;
    widths[0]=0;
    widths[1]=exBottom ? nBottomLeftWidth : 0;
    widths[2]=0;
    widths[3]=data[1];
  }
 else   if (data[3] == nTopRightX && data[4] == nTopRightY && data[3] == nBottomRightX && data[4] == nBottomRightY) {
    widths[0]=exTop ? nTopRightWidth : 0;
    widths[1]=exBottom ? nBottomRightWidth : 0;
    widths[2]=data[1];
    widths[3]=0;
  }
 else   if (data[3] == nTopRightX && data[4] == nTopRightY) {
    widths[0]=exTop ? nTopRightWidth : 0;
    widths[1]=0;
    widths[2]=data[1];
    widths[3]=0;
  }
 else   if (data[3] == nBottomRightX && data[4] == nBottomRightY) {
    widths[0]=0;
    widths[1]=exBottom ? nBottomRightWidth : 0;
    widths[2]=data[1];
    widths[3]=0;
  }
 else   if (data[3] != rowIndex || data[4] != colIndex) {
    direction=BorderUtil.LEFT;
    widths[0]=0;
    widths[1]=0;
    widths[2]=data[1];
    widths[3]=0;
  }
  Rectangle r=new Rectangle(x - data[1] / 2,ry,data[1],rh);
  if (colIndex == 0) {
    r.x=x;
  }
  if (data[0] != 0) {
    g.setForegroundColor(ColorManager.getColor(data[2]));
    if (data[0] == -2) {
      BorderUtil.drawDoubleLine(g,direction,widths,r);
    }
 else {
      BorderUtil.drawSingleLine(g,direction,data[0],widths,r);
    }
  }
 else   if (data[1] > 0) {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,direction,r);
  }
}","/** 
 * @param g
 * @param rowIndex
 * @param colIndex
 * @param data [style][width][color][rowIndex][colIndex].
 */
private void drawLeft(Graphics g,int rowIndex,int colIndex,int x,int y,int w,int h,int[] data){
  if (data[0] == 0 && data[1] == 0) {
    return;
  }
  int nTopWidth=0;
  int nTopStyle=0;
  int nTopX=-1;
  int nTopY=-1;
  if (rowIndex > 0) {
    int[] nTop=borderData[(rowIndex - 1) * (2 * colCount + 1) + colCount + colIndex];
    nTopWidth=nTop[1];
    nTopStyle=nTop[0];
    nTopX=nTop[3];
    nTopY=nTop[4];
  }
  int nBottomWidth=0;
  int nBottomStyle=0;
  int nBottomX=-1;
  int nBottomY=-1;
  if (rowIndex < rowCount - 1) {
    int[] nBottom=borderData[(rowIndex + 1) * (2 * colCount + 1) + colCount + colIndex];
    nBottomWidth=nBottom[1];
    nBottomStyle=nBottom[0];
    nBottomX=nBottom[3];
    nBottomY=nBottom[4];
  }
  int nTopLeftWidth=0;
  int nTopLeftStyle=0;
  int nTopLeftX=-1;
  int nTopLeftY=-1;
  if (colIndex > 0 && rowIndex >= 0) {
    int[] nTopLeft=borderData[rowIndex * (2 * colCount + 1) + colIndex - 1];
    nTopLeftWidth=nTopLeft[1];
    nTopLeftStyle=nTopLeft[0];
    nTopLeftX=nTopLeft[3];
    nTopLeftY=nTopLeft[4];
  }
  int nTopRightWidth=0;
  int nTopRightStyle=0;
  int nTopRightX=-1;
  int nTopRightY=-1;
  if (colIndex >= 0 && rowIndex >= 0) {
    int[] nTopRight=borderData[rowIndex * (2 * colCount + 1) + colIndex];
    nTopRightWidth=nTopRight[1];
    nTopRightStyle=nTopRight[0];
    nTopRightX=nTopRight[3];
    nTopRightY=nTopRight[4];
  }
  int nBottomLeftWidth=0;
  int nBottomLeftStyle=0;
  int nBottomLeftX=-1;
  int nBottomLeftY=-1;
  if (colIndex > 0 && rowIndex <= rowCount - 1) {
    int[] nBottomLeft=borderData[(rowIndex + 1) * (2 * colCount + 1) + colIndex - 1];
    nBottomLeftWidth=nBottomLeft[1];
    nBottomLeftStyle=nBottomLeft[0];
    nBottomLeftX=nBottomLeft[3];
    nBottomLeftY=nBottomLeft[4];
  }
  int nBottomRightWidth=0;
  int nBottomRightStyle=0;
  int nBottomRightX=-1;
  int nBottomRightY=-1;
  if (colIndex >= 0 && rowIndex <= rowCount - 1) {
    int[] nBottomRight=borderData[(rowIndex + 1) * (2 * colCount + 1) + colIndex];
    nBottomRightWidth=nBottomRight[1];
    nBottomRightStyle=nBottomRight[0];
    nBottomRightX=nBottomRight[3];
    nBottomRightY=nBottomRight[4];
  }
  int ntexWidth=Math.max(nTopLeftWidth,nTopRightWidth);
  boolean exTop=false;
  boolean exBottom=false;
  int ry=(rowIndex == 0) ? (y + ntexWidth) : (y + ntexWidth / 2);
  int rh=(rowIndex == 0) ? (h - ntexWidth) : (h - ntexWidth / 2);
  if (TableBorderCollisionArbiter.canExtend(data,nTopWidth,nTopStyle,nTopLeftWidth,nTopLeftStyle,nTopLeftX,nTopLeftY,nTopRightWidth,nTopRightStyle,nTopRightX,nTopRightY,true,true) || TableBorderCollisionArbiter.isBrotherWin(data,nTopWidth,nTopStyle,nTopX,nTopY,nTopLeftWidth,nTopLeftStyle,nTopLeftX,nTopLeftY,nTopRightWidth,nTopRightStyle,nTopRightX,nTopRightY,true,true) || (data[3] == -2)) {
    ry=(rowIndex == 0) ? (y) : (y - ntexWidth / 2 - ntexWidth % 2);
    rh=(rowIndex == 0) ? (h) : (h + ntexWidth / 2 + ntexWidth % 2);
    exTop=true;
  }
  int nbexWidth=Math.max(nBottomLeftWidth,nBottomRightWidth);
  if (TableBorderCollisionArbiter.canExtend(data,nBottomWidth,nBottomStyle,nBottomRightWidth,nBottomRightStyle,nBottomRightX,nBottomRightY,nBottomLeftWidth,nBottomLeftStyle,nBottomLeftX,nBottomLeftY,false,true) || TableBorderCollisionArbiter.isBrotherWin(data,nBottomWidth,nBottomStyle,nBottomX,nBottomY,nBottomRightWidth,nBottomRightStyle,nBottomRightX,nBottomRightY,nBottomLeftWidth,nBottomLeftStyle,nBottomLeftX,nBottomLeftY,false,true) || (data[3] == -2 && rowIndex == rowCount - 1)) {
    rh+=((rowIndex == rowCount - 1) ? (0) : (nbexWidth / 2));
    exBottom=true;
  }
 else {
    rh-=((rowIndex == rowCount - 1) ? (nbexWidth) : (nbexWidth / 2 + nbexWidth % 2));
  }
  int direction=BorderUtil.LEFT;
  int[] widths=new int[]{0,0,data[1],0};
  if (data[3] == nTopLeftX && data[4] == nTopLeftY && data[3] == nBottomLeftX && data[4] == nBottomLeftY) {
    direction=BorderUtil.RIGHT;
    widths[0]=exTop ? nTopLeftWidth : 0;
    widths[1]=exBottom ? nBottomLeftWidth : 0;
    widths[2]=0;
    widths[3]=data[1];
  }
 else   if (data[3] == nTopLeftX && data[4] == nTopLeftY) {
    direction=BorderUtil.RIGHT;
    widths[0]=exTop ? nTopLeftWidth : 0;
    widths[1]=0;
    widths[2]=0;
    widths[3]=data[1];
  }
 else   if (data[3] == nBottomLeftX && data[4] == nBottomLeftY) {
    direction=BorderUtil.RIGHT;
    widths[0]=0;
    widths[1]=exBottom ? nBottomLeftWidth : 0;
    widths[2]=0;
    widths[3]=data[1];
  }
 else   if (data[3] == nTopRightX && data[4] == nTopRightY && data[3] == nBottomRightX && data[4] == nBottomRightY) {
    widths[0]=exTop ? nTopRightWidth : 0;
    widths[1]=exBottom ? nBottomRightWidth : 0;
    widths[2]=data[1];
    widths[3]=0;
  }
 else   if (data[3] == nTopRightX && data[4] == nTopRightY) {
    widths[0]=exTop ? nTopRightWidth : 0;
    widths[1]=0;
    widths[2]=data[1];
    widths[3]=0;
  }
 else   if (data[3] == nBottomRightX && data[4] == nBottomRightY) {
    widths[0]=0;
    widths[1]=exBottom ? nBottomRightWidth : 0;
    widths[2]=data[1];
    widths[3]=0;
  }
 else   if (data[3] != rowIndex || data[4] != colIndex) {
    direction=BorderUtil.LEFT;
    widths[0]=0;
    widths[1]=0;
    widths[2]=data[1];
    widths[3]=0;
  }
  Rectangle r=new Rectangle(x - data[1] / 2,ry,data[1],rh);
  if (colIndex == 0) {
    r.x=x;
  }
  if (data[0] != 0) {
    g.setForegroundColor(ColorManager.getColor(data[2]));
    BorderUtil.drawBorderLine(g,direction,data[0],widths,r);
  }
 else   if (data[1] > 0) {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,direction,r);
  }
}",0.988666085440279
72689,"/** 
 * @param g
 * @param rowIndex
 * @param colIndex
 * @param data [style][width][color][rowIndex][colIndex].
 */
private void drawRight(Graphics g,int rowIndex,int colIndex,int x,int y,int w,int h,int[] data){
  if (data[0] == 0 && data[1] == 0) {
    return;
  }
  int nTopWidth=0;
  int nTopStyle=0;
  int nTopX=-1;
  int nTopY=-1;
  if (rowIndex > 0) {
    int[] nTop=borderData[(rowIndex - 1) * (2 * colCount + 1) + colCount + colIndex + 1];
    nTopWidth=nTop[1];
    nTopStyle=nTop[0];
    nTopX=nTop[3];
    nTopY=nTop[4];
  }
  int nBottomWidth=0;
  int nBottomStyle=0;
  int nBottomX=-1;
  int nBottomY=-1;
  if (rowIndex < rowCount - 1) {
    int[] nBottom=borderData[(rowIndex + 1) * (2 * colCount + 1) + colCount + colIndex + 1];
    nBottomWidth=nBottom[1];
    nBottomStyle=nBottom[0];
    nBottomX=nBottom[3];
    nBottomY=nBottom[4];
  }
  int nTopLeftWidth=0;
  int nTopLeftStyle=0;
  int nTopLeftX=-1;
  int nTopLeftY=-1;
  if (colIndex <= colCount - 1 && rowIndex >= 0) {
    int[] nTopLeft=borderData[rowIndex * (2 * colCount + 1) + colIndex];
    nTopLeftWidth=nTopLeft[1];
    nTopLeftStyle=nTopLeft[0];
    nTopLeftX=nTopLeft[3];
    nTopLeftY=nTopLeft[4];
  }
  int nTopRightWidth=0;
  int nTopRightStyle=0;
  int nTopRightX=-1;
  int nTopRightY=-1;
  if (colIndex < colCount - 1 && rowIndex >= 0) {
    int[] nTopRight=borderData[rowIndex * (2 * colCount + 1) + colIndex + 1];
    nTopRightWidth=nTopRight[1];
    nTopRightStyle=nTopRight[0];
    nTopRightX=nTopRight[3];
    nTopRightY=nTopRight[4];
  }
  int nBottomLeftWidth=0;
  int nBottomLeftStyle=0;
  int nBottomLeftX=-1;
  int nBottomLeftY=-1;
  if (colIndex <= colCount - 1 && rowIndex <= rowCount - 1) {
    int[] nBottomLeft=borderData[(rowIndex + 1) * (2 * colCount + 1) + colIndex];
    nBottomLeftWidth=nBottomLeft[1];
    nBottomLeftStyle=nBottomLeft[0];
    nBottomLeftX=nBottomLeft[3];
    nBottomLeftY=nBottomLeft[4];
  }
  int nBottomRightWidth=0;
  int nBottomRightStyle=0;
  int nBottomRightX=-1;
  int nBottomRightY=-1;
  if (colIndex < colCount - 1 && rowIndex <= rowCount - 1) {
    int[] nBottomRight=borderData[(rowIndex + 1) * (2 * colCount + 1) + colIndex + 1];
    nBottomRightWidth=nBottomRight[1];
    nBottomRightStyle=nBottomRight[0];
    nBottomRightX=nBottomRight[3];
    nBottomRightY=nBottomRight[4];
  }
  int ntexWidth=Math.max(nTopLeftWidth,nTopRightWidth);
  boolean exTop=false;
  boolean exBottom=false;
  int ry=(rowIndex == 0) ? (y + ntexWidth) : (y + ntexWidth / 2);
  int rh=(rowIndex == 0) ? (h - ntexWidth) : (h - ntexWidth / 2);
  if (((TableBorderCollisionArbiter.canExtend(data,nTopWidth,nTopStyle,nTopLeftWidth,nTopLeftStyle,nTopLeftX,nTopLeftY,nTopRightWidth,nTopRightStyle,nTopRightX,nTopRightY,true,true) || TableBorderCollisionArbiter.isBrotherWin(data,nTopWidth,nTopStyle,nTopX,nTopY,nTopLeftWidth,nTopLeftStyle,nTopLeftX,nTopLeftY,nTopRightWidth,nTopRightStyle,nTopRightX,nTopRightY,true,true)) && (nTopLeftX != -2 && nTopRightX != -2)) || (data[3] == -2)) {
    ry=(rowIndex == 0) ? (y) : (y - ntexWidth / 2 - ntexWidth % 2);
    rh=(rowIndex == 0) ? (h) : (h + ntexWidth / 2 + ntexWidth % 2);
    exTop=true;
  }
  int nbexWidth=Math.max(nBottomLeftWidth,nBottomRightWidth);
  if (((TableBorderCollisionArbiter.canExtend(data,nBottomWidth,nBottomStyle,nBottomRightWidth,nBottomRightStyle,nBottomRightX,nBottomRightY,nBottomLeftWidth,nBottomLeftStyle,nBottomLeftX,nBottomLeftY,false,true) || TableBorderCollisionArbiter.isBrotherWin(data,nBottomWidth,nBottomStyle,nBottomX,nBottomY,nBottomRightWidth,nBottomRightStyle,nBottomRightX,nBottomRightY,nBottomLeftWidth,nBottomLeftStyle,nBottomLeftX,nBottomLeftY,false,true)) && (nBottomLeftX != -2 && nBottomRightX != -2)) || (data[3] == -2)) {
    rh+=((rowIndex == rowCount - 1) ? (0) : (nbexWidth / 2));
    exBottom=true;
  }
 else {
    rh-=((rowIndex == rowCount - 1) ? (nbexWidth) : (nbexWidth / 2 + nbexWidth % 2));
  }
  int direction=BorderUtil.RIGHT;
  int[] widths=new int[]{0,0,0,data[1]};
  if (data[3] == nTopLeftX && data[4] == nTopLeftY && data[3] == nBottomLeftX && data[4] == nBottomLeftY) {
    widths[0]=exTop ? nTopLeftWidth : 0;
    widths[1]=exBottom ? nBottomLeftWidth : 0;
    widths[2]=0;
    widths[3]=data[1];
  }
 else   if (data[3] == nTopLeftX && data[4] == nTopLeftY) {
    widths[0]=exTop ? nTopLeftWidth : 0;
    widths[1]=0;
    widths[2]=0;
    widths[3]=data[1];
  }
 else   if (data[3] == nBottomLeftX && data[4] == nBottomLeftY) {
    widths[0]=0;
    widths[1]=exBottom ? nBottomLeftWidth : 0;
    widths[2]=0;
    widths[3]=data[1];
  }
 else   if (data[3] == nTopRightX && data[4] == nTopRightY && data[3] == nBottomRightX && data[4] == nBottomRightY) {
    direction=BorderUtil.LEFT;
    widths[0]=exTop ? nTopRightWidth : 0;
    widths[1]=exBottom ? nBottomRightWidth : 0;
    widths[2]=data[1];
    widths[3]=0;
  }
 else   if (data[3] == nTopRightX && data[4] == nTopRightY) {
    direction=BorderUtil.LEFT;
    widths[0]=exTop ? nTopRightWidth : 0;
    widths[1]=0;
    widths[2]=data[1];
    widths[3]=0;
  }
 else   if (data[3] == nBottomRightX && data[4] == nBottomRightY) {
    direction=BorderUtil.LEFT;
    widths[0]=0;
    widths[1]=exBottom ? nBottomRightWidth : 0;
    widths[2]=data[1];
    widths[3]=0;
  }
 else   if (data[3] != rowIndex || data[4] != colIndex) {
    direction=BorderUtil.LEFT;
    widths[0]=0;
    widths[1]=0;
    widths[2]=data[1];
    widths[3]=0;
  }
  Rectangle r=new Rectangle(x + w - data[1] / 2 - data[1] % 2,ry,data[1],rh);
  if (colIndex == colCount - 1) {
    r.x=x + w - data[1];
  }
  if (data[0] != 0) {
    g.setForegroundColor(ColorManager.getColor(data[2]));
    if (data[0] == -2) {
      BorderUtil.drawDoubleLine(g,direction,widths,r);
    }
 else {
      BorderUtil.drawSingleLine(g,direction,data[0],widths,r);
    }
  }
 else   if (data[1] > 0) {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,direction,r);
  }
}","/** 
 * @param g
 * @param rowIndex
 * @param colIndex
 * @param data [style][width][color][rowIndex][colIndex].
 */
private void drawRight(Graphics g,int rowIndex,int colIndex,int x,int y,int w,int h,int[] data){
  if (data[0] == 0 && data[1] == 0) {
    return;
  }
  int nTopWidth=0;
  int nTopStyle=0;
  int nTopX=-1;
  int nTopY=-1;
  if (rowIndex > 0) {
    int[] nTop=borderData[(rowIndex - 1) * (2 * colCount + 1) + colCount + colIndex + 1];
    nTopWidth=nTop[1];
    nTopStyle=nTop[0];
    nTopX=nTop[3];
    nTopY=nTop[4];
  }
  int nBottomWidth=0;
  int nBottomStyle=0;
  int nBottomX=-1;
  int nBottomY=-1;
  if (rowIndex < rowCount - 1) {
    int[] nBottom=borderData[(rowIndex + 1) * (2 * colCount + 1) + colCount + colIndex + 1];
    nBottomWidth=nBottom[1];
    nBottomStyle=nBottom[0];
    nBottomX=nBottom[3];
    nBottomY=nBottom[4];
  }
  int nTopLeftWidth=0;
  int nTopLeftStyle=0;
  int nTopLeftX=-1;
  int nTopLeftY=-1;
  if (colIndex <= colCount - 1 && rowIndex >= 0) {
    int[] nTopLeft=borderData[rowIndex * (2 * colCount + 1) + colIndex];
    nTopLeftWidth=nTopLeft[1];
    nTopLeftStyle=nTopLeft[0];
    nTopLeftX=nTopLeft[3];
    nTopLeftY=nTopLeft[4];
  }
  int nTopRightWidth=0;
  int nTopRightStyle=0;
  int nTopRightX=-1;
  int nTopRightY=-1;
  if (colIndex < colCount - 1 && rowIndex >= 0) {
    int[] nTopRight=borderData[rowIndex * (2 * colCount + 1) + colIndex + 1];
    nTopRightWidth=nTopRight[1];
    nTopRightStyle=nTopRight[0];
    nTopRightX=nTopRight[3];
    nTopRightY=nTopRight[4];
  }
  int nBottomLeftWidth=0;
  int nBottomLeftStyle=0;
  int nBottomLeftX=-1;
  int nBottomLeftY=-1;
  if (colIndex <= colCount - 1 && rowIndex <= rowCount - 1) {
    int[] nBottomLeft=borderData[(rowIndex + 1) * (2 * colCount + 1) + colIndex];
    nBottomLeftWidth=nBottomLeft[1];
    nBottomLeftStyle=nBottomLeft[0];
    nBottomLeftX=nBottomLeft[3];
    nBottomLeftY=nBottomLeft[4];
  }
  int nBottomRightWidth=0;
  int nBottomRightStyle=0;
  int nBottomRightX=-1;
  int nBottomRightY=-1;
  if (colIndex < colCount - 1 && rowIndex <= rowCount - 1) {
    int[] nBottomRight=borderData[(rowIndex + 1) * (2 * colCount + 1) + colIndex + 1];
    nBottomRightWidth=nBottomRight[1];
    nBottomRightStyle=nBottomRight[0];
    nBottomRightX=nBottomRight[3];
    nBottomRightY=nBottomRight[4];
  }
  int ntexWidth=Math.max(nTopLeftWidth,nTopRightWidth);
  boolean exTop=false;
  boolean exBottom=false;
  int ry=(rowIndex == 0) ? (y + ntexWidth) : (y + ntexWidth / 2);
  int rh=(rowIndex == 0) ? (h - ntexWidth) : (h - ntexWidth / 2);
  if (((TableBorderCollisionArbiter.canExtend(data,nTopWidth,nTopStyle,nTopLeftWidth,nTopLeftStyle,nTopLeftX,nTopLeftY,nTopRightWidth,nTopRightStyle,nTopRightX,nTopRightY,true,true) || TableBorderCollisionArbiter.isBrotherWin(data,nTopWidth,nTopStyle,nTopX,nTopY,nTopLeftWidth,nTopLeftStyle,nTopLeftX,nTopLeftY,nTopRightWidth,nTopRightStyle,nTopRightX,nTopRightY,true,true)) && (nTopLeftX != -2 && nTopRightX != -2)) || (data[3] == -2)) {
    ry=(rowIndex == 0) ? (y) : (y - ntexWidth / 2 - ntexWidth % 2);
    rh=(rowIndex == 0) ? (h) : (h + ntexWidth / 2 + ntexWidth % 2);
    exTop=true;
  }
  int nbexWidth=Math.max(nBottomLeftWidth,nBottomRightWidth);
  if (((TableBorderCollisionArbiter.canExtend(data,nBottomWidth,nBottomStyle,nBottomRightWidth,nBottomRightStyle,nBottomRightX,nBottomRightY,nBottomLeftWidth,nBottomLeftStyle,nBottomLeftX,nBottomLeftY,false,true) || TableBorderCollisionArbiter.isBrotherWin(data,nBottomWidth,nBottomStyle,nBottomX,nBottomY,nBottomRightWidth,nBottomRightStyle,nBottomRightX,nBottomRightY,nBottomLeftWidth,nBottomLeftStyle,nBottomLeftX,nBottomLeftY,false,true)) && (nBottomLeftX != -2 && nBottomRightX != -2)) || (data[3] == -2)) {
    rh+=((rowIndex == rowCount - 1) ? (0) : (nbexWidth / 2));
    exBottom=true;
  }
 else {
    rh-=((rowIndex == rowCount - 1) ? (nbexWidth) : (nbexWidth / 2 + nbexWidth % 2));
  }
  int direction=BorderUtil.RIGHT;
  int[] widths=new int[]{0,0,0,data[1]};
  if (data[3] == nTopLeftX && data[4] == nTopLeftY && data[3] == nBottomLeftX && data[4] == nBottomLeftY) {
    widths[0]=exTop ? nTopLeftWidth : 0;
    widths[1]=exBottom ? nBottomLeftWidth : 0;
    widths[2]=0;
    widths[3]=data[1];
  }
 else   if (data[3] == nTopLeftX && data[4] == nTopLeftY) {
    widths[0]=exTop ? nTopLeftWidth : 0;
    widths[1]=0;
    widths[2]=0;
    widths[3]=data[1];
  }
 else   if (data[3] == nBottomLeftX && data[4] == nBottomLeftY) {
    widths[0]=0;
    widths[1]=exBottom ? nBottomLeftWidth : 0;
    widths[2]=0;
    widths[3]=data[1];
  }
 else   if (data[3] == nTopRightX && data[4] == nTopRightY && data[3] == nBottomRightX && data[4] == nBottomRightY) {
    direction=BorderUtil.LEFT;
    widths[0]=exTop ? nTopRightWidth : 0;
    widths[1]=exBottom ? nBottomRightWidth : 0;
    widths[2]=data[1];
    widths[3]=0;
  }
 else   if (data[3] == nTopRightX && data[4] == nTopRightY) {
    direction=BorderUtil.LEFT;
    widths[0]=exTop ? nTopRightWidth : 0;
    widths[1]=0;
    widths[2]=data[1];
    widths[3]=0;
  }
 else   if (data[3] == nBottomRightX && data[4] == nBottomRightY) {
    direction=BorderUtil.LEFT;
    widths[0]=0;
    widths[1]=exBottom ? nBottomRightWidth : 0;
    widths[2]=data[1];
    widths[3]=0;
  }
 else   if (data[3] != rowIndex || data[4] != colIndex) {
    direction=BorderUtil.LEFT;
    widths[0]=0;
    widths[1]=0;
    widths[2]=data[1];
    widths[3]=0;
  }
  Rectangle r=new Rectangle(x + w - data[1] / 2 - data[1] % 2,ry,data[1],rh);
  if (colIndex == colCount - 1) {
    r.x=x + w - data[1];
  }
  if (data[0] != 0) {
    g.setForegroundColor(ColorManager.getColor(data[2]));
    BorderUtil.drawBorderLine(g,direction,data[0],widths,r);
  }
 else   if (data[1] > 0) {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,direction,r);
  }
}",0.988977446159064
72690,"/** 
 * @param g
 * @param rowIndex
 * @param colIndex
 * @param data [style][width][color][rowIndex][colIndex].
 */
private void drawBottom(Graphics g,int rowIndex,int colIndex,int x,int y,int w,int h,int[] data){
  if (data[0] == 0 && data[1] == 0) {
    return;
  }
  int nLeftWidth=0;
  int nLeftStyle=0;
  int nLeftX=-1;
  int nLeftY=-1;
  if (colIndex > 0) {
    int[] nLeft=borderData[(rowIndex + 1) * (2 * colCount + 1) + colIndex - 1];
    nLeftWidth=nLeft[1];
    nLeftStyle=nLeft[0];
    nLeftX=nLeft[3];
    nLeftY=nLeft[4];
  }
  int nRightWidth=0;
  int nRightStyle=0;
  int nRightX=-1;
  int nRightY=-1;
  if (colIndex < colCount - 1) {
    int[] nRight=borderData[(rowIndex + 1) * (2 * colCount + 1) + colIndex + 1];
    nRightWidth=nRight[1];
    nRightStyle=nRight[0];
    nRightX=nRight[3];
    nRightY=nRight[4];
  }
  int nLeftTopWidth=0;
  int nLeftTopStyle=0;
  int nLeftTopX=-1;
  int nLeftTopY=-1;
  if (rowIndex >= 0 && colIndex >= 0) {
    int[] nLeftTop=borderData[(rowIndex) * (2 * colCount + 1) + colCount + colIndex];
    nLeftTopWidth=nLeftTop[1];
    nLeftTopStyle=nLeftTop[0];
    nLeftTopX=nLeftTop[3];
    nLeftTopY=nLeftTop[4];
  }
  int nLeftBottomWidth=0;
  int nLeftBottomStyle=0;
  int nLeftBottomX=-1;
  int nLeftBottomY=-1;
  if (rowIndex < rowCount - 1 && colIndex >= 0) {
    int[] nLeftBottom=borderData[(rowIndex + 1) * (2 * colCount + 1) + colCount + colIndex];
    nLeftBottomWidth=nLeftBottom[1];
    nLeftBottomStyle=nLeftBottom[0];
    nLeftBottomX=nLeftBottom[3];
    nLeftBottomY=nLeftBottom[4];
  }
  int nRightTopWidth=0;
  int nRightTopStyle=0;
  int nRightTopX=-1;
  int nRightTopY=-1;
  if (rowIndex >= 0 && colIndex <= colCount - 1) {
    int[] nRightTop=borderData[(rowIndex) * (2 * colCount + 1) + colCount + colIndex + 1];
    nRightTopWidth=nRightTop[1];
    nRightTopStyle=nRightTop[0];
    nRightTopX=nRightTop[3];
    nRightTopY=nRightTop[4];
  }
  int nRightBottomWidth=0;
  int nRightBottomStyle=0;
  int nRightBottomX=-1;
  int nRightBottomY=-1;
  if (rowIndex < rowCount - 1 && colIndex <= colCount - 1) {
    int[] nRightBottom=borderData[(rowIndex + 1) * (2 * colCount + 1) + colCount + colIndex + 1];
    nRightBottomWidth=nRightBottom[1];
    nRightBottomStyle=nRightBottom[0];
    nRightBottomX=nRightBottom[3];
    nRightBottomY=nRightBottom[4];
  }
  int nlexWidth=Math.max(nLeftTopWidth,nLeftBottomWidth);
  boolean exLeft=false;
  boolean exRight=false;
  int rx=(colIndex == 0) ? (x + nlexWidth) : (x + nlexWidth / 2);
  int rw=(colIndex == 0) ? (w - nlexWidth) : (w - nlexWidth / 2);
  if (((TableBorderCollisionArbiter.canExtend(data,nLeftWidth,nLeftStyle,nLeftBottomWidth,nLeftBottomStyle,nLeftBottomX,nLeftBottomY,nLeftTopWidth,nLeftTopStyle,nLeftTopX,nLeftTopY,true,false) || TableBorderCollisionArbiter.isBrotherWin(data,nLeftWidth,nLeftStyle,nLeftX,nLeftY,nLeftBottomWidth,nLeftBottomStyle,nLeftBottomX,nLeftBottomY,nLeftTopWidth,nLeftTopStyle,nLeftTopX,nLeftTopY,true,false)) && (nLeftTopX != -2 && nLeftBottomX != -2)) || (data[3] == -2)) {
    rx=(colIndex == 0) ? (x) : (x - nlexWidth / 2 - nlexWidth % 2);
    rw=(colIndex == 0) ? (w) : (w + nlexWidth / 2 + nlexWidth % 2);
    exLeft=true;
  }
  int nrexWidth=Math.max(nRightTopWidth,nRightBottomWidth);
  if (((TableBorderCollisionArbiter.canExtend(data,nRightWidth,nRightStyle,nRightTopWidth,nRightTopStyle,nRightTopX,nRightTopY,nRightBottomWidth,nRightBottomStyle,nRightBottomX,nRightBottomY,false,false) || TableBorderCollisionArbiter.isBrotherWin(data,nRightWidth,nRightStyle,nRightX,nRightY,nRightTopWidth,nRightTopStyle,nRightTopX,nRightTopY,nRightBottomWidth,nRightBottomStyle,nRightBottomX,nRightBottomY,false,false)) && (nRightTopX != -2 && nRightBottomX != -2)) || (data[3] == -2)) {
    rw+=((colIndex == colCount - 1) ? (0) : (nrexWidth / 2));
    exRight=true;
  }
 else {
    rw-=((colIndex == colCount - 1) ? (nrexWidth) : (nrexWidth / 2 + nrexWidth % 2));
  }
  int direction=BorderUtil.BOTTOM;
  int[] widths=new int[]{0,data[1],0,0};
  if (data[3] == nLeftTopX && data[4] == nLeftTopY && data[3] == nRightTopX && data[4] == nRightTopY) {
    widths[0]=0;
    widths[1]=data[1];
    widths[2]=exLeft ? nLeftTopWidth : 0;
    widths[3]=exRight ? nRightTopWidth : 0;
  }
 else   if (data[3] == nLeftTopX && data[4] == nLeftTopY) {
    widths[0]=0;
    widths[1]=data[1];
    widths[2]=exLeft ? nLeftTopWidth : 0;
    widths[3]=0;
  }
 else   if (data[3] == nRightTopX && data[4] == nRightTopY) {
    widths[0]=0;
    widths[1]=data[1];
    widths[2]=0;
    widths[3]=exRight ? nRightTopWidth : 0;
  }
 else   if (data[3] == nLeftBottomX && data[4] == nLeftBottomY && data[3] == nRightBottomX && data[4] == nRightBottomY) {
    direction=BorderUtil.TOP;
    widths[0]=data[1];
    widths[1]=0;
    widths[2]=exLeft ? nLeftBottomWidth : 0;
    widths[3]=exRight ? nRightBottomWidth : 0;
  }
 else   if (data[3] == nLeftBottomX && data[4] == nLeftBottomY) {
    direction=BorderUtil.TOP;
    widths[0]=data[1];
    widths[1]=0;
    widths[2]=exLeft ? nLeftBottomWidth : 0;
    widths[3]=0;
  }
 else   if (data[3] == nRightBottomX && data[4] == nRightBottomY) {
    direction=BorderUtil.TOP;
    widths[0]=data[1];
    widths[1]=0;
    widths[2]=0;
    widths[3]=exRight ? nRightBottomWidth : 0;
  }
 else   if (data[3] != rowIndex || data[4] != colIndex) {
    direction=BorderUtil.TOP;
    widths[0]=data[1];
    widths[1]=0;
    widths[2]=0;
    widths[3]=0;
  }
  Rectangle r=new Rectangle(rx,y + h - data[1] / 2 - data[1] % 2,rw,data[1]);
  if (rowIndex == rowCount - 1) {
    r.y=y + h - data[1];
  }
  if (data[0] != 0) {
    g.setForegroundColor(ColorManager.getColor(data[2]));
    if (data[0] == -2) {
      BorderUtil.drawDoubleLine(g,direction,widths,r);
    }
 else {
      BorderUtil.drawSingleLine(g,direction,data[0],widths,r);
    }
  }
 else   if (data[1] > 0) {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,direction,r);
  }
}","/** 
 * @param g
 * @param rowIndex
 * @param colIndex
 * @param data [style][width][color][rowIndex][colIndex].
 */
private void drawBottom(Graphics g,int rowIndex,int colIndex,int x,int y,int w,int h,int[] data){
  if (data[0] == 0 && data[1] == 0) {
    return;
  }
  int nLeftWidth=0;
  int nLeftStyle=0;
  int nLeftX=-1;
  int nLeftY=-1;
  if (colIndex > 0) {
    int[] nLeft=borderData[(rowIndex + 1) * (2 * colCount + 1) + colIndex - 1];
    nLeftWidth=nLeft[1];
    nLeftStyle=nLeft[0];
    nLeftX=nLeft[3];
    nLeftY=nLeft[4];
  }
  int nRightWidth=0;
  int nRightStyle=0;
  int nRightX=-1;
  int nRightY=-1;
  if (colIndex < colCount - 1) {
    int[] nRight=borderData[(rowIndex + 1) * (2 * colCount + 1) + colIndex + 1];
    nRightWidth=nRight[1];
    nRightStyle=nRight[0];
    nRightX=nRight[3];
    nRightY=nRight[4];
  }
  int nLeftTopWidth=0;
  int nLeftTopStyle=0;
  int nLeftTopX=-1;
  int nLeftTopY=-1;
  if (rowIndex >= 0 && colIndex >= 0) {
    int[] nLeftTop=borderData[(rowIndex) * (2 * colCount + 1) + colCount + colIndex];
    nLeftTopWidth=nLeftTop[1];
    nLeftTopStyle=nLeftTop[0];
    nLeftTopX=nLeftTop[3];
    nLeftTopY=nLeftTop[4];
  }
  int nLeftBottomWidth=0;
  int nLeftBottomStyle=0;
  int nLeftBottomX=-1;
  int nLeftBottomY=-1;
  if (rowIndex < rowCount - 1 && colIndex >= 0) {
    int[] nLeftBottom=borderData[(rowIndex + 1) * (2 * colCount + 1) + colCount + colIndex];
    nLeftBottomWidth=nLeftBottom[1];
    nLeftBottomStyle=nLeftBottom[0];
    nLeftBottomX=nLeftBottom[3];
    nLeftBottomY=nLeftBottom[4];
  }
  int nRightTopWidth=0;
  int nRightTopStyle=0;
  int nRightTopX=-1;
  int nRightTopY=-1;
  if (rowIndex >= 0 && colIndex <= colCount - 1) {
    int[] nRightTop=borderData[(rowIndex) * (2 * colCount + 1) + colCount + colIndex + 1];
    nRightTopWidth=nRightTop[1];
    nRightTopStyle=nRightTop[0];
    nRightTopX=nRightTop[3];
    nRightTopY=nRightTop[4];
  }
  int nRightBottomWidth=0;
  int nRightBottomStyle=0;
  int nRightBottomX=-1;
  int nRightBottomY=-1;
  if (rowIndex < rowCount - 1 && colIndex <= colCount - 1) {
    int[] nRightBottom=borderData[(rowIndex + 1) * (2 * colCount + 1) + colCount + colIndex + 1];
    nRightBottomWidth=nRightBottom[1];
    nRightBottomStyle=nRightBottom[0];
    nRightBottomX=nRightBottom[3];
    nRightBottomY=nRightBottom[4];
  }
  int nlexWidth=Math.max(nLeftTopWidth,nLeftBottomWidth);
  boolean exLeft=false;
  boolean exRight=false;
  int rx=(colIndex == 0) ? (x + nlexWidth) : (x + nlexWidth / 2);
  int rw=(colIndex == 0) ? (w - nlexWidth) : (w - nlexWidth / 2);
  if (((TableBorderCollisionArbiter.canExtend(data,nLeftWidth,nLeftStyle,nLeftBottomWidth,nLeftBottomStyle,nLeftBottomX,nLeftBottomY,nLeftTopWidth,nLeftTopStyle,nLeftTopX,nLeftTopY,true,false) || TableBorderCollisionArbiter.isBrotherWin(data,nLeftWidth,nLeftStyle,nLeftX,nLeftY,nLeftBottomWidth,nLeftBottomStyle,nLeftBottomX,nLeftBottomY,nLeftTopWidth,nLeftTopStyle,nLeftTopX,nLeftTopY,true,false)) && (nLeftTopX != -2 && nLeftBottomX != -2)) || (data[3] == -2)) {
    rx=(colIndex == 0) ? (x) : (x - nlexWidth / 2 - nlexWidth % 2);
    rw=(colIndex == 0) ? (w) : (w + nlexWidth / 2 + nlexWidth % 2);
    exLeft=true;
  }
  int nrexWidth=Math.max(nRightTopWidth,nRightBottomWidth);
  if (((TableBorderCollisionArbiter.canExtend(data,nRightWidth,nRightStyle,nRightTopWidth,nRightTopStyle,nRightTopX,nRightTopY,nRightBottomWidth,nRightBottomStyle,nRightBottomX,nRightBottomY,false,false) || TableBorderCollisionArbiter.isBrotherWin(data,nRightWidth,nRightStyle,nRightX,nRightY,nRightTopWidth,nRightTopStyle,nRightTopX,nRightTopY,nRightBottomWidth,nRightBottomStyle,nRightBottomX,nRightBottomY,false,false)) && (nRightTopX != -2 && nRightBottomX != -2)) || (data[3] == -2)) {
    rw+=((colIndex == colCount - 1) ? (0) : (nrexWidth / 2));
    exRight=true;
  }
 else {
    rw-=((colIndex == colCount - 1) ? (nrexWidth) : (nrexWidth / 2 + nrexWidth % 2));
  }
  int direction=BorderUtil.BOTTOM;
  int[] widths=new int[]{0,data[1],0,0};
  if (data[3] == nLeftTopX && data[4] == nLeftTopY && data[3] == nRightTopX && data[4] == nRightTopY) {
    widths[0]=0;
    widths[1]=data[1];
    widths[2]=exLeft ? nLeftTopWidth : 0;
    widths[3]=exRight ? nRightTopWidth : 0;
  }
 else   if (data[3] == nLeftTopX && data[4] == nLeftTopY) {
    widths[0]=0;
    widths[1]=data[1];
    widths[2]=exLeft ? nLeftTopWidth : 0;
    widths[3]=0;
  }
 else   if (data[3] == nRightTopX && data[4] == nRightTopY) {
    widths[0]=0;
    widths[1]=data[1];
    widths[2]=0;
    widths[3]=exRight ? nRightTopWidth : 0;
  }
 else   if (data[3] == nLeftBottomX && data[4] == nLeftBottomY && data[3] == nRightBottomX && data[4] == nRightBottomY) {
    direction=BorderUtil.TOP;
    widths[0]=data[1];
    widths[1]=0;
    widths[2]=exLeft ? nLeftBottomWidth : 0;
    widths[3]=exRight ? nRightBottomWidth : 0;
  }
 else   if (data[3] == nLeftBottomX && data[4] == nLeftBottomY) {
    direction=BorderUtil.TOP;
    widths[0]=data[1];
    widths[1]=0;
    widths[2]=exLeft ? nLeftBottomWidth : 0;
    widths[3]=0;
  }
 else   if (data[3] == nRightBottomX && data[4] == nRightBottomY) {
    direction=BorderUtil.TOP;
    widths[0]=data[1];
    widths[1]=0;
    widths[2]=0;
    widths[3]=exRight ? nRightBottomWidth : 0;
  }
 else   if (data[3] != rowIndex || data[4] != colIndex) {
    direction=BorderUtil.TOP;
    widths[0]=data[1];
    widths[1]=0;
    widths[2]=0;
    widths[3]=0;
  }
  Rectangle r=new Rectangle(rx,y + h - data[1] / 2 - data[1] % 2,rw,data[1]);
  if (rowIndex == rowCount - 1) {
    r.y=y + h - data[1];
  }
  if (data[0] != 0) {
    g.setForegroundColor(ColorManager.getColor(data[2]));
    BorderUtil.drawBorderLine(g,direction,data[0],widths,r);
  }
 else   if (data[1] > 0) {
    g.setForegroundColor(ReportColorConstants.ShadowLineColor);
    BorderUtil.drawDefaultLine(g,direction,r);
  }
}",0.9889886498390648
72691,"public Object visitGridItem(GridItemDesign grid,Object value){
  PolicyNode parent=parentNode;
  visitReportItem(grid,value);
  parentNode=currentNode;
  int count=grid.getRowCount();
  for (int i=0; i < count; i++) {
    RowDesign row=grid.getRow(i);
    row.accept(this,null);
  }
  parentNode=parent;
  return Boolean.TRUE;
}","public Object visitGridItem(GridItemDesign grid,Object value){
  PolicyNode parent=parentNode;
  visitReportItem(grid,value);
  parentNode=currentNode;
  currentNode.breakAfter=true;
  int count=grid.getRowCount();
  for (int i=0; i < count; i++) {
    RowDesign row=grid.getRow(i);
    row.accept(this,null);
  }
  parentNode=parent;
  return Boolean.TRUE;
}",0.9548762736535662
72692,"public Object visitListing(ListingDesign listing,Object value){
  PolicyNode parent=parentNode;
  visitReportItem(listing,Boolean.TRUE);
  parentNode=currentNode;
  BandDesign header=listing.getHeader();
  if (header != null) {
    header.accept(this,null);
  }
  int groupCount=listing.getGroupCount();
  if (groupCount > 0) {
    processGroup(listing,0,header != null);
    processGroup(listing,0,false);
  }
 else {
    processDetail(listing,header != null);
    processDetail(listing,false);
  }
  BandDesign footer=listing.getFooter();
  if (footer != null) {
    footer.accept(this,Boolean.TRUE);
  }
  parentNode=parent;
  return Boolean.TRUE;
}","public Object visitListing(ListingDesign listing,Object value){
  PolicyNode parent=parentNode;
  visitReportItem(listing,Boolean.TRUE);
  parentNode=currentNode;
  currentNode.breakAfter=true;
  BandDesign header=listing.getHeader();
  if (header != null) {
    header.accept(this,null);
  }
  int groupCount=listing.getGroupCount();
  if (groupCount > 0) {
    processGroup(listing,0,header != null);
    processGroup(listing,0,false);
  }
 else {
    processDetail(listing,header != null);
    processDetail(listing,false);
  }
  BandDesign footer=listing.getFooter();
  if (footer != null) {
    footer.accept(this,Boolean.TRUE);
  }
  parentNode=parent;
  return Boolean.TRUE;
}",0.9767790262172285
72693,"/** 
 * Sets the <code>'class'</code> property and stores the style to styleMap object.
 * @param styleName the style name
 */
protected void setStyleName(String styleName,IContent content){
  StringBuffer classBuffer=new StringBuffer();
  if (isEmbeddable) {
    return;
  }
  if (styleName != null && outputtedStyles.contains(styleName)) {
    classBuffer.append(styleName);
  }
  if (hasCsslinks) {
    Object genBy=content.getGenerateBy();
    if (genBy instanceof StyledElementDesign) {
      DesignElementHandle handle=((StyledElementDesign)genBy).getHandle();
      if (handle != null) {
        SharedStyleHandle style=handle.getStyle();
        if (style != null) {
          if (classBuffer.length() != 0) {
            classBuffer.append(""String_Node_Str"" + style.getName());
          }
 else {
            classBuffer.append(style.getName());
          }
        }
      }
    }
  }
  if (classBuffer.length() != 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,classBuffer.toString());
  }
}","/** 
 * Sets the <code>'class'</code> property and stores the style to styleMap object.
 * @param styleName the style name
 */
protected void setStyleName(String styleName,IContent content){
  StringBuffer classBuffer=new StringBuffer();
  if (isEmbeddable) {
    return;
  }
  if (styleName != null && outputtedStyles.contains(styleName)) {
    classBuffer.append(styleName);
  }
  if (hasCsslinks) {
    Object genBy=content.getGenerateBy();
    if (genBy instanceof StyledElementDesign) {
      DesignElementHandle handle=((StyledElementDesign)genBy).getHandle();
      if (handle != null) {
        String name=handle.getStringProperty(ReportItemHandle.STYLE_PROP);
        if (name != null) {
          if (classBuffer.length() != 0) {
            classBuffer.append(""String_Node_Str"" + name);
          }
 else {
            classBuffer.append(name);
          }
        }
      }
    }
  }
  if (classBuffer.length() != 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,classBuffer.toString());
  }
}",0.9406483790523692
72694,"public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (htmlRtLFlag) {
    String reportStyleName=report == null ? null : report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      if (null != style) {
        style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.RIGHT_VALUE);
      }
    }
  }
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
  }
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,isEmbeddable,layoutPreference);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,isEmbeddable,layoutPreference);
  }
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      htmlEmitter.buildDefaultStyle(defaultStyleBuffer,style);
    }
  }
  if (isEmbeddable) {
    fixTransparentPNG();
    fixRedirect();
    writer.openTag(HTMLTags.TAG_DIV);
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_HEAD);
  if (designHandle != null) {
    String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
    if (title == null) {
      if (renderOption != null) {
        HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
        title=htmlOption.getHtmlTitle();
      }
    }
    if (title != null) {
      writer.openTag(HTMLTags.TAG_TITLE);
      writer.text(title);
      writer.closeTag(HTMLTags.TAG_TITLE);
    }
  }
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  String defaultStyleName=""String_Node_Str"";
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    writer.style('.' + defaultStyleName,defaultStyleBuffer.toString());
    Map styles=reportDesign.getStyles();
    Iterator iter=styles.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      String styleName=(String)entry.getKey();
      style=(IStyle)entry.getValue();
      styleBuffer.setLength(0);
      htmlEmitter.buildStyle(styleBuffer,style);
      if (styleBuffer.length() > 0) {
        writer.style('.' + styleName,styleBuffer.toString());
        outputtedStyles.add(styleName);
      }
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  hasCsslinks=false;
  fixTransparentPNG();
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
  }
  if (outputMasterPageContent) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
}","public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (htmlRtLFlag) {
    String reportStyleName=report == null ? null : report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      if (null != style) {
        style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.RIGHT_VALUE);
      }
    }
  }
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
  }
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,isEmbeddable,layoutPreference);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,isEmbeddable,layoutPreference);
  }
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      htmlEmitter.buildDefaultStyle(defaultStyleBuffer,style);
    }
  }
  if (isEmbeddable) {
    fixTransparentPNG();
    fixRedirect();
    writer.openTag(HTMLTags.TAG_DIV);
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_HEAD);
  if (designHandle != null) {
    String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
    if (title == null) {
      if (renderOption != null) {
        HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
        title=htmlOption.getHtmlTitle();
      }
    }
    if (title != null) {
      writer.openTag(HTMLTags.TAG_TITLE);
      writer.text(title);
      writer.closeTag(HTMLTags.TAG_TITLE);
    }
  }
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  String defaultStyleName=""String_Node_Str"";
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    writer.style('.' + defaultStyleName,defaultStyleBuffer.toString());
    Map styles=reportDesign.getStyles();
    Iterator iter=styles.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      String styleName=(String)entry.getKey();
      style=(IStyle)entry.getValue();
      styleBuffer.setLength(0);
      htmlEmitter.buildStyle(styleBuffer,style);
      if (styleBuffer.length() > 0) {
        writer.style('.' + styleName,styleBuffer.toString());
        outputtedStyles.add(styleName);
      }
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  hasCsslinks=false;
  if (designHandle != null) {
    Iterator iter=designHandle.includeCssesIterator();
    while (iter.hasNext()) {
      IncludedCssStyleSheetHandle cssStyleSheetHandle=(IncludedCssStyleSheetHandle)iter.next();
      String href=cssStyleSheetHandle.getExternalCssURI();
      if (href != null) {
        hasCsslinks=true;
        writer.openTag(HTMLTags.TAG_LINK);
        writer.attribute(HTMLTags.ATTR_REL,""String_Node_Str"");
        writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
        writer.attribute(HTMLTags.ATTR_HREF,href);
        writer.closeTag(HTMLTags.TAG_LINK);
      }
    }
  }
  fixTransparentPNG();
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
  }
  if (outputMasterPageContent) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
}",0.9269825918762088
72695,"/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request) && (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())|| IBirtConstants.SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath()))) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.isToc=ParameterAccessor.isToc(request);
  this.reportPage=ParameterAccessor.getPage(request);
  this.reportPageRange=ParameterAccessor.getPageRange(request);
  this.action=ParameterAccessor.getAction(request);
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())|| IBirtConstants.SERVLET_PATH_EXTRACT.equalsIgnoreCase(request.getServletPath())) {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,true);
  }
 else {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,false);
  }
  this.reportDesignName=ParameterAccessor.getReport(request,null);
  this.format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.ACTION_PRINT.equalsIgnoreCase(action)) {
    if (ParameterAccessor.isSupportedPrintOnServer)     this.format=IBirtConstants.POSTSCRIPT_RENDER_FORMAT;
 else     this.action=null;
  }
  BirtResources.setLocale(ParameterAccessor.getLocale(request));
  this.requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  processReport(request);
  this.reportTitle=ParameterAccessor.getTitle(request);
  this.isShowTitle=ParameterAccessor.isShowTitle(request);
  this.isShowToolbar=ParameterAccessor.isShowToolbar(request);
  this.isShowNavigationbar=ParameterAccessor.isShowNavigationbar(request);
  this.moduleOptions=BirtUtility.getModuleOptions(request);
  this.reportDesignHandle=getDesignHandle(request);
  if (this.reportDesignHandle == null)   throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_NO_REPORT_DESIGN);
  ParameterAccessor.setClean(request);
  __initParameters(request);
}","/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request) && (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())|| IBirtConstants.SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath()))) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner();
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.isToc=ParameterAccessor.isToc(request);
  this.reportPage=ParameterAccessor.getPage(request);
  this.reportPageRange=ParameterAccessor.getPageRange(request);
  this.action=ParameterAccessor.getAction(request);
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())|| IBirtConstants.SERVLET_PATH_EXTRACT.equalsIgnoreCase(request.getServletPath())) {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,true);
  }
 else {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,false);
  }
  this.reportDesignName=ParameterAccessor.getReport(request,null);
  this.format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.ACTION_PRINT.equalsIgnoreCase(action)) {
    if (ParameterAccessor.isSupportedPrintOnServer)     this.format=IBirtConstants.POSTSCRIPT_RENDER_FORMAT;
 else     this.action=null;
  }
  BirtResources.setLocale(ParameterAccessor.getLocale(request));
  this.requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  processReport(request);
  this.reportTitle=ParameterAccessor.getTitle(request);
  this.isShowTitle=ParameterAccessor.isShowTitle(request);
  this.isShowToolbar=ParameterAccessor.isShowToolbar(request);
  this.isShowNavigationbar=ParameterAccessor.isShowNavigationbar(request);
  this.moduleOptions=BirtUtility.getModuleOptions(request);
  this.reportDesignHandle=getDesignHandle(request);
  if (this.reportDesignHandle == null)   throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_NO_REPORT_DESIGN);
  ParameterAccessor.setClean(request);
  __initParameters(request);
}",0.9986168741355465
72696,"/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.isPDFLayout(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  if (!IBirtConstants.EXCEL_RENDER_FORMAT.equalsIgnoreCase(format)) {
    ((IRenderOption)renderOption).setOption(IRenderOption.HTML_PAGINATION,Boolean.TRUE);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (ParameterAccessor.isPDFLayout(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
  String resourceFolder=ParameterAccessor.getResourceFolder(request);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    if (ParameterAccessor.isDesigner(request))     BirtUtility.error(request,renderTask.getErrors());
    renderTask.close();
  }
}","/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.isPDFLayout(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner());
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  if (!IBirtConstants.EXCEL_RENDER_FORMAT.equalsIgnoreCase(format)) {
    ((IRenderOption)renderOption).setOption(IRenderOption.HTML_PAGINATION,Boolean.TRUE);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (ParameterAccessor.isPDFLayout(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
  if (ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_RESOURCE_FOLDER)) {
    String resourceFolder=ParameterAccessor.getResourceFolder(request);
    handler.setResourceFolder(resourceFolder);
  }
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    if (ParameterAccessor.isDesigner())     BirtUtility.error(request,renderTask.getErrors());
    renderTask.close();
  }
}",0.9753193600396874
72697,"/** 
 * Create HTML render option.
 * @param svgFlag
 * @param servletPath
 * @param request
 * @return HTML render option from the given arguments
 */
private HTMLRenderOption createHTMLRenderOption(boolean svgFlag,String servletPath,HttpServletRequest request){
  String baseURL=null;
  boolean isDesigner=ParameterAccessor.isDesigner(request);
  if (!isDesigner)   baseURL=ParameterAccessor.getBaseURL();
  if (baseURL == null) {
    if (ParameterAccessor.isOpenAsAttachment(request) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(ParameterAccessor.getFormat(request))) {
      baseURL=request.getScheme() + ""String_Node_Str"" + request.getServerName()+ ""String_Node_Str""+ request.getServerPort();
    }
 else {
      baseURL=""String_Node_Str"";
    }
  }
  baseURL+=request.getContextPath();
  HTMLRenderOption renderOption=new HTMLRenderOption();
  renderOption.setImageDirectory(ParameterAccessor.getImageTempFolder(request));
  renderOption.setBaseImageURL(baseURL + imageBaseUrl);
  if (servletPath != null && servletPath.length() > 0) {
    renderOption.setBaseURL(baseURL + servletPath);
  }
 else {
    renderOption.setBaseURL(baseURL + IBirtConstants.SERVLET_PATH_RUN);
  }
  renderOption.setEnableAgentStyleEngine(ParameterAccessor.isAgentStyle(request));
  renderOption.setSupportedImageFormats(svgFlag ? ""String_Node_Str"" : ""String_Node_Str"");
  return renderOption;
}","/** 
 * Create HTML render option.
 * @param svgFlag
 * @param servletPath
 * @param request
 * @return HTML render option from the given arguments
 */
private HTMLRenderOption createHTMLRenderOption(boolean svgFlag,String servletPath,HttpServletRequest request){
  String baseURL=null;
  if (!ParameterAccessor.isDesigner())   baseURL=ParameterAccessor.getBaseURL();
  if (baseURL == null) {
    if (ParameterAccessor.isOpenAsAttachment(request) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(ParameterAccessor.getFormat(request))) {
      baseURL=request.getScheme() + ""String_Node_Str"" + request.getServerName()+ ""String_Node_Str""+ request.getServerPort();
    }
 else {
      baseURL=""String_Node_Str"";
    }
  }
  baseURL+=request.getContextPath();
  HTMLRenderOption renderOption=new HTMLRenderOption();
  renderOption.setImageDirectory(ParameterAccessor.getImageTempFolder(request));
  renderOption.setBaseImageURL(baseURL + imageBaseUrl);
  if (servletPath != null && servletPath.length() > 0) {
    renderOption.setBaseURL(baseURL + servletPath);
  }
 else {
    renderOption.setBaseURL(baseURL + IBirtConstants.SERVLET_PATH_RUN);
  }
  renderOption.setEnableAgentStyleEngine(ParameterAccessor.isAgentStyle(request));
  renderOption.setSupportedImageFormats(svgFlag ? ""String_Node_Str"" : ""String_Node_Str"");
  return renderOption;
}",0.9671772428884028
72698,"/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  if (!IBirtConstants.EXCEL_RENDER_FORMAT.equalsIgnoreCase(format)) {
    ((IRenderOption)renderOption).setOption(IRenderOption.HTML_PAGINATION,Boolean.TRUE);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
  String resourceFolder=ParameterAccessor.getResourceFolder(request);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    if (ParameterAccessor.isDesigner(request))     BirtUtility.error(request,renderTask.getErrors());
    renderTask.close();
  }
}","/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner());
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  if (!IBirtConstants.EXCEL_RENDER_FORMAT.equalsIgnoreCase(format)) {
    ((IRenderOption)renderOption).setOption(IRenderOption.HTML_PAGINATION,Boolean.TRUE);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
  if (ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_RESOURCE_FOLDER)) {
    String resourceFolder=ParameterAccessor.getResourceFolder(request);
    handler.setResourceFolder(resourceFolder);
  }
  renderOption.setActionHandler(handler);
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    if (ParameterAccessor.isDesigner())     BirtUtility.error(request,renderTask.getErrors());
    renderTask.close();
  }
}",0.9754835530368364
72699,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  baseURL=checkBaseURLWithExtractPattern(action,baseURL);
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (isContainExtractInfo(action)) {
      try {
        link.append(ParameterAccessor.PARAMETER_SEPARATOR);
        link.append(action.getActionString());
      }
 catch (      Exception e) {
      }
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            Object[] values;
            if (valueObj instanceof Object[]) {
              values=(Object[])valueObj;
            }
 else {
              values=new Object[1];
              values[0]=valueObj;
            }
            for (int i=0; i < values.length; i++) {
              String value=DataUtil.getDisplayValue(values[i]);
              if (value != null) {
                link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
              }
 else {
                link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISNULL,URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE)));
              }
            }
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    if (svg != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
    }
    if (isDesigner != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  boolean isExtractPattern=isContainExtractInfo(action);
  if (isExtractPattern)   baseURL=createBaseURLWithExtractPattern(baseURL);
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (isContainExtractInfo(action)) {
      try {
        link.append(ParameterAccessor.PARAMETER_SEPARATOR);
        link.append(action.getActionString());
      }
 catch (      Exception e) {
      }
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            Object[] values;
            if (valueObj instanceof Object[]) {
              values=(Object[])valueObj;
            }
 else {
              values=new Object[1];
              values[0]=valueObj;
            }
            for (int i=0; i < values.length; i++) {
              String value=DataUtil.getDisplayValue(values[i]);
              if (value != null) {
                link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
              }
 else {
                link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISNULL,URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE)));
              }
            }
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    if (svg != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
    }
    if (isDesigner != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.9909742253652182
72700,"/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  ;
  baseURL=checkBaseURLWithExtractPattern(action,baseURL);
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0 || baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (isContainExtractInfo(action)) {
    try {
      link.append(action.getActionString());
      link.append(ParameterAccessor.PARAMETER_SEPARATOR);
    }
 catch (    Exception e) {
    }
  }
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  if (svg != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
  }
  if (isDesigner != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null) {
      String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
    if (!action.isBookmark())     link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
  }
  return link.toString();
}","/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  ;
  boolean isExtractPattern=isContainExtractInfo(action);
  if (isExtractPattern)   baseURL=createBaseURLWithExtractPattern(baseURL);
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0 || baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (isContainExtractInfo(action)) {
    try {
      link.append(action.getActionString());
      link.append(ParameterAccessor.PARAMETER_SEPARATOR);
    }
 catch (    Exception e) {
    }
  }
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      if (isExtractPattern)       documentName=convertToRelativePath(documentName);
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  if (svg != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
  }
  if (isDesigner != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null) {
      String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
    if (!action.isBookmark())     link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
  }
  return link.toString();
}",0.9770740975300825
72701,"/** 
 * Returns appcontext
 * @param request
 * @return
 */
public static Map getAppContext(HttpServletRequest request){
  HashMap context=new HashMap();
  Boolean isDesigner=Boolean.valueOf(ParameterAccessor.isDesigner(request));
  context.put(""String_Node_Str"",isDesigner);
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  int maxCubeRowLevels=ParameterAccessor.getMaxCubeRowLevels(request);
  if (maxCubeRowLevels >= 0)   context.put(DataEngine.CUBECUSROR_FETCH_LIMIT_ON_ROW_EDGE,new Integer(maxCubeRowLevels));
  int maxCubeColumnLevels=ParameterAccessor.getMaxCubeColumnLevels(request);
  if (maxCubeColumnLevels >= 0)   context.put(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_COLUMN_EDGE,new Integer(maxCubeColumnLevels));
  int cubeMemorySize=ParameterAccessor.getCubeMemorySize(request);
  if (cubeMemorySize >= 0)   context.put(DataEngine.IN_MEMORY_CUBE_SIZE,new Integer(cubeMemorySize));
  context.put(IBirtConstants.APPCONTEXT_BIRT_RESOURCE_PATH,ParameterAccessor.getResourceFolder(request));
  ParameterAccessor.pushAppContext(context,request);
  if (isDesigner.booleanValue()) {
    String appContextName=ParameterAccessor.getAppContextName(request);
    getAppContextFromExtension(appContextName,context);
  }
  return context;
}","/** 
 * Returns appcontext
 * @param request
 * @return
 */
public static Map getAppContext(HttpServletRequest request){
  HashMap context=new HashMap();
  Boolean isDesigner=Boolean.valueOf(ParameterAccessor.isDesigner());
  context.put(""String_Node_Str"",isDesigner);
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  int maxCubeRowLevels=ParameterAccessor.getMaxCubeRowLevels(request);
  if (maxCubeRowLevels >= 0)   context.put(DataEngine.CUBECUSROR_FETCH_LIMIT_ON_ROW_EDGE,new Integer(maxCubeRowLevels));
  int maxCubeColumnLevels=ParameterAccessor.getMaxCubeColumnLevels(request);
  if (maxCubeColumnLevels >= 0)   context.put(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_COLUMN_EDGE,new Integer(maxCubeColumnLevels));
  int cubeMemorySize=ParameterAccessor.getCubeMemorySize(request);
  if (cubeMemorySize >= 0)   context.put(DataEngine.IN_MEMORY_CUBE_SIZE,new Integer(cubeMemorySize));
  context.put(IBirtConstants.APPCONTEXT_BIRT_RESOURCE_PATH,ParameterAccessor.getResourceFolder(request));
  ParameterAccessor.pushAppContext(context,request);
  if (isDesigner.booleanValue()) {
    String appContextName=ParameterAccessor.getAppContextName(request);
    getAppContextFromExtension(appContextName,context);
  }
  return context;
}",0.9974293059125964
72702,"public ParameterAdapter(DataSetParameterHandle modelParam){
  setName(modelParam.getName());
  if (modelParam.getPosition() != null)   setPosition(modelParam.getPosition().intValue());
  if (modelParam.getNativeDataType() != null)   setNativeType(modelParam.getNativeDataType().intValue());
  if (modelParam instanceof OdaDataSetParameterHandle) {
    setNativeName(((OdaDataSetParameterHandle)modelParam).getNativeName());
  }
  setType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(modelParam.getDataType()));
  setInputMode(modelParam.isInput());
  setOutputMode(modelParam.isOutput());
  setNullable(modelParam.allowNull());
  setInputOptional(modelParam.isOptional());
  if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
    setDefaultInputValue(ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName()));
  }
 else   setDefaultInputValue(modelParam.getDefaultValue());
}","public ParameterAdapter(DataSetParameterHandle modelParam){
  setName(modelParam.getName());
  if (modelParam.getPosition() != null)   setPosition(modelParam.getPosition().intValue());
  if (modelParam.getNativeDataType() != null)   setNativeType(modelParam.getNativeDataType().intValue());
  if (modelParam instanceof OdaDataSetParameterHandle) {
    setNativeName(((OdaDataSetParameterHandle)modelParam).getNativeName());
  }
  setType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(modelParam.getDataType()));
  setInputMode(modelParam.isInput());
  setOutputMode(modelParam.isOutput());
  setNullable(modelParam.allowNull());
  setInputOptional(modelParam.isOptional());
  setDefaultInputValue(modelParam.getDefaultValue());
}",0.8058525604952167
72703,"public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  if (shutdownListenerList != null) {
    for (int i=0; i < shutdownListenerList.size(); i++) {
      ((IShutdownListener)shutdownListenerList.get(i)).dataEngineShutdown();
    }
    shutdownListenerList.clear();
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  logger.logp(Level.INFO,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  clearTempFile();
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}","public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  if (shutdownListenerList != null) {
    for (int i=0; i < shutdownListenerList.size(); i++) {
      ((IShutdownListener)shutdownListenerList.get(i)).dataEngineShutdown();
    }
    shutdownListenerList.clear();
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  clearTempFile();
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}",0.9979716024340772
72704,"protected void paintFigure(Graphics graphics){
  if (isSelect()) {
    graphics.setBackgroundColor(ReportColorConstants.SelctionFillColor);
  }
 else {
    graphics.setBackgroundColor(ReportColorConstants.TableGuideFillColor);
  }
  graphics.setLineStyle(SWT.LINE_SOLID);
  Rectangle bounds=getBounds().getCopy().resize(-1,-1);
  graphics.fillRectangle(bounds);
  Font font=FontManager.getFont(""String_Node_Str"",7,SWT.NORMAL);
  graphics.setFont(font);
  Image image=getImage();
  if (image == null)   return;
  org.eclipse.swt.graphics.Rectangle rect=image.getBounds();
  int x=bounds.x + (bounds.width - rect.width) / 2;
  int y=bounds.y + (bounds.height - rect.height) / 2;
  graphics.drawImage(image,x,y);
  TableEditPart part=(TableEditPart)getOwner();
  RowHandleAdapter rowHandleAdapter=HandleAdapterFactory.getInstance().getRowHandleAdapter(part.getRow(getRowNumber()));
  String type=rowHandleAdapter.getType();
  String displayName=rowHandleAdapter.getDisplayName();
  if (TableHandleAdapter.TABLE_GROUP_HEADER.equals(type) || TableHandleAdapter.TABLE_GROUP_FOOTER.equals(type)) {
    graphics.drawString(displayName,x + rect.width + 2,y + 2);
  }
  graphics.setBackgroundColor(ColorConstants.black);
}","protected void paintFigure(Graphics graphics){
  if (isSelect()) {
    graphics.setBackgroundColor(ReportColorConstants.SelctionFillColor);
  }
 else {
    graphics.setBackgroundColor(ReportColorConstants.TableGuideFillColor);
  }
  graphics.setLineStyle(SWT.LINE_SOLID);
  Rectangle bounds=getBounds().getCopy().resize(-1,-1);
  graphics.fillRectangle(bounds);
  Font font=FontManager.getFont(""String_Node_Str"",7,SWT.NORMAL);
  graphics.setFont(font);
  Image image=getImage();
  if (image == null)   return;
  graphics.setForegroundColor(ColorConstants.white);
  graphics.setXORMode(true);
  org.eclipse.swt.graphics.Rectangle rect=image.getBounds();
  int x=bounds.x + (bounds.width - rect.width) / 2;
  int y=bounds.y + (bounds.height - rect.height) / 2;
  graphics.drawImage(image,x,y);
  TableEditPart part=(TableEditPart)getOwner();
  RowHandleAdapter rowHandleAdapter=HandleAdapterFactory.getInstance().getRowHandleAdapter(part.getRow(getRowNumber()));
  String type=rowHandleAdapter.getType();
  String displayName=rowHandleAdapter.getDisplayName();
  if (TableHandleAdapter.TABLE_GROUP_HEADER.equals(type) || TableHandleAdapter.TABLE_GROUP_FOOTER.equals(type)) {
    graphics.drawString(displayName,x + rect.width + 2,y + 2);
  }
  graphics.setBackgroundColor(ColorConstants.black);
  graphics.setXORMode(false);
}",0.9558359621451104
72705,"public long getID(){
  return componentID;
}","/** 
 * Get an identifier for a report component.
 * @return componentID
 */
public long getID(){
  return componentID;
}",0.5333333333333333
72706,"public String getName(){
  return name;
}","/** 
 * Get data extraction extension name.
 * @return name
 */
public String getName(){
  return name;
}",0.5616438356164384
72707,"public String getMimeType(){
  return mimeType;
}","/** 
 * Get mime type of the output file.
 * @return mimeType
 */
public String getMimeType(){
  return mimeType;
}",0.5975609756097561
72708,"public DataExtractionFormatInfo(String id,String format,String mimeType,String name,IConfigurationElement dataExtractionExtension){
  this.id=id;
  this.format=format;
  this.mimeType=mimeType;
  this.name=name;
  this.dataExtractionExtension=dataExtractionExtension;
}","/** 
 * Constructor of the class DataExtractionFormatInfo.
 * @param id
 * @param format
 * @param mimeType
 * @param name
 * @param dataExtractionExtension
 */
public DataExtractionFormatInfo(String id,String format,String mimeType,String name,IConfigurationElement dataExtractionExtension){
  this.id=id;
  this.format=format;
  this.mimeType=mimeType;
  this.name=name;
  this.dataExtractionExtension=dataExtractionExtension;
}",0.7696709585121603
72709,"public String getFormat(){
  return format;
}","/** 
 * Get extraction format of the output file.
 * @return format
 */
public String getFormat(){
  return format;
}",0.5555555555555556
72710,"public String getId(){
  return id;
}","/** 
 * Get data extraction extension id.
 * @return id
 */
public String getId(){
  return id;
}",0.5522388059701493
72711,"public IConfigurationElement getDataExtractionExtension(){
  return dataExtractionExtension;
}","/** 
 * Get configuration element of data extraction extension.
 * @return dataExtractionExtension
 */
public IConfigurationElement getDataExtractionExtension(){
  return dataExtractionExtension;
}",0.6460481099656358
72712,"public void setExtension(String extension){
  setOption(EXTENSION,extension);
}","/** 
 * Set extension id.
 * @param extension extension id.
 */
public void setExtension(String extension){
  setOption(EXTENSION,extension);
}",0.7117117117117117
72713,"public String getExtension(){
  return getStringOption(EXTENSION);
}","/** 
 * Get extension.
 */
public String getExtension(){
  return getStringOption(EXTENSION);
}",0.8343558282208589
72714,"public void setOutputStream(OutputStream out){
  setOption(OUTPUT_STREAM,out);
}","/** 
 * Set output stream.
 * @param out output stream.
 */
public void setOutputStream(OutputStream out){
  setOption(OUTPUT_STREAM,out);
}",0.7272727272727273
72715,"public String getOutputFormat(){
  return getStringOption(OUTPUT_FORMAT);
}","/** 
 * Get output format.
 */
public String getOutputFormat(){
  return getStringOption(OUTPUT_FORMAT);
}",0.8287292817679558
72716,"public OutputStream getOutputStream(){
  Object value=getOption(OUTPUT_STREAM);
  if (value instanceof OutputStream) {
    return (OutputStream)value;
  }
  return null;
}","/** 
 * Get output stream.
 */
public OutputStream getOutputStream(){
  Object value=getOption(OUTPUT_STREAM);
  if (value instanceof OutputStream) {
    return (OutputStream)value;
  }
  return null;
}",0.9168900804289544
72717,"public void setOutputFormat(String format){
  setOption(OUTPUT_FORMAT,format);
}","/** 
 * Set output format.
 * @param format output format.
 */
public void setOutputFormat(String format){
  setOption(OUTPUT_FORMAT,format);
}",0.7174887892376681
72718,"public void setOutputFile(String filename){
  setOption(OUTPUT_FILE_NAME,filename);
}","/** 
 * Set output file.
 * @param filename name of the output file.
 */
public void setOutputFile(String filename){
  setOption(OUTPUT_FILE_NAME,filename);
}",0.6995884773662552
72719,"public String getOutputFile(){
  return getStringOption(OUTPUT_FILE_NAME);
}","/** 
 * Get output file name.
 */
public String getOutputFile(){
  return getStringOption(OUTPUT_FILE_NAME);
}",0.8172043010752689
72720,"public DataID(DataSetID dataSet,String cellId){
  this.dataSet=dataSet;
  this.cellId=cellId;
}","/** 
 * Create the new data id instantce.
 * @param dataSet data set
 * @param cellId cell id
 */
public DataID(DataSetID dataSet,String cellId){
  this.dataSet=dataSet;
  this.cellId=cellId;
}",0.6597222222222222
72721,"/** 
 * return the row id
 * @return
 */
public long getRowID(){
  return rowId;
}","/** 
 * Return the row id.
 * @return
 */
public long getRowID(){
  return rowId;
}",0.9818181818181818
72722,"public String getCellID(){
  return cellId;
}","/** 
 * Return the cell id.
 * @return
 */
public String getCellID(){
  return cellId;
}",0.6766917293233082
72723,"static DataID parse(char[] buffer,int offset,int length){
  int ptr=offset + length - 1;
  while (ptr >= offset) {
    if (buffer[ptr] != ':') {
      ptr--;
    }
 else {
      if (ptr > offset && buffer[ptr - 1] == ':') {
        ptr--;
        ptr--;
      }
 else {
        break;
      }
    }
  }
  if (ptr >= offset && buffer[ptr] == ':') {
    String strRowId=new String(buffer,ptr + 1,offset + length - ptr - 1);
    ptr--;
    if (ptr >= offset) {
      DataSetID dataSetId=DataSetID.parse(buffer,offset,ptr - offset + 1);
      if (dataSetId != null) {
        try {
          long rowId=Long.parseLong(strRowId);
          return new DataID(dataSetId,rowId);
        }
 catch (        Exception ex) {
        }
        return new DataID(dataSetId,strRowId);
      }
    }
  }
  return null;
}","/** 
 * create a new data id instance from the buffer.
 * @param buffer
 * @param offset
 * @param length
 * @return data id instance
 */
static DataID parse(char[] buffer,int offset,int length){
  int ptr=offset + length - 1;
  while (ptr >= offset) {
    if (buffer[ptr] != ':') {
      ptr--;
    }
 else {
      if (ptr > offset && buffer[ptr - 1] == ':') {
        ptr--;
        ptr--;
      }
 else {
        break;
      }
    }
  }
  if (ptr >= offset && buffer[ptr] == ':') {
    String strRowId=new String(buffer,ptr + 1,offset + length - ptr - 1);
    ptr--;
    if (ptr >= offset) {
      DataSetID dataSetId=DataSetID.parse(buffer,offset,ptr - offset + 1);
      if (dataSetId != null) {
        try {
          long rowId=Long.parseLong(strRowId);
          return new DataID(dataSetId,rowId);
        }
 catch (        Exception ex) {
        }
        return new DataID(dataSetId,strRowId);
      }
    }
  }
  return null;
}",0.9209621993127148
72724,"/** 
 * row id in the parent data set.
 * @return
 */
public long getRowID(){
  return rowId;
}","/** 
 * row id in the parent data set.
 * @return row id
 */
public long getRowID(){
  return rowId;
}",0.964467005076142
72725,"public String getCellID(){
  return cellId;
}","/** 
 * cell id in the parent data set.
 * @return cell id
 */
public String getCellID(){
  return cellId;
}",0.5882352941176471
72726,"static public DataSetID parse(char[] buffer,int offset,int length){
  int ptr=offset + length - 1;
  while (ptr >= offset && buffer[ptr] != '.') {
    ptr--;
  }
  if (ptr >= offset && buffer[ptr] == '.') {
    String queryName=new String(buffer,ptr + 1,offset + length - ptr - 1);
    ptr--;
    length=ptr - offset + 1;
    while (ptr >= offset && buffer[ptr] != '.') {
      ptr--;
    }
    if (ptr >= offset && buffer[ptr] == '.') {
      String strRowId=new String(buffer,ptr + 1,offset + length - ptr - 1);
      ptr--;
      if (ptr >= offset && buffer[ptr] == '}' && buffer[offset] == '{') {
        ptr--;
        offset++;
        if (ptr >= offset) {
          DataSetID parent=parse(buffer,offset,ptr - offset + 1);
          if (parent != null) {
            try {
              long rowId=Long.parseLong(strRowId);
              return new DataSetID(parent,rowId,queryName);
            }
 catch (            Exception ex) {
            }
            return new DataSetID(parent,strRowId,queryName);
          }
        }
      }
    }
  }
  return new DataSetID(new String(buffer,offset,length));
}","/** 
 * Parse dataSetID.
 * @param buffer
 * @param offset
 * @param length
 * @return DataSetID object
 */
static public DataSetID parse(char[] buffer,int offset,int length){
  int ptr=offset + length - 1;
  while (ptr >= offset && buffer[ptr] != '.') {
    ptr--;
  }
  if (ptr >= offset && buffer[ptr] == '.') {
    String queryName=new String(buffer,ptr + 1,offset + length - ptr - 1);
    ptr--;
    length=ptr - offset + 1;
    while (ptr >= offset && buffer[ptr] != '.') {
      ptr--;
    }
    if (ptr >= offset && buffer[ptr] == '.') {
      String strRowId=new String(buffer,ptr + 1,offset + length - ptr - 1);
      ptr--;
      if (ptr >= offset && buffer[ptr] == '}' && buffer[offset] == '{') {
        ptr--;
        offset++;
        if (ptr >= offset) {
          DataSetID parent=parse(buffer,offset,ptr - offset + 1);
          if (parent != null) {
            try {
              long rowId=Long.parseLong(strRowId);
              return new DataSetID(parent,rowId,queryName);
            }
 catch (            Exception ex) {
            }
            return new DataSetID(parent,strRowId,queryName);
          }
        }
      }
    }
  }
  return new DataSetID(new String(buffer,offset,length));
}",0.9537671232876712
72727,"/** 
 * parent data set if any.
 * @return
 */
public DataSetID getParentID(){
  return parent;
}","/** 
 * parent data set if any.
 * @return parent data set
 */
public DataSetID getParentID(){
  return parent;
}",0.923809523809524
72728,"public boolean getWrappingText(){
  return getBooleanOption(WRAPPING_TEXT,true);
}","/** 
 * Get the flag which indicates if text wrapped.
 * @return text if it is wrapped
 */
public boolean getWrappingText(){
  return getBooleanOption(WRAPPING_TEXT,true);
}",0.6431372549019608
72729,"public String getOfficeVersion(){
  if (getStringOption(OFFICE_VERSION) == null)   return ""String_Node_Str"";
  return getStringOption(OFFICE_VERSION);
}","/** 
 * Get office version.
 * @return office version
 */
public String getOfficeVersion(){
  if (getStringOption(OFFICE_VERSION) == null)   return ""String_Node_Str"";
  return getStringOption(OFFICE_VERSION);
}",0.8397790055248618
72730,"public void setOfficeVersion(String officeVersion){
  setOption(OFFICE_VERSION,officeVersion);
}","/** 
 * Set office version.
 * @param officeVersion
 */
public void setOfficeVersion(String officeVersion){
  setOption(OFFICE_VERSION,officeVersion);
}",0.7741935483870968
72731,"public void setWrappingText(boolean wrappingText){
  setOption(WRAPPING_TEXT,wrappingText);
}","/** 
 * Set wrapping text.
 * @param wrappingText
 */
public void setWrappingText(boolean wrappingText){
  setOption(WRAPPING_TEXT,wrappingText);
}",0.775
72732,"/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DteLevelDataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByRowKeyCountTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}","/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DteLevelDataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByRowKeyCountTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.util.DirectedGraphTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}",0.9942582454266256
72733,"protected void setUp() throws Exception {
  super.setUp();
  nodes[0]=new Node(""String_Node_Str"");
  nodes[1]=new Node(""String_Node_Str"");
  nodes[2]=new Node(""String_Node_Str"");
  nodes[3]=new Node(""String_Node_Str"");
  nodes[4]=new Node(""String_Node_Str"");
}","protected void setUp() throws Exception {
  super.setUp();
}",0.375
72734,"/** 
 * compile the expression
 * @param expression
 * @return List contains all column reference
 * @throws BirtException
 */
public static List compileColumnExpression(ExpressionParserUtility util,String expression,boolean rowMode) throws BirtException {
  if (expression == null || expression.trim().length() == 0)   return new ArrayList();
  if (rowMode)   util.ROW_INDICATOR=ROW_COLUMN_INDICATOR;
 else   util.ROW_INDICATOR=DATASETROW_INDICATOR;
  List columnExprList=new ArrayList();
  columnExprList.clear();
  Context context=Context.enter();
  try {
    ScriptOrFnNode tree=util.parse(expression,context);
    util.CompiledExprFromTree(expression,context,tree,columnExprList);
  }
 catch (  Exception ex) {
    throw new CoreException(util.pluginId,ResourceConstants.INVALID_EXPRESSION,ex);
  }
 finally {
    Context.exit();
  }
  return columnExprList;
}","/** 
 * compile the expression
 * @param expression
 * @return List contains all column reference
 * @throws BirtException
 */
public static List compileColumnExpression(ExpressionParserUtility util,String expression,boolean rowMode) throws BirtException {
  if (expression == null || expression.trim().length() == 0)   return new ArrayList();
  if (rowMode)   util.ROW_INDICATOR=ROW_COLUMN_INDICATOR;
 else   util.ROW_INDICATOR=DATASETROW_INDICATOR;
  List columnExprList=new ArrayList();
  columnExprList.clear();
  Context context=Context.enter();
  try {
    ScriptOrFnNode tree=util.parse(expression,context);
    util.CompiledExprFromTree(expression,context,tree,columnExprList);
  }
 catch (  Exception ex) {
    throw new CoreException(ResourceConstants.INVALID_EXPRESSION,expression,ex);
  }
 finally {
    Context.exit();
  }
  return columnExprList;
}",0.9855240301100172
72735,"private void saveNamingRelation(NamingRelation relation) throws DataException {
  this.rdSave.saveNamingRelation(relation);
}","private void saveNamingRelation(NamingRelation relation) throws DataException {
  this.getRdSave().saveNamingRelation(relation);
}",0.9725490196078432
72736,"protected void endCell(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  ((AbstractNode)currentNode).setFinished(finished);
  if (currentNode.isStarted()) {
    currentNode.end();
  }
  currentNode=currentNode.getParent();
}","protected void endCell(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  AbstractNode current=(AbstractNode)currentNode;
  if (!current.isFirst) {
    current.setFinished(false);
  }
 else {
    current.setFinished(finished);
  }
  if (currentNode.isStarted()) {
    currentNode.end();
  }
  currentNode=currentNode.getParent();
}",0.7573770491803279
72737,"private void collectExecutable() throws OLAPException {
  elements=new ArrayList();
  currentElement=0;
  endGroup=false;
  int startingGroupIndex=getStartingGroupLevel(rowCursor,groupCursors);
  if (startingGroupIndex <= currentGroupIndex + 1) {
    if (totalMeasureCount > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE) {
      if (!isCurrentLevelLeafGroup() && currentLevel != null && currentLevel.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_BEFORE.equals(currentLevel.getAggregationHeaderLocation())) {
        CrosstabGroupBandExecutor bandExecutor=new CrosstabGroupBandExecutor(this,currentDimensionIndex,currentLevelIndex,IBandContent.BAND_HEADER);
        elements.add(bandExecutor);
      }
    }
  }
  if (currentGroupIndex < rowGroups.size() - 1) {
    CrosstabGroupExecutor groupExecutor=new CrosstabGroupExecutor(this,currentGroupIndex + 1,rowCursor);
    elements.add(groupExecutor);
  }
 else {
    CrosstabGroupBandExecutor bandExecutor=new CrosstabGroupBandExecutor(this,currentDimensionIndex,currentLevelIndex,IBandContent.BAND_DETAIL);
    elements.add(bandExecutor);
  }
  int endingGroupIndex=getEndingGroupLevel(rowCursor,groupCursors);
  if (endingGroupIndex <= currentGroupIndex + 1) {
    if (totalMeasureCount > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE) {
      if (!isCurrentLevelLeafGroup() && currentLevel != null && currentLevel.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_AFTER.equals(currentLevel.getAggregationHeaderLocation())) {
        CrosstabGroupBandExecutor bandExecutor=new CrosstabGroupBandExecutor(this,currentDimensionIndex,currentLevelIndex,IBandContent.BAND_FOOTER);
        elements.add(bandExecutor);
      }
    }
    endGroup=true;
  }
}","private void collectExecutable() throws OLAPException {
  elements=new ArrayList();
  currentElement=0;
  endGroup=false;
  int startingGroupIndex=GroupUtil.getStartingGroupLevel(rowCursor,groupCursors);
  if (startingGroupIndex <= currentGroupIndex + 1) {
    if (totalMeasureCount > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE) {
      if (!isCurrentLevelLeafGroup() && currentLevel != null && currentLevel.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_BEFORE.equals(currentLevel.getAggregationHeaderLocation())) {
        CrosstabGroupBandExecutor bandExecutor=new CrosstabGroupBandExecutor(this,currentDimensionIndex,currentLevelIndex,IBandContent.BAND_HEADER);
        elements.add(bandExecutor);
      }
    }
  }
  if (currentGroupIndex < rowGroups.size() - 1) {
    CrosstabGroupExecutor groupExecutor=new CrosstabGroupExecutor(this,currentGroupIndex + 1,rowCursor);
    elements.add(groupExecutor);
  }
 else {
    CrosstabGroupBandExecutor bandExecutor=new CrosstabGroupBandExecutor(this,currentDimensionIndex,currentLevelIndex,IBandContent.BAND_DETAIL);
    elements.add(bandExecutor);
  }
  int endingGroupIndex=GroupUtil.getEndingGroupLevel(rowCursor,groupCursors);
  if (endingGroupIndex <= currentGroupIndex + 1) {
    if (totalMeasureCount > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE) {
      if (!isCurrentLevelLeafGroup() && currentLevel != null && currentLevel.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_AFTER.equals(currentLevel.getAggregationHeaderLocation())) {
        CrosstabGroupBandExecutor bandExecutor=new CrosstabGroupBandExecutor(this,currentDimensionIndex,currentLevelIndex,IBandContent.BAND_FOOTER);
        elements.add(bandExecutor);
      }
    }
    endGroup=true;
  }
}",0.994311717861206
72738,"public boolean hasNextChild(){
  if (currentElement < elements.size()) {
    return true;
  }
  if (hasGroup) {
    if (endGroup) {
      return false;
    }
    try {
      while (!endGroup) {
        int endingGroupIndex=getEndingGroupLevel(rowCursor,groupCursors);
        if (endingGroupIndex <= currentGroupIndex + 1) {
          currentElement=0;
          elements=new ArrayList();
          if (totalMeasureCount > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE) {
            if (!isCurrentLevelLeafGroup() && currentLevel != null && currentLevel.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_AFTER.equals(currentLevel.getAggregationHeaderLocation())) {
              CrosstabGroupBandExecutor bandExecutor=new CrosstabGroupBandExecutor(this,currentDimensionIndex,currentLevelIndex,IBandContent.BAND_FOOTER);
              elements.add(bandExecutor);
            }
          }
          endGroup=true;
          return currentElement < elements.size();
        }
        if (rowCursor.next()) {
          collectExecutable();
          return currentElement < elements.size();
        }
      }
    }
 catch (    OLAPException e) {
      logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
    }
  }
  return false;
}","public boolean hasNextChild(){
  if (currentElement < elements.size()) {
    return true;
  }
  if (hasGroup) {
    if (endGroup) {
      return false;
    }
    try {
      while (!endGroup) {
        int endingGroupIndex=GroupUtil.getEndingGroupLevel(rowCursor,groupCursors);
        if (endingGroupIndex <= currentGroupIndex + 1) {
          currentElement=0;
          elements=new ArrayList();
          if (totalMeasureCount > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE) {
            if (!isCurrentLevelLeafGroup() && currentLevel != null && currentLevel.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_AFTER.equals(currentLevel.getAggregationHeaderLocation())) {
              CrosstabGroupBandExecutor bandExecutor=new CrosstabGroupBandExecutor(this,currentDimensionIndex,currentLevelIndex,IBandContent.BAND_FOOTER);
              elements.add(bandExecutor);
            }
          }
          endGroup=true;
          return currentElement < elements.size();
        }
        if (rowCursor.next()) {
          collectExecutable();
          return currentElement < elements.size();
        }
      }
    }
 catch (    OLAPException e) {
      logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
    }
  }
  return false;
}",0.9960629921259844
72739,"private void collectExecutable() throws OLAPException {
  endOfGroups=false;
  currentChild=0;
  children=new ArrayList();
  int startingGroupIndex=getStartingGroupLevel(rowCursor,groupCursors);
  if (startingGroupIndex <= 0) {
    if (columnGroups.size() > 0 || GroupUtil.hasMeasureHeader(crosstabItem,COLUMN_AXIS_TYPE) || crosstabItem.getHeader() != null) {
      CrosstabHeaderExecutor headerExecutor=new CrosstabHeaderExecutor(this);
      children.add(headerExecutor);
    }
  }
{
    CrosstabGroupExecutor groupExecutor=new CrosstabGroupExecutor(this,0,rowCursor);
    children.add(groupExecutor);
  }
  int endingGroupIndex=getEndingGroupLevel(rowCursor,groupCursors);
  if (endingGroupIndex <= 0) {
    if (crosstabItem.getGrandTotal(ROW_AXIS_TYPE) != null && (measureCount > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE)) {
      CrosstabFooterExecutor totalExecutor=new CrosstabFooterExecutor(this);
      children.add(totalExecutor);
    }
    endOfGroups=true;
  }
}","private void collectExecutable() throws OLAPException {
  endOfGroups=false;
  currentChild=0;
  children=new ArrayList();
  int startingGroupIndex=GroupUtil.getStartingGroupLevel(rowCursor,groupCursors);
  if (startingGroupIndex <= 0) {
    if (columnGroups.size() > 0 || GroupUtil.hasMeasureHeader(crosstabItem,COLUMN_AXIS_TYPE) || crosstabItem.getHeader() != null) {
      CrosstabHeaderExecutor headerExecutor=new CrosstabHeaderExecutor(this);
      children.add(headerExecutor);
    }
  }
{
    CrosstabGroupExecutor groupExecutor=new CrosstabGroupExecutor(this,0,rowCursor);
    children.add(groupExecutor);
  }
  int endingGroupIndex=GroupUtil.getEndingGroupLevel(rowCursor,groupCursors);
  if (endingGroupIndex <= 0) {
    if (crosstabItem.getGrandTotal(ROW_AXIS_TYPE) != null && (measureCount > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE)) {
      CrosstabFooterExecutor totalExecutor=new CrosstabFooterExecutor(this);
      children.add(totalExecutor);
    }
    endOfGroups=true;
  }
}",0.98998998998999
72740,"public IContent execute(){
  ITableContent content=context.getReportContent().createTableContent();
  executeQuery(crosstabItem);
  initializeContent(content,crosstabItem);
  processStyle(crosstabItem);
  processVisibility(crosstabItem);
  processBookmark(crosstabItem);
  processAction(crosstabItem);
  content.setCaption(crosstabItem.getCaption());
  content.setCaptionKey(crosstabItem.getCaptionKey());
  content.setSummary(crosstabItem.getSummary());
  content.setHeaderRepeat(crosstabItem.isRepeatColumnHeader());
  if (getCubeCursor() != null) {
    styleCache=new HashMap();
    try {
      rowGroups=GroupUtil.getGroups(crosstabItem,ROW_AXIS_TYPE);
      columnGroups=GroupUtil.getGroups(crosstabItem,COLUMN_AXIS_TYPE);
      walker=new CachedColumnWalker(crosstabItem,getColumnEdgeCursor());
      new TableColumnGenerator(crosstabItem,walker,getCubeResultSet()).generateColumns(context.getReportContent(),content);
      prepareChildren();
    }
 catch (    OLAPException e) {
      logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
    }
  }
 else {
    logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""));
  }
  return content;
}","public IContent execute(){
  ITableContent content=context.getReportContent().createTableContent();
  executeQuery(crosstabItem);
  initializeContent(content,crosstabItem);
  processStyle(crosstabItem);
  processVisibility(crosstabItem);
  processBookmark(crosstabItem);
  processAction(crosstabItem);
  content.setCaption(crosstabItem.getCaption());
  content.setCaptionKey(crosstabItem.getCaptionKey());
  content.setSummary(crosstabItem.getSummary());
  content.setHeaderRepeat(crosstabItem.isRepeatColumnHeader());
  if (getCubeCursor() != null) {
    styleCache=new HashMap();
    try {
      rowGroups=GroupUtil.getGroups(crosstabItem,ROW_AXIS_TYPE);
      columnGroups=GroupUtil.getGroups(crosstabItem,COLUMN_AXIS_TYPE);
      walker=new CachedColumnWalker(crosstabItem,getColumnEdgeCursor());
      new TableColumnGenerator(crosstabItem,walker,getCubeResultSet(),getColumnEdgeCursor(),columnGroups).generateColumns(context.getReportContent(),content);
      prepareChildren();
    }
 catch (    OLAPException e) {
      logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
    }
  }
 else {
    logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""));
  }
  return content;
}",0.9852382960776044
72741,"public boolean hasNextChild(){
  if (children == null) {
    return false;
  }
  if (currentChild < children.size()) {
    return true;
  }
  if (needRowGroups) {
    if (endOfGroups) {
      return false;
    }
    try {
      while (!endOfGroups) {
        int endingGroupIndex=getEndingGroupLevel(rowCursor,groupCursors);
        if (endingGroupIndex <= 0) {
          currentChild=0;
          children=new ArrayList();
          if (crosstabItem.getGrandTotal(ROW_AXIS_TYPE) != null && (measureCount > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE)) {
            CrosstabFooterExecutor totalExecutor=new CrosstabFooterExecutor(this);
            children.add(totalExecutor);
          }
          endOfGroups=true;
          return currentChild < children.size();
        }
        if (rowCursor.next()) {
          collectExecutable();
          return currentChild < children.size();
        }
      }
    }
 catch (    OLAPException e) {
      logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
    }
  }
  return false;
}","public boolean hasNextChild(){
  if (children == null) {
    return false;
  }
  if (currentChild < children.size()) {
    return true;
  }
  if (needRowGroups) {
    if (endOfGroups) {
      return false;
    }
    try {
      while (!endOfGroups) {
        int endingGroupIndex=GroupUtil.getEndingGroupLevel(rowCursor,groupCursors);
        if (endingGroupIndex <= 0) {
          currentChild=0;
          children=new ArrayList();
          if (crosstabItem.getGrandTotal(ROW_AXIS_TYPE) != null && (measureCount > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE)) {
            CrosstabFooterExecutor totalExecutor=new CrosstabFooterExecutor(this);
            children.add(totalExecutor);
          }
          endOfGroups=true;
          return currentChild < children.size();
        }
        if (rowCursor.next()) {
          collectExecutable();
          return currentChild < children.size();
        }
      }
    }
 catch (    OLAPException e) {
      logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
    }
  }
  return false;
}",0.9952874646559848
72742,"IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(""String_Node_Str"" + source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(dteSource);
  return dteSource;
}","IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(MessageConstants.EXTENTION_ID_MISSING_ERROR,source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(dteSource);
  return dteSource;
}",0.9815384615384616
72743,"void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null)   throw new EngineException(""String_Node_Str"");
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  dteDataSet.setRowFetchLimit(modelDataSet.getRowFetchLimit());
  mergeHints(modelDataSet,dteDataSet);
}","void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null)   throw new EngineException(MessageConstants.DATA_SOURCE_ERROR);
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  dteDataSet.setRowFetchLimit(modelDataSet.getRowFetchLimit());
  mergeHints(modelDataSet,dteDataSet);
}",0.9755080771235018
72744,"private IExtractionResults extractByInstanceID(InstanceID iid) throws EngineException {
  DataID dataId=iid.getDataID();
  DataSetID dataSetId=dataId.getDataSetID();
  DataRequestSession dataSession=executionContext.getDataEngine().getDTESession();
  Scriptable scope=executionContext.getSharedScope();
  IResultIterator dataIter=null;
  IBaseQueryDefinition query=null;
  try {
    if (null == filterExpressions && null == sortExpressions && maxRows == -1) {
      dataIter=getResultSetIterator(dataSession,dataSetId,scope);
    }
 else {
      long id=iid.getComponentID();
      ReportItemDesign design=(ReportItemDesign)report.getReportItemByID(id);
      IDataQueryDefinition dataQuery=design.getQuery();
      if (!(dataQuery instanceof IBaseQueryDefinition)) {
        return null;
      }
 else {
        query=(IBaseQueryDefinition)dataQuery;
      }
      if (filterExpressions != null) {
        for (int iNum=0; iNum < filterExpressions.length; iNum++) {
          query.getFilters().add(filterExpressions[iNum]);
        }
      }
      if (sortExpressions != null) {
        for (int iNum=0; iNum < sortExpressions.length; iNum++) {
          query.getSorts().add(sortExpressions[iNum]);
        }
      }
      if (maxRows != -1) {
        query.setMaxRows(maxRows);
      }
      IBaseQueryDefinition rootQuery=query;
      while (rootQuery instanceof SubqueryDefinition) {
        rootQuery=rootQuery.getParentQuery();
      }
      QueryDefinition newRootQuery=queryCopy((QueryDefinition)rootQuery);
      HashMap queryIds=report.getQueryIDs();
      String queryId=(String)queryIds.get(rootQuery);
      String rsetId=queryId2rsetId(queryId);
      newRootQuery.setQueryResultsID(rsetId);
      IPreparedQuery preparedQuery=dataSession.prepare(newRootQuery);
      IQueryResults rootResults=preparedQuery.execute(scope);
      dataIter=getFilterResultSetIterator(dataSession,dataSetId,scope,rootResults);
    }
  }
 catch (  BirtException e) {
    throw new EngineException(""String_Node_Str"",e);
  }
 finally {
    if (null != query) {
      if (filterExpressions != null) {
        for (int iNum=0; iNum < filterExpressions.length; iNum++) {
          query.getFilters().remove(filterExpressions[iNum]);
        }
        filterExpressions=null;
      }
      if (sortExpressions != null) {
        for (int iNum=0; iNum < sortExpressions.length; iNum++) {
          query.getSorts().remove(sortExpressions[iNum]);
        }
        sortExpressions=null;
      }
      maxRows=-1;
    }
  }
  IResultMetaData metaData=getMetaDateByInstanceID(iid);
  if (null != metaData) {
    return new ExtractionResults(dataIter,metaData,this.selectedColumns,startRow,maxRows);
  }
 else {
    return null;
  }
}","private IExtractionResults extractByInstanceID(InstanceID iid) throws EngineException {
  DataID dataId=iid.getDataID();
  DataSetID dataSetId=dataId.getDataSetID();
  DataRequestSession dataSession=executionContext.getDataEngine().getDTESession();
  Scriptable scope=executionContext.getSharedScope();
  IResultIterator dataIter=null;
  IBaseQueryDefinition query=null;
  try {
    if (null == filterExpressions && null == sortExpressions && maxRows == -1) {
      dataIter=getResultSetIterator(dataSession,dataSetId,scope);
    }
 else {
      long id=iid.getComponentID();
      ReportItemDesign design=(ReportItemDesign)report.getReportItemByID(id);
      IDataQueryDefinition dataQuery=design.getQuery();
      if (!(dataQuery instanceof IBaseQueryDefinition)) {
        return null;
      }
 else {
        query=(IBaseQueryDefinition)dataQuery;
      }
      if (filterExpressions != null) {
        for (int iNum=0; iNum < filterExpressions.length; iNum++) {
          query.getFilters().add(filterExpressions[iNum]);
        }
      }
      if (sortExpressions != null) {
        for (int iNum=0; iNum < sortExpressions.length; iNum++) {
          query.getSorts().add(sortExpressions[iNum]);
        }
      }
      if (maxRows != -1) {
        query.setMaxRows(maxRows);
      }
      IBaseQueryDefinition rootQuery=query;
      while (rootQuery instanceof SubqueryDefinition) {
        rootQuery=rootQuery.getParentQuery();
      }
      QueryDefinition newRootQuery=queryCopy((QueryDefinition)rootQuery);
      HashMap queryIds=report.getQueryIDs();
      String queryId=(String)queryIds.get(rootQuery);
      String rsetId=queryId2rsetId(queryId);
      newRootQuery.setQueryResultsID(rsetId);
      IPreparedQuery preparedQuery=dataSession.prepare(newRootQuery);
      IQueryResults rootResults=preparedQuery.execute(scope);
      dataIter=getFilterResultSetIterator(dataSession,dataSetId,scope,rootResults);
    }
  }
 catch (  BirtException e) {
    throw new EngineException(MessageConstants.DATA_EXPORTION_ERROR,iid,e);
  }
 finally {
    if (null != query) {
      if (filterExpressions != null) {
        for (int iNum=0; iNum < filterExpressions.length; iNum++) {
          query.getFilters().remove(filterExpressions[iNum]);
        }
        filterExpressions=null;
      }
      if (sortExpressions != null) {
        for (int iNum=0; iNum < sortExpressions.length; iNum++) {
          query.getSorts().remove(sortExpressions[iNum]);
        }
        sortExpressions=null;
      }
      maxRows=-1;
    }
  }
  IResultMetaData metaData=getMetaDateByInstanceID(iid);
  if (null != metaData) {
    return new ExtractionResults(dataIter,metaData,this.selectedColumns,startRow,maxRows);
  }
 else {
    return null;
  }
}",0.9904796777737092
72745,"public void extract(IDataExtractionOption option) throws BirtException {
  throw new EngineException(""String_Node_Str"");
}","public void extract(IDataExtractionOption option) throws BirtException {
  throw new EngineException(MessageConstants.UNSUPPORTED_DOCUMENT_VERSION_ERROR);
}",0.7913669064748201
72746,"private IDataExtractionExtension getDataExtractionExtension(IDataExtractionOption option) throws EngineException {
  IDataExtractionExtension dataExtraction=null;
  String extension=option.getExtension();
  ExtensionManager extensionManager=ExtensionManager.getInstance();
  if (extension != null) {
    dataExtraction=extensionManager.createDataExtractionExtensionById(extension);
    if (dataExtraction == null) {
      logger.log(Level.WARNING,""String_Node_Str"" + extension + ""String_Node_Str"");
    }
  }
  if (dataExtraction == null) {
    String format=option.getOutputFormat();
    if (format != null) {
      dataExtraction=extensionManager.createDataExtractionExtensionByFormat(format);
      if (dataExtraction == null) {
        logger.log(Level.WARNING,""String_Node_Str"" + format + ""String_Node_Str"");
      }
    }
  }
  if (dataExtraction == null) {
    throw new EngineException(""String_Node_Str"");
  }
  return dataExtraction;
}","private IDataExtractionExtension getDataExtractionExtension(IDataExtractionOption option) throws EngineException {
  IDataExtractionExtension dataExtraction=null;
  String extension=option.getExtension();
  ExtensionManager extensionManager=ExtensionManager.getInstance();
  if (extension != null) {
    dataExtraction=extensionManager.createDataExtractionExtensionById(extension);
    if (dataExtraction == null) {
      logger.log(Level.WARNING,""String_Node_Str"" + extension + ""String_Node_Str"");
    }
  }
  if (dataExtraction == null) {
    String format=option.getOutputFormat();
    if (format != null) {
      dataExtraction=extensionManager.createDataExtractionExtensionByFormat(format);
      if (dataExtraction == null) {
        logger.log(Level.WARNING,""String_Node_Str"" + format + ""String_Node_Str"");
      }
    }
  }
  if (dataExtraction == null) {
    throw new EngineException(MessageConstants.INVALID_EXTENSION_ERROR);
  }
  return dataExtraction;
}",0.9722658294086866
72747,"public Object getValue(int index) throws BirtException {
  if (beforeFirstRow) {
    throw new EngineException(""String_Node_Str"");
  }
  IResultMetaData metaData=getResultMetaData();
  String columnName=metaData.getColumnName(index);
  return iterator.getValue(columnName);
}","public Object getValue(int index) throws BirtException {
  if (beforeFirstRow) {
    throw new EngineException(MessageConstants.RESULTSET_ITERATOR_ERROR);
  }
  IResultMetaData metaData=getResultMetaData();
  String columnName=metaData.getColumnName(index);
  return iterator.getValue(columnName);
}",0.4076655052264808
72748,"public static List parsePageSequence(String pageRange,long totalPage) throws EngineException {
  ArrayList list=new ArrayList();
  if (null == pageRange || ""String_Node_Str"".equals(pageRange) || pageRange.toUpperCase().indexOf(""String_Node_Str"") >= 0) {
    list.add(new long[]{1,totalPage});
    return list;
  }
  String[] ps=pageRange.split(""String_Node_Str"");
  for (int i=0; i < ps.length; i++) {
    try {
      if (ps[i].indexOf(""String_Node_Str"") > 0) {
        String[] psi=ps[i].split(""String_Node_Str"");
        if (psi.length == 2) {
          long start=Long.parseLong(psi[0].trim());
          long end=Long.parseLong(psi[1].trim());
          if (start > 0 && end <= totalPage && end >= start) {
            list.add(new long[]{Math.max(start,1),Math.min(end,totalPage)});
          }
 else {
            throw new EngineException(""String_Node_Str"" + ps[i]);
          }
        }
 else {
          throw new EngineException(""String_Node_Str"" + ps[i]);
        }
      }
 else {
        long number=Long.parseLong(ps[i].trim());
        if (number > 0 && number <= totalPage) {
          list.add(new long[]{number,number});
        }
 else {
          throw new EngineException(""String_Node_Str"" + ps[i]);
        }
      }
    }
 catch (    NumberFormatException ex) {
      throw new EngineException(""String_Node_Str"" + ps[i]);
    }
  }
  return sort(list);
}","public static List parsePageSequence(String pageRange,long totalPage) throws EngineException {
  ArrayList list=new ArrayList();
  if (null == pageRange || ""String_Node_Str"".equals(pageRange) || pageRange.toUpperCase().indexOf(""String_Node_Str"") >= 0) {
    list.add(new long[]{1,totalPage});
    return list;
  }
  String[] ps=pageRange.split(""String_Node_Str"");
  for (int i=0; i < ps.length; i++) {
    try {
      if (ps[i].indexOf(""String_Node_Str"") > 0) {
        String[] psi=ps[i].split(""String_Node_Str"");
        if (psi.length == 2) {
          long start=Long.parseLong(psi[0].trim());
          long end=Long.parseLong(psi[1].trim());
          if (start > 0 && end <= totalPage && end >= start) {
            list.add(new long[]{Math.max(start,1),Math.min(end,totalPage)});
          }
 else {
            throw new EngineException(MessageConstants.PAGE_NUMBER_RANGE_ERROR,ps[i]);
          }
        }
 else {
          throw new EngineException(MessageConstants.PAGE_NUMBER_RANGE_ERROR,ps[i]);
        }
      }
 else {
        long number=Long.parseLong(ps[i].trim());
        if (number > 0 && number <= totalPage) {
          list.add(new long[]{number,number});
        }
 else {
          throw new EngineException(MessageConstants.PAGE_NUMBER_RANGE_ERROR,ps[i]);
        }
      }
    }
 catch (    NumberFormatException ex) {
      throw new EngineException(MessageConstants.PAGE_NUMBER_RANGE_ERROR,ps[i]);
    }
  }
  return sort(list);
}",0.9197183098591548
72749,"public void setBookmark(String bookmark) throws EngineException {
  long pageNumber=reportDoc.getPageNumber(bookmark);
  if (pageNumber <= 0) {
    throw new EngineException(""String_Node_Str"",bookmark);
  }
  innerRender=new PageRangeRender(new long[]{pageNumber,pageNumber});
}","public void setBookmark(String bookmark) throws EngineException {
  long pageNumber=reportDoc.getPageNumber(bookmark);
  if (pageNumber <= 0) {
    throw new EngineException(MessageConstants.BOOKMARK_NOT_FOUND_ERROR,bookmark);
  }
  innerRender=new PageRangeRender(new long[]{pageNumber,pageNumber});
}",0.9103448275862068
72750,"protected IPageHint getPageHint(ReportPageExecutor executor,long pageNumber){
  try {
    return executor.getLayoutPageHint(pageNumber);
  }
 catch (  IOException ex) {
    executionContext.addException(new EngineException(""String_Node_Str"",ex));
    return null;
  }
}","protected IPageHint getPageHint(ReportPageExecutor executor,long pageNumber){
  try {
    return executor.getLayoutPageHint(pageNumber);
  }
 catch (  IOException ex) {
    executionContext.addException(new EngineException(MessageConstants.PAGE_HINT_LOADING_ERROR,ex));
    return null;
  }
}",0.9055258467023172
72751,"ReportletRender(String bookmark) throws EngineException {
  this.offset=reportDoc.getBookmarkOffset(bookmark);
  if (offset == -1) {
    throw new EngineException(""String_Node_Str"" + bookmark);
  }
}","ReportletRender(String bookmark) throws EngineException {
  this.offset=reportDoc.getBookmarkOffset(bookmark);
  if (offset == -1) {
    throw new EngineException(MessageConstants.INVALID_BOOKMARK_ERROR,bookmark);
  }
}",0.8660287081339713
72752,"public long getPageCount() throws EngineException {
  if (runningStatus != STATUS_SUCCEEDED) {
    throw new EngineException(""String_Node_Str"");
  }
  return pageCount;
}","public long getPageCount() throws EngineException {
  if (runningStatus != STATUS_SUCCEEDED) {
    throw new EngineException(MessageConstants.RENDERTASK_NOT_FINISHED_ERROR);
  }
  return pageCount;
}",0.8563685636856369
72753,"public void setPageNumber(long pageNumber) throws EngineException {
  if (pageNumber <= 0 || pageNumber > totalPage) {
    throw new EngineException(""String_Node_Str"",new Long(pageNumber));
  }
  innerRender=new PageRangeRender(new long[]{pageNumber,pageNumber});
}","public void setPageNumber(long pageNumber) throws EngineException {
  if (pageNumber <= 0 || pageNumber > totalPage) {
    throw new EngineException(MessageConstants.PAGE_NOT_FOUND_ERROR,new Long(pageNumber));
  }
  innerRender=new PageRangeRender(new long[]{pageNumber,pageNumber});
}",0.9127272727272728
72754,"private void loadBasicInfo() throws EngineException {
  try {
    Object lock=archive.lock(CORE_STREAM);
    try {
synchronized (lock) {
        RAInputStream in=archive.getStream(CORE_STREAM);
        try {
          DataInputStream di=new DataInputStream(in);
          checkVersion(di);
          if (coreVersion == -1) {
            loadOldBasicInfo(di);
          }
 else           if (coreVersion == 0) {
            loadBasicInfoV0(di);
          }
 else {
            throw new IOException(""String_Node_Str"" + coreVersion);
          }
        }
  finally {
          in.close();
        }
      }
    }
  finally {
      archive.unlock(lock);
    }
  }
 catch (  IOException ee) {
    close();
    throw new EngineException(""String_Node_Str"",ee);
  }
}","private void loadBasicInfo() throws EngineException {
  try {
    Object lock=archive.lock(CORE_STREAM);
    try {
synchronized (lock) {
        RAInputStream in=archive.getStream(CORE_STREAM);
        try {
          DataInputStream di=new DataInputStream(in);
          checkVersion(di);
          if (coreVersion == -1) {
            loadOldBasicInfo(di);
          }
 else           if (coreVersion == 0) {
            loadBasicInfoV0(di);
          }
 else {
            throw new IOException(""String_Node_Str"" + coreVersion);
          }
        }
  finally {
          in.close();
        }
      }
    }
  finally {
      archive.unlock(lock);
    }
  }
 catch (  IOException ee) {
    close();
    throw new EngineException(MessageConstants.REPORT_DOCUMENT_OPEN_ERROR,ee);
  }
}",0.96640826873385
72755,"private int getColumnIndex(int index) throws BirtException {
  if (selectedColumns == null) {
    return index;
  }
  String name=selectedColumns[index];
  if (null != parentMetaData) {
    for (int i=0; i < parentMetaData.getColumnCount(); i++) {
      String columnName=parentMetaData.getColumnName(i);
      if (columnName.equals(name)) {
        return i;
      }
    }
  }
 else {
    for (int i=0; i < metaEntries.size(); i++) {
      MetaDataEntry entry=(MetaDataEntry)metaEntries.get(i);
      if (entry.name.equals(name)) {
        return i;
      }
    }
  }
  throw new EngineException(""String_Node_Str"");
}","private int getColumnIndex(int index) throws BirtException {
  if (selectedColumns == null) {
    return index;
  }
  String name=selectedColumns[index];
  if (null != parentMetaData) {
    for (int i=0; i < parentMetaData.getColumnCount(); i++) {
      String columnName=parentMetaData.getColumnName(i);
      if (columnName.equals(name)) {
        return i;
      }
    }
  }
 else {
    for (int i=0; i < metaEntries.size(); i++) {
      MetaDataEntry entry=(MetaDataEntry)metaEntries.get(i);
      if (entry.name.equals(name)) {
        return i;
      }
    }
  }
  throw new EngineException(MessageConstants.INVALID_COLUMN_INDEX_ERROR);
}",0.9508716323296356
72756,"void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(""String_Node_Str"",t);
  }
}","void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}",0.981340118744699
72757,"/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  doValidateParameters();
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  try {
    ReportRunnable newRunnable=writer.saveDesign(executionContext.getRunnable(),executionContext.getOriginalRunnable());
    executionContext.updateRunnable(newRunnable);
    writer.saveReportIR(executionContext.getReport());
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      IReportExecutor executor=new ReportExecutor(executionContext);
      executor=new ReportEmitterExecutor(executor,emitter);
      executor=new SuppressDuplciateReportExecutor(executor);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(""String_Node_Str"",t);
  }
 finally {
    documentBuilder=null;
    closeFactory();
    writer.savePersistentObjects(executionContext.getGlobalBeans());
    closeReportDocument();
    if (pageHandler != null && !executionContext.isCanceled()) {
      int totalPage=(int)executionContext.getTotalPage();
      IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,totalPage,true);
      pageHandler.onPage(totalPage,true,docInfo);
    }
  }
}","/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  doValidateParameters();
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  try {
    ReportRunnable newRunnable=writer.saveDesign(executionContext.getRunnable(),executionContext.getOriginalRunnable());
    executionContext.updateRunnable(newRunnable);
    writer.saveReportIR(executionContext.getReport());
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      IReportExecutor executor=new ReportExecutor(executionContext);
      executor=new ReportEmitterExecutor(executor,emitter);
      executor=new SuppressDuplciateReportExecutor(executor);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
 finally {
    documentBuilder=null;
    closeFactory();
    writer.savePersistentObjects(executionContext.getGlobalBeans());
    closeReportDocument();
    if (pageHandler != null && !executionContext.isCanceled()) {
      int totalPage=(int)executionContext.getTotalPage();
      IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,totalPage,true);
      pageHandler.onPage(totalPage,true,docInfo);
    }
  }
}",0.9788461538461538
72758,"private void openReportDocument() throws EngineException {
  try {
    if (archive == null) {
      openArchive();
    }
    writer=new ReportDocumentWriter(engine,archive);
    executionContext.setReportDocWriter(writer);
  }
 catch (  IOException ex) {
    throw new EngineException(""String_Node_Str"",ex);
  }
}","private void openReportDocument() throws EngineException {
  try {
    if (archive == null) {
      openArchive();
    }
    writer=new ReportDocumentWriter(engine,archive);
    executionContext.setReportDocWriter(writer);
  }
 catch (  IOException ex) {
    throw new EngineException(MessageConstants.REPORT_ARCHIVE_OPEN_ERROR,ex);
  }
}",0.9216589861751152
72759,"public IBaseResultSet execute(IBaseResultSet parent,IDataQueryDefinition query,boolean useCache) throws BirtException {
  if (query instanceof ISubqueryDefinition) {
    if (parent == null) {
      return null;
    }
 else     if (parent instanceof ICubeResultSet) {
      throw new EngineException(""String_Node_Str"" + ((ISubqueryDefinition)query).getName());
    }
    return doExecuteSubQuery((IQueryResultSet)parent,(ISubqueryDefinition)query);
  }
 else   if (query instanceof IQueryDefinition) {
    return doExecuteQuery(parent,(IQueryDefinition)query,useCache);
  }
 else   if (query instanceof ICubeQueryDefinition) {
    return doExecuteCube(parent,(ICubeQueryDefinition)query,useCache);
  }
 else   if (query instanceof ISubCubeQueryDefinition) {
    return doExecuteSubCubeQuery((ICubeResultSet)parent,(ISubCubeQueryDefinition)query);
  }
  throw new EngineException(""String_Node_Str"" + query.getClass().getName());
}","public IBaseResultSet execute(IBaseResultSet parent,IDataQueryDefinition query,boolean useCache) throws BirtException {
  if (query instanceof ISubqueryDefinition) {
    if (parent == null) {
      return null;
    }
 else     if (parent instanceof ICubeResultSet) {
      throw new EngineException(MessageConstants.INCORRECT_PARENT_RESULSET_ERROR,((ISubqueryDefinition)query).getName());
    }
    return doExecuteSubQuery((IQueryResultSet)parent,(ISubqueryDefinition)query);
  }
 else   if (query instanceof IQueryDefinition) {
    return doExecuteQuery(parent,(IQueryDefinition)query,useCache);
  }
 else   if (query instanceof ICubeQueryDefinition) {
    return doExecuteCube(parent,(ICubeQueryDefinition)query,useCache);
  }
 else   if (query instanceof ISubCubeQueryDefinition) {
    return doExecuteSubCubeQuery((ICubeResultSet)parent,(ISubCubeQueryDefinition)query);
  }
  throw new EngineException(MessageConstants.UNSUPPORTED_QUERY_TYPE_ERROR,query.getClass().getName());
}",0.9366823652537938
72760,"public String getCellIndex(){
  try {
    cellId=CubeUtil.getPositionID(cube);
  }
 catch (  OLAPException e) {
    context.addException(new EngineException(""String_Node_Str"",e));
  }
  return cellId;
}","public String getCellIndex(){
  try {
    cellId=CubeUtil.getPositionID(cube);
  }
 catch (  OLAPException e) {
    context.addException(new EngineException(MessageConstants.CUBE_POSITION_ERROR,e));
  }
  return cellId;
}",0.8841607565011821
72761,"public void skipTo(String cellIndex) throws BirtException {
  try {
    CubeUtil.positionCursor(cube,cellIndex);
  }
 catch (  OLAPException e) {
    throw new EngineException(""String_Node_Str"",e);
  }
}","public void skipTo(String cellIndex) throws BirtException {
  try {
    CubeUtil.positionCursor(cube,cellIndex);
  }
 catch (  OLAPException e) {
    throw new EngineException(MessageConstants.SKIP_ERROR,e);
  }
}",0.903846153846154
72762,"/** 
 * Get cached data set item model. If none is cached, return null;
 * @param ds
 * @param columns
 */
public DataSetViewData[] getCachedDataSetItemModel(DataSetHandle ds){
  DataSetViewData[] result=(DataSetViewData[])this.htColumns.get(ds);
  if (result == null) {
    DataRequestSession session;
    try {
      DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,ds.getModuleHandle());
      session=DataRequestSession.newSession(context);
      result=this.populateAllOutputColumns(ds,session);
      return result;
    }
 catch (    BirtException e) {
      result=new DataSetViewData[0];
    }
  }
  return result;
}","/** 
 * Get cached data set item model. If none is cached, return null;
 * @param ds
 * @param columns
 */
public DataSetViewData[] getCachedDataSetItemModel(DataSetHandle ds){
  DataSetViewData[] result=(DataSetViewData[])this.htColumns.get(ds);
  if (result == null) {
    DataRequestSession session;
    try {
      DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,ds.getModuleHandle());
      session=DataRequestSession.newSession(context);
      result=this.populateAllOutputColumns(ds,session);
      session.shutdown();
      return result;
    }
 catch (    BirtException e) {
      result=new DataSetViewData[0];
    }
  }
  return result;
}",0.9809384164222874
72763,"protected void createDocument(){
  try {
    IDocArchiveWriter archive=new FileArchiveWriter(REPORT_DOCUMENT);
    ReportDocumentWriter document=new ReportDocumentWriter(engine,archive);
    ReportRunnable runnable=(ReportRunnable)engine.openReportDesign(REPORT_DESIGN);
    Report reportIR=new ReportParser().parse((ReportDesignHandle)runnable.getDesignHandle());
    document.saveDesign(runnable,null,reportIR);
    HashMap parameters=createParamters();
    document.saveParamters(parameters);
    TOCTree tocTree=createTOC();
    document.saveTOC(tocTree);
    HashMap bookmarks=createBookmarks();
    document.saveBookmarks(bookmarks);
    Map map=createPersistentObjects();
    document.savePersistentObjects(map);
    document.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}","protected void createDocument(){
  try {
    IDocArchiveWriter archive=new FileArchiveWriter(REPORT_DOCUMENT);
    ReportDocumentWriter document=new ReportDocumentWriter(engine,archive);
    ReportRunnable runnable=(ReportRunnable)engine.openReportDesign(REPORT_DESIGN);
    Report reportIR=new ReportParser().parse((ReportDesignHandle)runnable.getDesignHandle());
    document.saveDesign(runnable,null);
    document.saveReportIR(reportIR);
    HashMap parameters=createParamters();
    document.saveParamters(parameters);
    TOCTree tocTree=createTOC();
    document.saveTOC(tocTree);
    HashMap bookmarks=createBookmarks();
    document.saveBookmarks(bookmarks);
    Map map=createPersistentObjects();
    document.savePersistentObjects(map);
    document.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}",0.9819059107358264
72764,"/** 
 * save the design into the stream.
 * @param design design handler
 */
public ReportRunnable saveDesign(ReportRunnable runnable,ReportRunnable originalRunnable,Report reportIR){
  RAOutputStream out=null;
  ReportRunnable newRunnable=runnable;
  try {
    if (originalRunnable != null && runnable != originalRunnable) {
      ReportDesignHandle design=runnable.getReport();
      out=archive.createRandomAccessStream(ORIGINAL_DESIGN_STREAM);
      DocumentUtil.serialize(design,out);
    }
    ReportDesignHandle design=runnable.getReport();
    out=archive.createRandomAccessStream(DESIGN_STREAM);
    ReportDesignHandle newDesign=DocumentUtil.serialize(design,out);
    designName=design.getFileName();
    newRunnable=new ReportRunnable(newDesign);
    newRunnable.setReportEngine(engine);
    newRunnable.setReportName(runnable.getReportName());
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception ex) {
      }
    }
    out=null;
  }
  try {
    out=archive.createRandomAccessStream(DESIGN_IR_STREAM);
    new EngineIRWriter().write(out,reportIR);
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception ex) {
      }
    }
  }
  return newRunnable;
}","/** 
 * save the design into the stream.
 * @param design design handler
 */
public ReportRunnable saveDesign(ReportRunnable runnable,ReportRunnable originalRunnable){
  RAOutputStream out=null;
  ReportRunnable newRunnable=runnable;
  try {
    if (originalRunnable != null && runnable != originalRunnable) {
      ReportDesignHandle design=runnable.getReport();
      out=archive.createRandomAccessStream(ORIGINAL_DESIGN_STREAM);
      DocumentUtil.serialize(design,out);
    }
    ReportDesignHandle design=runnable.getReport();
    out=archive.createRandomAccessStream(DESIGN_STREAM);
    ReportDesignHandle newDesign=DocumentUtil.serialize(design,out);
    designName=design.getFileName();
    newRunnable=new ReportRunnable(newDesign);
    newRunnable.setReportEngine(engine);
    newRunnable.setReportName(runnable.getReportName());
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception ex) {
      }
    }
    out=null;
  }
  return newRunnable;
}",0.8524720893141946
72765,"/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  doValidateParameters();
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  try {
    ReportRunnable newRunnable=writer.saveDesign(executionContext.getRunnable(),executionContext.getOriginalRunnable(),executionContext.getReport());
    executionContext.updateRunnable(newRunnable);
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      IReportExecutor executor=new ReportExecutor(executionContext);
      executor=new ReportEmitterExecutor(executor,emitter);
      executor=new SuppressDuplciateReportExecutor(executor);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(""String_Node_Str"",t);
  }
 finally {
    documentBuilder=null;
    closeFactory();
    writer.savePersistentObjects(executionContext.getGlobalBeans());
    closeReportDocument();
    if (pageHandler != null && !executionContext.isCanceled()) {
      int totalPage=(int)executionContext.getTotalPage();
      IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,totalPage,true);
      pageHandler.onPage(totalPage,true,docInfo);
    }
  }
}","/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  doValidateParameters();
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  try {
    ReportRunnable newRunnable=writer.saveDesign(executionContext.getRunnable(),executionContext.getOriginalRunnable());
    executionContext.updateRunnable(newRunnable);
    writer.saveReportIR(executionContext.getReport());
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      IReportExecutor executor=new ReportExecutor(executionContext);
      executor=new ReportEmitterExecutor(executor,emitter);
      executor=new SuppressDuplciateReportExecutor(executor);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(""String_Node_Str"",t);
  }
 finally {
    documentBuilder=null;
    closeFactory();
    writer.savePersistentObjects(executionContext.getGlobalBeans());
    closeReportDocument();
    if (pageHandler != null && !executionContext.isCanceled()) {
      int totalPage=(int)executionContext.getTotalPage();
      IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,totalPage,true);
      pageHandler.onPage(totalPage,true,docInfo);
    }
  }
}",0.9717211116528522
72766,"public void updateRunnable(IReportRunnable newRunnable){
  if (originalRunnable == null) {
    this.originalRunnable=this.runnable;
  }
  this.runnable=(ReportRunnable)newRunnable;
}","public void updateRunnable(IReportRunnable newRunnable){
  if (originalRunnable == null) {
    this.originalRunnable=this.runnable;
  }
  this.runnable=(ReportRunnable)newRunnable;
  reportIR=null;
}",0.9553805774278216
72767,"public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
switch (content.getContentType()) {
case IContent.TABLE_CONTENT:
    IContent[] contentList=currentBuffer.getContentStack();
  nestCount--;
if (currentTableIndex == nestCount + 1 && currentTableIndex > 0) {
  assert(buffers != null);
  for (int i=0; i < buffers.length - 1; i++) {
    buffers[i].closePage(contentList,emitter);
  }
  buffers[buffers.length - 1].endContainer(content,finished,emitter,visible);
  context.getBufferFactory().refresh();
  currentBuffer=buffers[buffers.length - 1];
  buffers=null;
}
 else {
  currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.TABLE_GROUP_CONTENT:
case IContent.TABLE_BAND_CONTENT:
case IContent.ROW_CONTENT:
if (currentTableIndex == nestCount) {
endContainerInPages(content,finished,emitter,visible);
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.CELL_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
int pageIndex=needPageBreak((ICellContent)content);
if (pageIndex >= 0) {
currentBuffer.endContainer(content,false,emitter,visible);
currentBuffer=buffers[pageIndex];
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.PAGE_CONTENT:
currentBuffer.endContainer(content,finished,emitter,visible);
context.getBufferFactory().refresh();
break;
default :
currentBuffer.endContainer(content,finished,emitter,visible);
break;
}
}","public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
switch (content.getContentType()) {
case IContent.TABLE_CONTENT:
    IContent[] contentList=currentBuffer.getContentStack();
  nestCount--;
if (currentTableIndex == nestCount + 1 && currentTableIndex > 0) {
  assert(buffers != null);
  for (int i=0; i < buffers.length - 1; i++) {
    buffers[i].closePage(contentList,emitter);
  }
  buffers[buffers.length - 1].endContainer(content,finished,emitter,visible);
  context.getBufferFactory().refresh();
  currentBuffer=buffers[buffers.length - 1];
  buffers=null;
  currentTableIndex=-1;
}
 else {
  currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.TABLE_GROUP_CONTENT:
case IContent.TABLE_BAND_CONTENT:
case IContent.ROW_CONTENT:
if (currentTableIndex == nestCount) {
endContainerInPages(content,finished,emitter,visible);
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.CELL_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
int pageIndex=needPageBreak((ICellContent)content);
if (pageIndex >= 0) {
currentBuffer.endContainer(content,false,emitter,visible);
currentBuffer=buffers[pageIndex];
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
}
 else {
currentBuffer.endContainer(content,finished,emitter,visible);
}
break;
case IContent.PAGE_CONTENT:
currentBuffer.endContainer(content,finished,emitter,visible);
context.getBufferFactory().refresh();
break;
default :
currentBuffer.endContainer(content,finished,emitter,visible);
break;
}
}",0.9925326695706284
72768,"public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter,boolean visible){
switch (content.getContentType()) {
case IContent.TABLE_CONTENT:
    nestCount++;
  ITableContent table=(ITableContent)content;
boolean hasPageBreak=hasPageBreak(table);
if (hasPageBreak) {
if (currentTableIndex < 0) {
  IContent[] contentList=currentBuffer.getContentStack();
  pageBreakIndexs=getPageBreakIndex(table);
  currentBuffer.startContainer(createTable(table,pageBreakIndexs,0),isFirst,emitter,visible);
  currentTableIndex=nestCount;
  buffers=new IPageBuffer[pageBreakIndexs.length];
  buffers[0]=currentBuffer;
  String tableId=table.getInstanceID().toUniqueString();
  currentBuffer.addTableColumnHint(new TableColumnHint(tableId,0,pageBreakIndexs[0] + 1));
  for (int i=1; i < pageBreakIndexs.length; i++) {
    buffers[i]=new TableBreakBuffer(null,context);
    IContent[] list=new IContent[contentList.length + 1];
    list[0]=createTable(table,pageBreakIndexs,i);
    for (int j=0; j < contentList.length; j++) {
      list[j + 1]=contentList[j];
    }
    buffers[i].openPage(list,emitter);
    buffers[i].addTableColumnHint(new TableColumnHint(tableId,pageBreakIndexs[i - 1] + 1,pageBreakIndexs[i] - pageBreakIndexs[i - 1]));
  }
}
 else {
  currentBuffer.startContainer(content,isFirst,emitter,visible);
}
}
 else {
currentBuffer.startContainer(content,isFirst,emitter,visible);
}
break;
case IContent.TABLE_GROUP_CONTENT:
case IContent.TABLE_BAND_CONTENT:
case IContent.ROW_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
currentIndex=0;
currentBuffer=buffers[0];
startContainerInPages(content,isFirst,emitter,visible);
}
 else {
currentBuffer.startContainer(content,isFirst,emitter,visible);
}
break;
default :
currentBuffer.startContainer(content,isFirst,emitter,visible);
break;
}
}","public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter,boolean visible){
switch (content.getContentType()) {
case IContent.TABLE_CONTENT:
    nestCount++;
  ITableContent table=(ITableContent)content;
boolean hasPageBreak=hasPageBreak(table);
if (hasPageBreak) {
if (currentTableIndex < 0) {
  IContent[] contentList=currentBuffer.getContentStack();
  pageBreakIndexs=getPageBreakIndex(table);
  currentBuffer.startContainer(createTable(table,pageBreakIndexs,0),isFirst,emitter,visible);
  currentTableIndex=nestCount;
  buffers=new IPageBuffer[pageBreakIndexs.length];
  buffers[0]=currentBuffer;
  String tableId=table.getInstanceID().toUniqueString();
  currentBuffer.addTableColumnHint(new TableColumnHint(tableId,0,pageBreakIndexs[0] + 1));
  for (int i=1; i < pageBreakIndexs.length; i++) {
    buffers[i]=new TableBreakBuffer(null,context);
    IContent[] list=new IContent[contentList.length + 1];
    list[0]=createTable(table,pageBreakIndexs,i);
    for (int j=0; j < contentList.length; j++) {
      list[j + 1]=contentList[j];
    }
    buffers[i].openPage(list,emitter);
    buffers[i].addTableColumnHint(new TableColumnHint(tableId,pageBreakIndexs[i - 1] + 1,pageBreakIndexs[i] - pageBreakIndexs[i - 1]));
  }
}
 else {
  currentBuffer.startContainer(content,isFirst,emitter,visible);
}
}
 else {
currentBuffer.startContainer(content,isFirst,emitter,visible);
}
break;
case IContent.TABLE_GROUP_CONTENT:
case IContent.TABLE_BAND_CONTENT:
case IContent.ROW_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
currentIndex=0;
currentBuffer=buffers[0];
startContainerInPages(content,isFirst,emitter,visible);
}
 else {
currentBuffer.startContainer(content,isFirst,emitter,visible);
}
break;
case IContent.CELL_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
currentIndex=getPageIndex((ICellContent)content);
currentBuffer=buffers[currentIndex];
}
currentBuffer.startContainer(content,isFirst,emitter,visible);
break;
default :
currentBuffer.startContainer(content,isFirst,emitter,visible);
break;
}
}",0.9321082184788158
72769,"private void initParameters(){
  Properties propertys=System.getProperties();
  Iterator itor=propertys.keySet().iterator();
  while (itor.hasNext()) {
    String str=(String)itor.next();
    if (str.startsWith(ATTR_PARAMRTER)) {
      addParameter(paramValues,str,propertys.getProperty(str));
    }
  }
}","private void initParameters(){
  Properties propertys=System.getProperties();
  Iterator itor=propertys.keySet().iterator();
  while (itor.hasNext()) {
    String str=(String)itor.next();
    if (str.startsWith(ATTR_PARAMRTER)) {
      addParameter(paramValues,str,propertys.getProperty(str));
    }
 else     if (str.startsWith(ATTR_MULPARAMRTER + ""String_Node_Str"")) {
      addMulitipleParameter(paramValues,str,propertys.getProperty(str));
    }
  }
}",0.8026315789473685
72770,"void addParameterArgs(List list){
  Iterator iterator=paramValues.keySet().iterator();
  while (iterator.hasNext()) {
    String key=(String)iterator.next();
    String value=String.valueOf(paramValues.get(key));
    StringBuffer buff=new StringBuffer();
    buff.append(""String_Node_Str"");
    buff.append(ATTR_PARAMRTER);
    buff.append(key);
    buff.append(""String_Node_Str"");
    buff.append(value);
    list.add(buff.toString());
  }
}","void addParameterArgs(List list){
  Iterator iterator=paramValues.keySet().iterator();
  while (iterator.hasNext()) {
    String key=(String)iterator.next();
    Object obj=paramValues.get(key);
    if (obj instanceof Object[]) {
      Object[] temp=(Object[])obj;
      for (int i=0; i < temp.length; i++) {
        String value=String.valueOf(temp[i]);
        StringBuffer buff=new StringBuffer();
        buff.append(""String_Node_Str"");
        buff.append(ATTR_MULPARAMRTER);
        buff.append(i);
        buff.append(key);
        buff.append(""String_Node_Str"");
        buff.append(value);
        list.add(buff.toString());
      }
    }
 else {
      String value=String.valueOf(paramValues.get(key));
      StringBuffer buff=new StringBuffer();
      buff.append(""String_Node_Str"");
      buff.append(ATTR_PARAMRTER);
      buff.append(key);
      buff.append(""String_Node_Str"");
      buff.append(value);
      list.add(buff.toString());
    }
  }
}",0.5484330484330484
72771,"public void select(){
  if (container.isSelect() && getCurrentInput().isMouseButtonDown(3)) {
    return;
  }
  TableEditPart part=(TableEditPart)getSourceEditPart();
  part.selectColumn(new int[]{getNumber()});
}","public void select(){
  if (container.isSelect() && getCurrentInput().isMouseButtonDown(3)) {
    return;
  }
  TableEditPart part=(TableEditPart)getSourceEditPart();
  if (getCurrentInput().isShiftKeyDown()) {
    int columnNumber=getNumber();
    int number=part.getOriColumnNumber();
    List list=part.getViewer().getSelectedEditParts();
    if (list.size() == 0) {
      number=1;
    }
    EditPart child=(EditPart)list.get(0);
    if (!(child.getModel() instanceof org.eclipse.birt.report.model.api.ColumnHandle) || !((org.eclipse.birt.report.model.api.ColumnHandle)child.getModel()).getContainer().equals(part.getModel())) {
      number=1;
    }
    selectColumns(number,columnNumber);
  }
 else {
    part.selectColumn(new int[]{getNumber()});
    part.setOriColumnNumber(getNumber());
  }
}",0.4201183431952662
72772,"public void selectDrag(){
  ColumnHandle handle=(ColumnHandle)getHandleUnderMouse();
  int columnNumber=handle.getColumnNumber();
  int number=getNumber();
  int[] columns=new int[]{};
  for (int i=number; i <= number + Math.abs(number - columnNumber); i++) {
    int lenegth=columns.length;
    int[] temp=new int[lenegth + 1];
    System.arraycopy(columns,0,temp,0,lenegth);
    temp[lenegth]=number > columnNumber ? number - (i - number) : i;
    columns=temp;
  }
  if (columns.length > 0) {
    TableEditPart tableEditpart=(TableEditPart)getSourceEditPart();
    tableEditpart.selectColumn(columns);
  }
}","public void selectDrag(){
  ColumnHandle handle=(ColumnHandle)getHandleUnderMouse();
  int columnNumber=handle.getColumnNumber();
  int number=getNumber();
  selectColumns(number,columnNumber);
}",0.4670807453416149
72773,"private void checkDataType(Query query,Series series){
  String expression=query.getDefinition();
  Axis axis=null;
  for (EObject o=query; o != null; ) {
    o=o.eContainer();
    if (o instanceof Axis) {
      axis=(Axis)o;
      break;
    }
  }
  Collection cRegisteredEntries=ChartUIExtensionsImpl.instance().getSeriesUIComponents();
  Iterator iterEntries=cRegisteredEntries.iterator();
  String sSeries=null;
  while (iterEntries.hasNext()) {
    ISeriesUIProvider provider=(ISeriesUIProvider)iterEntries.next();
    sSeries=provider.getSeriesClass();
    if (sSeries.equals(series.getClass().getName())) {
      if (getChartModel() instanceof ChartWithAxes) {
        DataType dataType=getDataServiceProvider().getDataType(expression);
        SeriesDefinition baseSD=(SeriesDefinition)(ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0));
        SeriesDefinition orthSD=null;
        orthSD=(SeriesDefinition)series.eContainer();
        boolean hasException=false;
        String aggFunc=null;
        try {
          aggFunc=ChartUtil.getAggregateFuncExpr(orthSD,baseSD);
        }
 catch (        ChartException e) {
          hasException=true;
          WizardBase.showException(e.getLocalizedMessage());
        }
        if (!hasException) {
          WizardBase.removeException();
        }
        if (baseSD != orthSD && baseSD.eContainer() != axis && ChartUtil.isMagicAggregate(aggFunc)) {
          dataType=DataType.NUMERIC_LITERAL;
        }
        if (isValidatedAxis(dataType,axis.getType())) {
          break;
        }
        AxisType[] axisTypes=provider.getCompatibleAxisType(series);
        int[] validationIndex=provider.validationIndex(series);
        boolean needValidate=false;
        for (int i=0; i < validationIndex.length; i++) {
          if (query == series.getDataDefinition().get(i)) {
            needValidate=true;
            break;
          }
        }
        if (needValidate) {
          for (int i=0; i < axisTypes.length; i++) {
            if (isValidatedAxis(dataType,axisTypes[i])) {
              axisNotification(axis,axisTypes[i]);
              axis.setType(axisTypes[i]);
              break;
            }
          }
        }
      }
      boolean bException=false;
      try {
        provider.validateSeriesBindingType(series,getDataServiceProvider());
      }
 catch (      ChartException ce) {
        bException=true;
        WizardBase.showException(Messages.getFormattedString(""String_Node_Str"",new String[]{ce.getLocalizedMessage(),series.getDisplayName()}));
        if (ce.getMessage().endsWith(expression)) {
          ChartAdapter.beginIgnoreNotifications();
          query.setDefinition(""String_Node_Str"");
          ChartAdapter.endIgnoreNotifications();
        }
      }
      if (!bException) {
        WizardBase.removeException();
      }
      break;
    }
  }
}","private void checkDataType(Query query,Series series){
  String expression=query.getDefinition();
  Axis axis=null;
  for (EObject o=query; o != null; ) {
    o=o.eContainer();
    if (o instanceof Axis) {
      axis=(Axis)o;
      break;
    }
  }
  Collection cRegisteredEntries=ChartUIExtensionsImpl.instance().getSeriesUIComponents();
  Iterator iterEntries=cRegisteredEntries.iterator();
  String sSeries=null;
  while (iterEntries.hasNext()) {
    ISeriesUIProvider provider=(ISeriesUIProvider)iterEntries.next();
    sSeries=provider.getSeriesClass();
    if (sSeries.equals(series.getClass().getName())) {
      if (getChartModel() instanceof ChartWithAxes) {
        DataType dataType=getDataServiceProvider().getDataType(expression);
        SeriesDefinition baseSD=(SeriesDefinition)(ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0));
        SeriesDefinition orthSD=null;
        orthSD=(SeriesDefinition)series.eContainer();
        boolean hasException=false;
        String aggFunc=null;
        try {
          aggFunc=ChartUtil.getAggregateFuncExpr(orthSD,baseSD);
        }
 catch (        ChartException e) {
          hasException=true;
          WizardBase.showException(e.getLocalizedMessage());
        }
        if (!hasException) {
          WizardBase.removeException();
        }
        if (baseSD != orthSD && baseSD.eContainer() != axis && ChartUtil.isMagicAggregate(aggFunc)) {
          dataType=DataType.NUMERIC_LITERAL;
        }
        if (isValidatedAxis(dataType,axis.getType())) {
          break;
        }
        AxisType[] axisTypes=provider.getCompatibleAxisType(series);
        int[] validationIndex=provider.validationIndex(series);
        boolean needValidate=false;
        for (int i=0; i < validationIndex.length; i++) {
          if (query == series.getDataDefinition().get(i)) {
            needValidate=true;
            break;
          }
        }
        SeriesDefinition sd=(SeriesDefinition)series.eContainer();
        if (((Axis)sd.eContainer()).getSeriesDefinitions().indexOf(sd) > 0) {
          needValidate=false;
        }
        if (needValidate) {
          for (int i=0; i < axisTypes.length; i++) {
            if (isValidatedAxis(dataType,axisTypes[i])) {
              axisNotification(axis,axisTypes[i]);
              axis.setType(axisTypes[i]);
              break;
            }
          }
        }
      }
      boolean bException=false;
      try {
        provider.validateSeriesBindingType(series,getDataServiceProvider());
      }
 catch (      ChartException ce) {
        bException=true;
        WizardBase.showException(Messages.getFormattedString(""String_Node_Str"",new String[]{ce.getLocalizedMessage(),series.getDisplayName()}));
        if (ce.getMessage().endsWith(expression)) {
          ChartAdapter.beginIgnoreNotifications();
          query.setDefinition(""String_Node_Str"");
          ChartAdapter.endIgnoreNotifications();
        }
      }
      if (!bException) {
        WizardBase.removeException();
      }
      break;
    }
  }
}",0.9687024192184064
72774,"public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_LEGEND);
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Group cmpBasic=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(3,false);
    layout.marginWidth=10;
    layout.marginHeight=10;
    cmpBasic.setLayout(layout);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpBasic.setLayoutData(gd);
    cmpBasic.setText(Messages.getString(""String_Node_Str""));
  }
  btnVisible=new Button(cmpBasic,SWT.CHECK);
{
    GridData gdBTNVisible=new GridData();
    gdBTNVisible.horizontalSpan=3;
    btnVisible.setLayoutData(gdBTNVisible);
    btnVisible.setText(Messages.getString(""String_Node_Str""));
    btnVisible.setSelection(getChart().getLegend().isVisible());
    btnVisible.addSelectionListener(this);
  }
  lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),getChart().getLegend().getTitle().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=180;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
    btnTitleVisible.addSelectionListener(this);
    btnTitleVisible.setSelection(getChart().getLegend().getTitle().isVisible());
  }
  lblLegendBehavior=new Label(cmpBasic,SWT.NONE);
{
    lblLegendBehavior.setText(Messages.getString(""String_Node_Str""));
  }
  cmbLegendBehavior=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gridData=new GridData();
    gridData.widthHint=150;
    cmbLegendBehavior.setLayoutData(gridData);
    cmbLegendBehavior.addSelectionListener(this);
  }
  new Label(cmpBasic,SWT.NONE);
  if (isShowValueEnabled()) {
    lblShowValue=new Label(cmpBasic,SWT.NONE);
    lblShowValue.setText(Messages.getString(""String_Node_Str""));
    btnShowValue=new Button(cmpBasic,SWT.CHECK);
{
      GridData gdShowValue=new GridData();
      gdShowValue.horizontalSpan=2;
      btnShowValue.setLayoutData(gdShowValue);
      btnShowValue.setText(Messages.getString(""String_Node_Str""));
      btnShowValue.setToolTipText(Messages.getString(""String_Node_Str""));
      btnShowValue.addSelectionListener(this);
      btnShowValue.setSelection(getChart().getLegend().isShowValue());
    }
  }
  populateLists();
  createButtonGroup(cmpContent);
  setState(getChart().getLegend().isVisible());
}","public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_LEGEND);
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Group cmpBasic=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(3,false);
    layout.marginWidth=10;
    layout.marginHeight=10;
    cmpBasic.setLayout(layout);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpBasic.setLayoutData(gd);
    cmpBasic.setText(Messages.getString(""String_Node_Str""));
  }
  btnVisible=new Button(cmpBasic,SWT.CHECK);
{
    GridData gdBTNVisible=new GridData();
    gdBTNVisible.horizontalSpan=3;
    btnVisible.setLayoutData(gdBTNVisible);
    btnVisible.setText(Messages.getString(""String_Node_Str""));
    btnVisible.setSelection(getChart().getLegend().isVisible());
    btnVisible.addSelectionListener(this);
  }
  lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),getChart().getLegend().getTitle().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=180;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
    btnTitleVisible.addSelectionListener(this);
    btnTitleVisible.setSelection(getChart().getLegend().getTitle().isVisible());
  }
  lblLegendBehavior=new Label(cmpBasic,SWT.NONE);
{
    lblLegendBehavior.setText(Messages.getString(""String_Node_Str""));
  }
  cmbLegendBehavior=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gridData=new GridData();
    gridData.widthHint=150;
    cmbLegendBehavior.setLayoutData(gridData);
    cmbLegendBehavior.addSelectionListener(this);
    cmbLegendBehavior.setEnabled(getChart().getInteractivity().isEnable());
  }
  new Label(cmpBasic,SWT.NONE);
  if (isShowValueEnabled()) {
    lblShowValue=new Label(cmpBasic,SWT.NONE);
    lblShowValue.setText(Messages.getString(""String_Node_Str""));
    btnShowValue=new Button(cmpBasic,SWT.CHECK);
{
      GridData gdShowValue=new GridData();
      gdShowValue.horizontalSpan=2;
      btnShowValue.setLayoutData(gdShowValue);
      btnShowValue.setText(Messages.getString(""String_Node_Str""));
      btnShowValue.setToolTipText(Messages.getString(""String_Node_Str""));
      btnShowValue.addSelectionListener(this);
      btnShowValue.setSelection(getChart().getLegend().isShowValue());
    }
  }
  populateLists();
  createButtonGroup(cmpContent);
  setState(getChart().getLegend().isVisible());
}",0.9870836165873556
72775,"public void visitColumn(ColumnHandle handle){
  ColumnDesign col=new ColumnDesign();
  setupStyledElement(col,handle);
  col.setColumnHeaderState(false);
  DimensionType width=createDimension(handle.getWidth(),false);
  col.setWidth(width);
  boolean supress=handle.suppressDuplicates();
  col.setSuppressDuplicate(supress);
  VisibilityDesign visibility=createVisibility(handle.visibilityRulesIterator());
  col.setVisibility(visibility);
  setCurrentElement(col);
}","public void visitColumn(ColumnHandle handle){
  ColumnDesign col=new ColumnDesign();
  setupReportElement(col,handle);
  StyleDeclaration style=this.createColumnStyle(handle);
  if (style != null && !style.isEmpty()) {
    col.setStyleName(assignStyleName(style));
  }
  col.setColumnHeaderState(false);
  DimensionType width=createDimension(handle.getWidth(),false);
  col.setWidth(width);
  boolean supress=handle.suppressDuplicates();
  col.setSuppressDuplicate(supress);
  VisibilityDesign visibility=createVisibility(handle.visibilityRulesIterator());
  col.setVisibility(visibility);
  setCurrentElement(col);
}",0.8247232472324724
72776,"public ColumnWidthResolver(ITableContent table){
  this.table=table;
  String tableId=table.getInstanceID().toUniqueString();
  TableColumnHint hint=PDFTableLM.this.context.getTableColumnHint(tableId);
  if (hint != null) {
    start=hint.getStart();
    end=hint.getColumnCount() + start;
  }
 else {
    start=0;
    end=table.getColumnCount();
  }
}","public ColumnWidthResolver(ITableContent table){
  this.table=table;
  TableColumnHint hint=null;
  InstanceID id=table.getInstanceID();
  if (id != null) {
    String tableId=id.toUniqueString();
    hint=PDFTableLM.this.context.getTableColumnHint(tableId);
  }
  if (hint != null) {
    start=hint.getStart();
    end=hint.getColumnCount() + start;
  }
 else {
    start=0;
    end=table.getColumnCount();
  }
}",0.8261437908496732
72777,"protected void verticalAlign(){
  Iterator iter=root.getChildren();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    IStyle childStyle=child.getStyle();
    String vAlign=childStyle.getVerticalAlign();
    if (childStyle == null) {
      continue;
    }
    if (CSSConstants.CSS_BASELINE_VALUE.equalsIgnoreCase(vAlign)) {
      child.setPosition(child.getX(),child.getY() + getMaxBaseLine() - child.getBaseLine());
    }
 else {
      int spacing=root.getHeight() - child.getAllocatedHeight();
      if (spacing < 0) {
        spacing=0;
      }
      if (CSSConstants.CSS_BOTTOM_VALUE.equalsIgnoreCase(vAlign)) {
        child.setPosition(child.getX(),spacing + child.getY());
      }
 else       if (CSSConstants.CSS_MIDDLE_VALUE.equalsIgnoreCase(vAlign)) {
        child.setPosition(child.getX(),spacing / 2 + child.getY());
      }
 else {
        int lineHeight=((PDFBlockStackingLM)parent).getLineHeight();
        if (lineHeight > 0) {
          child.setPosition(child.getX(),spacing / 2 + child.getY());
        }
      }
    }
  }
}","protected void verticalAlign(){
  Iterator iter=root.getChildren();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    IStyle childStyle=child.getStyle();
    String vAlign=childStyle.getVerticalAlign();
    if (childStyle == null) {
      continue;
    }
    int spacing=root.getHeight() - child.getAllocatedHeight();
    if (spacing < 0) {
      spacing=0;
    }
    if (CSSConstants.CSS_BASELINE_VALUE.equalsIgnoreCase(vAlign)) {
      int lineHeight=((PDFStackingLM)parent).getLineHeight();
      if (lineHeight > 0) {
        child.setPosition(child.getX(),child.getY() + getMaxBaseLine() - child.getBaseLine() + spacing / 2);
      }
 else {
        child.setPosition(child.getX(),child.getY() + getMaxBaseLine() - child.getBaseLine());
      }
    }
 else     if (CSSConstants.CSS_BOTTOM_VALUE.equalsIgnoreCase(vAlign)) {
      child.setPosition(child.getX(),spacing + child.getY());
    }
 else     if (CSSConstants.CSS_MIDDLE_VALUE.equalsIgnoreCase(vAlign)) {
      child.setPosition(child.getX(),spacing / 2 + child.getY());
    }
  }
}",0.7190697674418605
72778,"private int getMaxBaseLine(){
  if (maxBaseLine == 0) {
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      maxBaseLine=Math.max(maxBaseLine,child.getBaseLine());
    }
  }
  return maxBaseLine;
}","/** 
 * Calculates the max baseline, and update the root height if necessary.
 * @return the max baseline.
 */
private int getMaxBaseLine(){
  int maxChildrenBaseLine=root.getMaxChildrenBaseLine();
  if (maxChildrenBaseLine == 0) {
    Iterator iter=root.getChildren();
    int maxChildrenBaseLineBelow=root.getMaxChildrenBaseLineBelow();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      maxChildrenBaseLine=Math.max(maxChildrenBaseLine,child.getBaseLine());
      maxChildrenBaseLineBelow=Math.max(maxChildrenBaseLineBelow,child.getAllocatedHeight() - child.getBaseLine());
    }
    root.setContentHeight(Math.max(root.getContentHeight(),maxChildrenBaseLine + maxChildrenBaseLineBelow));
    root.setMaxChildrenBaseLine(maxChildrenBaseLine);
    root.setMaxChildrenBaseLineBelow(maxChildrenBaseLineBelow);
  }
  return maxChildrenBaseLine;
}",0.4678260869565217
72779,"/** 
 * Rebuilds model base on editor input.
 */
public Object getAdapter(Class type){
  if (type == IContentOutlinePage.class) {
    DesignerOutlinePage outlinePage=new DesignerOutlinePage(getModel());
    manager.addModelEventProcessor(outlinePage.getModelProcessor());
    return outlinePage;
  }
  if (type == IPropertySheetPage.class) {
    ReportPropertySheetPage sheetPage=new ReportPropertySheetPage();
    return sheetPage;
  }
  if (type == DataViewPage.class) {
    DataViewTreeViewerPage page=new DataViewTreeViewerPage(getModel());
    manager.addModelEventProcessor(page.getModelProcessor());
    return page;
  }
  if (type == AttributeViewPage.class) {
    AttributeViewPage page=new AttributeViewPage();
    return page;
  }
  if (type == ModelEventManager.class) {
    return manager;
  }
  return super.getAdapter(type);
}","/** 
 * Rebuilds model base on editor input.
 */
public Object getAdapter(Class type){
  if (type == IContentOutlinePage.class) {
    DesignerOutlinePage outlinePage=new DesignerOutlinePage(getModel());
    manager.addModelEventProcessor(outlinePage.getModelProcessor());
    return outlinePage;
  }
  if (type == IPropertySheetPage.class) {
    ReportPropertySheetPage sheetPage=new ReportPropertySheetPage(getModel());
    return sheetPage;
  }
  if (type == DataViewPage.class) {
    DataViewTreeViewerPage page=new DataViewTreeViewerPage(getModel());
    manager.addModelEventProcessor(page.getModelProcessor());
    return page;
  }
  if (type == AttributeViewPage.class) {
    AttributeViewPage page=new AttributeViewPage();
    return page;
  }
  if (type == ModelEventManager.class) {
    return manager;
  }
  return super.getAdapter(type);
}",0.9940898345153664
72780,"public Object getAdapter(Class adapter){
  if (adapter == ActionRegistry.class) {
    return scriptEditor.getActionRegistry();
  }
 else   if (adapter == PalettePage.class) {
    if (cmbExprListViewer != null) {
      cmbExprListViewer.addSelectionChangedListener(palettePage.getSupport());
    }
    return palettePage;
  }
  if (adapter == IContentOutlinePage.class) {
    DesignerOutlinePage outlinePage=new DesignerOutlinePage(SessionHandleAdapter.getInstance().getReportDesignHandle());
    return outlinePage;
  }
  if (adapter == IPropertySheetPage.class) {
    ReportPropertySheetPage sheetPage=new ReportPropertySheetPage();
    return sheetPage;
  }
  if (adapter == DataViewPage.class) {
    DataViewTreeViewerPage page=new DataViewTreeViewerPage(SessionHandleAdapter.getInstance().getReportDesignHandle());
    return page;
  }
  if (adapter == AttributeViewPage.class) {
    AttributeViewPage page=new AttributeViewPage();
    return page;
  }
  if (adapter == ITextEditor.class) {
    return scriptEditor;
  }
  return super.getAdapter(adapter);
}","public Object getAdapter(Class adapter){
  if (adapter == ActionRegistry.class) {
    return scriptEditor.getActionRegistry();
  }
 else   if (adapter == PalettePage.class) {
    if (cmbExprListViewer != null) {
      cmbExprListViewer.addSelectionChangedListener(palettePage.getSupport());
    }
    return palettePage;
  }
  if (adapter == IContentOutlinePage.class) {
    DesignerOutlinePage outlinePage=new DesignerOutlinePage(SessionHandleAdapter.getInstance().getReportDesignHandle());
    return outlinePage;
  }
  if (adapter == IPropertySheetPage.class) {
    ReportPropertySheetPage sheetPage=new ReportPropertySheetPage(SessionHandleAdapter.getInstance().getReportDesignHandle());
    return sheetPage;
  }
  if (adapter == DataViewPage.class) {
    DataViewTreeViewerPage page=new DataViewTreeViewerPage(SessionHandleAdapter.getInstance().getReportDesignHandle());
    return page;
  }
  if (adapter == AttributeViewPage.class) {
    AttributeViewPage page=new AttributeViewPage();
    return page;
  }
  if (adapter == ITextEditor.class) {
    return scriptEditor;
  }
  return super.getAdapter(adapter);
}",0.973394495412844
72781,"/** 
 * Handles all global actions
 */
private void handleGlobalAction(){
  for (int i=0; i < GlobalActionFactory.GLOBAL_STACK_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_STACK_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createStackAction(id,SessionHandleAdapter.getInstance().getCommandStack()));
  }
}","/** 
 * Handles all global actions
 */
private void handleGlobalAction(){
  for (int i=0; i < GlobalActionFactory.GLOBAL_STACK_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_STACK_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createStackAction(id,SessionHandleAdapter.getInstance().getCommandStack(moduleHandle)));
  }
}",0.9839142091152816
72782,"public void createControl(Composite parent){
  container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=layout.marginHeight=0;
  container.setLayout(layout);
  title=new TabbedPropertyTitle(container,FormWidgetFactory.getInstance());
  title.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite viewerContainer=new Composite(container,SWT.NONE);
  layout=new GridLayout();
  layout.marginWidth=10;
  layout.marginHeight=3;
  viewerContainer.setLayout(layout);
  viewerContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
  viewer=new CustomTreeViewer(viewerContainer,SWT.FULL_SELECTION);
  tableTree=viewer.getTree();
  tableTree.setLayoutData(new GridData(GridData.FILL_BOTH));
  tableTree.setHeaderVisible(true);
  tableTree.setLinesVisible(true);
  addColumns();
  contentProvider=new ReportPropertySheetContentProvider();
  viewer.setContentProvider(contentProvider);
  labelProvider=new ReportPropertySheetLabelProvider();
  viewer.setLabelProvider(labelProvider);
  viewer.setColumnProperties(new String[]{COLUMN_TITLE_PROPERTY,COLUMN_TITLE_VALUE});
  AlphabeticallyViewSorter sorter=new AlphabeticallyViewSorter();
  sorter.setAscending(true);
  viewer.setSorter(sorter);
  hookControl();
  tableTreeEditor=new TreeEditor(tableTree);
  createEditorListener();
  handleGlobalAction();
  SessionHandleAdapter.getInstance().getMediator().addColleague(this);
  FormWidgetFactory.getInstance().paintFormStyle(parent);
  FormWidgetFactory.getInstance().adapt(parent);
  IWorkbenchPage page=getSite().getPage();
  MementoBuilder builder=new MementoBuilder();
  if ((propertySheetMemento=builder.getRootMemento().getChild(IPageLayout.ID_PROP_SHEET)) == null) {
    propertySheetMemento=builder.getRootMemento().createChild(IPageLayout.ID_PROP_SHEET,MementoElement.Type_View);
  }
  if ((viewerMemento=propertySheetMemento.getChild(propertyViewerID)) == null) {
    viewerMemento=propertySheetMemento.createChild(propertyViewerID,MementoElement.Type_Viewer);
  }
  handleSelectionChanged(page.getSelection());
}","public void createControl(Composite parent){
  container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=layout.marginHeight=0;
  container.setLayout(layout);
  title=new TabbedPropertyTitle(container,FormWidgetFactory.getInstance());
  title.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite viewerContainer=new Composite(container,SWT.NONE);
  layout=new GridLayout();
  layout.marginWidth=10;
  layout.marginHeight=3;
  viewerContainer.setLayout(layout);
  viewerContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
  viewer=new CustomTreeViewer(viewerContainer,SWT.FULL_SELECTION);
  tableTree=viewer.getTree();
  tableTree.setLayoutData(new GridData(GridData.FILL_BOTH));
  tableTree.setHeaderVisible(true);
  tableTree.setLinesVisible(true);
  addColumns();
  contentProvider=new ReportPropertySheetContentProvider();
  viewer.setContentProvider(contentProvider);
  labelProvider=new ReportPropertySheetLabelProvider();
  viewer.setLabelProvider(labelProvider);
  viewer.setColumnProperties(new String[]{COLUMN_TITLE_PROPERTY,COLUMN_TITLE_VALUE});
  AlphabeticallyViewSorter sorter=new AlphabeticallyViewSorter();
  sorter.setAscending(true);
  viewer.setSorter(sorter);
  hookControl();
  tableTreeEditor=new TreeEditor(tableTree);
  createEditorListener();
  handleGlobalAction();
  SessionHandleAdapter.getInstance().getMediator(moduleHandle).addColleague(this);
  FormWidgetFactory.getInstance().paintFormStyle(parent);
  FormWidgetFactory.getInstance().adapt(parent);
  IWorkbenchPage page=getSite().getPage();
  MementoBuilder builder=new MementoBuilder();
  if ((propertySheetMemento=builder.getRootMemento().getChild(IPageLayout.ID_PROP_SHEET)) == null) {
    propertySheetMemento=builder.getRootMemento().createChild(IPageLayout.ID_PROP_SHEET,MementoElement.Type_View);
  }
  if ((viewerMemento=propertySheetMemento.getChild(propertyViewerID)) == null) {
    viewerMemento=propertySheetMemento.createChild(propertyViewerID,MementoElement.Type_Viewer);
  }
  handleSelectionChanged(page.getSelection());
}",0.9971139971139972
72783,"public void dispose(){
  SessionHandleAdapter.getInstance().getMediator().removeColleague(this);
  unregisterListeners();
  super.dispose();
}","public void dispose(){
  SessionHandleAdapter.getInstance().getMediator(moduleHandle).removeColleague(this);
  unregisterListeners();
  super.dispose();
}",0.9594594594594594
72784,"/** 
 * Returns an object which is an instance of the given class associated with this object. Returns <code>null</code> if no such object can be found.
 * @param adapter the adapter class to look up
 * @return a object castable to the given class, or <code>null</code> ifthis object does not have an adapter for the given class
 */
public Object getAdapter(Class adapter){
  if (adapter == IContentOutlinePage.class) {
    LibraryOutlinePage outline=new LibraryOutlinePage(getModel());
    getModelEventManager().addModelEventProcessor(outline.getModelProcessor());
    return outline;
  }
  if (adapter == DataViewPage.class) {
    DataViewPage page=(DataViewPage)super.getAdapter(adapter);
    if (page == null) {
      return null;
    }
    return page;
  }
  if (adapter == AttributeViewPage.class) {
    AttributeViewPage page=(AttributeViewPage)super.getAdapter(adapter);
    if (page == null) {
      return null;
    }
    return page;
  }
  if (adapter == IPropertySheetPage.class) {
    ReportPropertySheetPage sheetPage=new ReportPropertySheetPage();
    return sheetPage;
  }
  return super.getAdapter(adapter);
}","/** 
 * Returns an object which is an instance of the given class associated with this object. Returns <code>null</code> if no such object can be found.
 * @param adapter the adapter class to look up
 * @return a object castable to the given class, or <code>null</code> ifthis object does not have an adapter for the given class
 */
public Object getAdapter(Class adapter){
  if (adapter == IContentOutlinePage.class) {
    LibraryOutlinePage outline=new LibraryOutlinePage(getModel());
    getModelEventManager().addModelEventProcessor(outline.getModelProcessor());
    return outline;
  }
  if (adapter == DataViewPage.class) {
    DataViewPage page=(DataViewPage)super.getAdapter(adapter);
    if (page == null) {
      return null;
    }
    return page;
  }
  if (adapter == AttributeViewPage.class) {
    AttributeViewPage page=(AttributeViewPage)super.getAdapter(adapter);
    if (page == null) {
      return null;
    }
    return page;
  }
  if (adapter == IPropertySheetPage.class) {
    ReportPropertySheetPage sheetPage=new ReportPropertySheetPage(getModel());
    return sheetPage;
  }
  return super.getAdapter(adapter);
}",0.995583038869258
72785,"private void processChildQuery(IDataQueryDefinition parent,CrosstabCellHandle cell,String emptyVlaue){
  if (cell != null) {
    for (Iterator itr=cell.getContents().iterator(); itr.hasNext(); ) {
      ReportElementHandle handle=(ReportElementHandle)itr.next();
      if (emptyVlaue != null && handle instanceof DataItemHandle) {
        DataItemHandle dataHandle=(DataItemHandle)handle;
        MapRule rule=StructureFactory.createMapRule();
        rule.setTestExpression(ExpressionUtil.createJSDataExpression(dataHandle.getResultSetColumn()));
        rule.setOperator(DesignChoiceConstants.MAP_OPERATOR_NULL);
        rule.setDisplay(emptyVlaue);
        PropertyHandle mapHandle=dataHandle.getPropertyHandle(StyleHandle.MAP_RULES_PROP);
        try {
          mapHandle.addItem(rule);
        }
 catch (        SemanticException e) {
          logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
        }
      }
      context.createQuery(parent,handle);
    }
  }
}","private void processChildQuery(IDataQueryDefinition parent,CrosstabCellHandle cell){
  if (cell != null) {
    for (Iterator itr=cell.getContents().iterator(); itr.hasNext(); ) {
      ReportElementHandle handle=(ReportElementHandle)itr.next();
      context.createQuery(parent,handle);
    }
  }
}",0.4090202177293934
72786,"public IDataQueryDefinition[] createReportQueries(IDataQueryDefinition parent) throws BirtException {
  if (crosstabItem == null) {
    throw new CrosstabException(Messages.getString(""String_Node_Str""));
  }
  IDataQueryDefinition cubeQuery=CrosstabQueryUtil.createCubeQuery(crosstabItem,parent,true,true,true,true,true,true);
  String emptyValue=crosstabItem.getEmptyCellValue();
  if (context != null) {
    processChildQuery(cubeQuery,crosstabItem.getHeader(),emptyValue);
    for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
      MeasureViewHandle mv=crosstabItem.getMeasure(i);
      processChildQuery(cubeQuery,mv.getCell(),emptyValue);
      processChildQuery(cubeQuery,mv.getHeader(),emptyValue);
      for (int j=0; j < mv.getAggregationCount(); j++) {
        processChildQuery(cubeQuery,mv.getAggregationCell(j),emptyValue);
      }
    }
    if (crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
      for (int i=0; i < crosstabItem.getDimensionCount(ROW_AXIS_TYPE); i++) {
        DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,i);
        for (int j=0; j < dv.getLevelCount(); j++) {
          LevelViewHandle lv=dv.getLevel(j);
          processChildQuery(cubeQuery,lv.getCell(),emptyValue);
          processChildQuery(cubeQuery,lv.getAggregationHeader(),emptyValue);
        }
      }
    }
    if (crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
      for (int i=0; i < crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE); i++) {
        DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,i);
        for (int j=0; j < dv.getLevelCount(); j++) {
          LevelViewHandle lv=dv.getLevel(j);
          processChildQuery(cubeQuery,lv.getCell(),emptyValue);
          processChildQuery(cubeQuery,lv.getAggregationHeader(),emptyValue);
        }
      }
    }
    processChildQuery(cubeQuery,crosstabItem.getGrandTotal(ROW_AXIS_TYPE),emptyValue);
    processChildQuery(cubeQuery,crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE),emptyValue);
  }
  return new IDataQueryDefinition[]{cubeQuery};
}","public IDataQueryDefinition[] createReportQueries(IDataQueryDefinition parent) throws BirtException {
  if (crosstabItem == null) {
    throw new CrosstabException(Messages.getString(""String_Node_Str""));
  }
  IDataQueryDefinition cubeQuery=CrosstabQueryUtil.createCubeQuery(crosstabItem,parent,true,true,true,true,true,true);
  if (context != null) {
    processChildQuery(cubeQuery,crosstabItem.getHeader());
    for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
      MeasureViewHandle mv=crosstabItem.getMeasure(i);
      processChildQuery(cubeQuery,mv.getCell());
      processChildQuery(cubeQuery,mv.getHeader());
      for (int j=0; j < mv.getAggregationCount(); j++) {
        processChildQuery(cubeQuery,mv.getAggregationCell(j));
      }
    }
    if (crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
      for (int i=0; i < crosstabItem.getDimensionCount(ROW_AXIS_TYPE); i++) {
        DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,i);
        for (int j=0; j < dv.getLevelCount(); j++) {
          LevelViewHandle lv=dv.getLevel(j);
          processChildQuery(cubeQuery,lv.getCell());
          processChildQuery(cubeQuery,lv.getAggregationHeader());
        }
      }
    }
    if (crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
      for (int i=0; i < crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE); i++) {
        DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,i);
        for (int j=0; j < dv.getLevelCount(); j++) {
          LevelViewHandle lv=dv.getLevel(j);
          processChildQuery(cubeQuery,lv.getCell());
          processChildQuery(cubeQuery,lv.getAggregationHeader());
        }
      }
    }
    processChildQuery(cubeQuery,crosstabItem.getGrandTotal(ROW_AXIS_TYPE));
    processChildQuery(cubeQuery,crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE));
  }
  return new IDataQueryDefinition[]{cubeQuery};
}",0.899492385786802
72787,"@SuppressWarnings(""String_Node_Str"") private void handleCell(CrosstabCellHandle cell) throws BirtException {
  if (cell == null) {
    return;
  }
  ICrosstabCell cellItem=new CrosstabCellImpl(cell);
  handler.callFunction(CrosstabScriptHandler.ON_PREPARE_CELL,cellItem,context);
  for (Iterator itr=cell.getContents().iterator(); itr.hasNext(); ) {
    context.prepare((DesignElementHandle)itr.next());
  }
}","@SuppressWarnings(""String_Node_Str"") private void handleCell(CrosstabCellHandle cell,String emptyVlaue) throws BirtException {
  if (cell == null) {
    return;
  }
  if (handler != null) {
    ICrosstabCell cellItem=new CrosstabCellImpl(cell);
    handler.callFunction(CrosstabScriptHandler.ON_PREPARE_CELL,cellItem,context);
  }
  for (Iterator itr=cell.getContents().iterator(); itr.hasNext(); ) {
    ReportElementHandle handle=(ReportElementHandle)itr.next();
    context.prepare(handle);
    if (emptyVlaue != null && handle instanceof DataItemHandle) {
      DataItemHandle dataHandle=(DataItemHandle)handle;
      MapRule rule=StructureFactory.createMapRule();
      rule.setTestExpression(ExpressionUtil.createJSDataExpression(dataHandle.getResultSetColumn()));
      rule.setOperator(DesignChoiceConstants.MAP_OPERATOR_NULL);
      rule.setDisplay(emptyVlaue);
      PropertyHandle mapHandle=dataHandle.getPropertyHandle(StyleHandle.MAP_RULES_PROP);
      try {
        mapHandle.addItem(rule);
      }
 catch (      SemanticException e) {
        logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
      }
    }
  }
}",0.4690721649484536
72788,"public CrosstabPreparationHandler(CrosstabReportItemHandle crosstab,IPreparationContext context) throws BirtException {
  ExtendedItemHandle modelHandle=(ExtendedItemHandle)crosstab.getModelHandle();
  String javaClass=modelHandle.getEventHandlerClass();
  String script=modelHandle.getOnPrepare();
  if ((javaClass == null || javaClass.trim().length() == 0) && (script == null || script.trim().length() == 0)) {
    return;
  }
  this.crosstab=crosstab;
  this.context=context;
  handler=createScriptHandler(modelHandle,ICrosstabReportItemConstants.ON_PREPARE_METHOD,script,context.getApplicationClassLoader());
}","public CrosstabPreparationHandler(CrosstabReportItemHandle crosstab,IPreparationContext context) throws BirtException {
  ExtendedItemHandle modelHandle=(ExtendedItemHandle)crosstab.getModelHandle();
  String javaClass=modelHandle.getEventHandlerClass();
  String script=modelHandle.getOnPrepare();
  this.crosstab=crosstab;
  this.context=context;
  if ((javaClass == null || javaClass.trim().length() == 0) && (script == null || script.trim().length() == 0)) {
    return;
  }
  handler=createScriptHandler(modelHandle,ICrosstabReportItemConstants.ON_PREPARE_METHOD,script,context.getApplicationClassLoader());
}",0.9185667752442996
72789,"public void handle() throws BirtException {
  if (handler == null) {
    return;
  }
  ICrosstab crosstabItem=new CrosstabImpl(crosstab);
  handler.callFunction(CrosstabScriptHandler.ON_PREPARE_CROSSTAB,crosstabItem,context);
  handleChildren();
}","public void handle() throws BirtException {
  if (handler != null) {
    ICrosstab crosstabItem=new CrosstabImpl(crosstab);
    handler.callFunction(CrosstabScriptHandler.ON_PREPARE_CROSSTAB,crosstabItem,context);
  }
  handleChildren();
}",0.9547325102880658
72790,"private void handleChildren() throws BirtException {
  handleCell(crosstab.getHeader());
  if (crosstab.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
    for (int i=0; i < crosstab.getDimensionCount(COLUMN_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstab.getDimension(COLUMN_AXIS_TYPE,i);
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        handleCell(lv.getCell());
        handleCell(lv.getAggregationHeader());
      }
    }
  }
  handleCell(crosstab.getGrandTotal(COLUMN_AXIS_TYPE));
  if (crosstab.getDimensionCount(ROW_AXIS_TYPE) > 0) {
    for (int i=0; i < crosstab.getDimensionCount(ROW_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstab.getDimension(ROW_AXIS_TYPE,i);
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        handleCell(lv.getCell());
        handleCell(lv.getAggregationHeader());
      }
    }
  }
  handleCell(crosstab.getGrandTotal(ROW_AXIS_TYPE));
  for (int i=0; i < crosstab.getMeasureCount(); i++) {
    MeasureViewHandle mv=crosstab.getMeasure(i);
    handleCell(mv.getHeader());
    handleCell(mv.getCell());
    for (int j=0; j < mv.getAggregationCount(); j++) {
      handleCell(mv.getAggregationCell(j));
    }
  }
}","private void handleChildren() throws BirtException {
  String emptyValue=crosstab.getEmptyCellValue();
  handleCell(crosstab.getHeader(),emptyValue);
  if (crosstab.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
    for (int i=0; i < crosstab.getDimensionCount(COLUMN_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstab.getDimension(COLUMN_AXIS_TYPE,i);
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        handleCell(lv.getCell(),emptyValue);
        handleCell(lv.getAggregationHeader(),emptyValue);
      }
    }
  }
  handleCell(crosstab.getGrandTotal(COLUMN_AXIS_TYPE),emptyValue);
  if (crosstab.getDimensionCount(ROW_AXIS_TYPE) > 0) {
    for (int i=0; i < crosstab.getDimensionCount(ROW_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstab.getDimension(ROW_AXIS_TYPE,i);
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        handleCell(lv.getCell(),emptyValue);
        handleCell(lv.getAggregationHeader(),emptyValue);
      }
    }
  }
  handleCell(crosstab.getGrandTotal(ROW_AXIS_TYPE),emptyValue);
  for (int i=0; i < crosstab.getMeasureCount(); i++) {
    MeasureViewHandle mv=crosstab.getMeasure(i);
    handleCell(mv.getHeader(),emptyValue);
    handleCell(mv.getCell(),emptyValue);
    for (int j=0; j < mv.getAggregationCount(); j++) {
      handleCell(mv.getAggregationCell(j),emptyValue);
    }
  }
}",0.9403430275913496
72791,"protected void writeComments(HyperlinkDef linkDef){
  String toolTip=linkDef.getToolTip();
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.text(toolTip);
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}","protected void writeComments(HyperlinkDef linkDef){
  String toolTip=linkDef.getToolTip();
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.text(toolTip);
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}",0.77734375
72792,"public void start(BundleContext context) throws Exception {
  super.start(context);
  ReportPlugin.getDefault().addIgnoreViewID(LibraryExplorerView.ID);
  AttributesUtil.addCategory(AttributesUtil.EVENTHANDLER,""String_Node_Str"",HandlerPage.class);
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  ReportPlugin.getDefault().addIgnoreViewID(LibraryExplorerView.ID);
}",0.7642679900744417
72793,"/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      throw new ParameterValidationException(MessageConstants.PARAMETER_SCRIPT_VALIDATION_EXCEPTION,new String[]{paramName});
    }
  }
  String paramType=paramHandle.getParamType();
  if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) {
    if (paramValue instanceof Object[]) {
      boolean isValid=true;
      Object[] paramValueList=(Object[])paramValue;
      for (int i=0; i < paramValueList.length; i++) {
        if (paramValueList[i] != null) {
          if (!validateParameterValueType(paramName,paramValueList[i],type,paramHandle)) {
            isValid=false;
          }
        }
      }
      return isValid;
    }
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,""String_Node_Str"",paramValue.getClass().getName()});
  }
 else {
    return validateParameterValueType(paramName,paramValue,type,paramHandle);
  }
}","/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    throw new ParameterValidationException(MessageConstants.PARAMETER_IS_NULL_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      throw new ParameterValidationException(MessageConstants.PARAMETER_SCRIPT_VALIDATION_EXCEPTION,new String[]{paramName});
    }
  }
  String paramType=paramHandle.getParamType();
  if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) {
    if (paramValue instanceof Object[]) {
      boolean isValid=true;
      Object[] paramValueList=(Object[])paramValue;
      for (int i=0; i < paramValueList.length; i++) {
        if (paramValueList[i] != null) {
          if (!validateParameterValueType(paramName,paramValueList[i],type,paramHandle)) {
            isValid=false;
          }
        }
      }
      return isValid;
    }
    throw new ParameterValidationException(MessageConstants.PARAMETER_TYPE_IS_INVALID_EXCEPTION,new String[]{paramName,""String_Node_Str"",paramValue.getClass().getName()});
  }
 else {
    return validateParameterValueType(paramName,paramValue,type,paramHandle);
  }
}",0.9912328767123288
72794,"private boolean validateParameterValueType(String paramName,Object paramValue,String type,ScalarParameterHandle paramHandle) throws ParameterValidationException {
  if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    if (paramValue instanceof Number)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    if (paramValue instanceof Date)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
    if (paramValue instanceof java.sql.Date)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
    if (paramValue instanceof java.sql.Time)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    if (paramHandle.isRequired()) {
      String value=paramValue.toString().trim();
      if (value.length() == 0) {
        throw new ParameterValidationException(MessageConstants.BLANK_PARAMETER_EXCEPTION,new String[]{paramName});
      }
    }
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    if (paramValue instanceof Boolean)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getName()});
  }
  return true;
}","private boolean validateParameterValueType(String paramName,Object paramValue,String type,ScalarParameterHandle paramHandle) throws ParameterValidationException {
  if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    if (paramValue instanceof Number)     return true;
    throw new ParameterValidationException(MessageConstants.PARAMETER_TYPE_IS_INVALID_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    if (paramValue instanceof Date)     return true;
    throw new ParameterValidationException(MessageConstants.PARAMETER_TYPE_IS_INVALID_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
    if (paramValue instanceof java.sql.Date)     return true;
    throw new ParameterValidationException(MessageConstants.PARAMETER_TYPE_IS_INVALID_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
    if (paramValue instanceof java.sql.Time)     return true;
    throw new ParameterValidationException(MessageConstants.PARAMETER_TYPE_IS_INVALID_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    if (paramHandle.isRequired()) {
      String value=paramValue.toString().trim();
      if (value.length() == 0) {
        throw new ParameterValidationException(MessageConstants.PARAMETER_IS_BLANK_EXCEPTION,new String[]{paramName});
      }
    }
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    if (paramValue instanceof Boolean)     return true;
    throw new ParameterValidationException(MessageConstants.PARAMETER_TYPE_IS_INVALID_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getName()});
  }
  return true;
}",0.9530469530469532
72795,"/** 
 * The second step to work with the cascading parameters. Get the selection choices for a parameter in the cascading group. The parameter to work on is the parameter on the next level in the parameter cascading hierarchy. For the ""parameter to work on"", please see the following example. Assume we have a cascading parameter group as Country - State - City. If user specified an empty array in groupKeyValues (meaning user doesn't have any parameter value), the parameter to work on will be the first level which is Country in this case. If user specified groupKeyValues as Object[]{""USA""} (meaning user has set the value of the top level), the parameter to work on will be the second level which is State in ""USA"" in this case. If user specified groupKeyValues as Object[]{""USA"", ""CA""} (meaning user has set the values of the top and the second level), the parameter to work on will be the third level which is City in ""USA, CA"" in this case.
 * @param parameterGroupName -the cascading parameter group name
 * @param groupKeyValues -the array of known parameter values (see the example above)
 * @return the selection list of the parameter to work on
 */
public Collection getSelectionListForCascadingGroup(String parameterGroupName,Object[] groupKeyValues){
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (parameterGroup == null) {
    executionContext.addException(new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION,parameterGroupName));
    return Collections.EMPTY_LIST;
  }
  SlotHandle slotHandle=parameterGroup.getParameters();
  if (groupKeyValues.length >= slotHandle.getCount()) {
    return Collections.EMPTY_LIST;
  }
  for (int i=0; i < groupKeyValues.length; i++) {
    String parameterName=((ScalarParameterHandle)slotHandle.get(i)).getName();
    setParameterValue(parameterName,groupKeyValues[i]);
  }
  ScalarParameterHandle requestedParam=(ScalarParameterHandle)slotHandle.get(groupKeyValues.length);
  if (requestedParam == null) {
    return Collections.EMPTY_LIST;
  }
  return this.getSelectionList(requestedParam.getName());
}","/** 
 * The second step to work with the cascading parameters. Get the selection choices for a parameter in the cascading group. The parameter to work on is the parameter on the next level in the parameter cascading hierarchy. For the ""parameter to work on"", please see the following example. Assume we have a cascading parameter group as Country - State - City. If user specified an empty array in groupKeyValues (meaning user doesn't have any parameter value), the parameter to work on will be the first level which is Country in this case. If user specified groupKeyValues as Object[]{""USA""} (meaning user has set the value of the top level), the parameter to work on will be the second level which is State in ""USA"" in this case. If user specified groupKeyValues as Object[]{""USA"", ""CA""} (meaning user has set the values of the top and the second level), the parameter to work on will be the third level which is City in ""USA, CA"" in this case.
 * @param parameterGroupName -the cascading parameter group name
 * @param groupKeyValues -the array of known parameter values (see the example above)
 * @return the selection list of the parameter to work on
 */
public Collection getSelectionListForCascadingGroup(String parameterGroupName,Object[] groupKeyValues){
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (parameterGroup == null) {
    executionContext.addException(new EngineException(MessageConstants.PARAMETER_GROUP_ISNOT_FOUND_BY_GROUPNAME_EXCEPTION,parameterGroupName));
    return Collections.EMPTY_LIST;
  }
  SlotHandle slotHandle=parameterGroup.getParameters();
  if (groupKeyValues.length >= slotHandle.getCount()) {
    executionContext.addException(new EngineException(MessageConstants.PARAMETER_INVALID_GROUP_LEVEL_EXCEPTION,parameterGroupName));
    return Collections.EMPTY_LIST;
  }
  for (int i=0; i < groupKeyValues.length; i++) {
    String parameterName=((ScalarParameterHandle)slotHandle.get(i)).getName();
    setParameterValue(parameterName,groupKeyValues[i]);
  }
  ScalarParameterHandle requestedParam=(ScalarParameterHandle)slotHandle.get(groupKeyValues.length);
  if (requestedParam == null) {
    executionContext.addException(new EngineException(MessageConstants.PARAMETER_IN_GROUP_ISNOT_SCALAR_EXCEPTION,parameterGroupName));
    return Collections.EMPTY_LIST;
  }
  return this.getSelectionList(requestedParam.getName());
}",0.9323639568186826
72796,"private Collection doGetSelectionList(String name){
  usingParameterValues();
  ReportDesignHandle report=executionContext.getDesign();
  ScalarParameterHandle parameter=(ScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    return Collections.EMPTY_LIST;
  }
  String selectionType=parameter.getValueType();
  String dataType=parameter.getDataType();
  boolean fixedOrder=parameter.isFixedOrder();
  boolean sortByLabel=""String_Node_Str"".equalsIgnoreCase(parameter.getSortBy());
  boolean sortDirectionValue=""String_Node_Str"".equalsIgnoreCase(parameter.getSortDirection());
  if (DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC.equals(selectionType)) {
    CascadingParameterGroupHandle group=null;
    if (isCascadingParameter(parameter)) {
      group=getCascadingGroup(parameter);
    }
    if (group != null) {
      if (DesignChoiceConstants.DATA_SET_MODE_SINGLE.equals(group.getDataSetMode())) {
        return getCascadingParameterList(parameter);
      }
 else {
        if (parameter.getDataSetName() != null) {
          return getChoicesFromParameterQuery(parameter);
        }
      }
    }
 else {
      if (parameter.getDataSetName() != null) {
        return getChoicesFromParameterQuery(parameter);
      }
    }
  }
 else   if (DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC.equals(selectionType)) {
    Iterator iter=parameter.choiceIterator();
    ArrayList choices=new ArrayList();
    while (iter.hasNext()) {
      SelectionChoiceHandle choice=(SelectionChoiceHandle)iter.next();
      String label=report.getMessage(choice.getLabelKey(),locale);
      if (label == null) {
        label=choice.getLabel();
      }
      Object value=convertToType(choice.getValue(),dataType);
      choices.add(new SelectionChoice(label,value));
    }
    if (!fixedOrder)     Collections.sort(choices,new SelectionChoiceComparator(sortByLabel,parameter.getPattern(),sortDirectionValue,ULocale.forLocale(locale)));
    return choices;
  }
  return Collections.EMPTY_LIST;
}","private Collection doGetSelectionList(String name){
  usingParameterValues();
  ReportDesignHandle report=executionContext.getDesign();
  ScalarParameterHandle parameter=(ScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    executionContext.addException(new EngineException(MessageConstants.PARAMETER_ISNOT_FOUND_BY_NAME_EXCEPTION,name));
    return Collections.EMPTY_LIST;
  }
  String selectionType=parameter.getValueType();
  String dataType=parameter.getDataType();
  boolean fixedOrder=parameter.isFixedOrder();
  boolean sortByLabel=""String_Node_Str"".equalsIgnoreCase(parameter.getSortBy());
  boolean sortDirectionValue=""String_Node_Str"".equalsIgnoreCase(parameter.getSortDirection());
  if (DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC.equals(selectionType)) {
    CascadingParameterGroupHandle group=null;
    if (isCascadingParameter(parameter)) {
      group=getCascadingGroup(parameter);
    }
    if (group != null) {
      if (DesignChoiceConstants.DATA_SET_MODE_SINGLE.equals(group.getDataSetMode())) {
        return getCascadingParameterList(parameter);
      }
 else {
        if (parameter.getDataSetName() != null) {
          return getChoicesFromParameterQuery(parameter);
        }
      }
    }
 else {
      if (parameter.getDataSetName() != null) {
        return getChoicesFromParameterQuery(parameter);
      }
    }
  }
 else   if (DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC.equals(selectionType)) {
    Iterator iter=parameter.choiceIterator();
    ArrayList choices=new ArrayList();
    while (iter.hasNext()) {
      SelectionChoiceHandle choice=(SelectionChoiceHandle)iter.next();
      String label=report.getMessage(choice.getLabelKey(),locale);
      if (label == null) {
        label=choice.getLabel();
      }
      Object value=convertToType(choice.getValue(),dataType);
      choices.add(new SelectionChoice(label,value));
    }
    if (!fixedOrder)     Collections.sort(choices,new SelectionChoiceComparator(sortByLabel,parameter.getPattern(),sortDirectionValue,ULocale.forLocale(locale)));
    return choices;
  }
  return Collections.EMPTY_LIST;
}",0.9711794623395495
72797,"private Collection doGetSelectionTreeForCascadingGroup(String parameterGroupName){
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (parameterGroup == null)   return Collections.EMPTY_LIST;
  SlotHandle parameters=parameterGroup.getParameters();
  int parameterCount=parameters.getCount();
  if (DesignChoiceConstants.DATA_SET_MODE_SINGLE.equals(parameterGroup.getDataSetMode())) {
    IResultIterator resultIterator=getResultSetOfCascadingGroup(parameterGroup);
    if (resultIterator == null) {
      return Collections.EMPTY_LIST;
    }
    Collection selectionTree=populateToSelectionTree(resultIterator,parameterGroup);
    close(resultIterator);
    return selectionTree;
  }
 else {
    ParameterHelper[] parameterHelpers=getParameterHelpers(parameterGroup);
    ChoiceListCache cache=new ChoiceListCache(parameterHelpers);
    assert(parameterCount > 0);
    return getSelectionTree(parameters,parameterHelpers,cache,new Object[0]);
  }
}","private Collection doGetSelectionTreeForCascadingGroup(String parameterGroupName){
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (parameterGroup == null) {
    executionContext.addException(new EngineException(MessageConstants.PARAMETER_GROUP_ISNOT_FOUND_BY_GROUPNAME_EXCEPTION,parameterGroupName));
    return Collections.EMPTY_LIST;
  }
  SlotHandle parameters=parameterGroup.getParameters();
  int parameterCount=parameters.getCount();
  if (DesignChoiceConstants.DATA_SET_MODE_SINGLE.equals(parameterGroup.getDataSetMode())) {
    IResultIterator resultIterator=getResultSetOfCascadingGroup(parameterGroup);
    if (resultIterator == null) {
      return Collections.EMPTY_LIST;
    }
    Collection selectionTree=populateToSelectionTree(resultIterator,parameterGroup);
    close(resultIterator);
    return selectionTree;
  }
 else {
    ParameterHelper[] parameterHelpers=getParameterHelpers(parameterGroup);
    ChoiceListCache cache=new ChoiceListCache(parameterHelpers);
    assert(parameterCount > 0);
    return getSelectionTree(parameters,parameterHelpers,cache,new Object[0]);
  }
}",0.9291705498602052
72798,"private Object[] getAccumulatorParameter(Row4Aggregation row,int funcIndex){
  Object[] parameters=null;
  if (parameterColIndex[funcIndex] == -1) {
    parameters=new Object[1];
    if (measureIndexes[funcIndex] < 0) {
      parameters[0]=null;
    }
 else {
      parameters[0]=row.getMeasures()[measureIndexes[funcIndex]];
    }
  }
 else {
    parameters=new Object[2];
    if (measureIndexes[funcIndex] < 0) {
      parameters[0]=null;
    }
 else {
      parameters[0]=row.getMeasures()[measureIndexes[funcIndex]];
    }
    parameters[1]=row.getParameterValues()[parameterColIndex[funcIndex]];
  }
  return parameters;
}","private Object[] getAccumulatorParameter(Row4Aggregation row,int funcIndex){
  Object[] parameters=null;
  if (parameterColIndex[funcIndex] == -1) {
    parameters=new Object[1];
    if (measureIndexes[funcIndex] < 0) {
      return null;
    }
 else {
      parameters[0]=row.getMeasures()[measureIndexes[funcIndex]];
    }
  }
 else {
    parameters=new Object[2];
    if (measureIndexes[funcIndex] < 0) {
      parameters[0]=null;
    }
 else {
      parameters[0]=row.getMeasures()[measureIndexes[funcIndex]];
    }
    parameters[1]=row.getParameterValues()[parameterColIndex[funcIndex]];
  }
  return parameters;
}",0.983159582999198
72799,"/** 
 * Before new aggregation extension point is introduced, The binding expression is serve as first argument of aggregation. This function is used to construct a old version binding. 
 * @param binding
 * @return
 */
private static IBinding constructNewBinding(IBinding binding){
  IBinding newBinding=null;
  try {
    newBinding=new Binding(binding.getBindingName());
    List aggregationOn=binding.getAggregatOns();
    if (aggregationOn != null) {
      for (int i=0; i < aggregationOn.size(); i++) {
        newBinding.addAggregateOn((String)aggregationOn.get(i));
      }
    }
    if (binding.getArguments() != null) {
      for (int i=1; i < binding.getArguments().size(); i++) {
        newBinding.addArgument((IBaseExpression)binding.getArguments().get(i));
      }
    }
    newBinding.setExpression((IBaseExpression)binding.getArguments().get(0));
    newBinding.setAggrFunction(binding.getAggrFunction());
    newBinding.setDataType(binding.getDataType());
    newBinding.setDisplayName(binding.getDisplayName());
    newBinding.setFilter(binding.getFilter());
  }
 catch (  DataException e) {
  }
  return newBinding;
}","/** 
 * Before new aggregation extension point is introduced, The binding expression is serve as first argument of aggregation. This function is used to construct a old version binding. 
 * @param binding
 * @return
 */
private static IBinding constructNewBinding(IBinding binding){
  IBinding newBinding=null;
  try {
    newBinding=new Binding(binding.getBindingName());
    List aggregationOn=binding.getAggregatOns();
    if (aggregationOn != null) {
      for (int i=0; i < aggregationOn.size(); i++) {
        newBinding.addAggregateOn((String)aggregationOn.get(i));
      }
    }
    if (binding.getArguments() != null) {
      for (int i=1; i < binding.getArguments().size(); i++) {
        newBinding.addArgument((IBaseExpression)binding.getArguments().get(i));
      }
    }
    if (binding.getArguments().size() > 0) {
      newBinding.setExpression((IBaseExpression)binding.getArguments().get(0));
    }
    newBinding.setAggrFunction(binding.getAggrFunction());
    newBinding.setDataType(binding.getDataType());
    newBinding.setDisplayName(binding.getDisplayName());
    newBinding.setFilter(binding.getFilter());
  }
 catch (  DataException e) {
  }
  return newBinding;
}",0.9772043010752688
72800,"/** 
 * This method returns a list of ICubeAggrDefn instances which describes the aggregations that need to be calculated in cube query.
 * @param bindings
 * @return
 * @throws DataException 
 */
public static ICubeAggrDefn[] getAggrDefns(List bindings) throws DataException {
  if (bindings == null || bindings.size() == 0)   return new ICubeAggrDefn[0];
  List cubeAggrDefns=new ArrayList();
  for (Iterator it=bindings.iterator(); it.hasNext(); ) {
    IBinding binding=((IBinding)it.next());
    try {
      if (binding.getAggrFunction() != null || binding.getAggregatOns().size() != 0)       cubeAggrDefns.add(new CubeAggrDefn(binding.getBindingName(),getMeasure(((IScriptExpression)binding.getExpression()).getText()),convertToDimLevel(binding.getAggregatOns()),binding.getAggrFunction(),convertToDimLevelAttribute(binding.getArguments(),bindings),binding.getFilter()));
    }
 catch (    DataException ex) {
      throw new DataException(ResourceConstants.INVALID_AGGR_BINDING_EXPRESSION,ex,binding.getBindingName());
    }
  }
  ICubeAggrDefn[] result=new ICubeAggrDefn[cubeAggrDefns.size()];
  for (int i=0; i < result.length; i++) {
    result[i]=(ICubeAggrDefn)cubeAggrDefns.get(i);
  }
  return result;
}","/** 
 * This method returns a list of ICubeAggrDefn instances which describes the aggregations that need to be calculated in cube query.
 * @param bindings
 * @return
 * @throws DataException 
 */
public static ICubeAggrDefn[] getAggrDefns(List bindings) throws DataException {
  if (bindings == null || bindings.size() == 0)   return new ICubeAggrDefn[0];
  List cubeAggrDefns=new ArrayList();
  for (Iterator it=bindings.iterator(); it.hasNext(); ) {
    IBinding binding=((IBinding)it.next());
    try {
      if (binding.getAggrFunction() != null || binding.getAggregatOns().size() != 0)       cubeAggrDefns.add(new CubeAggrDefn(binding.getBindingName(),getMeasure(binding.getExpression() == null ? null : ((IScriptExpression)binding.getExpression()).getText()),convertToDimLevel(binding.getAggregatOns()),binding.getAggrFunction(),convertToDimLevelAttribute(binding.getArguments(),bindings),binding.getFilter()));
    }
 catch (    DataException ex) {
      throw new DataException(ResourceConstants.INVALID_AGGR_BINDING_EXPRESSION,ex,binding.getBindingName());
    }
  }
  ICubeAggrDefn[] result=new ICubeAggrDefn[cubeAggrDefns.size()];
  for (int i=0; i < result.length; i++) {
    result[i]=(ICubeAggrDefn)cubeAggrDefns.get(i);
  }
  return result;
}",0.9834343434343434
72801,"/** 
 * Valid bindings, return a list of invalid binding.
 * @param queryDefn
 * @param suppressException
 * @return
 * @throws DataException
 */
public static List validateBinding(ICubeQueryDefinition queryDefn,boolean suppressException) throws DataException {
  List result=new ArrayList();
  Set validDimLevels=new HashSet();
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.COLUMN_EDGE);
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.ROW_EDGE);
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.PAGE_EDGE);
  for (int i=0; i < queryDefn.getBindings().size(); i++) {
    boolean isValid=true;
    IBinding binding=(IBinding)queryDefn.getBindings().get(i);
    if (binding.getAggrFunction() != null && binding.getExpression() instanceof IScriptExpression) {
      String expr=((IScriptExpression)binding.getExpression()).getText();
      final IAggrFunction aggrFunc=AggregationManager.getInstance().getAggregation(binding.getAggrFunction());
      if (expr == null && AggregationUtil.needDataField(aggrFunc))       continue;
    }
    Set levels=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),queryDefn.getBindings());
    if (!validDimLevels.containsAll(levels)) {
      isValid=false;
      if (!suppressException)       throw new DataException(ResourceConstants.INVALID_BINDING_REFER_TO_INEXIST_DIMENSION,binding.getBindingName());
    }
    if (binding.getAggregatOns().size() > 0) {
      if (binding.getAggrFunction() == null) {
        isValid=false;
        if (!suppressException)         throw new DataException(ResourceConstants.INVALID_BINDING_MISSING_AGGR_FUNC,binding.getBindingName());
      }
      Set lvls=new HashSet();
      for (int j=0; j < binding.getAggregatOns().size(); j++) {
        lvls.add(OlapExpressionUtil.getTargetDimLevel(binding.getAggregatOns().get(j).toString()));
      }
      if (!validDimLevels.containsAll(lvls)) {
        isValid=false;
        if (!suppressException)         throw new DataException(ResourceConstants.INVALID_BINDING_REFER_TO_INEXIST_DIMENSION,binding.getBindingName());
      }
    }
    if (!isValid)     result.add(binding);
  }
  return result;
}","/** 
 * Valid bindings, return a list of invalid binding.
 * @param queryDefn
 * @param suppressException
 * @return
 * @throws DataException
 */
public static List validateBinding(ICubeQueryDefinition queryDefn,boolean suppressException) throws DataException {
  List result=new ArrayList();
  Set validDimLevels=new HashSet();
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.COLUMN_EDGE);
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.ROW_EDGE);
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.PAGE_EDGE);
  for (int i=0; i < queryDefn.getBindings().size(); i++) {
    boolean isValid=true;
    IBinding binding=(IBinding)queryDefn.getBindings().get(i);
    if (binding.getAggrFunction() != null && binding.getExpression() instanceof IScriptExpression) {
      String expr=((IScriptExpression)binding.getExpression()).getText();
      final IAggrFunction aggrFunc=AggregationManager.getInstance().getAggregation(binding.getAggrFunction());
      if (expr == null && AggregationUtil.needDataField(aggrFunc))       continue;
    }
    Set levels=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),queryDefn.getBindings());
    if (levels != null && levels.size() > 0 && !validDimLevels.containsAll(levels)) {
      isValid=false;
      if (!suppressException)       throw new DataException(ResourceConstants.INVALID_BINDING_REFER_TO_INEXIST_DIMENSION,binding.getBindingName());
    }
    if (binding.getAggregatOns().size() > 0) {
      if (binding.getAggrFunction() == null) {
        isValid=false;
        if (!suppressException)         throw new DataException(ResourceConstants.INVALID_BINDING_MISSING_AGGR_FUNC,binding.getBindingName());
      }
      Set lvls=new HashSet();
      for (int j=0; j < binding.getAggregatOns().size(); j++) {
        lvls.add(OlapExpressionUtil.getTargetDimLevel(binding.getAggregatOns().get(j).toString()));
      }
      if (!validDimLevels.containsAll(lvls)) {
        isValid=false;
        if (!suppressException)         throw new DataException(ResourceConstants.INVALID_BINDING_REFER_TO_INEXIST_DIMENSION,binding.getBindingName());
      }
    }
    if (!isValid)     result.add(binding);
  }
  return result;
}",0.9911262798634812
72802,"public static ICubeQueryDefinition createCubeQuery(CrosstabReportItemHandle crosstabItem,IDataQueryDefinition parentQuery,boolean needMeasure,boolean needRowDimension,boolean needColumnDimension,boolean needBinding,boolean needSorting,boolean needFilter) throws BirtException {
  ICubeQueryDefinition cubeQuery=getCubeElementFactory().createCubeQuery(crosstabItem.getCubeName());
  List rowLevelNameList=new ArrayList();
  List columnLevelNameList=new ArrayList();
  List levelViewList=new ArrayList();
  Map levelMap=new HashMap();
  if (needMeasure) {
    for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
      MeasureViewHandle mv=crosstabItem.getMeasure(i);
      if (mv instanceof ComputedMeasureViewHandle) {
        continue;
      }
      if (mv.getCubeMeasure() == null) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",mv.getCubeMeasureName()));
      }
      IMeasureDefinition mDef=cubeQuery.createMeasure(mv.getCubeMeasure().getName());
      mDef.setAggrFunction(mv.getCubeMeasure().getFunction() == null ? null : DataAdapterUtil.getRollUpAggregationName(mv.getCubeMeasure().getFunction()));
      Iterator mfitr=mv.filtersIterator();
      if (mfitr != null) {
        while (mfitr.hasNext()) {
          FilterConditionElementHandle filterCon=(FilterConditionElementHandle)mfitr.next();
          ConditionalExpression filterCondExpr;
          if (ModuleUtil.isListFilterValue(filterCon)) {
            filterCondExpr=new ConditionalExpression(filterCon.getExpr(),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1List());
          }
 else {
            filterCondExpr=new ConditionalExpression(filterCon.getExpr(),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1(),filterCon.getValue2());
          }
          ICubeFilterDefinition filterDef=getCubeElementFactory().creatCubeFilterDefinition(filterCondExpr,null,null,null);
          cubeQuery.addFilter(filterDef);
        }
      }
    }
  }
  if (needRowDimension && crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
    IEdgeDefinition rowEdge=cubeQuery.createEdge(ICubeQueryDefinition.ROW_EDGE);
    LevelHandle mirrorLevel=crosstabItem.getCrosstabView(ROW_AXIS_TYPE).getMirroredStartingLevel();
    for (int i=0; i < crosstabItem.getDimensionCount(ROW_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,i);
      if (dv.getCubeDimension() == null) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
      IDimensionDefinition dimDef=rowEdge.createDimension(dv.getCubeDimension().getName());
      IHierarchyDefinition hieDef=dimDef.createHierarchy(dv.getCubeDimension().getDefaultHierarchy().getName());
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        if (lv.getCubeLevel() == null) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
        ILevelDefinition levelDef=hieDef.createLevel(lv.getCubeLevel().getName());
        rowLevelNameList.add(lv.getCubeLevel().getFullName());
        if (mirrorLevel != null && mirrorLevel.getQualifiedName().equals(lv.getCubeLevelName())) {
          rowEdge.setMirrorStartingLevel(levelDef);
        }
        levelViewList.add(lv);
        levelMap.put(lv.getCubeLevel(),levelDef);
      }
    }
  }
  if (needColumnDimension && crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
    IEdgeDefinition columnEdge=cubeQuery.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
    LevelHandle mirrorLevel=crosstabItem.getCrosstabView(COLUMN_AXIS_TYPE).getMirroredStartingLevel();
    for (int i=0; i < crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,i);
      if (dv.getCubeDimension() == null) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
      IDimensionDefinition dimDef=columnEdge.createDimension(dv.getCubeDimension().getName());
      IHierarchyDefinition hieDef=dimDef.createHierarchy(dv.getCubeDimension().getDefaultHierarchy().getName());
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        if (lv.getCubeLevel() == null) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
        ILevelDefinition levelDef=hieDef.createLevel(lv.getCubeLevel().getName());
        columnLevelNameList.add(lv.getCubeLevel().getFullName());
        if (mirrorLevel != null && mirrorLevel.getQualifiedName().equals(lv.getCubeLevelName())) {
          columnEdge.setMirrorStartingLevel(levelDef);
        }
        levelViewList.add(lv);
        levelMap.put(lv.getCubeLevel(),levelDef);
      }
    }
  }
  if (needSorting) {
    addLevelSorting(levelViewList,levelMap,cubeQuery);
  }
  if (needFilter) {
    addLevelFilter(levelViewList,levelMap,cubeQuery);
  }
  if (needBinding) {
    Iterator bindingItr=((ExtendedItemHandle)crosstabItem.getModelHandle()).columnBindingsIterator();
    ModuleHandle module=((ExtendedItemHandle)crosstabItem.getModelHandle()).getModuleHandle();
    if (bindingItr != null) {
      Map cache=new HashMap();
      while (bindingItr.hasNext()) {
        ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
        Binding binding=new Binding(column.getName());
        binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
        binding.setExpression(column.getExpression() == null ? null : new ScriptExpression(column.getExpression()));
        binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
        if (column.getFilterExpression() != null) {
          binding.setFilter(new ScriptExpression(column.getFilterExpression()));
        }
        for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
          AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
          binding.addArgument(new ScriptExpression(aah.getValue()));
        }
        List aggrList=column.getAggregateOnList();
        if (aggrList != null) {
          for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
            String baseLevel=(String)aggrItr.next();
            CrosstabUtil.addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
          }
        }
        cubeQuery.addBinding(binding);
      }
    }
  }
  return cubeQuery;
}","public static ICubeQueryDefinition createCubeQuery(CrosstabReportItemHandle crosstabItem,IDataQueryDefinition parentQuery,boolean needMeasure,boolean needRowDimension,boolean needColumnDimension,boolean needBinding,boolean needSorting,boolean needFilter) throws BirtException {
  ICubeQueryDefinition cubeQuery=getCubeElementFactory().createCubeQuery(crosstabItem.getCubeName());
  List rowLevelNameList=new ArrayList();
  List columnLevelNameList=new ArrayList();
  List levelViewList=new ArrayList();
  Map levelMap=new HashMap();
  if (needMeasure) {
    for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
      MeasureViewHandle mv=crosstabItem.getMeasure(i);
      if (mv instanceof ComputedMeasureViewHandle) {
        continue;
      }
      if (mv.getCubeMeasure() == null) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",mv.getCubeMeasureName()));
      }
      IMeasureDefinition mDef=cubeQuery.createMeasure(mv.getCubeMeasure().getName());
      mDef.setAggrFunction(mv.getCubeMeasure().getFunction() == null ? null : DataAdapterUtil.getRollUpAggregationName(mv.getCubeMeasure().getFunction()));
      Iterator mfitr=mv.filtersIterator();
      if (mfitr != null) {
        while (mfitr.hasNext()) {
          FilterConditionElementHandle filterCon=(FilterConditionElementHandle)mfitr.next();
          ConditionalExpression filterCondExpr;
          if (ModuleUtil.isListFilterValue(filterCon)) {
            filterCondExpr=new ConditionalExpression(filterCon.getExpr(),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1List());
          }
 else {
            filterCondExpr=new ConditionalExpression(filterCon.getExpr(),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1(),filterCon.getValue2());
          }
          ICubeFilterDefinition filterDef=getCubeElementFactory().creatCubeFilterDefinition(filterCondExpr,null,null,null);
          cubeQuery.addFilter(filterDef);
        }
      }
    }
  }
  if (needRowDimension && crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
    IEdgeDefinition rowEdge=cubeQuery.createEdge(ICubeQueryDefinition.ROW_EDGE);
    LevelHandle mirrorLevel=crosstabItem.getCrosstabView(ROW_AXIS_TYPE).getMirroredStartingLevel();
    for (int i=0; i < crosstabItem.getDimensionCount(ROW_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(ROW_AXIS_TYPE,i);
      if (dv.getCubeDimension() == null) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
      IDimensionDefinition dimDef=rowEdge.createDimension(dv.getCubeDimension().getName());
      IHierarchyDefinition hieDef=dimDef.createHierarchy(dv.getCubeDimension().getDefaultHierarchy().getName());
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        if (lv.getCubeLevel() == null) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
        ILevelDefinition levelDef=hieDef.createLevel(lv.getCubeLevel().getName());
        rowLevelNameList.add(lv.getCubeLevel().getFullName());
        if (mirrorLevel != null && mirrorLevel.getQualifiedName().equals(lv.getCubeLevelName())) {
          rowEdge.setMirrorStartingLevel(levelDef);
        }
        levelViewList.add(lv);
        levelMap.put(lv.getCubeLevel(),levelDef);
      }
    }
  }
  if (needColumnDimension && crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
    IEdgeDefinition columnEdge=cubeQuery.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
    LevelHandle mirrorLevel=crosstabItem.getCrosstabView(COLUMN_AXIS_TYPE).getMirroredStartingLevel();
    for (int i=0; i < crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,i);
      if (dv.getCubeDimension() == null) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
      IDimensionDefinition dimDef=columnEdge.createDimension(dv.getCubeDimension().getName());
      IHierarchyDefinition hieDef=dimDef.createHierarchy(dv.getCubeDimension().getDefaultHierarchy().getName());
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        if (lv.getCubeLevel() == null) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
        ILevelDefinition levelDef=hieDef.createLevel(lv.getCubeLevel().getName());
        columnLevelNameList.add(lv.getCubeLevel().getFullName());
        if (mirrorLevel != null && mirrorLevel.getQualifiedName().equals(lv.getCubeLevelName())) {
          columnEdge.setMirrorStartingLevel(levelDef);
        }
        levelViewList.add(lv);
        levelMap.put(lv.getCubeLevel(),levelDef);
      }
    }
  }
  if (needSorting) {
    addLevelSorting(levelViewList,levelMap,cubeQuery);
  }
  if (needFilter) {
    addLevelFilter(levelViewList,levelMap,cubeQuery);
  }
  if (needBinding) {
    Iterator bindingItr=((ExtendedItemHandle)crosstabItem.getModelHandle()).columnBindingsIterator();
    ModuleHandle module=((ExtendedItemHandle)crosstabItem.getModelHandle()).getModuleHandle();
    if (bindingItr != null) {
      Map cache=new HashMap();
      while (bindingItr.hasNext()) {
        ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
        Binding binding=new Binding(column.getName());
        binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
        binding.setExpression(column.getExpression() == null ? null : new ScriptExpression(column.getExpression()));
        binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
        if (column.getFilterExpression() != null) {
          binding.setFilter(new ScriptExpression(column.getFilterExpression()));
        }
        for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
          AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
          if (aah.getValue() != null) {
            binding.addArgument(new ScriptExpression(aah.getValue()));
          }
        }
        List aggrList=column.getAggregateOnList();
        if (aggrList != null) {
          for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
            String baseLevel=(String)aggrItr.next();
            CrosstabUtil.addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
          }
        }
        cubeQuery.addBinding(binding);
      }
    }
  }
  return cubeQuery;
}",0.995964125560538
72803,"/** 
 * Gets the color from a CSSValue converted string.
 * @param color CSSValue converted string.
 * @return java.awt.Color
 */
public static Color getColor(String color){
  if (color == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return null;
  }
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(color);
  if (m.find()) {
    String[] rgb=color.substring(m.start() + 4,m.end() - 1).split(""String_Node_Str"");
    if (rgb.length == 3) {
      int red=Integer.parseInt(rgb[0].trim());
      int green=Integer.parseInt(rgb[1].trim());
      int blue=Integer.parseInt(rgb[2].trim());
      try {
        return new Color(red,green,blue);
      }
 catch (      RuntimeException ex) {
        logger.log(Level.WARNING,""String_Node_Str"");
        return null;
      }
    }
  }
  logger.log(Level.WARNING,""String_Node_Str"");
  return null;
}","/** 
 * Gets the color from a CSSValue converted string.
 * @param color CSSValue converted string.
 * @return java.awt.Color
 */
public static Color getColor(String color){
  if (color == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return null;
  }
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(color);
  if (m.find()) {
    String[] rgb=color.substring(m.start() + 4,m.end() - 1).split(""String_Node_Str"");
    if (rgb.length == 3) {
      try {
        int red=Integer.parseInt(rgb[0].trim());
        int green=Integer.parseInt(rgb[1].trim());
        int blue=Integer.parseInt(rgb[2].trim());
        return new Color(red,green,blue);
      }
 catch (      RuntimeException ex) {
        logger.log(Level.WARNING,""String_Node_Str"");
        return null;
      }
    }
  }
  logger.log(Level.WARNING,""String_Node_Str"");
  return null;
}",0.982896237172178
72804,"/** 
 * create a PDF outline for tocNode, using the pol as the parent PDF outline.
 * @param tocNode		The tocNode whose kids need to build a PDF outline tree
 * @param pol			The parent PDF outline for these kids
 * @param bookmarks		All bookMarks created during rendering
 */
private void createTOC(TOCNode tocNode,PdfOutline pol,Set bookmarks){
  if (null == tocNode || null == tocNode.getChildren())   return;
  for (Iterator i=tocNode.getChildren().iterator(); i.hasNext(); ) {
    TOCNode node=(TOCNode)i.next();
    if (!bookmarks.contains(node.getBookmark()))     continue;
    PdfOutline outline=new PdfOutline(pol,PdfAction.gotoLocalPage(node.getBookmark(),false),node.getDisplayString());
    IScriptStyle style=node.getTOCStyle();
    if (style instanceof StyleInstance) {
      StyleInstance instance=(StyleInstance)style;
      CSSValue color=instance.getProperty(StyleConstants.STYLE_COLOR);
      if (color != null && !color.equals(CSSValueConstants.BLACK_VALUE)) {
        outline.setColor(PropertyUtil.getColor(color));
      }
      int styleValue=Font.NORMAL;
      CSSValue fontStyle=instance.getProperty(StyleConstants.STYLE_FONT_STYLE);
      if (CSSValueConstants.OBLIQUE_VALUE.equals(fontStyle) || CSSValueConstants.ITALIC_VALUE.equals(fontStyle)) {
        styleValue|=Font.ITALIC;
      }
      if (PropertyUtil.isBoldFont(instance.getProperty(StyleConstants.STYLE_FONT_WEIGHT))) {
        styleValue|=Font.BOLD;
      }
      outline.setStyle(styleValue);
    }
    createTOC(node,outline,bookmarks);
  }
}","/** 
 * create a PDF outline for tocNode, using the pol as the parent PDF outline.
 * @param tocNode		The tocNode whose kids need to build a PDF outline tree
 * @param pol			The parent PDF outline for these kids
 * @param bookmarks		All bookMarks created during rendering
 */
private void createTOC(TOCNode tocNode,PdfOutline pol,Set bookmarks){
  if (null == tocNode || null == tocNode.getChildren())   return;
  for (Iterator i=tocNode.getChildren().iterator(); i.hasNext(); ) {
    TOCNode node=(TOCNode)i.next();
    if (!bookmarks.contains(node.getBookmark()))     continue;
    PdfOutline outline=new PdfOutline(pol,PdfAction.gotoLocalPage(node.getBookmark(),false),node.getDisplayString());
    IScriptStyle style=node.getTOCStyle();
    String color=style.getColor();
    Color awtColor=PropertyUtil.getColor(color);
    if (awtColor != null) {
      outline.setColor(awtColor);
    }
    String fontStyle=style.getFontStyle();
    String fontWeight=style.getFontWeight();
    int styleValue=PropertyUtil.getFontStyle(fontStyle,fontWeight);
    outline.setStyle(styleValue);
    createTOC(node,outline,bookmarks);
  }
}",0.6152688980819857
72805,"public static Color getColor(CSSValue value){
  if (value != null && value instanceof RGBColorValue) {
    RGBColorValue color=(RGBColorValue)value;
    try {
      return new Color(color.getRed().getFloatValue(CSSPrimitiveValue.CSS_NUMBER) / 255.0f,color.getGreen().getFloatValue(CSSPrimitiveValue.CSS_NUMBER) / 255.0f,color.getBlue().getFloatValue(CSSPrimitiveValue.CSS_NUMBER) / 255.0f);
    }
 catch (    RuntimeException ex) {
      logger.log(Level.WARNING,""String_Node_Str"",value);
    }
  }
  return null;
}","/** 
 * Gets the color from a CSSValue converted string.
 * @param color CSSValue converted string.
 * @return java.awt.Color
 */
public static Color getColor(String color){
  if (color == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return null;
  }
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(color);
  if (m.find()) {
    String[] rgb=color.substring(m.start() + 4,m.end() - 1).split(""String_Node_Str"");
    if (rgb.length == 3) {
      int red=Integer.parseInt(rgb[0].trim());
      int green=Integer.parseInt(rgb[1].trim());
      int blue=Integer.parseInt(rgb[2].trim());
      try {
        return new Color(red,green,blue);
      }
 catch (      RuntimeException ex) {
        logger.log(Level.WARNING,""String_Node_Str"");
        return null;
      }
    }
  }
  logger.log(Level.WARNING,""String_Node_Str"");
  return null;
}",0.148308135349172
72806,"/** 
 * Refresh the URL list of DriverClassLoader
 * @return if the refreshURL is different than the former one then return true otherwisereturn false
 * @throws OdaException 
 */
public boolean refreshURLs() throws OdaException {
  if (bundle == null)   return false;
  boolean foundNew=false;
  if (driverClassPath != null) {
    try {
      File driverClassFile=new File(driverClassPath);
      if (driverClassFile.exists()) {
        this.addURL(driverClassFile.toURI().toURL());
        if (driverClassFile.isDirectory()) {
          File[] driverFiles=driverClassFile.listFiles(new FileFilter(){
            public boolean accept(            File pathname){
              if (pathname.isFile() && OdaJdbcDriver.isDriverFile(pathname.getName())) {
                return true;
              }
              return false;
            }
          }
);
          for (int i=0; i < driverFiles.length; i++) {
            if (!fileSet.contains(driverFiles[i].getName())) {
              foundNew=true;
              fileSet.add(driverFiles[i].getName());
              addURL(driverFiles[i].toURI().toURL());
              logger.info(""String_Node_Str"" + driverFiles[i].getName() + ""String_Node_Str""+ driverFiles[i].toURI().toURL());
            }
          }
        }
      }
    }
 catch (    MalformedURLException e) {
      throw new OdaException(e);
    }
  }
  Enumeration files=bundle.getEntryPaths(OdaJdbcDriver.Constants.DRIVER_DIRECTORY);
  while (files != null && files.hasMoreElements()) {
    String fileName=(String)files.nextElement();
    if (OdaJdbcDriver.isDriverFile(fileName)) {
      if (!fileSet.contains(fileName)) {
        foundNew=true;
        fileSet.add(fileName);
        URL fileURL=bundle.getEntry(fileName);
        addURL(fileURL);
        logger.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ fileURL);
      }
    }
  }
  return foundNew;
}","/** 
 * Refresh the URL list of DriverClassLoader
 * @return if the refreshURL is different than the former one then return true otherwisereturn false
 * @throws OdaException 
 */
public boolean refreshURLs() throws OdaException {
  if (bundle == null)   return false;
  boolean foundNew=false;
  if (driverClassPath != null) {
    try {
      File driverClassFile=new File(driverClassPath);
      if (driverClassFile.exists()) {
        this.addURL(driverClassFile.toURI().toURL());
        if (driverClassFile.isDirectory()) {
          File[] driverFiles=driverClassFile.listFiles(new FileFilter(){
            public boolean accept(            File pathname){
              if (pathname.isFile() && OdaJdbcDriver.isDriverFile(pathname.getName())) {
                return true;
              }
              return false;
            }
          }
);
          for (int i=0; i < driverFiles.length; i++) {
            if (!fileSet.contains(driverFiles[i].getName())) {
              foundNew=true;
              fileSet.add(driverFiles[i].getName());
              addURL(driverFiles[i].toURI().toURL());
              logger.info(""String_Node_Str"" + driverFiles[i].getName() + ""String_Node_Str""+ driverFiles[i].toURI().toURL());
            }
          }
        }
      }
    }
 catch (    MalformedURLException e) {
      throw new OdaException(e);
    }
  }
  Enumeration files=bundle.getEntryPaths(OdaJdbcDriver.Constants.DRIVER_DIRECTORY);
  while (files != null && files.hasMoreElements()) {
    String fileName=(String)files.nextElement();
    if (OdaJdbcDriver.isDriverFile(fileName)) {
      if (!fileSet.contains(fileName)) {
        foundNew=true;
        fileSet.add(fileName);
        URL bundleURL=bundle.getEntry(fileName);
        try {
          URL fileURL=FileLocator.resolve(bundleURL);
          addURL(fileURL);
          addURL(bundleURL);
        }
 catch (        IOException e) {
          logger.log(Level.SEVERE,""String_Node_Str"" + bundleURL + ""String_Node_Str""+ ""String_Node_Str"",e);
        }
        logger.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ bundleURL);
      }
    }
  }
  return foundNew;
}",0.9065212000991818
72807,"protected void showLayoutTargetFeedback(Request request){
  boolean isCrossTabElement=false;
  if (request instanceof ChangeBoundsRequest) {
    List editParts=((ChangeBoundsRequest)request).getEditParts();
    if (editParts.size() > 0) {
      isCrossTabElement=editParts.get(0) instanceof CrosstabCellEditPart;
    }
  }
  if (isCrossTabElement) {
    Object template=TemplateTransfer.getInstance().getTemplate();
    if (template instanceof Object[] && ((Object[])template).length > 0) {
      Object dragObject=((Object[])template)[0];
      if (!(dragObject instanceof DimensionHandle || dragObject instanceof LevelHandle || dragObject instanceof MeasureHandle)) {
        isCrossTabElement=true;
      }
    }
  }
  if (isCrossTabElement) {
    Transposer transposer=new Transposer();
    transposer.setEnabled(!isHorizontal());
    Rectangle r=transposer.t(getAbsoluteClientBounds((GraphicalEditPart)getHost()));
    Point p=transposer.t(getLocationFromRequest(request));
    boolean before=p.x <= r.x + (r.width / 2);
    Point p1=new Point(before ? r.x : r.x + r.width,r.y - 2);
    p1=transposer.t(p1);
    Point p2=new Point(before ? r.x : r.x + r.width,r.y + r.height + 7);
    p2=transposer.t(p2);
    setTargetFeedbackPoints(p1,p2);
  }
 else {
    super.showLayoutTargetFeedback(request);
  }
}","protected void showLayoutTargetFeedback(Request request){
  boolean isCrossTabElement=false;
  if (request instanceof ChangeBoundsRequest) {
    List editParts=((ChangeBoundsRequest)request).getEditParts();
    if (editParts.size() > 0) {
      isCrossTabElement=editParts.get(0) instanceof CrosstabCellEditPart;
    }
  }
  if (!isCrossTabElement) {
    Object template=TemplateTransfer.getInstance().getTemplate();
    if (template instanceof Object[] && ((Object[])template).length > 0) {
      Object dragObject=((Object[])template)[0];
      if (dragObject instanceof DimensionHandle || dragObject instanceof MeasureHandle || dragObject instanceof LevelHandle) {
        isCrossTabElement=true;
      }
    }
  }
  if (isCrossTabElement) {
    Transposer transposer=new Transposer();
    transposer.setEnabled(!isHorizontal());
    Rectangle r=transposer.t(getAbsoluteClientBounds((GraphicalEditPart)getHost()));
    Point p=transposer.t(getLocationFromRequest(request));
    boolean before=p.x <= r.x + (r.width / 2);
    Point p1=new Point(before ? r.x : r.x + r.width,r.y - 2);
    p1=transposer.t(p1);
    Point p2=new Point(before ? r.x : r.x + r.width,r.y + r.height + 7);
    p2=transposer.t(p2);
    setTargetFeedbackPoints(p1,p2);
  }
 else {
    super.showLayoutTargetFeedback(request);
  }
}",0.9892966360856268
72808,"/** 
 * @param handle
 */
public DeleteStyleAction(SharedStyleHandle handle){
  this.handle=handle;
  setId(ID);
  if (handle.getContainerSlotHandle().getElementHandle() instanceof ThemeHandle) {
    setText(((ThemeHandle)handle.getContainerSlotHandle().getElementHandle()).getName() + ""String_Node_Str"" + DEUtil.getEscapedMenuItemText(DEUtil.getDisplayLabel(handle,false)));
  }
 else {
    setText(DEUtil.getEscapedMenuItemText(DEUtil.getDisplayLabel(handle,false)));
  }
  action=new DeleteAction(handle);
}","/** 
 * @param handle
 */
public DeleteStyleAction(SharedStyleHandle handle){
  setId(ID);
  if (handle.getContainerSlotHandle() != null && handle.getContainerSlotHandle().getElementHandle() instanceof ThemeHandle) {
    setText(((ThemeHandle)handle.getContainerSlotHandle().getElementHandle()).getName() + ""String_Node_Str"" + DEUtil.getEscapedMenuItemText(DEUtil.getDisplayLabel(handle,false)));
  }
 else {
    setText(DEUtil.getEscapedMenuItemText(DEUtil.getDisplayLabel(handle,false)));
  }
  action=new DeleteAction(handle);
}",0.9068203650336216
72809,"public IBinding adaptBinding(ComputedColumnHandle handle) throws AdapterException {
  if (handle == null)   return null;
  Binding result=new Binding(handle.getName(),new ScriptExpression(handle.getExpression()));
  result.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(handle.getDataType()));
  result.setAggrFunction(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelAggregationType(handle.getAggregateFunction()));
  result.setFilter(handle.getFilterExpression() == null ? null : new ScriptExpression(handle.getFilterExpression()));
  populateArgument(result,handle);
  populateAggregateOns(result,handle);
  return result;
}","public IBinding adaptBinding(ComputedColumnHandle handle) throws AdapterException {
  if (handle == null)   return null;
  Binding result=new Binding(handle.getName());
  if (handle.getExpression() != null)   result.setExpression(new ScriptExpression(handle.getExpression()));
  result.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(handle.getDataType()));
  result.setAggrFunction(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelAggregationType(handle.getAggregateFunction()));
  result.setFilter(handle.getFilterExpression() == null ? null : new ScriptExpression(handle.getFilterExpression()));
  populateArgument(result,handle);
  populateAggregateOns(result,handle);
  return result;
}",0.9547038327526132
72810,"/** 
 * Returns the report design handle
 * @param request
 * @throws Exception
 * @return Report Design Handle
 */
protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request) throws Exception {
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=null;
  boolean isDocumentExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT);
  boolean isReportExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT);
  if (isDocumentExist && !isReportExist) {
    boolean isValidDocument=ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT));
    if (isValidDocument) {
      reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
      if (reportDocumentInstance != null) {
        reportRunnable=reportDocumentInstance.getReportRunnable();
      }
 else {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
      }
    }
 else {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
  }
 else   if (isReportExist) {
    if (isDocumentExist && !ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT))) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
    reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
    if (ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT))) {
      try {
        reportRunnable=BirtUtility.getRunnableFromDesignFile(request,this.reportDesignName,this.moduleOptions);
        if (reportRunnable == null) {
          throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportDocumentInstance != null) {
    this.documentInUrl=true;
    this.parameterMap=reportDocumentInstance.getParameterValues();
    if (!reportDocumentInstance.isComplete() && isReportExist)     this.isDocumentProcessing=true;
    reportDocumentInstance.close();
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}","/** 
 * Returns the report design handle
 * @param request
 * @throws Exception
 * @return Report Design Handle
 */
protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request) throws Exception {
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=null;
  boolean isDocumentExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT);
  boolean isReportExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT);
  if (isDocumentExist && !isReportExist) {
    boolean isValidDocument=ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT));
    if (isValidDocument) {
      try {
        reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
      }
 catch (      Exception e) {
      }
      if (reportDocumentInstance != null) {
        reportRunnable=reportDocumentInstance.getReportRunnable();
      }
 else {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
      }
    }
 else {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
  }
 else   if (isReportExist) {
    if (isDocumentExist && !ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT))) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
    try {
      reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
    }
 catch (    Exception e) {
    }
    if (ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT))) {
      try {
        reportRunnable=BirtUtility.getRunnableFromDesignFile(request,this.reportDesignName,this.moduleOptions);
        if (reportRunnable == null) {
          throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportDocumentInstance != null) {
    this.documentInUrl=true;
    this.parameterMap=reportDocumentInstance.getParameterValues();
    if (!reportDocumentInstance.isComplete() && isReportExist)     this.isDocumentProcessing=true;
    reportDocumentInstance.close();
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}",0.9803571428571428
72811,"/** 
 * Returns report design handle
 * @param request
 * @param viewer
 * @return
 * @throws Exception
 */
public static IViewerReportDesignHandle getDesignHandle(HttpServletRequest request,ViewerField viewer) throws Exception {
  if (viewer == null)   return null;
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  String designFile=ParameterAccessor.getReport(request,viewer.getReportDesign());
  String documentFile=ParameterAccessor.getReportDocument(request,viewer.getReportDocument(),false);
  boolean isValidDocument=ParameterAccessor.isValidFilePath(viewer.getReportDocument());
  if (documentFile != null && isValidDocument) {
    IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(designFile,documentFile,getModuleOptions(viewer));
    if (reportDocumentInstance != null) {
      viewer.setDocumentInUrl(true);
      reportRunnable=reportDocumentInstance.getReportRunnable();
      reportDocumentInstance.close();
    }
  }
  if (reportRunnable == null) {
    if (documentFile != null && designFile == null) {
      if (isValidDocument)       throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{documentFile});
 else       throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{documentFile});
    }
    if (!ParameterAccessor.isValidFilePath(viewer.getReportDesign())) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{designFile});
    }
 else {
      reportRunnable=BirtUtility.getRunnableFromDesignFile(request,designFile,getModuleOptions(viewer));
      if (reportRunnable == null) {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{designFile});
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}","/** 
 * Returns report design handle
 * @param request
 * @param viewer
 * @return
 * @throws Exception
 */
public static IViewerReportDesignHandle getDesignHandle(HttpServletRequest request,ViewerField viewer) throws Exception {
  if (viewer == null)   return null;
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  String designFile=ParameterAccessor.getReport(request,viewer.getReportDesign());
  String documentFile=ParameterAccessor.getReportDocument(request,viewer.getReportDocument(),false);
  boolean isValidDocument=ParameterAccessor.isValidFilePath(viewer.getReportDocument());
  if (documentFile != null && isValidDocument) {
    try {
      IReportDocument reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(designFile,documentFile,getModuleOptions(viewer));
      if (reportDocumentInstance != null) {
        viewer.setDocumentInUrl(true);
        reportRunnable=reportDocumentInstance.getReportRunnable();
        reportDocumentInstance.close();
      }
    }
 catch (    Exception e) {
    }
  }
  if (reportRunnable == null) {
    if (documentFile != null && designFile == null) {
      if (isValidDocument)       throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{documentFile});
 else       throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{documentFile});
    }
    if (!ParameterAccessor.isValidFilePath(viewer.getReportDesign())) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR,new String[]{designFile});
    }
 else {
      reportRunnable=BirtUtility.getRunnableFromDesignFile(request,designFile,getModuleOptions(viewer));
      if (reportRunnable == null) {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{designFile});
      }
    }
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}",0.9850159665929747
72812,"public int getCellWidth(int col,int cs){
  int[] cols=getCurrentTblCols();
  int w=0;
  for (int i=col; i < col + cs; i++) {
    w+=cols[i];
  }
  return w;
}","public int getCellWidth(int col,int cs){
  int[] cols=getCurrentTblCols();
  int w=0;
  int colNum=Math.min(col + cs,WordEmitter.MAX_COLUMN);
  for (int i=col; i < colNum; i++) {
    w+=cols[i];
  }
  return w;
}",0.827027027027027
72813,"private void readjustBounds(PWA3DComputeContext context,Bounds adjustedBounds,Bounds bo) throws ChartException {
  Rectangle rectl=this.getBoundsOfAllAxisLabels();
  double new_top=adjustedBounds.getTop();
  double new_height=adjustedBounds.getHeight();
  double new_left=adjustedBounds.getLeft();
  double new_width=adjustedBounds.getWidth();
  double dYAxisTitleThickness=this.computeYAxisTitleThickness();
  double dXAxisTitleThickness=this.computeXAxisTitleThickness();
  double rect_width=rectl.width + dYAxisTitleThickness + 5;
  if (bo.getWidth() < rect_width) {
    new_left+=bo.getLeft() - rectl.x;
    new_width+=bo.getWidth() - rect_width;
  }
 else {
    new_left+=bo.getLeft() - (rect_width - bo.getWidth()) / 2 - rectl.x;
  }
  double rect_height=rectl.height + dXAxisTitleThickness + 5;
  if (bo.getHeight() < rect_height) {
    new_top+=bo.getTop() - rectl.y;
    new_height+=bo.getHeight() - rect_height;
  }
 else {
    new_top+=bo.getTop() - (rect_height - bo.getHeight()) / 2 - rectl.y;
  }
  adjustedBounds.setLeft(new_left);
  adjustedBounds.setTop(new_top);
  adjustedBounds.setWidth(new_width);
  adjustedBounds.setHeight(new_height);
}","private void readjustBounds(PWA3DComputeContext context,Bounds adjustedBounds,Bounds bo) throws ChartException {
  Rectangle rectl=this.getBoundsOfAllAxisLabels();
  double new_top=adjustedBounds.getTop();
  double new_height=adjustedBounds.getHeight();
  double new_left=adjustedBounds.getLeft();
  double new_width=adjustedBounds.getWidth();
  double dYAxisTitleThickness=this.computeYAxisTitleThickness();
  double dXAxisTitleThickness=this.computeXAxisTitleThickness();
  double rect_width=rectl.width + 2 * dYAxisTitleThickness + 5;
  if (bo.getWidth() < rect_width) {
    new_left+=bo.getLeft() - rectl.x + dYAxisTitleThickness;
    new_width+=bo.getWidth() - rect_width;
  }
 else {
    new_left+=bo.getLeft() - (rect_width - bo.getWidth()) / 2 - rectl.x;
  }
  double rect_height=rectl.height + dXAxisTitleThickness + 5;
  if (bo.getHeight() < rect_height) {
    new_top+=bo.getTop() - rectl.y;
    new_height+=bo.getHeight() - rect_height;
  }
 else {
    new_top+=bo.getTop() - (rect_height - bo.getHeight()) / 2 - rectl.y;
  }
  adjustedBounds.setLeft(new_left);
  adjustedBounds.setTop(new_top);
  adjustedBounds.setWidth(new_width);
  adjustedBounds.setHeight(new_height);
}",0.9884959522795056
72814,"/** 
 * @param aggregationDef
 * @param facttableRowIterator
 * @throws DataException 
 */
AggregationCalculator(AggregationDefinition aggregationDef,DimColumn[] parameterColNames,IDataSet4Aggregation.MetaInfo metaInfo) throws IOException, DataException {
  Object[] params={aggregationDef,parameterColNames,metaInfo};
  logger.entering(AggregationCalculator.class.getName(),""String_Node_Str"",params);
  this.aggregation=aggregationDef;
  AggregationFunctionDefinition[] aggregationFunction=aggregationDef.getAggregationFunctions();
  if (aggregationDef.getLevels() == null)   this.levelCount=0;
 else   this.levelCount=aggregationDef.getLevels().length;
  if (aggregationFunction != null) {
    this.accumulators=new Accumulator[aggregationFunction.length];
    this.measureIndexes=new int[aggregationFunction.length];
    this.parameterColIndex=new int[aggregationFunction.length];
    for (int i=0; i < aggregationFunction.length; i++) {
      IAggrFunction aggregation=AggregationManager.getInstance().getAggregation(aggregationFunction[i].getFunctionName());
      if (aggregation == null) {
        throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + aggregationFunction[i].getFunctionName());
      }
      if (AggregationUtil.needDataField(aggregation)) {
        this.parameterColIndex[i]=find(parameterColNames,aggregationFunction[i].getParaCol());
      }
 else {
        this.parameterColIndex[i]=-1;
      }
      this.accumulators[i]=aggregation.newAccumulator();
      this.accumulators[i].start();
      this.measureIndexes[i]=metaInfo.getMeasureIndex(aggregationFunction[i].getMeasureName());
      if ((this.measureIndexes[i] == -1 && AggregationUtil.needDataField(aggregation))) {
        throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,aggregationFunction[i].getMeasureName());
      }
    }
  }
  result=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  measureInfos=metaInfo.getMeasureInfos();
  facttableRow=new FacttableRow(measureInfos);
  logger.exiting(AggregationCalculator.class.getName(),""String_Node_Str"");
}","/** 
 * @param aggregationDef
 * @param facttableRowIterator
 * @throws DataException 
 */
AggregationCalculator(AggregationDefinition aggregationDef,DimColumn[] parameterColNames,IDataSet4Aggregation.MetaInfo metaInfo) throws IOException, DataException {
  Object[] params={aggregationDef,parameterColNames,metaInfo};
  logger.entering(AggregationCalculator.class.getName(),""String_Node_Str"",params);
  this.aggregation=aggregationDef;
  AggregationFunctionDefinition[] aggregationFunction=aggregationDef.getAggregationFunctions();
  if (aggregationDef.getLevels() == null)   this.levelCount=0;
 else   this.levelCount=aggregationDef.getLevels().length;
  if (aggregationFunction != null) {
    this.accumulators=new Accumulator[aggregationFunction.length];
    this.measureIndexes=new int[aggregationFunction.length];
    this.parameterColIndex=new int[aggregationFunction.length];
    for (int i=0; i < aggregationFunction.length; i++) {
      IAggrFunction aggregation=AggregationManager.getInstance().getAggregation(aggregationFunction[i].getFunctionName());
      if (aggregation == null) {
        throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + aggregationFunction[i].getFunctionName());
      }
      if (AggregationUtil.needDataField(aggregation)) {
        this.parameterColIndex[i]=find(parameterColNames,aggregationFunction[i].getParaCol());
      }
 else {
        this.parameterColIndex[i]=-1;
      }
      this.accumulators[i]=aggregation.newAccumulator();
      this.accumulators[i].start();
      this.measureIndexes[i]=metaInfo.getMeasureIndex(aggregationFunction[i].getMeasureName());
    }
  }
  result=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  measureInfos=metaInfo.getMeasureInfos();
  facttableRow=new FacttableRow(measureInfos);
  logger.exiting(AggregationCalculator.class.getName(),""String_Node_Str"");
}",0.9480361063674068
72815,"/** 
 * validate on calculated member to verify whether the measure reference exist.
 * @param cube
 * @param measureDefn
 * @throws DataException
 */
static void validateCalculatedMember(ICubeQueryDefinition defn,ICube cube,CalculatedMember[] calculatedMember) throws DataException {
  boolean findMeasure=false;
  for (int i=0; i < calculatedMember.length; i++) {
    findMeasure=false;
    String measureName=calculatedMember[i].getMeasureName();
    String[] names=cube.getMeasureNames();
    if (names != null && names.length > 0) {
      for (int k=0; k < names.length; k++) {
        if (names[k].equals(measureName)) {
          findMeasure=true;
          break;
        }
      }
    }
    if (!findMeasure) {
      List computedMeasures=defn.getComputedMeasures();
      for (int k=0; k < computedMeasures.size(); k++) {
        if (((ComputedMeasureDefinition)computedMeasures.get(k)).getName().equals(measureName)) {
          findMeasure=true;
          break;
        }
      }
      final IAggrFunction aggrFunc=AggregationManager.getInstance().getAggregation(calculatedMember[i].getAggrFunction());
      if (!findMeasure && AggregationUtil.needDataField(aggrFunc))       throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,new Object[]{measureName});
    }
  }
}","/** 
 * validate on calculated member to verify whether the measure reference exist.
 * @param cube
 * @param measureDefn
 * @throws DataException
 */
static void validateCalculatedMember(ICubeQueryDefinition defn,ICube cube,CalculatedMember[] calculatedMember) throws DataException {
  boolean findMeasure=false;
  for (int i=0; i < calculatedMember.length; i++) {
    findMeasure=false;
    String measureName=calculatedMember[i].getMeasureName();
    String[] names=cube.getMeasureNames();
    if (names != null && names.length > 0) {
      for (int k=0; k < names.length; k++) {
        if (names[k].equals(measureName)) {
          findMeasure=true;
          break;
        }
      }
    }
    if (!findMeasure) {
      List computedMeasures=defn.getComputedMeasures();
      for (int k=0; k < computedMeasures.size(); k++) {
        if (((ComputedMeasureDefinition)computedMeasures.get(k)).getName().equals(measureName)) {
          findMeasure=true;
          break;
        }
      }
      final IAggrFunction aggrFunc=AggregationManager.getInstance().getAggregation(calculatedMember[i].getAggrFunction());
    }
  }
}",0.9305785123966942
72816,"public DataGenerationEngine(ExecutionContext context,IDocArchiveWriter writer) throws Exception {
  super(context,writer);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_GENERATION,null,context.getSharedScope());
  dteSessionContext.setDocumentWriter(writer);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  dos=new DataOutputStream(writer.createRandomAccessStream(ReportDocumentConstants.DATA_META_STREAM));
  DteMetaInfoIOUtil.startMetaInfo(dos);
}","public DataGenerationEngine(ExecutionContext context,IDocArchiveWriter writer) throws Exception {
  super(context,writer);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_GENERATION,null,context.getSharedScope());
  dteSessionContext.setDocumentWriter(writer);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  dteEngineContext.setClassLoader(context.getApplicationClassLoader());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  dos=new DataOutputStream(writer.createRandomAccessStream(ReportDocumentConstants.DATA_META_STREAM));
  DteMetaInfoIOUtil.startMetaInfo(dos);
}",0.953846153846154
72817,"public DataInteractiveEngine(ExecutionContext context,IDocArchiveReader reader,IDocArchiveWriter writer) throws Exception {
  super(context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_UPDATE,null,context.getSharedScope());
  dteSessionContext.setDocumentReader(reader);
  dteSessionContext.setDocumentWriter(writer);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
  if (writer != null && dos == null) {
    dos=new DataOutputStream(writer.createRandomAccessStream(ReportDocumentConstants.DATA_SNAP_META_STREAM));
    DteMetaInfoIOUtil.startMetaInfo(dos);
  }
}","public DataInteractiveEngine(ExecutionContext context,IDocArchiveReader reader,IDocArchiveWriter writer) throws Exception {
  super(context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_UPDATE,null,context.getSharedScope());
  dteSessionContext.setDocumentReader(reader);
  dteSessionContext.setDocumentWriter(writer);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  dteEngineContext.setClassLoader(context.getApplicationClassLoader());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
  if (writer != null && dos == null) {
    dos=new DataOutputStream(writer.createRandomAccessStream(ReportDocumentConstants.DATA_SNAP_META_STREAM));
    DteMetaInfoIOUtil.startMetaInfo(dos);
  }
}",0.9609120521172638
72818,"public DataPresentationEngine(ExecutionContext context,IDocArchiveReader reader) throws Exception {
  super(context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_PRESENTATION,null,context.getSharedScope());
  dteSessionContext.setDocumentReader(reader);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
}","public DataPresentationEngine(ExecutionContext context,IDocArchiveReader reader) throws Exception {
  super(context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_PRESENTATION,null,context.getSharedScope());
  dteSessionContext.setDocumentReader(reader);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  dteEngineContext.setClassLoader(context.getApplicationClassLoader());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
}",0.94553706505295
72819,"protected void closeLayout(){
  if (root != null) {
    root.setContentHeight(childHeight);
    IStyle areaStyle=root.getStyle();
    int width=getCurrentIP() + getOffsetX() + getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_PADDING_RIGHT))+ getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_BORDER_RIGHT_WIDTH));
    root.setWidth(width);
    int height=0;
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      height=Math.max(height,child.getAllocatedHeight());
    }
    root.setContentHeight(height);
  }
}","protected void closeLayout(){
  if (root != null) {
    root.setContentHeight(childHeight);
    IStyle areaStyle=root.getStyle();
    int width=getCurrentIP() + getOffsetX() + getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_PADDING_RIGHT))+ getDimensionValue(areaStyle.getProperty(StyleConstants.STYLE_BORDER_RIGHT_WIDTH));
    root.setWidth(width);
    int height=0;
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      height=Math.max(height,child.getAllocatedHeight());
    }
    root.setContentHeight(height);
  }
  verticalAlign();
}",0.9845150774246128
72820,"protected void align(boolean lastLine){
  if (root == null) {
    return;
  }
  assert(parent instanceof PDFBlockStackingLM);
  String align=((PDFBlockStackingLM)parent).getTextAlign();
  if ((CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align) || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
    int spacing=root.getContentWidth() - getCurrentIP();
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (spacing > 0) {
        if (CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align)) {
          area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
        }
 else         if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
          area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
        }
      }
    }
  }
 else   if (CSSConstants.CSS_JUSTIFY_VALUE.equalsIgnoreCase(align) && !lastLine) {
    justify();
  }
  Iterator iter=root.getChildren();
  int height=root.getHeight();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    IStyle childStyle=child.getStyle();
    String vAlign=childStyle.getVerticalAlign();
    if (childStyle != null) {
      int spacing=height - child.getAllocatedHeight();
      if (spacing < 0) {
        spacing=0;
      }
      if (CSSConstants.CSS_BOTTOM_VALUE.equalsIgnoreCase(vAlign)) {
        child.setPosition(child.getX(),spacing + child.getY());
      }
 else       if (CSSConstants.CSS_MIDDLE_VALUE.equalsIgnoreCase(vAlign) || CSSConstants.CSS_BASELINE_VALUE.equalsIgnoreCase(vAlign)) {
        child.setPosition(child.getX(),spacing / 2 + child.getY());
      }
 else {
        int lineHeight=((PDFBlockStackingLM)parent).getLineHeight();
        if (lineHeight > 0) {
          child.setPosition(child.getX(),spacing / 2 + child.getY());
        }
      }
    }
  }
}","protected void align(boolean lastLine){
  if (root == null) {
    return;
  }
  assert(parent instanceof PDFBlockStackingLM);
  String align=((PDFBlockStackingLM)parent).getTextAlign();
  if ((CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align) || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
    int spacing=root.getContentWidth() - getCurrentIP();
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (spacing > 0) {
        if (CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align)) {
          area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
        }
 else         if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
          area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
        }
      }
    }
  }
 else   if (CSSConstants.CSS_JUSTIFY_VALUE.equalsIgnoreCase(align) && !lastLine) {
    justify();
  }
  verticalAlign();
}",0.6786454733932273
72821,"/** 
 * convert a object to given class Classes supported: Integer.class BigDecimal.class Boolean.class Time.class Date.class Double.class String.class Blob.class
 * @param source
 * @param toTypeClass
 * @return
 * @throws BirtException
 */
public static Object convert(Object source,Class toTypeClass) throws BirtException {
  if (toTypeClass == DataType.getClass(DataType.ANY_TYPE))   return source;
  if (toTypeClass == Integer.class)   return toInteger(source);
  if (toTypeClass == BigDecimal.class)   return toBigDecimal(source);
  if (toTypeClass == Boolean.class)   return toBoolean(source);
  if (toTypeClass == Time.class)   return toSqlTime(source);
  if (toTypeClass == java.sql.Date.class)   return toSqlDate(source);
  if (toTypeClass == java.sql.Timestamp.class)   return toDate(source);
  if (toTypeClass == Date.class)   return toDate(source);
  if (toTypeClass == Double.class)   return toDouble(source);
  if (toTypeClass == String.class)   return toString(source);
  if (toTypeClass == Blob.class) {
    if (source instanceof byte[])     return source;
 else     return toBlob(source);
  }
  if (toTypeClass == byte[].class)   return source;
  throw new CoreException(ResourceConstants.INVALID_TYPE,resourceBundle);
}","/** 
 * convert a object to given class Classes supported: Integer.class BigDecimal.class Boolean.class Time.class Date.class Double.class String.class Blob.class
 * @param source
 * @param toTypeClass
 * @return
 * @throws BirtException
 */
public static Object convert(Object source,Class toTypeClass) throws BirtException {
  if (source != null && source.getClass() == toTypeClass) {
    return source;
  }
  if (toTypeClass == DataType.getClass(DataType.ANY_TYPE))   return source;
  if (toTypeClass == Integer.class)   return toInteger(source);
  if (toTypeClass == BigDecimal.class)   return toBigDecimal(source);
  if (toTypeClass == Boolean.class)   return toBoolean(source);
  if (toTypeClass == Time.class)   return toSqlTime(source);
  if (toTypeClass == java.sql.Date.class)   return toSqlDate(source);
  if (toTypeClass == java.sql.Timestamp.class)   return toDate(source);
  if (toTypeClass == Date.class)   return toDate(source);
  if (toTypeClass == Double.class)   return toDouble(source);
  if (toTypeClass == String.class)   return toString(source);
  if (toTypeClass == Blob.class) {
    if (source instanceof byte[])     return source;
 else     return toBlob(source);
  }
  if (toTypeClass == byte[].class)   return source;
  throw new CoreException(ResourceConstants.INVALID_TYPE,resourceBundle);
}",0.9675654552559594
72822,List getMeasures();,List<IMeasure> getMeasures();,0.7916666666666666
72823,List getColumnLevels();,List<ILevel> getColumnLevels();,0.8518518518518519
72824,List getRowLevels();,List<ILevel> getRowLevels();,0.8333333333333334
72825,List getSortConditions();,List<ISortElement> getSortConditions();,0.78125
72826,List getFilterConditions();,List<IFilterConditionElement> getFilterConditions();,0.6835443037974683
72827,"public CrosstabCellInstanceImpl(ICellContent content,ExtendedItemHandle modelHandle){
  this.content=content;
  this.modelHandle=modelHandle;
  if (modelHandle != null) {
    id=modelHandle.getID();
  }
  try {
    IReportItem item=modelHandle.getReportItem();
    if (item instanceof AggregationCellHandle) {
      type=TYPE_AGGREGATION;
    }
  }
 catch (  ExtendedElementException e) {
    e.printStackTrace();
  }
}","public CrosstabCellInstanceImpl(ICellContent content,ExtendedItemHandle modelHandle,IReportContext context){
  this.content=content;
  this.modelHandle=modelHandle;
  this.context=context;
  if (modelHandle != null) {
    id=modelHandle.getID();
  }
  try {
    IReportItem item=modelHandle.getReportItem();
    if (item instanceof AggregationCellHandle) {
      type=TYPE_AGGREGATION;
    }
  }
 catch (  ExtendedElementException e) {
    e.printStackTrace();
  }
}",0.9468926553672316
72828,"public List getMeasures(){
  List ms=new ArrayList();
  for (int i=0; i < crh.getMeasureCount(); i++) {
    ms.add(new MeasureImpl(crh.getMeasure(i)));
  }
  return Collections.unmodifiableList(ms);
}","public List<IMeasure> getMeasures(){
  List<IMeasure> ms=new ArrayList<IMeasure>();
  for (int i=0; i < crh.getMeasureCount(); i++) {
    ms.add(new MeasureImpl(crh.getMeasure(i)));
  }
  return Collections.unmodifiableList(ms);
}",0.9302325581395348
72829,"public List getColumnLevels(){
  List ms=new ArrayList();
  for (int i=0; i < crh.getDimensionCount(COLUMN_AXIS_TYPE); i++) {
    DimensionViewHandle dv=crh.getDimension(COLUMN_AXIS_TYPE,i);
    for (int j=0; j < dv.getLevelCount(); j++) {
      ms.add(new LevelImpl(dv.getLevel(j)));
    }
  }
  return Collections.unmodifiableList(ms);
}","public List<ILevel> getColumnLevels(){
  List<ILevel> ms=new ArrayList<ILevel>();
  for (int i=0; i < crh.getDimensionCount(COLUMN_AXIS_TYPE); i++) {
    DimensionViewHandle dv=crh.getDimension(COLUMN_AXIS_TYPE,i);
    for (int j=0; j < dv.getLevelCount(); j++) {
      ms.add(new LevelImpl(dv.getLevel(j)));
    }
  }
  return Collections.unmodifiableList(ms);
}",0.9658119658119658
72830,"public List getRowLevels(){
  List ms=new ArrayList();
  for (int i=0; i < crh.getDimensionCount(ROW_AXIS_TYPE); i++) {
    DimensionViewHandle dv=crh.getDimension(ROW_AXIS_TYPE,i);
    for (int j=0; j < dv.getLevelCount(); j++) {
      ms.add(new LevelImpl(dv.getLevel(j)));
    }
  }
  return Collections.unmodifiableList(ms);
}","public List<ILevel> getRowLevels(){
  List<ILevel> ms=new ArrayList<ILevel>();
  for (int i=0; i < crh.getDimensionCount(ROW_AXIS_TYPE); i++) {
    DimensionViewHandle dv=crh.getDimension(ROW_AXIS_TYPE,i);
    for (int j=0; j < dv.getLevelCount(); j++) {
      ms.add(new LevelImpl(dv.getLevel(j)));
    }
  }
  return Collections.unmodifiableList(ms);
}",0.9649122807017544
72831,"public List getFilterConditions(){
  List filters=new ArrayList();
  ISimpleElementFactory factory=SimpleElementFactory.getInstance();
  for (Iterator itr=lv.filtersIterator(); itr.hasNext(); ) {
    FilterConditionElementHandle feh=(FilterConditionElementHandle)itr.next();
    filters.add(factory.getElement(feh));
  }
  if (filters.size() > 0) {
    return filters;
  }
  return Collections.EMPTY_LIST;
}","public List<IFilterConditionElement> getFilterConditions(){
  List<IFilterConditionElement> filters=new ArrayList<IFilterConditionElement>();
  ISimpleElementFactory factory=SimpleElementFactory.getInstance();
  for (Iterator itr=lv.filtersIterator(); itr.hasNext(); ) {
    FilterConditionElementHandle feh=(FilterConditionElementHandle)itr.next();
    filters.add((IFilterConditionElement)factory.getElement(feh));
  }
  if (filters.size() > 0) {
    return filters;
  }
  return Collections.EMPTY_LIST;
}",0.8905908096280087
72832,"public List getSortConditions(){
  List sorts=new ArrayList();
  ISimpleElementFactory factory=SimpleElementFactory.getInstance();
  for (Iterator itr=lv.sortsIterator(); itr.hasNext(); ) {
    SortElementHandle seh=(SortElementHandle)itr.next();
    sorts.add(factory.getElement(seh));
  }
  if (sorts.size() > 0) {
    return sorts;
  }
  return Collections.EMPTY_LIST;
}","public List<ISortElement> getSortConditions(){
  List<ISortElement> sorts=new ArrayList<ISortElement>();
  ISimpleElementFactory factory=SimpleElementFactory.getInstance();
  for (Iterator itr=lv.sortsIterator(); itr.hasNext(); ) {
    SortElementHandle seh=(SortElementHandle)itr.next();
    sorts.add((ISortElement)factory.getElement(seh));
  }
  if (sorts.size() > 0) {
    return sorts;
  }
  return Collections.EMPTY_LIST;
}",0.9301745635910224
72833,"public void handleCell(CrosstabCellHandle cell,ICellContent content,IReportContext context) throws BirtException {
  if (handler == null || cell == null) {
    return;
  }
  ICrosstabCellInstance cellInst=new CrosstabCellInstanceImpl(content,(ExtendedItemHandle)cell.getModelHandle());
  handler.callFunction(CrosstabScriptHandler.ON_CREATE_CELL,cellInst,context);
}","public void handleCell(CrosstabCellHandle cell,ICellContent content,IReportContext context) throws BirtException {
  if (handler == null || cell == null) {
    return;
  }
  ICrosstabCellInstance cellInst=new CrosstabCellInstanceImpl(content,(ExtendedItemHandle)cell.getModelHandle(),context);
  handler.callFunction(CrosstabScriptHandler.ON_CREATE_CELL,cellInst,context);
}",0.9891891891891892
72834,"public void handleCell(CrosstabCellHandle cell,ICellContent content,IReportContext context) throws BirtException {
  if (handler == null || cell == null) {
    return;
  }
  ICrosstabCellInstance cellInst=new CrosstabCellInstanceImpl(content,(ExtendedItemHandle)cell.getModelHandle());
  handler.callFunction(CrosstabScriptHandler.ON_RENDER_CELL,cellInst,context);
}","public void handleCell(CrosstabCellHandle cell,ICellContent content,IReportContext context) throws BirtException {
  if (handler == null || cell == null) {
    return;
  }
  ICrosstabCellInstance cellInst=new CrosstabCellInstanceImpl(content,(ExtendedItemHandle)cell.getModelHandle(),context);
  handler.callFunction(CrosstabScriptHandler.ON_RENDER_CELL,cellInst,context);
}",0.9891891891891892
72835,"/** 
 * Checks possible extends references to element in the given Library. If extends reference is unresolve, virtual elements are removed. And local property values of virtual elements are returned.
 * @param library the library instance
 * @return the map containing local values of virtual elements. Each key isthe id of extends child. Each value is another map of which the key is the base id of virtual element and the value is property name/value pair.
 * @throws LibraryException if there is any extends reference.
 */
private Map dealAllElementDecendents(Library library,int actionCode) throws SemanticException {
  Map overriddenValues=new HashMap();
  LevelContentIterator contentIter=new LevelContentIterator(library,library,1);
  while (contentIter.hasNext()) {
    DesignElement tmpElement=(DesignElement)contentIter.next();
    if (!tmpElement.getDefn().canExtend())     continue;
    Map values=dealElementDecendents(library,tmpElement,actionCode);
    if (actionCode == RELOAD_ACTION)     overriddenValues.putAll(values);
  }
  return overriddenValues;
}","/** 
 * Checks possible extends references to element in the given Library. If extends reference is unresolved, virtual elements are removed. And local property values of virtual elements are returned.
 * @param library the library instance
 * @return the map containing local values of virtual elements. Each key isthe id of extends child. Each value is another map of which the key is the base id of virtual element and the value is property name/value pair.
 * @throws LibraryException if there is any extends reference.
 */
private Map dealAllElementDecendents(Library library,int actionCode) throws SemanticException {
  Map overriddenValues=new HashMap();
  LevelContentIterator contentIter=new LevelContentIterator(library,library,1);
  while (contentIter.hasNext()) {
    DesignElement tmpElement=(DesignElement)contentIter.next();
    if (!tmpElement.getDefn().canExtend())     continue;
    Map values=dealElementDecendents(library,tmpElement,actionCode);
    if (actionCode == RELOAD_ACTION)     overriddenValues.putAll(values);
  }
  return overriddenValues;
}",0.9995333644423704
72836,"/** 
 * Returns the simple api element for the given <code>element</code>.
 * @param element the element handle
 * @return the simple api element instance
 */
public static IDesignElement getElement(DesignElementHandle element){
  if (element == null)   return null;
  if (element instanceof ReportDesignHandle)   return new ReportDesign((ReportDesignHandle)element);
  if (!(element instanceof ReportElementHandle))   return null;
  if (element instanceof DataItemHandle)   return new DataItem((DataItemHandle)element);
  if (element instanceof GridHandle)   return new Grid((GridHandle)element);
  if (element instanceof ImageHandle)   return new Image((ImageHandle)element);
  if (element instanceof LabelHandle)   return new Label((LabelHandle)element);
  if (element instanceof ListHandle)   return new List((ListHandle)element);
  if (element instanceof ListGroupHandle)   return new ListGroup((ListGroupHandle)element);
  if (element instanceof TableHandle)   return new Table((TableHandle)element);
  if (element instanceof TableGroupHandle)   return new TableGroup((TableGroupHandle)element);
  if (element instanceof TextDataHandle)   return new DynamicText((TextDataHandle)element);
  if (element instanceof TextItemHandle)   return new TextItem((TextItemHandle)element);
  if (element instanceof CellHandle)   return new Cell((CellHandle)element);
  if (element instanceof RowHandle)   return new Row((RowHandle)element);
  if (element instanceof ColumnHandle)   return new Column((ColumnHandle)element);
  if (element instanceof MasterPageHandle) {
    return new MasterPage((MasterPageHandle)element);
  }
  if (element instanceof FilterConditionElementHandle) {
    return new FilterConditionElement((FilterConditionElementHandle)element);
  }
  if (element instanceof SortElementHandle) {
    return new SortElement((SortElementHandle)element);
  }
  if (element instanceof ExtendedItemHandle) {
    org.eclipse.birt.report.model.api.simpleapi.IReportItem item=null;
    try {
      IReportItem extensionItem=((ExtendedItemHandle)element).getReportItem();
      if (extensionItem != null)       item=extensionItem.getSimpleElement();
    }
 catch (    ExtendedElementException e) {
    }
    if (item == null)     item=new ExtendedItem((ExtendedItemHandle)element);
    return item;
  }
  return new ReportElement((ReportElementHandle)element);
}","/** 
 * Returns the simple api element for the given <code>element</code>.
 * @param element the element handle
 * @return the simple api element instance
 */
public static IDesignElement getElement(DesignElementHandle element){
  if (element == null)   return null;
  if (element instanceof ReportDesignHandle)   return new ReportDesign((ReportDesignHandle)element);
  if (element instanceof DataItemHandle)   return new DataItem((DataItemHandle)element);
  if (element instanceof GridHandle)   return new Grid((GridHandle)element);
  if (element instanceof ImageHandle)   return new Image((ImageHandle)element);
  if (element instanceof LabelHandle)   return new Label((LabelHandle)element);
  if (element instanceof ListHandle)   return new List((ListHandle)element);
  if (element instanceof ListGroupHandle)   return new ListGroup((ListGroupHandle)element);
  if (element instanceof TableHandle)   return new Table((TableHandle)element);
  if (element instanceof TableGroupHandle)   return new TableGroup((TableGroupHandle)element);
  if (element instanceof TextDataHandle)   return new DynamicText((TextDataHandle)element);
  if (element instanceof TextItemHandle)   return new TextItem((TextItemHandle)element);
  if (element instanceof CellHandle)   return new Cell((CellHandle)element);
  if (element instanceof RowHandle)   return new Row((RowHandle)element);
  if (element instanceof ColumnHandle)   return new Column((ColumnHandle)element);
  if (element instanceof MasterPageHandle) {
    return new MasterPage((MasterPageHandle)element);
  }
  if (element instanceof FilterConditionElementHandle) {
    return new FilterConditionElement((FilterConditionElementHandle)element);
  }
  if (element instanceof SortElementHandle) {
    return new SortElement((SortElementHandle)element);
  }
  if (element instanceof ExtendedItemHandle) {
    org.eclipse.birt.report.model.api.simpleapi.IReportItem item=null;
    try {
      IReportItem extensionItem=((ExtendedItemHandle)element).getReportItem();
      if (extensionItem != null)       item=extensionItem.getSimpleElement();
    }
 catch (    ExtendedElementException e) {
    }
    if (item == null)     item=new ExtendedItem((ExtendedItemHandle)element);
    return item;
  }
  if (!(element instanceof ReportElementHandle))   return null;
  return new ReportElement((ReportElementHandle)element);
}",0.9729043183742592
72837,"private HyperlinkDef parseHyperLink(IContent content){
  IHyperlinkAction linkaction=content.getHyperlinkAction();
  if (linkaction != null) {
    if (linkaction.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      String bookmark=linkaction.getBookmark();
      if (ExcelUtil.isValidBookmarkName(bookmark)) {
        return new HyperlinkDef(linkaction.getBookmark(),IHyperlinkAction.ACTION_BOOKMARK,null);
      }
 else {
        return null;
      }
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_HYPERLINK) {
      return new HyperlinkDef(linkaction.getHyperlink(),IHyperlinkAction.ACTION_HYPERLINK,null);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_DRILLTHROUGH) {
      Action act=new Action(linkaction);
      IHTMLActionHandler actionHandler=null;
      Object ac=service.getOption(IRenderOption.ACTION_HANDLER);
      if (ac != null && ac instanceof IHTMLActionHandler) {
        actionHandler=(IHTMLActionHandler)ac;
        return new HyperlinkDef(actionHandler.getURL(act,service.getReportContext()),IHyperlinkAction.ACTION_DRILLTHROUGH,null);
      }
    }
  }
  return null;
}","private HyperlinkDef parseHyperLink(IContent content){
  IHyperlinkAction linkaction=content.getHyperlinkAction();
  if (linkaction != null) {
    String toolTip=linkaction.getTooltip();
    if (linkaction.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      String bookmark=linkaction.getBookmark();
      if (ExcelUtil.isValidBookmarkName(bookmark)) {
        return new HyperlinkDef(linkaction.getBookmark(),IHyperlinkAction.ACTION_BOOKMARK,null,toolTip);
      }
 else {
        return null;
      }
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_HYPERLINK) {
      return new HyperlinkDef(linkaction.getHyperlink(),IHyperlinkAction.ACTION_HYPERLINK,null,toolTip);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_DRILLTHROUGH) {
      Action act=new Action(linkaction);
      IHTMLActionHandler actionHandler=null;
      Object ac=service.getOption(IRenderOption.ACTION_HANDLER);
      if (ac != null && ac instanceof IHTMLActionHandler) {
        actionHandler=(IHTMLActionHandler)ac;
        return new HyperlinkDef(actionHandler.getURL(act,service.getReportContext()),IHyperlinkAction.ACTION_DRILLTHROUGH,null,toolTip);
      }
    }
  }
  return null;
}",0.9709401709401708
72838,"protected void writeTxtData(Data d){
  startCell(d.span.getCol(),d.span.getColSpan(),d.getRowSpan(),d.styleId,d.url);
  writeText(d);
  endCell();
}","protected void writeTxtData(Data d){
  startCell(d.span.getCol(),d.span.getColSpan(),d.getRowSpan(),d.styleId,d.url);
  writeText(d);
  if (d.url != null && d.url.getToolTip() != null) {
    writeComments(d.url);
  }
  endCell();
}",0.7229551451187335
72839,"public HyperlinkDef(String url,int type,String bookmark){
  this.url=url;
  this.type=type;
  this.bookmark=bookmark;
}","public HyperlinkDef(String url,int type,String bookmark,String toolTip){
  this.url=url;
  this.type=type;
  this.bookmark=bookmark;
  this.toolTip=toolTip;
}",0.8592057761732852
72840,"HyperlinkInfo(int type,String url,String bookmark){
  this.type=type;
  this.url=url;
  this.mark=bookmark;
}","HyperlinkInfo(int type,String url,String bookmark,String toolTip){
  this.type=type;
  this.url=url;
  this.mark=bookmark;
  this.toolTip=toolTip;
}",0.8482490272373541
72841,"/** 
 * Refresh the URL list of DriverClassLoader
 * @return if the refreshURL is different than the former one then return true otherwisereturn false
 * @throws OdaException 
 */
public boolean refreshURLs() throws OdaException {
  if (bundle == null)   return false;
  boolean foundNew=false;
  if (driverClassPath != null) {
    try {
      File driverClassFile=new File(driverClassPath);
      if (driverClassFile.exists()) {
        this.addURL(driverClassFile.toURI().toURL());
        if (driverClassFile.isDirectory()) {
          File[] driverFiles=driverClassFile.listFiles(new FileFilter(){
            public boolean accept(            File pathname){
              if (pathname.isFile() && OdaJdbcDriver.isDriverFile(pathname.getName())) {
                return true;
              }
              return false;
            }
          }
);
          for (int i=0; i < driverFiles.length; i++) {
            if (!fileSet.contains(driverFiles[i].getName())) {
              foundNew=true;
              fileSet.add(driverFiles[i].getName());
              addURL(driverFiles[i].toURI().toURL());
              logger.info(""String_Node_Str"" + driverFiles[i].getName() + ""String_Node_Str""+ driverFiles[i].toURI().toURL());
            }
          }
        }
      }
    }
 catch (    MalformedURLException e) {
      throw new OdaException(e);
    }
  }
  Enumeration files=bundle.getEntryPaths(OdaJdbcDriver.Constants.DRIVER_DIRECTORY);
  while (files.hasMoreElements()) {
    String fileName=(String)files.nextElement();
    if (OdaJdbcDriver.isDriverFile(fileName)) {
      if (!fileSet.contains(fileName)) {
        foundNew=true;
        fileSet.add(fileName);
        URL fileURL=bundle.getEntry(fileName);
        addURL(fileURL);
        logger.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ fileURL);
      }
    }
  }
  return foundNew;
}","/** 
 * Refresh the URL list of DriverClassLoader
 * @return if the refreshURL is different than the former one then return true otherwisereturn false
 * @throws OdaException 
 */
public boolean refreshURLs() throws OdaException {
  if (bundle == null)   return false;
  boolean foundNew=false;
  if (driverClassPath != null) {
    try {
      File driverClassFile=new File(driverClassPath);
      if (driverClassFile.exists()) {
        this.addURL(driverClassFile.toURI().toURL());
        if (driverClassFile.isDirectory()) {
          File[] driverFiles=driverClassFile.listFiles(new FileFilter(){
            public boolean accept(            File pathname){
              if (pathname.isFile() && OdaJdbcDriver.isDriverFile(pathname.getName())) {
                return true;
              }
              return false;
            }
          }
);
          for (int i=0; i < driverFiles.length; i++) {
            if (!fileSet.contains(driverFiles[i].getName())) {
              foundNew=true;
              fileSet.add(driverFiles[i].getName());
              addURL(driverFiles[i].toURI().toURL());
              logger.info(""String_Node_Str"" + driverFiles[i].getName() + ""String_Node_Str""+ driverFiles[i].toURI().toURL());
            }
          }
        }
      }
    }
 catch (    MalformedURLException e) {
      throw new OdaException(e);
    }
  }
  Enumeration files=bundle.getEntryPaths(OdaJdbcDriver.Constants.DRIVER_DIRECTORY);
  while (files != null && files.hasMoreElements()) {
    String fileName=(String)files.nextElement();
    if (OdaJdbcDriver.isDriverFile(fileName)) {
      if (!fileSet.contains(fileName)) {
        foundNew=true;
        fileSet.add(fileName);
        URL fileURL=bundle.getEntry(fileName);
        addURL(fileURL);
        logger.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ fileURL);
      }
    }
  }
  return foundNew;
}",0.9954702904343192
72842,"/** 
 * saveEditorContentsDE - saves the current editor contents to ROM using DE API
 * @param desHdl
 * @return true if updated else false.
 */
private boolean saveEditorContentsDE(DesignElementHandle desHdl){
  if (desHdl != null && getEditorText() != null) {
    try {
      if (cmbItemLastSelected != null) {
        desHdl.setStringProperty(cmbItemLastSelected.getName(),getEditorText());
      }
      selectionMap.put(getModel(),cmbExprListViewer.getSelection());
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
      return false;
    }
  }
  return true;
}","/** 
 * saveEditorContentsDE - saves the current editor contents to ROM using DE API
 * @param desHdl
 * @return true if updated else false.
 */
private boolean saveEditorContentsDE(DesignElementHandle desHdl){
  if (desHdl != null && getEditorText() != null) {
    try {
      if (cmbItemLastSelected != null) {
        String name=cmbItemLastSelected.getName();
        desHdl.setStringProperty(name,getEditorText());
        setEditorText(desHdl.getStringProperty(name));
      }
      selectionMap.put(getModel(),cmbExprListViewer.getSelection());
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
      return false;
    }
  }
  return true;
}",0.9059288537549408
72843,"public IParameterMetaData getParameterMetaData() throws OdaException {
  assertNotNull(callStat);
  if (this.cachedParameterMetaData != null)   return this.cachedParameterMetaData;
  int[] positionArray=paramUtil.getParameterPositions();
  List paramMetaList1=this.getCallableParamMetaData();
  List paramMetaList2=new ArrayList();
  for (int i=0; i < positionArray.length; i++) {
    int index=positionArray[i];
    if (paramMetaList1.size() >= index)     paramMetaList2.add(paramMetaList1.get(index - 1));
  }
  cachedParameterMetaData=new SPParameterMetaData(paramMetaList2);
  return cachedParameterMetaData;
}","public IParameterMetaData getParameterMetaData() throws OdaException {
  assertNotNull(callStat);
  if (this.cachedParameterMetaData != null)   return this.cachedParameterMetaData;
  int[] positionArray=paramUtil.getParameterPositions();
  List paramMetaList1=this.getCallableParamMetaData();
  List paramMetaList2=new ArrayList();
  for (int i=0; i < positionArray.length; i++) {
    int index=positionArray[i];
    if (paramMetaList1.size() >= index)     paramMetaList2.add(paramMetaList1.get(index - 1));
 else     throw new OdaException(ResourceConstants.PREPARESTATEMENT_PARAMETER_METADATA_CANNOT_GET);
  }
  cachedParameterMetaData=new SPParameterMetaData(paramMetaList2);
  return cachedParameterMetaData;
}",0.9246987951807228
72844,"public DesignElementHandle getHandle(ModuleHandle handle){
  return copy.getHandle(handle.getModule());
}","public DesignElementHandle getHandle(ModuleHandle handle){
  return getCopy().getHandle(handle.getModule());
}",0.9674418604651164
72845,"public void onRow(Object[] args){
  ++count;
}","public void onRow(Object[] args){
  if (!countByColumn || args == null || args.length == 0) {
    if (countByColumn) {
      countByColumn=false;
    }
    ++count;
  }
 else   if (args.length > 0 && args[0] != null) {
    ++count;
  }
}",0.2685512367491166
72846,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.DATA_FIELD_NAME,Constants.DATA_FIELD_DISPLAY_NAME,true,true,SupportedDataTypes.INTEGER_DOUBLE,""String_Node_Str"")};
}",0.527027027027027
72847,"public void testTotalCount() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_COUNT_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(0,ag.getParameterDefn().length);
  ac.start();
  for (int i=0; i < doubleArray1.length; i++) {
    ac.onRow(new Object[]{});
  }
  ac.finish();
  assertEquals(new Integer(15),ac.getValue());
  ac.start();
  for (int i=0; i < doubleArray2.length; i++) {
    ac.onRow(new Object[]{});
  }
  ac.finish();
  assertEquals(new Integer(14),ac.getValue());
  ac.start();
  for (int i=0; i < str1.length; i++) {
    ac.onRow(new Object[]{});
  }
  ac.finish();
  assertEquals(new Integer(14),ac.getValue());
  ac.start();
  ac.finish();
  assertEquals(new Integer(0),ac.getValue());
  ac.start();
  try {
    ac.getValue();
    assertTrue(false);
  }
 catch (  RuntimeException e) {
    assertTrue(true);
  }
}","public void testTotalCount() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_COUNT_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(1,ag.getParameterDefn().length);
  ac.start();
  for (int i=0; i < anyObjectArray.length; i++) {
    ac.onRow(new Object[]{anyObjectArray[i]});
  }
  ac.finish();
  assertEquals(new Integer(5),ac.getValue());
  ac.start();
  for (int i=0; i < anyObjectArray.length; i++) {
    ac.onRow(null);
  }
  ac.finish();
  assertEquals(new Integer(8),ac.getValue());
  ac.start();
  for (int i=0; i < doubleArray1.length; i++) {
    ac.onRow(new Object[]{});
  }
  ac.finish();
  assertEquals(new Integer(15),ac.getValue());
  ac.start();
  for (int i=0; i < doubleArray2.length; i++) {
    ac.onRow(new Object[]{});
  }
  ac.finish();
  assertEquals(new Integer(14),ac.getValue());
  ac.start();
  for (int i=0; i < str1.length; i++) {
    ac.onRow(new Object[]{});
  }
  ac.finish();
  assertEquals(new Integer(14),ac.getValue());
  ac.start();
  ac.finish();
  assertEquals(new Integer(0),ac.getValue());
  ac.start();
  try {
    ac.getValue();
    assertTrue(false);
  }
 catch (  RuntimeException e) {
    assertTrue(true);
  }
}",0.8437365475678003
72848,"/** 
 * Calculate the value by row
 * @param aggrIndex
 * @param startingGroupLevel
 * @param endingGroupLevel
 * @param context
 * @param scope
 * @throws DataException
 */
private boolean onRow(int aggrIndex,int startingGroupLevel,int endingGroupLevel,boolean populateValue) throws DataException {
  IAggrInfo aggrInfo=getAggrInfo(aggrIndex);
  Accumulator acc=null;
  boolean newGroup=false;
  IParameterDefn[] argDefs=aggrInfo.getAggregation().getParameterDefn();
  if (startingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc=accumulatorManagers[aggrIndex].next();
    acc.start();
    newGroup=true;
  }
 else {
    acc=accumulatorManagers[aggrIndex].getCurrentAccumulator();
  }
  boolean accepted=true;
  if (aggrInfo.getFilter() != null) {
    try {
      Object filterResult=ExprEvaluateUtil.evaluateValue(aggrInfo.getFilter(),this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
      if (filterResult == null)       accepted=true;
 else       accepted=DataTypeUtil.toBoolean(filterResult).booleanValue();
    }
 catch (    BirtException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  if (aggrInfo.getCalcualteLevel() > 0) {
    if (startingGroupLevel > aggrInfo.getCalcualteLevel())     accepted=false;
  }
  if (accepted) {
    final IBaseExpression[] arguments=aggrInfo.getArgument();
    if (!isFunctionCount(aggrInfo) && arguments == null) {
      DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
      wrapException(aggrIndex,e);
      return false;
    }
    try {
      for (int i=0; i < argDefs.length; i++) {
        if (!argDefs[i].isOptional() || newGroup) {
          if (i >= arguments.length) {
            throw new DataException(ResourceConstants.AGGREGATION_ARGUMENT_ERROR,new Object[]{argDefs[i].getName(),aggrInfo.getName()});
          }
 else {
            IBaseExpression argExpr=arguments[i];
            checkExpression(aggrInfo,argExpr);
            try {
              aggrArgs[aggrIndex][i]=ExprEvaluateUtil.evaluateValue(argExpr,this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
            }
 catch (            BirtException e) {
              throw DataException.wrap(e);
            }
          }
        }
      }
      if (argDefs.length != aggrInfo.getArgument().length) {
        DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
        wrapException(aggrIndex,e);
        return false;
      }
      acc.onRow(aggrArgs[aggrIndex]);
      newGroup=false;
    }
 catch (    DataException e) {
      wrapException(aggrIndex,e);
      return false;
    }
  }
  boolean isRunning=(aggrInfo.getAggregation().getType() == IAggrFunction.RUNNING_AGGR);
  if (isRunning && populateValue) {
    Object value=acc.getValue();
    currentRoundAggrValue[aggrIndex].add(value);
  }
  if (endingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc.finish();
    if ((!isRunning) && populateValue) {
      Object value=acc.getValue();
      currentRoundAggrValue[aggrIndex].add(value);
    }
  }
  return true;
}","/** 
 * Calculate the value by row
 * @param aggrIndex
 * @param startingGroupLevel
 * @param endingGroupLevel
 * @param context
 * @param scope
 * @throws DataException
 */
private boolean onRow(int aggrIndex,int startingGroupLevel,int endingGroupLevel,boolean populateValue) throws DataException {
  IAggrInfo aggrInfo=getAggrInfo(aggrIndex);
  Accumulator acc=null;
  boolean newGroup=false;
  IParameterDefn[] argDefs=aggrInfo.getAggregation().getParameterDefn();
  if (startingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc=accumulatorManagers[aggrIndex].next();
    acc.start();
    newGroup=true;
  }
 else {
    acc=accumulatorManagers[aggrIndex].getCurrentAccumulator();
  }
  boolean accepted=true;
  if (aggrInfo.getFilter() != null) {
    try {
      Object filterResult=ExprEvaluateUtil.evaluateValue(aggrInfo.getFilter(),this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
      if (filterResult == null)       accepted=true;
 else       accepted=DataTypeUtil.toBoolean(filterResult).booleanValue();
    }
 catch (    BirtException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  if (aggrInfo.getCalcualteLevel() > 0) {
    if (startingGroupLevel > aggrInfo.getCalcualteLevel())     accepted=false;
  }
  if (accepted) {
    final IBaseExpression[] arguments=aggrInfo.getArgument();
    if (!isFunctionCount(aggrInfo) && arguments == null) {
      DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
      wrapException(aggrIndex,e);
      return false;
    }
    try {
      int optionalAgrsNum=0;
      for (int i=0; i < argDefs.length; i++) {
        if (argDefs[i].isOptional()) {
          optionalAgrsNum++;
        }
        if (aggrInfo.getArgument() == null || i >= arguments.length + optionalAgrsNum) {
          throw new DataException(ResourceConstants.AGGREGATION_ARGUMENT_ERROR,new Object[]{argDefs[i].getName(),aggrInfo.getName()});
        }
        if (isEmptyScriptExpression(aggrInfo)) {
          aggrArgs[aggrIndex]=null;
        }
 else {
          evaluateArgsValue(aggrIndex,aggrInfo,i);
        }
      }
      if (aggrInfo.getArgument() == null || ((aggrInfo.getArgument().length != argDefs.length) && !(aggrInfo.getArgument().length == (argDefs.length - optionalAgrsNum)))) {
        DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
        wrapException(aggrIndex,e);
        return false;
      }
      acc.onRow(aggrArgs[aggrIndex]);
      newGroup=false;
    }
 catch (    DataException e) {
      wrapException(aggrIndex,e);
      return false;
    }
  }
  boolean isRunning=(aggrInfo.getAggregation().getType() == IAggrFunction.RUNNING_AGGR);
  if (isRunning && populateValue) {
    Object value=acc.getValue();
    currentRoundAggrValue[aggrIndex].add(value);
  }
  if (endingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc.finish();
    if ((!isRunning) && populateValue) {
      Object value=acc.getValue();
      currentRoundAggrValue[aggrIndex].add(value);
    }
  }
  return true;
}",0.8504942965779467
72849,"/** 
 * Check the aggregate object on group,if the aggregate object's type is GROUP_COLUMN_EXPR, its group level must be less than current group level. if type is FILTER_ON_GROUP_EXPR, its group level must be equals to current group level. if type is SORT_ON_GROUP_EXPR, its group level must be less or equal with current group level.
 * @param aggregateObj
 */
private int getCurrentGroupLevel(AggregateObject aggregateObj,Context context) throws DataException {
  AggregateExpression expr=aggregateObj.getAggregateExpr();
  IAggrFunction aggr=expr.getAggregation();
  List argList=expr.getArguments();
  int nFixedArgs=aggr.getParameterDefn().length;
  int groupLevel=currentGroupLevel;
  int nArgs=argList.size();
  CompiledExpression groupExpr=null;
  if (nArgs > nFixedArgs + 2 || nArgs < nFixedArgs) {
    DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,expr.getAggregation().getName());
    throw e;
  }
  if (nArgs == nFixedArgs + 2) {
    groupExpr=(CompiledExpression)argList.get(nArgs - 1);
  }
  if (groupExpr != null && !(groupExpr instanceof ConstantExpression)) {
    DataException e=new DataException(ResourceConstants.INVALID_AGGR_GROUP_EXPRESSION,aggr.getName());
    throw e;
  }
  Object groupLevelObj;
  Context cx=Context.enter();
  try {
    if (groupExpr != null)     groupLevelObj=groupExpr.evaluate(cx,scope);
 else {
      String currentGroupName=null;
      if (this.currentGroupLevelList.size() == 0)       currentGroupName=this.getScriptExpression().getGroupName();
 else       currentGroupName=this.currentGroupLevelList.get(this.currentGroupLevelList.size() - 1).toString();
      if (currentGroupName.equals(TOTAL_OVERALL))       groupLevelObj=new Integer(0);
 else       groupLevelObj=currentGroupName;
    }
  }
  finally {
    Context.exit();
  }
  if (groupLevelObj == null) {
  }
 else   if (groupLevelObj instanceof String) {
    int level=AggregationConstantsUtil.getGroupLevel((String)groupLevelObj,currentGroupLevel,this.baseQuery.getGrouping() == null ? 0 : this.baseQuery.getGrouping().length,false);
    if (level != -1) {
      groupLevel=level;
    }
 else {
      groupLevel=getGroupIndex((String)groupLevelObj);
    }
  }
 else   if (groupLevelObj instanceof Number) {
    int offset=((Number)groupLevelObj).intValue();
    if (offset < 0)     groupLevel=currentGroupLevel + offset;
 else     groupLevel=offset;
  }
switch (exprType) {
case IExpressionProcessor.FILTER_ON_GROUP_EXPR:
    if (groupLevel != currentGroupLevel) {
      DataException e=new DataException(ResourceConstants.INVALID_GROUP_LEVEL,aggr.getName());
      throw e;
    }
  break;
case IExpressionProcessor.SORT_ON_GROUP_EXPR:
if (groupLevel < 0 || groupLevel > currentGroupLevel) {
  DataException e=new DataException(ResourceConstants.INVALID_GROUP_LEVEL,aggr.getName());
  throw e;
}
break;
default :
if (groupLevel < 0) {
DataException e=new DataException(ResourceConstants.INVALID_GROUP_LEVEL,aggr.getName());
throw e;
}
break;
}
return groupLevel;
}","/** 
 * Check the aggregate object on group,if the aggregate object's type is GROUP_COLUMN_EXPR, its group level must be less than current group level. if type is FILTER_ON_GROUP_EXPR, its group level must be equals to current group level. if type is SORT_ON_GROUP_EXPR, its group level must be less or equal with current group level.
 * @param aggregateObj
 */
private int getCurrentGroupLevel(AggregateObject aggregateObj,Context context) throws DataException {
  AggregateExpression expr=aggregateObj.getAggregateExpr();
  IAggrFunction aggr=expr.getAggregation();
  List argList=expr.getArguments();
  int nFixedArgs=aggr.getParameterDefn().length;
  int groupLevel=currentGroupLevel;
  int nArgs=argList.size();
  CompiledExpression groupExpr=null;
  if (nArgs > nFixedArgs + 2 || nArgs < nFixedArgs) {
    if (nFixedArgs > 0 && !aggr.getParameterDefn()[0].isOptional()) {
      DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,expr.getAggregation().getName());
      throw e;
    }
  }
  if (nArgs == nFixedArgs + 2) {
    groupExpr=(CompiledExpression)argList.get(nArgs - 1);
  }
  if (groupExpr != null && !(groupExpr instanceof ConstantExpression)) {
    DataException e=new DataException(ResourceConstants.INVALID_AGGR_GROUP_EXPRESSION,aggr.getName());
    throw e;
  }
  Object groupLevelObj;
  Context cx=Context.enter();
  try {
    if (groupExpr != null)     groupLevelObj=groupExpr.evaluate(cx,scope);
 else {
      String currentGroupName=null;
      if (this.currentGroupLevelList.size() == 0)       currentGroupName=this.getScriptExpression().getGroupName();
 else       currentGroupName=this.currentGroupLevelList.get(this.currentGroupLevelList.size() - 1).toString();
      if (currentGroupName.equals(TOTAL_OVERALL))       groupLevelObj=new Integer(0);
 else       groupLevelObj=currentGroupName;
    }
  }
  finally {
    Context.exit();
  }
  if (groupLevelObj == null) {
  }
 else   if (groupLevelObj instanceof String) {
    int level=AggregationConstantsUtil.getGroupLevel((String)groupLevelObj,currentGroupLevel,this.baseQuery.getGrouping() == null ? 0 : this.baseQuery.getGrouping().length,false);
    if (level != -1) {
      groupLevel=level;
    }
 else {
      groupLevel=getGroupIndex((String)groupLevelObj);
    }
  }
 else   if (groupLevelObj instanceof Number) {
    int offset=((Number)groupLevelObj).intValue();
    if (offset < 0)     groupLevel=currentGroupLevel + offset;
 else     groupLevel=offset;
  }
switch (exprType) {
case IExpressionProcessor.FILTER_ON_GROUP_EXPR:
    if (groupLevel != currentGroupLevel) {
      DataException e=new DataException(ResourceConstants.INVALID_GROUP_LEVEL,aggr.getName());
      throw e;
    }
  break;
case IExpressionProcessor.SORT_ON_GROUP_EXPR:
if (groupLevel < 0 || groupLevel > currentGroupLevel) {
  DataException e=new DataException(ResourceConstants.INVALID_GROUP_LEVEL,aggr.getName());
  throw e;
}
break;
default :
if (groupLevel < 0) {
DataException e=new DataException(ResourceConstants.INVALID_GROUP_LEVEL,aggr.getName());
throw e;
}
break;
}
return groupLevel;
}",0.9868507560815252
72850,"public BasicCachedListExt(String tempDir){
  super(tempDir);
}","public BasicCachedListExt(String tempDir){
  super(tempDir,null);
}",0.9612403100775194
72851,"/** 
 * When mode is MODE_GENERATION, the writer stream of archive will be used. When mode is MODE_PRESENTATION, the reader stream of archive will be used. When mode is DIRECT_PRESENTATION, the archive will not be used. When mode is PRESENTATION_AND_GENERATION, both the write stream and the read  steram of archive will be used. 
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @return an instance of DataEngineContext
 */
public static DataEngineContext newInstance(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer) throws BirtException {
  return new DataEngineContext(mode,scope,reader,writer);
}","/** 
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @return
 * @throws BirtException
 * @deprecated
 */
public static DataEngineContext newInstance(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer) throws BirtException {
  return new DataEngineContext(mode,scope,reader,writer,null);
}",0.446938775510204
72852,"/** 
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @throws BirtException
 */
private DataEngineContext(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer) throws BirtException {
  Object[] params={new Integer(mode),scope,reader,writer};
  logger.entering(DataEngineContext.class.getName(),""String_Node_Str"",params);
  if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == DIRECT_PRESENTATION || mode == MODE_UPDATE))   throw new DataException(ResourceConstants.RD_INVALID_MODE);
  if (writer == null && mode == MODE_GENERATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_PRESENTATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_UPDATE)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  this.mode=mode;
  this.scope=scope;
  this.reader=reader;
  this.writer=writer;
  this.cacheOption=CACHE_USE_DEFAULT;
  logger.exiting(DataEngineContext.class.getName(),""String_Node_Str"");
}","/** 
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @throws BirtException
 */
private DataEngineContext(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer,ClassLoader classLoader) throws BirtException {
  Object[] params={new Integer(mode),scope,reader,writer,classLoader};
  logger.entering(DataEngineContext.class.getName(),""String_Node_Str"",params);
  if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == DIRECT_PRESENTATION || mode == MODE_UPDATE))   throw new DataException(ResourceConstants.RD_INVALID_MODE);
  if (writer == null && mode == MODE_GENERATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_PRESENTATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_UPDATE)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  this.classLoader=classLoader;
  this.mode=mode;
  this.scope=scope;
  this.reader=reader;
  this.writer=writer;
  this.cacheOption=CACHE_USE_DEFAULT;
  logger.exiting(DataEngineContext.class.getName(),""String_Node_Str"");
}",0.9693140794223828
72853,"/** 
 * @param initialCapacity
 */
public BasicCachedArray(String tempDir,int initialCapacity){
  if (initialCapacity < 0)   throw new IllegalArgumentException(""String_Node_Str"" + initialCapacity);
  this.cachedList=new BasicCachedList(tempDir);
  this.initialCapacity=initialCapacity;
}","/** 
 * @param initialCapacity
 */
public BasicCachedArray(String tempDir,int initialCapacity){
  if (initialCapacity < 0)   throw new IllegalArgumentException(""String_Node_Str"" + initialCapacity);
  this.cachedList=new BasicCachedList(tempDir,DataEngineSession.getCurrentClassLoader());
  this.initialCapacity=initialCapacity;
}",0.9318181818181818
72854,"/** 
 * @param list
 */
public BasicCachedList(String tempDir,List list){
  this(tempDir);
  if (list == null)   return;
  for (int i=0; i < list.size(); i++) {
    this.add(list.get(i));
  }
}","/** 
 * @param list
 */
public BasicCachedList(String tempDir,ClassLoader loader,List list){
  this(tempDir,loader);
  if (list == null)   return;
  for (int i=0; i < list.size(); i++) {
    this.add(list.get(i));
  }
}",0.9368932038834952
72855,"/** 
 * Read one object from disk.
 * @param oos
 * @param object
 * @throws IOException
 */
protected Object readObject(DataInputStream dis) throws IOException {
  int fieldCount=IOUtil.readInt(dis);
  if (fieldCount == NULL_VALUE) {
    return null;
  }
  return IOUtil.readObject(dis);
}","/** 
 * Read one object from disk.
 * @param oos
 * @param object
 * @throws IOException
 */
protected Object readObject(DataInputStream dis) throws IOException {
  int fieldCount=IOUtil.readInt(dis);
  if (fieldCount == NULL_VALUE) {
    return null;
  }
  return IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
}",0.932475884244373
72856,"/** 
 * @param list
 */
public CachedList(String tempDir,ICachedObjectCreator creator,List list){
  super(tempDir,list);
  this.creator=creator;
}","/** 
 * @param list
 */
public CachedList(String tempDir,ClassLoader loader,ICachedObjectCreator creator,List list){
  super(tempDir,loader,list);
  this.creator=creator;
}",0.9182389937106918
72857,"protected Object readObject(DataInputStream dis) throws IOException {
  int fieldCount=IOUtil.readInt(dis);
  if (fieldCount == NULL_VALUE) {
    return null;
  }
  Object[] objects=new Object[fieldCount];
  for (int i=0; i < objects.length; i++) {
    objects[i]=IOUtil.readObject(dis);
  }
  return creator.createInstance(objects);
}","protected Object readObject(DataInputStream dis) throws IOException {
  int fieldCount=IOUtil.readInt(dis);
  if (fieldCount == NULL_VALUE) {
    return null;
  }
  Object[] objects=new Object[fieldCount];
  for (int i=0; i < objects.length; i++) {
    objects[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
  }
  return creator.createInstance(objects);
}",0.9410112359550562
72858,"private void populateAggregations(String tempDir) throws DataException {
  this.currentAggrCount=manager.getAggrCount();
  if (currentAggrCount > 0) {
    currentRoundAggrValue=new List[currentAggrCount];
    aggrArgs=new Object[currentAggrCount][];
    for (int i=0; i < this.currentAggrCount; i++) {
      currentRoundAggrValue[i]=new BasicCachedList(tempDir);
      IAggrInfo aggrInfo=this.manager.getAggrDefn(i);
      aggrArgs[i]=new Object[aggrInfo.getAggregation().getParameterDefn().length];
    }
    accumulatorManagers=new AccumulatorManager[currentAggrCount];
  }
  this.calculate();
}","private void populateAggregations(String tempDir) throws DataException {
  this.currentAggrCount=manager.getAggrCount();
  if (currentAggrCount > 0) {
    currentRoundAggrValue=new List[currentAggrCount];
    aggrArgs=new Object[currentAggrCount][];
    for (int i=0; i < this.currentAggrCount; i++) {
      currentRoundAggrValue[i]=new BasicCachedList(tempDir,DataEngineSession.getCurrentClassLoader());
      IAggrInfo aggrInfo=this.manager.getAggrDefn(i);
      aggrArgs[i]=new Object[aggrInfo.getAggregation().getParameterDefn().length];
    }
    accumulatorManagers=new AccumulatorManager[currentAggrCount];
  }
  this.calculate();
}",0.9660194174757282
72859,"/** 
 * @param dis
 * @param rsMeta
 * @param count
 * @return
 * @throws IOException
 */
public static IResultObject readResultObject(DataInputStream dis,IResultClass rsMeta,int count) throws IOException {
  Object[] obs=new Object[count];
  for (int i=0; i < count; i++)   obs[i]=IOUtil.readObject(dis);
  return new ResultObject(rsMeta,obs);
}","/** 
 * @param dis
 * @param rsMeta
 * @param count
 * @return
 * @throws IOException
 */
public static IResultObject readResultObject(DataInputStream dis,IResultClass rsMeta,int count) throws IOException {
  Object[] obs=new Object[count];
  for (int i=0; i < count; i++)   obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
  return new ResultObject(rsMeta,obs);
}",0.9427792915531336
72860,"/** 
 * This method is used to filter out the GroupBoundaryInfo instances that are marked as ""not accepted"" from GroupBoundaryInfos.
 * @param groupArray
 * @return
 */
List[] filterGroupBoundaryInfos(List[] groupArray){
  List[] result=new List[groupArray.length];
  for (int i=0; i < result.length; i++) {
    result[i]=new CachedList(resultPopoulator.getSession().getTempDir(),GroupBoundaryInfo.getCreator());
  }
  for (int i=0; i < groupArray.length; i++) {
    for (int j=0; j < groupArray[i].size(); j++) {
      if (((GroupBoundaryInfo)groupArray[i].get(j)).isAccpted()) {
        result[i].add(groupArray[i].get(j));
      }
    }
  }
  return result;
}","/** 
 * This method is used to filter out the GroupBoundaryInfo instances that are marked as ""not accepted"" from GroupBoundaryInfos.
 * @param groupArray
 * @return
 */
List[] filterGroupBoundaryInfos(List[] groupArray){
  List[] result=new List[groupArray.length];
  for (int i=0; i < result.length; i++) {
    result[i]=new CachedList(resultPopoulator.getSession().getTempDir(),DataEngineSession.getCurrentClassLoader(),GroupBoundaryInfo.getCreator());
  }
  for (int i=0; i < groupArray.length; i++) {
    for (int j=0; j < groupArray[i].size(); j++) {
      if (((GroupBoundaryInfo)groupArray[i].get(j)).isAccpted()) {
        result[i].add(groupArray[i].get(j));
      }
    }
  }
  return result;
}",0.9692532942898976
72861,"/** 
 * Re-sort the GroupBoundaryInfo instances of a lower group level according the ordering of GroupBoundaryInfo instances of a higher group level .
 * @param higherGroup
 * @param lowerGroup
 * @return
 */
private List mergeTwoGroupBoundaryInfoGroups(List higherGroup,List lowerGroup){
  List result=new CachedList(tempDir,GroupBoundaryInfo.getCreator());
  for (int i=0; i < higherGroup.size(); i++) {
    GroupBoundaryInfo gbi1=(GroupBoundaryInfo)higherGroup.get(i);
    for (int j=0; j < lowerGroup.size(); j++) {
      if (gbi1.isInBoundary((GroupBoundaryInfo)lowerGroup.get(j)))       result.add(lowerGroup.get(j));
    }
  }
  return result;
}","/** 
 * Re-sort the GroupBoundaryInfo instances of a lower group level according the ordering of GroupBoundaryInfo instances of a higher group level .
 * @param higherGroup
 * @param lowerGroup
 * @return
 */
private List mergeTwoGroupBoundaryInfoGroups(List higherGroup,List lowerGroup){
  List result=new CachedList(tempDir,DataEngineSession.getCurrentClassLoader(),GroupBoundaryInfo.getCreator());
  for (int i=0; i < higherGroup.size(); i++) {
    GroupBoundaryInfo gbi1=(GroupBoundaryInfo)higherGroup.get(i);
    for (int j=0; j < lowerGroup.size(); j++) {
      if (gbi1.isInBoundary((GroupBoundaryInfo)lowerGroup.get(j)))       result.add(lowerGroup.get(j));
    }
  }
  return result;
}",0.9687964338781576
72862,"/** 
 * The structue of a groupBoundaryInfoArray is exactly same as that of GroupCalculationUtil.groups,except that all GroupInfo instances are replaced by GroupBoundaryInfo instances.
 * @return
 * @throws DataException
 */
List[] getGroupBoundaryInfos() throws DataException {
  List[] groupBoundaryInfos=new List[groups.length];
  for (int i=1; i <= groups.length; i++) {
    groupBoundaryInfos[i - 1]=new CachedList(tempDir,GroupBoundaryInfo.getCreator());
    for (int j=0; j < groups[i - 1].size(); j++) {
      groupBoundaryInfos[i - 1].add(getGroupBoundaryInfo(i,j));
    }
  }
  return groupBoundaryInfos;
}","/** 
 * The structue of a groupBoundaryInfoArray is exactly same as that of GroupCalculationUtil.groups,except that all GroupInfo instances are replaced by GroupBoundaryInfo instances.
 * @return
 * @throws DataException
 */
List[] getGroupBoundaryInfos() throws DataException {
  List[] groupBoundaryInfos=new List[groups.length];
  for (int i=1; i <= groups.length; i++) {
    groupBoundaryInfos[i - 1]=new CachedList(tempDir,DataEngineSession.getCurrentClassLoader(),GroupBoundaryInfo.getCreator());
    for (int j=0; j < groups[i - 1].size(); j++) {
      groupBoundaryInfos[i - 1].add(getGroupBoundaryInfo(i,j));
    }
  }
  return groupBoundaryInfos;
}",0.967032967032967
72863,"void readGroupsFromStream(InputStream inputStream) throws IOException {
  int size=IOUtil.readInt(inputStream);
  this.groups=new CachedList[size];
  for (int i=0; i < size; i++) {
    List list=new CachedList(tempDir,GroupInfo.getCreator());
    ;
    int asize=IOUtil.readInt(inputStream);
    for (int j=0; j < asize; j++) {
      GroupInfo groupInfo=new GroupInfo();
      groupInfo.parent=IOUtil.readInt(inputStream);
      groupInfo.firstChild=IOUtil.readInt(inputStream);
      list.add(groupInfo);
    }
    this.groups[i]=list;
  }
}","void readGroupsFromStream(InputStream inputStream) throws IOException {
  int size=IOUtil.readInt(inputStream);
  this.groups=new CachedList[size];
  for (int i=0; i < size; i++) {
    List list=new CachedList(tempDir,DataEngineSession.getCurrentClassLoader(),GroupInfo.getCreator());
    ;
    int asize=IOUtil.readInt(inputStream);
    for (int j=0; j < asize; j++) {
      GroupInfo groupInfo=new GroupInfo();
      groupInfo.parent=IOUtil.readInt(inputStream);
      groupInfo.firstChild=IOUtil.readInt(inputStream);
      list.add(groupInfo);
    }
    this.groups[i]=list;
  }
}",0.9626998223801064
72864,"/** 
 * @param cx
 * @param groupBoundaryInfos
 * @param i
 * @param groupedFilters
 * @param j
 * @throws DataException
 */
private void populateGroupBoundaryInfoFilterValues(Context cx,List[] groupBoundaryInfos,int i,List groupedFilters) throws DataException {
  if (i > 1) {
    int passedGroups=0;
    for (int k=0; k < groupBoundaryInfos[i - 2].size(); k++) {
      List currentGroupArray=new CachedList(tempDir,GroupBoundaryInfo.getCreator());
      for (int n=0; n < groupBoundaryInfos[i - 1].size(); n++) {
        if ((((GroupBoundaryInfo)groupBoundaryInfos[i - 2].get(k)).isInBoundary(((GroupBoundaryInfo)groupBoundaryInfos[i - 1].get(n)))))         currentGroupArray.add(groupBoundaryInfos[i - 1].get(n));
      }
      makeAGroupFilteringMultiPass(cx,i,groupedFilters,currentGroupArray,passedGroups);
      passedGroups+=currentGroupArray.size();
    }
  }
 else {
    makeAGroupFilteringMultiPass(cx,i,groupedFilters,groupBoundaryInfos[i - 1],0);
  }
}","/** 
 * @param cx
 * @param groupBoundaryInfos
 * @param i
 * @param groupedFilters
 * @param j
 * @throws DataException
 */
private void populateGroupBoundaryInfoFilterValues(Context cx,List[] groupBoundaryInfos,int i,List groupedFilters) throws DataException {
  if (i > 1) {
    int passedGroups=0;
    for (int k=0; k < groupBoundaryInfos[i - 2].size(); k++) {
      List currentGroupArray=new CachedList(tempDir,DataEngineSession.getCurrentClassLoader(),GroupBoundaryInfo.getCreator());
      for (int n=0; n < groupBoundaryInfos[i - 1].size(); n++) {
        if ((((GroupBoundaryInfo)groupBoundaryInfos[i - 2].get(k)).isInBoundary(((GroupBoundaryInfo)groupBoundaryInfos[i - 1].get(n)))))         currentGroupArray.add(groupBoundaryInfos[i - 1].get(n));
      }
      makeAGroupFilteringMultiPass(cx,i,groupedFilters,currentGroupArray,passedGroups);
      passedGroups+=currentGroupArray.size();
    }
  }
 else {
    makeAGroupFilteringMultiPass(cx,i,groupedFilters,groupBoundaryInfos[i - 1],0);
  }
}",0.9787018255578094
72865,"/** 
 * @throws DataException
 */
private void readCurrentRow() throws DataException {
  try {
    rowIndex=IOUtil.readInt(rowInputStream);
    startingGroupLevel=IOUtil.readInt(rowInputStream);
    endingGroupLevel=IOUtil.readInt(rowInputStream);
    columnValueMap.clear();
    for (int i=0; i < columnList.size(); i++) {
      columnValueMap.put(columnList.get(i),IOUtil.readObject(rowInputStream));
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_CACHE_TEMPFILE_ERROR);
  }
}","/** 
 * @throws DataException
 */
private void readCurrentRow() throws DataException {
  try {
    rowIndex=IOUtil.readInt(rowInputStream);
    startingGroupLevel=IOUtil.readInt(rowInputStream);
    endingGroupLevel=IOUtil.readInt(rowInputStream);
    columnValueMap.clear();
    for (int i=0; i < columnList.size(); i++) {
      columnValueMap.put(columnList.get(i),IOUtil.readObject(rowInputStream,DataEngineSession.getCurrentClassLoader()));
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_CACHE_TEMPFILE_ERROR);
  }
}",0.9611111111111112
72866,"/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CacheResultIterator(String tempDir,IQueryResults queryResults) throws DataException {
  Object[] params={tempDir,queryResults.getID()};
  logger.entering(CacheResultIterator.class.getName(),""String_Node_Str"",params);
  this.columnValueMap=new HashMap();
  this.currRowIndex=-1;
  this.queryResults=queryResults;
  try {
    createCacheInputStream(tempDir);
    resultClass=new ResultClass(this.metaInputStream);
    rowCount=IOUtil.readInt(rowInputStream);
    int columnSize=IOUtil.readInt(rowInputStream);
    columnList=new ArrayList();
    for (int i=0; i < columnSize; i++) {
      columnList.add(IOUtil.readObject(rowInputStream));
    }
    logger.exiting(CacheResultIterator.class.getName(),""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    throw new DataException(ResourceConstants.OPEN_CACHE_TEMPFILE_ERROR);
  }
catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_CACHE_TEMPFILE_ERROR);
  }
}","/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CacheResultIterator(String tempDir,IQueryResults queryResults) throws DataException {
  Object[] params={tempDir,queryResults.getID()};
  logger.entering(CacheResultIterator.class.getName(),""String_Node_Str"",params);
  this.columnValueMap=new HashMap();
  this.currRowIndex=-1;
  this.queryResults=queryResults;
  try {
    createCacheInputStream(tempDir);
    resultClass=new ResultClass(this.metaInputStream);
    rowCount=IOUtil.readInt(rowInputStream);
    int columnSize=IOUtil.readInt(rowInputStream);
    columnList=new ArrayList();
    for (int i=0; i < columnSize; i++) {
      columnList.add(IOUtil.readObject(rowInputStream,DataEngineSession.getCurrentClassLoader()));
    }
    logger.exiting(CacheResultIterator.class.getName(),""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    throw new DataException(ResourceConstants.OPEN_CACHE_TEMPFILE_ERROR);
  }
catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_CACHE_TEMPFILE_ERROR);
  }
}",0.9799426934097422
72867,"/** 
 * @param dir
 */
private static void deleteDirectory(File dir){
  File[] subFiles=dir.listFiles();
  if (subFiles != null) {
    for (int i=0; i < subFiles.length; i++) {
      if (subFiles[i].isDirectory()) {
        deleteDirectory(subFiles[i]);
      }
 else {
        safeDelete(subFiles[i]);
      }
    }
  }
  safeDelete(dir);
}","/** 
 * @param dir
 */
private static void deleteDirectory(File dir){
  File[] subFiles=dir.listFiles();
  if (subFiles != null) {
    for (int i=0; i < subFiles.length; i++) {
      if (subFiles[i].isDirectory()) {
        deleteDirectory(subFiles[i]);
      }
 else {
      }
    }
  }
  safeDelete(dir);
}",0.8906009244992296
72868,"/** 
 * Constructor.
 * @param engine
 */
public DataEngineSession(DataEngineImpl engine){
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  Context cx=Context.enter();
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(cx);
  }
  new CoreJavaScriptInitializer().initialize(cx,scope);
  Context.exit();
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode()+ File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(this);
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}","/** 
 * Constructor.
 * @param engine
 */
public DataEngineSession(DataEngineImpl engine){
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  Context cx=Context.enter();
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(cx);
  }
  new CoreJavaScriptInitializer().initialize(cx,scope);
  Context.exit();
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode()+ File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(this);
  classLoaderHolder.set(engine.getContext().getClassLoader());
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}",0.9575757575757576
72869,"public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  logger.log(Level.FINE,""String_Node_Str"");
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  if (textValue == null || textValue == ""String_Node_Str"") {
    textValue=""String_Node_Str"";
  }
  int display;
  if (textValue != null && textValue.indexOf('\n') >= 0) {
    display=getElementType(x,y,width,height,mergedStyle);
  }
 else {
    display=getElementType(x,y,null,null,mergedStyle);
  }
  String tagName;
  boolean metadataOutput=false;
  if (enableMetadata) {
    metadataOutput=metadataEmitter.startText(text,HTMLEmitterUtil.getTagByType(display,DISPLAY_FLAG_ALL));
  }
  tagName=openTagByType(display,DISPLAY_FLAG_ALL);
  String styleClass=text.getStyleClass();
  setStyleName(styleClass,text);
  if (!metadataOutput) {
    outputBookmark(text,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildTextStyle(text,styleBuffer,display);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  htmlEmitter.handleVerticalAlignBegin(text);
  String url=validate(text.getHyperlinkAction());
  if (url != null) {
    outputAction(text.getHyperlinkAction(),url);
    writer.text(textValue);
    writer.closeTag(HTMLTags.TAG_A);
  }
 else {
    writer.text(textValue);
  }
  htmlEmitter.handleVerticalAlignEnd(text);
  writer.closeTag(tagName);
  if (enableMetadata) {
    metadataEmitter.endText(text);
  }
}","public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  logger.log(Level.FINE,""String_Node_Str"");
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  if (textValue == null || textValue == ""String_Node_Str"") {
    textValue=""String_Node_Str"";
  }
  int display;
  if (textValue != null && textValue.indexOf('\n') >= 0) {
    display=getElementType(x,y,width,height,mergedStyle);
  }
 else {
    display=getElementType(x,y,null,null,mergedStyle);
  }
  String tagName;
  boolean metadataOutput=false;
  if (enableMetadata) {
    metadataOutput=metadataEmitter.startText(text,HTMLEmitterUtil.getTagByType(display,DISPLAY_FLAG_ALL));
  }
  tagName=openTagByType(display,DISPLAY_FLAG_ALL);
  String styleClass=text.getStyleClass();
  setStyleName(styleClass,text);
  if (!metadataOutput) {
    outputBookmark(text,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildTextStyle(text,styleBuffer,display);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  htmlEmitter.handleVerticalAlignBegin(text);
  String url=validate(text.getHyperlinkAction());
  if (url != null) {
    outputAction(text.getHyperlinkAction(),url);
    String strColor=mergedStyle.getColor();
    if (null != strColor) {
      styleBuffer.setLength(0);
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(strColor);
      styleBuffer.append(""String_Node_Str"");
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
    writer.text(textValue);
    writer.closeTag(HTMLTags.TAG_A);
  }
 else {
    writer.text(textValue);
  }
  htmlEmitter.handleVerticalAlignEnd(text);
  writer.closeTag(tagName);
  if (enableMetadata) {
    metadataEmitter.endText(text);
  }
}",0.913929784824462
72870,"/** 
 * Constructor
 * @param handleAdpter
 * @param type
 * @param dimensionHandle
 */
public AddDimensionViewHandleCommand(CrosstabCellAdapter handleAdpter,int type,DimensionHandle dimensionHandle,Object after){
  super(dimensionHandle);
  setHandleAdpter(handleAdpter);
  setType(type);
  setDimensionHandles(new DimensionHandle[]{dimensionHandle});
  this.after=after;
}","/** 
 * Constructor
 * @param handleAdpter
 * @param type
 * @param dimensionHandle
 */
public AddDimensionViewHandleCommand(CrosstabCellAdapter handleAdpter,int type,DimensionHandle dimensionHandle,Object after){
  super(dimensionHandle);
  setHandleAdpter(handleAdpter);
  setType(type);
  setDimensionHandles(new DimensionHandle[]{dimensionHandle});
  this.after=after;
  setLabel(NAME);
}",0.9765013054830288
72871,"/** 
 * Constructor
 * @param handleAdpter
 * @param measureHandle
 */
public AddMeasureViewHandleCommand(CrosstabCellAdapter handleAdpter,MeasureHandle measureHandle,Object after){
  super(measureHandle);
  this.handleAdpter=handleAdpter;
  this.measureHandle=measureHandle;
  this.after=after;
}","/** 
 * Constructor
 * @param handleAdpter
 * @param measureHandle
 */
public AddMeasureViewHandleCommand(CrosstabCellAdapter handleAdpter,MeasureHandle measureHandle,Object after){
  super(measureHandle);
  this.handleAdpter=handleAdpter;
  this.measureHandle=measureHandle;
  this.after=after;
  setLabel(NAME);
}",0.9705882352941176
72872,"/** 
 * Constructor
 * @param handleAdpter
 * @param measureHandle
 */
public AddMultipleMeasureCommand(CrosstabCellAdapter handleAdpter,List list,Object after){
  super(handleAdpter.getDesignElementHandle());
  this.handleAdpter=handleAdpter;
  this.list=list;
  this.after=after;
}","/** 
 * Constructor
 * @param handleAdpter
 * @param measureHandle
 */
public AddMultipleMeasureCommand(CrosstabCellAdapter handleAdpter,List list,Object after){
  super(handleAdpter.getDesignElementHandle());
  this.handleAdpter=handleAdpter;
  this.list=list;
  this.after=after;
  setLabel(NAME);
}",0.9691780821917808
72873,"public ChangeAreaCommand(DesignElementHandle parent,DesignElementHandle child,Object after){
  super(child);
  this.after=after;
  if (parent != null) {
    parentVewHandle=CrosstabAdaptUtil.getDimensionViewHandle(CrosstabAdaptUtil.getExtendedItemHandle(parent));
    setType(parentVewHandle.getAxisType());
  }
  childViewHandle=CrosstabAdaptUtil.getDimensionViewHandle(CrosstabAdaptUtil.getExtendedItemHandle(child));
}","public ChangeAreaCommand(DesignElementHandle parent,DesignElementHandle child,Object after){
  super(child);
  this.after=after;
  if (parent != null) {
    parentVewHandle=CrosstabAdaptUtil.getDimensionViewHandle(CrosstabAdaptUtil.getExtendedItemHandle(parent));
    setType(parentVewHandle.getAxisType());
  }
  childViewHandle=CrosstabAdaptUtil.getDimensionViewHandle(CrosstabAdaptUtil.getExtendedItemHandle(child));
  setLabel(NAME);
}",0.9790697674418604
72874,"/** 
 * @param parent
 * @param child
 * @param after
 */
public ChangeMeasureOrderCommand(DesignElementHandle parent,DesignElementHandle child,Object after){
  super(child);
  this.after=after;
  parentVewHandle=CrosstabAdaptUtil.getMeasureViewHandle(CrosstabAdaptUtil.getExtendedItemHandle(parent));
  childViewHandle=CrosstabAdaptUtil.getMeasureViewHandle(CrosstabAdaptUtil.getExtendedItemHandle(child));
}","/** 
 * @param parent
 * @param child
 * @param after
 */
public ChangeMeasureOrderCommand(DesignElementHandle parent,DesignElementHandle child,Object after){
  super(child);
  this.after=after;
  parentVewHandle=CrosstabAdaptUtil.getMeasureViewHandle(CrosstabAdaptUtil.getExtendedItemHandle(parent));
  childViewHandle=CrosstabAdaptUtil.getMeasureViewHandle(CrosstabAdaptUtil.getExtendedItemHandle(child));
  setLabel(NAME);
}",0.9784688995215312
72875,"public CreateDimensionViewCommand(CrosstabHandleAdapter handleAdpter,int type,DimensionHandle[] dimensionHandles){
  super(dimensionHandles[0]);
  setHandleAdpter(handleAdpter);
  setType(type);
  setDimensionHandles(dimensionHandles);
}","public CreateDimensionViewCommand(CrosstabHandleAdapter handleAdpter,int type,DimensionHandle[] dimensionHandles){
  super(dimensionHandles[0]);
  setHandleAdpter(handleAdpter);
  setType(type);
  setDimensionHandles(dimensionHandles);
  setLabel(NAME);
}",0.9634146341463414
72876,"/** 
 * Constructor
 * @param handleAdpter
 * @param measureHandle
 */
public CreateMeasureViewCommand(CrosstabHandleAdapter handleAdpter,MeasureHandle measureHandle){
  super(measureHandle);
  this.handleAdpter=handleAdpter;
  this.measureHandle=measureHandle;
}","/** 
 * Constructor
 * @param handleAdpter
 * @param measureHandle
 */
public CreateMeasureViewCommand(CrosstabHandleAdapter handleAdpter,MeasureHandle measureHandle){
  super(measureHandle);
  this.handleAdpter=handleAdpter;
  this.measureHandle=measureHandle;
  setLabel(NAME);
}",0.9669117647058824
72877,"/** 
 * Constructor
 * @param container
 * @param model
 * @param model2
 */
public CrosstabFlowMoveChildCommand(Object child,Object after,Object container){
  super((DesignElementHandle)child);
  this.child=child;
  this.after=after;
  if (container instanceof IAdaptable) {
    this.container=((IAdaptable)container).getAdapter(DesignElementHandle.class);
  }
 else {
    this.container=container;
  }
}","/** 
 * Constructor
 * @param container
 * @param model
 * @param model2
 */
public CrosstabFlowMoveChildCommand(Object child,Object after,Object container){
  super((DesignElementHandle)child);
  this.child=child;
  this.after=after;
  if (container instanceof IAdaptable) {
    this.container=((IAdaptable)container).getAdapter(DesignElementHandle.class);
  }
 else {
    this.container=container;
  }
  setLabel(TRANS_LABEL_MOVE_ELEMENT);
}",0.9551886792452832
72878,"public Iterator getMemberValueIterator(TabularCubeHandle cubeHandle,String targetLevel,ILevelDefinition[] higherLevelDefns,Object[] values,Map appContext) throws AdapterException {
  try {
    if ((higherLevelDefns == null && values != null) || (higherLevelDefns != null && values == null) || cubeHandle == null || targetLevel == null)     return null;
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)(cubeHandle.getDimension(target.getDimensionName()).getContent(TabularDimensionHandle.HIERARCHIES_PROP,0));
    if (hierHandle.getDataSet() != null)     defineDataSourceAndDataSet(hierHandle.getDataSet());
 else     defineDataSourceAndDataSet(cubeHandle.getDataSet());
    Map levelValueMap=new HashMap();
    if (higherLevelDefns != null) {
      for (int i=0; i < higherLevelDefns.length; i++) {
        if (target.getDimensionName().equals(higherLevelDefns[i].getHierarchy().getDimension().getName())) {
          levelValueMap.put(higherLevelDefns[i].getName(),values[i]);
        }
      }
    }
    DataSetIterator it=new DataSetIterator(this.session,hierHandle,appContext);
    return new MemberValueIterator(it,levelValueMap,target.getLevelName(),target.getAttrName());
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","public Iterator getMemberValueIterator(TabularCubeHandle cubeHandle,String targetLevel,ILevelDefinition[] higherLevelDefns,Object[] values,Map appContext) throws AdapterException {
  try {
    if ((higherLevelDefns == null && values != null) || (higherLevelDefns != null && values == null) || cubeHandle == null || targetLevel == null)     return null;
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)(cubeHandle.getDimension(target.getDimensionName()).getContent(TabularDimensionHandle.HIERARCHIES_PROP,0));
    if (hierHandle.getDataSet() != null)     defineDataSourceAndDataSet(hierHandle.getDataSet());
 else     defineDataSourceAndDataSet(cubeHandle.getDataSet());
    Map levelValueMap=new HashMap();
    if (higherLevelDefns != null) {
      for (int i=0; i < higherLevelDefns.length; i++) {
        if (target.getDimensionName().equals(higherLevelDefns[i].getHierarchy().getDimension().getName())) {
          levelValueMap.put(higherLevelDefns[i].getName(),values[i]);
        }
      }
    }
    DataSetIterator it=createDataSetIterator(appContext,hierHandle);
    return new MemberValueIterator(it,levelValueMap,target.getLevelName(),target.getAttrName());
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9841386942087792
72879,"public void dispose(){
  super.dispose();
  if (browser != null) {
    WebViewer.cancel(browser);
  }
  bParameter=null;
  browser=null;
  model=null;
}","public void dispose(){
  super.dispose();
  if (browser != null && !browser.isDisposed()) {
    WebViewer.cancel(browser);
  }
  bParameter=null;
  browser=null;
  model=null;
}",0.9240121580547112
72880,"/** 
 * handle something when try to leave the page
 */
public void handleLeaveThePage(){
  if (browser != null) {
    WebViewer.cancel(browser);
    browser.setUrl(""String_Node_Str"");
  }
}","/** 
 * handle something when try to leave the page
 */
public void handleLeaveThePage(){
  if (browser != null && !browser.isDisposed()) {
    WebViewer.cancel(browser);
    browser.setUrl(""String_Node_Str"");
  }
}",0.9382716049382716
72881,"public void startForeign(IForeignContent foreign){
  IStyle mergedStyle=foreign.getStyle();
  logger.log(Level.FINE,""String_Node_Str"");
  boolean isTemplate=false;
  Object genBy=foreign.getGenerateBy();
  if (genBy instanceof TemplateDesign) {
    isTemplate=true;
    setupTemplateElement((TemplateDesign)genBy,foreign);
    writer.openTag(HTMLTags.TAG_DIV);
    writer.attribute(HTMLTags.ATTR_ALIGN,""String_Node_Str"");
  }
  DimensionType x=foreign.getX();
  DimensionType y=foreign.getY();
  DimensionType width=foreign.getWidth();
  DimensionType height=foreign.getHeight();
  int display;
  display=getElementType(x,y,width,height,mergedStyle);
  String tagName;
  boolean metadataOutput=false;
  if (enableMetadata) {
    metadataOutput=metadataEmitter.startForeign(foreign,HTMLEmitterUtil.getTagByType(display,DISPLAY_FLAG_ALL));
  }
  tagName=openTagByType(display,DISPLAY_FLAG_ALL);
  String styleClass=foreign.getStyleClass();
  setStyleName(styleClass);
  if (!metadataOutput) {
    outputBookmark(foreign,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,foreign.getHelpText());
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildForeignStyle(foreign,styleBuffer,display);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  String rawType=foreign.getRawType();
  boolean isHtml=IForeignContent.HTML_TYPE.equalsIgnoreCase(rawType);
  if (isHtml) {
    htmlEmitter.handleVerticalAlignBegin(foreign);
    String url=validate(foreign.getHyperlinkAction());
    if (url != null) {
      outputAction(foreign.getHyperlinkAction(),url);
      outputHtmlText(foreign);
      writer.closeTag(HTMLTags.TAG_A);
    }
 else {
      outputHtmlText(foreign);
    }
    htmlEmitter.handleVerticalAlignEnd(foreign);
  }
  writer.closeTag(tagName);
  if (enableMetadata) {
    metadataEmitter.endForeign(foreign);
  }
  if (isTemplate) {
    writer.closeTag(HTMLTags.TAG_DIV);
  }
}","public void startForeign(IForeignContent foreign){
  IStyle mergedStyle=foreign.getStyle();
  logger.log(Level.FINE,""String_Node_Str"");
  boolean isTemplate=false;
  Object genBy=foreign.getGenerateBy();
  if (genBy instanceof TemplateDesign) {
    isTemplate=true;
    setupTemplateElement((TemplateDesign)genBy,foreign);
    writer.openTag(HTMLTags.TAG_DIV);
    writer.attribute(HTMLTags.ATTR_ALIGN,""String_Node_Str"");
  }
  DimensionType x=foreign.getX();
  DimensionType y=foreign.getY();
  DimensionType width=foreign.getWidth();
  DimensionType height=foreign.getHeight();
  int display;
  display=getElementType(x,y,width,height,mergedStyle);
  String tagName;
  boolean metadataOutput=false;
  if (enableMetadata) {
    metadataOutput=metadataEmitter.startForeign(foreign,HTMLEmitterUtil.getTagByType(display,DISPLAY_FLAG_ALL));
  }
  tagName=openTagByType(display,DISPLAY_FLAG_ALL);
  String styleClass=foreign.getStyleClass();
  setStyleName(styleClass,foreign);
  if (!metadataOutput) {
    outputBookmark(foreign,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,foreign.getHelpText());
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildForeignStyle(foreign,styleBuffer,display);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  String rawType=foreign.getRawType();
  boolean isHtml=IForeignContent.HTML_TYPE.equalsIgnoreCase(rawType);
  if (isHtml) {
    htmlEmitter.handleVerticalAlignBegin(foreign);
    String url=validate(foreign.getHyperlinkAction());
    if (url != null) {
      outputAction(foreign.getHyperlinkAction(),url);
      outputHtmlText(foreign);
      writer.closeTag(HTMLTags.TAG_A);
    }
 else {
      outputHtmlText(foreign);
    }
    htmlEmitter.handleVerticalAlignEnd(foreign);
  }
  writer.closeTag(tagName);
  if (enableMetadata) {
    metadataEmitter.endForeign(foreign);
  }
  if (isTemplate) {
    writer.closeTag(HTMLTags.TAG_DIV);
  }
}",0.997911227154047
72882,"public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  logger.log(Level.FINE,""String_Node_Str"");
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  if (textValue == null || textValue == ""String_Node_Str"") {
    textValue=""String_Node_Str"";
  }
  int display;
  if (textValue != null && textValue.indexOf('\n') >= 0) {
    display=getElementType(x,y,width,height,mergedStyle);
  }
 else {
    display=getElementType(x,y,null,null,mergedStyle);
  }
  String tagName;
  boolean metadataOutput=false;
  if (enableMetadata) {
    metadataOutput=metadataEmitter.startText(text,HTMLEmitterUtil.getTagByType(display,DISPLAY_FLAG_ALL));
  }
  tagName=openTagByType(display,DISPLAY_FLAG_ALL);
  String styleClass=text.getStyleClass();
  setStyleName(styleClass);
  if (!metadataOutput) {
    outputBookmark(text,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildTextStyle(text,styleBuffer,display);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  htmlEmitter.handleVerticalAlignBegin(text);
  String url=validate(text.getHyperlinkAction());
  if (url != null) {
    outputAction(text.getHyperlinkAction(),url);
    writer.text(textValue);
    writer.closeTag(HTMLTags.TAG_A);
  }
 else {
    writer.text(textValue);
  }
  htmlEmitter.handleVerticalAlignEnd(text);
  writer.closeTag(tagName);
  if (enableMetadata) {
    metadataEmitter.endText(text);
  }
}","public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  logger.log(Level.FINE,""String_Node_Str"");
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  if (textValue == null || textValue == ""String_Node_Str"") {
    textValue=""String_Node_Str"";
  }
  int display;
  if (textValue != null && textValue.indexOf('\n') >= 0) {
    display=getElementType(x,y,width,height,mergedStyle);
  }
 else {
    display=getElementType(x,y,null,null,mergedStyle);
  }
  String tagName;
  boolean metadataOutput=false;
  if (enableMetadata) {
    metadataOutput=metadataEmitter.startText(text,HTMLEmitterUtil.getTagByType(display,DISPLAY_FLAG_ALL));
  }
  tagName=openTagByType(display,DISPLAY_FLAG_ALL);
  String styleClass=text.getStyleClass();
  setStyleName(styleClass,text);
  if (!metadataOutput) {
    outputBookmark(text,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildTextStyle(text,styleBuffer,display);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  htmlEmitter.handleVerticalAlignBegin(text);
  String url=validate(text.getHyperlinkAction());
  if (url != null) {
    outputAction(text.getHyperlinkAction(),url);
    writer.text(textValue);
    writer.closeTag(HTMLTags.TAG_A);
  }
 else {
    writer.text(textValue);
  }
  htmlEmitter.handleVerticalAlignEnd(text);
  writer.closeTag(tagName);
  if (enableMetadata) {
    metadataEmitter.endText(text);
  }
}",0.9984486503257834
72883,"/** 
 * Sets the <code>'class'</code> property and stores the style to styleMap object.
 * @param styleName the style name
 */
protected void setStyleName(String styleName){
  if (isEmbeddable) {
    return;
  }
  if (styleName != null && outputtedStyles.contains(styleName)) {
    writer.attribute(HTMLTags.ATTR_CLASS,styleName);
  }
}","/** 
 * Sets the <code>'class'</code> property and stores the style to styleMap object.
 * @param styleName the style name
 */
protected void setStyleName(String styleName,IContent content){
  StringBuffer classBuffer=new StringBuffer();
  if (isEmbeddable) {
    return;
  }
  if (styleName != null && outputtedStyles.contains(styleName)) {
    classBuffer.append(styleName);
  }
  if (hasCsslinks) {
    Object genBy=content.getGenerateBy();
    if (genBy instanceof StyledElementDesign) {
      DesignElementHandle handle=((StyledElementDesign)genBy).getHandle();
      if (handle != null) {
        SharedStyleHandle style=handle.getStyle();
        if (style != null) {
          if (classBuffer.length() != 0) {
            classBuffer.append(""String_Node_Str"" + style.getName());
          }
 else {
            classBuffer.append(style.getName());
          }
        }
      }
    }
  }
  if (classBuffer.length() != 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,classBuffer.toString());
  }
}",0.4887892376681614
72884,"protected void writeColumns(ITableContent table){
  for (int i=0; i < table.getColumnCount(); i++) {
    IColumn column=table.getColumn(i);
    writer.openTag(HTMLTags.TAG_COL);
    if (enableAgentStyleEngine) {
      String styleClass=column.getStyleClass();
      setStyleName(styleClass);
    }
    StringBuffer styleBuffer=new StringBuffer();
    htmlEmitter.buildColumnStyle(column,styleBuffer);
    writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    htmlEmitter.handleColumnAlign(column);
    if (enableMetadata) {
      InstanceID iid=column.getInstanceID();
      if (iid != null) {
        writer.attribute(""String_Node_Str"",iid.toString());
      }
    }
    writer.closeTag(HTMLTags.TAG_COL);
  }
}","protected void writeColumns(ITableContent table){
  for (int i=0; i < table.getColumnCount(); i++) {
    IColumn column=table.getColumn(i);
    writer.openTag(HTMLTags.TAG_COL);
    if (enableAgentStyleEngine) {
      String styleClass=column.getStyleClass();
      setStyleName(styleClass,table);
    }
    StringBuffer styleBuffer=new StringBuffer();
    htmlEmitter.buildColumnStyle(column,styleBuffer);
    writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    htmlEmitter.handleColumnAlign(column);
    if (enableMetadata) {
      InstanceID iid=column.getInstanceID();
      if (iid != null) {
        writer.attribute(""String_Node_Str"",iid.toString());
      }
    }
    writer.closeTag(HTMLTags.TAG_COL);
  }
}",0.9958734525447044
72885,"public void startContainer(IContainerContent container){
  logger.log(Level.FINE,""String_Node_Str"");
  htmlEmitter.openContainerTag(container);
  String styleClass=container.getStyleClass();
  setStyleName(styleClass);
  String bookmark=container.getBookmark();
  if (bookmark == null) {
    bookmark=idGenerator.generateUniqueID();
    container.setBookmark(bookmark);
  }
  HTMLEmitterUtil.setBookmark(writer,HTMLTags.TAG_DIV,bookmark);
  if (enableMetadata) {
    HTMLEmitterUtil.setActiveIDTypeIID(writer,ouputInstanceIDs,container);
  }
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildContainerStyle(container,styleBuffer);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  htmlEmitter.handleContainerAlign(container);
}","public void startContainer(IContainerContent container){
  logger.log(Level.FINE,""String_Node_Str"");
  htmlEmitter.openContainerTag(container);
  String styleClass=container.getStyleClass();
  setStyleName(styleClass,container);
  String bookmark=container.getBookmark();
  if (bookmark == null) {
    bookmark=idGenerator.generateUniqueID();
    container.setBookmark(bookmark);
  }
  HTMLEmitterUtil.setBookmark(writer,HTMLTags.TAG_DIV,bookmark);
  if (enableMetadata) {
    HTMLEmitterUtil.setActiveIDTypeIID(writer,ouputInstanceIDs,container);
  }
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildContainerStyle(container,styleBuffer);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  htmlEmitter.handleContainerAlign(container);
}",0.993455497382199
72886,"public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (htmlRtLFlag) {
    String reportStyleName=report == null ? null : report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      if (null != style) {
        style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.RIGHT_VALUE);
      }
    }
  }
  if (null == layoutPreference) {
    if (report != null) {
      Report reportDesign=report.getDesign();
      ReportDesignHandle designHandle=reportDesign.getReportDesign();
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,isEmbeddable,layoutPreference);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,isEmbeddable,layoutPreference);
  }
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      htmlEmitter.buildDefaultStyle(defaultStyleBuffer,style);
    }
  }
  if (isEmbeddable) {
    fixTransparentPNG();
    fixRedirect();
    writer.openTag(HTMLTags.TAG_DIV);
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_HEAD);
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    ReportDesignHandle designHandle=reportDesign.getReportDesign();
    String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
    if (title == null) {
      if (renderOption != null) {
        HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
        title=htmlOption.getHtmlTitle();
      }
    }
    if (title != null) {
      writer.openTag(HTMLTags.TAG_TITLE);
      writer.text(title);
      writer.closeTag(HTMLTags.TAG_TITLE);
    }
  }
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  String defaultStyleName=""String_Node_Str"";
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    writer.style('.' + defaultStyleName,defaultStyleBuffer.toString());
    Map styles=reportDesign.getStyles();
    Iterator iter=styles.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      String styleName=(String)entry.getKey();
      style=(IStyle)entry.getValue();
      styleBuffer.setLength(0);
      htmlEmitter.buildStyle(styleBuffer,style);
      if (styleBuffer.length() > 0) {
        writer.style('.' + styleName,styleBuffer.toString());
        outputtedStyles.add(styleName);
      }
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  fixTransparentPNG();
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
  }
  if (outputMasterPageContent) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
}","public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (htmlRtLFlag) {
    String reportStyleName=report == null ? null : report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      if (null != style) {
        style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.RIGHT_VALUE);
      }
    }
  }
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
  }
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,isEmbeddable,layoutPreference);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,isEmbeddable,layoutPreference);
  }
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      htmlEmitter.buildDefaultStyle(defaultStyleBuffer,style);
    }
  }
  if (isEmbeddable) {
    fixTransparentPNG();
    fixRedirect();
    writer.openTag(HTMLTags.TAG_DIV);
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_HEAD);
  if (designHandle != null) {
    String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
    if (title == null) {
      if (renderOption != null) {
        HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
        title=htmlOption.getHtmlTitle();
      }
    }
    if (title != null) {
      writer.openTag(HTMLTags.TAG_TITLE);
      writer.text(title);
      writer.closeTag(HTMLTags.TAG_TITLE);
    }
  }
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  String defaultStyleName=""String_Node_Str"";
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    writer.style('.' + defaultStyleName,defaultStyleBuffer.toString());
    Map styles=reportDesign.getStyles();
    Iterator iter=styles.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      String styleName=(String)entry.getKey();
      style=(IStyle)entry.getValue();
      styleBuffer.setLength(0);
      htmlEmitter.buildStyle(styleBuffer,style);
      if (styleBuffer.length() > 0) {
        writer.style('.' + styleName,styleBuffer.toString());
        outputtedStyles.add(styleName);
      }
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  hasCsslinks=false;
  fixTransparentPNG();
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
  }
  if (outputMasterPageContent) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
}",0.935601142560374
72887,"public void startCell(ICellContent cell){
  logger.log(Level.FINE,""String_Node_Str"");
  boolean isHead=isCellInHead(cell);
  if (isHead) {
    writer.openTag(HTMLTags.TAG_TH);
  }
 else {
    writer.openTag(HTMLTags.TAG_TD);
  }
  String styleClass=cell.getStyleClass();
  setStyleName(styleClass);
  int colSpan=cell.getColSpan();
  if (colSpan > 1) {
    writer.attribute(HTMLTags.ATTR_COLSPAN,colSpan);
  }
  int rowSpan=cell.getRowSpan();
  if (rowSpan > 1) {
    writer.attribute(HTMLTags.ATTR_ROWSPAN,rowSpan);
  }
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildCellStyle(cell,styleBuffer,isHead);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  htmlEmitter.handleCellAlign(cell);
  if (!startedGroups.isEmpty()) {
    IGroupContent group=(IGroupContent)startedGroups.firstElement();
    String bookmark=group.getBookmark();
    if (bookmark == null) {
      bookmark=idGenerator.generateUniqueID();
      group.setBookmark(bookmark);
    }
    writer.attribute(HTMLTags.ATTR_ID,group.getBookmark());
    startedGroups.remove(group);
    Iterator iter=startedGroups.iterator();
    while (iter.hasNext()) {
      group=(IGroupContent)iter.next();
      outputBookmark(group);
    }
    startedGroups.clear();
  }
  if (enableMetadata) {
    metadataEmitter.startCell(cell);
  }
}","public void startCell(ICellContent cell){
  logger.log(Level.FINE,""String_Node_Str"");
  boolean isHead=isCellInHead(cell);
  if (isHead) {
    writer.openTag(HTMLTags.TAG_TH);
  }
 else {
    writer.openTag(HTMLTags.TAG_TD);
  }
  String styleClass=cell.getStyleClass();
  setStyleName(styleClass,cell);
  int colSpan=cell.getColSpan();
  if (colSpan > 1) {
    writer.attribute(HTMLTags.ATTR_COLSPAN,colSpan);
  }
  int rowSpan=cell.getRowSpan();
  if (rowSpan > 1) {
    writer.attribute(HTMLTags.ATTR_ROWSPAN,rowSpan);
  }
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildCellStyle(cell,styleBuffer,isHead);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  htmlEmitter.handleCellAlign(cell);
  if (!startedGroups.isEmpty()) {
    IGroupContent group=(IGroupContent)startedGroups.firstElement();
    String bookmark=group.getBookmark();
    if (bookmark == null) {
      bookmark=idGenerator.generateUniqueID();
      group.setBookmark(bookmark);
    }
    writer.attribute(HTMLTags.ATTR_ID,group.getBookmark());
    startedGroups.remove(group);
    Iterator iter=startedGroups.iterator();
    while (iter.hasNext()) {
      group=(IGroupContent)iter.next();
      outputBookmark(group);
    }
    startedGroups.clear();
  }
  if (enableMetadata) {
    metadataEmitter.startCell(cell);
  }
}",0.9981124952812382
72888,"/** 
 * Draws the background color of the PPT.
 * @param color the color to be drawn
 * @param x the start X coordinate
 * @param y the start Y coordinate
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 */
public void drawBackgroundColor(Color color,double x,double y,double width,double height){
  if (color == null) {
    return;
  }
  print(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  print(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  print(""String_Node_Str"" + Integer.toHexString(color.getRGB() & 0x00ffffff) + ""String_Node_Str"");
  println(""String_Node_Str"" + ""String_Node_Str"");
}","/** 
 * Draws the background color of the PPT.
 * @param color the color to be drawn
 * @param x the start X coordinate
 * @param y the start Y coordinate
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 */
public void drawBackgroundColor(Color color,double x,double y,double width,double height){
  if (color == null) {
    return;
  }
  print(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  print(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  print(""String_Node_Str"" + getColorString(color) + ""String_Node_Str"");
  println(""String_Node_Str"" + ""String_Node_Str"");
}",0.970446735395189
72889,"/** 
 * @throws BirtException
 */
private void displayPreResult(IQueryResults qr,boolean printGroupInfo,boolean useSkipTo) throws BirtException {
  assertTrue(qr.getResultMetaData() != null);
  IResultIterator ri=qr.getResultIterator();
  if (useSkipTo) {
    if (this.PRE_use_skipto_num == -1)     ri.moveTo(0);
 else     ri.moveTo(this.PRE_use_skipto_num);
  }
 else {
    ri.next();
  }
  do {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(rowExprName[i]) + ""String_Node_Str"";
    if (!this.notIncludeAggr) {
      for (int i=0; i < totalExprName.length; i++)       abc+=ri.getValue(totalExprName[i]) + ""String_Node_Str"";
    }
    if (this.updateNewBindingName != null && this.updateNewBindingExpr != null)     abc+=ri.getValue(this.updateNewBindingName) + ""String_Node_Str"";
    if (printGroupInfo)     abc+=ri.getStartingGroupLevel() + ""String_Node_Str"";
    this.testPrintln(abc + ri.getRowId());
    if (this.UPDATE_add_subquery == 1) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName1.length; i++)         abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
        if (this.USE_DATE_IN_SUBQUERY)         abc+=subRi.getValue(""String_Node_Str"");
        this.testPrintln(abc);
      }
    }
    if (this.UPDATE_add_subquery == 2) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName2,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName2.length; i++)         abc+=subRi.getValue(subRowExprName2[i]) + ""String_Node_Str"";
        this.testPrintln(abc);
      }
    }
    if (this.add_subquery_on_query) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
      abc=""String_Node_Str"";
      for (int i=0; i < subRowExprName1.length; i++)       abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
      this.testPrintln(abc);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName1.length; i++)         abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
        this.testPrintln(abc);
      }
    }
  }
 while (ri.next());
  if (this.TEST_ISEMPTY)   assertTrue(ri.isEmpty());
 else   assertFalse(ri.isEmpty());
  this.testPrintln(""String_Node_Str"");
  ri.close();
  myPreDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void displayPreResult(IQueryResults qr,boolean printGroupInfo,boolean useSkipTo) throws BirtException {
  assertTrue(qr.getResultMetaData() != null);
  IResultIterator ri=qr.getResultIterator();
  if (useSkipTo) {
    if (this.PRE_use_skipto_num == -1)     ri.moveTo(0);
 else     ri.moveTo(this.PRE_use_skipto_num);
  }
 else {
    ri.next();
  }
  do {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(rowExprName[i]) + ""String_Node_Str"";
    if (!this.notIncludeAggr) {
      for (int i=0; i < totalExprName.length; i++)       abc+=ri.getValue(totalExprName[i]) + ""String_Node_Str"";
    }
    if (this.updateNewBindingName != null && this.updateNewBindingExpr != null)     abc+=ri.getValue(this.updateNewBindingName) + ""String_Node_Str"";
    if (printGroupInfo)     abc+=ri.getStartingGroupLevel() + ""String_Node_Str"";
    this.testPrintln(abc + ri.getRowId() + (this.GEN_add_group1 ? (""String_Node_Str"" + ri.getStartingGroupLevel() + ""String_Node_Str""+ ri.getEndingGroupLevel()) : ""String_Node_Str""));
    if (this.UPDATE_add_subquery == 1) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName1.length; i++)         abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
        if (this.USE_DATE_IN_SUBQUERY)         abc+=subRi.getValue(""String_Node_Str"");
        this.testPrintln(abc);
      }
    }
    if (this.UPDATE_add_subquery == 2) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName2,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName2.length; i++)         abc+=subRi.getValue(subRowExprName2[i]) + ""String_Node_Str"";
        this.testPrintln(abc);
      }
    }
    if (this.add_subquery_on_query) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
      abc=""String_Node_Str"";
      for (int i=0; i < subRowExprName1.length; i++)       abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
      this.testPrintln(abc);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName1.length; i++)         abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
        this.testPrintln(abc);
      }
    }
  }
 while (ri.next());
  if (this.TEST_ISEMPTY)   assertTrue(ri.isEmpty());
 else   assertFalse(ri.isEmpty());
  this.testPrintln(""String_Node_Str"");
  ri.close();
  myPreDataEngine.shutdown();
}",0.9720293592541164
72890,"/** 
 * @return
 */
private QueryDefinition newGenIVReportQuery(){
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  if (this.GEN_use_invalid_column)   qd.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  if (!this.notIncludeAggr) {
    for (int i=0; i < totalBeArray.length; i++)     qd.addResultSetExpression(this.totalExprName[i],totalBeArray[i]);
  }
  if (this.GEN_add_filter == true) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.TEST_ISEMPTY) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.GEN_add_sort) {
    SortDefinition sortDefn=new SortDefinition();
    sortDefn.setColumn(""String_Node_Str"");
    qd.addSort(sortDefn);
  }
  if (this.GEN_add_group == true) {
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
    if (this.GEN_add_subquery == true) {
      SubqueryDefinition subqueryDefn=getSubQueryDefn(qd);
      gd.addSubquery(subqueryDefn);
    }
  }
  if (add_subquery_on_query) {
    qd.addSubquery(getSubQueryDefn(qd));
  }
  return qd;
}","/** 
 * @return
 */
private QueryDefinition newGenIVReportQuery(){
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  if (this.GEN_use_invalid_column)   qd.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  if (!this.notIncludeAggr) {
    for (int i=0; i < totalBeArray.length; i++)     qd.addResultSetExpression(this.totalExprName[i],totalBeArray[i]);
  }
  if (this.GEN_add_filter == true) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.TEST_ISEMPTY) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.GEN_add_sort) {
    SortDefinition sortDefn=new SortDefinition();
    sortDefn.setColumn(""String_Node_Str"");
    qd.addSort(sortDefn);
  }
  if (this.GEN_add_group == true) {
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
    if (this.GEN_add_subquery == true) {
      SubqueryDefinition subqueryDefn=getSubQueryDefn(qd);
      gd.addSubquery(subqueryDefn);
    }
  }
  if (this.GEN_add_group1 == true) {
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
    gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
  }
  if (add_subquery_on_query) {
    qd.addSubquery(getSubQueryDefn(qd));
  }
  return qd;
}",0.9349305744622924
72891,"/** 
 * Saves input code to model
 */
public void saveModel(){
  if (isCodeModified() && editObject instanceof DesignElementHandle) {
    saveEditorContentsDE((DesignElementHandle)editObject);
  }
  setIsModified(false);
  ((IFormPage)getParentEditor()).getEditor().editorDirtyStateChanged();
  firePropertyChange(PROP_DIRTY);
  SourceViewer viewer=getViewer();
  IUndoManager undoManager=viewer == null ? null : viewer.getUndoManager();
  if (undoManager != null) {
    undoManager.endCompoundChange();
  }
  cleanPoint=getUndoLevel();
}","/** 
 * Saves input code to model
 */
private void saveModel(){
  if (isCodeModified() && editObject instanceof DesignElementHandle) {
    saveEditorContentsDE((DesignElementHandle)editObject);
  }
  setIsModified(false);
  ((IFormPage)getParentEditor()).getEditor().editorDirtyStateChanged();
  firePropertyChange(PROP_DIRTY);
  SourceViewer viewer=getViewer();
  IUndoManager undoManager=viewer == null ? null : viewer.getUndoManager();
  if (undoManager != null) {
    undoManager.endCompoundChange();
  }
  cleanPoint=getUndoLevel();
}",0.989786443825441
72892,"public void testFixedTableLayout() throws EngineException {
  String designFile=""String_Node_Str"";
  List pageAreas=getpageAreas(designFile);
  assertEquals(1,pageAreas.size());
  PageArea pageArea=(PageArea)pageAreas.get(0);
  ContainerArea body=(ContainerArea)pageArea.getBody();
  assertTrue(body.getChildrenCount() == 11);
  Iterator iter=body.getChildren();
  TableArea table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,288,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,108,180});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,177,111});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,72,216});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{108,108,216});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,208,80});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{0,432,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{216,432,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{216,432,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{216,0,216});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{50,10,40});
}","public void testFixedTableLayout() throws EngineException {
  String designFile=""String_Node_Str"";
  List pageAreas=getpageAreas(designFile);
  assertEquals(1,pageAreas.size());
  PageArea pageArea=(PageArea)pageAreas.get(0);
  ContainerArea body=(ContainerArea)pageArea.getBody();
  assertTrue(body.getChildrenCount() == 11);
  Iterator iter=body.getChildren();
  TableArea table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,288,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,108,180});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,177,111});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,72,216});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{108,108,216});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{144,208,80});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{432,0,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{216,432,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{216,432,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{216,216,0});
  table=(TableArea)iter.next();
  validateColumnWidth(table,new int[]{50,10,40});
}",0.9969040247678018
72893,"protected void createRoot(){
  if (root == null) {
    CellArea cell=AreaFactory.createCellArea(cellContent);
    cell.setRowSpan(tableLM.getRowSpan(cellContent));
    root=cell;
    if (!isFirst) {
      IStyle areaStyle=root.getStyle();
      areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
      areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
    }
  }
  tableLM.resolveBorderConflict((CellArea)root,isFirst);
  int startColumn=cellContent.getColumn();
  int endColumn=startColumn + cellContent.getColSpan();
  columnWidth=tableLM.getCellWidth(startColumn,endColumn);
  root.setWidth(columnWidth);
}","protected void createRoot(){
  if (root == null) {
    CellArea cell=AreaFactory.createCellArea(cellContent);
    cell.setRowSpan(tableLM.getRowSpan(cellContent));
    root=cell;
    if (!isFirst) {
      IStyle areaStyle=root.getStyle();
      areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
      areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
    }
  }
  tableLM.resolveBorderConflict((CellArea)root,isFirst);
  root.setWidth(columnWidth);
}",0.8276481149012568
72894,"protected boolean isHidden(){
  if (!tableLM.isCellVisible(cellContent)) {
    return true;
  }
  return isHiddenByVisibility();
}","protected boolean isHidden(){
  int startColumn=cellContent.getColumn();
  int endColumn=startColumn + cellContent.getColSpan();
  columnWidth=tableLM.getCellWidth(startColumn,endColumn);
  if (columnWidth == 0 || !tableLM.isCellVisible(cellContent)) {
    return true;
  }
  return isHiddenByVisibility();
}",0.5753424657534246
72895,"public boolean onBroughtToTop(IReportEditorPage prePage){
  boolean isDisplay=false;
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (isDirtyModel()) {
    doSave(null);
  }
  if (prePage.isDirty()) {
    prePage.doSave(null);
  }
  if (isMissingParameter()) {
    if (parameterDialog != null) {
      parameterDialog.open();
      if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
        isDisplay=true;
        if (isMissingParameter()) {
          editor.setActivePage(prePage.getId());
          return false;
        }
      }
    }
  }
 else {
    isDisplay=true;
  }
  if (isDisplay) {
    display();
  }
  ReportRequest request=new ReportRequest(ReportPreviewFormPage.this);
  List list=new ArrayList();
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  return true;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  boolean isDisplay=false;
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (isDirtyModel()) {
    doSave(null);
  }
  if (prePage.isDirty()) {
    prePage.doSave(null);
  }
  if (isMissingParameter()) {
    if (parameterDialog != null) {
      parameterDialog.open();
      if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
        isDisplay=true;
        if (isMissingParameter()) {
          editor.setActivePage(prePage.getId());
          return false;
        }
      }
    }
  }
 else {
    isDisplay=true;
  }
  if (isDisplay) {
    display();
  }
  ReportRequest request=new ReportRequest(ReportPreviewFormPage.this);
  List list=new ArrayList();
  list.add(new Object());
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  return true;
}",0.9869477911646586
72896,"public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (getScriptEditor() instanceof DebugJSEditor) {
    ((DebugJSEditor)getScriptEditor()).saveDocument();
  }
}","@Override public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (getScriptEditor() instanceof IDebugScriptEditor) {
    ((IDebugScriptEditor)getScriptEditor()).saveDocument();
  }
}",0.927461139896373
72897,"private URL generateURL(ModuleHandle designHandle,String uri) throws MalformedURLException {
  try {
    return new URL(uri);
  }
 catch (  MalformedURLException e) {
    String path=URIUtil.getLocalPath(uri);
    if (path != null && designHandle != null) {
      return designHandle.findResource(path,IResourceLocator.IMAGE);
    }
    return URI.create(uri).toURL();
  }
}","private URL generateURL(ModuleHandle designHandle,String uri) throws MalformedURLException {
  try {
    return new URL(uri);
  }
 catch (  MalformedURLException e) {
    String path=URIUtil.getLocalPath(uri);
    if (designHandle == null) {
      designHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
    }
    if (path != null && designHandle != null) {
      return designHandle.findResource(path,IResourceLocator.IMAGE);
    }
    return URI.create(uri).toURL();
  }
}",0.8647398843930636
72898,"public String getText(Object element){
  if (element instanceof ResourceEntryWrapper && ((ResourceEntryWrapper)element).getType() == ResourceEntryWrapper.LIBRARY) {
    LibraryHandle lib=(LibraryHandle)((ResourceEntryWrapper)element).getAdapter(LibraryHandle.class);
    String fileName=lib.getFileName();
    return fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
  }
 else   if (element instanceof ResourceEntryWrapper && ((ResourceEntryWrapper)element).getType() == ResourceEntryWrapper.CSS_STYLE_SHEET) {
    CssStyleSheetHandle css=(CssStyleSheetHandle)((ResourceEntryWrapper)element).getAdapter(CssStyleSheetHandle.class);
    String fileName=css.getFileName();
    if (fileName == null || fileName.length() == 0) {
      fileName=""String_Node_Str"";
    }
    return fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
  }
  if (element instanceof ResourceEntry) {
    if (!((ResourceEntry)element).isRoot()) {
      return ((ResourceEntry)element).getName();
    }
    if (element instanceof FragmentResourceEntry) {
      return Messages.getString(""String_Node_Str"");
    }
 else     if (element instanceof PathResourceEntry) {
      return Messages.getString(""String_Node_Str"");
    }
  }
 else   if (element instanceof String) {
    return element.toString();
  }
  return super.getText(element);
}","public String getText(Object element){
  if (element instanceof ResourceEntryWrapper && ((ResourceEntryWrapper)element).getType() == ResourceEntryWrapper.LIBRARY) {
    LibraryHandle lib=(LibraryHandle)((ResourceEntryWrapper)element).getAdapter(LibraryHandle.class);
    String fileName=lib.getFileName();
    return new File(fileName).getName();
  }
 else   if (element instanceof ResourceEntryWrapper && ((ResourceEntryWrapper)element).getType() == ResourceEntryWrapper.CSS_STYLE_SHEET) {
    CssStyleSheetHandle css=(CssStyleSheetHandle)((ResourceEntryWrapper)element).getAdapter(CssStyleSheetHandle.class);
    String fileName=css.getFileName();
    if (fileName == null || fileName.length() == 0) {
      fileName=""String_Node_Str"";
    }
    return new File(fileName).getName();
  }
  if (element instanceof ResourceEntry) {
    if (!((ResourceEntry)element).isRoot()) {
      return ((ResourceEntry)element).getName();
    }
    if (element instanceof FragmentResourceEntry) {
      return Messages.getString(""String_Node_Str"");
    }
 else     if (element instanceof PathResourceEntry) {
      return Messages.getString(""String_Node_Str"");
    }
  }
 else   if (element instanceof String) {
    return element.toString();
  }
  return super.getText(element);
}",0.5640828856485035
72899,"public Object getAdapter(Class adapter){
  if (adapter == LibraryHandle.class && getURL().toString().toLowerCase().endsWith(""String_Node_Str"")) {
    if (!this.isFolder && this.library == null) {
      try {
        String projectFolder=UIUtil.getProjectFolder();
        if (projectFolder != null) {
          Map properties=new HashMap();
          properties.put(IModuleOption.RESOURCE_FOLDER_KEY,projectFolder);
          this.library=SessionHandleAdapter.getInstance().getSessionHandle().openLibrary(getURL().toString(),new ModuleOption(properties));
        }
 else {
          this.library=SessionHandleAdapter.getInstance().getSessionHandle().openLibrary(getURL().toString());
        }
      }
 catch (      Exception e) {
      }
    }
    return library;
  }
 else   if (adapter == CssStyleSheetHandle.class && getURL().toString().toLowerCase().endsWith(""String_Node_Str"")) {
    if (!this.isFolder && this.cssStyleHandle == null) {
      String projectFolder=UIUtil.getProjectFolder();
      try {
        String fileName=ResourceLocator.relativize(getURL());
        cssStyleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().openCssStyleSheet(fileName);
      }
 catch (      Exception e) {
      }
    }
    return cssStyleHandle;
  }
  return null;
}","public Object getAdapter(Class adapter){
  if (adapter == LibraryHandle.class && getURL().toString().toLowerCase().endsWith(""String_Node_Str"")) {
    if (!this.isFolder && this.library == null) {
      try {
        String projectFolder=UIUtil.getProjectFolder();
        if (projectFolder != null) {
          Map properties=new HashMap();
          properties.put(IModuleOption.RESOURCE_FOLDER_KEY,projectFolder);
          this.library=SessionHandleAdapter.getInstance().getSessionHandle().openLibrary(this.path,new ModuleOption(properties));
        }
 else {
          this.library=SessionHandleAdapter.getInstance().getSessionHandle().openLibrary(this.path);
        }
      }
 catch (      Exception e) {
      }
    }
    return library;
  }
 else   if (adapter == CssStyleSheetHandle.class && getURL().toString().toLowerCase().endsWith(""String_Node_Str"")) {
    if (!this.isFolder && this.cssStyleHandle == null) {
      String projectFolder=UIUtil.getProjectFolder();
      try {
        String fileName=ResourceLocator.relativize(this.path);
        cssStyleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle().openCssStyleSheet(fileName);
      }
 catch (      Exception e) {
      }
    }
    return cssStyleHandle;
  }
  return null;
}",0.7518678725914274
72900,"public static String relativize(URL url){
  String path=url.getFile();
  if (url.getProtocol().equals(""String_Node_Str"")) {
    return URIUtil.getRelativePath(ReportPlugin.getDefault().getResourceFolder(),path);
  }
  return path;
}","public static String relativize(URL url){
  String path=url.getFile();
  if (url.getProtocol().equals(""String_Node_Str"")) {
    return relativize(path);
  }
  return path;
}",0.8395061728395061
72901,"private boolean checkTransposed(AggregationCellHandle cell){
  if (ChartXTabUtil.isDetailCell(cell)) {
    if (cell.getAggregationOnColumn() == null) {
      return true;
    }
    MeasureViewHandle mv=(MeasureViewHandle)cell.getContainer();
    for (int i=0; i < mv.getAggregationCount(); i++) {
      AggregationCellHandle otherCell=mv.getAggregationCell(i);
      if (cell.getDimensionView(ICrosstabConstants.ROW_AXIS_TYPE) == otherCell.getDimensionView(ICrosstabConstants.ROW_AXIS_TYPE) && cell.getLevelView(ICrosstabConstants.ROW_AXIS_TYPE) == otherCell.getLevelView(ICrosstabConstants.ROW_AXIS_TYPE)) {
        Object content=ChartXTabUtil.getFirstContent(otherCell);
        if (ChartXTabUtil.isPlotChart((DesignElementHandle)content)) {
          return true;
        }
      }
    }
    Object content=ChartXTabUtil.getFirstContent(cell);
    if (ChartXTabUtil.isPlotChart((DesignElementHandle)content)) {
      return ((ChartWithAxes)ChartXTabUtil.getChartFromHandle((ExtendedItemHandle)content)).isTransposed();
    }
  }
  if (ChartXTabUtil.isAggregationCell(cell)) {
    LevelHandle levelRow=cell.getAggregationOnRow();
    LevelHandle levelColumn=cell.getAggregationOnColumn();
    if (levelRow != null && levelColumn == null) {
      return true;
    }
    if (levelRow == null && levelColumn != null) {
      return false;
    }
    if (levelRow != null && levelColumn != null) {
      return isInSubtotal(cell,ICrosstabConstants.COLUMN_AXIS_TYPE);
    }
    return false;
  }
  List<ExtendedItemHandle> chartInOtherMeasure=ChartXTabUIUtil.findChartInOtherMeasures(cell,true);
  if (!chartInOtherMeasure.isEmpty()) {
    return ((ChartWithAxes)ChartXTabUtil.getChartFromHandle(chartInOtherMeasure.get(0))).isTransposed();
  }
  return false;
}","private boolean checkTransposed(AggregationCellHandle cell){
  if (ChartXTabUtil.isDetailCell(cell)) {
    if (cell.getAggregationOnColumn() == null) {
      return true;
    }
    MeasureViewHandle mv=(MeasureViewHandle)cell.getContainer();
    for (int i=0; i < mv.getAggregationCount(); i++) {
      AggregationCellHandle otherCell=mv.getAggregationCell(i);
      if (cell.getDimensionView(ICrosstabConstants.ROW_AXIS_TYPE) == otherCell.getDimensionView(ICrosstabConstants.ROW_AXIS_TYPE) && cell.getLevelView(ICrosstabConstants.ROW_AXIS_TYPE) == otherCell.getLevelView(ICrosstabConstants.ROW_AXIS_TYPE)) {
        Object content=ChartXTabUtil.getFirstContent(otherCell);
        if (ChartXTabUtil.isPlotChart((DesignElementHandle)content)) {
          return true;
        }
      }
    }
    Object content=ChartXTabUtil.getFirstContent(cell);
    if (ChartXTabUtil.isPlotChart((DesignElementHandle)content)) {
      return ((ChartWithAxes)ChartXTabUtil.getChartFromHandle((ExtendedItemHandle)content)).isTransposed();
    }
  }
  if (ChartXTabUtil.isAggregationCell(cell)) {
    LevelHandle levelRow=cell.getAggregationOnRow();
    LevelHandle levelColumn=cell.getAggregationOnColumn();
    if (levelRow != null && levelColumn == null) {
      return true;
    }
    if (levelRow == null && levelColumn != null) {
      return false;
    }
    if (levelRow != null && levelColumn != null) {
      return isInSubtotal(cell,ICrosstabConstants.COLUMN_AXIS_TYPE);
    }
    return false;
  }
  List<ExtendedItemHandle> chartInOtherMeasure=ChartXTabUIUtil.findChartInOtherMeasures(cell,true);
  if (!chartInOtherMeasure.isEmpty()) {
    return ((ChartWithAxes)ChartXTabUtil.getChartFromHandle(chartInOtherMeasure.get(0))).isTransposed();
  }
  return cell.getCrosstab().getMeasureDirection().equals(ICrosstabConstants.MEASURE_DIRECTION_HORIZONTAL);
}",0.972014408423386
72902,"/** 
 * Adds measure or row/column edge according to query expression.
 */
private void bindSeriesQuery(String expr,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  if (expr != null && expr.length() > 0) {
    String bindingName=ChartXTabUtil.getBindingName(expr,true);
    Binding colBinding=null;
    if (bindingName != null) {
      List<String> nameList=ChartXTabUtil.getBindingNameList(expr);
      if (nameList.size() > 1) {
        for (        String bn : nameList) {
          bindSeriesQuery(ExpressionUtil.createJSDataExpression(bn),cubeQuery,cube);
        }
        return;
      }
      colBinding=registeredBindings.get(bindingName);
    }
    if (colBinding != null || bindingName != null) {
      if (colBinding == null) {
        bindingName=StructureFactory.newComputedColumn(handle,expr.replaceAll(""String_Node_Str"",""String_Node_Str"")).getName();
        colBinding=new Binding(bindingName);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(new ScriptExpression(expr));
        registeredBindings.put(bindingName,colBinding);
        registeredQueries.put(bindingName,expr);
        registeredBindings.put(expr,colBinding);
      }
 else {
        bindingName=colBinding.getBindingName();
        expr=registeredQueries.get(bindingName);
      }
      if (!cubeQuery.getBindings().contains(colBinding)) {
        cubeQuery.addBinding(colBinding);
      }
      if (ChartXTabUtil.isBinding(expr,true)) {
        bindSeriesQuery(ChartXTabUtil.getBindingName(expr,true),cubeQuery,cube);
        return;
      }
      String measure=ChartXTabUtil.getMeasureName(expr);
      if (measure != null) {
        if (registeredMeasures.containsKey(bindingName)) {
          return;
        }
        IMeasureDefinition mDef=cubeQuery.createMeasure(measure);
        String aggFun=DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction());
        mDef.setAggrFunction(aggFun);
        registeredMeasures.put(bindingName,mDef);
      }
 else       if (ChartXTabUtil.isDimensionExpresion(expr)) {
        if (registeredLevels.containsKey(bindingName)) {
          return;
        }
        String[] levels=ChartXTabUtil.getLevelNameFromDimensionExpression(expr);
        String dimensionName=levels[0];
        final int edgeType=getEdgeType(dimensionName);
        IEdgeDefinition edge=cubeQuery.getEdge(edgeType);
        IHierarchyDefinition hieDef=null;
        if (edge == null) {
          edge=cubeQuery.createEdge(edgeType);
          IDimensionDefinition dimDef=edge.createDimension(dimensionName);
          hieDef=dimDef.createHierarchy(cube.getDimension(dimDef.getName()).getDefaultHierarchy().getQualifiedName());
        }
 else {
          hieDef=(IHierarchyDefinition)((IDimensionDefinition)edge.getDimensions().get(0)).getHierarchy().get(0);
        }
        boolean bMultipleLevels=!hieDef.getLevels().isEmpty();
        ILevelDefinition levelDef=hieDef.createLevel(levels[1]);
        registeredLevels.put(bindingName,levelDef);
        LevelHandle levelHandle=handle.getModuleHandle().findLevel(levelDef.getHierarchy().getDimension().getName() + ""String_Node_Str"" + levelDef.getName());
        registeredLevelHandles.put(levelHandle,levelDef);
        if (bMultipleLevels) {
          Iterator levelsInOrder=getAllLevelsInHierarchyOrder(cube,cubeQuery).iterator();
          hieDef.getLevels().clear();
          while (levelsInOrder.hasNext()) {
            ILevelDefinition level=(ILevelDefinition)levelsInOrder.next();
            hieDef.createLevel(level.getName());
          }
        }
      }
    }
  }
}","/** 
 * Adds measure or row/column edge according to query expression.
 */
private void bindSeriesQuery(String expr,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  if (expr != null && expr.length() > 0) {
    String bindingName=ChartXTabUtil.getBindingName(expr,true);
    Binding colBinding=null;
    if (bindingName != null) {
      List<String> nameList=ChartXTabUtil.getBindingNameList(expr);
      if (nameList.size() > 1) {
        for (        String bn : nameList) {
          bindSeriesQuery(ExpressionUtil.createJSDataExpression(bn),cubeQuery,cube);
        }
        return;
      }
      colBinding=registeredBindings.get(bindingName);
    }
    if (colBinding != null || bindingName != null) {
      if (colBinding == null) {
        bindingName=StructureFactory.newComputedColumn(handle,expr.replaceAll(""String_Node_Str"",""String_Node_Str"")).getName();
        colBinding=new Binding(bindingName);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(new ScriptExpression(expr));
        registeredBindings.put(bindingName,colBinding);
        registeredQueries.put(bindingName,expr);
        registeredBindings.put(expr,colBinding);
      }
 else {
        bindingName=colBinding.getBindingName();
        expr=registeredQueries.get(bindingName);
      }
      if (!cubeQuery.getBindings().contains(colBinding)) {
        cubeQuery.addBinding(colBinding);
      }
      if (ChartXTabUtil.isBinding(expr,true)) {
        bindSeriesQuery(ChartXTabUtil.getBindingName(expr,true),cubeQuery,cube);
        return;
      }
      String measure=ChartXTabUtil.getMeasureName(expr);
      if (measure != null) {
        if (registeredMeasures.containsKey(bindingName)) {
          return;
        }
        IMeasureDefinition mDef=cubeQuery.createMeasure(measure);
        String aggFun=DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction());
        mDef.setAggrFunction(aggFun);
        registeredMeasures.put(bindingName,mDef);
      }
 else       if (ChartXTabUtil.isDimensionExpresion(expr)) {
        if (registeredLevels.containsKey(bindingName)) {
          return;
        }
        String[] levels=ChartXTabUtil.getLevelNameFromDimensionExpression(expr);
        String dimensionName=levels[0];
        final int edgeType=getEdgeType(dimensionName);
        IEdgeDefinition edge=cubeQuery.getEdge(edgeType);
        IHierarchyDefinition hieDef=null;
        if (edge == null) {
          edge=cubeQuery.createEdge(edgeType);
          IDimensionDefinition dimDef=edge.createDimension(dimensionName);
          hieDef=dimDef.createHierarchy(cube.getDimension(dimDef.getName()).getDefaultHierarchy().getName());
        }
 else {
          hieDef=(IHierarchyDefinition)((IDimensionDefinition)edge.getDimensions().get(0)).getHierarchy().get(0);
        }
        boolean bMultipleLevels=!hieDef.getLevels().isEmpty();
        ILevelDefinition levelDef=hieDef.createLevel(levels[1]);
        registeredLevels.put(bindingName,levelDef);
        LevelHandle levelHandle=handle.getModuleHandle().findLevel(levelDef.getHierarchy().getDimension().getName() + ""String_Node_Str"" + levelDef.getName());
        registeredLevelHandles.put(levelHandle,levelDef);
        if (bMultipleLevels) {
          Iterator levelsInOrder=getAllLevelsInHierarchyOrder(cube,cubeQuery).iterator();
          hieDef.getLevels().clear();
          while (levelsInOrder.hasNext()) {
            ILevelDefinition level=(ILevelDefinition)levelsInOrder.next();
            hieDef.createLevel(level.getName());
          }
        }
      }
    }
  }
}",0.9987659399424106
72903,"public void addBinding(IBinding binding){
  bindingList.add(binding);
}","public void addBinding(IBinding binding){
  if (needReconstructure(binding)) {
    binding=constructNewBinding(binding);
  }
  bindingList.add(binding);
}",0.6311111111111111
72904,"public void visitCascadingParameterGroup(CascadingParameterGroupHandle handle){
  CascadingParameterGroupDefn paramGroup=new CascadingParameterGroupDefn();
  paramGroup.setHandle(handle);
  paramGroup.setParameterType(IParameterDefnBase.CASCADING_PARAMETER_GROUP);
  paramGroup.setName(handle.getName());
  paramGroup.setDisplayName(handle.getDisplayName());
  paramGroup.setDisplayNameKey(handle.getDisplayNameKey());
  paramGroup.setHelpText(handle.getHelpText());
  paramGroup.setHelpTextKey(handle.getHelpTextKey());
  paramGroup.setPromptText(handle.getPromptText());
  paramGroup.setPromptTextKey(handle.getPromptTextKey());
  DataSetHandle dset=handle.getDataSet();
  if (dset != null) {
    paramGroup.setDataSet(dset.getName());
  }
  SlotHandle parameters=handle.getParameters();
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    paramGroup.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  int size=parameters.getCount();
  for (int n=0; n < size; n++) {
    apply(parameters.get(n));
    if (currentElement != null) {
      paramGroup.addParameter((IParameterDefnBase)currentElement);
    }
  }
  currentElement=paramGroup;
}","public void visitCascadingParameterGroup(CascadingParameterGroupHandle handle){
  CascadingParameterGroupDefn paramGroup=new CascadingParameterGroupDefn();
  paramGroup.setLocale(locale);
  paramGroup.setHandle(handle);
  paramGroup.setParameterType(IParameterDefnBase.CASCADING_PARAMETER_GROUP);
  paramGroup.setName(handle.getName());
  paramGroup.setDisplayName(handle.getDisplayName());
  paramGroup.setDisplayNameKey(handle.getDisplayNameKey());
  paramGroup.setHelpText(handle.getHelpText());
  paramGroup.setHelpTextKey(handle.getHelpTextKey());
  paramGroup.setPromptText(handle.getPromptText());
  paramGroup.setPromptTextKey(handle.getPromptTextKey());
  DataSetHandle dset=handle.getDataSet();
  if (dset != null) {
    paramGroup.setDataSet(dset.getName());
  }
  SlotHandle parameters=handle.getParameters();
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    paramGroup.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  int size=parameters.getCount();
  for (int n=0; n < size; n++) {
    apply(parameters.get(n));
    if (currentElement != null) {
      paramGroup.addParameter((IParameterDefnBase)currentElement);
    }
  }
  currentElement=paramGroup;
}",0.9874706342991386
72905,"private static int getAutoColumCount(Bounds boPlot,int iSeries){
  double rat=boPlot.getHeight() / boPlot.getWidth();
  int colums=(int)Math.round(Math.sqrt(iSeries / rat));
  return colums;
}","private static int getAutoColumCount(Bounds boPlot,int iSeries){
  double rat=boPlot.getHeight() / boPlot.getWidth();
  int colums=(int)Math.round(Math.sqrt(iSeries / rat));
  colums=Math.min(colums,iSeries);
  if (colums == 0) {
    colums++;
  }
  return colums;
}",0.7729257641921398
72906,"static boolean check(String source,int lineNumber){
  Context cx=Context.enter();
  Debugger oldDebugger=cx.getDebugger();
  Object oldContext=cx.getDebuggerContextData();
  boolean oldGenerate=cx.isGeneratingDebug();
  int oldLevel=cx.getOptimizationLevel();
  try {
    BreakableSourceChecker checker=new BreakableSourceChecker();
    checker.lineNumber=lineNumber + 1;
    cx.setDebugger(checker,null);
    cx.setGeneratingDebug(true);
    cx.setOptimizationLevel(-1);
    cx.compileString(source,""String_Node_Str"",1,null);
    return checker.breakable;
  }
  finally {
    cx.setDebugger(oldDebugger,oldContext);
    cx.setGeneratingDebug(oldGenerate);
    cx.setOptimizationLevel(oldLevel);
    Context.exit();
  }
}","static boolean check(String source,int lineNumber){
  Context cx=Context.enter();
  Debugger oldDebugger=cx.getDebugger();
  Object oldContext=cx.getDebuggerContextData();
  boolean oldGenerate=cx.isGeneratingDebug();
  int oldLevel=cx.getOptimizationLevel();
  try {
    BreakableSourceChecker checker=new BreakableSourceChecker();
    checker.lineNumber=lineNumber + 1;
    cx.setDebugger(checker,null);
    cx.setGeneratingDebug(true);
    cx.setOptimizationLevel(-1);
    cx.compileString(source,""String_Node_Str"",1,null);
    return checker.breakable;
  }
 catch (  Exception e) {
    return false;
  }
 finally {
    cx.setDebugger(oldDebugger,oldContext);
    cx.setGeneratingDebug(oldGenerate);
    cx.setOptimizationLevel(oldLevel);
    Context.exit();
  }
}",0.9690860215053764
72907,"private List getTableInstanceIds() throws EngineException, UnsupportedEncodingException {
  List result=new ArrayList();
  IReportRunnable runnable;
  IReportDocument document=engine.openReportDocument(REPORT_DOCUMENT);
  IRenderTask render=engine.createRenderTask(document);
  ByteArrayOutputStream ostream=new ByteArrayOutputStream();
  HTMLRenderOption option=new HTMLRenderOption();
  option.setOutputFormat(""String_Node_Str"");
  option.setOutputStream(ostream);
  render.setRenderOption(option);
  render.render();
  render.close();
  String content=ostream.toString(""String_Node_Str"");
  Pattern iidPattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=iidPattern.matcher(content);
  while (matcher.find()) {
    String strIid=matcher.group(1);
    InstanceID iid=InstanceID.parse(strIid);
    long designId=iid.getComponentID();
    runnable=render.getReportRunnable();
    ReportDesignHandle report=(ReportDesignHandle)runnable.getDesignHandle();
    DesignElementHandle element=report.getElementByID(designId);
    if (element instanceof TableHandle) {
      result.add(iid);
    }
  }
  document.close();
  return result;
}","private List getTableInstanceIds() throws EngineException, UnsupportedEncodingException {
  List result=new ArrayList();
  IReportRunnable runnable;
  IReportDocument document=engine.openReportDocument(REPORT_DOCUMENT);
  IRenderTask render=engine.createRenderTask(document);
  ByteArrayOutputStream ostream=new ByteArrayOutputStream();
  HTMLRenderOption option=new HTMLRenderOption();
  option.setOutputFormat(""String_Node_Str"");
  option.setOutputStream(ostream);
  option.setEnableMetadata(true);
  render.setRenderOption(option);
  render.render();
  render.close();
  String content=ostream.toString(""String_Node_Str"");
  Pattern iidPattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=iidPattern.matcher(content);
  while (matcher.find()) {
    String strIid=matcher.group(1);
    InstanceID iid=InstanceID.parse(strIid);
    long designId=iid.getComponentID();
    runnable=render.getReportRunnable();
    ReportDesignHandle report=(ReportDesignHandle)runnable.getDesignHandle();
    DesignElementHandle element=report.getElementByID(designId);
    if (element instanceof TableHandle) {
      result.add(iid);
    }
  }
  document.close();
  return result;
}",0.9853195164075992
72908,"public void testReportlet() throws Exception {
  ArrayList iidList=new ArrayList();
  IReportRunnable runnable=engine.openReportDesign(REPORT_DESIGN);
  IRunTask task=engine.createRunTask(runnable);
  task.run(REPORT_DOCUMENT);
  task.close();
  IReportDocument document=engine.openReportDocument(REPORT_DOCUMENT);
  IRenderTask render=engine.createRenderTask(document);
  ByteArrayOutputStream ostream=new ByteArrayOutputStream();
  HTMLRenderOption option=new HTMLRenderOption();
  option.setOutputFormat(""String_Node_Str"");
  option.setOutputStream(ostream);
  render.setRenderOption(option);
  render.render();
  render.close();
  String content=ostream.toString(""String_Node_Str"");
  Pattern iidPattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=iidPattern.matcher(content);
  while (matcher.find()) {
    String strIid=matcher.group(1);
    InstanceID iid=InstanceID.parse(strIid);
    long designId=iid.getComponentID();
    runnable=render.getReportRunnable();
    ReportDesignHandle report=(ReportDesignHandle)runnable.getDesignHandle();
    DesignElementHandle element=report.getElementByID(designId);
    if (element instanceof TableHandle) {
      iidList.add(iid);
      render=engine.createRenderTask(document);
      option=new HTMLRenderOption();
      option.setOutputFormat(""String_Node_Str"");
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      option.setOutputStream(out);
      render.setRenderOption(option);
      render.setInstanceID(iid.toUniqueString());
      render.render();
      assertTrue(render.getErrors().isEmpty());
      render.close();
      assertTrue(out.toString(""String_Node_Str"").length() > 2048);
    }
  }
  int[] goldenPageNumbers=new int[]{1};
  InstanceID iidTemp=(InstanceID)iidList.get(0);
  assertTrue(goldenPageNumbers[0] == document.getPageNumber(iidTemp));
  assertTrue(document.getInstanceOffset(iidTemp) != -1);
  render.close();
  document.close();
}","public void testReportlet() throws Exception {
  ArrayList iidList=new ArrayList();
  IReportRunnable runnable=engine.openReportDesign(REPORT_DESIGN);
  IRunTask task=engine.createRunTask(runnable);
  task.run(REPORT_DOCUMENT);
  task.close();
  IReportDocument document=engine.openReportDocument(REPORT_DOCUMENT);
  IRenderTask render=engine.createRenderTask(document);
  ByteArrayOutputStream ostream=new ByteArrayOutputStream();
  HTMLRenderOption option=new HTMLRenderOption();
  option.setOutputFormat(""String_Node_Str"");
  option.setOutputStream(ostream);
  option.setEnableMetadata(true);
  render.setRenderOption(option);
  render.render();
  render.close();
  String content=ostream.toString(""String_Node_Str"");
  Pattern iidPattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=iidPattern.matcher(content);
  while (matcher.find()) {
    String strIid=matcher.group(1);
    InstanceID iid=InstanceID.parse(strIid);
    long designId=iid.getComponentID();
    runnable=render.getReportRunnable();
    ReportDesignHandle report=(ReportDesignHandle)runnable.getDesignHandle();
    DesignElementHandle element=report.getElementByID(designId);
    if (element instanceof TableHandle) {
      iidList.add(iid);
      render=engine.createRenderTask(document);
      option=new HTMLRenderOption();
      option.setOutputFormat(""String_Node_Str"");
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      option.setOutputStream(out);
      render.setRenderOption(option);
      render.setInstanceID(iid.toUniqueString());
      render.render();
      assertTrue(render.getErrors().isEmpty());
      render.close();
      assertTrue(out.toString(""String_Node_Str"").length() > 2048);
    }
  }
  int[] goldenPageNumbers=new int[]{1};
  InstanceID iidTemp=(InstanceID)iidList.get(0);
  assertTrue(goldenPageNumbers[0] == document.getPageNumber(iidTemp));
  assertTrue(document.getInstanceOffset(iidTemp) != -1);
  render.close();
  document.close();
}",0.9912820512820512
72909,"protected void readReportItemField(DataInputStream in,ReportItemDesign design,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_X:
    DimensionType x=readDimension(in);
  design.setX(x);
break;
case FIELD_Y:
DimensionType y=readDimension(in);
design.setY(y);
break;
case FIELD_HEIGHT:
DimensionType height=readDimension(in);
design.setHeight(height);
break;
case FIELD_WIDTH:
DimensionType width=readDimension(in);
design.setWidth(width);
break;
case FIELD_BOOKMARK:
String bookmark=IOUtil.readString(in);
design.setBookmark(bookmark);
break;
case FIELD_TOC:
String toc=IOUtil.readString(in);
design.setTOC(toc);
break;
case FIELD_ON_CREATE:
String onCreatScriptText=IOUtil.readString(in);
ScriptExpression onCreatScriptExpr=new ScriptExpression(onCreatScriptText);
design.setOnCreate(onCreatScriptExpr);
break;
case FIELD_ON_RENDER:
String OnRenderScriptText=IOUtil.readString(in);
ScriptExpression OnRenderScriptExpr=new ScriptExpression(OnRenderScriptText);
design.setOnRender(OnRenderScriptExpr);
break;
case FIELD_ON_PAGE_BREAK:
String OnPageBreakScriptText=IOUtil.readString(in);
ScriptExpression OnPageBreakScriptExpr=new ScriptExpression(OnPageBreakScriptText);
design.setOnPageBreak(OnPageBreakScriptExpr);
break;
case FIELD_VISIBILITY:
VisibilityDesign visibility=readVisibility(in);
design.setVisibility(visibility);
break;
case FIELD_ACTION:
ActionDesign action=readAction(in);
design.setAction(action);
break;
case FIELD_USE_CACHED_RESULT:
boolean useCachedResult=IOUtil.readBool(in);
design.setUseCachedResult(useCachedResult);
break;
default :
readStyledElementField(in,design,fieldType);
}
}","protected void readReportItemField(DataInputStream in,ReportItemDesign design,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_X:
    DimensionType x=readDimension(in);
  design.setX(x);
break;
case FIELD_Y:
DimensionType y=readDimension(in);
design.setY(y);
break;
case FIELD_HEIGHT:
DimensionType height=readDimension(in);
design.setHeight(height);
break;
case FIELD_WIDTH:
DimensionType width=readDimension(in);
design.setWidth(width);
break;
case FIELD_BOOKMARK:
String bookmark=IOUtil.readString(in);
design.setBookmark(bookmark);
break;
case FIELD_TOC:
String toc=IOUtil.readString(in);
design.setTOC(toc);
break;
case FIELD_ON_CREATE:
String onCreatScriptText=IOUtil.readString(in);
ScriptExpression onCreatScriptExpr=new ScriptExpression(onCreatScriptText);
design.setOnCreate(onCreatScriptExpr);
break;
case FIELD_ON_RENDER:
String OnRenderScriptText=IOUtil.readString(in);
ScriptExpression OnRenderScriptExpr=new ScriptExpression(OnRenderScriptText);
design.setOnRender(OnRenderScriptExpr);
break;
case FIELD_ON_PAGE_BREAK:
String OnPageBreakScriptText=IOUtil.readString(in);
ScriptExpression OnPageBreakScriptExpr=new ScriptExpression(OnPageBreakScriptText);
design.setOnPageBreak(OnPageBreakScriptExpr);
break;
case FIELD_VISIBILITY:
VisibilityDesign visibility=readVisibility(in);
design.setVisibility(visibility);
break;
case FIELD_ACTION:
ActionDesign action=readAction(in);
design.setAction(action);
break;
case FIELD_ACTION_V1:
ActionDesign action1=readActionV1(in);
design.setAction(action1);
break;
case FIELD_USE_CACHED_RESULT:
boolean useCachedResult=IOUtil.readBool(in);
design.setUseCachedResult(useCachedResult);
break;
default :
readStyledElementField(in,design,fieldType);
}
}",0.9716502536556252
72910,"protected ActionDesign readAction(DataInputStream in) throws IOException {
  ActionDesign action=new ActionDesign();
  int actionType=IOUtil.readInt(in);
switch (actionType) {
case ActionDesign.ACTION_BOOKMARK:
    String bookmark=IOUtil.readString(in);
  action.setBookmark(bookmark);
break;
case ActionDesign.ACTION_DRILLTHROUGH:
DrillThroughActionDesign drillThrough=readDrillThrough(in);
action.setDrillThrough(drillThrough);
break;
case ActionDesign.ACTION_HYPERLINK:
String hyperlink=IOUtil.readString(in);
action.setHyperlink(hyperlink);
break;
default :
throw new IOException(""String_Node_Str"" + actionType);
}
if (version == ENGINE_IR_VERSION_0) {
IOUtil.readBool(in);
}
String targetWindow=IOUtil.readString(in);
action.setTargetWindow(targetWindow);
String tooltip=IOUtil.readString(in);
action.setTooltip(tooltip);
return action;
}","protected ActionDesign readAction(DataInputStream in) throws IOException {
  ActionDesign action=new ActionDesign();
  int actionType=IOUtil.readInt(in);
switch (actionType) {
case ActionDesign.ACTION_BOOKMARK:
    String bookmark=IOUtil.readString(in);
  action.setBookmark(bookmark);
break;
case ActionDesign.ACTION_DRILLTHROUGH:
DrillThroughActionDesign drillThrough=readDrillThrough(in);
action.setDrillThrough(drillThrough);
break;
case ActionDesign.ACTION_HYPERLINK:
String hyperlink=IOUtil.readString(in);
action.setHyperlink(hyperlink);
break;
default :
throw new IOException(""String_Node_Str"" + actionType);
}
if (version == ENGINE_IR_VERSION_0) {
IOUtil.readBool(in);
}
String targetWindow=IOUtil.readString(in);
action.setTargetWindow(targetWindow);
return action;
}",0.9592592592592591
72911,"protected void writeReportItem(DataOutputStream out,ReportItemDesign design) throws IOException {
  writeStyledElement(out,design);
  DimensionType x=design.getX();
  if (x != null) {
    IOUtil.writeShort(out,FIELD_X);
    writeDimension(out,x);
  }
  DimensionType y=design.getY();
  if (y != null) {
    IOUtil.writeShort(out,FIELD_Y);
    writeDimension(out,y);
  }
  DimensionType height=design.getHeight();
  if (height != null) {
    IOUtil.writeShort(out,FIELD_HEIGHT);
    writeDimension(out,height);
  }
  DimensionType width=design.getWidth();
  if (width != null) {
    IOUtil.writeShort(out,FIELD_WIDTH);
    writeDimension(out,width);
  }
  String bookmark=design.getBookmark();
  if (bookmark != null) {
    IOUtil.writeShort(out,FIELD_BOOKMARK);
    IOUtil.writeString(out,bookmark);
  }
  String toc=design.getTOC();
  if (toc != null) {
    IOUtil.writeShort(out,FIELD_TOC);
    IOUtil.writeString(out,toc);
  }
  ScriptExpression onCreateScriptExpr=design.getOnCreate();
  if (onCreateScriptExpr != null) {
    IOUtil.writeShort(out,FIELD_ON_CREATE);
    IOUtil.writeString(out,onCreateScriptExpr.getScriptText());
  }
  ScriptExpression onRenderScriptExpr=design.getOnRender();
  if (onRenderScriptExpr != null) {
    IOUtil.writeShort(out,FIELD_ON_RENDER);
    IOUtil.writeString(out,onRenderScriptExpr.getScriptText());
  }
  ScriptExpression onPageBreakScriptExpr=design.getOnPageBreak();
  if (onPageBreakScriptExpr != null) {
    IOUtil.writeShort(out,FIELD_ON_PAGE_BREAK);
    IOUtil.writeString(out,onPageBreakScriptExpr.getScriptText());
  }
  VisibilityDesign visibility=design.getVisibility();
  if (visibility != null) {
    IOUtil.writeShort(out,FIELD_VISIBILITY);
    writeVisibility(out,visibility);
  }
  ActionDesign action=design.getAction();
  if (action != null) {
    IOUtil.writeShort(out,FIELD_ACTION);
    writeAction(out,action);
  }
  boolean useCachedResult=design.useCachedResult();
  if (useCachedResult) {
    IOUtil.writeShort(out,FIELD_USE_CACHED_RESULT);
    IOUtil.writeBool(out,useCachedResult);
  }
}","protected void writeReportItem(DataOutputStream out,ReportItemDesign design) throws IOException {
  writeStyledElement(out,design);
  DimensionType x=design.getX();
  if (x != null) {
    IOUtil.writeShort(out,FIELD_X);
    writeDimension(out,x);
  }
  DimensionType y=design.getY();
  if (y != null) {
    IOUtil.writeShort(out,FIELD_Y);
    writeDimension(out,y);
  }
  DimensionType height=design.getHeight();
  if (height != null) {
    IOUtil.writeShort(out,FIELD_HEIGHT);
    writeDimension(out,height);
  }
  DimensionType width=design.getWidth();
  if (width != null) {
    IOUtil.writeShort(out,FIELD_WIDTH);
    writeDimension(out,width);
  }
  String bookmark=design.getBookmark();
  if (bookmark != null) {
    IOUtil.writeShort(out,FIELD_BOOKMARK);
    IOUtil.writeString(out,bookmark);
  }
  String toc=design.getTOC();
  if (toc != null) {
    IOUtil.writeShort(out,FIELD_TOC);
    IOUtil.writeString(out,toc);
  }
  ScriptExpression onCreateScriptExpr=design.getOnCreate();
  if (onCreateScriptExpr != null) {
    IOUtil.writeShort(out,FIELD_ON_CREATE);
    IOUtil.writeString(out,onCreateScriptExpr.getScriptText());
  }
  ScriptExpression onRenderScriptExpr=design.getOnRender();
  if (onRenderScriptExpr != null) {
    IOUtil.writeShort(out,FIELD_ON_RENDER);
    IOUtil.writeString(out,onRenderScriptExpr.getScriptText());
  }
  ScriptExpression onPageBreakScriptExpr=design.getOnPageBreak();
  if (onPageBreakScriptExpr != null) {
    IOUtil.writeShort(out,FIELD_ON_PAGE_BREAK);
    IOUtil.writeString(out,onPageBreakScriptExpr.getScriptText());
  }
  VisibilityDesign visibility=design.getVisibility();
  if (visibility != null) {
    IOUtil.writeShort(out,FIELD_VISIBILITY);
    writeVisibility(out,visibility);
  }
  ActionDesign action=design.getAction();
  if (action != null) {
    IOUtil.writeShort(out,FIELD_ACTION_V1);
    writeAction(out,action);
  }
  boolean useCachedResult=design.useCachedResult();
  if (useCachedResult) {
    IOUtil.writeShort(out,FIELD_USE_CACHED_RESULT);
    IOUtil.writeBool(out,useCachedResult);
  }
}",0.99927060539752
72912,"private String getOutputFromCursor(CubeCursor cursor,List columnEdgeBindingNames,List rowEdgeBindingNames,String measureBindingNames,String columnAggr,String rowAggr,String overallAggr) throws OLAPException {
  EdgeCursor edge1=(EdgeCursor)(cursor.getOrdinateEdge().get(0));
  EdgeCursor edge2=(EdgeCursor)(cursor.getOrdinateEdge().get(1));
  String[] lines=new String[columnEdgeBindingNames.size()];
  for (int i=0; i < columnEdgeBindingNames.size(); i++) {
    lines[i]=""String_Node_Str"";
  }
  while (edge1.next()) {
    for (int i=0; i < columnEdgeBindingNames.size(); i++) {
      lines[i]+=cursor.getObject(columnEdgeBindingNames.get(i).toString()) + ""String_Node_Str"";
    }
  }
  if (rowAggr != null)   lines[lines.length - 1]+=""String_Node_Str"";
  String output=""String_Node_Str"";
  for (int i=0; i < lines.length; i++) {
    output+=""String_Node_Str"" + lines[i];
  }
  while (edge2.next()) {
    String line=""String_Node_Str"";
    for (int i=0; i < rowEdgeBindingNames.size(); i++) {
      line+=cursor.getObject(rowEdgeBindingNames.get(i).toString()).toString() + ""String_Node_Str"";
    }
    edge1.beforeFirst();
    while (edge1.next()) {
      line+=cursor.getObject(measureBindingNames) + ""String_Node_Str"";
    }
    if (rowAggr != null)     line+=cursor.getObject(rowAggr);
    output+=""String_Node_Str"" + line;
  }
  if (columnAggr != null) {
    String line=""String_Node_Str"" + ""String_Node_Str"";
    edge1.beforeFirst();
    while (edge1.next()) {
      line+=cursor.getObject(columnAggr) + ""String_Node_Str"";
    }
    if (overallAggr != null)     line+=cursor.getObject(overallAggr);
    output+=""String_Node_Str"" + line;
  }
  return output;
}","private String getOutputFromCursor(CubeCursor cursor,List columnEdgeBindingNames,List rowEdgeBindingNames,String measureBindingName,String[] columnAggrs) throws OLAPException {
  EdgeCursor edge1=(EdgeCursor)(cursor.getOrdinateEdge().get(0));
  EdgeCursor edge2=(EdgeCursor)(cursor.getOrdinateEdge().get(1));
  String[] lines=new String[columnEdgeBindingNames.size()];
  for (int i=0; i < columnEdgeBindingNames.size(); i++) {
    lines[i]=""String_Node_Str"";
  }
  while (edge1.next()) {
    for (int i=0; i < columnEdgeBindingNames.size(); i++) {
      lines[i]+=cursor.getObject(columnEdgeBindingNames.get(i).toString()) + ""String_Node_Str"";
    }
  }
  String output=""String_Node_Str"";
  for (int i=0; i < lines.length; i++) {
    output+=""String_Node_Str"" + lines[i];
  }
  while (edge2.next()) {
    String line=""String_Node_Str"";
    for (int i=0; i < rowEdgeBindingNames.size(); i++) {
      line+=cursor.getObject(rowEdgeBindingNames.get(i).toString()).toString() + ""String_Node_Str"";
    }
    edge1.beforeFirst();
    while (edge1.next()) {
      line+=cursor.getObject(measureBindingName) + ""String_Node_Str"";
    }
    output+=""String_Node_Str"" + line;
  }
  String line=""String_Node_Str"" + ""String_Node_Str"";
  edge1.beforeFirst();
  edge2.first();
  while (edge1.next()) {
    line+=cursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
  }
  output+=""String_Node_Str"" + line;
  line=""String_Node_Str"" + ""String_Node_Str"";
  edge1.beforeFirst();
  edge2.first();
  while (edge1.next()) {
    line+=cursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
  }
  output+=""String_Node_Str"" + line;
  line=""String_Node_Str"" + ""String_Node_Str"";
  edge1.beforeFirst();
  edge2.first();
  while (edge1.next()) {
    line+=cursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
  }
  output+=""String_Node_Str"" + line;
  line=""String_Node_Str"" + ""String_Node_Str"";
  edge1.beforeFirst();
  edge2.first();
  while (edge1.next()) {
    line+=cursor.getObject(""String_Node_Str"") + ""String_Node_Str"";
  }
  output+=""String_Node_Str"" + line + ""String_Node_Str"";
  return output;
}",0.7110874200426439
72913,"private void printCube(CubeCursor cursor,List columnEdgeBindingNames,List rowEdgeBindingNames,String measureBindingNames,String columnAggr,String rowAggr,String overallAggr) throws Exception {
  this.printCube(cursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,columnAggr,rowAggr,overallAggr,true);
}","private void printCube(CubeCursor cursor,List columnEdgeBindingNames,List rowEdgeBindingNames,String measureBindingName,String[] columnAggrs) throws Exception {
  String output=getOutputFromCursor(cursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingName,columnAggrs);
  this.testPrint(output);
}",0.5431309904153354
72914,"protected boolean checkMeasureVerticalSpanOverlapped(ColumnEvent ev){
  if (ev.measureIndex == -1) {
    return false;
  }
  LevelHandle spanLevel=null;
switch (ev.type) {
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
    spanLevel=getMeasureCell(ev.measureIndex).getSpanOverOnRow();
  break;
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
int dimCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
DimensionViewHandle rdv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimCount - 1);
spanLevel=getAggregationCell(dimCount - 1,rdv.getLevelCount() - 1,ev.dimensionIndex,ev.levelIndex,ev.measureIndex).getSpanOverOnRow();
break;
}
if (spanLevel != null) {
int targetSpanGroupIndex=GroupUtil.getGroupIndex(rowGroups,spanLevel);
if (targetSpanGroupIndex != -1) {
try {
EdgeCursor rowEdgeCursor=getRowEdgeCursor();
if (rowEdgeCursor != null) {
targetSpanGroupIndex--;
if (targetSpanGroupIndex == -1) {
return !rowEdgeCursor.isFirst();
}
 else {
DimensionCursor dc=(DimensionCursor)rowEdgeCursor.getDimensionCursor().get(targetSpanGroupIndex);
if (!GroupUtil.isDummyGroup(dc)) {
  return rowEdgeCursor.getPosition() > dc.getEdgeStart();
}
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
}
}
return false;
}","protected boolean checkMeasureVerticalSpanOverlapped(ColumnEvent ev){
  if (ev.measureIndex == -1 && totalMeasureCount != 1) {
    return false;
  }
  int mx=ev.measureIndex;
  if (mx == -1) {
    mx=0;
  }
  LevelHandle spanLevel=null;
switch (ev.type) {
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
    spanLevel=getMeasureCell(mx).getSpanOverOnRow();
  break;
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
int dimCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
DimensionViewHandle rdv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimCount - 1);
spanLevel=getAggregationCell(dimCount - 1,rdv.getLevelCount() - 1,ev.dimensionIndex,ev.levelIndex,mx).getSpanOverOnRow();
break;
}
if (spanLevel != null) {
int targetSpanGroupIndex=GroupUtil.getGroupIndex(rowGroups,spanLevel);
if (targetSpanGroupIndex != -1) {
try {
EdgeCursor rowEdgeCursor=getRowEdgeCursor();
if (rowEdgeCursor != null) {
targetSpanGroupIndex--;
if (targetSpanGroupIndex == -1) {
return !rowEdgeCursor.isFirst();
}
 else {
DimensionCursor dc=(DimensionCursor)rowEdgeCursor.getDimensionCursor().get(targetSpanGroupIndex);
if (!GroupUtil.isDummyGroup(dc)) {
  return rowEdgeCursor.getPosition() > dc.getEdgeStart();
}
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
}
}
return false;
}",0.957078313253012
72915,"protected void advance(){
  int mx;
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
        if (rowEdgeStarted) {
          nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,lastDimensionIndex).getLevel(lastLevelIndex).getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
          ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
          ((CrosstabCellExecutor)nextExecutor).setForceEmpty(isForceEmpty());
          rowEdgeStarted=false;
          hasLast=false;
        }
      break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
    nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
  ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
hasLast=false;
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
if (measureDetailStarted && isMeetMeasureDetailEnd(ev,totalMeasureCount > 0 ? getMeasureCell(mx) : null)) {
nextExecutor=new CrosstabCellExecutor(this,totalMeasureCount > 0 ? getMeasureCell(mx) : null,rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureDetailStarted=false;
hasLast=false;
}
 else if (measureSubTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureSubTotalStarted=false;
hasLast=false;
}
 else if (measureGrandTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureGrandTotalStarted=false;
hasLast=false;
}
break;
}
if (isRowEdgeNeedStart(ev)) {
rowEdgeStarted=true;
rowSpan=GroupUtil.computeRowSpan(crosstabItem,rowGroups,ev.dimensionIndex,ev.levelIndex,getRowEdgeCursor(),isLayoutDownThenOver);
colSpan=0;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (isMeasureDetailNeedStart(ev)) {
measureDetailStarted=true;
if (ev.measureIndex == -1) {
rowSpan=1;
}
 else {
rowSpan=GroupUtil.computeAggregationCellRowOverSpan(crosstabItem,rowGroups,getMeasureCell(ev.measureIndex).getSpanOverOnRow(),getRowEdgeCursor());
}
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (isMeasureSubTotalNeedStart(ev)) {
measureSubTotalStarted=true;
if (ev.measureIndex == -1) {
rowSpan=1;
}
 else {
int dimCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
DimensionViewHandle rdv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimCount - 1);
rowSpan=GroupUtil.computeAggregationCellRowOverSpan(crosstabItem,rowGroups,getAggregationCell(dimCount - 1,rdv.getLevelCount() - 1,ev.dimensionIndex,ev.levelIndex,ev.measureIndex).getSpanOverOnRow(),getRowEdgeCursor());
}
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (isMeasureGrandTotalNeedStart(ev)) {
measureGrandTotalStarted=true;
if (ev.measureIndex == -1) {
rowSpan=1;
}
 else {
int dimCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
DimensionViewHandle rdv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimCount - 1);
rowSpan=GroupUtil.computeAggregationCellRowOverSpan(crosstabItem,rowGroups,getAggregationCell(dimCount - 1,rdv.getLevelCount() - 1,ev.dimensionIndex,ev.levelIndex,ev.measureIndex).getSpanOverOnRow(),getRowEdgeCursor());
}
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (ev.type == ColumnEvent.MEASURE_HEADER_CHANGE) {
rowSpan=1;
colSpan=0;
hasLast=true;
}
currentChangeType=ev.type;
currentEdgePosition=ev.dataPosition;
colSpan++;
currentColIndex++;
if (nextExecutor != null) {
return;
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
if (rowEdgeStarted) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,lastDimensionIndex).getLevel(lastLevelIndex).getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
((CrosstabCellExecutor)nextExecutor).setForceEmpty(isForceEmpty());
rowEdgeStarted=false;
}
break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
break;
}
if (measureDetailStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,totalMeasureCount > 0 ? getMeasureCell(mx) : null,rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureDetailStarted=false;
}
 else if (measureSubTotalStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureSubTotalStarted=false;
}
 else if (measureGrandTotalStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureGrandTotalStarted=false;
}
}
}","protected void advance(){
  int mx;
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
        if (rowEdgeStarted) {
          nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,lastDimensionIndex).getLevel(lastLevelIndex).getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
          ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
          ((CrosstabCellExecutor)nextExecutor).setForceEmpty(isForceEmpty());
          rowEdgeStarted=false;
          hasLast=false;
        }
      break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
    nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
  ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
hasLast=false;
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
if (measureDetailStarted && isMeetMeasureDetailEnd(ev,totalMeasureCount > 0 ? getMeasureCell(mx) : null)) {
nextExecutor=new CrosstabCellExecutor(this,totalMeasureCount > 0 ? getMeasureCell(mx) : null,rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureDetailStarted=false;
hasLast=false;
}
 else if (measureSubTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureSubTotalStarted=false;
hasLast=false;
}
 else if (measureGrandTotalStarted) {
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureGrandTotalStarted=false;
hasLast=false;
}
break;
}
if (isRowEdgeNeedStart(ev)) {
rowEdgeStarted=true;
rowSpan=GroupUtil.computeRowSpan(crosstabItem,rowGroups,ev.dimensionIndex,ev.levelIndex,getRowEdgeCursor(),isLayoutDownThenOver);
colSpan=0;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (isMeasureDetailNeedStart(ev)) {
measureDetailStarted=true;
if (ev.measureIndex == -1 && totalMeasureCount != 1) {
rowSpan=1;
}
 else {
mx=ev.measureIndex;
if (mx == -1) {
mx=0;
}
rowSpan=GroupUtil.computeAggregationCellRowOverSpan(crosstabItem,rowGroups,getMeasureCell(mx).getSpanOverOnRow(),getRowEdgeCursor());
}
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (isMeasureSubTotalNeedStart(ev)) {
measureSubTotalStarted=true;
if (ev.measureIndex == -1 && totalMeasureCount != 1) {
rowSpan=1;
}
 else {
mx=ev.measureIndex;
if (mx == -1) {
mx=0;
}
int dimCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
DimensionViewHandle rdv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimCount - 1);
rowSpan=GroupUtil.computeAggregationCellRowOverSpan(crosstabItem,rowGroups,getAggregationCell(dimCount - 1,rdv.getLevelCount() - 1,ev.dimensionIndex,ev.levelIndex,mx).getSpanOverOnRow(),getRowEdgeCursor());
}
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (isMeasureGrandTotalNeedStart(ev)) {
measureGrandTotalStarted=true;
if (ev.measureIndex == -1 && totalMeasureCount != 1) {
rowSpan=1;
}
 else {
mx=ev.measureIndex;
if (mx == -1) {
mx=0;
}
int dimCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
DimensionViewHandle rdv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimCount - 1);
rowSpan=GroupUtil.computeAggregationCellRowOverSpan(crosstabItem,rowGroups,getAggregationCell(dimCount - 1,rdv.getLevelCount() - 1,ev.dimensionIndex,ev.levelIndex,mx).getSpanOverOnRow(),getRowEdgeCursor());
}
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (ev.type == ColumnEvent.MEASURE_HEADER_CHANGE) {
rowSpan=1;
colSpan=0;
hasLast=true;
}
currentChangeType=ev.type;
currentEdgePosition=ev.dataPosition;
colSpan++;
currentColIndex++;
if (nextExecutor != null) {
return;
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
if (rowEdgeStarted) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getDimension(ROW_AXIS_TYPE,lastDimensionIndex).getLevel(lastLevelIndex).getCell(),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
((CrosstabCellExecutor)nextExecutor).setForceEmpty(isForceEmpty());
rowEdgeStarted=false;
}
break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(rowIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
break;
}
if (measureDetailStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,totalMeasureCount > 0 ? getMeasureCell(mx) : null,rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureDetailStarted=false;
}
 else if (measureSubTotalStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureSubTotalStarted=false;
}
 else if (measureGrandTotalStarted) {
mx=lastMeasureIndex < 0 ? rowIndex : lastMeasureIndex;
nextExecutor=new CrosstabCellExecutor(this,getRowSubTotalCell(lastDimensionIndex,lastLevelIndex,mx),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
measureGrandTotalStarted=false;
}
}
}",0.9797891733375604
72916,"protected boolean checkMeasureVerticalSpanOverlapped(ColumnEvent ev){
  if (ev.measureIndex == -1) {
    return false;
  }
  LevelHandle spanLevel=null;
switch (ev.type) {
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
    spanLevel=getMeasureCell(ev.measureIndex).getSpanOverOnRow();
  break;
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
int dimCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
DimensionViewHandle rdv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimCount - 1);
spanLevel=getAggregationCell(dimCount - 1,rdv.getLevelCount() - 1,ev.dimensionIndex,ev.levelIndex,ev.measureIndex).getSpanOverOnRow();
break;
}
if (spanLevel != null) {
int targetRowSpanGroupIndex=GroupUtil.getGroupIndex(rowGroups,spanLevel);
int currentGroupIndex=GroupUtil.getGroupIndex(rowGroups,dimensionIndex,levelIndex);
if (targetRowSpanGroupIndex != -1) {
return targetRowSpanGroupIndex <= currentGroupIndex;
}
}
return false;
}","protected boolean checkMeasureVerticalSpanOverlapped(ColumnEvent ev){
  if (ev.measureIndex == -1 && totalMeasureCount != 1) {
    return false;
  }
  int mx=ev.measureIndex;
  if (mx == -1) {
    mx=0;
  }
  LevelHandle spanLevel=null;
switch (ev.type) {
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
    spanLevel=getMeasureCell(mx).getSpanOverOnRow();
  break;
case ColumnEvent.COLUMN_TOTAL_CHANGE:
case ColumnEvent.GRAND_TOTAL_CHANGE:
int dimCount=crosstabItem.getDimensionCount(ROW_AXIS_TYPE);
DimensionViewHandle rdv=crosstabItem.getDimension(ROW_AXIS_TYPE,dimCount - 1);
spanLevel=getAggregationCell(dimCount - 1,rdv.getLevelCount() - 1,ev.dimensionIndex,ev.levelIndex,mx).getSpanOverOnRow();
break;
}
if (spanLevel != null) {
int targetRowSpanGroupIndex=GroupUtil.getGroupIndex(rowGroups,spanLevel);
int currentGroupIndex=GroupUtil.getGroupIndex(rowGroups,dimensionIndex,levelIndex);
if (targetRowSpanGroupIndex != -1) {
return targetRowSpanGroupIndex <= currentGroupIndex;
}
}
return false;
}",0.9427710843373494
72917,"/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request) && (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())|| IBirtConstants.SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath()))) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.isToc=ParameterAccessor.isToc(request);
  this.reportPage=ParameterAccessor.getPage(request);
  this.reportPageRange=ParameterAccessor.getPageRange(request);
  this.action=ParameterAccessor.getAction(request);
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())|| IBirtConstants.SERVLET_PATH_EXTRACT.equalsIgnoreCase(request.getServletPath())) {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,true);
  }
 else {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,false);
  }
  this.reportDesignName=ParameterAccessor.getReport(request,null);
  this.format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.ACTION_PRINT.equalsIgnoreCase(action)) {
    if (ParameterAccessor.isSupportedPrintOnServer)     this.format=IBirtConstants.POSTSCRIPT_RENDER_FORMAT;
 else     this.action=null;
  }
  this.maxRows=ParameterAccessor.getMaxRows(request);
  BirtResources.setLocale(ParameterAccessor.getLocale(request));
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  this.requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  processReport(request);
  this.reportTitle=ParameterAccessor.getTitle(request);
  this.isShowTitle=ParameterAccessor.isShowTitle(request);
  this.isShowToolbar=ParameterAccessor.isShowToolbar(request);
  this.isShowNavigationbar=ParameterAccessor.isShowNavigationbar(request);
  this.moduleOptions=BirtUtility.getModuleOptions(request);
  this.reportDesignHandle=getDesignHandle(request);
  if (this.reportDesignHandle == null)   throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_NO_REPORT_DESIGN);
  ParameterAccessor.setClean(request);
  __initParameters(request);
}","/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request) && (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())|| IBirtConstants.SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath()))) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.isToc=ParameterAccessor.isToc(request);
  this.reportPage=ParameterAccessor.getPage(request);
  this.reportPageRange=ParameterAccessor.getPageRange(request);
  this.action=ParameterAccessor.getAction(request);
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())|| IBirtConstants.SERVLET_PATH_EXTRACT.equalsIgnoreCase(request.getServletPath())) {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,true);
  }
 else {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,false);
  }
  this.reportDesignName=ParameterAccessor.getReport(request,null);
  this.format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.ACTION_PRINT.equalsIgnoreCase(action)) {
    if (ParameterAccessor.isSupportedPrintOnServer)     this.format=IBirtConstants.POSTSCRIPT_RENDER_FORMAT;
 else     this.action=null;
  }
  BirtResources.setLocale(ParameterAccessor.getLocale(request));
  this.requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  processReport(request);
  this.reportTitle=ParameterAccessor.getTitle(request);
  this.isShowTitle=ParameterAccessor.isShowTitle(request);
  this.isShowToolbar=ParameterAccessor.isShowToolbar(request);
  this.isShowNavigationbar=ParameterAccessor.isShowNavigationbar(request);
  this.moduleOptions=BirtUtility.getModuleOptions(request);
  this.reportDesignHandle=getDesignHandle(request);
  if (this.reportDesignHandle == null)   throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_NO_REPORT_DESIGN);
  ParameterAccessor.setClean(request);
  __initParameters(request);
}",0.9776234567901234
72918,"/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#runReport(org.eclipse.birt.report.service.api.IViewerReportDesignHandle,java.lang.String,org.eclipse.birt.report.service.api.InputOptions,java.util.Map,java.util.Map)
 */
public String runReport(IViewerReportDesignHandle design,String outputDocName,InputOptions runOptions,Map parameters,Map displayTexts) throws ReportServiceException {
  if (design == null || design.getDesignObject() == null)   throw new ReportServiceException(BirtResources.getMessage(ResourceConstants.GENERAL_EXCEPTION_NO_REPORT_DESIGN));
  IReportRunnable runnable;
  HttpServletRequest request=(HttpServletRequest)runOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)runOptions.getOption(InputOptions.OPT_LOCALE);
  ViewerAttributeBean attrBean=(ViewerAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  Map parsedParams=attrBean.getParameters();
  if (parameters != null) {
    parsedParams.putAll(parameters);
  }
  Map displayTextMap=attrBean.getDisplayTexts();
  if (displayTexts != null) {
    displayTextMap.putAll(displayTexts);
  }
  runnable=(IReportRunnable)design.getDesignObject();
  try {
    ReportEngineService.getInstance().runReport(request,runnable,outputDocName,locale,parsedParams,displayTextMap);
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage(),e.getCause());
  }
  return outputDocName;
}","/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#runReport(org.eclipse.birt.report.service.api.IViewerReportDesignHandle,java.lang.String,org.eclipse.birt.report.service.api.InputOptions,java.util.Map,java.util.Map)
 */
public String runReport(IViewerReportDesignHandle design,String outputDocName,InputOptions runOptions,Map parameters,Map displayTexts) throws ReportServiceException {
  if (design == null || design.getDesignObject() == null)   throw new ReportServiceException(BirtResources.getMessage(ResourceConstants.GENERAL_EXCEPTION_NO_REPORT_DESIGN));
  IReportRunnable runnable;
  HttpServletRequest request=(HttpServletRequest)runOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)runOptions.getOption(InputOptions.OPT_LOCALE);
  ViewerAttributeBean attrBean=(ViewerAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
  Map parsedParams=attrBean.getParameters();
  if (parameters != null) {
    parsedParams.putAll(parameters);
  }
  Map displayTextMap=attrBean.getDisplayTexts();
  if (displayTexts != null) {
    displayTextMap.putAll(displayTexts);
  }
  runnable=(IReportRunnable)design.getDesignObject();
  try {
    Integer maxRows=null;
    if (ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_MAXROWS))     maxRows=new Integer(ParameterAccessor.getMaxRows(request));
    ReportEngineService.getInstance().runReport(request,runnable,outputDocName,locale,parsedParams,displayTextMap,maxRows);
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage(),e.getCause());
  }
  return outputDocName;
}",0.938376263449625
72919,"/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#runAndRenderReport(org.eclipse.birt.report.service.api.IViewerReportDesignHandle,java.lang.String,org.eclipse.birt.report.service.api.InputOptions,java.util.Map,java.io.OutputStream,java.util.List,java.util.Map)
 */
public void runAndRenderReport(IViewerReportDesignHandle design,String outputDocName,InputOptions options,Map parameters,OutputStream out,List activeIds,Map displayTexts) throws ReportServiceException {
  if (design == null || design.getDesignObject() == null)   throw new ReportServiceException(BirtResources.getMessage(ResourceConstants.GENERAL_EXCEPTION_NO_REPORT_DESIGN));
  HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  Boolean isMasterPageContent=(Boolean)options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Boolean svgFlag=(Boolean)options.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)options.getOption(InputOptions.OPT_RENDER_FORMAT);
  Boolean isRtl=(Boolean)options.getOption(InputOptions.OPT_RTL);
  String servletPath=(String)options.getOption(InputOptions.OPT_SERVLET_PATH);
  try {
    ViewerAttributeBean attrBean=(ViewerAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
    String reportTitle=ParameterAccessor.htmlDecode(attrBean.getReportTitle());
    IReportRunnable runnable=(IReportRunnable)design.getDesignObject();
    ReportEngineService.getInstance().runAndRenderReport(request,runnable,out,format,locale,isRtl.booleanValue(),parameters,isMasterPageContent.booleanValue(),svgFlag.booleanValue(),displayTexts,servletPath,reportTitle);
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage(),e.getCause());
  }
}","/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#runAndRenderReport(org.eclipse.birt.report.service.api.IViewerReportDesignHandle,java.lang.String,org.eclipse.birt.report.service.api.InputOptions,java.util.Map,java.io.OutputStream,java.util.List,java.util.Map)
 */
public void runAndRenderReport(IViewerReportDesignHandle design,String outputDocName,InputOptions options,Map parameters,OutputStream out,List activeIds,Map displayTexts) throws ReportServiceException {
  if (design == null || design.getDesignObject() == null)   throw new ReportServiceException(BirtResources.getMessage(ResourceConstants.GENERAL_EXCEPTION_NO_REPORT_DESIGN));
  HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
  Boolean isMasterPageContent=(Boolean)options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Boolean svgFlag=(Boolean)options.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)options.getOption(InputOptions.OPT_RENDER_FORMAT);
  Boolean isRtl=(Boolean)options.getOption(InputOptions.OPT_RTL);
  String servletPath=(String)options.getOption(InputOptions.OPT_SERVLET_PATH);
  try {
    ViewerAttributeBean attrBean=(ViewerAttributeBean)request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN);
    String reportTitle=ParameterAccessor.htmlDecode(attrBean.getReportTitle());
    IReportRunnable runnable=(IReportRunnable)design.getDesignObject();
    Integer maxRows=null;
    if (ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_MAXROWS))     maxRows=new Integer(ParameterAccessor.getMaxRows(request));
    ReportEngineService.getInstance().runAndRenderReport(request,runnable,out,format,locale,isRtl.booleanValue(),parameters,isMasterPageContent.booleanValue(),svgFlag.booleanValue(),displayTexts,servletPath,reportTitle,maxRows);
  }
 catch (  RemoteException e) {
    throw new ReportServiceException(e.getLocalizedMessage(),e.getCause());
  }
}",0.9506656225528582
72920,"/** 
 * Run report.
 * @param request
 * @param runnable
 * @param archive
 * @param documentName
 * @param locale
 * @param parameters
 * @param displayTexts
 * @throws RemoteException
 */
public void runReport(HttpServletRequest request,IReportRunnable runnable,String documentName,Locale locale,Map parameters,Map displayTexts) throws RemoteException {
}","/** 
 * Run report.
 * @param request
 * @param runnable
 * @param archive
 * @param documentName
 * @param locale
 * @param parameters
 * @param displayTexts
 * @param maxRows
 * @throws RemoteException
 */
public void runReport(HttpServletRequest request,IReportRunnable runnable,String documentName,Locale locale,Map parameters,Map displayTexts,Integer maxRows) throws RemoteException {
}",0.9545454545454546
72921,"/** 
 * Run and render a report,
 * @param request
 * @param runnable
 * @param outputStream
 * @param locale
 * @param rtl
 * @param parameters
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param renderOption
 * @param displayTexts
 * @param iServletPath
 * @param reportTitle
 * @throws RemoteException
 * @throws IOException
 */
public void runAndRenderReport(HttpServletRequest request,IReportRunnable runnable,OutputStream outputStream,String format,Locale locale,boolean rtl,Map parameters,boolean masterPage,boolean svgFlag,Boolean embeddable,List activeIds,RenderOption renderOption,Map displayTexts,String iServletPath,String reportTitle) throws RemoteException {
}","/** 
 * Run and render a report,
 * @param request
 * @param runnable
 * @param outputStream
 * @param locale
 * @param rtl
 * @param parameters
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param renderOption
 * @param displayTexts
 * @param iServletPath
 * @param reportTitle
 * @param maxRows
 * @throws RemoteException
 * @throws IOException
 */
public void runAndRenderReport(HttpServletRequest request,IReportRunnable runnable,OutputStream outputStream,String format,Locale locale,boolean rtl,Map parameters,boolean masterPage,boolean svgFlag,Boolean embeddable,List activeIds,RenderOption renderOption,Map displayTexts,String iServletPath,String reportTitle,Integer maxRows) throws RemoteException {
}",0.9759887005649718
72922,"/** 
 * Constructor.
 * @param servletContext
 * @param config
 */
private ReportEngineService(ServletContext servletContext){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletContext == null) {
    return;
  }
  ParameterAccessor.initParameters(servletContext);
  config=new EngineConfig();
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  imageBaseUrl=IBirtConstants.SERVLET_PATH_PREVIEW + ""String_Node_Str"" + ParameterAccessor.PARAM_IMAGEID+ ""String_Node_Str"";
  String logLevel=ParameterAccessor.logLevel;
  Level level=logLevel != null && logLevel.length() > 0 ? Level.parse(logLevel) : Level.OFF;
  config.setLogConfig(ParameterAccessor.logFolder,level);
  String scriptLibDir=ParameterAccessor.scriptLibDir;
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  config.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  ClassLoader appClassLoader=BirtUtility.getAppClassLoader();
  if (appClassLoader == null)   appClassLoader=ReportEngineService.class.getClassLoader();
  config.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,appClassLoader);
  config.setEngineHome(""String_Node_Str"");
  LoggingUtil.configureLoggers(ParameterAccessor.loggers,level,ParameterAccessor.logFolder);
}","/** 
 * Constructor.
 * @param servletContext
 * @param config
 */
private ReportEngineService(ServletContext servletContext){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletContext == null) {
    return;
  }
  ParameterAccessor.initParameters(servletContext);
  config=new EngineConfig();
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  imageBaseUrl=IBirtConstants.SERVLET_PATH_PREVIEW + ""String_Node_Str"" + ParameterAccessor.PARAM_IMAGEID+ ""String_Node_Str"";
  String logLevel=ParameterAccessor.logLevel;
  Level level=logLevel != null && logLevel.length() > 0 ? Level.parse(logLevel) : Level.OFF;
  config.setLogConfig(ParameterAccessor.logFolder,level);
  String scriptLibDir=ParameterAccessor.scriptLibDir;
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  config.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  ClassLoader appClassLoader=BirtUtility.getAppClassLoader();
  if (appClassLoader == null)   appClassLoader=ReportEngineService.class.getClassLoader();
  config.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,appClassLoader);
  config.setEngineHome(""String_Node_Str"");
  config.setMaxRowsPerQuery(ParameterAccessor.maxRows);
  LoggingUtil.configureLoggers(ParameterAccessor.loggers,level,ParameterAccessor.logFolder);
}",0.9857433808553973
72923,"/** 
 * handle generate report content
 * @param out
 * @throws Exception
 */
protected void __handleOutputReport(OutputStream out) throws Exception {
  ReportEngineService.getInstance().setMaxRows(viewer.getMaxRowsOfRecords());
  if (viewer.isDocumentInUrl()) {
    __renderDocument(out);
  }
 else {
    __renderReport(out);
  }
}","/** 
 * handle generate report content
 * @param out
 * @throws Exception
 */
protected void __handleOutputReport(OutputStream out) throws Exception {
  if (viewer.isDocumentInUrl()) {
    __renderDocument(out);
  }
 else {
    __renderReport(out);
  }
}",0.5699658703071673
72924,"/** 
 * Render report content from design file
 * @param out
 * @throws Exception
 */
private void __renderReport(OutputStream out) throws Exception {
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  Locale locale=(Locale)this.options.getOption(InputOptions.OPT_LOCALE);
  Boolean isMasterPageContent=(Boolean)this.options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Boolean svgFlag=(Boolean)this.options.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)this.options.getOption(InputOptions.OPT_FORMAT);
  Boolean isRtl=(Boolean)this.options.getOption(InputOptions.OPT_RTL);
  String servletPath=(String)this.options.getOption(InputOptions.OPT_SERVLET_PATH);
  IReportRunnable runnable=(IReportRunnable)this.reportDesignHandle.getDesignObject();
  String reportTitle=ParameterAccessor.htmlDecode(BirtUtility.getTitleFromDesign(reportDesignHandle));
  Map params=__handleParameters(reportDesignHandle,null);
  Collection parameterDefList=getReportService().getParameterDefinitions(reportDesignHandle,options,false);
  Map displayTexts=BirtUtility.getDisplayTexts(parameterDefList,null,(HttpServletRequest)pageContext.getRequest());
  String realReportletId=viewer.getReportletId();
  if (realReportletId == null) {
    if (viewer.getBookmark() != null && ""String_Node_Str"".equalsIgnoreCase(viewer.getIsReportlet())) {
      realReportletId=viewer.getBookmark();
    }
  }
  if (realReportletId != null) {
    String documentName=ParameterAccessor.getReportDocument(request,viewer.getReportDesign(),viewer.getId());
    ReportEngineService.getInstance().runReport(request,runnable,documentName,locale,parameters,displayTexts);
    IReportDocument doc=ReportEngineService.getInstance().openReportDocument(null,documentName,BirtTagUtil.getModuleOptions(viewer));
    ReportEngineService.getInstance().renderReportlet(out,request,doc,realReportletId,format,isMasterPageContent.booleanValue(),svgFlag.booleanValue(),null,locale,isRtl.booleanValue(),servletPath);
  }
 else {
    ReportEngineService.getInstance().runAndRenderReport(request,runnable,out,format,locale,isRtl.booleanValue(),params,isMasterPageContent.booleanValue(),svgFlag.booleanValue(),Boolean.TRUE,null,null,displayTexts,servletPath,reportTitle);
  }
}","/** 
 * Render report content from design file
 * @param out
 * @throws Exception
 */
private void __renderReport(OutputStream out) throws Exception {
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  Locale locale=(Locale)this.options.getOption(InputOptions.OPT_LOCALE);
  Boolean isMasterPageContent=(Boolean)this.options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Boolean svgFlag=(Boolean)this.options.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)this.options.getOption(InputOptions.OPT_FORMAT);
  Boolean isRtl=(Boolean)this.options.getOption(InputOptions.OPT_RTL);
  String servletPath=(String)this.options.getOption(InputOptions.OPT_SERVLET_PATH);
  IReportRunnable runnable=(IReportRunnable)this.reportDesignHandle.getDesignObject();
  String reportTitle=ParameterAccessor.htmlDecode(BirtUtility.getTitleFromDesign(reportDesignHandle));
  Map params=__handleParameters(reportDesignHandle,null);
  Collection parameterDefList=getReportService().getParameterDefinitions(reportDesignHandle,options,false);
  Map displayTexts=BirtUtility.getDisplayTexts(parameterDefList,null,(HttpServletRequest)pageContext.getRequest());
  String realReportletId=viewer.getReportletId();
  if (realReportletId == null) {
    if (viewer.getBookmark() != null && ""String_Node_Str"".equalsIgnoreCase(viewer.getIsReportlet())) {
      realReportletId=viewer.getBookmark();
    }
  }
  if (realReportletId != null) {
    String documentName=ParameterAccessor.getReportDocument(request,viewer.getReportDesign(),viewer.getId());
    ReportEngineService.getInstance().runReport(request,runnable,documentName,locale,parameters,displayTexts,new Integer(viewer.getMaxRowsOfRecords()));
    IReportDocument doc=ReportEngineService.getInstance().openReportDocument(null,documentName,BirtTagUtil.getModuleOptions(viewer));
    ReportEngineService.getInstance().renderReportlet(out,request,doc,realReportletId,format,isMasterPageContent.booleanValue(),svgFlag.booleanValue(),null,locale,isRtl.booleanValue(),servletPath);
  }
 else {
    ReportEngineService.getInstance().runAndRenderReport(request,runnable,out,format,locale,isRtl.booleanValue(),params,isMasterPageContent.booleanValue(),svgFlag.booleanValue(),Boolean.TRUE,null,null,displayTexts,servletPath,reportTitle,new Integer(viewer.getMaxRowsOfRecords()));
  }
}",0.981786643538595
72925,"/** 
 * Get preview max rows.
 * @param request http request
 * @return max rows
 */
public static int getMaxRows(HttpServletRequest request){
  int curMaxRows=ParameterAccessor.getParameterAsInt(request,PARAM_MAXROWS);
  if (curMaxRows <= 0)   curMaxRows=maxRows;
  return curMaxRows;
}","/** 
 * Get preview max rows.
 * @param request http request
 * @return max rows
 */
public static int getMaxRows(HttpServletRequest request){
  return ParameterAccessor.getParameterAsInt(request,PARAM_MAXROWS);
}",0.824
72926,"public void updateView(AggregationCellHandle cell){
  Object contentItem=ChartXTabUtil.getFirstContent(cell);
  if (ChartReportItemUtil.isChartHandle(contentItem)) {
    ExtendedItemHandle handle=(ExtendedItemHandle)contentItem;
    try {
      if (ChartXTabUtil.isPlotChart(handle)) {
        ChartReportItemImpl reportItem=(ChartReportItemImpl)handle.getReportItem();
        ChartWithAxes cm=(ChartWithAxes)reportItem.getProperty(ChartReportItemConstants.PROPERTY_CHART);
        if (cm == null) {
          cm=createDefaultChart(cell);
        }
 else {
          updateChartQueries(cm,cell);
        }
        reportItem.setProperty(ChartReportItemConstants.PROPERTY_CHART,cm);
        if (cm.isTransposed()) {
          cell.setSpanOverOnRow(cell.getAggregationOnRow());
          cell.setSpanOverOnColumn(null);
        }
 else {
          cell.setSpanOverOnColumn(cell.getAggregationOnColumn());
          cell.setSpanOverOnRow(null);
        }
        ChartXTabUIUtil.updateAxisChart(cell,cm,handle);
        ChartXTabUIUtil.updateXTabDirection(cell.getCrosstab(),cm.isTransposed());
      }
 else       if (ChartXTabUtil.isAxisChart(handle)) {
        ChartReportItemImpl reportItem=(ChartReportItemImpl)handle.getReportItem();
        ChartWithAxes cm=(ChartWithAxes)reportItem.getProperty(ChartReportItemConstants.PROPERTY_CHART);
        ChartXTabUIUtil.updateXTabDirection(cell.getCrosstab(),cm.isTransposed());
      }
    }
 catch (    BirtException e) {
      ExceptionHandler.handle(e);
    }
  }
}","@Override public void updateView(AggregationCellHandle cell,int type){
  Object contentItem=ChartXTabUtil.getFirstContent(cell);
  if (contentItem instanceof ExtendedItemHandle) {
    ExtendedItemHandle handle=(ExtendedItemHandle)contentItem;
    try {
      if (ChartXTabUtil.isPlotChart(handle)) {
        ChartReportItemImpl reportItem=(ChartReportItemImpl)handle.getReportItem();
        ChartWithAxes cm=(ChartWithAxes)reportItem.getProperty(ChartReportItemConstants.PROPERTY_CHART);
        ChartWithAxes cmNew=cm;
        if (cm == null) {
          return;
        }
        cmNew=(ChartWithAxes)EcoreUtil.copy(cm);
        if (type == CHANGE_ORIENTATION_TYPE) {
          cmNew.setTransposed(cell.getCrosstab().getMeasureDirection().equals(ICrosstabConstants.MEASURE_DIRECTION_HORIZONTAL));
        }
        updateChartQueries(cmNew,cell);
        reportItem.executeSetModelCommand(handle,cm,cmNew);
        if (cmNew.isTransposed()) {
          cell.setSpanOverOnRow(cell.getAggregationOnRow());
          cell.setSpanOverOnColumn(null);
        }
 else {
          cell.setSpanOverOnColumn(cell.getAggregationOnColumn());
          cell.setSpanOverOnRow(null);
        }
        if (type == CHANGE_ORIENTATION_TYPE) {
          ChartXTabUIUtil.updateXTabForAxis(cell,handle,cm.isTransposed(),cmNew);
        }
 else {
          ChartXTabUIUtil.updateAxisChart(cell,cmNew,handle);
          ChartXTabUIUtil.updateXTabDirection(cell.getCrosstab(),cmNew.isTransposed());
        }
      }
 else       if (ChartXTabUtil.isAxisChart(handle)) {
        if (type != CHANGE_ORIENTATION_TYPE) {
          ChartReportItemImpl reportItem=(ChartReportItemImpl)handle.getReportItem();
          ChartWithAxes cm=(ChartWithAxes)reportItem.getProperty(ChartReportItemConstants.PROPERTY_CHART);
          ChartXTabUIUtil.updateXTabDirection(cell.getCrosstab(),cm.isTransposed());
        }
      }
    }
 catch (    BirtException e) {
      ExceptionHandler.handle(e);
    }
  }
}",0.4054982817869416
72927,"protected void createRoot(){
  if (!isFirst) {
    int startColumn=cellContent.getColumn();
    int endColumn=startColumn + cellContent.getColSpan();
    columnWidth=tableLM.getCellWidth(startColumn,endColumn);
  }
  if (root == null) {
    CellArea cell=AreaFactory.createCellArea(cellContent);
    cell.setRowSpan(tableLM.getRowSpan(cellContent));
    root=cell;
    if (!isFirst) {
      IStyle areaStyle=root.getStyle();
      areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
      areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
    }
  }
  tableLM.resolveBorderConflict((CellArea)root,isFirst);
  root.setWidth(columnWidth);
}","protected void createRoot(){
  if (root == null) {
    CellArea cell=AreaFactory.createCellArea(cellContent);
    cell.setRowSpan(tableLM.getRowSpan(cellContent));
    root=cell;
    if (!isFirst) {
      IStyle areaStyle=root.getStyle();
      areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
      areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
    }
  }
  tableLM.resolveBorderConflict((CellArea)root,isFirst);
  int startColumn=cellContent.getColumn();
  int endColumn=startColumn + cellContent.getColSpan();
  columnWidth=tableLM.getCellWidth(startColumn,endColumn);
  root.setWidth(columnWidth);
}",0.7123076923076923
72928,"public PDFCellLM(PDFLayoutEngineContext context,PDFStackingLM parent,IContent content,IReportItemExecutor executor){
  super(context,parent,content,executor);
  assert(parent != null);
  tableLM=getTableLayoutManager();
  cellContent=(ICellContent)content;
  int startColumn=cellContent.getColumn();
  int endColumn=startColumn + cellContent.getColSpan();
  columnWidth=tableLM.getCellWidth(startColumn,endColumn);
}","public PDFCellLM(PDFLayoutEngineContext context,PDFStackingLM parent,IContent content,IReportItemExecutor executor){
  super(context,parent,content,executor);
  assert(parent != null);
  tableLM=getTableLayoutManager();
  cellContent=(ICellContent)content;
}",0.7655786350148368
72929,"protected boolean isHidden(){
  if (columnWidth == 0 || !tableLM.isCellVisible(cellContent)) {
    return true;
  }
  return isHiddenByVisibility();
}","protected boolean isHidden(){
  if (!tableLM.isCellVisible(cellContent)) {
    return true;
  }
  return isHiddenByVisibility();
}",0.9285714285714286
72930,"public void buildContextMenu(IMenuManager menuManager){
  if (proxy != null) {
    proxy.menuAboutToShow(menuManager);
    proxy=null;
    return;
  }
  GEFActionConstants.addStandardActionGroups(menuManager);
  Object firstSelectedElement=getFirstElement();
  Object selectedElements=getSelectedElement();
  Object multiSelection=getMultiSelectedElement();
  boolean isExtended=false;
  if (firstSelectedElement instanceof IAdaptable) {
    if (((IAdaptable)firstSelectedElement).getAdapter(DesignElementHandle.class) instanceof ExtendedItemHandle)     isExtended=true;
  }
  if (isMutilSelection(multiSelection)) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(ActionFactory.DELETE.getId()));
    if (isRootElementHandleClass(multiSelection)) {
      Action action=new RefreshModuleHandleAction(selectedElements);
      menuManager.add(action);
      createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
      createThemeMenu(menuManager,GEFActionConstants.GROUP_REST);
    }
    if (isListHandleCalss(multiSelection)) {
      IAction action=getAction(CreatePlaceHolderPartAction.ID);
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
    }
    createStyleMenu(menuManager,GEFActionConstants.GROUP_REST);
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"");
    }
  }
 else   if (firstSelectedElement instanceof DesignElementHandle || isExtended) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    createStyleMenu(menuManager,GEFActionConstants.GROUP_REST);
    if (((IStructuredSelection)getSelection()).size() == 1) {
      Object element=((IStructuredSelection)getSelection()).getFirstElement();
      if (element instanceof LabelEditPart || element instanceof ImageEditPart) {
        if (element instanceof DataEditPart) {
          IAction action=getAction(ChangeDataColumnPartAction.ID);
          menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
        }
        IAction action=getAction(GEFActionConstants.DIRECT_EDIT);
        action.setAccelerator(SWT.F2);
        if (element instanceof DataEditPart) {
          action.setText(Messages.getString(""String_Node_Str""));
        }
 else {
          action.setText(Messages.getString(""String_Node_Str""));
        }
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
      if (firstSelectedElement instanceof ReportItemHandle) {
        IAction action=getAction(CreatePlaceHolderPartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
      if (firstSelectedElement instanceof TemplateReportItemHandle) {
        IAction action=getAction(RevertToReportItemPartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
      Object[] objs=ElementAdapterManager.getAdapters(firstSelectedElement,IReportItemViewProvider.class);
      if (objs != null && objs.length == 1) {
        IAction action=getAction(CreateChartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_VIEW,action);
      }
    }
    if (firstSelectedElement instanceof RowHandle) {
      if (getRowHandles().size() != 0) {
        MenuManager insertMenu=new MenuManager(INSERT_MENU_ITEM_TEXT);
        MenuManager rowMenu=new MenuManager(INSERT_ROW_MENU_ITEM_TEXT);
        rowMenu.add(getAction(InsertRowAboveAction.ID));
        rowMenu.add(getAction(InsertRowBelowAction.ID));
        RowHandle row=(RowHandle)getRowHandles().get(0);
        if (!(row.getContainer() instanceof GridHandle)) {
          insertMenu.add(getAction(IncludeHeaderAction.ID));
          insertMenu.add(getAction(IncludeDetailAction.ID));
          insertMenu.add(getAction(IncludeFooterAction.ID));
        }
        insertMenu.add(rowMenu);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,insertMenu);
      }
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(DeleteRowAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
    }
 else     if (firstSelectedElement instanceof ColumnHandle) {
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,new InsertPasteColumnAction(selectedElements));
      if (getColumnHandles().size() != 0) {
        MenuManager subMenu=new MenuManager(INSERT_MENU_ITEM_TEXT);
        subMenu.add(getAction(InsertColumnRightAction.ID));
        subMenu.add(getAction(InsertColumnLeftAction.ID));
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,subMenu);
      }
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(DeleteColumnAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
    }
 else     if (firstSelectedElement instanceof CellHandle) {
      createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(CopyCellContentsContextAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new DeleteAction(selectedElements));
    }
 else {
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(ActionFactory.DELETE.getId()));
    }
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"" + ((DesignElementHandle)firstSelectedElement).getDefn().getDisplayName());
    }
  }
 else   if (firstSelectedElement instanceof SlotHandle) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new DeleteAction(selectedElements));
    createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"" + ((SlotHandle)firstSelectedElement).getSlotID() + ""String_Node_Str""+ ((SlotHandle)firstSelectedElement).getElementHandle().getDefn().getDisplayName());
    }
  }
 else {
  }
  if (!getTableEditParts().isEmpty() || !getTableMultipleEditParts().isEmpty()) {
    createInsertGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
    if (getTableEditParts().size() == 1 || getTableMultipleEditParts().size() == 1) {
      createDeleteGroupMenus(menuManager,GEFActionConstants.GROUP_ADD);
      createEditGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
      createInsertGroupHeaderFooter(menuManager,GEFActionConstants.GROUP_ADD);
      Separator separator=new Separator(EditBindingAction.ID);
      menuManager.add(separator);
      menuManager.appendToGroup(EditBindingAction.ID,getAction(EditBindingAction.ID));
    }
  }
  if (!getListEditParts().isEmpty()) {
    createInsertGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
    if (getListEditParts().size() == 1) {
      createDeleteGroupMenus(menuManager,GEFActionConstants.GROUP_ADD);
      createEditGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
      Separator separator=new Separator(EditBindingAction.ID);
      menuManager.add(separator);
      menuManager.appendToGroup(EditBindingAction.ID,getAction(EditBindingAction.ID));
    }
  }
  if (getElements().size() == 1 || isMutilSelection(multiSelection)) {
    if (firstSelectedElement instanceof DesignElementHandle) {
      String elementName=((DesignElementHandle)firstSelectedElement).getDefn().getName();
      IMenuBuilder menuBuilder=ExtensionPointManager.getInstance().getMenuBuilder(elementName);
      if (menuBuilder != null) {
        menuBuilder.buildMenu(menuManager,getElements());
      }
    }
    Object menuAdapter=Platform.getAdapterManager().getAdapter(firstSelectedElement,IMenuListener.class);
    if (menuAdapter != null) {
      if (menuAdapter instanceof ISchematicMenuListener) {
        ((ISchematicMenuListener)menuAdapter).setActionRegistry(getActionRegistry());
      }
      ((IMenuListener)menuAdapter).menuAboutToShow(menuManager);
    }
  }
}","public void buildContextMenu(IMenuManager menuManager){
  if (proxy != null) {
    proxy.menuAboutToShow(menuManager);
    proxy=null;
    return;
  }
  GEFActionConstants.addStandardActionGroups(menuManager);
  Object firstSelectedElement=getFirstElement();
  Object selectedElements=getSelectedElement();
  Object multiSelection=getMultiSelectedElement();
  boolean isExtended=false;
  if (firstSelectedElement instanceof IAdaptable) {
    if (((IAdaptable)firstSelectedElement).getAdapter(DesignElementHandle.class) instanceof ExtendedItemHandle)     isExtended=true;
  }
  if (isMutilSelection(multiSelection)) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(ActionFactory.DELETE.getId()));
    if (isRootElementHandleClass(multiSelection)) {
      Action action=new RefreshModuleHandleAction(selectedElements);
      menuManager.add(action);
      createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
      createThemeMenu(menuManager,GEFActionConstants.GROUP_REST);
    }
    if (isListHandleCalss(multiSelection)) {
      IAction action=getAction(CreatePlaceHolderPartAction.ID);
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
    }
    createStyleMenu(menuManager,GEFActionConstants.GROUP_REST);
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"");
    }
  }
 else   if (firstSelectedElement instanceof DesignElementHandle || isExtended) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    createStyleMenu(menuManager,GEFActionConstants.GROUP_REST);
    if (((IStructuredSelection)getSelection()).size() == 1) {
      Object element=((IStructuredSelection)getSelection()).getFirstElement();
      if (element instanceof LabelEditPart || element instanceof ImageEditPart) {
        if (element instanceof DataEditPart) {
          IAction action=getAction(ChangeDataColumnPartAction.ID);
          menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
        }
        IAction action=getAction(GEFActionConstants.DIRECT_EDIT);
        action.setAccelerator(SWT.F2);
        if (element instanceof DataEditPart) {
          action.setText(Messages.getString(""String_Node_Str""));
        }
 else {
          action.setText(Messages.getString(""String_Node_Str""));
        }
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
      if (firstSelectedElement instanceof ReportItemHandle) {
        IAction action=getAction(CreatePlaceHolderPartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
      if (firstSelectedElement instanceof TemplateReportItemHandle) {
        IAction action=getAction(RevertToReportItemPartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
      }
      Object[] objs=ElementAdapterManager.getAdapters(firstSelectedElement,IReportItemViewProvider.class);
      if (objs != null && objs.length == 1) {
        IAction action=getAction(CreateChartAction.ID);
        menuManager.appendToGroup(GEFActionConstants.GROUP_VIEW,action);
      }
    }
    if (firstSelectedElement instanceof RowHandle) {
      if (getRowHandles().size() != 0) {
        MenuManager insertMenu=new MenuManager(INSERT_MENU_ITEM_TEXT);
        MenuManager rowMenu=new MenuManager(INSERT_ROW_MENU_ITEM_TEXT);
        rowMenu.add(getAction(InsertRowAboveAction.ID));
        rowMenu.add(getAction(InsertRowBelowAction.ID));
        RowHandle row=(RowHandle)getRowHandles().get(0);
        if (!(row.getContainer() instanceof GridHandle)) {
          insertMenu.add(getAction(IncludeHeaderAction.ID));
          insertMenu.add(getAction(IncludeDetailAction.ID));
          insertMenu.add(getAction(IncludeFooterAction.ID));
        }
        insertMenu.add(rowMenu);
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,insertMenu);
      }
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(DeleteRowAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
    }
 else     if (firstSelectedElement instanceof ColumnHandle) {
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,new InsertPasteColumnAction(selectedElements));
      if (getColumnHandles().size() != 0) {
        MenuManager subMenu=new MenuManager(INSERT_MENU_ITEM_TEXT);
        subMenu.add(getAction(InsertColumnRightAction.ID));
        subMenu.add(getAction(InsertColumnLeftAction.ID));
        menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,subMenu);
      }
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(DeleteColumnAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
    }
 else     if (firstSelectedElement instanceof CellHandle) {
      createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(CopyCellContentsContextAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(MergeAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT,getAction(SplitAction.ID));
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new DeleteAction(selectedElements));
    }
 else {
      menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,getAction(ActionFactory.DELETE.getId()));
    }
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"" + ((DesignElementHandle)firstSelectedElement).getDefn().getDisplayName());
    }
  }
 else   if (firstSelectedElement instanceof SlotHandle) {
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.UNDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO,getAction(ActionFactory.REDO.getId()));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CutAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new CopyAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new PasteAction(selectedElements));
    menuManager.appendToGroup(GEFActionConstants.GROUP_COPY,new DeleteAction(selectedElements));
    createInsertElementMenu(menuManager,GEFActionConstants.GROUP_EDIT);
    if (Policy.TRACING_MENU_SHOW) {
      System.out.println(""String_Node_Str"" + ((SlotHandle)firstSelectedElement).getSlotID() + ""String_Node_Str""+ ((SlotHandle)firstSelectedElement).getElementHandle().getDefn().getDisplayName());
    }
  }
 else {
  }
  if (!getTableEditParts().isEmpty() || !getTableMultipleEditParts().isEmpty()) {
    createInsertGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
    if (getTableEditParts().size() == 1 || getTableMultipleEditParts().size() == 1) {
      createDeleteGroupMenus(menuManager,GEFActionConstants.GROUP_ADD);
      createEditGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
      createInsertGroupHeaderFooter(menuManager,GEFActionConstants.GROUP_ADD);
      Separator separator=new Separator(EditBindingAction.ID);
      menuManager.add(separator);
      menuManager.appendToGroup(EditBindingAction.ID,getAction(EditBindingAction.ID));
    }
  }
  if (!getListEditParts().isEmpty()) {
    createInsertGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
    if (getListEditParts().size() == 1) {
      createDeleteGroupMenus(menuManager,GEFActionConstants.GROUP_ADD);
      createEditGroupMenu(menuManager,GEFActionConstants.GROUP_ADD);
      Separator separator=new Separator(EditBindingAction.ID);
      menuManager.add(separator);
      menuManager.appendToGroup(EditBindingAction.ID,getAction(EditBindingAction.ID));
    }
  }
  if (getElements().size() == 1 || isMutilSelection(multiSelection)) {
    if (firstSelectedElement instanceof DesignElementHandle) {
      String elementName=((DesignElementHandle)firstSelectedElement).getDefn().getName();
      IMenuBuilder menuBuilder=ExtensionPointManager.getInstance().getMenuBuilder(elementName);
      if (menuBuilder != null) {
        menuBuilder.buildMenu(menuManager,getElements());
      }
    }
    Object[] menuAdapters=ElementAdapterManager.getAdapters(firstSelectedElement,IMenuListener.class);
    if (menuAdapters != null && menuAdapters.length > 0) {
      for (int i=0; i < menuAdapters.length; i++) {
        if (menuAdapters[i] instanceof ISchematicMenuListener) {
          ((ISchematicMenuListener)menuAdapters[i]).setActionRegistry(getActionRegistry());
        }
        ((IMenuListener)menuAdapters[i]).menuAboutToShow(menuManager);
      }
    }
  }
}",0.980343083581
72931,"public Object getAdater(Object adaptableObject){
  if (this.adapter != null && this.isSingleton)   return this.adapter;
  if (this.adapterInstance != null)   return this.adapter=this.adapterInstance;
  if (this.factory != null)   this.adapter=this.factory.getAdapter(adaptableObject,this.adapterType);
  if (this.adapter == null && this.includeWorkbenchContribute)   this.adapter=Platform.getAdapterManager().getAdapter(adaptableObject,this.adapterType);
  return adapter;
}","public Object getAdater(Object adaptableObject){
  if (this.adapter != null && this.isSingleton) {
    return this.adapter;
  }
  if (this.adapterInstance != null) {
    return this.adapter=this.adapterInstance;
  }
  if (this.factory != null) {
    this.adapter=this.factory.getAdapter(adaptableObject,this.adapterType);
  }
  if (this.adapter == null && this.includeWorkbenchContribute) {
    this.adapter=Platform.getAdapterManager().getAdapter(adaptableObject,this.adapterType);
  }
  return adapter;
}",0.9673469387755104
72932,"public Object evaluate(String script) throws BirtException {
  if (null != script && script.length() > 0) {
    ScriptExpression scriptExpression=new ScriptExpression(script);
    return context.evaluate(scriptExpression);
  }
  return null;
}","public Object evaluate(String script) throws BirtException {
  if (null != script && script.length() > 0) {
    return context.evaluate(script);
  }
  return null;
}",0.8088235294117647
72933,"/** 
 * Cancel the process
 * @param browser
 */
public static void cancel(Browser browser){
  if (browser == null)   return;
  try {
    browser.execute(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}","/** 
 * Cancel the process
 * @param browser
 */
public static void cancel(Browser browser){
  if (browser == null)   return;
  try {
    browser.execute(""String_Node_Str"");
  }
 catch (  Exception e) {
    LogUtil.logError(e.getLocalizedMessage(),e);
  }
}",0.8946236559139785
72934,"/** 
 * Stop web application
 */
private static void stopWebApp(){
  try {
    WebappAccessor.stop(ViewerPlugin.WEBAPP_CONTEXT);
  }
 catch (  CoreException e) {
  }
}","/** 
 * Stop web application
 */
private static void stopWebApp(){
  try {
    WebappAccessor.stop(ViewerPlugin.WEBAPP_CONTEXT);
  }
 catch (  CoreException e) {
    LogUtil.logError(e.getLocalizedMessage(),e);
  }
}",0.8720626631853786
72935,"/** 
 * Start web application.
 */
private synchronized static void startWebApp(){
  try {
    String debugMode=System.getProperty(REPORT_DEBUT_MODE);
    if (debugMode == null) {
      String classpaths=ViewerClassPathHelper.getWorkspaceClassPath();
      URL[] urls=ViewerClassPathHelper.parseURLs(classpaths);
      if (reloadableClassLoader == null) {
        reloadableClassLoader=new ReloadableClassLoader(urls,WebViewer.class.getClassLoader());
      }
 else {
        reloadableClassLoader.setUrls(urls);
        reloadableClassLoader.reload();
      }
    }
    WebappAccessor.start(ViewerPlugin.WEBAPP_CONTEXT);
  }
 catch (  CoreException e) {
  }
}","/** 
 * Start web application.
 */
private synchronized static void startWebApp(){
  try {
    String debugMode=System.getProperty(REPORT_DEBUT_MODE);
    if (debugMode == null) {
      String classpaths=ViewerClassPathHelper.getWorkspaceClassPath();
      URL[] urls=ViewerClassPathHelper.parseURLs(classpaths);
      if (reloadableClassLoader == null) {
        reloadableClassLoader=new ReloadableClassLoader(urls,WebViewer.class.getClassLoader());
      }
 else {
        reloadableClassLoader.setUrls(urls);
        reloadableClassLoader.reload();
      }
    }
    WebappAccessor.start(ViewerPlugin.WEBAPP_CONTEXT);
  }
 catch (  CoreException e) {
    LogUtil.logError(e.getLocalizedMessage(),e);
  }
}",0.9642074506939372
72936,"/** 
 * Displays the specified url using eclipse SWT browser.
 * @param report report report
 * @param params the parameter map to set
 */
public static void display(String report,Map params){
  try {
    startWebApp();
    BrowserAccessor.getPreviewBrowser(false).displayURL(createURL(report,params) + ""String_Node_Str"" + new Random().nextInt());
  }
 catch (  Exception e) {
  }
}","/** 
 * Displays the specified url using eclipse SWT browser.
 * @param report report report
 * @param params the parameter map to set
 */
public static void display(String report,Map params){
  startWebApp();
  try {
    BrowserAccessor.getPreviewBrowser(false).displayURL(createURL(report,params) + ""String_Node_Str"" + new Random().nextInt());
  }
 catch (  Exception e) {
    LogUtil.logError(e.getLocalizedMessage(),e);
  }
}",0.9173859432799012
72937,"/** 
 * Create web viewer url to run the report.
 * @param servletName servlet name to viewer report
 * @param report report file name
 * @param format report format
 * @param resourceFolder the resource folder
 * @param maxrows max rows limited
 * @param maxlevels max level member limited
 * @return valid web viewer url
 */
private static String createURL(String servletName,String report,String format,boolean inDesigner,String resourceFolder,String maxrows,String maxrowlevels,String maxcolumnlevels){
  String encodedReportName=null;
  try {
    encodedReportName=URLEncoder.encode(report,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  String locale=ViewerPlugin.getDefault().getPluginPreferences().getString(USER_LOCALE);
  String svgFlag=ViewerPlugin.getDefault().getPluginPreferences().getString(SVG_FLAG);
  boolean bSVGFlag=false;
  String cubeMemorySize=ViewerPlugin.getDefault().getPluginPreferences().getString(PREVIEW_MAXINMEMORYCUBESIZE);
  boolean rtl=false;
  String eclipseCommands=System.getProperty(""String_Node_Str"");
  if (eclipseCommands != null) {
    String[] options=eclipseCommands.split(""String_Node_Str"");
    String regex=""String_Node_Str"";
    Pattern pattern=Pattern.compile(regex);
    for (int i=0; i < options.length; i++) {
      String option=options[i];
      if (pattern.matcher(option).matches()) {
        rtl=true;
        break;
      }
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(svgFlag)) {
    bSVGFlag=true;
  }
  String masterPageContent=ViewerPlugin.getDefault().getPluginPreferences().getString(MASTER_PAGE_CONTENT);
  boolean bMasterPageContent=true;
  if (""String_Node_Str"".equalsIgnoreCase(masterPageContent)) {
    bMasterPageContent=false;
  }
  String encodedResourceFolder=null;
  try {
    if (resourceFolder != null)     encodedResourceFolder=URLEncoder.encode(resourceFolder,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (encodedResourceFolder == null)   encodedResourceFolder=""String_Node_Str"";
  String reportParam=""String_Node_Str"";
  if (isReportDocument(encodedReportName))   reportParam=""String_Node_Str"";
  reportParam+=""String_Node_Str"" + encodedReportName;
  String asattachment=null;
  if (POSTSCRIPT.equalsIgnoreCase(format))   asattachment=""String_Node_Str"";
  int dpi=Toolkit.getDefaultToolkit().getScreenResolution();
  return getBaseURL() + servletName + ""String_Node_Str""+ reportParam+ ""String_Node_Str""+ format+ ""String_Node_Str""+ String.valueOf(bSVGFlag)+ (LocaleTable.containsKey(locale) ? ""String_Node_Str"" + LocaleTable.get(locale) : ""String_Node_Str"")+ ""String_Node_Str""+ String.valueOf(inDesigner)+ ""String_Node_Str""+ String.valueOf(bMasterPageContent)+ ""String_Node_Str""+ String.valueOf(rtl)+ (maxrows != null && maxrows.trim().length() > 0 ? ""String_Node_Str"" + maxrows : ""String_Node_Str"")+ (maxrowlevels != null && maxrowlevels.trim().length() > 0 ? ""String_Node_Str"" + maxrowlevels : ""String_Node_Str"")+ (maxcolumnlevels != null && maxcolumnlevels.trim().length() > 0 ? ""String_Node_Str"" + maxcolumnlevels : ""String_Node_Str"")+ (cubeMemorySize != null && cubeMemorySize.trim().length() > 0 ? ""String_Node_Str"" + cubeMemorySize : ""String_Node_Str"")+ ""String_Node_Str""+ encodedResourceFolder+ (asattachment != null ? asattachment : ""String_Node_Str"")+ ""String_Node_Str""+ dpi;
}","/** 
 * Create web viewer url to run the report.
 * @param servletName servlet name to viewer report
 * @param report report file name
 * @param format report format
 * @param resourceFolder the resource folder
 * @param maxrows max rows limited
 * @param maxlevels max level member limited
 * @return valid web viewer url
 */
private static String createURL(String servletName,String report,String format,boolean inDesigner,String resourceFolder,String maxrows,String maxrowlevels,String maxcolumnlevels){
  String encodedReportName=null;
  try {
    encodedReportName=URLEncoder.encode(report,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    LogUtil.logWarning(e.getLocalizedMessage(),e);
  }
  String locale=ViewerPlugin.getDefault().getPluginPreferences().getString(USER_LOCALE);
  String svgFlag=ViewerPlugin.getDefault().getPluginPreferences().getString(SVG_FLAG);
  boolean bSVGFlag=false;
  String cubeMemorySize=ViewerPlugin.getDefault().getPluginPreferences().getString(PREVIEW_MAXINMEMORYCUBESIZE);
  boolean rtl=false;
  String eclipseCommands=System.getProperty(""String_Node_Str"");
  if (eclipseCommands != null) {
    String[] options=eclipseCommands.split(""String_Node_Str"");
    String regex=""String_Node_Str"";
    Pattern pattern=Pattern.compile(regex);
    for (int i=0; i < options.length; i++) {
      String option=options[i];
      if (pattern.matcher(option).matches()) {
        rtl=true;
        break;
      }
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(svgFlag)) {
    bSVGFlag=true;
  }
  String masterPageContent=ViewerPlugin.getDefault().getPluginPreferences().getString(MASTER_PAGE_CONTENT);
  boolean bMasterPageContent=true;
  if (""String_Node_Str"".equalsIgnoreCase(masterPageContent)) {
    bMasterPageContent=false;
  }
  String encodedResourceFolder=null;
  try {
    if (resourceFolder != null)     encodedResourceFolder=URLEncoder.encode(resourceFolder,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    LogUtil.logWarning(e.getLocalizedMessage(),e);
  }
  if (encodedResourceFolder == null)   encodedResourceFolder=""String_Node_Str"";
  String reportParam=""String_Node_Str"";
  if (isReportDocument(encodedReportName))   reportParam=""String_Node_Str"";
  reportParam+=""String_Node_Str"" + encodedReportName;
  String asattachment=null;
  if (POSTSCRIPT.equalsIgnoreCase(format))   asattachment=""String_Node_Str"";
  int dpi=Toolkit.getDefaultToolkit().getScreenResolution();
  return getBaseURL() + servletName + ""String_Node_Str""+ reportParam+ ""String_Node_Str""+ format+ ""String_Node_Str""+ String.valueOf(bSVGFlag)+ (LocaleTable.containsKey(locale) ? ""String_Node_Str"" + LocaleTable.get(locale) : ""String_Node_Str"")+ ""String_Node_Str""+ String.valueOf(inDesigner)+ ""String_Node_Str""+ String.valueOf(bMasterPageContent)+ ""String_Node_Str""+ String.valueOf(rtl)+ (maxrows != null && maxrows.trim().length() > 0 ? ""String_Node_Str"" + maxrows : ""String_Node_Str"")+ (maxrowlevels != null && maxrowlevels.trim().length() > 0 ? ""String_Node_Str"" + maxrowlevels : ""String_Node_Str"")+ (maxcolumnlevels != null && maxcolumnlevels.trim().length() > 0 ? ""String_Node_Str"" + maxcolumnlevels : ""String_Node_Str"")+ (cubeMemorySize != null && cubeMemorySize.trim().length() > 0 ? ""String_Node_Str"" + cubeMemorySize : ""String_Node_Str"")+ ""String_Node_Str""+ encodedResourceFolder+ (asattachment != null ? asattachment : ""String_Node_Str"")+ ""String_Node_Str""+ dpi;
}",0.9849112426035505
72938,"/** 
 * @param report the entry point to the report design
 * @param context the execution context
 */
public ReportQueryBuilder(Report report,ExecutionContext context,DataRequestSession dteSession){
  expressionUtil=new ExpressionUtil();
  queryBuilder=new QueryBuilderVisitor();
  this.dteSession=dteSession;
  this.report=report;
  this.context=context;
  if (null != this.context) {
    IReportEngine engine=this.context.getEngine();
    if (null != engine) {
      EngineConfig engineConfig=engine.getConfig();
      if (null != engineConfig) {
        maxRows=engineConfig.getMaxRowsPerQuery();
      }
    }
  }
  queryContext=new QueryContext(context,this);
}","/** 
 * @param report the entry point to the report design
 * @param context the execution context
 */
public ReportQueryBuilder(Report report,ExecutionContext context,DataRequestSession dteSession){
  expressionUtil=new ExpressionUtil();
  queryBuilder=new QueryBuilderVisitor();
  this.dteSession=dteSession;
  this.report=report;
  this.context=context;
  if (null != this.context) {
    maxRows=this.context.getMaxRowsPerQuery();
    if (maxRows == -1) {
      IReportEngine engine=this.context.getEngine();
      if (null != engine) {
        EngineConfig engineConfig=engine.getConfig();
        if (null != engineConfig) {
          maxRows=engineConfig.getMaxRowsPerQuery();
        }
      }
    }
  }
  queryContext=new QueryContext(context,this);
}",0.935483870967742
72939,"public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (htmlRtLFlag) {
    String reportStyleName=report == null ? null : report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      if (null != style) {
        style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.RIGHT_VALUE);
      }
    }
  }
  if (null == layoutPreference) {
    if (report != null) {
      Report reportDesign=report.getDesign();
      ReportDesignHandle designHandle=reportDesign.getReportDesign();
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,isEmbeddable,layoutPreference);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,isEmbeddable,layoutPreference);
  }
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      htmlEmitter.buildDefaultStyle(defaultStyleBuffer,style);
    }
  }
  if (isEmbeddable) {
    fixTransparentPNG();
    fixRedirect();
    writer.openTag(HTMLTags.TAG_DIV);
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_HEAD);
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    ReportDesignHandle designHandle=reportDesign.getReportDesign();
    String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
    if (title == null) {
      if (renderOption != null) {
        HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
        title=htmlOption.getHtmlTitle();
      }
    }
    if (title != null) {
      writer.openTag(HTMLTags.TAG_TITLE);
      writer.text(title);
      writer.closeTag(HTMLTags.TAG_TITLE);
    }
  }
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  String defaultStyleName=""String_Node_Str"";
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    writer.style('.' + defaultStyleName,defaultStyleBuffer.toString());
    Map styles=reportDesign.getStyles();
    Iterator iter=styles.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      String styleName=(String)entry.getKey();
      style=(IStyle)entry.getValue();
      styleBuffer.setLength(0);
      htmlEmitter.buildStyle(styleBuffer,style);
      if (styleBuffer.length() > 0) {
        writer.style('.' + styleName,styleBuffer.toString());
        outputtedStyles.add(styleName);
      }
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  fixTransparentPNG();
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
  }
  writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
}","public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (htmlRtLFlag) {
    String reportStyleName=report == null ? null : report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      if (null != style) {
        style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.RIGHT_VALUE);
      }
    }
  }
  if (null == layoutPreference) {
    if (report != null) {
      Report reportDesign=report.getDesign();
      ReportDesignHandle designHandle=reportDesign.getReportDesign();
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,isEmbeddable,layoutPreference);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,isEmbeddable,layoutPreference);
  }
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String reportStyleName=report.getDesign().getRootStyleName();
    if (reportStyleName != null) {
      IStyle style=report.findStyle(reportStyleName);
      htmlEmitter.buildDefaultStyle(defaultStyleBuffer,style);
    }
  }
  if (isEmbeddable) {
    fixTransparentPNG();
    fixRedirect();
    writer.openTag(HTMLTags.TAG_DIV);
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_HEAD);
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    ReportDesignHandle designHandle=reportDesign.getReportDesign();
    String title=designHandle.getStringProperty(IModuleModel.TITLE_PROP);
    if (title == null) {
      if (renderOption != null) {
        HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
        title=htmlOption.getHtmlTitle();
      }
    }
    if (title != null) {
      writer.openTag(HTMLTags.TAG_TITLE);
      writer.text(title);
      writer.closeTag(HTMLTags.TAG_TITLE);
    }
  }
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  String defaultStyleName=""String_Node_Str"";
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    writer.style('.' + defaultStyleName,defaultStyleBuffer.toString());
    Map styles=reportDesign.getStyles();
    Iterator iter=styles.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      String styleName=(String)entry.getKey();
      style=(IStyle)entry.getValue();
      styleBuffer.setLength(0);
      htmlEmitter.buildStyle(styleBuffer,style);
      if (styleBuffer.length() > 0) {
        writer.style('.' + styleName,styleBuffer.toString());
        outputtedStyles.add(styleName);
      }
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  fixTransparentPNG();
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
  }
  if (outputMasterPageContent) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
}",0.9949330908146032
72940,"public final IFigure createFigure(ExtendedItemHandle eih){
  try {
    eih.loadExtendedElement();
  }
 catch (  ExtendedElementException eeex) {
    logger.log(eeex);
  }
  try {
    final IReportItem iri=eih.getReportItem();
    final DesignerRepresentation dr=new DesignerRepresentation((ChartReportItemImpl)iri);
    ((ChartReportItemImpl)iri).setDesignerRepresentation(dr);
    return dr;
  }
 catch (  ExtendedElementException e) {
    return null;
  }
}","public final IFigure createFigure(final ExtendedItemHandle eih){
  try {
    eih.loadExtendedElement();
  }
 catch (  ExtendedElementException eeex) {
    logger.log(eeex);
  }
  try {
    final ChartReportItemImpl iri=(ChartReportItemImpl)eih.getReportItem();
    final DesignerRepresentation dr=new DesignerRepresentation(iri);
    iri.setDesignerRepresentation(dr);
    if (iri.isCopied() && ChartXTabUtil.isPlotChart(eih)) {
      ChartWithAxes cwa=(ChartWithAxes)iri.getProperty(ChartReportItemConstants.PROPERTY_CHART);
      Axis yAxis=(Axis)((Axis)cwa.getAxes().get(0)).getAssociatedAxes().get(0);
      if (yAxis.getLineAttributes().isVisible() && ChartXTabUtil.findReferenceChart(eih) == null) {
        AggregationCellHandle containerCell=ChartXTabUtil.getXtabContainerCell(eih);
        AggregationCellHandle grandTotalCell=ChartXTabUIUtil.getGrandTotalAggregationCell(containerCell,cwa.isTransposed());
        Object content=ChartXTabUtil.getFirstContent(grandTotalCell);
        if (ChartXTabUtil.isAxisChart((DesignElementHandle)content)) {
          final ExtendedItemHandle axisChart=(ExtendedItemHandle)content;
          if (!axisChart.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART).equals(eih))           Display.getCurrent().asyncExec(new Runnable(){
            public void run(){
              try {
                axisChart.setProperty(ChartReportItemConstants.PROPERTY_HOST_CHART,eih);
              }
 catch (              SemanticException e) {
                logger.log(e);
              }
            }
          }
);
        }
      }
    }
 else     if (ChartXTabUtil.isAxisChart(eih)) {
      eih.getContainer().addListener(ChartXTabUtil.createDeleteChartListener(eih.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART),eih));
    }
    return dr;
  }
 catch (  BirtException e) {
    logger.log(e);
    return null;
  }
}",0.2735406902428632
72941,"public final void updateFigure(ExtendedItemHandle eih,IFigure ifg){
  try {
    eih.loadExtendedElement();
    final ChartReportItemImpl crii=(ChartReportItemImpl)eih.getReportItem();
    crii.setHandle(eih);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    if (cm == null) {
      return;
    }
    Bounds defaultBounds=ChartReportItemUtil.createDefaultChartBounds(eih,cm);
    double dHeightInPoints=defaultBounds.getHeight();
    double dWidthInPoints=defaultBounds.getWidth();
    final DimensionHandle dhHeight;
    final DimensionHandle dhWidth;
    if (ChartXTabUtil.isAxisChart(eih)) {
      ExtendedItemHandle plotChart=(ExtendedItemHandle)eih.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
      if (ChartXTabUIUtil.isTransposedChartWithAxes(cm)) {
        dhHeight=eih.getHeight();
        dhWidth=plotChart.getWidth();
      }
 else {
        dhHeight=plotChart.getHeight();
        dhWidth=eih.getWidth();
      }
    }
 else {
      dhHeight=eih.getHeight();
      dhWidth=eih.getWidth();
    }
    double dOriginalHeight=dhHeight.getMeasure();
    String sHeightUnits=dhHeight.getUnits();
    double dOriginalWidth=dhWidth.getMeasure();
    String sWidthUnits=dhWidth.getUnits();
    final IDisplayServer idsSWT=ChartUIUtil.getDisplayServer();
    if (sHeightUnits != null) {
      if (sHeightUnits == DesignChoiceConstants.UNITS_PX) {
        dOriginalHeight=ChartUtil.convertPixelsToPoints(idsSWT,dOriginalHeight);
        sHeightUnits=DesignChoiceConstants.UNITS_PT;
      }
      if (sHeightUnits == DesignChoiceConstants.UNITS_PERCENTAGE) {
        IFigure parentFigure=ifg.getParent();
        if (parentFigure != null) {
          int height=(int)((parentFigure.getSize().height - parentFigure.getInsets().getHeight()) * dOriginalHeight / 100);
          dOriginalHeight=ChartUtil.convertPixelsToPoints(idsSWT,height);
          sHeightUnits=DesignChoiceConstants.UNITS_PT;
        }
      }
      dHeightInPoints=DimensionUtil.convertTo(dOriginalHeight,sHeightUnits,DesignChoiceConstants.UNITS_PT).getMeasure();
    }
    if (sWidthUnits != null) {
      if (sWidthUnits == DesignChoiceConstants.UNITS_PX) {
        dOriginalWidth=(dOriginalWidth * 72d) / idsSWT.getDpiResolution();
        sWidthUnits=DesignChoiceConstants.UNITS_PT;
      }
      if (sWidthUnits == DesignChoiceConstants.UNITS_PERCENTAGE) {
        IFigure parentFigure=ifg.getParent();
        if (parentFigure != null) {
          int width=(int)((parentFigure.getSize().width - parentFigure.getInsets().getWidth()) * dOriginalWidth / 100);
          dOriginalWidth=ChartUtil.convertPixelsToPoints(idsSWT,width);
          sWidthUnits=DesignChoiceConstants.UNITS_PT;
        }
      }
      dWidthInPoints=DimensionUtil.convertTo(dOriginalWidth,sWidthUnits,DesignChoiceConstants.UNITS_PT).getMeasure();
    }
    final double dHeightInPixels=(idsSWT.getDpiResolution() * dHeightInPoints) / 72d;
    final double dWidthInPixels=(idsSWT.getDpiResolution() * dWidthInPoints) / 72d;
    if (cm != null && !ChartXTabUtil.isAxisChart(eih)) {
      if (dWidthInPoints > 0)       cm.getBlock().getBounds().setWidth(dWidthInPoints);
      if (dHeightInPoints > 0)       cm.getBlock().getBounds().setHeight(dHeightInPoints);
    }
    if (crii.getDesignerRepresentation() != null) {
      ((DesignerRepresentation)crii.getDesignerRepresentation()).setDirty(true);
    }
    Dimension newSize=ifg.getBounds().getCopy().getSize();
    if (dWidthInPixels > 0)     newSize.width=(int)dWidthInPixels;
    if (dHeightInPixels > 0)     newSize.height=(int)dHeightInPixels;
    ifg.setSize(newSize);
  }
 catch (  BirtException ex) {
    logger.log(ex);
  }
}","public final void updateFigure(ExtendedItemHandle eih,IFigure ifg){
  try {
    eih.loadExtendedElement();
    final ChartReportItemImpl crii=(ChartReportItemImpl)eih.getReportItem();
    crii.setHandle(eih);
    final boolean bAxisChart=ChartXTabUtil.isAxisChart(eih);
    final ExtendedItemHandle hostChart;
    final Chart cm;
    if (bAxisChart) {
      hostChart=(ExtendedItemHandle)eih.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
      cm=ChartXTabUtil.getChartFromHandle(hostChart);
    }
 else {
      hostChart=null;
      cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    }
    if (cm == null) {
      return;
    }
    Bounds defaultBounds=ChartReportItemUtil.createDefaultChartBounds(eih,cm);
    double dHeightInPoints=defaultBounds.getHeight();
    double dWidthInPoints=defaultBounds.getWidth();
    final DimensionHandle dhHeight;
    final DimensionHandle dhWidth;
    if (bAxisChart) {
      if (ChartXTabUIUtil.isTransposedChartWithAxes(cm)) {
        dhHeight=eih.getHeight();
        dhWidth=hostChart.getWidth();
      }
 else {
        dhHeight=hostChart.getHeight();
        dhWidth=eih.getWidth();
      }
    }
 else {
      dhHeight=eih.getHeight();
      dhWidth=eih.getWidth();
    }
    double dOriginalHeight=dhHeight.getMeasure();
    String sHeightUnits=dhHeight.getUnits();
    double dOriginalWidth=dhWidth.getMeasure();
    String sWidthUnits=dhWidth.getUnits();
    final IDisplayServer idsSWT=ChartUIUtil.getDisplayServer();
    if (sHeightUnits != null) {
      if (sHeightUnits == DesignChoiceConstants.UNITS_PX) {
        dOriginalHeight=ChartUtil.convertPixelsToPoints(idsSWT,dOriginalHeight);
        sHeightUnits=DesignChoiceConstants.UNITS_PT;
      }
      if (sHeightUnits == DesignChoiceConstants.UNITS_PERCENTAGE) {
        IFigure parentFigure=ifg.getParent();
        if (parentFigure != null) {
          int height=(int)((parentFigure.getSize().height - parentFigure.getInsets().getHeight()) * dOriginalHeight / 100);
          dOriginalHeight=ChartUtil.convertPixelsToPoints(idsSWT,height);
          sHeightUnits=DesignChoiceConstants.UNITS_PT;
        }
      }
      dHeightInPoints=DimensionUtil.convertTo(dOriginalHeight,sHeightUnits,DesignChoiceConstants.UNITS_PT).getMeasure();
    }
    if (sWidthUnits != null) {
      if (sWidthUnits == DesignChoiceConstants.UNITS_PX) {
        dOriginalWidth=(dOriginalWidth * 72d) / idsSWT.getDpiResolution();
        sWidthUnits=DesignChoiceConstants.UNITS_PT;
      }
      if (sWidthUnits == DesignChoiceConstants.UNITS_PERCENTAGE) {
        IFigure parentFigure=ifg.getParent();
        if (parentFigure != null) {
          int width=(int)((parentFigure.getSize().width - parentFigure.getInsets().getWidth()) * dOriginalWidth / 100);
          dOriginalWidth=ChartUtil.convertPixelsToPoints(idsSWT,width);
          sWidthUnits=DesignChoiceConstants.UNITS_PT;
        }
      }
      dWidthInPoints=DimensionUtil.convertTo(dOriginalWidth,sWidthUnits,DesignChoiceConstants.UNITS_PT).getMeasure();
    }
    final double dHeightInPixels=(idsSWT.getDpiResolution() * dHeightInPoints) / 72d;
    final double dWidthInPixels=(idsSWT.getDpiResolution() * dWidthInPoints) / 72d;
    if (cm != null && !bAxisChart) {
      if (dWidthInPoints > 0)       cm.getBlock().getBounds().setWidth(dWidthInPoints);
      if (dHeightInPoints > 0)       cm.getBlock().getBounds().setHeight(dHeightInPoints);
    }
    if (crii.getDesignerRepresentation() != null) {
      ((DesignerRepresentation)crii.getDesignerRepresentation()).setDirty(true);
    }
    Dimension newSize=ifg.getBounds().getCopy().getSize();
    if (dWidthInPixels > 0)     newSize.width=(int)dWidthInPixels;
    if (dHeightInPixels > 0)     newSize.height=(int)dHeightInPixels;
    ifg.setSize(newSize);
  }
 catch (  BirtException ex) {
    logger.log(ex);
  }
}",0.856120826709062
72942,"/** 
 * Updates Axis chart in Xtab by replacing date item with axis chart.
 * @param cell
 * @param cwa
 * @param hostChartHandle
 * @throws BirtException
 */
public static void updateAxisChart(AggregationCellHandle cell,ChartWithAxes cwa,ExtendedItemHandle hostChartHandle) throws BirtException {
  boolean bTransposed=cwa.isTransposed();
  if (getGrandTotalCell(cell,bTransposed) != null) {
    AggregationCellHandle grandTotalAggCell=getGrandTotalAggregationCell(cell,bTransposed);
    Object content=ChartXTabUtil.getFirstContent(grandTotalAggCell);
    if (content instanceof DataItemHandle) {
      if (isYAxisVisible(cwa)) {
        ExtendedItemHandle axisChartHandle=createChartHandle(cell.getModelHandle(),ChartReportItemConstants.TYPE_AXIS_CHART,hostChartHandle);
        grandTotalAggCell.addContent(axisChartHandle,0);
      }
    }
  }
}","/** 
 * Updates Axis chart in Xtab by replacing date item with axis chart.
 * @param cell
 * @param cwa
 * @param hostChartHandle
 * @throws BirtException
 */
public static void updateAxisChart(AggregationCellHandle cell,ChartWithAxes cwa,ExtendedItemHandle hostChartHandle) throws BirtException {
  boolean bTransposed=cwa.isTransposed();
  if (getGrandTotalCell(cell,bTransposed) != null) {
    AggregationCellHandle grandTotalAggCell=getGrandTotalAggregationCell(cell,bTransposed);
    Object content=ChartXTabUtil.getFirstContent(grandTotalAggCell);
    if (content instanceof DataItemHandle) {
      if (isYAxisVisible(cwa)) {
        ExtendedItemHandle axisChartHandle=createChartHandle(cell.getModelHandle(),ChartReportItemConstants.TYPE_AXIS_CHART,hostChartHandle);
        grandTotalAggCell.addContent(axisChartHandle,0);
      }
    }
 else     if (ChartXTabUtil.isAxisChart((DesignElementHandle)content)) {
      if (((ExtendedItemHandle)content).getElementProperty(PROPERTY_HOST_CHART) != hostChartHandle) {
        ((ExtendedItemHandle)content).setProperty(PROPERTY_HOST_CHART,hostChartHandle);
      }
    }
  }
}",0.8598887202832575
72943,"private static AggregationCellHandle getGrandTotalAggregationCell(AggregationCellHandle cell,boolean bTransposed){
  if (cell == null) {
    return null;
  }
  if (bTransposed) {
    return ((MeasureViewHandle)cell.getContainer()).getAggregationCell(null,null,cell.getDimensionName(ICrosstabConstants.COLUMN_AXIS_TYPE),cell.getLevelName(ICrosstabConstants.COLUMN_AXIS_TYPE));
  }
 else {
    return ((MeasureViewHandle)cell.getContainer()).getAggregationCell(cell.getDimensionName(ICrosstabConstants.ROW_AXIS_TYPE),cell.getLevelName(ICrosstabConstants.ROW_AXIS_TYPE),null,null);
  }
}","public static AggregationCellHandle getGrandTotalAggregationCell(AggregationCellHandle cell,boolean bTransposed){
  if (cell == null) {
    return null;
  }
  if (bTransposed) {
    return ((MeasureViewHandle)cell.getContainer()).getAggregationCell(null,null,cell.getDimensionName(ICrosstabConstants.COLUMN_AXIS_TYPE),cell.getLevelName(ICrosstabConstants.COLUMN_AXIS_TYPE));
  }
 else {
    return ((MeasureViewHandle)cell.getContainer()).getAggregationCell(cell.getDimensionName(ICrosstabConstants.ROW_AXIS_TYPE),cell.getLevelName(ICrosstabConstants.ROW_AXIS_TYPE),null,null);
  }
}",0.9905741216795202
72944,"private void addCubeFilter(ICubeQueryDefinition cubeQuery) throws BirtException {
  List levels=new ArrayList();
  List values=new ArrayList();
  Iterator filterItr=null;
  if (handle.getContainer() instanceof MultiViewsHandle) {
    filterItr=getCrosstabFiltersIterator();
  }
 else {
    filterItr=ChartReportItemUtil.getChartReportItemFromHandle(handle).getCubeFiltersIterator();
  }
  while (filterItr.hasNext()) {
    FilterConditionElementHandle filterCon=(FilterConditionElementHandle)filterItr.next();
    levels.clear();
    values.clear();
    addMembers(levels,values,filterCon.getMember());
    ILevelDefinition[] qualifyLevels=null;
    Object[] qualifyValues=null;
    if (levels.size() > 0) {
      qualifyLevels=(ILevelDefinition[])levels.toArray(new ILevelDefinition[levels.size()]);
      qualifyValues=values.toArray(new Object[values.size()]);
    }
    ConditionalExpression filterCondExpr;
    if (ModuleUtil.isListFilterValue(filterCon)) {
      filterCondExpr=new ConditionalExpression(filterCon.getExpr(),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1List());
    }
 else {
      filterCondExpr=new ConditionalExpression(filterCon.getExpr(),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1(),filterCon.getValue2());
    }
    ILevelDefinition levelDefinition=null;
    if (filterCon.getMember() != null) {
      levelDefinition=registeredLevelHandles.get(filterCon.getMember().getLevel());
    }
 else {
      levelDefinition=registeredLevels.get(ChartXTabUtil.getBindingName(filterCondExpr.getExpression().getText(),true));
    }
    ICubeFilterDefinition filterDef=ChartXTabUtil.getCubeElementFactory().creatCubeFilterDefinition(filterCondExpr,levelDefinition,qualifyLevels,qualifyValues);
    cubeQuery.addFilter(filterDef);
  }
}","private void addCubeFilter(ICubeQueryDefinition cubeQuery) throws BirtException {
  List levels=new ArrayList();
  List values=new ArrayList();
  Iterator filterItr=null;
  if (handle.getContainer() instanceof MultiViewsHandle) {
    filterItr=getCrosstabFiltersIterator();
  }
 else {
    filterItr=getCubeFiltersIterator();
  }
  while (filterItr.hasNext()) {
    FilterConditionElementHandle filterCon=(FilterConditionElementHandle)filterItr.next();
    levels.clear();
    values.clear();
    addMembers(levels,values,filterCon.getMember());
    ILevelDefinition[] qualifyLevels=null;
    Object[] qualifyValues=null;
    if (levels.size() > 0) {
      qualifyLevels=(ILevelDefinition[])levels.toArray(new ILevelDefinition[levels.size()]);
      qualifyValues=values.toArray(new Object[values.size()]);
    }
    ConditionalExpression filterCondExpr;
    if (ModuleUtil.isListFilterValue(filterCon)) {
      filterCondExpr=new ConditionalExpression(filterCon.getExpr(),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1List());
    }
 else {
      filterCondExpr=new ConditionalExpression(filterCon.getExpr(),DataAdapterUtil.adaptModelFilterOperator(filterCon.getOperator()),filterCon.getValue1(),filterCon.getValue2());
    }
    ILevelDefinition levelDefinition=null;
    if (filterCon.getMember() != null) {
      levelDefinition=registeredLevelHandles.get(filterCon.getMember().getLevel());
    }
 else {
      levelDefinition=registeredLevels.get(ChartXTabUtil.getBindingName(filterCondExpr.getExpression().getText(),true));
    }
    ICubeFilterDefinition filterDef=ChartXTabUtil.getCubeElementFactory().creatCubeFilterDefinition(filterCondExpr,levelDefinition,qualifyLevels,qualifyValues);
    cubeQuery.addFilter(filterDef);
  }
}",0.9842148989199668
72945,"public DataExtractionTaskV0(ReportEngine engine,IReportDocument reader) throws EngineException {
  super(engine,IEngineTask.TASK_DATAEXTRACTION);
  IReportRunnable runnable=getOnPreparedRunnable(reader);
  setReportRunnable(runnable);
  setReportIR(reader);
  this.report=executionContext.getReport();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
}","public DataExtractionTaskV0(ReportEngine engine,IReportDocument reader) throws EngineException {
  super(engine,IEngineTask.TASK_DATAEXTRACTION);
  IReportRunnable runnable=getOnPreparedRunnable(reader);
  setReportRunnable(runnable);
  IInternalReportDocument internalDoc=(IInternalReportDocument)reader;
  Report reportIR=internalDoc.getReportIR(executionContext.getDesign());
  executionContext.setReport(reportIR);
  this.report=executionContext.getReport();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
}",0.8233183856502242
72946,"public DataExtractionTaskV1(ReportEngine engine,IReportDocument reader) throws EngineException {
  super(engine,IEngineTask.TASK_DATAEXTRACTION);
  IReportRunnable runnable=getOnPreparedRunnable(reader);
  setReportRunnable(runnable);
  setReportIR(reader);
  this.report=executionContext.getReport();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  setParameterValues(reportDocReader.getParameterValues());
  setParameterDisplayTexts(reportDocReader.getParameterDisplayTexts());
  usingParameterValues();
  executionContext.registerGlobalBeans(reportDocReader.getGlobalVariables(null));
  Map appContext=executionContext.getAppContext();
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,appContext);
}","public DataExtractionTaskV1(ReportEngine engine,IReportDocument reader) throws EngineException {
  super(engine,IEngineTask.TASK_DATAEXTRACTION);
  IReportRunnable runnable=getOnPreparedRunnable(reader);
  setReportRunnable(runnable);
  IInternalReportDocument internalDoc=(IInternalReportDocument)reader;
  Report reportIR=internalDoc.getReportIR(executionContext.getDesign());
  executionContext.setReport(reportIR);
  this.report=executionContext.getReport();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  setParameterValues(reportDocReader.getParameterValues());
  setParameterDisplayTexts(reportDocReader.getParameterDisplayTexts());
  usingParameterValues();
  executionContext.registerGlobalBeans(reportDocReader.getGlobalVariables(null));
  Map appContext=executionContext.getAppContext();
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,appContext);
}",0.8961518186610438
72947,"/** 
 * @param engine the report engine
 * @param runnable the report runnable object
 * @param reportDoc the report document instance
 */
public RenderTask(ReportEngine engine,IReportDocument reportDoc){
  super(engine,IEngineTask.TASK_RENDER);
  IReportRunnable runnable=getOnPreparedRunnable(reportDoc);
  setReportRunnable(runnable);
  initializeRender(reportDoc,runnable);
}","/** 
 * @param engine the report engine
 * @param runnable the report runnable object
 * @param reportDoc the report document instance
 */
public RenderTask(ReportEngine engine,IReportDocument reportDoc){
  super(engine,IEngineTask.TASK_RENDER);
  initializeRender(reportDoc,null);
}",0.7945619335347432
72948,"protected void openReportDocument(IReportDocument reportDoc){
  this.reportDoc=reportDoc;
  executionContext.setReportDocument(reportDoc);
  setReportIR(reportDoc);
  setParameterValues(reportDoc.getParameterValues());
  setParameterDisplayTexts(reportDoc.getParameterDisplayTexts());
  usingParameterValues();
  executionContext.registerGlobalBeans(reportDoc.getGlobalVariables(null));
}","protected void openReportDocument(IReportDocument reportDoc){
  this.reportDoc=reportDoc;
  executionContext.setReportDocument(reportDoc);
  setParameterValues(reportDoc.getParameterValues());
  setParameterDisplayTexts(reportDoc.getParameterDisplayTexts());
  usingParameterValues();
  executionContext.registerGlobalBeans(reportDoc.getGlobalVariables(null));
}",0.9653333333333334
72949,"protected void initializeRender(IReportDocument reportDoc,IReportRunnable runnable){
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  assert(reportDoc instanceof IInternalReportDocument);
  IInternalReportDocument internalReportDoc=(IInternalReportDocument)reportDoc;
  ClassLoader documentLoader=internalReportDoc.getClassLoader();
  ClassLoader renderLoader=ApplicationClassLoader.createClassLoaderFromDesign(runnable,documentLoader);
  executionContext.setApplicationClassLoader(renderLoader);
  openReportDocument(reportDoc);
  totalPage=reportDoc.getPageCount();
  innerRender=new AllPageRender(new long[]{1,this.reportDoc.getPageCount()});
}","protected void initializeRender(IReportDocument reportDoc,IReportRunnable runnable){
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  assert(reportDoc instanceof IInternalReportDocument);
  IInternalReportDocument internalReportDoc=(IInternalReportDocument)reportDoc;
  if (runnable == null) {
    runnable=getOnPreparedRunnable(reportDoc);
    setReportRunnable(runnable);
    Report reportIR=internalReportDoc.getReportIR((ReportDesignHandle)runnable.getDesignHandle());
    executionContext.setReport(reportIR);
  }
 else {
    setReportRunnable(runnable);
    Report reportIR=new ReportParser().parse((ReportDesignHandle)runnable.getDesignHandle());
    executionContext.setReport(reportIR);
  }
  ClassLoader documentLoader=internalReportDoc.getClassLoader();
  ClassLoader renderLoader=ApplicationClassLoader.createClassLoaderFromDesign(runnable,documentLoader);
  executionContext.setApplicationClassLoader(renderLoader);
  openReportDocument(reportDoc);
  totalPage=reportDoc.getPageCount();
  innerRender=new AllPageRender(new long[]{1,this.reportDoc.getPageCount()});
}",0.7610619469026548
72950,"public Report getReport(){
  if (reportIR != null) {
    return reportIR;
  }
  if (runnable != null) {
    reportIR=new ReportParser().parse((ReportDesignHandle)runnable.getDesignHandle());
    reportIR=new ReportParser().parse((ReportDesignHandle)runnable.getDesignHandle());
  }
  return reportIR;
}","public Report getReport(){
  if (reportIR != null) {
    return reportIR;
  }
  if (runnable != null) {
    reportIR=new ReportParser().parse((ReportDesignHandle)runnable.getDesignHandle());
  }
  return reportIR;
}",0.758220502901354
72951,"/** 
 * @param expr
 * @param bindings
 * @return
 * @throws DataException
 */
public static boolean isReferenceToAttribute(IBaseExpression expr,List bindings) throws DataException {
  Set set=OlapExpressionCompiler.getReferencedDimLevel(expr,bindings);
  if (set.size() != 1) {
    throw new DataException(ResourceConstants.REFERENCED_DIM_LEVEL_SET_ERROR);
  }
  for (Iterator k=set.iterator(); k.hasNext(); ) {
    Object obj=k.next();
    if (obj instanceof DimLevel) {
      DimLevel dimLevel=(DimLevel)obj;
      if (dimLevel.getAttrName() != null) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * @param expr
 * @param bindings
 * @return
 * @throws DataException
 */
public static boolean isReferenceToAttribute(IBaseExpression expr,List bindings) throws DataException {
  Set set=OlapExpressionCompiler.getReferencedDimLevel(expr,bindings);
  if (set.size() != 1) {
    return false;
  }
  for (Iterator k=set.iterator(); k.hasNext(); ) {
    Object obj=k.next();
    if (obj instanceof DimLevel) {
      DimLevel dimLevel=(DimLevel)obj;
      if (dimLevel.getAttrName() != null) {
        return true;
      }
    }
  }
  return false;
}",0.9269131556319864
72952,"public Collection getColumnValueSet(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  IColumnValueIterator columnValueIterator=getColumnValueIterator(dataSet,inputParamBindings,columnBindings,boundColumnName);
  int maxRowCount=-1;
  ArrayList values=new ArrayList();
  if (requestInfo != null) {
    if (requestInfo.getStartRow() >= 0) {
      ((ColumnValueIterator)columnValueIterator).moveTo(requestInfo.getStartRow());
      Object value=columnValueIterator.getValue();
      values.add(value);
    }
    maxRowCount=requestInfo.getMaxRow();
  }
  while (columnValueIterator.next() && maxRowCount != 0) {
    Object value=columnValueIterator.getValue();
    values.add(value);
    maxRowCount--;
  }
  columnValueIterator.close();
  return values;
}","public Collection getColumnValueSet(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  IColumnValueIterator columnValueIterator=getColumnValueIterator(dataSet,inputParamBindings,columnBindings,boundColumnName);
  int maxRowCount=-1;
  ArrayList values=new ArrayList();
  if (requestInfo != null) {
    if (requestInfo.getStartRow() >= 0) {
      ((ColumnValueIterator)columnValueIterator).moveTo(requestInfo.getStartRow());
    }
    maxRowCount=requestInfo.getMaxRow();
    if (maxRowCount != 0) {
      Object value=columnValueIterator.getValue();
      values.add(value);
      maxRowCount--;
    }
  }
  while (columnValueIterator.next() && maxRowCount != 0) {
    Object value=columnValueIterator.getValue();
    values.add(value);
    maxRowCount--;
  }
  columnValueIterator.close();
  return values;
}",0.935685828116107
72953,"/** 
 * new a EngineConfig and config it with user's setting
 */
protected EngineConfig createEngineConfig(){
  EngineConfig config=new EngineConfig();
  String resourcePath=(String)params.get(""String_Node_Str"");
  if (resourcePath != null)   config.setResourcePath(resourcePath.trim());
  String tempDir=(String)params.get(""String_Node_Str"");
  if (tempDir != null)   config.setTempDir(tempDir.trim());
  String logDir=(String)params.get(""String_Node_Str"");
  String logLevel=(String)params.get(""String_Node_Str"");
  Level level=null;
  if (logLevel != null) {
    logLevel=logLevel.trim();
    if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.ALL;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.CONFIG;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.FINE;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.FINER;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.FINEST;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.INFO;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.OFF;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.SEVERE;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.WARNING;
    }
  }
  String logD=(logDir == null) ? config.getLogDirectory() : logDir;
  Level logL=(level == null) ? config.getLogLevel() : level;
  config.setLogConfig(logD,logL);
  String logFile=(String)params.get(""String_Node_Str"");
  if (logFile != null)   config.setLogFile(logFile.trim());
  return config;
}","/** 
 * new a EngineConfig and config it with user's setting
 */
protected EngineConfig createEngineConfig(){
  EngineConfig config=new EngineConfig();
  String resourcePath=(String)params.get(""String_Node_Str"");
  if (resourcePath != null)   config.setResourcePath(resourcePath.trim());
  String tempDir=(String)params.get(""String_Node_Str"");
  if (tempDir != null)   config.setTempDir(tempDir.trim());
  String logDir=(String)params.get(""String_Node_Str"");
  String logLevel=(String)params.get(""String_Node_Str"");
  Level level=null;
  if (logLevel != null) {
    logLevel=logLevel.trim();
    if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.ALL;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.CONFIG;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.FINE;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.FINER;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.FINEST;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.INFO;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.OFF;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.SEVERE;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(logLevel)) {
      level=Level.WARNING;
    }
  }
  String logD=(logDir == null) ? config.getLogDirectory() : logDir;
  Level logL=(level == null) ? config.getLogLevel() : level;
  config.setLogConfig(logD,logL);
  String logFile=(String)params.get(""String_Node_Str"");
  if (logFile != null)   config.setLogFile(logFile.trim());
  String scripts=(String)params.get(""String_Node_Str"");
  HashMap map=new HashMap();
  map.put(EngineConstants.PROJECT_CLASSPATH_KEY,scripts);
  config.setAppContext(map);
  return config;
}",0.9485903814262024
72954,"/** 
 * Register the script content for current script handler.
 * @param sScriptContent This is either the JavaSciprt code content or a full class name which has implemented <code>IChartItemScriptHandler</code>
 */
public void register(String sScriptName,String sScriptContent,ClassLoader contextLoader) throws CrosstabException {
  try {
    logger.log(Level.INFO,Messages.getString(""String_Node_Str""));
    Class<?> handlerClass=null;
    try {
      handlerClass=Class.forName(sScriptContent);
    }
 catch (    ClassNotFoundException ex) {
      if (contextLoader != null) {
        handlerClass=contextLoader.loadClass(sScriptContent);
      }
 else {
        throw ex;
      }
    }
    if (ICrosstabEventHandler.class.isAssignableFrom(handlerClass)) {
      try {
        javahandler=(ICrosstabEventHandler)handlerClass.newInstance();
      }
 catch (      InstantiationException e) {
        throw new CrosstabException(e);
      }
catch (      IllegalAccessException e) {
        throw new CrosstabException(e);
      }
      logger.log(Level.INFO,Messages.getString(""String_Node_Str"",handlerClass));
    }
 else {
      logger.log(Level.WARNING,Messages.getString(""String_Node_Str"",handlerClass));
    }
  }
 catch (  ClassNotFoundException e) {
    javahandler=null;
    logger.log(Level.INFO,Messages.getString(""String_Node_Str""));
    final Context cx=Context.enter();
    try {
      cx.evaluateString(scope,sScriptContent,sScriptName == null ? ""String_Node_Str"" : sScriptName,1,null);
      logger.log(Level.INFO,Messages.getString(""String_Node_Str""));
      Object[] objs=scope.getIds();
      if (objs != null) {
        javaScriptFunctionNamesCache=new ArrayList<String>();
        for (int i=0; i < objs.length; i++) {
          javaScriptFunctionNamesCache.add(String.valueOf(objs[i]));
        }
      }
 else {
        javaScriptFunctionNamesCache=null;
      }
    }
 catch (    RhinoException jsx) {
      throw convertException(jsx);
    }
 finally {
      Context.exit();
    }
  }
}","/** 
 * Register the script content for current script handler.
 * @param sScriptContent This is either the JavaSciprt code content or a full class name which has implemented <code>IChartItemScriptHandler</code>
 */
public void register(String sScriptName,String sScriptContent,ClassLoader contextLoader) throws CrosstabException {
  try {
    logger.log(Level.INFO,Messages.getString(""String_Node_Str""));
    Class<?> handlerClass=loadJavaHandlerClass(sScriptContent,contextLoader);
    if (ICrosstabEventHandler.class.isAssignableFrom(handlerClass)) {
      try {
        javahandler=(ICrosstabEventHandler)handlerClass.newInstance();
      }
 catch (      InstantiationException e) {
        throw new CrosstabException(e);
      }
catch (      IllegalAccessException e) {
        throw new CrosstabException(e);
      }
      logger.log(Level.INFO,Messages.getString(""String_Node_Str"",handlerClass));
    }
 else {
      logger.log(Level.WARNING,Messages.getString(""String_Node_Str"",handlerClass));
    }
  }
 catch (  ClassNotFoundException e) {
    javahandler=null;
    logger.log(Level.INFO,Messages.getString(""String_Node_Str""));
    final Context cx=Context.enter();
    try {
      cx.evaluateString(scope,sScriptContent,sScriptName == null ? ""String_Node_Str"" : sScriptName,1,null);
      logger.log(Level.INFO,Messages.getString(""String_Node_Str""));
      Object[] objs=scope.getIds();
      if (objs != null) {
        javaScriptFunctionNamesCache=new ArrayList<String>();
        for (int i=0; i < objs.length; i++) {
          javaScriptFunctionNamesCache.add(String.valueOf(objs[i]));
        }
      }
 else {
        javaScriptFunctionNamesCache=null;
      }
    }
 catch (    RhinoException jsx) {
      throw convertException(jsx);
    }
 finally {
      Context.exit();
    }
  }
}",0.923439958049292
72955,"/** 
 * constructor
 * @param reportHandle the handle of the report design
 */
public DataViewTreeViewerPage(ModuleHandle reportHandle){
  super();
  this.reportHandle=reportHandle;
}","/** 
 * constructor
 * @param reportHandle the handle of the report design
 */
public DataViewTreeViewerPage(ModuleHandle reportHandle){
  super();
  setReportHandle(reportHandle);
}",0.9095890410958904
72956,"/** 
 * Gets the root of the viewer
 * @return Returns the root
 */
public ModuleHandle getRoot(){
  return reportHandle;
}","/** 
 * Gets the root of the viewer
 * @return Returns the root
 */
public ModuleHandle getRoot(){
  return getReportHandle();
}",0.9721115537848606
72957,"/** 
 * The <code>Page</code> implementation of this <code>IPage</code> method disposes of this page's control (if it has one and it has not already been disposed).
 */
public void dispose(){
  selectionChangedListeners.clear();
  treeViewer=null;
  SessionHandleAdapter.getInstance().getMediator().removeColleague(this);
  super.dispose();
}","/** 
 * The <code>Page</code> implementation of this <code>IPage</code> method disposes of this page's control (if it has one and it has not already been disposed).
 */
public void dispose(){
  selectionChangedListeners.clear();
  treeViewer=null;
  if (reportHandle != null)   SessionHandleAdapter.getInstance().getMediator(reportHandle).removeColleague(this);
  super.dispose();
}",0.9447513812154696
72958,"/** 
 * Creates the SWT control for this page under the given parent control.
 * @param parent the parent control
 */
public void createControl(Composite parent){
  treeViewer=createTreeViewer(parent);
  getTreeViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      treeSelect(event);
    }
  }
);
  configTreeViewer();
  hookTreeViewer();
  initPage();
  SessionHandleAdapter.getInstance().getMediator().addColleague(this);
}","/** 
 * Creates the SWT control for this page under the given parent control.
 * @param parent the parent control
 */
public void createControl(Composite parent){
  treeViewer=createTreeViewer(parent);
  getTreeViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      treeSelect(event);
    }
  }
);
  configTreeViewer();
  hookTreeViewer();
  initPage();
  if (reportHandle != null)   SessionHandleAdapter.getInstance().getMediator(reportHandle).addColleague(this);
}",0.9625468164794008
72959,"public void processAction(Action action,StructureSource source){
  if (ActionType.URL_REDIRECT_LITERAL.equals(action.getType())) {
    URLValue uv=(URLValue)action.getValue();
    String sa=uv.getBaseUrl();
    String target=null;
    if (StructureType.SERIES_DATA_POINT.equals(source.getType())) {
      final DataPointHints dph=(DataPointHints)source.getSource();
      try {
        final ActionHandle handle=ModuleUtil.deserializeAction(sa);
        target=handle.getTargetWindow();
        sa=handler.getURL(new IAction(){
          public int getType(){
            if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))             return IAction.ACTION_HYPERLINK;
            if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))             return IAction.ACTION_BOOKMARK;
            if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(handle.getLinkType()))             return IAction.ACTION_DRILLTHROUGH;
            return 0;
          }
          public String getBookmark(){
            return ChartUtil.stringValue(dph.getUserValue(handle.getTargetBookmark()));
          }
          public String getActionString(){
            if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))             return ChartUtil.stringValue(dph.getUserValue(handle.getURI()));
            if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))             return ChartUtil.stringValue(dph.getUserValue(handle.getTargetBookmark()));
            return null;
          }
          public String getReportName(){
            return handle.getReportName();
          }
          public Map getParameterBindings(){
            Map map=new HashMap();
            MemberHandle params=handle.getParamBindings();
            if (params != null) {
              for (Iterator itr=params.iterator(); itr.hasNext(); ) {
                ParamBindingHandle pbh=(ParamBindingHandle)itr.next();
                map.put(pbh.getParamName(),dph.getUserValue(pbh.getExpression()));
              }
            }
            return map;
          }
          public Map getSearchCriteria(){
            Map map=new HashMap();
            MemberHandle searches=handle.getSearch();
            if (searches != null) {
              for (Iterator itr=searches.iterator(); itr.hasNext(); ) {
                SearchKeyHandle skh=(SearchKeyHandle)itr.next();
                map.put(skh.getExpression(),dph.getUserValue(skh.getExpression()));
              }
            }
            return map;
          }
          public String getTargetWindow(){
            return handle.getTargetWindow();
          }
          public String getFormat(){
            return handle.getFormatType();
          }
          public boolean isBookmark(){
            return DesignChoiceConstants.ACTION_BOOKMARK_TYPE_BOOKMARK.equals(handle.getTargetBookmarkType());
          }
          public String getSystemId(){
            ModuleHandle mod=eih.getRoot();
            if (mod != null) {
              return mod.getFileName();
            }
            return null;
          }
          public String getTargetFileType(){
            return handle.getTargetFileType();
          }
        }
,context);
      }
 catch (      Exception e) {
        sa=""String_Node_Str"";
        logger.log(e);
      }
    }
 else {
      try {
        final ActionHandle handle=ModuleUtil.deserializeAction(sa);
        target=handle.getTargetWindow();
        sa=handler.getURL(new IAction(){
          public int getType(){
            if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))             return IAction.ACTION_HYPERLINK;
            if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))             return IAction.ACTION_BOOKMARK;
            if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(handle.getLinkType()))             return IAction.ACTION_DRILLTHROUGH;
            return 0;
          }
          public String getBookmark(){
            return ChartUtil.stringValue(evaluator.evaluate(handle.getTargetBookmark()));
          }
          public String getActionString(){
            if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))             return ChartUtil.stringValue(evaluator.evaluate(handle.getURI()));
            if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))             return ChartUtil.stringValue(evaluator.evaluate(handle.getTargetBookmark()));
            return null;
          }
          public String getReportName(){
            return handle.getReportName();
          }
          public Map getParameterBindings(){
            Map map=new HashMap();
            MemberHandle params=handle.getParamBindings();
            if (params != null) {
              for (Iterator itr=params.iterator(); itr.hasNext(); ) {
                ParamBindingHandle pbh=(ParamBindingHandle)itr.next();
                map.put(pbh.getParamName(),evaluator.evaluate(pbh.getExpression()));
              }
            }
            return map;
          }
          public Map getSearchCriteria(){
            Map map=new HashMap();
            MemberHandle searches=handle.getSearch();
            if (searches != null) {
              for (Iterator itr=searches.iterator(); itr.hasNext(); ) {
                SearchKeyHandle skh=(SearchKeyHandle)itr.next();
                map.put(skh.getExpression(),evaluator.evaluate(skh.getExpression()));
              }
            }
            return map;
          }
          public String getTargetWindow(){
            return handle.getTargetWindow();
          }
          public String getFormat(){
            return handle.getFormatType();
          }
          public boolean isBookmark(){
            return DesignChoiceConstants.ACTION_BOOKMARK_TYPE_BOOKMARK.equals(handle.getTargetBookmarkType());
          }
          public String getSystemId(){
            ModuleHandle mod=eih.getRoot();
            if (mod != null) {
              return mod.getFileName();
            }
            return null;
          }
          public String getTargetFileType(){
            return handle.getTargetFileType();
          }
        }
,context);
      }
 catch (      Exception e) {
        sa=""String_Node_Str"";
        logger.log(e);
      }
    }
    uv.setBaseUrl(sa);
    uv.setTarget(target);
  }
 else   if (ActionType.SHOW_TOOLTIP_LITERAL.equals(action.getType())) {
    TooltipValue tv=(TooltipValue)action.getValue();
    if (StructureType.SERIES_DATA_POINT.equals(source.getType())) {
      final DataPointHints dph=(DataPointHints)source.getSource();
      tv.setText(ChartUtil.stringValue(dph.getUserValue(tv.getText())));
    }
  }
 else   if (ActionType.INVOKE_SCRIPT_LITERAL.equals(action.getType())) {
    ScriptValue sv=(ScriptValue)action.getValue();
    if (cacheScriptEvaluator == null) {
      cacheScriptEvaluator=new HashMap();
    }
    String evaluatResult=(String)cacheScriptEvaluator.get(sv.getScript());
    if (evaluatResult == null) {
      evaluatResult=evaluateExpression(sv.getScript());
      cacheScriptEvaluator.put(sv.getScript(),evaluatResult);
    }
    sv.setScript(evaluatResult);
  }
}","public void processAction(Action action,StructureSource source){
  if (ActionType.URL_REDIRECT_LITERAL.equals(action.getType())) {
    URLValue uv=(URLValue)action.getValue();
    String sa=uv.getBaseUrl();
    String target=null;
    if (StructureType.SERIES_DATA_POINT.equals(source.getType())) {
      final DataPointHints dph=(DataPointHints)source.getSource();
      try {
        final ActionHandle handle=ModuleUtil.deserializeAction(sa);
        target=handle.getTargetWindow();
        sa=handler.getURL(new IAction(){
          public int getType(){
            if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))             return IAction.ACTION_HYPERLINK;
            if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))             return IAction.ACTION_BOOKMARK;
            if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(handle.getLinkType()))             return IAction.ACTION_DRILLTHROUGH;
            return 0;
          }
          public String getBookmark(){
            return ChartUtil.stringValue(dph.getUserValue(handle.getTargetBookmark()));
          }
          public String getActionString(){
            if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))             return ChartUtil.stringValue(dph.getUserValue(handle.getURI()));
            if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))             return ChartUtil.stringValue(dph.getUserValue(handle.getTargetBookmark()));
            return null;
          }
          public String getReportName(){
            return handle.getReportName();
          }
          public Map getParameterBindings(){
            Map map=new HashMap();
            MemberHandle params=handle.getParamBindings();
            if (params != null) {
              for (Iterator itr=params.iterator(); itr.hasNext(); ) {
                ParamBindingHandle pbh=(ParamBindingHandle)itr.next();
                map.put(pbh.getParamName(),dph.getUserValue(pbh.getExpression()));
              }
            }
            return map;
          }
          public Map getSearchCriteria(){
            Map map=new HashMap();
            MemberHandle searches=handle.getSearch();
            if (searches != null) {
              for (Iterator itr=searches.iterator(); itr.hasNext(); ) {
                SearchKeyHandle skh=(SearchKeyHandle)itr.next();
                map.put(skh.getExpression(),dph.getUserValue(skh.getExpression()));
              }
            }
            return map;
          }
          public String getTargetWindow(){
            return handle.getTargetWindow();
          }
          public String getFormat(){
            return handle.getFormatType();
          }
          public boolean isBookmark(){
            return DesignChoiceConstants.ACTION_BOOKMARK_TYPE_BOOKMARK.equals(handle.getTargetBookmarkType());
          }
          public String getSystemId(){
            ModuleHandle mod=eih.getRoot();
            if (mod != null) {
              return mod.getFileName();
            }
            return null;
          }
          public String getTargetFileType(){
            return handle.getTargetFileType();
          }
          public String getTooltip(){
            return handle.getToolTip();
          }
        }
,context);
      }
 catch (      Exception e) {
        sa=""String_Node_Str"";
        logger.log(e);
      }
    }
 else {
      try {
        final ActionHandle handle=ModuleUtil.deserializeAction(sa);
        target=handle.getTargetWindow();
        sa=handler.getURL(new IAction(){
          public int getType(){
            if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))             return IAction.ACTION_HYPERLINK;
            if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))             return IAction.ACTION_BOOKMARK;
            if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(handle.getLinkType()))             return IAction.ACTION_DRILLTHROUGH;
            return 0;
          }
          public String getBookmark(){
            return ChartUtil.stringValue(evaluator.evaluate(handle.getTargetBookmark()));
          }
          public String getActionString(){
            if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))             return ChartUtil.stringValue(evaluator.evaluate(handle.getURI()));
            if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))             return ChartUtil.stringValue(evaluator.evaluate(handle.getTargetBookmark()));
            return null;
          }
          public String getReportName(){
            return handle.getReportName();
          }
          public Map getParameterBindings(){
            Map map=new HashMap();
            MemberHandle params=handle.getParamBindings();
            if (params != null) {
              for (Iterator itr=params.iterator(); itr.hasNext(); ) {
                ParamBindingHandle pbh=(ParamBindingHandle)itr.next();
                map.put(pbh.getParamName(),evaluator.evaluate(pbh.getExpression()));
              }
            }
            return map;
          }
          public Map getSearchCriteria(){
            Map map=new HashMap();
            MemberHandle searches=handle.getSearch();
            if (searches != null) {
              for (Iterator itr=searches.iterator(); itr.hasNext(); ) {
                SearchKeyHandle skh=(SearchKeyHandle)itr.next();
                map.put(skh.getExpression(),evaluator.evaluate(skh.getExpression()));
              }
            }
            return map;
          }
          public String getTargetWindow(){
            return handle.getTargetWindow();
          }
          public String getFormat(){
            return handle.getFormatType();
          }
          public boolean isBookmark(){
            return DesignChoiceConstants.ACTION_BOOKMARK_TYPE_BOOKMARK.equals(handle.getTargetBookmarkType());
          }
          public String getSystemId(){
            ModuleHandle mod=eih.getRoot();
            if (mod != null) {
              return mod.getFileName();
            }
            return null;
          }
          public String getTargetFileType(){
            return handle.getTargetFileType();
          }
          public String getTooltip(){
            return handle.getToolTip();
          }
        }
,context);
      }
 catch (      Exception e) {
        sa=""String_Node_Str"";
        logger.log(e);
      }
    }
    uv.setBaseUrl(sa);
    uv.setTarget(target);
  }
 else   if (ActionType.SHOW_TOOLTIP_LITERAL.equals(action.getType())) {
    TooltipValue tv=(TooltipValue)action.getValue();
    if (StructureType.SERIES_DATA_POINT.equals(source.getType())) {
      final DataPointHints dph=(DataPointHints)source.getSource();
      tv.setText(ChartUtil.stringValue(dph.getUserValue(tv.getText())));
    }
  }
 else   if (ActionType.INVOKE_SCRIPT_LITERAL.equals(action.getType())) {
    ScriptValue sv=(ScriptValue)action.getValue();
    if (cacheScriptEvaluator == null) {
      cacheScriptEvaluator=new HashMap();
    }
    String evaluatResult=(String)cacheScriptEvaluator.get(sv.getScript());
    if (evaluatResult == null) {
      evaluatResult=evaluateExpression(sv.getScript());
      cacheScriptEvaluator.put(sv.getScript(),evaluatResult);
    }
    sv.setScript(evaluatResult);
  }
}",0.987880420145435
72960,"/** 
 * Calculate the value by row
 * @param aggrIndex
 * @param startingGroupLevel
 * @param endingGroupLevel
 * @param context
 * @param scope
 * @throws DataException
 */
private boolean onRow(int aggrIndex,int startingGroupLevel,int endingGroupLevel,boolean populateValue) throws DataException {
  IAggrInfo aggrInfo=getAggrInfo(aggrIndex);
  Accumulator acc=null;
  boolean newGroup=false;
  IParameterDefn[] argDefs=aggrInfo.getAggregation().getParameterDefn();
  if (startingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc=accumulatorManagers[aggrIndex].next();
    acc.start();
    newGroup=true;
  }
 else {
    acc=accumulatorManagers[aggrIndex].getCurrentAccumulator();
  }
  boolean accepted=true;
  if (aggrInfo.getFilter() != null) {
    try {
      Object filterResult=ExprEvaluateUtil.evaluateValue(aggrInfo.getFilter(),this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
      if (filterResult == null)       accepted=true;
 else       accepted=DataTypeUtil.toBoolean(filterResult).booleanValue();
    }
 catch (    BirtException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  if (aggrInfo.getCalcualteLevel() > 0) {
    if (startingGroupLevel > aggrInfo.getCalcualteLevel())     accepted=false;
  }
  if (accepted) {
    if (!isFunctionCount(aggrInfo)) {
      if (aggrInfo.getArgument() == null || aggrInfo.getArgument().length != argDefs.length) {
        DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
        wrapException(aggrIndex,e);
        return false;
      }
    }
    try {
      for (int i=0; i < argDefs.length; i++) {
        if (!argDefs[i].isOptional() || newGroup) {
          IBaseExpression argExpr=aggrInfo.getArgument()[i];
          checkExpression(aggrInfo,argExpr);
          try {
            aggrArgs[aggrIndex][i]=ExprEvaluateUtil.evaluateValue(argExpr,this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
          }
 catch (          BirtException e) {
            throw DataException.wrap(e);
          }
        }
      }
      acc.onRow(aggrArgs[aggrIndex]);
      newGroup=false;
    }
 catch (    DataException e) {
      wrapException(aggrIndex,e);
      return false;
    }
  }
  boolean isRunning=(aggrInfo.getAggregation().getType() == IAggrFunction.RUNNING_AGGR);
  if (isRunning && populateValue) {
    Object value=acc.getValue();
    currentRoundAggrValue[aggrIndex].add(value);
  }
  if (endingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc.finish();
    if ((!isRunning) && populateValue) {
      Object value=acc.getValue();
      currentRoundAggrValue[aggrIndex].add(value);
    }
  }
  return true;
}","/** 
 * Calculate the value by row
 * @param aggrIndex
 * @param startingGroupLevel
 * @param endingGroupLevel
 * @param context
 * @param scope
 * @throws DataException
 */
private boolean onRow(int aggrIndex,int startingGroupLevel,int endingGroupLevel,boolean populateValue) throws DataException {
  IAggrInfo aggrInfo=getAggrInfo(aggrIndex);
  Accumulator acc=null;
  boolean newGroup=false;
  IParameterDefn[] argDefs=aggrInfo.getAggregation().getParameterDefn();
  if (startingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc=accumulatorManagers[aggrIndex].next();
    acc.start();
    newGroup=true;
  }
 else {
    acc=accumulatorManagers[aggrIndex].getCurrentAccumulator();
  }
  boolean accepted=true;
  if (aggrInfo.getFilter() != null) {
    try {
      Object filterResult=ExprEvaluateUtil.evaluateValue(aggrInfo.getFilter(),this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
      if (filterResult == null)       accepted=true;
 else       accepted=DataTypeUtil.toBoolean(filterResult).booleanValue();
    }
 catch (    BirtException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  if (aggrInfo.getCalcualteLevel() > 0) {
    if (startingGroupLevel > aggrInfo.getCalcualteLevel())     accepted=false;
  }
  if (accepted) {
    final IBaseExpression[] arguments=aggrInfo.getArgument();
    if (!isFunctionCount(aggrInfo) && arguments == null) {
      DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
      wrapException(aggrIndex,e);
      return false;
    }
    try {
      for (int i=0; i < argDefs.length; i++) {
        if (!argDefs[i].isOptional() || newGroup) {
          if (i >= arguments.length) {
            throw new DataException(ResourceConstants.AGGREGATION_ARGUMENT_ERROR,new Object[]{argDefs[i].getName(),aggrInfo.getName()});
          }
 else {
            IBaseExpression argExpr=arguments[i];
            checkExpression(aggrInfo,argExpr);
            try {
              aggrArgs[aggrIndex][i]=ExprEvaluateUtil.evaluateValue(argExpr,this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
            }
 catch (            BirtException e) {
              throw DataException.wrap(e);
            }
          }
        }
      }
      if (argDefs.length != aggrInfo.getArgument().length) {
        DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
        wrapException(aggrIndex,e);
        return false;
      }
      acc.onRow(aggrArgs[aggrIndex]);
      newGroup=false;
    }
 catch (    DataException e) {
      wrapException(aggrIndex,e);
      return false;
    }
  }
  boolean isRunning=(aggrInfo.getAggregation().getType() == IAggrFunction.RUNNING_AGGR);
  if (isRunning && populateValue) {
    Object value=acc.getValue();
    currentRoundAggrValue[aggrIndex].add(value);
  }
  if (endingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc.finish();
    if ((!isRunning) && populateValue) {
      Object value=acc.getValue();
      currentRoundAggrValue[aggrIndex].add(value);
    }
  }
  return true;
}",0.8900958466453675
72961,"/** 
 * Set cube cursor to a given position. A cube cursor's position is decided by its edge cursors.
 * @param cursor
 * @param position
 * @throws OLAPException 
 * @throws EngineException 
 */
public static void positionCursor(CubeCursor cursor,String position) throws OLAPException, EngineException {
  if (position == null || position.trim().length() == 0)   return;
  if (position.startsWith(""String_Node_Str"")) {
    position=position.substring(2);
  }
  String[] positions=position.split(""String_Node_Str"" + POSITION_DELIMITER + ""String_Node_Str"");
  List edges=getAllEdges(cursor);
  if (positions.length != edges.size())   throw new EngineException(""String_Node_Str"" + position);
  for (int i=0; i < edges.size(); i++) {
    ((EdgeCursor)edges.get(i)).setPosition(new Long(positions[i]).longValue());
  }
}","/** 
 * Set cube cursor to a given position. A cube cursor's position is decided by its edge cursors.
 * @param cursor
 * @param position
 * @throws OLAPException 
 * @throws EngineException 
 */
public static void positionCursor(CubeCursor cursor,String position) throws OLAPException, EngineException {
  if (position == null || position.trim().length() == 0)   return;
  if (position.startsWith(""String_Node_Str"")) {
    position=position.substring(2);
  }
  String[] positions=position.split(""String_Node_Str"" + POSITION_DELIMITER + ""String_Node_Str"");
  List edges=getAllEdges(cursor);
  for (int i=0; i < edges.size(); i++) {
    ((EdgeCursor)edges.get(i)).setPosition(new Long(positions[i]).longValue());
  }
}",0.9354207436399216
72962,"public void visitCascadingParameterGroup(CascadingParameterGroupHandle handle){
  CascadingParameterGroupDefn paramGroup=new CascadingParameterGroupDefn();
  paramGroup.setHandle(handle);
  paramGroup.setParameterType(IParameterDefnBase.CASCADING_PARAMETER_GROUP);
  paramGroup.setName(handle.getName());
  paramGroup.setDisplayName(handle.getDisplayName());
  paramGroup.setDisplayNameKey(handle.getDisplayNameKey());
  paramGroup.setHelpText(handle.getHelpText());
  paramGroup.setHelpTextKey(handle.getHelpTextKey());
  paramGroup.setPromptText(handle.getPromptText());
  DataSetHandle dset=handle.getDataSet();
  if (dset != null) {
    paramGroup.setDataSet(dset.getName());
  }
  SlotHandle parameters=handle.getParameters();
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    paramGroup.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  int size=parameters.getCount();
  for (int n=0; n < size; n++) {
    apply(parameters.get(n));
    if (currentElement != null) {
      paramGroup.addParameter((IParameterDefnBase)currentElement);
    }
  }
  currentElement=paramGroup;
}","public void visitCascadingParameterGroup(CascadingParameterGroupHandle handle){
  CascadingParameterGroupDefn paramGroup=new CascadingParameterGroupDefn();
  paramGroup.setHandle(handle);
  paramGroup.setParameterType(IParameterDefnBase.CASCADING_PARAMETER_GROUP);
  paramGroup.setName(handle.getName());
  paramGroup.setDisplayName(handle.getDisplayName());
  paramGroup.setDisplayNameKey(handle.getDisplayNameKey());
  paramGroup.setHelpText(handle.getHelpText());
  paramGroup.setHelpTextKey(handle.getHelpTextKey());
  paramGroup.setPromptText(handle.getPromptText());
  paramGroup.setPromptTextKey(handle.getPromptTextKey());
  DataSetHandle dset=handle.getDataSet();
  if (dset != null) {
    paramGroup.setDataSet(dset.getName());
  }
  SlotHandle parameters=handle.getParameters();
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    paramGroup.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  int size=parameters.getCount();
  for (int n=0; n < size; n++) {
    apply(parameters.get(n));
    if (currentElement != null) {
      paramGroup.addParameter((IParameterDefnBase)currentElement);
    }
  }
  currentElement=paramGroup;
}",0.976461038961039
72963,"/** 
 * Constructs the data request session with the provided session context information.
 * @param context
 * @throws BirtException
 */
public DataRequestSessionImpl(DataSessionContext context) throws BirtException {
  if (context == null)   throw new AdapterException(ResourceConstants.CONEXT_NULL_ERROR);
  dataEngine=(DataEngineImpl)DataEngine.newDataEngine(context.getDataEngineContext());
  modelAdaptor=new ModelAdapter(context);
  sessionContext=context;
  cubeHandleMap=new HashMap();
  dataSetCache=new HashSet();
}","/** 
 * Constructs the data request session with the provided session context information.
 * @param context
 * @throws BirtException
 */
public DataRequestSessionImpl(DataSessionContext context) throws BirtException {
  if (context == null)   throw new AdapterException(ResourceConstants.CONEXT_NULL_ERROR);
  dataEngine=(DataEngineImpl)DataEngine.newDataEngine(context.getDataEngineContext());
  modelAdaptor=new ModelAdapter(context);
  sessionContext=context;
  cubeHandleMap=new HashMap();
  dataSetCache=new HashSet();
  stopSign=new StopSign();
}",0.9749768303985172
72964,"/** 
 * create a <code>DataEngine</code> given an execution context
 * @param context the execution context
 * @return a data engine instance
 */
public IDataEngine createDataEngine(ExecutionContext context) throws Exception {
  IDocArchiveReader dataSource=context.getDataSource();
  if (dataSource != null) {
    ReportDocumentWriter writer=context.getReportDocWriter();
    IDocArchiveWriter archiverWriter=null;
    if (writer != null) {
      archiverWriter=writer.getArchive();
    }
    return new DataInteractiveEngine(context,dataSource,archiverWriter);
  }
  ReportDocumentWriter writer=context.getReportDocWriter();
  if (writer != null) {
    return new DataGenerationEngine(context,context.getReportDocWriter().getArchive());
  }
  IReportDocument document=context.getReportDocument();
  if (document != null) {
    return new DataPresentationEngine(context,context.getReportDocument().getArchive());
  }
  return new DteDataEngine(context);
}","/** 
 * create a <code>DataEngine</code> given an execution context
 * @param context the execution context
 * @return a data engine instance
 */
public IDataEngine createDataEngine(ExecutionContext context) throws Exception {
  IDocArchiveReader dataSource=context.getDataSource();
  if (dataSource != null) {
    ReportDocumentWriter writer=context.getReportDocWriter();
    IDocArchiveWriter archiverWriter=null;
    if (writer != null) {
      archiverWriter=writer.getArchive();
    }
    return new DataInteractiveEngine(context,dataSource,archiverWriter);
  }
  ReportDocumentWriter writer=context.getReportDocWriter();
  if (writer != null) {
    return new DataGenerationEngine(context,context.getReportDocWriter().getArchive());
  }
  IReportDocument document=context.getReportDocument();
  if (document != null) {
    if (context.getEngineTask().getTaskType() == EngineTask.TASK_DATAEXTRACTION) {
      return new DataInteractiveEngine(context,context.getReportDocument().getArchive(),null);
    }
    return new DataPresentationEngine(context,context.getReportDocument().getArchive());
  }
  return new DteDataEngine(context);
}",0.9122137404580152
72965,"public DataInteractiveEngine(ExecutionContext context,IDocArchiveReader reader,IDocArchiveWriter writer) throws Exception {
  super(context);
  DataSessionContext dteSessionContext;
  if (writer == null) {
    dteSessionContext=new DataSessionContext(DataSessionContext.MODE_PRESENTATION,null,context.getSharedScope());
    dteSessionContext.setDocumentReader(reader);
  }
 else {
    dteSessionContext=new DataSessionContext(DataSessionContext.MODE_UPDATE,null,context.getSharedScope());
    dteSessionContext.setDocumentReader(reader);
    dteSessionContext.setDocumentWriter(writer);
  }
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
  if (writer != null && dos == null) {
    dos=new DataOutputStream(writer.createRandomAccessStream(ReportDocumentConstants.DATA_SNAP_META_STREAM));
    DteMetaInfoIOUtil.startMetaInfo(dos);
  }
}","public DataInteractiveEngine(ExecutionContext context,IDocArchiveReader reader,IDocArchiveWriter writer) throws Exception {
  super(context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_UPDATE,null,context.getSharedScope());
  dteSessionContext.setDocumentReader(reader);
  dteSessionContext.setDocumentWriter(writer);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
  if (writer != null && dos == null) {
    dos=new DataOutputStream(writer.createRandomAccessStream(ReportDocumentConstants.DATA_SNAP_META_STREAM));
    DteMetaInfoIOUtil.startMetaInfo(dos);
  }
}",0.885
72966,"/** 
 * Test add a filter in presentation mode.
 * @throws Exception
 */
public void testBasic6() throws Exception {
  this.GEN_print=true;
  this.GEN_add_filter=false;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName,fileName);
  deContext2.setTmpdir(this.getTempDir());
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=0;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.checkOutputFile();
}","/** 
 * Test add a filter in presentation mode.
 * @throws Exception
 */
public void testBasic6() throws Exception {
  this.GEN_print=true;
  this.GEN_add_filter=false;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  deContext2.setTmpdir(this.getTempDir());
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_filter=0;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.checkOutputFile();
}",0.9885496183206108
72967,"/** 
 * Outputs an hyperlink action.
 * @param action the hyperlink action.
 */
protected void outputAction(IHyperlinkAction action,String url){
  writer.openTag(HTMLTags.TAG_A);
  writer.attribute(HTMLTags.ATTR_HREF,url);
  writer.attribute(HTMLTags.ATTR_TARGET,action.getTargetWindow());
}","/** 
 * Outputs an hyperlink action.
 * @param action the hyperlink action.
 */
protected void outputAction(IHyperlinkAction action,String url){
  writer.openTag(HTMLTags.TAG_A);
  writer.attribute(HTMLTags.ATTR_HREF,url);
  writer.attribute(HTMLTags.ATTR_TARGET,action.getTargetWindow());
  writer.attribute(HTMLTags.ATTR_TITLE,action.getTooltip());
}",0.9051321928460342
72968,"protected void writeFields(DataOutputStream out) throws IOException {
  if (type != -1) {
    IOUtil.writeInt(out,FIELD_TYPE);
    IOUtil.writeInt(out,type);
  }
  if (isDrillThrough()) {
    if (drillThrough.getBookmark() != null) {
      IOUtil.writeInt(out,FIELD_BOOKMARK);
      IOUtil.writeString(out,drillThrough.getBookmark());
    }
  }
 else   if (bookmark != null) {
    IOUtil.writeInt(out,FIELD_BOOKMARK);
    IOUtil.writeString(out,bookmark);
  }
  if (isDrillThrough()) {
    if (drillThrough.isBookmark()) {
      IOUtil.writeInt(out,FIELD_ISBOOKMARK);
      IOUtil.writeBool(out,drillThrough.isBookmark());
    }
  }
  if (hyperlink != null) {
    IOUtil.writeInt(out,FIELD_HYPERLINK);
    IOUtil.writeString(out,hyperlink);
  }
  if (isDrillThrough() && drillThrough.getReportName() != null) {
    IOUtil.writeInt(out,FIELD_REPORTNAME);
    IOUtil.writeString(out,drillThrough.getReportName());
  }
  if (isDrillThrough() && drillThrough.getParameterBindings() != null) {
    IOUtil.writeInt(out,FIELD_PARAMETERBINDINGS);
    IOUtil.writeMap(out,drillThrough.getParameterBindings());
  }
  if (isDrillThrough() && drillThrough.getSearchCriteria() != null) {
    IOUtil.writeInt(out,FIELD_SEARCHCRITERIA);
    IOUtil.writeMap(out,drillThrough.getSearchCriteria());
  }
  if (isDrillThrough() && drillThrough.getTargetWindow() != null) {
    IOUtil.writeInt(out,FIELD_TARGET);
    IOUtil.writeString(out,drillThrough.getTargetWindow());
  }
 else   if (target != null) {
    IOUtil.writeInt(out,FIELD_TARGET);
    IOUtil.writeString(out,target);
  }
  if (isDrillThrough() && drillThrough.getFormat() != null) {
    IOUtil.writeInt(out,FIELD_FORMAT);
    IOUtil.writeString(out,drillThrough.getFormat());
  }
  if (isDrillThrough() && drillThrough.getTargetFileType() != null) {
    IOUtil.writeInt(out,FIELD_TARGETFILETYPE);
    IOUtil.writeString(out,drillThrough.getTargetFileType());
  }
}","protected void writeFields(DataOutputStream out) throws IOException {
  if (type != -1) {
    IOUtil.writeInt(out,FIELD_TYPE);
    IOUtil.writeInt(out,type);
  }
  if (isDrillThrough()) {
    if (drillThrough.getBookmark() != null) {
      IOUtil.writeInt(out,FIELD_BOOKMARK);
      IOUtil.writeString(out,drillThrough.getBookmark());
    }
  }
 else   if (bookmark != null) {
    IOUtil.writeInt(out,FIELD_BOOKMARK);
    IOUtil.writeString(out,bookmark);
  }
  if (isDrillThrough()) {
    if (drillThrough.isBookmark()) {
      IOUtil.writeInt(out,FIELD_ISBOOKMARK);
      IOUtil.writeBool(out,drillThrough.isBookmark());
    }
  }
  if (hyperlink != null) {
    IOUtil.writeInt(out,FIELD_HYPERLINK);
    IOUtil.writeString(out,hyperlink);
  }
  if (isDrillThrough() && drillThrough.getReportName() != null) {
    IOUtil.writeInt(out,FIELD_REPORTNAME);
    IOUtil.writeString(out,drillThrough.getReportName());
  }
  if (isDrillThrough() && drillThrough.getParameterBindings() != null) {
    IOUtil.writeInt(out,FIELD_PARAMETERBINDINGS);
    IOUtil.writeMap(out,drillThrough.getParameterBindings());
  }
  if (isDrillThrough() && drillThrough.getSearchCriteria() != null) {
    IOUtil.writeInt(out,FIELD_SEARCHCRITERIA);
    IOUtil.writeMap(out,drillThrough.getSearchCriteria());
  }
  if (isDrillThrough() && drillThrough.getTargetWindow() != null) {
    IOUtil.writeInt(out,FIELD_TARGET);
    IOUtil.writeString(out,drillThrough.getTargetWindow());
  }
 else   if (target != null) {
    IOUtil.writeInt(out,FIELD_TARGET);
    IOUtil.writeString(out,target);
  }
  if (tooltip != null) {
    IOUtil.writeInt(out,FIELD_TOOLTIP);
    IOUtil.writeString(out,tooltip);
  }
  if (isDrillThrough() && drillThrough.getFormat() != null) {
    IOUtil.writeInt(out,FIELD_FORMAT);
    IOUtil.writeString(out,drillThrough.getFormat());
  }
  if (isDrillThrough() && drillThrough.getTargetFileType() != null) {
    IOUtil.writeInt(out,FIELD_TARGETFILETYPE);
    IOUtil.writeString(out,drillThrough.getTargetFileType());
  }
}",0.972972972972973
72969,"protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_TYPE:
    type=IOUtil.readInt(in);
  if (type == ACTION_DRILLTHROUGH) {
    drillThrough=new DrillThroughAction();
  }
break;
case FIELD_BOOKMARK:
String bk=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setBookmark(bk);
}
 else {
bookmark=bk;
}
break;
case FIELD_HYPERLINK:
hyperlink=IOUtil.readString(in);
break;
case FIELD_REPORTNAME:
String name=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setReportName(name);
}
break;
case FIELD_PARAMETERBINDINGS:
Map bindings=IOUtil.readMap(in,loader);
if (isDrillThrough()) {
drillThrough.setParameterBindings(bindings);
}
break;
case FIELD_SEARCHCRITERIA:
Map search=IOUtil.readMap(in,loader);
if (isDrillThrough()) {
drillThrough.setSearchCriteria(search);
}
break;
case FIELD_TARGET:
String tgt=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setTargetWindow(tgt);
}
 else {
target=tgt;
}
break;
case FIELD_FORMAT:
String fmt=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setFormat(fmt);
}
break;
case FIELD_ISBOOKMARK:
boolean isBk=IOUtil.readBool(in);
if (isDrillThrough()) {
drillThrough.setBookmarkType(isBk);
}
break;
case FIELD_TARGETFILETYPE:
String tgtType=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setTargetFileType(tgtType);
}
break;
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_TYPE:
    type=IOUtil.readInt(in);
  if (type == ACTION_DRILLTHROUGH) {
    drillThrough=new DrillThroughAction();
  }
break;
case FIELD_BOOKMARK:
String bk=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setBookmark(bk);
}
 else {
bookmark=bk;
}
break;
case FIELD_HYPERLINK:
hyperlink=IOUtil.readString(in);
break;
case FIELD_REPORTNAME:
String name=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setReportName(name);
}
break;
case FIELD_PARAMETERBINDINGS:
Map bindings=IOUtil.readMap(in,loader);
if (isDrillThrough()) {
drillThrough.setParameterBindings(bindings);
}
break;
case FIELD_SEARCHCRITERIA:
Map search=IOUtil.readMap(in,loader);
if (isDrillThrough()) {
drillThrough.setSearchCriteria(search);
}
break;
case FIELD_TARGET:
String tgt=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setTargetWindow(tgt);
}
 else {
target=tgt;
}
break;
case FIELD_FORMAT:
String fmt=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setFormat(fmt);
}
break;
case FIELD_ISBOOKMARK:
boolean isBk=IOUtil.readBool(in);
if (isDrillThrough()) {
drillThrough.setBookmarkType(isBk);
}
break;
case FIELD_TARGETFILETYPE:
String tgtType=IOUtil.readString(in);
if (isDrillThrough()) {
drillThrough.setTargetFileType(tgtType);
}
break;
case FIELD_TOOLTIP:
tooltip=IOUtil.readString(in);
break;
}
}",0.9797627355198884
72970,"protected void writeFields(DataOutputStream out) throws IOException {
  super.writeFields(out);
  if (columns != null) {
    IOUtil.writeShort(out,FIELD_COLUMNS);
    Column column;
    IOUtil.writeInt(out,columns.size());
    for (int i=0; i < columns.size(); i++) {
      column=(Column)columns.get(i);
      column.writeObject(out);
    }
  }
  if (caption != null) {
    IOUtil.writeShort(out,FIELD_CAPTION);
    IOUtil.writeString(out,caption);
  }
  if (captionKey != null) {
    IOUtil.writeShort(out,FIELD_CAPTIONKEY);
    IOUtil.writeString(out,captionKey);
  }
  if (headerRepeat != null) {
    IOUtil.writeShort(out,FIELD_HEADERREPEAT);
    IOUtil.writeBool(out,headerRepeat.booleanValue());
  }
}","protected void writeFields(DataOutputStream out) throws IOException {
  super.writeFields(out);
  if (columns != null) {
    IOUtil.writeShort(out,FIELD_COLUMNS);
    Column column;
    IOUtil.writeInt(out,columns.size());
    for (int i=0; i < columns.size(); i++) {
      column=(Column)columns.get(i);
      column.writeObject(out);
    }
  }
  if (caption != null) {
    IOUtil.writeShort(out,FIELD_CAPTION);
    IOUtil.writeString(out,caption);
  }
  if (captionKey != null) {
    IOUtil.writeShort(out,FIELD_CAPTIONKEY);
    IOUtil.writeString(out,captionKey);
  }
  if (headerRepeat != null) {
    IOUtil.writeShort(out,FIELD_HEADERREPEAT);
    IOUtil.writeBool(out,headerRepeat.booleanValue());
  }
  if (summary != null) {
    IOUtil.writeShort(out,FIELD_SUMMARY);
    IOUtil.writeString(out,summary);
  }
}",0.9291338582677166
72971,"public String getCaptionKey(){
  if (captionKey == null) {
    if (generateBy instanceof TableItemDesign)     return ((TableItemDesign)generateBy).getCaptionKey();
  }
  return captionKey;
}","public String getCaptionKey(){
  if (captionKey == null) {
    if (generateBy instanceof TableItemDesign) {
      return ((TableItemDesign)generateBy).getCaptionKey();
    }
 else     if (generateBy instanceof GridItemDesign) {
      return ((GridItemDesign)generateBy).getCaptionKey();
    }
  }
  return captionKey;
}",0.6758349705304518
72972,"/** 
 * @return Returns the caption.
 */
public String getCaption(){
  if (caption == null) {
    if (generateBy instanceof TableItemDesign) {
      return ((TableItemDesign)generateBy).getCaption();
    }
  }
  return caption;
}","/** 
 * @return Returns the caption.
 */
public String getCaption(){
  if (caption == null) {
    if (generateBy instanceof TableItemDesign) {
      return ((TableItemDesign)generateBy).getCaption();
    }
 else     if (generateBy instanceof GridItemDesign) {
      return ((GridItemDesign)generateBy).getCaption();
    }
  }
  return caption;
}",0.7979094076655052
72973,"protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_COLUMNS:
    int columnsSize=IOUtil.readInt(in);
  for (int i=0; i < columnsSize; i++) {
    Column column=new Column(report);
    column.readObject(in,loader);
    addColumn(column);
  }
break;
case FIELD_CAPTION:
caption=IOUtil.readString(in);
break;
case FIELD_CAPTIONKEY:
captionKey=IOUtil.readString(in);
break;
case FIELD_HEADERREPEAT:
headerRepeat=Boolean.valueOf(IOUtil.readBool(in));
break;
default :
super.readField(version,filedId,in,loader);
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_COLUMNS:
    int columnsSize=IOUtil.readInt(in);
  for (int i=0; i < columnsSize; i++) {
    Column column=new Column(report);
    column.readObject(in,loader);
    addColumn(column);
  }
break;
case FIELD_CAPTION:
caption=IOUtil.readString(in);
break;
case FIELD_CAPTIONKEY:
captionKey=IOUtil.readString(in);
break;
case FIELD_SUMMARY:
summary=IOUtil.readString(in);
break;
case FIELD_HEADERREPEAT:
headerRepeat=Boolean.valueOf(IOUtil.readBool(in));
break;
default :
super.readField(version,filedId,in,loader);
}
}",0.9536
72974,"public final void updateFigure(ExtendedItemHandle eih,IFigure ifg){
  try {
    eih.loadExtendedElement();
    final ChartReportItemImpl crii=(ChartReportItemImpl)eih.getReportItem();
    crii.setHandle(eih);
    handleChartInXTab(eih);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    if (cm == null) {
      return;
    }
    Bounds defaultBounds=ChartReportItemUtil.createDefaultChartBounds(eih,cm);
    double dHeightInPoints=defaultBounds.getHeight();
    double dWidthInPoints=defaultBounds.getWidth();
    final DimensionHandle dhHeight=eih.getHeight();
    final DimensionHandle dhWidth=eih.getWidth();
    double dOriginalHeight=dhHeight.getMeasure();
    String sHeightUnits=dhHeight.getUnits();
    double dOriginalWidth=dhWidth.getMeasure();
    String sWidthUnits=dhWidth.getUnits();
    final IDisplayServer idsSWT=ChartUIUtil.getDisplayServer();
    if (sHeightUnits != null) {
      if (sHeightUnits == DesignChoiceConstants.UNITS_PX) {
        dOriginalHeight=ChartUtil.convertPixelsToPoints(idsSWT,dOriginalHeight);
        sHeightUnits=DesignChoiceConstants.UNITS_PT;
      }
      if (sHeightUnits == DesignChoiceConstants.UNITS_PERCENTAGE) {
        IFigure parentFigure=ifg.getParent();
        if (parentFigure != null) {
          int height=(int)((parentFigure.getSize().height - parentFigure.getInsets().getHeight()) * dOriginalHeight / 100);
          dOriginalHeight=ChartUtil.convertPixelsToPoints(idsSWT,height);
          sHeightUnits=DesignChoiceConstants.UNITS_PT;
        }
      }
      dHeightInPoints=DimensionUtil.convertTo(dOriginalHeight,sHeightUnits,DesignChoiceConstants.UNITS_PT).getMeasure();
    }
    if (sWidthUnits != null) {
      if (sWidthUnits == DesignChoiceConstants.UNITS_PX) {
        dOriginalWidth=(dOriginalWidth * 72d) / idsSWT.getDpiResolution();
        sWidthUnits=DesignChoiceConstants.UNITS_PT;
      }
      if (sWidthUnits == DesignChoiceConstants.UNITS_PERCENTAGE) {
        IFigure parentFigure=ifg.getParent();
        if (parentFigure != null) {
          int width=(int)((parentFigure.getSize().width - parentFigure.getInsets().getWidth()) * dOriginalWidth / 100);
          dOriginalWidth=ChartUtil.convertPixelsToPoints(idsSWT,width);
          sWidthUnits=DesignChoiceConstants.UNITS_PT;
        }
      }
      dWidthInPoints=DimensionUtil.convertTo(dOriginalWidth,sWidthUnits,DesignChoiceConstants.UNITS_PT).getMeasure();
    }
    final double dHeightInPixels=(idsSWT.getDpiResolution() * dHeightInPoints) / 72d;
    final double dWidthInPixels=(idsSWT.getDpiResolution() * dWidthInPoints) / 72d;
    if (cm != null && !ChartXTabUtil.isAxisChart(eih)) {
      if (dWidthInPoints > 0)       cm.getBlock().getBounds().setWidth(dWidthInPoints);
      if (dHeightInPoints > 0)       cm.getBlock().getBounds().setHeight(dHeightInPoints);
    }
    if (crii.getDesignerRepresentation() != null) {
      ((DesignerRepresentation)crii.getDesignerRepresentation()).setDirty(true);
    }
    Dimension newSize=ifg.getBounds().getCopy().getSize();
    if (dWidthInPixels > 0)     newSize.width=(int)dWidthInPixels;
    if (dHeightInPixels > 0)     newSize.height=(int)dHeightInPixels;
    ifg.setSize(newSize);
  }
 catch (  BirtException ex) {
    logger.log(ex);
  }
}","public final void updateFigure(ExtendedItemHandle eih,IFigure ifg){
  try {
    eih.loadExtendedElement();
    final ChartReportItemImpl crii=(ChartReportItemImpl)eih.getReportItem();
    crii.setHandle(eih);
    handleChartInXTab(eih);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    if (cm == null) {
      return;
    }
    Bounds defaultBounds=ChartReportItemUtil.createDefaultChartBounds(eih,cm);
    double dHeightInPoints=defaultBounds.getHeight();
    double dWidthInPoints=defaultBounds.getWidth();
    final DimensionHandle dhHeight;
    final DimensionHandle dhWidth;
    if (ChartXTabUtil.isAxisChart(eih)) {
      ExtendedItemHandle plotChart=(ExtendedItemHandle)eih.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
      if (ChartXTabUIUtil.isTransposedChartWithAxes(cm)) {
        dhHeight=eih.getHeight();
        dhWidth=plotChart.getWidth();
      }
 else {
        dhHeight=plotChart.getHeight();
        dhWidth=eih.getWidth();
      }
    }
 else {
      dhHeight=eih.getHeight();
      dhWidth=eih.getWidth();
    }
    double dOriginalHeight=dhHeight.getMeasure();
    String sHeightUnits=dhHeight.getUnits();
    double dOriginalWidth=dhWidth.getMeasure();
    String sWidthUnits=dhWidth.getUnits();
    final IDisplayServer idsSWT=ChartUIUtil.getDisplayServer();
    if (sHeightUnits != null) {
      if (sHeightUnits == DesignChoiceConstants.UNITS_PX) {
        dOriginalHeight=ChartUtil.convertPixelsToPoints(idsSWT,dOriginalHeight);
        sHeightUnits=DesignChoiceConstants.UNITS_PT;
      }
      if (sHeightUnits == DesignChoiceConstants.UNITS_PERCENTAGE) {
        IFigure parentFigure=ifg.getParent();
        if (parentFigure != null) {
          int height=(int)((parentFigure.getSize().height - parentFigure.getInsets().getHeight()) * dOriginalHeight / 100);
          dOriginalHeight=ChartUtil.convertPixelsToPoints(idsSWT,height);
          sHeightUnits=DesignChoiceConstants.UNITS_PT;
        }
      }
      dHeightInPoints=DimensionUtil.convertTo(dOriginalHeight,sHeightUnits,DesignChoiceConstants.UNITS_PT).getMeasure();
    }
    if (sWidthUnits != null) {
      if (sWidthUnits == DesignChoiceConstants.UNITS_PX) {
        dOriginalWidth=(dOriginalWidth * 72d) / idsSWT.getDpiResolution();
        sWidthUnits=DesignChoiceConstants.UNITS_PT;
      }
      if (sWidthUnits == DesignChoiceConstants.UNITS_PERCENTAGE) {
        IFigure parentFigure=ifg.getParent();
        if (parentFigure != null) {
          int width=(int)((parentFigure.getSize().width - parentFigure.getInsets().getWidth()) * dOriginalWidth / 100);
          dOriginalWidth=ChartUtil.convertPixelsToPoints(idsSWT,width);
          sWidthUnits=DesignChoiceConstants.UNITS_PT;
        }
      }
      dWidthInPoints=DimensionUtil.convertTo(dOriginalWidth,sWidthUnits,DesignChoiceConstants.UNITS_PT).getMeasure();
    }
    final double dHeightInPixels=(idsSWT.getDpiResolution() * dHeightInPoints) / 72d;
    final double dWidthInPixels=(idsSWT.getDpiResolution() * dWidthInPoints) / 72d;
    if (cm != null && !ChartXTabUtil.isAxisChart(eih)) {
      if (dWidthInPoints > 0)       cm.getBlock().getBounds().setWidth(dWidthInPoints);
      if (dHeightInPoints > 0)       cm.getBlock().getBounds().setHeight(dHeightInPoints);
    }
    if (crii.getDesignerRepresentation() != null) {
      ((DesignerRepresentation)crii.getDesignerRepresentation()).setDirty(true);
    }
    Dimension newSize=ifg.getBounds().getCopy().getSize();
    if (dWidthInPixels > 0)     newSize.width=(int)dWidthInPixels;
    if (dHeightInPixels > 0)     newSize.height=(int)dHeightInPixels;
    ifg.setSize(newSize);
  }
 catch (  BirtException ex) {
    logger.log(ex);
  }
}",0.9271712691372156
72975,"private void initHostChart(){
  if (ChartXTabUtil.isAxisChart(handle)) {
    hostChartHandle=(ExtendedItemHandle)handle.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
    if (hostChartHandle == null || hostChartHandle == handle) {
      return;
    }
    cm=ChartReportItemUtil.getChartFromHandle(hostChartHandle);
    if (cm instanceof ChartWithAxes) {
      int axisType=((ChartWithAxes)cm).isTransposed() ? ICrosstabConstants.ROW_AXIS_TYPE : ICrosstabConstants.COLUMN_AXIS_TYPE;
      hostChartHandle.addListener(ChartXTabUtil.createSyncChartListener(hostChartHandle,(ExtendedItemHandle)handle,axisType));
      handle.addListener(ChartXTabUtil.createSyncChartListener((ExtendedItemHandle)handle,hostChartHandle,axisType));
      hostChartHandle.getContainer().addListener(ChartXTabUtil.createDeleteChartListener(hostChartHandle,handle));
    }
  }
}","private void initHostChart(){
  if (ChartXTabUtil.isAxisChart(handle)) {
    hostChartHandle=(ExtendedItemHandle)handle.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
    if (hostChartHandle == null || hostChartHandle == handle) {
      return;
    }
    cm=ChartReportItemUtil.getChartFromHandle(hostChartHandle);
    if (cm instanceof ChartWithAxes) {
      hostChartHandle.getContainer().addListener(ChartXTabUtil.createDeleteChartListener(hostChartHandle,handle));
    }
  }
}",0.665686994856723
72976,"public static String createTempRootDir(String tempDir){
  String rootDirStr=null;
  File tempDtEDir=null;
  tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1);
  cacheCounter1.add(1);
  int x=0;
  while (tempDtEDir.exists()) {
    x++;
    tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1+ ""String_Node_Str""+ x);
  }
  tempDtEDir.mkdirs();
  tempDtEDir.deleteOnExit();
  rootDirStr=getCanonicalPath(tempDtEDir);
  return rootDirStr;
}","public static String createTempRootDir(String tempDir){
  String rootDirStr=null;
  File tempDtEDir=null;
  tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1.intValue());
  cacheCounter1.add(1);
  int x=0;
  while (tempDtEDir.exists()) {
    x++;
    tempDtEDir=new File(tempDir,""String_Node_Str"" + System.currentTimeMillis() + cacheCounter1.intValue()+ ""String_Node_Str""+ x);
  }
  tempDtEDir.mkdirs();
  tempDtEDir.deleteOnExit();
  rootDirStr=getCanonicalPath(tempDtEDir);
  return rootDirStr;
}",0.9791666666666666
72977,"public Control createDialogArea(Composite parent){
  Control dialogArea=super.createDialogArea(parent);
  getSQLBuilder().addContentChangeListener(this);
  return dialogArea;
}","public Control createDialogArea(Composite parent){
  Control dialogArea=m_dialog.createDialogArea(parent);
  m_dialog.getSQLBuilder().addContentChangeListener(this);
  return dialogArea;
}",0.9395604395604396
72978,"public CustomSQLBuilderDialog(Shell parentShell){
  super(parentShell);
}","public CustomSQLBuilderDialog(Shell parentShell){
  m_dialog=new SQLBuilderDialogWrapper(parentShell);
}",0.8135593220338984
72979,"/** 
 * Marks the dialog to have a changed state.
 * @param dirty
 */
public void setDirty(boolean dirty){
  getSQLBuilder().setDirty(dirty);
}","/** 
 * Marks the dialog to have a changed state.
 * @param dirty
 */
public void setDirty(boolean dirty){
  m_dialog.getSQLBuilder().setDirty(dirty);
}",0.9694915254237289
72980,"public boolean setInput(ISQLBuilderEditorInput editorInput){
  try {
    return super.setInput(editorInput);
  }
 catch (  RuntimeException ex) {
    ex.printStackTrace();
    return false;
  }
}","/** 
 * This method add the visibility of SQLBuilderDialog.setInput();
 */
public boolean setInput(ISQLBuilderEditorInput editorInput){
  return super.setInput(editorInput);
}",0.5405405405405406
72981,"public boolean isDirty(){
  return getSQLBuilder().isDirty();
}","public boolean isDirty(){
  return m_dialog.getSQLBuilder().isDirty();
}",0.9333333333333332
72982,"QueryStatement getSQLQueryStatement(){
  return getSQLBuilder().getDomainModel().getSQLStatement();
}","QueryStatement getSQLQueryStatement(){
  return m_dialog.getSQLBuilder().getDomainModel().getSQLStatement();
}",0.957345971563981
72983,"private void updateDirtyStatus(){
  Shell dialogShell=getShell();
  if (dialogShell == null || dialogShell.getText() == null)   return;
  if (isDirty()) {
    if (!dialogShell.getText().startsWith(DIRTY_STATUS_MARK)) {
      dialogShell.setText(DIRTY_STATUS_MARK + getShell().getText());
    }
  }
 else   if (dialogShell.getText().startsWith(DIRTY_STATUS_MARK)) {
    dialogShell.setText(dialogShell.getText().substring(1));
  }
}","private void updateDirtyStatus(){
  Shell dialogShell=m_dialog.getShell();
  if (dialogShell == null || dialogShell.getText() == null)   return;
  if (isDirty()) {
    if (!dialogShell.getText().startsWith(DIRTY_STATUS_MARK)) {
      dialogShell.setText(DIRTY_STATUS_MARK + dialogShell.getText());
    }
  }
 else   if (dialogShell.getText().startsWith(DIRTY_STATUS_MARK)) {
    dialogShell.setText(dialogShell.getText().substring(1));
  }
}",0.9655963302752294
72984,"public boolean close(){
  getSQLBuilder().removeContentChangeListener(this);
  return super.close();
}","public boolean close(){
  m_dialog.getSQLBuilder().removeContentChangeListener(this);
  return m_dialog.close();
}",0.8981481481481481
72985,"private String getSQLBuilderState(String sqbInputName){
  SQLBuilder sqlBuilder=getSQLBuilder();
  if (sqlBuilder == null)   return null;
  SQLBuilderStorageEditorInput storageEditorInput=new SQLBuilderStorageEditorInput(sqbInputName,sqlBuilder.getSQL());
  storageEditorInput.setConnectionInfo(sqlBuilder.getConnectionInfo());
  storageEditorInput.setOmitSchemaInfo(sqlBuilder.getOmitSchemaInfo());
  storageEditorInput.setInputUsageOptions(sqlBuilder.getEditorInputUsageOptions());
  storageEditorInput.setWindowStateInfo(sqlBuilder.getWindowStateInfo());
  XMLMemento memento=SQLBuilderEditorInputUtil.saveSQLBuilderStorageEditorInput(storageEditorInput);
  String sqbState=SQLBuilderEditorInputUtil.writeXMLMementoToString(memento);
  return sqbState;
}","private String getSQLBuilderState(String sqbInputName){
  SQLBuilder sqlBuilder=m_dialog.getSQLBuilder();
  if (sqlBuilder == null)   return null;
  SQLBuilderStorageEditorInput storageEditorInput=new SQLBuilderStorageEditorInput(sqbInputName,sqlBuilder.getSQL());
  storageEditorInput.setConnectionInfo(sqlBuilder.getConnectionInfo());
  storageEditorInput.setOmitSchemaInfo(sqlBuilder.getOmitSchemaInfo());
  storageEditorInput.setInputUsageOptions(sqlBuilder.getEditorInputUsageOptions());
  storageEditorInput.setWindowStateInfo(sqlBuilder.getWindowStateInfo());
  XMLMemento memento=SQLBuilderEditorInputUtil.saveSQLBuilderStorageEditorInput(storageEditorInput);
  String sqbState=SQLBuilderEditorInputUtil.writeXMLMementoToString(memento);
  return sqbState;
}",0.9940906106369009
72986,"private IWindowStateInfo createDefaultWindowState(){
  IControlStateInfo outlineControlState=new ControlStateInfo(IControlStateInfo.OUTLINE_CONTROL);
  outlineControlState.setIsVisible(false);
  IWindowStateInfo windowState=new WindowStateInfo();
  windowState.put(outlineControlState.getControlType(),outlineControlState);
  return windowState;
}","private IWindowStateInfo createDefaultWindowState(){
  IControlStateInfo outlineControlState=new ControlStateInfo(IControlStateInfo.OUTLINE_CONTROL);
  outlineControlState.setIsVisible(false);
  IWindowStateInfo windowState=new WindowStateInfo();
  windowState.put(outlineControlState.getControlType(),outlineControlState);
  windowState.setHeight(SQBCONTROL_HEIGHT);
  return windowState;
}",0.940379403794038
72987,"/** 
 * Format and raise an user message if the specified status is not OK.
 * @param connectStatus
 */
void done(IStatus connectStatus){
  if (connectStatus != null && connectStatus.isOK())   return;
  if (connectStatus == null) {
    ExceptionHandler.showException(m_parentShell,Messages.sqbWizPage_cannotOpenConnectionTitle,Messages.sqbWizPage_cannotOpenConnectionMsg,null);
  }
  String errorMessage=Messages.sqbWizPage_cannotOpenConnectionMsg + NEWLINE_CHAR + Messages.sqbWizPage_dbErrorMsg;
  errorMessage+=connectStatus.getMessage();
  String detailMessages=EMPTY_STR;
  IStatus[] childrenStatus=connectStatus.getChildren();
  Throwable ex=connectStatus.getException();
  for (int i=0; i < childrenStatus.length; i++) {
    if (detailMessages.length() > 0)     detailMessages+=NEWLINE_CHAR;
    detailMessages+=childrenStatus[i].getMessage();
    if (ex == null)     ex=childrenStatus[i].getException();
  }
  ExceptionHandler.showException(m_parentShell,Messages.sqbWizPage_cannotOpenConnectionTitle,errorMessage,ex);
}","/** 
 * Format and raise an user message if the specified status is not OK.
 * @param connectStatus
 */
void done(IStatus connectStatus){
  if (connectStatus != null && connectStatus.isOK())   return;
  if (connectStatus == null) {
    ExceptionHandler.showException(m_parentShell,Messages.sqbWizPage_cannotOpenConnectionTitle,Messages.sqbWizPage_cannotOpenConnectionMsg,null);
  }
  String errorMessage=Messages.sqbWizPage_cannotOpenConnectionMsg + NEWLINE_CHAR + Messages.sqbWizPage_dbErrorMsg;
  errorMessage+=connectStatus.getMessage();
  IStatus[] childrenStatus=connectStatus.getChildren();
  Throwable ex=connectStatus.getException();
  for (int i=0; i < childrenStatus.length; i++) {
    if (ex == null)     ex=childrenStatus[i].getException();
  }
  ExceptionHandler.showException(m_parentShell,Messages.sqbWizPage_cannotOpenConnectionTitle,errorMessage,ex);
}",0.9166666666666666
72988,"private void outputSfnts(PrintStream out){
  out.println(""String_Node_Str"");
  String[] tablesDesired={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] bigTablesDesired={""String_Node_Str"",""String_Node_Str""};
  List tablesToAdd=new ArrayList();
  addExistedTables(tablesToAdd,tablesDesired);
  addExistedTables(tablesToAdd,bigTablesDesired);
  Util.putInt16(directoryRawData,4,tablesToAdd.size() + 1);
  out.print(""String_Node_Str"");
  out.println(Util.toHexString(directoryRawData));
  int offset=12 + (tablesToAdd.size() + 1) * 16;
  StringBuffer tableContent=new StringBuffer();
  for (int i=0; i < tablesToAdd.size(); i++) {
    String name=(String)tablesToAdd.get(i);
    if (isBigTable(name,bigTablesDesired)) {
      offset=addBigTable(out,offset,name,tableContent);
    }
 else {
      offset=addTable(out,offset,name,tableContent);
    }
  }
  outputGdirTable(out);
  out.print(""String_Node_Str"");
  out.println(tableContent.toString());
  out.println(""String_Node_Str"");
}","private void outputSfnts(PrintStream out){
  out.println(""String_Node_Str"");
  String[] tablesDesired={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  List tablesToAdd=new ArrayList();
  addTables(tablesToAdd,tablesDesired);
  Util.putInt16(directoryRawData,4,tablesToAdd.size() + 1);
  out.print(""String_Node_Str"");
  out.println(Util.toHexString(directoryRawData));
  int offset=12 + (tablesToAdd.size() + 1) * 16;
  StringBuffer tableContent=new StringBuffer();
  for (int i=0; i < tablesToAdd.size(); i++) {
    String name=(String)tablesToAdd.get(i);
    offset=addTable(out,offset,name,tableContent);
  }
  outputGdirTable(out);
  out.print(""String_Node_Str"");
  out.println(tableContent.toString());
  out.println(""String_Node_Str"");
}",0.7408886669995007
72989,"private int addTable(PrintStream out,int offset,String name,StringBuffer tableContent){
  int result=0;
  try {
    int[] tableLocation=getTableLocation(name);
    if (tableLocation != null) {
      byte[] tableMetadata=(byte[])metadataTables.get(name);
      Util.putInt32(tableMetadata,8,offset);
      result=offset + getEvenLength(tableLocation[1]);
      out.println(Util.toHexString(tableMetadata));
      byte[] data=readTable(name);
      tableContent.append(""String_Node_Str"" + toPSDataString(Util.toHexString(data)));
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + name);
  }
  return result;
}","private int addTable(PrintStream out,int offset,String name,StringBuffer tableContent){
  int result=0;
  try {
    int[] tableLocation=getTableLocation(name);
    if (tableLocation != null) {
      byte[] tableMetadata=(byte[])metadataTables.get(name);
      Util.putInt32(tableMetadata,8,offset);
      out.println(Util.toHexString(tableMetadata));
      result=offset + getEvenLength(tableLocation[1]);
      List<byte[]> datas=readTable(name);
      for (      byte[] data : datas) {
        tableContent.append(""String_Node_Str"" + toPSDataString(Util.toHexString(data)));
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + name);
  }
  return result;
}",0.8722927557879014
72990,"private byte[] readTable(String name) throws DocumentException, IOException {
  int[] tableLocation;
  tableLocation=getTableLocation(name);
  if (tableLocation == null) {
    return null;
  }
  rf.seek(tableLocation[0]);
  byte[] data=readDataWithPadding(tableLocation[1]);
  return data;
}","private List<byte[]> readTable(String name) throws DocumentException, IOException {
  ArrayList<byte[]> result=new ArrayList<byte[]>();
  int[] tableLocation;
  tableLocation=getTableLocation(name);
  if (tableLocation == null) {
    return null;
  }
  int maxString=MAX_STRING_LENGTH;
  int length=tableLocation[1];
  rf.seek(tableLocation[0]);
  while (length > maxString) {
    length-=maxString;
    result.add(readDataWithPadding(maxString));
  }
  result.add(readDataWithPadding(length));
  return result;
}",0.6019900497512438
72991,"public void initialize() throws IOException {
  rf=new RandomAccessFileOrArray(fileName);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + ""String_Node_Str"" + Util.div(head.xMin,head.unitsPerEm) + ""String_Node_Str""+ Util.div(head.yMin,head.unitsPerEm)+ ""String_Node_Str""+ Util.div(head.xMax,head.unitsPerEm)+ ""String_Node_Str""+ Util.div(head.yMax,head.unitsPerEm)+ ""String_Node_Str"");
  out.println(""String_Node_Str"");
  String psFontName=toPSString(fontName);
  out.println(""String_Node_Str"" + psFontName);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  if (hasTable(""String_Node_Str"")) {
    output(out,""String_Node_Str"",getName(notice));
    output(out,""String_Node_Str"",getName(familyName));
    output(out,""String_Node_Str"",getName(fullName));
    output(out,""String_Node_Str"",getName(version));
  }
  if (hasTable(""String_Node_Str"")) {
    out.println(""String_Node_Str"" + italicAngle);
    out.println(""String_Node_Str"" + isFixedPitch);
    out.println(""String_Node_Str"" + underlinePosition);
    out.println(""String_Node_Str"" + underlineThickness);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  outputSfnts(out);
  out.println(""String_Node_Str"" + psFontName);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  int[] tableLocation=(int[])positionTables.get(""String_Node_Str"");
  int locaLength=tableLocation[1];
  int glyphCount=locaLength / head.locaBytesPerEntry + 1;
  out.println(""String_Node_Str"" + glyphCount);
  out.println(""String_Node_Str"" + glyphCount + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}","public void initialize() throws IOException {
  int[] tableLocation=(int[])positionTables.get(""String_Node_Str"");
  int locaLength=tableLocation[1];
  int glyphCount=locaLength / head.locaBytesPerEntry + 1;
  rf=new RandomAccessFileOrArray(fileName);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + ""String_Node_Str"" + Util.div(head.xMin,head.unitsPerEm) + ""String_Node_Str""+ Util.div(head.yMin,head.unitsPerEm)+ ""String_Node_Str""+ Util.div(head.xMax,head.unitsPerEm)+ ""String_Node_Str""+ Util.div(head.yMax,head.unitsPerEm)+ ""String_Node_Str"");
  out.println(""String_Node_Str"");
  String psFontName=toPSString(fontName);
  out.println(""String_Node_Str"" + psFontName);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + glyphCount + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  if (hasTable(""String_Node_Str"")) {
    output(out,""String_Node_Str"",getName(notice));
    output(out,""String_Node_Str"",getName(familyName));
    output(out,""String_Node_Str"",getName(fullName));
    output(out,""String_Node_Str"",getName(version));
  }
  if (hasTable(""String_Node_Str"")) {
    out.println(""String_Node_Str"" + italicAngle);
    out.println(""String_Node_Str"" + isFixedPitch);
    out.println(""String_Node_Str"" + underlinePosition);
    out.println(""String_Node_Str"" + underlineThickness);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  outputSfnts(out);
  out.println(""String_Node_Str"" + psFontName);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + glyphCount);
  out.println(""String_Node_Str"" + glyphCount + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}",0.8955372725006233
72992,"/** 
 * Closes the document.
 */
public void end(){
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println((""String_Node_Str"" + (pageWidth * 8) + ""String_Node_Str""+ (pageHeight * 8)+ ""String_Node_Str""));
  for (int i=0; i < currentPageNum; i++) {
    println((""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ (i + 1)+ ""String_Node_Str""));
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  for (int i=0; i < currentPageNum; i++) {
    println((""String_Node_Str"" + (i + 1) + ""String_Node_Str""));
    if (fileNamesLists.containsKey(new Integer(i + 1))) {
      List filenames=(List)fileNamesLists.get(new Integer(i + 1));
      for (Iterator ite=filenames.iterator(); ite.hasNext(); ) {
        println((""String_Node_Str"" + (String)ite.next() + ""String_Node_Str""));
      }
    }
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  writer.close();
  writer=null;
}","/** 
 * Closes the document.
 */
public void end(){
  int slidesizex=(int)(Math.ceil(pageWidth * 8));
  int slidesizey=(int)(Math.ceil(pageHeight * 8));
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println((""String_Node_Str"" + slidesizex + ""String_Node_Str""+ slidesizey+ ""String_Node_Str""));
  for (int i=0; i < currentPageNum; i++) {
    println((""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ (i + 1)+ ""String_Node_Str""));
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  for (int i=0; i < currentPageNum; i++) {
    println((""String_Node_Str"" + (i + 1) + ""String_Node_Str""));
    if (fileNamesLists.containsKey(new Integer(i + 1))) {
      List filenames=(List)fileNamesLists.get(new Integer(i + 1));
      for (Iterator ite=filenames.iterator(); ite.hasNext(); ) {
        println((""String_Node_Str"" + (String)ite.next() + ""String_Node_Str""));
      }
    }
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  writer.close();
  writer=null;
}",0.7567389875082183
72993,"public void buildMenu(IMenuManager menu,List selectedList){
  if (selectedList != null && selectedList.size() == 1 && selectedList.get(0) instanceof ExtendedItemHandle) {
    ExtendedItemHandle handle=(ExtendedItemHandle)selectedList.get(0);
    if (handle.getExtensionName().equals(""String_Node_Str"")) {
      Separator separator=new Separator(""String_Node_Str"");
      if (menu.getItems().length > 0) {
        menu.insertBefore(menu.getItems()[0].getId(),separator);
      }
 else {
        menu.add(separator);
      }
      menu.appendToGroup(separator.getId(),new OpenTaskSelectTypeAction(handle));
      menu.appendToGroup(separator.getId(),new OpenTaskSelectDataAction(handle));
      menu.appendToGroup(separator.getId(),new OpenTaskFormatChartAction(handle));
    }
  }
}","public void buildMenu(IMenuManager menu,List selectedList){
  if (selectedList != null && selectedList.size() == 1 && ChartReportItemUtil.isChartHandle(selectedList.get(0))) {
    ExtendedItemHandle handle=(ExtendedItemHandle)selectedList.get(0);
    Separator separator=new Separator(""String_Node_Str"");
    if (menu.getItems().length > 0) {
      menu.insertBefore(menu.getItems()[0].getId(),separator);
    }
 else {
      menu.add(separator);
    }
    menu.appendToGroup(separator.getId(),new OpenChartTaskAction(handle,""String_Node_Str"",Messages.getString(""String_Node_Str""),true));
    menu.appendToGroup(separator.getId(),new OpenChartTaskAction(handle,""String_Node_Str"",Messages.getString(""String_Node_Str""),false));
    menu.appendToGroup(separator.getId(),new OpenChartTaskAction(handle,""String_Node_Str"",Messages.getString(""String_Node_Str""),false));
    if (ChartXTabUtil.isPlotChart(handle) || ChartXTabUtil.isAxisChart(handle)) {
      menu.appendToGroup(separator.getId(),new FlipAxisAction(handle));
    }
  }
}",0.5693753454947484
72994,"public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  if (ChartXTabUtil.isAxisChart(eih)) {
    DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=""String_Node_Str"";
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : (Chart)EcoreUtil.copy(cm);
    final Object[] applyData=new Object[2];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    ReportDataServiceProvider dataProvider=new ReportDataServiceProvider(extendedHandle);
    IChartDataSheet dataSheet=new StandardChartDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=new ChartWizardContext(cmClone,this,dataProvider,dataSheet);
    dataProvider.setWizardContext(context);
    if (dataProvider.checkState(IDataServiceProvider.PART_CHART)) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
      context.setEnabled(ChartUIConstants.TYPE_PIE,false);
      context.setEnabled(ChartUIConstants.TYPE_METER,false);
      context.setEnabled(ChartUIConstants.TYPE_STOCK,false);
      context.setEnabled(ChartUIConstants.TYPE_BUBBLE,false);
      context.setEnabled(ChartUIConstants.TYPE_DIFFERENCE,false);
      context.setEnabled(ChartUIConstants.TYPE_GANTT,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=EcoreUtil.copy(context.getModel());
        applyData[1]=context.getOutputFormat();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(ChartReportItemUtil.isRtl());
    Object of=extendedHandle.getProperty(ChartReportItemUtil.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else       context.setOutputFormat((String)of);
    }
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    if (contextResult != null && contextResult.getModel() != null) {
      commandStack.commit();
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat());
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,cm,contextResult.getModel());
      }
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1]);
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,cm,(Chart)applyData[0]);
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
  }
}","public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  if (ChartXTabUtil.isAxisChart(eih)) {
    DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=""String_Node_Str"";
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : (Chart)EcoreUtil.copy(cm);
    final Object[] applyData=new Object[2];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    ReportDataServiceProvider dataProvider=new ReportDataServiceProvider(extendedHandle);
    IChartDataSheet dataSheet=new StandardChartDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=new ChartWizardContext(cmClone,this,dataProvider,dataSheet);
    dataProvider.setWizardContext(context);
    if (dataProvider.checkState(IDataServiceProvider.PART_CHART)) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
      context.setEnabled(ChartUIConstants.TYPE_PIE,false);
      context.setEnabled(ChartUIConstants.TYPE_METER,false);
      context.setEnabled(ChartUIConstants.TYPE_STOCK,false);
      context.setEnabled(ChartUIConstants.TYPE_BUBBLE,false);
      context.setEnabled(ChartUIConstants.TYPE_DIFFERENCE,false);
      context.setEnabled(ChartUIConstants.TYPE_GANTT,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=EcoreUtil.copy(context.getModel());
        applyData[1]=context.getOutputFormat();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(ChartReportItemUtil.isRtl());
    Object of=extendedHandle.getProperty(ChartReportItemUtil.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else       context.setOutputFormat((String)of);
    }
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    if (contextResult != null && contextResult.getModel() != null) {
      commandStack.commit();
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat());
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),contextResult.getModel());
      }
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1]);
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(Chart)applyData[0]);
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
  }
}",0.9895182872435324
72995,"public final void updateFigure(ExtendedItemHandle eih,IFigure ifg){
  try {
    eih.loadExtendedElement();
    final ChartReportItemImpl crii=(ChartReportItemImpl)eih.getReportItem();
    crii.setHandle(eih);
    handleChartInXTab(eih);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    Bounds defaultBounds=ChartReportItemUtil.createDefaultChartBounds(eih,cm);
    double dHeightInPoints=defaultBounds.getHeight();
    double dWidthInPoints=defaultBounds.getWidth();
    final DimensionHandle dhHeight=eih.getHeight();
    final DimensionHandle dhWidth=eih.getWidth();
    double dOriginalHeight=dhHeight.getMeasure();
    String sHeightUnits=dhHeight.getUnits();
    double dOriginalWidth=dhWidth.getMeasure();
    String sWidthUnits=dhWidth.getUnits();
    final IDisplayServer idsSWT=ChartUIUtil.getDisplayServer();
    if (sHeightUnits != null) {
      if (sHeightUnits == DesignChoiceConstants.UNITS_PX) {
        dOriginalHeight=ChartUtil.convertPixelsToPoints(idsSWT,dOriginalHeight);
        sHeightUnits=DesignChoiceConstants.UNITS_PT;
      }
      if (sHeightUnits == DesignChoiceConstants.UNITS_PERCENTAGE) {
        IFigure parentFigure=ifg.getParent();
        if (parentFigure != null) {
          int height=(int)((parentFigure.getSize().height - parentFigure.getInsets().getHeight()) * dOriginalHeight / 100);
          dOriginalHeight=ChartUtil.convertPixelsToPoints(idsSWT,height);
          sHeightUnits=DesignChoiceConstants.UNITS_PT;
        }
      }
      dHeightInPoints=DimensionUtil.convertTo(dOriginalHeight,sHeightUnits,DesignChoiceConstants.UNITS_PT).getMeasure();
    }
    if (sWidthUnits != null) {
      if (sWidthUnits == DesignChoiceConstants.UNITS_PX) {
        dOriginalWidth=(dOriginalWidth * 72d) / idsSWT.getDpiResolution();
        sWidthUnits=DesignChoiceConstants.UNITS_PT;
      }
      if (sWidthUnits == DesignChoiceConstants.UNITS_PERCENTAGE) {
        IFigure parentFigure=ifg.getParent();
        if (parentFigure != null) {
          int width=(int)((parentFigure.getSize().width - parentFigure.getInsets().getWidth()) * dOriginalWidth / 100);
          dOriginalWidth=ChartUtil.convertPixelsToPoints(idsSWT,width);
          sWidthUnits=DesignChoiceConstants.UNITS_PT;
        }
      }
      dWidthInPoints=DimensionUtil.convertTo(dOriginalWidth,sWidthUnits,DesignChoiceConstants.UNITS_PT).getMeasure();
    }
    final double dHeightInPixels=(idsSWT.getDpiResolution() * dHeightInPoints) / 72d;
    final double dWidthInPixels=(idsSWT.getDpiResolution() * dWidthInPoints) / 72d;
    if (cm != null && !ChartXTabUtil.isAxisChart(eih)) {
      if (dWidthInPoints > 0)       cm.getBlock().getBounds().setWidth(dWidthInPoints);
      if (dHeightInPoints > 0)       cm.getBlock().getBounds().setHeight(dHeightInPoints);
    }
    if (crii.getDesignerRepresentation() != null) {
      ((DesignerRepresentation)crii.getDesignerRepresentation()).setDirty(true);
    }
    Dimension newSize=ifg.getBounds().getCopy().getSize();
    if (dWidthInPixels > 0)     newSize.width=(int)dWidthInPixels;
    if (dHeightInPixels > 0)     newSize.height=(int)dHeightInPixels;
    ifg.setSize(newSize);
  }
 catch (  BirtException ex) {
    logger.log(ex);
  }
}","public final void updateFigure(ExtendedItemHandle eih,IFigure ifg){
  try {
    eih.loadExtendedElement();
    final ChartReportItemImpl crii=(ChartReportItemImpl)eih.getReportItem();
    crii.setHandle(eih);
    handleChartInXTab(eih);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    if (cm == null) {
      return;
    }
    Bounds defaultBounds=ChartReportItemUtil.createDefaultChartBounds(eih,cm);
    double dHeightInPoints=defaultBounds.getHeight();
    double dWidthInPoints=defaultBounds.getWidth();
    final DimensionHandle dhHeight=eih.getHeight();
    final DimensionHandle dhWidth=eih.getWidth();
    double dOriginalHeight=dhHeight.getMeasure();
    String sHeightUnits=dhHeight.getUnits();
    double dOriginalWidth=dhWidth.getMeasure();
    String sWidthUnits=dhWidth.getUnits();
    final IDisplayServer idsSWT=ChartUIUtil.getDisplayServer();
    if (sHeightUnits != null) {
      if (sHeightUnits == DesignChoiceConstants.UNITS_PX) {
        dOriginalHeight=ChartUtil.convertPixelsToPoints(idsSWT,dOriginalHeight);
        sHeightUnits=DesignChoiceConstants.UNITS_PT;
      }
      if (sHeightUnits == DesignChoiceConstants.UNITS_PERCENTAGE) {
        IFigure parentFigure=ifg.getParent();
        if (parentFigure != null) {
          int height=(int)((parentFigure.getSize().height - parentFigure.getInsets().getHeight()) * dOriginalHeight / 100);
          dOriginalHeight=ChartUtil.convertPixelsToPoints(idsSWT,height);
          sHeightUnits=DesignChoiceConstants.UNITS_PT;
        }
      }
      dHeightInPoints=DimensionUtil.convertTo(dOriginalHeight,sHeightUnits,DesignChoiceConstants.UNITS_PT).getMeasure();
    }
    if (sWidthUnits != null) {
      if (sWidthUnits == DesignChoiceConstants.UNITS_PX) {
        dOriginalWidth=(dOriginalWidth * 72d) / idsSWT.getDpiResolution();
        sWidthUnits=DesignChoiceConstants.UNITS_PT;
      }
      if (sWidthUnits == DesignChoiceConstants.UNITS_PERCENTAGE) {
        IFigure parentFigure=ifg.getParent();
        if (parentFigure != null) {
          int width=(int)((parentFigure.getSize().width - parentFigure.getInsets().getWidth()) * dOriginalWidth / 100);
          dOriginalWidth=ChartUtil.convertPixelsToPoints(idsSWT,width);
          sWidthUnits=DesignChoiceConstants.UNITS_PT;
        }
      }
      dWidthInPoints=DimensionUtil.convertTo(dOriginalWidth,sWidthUnits,DesignChoiceConstants.UNITS_PT).getMeasure();
    }
    final double dHeightInPixels=(idsSWT.getDpiResolution() * dHeightInPoints) / 72d;
    final double dWidthInPixels=(idsSWT.getDpiResolution() * dWidthInPoints) / 72d;
    if (cm != null && !ChartXTabUtil.isAxisChart(eih)) {
      if (dWidthInPoints > 0)       cm.getBlock().getBounds().setWidth(dWidthInPoints);
      if (dHeightInPoints > 0)       cm.getBlock().getBounds().setHeight(dHeightInPoints);
    }
    if (crii.getDesignerRepresentation() != null) {
      ((DesignerRepresentation)crii.getDesignerRepresentation()).setDirty(true);
    }
    Dimension newSize=ifg.getBounds().getCopy().getSize();
    if (dWidthInPixels > 0)     newSize.width=(int)dWidthInPixels;
    if (dHeightInPixels > 0)     newSize.height=(int)dHeightInPixels;
    ifg.setSize(newSize);
  }
 catch (  BirtException ex) {
    logger.log(ex);
  }
}",0.9935404490925868
72996,"/** 
 * Updates Axis chart in Xtab by replacing date item with axis chart.
 * @param cell
 * @param bTransposed
 * @param hostChartHandle
 * @throws BirtException
 */
public static void updateAxisChart(AggregationCellHandle cell,boolean bTransposed,ExtendedItemHandle hostChartHandle) throws BirtException {
  int axisType=bTransposed ? ICrosstabConstants.ROW_AXIS_TYPE : ICrosstabConstants.COLUMN_AXIS_TYPE;
  if (cell.getCrosstab().getGrandTotal(axisType) != null) {
    AggregationCellHandle grandTotalAggCell;
    if (bTransposed) {
      grandTotalAggCell=((MeasureViewHandle)cell.getContainer()).getAggregationCell(null,null,cell.getDimensionName(ICrosstabConstants.COLUMN_AXIS_TYPE),cell.getLevelName(ICrosstabConstants.COLUMN_AXIS_TYPE));
    }
 else {
      grandTotalAggCell=((MeasureViewHandle)cell.getContainer()).getAggregationCell(cell.getDimensionName(ICrosstabConstants.ROW_AXIS_TYPE),cell.getLevelName(ICrosstabConstants.ROW_AXIS_TYPE),null,null);
    }
    Object content=ChartXTabUtil.getFirstContent(grandTotalAggCell);
    if (content instanceof DataItemHandle) {
      ExtendedItemHandle axisChartHandle=createChartHandle(cell.getModelHandle(),ChartReportItemConstants.TYPE_AXIS_CHART,hostChartHandle);
      grandTotalAggCell.addContent(axisChartHandle,0);
    }
  }
}","/** 
 * Updates Axis chart in Xtab by replacing date item with axis chart.
 * @param cell
 * @param bTransposed
 * @param hostChartHandle
 * @throws BirtException
 */
public static void updateAxisChart(AggregationCellHandle cell,boolean bTransposed,ExtendedItemHandle hostChartHandle) throws BirtException {
  if (getGrandTotalCell(cell,bTransposed) != null) {
    AggregationCellHandle grandTotalAggCell=getGrandTotalAggregationCell(cell,bTransposed);
    Object content=ChartXTabUtil.getFirstContent(grandTotalAggCell);
    if (content instanceof DataItemHandle) {
      ExtendedItemHandle axisChartHandle=createChartHandle(cell.getModelHandle(),ChartReportItemConstants.TYPE_AXIS_CHART,hostChartHandle);
      grandTotalAggCell.addContent(axisChartHandle,0);
    }
  }
}",0.3982558139534883
72997,"/** 
 * Updates XTab for Axis chart sync
 * @param cell
 * @param hostChartHandle
 * @param cmOld
 * @param cmNew
 * @throws BirtException
 */
public static void updateXTabForAxis(AggregationCellHandle cell,ExtendedItemHandle hostChartHandle,Chart cmOld,Chart cmNew) throws BirtException {
  if (cmOld instanceof ChartWithoutAxes) {
    if (cmNew instanceof ChartWithAxes) {
      addAxisChartInXTab(cell,((ChartWithAxes)cmNew).isTransposed(),hostChartHandle);
    }
  }
 else   if (cmOld instanceof ChartWithAxes) {
    if (cmNew instanceof ChartWithoutAxes) {
      removeAxisChartInXTab(cell,cmOld);
    }
 else {
      boolean bTransOld=((ChartWithAxes)cmOld).isTransposed();
      boolean bTransNew=((ChartWithAxes)cmNew).isTransposed();
      if (bTransOld != bTransNew) {
        ChartXTabUtil.updateXTabDirection(cell.getCrosstab(),bTransNew);
        int measureCount=cell.getCrosstab().getMeasureCount();
        for (int i=0; i < measureCount - 1; i++) {
          ExtendedItemHandle chartInOtherMeasure=findChartInOtherMeasures(cell);
          if (chartInOtherMeasure != null) {
            if (isAxisChart(chartInOtherMeasure)) {
              chartInOtherMeasure=findReferenceChart(chartInOtherMeasure);
            }
            updateChartModelWhenTransposing((ChartWithAxes)cmNew,(ChartWithAxes)getChartFromHandle(chartInOtherMeasure));
            addAxisChartInXTab(getXtabContainerCell(chartInOtherMeasure),bTransNew,chartInOtherMeasure);
          }
        }
        removeAxisChartInXTab(cell,cmOld);
        addAxisChartInXTab(cell,bTransNew,hostChartHandle);
      }
    }
  }
}","/** 
 * Updates XTab for Axis chart sync
 * @param cell
 * @param hostChartHandle
 * @param bTransOld
 * @param cmNew
 * @throws BirtException
 */
public static void updateXTabForAxis(AggregationCellHandle cell,ExtendedItemHandle hostChartHandle,boolean bTransOld,Chart cmNew) throws BirtException {
  boolean bTransNew=((ChartWithAxes)cmNew).isTransposed();
  if (bTransOld != bTransNew) {
    ChartXTabUtil.updateXTabDirection(cell.getCrosstab(),bTransNew);
    int measureCount=cell.getCrosstab().getMeasureCount();
    for (int i=0; i < measureCount - 1; i++) {
      ExtendedItemHandle chartInOtherMeasure=findChartInOtherMeasures(cell);
      if (chartInOtherMeasure != null) {
        if (isAxisChart(chartInOtherMeasure)) {
          chartInOtherMeasure=findReferenceChart(chartInOtherMeasure);
        }
        updateChartModelWhenTransposing((ChartWithAxes)cmNew,(ChartWithAxes)getChartFromHandle(chartInOtherMeasure));
        AggregationCellHandle cellAgg=getXtabContainerCell(chartInOtherMeasure);
        removeAxisChartInXTab(cellAgg,bTransOld);
        addAxisChartInXTab(cellAgg,bTransNew,chartInOtherMeasure);
      }
    }
    removeAxisChartInXTab(cell,bTransOld);
    addAxisChartInXTab(cell,bTransNew,hostChartHandle);
  }
}",0.7478077867414942
72998,"/** 
 * Adds Axis chart in XTab
 * @param cell
 * @param bTransposed
 * @param chartHandle
 * @throws BirtException
 */
public static void addAxisChartInXTab(AggregationCellHandle cell,boolean bTransposed,ExtendedItemHandle hostChartHandle) throws BirtException {
  int axisType=bTransposed ? ICrosstabConstants.ROW_AXIS_TYPE : ICrosstabConstants.COLUMN_AXIS_TYPE;
  if (bTransposed) {
    cell.setSpanOverOnRow(cell.getAggregationOnRow());
    cell.setSpanOverOnColumn(null);
    CrosstabCellHandle rowCell=ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.ROW_AXIS_TYPE);
    if (rowCell == null) {
      return;
    }
    if (rowCell.getHeight() == null || rowCell.getHeight().getMeasure() == 0) {
      cell.getCrosstab().setRowHeight(rowCell,DEFAULT_ROW_WIDTH);
    }
    rowCell.getCrosstabHandle().setProperty(StyleHandle.PADDING_TOP_PROP,new DimensionValue(0,DesignChoiceConstants.UNITS_PT));
    rowCell.getCrosstabHandle().setProperty(StyleHandle.PADDING_BOTTOM_PROP,new DimensionValue(0,DesignChoiceConstants.UNITS_PT));
  }
 else {
    cell.setSpanOverOnColumn(cell.getAggregationOnColumn());
    cell.setSpanOverOnRow(null);
    CrosstabCellHandle columnCell=ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.COLUMN_AXIS_TYPE);
    if (columnCell == null) {
      return;
    }
    if (columnCell.getWidth() != null || columnCell.getWidth().getMeasure() == 0) {
      cell.getCrosstab().setColumnWidth(columnCell,DEFAULT_COLUMN_WIDTH);
    }
    columnCell.getCrosstabHandle().setProperty(StyleHandle.PADDING_LEFT_PROP,new DimensionValue(0,DesignChoiceConstants.UNITS_PT));
    columnCell.getCrosstabHandle().setProperty(StyleHandle.PADDING_RIGHT_PROP,new DimensionValue(0,DesignChoiceConstants.UNITS_PT));
  }
  boolean bNewGrandTotol=false;
  if (cell.getCrosstab().getGrandTotal(axisType) == null) {
    bNewGrandTotol=true;
    cell.getCrosstab().addGrandTotal(axisType);
  }
  ExtendedItemHandle axisChartHandle=createChartHandle(cell.getModelHandle(),ChartReportItemConstants.TYPE_AXIS_CHART,hostChartHandle);
  AggregationCellHandle grandTotalAggCell;
  if (bTransposed) {
    grandTotalAggCell=((MeasureViewHandle)cell.getContainer()).getAggregationCell(null,null,cell.getDimensionName(ICrosstabConstants.COLUMN_AXIS_TYPE),cell.getLevelName(ICrosstabConstants.COLUMN_AXIS_TYPE));
  }
 else {
    grandTotalAggCell=((MeasureViewHandle)cell.getContainer()).getAggregationCell(cell.getDimensionName(ICrosstabConstants.ROW_AXIS_TYPE),cell.getLevelName(ICrosstabConstants.ROW_AXIS_TYPE),null,null);
  }
  if (bNewGrandTotol) {
    Object content=ChartXTabUtil.getFirstContent(grandTotalAggCell);
    if (content instanceof DesignElementHandle) {
      ((DesignElementHandle)content).dropAndClear();
    }
  }
  if (grandTotalAggCell != null) {
    grandTotalAggCell.addContent(axisChartHandle,0);
  }
}","/** 
 * Adds Axis chart in XTab
 * @param cell
 * @param bTransposed
 * @param chartHandle
 * @throws BirtException
 */
public static void addAxisChartInXTab(AggregationCellHandle cell,boolean bTransposed,ExtendedItemHandle hostChartHandle) throws BirtException {
  int axisType=getXTabAxisType(bTransposed);
  if (bTransposed) {
    cell.setSpanOverOnRow(cell.getAggregationOnRow());
    cell.setSpanOverOnColumn(null);
    CrosstabCellHandle rowCell=ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.ROW_AXIS_TYPE);
    if (rowCell == null) {
      return;
    }
    if (rowCell.getHeight() == null || rowCell.getHeight().getMeasure() == 0) {
      cell.getCrosstab().setRowHeight(rowCell,DEFAULT_ROW_WIDTH);
    }
    rowCell.getCrosstabHandle().setProperty(StyleHandle.PADDING_TOP_PROP,new DimensionValue(0,DesignChoiceConstants.UNITS_PT));
    rowCell.getCrosstabHandle().setProperty(StyleHandle.PADDING_BOTTOM_PROP,new DimensionValue(0,DesignChoiceConstants.UNITS_PT));
  }
 else {
    cell.setSpanOverOnColumn(cell.getAggregationOnColumn());
    cell.setSpanOverOnRow(null);
    CrosstabCellHandle columnCell=ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(),ICrosstabConstants.COLUMN_AXIS_TYPE);
    if (columnCell == null) {
      return;
    }
    if (columnCell.getWidth() != null || columnCell.getWidth().getMeasure() == 0) {
      cell.getCrosstab().setColumnWidth(columnCell,DEFAULT_COLUMN_WIDTH);
    }
    columnCell.getCrosstabHandle().setProperty(StyleHandle.PADDING_LEFT_PROP,new DimensionValue(0,DesignChoiceConstants.UNITS_PT));
    columnCell.getCrosstabHandle().setProperty(StyleHandle.PADDING_RIGHT_PROP,new DimensionValue(0,DesignChoiceConstants.UNITS_PT));
  }
  boolean bNewGrandTotol=false;
  if (cell.getCrosstab().getGrandTotal(axisType) == null) {
    bNewGrandTotol=true;
    cell.getCrosstab().addGrandTotal(axisType);
  }
  ExtendedItemHandle axisChartHandle=createChartHandle(cell.getModelHandle(),ChartReportItemConstants.TYPE_AXIS_CHART,hostChartHandle);
  AggregationCellHandle grandTotalAggCell;
  if (bTransposed) {
    grandTotalAggCell=((MeasureViewHandle)cell.getContainer()).getAggregationCell(null,null,cell.getDimensionName(ICrosstabConstants.COLUMN_AXIS_TYPE),cell.getLevelName(ICrosstabConstants.COLUMN_AXIS_TYPE));
  }
 else {
    grandTotalAggCell=((MeasureViewHandle)cell.getContainer()).getAggregationCell(cell.getDimensionName(ICrosstabConstants.ROW_AXIS_TYPE),cell.getLevelName(ICrosstabConstants.ROW_AXIS_TYPE),null,null);
  }
  if (bNewGrandTotol) {
    Object content=ChartXTabUtil.getFirstContent(grandTotalAggCell);
    if (content instanceof DesignElementHandle) {
      ((DesignElementHandle)content).dropAndClear();
    }
  }
  if (grandTotalAggCell != null) {
    grandTotalAggCell.addContent(axisChartHandle,0);
  }
}",0.3960535588442565
72999,"/** 
 * Removes Axis chart in Xtab.
 * @param cell
 * @param cmOld
 * @throws BirtException
 */
public static void removeAxisChartInXTab(AggregationCellHandle cell,Chart cmOld) throws BirtException {
  CrosstabReportItemHandle xtab=cell.getCrosstab();
  if (cmOld instanceof ChartWithAxes) {
    if (((ChartWithAxes)cmOld).isTransposed()) {
      cell.setSpanOverOnRow(null);
      CrosstabCellHandle grandTotalCell=xtab.getGrandTotal(ICrosstabConstants.ROW_AXIS_TYPE);
      if (grandTotalCell != null && grandTotalCell.getContents().size() == 0) {
        xtab.removeGrandTotal(ICrosstabConstants.ROW_AXIS_TYPE);
      }
    }
 else {
      cell.setSpanOverOnColumn(null);
      CrosstabCellHandle grandTotalCell=xtab.getGrandTotal(ICrosstabConstants.COLUMN_AXIS_TYPE);
      if (grandTotalCell != null && grandTotalCell.getContents().size() == 0) {
        xtab.removeGrandTotal(ICrosstabConstants.COLUMN_AXIS_TYPE);
      }
    }
  }
}","/** 
 * Removes Axis chart in Xtab.
 * @param cell
 * @param bTransposed
 * @throws BirtException
 */
public static void removeAxisChartInXTab(AggregationCellHandle cell,boolean bTransposed) throws BirtException {
  cell.setSpanOverOnRow(null);
  cell.setSpanOverOnColumn(null);
  AggregationCellHandle grandTotalAggCell=getGrandTotalAggregationCell(cell,bTransposed);
  if (grandTotalAggCell != null && grandTotalAggCell.getContents().size() > 0) {
    Object content=getFirstContent(grandTotalAggCell);
    if (isAxisChart((DesignElementHandle)content)) {
      ((DesignElementHandle)content).dropAndClear();
    }
    if (grandTotalAggCell.getContents().size() == 0) {
      cell.getCrosstab().removeGrandTotal(getXTabAxisType(bTransposed));
    }
  }
}",0.4224188790560472
73000,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.core.archive.ArchiveFileSaveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.ArchiveUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.DocArchiveLockManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.DocumentArchiveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.FileArchiveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.FolderArchiveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.InputStreamRefreshTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.ArchiveEntryInputStreamTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.ArchiveFileTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.ArchivePerformanceTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.BlockManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.UpgradeArchiveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.AllocTableLoaderTest.class);
  suite.addTestSuite(org.eclipse.birt.core.config.FileConfigVarManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.DataTypeUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.DateUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.DateUtilThreadTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.ExpressionParserUtilityTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.exception.BirtExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.core.format.DateFormatterTest.class);
  suite.addTestSuite(org.eclipse.birt.core.format.NumberFormatterTest.class);
  suite.addTestSuite(org.eclipse.birt.core.format.StringFormatterTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.bre.BirtDateTimeTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.bre.BirtCompTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.bre.BirtMathTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.bre.BirtStrTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.ScriptContextTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.NativeNamedListTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.NativeDateTimeSpanTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.NativeFinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.NativeJavaMapTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.FinanceTest.class);
  suite.addTestSuite(TemplateParserTest.class);
  suite.addTestSuite(org.eclipse.birt.core.util.IOUtilTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.core.archive.ArchiveFileSaveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.ArchiveUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.DocArchiveLockManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.DocumentArchiveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.FileArchiveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.FolderArchiveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.InputStreamRefreshTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.ArchiveEntryInputStreamTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.ArchiveFileTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.ArchivePerformanceTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.BlockManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.UpgradeArchiveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.AllocTableLoaderTest.class);
  suite.addTestSuite(org.eclipse.birt.core.config.FileConfigVarManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.DataTypeUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.DateUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.DateUtilThreadTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.ExpressionParserUtilityTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.exception.BirtExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.core.format.DateFormatterTest.class);
  suite.addTestSuite(org.eclipse.birt.core.format.NumberFormatterTest.class);
  suite.addTestSuite(org.eclipse.birt.core.format.StringFormatterTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.bre.BirtDateTimeTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.bre.BirtCompTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.bre.BirtMathTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.bre.BirtStrTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.ScriptContextTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.NativeNamedListTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.NativeDateTimeSpanTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.NativeFinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.NativeJavaMapTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.ScriptableParametersTest.class);
  suite.addTestSuite(TemplateParserTest.class);
  suite.addTestSuite(org.eclipse.birt.core.util.IOUtilTest.class);
  return suite;
}",0.9855274629468178
