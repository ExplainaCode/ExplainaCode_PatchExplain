record_number,buggy_code,fixed_code,code_similarity
177001,"/** 
 * Removed association entit(ies) from the enclosing entity
 * @param entity
 * @param associationEntity
 * @param field
 * @param setNull
 */
protected void onDetach(Object entity,Object associationEntity,Field field,boolean setNull){
  try {
    if (entity != null) {
      if (entity instanceof Collection<?>) {
        Collection<?> entityCollection=(Collection<?>)entity;
        for (        Object entityObj : entityCollection) {
          PropertyAccessorHelper.set(entityObj,field,setNull || entity == null ? null : Set.class.isAssignableFrom(field.getType()) ? null : associationEntity.getClass().newInstance());
        }
      }
 else {
        PropertyAccessorHelper.set(entity,field,setNull || associationEntity == null ? null : associationEntity.getClass().newInstance());
      }
    }
  }
 catch (  PropertyAccessException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
}","/** 
 * Removed association entit(ies) from the enclosing entity
 * @param entity
 * @param associationEntity
 * @param field
 * @param setNull
 */
protected void onDetach(Object entity,Object associationEntity,Field field,boolean setNull){
  try {
    if (entity != null) {
      if (entity instanceof Collection<?>) {
        Collection<?> entityCollection=(Collection<?>)entity;
        for (        Object entityObj : entityCollection) {
          PropertyAccessorHelper.set(entityObj,field,setNull || entity == null ? null : Collection.class.isAssignableFrom(field.getType()) ? null : associationEntity.getClass().newInstance());
        }
      }
 else {
        PropertyAccessorHelper.set(entity,field,setNull || associationEntity == null ? null : associationEntity.getClass().newInstance());
      }
    }
  }
 catch (  PropertyAccessException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
}",0.9935992122107336
177002,"private void computeJoinTableRelations(EnhanceEntity e,Client client,EntityMetadata entityMetadata,EntitySaveGraph objectGraph,PersistenceDelegator delegator,Relation relation){
  Object entity=e.getEntity();
  objectGraph.setParentId(getId(entity,entityMetadata));
  JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
  String joinTableName=jtMetadata.getJoinTableName();
  Set<String> joinColumns=jtMetadata.getJoinColumns();
  Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
  String joinColumnName=(String)joinColumns.toArray()[0];
  String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
  EntityMetadata relMetadata=delegator.getMetadata(objectGraph.getChildClass());
  Client pClient=delegator.getClient(entityMetadata);
  List<?> foreignKeys=pClient.getForeignKeysFromJoinTable(joinTableName,joinColumnName,inverseJoinColumnName,relMetadata,objectGraph);
  List childrenEntities=new ArrayList();
  for (  Object foreignKey : foreignKeys) {
    try {
      EntityMetadata childMetadata=delegator.getMetadata(relation.getTargetEntity());
      Client childClient=delegator.getClient(childMetadata);
      Object child=childClient.find(relation.getTargetEntity(),childMetadata,(String)foreignKey,null);
      onBiDirection(e,client,objectGraph,entityMetadata,child,childMetadata,childClient);
      childrenEntities.add(child);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  Field childField=objectGraph.getProperty();
  try {
    PropertyAccessorHelper.set(entity,childField,PropertyAccessorHelper.isCollection(childField.getType()) ? getFieldInstance(childrenEntities,childField) : childrenEntities.get(0));
  }
 catch (  PropertyAccessException ex) {
    ex.printStackTrace();
  }
}","private void computeJoinTableRelations(EnhanceEntity e,Client client,EntityMetadata entityMetadata,EntitySaveGraph objectGraph,PersistenceDelegator delegator,Relation relation){
  Object entity=e.getEntity();
  objectGraph.setParentId(getId(entity,entityMetadata));
  JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
  String joinTableName=jtMetadata.getJoinTableName();
  Set<String> joinColumns=jtMetadata.getJoinColumns();
  Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
  String joinColumnName=(String)joinColumns.toArray()[0];
  String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
  EntityMetadata relMetadata=delegator.getMetadata(objectGraph.getChildClass());
  Client pClient=delegator.getClient(entityMetadata);
  List<?> foreignKeys=pClient.getForeignKeysFromJoinTable(joinTableName,joinColumnName,inverseJoinColumnName,relMetadata,objectGraph);
  List childrenEntities=new ArrayList();
  for (  Object foreignKey : foreignKeys) {
    try {
      EntityMetadata childMetadata=delegator.getMetadata(relation.getTargetEntity());
      Client childClient=delegator.getClient(childMetadata);
      Object child=delegator.find(relation.getTargetEntity(),foreignKey);
      onBiDirection(e,client,objectGraph,entityMetadata,child,childMetadata,childClient);
      childrenEntities.add(child);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  Field childField=objectGraph.getProperty();
  try {
    PropertyAccessorHelper.set(entity,childField,PropertyAccessorHelper.isCollection(childField.getType()) ? getFieldInstance(childrenEntities,childField) : childrenEntities.get(0));
  }
 catch (  PropertyAccessException ex) {
    ex.printStackTrace();
  }
}",0.986552217453505
177003,"/** 
 * Save graph.
 * @param objectGraph the object graph
 * @throws Exception the exception
 */
private void removeGraph(EntitySaveGraph objectGraph) throws Exception {
  EntityMetadata metadata=getMetadata(objectGraph.getParentClass());
  Object parentEntity=objectGraph.getParentEntity();
  List<EntitySaveGraph> relationGraphs=null;
  if (objectGraph.isIsswapped() && !metadata.getRelations().isEmpty() && !objectGraph.getChildClass().equals(objectGraph.getParentClass())) {
    relationGraphs=getGraph(parentEntity,metadata);
    List<EntitySaveGraph> uniqueGraphs=getDisjointGraph(objectGraph,relationGraphs);
    for (    EntitySaveGraph g : uniqueGraphs) {
      removeGraph(g);
    }
  }
  if (parentEntity != null) {
    objectGraph.setParentId(getId(parentEntity,metadata));
    Client pClient=getClient(metadata);
    pClient.delete(parentEntity,objectGraph.getParentId(),metadata);
  }
  Object childEntity=objectGraph.getChildEntity();
  if (objectGraph.getParentEntity() != null && childEntity != null) {
    onClientHandle(objectGraph,childEntity);
  }
  session.remove(parentEntity.getClass(),objectGraph.getParentEntity());
}","/** 
 * Save graph.
 * @param objectGraph the object graph
 * @throws Exception the exception
 */
private void removeGraph(EntitySaveGraph objectGraph) throws Exception {
  EntityMetadata metadata=getMetadata(objectGraph.getParentClass());
  Object parentEntity=objectGraph.getParentEntity();
  List<EntitySaveGraph> relationGraphs=null;
  if (objectGraph.isIsswapped() && !metadata.getRelations().isEmpty() && parentEntity != null && !objectGraph.getChildClass().equals(objectGraph.getParentClass())) {
    relationGraphs=getGraph(parentEntity,metadata);
    List<EntitySaveGraph> uniqueGraphs=getDisjointGraph(objectGraph,relationGraphs);
    for (    EntitySaveGraph g : uniqueGraphs) {
      removeGraph(g);
    }
  }
  if (parentEntity != null) {
    objectGraph.setParentId(getId(parentEntity,metadata));
    Client pClient=getClient(metadata);
    pClient.delete(parentEntity,objectGraph.getParentId(),metadata);
    session.remove(parentEntity.getClass(),objectGraph.getParentEntity());
  }
  Object childEntity=objectGraph.getChildEntity();
  if (childEntity != null) {
    onClientHandle(objectGraph,childEntity);
  }
}",0.8966124065112187
177004,"/** 
 * On client persist.
 * @param objectGraph the object graph
 * @param childEntity the child entity
 * @throws Exception the exception
 */
private void onClientHandle(EntitySaveGraph objectGraph,Object childEntity) throws Exception {
  if (childEntity instanceof Collection<?>) {
    Collection<?> childCol=(Collection<?>)childEntity;
    for (    Object ch : childCol) {
      onClientDelete(ch,objectGraph);
    }
  }
 else {
    onClientDelete(childEntity,objectGraph);
  }
}","/** 
 * On client persist.
 * @param objectGraph the object graph
 * @param childEntity the child entity
 * @throws Exception the exception
 */
private void onClientHandle(EntitySaveGraph objectGraph,Object childEntity) throws Exception {
  if (childEntity instanceof Collection<?>) {
    Collection<?> childCol=(Collection<?>)childEntity;
    for (    Object ch : childCol) {
      if (ch != null) {
        onClientDelete(ch,objectGraph);
      }
    }
  }
 else {
    if (childEntity != null) {
      onClientDelete(childEntity,objectGraph);
    }
  }
}",0.9297401347449472
177005,"/** 
 * Populate using lucene.
 * @param m the m
 * @param client the client
 * @param result the result
 * @return the list
 */
protected List<Object> populateUsingLucene(EntityMetadata m,Client client,List<Object> result){
  String luceneQ=getLuceneQueryFromJPAQuery();
  Map<String,String> searchFilter=client.getIndexManager().search(luceneQ,Constants.INVALID,Constants.INVALID);
  if (kunderaQuery.isAliasOnly()) {
    String[] primaryKeys=searchFilter.values().toArray(new String[]{});
    try {
      result=(List<Object>)client.findAll(m.getEntityClazz(),primaryKeys);
    }
 catch (    Exception e) {
    }
  }
 else {
    return (List<Object>)persistenceDelegeator.find(m.getEntityClazz(),searchFilter);
  }
  return result;
}","/** 
 * Populate using lucene.
 * @param m the m
 * @param client the client
 * @param result the result
 * @return the list
 */
protected List<Object> populateUsingLucene(EntityMetadata m,Client client,List<Object> result){
  String luceneQ=getLuceneQueryFromJPAQuery();
  Map<String,String> searchFilter=client.getIndexManager().search(luceneQ,Constants.INVALID,Constants.INVALID);
  if (kunderaQuery.isAliasOnly()) {
    String[] primaryKeys=searchFilter.values().toArray(new String[]{});
    Set<String> uniquePKs=new HashSet<String>(Arrays.asList(primaryKeys));
    try {
      result=(List<Object>)persistenceDelegeator.find(m.getEntityClazz(),uniquePKs.toArray());
    }
 catch (    Exception e) {
    }
  }
 else {
    return (List<Object>)persistenceDelegeator.find(m.getEntityClazz(),searchFilter);
  }
  return result;
}",0.9151244416081684
177006,"/** 
 * Gets the session instance.
 * @return the session instance
 */
private Session getSessionInstance(){
  Session s=null;
  if (sf.isClosed()) {
    s=sf.openSession();
  }
 else {
    s=sf.getCurrentSession();
  }
  return s;
}","/** 
 * Gets the session instance.
 * @return the session instance
 */
private Session getSessionInstance(){
  Session s=null;
  if (sf.isClosed()) {
    s=sf.openSession();
  }
 else {
    s=sf.getCurrentSession();
    if (s.isOpen()) {
      s=sf.openSession();
    }
  }
  return s;
}",0.8384615384615385
177007,"@Override public EnhanceEntity findById(Object primaryKey,EntityMetadata m,List<String> relationNames,Client client){
  if (relationNames != null && !relationNames.isEmpty()) {
    Set<String> keys=new HashSet<String>(1);
    keys.add(primaryKey.toString());
    String query=getSqlQueryFromJPA(m,relationNames,keys);
    return populateEnhanceEntities(m,relationNames,client,query).get(0);
  }
 else {
    Object o;
    try {
      o=client.find(m.getEntityClazz(),primaryKey,null);
    }
 catch (    Exception e) {
      throw new PersistenceException(e.getMessage());
    }
    return o != null ? new EnhanceEntity(o,getId(o,m),null) : null;
  }
}","@Override public EnhanceEntity findById(Object primaryKey,EntityMetadata m,List<String> relationNames,Client client){
  if (relationNames != null && !relationNames.isEmpty()) {
    Set<String> keys=new HashSet<String>(1);
    keys.add(primaryKey.toString());
    String query=getSqlQueryFromJPA(m,relationNames,keys);
    List<EnhanceEntity> results=populateEnhanceEntities(m,relationNames,client,query);
    return results != null && !results.isEmpty() ? results.get(0) : null;
  }
 else {
    Object o;
    try {
      o=client.find(m.getEntityClazz(),primaryKey,null);
    }
 catch (    Exception e) {
      throw new PersistenceException(e.getMessage());
    }
    return o != null ? new EnhanceEntity(o,getId(o,m),null) : null;
  }
}",0.914985590778098
177008,"/** 
 * Populate enhance entities.
 * @param m the m
 * @param relationNames the relation names
 * @param client the client
 * @param sqlQuery the sql query
 * @return the list
 */
private List<EnhanceEntity> populateEnhanceEntities(EntityMetadata m,List<String> relationNames,Client client,String sqlQuery){
  List<EnhanceEntity> ls=null;
  List result=((HibernateClient)client).find(sqlQuery,relationNames,m.getEntityClazz());
  if (!result.isEmpty()) {
    ls=new ArrayList<EnhanceEntity>(result.size());
    for (    Object o : result) {
      Class clazz=m.getEntityClazz();
      if (!o.getClass().isAssignableFrom(m.getEntityClazz())) {
        o=((Object[])o)[0];
      }
      EnhanceEntity e=new EnhanceEntity(o,getId(o,m),populateRelations(relationNames,o));
      ls.add(e);
    }
  }
  return ls;
}","/** 
 * Populate enhance entities.
 * @param m the m
 * @param relationNames the relation names
 * @param client the client
 * @param sqlQuery the sql query
 * @return the list
 */
private List<EnhanceEntity> populateEnhanceEntities(EntityMetadata m,List<String> relationNames,Client client,String sqlQuery){
  List<EnhanceEntity> ls=null;
  List result=((HibernateClient)client).find(sqlQuery,relationNames,m.getEntityClazz());
  try {
    if (!result.isEmpty()) {
      ls=new ArrayList<EnhanceEntity>(result.size());
      for (      Object o : result) {
        Class clazz=m.getEntityClazz();
        Object entity=clazz.newInstance();
        if (!o.getClass().isAssignableFrom(clazz)) {
          entity=((Object[])o)[0];
        }
        EnhanceEntity e=new EnhanceEntity(entity,getId(entity,m),populateRelations(relationNames,(Object[])o));
        ls.add(e);
      }
    }
  }
 catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  return ls;
}",0.8136511375947996
177009,"/** 
 * Populate relations.
 * @param relations the relations
 * @param o the o
 * @return the map
 */
private Map<String,Object> populateRelations(List<String> relations,Object... o){
  Map<String,Object> relationVal=new HashMap<String,Object>(relations.size());
  int counter=1;
  for (  String r : relations) {
    relationVal.put(r,o[counter++]);
  }
  return relationVal;
}","/** 
 * Populate relations.
 * @param relations the relations
 * @param o the o
 * @return the map
 */
private Map<String,Object> populateRelations(List<String> relations,Object[] o){
  Map<String,Object> relationVal=new HashMap<String,Object>(relations.size());
  int counter=1;
  for (  String r : relations) {
    relationVal.put(r,o[counter++]);
  }
  return relationVal;
}",0.9933774834437086
177010,"@Override public List<EnhanceEntity> populateRelation(EntityMetadata m,List<String> relationNames,boolean isParent,Client client){
  List<EnhanceEntity> ls=null;
  if (!isParent) {
    String sqlQuery=null;
    if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
      sqlQuery=getSqlQueryFromJPA(m,relationNames,null);
    }
 else {
      Set<String> rSet=fetchDataFromLucene(client);
      sqlQuery=getSqlQueryFromJPA(m,relationNames,rSet);
    }
    ls=populateEnhanceEntities(m,relationNames,client,sqlQuery);
  }
 else {
    if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
      try {
        List entities=((HibernateClient)client).find(jpaQuery,new ArrayList<String>(),m.getEntityClazz());
        ls=new ArrayList<EnhanceEntity>(entities.size());
        transform(m,ls,entities);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"" + e.getMessage());
        throw new QueryHandlerException(e.getMessage());
      }
    }
 else {
      onAssociationUsingLucene(m,client,ls);
    }
  }
  return ls;
}","@Override public List<EnhanceEntity> populateRelation(EntityMetadata m,List<String> relationNames,boolean isParent,Client client){
  List<EnhanceEntity> ls=null;
  if (!isParent) {
    String sqlQuery=null;
    if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
      sqlQuery=getSqlQueryFromJPA(m,relationNames,null);
    }
 else {
      Set<String> rSet=fetchDataFromLucene(client);
      if (rSet != null && !rSet.isEmpty()) {
        filter=""String_Node_Str"";
      }
      sqlQuery=getSqlQueryFromJPA(m,relationNames,rSet);
    }
    ls=populateEnhanceEntities(m,relationNames,client,sqlQuery);
  }
 else {
    if (MetadataUtils.useSecondryIndex(client.getPersistenceUnit())) {
      try {
        List entities=((HibernateClient)client).find(jpaQuery,new ArrayList<String>(),m.getEntityClazz());
        ls=new ArrayList<EnhanceEntity>(entities.size());
        transform(m,ls,entities);
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"" + e.getMessage());
        throw new QueryHandlerException(e.getMessage());
      }
    }
 else {
      onAssociationUsingLucene(m,client,ls);
    }
  }
  return ls;
}",0.9606868504292816
177011,"@Override public EnhanceEntity findById(String primaryKey,EntityMetadata m,List<String> relationNames,Client client){
  try {
    Object o=client.find(m.getEntityClazz(),primaryKey,relationNames);
    return new EnhanceEntity(o,getId(o,m),null);
  }
 catch (  Exception e) {
    throw new PersistenceException(""String_Node_Str"" + e.getMessage());
  }
}","@Override public EnhanceEntity findById(String primaryKey,EntityMetadata m,List<String> relationNames,Client client){
  try {
    Object o=client.find(m.getEntityClazz(),primaryKey,relationNames);
    return (EnhanceEntity)o;
  }
 catch (  Exception e) {
    throw new PersistenceException(""String_Node_Str"" + e.getMessage());
  }
}",0.9619883040935672
177012,"private Object populateEntityFromHbaseData(Object entity,HBaseData hbaseData,EntityMetadata m,String rowKey,List<String> relationNames){
  try {
    PropertyAccessorHelper.setId(entity,m,rowKey);
    List<KeyValue> hbaseValues=hbaseData.getColumns();
    Map<String,Object> relations=new HashMap<String,Object>();
    List<Column> columns=m.getColumnsAsList();
    for (    Column column : columns) {
      Field columnField=column.getField();
      String columnName=column.getName();
      for (      KeyValue colData : hbaseValues) {
        String hbaseColumn=Bytes.toString(colData.getColumn());
        String colName=getColumnName(hbaseColumn);
        if (hbaseColumn != null && hbaseColumn.startsWith(columnName)) {
          byte[] hbaseColumnValue=colData.getValue();
          PropertyAccessorHelper.set(entity,columnField,hbaseColumnValue);
          break;
        }
 else         if (relationNames != null && relationNames.contains(getColumnName(colName))) {
          relations.put(colName,Bytes.toString(colData.getValue()));
        }
      }
    }
    List<EmbeddedColumn> columnFamilies=m.getEmbeddedColumnsAsList();
    for (    EmbeddedColumn columnFamily : columnFamilies) {
      Field columnFamilyFieldInEntity=columnFamily.getField();
      Class<?> columnFamilyClass=columnFamilyFieldInEntity.getType();
      Map<String,Field> columnNameToFieldMap=MetadataUtils.createColumnsFieldMap(m,columnFamily);
      if (Collection.class.isAssignableFrom(columnFamilyClass)) {
        Field embeddedCollectionField=columnFamily.getField();
        Object[] embeddedObjectArr=new Object[hbaseValues.size()];
        Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
        int prevCFNameCounter=0;
        for (        KeyValue colData : hbaseValues) {
          String cfInHbase=Bytes.toString(colData.getFamily());
          if (!cfInHbase.startsWith(columnFamily.getName())) {
            if (relationNames != null && relationNames.contains(cfInHbase)) {
              relations.put(cfInHbase,Bytes.toString(colData.getValue()));
            }
            continue;
          }
          String cfNamePostfix=MetadataUtils.getEmbeddedCollectionPostfix(cfInHbase);
          int cfNameCounter=Integer.parseInt(cfNamePostfix);
          if (cfNameCounter != prevCFNameCounter) {
            prevCFNameCounter=cfNameCounter;
            embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          }
          setHBaseDataIntoObject(colData,columnFamilyFieldInEntity,columnNameToFieldMap,embeddedObject);
          embeddedObjectArr[cfNameCounter]=embeddedObject;
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(rowKey,embeddedObject,cfInHbase);
        }
        Collection embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
        embeddedCollection.addAll(Arrays.asList(embeddedObjectArr));
        embeddedCollection.removeAll(Collections.singletonList(null));
        embeddedObjectArr=null;
        if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
          PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
        }
      }
 else {
        Object columnFamilyObj=columnFamilyClass.newInstance();
        for (        KeyValue colData : hbaseValues) {
          String cfInHbase=Bytes.toString(colData.getFamily());
          if (!cfInHbase.equals(columnFamily.getName())) {
            if (relationNames != null && relationNames.contains(cfInHbase)) {
              relations.put(cfInHbase,Bytes.toString(colData.getValue()));
            }
            continue;
          }
          String colName=Bytes.toString(colData.getQualifier());
          byte[] columnValue=colData.getValue();
          Field columnField=columnNameToFieldMap.get(colName);
          if (columnField != null) {
            if (columnFamilyFieldInEntity.isAnnotationPresent(Embedded.class) || columnFamilyFieldInEntity.isAnnotationPresent(ElementCollection.class)) {
              PropertyAccessorHelper.set(columnFamilyObj,columnField,columnValue);
            }
 else {
              columnFamilyObj=Bytes.toString(columnValue);
            }
          }
        }
        PropertyAccessorHelper.set(entity,columnFamilyFieldInEntity,columnFamilyObj);
      }
    }
    if (!relations.isEmpty()) {
      return new EnhanceEntity(entity,rowKey,relations);
    }
    return entity;
  }
 catch (  PropertyAccessException e1) {
    throw new RuntimeException(e1.getMessage());
  }
catch (  InstantiationException e1) {
    throw new RuntimeException(e1.getMessage());
  }
catch (  IllegalAccessException e1) {
    throw new RuntimeException(e1.getMessage());
  }
}","private Object populateEntityFromHbaseData(Object entity,HBaseData hbaseData,EntityMetadata m,String rowKey,List<String> relationNames){
  try {
    PropertyAccessorHelper.setId(entity,m,rowKey);
    List<KeyValue> hbaseValues=hbaseData.getColumns();
    Map<String,Object> relations=new HashMap<String,Object>();
    List<Column> columns=m.getColumnsAsList();
    for (    Column column : columns) {
      Field columnField=column.getField();
      String columnName=column.getName();
      for (      KeyValue colData : hbaseValues) {
        String hbaseColumn=Bytes.toString(colData.getColumn());
        String colName=getColumnName(hbaseColumn);
        if (hbaseColumn != null && hbaseColumn.startsWith(columnName)) {
          byte[] hbaseColumnValue=colData.getValue();
          PropertyAccessorHelper.set(entity,columnField,hbaseColumnValue);
          break;
        }
 else         if (relationNames != null && relationNames.contains(getColumnName(colName))) {
          relations.put(colName,Bytes.toString(colData.getValue()));
        }
      }
    }
    List<EmbeddedColumn> columnFamilies=m.getEmbeddedColumnsAsList();
    for (    EmbeddedColumn columnFamily : columnFamilies) {
      Field columnFamilyFieldInEntity=columnFamily.getField();
      Class<?> columnFamilyClass=columnFamilyFieldInEntity.getType();
      Map<String,Field> columnNameToFieldMap=MetadataUtils.createColumnsFieldMap(m,columnFamily);
      if (Collection.class.isAssignableFrom(columnFamilyClass)) {
        Field embeddedCollectionField=columnFamily.getField();
        Object[] embeddedObjectArr=new Object[hbaseValues.size()];
        Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
        int prevCFNameCounter=0;
        for (        KeyValue colData : hbaseValues) {
          String cfInHbase=Bytes.toString(colData.getFamily());
          if (!cfInHbase.startsWith(columnFamily.getName())) {
            if (relationNames != null && relationNames.contains(cfInHbase)) {
              relations.put(cfInHbase,Bytes.toString(colData.getValue()));
            }
            continue;
          }
          String cfNamePostfix=MetadataUtils.getEmbeddedCollectionPostfix(cfInHbase);
          int cfNameCounter=Integer.parseInt(cfNamePostfix);
          if (cfNameCounter != prevCFNameCounter) {
            prevCFNameCounter=cfNameCounter;
            embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          }
          setHBaseDataIntoObject(colData,columnFamilyFieldInEntity,columnNameToFieldMap,embeddedObject);
          embeddedObjectArr[cfNameCounter]=embeddedObject;
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(rowKey,embeddedObject,cfInHbase);
        }
        Collection embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
        embeddedCollection.addAll(Arrays.asList(embeddedObjectArr));
        embeddedCollection.removeAll(Collections.singletonList(null));
        embeddedObjectArr=null;
        if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
          PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
        }
      }
 else {
        Object columnFamilyObj=columnFamilyClass.newInstance();
        for (        KeyValue colData : hbaseValues) {
          String cfInHbase=Bytes.toString(colData.getFamily());
          if (!cfInHbase.equals(columnFamily.getName())) {
            if (relationNames != null && relationNames.contains(cfInHbase)) {
              relations.put(cfInHbase,Bytes.toString(colData.getValue()));
            }
            continue;
          }
          String colName=Bytes.toString(colData.getQualifier());
          byte[] columnValue=colData.getValue();
          Field columnField=columnNameToFieldMap.get(colName);
          if (columnField != null) {
            if (columnFamilyFieldInEntity.isAnnotationPresent(Embedded.class) || columnFamilyFieldInEntity.isAnnotationPresent(ElementCollection.class)) {
              PropertyAccessorHelper.set(columnFamilyObj,columnField,columnValue);
            }
 else {
              columnFamilyObj=Bytes.toString(columnValue);
            }
          }
        }
        PropertyAccessorHelper.set(entity,columnFamilyFieldInEntity,columnFamilyObj);
      }
    }
    if (!relations.isEmpty()) {
      return new EnhanceEntity(entity,rowKey,relations);
    }
 else {
      return new EnhanceEntity(entity,rowKey,null);
    }
  }
 catch (  PropertyAccessException e1) {
    throw new RuntimeException(e1.getMessage());
  }
catch (  InstantiationException e1) {
    throw new RuntimeException(e1.getMessage());
  }
catch (  IllegalAccessException e1) {
    throw new RuntimeException(e1.getMessage());
  }
}",0.9915528209406612
177013,"/** 
 * @param entityMetadata
 * @param id
 * @throws Exception
 * @throws PropertyAccessException
 */
private void onPersist(EntityMetadata entityMetadata,Object entity,String id,List<RelationHolder> relations) throws Exception, PropertyAccessException {
  String dbName=entityMetadata.getSchema();
  String documentName=entityMetadata.getTableName();
  log.debug(""String_Node_Str"" + dbName + ""String_Node_Str""+ documentName+ ""String_Node_Str""+ id);
  DBCollection dbCollection=mongoDb.getCollection(documentName);
  BasicDBObject document=new MongoDBDataHandler(this,getPersistenceUnit()).getDocumentFromEntity(entityMetadata,entity,relations);
  dbCollection.insert(document);
}","/** 
 * @param entityMetadata
 * @param id
 * @throws Exception
 * @throws PropertyAccessException
 */
private void onPersist(EntityMetadata entityMetadata,Object entity,String id,List<RelationHolder> relations) throws Exception, PropertyAccessException {
  String dbName=entityMetadata.getSchema();
  String documentName=entityMetadata.getTableName();
  log.debug(""String_Node_Str"" + dbName + ""String_Node_Str""+ documentName+ ""String_Node_Str""+ id);
  DBCollection dbCollection=mongoDb.getCollection(documentName);
  BasicDBObject document=new MongoDBDataHandler(this,getPersistenceUnit()).getDocumentFromEntity(entityMetadata,entity,relations);
  dbCollection.save(document);
}",0.9926470588235294
177014,"/** 
 * Removes the.
 * @param e the e
 */
public void remove(Object e){
  try {
    EntityMetadata metadata=getMetadata(e.getClass());
    getEventDispatcher().fireEventListeners(metadata,e,PreRemove.class);
    EntityInterceptor interceptor=new EntityInterceptor();
    List<EntitySaveGraph> objectGraphs=interceptor.handleRelation(e,metadata);
    for (    EntitySaveGraph objectGraph : objectGraphs) {
      removeGraph(objectGraph);
    }
    getEventDispatcher().fireEventListeners(metadata,e,PostPersist.class);
    log.debug(""String_Node_Str"" + e.getClass());
  }
 catch (  Exception exp) {
    throw new PersistenceException(exp);
  }
}","/** 
 * Removes the.
 * @param e the e
 */
public void remove(Object e){
  try {
    EntityMetadata metadata=getMetadata(e.getClass());
    getEventDispatcher().fireEventListeners(metadata,e,PreRemove.class);
    EntityInterceptor interceptor=new EntityInterceptor();
    List<EntitySaveGraph> objectGraphs=interceptor.handleRelation(e,metadata);
    for (    EntitySaveGraph objectGraph : objectGraphs) {
      removeGraph(objectGraph);
    }
    getEventDispatcher().fireEventListeners(metadata,e,PostPersist.class);
    logger.debug(""String_Node_Str"" + e.getClass());
  }
 catch (  Exception exp) {
    throw new PersistenceException(exp);
  }
}",0.9976798143851509
177015,"/** 
 * Find.
 * @param < E > the element type
 * @param entityClass the entity class
 * @param primaryKey the primary key
 * @return the e
 */
public <E>E find(Class<E> entityClass,Object primaryKey){
  try {
    E e=getSession().lookup(entityClass,primaryKey);
    isRelationViaJoinTable=false;
    if (null != e) {
      log.debug(entityClass.getName() + ""String_Node_Str"" + primaryKey+ ""String_Node_Str"");
      return e;
    }
    EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass,getPersistenceUnits());
    Client client=getClient(entityMetadata);
    List<EntitySaveGraph> objectGraphs=getGraph(entityMetadata.getEntityClazz().newInstance(),entityMetadata);
    Map<Boolean,List<String>> relations=getRelations(objectGraphs,entityMetadata.getEntityClazz());
    EntityReader reader=getReader(client);
    List<String> relationNames=relations.values().iterator().next();
    String rowKey=primaryKey + ""String_Node_Str"";
    EnhanceEntity enhanceEntity=reader.findById(rowKey,entityMetadata,relationNames,client);
    Map<Object,Object> relationalValues=new HashMap<Object,Object>();
    E entity=(E)enhanceEntity.getEntity();
    if (relationNames.isEmpty() && !entityMetadata.isRelationViaJoinTable()) {
      return entity;
    }
 else {
      entity=(E)reader.computeGraph(enhanceEntity,objectGraphs,relationalValues,client,entityMetadata,this);
    }
    boolean isCacheableToL2=entityMetadata.isCacheable();
    getSession().store(primaryKey,entity,isCacheableToL2);
    return entity;
  }
 catch (  Exception exception) {
    exception.printStackTrace();
    throw new PersistenceException(exception);
  }
}","/** 
 * Find.
 * @param < E > the element type
 * @param entityClass the entity class
 * @param primaryKey the primary key
 * @return the e
 */
public <E>E find(Class<E> entityClass,Object primaryKey){
  try {
    E e=getSession().lookup(entityClass,primaryKey);
    isRelationViaJoinTable=false;
    if (null != e) {
      logger.debug(entityClass.getName() + ""String_Node_Str"" + primaryKey+ ""String_Node_Str"");
      return e;
    }
    EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass,getPersistenceUnits());
    Client client=getClient(entityMetadata);
    List<EntitySaveGraph> objectGraphs=getGraph(entityMetadata.getEntityClazz().newInstance(),entityMetadata);
    Map<Boolean,List<String>> relations=getRelations(objectGraphs,entityMetadata.getEntityClazz());
    EntityReader reader=getReader(client);
    List<String> relationNames=relations.values().iterator().next();
    String rowKey=primaryKey + ""String_Node_Str"";
    EnhanceEntity enhanceEntity=reader.findById(rowKey,entityMetadata,relationNames,client);
    Map<Object,Object> relationalValues=new HashMap<Object,Object>();
    E entity=(E)enhanceEntity.getEntity();
    if (relationNames.isEmpty() && !entityMetadata.isRelationViaJoinTable()) {
      return entity;
    }
 else {
      entity=(E)reader.computeGraph(enhanceEntity,objectGraphs,relationalValues,client,entityMetadata,this);
    }
    boolean isCacheableToL2=entityMetadata.isCacheable();
    getSession().store(primaryKey,entity,isCacheableToL2);
    return entity;
  }
 catch (  Exception exception) {
    exception.printStackTrace();
    throw new PersistenceException(exception);
  }
}",0.9990939293264874
177016,"/** 
 * Merge.
 * @param < E > the element type
 * @param e the e
 * @return the e
 */
public <E>E merge(E e){
  try {
    List<EnhancedEntity> reachableEntities=EntityResolver.resolve(e,CascadeType.MERGE,getPersistenceUnits());
    for (    EnhancedEntity o : reachableEntities) {
      log.debug(""String_Node_Str"" + o);
      EntityMetadata m=KunderaMetadataManager.getEntityMetadata(o.getEntity().getClass(),getPersistenceUnits());
      getEventDispatcher().fireEventListeners(m,o,PreUpdate.class);
      persist(o.getEntity());
      getEventDispatcher().fireEventListeners(m,o,PostUpdate.class);
    }
  }
 catch (  Exception exp) {
    throw new PersistenceException(exp);
  }
  return e;
}","/** 
 * Merge.
 * @param < E > the element type
 * @param e the e
 * @return the e
 */
public <E>E merge(E e){
  try {
    List<EnhancedEntity> reachableEntities=EntityResolver.resolve(e,CascadeType.MERGE,getPersistenceUnits());
    for (    EnhancedEntity o : reachableEntities) {
      logger.debug(""String_Node_Str"" + o);
      EntityMetadata m=KunderaMetadataManager.getEntityMetadata(o.getEntity().getClass(),getPersistenceUnits());
      getEventDispatcher().fireEventListeners(m,o,PreUpdate.class);
      persist(o.getEntity());
      getEventDispatcher().fireEventListeners(m,o,PostUpdate.class);
    }
  }
 catch (  Exception exp) {
    throw new PersistenceException(exp);
  }
  return e;
}",0.9978525411596276
177017,"/** 
 * Persist.
 * @param e the e
 */
public void persist(Object e){
  try {
    EntityMetadata metadata=getMetadata(e.getClass());
    getEventDispatcher().fireEventListeners(metadata,e,PrePersist.class);
    List<EntitySaveGraph> objectGraphs=getGraph(e,metadata);
    for (    EntitySaveGraph objectGraph : objectGraphs) {
      saveGraph(objectGraph);
    }
    getEventDispatcher().fireEventListeners(metadata,e,PostPersist.class);
    log.debug(""String_Node_Str"" + e.getClass());
  }
 catch (  Exception exp) {
    exp.printStackTrace();
    throw new PersistenceException(exp);
  }
}","/** 
 * Persist.
 * @param e the e
 */
public void persist(Object e){
  try {
    EntityMetadata metadata=getMetadata(e.getClass());
    getEventDispatcher().fireEventListeners(metadata,e,PrePersist.class);
    List<EntitySaveGraph> objectGraphs=getGraph(e,metadata);
    for (    EntitySaveGraph objectGraph : objectGraphs) {
      saveGraph(objectGraph);
    }
    getEventDispatcher().fireEventListeners(metadata,e,PostPersist.class);
    logger.debug(""String_Node_Str"" + e.getClass());
  }
 catch (  Exception exp) {
    exp.printStackTrace();
    throw new PersistenceException(exp);
  }
}",0.9974683544303796
177018,"/** 
 * Persist one child entity into persistence store. Also checks whether this child entity has further relationships. If yes, it generates a graph for them and saves them recursively up to ""n"" level.
 * @param child the child Entity Object.
 * @param objectGraph the object graph to which this child entity belongs.
 */
private void persistOneChildEntity(Object child,EntitySaveGraph objectGraph){
  if (getSession().lookup(child.getClass(),objectGraph.getChildId()) == null) {
    EntityMetadata metadata=getMetadata(objectGraph.getChildClass());
    boolean imChildProcessed=false;
    List<Relation> relations=metadata.getRelations();
    List<EntitySaveGraph> objectGraphs=getGraph(child,metadata);
    if (!((relations == null || relations.isEmpty()) || objectGraph.isIsswapped())) {
      for (      EntitySaveGraph graph : objectGraphs) {
        if (!graph.equals(objectGraph)) {
          graph.setRevFKeyName(objectGraph.getfKeyName());
          graph.setRevFKeyValue(objectGraph.getParentId());
          graph.setRevParentClass(objectGraph.getParentClass());
          imChildProcessed=true;
          saveGraph(graph);
        }
      }
    }
    if (!imChildProcessed) {
      saveImmediateChild(child,objectGraph,metadata);
    }
  }
}","/** 
 * Persist one child entity into persistence store. Also checks whether this child entity has further relationships. If yes, it generates a graph for them and saves them recursively up to ""n"" level.
 * @param child the child Entity Object.
 * @param objectGraph the object graph to which this child entity belongs.
 */
private void persistOneChildEntity(Object child,EntitySaveGraph objectGraph){
  EntityMetadata metadata=getMetadata(objectGraph.getChildClass());
  String childId=null;
  try {
    childId=PropertyAccessorHelper.getId(child,metadata);
  }
 catch (  PropertyAccessException e) {
    logger.error(""String_Node_Str"" + child + ""String_Node_Str"");
    return;
  }
  if (getSession().lookup(child.getClass(),childId) == null) {
    boolean imChildProcessed=false;
    List<Relation> relations=metadata.getRelations();
    List<EntitySaveGraph> objectGraphs=getGraph(child,metadata);
    if (!((relations == null || relations.isEmpty()) || objectGraph.isIsswapped())) {
      for (      EntitySaveGraph graph : objectGraphs) {
        if (!graph.equals(objectGraph)) {
          graph.setRevFKeyName(objectGraph.getfKeyName());
          graph.setRevFKeyValue(objectGraph.getParentId());
          graph.setRevParentClass(objectGraph.getParentClass());
          imChildProcessed=true;
          saveGraph(graph);
        }
      }
    }
    if (!imChildProcessed) {
      saveImmediateChild(child,objectGraph,metadata);
    }
  }
}",0.8631656804733728
177019,"/** 
 * Gets the string.
 * @param from the from
 * @param field the field
 * @return the string
 * @throws PropertyAccessException the property access exception
 */
public static String getString(Object from,Field field) throws PropertyAccessException {
  PropertyAccessor<?> accessor=PropertyAccessorFactory.getPropertyAccessor(field);
  Object object=getObject(from,field);
  return object != null ? accessor.toString() : null;
}","/** 
 * Gets the string.
 * @param from the from
 * @param field the field
 * @return the string
 * @throws PropertyAccessException the property access exception
 */
public static String getString(Object from,Field field) throws PropertyAccessException {
  PropertyAccessor<?> accessor=PropertyAccessorFactory.getPropertyAccessor(field);
  Object object=getObject(from,field);
  return object != null ? accessor.toString(object) : null;
}",0.993103448275862
177020,"/** 
 * Prepare document.
 * @param metadata the metadata
 * @param object the object
 * @param embeddedColumnName the super column name
 * @return the document
 */
protected Document prepareDocumentForSuperColumn(EntityMetadata metadata,Object object,String embeddedColumnName,String parentId,Class<?> clazz){
  Document currentDoc;
  currentDoc=new Document();
  addEntityClassToDocument(metadata,object,currentDoc);
  addSuperColumnNameToDocument(embeddedColumnName,currentDoc);
  indexParentKey(parentId,currentDoc,clazz);
  return currentDoc;
}","/** 
 * Prepare document.
 * @param metadata the metadata
 * @param object the object
 * @param embeddedColumnName the super column name
 * @return the document
 */
protected Document prepareDocumentForSuperColumn(EntityMetadata metadata,Object object,String embeddedColumnName,String parentId,Class<?> clazz){
  Document currentDoc;
  currentDoc=new Document();
  addEntityClassToDocument(metadata,object,currentDoc);
  addSuperColumnNameToDocument(embeddedColumnName,currentDoc);
  return currentDoc;
}",0.9249762583095916
177021,"/** 
 * From thrift row.
 * @param < E > the element type
 * @param clazz the clazz
 * @param m the m
 * @param tr the cr
 * @return the e
 * @throws Exception the exception
 */
public <E>E fromThriftRow(Class<E> clazz,EntityMetadata m,DataRow<SuperColumn> tr) throws Exception {
  E e=clazz.newInstance();
  PropertyAccessorHelper.setId(e,m,tr.getId());
  Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
  Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
  MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
  Collection embeddedCollection=null;
  Field embeddedCollectionField=null;
  for (  SuperColumn sc : tr.getColumns()) {
    String scName=PropertyAccessorFactory.STRING.fromBytes(sc.getName());
    String scNamePrefix=null;
    if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
      scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
      embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
      embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
      Object embeddedObject=populateEmbeddedObject(sc,m);
      embeddedCollection.add(embeddedObject);
      PropertyAccessorHelper.set(e,embeddedCollectionField,embeddedCollection);
    }
 else {
      boolean intoRelations=false;
      if (scName.equals(Constants.FOREIGN_KEY_EMBEDDED_COLUMN_NAME)) {
        intoRelations=true;
      }
      for (      Column column : sc.getColumns()) {
        String name=PropertyAccessorFactory.STRING.fromBytes(column.getName());
        byte[] value=column.getValue();
        if (value == null) {
          continue;
        }
        if (intoRelations) {
          Relation relation=m.getRelation(name);
          String foreignKeys=PropertyAccessorFactory.STRING.fromBytes(value);
          Set<String> keys=MetadataUtils.deserializeKeys(foreignKeys);
        }
 else {
          Field field=columnNameToFieldMap.get(name);
          Object embeddedObject=PropertyAccessorHelper.getObject(e,scName);
          PropertyAccessorHelper.set(embeddedObject,field,value);
        }
      }
    }
  }
  return e;
}","/** 
 * From thrift row.
 * @param < E > the element type
 * @param clazz the clazz
 * @param m the m
 * @param tr the cr
 * @return the e
 * @throws Exception the exception
 */
public <E>E fromThriftRow(Class<E> clazz,EntityMetadata m,DataRow<SuperColumn> tr) throws Exception {
  E e=null;
  Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
  Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
  MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
  Collection embeddedCollection=null;
  Field embeddedCollectionField=null;
  for (  SuperColumn sc : tr.getColumns()) {
    if (e == null) {
      e=clazz.newInstance();
      PropertyAccessorHelper.setId(e,m,tr.getId());
    }
    String scName=PropertyAccessorFactory.STRING.fromBytes(sc.getName());
    String scNamePrefix=null;
    if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
      scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
      embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
      embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
      Object embeddedObject=populateEmbeddedObject(sc,m);
      embeddedCollection.add(embeddedObject);
      PropertyAccessorHelper.set(e,embeddedCollectionField,embeddedCollection);
    }
 else {
      boolean intoRelations=false;
      if (scName.equals(Constants.FOREIGN_KEY_EMBEDDED_COLUMN_NAME)) {
        intoRelations=true;
      }
      for (      Column column : sc.getColumns()) {
        String name=PropertyAccessorFactory.STRING.fromBytes(column.getName());
        byte[] value=column.getValue();
        if (value == null) {
          continue;
        }
        if (intoRelations) {
          Relation relation=m.getRelation(name);
          String foreignKeys=PropertyAccessorFactory.STRING.fromBytes(value);
          Set<String> keys=MetadataUtils.deserializeKeys(foreignKeys);
        }
 else {
          Field field=columnNameToFieldMap.get(name);
          Object embeddedObject=PropertyAccessorHelper.getObject(e,scName);
          PropertyAccessorHelper.set(embeddedObject,field,value);
        }
      }
    }
  }
  return e;
}",0.959584556333258
177022,"/** 
 * Fetches data held in Thrift row columns and populates to Entity objects
 * @param < E > the element type
 * @param em the em
 * @param clazz the clazz
 * @param m the m
 * @param thriftRow the cr
 * @return the e
 * @throws Exception the exception
 */
public Object fromColumnThriftRow(Class<?> clazz,EntityMetadata m,ThriftRow thriftRow,List<String> relationNames,boolean isWrapperReq) throws Exception {
  Object entity=clazz.newInstance();
  Map<String,Object> relations=new HashMap<String,Object>();
  PropertyAccessorHelper.setId(entity,m,thriftRow.getId());
  for (  Column c : thriftRow.getColumns()) {
    String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(c.getName());
    byte[] thriftColumnValue=c.getValue();
    if (null == thriftColumnValue) {
      continue;
    }
    com.impetus.kundera.metadata.model.Column column=m.getColumn(thriftColumnName);
    if (column != null) {
      try {
        PropertyAccessorHelper.set(entity,column.getField(),thriftColumnValue);
      }
 catch (      PropertyAccessException pae) {
        log.warn(pae.getMessage());
      }
    }
 else {
      if (relationNames != null && !relationNames.isEmpty() && relationNames.contains(thriftColumnName)) {
        String value=PropertyAccessorFactory.STRING.fromBytes(thriftColumnValue);
        relations.put(thriftColumnName,value);
      }
    }
  }
  return isWrapperReq ? new EnhanceEntity(entity,thriftRow.getId(),relations) : entity;
}","/** 
 * Fetches data held in Thrift row columns and populates to Entity objects
 * @param < E > the element type
 * @param em the em
 * @param clazz the clazz
 * @param m the m
 * @param thriftRow the cr
 * @return the e
 * @throws Exception the exception
 */
public Object fromColumnThriftRow(Class<?> clazz,EntityMetadata m,ThriftRow thriftRow,List<String> relationNames,boolean isWrapperReq) throws Exception {
  Object entity=null;
  Map<String,Object> relations=new HashMap<String,Object>();
  for (  Column c : thriftRow.getColumns()) {
    if (entity == null) {
      entity=clazz.newInstance();
      PropertyAccessorHelper.setId(entity,m,thriftRow.getId());
    }
    String thriftColumnName=PropertyAccessorFactory.STRING.fromBytes(c.getName());
    byte[] thriftColumnValue=c.getValue();
    if (null == thriftColumnValue) {
      continue;
    }
    com.impetus.kundera.metadata.model.Column column=m.getColumn(thriftColumnName);
    if (column != null) {
      try {
        PropertyAccessorHelper.set(entity,column.getField(),thriftColumnValue);
      }
 catch (      PropertyAccessException pae) {
        log.warn(pae.getMessage());
      }
    }
 else {
      if (relationNames != null && !relationNames.isEmpty() && relationNames.contains(thriftColumnName)) {
        String value=PropertyAccessorFactory.STRING.fromBytes(thriftColumnValue);
        relations.put(thriftColumnName,value);
      }
    }
  }
  return isWrapperReq ? new EnhanceEntity(entity,thriftRow.getId(),relations) : entity;
}",0.9397914564413052
177023,"/** 
 * Fetches data held in Thrift row super columns and populates to Entity objects
 */
public Object fromSuperColumnThriftRow(Class clazz,EntityMetadata m,ThriftRow tr,List<String> relationNames,boolean isWrapReq) throws Exception {
  Object entity=clazz.newInstance();
  Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
  PropertyAccessorHelper.setId(entity,m,tr.getId());
  Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
  Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
  MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
  Collection embeddedCollection=null;
  Field embeddedCollectionField=null;
  Map<String,Object> relations=new HashMap<String,Object>();
  for (  SuperColumn sc : tr.getSuperColumns()) {
    String scName=PropertyAccessorFactory.STRING.fromBytes(sc.getName());
    String scNamePrefix=null;
    if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
      scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
      embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
      if (embeddedCollection == null) {
        embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
      }
      Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
      for (      Column column : sc.getColumns()) {
        String name=PropertyAccessorFactory.STRING.fromBytes(column.getName());
        byte[] value=column.getValue();
        if (value == null) {
          continue;
        }
        Field columnField=columnNameToFieldMap.get(name);
        if (columnField != null) {
          PropertyAccessorHelper.set(embeddedObject,columnField,value);
        }
 else         if (relationNames != null && !relationNames.isEmpty() && relationNames.contains(name)) {
          String valueAsStr=PropertyAccessorFactory.STRING.fromBytes(value);
          relations.put(name,valueAsStr);
        }
      }
      embeddedCollection.add(embeddedObject);
      ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
    }
 else {
      Field superColumnField=superColumnNameToFieldMap.get(scName);
      Object superColumnObj=null;
      if (superColumnField != null || (relationNames != null && !relationNames.isEmpty() && relationNames.contains(scName))) {
        Class superColumnClass=superColumnField != null ? superColumnField.getType() : null;
        superColumnObj=superColumnClass != null ? superColumnClass.newInstance() : null;
        for (        Column column : sc.getColumns()) {
          String name=PropertyAccessorFactory.STRING.fromBytes(column.getName());
          byte[] value=column.getValue();
          Field columnField=columnNameToFieldMap.get(name);
          if (columnField != null) {
            try {
              PropertyAccessorHelper.set(superColumnObj,columnField,value);
            }
 catch (            PropertyAccessException e) {
              log.debug(e.getMessage() + ""String_Node_Str"");
              superColumnObj=Bytes.toUTF8(value);
            }
          }
 else {
            String valueAsStr=PropertyAccessorFactory.STRING.fromBytes(value);
            relations.put(name,valueAsStr);
          }
        }
      }
      if (superColumnField != null) {
        PropertyAccessorHelper.set(entity,superColumnField,superColumnObj);
      }
    }
  }
  if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
    PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
  }
  return isWrapReq ? new EnhanceEntity(entity,tr.getId(),relations) : entity;
}","/** 
 * Fetches data held in Thrift row super columns and populates to Entity objects
 */
public Object fromSuperColumnThriftRow(Class clazz,EntityMetadata m,ThriftRow tr,List<String> relationNames,boolean isWrapReq) throws Exception {
  Object entity=null;
  Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
  Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
  Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
  MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
  Collection embeddedCollection=null;
  Field embeddedCollectionField=null;
  Map<String,Object> relations=new HashMap<String,Object>();
  for (  SuperColumn sc : tr.getSuperColumns()) {
    if (entity == null) {
      entity=clazz.newInstance();
      PropertyAccessorHelper.setId(entity,m,tr.getId());
    }
    String scName=PropertyAccessorFactory.STRING.fromBytes(sc.getName());
    String scNamePrefix=null;
    if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
      scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
      embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
      if (embeddedCollection == null) {
        embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
      }
      Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
      for (      Column column : sc.getColumns()) {
        String name=PropertyAccessorFactory.STRING.fromBytes(column.getName());
        byte[] value=column.getValue();
        if (value == null) {
          continue;
        }
        Field columnField=columnNameToFieldMap.get(name);
        if (columnField != null) {
          PropertyAccessorHelper.set(embeddedObject,columnField,value);
        }
 else         if (relationNames != null && !relationNames.isEmpty() && relationNames.contains(name)) {
          String valueAsStr=PropertyAccessorFactory.STRING.fromBytes(value);
          relations.put(name,valueAsStr);
        }
      }
      embeddedCollection.add(embeddedObject);
      ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
    }
 else {
      Field superColumnField=superColumnNameToFieldMap.get(scName);
      Object superColumnObj=null;
      if (superColumnField != null || (relationNames != null && !relationNames.isEmpty() && relationNames.contains(scName))) {
        Class superColumnClass=superColumnField != null ? superColumnField.getType() : null;
        superColumnObj=superColumnClass != null ? superColumnClass.newInstance() : null;
        for (        Column column : sc.getColumns()) {
          String name=PropertyAccessorFactory.STRING.fromBytes(column.getName());
          byte[] value=column.getValue();
          Field columnField=columnNameToFieldMap.get(name);
          if (columnField != null) {
            try {
              PropertyAccessorHelper.set(superColumnObj,columnField,value);
            }
 catch (            PropertyAccessException e) {
              log.debug(e.getMessage() + ""String_Node_Str"");
              superColumnObj=Bytes.toUTF8(value);
            }
          }
 else {
            String valueAsStr=PropertyAccessorFactory.STRING.fromBytes(value);
            relations.put(name,valueAsStr);
          }
        }
      }
      if (superColumnField != null) {
        PropertyAccessorHelper.set(entity,superColumnField,superColumnObj);
      }
    }
  }
  if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
    PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
  }
  return isWrapReq ? new EnhanceEntity(entity,tr.getId(),relations) : entity;
}",0.8463275335369903
177024,"/** 
 * Method responsible for reading bacl entity and relations using secondary indexes(if it holds any relation), else retrieve row keys using lucene.
 * @param m entity meta data
 * @param relationNames relation names
 * @param isParent if entity is not holding any relation.
 * @param client client instance
 * @return list of wrapped enhance entities.
 */
@Override public List<EnhanceEntity> populateRelation(EntityMetadata m,List<String> relationNames,boolean isParent,Client client){
  List<EnhanceEntity> ls=null;
  if (!isParent) {
    if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
      ls=((PelopsClient)client).find(m,relationNames,this.conditions);
    }
 else {
      Set<String> rSet=fetchDataFromLucene(client);
      try {
        ls=(List<EnhanceEntity>)((PelopsClient)client).find(m.getEntityClazz(),relationNames,true,m,rSet.toArray(new String[]{}));
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"" + e.getMessage());
        throw new QueryHandlerException(e.getMessage());
      }
    }
  }
 else {
    if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
      ls=((PelopsClient)client).find(this.conditions,m,true,null);
    }
 else {
      onAssociationUsingLucene(m,client,ls);
    }
  }
  return ls;
}","/** 
 * Method responsible for reading bacl entity and relations using secondary indexes(if it holds any relation), else retrieve row keys using lucene.
 * @param m entity meta data
 * @param relationNames relation names
 * @param isParent if entity is not holding any relation.
 * @param client client instance
 * @return list of wrapped enhance entities.
 */
@Override public List<EnhanceEntity> populateRelation(EntityMetadata m,List<String> relationNames,boolean isParent,Client client){
  List<EnhanceEntity> ls=null;
  if (!isParent) {
    if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
      ls=((PelopsClient)client).find(m,relationNames,this.conditions);
    }
 else {
      Set<String> rSet=fetchDataFromLucene(client);
      try {
        ls=(List<EnhanceEntity>)((PelopsClient)client).find(m.getEntityClazz(),relationNames,true,m,rSet.toArray(new String[]{}));
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"" + e.getMessage());
        throw new QueryHandlerException(e.getMessage());
      }
    }
  }
 else {
    if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
      ls=((PelopsClient)client).find(this.conditions,m,true,null);
    }
 else {
      ls=onAssociationUsingLucene(m,client,ls);
    }
  }
  return ls;
}",0.9988285825849278
177025,"/** 
 * Compute graph.
 * @param e the e
 * @param graphs the graphs
 * @return the object
 * @throws Exception the exception
 */
public Object computeGraph(EnhanceEntity e,List<EntitySaveGraph> graphs,Map<Object,Object> collectionHolder,Client client,EntityMetadata m,PersistenceDelegator persistenceDelegeator) throws Exception {
  Client childClient=null;
  Class<?> childClazz=null;
  EntityMetadata childMetadata=null;
  for (  EntitySaveGraph g : graphs) {
    Relation relation=m.getRelation(g.getProperty().getName());
    if (relation.isRelatedViaJoinTable()) {
      computeJoinTableRelations(e,client,m,g,persistenceDelegeator,relation);
    }
 else {
      if (e.getEntity().getClass().equals(g.getChildClass())) {
        String relationName=g.getfKeyName();
        Object relationalValue=e.getRelations().get(relationName);
        childClazz=g.getParentClass();
        Field f=g.getProperty();
        if (!collectionHolder.containsKey(relationalValue)) {
          childMetadata=persistenceDelegeator.getMetadata(childClazz);
          childClient=persistenceDelegeator.getClient(childMetadata);
          Object child=childClient.find(childClazz,childMetadata,relationalValue.toString(),null);
          collectionHolder.put(relationalValue,child);
        }
        onBiDirection(e,client,g,m,collectionHolder.get(relationalValue),childMetadata,childClient);
        List<Object> collection=new ArrayList<Object>(1);
        collection.add(collectionHolder.get(relationalValue));
        PropertyAccessorHelper.set(e.getEntity(),f,PropertyAccessorHelper.isCollection(f.getType()) ? getFieldInstance(collection,f) : collection.get(0));
      }
 else {
        childClazz=g.getChildClass();
        childMetadata=persistenceDelegeator.getMetadata(childClazz);
        childClient=persistenceDelegeator.getClient(childMetadata);
        String relationName=g.getfKeyName();
        String relationalValue=e.getEntityId();
        Field f=g.getProperty();
        if (!collectionHolder.containsKey(relationalValue)) {
          List<Object> childs=null;
          if (MetadataUtils.useSecondryIndex(childMetadata.getPersistenceUnit())) {
            childs=childClient.find(relationName,relationalValue,childMetadata);
          }
 else {
            if (g.isSharedPrimaryKey()) {
              childs=new ArrayList();
              childs.add(childClient.find(childClazz,childMetadata,e.getEntityId(),null));
            }
 else {
              String query=getQuery(DocumentIndexer.PARENT_ID_CLASS,e.getEntity().getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,e.getEntityId());
              Map<String,String> results=childClient.getIndexManager().search(query);
              Set<String> rsSet=new HashSet<String>(results.values());
              childs=(List<Object>)childClient.find(childClazz,rsSet.toArray(new String[]{}));
            }
          }
          collectionHolder.put(relationalValue,childs);
          if (childs != null) {
            for (            Object child : childs) {
              onBiDirection(e,client,g,m,child,childMetadata,childClient);
            }
          }
        }
        onReflect(e.getEntity(),f,(List)collectionHolder.get(relationalValue));
      }
    }
  }
  return e.getEntity();
}","/** 
 * Compute graph.
 * @param e the e
 * @param graphs the graphs
 * @return the object
 * @throws Exception the exception
 */
public Object computeGraph(EnhanceEntity e,List<EntitySaveGraph> graphs,Map<Object,Object> collectionHolder,Client client,EntityMetadata m,PersistenceDelegator persistenceDelegeator) throws Exception {
  Client childClient=null;
  Class<?> childClazz=null;
  EntityMetadata childMetadata=null;
  for (  EntitySaveGraph g : graphs) {
    Relation relation=m.getRelation(g.getProperty().getName());
    if (relation.isRelatedViaJoinTable()) {
      computeJoinTableRelations(e,client,m,g,persistenceDelegeator,relation);
    }
 else {
      if (e.getEntity().getClass().equals(g.getChildClass())) {
        String relationName=g.getfKeyName();
        Object relationalValue=e.getRelations().get(relationName);
        childClazz=g.getParentClass();
        childMetadata=persistenceDelegeator.getMetadata(childClazz);
        Field f=g.getProperty();
        if (!collectionHolder.containsKey(relationalValue)) {
          childClient=persistenceDelegeator.getClient(childMetadata);
          Object child=persistenceDelegeator.find(childClazz,relationalValue.toString());
          collectionHolder.put(relationalValue,child);
        }
        onBiDirection(e,client,g,m,collectionHolder.get(relationalValue),childMetadata,childClient);
        List<Object> collection=new ArrayList<Object>(1);
        collection.add(collectionHolder.get(relationalValue));
        PropertyAccessorHelper.set(e.getEntity(),f,PropertyAccessorHelper.isCollection(f.getType()) ? getFieldInstance(collection,f) : collection.get(0));
      }
 else {
        childClazz=g.getChildClass();
        childMetadata=persistenceDelegeator.getMetadata(childClazz);
        childClient=persistenceDelegeator.getClient(childMetadata);
        String relationName=g.getfKeyName();
        String relationalValue=e.getEntityId();
        Field f=g.getProperty();
        if (!collectionHolder.containsKey(relationalValue)) {
          List<Object> childs=null;
          if (MetadataUtils.useSecondryIndex(childMetadata.getPersistenceUnit())) {
            childs=childClient.find(relationName,relationalValue,childMetadata);
          }
 else {
            if (g.isSharedPrimaryKey()) {
              childs=new ArrayList();
              childs.add(persistenceDelegeator.find(childClazz,relationalValue.toString()));
            }
 else {
              String query=getQuery(DocumentIndexer.PARENT_ID_CLASS,e.getEntity().getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,e.getEntityId());
              Map<String,String> results=childClient.getIndexManager().search(query);
              Set<String> rsSet=new HashSet<String>(results.values());
              childs=(List<Object>)persistenceDelegeator.find(childClazz,rsSet.toArray(new String[]{}));
            }
          }
          collectionHolder.put(relationalValue,childs);
          if (childs != null) {
            for (            Object child : childs) {
              onBiDirection(e,client,g,m,child,childMetadata,childClient);
            }
          }
        }
        onReflect(e.getEntity(),f,(List)collectionHolder.get(relationalValue));
      }
    }
  }
  return e.getEntity();
}",0.9519597376849168
177026,"protected void transform(EntityMetadata m,List<EnhanceEntity> ls,List resultList){
  for (  Object r : resultList) {
    EnhanceEntity e=new EnhanceEntity(r,getId(r,m),null);
    ls.add(e);
  }
}","protected List<EnhanceEntity> transform(EntityMetadata m,List<EnhanceEntity> ls,List resultList){
  if ((ls == null || ls.isEmpty()) && resultList != null && !resultList.isEmpty()) {
    ls=new ArrayList<EnhanceEntity>(resultList.size());
  }
  for (  Object r : resultList) {
    EnhanceEntity e=new EnhanceEntity(r,getId(r,m),null);
    ls.add(e);
  }
  return ls;
}",0.6785079928952042
177027,"protected void onAssociationUsingLucene(EntityMetadata m,Client client,List<EnhanceEntity> ls){
  Set<String> rSet=fetchDataFromLucene(client);
  try {
    List resultList=client.find(m.getEntityClazz(),rSet.toArray(new String[]{}));
    transform(m,ls,resultList);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new QueryHandlerException(e.getMessage());
  }
}","protected List<EnhanceEntity> onAssociationUsingLucene(EntityMetadata m,Client client,List<EnhanceEntity> ls){
  Set<String> rSet=fetchDataFromLucene(client);
  try {
    List resultList=client.find(m.getEntityClazz(),rSet.toArray(new String[]{}));
    return transform(m,ls,resultList);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new QueryHandlerException(e.getMessage());
  }
}",0.963855421686747
177028,"/** 
 * Find.
 * @param < E > the element type
 * @param entityClass the entity class
 * @param primaryKey the primary key
 * @return the e
 */
public <E>E find(Class<E> entityClass,Object primaryKey){
  try {
    E e=getSession().lookup(entityClass,primaryKey);
    isRelationViaJoinTable=false;
    if (null != e) {
      log.debug(entityClass.getName() + ""String_Node_Str"" + primaryKey+ ""String_Node_Str"");
      return e;
    }
    EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass,getPersistenceUnits());
    Client client=getClient(entityMetadata);
    List<EntitySaveGraph> objectGraphs=getGraph(entityMetadata.getEntityClazz().newInstance(),entityMetadata);
    Map<Boolean,List<String>> relations=getRelations(objectGraphs,entityMetadata.getEntityClazz());
    EntityReader reader=getReader(client);
    List<String> relationNames=relations.values().iterator().next();
    String rowKey=primaryKey + ""String_Node_Str"";
    EnhanceEntity enhanceEntity=reader.findById(rowKey,entityMetadata,relationNames,client);
    Map<Object,Object> relationalValues=new HashMap<Object,Object>();
    E entity=(E)enhanceEntity.getEntity();
    if (relationNames.isEmpty() && !entityMetadata.isRelationViaJoinTable()) {
      return entity;
    }
 else {
      entity=(E)reader.computeGraph(enhanceEntity,objectGraphs,relationalValues,client,entityMetadata,this);
    }
    boolean isCacheableToL2=entityMetadata.isCacheable();
    getSession().store(primaryKey,entity,isCacheableToL2);
    return entity;
  }
 catch (  Exception exception) {
    exception.printStackTrace();
    throw new PersistenceException(exception);
  }
}","/** 
 * Find.
 * @param < E > the element type
 * @param entityClass the entity class
 * @param primaryKey the primary key
 * @return the e
 */
public <E>E find(Class<E> entityClass,Object primaryKey){
  try {
    E e=getSession().lookup(entityClass,primaryKey);
    isRelationViaJoinTable=false;
    if (null != e) {
      log.debug(entityClass.getName() + ""String_Node_Str"" + primaryKey+ ""String_Node_Str"");
      return e;
    }
    EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass,getPersistenceUnits());
    Client client=getClient(entityMetadata);
    List<EntitySaveGraph> objectGraphs=getGraph(entityMetadata.getEntityClazz().newInstance(),entityMetadata);
    Map<Boolean,List<String>> relations=getRelations(objectGraphs,entityMetadata.getEntityClazz());
    EntityReader reader=getReader(client);
    List<String> relationNames=relations.values().iterator().next();
    String rowKey=primaryKey + ""String_Node_Str"";
    EnhanceEntity enhanceEntity=reader.findById(rowKey,entityMetadata,relationNames,client);
    Map<Object,Object> relationalValues=new HashMap<Object,Object>();
    if (enhanceEntity == null || enhanceEntity.getEntity() == null) {
      return null;
    }
    E entity=(E)enhanceEntity.getEntity();
    if (relationNames.isEmpty() && !entityMetadata.isRelationViaJoinTable()) {
      return entity;
    }
 else {
      entity=(E)reader.computeGraph(enhanceEntity,objectGraphs,relationalValues,client,entityMetadata,this);
    }
    boolean isCacheableToL2=entityMetadata.isCacheable();
    getSession().store(primaryKey,entity,isCacheableToL2);
    return entity;
  }
 catch (  Exception exception) {
    exception.printStackTrace();
    throw new PersistenceException(exception);
  }
}",0.9720834557743168
177029,"/** 
 * Gets the reader.
 * @param client the client
 * @return the reader
 */
private EntityReader getReader(Client client){
  return client.getReader();
}","/** 
 * Gets the reader.
 * @param client the client
 * @return the reader
 */
public EntityReader getReader(Client client){
  return client.getReader();
}",0.9710610932475884
177030,"/** 
 * Handle client.
 * @param child the child
 * @param objectGraph the object graph
 * @throws Exception the exception
 */
private void onClientDelete(Object child,EntitySaveGraph objectGraph) throws Exception {
  EntityMetadata metadata=getMetadata(objectGraph.getChildClass());
  String id=getId(child,metadata);
  objectGraph.setChildId(id);
  Client chClient=getClient(metadata);
  chClient.delete(child,id,metadata);
}","/** 
 * Handle client.
 * @param child the child
 * @param objectGraph the object graph
 * @throws Exception the exception
 */
private void onClientDelete(Object child,EntitySaveGraph objectGraph) throws Exception {
  EntityMetadata metadata=getMetadata(objectGraph.getChildClass());
  List<Relation> relations=metadata.getRelations();
  boolean imChildProcessed=false;
  List<EntitySaveGraph> objectGraphs=getGraph(child,metadata);
  if (!((relations == null || relations.isEmpty()) || objectGraph.isIsswapped())) {
    for (    EntitySaveGraph graph : objectGraphs) {
      if (!graph.equals(objectGraph)) {
        graph.setRevFKeyName(objectGraph.getfKeyName());
        graph.setRevFKeyValue(objectGraph.getParentId());
        graph.setRevParentClass(objectGraph.getParentClass());
        imChildProcessed=true;
        removeGraph(graph);
      }
    }
  }
  if (!imChildProcessed) {
    String id=getId(child,metadata);
    objectGraph.setChildId(id);
    Client chClient=getClient(metadata);
    chClient.delete(child,id,metadata);
  }
}",0.5685210312075983
177031,"/** 
 * Saves an object graph to persistence stores. An object graph contains a parent entity and one or more child entities at a time. There are other attributes too that represent their relationship. 
 * @param objectGraph the object graph
 */
private void saveGraph(EntitySaveGraph objectGraph){
  Object parentEntity=objectGraph.getParentEntity();
  EntityMetadata metadata=getMetadata(objectGraph.getParentClass());
  if (parentEntity != null) {
    objectGraph.setParentId(getId(parentEntity,metadata));
    Client pClient=getClient(metadata);
    pClient.persist(objectGraph,metadata);
    session.store(objectGraph.getParentId(),objectGraph.getParentEntity());
  }
  Object childEntity=objectGraph.getChildEntity();
  if (childEntity != null) {
    persistChildEntity(objectGraph,childEntity);
  }
  for (  Relation relation : metadata.getRelations()) {
    if (relation.isRelatedViaJoinTable()) {
      JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
      String joinTableName=jtMetadata.getJoinTableName();
      Set<String> joinColumns=jtMetadata.getJoinColumns();
      Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
      String joinColumnName=(String)joinColumns.toArray()[0];
      String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
      EntityMetadata relMetadata=getMetadata(objectGraph.getChildClass());
      Client pClient=getClient(metadata);
      pClient.persistJoinTable(joinTableName,joinColumnName,inverseJoinColumnName,relMetadata,objectGraph);
    }
  }
}","/** 
 * Saves an object graph to persistence stores. An object graph contains a parent entity and one or more child entities at a time. There are other attributes too that represent their relationship. 
 * @param objectGraph the object graph
 */
private void saveGraph(EntitySaveGraph objectGraph){
  Object parentEntity=objectGraph.getParentEntity();
  EntityMetadata metadata=getMetadata(objectGraph.getParentClass());
  List<EntitySaveGraph> relationGraphs=null;
  if (objectGraph.isIsswapped() && !metadata.getRelations().isEmpty()) {
    relationGraphs=getGraph(parentEntity,metadata);
    for (    EntitySaveGraph g : relationGraphs) {
      saveGraph(g);
    }
  }
  if (parentEntity != null) {
    objectGraph.setParentId(getId(parentEntity,metadata));
    Client pClient=getClient(metadata);
    pClient.persist(objectGraph,metadata);
    session.store(objectGraph.getParentId(),objectGraph.getParentEntity());
  }
  Object childEntity=objectGraph.getChildEntity();
  if (childEntity != null) {
    persistChildEntity(objectGraph,childEntity);
  }
  for (  Relation relation : metadata.getRelations()) {
    if (relation.isRelatedViaJoinTable()) {
      JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
      String joinTableName=jtMetadata.getJoinTableName();
      Set<String> joinColumns=jtMetadata.getJoinColumns();
      Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
      String joinColumnName=(String)joinColumns.toArray()[0];
      String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
      EntityMetadata relMetadata=getMetadata(objectGraph.getChildClass());
      Client pClient=getClient(metadata);
      pClient.persistJoinTable(joinTableName,joinColumnName,inverseJoinColumnName,relMetadata,objectGraph);
    }
  }
}",0.924556657649534
177032,"@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  log.debug(""String_Node_Str"");
  List<Object> result=null;
  if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
    List<IndexClause> ixClause=prepareIndexClause();
    result=((PelopsClient)client).find(ixClause,m,false,null);
  }
 else {
    result=populateUsingLucene(m,client,result);
  }
  return result;
}","@Override protected List<Object> populateEntities(EntityMetadata m,Client client){
  log.debug(""String_Node_Str"");
  List<Object> result=null;
  if (MetadataUtils.useSecondryIndex(m.getPersistenceUnit())) {
    List<IndexClause> ixClause=prepareIndexClause(m);
    result=((PelopsClient)client).find(ixClause,m,false,null);
  }
 else {
    result=populateUsingLucene(m,client,result);
  }
  return result;
}",0.998769987699877
177033,"private List<IndexClause> prepareIndexClause(){
  List<IndexClause> clauses=new ArrayList<IndexClause>();
  List<IndexExpression> expr=new ArrayList<IndexExpression>();
  for (  Object o : getKunderaQuery().getFilterClauseQueue()) {
    if (o instanceof FilterClause) {
      FilterClause clause=((FilterClause)o);
      String fieldName=getColumnName(clause.getProperty());
      String condition=clause.getCondition();
      String value=clause.getValue();
      IndexClause indexClause=Selector.newIndexClause(fieldName,Integer.SIZE);
      expr.add(Selector.newIndexExpression(fieldName,getOperator(condition),Bytes.fromByteArray(value.getBytes())));
      indexClause.setExpressions(expr);
      clauses.add(indexClause);
    }
  }
  return clauses;
}","private List<IndexClause> prepareIndexClause(EntityMetadata m){
  IndexClause indexClause=Selector.newIndexClause(Bytes.EMPTY,Integer.SIZE);
  List<IndexClause> clauses=new ArrayList<IndexClause>();
  List<IndexExpression> expr=new ArrayList<IndexExpression>();
  for (  Object o : getKunderaQuery().getFilterClauseQueue()) {
    if (o instanceof FilterClause) {
      FilterClause clause=((FilterClause)o);
      String fieldName=getColumnName(clause.getProperty());
      String condition=clause.getCondition();
      String value=clause.getValue();
      expr.add(Selector.newIndexExpression(fieldName,getOperator(condition),getBytesValue(fieldName,m,value)));
    }
 else {
      String opr=o.toString();
      if (opr.equalsIgnoreCase(""String_Node_Str"")) {
        log.error(""String_Node_Str"");
        throw new QueryHandlerException(""String_Node_Str"" + opr + ""String_Node_Str"");
      }
    }
  }
  indexClause.setExpressions(expr);
  clauses.add(indexClause);
  return clauses;
}",0.5966724039013196
177034,"@Override protected List<Object> handleAssociations(EntityMetadata m,Client client,List<EntitySaveGraph> graphs,List<String> relationNames,boolean isParent){
  log.debug(""String_Node_Str"");
  List<IndexClause> ixClause=prepareIndexClause();
  ((CassandraEntityReader)getReader()).setConditions(ixClause);
  List<EnhanceEntity> ls=reader.populateRelation(m,relationNames,isParent,client);
  return handleGraph(ls,graphs,client,m);
}","@Override protected List<Object> handleAssociations(EntityMetadata m,Client client,List<EntitySaveGraph> graphs,List<String> relationNames,boolean isParent){
  log.debug(""String_Node_Str"");
  List<IndexClause> ixClause=prepareIndexClause(m);
  ((CassandraEntityReader)getReader()).setConditions(ixClause);
  List<EnhanceEntity> ls=reader.populateRelation(m,relationNames,isParent,client);
  return handleGraph(ls,graphs,client,m);
}",0.9988412514484356
177035,"/** 
 * Fetches data held in Thrift row super columns and populates to Entity objects
 */
public Object fromSuperColumnThriftRow(Class clazz,EntityMetadata m,ThriftRow tr,List<String> relationNames,boolean isWrapReq) throws Exception {
  Object entity=clazz.newInstance();
  Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
  PropertyAccessorHelper.setId(entity,m,tr.getId());
  Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
  Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
  MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
  Collection embeddedCollection=null;
  Field embeddedCollectionField=null;
  Map<String,Object> relations=new HashMap<String,Object>();
  for (  SuperColumn sc : tr.getSuperColumns()) {
    String scName=PropertyAccessorFactory.STRING.fromBytes(sc.getName());
    String scNamePrefix=null;
    if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
      scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
      embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
      if (embeddedCollection == null) {
        embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
      }
      Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
      for (      Column column : sc.getColumns()) {
        String name=PropertyAccessorFactory.STRING.fromBytes(column.getName());
        byte[] value=column.getValue();
        if (value == null) {
          continue;
        }
        Field columnField=columnNameToFieldMap.get(name);
        if (columnField != null) {
          PropertyAccessorHelper.set(embeddedObject,columnField,value);
        }
 else         if (relationNames != null && !relationNames.isEmpty() && relationNames.contains(name)) {
          String valueAsStr=PropertyAccessorFactory.STRING.fromBytes(value);
          relations.put(name,valueAsStr);
        }
      }
      embeddedCollection.add(embeddedObject);
      ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
    }
 else {
      Field superColumnField=superColumnNameToFieldMap.get(scName);
      if (superColumnField != null) {
        Class superColumnClass=superColumnField.getType();
        Object superColumnObj=superColumnClass.newInstance();
        for (        Column column : sc.getColumns()) {
          String name=PropertyAccessorFactory.STRING.fromBytes(column.getName());
          byte[] value=column.getValue();
          Field columnField=columnNameToFieldMap.get(name);
          if (columnField != null) {
            try {
              PropertyAccessorHelper.set(superColumnObj,columnField,value);
            }
 catch (            PropertyAccessException e) {
              log.debug(e.getMessage() + ""String_Node_Str"");
              superColumnObj=Bytes.toUTF8(value);
            }
          }
 else           if (relationNames != null && !relationNames.isEmpty() && relationNames.contains(name)) {
            String valueAsStr=PropertyAccessorFactory.STRING.fromBytes(value);
            relations.put(name,valueAsStr);
          }
        }
        PropertyAccessorHelper.set(entity,superColumnField,superColumnObj);
      }
    }
  }
  if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
    PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
  }
  return isWrapReq ? new EnhanceEntity(entity,tr.getId(),relations) : entity;
}","/** 
 * Fetches data held in Thrift row super columns and populates to Entity objects
 */
public Object fromSuperColumnThriftRow(Class clazz,EntityMetadata m,ThriftRow tr,List<String> relationNames,boolean isWrapReq) throws Exception {
  Object entity=clazz.newInstance();
  Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
  PropertyAccessorHelper.setId(entity,m,tr.getId());
  Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
  Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
  MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
  Collection embeddedCollection=null;
  Field embeddedCollectionField=null;
  Map<String,Object> relations=new HashMap<String,Object>();
  for (  SuperColumn sc : tr.getSuperColumns()) {
    String scName=PropertyAccessorFactory.STRING.fromBytes(sc.getName());
    String scNamePrefix=null;
    if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
      scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
      embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
      if (embeddedCollection == null) {
        embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
      }
      Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
      for (      Column column : sc.getColumns()) {
        String name=PropertyAccessorFactory.STRING.fromBytes(column.getName());
        byte[] value=column.getValue();
        if (value == null) {
          continue;
        }
        Field columnField=columnNameToFieldMap.get(name);
        if (columnField != null) {
          PropertyAccessorHelper.set(embeddedObject,columnField,value);
        }
 else         if (relationNames != null && !relationNames.isEmpty() && relationNames.contains(name)) {
          String valueAsStr=PropertyAccessorFactory.STRING.fromBytes(value);
          relations.put(name,valueAsStr);
        }
      }
      embeddedCollection.add(embeddedObject);
      ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(tr.getId(),embeddedObject,scName);
    }
 else {
      Field superColumnField=superColumnNameToFieldMap.get(scName);
      Object superColumnObj=null;
      if (superColumnField != null || (relationNames != null && !relationNames.isEmpty() && relationNames.contains(scName))) {
        Class superColumnClass=superColumnField != null ? superColumnField.getType() : null;
        superColumnObj=superColumnClass != null ? superColumnClass.newInstance() : null;
        for (        Column column : sc.getColumns()) {
          String name=PropertyAccessorFactory.STRING.fromBytes(column.getName());
          byte[] value=column.getValue();
          Field columnField=columnNameToFieldMap.get(name);
          if (columnField != null) {
            try {
              PropertyAccessorHelper.set(superColumnObj,columnField,value);
            }
 catch (            PropertyAccessException e) {
              log.debug(e.getMessage() + ""String_Node_Str"");
              superColumnObj=Bytes.toUTF8(value);
            }
          }
 else {
            String valueAsStr=PropertyAccessorFactory.STRING.fromBytes(value);
            relations.put(name,valueAsStr);
          }
        }
      }
      if (superColumnField != null) {
        PropertyAccessorHelper.set(entity,superColumnField,superColumnObj);
      }
    }
  }
  if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
    PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
  }
  return isWrapReq ? new EnhanceEntity(entity,tr.getId(),relations) : entity;
}",0.9475548290423648
177036,"private Object populateEntityFromHbaseData(Object entity,HBaseData hbaseData,EntityMetadata m,String rowKey,List<String> relationNames){
  try {
    PropertyAccessorHelper.setId(entity,m,rowKey);
    List<KeyValue> hbaseValues=hbaseData.getColumns();
    Map<String,Object> relations=new HashMap<String,Object>();
    List<Column> columns=m.getColumnsAsList();
    for (    Column column : columns) {
      Field columnField=column.getField();
      String columnName=column.getName();
      for (      KeyValue colData : hbaseValues) {
        String hbaseColumn=Bytes.toString(colData.getColumn());
        String colName=getColumnName(hbaseColumn);
        if (hbaseColumn != null && hbaseColumn.startsWith(columnName)) {
          byte[] hbaseColumnValue=colData.getValue();
          PropertyAccessorHelper.set(entity,columnField,hbaseColumnValue);
          break;
        }
 else         if (relationNames != null && relationNames.contains(getColumnName(colName))) {
          relations.put(colName,Bytes.toString(colData.getValue()));
        }
      }
    }
    List<EmbeddedColumn> columnFamilies=m.getEmbeddedColumnsAsList();
    for (    EmbeddedColumn columnFamily : columnFamilies) {
      Field columnFamilyFieldInEntity=columnFamily.getField();
      Class<?> columnFamilyClass=columnFamilyFieldInEntity.getType();
      Map<String,Field> columnNameToFieldMap=MetadataUtils.createColumnsFieldMap(m,columnFamily);
      if (Collection.class.isAssignableFrom(columnFamilyClass)) {
        Field embeddedCollectionField=columnFamily.getField();
        Object[] embeddedObjectArr=new Object[hbaseValues.size()];
        Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
        int prevCFNameCounter=0;
        for (        KeyValue colData : hbaseValues) {
          String cfInHbase=Bytes.toString(colData.getFamily());
          if (!cfInHbase.startsWith(columnFamily.getName())) {
            continue;
          }
          String cfNamePostfix=MetadataUtils.getEmbeddedCollectionPostfix(cfInHbase);
          int cfNameCounter=Integer.parseInt(cfNamePostfix);
          if (cfNameCounter != prevCFNameCounter) {
            prevCFNameCounter=cfNameCounter;
            embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          }
          setHBaseDataIntoObject(colData,columnFamilyFieldInEntity,columnNameToFieldMap,embeddedObject);
          embeddedObjectArr[cfNameCounter]=embeddedObject;
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(rowKey,embeddedObject,cfInHbase);
        }
        Collection embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
        embeddedCollection.addAll(Arrays.asList(embeddedObjectArr));
        embeddedCollection.removeAll(Collections.singletonList(null));
        embeddedObjectArr=null;
        if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
          PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
        }
      }
 else {
        Object columnFamilyObj=columnFamilyClass.newInstance();
        for (        KeyValue colData : hbaseValues) {
          String cfInHbase=Bytes.toString(colData.getFamily());
          if (!cfInHbase.equals(columnFamily.getName())) {
            continue;
          }
          String colName=Bytes.toString(colData.getQualifier());
          byte[] columnValue=colData.getValue();
          Field columnField=columnNameToFieldMap.get(colName);
          if (columnField != null) {
            if (columnFamilyFieldInEntity.isAnnotationPresent(Embedded.class) || columnFamilyFieldInEntity.isAnnotationPresent(ElementCollection.class)) {
              PropertyAccessorHelper.set(columnFamilyObj,columnField,columnValue);
            }
 else {
              columnFamilyObj=Bytes.toString(columnValue);
            }
          }
        }
        PropertyAccessorHelper.set(entity,columnFamilyFieldInEntity,columnFamilyObj);
      }
    }
    if (!relations.isEmpty()) {
      return new EnhanceEntity(entity,rowKey,relations);
    }
    return entity;
  }
 catch (  PropertyAccessException e1) {
    throw new RuntimeException(e1.getMessage());
  }
catch (  InstantiationException e1) {
    throw new RuntimeException(e1.getMessage());
  }
catch (  IllegalAccessException e1) {
    throw new RuntimeException(e1.getMessage());
  }
}","private Object populateEntityFromHbaseData(Object entity,HBaseData hbaseData,EntityMetadata m,String rowKey,List<String> relationNames){
  try {
    PropertyAccessorHelper.setId(entity,m,rowKey);
    List<KeyValue> hbaseValues=hbaseData.getColumns();
    Map<String,Object> relations=new HashMap<String,Object>();
    List<Column> columns=m.getColumnsAsList();
    for (    Column column : columns) {
      Field columnField=column.getField();
      String columnName=column.getName();
      for (      KeyValue colData : hbaseValues) {
        String hbaseColumn=Bytes.toString(colData.getColumn());
        String colName=getColumnName(hbaseColumn);
        if (hbaseColumn != null && hbaseColumn.startsWith(columnName)) {
          byte[] hbaseColumnValue=colData.getValue();
          PropertyAccessorHelper.set(entity,columnField,hbaseColumnValue);
          break;
        }
 else         if (relationNames != null && relationNames.contains(getColumnName(colName))) {
          relations.put(colName,Bytes.toString(colData.getValue()));
        }
      }
    }
    List<EmbeddedColumn> columnFamilies=m.getEmbeddedColumnsAsList();
    for (    EmbeddedColumn columnFamily : columnFamilies) {
      Field columnFamilyFieldInEntity=columnFamily.getField();
      Class<?> columnFamilyClass=columnFamilyFieldInEntity.getType();
      Map<String,Field> columnNameToFieldMap=MetadataUtils.createColumnsFieldMap(m,columnFamily);
      if (Collection.class.isAssignableFrom(columnFamilyClass)) {
        Field embeddedCollectionField=columnFamily.getField();
        Object[] embeddedObjectArr=new Object[hbaseValues.size()];
        Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
        int prevCFNameCounter=0;
        for (        KeyValue colData : hbaseValues) {
          String cfInHbase=Bytes.toString(colData.getFamily());
          if (!cfInHbase.startsWith(columnFamily.getName())) {
            if (relationNames != null && relationNames.contains(cfInHbase)) {
              relations.put(cfInHbase,Bytes.toString(colData.getValue()));
            }
            continue;
          }
          String cfNamePostfix=MetadataUtils.getEmbeddedCollectionPostfix(cfInHbase);
          int cfNameCounter=Integer.parseInt(cfNamePostfix);
          if (cfNameCounter != prevCFNameCounter) {
            prevCFNameCounter=cfNameCounter;
            embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          }
          setHBaseDataIntoObject(colData,columnFamilyFieldInEntity,columnNameToFieldMap,embeddedObject);
          embeddedObjectArr[cfNameCounter]=embeddedObject;
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(rowKey,embeddedObject,cfInHbase);
        }
        Collection embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
        embeddedCollection.addAll(Arrays.asList(embeddedObjectArr));
        embeddedCollection.removeAll(Collections.singletonList(null));
        embeddedObjectArr=null;
        if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
          PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
        }
      }
 else {
        Object columnFamilyObj=columnFamilyClass.newInstance();
        for (        KeyValue colData : hbaseValues) {
          String cfInHbase=Bytes.toString(colData.getFamily());
          if (!cfInHbase.equals(columnFamily.getName())) {
            if (relationNames != null && relationNames.contains(cfInHbase)) {
              relations.put(cfInHbase,Bytes.toString(colData.getValue()));
            }
            continue;
          }
          String colName=Bytes.toString(colData.getQualifier());
          byte[] columnValue=colData.getValue();
          Field columnField=columnNameToFieldMap.get(colName);
          if (columnField != null) {
            if (columnFamilyFieldInEntity.isAnnotationPresent(Embedded.class) || columnFamilyFieldInEntity.isAnnotationPresent(ElementCollection.class)) {
              PropertyAccessorHelper.set(columnFamilyObj,columnField,columnValue);
            }
 else {
              columnFamilyObj=Bytes.toString(columnValue);
            }
          }
        }
        PropertyAccessorHelper.set(entity,columnFamilyFieldInEntity,columnFamilyObj);
      }
    }
    if (!relations.isEmpty()) {
      return new EnhanceEntity(entity,rowKey,relations);
    }
    return entity;
  }
 catch (  PropertyAccessException e1) {
    throw new RuntimeException(e1.getMessage());
  }
catch (  InstantiationException e1) {
    throw new RuntimeException(e1.getMessage());
  }
catch (  IllegalAccessException e1) {
    throw new RuntimeException(e1.getMessage());
  }
}",0.96372719374457
177037,"/** 
 * Gets the relations.
 * @return the relations
 */
public Map<String,Object> getRelations(){
  return Collections.unmodifiableMap(relations);
}","/** 
 * Gets the relations.
 * @return the relations
 */
public Map<String,Object> getRelations(){
  return relations != null ? Collections.unmodifiableMap(relations) : null;
}",0.916923076923077
177038,"@Override public void addRelationIntoMetadata(Field relationField,EntityMetadata metadata){
  ManyToMany ann=relationField.getAnnotation(ManyToMany.class);
  Class<?> targetEntity=PropertyAccessorHelper.getGenericClass(relationField);
  if (null != ann.targetEntity() && !ann.targetEntity().getSimpleName().equals(""String_Node_Str"")) {
    targetEntity=ann.targetEntity();
  }
  validate(targetEntity);
  Relation relation=new Relation(relationField,targetEntity,relationField.getType(),ann.fetch(),Arrays.asList(ann.cascade()),Boolean.TRUE,ann.mappedBy(),Relation.ForeignKey.MANY_TO_MANY);
  boolean isJoinedByFK=relationField.isAnnotationPresent(JoinColumn.class);
  boolean isJoinedByTable=relationField.isAnnotationPresent(JoinTable.class);
  if (isJoinedByFK) {
    throw new PersistenceException(""String_Node_Str"");
  }
 else   if (isJoinedByTable) {
    JoinTableMetadata jtMetadata=new JoinTableMetadata(relationField);
    relation.setRelatedViaJoinTable(true);
    relation.setJoinTableMetadata(jtMetadata);
  }
 else {
    throw new PersistenceException(""String_Node_Str"");
  }
  metadata.addRelation(relationField.getName(),relation);
}","@Override public void addRelationIntoMetadata(Field relationField,EntityMetadata metadata){
  ManyToMany ann=relationField.getAnnotation(ManyToMany.class);
  Class<?> targetEntity=PropertyAccessorHelper.getGenericClass(relationField);
  if (null != ann.targetEntity() && !ann.targetEntity().getSimpleName().equals(""String_Node_Str"")) {
    targetEntity=ann.targetEntity();
  }
  validate(targetEntity);
  Relation relation=new Relation(relationField,targetEntity,relationField.getType(),ann.fetch(),Arrays.asList(ann.cascade()),Boolean.TRUE,ann.mappedBy(),Relation.ForeignKey.MANY_TO_MANY);
  boolean isJoinedByFK=relationField.isAnnotationPresent(JoinColumn.class);
  boolean isJoinedByTable=relationField.isAnnotationPresent(JoinTable.class);
  if (isJoinedByFK) {
    throw new PersistenceException(""String_Node_Str"");
  }
 else   if (isJoinedByTable) {
    JoinTableMetadata jtMetadata=new JoinTableMetadata(relationField);
    relation.setRelatedViaJoinTable(true);
    relation.setJoinTableMetadata(jtMetadata);
  }
 else   if (relation.getMappedBy() == null || relation.getMappedBy().isEmpty()) {
    throw new PersistenceException(""String_Node_Str"");
  }
  metadata.addRelation(relationField.getName(),relation);
  metadata.setRelationViaJoinTable(relation.isRelatedViaJoinTable());
}",0.940983606557377
177039,"private void computeJoinTableRelations(Object entity,EntityMetadata entityMetadata,EntitySaveGraph objectGraph,PersistenceDelegator delegator,Relation relation){
  JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
  String joinTableName=jtMetadata.getJoinTableName();
  Set<String> joinColumns=jtMetadata.getJoinColumns();
  Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
  String joinColumnName=(String)joinColumns.toArray()[0];
  String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
  EntityMetadata relMetadata=delegator.getMetadata(objectGraph.getChildClass());
  Client pClient=delegator.getClient(entityMetadata);
  List<?> foreignKeys=pClient.getForeignKeysFromJoinTable(joinTableName,joinColumnName,inverseJoinColumnName,relMetadata,objectGraph);
  List childrenEntities=new ArrayList();
  for (  Object foreignKey : foreignKeys) {
    try {
      EntityMetadata childMetadata=delegator.getMetadata(relation.getTargetEntity());
      Client childClient=delegator.getClient(childMetadata);
      Object child=childClient.find(relation.getTargetEntity(),childMetadata,(String)foreignKey,null);
      childrenEntities.add(child);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  Field childField=objectGraph.getProperty();
  try {
    PropertyAccessorHelper.set(entity,childField,PropertyAccessorHelper.isCollection(childField.getType()) ? getFieldInstance(childrenEntities,childField) : childrenEntities.get(0));
  }
 catch (  PropertyAccessException e) {
    e.printStackTrace();
  }
  System.out.println(entity);
}","private void computeJoinTableRelations(Object entity,EntityMetadata entityMetadata,EntitySaveGraph objectGraph,PersistenceDelegator delegator,Relation relation){
  objectGraph.setParentId(getId(entity,entityMetadata));
  JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
  String joinTableName=jtMetadata.getJoinTableName();
  Set<String> joinColumns=jtMetadata.getJoinColumns();
  Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
  String joinColumnName=(String)joinColumns.toArray()[0];
  String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
  EntityMetadata relMetadata=delegator.getMetadata(objectGraph.getChildClass());
  Client pClient=delegator.getClient(entityMetadata);
  List<?> foreignKeys=pClient.getForeignKeysFromJoinTable(joinTableName,joinColumnName,inverseJoinColumnName,relMetadata,objectGraph);
  List childrenEntities=new ArrayList();
  for (  Object foreignKey : foreignKeys) {
    try {
      EntityMetadata childMetadata=delegator.getMetadata(relation.getTargetEntity());
      Client childClient=delegator.getClient(childMetadata);
      Object child=childClient.find(relation.getTargetEntity(),childMetadata,(String)foreignKey,null);
      childrenEntities.add(child);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  Field childField=objectGraph.getProperty();
  try {
    PropertyAccessorHelper.set(entity,childField,PropertyAccessorHelper.isCollection(childField.getType()) ? getFieldInstance(childrenEntities,childField) : childrenEntities.get(0));
  }
 catch (  PropertyAccessException e) {
    e.printStackTrace();
  }
  System.out.println(entity);
}",0.9824345146379044
177040,"/** 
 * Find.
 * @param < E > the element type
 * @param entityClass the entity class
 * @param primaryKey the primary key
 * @return the e
 */
public <E>E find(Class<E> entityClass,Object primaryKey){
  try {
    E e=getSession().lookup(entityClass,primaryKey);
    if (null != e) {
      log.debug(entityClass.getName() + ""String_Node_Str"" + primaryKey+ ""String_Node_Str"");
      return e;
    }
    EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass,getPersistenceUnits());
    Client client=getClient(entityMetadata);
    List<EntitySaveGraph> objectGraphs=getGraph(entityMetadata.getEntityClazz(),entityMetadata);
    Map<Boolean,List<String>> relations=getRelations(objectGraphs,entityMetadata.getEntityClazz());
    EntityReader reader=getReader(client);
    List<String> relationNames=relations.values().iterator().next();
    String rowKey=primaryKey + ""String_Node_Str"";
    EnhanceEntity enhanceEntity=reader.findById(rowKey,entityMetadata,relationNames,client);
    Map<Object,Object> relationalValues=new HashMap<Object,Object>();
    E entity=(E)enhanceEntity.getEntity();
    if (relationNames.isEmpty()) {
      return entity;
    }
 else {
      entity=(E)reader.computeGraph(enhanceEntity,objectGraphs,relationalValues,client,entityMetadata,this);
    }
    boolean isCacheableToL2=entityMetadata.isCacheable();
    getSession().store(primaryKey,entity,isCacheableToL2);
    return entity;
  }
 catch (  Exception exception) {
    exception.printStackTrace();
    throw new PersistenceException(exception);
  }
}","/** 
 * Find.
 * @param < E > the element type
 * @param entityClass the entity class
 * @param primaryKey the primary key
 * @return the e
 */
public <E>E find(Class<E> entityClass,Object primaryKey){
  try {
    E e=getSession().lookup(entityClass,primaryKey);
    isRelationViaJoinTable=false;
    if (null != e) {
      log.debug(entityClass.getName() + ""String_Node_Str"" + primaryKey+ ""String_Node_Str"");
      return e;
    }
    EntityMetadata entityMetadata=KunderaMetadataManager.getEntityMetadata(entityClass,getPersistenceUnits());
    Client client=getClient(entityMetadata);
    List<EntitySaveGraph> objectGraphs=getGraph(entityMetadata.getEntityClazz().newInstance(),entityMetadata);
    Map<Boolean,List<String>> relations=getRelations(objectGraphs,entityMetadata.getEntityClazz());
    EntityReader reader=getReader(client);
    List<String> relationNames=relations.values().iterator().next();
    String rowKey=primaryKey + ""String_Node_Str"";
    EnhanceEntity enhanceEntity=reader.findById(rowKey,entityMetadata,relationNames,client);
    Map<Object,Object> relationalValues=new HashMap<Object,Object>();
    E entity=(E)enhanceEntity.getEntity();
    if (relationNames.isEmpty() && !entityMetadata.isRelationViaJoinTable()) {
      return entity;
    }
 else {
      entity=(E)reader.computeGraph(enhanceEntity,objectGraphs,relationalValues,client,entityMetadata,this);
    }
    boolean isCacheableToL2=entityMetadata.isCacheable();
    getSession().store(primaryKey,entity,isCacheableToL2);
    return entity;
  }
 catch (  Exception exception) {
    exception.printStackTrace();
    throw new PersistenceException(exception);
  }
}",0.9713930348258708
177041,"public Person getPerson(){
  return person;
}","public Person2 getPerson(){
  return person;
}",0.989010989010989
177042,"public void setPerson(Person person){
  this.person=person;
}","public void setPerson(Person2 person){
  this.person=person;
}",0.991869918699187
177043,"@Override public void unload(String... persistenceUnits){
  indexManager.close();
  Pelops.shutdown();
}","@Override public void unload(String... persistenceUnits){
  indexManager.close();
  Pelops.removePool(poolName);
  Pelops.shutdown();
}",0.8702928870292888
177044,"@Override protected Object createPoolOrConnection(){
  PersistenceUnitMetadata persistenceUnitMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(getPersistenceUnit());
  Properties props=persistenceUnitMetadata.getProperties();
  String contactNodes=(String)props.get(""String_Node_Str"");
  String defaultPort=(String)props.get(""String_Node_Str"");
  String keyspace=(String)props.get(""String_Node_Str"");
  String poolName=PelopsUtils.generatePoolName(getPersistenceUnit());
  if (Pelops.getDbConnPool(poolName) == null) {
    Cluster cluster=new Cluster(contactNodes,new IConnection.Config(Integer.parseInt(defaultPort),true,-1),false);
    Pelops.addPool(poolName,cluster,keyspace);
  }
  return null;
}","@Override protected Object createPoolOrConnection(){
  PersistenceUnitMetadata persistenceUnitMetadata=KunderaMetadata.INSTANCE.getApplicationMetadata().getPersistenceUnitMetadata(getPersistenceUnit());
  Properties props=persistenceUnitMetadata.getProperties();
  String contactNodes=(String)props.get(""String_Node_Str"");
  String defaultPort=(String)props.get(""String_Node_Str"");
  String keyspace=(String)props.get(""String_Node_Str"");
  poolName=PelopsUtils.generatePoolName(getPersistenceUnit());
  if (Pelops.getDbConnPool(poolName) == null) {
    Cluster cluster=new Cluster(contactNodes,new IConnection.Config(Integer.parseInt(defaultPort),true,-1),false);
    Pelops.addPool(poolName,cluster,keyspace);
  }
  return null;
}",0.9952348536419332
177045,"/** 
 * One time initialization at Application and Client level
 * @param persistenceUnit Persistence Unit/ Comma separated persistence units
 */
private void initializeKundera(String persistenceUnit){
  logger.info(""String_Node_Str"" + persistenceUnit);
  String[] persistenceUnits=persistenceUnit.split(Constants.PERSISTENCE_UNIT_SEPARATOR);
  (new ApplicationLoader()).load(persistenceUnits);
  logger.info(""String_Node_Str"" + persistenceUnit);
  for (  String pu : persistenceUnits) {
    ClientResolver.getClientFactory(pu).load(pu);
  }
}","/** 
 * One time initialization at Application and Client level
 * @param persistenceUnit Persistence Unit/ Comma separated persistence units
 */
private void initializeKundera(String persistenceUnit){
  logger.info(""String_Node_Str"" + persistenceUnit);
  String[] persistenceUnits=persistenceUnit.split(Constants.PERSISTENCE_UNIT_SEPARATOR);
  (new ApplicationLoader()).load(persistenceUnits);
}",0.8434504792332268
177046,"/** 
 * Use this if you want to construct this directly.
 * @param persistenceUnit used to prefix the Cassandra domains
 * @param props should have accessKey and secretKey
 */
public EntityManagerFactoryImpl(String persistenceUnit,Map<String,Object> properties){
  if (properties == null) {
    properties=new HashMap<String,Object>();
  }
  properties.put(Constants.PERSISTENCE_UNIT_NAME,persistenceUnit);
  this.properties=properties;
  this.persistenceUnits=persistenceUnit.split(Constants.PERSISTENCE_UNIT_SEPARATOR);
  cacheProvider=initSecondLevelCache();
  try {
    cacheProvider.createCache(Constants.KUNDERA_SECONDARY_CACHE_NAME);
  }
 catch (  CacheException e) {
    logger.warn(""String_Node_Str"" + e.getMessage());
  }
  logger.info(""String_Node_Str"" + persistenceUnit);
}","/** 
 * Use this if you want to construct this directly.
 * @param persistenceUnit used to prefix the Cassandra domains
 * @param props should have accessKey and secretKey
 */
public EntityManagerFactoryImpl(String persistenceUnit,Map<String,Object> properties){
  if (properties == null) {
    properties=new HashMap<String,Object>();
  }
  properties.put(Constants.PERSISTENCE_UNIT_NAME,persistenceUnit);
  this.properties=properties;
  this.persistenceUnits=persistenceUnit.split(Constants.PERSISTENCE_UNIT_SEPARATOR);
  cacheProvider=initSecondLevelCache();
  try {
    cacheProvider.createCache(Constants.KUNDERA_SECONDARY_CACHE_NAME);
  }
 catch (  CacheException e) {
    logger.warn(""String_Node_Str"" + e.getMessage());
  }
  logger.info(""String_Node_Str"" + persistenceUnit);
  for (  String pu : persistenceUnits) {
    ClientResolver.getClientFactory(pu).load(pu);
  }
  logger.info(""String_Node_Str"" + persistenceUnit);
}",0.9143855562026793
177047,"/** 
 * Merge.
 * @param < E > the element type
 * @param e the e
 * @return the e
 */
public <E>E merge(E e){
  try {
    List<EnhancedEntity> reachableEntities=EntityResolver.resolve(e,CascadeType.MERGE,getPersistenceUnits());
    for (    EnhancedEntity o : reachableEntities) {
      log.debug(""String_Node_Str"" + o);
      EntityMetadata m=KunderaMetadataManager.getEntityMetadata(o.getEntity().getClass(),getPersistenceUnits());
      getEventDispatcher().fireEventListeners(m,o,PreUpdate.class);
      persist(o);
      getEventDispatcher().fireEventListeners(m,o,PostUpdate.class);
    }
  }
 catch (  Exception exp) {
    throw new PersistenceException(exp);
  }
  return e;
}","/** 
 * Merge.
 * @param < E > the element type
 * @param e the e
 * @return the e
 */
public <E>E merge(E e){
  try {
    List<EnhancedEntity> reachableEntities=EntityResolver.resolve(e,CascadeType.MERGE,getPersistenceUnits());
    for (    EnhancedEntity o : reachableEntities) {
      log.debug(""String_Node_Str"" + o);
      EntityMetadata m=KunderaMetadataManager.getEntityMetadata(o.getEntity().getClass(),getPersistenceUnits());
      getEventDispatcher().fireEventListeners(m,o,PreUpdate.class);
      persist(o.getEntity());
      getEventDispatcher().fireEventListeners(m,o,PostUpdate.class);
    }
  }
 catch (  Exception exp) {
    throw new PersistenceException(exp);
  }
  return e;
}",0.9913169319826338
177048,"/** 
 * Saves an object graph to persistence stores. An object graph contains a parent entity and one or more child entities at a time. There are other attributes too that represent their relationship. 
 * @param objectGraph the object graph
 */
private void saveGraph(EntitySaveGraph objectGraph){
  Object parentEntity=objectGraph.getParentEntity();
  EntityMetadata metadata=getMetadata(objectGraph.getParentClass());
  if (parentEntity != null) {
    objectGraph.setParentId(getId(parentEntity,metadata));
    if (getSession().lookup(parentEntity.getClass(),objectGraph.getParentId()) == null) {
      Client pClient=getClient(metadata);
      pClient.persist(objectGraph,metadata);
      session.store(objectGraph.getParentId(),objectGraph.getParentEntity());
    }
  }
  Object childEntity=objectGraph.getChildEntity();
  if (childEntity != null) {
    persistChildEntity(objectGraph,childEntity);
  }
  for (  Relation relation : metadata.getRelations()) {
    if (relation.isRelatedViaJoinTable()) {
      JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
      String joinTableName=jtMetadata.getJoinTableName();
      Set<String> joinColumns=jtMetadata.getJoinColumns();
      Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
      String joinColumnName=(String)joinColumns.toArray()[0];
      String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
      EntityMetadata relMetadata=getMetadata(objectGraph.getChildClass());
      Client pClient=getClient(metadata);
      pClient.persistJoinTable(joinTableName,joinColumnName,inverseJoinColumnName,relMetadata,objectGraph);
    }
  }
}","/** 
 * Saves an object graph to persistence stores. An object graph contains a parent entity and one or more child entities at a time. There are other attributes too that represent their relationship. 
 * @param objectGraph the object graph
 */
private void saveGraph(EntitySaveGraph objectGraph){
  Object parentEntity=objectGraph.getParentEntity();
  EntityMetadata metadata=getMetadata(objectGraph.getParentClass());
  if (parentEntity != null) {
    objectGraph.setParentId(getId(parentEntity,metadata));
    Client pClient=getClient(metadata);
    pClient.persist(objectGraph,metadata);
    session.store(objectGraph.getParentId(),objectGraph.getParentEntity());
  }
  Object childEntity=objectGraph.getChildEntity();
  if (childEntity != null) {
    persistChildEntity(objectGraph,childEntity);
  }
  for (  Relation relation : metadata.getRelations()) {
    if (relation.isRelatedViaJoinTable()) {
      JoinTableMetadata jtMetadata=relation.getJoinTableMetadata();
      String joinTableName=jtMetadata.getJoinTableName();
      Set<String> joinColumns=jtMetadata.getJoinColumns();
      Set<String> inverseJoinColumns=jtMetadata.getInverseJoinColumns();
      String joinColumnName=(String)joinColumns.toArray()[0];
      String inverseJoinColumnName=(String)inverseJoinColumns.toArray()[0];
      EntityMetadata relMetadata=getMetadata(objectGraph.getChildClass());
      Client pClient=getClient(metadata);
      pClient.persistJoinTable(joinTableName,joinColumnName,inverseJoinColumnName,relMetadata,objectGraph);
    }
  }
}",0.8779106356198867
177049,"/** 
 * Persist one child entity into persistence store. Also checks whether this child entity has further relationships. If yes, it generates a graph for them and saves them recursively up to ""n"" level.
 * @param child the child Entity Object.
 * @param objectGraph the object graph to which this child entity belongs.
 */
private void persistOneChildEntity(Object child,EntitySaveGraph objectGraph){
  EntityMetadata metadata=getMetadata(objectGraph.getChildClass());
  List<Relation> relations=metadata.getRelations();
  if (relations == null || relations.isEmpty()) {
    String id=getId(child,metadata);
    objectGraph.setChildId(id);
    if (getSession().lookup(child.getClass(),id) == null) {
      Client chClient=getClient(metadata);
      chClient.persist(child,objectGraph,metadata);
      session.store(id,child);
    }
  }
 else {
    List<EntitySaveGraph> objectGraphs=getGraph(child,metadata);
    for (    EntitySaveGraph graph : objectGraphs) {
      graph.setRevFKeyName(objectGraph.getfKeyName());
      graph.setRevFKeyValue(objectGraph.getParentId());
      graph.setRevParentClass(objectGraph.getParentEntity().getClass());
      saveGraph(graph);
    }
  }
}","/** 
 * Persist one child entity into persistence store. Also checks whether this child entity has further relationships. If yes, it generates a graph for them and saves them recursively up to ""n"" level.
 * @param child the child Entity Object.
 * @param objectGraph the object graph to which this child entity belongs.
 */
private void persistOneChildEntity(Object child,EntitySaveGraph objectGraph){
  EntityMetadata metadata=getMetadata(objectGraph.getChildClass());
  List<Relation> relations=metadata.getRelations();
  if (relations == null || relations.isEmpty()) {
    String id=getId(child,metadata);
    objectGraph.setChildId(id);
    Client chClient=getClient(metadata);
    chClient.persist(child,objectGraph,metadata);
    session.store(id,child);
  }
 else {
    List<EntitySaveGraph> objectGraphs=getGraph(child,metadata);
    for (    EntitySaveGraph graph : objectGraphs) {
      graph.setRevFKeyName(objectGraph.getfKeyName());
      graph.setRevFKeyValue(objectGraph.getParentId());
      graph.setRevParentClass(objectGraph.getParentEntity().getClass());
      saveGraph(graph);
    }
  }
}",0.887434554973822
177050,"@Override public List<?> getResultList(){
  log.info(""String_Node_Str"" + query);
  try {
    EntityMetadata m=kunderaQuery.getEntityMetadata();
    Client client=persistenceDelegeator.getClient(m);
    List<EntitySaveGraph> graphs=persistenceDelegeator.getGraph(m.getEntityClazz().newInstance(),m);
    Map<Boolean,List<String>> relationHolder=persistenceDelegeator.getRelations(graphs,m.getEntityClazz());
    List<String> relationNames=relationHolder.values().iterator().next();
    boolean isParent=relationHolder.keySet().iterator().next();
    if (relationNames.isEmpty()) {
      return populateEntities(m,client);
    }
 else {
      return handleAssociations(m,client,graphs,relationNames,isParent);
    }
  }
 catch (  InstantiationException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new QueryHandlerException(e.getMessage());
  }
catch (  IllegalAccessException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new QueryHandlerException(e.getMessage());
  }
}","@Override public List<?> getResultList(){
  log.info(""String_Node_Str"" + query);
  List results=null;
  try {
    EntityMetadata m=kunderaQuery.getEntityMetadata();
    Client client=persistenceDelegeator.getClient(m);
    List<EntitySaveGraph> graphs=persistenceDelegeator.getGraph(m.getEntityClazz().newInstance(),m);
    Map<Boolean,List<String>> relationHolder=persistenceDelegeator.getRelations(graphs,m.getEntityClazz());
    List<String> relationNames=relationHolder.values().iterator().next();
    boolean isParent=relationHolder.keySet().iterator().next();
    if (relationNames.isEmpty()) {
      results=populateEntities(m,client);
    }
 else {
      results=handleAssociations(m,client,graphs,relationNames,isParent);
    }
  }
 catch (  InstantiationException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new QueryHandlerException(e.getMessage());
  }
catch (  IllegalAccessException e) {
    log.error(""String_Node_Str"" + e.getMessage());
    throw new QueryHandlerException(e.getMessage());
  }
  return results != null && !results.isEmpty() ? results : null;
}",0.9487666034155596
177051,"public final void clear(){
  sessionCache=new ConcurrentHashMap<Object,Object>();
}","public final void clear(){
  sessionCache=new ConcurrentHashMap<Object,Object>();
  if (getL2Cache() != null) {
    getL2Cache().evictAll();
  }
}",0.7248908296943232
177052,"/** 
 * Finds ands returns Entity metadata for a given array of PUs
 * @param entityClass
 * @param persistenceUnits
 * @return
 */
public static EntityMetadata getEntityMetadata(Class entityClass,String... persistenceUnits){
  for (  String pu : persistenceUnits) {
    MetamodelImpl metamodel=getMetamodel(pu);
    EntityMetadata metadata=metamodel.getEntityMetadata(entityClass);
    if (metadata != null) {
      return metadata;
    }
  }
  log.warn(""String_Node_Str"" + entityClass + ""String_Node_Str"");
  return null;
}","/** 
 * Finds ands returns Entity metadata for a given array of PUs
 * @param entityClass
 * @param persistenceUnits
 * @return
 */
public static EntityMetadata getEntityMetadata(Class entityClass,String... persistenceUnits){
  for (  String pu : persistenceUnits) {
    MetamodelImpl metamodel=getMetamodel(pu);
    EntityMetadata metadata=metamodel.getEntityMetadata(entityClass);
    if (metadata != null) {
      return metadata;
    }
  }
  log.warn(""String_Node_Str"" + entityClass + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  return null;
}",0.9650735294117648
177053,"@Override protected void initializeClient(){
  indexManager=new IndexManager(LuceneIndexer.getInstance(new StandardAnalyzer(Version.LUCENE_34)));
  reader=new RDBMSEntityReader();
}","@Override protected void initializeClient(){
  indexManager=new IndexManager(LuceneIndexer.getInstance(new StandardAnalyzer(Version.LUCENE_34)));
  reader=new RDBMSEntityReader();
  ((RDBMSEntityReader)reader).setFilter(""String_Node_Str"");
}",0.8578199052132701
177054,"/** 
 * Gets the sql query from jpa.
 * @param entityMetadata the entity metadata
 * @param relations the relations
 * @param primaryKeys the primary keys
 * @return the sql query from jpa
 */
public String getSqlQueryFromJPA(EntityMetadata entityMetadata,List<String> relations,Set<String> primaryKeys){
  String aliasName=""String_Node_Str"" + entityMetadata.getTableName();
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(entityMetadata.getIdColumn().getName());
  for (  String column : entityMetadata.getColumnFieldNames()) {
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(column);
  }
  for (  String relation : relations) {
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(relation);
  }
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(entityMetadata.getTableName());
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  if (filter != null) {
    queryBuilder.append(""String_Node_Str"");
  }
  if (primaryKeys == null) {
    for (    Object o : conditions) {
      if (o instanceof FilterClause) {
        FilterClause clause=((FilterClause)o);
        queryBuilder.append(StringUtils.replace(clause.getProperty(),clause.getProperty().substring(0,clause.getProperty().indexOf(""String_Node_Str"")),aliasName));
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(clause.getCondition());
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          queryBuilder.append(""String_Node_Str"");
        }
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(clause.getValue());
      }
 else {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(o);
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
 else {
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(entityMetadata.getIdColumn().getName());
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(""String_Node_Str"");
    int count=0;
    for (    String key : primaryKeys) {
      queryBuilder.append(key);
      if (++count != primaryKeys.size()) {
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
  return queryBuilder.toString();
}","/** 
 * Gets the sql query from jpa.
 * @param entityMetadata the entity metadata
 * @param relations the relations
 * @param primaryKeys the primary keys
 * @return the sql query from jpa
 */
public String getSqlQueryFromJPA(EntityMetadata entityMetadata,List<String> relations,Set<String> primaryKeys){
  String aliasName=""String_Node_Str"" + entityMetadata.getTableName();
  StringBuilder queryBuilder=new StringBuilder(""String_Node_Str"");
  queryBuilder.append(aliasName);
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(entityMetadata.getIdColumn().getName());
  for (  String column : entityMetadata.getColumnFieldNames()) {
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(column);
  }
  for (  String relation : relations) {
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(relation);
  }
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(entityMetadata.getTableName());
  queryBuilder.append(""String_Node_Str"");
  queryBuilder.append(aliasName);
  if (filter != null) {
    queryBuilder.append(""String_Node_Str"");
  }
  if (primaryKeys == null) {
    for (    Object o : conditions) {
      if (o instanceof FilterClause) {
        FilterClause clause=((FilterClause)o);
        queryBuilder.append(StringUtils.replace(clause.getProperty(),clause.getProperty().substring(0,clause.getProperty().indexOf(""String_Node_Str"")),aliasName));
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(clause.getCondition());
        if (clause.getCondition().equalsIgnoreCase(""String_Node_Str"")) {
          queryBuilder.append(""String_Node_Str"");
        }
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(clause.getValue());
      }
 else {
        queryBuilder.append(""String_Node_Str"");
        queryBuilder.append(o);
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
 else {
    queryBuilder.append(aliasName);
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(entityMetadata.getIdColumn().getName());
    queryBuilder.append(""String_Node_Str"");
    queryBuilder.append(""String_Node_Str"");
    int count=0;
    for (    String key : primaryKeys) {
      queryBuilder.append(key);
      if (++count != primaryKeys.size()) {
        queryBuilder.append(""String_Node_Str"");
      }
 else {
        queryBuilder.append(""String_Node_Str"");
      }
    }
  }
  return queryBuilder.toString();
}",0.974286862193652
177055,"private List<EnhanceEntity> populateEnhanceEntities(EntityMetadata m,List<String> relationNames,Client client,String sqlQuery){
  List<EnhanceEntity> ls;
  List<Object[]> result=((HibernateClient)client).find(sqlQuery,relationNames,m.getEntityClazz());
  ls=new ArrayList<EnhanceEntity>(result.size());
  for (  Object[] o : result) {
    EnhanceEntity e=new EnhanceEntity(o[0],getId(o[0],m),populateRelations(relationNames,o));
    ls.add(e);
  }
  return ls;
}","private List<EnhanceEntity> populateEnhanceEntities(EntityMetadata m,List<String> relationNames,Client client,String sqlQuery){
  List<EnhanceEntity> ls;
  boolean isWithNoRelation=relationNames != null && relationNames.isEmpty();
  List result=((HibernateClient)client).find(sqlQuery,relationNames,m.getEntityClazz());
  ls=new ArrayList<EnhanceEntity>(result.size());
  for (  Object o : result) {
    EnhanceEntity e=new EnhanceEntity(isWithNoRelation ? o : ((Object[])o)[0],getId(isWithNoRelation ? o : ((Object[])o)[0],m),isWithNoRelation ? null : populateRelations(relationNames,((Object[])o)));
    ls.add(e);
  }
  return ls;
}",0.4849589790337283
177056,"@Override public EnhanceEntity findById(String primaryKey,EntityMetadata m,List<String> relationNames,Client client){
  Set<String> keys=new HashSet<String>(1);
  keys.add(primaryKey);
  String query=getSqlQueryFromJPA(m,relationNames,keys);
  return populateEnhanceEntities(m,relationNames,client,query).get(0);
}","@Override public EnhanceEntity findById(String primaryKey,EntityMetadata m,List<String> relationNames,Client client){
  Set<String> keys=new HashSet<String>(1);
  keys.add(primaryKey);
  String query=getSqlQueryFromJPA(m,relationNames,keys);
  List<EnhanceEntity> results=populateEnhanceEntities(m,relationNames,client,query);
  if (results != null && !results.isEmpty()) {
    return results.get(0);
  }
  return null;
}",0.8353741496598639
177057,"/** 
 * On association.
 * @param clazz the clazz
 * @param client the client
 * @param fetchRelation the fetch relation
 * @param query the query
 * @return the list
 */
private List<Object> onAssociation(Class<?> clazz,Client client,boolean fetchRelation,String query,boolean biDirectional,String rowId){
  try {
    IndexManager ixManager=client.getIndexManager();
    Map<String,String> results=fetchRelation ? ixManager.fetchRelation(query) : ixManager.search(query);
    if (biDirectional) {
      results.values().remove(rowId);
    }
    Set<String> rsSet=new HashSet<String>(results.values());
    return (List<Object>)client.find(clazz,rsSet.toArray(new String[]{}));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","/** 
 * On association.
 * @param clazz the clazz
 * @param client the client
 * @param fetchRelation the fetch relation
 * @param query the query
 * @return the list
 */
private List<Object> onAssociation(Class<?> clazz,Client client,boolean fetchRelation,String query,boolean biDirectional,String rowId){
  try {
    IndexManager ixManager=client.getIndexManager();
    isOpen();
    Map<String,String> results=fetchRelation ? ixManager.fetchRelation(query) : ixManager.search(query);
    if (biDirectional) {
      results.values().remove(rowId);
    }
    Set<String> rsSet=new HashSet<String>(results.values());
    return (List<Object>)client.find(clazz,rsSet.toArray(new String[]{}));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0.9907773386034257
177058,"/** 
 * On compute graph.
 * @param entity the entity
 * @param objectGraph the object graph
 * @param client the client
 * @param rowId the row id
 * @param entityClass the entity class
 */
private void onComputeGraph(Object entity,EntitySaveGraph objectGraph,Client client,String rowId,Class<?> entityClass){
  IndexManager mgr=null;
  Set<?> chids=new HashSet();
  EntityMetadata childMetadata=null;
  Client childClient=null;
  Class<?> childClazz=null;
  try {
    if (entity.getClass().equals(objectGraph.getChildClass())) {
      String query=AssociationBuilder.getQuery(DocumentIndexer.PARENT_ID_CLASS,objectGraph.getParentClass().getCanonicalName().toLowerCase(),DocumentIndexer.ENTITY_ID_FIELD,rowId);
      childClazz=objectGraph.getParentClass();
      childMetadata=getMetadata(childClazz);
      childClient=getClient(childMetadata);
      chids=populateAssociation(entity,objectGraph.getProperty(),childClient,query,objectGraph.getParentClass());
    }
 else {
      childClazz=objectGraph.getChildClass();
      childMetadata=getMetadata(childClazz);
      childClient=getClient(childMetadata);
      String query=AssociationBuilder.getQuery(DocumentIndexer.PARENT_ID_CLASS,entity.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,rowId);
      if (objectGraph.isSharedPrimaryKey()) {
        List c=new ArrayList();
        c.add(childClient.find(childClazz,rowId));
        chids=onReflect(entity,objectGraph.getProperty(),c);
      }
 else {
        chids=populateAssociation(entity,objectGraph.getProperty(),childClient,query,childClazz);
      }
    }
    onBiDirection(entity,objectGraph,client,rowId,entityClass,chids,childMetadata,childClient);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * On compute graph.
 * @param entity the entity
 * @param objectGraph the object graph
 * @param client the client
 * @param rowId the row id
 * @param entityClass the entity class
 */
private void onComputeGraph(Object entity,EntitySaveGraph objectGraph,Client client,String rowId,Class<?> entityClass){
  IndexManager mgr=null;
  Set<?> chids=new HashSet();
  EntityMetadata childMetadata=null;
  Client childClient=null;
  Class<?> childClazz=null;
  try {
    if (entity.getClass().equals(objectGraph.getChildClass())) {
      String query=AssociationBuilder.getQuery(DocumentIndexer.PARENT_ID_CLASS,objectGraph.getParentClass().getCanonicalName().toLowerCase(),DocumentIndexer.ENTITY_ID_FIELD,rowId);
      childClazz=objectGraph.getParentClass();
      childMetadata=getMetadata(childClazz);
      childClient=getClient(childMetadata);
      chids=populateAssociation(entity,objectGraph.getProperty(),childClient,query,objectGraph.getParentClass(),true);
    }
 else {
      childClazz=objectGraph.getChildClass();
      childMetadata=getMetadata(childClazz);
      childClient=getClient(childMetadata);
      String query=AssociationBuilder.getQuery(DocumentIndexer.PARENT_ID_CLASS,entity.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,rowId);
      if (objectGraph.isSharedPrimaryKey()) {
        List c=new ArrayList();
        c.add(childClient.find(childClazz,rowId));
        chids=onReflect(entity,objectGraph.getProperty(),c);
      }
 else {
        chids=populateAssociation(entity,objectGraph.getProperty(),childClient,query,childClazz,false);
      }
    }
    onBiDirection(entity,objectGraph,client,rowId,entityClass,chids,childMetadata,childClient);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.996874111963626
177059,"/** 
 * Populate association.
 * @param entity the entity
 * @param f the f
 * @param childClient the child client
 * @param query the query
 * @param clazz the clazz
 * @return the sets the
 * @throws PropertyAccessException the property access exception
 */
private Set<?> populateAssociation(Object entity,Field f,Client childClient,String query,Class<?> clazz) throws PropertyAccessException {
  List<?> childs=onAssociation(clazz,childClient,true,query,false,null);
  return onReflect(entity,f,childs);
}","/** 
 * Populate association.
 * @param entity the entity
 * @param f the f
 * @param childClient the child client
 * @param query the query
 * @param clazz the clazz
 * @return the sets the
 * @throws PropertyAccessException the property access exception
 */
private Set<?> populateAssociation(Object entity,Field f,Client childClient,String query,Class<?> clazz,boolean fetchRelation) throws PropertyAccessException {
  List<?> childs=onAssociation(clazz,childClient,fetchRelation,query,false,null);
  return onReflect(entity,f,childs);
}",0.9628217349857008
177060,"private void onPersist(EntityMetadata entityMetadata,Object entity,String id,List<RelationHolder> relations){
  String dbName=entityMetadata.getSchema();
  String tableName=entityMetadata.getTableName();
  List<String> columnFamilyNames=new ArrayList<String>();
  List<Column> columns=entityMetadata.getColumnsAsList();
  if (columns != null && !columns.isEmpty()) {
    columnFamilyNames.addAll(entityMetadata.getColumnFieldNames());
  }
  columnFamilyNames.addAll(entityMetadata.getEmbeddedColumnFieldNames());
  try {
    handler.createTableIfDoesNotExist(tableName,columnFamilyNames.toArray(new String[0]));
    handler.writeData(tableName,entityMetadata,entity,id,relations);
  }
 catch (  IOException e) {
    throw new PersistenceException(e.getMessage());
  }
}","private void onPersist(EntityMetadata entityMetadata,Object entity,String id,List<RelationHolder> relations){
  String dbName=entityMetadata.getSchema();
  String tableName=entityMetadata.getTableName();
  List<String> columnFamilyNames=new ArrayList<String>();
  List<Column> columns=entityMetadata.getColumnsAsList();
  if (columns != null && !columns.isEmpty()) {
    columnFamilyNames.addAll(entityMetadata.getColumnFieldNames());
  }
  columnFamilyNames.addAll(entityMetadata.getEmbeddedColumnFieldNames());
  if (relations != null) {
    for (    RelationHolder rh : relations) {
      columnFamilyNames.add(rh.getRelationName());
    }
  }
  try {
    handler.createTableIfDoesNotExist(tableName,columnFamilyNames.toArray(new String[0]));
    handler.writeData(tableName,entityMetadata,entity,id,relations);
  }
 catch (  IOException e) {
    throw new PersistenceException(e.getMessage());
  }
}",0.9198564593301436
177061,"@Override public void persist(Object childEntity,EntitySaveGraph entitySaveGraph,EntityMetadata entityMetadata){
  String rlName=entitySaveGraph.getfKeyName();
  String rlValue=entitySaveGraph.getParentId();
  String id=entitySaveGraph.getChildId();
  onPersist(entityMetadata,childEntity,id,RelationHolder.addRelation(entitySaveGraph,rlName,rlValue));
}","@Override public void persist(Object childEntity,EntitySaveGraph entitySaveGraph,EntityMetadata entityMetadata){
  String rlName=entitySaveGraph.getfKeyName();
  String rlValue=entitySaveGraph.getParentId();
  String id=entitySaveGraph.getChildId();
  onPersist(entityMetadata,childEntity,id,RelationHolder.addRelation(entitySaveGraph,rlName,rlValue));
  onIndex(childEntity,entitySaveGraph,entityMetadata,rlValue);
}",0.9182879377431906
177062,"/** 
 * On compute graph.
 * @param entity the entity
 * @param objectGraph the object graph
 * @param client the client
 * @param rowId the row id
 * @param entityClass the entity class
 */
private void onComputeGraph(Object entity,EntitySaveGraph objectGraph,Client client,String rowId,Class<?> entityClass){
  IndexManager mgr=null;
  Set<?> chids=new HashSet();
  EntityMetadata childMetadata=null;
  Client childClient=null;
  Class<?> childClazz=null;
  try {
    if (entity.getClass().equals(objectGraph.getChildClass())) {
      String query=AssociationBuilder.getQuery(DocumentIndexer.PARENT_ID_CLASS,objectGraph.getParentClass().getCanonicalName().toLowerCase(),DocumentIndexer.ENTITY_ID_FIELD,rowId);
      childClazz=objectGraph.getParentClass();
      childMetadata=getMetadata(childClazz);
      childClient=getClient(childMetadata);
      chids=populateAssociation(entity,objectGraph.getProperty(),childClient,query,objectGraph.getParentClass());
    }
 else {
      childClazz=objectGraph.getChildClass();
      childMetadata=getMetadata(childClazz);
      childClient=getClient(childMetadata);
      String query=AssociationBuilder.getQuery(DocumentIndexer.PARENT_ID_CLASS,entity.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,rowId);
      if (objectGraph.isSharedPrimaryKey()) {
        List c=new ArrayList();
        c.add(childClient.find(childClazz,rowId));
        chids=onReflect(entityClass,objectGraph.getProperty(),c);
      }
 else {
        chids=populateAssociation(entity,objectGraph.getProperty(),childClient,query,childClazz);
      }
    }
    onBiDirection(entity,objectGraph,client,rowId,entityClass,chids,childMetadata,childClient);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * On compute graph.
 * @param entity the entity
 * @param objectGraph the object graph
 * @param client the client
 * @param rowId the row id
 * @param entityClass the entity class
 */
private void onComputeGraph(Object entity,EntitySaveGraph objectGraph,Client client,String rowId,Class<?> entityClass){
  IndexManager mgr=null;
  Set<?> chids=new HashSet();
  EntityMetadata childMetadata=null;
  Client childClient=null;
  Class<?> childClazz=null;
  try {
    if (entity.getClass().equals(objectGraph.getChildClass())) {
      String query=AssociationBuilder.getQuery(DocumentIndexer.PARENT_ID_CLASS,objectGraph.getParentClass().getCanonicalName().toLowerCase(),DocumentIndexer.ENTITY_ID_FIELD,rowId);
      childClazz=objectGraph.getParentClass();
      childMetadata=getMetadata(childClazz);
      childClient=getClient(childMetadata);
      chids=populateAssociation(entity,objectGraph.getProperty(),childClient,query,objectGraph.getParentClass());
    }
 else {
      childClazz=objectGraph.getChildClass();
      childMetadata=getMetadata(childClazz);
      childClient=getClient(childMetadata);
      String query=AssociationBuilder.getQuery(DocumentIndexer.PARENT_ID_CLASS,entity.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,rowId);
      if (objectGraph.isSharedPrimaryKey()) {
        List c=new ArrayList();
        c.add(childClient.find(childClazz,rowId));
        chids=onReflect(entity,objectGraph.getProperty(),c);
      }
 else {
        chids=populateAssociation(entity,objectGraph.getProperty(),childClient,query,childClazz);
      }
    }
    onBiDirection(entity,objectGraph,client,rowId,entityClass,chids,childMetadata,childClient);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9985767150583548
177063,"@Override protected boolean isClientThreadSafe(){
  return false;
}","@Override protected boolean isClientThreadSafe(){
  return true;
}",0.9473684210526316
177064,"private void handleRelation(List<RelationHolder> relation,Put p){
  for (  RelationHolder r : relation) {
    if (relation != null) {
      p.add(Bytes.toBytes(r.getRelationName()),System.currentTimeMillis(),Bytes.toBytes(r.getRelationValue()));
    }
  }
}","private void handleRelation(List<RelationHolder> relation,Put p){
  if (relation != null) {
    for (    RelationHolder r : relation) {
      if (relation != null) {
        p.add(Bytes.toBytes(r.getRelationName()),System.currentTimeMillis(),Bytes.toBytes(r.getRelationValue()));
      }
    }
  }
}",0.7482014388489209
177065,"@Override public EntitySaveGraph handleAssociation(Object entity,Object associatedEntity,EntityMetadata metadata,Relation relation){
  Field rField=relation.getProperty();
  EntitySaveGraph objectGraph=populateDefaultGraph(entity,associatedEntity,rField);
  isSharedByPrimaryKey(entity,rField,objectGraph,associatedEntity,metadata);
  onDetach(entity,associatedEntity,relation.getProperty(),true);
  objectGraph.setProperty(rField);
  return objectGraph;
}","@Override public EntitySaveGraph handleAssociation(Object entity,Object associatedEntity,EntityMetadata metadata,Relation relation){
  Field rField=relation.getProperty();
  EntitySaveGraph objectGraph=populateDefaultGraph(entity,associatedEntity,rField);
  isSharedByPrimaryKey(entity,rField,objectGraph,associatedEntity,metadata);
  computeDirection(entity,relation.getProperty(),objectGraph,OneToOne.class);
  onDetach(entity,associatedEntity,relation.getProperty(),true);
  objectGraph.setProperty(rField);
  return objectGraph;
}",0.8686868686868687
177066,"/** 
 * On compute graph.
 * @param entity the entity
 * @param objectGraph the object graph
 * @param client the client
 * @param rowId the row id
 * @param entityClass the entity class
 */
private void onComputeGraph(Object entity,EntitySaveGraph objectGraph,Client client,String rowId,Class<?> entityClass){
  IndexManager mgr=null;
  Set<?> chids=new HashSet();
  EntityMetadata childMetadata=null;
  Client childClient=null;
  Class<?> childClazz=null;
  try {
    if (entity.getClass().equals(objectGraph.getChildClass())) {
      String query=AssociationBuilder.getQuery(DocumentIndexer.PARENT_ID_CLASS,objectGraph.getParentClass().getCanonicalName().toLowerCase(),DocumentIndexer.ENTITY_ID_FIELD,rowId);
      childClazz=objectGraph.getParentClass();
      chids=populateAssociation(entity,objectGraph.getProperty(),childClient,query,objectGraph.getParentClass());
    }
 else {
      childClazz=objectGraph.getChildClass();
      String query=AssociationBuilder.getQuery(DocumentIndexer.PARENT_ID_CLASS,entity.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,rowId);
      if (objectGraph.isSharedPrimaryKey()) {
        List c=new ArrayList();
        c.add(childClient.find(childClazz,rowId));
        chids=onReflect(entityClass,objectGraph.getProperty(),c);
      }
 else {
        chids=populateAssociation(entity,objectGraph.getProperty(),childClient,query,childClazz);
      }
    }
    childMetadata=getMetadata(childClazz);
    childClient=getClient(childMetadata);
    onBiDirection(entity,objectGraph,client,rowId,entityClass,chids,childMetadata,childClient);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * On compute graph.
 * @param entity the entity
 * @param objectGraph the object graph
 * @param client the client
 * @param rowId the row id
 * @param entityClass the entity class
 */
private void onComputeGraph(Object entity,EntitySaveGraph objectGraph,Client client,String rowId,Class<?> entityClass){
  IndexManager mgr=null;
  Set<?> chids=new HashSet();
  EntityMetadata childMetadata=null;
  Client childClient=null;
  Class<?> childClazz=null;
  try {
    if (entity.getClass().equals(objectGraph.getChildClass())) {
      String query=AssociationBuilder.getQuery(DocumentIndexer.PARENT_ID_CLASS,objectGraph.getParentClass().getCanonicalName().toLowerCase(),DocumentIndexer.ENTITY_ID_FIELD,rowId);
      childClazz=objectGraph.getParentClass();
      childMetadata=getMetadata(childClazz);
      childClient=getClient(childMetadata);
      chids=populateAssociation(entity,objectGraph.getProperty(),childClient,query,objectGraph.getParentClass());
    }
 else {
      childClazz=objectGraph.getChildClass();
      childMetadata=getMetadata(childClazz);
      childClient=getClient(childMetadata);
      String query=AssociationBuilder.getQuery(DocumentIndexer.PARENT_ID_CLASS,entity.getClass().getCanonicalName().toLowerCase(),DocumentIndexer.PARENT_ID_FIELD,rowId);
      if (objectGraph.isSharedPrimaryKey()) {
        List c=new ArrayList();
        c.add(childClient.find(childClazz,rowId));
        chids=onReflect(entityClass,objectGraph.getProperty(),c);
      }
 else {
        chids=populateAssociation(entity,objectGraph.getProperty(),childClient,query,childClazz);
      }
    }
    onBiDirection(entity,objectGraph,client,rowId,entityClass,chids,childMetadata,childClient);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9232116788321169
177067,"/** 
 * Index super column.
 * @param metadata the metadata
 * @param object the object
 * @param currentDoc the current doc
 * @param embeddedObject the embedded object
 * @param superColumn the super column
 */
protected void indexSuperColumn(EntityMetadata metadata,Object object,Document currentDoc,Object embeddedObject,EmbeddedColumn superColumn){
  for (  Column col : superColumn.getColumns()) {
    java.lang.reflect.Field field=col.getField();
    String colName=col.getName();
    String indexName=metadata.getIndexName();
    addFieldToDocument(embeddedObject,currentDoc,field,colName,indexName);
  }
  addFieldsToDocument(metadata,object,currentDoc);
  indexDocument(metadata,currentDoc);
}","/** 
 * Index super column.
 * @param metadata the metadata
 * @param object the object
 * @param currentDoc the current doc
 * @param embeddedObject the embedded object
 * @param superColumn the super column
 */
protected void indexSuperColumn(EntityMetadata metadata,Object object,Document currentDoc,Object embeddedObject,EmbeddedColumn superColumn){
  for (  Column col : superColumn.getColumns()) {
    java.lang.reflect.Field field=col.getField();
    String colName=field.getName();
    String indexName=metadata.getIndexName();
    addFieldToDocument(embeddedObject,currentDoc,field,colName,indexName);
  }
  addFieldsToDocument(metadata,object,currentDoc);
  indexDocument(metadata,currentDoc);
}",0.9943181818181818
177068,"@Override protected void initializeClient(){
  logger.info(""String_Node_Str"");
  indexManager=new IndexManager(new LuceneIndexer(new StandardAnalyzer(Version.LUCENE_34)));
}","@Override protected void initializeClient(){
  logger.info(""String_Node_Str"");
  indexManager=new IndexManager(new LuceneIndexer(new KeywordAnalyzer()));
}",0.9146341463414634
177069,"/** 
 * From thrift row.
 * @param < E > the element type
 * @param clazz the clazz
 * @param m the m
 * @param tr the cr
 * @return the e
 * @throws Exception the exception
 */
public <E>E fromThriftRow(Class<E> clazz,EntityMetadata m,DataRow<SuperColumn> tr) throws Exception {
  E e=clazz.newInstance();
  PropertyAccessorHelper.set(e,m.getIdColumn().getField(),tr.getId());
  Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
  Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
  MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
  Collection embeddedCollection=null;
  Field embeddedCollectionField=null;
  for (  SuperColumn sc : tr.getColumns()) {
    String scName=PropertyAccessorFactory.STRING.fromBytes(sc.getName());
    String scNamePrefix=null;
    if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
      scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
      embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
      embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
      String scFieldName=scName.substring(0,scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER));
      Field superColumnField=e.getClass().getDeclaredField(scFieldName);
      if (!superColumnField.isAccessible()) {
        superColumnField.setAccessible(true);
      }
      if (superColumnField.getType().equals(List.class)) {
        embeddedCollection=new ArrayList();
      }
 else       if (superColumnField.getType().equals(Set.class)) {
        embeddedCollection=new HashSet();
      }
      Object embeddedObject=populateEmbeddedObject(sc,m);
      embeddedCollection.add(embeddedObject);
      superColumnField.set(e,embeddedCollection);
    }
 else {
      boolean intoRelations=false;
      if (scName.equals(Constants.FOREIGN_KEY_EMBEDDED_COLUMN_NAME)) {
        intoRelations=true;
      }
      for (      Column column : sc.getColumns()) {
        String name=PropertyAccessorFactory.STRING.fromBytes(column.getName());
        byte[] value=column.getValue();
        if (value == null) {
          continue;
        }
        if (intoRelations) {
          Relation relation=m.getRelation(name);
          String foreignKeys=PropertyAccessorFactory.STRING.fromBytes(value);
          Set<String> keys=MetadataUtils.deserializeKeys(foreignKeys);
        }
 else {
          Field field=columnNameToFieldMap.get(name);
          Object embeddedObject=PropertyAccessorHelper.getObject(e,scName);
          PropertyAccessorHelper.set(embeddedObject,field,value);
        }
      }
    }
  }
  return e;
}","/** 
 * From thrift row.
 * @param < E > the element type
 * @param clazz the clazz
 * @param m the m
 * @param tr the cr
 * @return the e
 * @throws Exception the exception
 */
public <E>E fromThriftRow(Class<E> clazz,EntityMetadata m,DataRow<SuperColumn> tr) throws Exception {
  E e=clazz.newInstance();
  PropertyAccessorHelper.set(e,m.getIdColumn().getField(),tr.getId());
  Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
  Map<String,Field> superColumnNameToFieldMap=new HashMap<String,Field>();
  MetadataUtils.populateColumnAndSuperColumnMaps(m,columnNameToFieldMap,superColumnNameToFieldMap);
  Collection embeddedCollection=null;
  Field embeddedCollectionField=null;
  for (  SuperColumn sc : tr.getColumns()) {
    String scName=PropertyAccessorFactory.STRING.fromBytes(sc.getName());
    String scNamePrefix=null;
    if (scName.indexOf(Constants.EMBEDDED_COLUMN_NAME_DELIMITER) != -1) {
      scNamePrefix=MetadataUtils.getEmbeddedCollectionPrefix(scName);
      embeddedCollectionField=superColumnNameToFieldMap.get(scNamePrefix);
      embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
      Object embeddedObject=populateEmbeddedObject(sc,m);
      embeddedCollection.add(embeddedObject);
      PropertyAccessorHelper.set(e,embeddedCollectionField,embeddedCollection);
    }
 else {
      boolean intoRelations=false;
      if (scName.equals(Constants.FOREIGN_KEY_EMBEDDED_COLUMN_NAME)) {
        intoRelations=true;
      }
      for (      Column column : sc.getColumns()) {
        String name=PropertyAccessorFactory.STRING.fromBytes(column.getName());
        byte[] value=column.getValue();
        if (value == null) {
          continue;
        }
        if (intoRelations) {
          Relation relation=m.getRelation(name);
          String foreignKeys=PropertyAccessorFactory.STRING.fromBytes(value);
          Set<String> keys=MetadataUtils.deserializeKeys(foreignKeys);
        }
 else {
          Field field=columnNameToFieldMap.get(name);
          Object embeddedObject=PropertyAccessorHelper.getObject(e,scName);
          PropertyAccessorHelper.set(embeddedObject,field,value);
        }
      }
    }
  }
  return e;
}",0.8422770863089165
177070,"@Override public final void index(EntityMetadata metadata,Object object){
  if (!metadata.isIndexable()) {
    return;
  }
  log.debug(""String_Node_Str"" + metadata.getEntityClazz().getName() + ""String_Node_Str""+ object);
  Document currentDoc=null;
  Object embeddedObject=null;
  if (metadata.getType().equals(EntityMetadata.Type.SUPER_COLUMN_FAMILY)) {
    Map<String,EmbeddedColumn> superColMap=metadata.getEmbeddedColumnsMap();
    for (    String superColumnName : superColMap.keySet()) {
      EmbeddedColumn superColumn=superColMap.get(superColumnName);
      try {
        embeddedObject=PropertyAccessorHelper.getObject(object,superColumn.getField());
        if (embeddedObject == null) {
          return;
        }
        if (embeddedObject instanceof Collection<?>) {
          for (          Object obj : (Collection<?>)embeddedObject) {
            currentDoc=prepareDocumentForSuperColumn(metadata,object,superColumnName);
            indexSuperColumn(metadata,object,currentDoc,obj,superColumn);
          }
          return;
        }
 else {
          currentDoc=prepareDocumentForSuperColumn(metadata,object,superColumnName);
        }
      }
 catch (      PropertyAccessException e) {
        log.error(""String_Node_Str"" + superColumnName);
      }
      indexSuperColumn(metadata,object,currentDoc,metadata.isEmbeddable(embeddedObject.getClass()) ? embeddedObject : object,superColumn);
    }
  }
 else {
    currentDoc=new Document();
    addEntityClassToDocument(metadata,object,currentDoc);
    addFieldsToDocument(metadata,object,currentDoc);
    indexDocument(metadata,currentDoc);
  }
  try {
    w.commit();
    isInitialized=true;
  }
 catch (  CorruptIndexException e) {
    throw new IndexingException(e.getMessage());
  }
catch (  IOException e) {
    throw new IndexingException(e.getMessage());
  }
}","@Override public final void index(EntityMetadata metadata,Object object){
  if (!metadata.isIndexable()) {
    return;
  }
  log.debug(""String_Node_Str"" + metadata.getEntityClazz().getName() + ""String_Node_Str""+ object);
  Document currentDoc=null;
  Object embeddedObject=null;
  if (metadata.getType().equals(EntityMetadata.Type.SUPER_COLUMN_FAMILY)) {
    Map<String,EmbeddedColumn> superColMap=metadata.getEmbeddedColumnsMap();
    for (    String superColumnName : superColMap.keySet()) {
      EmbeddedColumn superColumn=superColMap.get(superColumnName);
      try {
        embeddedObject=PropertyAccessorHelper.getObject(object,superColumn.getField());
        if (embeddedObject == null) {
          return;
        }
        if (embeddedObject instanceof Collection<?>) {
          for (          Object obj : (Collection<?>)embeddedObject) {
            currentDoc=prepareDocumentForSuperColumn(metadata,object,superColumnName);
            indexSuperColumn(metadata,object,currentDoc,obj,superColumn);
          }
        }
 else {
          currentDoc=prepareDocumentForSuperColumn(metadata,object,superColumnName);
          indexSuperColumn(metadata,object,currentDoc,metadata.isEmbeddable(embeddedObject.getClass()) ? embeddedObject : object,superColumn);
        }
      }
 catch (      PropertyAccessException e) {
        log.error(""String_Node_Str"" + superColumnName);
      }
    }
  }
 else {
    currentDoc=new Document();
    addEntityClassToDocument(metadata,object,currentDoc);
    addFieldsToDocument(metadata,object,currentDoc);
    indexDocument(metadata,currentDoc);
  }
  try {
    w.commit();
    isInitialized=true;
  }
 catch (  CorruptIndexException e) {
    throw new IndexingException(e.getMessage());
  }
catch (  IOException e) {
    throw new IndexingException(e.getMessage());
  }
}",0.918032786885246
177071,"public final void close(){
  eventDispatcher=null;
  persistenceUnits=null;
  for (  Client client : clientMap.values()) {
    client.close();
  }
  closed=true;
}","public final void close(){
  eventDispatcher=null;
  persistenceUnits=null;
  if (clientMap != null && !clientMap.isEmpty()) {
    for (    Client client : clientMap.values()) {
      client.close();
    }
  }
  closed=true;
}",0.8174807197943444
177072,"/** 
 * Instantiates a new lucandra indexer.
 * @param client the client
 * @param analyzer the analyzer
 */
public DocumentIndexer(Analyzer analyzer){
  this.analyzer=analyzer;
}","/** 
 * Instantiates a new lucandra indexer.
 * @param client the client
 * @param analyzer the analyzer
 */
public DocumentIndexer(Analyzer analyzer){
  final String empty=""String_Node_Str"";
  this.analyzer=analyzer;
  tokenizer=new LetterTokenizer(Version.LUCENE_34,new CharArrayReader(empty.toCharArray()));
}",0.7291242362525459
177073,"/** 
 * Index super column name.
 * @param superColumnName the super column name
 * @param currentDoc the current doc
 */
private void addEmbeddedColumnNameToDocument(String superColumnName,Document currentDoc){
  byte[] value=superColumnName.getBytes();
  Field luceneField=new Field(SUPERCOLUMN_INDEX,value,0,value.length);
  currentDoc.add(luceneField);
}","/** 
 * Index super column name.
 * @param superColumnName the super column name
 * @param currentDoc the current doc
 */
private void addEmbeddedColumnNameToDocument(String superColumnName,Document currentDoc){
  Field luceneField=getLuceneField(SUPERCOLUMN_INDEX,superColumnName);
  currentDoc.add(luceneField);
}",0.8231797919762258
177074,"/** 
 * Index field.
 * @param object the object
 * @param document the document
 * @param field the field
 * @param colName the col name
 * @param indexName the index name
 */
private void addFieldToDocument(Object object,Document document,java.lang.reflect.Field field,String colName,String indexName){
  try {
    String value=PropertyAccessorHelper.getString(object,field);
    if (value != null) {
      byte[] val=value.getBytes();
      Field luceneField=new Field(getCannonicalPropertyName(indexName,colName),val,0,val.length);
      luceneField.setOmitNorms(true);
      document.add(luceneField);
    }
 else {
      LOG.warn(""String_Node_Str"" + field.getName());
    }
  }
 catch (  PropertyAccessException e) {
    LOG.error(""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * Index field.
 * @param object the object
 * @param document the document
 * @param field the field
 * @param colName the col name
 * @param indexName the index name
 */
private void addFieldToDocument(Object object,Document document,java.lang.reflect.Field field,String colName,String indexName){
  try {
    String value=PropertyAccessorHelper.getString(object,field);
    if (value != null) {
      Field luceneField=getLuceneField(getCannonicalPropertyName(indexName,colName),value);
      document.add(luceneField);
    }
 else {
      LOG.warn(""String_Node_Str"" + field.getName());
    }
  }
 catch (  PropertyAccessException e) {
    LOG.error(""String_Node_Str"" + e.getMessage());
  }
}",0.9114266396213658
177075,"/** 
 * Prepare index document.
 * @param metadata the metadata
 * @param object the object
 * @param document the document
 */
protected void addEntityClassToDocument(EntityMetadata metadata,Object object,Document document){
  try {
    Field luceneField;
    String id;
    id=PropertyAccessorHelper.getId(object,metadata);
    byte[] value=id.getBytes();
    luceneField=new Field(ENTITY_ID_FIELD,value,0,value.length);
    luceneField.setOmitNorms(true);
    document.add(luceneField);
    value=getKunderaId(metadata,id).getBytes();
    luceneField=new Field(KUNDERA_ID_FIELD,value,0,value.length);
    luceneField.setOmitNorms(true);
    document.add(luceneField);
    value=metadata.getEntityClazz().getCanonicalName().toLowerCase().getBytes();
    luceneField=new Field(ENTITY_CLASS_FIELD,value,0,value.length);
    luceneField.setOmitNorms(true);
    document.add(luceneField);
    value=metadata.getIndexName().getBytes();
    luceneField=new Field(ENTITY_INDEXNAME_FIELD,value,0,value.length);
    luceneField.setOmitNorms(true);
    document.add(luceneField);
  }
 catch (  PropertyAccessException e) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","/** 
 * Prepare index document.
 * @param metadata the metadata
 * @param object the object
 * @param document the document
 */
protected void addEntityClassToDocument(EntityMetadata metadata,Object object,Document document){
  try {
    Field luceneField;
    String id;
    id=PropertyAccessorHelper.getId(object,metadata);
    luceneField=getLuceneField(ENTITY_ID_FIELD,id);
    document.add(luceneField);
    luceneField=getLuceneField(KUNDERA_ID_FIELD,getKunderaId(metadata,id));
    document.add(luceneField);
    luceneField=getLuceneField(ENTITY_CLASS_FIELD,metadata.getEntityClazz().getCanonicalName().toLowerCase());
    document.add(luceneField);
    luceneField=getLuceneField(ENTITY_INDEXNAME_FIELD,metadata.getIndexName());
    document.add(luceneField);
  }
 catch (  PropertyAccessException e) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.5654501216545013
177076,"@SuppressWarnings(""String_Node_Str"") @Override public final Map<String,String> search(String luceneQuery,int start,int count){
  getIndexReader();
  if (Constants.INVALID == count) {
    count=100;
  }
  log.debug(""String_Node_Str"" + luceneQuery + ""String_Node_Str""+ start+ ""String_Node_Str""+ count);
  Map<String,String> indexCol=new HashMap<String,String>();
  if (reader == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  IndexSearcher searcher=new IndexSearcher(reader);
  QueryParser qp=new QueryParser(Version.LUCENE_CURRENT,DEFAULT_SEARCHABLE_FIELD,analyzer);
  try {
    Query q=qp.parse(luceneQuery);
    TopDocs docs=searcher.search(q,count);
    int nullCount=0;
    for (    ScoreDoc sc : docs.scoreDocs) {
      Document doc=searcher.doc(sc.doc);
      String entityId=doc.get(ENTITY_ID_FIELD);
      String superCol=doc.get(SUPERCOLUMN_INDEX);
      if (superCol == null) {
        superCol=""String_Node_Str"" + nullCount++;
      }
      indexCol.put(superCol,entityId);
    }
  }
 catch (  ParseException e) {
    new IndexingException(e.getMessage());
  }
catch (  IOException e) {
    new IndexingException(e.getMessage());
  }
  return indexCol;
}","@SuppressWarnings(""String_Node_Str"") @Override public final Map<String,String> search(String luceneQuery,int start,int count){
  getIndexReader();
  if (Constants.INVALID == count) {
    count=100;
  }
  log.debug(""String_Node_Str"" + luceneQuery + ""String_Node_Str""+ start+ ""String_Node_Str""+ count);
  Map<String,String> indexCol=new HashMap<String,String>();
  if (reader == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  IndexSearcher searcher=new IndexSearcher(reader);
  QueryParser qp=new QueryParser(Version.LUCENE_34,DEFAULT_SEARCHABLE_FIELD,new KeywordAnalyzer());
  try {
    qp.setLowercaseExpandedTerms(false);
    qp.setAllowLeadingWildcard(true);
    Query q=qp.parse(luceneQuery);
    TopDocs docs=searcher.search(q,count);
    int nullCount=0;
    for (    ScoreDoc sc : docs.scoreDocs) {
      Document doc=searcher.doc(sc.doc);
      String entityId=doc.get(ENTITY_ID_FIELD);
      String superCol=doc.get(SUPERCOLUMN_INDEX);
      if (superCol == null) {
        superCol=""String_Node_Str"" + nullCount++;
      }
      indexCol.put(superCol,entityId);
    }
  }
 catch (  ParseException e) {
    new IndexingException(e.getMessage());
  }
catch (  IOException e) {
    new IndexingException(e.getMessage());
  }
  return indexCol;
}",0.9579763361893104
177077,"/** 
 * Indexes document in file system using lucene
 * @param document
 * @throws CorruptIndexException
 * @throws IOException
 */
public void indexDocumentUsingLucene(Document document){
  IndexWriter w=getIndexWriter();
  try {
    w.addDocument(document);
  }
 catch (  CorruptIndexException e) {
    log.error(""String_Node_Str"" + document + ""String_Node_Str""+ e.getMessage());
  }
catch (  IOException e) {
    log.error(""String_Node_Str"" + document + ""String_Node_Str""+ e.getMessage());
  }
}","/** 
 * Indexes document in file system using lucene
 * @param document
 * @throws CorruptIndexException
 * @throws IOException
 */
private void indexDocumentUsingLucene(Document document){
  IndexWriter w=getIndexWriter();
  try {
    w.addDocument(document);
  }
 catch (  CorruptIndexException e) {
    log.error(""String_Node_Str"" + document + ""String_Node_Str""+ e.getMessage());
  }
catch (  IOException e) {
    log.error(""String_Node_Str"" + document + ""String_Node_Str""+ e.getMessage());
  }
}",0.9889669007021064
177078,"/** 
 * Creates a Lucene index directory if it does not exist.
 * @return the index directory
 */
private File getIndexDirectory(){
  String filePath=System.getProperty(""String_Node_Str"") + LUCENE_INDEX_DIRECTORY_NAME;
  File file=new File(filePath);
  if (!file.isDirectory()) {
    file.mkdir();
  }
  return file;
}","/** 
 * Creates a Lucene index directory if it does not exist.
 * @return the index directory
 */
private File getIndexDirectory(){
  String filePath=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + LUCENE_INDEX_DIRECTORY_NAME;
  File file=new File(filePath);
  if (!file.isDirectory()) {
    file.mkdir();
  }
  return file;
}",0.9695121951219512
177079,"/** 
 * Creates a string representation of a set of foreign keys by combining them together separated by ""~"" character. Note: Assumption is that @Id will never contain ""~"" character. Checks for this are not added yet.
 * @param foreignKeys the foreign keys
 * @return the string
 */
public static String serializeKeys(Set<String> foreignKeys){
  if (null == foreignKeys || foreignKeys.isEmpty()) {
    return null;
  }
  StringBuilder sb=new StringBuilder();
  for (  String key : foreignKeys) {
    if (sb.length() > 0) {
      sb.append(Constants.SEPARATOR);
    }
    sb.append(key);
  }
  return sb.toString();
}","/** 
 * Creates a string representation of a set of foreign keys by combining them together separated by ""~"" character. Note: Assumption is that @Id will never contain ""~"" character. Checks for this are not added yet.
 * @param foreignKeys the foreign keys
 * @return the string
 */
public static String serializeKeys(Set<String> foreignKeys){
  if (null == foreignKeys || foreignKeys.isEmpty()) {
    return null;
  }
  StringBuilder sb=new StringBuilder();
  for (  String key : foreignKeys) {
    if (sb.length() > 0) {
      sb.append(Constants.FOREIGN_KEY_SEPARATOR);
    }
    sb.append(key);
  }
  return sb.toString();
}",0.990353697749196
177080,"/** 
 * Splits foreign keys into Set.
 * @param foreignKeys the foreign keys
 * @return the set
 */
public static Set<String> deserializeKeys(String foreignKeys){
  Set<String> keys=new HashSet<String>();
  if (null == foreignKeys || foreignKeys.isEmpty()) {
    return keys;
  }
  String array[]=foreignKeys.split(Constants.SEPARATOR);
  for (  String element : array) {
    keys.add(element);
  }
  return keys;
}","/** 
 * Splits foreign keys into Set.
 * @param foreignKeys the foreign keys
 * @return the set
 */
public static Set<String> deserializeKeys(String foreignKeys){
  Set<String> keys=new HashSet<String>();
  if (null == foreignKeys || foreignKeys.isEmpty()) {
    return keys;
  }
  String array[]=foreignKeys.split(Constants.FOREIGN_KEY_SEPARATOR);
  for (  String element : array) {
    keys.add(element);
  }
  return keys;
}",0.985748218527316
177081,"public void writeColumns(HTable htable,String rowKey,List<Column> columns,Object entity) throws IOException ;","/** 
 * Writes Columns <code>columns</code> into a given table. Each columns is written in their own column family(name same as column name)
 * @param htable
 * @param rowKey
 * @param columns Columns of a given table (No column family given)
 * @param entity
 * @throws IOException
 */
public void writeColumns(HTable htable,String rowKey,List<Column> columns,Object entity) throws IOException ;",0.1227722772277227
177082,"private void populateEntityFromHbaseData(Object entity,HBaseData data,EntityMetadata m,String rowKey){
  try {
    PropertyAccessorHelper.set(entity,m.getIdColumn().getField(),rowKey);
    List<EmbeddedColumn> columnFamilies=m.getEmbeddedColumnsAsList();
    for (    EmbeddedColumn columnFamily : columnFamilies) {
      Field columnFamilyFieldInEntity=columnFamily.getField();
      Class<?> columnFamilyClass=columnFamilyFieldInEntity.getType();
      Map<String,Field> columnNameToFieldMap=MetadataUtils.createColumnsFieldMap(m,columnFamily);
      List<KeyValue> hbaseValues=data.getColumns();
      if (Collection.class.isAssignableFrom(columnFamilyClass)) {
        Field embeddedCollectionField=columnFamily.getField();
        Object[] embeddedObjectArr=new Object[hbaseValues.size()];
        Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
        int prevCFNameCounter=0;
        for (        KeyValue colData : hbaseValues) {
          String cfInHbase=Bytes.toString(colData.getFamily());
          if (!cfInHbase.startsWith(columnFamily.getName())) {
            continue;
          }
          String cfNamePostfix=MetadataUtils.getEmbeddedCollectionPostfix(cfInHbase);
          int cfNameCounter=Integer.parseInt(cfNamePostfix);
          if (cfNameCounter != prevCFNameCounter) {
            prevCFNameCounter=cfNameCounter;
            embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          }
          setHBaseDataIntoObject(colData,columnNameToFieldMap,embeddedObject);
          embeddedObjectArr[cfNameCounter]=embeddedObject;
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(rowKey,embeddedObject,cfInHbase);
        }
        Collection embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
        embeddedCollection.addAll(Arrays.asList(embeddedObjectArr));
        embeddedCollection.removeAll(Collections.singletonList(null));
        embeddedObjectArr=null;
        if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
          PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
        }
      }
 else {
        Object columnFamilyObj=columnFamilyClass.newInstance();
        for (        KeyValue colData : hbaseValues) {
          String cfInHbase=Bytes.toString(colData.getFamily());
          if (!cfInHbase.equals(columnFamily.getName())) {
            continue;
          }
          setHBaseDataIntoObject(colData,columnNameToFieldMap,columnFamilyObj);
        }
        PropertyAccessorHelper.set(entity,columnFamilyFieldInEntity,columnFamilyObj);
      }
    }
  }
 catch (  PropertyAccessException e1) {
    throw new RuntimeException(e1.getMessage());
  }
catch (  InstantiationException e1) {
    throw new RuntimeException(e1.getMessage());
  }
catch (  IllegalAccessException e1) {
    throw new RuntimeException(e1.getMessage());
  }
}","private void populateEntityFromHbaseData(Object entity,HBaseData hbaseData,EntityMetadata m,String rowKey){
  try {
    PropertyAccessorHelper.set(entity,m.getIdColumn().getField(),rowKey);
    List<EmbeddedColumn> columnFamilies=m.getEmbeddedColumnsAsList();
    List<KeyValue> hbaseValues=hbaseData.getColumns();
    for (    EmbeddedColumn columnFamily : columnFamilies) {
      Field columnFamilyFieldInEntity=columnFamily.getField();
      Class<?> columnFamilyClass=columnFamilyFieldInEntity.getType();
      Map<String,Field> columnNameToFieldMap=MetadataUtils.createColumnsFieldMap(m,columnFamily);
      if (Collection.class.isAssignableFrom(columnFamilyClass)) {
        Field embeddedCollectionField=columnFamily.getField();
        Object[] embeddedObjectArr=new Object[hbaseValues.size()];
        Object embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
        int prevCFNameCounter=0;
        for (        KeyValue colData : hbaseValues) {
          String cfInHbase=Bytes.toString(colData.getFamily());
          if (!cfInHbase.startsWith(columnFamily.getName())) {
            continue;
          }
          String cfNamePostfix=MetadataUtils.getEmbeddedCollectionPostfix(cfInHbase);
          int cfNameCounter=Integer.parseInt(cfNamePostfix);
          if (cfNameCounter != prevCFNameCounter) {
            prevCFNameCounter=cfNameCounter;
            embeddedObject=MetadataUtils.getEmbeddedGenericObjectInstance(embeddedCollectionField);
          }
          setHBaseDataIntoObject(colData,columnNameToFieldMap,embeddedObject);
          embeddedObjectArr[cfNameCounter]=embeddedObject;
          ElementCollectionCacheManager.getInstance().addElementCollectionCacheMapping(rowKey,embeddedObject,cfInHbase);
        }
        Collection embeddedCollection=MetadataUtils.getEmbeddedCollectionInstance(embeddedCollectionField);
        embeddedCollection.addAll(Arrays.asList(embeddedObjectArr));
        embeddedCollection.removeAll(Collections.singletonList(null));
        embeddedObjectArr=null;
        if (embeddedCollection != null && !embeddedCollection.isEmpty()) {
          PropertyAccessorHelper.set(entity,embeddedCollectionField,embeddedCollection);
        }
      }
 else {
        Object columnFamilyObj=columnFamilyClass.newInstance();
        for (        KeyValue colData : hbaseValues) {
          String cfInHbase=Bytes.toString(colData.getFamily());
          if (!cfInHbase.equals(columnFamily.getName())) {
            continue;
          }
          setHBaseDataIntoObject(colData,columnNameToFieldMap,columnFamilyObj);
        }
        PropertyAccessorHelper.set(entity,columnFamilyFieldInEntity,columnFamilyObj);
      }
    }
  }
 catch (  PropertyAccessException e1) {
    throw new RuntimeException(e1.getMessage());
  }
catch (  InstantiationException e1) {
    throw new RuntimeException(e1.getMessage());
  }
catch (  IllegalAccessException e1) {
    throw new RuntimeException(e1.getMessage());
  }
}",0.9809491978609626
177083,"@Override public <E>E readData(final String tableName,Class<E> clazz,EntityMetadata m,final String rowKey) throws IOException {
  E e=null;
  try {
    e=clazz.newInstance();
    HBaseData data=hbaseReader.LoadData(gethTable(tableName),rowKey);
    populateEntityFromHbaseData(e,data,m,rowKey);
  }
 catch (  InstantiationException e1) {
    log.error(""String_Node_Str"" + clazz);
    return e;
  }
catch (  IllegalAccessException e1) {
    log.error(""String_Node_Str"" + tableName + ""String_Node_Str""+ e1.getMessage());
    return e;
  }
  return e;
}","@Override public <E>E readData(final String tableName,Class<E> clazz,EntityMetadata m,final String rowKey) throws IOException {
  E enhancedEntity=null;
  try {
    E entity=clazz.newInstance();
    HBaseData data=hbaseReader.LoadData(gethTable(tableName),rowKey);
    populateEntityFromHbaseData(entity,data,m,rowKey);
    Map<String,Set<String>> foreignKeysMap=new HashMap<String,Set<String>>();
    enhancedEntity=(E)EntityResolver.getEnhancedEntity(entity,rowKey,foreignKeysMap);
  }
 catch (  InstantiationException e1) {
    log.error(""String_Node_Str"" + clazz);
    return enhancedEntity;
  }
catch (  IllegalAccessException e1) {
    log.error(""String_Node_Str"" + tableName + ""String_Node_Str""+ e1.getMessage());
    return enhancedEntity;
  }
  return enhancedEntity;
}",0.8268072289156626
177084,"@Override public void writeData(String tableName,EntityMetadata m,EnhancedEntity e) throws IOException {
  List<EmbeddedColumn> columnFamilies=m.getEmbeddedColumnsAsList();
  for (  EmbeddedColumn columnFamily : columnFamilies) {
    String columnFamilyName=columnFamily.getName();
    Field columnFamilyField=columnFamily.getField();
    Object columnFamilyObject=null;
    try {
      columnFamilyObject=PropertyAccessorHelper.getObject(e.getEntity(),columnFamilyField);
    }
 catch (    PropertyAccessException e1) {
      log.error(""String_Node_Str"" + columnFamilyName + ""String_Node_Str""+ e.getEntity());
      return;
    }
    if (columnFamilyObject == null) {
      return;
    }
    List<Column> columns=columnFamily.getColumns();
    if (columnFamilyObject instanceof Collection) {
      String dynamicCFName=null;
      ElementCollectionCacheManager ecCacheHandler=ElementCollectionCacheManager.getInstance();
      if (ecCacheHandler.isCacheEmpty()) {
        int count=0;
        for (        Object obj : (Collection)columnFamilyObject) {
          dynamicCFName=columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + count;
          addColumnFamilyToTable(tableName,dynamicCFName);
          hbaseWriter.writeColumns(gethTable(tableName),dynamicCFName,e.getId(),columns,obj);
          count++;
        }
      }
 else {
        int lastEmbeddedObjectCount=ecCacheHandler.getLastElementCollectionObjectCount(e.getId());
        for (        Object obj : (Collection)columnFamilyObject) {
          dynamicCFName=ecCacheHandler.getElementCollectionObjectName(e.getId(),obj);
          if (dynamicCFName == null) {
            dynamicCFName=columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + (++lastEmbeddedObjectCount);
          }
        }
        ecCacheHandler.clearCache();
      }
    }
 else {
      hbaseWriter.writeColumns(gethTable(tableName),columnFamilyName,e.getId(),columns,columnFamilyObject);
    }
  }
  List<Column> columns=m.getColumnsAsList();
  if (columns != null && !columns.isEmpty()) {
    hbaseWriter.writeColumns(gethTable(tableName),e.getId(),columns,e.getEntity());
  }
  List<Relation> relations=m.getRelations();
  for (  Map.Entry<String,Set<String>> entry : e.getForeignKeysMap().entrySet()) {
    String property=entry.getKey();
    Set<String> foreignKeys=entry.getValue();
    String keys=MetadataUtils.serializeKeys(foreignKeys);
    if (null != keys) {
      List<Column> columns2=new ArrayList<Column>();
    }
    hbaseWriter.writeColumns(gethTable(tableName),Constants.FOREIGN_KEY_EMBEDDED_COLUMN_NAME,e.getId(),columns,keys);
  }
}","@Override public void writeData(String tableName,EntityMetadata m,EnhancedEntity e) throws IOException {
  List<EmbeddedColumn> columnFamilies=m.getEmbeddedColumnsAsList();
  for (  EmbeddedColumn columnFamily : columnFamilies) {
    String columnFamilyName=columnFamily.getName();
    Field columnFamilyField=columnFamily.getField();
    Object columnFamilyObject=null;
    try {
      columnFamilyObject=PropertyAccessorHelper.getObject(e.getEntity(),columnFamilyField);
    }
 catch (    PropertyAccessException e1) {
      log.error(""String_Node_Str"" + columnFamilyName + ""String_Node_Str""+ e.getEntity());
      return;
    }
    if (columnFamilyObject == null) {
      continue;
    }
    List<Column> columns=columnFamily.getColumns();
    if (columnFamilyObject instanceof Collection) {
      String dynamicCFName=null;
      ElementCollectionCacheManager ecCacheHandler=ElementCollectionCacheManager.getInstance();
      if (ecCacheHandler.isCacheEmpty()) {
        int count=0;
        for (        Object obj : (Collection)columnFamilyObject) {
          dynamicCFName=columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + count;
          addColumnFamilyToTable(tableName,dynamicCFName);
          hbaseWriter.writeColumns(gethTable(tableName),dynamicCFName,e.getId(),columns,obj);
          count++;
        }
      }
 else {
        int lastEmbeddedObjectCount=ecCacheHandler.getLastElementCollectionObjectCount(e.getId());
        for (        Object obj : (Collection)columnFamilyObject) {
          dynamicCFName=ecCacheHandler.getElementCollectionObjectName(e.getId(),obj);
          if (dynamicCFName == null) {
            dynamicCFName=columnFamilyName + Constants.EMBEDDED_COLUMN_NAME_DELIMITER + (++lastEmbeddedObjectCount);
          }
        }
        ecCacheHandler.clearCache();
      }
    }
 else {
      hbaseWriter.writeColumns(gethTable(tableName),columnFamilyName,e.getId(),columns,columnFamilyObject);
    }
  }
  List<Column> columns=m.getColumnsAsList();
  if (columns != null && !columns.isEmpty()) {
    hbaseWriter.writeColumns(gethTable(tableName),e.getId(),columns,e.getEntity());
  }
  if (e.getForeignKeysMap() != null && !e.getForeignKeysMap().isEmpty()) {
    hbaseWriter.writeForeignKeys(gethTable(tableName),e.getId(),e.getForeignKeysMap());
  }
}",0.8879837067209776
177085,"@Override public void shutdown(){
  try {
    admin.shutdown();
  }
 catch (  IOException e) {
    throw new RuntimeException(e.getMessage());
  }
}","@Override public void shutdown(){
}",0.3825136612021858
177086,"/** 
 * Immediate load and cache.
 * @param < E > the element type
 * @param entityClass the entity class
 * @param primaryKey the primary key
 * @return the e
 */
protected <E>E immediateLoadAndCache(Class<E> entityClass,Object primaryKey){
  try {
    EntityMetadata m=metadataManager.getEntityMetadata(entityClass);
    m.setDBType(this.client.getType());
    E e=client.loadData(this,primaryKey.toString(),m);
    if (e != null) {
      session.store(primaryKey,e,m.isCacheable());
    }
    return e;
  }
 catch (  Exception exp) {
    throw new PersistenceException(exp);
  }
}","/** 
 * Immediate load and cache.
 * @param < E > the element type
 * @param entityClass the entity class
 * @param primaryKey the primary key
 * @return the e
 */
protected <E>E immediateLoadAndCache(Class<E> entityClass,Object primaryKey){
  try {
    EntityMetadata m=metadataManager.getEntityMetadata(entityClass);
    m.setDBType(this.client.getType());
    E e=(E)client.loadData(this,primaryKey.toString(),m);
    if (e != null) {
      session.store(primaryKey,e,m.isCacheable());
    }
    return e;
  }
 catch (  Exception exp) {
    throw new PersistenceException(exp);
  }
}",0.9974337040205304
177087,"/** 
 * Instantiates a new entity manager impl.
 * @param factory the factory
 * @param client the client
 */
public EntityManagerImpl(EntityManagerFactoryImpl factory){
  this.factory=factory;
  this.metadataManager=factory.getMetadataManager();
  this.persistenceUnitName=factory.getPersistenceUnitName();
  dataManager=new DataManager(this);
  entityResolver=new EntityResolver(this);
  session=new EntityManagerSession(this);
  eventDispatcher=new EntityEventDispatcher();
}","/** 
 * Instantiates a new entity manager impl.
 * @param factory the factory
 * @param client the client
 */
public EntityManagerImpl(EntityManagerFactoryImpl factory){
  this.factory=factory;
  this.metadataManager=factory.getMetadataManager();
  this.persistenceUnitName=factory.getPersistenceUnitName();
  entityResolver=new EntityResolver(this);
  session=new EntityManagerSession(this);
  eventDispatcher=new EntityEventDispatcher();
}",0.7334058759521219
177088,"public void persistData(EnhancedEntity e){
  try {
    EntityMetadata metadata=getMetadataManager().getEntityMetadata(e.getEntity().getClass());
    String persistenceUnit=metadata.getPersistenceUnit();
    setClient(((EntityManagerImpl)new Configuration().getEntityManager(persistenceUnit)).getClient());
    metadata.setDBType(getClient().getType());
    getEventDispatcher().fireEventListeners(metadata,e,PrePersist.class);
    getDataManager().persist(e,metadata);
    getIndexManager().write(metadata,e.getEntity());
    getEventDispatcher().fireEventListeners(metadata,e,PostPersist.class);
  }
 catch (  PersistenceException ex) {
    log.error(""String_Node_Str"" + ex.getMessage());
    throw ex;
  }
catch (  Exception ex) {
    ex.printStackTrace();
    throw new PersistenceException(ex.getMessage());
  }
}","public void persistData(EnhancedEntity e){
  try {
    EntityMetadata metadata=getMetadataManager().getEntityMetadata(e.getEntity().getClass());
    metadata.setDBType(getClient().getType());
    getEventDispatcher().fireEventListeners(metadata,e,PrePersist.class);
    getDataManager().persist(e,metadata);
    getIndexManager().write(metadata,e.getEntity());
    getEventDispatcher().fireEventListeners(metadata,e,PostPersist.class);
  }
 catch (  PersistenceException ex) {
    log.error(""String_Node_Str"" + ex.getMessage());
    throw ex;
  }
catch (  Exception ex) {
    ex.printStackTrace();
    throw new PersistenceException(ex.getMessage());
  }
}",0.8906992532247114
177089,"/** 
 * Populate foreign entities.
 * @param containingEntity the containing entity
 * @param containingEntityId the containing entity id
 * @param relation the relation
 * @param foreignKeys the foreign keys
 * @throws PropertyAccessException the property access exception
 */
public void populateForeignEntities(Object entity,String entityId,Relation relation,String... foreignKeys) throws PropertyAccessException {
  if (null == foreignKeys || foreignKeys.length == 0) {
    return;
  }
  String entityName=entity.getClass().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ relation.getProperty().getName();
  LOG.debug(""String_Node_Str"" + entityName);
  Class<?> foreignEntityClass=relation.getTargetEntity();
  em.getSession().store(entity,entityId,Boolean.FALSE);
  EntityMetadata relMetadata=em.getMetadataManager().getEntityMetadata(foreignEntityClass);
  if (em.getPersistenceUnitName().equals(relMetadata.getPersistenceUnit())) {
    populateForeignEntityFromSameDatastore(entity,relation,entityName,foreignEntityClass,foreignKeys);
  }
 else {
    LOG.debug(""String_Node_Str"");
    populateForeignEntityFromDifferentDatastore(entity,relation,entityName,foreignEntityClass,foreignKeys);
  }
}","/** 
 * Populate foreign entities.
 * @param containingEntity the containing entity
 * @param containingEntityId the containing entity id
 * @param relation the relation
 * @param foreignKeys the foreign keys
 * @throws PropertyAccessException the property access exception
 */
public void populateForeignEntities(Object entity,String entityId,Relation relation,String... foreignKeys) throws PropertyAccessException {
  if (null == foreignKeys || foreignKeys.length == 0) {
    return;
  }
  String entityName=entity.getClass().getName() + ""String_Node_Str"" + entityId+ ""String_Node_Str""+ relation.getProperty().getName();
  LOG.debug(""String_Node_Str"" + entityName);
  Class<?> foreignEntityClass=relation.getTargetEntity();
  em.getSession().store(entity,entityId,Boolean.FALSE);
  EntityMetadata relMetadata=em.getMetadataManager().getEntityMetadata(foreignEntityClass);
  if (relMetadata.getPersistenceUnit() == null || em.getPersistenceUnitName().equals(relMetadata.getPersistenceUnit())) {
    populateForeignEntityFromSameDatastore(entity,relation,entityName,foreignEntityClass,foreignKeys);
  }
 else {
    LOG.debug(""String_Node_Str"");
    populateForeignEntityFromDifferentDatastore(entity,relation,entityName,foreignEntityClass,foreignKeys);
  }
}",0.982200647249191
177090,"public void persistData(EnhancedEntity e){
  try {
    EntityMetadata metadata=getMetadataManager().getEntityMetadata(e.getEntity().getClass());
    String persistenceUnit=metadata.getPersistenceUnit();
    if (persistenceUnit != null && !persistenceUnit.equals(getPersistenceUnitName())) {
      setClient(((EntityManagerImpl)new Configuration().getEntityManager(persistenceUnit)).getClient());
    }
    metadata.setDBType(getClient().getType());
    getEventDispatcher().fireEventListeners(metadata,e,PrePersist.class);
    getDataManager().persist(e,metadata);
    getIndexManager().write(metadata,e.getEntity());
    getEventDispatcher().fireEventListeners(metadata,e,PostPersist.class);
  }
 catch (  PersistenceException ex) {
    log.error(""String_Node_Str"" + ex.getMessage());
    throw ex;
  }
catch (  Exception ex) {
    ex.printStackTrace();
    throw new PersistenceException(ex.getMessage());
  }
}","public void persistData(EnhancedEntity e){
  try {
    EntityMetadata metadata=getMetadataManager().getEntityMetadata(e.getEntity().getClass());
    String persistenceUnit=metadata.getPersistenceUnit();
    setClient(((EntityManagerImpl)new Configuration().getEntityManager(persistenceUnit)).getClient());
    metadata.setDBType(getClient().getType());
    getEventDispatcher().fireEventListeners(metadata,e,PrePersist.class);
    getDataManager().persist(e,metadata);
    getIndexManager().write(metadata,e.getEntity());
    getEventDispatcher().fireEventListeners(metadata,e,PostPersist.class);
  }
 catch (  PersistenceException ex) {
    log.error(""String_Node_Str"" + ex.getMessage());
    throw ex;
  }
catch (  Exception ex) {
    ex.printStackTrace();
    throw new PersistenceException(ex.getMessage());
  }
}",0.9445086705202312
177091,"@Override public void writeData(String tableName,EntityMetadata m,EnhancedEntity e) throws IOException {
  List<SuperColumn> columnFamilies=m.getSuperColumnsAsList();
  for (  SuperColumn columnFamily : columnFamilies) {
    String columnFamilyName=columnFamily.getName();
    Field columnFamilyField=columnFamily.getField();
    Object columnFamilyObject=null;
    try {
      columnFamilyObject=PropertyAccessorHelper.getObject(e.getEntity(),columnFamilyField);
    }
 catch (    PropertyAccessException e1) {
      log.error(""String_Node_Str"" + columnFamilyName + ""String_Node_Str""+ e.getEntity());
      return;
    }
    List<Column> columns=columnFamily.getColumns();
    if (columnFamilyObject instanceof Collection) {
      String dynamicCFName=null;
      EmbeddedCollectionCacheHandler ecCacheHandler=m.getEcCacheHandler();
      if (ecCacheHandler.isCacheEmpty()) {
        int count=0;
        for (        Object obj : (Collection)columnFamilyObject) {
          dynamicCFName=columnFamilyName + Constants.SUPER_COLUMN_NAME_DELIMITER + count;
          addColumnFamilyToTable(tableName,dynamicCFName);
          hbaseWriter.writeColumns(gethTable(tableName),dynamicCFName,e.getId(),columns,obj);
          count++;
        }
      }
 else {
        int lastEmbeddedObjectCount=ecCacheHandler.getLastEmbeddedObjectCount(e.getId());
        for (        Object obj : (Collection)columnFamilyObject) {
          dynamicCFName=ecCacheHandler.getEmbeddedObjectName(e.getId(),obj);
          if (dynamicCFName == null) {
            dynamicCFName=columnFamilyName + Constants.SUPER_COLUMN_NAME_DELIMITER + (++lastEmbeddedObjectCount);
          }
        }
        ecCacheHandler.clearCache();
      }
    }
 else {
      Object columnFamilyObj=null;
      try {
        columnFamilyObj=PropertyAccessorHelper.getObject(e.getEntity(),columnFamilyName);
      }
 catch (      PropertyAccessException e2) {
        log.error(""String_Node_Str"" + columnFamily + ""String_Node_Str"");
        return;
      }
      hbaseWriter.writeColumns(gethTable(tableName),columnFamilyName,e.getId(),columns,columnFamilyObj);
    }
  }
}","@Override public void writeData(String tableName,EntityMetadata m,EnhancedEntity e) throws IOException {
  List<SuperColumn> columnFamilies=m.getSuperColumnsAsList();
  for (  SuperColumn columnFamily : columnFamilies) {
    String columnFamilyName=columnFamily.getName();
    Field columnFamilyField=columnFamily.getField();
    Object columnFamilyObject=null;
    try {
      columnFamilyObject=PropertyAccessorHelper.getObject(e.getEntity(),columnFamilyField);
    }
 catch (    PropertyAccessException e1) {
      log.error(""String_Node_Str"" + columnFamilyName + ""String_Node_Str""+ e.getEntity());
      return;
    }
    if (columnFamilyObject == null) {
      return;
    }
    List<Column> columns=columnFamily.getColumns();
    if (columnFamilyObject instanceof Collection) {
      String dynamicCFName=null;
      EmbeddedCollectionCacheHandler ecCacheHandler=m.getEcCacheHandler();
      if (ecCacheHandler.isCacheEmpty()) {
        int count=0;
        for (        Object obj : (Collection)columnFamilyObject) {
          dynamicCFName=columnFamilyName + Constants.SUPER_COLUMN_NAME_DELIMITER + count;
          addColumnFamilyToTable(tableName,dynamicCFName);
          hbaseWriter.writeColumns(gethTable(tableName),dynamicCFName,e.getId(),columns,obj);
          count++;
        }
      }
 else {
        int lastEmbeddedObjectCount=ecCacheHandler.getLastEmbeddedObjectCount(e.getId());
        for (        Object obj : (Collection)columnFamilyObject) {
          dynamicCFName=ecCacheHandler.getEmbeddedObjectName(e.getId(),obj);
          if (dynamicCFName == null) {
            dynamicCFName=columnFamilyName + Constants.SUPER_COLUMN_NAME_DELIMITER + (++lastEmbeddedObjectCount);
          }
        }
        ecCacheHandler.clearCache();
      }
    }
 else {
      hbaseWriter.writeColumns(gethTable(tableName),columnFamilyName,e.getId(),columns,columnFamilyObject);
    }
  }
}",0.9137888198757764
177092,"/** 
 * Gets the embedded object.
 * @param obj the obj
 * @param fieldName the field name
 * @return the embedded object
 */
@SuppressWarnings(""String_Node_Str"") public static final Object getObject(Object obj,String fieldName) throws PropertyAccessException {
  Field embeddedField;
  try {
    embeddedField=obj.getClass().getDeclaredField(fieldName);
    if (embeddedField != null) {
      if (!embeddedField.isAccessible()) {
        embeddedField.setAccessible(true);
      }
      Object embededObject=embeddedField.get(obj);
      if (embededObject == null) {
        embededObject=embeddedField.getType().newInstance();
        embeddedField.set(obj,embededObject);
      }
      return embededObject;
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + fieldName);
    }
  }
 catch (  SecurityException e) {
    throw new PropertyAccessException(e);
  }
catch (  NoSuchFieldException e) {
    throw new PropertyAccessException(e);
  }
catch (  IllegalArgumentException e) {
    throw new PropertyAccessException(e);
  }
catch (  IllegalAccessException e) {
    throw new PropertyAccessException(e);
  }
catch (  InstantiationException e) {
    throw new PropertyAccessException(e);
  }
}","/** 
 * Gets the embedded object.
 * @param obj the obj
 * @param fieldName the field name
 * @return the embedded object
 */
@SuppressWarnings(""String_Node_Str"") public static final Object getObject(Object obj,String fieldName) throws PropertyAccessException {
  Field embeddedField;
  try {
    embeddedField=obj.getClass().getDeclaredField(fieldName);
    if (embeddedField != null) {
      if (!embeddedField.isAccessible()) {
        embeddedField.setAccessible(true);
      }
      Object embededObject=embeddedField.get(obj);
      if (embededObject == null) {
        Class embeddedObjectClass=embeddedField.getType();
        if (Collection.class.isAssignableFrom(embeddedObjectClass)) {
          if (embeddedObjectClass.equals(List.class)) {
            return new ArrayList();
          }
 else           if (embeddedObjectClass.equals(Set.class)) {
            return new HashSet();
          }
        }
 else {
          embededObject=embeddedField.getType().newInstance();
          embeddedField.set(obj,embededObject);
        }
      }
      return embededObject;
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + fieldName);
    }
  }
 catch (  SecurityException e) {
    throw new PropertyAccessException(e);
  }
catch (  NoSuchFieldException e) {
    throw new PropertyAccessException(e);
  }
catch (  IllegalArgumentException e) {
    throw new PropertyAccessException(e);
  }
catch (  IllegalAccessException e) {
    throw new PropertyAccessException(e);
  }
catch (  InstantiationException e) {
    throw new PropertyAccessException(e);
  }
}",0.8640915593705293
177093,"/** 
 * From thrift row.
 * @param < E > the element type
 * @param clazz the clazz
 * @param m the m
 * @param cr the cr
 * @return the e
 * @throws Exception the exception
 */
private <E>E fromThriftRow(Class<E> clazz,EntityMetadata m,BaseDataAccessor.ThriftRow<SuperColumn> cr) throws Exception {
  E e=clazz.newInstance();
  PropertyAccessorHelper.set(e,m.getIdProperty(),cr.getId());
  Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
  for (  Map.Entry<String,EntityMetadata.SuperColumn> entry : m.getSuperColumnsMap().entrySet()) {
    for (    EntityMetadata.Column cMetadata : entry.getValue().getColumns()) {
      columnNameToFieldMap.put(cMetadata.getName(),cMetadata.getField());
    }
  }
  for (  SuperColumn sc : cr.getColumns()) {
    String scName=PropertyAccessorFactory.STRING.fromBytes(sc.getName());
    if (scName.indexOf(Constants.SUPER_COLUMN_NAME_DELIMITER) != -1) {
      String scFieldName=scName.substring(0,scName.indexOf(Constants.SUPER_COLUMN_NAME_DELIMITER));
      Field superColumnField=e.getClass().getDeclaredField(scFieldName);
      Collection embeddedCollection=null;
      if (superColumnField.getType().equals(List.class)) {
        embeddedCollection=new ArrayList();
      }
 else       if (superColumnField.getType().equals(Set.class)) {
        embeddedCollection=new HashSet();
      }
      PelopsDataHandler handler=new PelopsDataHandler();
      Object embeddedObject=handler.populateEmbeddedObject(sc,m);
      embeddedCollection.add(embeddedObject);
    }
 else {
      boolean intoRelations=false;
      if (scName.equals(TO_ONE_SUPER_COL_NAME)) {
        intoRelations=true;
      }
      for (      Column column : sc.getColumns()) {
        String name=PropertyAccessorFactory.STRING.fromBytes(column.getName());
        byte[] value=column.getValue();
        if (value == null) {
          continue;
        }
        if (intoRelations) {
          EntityMetadata.Relation relation=m.getRelation(name);
          String foreignKeys=PropertyAccessorFactory.STRING.fromBytes(value);
          Set<String> keys=deserializeKeys(foreignKeys);
          getEntityManager().getEntityResolver().populateForeignEntities(e,cr.getId(),relation,keys.toArray(new String[0]));
        }
 else {
          Field field=columnNameToFieldMap.get(name);
          Object embeddedObject=PropertyAccessorHelper.getObject(e,scName);
          PropertyAccessorHelper.set(embeddedObject,field,value);
        }
      }
    }
  }
  return e;
}","/** 
 * From thrift row.
 * @param < E > the element type
 * @param clazz the clazz
 * @param m the m
 * @param cr the cr
 * @return the e
 * @throws Exception the exception
 */
private <E>E fromThriftRow(Class<E> clazz,EntityMetadata m,BaseDataAccessor.ThriftRow<SuperColumn> cr) throws Exception {
  E e=clazz.newInstance();
  PropertyAccessorHelper.set(e,m.getIdProperty(),cr.getId());
  Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
  for (  Map.Entry<String,EntityMetadata.SuperColumn> entry : m.getSuperColumnsMap().entrySet()) {
    for (    EntityMetadata.Column cMetadata : entry.getValue().getColumns()) {
      columnNameToFieldMap.put(cMetadata.getName(),cMetadata.getField());
    }
  }
  for (  SuperColumn sc : cr.getColumns()) {
    String scName=PropertyAccessorFactory.STRING.fromBytes(sc.getName());
    if (scName.indexOf(Constants.SUPER_COLUMN_NAME_DELIMITER) != -1) {
      String scFieldName=scName.substring(0,scName.indexOf(Constants.SUPER_COLUMN_NAME_DELIMITER));
      Field superColumnField=e.getClass().getDeclaredField(scFieldName);
      if (!superColumnField.isAccessible()) {
        superColumnField.setAccessible(true);
      }
      Collection embeddedCollection=null;
      if (superColumnField.getType().equals(List.class)) {
        embeddedCollection=new ArrayList();
      }
 else       if (superColumnField.getType().equals(Set.class)) {
        embeddedCollection=new HashSet();
      }
      PelopsDataHandler handler=new PelopsDataHandler();
      Object embeddedObject=handler.populateEmbeddedObject(sc,m);
      embeddedCollection.add(embeddedObject);
      superColumnField.set(e,embeddedCollection);
    }
 else {
      boolean intoRelations=false;
      if (scName.equals(TO_ONE_SUPER_COL_NAME)) {
        intoRelations=true;
      }
      for (      Column column : sc.getColumns()) {
        String name=PropertyAccessorFactory.STRING.fromBytes(column.getName());
        byte[] value=column.getValue();
        if (value == null) {
          continue;
        }
        if (intoRelations) {
          EntityMetadata.Relation relation=m.getRelation(name);
          String foreignKeys=PropertyAccessorFactory.STRING.fromBytes(value);
          Set<String> keys=deserializeKeys(foreignKeys);
          getEntityManager().getEntityResolver().populateForeignEntities(e,cr.getId(),relation,keys.toArray(new String[0]));
        }
 else {
          Field field=columnNameToFieldMap.get(name);
          Object embeddedObject=PropertyAccessorHelper.getObject(e,scName);
          PropertyAccessorHelper.set(embeddedObject,field,value);
        }
      }
    }
  }
  return e;
}",0.970817120622568
177094,"/** 
 * Inits the entity class.
 */
private void initEntityClass(){
  String fromArray[]=from.split(""String_Node_Str"");
  if (fromArray.length != 2) {
    throw new PersistenceException(""String_Node_Str"" + from);
  }
  StringTokenizer tokenizer=new StringTokenizer(getResult(),""String_Node_Str"");
  while (tokenizer.hasMoreTokens()) {
    String token=tokenizer.nextToken();
    if (!StringUtils.contains(token,fromArray[1] + ""String_Node_Str"")) {
      throw new RuntimeException(""String_Node_Str"" + token);
    }
  }
  this.entityName=fromArray[0];
  this.entityAlias=fromArray[1];
  entityClass=metadataManager.getEntityClassByName(entityName);
  if (null == entityClass) {
    throw new PersistenceException(""String_Node_Str"" + entityName);
  }
  EntityMetadata metadata=metadataManager.getEntityMetadata(entityClass);
  if (!metadata.isIndexable()) {
    throw new PersistenceException(entityClass + ""String_Node_Str"");
  }
}","/** 
 * Inits the entity class.
 */
private void initEntityClass(){
  String fromArray[]=from.split(""String_Node_Str"");
  if (fromArray.length != 2) {
    throw new PersistenceException(""String_Node_Str"" + from);
  }
  StringTokenizer tokenizer=new StringTokenizer(getResult(),""String_Node_Str"");
  while (tokenizer.hasMoreTokens()) {
    String token=tokenizer.nextToken();
    if (!StringUtils.containsAny(fromArray[1] + ""String_Node_Str"",token)) {
      throw new RuntimeException(""String_Node_Str"" + token);
    }
  }
  this.entityName=fromArray[0];
  this.entityAlias=fromArray[1];
  entityClass=metadataManager.getEntityClassByName(entityName);
  if (null == entityClass) {
    throw new PersistenceException(""String_Node_Str"" + entityName);
  }
  EntityMetadata metadata=metadataManager.getEntityMetadata(entityClass);
  if (!metadata.isIndexable()) {
    throw new PersistenceException(entityClass + ""String_Node_Str"");
  }
}",0.9908749329039184
177095,"/** 
 * Inits the entity class.
 */
private void initEntityClass(){
  String fromArray[]=from.split(""String_Node_Str"");
  if (fromArray.length != 2) {
    throw new PersistenceException(""String_Node_Str"" + from);
  }
  StringTokenizer tokenizer=new StringTokenizer(getResult(),""String_Node_Str"");
  while (tokenizer.hasMoreTokens()) {
    String token=tokenizer.nextToken();
    if (!StringUtils.contains(fromArray[1] + ""String_Node_Str"",token)) {
      throw new RuntimeException(""String_Node_Str"" + token);
    }
  }
  this.entityName=fromArray[0];
  this.entityAlias=fromArray[1];
  entityClass=metadataManager.getEntityClassByName(entityName);
  if (null == entityClass) {
    throw new PersistenceException(""String_Node_Str"" + entityName);
  }
  EntityMetadata metadata=metadataManager.getEntityMetadata(entityClass);
  if (!metadata.isIndexable()) {
    throw new PersistenceException(entityClass + ""String_Node_Str"");
  }
}","/** 
 * Inits the entity class.
 */
private void initEntityClass(){
  String fromArray[]=from.split(""String_Node_Str"");
  if (fromArray.length != 2) {
    throw new PersistenceException(""String_Node_Str"" + from);
  }
  StringTokenizer tokenizer=new StringTokenizer(getResult(),""String_Node_Str"");
  while (tokenizer.hasMoreTokens()) {
    String token=tokenizer.nextToken();
    if (!StringUtils.contains(token,fromArray[1] + ""String_Node_Str"")) {
      throw new RuntimeException(""String_Node_Str"" + token);
    }
  }
  this.entityName=fromArray[0];
  this.entityAlias=fromArray[1];
  entityClass=metadataManager.getEntityClassByName(entityName);
  if (null == entityClass) {
    throw new PersistenceException(""String_Node_Str"" + entityName);
  }
  EntityMetadata metadata=metadataManager.getEntityMetadata(entityClass);
  if (!metadata.isIndexable()) {
    throw new PersistenceException(entityClass + ""String_Node_Str"");
  }
}",0.9935483870967742
177096,"@Override public void writeColumns(HTable htable,String columnFamily,String rowKey,List<Column> columns,EnhancedEntity e) throws IOException {
  Put p=new Put(Bytes.toBytes(rowKey));
  for (  Column col : columns) {
    String qualifier=col.getName();
    try {
      PropertyAccessorHelper.getObject(e.getEntity(),col.getField());
      p.add(Bytes.toBytes(columnFamily),Bytes.toBytes(qualifier),PropertyAccessorHelper.get(e.getEntity(),col.getField()));
    }
 catch (    PropertyAccessException e1) {
      throw new IOException(e1.getMessage());
    }
  }
  htable.put(p);
}","@Override public void writeColumns(HTable htable,String columnFamily,String rowKey,List<Column> columns,EnhancedEntity e) throws IOException {
  Put p=new Put(Bytes.toBytes(rowKey));
  Object columnFamilyObj=null;
  try {
    columnFamilyObj=PropertyAccessorHelper.getObject(e.getEntity(),columnFamily);
  }
 catch (  PropertyAccessException e2) {
    log.error(""String_Node_Str"" + columnFamily + ""String_Node_Str"");
    return;
  }
  for (  Column column : columns) {
    String columnName=column.getName();
    try {
      p.add(Bytes.toBytes(columnFamily),Bytes.toBytes(columnName),PropertyAccessorHelper.get(columnFamilyObj,column.getField()));
    }
 catch (    PropertyAccessException e1) {
      throw new IOException(e1.getMessage());
    }
  }
  htable.put(p);
}",0.7071905114899926
177097,"private void populateMetadata(EntityMetadata metadata,Class<?> clazz){
  Table table=clazz.getAnnotation(Table.class);
  boolean isEmbeddable=false;
  metadata.setTableName(table.name());
  String schema=table.schema().length() != 0 ? table.schema() : emf.getSchema();
  metadata.setSchema(schema);
  metadata.setType(com.impetus.kundera.metadata.EntityMetadata.Type.COLUMN_FAMILY);
  for (  Field f : clazz.getDeclaredFields()) {
    if (f.isAnnotationPresent(Id.class)) {
      LOG.debug(f.getName() + ""String_Node_Str"");
      metadata.setIdProperty(f);
      populateIdAccessorMethods(metadata,clazz,f);
      populateIdColumn(metadata,clazz,f);
    }
 else     if (f.isAnnotationPresent(Embedded.class)) {
      metadata.setType(com.impetus.kundera.metadata.EntityMetadata.Type.SUPER_COLUMN_FAMILY);
      String superColumnName=f.getName();
      Class superColumnFieldClass=f.getType();
      isEmbeddable=true;
      if (superColumnFieldClass.equals(List.class) || superColumnFieldClass.equals(Set.class)) {
        superColumnFieldClass=PropertyAccessorHelper.getGenericClass(f);
        populateSuperColumnInMetadata(metadata,f,superColumnFieldClass);
      }
 else {
        populateSuperColumnInMetadata(metadata,f,superColumnFieldClass);
      }
      metadata.addToEmbedCollection(superColumnFieldClass);
    }
 else {
      String name=getValidJPAColumnName(clazz,f);
      if (null != name) {
        if (!isEmbeddable) {
          metadata.addColumn(name,metadata.new Column(name,f));
        }
        SuperColumn superColumn=metadata.new SuperColumn(name,f);
        metadata.addSuperColumn(name,superColumn);
        superColumn.addColumn(name,f);
      }
    }
  }
  if (isEmbeddable && !metadata.getColumnsMap().isEmpty()) {
    Map<String,EntityMetadata.Column> cols=metadata.getColumnsMap();
    cols.clear();
    cols=null;
    metadata.setType(Type.SUPER_COLUMN_FAMILY);
  }
 else {
    Map<String,EntityMetadata.SuperColumn> superColumns=metadata.getSuperColumnsMap();
    superColumns.clear();
    superColumns=null;
    metadata.setType(Type.COLUMN_FAMILY);
  }
}","private void populateMetadata(EntityMetadata metadata,Class<?> clazz){
  Table table=clazz.getAnnotation(Table.class);
  boolean isEmbeddable=false;
  metadata.setTableName(table.name());
  String schema=table.schema().length() != 0 ? table.schema() : emf.getSchema();
  metadata.setSchema(schema);
  metadata.setType(com.impetus.kundera.metadata.EntityMetadata.Type.COLUMN_FAMILY);
  for (  Field f : clazz.getDeclaredFields()) {
    if (f.isAnnotationPresent(Id.class)) {
      LOG.debug(f.getName() + ""String_Node_Str"");
      metadata.setIdProperty(f);
      populateIdAccessorMethods(metadata,clazz,f);
      populateIdColumn(metadata,clazz,f);
    }
 else     if (f.isAnnotationPresent(Embedded.class)) {
      metadata.setType(com.impetus.kundera.metadata.EntityMetadata.Type.SUPER_COLUMN_FAMILY);
      String superColumnName=f.getName();
      Class superColumnFieldClass=f.getType();
      isEmbeddable=true;
      if (superColumnFieldClass.equals(List.class) || superColumnFieldClass.equals(Set.class)) {
        superColumnFieldClass=PropertyAccessorHelper.getGenericClass(f);
        populateSuperColumnInMetadata(metadata,f,superColumnFieldClass);
      }
 else {
        populateSuperColumnInMetadata(metadata,f,superColumnFieldClass);
      }
      metadata.addToEmbedCollection(superColumnFieldClass);
    }
 else {
      String name=getValidJPAColumnName(clazz,f);
      if (null != name) {
        if (!isEmbeddable) {
          metadata.addColumn(name,metadata.new Column(name,f));
        }
        SuperColumn superColumn=metadata.new SuperColumn(name,f);
        metadata.addSuperColumn(name,superColumn);
        superColumn.addColumn(name,f);
      }
    }
  }
  if (isEmbeddable) {
    Map<String,EntityMetadata.Column> cols=metadata.getColumnsMap();
    cols.clear();
    cols=null;
    metadata.setType(Type.SUPER_COLUMN_FAMILY);
  }
 else {
    Map<String,EntityMetadata.SuperColumn> superColumns=metadata.getSuperColumnsMap();
    superColumns.clear();
    superColumns=null;
    metadata.setType(Type.COLUMN_FAMILY);
  }
}",0.9905910735826297
177098,"/** 
 * Start solandra server.
 */
public void startSolandraServer(){
  log.info(""String_Node_Str"");
  new CassandraUtils();
  CassandraUtils.cacheInvalidationInterval=0;
  try {
    createCassSchema();
    Thread.sleep(10000);
    CassandraUtils.startupServer();
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
  }
}","/** 
 * Start solandra server.
 */
public void startSolandraServer(){
  log.info(""String_Node_Str"");
  new CassandraUtils();
  CassandraUtils.cacheInvalidationInterval=0;
  try {
    createCassSchema();
    Thread.sleep(10000);
  }
 catch (  Throwable t) {
    log.error(""String_Node_Str"",t);
  }
}",0.9430379746835444
177099,"/** 
 * Perform indexing.
 * @param metadata the metadata
 * @param object the object
 */
private void performIndexing(EntityMetadata metadata,Object object){
  Document currentDoc=null;
  if (metadata.getType().equals(EntityMetadata.Type.SUPER_COLUMN_FAMILY)) {
    Map<String,EntityMetadata.SuperColumn> superColMap=metadata.getSuperColumnsMap();
    for (    String superColumnName : superColMap.keySet()) {
      EntityMetadata.SuperColumn superColumn=superColMap.get(superColumnName);
      currentDoc=new Document();
      prepareIndexDocument(metadata,object,currentDoc);
      indexSuperColumnName(superColumnName,currentDoc);
      for (      EntityMetadata.Column col : superColumn.getColumns()) {
        java.lang.reflect.Field field=col.getField();
        String colName=col.getName();
        String indexName=metadata.getIndexName();
        try {
          indexField(PropertyAccessorHelper.getObject(object,superColumnName),currentDoc,field,colName,indexName);
        }
 catch (        PropertyAccessException e) {
          LOG.error(""String_Node_Str"" + superColumnName);
        }
      }
      addIndexProperties(metadata,object,currentDoc);
      onPersist(metadata,currentDoc);
    }
  }
 else {
    currentDoc=new Document();
    prepareIndexDocument(metadata,object,currentDoc);
    addIndexProperties(metadata,object,currentDoc);
    onPersist(metadata,currentDoc);
  }
}","/** 
 * Perform indexing.
 * @param metadata the metadata
 * @param object the object
 */
private void performIndexing(EntityMetadata metadata,Object object){
  Document currentDoc=null;
  Object embeddedObject=null;
  if (metadata.getType().equals(EntityMetadata.Type.SUPER_COLUMN_FAMILY)) {
    Map<String,EntityMetadata.SuperColumn> superColMap=metadata.getSuperColumnsMap();
    for (    String superColumnName : superColMap.keySet()) {
      EntityMetadata.SuperColumn superColumn=superColMap.get(superColumnName);
      currentDoc=new Document();
      prepareIndexDocument(metadata,object,currentDoc);
      indexSuperColumnName(superColumnName,currentDoc);
      try {
        embeddedObject=PropertyAccessorHelper.getObject(object,superColumnName);
        if (embeddedObject == null) {
          return;
        }
      }
 catch (      PropertyAccessException e) {
        LOG.error(""String_Node_Str"" + superColumnName);
      }
      for (      EntityMetadata.Column col : superColumn.getColumns()) {
        java.lang.reflect.Field field=col.getField();
        String colName=col.getName();
        String indexName=metadata.getIndexName();
        indexField(embeddedObject,currentDoc,field,colName,indexName);
      }
      addIndexProperties(metadata,object,currentDoc);
      onPersist(metadata,currentDoc);
    }
  }
 else {
    currentDoc=new Document();
    prepareIndexDocument(metadata,object,currentDoc);
    addIndexProperties(metadata,object,currentDoc);
    onPersist(metadata,currentDoc);
  }
}",0.7721822541966427
177100,"/** 
 * Inits the entity class.
 */
private void initEntityClass(){
  String fromArray[]=from.split(""String_Node_Str"");
  if (fromArray.length != 2) {
    throw new PersistenceException(""String_Node_Str"" + from);
  }
  StringTokenizer tokenizer=new StringTokenizer(getResult(),""String_Node_Str"");
  while (tokenizer.hasMoreTokens()) {
    String token=tokenizer.nextToken();
    if (!token.startsWith(fromArray[1])) {
      throw new RuntimeException(""String_Node_Str"" + token);
    }
  }
  this.entityName=fromArray[0];
  this.entityAlias=fromArray[1];
  entityClass=metadataManager.getEntityClassByName(entityName);
  if (null == entityClass) {
    throw new PersistenceException(""String_Node_Str"" + entityName);
  }
  EntityMetadata metadata=metadataManager.getEntityMetadata(entityClass);
  if (!metadata.isIndexable()) {
    throw new PersistenceException(entityClass + ""String_Node_Str"");
  }
}","/** 
 * Inits the entity class.
 */
private void initEntityClass(){
  String fromArray[]=from.split(""String_Node_Str"");
  if (fromArray.length != 2) {
    throw new PersistenceException(""String_Node_Str"" + from);
  }
  StringTokenizer tokenizer=new StringTokenizer(getResult(),""String_Node_Str"");
  while (tokenizer.hasMoreTokens()) {
    String token=tokenizer.nextToken();
    if (!token.startsWith(fromArray[1]) || !token.startsWith(fromArray[1] + ""String_Node_Str"")) {
      throw new RuntimeException(""String_Node_Str"" + token);
    }
  }
  this.entityName=fromArray[0];
  this.entityAlias=fromArray[1];
  entityClass=metadataManager.getEntityClassByName(entityName);
  if (null == entityClass) {
    throw new PersistenceException(""String_Node_Str"" + entityName);
  }
  EntityMetadata metadata=metadataManager.getEntityMetadata(entityClass);
  if (!metadata.isIndexable()) {
    throw new PersistenceException(entityClass + ""String_Node_Str"");
  }
}",0.9703504043126684
177101,"private void populateSuperColumnInMetadata(EntityMetadata metadata,Field superColumnField,Class superColumnClass){
  Annotation ann=superColumnClass.getAnnotation(Embeddable.class);
  if (ann == null) {
    LOG.warn(superColumnClass + ""String_Node_Str"");
    return;
  }
  String superColumnName=superColumnField.getName();
  EntityMetadata.SuperColumn superColumn=metadata.getSuperColumn(superColumnName);
  if (null == superColumn) {
    superColumn=metadata.new SuperColumn(superColumnName,superColumnField);
  }
  for (  Field columnField : superColumnClass.getDeclaredFields()) {
    String columnName=columnField.getName();
    superColumn.addColumn(columnName,columnField);
  }
  metadata.addSuperColumn(superColumnName,superColumn);
}","private void populateSuperColumnInMetadata(EntityMetadata metadata,Field superColumnField,Class superColumnClass){
  Annotation ann=superColumnClass.getAnnotation(Embeddable.class);
  if (ann == null) {
    LOG.warn(superColumnClass + ""String_Node_Str"");
  }
  String superColumnName=superColumnField.getName();
  EntityMetadata.SuperColumn superColumn=metadata.getSuperColumn(superColumnName);
  if (null == superColumn) {
    superColumn=metadata.new SuperColumn(superColumnName,superColumnField);
  }
  for (  Field columnField : superColumnClass.getDeclaredFields()) {
    String columnName=columnField.getName();
    superColumn.addColumn(columnName,columnField);
  }
  metadata.addSuperColumn(superColumnName,superColumn);
}",0.9918478260869564
177102,"/** 
 * Creates a MongoDB document object wrt a given Java object. columns in the document correspond Columns provided as List.
 * @throws PropertyAccessException
 */
public static BasicDBObject getDocumentFromObject(Object obj,List<Column> columns) throws PropertyAccessException {
  BasicDBObject dBObj=new BasicDBObject();
  for (  Column column : columns) {
    Object val=PropertyAccessorHelper.getObject(obj,column.getField());
    dBObj.put(column.getName(),val);
  }
  return dBObj;
}","/** 
 * Creates a MongoDB document object wrt a given Java object. columns in the document correspond Columns provided as List.
 * @throws PropertyAccessException
 */
public static BasicDBObject getDocumentFromObject(Object obj,List<Column> columns) throws PropertyAccessException {
  BasicDBObject dBObj=new BasicDBObject();
  for (  Column column : columns) {
    Field f=column.getField();
    if (f.getType().isPrimitive() || f.getType().equals(String.class) || f.getType().equals(Integer.class)|| f.getType().equals(Long.class)|| f.getType().equals(Short.class)|| f.getType().equals(Float.class)|| f.getType().equals(Double.class)) {
      Object val=PropertyAccessorHelper.getObject(obj,column.getField());
      dBObj.put(column.getName(),val);
    }
 else {
      log.warn(""String_Node_Str"" + f.getName() + ""String_Node_Str"");
    }
  }
  return dBObj;
}",0.707533234859675
177103,"/** 
 * From thrift row.
 * @param < E > the element type
 * @param clazz the clazz
 * @param m the m
 * @param cr the cr
 * @return the e
 * @throws Exception the exception
 */
private <E>E fromThriftRow(Class<E> clazz,EntityMetadata m,BaseDataAccessor.ThriftRow<SuperColumn> cr) throws Exception {
  E e=clazz.newInstance();
  PropertyAccessorHelper.set(e,m.getIdProperty(),cr.getId());
  Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
  for (  Map.Entry<String,EntityMetadata.SuperColumn> entry : m.getSuperColumnsMap().entrySet()) {
    for (    EntityMetadata.Column cMetadata : entry.getValue().getColumns()) {
      columnNameToFieldMap.put(cMetadata.getName(),cMetadata.getField());
    }
  }
  for (  SuperColumn sc : cr.getColumns()) {
    String scName=PropertyAccessorFactory.STRING.fromBytes(sc.getName());
    boolean intoRelations=false;
    if (scName.equals(TO_ONE_SUPER_COL_NAME)) {
      intoRelations=true;
    }
    for (    Column column : sc.getColumns()) {
      String name=PropertyAccessorFactory.STRING.fromBytes(column.getName());
      byte[] value=column.getValue();
      if (value == null) {
        continue;
      }
      if (intoRelations) {
        EntityMetadata.Relation relation=m.getRelation(name);
        String foreignKeys=PropertyAccessorFactory.STRING.fromBytes(value);
        Set<String> keys=deserializeKeys(foreignKeys);
        getEntityManager().getEntityResolver().populateForeignEntities(e,cr.getId(),relation,keys.toArray(new String[0]));
      }
 else {
        Field field=columnNameToFieldMap.get(name);
        PropertyAccessorHelper.set(PropertyAccessorHelper.getObject(e,scName),field,value);
      }
    }
  }
  return e;
}","/** 
 * From thrift row.
 * @param < E > the element type
 * @param clazz the clazz
 * @param m the m
 * @param cr the cr
 * @return the e
 * @throws Exception the exception
 */
private <E>E fromThriftRow(Class<E> clazz,EntityMetadata m,BaseDataAccessor.ThriftRow<SuperColumn> cr) throws Exception {
  E e=clazz.newInstance();
  PropertyAccessorHelper.set(e,m.getIdProperty(),cr.getId());
  Map<String,Field> columnNameToFieldMap=new HashMap<String,Field>();
  for (  Map.Entry<String,EntityMetadata.SuperColumn> entry : m.getSuperColumnsMap().entrySet()) {
    for (    EntityMetadata.Column cMetadata : entry.getValue().getColumns()) {
      columnNameToFieldMap.put(cMetadata.getName(),cMetadata.getField());
    }
  }
  for (  SuperColumn sc : cr.getColumns()) {
    String scName=PropertyAccessorFactory.STRING.fromBytes(sc.getName());
    if (scName.indexOf(Constants.SUPER_COLUMN_NAME_DELIMITER) != -1) {
      String scFieldName=scName.substring(0,scName.indexOf(Constants.SUPER_COLUMN_NAME_DELIMITER));
      Field superColumnField=e.getClass().getDeclaredField(scFieldName);
      Collection embeddedCollection=null;
      if (superColumnField.getType().equals(List.class)) {
        embeddedCollection=new ArrayList();
      }
 else       if (superColumnField.getType().equals(Set.class)) {
        embeddedCollection=new HashSet();
      }
      PelopsDataHandler handler=new PelopsDataHandler();
      Object embeddedObject=handler.populateEmbeddedObject(sc,m);
      embeddedCollection.add(embeddedObject);
    }
 else {
      boolean intoRelations=false;
      if (scName.equals(TO_ONE_SUPER_COL_NAME)) {
        intoRelations=true;
      }
      for (      Column column : sc.getColumns()) {
        String name=PropertyAccessorFactory.STRING.fromBytes(column.getName());
        byte[] value=column.getValue();
        if (value == null) {
          continue;
        }
        if (intoRelations) {
          EntityMetadata.Relation relation=m.getRelation(name);
          String foreignKeys=PropertyAccessorFactory.STRING.fromBytes(value);
          Set<String> keys=deserializeKeys(foreignKeys);
          getEntityManager().getEntityResolver().populateForeignEntities(e,cr.getId(),relation,keys.toArray(new String[0]));
        }
 else {
          Field field=columnNameToFieldMap.get(name);
          Object embeddedObject=PropertyAccessorHelper.getObject(e,scName);
          PropertyAccessorHelper.set(embeddedObject,field,value);
        }
      }
    }
  }
  return e;
}",0.7771428571428571
177104,"/** 
 * Perform indexing.
 * @param metadata the metadata
 * @param object the object
 */
private void performIndexing(EntityMetadata metadata,Object object){
  Document currentDoc=null;
  Object embeddedObject=null;
  if (metadata.getType().equals(EntityMetadata.Type.SUPER_COLUMN_FAMILY)) {
    Map<String,EntityMetadata.SuperColumn> superColMap=metadata.getSuperColumnsMap();
    for (    String superColumnName : superColMap.keySet()) {
      EntityMetadata.SuperColumn superColumn=superColMap.get(superColumnName);
      currentDoc=new Document();
      prepareIndexDocument(metadata,object,currentDoc);
      indexSuperColumnName(superColumnName,currentDoc);
      try {
        embeddedObject=PropertyAccessorHelper.getObject(object,superColumnName);
        if (embeddedObject == null) {
          return;
        }
      }
 catch (      PropertyAccessException e) {
        LOG.error(""String_Node_Str"" + superColumnName);
      }
      for (      EntityMetadata.Column col : superColumn.getColumns()) {
        java.lang.reflect.Field field=col.getField();
        String colName=col.getName();
        String indexName=metadata.getIndexName();
        indexField(embeddedObject,currentDoc,field,colName,indexName);
      }
      addIndexProperties(metadata,object,currentDoc);
      onPersist(metadata,currentDoc);
    }
  }
 else {
    currentDoc=new Document();
    prepareIndexDocument(metadata,object,currentDoc);
    addIndexProperties(metadata,object,currentDoc);
    onPersist(metadata,currentDoc);
  }
}","/** 
 * Perform indexing.
 * @param metadata the metadata
 * @param object the object
 */
private void performIndexing(EntityMetadata metadata,Object object){
  Document currentDoc=null;
  Object embeddedObject=null;
  if (metadata.getType().equals(EntityMetadata.Type.SUPER_COLUMN_FAMILY)) {
    Map<String,EntityMetadata.SuperColumn> superColMap=metadata.getSuperColumnsMap();
    for (    String superColumnName : superColMap.keySet()) {
      EntityMetadata.SuperColumn superColumn=superColMap.get(superColumnName);
      try {
        embeddedObject=PropertyAccessorHelper.getObject(object,superColumnName);
        if (embeddedObject == null) {
          return;
        }
        if (embeddedObject instanceof Collection<?>) {
          for (          Object obj : (Collection<?>)embeddedObject) {
            currentDoc=prepareDocument(metadata,object,superColumnName);
            indexSuperColumn(metadata,object,currentDoc,obj,superColumn);
          }
          return;
        }
 else {
          currentDoc=prepareDocument(metadata,object,superColumnName);
        }
      }
 catch (      PropertyAccessException e) {
        LOG.error(""String_Node_Str"" + superColumnName);
      }
      indexSuperColumn(metadata,object,currentDoc,embeddedObject,superColumn);
    }
  }
 else {
    currentDoc=new Document();
    prepareIndexDocument(metadata,object,currentDoc);
    addIndexProperties(metadata,object,currentDoc);
    onPersist(metadata,currentDoc);
  }
}",0.5434491978609626
177105,"/** 
 * Gets the embedded object.
 * @param obj the obj
 * @param fieldName the field name
 * @return the embedded object
 */
public static final Object getObject(Object obj,String fieldName) throws PropertyAccessException {
  Field embeddedField;
  try {
    embeddedField=obj.getClass().getDeclaredField(fieldName);
    if (embeddedField != null) {
      if (!embeddedField.isAccessible()) {
        embeddedField.setAccessible(true);
      }
      return embeddedField.get(obj);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + fieldName);
    }
  }
 catch (  SecurityException e) {
    throw new PropertyAccessException(e);
  }
catch (  NoSuchFieldException e) {
    throw new PropertyAccessException(e);
  }
catch (  IllegalArgumentException e) {
    throw new PropertyAccessException(e);
  }
catch (  IllegalAccessException e) {
    throw new PropertyAccessException(e);
  }
}","/** 
 * Gets the embedded object.
 * @param obj the obj
 * @param fieldName the field name
 * @return the embedded object
 */
@SuppressWarnings(""String_Node_Str"") public static final Object getObject(Object obj,String fieldName) throws PropertyAccessException {
  Field embeddedField;
  try {
    embeddedField=obj.getClass().getDeclaredField(fieldName);
    if (embeddedField != null) {
      if (!embeddedField.isAccessible()) {
        embeddedField.setAccessible(true);
      }
      Object embededObject=embeddedField.get(obj);
      if (embededObject == null) {
        embededObject=embeddedField.getType().newInstance();
        embeddedField.set(obj,embededObject);
      }
      return embededObject;
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + fieldName);
    }
  }
 catch (  SecurityException e) {
    throw new PropertyAccessException(e);
  }
catch (  NoSuchFieldException e) {
    throw new PropertyAccessException(e);
  }
catch (  IllegalArgumentException e) {
    throw new PropertyAccessException(e);
  }
catch (  IllegalAccessException e) {
    throw new PropertyAccessException(e);
  }
catch (  InstantiationException e) {
    throw new PropertyAccessException(e);
  }
}",0.4734848484848485
177106,"/** 
 * Inits the entity class.
 */
private void initEntityClass(){
  String fromArray[]=from.split(""String_Node_Str"");
  if (fromArray.length != 2) {
    throw new PersistenceException(""String_Node_Str"" + from);
  }
  StringTokenizer tokenizer=new StringTokenizer(getResult(),""String_Node_Str"");
  while (tokenizer.hasMoreTokens()) {
    String token=tokenizer.nextToken();
    if (!token.startsWith(fromArray[1]) || !token.startsWith(fromArray[1] + ""String_Node_Str"")) {
      throw new RuntimeException(""String_Node_Str"" + token);
    }
  }
  this.entityName=fromArray[0];
  this.entityAlias=fromArray[1];
  entityClass=metadataManager.getEntityClassByName(entityName);
  if (null == entityClass) {
    throw new PersistenceException(""String_Node_Str"" + entityName);
  }
  EntityMetadata metadata=metadataManager.getEntityMetadata(entityClass);
  if (!metadata.isIndexable()) {
    throw new PersistenceException(entityClass + ""String_Node_Str"");
  }
}","/** 
 * Inits the entity class.
 */
private void initEntityClass(){
  String fromArray[]=from.split(""String_Node_Str"");
  if (fromArray.length != 2) {
    throw new PersistenceException(""String_Node_Str"" + from);
  }
  StringTokenizer tokenizer=new StringTokenizer(getResult(),""String_Node_Str"");
  while (tokenizer.hasMoreTokens()) {
    String token=tokenizer.nextToken();
    if (!StringUtils.contains(fromArray[1] + ""String_Node_Str"",token)) {
      throw new RuntimeException(""String_Node_Str"" + token);
    }
  }
  this.entityName=fromArray[0];
  this.entityAlias=fromArray[1];
  entityClass=metadataManager.getEntityClassByName(entityName);
  if (null == entityClass) {
    throw new PersistenceException(""String_Node_Str"" + entityName);
  }
  EntityMetadata metadata=metadataManager.getEntityMetadata(entityClass);
  if (!metadata.isIndexable()) {
    throw new PersistenceException(entityClass + ""String_Node_Str"");
  }
}",0.5655172413793104
177107,"@Override public void unindex(EntityMetadata metadata,String id){
  throw new PersistenceException(""String_Node_Str"");
}","@Override public void unindex(EntityMetadata metadata,String id){
  log.debug(""String_Node_Str"");
}",0.8401826484018264
177108,"public void test(){
  parametiarizedQuery();
}","public void test(){
  saveEmail();
  selectAllQuery();
  parametiarizedQuery();
  deleteEmail();
}",0.6388888888888888
177109,"public void createIndex(String collectionName,List<String> columnList,int order){
  DBCollection coll=mongoDb.getCollection(collectionName);
  connect();
  List<DBObject> indexes=coll.getIndexInfo();
  Set<String> indexNames=new HashSet<String>();
  for (  DBObject index : indexes) {
    BasicDBObject obj=(BasicDBObject)index.get(""String_Node_Str"");
    Set<String> set=obj.keySet();
    indexNames.addAll(set);
  }
  for (  String columnName : columnList) {
    if (!indexNames.contains(columnName)) {
      coll.createIndex(new BasicDBObject(columnName,order));
    }
  }
  shutdown();
}","public void createIndex(String collectionName,List<String> columnList,int order){
  DBCollection coll=mongoDb.getCollection(collectionName);
  List<DBObject> indexes=coll.getIndexInfo();
  Set<String> indexNames=new HashSet<String>();
  for (  DBObject index : indexes) {
    BasicDBObject obj=(BasicDBObject)index.get(""String_Node_Str"");
    Set<String> set=obj.keySet();
    indexNames.addAll(set);
  }
  for (  String columnName : columnList) {
    if (!indexNames.contains(columnName)) {
      coll.createIndex(new BasicDBObject(columnName,order));
    }
  }
}",0.9766233766233766
177110,"public ClasspathReader(List<String> classesToScan){
  this.classesToScan=classesToScan;
}","public ClasspathReader(List<String> classesToScan){
  this();
  this.classesToScan=classesToScan;
}",0.946808510638298
177111,"@Override public void writeColumns(EntityManagerImpl em,EnhancedEntity e,EntityMetadata m) throws Exception {
  String dbName=m.getKeyspaceName();
  String documentName=m.getColumnFamilyName();
  String key=e.getId();
  log.debug(""String_Node_Str"" + dbName + ""String_Node_Str""+ documentName+ ""String_Node_Str""+ key);
  DBCollection dbCollection=mongoDb.getCollection(documentName);
  BasicDBObject document=new MongoDBDataHandler().getDocumentFromEntity(em,m,e.getEntity());
  dbCollection.insert(document);
}","@Override public void writeColumns(EntityManagerImpl em,EnhancedEntity e,EntityMetadata m) throws Exception {
  String dbName=m.getKeyspaceName();
  String documentName=m.getColumnFamilyName();
  String key=e.getId();
  log.debug(""String_Node_Str"" + dbName + ""String_Node_Str""+ documentName+ ""String_Node_Str""+ key);
  Object entity=loadColumns(em,m.getEntityClazz(),dbName,documentName,key,m);
  if (entity != null) {
    log.debug(""String_Node_Str"" + dbName + ""String_Node_Str""+ documentName+ ""String_Node_Str""+ key);
    DBCollection dbCollection=mongoDb.getCollection(documentName);
    BasicDBObject searchQuery=new BasicDBObject();
    searchQuery.put(m.getIdColumn().getName(),key);
    BasicDBObject updatedDocument=new MongoDBDataHandler().getDocumentFromEntity(em,m,e.getEntity());
    dbCollection.update(searchQuery,updatedDocument);
  }
 else {
    log.debug(""String_Node_Str"" + dbName + ""String_Node_Str""+ documentName+ ""String_Node_Str""+ key);
    DBCollection dbCollection=mongoDb.getCollection(documentName);
    BasicDBObject document=new MongoDBDataHandler().getDocumentFromEntity(em,m,e.getEntity());
    dbCollection.insert(document);
  }
}",0.562874251497006
177112,"private static StringBuilder loadFile(File file) throws IOException {
  StringBuilder sb=new StringBuilder();
  FileReader fr=new FileReader(file);
  BufferedReader br=new BufferedReader(fr);
  try {
    for (String line; (line=br.readLine()) != null; ) {
      sb.append(line).append('\n');
    }
  }
  finally {
    br.close();
  }
  return sb;
}","private static List<String> loadFile(File file) throws IOException {
  return readAllLines(file.toPath());
}",0.3333333333333333
177113,"private static List<String> extractPropertyNames(CharSequence content){
  List<String> result=new ArrayList<String>();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(content);
  while (matcher.find()) {
    result.add(matcher.group(1));
  }
  return result;
}","private static List<String> extractPropertyNames(List<String> content){
  return extract(content,Pattern.compile(""String_Node_Str""));
}",0.5195402298850574
177114,"private static List<String> extractDescriptions(CharSequence content){
  List<String> result=new ArrayList<String>();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(content);
  while (matcher.find()) {
    result.add(matcher.group(1));
  }
  return result;
}","private static List<String> extractDescriptions(List<String> content){
  return extract(content,Pattern.compile(""String_Node_Str""));
}",0.5173210161662818
177115,"private JsonNode exampleNode(JsonType jsonType,String specifiedExample,String specifiedExample2,Context context){
  if (jsonType instanceof JsonClassType) {
    TypeDefinition typeDefinition=((JsonClassType)jsonType).getTypeDefinition();
    if (typeDefinition instanceof ObjectTypeDefinition) {
      ObjectNode objectNode=JsonNodeFactory.instance.objectNode();
      if (!context.stack.contains(typeDefinition.getQualifiedName().toString())) {
        context.stack.push(typeDefinition.getQualifiedName().toString());
        try {
          build(objectNode,(ObjectTypeDefinition)typeDefinition,context);
        }
  finally {
          context.stack.pop();
        }
      }
      return objectNode;
    }
 else     if (typeDefinition instanceof EnumTypeDefinition) {
      String example=""String_Node_Str"";
      if (specifiedExample != null) {
        example=specifiedExample;
      }
 else {
        List<EnumValue> enumValues=((EnumTypeDefinition)typeDefinition).getEnumValues();
        if (enumValues.size() > 0) {
          int index=new Random().nextInt(enumValues.size());
          example=enumValues.get(index).getValue();
        }
      }
      return JsonNodeFactory.instance.textNode(example);
    }
 else {
      return exampleNode(((SimpleTypeDefinition)typeDefinition).getBaseType(),specifiedExample,specifiedExample2,context);
    }
  }
 else   if (jsonType instanceof JsonMapType) {
    ObjectNode mapNode=JsonNodeFactory.instance.objectNode();
    JsonType valueType=((JsonMapType)jsonType).getValueType();
    String key1Example=""String_Node_Str"";
    if (specifiedExample != null) {
      int firstSpace=JavaDoc.indexOfFirstWhitespace(specifiedExample);
      if (firstSpace >= 0) {
        key1Example=specifiedExample.substring(0,firstSpace);
        specifiedExample=specifiedExample.substring(firstSpace + 1).trim();
        if (specifiedExample.isEmpty()) {
          specifiedExample=null;
        }
      }
    }
    String key2Example=""String_Node_Str"";
    if (specifiedExample2 != null) {
      int firstSpace=JavaDoc.indexOfFirstWhitespace(specifiedExample2);
      if (firstSpace >= 0) {
        key1Example=specifiedExample2.substring(0,firstSpace);
        specifiedExample2=specifiedExample2.substring(firstSpace + 1).trim();
        if (specifiedExample2.isEmpty()) {
          specifiedExample2=null;
        }
      }
    }
    mapNode.set(key1Example,exampleNode(valueType,specifiedExample,specifiedExample2,context));
    Context context2=new Context();
    context2.stack=context.stack;
    context2.currentIndex=1;
    mapNode.set(key2Example,exampleNode(valueType,specifiedExample,specifiedExample2,context2));
    return mapNode;
  }
 else   if (jsonType.isArray()) {
    ArrayNode arrayNode=JsonNodeFactory.instance.arrayNode();
    if (jsonType instanceof JsonArrayType) {
      JsonNode componentNode=exampleNode(((JsonArrayType)jsonType).getComponentType(),specifiedExample,specifiedExample2,context);
      arrayNode.add(componentNode);
      Context context2=new Context();
      context2.stack=context.stack;
      context2.currentIndex=1;
      JsonNode componentNode2=exampleNode(((JsonArrayType)jsonType).getComponentType(),specifiedExample2,specifiedExample,context2);
      arrayNode.add(componentNode2);
    }
    return arrayNode;
  }
 else   if (jsonType.isWholeNumber()) {
    Long example=12345L;
    if (specifiedExample != null) {
      try {
        example=Long.parseLong(specifiedExample);
      }
 catch (      NumberFormatException e) {
        this.type.getContext().getContext().getLogger().warn(""String_Node_Str"",specifiedExample);
      }
    }
    return JsonNodeFactory.instance.numberNode(example);
  }
 else   if (jsonType.isNumber()) {
    Double example=12345D;
    if (specifiedExample != null) {
      try {
        example=Double.parseDouble(specifiedExample);
      }
 catch (      NumberFormatException e) {
        this.type.getContext().getContext().getLogger().warn(""String_Node_Str"",specifiedExample);
      }
    }
    return JsonNodeFactory.instance.numberNode(example);
  }
 else   if (jsonType.isBoolean()) {
    boolean example=!""String_Node_Str"".equals(specifiedExample);
    return JsonNodeFactory.instance.booleanNode(example);
  }
 else   if (jsonType.isString()) {
    String example=specifiedExample;
    if (example == null) {
      example=""String_Node_Str"";
    }
    return JsonNodeFactory.instance.textNode(example);
  }
 else {
    return JsonNodeFactory.instance.objectNode();
  }
}","private JsonNode exampleNode(JsonType jsonType,String specifiedExample,String specifiedExample2,Context context){
  if (jsonType instanceof JsonClassType) {
    TypeDefinition typeDefinition=((JsonClassType)jsonType).getTypeDefinition();
    if (typeDefinition instanceof ObjectTypeDefinition) {
      ObjectNode objectNode=JsonNodeFactory.instance.objectNode();
      if (!context.stack.contains(typeDefinition.getQualifiedName().toString())) {
        context.stack.push(typeDefinition.getQualifiedName().toString());
        try {
          final ObjectTypeDefinition objTypeDef=(ObjectTypeDefinition)typeDefinition;
          build(objectNode,objTypeDef,objTypeDef,context);
        }
  finally {
          context.stack.pop();
        }
      }
      return objectNode;
    }
 else     if (typeDefinition instanceof EnumTypeDefinition) {
      String example=""String_Node_Str"";
      if (specifiedExample != null) {
        example=specifiedExample;
      }
 else {
        List<EnumValue> enumValues=((EnumTypeDefinition)typeDefinition).getEnumValues();
        if (enumValues.size() > 0) {
          int index=new Random().nextInt(enumValues.size());
          example=enumValues.get(index).getValue();
        }
      }
      return JsonNodeFactory.instance.textNode(example);
    }
 else {
      return exampleNode(((SimpleTypeDefinition)typeDefinition).getBaseType(),specifiedExample,specifiedExample2,context);
    }
  }
 else   if (jsonType instanceof JsonMapType) {
    ObjectNode mapNode=JsonNodeFactory.instance.objectNode();
    JsonType valueType=((JsonMapType)jsonType).getValueType();
    String key1Example=""String_Node_Str"";
    if (specifiedExample != null) {
      int firstSpace=JavaDoc.indexOfFirstWhitespace(specifiedExample);
      if (firstSpace >= 0) {
        key1Example=specifiedExample.substring(0,firstSpace);
        specifiedExample=specifiedExample.substring(firstSpace + 1).trim();
        if (specifiedExample.isEmpty()) {
          specifiedExample=null;
        }
      }
    }
    String key2Example=""String_Node_Str"";
    if (specifiedExample2 != null) {
      int firstSpace=JavaDoc.indexOfFirstWhitespace(specifiedExample2);
      if (firstSpace >= 0) {
        key1Example=specifiedExample2.substring(0,firstSpace);
        specifiedExample2=specifiedExample2.substring(firstSpace + 1).trim();
        if (specifiedExample2.isEmpty()) {
          specifiedExample2=null;
        }
      }
    }
    mapNode.set(key1Example,exampleNode(valueType,specifiedExample,specifiedExample2,context));
    Context context2=new Context();
    context2.stack=context.stack;
    context2.currentIndex=1;
    mapNode.set(key2Example,exampleNode(valueType,specifiedExample,specifiedExample2,context2));
    return mapNode;
  }
 else   if (jsonType.isArray()) {
    ArrayNode arrayNode=JsonNodeFactory.instance.arrayNode();
    if (jsonType instanceof JsonArrayType) {
      JsonNode componentNode=exampleNode(((JsonArrayType)jsonType).getComponentType(),specifiedExample,specifiedExample2,context);
      arrayNode.add(componentNode);
      Context context2=new Context();
      context2.stack=context.stack;
      context2.currentIndex=1;
      JsonNode componentNode2=exampleNode(((JsonArrayType)jsonType).getComponentType(),specifiedExample2,specifiedExample,context2);
      arrayNode.add(componentNode2);
    }
    return arrayNode;
  }
 else   if (jsonType.isWholeNumber()) {
    Long example=12345L;
    if (specifiedExample != null) {
      try {
        example=Long.parseLong(specifiedExample);
      }
 catch (      NumberFormatException e) {
        this.type.getContext().getContext().getLogger().warn(""String_Node_Str"",specifiedExample);
      }
    }
    return JsonNodeFactory.instance.numberNode(example);
  }
 else   if (jsonType.isNumber()) {
    Double example=12345D;
    if (specifiedExample != null) {
      try {
        example=Double.parseDouble(specifiedExample);
      }
 catch (      NumberFormatException e) {
        this.type.getContext().getContext().getLogger().warn(""String_Node_Str"",specifiedExample);
      }
    }
    return JsonNodeFactory.instance.numberNode(example);
  }
 else   if (jsonType.isBoolean()) {
    boolean example=!""String_Node_Str"".equals(specifiedExample);
    return JsonNodeFactory.instance.booleanNode(example);
  }
 else   if (jsonType.isString()) {
    String example=specifiedExample;
    if (example == null) {
      example=""String_Node_Str"";
    }
    return JsonNodeFactory.instance.textNode(example);
  }
 else {
    return JsonNodeFactory.instance.objectNode();
  }
}",0.9862046131773536
177116,"@Override public String getBody(){
  ObjectNode node=JsonNodeFactory.instance.objectNode();
  Context context=new Context();
  context.stack=new LinkedList<String>();
  build(node,this.type,context);
  if (this.type.getContext().isWrapRootValue()) {
    ObjectNode wrappedNode=JsonNodeFactory.instance.objectNode();
    wrappedNode.set(this.type.getJsonRootName(),node);
    node=wrappedNode;
  }
  JsonNode outer=node;
  for (  DataTypeReference.ContainerType container : this.containers) {
switch (container) {
case array:
case collection:
case list:
      ArrayNode arrayNode=JsonNodeFactory.instance.arrayNode();
    arrayNode.add(outer);
  outer=arrayNode;
break;
case map:
ObjectNode mapNode=JsonNodeFactory.instance.objectNode();
mapNode.set(""String_Node_Str"",outer);
outer=mapNode;
break;
}
}
ObjectMapper mapper=new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);
try {
return mapper.writeValueAsString(outer);
}
 catch (JsonProcessingException e) {
throw new EnunciateException(e);
}
}","@Override public String getBody(){
  ObjectNode node=JsonNodeFactory.instance.objectNode();
  Context context=new Context();
  context.stack=new LinkedList<String>();
  build(node,this.type,this.type,context);
  if (this.type.getContext().isWrapRootValue()) {
    ObjectNode wrappedNode=JsonNodeFactory.instance.objectNode();
    wrappedNode.set(this.type.getJsonRootName(),node);
    node=wrappedNode;
  }
  JsonNode outer=node;
  for (  DataTypeReference.ContainerType container : this.containers) {
switch (container) {
case array:
case collection:
case list:
      ArrayNode arrayNode=JsonNodeFactory.instance.arrayNode();
    arrayNode.add(outer);
  outer=arrayNode;
break;
case map:
ObjectNode mapNode=JsonNodeFactory.instance.objectNode();
mapNode.set(""String_Node_Str"",outer);
outer=mapNode;
break;
}
}
ObjectMapper mapper=new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);
try {
return mapper.writeValueAsString(outer);
}
 catch (JsonProcessingException e) {
throw new EnunciateException(e);
}
}",0.9950544015825916
177117,"private void build(ObjectNode node,ObjectTypeDefinition type,Context context){
  if (context.stack.size() > 2) {
    return;
  }
  if (type.getTypeIdInclusion() == JsonTypeInfo.As.PROPERTY) {
    if (type.getTypeIdProperty() != null) {
      node.put(type.getTypeIdProperty(),""String_Node_Str"");
    }
  }
  FacetFilter facetFilter=type.getContext().getContext().getConfiguration().getFacetFilter();
  for (  Member member : type.getMembers()) {
    if (!facetFilter.accept(member)) {
      continue;
    }
    if (ElementUtils.findDeprecationMessage(member,null) != null) {
      continue;
    }
    String example=null;
    String example2=null;
    JsonType exampleType=null;
    JavaDoc.JavaDocTagList tags=getDocumentationExampleTags(member);
    if (tags != null && tags.size() > 0) {
      String tag=tags.get(0).trim();
      example=tag.isEmpty() ? null : tag;
      example2=example;
      if (tags.size() > 1) {
        tag=tags.get(1).trim();
        example2=tag.isEmpty() ? null : tag;
      }
    }
    tags=member.getJavaDoc().get(""String_Node_Str"");
    if (tags != null && tags.size() > 0) {
      String tag=tags.get(0).trim();
      if (!tag.isEmpty()) {
        TypeElement typeElement=type.getContext().getContext().getProcessingEnvironment().getElementUtils().getTypeElement(tag);
        if (typeElement != null) {
          exampleType=JsonTypeFactory.getJsonType(typeElement.asType(),type.getContext());
        }
 else {
          type.getContext().getContext().getLogger().warn(""String_Node_Str"",tag);
        }
      }
    }
    DocumentationExample documentationExample=getDocumentationExample(member);
    if (documentationExample != null) {
      if (documentationExample.exclude()) {
        continue;
      }
      example=documentationExample.value();
      example=""String_Node_Str"".equals(example) ? null : example;
      example2=documentationExample.value2();
      example2=""String_Node_Str"".equals(example2) ? null : example2;
      TypeMirror typeHint=TypeHintUtils.getTypeHint(documentationExample.type(),type.getContext().getContext().getProcessingEnvironment(),null);
      if (typeHint != null) {
        exampleType=JsonTypeFactory.getJsonType(typeHint,type.getContext());
      }
    }
    String specifiedTypeInfoValue=findSpecifiedTypeInfoValue(member,type.getQualifiedName().toString(),type);
    if (specifiedTypeInfoValue != null) {
      example=specifiedTypeInfoValue;
      example2=specifiedTypeInfoValue;
    }
    String configuredExample=getConfiguredExample(member);
    if (configuredExample != null) {
      example=configuredExample;
      example2=configuredExample;
    }
    if (context.currentIndex % 2 > 0) {
      String placeholder=example2;
      example2=example;
      example=placeholder;
    }
    if (member.getChoices().size() > 1) {
      if (member.isCollectionType()) {
        final ArrayNode exampleNode=JsonNodeFactory.instance.arrayNode();
        for (        Member choice : member.getChoices()) {
          JsonType jsonType=exampleType == null ? choice.getJsonType() : exampleType;
          String choiceName=choice.getName();
          if (""String_Node_Str"".equals(choiceName)) {
            choiceName=""String_Node_Str"";
          }
          if (member.getSubtypeIdInclusion() == JsonTypeInfo.As.WRAPPER_ARRAY) {
            ArrayNode wrapperNode=JsonNodeFactory.instance.arrayNode();
            wrapperNode.add(choiceName);
            wrapperNode.add(exampleNode(jsonType,example,example2,context));
            exampleNode.add(wrapperNode);
          }
 else           if (member.getSubtypeIdInclusion() == JsonTypeInfo.As.WRAPPER_OBJECT) {
            ObjectNode wrapperNode=JsonNodeFactory.instance.objectNode();
            wrapperNode.set(choiceName,exampleNode(jsonType,example,example2,context));
            exampleNode.add(wrapperNode);
          }
 else {
            JsonNode itemNode=exampleNode(jsonType,example,example2,context);
            if (member.getSubtypeIdInclusion() == JsonTypeInfo.As.PROPERTY) {
              if (member.getSubtypeIdProperty() != null && itemNode instanceof ObjectNode) {
                ((ObjectNode)itemNode).put(member.getSubtypeIdProperty(),""String_Node_Str"");
              }
            }
 else             if (member.getSubtypeIdInclusion() == JsonTypeInfo.As.EXTERNAL_PROPERTY) {
              if (member.getSubtypeIdProperty() != null) {
                node.put(member.getSubtypeIdProperty(),""String_Node_Str"");
              }
            }
            exampleNode.add(itemNode);
          }
        }
        node.set(member.getName(),exampleNode);
      }
 else {
        for (        Member choice : member.getChoices()) {
          JsonNode exampleNode;
          JsonType jsonType=exampleType == null ? choice.getJsonType() : exampleType;
          String choiceName=choice.getName();
          if (""String_Node_Str"".equals(choiceName)) {
            choiceName=""String_Node_Str"";
          }
          if (member.getSubtypeIdInclusion() == JsonTypeInfo.As.WRAPPER_ARRAY) {
            ArrayNode wrapperNode=JsonNodeFactory.instance.arrayNode();
            wrapperNode.add(choiceName);
            wrapperNode.add(exampleNode(jsonType,example,example2,context));
            exampleNode=wrapperNode;
          }
 else           if (member.getSubtypeIdInclusion() == JsonTypeInfo.As.WRAPPER_OBJECT) {
            ObjectNode wrapperNode=JsonNodeFactory.instance.objectNode();
            wrapperNode.set(choiceName,exampleNode(jsonType,example,example2,context));
            exampleNode=wrapperNode;
          }
 else {
            exampleNode=exampleNode(jsonType,example,example2,context);
            if (member.getSubtypeIdInclusion() == JsonTypeInfo.As.PROPERTY) {
              if (member.getSubtypeIdProperty() != null && exampleNode instanceof ObjectNode) {
                ((ObjectNode)exampleNode).put(member.getSubtypeIdProperty(),""String_Node_Str"");
              }
            }
 else             if (member.getSubtypeIdInclusion() == JsonTypeInfo.As.EXTERNAL_PROPERTY) {
              if (member.getSubtypeIdProperty() != null) {
                node.put(member.getSubtypeIdProperty(),""String_Node_Str"");
              }
            }
          }
          node.set(member.getName(),exampleNode);
        }
      }
    }
 else {
      JsonType jsonType=exampleType == null ? member.getJsonType() : exampleType;
      node.set(member.getName(),exampleNode(jsonType,example,example2,context));
    }
  }
  JsonType supertype=type.getSupertype();
  if (supertype instanceof JsonClassType && ((JsonClassType)supertype).getTypeDefinition() instanceof ObjectTypeDefinition) {
    build(node,(ObjectTypeDefinition)((JsonClassType)supertype).getTypeDefinition(),context);
  }
  if (type.getWildcardMember() != null && ElementUtils.findDeprecationMessage(type.getWildcardMember(),null) == null && !ExampleUtils.isExcluded(type.getWildcardMember())) {
    node.put(""String_Node_Str"",""String_Node_Str"");
    node.put(""String_Node_Str"",""String_Node_Str"");
  }
}","private void build(ObjectNode node,ObjectTypeDefinition type,@Nonnull ObjectTypeDefinition sourceType,Context context){
  if (context.stack.size() > 2) {
    return;
  }
  if (type.getTypeIdInclusion() == JsonTypeInfo.As.PROPERTY) {
    if (type.getTypeIdProperty() != null) {
      node.put(type.getTypeIdProperty(),sourceType.getTypeIdValue());
    }
  }
  FacetFilter facetFilter=type.getContext().getContext().getConfiguration().getFacetFilter();
  for (  Member member : type.getMembers()) {
    if (!facetFilter.accept(member)) {
      continue;
    }
    if (ElementUtils.findDeprecationMessage(member,null) != null) {
      continue;
    }
    String example=null;
    String example2=null;
    JsonType exampleType=null;
    JavaDoc.JavaDocTagList tags=getDocumentationExampleTags(member);
    if (tags != null && tags.size() > 0) {
      String tag=tags.get(0).trim();
      example=tag.isEmpty() ? null : tag;
      example2=example;
      if (tags.size() > 1) {
        tag=tags.get(1).trim();
        example2=tag.isEmpty() ? null : tag;
      }
    }
    tags=member.getJavaDoc().get(""String_Node_Str"");
    if (tags != null && tags.size() > 0) {
      String tag=tags.get(0).trim();
      if (!tag.isEmpty()) {
        TypeElement typeElement=type.getContext().getContext().getProcessingEnvironment().getElementUtils().getTypeElement(tag);
        if (typeElement != null) {
          exampleType=JsonTypeFactory.getJsonType(typeElement.asType(),type.getContext());
        }
 else {
          type.getContext().getContext().getLogger().warn(""String_Node_Str"",tag);
        }
      }
    }
    DocumentationExample documentationExample=getDocumentationExample(member);
    if (documentationExample != null) {
      if (documentationExample.exclude()) {
        continue;
      }
      example=documentationExample.value();
      example=""String_Node_Str"".equals(example) ? null : example;
      example2=documentationExample.value2();
      example2=""String_Node_Str"".equals(example2) ? null : example2;
      TypeMirror typeHint=TypeHintUtils.getTypeHint(documentationExample.type(),type.getContext().getContext().getProcessingEnvironment(),null);
      if (typeHint != null) {
        exampleType=JsonTypeFactory.getJsonType(typeHint,type.getContext());
      }
    }
    String specifiedTypeInfoValue=findSpecifiedTypeInfoValue(member,type.getQualifiedName().toString(),type);
    if (specifiedTypeInfoValue != null) {
      example=specifiedTypeInfoValue;
      example2=specifiedTypeInfoValue;
    }
    String configuredExample=getConfiguredExample(member);
    if (configuredExample != null) {
      example=configuredExample;
      example2=configuredExample;
    }
    if (context.currentIndex % 2 > 0) {
      String placeholder=example2;
      example2=example;
      example=placeholder;
    }
    if (member.getChoices().size() > 1) {
      if (member.isCollectionType()) {
        final ArrayNode exampleNode=JsonNodeFactory.instance.arrayNode();
        for (        Member choice : member.getChoices()) {
          JsonType jsonType=exampleType == null ? choice.getJsonType() : exampleType;
          String choiceName=choice.getName();
          if (""String_Node_Str"".equals(choiceName)) {
            choiceName=""String_Node_Str"";
          }
          if (member.getSubtypeIdInclusion() == JsonTypeInfo.As.WRAPPER_ARRAY) {
            ArrayNode wrapperNode=JsonNodeFactory.instance.arrayNode();
            wrapperNode.add(choiceName);
            wrapperNode.add(exampleNode(jsonType,example,example2,context));
            exampleNode.add(wrapperNode);
          }
 else           if (member.getSubtypeIdInclusion() == JsonTypeInfo.As.WRAPPER_OBJECT) {
            ObjectNode wrapperNode=JsonNodeFactory.instance.objectNode();
            wrapperNode.set(choiceName,exampleNode(jsonType,example,example2,context));
            exampleNode.add(wrapperNode);
          }
 else {
            JsonNode itemNode=exampleNode(jsonType,example,example2,context);
            if (member.getSubtypeIdInclusion() == JsonTypeInfo.As.PROPERTY) {
              if (member.getSubtypeIdProperty() != null && itemNode instanceof ObjectNode) {
                ((ObjectNode)itemNode).put(member.getSubtypeIdProperty(),""String_Node_Str"");
              }
            }
 else             if (member.getSubtypeIdInclusion() == JsonTypeInfo.As.EXTERNAL_PROPERTY) {
              if (member.getSubtypeIdProperty() != null) {
                node.put(member.getSubtypeIdProperty(),""String_Node_Str"");
              }
            }
            exampleNode.add(itemNode);
          }
        }
        node.set(member.getName(),exampleNode);
      }
 else {
        for (        Member choice : member.getChoices()) {
          JsonNode exampleNode;
          JsonType jsonType=exampleType == null ? choice.getJsonType() : exampleType;
          String choiceName=choice.getName();
          if (""String_Node_Str"".equals(choiceName)) {
            choiceName=""String_Node_Str"";
          }
          if (member.getSubtypeIdInclusion() == JsonTypeInfo.As.WRAPPER_ARRAY) {
            ArrayNode wrapperNode=JsonNodeFactory.instance.arrayNode();
            wrapperNode.add(choiceName);
            wrapperNode.add(exampleNode(jsonType,example,example2,context));
            exampleNode=wrapperNode;
          }
 else           if (member.getSubtypeIdInclusion() == JsonTypeInfo.As.WRAPPER_OBJECT) {
            ObjectNode wrapperNode=JsonNodeFactory.instance.objectNode();
            wrapperNode.set(choiceName,exampleNode(jsonType,example,example2,context));
            exampleNode=wrapperNode;
          }
 else {
            exampleNode=exampleNode(jsonType,example,example2,context);
            if (member.getSubtypeIdInclusion() == JsonTypeInfo.As.PROPERTY) {
              if (member.getSubtypeIdProperty() != null && exampleNode instanceof ObjectNode) {
                ((ObjectNode)exampleNode).put(member.getSubtypeIdProperty(),""String_Node_Str"");
              }
            }
 else             if (member.getSubtypeIdInclusion() == JsonTypeInfo.As.EXTERNAL_PROPERTY) {
              if (member.getSubtypeIdProperty() != null) {
                node.put(member.getSubtypeIdProperty(),""String_Node_Str"");
              }
            }
          }
          node.set(member.getName(),exampleNode);
        }
      }
    }
 else {
      JsonType jsonType=exampleType == null ? member.getJsonType() : exampleType;
      node.set(member.getName(),exampleNode(jsonType,example,example2,context));
    }
  }
  JsonType supertype=type.getSupertype();
  if (supertype instanceof JsonClassType && ((JsonClassType)supertype).getTypeDefinition() instanceof ObjectTypeDefinition) {
    build(node,(ObjectTypeDefinition)((JsonClassType)supertype).getTypeDefinition(),sourceType,context);
  }
  if (type.getWildcardMember() != null && ElementUtils.findDeprecationMessage(type.getWildcardMember(),null) == null && !ExampleUtils.isExcluded(type.getWildcardMember())) {
    node.put(""String_Node_Str"",""String_Node_Str"");
    node.put(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9931905234785076
177118,"public static List<JavaDoc.JavaDocTagList> getJavaDocTags(String tag,DecoratedElement el){
  if (el == null || (el instanceof TypeElement && Object.class.getName().equals(((TypeElement)el).getQualifiedName().toString()))) {
    return Collections.emptyList();
  }
  ArrayList<JavaDoc.JavaDocTagList> allTags=new ArrayList<JavaDoc.JavaDocTagList>();
  JavaDoc.JavaDocTagList tagList=new JavaDoc(el.getDocComment(),null,null,null).get(tag);
  if (tagList != null && !tagList.isEmpty()) {
    allTags.add(tagList);
  }
  allTags.addAll(getJavaDocTags(tag,(DecoratedElement)el.getEnclosingElement()));
  if (el instanceof TypeElement) {
    TypeMirror superclass=((TypeElement)el).getSuperclass();
    if (superclass instanceof DeclaredType) {
      allTags.addAll(getJavaDocTags(tag,(DecoratedElement)((DeclaredType)superclass).asElement()));
    }
  }
  return allTags;
}","public static List<JavaDoc.JavaDocTagList> getJavaDocTags(String tag,Element el){
  if (el == null || (el instanceof TypeElement && Object.class.getName().equals(((TypeElement)el).getQualifiedName().toString()))) {
    return Collections.emptyList();
  }
  ArrayList<JavaDoc.JavaDocTagList> allTags=new ArrayList<JavaDoc.JavaDocTagList>();
  JavaDoc.JavaDocTagList tagList=null;
  if (el instanceof ElementAdaptor) {
    tagList=new JavaDoc(((ElementAdaptor)el).getDocComment(),null,null,null).get(tag);
  }
 else   if (el instanceof DecoratedElement) {
    tagList=new JavaDoc(((DecoratedElement)el).getDocComment(),null,null,null).get(tag);
  }
  if (tagList != null && !tagList.isEmpty()) {
    allTags.add(tagList);
  }
  allTags.addAll(getJavaDocTags(tag,el.getEnclosingElement()));
  if (el instanceof TypeElement) {
    TypeMirror superclass=((TypeElement)el).getSuperclass();
    if (superclass instanceof DeclaredType) {
      Element element=((DeclaredType)superclass).asElement();
      allTags.addAll(getJavaDocTags(tag,element));
    }
  }
  return allTags;
}",0.8078310149407522
177119,"public static boolean isIgnored(Element element){
  if (element instanceof DecoratedElement) {
    List<JavaDocTagList> ignoreTags=AnnotationUtils.getJavaDocTags(""String_Node_Str"",(DecoratedElement<?>)element);
    if (!ignoreTags.isEmpty()) {
      return true;
    }
  }
  return element.getAnnotation(Ignore.class) != null;
}","public static boolean isIgnored(Element element){
  List<JavaDocTagList> ignoreTags=AnnotationUtils.getJavaDocTags(""String_Node_Str"",element);
  return !ignoreTags.isEmpty() || element.getAnnotation(Ignore.class) != null;
}",0.7731397459165155
177120,"@Override public String getDescription(){
  return this.param.getJavaDoc().toString();
}","@Override public String getDescription(){
  return this.param.getDocValue();
}",0.8795180722891566
177121,"/** 
 * Processes the specified template with the given model.
 * @param templateURL The template URL.
 * @param model       The root model.
 */
public String processTemplate(URL templateURL,Object model) throws IOException, TemplateException {
  debug(""String_Node_Str"",templateURL);
  Configuration configuration=new Configuration(Configuration.VERSION_2_3_22);
  configuration.setTemplateLoader(new URLTemplateLoader(){
    protected URL getURL(    String name){
      try {
        return new URL(name);
      }
 catch (      MalformedURLException e) {
        return null;
      }
    }
  }
);
  configuration.setTemplateExceptionHandler(new TemplateExceptionHandler(){
    public void handleTemplateException(    TemplateException templateException,    Environment environment,    Writer writer) throws TemplateException {
      throw templateException;
    }
  }
);
  configuration.setLocalizedLookup(false);
  configuration.setDefaultEncoding(""String_Node_Str"");
  Template template=configuration.getTemplate(templateURL.toString());
  StringWriter unhandledOutput=new StringWriter();
  template.process(model,unhandledOutput);
  unhandledOutput.close();
  return unhandledOutput.toString();
}","/** 
 * Processes the specified template with the given model.
 * @param templateURL The template URL.
 * @param model       The root model.
 */
public String processTemplate(URL templateURL,Object model) throws IOException, TemplateException {
  debug(""String_Node_Str"",templateURL);
  Configuration configuration=new Configuration(Configuration.VERSION_2_3_22);
  configuration.setTemplateLoader(new URLTemplateLoader(){
    protected URL getURL(    String name){
      try {
        return new URL(name);
      }
 catch (      MalformedURLException e) {
        return null;
      }
    }
  }
);
  configuration.setTemplateExceptionHandler(new TemplateExceptionHandler(){
    public void handleTemplateException(    TemplateException templateException,    Environment environment,    Writer writer) throws TemplateException {
      throw templateException;
    }
  }
);
  configuration.setLocalizedLookup(false);
  configuration.setDefaultEncoding(""String_Node_Str"");
  configuration.setObjectWrapper(new JavaXMLClientObjectWrapper());
  Template template=configuration.getTemplate(templateURL.toString());
  StringWriter unhandledOutput=new StringWriter();
  template.process(model,unhandledOutput);
  unhandledOutput.close();
  return unhandledOutput.toString();
}",0.9724696356275304
177122,"/** 
 * zip up directories to a specified zip file.
 * @param toFile The file to zip to.
 * @param dirs   The directories to zip up.
 */
public boolean zip(File toFile,File... dirs) throws IOException {
  if (!toFile.getParentFile().exists()) {
    getLogger().debug(""String_Node_Str"",toFile.getParentFile());
    toFile.getParentFile().mkdirs();
  }
  boolean anyFiles=false;
  byte[] buffer=new byte[2 * 1024];
  ZipOutputStream zipout=new ZipOutputStream(new FileOutputStream(toFile));
  for (  File dir : dirs) {
    URI baseURI=dir.toURI();
    getLogger().debug(""String_Node_Str"",dir,toFile);
    ArrayList<File> files=new ArrayList<File>();
    buildFileList(files,dir);
    for (    File file : files) {
      ZipEntry entry=new ZipEntry(baseURI.relativize(file.toURI()).getPath());
      getLogger().debug(""String_Node_Str"",entry.getName());
      zipout.putNextEntry(entry);
      if (!file.isDirectory()) {
        anyFiles=true;
        FileInputStream in=new FileInputStream(file);
        int len;
        while ((len=in.read(buffer)) > 0) {
          zipout.write(buffer,0,len);
        }
        in.close();
      }
      zipout.closeEntry();
    }
  }
  zipout.close();
  return anyFiles;
}","/** 
 * zip up directories to a specified zip file.
 * @param toFile The file to zip to.
 * @param dirs   The directories to zip up.
 */
public boolean zip(File toFile,File... dirs) throws IOException {
  if (!toFile.getParentFile().exists()) {
    getLogger().debug(""String_Node_Str"",toFile.getParentFile());
    toFile.getParentFile().mkdirs();
  }
  boolean anyFiles=false;
  byte[] buffer=new byte[2 * 1024];
  ZipOutputStream zipout=new ZipOutputStream(new FileOutputStream(toFile));
  for (  File dir : dirs) {
    URI baseURI=dir.toURI();
    getLogger().debug(""String_Node_Str"",dir,toFile);
    ArrayList<File> files=new ArrayList<File>();
    buildFileList(files,dir);
    for (    File file : files) {
      ZipEntry entry=new ZipEntry(baseURI.relativize(file.toURI()).getPath());
      getLogger().debug(""String_Node_Str"",entry.getName());
      zipout.putNextEntry(entry);
      if (!file.isDirectory()) {
        anyFiles=true;
        FileInputStream in=new FileInputStream(file);
        int len;
        while ((len=in.read(buffer)) > 0) {
          zipout.write(buffer,0,len);
        }
        in.close();
      }
      zipout.closeEntry();
    }
  }
  if (!anyFiles) {
    ZipEntry entry=new ZipEntry(""String_Node_Str"");
    zipout.putNextEntry(entry);
    zipout.write(""String_Node_Str"".getBytes());
    zipout.closeEntry();
  }
  zipout.close();
  return anyFiles;
}",0.912875867386276
177123,"@Override public void call(EnunciateContext context){
  Map<String,SchemaInfo> ns2schema=Collections.emptyMap();
  Map<String,String> ns2prefix=Collections.emptyMap();
  if (this.jaxbModule != null) {
    ns2schema=this.jaxbModule.getJaxbContext().getSchemas();
    ns2prefix=this.jaxbModule.getJaxbContext().getNamespacePrefixes();
  }
  Map<String,WsdlInfo> ns2wsdl=Collections.emptyMap();
  if (this.jaxwsModule != null) {
    ns2wsdl=this.jaxwsModule.getJaxwsContext().getWsdls();
  }
  Set<String> facetIncludes=new TreeSet<String>(this.enunciate.getConfiguration().getFacetIncludes());
  facetIncludes.addAll(getFacetIncludes());
  Set<String> facetExcludes=new TreeSet<String>(this.enunciate.getConfiguration().getFacetExcludes());
  facetExcludes.addAll(getFacetExcludes());
  FacetFilter facetFilter=new FacetFilter(facetIncludes,facetExcludes);
  Map<String,SchemaConfig> schemaConfigs=getSchemaConfigs();
  for (  SchemaInfo schemaInfo : ns2schema.values()) {
    String defaultFilename=ns2prefix.get(schemaInfo.getNamespace()) + ""String_Node_Str"";
    SchemaConfig explicitConfig=schemaConfigs.get(schemaInfo.getNamespace());
    if (explicitConfig != null && explicitConfig.getUseFile() != null) {
      schemaInfo.setFilename(explicitConfig.getUseFile().getName());
      schemaInfo.setSchemaFile(new StaticInterfaceDescriptionFile(explicitConfig.getUseFile(),this.enunciate));
    }
 else     if (explicitConfig != null) {
      schemaInfo.setAppinfo(explicitConfig.getAppinfo());
      schemaInfo.setFilename(explicitConfig.getFilename() != null ? explicitConfig.getFilename() : defaultFilename);
      schemaInfo.setExplicitLocation(explicitConfig.getLocation());
      schemaInfo.setJaxbBindingVersion(explicitConfig.getJaxbBindingVersion());
      schemaInfo.setSchemaFile(new JaxbSchemaFile(this.jaxbModule.getJaxbContext(),schemaInfo,facetFilter,ns2prefix));
    }
 else {
      schemaInfo.setFilename(defaultFilename);
      schemaInfo.setSchemaFile(new JaxbSchemaFile(this.jaxbModule.getJaxbContext(),schemaInfo,facetFilter,ns2prefix));
    }
  }
  String baseUri=this.enunciate.getConfiguration().getApplicationRoot();
  Map<String,WsdlConfig> wsdlConfigs=getWsdlConfigs();
  for (  WsdlInfo wsdlInfo : ns2wsdl.values()) {
    String defaultFilename=ns2prefix.get(wsdlInfo.getNamespace()) + ""String_Node_Str"";
    WsdlConfig explicitConfig=wsdlConfigs.get(wsdlInfo.getNamespace());
    if (explicitConfig != null && explicitConfig.getUseFile() != null) {
      wsdlInfo.setFilename(explicitConfig.getUseFile().getName());
      wsdlInfo.setWsdlFile(new StaticInterfaceDescriptionFile(explicitConfig.getUseFile(),this.enunciate));
    }
 else     if (explicitConfig != null) {
      wsdlInfo.setFilename(explicitConfig.getFilename() != null ? explicitConfig.getFilename() : defaultFilename);
      wsdlInfo.setInlineSchema(explicitConfig.isInlineSchema());
      wsdlInfo.setWsdlFile(new JaxwsWsdlFile(wsdlInfo,baseUri,ns2prefix,facetFilter));
    }
 else {
      wsdlInfo.setFilename(defaultFilename);
      wsdlInfo.setWsdlFile(new JaxwsWsdlFile(wsdlInfo,baseUri,ns2prefix,facetFilter));
    }
  }
  if (this.jaxrsModule != null && this.jaxbModule != null && !isDisableWadl()) {
    this.jaxrsModule.getJaxrsContext().setWadlFile(new JaxrsWadlFile(this.jaxrsModule.getJaxrsContext(),new ArrayList<SchemaInfo>(ns2schema.values()),getWadlStylesheetUri(),baseUri,ns2prefix,facetFilter));
  }
}","@Override public void call(EnunciateContext context){
  Map<String,SchemaInfo> ns2schema=Collections.emptyMap();
  Map<String,String> ns2prefix=Collections.emptyMap();
  if (this.jaxbModule != null) {
    ns2schema=this.jaxbModule.getJaxbContext().getSchemas();
    ns2prefix=this.jaxbModule.getJaxbContext().getNamespacePrefixes();
  }
  Map<String,WsdlInfo> ns2wsdl=Collections.emptyMap();
  if (this.jaxwsModule != null) {
    ns2wsdl=this.jaxwsModule.getJaxwsContext().getWsdls();
  }
  Set<String> facetIncludes=new TreeSet<String>(this.enunciate.getConfiguration().getFacetIncludes());
  facetIncludes.addAll(getFacetIncludes());
  Set<String> facetExcludes=new TreeSet<String>(this.enunciate.getConfiguration().getFacetExcludes());
  facetExcludes.addAll(getFacetExcludes());
  FacetFilter facetFilter=new FacetFilter(facetIncludes,facetExcludes);
  Map<String,SchemaConfig> schemaConfigs=getSchemaConfigs();
  for (  SchemaInfo schemaInfo : ns2schema.values()) {
    String defaultFilename=ns2prefix.get(schemaInfo.getNamespace()) + ""String_Node_Str"";
    SchemaConfig explicitConfig=schemaConfigs.get(schemaInfo.getNamespace());
    if (explicitConfig != null && explicitConfig.getUseFile() != null) {
      schemaInfo.setFilename(explicitConfig.getUseFile().getName());
      schemaInfo.setSchemaFile(new StaticInterfaceDescriptionFile(explicitConfig.getUseFile(),this.enunciate));
    }
 else     if (explicitConfig != null) {
      schemaInfo.setAppinfo(explicitConfig.getAppinfo());
      schemaInfo.setFilename(explicitConfig.getFilename() != null ? explicitConfig.getFilename() : defaultFilename);
      schemaInfo.setExplicitLocation(explicitConfig.getLocation());
      schemaInfo.setJaxbBindingVersion(explicitConfig.getJaxbBindingVersion());
      schemaInfo.setSchemaFile(new JaxbSchemaFile(this.jaxbModule.getJaxbContext(),schemaInfo,facetFilter,ns2prefix));
    }
 else {
      schemaInfo.setFilename(defaultFilename);
      schemaInfo.setSchemaFile(new JaxbSchemaFile(this.jaxbModule.getJaxbContext(),schemaInfo,facetFilter,ns2prefix));
    }
  }
  String baseUri=this.enunciate.getConfiguration().getApplicationRoot();
  Map<String,WsdlConfig> wsdlConfigs=getWsdlConfigs();
  for (  WsdlInfo wsdlInfo : ns2wsdl.values()) {
    String defaultFilename=ns2prefix.get(wsdlInfo.getNamespace()) + ""String_Node_Str"";
    WsdlConfig explicitConfig=wsdlConfigs.get(wsdlInfo.getNamespace());
    if (explicitConfig != null && explicitConfig.getUseFile() != null) {
      wsdlInfo.setFilename(explicitConfig.getUseFile().getName());
      wsdlInfo.setWsdlFile(new StaticInterfaceDescriptionFile(explicitConfig.getUseFile(),this.enunciate));
    }
 else     if (explicitConfig != null) {
      wsdlInfo.setFilename(explicitConfig.getFilename() != null ? explicitConfig.getFilename() : defaultFilename);
      wsdlInfo.setInlineSchema(explicitConfig.isInlineSchema());
      wsdlInfo.setWsdlFile(new JaxwsWsdlFile(wsdlInfo,this.jaxbModule.getJaxbContext(),baseUri,ns2prefix,facetFilter));
    }
 else {
      wsdlInfo.setFilename(defaultFilename);
      wsdlInfo.setWsdlFile(new JaxwsWsdlFile(wsdlInfo,this.jaxbModule.getJaxbContext(),baseUri,ns2prefix,facetFilter));
    }
  }
  if (this.jaxrsModule != null && this.jaxbModule != null && !isDisableWadl()) {
    this.jaxrsModule.getJaxrsContext().setWadlFile(new JaxrsWadlFile(this.jaxrsModule.getJaxrsContext(),new ArrayList<SchemaInfo>(ns2schema.values()),getWadlStylesheetUri(),baseUri,ns2prefix,facetFilter));
  }
}",0.94953596287703
177124,"@Override public TemplateModel wrap(Object obj) throws TemplateModelException {
  if (obj instanceof QName) {
    return new QNameModel((QName)obj,this,this.namespacePrefixes);
  }
 else   if (obj instanceof WebResult) {
    return new WebResultModel((WebResult)obj,this);
  }
 else {
    return super.wrap(obj);
  }
}","@Override public TemplateModel wrap(Object obj) throws TemplateModelException {
  if (obj instanceof QName) {
    return new QNameModel((QName)obj,this,this.namespacePrefixes);
  }
 else {
    return super.wrap(obj);
  }
}",0.7703703703703704
177125,"public JaxwsWsdlFile(WsdlInfo wsdlInfo,String baseUri,Map<String,String> namespacePrefixes,FacetFilter facetFilter){
  super(wsdlInfo.getFilename(),namespacePrefixes,facetFilter);
  this.wsdlInfo=wsdlInfo;
  this.baseUri=baseUri;
}","public JaxwsWsdlFile(WsdlInfo wsdlInfo,EnunciateJaxbContext context,String baseUri,Map<String,String> namespacePrefixes,FacetFilter facetFilter){
  super(wsdlInfo.getFilename(),namespacePrefixes,facetFilter);
  this.wsdlInfo=wsdlInfo;
  this.baseUri=baseUri;
  this.context=context;
}",0.8970873786407767
177126,"@Override protected Map<String,Object> createModel(){
  Map<String,Object> model=super.createModel();
  model.put(""String_Node_Str"",this.wsdlInfo);
  model.put(""String_Node_Str"",this.baseUri);
  return model;
}","@Override protected Map<String,Object> createModel(){
  Map<String,Object> model=super.createModel();
  model.put(""String_Node_Str"",this.wsdlInfo);
  model.put(""String_Node_Str"",this.baseUri);
  SchemaInfo schema=context.getSchemas().get(wsdlInfo.getNamespace());
  if (schema != null) {
    model.put(""String_Node_Str"",new IsDefinedGloballyMethod(schema));
  }
  model.put(""String_Node_Str"",new AccessorOverridesAnotherMethod());
  model.put(""String_Node_Str"",new QNameForTypeMethod(context));
  return model;
}",0.5429362880886427
177127,"/** 
 * Returns the qname of the element that has the first parameter as the namespace, the second as the element.
 * @param list The arguments.
 * @return The qname.
 */
public Object exec(List list) throws TemplateModelException {
  if (list.size() < 1) {
    throw new TemplateModelException(""String_Node_Str"");
  }
  String namespace=(String)list.get(0);
  String prefix=lookupPrefix(namespace);
  if (prefix == null) {
    throw new TemplateModelException(""String_Node_Str"" + namespace + ""String_Node_Str"");
  }
  return prefix;
}","/** 
 * Returns the qname of the element that has the first parameter as the namespace, the second as the element.
 * @param list The arguments.
 * @return The qname.
 */
public Object exec(List list) throws TemplateModelException {
  if (list.size() < 1) {
    throw new TemplateModelException(""String_Node_Str"");
  }
  String namespace=(String)new BeansWrapperBuilder(Configuration.getVersion()).build().unwrap((TemplateModel)list.get(0));
  String prefix=lookupPrefix(namespace);
  if (prefix == null) {
    throw new TemplateModelException(""String_Node_Str"" + namespace + ""String_Node_Str"");
  }
  return prefix;
}",0.9280138768430182
177128,"/** 
 * Add a facet exclude.
 * @param name The name.
 * @param value The value.
 */
public void addFacetExclude(String name,String value){
  if (name != null) {
    this.facetExcludes.add(name);
  }
}","/** 
 * Add a facet exclude.
 * @param name The name.
 */
public void addFacetExclude(String name){
  if (name != null) {
    this.facetExcludes.add(name);
  }
}",0.8895027624309392
177129,"/** 
 * Add a facet exclude.
 * @param name The name.
 */
public void addFacetExclude(String name,String value){
  if (name != null) {
    this.facetExcludes.add(name);
  }
}","/** 
 * Add a facet exclude.
 * @param name The name.
 */
public void addFacetExclude(String name){
  if (name != null) {
    this.facetExcludes.add(name);
  }
}",0.9611940298507464
177130,"/** 
 * Add a facet exclude.
 * @param name The name.
 * @param value The value.
 */
public void addFacetExclude(String name,String value){
  if (name != null) {
    this.facetExcludes.add(name);
  }
}","/** 
 * Add a facet exclude.
 * @param name The name.
 */
public void addFacetExclude(String name){
  if (name != null) {
    this.facetExcludes.add(name);
  }
}",0.8895027624309392
177131,"/** 
 * @return A new {@link JerseyValidator}.
 */
@Override public Validator getValidator(){
  return new JerseyValidator(!isUseSubcontext() && !isDisableWildcardServletError());
}","/** 
 * @return A new {@link JerseyValidator}.
 */
@Override public Validator getValidator(){
  return new JerseyValidator(isUseSubcontext() || !isDisableWildcardServletError());
}",0.9861495844875346
177132,"/** 
 * The type of an element accessor can be specified by an annotation.
 * @return The accessor type.
 */
@Override public TypeMirror getAccessorType(){
  try {
    if ((xmlElementRef != null) && (xmlElementRef.type() != XmlElementRef.DEFAULT.class)) {
      Class clazz=xmlElementRef.type();
      return getAccessorType(clazz);
    }
  }
 catch (  MirroredTypeException e) {
    return TypeMirrorDecorator.decorate(e.getTypeMirror());
  }
  return super.getAccessorType();
}","/** 
 * The type of an element accessor can be specified by an annotation.
 * @return The accessor type.
 */
@Override public TypeMirror getAccessorType(){
  TypeMirror specifiedType=null;
  try {
    if ((xmlElementRef != null) && (xmlElementRef.type() != XmlElementRef.DEFAULT.class)) {
      Class clazz=xmlElementRef.type();
      specifiedType=getAccessorType(clazz);
    }
  }
 catch (  MirroredTypeException e) {
    specifiedType=TypeMirrorDecorator.decorate(e.getTypeMirror());
  }
  if (specifiedType != null) {
    if (!isChoice) {
      DecoratedTypeMirror accessorType=(DecoratedTypeMirror)super.getAccessorType();
      if (accessorType.isCollection()) {
        AnnotationProcessorEnvironment ape=Context.getCurrentEnvironment();
        Types types=ape.getTypeUtils();
        if (specifiedType instanceof PrimitiveType) {
          specifiedType=types.getPrimitiveType(((PrimitiveType)specifiedType).getKind());
        }
 else {
          specifiedType=types.getDeclaredType(ape.getTypeDeclaration(((DeclaredType)specifiedType).getDeclaration().getQualifiedName()));
        }
        specifiedType=TypeMirrorDecorator.decorate(types.getDeclaredType(ape.getTypeDeclaration(((DeclaredType)accessorType).getDeclaration().getQualifiedName()),specifiedType));
      }
 else       if (accessorType.isArray() && !(specifiedType instanceof ArrayType)) {
        Types types=Context.getCurrentEnvironment().getTypeUtils();
        if (specifiedType instanceof PrimitiveType) {
          specifiedType=types.getPrimitiveType(((PrimitiveType)specifiedType).getKind());
        }
 else {
          TypeDeclaration decl=((DeclaredType)specifiedType).getDeclaration();
          while (decl instanceof DecoratedTypeDeclaration) {
            decl=(TypeDeclaration)((DecoratedTypeDeclaration)decl).getDelegate();
          }
          specifiedType=types.getDeclaredType(decl);
        }
        specifiedType=TypeMirrorDecorator.decorate(types.getArrayType(specifiedType));
      }
    }
    return specifiedType;
  }
  return super.getAccessorType();
}",0.3263697280252266
177133,"/** 
 * Construct an element accessor with a specific base type.
 * @param delegate The delegate.
 * @param typedef  The type definition.
 * @param ref      The referenced root element.
 */
private ElementRef(MemberDeclaration delegate,TypeDefinition typedef,RootElementDeclaration ref){
  super(delegate,typedef);
  this.xmlElementRef=null;
  this.choices=new ArrayList<ElementRef>();
  this.choices.add(this);
  this.ref=new QName(ref.getNamespace(),ref.getName());
}","/** 
 * Construct an element accessor with a specific base type.
 * @param delegate The delegate.
 * @param typedef  The type definition.
 * @param ref      The referenced root element.
 */
private ElementRef(MemberDeclaration delegate,TypeDefinition typedef,RootElementDeclaration ref){
  super(delegate,typedef);
  this.xmlElementRef=null;
  this.choices=new ArrayList<ElementRef>();
  this.choices.add(this);
  this.ref=new QName(ref.getNamespace(),ref.getName());
  this.isChoice=true;
}",0.9770833333333332
177134,"@XmlElementWrapper(name=""String_Node_Str"") public List<BeanThree> getList1(){
  return list1;
}","@XmlElementWrapper(name=""String_Node_Str"") @XmlElementRef(type=BeanThree.class) public List<BeanThree> getList1(){
  return list1;
}",0.8370044052863436
177135,"@XmlElementWrapper(name=""String_Node_Str"") public List<BeanThree> getList2(){
  return list2;
}","@XmlElementWrapper(name=""String_Node_Str"") @XmlElementRef(type=BeanThree.class) public List<BeanThree> getList2(){
  return list2;
}",0.8370044052863436
177136,"/** 
 * Returns the qname of the element that has the first parameter as the namespace, the second as the element.
 * @param list The arguments.
 * @return The qname.
 */
public Object exec(List list) throws TemplateModelException {
  if (list.size() < 1) {
    throw new TemplateModelException(""String_Node_Str"");
  }
  TemplateModel from=(TemplateModel)list.get(0);
  Object unwrapped=BeansWrapper.getDefaultInstance().unwrap(from);
  if (unwrapped instanceof Accessor) {
    DecoratedTypeMirror accessorType=(DecoratedTypeMirror)((Accessor)unwrapped).getBareAccessorType();
    if (accessorType.isInstanceOf(JAXBElement.class.getName())) {
      unwrapped=KnownXmlType.ANY_TYPE.getQname();
    }
 else     if (unwrapped instanceof Element && ((Element)unwrapped).getRef() != null) {
      unwrapped=((Element)unwrapped).getRef();
    }
 else {
      unwrapped=((Accessor)unwrapped).getBaseType();
    }
  }
  if (unwrapped instanceof XmlType) {
    if (unwrapped instanceof XmlClassType && ((XmlType)unwrapped).isAnonymous()) {
      unwrapped=((XmlClassType)unwrapped).getTypeDefinition();
    }
 else {
      unwrapped=((XmlType)unwrapped).getQname();
    }
  }
  if (unwrapped instanceof TypeDefinition) {
    if (((TypeDefinition)unwrapped).isAnonymous()) {
      unwrapped=new QName(((TypeDefinition)unwrapped).getNamespace(),""String_Node_Str"" + ((TypeDefinition)unwrapped).getSimpleName());
    }
 else {
      unwrapped=((TypeDefinition)unwrapped).getQname();
    }
  }
  if (unwrapped instanceof ElementDeclaration) {
    unwrapped=((ElementDeclaration)unwrapped).getQname();
  }
  if (!(unwrapped instanceof QName)) {
    throw new TemplateModelException(""String_Node_Str"");
  }
  QName qname=(QName)unwrapped;
  String namespace=qname.getNamespaceURI();
  if (""String_Node_Str"".equals(namespace)) {
    namespace=null;
  }
  String prefix=lookupPrefix(namespace).replace('-','_');
  if (prefix == null) {
    throw new TemplateModelException(""String_Node_Str"" + namespace + ""String_Node_Str"");
  }
  String localName=qname.getLocalPart();
  if (""String_Node_Str"".equals(localName)) {
    return null;
  }
  StringBuilder identifier=new StringBuilder();
  identifier.append(Character.toLowerCase(prefix.charAt(0)));
  identifier.append(prefix.substring(1));
  identifier.append(Character.toUpperCase(localName.charAt(0)));
  identifier.append(localName.substring(1));
  return CDeploymentModule.scrubIdentifier(identifier.toString());
}","/** 
 * Returns the qname of the element that has the first parameter as the namespace, the second as the element.
 * @param list The arguments.
 * @return The qname.
 */
public Object exec(List list) throws TemplateModelException {
  if (list.size() < 1) {
    throw new TemplateModelException(""String_Node_Str"");
  }
  TemplateModel from=(TemplateModel)list.get(0);
  Object unwrapped=BeansWrapper.getDefaultInstance().unwrap(from);
  if (unwrapped instanceof Accessor) {
    DecoratedTypeMirror accessorType=(DecoratedTypeMirror)((Accessor)unwrapped).getBareAccessorType();
    if (accessorType.isInstanceOf(JAXBElement.class.getName())) {
      unwrapped=KnownXmlType.ANY_TYPE.getQname();
    }
 else     if (unwrapped instanceof Element && ((Element)unwrapped).getRef() != null) {
      unwrapped=((Element)unwrapped).getRef();
    }
 else {
      unwrapped=((Accessor)unwrapped).getBaseType();
    }
  }
  if (unwrapped instanceof XmlType) {
    if (unwrapped instanceof XmlClassType && ((XmlType)unwrapped).isAnonymous()) {
      unwrapped=((XmlClassType)unwrapped).getTypeDefinition();
    }
 else {
      unwrapped=((XmlType)unwrapped).getQname();
    }
  }
  if (unwrapped instanceof TypeDefinition) {
    if (((TypeDefinition)unwrapped).isAnonymous()) {
      unwrapped=new QName(((TypeDefinition)unwrapped).getNamespace(),""String_Node_Str"" + ((TypeDefinition)unwrapped).getSimpleName());
    }
 else {
      unwrapped=((TypeDefinition)unwrapped).getQname();
    }
  }
  if (unwrapped instanceof ElementDeclaration) {
    unwrapped=((ElementDeclaration)unwrapped).getQname();
  }
  if (!(unwrapped instanceof QName)) {
    throw new TemplateModelException(""String_Node_Str"");
  }
  QName qname=(QName)unwrapped;
  String namespace=qname.getNamespaceURI();
  if (""String_Node_Str"".equals(namespace)) {
    namespace=null;
  }
  String prefix=lookupPrefix(namespace);
  if (prefix == null) {
    throw new TemplateModelException(""String_Node_Str"" + namespace + ""String_Node_Str"");
  }
  prefix=prefix.replace('-','_');
  String localName=qname.getLocalPart();
  if (""String_Node_Str"".equals(localName)) {
    return null;
  }
  StringBuilder identifier=new StringBuilder();
  identifier.append(Character.toLowerCase(prefix.charAt(0)));
  identifier.append(prefix.substring(1));
  identifier.append(Character.toUpperCase(localName.charAt(0)));
  identifier.append(localName.substring(1));
  return CDeploymentModule.scrubIdentifier(identifier.toString());
}",0.9314064726236516
177137,"/** 
 * Returns the qname of the element that has the first parameter as the namespace, the second as the element.
 * @param list The arguments.
 * @return The qname.
 */
public Object exec(List list) throws TemplateModelException {
  if (list.size() < 1) {
    throw new TemplateModelException(""String_Node_Str"");
  }
  TemplateModel from=(TemplateModel)list.get(0);
  Object unwrapped=BeansWrapper.getDefaultInstance().unwrap(from);
  if (!LocalElementDeclaration.class.isInstance(unwrapped)) {
    throw new TemplateModelException(""String_Node_Str"");
  }
  LocalElementDeclaration decl=(LocalElementDeclaration)unwrapped;
  String namespace=decl.getNamespace();
  SchemaInfo schemaInfo=getModel().getNamespacesToSchemas().get(namespace);
  if (schemaInfo != null) {
    for (    RootElementDeclaration rootElementDeclaration : schemaInfo.getGlobalElements()) {
      if (rootElementDeclaration.getName().equals(decl.getName())) {
        return true;
      }
    }
    for (    ImplicitSchemaElement implicitSchemaElement : schemaInfo.getImplicitSchemaElements()) {
      if (implicitSchemaElement.getElementName().equals(decl.getName())) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Returns the qname of the element that has the first parameter as the namespace, the second as the element.
 * @param list The arguments.
 * @return The qname.
 */
public Object exec(List list) throws TemplateModelException {
  if (list.size() < 1) {
    throw new TemplateModelException(""String_Node_Str"");
  }
  TemplateModel from=(TemplateModel)list.get(0);
  Object unwrapped=BeansWrapper.getDefaultInstance().unwrap(from);
  String namespace;
  String name;
  if (LocalElementDeclaration.class.isInstance(unwrapped)) {
    LocalElementDeclaration decl=(LocalElementDeclaration)unwrapped;
    namespace=decl.getNamespace();
    name=decl.getName();
  }
 else   if (ImplicitSchemaElement.class.isInstance(unwrapped)) {
    ImplicitSchemaElement ise=(ImplicitSchemaElement)unwrapped;
    namespace=ise.getTargetNamespace();
    name=ise.getElementName();
  }
 else {
    throw new TemplateModelException(""String_Node_Str"");
  }
  SchemaInfo schemaInfo=getModel().getNamespacesToSchemas().get(namespace);
  if (schemaInfo != null) {
    for (    RootElementDeclaration rootElementDeclaration : schemaInfo.getGlobalElements()) {
      if (rootElementDeclaration.getName().equals(name)) {
        return true;
      }
    }
    if (LocalElementDeclaration.class.isInstance(unwrapped)) {
      for (      ImplicitSchemaElement implicitSchemaElement : schemaInfo.getImplicitSchemaElements()) {
        if (implicitSchemaElement.getElementName().equals(name)) {
          return true;
        }
      }
    }
  }
  return false;
}",0.6271496523966338
177138,"public boolean endPathEntry(File pathEntry){
  this.classesImportedFromCurrentEntry=copyImportedClasses(this.currentEntryClassesToSources,this.classesToSources) || this.classesImportedFromCurrentEntry;
  this.currentEntry=null;
  this.currentEntryClassesToSources=null;
  return this.classesImportedFromCurrentEntry;
}","public boolean endPathEntry(File pathEntry){
  if (this.enunciate.getConfig() != null) {
    Set<String> classesFound=this.currentEntryClassesToSources.keySet();
    for (    DeploymentModule deploymentModule : this.enunciate.getConfig().getEnabledModules()) {
      if (deploymentModule instanceof EnunciateClasspathListener) {
        ((EnunciateClasspathListener)deploymentModule).onClassesFound(classesFound);
      }
    }
  }
  this.classesImportedFromCurrentEntry=copyImportedClasses(this.currentEntryClassesToSources,this.classesToSources) || this.classesImportedFromCurrentEntry;
  this.currentEntry=null;
  this.currentEntryClassesToSources=null;
  return this.classesImportedFromCurrentEntry;
}",0.6217008797653959
177139,"public void handleResource(ClasspathResource resource){
  String path=resource.getPath();
  if (resource instanceof JarClasspathResource) {
    if (path.endsWith(""String_Node_Str"")) {
      File sourceFile=new File(tempSourcesDir,path.substring(0,path.length() - 6) + ""String_Node_Str"");
      if (!packageInfoSources.containsKey(resource.getPath())) {
        enunciate.debug(""String_Node_Str"",sourceFile);
        try {
          InputStream resourceStream=resource.read();
          writePackageSourceFile(resourceStream,sourceFile);
          resourceStream.close();
          packageInfoSources.put(resource.getPath(),sourceFile);
        }
 catch (        IOException e) {
          enunciate.warn(""String_Node_Str"",sourceFile,e.getMessage());
        }
      }
    }
 else     if (path.endsWith(""String_Node_Str"")) {
      File sourceFile=new File(tempSourcesDir,path);
      enunciate.debug(""String_Node_Str"",path,sourceFile);
      try {
        InputStream in=resource.read();
        sourceFile.getParentFile().mkdirs();
        FileOutputStream out=new FileOutputStream(sourceFile);
        byte[] buffer=new byte[1024 * 2];
        int len;
        while ((len=in.read(buffer)) > 0) {
          out.write(buffer,0,len);
        }
        out.flush();
        out.close();
        in.close();
        packageInfoSources.put(resource.getPath(),sourceFile);
      }
 catch (      IOException e) {
        enunciate.warn(""String_Node_Str"",sourceFile,e.getMessage());
      }
    }
  }
}","public void handleResource(ClasspathResource resource){
  String path=resource.getPath();
  if (path.startsWith(""String_Node_Str"")) {
    return;
  }
  if (resource instanceof JarClasspathResource) {
    if (path.endsWith(""String_Node_Str"")) {
      File sourceFile=new File(tempSourcesDir,path.substring(0,path.length() - 6) + ""String_Node_Str"");
      if (!packageInfoSources.containsKey(path)) {
        enunciate.debug(""String_Node_Str"",sourceFile);
        try {
          InputStream resourceStream=resource.read();
          writePackageSourceFile(resourceStream,sourceFile);
          resourceStream.close();
          packageInfoSources.put(path,sourceFile);
        }
 catch (        IOException e) {
          enunciate.warn(""String_Node_Str"",sourceFile,e.getMessage());
        }
      }
    }
 else     if (path.endsWith(""String_Node_Str"")) {
      File sourceFile=new File(tempSourcesDir,path);
      enunciate.debug(""String_Node_Str"",path,sourceFile);
      try {
        InputStream in=resource.read();
        sourceFile.getParentFile().mkdirs();
        FileOutputStream out=new FileOutputStream(sourceFile);
        byte[] buffer=new byte[1024 * 2];
        int len;
        while ((len=in.read(buffer)) > 0) {
          out.write(buffer,0,len);
        }
        out.flush();
        out.close();
        in.close();
        packageInfoSources.put(path,sourceFile);
      }
 catch (      IOException e) {
        enunciate.warn(""String_Node_Str"",sourceFile,e.getMessage());
      }
    }
  }
}",0.918218085106383
177140,"public void handleResource(ClasspathResource resource){
  String path=resource.getPath();
  if (path.endsWith(""String_Node_Str"")) {
    String modulename=path.substring(0,path.length() - 8).replace('/','.');
    enunciate.debug(""String_Node_Str"",modulename);
    int lastDot=modulename.lastIndexOf('.');
    if (lastDot < 0) {
      throw new IllegalStateException(""String_Node_Str"" + modulename);
    }
    String modulePackage=modulename.substring(0,lastDot);
    try {
      InputStream resourceStream=resource.read();
      Document document=documentBuilder.parse(resourceStream);
      resourceStream.close();
      NodeList sourceNodes=document.getDocumentElement().getElementsByTagName(""String_Node_Str"");
      if (sourceNodes.getLength() > 0) {
        for (int i=0; i < sourceNodes.getLength(); i++) {
          Element node=(Element)sourceNodes.item(i);
          String subPackage=node.getAttribute(""String_Node_Str"");
          String pckg=modulePackage + ""String_Node_Str"" + subPackage;
          enunciate.debug(""String_Node_Str"");
          this.sourcePackagesToModules.put(pckg,modulename);
        }
      }
 else {
        String pckg=modulePackage + ""String_Node_Str"";
        enunciate.debug(""String_Node_Str"");
        this.sourcePackagesToModules.put(pckg,modulename);
      }
    }
 catch (    Exception e) {
      enunciate.warn(""String_Node_Str"",e.getMessage());
    }
  }
}","public void handleResource(ClasspathResource resource){
  String path=resource.getPath();
  if (path.endsWith(""String_Node_Str"")) {
    String modulename=path.substring(0,path.length() - 8).replace('/','.');
    enunciate.debug(""String_Node_Str"",modulename);
    int lastDot=modulename.lastIndexOf('.');
    if (lastDot < 0) {
      throw new IllegalStateException(""String_Node_Str"" + modulename);
    }
    String modulePackage=modulename.substring(0,lastDot);
    try {
      InputStream resourceStream=resource.read();
      Document document=documentBuilder.parse(resourceStream);
      resourceStream.close();
      NodeList sourceNodes=document.getDocumentElement().getElementsByTagName(""String_Node_Str"");
      if (sourceNodes.getLength() > 0) {
        for (int i=0; i < sourceNodes.getLength(); i++) {
          Element node=(Element)sourceNodes.item(i);
          String subPackage=node.getAttribute(""String_Node_Str"");
          String pckg=modulePackage + ""String_Node_Str"" + subPackage;
          enunciate.debug(""String_Node_Str"",pckg);
          this.sourcePackagesToModules.put(pckg,modulename);
        }
      }
 else {
        String pckg=modulePackage + ""String_Node_Str"";
        enunciate.debug(""String_Node_Str"",pckg);
        this.sourcePackagesToModules.put(pckg,modulename);
      }
    }
 catch (    Exception e) {
      enunciate.warn(""String_Node_Str"",e.getMessage());
    }
  }
}",0.99644128113879
177141,"@Override public ValidationResult validateComplexType(ComplexTypeDefinition complexType){
  ValidationResult result=super.validateComplexType(complexType);
  if (!isGWTTransient(complexType)) {
    if (!hasDefaultConstructor(complexType)) {
      result.addError(complexType,""String_Node_Str"");
    }
    if ((this.enforceNamespaceConformance) && (!complexType.getPackage().getQualifiedName().startsWith(this.gwtModuleNamespace)) && (isKnownGwtType(complexType))) {
      result.addError(complexType,String.format(""String_Node_Str"",complexType.getPackage().getQualifiedName(),gwtModuleNamespace));
    }
    for (    Attribute attribute : complexType.getAttributes()) {
      if (!isGWTTransient(attribute)) {
        if ((attribute.getDelegate() instanceof FieldDeclaration) && (enforceNoFieldAccessors)) {
          result.addError(attribute,""String_Node_Str"");
        }
        if (!isSupported(attribute.getAccessorType())) {
          result.addError(attribute,""String_Node_Str"" + attribute.getAccessorType() + ""String_Node_Str"");
        }
      }
    }
    for (    Element element : complexType.getElements()) {
      if (!isGWTTransient(element)) {
        if ((element.getDelegate() instanceof FieldDeclaration) && (enforceNoFieldAccessors)) {
          result.addError(element,""String_Node_Str"");
        }
        if (!isSupported(element.getAccessorType())) {
          result.addError(element,""String_Node_Str"" + element.getAccessorType() + ""String_Node_Str"");
        }
      }
    }
    Value value=complexType.getValue();
    if (value != null) {
      if (!isGWTTransient(value)) {
        if ((value.getDelegate() instanceof FieldDeclaration) && (enforceNoFieldAccessors)) {
          result.addError(value,""String_Node_Str"");
        }
        if (!isSupported(value.getAccessorType())) {
          result.addError(value,""String_Node_Str"" + value.getAccessorType() + ""String_Node_Str"");
        }
      }
    }
  }
  return result;
}","@Override public ValidationResult validateComplexType(ComplexTypeDefinition complexType){
  ValidationResult result=super.validateComplexType(complexType);
  if (!isGWTTransient(complexType)) {
    if (!hasDefaultConstructor(complexType)) {
      result.addError(complexType,""String_Node_Str"");
    }
    if ((this.enforceNamespaceConformance) && (!complexType.getPackage().getQualifiedName().startsWith(this.gwtModuleNamespace)) && (!isKnownGwtType(complexType))) {
      result.addError(complexType,String.format(""String_Node_Str"",complexType.getPackage().getQualifiedName(),gwtModuleNamespace));
    }
    for (    Attribute attribute : complexType.getAttributes()) {
      if (!isGWTTransient(attribute)) {
        if ((attribute.getDelegate() instanceof FieldDeclaration) && (enforceNoFieldAccessors)) {
          result.addError(attribute,""String_Node_Str"");
        }
        if (!isSupported(attribute.getAccessorType())) {
          result.addError(attribute,""String_Node_Str"" + attribute.getAccessorType() + ""String_Node_Str"");
        }
      }
    }
    for (    Element element : complexType.getElements()) {
      if (!isGWTTransient(element)) {
        if ((element.getDelegate() instanceof FieldDeclaration) && (enforceNoFieldAccessors)) {
          result.addError(element,""String_Node_Str"");
        }
        if (!isSupported(element.getAccessorType())) {
          result.addError(element,""String_Node_Str"" + element.getAccessorType() + ""String_Node_Str"");
        }
      }
    }
    Value value=complexType.getValue();
    if (value != null) {
      if (!isGWTTransient(value)) {
        if ((value.getDelegate() instanceof FieldDeclaration) && (enforceNoFieldAccessors)) {
          result.addError(value,""String_Node_Str"");
        }
        if (!isSupported(value.getAccessorType())) {
          result.addError(value,""String_Node_Str"" + value.getAccessorType() + ""String_Node_Str"");
        }
      }
    }
  }
  return result;
}",0.9997441800972116
177142,"@Override protected void doCompile() throws EnunciateException, IOException {
  Enunciate enunciate=getEnunciate();
  if (this.gwtApps.size() > 0) {
    doGWTCompile();
    enunciate.addArtifact(new FileArtifact(getName(),""String_Node_Str"",getAppGenerateDir()));
  }
  if (!enunciate.isUpToDate(getClientSideGenerateDir(),getClientSideCompileDir())) {
    debug(""String_Node_Str"");
    Collection<String> clientSideFiles=enunciate.getJavaFiles(getClientSideGenerateDir());
    String clientClasspath=enunciate.getEnunciateBuildClasspath();
    enunciate.invokeJavac(clientClasspath,""String_Node_Str"",getClientSideCompileDir(),new ArrayList<String>(),clientSideFiles.toArray(new String[clientSideFiles.size()]));
  }
 else {
    info(""String_Node_Str"");
  }
}","@Override protected void doCompile() throws EnunciateException, IOException {
  Enunciate enunciate=getEnunciate();
  if (this.gwtApps.size() > 0) {
    doGWTCompile();
    enunciate.addArtifact(new FileArtifact(getName(),""String_Node_Str"",getAppGenerateDir()));
  }
  if (!enunciate.isUpToDate(getClientSideGenerateDir(),getClientSideCompileDir())) {
    debug(""String_Node_Str"");
    Collection<String> clientSideFiles=enunciate.getJavaFiles(getClientSideGenerateDir());
    String clientClasspath=enunciate.getEnunciateBuildClasspath() + File.pathSeparator + enunciate.getRuntimeClasspath();
    enunciate.invokeJavac(clientClasspath,""String_Node_Str"",getClientSideCompileDir(),new ArrayList<String>(),clientSideFiles.toArray(new String[clientSideFiles.size()]));
  }
 else {
    info(""String_Node_Str"");
  }
}",0.9649904519414386
177143,"@Override public void doFreemarkerGenerate() throws IOException, TemplateException, EnunciateException {
  File clientSideGenerateDir=getClientSideGenerateDir();
  File serverSideGenerateDir=getServerSideGenerateDir();
  boolean upToDate=enunciate.isUpToDateWithSources(clientSideGenerateDir) && enunciate.isUpToDateWithSources(serverSideGenerateDir);
  if (!upToDate) {
    URL typeMapperTemplate=getTemplateURL(""String_Node_Str"");
    URL enumTypeMapperTemplate=getTemplateURL(""String_Node_Str"");
    URL faultMapperTemplate=getTemplateURL(""String_Node_Str"");
    URL moduleXmlTemplate=getTemplateURL(""String_Node_Str"");
    URL eiTemplate=isUseWrappedServices() ? getTemplateURL(""String_Node_Str"") : getTemplateURL(""String_Node_Str"");
    URL endpointImplTemplate=getTemplateURL(""String_Node_Str"");
    URL faultTemplate=getTemplateURL(""String_Node_Str"");
    URL typeTemplate=getTemplateURL(""String_Node_Str"");
    URL overlayTypeTemplate=getTemplateURL(""String_Node_Str"");
    URL enumTypeTemplate=getTemplateURL(""String_Node_Str"");
    URL overlayEnumTypeTemplate=getTemplateURL(""String_Node_Str"");
    EnunciateFreemarkerModel model=getModel();
    model.put(""String_Node_Str"",this.springDIFound);
    model.put(""String_Node_Str"",this.isUseWrappedServices());
    Map<String,String> conversions=new LinkedHashMap<String,String>();
    Set<String> knownGwtPackages=this.gwtClasspathHandler != null ? this.gwtClasspathHandler.getSourcePackagesToModules().keySet() : Collections.<String>emptySet();
    for (    String knownGwtPackage : knownGwtPackages) {
      conversions.put(knownGwtPackage,knownGwtPackage);
    }
    Map<String,String> overlayConversions=new HashMap<String,String>();
    String clientNamespace=this.rpcModuleNamespace + ""String_Node_Str"";
    conversions.put(this.rpcModuleNamespace,clientNamespace);
    overlayConversions.put(this.rpcModuleNamespace,clientNamespace + ""String_Node_Str"");
    if (!this.enforceNamespaceConformance) {
      TreeSet<WebFault> allFaults=new TreeSet<WebFault>(new TypeDeclarationComparator());
      for (      WsdlInfo wsdlInfo : model.getNamespacesToWSDLs().values()) {
        for (        EndpointInterface ei : wsdlInfo.getEndpointInterfaces()) {
          if (!isGWTTransient(ei)) {
            String pckg=ei.getPackage().getQualifiedName();
            if (!pckg.startsWith(this.rpcModuleNamespace) && !conversions.containsKey(pckg)) {
              conversions.put(pckg,clientNamespace + ""String_Node_Str"" + pckg);
            }
            for (            WebMethod webMethod : ei.getWebMethods()) {
              for (              WebFault webFault : webMethod.getWebFaults()) {
                allFaults.add(webFault);
              }
            }
          }
        }
      }
      for (      WebFault webFault : allFaults) {
        if (!isGWTTransient(webFault)) {
          String pckg=webFault.getPackage().getQualifiedName();
          if (!pckg.startsWith(this.rpcModuleNamespace) && !conversions.containsKey(pckg)) {
            conversions.put(pckg,clientNamespace + ""String_Node_Str"" + pckg);
          }
        }
      }
      for (      SchemaInfo schemaInfo : model.getNamespacesToSchemas().values()) {
        for (        TypeDefinition typeDefinition : schemaInfo.getTypeDefinitions()) {
          if (!isGWTTransient(typeDefinition)) {
            String pckg=typeDefinition.getPackage().getQualifiedName();
            if (!pckg.startsWith(this.rpcModuleNamespace) && !conversions.containsKey(pckg) && (getKnownGwtModule(typeDefinition) == null)) {
              conversions.put(pckg,clientNamespace + ""String_Node_Str"" + pckg);
              overlayConversions.put(pckg,clientNamespace + ""String_Node_Str"" + pckg);
            }
          }
        }
      }
    }
    ClientClassnameForMethod classnameFor=new ClientClassnameForMethod(conversions);
    classnameFor.setJdk15(true);
    OverlayClientClassnameForMethod overlayClassnameFor=new OverlayClientClassnameForMethod(overlayConversions);
    overlayClassnameFor.setJdk15(true);
    model.put(""String_Node_Str"",new ClientPackageForMethod(conversions));
    model.put(""String_Node_Str"",new ClientPackageForMethod(overlayConversions));
    model.put(""String_Node_Str"",classnameFor);
    model.put(""String_Node_Str"",overlayClassnameFor);
    model.put(""String_Node_Str"",new SimpleNameWithParamsMethod(classnameFor));
    model.put(""String_Node_Str"",getGwtSubcontext());
    model.put(""String_Node_Str"",new AccessorOverridesAnotherMethod());
    model.setFileOutputDirectory(clientSideGenerateDir);
    Properties gwt2jaxbMappings=new Properties();
    TreeSet<WebFault> allFaults=new TreeSet<WebFault>(new TypeDeclarationComparator());
    Set<String> importedModules=new TreeSet<String>();
    if (isGenerateRPCSupport()) {
      debug(""String_Node_Str"");
      for (      WsdlInfo wsdlInfo : model.getNamespacesToWSDLs().values()) {
        for (        EndpointInterface ei : wsdlInfo.getEndpointInterfaces()) {
          if (!isGWTTransient(ei)) {
            model.put(""String_Node_Str"",ei);
            processTemplate(eiTemplate,model);
            for (            WebMethod webMethod : ei.getWebMethods()) {
              for (              WebFault webFault : webMethod.getWebFaults()) {
                allFaults.add(webFault);
              }
            }
          }
        }
      }
      debug(""String_Node_Str"");
      for (      WebFault webFault : allFaults) {
        if (!isGWTTransient(webFault)) {
          model.put(""String_Node_Str"",webFault);
          processTemplate(faultTemplate,model);
        }
      }
      debug(""String_Node_Str"");
      for (      SchemaInfo schemaInfo : model.getNamespacesToSchemas().values()) {
        for (        TypeDefinition typeDefinition : schemaInfo.getTypeDefinitions()) {
          if (!isGWTTransient(typeDefinition)) {
            String knownGwtModule=getKnownGwtModule(typeDefinition);
            if (knownGwtModule == null) {
              model.put(""String_Node_Str"",typeDefinition);
              URL template=typeDefinition.isEnum() ? enumTypeTemplate : typeTemplate;
              processTemplate(template,model);
            }
 else {
              importedModules.add(knownGwtModule);
              debug(""String_Node_Str"",typeDefinition.getQualifiedName());
            }
          }
        }
      }
    }
    if (isGenerateJsonOverlays()) {
      debug(""String_Node_Str"");
      for (      SchemaInfo schemaInfo : model.getNamespacesToSchemas().values()) {
        for (        TypeDefinition typeDefinition : schemaInfo.getTypeDefinitions()) {
          if (!isGWTTransient(typeDefinition)) {
            model.put(""String_Node_Str"",typeDefinition);
            URL template=typeDefinition.isEnum() ? overlayEnumTypeTemplate : overlayTypeTemplate;
            processTemplate(template,model);
          }
        }
      }
    }
    model.put(""String_Node_Str"",this.rpcModuleName);
    model.put(""String_Node_Str"",importedModules);
    processTemplate(moduleXmlTemplate,model);
    model.setFileOutputDirectory(serverSideGenerateDir);
    if (isGenerateRPCSupport()) {
      debug(""String_Node_Str"");
      for (      WsdlInfo wsdlInfo : model.getNamespacesToWSDLs().values()) {
        for (        EndpointInterface ei : wsdlInfo.getEndpointInterfaces()) {
          if (!isGWTTransient(ei)) {
            model.put(""String_Node_Str"",ei);
            processTemplate(endpointImplTemplate,model);
          }
        }
      }
      debug(""String_Node_Str"");
      for (      SchemaInfo schemaInfo : model.getNamespacesToSchemas().values()) {
        for (        TypeDefinition typeDefinition : schemaInfo.getTypeDefinitions()) {
          if (!isGWTTransient(typeDefinition)) {
            if (getKnownGwtModule(typeDefinition) == null) {
              if (!typeDefinition.isEnum()) {
                model.put(""String_Node_Str"",typeDefinition);
                processTemplate(typeMapperTemplate,model);
                gwt2jaxbMappings.setProperty(classnameFor.convert(typeDefinition),typeDefinition.getQualifiedName());
              }
 else               if (typeDefinition.isEnum()) {
                model.put(""String_Node_Str"",typeDefinition);
                processTemplate(enumTypeMapperTemplate,model);
                gwt2jaxbMappings.setProperty(classnameFor.convert(typeDefinition),typeDefinition.getQualifiedName());
              }
            }
 else {
              debug(""String_Node_Str"",typeDefinition.getQualifiedName());
            }
          }
        }
      }
      debug(""String_Node_Str"");
      for (      WebFault webFault : allFaults) {
        if (!isGWTTransient(webFault)) {
          model.put(""String_Node_Str"",webFault);
          processTemplate(faultMapperTemplate,model);
          gwt2jaxbMappings.setProperty(classnameFor.convert(webFault),webFault.getQualifiedName());
        }
      }
      FileOutputStream mappingsOut=new FileOutputStream(new File(serverSideGenerateDir,""String_Node_Str""));
      gwt2jaxbMappings.store(mappingsOut,""String_Node_Str"");
      mappingsOut.flush();
      mappingsOut.close();
    }
  }
 else {
    info(""String_Node_Str"");
  }
  enunciate.addArtifact(new FileArtifact(getName(),""String_Node_Str"",clientSideGenerateDir));
  enunciate.addArtifact(new FileArtifact(getName(),""String_Node_Str"",serverSideGenerateDir));
  enunciate.addAdditionalSourceRoot(clientSideGenerateDir);
  enunciate.addAdditionalSourceRoot(serverSideGenerateDir);
}","@Override public void doFreemarkerGenerate() throws IOException, TemplateException, EnunciateException {
  File clientSideGenerateDir=getClientSideGenerateDir();
  File serverSideGenerateDir=getServerSideGenerateDir();
  boolean upToDate=enunciate.isUpToDateWithSources(clientSideGenerateDir) && enunciate.isUpToDateWithSources(serverSideGenerateDir);
  if (!upToDate) {
    URL typeMapperTemplate=getTemplateURL(""String_Node_Str"");
    URL enumTypeMapperTemplate=getTemplateURL(""String_Node_Str"");
    URL faultMapperTemplate=getTemplateURL(""String_Node_Str"");
    URL moduleXmlTemplate=getTemplateURL(""String_Node_Str"");
    URL eiTemplate=isUseWrappedServices() ? getTemplateURL(""String_Node_Str"") : getTemplateURL(""String_Node_Str"");
    URL endpointImplTemplate=getTemplateURL(""String_Node_Str"");
    URL faultTemplate=getTemplateURL(""String_Node_Str"");
    URL typeTemplate=getTemplateURL(""String_Node_Str"");
    URL overlayTypeTemplate=getTemplateURL(""String_Node_Str"");
    URL enumTypeTemplate=getTemplateURL(""String_Node_Str"");
    URL overlayEnumTypeTemplate=getTemplateURL(""String_Node_Str"");
    EnunciateFreemarkerModel model=getModel();
    model.put(""String_Node_Str"",this.springDIFound);
    model.put(""String_Node_Str"",this.isUseWrappedServices());
    Map<String,String> conversions=new LinkedHashMap<String,String>();
    Set<String> knownGwtPackages=this.gwtClasspathHandler != null ? this.gwtClasspathHandler.getSourcePackagesToModules().keySet() : Collections.<String>emptySet();
    for (    String knownGwtPackage : knownGwtPackages) {
      conversions.put(knownGwtPackage,knownGwtPackage);
    }
    Map<String,String> overlayConversions=new HashMap<String,String>();
    String clientNamespace=this.rpcModuleNamespace + ""String_Node_Str"";
    conversions.put(this.rpcModuleNamespace,clientNamespace);
    overlayConversions.put(this.rpcModuleNamespace,clientNamespace + ""String_Node_Str"");
    if (!this.enforceNamespaceConformance) {
      TreeSet<WebFault> allFaults=new TreeSet<WebFault>(new TypeDeclarationComparator());
      for (      WsdlInfo wsdlInfo : model.getNamespacesToWSDLs().values()) {
        for (        EndpointInterface ei : wsdlInfo.getEndpointInterfaces()) {
          if (!isGWTTransient(ei)) {
            String pckg=ei.getPackage().getQualifiedName();
            if (!pckg.startsWith(this.rpcModuleNamespace) && !conversions.containsKey(pckg)) {
              conversions.put(pckg,clientNamespace + ""String_Node_Str"" + pckg);
            }
            for (            WebMethod webMethod : ei.getWebMethods()) {
              for (              WebFault webFault : webMethod.getWebFaults()) {
                allFaults.add(webFault);
              }
            }
          }
        }
      }
      for (      WebFault webFault : allFaults) {
        if (!isGWTTransient(webFault)) {
          String pckg=webFault.getPackage().getQualifiedName();
          if (!pckg.startsWith(this.rpcModuleNamespace) && !conversions.containsKey(pckg) && (getKnownGwtModule(webFault) == null)) {
            conversions.put(pckg,clientNamespace + ""String_Node_Str"" + pckg);
          }
        }
      }
      for (      SchemaInfo schemaInfo : model.getNamespacesToSchemas().values()) {
        for (        TypeDefinition typeDefinition : schemaInfo.getTypeDefinitions()) {
          if (!isGWTTransient(typeDefinition)) {
            String pckg=typeDefinition.getPackage().getQualifiedName();
            if (!pckg.startsWith(this.rpcModuleNamespace) && !conversions.containsKey(pckg)) {
              if (getKnownGwtModule(typeDefinition) == null) {
                conversions.put(pckg,clientNamespace + ""String_Node_Str"" + pckg);
              }
              overlayConversions.put(pckg,clientNamespace + ""String_Node_Str"" + pckg);
            }
          }
        }
      }
    }
    ClientClassnameForMethod classnameFor=new ClientClassnameForMethod(conversions);
    classnameFor.setJdk15(true);
    OverlayClientClassnameForMethod overlayClassnameFor=new OverlayClientClassnameForMethod(overlayConversions);
    overlayClassnameFor.setJdk15(true);
    model.put(""String_Node_Str"",new ClientPackageForMethod(conversions));
    model.put(""String_Node_Str"",new ClientPackageForMethod(overlayConversions));
    model.put(""String_Node_Str"",classnameFor);
    model.put(""String_Node_Str"",overlayClassnameFor);
    model.put(""String_Node_Str"",new SimpleNameWithParamsMethod(classnameFor));
    model.put(""String_Node_Str"",getGwtSubcontext());
    model.put(""String_Node_Str"",new AccessorOverridesAnotherMethod());
    model.setFileOutputDirectory(clientSideGenerateDir);
    Properties gwt2jaxbMappings=new Properties();
    TreeSet<WebFault> allFaults=new TreeSet<WebFault>(new TypeDeclarationComparator());
    Set<String> importedModules=new TreeSet<String>();
    if (isGenerateRPCSupport()) {
      debug(""String_Node_Str"");
      for (      WsdlInfo wsdlInfo : model.getNamespacesToWSDLs().values()) {
        for (        EndpointInterface ei : wsdlInfo.getEndpointInterfaces()) {
          if (!isGWTTransient(ei)) {
            model.put(""String_Node_Str"",ei);
            processTemplate(eiTemplate,model);
            for (            WebMethod webMethod : ei.getWebMethods()) {
              for (              WebFault webFault : webMethod.getWebFaults()) {
                allFaults.add(webFault);
              }
            }
          }
        }
      }
      debug(""String_Node_Str"");
      for (      WebFault webFault : allFaults) {
        if (!isGWTTransient(webFault)) {
          String knownGwtModule=getKnownGwtModule(webFault);
          if (knownGwtModule == null) {
            model.put(""String_Node_Str"",webFault);
            processTemplate(faultTemplate,model);
          }
 else {
            importedModules.add(knownGwtModule);
            debug(""String_Node_Str"",webFault.getQualifiedName());
          }
        }
      }
      debug(""String_Node_Str"");
      for (      SchemaInfo schemaInfo : model.getNamespacesToSchemas().values()) {
        for (        TypeDefinition typeDefinition : schemaInfo.getTypeDefinitions()) {
          if (!isGWTTransient(typeDefinition)) {
            String knownGwtModule=getKnownGwtModule(typeDefinition);
            if (knownGwtModule == null) {
              model.put(""String_Node_Str"",typeDefinition);
              URL template=typeDefinition.isEnum() ? enumTypeTemplate : typeTemplate;
              processTemplate(template,model);
            }
 else {
              importedModules.add(knownGwtModule);
              debug(""String_Node_Str"",typeDefinition.getQualifiedName());
            }
          }
        }
      }
    }
    if (isGenerateJsonOverlays()) {
      debug(""String_Node_Str"");
      for (      SchemaInfo schemaInfo : model.getNamespacesToSchemas().values()) {
        for (        TypeDefinition typeDefinition : schemaInfo.getTypeDefinitions()) {
          if (!isGWTTransient(typeDefinition)) {
            model.put(""String_Node_Str"",typeDefinition);
            URL template=typeDefinition.isEnum() ? overlayEnumTypeTemplate : overlayTypeTemplate;
            processTemplate(template,model);
          }
        }
      }
    }
    model.put(""String_Node_Str"",this.rpcModuleName);
    model.put(""String_Node_Str"",importedModules);
    processTemplate(moduleXmlTemplate,model);
    model.setFileOutputDirectory(serverSideGenerateDir);
    if (isGenerateRPCSupport()) {
      debug(""String_Node_Str"");
      for (      WsdlInfo wsdlInfo : model.getNamespacesToWSDLs().values()) {
        for (        EndpointInterface ei : wsdlInfo.getEndpointInterfaces()) {
          if (!isGWTTransient(ei)) {
            model.put(""String_Node_Str"",ei);
            processTemplate(endpointImplTemplate,model);
          }
        }
      }
      debug(""String_Node_Str"");
      for (      SchemaInfo schemaInfo : model.getNamespacesToSchemas().values()) {
        for (        TypeDefinition typeDefinition : schemaInfo.getTypeDefinitions()) {
          if (!isGWTTransient(typeDefinition)) {
            if (getKnownGwtModule(typeDefinition) == null) {
              if (!typeDefinition.isEnum()) {
                model.put(""String_Node_Str"",typeDefinition);
                processTemplate(typeMapperTemplate,model);
                gwt2jaxbMappings.setProperty(classnameFor.convert(typeDefinition),typeDefinition.getQualifiedName());
              }
 else               if (typeDefinition.isEnum()) {
                model.put(""String_Node_Str"",typeDefinition);
                processTemplate(enumTypeMapperTemplate,model);
                gwt2jaxbMappings.setProperty(classnameFor.convert(typeDefinition),typeDefinition.getQualifiedName());
              }
            }
 else {
              debug(""String_Node_Str"",typeDefinition.getQualifiedName());
            }
          }
        }
      }
      debug(""String_Node_Str"");
      for (      WebFault webFault : allFaults) {
        if (!isGWTTransient(webFault)) {
          model.put(""String_Node_Str"",webFault);
          processTemplate(faultMapperTemplate,model);
          gwt2jaxbMappings.setProperty(classnameFor.convert(webFault),webFault.getQualifiedName());
        }
      }
      FileOutputStream mappingsOut=new FileOutputStream(new File(serverSideGenerateDir,""String_Node_Str""));
      gwt2jaxbMappings.store(mappingsOut,""String_Node_Str"");
      mappingsOut.flush();
      mappingsOut.close();
    }
  }
 else {
    info(""String_Node_Str"");
  }
  enunciate.addArtifact(new FileArtifact(getName(),""String_Node_Str"",clientSideGenerateDir));
  enunciate.addArtifact(new FileArtifact(getName(),""String_Node_Str"",serverSideGenerateDir));
  enunciate.addAdditionalSourceRoot(clientSideGenerateDir);
  enunciate.addAdditionalSourceRoot(serverSideGenerateDir);
}",0.9825820204856236
177144,"@Override public ValidationResult validateEndpointInterface(EndpointInterface ei){
  ValidationResult result=super.validateEndpointInterface(ei);
  TreeSet<WebFault> allFaults=new TreeSet<WebFault>(new TypeDeclarationComparator());
  if (!isGWTTransient(ei)) {
    if ((this.enforceNamespaceConformance) && (!ei.getPackage().getQualifiedName().startsWith(this.gwtModuleNamespace))) {
      result.addError(ei,String.format(""String_Node_Str"",ei.getPackage().getQualifiedName(),gwtModuleNamespace));
    }
    for (    WebMethod webMethod : ei.getWebMethods()) {
      if (!isGWTTransient(webMethod)) {
        if (!isSupported(webMethod.getWebResult())) {
          result.addError(webMethod,""String_Node_Str"" + webMethod.getWebResult() + ""String_Node_Str"");
        }
        for (        WebParam webParam : webMethod.getWebParameters()) {
          if (!isSupported(webParam.getType())) {
            result.addError(webParam,""String_Node_Str"" + webParam.getType() + ""String_Node_Str"");
          }
        }
        allFaults.addAll(webMethod.getWebFaults());
      }
    }
    if (ei.getEndpointImplementations().size() > 1) {
      ArrayList<String> impls=new ArrayList<String>();
      for (      EndpointImplementation impl : ei.getEndpointImplementations()) {
        impls.add(impl.getQualifiedName());
      }
      result.addError(ei,""String_Node_Str"" + ei.getQualifiedName() + ""String_Node_Str""+ ei.getEndpointImplementations().size()+ ""String_Node_Str""+ impls.toString()+ ""String_Node_Str"");
    }
 else     if (ei.getEndpointImplementations().isEmpty()) {
      result.addError(ei,""String_Node_Str"");
    }
  }
  for (  WebFault fault : allFaults) {
    if (!isGWTTransient(fault)) {
      if ((this.enforceNamespaceConformance) && (!fault.getPackage().getQualifiedName().startsWith(this.gwtModuleNamespace))) {
        result.addError(fault,String.format(""String_Node_Str"",fault.getPackage().getQualifiedName(),gwtModuleNamespace));
      }
    }
  }
  return result;
}","@Override public ValidationResult validateEndpointInterface(EndpointInterface ei){
  ValidationResult result=super.validateEndpointInterface(ei);
  TreeSet<WebFault> allFaults=new TreeSet<WebFault>(new TypeDeclarationComparator());
  if (!isGWTTransient(ei)) {
    if ((this.enforceNamespaceConformance) && (!ei.getPackage().getQualifiedName().startsWith(this.gwtModuleNamespace))) {
      result.addError(ei,String.format(""String_Node_Str"",ei.getPackage().getQualifiedName(),gwtModuleNamespace));
    }
    for (    WebMethod webMethod : ei.getWebMethods()) {
      if (!isGWTTransient(webMethod)) {
        if (!isSupported(webMethod.getWebResult())) {
          result.addError(webMethod,""String_Node_Str"" + webMethod.getWebResult() + ""String_Node_Str"");
        }
        for (        WebParam webParam : webMethod.getWebParameters()) {
          if (!isSupported(webParam.getType())) {
            result.addError(webParam,""String_Node_Str"" + webParam.getType() + ""String_Node_Str"");
          }
        }
        allFaults.addAll(webMethod.getWebFaults());
      }
    }
    if (ei.getEndpointImplementations().size() > 1) {
      ArrayList<String> impls=new ArrayList<String>();
      for (      EndpointImplementation impl : ei.getEndpointImplementations()) {
        impls.add(impl.getQualifiedName());
      }
      result.addError(ei,""String_Node_Str"" + ei.getQualifiedName() + ""String_Node_Str""+ ei.getEndpointImplementations().size()+ ""String_Node_Str""+ impls.toString()+ ""String_Node_Str"");
    }
 else     if (ei.getEndpointImplementations().isEmpty()) {
      result.addError(ei,""String_Node_Str"");
    }
  }
  for (  WebFault fault : allFaults) {
    if (!isGWTTransient(fault)) {
      if ((this.enforceNamespaceConformance) && (!fault.getPackage().getQualifiedName().startsWith(this.gwtModuleNamespace)) && (!isKnownGwtType(fault))) {
        result.addError(fault,String.format(""String_Node_Str"",fault.getPackage().getQualifiedName(),gwtModuleNamespace));
      }
    }
  }
  return result;
}",0.992992992992993
177145,"/** 
 * Load the qname of the referenced root element declaration.
 * @return the qname of the referenced root element declaration.
 */
protected QName loadRef(){
  TypeDeclaration declaration=null;
  String elementDeclaration;
  try {
    if ((xmlElementRef != null) && (xmlElementRef.type() != XmlElementRef.DEFAULT.class)) {
      Class typeClass=xmlElementRef.type();
      elementDeclaration=typeClass.getName();
      declaration=getEnv().getTypeDeclaration(typeClass.getName());
    }
 else {
      TypeMirror accessorType=getBareAccessorType();
      elementDeclaration=accessorType.toString();
      if (accessorType instanceof DeclaredType) {
        declaration=((DeclaredType)accessorType).getDeclaration();
      }
    }
  }
 catch (  MirroredTypeException e) {
    TypeMirror typeMirror=e.getTypeMirror();
    elementDeclaration=typeMirror.toString();
    if (typeMirror instanceof DeclaredType) {
      declaration=((DeclaredType)typeMirror).getDeclaration();
    }
  }
  QName refQName=null;
  if (declaration instanceof ClassDeclaration) {
    if (declaration.getQualifiedName().equals(JAXBElement.class.getName())) {
      String localName=xmlElementRef != null && !""String_Node_Str"".equals(xmlElementRef.name()) ? xmlElementRef.name() : null;
      String namespace=xmlElementRef != null ? xmlElementRef.namespace() : ""String_Node_Str"";
      if (localName == null) {
        throw new ValidationException(getPosition(),""String_Node_Str"" + getName() + ""String_Node_Str""+ getTypeDefinition().getQualifiedName()+ ""String_Node_Str"");
      }
      refQName=new QName(namespace,localName);
    }
 else     if (declaration.getAnnotation(XmlRootElement.class) != null) {
      ClassDeclaration classDeclaration=(ClassDeclaration)declaration;
      RootElementDeclaration refElement=new RootElementDeclaration(classDeclaration,((EnunciateFreemarkerModel)FreemarkerModel.get()).findTypeDefinition(classDeclaration));
      refQName=new QName(refElement.getNamespace(),refElement.getName());
    }
  }
  if (refQName == null) {
    throw new ValidationException(getPosition(),""String_Node_Str"" + getSimpleName() + ""String_Node_Str""+ getTypeDefinition().getQualifiedName()+ ""String_Node_Str""+ elementDeclaration+ ""String_Node_Str"");
  }
  return refQName;
}","/** 
 * Load the qname of the referenced root element declaration.
 * @return the qname of the referenced root element declaration.
 */
protected QName loadRef(){
  TypeDeclaration declaration=null;
  String elementDeclaration;
  DecoratedTypeMirror refType;
  try {
    if ((xmlElementRef != null) && (xmlElementRef.type() != XmlElementRef.DEFAULT.class)) {
      Class typeClass=xmlElementRef.type();
      elementDeclaration=typeClass.getName();
      declaration=getEnv().getTypeDeclaration(typeClass.getName());
      refType=(DecoratedTypeMirror)TypeMirrorDecorator.decorate(getEnv().getTypeUtils().getDeclaredType(declaration));
    }
 else {
      TypeMirror accessorType=getBareAccessorType();
      elementDeclaration=accessorType.toString();
      if (accessorType instanceof DeclaredType) {
        declaration=((DeclaredType)accessorType).getDeclaration();
      }
      refType=(DecoratedTypeMirror)TypeMirrorDecorator.decorate(accessorType);
    }
  }
 catch (  MirroredTypeException e) {
    TypeMirror typeMirror=e.getTypeMirror();
    elementDeclaration=typeMirror.toString();
    if (typeMirror instanceof DeclaredType) {
      declaration=((DeclaredType)typeMirror).getDeclaration();
    }
    refType=(DecoratedTypeMirror)TypeMirrorDecorator.decorate(typeMirror);
  }
  QName refQName=null;
  if (refType.isInstanceOf(JAXBElement.class.getName())) {
    String localName=xmlElementRef != null && !""String_Node_Str"".equals(xmlElementRef.name()) ? xmlElementRef.name() : null;
    String namespace=xmlElementRef != null ? xmlElementRef.namespace() : ""String_Node_Str"";
    if (localName == null) {
      throw new ValidationException(getPosition(),""String_Node_Str"" + getName() + ""String_Node_Str""+ getTypeDefinition().getQualifiedName()+ ""String_Node_Str"");
    }
    refQName=new QName(namespace,localName);
  }
 else   if (declaration instanceof ClassDeclaration && declaration.getAnnotation(XmlRootElement.class) != null) {
    ClassDeclaration classDeclaration=(ClassDeclaration)declaration;
    RootElementDeclaration refElement=new RootElementDeclaration(classDeclaration,((EnunciateFreemarkerModel)FreemarkerModel.get()).findTypeDefinition(classDeclaration));
    refQName=new QName(refElement.getNamespace(),refElement.getName());
  }
  if (refQName == null) {
    throw new ValidationException(getPosition(),""String_Node_Str"" + getSimpleName() + ""String_Node_Str""+ getTypeDefinition().getQualifiedName()+ ""String_Node_Str""+ elementDeclaration+ ""String_Node_Str"");
  }
  return refQName;
}",0.8973447627012335
177146,"public ResourceMethod(MethodDeclaration delegate,Resource parent){
  super(delegate);
  Set<String> httpMethods=new TreeSet<String>();
  Collection<AnnotationMirror> mirrors=delegate.getAnnotationMirrors();
  for (  AnnotationMirror mirror : mirrors) {
    AnnotationTypeDeclaration annotationDeclaration=mirror.getAnnotationType().getDeclaration();
    HttpMethod httpMethodInfo=annotationDeclaration.getAnnotation(HttpMethod.class);
    if (httpMethodInfo != null) {
      httpMethods.add(httpMethodInfo.value());
      break;
    }
  }
  if (httpMethods.isEmpty()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.httpMethods=httpMethods;
  Set<String> consumes;
  Consumes consumesInfo=delegate.getAnnotation(Consumes.class);
  if (consumesInfo != null) {
    consumes=new TreeSet<String>(Arrays.asList(consumesInfo.value()));
  }
 else {
    consumes=new TreeSet<String>(parent.getConsumesMime());
  }
  this.consumesMime=consumes;
  Set<String> produces;
  Produces producesInfo=delegate.getAnnotation(Produces.class);
  if (producesInfo != null) {
    produces=new TreeSet<String>(Arrays.asList(producesInfo.value()));
  }
 else {
    produces=new TreeSet<String>(parent.getProducesMime());
  }
  this.producesMime=produces;
  String subpath=null;
  Path pathInfo=delegate.getAnnotation(Path.class);
  if (pathInfo != null) {
    subpath=pathInfo.value();
  }
  ResourceEntityParameter entityParameter;
  List<RESTResourceParameter> resourceParameters;
  ResourcePayloadTypeAdapter outputPayload;
  ResourceMethodSignature signatureOverride=delegate.getAnnotation(ResourceMethodSignature.class);
  if (signatureOverride == null) {
    entityParameter=null;
    resourceParameters=new ArrayList<RESTResourceParameter>();
    for (    ParameterDeclaration parameterDeclaration : getParameters()) {
      if (ResourceParameter.isResourceParameter(parameterDeclaration)) {
        resourceParameters.add(new ResourceParameter(parameterDeclaration));
      }
 else       if (parameterDeclaration.getAnnotation(Context.class) == null) {
        entityParameter=new ResourceEntityParameter(parameterDeclaration);
      }
    }
    DecoratedTypeMirror returnType=(DecoratedTypeMirror)getReturnType();
    outputPayload=returnType.isVoid() ? null : new ResourcePayloadTypeAdapter(returnType);
  }
 else {
    entityParameter=loadEntityParameter(signatureOverride);
    resourceParameters=loadResourceParameters(signatureOverride);
    outputPayload=loadOutputPayload(signatureOverride);
  }
  this.entityParameter=entityParameter;
  this.resourceParameters=resourceParameters;
  this.subpath=subpath;
  this.parent=parent;
  this.errors=new ArrayList<RESTResourceError>();
  this.outputPayload=outputPayload;
}","public ResourceMethod(MethodDeclaration delegate,Resource parent){
  super(delegate);
  Set<String> httpMethods=new TreeSet<String>();
  Collection<AnnotationMirror> mirrors=delegate.getAnnotationMirrors();
  for (  AnnotationMirror mirror : mirrors) {
    AnnotationTypeDeclaration annotationDeclaration=mirror.getAnnotationType().getDeclaration();
    HttpMethod httpMethodInfo=annotationDeclaration.getAnnotation(HttpMethod.class);
    if (httpMethodInfo != null) {
      httpMethods.add(httpMethodInfo.value());
      break;
    }
  }
  if (httpMethods.isEmpty()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.httpMethods=httpMethods;
  Set<String> consumes;
  Consumes consumesInfo=delegate.getAnnotation(Consumes.class);
  if (consumesInfo != null) {
    consumes=new TreeSet<String>(Arrays.asList(consumesInfo.value()));
  }
 else {
    consumes=new TreeSet<String>(parent.getConsumesMime());
  }
  this.consumesMime=consumes;
  Set<String> produces;
  Produces producesInfo=delegate.getAnnotation(Produces.class);
  if (producesInfo != null) {
    produces=new TreeSet<String>(Arrays.asList(producesInfo.value()));
  }
 else {
    produces=new TreeSet<String>(parent.getProducesMime());
  }
  this.producesMime=produces;
  String subpath=null;
  Path pathInfo=delegate.getAnnotation(Path.class);
  if (pathInfo != null) {
    subpath=pathInfo.value();
  }
  ResourceEntityParameter entityParameter;
  List<ResourceEntityParameter> declaredEntityParameters=new ArrayList<ResourceEntityParameter>();
  List<RESTResourceParameter> resourceParameters;
  ResourcePayloadTypeAdapter outputPayload;
  ResourceMethodSignature signatureOverride=delegate.getAnnotation(ResourceMethodSignature.class);
  if (signatureOverride == null) {
    entityParameter=null;
    resourceParameters=new ArrayList<RESTResourceParameter>();
    for (    ParameterDeclaration parameterDeclaration : getParameters()) {
      if (ResourceParameter.isResourceParameter(parameterDeclaration)) {
        resourceParameters.add(new ResourceParameter(parameterDeclaration));
      }
 else       if (parameterDeclaration.getAnnotation(Context.class) == null) {
        entityParameter=new ResourceEntityParameter(parameterDeclaration);
        declaredEntityParameters.add(entityParameter);
      }
    }
    DecoratedTypeMirror returnType=(DecoratedTypeMirror)getReturnType();
    outputPayload=returnType.isVoid() ? null : new ResourcePayloadTypeAdapter(returnType);
  }
 else {
    entityParameter=loadEntityParameter(signatureOverride);
    declaredEntityParameters.add(entityParameter);
    resourceParameters=loadResourceParameters(signatureOverride);
    outputPayload=loadOutputPayload(signatureOverride);
  }
  this.entityParameter=entityParameter;
  this.resourceParameters=resourceParameters;
  this.subpath=subpath;
  this.parent=parent;
  this.errors=new ArrayList<RESTResourceError>();
  this.outputPayload=outputPayload;
  this.declaredEntityParameters=declaredEntityParameters;
}",0.9540129393250568
177147,"public ValidationResult validateRootResources(List<RootResource> rootResources){
  ValidationResult result=new ValidationResult();
  for (  RootResource rootResource : rootResources) {
    for (    FieldDeclaration field : rootResource.getFields()) {
      if (isSuppliableByJAXRS(field) && ((field.getAnnotation(javax.ws.rs.core.Context.class) == null) && !isConvertableToStringByJAXRS(field.getType()))) {
        result.addError(field,""String_Node_Str"");
      }
    }
    for (    PropertyDeclaration prop : rootResource.getProperties()) {
      if (isSuppliableByJAXRS(prop) && ((prop.getAnnotation(javax.ws.rs.core.Context.class) == null) && !isConvertableToStringByJAXRS(prop.getPropertyType()))) {
        result.addError(prop.getSetter(),""String_Node_Str"");
      }
    }
    for (    ResourceMethod resourceMethod : rootResource.getResourceMethods(true)) {
      ParameterDeclaration entityParam=null;
      boolean formParamFound=false;
      for (      ParameterDeclaration param : resourceMethod.getParameters()) {
        if (param.getAnnotation(javax.ws.rs.core.Context.class) != null) {
          continue;
        }
        if (ResourceParameter.isResourceParameter(param)) {
          formParamFound|=param.getAnnotation(FormParam.class) != null;
        }
 else         if (entityParam != null) {
          result.addError(resourceMethod,""String_Node_Str"");
        }
 else {
          entityParam=param;
        }
        if (entityParam != null && formParamFound) {
          DecoratedTypeMirror decorated=(DecoratedTypeMirror)TypeMirrorDecorator.decorate(entityParam.getType());
          if (!decorated.isInstanceOf(MultivaluedMap.class.getName())) {
            result.addError(entityParam,""String_Node_Str"");
          }
        }
      }
    }
  }
  return result;
}","public ValidationResult validateRootResources(List<RootResource> rootResources){
  ValidationResult result=new ValidationResult();
  for (  RootResource rootResource : rootResources) {
    for (    FieldDeclaration field : rootResource.getFields()) {
      if (isSuppliableByJAXRS(field) && ((field.getAnnotation(javax.ws.rs.core.Context.class) == null) && !isConvertableToStringByJAXRS(field.getType()))) {
        result.addError(field,""String_Node_Str"");
      }
    }
    for (    PropertyDeclaration prop : rootResource.getProperties()) {
      if (isSuppliableByJAXRS(prop) && ((prop.getAnnotation(javax.ws.rs.core.Context.class) == null) && !isConvertableToStringByJAXRS(prop.getPropertyType()))) {
        result.addError(prop.getSetter(),""String_Node_Str"");
      }
    }
    for (    ResourceMethod resourceMethod : rootResource.getResourceMethods(true)) {
      if (resourceMethod.getDeclaredEntityParameters().size() > 1) {
        result.addError(resourceMethod,""String_Node_Str"");
      }
      int formParamCount=0;
      for (      RESTResourceParameter resourceParameter : resourceMethod.getResourceParameters()) {
        if (resourceParameter.getResourceParameterType() == RESTResourceParameterType.FORM) {
          formParamCount++;
        }
      }
      ResourceEntityParameter entityParam=resourceMethod.getEntityParameter();
      if (entityParam != null && (formParamCount > 0)) {
        DecoratedTypeMirror decorated=(DecoratedTypeMirror)TypeMirrorDecorator.decorate(entityParam.getType());
        if (!decorated.isInstanceOf(MultivaluedMap.class.getName())) {
          result.addError(entityParam,""String_Node_Str"");
        }
      }
    }
  }
  return result;
}",0.5701175795813019
177148,"@Override public Map<EventType,String> unmarshal(List<Event> v) throws Exception {
  return null;
}","@Override public Map<EventType,String> unmarshal(EventDescriptionContainer v) throws Exception {
  return null;
}",0.8773584905660378
177149,"@Override public List<Event> marshal(Map<EventType,String> v) throws Exception {
  return null;
}","@Override public EventDescriptionContainer marshal(Map<EventType,String> v) throws Exception {
  return null;
}",0.875
177150,"public AMFClassnameForMethod(Map<String,String> conversions){
  super(conversions);
}","public AMFClassnameForMethod(Map<String,String> conversions){
  super(conversions);
  this.classConversions.put(UUID.class.getName(),String.class.getName());
  this.classConversions.put(XMLGregorianCalendar.class.getName(),Date.class.getName());
  this.classConversions.put(QName.class.getName(),String.class.getName());
  this.classConversions.put(URI.class.getName(),String.class.getName());
  this.classConversions.put(DataHandler.class.getName(),""String_Node_Str"");
}",0.3057553956834532
177151,"@Override public String convert(TypeMirror typeMirror) throws TemplateModelException {
  if ((typeMirror instanceof ArrayType) && (((ArrayType)typeMirror).getComponentType() instanceof PrimitiveType)) {
    return super.convert(((ArrayType)typeMirror).getComponentType()) + ""String_Node_Str"";
  }
 else   if (typeMirror instanceof EnumType) {
    return String.class.getName();
  }
  return super.convert(typeMirror);
}","@Override public String convert(TypeMirror typeMirror) throws TemplateModelException {
  DecoratedTypeMirror decorated=(DecoratedTypeMirror)TypeMirrorDecorator.decorate(typeMirror);
  if ((typeMirror instanceof ArrayType) && (((ArrayType)typeMirror).getComponentType() instanceof PrimitiveType)) {
    return super.convert(((ArrayType)typeMirror).getComponentType()) + ""String_Node_Str"";
  }
 else   if (decorated.isEnum()) {
    return String.class.getName();
  }
 else   if (decorated.isDeclared()) {
    DeclaredType declaredType=((DeclaredType)decorated);
    String fqn=declaredType.getDeclaration().getQualifiedName();
    if (classConversions.containsKey(fqn)) {
      return classConversions.get(fqn);
    }
  }
  return super.convert(typeMirror);
}",0.6224489795918368
177152,"/** 
 * Generates example xml to the specified parent element.
 * @param parent The parent element.
 */
public void generateExampleXml(org.jdom.Element parent){
  DocumentationExample exampleInfo=getAnnotation(DocumentationExample.class);
  if (exampleInfo == null || !exampleInfo.exclude()) {
    String namespace=getNamespace();
    String prefix=namespace == null ? null : ((EnunciateFreemarkerModel)FreemarkerModel.get()).getNamespacesToPrefixes().get(namespace);
    String exampleValue=exampleInfo == null || ""String_Node_Str"".equals(exampleInfo.value()) ? ""String_Node_Str"" : exampleInfo.value();
    org.jdom.Attribute attr=new org.jdom.Attribute(getName(),exampleValue,org.jdom.Namespace.getNamespace(prefix,namespace));
    parent.setAttribute(attr);
  }
}","/** 
 * Generates example xml to the specified parent element.
 * @param parent The parent element.
 */
public void generateExampleXml(org.jdom.Element parent){
  DocumentationExample exampleInfo=getAnnotation(DocumentationExample.class);
  if (exampleInfo == null || !exampleInfo.exclude()) {
    String namespace=getNamespace();
    String prefix=namespace == null ? null : ((EnunciateFreemarkerModel)FreemarkerModel.get()).getNamespacesToPrefixes().get(namespace);
    String exampleValue=exampleInfo == null || ""String_Node_Str"".equals(exampleInfo.value()) ? ""String_Node_Str"" : exampleInfo.value();
    Namespace jdomNS;
    if (org.jdom.Namespace.XML_NAMESPACE.getURI().equals(namespace)) {
      jdomNS=org.jdom.Namespace.XML_NAMESPACE;
    }
 else {
      jdomNS=Namespace.getNamespace(prefix,namespace);
    }
    org.jdom.Attribute attr=new org.jdom.Attribute(getName(),exampleValue,jdomNS);
    parent.setAttribute(attr);
  }
}",0.8403755868544601
177153,"public void generateExampleXml(org.jdom.Element parent){
  DocumentationExample exampleInfo=getAnnotation(DocumentationExample.class);
  if (exampleInfo == null || !exampleInfo.exclude()) {
    if (isWrapped()) {
      String namespace=getNamespace();
      String prefix=namespace == null ? null : ((EnunciateFreemarkerModel)FreemarkerModel.get()).getNamespacesToPrefixes().get(namespace);
      org.jdom.Element element=new org.jdom.Element(getWrapperName(),org.jdom.Namespace.getNamespace(prefix,namespace));
      parent.addContent(element);
      parent=element;
    }
    for (    Element choice : getChoices()) {
      QName ref=choice.getRef();
      int iterations=""String_Node_Str"".equals(choice.getMaxOccurs()) ? 1 : 2;
      for (int i=0; i < iterations; i++) {
        if (ref == null) {
          String namespace=choice.getNamespace();
          String prefix=namespace == null ? null : ((EnunciateFreemarkerModel)FreemarkerModel.get()).getNamespacesToPrefixes().get(namespace);
          org.jdom.Element element=new org.jdom.Element(choice.getName(),org.jdom.Namespace.getNamespace(prefix,namespace));
          String exampleValue=exampleInfo == null || ""String_Node_Str"".equals(exampleInfo.value()) ? ""String_Node_Str"" : exampleInfo.value();
          XmlType xmlType=choice.getBaseType();
          if (i == 0) {
            element.addContent(new Comment(""String_Node_Str"" + xmlType.getName() + ""String_Node_Str""));
            xmlType.generateExampleXml(element,exampleValue);
          }
 else {
            element.addContent(new Comment(""String_Node_Str"" + xmlType.getName() + ""String_Node_Str""));
          }
          parent.addContent(element);
        }
 else {
          String namespace=ref.getNamespaceURI();
          String name=ref.getLocalPart();
          String prefix=namespace == null ? null : ((EnunciateFreemarkerModel)FreemarkerModel.get()).getNamespacesToPrefixes().get(namespace);
          org.jdom.Element element=new org.jdom.Element(name,org.jdom.Namespace.getNamespace(prefix,namespace));
          element.addContent(new org.jdom.Text(""String_Node_Str""));
          parent.addContent(element);
        }
      }
      if (iterations > 1) {
        parent.addContent(new Comment(""String_Node_Str"" + (ref == null ? choice.getName() : ref.getLocalPart()) + ""String_Node_Str""));
      }
    }
  }
}","public void generateExampleXml(org.jdom.Element parent){
  DocumentationExample exampleInfo=getAnnotation(DocumentationExample.class);
  if (exampleInfo == null || !exampleInfo.exclude()) {
    if (isWrapped()) {
      String namespace=getNamespace();
      String prefix=namespace == null ? null : ((EnunciateFreemarkerModel)FreemarkerModel.get()).getNamespacesToPrefixes().get(namespace);
      Namespace jdomNS;
      if (org.jdom.Namespace.XML_NAMESPACE.getURI().equals(namespace)) {
        jdomNS=org.jdom.Namespace.XML_NAMESPACE;
      }
 else {
        jdomNS=Namespace.getNamespace(prefix,namespace);
      }
      org.jdom.Element element=new org.jdom.Element(getWrapperName(),jdomNS);
      parent.addContent(element);
      parent=element;
    }
    for (    Element choice : getChoices()) {
      QName ref=choice.getRef();
      int iterations=""String_Node_Str"".equals(choice.getMaxOccurs()) ? 1 : 2;
      for (int i=0; i < iterations; i++) {
        if (ref == null) {
          String namespace=choice.getNamespace();
          String prefix=namespace == null ? null : ((EnunciateFreemarkerModel)FreemarkerModel.get()).getNamespacesToPrefixes().get(namespace);
          Namespace jdomNS;
          if (org.jdom.Namespace.XML_NAMESPACE.getURI().equals(namespace)) {
            jdomNS=org.jdom.Namespace.XML_NAMESPACE;
          }
 else {
            jdomNS=Namespace.getNamespace(prefix,namespace);
          }
          org.jdom.Element element=new org.jdom.Element(choice.getName(),jdomNS);
          String exampleValue=exampleInfo == null || ""String_Node_Str"".equals(exampleInfo.value()) ? ""String_Node_Str"" : exampleInfo.value();
          XmlType xmlType=choice.getBaseType();
          if (i == 0) {
            element.addContent(new Comment(""String_Node_Str"" + xmlType.getName() + ""String_Node_Str""));
            xmlType.generateExampleXml(element,exampleValue);
          }
 else {
            element.addContent(new Comment(""String_Node_Str"" + xmlType.getName() + ""String_Node_Str""));
          }
          parent.addContent(element);
        }
 else {
          String namespace=ref.getNamespaceURI();
          String name=ref.getLocalPart();
          String prefix=namespace == null ? null : ((EnunciateFreemarkerModel)FreemarkerModel.get()).getNamespacesToPrefixes().get(namespace);
          Namespace jdomNS;
          if (org.jdom.Namespace.XML_NAMESPACE.getURI().equals(namespace)) {
            jdomNS=org.jdom.Namespace.XML_NAMESPACE;
          }
 else {
            jdomNS=Namespace.getNamespace(prefix,namespace);
          }
          org.jdom.Element element=new org.jdom.Element(name,jdomNS);
          element.addContent(new org.jdom.Text(""String_Node_Str""));
          parent.addContent(element);
        }
      }
      if (iterations > 1) {
        parent.addContent(new Comment(""String_Node_Str"" + (ref == null ? choice.getName() : ref.getLocalPart()) + ""String_Node_Str""));
      }
    }
  }
}",0.2718336483931947
177154,"/** 
 * Generate some example XML for this root element.
 * @return Some example XML.
 */
public String generateExampleXml(){
  try {
    String namespace=getNamespace();
    EnunciateFreemarkerModel model=(EnunciateFreemarkerModel)FreemarkerModel.get();
    String prefix=namespace == null ? null : model.getNamespacesToPrefixes().get(namespace);
    org.jdom.Element rootElement=new org.jdom.Element(getName(),org.jdom.Namespace.getNamespace(prefix,namespace));
    TypeDeclaration elementTypeDeclaration=getElementTypeDeclaration();
    if (elementTypeDeclaration instanceof ClassDeclaration) {
      TypeDefinition typeDef=model.findTypeDefinition((ClassDeclaration)elementTypeDeclaration);
      if (typeDef != null) {
        typeDef.generateExampleXml(rootElement);
      }
 else {
        rootElement.addContent(new Comment(""String_Node_Str""));
      }
    }
 else {
      rootElement.addContent(new Comment(""String_Node_Str""));
    }
    org.jdom.Document document=new org.jdom.Document(rootElement);
    XMLOutputter out=new XMLOutputter(org.jdom.output.Format.getPrettyFormat());
    StringWriter sw=new StringWriter();
    out.output(document,sw);
    sw.flush();
    return sw.toString();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Generate some example XML for this root element.
 * @return Some example XML.
 */
public String generateExampleXml(){
  try {
    String namespace=getNamespace();
    EnunciateFreemarkerModel model=(EnunciateFreemarkerModel)FreemarkerModel.get();
    String prefix=namespace == null ? null : model.getNamespacesToPrefixes().get(namespace);
    Namespace jdomNS;
    if (org.jdom.Namespace.XML_NAMESPACE.getURI().equals(namespace)) {
      jdomNS=org.jdom.Namespace.XML_NAMESPACE;
    }
 else {
      jdomNS=Namespace.getNamespace(prefix,namespace);
    }
    org.jdom.Element rootElement=new org.jdom.Element(getName(),jdomNS);
    TypeDeclaration elementTypeDeclaration=getElementTypeDeclaration();
    if (elementTypeDeclaration instanceof ClassDeclaration) {
      TypeDefinition typeDef=model.findTypeDefinition((ClassDeclaration)elementTypeDeclaration);
      if (typeDef != null) {
        typeDef.generateExampleXml(rootElement);
      }
 else {
        rootElement.addContent(new Comment(""String_Node_Str""));
      }
    }
 else {
      rootElement.addContent(new Comment(""String_Node_Str""));
    }
    org.jdom.Document document=new org.jdom.Document(rootElement);
    XMLOutputter out=new XMLOutputter(org.jdom.output.Format.getPrettyFormat());
    StringWriter sw=new StringWriter();
    out.output(document,sw);
    sw.flush();
    return sw.toString();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.899042004421518
177155,"/** 
 * Generate some example XML for this root element.
 * @return Some example XML.
 */
public String generateExampleXml(){
  try {
    String namespace=getNamespace();
    String prefix=namespace == null ? null : ((EnunciateFreemarkerModel)FreemarkerModel.get()).getNamespacesToPrefixes().get(namespace);
    org.jdom.Element rootElement=new org.jdom.Element(getName(),org.jdom.Namespace.getNamespace(prefix,namespace));
    getTypeDefinition().generateExampleXml(rootElement);
    org.jdom.Document document=new org.jdom.Document(rootElement);
    XMLOutputter out=new XMLOutputter(org.jdom.output.Format.getPrettyFormat());
    StringWriter sw=new StringWriter();
    out.output(document,sw);
    sw.flush();
    return sw.toString();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Generate some example XML for this root element.
 * @return Some example XML.
 */
public String generateExampleXml(){
  try {
    String namespace=getNamespace();
    String prefix=namespace == null ? null : ((EnunciateFreemarkerModel)FreemarkerModel.get()).getNamespacesToPrefixes().get(namespace);
    Namespace jdomNS;
    if (org.jdom.Namespace.XML_NAMESPACE.getURI().equals(namespace)) {
      jdomNS=org.jdom.Namespace.XML_NAMESPACE;
    }
 else {
      jdomNS=Namespace.getNamespace(prefix,namespace);
    }
    org.jdom.Element rootElement=new org.jdom.Element(getName(),jdomNS);
    getTypeDefinition().generateExampleXml(rootElement);
    org.jdom.Document document=new org.jdom.Document(rootElement);
    XMLOutputter out=new XMLOutputter(org.jdom.output.Format.getPrettyFormat());
    StringWriter sw=new StringWriter();
    out.output(document,sw);
    sw.flush();
    return sw.toString();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.8279329608938547
177156,"/** 
 * Gets the client-side package for the type, type declaration, package, or their string values.
 * @param list The arguments.
 * @return The string value of the client-side package.
 */
public Object exec(List list) throws TemplateModelException {
  if (list.size() < 1) {
    throw new TemplateModelException(""String_Node_Str"");
  }
  StringModel model=(StringModel)list.get(0);
  String pattern=model.getAsString();
  if (pattern.endsWith(""String_Node_Str"")) {
    pattern=pattern + ""String_Node_Str"";
  }
  return pattern;
}","/** 
 * Gets the client-side package for the type, type declaration, package, or their string values.
 * @param list The arguments.
 * @return The string value of the client-side package.
 */
public Object exec(List list) throws TemplateModelException {
  if (list.size() < 1) {
    throw new TemplateModelException(""String_Node_Str"");
  }
  TemplateScalarModel model=(TemplateScalarModel)list.get(0);
  String pattern=model.getAsString();
  if (pattern.endsWith(""String_Node_Str"")) {
    pattern=pattern + ""String_Node_Str"";
  }
  return pattern;
}",0.9630314232902032
177157,"@Override protected void doBuild() throws EnunciateException, IOException {
  super.doBuild();
  File webappDir=getBuildDir();
  webappDir.mkdirs();
  File webinf=new File(webappDir,""String_Node_Str"");
  File webinfClasses=new File(webinf,""String_Node_Str"");
  getEnunciate().copyFile(new File(getGenerateDir(),""String_Node_Str""),new File(webinfClasses,""String_Node_Str""));
  getEnunciate().copyFile(new File(getGenerateDir(),""String_Node_Str""),new File(webinfClasses,""String_Node_Str""));
  getEnunciate().copyFile(new File(getGenerateDir(),""String_Node_Str""),new File(webinfClasses,""String_Node_Str""));
  getEnunciate().copyFile(new File(getGenerateDir(),""String_Node_Str""),new File(webinfClasses,""String_Node_Str""));
  getEnunciate().copyFile(new File(getGenerateDir(),""String_Node_Str""),new File(webinfClasses,""String_Node_Str""));
  BaseWebAppFragment webappFragment=new BaseWebAppFragment(getName());
  webappFragment.setBaseDir(webappDir);
  WebAppComponent servletComponent=new WebAppComponent();
  servletComponent.setName(""String_Node_Str"");
  servletComponent.setClassname(EnunciateSpringServlet.class.getName());
  TreeMap<String,String> initParams=new TreeMap<String,String>();
  if (!isUsePathBasedConneg()) {
    initParams.put(JerseyAdaptedHttpServletRequest.FEATURE_PATH_BASED_CONNEG,Boolean.FALSE.toString());
  }
  if (isUseSubcontext()) {
    initParams.put(JerseyAdaptedHttpServletRequest.PROPERTY_SERVLET_PATH,getRestSubcontext());
  }
  servletComponent.setInitParams(initParams);
  TreeSet<String> urlMappings=new TreeSet<String>();
  for (  RootResource rootResource : getModel().getRootResources()) {
    for (    ResourceMethod resourceMethod : rootResource.getResourceMethods(true)) {
      String resourceMethodPattern=resourceMethod.getServletPattern();
      for (      Set<String> subcontextList : ((Map<String,Set<String>>)resourceMethod.getMetaData().get(""String_Node_Str"")).values()) {
        for (        String subcontext : subcontextList) {
          String servletPattern;
          if (""String_Node_Str"".equals(subcontext)) {
            servletPattern=resourceMethodPattern;
          }
 else {
            servletPattern=subcontext + resourceMethodPattern;
          }
          if (urlMappings.add(servletPattern)) {
            debug(""String_Node_Str"",resourceMethod.getSimpleName(),resourceMethod.getParent().getQualifiedName(),servletPattern);
          }
        }
      }
    }
  }
  servletComponent.setUrlMappings(urlMappings);
  webappFragment.setServlets(Arrays.asList(servletComponent));
  getEnunciate().addWebAppFragment(webappFragment);
}","@Override protected void doBuild() throws EnunciateException, IOException {
  super.doBuild();
  File webappDir=getBuildDir();
  webappDir.mkdirs();
  File webinf=new File(webappDir,""String_Node_Str"");
  File webinfClasses=new File(webinf,""String_Node_Str"");
  getEnunciate().copyFile(new File(getGenerateDir(),""String_Node_Str""),new File(webinfClasses,""String_Node_Str""));
  getEnunciate().copyFile(new File(getGenerateDir(),""String_Node_Str""),new File(webinfClasses,""String_Node_Str""));
  getEnunciate().copyFile(new File(getGenerateDir(),""String_Node_Str""),new File(webinfClasses,""String_Node_Str""));
  getEnunciate().copyFile(new File(getGenerateDir(),""String_Node_Str""),new File(webinfClasses,""String_Node_Str""));
  getEnunciate().copyFile(new File(getGenerateDir(),""String_Node_Str""),new File(webinfClasses,""String_Node_Str""));
  BaseWebAppFragment webappFragment=new BaseWebAppFragment(getName());
  webappFragment.setBaseDir(webappDir);
  WebAppComponent servletComponent=new WebAppComponent();
  servletComponent.setName(""String_Node_Str"");
  servletComponent.setClassname(EnunciateSpringServlet.class.getName());
  TreeMap<String,String> initParams=new TreeMap<String,String>();
  initParams.putAll(getServletInitParams());
  if (!isUsePathBasedConneg()) {
    initParams.put(JerseyAdaptedHttpServletRequest.FEATURE_PATH_BASED_CONNEG,Boolean.FALSE.toString());
  }
  if (isUseSubcontext()) {
    initParams.put(JerseyAdaptedHttpServletRequest.PROPERTY_SERVLET_PATH,getRestSubcontext());
  }
  servletComponent.setInitParams(initParams);
  TreeSet<String> urlMappings=new TreeSet<String>();
  for (  RootResource rootResource : getModel().getRootResources()) {
    for (    ResourceMethod resourceMethod : rootResource.getResourceMethods(true)) {
      String resourceMethodPattern=resourceMethod.getServletPattern();
      for (      Set<String> subcontextList : ((Map<String,Set<String>>)resourceMethod.getMetaData().get(""String_Node_Str"")).values()) {
        for (        String subcontext : subcontextList) {
          String servletPattern;
          if (""String_Node_Str"".equals(subcontext)) {
            servletPattern=resourceMethodPattern;
          }
 else {
            servletPattern=subcontext + resourceMethodPattern;
          }
          if (urlMappings.add(servletPattern)) {
            debug(""String_Node_Str"",resourceMethod.getSimpleName(),resourceMethod.getParent().getQualifiedName(),servletPattern);
          }
        }
      }
    }
  }
  servletComponent.setUrlMappings(urlMappings);
  webappFragment.setServlets(Arrays.asList(servletComponent));
  getEnunciate().addWebAppFragment(webappFragment);
}",0.9913974383483082
177158,"public void addRuleInstances(Digester digester){
  digester.addSetProperties(""String_Node_Str"");
}","public void addRuleInstances(Digester digester){
  digester.addSetProperties(""String_Node_Str"");
  digester.addCallMethod(""String_Node_Str"",""String_Node_Str"",2);
  digester.addCallParam(""String_Node_Str"",0,""String_Node_Str"");
  digester.addCallParam(""String_Node_Str"",1,""String_Node_Str"");
}",0.5038560411311054
177159,"@Override protected void doBuild() throws IOException, EnunciateException {
  Enunciate enunciate=getEnunciate();
  File buildDir=getBuildDir();
  if (!enunciate.isUpToDateWithSources(buildDir)) {
    copyPreBase();
    info(""String_Node_Str"",buildDir);
    for (    WebAppFragment fragment : enunciate.getWebAppFragments()) {
      if (fragment.getBaseDir() != null) {
        enunciate.copyDir(fragment.getBaseDir(),buildDir);
      }
    }
    if (isDoCompile()) {
      File webinf=new File(buildDir,""String_Node_Str"");
      File webinfClasses=new File(webinf,""String_Node_Str"");
      enunciate.copyDir(getCompileDir(),webinfClasses);
    }
    if (isDoLibCopy()) {
      doLibCopy();
    }
 else {
      info(""String_Node_Str"");
    }
    generateWebXml();
    copySpringConfig();
    if (isEnableSecurity()) {
      createSecurityUI();
    }
    copyPostBase();
  }
 else {
    info(""String_Node_Str"");
  }
  enunciate.addArtifact(new FileArtifact(getName(),""String_Node_Str"",buildDir));
}","@Override protected void doBuild() throws IOException, EnunciateException {
  Enunciate enunciate=getEnunciate();
  File buildDir=getBuildDir();
  if (!enunciate.isUpToDateWithSources(buildDir)) {
    copyPreBase();
    info(""String_Node_Str"",buildDir);
    if (!this.globalServletFilters.isEmpty()) {
      Set<String> allServletUrls=new TreeSet<String>();
      for (      WebAppFragment fragment : enunciate.getWebAppFragments()) {
        if (fragment.getServlets() != null) {
          for (          WebAppComponent servletComponent : fragment.getServlets()) {
            allServletUrls.addAll(servletComponent.getUrlMappings());
          }
        }
      }
      for (      WebAppComponent filter : this.globalServletFilters) {
        filter.setUrlMappings(allServletUrls);
      }
      BaseWebAppFragment fragment=new BaseWebAppFragment(""String_Node_Str"");
      fragment.setFilters(this.globalServletFilters);
      enunciate.addWebAppFragment(fragment);
    }
    for (    WebAppFragment fragment : enunciate.getWebAppFragments()) {
      if (fragment.getBaseDir() != null) {
        enunciate.copyDir(fragment.getBaseDir(),buildDir);
      }
    }
    if (isDoCompile()) {
      File webinf=new File(buildDir,""String_Node_Str"");
      File webinfClasses=new File(webinf,""String_Node_Str"");
      enunciate.copyDir(getCompileDir(),webinfClasses);
    }
    if (isDoLibCopy()) {
      doLibCopy();
    }
 else {
      info(""String_Node_Str"");
    }
    generateWebXml();
    copySpringConfig();
    if (isEnableSecurity()) {
      createSecurityUI();
    }
    copyPostBase();
  }
 else {
    info(""String_Node_Str"");
  }
  enunciate.addArtifact(new FileArtifact(getName(),""String_Node_Str"",buildDir));
}",0.7344383057090239
177160,"@Override public void init(Enunciate enunciate) throws EnunciateException {
  super.init(enunciate);
  if (!isDisabled()) {
    if (getDefaultDependencyCheck() != null) {
      warn(""String_Node_Str"");
    }
    if (getDefaultAutowire() != null) {
      warn(""String_Node_Str"");
    }
    if (getDispatcherServletClass() != null) {
      warn(""String_Node_Str"");
    }
    if ((this.warConfig != null) && (this.warConfig.getDocsDir() != null)) {
      warn(""String_Node_Str"");
    }
    if (isEnableSecurity()) {
      if (getSecurityConfig().isEnableBasicHTTPAuth() && getSecurityConfig().isEnableDigestHTTPAuth()) {
        throw new EnunciateException(""String_Node_Str"");
      }
    }
  }
}","@Override public void init(Enunciate enunciate) throws EnunciateException {
  super.init(enunciate);
  if (!isDisabled()) {
    if (getDefaultDependencyCheck() != null) {
      warn(""String_Node_Str"");
    }
    if (getDefaultAutowire() != null) {
      warn(""String_Node_Str"");
    }
    if (getDispatcherServletClass() != null) {
      warn(""String_Node_Str"");
    }
    if ((this.warConfig != null) && (this.warConfig.getDocsDir() != null)) {
      warn(""String_Node_Str"");
    }
    if (isEnableSecurity()) {
      if (getSecurityConfig().isEnableBasicHTTPAuth() && getSecurityConfig().isEnableDigestHTTPAuth()) {
        throw new EnunciateException(""String_Node_Str"");
      }
    }
    if (!this.globalServletFilters.isEmpty()) {
      for (      WebAppComponent globalServletFilter : this.globalServletFilters) {
        if (globalServletFilter.getName() == null) {
          throw new EnunciateException(""String_Node_Str"");
        }
        if (globalServletFilter.getClassname() == null) {
          throw new EnunciateException(""String_Node_Str"");
        }
      }
    }
  }
}",0.7750981491867639
177161,"public void addRuleInstances(Digester digester){
  digester.addObjectCreate(""String_Node_Str"",WarConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",WarLib.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",WebAppResource.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",WebAppResource.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",WebAppResource.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",IncludeExcludeLibs.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",IncludeExcludeLibs.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",IncludeExcludeLibs.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addCallMethod(""String_Node_Str"",""String_Node_Str"",3);
  digester.addCallParam(""String_Node_Str"",0,""String_Node_Str"");
  digester.addCallParam(""String_Node_Str"",1,""String_Node_Str"");
  digester.addCallParam(""String_Node_Str"",2,""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",SpringImport.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",CopyResources.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",GlobalServiceInterceptor.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",HandlerInterceptor.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",SecurityConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addCallMethod(""String_Node_Str"",""String_Node_Str"",2);
  digester.addCallParam(""String_Node_Str"",0,""String_Node_Str"");
  digester.addCallParam(""String_Node_Str"",1,""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",AnonymousConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BasicAuthConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",OAuthConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BeanReference.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BeanReference.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BeanReference.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BeanReference.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",DigestAuthConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",FormBasedLoginConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BeanReference.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",FormBasedLogoutConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",RememberMeConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",EntryPointConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BeanReference.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",EntryPointConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BeanReference.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BeanReference.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
}","public void addRuleInstances(Digester digester){
  digester.addObjectCreate(""String_Node_Str"",WarConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",WarLib.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",WebAppResource.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",WebAppResource.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",WebAppResource.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",IncludeExcludeLibs.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",IncludeExcludeLibs.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",IncludeExcludeLibs.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addCallMethod(""String_Node_Str"",""String_Node_Str"",3);
  digester.addCallParam(""String_Node_Str"",0,""String_Node_Str"");
  digester.addCallParam(""String_Node_Str"",1,""String_Node_Str"");
  digester.addCallParam(""String_Node_Str"",2,""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",SpringImport.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",CopyResources.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",GlobalServiceInterceptor.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",WebAppComponent.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addCallMethod(""String_Node_Str"",""String_Node_Str"",2);
  digester.addCallParam(""String_Node_Str"",0,""String_Node_Str"");
  digester.addCallParam(""String_Node_Str"",1,""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",HandlerInterceptor.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",SecurityConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addCallMethod(""String_Node_Str"",""String_Node_Str"",2);
  digester.addCallParam(""String_Node_Str"",0,""String_Node_Str"");
  digester.addCallParam(""String_Node_Str"",1,""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",AnonymousConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BasicAuthConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",OAuthConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BeanReference.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BeanReference.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BeanReference.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BeanReference.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",DigestAuthConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",FormBasedLoginConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BeanReference.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",FormBasedLogoutConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",RememberMeConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",EntryPointConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BeanReference.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",EntryPointConfig.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BeanReference.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",BeanReference.class);
  digester.addSetProperties(""String_Node_Str"");
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
}",0.9507265742441956
177162,"/** 
 * Whether to enable form-based login.
 * @param enableFormBasedLogin Whether to enable form-based login.
 */
public void setEnableFormBasedLogin(boolean enableFormBasedLogin){
  this.enableFormBasedLogin=enableFormBasedLogin;
  if (enableFormBasedLogin) {
  }
}","/** 
 * Whether to enable form-based login.
 * @param enableFormBasedLogin Whether to enable form-based login.
 */
public void setEnableFormBasedLogin(boolean enableFormBasedLogin){
  this.enableFormBasedLogin=enableFormBasedLogin;
}",0.932
177163,"/** 
 * Load the known content types (map of content type to id).
 * @return The known content type.
 */
protected HashMap<String,String> loadKnownContentTypes(){
  HashMap<String,String> contentTypes=new HashMap<String,String>();
  contentTypes.put(""String_Node_Str"",""String_Node_Str"");
  contentTypes.put(""String_Node_Str"",""String_Node_Str"");
  contentTypes.put(""String_Node_Str"",""String_Node_Str"");
  return contentTypes;
}","/** 
 * Load the known content types (map of content type to id).
 * @return The known content type.
 */
protected HashMap<String,String> loadKnownContentTypes(){
  HashMap<String,String> contentTypes=new HashMap<String,String>();
  contentTypes.put(""String_Node_Str"",""String_Node_Str"");
  return contentTypes;
}",0.7967479674796748
177164,"/** 
 * Add a JAX-RS provider to the model.
 * @param declaration The declaration of the provider.
 */
public void addJAXRSProvider(TypeDeclaration declaration){
  this.jaxrsProviders.add(declaration);
  Produces produces=declaration.getAnnotation(Produces.class);
  if (produces != null) {
    for (    String contentType : produces.value()) {
      try {
        addContentType(MimeType.parse(contentType).toString());
      }
 catch (      Exception e) {
        addContentType(contentType);
      }
    }
  }
}","/** 
 * Add a JAX-RS provider to the model.
 * @param declaration The declaration of the provider.
 */
public void addJAXRSProvider(TypeDeclaration declaration){
  this.jaxrsProviders.add(declaration);
  Produces produces=declaration.getAnnotation(Produces.class);
  if (produces != null) {
    for (    String contentType : produces.value()) {
      try {
        addContentType(MimeType.parse(contentType).toString());
      }
 catch (      Exception e) {
        addContentType(contentType);
      }
    }
  }
  Consumes consumes=declaration.getAnnotation(Consumes.class);
  if (consumes != null) {
    for (    String contentType : consumes.value()) {
      try {
        addContentType(MimeType.parse(contentType).toString());
      }
 catch (      Exception e) {
        addContentType(contentType);
      }
    }
  }
}",0.7677371172516804
177165,"/** 
 * Scans the Enunciate classpath for classes to be imported.
 * @return The classes to be imported, associated with their source file if it was found.
 */
protected Map<String,File> scanForClassesToImport() throws IOException {
  final Map<String,File> classes2sources=new HashMap<String,File>();
  File tempSourcesDir=createTempDir();
  List<String> classpath=new ArrayList<String>(Arrays.asList(getEnunciateClasspath().split(File.pathSeparator)));
  for (  String pathItem : classpath) {
    final File pathFile=new File(pathItem);
    if (pathFile.exists()) {
      if (pathFile.isDirectory()) {
        final Map<String,File> foundClasses2Sources=new HashMap<String,File>();
        visitFiles(pathFile,null,new FileVisitor(){
          public void visit(          File file){
            String path=pathFile.toURI().relativize(file.toURI()).getPath();
            if (path.endsWith(""String_Node_Str"")) {
              String classname=path.substring(0,path.length() - 6).replace('/','.').replace('$','.');
              debug(""String_Node_Str"",classname,file);
              foundClasses2Sources.put(classname,foundClasses2Sources.get(classname));
            }
 else             if (path.endsWith(""String_Node_Str"")) {
              String classname=path.substring(0,path.length() - 5).replace('/','.');
              debug(""String_Node_Str"",classname,file);
              foundClasses2Sources.put(classname,pathFile);
            }
 else             if (""String_Node_Str"".equals(path)) {
              debug(""String_Node_Str"",file);
              try {
                FileInputStream autoImportList=new FileInputStream(file);
                Set<String> autoImports=readAutoImports(autoImportList);
                autoImportList.close();
                for (                String autoImport : autoImports) {
                  classes2sources.put(autoImport,classes2sources.get(autoImport));
                }
              }
 catch (              IOException e) {
                warn(""String_Node_Str"",file,e.getMessage());
              }
            }
          }
        }
);
        copyImportedClasses(foundClasses2Sources,classes2sources);
      }
 else {
        final Map<String,File> foundClasses2Sources=new HashMap<String,File>();
        JarFile jarFile;
        try {
          jarFile=new JarFile(pathFile);
        }
 catch (        IOException e) {
          warn(""String_Node_Str"",pathFile);
          continue;
        }
        Manifest manifest=jarFile.getManifest();
        if (manifest != null && manifest.getMainAttributes() != null) {
          String specTitle=manifest.getMainAttributes().getValue(Attributes.Name.SPECIFICATION_TITLE);
          if (""String_Node_Str"".equalsIgnoreCase(String.valueOf(specTitle).trim())) {
            debug(""String_Node_Str"",pathFile);
            continue;
          }
        }
        Enumeration<JarEntry> entries=jarFile.entries();
        while (entries.hasMoreElements()) {
          JarEntry entry=entries.nextElement();
          if (!entry.isDirectory()) {
            String path=entry.getName();
            if (path.endsWith(""String_Node_Str"")) {
              String classname=path.substring(0,path.length() - 6).replace('/','.').replace('$','.');
              debug(""String_Node_Str"",classname,pathFile);
              foundClasses2Sources.put(classname,foundClasses2Sources.get(classname));
            }
 else             if (path.endsWith(""String_Node_Str"")) {
              String classname=path.substring(0,path.length() - 5).replace('/','.');
              File sourcesFile=new File(tempSourcesDir,path);
              debug(""String_Node_Str"",classname,pathFile,sourcesFile);
              try {
                InputStream in=jarFile.getInputStream(entry);
                sourcesFile.getParentFile().mkdirs();
                FileOutputStream out=new FileOutputStream(sourcesFile);
                byte[] buffer=new byte[1024 * 2];
                int len;
                while ((len=in.read(buffer)) > 0) {
                  out.write(buffer,0,len);
                }
                out.flush();
                out.close();
                in.close();
                foundClasses2Sources.put(classname,sourcesFile);
              }
 catch (              IOException e) {
                warn(""String_Node_Str"",sourcesFile,e.getMessage());
              }
            }
 else             if (""String_Node_Str"".equals(path)) {
              debug(""String_Node_Str"",pathFile);
              try {
                InputStream in=jarFile.getInputStream(entry);
                Set<String> autoImports=readAutoImports(in);
                in.close();
                for (                String autoImport : autoImports) {
                  classes2sources.put(autoImport,classes2sources.get(autoImport));
                }
              }
 catch (              IOException e) {
                warn(""String_Node_Str"",pathFile,e.getMessage());
              }
            }
          }
        }
        copyImportedClasses(foundClasses2Sources,classes2sources);
      }
    }
 else {
      debug(""String_Node_Str"",pathItem);
    }
  }
  if (this.config != null && this.config.getAPIImports() != null && !this.config.getAPIImports().isEmpty()) {
    AntPatternMatcher matcher=new AntPatternMatcher();
    matcher.setPathSeparator(""String_Node_Str"");
    for (    APIImport apiImport : this.config.getAPIImports()) {
      if (!matcher.isPattern(apiImport.getPattern()) && !classes2sources.containsKey(apiImport.getPattern())) {
        warn(""String_Node_Str"",apiImport.getPattern());
        classes2sources.put(apiImport.getPattern(),null);
      }
    }
  }
  return classes2sources;
}","/** 
 * Scans the Enunciate classpath for classes to be imported.
 * @return The classes to be imported, associated with their source file if it was found.
 */
protected Map<String,File> scanForClassesToImport() throws IOException {
  final Map<String,File> classes2sources=new HashMap<String,File>();
  File tempSourcesDir=createTempDir();
  List<String> classpath=new ArrayList<String>(Arrays.asList(getEnunciateClasspath().split(File.pathSeparator)));
  for (  String pathItem : classpath) {
    final File pathFile=new File(pathItem);
    final Map<String,File> foundClasses2Sources=new HashMap<String,File>();
    if (pathFile.exists()) {
      if (pathFile.isDirectory()) {
        visitFiles(pathFile,null,new FileVisitor(){
          public void visit(          File file){
            String path=pathFile.toURI().relativize(file.toURI()).getPath();
            if (path.endsWith(""String_Node_Str"")) {
              String classname=path.substring(0,path.length() - 6).replace('/','.').replace('$','.');
              debug(""String_Node_Str"",classname,file);
              foundClasses2Sources.put(classname,foundClasses2Sources.get(classname));
            }
 else             if (path.endsWith(""String_Node_Str"")) {
              String classname=path.substring(0,path.length() - 5).replace('/','.');
              debug(""String_Node_Str"",classname,file);
              foundClasses2Sources.put(classname,pathFile);
            }
 else             if (""String_Node_Str"".equals(path)) {
              debug(""String_Node_Str"",file);
              try {
                FileInputStream autoImportList=new FileInputStream(file);
                Set<String> autoImports=readAutoImports(autoImportList);
                autoImportList.close();
                for (                String autoImport : autoImports) {
                  classes2sources.put(autoImport,classes2sources.get(autoImport));
                }
              }
 catch (              IOException e) {
                warn(""String_Node_Str"",file,e.getMessage());
              }
            }
          }
        }
);
      }
 else {
        JarFile jarFile;
        try {
          jarFile=new JarFile(pathFile);
        }
 catch (        IOException e) {
          warn(""String_Node_Str"",pathFile);
          continue;
        }
        Manifest manifest=jarFile.getManifest();
        if (manifest != null && manifest.getMainAttributes() != null) {
          String specTitle=manifest.getMainAttributes().getValue(Attributes.Name.SPECIFICATION_TITLE);
          if (""String_Node_Str"".equalsIgnoreCase(String.valueOf(specTitle).trim())) {
            debug(""String_Node_Str"",pathFile);
            continue;
          }
        }
        Enumeration<JarEntry> entries=jarFile.entries();
        while (entries.hasMoreElements()) {
          JarEntry entry=entries.nextElement();
          if (!entry.isDirectory()) {
            String path=entry.getName();
            if (path.endsWith(""String_Node_Str"")) {
              String classname=path.substring(0,path.length() - 6).replace('/','.').replace('$','.');
              debug(""String_Node_Str"",classname,pathFile);
              foundClasses2Sources.put(classname,foundClasses2Sources.get(classname));
            }
 else             if (path.endsWith(""String_Node_Str"")) {
              String classname=path.substring(0,path.length() - 5).replace('/','.');
              File sourcesFile=new File(tempSourcesDir,path);
              debug(""String_Node_Str"",classname,pathFile,sourcesFile);
              try {
                InputStream in=jarFile.getInputStream(entry);
                sourcesFile.getParentFile().mkdirs();
                FileOutputStream out=new FileOutputStream(sourcesFile);
                byte[] buffer=new byte[1024 * 2];
                int len;
                while ((len=in.read(buffer)) > 0) {
                  out.write(buffer,0,len);
                }
                out.flush();
                out.close();
                in.close();
                foundClasses2Sources.put(classname,sourcesFile);
              }
 catch (              IOException e) {
                warn(""String_Node_Str"",sourcesFile,e.getMessage());
              }
            }
 else             if (""String_Node_Str"".equals(path)) {
              debug(""String_Node_Str"",pathFile);
              try {
                InputStream in=jarFile.getInputStream(entry);
                Set<String> autoImports=readAutoImports(in);
                in.close();
                for (                String autoImport : autoImports) {
                  classes2sources.put(autoImport,classes2sources.get(autoImport));
                }
              }
 catch (              IOException e) {
                warn(""String_Node_Str"",pathFile,e.getMessage());
              }
            }
          }
        }
      }
    }
 else {
      debug(""String_Node_Str"",pathItem);
    }
    copyImportedClasses(foundClasses2Sources,classes2sources);
    for (    DeploymentModule module : this.config.getAllModules()) {
      if (module instanceof EnunciateClasspathListener) {
        ((EnunciateClasspathListener)module).onClassesFound(foundClasses2Sources.keySet());
      }
    }
  }
  if (this.config != null && this.config.getAPIImports() != null && !this.config.getAPIImports().isEmpty()) {
    AntPatternMatcher matcher=new AntPatternMatcher();
    matcher.setPathSeparator(""String_Node_Str"");
    for (    APIImport apiImport : this.config.getAPIImports()) {
      if (!matcher.isPattern(apiImport.getPattern()) && !classes2sources.containsKey(apiImport.getPattern())) {
        warn(""String_Node_Str"",apiImport.getPattern());
        classes2sources.put(apiImport.getPattern(),null);
      }
    }
  }
  return classes2sources;
}",0.9457878655608905
177166,"/** 
 * The generate logic builds the XML documentation structure for the enunciated API.
 */
public void doFreemarkerGenerate() throws EnunciateException, IOException, TemplateException {
  if (!getEnunciate().isUpToDateWithSources(getGenerateDir())) {
    EnunciateFreemarkerModel model=getModel();
    if (this.splashPackage != null) {
      PackageDeclaration packageDeclaration=Context.getCurrentEnvironment().getPackage(this.splashPackage);
      if (packageDeclaration != null) {
        info(""String_Node_Str"",this.splashPackage);
        model.setVariable(""String_Node_Str"",new DecoratedPackageDeclaration(packageDeclaration).getJavaDoc());
      }
 else {
        warn(""String_Node_Str"",this.splashPackage);
      }
    }
    if (this.copyright != null) {
      debug(""String_Node_Str"",this.copyright);
      model.setVariable(""String_Node_Str"",this.copyright);
    }
    if (this.title != null) {
      debug(""String_Node_Str"",this.title);
      model.setVariable(""String_Node_Str"",this.title);
    }
    model.setVariable(""String_Node_Str"",new UniqueContentTypesMethod());
    processTemplate(getDocsTemplateURL(),model);
  }
 else {
    info(""String_Node_Str"");
  }
}","/** 
 * The generate logic builds the XML documentation structure for the enunciated API.
 */
public void doFreemarkerGenerate() throws EnunciateException, IOException, TemplateException {
  if (!getEnunciate().isUpToDateWithSources(getGenerateDir())) {
    EnunciateFreemarkerModel model=getModel();
    if (this.splashPackage != null) {
      PackageDeclaration packageDeclaration=Context.getCurrentEnvironment().getPackage(this.splashPackage);
      if (packageDeclaration != null) {
        info(""String_Node_Str"",this.splashPackage);
        model.setVariable(""String_Node_Str"",new DecoratedPackageDeclaration(packageDeclaration).getJavaDoc());
      }
 else {
        warn(""String_Node_Str"",this.splashPackage);
      }
    }
    if (this.copyright != null) {
      debug(""String_Node_Str"",this.copyright);
      model.setVariable(""String_Node_Str"",this.copyright);
    }
    if (this.title != null) {
      debug(""String_Node_Str"",this.title);
      model.setVariable(""String_Node_Str"",this.title);
    }
    model.setVariable(""String_Node_Str"",new UniqueContentTypesMethod(Collections.unmodifiableSet(model.getContentTypesToIds().keySet())));
    processTemplate(getDocsTemplateURL(),model);
  }
 else {
    info(""String_Node_Str"");
  }
}",0.9727947238252268
177167,"public Object exec(List list) throws TemplateModelException {
  if (list.size() < 1) {
    throw new TemplateModelException(""String_Node_Str"");
  }
  Object object=BeansWrapper.getDefaultInstance().unwrap((TemplateModel)list.get(0));
  Collection<RESTResource> resourceList;
  if (object instanceof Collection) {
    resourceList=(Collection<RESTResource>)object;
  }
 else   if (object instanceof RESTResource) {
    resourceList=Arrays.asList((RESTResource)object);
  }
 else {
    throw new TemplateModelException(""String_Node_Str"" + object.getClass().getName());
  }
  TreeMap<String,SupportedContentTypeAtSubcontext> supported=new TreeMap<String,SupportedContentTypeAtSubcontext>();
  for (  RESTResource resource : resourceList) {
    for (    SupportedContentType contentType : resource.getSupportedContentTypes()) {
      SupportedContentTypeAtSubcontext type=supported.get(contentType.getType());
      if (type == null) {
        type=new SupportedContentTypeAtSubcontext();
        type.setType(contentType.getType());
        supported.put(contentType.getType(),type);
      }
      type.setProduceable(type.isProduceable() || contentType.isProduceable());
      type.setConsumable(type.isConsumable() || contentType.isConsumable());
      if (contentType.isProduceable()) {
        Map<String,Set<String>> subcontextMap=(Map<String,Set<String>>)resource.getMetaData().get(""String_Node_Str"");
        if (subcontextMap != null) {
          type.setSubcontexts(subcontextMap.get(contentType.getType()));
        }
      }
    }
  }
  return supported.values();
}","public Object exec(List list) throws TemplateModelException {
  if (list.size() < 1) {
    throw new TemplateModelException(""String_Node_Str"");
  }
  Object object=BeansWrapper.getDefaultInstance().unwrap((TemplateModel)list.get(0));
  Collection<RESTResource> resourceList;
  if (object instanceof Collection) {
    resourceList=(Collection<RESTResource>)object;
  }
 else   if (object instanceof RESTResource) {
    resourceList=Arrays.asList((RESTResource)object);
  }
 else {
    throw new TemplateModelException(""String_Node_Str"" + object.getClass().getName());
  }
  LinkedHashMap<String,SupportedContentTypeAtSubcontext> supported=new LinkedHashMap<String,SupportedContentTypeAtSubcontext>();
  for (  RESTResource resource : resourceList) {
    for (    SupportedContentType contentType : resource.getSupportedContentTypes()) {
      List<String> supportedTypeSet=findAllSupportedTypes(contentType);
      for (      String supportedType : supportedTypeSet) {
        SupportedContentTypeAtSubcontext type=supported.get(supportedType);
        if (type == null) {
          type=new SupportedContentTypeAtSubcontext();
          type.setType(supportedType);
          supported.put(supportedType,type);
        }
        type.setProduceable(type.isProduceable() || contentType.isProduceable());
        type.setConsumable(type.isConsumable() || contentType.isConsumable());
        if (contentType.isProduceable()) {
          Map<String,Set<String>> subcontextMap=(Map<String,Set<String>>)resource.getMetaData().get(""String_Node_Str"");
          if (subcontextMap != null) {
            type.setSubcontexts(subcontextMap.get(supportedType));
          }
        }
      }
    }
  }
  return supported.values();
}",0.8828172434729812
177168,"/** 
 * The imported namespace of a specific schema.
 * @return The imported namespace of a specific schema.
 */
public Set<String> getReferencedNamespaces(){
  Set<String> referencedNamespaces=new HashSet<String>();
  for (  TypeDefinition typeDefinition : getTypeDefinitions()) {
    addReferencedNamespaces(typeDefinition,referencedNamespaces);
  }
  for (  RootElementDeclaration rootElement : getGlobalElements()) {
    referencedNamespaces.add(rootElement.getNamespace());
    referencedNamespaces.add(rootElement.getTypeDefinition().getNamespace());
  }
  for (  ImplicitSchemaElement schemaElement : implicitSchemaElements) {
    QName typeQName=schemaElement.getTypeQName();
    if (typeQName != null) {
      referencedNamespaces.add(typeQName.getNamespaceURI());
    }
    if (schemaElement instanceof ImplicitRootElement) {
      for (      ImplicitChildElement childElement : ((ImplicitRootElement)schemaElement).getChildElements()) {
        addReferencedNamespaces(childElement.getXmlType(),referencedNamespaces);
      }
    }
  }
  for (  ImplicitSchemaAttribute schemaAttribute : implicitSchemaAttributes) {
    QName typeQName=schemaAttribute.getTypeQName();
    if (typeQName != null) {
      referencedNamespaces.add(typeQName.getNamespaceURI());
    }
  }
  referencedNamespaces.add(getNamespace());
  referencedNamespaces.remove(""String_Node_Str"");
  if (referencedNamespaces.remove(null)) {
    referencedNamespaces.add(""String_Node_Str"");
  }
  return referencedNamespaces;
}","/** 
 * The imported namespace of a specific schema.
 * @return The imported namespace of a specific schema.
 */
public Set<String> getReferencedNamespaces(){
  Set<String> referencedNamespaces=new HashSet<String>();
  for (  TypeDefinition typeDefinition : getTypeDefinitions()) {
    addReferencedNamespaces(typeDefinition,referencedNamespaces);
  }
  for (  RootElementDeclaration rootElement : getGlobalElements()) {
    referencedNamespaces.add(rootElement.getNamespace());
    referencedNamespaces.add(rootElement.getTypeDefinition().getNamespace());
  }
  for (  ImplicitSchemaElement schemaElement : implicitSchemaElements) {
    QName typeQName=schemaElement.getTypeQName();
    if (typeQName != null) {
      referencedNamespaces.add(typeQName.getNamespaceURI());
    }
    if (schemaElement instanceof ImplicitRootElement) {
      for (      ImplicitChildElement childElement : ((ImplicitRootElement)schemaElement).getChildElements()) {
        addReferencedNamespaces(childElement.getXmlType(),referencedNamespaces);
      }
    }
  }
  for (  ImplicitSchemaAttribute schemaAttribute : implicitSchemaAttributes) {
    QName typeQName=schemaAttribute.getTypeQName();
    if (typeQName != null) {
      referencedNamespaces.add(typeQName.getNamespaceURI());
    }
  }
  for (  LocalElementDeclaration localElementDeclaration : localElementDeclarations) {
    QName typeQName=localElementDeclaration.getElementXmlType().getQname();
    if (typeQName != null) {
      referencedNamespaces.add(typeQName.getNamespaceURI());
    }
  }
  referencedNamespaces.add(getNamespace());
  referencedNamespaces.remove(""String_Node_Str"");
  if (referencedNamespaces.remove(null)) {
    referencedNamespaces.add(""String_Node_Str"");
  }
  return referencedNamespaces;
}",0.9193993257738278
177169,"/** 
 * The namespace of the local element.
 * @return The namespace of the local element.
 */
public String getNamespace(){
  String namespace=elementDecl.namespace();
  if (""String_Node_Str"".equals(namespace)) {
    namespace=this.registry.getSchema().getNamespace();
  }
  return namespace;
}","/** 
 * The namespace of the local element.
 * @return The namespace of the local element.
 */
public String getNamespace(){
  String namespace=elementDecl.namespace();
  if (""String_Node_Str"".equals(namespace)) {
    namespace=this.registry.getSchema().getNamespace();
  }
  return ""String_Node_Str"".equals(namespace) ? null : namespace;
}",0.9291338582677166
177170,"/** 
 * The element xml type.
 * @return The element xml type.
 */
public XmlType getElementXmlType(){
  return elementXmlType;
}","/** 
 * The element xml type.
 * @return The element xml type.
 */
public XmlType getElementXmlType(){
  try {
    return XmlTypeFactory.getXmlType(getParameters().iterator().next().getType());
  }
 catch (  XmlTypeException e) {
    throw new ValidationException(getPosition(),e.getMessage());
  }
}",0.5361305361305362
177171,"public LocalElementDeclaration(MethodDeclaration delegate,Registry registry){
  super(delegate);
  this.registry=registry;
  elementDecl=delegate.getAnnotation(XmlElementDecl.class);
  if (elementDecl == null) {
    throw new IllegalArgumentException(getPosition() + ""String_Node_Str"");
  }
  Collection<ParameterDeclaration> params=getParameters();
  if (params.size() != 1) {
    throw new IllegalArgumentException(getPosition() + ""String_Node_Str"");
  }
  ParameterDeclaration param=params.iterator().next();
  if (!(param.getType() instanceof DeclaredType)) {
    throw new IllegalArgumentException(getPosition() + ""String_Node_Str"");
  }
  elementTypeDeclaration=((DeclaredType)param.getType()).getDeclaration();
  try {
    this.elementXmlType=XmlTypeFactory.getXmlType(param.getType());
  }
 catch (  XmlTypeException e) {
    throw new ValidationException(getPosition(),e.getMessage());
  }
}","public LocalElementDeclaration(MethodDeclaration delegate,Registry registry){
  super(delegate);
  this.registry=registry;
  elementDecl=delegate.getAnnotation(XmlElementDecl.class);
  if (elementDecl == null) {
    throw new IllegalArgumentException(getPosition() + ""String_Node_Str"");
  }
  Collection<ParameterDeclaration> params=getParameters();
  if (params.size() != 1) {
    throw new IllegalArgumentException(getPosition() + ""String_Node_Str"");
  }
  ParameterDeclaration param=params.iterator().next();
  if (!(param.getType() instanceof DeclaredType)) {
    throw new IllegalArgumentException(getPosition() + ""String_Node_Str"");
  }
  elementTypeDeclaration=((DeclaredType)param.getType()).getDeclaration();
}",0.8882025941939469
177172,"public boolean isReadable(Class type,Type genericType,Annotation[] annotations,MediaType mediaType){
  return true;
}","public boolean isReadable(Class type,Type genericType,Annotation[] annotations,MediaType mediaType){
  AMFMapper mapper=AMFMapperIntrospector.getAMFMapper(type,genericType);
  if (mapper instanceof CustomAMFMapper) {
    return type.isAssignableFrom(((CustomAMFMapper)mapper).getJaxbClass());
  }
 else {
    return ((mapper instanceof CollectionAMFMapper) || (mapper instanceof MapAMFMapper));
  }
}",0.4177949709864603
177173,"public boolean isWriteable(Class type,Type genericType,Annotation[] annotations,MediaType mediaType){
  return true;
}","public boolean isWriteable(Class type,Type genericType,Annotation[] annotations,MediaType mediaType){
  AMFMapper mapper=AMFMapperIntrospector.getAMFMapper(type,genericType);
  if (mapper instanceof CustomAMFMapper) {
    return ((CustomAMFMapper)mapper).getJaxbClass().isAssignableFrom(type);
  }
 else {
    return ((mapper instanceof CollectionAMFMapper) || (mapper instanceof MapAMFMapper));
  }
}",0.420038535645472
177174,"/** 
 * Whether this converter is enabled to output jdk 15 compatible classes.
 * @return Whether this converter is enabled to output jdk 15 compatible classes.
 */
public boolean isJdk15(){
  return jdk15 && !FORCE_NOT_15.get();
}","/** 
 * Whether this converter is enabled to output jdk 15 compatible classes.
 * @return Whether this converter is enabled to output jdk 15 compatible classes.
 */
public boolean isJdk15(){
  return jdk15 && (FORCE_NOT_15.get() == null || !FORCE_NOT_15.get());
}",0.931174089068826
177175,"/** 
 * Invokes the flex compiler on the apps specified in the configuration file.
 */
protected void doFlexCompile() throws EnunciateException, IOException {
  File swcFile=null;
  File asSources=null;
  Enunciate enunciate=getEnunciate();
  if (isSwcDownloadable() || !flexApps.isEmpty()) {
    if (this.flexHome == null) {
      throw new EnunciateException(""String_Node_Str"");
    }
    File flexHomeDir=new File(this.flexHome);
    if (!flexHomeDir.exists()) {
      throw new EnunciateException(""String_Node_Str"" + flexHomeDir.getAbsolutePath() + ""String_Node_Str"");
    }
    File javaBinDir=new File(System.getProperty(""String_Node_Str""),""String_Node_Str"");
    File javaExecutable=new File(javaBinDir,""String_Node_Str"");
    if (!javaExecutable.exists()) {
      javaExecutable=new File(javaBinDir,""String_Node_Str"");
    }
    String javaCommand=javaExecutable.getAbsolutePath();
    if (!javaExecutable.exists()) {
      warn(""String_Node_Str"",javaBinDir.getAbsolutePath());
      javaCommand=""String_Node_Str"";
    }
    int compileCommandIndex;
    int outputFileIndex;
    int sourcePathIndex;
    int mainMxmlPathIndex;
    List<String> commandLine=new ArrayList<String>();
    int argIndex=0;
    commandLine.add(argIndex++,javaCommand);
    for (    String jvmarg : this.compilerConfig.getJVMArgs()) {
      commandLine.add(argIndex++,jvmarg);
    }
    commandLine.add(argIndex++,""String_Node_Str"");
    File flexHomeLib=new File(flexHomeDir,""String_Node_Str"");
    if (!flexHomeLib.exists()) {
      throw new EnunciateException(""String_Node_Str"" + flexHomeLib);
    }
 else {
      StringBuilder builder=new StringBuilder();
      Iterator<File> flexLibIt=Arrays.asList(flexHomeLib.listFiles()).iterator();
      while (flexLibIt.hasNext()) {
        File flexJar=flexLibIt.next();
        if (flexJar.getAbsolutePath().endsWith(""String_Node_Str"")) {
          builder.append(flexJar.getAbsolutePath());
          if (flexLibIt.hasNext()) {
            builder.append(File.pathSeparatorChar);
          }
        }
 else {
          debug(""String_Node_Str"",flexJar);
        }
      }
      commandLine.add(argIndex++,builder.toString());
    }
    compileCommandIndex=argIndex;
    commandLine.add(argIndex++,null);
    commandLine.add(argIndex++,""String_Node_Str"");
    outputFileIndex=argIndex;
    commandLine.add(argIndex++,null);
    if (compilerConfig.getFlexConfig() == null) {
      compilerConfig.setFlexConfig(new File(new File(flexHome,""String_Node_Str""),""String_Node_Str""));
    }
    if (compilerConfig.getFlexConfig().exists()) {
      commandLine.add(argIndex++,""String_Node_Str"");
      commandLine.add(argIndex++,compilerConfig.getFlexConfig().getAbsolutePath());
    }
 else {
      warn(""String_Node_Str"",compilerConfig.getFlexConfig());
    }
    if (compilerConfig.getContextRoot() == null) {
      if (getEnunciate().getConfig().getLabel() != null) {
        compilerConfig.setContextRoot(""String_Node_Str"" + getEnunciate().getConfig().getLabel());
      }
 else {
        compilerConfig.setContextRoot(""String_Node_Str"");
      }
    }
    commandLine.add(argIndex++,""String_Node_Str"");
    commandLine.add(argIndex++,compilerConfig.getContextRoot());
    if (compilerConfig.getLocale() != null) {
      commandLine.add(argIndex++,""String_Node_Str"");
      commandLine.add(argIndex++,compilerConfig.getLocale());
    }
    if (compilerConfig.getLicenses().size() > 0) {
      commandLine.add(argIndex++,""String_Node_Str"");
      for (      License license : compilerConfig.getLicenses()) {
        commandLine.add(argIndex++,license.getProduct());
        commandLine.add(argIndex++,license.getSerialNumber());
      }
    }
    if (compilerConfig.getOptimize() != null && compilerConfig.getOptimize()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    if (compilerConfig.getDebug() != null && compilerConfig.getDebug()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    if (compilerConfig.getStrict() != null && compilerConfig.getStrict()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    if (compilerConfig.getUseNetwork() != null && compilerConfig.getUseNetwork()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    if (compilerConfig.getIncremental() != null && compilerConfig.getIncremental()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    if (compilerConfig.getShowActionscriptWarnings() != null && compilerConfig.getShowActionscriptWarnings()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    if (compilerConfig.getShowBindingWarnings() != null && compilerConfig.getShowBindingWarnings()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    if (compilerConfig.getShowDeprecationWarnings() != null && compilerConfig.getShowDeprecationWarnings()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    for (    String arg : this.compilerConfig.getArgs()) {
      commandLine.add(argIndex++,arg);
    }
    commandLine.add(argIndex++,""String_Node_Str"");
    File xmlGenerateDir=getXMLGenerateDir();
    commandLine.add(argIndex++,new File(xmlGenerateDir,""String_Node_Str"").getAbsolutePath());
    commandLine.add(argIndex,""String_Node_Str"");
    File clientSideGenerateDir=getClientSideGenerateDir();
    commandLine.add(argIndex + 1,clientSideGenerateDir.getAbsolutePath());
    String swcName=getSwcName();
    if (swcName == null) {
      String label=""String_Node_Str"";
      if ((enunciate.getConfig() != null) && (enunciate.getConfig().getLabel() != null)) {
        label=enunciate.getConfig().getLabel();
      }
      swcName=label + ""String_Node_Str"";
    }
    File swcCompileDir=getSwcCompileDir();
    swcFile=new File(swcCompileDir,swcName);
    boolean swcUpToDate=swcFile.exists() && enunciate.isUpToDate(xmlGenerateDir,swcCompileDir) && enunciate.isUpToDate(clientSideGenerateDir,swcCompileDir);
    if (!swcUpToDate) {
      commandLine.set(compileCommandIndex,compilerConfig.getSwcCompileCommand());
      commandLine.set(outputFileIndex,swcFile.getAbsolutePath());
      info(""String_Node_Str"",swcFile.getAbsolutePath());
      if (enunciate.isDebug()) {
        StringBuilder command=new StringBuilder();
        for (        String commandPiece : commandLine) {
          command.append(' ').append(commandPiece);
        }
        debug(""String_Node_Str"",command);
      }
      compileSwc(commandLine);
    }
 else {
      info(""String_Node_Str"",swcFile.getAbsolutePath());
    }
    while (commandLine.size() > argIndex) {
      commandLine.remove(argIndex);
    }
    if (compilerConfig.getProfile() != null && compilerConfig.getProfile()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    if (compilerConfig.getWarnings() != null && compilerConfig.getWarnings()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    commandLine.add(argIndex++,""String_Node_Str"");
    commandLine.add(argIndex++,clientSideGenerateDir.getAbsolutePath());
    commandLine.add(argIndex++,""String_Node_Str"");
    sourcePathIndex=argIndex;
    commandLine.add(argIndex++,null);
    commandLine.add(argIndex++,""String_Node_Str"");
    mainMxmlPathIndex=argIndex;
    commandLine.add(argIndex++,null);
    commandLine.set(compileCommandIndex,compilerConfig.getFlexCompileCommand());
    File outputDirectory=getSwfCompileDir();
    debug(""String_Node_Str"" + outputDirectory);
    outputDirectory.mkdirs();
    for (    FlexApp flexApp : flexApps) {
      String mainMxmlPath=flexApp.getMainMxmlFile();
      if (mainMxmlPath == null) {
        throw new EnunciateException(""String_Node_Str"" + flexApp.getName() + ""String_Node_Str"");
      }
      File mainMxmlFile=enunciate.resolvePath(mainMxmlPath);
      if (!mainMxmlFile.exists()) {
        throw new EnunciateException(""String_Node_Str"" + flexApp.getName() + ""String_Node_Str"");
      }
      File swfFile=new File(outputDirectory,flexApp.getName() + ""String_Node_Str"");
      File appSrcDir=enunciate.resolvePath(flexApp.getSrcDir());
      String swfFilePath=swfFile.getAbsolutePath();
      boolean swfUpToDate=swfFile.exists() && mainMxmlFile.lastModified() < swfFile.lastModified() && enunciate.isUpToDate(appSrcDir,swfFile);
      if (!swfUpToDate) {
        commandLine.set(outputFileIndex,swfFilePath);
        commandLine.set(mainMxmlPathIndex,mainMxmlFile.getAbsolutePath());
        commandLine.set(sourcePathIndex,appSrcDir.getAbsolutePath());
        info(""String_Node_Str"",swfFilePath);
        if (enunciate.isDebug()) {
          StringBuilder command=new StringBuilder();
          for (          String commandPiece : commandLine) {
            command.append(' ').append(commandPiece);
          }
          debug(""String_Node_Str"",flexApp.getName(),command);
        }
        ProcessBuilder processBuilder=new ProcessBuilder(commandLine.toArray(new String[commandLine.size()]));
        processBuilder.directory(getSwfCompileDir());
        processBuilder.redirectErrorStream(true);
        Process process=processBuilder.start();
        BufferedReader procReader=new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line=procReader.readLine();
        while (line != null) {
          info(line);
          line=procReader.readLine();
        }
        int procCode;
        try {
          procCode=process.waitFor();
        }
 catch (        InterruptedException e1) {
          throw new EnunciateException(""String_Node_Str"");
        }
        if (procCode != 0) {
          throw new EnunciateException(""String_Node_Str"" + flexApp.getName());
        }
      }
 else {
        info(""String_Node_Str"",swfFilePath);
      }
    }
  }
 else   if (isAsSourcesDownloadable()) {
    String label=""String_Node_Str"";
    if ((enunciate.getConfig() != null) && (enunciate.getConfig().getLabel() != null)) {
      label=enunciate.getConfig().getLabel();
    }
    asSources=new File(new File(getCompileDir(),""String_Node_Str""),label + ""String_Node_Str"");
    enunciate.zip(asSources,getClientSideGenerateDir());
  }
  if (swcFile != null || asSources != null) {
    List<ArtifactDependency> clientDeps=new ArrayList<ArtifactDependency>();
    BaseArtifactDependency as3Dependency=new BaseArtifactDependency();
    as3Dependency.setId(""String_Node_Str"");
    as3Dependency.setArtifactType(""String_Node_Str"");
    as3Dependency.setDescription(""String_Node_Str"");
    as3Dependency.setURL(""String_Node_Str"");
    as3Dependency.setVersion(""String_Node_Str"");
    clientDeps.add(as3Dependency);
    ClientLibraryArtifact as3ClientArtifact=new ClientLibraryArtifact(getName(),""String_Node_Str"",""String_Node_Str"");
    as3ClientArtifact.setPlatform(""String_Node_Str"");
    as3ClientArtifact.setDescription(readResource(""String_Node_Str""));
    as3ClientArtifact.setDependencies(clientDeps);
    if (swcFile != null) {
      NamedFileArtifact clientArtifact=new NamedFileArtifact(getName(),""String_Node_Str"",swcFile);
      clientArtifact.setDescription(""String_Node_Str"");
      clientArtifact.setPublic(true);
      as3ClientArtifact.addArtifact(clientArtifact);
      enunciate.addArtifact(clientArtifact);
    }
    if (asSources != null) {
      NamedFileArtifact clientArtifact=new NamedFileArtifact(getName(),""String_Node_Str"",asSources);
      clientArtifact.setDescription(""String_Node_Str"");
      clientArtifact.setPublic(true);
      as3ClientArtifact.addArtifact(clientArtifact);
      enunciate.addArtifact(clientArtifact);
    }
    enunciate.addArtifact(as3ClientArtifact);
  }
}","/** 
 * Invokes the flex compiler on the apps specified in the configuration file.
 */
protected void doFlexCompile() throws EnunciateException, IOException {
  File swcFile=null;
  File asSources=null;
  Enunciate enunciate=getEnunciate();
  if (isSwcDownloadable() || !flexApps.isEmpty()) {
    if (this.flexHome == null) {
      throw new EnunciateException(""String_Node_Str"");
    }
    File flexHomeDir=new File(this.flexHome);
    if (!flexHomeDir.exists()) {
      throw new EnunciateException(""String_Node_Str"" + flexHomeDir.getAbsolutePath() + ""String_Node_Str"");
    }
    File javaBinDir=new File(System.getProperty(""String_Node_Str""),""String_Node_Str"");
    File javaExecutable=new File(javaBinDir,""String_Node_Str"");
    if (!javaExecutable.exists()) {
      javaExecutable=new File(javaBinDir,""String_Node_Str"");
    }
    String javaCommand=javaExecutable.getAbsolutePath();
    if (!javaExecutable.exists()) {
      warn(""String_Node_Str"",javaBinDir.getAbsolutePath());
      javaCommand=""String_Node_Str"";
    }
    int compileCommandIndex;
    int outputFileIndex;
    int sourcePathIndex;
    int mainMxmlPathIndex;
    List<String> commandLine=new ArrayList<String>();
    int argIndex=0;
    commandLine.add(argIndex++,javaCommand);
    for (    String jvmarg : this.compilerConfig.getJVMArgs()) {
      commandLine.add(argIndex++,jvmarg);
    }
    commandLine.add(argIndex++,""String_Node_Str"");
    File flexHomeLib=new File(flexHomeDir,""String_Node_Str"");
    if (!flexHomeLib.exists()) {
      throw new EnunciateException(""String_Node_Str"" + flexHomeLib);
    }
 else {
      StringBuilder builder=new StringBuilder();
      Iterator<File> flexLibIt=Arrays.asList(flexHomeLib.listFiles()).iterator();
      while (flexLibIt.hasNext()) {
        File flexJar=flexLibIt.next();
        if (flexJar.getAbsolutePath().endsWith(""String_Node_Str"")) {
          builder.append(flexJar.getAbsolutePath());
          if (flexLibIt.hasNext()) {
            builder.append(File.pathSeparatorChar);
          }
        }
 else {
          debug(""String_Node_Str"",flexJar);
        }
      }
      commandLine.add(argIndex++,builder.toString());
    }
    compileCommandIndex=argIndex;
    commandLine.add(argIndex++,null);
    commandLine.add(argIndex++,""String_Node_Str"");
    outputFileIndex=argIndex;
    commandLine.add(argIndex++,null);
    if (compilerConfig.getFlexConfig() == null) {
      compilerConfig.setFlexConfig(new File(new File(flexHome,""String_Node_Str""),""String_Node_Str""));
    }
    if (compilerConfig.getFlexConfig().exists()) {
      commandLine.add(argIndex++,""String_Node_Str"");
      commandLine.add(argIndex++,compilerConfig.getFlexConfig().getAbsolutePath());
    }
 else {
      warn(""String_Node_Str"",compilerConfig.getFlexConfig());
    }
    if (compilerConfig.getContextRoot() == null) {
      if (getEnunciate().getConfig().getLabel() != null) {
        compilerConfig.setContextRoot(""String_Node_Str"" + getEnunciate().getConfig().getLabel());
      }
 else {
        compilerConfig.setContextRoot(""String_Node_Str"");
      }
    }
    commandLine.add(argIndex++,""String_Node_Str"");
    commandLine.add(argIndex++,compilerConfig.getContextRoot());
    if (compilerConfig.getLocale() != null) {
      commandLine.add(argIndex++,""String_Node_Str"");
      commandLine.add(argIndex++,compilerConfig.getLocale());
    }
    if (compilerConfig.getLicenses().size() > 0) {
      commandLine.add(argIndex++,""String_Node_Str"");
      for (      License license : compilerConfig.getLicenses()) {
        commandLine.add(argIndex++,license.getProduct());
        commandLine.add(argIndex++,license.getSerialNumber());
      }
    }
    if (compilerConfig.getOptimize() != null && compilerConfig.getOptimize()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    if (compilerConfig.getDebug() != null && compilerConfig.getDebug()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    if (compilerConfig.getStrict() != null && compilerConfig.getStrict()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    if (compilerConfig.getUseNetwork() != null && compilerConfig.getUseNetwork()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    if (compilerConfig.getIncremental() != null && compilerConfig.getIncremental()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    if (compilerConfig.getShowActionscriptWarnings() != null && compilerConfig.getShowActionscriptWarnings()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    if (compilerConfig.getShowBindingWarnings() != null && compilerConfig.getShowBindingWarnings()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    if (compilerConfig.getShowDeprecationWarnings() != null && compilerConfig.getShowDeprecationWarnings()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    for (    String arg : this.compilerConfig.getArgs()) {
      commandLine.add(argIndex++,arg);
    }
    commandLine.add(argIndex++,""String_Node_Str"");
    File xmlGenerateDir=getXMLGenerateDir();
    commandLine.add(argIndex++,new File(xmlGenerateDir,""String_Node_Str"").getAbsolutePath());
    commandLine.add(argIndex,""String_Node_Str"");
    File clientSideGenerateDir=getClientSideGenerateDir();
    commandLine.add(argIndex + 1,clientSideGenerateDir.getAbsolutePath());
    String swcName=getSwcName();
    if (swcName == null) {
      String label=""String_Node_Str"";
      if ((enunciate.getConfig() != null) && (enunciate.getConfig().getLabel() != null)) {
        label=enunciate.getConfig().getLabel();
      }
      swcName=label + ""String_Node_Str"";
    }
    File swcCompileDir=getSwcCompileDir();
    swcFile=new File(swcCompileDir,swcName);
    boolean swcUpToDate=swcFile.exists() && enunciate.isUpToDate(xmlGenerateDir,swcCompileDir) && enunciate.isUpToDate(clientSideGenerateDir,swcCompileDir);
    if (!swcUpToDate) {
      commandLine.set(compileCommandIndex,compilerConfig.getSwcCompileCommand());
      commandLine.set(outputFileIndex,swcFile.getAbsolutePath());
      info(""String_Node_Str"",swcFile.getAbsolutePath());
      if (enunciate.isDebug()) {
        StringBuilder command=new StringBuilder();
        for (        String commandPiece : commandLine) {
          command.append(' ').append(commandPiece);
        }
        debug(""String_Node_Str"",command);
      }
      compileSwc(commandLine);
    }
 else {
      info(""String_Node_Str"",swcFile.getAbsolutePath());
    }
    while (commandLine.size() > argIndex) {
      commandLine.remove(argIndex);
    }
    if (compilerConfig.getProfile() != null && compilerConfig.getProfile()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    if (compilerConfig.getWarnings() != null && compilerConfig.getWarnings()) {
      commandLine.add(argIndex++,""String_Node_Str"");
    }
    commandLine.add(argIndex++,""String_Node_Str"");
    commandLine.add(argIndex++,clientSideGenerateDir.getAbsolutePath());
    commandLine.add(argIndex++,""String_Node_Str"");
    sourcePathIndex=argIndex;
    commandLine.add(argIndex++,null);
    commandLine.add(argIndex++,""String_Node_Str"");
    mainMxmlPathIndex=argIndex;
    commandLine.add(argIndex++,null);
    commandLine.set(compileCommandIndex,compilerConfig.getFlexCompileCommand());
    File outputDirectory=getSwfCompileDir();
    debug(""String_Node_Str"" + outputDirectory);
    outputDirectory.mkdirs();
    for (    FlexApp flexApp : flexApps) {
      String mainMxmlPath=flexApp.getMainMxmlFile();
      if (mainMxmlPath == null) {
        throw new EnunciateException(""String_Node_Str"" + flexApp.getName() + ""String_Node_Str"");
      }
      File mainMxmlFile=enunciate.resolvePath(mainMxmlPath);
      if (!mainMxmlFile.exists()) {
        throw new EnunciateException(""String_Node_Str"" + flexApp.getName() + ""String_Node_Str"");
      }
      File swfFile=new File(outputDirectory,flexApp.getName() + ""String_Node_Str"");
      File appSrcDir=enunciate.resolvePath(flexApp.getSrcDir());
      String swfFilePath=swfFile.getAbsolutePath();
      boolean swfUpToDate=swfFile.exists() && mainMxmlFile.lastModified() < swfFile.lastModified() && enunciate.isUpToDate(appSrcDir,swfFile);
      if (!swfUpToDate) {
        commandLine.set(outputFileIndex,swfFilePath);
        commandLine.set(mainMxmlPathIndex,mainMxmlFile.getAbsolutePath());
        commandLine.set(sourcePathIndex,appSrcDir.getAbsolutePath());
        info(""String_Node_Str"",swfFilePath);
        if (enunciate.isDebug()) {
          StringBuilder command=new StringBuilder();
          for (          String commandPiece : commandLine) {
            command.append(' ').append(commandPiece);
          }
          debug(""String_Node_Str"",flexApp.getName(),command);
        }
        ProcessBuilder processBuilder=new ProcessBuilder(commandLine.toArray(new String[commandLine.size()]));
        processBuilder.directory(getSwfCompileDir());
        processBuilder.redirectErrorStream(true);
        Process process=processBuilder.start();
        BufferedReader procReader=new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line=procReader.readLine();
        while (line != null) {
          info(line);
          line=procReader.readLine();
        }
        int procCode;
        try {
          procCode=process.waitFor();
        }
 catch (        InterruptedException e1) {
          throw new EnunciateException(""String_Node_Str"");
        }
        if (procCode != 0) {
          throw new EnunciateException(""String_Node_Str"" + flexApp.getName());
        }
      }
 else {
        info(""String_Node_Str"",swfFilePath);
      }
    }
  }
  if (isAsSourcesDownloadable()) {
    String label=""String_Node_Str"";
    if ((enunciate.getConfig() != null) && (enunciate.getConfig().getLabel() != null)) {
      label=enunciate.getConfig().getLabel();
    }
    asSources=new File(new File(getCompileDir(),""String_Node_Str""),label + ""String_Node_Str"");
    enunciate.zip(asSources,getClientSideGenerateDir());
  }
  if (swcFile != null || asSources != null) {
    List<ArtifactDependency> clientDeps=new ArrayList<ArtifactDependency>();
    BaseArtifactDependency as3Dependency=new BaseArtifactDependency();
    as3Dependency.setId(""String_Node_Str"");
    as3Dependency.setArtifactType(""String_Node_Str"");
    as3Dependency.setDescription(""String_Node_Str"");
    as3Dependency.setURL(""String_Node_Str"");
    as3Dependency.setVersion(""String_Node_Str"");
    clientDeps.add(as3Dependency);
    ClientLibraryArtifact as3ClientArtifact=new ClientLibraryArtifact(getName(),""String_Node_Str"",""String_Node_Str"");
    as3ClientArtifact.setPlatform(""String_Node_Str"");
    as3ClientArtifact.setDescription(readResource(""String_Node_Str""));
    as3ClientArtifact.setDependencies(clientDeps);
    if (swcFile != null) {
      NamedFileArtifact clientArtifact=new NamedFileArtifact(getName(),""String_Node_Str"",swcFile);
      clientArtifact.setDescription(""String_Node_Str"");
      clientArtifact.setPublic(false);
      as3ClientArtifact.addArtifact(clientArtifact);
      enunciate.addArtifact(clientArtifact);
    }
    if (asSources != null) {
      NamedFileArtifact clientArtifact=new NamedFileArtifact(getName(),""String_Node_Str"",asSources);
      clientArtifact.setDescription(""String_Node_Str"");
      clientArtifact.setPublic(false);
      as3ClientArtifact.addArtifact(clientArtifact);
      enunciate.addArtifact(clientArtifact);
    }
    enunciate.addArtifact(as3ClientArtifact);
  }
}",0.999129299085764
177176,"@Override protected void doCompile() throws EnunciateException, IOException {
  Enunciate enunciate=getEnunciate();
  if (isSwcDownloadable() || this.flexApps.size() > 0) {
    doFlexCompile();
    if (this.flexApps.size() > 0) {
      enunciate.addArtifact(new FileArtifact(getName(),""String_Node_Str"",getSwfCompileDir()));
    }
  }
}","@Override protected void doCompile() throws EnunciateException, IOException {
  Enunciate enunciate=getEnunciate();
  if (isSwcDownloadable() || this.flexApps.size() > 0 || isAsSourcesDownloadable()) {
    doFlexCompile();
    if (this.flexApps.size() > 0) {
      enunciate.addArtifact(new FileArtifact(getName(),""String_Node_Str"",getSwfCompileDir()));
    }
  }
}",0.9586305278174037
177177,"@Override public ValidationResult validateSimpleType(SimpleTypeDefinition simpleType){
  ValidationResult result=super.validateSimpleType(simpleType);
  if (!isAMFTransient(simpleType)) {
    if (!hasDefaultConstructor(simpleType)) {
      result.addError(simpleType,""String_Node_Str"");
    }
  }
  return result;
}","@Override public ValidationResult validateSimpleType(SimpleTypeDefinition simpleType){
  ValidationResult result=super.validateSimpleType(simpleType);
  if (!isAMFTransient(simpleType)) {
    if (!hasDefaultConstructor(simpleType)) {
      result.addError(simpleType,""String_Node_Str"");
    }
    if (""String_Node_Str"".equals(simpleType.getSimpleName())) {
      result.addError(simpleType,""String_Node_Str"");
    }
  }
  return result;
}",0.8366533864541833
177178,"@Override public ValidationResult validateComplexType(ComplexTypeDefinition complexType){
  ValidationResult result=super.validateComplexType(complexType);
  if (!isAMFTransient(complexType)) {
    if (!hasDefaultConstructor(complexType)) {
      result.addError(complexType,""String_Node_Str"");
    }
    for (    Attribute attribute : complexType.getAttributes()) {
      if (!isAMFTransient(attribute)) {
        if (attribute.getDelegate() instanceof FieldDeclaration) {
          result.addError(attribute,""String_Node_Str"");
        }
        if (!isSupported(attribute.getAccessorType())) {
          result.addError(attribute,""String_Node_Str"" + attribute.getAccessorType() + ""String_Node_Str"");
        }
      }
    }
    for (    Element element : complexType.getElements()) {
      if (!isAMFTransient(element)) {
        if (element.getDelegate() instanceof FieldDeclaration) {
          result.addError(element,""String_Node_Str"");
        }
        if (!isSupported(element.getAccessorType())) {
          result.addError(element,""String_Node_Str"" + element.getAccessorType() + ""String_Node_Str"");
        }
      }
    }
    Value value=complexType.getValue();
    if (value != null) {
      if (!isAMFTransient(value)) {
        if (value.getDelegate() instanceof FieldDeclaration) {
          result.addError(value,""String_Node_Str"");
        }
        if (!isSupported(value.getAccessorType())) {
          result.addError(value,""String_Node_Str"" + value.getAccessorType() + ""String_Node_Str"");
        }
      }
    }
  }
  return result;
}","@Override public ValidationResult validateComplexType(ComplexTypeDefinition complexType){
  ValidationResult result=super.validateComplexType(complexType);
  if (!isAMFTransient(complexType)) {
    if (!hasDefaultConstructor(complexType)) {
      result.addError(complexType,""String_Node_Str"");
    }
    if (""String_Node_Str"".equals(complexType.getSimpleName())) {
      result.addError(complexType,""String_Node_Str"");
    }
    for (    Attribute attribute : complexType.getAttributes()) {
      if (!isAMFTransient(attribute)) {
        if (attribute.getDelegate() instanceof FieldDeclaration) {
          result.addError(attribute,""String_Node_Str"");
        }
        if (!isSupported(attribute.getAccessorType())) {
          result.addError(attribute,""String_Node_Str"" + attribute.getAccessorType() + ""String_Node_Str"");
        }
      }
    }
    for (    Element element : complexType.getElements()) {
      if (!isAMFTransient(element)) {
        if (element.getDelegate() instanceof FieldDeclaration) {
          result.addError(element,""String_Node_Str"");
        }
        if (!isSupported(element.getAccessorType())) {
          result.addError(element,""String_Node_Str"" + element.getAccessorType() + ""String_Node_Str"");
        }
      }
    }
    Value value=complexType.getValue();
    if (value != null) {
      if (!isAMFTransient(value)) {
        if (value.getDelegate() instanceof FieldDeclaration) {
          result.addError(value,""String_Node_Str"");
        }
        if (!isSupported(value.getAccessorType())) {
          result.addError(value,""String_Node_Str"" + value.getAccessorType() + ""String_Node_Str"");
        }
      }
    }
  }
  return result;
}",0.9614316568960196
177179,"@Override public void doFreemarkerGenerate() throws IOException, TemplateException, EnunciateException {
  File serverGenerateDir=getServerSideGenerateDir();
  File clientGenerateDir=getClientSideGenerateDir();
  File xmlGenerateDir=getXMLGenerateDir();
  Enunciate enunciate=getEnunciate();
  if (!enunciate.isUpToDateWithSources(serverGenerateDir) || !enunciate.isUpToDateWithSources(clientGenerateDir) || !enunciate.isUpToDateWithSources(xmlGenerateDir)) {
    URL amfEndpointTemplate=getTemplateURL(""String_Node_Str"");
    URL amfTypeTemplate=getTemplateURL(""String_Node_Str"");
    URL amfTypeMapperTemplate=getTemplateURL(""String_Node_Str"");
    EnunciateFreemarkerModel model=getModel();
    model.setFileOutputDirectory(serverGenerateDir);
    TreeSet<String> packages=new TreeSet<String>(new Comparator<String>(){
      public int compare(      String package1,      String package2){
        int comparison=package1.length() - package2.length();
        if (comparison == 0) {
          return package1.compareTo(package2);
        }
        return comparison;
      }
    }
);
    HashMap<String,String> as3Aliases=new HashMap<String,String>();
    for (    SchemaInfo schemaInfo : model.getNamespacesToSchemas().values()) {
      for (      TypeDefinition typeDefinition : schemaInfo.getTypeDefinitions()) {
        if (!isAMFTransient(typeDefinition)) {
          as3Aliases.put(typeDefinition.getQualifiedName(),typeDefinition.getSimpleName());
          packages.add(typeDefinition.getPackage().getQualifiedName());
        }
      }
    }
    LinkedHashMap<String,String> amfTypePackageConversions=new LinkedHashMap<String,String>();
    for (    String pckg : packages) {
      amfTypePackageConversions.put(pckg,pckg + ""String_Node_Str"");
    }
    info(""String_Node_Str"");
    AMFClassnameForMethod amfClassnameForMethod=new AMFClassnameForMethod(amfTypePackageConversions);
    model.put(""String_Node_Str"",new SimpleNameWithParamsMethod(amfClassnameForMethod));
    model.put(""String_Node_Str"",amfClassnameForMethod);
    for (    SchemaInfo schemaInfo : model.getNamespacesToSchemas().values()) {
      for (      TypeDefinition typeDefinition : schemaInfo.getTypeDefinitions()) {
        if (!isAMFTransient(typeDefinition)) {
          model.put(""String_Node_Str"",typeDefinition);
          processTemplate(amfTypeTemplate,model);
          processTemplate(amfTypeMapperTemplate,model);
        }
      }
    }
    info(""String_Node_Str"");
    for (    WsdlInfo wsdlInfo : model.getNamespacesToWSDLs().values()) {
      for (      EndpointInterface ei : wsdlInfo.getEndpointInterfaces()) {
        if (!isAMFTransient(ei)) {
          model.put(""String_Node_Str"",ei);
          processTemplate(amfEndpointTemplate,model);
        }
      }
    }
    URL endpointTemplate=getTemplateURL(""String_Node_Str"");
    URL typeTemplate=getTemplateURL(""String_Node_Str"");
    URL enumTypeTemplate=getTemplateURL(""String_Node_Str"");
    model.setFileOutputDirectory(clientGenerateDir);
    HashMap<String,String> conversions=new HashMap<String,String>();
    model.put(""String_Node_Str"",new ClientPackageForMethod(conversions));
    UnqualifiedClassnameForMethod classnameFor=new UnqualifiedClassnameForMethod(conversions);
    model.put(""String_Node_Str"",classnameFor);
    model.put(""String_Node_Str"",new ComponentTypeForMethod(conversions));
    model.put(""String_Node_Str"",new ForEachAMFImportTransform(null,classnameFor));
    model.put(""String_Node_Str"",as3Aliases);
    info(""String_Node_Str"");
    for (    SchemaInfo schemaInfo : model.getNamespacesToSchemas().values()) {
      for (      TypeDefinition typeDefinition : schemaInfo.getTypeDefinitions()) {
        if (!isAMFTransient(typeDefinition)) {
          model.put(""String_Node_Str"",typeDefinition);
          URL template=typeDefinition.isEnum() ? enumTypeTemplate : typeTemplate;
          processTemplate(template,model);
        }
      }
    }
    for (    WsdlInfo wsdlInfo : model.getNamespacesToWSDLs().values()) {
      for (      EndpointInterface ei : wsdlInfo.getEndpointInterfaces()) {
        if (!isAMFTransient(ei)) {
          model.put(""String_Node_Str"",ei);
          processTemplate(endpointTemplate,model);
        }
      }
    }
    URL servicesConfigTemplate=getTemplateURL(""String_Node_Str"");
    model.setFileOutputDirectory(xmlGenerateDir);
    info(""String_Node_Str"");
    processTemplate(servicesConfigTemplate,model);
  }
 else {
    info(""String_Node_Str"");
  }
  this.enunciate.addArtifact(new FileArtifact(getName(),""String_Node_Str"",clientGenerateDir));
  this.enunciate.addArtifact(new FileArtifact(getName(),""String_Node_Str"",serverGenerateDir));
  this.enunciate.addAdditionalSourceRoot(serverGenerateDir);
}","@Override public void doFreemarkerGenerate() throws IOException, TemplateException, EnunciateException {
  File serverGenerateDir=getServerSideGenerateDir();
  File clientGenerateDir=getClientSideGenerateDir();
  File xmlGenerateDir=getXMLGenerateDir();
  Enunciate enunciate=getEnunciate();
  if (!enunciate.isUpToDateWithSources(serverGenerateDir) || !enunciate.isUpToDateWithSources(clientGenerateDir) || !enunciate.isUpToDateWithSources(xmlGenerateDir)) {
    URL amfEndpointTemplate=getTemplateURL(""String_Node_Str"");
    URL amfTypeTemplate=getTemplateURL(""String_Node_Str"");
    URL amfTypeMapperTemplate=getTemplateURL(""String_Node_Str"");
    EnunciateFreemarkerModel model=getModel();
    model.setFileOutputDirectory(serverGenerateDir);
    TreeSet<String> packages=new TreeSet<String>(new Comparator<String>(){
      public int compare(      String package1,      String package2){
        int comparison=package1.length() - package2.length();
        if (comparison == 0) {
          return package1.compareTo(package2);
        }
        return comparison;
      }
    }
);
    HashMap<String,String> as3Aliases=new HashMap<String,String>();
    for (    SchemaInfo schemaInfo : model.getNamespacesToSchemas().values()) {
      for (      TypeDefinition typeDefinition : schemaInfo.getTypeDefinitions()) {
        if (!isAMFTransient(typeDefinition)) {
          as3Aliases.put(typeDefinition.getQualifiedName(),typeDefinition.getSimpleName());
          packages.add(typeDefinition.getPackage().getQualifiedName());
        }
      }
    }
    LinkedHashMap<String,String> amfTypePackageConversions=new LinkedHashMap<String,String>();
    for (    String pckg : packages) {
      amfTypePackageConversions.put(pckg,pckg + ""String_Node_Str"");
    }
    info(""String_Node_Str"");
    AMFClassnameForMethod amfClassnameForMethod=new AMFClassnameForMethod(amfTypePackageConversions);
    model.put(""String_Node_Str"",new SimpleNameWithParamsMethod(amfClassnameForMethod));
    model.put(""String_Node_Str"",amfClassnameForMethod);
    for (    SchemaInfo schemaInfo : model.getNamespacesToSchemas().values()) {
      for (      TypeDefinition typeDefinition : schemaInfo.getTypeDefinitions()) {
        if (!isAMFTransient(typeDefinition)) {
          model.put(""String_Node_Str"",typeDefinition);
          processTemplate(amfTypeTemplate,model);
          processTemplate(amfTypeMapperTemplate,model);
        }
      }
    }
    info(""String_Node_Str"");
    for (    WsdlInfo wsdlInfo : model.getNamespacesToWSDLs().values()) {
      for (      EndpointInterface ei : wsdlInfo.getEndpointInterfaces()) {
        if (!isAMFTransient(ei)) {
          model.put(""String_Node_Str"",ei);
          processTemplate(amfEndpointTemplate,model);
        }
      }
    }
    URL endpointTemplate=getTemplateURL(""String_Node_Str"");
    URL typeTemplate=getTemplateURL(""String_Node_Str"");
    URL enumTypeTemplate=getTemplateURL(""String_Node_Str"");
    model.setFileOutputDirectory(clientGenerateDir);
    HashMap<String,String> conversions=new HashMap<String,String>();
    model.put(""String_Node_Str"",new ClientPackageForMethod(conversions));
    UnqualifiedClassnameForMethod classnameFor=new UnqualifiedClassnameForMethod(conversions);
    model.put(""String_Node_Str"",classnameFor);
    model.put(""String_Node_Str"",new ComponentTypeForMethod(conversions));
    model.put(""String_Node_Str"",amfClassnameForMethod);
    model.put(""String_Node_Str"",new ComponentTypeForMethod(amfTypePackageConversions));
    model.put(""String_Node_Str"",new ForEachAS3ImportTransform(null,classnameFor));
    model.put(""String_Node_Str"",new AccessorOverridesAnotherMethod());
    model.put(""String_Node_Str"",as3Aliases);
    info(""String_Node_Str"");
    for (    SchemaInfo schemaInfo : model.getNamespacesToSchemas().values()) {
      for (      TypeDefinition typeDefinition : schemaInfo.getTypeDefinitions()) {
        if (!isAMFTransient(typeDefinition)) {
          model.put(""String_Node_Str"",typeDefinition);
          URL template=typeDefinition.isEnum() ? enumTypeTemplate : typeTemplate;
          processTemplate(template,model);
        }
      }
    }
    for (    WsdlInfo wsdlInfo : model.getNamespacesToWSDLs().values()) {
      for (      EndpointInterface ei : wsdlInfo.getEndpointInterfaces()) {
        if (!isAMFTransient(ei)) {
          model.put(""String_Node_Str"",ei);
          processTemplate(endpointTemplate,model);
        }
      }
    }
    URL servicesConfigTemplate=getTemplateURL(""String_Node_Str"");
    model.setFileOutputDirectory(xmlGenerateDir);
    info(""String_Node_Str"");
    processTemplate(servicesConfigTemplate,model);
  }
 else {
    info(""String_Node_Str"");
  }
  this.enunciate.addArtifact(new FileArtifact(getName(),""String_Node_Str"",clientGenerateDir));
  this.enunciate.addArtifact(new FileArtifact(getName(),""String_Node_Str"",serverGenerateDir));
  this.enunciate.addAdditionalSourceRoot(serverGenerateDir);
}",0.7318638104108455
177180,"/** 
 * Actually match the given <code>path</code> against the given <code>pattern</code>.
 * @param pattern the pattern to match against
 * @param path the path String to test
 * @param fullMatch whether a full pattern match is required(else a pattern match as far as the given base path goes is sufficient)
 * @return <code>true</code> if the supplied <code>path</code> matched,<code>false</code> if it didn't
 */
protected boolean doMatch(String pattern,String path,boolean fullMatch){
  if (path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {
    return false;
  }
  String[] pattDirs=pattern.split(this.pathSeparator);
  String[] pathDirs=path.split(this.pathSeparator);
  int pattIdxStart=0;
  int pattIdxEnd=pattDirs.length - 1;
  int pathIdxStart=0;
  int pathIdxEnd=pathDirs.length - 1;
  while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {
    String patDir=pattDirs[pattIdxStart];
    if (""String_Node_Str"".equals(patDir)) {
      break;
    }
    if (!matchStrings(patDir,pathDirs[pathIdxStart])) {
      return false;
    }
    pattIdxStart++;
    pathIdxStart++;
  }
  if (pathIdxStart > pathIdxEnd) {
    if (pattIdxStart > pattIdxEnd) {
      return (pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) : !path.endsWith(this.pathSeparator));
    }
    if (!fullMatch) {
      return true;
    }
    if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals(""String_Node_Str"") && path.endsWith(this.pathSeparator)) {
      return true;
    }
    for (int i=pattIdxStart; i <= pattIdxEnd; i++) {
      if (!pattDirs[i].equals(""String_Node_Str"")) {
        return false;
      }
    }
    return true;
  }
 else   if (pattIdxStart > pattIdxEnd) {
    return false;
  }
 else   if (!fullMatch && ""String_Node_Str"".equals(pattDirs[pattIdxStart])) {
    return true;
  }
  while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {
    String patDir=pattDirs[pattIdxEnd];
    if (patDir.equals(""String_Node_Str"")) {
      break;
    }
    if (!matchStrings(patDir,pathDirs[pathIdxEnd])) {
      return false;
    }
    pattIdxEnd--;
    pathIdxEnd--;
  }
  if (pathIdxStart > pathIdxEnd) {
    for (int i=pattIdxStart; i <= pattIdxEnd; i++) {
      if (!pattDirs[i].equals(""String_Node_Str"")) {
        return false;
      }
    }
    return true;
  }
  while (pattIdxStart != pattIdxEnd && pathIdxStart <= pathIdxEnd) {
    int patIdxTmp=-1;
    for (int i=pattIdxStart + 1; i <= pattIdxEnd; i++) {
      if (pattDirs[i].equals(""String_Node_Str"")) {
        patIdxTmp=i;
        break;
      }
    }
    if (patIdxTmp == pattIdxStart + 1) {
      pattIdxStart++;
      continue;
    }
    int patLength=(patIdxTmp - pattIdxStart - 1);
    int strLength=(pathIdxEnd - pathIdxStart + 1);
    int foundIdx=-1;
    strLoop:     for (int i=0; i <= strLength - patLength; i++) {
      for (int j=0; j < patLength; j++) {
        String subPat=(String)pattDirs[pattIdxStart + j + 1];
        String subStr=(String)pathDirs[pathIdxStart + i + j];
        if (!matchStrings(subPat,subStr)) {
          continue strLoop;
        }
      }
      foundIdx=pathIdxStart + i;
      break;
    }
    if (foundIdx == -1) {
      return false;
    }
    pattIdxStart=patIdxTmp;
    pathIdxStart=foundIdx + patLength;
  }
  for (int i=pattIdxStart; i <= pattIdxEnd; i++) {
    if (!pattDirs[i].equals(""String_Node_Str"")) {
      return false;
    }
  }
  return true;
}","/** 
 * Actually match the given <code>path</code> against the given <code>pattern</code>.
 * @param pattern the pattern to match against
 * @param path the path String to test
 * @param fullMatch whether a full pattern match is required(else a pattern match as far as the given base path goes is sufficient)
 * @return <code>true</code> if the supplied <code>path</code> matched,<code>false</code> if it didn't
 */
protected boolean doMatch(String pattern,String path,boolean fullMatch){
  if (path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {
    return false;
  }
  String pathSeparatorSplitPattern=""String_Node_Str"".equals(this.pathSeparator) ? ""String_Node_Str"" : this.pathSeparator;
  String[] pattDirs=pattern.split(pathSeparatorSplitPattern);
  String[] pathDirs=path.split(pathSeparatorSplitPattern);
  int pattIdxStart=0;
  int pattIdxEnd=pattDirs.length - 1;
  int pathIdxStart=0;
  int pathIdxEnd=pathDirs.length - 1;
  while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {
    String patDir=pattDirs[pattIdxStart];
    if (""String_Node_Str"".equals(patDir)) {
      break;
    }
    if (!matchStrings(patDir,pathDirs[pathIdxStart])) {
      return false;
    }
    pattIdxStart++;
    pathIdxStart++;
  }
  if (pathIdxStart > pathIdxEnd) {
    if (pattIdxStart > pattIdxEnd) {
      return (pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) : !path.endsWith(this.pathSeparator));
    }
    if (!fullMatch) {
      return true;
    }
    if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals(""String_Node_Str"") && path.endsWith(this.pathSeparator)) {
      return true;
    }
    for (int i=pattIdxStart; i <= pattIdxEnd; i++) {
      if (!pattDirs[i].equals(""String_Node_Str"")) {
        return false;
      }
    }
    return true;
  }
 else   if (pattIdxStart > pattIdxEnd) {
    return false;
  }
 else   if (!fullMatch && ""String_Node_Str"".equals(pattDirs[pattIdxStart])) {
    return true;
  }
  while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {
    String patDir=pattDirs[pattIdxEnd];
    if (patDir.equals(""String_Node_Str"")) {
      break;
    }
    if (!matchStrings(patDir,pathDirs[pathIdxEnd])) {
      return false;
    }
    pattIdxEnd--;
    pathIdxEnd--;
  }
  if (pathIdxStart > pathIdxEnd) {
    for (int i=pattIdxStart; i <= pattIdxEnd; i++) {
      if (!pattDirs[i].equals(""String_Node_Str"")) {
        return false;
      }
    }
    return true;
  }
  while (pattIdxStart != pattIdxEnd && pathIdxStart <= pathIdxEnd) {
    int patIdxTmp=-1;
    for (int i=pattIdxStart + 1; i <= pattIdxEnd; i++) {
      if (pattDirs[i].equals(""String_Node_Str"")) {
        patIdxTmp=i;
        break;
      }
    }
    if (patIdxTmp == pattIdxStart + 1) {
      pattIdxStart++;
      continue;
    }
    int patLength=(patIdxTmp - pattIdxStart - 1);
    int strLength=(pathIdxEnd - pathIdxStart + 1);
    int foundIdx=-1;
    strLoop:     for (int i=0; i <= strLength - patLength; i++) {
      for (int j=0; j < patLength; j++) {
        String subPat=(String)pattDirs[pattIdxStart + j + 1];
        String subStr=(String)pathDirs[pathIdxStart + i + j];
        if (!matchStrings(subPat,subStr)) {
          continue strLoop;
        }
      }
      foundIdx=pathIdxStart + i;
      break;
    }
    if (foundIdx == -1) {
      return false;
    }
    pattIdxStart=patIdxTmp;
    pathIdxStart=foundIdx + patLength;
  }
  for (int i=pattIdxStart; i <= pattIdxEnd; i++) {
    if (!pattDirs[i].equals(""String_Node_Str"")) {
      return false;
    }
  }
  return true;
}",0.9703619264747791
177181,"public Object exec(List list) throws TemplateModelException {
  if (list.size() < 1) {
    throw new TemplateModelException(""String_Node_Str"");
  }
  Object object=BeansWrapper.getDefaultInstance().unwrap((TemplateModel)list.get(0));
  Collection<RESTResource> resourceList;
  if (object instanceof Collection) {
    resourceList=(Collection<RESTResource>)object;
  }
 else   if (object instanceof RESTResource) {
    resourceList=Arrays.asList((RESTResource)object);
  }
 else {
    throw new TemplateModelException(""String_Node_Str"" + object.getClass().getName());
  }
  TreeMap<String,SupportedContentTypeAtSubcontext> supported=new TreeMap<String,SupportedContentTypeAtSubcontext>();
  for (  RESTResource resource : resourceList) {
    for (    SupportedContentType contentType : resource.getSupportedContentTypes()) {
      SupportedContentTypeAtSubcontext type=supported.get(contentType.getType());
      if (type == null) {
        type=new SupportedContentTypeAtSubcontext();
        type.setType(contentType.getType());
        supported.put(contentType.getType(),type);
      }
      type.setProduceable(type.isProduceable() || contentType.isProduceable());
      type.setConsumable(type.isConsumable() || contentType.isConsumable());
      if (contentType.isProduceable()) {
        Map<String,String> subcontextMap=(Map<String,String>)resource.getMetaData().get(""String_Node_Str"");
        if (subcontextMap != null) {
          type.setSubcontext(subcontextMap.get(contentType.getType()));
        }
      }
    }
  }
  return supported.values();
}","public Object exec(List list) throws TemplateModelException {
  if (list.size() < 1) {
    throw new TemplateModelException(""String_Node_Str"");
  }
  Object object=BeansWrapper.getDefaultInstance().unwrap((TemplateModel)list.get(0));
  Collection<RESTResource> resourceList;
  if (object instanceof Collection) {
    resourceList=(Collection<RESTResource>)object;
  }
 else   if (object instanceof RESTResource) {
    resourceList=Arrays.asList((RESTResource)object);
  }
 else {
    throw new TemplateModelException(""String_Node_Str"" + object.getClass().getName());
  }
  TreeMap<String,SupportedContentTypeAtSubcontext> supported=new TreeMap<String,SupportedContentTypeAtSubcontext>();
  for (  RESTResource resource : resourceList) {
    for (    SupportedContentType contentType : resource.getSupportedContentTypes()) {
      SupportedContentTypeAtSubcontext type=supported.get(contentType.getType());
      if (type == null) {
        type=new SupportedContentTypeAtSubcontext();
        type.setType(contentType.getType());
        supported.put(contentType.getType(),type);
      }
      type.setProduceable(type.isProduceable() || contentType.isProduceable());
      type.setConsumable(type.isConsumable() || contentType.isConsumable());
      if (contentType.isProduceable()) {
        Map<String,Set<String>> subcontextMap=(Map<String,Set<String>>)resource.getMetaData().get(""String_Node_Str"");
        if (subcontextMap != null) {
          type.setSubcontexts(subcontextMap.get(contentType.getType()));
        }
      }
    }
  }
  return supported.values();
}",0.9933014354066986
177182,"/** 
 * Adds all files in specified directories to a list.
 * @param list The list.
 * @param dirs The directories.
 */
protected void buildFileList(List<File> list,File... dirs){
  for (  File dir : dirs) {
    for (    File file : dir.listFiles()) {
      list.add(file);
      if (file.isDirectory()) {
        buildFileList(list,file);
      }
    }
  }
}","/** 
 * Adds all files in specified directories to a list.
 * @param list The list.
 * @param dirs The directories.
 */
protected void buildFileList(List<File> list,File... dirs){
  for (  File dir : dirs) {
    for (    File file : dir.listFiles()) {
      if (file.isDirectory()) {
        buildFileList(list,file);
      }
 else {
        list.add(file);
      }
    }
  }
}",0.8885869565217391
177183,"/** 
 * Whether a given destination file is newer than all the specified source files. If the destination file is a directory its timestamp is the timestamp of the earliest-modified file.
 * @param sourceFiles The specified source files.
 * @param destFile The destination file.
 * @return Whether the destination file is up-to-date.
 */
protected boolean isUpToDate(List<File> sourceFiles,File destFile){
  List<File> destFiles;
  if ((sourceFiles == null) || (sourceFiles.isEmpty())) {
    return true;
  }
 else   if ((destFile == null) || (!destFile.exists())) {
    return false;
  }
 else   if (!destFile.isDirectory()) {
    destFiles=Arrays.asList(destFile);
  }
 else {
    destFiles=new ArrayList<File>();
    buildFileList(destFiles,destFile);
  }
  return !destFiles.isEmpty() && getLatestTimestamp(sourceFiles) < getEarliestTimestamp(destFiles);
}","/** 
 * Whether a given destination file is newer than all the specified source files. If the destination file is a directory its timestamp is the timestamp of the earliest-modified file.
 * @param sourceFiles The specified source files.
 * @param destFile The destination file.
 * @return Whether the destination file is up-to-date.
 */
protected boolean isUpToDate(List<File> sourceFiles,File destFile){
  List<File> destFiles;
  if ((sourceFiles == null) || (sourceFiles.isEmpty())) {
    debug(""String_Node_Str"",destFile);
    return true;
  }
 else   if ((destFile == null) || (!destFile.exists())) {
    debug(""String_Node_Str"",destFile);
    return false;
  }
 else   if (!destFile.isDirectory()) {
    destFiles=Arrays.asList(destFile);
  }
 else {
    destFiles=new ArrayList<File>();
    buildFileList(destFiles,destFile);
  }
  if (destFiles.isEmpty()) {
    debug(""String_Node_Str"");
    return false;
  }
 else {
    File youngestSource=getYoungest(sourceFiles);
    File oldestDest=getOldest(destFiles);
    if (youngestSource.lastModified() < oldestDest.lastModified()) {
      debug(""String_Node_Str"",destFile,oldestDest,youngestSource);
      return true;
    }
 else {
      debug(""String_Node_Str"",destFile,oldestDest,youngestSource);
      return false;
    }
  }
}",0.7319347319347319
177184,"/** 
 * Add an additional source root for Enunciate to process.
 * @param root The source root directory.
 */
public void addAdditionalSourceRoot(File root){
  this.additionalSourceRoots.add(root);
}","/** 
 * Add an additional source root for Enunciate to process.
 * @param root The source root directory.
 */
public void addAdditionalSourceRoot(File root){
  info(""String_Node_Str"" + root + ""String_Node_Str"");
  this.additionalSourceRoots.add(root);
}",0.7300884955752213
177185,"/** 
 * The generate logic builds the XML documentation structure for the enunciated API.
 */
public void doFreemarkerGenerate() throws EnunciateException, IOException, TemplateException {
  if (!getEnunciate().isUpToDateWithSources(getGenerateDir())) {
    EnunciateFreemarkerModel model=getModel();
    if (this.splashPackage != null) {
      PackageDeclaration packageDeclaration=Context.getCurrentEnvironment().getPackage(this.splashPackage);
      if (packageDeclaration != null) {
        info(""String_Node_Str"",this.splashPackage);
        model.setVariable(""String_Node_Str"",new DecoratedPackageDeclaration(packageDeclaration).getJavaDoc());
      }
 else {
        warn(""String_Node_Str"",this.splashPackage);
      }
    }
    if (this.copyright != null) {
      debug(""String_Node_Str"",this.copyright);
      model.setVariable(""String_Node_Str"",this.copyright);
    }
    if (this.title != null) {
      debug(""String_Node_Str"",this.title);
      model.setVariable(""String_Node_Str"",this.title);
    }
    model.setVariable(""String_Node_Str"",model.getBaseDeploymentAddress());
    model.setVariable(""String_Node_Str"",new ResourcePathMethod());
    processTemplate(getDocsTemplateURL(),model);
  }
 else {
    info(""String_Node_Str"");
  }
}","/** 
 * The generate logic builds the XML documentation structure for the enunciated API.
 */
public void doFreemarkerGenerate() throws EnunciateException, IOException, TemplateException {
  if (!getEnunciate().isUpToDateWithSources(getGenerateDir())) {
    EnunciateFreemarkerModel model=getModel();
    if (this.splashPackage != null) {
      PackageDeclaration packageDeclaration=Context.getCurrentEnvironment().getPackage(this.splashPackage);
      if (packageDeclaration != null) {
        info(""String_Node_Str"",this.splashPackage);
        model.setVariable(""String_Node_Str"",new DecoratedPackageDeclaration(packageDeclaration).getJavaDoc());
      }
 else {
        warn(""String_Node_Str"",this.splashPackage);
      }
    }
    if (this.copyright != null) {
      debug(""String_Node_Str"",this.copyright);
      model.setVariable(""String_Node_Str"",this.copyright);
    }
    if (this.title != null) {
      debug(""String_Node_Str"",this.title);
      model.setVariable(""String_Node_Str"",this.title);
    }
    model.setVariable(""String_Node_Str"",model.getBaseDeploymentAddress());
    model.setVariable(""String_Node_Str"",new ResourcePathMethod());
    model.setVariable(""String_Node_Str"",new UniqueContentTypesMethod());
    processTemplate(getDocsTemplateURL(),model);
  }
 else {
    info(""String_Node_Str"");
  }
}",0.971606378840918
177186,"/** 
 * Get the GWT shell script file for the specified module, app.
 * @param appName The app name.
 * @param moduleName The module name.
 * @return The shell script file.
 */
public File getShellScriptFile(String appName,String moduleName){
  StringBuilder filename=new StringBuilder();
  if ((appName != null) && (appName.trim().length() > 0)) {
    filename.append(appName).append('-');
  }
  String moduleId=getModuleId(moduleName);
  filename.append(moduleId).append(""String_Node_Str"");
  File scriptDir=getGwtScriptDir();
  if (!scriptDir.exists()) {
    scriptDir.mkdirs();
  }
  return new File(scriptDir,filename.toString());
}","/** 
 * Get the GWT shell script file for the specified module, app.
 * @param appName    The app name.
 * @param moduleName The module name.
 * @return The shell script file.
 */
public File getShellScriptFile(String appName,String moduleName){
  StringBuilder filename=new StringBuilder();
  if ((appName != null) && (appName.trim().length() > 0)) {
    filename.append(appName).append('-');
  }
  String moduleId=getModuleId(moduleName);
  filename.append(moduleId).append(""String_Node_Str"");
  File scriptDir=getGwtScriptDir();
  if (!scriptDir.exists()) {
    scriptDir.mkdirs();
  }
  return new File(scriptDir,filename.toString());
}",0.9976507439310884
177187,"/** 
 * Invokes GWTCompile on the apps specified in the configuration file.
 */
protected void doGWTCompile() throws EnunciateException, IOException {
  if (this.gwtHome == null) {
    throw new EnunciateException(""String_Node_Str"");
  }
  File gwtHomeDir=new File(this.gwtHome);
  if (!gwtHomeDir.exists()) {
    throw new EnunciateException(""String_Node_Str"" + gwtHomeDir.getAbsolutePath() + ""String_Node_Str"");
  }
  File gwtUserJar=new File(gwtHomeDir,""String_Node_Str"");
  if (!gwtUserJar.exists()) {
    warn(""String_Node_Str"",gwtUserJar.getAbsolutePath());
  }
  File linuxDevJar=new File(gwtHomeDir,""String_Node_Str"");
  File gwtDevJar=linuxDevJar;
  if (!gwtDevJar.exists()) {
    File macDevJar=new File(gwtHomeDir,""String_Node_Str"");
    gwtDevJar=macDevJar;
    if (!gwtDevJar.exists()) {
      File windowsDevJar=new File(gwtHomeDir,""String_Node_Str"");
      gwtDevJar=windowsDevJar;
      if (!gwtDevJar.exists()) {
        throw new EnunciateException(String.format(""String_Node_Str"",linuxDevJar.getAbsolutePath(),macDevJar.getAbsolutePath(),windowsDevJar.getAbsolutePath()));
      }
    }
  }
  boolean windows=false;
  File javaBinDir=new File(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  File javaExecutable=new File(javaBinDir,""String_Node_Str"");
  if (!javaExecutable.exists()) {
    javaExecutable=new File(javaBinDir,""String_Node_Str"");
    windows=true;
  }
  String javaCommand=javaExecutable.getAbsolutePath();
  if (!javaExecutable.exists()) {
    warn(""String_Node_Str"",javaBinDir.getAbsolutePath());
    javaCommand=""String_Node_Str"";
  }
  StringBuilder classpath=new StringBuilder(enunciate.getEnunciateClasspath());
  classpath.append(File.pathSeparatorChar).append(getClientSideGenerateDir().getAbsolutePath());
  classpath.append(File.pathSeparatorChar).append(gwtUserJar.getAbsolutePath());
  classpath.append(File.pathSeparatorChar).append(gwtDevJar.getAbsolutePath());
  List<String> jvmargs=getGwtCompileJVMArgs();
  String[] commandArray=new String[jvmargs.size() + 11];
  int argIndex=0;
  commandArray[argIndex++]=javaCommand;
  while (argIndex - 1 < jvmargs.size()) {
    String arg=jvmargs.get(argIndex - 1);
    commandArray[argIndex++]=arg;
  }
  commandArray[argIndex++]=""String_Node_Str"";
  int classpathArgIndex=argIndex;
  commandArray[argIndex++]=null;
  int compileClassIndex=argIndex;
  commandArray[argIndex++]=getGwtCompilerClass();
  commandArray[argIndex++]=""String_Node_Str"";
  commandArray[argIndex++]=getGwtGenDir().getAbsolutePath();
  commandArray[argIndex++]=""String_Node_Str"";
  int styleArgIndex=argIndex;
  commandArray[argIndex++]=null;
  commandArray[argIndex++]=""String_Node_Str"";
  int outArgIndex=argIndex;
  commandArray[argIndex++]=null;
  int moduleNameIndex=argIndex;
  commandArray[argIndex]=null;
  for (  GWTApp gwtApp : gwtApps) {
    String appName=gwtApp.getName();
    File appSource=enunciate.resolvePath(gwtApp.getSrcDir());
    String style=gwtApp.getJavascriptStyle().toString();
    File appDir=getAppGenerateDir(appName);
    String out=appDir.getAbsolutePath();
    commandArray[classpathArgIndex]=classpath.toString() + File.pathSeparatorChar + appSource.getAbsolutePath();
    commandArray[styleArgIndex]=style;
    commandArray[outArgIndex]=out;
    for (    GWTAppModule appModule : gwtApp.getModules()) {
      String moduleName=appModule.getName();
      String outputPath=appModule.getOutputPath();
      File moduleOutputDir=appDir;
      if ((outputPath != null) && (!""String_Node_Str"".equals(outputPath.trim()))) {
        moduleOutputDir=new File(appDir,outputPath);
      }
      boolean upToDate=enunciate.isUpToDate(getClientSideGenerateDir(),moduleOutputDir) && enunciate.isUpToDate(appSource,moduleOutputDir);
      if (!upToDate) {
        commandArray[moduleNameIndex]=moduleName;
        info(""String_Node_Str"",moduleName);
        if (enunciate.isDebug()) {
          StringBuilder command=new StringBuilder();
          for (          String commandPiece : commandArray) {
            command.append(' ').append(commandPiece);
          }
          debug(""String_Node_Str"",moduleName,command);
        }
        ProcessBuilder processBuilder=new ProcessBuilder(commandArray);
        processBuilder.directory(getGenerateDir());
        processBuilder.redirectErrorStream(true);
        Process process=processBuilder.start();
        BufferedReader procReader=new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line=procReader.readLine();
        while (line != null) {
          info(line);
          line=procReader.readLine();
        }
        int procCode;
        try {
          procCode=process.waitFor();
        }
 catch (        InterruptedException e1) {
          throw new EnunciateException(""String_Node_Str"");
        }
        if (procCode != 0) {
          throw new EnunciateException(""String_Node_Str"" + moduleName);
        }
        File moduleGenDir=new File(appDir,moduleName);
        if (!moduleOutputDir.equals(moduleGenDir)) {
          moduleOutputDir.mkdirs();
          enunciate.copyDir(moduleGenDir,moduleOutputDir);
          deleteDir(moduleGenDir);
        }
        StringBuilder shellCommand=new StringBuilder();
        StringBuilder noServerShellCommand=new StringBuilder();
        for (int i=0; i < commandArray.length; i++) {
          String commandArg=commandArray[i];
          if (i == compileClassIndex) {
            commandArg=""String_Node_Str"";
          }
 else           if (i == moduleNameIndex) {
            noServerShellCommand.append(""String_Node_Str"");
            shellCommand.append(windows ? ""String_Node_Str"" : ""String_Node_Str"").append(' ');
            noServerShellCommand.append(windows ? ""String_Node_Str"" : ""String_Node_Str"").append(' ');
            shellCommand.append(moduleName).append('/');
            if ((appName != null) && (appName.trim().length() > 0)) {
              noServerShellCommand.append(appName).append('/');
            }
            String shellPage=getModuleId(moduleName) + ""String_Node_Str"";
            if (appModule.getShellPage() != null) {
              shellPage=appModule.getShellPage();
            }
            shellCommand.append(shellPage);
            noServerShellCommand.append(shellPage);
            break;
          }
 else           if (commandArg.indexOf(' ') >= 0) {
            commandArg='""' + commandArg + '""';
          }
          shellCommand.append(commandArg).append(' ');
          noServerShellCommand.append(commandArg).append(' ');
        }
        File scriptFile=getShellScriptFile(appName,moduleName);
        FileWriter writer=new FileWriter(scriptFile);
        writer.write(shellCommand.toString());
        writer.flush();
        writer.close();
        File noServerScriptFile=new File(scriptFile.getParentFile(),scriptFile.getName() + ""String_Node_Str"");
        writer=new FileWriter(noServerScriptFile);
        writer.write(noServerShellCommand.toString());
        writer.flush();
        writer.close();
      }
 else {
        info(""String_Node_Str"",moduleName);
      }
      File shellFile=getShellScriptFile(appName,moduleName);
      if (shellFile.exists()) {
        StringBuilder scriptArtifactId=new StringBuilder();
        if ((appName != null) && (appName.trim().length() > 0)) {
          scriptArtifactId.append(appName).append('.');
        }
        scriptArtifactId.append(moduleName).append(""String_Node_Str"");
        getEnunciate().addArtifact(new FileArtifact(getName(),scriptArtifactId.toString(),shellFile));
        File noServerScriptFile=new File(shellFile.getParentFile(),shellFile.getName() + ""String_Node_Str"");
        getEnunciate().addArtifact(new FileArtifact(getName(),scriptArtifactId.append(""String_Node_Str"").toString(),noServerScriptFile));
      }
 else {
        info(""String_Node_Str"",shellFile);
      }
    }
  }
}","/** 
 * Invokes GWTCompile on the apps specified in the configuration file.
 */
protected void doGWTCompile() throws EnunciateException, IOException {
  if (this.gwtHome == null) {
    throw new EnunciateException(""String_Node_Str"");
  }
  File gwtHomeDir=new File(this.gwtHome);
  if (!gwtHomeDir.exists()) {
    throw new EnunciateException(""String_Node_Str"" + gwtHomeDir.getAbsolutePath() + ""String_Node_Str"");
  }
  File gwtUserJar=new File(gwtHomeDir,""String_Node_Str"");
  if (!gwtUserJar.exists()) {
    warn(""String_Node_Str"",gwtUserJar.getAbsolutePath());
  }
  File linuxDevJar=new File(gwtHomeDir,""String_Node_Str"");
  File gwtDevJar=linuxDevJar;
  if (!gwtDevJar.exists()) {
    File macDevJar=new File(gwtHomeDir,""String_Node_Str"");
    gwtDevJar=macDevJar;
    if (!gwtDevJar.exists()) {
      File windowsDevJar=new File(gwtHomeDir,""String_Node_Str"");
      gwtDevJar=windowsDevJar;
      if (!gwtDevJar.exists()) {
        throw new EnunciateException(String.format(""String_Node_Str"",linuxDevJar.getAbsolutePath(),macDevJar.getAbsolutePath(),windowsDevJar.getAbsolutePath()));
      }
    }
  }
  boolean windows=false;
  File javaBinDir=new File(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  File javaExecutable=new File(javaBinDir,""String_Node_Str"");
  if (!javaExecutable.exists()) {
    javaExecutable=new File(javaBinDir,""String_Node_Str"");
    windows=true;
  }
  String javaCommand=javaExecutable.getAbsolutePath();
  if (!javaExecutable.exists()) {
    warn(""String_Node_Str"",javaBinDir.getAbsolutePath());
    javaCommand=""String_Node_Str"";
  }
  StringBuilder classpath=new StringBuilder(enunciate.getEnunciateClasspath());
  classpath.append(File.pathSeparatorChar).append(getClientSideGenerateDir().getAbsolutePath());
  classpath.append(File.pathSeparatorChar).append(gwtUserJar.getAbsolutePath());
  classpath.append(File.pathSeparatorChar).append(gwtDevJar.getAbsolutePath());
  List<String> jvmargs=getGwtCompileJVMArgs();
  String[] commandArray=new String[jvmargs.size() + 11];
  int argIndex=0;
  commandArray[argIndex++]=javaCommand;
  while (argIndex - 1 < jvmargs.size()) {
    String arg=jvmargs.get(argIndex - 1);
    commandArray[argIndex++]=arg;
  }
  commandArray[argIndex++]=""String_Node_Str"";
  int classpathArgIndex=argIndex;
  commandArray[argIndex++]=null;
  int compileClassIndex=argIndex;
  commandArray[argIndex++]=getGwtCompilerClass();
  commandArray[argIndex++]=""String_Node_Str"";
  commandArray[argIndex++]=getGwtGenDir().getAbsolutePath();
  commandArray[argIndex++]=""String_Node_Str"";
  int styleArgIndex=argIndex;
  commandArray[argIndex++]=null;
  commandArray[argIndex++]=""String_Node_Str"";
  int outArgIndex=argIndex;
  commandArray[argIndex++]=null;
  int moduleNameIndex=argIndex;
  commandArray[argIndex]=null;
  for (  GWTApp gwtApp : gwtApps) {
    String appName=gwtApp.getName();
    File appSource=enunciate.resolvePath(gwtApp.getSrcDir());
    String style=gwtApp.getJavascriptStyle().toString();
    File appDir=getAppGenerateDir(appName);
    String out=appDir.getAbsolutePath();
    commandArray[classpathArgIndex]=classpath.toString() + File.pathSeparatorChar + appSource.getAbsolutePath();
    commandArray[styleArgIndex]=style;
    commandArray[outArgIndex]=out;
    boolean upToDate=enunciate.isUpToDate(getClientSideGenerateDir(),appDir) && enunciate.isUpToDate(appSource,appDir);
    if (!upToDate) {
      for (      GWTAppModule appModule : gwtApp.getModules()) {
        String moduleName=appModule.getName();
        String outputPath=appModule.getOutputPath();
        File moduleOutputDir=appDir;
        if ((outputPath != null) && (!""String_Node_Str"".equals(outputPath.trim()))) {
          moduleOutputDir=new File(appDir,outputPath);
        }
        commandArray[moduleNameIndex]=moduleName;
        info(""String_Node_Str"",moduleName);
        if (enunciate.isDebug()) {
          StringBuilder command=new StringBuilder();
          for (          String commandPiece : commandArray) {
            command.append(' ').append(commandPiece);
          }
          debug(""String_Node_Str"",moduleName,command);
        }
        ProcessBuilder processBuilder=new ProcessBuilder(commandArray);
        processBuilder.directory(getGenerateDir());
        processBuilder.redirectErrorStream(true);
        Process process=processBuilder.start();
        BufferedReader procReader=new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line=procReader.readLine();
        while (line != null) {
          info(line);
          line=procReader.readLine();
        }
        int procCode;
        try {
          procCode=process.waitFor();
        }
 catch (        InterruptedException e1) {
          throw new EnunciateException(""String_Node_Str"");
        }
        if (procCode != 0) {
          throw new EnunciateException(""String_Node_Str"" + moduleName);
        }
        File moduleGenDir=new File(appDir,moduleName);
        if (!moduleOutputDir.equals(moduleGenDir)) {
          moduleOutputDir.mkdirs();
          enunciate.copyDir(moduleGenDir,moduleOutputDir);
          deleteDir(moduleGenDir);
        }
        StringBuilder shellCommand=new StringBuilder();
        StringBuilder noServerShellCommand=new StringBuilder();
        for (int i=0; i < commandArray.length; i++) {
          String commandArg=commandArray[i];
          if (i == compileClassIndex) {
            commandArg=""String_Node_Str"";
          }
 else           if (i == moduleNameIndex) {
            noServerShellCommand.append(""String_Node_Str"");
            shellCommand.append(windows ? ""String_Node_Str"" : ""String_Node_Str"").append(' ');
            noServerShellCommand.append(windows ? ""String_Node_Str"" : ""String_Node_Str"").append(' ');
            shellCommand.append(moduleName).append('/');
            if ((appName != null) && (appName.trim().length() > 0)) {
              noServerShellCommand.append(appName).append('/');
            }
            String shellPage=getModuleId(moduleName) + ""String_Node_Str"";
            if (appModule.getShellPage() != null) {
              shellPage=appModule.getShellPage();
            }
            shellCommand.append(shellPage);
            noServerShellCommand.append(shellPage);
            break;
          }
 else           if (commandArg.indexOf(' ') >= 0) {
            commandArg='""' + commandArg + '""';
          }
          shellCommand.append(commandArg).append(' ');
          noServerShellCommand.append(commandArg).append(' ');
        }
        File scriptFile=getShellScriptFile(appName,moduleName);
        FileWriter writer=new FileWriter(scriptFile);
        writer.write(shellCommand.toString());
        writer.flush();
        writer.close();
        File noServerScriptFile=new File(scriptFile.getParentFile(),scriptFile.getName() + ""String_Node_Str"");
        writer=new FileWriter(noServerScriptFile);
        writer.write(noServerShellCommand.toString());
        writer.flush();
        writer.close();
        File shellFile=getShellScriptFile(appName,moduleName);
        if (shellFile.exists()) {
          StringBuilder scriptArtifactId=new StringBuilder();
          if ((appName != null) && (appName.trim().length() > 0)) {
            scriptArtifactId.append(appName).append('.');
          }
          scriptArtifactId.append(moduleName).append(""String_Node_Str"");
          getEnunciate().addArtifact(new FileArtifact(getName(),scriptArtifactId.toString(),shellFile));
          getEnunciate().addArtifact(new FileArtifact(getName(),scriptArtifactId.append(""String_Node_Str"").toString(),noServerScriptFile));
        }
 else {
          info(""String_Node_Str"",shellFile);
        }
      }
    }
 else {
      info(""String_Node_Str"",appName);
    }
  }
}",0.8906109901370565
177188,"/** 
 * test getContentType
 */
public void testGetContentType() throws Exception {
  RESTContentTypeRoutingController controller=new RESTContentTypeRoutingController(new RESTResource(""String_Node_Str""),null);
  HttpServletRequest request=createMock(HttpServletRequest.class);
  expect(request.getParameter(""String_Node_Str"")).andReturn(""String_Node_Str"");
  replay(request);
  assertEquals(""String_Node_Str"",controller.getContentType(request));
  verify(request);
  reset(request);
  expect(request.getParameter(""String_Node_Str"")).andReturn(null);
  expect(request.getContentType()).andReturn(""String_Node_Str"");
  replay(request);
  assertEquals(""String_Node_Str"",controller.getContentType(request));
  verify(request);
  reset(request);
}","/** 
 * test getContentType
 */
public void testGetContentType() throws Exception {
  RESTContentTypeRoutingController controller=new RESTContentTypeRoutingController(new RESTResource(""String_Node_Str""),null);
  HttpServletRequest request=createMock(HttpServletRequest.class);
  expect(request.getParameter(""String_Node_Str"")).andReturn(""String_Node_Str"");
  replay(request);
  assertEquals(""String_Node_Str"",controller.getContentType(request));
  verify(request);
  reset(request);
}",0.7895595432300163
177189,"/** 
 * Get the content type for the specified request.
 * @param request The request.
 * @return The content type.
 */
protected String getContentType(HttpServletRequest request){
  String contentType=request.getParameter(getContentTypeParameter());
  if (contentType == null) {
    contentType=request.getContentType();
    if (contentType != null) {
      int semiIndex=contentType.indexOf(';');
      if (semiIndex >= 0) {
        contentType=contentType.substring(0,semiIndex);
      }
    }
 else {
      contentType=this.defaultContentType;
    }
  }
  return contentType;
}","/** 
 * Get the content type for the specified request.
 * @param request The request.
 * @return The content type.
 */
protected String getContentType(HttpServletRequest request){
  String contentType=request.getParameter(getContentTypeParameter());
  if (contentType == null) {
    contentType=this.defaultContentType;
  }
  return contentType;
}",0.6759956942949408
177190,"@Override protected void doBuild() throws EnunciateException, IOException {
  Enunciate enunciate=getEnunciate();
  String jarName=getJarName();
  if (jarName == null) {
    String label=""String_Node_Str"";
    if ((enunciate.getConfig() != null) && (enunciate.getConfig().getLabel() != null)) {
      label=enunciate.getConfig().getLabel();
    }
    jarName=label + ""String_Node_Str"";
  }
  File jdk14Jar=new File(getBuildDir(),jarName.replaceFirst(""String_Node_Str"",""String_Node_Str""));
  if (!enunciate.isUpToDate(getJdk14CompileDir(),jdk14Jar)) {
    enunciate.zip(jdk14Jar,getJdk14CompileDir());
    enunciate.setProperty(""String_Node_Str"",jdk14Jar);
  }
 else {
    info(""String_Node_Str"");
  }
  File jdk14Sources=new File(getBuildDir(),jarName.replaceFirst(""String_Node_Str"",""String_Node_Str""));
  if (!enunciate.isUpToDate(getJdk14GenerateDir(),jdk14Sources)) {
    enunciate.zip(jdk14Sources,getJdk14GenerateDir());
    enunciate.setProperty(""String_Node_Str"",jdk14Sources);
  }
 else {
    info(""String_Node_Str"");
  }
  List<ArtifactDependency> clientDeps=new ArrayList<ArtifactDependency>();
  MavenDependency xfireClientDependency=new MavenDependency();
  xfireClientDependency.setId(""String_Node_Str"");
  xfireClientDependency.setArtifactType(""String_Node_Str"");
  xfireClientDependency.setDescription(""String_Node_Str"");
  xfireClientDependency.setGroupId(""String_Node_Str"");
  xfireClientDependency.setURL(""String_Node_Str"");
  xfireClientDependency.setVersion(enunciate.getVersion());
  clientDeps.add(xfireClientDependency);
  BaseArtifactDependency dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setDescription(""String_Node_Str"");
  dep.setURL(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  dep.setDescription(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  dep.setDescription(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  clientDeps.add(dep);
  ClientLibraryArtifact jdk14ArtifactBundle=new ClientLibraryArtifact(getName(),""String_Node_Str"",""String_Node_Str"");
  jdk14ArtifactBundle.setPlatform(""String_Node_Str"");
  jdk14ArtifactBundle.setDescription(readResource(""String_Node_Str""));
  NamedFileArtifact jdk14BinariesJar=new NamedFileArtifact(getName(),""String_Node_Str"",jdk14Jar);
  jdk14BinariesJar.setDescription(""String_Node_Str"");
  jdk14BinariesJar.setPublic(false);
  jdk14ArtifactBundle.addArtifact(jdk14BinariesJar);
  NamedFileArtifact jdk14SourcesJar=new NamedFileArtifact(getName(),""String_Node_Str"",jdk14Sources);
  jdk14SourcesJar.setDescription(""String_Node_Str"");
  jdk14SourcesJar.setPublic(false);
  jdk14ArtifactBundle.addArtifact(jdk14SourcesJar);
  jdk14ArtifactBundle.setDependencies(clientDeps);
  enunciate.addArtifact(jdk14BinariesJar);
  enunciate.addArtifact(jdk14SourcesJar);
  enunciate.addArtifact(jdk14ArtifactBundle);
  File jdk15Jar=new File(getBuildDir(),jarName.replaceFirst(""String_Node_Str"",""String_Node_Str""));
  if (!enunciate.isUpToDate(getJdk15CompileDir(),jdk15Jar)) {
    enunciate.zip(jdk15Jar,getJdk15CompileDir());
    enunciate.setProperty(""String_Node_Str"",jdk15Jar);
  }
 else {
    info(""String_Node_Str"");
  }
  File jdk15Sources=new File(getBuildDir(),jarName.replaceFirst(""String_Node_Str"",""String_Node_Str""));
  if (!enunciate.isUpToDate(getJdk15GenerateDir(),jdk15Sources)) {
    enunciate.zip(jdk15Sources,getJdk15GenerateDir());
    enunciate.setProperty(""String_Node_Str"",jdk15Sources);
  }
 else {
    info(""String_Node_Str"");
  }
  ClientLibraryArtifact jdk15ArtifactBundle=new ClientLibraryArtifact(getName(),""String_Node_Str"",""String_Node_Str"");
  jdk15ArtifactBundle.setPlatform(""String_Node_Str"");
  jdk15ArtifactBundle.setDescription(readResource(""String_Node_Str""));
  NamedFileArtifact jdk15BinariesJar=new NamedFileArtifact(getName(),""String_Node_Str"",jdk15Jar);
  jdk15BinariesJar.setDescription(""String_Node_Str"");
  jdk15BinariesJar.setPublic(false);
  jdk15ArtifactBundle.addArtifact(jdk15BinariesJar);
  NamedFileArtifact jdk15SourcesJar=new NamedFileArtifact(getName(),""String_Node_Str"",jdk15Sources);
  jdk15SourcesJar.setDescription(""String_Node_Str"");
  jdk15SourcesJar.setPublic(false);
  jdk15ArtifactBundle.addArtifact(jdk15SourcesJar);
  jdk15ArtifactBundle.setDependencies(clientDeps);
  enunciate.addArtifact(jdk15BinariesJar);
  enunciate.addArtifact(jdk15SourcesJar);
  enunciate.addArtifact(jdk15ArtifactBundle);
}","@Override protected void doBuild() throws EnunciateException, IOException {
  Enunciate enunciate=getEnunciate();
  String jarName=getJarName();
  if (jarName == null) {
    String label=""String_Node_Str"";
    if ((enunciate.getConfig() != null) && (enunciate.getConfig().getLabel() != null)) {
      label=enunciate.getConfig().getLabel();
    }
    jarName=label + ""String_Node_Str"";
  }
  File jdk14Jar=new File(getBuildDir(),jarName.replaceFirst(""String_Node_Str"",""String_Node_Str""));
  if (!enunciate.isUpToDate(getJdk14CompileDir(),jdk14Jar)) {
    enunciate.zip(jdk14Jar,getJdk14CompileDir());
    enunciate.setProperty(""String_Node_Str"",jdk14Jar);
  }
 else {
    info(""String_Node_Str"");
  }
  File jdk14Sources=new File(getBuildDir(),jarName.replaceFirst(""String_Node_Str"",""String_Node_Str""));
  if (!enunciate.isUpToDate(getJdk14GenerateDir(),jdk14Sources)) {
    enunciate.zip(jdk14Sources,getJdk14GenerateDir());
    enunciate.setProperty(""String_Node_Str"",jdk14Sources);
  }
 else {
    info(""String_Node_Str"");
  }
  List<ArtifactDependency> clientDeps=new ArrayList<ArtifactDependency>();
  MavenDependency xfireClientDependency=new MavenDependency();
  xfireClientDependency.setId(""String_Node_Str"");
  xfireClientDependency.setArtifactType(""String_Node_Str"");
  xfireClientDependency.setDescription(""String_Node_Str"");
  xfireClientDependency.setGroupId(""String_Node_Str"");
  xfireClientDependency.setURL(""String_Node_Str"");
  xfireClientDependency.setVersion(enunciate.getVersion());
  clientDeps.add(xfireClientDependency);
  BaseArtifactDependency dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setDescription(""String_Node_Str"");
  dep.setURL(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  dep.setDescription(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  dep.setDescription(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  clientDeps.add(dep);
  dep=new BaseArtifactDependency();
  dep.setId(""String_Node_Str"");
  dep.setArtifactType(""String_Node_Str"");
  dep.setVersion(""String_Node_Str"");
  clientDeps.add(dep);
  ClientLibraryArtifact jdk14ArtifactBundle=new ClientLibraryArtifact(getName(),""String_Node_Str"",""String_Node_Str"");
  jdk14ArtifactBundle.setPlatform(""String_Node_Str"");
  jdk14ArtifactBundle.setDescription(readResource(""String_Node_Str""));
  NamedFileArtifact jdk14BinariesJar=new NamedFileArtifact(getName(),""String_Node_Str"",jdk14Jar);
  jdk14BinariesJar.setDescription(""String_Node_Str"");
  jdk14BinariesJar.setPublic(false);
  jdk14ArtifactBundle.addArtifact(jdk14BinariesJar);
  NamedFileArtifact jdk14SourcesJar=new NamedFileArtifact(getName(),""String_Node_Str"",jdk14Sources);
  jdk14SourcesJar.setDescription(""String_Node_Str"");
  jdk14SourcesJar.setPublic(false);
  jdk14ArtifactBundle.addArtifact(jdk14SourcesJar);
  jdk14ArtifactBundle.setDependencies(clientDeps);
  enunciate.addArtifact(jdk14BinariesJar);
  enunciate.addArtifact(jdk14SourcesJar);
  enunciate.addArtifact(jdk14ArtifactBundle);
  File jdk15Jar=new File(getBuildDir(),jarName.replaceFirst(""String_Node_Str"",""String_Node_Str""));
  if (!enunciate.isUpToDate(getJdk15CompileDir(),jdk15Jar)) {
    enunciate.zip(jdk15Jar,getJdk15CompileDir());
    enunciate.setProperty(""String_Node_Str"",jdk15Jar);
  }
 else {
    info(""String_Node_Str"");
  }
  File jdk15Sources=new File(getBuildDir(),jarName.replaceFirst(""String_Node_Str"",""String_Node_Str""));
  if (!enunciate.isUpToDate(getJdk15GenerateDir(),jdk15Sources)) {
    enunciate.zip(jdk15Sources,getJdk15GenerateDir());
    enunciate.setProperty(""String_Node_Str"",jdk15Sources);
  }
 else {
    info(""String_Node_Str"");
  }
  ClientLibraryArtifact jdk15ArtifactBundle=new ClientLibraryArtifact(getName(),""String_Node_Str"",""String_Node_Str"");
  jdk15ArtifactBundle.setPlatform(""String_Node_Str"");
  jdk15ArtifactBundle.setDescription(readResource(""String_Node_Str""));
  NamedFileArtifact jdk15BinariesJar=new NamedFileArtifact(getName(),""String_Node_Str"",jdk15Jar);
  jdk15BinariesJar.setDescription(""String_Node_Str"");
  jdk15BinariesJar.setPublic(false);
  jdk15ArtifactBundle.addArtifact(jdk15BinariesJar);
  NamedFileArtifact jdk15SourcesJar=new NamedFileArtifact(getName(),""String_Node_Str"",jdk15Sources);
  jdk15SourcesJar.setDescription(""String_Node_Str"");
  jdk15SourcesJar.setPublic(false);
  jdk15ArtifactBundle.addArtifact(jdk15SourcesJar);
  jdk15ArtifactBundle.setDependencies(clientDeps);
  enunciate.addArtifact(jdk15BinariesJar);
  enunciate.addArtifact(jdk15SourcesJar);
  enunciate.addArtifact(jdk15ArtifactBundle);
}",0.9853372434017597
177191,"public ValidationResult validateEndpointInterface(EndpointInterface ei){
  ValidationResult result=new ValidationResult();
  Declaration delegate=ei.getDelegate();
  WebService ws=delegate.getAnnotation(WebService.class);
  if (ws == null) {
    result.addError(delegate.getPosition(),""String_Node_Str"");
  }
 else {
    if (((ei.getPackage() == null) || (""String_Node_Str"".equals(ei.getPackage().getQualifiedName()))) && (ei.getTargetNamespace() == null)) {
      result.addError(delegate.getPosition(),""String_Node_Str"");
    }
    if ((ws.endpointInterface() != null) && (!""String_Node_Str"".equals(ws.endpointInterface()))) {
      result.addError(delegate.getPosition(),""String_Node_Str"");
    }
  }
  if (delegate instanceof AnnotationTypeDeclaration) {
    result.addError(delegate.getPosition(),""String_Node_Str"");
  }
  if (delegate instanceof EnumDeclaration) {
    result.addError(delegate.getPosition(),""String_Node_Str"");
  }
  TreeSet<WebMethod> uniquelyNamedWebMethods=new TreeSet<WebMethod>();
  for (  WebMethod webMethod : ei.getWebMethods()) {
    if (!uniquelyNamedWebMethods.add(webMethod)) {
      result.addError(webMethod.getPosition(),""String_Node_Str"");
    }
    result.aggregate(validateWebMethod(webMethod));
  }
  for (  EndpointImplementation implementation : ei.getEndpointImplementations()) {
    result.aggregate(validateEndpointImplementation(implementation));
  }
  if (ei.getSoapUse() == SOAPBinding.Use.ENCODED) {
    result.addError(ei.getPosition(),""String_Node_Str"");
  }
  return result;
}","public ValidationResult validateEndpointInterface(EndpointInterface ei){
  ValidationResult result=new ValidationResult();
  if ((ei.getEndpointImplementations() == null || (ei.getEndpointImplementations().isEmpty()))) {
    result.addWarning(ei.getPosition(),""String_Node_Str"");
  }
  Declaration delegate=ei.getDelegate();
  WebService ws=delegate.getAnnotation(WebService.class);
  if (ws == null) {
    result.addError(delegate.getPosition(),""String_Node_Str"");
  }
 else {
    if (((ei.getPackage() == null) || (""String_Node_Str"".equals(ei.getPackage().getQualifiedName()))) && (ei.getTargetNamespace() == null)) {
      result.addError(delegate.getPosition(),""String_Node_Str"");
    }
    if ((ws.endpointInterface() != null) && (!""String_Node_Str"".equals(ws.endpointInterface()))) {
      result.addError(delegate.getPosition(),""String_Node_Str"");
    }
  }
  if (delegate instanceof AnnotationTypeDeclaration) {
    result.addError(delegate.getPosition(),""String_Node_Str"");
  }
  if (delegate instanceof EnumDeclaration) {
    result.addError(delegate.getPosition(),""String_Node_Str"");
  }
  TreeSet<WebMethod> uniquelyNamedWebMethods=new TreeSet<WebMethod>();
  for (  WebMethod webMethod : ei.getWebMethods()) {
    if (!uniquelyNamedWebMethods.add(webMethod)) {
      result.addError(webMethod.getPosition(),""String_Node_Str"");
    }
    result.aggregate(validateWebMethod(webMethod));
  }
  for (  EndpointImplementation implementation : ei.getEndpointImplementations()) {
    result.aggregate(validateEndpointImplementation(implementation));
  }
  if (ei.getSoapUse() == SOAPBinding.Use.ENCODED) {
    result.addError(ei.getPosition(),""String_Node_Str"");
  }
  return result;
}",0.9500155231294628
177192,"/** 
 * Invokes javac on the specified source files.
 * @param classpath      The classpath.
 * @param compileDir     The compile directory.
 * @param additionalArgs Any additional arguments to the compiler.
 * @param sourceFiles    The source files.
 * @throws EnunciateException if the compile fails.
 */
public void invokeJavac(String classpath,File compileDir,List<String> additionalArgs,String[] sourceFiles) throws EnunciateException {
  List<String> args=new ArrayList<String>();
  args.add(""String_Node_Str"");
  args.add(classpath);
  if (isDebug()) {
    args.add(""String_Node_Str"");
  }
  args.add(""String_Node_Str"");
  args.add(compileDir.getAbsolutePath());
  args.addAll(additionalArgs);
  args.addAll(Arrays.asList(sourceFiles));
  if (isDebug()) {
    StringBuilder message=new StringBuilder(""String_Node_Str"");
    for (    String arg : args) {
      message.append(' ');
      message.append(arg);
    }
    debug(message.toString());
  }
  compileDir.mkdirs();
  int procCode=com.sun.tools.javac.Main.compile(args.toArray(new String[args.size()]));
  if (procCode != 0) {
    throw new EnunciateException(""String_Node_Str"");
  }
}","/** 
 * Invokes javac on the specified source files.
 * @param classpath      The classpath.
 * @param compileDir     The compile directory.
 * @param additionalArgs Any additional arguments to the compiler.
 * @param sourceFiles    The source files.
 * @throws EnunciateException if the compile fails.
 */
public void invokeJavac(String classpath,File compileDir,List<String> additionalArgs,String[] sourceFiles) throws EnunciateException {
  if ((sourceFiles == null) || (sourceFiles.length == 0)) {
    warn(""String_Node_Str"");
    return;
  }
  List<String> args=new ArrayList<String>();
  args.add(""String_Node_Str"");
  args.add(classpath);
  if (isDebug()) {
    args.add(""String_Node_Str"");
  }
  args.add(""String_Node_Str"");
  args.add(compileDir.getAbsolutePath());
  args.addAll(additionalArgs);
  args.addAll(Arrays.asList(sourceFiles));
  if (isDebug()) {
    StringBuilder message=new StringBuilder(""String_Node_Str"");
    for (    String arg : args) {
      message.append(' ');
      message.append(arg);
    }
    debug(message.toString());
  }
  compileDir.mkdirs();
  int procCode=com.sun.tools.javac.Main.compile(args.toArray(new String[args.size()]));
  if (procCode != 0) {
    throw new EnunciateException(""String_Node_Str"");
  }
}",0.956268221574344
177193,"/** 
 * Do the generate logic.
 * @param deploymentModules The deployment modules to use.
 */
protected void doGenerate(List<DeploymentModule> deploymentModules) throws IOException, EnunciateException {
  File genDir=getGenerateDir();
  if (genDir == null) {
    genDir=createTempDir();
    debug(""String_Node_Str"",genDir);
    setGenerateDir(genDir);
  }
  List<String> classpath=new ArrayList<String>(Arrays.asList(getEnunciateClasspath().split(File.pathSeparator)));
  List<URL> classpathURLs=new ArrayList<URL>(classpath.size());
  for (  String pathItem : classpath) {
    File pathFile=new File(pathItem);
    if (pathFile.exists()) {
      classpathURLs.add(pathFile.toURL());
    }
  }
  final URLClassLoader loader=new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]));
  Map<String,Boolean> imports2seekSource=new HashMap<String,Boolean>();
  Enumeration<URL> exportResources=loader.getResources(""String_Node_Str"");
  while (exportResources.hasMoreElements()) {
    URL url=exportResources.nextElement();
    BufferedReader reader=new BufferedReader(new InputStreamReader(url.openStream()));
    String line=reader.readLine();
    info(""String_Node_Str"",line,url);
    while (line != null) {
      imports2seekSource.put(line,true);
      line=reader.readLine();
    }
  }
  if ((this.config != null) && (this.config.getAPIImports().size() > 0)) {
    for (    APIImport apiImport : this.config.getAPIImports()) {
      if (apiImport.getClassname() != null) {
        info(""String_Node_Str"",apiImport.getClassname());
        imports2seekSource.put(apiImport.getClassname(),apiImport.isSeekSource());
      }
    }
  }
  ArrayList<String> sourceFiles=new ArrayList<String>(Arrays.asList(getSourceFiles()));
  ArrayList<String> additionalApiClasses=new ArrayList<String>();
  if (!imports2seekSource.isEmpty()) {
    File tempSourcesDir=createTempDir();
    for (    String classname : imports2seekSource.keySet()) {
      URL source=null;
      if (imports2seekSource.get(classname)) {
        source=loader.findResource(classname.replace('.','/').concat(""String_Node_Str""));
      }
      if (source != null) {
        File srcFile=new File(tempSourcesDir,classname.replace('.',File.separatorChar).concat(""String_Node_Str""));
        if (!srcFile.getParentFile().exists()) {
          srcFile.getParentFile().mkdirs();
        }
        copyResource(source,srcFile);
        sourceFiles.add(srcFile.getAbsolutePath());
      }
 else       if (loader.findResource(classname.replace('.','/').concat(""String_Node_Str"")) != null) {
        additionalApiClasses.add(classname);
      }
 else {
        warn(""String_Node_Str"",classname);
      }
    }
  }
  invokeApt(sourceFiles.toArray(new String[sourceFiles.size()]),additionalApiClasses.toArray(new String[additionalApiClasses.size()]));
}","/** 
 * Do the generate logic.
 * @param deploymentModules The deployment modules to use.
 */
protected void doGenerate(List<DeploymentModule> deploymentModules) throws IOException, EnunciateException {
  File genDir=getGenerateDir();
  if (genDir == null) {
    genDir=createTempDir();
    debug(""String_Node_Str"",genDir);
    setGenerateDir(genDir);
  }
  List<String> classpath=new ArrayList<String>(Arrays.asList(getEnunciateClasspath().split(File.pathSeparator)));
  List<URL> classpathURLs=new ArrayList<URL>(classpath.size());
  for (  String pathItem : classpath) {
    File pathFile=new File(pathItem);
    if (pathFile.exists()) {
      classpathURLs.add(pathFile.toURL());
    }
  }
  final URLClassLoader loader=new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]));
  Map<String,Boolean> imports2seekSource=new HashMap<String,Boolean>();
  Enumeration<URL> exportResources=loader.getResources(""String_Node_Str"");
  while (exportResources.hasMoreElements()) {
    URL url=exportResources.nextElement();
    BufferedReader reader=new BufferedReader(new InputStreamReader(url.openStream()));
    String line=reader.readLine();
    info(""String_Node_Str"",line,url);
    while (line != null) {
      imports2seekSource.put(line,true);
      line=reader.readLine();
    }
  }
  if ((this.config != null) && (this.config.getAPIImports().size() > 0)) {
    for (    APIImport apiImport : this.config.getAPIImports()) {
      if (apiImport.getClassname() != null) {
        info(""String_Node_Str"",apiImport.getClassname());
        imports2seekSource.put(apiImport.getClassname(),apiImport.isSeekSource());
      }
    }
  }
  ArrayList<String> sourceFiles=new ArrayList<String>(Arrays.asList(getSourceFiles()));
  ArrayList<String> additionalApiClasses=new ArrayList<String>();
  if (!imports2seekSource.isEmpty()) {
    File tempSourcesDir=createTempDir();
    for (    String classname : imports2seekSource.keySet()) {
      URL source=null;
      if (imports2seekSource.get(classname)) {
        source=loader.findResource(classname.replace('.','/').concat(""String_Node_Str""));
      }
      if (source != null) {
        File srcFile=new File(tempSourcesDir,classname.replace('.',File.separatorChar).concat(""String_Node_Str""));
        if (!srcFile.getParentFile().exists()) {
          srcFile.getParentFile().mkdirs();
        }
        copyResource(source,srcFile);
        sourceFiles.add(srcFile.getAbsolutePath());
      }
 else       if (loader.findResource(classname.replace('.','/').concat(""String_Node_Str"")) != null) {
        additionalApiClasses.add(classname);
      }
 else {
        warn(""String_Node_Str"",classname);
      }
    }
  }
  if (sourceFiles.isEmpty()) {
    File tempSource=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    FileWriter writer=new FileWriter(tempSource);
    writer.write(String.format(""String_Node_Str"",tempSource.getName().substring(0,tempSource.getName().length() - 5)));
    writer.flush();
    writer.close();
    sourceFiles.add(tempSource.getAbsolutePath());
  }
  invokeApt(sourceFiles.toArray(new String[sourceFiles.size()]),additionalApiClasses.toArray(new String[additionalApiClasses.size()]));
}",0.9377496671105192
177194,"/** 
 * Do the initialization logic.  Loads and initializes the deployment modules.
 * @return The deployment modules that were loaded and initialized.
 */
protected List<DeploymentModule> doInit() throws EnunciateException, IOException {
  if ((this.sourceFiles == null) || (this.sourceFiles.isEmpty())) {
    throw new EnunciateException(""String_Node_Str"");
  }
  if (isJavacCheck()) {
    invokeJavac(createTempDir(),getSourceFiles());
  }
  if (this.config == null) {
    this.config=loadConfig();
  }
  List<DeploymentModule> deploymentModules=this.config.getEnabledModules();
  initModules(deploymentModules);
  return deploymentModules;
}","/** 
 * Do the initialization logic.  Loads and initializes the deployment modules.
 * @return The deployment modules that were loaded and initialized.
 */
protected List<DeploymentModule> doInit() throws EnunciateException, IOException {
  if (isJavacCheck()) {
    invokeJavac(createTempDir(),getSourceFiles());
  }
  if (this.config == null) {
    this.config=loadConfig();
  }
  List<DeploymentModule> deploymentModules=this.config.getEnabledModules();
  initModules(deploymentModules);
  return deploymentModules;
}",0.7553648068669528
177195,"protected static Properties loadAndVerifyJettyProperties() throws IOException, IllegalStateException {
  properties=FileUtil.loadAndVerifyJettyPropertiesFile(jettyPropertiesPath,false);
  relativeContext=properties.getProperty(""String_Node_Str"",relativeContext);
  if (relativeContext == null) {
    throw new IllegalStateException(""String_Node_Str"" + jettyPropertiesPath);
  }
  String webappDir=properties.getProperty(""String_Node_Str"",webappHome.getAbsolutePath());
  if (webappDir == null) {
    throw new IllegalStateException(""String_Node_Str"" + jettyPropertiesPath);
  }
  webappHome=new File(webappDir);
  host=properties.getProperty(""String_Node_Str"",""String_Node_Str"");
  specifiedPort=Integer.parseInt(properties.getProperty(""String_Node_Str"",""String_Node_Str"" + DEFAULT_PORT));
  protocol=properties.getProperty(""String_Node_Str"",""String_Node_Str"");
  if (!webappHome.exists()) {
    throw new FileNotFoundException(""String_Node_Str"" + webappHome.getAbsolutePath());
  }
  return properties;
}","protected static Properties loadAndVerifyJettyProperties() throws IOException, IllegalStateException {
  properties=FileUtil.loadAndVerifyJettyPropertiesFile(jettyPropertiesPath,false);
  relativeContext=properties.getProperty(""String_Node_Str"",relativeContext);
  if (relativeContext == null) {
    throw new IllegalStateException(""String_Node_Str"" + jettyPropertiesPath);
  }
  String webappDir=properties.getProperty(""String_Node_Str"",(webappHome == null) ? null : webappHome.getAbsolutePath());
  if (webappDir == null) {
    throw new IllegalStateException(""String_Node_Str"" + jettyPropertiesPath);
  }
  webappHome=new File(webappDir);
  host=properties.getProperty(""String_Node_Str"",""String_Node_Str"");
  specifiedPort=Integer.parseInt(properties.getProperty(""String_Node_Str"",""String_Node_Str"" + DEFAULT_PORT));
  protocol=properties.getProperty(""String_Node_Str"",""String_Node_Str"");
  if (!webappHome.exists()) {
    throw new FileNotFoundException(""String_Node_Str"" + webappHome.getAbsolutePath());
  }
  return properties;
}",0.9852941176470588
177196,"@Override public boolean isBaseObject(){
  return getBaseType().getQname().equals(KnownXmlType.ANY_TYPE.getQname());
}","@Override public boolean isBaseObject(){
  return getSuperclass().getDeclaration() == null || Object.class.getName().equals(getSuperclass().getDeclaration().getQualifiedName());
}",0.6195286195286195
177197,"public RESTMethod(MethodDeclaration delegate,RESTEndpoint endpoint){
  super(delegate);
  RESTParameter properNoun=null;
  RESTParameter nounValue=null;
  this.adjectives=new ArrayList<RESTParameter>();
  int parameterPosition=0;
  for (  ParameterDeclaration parameterDeclaration : getParameters()) {
    RESTParameter restParameter=new RESTParameter(parameterDeclaration,parameterPosition++);
    if (restParameter.isProperNoun()) {
      if (properNoun != null) {
        throw new ValidationException(properNoun.getPosition(),""String_Node_Str"" + restParameter.getPosition());
      }
      properNoun=restParameter;
    }
 else     if (restParameter.isNounValue()) {
      if (nounValue != null) {
        throw new ValidationException(nounValue.getPosition(),""String_Node_Str"" + restParameter.getPosition());
      }
      nounValue=restParameter;
    }
 else {
      adjectives.add(restParameter);
    }
  }
  this.nounValue=nounValue;
  this.properNoun=properNoun;
  this.RESTErrors=new ArrayList<RESTError>();
  for (  ReferenceType referenceType : getThrownTypes()) {
    ClassDeclaration throwableDeclaration=((ClassType)referenceType).getDeclaration();
    this.RESTErrors.add(new RESTError(throwableDeclaration));
  }
  String noun=getSimpleName();
  Noun nounInfo=getAnnotation(Noun.class);
  if ((nounInfo != null) && (!""String_Node_Str"".equals(nounInfo.value()))) {
    noun=nounInfo.value();
  }
  String nounContext=""String_Node_Str"";
  NounContext nounContextInfo=endpoint.getAnnotation(NounContext.class);
  if (nounContextInfo != null) {
    nounContext=nounContextInfo.value();
  }
  if ((nounInfo != null) && (!""String_Node_Str"".equals(nounInfo.context()))) {
    nounContext=nounInfo.value();
  }
  this.noun=new RESTNoun(noun,nounContext);
}","public RESTMethod(MethodDeclaration delegate,RESTEndpoint endpoint){
  super(delegate);
  RESTParameter properNoun=null;
  RESTParameter nounValue=null;
  this.adjectives=new ArrayList<RESTParameter>();
  int parameterPosition=0;
  for (  ParameterDeclaration parameterDeclaration : getParameters()) {
    RESTParameter restParameter=new RESTParameter(parameterDeclaration,parameterPosition++);
    if (restParameter.isProperNoun()) {
      if (properNoun != null) {
        throw new ValidationException(properNoun.getPosition(),""String_Node_Str"" + restParameter.getPosition());
      }
      properNoun=restParameter;
    }
 else     if (restParameter.isNounValue()) {
      if (nounValue != null) {
        throw new ValidationException(nounValue.getPosition(),""String_Node_Str"" + restParameter.getPosition());
      }
      nounValue=restParameter;
    }
 else {
      adjectives.add(restParameter);
    }
  }
  this.nounValue=nounValue;
  this.properNoun=properNoun;
  this.RESTErrors=new ArrayList<RESTError>();
  for (  ReferenceType referenceType : getThrownTypes()) {
    ClassDeclaration throwableDeclaration=((ClassType)referenceType).getDeclaration();
    this.RESTErrors.add(new RESTError(throwableDeclaration));
  }
  String noun=getSimpleName();
  Noun nounInfo=getAnnotation(Noun.class);
  if ((nounInfo != null) && (!""String_Node_Str"".equals(nounInfo.value()))) {
    noun=nounInfo.value();
  }
  String nounContext=""String_Node_Str"";
  NounContext nounContextInfo=endpoint.getAnnotation(NounContext.class);
  if (nounContextInfo != null) {
    nounContext=nounContextInfo.value();
  }
  if ((nounInfo != null) && (!""String_Node_Str"".equals(nounInfo.context()))) {
    nounContext=nounInfo.context();
  }
  this.noun=new RESTNoun(noun,nounContext);
}",0.9966024915062288
177198,"@Override public int hashCode(){
  int result;
  result=name.hashCode();
  result=31 * result + context.hashCode();
  return result;
}","@Override public int hashCode(){
  return toString().hashCode();
}",0.51
177199,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  RESTNoun restNoun=(RESTNoun)o;
  return context.equals(restNoun.context) && name.equals(restNoun.name);
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || !(o instanceof RESTNoun)) {
    return false;
  }
  RESTNoun restNoun=(RESTNoun)o;
  return toString().equals(restNoun.toString());
}",0.5685483870967742
177200,"/** 
 * tests the REST endpoint
 */
public void testRESTEndpoint() throws Exception {
}","/** 
 * tests the REST endpoint
 */
public void testRESTEndpoint() throws Exception {
  TypeDeclaration declaration=getDeclaration(""String_Node_Str"");
  RESTEndpoint endpoint=new RESTEndpoint((ClassDeclaration)declaration);
  ArrayList<RESTMethod> methods=new ArrayList<RESTMethod>(endpoint.getRESTMethods());
  assertEquals(3,methods.size());
  Iterator<RESTMethod> it=methods.iterator();
  while (it.hasNext()) {
    RESTMethod method=it.next();
    if (""String_Node_Str"".equals(method.getSimpleName())) {
      assertEquals(""String_Node_Str"",method.getNoun().getContext());
      assertEquals(""String_Node_Str"",method.getNoun().getName());
      assertEquals(""String_Node_Str"",method.getNoun().toString());
    }
 else     if (""String_Node_Str"".equals(method.getSimpleName())) {
      assertEquals(""String_Node_Str"",method.getNoun().getContext());
      assertEquals(""String_Node_Str"",method.getNoun().getName());
      assertEquals(""String_Node_Str"",method.getNoun().toString());
    }
 else     if (""String_Node_Str"".equals(method.getSimpleName())) {
      assertEquals(""String_Node_Str"",method.getNoun().getContext());
      assertEquals(""String_Node_Str"",method.getNoun().getName());
      assertEquals(""String_Node_Str"",method.getNoun().toString());
    }
 else {
      fail(""String_Node_Str"" + method.getSimpleName());
    }
    it.remove();
  }
}",0.1205821205821205
177201,"/** 
 * tests the initialization of the application context.
 */
public void testInitApplicationContext() throws Exception {
  RESTResourceFactory factory=new RESTResourceFactory();
  factory.setEndpointClasses(new Class[]{EndpointOneImpl.class,EndpointTwo.class,EndpointThreeImpl.class});
  factory.setApplicationContext(new GenericWebApplicationContext());
  String[] nouns={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ArrayList<RESTResource> resources=new ArrayList<RESTResource>(factory.getRESTResources());
  for (  String noun : nouns) {
    String context=""String_Node_Str"";
    if ((""String_Node_Str"".equals(noun)) || (""String_Node_Str"".equals(noun))) {
      context=""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(noun)) {
      context=""String_Node_Str"";
    }
    RESTResource resource=factory.getRESTResource(context,noun);
    assertNotNull(resource);
    for (    VerbType verbType : VerbType.values()) {
      RESTOperation operation=resource.getOperation(verbType);
      assertNotNull(resource.toString() + ""String_Node_Str"" + verbType+ ""String_Node_Str"",operation);
    }
    resources.remove(resource);
  }
  assertTrue(resources.isEmpty());
  final ProxyFactoryBean advisedEndpoint=new ProxyFactoryBean();
  advisedEndpoint.setTarget(new EndpointOneImpl());
  advisedEndpoint.setProxyInterfaces(new String[]{""String_Node_Str""});
  factory=new RESTResourceFactory();
  GenericWebApplicationContext ctx=new GenericWebApplicationContext(){
    @Override public Map getBeansOfType(    Class aClass) throws BeansException {
      if (org.codehaus.enunciate.modules.rest.EndpointOne.class.equals(aClass)) {
        HashMap<String,Object> beansOfType=new HashMap<String,Object>();
        beansOfType.put(""String_Node_Str"",advisedEndpoint);
        return beansOfType;
      }
      return super.getBeansOfType(aClass);
    }
  }
;
  factory.setEndpointClasses(new Class[]{EndpointOneImpl.class});
  factory.setApplicationContext(ctx);
  nouns=new String[]{""String_Node_Str"",""String_Node_Str""};
  resources=new ArrayList<RESTResource>(factory.getRESTResources());
  for (  String noun : nouns) {
    String context=""String_Node_Str"";
    if ((""String_Node_Str"".equals(noun)) || (""String_Node_Str"".equals(noun))) {
      context=""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(noun)) {
      context=""String_Node_Str"";
    }
    RESTResource resource=factory.getRESTResource(context,noun);
    assertNotNull(resource);
    for (    VerbType verbType : VerbType.values()) {
      RESTOperation operation=resource.getOperation(verbType);
      assertSame(advisedEndpoint,operation.getEndpoint());
      assertNotNull(operation);
    }
    resources.remove(resource);
  }
  assertTrue(resources.isEmpty());
}","/** 
 * tests the initialization of the application context.
 */
public void testInitApplicationContext() throws Exception {
  RESTResourceFactory factory=new RESTResourceFactory();
  factory.setEndpointClasses(new Class[]{EndpointOneImpl.class,EndpointTwo.class,EndpointThreeImpl.class});
  factory.setApplicationContext(new GenericWebApplicationContext());
  String[] nouns={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ArrayList<RESTResource> resources=new ArrayList<RESTResource>(factory.getRESTResources());
  for (  String noun : nouns) {
    String context=""String_Node_Str"";
    if ((""String_Node_Str"".equals(noun)) || (""String_Node_Str"".equals(noun))) {
      context=""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(noun)) {
      context=""String_Node_Str"";
    }
    RESTResource resource=factory.getRESTResource(noun,context);
    assertNotNull(resource);
    for (    VerbType verbType : VerbType.values()) {
      RESTOperation operation=resource.getOperation(verbType);
      assertNotNull(resource.toString() + ""String_Node_Str"" + verbType+ ""String_Node_Str"",operation);
    }
    resources.remove(resource);
  }
  assertTrue(resources.isEmpty());
  final ProxyFactoryBean advisedEndpoint=new ProxyFactoryBean();
  advisedEndpoint.setTarget(new EndpointOneImpl());
  advisedEndpoint.setProxyInterfaces(new String[]{""String_Node_Str""});
  factory=new RESTResourceFactory();
  GenericWebApplicationContext ctx=new GenericWebApplicationContext(){
    @Override public Map getBeansOfType(    Class aClass) throws BeansException {
      if (org.codehaus.enunciate.modules.rest.EndpointOne.class.equals(aClass)) {
        HashMap<String,Object> beansOfType=new HashMap<String,Object>();
        beansOfType.put(""String_Node_Str"",advisedEndpoint);
        return beansOfType;
      }
      return super.getBeansOfType(aClass);
    }
  }
;
  factory.setEndpointClasses(new Class[]{EndpointOneImpl.class});
  factory.setApplicationContext(ctx);
  nouns=new String[]{""String_Node_Str"",""String_Node_Str""};
  resources=new ArrayList<RESTResource>(factory.getRESTResources());
  for (  String noun : nouns) {
    String context=""String_Node_Str"";
    if ((""String_Node_Str"".equals(noun)) || (""String_Node_Str"".equals(noun))) {
      context=""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(noun)) {
      context=""String_Node_Str"";
    }
    RESTResource resource=factory.getRESTResource(noun,context);
    assertNotNull(resource);
    for (    VerbType verbType : VerbType.values()) {
      RESTOperation operation=resource.getOperation(verbType);
      assertSame(advisedEndpoint,operation.getEndpoint());
      assertNotNull(operation);
    }
    resources.remove(resource);
  }
  assertTrue(resources.isEmpty());
}",0.8853797019162527
177202,"/** 
 * tests the handleRESTOperation method.
 */
public void testHandleRESTOperation() throws Exception {
  RESTResource resource=new RESTResource(""String_Node_Str"");
  resource.addOperation(VerbType.update,new MockRESTEndpoint(),MockRESTEndpoint.class.getMethod(""String_Node_Str"",String.class,RootElementExample.class,Integer.TYPE,String[].class));
  RESTResourceXMLExporter controller=new RESTResourceXMLExporter(""String_Node_Str"",""String_Node_Str"",resource);
  HttpServletRequest request=createMock(HttpServletRequest.class);
  HttpServletResponse response=createMock(HttpServletResponse.class);
  response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED,""String_Node_Str"" + VerbType.create);
  replay(request,response);
  controller.handleRESTOperation(""String_Node_Str"",VerbType.create,request,response);
  verify(request,response);
  reset(request,response);
  JAXBContext context=JAXBContext.newInstance(RootElementExample.class);
  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  context.createMarshaller().marshal(new RootElementExample(),bytes);
  expect(request.getParameterValues(""String_Node_Str"")).andReturn(new String[]{""String_Node_Str""});
  expect(request.getParameterValues(""String_Node_Str"")).andReturn(new String[]{""String_Node_Str"",""String_Node_Str""});
  expect(request.getInputStream()).andReturn(new ByteArrayServletInputStream(bytes.toByteArray()));
  replay(request,response);
  ModelAndView modelAndView=controller.handleRESTOperation(""String_Node_Str"",VerbType.update,request,response);
  verify(request,response);
  RESTResultView view=(RESTResultView)modelAndView.getView();
  assertNotNull(view.getResult());
  assertTrue(view.getResult() instanceof RootElementExample);
  reset(request,response);
}","/** 
 * tests the handleRESTOperation method.
 */
public void testHandleRESTOperation() throws Exception {
  RESTResource resource=new RESTResource(""String_Node_Str""){
    @Override public Set<VerbType> getSupportedVerbs(){
      return new TreeSet(Arrays.asList(VerbType.values()));
    }
  }
;
  resource.addOperation(VerbType.update,new MockRESTEndpoint(),MockRESTEndpoint.class.getMethod(""String_Node_Str"",String.class,RootElementExample.class,Integer.TYPE,String[].class));
  RESTResourceXMLExporter controller=new RESTResourceXMLExporter(resource);
  controller.setApplicationContext(new GenericApplicationContext());
  HttpServletRequest request=createMock(HttpServletRequest.class);
  HttpServletResponse response=createMock(HttpServletResponse.class);
  response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED,""String_Node_Str"" + VerbType.create);
  replay(request,response);
  controller.handleRESTOperation(""String_Node_Str"",VerbType.create,request,response);
  verify(request,response);
  reset(request,response);
  JAXBContext context=JAXBContext.newInstance(RootElementExample.class);
  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  context.createMarshaller().marshal(new RootElementExample(),bytes);
  expect(request.getParameterValues(""String_Node_Str"")).andReturn(new String[]{""String_Node_Str""});
  expect(request.getParameterValues(""String_Node_Str"")).andReturn(new String[]{""String_Node_Str"",""String_Node_Str""});
  expect(request.getInputStream()).andReturn(new ByteArrayServletInputStream(bytes.toByteArray()));
  replay(request,response);
  ModelAndView modelAndView=controller.handleRESTOperation(""String_Node_Str"",VerbType.update,request,response);
  verify(request,response);
  RESTResultView view=(RESTResultView)modelAndView.getView();
  assertNotNull(view.getResult());
  assertTrue(view.getResult() instanceof RootElementExample);
  reset(request,response);
}",0.9317995069843878
177203,"/** 
 * Tests handling that the noun and proper noun are property extracted from the request.
 */
public void testHandleRequestInternal() throws Exception {
  RESTResourceXMLExporter exporter=new RESTResourceXMLExporter(""String_Node_Str"",""String_Node_Str"",new RESTResource(""String_Node_Str"")){
    @Override protected ModelAndView handleRESTOperation(    String properNoun,    VerbType verb,    HttpServletRequest request,    HttpServletResponse response) throws Exception {
      request.setAttribute(""String_Node_Str"",properNoun);
      request.setAttribute(""String_Node_Str"",verb);
      return null;
    }
  }
;
  HttpServletRequest request=createMock(HttpServletRequest.class);
  HttpServletResponse response=createMock(HttpServletResponse.class);
  expect(request.getRequestURI()).andReturn(""String_Node_Str"");
  expect(request.getMethod()).andReturn(""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",VerbType.read);
  replay(request,response);
  exporter.handleRequestInternal(request,response);
  verify(request,response);
  reset(request,response);
  expect(request.getRequestURI()).andReturn(""String_Node_Str"");
  expect(request.getMethod()).andReturn(""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",VerbType.create);
  replay(request,response);
  exporter.handleRequestInternal(request,response);
  verify(request,response);
  reset(request,response);
  expect(request.getRequestURI()).andReturn(""String_Node_Str"");
  expect(request.getMethod()).andReturn(""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",null);
  request.setAttribute(""String_Node_Str"",VerbType.update);
  replay(request,response);
  exporter.handleRequestInternal(request,response);
  verify(request,response);
  reset(request,response);
  expect(request.getRequestURI()).andReturn(""String_Node_Str"");
  expect(request.getMethod()).andReturn(""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",null);
  request.setAttribute(""String_Node_Str"",VerbType.delete);
  replay(request,response);
  exporter.handleRequestInternal(request,response);
  verify(request,response);
  reset(request,response);
  expect(request.getRequestURI()).andReturn(""String_Node_Str"");
  expect(request.getRequestURI()).andReturn(""String_Node_Str"");
  response.sendError(HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"");
  replay(request,response);
  exporter.handleRequestInternal(request,response);
  verify(request,response);
  reset(request,response);
  expect(request.getRequestURI()).andReturn(""String_Node_Str"");
  expect(request.getRequestURI()).andReturn(""String_Node_Str"");
  response.sendError(HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"");
  replay(request,response);
  exporter.handleRequestInternal(request,response);
  verify(request,response);
}","/** 
 * Tests handling that the noun and proper noun are property extracted from the request.
 */
public void testHandleRequestInternal() throws Exception {
  RESTResource restResource=new RESTResource(""String_Node_Str""){
    @Override public Set<VerbType> getSupportedVerbs(){
      return new TreeSet(Arrays.asList(VerbType.values()));
    }
  }
;
  RESTResourceXMLExporter exporter=new RESTResourceXMLExporter(restResource){
    @Override protected ModelAndView handleRESTOperation(    String properNoun,    VerbType verb,    HttpServletRequest request,    HttpServletResponse response) throws Exception {
      request.setAttribute(""String_Node_Str"",properNoun);
      request.setAttribute(""String_Node_Str"",verb);
      return null;
    }
  }
;
  exporter.setApplicationContext(new GenericApplicationContext());
  HttpServletRequest request=createMock(HttpServletRequest.class);
  HttpServletResponse response=createMock(HttpServletResponse.class);
  expect(request.getRequestURI()).andReturn(""String_Node_Str"");
  expect(request.getMethod()).andReturn(""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",VerbType.read);
  replay(request,response);
  exporter.handleRequestInternal(request,response);
  verify(request,response);
  reset(request,response);
  expect(request.getRequestURI()).andReturn(""String_Node_Str"");
  expect(request.getMethod()).andReturn(""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",VerbType.create);
  replay(request,response);
  exporter.handleRequestInternal(request,response);
  verify(request,response);
  reset(request,response);
  expect(request.getRequestURI()).andReturn(""String_Node_Str"");
  expect(request.getMethod()).andReturn(""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",null);
  request.setAttribute(""String_Node_Str"",VerbType.update);
  replay(request,response);
  exporter.handleRequestInternal(request,response);
  verify(request,response);
  reset(request,response);
  expect(request.getRequestURI()).andReturn(""String_Node_Str"");
  expect(request.getMethod()).andReturn(""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",null);
  request.setAttribute(""String_Node_Str"",VerbType.delete);
  replay(request,response);
  exporter.handleRequestInternal(request,response);
  verify(request,response);
  reset(request,response);
  expect(request.getRequestURI()).andReturn(""String_Node_Str"");
  expect(request.getRequestURI()).andReturn(""String_Node_Str"");
  response.sendError(HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"");
  replay(request,response);
  exporter.handleRequestInternal(request,response);
  verify(request,response);
  reset(request,response);
  expect(request.getRequestURI()).andReturn(""String_Node_Str"");
  expect(request.getRequestURI()).andReturn(""String_Node_Str"");
  response.sendError(HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"");
  replay(request,response);
  exporter.handleRequestInternal(request,response);
  verify(request,response);
}",0.9426325472487038
177204,"/** 
 * Gets the REST resource identified by the given context and noun.
 * @param context The context.
 * @param noun The noun.
 * @return The resource, or null if none was found.
 */
public RESTResource getRESTResource(String context,String noun){
  for (  RESTResource restResource : RESTResources) {
    if ((restResource.getNounContext().equals(context)) && (restResource.getNoun().equals(noun))) {
      return restResource;
    }
  }
  return null;
}","/** 
 * Gets the REST resource identified by the given context and noun.
 * @param noun The noun.
 * @param context The context.
 * @return The resource, or null if none was found.
 */
public RESTResource getRESTResource(String noun,String context){
  for (  RESTResource restResource : RESTResources) {
    if ((restResource.getNounContext().equals(context)) && (restResource.getNoun().equals(noun))) {
      return restResource;
    }
  }
  return null;
}",0.9277899343544858
177205,"/** 
 * Sets up the controller for servicing the specified REST endpoints.
 * @throws org.springframework.beans.BeansException If there was a problem setting it up.
 */
@Override protected void initApplicationContext() throws BeansException {
  super.initApplicationContext();
  Map<Class,Object> class2instances=new HashMap<Class,Object>();
  if (endpointClasses != null) {
    for (    Class endpointClass : endpointClasses) {
      Collection<Class> endpointTypes=findEndpointTypes(endpointClass);
      if (endpointTypes.isEmpty()) {
        throw new ApplicationContextException(""String_Node_Str"" + endpointClass.getName() + ""String_Node_Str"");
      }
      for (      Class endpointType : endpointTypes) {
        Method[] restMethods=endpointType.getDeclaredMethods();
        for (        Method restMethod : restMethods) {
          int modifiers=restMethod.getModifiers();
          if ((Modifier.isPublic(modifiers)) && (restMethod.isAnnotationPresent(Verb.class)) && (!isImplMethod(restMethod,endpointTypes))) {
            VerbType verb=restMethod.getAnnotation(Verb.class).value();
            Noun nounInfo=restMethod.getAnnotation(Noun.class);
            String context=nounInfo.context();
            if (""String_Node_Str"".equals(context)) {
              if (endpointType.isAnnotationPresent(NounContext.class)) {
                context=((NounContext)endpointType.getAnnotation(NounContext.class)).value();
              }
 else {
                context=""String_Node_Str"";
              }
            }
            String noun=restMethod.isAnnotationPresent(Noun.class) ? nounInfo.value() : restMethod.getName();
            RESTResource resource=getRESTResource(context,noun);
            if (resource == null) {
              resource=new RESTResource(noun,context);
              RESTResources.add(resource);
            }
            Object endpoint=class2instances.get(endpointType);
            if (endpoint == null) {
              endpoint=loadEndpointBean(endpointType,endpointClass);
              class2instances.put(endpointType,endpoint);
            }
            if (!resource.addOperation(verb,endpoint,restMethod)) {
              RESTOperation duplicateOperation=resource.getOperation(verb);
              throw new ApplicationContextException(""String_Node_Str"" + noun + ""String_Node_Str""+ context+ ""String_Node_Str""+ verb+ ""String_Node_Str""+ restMethod.getDeclaringClass().getName()+ ""String_Node_Str""+ restMethod.getName()+ ""String_Node_Str""+ duplicateOperation.method.getDeclaringClass().getName()+ ""String_Node_Str""+ duplicateOperation.method.getName()+ ""String_Node_Str"");
            }
          }
        }
      }
    }
  }
}","/** 
 * Sets up the controller for servicing the specified REST endpoints.
 * @throws org.springframework.beans.BeansException If there was a problem setting it up.
 */
@Override protected void initApplicationContext() throws BeansException {
  super.initApplicationContext();
  Map<Class,Object> class2instances=new HashMap<Class,Object>();
  if (endpointClasses != null) {
    for (    Class endpointClass : endpointClasses) {
      Collection<Class> endpointTypes=findEndpointTypes(endpointClass);
      if (endpointTypes.isEmpty()) {
        throw new ApplicationContextException(""String_Node_Str"" + endpointClass.getName() + ""String_Node_Str"");
      }
      for (      Class endpointType : endpointTypes) {
        Method[] restMethods=endpointType.getDeclaredMethods();
        for (        Method restMethod : restMethods) {
          int modifiers=restMethod.getModifiers();
          if ((Modifier.isPublic(modifiers)) && (restMethod.isAnnotationPresent(Verb.class)) && (!isImplMethod(restMethod,endpointTypes))) {
            VerbType verb=restMethod.getAnnotation(Verb.class).value();
            Noun nounInfo=restMethod.getAnnotation(Noun.class);
            String context=nounInfo.context();
            if (""String_Node_Str"".equals(context)) {
              if (endpointType.isAnnotationPresent(NounContext.class)) {
                context=((NounContext)endpointType.getAnnotation(NounContext.class)).value();
              }
 else {
                context=""String_Node_Str"";
              }
            }
            String noun=restMethod.isAnnotationPresent(Noun.class) ? nounInfo.value() : restMethod.getName();
            RESTResource resource=getRESTResource(noun,context);
            if (resource == null) {
              resource=new RESTResource(noun,context);
              RESTResources.add(resource);
            }
            Object endpoint=class2instances.get(endpointType);
            if (endpoint == null) {
              endpoint=loadEndpointBean(endpointType,endpointClass);
              class2instances.put(endpointType,endpoint);
            }
            if (!resource.addOperation(verb,endpoint,restMethod)) {
              RESTOperation duplicateOperation=resource.getOperation(verb);
              throw new ApplicationContextException(""String_Node_Str"" + noun + ""String_Node_Str""+ context+ ""String_Node_Str""+ verb+ ""String_Node_Str""+ restMethod.getDeclaringClass().getName()+ ""String_Node_Str""+ restMethod.getName()+ ""String_Node_Str""+ duplicateOperation.method.getDeclaringClass().getName()+ ""String_Node_Str""+ duplicateOperation.method.getName()+ ""String_Node_Str"");
            }
          }
        }
      }
    }
  }
}",0.998129442573887
177206,"public RESTResourceJSONExporter(String noun,String nounContext,RESTResourceFactory resourceFactory){
  super(noun,nounContext,resourceFactory);
}","public RESTResourceJSONExporter(RESTResource resource){
  super(resource);
}",0.6877828054298643
177207,"protected ModelAndView handleRequestInternal(HttpServletRequest request,HttpServletResponse response) throws Exception {
  String properNoun=null;
  Matcher matcher=urlPattern.matcher(request.getRequestURI());
  if (matcher.find()) {
    properNoun=matcher.group(1);
    if (""String_Node_Str"".equals(properNoun)) {
      properNoun=null;
    }
  }
 else {
    response.sendError(HttpServletResponse.SC_NOT_FOUND,request.getRequestURI());
    return null;
  }
  String httpMethod=request.getMethod().toUpperCase();
  VerbType verb=null;
  if (""String_Node_Str"".equals(httpMethod)) {
    verb=VerbType.create;
  }
 else   if (""String_Node_Str"".equals(httpMethod)) {
    verb=VerbType.read;
  }
 else   if (""String_Node_Str"".equals(httpMethod)) {
    verb=VerbType.update;
  }
 else   if (""String_Node_Str"".equals(httpMethod)) {
    verb=VerbType.delete;
  }
 else {
    response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED,""String_Node_Str"" + httpMethod);
    return null;
  }
  try {
    return handleRESTOperation(properNoun,verb,request,response);
  }
 catch (  Exception e) {
    if (this.exceptionHandler != null) {
      return this.exceptionHandler.resolveException(request,response,this,e);
    }
 else {
      throw e;
    }
  }
}","protected ModelAndView handleRequestInternal(HttpServletRequest request,HttpServletResponse response) throws Exception {
  String properNoun;
  Matcher matcher=urlPattern.matcher(request.getRequestURI());
  if (matcher.find()) {
    properNoun=matcher.group(1);
    if (""String_Node_Str"".equals(properNoun)) {
      properNoun=null;
    }
  }
 else {
    response.sendError(HttpServletResponse.SC_NOT_FOUND,request.getRequestURI());
    return null;
  }
  String httpMethod=request.getMethod().toUpperCase();
  VerbType verb;
  if (""String_Node_Str"".equals(httpMethod)) {
    verb=VerbType.create;
  }
 else   if (""String_Node_Str"".equals(httpMethod)) {
    verb=VerbType.read;
  }
 else   if (""String_Node_Str"".equals(httpMethod)) {
    verb=VerbType.update;
  }
 else   if (""String_Node_Str"".equals(httpMethod)) {
    verb=VerbType.delete;
  }
 else {
    response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED,""String_Node_Str"" + httpMethod);
    return null;
  }
  try {
    return handleRESTOperation(properNoun,verb,request,response);
  }
 catch (  Exception e) {
    if (this.exceptionHandler != null) {
      return this.exceptionHandler.resolveException(request,response,this,e);
    }
 else {
      throw e;
    }
  }
}",0.995967741935484
177208,"public RESTResourceXMLExporter(String noun,String nounContext,RESTResource resource){
  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();
  builderFactory.setNamespaceAware(false);
  try {
    documentBuilder=builderFactory.newDocumentBuilder();
  }
 catch (  ParserConfigurationException e) {
    throw new RuntimeException(e);
  }
  this.noun=noun;
  this.nounContext=nounContext;
  this.resource=resource;
  this.urlPattern=Pattern.compile(nounContext + ""String_Node_Str"" + noun+ ""String_Node_Str"");
}","public RESTResourceXMLExporter(RESTResource resource){
  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();
  builderFactory.setNamespaceAware(false);
  try {
    documentBuilder=builderFactory.newDocumentBuilder();
  }
 catch (  ParserConfigurationException e) {
    throw new RuntimeException(e);
  }
  this.resource=resource;
}",0.7661016949152543
177209,"@Override protected void initApplicationContext() throws BeansException {
  super.initApplicationContext();
  if (resource == null) {
    throw new ApplicationContextException(""String_Node_Str"" + this.noun + ""String_Node_Str""+ this.nounContext+ ""String_Node_Str"");
  }
  Set<VerbType> supportedVerbs=resource.getSupportedVerbs();
  String[] supportedMethods=new String[supportedVerbs.size()];
  int i=0;
  for (  VerbType supportedVerb : supportedVerbs) {
    String method;
switch (supportedVerb) {
case create:
      method=""String_Node_Str"";
    break;
case read:
  method=""String_Node_Str"";
break;
case update:
method=""String_Node_Str"";
break;
case delete:
method=""String_Node_Str"";
break;
default :
throw new IllegalStateException(""String_Node_Str"" + supportedVerb);
}
supportedMethods[i++]=method;
}
setSupportedMethods(supportedMethods);
}","@Override protected void initApplicationContext() throws BeansException {
  super.initApplicationContext();
  if (resource == null) {
    throw new ApplicationContextException(""String_Node_Str"");
  }
  String noun=resource.getNoun();
  String nounContext=resource.getNounContext();
  this.urlPattern=Pattern.compile(nounContext + ""String_Node_Str"" + noun+ ""String_Node_Str"");
  Set<VerbType> supportedVerbs=resource.getSupportedVerbs();
  String[] supportedMethods=new String[supportedVerbs.size()];
  int i=0;
  for (  VerbType supportedVerb : supportedVerbs) {
    String method;
switch (supportedVerb) {
case create:
      method=""String_Node_Str"";
    break;
case read:
  method=""String_Node_Str"";
break;
case update:
method=""String_Node_Str"";
break;
case delete:
method=""String_Node_Str"";
break;
default :
throw new IllegalStateException(""String_Node_Str"" + supportedVerb);
}
supportedMethods[i++]=method;
}
setSupportedMethods(supportedMethods);
}",0.8827126181211784
177210,"public Object getInstance(Object impl){
  return impl;
}","public Object getInstance(Object impl,Class... interfaces){
  return impl;
}",0.8484848484848485
177211,"/** 
 * Gets an instance of the specified service.
 * @param impl The base implementation object.
 * @return The instance.
 */
Object getInstance(Object impl);","/** 
 * Gets an instance of the specified service.
 * @param impl The base implementation object.
 * @param interfaces The interfaces to be implemented.
 * @return The instance.
 */
Object getInstance(Object impl,Class... interfaces);",0.8091603053435115
177212,"public EnunciateAnnotationProcessor(Enunciate enunciate) throws EnunciateException {
  super(null);
  if (enunciate == null) {
    throw new EnunciateException(""String_Node_Str"");
  }
 else   if (enunciate.getConfig() == null) {
    throw new EnunciateException(""String_Node_Str"");
  }
  this.enunciate=enunciate;
  EnunciateConfiguration config=this.enunciate.getConfig();
  String baseURL=config.getDeploymentProtocol() + ""String_Node_Str"" + config.getDeploymentHost();
  if (config.getDeploymentContext() != null) {
    baseURL+=config.getDeploymentContext();
  }
 else   if ((config.getLabel() != null) && (!""String_Node_Str"".equals(config.getLabel()))) {
    baseURL+=(""String_Node_Str"" + config.getLabel());
  }
  this.deploymentBaseURL=baseURL;
}","public EnunciateAnnotationProcessor(Enunciate enunciate,String... additionalApiClasses) throws EnunciateException {
  super(null);
  if (enunciate == null) {
    throw new EnunciateException(""String_Node_Str"");
  }
 else   if (enunciate.getConfig() == null) {
    throw new EnunciateException(""String_Node_Str"");
  }
  this.enunciate=enunciate;
  EnunciateConfiguration config=this.enunciate.getConfig();
  String baseURL=config.getDeploymentProtocol() + ""String_Node_Str"" + config.getDeploymentHost();
  if (config.getDeploymentContext() != null) {
    baseURL+=config.getDeploymentContext();
  }
 else   if ((config.getLabel() != null) && (!""String_Node_Str"".equals(config.getLabel()))) {
    baseURL+=(""String_Node_Str"" + config.getLabel());
  }
  this.deploymentBaseURL=baseURL;
  this.additionalApiClasses=additionalApiClasses;
}",0.9489603024574668
177213,"/** 
 * Getting the root model pulls all endpoint interfaces and schema types out of the source base, adds the classes specified to be included, and adds them to the model, then validates the model.
 * @return The root model.
 */
@Override protected EnunciateFreemarkerModel getRootModel() throws TemplateModelException {
  EnunciateFreemarkerModel model=(EnunciateFreemarkerModel)super.getRootModel();
  AnnotationProcessorEnvironment env=Context.getCurrentEnvironment();
  Collection<TypeDeclaration> typeDeclarations=env.getTypeDeclarations();
  debug(""String_Node_Str"");
  for (  TypeDeclaration declaration : typeDeclarations) {
    final boolean isEndpointInterface=isEndpointInterface(declaration);
    final boolean isRESTEndpoint=isRESTEndpoint(declaration);
    if (isEndpointInterface || isRESTEndpoint) {
      if (isEndpointInterface) {
        EndpointInterface endpointInterface=new EndpointInterface(declaration);
        info(""String_Node_Str"",declaration.getQualifiedName());
        endpointInterface.setSoapAddressBase(this.deploymentBaseURL);
        endpointInterface.setSoapAddressPath(getSoapAddressPath(endpointInterface));
        model.add(endpointInterface);
      }
      if (isRESTEndpoint) {
        RESTEndpoint restEndpoint=new RESTEndpoint((ClassDeclaration)declaration);
        info(""String_Node_Str"",declaration.getQualifiedName());
        model.add(restEndpoint);
      }
    }
 else     if (isPotentialSchemaType(declaration)) {
      TypeDefinition typeDef=createTypeDefinition((ClassDeclaration)declaration);
      loadTypeDef(typeDef,model);
    }
 else {
      debug(""String_Node_Str"",declaration.getQualifiedName());
    }
  }
  EnunciateConfiguration config=this.enunciate.getConfig();
  debug(""String_Node_Str"");
  for (  String jaxbClassImport : config.getJaxbClassImports()) {
    TypeDeclaration typeDeclaration=env.getTypeDeclaration(jaxbClassImport);
    if (typeDeclaration == null) {
      throw new IllegalStateException(""String_Node_Str"" + jaxbClassImport);
    }
    if (!(typeDeclaration instanceof ClassDeclaration)) {
      throw new IllegalStateException(""String_Node_Str"" + jaxbClassImport);
    }
    TypeDefinition typeDef=createTypeDefinition((ClassDeclaration)typeDeclaration);
    loadTypeDef(typeDef,model);
  }
  for (  String ns : config.getNamespacesToPrefixes().keySet()) {
    String prefix=config.getNamespacesToPrefixes().get(ns);
    String old=model.getNamespacesToPrefixes().put(ns,prefix);
    debug(""String_Node_Str"",old,prefix,ns);
  }
  validate(model);
  return model;
}","/** 
 * Getting the root model pulls all endpoint interfaces and schema types out of the source base, adds the classes specified to be included, and adds them to the model, then validates the model.
 * @return The root model.
 */
@Override protected EnunciateFreemarkerModel getRootModel() throws TemplateModelException {
  EnunciateFreemarkerModel model=(EnunciateFreemarkerModel)super.getRootModel();
  AnnotationProcessorEnvironment env=Context.getCurrentEnvironment();
  Collection<TypeDeclaration> typeDeclarations=env.getTypeDeclarations();
  if (this.additionalApiClasses != null) {
    for (    String additionalApiClass : this.additionalApiClasses) {
      TypeDeclaration declaration=env.getTypeDeclaration(additionalApiClass);
      if (declaration != null) {
        typeDeclarations.add(declaration);
      }
 else {
        this.enunciate.warn(""String_Node_Str"",additionalApiClass);
      }
    }
  }
  debug(""String_Node_Str"");
  for (  TypeDeclaration declaration : typeDeclarations) {
    final boolean isEndpointInterface=isEndpointInterface(declaration);
    final boolean isRESTEndpoint=isRESTEndpoint(declaration);
    if (isEndpointInterface || isRESTEndpoint) {
      if (isEndpointInterface) {
        EndpointInterface endpointInterface=new EndpointInterface(declaration);
        info(""String_Node_Str"",declaration.getQualifiedName());
        endpointInterface.setSoapAddressBase(this.deploymentBaseURL);
        endpointInterface.setSoapAddressPath(getSoapAddressPath(endpointInterface));
        model.add(endpointInterface);
      }
      if (isRESTEndpoint) {
        RESTEndpoint restEndpoint=new RESTEndpoint((ClassDeclaration)declaration);
        info(""String_Node_Str"",declaration.getQualifiedName());
        model.add(restEndpoint);
      }
    }
 else     if (isPotentialSchemaType(declaration)) {
      TypeDefinition typeDef=createTypeDefinition((ClassDeclaration)declaration);
      loadTypeDef(typeDef,model);
    }
 else {
      debug(""String_Node_Str"",declaration.getQualifiedName());
    }
  }
  EnunciateConfiguration config=this.enunciate.getConfig();
  for (  String ns : config.getNamespacesToPrefixes().keySet()) {
    String prefix=config.getNamespacesToPrefixes().get(ns);
    String old=model.getNamespacesToPrefixes().put(ns,prefix);
    debug(""String_Node_Str"",old,prefix,ns);
  }
  validate(model);
  return model;
}",0.7365002030044661
177214,"public EnunciateAnnotationProcessorFactory(Enunciate enunciate) throws EnunciateException {
  this.processor=new EnunciateAnnotationProcessor(enunciate);
  this.round=0;
}","public EnunciateAnnotationProcessorFactory(Enunciate enunciate,String... additionalApiClasses) throws EnunciateException {
  this.processor=new EnunciateAnnotationProcessor(enunciate,additionalApiClasses);
  this.round=0;
}",0.868020304568528
177215,"/** 
 * Loads the configuration specified by the given stream.
 * @param in The stream.
 */
public void load(InputStream in) throws IOException, SAXException {
  Digester digester=createDigester();
  digester.setErrorHandler(this);
  digester.setValidating(true);
  digester.setSchema(EnunciateConfiguration.class.getResource(""String_Node_Str"").toString());
  digester.push(this);
  digester.addSetProperties(""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",""String_Node_Str"",DefaultValidator.class);
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addCallMethod(""String_Node_Str"",""String_Node_Str"",2);
  digester.addCallParam(""String_Node_Str"",0,""String_Node_Str"");
  digester.addCallParam(""String_Node_Str"",1,""String_Node_Str"");
  digester.addSetProperties(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  digester.addCallMethod(""String_Node_Str"",""String_Node_Str"",2);
  digester.addCallParam(""String_Node_Str"",0,""String_Node_Str"");
  digester.addCallParam(""String_Node_Str"",1,""String_Node_Str"");
  digester.addSetProperties(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  digester.addCallMethod(""String_Node_Str"",""String_Node_Str"",2);
  digester.addCallParam(""String_Node_Str"",0,""String_Node_Str"");
  digester.addCallParam(""String_Node_Str"",1,""String_Node_Str"");
  for (  DeploymentModule module : getAllModules()) {
    String pattern=String.format(""String_Node_Str"",module.getName());
    digester.addRule(pattern,new PushModuleRule(module));
    digester.addSetProperties(pattern);
    RuleSet configRules=module.getConfigurationRules();
    if (configRules != null) {
      digester.addRuleSet(configRules);
    }
  }
  digester.parse(in);
}","/** 
 * Loads the configuration specified by the given stream.
 * @param in The stream.
 */
public void load(InputStream in) throws IOException, SAXException {
  Digester digester=createDigester();
  digester.setErrorHandler(this);
  digester.setValidating(true);
  digester.setSchema(EnunciateConfiguration.class.getResource(""String_Node_Str"").toString());
  digester.push(this);
  digester.addSetProperties(""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",""String_Node_Str"",DefaultValidator.class);
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",APIImport.class);
  digester.addSetProperties(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",APIImport.class);
  digester.addSetProperties(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addSetProperties(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  digester.addCallMethod(""String_Node_Str"",""String_Node_Str"",2);
  digester.addCallParam(""String_Node_Str"",0,""String_Node_Str"");
  digester.addCallParam(""String_Node_Str"",1,""String_Node_Str"");
  digester.addSetProperties(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  digester.addCallMethod(""String_Node_Str"",""String_Node_Str"",2);
  digester.addCallParam(""String_Node_Str"",0,""String_Node_Str"");
  digester.addCallParam(""String_Node_Str"",1,""String_Node_Str"");
  for (  DeploymentModule module : getAllModules()) {
    String pattern=String.format(""String_Node_Str"",module.getName());
    digester.addRule(pattern,new PushModuleRule(module));
    digester.addSetProperties(pattern);
    RuleSet configRules=module.getConfigurationRules();
    if (configRules != null) {
      digester.addRuleSet(configRules);
    }
  }
  digester.parse(in);
}",0.8245392577631911
177216,"/** 
 * The type of the accessor.
 * @return The type of the accessor.
 */
public TypeMirror getAccessorType(){
  TypeMirror accessorType;
  Declaration delegate=getDelegate();
  if (delegate instanceof FieldDeclaration) {
    accessorType=((FieldDeclaration)delegate).getType();
  }
 else {
    accessorType=((PropertyDeclaration)delegate).getPropertyType();
  }
  return accessorType;
}","/** 
 * The type of the accessor.
 * @return The type of the accessor.
 */
public TypeMirror getAccessorType(){
  TypeMirror accessorType;
  Declaration delegate=getDelegate();
  if (delegate instanceof FieldDeclaration) {
    accessorType=((FieldDeclaration)delegate).getType();
  }
 else {
    accessorType=((PropertyDeclaration)delegate).getPropertyType();
  }
  MapType mapType=MapTypeUtil.findMapType(accessorType);
  if (mapType != null) {
    accessorType=mapType;
  }
  return accessorType;
}",0.8288288288288288
177217,"/** 
 * The qname for the referenced element, if this element is a reference to a global element, or null if this element is not a reference element.
 * @return The qname for the referenced element, if exists.
 */
public QName getRef(){
  QName ref=null;
  XmlType baseType=getBaseType();
  if (baseType.isAnonymous()) {
    TypeDefinition baseTypeDef=((XmlClassType)baseType).getTypeDefinition();
    if (baseTypeDef.getAnnotation(XmlRootElement.class) != null) {
      RootElementDeclaration rootElement=new RootElementDeclaration((ClassDeclaration)baseTypeDef.getDelegate(),baseTypeDef);
      ref=new QName(rootElement.getNamespace(),rootElement.getName());
    }
  }
  return ref;
}","/** 
 * The qname for the referenced element, if this element is a reference to a global element, or null if this element is not a reference element.
 * @return The qname for the referenced element, if exists.
 */
public QName getRef(){
  QName ref=null;
  XmlType baseType=getBaseType();
  if ((baseType.isAnonymous()) && (baseType instanceof XmlClassType)) {
    TypeDefinition baseTypeDef=((XmlClassType)baseType).getTypeDefinition();
    if (baseTypeDef.getAnnotation(XmlRootElement.class) != null) {
      RootElementDeclaration rootElement=new RootElementDeclaration((ClassDeclaration)baseTypeDef.getDelegate(),baseTypeDef);
      ref=new QName(rootElement.getNamespace(),rootElement.getName());
    }
  }
  return ref;
}",0.9717114568599716
177218,"/** 
 * Finds the adapter type of the specified type, given the referer and the package of the referer.
 * @param adaptedType The type for which to find the adapter.
 * @param referer The referer.
 * @param pckg The package of the referer.
 * @return The adapter type, or null if none was found.
 */
private static AdapterType findAdapterType(TypeMirror adaptedType,Declaration referer,PackageDeclaration pckg){
  adaptedType=unwrapComponentType(adaptedType);
  XmlJavaTypeAdapter typeAdapterInfo=referer.getAnnotation(XmlJavaTypeAdapter.class);
  if (adaptedType instanceof DeclaredType) {
    if (typeAdapterInfo == null) {
      typeAdapterInfo=((DeclaredType)adaptedType).getDeclaration().getAnnotation(XmlJavaTypeAdapter.class);
    }
    if (typeAdapterInfo == null) {
      typeAdapterInfo=getAdaptersOfPackage(pckg).get(((DeclaredType)adaptedType).getDeclaration().getQualifiedName());
    }
    if (typeAdapterInfo != null) {
      ClassType adapterTypeMirror;
      try {
        Class adaptedClass=typeAdapterInfo.value();
        AnnotationProcessorEnvironment ape=Context.getCurrentEnvironment();
        adapterTypeMirror=(ClassType)ape.getTypeUtils().getDeclaredType(ape.getTypeDeclaration(adaptedClass.getName()));
      }
 catch (      MirroredTypeException e) {
        adapterTypeMirror=(ClassType)e.getTypeMirror();
      }
      AdapterType adapterType=new AdapterType(adapterTypeMirror);
      if (!adaptedType.equals(adapterType.getAdaptedType())) {
        throw new ValidationException(referer.getPosition(),""String_Node_Str"" + adapterTypeMirror.getDeclaration().getQualifiedName() + ""String_Node_Str""+ adaptedType);
      }
      return adapterType;
    }
  }
 else   if (typeAdapterInfo != null) {
    throw new ValidationException(referer.getPosition(),""String_Node_Str"" + adaptedType + ""String_Node_Str"");
  }
  return null;
}","/** 
 * Finds the adapter type of the specified type, given the referer and the package of the referer.
 * @param adaptedType The type for which to find the adapter.
 * @param referer The referer.
 * @param pckg The package of the referer.
 * @return The adapter type, or null if none was found.
 */
private static AdapterType findAdapterType(TypeMirror adaptedType,Declaration referer,PackageDeclaration pckg){
  adaptedType=unwrapComponentType(adaptedType);
  XmlJavaTypeAdapter typeAdapterInfo=referer != null ? referer.getAnnotation(XmlJavaTypeAdapter.class) : null;
  if (adaptedType instanceof DeclaredType) {
    if (typeAdapterInfo == null) {
      typeAdapterInfo=((DeclaredType)adaptedType).getDeclaration().getAnnotation(XmlJavaTypeAdapter.class);
    }
    if ((typeAdapterInfo == null) && (pckg != null)) {
      typeAdapterInfo=getAdaptersOfPackage(pckg).get(((DeclaredType)adaptedType).getDeclaration().getQualifiedName());
    }
    if (typeAdapterInfo != null) {
      ClassType adapterTypeMirror;
      try {
        Class adaptedClass=typeAdapterInfo.value();
        AnnotationProcessorEnvironment ape=Context.getCurrentEnvironment();
        adapterTypeMirror=(ClassType)ape.getTypeUtils().getDeclaredType(ape.getTypeDeclaration(adaptedClass.getName()));
      }
 catch (      MirroredTypeException e) {
        adapterTypeMirror=(ClassType)e.getTypeMirror();
      }
      AdapterType adapterType=new AdapterType(adapterTypeMirror);
      if (!adaptedType.equals(adapterType.getAdaptedType())) {
        throw new ValidationException(referer.getPosition(),""String_Node_Str"" + adapterTypeMirror.getDeclaration().getQualifiedName() + ""String_Node_Str""+ adaptedType);
      }
      return adapterType;
    }
  }
 else   if (typeAdapterInfo != null) {
    throw new ValidationException(referer.getPosition(),""String_Node_Str"" + adaptedType + ""String_Node_Str"");
  }
  return null;
}",0.9880159786950732
177219,"public TypeMirror getType(){
  return property.getPropertyType();
}","public TypeMirror getType(){
  TypeMirror propertyType=property.getPropertyType();
  MapType mapType=MapTypeUtil.findMapType(propertyType);
  if (mapType != null) {
    propertyType=mapType;
  }
  return propertyType;
}",0.4195804195804196
177220,"public WebMethod(MethodDeclaration delegate,EndpointInterface endpointInterface){
  super(delegate);
  this.annotation=getAnnotation(javax.jws.WebMethod.class);
  this.oneWay=getAnnotation(Oneway.class) != null;
  this.endpointInterface=endpointInterface;
  this.webResult=new WebResult(getReturnType(),this);
  Collection<ParameterDeclaration> parameters=getParameters();
  Collection<WebParam> webParameters=new ArrayList<WebParam>(parameters.size());
  for (  ParameterDeclaration parameter : parameters) {
    webParameters.add(new WebParam(parameter,this));
  }
  this.webParams=webParameters;
  Collection<WebFault> webFaults=new ArrayList<WebFault>();
  for (  ReferenceType referenceType : getThrownTypes()) {
    if (!(referenceType instanceof DeclaredType)) {
      throw new ValidationException(getPosition(),""String_Node_Str"");
    }
    TypeDeclaration declaration=((DeclaredType)referenceType).getDeclaration();
    if (declaration == null) {
      throw new ValidationException(getPosition(),""String_Node_Str"" + referenceType);
    }
    webFaults.add(new WebFault((ClassDeclaration)declaration));
  }
  this.webFaults=webFaults;
  Collection<WebMessage> messages=new ArrayList<WebMessage>();
  SOAPBinding.Style bindingStyle=getSoapBindingStyle();
  for (  WebParam webParam : webParameters) {
    if (webParam.isHeader()) {
      messages.add(webParam);
    }
  }
  if (webResult.isHeader()) {
    messages.add(webResult);
  }
  if (bindingStyle == SOAPBinding.Style.DOCUMENT) {
    SOAPBinding.ParameterStyle parameterStyle=getSoapParameterStyle();
    if (parameterStyle == SOAPBinding.ParameterStyle.WRAPPED) {
      messages.add(new RequestWrapper(this));
      if (!isOneWay()) {
        messages.add(new ResponseWrapper(this));
      }
      messages.addAll(webFaults);
    }
 else {
      for (      WebParam webParam : webParameters) {
        if (!webParam.isHeader()) {
          messages.add(webParam);
        }
      }
      if ((!isOneWay()) && (!(getReturnType() instanceof VoidType))) {
        messages.add(webResult);
      }
      messages.addAll(webFaults);
    }
  }
 else {
    messages.add(new RPCInputMessage(this));
    messages.add(new RPCOutputMessage(this));
    messages.addAll(webFaults);
  }
  this.messages=messages;
}","public WebMethod(MethodDeclaration delegate,EndpointInterface endpointInterface){
  super(delegate);
  this.annotation=getAnnotation(javax.jws.WebMethod.class);
  this.oneWay=getAnnotation(Oneway.class) != null;
  this.endpointInterface=endpointInterface;
  TypeMirror returnType=getReturnType();
  MapType mapType=MapTypeUtil.findMapType(returnType);
  if (mapType != null) {
    returnType=mapType;
  }
  this.webResult=new WebResult(returnType,this);
  Collection<ParameterDeclaration> parameters=getParameters();
  Collection<WebParam> webParameters=new ArrayList<WebParam>(parameters.size());
  for (  ParameterDeclaration parameter : parameters) {
    webParameters.add(new WebParam(parameter,this));
  }
  this.webParams=webParameters;
  Collection<WebFault> webFaults=new ArrayList<WebFault>();
  for (  ReferenceType referenceType : getThrownTypes()) {
    if (!(referenceType instanceof DeclaredType)) {
      throw new ValidationException(getPosition(),""String_Node_Str"");
    }
    TypeDeclaration declaration=((DeclaredType)referenceType).getDeclaration();
    if (declaration == null) {
      throw new ValidationException(getPosition(),""String_Node_Str"" + referenceType);
    }
    webFaults.add(new WebFault((ClassDeclaration)declaration));
  }
  this.webFaults=webFaults;
  Collection<WebMessage> messages=new ArrayList<WebMessage>();
  SOAPBinding.Style bindingStyle=getSoapBindingStyle();
  for (  WebParam webParam : webParameters) {
    if (webParam.isHeader()) {
      messages.add(webParam);
    }
  }
  if (webResult.isHeader()) {
    messages.add(webResult);
  }
  if (bindingStyle == SOAPBinding.Style.DOCUMENT) {
    SOAPBinding.ParameterStyle parameterStyle=getSoapParameterStyle();
    if (parameterStyle == SOAPBinding.ParameterStyle.WRAPPED) {
      messages.add(new RequestWrapper(this));
      if (!isOneWay()) {
        messages.add(new ResponseWrapper(this));
      }
      messages.addAll(webFaults);
    }
 else {
      for (      WebParam webParam : webParameters) {
        if (!webParam.isHeader()) {
          messages.add(webParam);
        }
      }
      if ((!isOneWay()) && (!(getReturnType() instanceof VoidType))) {
        messages.add(webResult);
      }
      messages.addAll(webFaults);
    }
  }
 else {
    messages.add(new RPCInputMessage(this));
    messages.add(new RPCOutputMessage(this));
    messages.addAll(webFaults);
  }
  this.messages=messages;
}",0.966652415562206
177221,"public MapType(InterfaceType interfaceType,TypeMirror keyType,TypeMirror valueType){
  super(interfaceType);
  this.keyType=keyType;
  this.valueType=valueType;
}","public MapType(InterfaceType interfaceType,TypeMirror keyType,TypeMirror valueType){
  super(interfaceType);
  TypeMirror mapKeyType=MapTypeUtil.findMapType(keyType);
  if (mapKeyType != null) {
    this.keyType=mapKeyType;
  }
 else {
    this.keyType=keyType;
  }
  TypeMirror mapValueType=MapTypeUtil.findMapType(valueType);
  if (mapValueType != null) {
    this.valueType=mapValueType;
  }
 else {
    this.valueType=valueType;
  }
}",0.5266666666666666
177222,"protected Iterator<EndpointInterface> getLoop(TemplateModel model) throws TemplateException {
  WsdlInfo wsdl=this.wsdl;
  if (wsdl == null) {
    wsdl=(WsdlInfo)model.getVariable(""String_Node_Str"");
    if (wsdl == null) {
      throw new MissingParameterException(""String_Node_Str"");
    }
  }
  return wsdl.getEndpointInterfaces().iterator();
}","protected Iterator<EndpointInterface> getLoop(TemplateModel model) throws TemplateException {
  WsdlInfo wsdl=this.wsdl;
  if (wsdl == null) {
    throw new MissingParameterException(""String_Node_Str"");
  }
  return wsdl.getEndpointInterfaces().iterator();
}",0.5785123966942148
177223,"protected Iterator<WebFault> getLoop(TemplateModel model) throws TemplateException {
  WebMethod webMethod=this.webMethod;
  if (webMethod == null) {
    webMethod=(WebMethod)model.getVariable(""String_Node_Str"");
    if (webMethod == null) {
      throw new MissingParameterException(""String_Node_Str"");
    }
  }
  return webMethod.getWebFaults().iterator();
}","protected Iterator<WebFault> getLoop(TemplateModel model) throws TemplateException {
  WebMethod webMethod=this.webMethod;
  if (webMethod == null) {
    throw new MissingParameterException(""String_Node_Str"");
  }
  return webMethod.getWebFaults().iterator();
}",0.6977491961414791
177224,"protected Iterator<WebFault> getLoop(TemplateModel model) throws TemplateException {
  WsdlInfo wsdl=this.wsdl;
  if (wsdl == null) {
    wsdl=(WsdlInfo)model.getVariable(""String_Node_Str"");
    if (wsdl == null) {
      throw new MissingParameterException(""String_Node_Str"");
    }
  }
  HashMap<String,WebFault> declaredFaults=new HashMap<String,WebFault>();
  for (  EndpointInterface ei : wsdl.getEndpointInterfaces()) {
    Collection<WebMethod> webMethods=ei.getWebMethods();
    for (    WebMethod webMethod : webMethods) {
      for (      WebFault webFault : webMethod.getWebFaults()) {
        declaredFaults.put(webFault.getQualifiedName(),webFault);
      }
    }
  }
  return declaredFaults.values().iterator();
}","protected Iterator<WebFault> getLoop(TemplateModel model) throws TemplateException {
  WsdlInfo wsdl=this.wsdl;
  if (wsdl == null) {
    throw new MissingParameterException(""String_Node_Str"");
  }
  HashMap<String,WebFault> declaredFaults=new HashMap<String,WebFault>();
  for (  EndpointInterface ei : wsdl.getEndpointInterfaces()) {
    Collection<WebMethod> webMethods=ei.getWebMethods();
    for (    WebMethod webMethod : webMethods) {
      for (      WebFault webFault : webMethod.getWebFaults()) {
        declaredFaults.put(webFault.getQualifiedName(),webFault);
      }
    }
  }
  return declaredFaults.values().iterator();
}",0.8848129126925899
177225,"protected Iterator<WebMessage> getLoop(TemplateModel model) throws TemplateException {
  WebMethod webMethod=this.webMethod;
  if (webMethod == null) {
    webMethod=(WebMethod)model.getVariable(""String_Node_Str"");
  }
  WsdlInfo wsdlInfo=this.wsdl;
  if (wsdlInfo == null) {
    wsdlInfo=(WsdlInfo)model.getVariable(""String_Node_Str"");
  }
  if ((webMethod == null) && (wsdlInfo == null)) {
    throw new MissingParameterException(""String_Node_Str"",""String_Node_Str"");
  }
  Collection<WebMessage> messages;
  if (webMethod != null) {
    messages=webMethod.getMessages();
  }
 else {
    messages=new ArrayList<WebMessage>();
    HashSet<String> foundFaults=new HashSet<String>();
    for (    EndpointInterface ei : wsdlInfo.getEndpointInterfaces()) {
      Collection<WebMethod> webMethods=ei.getWebMethods();
      for (      WebMethod method : webMethods) {
        for (        WebMessage webMessage : method.getMessages()) {
          if (webMessage.isFault() && !foundFaults.add(((WebFault)webMessage).getQualifiedName())) {
            continue;
          }
          messages.add(webMessage);
        }
      }
    }
  }
  Collection<WebMessage> io=new ArrayList<WebMessage>();
  for (  WebMessage message : messages) {
    boolean include=(includeHeaders || !message.isHeader());
    include&=(includeOutput || !message.isOutput());
    include&=(includeInput || !message.isInput());
    include&=(includeFaults || !message.isFault());
    if (include) {
      io.add(message);
    }
  }
  return io.iterator();
}","protected Iterator<WebMessage> getLoop(TemplateModel model) throws TemplateException {
  WebMethod webMethod=this.webMethod;
  WsdlInfo wsdlInfo=this.wsdl;
  if ((webMethod == null) && (wsdlInfo == null)) {
    throw new MissingParameterException(""String_Node_Str"",""String_Node_Str"");
  }
  Collection<WebMessage> messages;
  if (webMethod != null) {
    messages=webMethod.getMessages();
  }
 else {
    messages=new ArrayList<WebMessage>();
    HashSet<String> foundFaults=new HashSet<String>();
    for (    EndpointInterface ei : wsdlInfo.getEndpointInterfaces()) {
      Collection<WebMethod> webMethods=ei.getWebMethods();
      for (      WebMethod method : webMethods) {
        for (        WebMessage webMessage : method.getMessages()) {
          if (webMessage.isFault() && !foundFaults.add(((WebFault)webMessage).getQualifiedName())) {
            continue;
          }
          messages.add(webMessage);
        }
      }
    }
  }
  Collection<WebMessage> io=new ArrayList<WebMessage>();
  for (  WebMessage message : messages) {
    boolean include=(includeHeaders || !message.isHeader());
    include&=(includeOutput || !message.isOutput());
    include&=(includeInput || !message.isInput());
    include&=(includeFaults || !message.isFault());
    if (include) {
      io.add(message);
    }
  }
  return io.iterator();
}",0.9354275741710296
177226,"protected Iterator<WebMethod> getLoop(TemplateModel model) throws TemplateException {
  EndpointInterface endpointInterface=this.endpointInterface;
  if (endpointInterface == null) {
    endpointInterface=(EndpointInterface)model.getVariable(""String_Node_Str"");
    if (endpointInterface == null) {
      throw new MissingParameterException(""String_Node_Str"");
    }
  }
  return endpointInterface.getWebMethods().iterator();
}","protected Iterator<WebMethod> getLoop(TemplateModel model) throws TemplateException {
  EndpointInterface endpointInterface=this.endpointInterface;
  if (endpointInterface == null) {
    throw new MissingParameterException(""String_Node_Str"");
  }
  return endpointInterface.getWebMethods().iterator();
}",0.736986301369863
177227,"/** 
 * Getting the root model pulls all endpoint interfaces and schema types out of the source base, adds the classes specified to be included, and adds them to the model, then validates the model.
 * @return The root model.
 */
@Override protected EnunciateFreemarkerModel getRootModel() throws TemplateModelException {
  EnunciateFreemarkerModel model=(EnunciateFreemarkerModel)super.getRootModel();
  Collection<TypeDeclaration> typeDeclarations=getTypeDeclarations();
  for (  TypeDeclaration declaration : typeDeclarations) {
    if (isEndpointInterface(declaration)) {
      EndpointInterface endpointInterface=new EndpointInterface(declaration);
      if (isVerbose()) {
        System.out.println(declaration.getQualifiedName() + ""String_Node_Str"");
      }
      model.add(endpointInterface);
    }
 else     if (isRESTEndpoint(declaration)) {
      RESTEndpoint restEndpoint=new RESTEndpoint((ClassDeclaration)declaration);
      if (isVerbose()) {
        System.out.println(declaration.getQualifiedName() + ""String_Node_Str"");
      }
      model.add(restEndpoint);
    }
 else     if (isPotentialSchemaType(declaration)) {
      TypeDefinition typeDef=createTypeDefinition((ClassDeclaration)declaration);
      if (typeDef != null) {
        if (isVerbose()) {
          System.out.println(String.format(""String_Node_Str"",declaration.getQualifiedName(),typeDef.getClass().getSimpleName(),typeDef.getNamespace() == null ? ""String_Node_Str"" : typeDef.getNamespace(),typeDef.getName()));
        }
        model.add(typeDef);
        RootElementDeclaration rootElement=createRootElementDeclaration((ClassDeclaration)declaration,typeDef);
        if (rootElement != null) {
          if (isVerbose()) {
            System.out.println(declaration.getQualifiedName() + ""String_Node_Str"");
          }
          model.add(rootElement);
        }
      }
    }
  }
  for (  String ns : this.config.getNamespacesToPrefixes().keySet()) {
    model.getNamespacesToPrefixes().put(ns,this.config.getNamespacesToPrefixes().get(ns));
  }
  validate(model);
  return model;
}","/** 
 * Getting the root model pulls all endpoint interfaces and schema types out of the source base, adds the classes specified to be included, and adds them to the model, then validates the model.
 * @return The root model.
 */
@Override protected EnunciateFreemarkerModel getRootModel() throws TemplateModelException {
  EnunciateFreemarkerModel model=(EnunciateFreemarkerModel)super.getRootModel();
  AnnotationProcessorEnvironment env=Context.getCurrentEnvironment();
  Collection<TypeDeclaration> typeDeclarations=env.getTypeDeclarations();
  for (  TypeDeclaration declaration : typeDeclarations) {
    if (isEndpointInterface(declaration)) {
      EndpointInterface endpointInterface=new EndpointInterface(declaration);
      if (isVerbose()) {
        System.out.println(declaration.getQualifiedName() + ""String_Node_Str"");
      }
      model.add(endpointInterface);
    }
 else     if (isRESTEndpoint(declaration)) {
      RESTEndpoint restEndpoint=new RESTEndpoint((ClassDeclaration)declaration);
      if (isVerbose()) {
        System.out.println(declaration.getQualifiedName() + ""String_Node_Str"");
      }
      model.add(restEndpoint);
    }
 else     if (isPotentialSchemaType(declaration)) {
      TypeDefinition typeDef=createTypeDefinition((ClassDeclaration)declaration);
      loadTypeDef(typeDef,model);
    }
  }
  for (  String jaxbClassImport : this.config.getJaxbClassImports()) {
    TypeDeclaration typeDeclaration=env.getTypeDeclaration(jaxbClassImport);
    if (typeDeclaration == null) {
      throw new IllegalStateException(""String_Node_Str"" + jaxbClassImport);
    }
    if (!(typeDeclaration instanceof ClassDeclaration)) {
      throw new IllegalStateException(""String_Node_Str"" + jaxbClassImport);
    }
    TypeDefinition typeDef=createTypeDefinition((ClassDeclaration)typeDeclaration);
    loadTypeDef(typeDef,model);
  }
  for (  String ns : this.config.getNamespacesToPrefixes().keySet()) {
    model.getNamespacesToPrefixes().put(ns,this.config.getNamespacesToPrefixes().get(ns));
  }
  validate(model);
  return model;
}",0.6420111191684795
177228,"/** 
 * Loads the configuration specified by the given stream.
 * @param in The stream.
 */
public void load(InputStream in) throws IOException, SAXException {
  Digester digester=createDigester();
  digester.setErrorHandler(this);
  digester.setValidating(true);
  digester.setSchema(EnunciateConfiguration.class.getResource(""String_Node_Str"").toString());
  digester.push(this);
  digester.addSetProperties(""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",""String_Node_Str"",DefaultValidator.class);
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addCallMethod(""String_Node_Str"",""String_Node_Str"",2);
  digester.addCallParam(""String_Node_Str"",0,""String_Node_Str"");
  digester.addCallParam(""String_Node_Str"",1,""String_Node_Str"");
  for (  DeploymentModule module : getAllModules()) {
    String pattern=String.format(""String_Node_Str"",module.getName());
    digester.addRule(pattern,new PushModuleRule(module));
    digester.addSetProperties(pattern);
    RuleSet configRules=module.getConfigurationRules();
    if (configRules != null) {
      digester.addRuleSet(configRules);
    }
  }
  digester.parse(in);
}","/** 
 * Loads the configuration specified by the given stream.
 * @param in The stream.
 */
public void load(InputStream in) throws IOException, SAXException {
  Digester digester=createDigester();
  digester.setErrorHandler(this);
  digester.setValidating(true);
  digester.setSchema(EnunciateConfiguration.class.getResource(""String_Node_Str"").toString());
  digester.push(this);
  digester.addSetProperties(""String_Node_Str"");
  digester.addObjectCreate(""String_Node_Str"",""String_Node_Str"",DefaultValidator.class);
  digester.addSetNext(""String_Node_Str"",""String_Node_Str"");
  digester.addCallMethod(""String_Node_Str"",""String_Node_Str"",2);
  digester.addCallParam(""String_Node_Str"",0,""String_Node_Str"");
  digester.addCallParam(""String_Node_Str"",1,""String_Node_Str"");
  digester.addCallMethod(""String_Node_Str"",""String_Node_Str"",2);
  digester.addCallParam(""String_Node_Str"",0,""String_Node_Str"");
  digester.addCallParam(""String_Node_Str"",1,""String_Node_Str"");
  for (  DeploymentModule module : getAllModules()) {
    String pattern=String.format(""String_Node_Str"",module.getName());
    digester.addRule(pattern,new PushModuleRule(module));
    digester.addSetProperties(pattern);
    RuleSet configRules=module.getConfigurationRules();
    if (configRules != null) {
      digester.addRuleSet(configRules);
    }
  }
  digester.parse(in);
}",0.922707248698438
177229,"@Override protected EnunciateFreemarkerModel getRootModel() throws TemplateModelException {
  EnunciateFreemarkerModel model=(EnunciateFreemarkerModel)super.getRootModel();
  model.put(""String_Node_Str"",new PrefixMethod());
  model.put(""String_Node_Str"",new QNameMethod());
  AnnotationProcessorEnvironment env=Context.getCurrentEnvironment();
  Collection<TypeDeclaration> typeDeclarations=env.getTypeDeclarations();
  for (  TypeDeclaration declaration : typeDeclarations) {
    if (isEndpointInterface(declaration)) {
      EndpointInterface endpointInterface=new EndpointInterface(declaration);
      if (isVerbose()) {
        System.out.println(declaration.getQualifiedName() + ""String_Node_Str"");
      }
      model.add(endpointInterface);
    }
 else     if (isPotentialSchemaType(declaration)) {
      TypeDefinition typeDef=createTypeDefinition((ClassDeclaration)declaration);
      if (typeDef != null) {
        if (isVerbose()) {
          System.out.println(String.format(""String_Node_Str"",declaration.getQualifiedName(),typeDef.getClass().getSimpleName(),typeDef.getTargetNamespace(),typeDef.getName()));
        }
        model.add(typeDef);
        RootElementDeclaration rootElement=createRootElementDeclaration((ClassDeclaration)declaration,typeDef);
        if (rootElement != null) {
          if (isVerbose()) {
            System.out.println(declaration.getQualifiedName() + ""String_Node_Str"");
          }
          model.add(rootElement);
        }
      }
    }
  }
  Validator validator=new DefaultValidator();
  ValidationResult validationResult=validate(model,validator);
  if (validationResult.hasWarnings()) {
    for (    ValidationMessage warning : validationResult.getWarnings()) {
      env.getMessager().printWarning(warning.getPosition(),warning.getText());
    }
  }
  if (validationResult.hasErrors()) {
    for (    ValidationMessage error : validationResult.getErrors()) {
      env.getMessager().printError(error.getPosition(),error.getText());
    }
    throw new ModelValidationException();
  }
  return model;
}","@Override protected EnunciateFreemarkerModel getRootModel() throws TemplateModelException {
  EnunciateFreemarkerModel model=(EnunciateFreemarkerModel)super.getRootModel();
  model.put(""String_Node_Str"",new PrefixMethod());
  model.put(""String_Node_Str"",new QNameMethod());
  AnnotationProcessorEnvironment env=Context.getCurrentEnvironment();
  Collection<TypeDeclaration> typeDeclarations=env.getTypeDeclarations();
  for (  TypeDeclaration declaration : typeDeclarations) {
    if (isEndpointInterface(declaration)) {
      EndpointInterface endpointInterface=new EndpointInterface(declaration);
      if (isVerbose()) {
        System.out.println(declaration.getQualifiedName() + ""String_Node_Str"");
      }
      model.add(endpointInterface);
    }
 else     if (isPotentialSchemaType(declaration)) {
      TypeDefinition typeDef=createTypeDefinition((ClassDeclaration)declaration);
      if (typeDef != null) {
        if (isVerbose()) {
          System.out.println(String.format(""String_Node_Str"",declaration.getQualifiedName(),typeDef.getClass().getSimpleName(),typeDef.getTargetNamespace() == null ? ""String_Node_Str"" : typeDef.getTargetNamespace(),typeDef.getName()));
        }
        model.add(typeDef);
        RootElementDeclaration rootElement=createRootElementDeclaration((ClassDeclaration)declaration,typeDef);
        if (rootElement != null) {
          if (isVerbose()) {
            System.out.println(declaration.getQualifiedName() + ""String_Node_Str"");
          }
          model.add(rootElement);
        }
      }
    }
  }
  Validator validator=new DefaultValidator();
  ValidationResult validationResult=validate(model,validator);
  if (validationResult.hasWarnings()) {
    for (    ValidationMessage warning : validationResult.getWarnings()) {
      env.getMessager().printWarning(warning.getPosition(),warning.getText());
    }
  }
  if (validationResult.hasErrors()) {
    for (    ValidationMessage error : validationResult.getErrors()) {
      env.getMessager().printError(error.getPosition(),error.getText());
    }
    throw new ModelValidationException();
  }
  return model;
}",0.9858614905343878
177230,"public EnunciateFreemarkerModel(){
  this.namespacesToPrefixes=loadKnownNamespaces();
  this.knownTypes=loadKnownTypes();
  this.namespacesToSchemas=new HashMap<String,SchemaInfo>();
  this.namespacesToWsdls=new HashMap<String,WsdlInfo>();
  setVariable(""String_Node_Str"",this.namespacesToPrefixes);
  setVariable(""String_Node_Str"",this.namespacesToSchemas);
  setVariable(""String_Node_Str"",this.namespacesToWsdls);
}","public EnunciateFreemarkerModel(){
  this.namespacesToPrefixes=loadKnownNamespaces();
  this.knownTypes=loadKnownTypes();
  this.namespacesToSchemas=new HashMap<String,SchemaInfo>();
  this.namespacesToWsdls=new HashMap<String,WsdlInfo>();
  setVariable(""String_Node_Str"",new ArrayList<String>(this.namespacesToPrefixes.keySet()));
  setVariable(""String_Node_Str"",this.namespacesToPrefixes);
  setVariable(""String_Node_Str"",this.namespacesToSchemas);
  setVariable(""String_Node_Str"",this.namespacesToWsdls);
}",0.8876889848812095
177231,"/** 
 * Get the imported namespaces used by this WSDL.
 * @return The imported namespaces used by this WSDL.
 */
public Set<String> getImportedNamespaces(){
  Collection<EndpointInterface> endpointInterfaces=getEndpointInterfaces();
  if ((endpointInterfaces == null) || (endpointInterfaces.size() == 0)) {
    throw new IllegalStateException(""String_Node_Str"" + getTargetNamespace() + ""String_Node_Str"");
  }
  TreeSet<String> importedNamespaces=new TreeSet<String>();
  for (  EndpointInterface endpointInterface : endpointInterfaces) {
    importedNamespaces.addAll(endpointInterface.getReferencedNamespaces());
  }
  return importedNamespaces;
}","/** 
 * Get the imported namespaces used by this WSDL.
 * @return The imported namespaces used by this WSDL.
 */
public Set<String> getImportedNamespaces(){
  Collection<EndpointInterface> endpointInterfaces=getEndpointInterfaces();
  if ((endpointInterfaces == null) || (endpointInterfaces.size() == 0)) {
    throw new IllegalStateException(""String_Node_Str"" + getTargetNamespace() + ""String_Node_Str"");
  }
  HashSet<String> importedNamespaces=new HashSet<String>();
  for (  EndpointInterface endpointInterface : endpointInterfaces) {
    importedNamespaces.addAll(endpointInterface.getReferencedNamespaces());
  }
  return importedNamespaces;
}",0.987673343605547
177232,"/** 
 * The qname for the referenced accessor, if this accessor is a reference to a global element, or null if this element is not a reference element.
 * @return The qname for the referenced element, if exists.
 */
public QName getRef(){
  String namespace=getNamespace();
  String typeNamespace=getTypeDefinition().getTargetNamespace();
  if (!namespace.equals(typeNamespace)) {
    return new QName(namespace,getName());
  }
  return null;
}","/** 
 * The qname for the referenced accessor, if this accessor is a reference to a global element, or null if this element is not a reference element.
 * @return The qname for the referenced element, if exists.
 */
public QName getRef(){
  String namespace=getNamespace();
  String typeNamespace=getTypeDefinition().getTargetNamespace();
  if (namespace == null) {
    if (typeNamespace != null) {
      return new QName(namespace,getName());
    }
  }
 else   if (!namespace.equals(typeNamespace)) {
    return new QName(namespace,getName());
  }
  return null;
}",0.8800792864222002
177233,"/** 
 * The namespace of this package, or null if none.
 * @return The namespace of this package.
 */
public String getNamespace(){
  String namespace=""String_Node_Str"";
  if (xmlSchema != null) {
    namespace=xmlSchema.namespace();
  }
  return namespace;
}","/** 
 * The namespace of this package, or null if none.
 * @return The namespace of this package.
 */
public String getNamespace(){
  String namespace=null;
  if (xmlSchema != null) {
    namespace=xmlSchema.namespace();
  }
  return namespace;
}",0.9584158415841584
177234,"/** 
 * The set of namespace URIs that this web service references.
 * @return The set of namespace URIs that this web service references.
 */
public Set<String> getReferencedNamespaces(){
  TreeSet<String> namespaces=new TreeSet<String>();
  namespaces.add(getTargetNamespace());
  Collection<WebMethod> webMethods=getWebMethods();
  for (  WebMethod webMethod : webMethods) {
    namespaces.addAll(webMethod.getReferencedNamespaces());
  }
  return namespaces;
}","/** 
 * The set of namespace URIs that this web service references.
 * @return The set of namespace URIs that this web service references.
 */
public Set<String> getReferencedNamespaces(){
  HashSet<String> namespaces=new HashSet<String>();
  namespaces.add(getTargetNamespace());
  Collection<WebMethod> webMethods=getWebMethods();
  for (  WebMethod webMethod : webMethods) {
    namespaces.addAll(webMethod.getReferencedNamespaces());
  }
  return namespaces;
}",0.9827586206896552
177235,"/** 
 * A set of the reference namespace for this method.
 * @return A set of the reference namespace for this method.
 */
public Set<String> getReferencedNamespaces(){
  TreeSet<String> namespaces=new TreeSet<String>();
  Collection<WebMessage> messages=getMessages();
  for (  WebMessage message : messages) {
    for (    WebMessagePart part : message.getParts()) {
      namespaces.add(part.getElementQName().getNamespaceURI());
      if (part instanceof ImplicitSchemaElement) {
        ImplicitSchemaElement implicitElement=(ImplicitSchemaElement)part;
        QName typeQName=implicitElement.getTypeQName();
        if (typeQName != null) {
          namespaces.add(typeQName.getNamespaceURI());
        }
        if (implicitElement instanceof ImplicitRootElement) {
          for (          ImplicitChildElement childElement : ((ImplicitRootElement)implicitElement).getChildElements()) {
            namespaces.add(childElement.getTypeQName().getNamespaceURI());
          }
        }
      }
    }
  }
  return namespaces;
}","/** 
 * A set of the reference namespace for this method.
 * @return A set of the reference namespace for this method.
 */
public Set<String> getReferencedNamespaces(){
  HashSet<String> namespaces=new HashSet<String>();
  Collection<WebMessage> messages=getMessages();
  for (  WebMessage message : messages) {
    for (    WebMessagePart part : message.getParts()) {
      namespaces.add(part.getElementQName().getNamespaceURI());
      if (part instanceof ImplicitSchemaElement) {
        ImplicitSchemaElement implicitElement=(ImplicitSchemaElement)part;
        QName typeQName=implicitElement.getTypeQName();
        if (typeQName != null) {
          namespaces.add(typeQName.getNamespaceURI());
        }
        if (implicitElement instanceof ImplicitRootElement) {
          for (          ImplicitChildElement childElement : ((ImplicitRootElement)implicitElement).getChildElements()) {
            namespaces.add(childElement.getTypeQName().getNamespaceURI());
          }
        }
      }
    }
  }
  return namespaces;
}",0.9922630560928434
177236,"public ValidationResult validateElementRef(ElementRef elementRef){
  ValidationResult result=validateAccessor(elementRef);
  if (elementRef.getChoices().isEmpty()) {
    XmlTypeMirror baseType=elementRef.getBaseType();
    result.addError(elementRef.getPosition(),""String_Node_Str"" + new QName(baseType.getNamespace(),baseType.getName()).toString() + ""String_Node_Str"");
  }
  if ((elementRef.getAnnotation(XmlElement.class) != null) || (elementRef.getAnnotation(XmlElements.class) != null)) {
    result.addError(elementRef.getPosition(),""String_Node_Str"");
  }
  if (elementRef.isWrapped()) {
    XmlElementWrapper wrapper=elementRef.getAnnotation(XmlElementWrapper.class);
    if ((!""String_Node_Str"".equals(wrapper.namespace())) && (!elementRef.getTypeDefinition().getTargetNamespace().equals(wrapper.namespace()))) {
      result.addError(elementRef.getPosition(),""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  return result;
}","public ValidationResult validateElementRef(ElementRef elementRef){
  ValidationResult result=validateAccessor(elementRef);
  if (elementRef.getChoices().isEmpty()) {
    XmlTypeMirror baseType=elementRef.getBaseType();
    result.addError(elementRef.getPosition(),""String_Node_Str"" + new QName(baseType.getNamespace(),baseType.getName()).toString() + ""String_Node_Str"");
  }
  if ((elementRef.getAnnotation(XmlElement.class) != null) || (elementRef.getAnnotation(XmlElements.class) != null)) {
    result.addError(elementRef.getPosition(),""String_Node_Str"");
  }
  if (elementRef.isWrapped()) {
    XmlElementWrapper wrapper=elementRef.getAnnotation(XmlElementWrapper.class);
    String namespace=wrapper.namespace();
    String typeNamespace=elementRef.getTypeDefinition().getTargetNamespace();
    if (namespace == null) {
      namespace=""String_Node_Str"";
    }
    if (typeNamespace == null) {
      typeNamespace=""String_Node_Str"";
    }
    if ((!""String_Node_Str"".equals(namespace)) && (!typeNamespace.equals(namespace))) {
      result.addError(elementRef.getPosition(),""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  return result;
}",0.8166986564299424
177237,"public ValidationResult validateElement(Element element){
  ValidationResult result=validateAccessor(element);
  XmlElements xmlElements=element.getAnnotation(XmlElements.class);
  if ((element.isCollectionType()) && (element.getBaseType() != KnownXmlType.ANY_TYPE) && (xmlElements != null)&& (xmlElements.value() != null)&& (xmlElements.value().length > 1)) {
    result.addError(element.getPosition(),""String_Node_Str"");
  }
  if (element.isWrapped()) {
    XmlElementWrapper wrapper=element.getAnnotation(XmlElementWrapper.class);
    if ((!""String_Node_Str"".equals(wrapper.namespace())) && (!element.getTypeDefinition().getTargetNamespace().equals(wrapper.namespace()))) {
      result.addError(element.getPosition(),""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  return result;
}","public ValidationResult validateElement(Element element){
  ValidationResult result=validateAccessor(element);
  XmlElements xmlElements=element.getAnnotation(XmlElements.class);
  if ((element.isCollectionType()) && (element.getBaseType() != KnownXmlType.ANY_TYPE) && (xmlElements != null)&& (xmlElements.value() != null)&& (xmlElements.value().length > 1)) {
    result.addError(element.getPosition(),""String_Node_Str"");
  }
  if (element.isWrapped()) {
    XmlElementWrapper wrapper=element.getAnnotation(XmlElementWrapper.class);
    String namespace=wrapper.namespace();
    String typeNamespace=element.getTypeDefinition().getTargetNamespace();
    if (namespace == null) {
      namespace=""String_Node_Str"";
    }
    if (typeNamespace == null) {
      typeNamespace=""String_Node_Str"";
    }
    if ((!""String_Node_Str"".equals(namespace)) && (!typeNamespace.equals(namespace))) {
      result.addError(element.getPosition(),""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  return result;
}",0.7885906040268457
177238,"/** 
 * Processes the template.  Assumes that the model is already established.
 */
public void processTemplate() throws IOException, TemplateException {
  Configuration configuration=getConfiguration();
  Template template=configuration.getTemplate(getTemplateURL().toString());
  FreemarkerModel model=FreemarkerModel.get();
  if (model == null) {
    throw new IOException(""String_Node_Str"");
  }
  template.process(model,new OutputStreamWriter(System.out));
}","/** 
 * Processes the template.  Assumes that the model is already established.
 */
public void processTemplate() throws IOException, TemplateException {
  Configuration configuration=getConfiguration();
  configuration.setDefaultEncoding(""String_Node_Str"");
  Template template=configuration.getTemplate(getTemplateURL().toString());
  FreemarkerModel model=FreemarkerModel.get();
  if (model == null) {
    throw new IOException(""String_Node_Str"");
  }
  template.process(model,new OutputStreamWriter(System.out));
}",0.943934760448522
177239,"public boolean isEndpointInterface(TypeDeclaration declaration){
  boolean is=false;
  WebService ws=declaration.getAnnotation(WebService.class);
  if (ws != null) {
    is=(declaration instanceof InterfaceDeclaration);
    if (!is && declaration instanceof ClassDeclaration) {
      is=(ws.endpointInterface() == null);
    }
  }
  return is;
}","public boolean isEndpointInterface(TypeDeclaration declaration){
  boolean is=false;
  WebService ws=declaration.getAnnotation(WebService.class);
  if (ws != null) {
    is=(declaration instanceof InterfaceDeclaration) || ((ws.endpointInterface() != null) && (!""String_Node_Str"".equals(ws.endpointInterface())));
  }
  return is;
}",0.757396449704142
177240,"public void testValidity() throws Exception {
  DefaultJAXWSValidator validator=new DefaultJAXWSValidator();
  TypeDeclaration declaration=getDeclaration(""String_Node_Str"");
  assertFalse(validator.isEndpointInterface(declaration));
  try {
    new EndpointInterface(declaration,validator);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
  }
  declaration=getDeclaration(""String_Node_Str"");
  assertTrue(validator.isEndpointInterface(declaration));
  try {
    new EndpointInterface(declaration,validator);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
  }
  declaration=getDeclaration(""String_Node_Str"");
  assertTrue(validator.isEndpointInterface(declaration));
  try {
    new EndpointInterface(declaration,validator);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
  }
  declaration=getDeclaration(""String_Node_Str"");
  assertTrue(validator.isEndpointInterface(declaration));
  try {
    new EndpointInterface(declaration,validator);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
  }
}","@Test public void testValidity() throws Exception {
  DefaultJAXWSValidator validator=new DefaultJAXWSValidator();
  TypeDeclaration declaration=getDeclaration(""String_Node_Str"");
  assertFalse(validator.isEndpointInterface(declaration));
  try {
    new EndpointInterface(declaration,validator);
    fail(""String_Node_Str"");
  }
 catch (  ValidationException e) {
  }
  declaration=getDeclaration(""String_Node_Str"");
  assertTrue(validator.isEndpointInterface(declaration));
  try {
    new EndpointInterface(declaration,validator);
    fail(""String_Node_Str"");
  }
 catch (  ValidationException e) {
  }
  declaration=getDeclaration(""String_Node_Str"");
  assertTrue(validator.isEndpointInterface(declaration));
  try {
    new EndpointInterface(declaration,validator);
    fail(""String_Node_Str"");
  }
 catch (  ValidationException e) {
  }
  declaration=getDeclaration(""String_Node_Str"");
  assertTrue(validator.isEndpointInterface(declaration));
  try {
    new EndpointInterface(declaration,validator);
    fail(""String_Node_Str"");
  }
 catch (  ValidationException e) {
  }
}",0.9512867647058824
177241,"@Override public void onDetached(){
  for (  Chunk chunk : observingChunks) {
    if (chunk.isLoaded()) {
      chunk.removeObserver(getOwner());
    }
  }
  observingChunks.clear();
}","@Override public void onDetached(){
  for (  Chunk chunk : observingChunks) {
    if (chunk.isLoaded()) {
      chunk.removeObserver(getOwner());
    }
  }
  observingChunks.clear();
  if (this instanceof Listener) {
    Spout.getEventManager().unRegisterEvents((Listener)this);
  }
}",0.782051282051282
177242,"public Map<Class<? extends Event>,Set<ListenerRegistration>> createRegisteredListeners(final Listener listener,Object plugin){
  Map<Class<? extends Event>,Set<ListenerRegistration>> ret=new HashMap<>();
  List<Method> methods=new ArrayList<>();
  Class<?> listenerClass=listener.getClass();
  while (listenerClass != null && !listenerClass.equals(Object.class) && !listenerClass.equals(Listener.class)) {
    try {
      methods.addAll(Arrays.asList(listenerClass.getDeclaredMethods()));
    }
 catch (    NoClassDefFoundError e) {
      LOGGER.severe(""String_Node_Str"" + plugin.getClass().getSimpleName() + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str""+ listenerClass);
      return ret;
    }
    listenerClass=listenerClass.getSuperclass();
  }
  for (  final Method method : methods) {
    final EventHandler eh=method.getAnnotation(EventHandler.class);
    if (eh == null) {
      continue;
    }
    if (method.getParameterTypes().length < 1) {
      LOGGER.severe(""String_Node_Str"");
      continue;
    }
    final Class<?> checkClass=method.getParameterTypes()[0];
    Class<? extends Event> eventClass;
    if (!Event.class.isAssignableFrom(checkClass) || method.getParameterTypes().length != 1) {
      LOGGER.severe(""String_Node_Str"");
      continue;
    }
    eventClass=checkClass.asSubclass(Event.class);
    method.setAccessible(true);
    Set<ListenerRegistration> eventSet=ret.get(eventClass);
    if (eventSet == null) {
      eventSet=new HashSet<>();
      ret.put(eventClass,eventSet);
    }
    eventSet.add(new ListenerRegistration(new EventExecutor(){
      @Override public void execute(      Event event) throws EventException {
        try {
          if (!checkClass.isAssignableFrom(event.getClass())) {
            throw new EventException(""String_Node_Str"");
          }
          method.invoke(listener,event);
        }
 catch (        InvocationTargetException e) {
          if (e.getCause() instanceof EventException) {
            throw (EventException)e.getCause();
          }
          throw new EventException(e.getCause());
        }
catch (        Throwable t) {
          throw new EventException(t);
        }
      }
    }
,eh.order(),plugin));
  }
  return ret;
}","public Map<Class<? extends Event>,Set<ListenerRegistration>> createRegisteredListeners(final Listener listener,Object plugin){
  Map<Class<? extends Event>,Set<ListenerRegistration>> ret=new HashMap<>();
  List<Method> methods=new ArrayList<>();
  Class<?> listenerClass=listener.getClass();
  while (listenerClass != null && !listenerClass.equals(Object.class) && !listenerClass.equals(Listener.class)) {
    try {
      methods.addAll(Arrays.asList(listenerClass.getDeclaredMethods()));
    }
 catch (    NoClassDefFoundError e) {
      LOGGER.severe(""String_Node_Str"" + plugin.getClass().getSimpleName() + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str""+ listenerClass);
      return ret;
    }
    listenerClass=listenerClass.getSuperclass();
  }
  for (  final Method method : methods) {
    final EventHandler eh=method.getAnnotation(EventHandler.class);
    if (eh == null) {
      continue;
    }
    if (method.getParameterTypes().length < 1) {
      LOGGER.severe(""String_Node_Str"");
      continue;
    }
    final Class<?> checkClass=method.getParameterTypes()[0];
    Class<? extends Event> eventClass;
    if (!Event.class.isAssignableFrom(checkClass) || method.getParameterTypes().length != 1) {
      LOGGER.severe(""String_Node_Str"");
      continue;
    }
    eventClass=checkClass.asSubclass(Event.class);
    method.setAccessible(true);
    Set<ListenerRegistration> eventSet=ret.get(eventClass);
    if (eventSet == null) {
      eventSet=new HashSet<>();
      ret.put(eventClass,eventSet);
    }
    eventSet.add(new ListenerRegistration(new MethodEventExecutor(checkClass,listener,method,eh),eh.order(),plugin));
  }
  return ret;
}",0.8438144329896907
177243,"@Override public void execute(Event event) throws EventException {
  try {
    if (!checkClass.isAssignableFrom(event.getClass())) {
      throw new EventException(""String_Node_Str"");
    }
    method.invoke(listener,event);
  }
 catch (  InvocationTargetException e) {
    if (e.getCause() instanceof EventException) {
      throw (EventException)e.getCause();
    }
    throw new EventException(e.getCause());
  }
catch (  Throwable t) {
    throw new EventException(t);
  }
}","@Override public void execute(Event event) throws EventException {
  try {
    if (!clazz.isAssignableFrom(event.getClass())) {
      throw new EventException(""String_Node_Str"");
    }
    method.invoke(listener,event);
  }
 catch (  InvocationTargetException e) {
    if (e.getCause() instanceof EventException) {
      throw (EventException)e.getCause();
    }
    throw new EventException(e.getCause());
  }
catch (  Throwable t) {
    throw new EventException(t);
  }
}",0.9863301787592008
177244,"@Override public void onEvent(SyncedMapEvent event){
  session.send(true,new SyncedMapMessage(event.getAssociatedObject().getId(),SyncedMapEvent.Action.ADD,event.getModifiedElements()));
}","@Override public void onEvent(SyncedMapEvent event){
  Entity e=Spout.getEngine().getEntity(playerUUID);
  if (e == null || !(e instanceof Player)) {
    SyncedMapRegistry.getRegistrationMap().unregisterListener(this);
  }
  session.send(true,new SyncedMapMessage(event.getAssociatedObject().getId(),SyncedMapEvent.Action.ADD,event.getModifiedElements()));
}",0.6886446886446886
177245,"@Override public void initializeServerSession(final ServerSession session){
  SyncedMapRegistry.getRegistrationMap().registerListener(new EventableListener<SyncedMapEvent>(){
    @Override public void onEvent(    SyncedMapEvent event){
      session.send(true,new SyncedMapMessage(event.getAssociatedObject().getId(),SyncedMapEvent.Action.ADD,event.getModifiedElements()));
    }
  }
);
  session.send(true,new SyncedMapMessage(SyncedMapRegistry.REGISTRATION_MAP,SyncedMapEvent.Action.SET,SyncedMapRegistry.getRegistrationMap().getItems()));
  for (  SyncedStringMap map : SyncedMapRegistry.getAll()) {
    session.send(true,new SyncedMapMessage(map.getId(),SyncedMapEvent.Action.SET,map.getItems()));
  }
}","@Override public void initializeServerSession(final ServerSession session){
  final UUID playerUUID=session.getPlayer().getUID();
  SyncedMapRegistry.getRegistrationMap().registerListener(new EventableListener<SyncedMapEvent>(){
    @Override public void onEvent(    SyncedMapEvent event){
      Entity e=Spout.getEngine().getEntity(playerUUID);
      if (e == null || !(e instanceof Player)) {
        SyncedMapRegistry.getRegistrationMap().unregisterListener(this);
      }
      session.send(true,new SyncedMapMessage(event.getAssociatedObject().getId(),SyncedMapEvent.Action.ADD,event.getModifiedElements()));
    }
  }
);
  session.send(true,new SyncedMapMessage(SyncedMapRegistry.REGISTRATION_MAP,SyncedMapEvent.Action.SET,SyncedMapRegistry.getRegistrationMap().getItems()));
  for (  SyncedStringMap map : SyncedMapRegistry.getAll()) {
    session.send(true,new SyncedMapMessage(map.getId(),SyncedMapEvent.Action.SET,map.getItems()));
  }
}",0.8548972188633616
177246,"/** 
 * Gets the Z-coordinate of the chunk the base of this CuboidBuffer is in
 * @return base chunk Z-coordinate
 */
public int getBaseChunkZ(){
  return baseZ << Chunk.BLOCKS.BITS;
}","/** 
 * Gets the Z-coordinate of the chunk the base of this CuboidBuffer is in
 * @return base chunk Z-coordinate
 */
public int getBaseChunkZ(){
  return baseZ >> Chunk.BLOCKS.BITS;
}",0.9891304347826086
177247,"/** 
 * Gets the Y-coordinate of the chunk the base of this CuboidBuffer is in
 * @return base chunk Y-coordinate
 */
public int getBaseChunkY(){
  return baseY << Chunk.BLOCKS.BITS;
}","/** 
 * Gets the Y-coordinate of the chunk the base of this CuboidBuffer is in
 * @return base chunk Y-coordinate
 */
public int getBaseChunkY(){
  return baseY >> Chunk.BLOCKS.BITS;
}",0.9891304347826086
177248,"/** 
 * Gets the X-coordinate of the chunk the base of this CuboidBuffer is in
 * @return base chunk X-coordinate
 */
public int getBaseChunkX(){
  return baseX << Chunk.BLOCKS.BITS;
}","/** 
 * Gets the X-coordinate of the chunk the base of this CuboidBuffer is in
 * @return base chunk X-coordinate
 */
public int getBaseChunkX(){
  return baseX >> Chunk.BLOCKS.BITS;
}",0.9891304347826086
177249,"/** 
 * Spout can display more than one line
 * @param id, arg
 */
public void spoutUpdate(int id,String arg){
  if (spoutMessages.containsKey(id)) {
    LabelComponent lbl=spoutMessages.get(id).get(LabelComponent.class);
    if (!arg.equals(lbl.getText())) {
      lbl.setText(arg);
    }
  }
 else {
    Widget w=new SpoutWidget();
    w.getTransform().setPosition(-0.975f,0.9f - (id * 0.075f));
    LabelComponent lbl=w.add(LabelComponent.class);
    lbl.setFont(SpoutRenderMaterials.DEFAULT_FONT);
    lbl.setText(arg);
    spoutMessages.put(id,w);
    attachWidget(plugin,w);
  }
}","/** 
 * Spout can display more than one line
 * @param id
 * @param arg
 */
public void spoutUpdate(int id,String arg){
  if (spoutMessages.containsKey(id)) {
    LabelComponent lbl=spoutMessages.get(id).get(LabelComponent.class);
    if (!arg.equals(lbl.getText())) {
      lbl.setText(arg);
    }
  }
 else {
    Widget w=new SpoutWidget();
    w.getTransform().setPosition(-0.975f,0.9f - (id * 0.075f));
    LabelComponent lbl=w.add(LabelComponent.class);
    lbl.setFont(SpoutRenderMaterials.DEFAULT_FONT);
    lbl.setText(arg);
    spoutMessages.put(id,w);
    attachWidget(plugin,w);
  }
}",0.9906858594411516
177250,"/** 
 * Creates a new task with the specified number of ticks between consecutive calls to   {@link #execute()}.
 * @param ticks The number of ticks.
 */
public SpoutTask(TaskManager manager,Scheduler scheduler,Object owner,Runnable task,boolean sync,long delay,long period,TaskPriority priority,boolean longLife){
  this.taskId=nextTaskId.getAndIncrement();
  this.nextCallTime=new AtomicLong(manager.getUpTime() + delay);
  this.executing=new AtomicBoolean(false);
  this.owner=owner;
  this.task=task;
  this.delay=delay;
  this.period=period;
  this.sync=sync;
  this.priority=priority;
  this.manager=manager;
  this.scheduler=scheduler;
  this.longLife=longLife;
}","/** 
 * Creates a new task with the specified period between consecutive calls to   {@link #pulse()}.
 */
public SpoutTask(TaskManager manager,Scheduler scheduler,Object owner,Runnable task,boolean sync,long delay,long period,TaskPriority priority,boolean longLife){
  this.taskId=nextTaskId.getAndIncrement();
  this.nextCallTime=new AtomicLong(manager.getUpTime() + delay);
  this.executing=new AtomicBoolean(false);
  this.owner=owner;
  this.task=task;
  this.delay=delay;
  this.period=period;
  this.sync=sync;
  this.priority=priority;
  this.manager=manager;
  this.scheduler=scheduler;
  this.longLife=longLife;
}",0.9473684210526316
177251,"private boolean connnect(){
  Protocol protocol=null;
  if (getArguments().protocol != null) {
    protocol=Protocol.getProtocol(getArguments().protocol);
  }
  if (protocol == null) {
    protocol=Protocol.getProtocol(""String_Node_Str"");
  }
  String address;
  if (getArguments().server == null) {
    address=""String_Node_Str"";
  }
 else {
    address=getArguments().server;
  }
  int port=getArguments().port != -1 ? getArguments().port : protocol.getDefaultPort();
  PortBindingImpl binding=new PortBindingImpl(protocol,new InetSocketAddress(address,port));
  ChannelFuture connect=bootstrap.connect(binding.getAddress());
  try {
    connect.await(10,TimeUnit.SECONDS);
  }
 catch (  InterruptedException ex) {
    getLogger().log(Level.SEVERE,""String_Node_Str"");
    stop();
    return false;
  }
  getLogger().log(Level.INFO,""String_Node_Str"" + address + ""String_Node_Str""+ port+ ""String_Node_Str""+ protocol.getName());
  Channel channel=connect.getChannel();
  if (connect.isSuccess()) {
    CommonHandler handler=channel.getPipeline().get(CommonHandler.class);
    SpoutClientSession session=new SpoutClientSession(this,channel,protocol);
    handler.setSession(session);
    session.getProtocol().initializeClientSession(session);
    this.session.set(session);
    final SpoutClientPlayer p=new SpoutClientPlayer(this,""String_Node_Str"",null,SpoutConfiguration.VIEW_DISTANCE.getInt() * Chunk.BLOCKS.SIZE);
    p.connect(session,p.getScene().getTransform());
    player.set(p);
  }
 else {
    getLogger().log(Level.SEVERE,""String_Node_Str"" + binding,connect.getCause());
    return false;
  }
  return true;
}","private boolean connnect(){
  Protocol protocol=null;
  if (getArguments().protocol != null) {
    protocol=Protocol.getProtocol(getArguments().protocol);
  }
  if (protocol == null) {
    protocol=Protocol.getProtocol(""String_Node_Str"");
  }
  String address;
  if (getArguments().server == null) {
    address=""String_Node_Str"";
  }
 else {
    address=getArguments().server;
  }
  int port=getArguments().port != -1 ? getArguments().port : protocol.getDefaultPort();
  PortBindingImpl binding=new PortBindingImpl(protocol,new InetSocketAddress(address,port));
  ChannelFuture connect=bootstrap.connect(binding.getAddress());
  try {
    connect.await(10,TimeUnit.SECONDS);
  }
 catch (  InterruptedException ex) {
    getLogger().log(Level.SEVERE,""String_Node_Str"");
    stop();
    return false;
  }
  Channel channel=connect.getChannel();
  if (connect.isSuccess()) {
    getLogger().log(Level.INFO,""String_Node_Str"" + address + ""String_Node_Str""+ port+ ""String_Node_Str""+ protocol.getName());
    CommonHandler handler=channel.getPipeline().get(CommonHandler.class);
    SpoutClientSession session=new SpoutClientSession(this,channel,protocol);
    handler.setSession(session);
    session.getProtocol().initializeClientSession(session);
    final SpoutClientPlayer p=new SpoutClientPlayer(this,""String_Node_Str"",new Transform().setPosition(new Point(getWorld(),0,0,0)),SpoutConfiguration.VIEW_DISTANCE.getInt() * Chunk.BLOCKS.SIZE);
    if (!p.connect(session,p.getScene().getTransform())) {
      getLogger().log(Level.SEVERE,""String_Node_Str"");
      return false;
    }
    this.session.set(session);
  }
 else {
    getLogger().log(Level.SEVERE,""String_Node_Str"" + binding,connect.getCause());
    return false;
  }
  return true;
}",0.8843294677371395
177252,"@Override public void start(){
  if (!connnect()) {
    return;
  }
  SpoutClientSession get=session.get();
  get.send(true,get.getProtocol().getIntroductionMessage(getPlayer().getName(),(InetSocketAddress)get.getChannel().getRemoteAddress()));
  worldChanged(""String_Node_Str"",UUID.randomUUID(),new DatatableComponent().serialize());
  super.start();
  getEventManager().registerEvents(new SpoutClientListener(this),this);
  AnnotatedCommandExecutorFactory.create(new InputCommands(this));
  AnnotatedCommandExecutorFactory.create(new RendererCommands(this));
  Dimension dim=Toolkit.getDefaultToolkit().getScreenSize();
  this.renderer=getScheduler().startRenderThread(new Vector2(dim.getWidth() * 0.75f,dim.getHeight() * 0.75f),ccoverride,null);
  getScheduler().startGuiThread();
  if (EngineStartEvent.getHandlerList().getRegisteredListeners().length != 0) {
    getEventManager().callEvent(new EngineStartEvent());
  }
  inputManager.onClientStart();
  filesystem.postStartup();
}","@Override public void start(){
  worldChanged(""String_Node_Str"",UUID.randomUUID(),new DatatableComponent().serialize());
  if (!connnect()) {
    return;
  }
  SpoutClientSession get=session.get();
  getPlayer().getName();
  get.send(true,get.getProtocol().getIntroductionMessage(getPlayer().getName(),(InetSocketAddress)get.getChannel().getRemoteAddress()));
  super.start();
  getEventManager().registerEvents(new SpoutClientListener(this),this);
  AnnotatedCommandExecutorFactory.create(new InputCommands(this));
  AnnotatedCommandExecutorFactory.create(new RendererCommands(this));
  Dimension dim=Toolkit.getDefaultToolkit().getScreenSize();
  this.renderer=getScheduler().startRenderThread(new Vector2(dim.getWidth() * 0.75f,dim.getHeight() * 0.75f),ccoverride,null);
  getScheduler().startGuiThread();
  if (EngineStartEvent.getHandlerList().getRegisteredListeners().length != 0) {
    getEventManager().callEvent(new EngineStartEvent());
  }
  inputManager.onClientStart();
  filesystem.postStartup();
}",0.7731597396094141
177253,"@Override public List<String> getAllPlayers(){
  return Arrays.asList(player.get().getName());
}","@Override public List<String> getAllPlayers(){
  return Arrays.asList(getPlayer().getName());
}",0.9528795811518324
177254,"public SpoutClientPlayer(Engine engine,String name,Transform transform,int viewDistance){
  super(engine,name,transform,viewDistance);
  add(CameraComponent.class);
}","public SpoutClientPlayer(Engine engine,String name,Transform transform,int viewDistance){
  super(engine,name,transform,viewDistance,null,false,(byte[])null,(Class<? extends Component>[])null);
  add(CameraComponent.class);
}",0.8491048593350383
177255,"/** 
 * Prevents stack overflow when creating an entity during chunk loading due to circle of calls
 */
public void setupInitialChunk(Transform transform,LoadOption loadopt){
  SpoutRegion region=(SpoutRegion)scene.getTransformLive().getPosition().getChunk(loadopt).getRegion();
  if (region == null) {
    return;
  }
  entityManager.set(region.getEntityManager());
  snapshotManager.copyAllSnapshots();
  if (initialComponents != null) {
    this.add(initialComponents);
    initialComponents=null;
  }
}","/** 
 * Prevents stack overflow when creating an entity during chunk loading due to circle of calls
 */
public void setupInitialChunk(Transform transform,LoadOption loadopt){
  SpoutChunk chunk=(SpoutChunk)scene.getTransformLive().getPosition().getChunk(loadopt);
  if (chunk == null) {
    return;
  }
  entityManager.set(chunk.getRegion().getEntityManager());
  snapshotManager.copyAllSnapshots();
  if (initialComponents != null) {
    this.add(initialComponents);
    initialComponents=null;
  }
}",0.9195630585898708
177256,"@Override public void finalizeRun(){
  if (getEngine().getPlatform() != Platform.CLIENT && !this.isOnlineLive()) {
    remove();
  }
  super.finalizeRun();
  if (this.isOnline()) {
    this.getNetworkSynchronizer().finalizeTick();
  }
  if (isRemoved()) {
    if (getEngine().getPlatform() == Platform.SERVER) {
      ((ServerNetworkSynchronizer)getNetworkSynchronizer()).onRemoved();
      ((SpoutServer)getEngine()).removePlayer(this);
    }
    sessionLive.set(null);
  }
}","@Override public void finalizeRun(){
  if (getEngine().getPlatform() != Platform.CLIENT && !this.isOnlineLive()) {
    remove();
  }
  super.finalizeRun();
  if (isRemoved()) {
    if (getEngine().getPlatform() == Platform.SERVER) {
      ((ServerNetworkSynchronizer)getNetworkSynchronizer()).onRemoved();
      ((SpoutServer)getEngine()).removePlayer(this);
    }
    sessionLive.set(null);
  }
 else   if (this.isOnline()) {
    this.getNetworkSynchronizer().finalizeTick();
  }
}",0.4926931106471816
177257,"@Override public void preSnapshotRun(){
  entityManager.preSnapshotRun();
  Point playerPosition=null;
  int renderLimit=Spout.getPlatform() == Platform.CLIENT && getRenderer() != null ? RENDER_QUEUE_LIMIT - (getRenderer().getBatchWaiting() + renderChunkQueue.size()) : 0;
  if (Spout.getEngine().getPlatform() == Platform.CLIENT) {
    SpoutClientWorld world=(SpoutClientWorld)this.getWorld();
    boolean worldRenderQueueEnabled=world.isRenderQueueEnabled();
    boolean firstRenderQueueTick=(!renderQueueEnabled) && worldRenderQueueEnabled;
    boolean unloadRenderQueue=!worldRenderQueueEnabled && renderQueueEnabled;
    SpoutPlayer player=((SpoutClient)Spout.getEngine()).getPlayer();
    if (player == null) {
      playerPosition=null;
    }
 else {
      playerPosition=player.getScene().getPosition();
    }
    if (firstRenderQueueTick && player != null) {
      for (      SpoutChunk c : player.getObservingChunks()) {
        c.setRenderDirty(true);
      }
      renderQueueEnabled=worldRenderQueueEnabled;
    }
    if (unloadRenderQueue) {
      for (      SpoutChunk c : rended.toArray(new SpoutChunk[rended.size()])) {
        addUpdateToRenderQueue(playerPosition,c,false,false,false);
      }
    }
  }
  SpoutChunk spoutChunk;
  List<SpoutChunk> renderLater=new LinkedList<SpoutChunk>();
  System.out.println(""String_Node_Str"");
  while ((spoutChunk=dirtyChunkQueue.poll()) != null) {
    if (renderQueueEnabled) {
      if (spoutChunk.isInViewDistance() || (spoutChunk.isRendered() && spoutChunk.leftViewDistance())) {
        if (renderLimit > 0) {
          addUpdateToRenderQueue(playerPosition,spoutChunk,spoutChunk.isBlockDirty(),spoutChunk.isLightDirty(),false);
          renderLimit--;
        }
 else {
          renderLater.add(spoutChunk);
        }
      }
 else {
        spoutChunk.setRenderDirty(false);
        spoutChunk.viewDistanceCopy();
      }
    }
    if (spoutChunk.isDirty()) {
      if (Spout.getPlatform() == Platform.SERVER) {
        for (        Player entity : spoutChunk.getObservingPlayers()) {
          syncChunkToPlayer(spoutChunk,entity);
        }
      }
      processChunkUpdatedEvent(spoutChunk);
      spoutChunk.resetDirtyArrays();
      spoutChunk.setLightDirty(false);
    }
  }
  for (  SpoutChunk c : renderLater) {
    c.setRenderDirty(true);
  }
  SpoutChunkSnapshotFuture snapshotFuture;
  while ((snapshotFuture=snapshotQueue.poll()) != null) {
    snapshotFuture.run();
  }
  renderSnapshotCacheBoth.clear();
  renderSnapshotCacheLight.clear();
  renderSnapshotCacheBlock.clear();
  for (int dx=0; dx < CHUNKS.SIZE; dx++) {
    for (int dy=0; dy < CHUNKS.SIZE; dy++) {
      for (int dz=0; dz < CHUNKS.SIZE; dz++) {
        SpoutChunk chunk=chunks[dx][dy][dz].get();
        if (chunk != null) {
          chunk.updateExpiredObservers();
        }
      }
    }
  }
  entityManager.syncEntities();
}","@Override public void preSnapshotRun(){
  entityManager.preSnapshotRun();
  Point playerPosition=null;
  int renderLimit=Spout.getPlatform() == Platform.CLIENT && getRenderer() != null ? RENDER_QUEUE_LIMIT - (getRenderer().getBatchWaiting() + renderChunkQueue.size()) : 0;
  if (Spout.getEngine().getPlatform() == Platform.CLIENT) {
    SpoutClientWorld world=(SpoutClientWorld)this.getWorld();
    boolean worldRenderQueueEnabled=world.isRenderQueueEnabled();
    boolean firstRenderQueueTick=(!renderQueueEnabled) && worldRenderQueueEnabled;
    boolean unloadRenderQueue=!worldRenderQueueEnabled && renderQueueEnabled;
    SpoutPlayer player=((SpoutClient)Spout.getEngine()).getPlayer();
    if (player == null) {
      playerPosition=null;
    }
 else {
      playerPosition=player.getScene().getPosition();
    }
    if (firstRenderQueueTick && player != null) {
      for (      SpoutChunk c : player.getObservingChunks()) {
        c.setRenderDirty(true);
      }
      renderQueueEnabled=worldRenderQueueEnabled;
    }
    if (unloadRenderQueue) {
      for (      SpoutChunk c : rended.toArray(new SpoutChunk[rended.size()])) {
        addUpdateToRenderQueue(playerPosition,c,false,false,false);
      }
    }
  }
  SpoutChunk spoutChunk;
  List<SpoutChunk> renderLater=new LinkedList<SpoutChunk>();
  while ((spoutChunk=dirtyChunkQueue.poll()) != null) {
    if (renderQueueEnabled) {
      if (spoutChunk.isInViewDistance() || (spoutChunk.isRendered() && spoutChunk.leftViewDistance())) {
        if (renderLimit > 0) {
          addUpdateToRenderQueue(playerPosition,spoutChunk,spoutChunk.isBlockDirty(),spoutChunk.isLightDirty(),false);
          renderLimit--;
        }
 else {
          renderLater.add(spoutChunk);
        }
      }
 else {
        spoutChunk.setRenderDirty(false);
        spoutChunk.viewDistanceCopy();
      }
    }
    if (spoutChunk.isDirty()) {
      if (Spout.getPlatform() == Platform.SERVER) {
        for (        Player entity : spoutChunk.getObservingPlayers()) {
          syncChunkToPlayer(spoutChunk,entity);
        }
      }
      processChunkUpdatedEvent(spoutChunk);
      spoutChunk.resetDirtyArrays();
      spoutChunk.setLightDirty(false);
    }
  }
  for (  SpoutChunk c : renderLater) {
    c.setRenderDirty(true);
  }
  SpoutChunkSnapshotFuture snapshotFuture;
  while ((snapshotFuture=snapshotQueue.poll()) != null) {
    snapshotFuture.run();
  }
  renderSnapshotCacheBoth.clear();
  renderSnapshotCacheLight.clear();
  renderSnapshotCacheBlock.clear();
  for (int dx=0; dx < CHUNKS.SIZE; dx++) {
    for (int dy=0; dy < CHUNKS.SIZE; dy++) {
      for (int dz=0; dz < CHUNKS.SIZE; dz++) {
        SpoutChunk chunk=chunks[dx][dy][dz].get();
        if (chunk != null) {
          chunk.updateExpiredObservers();
        }
      }
    }
  }
  if (Spout.getPlatform() == Platform.SERVER) {
    entityManager.syncEntities();
  }
}",0.9835098073251172
177258,"@Override public void start(boolean checkWorlds){
  if (!connnect()) {
    return;
  }
  SpoutClientSession get=session.get();
  get.send(true,true,get.getProtocol().getIntroductionMessage(getPlayer().getName(),(InetSocketAddress)get.getChannel().getRemoteAddress()));
  worldChanged(""String_Node_Str"",UUID.randomUUID(),new DatatableComponent().serialize());
  super.start(checkWorlds);
  getEventManager().registerEvents(new SpoutClientListener(this),this);
  AnnotatedCommandExecutorFactory.create(new InputCommands(this));
  AnnotatedCommandExecutorFactory.create(new RendererCommands(this));
  Dimension dim=Toolkit.getDefaultToolkit().getScreenSize();
  this.renderer=getScheduler().startRenderThread(new Vector2(dim.getWidth() * 0.75f,dim.getHeight() * 0.75f),ccoverride,null);
  getScheduler().startGuiThread();
  if (EngineStartEvent.getHandlerList().getRegisteredListeners().length != 0) {
    getEventManager().callEvent(new EngineStartEvent());
  }
  filesystem.postStartup();
}","@Override public void start(){
  if (!connnect()) {
    return;
  }
  SpoutClientSession get=session.get();
  get.send(true,true,get.getProtocol().getIntroductionMessage(getPlayer().getName(),(InetSocketAddress)get.getChannel().getRemoteAddress()));
  worldChanged(""String_Node_Str"",UUID.randomUUID(),new DatatableComponent().serialize());
  super.start();
  getEventManager().registerEvents(new SpoutClientListener(this),this);
  AnnotatedCommandExecutorFactory.create(new InputCommands(this));
  AnnotatedCommandExecutorFactory.create(new RendererCommands(this));
  Dimension dim=Toolkit.getDefaultToolkit().getScreenSize();
  this.renderer=getScheduler().startRenderThread(new Vector2(dim.getWidth() * 0.75f,dim.getHeight() * 0.75f),ccoverride,null);
  getScheduler().startGuiThread();
  if (EngineStartEvent.getHandlerList().getRegisteredListeners().length != 0) {
    getEventManager().callEvent(new EngineStartEvent());
  }
  filesystem.postStartup();
}",0.984599589322382
177259,"public void start(boolean checkWorlds){
  log(""String_Node_Str"",getPlatform().name().toLowerCase());
  log(""String_Node_Str"",getVersion(),getAPIVersion());
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  if (debugMode()) {
    log(""String_Node_Str"",Level.WARNING);
  }
  Object exe;
switch (getPlatform()) {
case CLIENT:
    exe=new ClientCommands(this);
  break;
case SERVER:
exe=new ServerCommands(this);
break;
default :
exe=new CommonCommands(this);
break;
}
AnnotatedCommandExecutorFactory.create(exe);
AnnotatedCommandExecutorFactory.create(new MessagingCommands(this));
InputCommands.setupInputCommands(this);
if (debugMode()) {
AnnotatedCommandExecutorFactory.create(new TestCommands(this));
AnnotatedCommandExecutorFactory.create(new AnnotatedCommandExecutorTest.RootExecutor());
AnnotatedCommandExecutorFactory.create(new AnnotatedCommandExecutorTest.ChildExecutor(),cmdManager.getCommand(""String_Node_Str""));
}
setupBindings(config);
enablePlugins();
if (SpoutConfiguration.RECLAIM_MEMORY.getBoolean()) {
reclamation=new MemoryReclamationThread();
reclamation.start();
}
scheduler.startMainThread();
setupComplete.set(true);
}","public void start(){
  log(""String_Node_Str"",getPlatform().name().toLowerCase());
  log(""String_Node_Str"",getVersion(),getAPIVersion());
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  if (debugMode()) {
    log(""String_Node_Str"",Level.WARNING);
  }
  scheduler.scheduleSyncRepeatingTask(this,getSessionTask(),50,50,TaskPriority.CRITICAL);
  Object exe;
switch (getPlatform()) {
case CLIENT:
    exe=new ClientCommands(this);
  break;
case SERVER:
exe=new ServerCommands(this);
break;
default :
exe=new CommonCommands(this);
break;
}
AnnotatedCommandExecutorFactory.create(exe);
AnnotatedCommandExecutorFactory.create(new MessagingCommands(this));
InputCommands.setupInputCommands(this);
if (debugMode()) {
AnnotatedCommandExecutorFactory.create(new TestCommands(this));
AnnotatedCommandExecutorFactory.create(new AnnotatedCommandExecutorTest.RootExecutor());
AnnotatedCommandExecutorFactory.create(new AnnotatedCommandExecutorTest.ChildExecutor(),cmdManager.getCommand(""String_Node_Str""));
}
setupBindings(config);
enablePlugins();
if (SpoutConfiguration.RECLAIM_MEMORY.getBoolean()) {
reclamation=new MemoryReclamationThread();
reclamation.start();
}
scheduler.startMainThread();
setupComplete.set(true);
}",0.95475300954753
177260,"public void start(boolean checkWorlds,Listener listener){
  engineItemMap=MaterialRegistry.setupRegistry();
  engineBiomeMap=BiomeRegistry.setupRegistry();
  engineLightingMap=LightingRegistry.setupRegistry();
  scheduler.scheduleSyncRepeatingTask(this,new SessionTask(sessions),50,50,TaskPriority.CRITICAL);
  super.start(checkWorlds);
  if (checkWorlds) {
    if (loadedWorlds.getLive().isEmpty()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    World world=this.getWorld(SpoutConfiguration.DEFAULT_WORLD.getString());
    if (world != null) {
      this.setDefaultWorld(world);
    }
    getDefaultWorld();
  }
  getEventManager().registerEvents(listener,this);
  getEventManager().callEvent(new EngineStartEvent());
  filesystem.postStartup();
  WorldSavingThread.startThread();
  log(""String_Node_Str"");
}","protected void start(boolean checkWorlds,Listener listener){
  engineItemMap=MaterialRegistry.setupRegistry();
  engineBiomeMap=BiomeRegistry.setupRegistry();
  engineLightingMap=LightingRegistry.setupRegistry();
  super.start();
  if (checkWorlds) {
    if (loadedWorlds.getLive().isEmpty()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    World world=this.getWorld(SpoutConfiguration.DEFAULT_WORLD.getString());
    if (world != null) {
      this.setDefaultWorld(world);
    }
    getDefaultWorld();
  }
  getEventManager().registerEvents(listener,this);
  getEventManager().callEvent(new EngineStartEvent());
  filesystem.postStartup();
  WorldSavingThread.startThread();
  log(""String_Node_Str"");
}",0.9081567116249196
177261,"@Command(aliases={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",min=1,max=4) @Permissible(""String_Node_Str"") public void tp(CommandSource source,CommandArguments args) throws CommandException {
  Player player;
  Player target=null;
  Point point;
  if (args.length() == 1) {
    if (!(source instanceof Player)) {
      throw new CommandException(""String_Node_Str"");
    }
    player=args.getPlayer(0,true);
    if (player == null || !player.isOnline()) {
      throw new CommandException(args.getString(0) + ""String_Node_Str"");
    }
    point=player.getScene().getPosition();
  }
 else {
    player=args.getPlayer(0,true);
    if (player == null || !player.isOnline()) {
      throw new CommandException(args.getString(0) + ""String_Node_Str"");
    }
    if (args.length() > 2) {
      World world=player.getWorld();
      float x=player.getScene().getPosition().getX();
      if (args.isInteger(1)) {
        x=args.getInteger(1);
      }
 else       if (args.getString(1).startsWith(""String_Node_Str"")) {
        x+=Integer.parseInt(args.getString(1).substring(1));
      }
 else {
        throw new CommandException(""String_Node_Str"");
      }
      float y=player.getScene().getPosition().getY();
      if (args.isInteger(2)) {
        y=args.getInteger(2);
      }
 else       if (args.getString(2).startsWith(""String_Node_Str"")) {
        y+=Integer.parseInt(args.getString(2).substring(1));
      }
 else {
        throw new CommandException(""String_Node_Str"");
      }
      float z=player.getScene().getPosition().getZ();
      if (args.isInteger(3)) {
        z=args.getInteger(3);
      }
 else       if (args.getString(3).startsWith(""String_Node_Str"")) {
        z+=Integer.parseInt(args.getString(3).substring(1));
      }
 else {
        throw new CommandException(""String_Node_Str"");
      }
      point=new Point(world,x,y,z);
    }
 else {
      target=args.getPlayer(1,true);
      if (target == null || !target.isOnline()) {
        throw new CommandException(args.getString(1) + ""String_Node_Str"");
      }
      point=target.getScene().getPosition();
    }
  }
  point.getWorld().getChunkFromBlock(point);
  player.teleport(point);
  if (target != null) {
    player.sendMessage(""String_Node_Str"" + target.getName() + ""String_Node_Str"");
    target.sendMessage(player.getName() + ""String_Node_Str"");
    return;
  }
  player.sendMessage(""String_Node_Str"" + point.getWorld().getName() + ""String_Node_Str""+ point.getX()+ ""String_Node_Str""+ point.getY()+ ""String_Node_Str""+ point.getZ()+ ""String_Node_Str"");
}","@Command(aliases={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",desc=""String_Node_Str"",min=1,max=5) @Permissible(""String_Node_Str"") public void tp(CommandSource source,CommandArguments args) throws CommandException {
  Player player;
  Player target=null;
  Point point;
  if (args.length() == 1) {
    if (!(source instanceof Player)) {
      throw new CommandException(""String_Node_Str"");
    }
    player=args.getPlayer(0,true);
    if (player == null || !player.isOnline()) {
      throw new CommandException(args.getString(0) + ""String_Node_Str"");
    }
    point=player.getScene().getPosition();
  }
 else {
    player=args.getPlayer(0,true);
    if (player == null || !player.isOnline()) {
      throw new CommandException(args.getString(0) + ""String_Node_Str"");
    }
    if (args.length() > 2) {
      World world=null;
      if (args.length() > 4) {
        world=args.getWorld(4);
        if (world == null) {
          source.sendMessage(""String_Node_Str"");
        }
      }
      if (world == null) {
        world=player.getWorld();
      }
      float x=player.getScene().getPosition().getX();
      if (args.isInteger(1)) {
        x=args.getInteger(1);
      }
 else       if (args.getString(1).startsWith(""String_Node_Str"")) {
        x+=Integer.parseInt(args.getString(1).substring(1));
      }
 else {
        throw new CommandException(""String_Node_Str"");
      }
      float y=player.getScene().getPosition().getY();
      if (args.isInteger(2)) {
        y=args.getInteger(2);
      }
 else       if (args.getString(2).startsWith(""String_Node_Str"")) {
        y+=Integer.parseInt(args.getString(2).substring(1));
      }
 else {
        throw new CommandException(""String_Node_Str"");
      }
      float z=player.getScene().getPosition().getZ();
      if (args.isInteger(3)) {
        z=args.getInteger(3);
      }
 else       if (args.getString(3).startsWith(""String_Node_Str"")) {
        z+=Integer.parseInt(args.getString(3).substring(1));
      }
 else {
        throw new CommandException(""String_Node_Str"");
      }
      point=new Point(world,x,y,z);
    }
 else {
      target=args.getPlayer(1,true);
      if (target == null || !target.isOnline()) {
        throw new CommandException(args.getString(1) + ""String_Node_Str"");
      }
      point=target.getScene().getPosition();
    }
  }
  point.getWorld().getChunkFromBlock(point);
  player.teleport(point);
  if (target != null) {
    player.sendMessage(""String_Node_Str"" + target.getName() + ""String_Node_Str"");
    target.sendMessage(player.getName() + ""String_Node_Str"");
    return;
  }
  player.sendMessage(""String_Node_Str"" + point.getWorld().getName() + ""String_Node_Str""+ point.getX()+ ""String_Node_Str""+ point.getY()+ ""String_Node_Str""+ point.getZ()+ ""String_Node_Str"");
}",0.9596110695587136
177262,"@Override public World getWorld(){
  return entityManager.get().getRegion().getWorld();
}","@Override public World getWorld(){
  if (Spout.getPlatform() == Platform.SERVER) {
    return entityManager.get().getRegion().getWorld();
  }
 else {
    return ((Client)Spout.getEngine()).getWorld();
  }
}",0.6033898305084746
177263,"public SpoutEntity(Engine engine,Transform transform,int viewDistance,UUID uid,boolean load,byte[] dataMap,Class<? extends Component>... components){
  id.set(NOTSPAWNEDID);
  this.engine=engine;
  observer=new SnapshotableReference<Iterator<IntVector3>>(snapshotManager,INITIAL_TICK);
  observer.set(NOT_OBSERVING);
  scene=(SpoutSceneComponent)add(SceneComponent.class);
  network=add(NetworkComponent.class);
  if (uid != null) {
    this.uid=uid;
  }
 else {
    this.uid=UUID.randomUUID();
  }
  if (transform != null) {
    scene.setTransform(transform);
    scene.copySnapshot();
  }
  if (components != null && components.length > 0) {
    initialComponents=components;
  }
  int maxViewDistance=SpoutConfiguration.VIEW_DISTANCE.getInt() * Chunk.BLOCKS.SIZE;
  if (viewDistance < 0) {
    viewDistance=maxViewDistance;
  }
 else   if (viewDistance > maxViewDistance) {
    viewDistance=maxViewDistance;
  }
  setViewDistance(viewDistance);
  if (dataMap != null) {
    try {
      this.getDatatable().deserialize(dataMap);
    }
 catch (    IOException e) {
      engine.getLogger().log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  snapshotManager.copyAllSnapshots();
  if (transform != null) {
    if (load) {
      setupInitialChunk(transform,LoadOption.LOAD_GEN);
    }
 else {
      setupInitialChunk(transform,LoadOption.NO_LOAD);
    }
  }
}","public SpoutEntity(Engine engine,Transform transform,int viewDistance,UUID uid,boolean load,byte[] dataMap,Class<? extends Component>... components){
  id.set(NOTSPAWNEDID);
  this.engine=engine;
  observer.set(NOT_OBSERVING);
  scene=(SpoutSceneComponent)add(SceneComponent.class);
  network=add(NetworkComponent.class);
  if (uid != null) {
    this.uid=uid;
  }
 else {
    this.uid=UUID.randomUUID();
  }
  if (transform != null) {
    scene.setTransform(transform);
    scene.copySnapshot();
  }
  if (components != null && components.length > 0) {
    initialComponents=components;
  }
  int maxViewDistance=SpoutConfiguration.VIEW_DISTANCE.getInt() * Chunk.BLOCKS.SIZE;
  if (viewDistance < 0) {
    viewDistance=maxViewDistance;
  }
 else   if (viewDistance > maxViewDistance) {
    viewDistance=maxViewDistance;
  }
  setViewDistance(viewDistance);
  if (dataMap != null) {
    try {
      this.getDatatable().deserialize(dataMap);
    }
 catch (    IOException e) {
      engine.getLogger().log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  snapshotManager.copyAllSnapshots();
  if (transform != null) {
    if (load) {
      setupInitialChunk(transform,LoadOption.LOAD_GEN);
    }
 else {
      setupInitialChunk(transform,LoadOption.NO_LOAD);
    }
  }
}",0.9657012195121952
177264,"@Override public void initializeSession(final Session session){
  session.setNetworkSynchronizer(new SpoutNetworkSynchronizer(session));
  for (  StringMap map : StringMap.getAll()) {
    session.send(false,new StringMapMessage(map.getId(),StringMapEvent.Action.SET,map.getItems()));
  }
  session.send(false,new WorldChangeMessage(session.getPlayer().getWorld(),session.getPlayer().getWorld().getDatatable()));
}","@Override public void initializeSession(final Session session){
  session.setNetworkSynchronizer(new SpoutNetworkSynchronizer(session));
  for (  StringMap map : StringMap.getAll()) {
    session.send(false,new StringMapMessage(map.getId(),StringMapEvent.Action.SET,map.getItems()));
  }
}",0.8233618233618234
177265,"@Override public ChannelBuffer encode(LoginMessage message){
  ChannelBuffer buffer=ChannelBuffers.dynamicBuffer();
  ChannelBufferUtils.writeString(buffer,message.getPlayerName());
  buffer.writeInt(message.getProtocolVersion());
  return buffer;
}","@Override public ChannelBuffer encode(LoginMessage message){
  ChannelBuffer buffer=ChannelBuffers.dynamicBuffer();
  ChannelBufferUtils.writeString(buffer,message.getPlayerName());
  buffer.writeInt(message.getExtraInt());
  return buffer;
}",0.9531568228105908
177266,"@Override public void handleClient(Session session,LoginMessage message){
  session.getDataMap().put(SpoutProtocol.PLAYER_ENTITY_ID,message.getProtocolVersion());
  session.setState(Session.State.GAME);
  session.getEngine().getEventManager().callEvent(new ClientPlayerConnectedEvent(session,message.getProtocolVersion()));
}","@Override public void handleClient(Session session,LoginMessage message){
  session.getDataMap().put(SpoutProtocol.PLAYER_ENTITY_ID,message.getExtraInt());
  session.setState(Session.State.GAME);
  session.getEngine().getEventManager().callEvent(new ClientPlayerConnectedEvent(session,message.getExtraInt()));
}",0.9276729559748428
177267,"@Override public int hashCode(){
  return new HashCodeBuilder(95,45).append(playerName).append(protoVersion).toHashCode();
}","@Override public int hashCode(){
  return new HashCodeBuilder(95,45).append(playerName).append(extraInt).toHashCode();
}",0.9344262295081968
177268,"public LoginMessage(String playerName,int protoVersion){
  this.playerName=playerName;
  this.protoVersion=protoVersion;
}","public LoginMessage(String playerName,int extraInt){
  this.playerName=playerName;
  this.extraInt=extraInt;
}",0.8017241379310345
177269,"@Override public boolean equals(Object obj){
  if (obj instanceof LoginMessage) {
    final LoginMessage other=(LoginMessage)obj;
    return new EqualsBuilder().append(playerName,other.playerName).append(protoVersion,other.protoVersion).isEquals();
  }
 else {
    return false;
  }
}","@Override public boolean equals(Object obj){
  if (obj instanceof LoginMessage) {
    final LoginMessage other=(LoginMessage)obj;
    return new EqualsBuilder().append(playerName,other.playerName).append(extraInt,other.extraInt).isEquals();
  }
 else {
    return false;
  }
}",0.9285714285714286
177270,"@Override public String toString(){
  return new ToStringBuilder(this,SpoutToStringStyle.INSTANCE).append(""String_Node_Str"",playerName).append(""String_Node_Str"",protoVersion).toString();
}","@Override public String toString(){
  return new ToStringBuilder(this,SpoutToStringStyle.INSTANCE).append(""String_Node_Str"",playerName).append(""String_Node_Str"",extraInt).toString();
}",0.956989247311828
177271,"/** 
 * Spawns an entity into the world. Fires off a cancellable EntitySpawnEvent
 */
public void spawnEntity(Entity e,int entityID){
  if (e.isSpawned()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  SpoutRegion region=(SpoutRegion)e.getRegion();
  if (region == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (region.getEntityManager().isSpawnable((SpoutEntity)e)) {
    if (entityID > -1) {
      if (getEngine().getPlatform() == Platform.CLIENT) {
        ((SpoutEntity)e).setId(entityID);
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
    EntitySpawnEvent event=getEngine().getEventManager().callEvent(new EntitySpawnEvent(e,e.getScene().getPosition()));
    if (event.isCancelled()) {
      return;
    }
    region.getEntityManager().addEntity((SpoutEntity)e);
    for (    Component component : values()) {
      if (component instanceof WorldComponent) {
        ((WorldComponent)component).onSpawn(event);
      }
    }
    for (    Component component : e.values()) {
      if (component instanceof EntityComponent) {
        ((EntityComponent)component).onSpawned(event);
      }
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","/** 
 * Spawns an entity into the world. Fires off a cancellable EntitySpawnEvent
 */
public void spawnEntity(Entity e,int entityID){
  if (e.isSpawned()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  SpoutRegion region=(SpoutRegion)e.getRegion();
  if (region == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (region.getEntityManager().isSpawnable((SpoutEntity)e)) {
    if (entityID != SpoutEntity.NOTSPAWNEDID) {
      if (getEngine().getPlatform() == Platform.CLIENT) {
        ((SpoutEntity)e).setId(entityID);
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
    EntitySpawnEvent event=getEngine().getEventManager().callEvent(new EntitySpawnEvent(e,e.getScene().getPosition()));
    if (event.isCancelled()) {
      return;
    }
    region.getEntityManager().addEntity((SpoutEntity)e);
    for (    Component component : values()) {
      if (component instanceof WorldComponent) {
        ((WorldComponent)component).onSpawn(event);
      }
    }
    for (    Component component : e.values()) {
      if (component instanceof EntityComponent) {
        ((EntityComponent)component).onSpawned(event);
      }
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.9878574226400312
177272,"/** 
 * Get the debug screen
 */
public abstract Derp getDebugHud();","/** 
 * Get the debug screen
 */
public abstract DebugHud getDebugHud();",0.9428571428571428
177273,"/** 
 * Get the debug screen
 */
public abstract DebugHud getDebugHud();","/** 
 * Get the debug screen
 */
public abstract Derp getDebugHud();",0.9428571428571428
177274,"private void blockChanged(int x,int y,int z,BlockMaterial newMaterial,short newData,BlockMaterial oldMaterial,short oldData,Cause<?> cause){
  queueDirty();
  x&=BLOCKS.MASK;
  y&=BLOCKS.MASK;
  z&=BLOCKS.MASK;
  int rx=x + getBlockX();
  int ry=y + getBlockY();
  int rz=z + getBlockZ();
  if (Spout.getEngine().getPlatform() == Platform.CLIENT) {
    int maxBlock=Chunk.BLOCKS.SIZE - 1;
    if (x == 0) {
      SpoutChunk c=getRegion().getLocalChunk(this,-1,0,0,LoadOption.NO_LOAD);
      if (c != null) {
        c.touchBlock(maxBlock,y,z);
      }
    }
 else     if (x == maxBlock) {
      SpoutChunk c=getRegion().getLocalChunk(this,+1,0,0,LoadOption.NO_LOAD);
      if (c != null) {
        c.touchBlock(0,y,z);
      }
    }
    if (y == 0) {
      SpoutChunk c=getRegion().getLocalChunk(this,0,-1,0,LoadOption.NO_LOAD);
      if (c != null) {
        c.touchBlock(x,maxBlock,z);
      }
    }
 else     if (y == maxBlock) {
      SpoutChunk c=getRegion().getLocalChunk(this,0,+1,0,LoadOption.NO_LOAD);
      if (c != null) {
        c.touchBlock(x,0,z);
      }
    }
    if (z == 0) {
      SpoutChunk c=getRegion().getLocalChunk(this,0,0,-1,LoadOption.NO_LOAD);
      if (c != null) {
        c.touchBlock(x,y,maxBlock);
      }
    }
 else     if (z == maxBlock) {
      SpoutChunk c=getRegion().getLocalChunk(this,0,0,1,LoadOption.NO_LOAD);
      if (c != null) {
        c.touchBlock(x,y,0);
      }
    }
  }
  if (newMaterial instanceof DynamicMaterial) {
    if (oldMaterial instanceof DynamicMaterial) {
      if (!oldMaterial.isCompatibleWith(newMaterial) || !newMaterial.isCompatibleWith(oldMaterial)) {
        parentRegion.resetDynamicBlock(rx,ry,rz);
      }
    }
 else {
      parentRegion.resetDynamicBlock(rx,ry,rz);
    }
  }
  if (this.isPopulated()) {
    EffectRange physicsRange=newMaterial.getPhysicsRange(newData);
    queueBlockPhysics(x,y,z,physicsRange,oldMaterial);
    if (newMaterial != oldMaterial) {
      EffectRange destroyRange=oldMaterial.getDestroyRange(oldData);
      if (destroyRange != physicsRange) {
        queueBlockPhysics(x,y,z,destroyRange,oldMaterial);
      }
    }
  }
  if (this.isPopulated()) {
    SpoutWorld world=this.getWorld();
    int oldheight=column.getSurfaceHeight(x,z);
    int wy=x + this.getBlockY();
    column.notifyBlockChange(x,wy,z);
    int wx=x + this.getBlockX();
    int wz=z + this.getBlockZ();
    int newheight=column.getSurfaceHeight(x,z);
    if (newheight > oldheight) {
      for (y=oldheight; y < newheight; y++) {
        world.setBlockSkyLight(wx,y + 1,wz,(byte)0,cause);
      }
    }
 else     if (newheight < oldheight) {
      for (y=newheight; y < oldheight; y++) {
        world.setBlockSkyLight(wx,y + 1,wz,(byte)15,cause);
      }
    }
 else     if (lightStore instanceof ServerLightStore) {
      ((ServerLightStore)lightStore).addSkyLightUpdates(x,y,z,0);
      ((ServerLightStore)lightStore).addSkyLightOperation(wx,wy,wz,SpoutWorldLighting.REFRESH);
    }
    if (newMaterial.getOpacity() != oldMaterial.getOpacity() || newMaterial.getLightLevel(newData) != oldMaterial.getLightLevel(oldData)) {
      this.setBlockLight(x,y,z,newMaterial.getLightLevel(newData),cause);
    }
  }
  setModified();
}","private void blockChanged(int x,int y,int z,BlockMaterial newMaterial,short newData,BlockMaterial oldMaterial,short oldData,Cause<?> cause){
  queueDirty();
  x&=BLOCKS.MASK;
  y&=BLOCKS.MASK;
  z&=BLOCKS.MASK;
  int rx=x + getBlockX();
  int ry=y + getBlockY();
  int rz=z + getBlockZ();
  if (Spout.getEngine().getPlatform() == Platform.CLIENT) {
    int maxBlock=Chunk.BLOCKS.SIZE - 1;
    if (x == 0) {
      SpoutChunk c=getRegion().getLocalChunk(this,-1,0,0,LoadOption.NO_LOAD);
      if (c != null) {
        c.touchBlock(maxBlock,y,z);
      }
    }
 else     if (x == maxBlock) {
      SpoutChunk c=getRegion().getLocalChunk(this,+1,0,0,LoadOption.NO_LOAD);
      if (c != null) {
        c.touchBlock(0,y,z);
      }
    }
    if (y == 0) {
      SpoutChunk c=getRegion().getLocalChunk(this,0,-1,0,LoadOption.NO_LOAD);
      if (c != null) {
        c.touchBlock(x,maxBlock,z);
      }
    }
 else     if (y == maxBlock) {
      SpoutChunk c=getRegion().getLocalChunk(this,0,+1,0,LoadOption.NO_LOAD);
      if (c != null) {
        c.touchBlock(x,0,z);
      }
    }
    if (z == 0) {
      SpoutChunk c=getRegion().getLocalChunk(this,0,0,-1,LoadOption.NO_LOAD);
      if (c != null) {
        c.touchBlock(x,y,maxBlock);
      }
    }
 else     if (z == maxBlock) {
      SpoutChunk c=getRegion().getLocalChunk(this,0,0,1,LoadOption.NO_LOAD);
      if (c != null) {
        c.touchBlock(x,y,0);
      }
    }
  }
  if (newMaterial instanceof DynamicMaterial) {
    if (oldMaterial instanceof DynamicMaterial) {
      if (!oldMaterial.isCompatibleWith(newMaterial) || !newMaterial.isCompatibleWith(oldMaterial)) {
        parentRegion.resetDynamicBlock(rx,ry,rz);
      }
    }
 else {
      parentRegion.resetDynamicBlock(rx,ry,rz);
    }
  }
  if (this.isPopulated()) {
    EffectRange physicsRange=newMaterial.getPhysicsRange(newData);
    queueBlockPhysics(x,y,z,physicsRange,oldMaterial);
    if (newMaterial != oldMaterial) {
      EffectRange destroyRange=oldMaterial.getDestroyRange(oldData);
      if (destroyRange != physicsRange) {
        queueBlockPhysics(x,y,z,destroyRange,oldMaterial);
      }
    }
  }
  if (this.isPopulated()) {
    SpoutWorld world=this.getWorld();
    int oldheight=column.getSurfaceHeight(x,z);
    int wy=y + this.getBlockY();
    column.notifyBlockChange(x,wy,z);
    int wx=x + this.getBlockX();
    int wz=z + this.getBlockZ();
    int newheight=column.getSurfaceHeight(x,z);
    if (newheight > oldheight) {
      for (y=oldheight; y < newheight; y++) {
        world.setBlockSkyLight(wx,y + 1,wz,(byte)0,cause);
      }
    }
 else     if (newheight < oldheight) {
      for (y=newheight; y < oldheight; y++) {
        world.setBlockSkyLight(wx,y + 1,wz,(byte)15,cause);
      }
    }
 else     if (lightStore instanceof ServerLightStore) {
      ((ServerLightStore)lightStore).addSkyLightUpdates(x,y,z,0);
      ((ServerLightStore)lightStore).addSkyLightOperation(wx,wy,wz,SpoutWorldLighting.REFRESH);
    }
    if (newMaterial.getOpacity() != oldMaterial.getOpacity() || newMaterial.getLightLevel(newData) != oldMaterial.getLightLevel(oldData)) {
      this.setBlockLight(x,y,z,newMaterial.getLightLevel(newData),cause);
    }
  }
  setModified();
}",0.9996880848409232
177275,"public ImmutableHeightMapBuffer getHeightMapBuffer(){
  return new ImmutableHeightMapBuffer(getX(),getZ(),SpoutColumn.BLOCKS.SIZE,SpoutColumn.BLOCKS.SIZE,heightMap);
}","public ImmutableHeightMapBuffer getHeightMapBuffer(){
  return new ImmutableHeightMapBuffer(getX() << BLOCKS.BITS,getZ() << BLOCKS.BITS,SpoutColumn.BLOCKS.SIZE,SpoutColumn.BLOCKS.SIZE,heightMap);
}",0.9175824175824177
177276,"@Override public ImmutableHeightMapBuffer getLocalHeightMap(int x,int z,LoadOption loadopt){
  SpoutColumn col=getWorld().getColumn(x << Chunk.BLOCKS.BITS,z << Chunk.BLOCKS.BITS,true);
  if (col == null) {
    return null;
  }
  return col.getHeightMapBuffer();
}","@Override public ImmutableHeightMapBuffer getLocalHeightMap(int x,int z,LoadOption loadopt){
  SpoutColumn col=getWorld().getColumn((getChunkX() + x) << Chunk.BLOCKS.BITS,(getChunkZ() + z) << Chunk.BLOCKS.BITS,true);
  if (col == null) {
    return null;
  }
  return col.getHeightMapBuffer();
}",0.942652329749104
177277,"/** 
 * Gets the size of the CuboidBuffer
 */
public Vector3 getSize(){
  return new Vector3(sizeX,sizeY,sizeZ);
}","/** 
 * Gets the size of the CuboidBuffer
 */
public Vector3 getSize(){
  return size;
}",0.8712871287128713
177278,"/** 
 * Gets a Point representing the base of this CuboidBuffer
 */
public Vector3 getBase(){
  return new Vector3(baseX,baseY,baseZ);
}","/** 
 * Gets a Point representing the base of this CuboidBuffer
 */
public Vector3 getBase(){
  return base;
}",0.8943089430894309
177279,"protected T getLightBufferRaw(int x,int y,int z){
  int cx=(x - baseX) >> Chunk.BLOCKS.BITS;
  int cy=(y - baseY) >> Chunk.BLOCKS.BITS;
  int cz=(z - baseZ) >> Chunk.BLOCKS.BITS;
  Chunk c=r.getLocalChunk(cx,cy,cz,loadOpt);
  if (c == null) {
    return null;
  }
  @SuppressWarnings(""String_Node_Str"") T buf=(T)c.getLightBuffer(id);
  if (buf == null) {
    return null;
  }
  return buf;
}","protected T getLightBufferRaw(int x,int y,int z){
  int cx=(x - baseX - Region.BLOCKS.SIZE) >> Chunk.BLOCKS.BITS;
  int cy=(y - baseY - Region.BLOCKS.SIZE) >> Chunk.BLOCKS.BITS;
  int cz=(z - baseZ - Region.BLOCKS.SIZE) >> Chunk.BLOCKS.BITS;
  Chunk c=r.getLocalChunk(cx,cy,cz,loadOpt);
  if (c == null) {
    Spout.getLogger().info(""String_Node_Str"" + cx + ""String_Node_Str""+ cy+ ""String_Node_Str""+ cz);
    return null;
  }
  @SuppressWarnings(""String_Node_Str"") T buf=(T)c.getLightBuffer(id);
  if (buf == null) {
    Spout.getLogger().info(""String_Node_Str"");
    return null;
  }
  return buf;
}",0.7891019172552977
177280,"public CuboidLightBuffer setIfAbsentLightBuffer(short id,CuboidLightBuffer buffer){
  if (id < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (buffer != null && buffer.getManagerId() != id) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  TickStage.checkStage(TickStage.LIGHTING);
  CuboidLightBuffer[] array=lightBuffers.get();
  CuboidLightBuffer buf;
  if (id < array.length) {
    buf=array[id];
    if (buf != null) {
      return buf;
    }
  }
  CuboidLightBuffer newBuf;
  if (buffer == null) {
    LightingManager<?> manager=LightingRegistry.get(id);
    if (manager == null) {
      return null;
    }
    newBuf=manager.newLightBuffer(this,getBlockX(),getBlockY(),getBlockZ(),BLOCKS.SIZE,BLOCKS.SIZE,BLOCKS.SIZE);
  }
 else {
    newBuf=buffer;
  }
  boolean success=false;
  while (!success) {
    array=lightBuffers.get();
    if (id < array.length) {
      buf=array[id];
      if (buf != null) {
        return buf;
      }
    }
    CuboidLightBuffer[] newArray=new CuboidLightBuffer[Math.max(id + 1,array.length)];
    for (int i=0; i < array.length; i++) {
      newArray[i]=array[i];
    }
    newArray[id]=newBuf;
    success=lightBuffers.compareAndSet(array,newArray);
  }
  return newBuf;
}","private CuboidLightBuffer setIfAbsentLightBuffer(short id,CuboidLightBuffer buffer){
  if (id < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (buffer != null && buffer.getManagerId() != id) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CuboidLightBuffer[] array=lightBuffers.get();
  CuboidLightBuffer buf;
  if (id < array.length) {
    buf=array[id];
    if (buf != null) {
      return buf;
    }
  }
  CuboidLightBuffer newBuf;
  if (buffer == null) {
    LightingManager<?> manager=LightingRegistry.get(id);
    if (manager == null) {
      return null;
    }
    newBuf=manager.newLightBuffer(this,getBlockX(),getBlockY(),getBlockZ(),BLOCKS.SIZE,BLOCKS.SIZE,BLOCKS.SIZE);
  }
 else {
    newBuf=buffer;
  }
  boolean success=false;
  while (!success) {
    array=lightBuffers.get();
    if (id < array.length) {
      buf=array[id];
      if (buf != null) {
        return buf;
      }
    }
    CuboidLightBuffer[] newArray=new CuboidLightBuffer[Math.max(id + 1,array.length)];
    for (int i=0; i < array.length; i++) {
      newArray[i]=array[i];
    }
    newArray[id]=newBuf;
    success=lightBuffers.compareAndSet(array,newArray);
  }
  return newBuf;
}",0.9778315195485692
177281,"@Override public CuboidLightBuffer getLightBuffer(short id){
  return setIfAbsentLightBuffer(id,null);
}","@Override public CuboidLightBuffer getLightBuffer(short id){
  TickStage.checkStage(TickStage.LIGHTING);
  return setIfAbsentLightBuffer(id,null);
}",0.8253968253968254
177282,"private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
  short matId=in.readShort();
  short matData=in.readShort();
  material=MaterialRegistry.get(matId);
  if (matData != 0 && material != null) {
    material=material.getSubMaterial(matData);
  }
  amount=in.readInt();
  data=in.readShort();
  int auxDataSize=in.readInt();
  if (auxDataSize > 0) {
    byte[] auxData=new byte[auxDataSize];
    ManagedHashMap map=new ManagedHashMap();
    map.deserialize(auxData);
    this.auxData=map;
  }
  boolean hasNBTData=in.readBoolean();
  if (hasNBTData) {
    NBTInputStream is=new NBTInputStream(in,false);
    CompoundTag tag=(CompoundTag)is.readTag();
    nbtData=tag.getValue();
    is.close();
  }
  if (material == null) {
    throw new ClassNotFoundException(""String_Node_Str"" + matId + ""String_Node_Str""+ matData+ ""String_Node_Str"");
  }
}","private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
  short matId=in.readShort();
  short matData=in.readShort();
  material=MaterialRegistry.get(matId);
  if (matData != 0 && material != null) {
    material=material.getSubMaterial(matData);
  }
  amount=in.readInt();
  data=in.readShort();
  int auxDataSize=in.readInt();
  if (auxDataSize > 0) {
    byte[] auxData=new byte[auxDataSize];
    in.read(auxData);
    ManagedHashMap map=new ManagedHashMap();
    map.deserialize(auxData);
    this.auxData=map;
  }
  boolean hasNBTData=in.readBoolean();
  if (hasNBTData) {
    NBTInputStream is=new NBTInputStream(in,false);
    CompoundTag tag=(CompoundTag)is.readTag();
    nbtData=tag.getValue();
    is.close();
  }
  if (material == null) {
    throw new ClassNotFoundException(""String_Node_Str"" + matId + ""String_Node_Str""+ matData+ ""String_Node_Str"");
  }
}",0.9877913429522752
177283,"private ChannelQueueThread getChannelQueue(int queueId){
  queueId=queueId & QUEUE_ID_MASK;
  ChannelQueueThread[] queues=channelQueues.get();
  if (queues == null) {
    return null;
  }
  while (queueId >= queues.length || queues[queueId] == null) {
    ChannelQueueThread[] newQueues=new ChannelQueueThread[queueId + 1];
    for (int i=0; i < queues.length; i++) {
      newQueues[i]=queues[i];
    }
    ChannelQueueThread newQueue=new ChannelQueueThread(poolIndex,queueId);
    newQueues[queueId]=newQueue;
    if (channelQueues.compareAndSet(queues,newQueues)) {
      newQueue.start();
      queues=newQueues;
    }
  }
  return queues[queueId];
}","private ChannelQueueThread getChannelQueue(int queueId){
  queueId=queueId & QUEUE_ID_MASK;
  ChannelQueueThread[] queues=channelQueues.get();
  if (queues == null) {
    return null;
  }
  while (queueId >= queues.length || queues[queueId] == null) {
    ChannelQueueThread[] newQueues=new ChannelQueueThread[queueId + 1];
    System.arraycopy(queues,0,newQueues,0,queues.length);
    ChannelQueueThread newQueue=new ChannelQueueThread(poolIndex,queueId);
    newQueues[queueId]=newQueue;
    if (channelQueues.compareAndSet(queues,newQueues)) {
      newQueue.start();
      queues=newQueues;
    }
  }
  return queues[queueId];
}",0.9237947122861586
177284,"public NetworkSendThread(int poolIndex){
  this.poolIndex=poolIndex;
  channelQueues.set(new ChannelQueueThread[16]);
}","public NetworkSendThread(int poolIndex){
  this.poolIndex=poolIndex;
  channelQueues.set(new ChannelQueueThread[0]);
}",0.9873417721518988
177285,"@Override public void send(boolean upstream,boolean force,Message message){
  if (message == null) {
    return;
  }
  try {
    if (force || this.state == State.GAME) {
      if (channel.isOpen()) {
        NetworkSendThread sendThread=networkSendThread.get();
        if (sendThread == null) {
          channel.write(message);
        }
 else {
          sendThread.send(this,channel,message);
        }
      }
    }
 else {
      sendQueue.add(message);
    }
  }
 catch (  Exception e) {
    disconnect(false,new Object[]{""String_Node_Str""});
  }
}","@Override public void send(boolean upstream,boolean force,Message message){
  if (message == null) {
    return;
  }
  try {
    if (force || this.state == State.GAME) {
      if (channel.isOpen()) {
        NetworkSendThread sendThread=networkSendThread.get();
        if (sendThread == null) {
          channel.write(message);
        }
 else {
          sendThread.send(this,channel,message);
        }
      }
    }
 else {
      sendQueue.add(message);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    disconnect(false,new Object[]{""String_Node_Str""});
  }
}",0.9779346866725508
177286,"/** 
 * Adds a prioritized element to the queue
 * @param o
 */
public boolean add(T o){
  Long key=getKey(o.getPriority());
  RedirectableConcurrentLinkedQueue<T> queue=queueMap.get(key);
  if (queue == null) {
    queue=new RedirectableConcurrentLinkedQueue<T>(key);
    RedirectableConcurrentLinkedQueue<T> previous=queueMap.putIfAbsent(key,queue);
    if (previous != null) {
      queue=previous;
    }
  }
  return queue.add(o);
}","/** 
 * Adds a prioritized element to the queue
 * @param o
 */
public boolean add(T o){
  return addRaw(o);
}",0.3919413919413919
177287,"/** 
 * This method is used to add elements to the queue when redirecting.  It should not be used for other purposed.
 * @param e
 * @return
 */
public boolean redirect(T o){
  return add(o);
}","/** 
 * This method is used to add elements to the queue when redirecting.  It should not be used for other purposes.
 * @param e
 * @return
 */
public boolean redirect(T o){
  return addRaw(o);
}",0.987146529562982
177288,"private ByteArrayArray getByteArrayArray(){
  int count=0;
  boolean interrupted=false;
  try {
    while (true) {
      ByteArrayArray baa=baaRef.get();
      if (baa != null) {
        if (!baa.isClosed()) {
          return baa;
        }
        baaRef.compareAndSet(baa,null);
        continue;
      }
      if (baaRef.compareAndSet(null,openInProgress)) {
        baa=null;
        try {
          try {
            baa=new SimpleRegionFile(file,segmentSize,entries,timeout);
          }
 catch (          ClosedByInterruptException e1) {
            interrupted|=Thread.interrupted();
            baa=null;
            continue;
          }
catch (          IOException e) {
            System.out.println(""String_Node_Str"" + file);
            baa=null;
          }
          return baa;
        }
  finally {
          if (!baaRef.compareAndSet(openInProgress,baa)) {
            throw new IllegalStateException(""String_Node_Str"");
          }
        }
      }
      count++;
      if (count > 10) {
        try {
          Thread.sleep(1);
        }
 catch (        InterruptedException e) {
        }
      }
 else       if (count > 0) {
        Thread.yield();
      }
    }
  }
  finally {
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
}","private ByteArrayArray getByteArrayArray(){
  int count=0;
  while (true) {
    ByteArrayArray baa=baaRef.get();
    if (baa != null) {
      if (!baa.isClosed()) {
        return baa;
      }
      baaRef.compareAndSet(baa,null);
      continue;
    }
    if (baaRef.compareAndSet(null,openInProgress)) {
      baa=null;
      try {
        try {
          baa=new SimpleRegionFile(file,segmentSize,entries,timeout);
        }
 catch (        IOException e) {
          e.printStackTrace();
          baa=null;
        }
        return baa;
      }
  finally {
        if (!baaRef.compareAndSet(openInProgress,baa)) {
          throw new IllegalStateException(""String_Node_Str"");
        }
      }
    }
    count++;
    if (count > 10) {
      try {
        Thread.sleep(1);
      }
 catch (      InterruptedException e) {
      }
    }
 else     if (count > 0) {
      Thread.yield();
    }
  }
}",0.5541284403669725
177289,"public MappedRandomAccessFile(File filePath,String permissions,int pageShift) throws FileNotFoundException {
  this.file=new RandomAccessFile(filePath,permissions);
  this.PAGE_SHIFT=pageShift;
  PAGE_SIZE=(1 << PAGE_SHIFT);
  PAGE_MASK=PAGE_SIZE - 1;
}","public MappedRandomAccessFile(File filePath,String permissions,int pageShift) throws FileNotFoundException {
  this.file=new RandomAccessFile(filePath,permissions);
  this.PAGE_SHIFT=pageShift;
  PAGE_SIZE=(1 << PAGE_SHIFT);
  PAGE_MASK=PAGE_SIZE - 1;
  this.filePath=filePath;
  this.permissions=permissions;
}",0.8971631205673759
177290,"private MappedByteBuffer getPage(int pageIndex) throws IOException {
  while (pageIndex >= pages.size()) {
    pages.add(null);
  }
  MappedByteBuffer page=pages.get(pageIndex);
  if (page == null) {
    long pagePosition=pageIndex << PAGE_SHIFT;
    page=file.getChannel().map(FileChannel.MapMode.READ_WRITE,pagePosition,PAGE_SIZE);
    pages.set(pageIndex,page);
  }
  return page;
}","private MappedByteBuffer getPage(int pageIndex) throws IOException {
  while (pageIndex >= pages.size()) {
    pages.add(null);
  }
  MappedByteBuffer page=pages.get(pageIndex);
  if (page == null) {
    long pagePosition=pageIndex << PAGE_SHIFT;
    boolean interrupted=false;
    boolean success=false;
    try {
      while (!success) {
        try {
          interrupted|=Thread.interrupted();
          page=file.getChannel().map(FileChannel.MapMode.READ_WRITE,pagePosition,PAGE_SIZE);
          success=true;
        }
 catch (        ClosedByInterruptException e) {
          file=new RandomAccessFile(filePath,permissions);
        }
catch (        IOException e) {
          throw new IOException(""String_Node_Str"" + filePath,e);
        }
      }
    }
  finally {
      if (interrupted) {
        Thread.currentThread().interrupt();
      }
    }
    pages.set(pageIndex,page);
  }
  return page;
}",0.5945945945945946
177291,"public void write(byte[] b,int off,int len) throws IOException {
  int pageIndex=(int)(pos >> PAGE_SHIFT);
  int offset=(int)(pos & PAGE_MASK);
  int endPageOne=Math.min(len + offset,PAGE_SIZE);
  MappedByteBuffer page=getPage(pageIndex);
  int j=0;
  int length=endPageOne - offset;
  page.position(offset);
  page.put(b,off + j,length);
  j+=length;
  while (len > j) {
    pageIndex++;
    page=getPage(pageIndex);
    page.position(0);
    if (len - j > PAGE_SIZE) {
      length=PAGE_SIZE;
    }
 else {
      length=len - j;
    }
    page.put(b,off + j,length);
    j+=length;
  }
  pos+=b.length;
}","public void write(byte[] b,int off,int len) throws IOException {
  int pageIndex=(int)(pos >> PAGE_SHIFT);
  int offset=(int)(pos & PAGE_MASK);
  int endPageOne=Math.min(len + offset,PAGE_SIZE);
  MappedByteBuffer page=getPage(pageIndex);
  int j=0;
  int length=endPageOne - offset;
  page.position(offset);
  page.put(b,off + j,length);
  j+=length;
  while (len > j) {
    pageIndex++;
    page=getPage(pageIndex);
    page.position(0);
    if (len - j > PAGE_SIZE) {
      length=PAGE_SIZE;
    }
 else {
      length=len - j;
    }
    page.put(b,off + j,length);
    j+=length;
  }
  pos+=len;
}",0.9908864954432476
177292,"/** 
 * Increments the lock counter.<br>
 * @return the number of blocks locked or FILE_CLOSED
 */
private int decrementLockCounter(){
  while (true) {
    int oldValue=this.lockCounter.get();
    if (oldValue == SimpleRegionFile.FILE_CLOSED) {
      return SimpleRegionFile.FILE_CLOSED;
    }
 else     if (oldValue <= 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    int newValue=oldValue - 1;
    if (this.lockCounter.compareAndSet(oldValue,newValue)) {
      return newValue;
    }
  }
}","/** 
 * Increments the lock counter.<br>
 * @return the number of blocks locked or FILE_CLOSED
 */
private int decrementLockCounter(){
  while (true) {
    int oldValue=this.lockCounter.get();
    int newValue=oldValue - 1;
    if (oldValue == SimpleRegionFile.FILE_CLOSED) {
      newValue=SimpleRegionFile.FILE_CLOSED;
    }
 else     if (oldValue <= 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    if (this.lockCounter.compareAndSet(oldValue,newValue)) {
      return newValue;
    }
  }
}",0.923679060665362
177293,"public void updateBlockPhysics(int x,int y,int z,BlockMaterial oldMaterial){
  checkChunkLoaded();
  int rx=x & BLOCKS.MASK;
  int ry=y & BLOCKS.MASK;
  int rz=z & BLOCKS.MASK;
  rx+=(getX() & Region.CHUNKS.MASK) << BLOCKS.BITS;
  ry+=(getY() & Region.CHUNKS.MASK) << BLOCKS.BITS;
  rz+=(getZ() & Region.CHUNKS.MASK) << BLOCKS.BITS;
  physicsQueue.queueForUpdate(rx,ry,rz,null);
}","public void updateBlockPhysics(int x,int y,int z,BlockMaterial oldMaterial){
  checkChunkLoaded();
  int rx=x & BLOCKS.MASK;
  int ry=y & BLOCKS.MASK;
  int rz=z & BLOCKS.MASK;
  rx+=(getX() & Region.CHUNKS.MASK) << BLOCKS.BITS;
  ry+=(getY() & Region.CHUNKS.MASK) << BLOCKS.BITS;
  rz+=(getZ() & Region.CHUNKS.MASK) << BLOCKS.BITS;
  physicsQueue.queueForUpdate(rx,ry,rz,oldMaterial);
}",0.9830508474576272
177294,"private ByteArrayArray getByteArrayArray(){
  int count=0;
  boolean interrupted=false;
  try {
    while (true) {
      ByteArrayArray baa=baaRef.get();
      if (baa != null) {
        if (!baa.isClosed()) {
          return baa;
        }
        baaRef.compareAndSet(baa,null);
        continue;
      }
      if (baaRef.compareAndSet(null,openInProgress)) {
        try {
          try {
            baa=new SimpleRegionFile(file,segmentSize,entries,timeout);
          }
 catch (          ClosedByInterruptException e1) {
            interrupted|=Thread.interrupted();
            baaRef.compareAndSet(openInProgress,null);
            continue;
          }
catch (          IOException e) {
            System.out.println(""String_Node_Str"" + file);
            baaRef.compareAndSet(openInProgress,null);
          }
          return baa;
        }
  finally {
          if (!baaRef.compareAndSet(openInProgress,baa)) {
            throw new IllegalStateException(""String_Node_Str"");
          }
        }
      }
      count++;
      if (count > 10) {
        try {
          Thread.sleep(1);
        }
 catch (        InterruptedException e) {
        }
      }
 else       if (count > 0) {
        Thread.yield();
      }
    }
  }
  finally {
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
}","private ByteArrayArray getByteArrayArray(){
  int count=0;
  boolean interrupted=false;
  try {
    while (true) {
      ByteArrayArray baa=baaRef.get();
      if (baa != null) {
        if (!baa.isClosed()) {
          return baa;
        }
        baaRef.compareAndSet(baa,null);
        continue;
      }
      if (baaRef.compareAndSet(null,openInProgress)) {
        baa=null;
        try {
          try {
            baa=new SimpleRegionFile(file,segmentSize,entries,timeout);
          }
 catch (          ClosedByInterruptException e1) {
            interrupted|=Thread.interrupted();
            baa=null;
            continue;
          }
catch (          IOException e) {
            System.out.println(""String_Node_Str"" + file);
            baa=null;
          }
          return baa;
        }
  finally {
          if (!baaRef.compareAndSet(openInProgress,baa)) {
            throw new IllegalStateException(""String_Node_Str"");
          }
        }
      }
      count++;
      if (count > 10) {
        try {
          Thread.sleep(1);
        }
 catch (        InterruptedException e) {
        }
      }
 else       if (count > 0) {
        Thread.yield();
      }
    }
  }
  finally {
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
}",0.9019157088122606
177295,"@Override public void assign(){
  if (getShader().getMaterialAssigned() != this) {
    Set<Map.Entry<String,Object>> s=materialParameters.entrySet();
    for (    Map.Entry<String,Object> entry : s) {
      if (entry.getValue() instanceof Integer) {
        shader.setUniform(entry.getKey(),((Integer)entry.getValue()).intValue());
      }
 else       if (entry.getValue() instanceof Float) {
        shader.setUniform(entry.getKey(),((Float)entry.getValue()).floatValue());
      }
 else       if (entry.getValue() instanceof Double) {
        shader.setUniform(entry.getKey(),((Double)entry.getValue()).floatValue());
      }
 else       if (entry.getValue() instanceof ClientTexture) {
        shader.setUniform(entry.getKey(),(ClientTexture)entry.getValue());
      }
 else       if (entry.getValue() instanceof Vector2) {
        shader.setUniform(entry.getKey(),(Vector2)entry.getValue());
      }
 else       if (entry.getValue() instanceof Vector3) {
        shader.setUniform(entry.getKey(),(Vector3)entry.getValue());
      }
 else       if (entry.getValue() instanceof Vector4) {
        shader.setUniform(entry.getKey(),(Vector4)entry.getValue());
      }
 else       if (entry.getValue() instanceof Color) {
        shader.setUniform(entry.getKey(),(Color)entry.getValue());
      }
 else       if (entry.getValue() instanceof Matrix) {
        shader.setUniform(entry.getKey(),(Matrix)entry.getValue());
      }
    }
    getShader().setMaterialAssigned(this);
  }
  shader.assign();
}","@Override public void assign(){
  if (materialParameters != null && getShader().getMaterialAssigned() != this) {
    Set<Map.Entry<String,Object>> s=materialParameters.entrySet();
    for (    Map.Entry<String,Object> entry : s) {
      if (entry.getValue() instanceof Integer) {
        shader.setUniform(entry.getKey(),((Integer)entry.getValue()).intValue());
      }
 else       if (entry.getValue() instanceof Float) {
        shader.setUniform(entry.getKey(),((Float)entry.getValue()).floatValue());
      }
 else       if (entry.getValue() instanceof Double) {
        shader.setUniform(entry.getKey(),((Double)entry.getValue()).floatValue());
      }
 else       if (entry.getValue() instanceof ClientTexture) {
        shader.setUniform(entry.getKey(),(ClientTexture)entry.getValue());
      }
 else       if (entry.getValue() instanceof Vector2) {
        shader.setUniform(entry.getKey(),(Vector2)entry.getValue());
      }
 else       if (entry.getValue() instanceof Vector3) {
        shader.setUniform(entry.getKey(),(Vector3)entry.getValue());
      }
 else       if (entry.getValue() instanceof Vector4) {
        shader.setUniform(entry.getKey(),(Vector4)entry.getValue());
      }
 else       if (entry.getValue() instanceof Color) {
        shader.setUniform(entry.getKey(),(Color)entry.getValue());
      }
 else       if (entry.getValue() instanceof Matrix) {
        shader.setUniform(entry.getKey(),(Matrix)entry.getValue());
      }
    }
    getShader().setMaterialAssigned(this);
  }
  shader.assign();
}",0.9900924702774108
177296,"/** 
 * Updates CollisionObjects in this region and adds/removes them from the simulation.  Steps simulation forward and finally alerts the API in components.
 * @param dt
 */
private void updateDynamics(float dt){
  try {
synchronized (simulation) {
      simulation.stepSimulation(dt / 1000,2);
      final Dispatcher dispatcher=simulation.getDispatcher();
      int manifolds=dispatcher.getNumManifolds();
      for (int i=0; i < manifolds; i++) {
        PersistentManifold contact=dispatcher.getManifoldByIndexInternal(i);
        Object colliderRawA=contact.getBody0();
        Object colliderRawB=contact.getBody1();
        if (!(colliderRawA instanceof CollisionObject) || !(colliderRawB instanceof CollisionObject)) {
          continue;
        }
        Object holderA=((CollisionObject)colliderRawA).getUserPointer();
        Object holderB=((CollisionObject)colliderRawB).getUserPointer();
        int contacts=contact.getNumContacts();
        for (int j=0; j < contacts; j++) {
          final ManifoldPoint bulletPoint=contact.getContactPoint(j);
          if (bulletPoint.getDistance() > 0f) {
            continue;
          }
          Point contactPointA=new Point(MathHelper.toVector3(bulletPoint.getPositionWorldOnA(new Vector3f())),getWorld());
          Point contactPointB=new Point(MathHelper.toVector3(bulletPoint.getPositionWorldOnB(new Vector3f())),getWorld());
          if (holderA instanceof Entity) {
            if (((Entity)holderA).isRemoved()) {
              break;
            }
            if (holderB instanceof Entity) {
              if (((Entity)holderB).isRemoved()) {
                break;
              }
              for (              Component component : ((Entity)holderA).values()) {
                if (component instanceof EntityComponent) {
                  ((EntityComponent)component).onCollided(contactPointA,contactPointB,(Entity)holderB);
                }
              }
              for (              Component component : ((Entity)holderB).values()) {
                if (component instanceof EntityComponent) {
                  ((EntityComponent)component).onCollided(contactPointB,contactPointA,(Entity)holderA);
                }
              }
            }
 else             if (holderB instanceof Block) {
              for (              Component component : ((Entity)holderA).values()) {
                if (component instanceof EntityComponent) {
                  ((EntityComponent)component).onCollided(contactPointA,contactPointB,(Block)holderB);
                }
              }
              ((Block)holderB).getMaterial().onCollided(contactPointB,contactPointA,(Entity)holderA);
            }
          }
 else           if (holderA instanceof Block) {
            if (holderB instanceof Entity) {
              if (((Entity)holderB).isRemoved()) {
                break;
              }
              ((Block)holderA).getMaterial().onCollided(contactPointA,contactPointB,(Entity)holderB);
              for (              Component component : ((Entity)holderB).values()) {
                if (component instanceof EntityComponent) {
                  ((EntityComponent)component).onCollided(contactPointB,contactPointA,(Block)holderA);
                }
              }
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
synchronized (logLock) {
      Spout.getLogger().log(Level.SEVERE,""String_Node_Str"" + getBase().toBlockString(),e);
    }
  }
}","/** 
 * Updates CollisionObjects in this region and adds/removes them from the simulation.  Steps simulation forward and finally alerts the API in components.
 * @param dt
 */
private void updateDynamics(float dt){
  try {
synchronized (simulation) {
      simulation.stepSimulation(dt,2);
      final Dispatcher dispatcher=simulation.getDispatcher();
      int manifolds=dispatcher.getNumManifolds();
      for (int i=0; i < manifolds; i++) {
        PersistentManifold contact=dispatcher.getManifoldByIndexInternal(i);
        Object colliderRawA=contact.getBody0();
        Object colliderRawB=contact.getBody1();
        if (!(colliderRawA instanceof CollisionObject) || !(colliderRawB instanceof CollisionObject)) {
          continue;
        }
        Object holderA=((CollisionObject)colliderRawA).getUserPointer();
        Object holderB=((CollisionObject)colliderRawB).getUserPointer();
        int contacts=contact.getNumContacts();
        for (int j=0; j < contacts; j++) {
          final ManifoldPoint bulletPoint=contact.getContactPoint(j);
          if (bulletPoint.getDistance() > 0f) {
            continue;
          }
          Point contactPointA=new Point(MathHelper.toVector3(bulletPoint.getPositionWorldOnA(new Vector3f())),getWorld());
          Point contactPointB=new Point(MathHelper.toVector3(bulletPoint.getPositionWorldOnB(new Vector3f())),getWorld());
          if (holderA instanceof Entity) {
            if (((Entity)holderA).isRemoved()) {
              break;
            }
            if (holderB instanceof Entity) {
              if (((Entity)holderB).isRemoved()) {
                break;
              }
              for (              Component component : ((Entity)holderA).values()) {
                if (component instanceof EntityComponent) {
                  ((EntityComponent)component).onCollided(contactPointA,contactPointB,(Entity)holderB);
                }
              }
              for (              Component component : ((Entity)holderB).values()) {
                if (component instanceof EntityComponent) {
                  ((EntityComponent)component).onCollided(contactPointB,contactPointA,(Entity)holderA);
                }
              }
            }
 else             if (holderB instanceof Block) {
              for (              Component component : ((Entity)holderA).values()) {
                if (component instanceof EntityComponent) {
                  ((EntityComponent)component).onCollided(contactPointA,contactPointB,(Block)holderB);
                }
              }
              ((Block)holderB).getMaterial().onCollided(contactPointB,contactPointA,(Entity)holderA);
            }
          }
 else           if (holderA instanceof Block) {
            if (holderB instanceof Entity) {
              if (((Entity)holderB).isRemoved()) {
                break;
              }
              ((Block)holderA).getMaterial().onCollided(contactPointA,contactPointB,(Entity)holderB);
              for (              Component component : ((Entity)holderB).values()) {
                if (component instanceof EntityComponent) {
                  ((EntityComponent)component).onCollided(contactPointB,contactPointA,(Block)holderA);
                }
              }
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
synchronized (logLock) {
      Spout.getLogger().log(Level.SEVERE,""String_Node_Str"" + getBase().toBlockString(),e);
    }
  }
}",0.9989894615273568
177297,"public void startTickRun(int stage,long delta){
  final float dt=delta;
switch (stage) {
case 0:
{
      taskManager.heartbeat(delta);
      updateAutosave();
      updateBlockComponents(dt);
      updateEntities(dt);
      updateLighting();
      updatePopulation();
      unloadChunks();
      break;
    }
case 1:
{
    updateDynamics(dt);
    break;
  }
default :
{
  throw new IllegalStateException(""String_Node_Str"");
}
}
}","public void startTickRun(int stage,long delta){
  final float dt=delta / 1000;
switch (stage) {
case 0:
{
      taskManager.heartbeat(delta);
      updateAutosave();
      updateBlockComponents(dt);
      updateEntities(dt);
      updateLighting();
      updatePopulation();
      unloadChunks();
      break;
    }
case 1:
{
    updateDynamics(dt);
    break;
  }
default :
{
  throw new IllegalStateException(""String_Node_Str"");
}
}
}",0.991907514450867
177298,"public ClientClassLoader(CommonPluginLoader loader,ClassLoader parent){
  super(loader,parent);
}","public ClientClassLoader(CommonPluginLoader loader,ClassLoader parent,List<String> depends,List<String> softDepends){
  super(loader,parent,depends,softDepends);
}",0.7461538461538462
177299,"public CommonClassLoader(final CommonPluginLoader loader,final ClassLoader parent){
  super(new URL[0],parent);
  this.loader=loader;
  loaders.add(this);
}","public CommonClassLoader(final CommonPluginLoader loader,final ClassLoader parent,List<String> depends,List<String> softDepends){
  super(new URL[0],parent);
  this.loader=loader;
  loaders.add(this);
  this.depends=depends == null ? Collections.<String>emptyList() : Collections.unmodifiableList(depends);
  this.softDepends=softDepends == null ? Collections.<String>emptyList() : Collections.unmodifiableList(softDepends);
}",0.5360824742268041
177300,"protected Class<?> findClass(String name,boolean checkGlobal) throws ClassNotFoundException {
  Class<?> result=classes.get(name);
  if (result == null) {
    try {
      result=super.findClass(name);
    }
 catch (    Exception ignored) {
    }
    if (result == null && checkGlobal) {
      result=loader.getClassByName(name,this);
    }
    if (result != null) {
      classes.put(name,result);
      pluginsForClassNames.put(name,plugin);
    }
 else {
      throw new ClassNotFoundException(name);
    }
  }
  return result;
}","protected Class<?> findClass(String name,boolean checkGlobal) throws ClassNotFoundException {
  Class<?> result=classes.get(name);
  if (result == null) {
    try {
      result=super.findClass(name);
    }
 catch (    ClassNotFoundException ignored) {
    }
    if (result == null && checkGlobal) {
      result=loader.getClassByName(name,this);
    }
    if (result != null) {
      classes.put(name,result);
      pluginsForClassNames.put(name,plugin);
    }
 else {
      throw new ClassNotFoundException(name);
    }
  }
  return result;
}",0.987906976744186
177301,"protected Class<?> getClassByName(final String name,final CommonClassLoader commonLoader){
  CommonPlugin plugin=commonLoader.getPlugin();
  Set<String> ignore=new HashSet<String>();
  try {
    ignore.add(plugin.getName());
  }
 catch (  NullPointerException nfe) {
    Spout.getLogger().severe(""String_Node_Str"" + name + ""String_Node_Str"");
    return null;
  }
  if (plugin.getDescription().getDepends() != null) {
    for (    String dependency : plugin.getDescription().getDepends()) {
      try {
        Class<?> clazz=loaders.get(dependency).findClass(name,false);
        if (clazz != null) {
          return clazz;
        }
      }
 catch (      ClassNotFoundException ignored) {
      }
      ignore.add(dependency);
    }
  }
  if (plugin.getDescription().getSoftDepends() != null) {
    for (    String softDependency : plugin.getDescription().getSoftDepends()) {
      try {
        Class<?> clazz=loaders.get(softDependency).findClass(name,false);
        if (clazz != null) {
          return clazz;
        }
      }
 catch (      ClassNotFoundException ignored) {
      }
      ignore.add(softDependency);
    }
  }
  for (  String current : loaders.keySet()) {
    if (ignore.contains(current)) {
      continue;
    }
    CommonClassLoader loader=loaders.get(current);
    try {
      Class<?> clazz=loader.findClass(name,false);
      if (clazz != null) {
        return clazz;
      }
    }
 catch (    ClassNotFoundException ignored) {
    }
  }
  return null;
}","protected Class<?> getClassByName(final String name,final CommonClassLoader commonLoader){
  Set<String> ignore=new HashSet<String>();
  for (  String dependency : commonLoader.getDepends()) {
    try {
      Class<?> clazz=loaders.get(dependency).findClass(name,false);
      if (clazz != null) {
        return clazz;
      }
    }
 catch (    ClassNotFoundException ignored) {
    }
    ignore.add(dependency);
  }
  for (  String softDependency : commonLoader.getSoftDepends()) {
    try {
      Class<?> clazz=loaders.get(softDependency).findClass(name,false);
      if (clazz != null) {
        return clazz;
      }
    }
 catch (    ClassNotFoundException ignored) {
    }
    ignore.add(softDependency);
  }
  for (  String current : loaders.keySet()) {
    if (ignore.contains(current)) {
      continue;
    }
    CommonClassLoader loader=loaders.get(current);
    if (loader == commonLoader) {
      continue;
    }
    try {
      Class<?> clazz=loader.findClass(name,false);
      if (clazz != null) {
        return clazz;
      }
    }
 catch (    ClassNotFoundException ignored) {
    }
  }
  return null;
}",0.6832631175794714
177302,"@Override public synchronized Plugin loadPlugin(File paramFile,boolean ignoresoftdepends) throws InvalidPluginException, UnknownDependencyException, InvalidDescriptionFileException {
  CommonPlugin result;
  PluginDescriptionFile desc;
  CommonClassLoader loader;
  desc=getDescription(paramFile);
  File dataFolder=new File(paramFile.getParentFile(),desc.getName());
  processDependencies(desc);
  if (!ignoresoftdepends) {
    processSoftDependencies(desc);
  }
  try {
    if (engine.getPlatform() == Platform.CLIENT) {
      loader=new ClientClassLoader(this,this.getClass().getClassLoader());
    }
 else {
      loader=new CommonClassLoader(this,this.getClass().getClassLoader());
    }
    loader.addURL(paramFile.toURI().toURL());
    Class<?> main=Class.forName(desc.getMain(),true,loader);
    Class<? extends CommonPlugin> plugin=main.asSubclass(CommonPlugin.class);
    boolean locked=manager.lock(key);
    Constructor<? extends CommonPlugin> constructor=plugin.getConstructor();
    result=constructor.newInstance();
    result.initialize(this,engine,desc,dataFolder,paramFile,loader);
    if (!locked) {
      manager.unlock(key);
    }
  }
 catch (  Exception e) {
    throw new InvalidPluginException(e);
  }
catch (  UnsupportedClassVersionError e) {
    String version=e.getMessage().replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")[0];
    Spout.getLogger().severe(""String_Node_Str"" + desc.getName() + ""String_Node_Str"");
    Spout.getLogger().severe(""String_Node_Str"" + desc.getName() + ""String_Node_Str""+ version+ ""String_Node_Str"");
    throw new InvalidPluginException(e);
  }
  loader.setPlugin(result);
  loaders.put(desc.getName(),loader);
  return result;
}","@Override public synchronized Plugin loadPlugin(File paramFile,boolean ignoresoftdepends) throws InvalidPluginException, UnknownDependencyException, InvalidDescriptionFileException {
  CommonPlugin result;
  PluginDescriptionFile desc;
  CommonClassLoader loader;
  desc=getDescription(paramFile);
  File dataFolder=new File(paramFile.getParentFile(),desc.getName());
  processDependencies(desc);
  if (!ignoresoftdepends) {
    processSoftDependencies(desc);
  }
  try {
    if (engine.getPlatform() == Platform.CLIENT) {
      loader=new ClientClassLoader(this,this.getClass().getClassLoader(),desc.getDepends(),desc.getSoftDepends());
    }
 else {
      loader=new CommonClassLoader(this,this.getClass().getClassLoader(),desc.getDepends(),desc.getSoftDepends());
    }
    loader.addURL(paramFile.toURI().toURL());
    Class<?> main=Class.forName(desc.getMain(),true,loader);
    Class<? extends CommonPlugin> plugin=main.asSubclass(CommonPlugin.class);
    boolean locked=manager.lock(key);
    Constructor<? extends CommonPlugin> constructor=plugin.getConstructor();
    result=constructor.newInstance();
    result.initialize(this,engine,desc,dataFolder,paramFile,loader);
    if (!locked) {
      manager.unlock(key);
    }
  }
 catch (  Exception e) {
    throw new InvalidPluginException(e);
  }
catch (  UnsupportedClassVersionError e) {
    String version=e.getMessage().replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")[0];
    Spout.getLogger().severe(""String_Node_Str"" + desc.getName() + ""String_Node_Str"");
    Spout.getLogger().severe(""String_Node_Str"" + desc.getName() + ""String_Node_Str""+ version+ ""String_Node_Str"");
    throw new InvalidPluginException(e);
  }
  loader.setPlugin(result);
  loaders.put(desc.getName(),loader);
  return result;
}",0.9771559109080524
177303,"@Override @SuppressWarnings(""String_Node_Str"") public V[] values(V[] dest){
  for (int m=0; m < mapCount; m++) {
    lockArray[m].readLock().lock();
  }
  try {
    int localSize=totalKeys.get();
    V[] values;
    if (dest == null || dest.length < localSize) {
      values=(V[])new Object[size()];
    }
 else {
      values=dest;
    }
    int position=0;
    for (int m=0; m < mapCount; m++) {
      V[] mapValues=(V[])mapArray[m].values();
      for (      V mapValue : mapValues) {
        values[position++]=mapValue;
      }
    }
    if (position != localSize) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    return values;
  }
  finally {
    for (int m=0; m < mapCount; m++) {
      lockArray[m].readLock().unlock();
    }
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public V[] values(V[] dest){
  if (dest == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (int m=0; m < mapCount; m++) {
    lockArray[m].readLock().lock();
  }
  try {
    int localSize=totalKeys.get();
    V[] values;
    if (dest.length < localSize) {
      values=(V[])Array.newInstance(dest.getClass().getComponentType(),size());
    }
 else {
      values=dest;
    }
    int position=0;
    for (int m=0; m < mapCount; m++) {
      V[] mapValues=(V[])mapArray[m].values();
      for (      V mapValue : mapValues) {
        values[position++]=mapValue;
      }
    }
    if (position != localSize) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    for (int i=position; i < dest.length; i++) {
      values[i]=null;
    }
    return values;
  }
  finally {
    for (int m=0; m < mapCount; m++) {
      lockArray[m].readLock().unlock();
    }
  }
}",0.7908878504672897
177304,"public TransformTag(String name,Transform t){
  super(name,transformToMap(t));
}","public TransformTag(String name,Vector3 p,Quaternion q,Vector3 s){
  super(name,toMap(p,q,s));
}",0.7159090909090909
177305,"public static Vector3 getValue(List<FloatTag> list){
  if (list == null || list.size() != 4) {
    return null;
  }
  Float x=NBTMapper.toTagValue(list.get(0),Float.class,null);
  Float y=NBTMapper.toTagValue(list.get(1),Float.class,null);
  Float z=NBTMapper.toTagValue(list.get(2),Float.class,null);
  if (x == null || y == null || z == null) {
    return null;
  }
  return new Vector3(x,y,z);
}","public static Vector3 getValue(List<FloatTag> list){
  if (list == null || list.size() != 3) {
    return null;
  }
  Float x=NBTMapper.toTagValue(list.get(0),Float.class,null);
  Float y=NBTMapper.toTagValue(list.get(1),Float.class,null);
  Float z=NBTMapper.toTagValue(list.get(2),Float.class,null);
  if (x == null || y == null || z == null) {
    return null;
  }
  return new Vector3(x,y,z);
}",0.9974874371859296
177306,"@Override public void copySnapshot(){
  super.copySnapshot();
  Transform t=getTransform();
  float ratio=80f / 20f;
  speed=t.getPosition().subtract(transformRender.getPosition()).multiply(ratio);
  rotate=new Vector3(t.getRotation().getPitch() - transformRender.getRotation().getPitch(),t.getRotation().getYaw() - transformRender.getRotation().getYaw(),t.getRotation().getRoll() - transformRender.getRotation().getRoll()).multiply(ratio);
  scale=t.getScale().subtract(transformRender.getScale()).multiply(ratio);
  System.out.println(speed);
  lastTime=System.currentTimeMillis();
}","@Override public void copySnapshot(){
  super.copySnapshot();
  Transform t=getTransform();
  float ratio=80f / 20f;
  speed=t.getPosition().subtract(transformRender.getPosition()).multiply(ratio);
  rotate=new Vector3(t.getRotation().getPitch() - transformRender.getRotation().getPitch(),t.getRotation().getYaw() - transformRender.getRotation().getYaw(),t.getRotation().getRoll() - transformRender.getRotation().getRoll()).multiply(ratio);
  scale=t.getScale().subtract(transformRender.getScale()).multiply(ratio);
  lastTime=System.currentTimeMillis();
}",0.9745836985100788
177307,"private boolean setBlockMaterial(int x,int y,int z,BlockMaterial material,short data,Cause<?> cause,boolean event){
  int bx=x & BLOCKS.MASK;
  int by=y & BLOCKS.MASK;
  int bz=z & BLOCKS.MASK;
  checkChunkLoaded();
  checkBlockStoreUpdateAllowed();
  if (event) {
    Block block=getBlock(bx,by,bz);
    BlockChangeEvent blockEvent=new BlockChangeEvent(block,new BlockSnapshot(block,material,data),cause);
    Spout.getEngine().getEventManager().callEvent(blockEvent);
    if (blockEvent.isCancelled()) {
      return false;
    }
    material=blockEvent.getSnapshot().getMaterial();
    data=blockEvent.getSnapshot().getData();
  }
  short newId=material.getId();
  short newData=data;
  int newState=BlockFullState.getPacked(newId,newData);
  int oldState;
  BlockMaterial oldMaterial;
  if (material instanceof ComplexMaterial) {
    oldState=getAndSetBlockLocked(bx,by,bz,newId,newData);
    oldMaterial=(BlockMaterial)MaterialRegistry.get(oldState);
  }
 else {
    boolean success=false;
    do {
      oldState=blockStore.getFullData(bx,by,bz);
      oldMaterial=(BlockMaterial)MaterialRegistry.get(oldState);
      if (oldMaterial instanceof ComplexMaterial) {
        oldState=getAndSetBlockLocked(bx,by,bz,newId,newData);
        success=true;
      }
 else {
        short oldId=BlockFullState.getId(oldState);
        short oldData=BlockFullState.getData(oldState);
        success=blockStore.compareAndSetBlock(bx,by,bz,oldId,oldData,newId,newData);
      }
    }
 while (!success);
  }
  short oldData=BlockFullState.getData(oldState);
  int oldheight=column.getSurfaceHeight(bx,bz);
  int wy=by + this.getBlockY();
  column.notifyBlockChange(bx,wy,bz);
  int wx=bx + this.getBlockX();
  int wz=bz + this.getBlockZ();
  int newheight=column.getSurfaceHeight(bx,bz);
  if (this.isPopulated()) {
    SpoutWorld world=this.getWorld();
    if (!this.setBlockLight(wx,wy,wz,material.getLightLevel(data),cause)) {
      addBlockLightOperation(wx,wy,wz,SpoutWorldLighting.REFRESH);
    }
    if (newheight > oldheight) {
      for (y=oldheight; y < newheight; y++) {
        world.setBlockSkyLight(wx,wy + 1,wz,(byte)0,cause);
      }
    }
 else     if (newheight < oldheight) {
      for (y=newheight; y < oldheight; y++) {
        world.setBlockSkyLight(wx,wy + 1,wz,(byte)15,cause);
      }
    }
 else {
      byte old=this.getBlockSkyLight(wx,wy,wz);
      if (old == 0) {
        addSkyLightOperation(wx,wy,wz,SpoutWorldLighting.REFRESH);
      }
 else       if (old < 15) {
        this.setBlockSkyLight(wx,wy,wz,(byte)0,cause);
      }
    }
  }
  if (newState != oldState) {
    blockChanged(bx,by,bz,material,newData,oldMaterial,oldData,cause);
    return true;
  }
  return false;
}","private boolean setBlockMaterial(int x,int y,int z,BlockMaterial material,short data,Cause<?> cause,boolean event){
  int bx=x & BLOCKS.MASK;
  int by=y & BLOCKS.MASK;
  int bz=z & BLOCKS.MASK;
  checkChunkLoaded();
  checkBlockStoreUpdateAllowed();
  if (event) {
    Block block=getBlock(bx,by,bz);
    BlockChangeEvent blockEvent=new BlockChangeEvent(block,new BlockSnapshot(block,material,data),cause);
    Spout.getEngine().getEventManager().callEvent(blockEvent);
    if (blockEvent.isCancelled()) {
      return false;
    }
    material=blockEvent.getSnapshot().getMaterial();
    data=blockEvent.getSnapshot().getData();
  }
  short newId=material.getId();
  short newData=data;
  int newState=BlockFullState.getPacked(newId,newData);
  int oldState;
  BlockMaterial oldMaterial;
  if (material instanceof ComplexMaterial) {
    oldState=getAndSetBlockLocked(bx,by,bz,newId,newData);
    oldMaterial=(BlockMaterial)MaterialRegistry.get(oldState);
  }
 else {
    boolean success=false;
    do {
      oldState=blockStore.getFullData(bx,by,bz);
      oldMaterial=(BlockMaterial)MaterialRegistry.get(oldState);
      if (oldMaterial instanceof ComplexMaterial) {
        oldState=getAndSetBlockLocked(bx,by,bz,newId,newData);
        success=true;
      }
 else {
        short oldId=BlockFullState.getId(oldState);
        short oldData=BlockFullState.getData(oldState);
        success=blockStore.compareAndSetBlock(bx,by,bz,oldId,oldData,newId,newData);
      }
    }
 while (!success);
  }
  short oldData=BlockFullState.getData(oldState);
  int oldheight=column.getSurfaceHeight(bx,bz);
  int wy=by + this.getBlockY();
  column.notifyBlockChange(bx,wy,bz);
  int wx=bx + this.getBlockX();
  int wz=bz + this.getBlockZ();
  int newheight=column.getSurfaceHeight(bx,bz);
  if (this.isPopulated()) {
    SpoutWorld world=this.getWorld();
    if (!this.setBlockLight(wx,wy,wz,material.getLightLevel(data),cause)) {
      addBlockLightOperation(wx,wy,wz,SpoutWorldLighting.REFRESH);
    }
    if (newheight > oldheight) {
      for (y=oldheight; y < newheight; y++) {
        world.setBlockSkyLight(wx,y + 1,wz,(byte)0,cause);
      }
    }
 else     if (newheight < oldheight) {
      for (y=newheight; y < oldheight; y++) {
        world.setBlockSkyLight(wx,y + 1,wz,(byte)15,cause);
      }
    }
 else {
      this.setBlockSkyLight(wx,wy,wz,(byte)0,cause);
      addSkyLightOperation(wx,wy,wz,SpoutWorldLighting.REFRESH);
    }
  }
  if (newState != oldState) {
    blockChanged(bx,by,bz,material,newData,oldMaterial,oldData,cause);
    return true;
  }
  return false;
}",0.924678274034822
177308,"public CubeMesh(Vector2[][] uvs){
  super(new ArrayList<OrientedMeshFace>(12));
  Vector3 vertex0=new Vector3(0,0,0);
  Vector3 vertex1=new Vector3(0,1,0);
  Vector3 vertex2=new Vector3(1,1,0);
  Vector3 vertex3=new Vector3(1,0,0);
  Vector3 vertex4=new Vector3(0,0,1);
  Vector3 vertex5=new Vector3(0,1,1);
  Vector3 vertex6=new Vector3(1,1,1);
  Vector3 vertex7=new Vector3(1,0,1);
  Vertex v1=null, v2=null, v3=null, v4=null;
  v1=new Vertex(vertex1,BlockFace.TOP.getOffset(),getUV(uvs,0,3),Color.white);
  v2=new Vertex(vertex2,BlockFace.TOP.getOffset(),getUV(uvs,0,2),Color.white);
  v3=new Vertex(vertex6,BlockFace.TOP.getOffset(),getUV(uvs,0,1),Color.white);
  v4=new Vertex(vertex5,BlockFace.TOP.getOffset(),getUV(uvs,0,0),Color.white);
  meshFace.add(new OrientedMeshFace(v1,v2,v3,new HashSet<BlockFace>(Arrays.asList(BlockFace.TOP))));
  meshFace.add(new OrientedMeshFace(v3,v4,v1,new HashSet<BlockFace>(Arrays.asList(BlockFace.TOP))));
  v1=new Vertex(vertex0,BlockFace.BOTTOM.getOffset(),getUV(uvs,1,3),Color.white);
  v2=new Vertex(vertex4,BlockFace.BOTTOM.getOffset(),getUV(uvs,1,2),Color.white);
  v3=new Vertex(vertex7,BlockFace.BOTTOM.getOffset(),getUV(uvs,1,1),Color.white);
  v4=new Vertex(vertex3,BlockFace.BOTTOM.getOffset(),getUV(uvs,1,3),Color.white);
  meshFace.add(new OrientedMeshFace(v1,v2,v3,new HashSet<BlockFace>(Arrays.asList(BlockFace.BOTTOM))));
  meshFace.add(new OrientedMeshFace(v3,v4,v1,new HashSet<BlockFace>(Arrays.asList(BlockFace.BOTTOM))));
  v1=new Vertex(vertex0,BlockFace.NORTH.getOffset(),getUV(uvs,2,2),Color.white);
  v2=new Vertex(vertex1,BlockFace.NORTH.getOffset(),getUV(uvs,2,1),Color.white);
  v3=new Vertex(vertex5,BlockFace.NORTH.getOffset(),getUV(uvs,2,0),Color.white);
  v4=new Vertex(vertex4,BlockFace.NORTH.getOffset(),getUV(uvs,2,3),Color.white);
  meshFace.add(new OrientedMeshFace(v1,v2,v3,new HashSet<BlockFace>(Arrays.asList(BlockFace.NORTH))));
  meshFace.add(new OrientedMeshFace(v3,v4,v1,new HashSet<BlockFace>(Arrays.asList(BlockFace.NORTH))));
  v1=new Vertex(vertex7,BlockFace.SOUTH.getOffset(),getUV(uvs,3,1),Color.white);
  v2=new Vertex(vertex6,BlockFace.SOUTH.getOffset(),getUV(uvs,3,0),Color.white);
  v3=new Vertex(vertex2,BlockFace.SOUTH.getOffset(),getUV(uvs,3,3),Color.white);
  v4=new Vertex(vertex3,BlockFace.SOUTH.getOffset(),getUV(uvs,3,2),Color.white);
  meshFace.add(new OrientedMeshFace(v1,v2,v3,new HashSet<BlockFace>(Arrays.asList(BlockFace.SOUTH))));
  meshFace.add(new OrientedMeshFace(v3,v4,v1,new HashSet<BlockFace>(Arrays.asList(BlockFace.SOUTH))));
  v1=new Vertex(vertex0,BlockFace.EAST.getOffset(),getUV(uvs,4,2),Color.white);
  v2=new Vertex(vertex3,BlockFace.EAST.getOffset(),getUV(uvs,4,1),Color.white);
  v3=new Vertex(vertex2,BlockFace.EAST.getOffset(),getUV(uvs,4,0),Color.white);
  v4=new Vertex(vertex1,BlockFace.EAST.getOffset(),getUV(uvs,4,3),Color.white);
  meshFace.add(new OrientedMeshFace(v1,v2,v3,new HashSet<BlockFace>(Arrays.asList(BlockFace.EAST))));
  meshFace.add(new OrientedMeshFace(v3,v4,v1,new HashSet<BlockFace>(Arrays.asList(BlockFace.EAST))));
  v1=new Vertex(vertex5,BlockFace.WEST.getOffset(),getUV(uvs,5,0),Color.white);
  v2=new Vertex(vertex6,BlockFace.WEST.getOffset(),getUV(uvs,5,3),Color.white);
  v3=new Vertex(vertex7,BlockFace.WEST.getOffset(),getUV(uvs,5,2),Color.white);
  v4=new Vertex(vertex4,BlockFace.WEST.getOffset(),getUV(uvs,5,1),Color.white);
  meshFace.add(new OrientedMeshFace(v1,v2,v3,new HashSet<BlockFace>(Arrays.asList(BlockFace.WEST))));
  meshFace.add(new OrientedMeshFace(v3,v4,v1,new HashSet<BlockFace>(Arrays.asList(BlockFace.WEST))));
}","public CubeMesh(Vector2[][] uvs){
  super(new ArrayList<OrientedMeshFace>(12));
  Vector3 vertex0=new Vector3(0,0,0);
  Vector3 vertex1=new Vector3(0,1,0);
  Vector3 vertex2=new Vector3(1,1,0);
  Vector3 vertex3=new Vector3(1,0,0);
  Vector3 vertex4=new Vector3(0,0,1);
  Vector3 vertex5=new Vector3(0,1,1);
  Vector3 vertex6=new Vector3(1,1,1);
  Vector3 vertex7=new Vector3(1,0,1);
  Vertex v1=null, v2=null, v3=null, v4=null;
  v1=new Vertex(vertex1,BlockFace.TOP.getOffset(),getUV(uvs,0,3));
  v2=new Vertex(vertex2,BlockFace.TOP.getOffset(),getUV(uvs,0,2));
  v3=new Vertex(vertex6,BlockFace.TOP.getOffset(),getUV(uvs,0,1));
  v4=new Vertex(vertex5,BlockFace.TOP.getOffset(),getUV(uvs,0,0));
  meshFace.add(new OrientedMeshFace(v1,v2,v3,new HashSet<BlockFace>(Arrays.asList(BlockFace.TOP))));
  meshFace.add(new OrientedMeshFace(v3,v4,v1,new HashSet<BlockFace>(Arrays.asList(BlockFace.TOP))));
  v1=new Vertex(vertex0,BlockFace.BOTTOM.getOffset(),getUV(uvs,1,3));
  v2=new Vertex(vertex4,BlockFace.BOTTOM.getOffset(),getUV(uvs,1,2));
  v3=new Vertex(vertex7,BlockFace.BOTTOM.getOffset(),getUV(uvs,1,1));
  v4=new Vertex(vertex3,BlockFace.BOTTOM.getOffset(),getUV(uvs,1,3));
  meshFace.add(new OrientedMeshFace(v1,v2,v3,new HashSet<BlockFace>(Arrays.asList(BlockFace.BOTTOM))));
  meshFace.add(new OrientedMeshFace(v3,v4,v1,new HashSet<BlockFace>(Arrays.asList(BlockFace.BOTTOM))));
  v1=new Vertex(vertex0,BlockFace.NORTH.getOffset(),getUV(uvs,2,2));
  v2=new Vertex(vertex1,BlockFace.NORTH.getOffset(),getUV(uvs,2,1));
  v3=new Vertex(vertex5,BlockFace.NORTH.getOffset(),getUV(uvs,2,0));
  v4=new Vertex(vertex4,BlockFace.NORTH.getOffset(),getUV(uvs,2,3));
  meshFace.add(new OrientedMeshFace(v1,v2,v3,new HashSet<BlockFace>(Arrays.asList(BlockFace.NORTH))));
  meshFace.add(new OrientedMeshFace(v3,v4,v1,new HashSet<BlockFace>(Arrays.asList(BlockFace.NORTH))));
  v1=new Vertex(vertex7,BlockFace.SOUTH.getOffset(),getUV(uvs,3,1));
  v2=new Vertex(vertex6,BlockFace.SOUTH.getOffset(),getUV(uvs,3,0));
  v3=new Vertex(vertex2,BlockFace.SOUTH.getOffset(),getUV(uvs,3,3));
  v4=new Vertex(vertex3,BlockFace.SOUTH.getOffset(),getUV(uvs,3,2));
  meshFace.add(new OrientedMeshFace(v1,v2,v3,new HashSet<BlockFace>(Arrays.asList(BlockFace.SOUTH))));
  meshFace.add(new OrientedMeshFace(v3,v4,v1,new HashSet<BlockFace>(Arrays.asList(BlockFace.SOUTH))));
  v1=new Vertex(vertex0,BlockFace.EAST.getOffset(),getUV(uvs,4,2));
  v2=new Vertex(vertex3,BlockFace.EAST.getOffset(),getUV(uvs,4,1));
  v3=new Vertex(vertex2,BlockFace.EAST.getOffset(),getUV(uvs,4,0));
  v4=new Vertex(vertex1,BlockFace.EAST.getOffset(),getUV(uvs,4,3));
  meshFace.add(new OrientedMeshFace(v1,v2,v3,new HashSet<BlockFace>(Arrays.asList(BlockFace.EAST))));
  meshFace.add(new OrientedMeshFace(v3,v4,v1,new HashSet<BlockFace>(Arrays.asList(BlockFace.EAST))));
  v1=new Vertex(vertex5,BlockFace.WEST.getOffset(),getUV(uvs,5,0));
  v2=new Vertex(vertex6,BlockFace.WEST.getOffset(),getUV(uvs,5,3));
  v3=new Vertex(vertex7,BlockFace.WEST.getOffset(),getUV(uvs,5,2));
  v4=new Vertex(vertex4,BlockFace.WEST.getOffset(),getUV(uvs,5,1));
  meshFace.add(new OrientedMeshFace(v1,v2,v3,new HashSet<BlockFace>(Arrays.asList(BlockFace.WEST))));
  meshFace.add(new OrientedMeshFace(v3,v4,v1,new HashSet<BlockFace>(Arrays.asList(BlockFace.WEST))));
}",0.9582366589327146
177309,"public int schedule(SpoutTask task){
synchronized (scheduleLock) {
    addTask(task);
    if (task.getDelay() == 0 && task.getPeriod() < 0) {
      SpoutWorker worker=new SpoutWorker(task,this);
      addWorker(worker,task);
      worker.start();
    }
 else {
      taskQueue.add(task);
    }
    return task.getTaskId();
  }
}","public int schedule(SpoutTask task){
synchronized (scheduleLock) {
    addTask(task);
    if (!task.isSync()) {
      SpoutWorker worker=new SpoutWorker(task,this);
      addWorker(worker,task);
      worker.start();
    }
 else {
      taskQueue.add(task);
    }
    return task.getTaskId();
  }
}",0.3738019169329074
177310,"/** 
 * Remove all batch at the specified position
 * @param x
 * @param y
 * @param z
 */
private void cleanBatchAggregator(Vector3 position,ChunkMesh chunkMesh){
  Map<RenderMaterial,Map<BlockFace,ChunkMeshBatchAggregator>> aggregatorPerMaterial=chunkRenderersByPosition.get(position.getFloorX(),position.getFloorY(),position.getFloorZ());
  if (aggregatorPerMaterial != null) {
    LinkedList<RenderMaterial> materialToRemove=new LinkedList<RenderMaterial>();
    for (    Entry<RenderMaterial,Map<BlockFace,ChunkMeshBatchAggregator>> entry : aggregatorPerMaterial.entrySet()) {
      RenderMaterial material=entry.getKey();
      LinkedList<BlockFace> faceToRemove=new LinkedList<BlockFace>();
      List<ChunkMeshBatchAggregator> chunkRenderer=chunkRenderers.get(material);
      for (      Entry<BlockFace,ChunkMeshBatchAggregator> entry2 : entry.getValue().entrySet()) {
        BlockFace face=entry2.getKey();
        ChunkMeshBatchAggregator batch=entry2.getValue();
        batch.setSubBatch(chunkMesh.getSubX(),chunkMesh.getSubY(),chunkMesh.getSubZ(),null);
        if (batch.isEmpty()) {
          batch.finalize();
          dirties.remove(batch);
          chunkRenderer.remove(batch);
          faceToRemove.add(face);
        }
      }
      for (      BlockFace face : faceToRemove)       entry.getValue().remove(face);
      if (entry.getValue().isEmpty())       materialToRemove.add(material);
      if (chunkRenderer.isEmpty())       chunkRenderers.remove(material);
    }
    for (    RenderMaterial material : materialToRemove)     aggregatorPerMaterial.remove(material);
    if (aggregatorPerMaterial.isEmpty())     chunkRenderersByPosition.remove(position.getFloorX(),position.getFloorY(),position.getFloorZ());
  }
}","/** 
 * Remove all batch at the specified position
 * @param x
 * @param y
 * @param z
 */
private void cleanBatchAggregator(Vector3 position,ChunkMesh chunkMesh){
  Map<RenderMaterial,Map<BlockFace,ChunkMeshBatchAggregator>> aggregatorPerMaterial=chunkRenderersByPosition.get(position.getFloorX(),position.getFloorY(),position.getFloorZ());
  if (aggregatorPerMaterial != null) {
    LinkedList<RenderMaterial> materialToRemove=new LinkedList<RenderMaterial>();
    for (    Entry<RenderMaterial,Map<BlockFace,ChunkMeshBatchAggregator>> entry : aggregatorPerMaterial.entrySet()) {
      RenderMaterial material=entry.getKey();
      LinkedList<BlockFace> faceToRemove=new LinkedList<BlockFace>();
      List<ChunkMeshBatchAggregator> chunkRenderer=chunkRenderers.get(material);
      for (      Entry<BlockFace,ChunkMeshBatchAggregator> entry2 : entry.getValue().entrySet()) {
        BlockFace face=entry2.getKey();
        ChunkMeshBatchAggregator batch=entry2.getValue();
        batch.setSubBatch(chunkMesh.getSubX(),chunkMesh.getSubY(),chunkMesh.getSubZ(),null);
        if (ChunkMesh.UNLOAD_ACCELERATOR || batch.isEmpty()) {
          batch.finalize();
          dirties.remove(batch);
          chunkRenderer.remove(batch);
          faceToRemove.add(face);
        }
      }
      for (      BlockFace face : faceToRemove)       entry.getValue().remove(face);
      if (entry.getValue().isEmpty())       materialToRemove.add(material);
      if (chunkRenderer.isEmpty())       chunkRenderers.remove(material);
    }
    for (    RenderMaterial material : materialToRemove)     aggregatorPerMaterial.remove(material);
    if (aggregatorPerMaterial.isEmpty())     chunkRenderersByPosition.remove(position.getFloorX(),position.getFloorY(),position.getFloorZ());
  }
}",0.9908935685828116
177311,"private SpoutChunk setChunk(SpoutChunk newChunk,int x,int y,int z,ChunkDataForRegion dataForRegion,boolean generated,LoadOption loadopt){
  final AtomicReference<SpoutChunk> chunkReference=chunks[x][y][z];
  while (true) {
    if (chunkReference.compareAndSet(null,newChunk)) {
      newChunk.notifyColumn();
      if (Spout.getEngine().getPlatform() == Platform.CLIENT) {
        newChunk.setNeighbourRenderDirty(true);
      }
      numberActiveChunks.incrementAndGet();
      if (dataForRegion != null) {
        for (        SpoutEntity entity : dataForRegion.loadedEntities) {
          entity.setupInitialChunk(entity.getTransform().getTransform());
          entityManager.addEntity(entity);
        }
        dynamicBlockTree.addDynamicBlockUpdates(dataForRegion.loadedUpdates);
      }
      Spout.getEventManager().callDelayedEvent(new ChunkLoadEvent(newChunk,generated));
      return newChunk;
    }
    newChunk.setUnloadedUnchecked();
    SpoutChunk oldChunk=chunkReference.get();
    if (oldChunk != null) {
      checkChunkLoaded(oldChunk,loadopt);
      return oldChunk;
    }
  }
}","private SpoutChunk setChunk(SpoutChunk newChunk,int x,int y,int z,ChunkDataForRegion dataForRegion,boolean generated,LoadOption loadopt){
  final AtomicReference<SpoutChunk> chunkReference=chunks[x][y][z];
  while (true) {
    if (chunkReference.compareAndSet(null,newChunk)) {
      newChunk.notifyColumn();
      if (Spout.getEngine().getPlatform() == Platform.CLIENT) {
        newChunk.setNeighbourRenderDirty(true);
      }
      numberActiveChunks.incrementAndGet();
      if (dataForRegion != null) {
        for (        SpoutEntity entity : dataForRegion.loadedEntities) {
          entity.setupInitialChunk(entity.getTransform().getTransform());
          entityManager.addEntity(entity);
        }
        dynamicBlockTree.addDynamicBlockUpdates(dataForRegion.loadedUpdates);
      }
      Spout.getEventManager().callDelayedEvent(new ChunkLoadEvent(newChunk,generated));
      return newChunk;
    }
    SpoutChunk oldChunk=chunkReference.get();
    if (oldChunk != null) {
      newChunk.setUnloadedUnchecked();
      checkChunkLoaded(oldChunk,loadopt);
      return oldChunk;
    }
  }
}",0.9654545454545456
177312,"public void setNeighbourRenderDirty(boolean dirty){
  SpoutRegion parent=getRegion();
  for (int x=-1; x < 2; x++) {
    for (int y=-1; y < 2; y++) {
      for (int z=-1; z < 2; z++) {
        SpoutChunk c=parent.getLocalChunk(this,x,y,z,LoadOption.NO_LOAD);
        if (c != null) {
          c.setRenderDirty(dirty);
        }
      }
    }
  }
}","public void setNeighbourRenderDirty(boolean dirty){
  SpoutRegion parent=getRegion();
  for (int x=-1; x < 2; x++) {
    for (int y=-1; y < 2; y++) {
      for (int z=-1; z < 2; z++) {
        if (x == 0 || y == 0 || z == 0) {
          SpoutChunk c=parent.getLocalChunk(this,x,y,z,LoadOption.NO_LOAD);
          if (c != null) {
            c.setRenderDirty(dirty);
          }
        }
      }
    }
  }
}",0.8650793650793651
177313,"public void setRenderDirty(boolean dirty){
  renderDirty.set(dirty);
}","public void setRenderDirty(boolean dirty){
  renderDirty.set(dirty);
  if (dirty) {
    queueDirty();
  }
}",0.7909604519774012
177314,"public void preSnapshotRun(){
  entityManager.preSnapshotRun();
  SpoutWorld world=this.getWorld();
  boolean worldRenderQueueEnabled=world.isRenderQueueEnabled();
  boolean firstRenderQueueTick=(!renderQueueEnabled) && worldRenderQueueEnabled;
  renderQueueEnabled=worldRenderQueueEnabled;
  if (firstRenderQueueTick) {
    for (int dx=0; dx < CHUNKS.SIZE; dx++) {
      for (int dy=0; dy < CHUNKS.SIZE; dy++) {
        for (int dz=0; dz < CHUNKS.SIZE; dz++) {
          SpoutChunk chunk=chunks[dx][dy][dz].get();
          if (chunk != null) {
            addUpdateToRenderQueue(chunk);
          }
        }
      }
    }
  }
  SpoutChunk spoutChunk;
  while ((spoutChunk=dirtyChunks.poll()) != null) {
    spoutChunk.setNotDirtyQueued();
    if (!spoutChunk.isLoaded()) {
      continue;
    }
    if ((!firstRenderQueueTick) && renderQueueEnabled && spoutChunk.isRenderDirty()) {
      spoutChunk.setRenderDirty(false);
      addUpdateToRenderQueue(spoutChunk);
    }
    if (spoutChunk.isPopulated() && spoutChunk.isDirty()) {
      for (      Player entity : spoutChunk.getObservingPlayers()) {
        syncChunkToPlayer(spoutChunk,entity);
      }
      processChunkUpdatedEvent(spoutChunk);
      spoutChunk.resetDirtyArrays();
      spoutChunk.setLightDirty(false);
    }
  }
  SpoutChunkSnapshotFuture snapshotFuture;
  while ((snapshotFuture=snapshotQueue.poll()) != null) {
    snapshotFuture.run();
  }
  renderSnapshotCache.clear();
  for (int dx=0; dx < CHUNKS.SIZE; dx++) {
    for (int dy=0; dy < CHUNKS.SIZE; dy++) {
      for (int dz=0; dz < CHUNKS.SIZE; dz++) {
        SpoutChunk chunk=chunks[dx][dy][dz].get();
        if (chunk != null) {
          chunk.updateExpiredObservers();
        }
      }
    }
  }
  entityManager.syncEntities();
}","public void preSnapshotRun(){
  entityManager.preSnapshotRun();
  SpoutWorld world=this.getWorld();
  boolean worldRenderQueueEnabled=world.isRenderQueueEnabled();
  boolean firstRenderQueueTick=(!renderQueueEnabled) && worldRenderQueueEnabled;
  renderQueueEnabled=worldRenderQueueEnabled;
  if (firstRenderQueueTick) {
    for (int dx=0; dx < CHUNKS.SIZE; dx++) {
      for (int dy=0; dy < CHUNKS.SIZE; dy++) {
        for (int dz=0; dz < CHUNKS.SIZE; dz++) {
          SpoutChunk chunk=chunks[dx][dy][dz].get();
          if (chunk != null) {
            addUpdateToRenderQueue(chunk);
          }
        }
      }
    }
  }
  SpoutChunk spoutChunk;
  while ((spoutChunk=dirtyChunks.poll()) != null) {
    spoutChunk.setNotDirtyQueued();
    if (!spoutChunk.isLoaded()) {
      continue;
    }
    if ((!firstRenderQueueTick) && renderQueueEnabled && spoutChunk.isRenderDirty()) {
      addUpdateToRenderQueue(spoutChunk);
    }
    if (spoutChunk.isPopulated() && spoutChunk.isDirty()) {
      for (      Player entity : spoutChunk.getObservingPlayers()) {
        syncChunkToPlayer(spoutChunk,entity);
      }
      processChunkUpdatedEvent(spoutChunk);
      spoutChunk.resetDirtyArrays();
      spoutChunk.setLightDirty(false);
    }
  }
  SpoutChunkSnapshotFuture snapshotFuture;
  while ((snapshotFuture=snapshotQueue.poll()) != null) {
    snapshotFuture.run();
  }
  renderSnapshotCache.clear();
  for (int dx=0; dx < CHUNKS.SIZE; dx++) {
    for (int dy=0; dy < CHUNKS.SIZE; dy++) {
      for (int dz=0; dz < CHUNKS.SIZE; dz++) {
        SpoutChunk chunk=chunks[dx][dy][dz].get();
        if (chunk != null) {
          chunk.updateExpiredObservers();
        }
      }
    }
  }
  entityManager.syncEntities();
}",0.9885452462772052
177315,"private void addUpdateToRenderQueue(SpoutChunk c){
  int bx=c.getX() - 1;
  int by=c.getY() - 1;
  int bz=c.getZ() - 1;
  if (c.isInViewDistance()) {
    ChunkSnapshot[][][] chunks=new ChunkSnapshot[3][3][3];
    for (int x=0; x < 3; x++) {
      for (int y=0; y < 3; y++) {
        for (int z=0; z < 3; z++) {
          if (x == 1 || y == 1 || z == 1) {
            ChunkSnapshot snapshot=getRenderSnapshot(bx + x,by + y,bz + z);
            if (snapshot == null) {
              return;
            }
            chunks[x][y][z]=snapshot;
          }
        }
      }
    }
    renderChunkQueue.add(new SpoutChunkSnapshotModel(bx + 1,by + 1,bz + 1,chunks));
  }
 else {
    if (c.leftViewDistance()) {
      renderChunkQueue.add(new SpoutChunkSnapshotModel(bx + 1,by + 1,bz + 1,true));
    }
  }
  c.viewDistanceCopy();
}","private void addUpdateToRenderQueue(SpoutChunk c){
  int bx=c.getX() - 1;
  int by=c.getY() - 1;
  int bz=c.getZ() - 1;
  if (c.isInViewDistance()) {
    ChunkSnapshot[][][] chunks=new ChunkSnapshot[3][3][3];
    for (int x=0; x < 3; x++) {
      for (int y=0; y < 3; y++) {
        for (int z=0; z < 3; z++) {
          if (x == 1 || y == 1 || z == 1) {
            ChunkSnapshot snapshot=getRenderSnapshot(bx + x,by + y,bz + z);
            if (snapshot == null) {
              return;
            }
            chunks[x][y][z]=snapshot;
          }
        }
      }
    }
    c.setRenderDirty(false);
    renderChunkQueue.add(new SpoutChunkSnapshotModel(bx + 1,by + 1,bz + 1,chunks));
  }
 else {
    if (c.leftViewDistance()) {
      c.setRenderDirty(false);
      renderChunkQueue.add(new SpoutChunkSnapshotModel(bx + 1,by + 1,bz + 1,true));
    }
  }
  c.viewDistanceCopy();
}",0.9648711943793912
177316,"private SpoutChunk setChunk(SpoutChunk newChunk,int x,int y,int z,ChunkDataForRegion dataForRegion,boolean generated,LoadOption loadopt){
  final AtomicReference<SpoutChunk> chunkReference=chunks[x][y][z];
  while (true) {
    if (chunkReference.compareAndSet(null,newChunk)) {
      newChunk.notifyColumn();
      newChunk.setNeighbourRenderDirty(true);
      numberActiveChunks.incrementAndGet();
      if (dataForRegion != null) {
        for (        SpoutEntity entity : dataForRegion.loadedEntities) {
          entity.setupInitialChunk(entity.getTransform().getTransform());
          entityManager.addEntity(entity);
        }
        dynamicBlockTree.addDynamicBlockUpdates(dataForRegion.loadedUpdates);
      }
      Spout.getEventManager().callDelayedEvent(new ChunkLoadEvent(newChunk,generated));
      return newChunk;
    }
    newChunk.setUnloadedUnchecked();
    SpoutChunk oldChunk=chunkReference.get();
    if (oldChunk != null) {
      checkChunkLoaded(oldChunk,loadopt);
      return oldChunk;
    }
  }
}","private SpoutChunk setChunk(SpoutChunk newChunk,int x,int y,int z,ChunkDataForRegion dataForRegion,boolean generated,LoadOption loadopt){
  final AtomicReference<SpoutChunk> chunkReference=chunks[x][y][z];
  while (true) {
    if (chunkReference.compareAndSet(null,newChunk)) {
      newChunk.notifyColumn();
      if (Spout.getEngine().getPlatform() == Platform.CLIENT) {
        newChunk.setNeighbourRenderDirty(true);
      }
      numberActiveChunks.incrementAndGet();
      if (dataForRegion != null) {
        for (        SpoutEntity entity : dataForRegion.loadedEntities) {
          entity.setupInitialChunk(entity.getTransform().getTransform());
          entityManager.addEntity(entity);
        }
        dynamicBlockTree.addDynamicBlockUpdates(dataForRegion.loadedUpdates);
      }
      Spout.getEventManager().callDelayedEvent(new ChunkLoadEvent(newChunk,generated));
      return newChunk;
    }
    newChunk.setUnloadedUnchecked();
    SpoutChunk oldChunk=chunkReference.get();
    if (oldChunk != null) {
      checkChunkLoaded(oldChunk,loadopt);
      return oldChunk;
    }
  }
}",0.9651600753295668
177317,"public static void saveChunk(SpoutChunk chunk){
  ChunkSaveTask task=new ChunkSaveTask(chunk);
  if (instance.isInterrupted()) {
    Spout.getLogger().warning(""String_Node_Str"");
    task.call();
  }
 else {
    instance.queue.add(task);
  }
}","public static void saveChunk(SpoutChunk chunk){
  ChunkSaveTask task=new ChunkSaveTask(chunk);
  if (instance.isInterrupted() || !instance.isAlive()) {
    Spout.getLogger().warning(""String_Node_Str"");
    task.call();
  }
 else {
    instance.queue.add(task);
  }
}",0.9548133595284872
177318,"@Override public void run(){
  while (!this.isInterrupted()) {
    Callable<SpoutWorld> task;
    try {
      task=queue.take();
      task.call();
    }
 catch (    InterruptedException ignore) {
      break;
    }
catch (    Exception e) {
      e.printStackTrace();
    }
  }
  processRemaining();
}","@Override public void run(){
  while (!Thread.interrupted()) {
    Callable<SpoutWorld> task;
    try {
      task=queue.take();
      task.call();
    }
 catch (    InterruptedException ignore) {
      break;
    }
catch (    Exception e) {
      e.printStackTrace();
    }
  }
  processRemaining();
}",0.9834437086092715
177319,"@Override public synchronized Plugin loadPlugin(File paramFile,boolean ignoresoftdepends) throws InvalidPluginException, UnknownDependencyException, InvalidDescriptionFileException {
  CommonPlugin result;
  PluginDescriptionFile desc;
  CommonClassLoader loader;
  desc=getDescription(paramFile);
  File dataFolder=new File(paramFile.getParentFile(),desc.getName());
  processDependencies(desc);
  if (!ignoresoftdepends) {
    processSoftDependencies(desc);
  }
  try {
    if (engine.getPlatform() == Platform.CLIENT) {
      loader=new ClientClassLoader(this,this.getClass().getClassLoader());
    }
 else {
      loader=new CommonClassLoader(this,this.getClass().getClassLoader());
    }
    loader.addURL(paramFile.toURI().toURL());
    Class<?> main=Class.forName(desc.getMain(),true,loader);
    Class<? extends CommonPlugin> plugin=main.asSubclass(CommonPlugin.class);
    boolean locked=manager.lock(key);
    Constructor<? extends CommonPlugin> constructor=plugin.getConstructor();
    result=constructor.newInstance();
    result.initialize(this,engine,desc,dataFolder,paramFile,loader);
    if (!locked) {
      manager.unlock(key);
    }
  }
 catch (  Exception e) {
    throw new InvalidPluginException(e);
  }
catch (  UnsupportedClassVersionError e) {
    String version=e.getMessage().replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")[0];
    Spout.getLogger().severe(""String_Node_Str"" + desc.getName() + ""String_Node_Str"");
    Spout.getLogger().severe(""String_Node_Str"" + desc.getName() + ""String_Node_Str""+ version+ ""String_Node_Str"");
  }
  loader.setPlugin(result);
  loaders.put(desc.getName(),loader);
  return result;
}","@Override public synchronized Plugin loadPlugin(File paramFile,boolean ignoresoftdepends) throws InvalidPluginException, UnknownDependencyException, InvalidDescriptionFileException {
  CommonPlugin result;
  PluginDescriptionFile desc;
  CommonClassLoader loader;
  desc=getDescription(paramFile);
  File dataFolder=new File(paramFile.getParentFile(),desc.getName());
  processDependencies(desc);
  if (!ignoresoftdepends) {
    processSoftDependencies(desc);
  }
  try {
    if (engine.getPlatform() == Platform.CLIENT) {
      loader=new ClientClassLoader(this,this.getClass().getClassLoader());
    }
 else {
      loader=new CommonClassLoader(this,this.getClass().getClassLoader());
    }
    loader.addURL(paramFile.toURI().toURL());
    Class<?> main=Class.forName(desc.getMain(),true,loader);
    Class<? extends CommonPlugin> plugin=main.asSubclass(CommonPlugin.class);
    boolean locked=manager.lock(key);
    Constructor<? extends CommonPlugin> constructor=plugin.getConstructor();
    result=constructor.newInstance();
    result.initialize(this,engine,desc,dataFolder,paramFile,loader);
    if (!locked) {
      manager.unlock(key);
    }
  }
 catch (  Exception e) {
    throw new InvalidPluginException(e);
  }
catch (  UnsupportedClassVersionError e) {
    String version=e.getMessage().replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")[0];
    Spout.getLogger().severe(""String_Node_Str"" + desc.getName() + ""String_Node_Str"");
    Spout.getLogger().severe(""String_Node_Str"" + desc.getName() + ""String_Node_Str""+ version+ ""String_Node_Str"");
    throw new InvalidPluginException(e);
  }
  loader.setPlugin(result);
  loaders.put(desc.getName(),loader);
  return result;
}",0.9878734102336588
177320,"public AtomicPaletteBlockStore(int shift,int dirtySize,short[] blocks,short[] data){
  this.side=1 << shift;
  this.shift=shift;
  this.doubleShift=shift << 1;
  int size=side * side * side;
  store=new AtomicShortIntArray(size);
  this.length=size;
  dirtyX=new byte[dirtySize];
  dirtyY=new byte[dirtySize];
  dirtyZ=new byte[dirtySize];
  if (blocks != null && data != null) {
    int x=0;
    int z=0;
    int y=0;
    int max=(1 << shift) - 1;
    for (int i=0; i < Math.min(blocks.length,size); i++) {
      this.setBlock(x,y,z,blocks[i],data[i]);
      if (x < max) {
        x++;
      }
 else {
        x=0;
        if (z < max) {
          z++;
        }
 else {
          z=0;
          if (y < max) {
            y++;
          }
 else {
            y=0;
          }
        }
      }
    }
  }
}","public AtomicPaletteBlockStore(int shift,int dirtySize,short[] blocks,short[] data){
  this.side=1 << shift;
  this.shift=shift;
  this.doubleShift=shift << 1;
  int size=side * side * side;
  store=new AtomicShortIntArray(size);
  this.length=size;
  dirtyX=new byte[dirtySize];
  dirtyY=new byte[dirtySize];
  dirtyZ=new byte[dirtySize];
  if (blocks != null) {
    int x=0;
    int z=0;
    int y=0;
    int max=(1 << shift) - 1;
    for (int i=0; i < Math.min(blocks.length,size); i++) {
      short d=data == null ? 0 : data[i];
      this.setBlock(x,y,z,blocks[i],d);
      if (x < max) {
        x++;
      }
 else {
        x=0;
        if (z < max) {
          z++;
        }
 else {
          z=0;
          if (y < max) {
            y++;
          }
 else {
            y=0;
          }
        }
      }
    }
  }
}",0.960880195599022
177321,"public void doInput(){
  if (activePlayer == null) {
    return;
  }
  if (Mouse.isGrabbed()) {
    Transform ts=activePlayer.getTransform().getTransform();
    float pitch=ts.getRotation().getPitch();
    float yaw=ts.getRotation().getYaw();
    float mouseDX=-Mouse.getDX() * 0.16f;
    float mouseDY=Mouse.getDY() * 0.16f;
    if (yaw + mouseDX >= 360)     yaw+=mouseDX - 360;
 else     if (yaw + mouseDX < 0)     yaw+=mouseDX + 360;
 else     yaw+=mouseDX;
    if (pitch + mouseDY >= -80 && pitch + mouseDY <= 80)     pitch+=mouseDY;
 else     if (pitch + mouseDY < -80)     pitch=-80;
 else     if (pitch + mouseDY > 80)     pitch=80;
    ts.setRotation(MathHelper.rotation(pitch,yaw,ts.getRotation().getRoll()));
    activePlayer.getTransform().setTransform(ts);
  }
  boolean keyUp=Keyboard.isKeyDown(Keyboard.KEY_UP) || Keyboard.isKeyDown(Keyboard.KEY_W);
  boolean keyDown=Keyboard.isKeyDown(Keyboard.KEY_DOWN) || Keyboard.isKeyDown(Keyboard.KEY_S);
  boolean keyLeft=Keyboard.isKeyDown(Keyboard.KEY_LEFT) || Keyboard.isKeyDown(Keyboard.KEY_A);
  boolean keyRight=Keyboard.isKeyDown(Keyboard.KEY_RIGHT) || Keyboard.isKeyDown(Keyboard.KEY_D);
  boolean flyUp=Keyboard.isKeyDown(Keyboard.KEY_SPACE);
  boolean flyDown=Keyboard.isKeyDown(Keyboard.KEY_LSHIFT);
  Point point=new Point(Point.ONE,activePlayer.getWorld());
  if (keyUp) {
    point=point.multiply(activePlayer.getTransform().getTransform().forwardVector());
  }
  if (keyDown) {
    point=point.multiply(activePlayer.getTransform().getTransform().forwardVector().multiply(-1));
  }
  if (keyLeft) {
    point=point.multiply(activePlayer.getTransform().getTransform().rightVector());
  }
  if (keyRight) {
    point=point.multiply(activePlayer.getTransform().getTransform().rightVector().multiply(-1));
  }
  if (flyUp) {
    point=point.multiply(activePlayer.getTransform().getTransform().upVector());
  }
  if (flyDown) {
    point=point.multiply(activePlayer.getTransform().getTransform().upVector().multiply(-1));
  }
  if (keyUp || keyDown || keyLeft|| keyRight|| flyUp|| flyDown) {
    System.out.println(""String_Node_Str"" + point.getX() + ""String_Node_Str""+ point.getY()+ ""String_Node_Str""+ point.getZ());
    System.out.println(""String_Node_Str"" + activePlayer.getTransform().getPosition().getX() + ""String_Node_Str""+ activePlayer.getTransform().getPosition().getY()+ ""String_Node_Str""+ activePlayer.getTransform().getPosition().getZ());
    activePlayer.getTransform().setPosition(activePlayer.getTransform().getPosition().add(point));
  }
}","public void doInput(){
  if (activePlayer == null) {
    return;
  }
  Transform ts=activePlayer.getTransform().getTransform();
  if (Mouse.isGrabbed()) {
    float pitch=ts.getRotation().getPitch();
    float yaw=ts.getRotation().getYaw();
    float mouseDX=Mouse.getDX() * 0.16f;
    float mouseDY=-Mouse.getDY() * 0.16f;
    if (yaw + mouseDX >= 360)     yaw+=mouseDX - 360;
 else     if (yaw + mouseDX < 0)     yaw+=mouseDX + 360;
 else     yaw+=mouseDX;
    if (pitch + mouseDY >= -80 && pitch + mouseDY <= 80)     pitch+=mouseDY;
 else     if (pitch + mouseDY < -80)     pitch=-80;
 else     if (pitch + mouseDY > 80)     pitch=80;
    ts.setRotation(MathHelper.rotation(pitch,yaw,ts.getRotation().getRoll()));
  }
  if (!Keyboard.isCreated())   return;
  boolean keyUp=Keyboard.isKeyDown(Keyboard.KEY_UP) || Keyboard.isKeyDown(Keyboard.getKeyIndex(SpoutInputConfiguration.FORWARD.getString()));
  boolean keyDown=Keyboard.isKeyDown(Keyboard.KEY_DOWN) || Keyboard.isKeyDown(Keyboard.getKeyIndex(SpoutInputConfiguration.BACKWARD.getString()));
  boolean keyLeft=Keyboard.isKeyDown(Keyboard.KEY_LEFT) || Keyboard.isKeyDown(Keyboard.getKeyIndex(SpoutInputConfiguration.LEFT.getString()));
  boolean keyRight=Keyboard.isKeyDown(Keyboard.KEY_RIGHT) || Keyboard.isKeyDown(Keyboard.getKeyIndex(SpoutInputConfiguration.RIGHT.getString()));
  boolean flyUp=Keyboard.isKeyDown(Keyboard.getKeyIndex(SpoutInputConfiguration.UP.getString()));
  boolean flyDown=Keyboard.isKeyDown(Keyboard.getKeyIndex(SpoutInputConfiguration.DOWN.getString()));
  Point point=ts.getPosition();
  if (keyUp) {
    point=point.subtract(ts.forwardVector());
  }
  if (keyDown) {
    point=point.add(ts.forwardVector());
  }
  if (keyLeft) {
    point=point.subtract(ts.rightVector());
  }
  if (keyRight) {
    point=point.add(ts.rightVector());
  }
  if (flyUp) {
    point=point.add(ts.upVector());
  }
  if (flyDown) {
    point=point.subtract(ts.upVector());
  }
  ts.setPosition(point);
  activePlayer.getTransform().setTransform(ts);
}",0.4161518093556928
177322,"public void init(SpoutApplication args){
  this.arguments=args;
  try {
    config.load();
  }
 catch (  ConfigurationException e) {
    log(""String_Node_Str"",Level.SEVERE,e.getMessage(),e);
  }
  console=new MultiConsole(new FileConsole(this),new JLineConsole(this));
  consoleManager.setupConsole(console);
  registerWithScheduler(scheduler);
  if (!getExecutor().startExecutor()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  DefaultPermissions.addDefaultPermission(STANDARD_BROADCAST_PERMISSION);
  if (debugMode()) {
    new TicklockMonitor().start();
    new DeadlockMonitor().start();
  }
}","public void init(SpoutApplication args){
  this.arguments=args;
  try {
    config.load();
    inputConfig.load();
  }
 catch (  ConfigurationException e) {
    log(""String_Node_Str"",Level.SEVERE,e.getMessage(),e);
  }
  console=new MultiConsole(new FileConsole(this),new JLineConsole(this));
  consoleManager.setupConsole(console);
  registerWithScheduler(scheduler);
  if (!getExecutor().startExecutor()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  DefaultPermissions.addDefaultPermission(STANDARD_BROADCAST_PERMISSION);
  if (debugMode()) {
    new TicklockMonitor().start();
    new DeadlockMonitor().start();
  }
}",0.9808612440191388
177323,"/** 
 * Updates the list of chunks around the player.
 * @param force Forces the update
 * @return True if the list was changed
 */
public boolean updateNearbyChunkMeshes(boolean force){
  if (world == null) {
    world=client.getDefaultWorld();
    if (world != null)     System.out.println(""String_Node_Str"" + world.getName() + ""String_Node_Str""+ world.getUID());
 else     System.out.println(""String_Node_Str"");
  }
  if (world == null) {
    try {
      Thread.sleep(5);
    }
 catch (    InterruptedException e) {
    }
    return false;
  }
  int chunkViewDistance=client.getActivePlayer().getViewDistance() / 16;
  Point currentPos=client.getActivePlayer().getTransform().getPosition();
  int currentChunkX=currentPos.getChunkX();
  int currentChunkY=currentPos.getChunkY();
  int currentChunkZ=currentPos.getChunkZ();
  if (currentChunkX == lastChunkX && currentChunkY == lastChunkY && currentChunkZ == lastChunkZ && !force && !firstUpdate) {
    return false;
  }
  if (chunkRenderers.size() == 0 || force) {
    chunkRenderers.clear();
    int cubeMinX=currentChunkX - chunkViewDistance;
    int cubeMinY=currentChunkY - chunkViewDistance;
    int cubeMinZ=currentChunkZ - chunkViewDistance;
    int cubeMaxX=currentChunkX + chunkViewDistance;
    int cubeMaxY=currentChunkY + chunkViewDistance;
    int cubeMaxZ=currentChunkZ + chunkViewDistance;
    Vector3 batchMin=ChunkMeshBatch.getBatchCoordinates(new Vector3(cubeMinX,cubeMinY,cubeMinZ));
    Vector3 batchMax=ChunkMeshBatch.getBatchCoordinates(new Vector3(cubeMaxX,cubeMaxY,cubeMaxZ));
    for (int x=batchMin.getFloorX(); x <= batchMax.getFloorX(); x++) {
      for (int y=batchMin.getFloorY(); y <= batchMax.getFloorY(); y++) {
        for (int z=batchMin.getFloorZ(); z <= batchMax.getFloorZ(); z++) {
          Vector3 chunkCoords=ChunkMeshBatch.getChunkCoordinates(new Vector3(x,y,z));
          ChunkMeshBatch batch=new ChunkMeshBatch(world,chunkCoords.getFloorX(),chunkCoords.getFloorY(),chunkCoords.getFloorZ());
          addChunkMeshBatch(batch);
          batch.update();
          System.out.println(batch);
        }
      }
    }
  }
 else {
    Cube oldView=new Cube(new Point(world,lastChunkX - chunkViewDistance,lastChunkY - chunkViewDistance,lastChunkZ - chunkViewDistance),chunkViewDistance * 2);
    Cube newView=new Cube(new Point(world,currentChunkX - chunkViewDistance,currentChunkY - chunkViewDistance,currentChunkZ - chunkViewDistance),chunkViewDistance * 2);
    Vector3 min=oldView.getBase().min(newView.getBase());
    Vector3 max=oldView.getBase().add(oldView.getSize()).max(newView.getBase().add(newView.getSize()));
    Vector3 ignoreMin=oldView.getBase().max(newView.getBase());
    Vector3 ignoreMax=oldView.getBase().add(oldView.getSize()).min(newView.getBase().add(newView.getSize()));
    Cuboid ignore=new Cuboid(new Point(ignoreMin,world),ignoreMax.subtract(ignoreMin));
    for (int x=min.getFloorX(); x < max.getFloorX(); x++) {
      for (int y=min.getFloorY(); y < max.getFloorY(); y++) {
        for (int z=min.getFloorZ(); z < max.getFloorZ(); z++) {
          Vector3 vec=new Vector3(x,y,z);
          if (ignore.contains(vec)) {
            continue;
          }
          Vector3 pos=ChunkMeshBatch.getChunkCoordinates(vec);
          if (oldView.contains(vec)) {
            ChunkMeshBatch c=chunkRenderersByPosition.get(pos.getFloorX(),pos.getFloorY(),pos.getFloorZ());
            removeChunkMeshBatch(c);
            continue;
          }
          if (newView.contains(vec)) {
            ChunkMeshBatch c=new ChunkMeshBatch(world,pos.getFloorX(),pos.getFloorY(),pos.getFloorZ());
            addChunkMeshBatch(c);
            c.update();
          }
        }
      }
    }
  }
  firstUpdate=false;
  lastChunkX=currentChunkX;
  lastChunkY=currentChunkY;
  lastChunkZ=currentChunkZ;
  return true;
}","/** 
 * Updates the list of chunks around the player.
 * @param force Forces the update
 * @return True if the list was changed
 */
public boolean updateNearbyChunkMeshes(boolean force){
  if (world == null) {
    world=client.getDefaultWorld();
    if (world != null)     System.out.println(""String_Node_Str"" + world.getName() + ""String_Node_Str""+ world.getUID());
 else     System.out.println(""String_Node_Str"");
  }
  if (world == null) {
    try {
      Thread.sleep(5);
    }
 catch (    InterruptedException e) {
    }
    return false;
  }
  int chunkViewDistance=0;
  Point currentPos=client.getActivePlayer().getTransform().getPosition();
  int currentChunkX=currentPos.getChunkX();
  int currentChunkY=currentPos.getChunkY();
  int currentChunkZ=currentPos.getChunkZ();
  if (currentChunkX == lastChunkX && currentChunkY == lastChunkY && currentChunkZ == lastChunkZ && !force && !firstUpdate) {
    return false;
  }
  if (chunkRenderers.size() == 0 || force) {
    chunkRenderers.clear();
    int cubeMinX=currentChunkX - chunkViewDistance;
    int cubeMinY=currentChunkY - chunkViewDistance;
    int cubeMinZ=currentChunkZ - chunkViewDistance;
    int cubeMaxX=currentChunkX + chunkViewDistance;
    int cubeMaxY=currentChunkY + chunkViewDistance;
    int cubeMaxZ=currentChunkZ + chunkViewDistance;
    Vector3 batchMin=ChunkMeshBatch.getBatchCoordinates(new Vector3(cubeMinX,cubeMinY,cubeMinZ));
    Vector3 batchMax=ChunkMeshBatch.getBatchCoordinates(new Vector3(cubeMaxX,cubeMaxY,cubeMaxZ));
    for (int x=batchMin.getFloorX(); x <= batchMax.getFloorX(); x++) {
      for (int y=batchMin.getFloorY(); y <= batchMax.getFloorY(); y++) {
        for (int z=batchMin.getFloorZ(); z <= batchMax.getFloorZ(); z++) {
          Vector3 chunkCoords=ChunkMeshBatch.getChunkCoordinates(new Vector3(x,y,z));
          ChunkMeshBatch batch=new ChunkMeshBatch(world,chunkCoords.getFloorX(),chunkCoords.getFloorY(),chunkCoords.getFloorZ());
          addChunkMeshBatch(batch);
          batch.update();
          System.out.println(batch);
        }
      }
    }
  }
 else {
    Cube oldView=new Cube(new Point(world,lastChunkX - chunkViewDistance,lastChunkY - chunkViewDistance,lastChunkZ - chunkViewDistance),chunkViewDistance * 2);
    Cube newView=new Cube(new Point(world,currentChunkX - chunkViewDistance,currentChunkY - chunkViewDistance,currentChunkZ - chunkViewDistance),chunkViewDistance * 2);
    Vector3 min=oldView.getBase().min(newView.getBase());
    Vector3 max=oldView.getBase().add(oldView.getSize()).max(newView.getBase().add(newView.getSize()));
    Vector3 ignoreMin=oldView.getBase().max(newView.getBase());
    Vector3 ignoreMax=oldView.getBase().add(oldView.getSize()).min(newView.getBase().add(newView.getSize()));
    Cuboid ignore=new Cuboid(new Point(ignoreMin,world),ignoreMax.subtract(ignoreMin));
    for (int x=min.getFloorX(); x < max.getFloorX(); x++) {
      for (int y=min.getFloorY(); y < max.getFloorY(); y++) {
        for (int z=min.getFloorZ(); z < max.getFloorZ(); z++) {
          Vector3 vec=new Vector3(x,y,z);
          if (ignore.contains(vec)) {
            continue;
          }
          Vector3 pos=ChunkMeshBatch.getChunkCoordinates(vec);
          if (oldView.contains(vec)) {
            ChunkMeshBatch c=chunkRenderersByPosition.get(pos.getFloorX(),pos.getFloorY(),pos.getFloorZ());
            removeChunkMeshBatch(c);
            continue;
          }
          if (newView.contains(vec)) {
            ChunkMeshBatch c=new ChunkMeshBatch(world,pos.getFloorX(),pos.getFloorY(),pos.getFloorZ());
            addChunkMeshBatch(c);
            c.update();
          }
        }
      }
    }
  }
  firstUpdate=false;
  lastChunkX=currentChunkX;
  lastChunkY=currentChunkY;
  lastChunkZ=currentChunkZ;
  return true;
}",0.9936792204371871
177324,"public void assign(boolean compatabilityMode){
  if (!variables.containsKey(""String_Node_Str"")) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (!variables.containsKey(""String_Node_Str"")) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (compatabilityMode) {
    GL11.glMatrixMode(GL11.GL_PROJECTION);
    matrixBuffer.clear();
    matrixBuffer.put(getProjectionMatrix().toArray());
    matrixBuffer.flip();
    GL11.glLoadMatrix(matrixBuffer);
    GL11.glMatrixMode(GL11.GL_MODELVIEW);
    matrixBuffer.clear();
    matrixBuffer.put(getViewMatrix().toArray());
    matrixBuffer.flip();
    GL11.glLoadMatrix(matrixBuffer);
  }
 else {
    super.assign();
  }
}","public void assign(boolean compatabilityMode){
  if (!variables.containsKey(""String_Node_Str"")) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (!variables.containsKey(""String_Node_Str"")) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (compatabilityMode) {
    GL11.glMatrixMode(GL11.GL_PROJECTION);
    matrixBuffer.clear();
    matrixBuffer.put(getProjectionMatrix().toArray());
    matrixBuffer.flip();
    GL11.glLoadMatrix(matrixBuffer);
    GL11.glMatrixMode(GL11.GL_MODELVIEW);
    SpoutClient client=((SpoutClient)Spout.getEngine());
    Quaternion r=client.getActivePlayer().getTransform().getRotation();
    Point p=client.getActivePlayer().getTransform().getPosition();
    GL11.glLoadIdentity();
    GL11.glRotatef(r.getPitch(),1,0,0);
    GL11.glRotatef(r.getYaw(),0,1,0);
    GL11.glRotatef(r.getRoll(),0,0,1);
    GL11.glTranslatef(-p.getX(),-p.getY(),-p.getZ());
  }
 else {
    super.assign();
  }
}",0.690865093768905
177325,"public void doInput(){
  if (activePlayer == null) {
    return;
  }
  if (Mouse.isGrabbed()) {
    Transform ts=activePlayer.getTransform().getTransform();
    float pitch=ts.getRotation().getPitch();
    float yaw=ts.getRotation().getYaw();
    float mouseDX=-Mouse.getDX() * 0.16f;
    float mouseDY=Mouse.getDY() * 0.16f;
    if (yaw + mouseDX >= 360)     yaw+=mouseDX - 360;
 else     if (yaw + mouseDX < 0)     yaw+=mouseDX + 360;
 else     yaw+=mouseDX;
    if (pitch + mouseDY >= -80 && pitch + mouseDY <= 80)     pitch+=mouseDY;
 else     if (pitch + mouseDY < -80)     pitch=-80;
 else     if (pitch + mouseDY > 80)     pitch=80;
    ts.setRotation(MathHelper.rotation(pitch,yaw,ts.getRotation().getRoll()));
    activePlayer.getTransform().setTransform(ts);
  }
  boolean keyUp=Keyboard.isKeyDown(Keyboard.KEY_UP) || Keyboard.isKeyDown(Keyboard.KEY_Z);
  boolean keyDown=Keyboard.isKeyDown(Keyboard.KEY_DOWN) || Keyboard.isKeyDown(Keyboard.KEY_S);
  boolean keyLeft=Keyboard.isKeyDown(Keyboard.KEY_LEFT) || Keyboard.isKeyDown(Keyboard.KEY_Q);
  boolean keyRight=Keyboard.isKeyDown(Keyboard.KEY_RIGHT) || Keyboard.isKeyDown(Keyboard.KEY_D);
  boolean flyUp=Keyboard.isKeyDown(Keyboard.KEY_SPACE);
  boolean flyDown=Keyboard.isKeyDown(Keyboard.KEY_LSHIFT);
  if (keyUp && !keyLeft && !keyRight&& !keyDown) {
    activePlayer.getTransform().setPosition(activePlayer.getTransform().getPosition().add(activePlayer.getTransform().getTransform().forwardVector()));
  }
  if (keyDown && !keyUp && !keyLeft&& !keyRight) {
    activePlayer.getTransform().setPosition(activePlayer.getTransform().getPosition().subtract(activePlayer.getTransform().getTransform().forwardVector()));
  }
  if (keyLeft && !keyRight && !keyUp&& !keyDown) {
    activePlayer.getTransform().setPosition(activePlayer.getTransform().getPosition().add(activePlayer.getTransform().getTransform().rightVector()));
  }
  if (keyRight && !keyLeft && !keyUp&& !keyDown) {
    activePlayer.getTransform().setPosition(activePlayer.getTransform().getPosition().subtract(activePlayer.getTransform().getTransform().rightVector()));
  }
}","public void doInput(){
  if (activePlayer == null) {
    return;
  }
  if (Mouse.isGrabbed()) {
    Transform ts=activePlayer.getTransform().getTransform();
    float pitch=ts.getRotation().getPitch();
    float yaw=ts.getRotation().getYaw();
    float mouseDX=-Mouse.getDX() * 0.16f;
    float mouseDY=Mouse.getDY() * 0.16f;
    if (yaw + mouseDX >= 360)     yaw+=mouseDX - 360;
 else     if (yaw + mouseDX < 0)     yaw+=mouseDX + 360;
 else     yaw+=mouseDX;
    if (pitch + mouseDY >= -80 && pitch + mouseDY <= 80)     pitch+=mouseDY;
 else     if (pitch + mouseDY < -80)     pitch=-80;
 else     if (pitch + mouseDY > 80)     pitch=80;
    ts.setRotation(MathHelper.rotation(pitch,yaw,ts.getRotation().getRoll()));
    activePlayer.getTransform().setTransform(ts);
  }
  boolean keyUp=Keyboard.isKeyDown(Keyboard.KEY_UP) || Keyboard.isKeyDown(Keyboard.KEY_Z);
  boolean keyDown=Keyboard.isKeyDown(Keyboard.KEY_DOWN) || Keyboard.isKeyDown(Keyboard.KEY_S);
  boolean keyLeft=Keyboard.isKeyDown(Keyboard.KEY_LEFT) || Keyboard.isKeyDown(Keyboard.KEY_Q);
  boolean keyRight=Keyboard.isKeyDown(Keyboard.KEY_RIGHT) || Keyboard.isKeyDown(Keyboard.KEY_D);
  boolean flyUp=Keyboard.isKeyDown(Keyboard.KEY_SPACE);
  boolean flyDown=Keyboard.isKeyDown(Keyboard.KEY_LSHIFT);
  Point point=new Point(Point.ONE,activePlayer.getWorld());
  if (keyUp) {
    point=point.multiply(activePlayer.getTransform().getTransform().forwardVector());
  }
  if (keyDown) {
    point=point.multiply(activePlayer.getTransform().getTransform().forwardVector().multiply(-1));
  }
  if (keyLeft) {
    point=point.multiply(activePlayer.getTransform().getTransform().rightVector());
  }
  if (keyRight) {
    point=point.multiply(activePlayer.getTransform().getTransform().rightVector().multiply(-1));
  }
  if (flyUp) {
    point=point.multiply(activePlayer.getTransform().getTransform().upVector());
  }
  if (flyDown) {
    point=point.multiply(activePlayer.getTransform().getTransform().upVector().multiply(-1));
  }
  if (keyUp || keyDown || keyLeft|| keyRight|| flyUp|| flyDown) {
    System.out.println(""String_Node_Str"" + point.getX() + ""String_Node_Str""+ point.getY()+ ""String_Node_Str""+ point.getZ());
    System.out.println(""String_Node_Str"" + activePlayer.getTransform().getPosition().getX() + ""String_Node_Str""+ activePlayer.getTransform().getPosition().getY()+ ""String_Node_Str""+ activePlayer.getTransform().getPosition().getZ());
    activePlayer.getTransform().setPosition(activePlayer.getTransform().getPosition().add(point));
  }
}",0.623511582593635
177326,"public void addQuad(Vector3 a,Vector3 b,Vector3 c,Vector3 d,Color col){
  renderer.addTexCoord(0,0);
  renderer.addColor(col);
  renderer.addVertex(a);
  renderer.addTexCoord(1,0);
  renderer.addColor(col);
  renderer.addVertex(b);
  renderer.addTexCoord(1,1);
  renderer.addColor(col);
  renderer.addVertex(c);
  renderer.addTexCoord(1,1);
  renderer.addColor(col);
  renderer.addVertex(c);
  renderer.addTexCoord(0,1);
  renderer.addColor(col);
  renderer.addVertex(d);
  renderer.addTexCoord(0,0);
  renderer.addColor(col);
  renderer.addVertex(a);
}","public void addQuad(Vector3 a,Vector3 b,Vector3 c,Vector3 d,Color col){
  renderer.addTexCoord(0f,0f);
  renderer.addColor(col);
  renderer.addVertex(a);
  renderer.addTexCoord(1f,0f);
  renderer.addColor(col);
  renderer.addVertex(b);
  renderer.addTexCoord(1f,1f);
  renderer.addColor(col);
  renderer.addVertex(c);
  renderer.addTexCoord(1f,1f);
  renderer.addColor(col);
  renderer.addVertex(c);
  renderer.addTexCoord(0f,1f);
  renderer.addColor(col);
  renderer.addVertex(d);
  renderer.addTexCoord(0f,0f);
  renderer.addColor(col);
  renderer.addVertex(a);
}",0.9892665474060824
177327,"@Override protected void doFlush(){
  GL11.glNewList(displayList,GL11.GL_COMPILE);
  FloatBuffer vBuffer=BufferUtils.createFloatBuffer(vertexBuffer.size());
  vBuffer.clear();
  vBuffer.put(vertexBuffer.toArray());
  vBuffer.flip();
  GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
  GL11.glVertexPointer(4,0,vBuffer);
  if (useNormals) {
    vBuffer.clear();
    vBuffer.put(normalBuffer.toArray());
    vBuffer.flip();
    GL11.glEnableClientState(GL11.GL_NORMAL_ARRAY);
    GL11.glNormalPointer(0,vBuffer);
  }
  if (useTextures) {
    vBuffer.clear();
    vBuffer.put(uvBuffer.toArray());
    vBuffer.flip();
    GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
    GL11.glTexCoordPointer(2,0,vBuffer);
  }
  GL11.glDrawArrays(renderMode,0,numVertices);
  GL11.glEndList();
}","@Override protected void doFlush(){
  GL11.glNewList(displayList,GL11.GL_COMPILE);
  FloatBuffer vBuffer=BufferUtils.createFloatBuffer(vertexBuffer.size());
  vBuffer.clear();
  vBuffer.put(vertexBuffer.toArray());
  vBuffer.flip();
  GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
  GL11.glVertexPointer(4,0,vBuffer);
  if (useNormals) {
    vBuffer.clear();
    vBuffer.put(normalBuffer.toArray());
    vBuffer.flip();
    GL11.glEnableClientState(GL11.GL_NORMAL_ARRAY);
    GL11.glNormalPointer(0,vBuffer);
  }
  if (useTextures) {
    FloatBuffer temp=BufferUtils.createFloatBuffer(uvBuffer.size());
    temp.put(uvBuffer.toArray());
    temp.flip();
    GL11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
    GL11.glTexCoordPointer(2,0,temp);
  }
  GL11.glDrawArrays(renderMode,0,numVertices);
  GL11.glEndList();
}",0.926132836747362
177328,"public int getKey(String source,String clazz){
  HashMap<String,Integer> idmap=classes.get(clazz);
  if (idmap == null) {
    return NO_ID;
  }
 else {
    Integer id=idmap.get(source);
    if (id != null) {
      return id;
    }
  }
  return NO_ID;
}","public int getKey(String source,String clazz){
synchronized (classes) {
    HashMap<String,Integer> idmap=classes.get(clazz);
    if (idmap == null) {
      return NO_ID;
    }
 else {
      Integer id=idmap.get(source);
      if (id != null) {
        return id;
      }
    }
    return NO_ID;
  }
}",0.7956600361663653
177329,"public List<Integer> getIdList(){
  return Collections.unmodifiableList(idList);
}","public List<Integer> getIdList(){
synchronized (idList) {
    return Collections.unmodifiableList(idList);
  }
}",0.845360824742268
177330,"public void save(Writer writer){
  Yaml yaml=new Yaml();
  LinkedHashMap<String,Object> dump=new LinkedHashMap<String,Object>();
  dump.put(""String_Node_Str"",nextId);
  LinkedHashMap<Integer,LinkedHashMap<String,String>> ids=new LinkedHashMap<Integer,LinkedHashMap<String,String>>();
  for (  Entry<String,HashMap<String,Integer>> e1 : classes.entrySet()) {
    for (    Entry<String,Integer> e2 : e1.getValue().entrySet()) {
      String clazz=e1.getKey();
      String source=e2.getKey();
      int key=e2.getValue();
      LinkedHashMap<String,String> v=new LinkedHashMap<String,String>(2);
      v.put(""String_Node_Str"",clazz);
      v.put(""String_Node_Str"",source);
      ids.put(key,v);
    }
  }
  dump.put(""String_Node_Str"",ids);
  String toWrite=yaml.dumpAs(dump,Tag.MAP,FlowStyle.BLOCK);
  try {
    writer.write(toWrite);
    writer.close();
  }
 catch (  IOException e) {
  }
}","public void save(Writer writer){
  Yaml yaml=new Yaml();
  LinkedHashMap<String,Object> dump=new LinkedHashMap<String,Object>();
  dump.put(""String_Node_Str"",nextId);
  LinkedHashMap<Integer,LinkedHashMap<String,String>> ids=new LinkedHashMap<Integer,LinkedHashMap<String,String>>();
  for (  Entry<String,HashMap<String,Integer>> e1 : classes.entrySet()) {
    for (    Entry<String,Integer> e2 : e1.getValue().entrySet()) {
      String clazz=e1.getKey();
      String source=e2.getKey();
      int key=e2.getValue();
      LinkedHashMap<String,String> v=new LinkedHashMap<String,String>(2);
      v.put(""String_Node_Str"",clazz);
      v.put(""String_Node_Str"",source);
      ids.put(key,v);
    }
  }
  dump.put(""String_Node_Str"",ids);
  String toWrite=yaml.dumpAs(dump,Tag.MAP,FlowStyle.BLOCK);
  try {
    writer.write(toWrite);
  }
 catch (  IOException e) {
    Spout.getLogger().log(Level.SEVERE,""String_Node_Str"",e);
  }
 finally {
    IOUtils.closeQuietly(writer);
  }
}",0.930406852248394
177331,"@SuppressWarnings(""String_Node_Str"") protected void loadLanguage(InputStream in){
  Yaml yaml=new Yaml();
  Map<String,Object> dump=(Map<String,Object>)yaml.load(in);
  Locale locale=null;
  if (dump.containsKey(""String_Node_Str"")) {
    locale=Locale.getByCode((String)dump.get(""String_Node_Str""));
  }
  if (locale == null) {
    return;
  }
  LanguageDictionary dict=new LanguageDictionary(locale);
  setDictionary(locale,dict);
  if (dump.containsKey(""String_Node_Str"")) {
    Map<Integer,Object> strings=(Map<Integer,Object>)dump.get(""String_Node_Str"");
    for (    Entry<Integer,Object> e : strings.entrySet()) {
      if (e.getValue() instanceof String) {
        dict.setTranslation(e.getKey(),e.getValue());
      }
 else {
        try {
          LocaleNumberHandler handler=locale.getNumberHandler().newInstance();
          handler.init(e.getValue());
          dict.setTranslation(e.getKey(),handler);
        }
 catch (        IllegalArgumentException e1) {
        }
catch (        SecurityException e1) {
        }
catch (        InstantiationException e1) {
        }
catch (        IllegalAccessException e1) {
        }
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") protected void loadLanguage(InputStream in,String fileName){
  Yaml yaml=new Yaml();
  Map<String,Object> dump=(Map<String,Object>)yaml.load(in);
  Locale locale=null;
  if (dump.containsKey(""String_Node_Str"")) {
    locale=Locale.getByCode((String)dump.get(""String_Node_Str""));
  }
  if (locale == null) {
    throw new IllegalStateException(""String_Node_Str"" + fileName);
  }
  LanguageDictionary dict=new LanguageDictionary(locale);
  setDictionary(locale,dict);
  if (dump.containsKey(""String_Node_Str"")) {
    Map<Integer,Object> strings=(Map<Integer,Object>)dump.get(""String_Node_Str"");
    for (    Entry<Integer,Object> e : strings.entrySet()) {
      if (e.getValue() instanceof String) {
        dict.setTranslation(e.getKey(),e.getValue());
      }
 else {
        try {
          LocaleNumberHandler handler=locale.getNumberHandler().newInstance();
          handler.init(e.getValue());
          dict.setTranslation(e.getKey(),handler);
        }
 catch (        IllegalArgumentException e1) {
          throw new RuntimeException(""String_Node_Str"" + fileName + ""String_Node_Str"");
        }
catch (        SecurityException e1) {
          Spout.getLogger().log(Level.SEVERE,""String_Node_Str"",e1);
        }
catch (        InstantiationException e1) {
          Spout.getLogger().log(Level.SEVERE,""String_Node_Str"",e1);
        }
catch (        IllegalAccessException e1) {
          Spout.getLogger().log(Level.SEVERE,""String_Node_Str"",e1);
        }
      }
    }
  }
}",0.8601268183513614
177332,"public String getCodedSource(int id){
  return codedLanguage.getTranslation(id);
}","public String getCodedSource(int id){
synchronized (codedLanguage) {
    return codedLanguage.getTranslation(id);
  }
}",0.8159203980099502
177333,"public void setKey(String source,String clazz,int id){
  HashMap<String,Integer> idmap=classes.get(clazz);
  if (idmap == null) {
    idmap=new HashMap<String,Integer>();
    classes.put(clazz,idmap);
  }
  idmap.put(source,id);
  idList.add(id);
  codedLanguage.setTranslation(id,source);
}","public void setKey(String source,String clazz,int id){
synchronized (classes) {
    HashMap<String,Integer> idmap=classes.get(clazz);
    if (idmap == null) {
      idmap=new HashMap<String,Integer>();
      classes.put(clazz,idmap);
    }
    idmap.put(source,id);
  }
synchronized (idList) {
    idList.add(id);
  }
synchronized (codedLanguage) {
    codedLanguage.setTranslation(id,source);
  }
}",0.6318840579710145
177334,"@SuppressWarnings(""String_Node_Str"") protected void loadLanguages(){
  try {
    Set<String> loaded=new HashSet<String>();
    File langDir=getLangDirectory();
    if (langDir.exists() && langDir.isDirectory()) {
      File[] files=langDir.listFiles();
      for (      File file : files) {
        if (LANG_FILE_FILTER.matcher(file.getName()).matches()) {
          loadLanguage(new FileInputStream(file));
          loaded.add(file.getName());
        }
      }
    }
    if (plugin != null) {
      JarFile jar=new JarFile(plugin.getFile());
      if (jar.getEntry(getJarBasePath()) == null) {
        return;
      }
      Enumeration<JarEntry> entries=jar.entries();
      while (entries.hasMoreElements()) {
        JarEntry entry=entries.nextElement();
        if (entry.getName().startsWith(getJarBasePath())) {
          String file=entry.getName().replaceFirst(getJarBasePath(),""String_Node_Str"");
          if (LANG_FILE_FILTER.matcher(file).matches() && !loaded.contains(file)) {
            loadLanguage(jar.getInputStream(entry));
            loaded.add(file);
          }
        }
      }
    }
  }
 catch (  IOException e) {
  }
}","@SuppressWarnings(""String_Node_Str"") protected void loadLanguages(){
  try {
    Set<String> loaded=new HashSet<String>();
    File langDir=getLangDirectory();
    if (langDir.exists() && langDir.isDirectory()) {
      File[] files=langDir.listFiles();
      for (      File file : files) {
        if (LANG_FILE_FILTER.matcher(file.getName()).matches()) {
          try {
            loadLanguage(new FileInputStream(file),file.getAbsolutePath());
            loaded.add(file.getName());
          }
 catch (          Exception e) {
            Spout.getLogger().log(Level.SEVERE,""String_Node_Str"" + plugin.getName(),e);
          }
        }
      }
    }
    if (plugin != null) {
      JarFile jar=new JarFile(plugin.getFile());
      if (jar.getEntry(getJarBasePath()) == null) {
        return;
      }
      Enumeration<JarEntry> entries=jar.entries();
      while (entries.hasMoreElements()) {
        JarEntry entry=entries.nextElement();
        if (entry.getName().startsWith(getJarBasePath())) {
          String file=entry.getName().replaceFirst(getJarBasePath(),""String_Node_Str"");
          if (LANG_FILE_FILTER.matcher(file).matches() && !loaded.contains(file)) {
            try {
              loadLanguage(jar.getInputStream(entry),plugin.getFile().getAbsolutePath() + ""String_Node_Str"" + entry.getName());
              loaded.add(file);
            }
 catch (            Exception e) {
              Spout.getLogger().log(Level.SEVERE,""String_Node_Str"" + plugin.getName(),e);
            }
          }
        }
      }
    }
  }
 catch (  IOException e) {
    Spout.getLogger().log(Level.SEVERE,""String_Node_Str"" + plugin.getName(),e);
  }
}",0.8163701067615659
177335,"/** 
 * Syncs all entities/observers in this region
 */
public void syncEntities(){
  for (  Entity ent : getAll()) {
    if (ent.getChunk() == null) {
      continue;
    }
    Set<? extends Entity> observers=ent.getChunk().getObservers();
    for (    Entity observer : observers) {
      if (ent == observer) {
        continue;
      }
      if (!(observer instanceof Player)) {
        continue;
      }
      Player player=(Player)observer;
      if (!player.isOnline()) {
        continue;
      }
      NetworkSynchronizer network=player.getNetworkSynchronizer();
      int view=player.getViewDistance();
      boolean spawn, sync, destroy;
      spawn=sync=destroy=false;
      if (MathHelper.distance(ent.getTransform().getPosition(),player.getTransform().getPosition()) > view) {
        destroy=true;
      }
 else {
        if (!network.hasSpawned(ent)) {
          spawn=true;
        }
 else {
          sync=true;
        }
      }
      network.syncEntity(ent,spawn,destroy,sync);
    }
  }
}","/** 
 * Syncs all entities/observers in this region
 */
public void syncEntities(){
  for (  Entity ent : getAll()) {
    if (ent.getChunk() == null) {
      continue;
    }
    if (ent.getId() == SpoutEntity.NOTSPAWNEDID) {
      continue;
    }
    Set<? extends Entity> observers=ent.getChunk().getObservers();
    syncEntity(ent,observers,false);
    Set<? extends Entity> expiredObservers=((SpoutChunk)ent.getChunk()).getExpiredObservers();
    syncEntity(ent,expiredObservers,true);
  }
}",0.3446440452428476
177336,"@Override public boolean removeObserver(Entity entity){
  checkChunkLoaded();
  parentRegion.markObserverDirty(this);
  TickStage.checkStage(TickStage.FINALIZE);
  Integer oldDistance=((SpoutEntity)entity).getPrevViewDistance();
  if (oldDistance == null) {
    return false;
  }
  observers.remove((SpoutEntity)entity);
  if (!isObserved()) {
    parentRegion.unloadQueue.add(this);
  }
  return true;
}","@Override public boolean removeObserver(Entity entity){
  checkChunkLoaded();
  parentRegion.markObserverDirty(this);
  TickStage.checkStage(TickStage.FINALIZE);
  Integer oldDistance=((SpoutEntity)entity).getPrevViewDistance();
  if (oldDistance == null) {
    return false;
  }
  observers.remove((SpoutEntity)entity);
  expiredObserversQueue.add((SpoutEntity)entity);
  if (!isObserved()) {
    parentRegion.unloadQueue.add(this);
  }
  return true;
}",0.9417249417249416
177337,"public void preSnapshotRun(){
  entityManager.preSnapshotRun();
  SpoutChunk spoutChunk;
  while ((spoutChunk=dirtyChunks.poll()) != null) {
    spoutChunk.setNotDirtyQueued();
    if (!spoutChunk.isLoaded()) {
      continue;
    }
    if (spoutChunk.isPopulated() && spoutChunk.isDirty()) {
      spoutChunk.setRenderDirty();
      for (      Player entity : spoutChunk.getObservingPlayers()) {
        syncChunkToPlayer(spoutChunk,entity);
      }
      processChunkUpdatedEvent(spoutChunk);
      spoutChunk.resetDirtyArrays();
      spoutChunk.setLightDirty(false);
    }
  }
  SpoutChunkSnapshotFuture snapshotFuture;
  while ((snapshotFuture=snapshotQueue.poll()) != null) {
    snapshotFuture.run();
  }
  entityManager.syncEntities();
}","public void preSnapshotRun(){
  entityManager.preSnapshotRun();
  SpoutChunk spoutChunk;
  while ((spoutChunk=dirtyChunks.poll()) != null) {
    spoutChunk.setNotDirtyQueued();
    if (!spoutChunk.isLoaded()) {
      continue;
    }
    if (spoutChunk.isPopulated() && spoutChunk.isDirty()) {
      spoutChunk.setRenderDirty();
      for (      Player entity : spoutChunk.getObservingPlayers()) {
        syncChunkToPlayer(spoutChunk,entity);
      }
      processChunkUpdatedEvent(spoutChunk);
      spoutChunk.resetDirtyArrays();
      spoutChunk.setLightDirty(false);
    }
  }
  SpoutChunkSnapshotFuture snapshotFuture;
  while ((snapshotFuture=snapshotQueue.poll()) != null) {
    snapshotFuture.run();
  }
  for (int dx=0; dx < CHUNKS.SIZE; dx++) {
    for (int dy=0; dy < CHUNKS.SIZE; dy++) {
      for (int dz=0; dz < CHUNKS.SIZE; dz++) {
        SpoutChunk chunk=chunks[dx][dy][dz].get();
        if (chunk != null) {
          chunk.updateExpiredObservers();
        }
      }
    }
  }
  entityManager.syncEntities();
}",0.8394366197183099
177338,"/** 
 * Syncs all entities/observers in this region
 */
public void syncEntities(){
  for (  Entity ent : getAll()) {
    if (ent.getChunk() == null) {
      continue;
    }
    if (ent.getId() == SpoutEntity.NOTSPAWNEDID) {
      continue;
    }
    Set<? extends Entity> observers=ent.getChunk().getObservers();
    syncEntity(ent,observers,false);
    Set<? extends Entity> expiredObservers=((SpoutChunk)ent.getChunk()).getExpiredObservers();
    syncEntity(ent,expiredObservers,true);
  }
}","/** 
 * Syncs all entities/observers in this region
 */
public void syncEntities(){
  for (  Entity ent : getAll()) {
    if (ent.getChunk() == null) {
      continue;
    }
    if (ent.getId() == SpoutEntity.NOTSPAWNEDID) {
      Spout.getLogger().info(""String_Node_Str"");
      continue;
    }
    Set<? extends Entity> observers=ent.getChunk().getObservers();
    syncEntity(ent,observers,false);
    Set<? extends Entity> expiredObservers=((SpoutChunk)ent.getChunk()).getExpiredObservers();
    syncEntity(ent,expiredObservers,true);
  }
}",0.95274831243973
177339,"/** 
 * Adds an entity to the manager.
 * @param entity The entity
 */
public void addEntity(SpoutEntity entity){
  int currentId=entity.getId();
  if (currentId == SpoutEntity.NOTSPAWNEDID) {
    entity.setId(getNextId());
  }
  entities.put(currentId,entity);
  if (entity instanceof Player) {
    players.put((Player)entity,new ArrayList<SpoutEntity>());
  }
}","/** 
 * Adds an entity to the manager.
 * @param entity The entity
 */
public void addEntity(SpoutEntity entity){
  int currentId=entity.getId();
  if (currentId == SpoutEntity.NOTSPAWNEDID) {
    currentId=getNextId();
    entity.setId(currentId);
  }
  entities.put(currentId,entity);
  if (entity instanceof Player) {
    players.put((Player)entity,new ArrayList<SpoutEntity>());
  }
}",0.9320905459387484
177340,"/** 
 * Finalizes the manager at the FINALIZERUN tick stage
 */
public void finalizeRun(){
  for (  SpoutEntity e : entities.get().values()) {
    if (e.isRemoved()) {
      removeEntity(e);
      continue;
    }
    e.finalizeRun();
    if (e instanceof Player) {
      Player p=(Player)e;
      if (p.isOnline()) {
        p.getNetworkSynchronizer().finalizeTick();
      }
    }
  }
}","/** 
 * Finalizes the manager at the FINALIZERUN tick stage
 */
public void finalizeRun(){
  for (  SpoutEntity e : entities.get().values()) {
    if (e.isRemoved()) {
      removeEntity(e);
    }
    e.finalizeRun();
    if (e instanceof Player) {
      Player p=(Player)e;
      if (p.isOnline()) {
        p.getNetworkSynchronizer().finalizeTick();
      }
    }
  }
}",0.978891820580475
177341,"@Override public void onTick(float dt){
  for (  Component component : values()) {
    component.tick(dt);
  }
  if (getTransform().isDirty()) {
    chunk.set(getWorld().getChunkFromBlock(getTransform().getPosition(),LoadOption.NO_LOAD));
    entityManager.set(((SpoutRegion)getRegion()).getEntityManager());
  }
}","@Override public void onTick(float dt){
  for (  Component component : values()) {
    component.tick(dt);
  }
}",0.5258215962441315
177342,"public Chunk getChunkLive(){
  return chunk.getLive();
}","public Chunk getChunkLive(){
  return getTransform().getTransformLive().getPosition().getChunk(LoadOption.NO_LOAD);
}",0.6011560693641619
177343,"protected void updateObserver(){
  final int viewDistance=getViewDistance() >> Chunk.BLOCKS.BITS;
  World w=getWorld();
  int cx=chunk.getLive().getX();
  int cy=chunk.getLive().getY();
  int cz=chunk.getLive().getZ();
  HashSet<SpoutChunk> observing=new HashSet<SpoutChunk>((viewDistance * viewDistance * viewDistance* 3) / 2);
  OutwardIterator oi=new OutwardIterator(cx,cy,cz,viewDistance);
  while (oi.hasNext()) {
    IntVector3 v=oi.next();
    Chunk chunk=w.getChunk(v.getX(),v.getY(),v.getZ(),LoadOption.LOAD_GEN);
    chunk.refreshObserver(this);
    observing.add((SpoutChunk)chunk);
  }
  observingChunks.removeAll(observing);
  for (  SpoutChunk chunk : observingChunks) {
    if (chunk.isLoaded()) {
      chunk.removeObserver(this);
    }
  }
  observingChunks.clear();
  observingChunks.addAll(observing);
}","protected void updateObserver(){
  final int viewDistance=getViewDistance() >> Chunk.BLOCKS.BITS;
  World w=getWorld();
  int cx=getChunkLive().getX();
  int cy=getChunkLive().getY();
  int cz=getChunkLive().getZ();
  HashSet<SpoutChunk> observing=new HashSet<SpoutChunk>((viewDistance * viewDistance * viewDistance* 3) / 2);
  OutwardIterator oi=new OutwardIterator(cx,cy,cz,viewDistance);
  while (oi.hasNext()) {
    IntVector3 v=oi.next();
    Chunk chunk=w.getChunk(v.getX(),v.getY(),v.getZ(),LoadOption.LOAD_GEN);
    chunk.refreshObserver(this);
    observing.add((SpoutChunk)chunk);
  }
  observingChunks.removeAll(observing);
  for (  SpoutChunk chunk : observingChunks) {
    if (chunk.isLoaded()) {
      chunk.removeObserver(this);
    }
  }
  observingChunks.clear();
  observingChunks.addAll(observing);
}",0.9689213893967094
177344,"public void finalizeRun(){
  if (entityManager.isDirty()) {
    entityManager.get().removeEntity(this);
    if (!isRemoved()) {
      entityManager.getLive().addEntity(this);
    }
  }
  if (isRemoved()) {
    removeObserver();
    for (    Component component : values()) {
      detach(component.getClass());
    }
  }
 else   if ((chunk.isDirty() && observer.getLive()) || observer.isDirty()) {
    updateObserver();
  }
}","public void finalizeRun(){
  if (isRemoved()) {
    removeObserver();
    for (    Component component : values()) {
      detach(component.getClass());
    }
    return;
  }
  Chunk chunk=getChunk();
  SpoutChunk chunkLive=(SpoutChunk)getChunkLive();
  if (chunk.getRegion() != chunkLive.getRegion()) {
    entityManager.get().removeEntity(this);
    if (!isRemoved()) {
      entityManager.set(chunkLive.getRegion().getEntityManager());
      entityManager.getLive().addEntity(this);
    }
  }
  if ((chunk != chunkLive && observer.getLive()) || observer.isDirty()) {
    updateObserver();
  }
}",0.4814090019569471
177345,"/** 
 * Prevents stack overflow when creating an entity during chunk loading due to circle of calls
 */
public void setupInitialChunk(Transform transform){
  Chunk getChunk=transform.getPosition().getWorld().getChunkFromBlock(transform.getPosition());
  chunk.set(getChunk);
  SpoutRegion region=(SpoutRegion)getChunk.getRegion();
  entityManager.set(region.getEntityManager());
}","/** 
 * Prevents stack overflow when creating an entity during chunk loading due to circle of calls
 */
public void setupInitialChunk(Transform transform){
  SpoutRegion region=(SpoutRegion)getChunkLive().getRegion();
  entityManager.set(region.getEntityManager());
}",0.6986089644513137
177346,"@Override public Chunk getChunk(){
  return chunk.get();
}","@Override public Chunk getChunk(){
  return getTransform().getPosition().getChunk(LoadOption.NO_LOAD);
}",0.654320987654321
177347,"@DelayedWrite public boolean connect(SpoutSession<?> session,Transform newTransform){
  if (!onlineLive.compareAndSet(false,true)) {
    return false;
  }
  if (newTransform == null || newTransform.getPosition().getWorld() == null) {
    return false;
  }
  setupInitialChunk(newTransform);
  getTransform().setTransform(newTransform);
  sessionLive.set(session);
  copySnapshot();
  return true;
}","@DelayedWrite public boolean connect(SpoutSession<?> session,Transform newTransform){
  if (!onlineLive.compareAndSet(false,true)) {
    return false;
  }
  if (newTransform == null || newTransform.getPosition().getWorld() == null) {
    return false;
  }
  getTransform().setTransform(newTransform);
  setupInitialChunk(newTransform);
  sessionLive.set(session);
  copySnapshot();
  return true;
}",0.8869346733668342
177348,"private Iterator<Point> attemptSendChunk(Iterator<Point> i,Iterable<Point> queue,Chunk c){
  if (c.canSend()) {
    Collection<Chunk> sent=sendChunk(c);
    activeChunks.add(c.getBase());
    i.remove();
    if (sent != null) {
      boolean updated=false;
      for (      Chunk s : sent) {
        Point base=s.getBase();
        if (priorityChunkSendQueue.remove(base) || chunkSendQueue.remove(base)) {
          updated=true;
          activeChunks.add(base);
          chunksSent++;
        }
      }
      if (updated) {
        i=queue.iterator();
      }
    }
    chunksSent++;
  }
  return i;
}","private Iterator<Point> attemptSendChunk(Iterator<Point> i,Iterable<Point> queue,Chunk c){
  if (c.canSend()) {
    Collection<Chunk> sent=sendChunk(c);
    activeChunks.add(c.getBase());
    i.remove();
    if (sent != null) {
      boolean updated=false;
      for (      Chunk s : sent) {
        Point base=s.getBase();
        if (priorityChunkSendQueue.remove(base) || chunkSendQueue.remove(base)) {
          updated=true;
          if (initializedChunks.contains(base)) {
            activeChunks.add(base);
          }
          chunksSent++;
        }
      }
      if (updated) {
        i=queue.iterator();
      }
    }
    chunksSent++;
  }
  return i;
}",0.949685534591195
177349,"@Override public World getWorld(){
  return getTransform().getPosition().getWorld();
}","@Override public World getWorld(){
  return entityManager.getRegion().getWorld();
}",0.8284023668639053
177350,"public SpoutPlayer(String name,Transform transform,int viewDistance){
  super(transform,viewDistance);
  this.name=name;
  displayName.set(name);
  hashcode=name.hashCode();
}","public SpoutPlayer(String name,Transform transform,int viewDistance){
  super(transform,viewDistance);
  this.name=name;
  displayName.set(name);
  hashcode=name.hashCode();
  this.setObserver(true);
}",0.9308510638297872
177351,"public Player addPlayer(String playerName,SpoutSession<?> session,int viewDistance){
  SpoutPlayer player=new SpoutPlayer(playerName,null,viewDistance);
  players.putIfAbsent(playerName,player);
  return player;
}","public Player addPlayer(String playerName,SpoutSession<?> session,int viewDistance){
  SpoutPlayer player=new SpoutPlayer(playerName,null,viewDistance);
  players.put(playerName,player);
  player.connect(session,getDefaultWorld().getSpawnPoint());
  getDefaultWorld().spawnEntity(player);
  session.setPlayer(player);
  session.getProtocol().initializeSession(session);
  return player;
}",0.6256239600665557
177352,"/** 
 * Finalizes the manager at the FINALIZERUN tick stage
 */
public void finalizeRun(){
  for (  SpoutEntity e : entities.get().values()) {
    e.finalizeRun();
    if (e instanceof Player) {
      Player p=(Player)e;
      if (p.isOnline()) {
        p.getNetworkSynchronizer().finalizeTick();
      }
    }
    if (e.isRemoved()) {
      removeEntity(e);
    }
  }
}","/** 
 * Finalizes the manager at the FINALIZERUN tick stage
 */
public void finalizeRun(){
  for (  SpoutEntity e : entities.get().values()) {
    if (e.isRemoved()) {
      removeEntity(e);
      return;
    }
    e.finalizeRun();
    if (e instanceof Player) {
      Player p=(Player)e;
      if (p.isOnline()) {
        p.getNetworkSynchronizer().finalizeTick();
      }
    }
  }
}",0.8306878306878307
177353,"/** 
 * Syncs all entities/observers in this region
 */
public void syncEntities(){
  Map<Player,ArrayList<SpoutEntity>> toSync=players.get();
  Collection<SpoutEntity> allEntities=getAll();
  for (  Player player : toSync.keySet()) {
    if (!player.isOnline()) {
      continue;
    }
    Integer playerViewDistance=player.getViewDistance();
    NetworkSynchronizer net=player.getNetworkSynchronizer();
    ArrayList<SpoutEntity> entitiesPerPlayer=toSync.get(player);
    boolean spawn, destroy, update;
    for (    SpoutEntity entity : allEntities) {
      if (entity.equals(player)) {
        continue;
      }
      boolean contains=entitiesPerPlayer.contains(entity);
      spawn=destroy=update=false;
      if (MathHelper.distance(player.getTransform().getPosition(),entity.getTransform().getPosition()) <= playerViewDistance) {
        if (!contains) {
          entitiesPerPlayer.add(entity);
          spawn=true;
        }
 else         if (entity.isRemoved()) {
          destroy=entitiesPerPlayer.remove(entity);
        }
 else {
          update=true;
        }
      }
 else {
        destroy=entitiesPerPlayer.remove(entity);
      }
      net.syncEntity(entity,spawn,destroy,update);
    }
  }
}","/** 
 * Syncs all entities/observers in this region
 */
public void syncEntities(){
  Map<Player,ArrayList<SpoutEntity>> toSync=players.get();
  for (  Player player : toSync.keySet()) {
    if (!player.isOnline()) {
      continue;
    }
    Integer playerViewDistance=player.getViewDistance();
    NetworkSynchronizer net=player.getNetworkSynchronizer();
    ArrayList<SpoutEntity> entitiesPerPlayer=toSync.get(player);
    boolean spawn, destroy, update;
    for (    SpoutEntity entity : getAllLive()) {
      if (entity.equals(player)) {
        continue;
      }
      boolean contains=entitiesPerPlayer.contains(entity);
      spawn=destroy=update=false;
      if (MathHelper.distance(player.getTransform().getPosition(),entity.getTransform().getPosition()) <= playerViewDistance) {
        if (!contains) {
          entitiesPerPlayer.add(entity);
          spawn=true;
        }
 else         if (entity.isRemoved()) {
          destroy=entitiesPerPlayer.remove(entity);
        }
 else {
          update=true;
        }
      }
 else {
        destroy=entitiesPerPlayer.remove(entity);
      }
      net.syncEntity(entity,spawn,destroy,update);
    }
  }
}",0.1889962200755985
177354,"/** 
 * Deallocates the id for an entity.
 * @param entity The entity.
 */
public void deallocate(SpoutEntity entity){
  entities.remove(entity.getId());
  if (entity instanceof Player) {
    entity.setId(SpoutEntity.NOTSPAWNEDID);
  }
}","/** 
 * Deallocates the id for an entity.
 * @param entity The entity.
 */
public void deallocate(SpoutEntity entity){
  entities.remove(entity.getId());
}",0.7908163265306123
177355,"/** 
 * Adds an entity to the manager.
 * @param entity The entity
 */
public void addEntity(SpoutEntity entity){
  allocate(entity);
  if (entity instanceof Player) {
    players.putIfAbsent((Player)entity,new ArrayList<SpoutEntity>());
  }
}","/** 
 * Adds an entity to the manager.
 * @param entity The entity
 */
public void addEntity(SpoutEntity entity){
  allocate(entity);
  if (entity instanceof Player) {
    players.put((Player)entity,new ArrayList<SpoutEntity>());
  }
}",0.9832635983263598
177356,"@Override @DelayedWrite public void remove(){
  removeLive.getAndSet(true);
}","@Override @DelayedWrite public void remove(){
  removeLive.set(true);
}",0.945945945945946
177357,"@Override @DelayedWrite public void setSavable(boolean savable){
  saveLive.getAndSet(savable);
}","@Override @DelayedWrite public void setSavable(boolean savable){
  saveLive.set(savable);
}",0.9574468085106383
177358,"/** 
 * Prevents stack overflow when creating an entity during chunk loading due to circle of calls
 */
public void setupInitialChunk(Transform transform){
  chunkLive.set(transform.getPosition().getWorld().getChunkFromBlock(transform.getPosition()));
  entityManagerLive.set(((SpoutRegion)chunkLive.get().getRegion()).getEntityManager());
}","/** 
 * Prevents stack overflow when creating an entity during chunk loading due to circle of calls
 */
public void setupInitialChunk(Transform transform){
  Chunk chunk=transform.getPosition().getWorld().getChunkFromBlock(transform.getPosition());
  this.chunk=chunk;
  chunkLive.set(chunk);
  SpoutRegion region=(SpoutRegion)chunkLive.get().getRegion();
  this.entityManager=region.getEntityManager();
  entityManagerLive.set(region.getEntityManager());
}",0.6791979949874687
177359,"@DelayedWrite public boolean disconnect(){
  if (!onlineLive.compareAndSet(true,false)) {
    return false;
  }
  sessionLive.set(null);
  this.remove();
  return true;
}","@DelayedWrite public boolean disconnect(){
  sessionLive.set(null);
  this.remove();
  return true;
}",0.7453874538745388
177360,"@EventHandler(order=Order.MONITOR) public void onPlayerConnect(PlayerConnectEvent event){
  if (event.isCancelled()) {
    return;
  }
  final SpoutPlayer player=(SpoutPlayer)server.addPlayer(event.getPlayerName(),(SpoutSession<?>)event.getSession(),event.getViewDistance());
  if (player != null) {
    server.getEventManager().callEvent(new PlayerLoadEvent(player));
    World defaultWorld=Spout.getEngine().getDefaultWorld();
    player.connect((SpoutSession<?>)event.getSession(),defaultWorld.getSpawnPoint());
    defaultWorld.spawnEntity(player);
    ((SpoutSession<?>)event.getSession()).setPlayer(player);
    event.getSession().getProtocol().initializeSession(event.getSession());
    PlayerLoginEvent loginEvent=server.getEventManager().callEvent(new PlayerLoginEvent(player));
    if (!loginEvent.isAllowed()) {
      if (loginEvent.getMessage() != null) {
        player.kick(loginEvent.getMessage());
      }
 else {
        player.kick();
      }
    }
 else {
      server.getEventManager().callEvent(new PlayerJoinEvent(player,ChatStyle.CYAN,player.getDisplayName(),ChatStyle.CYAN,""String_Node_Str""));
    }
  }
 else {
    event.getSession().disconnect(""String_Node_Str"");
  }
}","@EventHandler(order=Order.MONITOR) public void onPlayerConnect(PlayerConnectEvent event){
  if (event.isCancelled()) {
    return;
  }
  final SpoutPlayer player=(SpoutPlayer)server.addPlayer(event.getPlayerName(),(SpoutSession<?>)event.getSession(),event.getViewDistance());
  if (player != null) {
    server.getEventManager().callEvent(new PlayerLoadEvent(player));
    PlayerLoginEvent loginEvent=server.getEventManager().callEvent(new PlayerLoginEvent(player));
    if (!loginEvent.isAllowed()) {
      if (loginEvent.getMessage() != null) {
        player.kick(loginEvent.getMessage());
      }
 else {
        player.kick();
      }
    }
 else {
      server.getEventManager().callEvent(new PlayerJoinEvent(player,ChatStyle.CYAN,player.getDisplayName(),ChatStyle.CYAN,""String_Node_Str""));
    }
  }
 else {
    event.getSession().disconnect(""String_Node_Str"");
  }
}",0.8448525857902368
177361,"public void dispose(PlayerLeaveEvent leaveEvent){
  SpoutPlayer player;
  if ((player=this.player.getAndSet(null)) != null) {
    if (!leaveEvent.hasBeenCalled()) {
      getEngine().getEventManager().callEvent(leaveEvent);
    }
    ChatArguments text=leaveEvent.getMessage();
    if (text != null && text.getArguments().size() > 0) {
      getEngine().broadcastMessage(text);
    }
    player.save();
    try {
      player.remove();
      player.disconnect();
    }
 catch (    Exception e) {
      Spout.getLogger().log(Level.WARNING,""String_Node_Str"" + player.getName() + ""String_Node_Str"",e);
    }
  }
}","public void dispose(PlayerLeaveEvent leaveEvent){
  SpoutPlayer player;
  if ((player=this.player.getAndSet(null)) != null) {
    if (!leaveEvent.hasBeenCalled()) {
      getEngine().getEventManager().callEvent(leaveEvent);
    }
    ChatArguments text=leaveEvent.getMessage();
    if (text != null && text.getArguments().size() > 0) {
      getEngine().broadcastMessage(text);
    }
    player.save();
    try {
      player.disconnect();
    }
 catch (    Exception e) {
      Spout.getLogger().log(Level.WARNING,""String_Node_Str"" + player.getName() + ""String_Node_Str"",e);
    }
  }
}",0.9807852965747702
177362,"@Override @LiveRead public SpoutChunk getChunk(int x,int y,int z,LoadOption loadopt){
  x&=CHUNKS.MASK;
  y&=CHUNKS.MASK;
  z&=CHUNKS.MASK;
  final SpoutChunk chunk=chunks[x][y][z].get();
  if (chunk != null) {
    if (loadopt.loadIfNeeded()) {
      if (!chunk.cancelUnload()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
    return chunk;
  }
  SpoutChunk newChunk=null;
  boolean generated=false;
  final AtomicReference<SpoutChunk> chunkReference=chunks[x][y][z];
  ChunkDataForRegion dataForRegion=null;
  if (loadopt.loadIfNeeded() && this.inputStreamExists(x,y,z)) {
    dataForRegion=new ChunkDataForRegion();
    newChunk=WorldFiles.loadChunk(this,x,y,z,this.getChunkInputStream(x,y,z),dataForRegion);
  }
  if (loadopt.generateIfNeeded() && newChunk == null) {
    newChunk=generateChunk(x,y,z);
    generated=true;
  }
  if (newChunk == null) {
    return null;
  }
  while (true) {
    if (chunkReference.compareAndSet(null,newChunk)) {
      newChunk.notifyColumn();
      numberActiveChunks.incrementAndGet();
      if (dataForRegion != null) {
        for (        SpoutEntity entity : dataForRegion.loadedEntities) {
          entity.setupInitialChunk(entity.getTransform().getTransform());
          addEntity(entity);
        }
        dynamicBlockTree.addDynamicBlockUpdates(dataForRegion.loadedUpdates);
      }
      occupiedChunksQueue.add(newChunk);
      Spout.getEventManager().callDelayedEvent(new ChunkLoadEvent(newChunk,generated));
      return newChunk;
    }
    newChunk.setUnloadedUnchecked();
    SpoutChunk oldChunk=chunkReference.get();
    if (oldChunk != null) {
      if (loadopt.loadIfNeeded()) {
        if (!oldChunk.cancelUnload()) {
          throw new IllegalStateException(""String_Node_Str"");
        }
      }
      return oldChunk;
    }
  }
}","@Override @LiveRead public SpoutChunk getChunk(int x,int y,int z,LoadOption loadopt){
  x&=CHUNKS.MASK;
  y&=CHUNKS.MASK;
  z&=CHUNKS.MASK;
  final SpoutChunk chunk=chunks[x][y][z].get();
  if (chunk != null) {
    if (loadopt.loadIfNeeded()) {
      if (!chunk.cancelUnload()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
    return chunk;
  }
  SpoutChunk newChunk=null;
  boolean generated=false;
  final AtomicReference<SpoutChunk> chunkReference=chunks[x][y][z];
  ChunkDataForRegion dataForRegion=null;
  if (loadopt.loadIfNeeded() && this.inputStreamExists(x,y,z)) {
    dataForRegion=new ChunkDataForRegion();
    newChunk=WorldFiles.loadChunk(this,x,y,z,this.getChunkInputStream(x,y,z),dataForRegion);
  }
  if (loadopt.generateIfNeeded() && newChunk == null) {
    newChunk=generateChunk(x,y,z);
    generated=true;
  }
  if (newChunk == null) {
    return null;
  }
  while (true) {
    if (chunkReference.compareAndSet(null,newChunk)) {
      newChunk.notifyColumn();
      numberActiveChunks.incrementAndGet();
      if (dataForRegion != null) {
        for (        SpoutEntity entity : dataForRegion.loadedEntities) {
          entity.setupInitialChunk(entity.getTransform().getTransform());
          entityManager.addEntity(entity);
        }
        dynamicBlockTree.addDynamicBlockUpdates(dataForRegion.loadedUpdates);
      }
      occupiedChunksQueue.add(newChunk);
      Spout.getEventManager().callDelayedEvent(new ChunkLoadEvent(newChunk,generated));
      return newChunk;
    }
    newChunk.setUnloadedUnchecked();
    SpoutChunk oldChunk=chunkReference.get();
    if (oldChunk != null) {
      if (loadopt.loadIfNeeded()) {
        if (!oldChunk.cancelUnload()) {
          throw new IllegalStateException(""String_Node_Str"");
        }
      }
      return oldChunk;
    }
  }
}",0.996172772006561
177363,"/** 
 * Spawns an entity into the world. Fires off a cancellable EntitySpawnEvent
 */
@Override public void spawnEntity(Entity e){
  if (e.isSpawned()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  SpoutRegion region=(SpoutRegion)e.getRegion();
  if (region == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (region.getEntityManager().isSpawnable((SpoutEntity)e)) {
    EntitySpawnEvent event=Spout.getEventManager().callEvent(new EntitySpawnEvent(e,e.getTransform().getPosition()));
    if (event.isCancelled()) {
      return;
    }
    region.addEntity(e);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","/** 
 * Spawns an entity into the world. Fires off a cancellable EntitySpawnEvent
 */
@Override public void spawnEntity(Entity e){
  if (e.isSpawned()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  SpoutRegion region=(SpoutRegion)e.getRegion();
  if (region == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (region.getEntityManager().isSpawnable((SpoutEntity)e)) {
    EntitySpawnEvent event=Spout.getEventManager().callEvent(new EntitySpawnEvent(e,e.getTransform().getPosition()));
    if (event.isCancelled()) {
      return;
    }
    region.getEntityManager().addEntity((SpoutEntity)e);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.9626436781609196
177364,"@Override public <T extends Component>T add(Class<T> type){
  if (type == null) {
    return null;
  }
  @SuppressWarnings(""String_Node_Str"") T component=(T)components.get(type);
  if (component == null) {
    try {
      component=type.newInstance();
    }
 catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
  }
  return component;
}","@Override public <T extends Component>T add(Class<T> type){
  if (type == null) {
    return null;
  }
  @SuppressWarnings(""String_Node_Str"") T component=(T)components.get(type);
  if (component == null) {
    try {
      component=type.newInstance();
    }
 catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
  }
  if (component != null) {
    if (component.attachTo(this)) {
      components.put(type,component);
    }
  }
  return component;
}",0.8459152016546019
177365,"private static SpoutEntity loadEntity(World w,CompoundTag tag,String Name,SpoutSession<?> playerSession){
  CompoundMap map=tag.getValue();
  @SuppressWarnings(""String_Node_Str"") byte version=SafeCast.toByte(NBTMapper.toTagValue(map.get(""String_Node_Str"")),(byte)0);
  String name=SafeCast.toString(NBTMapper.toTagValue(map.get(""String_Node_Str"")),""String_Node_Str"");
  ControllerType type=ControllerRegistry.get(name);
  if (type == null) {
    Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + name);
  }
 else   if (type.canCreateController()) {
    Float pX=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),Float.MAX_VALUE);
    Float pY=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),Float.MAX_VALUE);
    Float pZ=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),Float.MAX_VALUE);
    if (pX == Float.MAX_VALUE || pY == Float.MAX_VALUE || pZ == Float.MAX_VALUE) {
      return null;
    }
    float sX=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),1.0F);
    float sY=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),1.0F);
    float sZ=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),1.0F);
    float qX=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),0.0F);
    float qY=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),0.0F);
    float qZ=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),0.0F);
    float qW=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),1.0F);
    long msb=SafeCast.toLong(NBTMapper.toTagValue(map.get(""String_Node_Str"")),new Random().nextLong());
    long lsb=SafeCast.toLong(NBTMapper.toTagValue(map.get(""String_Node_Str"")),new Random().nextLong());
    UUID uid=new UUID(msb,lsb);
    int view=SafeCast.toInt(NBTMapper.toTagValue(map.get(""String_Node_Str"")),0);
    boolean observer=SafeCast.toGeneric(NBTMapper.toTagValue(map.get(""String_Node_Str"")),new ByteTag(""String_Node_Str"",(byte)0),ByteTag.class).getBooleanValue();
    Controller controller=type.createController();
    try {
      boolean controllerDataExists=SafeCast.toGeneric(NBTMapper.toTagValue(map.get(""String_Node_Str"")),new ByteTag(""String_Node_Str"",(byte)0),ByteTag.class).getBooleanValue();
      if (controllerDataExists) {
        byte[] data=SafeCast.toByteArray(NBTMapper.toTagValue(map.get(""String_Node_Str"")),new byte[0]);
        DatatableMap dataMap=((DataMap)controller.getDataMap()).getRawMap();
        dataMap.decompress(data);
      }
    }
 catch (    Exception error) {
      Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + type.getName(),error);
      return null;
    }
    Region r=w.getRegion((int)Math.floor(pX),(int)Math.floor(pY),(int)Math.floor(pZ),LoadOption.NO_LOAD);
    if (r == null) {
      Spout.getLogger().info(""String_Node_Str"" + (int)Math.floor(pX) + ""String_Node_Str""+ (int)Math.floor(pY)+ ""String_Node_Str""+ (int)Math.floor(pZ));
      return null;
    }
    Transform t=new Transform(new Point(r.getWorld(),pX,pY,pZ),new Quaternion(qX,qY,qZ,qW,false),new Vector3(sX,sY,sZ));
    if (!(controller instanceof PlayerController)) {
      SpoutEntity e=new SpoutEntity((SpoutEngine)Spout.getEngine(),t,controller,view,uid,false);
      e.setObserver(observer);
      return e;
    }
 else {
      SpoutPlayer e=new SpoutPlayer(Name,t,playerSession,(SpoutEngine)Spout.getEngine(),view);
      return e;
    }
  }
 else {
    Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + type.getName());
  }
  return null;
}","private static SpoutEntity loadEntity(World w,CompoundTag tag,String Name,SpoutSession<?> playerSession){
  CompoundMap map=tag.getValue();
  @SuppressWarnings(""String_Node_Str"") byte version=SafeCast.toByte(NBTMapper.toTagValue(map.get(""String_Node_Str"")),(byte)0);
  String name=SafeCast.toString(NBTMapper.toTagValue(map.get(""String_Node_Str"")),""String_Node_Str"");
  ControllerType type=ControllerRegistry.get(name);
  if (type == null) {
    Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + name);
  }
 else   if (type.canCreateController()) {
    Float pX=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),Float.MAX_VALUE);
    Float pY=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),Float.MAX_VALUE);
    Float pZ=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),Float.MAX_VALUE);
    if (pX == Float.MAX_VALUE || pY == Float.MAX_VALUE || pZ == Float.MAX_VALUE) {
      return null;
    }
    float sX=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),1.0F);
    float sY=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),1.0F);
    float sZ=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),1.0F);
    float qX=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),0.0F);
    float qY=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),0.0F);
    float qZ=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),0.0F);
    float qW=SafeCast.toFloat(NBTMapper.toTagValue(map.get(""String_Node_Str"")),1.0F);
    long msb=SafeCast.toLong(NBTMapper.toTagValue(map.get(""String_Node_Str"")),new Random().nextLong());
    long lsb=SafeCast.toLong(NBTMapper.toTagValue(map.get(""String_Node_Str"")),new Random().nextLong());
    UUID uid=new UUID(msb,lsb);
    int view=SafeCast.toInt(NBTMapper.toTagValue(map.get(""String_Node_Str"")),0);
    boolean observer=SafeCast.toGeneric(NBTMapper.toTagValue(map.get(""String_Node_Str"")),new ByteTag(""String_Node_Str"",(byte)0),ByteTag.class).getBooleanValue();
    Controller controller=type.createController();
    try {
      boolean controllerDataExists=SafeCast.toGeneric(NBTMapper.toTagValue(map.get(""String_Node_Str"")),new ByteTag(""String_Node_Str"",(byte)0),ByteTag.class).getBooleanValue();
      if (controllerDataExists) {
        byte[] data=SafeCast.toByteArray(NBTMapper.toTagValue(map.get(""String_Node_Str"")),new byte[0]);
        DatatableMap dataMap=((DataMap)controller.getDataMap()).getRawMap();
        dataMap.decompress(data);
      }
    }
 catch (    Exception error) {
      Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + type.getName(),error);
      return null;
    }
    Region r=w.getRegionFromBlock((int)Math.floor(pX),(int)Math.floor(pY),(int)Math.floor(pZ),LoadOption.NO_LOAD);
    if (r == null) {
      Spout.getLogger().info(""String_Node_Str"" + (int)Math.floor(pX) + ""String_Node_Str""+ (int)Math.floor(pY)+ ""String_Node_Str""+ (int)Math.floor(pZ));
      return null;
    }
    Transform t=new Transform(new Point(r.getWorld(),pX,pY,pZ),new Quaternion(qX,qY,qZ,qW,false),new Vector3(sX,sY,sZ));
    if (!(controller instanceof PlayerController)) {
      SpoutEntity e=new SpoutEntity((SpoutEngine)Spout.getEngine(),t,controller,view,uid,false);
      e.setObserver(observer);
      return e;
    }
 else {
      SpoutPlayer e=new SpoutPlayer(Name,t,playerSession,(SpoutEngine)Spout.getEngine(),view);
      return e;
    }
  }
 else {
    Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + type.getName());
  }
  return null;
}",0.9987428411789356
177366,"public JLineConsole(SpoutEngine engine){
  this.engine=engine;
  setDateFormat(new SimpleDateFormat(""String_Node_Str""));
  try {
    reader=new ConsoleReader();
    writer=new OutputStreamWriter(AnsiConsole.out);
  }
 catch (  IOException e) {
    throw new ExceptionInInitializerError(e);
  }
  @SuppressWarnings(""String_Node_Str"") final Collection<Completor> completors=reader.getCompletors();
  for (  Completor c : new ArrayList<Completor>(completors)) {
    reader.removeCompletor(c);
  }
  Completor[] list=new Completor[]{new SpoutCommandCompletor(engine),new NullCompletor()};
  reader.addCompletor(new ArgumentCompletor(list));
}","public JLineConsole(SpoutEngine engine){
  JansiStyleHandler.INSTANCE.getFormatters();
  this.engine=engine;
  setDateFormat(new SimpleDateFormat(""String_Node_Str""));
  try {
    reader=new ConsoleReader();
    writer=new OutputStreamWriter(AnsiConsole.out);
  }
 catch (  IOException e) {
    throw new ExceptionInInitializerError(e);
  }
  @SuppressWarnings(""String_Node_Str"") final Collection<Completor> completors=reader.getCompletors();
  for (  Completor c : new ArrayList<Completor>(completors)) {
    reader.removeCompletor(c);
  }
  Completor[] list=new Completor[]{new SpoutCommandCompletor(engine),new NullCompletor()};
  reader.addCompletor(new ArgumentCompletor(list));
}",0.9652042360060514
177367,"@Override protected void initImpl(){
  ConsoleCommandThread commandThread=new ConsoleCommandThread();
  commandThread.setDaemon(true);
  commandThread.start();
}","@Override protected void initImpl(){
  ConsoleCommandThread commandThread=new ConsoleCommandThread();
  commandThread.start();
}",0.8858131487889274
177368,"public ConsoleCommandThread(){
  super(""String_Node_Str"");
}","public ConsoleCommandThread(){
  super(""String_Node_Str"");
  setDaemon(true);
}",0.8633093525179856
177369,"@Override public WorldComponent addComponent(Component component){
  Class<? extends Component> clazz=component.getClass();
  if (hasComponent(clazz)) {
    return (WorldComponent)getComponent(clazz);
  }
  components.put(clazz,component);
  component.attachTo(this);
  component.onAttached();
  return (WorldComponent)component;
}","@SuppressWarnings(""String_Node_Str"") @Override public <T extends Component>T addComponent(Component component){
  if (component.attachTo(this)) {
    Class<? extends Component> clazz=component.getClass();
    if (hasComponent(clazz)) {
      return (T)getComponent(clazz);
    }
    components.put(clazz,component);
    component.onAttached();
    return (T)component;
  }
 else {
    return null;
  }
}",0.6076294277929155
177370,"@Override public WorldComponent getComponent(Class<? extends Component> aClass){
  for (  Class<? extends Component> c : components.keySet()) {
    if (aClass.isAssignableFrom(c))     return (WorldComponent)components.get(c);
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public <T extends Component>T getComponent(Class<? extends Component> aClass){
  for (  Class<? extends Component> c : components.keySet()) {
    if (aClass.isAssignableFrom(c))     return (T)components.get(c);
  }
  return null;
}",0.8320610687022901
177371,"@Override public boolean attachTo(ComponentHolder holder){
  if (holder instanceof Entity) {
    super.attachTo(holder);
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean attachTo(ComponentHolder holder){
  if (holder instanceof Entity) {
    return super.attachTo(holder);
  }
 else {
    return false;
  }
}",0.9285714285714286
177372,"@Override public void attachTo(ComponentHolder<?> holder){
  this.holder=holder;
}","@Override public boolean attachTo(ComponentHolder holder){
  this.holder=holder;
  return true;
}",0.8491620111731844
177373,"@Override public ComponentHolder<?> getHolder(){
  return holder;
}","@Override public ComponentHolder getHolder(){
  return holder;
}",0.9770992366412212
177374,"@SuppressWarnings(""String_Node_Str"") @Override public T addComponent(Component component){
  Class<? extends Component> clazz=component.getClass();
  if (hasComponent(clazz)) {
    return (T)getComponent(clazz);
  }
  components.put(clazz,component);
  component.attachTo(this);
  component.onAttached();
  return (T)component;
}","@SuppressWarnings(""String_Node_Str"") @Override public <T extends Component>T addComponent(Component component){
  if (component.attachTo(this)) {
    Class<? extends Component> clazz=component.getClass();
    if (hasComponent(clazz)) {
      return (T)getComponent(clazz);
    }
    components.put(clazz,component);
    component.onAttached();
    return (T)component;
  }
 else {
    return null;
  }
}",0.7377049180327869
177375,"@SuppressWarnings(""String_Node_Str"") @Override public T getComponent(Class<? extends Component> aClass){
  for (  Class<? extends Component> c : components.keySet()) {
    if (aClass.isAssignableFrom(c))     return (T)components.get(c);
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public <T extends Component>T getComponent(Class<? extends Component> aClass){
  for (  Class<? extends Component> c : components.keySet()) {
    if (aClass.isAssignableFrom(c))     return (T)components.get(c);
  }
  return null;
}",0.9607476635514018
177376,"/** 
 * Attaches to a component holder.
 * @param holder The component holder to attach to
 */
public void attachTo(ComponentHolder<?> holder);","/** 
 * Attaches to a component holder.
 * @param holder The component holder to attach to
 */
public boolean attachTo(ComponentHolder holder);",0.958041958041958
177377,"/** 
 * Gets the component holder holding this component.
 * @return the component holder
 */
public ComponentHolder<?> getHolder();","/** 
 * Gets the component holder holding this component.
 * @return the component holder
 */
public ComponentHolder getHolder();",0.9885057471264368
177378,"/** 
 * Adds a new component to the holder.  If the holder already contains a component of that type, then a new component is not constructed, and the one already attached is returned
 * @param component the component to be added
 * @return The component created, or the one already attached
 */
public T addComponent(Component component);","/** 
 * Adds a new component to the holder.  If the holder already contains a component of that type, then a new component is not constructed, and the one already attached is returned
 * @param component the component to be added
 * @return The component created, or the one already attached
 */
public <T extends Component>T addComponent(Component component);",0.9699570815450644
177379,"/** 
 * Returns the first component that is assignable from the given class, or null if it doesn't exist
 * @param component the type of component to get
 * @return The component instance, or null if it doesn't exist
 */
public T getComponent(Class<? extends Component> component);","/** 
 * Returns the first component that is assignable from the given class, or null if it doesn't exist
 * @param component the type of component to get
 * @return The component instance, or null if it doesn't exist
 */
public <T extends Component>T getComponent(Class<? extends Component> component);",0.9639794168096056
177380,"public void render(float dt){
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  Vector3 currentPlayerPos=new Vector3(activePlayer.getTransform().getPosition().getBlockX(),activePlayer.getTransform().getPosition().getBlockY(),activePlayer.getTransform().getPosition().getBlockZ());
  activeCamera=new CameraComponent(MathHelper.createPerspective(75,aspectRatio,0.001f,1000),MathHelper.createLookAt(currentPlayerPos,currentPlayerPos.add(activePlayer.getTransform().copy().forwardVector().normalize().add(5,5,5)),Vector3.UP));
  activeCamera.getFrustum().update(activeCamera.getProjection(),activeCamera.getView());
  Transform loc=new Transform(new Point(null,0f,0f,0f),Quaternion.IDENTITY,Vector3.ONE);
  mat.getShader().setUniform(""String_Node_Str"",activeCamera.getView());
  mat.getShader().setUniform(""String_Node_Str"",activeCamera.getProjection());
  mat.getShader().setUniform(""String_Node_Str"",loc.toMatrix());
  renderer.draw(mat);
}","public void render(float dt){
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  Vector3 currentPlayerPos=new Vector3(activePlayer.getTransform().getPosition().getBlockX(),activePlayer.getTransform().getPosition().getBlockY(),activePlayer.getTransform().getPosition().getBlockZ());
  activeCamera=new CameraComponent(MathHelper.createPerspective(75,aspectRatio,0.001f,1000),MathHelper.createLookAt(currentPlayerPos,currentPlayerPos.add(activePlayer.getTransform().getTransform().forwardVector().normalize().add(5,5,5)),Vector3.UP));
  activeCamera.getFrustum().update(activeCamera.getProjection(),activeCamera.getView());
  Transform loc=new Transform(new Point(null,0f,0f,0f),Quaternion.IDENTITY,Vector3.ONE);
  mat.getShader().setUniform(""String_Node_Str"",activeCamera.getView());
  mat.getShader().setUniform(""String_Node_Str"",activeCamera.getProjection());
  mat.getShader().setUniform(""String_Node_Str"",loc.toMatrix());
  renderer.draw(mat);
}",0.9915700737618546
177381,"@Override protected void removeObserver(){
  getNetworkSynchronizer().onDeath();
}","@Override protected void removeObserver(){
  getNetworkSynchronizer().onRemoved();
}",0.9397590361445785
177382,"@DelayedWrite public boolean connect(SpoutSession<?> session,Transform newPosition){
  if (!onlineLive.compareAndSet(false,true)) {
    return false;
  }
  if (newPosition != null) {
    setTransform(newPosition);
  }
  final Transform transform=getTransform();
  if (newPosition != null && transform != null && !this.isSpawned()) {
    setupInitialChunk(transform);
  }
  sessionLive.set(session);
  copySnapshot();
  justSpawned=true;
  return true;
}","@DelayedWrite public boolean connect(SpoutSession<?> session,Transform newPosition){
  if (!onlineLive.compareAndSet(false,true)) {
    return false;
  }
  if (newPosition != null) {
    getTransform().setTransform(newPosition);
  }
  final Transform transform=getTransform().copy();
  if (newPosition != null && transform != null && !this.isSpawned()) {
    setupInitialChunk(transform);
  }
  sessionLive.set(session);
  copySnapshot();
  justSpawned=true;
  return true;
}",0.976293103448276
177383,"@Override public void sendMessage(SendMode sendMode,Protocol protocol,Message... messages){
  if (sendMode.canSendToSelf() && this.getSession().getProtocol().equals(protocol)) {
    getSession().sendAll(false,messages);
  }
}","@Override public boolean sendMessage(ChatArguments message){
  return sendRawMessage(message);
}",0.4361370716510903
177384,"public void dispose(PlayerLeaveEvent leaveEvent){
  SpoutPlayer player;
  if ((player=this.player.getAndSet(null)) != null) {
    if (!leaveEvent.hasBeenCalled()) {
      getEngine().getEventManager().callEvent(leaveEvent);
    }
    ChatArguments text=leaveEvent.getMessage();
    if (text != null && text.getArguments().size() > 0) {
      getEngine().broadcastMessage(text);
    }
    PlayerSaveEvent saveEvent=getEngine().getEventManager().callEvent(new PlayerSaveEvent(player));
    if (!saveEvent.isSaved()) {
    }
    try {
      player.kill();
      player.disconnect();
    }
 catch (    Exception ignore) {
    }
  }
}","public void dispose(PlayerLeaveEvent leaveEvent){
  SpoutPlayer player;
  if ((player=this.player.getAndSet(null)) != null) {
    if (!leaveEvent.hasBeenCalled()) {
      getEngine().getEventManager().callEvent(leaveEvent);
    }
    ChatArguments text=leaveEvent.getMessage();
    if (text != null && text.getArguments().size() > 0) {
      getEngine().broadcastMessage(text);
    }
    PlayerSaveEvent saveEvent=getEngine().getEventManager().callEvent(new PlayerSaveEvent(player));
    if (!saveEvent.isSaved()) {
    }
    try {
      player.remove();
      player.disconnect();
    }
 catch (    Exception ignore) {
    }
  }
}",0.992063492063492
177385,"@Override public void handleClient(Session session,AddEntityMessage message){
  if (!session.hasPlayer()) {
    return;
  }
  System.out.println(""String_Node_Str"" + message.getEntityId() + ""String_Node_Str""+ message.getType().getName());
  Player player=session.getPlayer();
  Entity newEntity;
  if (message.getEntityId() == session.getDataMap().get(SpoutProtocol.PLAYER_ENTITY_ID)) {
    newEntity=player;
  }
 else {
    newEntity=session.getEngine().getDefaultWorld().createEntity(message.getTransform().getPosition(),null);
  }
  Controller controller=message.getType().createController();
  if (controller == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + message.getType().getName() + ""String_Node_Str"");
  }
  newEntity.setController(controller);
  newEntity.setTransform(message.getTransform());
  ((Client)session.getEngine()).getDefaultWorld().spawnEntity(newEntity);
}","@Override public void handleClient(Session session,AddEntityMessage message){
  if (!session.hasPlayer()) {
    return;
  }
  System.out.println(""String_Node_Str"" + message.getEntityId() + ""String_Node_Str""+ message.getType().getName());
  Player player=session.getPlayer();
  Entity newEntity;
  if (message.getEntityId() == session.getDataMap().get(SpoutProtocol.PLAYER_ENTITY_ID)) {
    newEntity=player;
  }
 else {
    newEntity=session.getEngine().getDefaultWorld().createEntity(message.getTransform().getPosition());
  }
  newEntity.getTransform().setTransform(message.getTransform());
  ((Client)session.getEngine()).getDefaultWorld().spawnEntity(newEntity);
}",0.6683673469387755
177386,"@Override public void handleClient(Session session,RemoveEntityMessage message){
  if (!session.hasPlayer()) {
    return;
  }
  Entity entity=session.getPlayer().getWorld().getEntity(message.getEntityId());
  if (entity != null) {
    entity.kill();
  }
}","@Override public void handleClient(Session session,RemoveEntityMessage message){
  if (!session.hasPlayer()) {
    return;
  }
  Entity entity=session.getPlayer().getWorld().getEntity(message.getEntityId());
  if (entity != null) {
    entity.remove();
  }
}",0.980544747081712
177387,"/** 
 * Removes a chunk from the region and indicates if the region is empty
 * @param c the chunk to remove
 * @return true if the region is now empty
 */
public boolean removeChunk(Chunk c){
  TickStage.checkStage(TickStage.SNAPSHOT,executionThread);
  if (c.getRegion() != this) {
    return false;
  }
  AtomicReference<SpoutChunk> current=chunks[c.getX() & CHUNKS.MASK][c.getY() & CHUNKS.MASK][c.getZ() & CHUNKS.MASK];
  SpoutChunk currentChunk=current.get();
  if (currentChunk != c) {
    return false;
  }
  boolean success=current.compareAndSet(currentChunk,null);
  if (success) {
    int num=numberActiveChunks.decrementAndGet();
    for (    Entity e : currentChunk.getLiveEntities()) {
      e.kill();
    }
    currentChunk.setUnloaded();
    occupiedChunksQueue.remove(currentChunk);
    occupiedChunks.remove(currentChunk);
    populationQueue.remove(currentChunk);
    dirtyChunks.remove(currentChunk);
    removeDynamicBlockUpdates(currentChunk);
    if (num == 0) {
      return true;
    }
 else     if (num < 0) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  return false;
}","/** 
 * Removes a chunk from the region and indicates if the region is empty
 * @param c the chunk to remove
 * @return true if the region is now empty
 */
public boolean removeChunk(Chunk c){
  TickStage.checkStage(TickStage.SNAPSHOT,executionThread);
  if (c.getRegion() != this) {
    return false;
  }
  AtomicReference<SpoutChunk> current=chunks[c.getX() & CHUNKS.MASK][c.getY() & CHUNKS.MASK][c.getZ() & CHUNKS.MASK];
  SpoutChunk currentChunk=current.get();
  if (currentChunk != c) {
    return false;
  }
  boolean success=current.compareAndSet(currentChunk,null);
  if (success) {
    int num=numberActiveChunks.decrementAndGet();
    for (    Entity e : currentChunk.getLiveEntities()) {
      e.remove();
    }
    currentChunk.setUnloaded();
    occupiedChunksQueue.remove(currentChunk);
    occupiedChunks.remove(currentChunk);
    populationQueue.remove(currentChunk);
    dirtyChunks.remove(currentChunk);
    removeDynamicBlockUpdates(currentChunk);
    if (num == 0) {
      return true;
    }
 else     if (num < 0) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  return false;
}",0.9955396966993756
177388,"@Override public void setBlockController(int x,int y,int z,BlockController controller){
  Vector3 pos=new Vector3(x,y,z);
  Entity entity=this.entityManager.getBlockEntities().get(pos);
  if (entity != null) {
    if (controller != null) {
      entity.setController(controller);
    }
 else {
      entity.kill();
    }
  }
 else   if (controller != null) {
    this.getWorld().createAndSpawnEntity(new Point(pos,getWorld()),controller);
  }
}","@Override public void setBlockController(int x,int y,int z,BlockController controller){
  Vector3 pos=new Vector3(x,y,z);
  Entity entity=this.entityManager.getBlockEntities().get(pos);
  if (entity != null) {
    if (controller != null) {
      entity.setController(controller);
    }
 else {
      entity.remove();
    }
  }
 else   if (controller != null) {
    this.getWorld().createAndSpawnEntity(new Point(pos,getWorld()),controller);
  }
}",0.9887640449438202
177389,"public void startTickRun(int stage,long delta){
  boolean visibleToPlayers=this.entityManager.getPlayers().size() > 0;
  if (!visibleToPlayers) {
    int bx=getBlockX();
    int by=getBlockY();
    int bz=getBlockZ();
    int half=BLOCKS.SIZE / 2;
    Point center=new Point(getWorld(),bx + half,by + half,bz + half);
    visibleToPlayers=getWorld().getNearbyPlayers(center,BLOCKS.SIZE).size() > 0;
  }
switch (stage) {
case 0:
{
      taskManager.heartbeat(delta);
      float dt=delta / 1000.f;
      for (      SpoutEntity ent : entityManager.getAll()) {
        try {
          if (visibleToPlayers || (ent.getController() != null && isImportant(ent.getController()))) {
            ent.tick(dt);
          }
        }
 catch (        Exception e) {
          Spout.getEngine().getLogger().severe(""String_Node_Str"" + ent.toString());
          e.printStackTrace();
        }
      }
synchronized (lightDirtyChunks) {
        if (!lightDirtyChunks.isEmpty()) {
          int key;
          int x, y, z;
          TIntIterator iter=lightDirtyChunks.iterator();
          while (iter.hasNext()) {
            key=iter.next();
            x=TByteTripleHashSet.key1(key);
            y=TByteTripleHashSet.key2(key);
            z=TByteTripleHashSet.key3(key);
            SpoutChunk chunk=this.getChunk(x,y,z,LoadOption.NO_LOAD);
            if (chunk == null || !chunk.isLoaded()) {
              iter.remove();
              continue;
            }
            if (chunk.lightingCounter.incrementAndGet() > LIGHT_SEND_TICK_DELAY) {
              chunk.lightingCounter.set(-1);
              if (SpoutConfiguration.LIVE_LIGHTING.getBoolean()) {
                chunk.setLightDirty(true);
              }
              iter.remove();
            }
          }
        }
      }
      for (int i=0; i < POPULATE_PER_TICK; i++) {
        SpoutChunk toPopulate=populationQueue.poll();
        if (toPopulate == null) {
          break;
        }
        toPopulate.setNotQueuedForPopulation();
        if (toPopulate.isLoaded()) {
          toPopulate.populate();
        }
 else {
          i--;
        }
      }
      Chunk toUnload=unloadQueue.poll();
      if (toUnload != null) {
        boolean do_unload=true;
        if (ChunkUnloadEvent.getHandlerList().getRegisteredListeners().length > 0) {
          ChunkUnloadEvent event=Spout.getEngine().getEventManager().callEvent(new ChunkUnloadEvent(toUnload));
          if (event.isCancelled()) {
            do_unload=false;
          }
        }
        if (do_unload) {
          toUnload.unload(true);
        }
      }
      break;
    }
case 1:
{
    break;
  }
default :
{
  throw new IllegalStateException(""String_Node_Str"");
}
}
}","public void startTickRun(int stage,long delta){
  boolean visibleToPlayers=this.entityManager.getPlayers().size() > 0;
  if (!visibleToPlayers) {
    int bx=getBlockX();
    int by=getBlockY();
    int bz=getBlockZ();
    int half=BLOCKS.SIZE / 2;
    Point center=new Point(getWorld(),bx + half,by + half,bz + half);
    visibleToPlayers=getWorld().getNearbyPlayers(center,BLOCKS.SIZE).size() > 0;
  }
switch (stage) {
case 0:
{
      taskManager.heartbeat(delta);
      float dt=delta / 1000.f;
      for (      SpoutEntity ent : entityManager.getAll()) {
        try {
          if (visibleToPlayers) {
            ent.tick(dt);
          }
        }
 catch (        Exception e) {
          Spout.getEngine().getLogger().severe(""String_Node_Str"" + ent.toString());
          e.printStackTrace();
        }
      }
synchronized (lightDirtyChunks) {
        if (!lightDirtyChunks.isEmpty()) {
          int key;
          int x, y, z;
          TIntIterator iter=lightDirtyChunks.iterator();
          while (iter.hasNext()) {
            key=iter.next();
            x=TByteTripleHashSet.key1(key);
            y=TByteTripleHashSet.key2(key);
            z=TByteTripleHashSet.key3(key);
            SpoutChunk chunk=this.getChunk(x,y,z,LoadOption.NO_LOAD);
            if (chunk == null || !chunk.isLoaded()) {
              iter.remove();
              continue;
            }
            if (chunk.lightingCounter.incrementAndGet() > LIGHT_SEND_TICK_DELAY) {
              chunk.lightingCounter.set(-1);
              if (SpoutConfiguration.LIVE_LIGHTING.getBoolean()) {
                chunk.setLightDirty(true);
              }
              iter.remove();
            }
          }
        }
      }
      for (int i=0; i < POPULATE_PER_TICK; i++) {
        SpoutChunk toPopulate=populationQueue.poll();
        if (toPopulate == null) {
          break;
        }
        toPopulate.setNotQueuedForPopulation();
        if (toPopulate.isLoaded()) {
          toPopulate.populate();
        }
 else {
          i--;
        }
      }
      Chunk toUnload=unloadQueue.poll();
      if (toUnload != null) {
        boolean do_unload=true;
        if (ChunkUnloadEvent.getHandlerList().getRegisteredListeners().length > 0) {
          ChunkUnloadEvent event=Spout.getEngine().getEventManager().callEvent(new ChunkUnloadEvent(toUnload));
          if (event.isCancelled()) {
            do_unload=false;
          }
        }
        if (do_unload) {
          toUnload.unload(true);
        }
      }
      break;
    }
case 1:
{
    break;
  }
default :
{
  throw new IllegalStateException(""String_Node_Str"");
}
}
}",0.9870080964036904
177390,"public void preSnapshotRun(){
  entityManager.preSnapshotRun();
  SpoutChunk spoutChunk;
  while ((spoutChunk=dirtyChunks.poll()) != null) {
    spoutChunk.setNotDirtyQueued();
    if (!spoutChunk.isLoaded()) {
      continue;
    }
    if (spoutChunk.isPopulated() && spoutChunk.isDirty()) {
      spoutChunk.setRenderDirty();
      for (      Entity entity : getPlayers()) {
        syncChunkToPlayers(spoutChunk,entity);
      }
      processChunkUpdatedEvent(spoutChunk);
      spoutChunk.resetDirtyArrays();
      spoutChunk.setLightDirty(false);
    }
  }
  SpoutChunkSnapshotFuture snapshotFuture;
  while ((snapshotFuture=snapshotQueue.poll()) != null) {
    snapshotFuture.run();
  }
  Iterator<SpoutChunk> itr=occupiedChunks.iterator();
  int cx, cy, cz;
  entityManager.syncEntities();
  while (itr.hasNext()) {
    SpoutChunk c=itr.next();
    cx=c.getX() & CHUNKS.MASK;
    cy=c.getY() & CHUNKS.MASK;
    cz=c.getZ() & CHUNKS.MASK;
    if (c != getChunk(cx,cy,cz,LoadOption.NO_LOAD)) {
      itr.remove();
    }
  }
}","public void preSnapshotRun(){
  entityManager.preSnapshotRun();
  SpoutChunk spoutChunk;
  while ((spoutChunk=dirtyChunks.poll()) != null) {
    spoutChunk.setNotDirtyQueued();
    if (!spoutChunk.isLoaded()) {
      continue;
    }
    if (spoutChunk.isPopulated() && spoutChunk.isDirty()) {
      spoutChunk.setRenderDirty();
      for (      Player entity : getPlayers()) {
        syncChunkToPlayers(spoutChunk,entity);
      }
      processChunkUpdatedEvent(spoutChunk);
      spoutChunk.resetDirtyArrays();
      spoutChunk.setLightDirty(false);
    }
  }
  SpoutChunkSnapshotFuture snapshotFuture;
  while ((snapshotFuture=snapshotQueue.poll()) != null) {
    snapshotFuture.run();
  }
  Iterator<SpoutChunk> itr=occupiedChunks.iterator();
  int cx, cy, cz;
  entityManager.syncEntities();
  while (itr.hasNext()) {
    SpoutChunk c=itr.next();
    cx=c.getX() & CHUNKS.MASK;
    cy=c.getY() & CHUNKS.MASK;
    cz=c.getZ() & CHUNKS.MASK;
    if (c != getChunk(cx,cy,cz,LoadOption.NO_LOAD)) {
      itr.remove();
    }
  }
}",0.9941747572815534
177391,"private void syncChunkToPlayers(SpoutChunk chunk,Entity entity){
  SpoutPlayer player=(SpoutPlayer)entity.getController().getParent();
  if (player.isOnline()) {
    NetworkSynchronizer synchronizer=player.getNetworkSynchronizer();
    if (!chunk.isDirtyOverflow() && !chunk.isLightDirty()) {
      for (int i=0; true; i++) {
        Vector3 block=chunk.getDirtyBlock(i);
        if (block == null) {
          break;
        }
        try {
          synchronizer.updateBlock(chunk,(int)block.getX(),(int)block.getY(),(int)block.getZ());
        }
 catch (        Exception e) {
          Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + player.getName());
        }
      }
    }
 else {
      synchronizer.sendChunk(chunk);
    }
  }
}","private void syncChunkToPlayers(SpoutChunk chunk,Player player){
  if (player.isOnline()) {
    NetworkSynchronizer synchronizer=player.getNetworkSynchronizer();
    if (!chunk.isDirtyOverflow() && !chunk.isLightDirty()) {
      for (int i=0; true; i++) {
        Vector3 block=chunk.getDirtyBlock(i);
        if (block == null) {
          break;
        }
        try {
          synchronizer.updateBlock(chunk,(int)block.getX(),(int)block.getY(),(int)block.getZ());
        }
 catch (        Exception e) {
          Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + player.getName());
        }
      }
    }
 else {
      synchronizer.sendChunk(chunk);
    }
  }
}",0.9486823855755896
177392,"@Override @LiveRead public SpoutChunk getChunk(int x,int y,int z,LoadOption loadopt){
  x&=CHUNKS.MASK;
  y&=CHUNKS.MASK;
  z&=CHUNKS.MASK;
  final SpoutChunk chunk=chunks[x][y][z].get();
  if (chunk != null) {
    if (loadopt.loadIfNeeded()) {
      if (!chunk.cancelUnload()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
    return chunk;
  }
  SpoutChunk newChunk=null;
  boolean generated=false;
  final AtomicReference<SpoutChunk> chunkReference=chunks[x][y][z];
  ChunkDataForRegion dataForRegion=null;
  if (loadopt.loadIfNeeded() && this.inputStreamExists(x,y,z)) {
    dataForRegion=new ChunkDataForRegion();
    newChunk=WorldFiles.loadChunk(this,x,y,z,this.getChunkInputStream(x,y,z),dataForRegion);
  }
  if (loadopt.generateIfNeeded() && newChunk == null) {
    newChunk=generateChunk(x,y,z);
    generated=true;
  }
  if (newChunk == null) {
    return null;
  }
  while (true) {
    if (chunkReference.compareAndSet(null,newChunk)) {
      newChunk.notifyColumn();
      numberActiveChunks.incrementAndGet();
      if (dataForRegion != null) {
        for (        SpoutEntity entity : dataForRegion.loadedEntities) {
          entity.setupInitialChunk(entity.getTransform());
          addEntity(entity);
        }
        dynamicBlockTree.addDynamicBlockUpdates(dataForRegion.loadedUpdates);
      }
      occupiedChunksQueue.add(newChunk);
      Spout.getEventManager().callDelayedEvent(new ChunkLoadEvent(newChunk,generated));
      return newChunk;
    }
    newChunk.setUnloadedUnchecked();
    SpoutChunk oldChunk=chunkReference.get();
    if (oldChunk != null) {
      if (loadopt.loadIfNeeded()) {
        if (!oldChunk.cancelUnload()) {
          throw new IllegalStateException(""String_Node_Str"");
        }
      }
      return oldChunk;
    }
  }
}","@Override @LiveRead public SpoutChunk getChunk(int x,int y,int z,LoadOption loadopt){
  x&=CHUNKS.MASK;
  y&=CHUNKS.MASK;
  z&=CHUNKS.MASK;
  final SpoutChunk chunk=chunks[x][y][z].get();
  if (chunk != null) {
    if (loadopt.loadIfNeeded()) {
      if (!chunk.cancelUnload()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
    return chunk;
  }
  SpoutChunk newChunk=null;
  boolean generated=false;
  final AtomicReference<SpoutChunk> chunkReference=chunks[x][y][z];
  ChunkDataForRegion dataForRegion=null;
  if (loadopt.loadIfNeeded() && this.inputStreamExists(x,y,z)) {
    dataForRegion=new ChunkDataForRegion();
    newChunk=WorldFiles.loadChunk(this,x,y,z,this.getChunkInputStream(x,y,z),dataForRegion);
  }
  if (loadopt.generateIfNeeded() && newChunk == null) {
    newChunk=generateChunk(x,y,z);
    generated=true;
  }
  if (newChunk == null) {
    return null;
  }
  while (true) {
    if (chunkReference.compareAndSet(null,newChunk)) {
      newChunk.notifyColumn();
      numberActiveChunks.incrementAndGet();
      if (dataForRegion != null) {
        for (        SpoutEntity entity : dataForRegion.loadedEntities) {
          entity.setupInitialChunk(entity.getTransform().getTransform());
          addEntity(entity);
        }
        dynamicBlockTree.addDynamicBlockUpdates(dataForRegion.loadedUpdates);
      }
      occupiedChunksQueue.add(newChunk);
      Spout.getEventManager().callDelayedEvent(new ChunkLoadEvent(newChunk,generated));
      return newChunk;
    }
    newChunk.setUnloadedUnchecked();
    SpoutChunk oldChunk=chunkReference.get();
    if (oldChunk != null) {
      if (loadopt.loadIfNeeded()) {
        if (!oldChunk.cancelUnload()) {
          throw new IllegalStateException(""String_Node_Str"");
        }
      }
      return oldChunk;
    }
  }
}",0.9958666299255994
177393,"private void doPhysics(List<AsyncExecutor> executors) throws InterruptedException {
  int passStartUpdates=updates.get() - 1;
  int startUpdates=updates.get();
  while (passStartUpdates < updates.get() && updates.get() < startUpdates + UPDATE_THRESHOLD) {
    passStartUpdates=updates.get();
    for (int sequence=-1; sequence < 8 && updates.get() < startUpdates + UPDATE_THRESHOLD; sequence++) {
      if (sequence == -1) {
        TickStage.setStage(TickStage.PHYSICS);
      }
 else {
        TickStage.setStage(TickStage.GLOBAL_PHYSICS);
      }
      for (      AsyncExecutor e : executors) {
        if (!e.doPhysics(sequence)) {
          throw new IllegalStateException(""String_Node_Str"");
        }
      }
      boolean joined=false;
      while (!joined) {
        try {
          AsyncExecutorUtils.pulseJoinAll(executors,(PULSE_EVERY << 4));
          joined=true;
        }
 catch (        TimeoutException e) {
          if (((SpoutEngine)Spout.getEngine()).isSetupComplete()) {
            logLongDurationTick(""String_Node_Str"",executors);
          }
        }
      }
    }
  }
}","private void doPhysics(List<AsyncExecutor> executors) throws InterruptedException {
  int passStartUpdates=updates.get() - 1;
  int startUpdates=updates.get();
  while (passStartUpdates < updates.get() && updates.get() < startUpdates + UPDATE_THRESHOLD) {
    passStartUpdates=updates.get();
    for (int sequence=-1; sequence < 27 && updates.get() < startUpdates + UPDATE_THRESHOLD; sequence++) {
      if (sequence == -1) {
        TickStage.setStage(TickStage.PHYSICS);
      }
 else {
        TickStage.setStage(TickStage.GLOBAL_PHYSICS);
      }
      for (      AsyncExecutor e : executors) {
        if (!e.doPhysics(sequence)) {
          throw new IllegalStateException(""String_Node_Str"");
        }
      }
      boolean joined=false;
      while (!joined) {
        try {
          AsyncExecutorUtils.pulseJoinAll(executors,(PULSE_EVERY << 4));
          joined=true;
        }
 catch (        TimeoutException e) {
          if (((SpoutEngine)Spout.getEngine()).isSetupComplete()) {
            logLongDurationTick(""String_Node_Str"",executors);
          }
        }
      }
    }
  }
}",0.9986332574031892
177394,"private void updateObserver(){
  if (this instanceof Player) {
    return;
  }
  final int viewDistance=getViewDistance() >> Chunk.BLOCKS.BITS;
  World w=getWorld();
  int cx=chunkLive.get().getX();
  int cy=chunkLive.get().getY();
  int cz=chunkLive.get().getZ();
  HashSet<SpoutChunk> observing=new HashSet<SpoutChunk>((viewDistance * viewDistance * viewDistance* 3) / 2);
  OutwardIterator oi=new OutwardIterator(cx,cy,cz,viewDistance);
  while (oi.hasNext()) {
    IntVector3 v=oi.next();
    Chunk chunk=w.getChunk(v.getX(),v.getY(),v.getZ(),LoadOption.LOAD_GEN);
    chunk.refreshObserver(this);
    observing.add((SpoutChunk)chunk);
  }
  observingChunks.removeAll(observing);
  for (  SpoutChunk chunk : observingChunks) {
    if (chunk.isLoaded()) {
      chunk.removeObserver(this);
    }
  }
  observingChunks.clear();
  observingChunks.addAll(observing);
}","protected void updateObserver(){
  final int viewDistance=getViewDistance() >> Chunk.BLOCKS.BITS;
  World w=getWorld();
  int cx=chunkLive.get().getX();
  int cy=chunkLive.get().getY();
  int cz=chunkLive.get().getZ();
  HashSet<SpoutChunk> observing=new HashSet<SpoutChunk>((viewDistance * viewDistance * viewDistance* 3) / 2);
  OutwardIterator oi=new OutwardIterator(cx,cy,cz,viewDistance);
  while (oi.hasNext()) {
    IntVector3 v=oi.next();
    Chunk chunk=w.getChunk(v.getX(),v.getY(),v.getZ(),LoadOption.LOAD_GEN);
    chunk.refreshObserver(this);
    observing.add((SpoutChunk)chunk);
  }
  observingChunks.removeAll(observing);
  for (  SpoutChunk chunk : observingChunks) {
    if (chunk.isLoaded()) {
      chunk.removeObserver(this);
    }
  }
  observingChunks.clear();
  observingChunks.addAll(observing);
}",0.9644970414201184
177395,"@Override public void finalizeRun(){
  Transform t=transformLive.getAndSet(null);
  if (t != null) {
    transform.set(t);
  }
  if (entityManager != null) {
    if (entityManager != entityManagerLive.get()) {
      if (entityManager.getRegion() != null) {
        entityManager.getRegion().removeEntity(this);
      }
 else {
        entityManager.deallocate(this);
      }
    }
  }
  if (entityManagerLive.get() != null) {
    if (entityManager != entityManagerLive.get()) {
      entityManagerLive.get().allocate(this);
    }
  }
  if (controller != controllerLive.get()) {
    if (controller != null && controllerLive.get() == null) {
      if (!isDead())       throw new IllegalStateException(""String_Node_Str"");
      controller.onDeath();
      if (controller instanceof PlayerController) {
        Player p=((PlayerController)controller).getParent();
        if (p != null && p.isOnline()) {
          p.getNetworkSynchronizer().onDeath();
        }
      }
    }
 else     if (controller != null && controllerLive.get() != null) {
      controller.onDeath();
      if (controller instanceof PlayerController) {
        Player p=((PlayerController)controller).getParent();
        if (p != null && p.isOnline()) {
          p.getNetworkSynchronizer().onDeath();
        }
      }
      if (entityManagerLive.get() != null) {
        entityManagerLive.get().allocate(this);
      }
    }
 else     if (controller == null && controllerLive.get() != null) {
      if (!this.justSpawned())       throw new IllegalStateException(""String_Node_Str"");
    }
  }
  if (chunkLive.get() != chunk) {
    if (observer) {
      if (!isDead()) {
        updateObserver();
      }
 else {
        removeObserver();
      }
    }
    if (chunkLive.get() != null) {
      ((SpoutChunk)chunkLive.get()).addEntity(this);
    }
    if (chunk != null && chunk.isLoaded()) {
      ((SpoutChunk)chunk).removeEntity(this);
    }
    if (chunkLive.get() == null) {
      if (chunk != null && chunk.isLoaded()) {
        ((SpoutChunk)chunk).removeEntity(this);
      }
      if (entityManagerLive.get() != null) {
        entityManagerLive.get().deallocate(this);
      }
    }
  }
  if (observerLive.get() != observer) {
    observer=!observer;
    if (observer) {
      updateObserver();
    }
 else {
      removeObserver();
    }
  }
}","@Override public void finalizeRun(){
  Transform t=transformLive.getAndSet(null);
  if (t != null) {
    transform.set(t);
  }
  if (entityManager != null) {
    if (entityManager != entityManagerLive.get()) {
      if (entityManager.getRegion() != null) {
        entityManager.getRegion().removeEntity(this);
      }
 else {
        entityManager.deallocate(this);
      }
    }
  }
  if (entityManagerLive.get() != null) {
    if (entityManager != entityManagerLive.get()) {
      entityManagerLive.get().allocate(this);
    }
  }
  if (controller != controllerLive.get()) {
    if (controller != null && controllerLive.get() == null) {
      if (!isDead())       throw new IllegalStateException(""String_Node_Str"");
      controller.onDeath();
    }
 else     if (controller != null && controllerLive.get() != null) {
      controller.onDeath();
      if (entityManagerLive.get() != null) {
        entityManagerLive.get().allocate(this);
      }
    }
 else     if (controller == null && controllerLive.get() != null) {
      if (!this.justSpawned())       throw new IllegalStateException(""String_Node_Str"");
    }
  }
  if (chunkLive.get() != chunk) {
    if (observer) {
      if (!isDead()) {
        updateObserver();
      }
 else {
        removeObserver();
      }
    }
    if (chunkLive.get() != null) {
      ((SpoutChunk)chunkLive.get()).addEntity(this);
    }
    if (chunk != null && chunk.isLoaded()) {
      ((SpoutChunk)chunk).removeEntity(this);
    }
    if (chunkLive.get() == null) {
      if (chunk != null && chunk.isLoaded()) {
        ((SpoutChunk)chunk).removeEntity(this);
      }
      if (entityManagerLive.get() != null) {
        entityManagerLive.get().deallocate(this);
      }
    }
  }
  if (observerLive.get() != observer) {
    observer=!observer;
    if (observer) {
      updateObserver();
    }
 else {
      removeObserver();
    }
  }
}",0.8600666349357449
177396,"private void removeObserver(){
  if (controllerLive.get() instanceof PlayerController) {
    Player p=((PlayerController)controllerLive.get()).getParent();
    p.getNetworkSynchronizer().onDeath();
    return;
  }
  for (  SpoutChunk chunk : observingChunks) {
    if (chunk.isLoaded()) {
      chunk.removeObserver(this);
    }
  }
  observingChunks.clear();
}","protected void removeObserver(){
  for (  SpoutChunk chunk : observingChunks) {
    if (chunk.isLoaded()) {
      chunk.removeObserver(this);
    }
  }
  observingChunks.clear();
}",0.6469500924214417
177397,"public synchronized boolean clear(){
  map.clear();
  return true;
}","public synchronized boolean clear(){
  map.clear();
  reverseMap.clear();
  return true;
}",0.8607594936708861
177398,"@Override public void channelConnected(ChannelHandlerContext ctx,ChannelStateEvent e){
  Channel c=e.getChannel();
  if (!upstream) {
    try {
      engine.getChannelGroup().add(c);
      Session session=engine.newSession(c);
      engine.getSessionRegistry().add(session);
      setSession(session);
      ctx.setAttachment(session);
      engine.getLogger().info(""String_Node_Str"" + c + ""String_Node_Str"");
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      throw new RuntimeException(""String_Node_Str"",ex);
    }
  }
 else {
    if (engine instanceof Client) {
      engine.getChannelGroup().add(c);
      Session session=engine.newSession(c);
      engine.getSessionRegistry().add(session);
      setSession(session);
      ctx.setAttachment(session);
    }
    engine.getLogger().info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
}","@Override public void channelConnected(ChannelHandlerContext ctx,ChannelStateEvent e){
  Channel c=e.getChannel();
  if (!upstream) {
    try {
      engine.getChannelGroup().add(c);
      Session session=engine.newSession(c);
      engine.getSessionRegistry().add(session);
      setSession(session);
      ctx.setAttachment(session);
      engine.getLogger().info(""String_Node_Str"" + c + ""String_Node_Str"");
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      throw new RuntimeException(""String_Node_Str"",ex);
    }
  }
 else {
    engine.getLogger().info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
}",0.7513513513513513
177399,"protected void worldChanged(World world){
}","protected void worldChanged(World world){
  session.send(false,new WorldChangeMessage(world,((DataMap)world.getDataMap()).getRawMap()));
}",0.4751381215469613
177400,"public void initializeSession(Session session){
  session.setNetworkSynchronizer(new SpoutNetworkSynchronizer(session));
  for (  StringMap map : StringMap.getAll()) {
    session.send(false,new StringMapMessage(map.getId(),StringMapMessage.Action.SET,map.getItems()));
  }
}","public void initializeSession(Session session){
  session.setNetworkSynchronizer(new SpoutNetworkSynchronizer(session));
  session.send(false,new StringMapMessage(StringMapMessage.STRINGMAP_REGISTRATION_MAP,StringMapMessage.Action.SET,StringMap.get(StringMapMessage.STRINGMAP_REGISTRATION_MAP).getItems()));
  for (  StringMap map : StringMap.getAll()) {
    session.send(false,new StringMapMessage(map.getId(),StringMapMessage.Action.SET,map.getItems()));
  }
}",0.7028493894165536
177401,"@Override public ChannelBuffer encode(AddEntityMessage message){
  ChannelBuffer buffer=ChannelBuffers.buffer(8 + ChannelBufferUtils.TRANSFORM_SIZE);
  buffer.writeInt(message.getEntityId());
  buffer.writeInt(message.getType().getId());
  ChannelBufferUtils.writeTransform(buffer,message.getPosition());
  return buffer;
}","@Override public ChannelBuffer encode(AddEntityMessage message){
  ChannelBuffer buffer=ChannelBuffers.buffer(8 + ChannelBufferUtils.UUID_SIZE + ChannelBufferUtils.VECTOR3_SIZE * 2 + ChannelBufferUtils.QUATERNINON_SIZE);
  buffer.writeInt(message.getEntityId());
  buffer.writeInt(message.getType().getId());
  ChannelBufferUtils.writeUUID(buffer,message.getWorldUid());
  ChannelBufferUtils.writeVector3(buffer,message.getPosition());
  ChannelBufferUtils.writeQuaternion(buffer,message.getRotation());
  ChannelBufferUtils.writeVector3(buffer,message.getScale());
  return buffer;
}",0.679162072767365
177402,"@Override public AddEntityMessage decode(ChannelBuffer buffer){
  final int entityId=buffer.readInt();
  final int controllerTypeId=buffer.readInt();
  final Transform position=ChannelBufferUtils.readTransform(buffer);
  return new AddEntityMessage(entityId,ControllerRegistry.get(controllerTypeId),position);
}","@Override public AddEntityMessage decode(ChannelBuffer buffer){
  final int entityId=buffer.readInt();
  final int controllerTypeId=buffer.readInt();
  final UUID worldUid=ChannelBufferUtils.readUUID(buffer);
  final Vector3 position=ChannelBufferUtils.readVector3(buffer);
  final Quaternion rotation=ChannelBufferUtils.readQuaternion(buffer);
  final Vector3 scale=ChannelBufferUtils.readVector3(buffer);
  return new AddEntityMessage(entityId,ControllerRegistry.get(controllerTypeId),worldUid,position,rotation,scale);
}",0.6810551558752997
177403,"@Override public ChannelBuffer encode(EntityPositionMessage message){
  ChannelBuffer buffer=ChannelBuffers.buffer(4 + ChannelBufferUtils.TRANSFORM_SIZE);
  buffer.writeInt(message.getEntityId());
  ChannelBufferUtils.writeTransform(buffer,message.getTransform());
  return buffer;
}","@Override public ChannelBuffer encode(EntityPositionMessage message){
  ChannelBuffer buffer=ChannelBuffers.buffer(4 + ChannelBufferUtils.TRANSFORM_SIZE);
  buffer.writeInt(message.getEntityId());
  ChannelBufferUtils.writeUUID(buffer,message.getWorldUid());
  ChannelBufferUtils.writeVector3(buffer,message.getPosition());
  ChannelBufferUtils.writeQuaternion(buffer,message.getRotation());
  ChannelBufferUtils.writeVector3(buffer,message.getScale());
  return buffer;
}",0.7019867549668874
177404,"@Override public EntityPositionMessage decode(ChannelBuffer buffer){
  final int entityId=buffer.readInt();
  final Transform transform=ChannelBufferUtils.readTransform(buffer);
  return new EntityPositionMessage(entityId,transform);
}","@Override public EntityPositionMessage decode(ChannelBuffer buffer){
  final int entityId=buffer.readInt();
  final UUID worldUid=ChannelBufferUtils.readUUID(buffer);
  final Vector3 position=ChannelBufferUtils.readVector3(buffer);
  final Quaternion rotation=ChannelBufferUtils.readQuaternion(buffer);
  final Vector3 scale=ChannelBufferUtils.readVector3(buffer);
  return new EntityPositionMessage(entityId,worldUid,position,rotation,scale);
}",0.5823529411764706
177405,"@Override public void handleClient(Session session,AddEntityMessage message){
  if (!session.hasPlayer()) {
    return;
  }
  Player player=session.getPlayer();
  Controller controller=message.getType().createController();
  if (controller == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + message.getType().getName() + ""String_Node_Str"");
  }
  Entity newEntity=player.getWorld().createEntity(message.getPosition().getPosition(),controller);
  newEntity.setTransform(message.getPosition());
  player.getWorld().spawnEntity(newEntity);
}","@Override public void handleClient(Session session,AddEntityMessage message){
  if (!session.hasPlayer()) {
    return;
  }
  Player player=session.getPlayer();
  Entity newEntity;
  if (message.getEntityId() == session.getDataMap().get(SpoutProtocol.PLAYER_ENTITY_ID)) {
    newEntity=player;
  }
 else {
    newEntity=session.getEngine().getDefaultWorld().createEntity(message.getTransform().getPosition(),null);
  }
  Controller controller=message.getType().createController();
  if (controller == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + message.getType().getName() + ""String_Node_Str"");
  }
  newEntity.setController(controller);
  newEntity.setTransform(message.getTransform());
  ((Client)session.getEngine()).getDefaultWorld().spawnEntity(newEntity);
}",0.4944154877140729
177406,"@Override public void handle(boolean upstream,Session session,CommandMessage message){
  if (!session.hasPlayer()) {
    return;
  }
  Player player=session.getPlayer();
  String command=session.getEngine().getRootCommand().getChildName(message.getCommand());
  player.processCommand(command,new ChatArguments(message.getArguments()));
}","@Override public void handle(boolean upstream,Session session,CommandMessage message){
  if (!session.hasPlayer()) {
    return;
  }
  Player player=session.getPlayer();
  String command=session.getEngine().getRootCommand().getChildName(message.getCommand());
  if (command == null) {
    player.sendMessage(""String_Node_Str"",message.getCommand());
  }
  player.processCommand(command,new ChatArguments(message.getArguments()));
}",0.8239895697522817
177407,"@Override public void handleClient(Session session,EntityPositionMessage message){
  if (!session.hasPlayer()) {
    return;
  }
  Entity entity=session.getPlayer().getWorld().getEntity(message.getEntityId());
  if (entity != null) {
    entity.setTransform(message.getTransform());
  }
}","@Override public void handleClient(Session session,EntityPositionMessage message){
  if (!session.hasPlayer()) {
    return;
  }
  Entity entity;
  if (message.getEntityId() == session.getDataMap().get(SpoutProtocol.PLAYER_ENTITY_ID)) {
    entity=session.getPlayer();
  }
 else {
    entity=session.getEngine().getDefaultWorld().getEntity(message.getEntityId());
  }
  if (entity != null) {
    entity.setTransform(message.getTransform());
  }
}",0.7302452316076294
177408,"@Override public void handleServer(Session session,LoginMessage message){
  if (!session.hasPlayer()) {
    return;
  }
  session.getEngine().getEventManager().callEvent(new PlayerConnectEvent(session,message.getPlayerName()));
  session.setState(Session.State.GAME);
  session.send(false,new LoginMessage(""String_Node_Str"",session.getPlayer().getId()));
}","@Override public void handleServer(Session session,LoginMessage message){
  session.getEngine().getEventManager().callEvent(new PlayerConnectEvent(session,message.getPlayerName()));
  session.setState(Session.State.GAME);
  session.send(false,new LoginMessage(""String_Node_Str"",session.getPlayer().getId()));
}",0.9309309309309308
177409,"@Override public void handleClient(Session session,WorldChangeMessage message){
  UUID worldUUID=message.getWorldUUID();
}","@Override public void handleClient(Session session,WorldChangeMessage message){
  ((Client)session.getEngine()).worldChanged(message.getWorldName(),message.getWorldUUID(),message.getCompressedData());
}",0.5617283950617284
177410,"public Transform getPosition(){
  return position;
}","public Vector3 getPosition(){
  return pos;
}",0.8247422680412371
177411,"public AddEntityMessage(int entityId,ControllerType type,Transform position){
  this.entityId=entityId;
  this.type=type;
  this.position=position;
}","public AddEntityMessage(int entityId,ControllerType type,UUID worldUid,Vector3 pos,Quaternion rotation,Vector3 scale){
  this.entityId=entityId;
  this.type=type;
  this.worldUid=worldUid;
  this.pos=pos;
  this.rotation=rotation;
  this.scale=scale;
}",0.5685785536159601
177412,"@Override public String toString(){
  return new ToStringBuilder(this,SpoutToStringStyle.INSTANCE).append(""String_Node_Str"",entityId).append(""String_Node_Str"",type).append(""String_Node_Str"",position).toString();
}","@Override public String toString(){
  return new ToStringBuilder(this,SpoutToStringStyle.INSTANCE).append(""String_Node_Str"",entityId).append(""String_Node_Str"",type).append(""String_Node_Str"",worldUid).append(""String_Node_Str"",pos).append(""String_Node_Str"",scale).append(""String_Node_Str"",rotation).toString();
}",0.8107074569789675
177413,"@Override public String toString(){
  return new ToStringBuilder(this,SpoutToStringStyle.INSTANCE).append(""String_Node_Str"",unload).append(""String_Node_Str"",x).append(""String_Node_Str"",y).append(""String_Node_Str"",z).append(""String_Node_Str"",blockIds).append(""String_Node_Str"",blockData).append(""String_Node_Str"",blockLight).append(""String_Node_Str"",skyLight).append(""String_Node_Str"",biomeData).toString();
}","@Override public String toString(){
  return new ToStringBuilder(this,SpoutToStringStyle.INSTANCE).append(""String_Node_Str"",unload).append(""String_Node_Str"",x).append(""String_Node_Str"",y).append(""String_Node_Str"",z).append(""String_Node_Str"",blockIds,false).append(""String_Node_Str"",blockData,false).append(""String_Node_Str"",blockLight,false).append(""String_Node_Str"",skyLight,false).append(""String_Node_Str"",biomeData,false).toString();
}",0.9645390070921984
177414,"public ChunkIterator(){
  for (int dx=0; dx < CHUNKS.SIZE; dx++) {
    for (int dy=0; dy < CHUNKS.SIZE; dy++) {
      for (int dz=0; dz < CHUNKS.SIZE; dz++) {
        next=getChunk(dx,dy,dz,LoadOption.NO_LOAD);
        if (next != null) {
          break;
        }
      }
    }
  }
}","public ChunkIterator(){
  loop:   for (int dx=0; dx < CHUNKS.SIZE; dx++) {
    for (int dy=0; dy < CHUNKS.SIZE; dy++) {
      for (int dz=0; dz < CHUNKS.SIZE; dz++) {
        next=getChunk(dx,dy,dz,LoadOption.NO_LOAD);
        if (next != null) {
          break loop;
        }
      }
    }
  }
}",0.8713550600343053
177415,"@Override public Chunk next(){
  Chunk current=next;
  next=null;
  for (int dx=current.getX(); dx < CHUNKS.SIZE; dx++) {
    for (int dy=current.getY(); dy < CHUNKS.SIZE; dy++) {
      for (int dz=current.getZ(); dz < CHUNKS.SIZE; dz++) {
        next=getChunk(dx,dy,dz,LoadOption.NO_LOAD);
        if (next != null) {
          break;
        }
      }
    }
  }
  return current;
}","@Override public Chunk next(){
  Chunk current=next;
  next=null;
  final int cx=current.getX() & CHUNKS.MASK;
  final int cy=current.getY() & CHUNKS.MASK;
  final int cz=current.getZ() & CHUNKS.MASK;
  for (int dx=cx; dx < CHUNKS.SIZE; dx++) {
    for (int dy=cy; dy < CHUNKS.SIZE; dy++) {
      for (int dz=cz; dz < CHUNKS.SIZE; dz++) {
        next=getChunk(dx,dy,dz,LoadOption.NO_LOAD);
        if (next != null && next != current) {
          return current;
        }
      }
    }
  }
  return current;
}",0.7597765363128491
177416,"public static SpoutChunk loadChunk(SpoutRegion r,int x,int y,int z,InputStream dis,ChunkDataForRegion dataForRegion){
  SpoutChunk chunk=null;
  NBTInputStream is=null;
  try {
    if (dis == null) {
      return chunk;
    }
    is=new NBTInputStream(dis,false);
    CompoundTag chunkTag=(CompoundTag)is.readTag();
    CompoundMap map=chunkTag.getValue();
    int cx=r.getChunkX() + x;
    int cy=r.getChunkY() + y;
    int cz=r.getChunkZ() + z;
    byte populationState=SafeCast.toGeneric(map.get(""String_Node_Str""),new ByteTag(""String_Node_Str"",PopulationState.POPULATED.getId()),ByteTag.class).getValue();
    short[] blocks=SafeCast.toShortArray(NBTMapper.toTagValue(map.get(""String_Node_Str"")),null);
    short[] data=SafeCast.toShortArray(NBTMapper.toTagValue(map.get(""String_Node_Str"")),null);
    byte[] skyLight=SafeCast.toByteArray(NBTMapper.toTagValue(map.get(""String_Node_Str"")),null);
    byte[] blockLight=SafeCast.toByteArray(NBTMapper.toTagValue(map.get(""String_Node_Str"")),null);
    byte[] extraData=SafeCast.toByteArray(NBTMapper.toTagValue(map.get(""String_Node_Str"")),null);
    BiomeManager manager=null;
    if (map.containsKey(""String_Node_Str"")) {
      try {
        String biomeManagerClass=(String)map.get(""String_Node_Str"").getValue();
        byte[] biomes=(byte[])map.get(""String_Node_Str"").getValue();
        @SuppressWarnings(""String_Node_Str"") Class<? extends BiomeManager> clazz=(Class<? extends BiomeManager>)Class.forName(biomeManagerClass);
        Class<?>[] params={int.class,int.class,int.class};
        manager=clazz.getConstructor(params).newInstance(cx,cy,cz);
        manager.deserialize(biomes);
      }
 catch (      Exception e) {
        Spout.getLogger().severe(""String_Node_Str"");
        e.printStackTrace();
      }
    }
    if (manager == null) {
      manager=new EmptyBiomeManager(cx,cy,cz);
    }
    SpoutWorld world=r.getWorld();
    StringMap global=((SpoutEngine)Spout.getEngine()).getEngineItemMap();
    StringMap itemMap=world.getItemMap();
    for (int i=0; i < blocks.length; i++) {
      blocks[i]=(short)itemMap.convertTo(global,blocks[i]);
    }
    DatatableMap extraDataMap=new GenericDatatableMap();
    extraDataMap.decompress(extraData);
    chunk=new FilteredChunk(r.getWorld(),r,cx,cy,cz,PopulationState.byID(populationState),blocks,data,skyLight,blockLight,manager,extraDataMap);
    CompoundMap entityMap=SafeCast.toGeneric(NBTMapper.toTagValue(map.get(""String_Node_Str"")),null,CompoundMap.class);
    loadEntities(r,entityMap,dataForRegion.loadedEntities);
    List<? extends CompoundTag> updateList=checkerListCompoundTag.checkTag(map.get(""String_Node_Str""),null);
    loadDynamicUpdates(updateList,dataForRegion.loadedUpdates);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException ignore) {
      }
    }
  }
  return chunk;
}","public static SpoutChunk loadChunk(SpoutRegion r,int x,int y,int z,InputStream dis,ChunkDataForRegion dataForRegion){
  SpoutChunk chunk=null;
  NBTInputStream is=null;
  try {
    if (dis == null) {
      return chunk;
    }
    is=new NBTInputStream(dis,false);
    CompoundTag chunkTag=(CompoundTag)is.readTag();
    CompoundMap map=chunkTag.getValue();
    int cx=r.getChunkX() + x;
    int cy=r.getChunkY() + y;
    int cz=r.getChunkZ() + z;
    byte populationState=SafeCast.toGeneric(map.get(""String_Node_Str""),new ByteTag(""String_Node_Str"",PopulationState.POPULATED.getId()),ByteTag.class).getValue();
    short[] blocks=SafeCast.toShortArray(NBTMapper.toTagValue(map.get(""String_Node_Str"")),null);
    short[] data=SafeCast.toShortArray(NBTMapper.toTagValue(map.get(""String_Node_Str"")),null);
    byte[] skyLight=SafeCast.toByteArray(NBTMapper.toTagValue(map.get(""String_Node_Str"")),null);
    byte[] blockLight=SafeCast.toByteArray(NBTMapper.toTagValue(map.get(""String_Node_Str"")),null);
    byte[] extraData=SafeCast.toByteArray(NBTMapper.toTagValue(map.get(""String_Node_Str"")),null);
    BiomeManager manager=null;
    if (map.containsKey(""String_Node_Str"")) {
      try {
        String biomeManagerClass=(String)map.get(""String_Node_Str"").getValue();
        byte[] biomes=(byte[])map.get(""String_Node_Str"").getValue();
        @SuppressWarnings(""String_Node_Str"") Class<? extends BiomeManager> clazz=(Class<? extends BiomeManager>)Class.forName(biomeManagerClass);
        Class<?>[] params={int.class,int.class,int.class};
        manager=clazz.getConstructor(params).newInstance(cx,cy,cz);
        manager.deserialize(biomes);
      }
 catch (      Exception e) {
        Spout.getLogger().severe(""String_Node_Str"");
        e.printStackTrace();
      }
    }
    if (manager == null) {
      manager=new EmptyBiomeManager(cx,cy,cz);
    }
    SpoutWorld world=r.getWorld();
    StringMap global=((SpoutEngine)Spout.getEngine()).getEngineItemMap();
    StringMap itemMap=world.getItemMap();
    for (int i=0; i < blocks.length; i++) {
      blocks[i]=(short)itemMap.convertTo(global,blocks[i]);
    }
    DatatableMap extraDataMap=new GenericDatatableMap();
    extraDataMap.decompress(extraData);
    chunk=new FilteredChunk(r.getWorld(),r,cx,cy,cz,PopulationState.byID(populationState),blocks,data,skyLight,blockLight,manager,extraDataMap);
    CompoundMap entityMap=SafeCast.toGeneric(NBTMapper.toTagValue(map.get(""String_Node_Str"")),(CompoundMap)null,CompoundMap.class);
    loadEntities(r,entityMap,dataForRegion.loadedEntities);
    List<? extends CompoundTag> updateList=checkerListCompoundTag.checkTag(map.get(""String_Node_Str""),null);
    loadDynamicUpdates(updateList,dataForRegion.loadedUpdates);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException ignore) {
      }
    }
  }
  return chunk;
}",0.997775876817793
177417,"/** 
 * Checks if the InputStream exists at the given index.
 * @param i the block index
 * @return true if the input stream exists
 */
public boolean inputStreamExists(int i){
  while (true) {
    ByteArrayArray baa=getByteArrayArray();
    if (baa == null) {
      return false;
    }
    try {
      return baa.exists(i);
    }
 catch (    BAAClosedException e) {
      continue;
    }
catch (    IOException e) {
      return false;
    }
  }
}","/** 
 * Checks if the InputStream exists at the given index.
 * @param i the block index
 * @return true if the input stream exists
 */
public boolean inputStreamExists(int i){
  while (true) {
    ByteArrayArray baa=getByteArrayArray();
    if (baa == null) {
      return false;
    }
    if (baa == BAAOpenInProgress.getInstance()) {
      continue;
    }
    try {
      return baa.exists(i);
    }
 catch (    BAAClosedException e) {
      continue;
    }
catch (    IOException e) {
      return false;
    }
  }
}",0.9256198347107438
177418,"/** 
 * Sets the block id, data and auxData for the block at (x, y, z), if the current data matches the expected data.<br>
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @param expectId the expected block id
 * @param expectData the expected block data
 * @param expectAuxData the expected block auxiliary data
 * @param newId the new block id
 * @param newData the new block data
 * @param newAuxData the new block auxiliary data
 * @return true if the block was set
 */
public boolean compareAndSetBlock(int x,int y,int z,short expectId,short expectData,short newId,short newData){
  int index=getIndex(x,y,z);
  int spins=0;
  boolean interrupted=false;
  try {
    while (true) {
      if (spins++ > SPINS) {
        interrupted|=atomicWait();
      }
      checkCompressing();
      short oldBlockId=blockIds.get(index);
      boolean oldReserved=auxStore.isReserved(oldBlockId);
      if (!oldReserved) {
        if (blockIds.get(index) != expectId || expectData != 0) {
          return false;
        }
      }
 else {
        int seq=auxStore.getSequence(oldBlockId);
        short oldId=auxStore.getId(oldBlockId);
        short oldData=auxStore.getData(oldBlockId);
        if (!testSequence(x,y,z,seq)) {
          continue;
        }
        if (oldId != expectId || oldData != expectData) {
          return false;
        }
      }
      if (newData == 0 && !auxStore.isReserved(newId)) {
        if (!blockIds.compareAndSet(index,oldBlockId,newId)) {
          continue;
        }
      }
 else {
        int newIndex=auxStore.add(newId,newData);
        if (!blockIds.compareAndSet(index,oldBlockId,(short)newIndex)) {
          auxStore.remove(newIndex);
          continue;
        }
      }
      if (oldReserved) {
        auxStore.remove(oldBlockId);
      }
      markDirty(x,y,z);
      return true;
    }
  }
  finally {
    atomicNotify();
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
}","/** 
 * Sets the block id, data and auxData for the block at (x, y, z), if the current data matches the expected data.<br>
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @param expectId the expected block id
 * @param expectData the expected block data
 * @param expectAuxData the expected block auxiliary data
 * @param newId the new block id
 * @param newData the new block data
 * @param newAuxData the new block auxiliary data
 * @return true if the block was set
 */
public boolean compareAndSetBlock(int x,int y,int z,short expectId,short expectData,short newId,short newData){
  int index=getIndex(x,y,z);
  int spins=0;
  boolean interrupted=false;
  try {
    while (true) {
      if (spins++ > SPINS) {
        interrupted|=atomicWait(index);
      }
      checkCompressing();
      short oldBlockId=blockIds.get(index);
      boolean oldReserved=auxStore.isReserved(oldBlockId);
      if (!oldReserved) {
        if (blockIds.get(index) != expectId || expectData != 0) {
          return false;
        }
      }
 else {
        int seq=auxStore.getSequence(oldBlockId);
        short oldId=auxStore.getId(oldBlockId);
        short oldData=auxStore.getData(oldBlockId);
        if (!testSequence(x,y,z,seq)) {
          continue;
        }
        if (oldId != expectId || oldData != expectData) {
          return false;
        }
      }
      if (newData == 0 && !auxStore.isReserved(newId)) {
        if (!blockIds.compareAndSet(index,oldBlockId,newId)) {
          continue;
        }
      }
 else {
        int newIndex=auxStore.add(newId,newData);
        if (!blockIds.compareAndSet(index,oldBlockId,(short)newIndex)) {
          auxStore.remove(newIndex);
          continue;
        }
      }
      if (oldReserved) {
        auxStore.remove(oldBlockId);
      }
      markDirty(x,y,z);
      return true;
    }
  }
  finally {
    atomicNotify(index);
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
}",0.9974874371859296
177419,"/** 
 * Waits until a notify
 * @return true if interrupted during the wait
 */
private boolean atomicWait(){
  waiting.incrementAndGet();
  try {
synchronized (this) {
      try {
        wait();
      }
 catch (      InterruptedException e) {
        return true;
      }
    }
  }
  finally {
    waiting.decrementAndGet();
  }
  return false;
}","/** 
 * Waits until a notify
 * @return true if interrupted during the wait
 */
private final boolean atomicWait(int index){
  AtomicInteger i=getWaiting(index);
  i.incrementAndGet();
  try {
    short blockId=blockIds.get(index);
    boolean reserved=auxStore.isReserved(blockId);
synchronized (i) {
      if (!reserved || !auxStore.testUnstable(blockId)) {
        return false;
      }
      try {
        i.wait();
      }
 catch (      InterruptedException e) {
        return true;
      }
    }
  }
  finally {
    i.decrementAndGet();
  }
  return false;
}",0.7075575027382256
177420,"public AtomicBlockStoreImpl(int shift,int dirtySize,short[] blocks,short[] data){
  this.side=1 << shift;
  this.shift=shift;
  this.doubleShift=shift << 1;
  int size=side * side * side;
  blockIds=new AtomicShortArray(size);
  auxStore=new AtomicIntArrayStore(size);
  dirtyX=new byte[dirtySize];
  dirtyY=new byte[dirtySize];
  dirtyZ=new byte[dirtySize];
  if (blocks != null) {
    int x=0;
    int z=0;
    int y=0;
    int max=(1 << shift) - 1;
    for (int i=0; i < Math.min(blocks.length,size); i++) {
      short d=0;
      if (data != null) {
        d=data[i];
      }
      this.setBlock(x,y,z,blocks[i],d);
      if (x < max) {
        x++;
      }
 else {
        x=0;
        if (z < max) {
          z++;
        }
 else {
          z=0;
          if (y < max) {
            y++;
          }
 else {
            y=0;
          }
        }
      }
    }
  }
}","public AtomicBlockStoreImpl(int shift,int dirtySize,short[] blocks,short[] data){
  this.side=1 << shift;
  this.shift=shift;
  this.doubleShift=shift << 1;
  int size=side * side * side;
  blockIds=new AtomicShortArray(size);
  auxStore=new AtomicIntArrayStore(size);
  dirtyX=new byte[dirtySize];
  dirtyY=new byte[dirtySize];
  dirtyZ=new byte[dirtySize];
  waiting=new AtomicInteger[WAIT_COUNT];
  for (int i=0; i < WAIT_COUNT; i++) {
    waiting[i]=new AtomicInteger(0);
  }
  if (blocks != null) {
    int x=0;
    int z=0;
    int y=0;
    int max=(1 << shift) - 1;
    for (int i=0; i < Math.min(blocks.length,size); i++) {
      short d=0;
      if (data != null) {
        d=data[i];
      }
      this.setBlock(x,y,z,blocks[i],d);
      if (x < max) {
        x++;
      }
 else {
        x=0;
        if (z < max) {
          z++;
        }
 else {
          z=0;
          if (y < max) {
            y++;
          }
 else {
            y=0;
          }
        }
      }
    }
  }
}",0.9353287012292892
177421,"private int getAndSetBlockRaw(int x,int y,int z,short id,short data){
  int index=getIndex(x,y,z);
  int spins=0;
  boolean interrupted=false;
  try {
    while (true) {
      if (spins++ > SPINS) {
        interrupted|=atomicWait();
      }
      checkCompressing();
      short oldBlockId=blockIds.get(index);
      boolean oldReserved=auxStore.isReserved(oldBlockId);
      if (data == 0 && !auxStore.isReserved(id)) {
        if (!blockIds.compareAndSet(index,oldBlockId,id)) {
          continue;
        }
      }
 else {
        int newIndex=auxStore.add(id,data);
        if (!blockIds.compareAndSet(index,oldBlockId,(short)newIndex)) {
          auxStore.remove(newIndex);
          continue;
        }
      }
      if (oldReserved) {
        return auxStore.remove(oldBlockId);
      }
      return BlockFullState.getPacked(oldBlockId,(short)0);
    }
  }
  finally {
    markDirty(x,y,z);
    atomicNotify();
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
}","private int getAndSetBlockRaw(int x,int y,int z,short id,short data){
  int index=getIndex(x,y,z);
  int spins=0;
  boolean interrupted=false;
  try {
    while (true) {
      if (spins++ > SPINS) {
        interrupted|=atomicWait(index);
      }
      checkCompressing();
      short oldBlockId=blockIds.get(index);
      boolean oldReserved=auxStore.isReserved(oldBlockId);
      if (data == 0 && !auxStore.isReserved(id)) {
        if (!blockIds.compareAndSet(index,oldBlockId,id)) {
          continue;
        }
      }
 else {
        int newIndex=auxStore.add(id,data);
        if (!blockIds.compareAndSet(index,oldBlockId,(short)newIndex)) {
          auxStore.remove(newIndex);
          continue;
        }
      }
      if (oldReserved) {
        return auxStore.remove(oldBlockId);
      }
      return BlockFullState.getPacked(oldBlockId,(short)0);
    }
  }
  finally {
    markDirty(x,y,z);
    atomicNotify(index);
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
}",0.99500998003992
177422,"/** 
 * Gets the block id for a block at a particular location.<br> <br> Block ids range from 0 to 65535.
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @return the block id
 */
public int getBlockId(int x,int y,int z){
  int index=getIndex(x,y,z);
  int spins=0;
  boolean interrupted=false;
  try {
    while (true) {
      if (spins++ > SPINS) {
        interrupted|=atomicWait();
      }
      checkCompressing();
      int seq=getSequence(x,y,z);
      short blockId=blockIds.get(index);
      if (auxStore.isReserved(blockId)) {
        blockId=auxStore.getId(blockId);
        if (testSequence(x,y,z,seq)) {
          return blockId & 0x0000FFFF;
        }
      }
 else {
        return blockId & 0x0000FFFF;
      }
    }
  }
  finally {
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
}","/** 
 * Gets the block id for a block at a particular location.<br> <br> Block ids range from 0 to 65535.
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @return the block id
 */
public int getBlockId(int x,int y,int z){
  int index=getIndex(x,y,z);
  int spins=0;
  boolean interrupted=false;
  try {
    while (true) {
      if (spins++ > SPINS) {
        interrupted|=atomicWait(index);
      }
      checkCompressing();
      int seq=getSequence(x,y,z);
      short blockId=blockIds.get(index);
      if (auxStore.isReserved(blockId)) {
        blockId=auxStore.getId(blockId);
        if (testSequence(x,y,z,seq)) {
          return blockId & 0x0000FFFF;
        }
      }
 else {
        return blockId & 0x0000FFFF;
      }
    }
  }
  finally {
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
}",0.9971214738054116
177423,"/** 
 * Gets the block data for a block at a particular location.<br> <br> Block data ranges from 0 to 65535.
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @return the block data
 */
public int getData(int x,int y,int z){
  int index=getIndex(x,y,z);
  int spins=0;
  boolean interrupted=false;
  try {
    while (true) {
      if (spins++ > SPINS) {
        interrupted|=atomicWait();
      }
      checkCompressing();
      int seq=getSequence(x,y,z);
      short blockId=blockIds.get(index);
      if (auxStore.isReserved(blockId)) {
        blockId=auxStore.getData(blockId);
        if (testSequence(x,y,z,seq)) {
          return blockId & 0x0000FFFF;
        }
      }
 else {
        return 0;
      }
    }
  }
  finally {
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
}","/** 
 * Gets the block data for a block at a particular location.<br> <br> Block data ranges from 0 to 65535.
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @return the block data
 */
public int getData(int x,int y,int z){
  int index=getIndex(x,y,z);
  int spins=0;
  boolean interrupted=false;
  try {
    while (true) {
      if (spins++ > SPINS) {
        interrupted|=atomicWait(index);
      }
      checkCompressing();
      int seq=getSequence(x,y,z);
      short blockId=blockIds.get(index);
      if (auxStore.isReserved(blockId)) {
        blockId=auxStore.getData(blockId);
        if (testSequence(x,y,z,seq)) {
          return blockId & 0x0000FFFF;
        }
      }
 else {
        return 0;
      }
    }
  }
  finally {
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
}",0.9970743124634288
177424,"/** 
 * Atomically gets the full set of data associated with the block.<br> <br>
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @return the full state of the block
 */
public int getFullData(int x,int y,int z){
  int index=getIndex(x,y,z);
  int spins=0;
  boolean interrupted=false;
  try {
    while (true) {
      if (spins++ > SPINS) {
        interrupted|=atomicWait();
      }
      checkCompressing();
      int seq=getSequence(x,y,z);
      short blockId=blockIds.get(index);
      if (auxStore.isReserved(blockId)) {
        int state=auxStore.getInt(blockId);
        if (testSequence(x,y,z,seq)) {
          return state;
        }
      }
 else {
        int state=BlockFullState.getPacked(blockId,(short)0);
        return state;
      }
    }
  }
  finally {
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
}","/** 
 * Atomically gets the full set of data associated with the block.<br> <br>
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @return the full state of the block
 */
public int getFullData(int x,int y,int z){
  int index=getIndex(x,y,z);
  int spins=0;
  boolean interrupted=false;
  try {
    while (true) {
      if (spins++ > SPINS) {
        interrupted|=atomicWait(index);
      }
      checkCompressing();
      int seq=getSequence(x,y,z);
      short blockId=blockIds.get(index);
      if (auxStore.isReserved(blockId)) {
        int state=auxStore.getInt(blockId);
        if (testSequence(x,y,z,seq)) {
          return state;
        }
      }
 else {
        int state=BlockFullState.getPacked(blockId,(short)0);
        return state;
      }
    }
  }
  finally {
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
}",0.9972051425377306
177425,"/** 
 * Notifies all waiting threads
 */
private void atomicNotify(){
  if (waiting.getAndAdd(0) > 0) {
synchronized (this) {
      notifyAll();
    }
  }
}","/** 
 * Notifies all waiting threads
 */
private final void atomicNotify(int index){
  AtomicInteger i=getWaiting(index);
  if (!i.compareAndSet(0,0)) {
synchronized (i) {
      i.notifyAll();
    }
  }
}",0.7277777777777777
177426,"/** 
 * Gets the sequence number associated with a block location.<br> <br> If soft is true, this method counts as a volatile read. Otherwise, it is both a volatile read and a volatile write.<br> <br> Soft reads should only be used for the first of the 2 step process for confirming that data hasn't changed.
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @return the sequence number, or DatatableSequenceNumber.ATOMIC for asingle short record
 */
public int getSequence(int x,int y,int z){
  checkCompressing();
  int index=getIndex(x,y,z);
  int spins=0;
  boolean interrupted=false;
  try {
    while (true) {
      if (spins++ > SPINS) {
        interrupted|=atomicWait();
      }
      checkCompressing();
      int blockId=blockIds.get(index);
      if (!auxStore.isReserved(blockId)) {
        return DatatableSequenceNumber.ATOMIC;
      }
      int sequence=auxStore.getSequence(blockId);
      if (sequence != DatatableSequenceNumber.UNSTABLE) {
        return sequence;
      }
    }
  }
  finally {
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
}","/** 
 * Gets the sequence number associated with a block location.<br> <br> If soft is true, this method counts as a volatile read. Otherwise, it is both a volatile read and a volatile write.<br> <br> Soft reads should only be used for the first of the 2 step process for confirming that data hasn't changed.
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @return the sequence number, or DatatableSequenceNumber.ATOMIC for asingle short record
 */
public int getSequence(int x,int y,int z){
  checkCompressing();
  int index=getIndex(x,y,z);
  int spins=0;
  boolean interrupted=false;
  try {
    while (true) {
      if (spins++ > SPINS) {
        interrupted|=atomicWait(index);
      }
      checkCompressing();
      int blockId=blockIds.get(index);
      if (!auxStore.isReserved(blockId)) {
        return DatatableSequenceNumber.ATOMIC;
      }
      int sequence=auxStore.getSequence(blockId);
      if (sequence != DatatableSequenceNumber.UNSTABLE) {
        return sequence;
      }
    }
  }
  finally {
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
}",0.9977924944812362
177427,"/** 
 * Adds an entry to the store. The auxData parameter should be set to null to indicate no auxiliary data.<br> <br> The index that is returned is guaranteed to be one of the reserved indexes.<br> <br>
 * @param id the id
 * @param data the data
 * @param auxData the auxiliary data
 * @return the index that the entry was stored in the array
 */
public final int add(short id,short data){
  entries.incrementAndGet();
  while (true) {
    if (needsResize()) {
      resizeArrays();
    }
    int testIndex=scan.getAndIncrement() & length.get() - 1;
    int prevSeq=seqArray.get().getAndSet(testIndex,DatatableSequenceNumber.UNSTABLE);
    if (prevSeq == DatatableSequenceNumber.UNSTABLE) {
      continue;
    }
    try {
      if (!emptyArray.get()[testIndex]) {
        continue;
      }
      int idAndData=id << 16 | data & 0xFFFF;
      intArray.get()[testIndex]=idAndData;
      emptyArray.get()[testIndex]=false;
      return toExternal(testIndex);
    }
  finally {
      seqArray.get().set(testIndex,DatatableSequenceNumber.get());
      atomicNotify();
    }
  }
}","/** 
 * Adds an entry to the store. The auxData parameter should be set to null to indicate no auxiliary data.<br> <br> The index that is returned is guaranteed to be one of the reserved indexes.<br> <br>
 * @param id the id
 * @param data the data
 * @param auxData the auxiliary data
 * @return the index that the entry was stored in the array
 */
public final int add(short id,short data){
  entries.incrementAndGet();
  while (true) {
    if (needsResize()) {
      resizeArrays();
    }
    int testIndex=scan.getAndIncrement() & length.get() - 1;
    int prevSeq=seqArray.get().getAndSet(testIndex,DatatableSequenceNumber.UNSTABLE);
    if (prevSeq == DatatableSequenceNumber.UNSTABLE) {
      continue;
    }
    try {
      if (!emptyArray.get()[testIndex]) {
        continue;
      }
      int idAndData=id << 16 | data & 0xFFFF;
      intArray.get()[testIndex]=idAndData;
      emptyArray.get()[testIndex]=false;
      return toExternal(testIndex);
    }
  finally {
      seqArray.get().set(testIndex,DatatableSequenceNumber.get());
      atomicNotify(testIndex);
    }
  }
}",0.9958429561200924
177428,"private void unlock(int lockedIndexes){
  for (int i=0; i < lockedIndexes; i++) {
    if (!seqArray.get().compareAndSet(i,DatatableSequenceNumber.UNSTABLE,DatatableSequenceNumber.get())) {
      throw new IllegalStateException(""String_Node_Str"" + i + ""String_Node_Str"");
    }
  }
  atomicNotify();
}","private void unlock(int lockedIndexes){
  for (int i=0; i < lockedIndexes; i++) {
    if (!seqArray.get().compareAndSet(i,DatatableSequenceNumber.UNSTABLE,DatatableSequenceNumber.get())) {
      throw new IllegalStateException(""String_Node_Str"" + i + ""String_Node_Str"");
    }
    atomicNotify(i);
  }
}",0.988391376451078
177429,"/** 
 * Waits until a notify
 * @return true if interrupted during the wait
 */
private final boolean atomicWait(){
  waiting.incrementAndGet();
  try {
synchronized (this) {
      try {
        wait();
      }
 catch (      InterruptedException e) {
        return true;
      }
    }
  }
  finally {
    waiting.decrementAndGet();
  }
  return false;
}","/** 
 * Waits until a notify
 * @return true if interrupted during the wait
 */
private final boolean atomicWait(int index){
  AtomicInteger i=getWaiting(index);
  i.incrementAndGet();
  try {
synchronized (i) {
      if (!testUnstableInternal(index)) {
        return false;
      }
      try {
        i.wait();
      }
 catch (      InterruptedException e) {
        return true;
      }
    }
  }
  finally {
    i.decrementAndGet();
  }
  return false;
}",0.8093480934809348
177430,"/** 
 * Notifies all waiting threads
 */
private final void atomicNotify(){
  if (!waiting.compareAndSet(0,0)) {
synchronized (this) {
      notifyAll();
    }
  }
}","/** 
 * Notifies all waiting threads
 */
private final void atomicNotify(int index){
  AtomicInteger i=getWaiting(index);
  if (!i.compareAndSet(0,0)) {
synchronized (i) {
      i.notifyAll();
    }
  }
}",0.8346883468834688
177431,"/** 
 * Removes the array elements at the given index. The array should not be empty at the index in question.<br> <br>
 * @param index the index
 * @return the int for old entry, or 0 if none
 */
public int remove(int index){
  index=toInternal(index);
  while (true) {
    int prevSeq=seqArray.get().getAndSet(index,DatatableSequenceNumber.UNSTABLE);
    if (prevSeq == DatatableSequenceNumber.UNSTABLE) {
      continue;
    }
    try {
      int oldInt=intArray.get()[index];
      boolean current=emptyArray.get()[index];
      if (current) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      emptyArray.get()[index]=true;
      entries.decrementAndGet();
      return oldInt;
    }
  finally {
      seqArray.get().set(index,DatatableSequenceNumber.get());
      atomicNotify();
    }
  }
}","/** 
 * Removes the array elements at the given index. The array should not be empty at the index in question.<br> <br>
 * @param index the index
 * @return the int for old entry, or 0 if none
 */
public int remove(int index){
  index=toInternal(index);
  while (true) {
    int prevSeq=seqArray.get().getAndSet(index,DatatableSequenceNumber.UNSTABLE);
    if (prevSeq == DatatableSequenceNumber.UNSTABLE) {
      continue;
    }
    try {
      int oldInt=intArray.get()[index];
      boolean current=emptyArray.get()[index];
      if (current) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      emptyArray.get()[index]=true;
      entries.decrementAndGet();
      return oldInt;
    }
  finally {
      seqArray.get().set(index,DatatableSequenceNumber.get());
      atomicNotify(index);
    }
  }
}",0.9969604863221884
177432,"/** 
 * Gets the int value stored at a given index.<br> <br> If there is no int stored at the index, then the return value is undefined.<br> <br>
 * @param index the index
 * @return the int value
 */
public final int getInt(int index){
  index=toInternal(index);
  int spins=0;
  boolean interrupted=false;
  while (true) {
    if (spins++ > SPINS) {
      interrupted|=atomicWait();
    }
    int initialSequence=seqArray.get().get(index);
    if (initialSequence == DatatableSequenceNumber.UNSTABLE) {
      continue;
    }
    int value=intArray.get()[index];
    if (!seqArray.get().compareAndSet(index,initialSequence,initialSequence)) {
      continue;
    }
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
    return value;
  }
}","/** 
 * Gets the int value stored at a given index.<br> <br> If there is no int stored at the index, then the return value is undefined.<br> <br>
 * @param index the index
 * @return the int value
 */
public final int getInt(int index){
  index=toInternal(index);
  int spins=0;
  boolean interrupted=false;
  while (true) {
    if (spins++ > SPINS) {
      interrupted|=atomicWait(index);
    }
    int initialSequence=seqArray.get().get(index);
    if (initialSequence == DatatableSequenceNumber.UNSTABLE) {
      continue;
    }
    int value=intArray.get()[index];
    if (!seqArray.get().compareAndSet(index,initialSequence,initialSequence)) {
      continue;
    }
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
    return value;
  }
}",0.99672131147541
177433,"public AtomicIntArrayStore(int maxEntries,double loadFactor,int initialSize){
  this.maxLength=MathHelper.roundUpPow2((int)(maxEntries / loadFactor));
  this.reservedMask=-MathHelper.roundUpPow2(maxLength) & 0xFFFF;
  this.length.set(MathHelper.roundUpPow2(initialSize));
  this.entries.set(0);
  intArray=new AtomicReference<int[]>(new int[this.length.get()]);
  seqArray=new AtomicReference<AtomicIntegerArray>(new AtomicIntegerArray(this.length.get()));
  emptyArray=new AtomicReference<boolean[]>(new boolean[this.length.get()]);
  emptyFill(emptyArray.get(),seqArray.get());
}","public AtomicIntArrayStore(int maxEntries,double loadFactor,int initialSize){
  this.maxLength=MathHelper.roundUpPow2((int)(maxEntries / loadFactor));
  this.reservedMask=-MathHelper.roundUpPow2(maxLength) & 0xFFFF;
  this.length.set(MathHelper.roundUpPow2(initialSize));
  this.entries.set(0);
  intArray=new AtomicReference<int[]>(new int[this.length.get()]);
  seqArray=new AtomicReference<AtomicIntegerArray>(new AtomicIntegerArray(this.length.get()));
  emptyArray=new AtomicReference<boolean[]>(new boolean[this.length.get()]);
  emptyFill(emptyArray.get(),seqArray.get());
  waiting=new AtomicInteger[WAIT_COUNT];
  for (int i=0; i < WAIT_COUNT; i++) {
    waiting[i]=new AtomicInteger(0);
  }
}",0.9056897895557288
177434,"public void finalizeRun(){
  Profiler.start(""String_Node_Str"");
  try {
    Profiler.start(""String_Node_Str"");
    long worldAge=getWorld().getAge();
    for (int reap=0; reap < REAP_PER_TICK; reap++) {
      if (++reapX >= CHUNKS.SIZE) {
        reapX=0;
        if (++reapY >= CHUNKS.SIZE) {
          reapY=0;
          if (++reapZ >= CHUNKS.SIZE) {
            reapZ=0;
          }
        }
      }
      SpoutChunk chunk=chunks[reapX][reapY][reapZ].get();
      if (chunk != null) {
        chunk.compressIfRequired();
        boolean doUnload=true;
        if (chunk.isReapable(worldAge)) {
          if (ChunkUnloadEvent.getHandlerList().getRegisteredListeners().length > 0) {
            ChunkUnloadEvent event=Spout.getEngine().getEventManager().callEvent(new ChunkUnloadEvent(chunk));
            if (event.isCancelled()) {
              doUnload=false;
            }
          }
        }
        if (doUnload) {
          chunk.unload(true);
        }
 else         if (!chunk.isPopulated()) {
          queueChunkForPopulation(chunk);
        }
      }
    }
    Profiler.startAndStop(""String_Node_Str"");
    entityManager.finalizeRun();
    Profiler.stop();
  }
  finally {
    Profiler.stop();
  }
}","public void finalizeRun(){
  Profiler.start(""String_Node_Str"");
  try {
    Profiler.start(""String_Node_Str"");
    long worldAge=getWorld().getAge();
    for (int reap=0; reap < REAP_PER_TICK; reap++) {
      if (++reapX >= CHUNKS.SIZE) {
        reapX=0;
        if (++reapY >= CHUNKS.SIZE) {
          reapY=0;
          if (++reapZ >= CHUNKS.SIZE) {
            reapZ=0;
          }
        }
      }
      SpoutChunk chunk=chunks[reapX][reapY][reapZ].get();
      if (chunk != null) {
        chunk.compressIfRequired();
        boolean doUnload;
        if (doUnload=chunk.isReapable(worldAge)) {
          if (ChunkUnloadEvent.getHandlerList().getRegisteredListeners().length > 0) {
            ChunkUnloadEvent event=Spout.getEngine().getEventManager().callEvent(new ChunkUnloadEvent(chunk));
            if (event.isCancelled()) {
              doUnload=false;
            }
          }
        }
        if (doUnload) {
          chunk.unload(true);
        }
 else         if (!chunk.isPopulated()) {
          queueChunkForPopulation(chunk);
        }
      }
    }
    Profiler.startAndStop(""String_Node_Str"");
    entityManager.finalizeRun();
    Profiler.stop();
  }
  finally {
    Profiler.stop();
  }
}",0.9835661462612982
177435,"public void connect(String playerName){
  String hostname=""String_Node_Str"";
  int port=25565;
  ChannelFuture f=clientBootstrap.connect(new InetSocketAddress(hostname,port));
  System.out.println(""String_Node_Str"");
  try {
    f.await();
  }
 catch (  InterruptedException e) {
    System.out.println(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"" + f.isSuccess() + ""String_Node_Str""+ f.isDone()+ ""String_Node_Str""+ f.getCause());
  f.getCause().printStackTrace();
}","public void connect(String playerName,Session session){
  String hostname=""String_Node_Str"";
  int port=25565;
  ChannelFutureListener listener=new SpoutProxyConnectListener(this,playerName,session);
  clientBootstrap.connect(new InetSocketAddress(hostname,port)).addListener(listener);
}",0.4507772020725388
177436,"@EventHandler(order=Order.MONITOR) public void onPlayerConnect(PlayerConnectEvent event){
  if (event.isCancelled()) {
    return;
  }
  server.connect(event.getPlayerName());
  System.out.println(""String_Node_Str"" + event.getSession().getProtocol());
}","@EventHandler(order=Order.MONITOR) public void onPlayerConnect(PlayerConnectEvent event){
  if (event.isCancelled()) {
    return;
  }
  server.connect(event.getPlayerName(),event.getSession());
}",0.8685968819599109
177437,"@Override public boolean disconnect(String reason,boolean kick){
  if (player != null) {
    PlayerLeaveEvent event;
    if (kick) {
      event=getEngine().getEventManager().callEvent(new PlayerKickEvent(player,getDefaultLeaveMessage(),reason));
      if (event.isCancelled()) {
        return false;
      }
      getEngine().getLogger().log(Level.INFO,""String_Node_Str"",new Object[]{player.getName(),reason});
    }
 else {
      event=new PlayerLeaveEvent(player,getDefaultLeaveMessage());
    }
    dispose(event);
  }
  Message kickMessage=getNetworkSynchronizer().getKickMessage(reason);
  if (kickMessage != null) {
    channel.write(kickMessage).addListener(ChannelFutureListener.CLOSE);
  }
 else {
    channel.close();
  }
  return true;
}","@Override public boolean disconnect(String reason,boolean kick){
  if (player != null) {
    PlayerLeaveEvent event;
    if (kick) {
      event=getEngine().getEventManager().callEvent(new PlayerKickEvent(player,getDefaultLeaveMessage(),reason));
      if (event.isCancelled()) {
        return false;
      }
      getEngine().getLogger().log(Level.INFO,""String_Node_Str"",new Object[]{player.getName(),reason});
    }
 else {
      event=new PlayerLeaveEvent(player,getDefaultLeaveMessage());
    }
    dispose(event);
  }
  Protocol protocol=getProtocol();
  Message kickMessage=null;
  if (protocol != null) {
    kickMessage=protocol.getKickMessage(reason);
  }
  if (kickMessage != null) {
    channel.write(kickMessage).addListener(ChannelFutureListener.CLOSE);
  }
 else {
    channel.close();
  }
  return true;
}",0.9242520687460216
177438,"@Override public void setNetworkSynchronizer(NetworkSynchronizer synchronizer){
  if (synchronizer == null && player == null) {
    this.synchronizer.set(nullSynchronizer);
  }
 else   if (!this.synchronizer.compareAndSet(nullSynchronizer,synchronizer)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","@Override public void setNetworkSynchronizer(NetworkSynchronizer synchronizer){
  if (synchronizer == null && player == null) {
    this.synchronizer.set(nullSynchronizer);
  }
 else   if (!this.synchronizer.compareAndSet(nullSynchronizer,synchronizer)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else {
    synchronizer.setProtocol(protocol.get());
  }
}",0.9169054441260746
177439,"@Override public void setProtocol(Protocol protocol){
  if (!this.protocol.compareAndSet(bootstrapProtocol,protocol)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  server.getLogger().info(""String_Node_Str"" + protocol.getName());
}","@Override public void setProtocol(Protocol protocol){
  if (!this.protocol.compareAndSet(bootstrapProtocol,protocol)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.synchronizer.get().setProtocol(protocol);
  server.getLogger().info(""String_Node_Str"" + protocol.getName());
}",0.911070780399274
177440,"public String getDefaultLeaveMessage(){
  return ChatColor.CYAN + player.getDisplayName() + ChatColor.CYAN+ ""String_Node_Str"";
}","public String getDefaultLeaveMessage(){
  if (player == null) {
    return ChatColor.CYAN + ""String_Node_Str"" + ChatColor.CYAN+ ""String_Node_Str"";
  }
 else {
    return ChatColor.CYAN + player.getDisplayName() + ChatColor.CYAN+ ""String_Node_Str"";
  }
}",0.6719160104986877
177441,"private void checkChunkUpdates(Point currentPosition){
  priorityChunkSendQueue.clear();
  chunkSendQueue.clear();
  chunkFreeQueue.clear();
  chunkInitQueue.clear();
  World world=currentPosition.getWorld();
  int bx=(int)currentPosition.getX();
  int by=(int)currentPosition.getY();
  int bz=(int)currentPosition.getZ();
  Point playerChunkBase=Chunk.pointToBase(currentPosition);
  for (  Point p : initializedChunks) {
    if (p.getManhattanDistance(playerChunkBase) > blockViewDistance) {
      chunkFreeQueue.add(p);
    }
  }
  int cx=bx >> Chunk.BLOCKS.BITS;
  int cy=by >> Chunk.BLOCKS.BITS;
  int cz=bz >> Chunk.BLOCKS.BITS;
  Iterator<IntVector3> itr=new OutwardIterator(cx,cy,cz,viewDistance);
  int distance=0;
  while (itr.hasNext()) {
    IntVector3 v=itr.next();
    Point base=new Point(world,v.getX() << Chunk.BLOCKS.BITS,v.getY() << Chunk.BLOCKS.BITS,v.getZ() << Chunk.BLOCKS.BITS);
    if (!activeChunks.contains(base)) {
      if (distance <= targetSize) {
        priorityChunkSendQueue.add(base);
      }
 else {
        chunkSendQueue.add(base);
      }
    }
    if (!initializedChunks.contains(base)) {
      chunkInitQueue.add(base);
    }
  }
}","private void checkChunkUpdates(Point currentPosition){
  priorityChunkSendQueue.clear();
  chunkSendQueue.clear();
  chunkFreeQueue.clear();
  chunkInitQueue.clear();
  World world=currentPosition.getWorld();
  int bx=(int)currentPosition.getX();
  int by=(int)currentPosition.getY();
  int bz=(int)currentPosition.getZ();
  Point playerChunkBase=Chunk.pointToBase(currentPosition);
  for (  Point p : initializedChunks) {
    if (p.getManhattanDistance(playerChunkBase) > blockViewDistance) {
      chunkFreeQueue.add(p);
    }
  }
  int cx=bx >> Chunk.BLOCKS.BITS;
  int cy=by >> Chunk.BLOCKS.BITS;
  int cz=bz >> Chunk.BLOCKS.BITS;
  Iterator<IntVector3> itr=new OutwardIterator(cx,cy,cz,viewDistance);
  while (itr.hasNext()) {
    IntVector3 v=itr.next();
    Point base=new Point(world,v.getX() << Chunk.BLOCKS.BITS,v.getY() << Chunk.BLOCKS.BITS,v.getZ() << Chunk.BLOCKS.BITS);
    boolean inTargetArea=playerChunkBase.getManhattanDistance(base) <= targetSize;
    if (!activeChunks.contains(base)) {
      if (inTargetArea) {
        priorityChunkSendQueue.add(base);
        chunkSendQueue.remove(base);
      }
 else {
        priorityChunkSendQueue.remove(base);
        chunkSendQueue.add(base);
      }
    }
    if (!initializedChunks.contains(base)) {
      chunkInitQueue.add(base);
    }
  }
}",0.8859330914953648
177442,"public NetworkSynchronizer(Player owner,Session session,Entity entity){
  this.owner=owner;
  this.entity=entity;
  entity.setObserver(true);
  this.session=session;
  blockViewDistance=entity.getViewDistance();
  viewDistance=blockViewDistance >> Chunk.BLOCKS.BITS;
  targetSize=blockViewDistance / 2;
}","public NetworkSynchronizer(Player owner,Session session,Entity entity){
  this.owner=owner;
  this.entity=entity;
  entity.setObserver(true);
  this.session=session;
  blockViewDistance=entity.getViewDistance();
  viewDistance=blockViewDistance >> Chunk.BLOCKS.BITS;
  targetSize=Math.max(Chunk.BLOCKS.SIZE << 2,blockViewDistance >> 2);
}",0.9439252336448598
177443,"/** 
 * Takes in an NBT tag, sanely checks null status, and then returns it value. This method will return null if the value cannot be cast to the given class.
 * @param t Tag to get the value from
 * @param clazz the return type to use
 * @return the value as an onbject of the same type as the given class
 */
public static <T>T getTagValue(Tag t,Class<T> clazz){
  Object o=toTagValue(t);
  if (o == null) {
    return null;
  }
  try {
    T value=(T)o;
    return value;
  }
 catch (  ClassCastException e) {
    return null;
  }
}","/** 
 * Takes in an NBT tag, sanely checks null status, and then returns it value. This method will return null if the value cannot be cast to the given class.
 * @param t Tag to get the value from
 * @param clazz the return type to use
 * @return the value as an onbject of the same type as the given class
 */
public static <T>T getTagValue(Tag t,Class<? extends T> clazz){
  Object o=toTagValue(t);
  if (o == null) {
    return null;
  }
  try {
    return clazz.cast(o);
  }
 catch (  ClassCastException e) {
    return null;
  }
}",0.9477611940298508
177444,"/** 
 * Takes in an NBT tag, sanely checks null status, and then returns it value. This method will return null if the value cannot be cast to the default value.
 * @param t Tag to get the value from
 * @param defaultValue the value to return if the tag or its value is null or the value cannot be cast
 * @return the value as an onbject of the same type as the default value, or the default value
 */
public static <T>T toTagValue(Tag t,T defaultValue){
  Object o=toTagValue(t);
  if (o == null) {
    return defaultValue;
  }
  try {
    T value=(T)o;
    return value;
  }
 catch (  ClassCastException e) {
    return defaultValue;
  }
}","/** 
 * Takes in an NBT tag, sanely checks null status, and then returns it value. This method will return null if the value cannot be cast to the default value.
 * @param t Tag to get the value from
 * @param defaultValue the value to return if the tag or its value is null or the value cannot be cast
 * @return the value as an onbject of the same type as the default value, or the default value
 */
public static <T,U extends T>T toTagValue(Tag t,Class<? extends T> clazz,U defaultValue){
  Object o=toTagValue(t);
  if (o == null) {
    return defaultValue;
  }
  try {
    T value=clazz.cast(o);
    return value;
  }
 catch (  ClassCastException e) {
    return defaultValue;
  }
}",0.960843373493976
177445,"protected Class<?> findClass(String name,boolean checkGlobal) throws ClassNotFoundException {
  Class<?> result=classes.get(name);
  if (result == null) {
    if (checkGlobal) {
      result=loader.getClassByName(name);
    }
    if (result == null) {
      result=super.findClass(name);
      if (result != null) {
        loader.setClass(name,result);
      }
    }
    classes.put(name,result);
  }
  return result;
}","protected Class<?> findClass(String name,boolean checkGlobal) throws ClassNotFoundException {
  Class<?> result=classes.get(name);
  if (result == null) {
    result=super.findClass(name);
    if (result == null && checkGlobal) {
      result=loader.getClassByName(name);
    }
    classes.put(name,result);
  }
  return result;
}",0.7333333333333333
177446,"@UnsafeMethod public synchronized void enablePlugin(Plugin paramPlugin){
  if (!CommonPlugin.class.isAssignableFrom(paramPlugin.getClass())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!paramPlugin.isEnabled()) {
    CommonPlugin cp=(CommonPlugin)paramPlugin;
    String name=cp.getDescription().getName();
    if (!loaders.containsKey(name)) {
      loaders.put(name,(CommonClassLoader)cp.getClassLoader());
    }
    try {
      cp.setEnabled(true);
      cp.onEnable();
    }
 catch (    Throwable e) {
      game.getLogger().log(Level.SEVERE,new StringBuilder().append(""String_Node_Str"").append(paramPlugin.getDescription().getFullName()).append(""String_Node_Str"").append(e.getMessage()).toString(),e);
    }
  }
}","@UnsafeMethod public synchronized void enablePlugin(Plugin paramPlugin){
  if (!CommonPlugin.class.isAssignableFrom(paramPlugin.getClass())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!paramPlugin.isEnabled()) {
    CommonPlugin cp=(CommonPlugin)paramPlugin;
    String name=cp.getDescription().getName();
    if (!loaders.containsKey(name)) {
      loaders.put(name,(CommonClassLoader)cp.getClassLoader());
    }
    try {
      cp.setEnabled(true);
      cp.onEnable();
    }
 catch (    Throwable e) {
      engine.getLogger().log(Level.SEVERE,new StringBuilder().append(""String_Node_Str"").append(paramPlugin.getDescription().getFullName()).append(""String_Node_Str"").append(e.getMessage()).toString(),e);
    }
  }
}",0.9946380697050938
177447,"@UnsafeMethod public synchronized void disablePlugin(Plugin paramPlugin){
  if (!CommonPlugin.class.isAssignableFrom(paramPlugin.getClass())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (paramPlugin.isEnabled()) {
    CommonPlugin cp=(CommonPlugin)paramPlugin;
    String name=cp.getDescription().getName();
    if (!loaders.containsKey(name)) {
      loaders.put(name,(CommonClassLoader)cp.getClassLoader());
    }
    try {
      cp.setEnabled(false);
      cp.onDisable();
    }
 catch (    Throwable t) {
      game.getLogger().log(Level.SEVERE,new StringBuilder().append(""String_Node_Str"").append(paramPlugin.getDescription().getFullName()).append(""String_Node_Str"").append(t.getMessage()).toString(),t);
    }
  }
}","@UnsafeMethod public synchronized void disablePlugin(Plugin paramPlugin){
  if (!CommonPlugin.class.isAssignableFrom(paramPlugin.getClass())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (paramPlugin.isEnabled()) {
    CommonPlugin cp=(CommonPlugin)paramPlugin;
    String name=cp.getDescription().getName();
    if (!loaders.containsKey(name)) {
      loaders.put(name,(CommonClassLoader)cp.getClassLoader());
    }
    try {
      cp.setEnabled(false);
      cp.onDisable();
    }
 catch (    Throwable t) {
      engine.getLogger().log(Level.SEVERE,new StringBuilder().append(""String_Node_Str"").append(paramPlugin.getDescription().getFullName()).append(""String_Node_Str"").append(t.getMessage()).toString(),t);
    }
  }
}",0.9946524064171124
177448,"protected Class<?> getClassByName(final String name){
  Class<?> cached=classes.get(name);
  if (cached != null) {
    return cached;
  }
  for (  String current : loaders.keySet()) {
    CommonClassLoader loader=loaders.get(current);
    try {
      cached=loader.findClass(name,false);
    }
 catch (    ClassNotFoundException cnfe) {
    }
    if (cached != null) {
      return cached;
    }
  }
  return null;
}","protected Class<?> getClassByName(final String name){
  for (  String current : loaders.keySet()) {
    CommonClassLoader loader=loaders.get(current);
    try {
      Class<?> clazz=loader.findClass(name,false);
      if (clazz != null) {
        return clazz;
      }
    }
 catch (    ClassNotFoundException ignored) {
    }
  }
  return null;
}",0.3617300131061599
177449,"public synchronized Plugin loadPlugin(File paramFile,boolean ignoresoftdepends) throws InvalidPluginException, InvalidPluginException, UnknownDependencyException, InvalidDescriptionFileException {
  CommonPlugin result=null;
  PluginDescriptionFile desc=null;
  desc=getDescription(paramFile);
  File dataFolder=new File(paramFile.getParentFile(),desc.getName());
  processDependencies(desc);
  if (!ignoresoftdepends) {
    processSoftDependencies(desc);
  }
  try {
    loader.addURL(paramFile.toURI().toURL());
    Class<?> main=Class.forName(desc.getMain(),true,loader);
    Class<? extends CommonPlugin> plugin=main.asSubclass(CommonPlugin.class);
    boolean locked=manager.lock(key);
    Constructor<? extends CommonPlugin> constructor=plugin.getConstructor();
    result=constructor.newInstance();
    result.initialize(this,game,desc,dataFolder,paramFile,loader);
    if (!locked) {
      manager.unlock(key);
    }
  }
 catch (  Exception e) {
    throw new InvalidPluginException(e);
  }
  loaders.put(desc.getName(),loader);
  return result;
}","public synchronized Plugin loadPlugin(File paramFile,boolean ignoresoftdepends) throws InvalidPluginException, InvalidPluginException, UnknownDependencyException, InvalidDescriptionFileException {
  CommonPlugin result=null;
  PluginDescriptionFile desc=null;
  CommonClassLoader loader;
  desc=getDescription(paramFile);
  File dataFolder=new File(paramFile.getParentFile(),desc.getName());
  processDependencies(desc);
  if (!ignoresoftdepends) {
    processSoftDependencies(desc);
  }
  try {
    if (engine.getPlatform() == Platform.CLIENT) {
      loader=new ClientClassLoader(this,this.getClass().getClassLoader());
    }
 else {
      loader=new CommonClassLoader(this,this.getClass().getClassLoader());
    }
    loader.addURL(paramFile.toURI().toURL());
    Class<?> main=Class.forName(desc.getMain(),true,loader);
    Class<? extends CommonPlugin> plugin=main.asSubclass(CommonPlugin.class);
    boolean locked=manager.lock(key);
    Constructor<? extends CommonPlugin> constructor=plugin.getConstructor();
    result=constructor.newInstance();
    result.initialize(this,engine,desc,dataFolder,paramFile,loader);
    if (!locked) {
      manager.unlock(key);
    }
  }
 catch (  Exception e) {
    throw new InvalidPluginException(e);
  }
  loaders.put(desc.getName(),loader);
  return result;
}",0.891147818720881
177450,"/** 
 * @param paramFile Plugin file object
 * @return The current plugin's description element.
 * @throws InvalidPluginException
 * @throws InvalidDescriptionFileException
 */
protected synchronized PluginDescriptionFile getDescription(File paramFile) throws InvalidPluginException, InvalidDescriptionFileException {
  if (!paramFile.exists()) {
    throw new InvalidPluginException(new StringBuilder().append(paramFile.getName()).append(""String_Node_Str"").toString());
  }
  PluginDescriptionFile desc=null;
  JarFile jar=null;
  InputStream in=null;
  try {
    jar=new JarFile(paramFile);
    JarEntry entry=jar.getJarEntry(YAML_SPOUT);
    if (entry == null) {
      entry=jar.getJarEntry(YAML_OTHER);
    }
    if (entry == null) {
      throw new InvalidPluginException(""String_Node_Str"");
    }
    in=jar.getInputStream(entry);
    desc=new PluginDescriptionFile(in);
  }
 catch (  IOException e) {
    throw new InvalidPluginException(e);
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
        game.getLogger().log(Level.WARNING,""String_Node_Str"",e);
      }
    }
    if (jar != null) {
      try {
        jar.close();
      }
 catch (      IOException e) {
        game.getLogger().log(Level.WARNING,""String_Node_Str"",e);
      }
    }
  }
  return desc;
}","/** 
 * @param paramFile Plugin file object
 * @return The current plugin's description element.
 * @throws InvalidPluginException
 * @throws InvalidDescriptionFileException
 */
protected synchronized PluginDescriptionFile getDescription(File paramFile) throws InvalidPluginException, InvalidDescriptionFileException {
  if (!paramFile.exists()) {
    throw new InvalidPluginException(new StringBuilder().append(paramFile.getName()).append(""String_Node_Str"").toString());
  }
  PluginDescriptionFile desc=null;
  JarFile jar=null;
  InputStream in=null;
  try {
    jar=new JarFile(paramFile);
    JarEntry entry=jar.getJarEntry(YAML_SPOUT);
    if (entry == null) {
      entry=jar.getJarEntry(YAML_OTHER);
    }
    if (entry == null) {
      throw new InvalidPluginException(""String_Node_Str"");
    }
    in=jar.getInputStream(entry);
    desc=new PluginDescriptionFile(in);
  }
 catch (  IOException e) {
    throw new InvalidPluginException(e);
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
        engine.getLogger().log(Level.WARNING,""String_Node_Str"",e);
      }
    }
    if (jar != null) {
      try {
        jar.close();
      }
 catch (      IOException e) {
        engine.getLogger().log(Level.WARNING,""String_Node_Str"",e);
      }
    }
  }
  return desc;
}",0.9939984996249064
177451,"public CommonPluginLoader(final Engine game,final CommonSecurityManager manager,final double key){
  this.game=game;
  this.manager=manager;
  this.key=key;
  patterns=new Pattern[]{Pattern.compile(""String_Node_Str"")};
  loader=game.getPlatform() == Platform.CLIENT ? new ClientClassLoader(this,getClass().getClassLoader()) : new CommonClassLoader(this,getClass().getClassLoader());
}","public CommonPluginLoader(final Engine engine,final CommonSecurityManager manager,final double key){
  this.engine=engine;
  this.manager=manager;
  this.key=key;
  patterns=new Pattern[]{Pattern.compile(""String_Node_Str"")};
}",0.6852459016393443
177452,"/** 
 * Adds a task to this executor's queue
 * @param task the runnable to execute
 */
public Future<?> addToQueue(ManagementTask task) throws InterruptedException ;","/** 
 * Adds a task to this executor's queue
 * @param task the runnable to execute
 */
public void addToQueue(ManagementRunnable task) throws InterruptedException ;",0.9305135951661632
177453,"public Managed(AsyncManager manager){
  manager.addManaged(this);
  this.manager=manager;
}","public Managed(AsyncManager manager){
  this.manager=manager;
}",0.8181818181818182
177454,"public SpoutRegion(SpoutWorld world,float x,float y,float z,RegionSource source,LoadOption loadopt){
  super(world,x * Region.BLOCKS.SIZE,y * Region.BLOCKS.SIZE,z * Region.BLOCKS.SIZE);
  this.source=source;
  manager=new SpoutRegionManager(this,2,new ThreadAsyncExecutor(this.toString() + ""String_Node_Str""),world.getEngine());
  AsyncExecutor ae=manager.getExecutor();
  if (ae instanceof Thread) {
    executionThread=(Thread)ae;
  }
 else {
    executionThread=null;
  }
  for (int dx=0; dx < CHUNKS.SIZE; dx++) {
    for (int dy=0; dy < CHUNKS.SIZE; dy++) {
      for (int dz=0; dz < CHUNKS.SIZE; dz++) {
        chunks[dx][dy][dz]=new AtomicReference<SpoutChunk>(loadopt.loadIfNeeded() ? getChunk(dx,dy,dz,loadopt) : null);
      }
    }
  }
  File worldDirectory=world.getDirectory();
  File regionDirectory=new File(worldDirectory,""String_Node_Str"");
  regionDirectory.mkdirs();
  File regionFile=new File(regionDirectory,""String_Node_Str"" + getX() + ""String_Node_Str""+ getY()+ ""String_Node_Str""+ getZ()+ ""String_Node_Str"");
  this.chunkStore=new BAAWrapper(regionFile,SEGMENT_SIZE,CHUNKS.VOLUME,TIMEOUT);
  Thread t;
  AsyncExecutor e=manager.getExecutor();
  if (e instanceof Thread) {
    t=(Thread)e;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  taskManager=new SpoutTaskManager(world.getEngine().getScheduler(),false,t,world.getAge());
}","public SpoutRegion(SpoutWorld world,float x,float y,float z,RegionSource source,LoadOption loadopt){
  super(world,x * Region.BLOCKS.SIZE,y * Region.BLOCKS.SIZE,z * Region.BLOCKS.SIZE);
  this.source=source;
  manager=new SpoutRegionManager(this,2,new ThreadAsyncExecutor(this.toString() + ""String_Node_Str""),world.getEngine());
  AsyncExecutor ae=manager.getExecutor();
  if (ae instanceof Thread) {
    executionThread=(Thread)ae;
  }
 else {
    executionThread=null;
  }
  dynamicBlockTree=new DynamicBlockUpdateTree(this);
  for (int dx=0; dx < CHUNKS.SIZE; dx++) {
    for (int dy=0; dy < CHUNKS.SIZE; dy++) {
      for (int dz=0; dz < CHUNKS.SIZE; dz++) {
        chunks[dx][dy][dz]=new AtomicReference<SpoutChunk>(loadopt.loadIfNeeded() ? getChunk(dx,dy,dz,loadopt) : null);
      }
    }
  }
  File worldDirectory=world.getDirectory();
  File regionDirectory=new File(worldDirectory,""String_Node_Str"");
  regionDirectory.mkdirs();
  File regionFile=new File(regionDirectory,""String_Node_Str"" + getX() + ""String_Node_Str""+ getY()+ ""String_Node_Str""+ getZ()+ ""String_Node_Str"");
  this.chunkStore=new BAAWrapper(regionFile,SEGMENT_SIZE,CHUNKS.VOLUME,TIMEOUT);
  Thread t;
  AsyncExecutor e=manager.getExecutor();
  if (e instanceof Thread) {
    t=(Thread)e;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  taskManager=new SpoutTaskManager(world.getEngine().getScheduler(),false,t,world.getAge());
}",0.9811454998221274
177455,"public DynamicBlockUpdate getNextUpdate(long currentTime){
  if (queuedUpdates.isEmpty()) {
    return null;
  }
 else {
    DynamicBlockUpdate first=queuedUpdates.first();
    if (first == null) {
      return null;
    }
 else {
      if (first.getNextUpdate() <= currentTime) {
        if (!remove(first)) {
          throw new IllegalStateException(""String_Node_Str"");
        }
 else {
          return first;
        }
      }
 else {
        return null;
      }
    }
  }
}","public DynamicBlockUpdate getNextUpdate(long currentTime){
  TickStage.checkStage(TickStage.FINALIZE,regionThread);
  if (queuedUpdates.isEmpty()) {
    return null;
  }
 else {
    DynamicBlockUpdate first=queuedUpdates.first();
    if (first == null) {
      return null;
    }
 else {
      if (first.getNextUpdate() <= currentTime) {
        if (!remove(first)) {
          throw new IllegalStateException(""String_Node_Str"");
        }
 else {
          return first;
        }
      }
 else {
        return null;
      }
    }
  }
}",0.9440628066732092
177456,"public boolean removeDynamicBlockUpdates(Chunk c){
  TickStage.checkStage(TickStage.SNAPSHOT);
  Set<DynamicBlockUpdate> toRemove=getDynamicBlockUpdates(c);
  if (toRemove != null && toRemove.size() > 0) {
    List<DynamicBlockUpdate> list=new ArrayList<DynamicBlockUpdate>(toRemove);
    for (    DynamicBlockUpdate dm : list) {
      remove(dm);
    }
    return false;
  }
 else {
    return true;
  }
}","public boolean removeDynamicBlockUpdates(Chunk c){
  TickStage.checkStage(TickStage.SNAPSHOT,regionThread);
  Set<DynamicBlockUpdate> toRemove=getDynamicBlockUpdates(c);
  if (toRemove != null && toRemove.size() > 0) {
    List<DynamicBlockUpdate> list=new ArrayList<DynamicBlockUpdate>(toRemove);
    for (    DynamicBlockUpdate dm : list) {
      if (!remove(dm)) {
        throw new IllegalStateException(""String_Node_Str"" + c);
      }
    }
    return false;
  }
 else {
    return true;
  }
}",0.8716814159292036
177457,"/** 
 * Removes a specific update
 * @param update the update to remove
 * @return true if the update was removed
 */
private boolean remove(DynamicBlockUpdate update){
  boolean removed=false;
  DynamicBlockUpdate previous=blockToUpdateMap.remove(update.getPacked());
  while (previous != null) {
    if (previous != update) {
      previous=previous.getNext();
      continue;
    }
    removed=true;
    if (!queuedUpdates.remove(previous)) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int previousPacked=previous.getChunkPacked();
    HashSet<DynamicBlockUpdate> chunkSet=chunkToUpdateMap.get(previousPacked);
    if (chunkSet == null || !chunkSet.remove(previous)) {
      throw new IllegalStateException(""String_Node_Str"");
    }
 else {
      if (chunkSet.size() == 0) {
        if (chunkToUpdateMap.remove(previousPacked) == null) {
          throw new IllegalStateException(""String_Node_Str"");
        }
      }
    }
    previous=previous.getNext();
  }
  return removed;
}","/** 
 * Removes a specific update
 * @param update the update to remove
 * @return true if the update was removed
 */
private boolean remove(DynamicBlockUpdate update){
  boolean removed=false;
  int packedKey=update.getPacked();
  DynamicBlockUpdate root=blockToUpdateMap.get(packedKey);
  DynamicBlockUpdate current=root;
  DynamicBlockUpdate previous=null;
  boolean rootChanged=false;
  while (current != null) {
    if (current != update) {
      previous=current;
      current=current.getNext();
      continue;
    }
    removed=true;
    if (!queuedUpdates.remove(current)) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int currentPacked=current.getChunkPacked();
    HashSet<DynamicBlockUpdate> chunkSet=chunkToUpdateMap.get(currentPacked);
    if (chunkSet == null || !chunkSet.remove(current)) {
      throw new IllegalStateException(""String_Node_Str"");
    }
 else {
      if (chunkSet.size() == 0) {
        if (chunkToUpdateMap.remove(currentPacked) == null) {
          throw new IllegalStateException(""String_Node_Str"");
        }
      }
    }
    if (current == root) {
      root=current.getNext();
      current=root;
      rootChanged=true;
    }
 else {
      if (previous.remove(current) != previous) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      current=previous.getNext();
    }
  }
  if (rootChanged) {
    if (root != null) {
      blockToUpdateMap.put(packedKey,root);
    }
 else {
      blockToUpdateMap.remove(packedKey);
    }
  }
  return removed;
}",0.5760314341846758
177458,"public DynamicBlockUpdateTree(SpoutRegion region){
  this.region=region;
}","public DynamicBlockUpdateTree(SpoutRegion region){
  this.region=region;
  this.regionThread=region.getExceutionThread();
}",0.751269035532995
177459,"public boolean updateDynamicBlock(long currentTime,DynamicBlockUpdate update,boolean force){
  int bx=update.getX();
  int by=update.getY();
  int bz=update.getZ();
  Chunk c=region.getChunkFromBlock(bx,by,bz,LoadOption.NO_LOAD);
  if (c == null) {
    return true;
  }
  Block b=c.getBlock(bx,by,bz);
  Material m=b.getMaterial();
  if (m instanceof DynamicMaterial) {
    DynamicMaterial dm=(DynamicMaterial)m;
    Vector3[] range=(force) ? zeroVector3Array : dm.maxRange();
    if (range == null || range.length < 1) {
      range=zeroVector3Array;
    }
    Vector3 rangeHigh=range[0];
    Vector3 rangeLow=range.length < 2 ? range[0] : range[1];
    int rhx=(int)rangeHigh.getX();
    int rhy=(int)rangeHigh.getY();
    int rhz=(int)rangeHigh.getZ();
    if (rhx < 0 || rhy < 0 || rhz < 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    int rlx=(int)rangeLow.getX();
    int rly=(int)rangeLow.getY();
    int rlz=(int)rangeLow.getZ();
    if (rlx < 0 || rly < 0 || rlz < 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    int maxx=bx + rhx;
    int maxy=by + rhy;
    int maxz=bz + rhz;
    int minx=bx - rlx;
    int miny=by - rly;
    int minz=bz - rlz;
    int rs=Region.BLOCKS.SIZE;
    if (maxx >= rs || maxy >= rs || maxz >= rs || minx < 0 || miny < 0 || minz < 0) {
      return false;
    }
 else {
      long nextUpdate=dm.update(b,region,update.getNextUpdate(),update.getLastUpdate(),update.getHint());
      if (nextUpdate > 0) {
        add(new DynamicBlockUpdate(bx,by,bz,nextUpdate,currentTime,null));
      }
      return true;
    }
  }
 else {
    return true;
  }
}","public boolean updateDynamicBlock(long currentTime,DynamicBlockUpdate update,boolean force){
  TickStage.checkStage(TickStage.FINALIZE,regionThread);
  int bx=update.getX();
  int by=update.getY();
  int bz=update.getZ();
  Chunk c=region.getChunkFromBlock(bx,by,bz,LoadOption.NO_LOAD);
  if (c == null) {
    return true;
  }
  Block b=c.getBlock(bx,by,bz);
  Material m=b.getMaterial();
  if (m instanceof DynamicMaterial) {
    DynamicMaterial dm=(DynamicMaterial)m;
    Vector3[] range=(force) ? zeroVector3Array : dm.maxRange();
    if (range == null || range.length < 1) {
      range=zeroVector3Array;
    }
    Vector3 rangeHigh=range[0];
    Vector3 rangeLow=range.length < 2 ? range[0] : range[1];
    int rhx=(int)rangeHigh.getX();
    int rhy=(int)rangeHigh.getY();
    int rhz=(int)rangeHigh.getZ();
    if (rhx < 0 || rhy < 0 || rhz < 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    int rlx=(int)rangeLow.getX();
    int rly=(int)rangeLow.getY();
    int rlz=(int)rangeLow.getZ();
    if (rlx < 0 || rly < 0 || rlz < 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    int maxx=bx + rhx;
    int maxy=by + rhy;
    int maxz=bz + rhz;
    int minx=bx - rlx;
    int miny=by - rly;
    int minz=bz - rlz;
    int rs=Region.BLOCKS.SIZE;
    if (maxx >= rs || maxy >= rs || maxz >= rs || minx < 0 || miny < 0 || minz < 0) {
      return false;
    }
 else {
      long nextUpdate=dm.update(b,region,update.getNextUpdate(),update.getLastUpdate(),update.getHint());
      if (nextUpdate > 0) {
        add(new DynamicBlockUpdate(bx,by,bz,nextUpdate,currentTime,null));
      }
      return true;
    }
  }
 else {
    return true;
  }
}",0.9829085457271364
177460,"public void commitPending(long currentTime){
  TickStage.checkStage(TickStage.FINALIZE);
  List<DynamicBlockUpdate> l;
  while ((l=pendingLists.poll()) != null) {
    for (    DynamicBlockUpdate update : l) {
      add(update);
    }
  }
  processed.clear();
  PointAlone p;
  while ((p=resetPending.poll()) != null) {
    int packed=DynamicBlockUpdate.getPointPacked(p);
    if (!processed.add(packed)) {
      continue;
    }
    int bx=p.getBlockX() & Region.BLOCKS.MASK;
    int by=p.getBlockY() & Region.BLOCKS.MASK;
    int bz=p.getBlockZ() & Region.BLOCKS.MASK;
    removeAll(DynamicBlockUpdate.getBlockPacked(bx,by,bz));
    Chunk c=region.getChunkFromBlock(bx,by,bz,LoadOption.NO_LOAD);
    if (c == null) {
      continue;
    }
    Block b=c.getBlock(bx,by,bz);
    Material m=b.getMaterial();
    if (m instanceof DynamicMaterial) {
      DynamicMaterial dm=(DynamicMaterial)m;
      long nextUpdate=dm.onPlacement(b,region,currentTime);
      if (nextUpdate > 0) {
        add(new DynamicBlockUpdate(bx,by,bz,nextUpdate,currentTime,null));
      }
    }
  }
  while ((p=pending.poll()) != null) {
    int packed=DynamicBlockUpdate.getPointPacked(p);
    if (!processed.add(packed)) {
      continue;
    }
    int bx=p.getBlockX() & Region.BLOCKS.MASK;
    int by=p.getBlockY() & Region.BLOCKS.MASK;
    int bz=p.getBlockZ() & Region.BLOCKS.MASK;
    Object hint=p.getHint();
    long updateTime=p.getUpdateTime();
    add(new DynamicBlockUpdate(bx,by,bz,updateTime,currentTime,hint));
  }
  processed.clear();
}","public void commitPending(long currentTime){
  TickStage.checkStage(TickStage.FINALIZE,regionThread);
  List<DynamicBlockUpdate> l;
  while ((l=pendingLists.poll()) != null) {
    for (    DynamicBlockUpdate update : l) {
      add(update);
    }
  }
  processed.clear();
  PointAlone p;
  while ((p=resetPending.poll()) != null) {
    int packed=DynamicBlockUpdate.getPointPacked(p);
    if (!processed.add(packed)) {
      continue;
    }
    int bx=p.getBlockX() & Region.BLOCKS.MASK;
    int by=p.getBlockY() & Region.BLOCKS.MASK;
    int bz=p.getBlockZ() & Region.BLOCKS.MASK;
    removeAll(DynamicBlockUpdate.getBlockPacked(bx,by,bz));
    Chunk c=region.getChunkFromBlock(bx,by,bz,LoadOption.NO_LOAD);
    if (c == null) {
      continue;
    }
    Block b=c.getBlock(bx,by,bz);
    Material m=b.getMaterial();
    if (m instanceof DynamicMaterial) {
      DynamicMaterial dm=(DynamicMaterial)m;
      long nextUpdate=dm.onPlacement(b,region,currentTime);
      if (nextUpdate > 0) {
        add(new DynamicBlockUpdate(bx,by,bz,nextUpdate,currentTime,null));
      }
    }
  }
  while ((p=pending.poll()) != null) {
    int packed=DynamicBlockUpdate.getPointPacked(p);
    if (!processed.add(packed)) {
      continue;
    }
    int bx=p.getBlockX() & Region.BLOCKS.MASK;
    int by=p.getBlockY() & Region.BLOCKS.MASK;
    int bz=p.getBlockZ() & Region.BLOCKS.MASK;
    Object hint=p.getHint();
    long updateTime=p.getUpdateTime();
    add(new DynamicBlockUpdate(bx,by,bz,updateTime,currentTime,hint));
  }
  processed.clear();
}",0.9957557949722494
177461,"private void checkStoreCompressed(){
  double loadFactor=(double)store.getEntries() / (double)store.getSize();
  System.out.println(""String_Node_Str"" + store.getEntries() + ""String_Node_Str""+ store.getSize()+ ""String_Node_Str""+ loadFactor+ ""String_Node_Str"");
  System.out.println();
  assertTrue(""String_Node_Str"" + loadFactor,loadFactor > 0.37 && loadFactor < 0.76);
}","private void checkStoreCompressed(){
  if (store.getSize() <= 3 && store.getEntries() <= 3) {
    return;
  }
  double loadFactor=(double)store.getEntries() / (double)store.getSize();
  System.out.println(""String_Node_Str"" + store.getEntries() + ""String_Node_Str""+ store.getSize()+ ""String_Node_Str""+ loadFactor+ ""String_Node_Str"");
  System.out.println();
  assertTrue(""String_Node_Str"" + loadFactor,loadFactor > 0.37 && loadFactor < 0.76);
}",0.9102091020910208
177462,"private boolean remove(DynamicBlockUpdate update){
  int packed=update.getPacked();
  DynamicBlockUpdate previous=blockToUpdateMap.remove(packed);
  if (previous != null) {
    if (!queuedUpdates.remove(previous)) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    HashSet<DynamicBlockUpdate> chunkSet=chunkToUpdateMap.get(previous.getChunkPacked());
    if (chunkSet == null || !chunkSet.remove(update)) {
      throw new IllegalStateException(""String_Node_Str"");
    }
 else {
      if (chunkSet.size() == 0) {
        if (chunkToUpdateMap.remove(previous.getChunkPacked()) == null) {
          throw new IllegalStateException(""String_Node_Str"");
        }
      }
    }
    return true;
  }
 else {
    return false;
  }
}","private boolean remove(DynamicBlockUpdate update){
  int packed=update.getPacked();
  DynamicBlockUpdate previous=blockToUpdateMap.remove(packed);
  if (previous != null) {
    if (!queuedUpdates.remove(previous)) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int previousPacked=previous.getChunkPacked();
    HashSet<DynamicBlockUpdate> chunkSet=chunkToUpdateMap.get(previousPacked);
    if (chunkSet == null || !chunkSet.remove(previous)) {
      throw new IllegalStateException(""String_Node_Str"");
    }
 else {
      if (chunkSet.size() == 0) {
        if (chunkToUpdateMap.remove(previousPacked) == null) {
          throw new IllegalStateException(""String_Node_Str"");
        }
      }
    }
    return true;
  }
 else {
    return false;
  }
}",0.9433465085639
177463,"private static Entity loadEntity(SpoutRegion r,CompoundTag tag){
  CompoundMap map=tag.getValue();
  @SuppressWarnings(""String_Node_Str"") byte version=(Byte)map.get(""String_Node_Str"").getValue();
  String name=(String)map.get(""String_Node_Str"").getValue();
  ControllerType type=ControllerRegistry.get(name);
  if (type == null) {
    Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + name);
  }
 else   if (type.canCreateController()) {
    float pX=(Float)map.get(""String_Node_Str"").getValue();
    float pY=(Float)map.get(""String_Node_Str"").getValue();
    float pZ=(Float)map.get(""String_Node_Str"").getValue();
    float sX=(Float)map.get(""String_Node_Str"").getValue();
    float sY=(Float)map.get(""String_Node_Str"").getValue();
    float sZ=(Float)map.get(""String_Node_Str"").getValue();
    float qX=(Float)map.get(""String_Node_Str"").getValue();
    float qY=(Float)map.get(""String_Node_Str"").getValue();
    float qZ=(Float)map.get(""String_Node_Str"").getValue();
    float qW=(Float)map.get(""String_Node_Str"").getValue();
    long msb=(Long)map.get(""String_Node_Str"").getValue();
    long lsb=(Long)map.get(""String_Node_Str"").getValue();
    UUID uid=new UUID(msb,lsb);
    int view=(Integer)map.get(""String_Node_Str"").getValue();
    boolean observer=((ByteTag)map.get(""String_Node_Str"")).getBooleanValue();
    Controller controller=type.createController();
    try {
      if (((ByteTag)map.get(""String_Node_Str"")).getBooleanValue()) {
        byte[] data=((ByteArrayTag)map.get(""String_Node_Str"")).getValue();
        DatatableMap dataMap=((DataMap)controller.data()).getRawMap();
        dataMap.decompress(data);
      }
    }
 catch (    Exception error) {
      Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + type.getName(),error);
    }
    Transform t=new Transform(new Point(r != null ? r.getWorld() : null,pX,pY,pZ),new Quaternion(qX,qY,qZ,qW,false),new Vector3(sX,sY,sZ));
    SpoutEntity e=new SpoutEntity((SpoutEngine)Spout.getEngine(),t,controller,view,uid,false);
    e.setObserver(observer);
    if (r != null) {
      r.addEntity(e);
    }
    return e;
  }
 else {
    Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + type.getName());
  }
  return null;
}","private static SpoutEntity loadEntity(SpoutRegion r,CompoundTag tag){
  CompoundMap map=tag.getValue();
  @SuppressWarnings(""String_Node_Str"") byte version=(Byte)map.get(""String_Node_Str"").getValue();
  String name=(String)map.get(""String_Node_Str"").getValue();
  ControllerType type=ControllerRegistry.get(name);
  if (type == null) {
    Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + name);
  }
 else   if (type.canCreateController()) {
    float pX=(Float)map.get(""String_Node_Str"").getValue();
    float pY=(Float)map.get(""String_Node_Str"").getValue();
    float pZ=(Float)map.get(""String_Node_Str"").getValue();
    float sX=(Float)map.get(""String_Node_Str"").getValue();
    float sY=(Float)map.get(""String_Node_Str"").getValue();
    float sZ=(Float)map.get(""String_Node_Str"").getValue();
    float qX=(Float)map.get(""String_Node_Str"").getValue();
    float qY=(Float)map.get(""String_Node_Str"").getValue();
    float qZ=(Float)map.get(""String_Node_Str"").getValue();
    float qW=(Float)map.get(""String_Node_Str"").getValue();
    long msb=(Long)map.get(""String_Node_Str"").getValue();
    long lsb=(Long)map.get(""String_Node_Str"").getValue();
    UUID uid=new UUID(msb,lsb);
    int view=(Integer)map.get(""String_Node_Str"").getValue();
    boolean observer=((ByteTag)map.get(""String_Node_Str"")).getBooleanValue();
    Controller controller=type.createController();
    try {
      if (((ByteTag)map.get(""String_Node_Str"")).getBooleanValue()) {
        byte[] data=((ByteArrayTag)map.get(""String_Node_Str"")).getValue();
        DatatableMap dataMap=((DataMap)controller.data()).getRawMap();
        dataMap.decompress(data);
      }
    }
 catch (    Exception error) {
      Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + type.getName(),error);
    }
    Transform t=new Transform(new Point(r != null ? r.getWorld() : null,pX,pY,pZ),new Quaternion(qX,qY,qZ,qW,false),new Vector3(sX,sY,sZ));
    SpoutEntity e=new SpoutEntity((SpoutEngine)Spout.getEngine(),t,controller,view,uid,false);
    e.setObserver(observer);
    return e;
  }
 else {
    Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + type.getName());
  }
  return null;
}",0.9878048780487804
177464,"public static SpoutChunk loadChunk(SpoutRegion r,int x,int y,int z,InputStream dis){
  SpoutChunk chunk=null;
  NBTInputStream is=null;
  try {
    if (dis == null) {
      return chunk;
    }
    is=new NBTInputStream(dis,false);
    CompoundTag chunkTag=(CompoundTag)is.readTag();
    CompoundMap map=chunkTag.getValue();
    int cx=(r.getX() << Region.REGION_SIZE_BITS) + x;
    int cy=(r.getY() << Region.REGION_SIZE_BITS) + y;
    int cz=(r.getZ() << Region.REGION_SIZE_BITS) + z;
    boolean populated=((ByteTag)map.get(""String_Node_Str"")).getBooleanValue();
    short[] blocks=(short[])map.get(""String_Node_Str"").getValue();
    short[] data=(short[])map.get(""String_Node_Str"").getValue();
    byte[] skyLight=(byte[])map.get(""String_Node_Str"").getValue();
    byte[] blockLight=(byte[])map.get(""String_Node_Str"").getValue();
    byte[] extraData=(byte[])map.get(""String_Node_Str"").getValue();
    BiomeManager manager=null;
    if (map.containsKey(""String_Node_Str"")) {
      try {
        String biomeManagerClass=(String)map.get(""String_Node_Str"").getValue();
        byte[] biomes=(byte[])map.get(""String_Node_Str"").getValue();
        @SuppressWarnings(""String_Node_Str"") Class<? extends BiomeManager> clazz=(Class<? extends BiomeManager>)Class.forName(biomeManagerClass);
        Class<?>[] params={int.class,int.class,int.class};
        manager=clazz.getConstructor(params).newInstance(cx,cy,cz);
        manager.deserialize(biomes);
      }
 catch (      Exception e) {
        Spout.getLogger().severe(""String_Node_Str"");
        e.printStackTrace();
      }
    }
    if (manager == null) {
      manager=new EmptyBiomeManager(cx,cy,cz);
    }
    SpoutWorld world=r.getWorld();
    StringMap global=((SpoutEngine)Spout.getEngine()).getEngineItemMap();
    StringMap itemMap=world.getItemMap();
    for (int i=0; i < blocks.length; i++) {
      blocks[i]=(short)itemMap.convertTo(global,blocks[i]);
    }
    DatatableMap extraDataMap=new GenericDatatableMap();
    extraDataMap.decompress(extraData);
    chunk=new FilteredChunk(r.getWorld(),r,cx,cy,cz,populated,blocks,data,skyLight,blockLight,manager,extraDataMap);
    loadEntities(r,(CompoundMap)map.get(""String_Node_Str"").getValue());
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException ignore) {
      }
    }
  }
  return chunk;
}","public static SpoutChunk loadChunk(SpoutRegion r,int x,int y,int z,InputStream dis,List<SpoutEntity> loadedEntities){
  SpoutChunk chunk=null;
  NBTInputStream is=null;
  try {
    if (dis == null) {
      return chunk;
    }
    is=new NBTInputStream(dis,false);
    CompoundTag chunkTag=(CompoundTag)is.readTag();
    CompoundMap map=chunkTag.getValue();
    int cx=(r.getX() << Region.REGION_SIZE_BITS) + x;
    int cy=(r.getY() << Region.REGION_SIZE_BITS) + y;
    int cz=(r.getZ() << Region.REGION_SIZE_BITS) + z;
    boolean populated=((ByteTag)map.get(""String_Node_Str"")).getBooleanValue();
    short[] blocks=(short[])map.get(""String_Node_Str"").getValue();
    short[] data=(short[])map.get(""String_Node_Str"").getValue();
    byte[] skyLight=(byte[])map.get(""String_Node_Str"").getValue();
    byte[] blockLight=(byte[])map.get(""String_Node_Str"").getValue();
    byte[] extraData=(byte[])map.get(""String_Node_Str"").getValue();
    BiomeManager manager=null;
    if (map.containsKey(""String_Node_Str"")) {
      try {
        String biomeManagerClass=(String)map.get(""String_Node_Str"").getValue();
        byte[] biomes=(byte[])map.get(""String_Node_Str"").getValue();
        @SuppressWarnings(""String_Node_Str"") Class<? extends BiomeManager> clazz=(Class<? extends BiomeManager>)Class.forName(biomeManagerClass);
        Class<?>[] params={int.class,int.class,int.class};
        manager=clazz.getConstructor(params).newInstance(cx,cy,cz);
        manager.deserialize(biomes);
      }
 catch (      Exception e) {
        Spout.getLogger().severe(""String_Node_Str"");
        e.printStackTrace();
      }
    }
    if (manager == null) {
      manager=new EmptyBiomeManager(cx,cy,cz);
    }
    SpoutWorld world=r.getWorld();
    StringMap global=((SpoutEngine)Spout.getEngine()).getEngineItemMap();
    StringMap itemMap=world.getItemMap();
    for (int i=0; i < blocks.length; i++) {
      blocks[i]=(short)itemMap.convertTo(global,blocks[i]);
    }
    DatatableMap extraDataMap=new GenericDatatableMap();
    extraDataMap.decompress(extraData);
    chunk=new FilteredChunk(r.getWorld(),r,cx,cy,cz,populated,blocks,data,skyLight,blockLight,manager,extraDataMap);
    loadEntities(r,(CompoundMap)map.get(""String_Node_Str"").getValue(),loadedEntities);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException ignore) {
      }
    }
  }
  return chunk;
}",0.9901518260155928
177465,"private static void loadEntities(SpoutRegion r,CompoundMap map){
  if (r != null && map != null) {
    for (    Tag tag : map) {
      loadEntity(r,(CompoundTag)tag);
    }
  }
}","private static void loadEntities(SpoutRegion r,CompoundMap map,List<SpoutEntity> loadedEntities){
  if (r != null && map != null) {
    for (    Tag tag : map) {
      loadedEntities.add(loadEntity(r,(CompoundTag)tag));
    }
  }
}",0.8704156479217604
177466,"@Override @LiveRead public SpoutChunk getChunk(int x,int y,int z,LoadGenerateOption loadopt){
  if (x < Region.REGION_SIZE && x >= 0 && y < Region.REGION_SIZE && y >= 0 && z < Region.REGION_SIZE && z >= 0) {
    SpoutChunk chunk=chunks[x][y][z].get();
    if (chunk != null || (!loadopt.loadIfNeeded())) {
      return chunk;
    }
    AtomicReference<SpoutChunk> ref=chunks[x][y][z];
    boolean success=false;
    SpoutChunk newChunk=WorldFiles.loadChunk(this,x,y,z,this.getChunkInputStream(x,y,z));
    if (newChunk == null) {
      if (!loadopt.generateIfNeeded()) {
        return null;
      }
      newChunk=generateChunk(x,y,z);
    }
    while (!success) {
      success=ref.compareAndSet(null,newChunk);
      if (success) {
        newChunk.notifyColumn();
        numberActiveChunks.incrementAndGet();
        if (!newChunk.isPopulated()) {
          nonPopulatedChunks.add(newChunk);
        }
        runningChunksQueue.add(newChunk);
        return newChunk;
      }
 else {
        newChunk.deregisterFromColumn(false);
        SpoutChunk oldChunk=ref.get();
        if (oldChunk != null) {
          return oldChunk;
        }
      }
    }
  }
  throw new IndexOutOfBoundsException(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str"");
}","@Override @LiveRead public SpoutChunk getChunk(int x,int y,int z,LoadGenerateOption loadopt){
  if (x < Region.REGION_SIZE && x >= 0 && y < Region.REGION_SIZE && y >= 0 && z < Region.REGION_SIZE && z >= 0) {
    SpoutChunk chunk=chunks[x][y][z].get();
    if (chunk != null || (!loadopt.loadIfNeeded())) {
      return chunk;
    }
    AtomicReference<SpoutChunk> ref=chunks[x][y][z];
    boolean success=false;
    List<SpoutEntity> newEntities=new ArrayList<SpoutEntity>(100);
    SpoutChunk newChunk=WorldFiles.loadChunk(this,x,y,z,this.getChunkInputStream(x,y,z),newEntities);
    if (newChunk == null) {
      if (!loadopt.generateIfNeeded()) {
        return null;
      }
      newChunk=generateChunk(x,y,z);
    }
    while (!success) {
      success=ref.compareAndSet(null,newChunk);
      if (success) {
        newChunk.notifyColumn();
        numberActiveChunks.incrementAndGet();
        if (!newChunk.isPopulated()) {
          nonPopulatedChunks.add(newChunk);
        }
        for (        SpoutEntity entity : newEntities) {
          entity.setupInitialChunk(entity.getTransform());
          addEntity(entity);
        }
        runningChunksQueue.add(newChunk);
        return newChunk;
      }
 else {
        newChunk.deregisterFromColumn(false);
        SpoutChunk oldChunk=ref.get();
        if (oldChunk != null) {
          return oldChunk;
        }
      }
    }
  }
  throw new IndexOutOfBoundsException(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str"");
}",0.9167852062588904
177467,"public void onDeath(){
  death=true;
  entity=null;
  for (  Point p : initializedChunks) {
    removeObserver(p);
  }
}","public void onDeath(){
  TickStage.checkStage(TickStage.FINALIZE);
  death=true;
  entity=null;
  for (  Point p : initializedChunks) {
    removeObserver(p);
  }
}",0.8450704225352113
177468,"private void removeObserver(){
  if (controllerLive.get() instanceof PlayerController) {
    return;
  }
  for (  SpoutChunk chunk : observingChunks) {
    if (chunk.isLoaded()) {
      chunk.removeObserver(this);
    }
  }
  observingChunks.clear();
}","private void removeObserver(){
  if (controllerLive.get() instanceof PlayerController) {
    Player p=((PlayerController)controllerLive.get()).getPlayer();
    p.getNetworkSynchronizer().onDeath();
    return;
  }
  for (  SpoutChunk chunk : observingChunks) {
    if (chunk.isLoaded()) {
      chunk.removeObserver(this);
    }
  }
  observingChunks.clear();
}",0.8221859706362153
177469,"/** 
 * Creates a new task scheduler.
 */
public SpoutScheduler(Engine server){
  this.server=server;
  mainThread=new MainThread();
  renderThread=new RenderThread();
  taskManager=new SpoutTaskManager(this,true,mainThread);
  parallelTaskManager=(SpoutParallelTaskManager)server.getParallelTaskManager();
}","/** 
 * Creates a new task scheduler.
 */
public SpoutScheduler(Engine engine){
  this.engine=engine;
  mainThread=new MainThread();
  renderThread=new RenderThread();
  taskManager=new SpoutTaskManager(this,true,mainThread);
}",0.7775700934579439
177470,"/** 
 * Adds new tasks and updates existing tasks, removing them if necessary.
 */
private boolean tick(long delta) throws InterruptedException {
  TickStage.setStage(TickStage.TICKSTART);
  asyncExecutors.copySnapshot();
  taskManager.heartbeat(delta);
  parallelTaskManager.heartbeat(delta);
  List<AsyncExecutor> executors=asyncExecutors.get();
  int stage=0;
  boolean allStagesComplete=false;
  boolean joined=false;
  TickStage.setStage(TickStage.STAGE1);
  while (!allStagesComplete) {
    if (stage == 0) {
      TickStage.setStage(TickStage.STAGE1);
    }
 else {
      TickStage.setStage(TickStage.STAGE2P);
    }
    allStagesComplete=true;
    for (    AsyncExecutor e : executors) {
      if (stage < e.getManager().getStages()) {
        allStagesComplete=false;
        if (!e.startTick(stage,delta)) {
          return false;
        }
      }
 else {
        continue;
      }
    }
    joined=false;
    while (!joined) {
      try {
        AsyncExecutorUtils.pulseJoinAll(executors,(PULSE_EVERY << 4));
        joined=true;
      }
 catch (      TimeoutException e) {
        if (((SpoutEngine)Spout.getEngine()).isSetupComplete()) {
          server.getLogger().info(""String_Node_Str"" + (PULSE_EVERY << 4) + ""String_Node_Str"");
          AsyncExecutorUtils.dumpAllStacks();
          AsyncExecutorUtils.checkForDeadlocks();
        }
      }
    }
    stage++;
  }
  copySnapshot(executors);
  return true;
}","/** 
 * Adds new tasks and updates existing tasks, removing them if necessary.
 */
private boolean tick(long delta) throws InterruptedException {
  TickStage.setStage(TickStage.TICKSTART);
  asyncExecutors.copySnapshot();
  taskManager.heartbeat(delta);
  ((SpoutParallelTaskManager)engine.getParallelTaskManager()).heartbeat(delta);
  List<AsyncExecutor> executors=asyncExecutors.get();
  int stage=0;
  boolean allStagesComplete=false;
  boolean joined=false;
  TickStage.setStage(TickStage.STAGE1);
  while (!allStagesComplete) {
    if (stage == 0) {
      TickStage.setStage(TickStage.STAGE1);
    }
 else {
      TickStage.setStage(TickStage.STAGE2P);
    }
    allStagesComplete=true;
    for (    AsyncExecutor e : executors) {
      if (stage < e.getManager().getStages()) {
        allStagesComplete=false;
        if (!e.startTick(stage,delta)) {
          return false;
        }
      }
 else {
        continue;
      }
    }
    joined=false;
    while (!joined) {
      try {
        AsyncExecutorUtils.pulseJoinAll(executors,(PULSE_EVERY << 4));
        joined=true;
      }
 catch (      TimeoutException e) {
        if (((SpoutEngine)Spout.getEngine()).isSetupComplete()) {
          engine.getLogger().info(""String_Node_Str"" + (PULSE_EVERY << 4) + ""String_Node_Str"");
          AsyncExecutorUtils.dumpAllStacks();
          AsyncExecutorUtils.checkForDeadlocks();
        }
      }
    }
    stage++;
  }
  copySnapshot(executors);
  return true;
}",0.9813664596273292
177471,"private void lockSnapshotLock(){
  int delay=500;
  int threshold=50;
  long startTime=System.currentTimeMillis();
  boolean success=false;
  while (!success) {
    success=snapshotLock.writeLock(delay);
    if (!success) {
      delay*=1.5;
      List<Plugin> violatingPlugins=snapshotLock.getLockingPlugins(threshold);
      server.getLogger().info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
      for (      Plugin p : violatingPlugins) {
        server.getLogFile().indexOf(p.getDescription().getName() + ""String_Node_Str"" + threshold+ ""String_Node_Str"");
      }
    }
  }
}","private void lockSnapshotLock(){
  int delay=500;
  int threshold=50;
  long startTime=System.currentTimeMillis();
  boolean success=false;
  while (!success) {
    success=snapshotLock.writeLock(delay);
    if (!success) {
      delay*=1.5;
      List<Plugin> violatingPlugins=snapshotLock.getLockingPlugins(threshold);
      engine.getLogger().info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
      for (      Plugin p : violatingPlugins) {
        engine.getLogFile().indexOf(p.getDescription().getName() + ""String_Node_Str"" + threshold+ ""String_Node_Str"");
      }
    }
  }
}",0.7592891760904685
177472,"private void copySnapshot(List<AsyncExecutor> executors) throws InterruptedException {
  TickStage.setStage(TickStage.FINALIZE);
  for (  AsyncExecutor e : executors) {
    if (!e.finalizeTick()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  boolean joined=false;
  while (!joined) {
    try {
      AsyncExecutorUtils.pulseJoinAll(executors,(PULSE_EVERY << 4));
      joined=true;
    }
 catch (    TimeoutException e) {
      if (((SpoutEngine)Spout.getEngine()).isSetupComplete()) {
        server.getLogger().info(""String_Node_Str"" + (PULSE_EVERY << 4) + ""String_Node_Str"");
        AsyncExecutorUtils.dumpAllStacks();
        AsyncExecutorUtils.checkForDeadlocks();
      }
    }
  }
  lockSnapshotLock();
  TickStage.setStage(TickStage.PRESNAPSHOT);
  try {
    for (    AsyncExecutor e : executors) {
      if (!e.preSnapshot()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
    joined=false;
    while (!joined) {
      try {
        AsyncExecutorUtils.pulseJoinAll(executors,(PULSE_EVERY << 4));
        joined=true;
      }
 catch (      TimeoutException e) {
        if (((SpoutEngine)Spout.getEngine()).isSetupComplete()) {
          server.getLogger().info(""String_Node_Str"" + (PULSE_EVERY << 4) + ""String_Node_Str"");
          AsyncExecutorUtils.dumpAllStacks();
        }
      }
    }
    TickStage.setStage(TickStage.SNAPSHOT);
    for (    AsyncExecutor e : executors) {
      if (!e.copySnapshot()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
    joined=false;
    while (!joined) {
      try {
        AsyncExecutorUtils.pulseJoinAll(executors,(PULSE_EVERY << 4));
        joined=true;
      }
 catch (      TimeoutException e) {
        if (((SpoutEngine)Spout.getEngine()).isSetupComplete()) {
          server.getLogger().info(""String_Node_Str"" + (PULSE_EVERY << 4) + ""String_Node_Str"");
          AsyncExecutorUtils.dumpAllStacks();
        }
      }
    }
  }
  finally {
    unlockSnapshotLock();
  }
}","private void copySnapshot(List<AsyncExecutor> executors) throws InterruptedException {
  TickStage.setStage(TickStage.FINALIZE);
  for (  AsyncExecutor e : executors) {
    if (!e.finalizeTick()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  boolean joined=false;
  while (!joined) {
    try {
      AsyncExecutorUtils.pulseJoinAll(executors,(PULSE_EVERY << 4));
      joined=true;
    }
 catch (    TimeoutException e) {
      if (((SpoutEngine)Spout.getEngine()).isSetupComplete()) {
        engine.getLogger().info(""String_Node_Str"" + (PULSE_EVERY << 4) + ""String_Node_Str"");
        AsyncExecutorUtils.dumpAllStacks();
        AsyncExecutorUtils.checkForDeadlocks();
      }
    }
  }
  lockSnapshotLock();
  TickStage.setStage(TickStage.PRESNAPSHOT);
  try {
    for (    AsyncExecutor e : executors) {
      if (!e.preSnapshot()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
    joined=false;
    while (!joined) {
      try {
        AsyncExecutorUtils.pulseJoinAll(executors,(PULSE_EVERY << 4));
        joined=true;
      }
 catch (      TimeoutException e) {
        if (((SpoutEngine)Spout.getEngine()).isSetupComplete()) {
          engine.getLogger().info(""String_Node_Str"" + (PULSE_EVERY << 4) + ""String_Node_Str"");
          AsyncExecutorUtils.dumpAllStacks();
        }
      }
    }
    TickStage.setStage(TickStage.SNAPSHOT);
    for (    AsyncExecutor e : executors) {
      if (!e.copySnapshot()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
    joined=false;
    while (!joined) {
      try {
        AsyncExecutorUtils.pulseJoinAll(executors,(PULSE_EVERY << 4));
        joined=true;
      }
 catch (      TimeoutException e) {
        if (((SpoutEngine)Spout.getEngine()).isSetupComplete()) {
          engine.getLogger().info(""String_Node_Str"" + (PULSE_EVERY << 4) + ""String_Node_Str"");
          AsyncExecutorUtils.dumpAllStacks();
        }
      }
    }
  }
  finally {
    unlockSnapshotLock();
  }
}",0.9910714285714286
177473,"/** 
 * Stops the scheduler and waits for all tasks to complete
 * @param timeout the time in ms, after the main thread completes, to wait for all the tasks to stop
 */
public void stop(long timeout){
  shutdown=true;
  try {
    mainThread.join(timeout);
    if (renderThread != null) {
      renderThread.join(timeout);
    }
  }
 catch (  InterruptedException e) {
    server.getLogger().info(""String_Node_Str"");
  }
  if (timeout > 0) {
    taskManager.shutdown(timeout);
  }
 else {
    taskManager.shutdown(1L);
  }
}","/** 
 * Stops the scheduler and waits for all tasks to complete
 * @param timeout the time in ms, after the main thread completes, to wait for all the tasks to stop
 */
public void stop(long timeout){
  shutdown=true;
  try {
    mainThread.join(timeout);
    if (renderThread != null) {
      renderThread.join(timeout);
    }
  }
 catch (  InterruptedException e) {
    engine.getLogger().info(""String_Node_Str"");
  }
  if (timeout > 0) {
    taskManager.shutdown(timeout);
  }
 else {
    taskManager.shutdown(1L);
  }
}",0.988527724665392
177474,"/** 
 * Deallocates the id for an entity.
 * @param entity The entity.
 */
public void deallocate(SpoutEntity entity){
  EntityDespawnEvent event=new EntityDespawnEvent(entity);
  Spout.getEngine().getEventManager().callEvent(event);
  if (event.isCancelled()) {
    return;
  }
  entities.remove(entity.getId());
  Controller controller=entity.getController();
  if (controller != null) {
    getRawAll(entity.getController().getClass()).remove(entity);
  }
}","/** 
 * Deallocates the id for an entity.
 * @param entity The entity.
 */
public void deallocate(SpoutEntity entity){
  entities.remove(entity.getId());
  Controller controller=entity.getController();
  if (controller != null) {
    getRawAll(entity.getController().getClass()).remove(entity);
  }
}",0.7894736842105263
177475,"@Override public void onTick(float dt){
  if (this.transform != null && this.transform.getPosition() != null && this.transform.getPosition().getWorld() != null && this.transform.getRotation() != null && this.transform.getScale() != null) {
    if (lastTransform != this.transform) {
      chunkLive.set(transform.getPosition().getWorld().getChunkFromBlock(transform.getPosition()));
      entityManagerLive.set(((SpoutRegion)chunkLive.get().getRegion()).getEntityManager());
    }
    lastTransform=transform.copy();
  }
  if (controllerLive.get() != null && controllerLive.get().getParent() != null) {
    controllerLive.get().onTick(dt);
  }
  if (controllerLive.get() instanceof PlayerController) {
    Player player=((PlayerController)controllerLive.get()).getPlayer();
    if (player != null && player.getSession() != null) {
      ((SpoutSession)player.getSession()).pulse();
    }
  }
}","@Override public void onTick(float dt){
  if (this.transform.getPosition() != null && this.transform.getPosition().getWorld() != null) {
    chunkLive.set(transform.getPosition().getWorld().getChunkFromBlock(transform.getPosition()));
    entityManagerLive.set(((SpoutRegion)chunkLive.get().getRegion()).getEntityManager());
    lastTransform=transform.copy();
  }
  if (controllerLive.get() != null && controllerLive.get().getParent() != null) {
    controllerLive.get().onTick(dt);
  }
  if (controllerLive.get() instanceof PlayerController) {
    Player player=((PlayerController)controllerLive.get()).getPlayer();
    if (player != null && player.getSession() != null) {
      ((SpoutSession)player.getSession()).pulse();
    }
  }
}",0.1889570552147239
177476,"/** 
 * Called when the tick is finished and collisions need to be resolved and move events fired
 */
public void resolve(){
  if (Spout.debugMode()) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + this.collision.toString());
  }
  List<CollisionVolume> colliding=((SpoutWorld)collisionPoint.getWorld()).getCollidingObject(this.collision);
  Vector3 offset=this.lastTransform.getPosition().subtract(collisionPoint);
  for (  CollisionVolume box : colliding) {
    if (Spout.debugMode()) {
      System.out.println(""String_Node_Str"" + box.toString());
    }
    Vector3 collision=this.collision.resolve(box);
    if (Spout.debugMode()) {
      System.out.println(""String_Node_Str"" + collision.toString());
    }
    if (collision != null) {
      collision=collision.subtract(collisionPoint);
      if (Spout.debugMode()) {
        System.out.println(""String_Node_Str"" + collision.toString() + ""String_Node_Str""+ collision);
      }
      if (collision.getX() != 0F) {
        offset=new Vector3(collision.getX(),offset.getY(),offset.getZ());
      }
      if (collision.getY() != 0F) {
        offset=new Vector3(offset.getX(),collision.getY(),offset.getZ());
      }
      if (collision.getZ() != 0F) {
        offset=new Vector3(offset.getX(),offset.getY(),collision.getZ());
      }
      if (Spout.debugMode()) {
        System.out.println(""String_Node_Str"" + offset.toString());
      }
      if (this.getCollision().getStrategy() == CollisionStrategy.SOLID && box.getStrategy() == CollisionStrategy.SOLID) {
        this.setPosition(collisionPoint.add(offset));
        if (Spout.debugMode()) {
          System.out.println(""String_Node_Str"" + this.getPosition());
        }
      }
      controllerLive.get().onCollide(getWorld().getBlock(box.getPosition()));
    }
  }
}","/** 
 * Called when the tick is finished and collisions need to be resolved and move events fired
 */
public void resolve(){
  if (Spout.debugMode()) {
  }
  List<CollisionVolume> colliding=((SpoutWorld)collisionPoint.getWorld()).getCollidingObject(this.collision);
  Vector3 offset=this.lastTransform.getPosition().subtract(collisionPoint);
  for (  CollisionVolume box : colliding) {
    if (Spout.debugMode()) {
    }
    Vector3 collision=this.collision.resolve(box);
    if (Spout.debugMode()) {
    }
    if (collision != null) {
      collision=collision.subtract(collisionPoint);
      if (Spout.debugMode()) {
      }
      if (collision.getX() != 0F) {
        offset=new Vector3(collision.getX(),offset.getY(),offset.getZ());
      }
      if (collision.getY() != 0F) {
        offset=new Vector3(offset.getX(),collision.getY(),offset.getZ());
      }
      if (collision.getZ() != 0F) {
        offset=new Vector3(offset.getX(),offset.getY(),collision.getZ());
      }
      if (Spout.debugMode()) {
      }
      if (this.getCollision().getStrategy() == CollisionStrategy.SOLID && box.getStrategy() == CollisionStrategy.SOLID) {
        this.setPosition(collisionPoint.add(offset));
        if (Spout.debugMode()) {
        }
      }
      controllerLive.get().onCollide(getWorld().getBlock(box.getPosition()));
    }
  }
}",0.8021559923906151
177477,"@Override public boolean isDead(){
  return id.get() != NOTSPAWNEDID && (transform == null || chunkLive.get() == null || entityManagerLive.get() == null);
}","@Override public boolean isDead(){
  return id.get() != NOTSPAWNEDID && (chunkLive.get() == null || entityManagerLive.get() == null);
}",0.9278350515463918
177478,"public void setOwningThread(Thread thread){
  this.owningThread=thread;
}","public void setOwningThread(Thread thread){
  if (getController() instanceof PlayerController)   System.out.println(""String_Node_Str"" + owningThread + ""String_Node_Str""+ thread+ ""String_Node_Str"");
  this.owningThread=thread;
}",0.4866666666666667
177479,"@Override public void finalizeRun(){
  if (entityManager != null) {
    if (entityManager != entityManagerLive.get() || controller != controllerLive.get()) {
      SpoutRegion r=(SpoutRegion)chunk.getRegion();
      r.removeEntity(this);
      if (entityManagerLive.get() == null) {
        controller.onDeath();
        if (controller instanceof PlayerController) {
          Player p=((PlayerController)controller).getPlayer();
          p.getNetworkSynchronizer().onDeath();
        }
      }
    }
  }
  if (entityManagerLive.get() != null) {
    if (entityManager != entityManagerLive.get() || controller != controllerLive.get()) {
      entityManagerLive.get().allocate(this);
    }
  }
  if (chunkLive.get() != chunk) {
    if (chunkLive.get() != null) {
      ((SpoutChunk)chunkLive.get()).addEntity(this);
      if (observer) {
        chunkLive.get().refreshObserver(this);
      }
    }
    if (chunk != null && chunk.isLoaded()) {
      ((SpoutChunk)chunk).removeEntity(this);
      if (observer) {
        chunk.removeObserver(this);
      }
    }
    if (chunkLive.get() == null) {
      if (chunk != null && chunk.isLoaded()) {
        ((SpoutChunk)chunk).removeEntity(this);
        if (observer) {
          chunk.removeObserver(this);
        }
      }
      if (entityManagerLive.get() != null) {
        entityManagerLive.get().deallocate(this);
      }
    }
  }
  if (observerLive.get() != observer) {
    observer=!observer;
    if (observer) {
      chunkLive.get().refreshObserver(this);
    }
 else {
      chunkLive.get().removeObserver(this);
    }
  }
}","@Override public void finalizeRun(){
  if (entityManager != null) {
    if (entityManager != entityManagerLive.get() || controller != controllerLive.get()) {
      SpoutRegion r=(SpoutRegion)chunk.getRegion();
      r.removeEntity(this);
      if (isDead()) {
        controller.onDeath();
        if (controller instanceof PlayerController) {
          Player p=((PlayerController)controller).getPlayer();
          if (p != null) {
            p.getNetworkSynchronizer().onDeath();
          }
        }
      }
    }
  }
  if (entityManagerLive.get() != null) {
    if (entityManager != entityManagerLive.get() || controller != controllerLive.get()) {
      entityManagerLive.get().allocate(this);
    }
  }
  if (chunkLive.get() != chunk) {
    if (chunkLive.get() != null) {
      ((SpoutChunk)chunkLive.get()).addEntity(this);
      if (observer) {
        chunkLive.get().refreshObserver(this);
      }
    }
    if (chunk != null && chunk.isLoaded()) {
      ((SpoutChunk)chunk).removeEntity(this);
      if (observer) {
        chunk.removeObserver(this);
      }
    }
    if (chunkLive.get() == null) {
      if (chunk != null && chunk.isLoaded()) {
        ((SpoutChunk)chunk).removeEntity(this);
        if (observer) {
          chunk.removeObserver(this);
        }
      }
      if (entityManagerLive.get() != null) {
        entityManagerLive.get().deallocate(this);
      }
    }
  }
  if (observerLive.get() != observer) {
    observer=!observer;
    if (observer) {
      chunkLive.get().refreshObserver(this);
    }
 else {
      chunkLive.get().removeObserver(this);
    }
  }
}",0.9591451917033312
177480,"@Override public boolean kill(){
  if (transform == null || transform.getPosition() == null || chunkLive.get() == null || entityManagerLive.get() == null) {
    return false;
  }
  transform.set(null);
  chunkLive.set(null);
  entityManagerLive.set(null);
  return true;
}","@Override public boolean kill(){
  chunkLive.set(null);
  entityManagerLive.set(null);
  return true;
}",0.5493333333333333
177481,"private static Entity loadEntity(SpoutRegion r,CompoundTag tag){
  CompoundMap map=tag.getValue();
  @SuppressWarnings(""String_Node_Str"") Byte version=(Byte)map.get(""String_Node_Str"").getValue();
  String name=(String)map.get(""String_Node_Str"").getValue();
  ControllerType type=ControllerRegistry.get(name);
  if (type == null) {
    Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + name);
  }
 else   if (type.canCreateController()) {
    System.out.println(""String_Node_Str"" + name);
    float pX=(Float)map.get(""String_Node_Str"").getValue();
    float pY=(Float)map.get(""String_Node_Str"").getValue();
    float pZ=(Float)map.get(""String_Node_Str"").getValue();
    float sX=(Float)map.get(""String_Node_Str"").getValue();
    float sY=(Float)map.get(""String_Node_Str"").getValue();
    float sZ=(Float)map.get(""String_Node_Str"").getValue();
    float qX=(Float)map.get(""String_Node_Str"").getValue();
    float qY=(Float)map.get(""String_Node_Str"").getValue();
    float qZ=(Float)map.get(""String_Node_Str"").getValue();
    float qW=(Float)map.get(""String_Node_Str"").getValue();
    int view=(Integer)map.get(""String_Node_Str"").getValue();
    boolean observer=((ByteTag)map.get(""String_Node_Str"")).getBooleanValue();
    Transform t=new Transform(new Point(r != null ? r.getWorld() : null,pX,pY,pZ),new Quaternion(qX,qY,qZ,qW,false),new Vector3(sX,sY,sZ));
    Entity e=new SpoutEntity((SpoutEngine)Spout.getEngine(),null,type.createController(),view);
    e.setObserver(observer);
    e.setTransform(t);
    if (r != null) {
      r.addEntity(e);
    }
    try {
      if (((ByteTag)map.get(""String_Node_Str"")).getBooleanValue()) {
        byte[] data=((ByteArrayTag)map.get(""String_Node_Str"")).getValue();
        GenericDatatableMap dataMap=new GenericDatatableMap();
        dataMap.decompress(data);
        e.getController().read(new DataMap(dataMap));
      }
    }
 catch (    Exception error) {
      Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + type,error);
    }
    return e;
  }
 else {
    Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + type);
  }
  return null;
}","private static Entity loadEntity(SpoutRegion r,CompoundTag tag){
  CompoundMap map=tag.getValue();
  @SuppressWarnings(""String_Node_Str"") Byte version=(Byte)map.get(""String_Node_Str"").getValue();
  String name=(String)map.get(""String_Node_Str"").getValue();
  ControllerType type=ControllerRegistry.get(name);
  if (type == null) {
    Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + name);
  }
 else   if (type.canCreateController()) {
    System.out.println(""String_Node_Str"" + name);
    float pX=(Float)map.get(""String_Node_Str"").getValue();
    float pY=(Float)map.get(""String_Node_Str"").getValue();
    float pZ=(Float)map.get(""String_Node_Str"").getValue();
    float sX=(Float)map.get(""String_Node_Str"").getValue();
    float sY=(Float)map.get(""String_Node_Str"").getValue();
    float sZ=(Float)map.get(""String_Node_Str"").getValue();
    float qX=(Float)map.get(""String_Node_Str"").getValue();
    float qY=(Float)map.get(""String_Node_Str"").getValue();
    float qZ=(Float)map.get(""String_Node_Str"").getValue();
    float qW=(Float)map.get(""String_Node_Str"").getValue();
    int view=(Integer)map.get(""String_Node_Str"").getValue();
    boolean observer=((ByteTag)map.get(""String_Node_Str"")).getBooleanValue();
    Transform t=new Transform(new Point(r != null ? r.getWorld() : null,pX,pY,pZ),new Quaternion(qX,qY,qZ,qW,false),new Vector3(sX,sY,sZ));
    SpoutEntity e=new SpoutEntity((SpoutEngine)Spout.getEngine(),t,type.createController(),view,false);
    e.setObserver(observer);
    if (r != null) {
      r.addEntity(e);
    }
    try {
      if (((ByteTag)map.get(""String_Node_Str"")).getBooleanValue()) {
        byte[] data=((ByteArrayTag)map.get(""String_Node_Str"")).getValue();
        GenericDatatableMap dataMap=new GenericDatatableMap();
        dataMap.decompress(data);
        e.getController().read(new DataMap(dataMap));
      }
    }
 catch (    Exception error) {
      Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + type,error);
    }
    return e;
  }
 else {
    Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + type);
  }
  return null;
}",0.9908429208734444
177482,"private static CompoundMap saveEntities(SpoutChunk c){
  Set<Entity> entities=c.getLiveEntities();
  CompoundMap tagMap=new CompoundMap();
  for (  Entity e : entities) {
    tagMap.put(saveEntity((SpoutEntity)e));
    e.kill();
  }
  return tagMap;
}","private static CompoundMap saveEntities(SpoutChunk c){
  Set<Entity> entities=c.getLiveEntities();
  CompoundMap tagMap=new CompoundMap();
  for (  Entity e : entities) {
    Tag tag=saveEntity((SpoutEntity)e);
    if (tag != null) {
      tagMap.put(tag);
    }
  }
  return tagMap;
}",0.7835820895522388
177483,"private static Tag saveEntity(SpoutEntity e){
  CompoundMap map=new CompoundMap();
  map.put(new ByteTag(""String_Node_Str"",ENTITY_VERSION));
  map.put(new StringTag(""String_Node_Str"",e.getController().getType().getName()));
  System.out.println(""String_Node_Str"" + e.getController().getType().getName());
  map.put(new FloatTag(""String_Node_Str"",e.getPosition().getX()));
  map.put(new FloatTag(""String_Node_Str"",e.getPosition().getY()));
  map.put(new FloatTag(""String_Node_Str"",e.getPosition().getZ()));
  map.put(new FloatTag(""String_Node_Str"",e.getScale().getX()));
  map.put(new FloatTag(""String_Node_Str"",e.getScale().getY()));
  map.put(new FloatTag(""String_Node_Str"",e.getScale().getZ()));
  map.put(new FloatTag(""String_Node_Str"",e.getRotation().getX()));
  map.put(new FloatTag(""String_Node_Str"",e.getRotation().getY()));
  map.put(new FloatTag(""String_Node_Str"",e.getRotation().getZ()));
  map.put(new FloatTag(""String_Node_Str"",e.getRotation().getW()));
  map.put(new IntTag(""String_Node_Str"",e.getViewDistance()));
  map.put(new ByteTag(""String_Node_Str"",e.isObserverLive()));
  try {
    GenericDatatableMap dataMap=new GenericDatatableMap();
    if (e.getController().save(new DataMap(dataMap))) {
      map.put(new ByteTag(""String_Node_Str"",true));
      map.put(new ByteArrayTag(""String_Node_Str"",dataMap.compress()));
    }
 else {
      map.put(new ByteTag(""String_Node_Str"",false));
    }
  }
 catch (  Exception error) {
    Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + e.getController().getType(),error);
  }
  CompoundTag tag=new CompoundTag(""String_Node_Str"",map);
  return tag;
}","private static Tag saveEntity(SpoutEntity e){
  if (!e.getController().isSavable()) {
    return null;
  }
  CompoundMap map=new CompoundMap();
  map.put(new ByteTag(""String_Node_Str"",ENTITY_VERSION));
  map.put(new StringTag(""String_Node_Str"",e.getController().getType().getName()));
  System.out.println(""String_Node_Str"" + e.getController().getType().getName());
  map.put(new FloatTag(""String_Node_Str"",e.getPosition().getX()));
  map.put(new FloatTag(""String_Node_Str"",e.getPosition().getY()));
  map.put(new FloatTag(""String_Node_Str"",e.getPosition().getZ()));
  map.put(new FloatTag(""String_Node_Str"",e.getScale().getX()));
  map.put(new FloatTag(""String_Node_Str"",e.getScale().getY()));
  map.put(new FloatTag(""String_Node_Str"",e.getScale().getZ()));
  map.put(new FloatTag(""String_Node_Str"",e.getRotation().getX()));
  map.put(new FloatTag(""String_Node_Str"",e.getRotation().getY()));
  map.put(new FloatTag(""String_Node_Str"",e.getRotation().getZ()));
  map.put(new FloatTag(""String_Node_Str"",e.getRotation().getW()));
  map.put(new IntTag(""String_Node_Str"",e.getViewDistance()));
  map.put(new ByteTag(""String_Node_Str"",e.isObserverLive()));
  try {
    GenericDatatableMap dataMap=new GenericDatatableMap();
    if (e.getController().save(new DataMap(dataMap))) {
      map.put(new ByteTag(""String_Node_Str"",true));
      map.put(new ByteArrayTag(""String_Node_Str"",dataMap.compress()));
    }
 else {
      map.put(new ByteTag(""String_Node_Str"",false));
    }
  }
 catch (  Exception error) {
    Spout.getEngine().getLogger().log(Level.SEVERE,""String_Node_Str"" + e.getController().getType(),error);
  }
  CompoundTag tag=new CompoundTag(""String_Node_Str"",map);
  return tag;
}",0.9815876848777544
177484,"public void addEntity(Entity e){
  Controller controller=e.getController();
  if (controller instanceof BlockController) {
    Point pos=e.getPosition();
    setBlockController(pos.getBlockX(),pos.getBlockY(),pos.getBlockZ(),(BlockController)controller);
  }
  if (spawnQueue.contains(e)) {
    return;
  }
  if (removeQueue.contains(e)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  spawnQueue.add(e);
}","public void addEntity(Entity e){
  Controller controller=e.getController();
  if (controller instanceof BlockController) {
    Point pos=e.getPosition();
    setBlockController(pos.getBlockX(),pos.getBlockY(),pos.getBlockZ(),(BlockController)controller);
  }
  this.allocate((SpoutEntity)e);
}",0.7325905292479109
177485,"/** 
 * Removes a chunk from the region and indicates if the region is empty
 * @param c the chunk to remove
 * @return true if the region is now empty
 */
public boolean removeChunk(Chunk c){
  if (c.getRegion() != this) {
    return false;
  }
  int cx=c.getX() & Region.REGION_SIZE - 1;
  int cy=c.getY() & Region.REGION_SIZE - 1;
  int cz=c.getZ() & Region.REGION_SIZE - 1;
  AtomicReference<SpoutChunk> current=chunks[cx][cy][cz];
  SpoutChunk currentChunk=current.get();
  if (currentChunk != c) {
    return false;
  }
  boolean success=current.compareAndSet(currentChunk,null);
  if (success) {
    int num=numberActiveChunks.decrementAndGet();
    ((SpoutChunk)currentChunk).setUnloaded();
    if (num == 0) {
      return true;
    }
 else     if (num < 0) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  return false;
}","/** 
 * Removes a chunk from the region and indicates if the region is empty
 * @param c the chunk to remove
 * @return true if the region is now empty
 */
public boolean removeChunk(Chunk c){
  if (c.getRegion() != this) {
    return false;
  }
  int cx=c.getX() & Region.REGION_SIZE - 1;
  int cy=c.getY() & Region.REGION_SIZE - 1;
  int cz=c.getZ() & Region.REGION_SIZE - 1;
  AtomicReference<SpoutChunk> current=chunks[cx][cy][cz];
  SpoutChunk currentChunk=current.get();
  if (currentChunk != c) {
    return false;
  }
  boolean success=current.compareAndSet(currentChunk,null);
  if (success) {
    int num=numberActiveChunks.decrementAndGet();
    for (    Entity e : currentChunk.getLiveEntities()) {
      e.kill();
    }
    ((SpoutChunk)currentChunk).setUnloaded();
    if (num == 0) {
      return true;
    }
 else     if (num < 0) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  return false;
}",0.9552572706935124
177486,"public void startTickRun(int stage,long delta) throws InterruptedException {
switch (stage) {
case 0:
{
      if (!spawnQueue.isEmpty()) {
        SpoutEntity e;
        while ((e=(SpoutEntity)spawnQueue.poll()) != null) {
          this.allocate(e);
          EntitySpawnEvent event=new EntitySpawnEvent(e,e.getPosition());
          Spout.getEngine().getEventManager().callEvent(event);
          if (event.isCancelled()) {
            this.deallocate((SpoutEntity)e);
          }
        }
      }
      if (!removeQueue.isEmpty()) {
        SpoutEntity e;
        while ((e=(SpoutEntity)removeQueue.poll()) != null) {
          this.deallocate(e);
        }
      }
      float dt=delta / 1000.f;
      for (      SpoutEntity ent : entityManager) {
        try {
          ent.onTick(dt);
        }
 catch (        Exception e) {
          Spout.getEngine().getLogger().severe(""String_Node_Str"" + ent.toString());
          e.printStackTrace();
        }
      }
      World world=getWorld();
      int[] updates;
      Object[] sources;
synchronized (queuedPhysicsUpdates) {
        updates=queuedPhysicsUpdates.keys();
        sources=queuedPhysicsUpdates.values();
        queuedPhysicsUpdates.clear();
      }
      for (int i=0; i < updates.length; i++) {
        int key=updates[i];
        Source source=(Source)sources[i];
        int x=TByteTripleObjectHashMap.key1(key);
        int y=TByteTripleObjectHashMap.key2(key);
        int z=TByteTripleObjectHashMap.key3(key);
        Chunk chunk=chunks[x >> Chunk.CHUNK_SIZE_BITS][y >> Chunk.CHUNK_SIZE_BITS][z >> Chunk.CHUNK_SIZE_BITS].get();
        if (chunk != null) {
          BlockMaterial material=chunk.getBlockMaterial(x,y,z);
          if (material.hasPhysics()) {
            Block block=world.getBlock(x + (getX() << blockShifts),y + (getY() << blockShifts),z + (getZ() << blockShifts),source);
            material.onUpdate(block);
          }
        }
      }
      for (int i=0; i < LIGHT_PER_TICK; i++) {
        SpoutChunk toLight=lightingQueue.poll();
        if (toLight == null) {
          break;
        }
        if (toLight.isLoaded()) {
          toLight.processQueuedLighting();
        }
      }
      for (int i=0; i < POPULATE_PER_TICK; i++) {
        Chunk toPopulate=populationQueue.poll();
        if (toPopulate == null) {
          break;
        }
        if (toPopulate.isLoaded()) {
          toPopulate.populate();
        }
      }
      Chunk toUnload=unloadQueue.poll();
      if (toUnload != null) {
        toUnload.unload(true);
      }
      break;
    }
case 1:
{
    Set<SpoutEntity> resolvers=new HashSet<SpoutEntity>();
    boolean shouldResolve;
    for (    SpoutEntity ent : entityManager) {
      shouldResolve=ent.preResolve();
      if (shouldResolve) {
        resolvers.add(ent);
      }
    }
    for (    SpoutEntity ent : resolvers) {
      try {
        ent.resolve();
      }
 catch (      Exception e) {
        Spout.getEngine().getLogger().severe(""String_Node_Str"" + ent.toString());
        e.printStackTrace();
      }
    }
    break;
  }
default :
{
  throw new IllegalStateException(""String_Node_Str"");
}
}
}","public void startTickRun(int stage,long delta) throws InterruptedException {
switch (stage) {
case 0:
{
      float dt=delta / 1000.f;
      for (      SpoutEntity ent : entityManager) {
        try {
          if (ent.getRegionLive() != this) {
            System.out.println(""String_Node_Str"" + ent.getRegionLive() + ""String_Node_Str""+ toString());
          }
          ent.onTick(dt);
        }
 catch (        Exception e) {
          Spout.getEngine().getLogger().severe(""String_Node_Str"" + ent.toString());
          e.printStackTrace();
        }
      }
      World world=getWorld();
      int[] updates;
      Object[] sources;
synchronized (queuedPhysicsUpdates) {
        updates=queuedPhysicsUpdates.keys();
        sources=queuedPhysicsUpdates.values();
        queuedPhysicsUpdates.clear();
      }
      for (int i=0; i < updates.length; i++) {
        int key=updates[i];
        Source source=(Source)sources[i];
        int x=TByteTripleObjectHashMap.key1(key);
        int y=TByteTripleObjectHashMap.key2(key);
        int z=TByteTripleObjectHashMap.key3(key);
        Chunk chunk=chunks[x >> Chunk.CHUNK_SIZE_BITS][y >> Chunk.CHUNK_SIZE_BITS][z >> Chunk.CHUNK_SIZE_BITS].get();
        if (chunk != null) {
          BlockMaterial material=chunk.getBlockMaterial(x,y,z);
          if (material.hasPhysics()) {
            Block block=world.getBlock(x + (getX() << blockShifts),y + (getY() << blockShifts),z + (getZ() << blockShifts),source);
            material.onUpdate(block);
          }
        }
      }
      for (int i=0; i < LIGHT_PER_TICK; i++) {
        SpoutChunk toLight=lightingQueue.poll();
        if (toLight == null) {
          break;
        }
        if (toLight.isLoaded()) {
          toLight.processQueuedLighting();
        }
      }
      for (int i=0; i < POPULATE_PER_TICK; i++) {
        Chunk toPopulate=populationQueue.poll();
        if (toPopulate == null) {
          break;
        }
        if (toPopulate.isLoaded()) {
          toPopulate.populate();
        }
      }
      Chunk toUnload=unloadQueue.poll();
      if (toUnload != null) {
        toUnload.unload(true);
      }
      break;
    }
case 1:
{
    Set<SpoutEntity> resolvers=new HashSet<SpoutEntity>();
    boolean shouldResolve;
    for (    SpoutEntity ent : entityManager) {
      shouldResolve=ent.preResolve();
      if (shouldResolve) {
        resolvers.add(ent);
      }
    }
    for (    SpoutEntity ent : resolvers) {
      try {
        ent.resolve();
      }
 catch (      Exception e) {
        Spout.getEngine().getLogger().severe(""String_Node_Str"" + ent.toString());
        e.printStackTrace();
      }
    }
    break;
  }
default :
{
  throw new IllegalStateException(""String_Node_Str"");
}
}
}",0.8760640108954716
177487,"public void removeEntity(Entity e){
  Vector3 pos=e.getPosition().floor();
  if (blockControllers.containsKey(pos)) {
    blockControllers.remove(pos);
  }
  if (removeQueue.contains(e)) {
    return;
  }
  if (spawnQueue.contains(e)) {
    spawnQueue.remove(e);
    return;
  }
  removeQueue.add(e);
}","public void removeEntity(Entity e){
  Vector3 pos=e.getPosition().floor();
  if (blockControllers.containsKey(pos)) {
    blockControllers.remove(pos);
  }
  this.deallocate((SpoutEntity)e);
}",0.6923076923076923
177488,"@Override public int scheduleAsyncDelayedTask(Object plugin,Runnable task){
  return scheduleAsyncRepeatingTask(plugin,task,0,-1);
}","@Override public int scheduleAsyncDelayedTask(Object plugin,Runnable task){
  return scheduleAsyncRepeatingTaskInternal(plugin,task,0,-1);
}",0.9705882352941176
177489,"@Override public int scheduleAsyncRepeatingTask(Object plugin,Runnable task,long delay,long period){
  return schedule(new SpoutTask(plugin,task,false,delay,period));
}","@Override public int scheduleAsyncRepeatingTask(Object plugin,Runnable task,long delay,long period){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.7469879518072289
177490,"@Override public DataInputStream getInputStream(int i) throws IOException {
  if (i < 0 || i > entries) {
    throw new SRFException(""String_Node_Str"");
  }
  refreshAccess();
  Lock lock=blockLock[i].readLock();
  lock.lock();
  if (this.isClosed()) {
    throw new SRFClosedException(""String_Node_Str"");
  }
  try {
    int start=blockSegmentStart[i].get() << segmentSize;
    int actualLength=blockActualLength[i].get();
    byte[] result=new byte[actualLength];
synchronized (file) {
      file.seek(start);
      file.readFully(result);
    }
    return new DataInputStream(new InflaterInputStream(new ByteArrayInputStream(result)));
  }
  finally {
    lock.unlock();
  }
}","@Override public DataInputStream getInputStream(int i) throws IOException {
  if (i < 0 || i > entries) {
    throw new SRFException(""String_Node_Str"");
  }
  refreshAccess();
  Lock lock=blockLock[i].readLock();
  lock.lock();
  try {
    if (this.isClosed()) {
      throw new SRFClosedException(""String_Node_Str"");
    }
    if (blockActualLength[i].get() == 0) {
      return null;
    }
    int start=blockSegmentStart[i].get() << segmentSize;
    int actualLength=blockActualLength[i].get();
    byte[] result=new byte[actualLength];
synchronized (file) {
      file.seek(start);
      file.readFully(result);
    }
    return new DataInputStream(new InflaterInputStream(new ByteArrayInputStream(result)));
  }
  finally {
    lock.unlock();
  }
}",0.9441340782122905
177491,"public void writeInt(int i) throws IOException {
  writeCacheByte((byte)(i >> 24));
  writeCacheByte((byte)(i >> 16));
  writeCacheByte((byte)(i >> 8));
  writeCacheByte((byte)(i >> 0));
}","public void writeInt(int i) throws IOException {
  timeStart();
  try {
    writeCacheByte((byte)(i >> 24));
    writeCacheByte((byte)(i >> 16));
    writeCacheByte((byte)(i >> 8));
    writeCacheByte((byte)(i >> 0));
  }
  finally {
    timeEnd();
  }
}",0.8506787330316742
177492,"public CachedRandomAccessFile(File filePath,String permissions) throws FileNotFoundException {
  this.file=new RandomAccessFile(filePath,permissions);
}","public CachedRandomAccessFile(File filePath,String permissions,int pageShift) throws FileNotFoundException {
  this.file=new RandomAccessFile(filePath,permissions);
  this.PAGE_SHIFT=pageShift;
  PAGE_SIZE=(1 << PAGE_SHIFT);
  PAGE_MASK=PAGE_SIZE - 1;
}",0.7506172839506173
177493,"private byte[] getPage(int pageIndex) throws IOException {
  while (pageIndex >= pages.size()) {
    pages.add(null);
  }
  byte[] page=pages.get(pageIndex);
  if (page == null) {
    long oldPos=pos;
    long pagePosition=pageIndex << PAGE_SHIFT;
    file.seek(pagePosition);
    page=new byte[PAGE_SIZE];
    long len=Math.min(file.length() - pos,page.length);
    if (len > 0) {
      file.readFully(page,0,(int)len);
    }
    pages.set(pageIndex,page);
    pos=oldPos;
  }
  return page;
}","private byte[] getPage(int pageIndex) throws IOException {
  while (pageIndex >= pages.size()) {
    pages.add(null);
  }
  byte[] page=pages.get(pageIndex);
  if (page == null) {
    long oldPos=pos;
    long pagePosition=pageIndex << PAGE_SHIFT;
    file.seek(pagePosition);
    page=new byte[PAGE_SIZE];
    long len=Math.min(file.length() - pagePosition,page.length);
    if (len > 0) {
      file.readFully(page,0,(int)len);
    }
    pages.set(pageIndex,page);
    pos=oldPos;
    posDirty=true;
  }
  return page;
}",0.968503937007874
177494,"public void readFully(byte[] b) throws IOException {
  int pageIndex=(int)(pos >> PAGE_SHIFT);
  int offset=(int)(pos & PAGE_MASK);
  int endPageOne=Math.min(b.length + offset,PAGE_SIZE);
  byte[] page=getPage(pageIndex);
  int j=0;
  for (int i=offset; i < endPageOne; i++) {
    b[j++]=page[i];
  }
  while (b.length > j) {
    pageIndex++;
    page=getPage(pageIndex);
    if (b.length - j > PAGE_SIZE) {
      for (int i=0; i < PAGE_SIZE; i++) {
        b[j++]=page[i];
      }
    }
 else {
      for (int i=0; j < b.length; i++) {
        b[j++]=page[i];
      }
    }
  }
  pos+=b.length;
}","public void readFully(byte[] b) throws IOException {
  timeStart();
  try {
    int pageIndex=(int)(pos >> PAGE_SHIFT);
    int offset=(int)(pos & PAGE_MASK);
    int endPageOne=Math.min(b.length + offset,PAGE_SIZE);
    byte[] page=getPage(pageIndex);
    int j=0;
    for (int i=offset; i < endPageOne; i++) {
      b[j++]=page[i];
    }
    while (b.length > j) {
      pageIndex++;
      page=getPage(pageIndex);
      if (b.length - j > PAGE_SIZE) {
        for (int i=0; i < PAGE_SIZE; i++) {
          b[j++]=page[i];
        }
      }
 else {
        for (int i=0; j < b.length; i++) {
          b[j++]=page[i];
        }
      }
    }
    pos+=b.length;
    posDirty=true;
  }
  finally {
    timeEnd();
  }
}",0.8608365019011407
177495,"public byte readCacheByte() throws IOException {
  int pageIndex=(int)(pos >> PAGE_SHIFT);
  int offset=(int)(pos & PAGE_MASK);
  byte[] page=getPage(pageIndex);
  pos++;
  return page[offset];
}","private byte readCacheByte() throws IOException {
  int pageIndex=(int)(pos >> PAGE_SHIFT);
  int offset=(int)(pos & PAGE_MASK);
  byte[] page=getPage(pageIndex);
  pos++;
  posDirty=true;
  return page[offset];
}",0.9166666666666666
177496,"public long length() throws IOException {
  return file.length();
}","public long length() throws IOException {
  timeStart();
  try {
    return file.length();
  }
  finally {
    timeEnd();
  }
}",0.6907216494845361
177497,"public int readInt() throws IOException {
  int i=0;
  i|=(readCacheByte() & 0xFF) << 24;
  i|=(readCacheByte() & 0xFF) << 16;
  i|=(readCacheByte() & 0xFF) << 8;
  i|=(readCacheByte() & 0xFF) << 0;
  return i;
}","public int readInt() throws IOException {
  timeStart();
  try {
    int i=0;
    i|=(readCacheByte() & 0xFF) << 24;
    i|=(readCacheByte() & 0xFF) << 16;
    i|=(readCacheByte() & 0xFF) << 8;
    i|=(readCacheByte() & 0xFF) << 0;
    return i;
  }
  finally {
    timeEnd();
  }
}",0.6842105263157895
177498,"public void close() throws IOException {
  file.close();
}","public void close() throws IOException {
  timeStart();
  try {
    file.close();
  }
  finally {
    timeEnd();
  }
}",0.6590909090909091
177499,"public void seek(long pos) throws IOException {
  file.seek(pos);
  this.pos=pos;
}","public void seek(long pos) throws IOException {
  timeStart();
  try {
    file.seek(pos);
    this.pos=pos;
    posDirty=false;
  }
  finally {
    timeEnd();
  }
}",0.6693548387096774
177500,"public void write(byte[] b,int off,int len) throws IOException {
  int pageIndex=(int)(pos >> PAGE_SHIFT);
  int offset=(int)(pos & PAGE_MASK);
  int endPageOne=Math.min(b.length + offset,PAGE_SIZE);
  byte[] page=getPage(pageIndex);
  int j=0;
  for (int i=offset; i < endPageOne; i++) {
    page[i]=b[off + (j++)];
  }
  while (b.length > j) {
    pageIndex++;
    page=getPage(pageIndex);
    if (b.length - j > PAGE_SIZE) {
      for (int i=0; i < PAGE_SIZE; i++) {
        page[i]=b[off + (j++)];
      }
    }
 else {
      for (int i=0; j < b.length; i++) {
        page[i]=b[off + (j++)];
      }
    }
  }
  file.seek(pos);
  file.write(b,off,len);
  pos+=b.length;
}","public void write(byte[] b,int off,int len) throws IOException {
  timeStart();
  try {
    int pageIndex=(int)(pos >> PAGE_SHIFT);
    int offset=(int)(pos & PAGE_MASK);
    int endPageOne=Math.min(len + offset,PAGE_SIZE);
    byte[] page=getPage(pageIndex);
    int j=0;
    for (int i=offset; i < endPageOne; i++) {
      page[i]=b[off + (j++)];
    }
    while (len > j) {
      pageIndex++;
      page=getPage(pageIndex);
      if (len - j > PAGE_SIZE) {
        for (int i=0; i < PAGE_SIZE; i++) {
          page[i]=b[off + (j++)];
        }
      }
 else {
        for (int i=0; j < len; i++) {
          page[i]=b[off + (j++)];
        }
      }
    }
    if (posDirty) {
      file.seek(pos);
      posDirty=false;
    }
    file.write(b,off,len);
    pos+=b.length;
  }
  finally {
    timeEnd();
  }
}",0.6868279569892473
177501,"public void writeCacheByte(byte b) throws IOException {
  int pageIndex=(int)(pos >> PAGE_SHIFT);
  int offset=(int)(pos & PAGE_MASK);
  byte[] page=getPage(pageIndex);
  page[offset]=b;
  file.seek(pos);
  file.writeByte(b & 0xFF);
  pos++;
}","private void writeCacheByte(byte b) throws IOException {
  int pageIndex=(int)(pos >> PAGE_SHIFT);
  int offset=(int)(pos & PAGE_MASK);
  byte[] page=getPage(pageIndex);
  page[offset]=b;
  if (posDirty) {
    file.seek(pos);
    posDirty=false;
  }
  file.writeByte(b & 0xFF);
  pos++;
}",0.896421845574388
177502,"/** 
 * Creates a SimpleRegionFile
 * @param filePath the path to the file
 * @param desiredSegmentSize log2(the desired segment size) 
 * @param entries the number of blocks (sub-files) in the RegionFile
 * @param timeout the time in ms until the file times out for auto-closing
 * @throws IOException on error
 */
public SimpleRegionFile(File filePath,int desiredSegmentSize,int entries,int timeout) throws IOException {
  this.filePath=filePath;
  this.closed=new AtomicBoolean(false);
  this.timeout=timeout;
  this.lastAccess=new AtomicLong(0);
  refreshAccess();
  try {
    this.file=new RandomAccessFile(this.filePath,""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    this.closed.set(true);
    throw new SRFException(""String_Node_Str"" + this.filePath,e);
  }
  int headerSize=getHeaderSize(entries);
  if (file.length() <= headerSize) {
    file.seek(0);
    file.writeInt(VERSION);
    file.writeInt(desiredSegmentSize);
    file.writeInt(entries);
    for (int i=0; i < entries << 1; i++) {
      file.writeInt(0);
    }
  }
  file.seek(0);
  this.version=file.readInt();
  this.segmentSize=file.readInt();
  this.segmentMask=(1 << this.segmentSize) - 1;
  this.entries=file.readInt();
  if (entries != this.entries) {
    file.close();
    this.closed.set(true);
    throw new SRFException(""String_Node_Str"" + this.filePath + ""String_Node_Str""+ entries+ ""String_Node_Str""+ this.entries);
  }
  inuse=new AtomicReference<AtomicBoolean[]>(new AtomicBoolean[0]);
  int headerSegments=sizeToSegments(headerSize);
  int segmentsLocked=reserveSegments(0,headerSegments);
  if (segmentsLocked != headerSegments) {
    throw new SRFException(""String_Node_Str"");
  }
  blockSegmentStart=new AtomicInteger[entries];
  blockSegmentLength=new AtomicInteger[entries];
  blockActualLength=new AtomicInteger[entries];
  blockLock=new SRFReentrantReadWriteLock[entries];
  numberBlocksLocked=new AtomicInteger(0);
  for (int i=0; i < entries; i++) {
    blockSegmentStart[i]=new AtomicInteger(file.readInt());
    blockActualLength[i]=new AtomicInteger(file.readInt());
    blockSegmentLength[i]=new AtomicInteger(sizeToSegments(blockActualLength[i].get()));
    blockLock[i]=new SRFReentrantReadWriteLock(numberBlocksLocked);
    int length=reserveSegments(blockSegmentStart[i].get(),blockSegmentLength[i].get());
    if (length != blockSegmentLength[i].get()) {
      throw new SRFException(""String_Node_Str"" + i + ""String_Node_Str"");
    }
  }
}","/** 
 * Creates a SimpleRegionFile
 * @param filePath the path to the file
 * @param desiredSegmentSize log2(the desired segment size) 
 * @param entries the number of blocks (sub-files) in the RegionFile
 * @param timeout the time in ms until the file times out for auto-closing
 * @throws IOException on error
 */
public SimpleRegionFile(File filePath,int desiredSegmentSize,int entries,int timeout) throws IOException {
  this.filePath=filePath;
  this.closed=new AtomicBoolean(false);
  this.timeout=timeout;
  this.lastAccess=new AtomicLong(0);
  refreshAccess();
  try {
    this.file=new CachedRandomAccessFile(this.filePath,""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    this.closed.set(true);
    throw new SRFException(""String_Node_Str"" + this.filePath,e);
  }
  int headerSize=getHeaderSize(entries);
  if (file.length() <= headerSize) {
    file.seek(0);
    file.writeInt(VERSION);
    file.writeInt(desiredSegmentSize);
    file.writeInt(entries);
    for (int i=0; i < entries << 1; i++) {
      file.writeInt(0);
    }
  }
  file.seek(0);
  this.version=file.readInt();
  this.segmentSize=file.readInt();
  this.segmentMask=(1 << this.segmentSize) - 1;
  this.entries=file.readInt();
  if (entries != this.entries) {
    file.close();
    this.closed.set(true);
    throw new SRFException(""String_Node_Str"" + this.filePath + ""String_Node_Str""+ entries+ ""String_Node_Str""+ this.entries);
  }
  inuse=new AtomicReference<AtomicBoolean[]>(new AtomicBoolean[0]);
  int headerSegments=sizeToSegments(headerSize);
  int segmentsLocked=reserveSegments(0,headerSegments);
  if (segmentsLocked != headerSegments) {
    throw new SRFException(""String_Node_Str"");
  }
  blockSegmentStart=new AtomicInteger[entries];
  blockSegmentLength=new AtomicInteger[entries];
  blockActualLength=new AtomicInteger[entries];
  blockLock=new SRFReentrantReadWriteLock[entries];
  numberBlocksLocked=new AtomicInteger(0);
  for (int i=0; i < entries; i++) {
    blockSegmentStart[i]=new AtomicInteger(file.readInt());
    blockActualLength[i]=new AtomicInteger(file.readInt());
    blockSegmentLength[i]=new AtomicInteger(sizeToSegments(blockActualLength[i].get()));
    blockLock[i]=new SRFReentrantReadWriteLock(numberBlocksLocked);
    int length=reserveSegments(blockSegmentStart[i].get(),blockSegmentLength[i].get());
    if (length != blockSegmentLength[i].get()) {
      throw new SRFException(""String_Node_Str"" + i + ""String_Node_Str"");
    }
  }
}",0.9987814784727864
177503,"public static void main(String[] args){
  FileSystem.init();
  SpoutServer server=new SpoutServer();
  Spout.setEngine(server);
  server.init(args);
  server.start();
}","public static void main(String[] args){
  SpoutServer server=new SpoutServer();
  Spout.setEngine(server);
  FileSystem.init();
  server.init(args);
  server.start();
}",0.875
177504,"@Override public ConfigurationNode getChild(String name){
  return children.get(name);
}","public ConfigurationNode getChild(String name,boolean add){
  ConfigurationNode node=children.get(name);
  if (node == null) {
    node=createConfigurationNode(ArrayUtils.add(getPathElements(),name),null,!add);
    if (add) {
      addChild(node);
    }
  }
  return node;
}",0.3922651933701657
177505,"@Override public ConfigurationNode removeChild(ConfigurationNode node){
  if (node != null) {
    if (node.getParent() != this) {
      return null;
    }
    if (children.remove(node.getPathEntries()[node.getPathEntries().length - 1]) == null) {
      return null;
    }
    detachChild(node);
  }
  return node;
}","@Override public ConfigurationNode removeChild(ConfigurationNode node){
  if (node != null) {
    if (node.getParent() != this) {
      return null;
    }
    if (children.remove(node.getPathElements()[node.getPathElements().length - 1]) == null) {
      return null;
    }
    detachChild(node);
  }
  return node;
}",0.9651898734177216
177506,"public ConfigurationNode getNode(String... path){
  if (path.length == 0) {
    return createConfigurationNode(path,null,true);
  }
  ConfigurationNode node=getChild(path[0]);
  for (int i=1; i < path.length && node != null && node.isAttached(); ++i) {
    node=node.getChild(path[i]);
  }
  return node == null ? createConfigurationNode(path,null,true) : node;
}","public ConfigurationNode getNode(String... path){
  if (path.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ConfigurationNode node=getChild(path[0]);
  for (int i=1; i < path.length && node != null && node.isAttached(); ++i) {
    node=node.getChild(path[i]);
  }
  return node == null || !node.isAttached() ? createConfigurationNode(path,null,true) : node;
}",0.8423841059602649
177507,"@Override public ConfigurationNode addChild(ConfigurationNode node){
  ConfigurationNode ret=children.put(node.getPathEntries()[node.getPathEntries().length - 1],node);
  node.setAttached(true);
  node.setParent(this);
  return ret;
}","@Override public ConfigurationNode addChild(ConfigurationNode node){
  ConfigurationNode ret=children.put(node.getPathElements()[node.getPathElements().length - 1],node);
  node.setAttached(true);
  node.setParent(this);
  return ret;
}",0.9531914893617022
177508,"public Configuration(){
  super(null);
  this.config=this;
  setPathSeparator(""String_Node_Str"");
}","public Configuration(){
  super(null);
  this.config=this;
  setPathSeparator(""String_Node_Str"");
  setWritesDefaults(true);
}",0.88
177509,"public void setNode(ConfigurationNode node){
  String[] path=node.getPathEntries();
  if (path == null || path.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ConfigurationNode parent=null;
  ConfigurationNodeSource oldParent=this;
  for (  String item : path) {
    if (parent == null) {
      parent=getChild(item);
    }
 else {
      oldParent=parent;
      parent=oldParent.getChild(item);
    }
    if (!parent.isAttached()) {
      oldParent.addChild(parent);
    }
  }
  oldParent.addChild(node);
}","public void setNode(ConfigurationNode node){
  String[] path=node.getPathElements();
  if (path == null || path.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ConfigurationNode parent=getChild(path[0],true);
  ConfigurationNodeSource oldParent;
  for (int i=1; i < path.length - 1; ++i) {
    oldParent=parent;
    parent=oldParent.getChild(path[i],true);
    if (i != path.length - 2 && !parent.isAttached()) {
      oldParent.addChild(parent);
    }
  }
  parent.addChild(node);
}",0.6875593542260209
177510,"/** 
 * @return The path, joined by the {@link Configuration#getPathSeparator()} of the attached configuration
 * @see #getPathEntries()
 */
public String getPath(){
  return StringUtils.join(path,getConfiguration().getPathSeparator());
}","/** 
 * @return The path, joined by the {@link Configuration#getPathSeparator()} of the attached configuration
 * @see #getPathElements
 */
public String getPath(){
  return StringUtils.join(getPathElements(),getConfiguration().getPathSeparator());
}",0.9262295081967212
177511,"@Override public Object setValue(Object value){
  Object old=this.getValue();
  if (value instanceof Map<?,?>) {
    this.value=null;
    removeChildren();
    for (    Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {
      addChild(new ConfigurationNodeBase(getConfiguration(),entry.getValue(),ArrayUtils.add(getPathEntries(),entry.getKey().toString())));
    }
  }
 else {
    if (value != null) {
      removeChildren();
    }
    this.value=value;
  }
  return old;
}","@Override public Object setValue(Object value){
  Object old=this.getValue();
  if (value instanceof Map<?,?>) {
    this.value=null;
    removeChildren();
    for (    Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {
      addChild(createConfigurationNode(ArrayUtils.add(getPathElements(),entry.getKey().toString()),entry.getValue(),false));
    }
  }
 else {
    if (value != null) {
      removeChildren();
    }
    this.value=value;
  }
  return old;
}",0.8361702127659575
177512,public ConfigurationNode getChild(String name);,"public ConfigurationNode getChild(String name,boolean add);",0.8867924528301887
177513,"private void checkAdded(){
  if (isAttached()) {
    getConfiguration().setNode(this);
    setAttached(true);
  }
}","private void checkAdded(){
  if (!isAttached()) {
    getConfiguration().setNode(this);
    setAttached(true);
  }
}",0.9956709956709956
177514,"@Test public void testPathSeparator(){
  String value=config.getNode(""String_Node_Str"").getString();
  assertEquals(""String_Node_Str"",value);
  config.setPathSeparator(""String_Node_Str"");
  value=config.getNode(""String_Node_Str"").getString();
  assertEquals(""String_Node_Str"",value);
}","@Test public void testPathSeparator(){
  String value=config.getNode(""String_Node_Str"").getString();
  assertEquals(""String_Node_Str"",value);
  config.setPathSeparator(""String_Node_Str"");
  value=config.getNode(""String_Node_Str"").getString();
  assertEquals(""String_Node_Str"",value);
  config.setPathSeparator(""String_Node_Str"");
}",0.9253246753246752
177515,"/** 
 * Attempts to lock the store.<br> <br> The lock will fail if the first element is already locked.  <br> <br> Once the first element is successfully locked, it will keep attempting to lock the rest of the store until all elements are locked, or the number of times it fails to lock exceeds maxFails. <br> NOTE:  The store using spinning locks, so it must only be locked for a very short period of time
 * @param maxFails the maximum number of lock failures before the method returns false
 * @return true if the store is locked
 */
public boolean tryLock(int maxFails){
  int lockedIndexes=0;
  int firstSeq;
  firstSeq=seqArray.get().getAndSet(0,DatatableSequenceNumber.UNSTABLE);
  if (firstSeq == DatatableSequenceNumber.UNSTABLE) {
    return false;
  }
  lockedIndexes++;
  int fails=0;
  for (int i=1; i < length.get(); i++) {
    int seq;
    do {
      if (fails > maxFails && maxFails > 0) {
        unlock(lockedIndexes);
        return false;
      }
 else {
        fails++;
        seq=seqArray.get().getAndSet(i,DatatableSequenceNumber.UNSTABLE);
      }
    }
 while (seq == DatatableSequenceNumber.UNSTABLE);
    lockedIndexes++;
  }
  return true;
}","/** 
 * Attempts to lock the store.<br> <br> The lock will fail if the first element is already locked.  <br> <br> Once the first element is successfully locked, it will keep attempting to lock the rest of the store until all elements are locked, or the number of times it fails to lock exceeds maxFails. <br> NOTE:  The store using spinning locks, so it must only be locked for a very short period of time
 * @param maxFails the maximum number of lock failures before the method returns false
 * @return true if the store is locked
 */
public boolean tryLock(int maxFails){
  int lockedIndexes=0;
  int firstSeq;
  firstSeq=seqArray.get().getAndSet(0,DatatableSequenceNumber.UNSTABLE);
  if (firstSeq == DatatableSequenceNumber.UNSTABLE) {
    return false;
  }
  lockedIndexes++;
  int fails=0;
  for (int i=1; i < length.get(); i++) {
    int seq;
    do {
      if (fails > maxFails && maxFails > 0) {
        unlock(lockedIndexes);
        return false;
      }
 else {
        seq=seqArray.get().getAndSet(i,DatatableSequenceNumber.UNSTABLE);
        if (seq == DatatableSequenceNumber.UNSTABLE) {
          fails++;
        }
      }
    }
 while (seq == DatatableSequenceNumber.UNSTABLE);
    lockedIndexes++;
  }
  return true;
}",0.92071398920714
177516,"/** 
 * Resizes the arrays, if required. The array length is doubled if needsResize returns true.
 */
private void resizeArrays(){
  boolean locked=false;
  while (needsResize() && !(locked=tryLock(MAX_FAIL_THRESHOLD)))   ;
  if (!locked) {
    return;
  }
  try {
    int newLength=length.get() << 1;
    if (newLength > maxLength || !needsResize()) {
      return;
    }
    int[] newIntArray=new int[newLength];
    @SuppressWarnings(""String_Node_Str"") T[] newAuxArray=(T[])new Object[newLength];
    AtomicIntegerArray newSeqArray=new AtomicIntegerArray(newLength);
    emptyFill(newAuxArray,null);
    for (int i=0; i < length.get(); i++) {
      newIntArray[i]=intArray.get()[i];
      newAuxArray[i]=auxArray.get()[i];
      newSeqArray.set(i,DatatableSequenceNumber.UNSTABLE);
    }
    for (int i=length.get(); i < newLength; i++) {
      newSeqArray.set(i,DatatableSequenceNumber.UNSTABLE);
      newAuxArray[i]=EMPTY;
    }
    intArray.set(newIntArray);
    auxArray.set(newAuxArray);
    seqArray.set(newSeqArray);
    int oldLength=length.get();
    length.set(newLength);
    for (int i=oldLength; i < newLength; i++) {
      if (!seqArray.get().compareAndSet(i,DatatableSequenceNumber.UNSTABLE,DatatableSequenceNumber.get())) {
        throw new IllegalStateException(""String_Node_Str"" + i + ""String_Node_Str"");
      }
    }
  }
  finally {
    unlock();
  }
}","/** 
 * Resizes the arrays, if required. The array length is doubled if needsResize returns true.
 */
private void resizeArrays(){
  boolean locked=false;
  while (needsResize() && !(locked=tryLock(MAX_FAIL_THRESHOLD)))   ;
  if (!locked) {
    return;
  }
  int lockedIndexes=length.get();
  try {
    int newLength=length.get() << 1;
    if (newLength > maxLength || !needsResize()) {
      return;
    }
    int[] newIntArray=new int[newLength];
    @SuppressWarnings(""String_Node_Str"") T[] newAuxArray=(T[])new Object[newLength];
    AtomicIntegerArray newSeqArray=new AtomicIntegerArray(newLength);
    emptyFill(newAuxArray,null);
    for (int i=0; i < length.get(); i++) {
      newIntArray[i]=intArray.get()[i];
      newAuxArray[i]=auxArray.get()[i];
      newSeqArray.set(i,DatatableSequenceNumber.UNSTABLE);
    }
    for (int i=length.get(); i < newLength; i++) {
      newSeqArray.set(i,DatatableSequenceNumber.UNSTABLE);
      newAuxArray[i]=EMPTY;
    }
    intArray.set(newIntArray);
    auxArray.set(newAuxArray);
    seqArray.set(newSeqArray);
    int oldLength=length.get();
    length.set(newLength);
    for (int i=oldLength; i < newLength; i++) {
      if (!seqArray.get().compareAndSet(i,DatatableSequenceNumber.UNSTABLE,DatatableSequenceNumber.get())) {
        throw new IllegalStateException(""String_Node_Str"" + i + ""String_Node_Str"");
      }
    }
  }
  finally {
    unlock(lockedIndexes);
  }
}",0.9832202784719742
177517,"@Override public void rotate(Quaternion rot){
  if (!isValidAccess()) {
    if (Spout.getGame().debugMode())     throw new IllegalAccessError(""String_Node_Str"" + Thread.currentThread().getPriority() + ""String_Node_Str""+ owningThread.getName()+ ""String_Node_Str"");
    return;
  }
  Quaternion q=this.transform.getRotation().multiply(rot);
  this.transform.setRotation(q);
}","@Override public void rotate(Quaternion rot){
  if (!isValidAccess()) {
    if (Spout.getGame().debugMode())     throw new IllegalAccessError(""String_Node_Str"" + Thread.currentThread().getPriority() + ""String_Node_Str""+ owningThread.getName()+ ""String_Node_Str"");
    return;
  }
  setRotation(getRotation().multiply(rot));
}",0.8538681948424068
177518,"/** 
 * Called when the tick is finished and collisions need to be resolved and move events fired
 */
public void resolve(){
  if (this.collision == null || this.getWorld() == null)   return;
  final Point location=this.transform.getPosition();
  this.collision.setPosition(location);
  List<CollisionVolume> colliding=((SpoutWorld)location.getWorld()).getCollidingObject(this.collision);
  Vector3 offset=this.lastTransform.getPosition().subtract(location);
  for (  CollisionVolume box : colliding) {
    Vector3 collision=this.collision.resolve(box);
    if (collision != null) {
      collision=collision.subtract(location);
      System.out.println(""String_Node_Str"" + collision);
      if (collision.getX() != 0F) {
        offset=new Vector3(collision.getX(),offset.getY(),offset.getZ());
      }
      if (collision.getY() != 0F) {
        offset=new Vector3(offset.getX(),collision.getY(),offset.getZ());
      }
      if (collision.getZ() != 0F) {
        offset=new Vector3(offset.getX(),offset.getY(),collision.getZ());
      }
    }
  }
  this.setPosition(location.add(offset));
}","/** 
 * Called when the tick is finished and collisions need to be resolved and move events fired
 */
public void resolve(){
  if (this.collision == null || this.getWorld() == null)   return;
  final Point location=this.transform.getPosition();
  this.collision.setPosition(location);
  List<CollisionVolume> colliding=((SpoutWorld)location.getWorld()).getCollidingObject(this.collision);
  Vector3 offset=this.lastTransform.getPosition().subtract(location);
  for (  CollisionVolume box : colliding) {
    Vector3 collision=this.collision.resolve(box);
    if (collision != null) {
      collision=collision.subtract(location);
      System.out.println(""String_Node_Str"" + collision);
      if (collision.getX() != 0F) {
        offset=new Vector3(collision.getX(),offset.getY(),offset.getZ());
      }
      if (collision.getY() != 0F) {
        offset=new Vector3(offset.getX(),collision.getY(),offset.getZ());
      }
      if (collision.getZ() != 0F) {
        offset=new Vector3(offset.getX(),offset.getY(),collision.getZ());
      }
    }
  }
}",0.980410447761194
177519,"@Override public void translate(float x,float y,float z){
  if (!isValidAccess()) {
    if (Spout.getGame().debugMode())     throw new IllegalAccessError(""String_Node_Str"" + Thread.currentThread().getPriority() + ""String_Node_Str""+ owningThread.getName()+ ""String_Node_Str"");
    return;
  }
  Vector3 p=this.transform.getPosition().add(x,y,z);
  Point s=new Point(p,this.transform.getPosition().getWorld());
  this.transform.setPosition(s);
}","@Override public void translate(float x,float y,float z){
  translate(new Vector3(x,y,z));
}",0.3252336448598131
177520,"@Override public void scale(float x,float y,float z){
  Vector3 s=new Vector3(x,y,z);
  scale(s);
}","@Override public void scale(float x,float y,float z){
  scale(new Vector3(x,y,z));
}",0.8633879781420765
177521,"/** 
 * Saves the configuration to disk. All errors are clobbered.
 * @return true if it was successful
 */
public boolean save(){
  FileOutputStream stream=null;
  File parent=file.getParentFile();
  if (parent != null) {
    parent.mkdirs();
  }
  try {
    stream=new FileOutputStream(file);
    OutputStreamWriter writer=new OutputStreamWriter(stream,""String_Node_Str"");
    if (header != null) {
      writer.append(header);
      writer.append(""String_Node_Str"");
    }
    for (    ConfigurationNode node : nodes) {
      node.setConfiguration(this);
    }
    yaml.dump(root,writer);
    return true;
  }
 catch (  IOException e) {
  }
 finally {
    try {
      if (stream != null) {
        stream.close();
      }
    }
 catch (    IOException e) {
    }
  }
  return false;
}","/** 
 * Saves the configuration to disk. All errors are clobbered.
 * @return true if it was successful
 */
public boolean save(){
  FileOutputStream stream=null;
  File parent=file.getParentFile();
  if (parent != null) {
    parent.mkdirs();
  }
  try {
    stream=new FileOutputStream(file);
    OutputStreamWriter writer=new OutputStreamWriter(stream,""String_Node_Str"");
    if (header != null) {
      writer.append(header);
      writer.append(""String_Node_Str"");
    }
    for (    ConfigurationNode node : nodes) {
      setValue(node.getPath(),node.getValue());
    }
    yaml.dump(root,writer);
    return true;
  }
 catch (  IOException e) {
  }
 finally {
    try {
      if (stream != null) {
        stream.close();
      }
    }
 catch (    IOException e) {
    }
  }
  return false;
}",0.962822936357908
177522,"/** 
 * Returns a double from the value, default value if not a double.
 * @return double
 */
public double getDouble(double def){
  Double d=MathHelper.castDouble(value);
  if (d != null) {
    return d;
  }
  if (value == null) {
    this.setValue(def,true);
  }
  return def;
}","/** 
 * Returns a double from the value, default value if not a double.
 * @return double
 */
public double getDouble(double def){
  Double d=MathHelper.castDouble(value);
  if (d != null) {
    return d;
  }
  return def;
}",0.8492063492063492
177523,"/** 
 * Returns a integer from the value, default value if not a integer.
 * @return integer
 */
public int getInteger(int def){
  Integer i=MathHelper.castInt(value);
  if (i != null) {
    return i;
  }
  if (value == null) {
    this.setValue(def,true);
  }
  return def;
}","/** 
 * Returns a integer from the value, default value if not a integer.
 * @return integer
 */
public int getInteger(int def){
  Integer i=MathHelper.castInt(value);
  if (i != null) {
    return i;
  }
  return def;
}",0.8588709677419355
177524,"/** 
 * Returns a string from the value, default value if not a string.
 * @return string
 */
public String getString(String def){
  if (value == null) {
    this.setValue(def,true);
  }
 else {
    return value.toString();
  }
  return def;
}","/** 
 * Returns a string from the value.
 * @return string
 */
public String getString(){
  return value.toString();
}",0.6537396121883656
177525,"/** 
 * Gets the current value of the node.
 * @return the value of the node.
 */
public Object getValue(){
  if (value != null) {
    return value;
  }
  this.setValue(def,true);
  return def;
}","/** 
 * Gets the current value of the node.
 * @return the value of the node.
 */
public Object getValue(){
  if (value != null) {
    return value;
  }
  return def;
}",0.9256198347107438
177526,"/** 
 * Returns a list from the value, default value if not a list.
 * @return list
 */
public List<Object> getList(List<Object> def){
  if (value != null && value instanceof List) {
    return (List<Object>)value;
  }
  if (value == null) {
    this.setValue(def,true);
  }
  return def;
}","/** 
 * Returns a list from the value, default value if not a list.
 * @return list
 */
public List<Object> getList(List<Object> def){
  if (value != null && value instanceof List) {
    return (List<Object>)value;
  }
  return def;
}",0.8664122137404581
177527,"/** 
 * Sets the un-staged value of the node. The actually configuration will not be updated until 'MemoryConfiguration.setProperty()'
 * @param value
 */
public void setValue(Object value,boolean toMemoryConfig){
  this.value=value;
  if (config != null && toMemoryConfig) {
    config.addNode(this);
  }
}","/** 
 * Sets the un-staged value of the node. The actually configuration will not be updated until 'MemoryConfiguration.setProperty()'
 * @param value
 */
public void setValue(Object value){
  this.value=value;
  if (config != null) {
    config.addNode(this);
  }
}",0.9284467713787086
177528,"/** 
 * Returns a boolean from the value, default value if not a boolean.
 * @return boolean
 */
public boolean getBoolean(boolean def){
  Boolean b=MathHelper.castBoolean(value);
  if (b != null) {
    return b;
  }
  if (value == null) {
    this.setValue(def,true);
  }
  return def;
}","/** 
 * Returns a boolean from the value, default value if not a boolean.
 * @return boolean
 */
public boolean getBoolean(boolean def){
  Boolean b=MathHelper.castBoolean(value);
  if (b != null) {
    return b;
  }
  return def;
}",0.8653846153846154
177529,"/** 
 * Sets the configuration the node will be saved to.
 * @param config
 */
public void setConfiguration(MemoryConfiguration config){
  config.addNode(this);
}","/** 
 * Sets the configuration the node will be saved to.
 * @param config
 */
public void setConfiguration(MemoryConfiguration config){
  this.config=config;
}",0.9316770186335404
177530,"public Set<ConfigurationNode> getNodes(){
  return nodes;
}","/** 
 * Gets the set of nodes in the configuration; only contains nodes assigned.
 * @return node set
 */
public Set<ConfigurationNode> getNodes(){
  return nodes;
}",0.5267857142857143
177531,"/** 
 * Adds a node to the configuration given the path and value.
 * @param path
 * @param value
 * @return new node
 */
public ConfigurationNode addNode(String path,Object value){
  ConfigurationNode node=new ConfigurationNode(path,value);
  node.setConfiguration(this);
  return node;
}","/** 
 * Adds a node to the configuration given the path and value.
 * @param path
 * @param value
 * @return true if node exists
 */
public boolean addNode(String path,Object value){
  return addNode(new ConfigurationNode(path,value));
}",0.7262357414448669
177532,"/** 
 * Returns a double from the value, default value if not a double.
 * @return double
 */
public double getDouble(String path,double def){
  Object value=getValue(path);
  Double d=MathHelper.castDouble(value);
  if (d != null) {
    return d;
  }
  if (value == null) {
    this.setValue(path,def);
  }
  return def;
}","/** 
 * Returns a double from the value, default value if not a double.
 * @return double
 */
public double getDouble(String path,double def){
  Object value=getValue(path);
  Double d=MathHelper.castDouble(value);
  if (d != null) {
    return d;
  }
  return def;
}",0.864406779661017
177533,"/** 
 * Returns a integer from the value, default value if not a integer.
 * @return integer
 */
public int getInteger(String path,int def){
  Object value=getValue(path);
  Integer i=MathHelper.castInt(value);
  if (i != null) {
    return i;
  }
  if (value == null) {
    this.setValue(path,def);
  }
  return def;
}","/** 
 * Returns a integer from the value, default value if not a integer.
 * @return integer
 */
public int getInteger(String path,int def){
  Object value=getValue(path);
  Integer i=MathHelper.castInt(value);
  if (i != null) {
    return i;
  }
  return def;
}",0.872852233676976
177534,"/** 
 * Returns a string from the value, default value if not a string.
 * @return string
 */
public String getString(String path,String def){
  Object value=getValue(path);
  if (value instanceof String) {
    return (String)value;
  }
  if (value == null) {
    this.setValue(path,def);
  }
  return def;
}","/** 
 * Returns a string from the value, default given if not a string.
 * @return string
 */
public String getString(String path,String def){
  Object value=getValue(path);
  if (value instanceof String) {
    return (String)value;
  }
  return def;
}",0.8571428571428571
177535,"/** 
 * Returns a Set of the keys under that parent
 * @param path
 * @return Set String
 */
public Set<String> getKeys(String path){
  Set<String> keys=new HashSet<String>();
  String[] sections=path.split(pathSeperator);
  Map<String,Object> section=this.root;
  for (int i=0; i < sections.length && section != null; i++) {
    String sec=sections[i];
    try {
      section=(Map<String,Object>)section.get(sec);
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (section != null) {
    keys=section.keySet();
  }
  return keys;
}","/** 
 * Returns a Set of the keys under that parent
 * @param path
 * @return Set String
 */
public Set<String> getKeys(String path){
  Set<String> keys=new HashSet<String>();
  String[] sections=path.split(pathSeparator);
  Map<String,Object> section=this.root;
  for (int i=0; i < sections.length && section != null; i++) {
    String sec=sections[i];
    try {
      section=(Map<String,Object>)section.get(sec);
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (section != null) {
    keys=section.keySet();
  }
  return keys;
}",0.9983416252072967
177536,"/** 
 * Gets the value at a given path
 * @param path
 * @return the object from the path
 */
public Object getValue(String path){
  if (!path.contains(pathSeperator)) {
    Object val=root.get(path);
    if (val == null) {
      return null;
    }
    return val;
  }
  String[] parts=path.split(pathSeperator);
  Map<String,Object> node=root;
  for (int i=0; i < parts.length; i++) {
    Object o=node.get(parts[i]);
    if (o == null) {
      return null;
    }
    if (i == parts.length - 1) {
      return o;
    }
    try {
      node=(Map<String,Object>)o;
    }
 catch (    ClassCastException e) {
      return null;
    }
  }
  return null;
}","/** 
 * Gets the value at a given path
 * @param path
 * @return the object from the path
 */
public Object getValue(String path){
  if (!path.contains(pathSeparator)) {
    Object val=root.get(path);
    if (val == null) {
      return null;
    }
    return val;
  }
  String[] parts=path.split(pathSeparator);
  Map<String,Object> node=root;
  for (int i=0; i < parts.length; i++) {
    Object o=node.get(parts[i]);
    if (o == null) {
      return null;
    }
    if (i == parts.length - 1) {
      return o;
    }
    try {
      node=(Map<String,Object>)o;
    }
 catch (    ClassCastException e) {
      return null;
    }
  }
  return null;
}",0.9969278033794164
177537,"/** 
 * Adds multiple nodes to the configuration.
 * @param nodes
 */
public void addNodes(ConfigurationNode... nodes){
  for (  ConfigurationNode node : nodes) {
    node.setConfiguration(this);
  }
}","/** 
 * Adds multiple nodes to the configuration.
 * @param nodes
 * @return true if node exists.
 */
public boolean addNodes(ConfigurationNode... nodes){
  for (  ConfigurationNode node : nodes) {
    return addNode(node);
  }
  return false;
}",0.7713004484304933
177538,"/** 
 * Returns a list from the value, default value if not a list.
 * @return list
 */
public List<Object> getList(String path,List<Object> def){
  Object value=getValue(path);
  if (value != null && value instanceof List) {
    return (List<Object>)value;
  }
  if (value == null) {
    this.setValue(path,def);
  }
  return def;
}","/** 
 * Returns a list from the value, default value if not a list.
 * @return list
 */
public List<Object> getList(String path,List<Object> def){
  Object value=getValue(path);
  if (value != null && value instanceof List) {
    return (List<Object>)value;
  }
  return def;
}",0.8852459016393442
177539,"/** 
 * Sets the object value at the given path.
 * @param path
 * @param value
 */
public void setValue(String path,Object value){
  if (!path.contains(pathSeperator)) {
    root.put(path,value);
    return;
  }
  String[] parts=path.split(pathSeperator);
  Map<String,Object> node=root;
  for (int i=0; i < parts.length; i++) {
    Object o=node.get(parts[i]);
    if (i == parts.length - 1) {
      node.put(parts[i],value);
      return;
    }
    if (o == null || !(o instanceof Map)) {
      o=new HashMap<String,Object>();
      node.put(parts[i],o);
    }
    node=(Map<String,Object>)o;
  }
}","/** 
 * Sets the object value at the given path.
 * @param path
 * @param value
 */
public void setValue(String path,Object value){
  if (!path.contains(pathSeparator)) {
    root.put(path,value);
    return;
  }
  String[] parts=path.split(pathSeparator);
  Map<String,Object> node=root;
  for (int i=0; i < parts.length; i++) {
    Object o=node.get(parts[i]);
    if (i == parts.length - 1) {
      node.put(parts[i],value);
      return;
    }
    if (o == null || !(o instanceof Map)) {
      o=new HashMap<String,Object>();
      node.put(parts[i],o);
    }
    node=(Map<String,Object>)o;
  }
}",0.9966722129783694
177540,"/** 
 * Returns a boolean from the value, default value if not a boolean.
 * @return boolean
 */
public boolean getBoolean(String path,boolean def){
  Object value=getValue(path);
  Boolean b=MathHelper.castBoolean(value);
  if (b != null) {
    return b;
  }
  if (value == null) {
    this.setValue(path,def);
  }
  return def;
}","/** 
 * Returns a boolean from the value, default value if not a boolean.
 * @return boolean
 */
public boolean getBoolean(String path,boolean def){
  Object value=getValue(path);
  Boolean b=MathHelper.castBoolean(value);
  if (b != null) {
    return b;
  }
  return def;
}",0.8778877887788779
177541,"/** 
 * Gets a node from the configuration, if the path is found, returns a node with the value of the path. If it's null, it returns the default value given.
 * @param path
 * @param def
 * @return
 */
public ConfigurationNode getNode(String path,Object def){
  ConfigurationNode node=new ConfigurationNode(path,def);
  Object value=this.getValue(node.getPath());
  if (value == null) {
    value=def;
  }
  node.setValue(value,true);
  node.setConfiguration(this);
  return node;
}","/** 
 * Gets a node from the configuration, if the path is found, returns a node with the value of the path. Can return null.
 * @param path
 * @return node
 */
public ConfigurationNode getNode(String path){
  return getNode(path,null);
}",0.5492371705963939
177542,"/** 
 * Removes a node from memory.
 * @param path
 */
public void removeNode(String path){
  for (  ConfigurationNode node : nodes) {
    if (node.getPath().equalsIgnoreCase(path)) {
      nodes.remove(node);
    }
  }
}","/** 
 * Removes a node from memory.
 * @param node
 * @return true if contained node.
 */
public boolean removeNode(ConfigurationNode node){
  return nodes.remove(node);
}",0.6377551020408163
177543,"/** 
 * Called when the tick is finished and collisions need to be resolved and move events fired
 */
public void resolve(){
  if (this.collision == null)   return;
  this.collision.setPosition(this.transform.getPosition());
  final Point location=this.transform.getPosition();
  List<CollisionVolume> colliding=((SpoutWorld)this.getWorld()).getCollidingObject(this.collision);
  Vector3 offset=this.lastTransform.getPosition().subtract(this.transform.getPosition());
  for (  CollisionVolume box : colliding) {
    Vector3 collision=this.collision.resolve(box);
    if (collision != null) {
      collision=collision.subtract(location);
      System.out.println(""String_Node_Str"" + collision);
      if (collision.getX() != 0F) {
        offset=new Vector3(collision.getX(),offset.getY(),offset.getZ());
      }
      if (collision.getY() != 0F) {
        offset=new Vector3(offset.getX(),collision.getY(),offset.getZ());
      }
      if (collision.getZ() != 0F) {
        offset=new Vector3(offset.getX(),offset.getY(),collision.getZ());
      }
    }
  }
  location.add(offset);
  this.setPosition(location);
}","/** 
 * Called when the tick is finished and collisions need to be resolved and move events fired
 */
public void resolve(){
  if (this.collision == null)   return;
  this.collision.setPosition(this.transform.getPosition());
  final Point location=this.transform.getPosition();
  if (this.getWorld() == null) {
    return;
  }
  List<CollisionVolume> colliding=((SpoutWorld)this.getWorld()).getCollidingObject(this.collision);
  Vector3 offset=this.lastTransform.getPosition().subtract(this.transform.getPosition());
  for (  CollisionVolume box : colliding) {
    Vector3 collision=this.collision.resolve(box);
    if (collision != null) {
      collision=collision.subtract(location);
      System.out.println(""String_Node_Str"" + collision);
      if (collision.getX() != 0F) {
        offset=new Vector3(collision.getX(),offset.getY(),offset.getZ());
      }
      if (collision.getY() != 0F) {
        offset=new Vector3(offset.getX(),collision.getY(),offset.getZ());
      }
      if (collision.getZ() != 0F) {
        offset=new Vector3(offset.getX(),offset.getY(),collision.getZ());
      }
    }
  }
  location.add(offset);
  this.setPosition(location);
}",0.9784804567413264
177544,"public void start(){
  Spout.setGame(this);
  if (debugMode()) {
    getLogger().warning(""String_Node_Str"");
  }
  CommandRegistrationsFactory<Class<?>> commandRegFactory=new AnnotatedCommandRegistrationFactory(new SimpleInjector(this),new SimpleAnnotatedCommandExecutorFactory());
  getRootCommand().addSubCommands(this,AdministrationCommands.class,commandRegFactory);
  getRootCommand().addSubCommands(this,MessagingCommands.class,commandRegFactory);
  if (Spout.getGame().debugMode())   getRootCommand().addSubCommands(this,TestCommands.class,commandRegFactory);
  consoleManager.setupConsole();
  config.load();
  loadPlugins();
  enablePlugins();
  if (loadedWorlds.getLive().size() == 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  getDefaultWorld();
  if (bootstrapProtocols.size() == 0) {
    getLogger().warning(""String_Node_Str"");
  }
  getEventManager().registerEvents(new InternalEventListener(this),this);
  scheduler.startMainThread();
}","public void start(){
  Spout.setGame(this);
  if (debugMode()) {
    getLogger().warning(""String_Node_Str"");
  }
  CommandRegistrationsFactory<Class<?>> commandRegFactory=new AnnotatedCommandRegistrationFactory(new SimpleInjector(this),new SimpleAnnotatedCommandExecutorFactory());
  getRootCommand().addSubCommands(this,AdministrationCommands.class,commandRegFactory);
  getRootCommand().addSubCommands(this,MessagingCommands.class,commandRegFactory);
  if (Spout.getGame().debugMode())   getRootCommand().addSubCommands(this,TestCommands.class,commandRegFactory);
  consoleManager.setupConsole();
  config.load();
  storeQueue.start();
  banManager=new FlatFileBanManager(this);
  banManager.load();
  loadPlugins();
  enablePlugins();
  if (loadedWorlds.getLive().size() == 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  getDefaultWorld();
  if (bootstrapProtocols.size() == 0) {
    getLogger().warning(""String_Node_Str"");
  }
  getEventManager().registerEvents(new InternalEventListener(this),this);
  scheduler.startMainThread();
}",0.9575936883629192
177545,"@SuppressWarnings(""String_Node_Str"") public void pulse(){
  timeoutCounter++;
  Message message;
  if (state == State.GAME) {
    while ((message=sendQueue.poll()) != null) {
      send(message,true);
    }
  }
  while ((message=messageQueue.poll()) != null) {
    MessageHandler<Message> handler=(MessageHandler<Message>)protocol.get().getHandlerLookupService().find(message.getClass());
    if (handler != null) {
      try {
        handler.handle(this,player,message);
      }
 catch (      Exception e) {
        Spout.getGame().getLogger().log(Level.SEVERE,""String_Node_Str"" + message.getClass().getSimpleName() + ""String_Node_Str""+ getPlayer().getName());
        e.printStackTrace();
        disconnect(""String_Node_Str"" + message.getClass().getSimpleName());
      }
    }
    timeoutCounter=0;
  }
  if (timeoutCounter >= TIMEOUT_TICKS) {
    disconnect(""String_Node_Str"",true);
  }
}","@SuppressWarnings(""String_Node_Str"") public void pulse(){
  timeoutCounter++;
  Message message;
  if (state == State.GAME) {
    while ((message=sendQueue.poll()) != null) {
      send(message,true);
    }
  }
  while ((message=messageQueue.poll()) != null) {
    MessageHandler<Message> handler=(MessageHandler<Message>)protocol.get().getHandlerLookupService().find(message.getClass());
    if (handler != null) {
      try {
        handler.handle(this,player,message);
      }
 catch (      Exception e) {
        Spout.getGame().getLogger().log(Level.SEVERE,""String_Node_Str"" + message.getClass().getSimpleName() + ""String_Node_Str""+ (getPlayer() != null ? getPlayer().getName() : ""String_Node_Str""));
        e.printStackTrace();
        disconnect(""String_Node_Str"" + message.getClass().getSimpleName());
      }
    }
    timeoutCounter=0;
  }
  if (timeoutCounter >= TIMEOUT_TICKS) {
    disconnect(""String_Node_Str"",true);
  }
}",0.9759825327510916
177546,"/** 
 * Gets the distance between two Vector3.
 * @param a
 * @param b
 * @return
 */
public static double distance(Vector3 a,Vector3 b){
  double xzDist=Vector2.distance(a.toVector2(),b.toVector2());
  return Math.sqrt(Math.pow(xzDist,2) + Math.pow(Math.abs(Vector3.subtract(a,b).getY()),2));
}","/** 
 * Gets the distance between two Vector3.
 * @param a
 * @param b
 * @return
 */
public static double distance(Vector3 a,Vector3 b){
  double xzDist=Vector2.distance(a.toVector2(),b.toVector2());
  return Math.sqrt(Math.pow(xzDist,2) + Math.pow(Math.abs(Vector3.subtract(a,b).y),2));
}",0.988034188034188
177547,"/** 
 * Returns the dot product of A and B
 * @param a
 * @param b
 * @return
 */
public static float dot(Vector3 a,Vector3 b){
  return a.getX() * b.getX() + a.getY() * b.getY() + a.getZ() * b.getZ();
}","/** 
 * Returns the dot product of A and B
 * @param a
 * @param b
 * @return
 */
public static float dot(Vector3 a,Vector3 b){
  return a.x * b.x + a.y * b.y + a.z * b.z;
}",0.8882978723404256
177548,"/** 
 * Returns a Vector3 containing the smallest X, Y, and Z values.
 * @param o1
 * @param o2
 * @return
 */
public static Vector3 min(Vector3 o1,Vector3 o2){
  return new Vector3(Math.min(o1.getX(),o2.getX()),Math.min(o1.getY(),o2.getY()),Math.min(o1.getZ(),o2.getZ()));
}","/** 
 * Returns a Vector3 containing the smallest X, Y, and Z values.
 * @param o1
 * @param o2
 * @return
 */
public static Vector3 min(Vector3 o1,Vector3 o2){
  return new Vector3(Math.min(o1.x,o2.x),Math.min(o1.y,o2.y),Math.min(o1.z,o2.z));
}",0.8730769230769231
177549,"/** 
 * Returns a new float array that is {x, y, z}
 * @param a
 * @return
 */
public static float[] toArray(Vector3 a){
  return new float[]{a.getX(),a.getY(),a.getZ()};
}","/** 
 * Returns a new float array that is {x, y, z}
 * @param a
 * @return
 */
public static float[] toArray(Vector3 a){
  return new float[]{a.x,a.y,a.z};
}",0.9361702127659576
177550,"/** 
 * Raises the X, Y, and Z values of a Vector3 to the given power.
 * @param o
 * @param power
 * @return
 */
public static Vector3 pow(Vector3 o,double power){
  return new Vector3(Math.pow(o.getX(),power),Math.pow(o.getY(),power),Math.pow(o.getZ(),power));
}","/** 
 * Raises the X, Y, and Z values of a Vector3 to the given power.
 * @param o
 * @param power
 * @return
 */
public static Vector3 pow(Vector3 o,double power){
  return new Vector3(Math.pow(o.x,power),Math.pow(o.y,power),Math.pow(o.z,power));
}",0.95906432748538
177551,"/** 
 * Divides one Vector3 by the other Vector3
 * @param a
 * @param b
 * @return
 */
public static Vector3 divide(Vector3 a,Vector3 b){
  return new Vector3(a.getX() / b.getX(),a.getY() / b.getY(),a.getZ() / b.getZ());
}","/** 
 * Divides one Vector3 by the other Vector3
 * @param a
 * @param b
 * @return
 */
public static Vector3 divide(Vector3 a,Vector3 b){
  return new Vector3(a.x / b.x,a.y / b.y,a.z / b.z);
}",0.8990384615384616
177552,"/** 
 * Multiplies one Vector3 by the other Vector3
 * @param a
 * @param b
 * @return
 */
public static Vector3 multiply(Vector3 a,Vector3 b){
  return new Vector3(a.getX() * b.getX(),a.getY() * b.getY(),a.getZ() * b.getZ());
}","/** 
 * Multiplies one Vector3 by the other Vector3
 * @param a
 * @param b
 * @return
 */
public static Vector3 multiply(Vector3 a,Vector3 b){
  return new Vector3(a.x * b.x,a.y * b.y,a.z * b.z);
}",0.9014084507042254
177553,"/** 
 * Rounds the X, Y, and Z values of the given Vector3 down to the nearest integer value.
 * @param o Vector3 to use
 * @return
 */
public static Vector3 floor(Vector3 o){
  return new Vector3(Math.floor(o.getX()),Math.floor(o.getY()),Math.floor(o.getZ()));
}","/** 
 * Rounds the X, Y, and Z values of the given Vector3 down to the nearest integer value.
 * @param o Vector3 to use
 * @return
 */
public static Vector3 floor(Vector3 o){
  return new Vector3(Math.floor(o.x),Math.floor(o.y),Math.floor(o.z));
}",0.958904109589041
177554,"/** 
 * Creates a new Vector that is A + B
 * @param a
 * @param b
 * @return
 */
public static Vector3 add(Vector3 a,Vector3 b){
  return new Vector3(a.getX() + b.getX(),a.getY() + b.getY(),a.getZ() + b.getZ());
}","/** 
 * Creates a new Vector that is A + B
 * @param a
 * @param b
 * @return
 */
public static Vector3 add(Vector3 a,Vector3 b){
  return new Vector3(a.x + b.x,a.y + b.y,a.z + b.z);
}",0.8944723618090452
177555,"/** 
 * Returns a Vector3 containing the largest X, Y, and Z values.
 * @param o1
 * @param o2
 * @return
 */
public static Vector3 max(Vector3 o1,Vector3 o2){
  return new Vector3(Math.max(o1.getX(),o2.getX()),Math.max(o1.getY(),o2.getY()),Math.max(o1.getZ(),o2.getZ()));
}","/** 
 * Returns a Vector3 containing the largest X, Y, and Z values.
 * @param o1
 * @param o2
 * @return
 */
public static Vector3 max(Vector3 o1,Vector3 o2){
  return new Vector3(Math.max(o1.x,o2.x),Math.max(o1.y,o2.y),Math.max(o1.z,o2.z));
}",0.8725868725868726
177556,"/** 
 * Creates a new vector that is A - B
 * @param a
 * @param b
 * @return
 */
public static Vector3 subtract(Vector3 a,Vector3 b){
  return new Vector3(a.getX() - b.getX(),a.getY() - b.getY(),a.getZ() - b.getZ());
}","/** 
 * Creates a new vector that is A - B
 * @param a
 * @param b
 * @return
 */
public static Vector3 subtract(Vector3 a,Vector3 b){
  return new Vector3(a.x - b.x,a.y - b.y,a.z - b.z);
}",0.8970588235294118
177557,"/** 
 * Creates a new Vector that is the A x B The Cross Product is the vector orthogonal to both A and B
 * @param a
 * @param b
 * @return
 */
public static Vector3 cross(Vector3 a,Vector3 b){
  return new Vector3(a.getY() * b.getZ() - a.getZ() * b.getY(),a.getZ() * b.getX() - a.getX() * b.getZ(),a.getX() * b.getY() - a.getY() * b.getX());
}","/** 
 * Creates a new Vector that is the A x B The Cross Product is the vector orthogonal to both A and B
 * @param a
 * @param b
 * @return
 */
public static Vector3 cross(Vector3 a,Vector3 b){
  return new Vector3(a.y * b.z - a.z * b.y,a.z * b.x - a.x * b.z,a.x * b.y - a.y * b.x);
}",0.7714285714285715
177558,"/** 
 * Returns a Vector2 object using the X and Z values of the given Vector3. The x of the Vector3 becomes the x of the Vector2, and the z of this Vector3 becomes the y of the Vector2m.
 * @param o Vector3 object to use
 * @return
 */
public static Vector2 toVector2(Vector3 o){
  return new Vector2(o.getX(),o.getZ());
}","/** 
 * Returns a Vector2 object using the X and Z values of the given Vector3. The x of the Vector3 becomes the x of the Vector2, and the z of this Vector3 becomes the y of the Vector2m.
 * @param o Vector3 object to use
 * @return
 */
public static Vector2 toVector2(Vector3 o){
  return new Vector2(o.x,o.z);
}",0.9779874213836478
177559,"/** 
 * Rounds the X, Y, and Z values of the given Vector3 up to the nearest integer value.
 * @param o Vector3 to use
 * @return
 */
public static Vector3 ceil(Vector3 o){
  return new Vector3(Math.ceil(o.getX()),Math.ceil(o.getY()),Math.ceil(o.getZ()));
}","/** 
 * Rounds the X, Y, and Z values of the given Vector3 up to the nearest integer value.
 * @param o Vector3 to use
 * @return
 */
public static Vector3 ceil(Vector3 o){
  return new Vector3(Math.ceil(o.x),Math.ceil(o.y),Math.ceil(o.z));
}",0.9579158316633266
177560,"/** 
 * Returns a Vector2m object using the X and Z values of the given Vector3. The x of the Vector3 becomes the x of the Vector2m, and the z of this Vector3 becomes the y of the Vector2m.
 * @param o Vector3 object to use
 * @return
 */
public static Vector2m toVector2m(Vector3 o){
  return new Vector2m(o.getX(),o.getZ());
}","/** 
 * Returns a Vector2m object using the X and Z values of the given Vector3. The x of the Vector3 becomes the x of the Vector2m, and the z of this Vector3 becomes the y of the Vector2m.
 * @param o Vector3 object to use
 * @return
 */
public static Vector2m toVector2m(Vector3 o){
  return new Vector2m(o.x,o.z);
}",0.978328173374613
177561,"/** 
 * Sets the X, Y, and Z values of the given Vector3 to their absolute value.
 * @param o Vector3 to use
 * @return
 */
public static Vector3 abs(Vector3 o){
  return new Vector3(Math.abs(o.getX()),Math.abs(o.getY()),Math.abs(o.getZ()));
}","/** 
 * Sets the X, Y, and Z values of the given Vector3 to their absolute value.
 * @param o Vector3 to use
 * @return
 */
public static Vector3 abs(Vector3 o){
  return new Vector3(Math.abs(o.x),Math.abs(o.y),Math.abs(o.z));
}",0.9554140127388536
177562,"/** 
 * Rounds the X, Y, and Z values of the given Vector3 to the nearest integer value.
 * @param o Vector3 to use
 * @return
 */
public static Vector3 round(Vector3 o){
  return new Vector3(Math.round(o.getX()),Math.round(o.getY()),Math.round(o.getZ()));
}","/** 
 * Rounds the X, Y, and Z values of the given Vector3 to the nearest integer value.
 * @param o Vector3 to use
 * @return
 */
public static Vector3 round(Vector3 o){
  return new Vector3(Math.round(o.x),Math.round(o.y),Math.round(o.z));
}",0.9580838323353292
177563,"/** 
 * Sets this point equal to another pointm
 */
public void set(Pointm point){
  world=point.world;
  x=point.x;
  y=point.y;
  z=point.y;
}","/** 
 * Sets this point equal to another pointm
 */
protected void set(AtomicPoint point){
  this.world=point.world;
  this.x=point.x;
  this.y=point.y;
  this.z=point.y;
}",0.879746835443038
177564,"public void preSnapshot(){
  Set<Player> observerSnapshot=observers.get();
  Set<Player> observerLive=observers.getLive();
  Set<Entity> entitiesSnapshot=entities.get();
  Set<Entity> entitiesLive=entities.getLive();
  for (  Player p : observerSnapshot) {
    if (!observerLive.contains(p)) {
      for (      Entity e : entitiesSnapshot) {
        if (p.getEntity() != e) {
          NetworkSynchronizer n=p.getNetworkSynchronizer();
          if (n != null) {
            n.destroyEntity(e);
          }
        }
      }
    }
  }
  for (  Player p : observerLive) {
    if (!observerSnapshot.contains(p)) {
      for (      Entity e : entitiesSnapshot) {
        if (p.getEntity() != e) {
          NetworkSynchronizer n=p.getNetworkSynchronizer();
          if (n != null) {
            n.spawnEntity(e);
          }
        }
      }
    }
  }
  for (  Entity e : entitiesSnapshot) {
    if (!entitiesLive.contains(e)) {
      SpoutChunk newChunk=((SpoutChunk)e.getChunkLive());
      for (      Player p : observerLive) {
        if (!newChunk.observers.getLive().contains(p)) {
          if (p.getEntity() != e) {
            NetworkSynchronizer n=p.getNetworkSynchronizer();
            if (n != null) {
              n.destroyEntity(e);
            }
          }
        }
      }
    }
  }
  for (  Entity e : entitiesLive) {
    boolean justSpawned=((SpoutEntity)e).justSpawned();
    if (!entitiesSnapshot.contains(e) || ((SpoutEntity)e).justSpawned()) {
      SpoutChunk oldChunk=((SpoutChunk)e.getChunk());
      for (      Player p : observerLive) {
        if (!oldChunk.observers.get().contains(p) || justSpawned) {
          if (p.getEntity() != e) {
            NetworkSynchronizer n=p.getNetworkSynchronizer();
            if (n != null) {
              n.spawnEntity(e);
            }
          }
        }
      }
    }
  }
  for (  Entity e : entitiesLive) {
    for (    Player p : observerLive) {
      if (p.getEntity() != e) {
        NetworkSynchronizer n=p.getNetworkSynchronizer();
        if (n != null) {
          n.syncEntity(e);
        }
      }
    }
  }
}","public void preSnapshot(){
  Set<Player> observerSnapshot=observers.get();
  Set<Player> observerLive=observers.getLive();
  Set<Entity> entitiesSnapshot=entities.get();
  Set<Entity> entitiesLive=entities.getLive();
  for (  Player p : observerSnapshot) {
    if (!observerLive.contains(p)) {
      for (      Entity e : entitiesSnapshot) {
        if (p.getEntity() != e) {
          NetworkSynchronizer n=p.getNetworkSynchronizer();
          if (n != null) {
            n.destroyEntity(e);
          }
        }
      }
    }
  }
  for (  Player p : observerLive) {
    if (!observerSnapshot.contains(p)) {
      for (      Entity e : entitiesSnapshot) {
        if (p.getEntity() != e) {
          NetworkSynchronizer n=p.getNetworkSynchronizer();
          if (n != null) {
            n.spawnEntity(e);
          }
        }
      }
    }
  }
  for (  Entity e : entitiesSnapshot) {
    if (!entitiesLive.contains(e)) {
      SpoutChunk newChunk=((SpoutChunk)e.getChunkLive());
      for (      Player p : observerLive) {
        if (newChunk == null || !newChunk.observers.getLive().contains(p)) {
          if (p.getEntity() != e) {
            NetworkSynchronizer n=p.getNetworkSynchronizer();
            if (n != null) {
              n.destroyEntity(e);
            }
          }
        }
      }
    }
  }
  for (  Entity e : entitiesLive) {
    boolean justSpawned=((SpoutEntity)e).justSpawned();
    if (!entitiesSnapshot.contains(e) || ((SpoutEntity)e).justSpawned()) {
      SpoutChunk oldChunk=((SpoutChunk)e.getChunk());
      for (      Player p : observerLive) {
        if (justSpawned || oldChunk == null || !oldChunk.observers.get().contains(p)) {
          if (p.getEntity() != e) {
            NetworkSynchronizer n=p.getNetworkSynchronizer();
            if (n != null) {
              n.spawnEntity(e);
            }
          }
        }
      }
    }
  }
  for (  Entity e : entitiesLive) {
    for (    Player p : observerLive) {
      if (p.getEntity() != e) {
        NetworkSynchronizer n=p.getNetworkSynchronizer();
        if (n != null) {
          n.syncEntity(e);
        }
      }
    }
  }
}",0.7919621749408984
177565,"@Override public void setTransform(Transform transform){
  int seq=lock.writeLock();
  try {
    while (true) {
      int seqRead=transform.readLock();
      Point newPosition=transform.getPosition();
      chunkLive=newPosition.getWorld().getChunk(newPosition);
      Region newRegion=chunkLive.getRegion();
      if (newRegion == null && this.getController() instanceof PlayerController) {
        newRegion=newPosition.getWorld().getRegion(newPosition,true);
      }
      EntityManager newEntityManager=((SpoutRegion)newRegion).getEntityManager();
      transformLive.set(transform);
      entityManagerLive=newEntityManager;
      if (transform.readUnlock(seqRead)) {
        return;
      }
    }
  }
  finally {
    lock.writeUnlock(seq);
  }
}","@Override public void setTransform(Transform transform){
  int seq=lock.writeLock();
  try {
    while (true) {
      int seqRead=transform.readLock();
      Point newPosition=transform.getPosition();
      World world=newPosition.getWorld();
      if (world == null) {
        chunkLive=null;
        transformLive.set(DEAD);
        entityManagerLive=null;
        return;
      }
      chunkLive=newPosition.getWorld().getChunk(newPosition);
      Region newRegion=chunkLive.getRegion();
      if (newRegion == null && this.getController() instanceof PlayerController) {
        newRegion=newPosition.getWorld().getRegion(newPosition,true);
      }
      EntityManager newEntityManager=((SpoutRegion)newRegion).getEntityManager();
      transformLive.set(transform);
      entityManagerLive=newEntityManager;
      if (transform.readUnlock(seqRead)) {
        return;
      }
    }
  }
  finally {
    lock.writeUnlock(seq);
  }
}",0.8919239904988123
177566,"@Override public Chunk getChunkLive(){
  Point position=transformLive.getPosition();
  return position.getWorld().getChunk(position,true);
}","@Override public Chunk getChunkLive(){
  while (true) {
    int seq=lock.readLock();
    Point position=transformLive.getPosition();
    World w=position.getWorld();
    if (w == null) {
      if (lock.readUnlock(seq)) {
        return null;
      }
    }
 else {
      Chunk c=w.getChunk(position,true);
      if (lock.readUnlock(seq)) {
        return c;
      }
    }
  }
}",0.5116279069767442
177567,"public boolean kill(){
  int seq=lock.writeLock();
  try {
    while (true) {
      int seqRead=transformLive.readLock();
      AtomicPoint p=transformLive.getPosition();
      boolean alive=p.getWorld() != null;
      if (transformLive.readUnlock(seqRead)) {
        p.set(null,0F,0F,0F);
        entityManagerLive=null;
        return alive;
      }
    }
  }
  finally {
    lock.writeUnlock(seq);
  }
}","public boolean kill(){
  int seq=lock.writeLock();
  boolean alive=true;
  try {
    AtomicPoint p=transformLive.getPosition();
    alive=p.getWorld() != null;
    transformLive.set(DEAD);
  }
  finally {
    lock.writeUnlock(seq);
  }
  setTransform(DEAD);
  return alive;
}",0.2026431718061674
177568,"@Override public Chunk getChunk(){
  Point position=transform.getPosition();
  return position.getWorld().getChunk(position,true);
}","@Override public Chunk getChunk(){
  while (true) {
    int seq=lock.readLock();
    Point position=transform.getPosition();
    World w=position.getWorld();
    if (w == null) {
      if (lock.readUnlock(seq)) {
        return null;
      }
    }
 else {
      Chunk c=w.getChunk(position,true);
      if (lock.readUnlock(seq)) {
        return c;
      }
    }
  }
}",0.496
177569,"/** 
 * Sets the block id, data and auxData for the block at (x, y, z), if the current data matches the expected data.<br> <br>
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @param expect the expected block value
 * @param newValue the new block value
 * @return true if the block was set
 */
public final boolean compareAndSetBlock(int x,int y,int z,BlockFullState<T> expect,BlockFullState<T> newValue){
  return compareAndSetBlock(x,y,z,expect.id,expect.data,expect.auxData,newValue.id,newValue.data,newValue.auxData);
}","/** 
 * Sets the block id, data and auxData for the block at (x, y, z), if the current data matches the expected data.<br> <br>
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @param expect the expected block value
 * @param newValue the new block value
 * @return true if the block was set
 */
public final boolean compareAndSetBlock(int x,int y,int z,BlockFullState<T> expect,BlockFullState<T> newValue){
  return compareAndSetBlock(x,y,z,expect.getId(),expect.getData(),expect.getAuxData(),newValue.getId(),newValue.getData(),newValue.getAuxData());
}",0.919104991394148
177570,"/** 
 * Atomically gets the full set of data associated with the block.<br> <br>
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @param fullState a BlockFullState object to store the return value, or null to generate a new one
 * @return the full state of the block
 */
public final BlockFullState<T> getFullData(int x,int y,int z,BlockFullState<T> fullData){
  if (fullData == null) {
    fullData=new BlockFullState<T>();
  }
  int index=getIndex(x,y,z);
  while (true) {
    int seq=getSequence(x,y,z);
    short blockId=blockIds.get(index);
    if (auxStore.isReserved(blockId)) {
      fullData.id=auxStore.getId(blockId);
      fullData.data=auxStore.getData(blockId);
      fullData.auxData=auxStore.getAuxData(blockId);
      int seq2=getSequence(x,y,z);
      if (seq == seq2) {
        return fullData;
      }
    }
 else {
      fullData.id=blockId;
      fullData.data=0;
      fullData.auxData=null;
      return null;
    }
  }
}","/** 
 * Atomically gets the full set of data associated with the block.<br> <br>
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @param fullState a BlockFullState object to store the return value, or null to generate a new one
 * @return the full state of the block
 */
public final BlockFullState<T> getFullData(int x,int y,int z,BlockFullState<T> fullData){
  if (fullData == null) {
    fullData=new BlockFullState<T>();
  }
  int index=getIndex(x,y,z);
  while (true) {
    int seq=getSequence(x,y,z);
    short blockId=blockIds.get(index);
    if (auxStore.isReserved(blockId)) {
      fullData.setId(auxStore.getId(blockId));
      fullData.setData(auxStore.getData(blockId));
      fullData.setAuxData(auxStore.getAuxData(blockId));
      int seq2=getSequence(x,y,z);
      if (seq == seq2) {
        return fullData;
      }
    }
 else {
      fullData.setId(blockId);
      fullData.setData((short)0);
      fullData.setAuxData(null);
      return fullData;
    }
  }
}",0.8550074738415545
177571,"/** 
 * Adds an entry to the store.  The auxData parameter should be set to null to indicate no auxiliary data.<br> <br> The index that is returned is guaranteed to be one of the reserved indexes.<br> <br>
 * @param id the id
 * @param data the data
 * @param auxData the auxiliary data
 * @return the index that the entry was stored in the array
 */
public final int add(short id,short data,T auxData){
  if (auxData == EMPTY) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  entries.incrementAndGet();
  while (true) {
    if (needsResize()) {
      resizeArrays();
    }
    int testIndex=scan.getAndIncrement() & (length.get() - 1);
    int prevSeq=seqArray.get().getAndSet(testIndex,DatatableSequenceNumber.UNSTABLE);
    if (prevSeq == DatatableSequenceNumber.UNSTABLE) {
      continue;
    }
    try {
      int idAndData=(((int)id) << 16) | (data & 0xFFFF);
      intArray.get()[testIndex]=idAndData;
      auxArray.get()[testIndex]=auxData;
      return toExternal(testIndex);
    }
  finally {
      seqArray.get().set(testIndex,DatatableSequenceNumber.get());
    }
  }
}","/** 
 * Adds an entry to the store.  The auxData parameter should be set to null to indicate no auxiliary data.<br> <br> The index that is returned is guaranteed to be one of the reserved indexes.<br> <br>
 * @param id the id
 * @param data the data
 * @param auxData the auxiliary data
 * @return the index that the entry was stored in the array
 */
public final int add(short id,short data,T auxData){
  if (auxData == EMPTY) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  entries.incrementAndGet();
  while (true) {
    if (needsResize()) {
      resizeArrays();
    }
    int testIndex=scan.getAndIncrement() & (length.get() - 1);
    int prevSeq=seqArray.get().getAndSet(testIndex,DatatableSequenceNumber.UNSTABLE);
    if (prevSeq == DatatableSequenceNumber.UNSTABLE) {
      continue;
    }
    try {
      if (auxArray.get()[testIndex] != EMPTY) {
        continue;
      }
      int idAndData=(((int)id) << 16) | (data & 0xFFFF);
      intArray.get()[testIndex]=idAndData;
      auxArray.get()[testIndex]=auxData;
      return toExternal(testIndex);
    }
  finally {
      seqArray.get().set(testIndex,DatatableSequenceNumber.get());
    }
  }
}",0.9674868189806678
177572,"/** 
 * Indicates if the given short should be reserved.<br> <br> Only ids where isReverved(id) returns true will be returned by the add(...) method.<br> <br> Ids from (65536 - length) to 65535 are reserved. <br> The top 2 bytes of the id are ignored.<br>
 * @param id
 * @return true if the id is reserved
 */
public final boolean isReserved(int id){
  id=id & 0x0000FFFF;
  return (id & reservedMask) == id;
}","/** 
 * Indicates if the given short should be reserved.<br> <br> Only ids where isReverved(id) returns true will be returned by the add(...) method.<br> <br> Ids from (65536 - length) to 65535 are reserved. <br> The top 2 bytes of the id are ignored.<br>
 * @param id
 * @return true if the id is reserved
 */
public final boolean isReserved(int id){
  id=id & 0x0000FFFF;
  return (id & reservedMask) == reservedMask;
}",0.9831730769230768
177573,"/** 
 * Removes the array elements at the given index.  The array should not be empty at the index in question.<br> <br>
 * @param index the index
 */
public boolean remove(int index){
  index=toInternal(index);
  while (true) {
    int prevSeq=seqArray.get().getAndSet(index,DatatableSequenceNumber.UNSTABLE);
    if (prevSeq == DatatableSequenceNumber.UNSTABLE) {
      return false;
    }
    try {
      T current=auxArray.get()[index];
      if (current == EMPTY) {
        return false;
      }
      auxArray.get()[index]=EMPTY;
      entries.decrementAndGet();
      return true;
    }
  finally {
      seqArray.get().set(index,DatatableSequenceNumber.get());
    }
  }
}","/** 
 * Removes the array elements at the given index.  The array should not be empty at the index in question.<br> <br>
 * @param index the index
 */
public boolean remove(int index){
  index=toInternal(index);
  while (true) {
    int prevSeq=seqArray.get().getAndSet(index,DatatableSequenceNumber.UNSTABLE);
    if (prevSeq == DatatableSequenceNumber.UNSTABLE) {
      continue;
    }
    try {
      T current=auxArray.get()[index];
      if (current == EMPTY) {
        return false;
      }
      auxArray.get()[index]=EMPTY;
      entries.decrementAndGet();
      return true;
    }
  finally {
      seqArray.get().set(index,DatatableSequenceNumber.get());
    }
  }
}",0.986725663716814
177574,"/** 
 * Indicates if the array needs resizing.  An array is considered to need resizing if it is more than 50% full. Once an array has a length of the maximum length, it is never considered in need to resizing.
 * @return true if the array needs to be resized
 */
private final boolean needsResize(){
  return length.get() < maxLength && entries.get() >= (length.get() >> 1);
}","/** 
 * Indicates if the array needs resizing.  An array is considered to need resizing if it is more than 50% full. Once an array has a length of the maximum length, it is never considered in need to resizing.
 * @return true if the array needs to be resized
 */
private final boolean needsResize(){
  int lengthThreshold=length.get();
  lengthThreshold-=lengthThreshold >> 2;
  return length.get() < maxLength && entries.get() >= lengthThreshold;
}",0.848851269649335
177575,"private void set(int x,int y,int z,int id,int data,Integer auxData){
  int index=getIndex(x,y,z);
  this.ids[index]=(short)id;
  this.data[index]=(short)data;
  this.auxData[index]=auxData;
  store.setBlock(x,y,z,(short)id,(short)data,auxData);
}","private void set(int x,int y,int z,int id,int data,Integer auxData){
  int index=getIndex(x,y,z);
  this.ids[index]=(short)id;
  this.data[index]=(short)data;
  this.auxData[index]=auxData;
  store.setBlock(x,y,z,(short)id,(short)data,auxData);
  checkForResize();
}",0.9609375
177576,"@Test public void testArray(){
  Random rand=new Random();
  for (int x=0; x < 16; x++) {
    for (int z=0; z < 16; z++) {
      for (int y=0; y < 16; y++) {
        short id=(short)(rand.nextInt());
        short data=(short)(((rand.nextInt() & 0x3) != 0) ? (0) : (rand.nextInt()));
        Integer auxData=(((rand.nextInt() & 0x3) != 0) ? (null) : (rand.nextInt()));
        set(x,y,z,id,data,auxData);
      }
    }
  }
  System.out.println(""String_Node_Str"");
  BlockFullState<Integer> fullData=new BlockFullState<Integer>();
  for (int x=0; x < 16; x++) {
    for (int z=0; z < 16; z++) {
      for (int y=0; y < 16; y++) {
        check(x,y,z,fullData);
      }
    }
  }
  System.out.println(""String_Node_Str"");
  for (int i=0; i < 16384; i++) {
    short id=(short)(rand.nextInt());
    short data=(short)(((rand.nextInt() & 0x3) != 0) ? (0) : (rand.nextInt()));
    Integer auxData=(((rand.nextInt() & 0x3) != 0) ? (null) : (rand.nextInt()));
    int x=rand.nextInt() & 0xF;
    int y=rand.nextInt() & 0xF;
    int z=rand.nextInt() & 0xF;
    set(x,y,z,id,data,auxData);
    check(x,y,z,fullData);
  }
  System.out.println(""String_Node_Str"");
  for (int x=15; x >= 0; x--) {
    for (int y=15; y >= 0; y--) {
      for (int z=15; z >= 0; z--) {
        check(x,y,z,fullData);
      }
    }
  }
}","@Test public void testArray(){
  Random rand=new Random();
  for (int x=0; x < 16; x++) {
    for (int z=0; z < 16; z++) {
      for (int y=0; y < 16; y++) {
        short id=(short)(rand.nextInt());
        short data=(short)(((rand.nextInt() & 0x3) != 0) ? (0) : (rand.nextInt()));
        Integer auxData=(((rand.nextInt() & 0x3) != 0) ? (null) : (rand.nextInt()));
        set(x,y,z,id,data,auxData);
      }
    }
  }
  System.out.println(""String_Node_Str"");
  BlockFullState<Integer> fullData=new BlockFullState<Integer>();
  for (int x=0; x < 16; x++) {
    for (int z=0; z < 16; z++) {
      for (int y=0; y < 16; y++) {
        check(x,y,z,fullData);
      }
    }
  }
  System.out.println(""String_Node_Str"");
  for (int i=0; i < 32768; i++) {
    short id=(short)(rand.nextInt());
    short data=(short)(((rand.nextInt() & 0x3) != 0) ? (0) : (rand.nextInt()));
    Integer auxData=(((rand.nextInt() & 0x3) != 0) ? (null) : (rand.nextInt()));
    int x=rand.nextInt() & 0xF;
    int y=rand.nextInt() & 0xF;
    int z=rand.nextInt() & 0xF;
    if (rand.nextBoolean()) {
      set(x,y,z,id,data,auxData);
    }
 else {
      compareAndSet(x,y,z,(short)id,(short)data,auxData,rand.nextBoolean(),rand);
    }
    check(x,y,z,fullData);
  }
  System.out.println(""String_Node_Str"");
  for (int x=15; x >= 0; x--) {
    for (int y=15; y >= 0; y--) {
      for (int z=15; z >= 0; z--) {
        check(x,y,z,fullData);
      }
    }
  }
  int entries=0;
  for (int x=15; x >= 0; x--) {
    for (int y=15; y >= 0; y--) {
      for (int z=15; z >= 0; z--) {
        fullData=store.getFullData(x,y,z,null);
        if (fullData.getAuxData() != null || fullData.getData() != 0 || (fullData.getId() & 0xC000) == 0xC000) {
          entries++;
        }
      }
    }
  }
  int actualEntries=store.getEntries();
  assertTrue(""String_Node_Str"" + entries + ""String_Node_Str""+ actualEntries+ ""String_Node_Str"",entries == actualEntries);
  System.out.println(""String_Node_Str"" + store.getSize());
}",0.6032806804374241
177577,"public CuboidShortBuffer getBlockCuboidBufferLive(){
  checkChunkLoaded();
  int x=getX() << Chunk.CHUNK_SIZE_BITS;
  int y=getY() << Chunk.CHUNK_SIZE_BITS;
  int z=getZ() << Chunk.CHUNK_SIZE_BITS;
  CuboidShortBuffer snapshot=new CuboidShortBuffer(getWorld(),x,y,z,Chunk.CHUNK_SIZE,Chunk.CHUNK_SIZE,Chunk.CHUNK_SIZE,this.blockIds.getLive());
  if (y < 32) {
    snapshot.flood((short)1);
  }
  return snapshot;
}","public CuboidShortBuffer getBlockCuboidBufferLive(){
  checkChunkLoaded();
  int x=getX() << Chunk.CHUNK_SIZE_BITS;
  int y=getY() << Chunk.CHUNK_SIZE_BITS;
  int z=getZ() << Chunk.CHUNK_SIZE_BITS;
  CuboidShortBuffer snapshot=new CuboidShortBuffer(getWorld(),x,y,z,Chunk.CHUNK_SIZE,Chunk.CHUNK_SIZE,Chunk.CHUNK_SIZE,this.blockIds.getLive());
  return snapshot;
}",0.9149484536082474
177578,"/** 
 * @param dt milliseonds since the last tick
 */
public void onTick(float dt){
  if (controller != null)   controller.onTick(dt);
}","/** 
 * @param dt milliseconds since the last tick
 */
public void onTick(float dt){
  if (controller != null)   controller.onTick(dt);
}",0.9963369963369964
177579,"public void setController(Controller controller){
  controller.attachToEntity(this);
  this.controller=controller;
  controller.onAttached();
}","public void setController(Controller controller){
  controller.attachToEntity(this);
  Region region=getRegion();
  if (region != null) {
    ((SpoutRegion)region).deallocate(this);
  }
  this.controller=controller;
  if (region != null) {
    ((SpoutRegion)region).allocate(this);
  }
  controller.onAttached();
}",0.5120350109409191
177580,"@Override public String getUsage(String[] input,int baseIndex){
  return ChatColor.RED + ""String_Node_Str"" + (input.length > baseIndex ? input[baseIndex] : getPreferredName())+ ""String_Node_Str"";
}","@Override public String getUsage(String[] input,int baseIndex){
  return ChatColor.RED + ""String_Node_Str"" + (input.length > baseIndex ? input[baseIndex + 1] : getPreferredName())+ ""String_Node_Str"";
}",0.9899497487437184
177581,"public void execute(CommandSource source,String[] args,int baseIndex,boolean fuzzyLookup) throws CommandException {
  if (rawExecutor != null && rawExecutor != this) {
    rawExecutor.execute(source,args,baseIndex,fuzzyLookup);
    return;
  }
  if (args.length > baseIndex && children.size() > 0) {
    Command sub=getChild(args[0],fuzzyLookup);
    if (sub == null) {
      throw new MissingCommandException(""String_Node_Str"",getUsage(args,baseIndex));
    }
    sub.execute(source,args,++baseIndex,fuzzyLookup);
    return;
  }
  if (executor == null || baseIndex >= args.length) {
    throw new MissingCommandException(""String_Node_Str"",getUsage(args,baseIndex));
  }
  args=MiscCompatibilityUtils.arrayCopyOfRange(args,baseIndex,args.length);
  CommandContext context=new CommandContext(args,valueFlags);
  for (  char flag : context.getFlags().toArray()) {
    if (!flags.contains(flag)) {
      throw new CommandUsageException(""String_Node_Str"" + flag,this);
    }
  }
  try {
    executor.processCommand(source,this,context);
  }
 catch (  CommandException e) {
    throw e;
  }
catch (  Throwable t) {
    throw new WrappedCommandException(t);
  }
}","public void execute(CommandSource source,String[] args,int baseIndex,boolean fuzzyLookup) throws CommandException {
  if (rawExecutor != null && rawExecutor != this) {
    rawExecutor.execute(source,args,baseIndex,fuzzyLookup);
    return;
  }
  if (args.length > baseIndex && children.size() > 0) {
    Command sub=getChild(args[baseIndex + 1],fuzzyLookup);
    if (sub == null) {
      throw new MissingCommandException(""String_Node_Str"",getUsage(args,baseIndex));
    }
    sub.execute(source,args,++baseIndex,fuzzyLookup);
    return;
  }
  if (executor == null || baseIndex >= args.length) {
    throw new MissingCommandException(""String_Node_Str"",getUsage(args,baseIndex));
  }
  args=MiscCompatibilityUtils.arrayCopyOfRange(args,baseIndex,args.length);
  CommandContext context=new CommandContext(args,valueFlags);
  for (  char flag : context.getFlags().toArray()) {
    if (!flags.contains(flag)) {
      throw new CommandUsageException(""String_Node_Str"" + flag,this);
    }
  }
  try {
    executor.processCommand(source,this,context);
  }
 catch (  CommandException e) {
    throw e;
  }
catch (  Throwable t) {
    throw new WrappedCommandException(t);
  }
}",0.9939862542955328
177582,"ConfigurationNode(Map<String,Object> root){
  this.root=root;
}","protected ConfigurationNode(Map<String,Object> root){
  this.root=root;
}",0.9264705882352942
177583,"/** 
 * Creates and returns a 4x4 rotation matrix given by the provided Quaternion
 * @param rot
 * @return
 */
public static Matrix rotate(Quaternion rot){
  Matrix res=createIdentity();
  Quaternion r=rot.normalize();
  res.set(0,0,1 - (2 * r.getY() * r.getY()) - (2 * r.getZ() * r.getZ()));
  res.set(0,1,(2 * r.getX() * r.getY()) - (2 * r.getW() * r.getZ()));
  res.set(0,2,(2 * r.getX() * r.getZ()) + (2 * r.getW() * r.getY()));
  res.set(0,3,0);
  res.set(1,0,(2 * r.getX() * r.getY()) + (2 * r.getW() * r.getZ()));
  res.set(1,1,1 - (2 * r.getX() * r.getX()) - (2 * r.getZ() * r.getZ()));
  res.set(1,2,(2 * r.getY() * r.getZ()) - (2 * r.getW() * r.getX()));
  res.set(1,3,0);
  res.set(2,0,(2 * r.getX() * r.getZ()) - (2 * r.getW() * r.getY()));
  res.set(2,1,(2 * r.getY() * r.getZ()) + (2 * r.getW() * r.getZ()));
  res.set(2,2,1 - (2 * r.getX() * r.getX()) - (2 * r.getY() * r.getY()));
  res.set(2,3,0);
  return res;
}","/** 
 * Creates and returns a 4x4 rotation matrix given by the provided Quaternion
 * @param rot
 * @return
 */
public static Matrix rotate(Quaternion rot){
  Matrix res=createIdentity();
  Quaternion r=rot.normalize();
  res.set(0,0,1 - (2 * r.getY() * r.getY()) - (2 * r.getZ() * r.getZ()));
  res.set(0,1,(2 * r.getX() * r.getY()) - (2 * r.getW() * r.getZ()));
  res.set(0,2,(2 * r.getX() * r.getZ()) + (2 * r.getW() * r.getY()));
  res.set(0,3,0);
  res.set(1,0,(2 * r.getX() * r.getY()) + (2 * r.getW() * r.getZ()));
  res.set(1,1,1 - (2 * r.getX() * r.getX()) - (2 * r.getZ() * r.getZ()));
  res.set(1,2,(2 * r.getY() * r.getZ()) - (2 * r.getW() * r.getX()));
  res.set(1,3,0);
  res.set(2,0,(2 * r.getX() * r.getZ()) - (2 * r.getW() * r.getY()));
  res.set(2,1,(2.f * r.getY() * r.getZ()) + (2.f * r.getX() * r.getW()));
  res.set(2,2,1 - (2 * r.getX() * r.getX()) - (2 * r.getY() * r.getY()));
  res.set(2,3,0);
  return res;
}",0.9860664523043944
177584,"/** 
 * Returns the length of the given Quaternion Note: Uses sqrt, so is slowish.
 * @param a
 * @return
 */
public static float length(Quaternion a){
  return (float)MathHelper.sqrt(lengthSquared(a));
}","/** 
 * Returns the length of the given Quaternion Note: Uses sqrt, so is slowish.
 * @param a
 * @return
 */
public static float length(Quaternion a){
  return (float)Math.sqrt(lengthSquared(a));
}",0.9850746268656716
177585,"@Test public void testRotate(){
  Matrix m;
  Quaternion rot;
  rot=Quaternion.identity;
  m=Matrix.rotate(rot);
  double[][] id={{1,0,0,0},{0,1,0,0},{0,0,1,0},{0,0,0,1}};
  compareMatrixToArray(m,id);
  rot=new Quaternion(4,3,2,0);
  m=Matrix.rotate(rot);
  id=new double[][]{{0.103448,0.827586,0.551724,0},{0.827586,-0.37931,0.413793,0},{0.551724,0.413793,-0.724138,0},{0,0,0,1}};
  compareMatrixToArray(m,id);
  rot=new Quaternion(90,new Vector3(0,1,0));
  id=new double[][]{{0,0,1,0},{0,1,0,0},{-1,0,0,0},{0,0,0,1}};
  compareMatrixToArray(m,id);
}","@Test public void testRotate(){
  Matrix m;
  Quaternion rot;
  rot=Quaternion.identity;
  m=Matrix.rotate(rot);
  double[][] id={{1,0,0,0},{0,1,0,0},{0,0,1,0},{0,0,0,1}};
  compareMatrixToArray(m,id);
  rot=new Quaternion(4,3,2,0);
  m=Matrix.rotate(rot);
  id=new double[][]{{0.103448,0.827586,0.551724,0},{0.827586,-0.37931,0.413793,0},{0.551724,0.413793,-0.724138,0},{0,0,0,1}};
  compareMatrixToArray(m,id);
  rot=new Quaternion(90,new Vector3(0,1,0));
  m=Matrix.rotate(rot);
  id=new double[][]{{0,0,1,0},{0,1,0,0},{-1,0,0,0},{0,0,0,1}};
  compareMatrixToArray(m,id);
}",0.9787234042553192
177586,"/** 
 * Constructs and returns a new Quaternion that is A * B
 * @param a
 * @param b
 * @return
 */
public static Quaternion multiply(Quaternion a,Quaternion b){
  float x=a.w * b.x + a.x * b.w + a.y * b.z + a.z * b.y;
  float y=a.w * b.y - a.x * b.z + a.y * b.w + a.z * b.x;
  float z=a.w * b.z + a.x * b.y - a.y * b.x + a.z * b.w;
  float w=a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;
  return new Quaternion(x,y,z,w);
}","/** 
 * Constructs and returns a new Quaternion that is A * B
 * @param a
 * @param b
 * @return
 */
public static Quaternion multiply(Quaternion a,Quaternion b){
  float x=a.w * b.x + a.x * b.w + a.y * b.z - a.z * b.y;
  float y=a.w * b.y + a.y * b.w + a.z * b.x - a.x * b.z;
  float z=a.w * b.z + a.z * b.w + a.x * b.y - a.y * b.x;
  float w=a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;
  return new Quaternion(x,y,z,w);
}",0.8427230046948356
177587,"/** 
 * Returns the angles about each axis of this quaternion stored in a Vector3 vect.X = Rotation about the X axis (Roll) vect.Y = Rotation about the Y axis (Yaw) vect.Z = Rotation about the Z axis (Pitch)
 * @param a
 * @return
 */
public static Vector3 getAxisAngles(Quaternion a){
  float roll=(float)Math.atan2(2 * (a.getX() * a.getY() + a.getZ() * a.getW()),1 - 2 * (a.getY() * a.getY() + a.getZ() * a.getZ()));
  float pitch=(float)Math.asin(2 * (a.getX() * a.getZ() - a.getW() * a.getY()));
  float yaw=(float)Math.atan2(2 * (a.getX() * a.getW() + a.getY() * a.getZ()),1 - 2 * (a.getZ() * a.getZ() + a.getW() * a.getW()));
  return new Vector3(roll,pitch,yaw);
}","/** 
 * Returns the angles about each axis of this quaternion stored in a Vector3 vect.X = Rotation about the X axis (Roll) vect.Y = Rotation about the Y axis (Yaw) vect.Z = Rotation about the Z axis (Pitch)
 * @param a
 * @return
 */
public static Vector3 getAxisAngles(Quaternion a){
  float yaw=(float)Math.toDegrees(Math.atan2(2 * (a.getX() * a.getY() + a.getZ() * a.getW()),1 - 2 * (a.getY() * a.getY() + a.getZ() * a.getZ())));
  float pitch=-1 * (float)Math.toDegrees(Math.asin(2 * (a.getX() * a.getZ() - a.getW() * a.getY())));
  float roll=180 - (float)Math.toDegrees(Math.atan2(2 * (a.getX() * a.getW() + a.getY() * a.getZ()),1 - 2 * (a.getZ() * a.getZ() + a.getW() * a.getW())));
  return new Vector3(roll,pitch,yaw);
}",0.9478943611705924
177588,"@Test public void testLengthQuaternion(){
  fail(""String_Node_Str"");
}","@Test public void testLengthQuaternion(){
  Quaternion rot=new Quaternion(1,0,0,0);
  float ls=rot.length();
  if (Math.abs(ls - 1.0f) >= eps)   fail(""String_Node_Str"" + rot + ""String_Node_Str""+ ls);
  rot=new Quaternion(6,4,3,2);
  ls=rot.length();
  if (Math.abs(ls - MathHelper.sqrt(65.0f)) >= eps)   fail(""String_Node_Str"" + rot + ""String_Node_Str""+ ls);
  rot=new Quaternion(6,-1,0,2);
  ls=rot.length();
  if (Math.abs(ls - MathHelper.sqrt(41.0f)) >= eps)   fail(""String_Node_Str"" + rot + ""String_Node_Str""+ ls);
}",0.2372881355932203
177589,"@Test public void testQuaternionDoubleDoubleDoubleDouble(){
  fail(""String_Node_Str"");
}","@Test public void testQuaternionDoubleDoubleDoubleDouble(){
  Quaternion q=new Quaternion(1,0,0,0);
  testValues(q,1,0,0,0);
  q=new Quaternion(4,2,6,8);
  testValues(q,4,2,6,8);
}",0.5671641791044776
177590,"@Test public void testMultiplyQuaternionQuaternion(){
  fail(""String_Node_Str"");
}","@Test public void testMultiplyQuaternionQuaternion(){
  Quaternion a=new Quaternion(1,0,0,0);
  Quaternion b=new Quaternion(1,0,0,0);
  Quaternion res=a.multiply(b);
  testValues(res,0,0,0,-1);
  a=new Quaternion(0,0,0,1);
  b=new Quaternion(0,0,0,1);
  res=a.multiply(b);
  testValues(res,0,0,0,1);
  a=new Quaternion(5,3,1,1);
  b=new Quaternion(0,0,0,1);
  res=a.multiply(b);
  testValues(res,5,3,1,1);
  a=new Quaternion(5,3,1,1);
  b=new Quaternion(-5,2,1,0);
  res=a.multiply(b);
  testValues(res,-4,-8,26,18);
}",0.2
177591,"@Test public void testNormalizeQuaternion(){
  fail(""String_Node_Str"");
}","@Test public void testNormalizeQuaternion(){
  Quaternion rot=new Quaternion(1,0,0,0);
  Quaternion norm=rot.normalize();
  if (Math.abs(norm.length() - 1.f) >= eps)   fail(""String_Node_Str"" + rot + ""String_Node_Str""+ norm.length());
  rot=new Quaternion(6,4,3,2);
  norm=rot.normalize();
  if (Math.abs(norm.length() - 1.f) >= eps)   fail(""String_Node_Str"" + rot + ""String_Node_Str""+ norm.length());
  rot=new Quaternion(6,-1,0,2);
  norm=rot.normalize();
  if (Math.abs(norm.length() - 1.f) >= eps)   fail(""String_Node_Str"" + rot + ""String_Node_Str""+ norm.length());
}",0.1586314152410575
177592,"@Test public void testQuaternionDoubleVector3(){
  fail(""String_Node_Str"");
}","@Test public void testQuaternionDoubleVector3(){
  Quaternion rot=new Quaternion(0,new Vector3(1,0,0));
  float qx=1.f * (float)MathHelper.sin(0);
  float qy=0.f * (float)MathHelper.sin(0);
  float qz=0.f * (float)MathHelper.sin(0);
  float qw=(float)MathHelper.cos(0);
  testValues(rot,qx,qy,qz,qw);
  rot=new Quaternion(40,new Vector3(3,2,1));
  qx=3.f * (float)MathHelper.sin((Math.toRadians(40) / 2));
  qy=2.f * (float)MathHelper.sin((Math.toRadians(40) / 2));
  qz=1.f * (float)MathHelper.sin((Math.toRadians(40) / 2));
  qw=(float)MathHelper.cos((Math.toRadians(40) / 2));
  testValues(rot,qx,qy,qz,qw);
  rot=new Quaternion(120,new Vector3(6,-3,2));
  qx=6.f * (float)MathHelper.sin((Math.toRadians(120) / 2));
  qy=-3.f * (float)MathHelper.sin((Math.toRadians(120) / 2));
  qz=2.f * (float)MathHelper.sin((Math.toRadians(120) / 2));
  qw=(float)MathHelper.cos((Math.toRadians(120) / 2));
  testValues(rot,qx,qy,qz,qw);
}",0.1113320079522862
177593,"@Test public void testRotateQuaternionDoubleVector3(){
  fail(""String_Node_Str"");
}","@Test public void testRotateQuaternionDoubleVector3(){
  float qx, qy, qz, qw;
  float x=1;
  float y=0;
  float z=0;
  float ang=0;
  Quaternion a=new Quaternion(0,0,0,1);
  Quaternion res=a.rotate(ang,new Vector3(x,y,z));
  testValues(res,0,0,0,1);
  x=1;
  ang=45;
  a=new Quaternion(0,0,0,1);
  res=a.rotate(ang,new Vector3(x,y,z));
  qx=x * (float)MathHelper.sin((Math.toRadians(ang) / 2));
  qy=y * (float)MathHelper.sin((Math.toRadians(ang) / 2));
  qz=z * (float)MathHelper.sin((Math.toRadians(ang) / 2));
  qw=(float)MathHelper.cos((Math.toRadians(ang) / 2));
  testValues(res,qx,qy,qz,qw);
  x=1.f;
  y=4.f;
  z=-3.f;
  ang=120;
  a=new Quaternion(0,0,0,1);
  res=a.rotate(ang,new Vector3(x,y,z));
  qx=x * (float)MathHelper.sin((Math.toRadians(ang) / 2));
  qy=y * (float)MathHelper.sin((Math.toRadians(ang) / 2));
  qz=z * (float)MathHelper.sin((Math.toRadians(ang) / 2));
  qw=(float)MathHelper.cos((Math.toRadians(ang) / 2));
  testValues(res,qx,qy,qz,qw);
}",0.119431279620853
177594,"@Test public void testLengthSquaredQuaternion(){
  fail(""String_Node_Str"");
}","@Test public void testLengthSquaredQuaternion(){
  Quaternion rot=new Quaternion(1,0,0,0);
  float ls=rot.lengthSquared();
  if (Math.abs(ls - 1.0f) >= eps)   fail(""String_Node_Str"" + rot + ""String_Node_Str""+ ls);
  rot=new Quaternion(6,4,3,2);
  ls=rot.lengthSquared();
  if (Math.abs(ls - 65.0f) >= eps)   fail(""String_Node_Str"" + rot + ""String_Node_Str""+ ls);
  rot=new Quaternion(6,-1,0,2);
  ls=rot.lengthSquared();
  if (Math.abs(ls - 41.0f) >= eps)   fail(""String_Node_Str"" + rot + ""String_Node_Str""+ ls);
}",0.260575296108291
177595,"@Test public void testTransformVector3Quaternion(){
  Vector3 x=new Vector3(1,0,0);
  Vector3 u=x.transform(new Quaternion(90,new Vector3(0,1,0)));
  if (!u.equals(new Vector3(0,0,-1)))   fail(""String_Node_Str"");
  Vector3 y=new Vector3(2,4,5);
  Vector3 v=y.transform(new Quaternion(30,new Vector3(1,0,0)));
  Vector3 res=new Vector3(2,.964f,6.33f);
  if (!v.equals(res))   fail(""String_Node_Str"" + res + ""String_Node_Str""+ v);
}","@Test public void testTransformVector3Quaternion(){
  Vector3 x=new Vector3(1,0,0);
  Vector3 u=x.transform(new Quaternion(90,new Vector3(0,1,0)));
  if (!u.equals(new Vector3(0,0,-1)))   fail(""String_Node_Str"" + u);
  Vector3 y=new Vector3(2,4,5);
  Vector3 v=y.transform(new Quaternion(30,new Vector3(1,0,0)));
  Vector3 res=new Vector3(2,.964f,6.33f);
  if (!v.equals(res))   fail(""String_Node_Str"" + res + ""String_Node_Str""+ v);
}",0.9953703703703703
177596,"/** 
 * Sets the id for the block at (x, y, z) to the given id and returns the snapshot value For ids greater than 255, the id must represent a value custom id
 * @param x the x coordinate
 * @param y the x coordinate
 * @param z the x coordinate
 * @param id
 * @return the block's id from the snapshot
 */
@SnapshotRead @DelayedWrite public short setBlockId(int x,int y,int z,short id);","/** 
 * Sets the id for the block at (x, y, z) to the given id and returns the snapshot value For ids greater than 255, the id must represent a value custom id
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @param id
 * @return the block's id from the snapshot
 */
@SnapshotRead @DelayedWrite public short setBlockId(int x,int y,int z,short id);",0.9948453608247424
177597,"/** 
 * Gets the id for the block at (x, y, z)<br/> Note: using live id may have a negative performance impact, relative to reading the snapshot value
 * @param x the x coordinate
 * @param y the x coordinate
 * @param z the x coordinate
 * @param live whether to use the live id, or snapshot value
 * @return the block's material
 */
@SnapshotRead @LiveRead public short getBlockId(int x,int y,int z,boolean live);","/** 
 * Gets the id for the block at (x, y, z)<br/> Note: using live id may have a negative performance impact, relative to reading the snapshot value
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @param live whether to use the live id, or snapshot value
 * @return the block's material
 */
@SnapshotRead @LiveRead public short getBlockId(int x,int y,int z,boolean live);",0.9951807228915662
177598,"/** 
 * Gets the data for the block at (x, y, z)<br/> Note: using live data may have a negative performance impact, relative to reading the snapshot value
 * @param x the x coordinate
 * @param y the x coordinate
 * @param z the x coordinate
 * @param live whether to use the live data, or snapshot value
 * @return the block's data
 */
@SnapshotRead @LiveRead public byte getBlockData(int x,int y,int z,boolean live);","/** 
 * Gets the data for the block at (x, y, z)<br/> Note: using live data may have a negative performance impact, relative to reading the snapshot value
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @param live whether to use the live data, or snapshot value
 * @return the block's data
 */
@SnapshotRead @LiveRead public byte getBlockData(int x,int y,int z,boolean live);",0.9952153110047848
177599,"/** 
 * Sets the block at (x, y, z) to the given material type and returns the snapshot value
 * @param x the x coordinate
 * @param y the x coordinate
 * @param z the x coordinate
 * @param material
 * @return the block's material from the snapshot
 */
@SnapshotRead @DelayedWrite public BlockMaterial setBlockMaterial(int x,int y,int z,BlockMaterial material);","/** 
 * Sets the block at (x, y, z) to the given material type and returns the snapshot value
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @param material
 * @return the block's material from the snapshot
 */
@SnapshotRead @DelayedWrite public BlockMaterial setBlockMaterial(int x,int y,int z,BlockMaterial material);",0.994475138121547
177600,"/** 
 * Gets the material for the block at (x, y, z)<br/> Note: using live material may have a negative performance impact, relative to reading the snapshot value
 * @param x the x coordinate
 * @param y the x coordinate
 * @param z the x coordinate
 * @param live whether to use the live id, or snapshot value
 * @return the block's material
 */
@SnapshotRead @LiveRead public BlockMaterial getBlockMaterial(int x,int y,int z,boolean live);","/** 
 * Gets the material for the block at (x, y, z)<br/> Note: using live material may have a negative performance impact, relative to reading the snapshot value
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @param live whether to use the live id, or snapshot value
 * @return the block's material
 */
@SnapshotRead @LiveRead public BlockMaterial getBlockMaterial(int x,int y,int z,boolean live);",0.9954648526077098
177601,"/** 
 * Sets the snapshot data for the block at (x, y, z) to the given data and returns the snapshot value.
 * @param x the x coordinate
 * @param y the x coordinate
 * @param z the x coordinate
 * @param data to set at the block
 * @return the block's data from the snapshot
 */
@SnapshotRead @DelayedWrite public byte setBlockData(int x,int y,int z,byte data);","/** 
 * Sets the snapshot data for the block at (x, y, z) to the given data and returns the snapshot value.
 * @param x the x coordinate
 * @param y the y coordinate
 * @param z the z coordinate
 * @param data to set at the block
 * @return the block's data from the snapshot
 */
@SnapshotRead @DelayedWrite public byte setBlockData(int x,int y,int z,byte data);",0.994475138121547
177602,"@UnsafeMethod public void enablePlugin(Plugin paramPlugin){
  if (!CommonPlugin.class.isAssignableFrom(paramPlugin.getClass()))   throw new IllegalArgumentException(""String_Node_Str"");
  if (!paramPlugin.isEnabled()) {
    CommonPlugin cp=(CommonPlugin)paramPlugin;
    String name=cp.getDescription().getName();
    if (!loaders.containsKey(name)) {
      loaders.put(name,(CommonClassLoader)cp.getClassLoader());
    }
    try {
      cp.setEnabled(true);
    }
 catch (    Exception e) {
      game.getLogger().log(Level.SEVERE,new StringBuilder().append(""String_Node_Str"").append(paramPlugin.getDescription().getFullName()).append(""String_Node_Str"").append(e.getMessage()).toString(),e);
    }
  }
}","@UnsafeMethod public void enablePlugin(Plugin paramPlugin){
  if (!CommonPlugin.class.isAssignableFrom(paramPlugin.getClass()))   throw new IllegalArgumentException(""String_Node_Str"");
  if (!paramPlugin.isEnabled()) {
    CommonPlugin cp=(CommonPlugin)paramPlugin;
    String name=cp.getDescription().getName();
    if (!loaders.containsKey(name)) {
      loaders.put(name,(CommonClassLoader)cp.getClassLoader());
    }
    try {
      cp.setEnabled(true);
      cp.onEnable();
    }
 catch (    Exception e) {
      game.getLogger().log(Level.SEVERE,new StringBuilder().append(""String_Node_Str"").append(paramPlugin.getDescription().getFullName()).append(""String_Node_Str"").append(e.getMessage()).toString(),e);
    }
  }
}",0.9852838121934128
177603,"@UnsafeMethod public void disablePlugin(Plugin paramPlugin){
  if (!CommonPlugin.class.isAssignableFrom(paramPlugin.getClass()))   throw new IllegalArgumentException(""String_Node_Str"");
  if (paramPlugin.isEnabled()) {
    CommonPlugin cp=(CommonPlugin)paramPlugin;
    String name=cp.getDescription().getName();
    if (!loaders.containsKey(name)) {
      loaders.put(name,(CommonClassLoader)cp.getClassLoader());
    }
    try {
      cp.setEnabled(false);
    }
 catch (    Exception e) {
      game.getLogger().log(Level.SEVERE,new StringBuilder().append(""String_Node_Str"").append(paramPlugin.getDescription().getFullName()).append(""String_Node_Str"").append(e.getMessage()).toString(),e);
    }
  }
}","@UnsafeMethod public void disablePlugin(Plugin paramPlugin){
  if (!CommonPlugin.class.isAssignableFrom(paramPlugin.getClass()))   throw new IllegalArgumentException(""String_Node_Str"");
  if (paramPlugin.isEnabled()) {
    CommonPlugin cp=(CommonPlugin)paramPlugin;
    String name=cp.getDescription().getName();
    if (!loaders.containsKey(name)) {
      loaders.put(name,(CommonClassLoader)cp.getClassLoader());
    }
    try {
      cp.setEnabled(false);
      cp.onDisable();
    }
 catch (    Exception e) {
      game.getLogger().log(Level.SEVERE,new StringBuilder().append(""String_Node_Str"").append(paramPlugin.getDescription().getFullName()).append(""String_Node_Str"").append(e.getMessage()).toString(),e);
    }
  }
}",0.9846153846153848
177604,"public void disablePlugin(Plugin plugin){
  if (!plugin.isEnabled()) {
    boolean locked=manager.lock(key);
    try {
      plugin.getPluginLoader().enablePlugin(plugin);
    }
 catch (    Exception e) {
      safelyLog(Level.SEVERE,new StringBuilder().append(""String_Node_Str"").append(plugin.getDescription().getFullName()).append(""String_Node_Str"").append(e.getMessage()).toString(),e);
    }
    if (!locked)     manager.unlock(key);
  }
}","public void disablePlugin(Plugin plugin){
  if (!plugin.isEnabled()) {
    boolean locked=manager.lock(key);
    try {
      plugin.getPluginLoader().disablePlugin(plugin);
    }
 catch (    Exception e) {
      safelyLog(Level.SEVERE,new StringBuilder().append(""String_Node_Str"").append(plugin.getDescription().getFullName()).append(""String_Node_Str"").append(e.getMessage()).toString(),e);
    }
    if (!locked)     manager.unlock(key);
  }
}",0.9943630214205186
177605,"public void loadPlugins(){
  pluginManager.registerPluginLoader(CommonPluginLoader.class);
  pluginManager.clearPlugins();
  if (!pluginDirectory.exists())   pluginDirectory.mkdirs();
  plugins=pluginManager.loadPlugins(pluginDirectory);
  for (  Plugin plugin : plugins) {
    try {
      plugin.onLoad();
    }
 catch (    Exception ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{plugin.getDescription().getName(),ex.getMessage()});
      ex.printStackTrace();
    }
  }
}","public void loadPlugins(){
  pluginManager.registerPluginLoader(CommonPluginLoader.class);
  pluginManager.clearPlugins();
  if (!pluginDirectory.exists())   pluginDirectory.mkdirs();
  Plugin[] plugins=pluginManager.loadPlugins(pluginDirectory);
  for (  Plugin plugin : plugins) {
    try {
      plugin.onLoad();
    }
 catch (    Exception ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{plugin.getDescription().getName(),ex.getMessage()});
      ex.printStackTrace();
    }
  }
}",0.9909729187562688
177606,"public void start(){
  CommandRegistrationsFactory<Class<?>> commandRegFactory=new AnnotatedCommandRegistrationFactory(new SimpleInjector(this),new SimpleAnnotatedCommandExecutorFactory());
  getRootCommand().addSubCommands(this,AdministrationCommands.class,commandRegFactory);
  consoleManager.setupConsole();
  loadPlugins();
  enablePlugins();
  scheduler.startMainThread();
}","public void start(){
  Spout.setGame(this);
  CommandRegistrationsFactory<Class<?>> commandRegFactory=new AnnotatedCommandRegistrationFactory(new SimpleInjector(this),new SimpleAnnotatedCommandExecutorFactory());
  getRootCommand().addSubCommands(this,AdministrationCommands.class,commandRegFactory);
  consoleManager.setupConsole();
  loadPlugins();
  enablePlugins();
  scheduler.startMainThread();
}",0.970550576184379
177607,"private void enablePlugins(){
  for (  Plugin plugin : plugins) {
    pluginManager.enablePlugin(plugin);
  }
}","private void enablePlugins(){
  for (  Plugin plugin : pluginManager.getPlugins()) {
    pluginManager.enablePlugin(plugin);
  }
}",0.921161825726141
177608,"private void markDirty(K key){
  boolean success=dirtyMap.putIfAbsent(key,Boolean.TRUE);
  if (success) {
    dirtyQueue.add(key);
  }
}","private void markDirty(K key){
  Boolean old=dirtyMap.putIfAbsent(key,Boolean.TRUE);
  if (old == null) {
    dirtyQueue.add(key);
  }
}",0.8970588235294118
177609,"private void markDirty(K key){
  boolean success=dirtyMap.putIfAbsent(key,Boolean.TRUE);
  if (success) {
    dirtyQueue.add(key);
  }
}","private void markDirty(K key){
  Boolean old=dirtyMap.putIfAbsent(key,Boolean.TRUE);
  if (old == null) {
    dirtyQueue.add(key);
  }
}",0.8970588235294118
177610,"/** 
 * Returns the dot product of A and B
 * @param a
 * @param b
 * @return
 */
public static double dot(Vector3 a,Vector3 b){
  return a.getX() * b.getX() + a.getY() * b.getY() + a.getZ() + b.getZ();
}","/** 
 * Returns the dot product of A and B
 * @param a
 * @param b
 * @return
 */
public static double dot(Vector3 a,Vector3 b){
  return a.getX() * b.getX() + a.getY() * b.getY() + a.getZ() * b.getZ();
}",0.9950980392156864
177611,"/** 
 * Returns the length of the given vector Note: Makes use of Math.sqrt and is not cached, so can be slow
 * @param a
 * @return
 */
public static double length(Vector3 a){
  return MathHelper.sqrt(lengthSquared(a));
}","/** 
 * Returns the length of the given vector Note: Makes use of Math.sqrt and is not cached, so can be slow
 * @param a
 * @return
 */
public static double length(Vector3 a){
  return Math.sqrt(lengthSquared(a));
}",0.9863013698630136
177612,"@Override public boolean processCommand(CommandSource source,Command command,Enum<?> commandEnum,String[] args,int baseIndex){
  boolean success=false;
  if (!this.owningAddon.isEnabled()) {
    return false;
  }
  try {
    success=this.executor.processCommand(source,command,commandEnum,args,baseIndex);
  }
 catch (  Throwable ex) {
    throw new CommandException(""String_Node_Str"" + command.getPreferredName() + ""String_Node_Str""+ this.owningAddon.getDescription().getFullName(),ex);
  }
  if ((!success) && (command.getUsageMessage() != null)) {
    source.sendMessage(command.getUsageMessage());
  }
  return success;
}","public boolean processCommand(CommandSource source,Command command,Enum<?> commandEnum,String[] args,int baseIndex){
  boolean success=false;
  if (!this.owningAddon.isEnabled()) {
    return false;
  }
  try {
    success=this.executor.processCommand(source,command,commandEnum,args,baseIndex);
  }
 catch (  Throwable ex) {
    throw new CommandException(""String_Node_Str"" + command.getPreferredName() + ""String_Node_Str""+ this.owningAddon.getDescription().getFullName(),ex);
  }
  if ((!success) && (command.getUsageMessage() != null)) {
    source.sendMessage(command.getUsageMessage());
  }
  return success;
}",0.9919354838709676
177613,"@Override public String getPreferredName(){
  return null;
}","public String getPreferredName(){
  return null;
}",0.9090909090909092
177614,"@Override public Command c(){
  return null;
}","public Command c(){
  return null;
}",0.8780487804878049
177615,"@Override public Command e(String name){
  return null;
}","public Command e(String name){
  return null;
}",0.903846153846154
177616,"@Override public Command h(String name){
  return null;
}","public Command h(String name){
  return null;
}",0.903846153846154
177617,"@Override public Command closeSubCommand(){
  return null;
}","public Command closeSubCommand(){
  return null;
}",0.9090909090909092
177618,"@Override public String getUsageMessage(){
  return null;
}","public String getUsageMessage(){
  return null;
}",0.9074074074074074
177619,"@Override public Command addSubCommand(Enum<?> commandEnum){
  return null;
}","public Command addSubCommand(Enum<?> commandEnum){
  return null;
}",0.9305555555555556
177620,"@Override public Command setCommandName(String name){
  return null;
}","public Command setCommandName(String name){
  return null;
}",0.9230769230769232
177621,"@Override public Command setExecutor(CommandExecutor executor){
  return null;
}","public Command setExecutor(CommandExecutor executor){
  return null;
}",0.9333333333333332
177622,"@Override public boolean execute(String[] args,int baseIndex){
  return false;
}","public boolean execute(String[] args,int baseIndex){
  return false;
}",0.9333333333333332
177623,"@Override public Command n(String name){
  return null;
}","public Command n(String name){
  return null;
}",0.903846153846154
177624,"@Override public Command s(Enum<?> command){
  return null;
}","public Command s(Enum<?> command){
  return null;
}",0.9107142857142856
177625,"@Override public Command setHelpString(String name){
  return null;
}","public Command setHelpString(String name){
  return null;
}",0.921875
177626,"@Override public boolean processCommand(CommandSource source,Command command,Enum<?> commandEnum,String[] args,int baseIndex){
  return false;
}","public boolean processCommand(CommandSource source,Command command,Enum<?> commandEnum,String[] args,int baseIndex){
  return false;
}",0.9640287769784172
177627,"public Map<String,Tag> save(T entity){
  Map<String,Tag> result=new HashMap<String,Tag>();
  result.put(""String_Node_Str"",new StringTag(""String_Node_Str"",id));
  Location loc=entity.getLocation();
  result.putAll(NbtSerialization.locationToListTags(loc));
  UUID worldUUID=loc.getWorld().getUID();
  result.put(""String_Node_Str"",new LongTag(""String_Node_Str"",worldUUID.getLeastSignificantBits()));
  result.put(""String_Node_Str"",new LongTag(""String_Node_Str"",worldUUID.getMostSignificantBits()));
  result.put(""String_Node_Str"",new StringTag(""String_Node_Str"",loc.getWorld().getName()));
  result.put(""String_Node_Str"",new IntTag(""String_Node_Str"",loc.getWorld().getEnvironment().getId()));
  result.putAll(NbtSerialization.locationToListTags(loc));
  result.put(""String_Node_Str"",NbtSerialization.vectorToListTag(entity.getVelocity()));
  result.put(""String_Node_Str"",new ByteTag(""String_Node_Str"",(byte)(entity.isOnGround() ? 1 : 0)));
  return result;
}","public Map<String,Tag> save(T entity){
  Map<String,Tag> result=new HashMap<String,Tag>();
  result.put(""String_Node_Str"",new StringTag(""String_Node_Str"",id));
  Location loc=entity.getLocation();
  UUID worldUUID=loc.getWorld().getUID();
  result.put(""String_Node_Str"",new LongTag(""String_Node_Str"",worldUUID.getLeastSignificantBits()));
  result.put(""String_Node_Str"",new LongTag(""String_Node_Str"",worldUUID.getMostSignificantBits()));
  result.put(""String_Node_Str"",new StringTag(""String_Node_Str"",loc.getWorld().getName()));
  result.put(""String_Node_Str"",new IntTag(""String_Node_Str"",loc.getWorld().getEnvironment().getId()));
  result.putAll(NbtSerialization.locationToListTags(loc));
  result.put(""String_Node_Str"",NbtSerialization.vectorToListTag(entity.getVelocity()));
  result.put(""String_Node_Str"",new ByteTag(""String_Node_Str"",(byte)(entity.isOnGround() ? 1 : 0)));
  return result;
}",0.9681597409606044
177628,"@Override public Map<String,Tag> save(T entity){
  Map<String,Tag> ret=new HashMap<String,Tag>();
  ret.put(""String_Node_Str"",NbtSerialization.inventoryToTag(entity.getInventory().getContents()));
  Location bed=entity.getBedSpawnLocation();
  if (bed != null) {
    ret.put(""String_Node_Str"",new IntTag(""String_Node_Str"",bed.getBlockX()));
    ret.put(""String_Node_Str"",new IntTag(""String_Node_Str"",bed.getBlockY()));
    ret.put(""String_Node_Str"",new IntTag(""String_Node_Str"",bed.getBlockZ()));
  }
  return ret;
}","@Override public Map<String,Tag> save(T entity){
  Map<String,Tag> ret=super.save(entity);
  ret.put(""String_Node_Str"",NbtSerialization.inventoryToTag(entity.getInventory().getContents()));
  Location bed=entity.getBedSpawnLocation();
  if (bed != null) {
    ret.put(""String_Node_Str"",new IntTag(""String_Node_Str"",bed.getBlockX()));
    ret.put(""String_Node_Str"",new IntTag(""String_Node_Str"",bed.getBlockY()));
    ret.put(""String_Node_Str"",new IntTag(""String_Node_Str"",bed.getBlockZ()));
  }
  return ret;
}",0.9619512195121952
177629,"/** 
 * Unloads the given world.
 * @param world The world to unload
 * @param save Whether to save the chunks before unloading.
 * @return Whether the action was Successful
 */
public boolean unloadWorld(World world,boolean save){
  if (!(world instanceof GlowWorld)) {
    return false;
  }
  if (save) {
    ((GlowWorld)world).save(false);
  }
  if (worlds.contains((GlowWorld)world)) {
    worlds.remove((GlowWorld)world);
    ((GlowWorld)world).unload();
    EventFactory.onWorldUnload((GlowWorld)world);
    return true;
  }
  return false;
}","/** 
 * Unloads the given world.
 * @param world The world to unload
 * @param save Whether to save the chunks before unloading.
 * @return Whether the action was Successful
 */
public boolean unloadWorld(World world,boolean save){
  if (!(world instanceof GlowWorld)) {
    return false;
  }
  if (save) {
    world.setAutoSave(false);
    ((GlowWorld)world).save(false);
  }
  if (worlds.contains((GlowWorld)world)) {
    worlds.remove((GlowWorld)world);
    ((GlowWorld)world).unload();
    EventFactory.onWorldUnload((GlowWorld)world);
    return true;
  }
  return false;
}",0.9733570159857904
177630,"public Set<OfflinePlayer> getOperators(){
}","public Set<OfflinePlayer> getOperators(){
  Set<OfflinePlayer> offlinePlayers=new HashSet<OfflinePlayer>();
  for (  String name : opsList.getContents()) {
    offlinePlayers.add(getOfflinePlayer(name));
  }
  return offlinePlayers;
}",0.3104693140794224
177631,"/** 
 * Creates or loads a world with the given name using the specified options. <p> If the world is already loaded, it will just return the equivalent of getWorld(creator.name()).
 * @param options Options to use when creating the world
 * @return Newly created or loaded world
 */
public GlowWorld createWorld(WorldCreator creator){
  return createWorld(creator.name(),creator.environment(),creator.seed(),creator.generator());
}","/** 
 * Creates or loads a world with the given name using the specified options. <p> If the world is already loaded, it will just return the equivalent of getWorld(creator.name()).
 * @param creator Options to use when creating the world
 * @return Newly created or loaded world
 */
public GlowWorld createWorld(WorldCreator creator){
  GlowWorld world=getWorld(creator.name());
  if (world != null) {
    return world;
  }
  if (creator.generator() == null) {
    creator.generator(getGenerator(creator.name(),creator.environment()));
  }
  world=new GlowWorld(this,creator.name(),creator.environment(),creator.seed(),new McRegionWorldStorageProvider(new File(creator.name())),creator.generator());
  worlds.add(world);
  return world;
}",0.6968403074295474
177632,"public ConsoleManager(GlowServer server,boolean fancy){
  this.server=server;
  this.fancy=fancy;
  sender=new ColoredCommandSender();
  thread=new ConsoleCommandThread();
  handler=new LoggingConsoleHandler();
  handler.setFormatter(new DateOutputFormatter(new SimpleDateFormat()));
  Logger logger=server.getLogger();
  logger.setUseParentHandlers(false);
  logger.addHandler(handler);
  Logger global=Logger.getLogger(""String_Node_Str"");
  for (  Handler handler : global.getHandlers()) {
    global.removeHandler(handler);
  }
  global.addHandler(handler);
  try {
    reader=new ConsoleReader();
  }
 catch (  IOException ex) {
    server.getLogger().log(Level.SEVERE,""String_Node_Str"",ex.getMessage());
    ex.printStackTrace();
  }
  Runtime.getRuntime().addShutdownHook(new ServerShutdownThread());
  thread.setDaemon(true);
  thread.start();
  System.setOut(new PrintStream(new LoggerOutputStream(Level.INFO),true));
  System.setErr(new PrintStream(new LoggerOutputStream(Level.SEVERE),true));
}","public ConsoleManager(GlowServer server,boolean fancy){
  this.server=server;
  this.fancy=fancy;
  sender=new ColoredCommandSender();
  thread=new ConsoleCommandThread();
  consoleHandler=new FancyConsoleHandler();
  String logFile=server.getLogFile();
  if (new File(logFile).getParentFile() != null) {
    new File(logFile).getParentFile().mkdirs();
  }
  fileHandler=new RotatingFileHandler(logFile);
  consoleHandler.setFormatter(new DateOutputFormatter(new SimpleDateFormat(""String_Node_Str"")));
  fileHandler.setFormatter(new DateOutputFormatter(new SimpleDateFormat(""String_Node_Str"")));
  Logger logger=Logger.getLogger(""String_Node_Str"");
  for (  Handler h : logger.getHandlers()) {
    logger.removeHandler(h);
  }
  logger.addHandler(consoleHandler);
  logger.addHandler(fileHandler);
  try {
    reader=new ConsoleReader();
  }
 catch (  IOException ex) {
    server.getLogger().log(Level.SEVERE,""String_Node_Str"",ex.getMessage());
    ex.printStackTrace();
  }
  Runtime.getRuntime().addShutdownHook(new ServerShutdownThread());
  thread.setDaemon(true);
  thread.start();
  System.setOut(new PrintStream(new LoggerOutputStream(Level.INFO),true));
  System.setErr(new PrintStream(new LoggerOutputStream(Level.SEVERE),true));
}",0.7403118040089087
177633,"public void stop(){
  running=false;
}","public void stop(){
  consoleHandler.flush();
  fileHandler.flush();
  fileHandler.close();
  running=false;
}",0.5135135135135135
177634,"@Override public synchronized void flush(){
  try {
    if (fancy) {
      reader.printString(ConsoleReader.RESET_LINE + ""String_Node_Str"");
      reader.flushConsole();
      super.flush();
      try {
        reader.drawLine();
      }
 catch (      Throwable ex) {
        reader.getCursorBuffer().clearBuffer();
      }
      reader.flushConsole();
    }
 else {
      super.flush();
    }
  }
 catch (  IOException ex) {
    server.getLogger().severe(""String_Node_Str"");
    ex.printStackTrace();
  }
}","@Override public synchronized void flush(){
  if (!filename.equals(calculateFilename())) {
    filename=calculateFilename();
    server.getLogger().log(Level.INFO,""String_Node_Str"",filename);
    try {
      setOutputStream(new FileOutputStream(filename,true));
    }
 catch (    FileNotFoundException ex) {
      server.getLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{filename,ex.getMessage()});
      ex.printStackTrace();
    }
  }
  super.flush();
}",0.242798353909465
177635,"/** 
 * Creates a new server on TCP port 25565 and starts listening for connections.
 * @param args The command-line arguments.
 */
public static void main(String[] args){
  try {
    if (!configDir.exists() || !configDir.isDirectory())     configDir.mkdirs();
    config.load();
    if (config.getKeys().size() == 0) {
      config.setProperty(""String_Node_Str"",25565);
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.setProperty(""String_Node_Str"",true);
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.save();
    }
    int port=config.getInt(""String_Node_Str"",25565);
    GlowServer server=new GlowServer();
    server.bind(new InetSocketAddress(port));
    server.start();
  }
 catch (  Throwable t) {
    logger.log(Level.SEVERE,""String_Node_Str"",t);
  }
}","/** 
 * Creates a new server on TCP port 25565 and starts listening for connections.
 * @param args The command-line arguments.
 */
public static void main(String[] args){
  try {
    if (!configDir.exists() || !configDir.isDirectory())     configDir.mkdirs();
    config.load();
    if (config.getKeys().size() == 0) {
      config.setProperty(""String_Node_Str"",25565);
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.setProperty(""String_Node_Str"",0);
      config.setProperty(""String_Node_Str"",16);
      config.setProperty(""String_Node_Str"",true);
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
      config.save();
    }
    int port=config.getInt(""String_Node_Str"",25565);
    GlowServer server=new GlowServer();
    server.bind(new InetSocketAddress(port));
    server.start();
  }
 catch (  Throwable t) {
    logger.log(Level.SEVERE,""String_Node_Str"",t);
  }
}",0.9505936422826504
177636,"public int getSpawnRadius(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public int getSpawnRadius(){
  return config.getInt(""String_Node_Str"",16);
}",0.7261904761904762
177637,"public void setSpawnRadius(int value){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public void setSpawnRadius(int value){
  config.setProperty(""String_Node_Str"",value);
}",0.7407407407407407
177638,"@Override public void handle(Session session,GlowPlayer player,KickMessage message){
  session.disconnect(""String_Node_Str"");
}","@Override public void handle(Session session,GlowPlayer player,KickMessage message){
  GlowServer.logger.log(Level.INFO,""String_Node_Str"",player.getName());
  String text=EventFactory.onPlayerQuit(player).getQuitMessage();
  if (message != null) {
    session.getServer().broadcastMessage(text);
  }
  session.disconnect(""String_Node_Str"");
}",0.4605543710021322
177639,"/** 
 * Disconnects the session with the specified reason. This causes a  {@link KickMessage} to be sent. When it has been delivered, the channelis closed.
 * @param reason The reason for disconnection.
 */
public void disconnect(String reason){
  if (player != null) {
    GlowServer.logger.log(Level.INFO,""String_Node_Str"",player.getName());
    PlayerKickEvent event=EventFactory.onPlayerKick(player,reason);
    if (event.isCancelled()) {
      return;
    }
    reason=event.getReason();
    if (event.getLeaveMessage() != null) {
      server.broadcastMessage(event.getLeaveMessage());
    }
    player.remove();
    player=null;
  }
  channel.write(new KickMessage(reason)).addListener(ChannelFutureListener.CLOSE);
}","/** 
 * Disconnects the session with the specified reason. This causes a  {@link KickMessage} to be sent. When it has been delivered, the channelis closed.
 * @param reason The reason for disconnection.
 * @param overrideKick Whether to override the kick event.
 */
public void disconnect(String reason,boolean overrideKick){
  if (player != null && !overrideKick) {
    GlowServer.logger.log(Level.INFO,""String_Node_Str"",player.getName());
    PlayerKickEvent event=EventFactory.onPlayerKick(player,reason);
    if (event.isCancelled()) {
      return;
    }
    reason=event.getReason();
    if (event.getLeaveMessage() != null) {
      server.broadcastMessage(event.getLeaveMessage());
    }
  }
  channel.write(new KickMessage(reason)).addListener(ChannelFutureListener.CLOSE);
}",0.9104180491041804
177640,"/** 
 * Disposes of this session by destroying the associated player, if there is one.
 */
void dispose(){
  if (player != null) {
    GlowServer.logger.log(Level.INFO,""String_Node_Str"",player.getName());
    String message=EventFactory.onPlayerQuit(player).getQuitMessage();
    if (message != null) {
      server.broadcastMessage(message);
    }
    player.remove();
    player=null;
  }
}","/** 
 * Disposes of this session by destroying the associated player, if there is one.
 */
void dispose(){
  if (player != null) {
    player.remove();
    player=null;
  }
}",0.6148409893992933
177641,"@Override public ChannelBuffer encode(SpawnMobMessage message) throws IOException {
  ChannelBuffer buffer=ChannelBuffers.buffer(19);
  buffer.writeInt(message.getId());
  buffer.writeByte(message.getType());
  buffer.writeInt(message.getX());
  buffer.writeInt(message.getY());
  buffer.writeInt(message.getZ());
  buffer.writeByte(message.getRotation());
  buffer.writeByte(message.getPitch());
  ChannelBufferUtils.writeParameters(buffer,message.getParameters());
  return buffer;
}","@Override public ChannelBuffer encode(SpawnMobMessage message) throws IOException {
  ChannelBuffer buffer=ChannelBuffers.dynamicBuffer();
  buffer.writeInt(message.getId());
  buffer.writeByte(message.getType());
  buffer.writeInt(message.getX());
  buffer.writeInt(message.getY());
  buffer.writeInt(message.getZ());
  buffer.writeByte(message.getRotation());
  buffer.writeByte(message.getPitch());
  ChannelBufferUtils.writeParameters(buffer,message.getParameters());
  return buffer;
}",0.9764102564102564
177642,"public ActivateItemMessage(int id,int item){
  this.id=id;
  this.item=item;
}","public ActivateItemMessage(int slot){
  this.slot=slot;
}",0.6962962962962963
177643,"@Override protected Object decode(ChannelHandlerContext ctx,Channel c,ChannelBuffer buf,VoidEnum state) throws Exception {
  int opcode=buf.readUnsignedByte();
  MessageCodec<?> codec=CodecLookupService.find(opcode);
  if (codec == null) {
    throw new IOException(""String_Node_Str"" + opcode + ""String_Node_Str"");
  }
  return codec.decode(buf);
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel c,ChannelBuffer buf,VoidEnum state) throws Exception {
  int opcode=buf.readUnsignedByte();
  MessageCodec<?> codec=CodecLookupService.find(opcode);
  if (codec == null) {
    throw new IOException(""String_Node_Str"" + opcode + ""String_Node_Str""+ previousOpcode+ ""String_Node_Str"");
  }
  previousOpcode=opcode;
  return codec.decode(buf);
}",0.9206349206349206
177644,"@Override public ChannelBuffer encode(ActivateItemMessage message) throws IOException {
  ChannelBuffer buffer=ChannelBuffers.buffer(6);
  buffer.writeInt(message.getId());
  buffer.writeShort(message.getItem());
  return buffer;
}","@Override public ChannelBuffer encode(ActivateItemMessage message) throws IOException {
  ChannelBuffer buffer=ChannelBuffers.buffer(6);
  buffer.writeShort(message.getSlot());
  return buffer;
}",0.9014084507042254
177645,"@Override public ActivateItemMessage decode(ChannelBuffer buffer) throws IOException {
  int id=buffer.readInt();
  int item=buffer.readShort();
  return new ActivateItemMessage(id,item);
}","@Override public ActivateItemMessage decode(ChannelBuffer buffer) throws IOException {
  int slot=buffer.readUnsignedShort();
  return new ActivateItemMessage(slot);
}",0.8820224719101124
177646,"/** 
 * Constructor.
 * @param firstCurrency  the first currency, may be null
 */
public CurrencyMismatchException(CurrencyUnit firstCurrency,CurrencyUnit secondCurrency){
  super(""String_Node_Str"" + (firstCurrency != null ? firstCurrency.getCode() : ""String_Node_Str"") + '/'+ (secondCurrency != null ? secondCurrency.getCode() : ""String_Node_Str""));
  this.firstCurrency=firstCurrency;
  this.secondCurrency=secondCurrency;
}","/** 
 * Constructor.
 * @param firstCurrency  the first currency, may be null
 * @param secondCurrency  the second currency, not null
 */
public CurrencyMismatchException(CurrencyUnit firstCurrency,CurrencyUnit secondCurrency){
  super(""String_Node_Str"" + (firstCurrency != null ? firstCurrency.getCode() : ""String_Node_Str"") + '/'+ (secondCurrency != null ? secondCurrency.getCode() : ""String_Node_Str""));
  this.firstCurrency=firstCurrency;
  this.secondCurrency=secondCurrency;
}",0.9383259911894272
177647,"/** 
 * Returns a copy of this monetary value with the amount added. <p> This adds the specified amount to this monetary amount, returning a new object. If the amount to add exceeds the scale of the currency, then the rounding mode will be used to adjust the result. <p> The amount is converted via   {@link BigDecimal#valueOf(double)} which yieldsthe most expected answer for most programming scenarios. Any  {@code double} literal in code will be converted toexactly the same BigDecimal with the same scale. For example, the literal '1.45d' will be converted to '1.45'. <p> This instance is immutable and unaffected by this method.
 * @param amountToAdd  the monetary value to add, not null
 * @return the new instance with the input amount added, never null
 */
public Money plus(double amountToAdd,RoundingMode roundingMode){
  return with(money.plusRetainScale(amountToAdd,roundingMode));
}","/** 
 * Returns a copy of this monetary value with the amount added. <p> This adds the specified amount to this monetary amount, returning a new object. If the amount to add exceeds the scale of the currency, then the rounding mode will be used to adjust the result. <p> The amount is converted via   {@link BigDecimal#valueOf(double)} which yieldsthe most expected answer for most programming scenarios. Any  {@code double} literal in code will be converted toexactly the same BigDecimal with the same scale. For example, the literal '1.45d' will be converted to '1.45'. <p> This instance is immutable and unaffected by this method.
 * @param amountToAdd  the monetary value to add, not null
 * @param roundingMode  the rounding mode to use, not null
 * @return the new instance with the input amount added, never null
 */
public Money plus(double amountToAdd,RoundingMode roundingMode){
  return with(money.plusRetainScale(amountToAdd,roundingMode));
}",0.9680908599242832
177648,"/** 
 * Returns a copy of this monetary value with the amount subtracted. <p> This subtracts the specified amount from this monetary amount, returning a new object. If the amount to subtract exceeds the scale of the currency, then the rounding mode will be used to adjust the result. <p> The amount is converted via   {@link BigDecimal#valueOf(double)} which yieldsthe most expected answer for most programming scenarios. Any  {@code double} literal in code will be converted toexactly the same BigDecimal with the same scale. For example, the literal '1.45d' will be converted to '1.45'. <p> This instance is immutable and unaffected by this method.
 * @param amountToSubtract  the monetary value to subtract, not null
 * @return the new instance with the input amount subtracted, never null
 */
public Money minus(double amountToSubtract,RoundingMode roundingMode){
  return with(money.minusRetainScale(amountToSubtract,roundingMode));
}","/** 
 * Returns a copy of this monetary value with the amount subtracted. <p> This subtracts the specified amount from this monetary amount, returning a new object. If the amount to subtract exceeds the scale of the currency, then the rounding mode will be used to adjust the result. <p> The amount is converted via   {@link BigDecimal#valueOf(double)} which yieldsthe most expected answer for most programming scenarios. Any  {@code double} literal in code will be converted toexactly the same BigDecimal with the same scale. For example, the literal '1.45d' will be converted to '1.45'. <p> This instance is immutable and unaffected by this method.
 * @param amountToSubtract  the monetary value to subtract, not null
 * @param roundingMode  the rounding mode to use, not null
 * @return the new instance with the input amount subtracted, never null
 */
public Money minus(double amountToSubtract,RoundingMode roundingMode){
  return with(money.minusRetainScale(amountToSubtract,roundingMode));
}",0.9695405265875064
177649,"/** 
 * Returns a copy of this monetary value divided by the specified value. <p> This takes this amount and divides it by the specified value, rounding the result is rounded as specified. <p> This instance is immutable and unaffected by this method.
 * @param valueToDivideBy  the scalar value to divide by, not null
 * @return the new divided instance, never null
 * @throws ArithmeticException if dividing by zero
 * @throws ArithmeticException if the rounding fails
 */
public Money dividedBy(long valueToDivideBy,RoundingMode roundingMode){
  return with(money.dividedBy(valueToDivideBy,roundingMode));
}","/** 
 * Returns a copy of this monetary value divided by the specified value. <p> This takes this amount and divides it by the specified value, rounding the result is rounded as specified. <p> This instance is immutable and unaffected by this method.
 * @param valueToDivideBy  the scalar value to divide by, not null
 * @param roundingMode  the rounding mode to use, not null
 * @return the new divided instance, never null
 * @throws ArithmeticException if dividing by zero
 * @throws ArithmeticException if the rounding fails
 */
public Money dividedBy(long valueToDivideBy,RoundingMode roundingMode){
  return with(money.dividedBy(valueToDivideBy,roundingMode));
}",0.9537979639780736
177650,"/** 
 * Checks if this monetary value equals another. <p> The comparison takes into account the scale. The compared values must be in the same currency.
 * @return true if this instance equals the other instance
 */
@Override public boolean equals(Object other){
  if (this == other) {
    return true;
  }
  if (other instanceof Money) {
    Money otherMoney=(Money)other;
    return money.equals(otherMoney.money);
  }
  return false;
}","/** 
 * Checks if this monetary value equals another. <p> The comparison takes into account the scale. The compared values must be in the same currency.
 * @param other  the other object to compare to, not null
 * @return true if this instance equals the other instance
 */
@Override public boolean equals(Object other){
  if (this == other) {
    return true;
  }
  if (other instanceof Money) {
    Money otherMoney=(Money)other;
    return money.equals(otherMoney.money);
  }
  return false;
}",0.9379014989293362
177651,"/** 
 * Checks if the monetary value is negative and non-zero, treating null as zero. <p> This method accepts any implementation of   {@code BigMoneyProvider}.
 * @return true if the money is non-null and negative
 */
public static boolean isNegative(BigMoneyProvider moneyProvider){
  return (moneyProvider != null && moneyProvider.toBigMoney().isNegative());
}","/** 
 * Checks if the monetary value is negative and non-zero, treating null as zero. <p> This method accepts any implementation of   {@code BigMoneyProvider}.
 * @param moneyProvider  the money to check, null returns false
 * @return true if the money is non-null and negative
 */
public static boolean isNegative(BigMoneyProvider moneyProvider){
  return (moneyProvider != null && moneyProvider.toBigMoney().isNegative());
}",0.9187817258883249
177652,"/** 
 * Validates that the object specified is not null
 * @param object  the object to check, not null
 * @throws NullPointerException if the input value is null
 */
static void checkNotNull(Object object,String message){
  if (object == null) {
    throw new NullPointerException(message);
  }
}","/** 
 * Validates that the object specified is not null.
 * @param object  the object to check, not null
 * @throws NullPointerException if the input value is null
 */
static void checkNotNull(Object object,String message){
  if (object == null) {
    throw new NullPointerException(message);
  }
}",0.9983193277310924
177653,"/** 
 * Checks if the monetary value is positive or zero, treating null as zero. <p> This method accepts any implementation of   {@code BigMoneyProvider}.
 * @return true if the money is null, zero or positive
 */
public static boolean isPositiveOrZero(BigMoneyProvider moneyProvider){
  return (moneyProvider == null || moneyProvider.toBigMoney().isPositiveOrZero());
}","/** 
 * Checks if the monetary value is positive or zero, treating null as zero. <p> This method accepts any implementation of   {@code BigMoneyProvider}.
 * @param moneyProvider  the money to check, null returns true
 * @return true if the money is null, zero or positive
 */
public static boolean isPositiveOrZero(BigMoneyProvider moneyProvider){
  return (moneyProvider == null || moneyProvider.toBigMoney().isPositiveOrZero());
}",0.921544209215442
177654,"/** 
 * Checks if the monetary value is zero, treating null as zero. <p> This method accepts any implementation of   {@code BigMoneyProvider}.
 * @return true if the money is null or zero
 */
public static boolean isZero(BigMoneyProvider moneyProvider){
  return (moneyProvider == null || moneyProvider.toBigMoney().isZero());
}","/** 
 * Checks if the monetary value is zero, treating null as zero. <p> This method accepts any implementation of   {@code BigMoneyProvider}.
 * @param moneyProvider  the money to check, null returns zero
 * @return true if the money is null or zero
 */
public static boolean isZero(BigMoneyProvider moneyProvider){
  return (moneyProvider == null || moneyProvider.toBigMoney().isZero());
}",0.9123783031988874
177655,"/** 
 * Checks if the monetary value is positive and non-zero, treating null as zero. <p> This method accepts any implementation of   {@code BigMoneyProvider}.
 * @return true if the money is non-null and positive
 */
public static boolean isPositive(BigMoneyProvider moneyProvider){
  return (moneyProvider != null && moneyProvider.toBigMoney().isPositive());
}","/** 
 * Checks if the monetary value is positive and non-zero, treating null as zero. <p> This method accepts any implementation of   {@code BigMoneyProvider}.
 * @param moneyProvider  the money to check, null returns false
 * @return true if the money is non-null and positive
 */
public static boolean isPositive(BigMoneyProvider moneyProvider){
  return (moneyProvider != null && moneyProvider.toBigMoney().isPositive());
}",0.9187817258883249
177656,"/** 
 * Checks if the monetary value is negative or zero, treating null as zero. <p> This method accepts any implementation of   {@code BigMoneyProvider}.
 * @return true if the money is null, zero or negative
 */
public static boolean isNegativeOrZero(BigMoneyProvider moneyProvider){
  return (moneyProvider == null || moneyProvider.toBigMoney().isNegativeOrZero());
}","/** 
 * Checks if the monetary value is negative or zero, treating null as zero. <p> This method accepts any implementation of   {@code BigMoneyProvider}.
 * @param moneyProvider  the money to check, null returns true
 * @return true if the money is null, zero or negative
 */
public static boolean isNegativeOrZero(BigMoneyProvider moneyProvider){
  return (moneyProvider == null || moneyProvider.toBigMoney().isNegativeOrZero());
}",0.921544209215442
177657,"@Override public void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  mInitialOffset=(childrenWidth - w) / 2;
  super.scrollTo(mInitialOffset,0);
  mScrollX=mInitialOffset;
  setTime(currentTime,0);
}","@Override public void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  mInitialOffset=(childrenWidth - w) / 2;
  super.scrollTo(mInitialOffset,0);
  mScrollX=mInitialOffset;
  mLastScroll=mInitialOffset;
  setTime(currentTime,0);
}",0.9407114624505928
177658,"public SQLiteAndroid(Context context,String dbFilename){
  super(context,dbFilename,null,SQLITE_VERSION);
  SQLiteDatabase db=getWritableDatabase();
  this.db=db;
  this.databaseName=dbFilename;
  typeMapper=new DataTypeMapperImpl();
  executer=new QueryExecutionContainerImpl(this.db);
  grammar=new SQLiteGrammar();
  schemaInspector=new SQLiteSchemaInspector(getExecuter());
  Log.trace(""String_Node_Str"",this.db.getPath());
}","/** 
 * constructor kept for legacy purposes: all DBs created before this patch will have version '33' and therefore need to specify a version equal or greater (in case of a schema upgrade). where is the db version stored? see: http://stackoverflow.com/questions/3707797/where-does-android-store-sqlite-database-version
 * @deprecated use SQLiteAndroid(Context context, String dbFilename, int version) instead
 */
public SQLiteAndroid(Context context,String dbFilename){
  super(context,dbFilename,null,SQLITE_VERSION);
  init(dbFilename);
}",0.2329896907216495
177659,"private int startBulkInsertUsingRegex(){
  return -1;
}","@SuppressWarnings(""String_Node_Str"") private int startBulkInsertUsingRegex(){
  StringBuilder fileBuffer;
  Model<E> model;
  Pattern pattern;
  Matcher matcher;
  String[] rowFields;
  boolean atLeastOneMatch=false;
  int matchEnd=0, affectedRecordCount=0;
  if (!createInputStream())   return -1;
  fileBuffer=new StringBuilder(DEFAULT_BUFFER_SIZE);
  while (readBlock(fileBuffer,DEFAULT_BUFFER_SIZE) != -1) {
    pattern=Pattern.compile(this.regExp,Pattern.MULTILINE | Pattern.UNIX_LINES);
    matcher=pattern.matcher(fileBuffer.toString());
    while (matcher.find()) {
      atLeastOneMatch=true;
      matchEnd=matcher.end();
      if ((matcher.groupCount()) != getActualFieldsSize()) {
        Log.error(""String_Node_Str"",matcher.group(0));
        continue;
      }
      rowFields=new String[getActualFieldsSize()];
      for (int i=0; i < matcher.groupCount(); i++) {
        rowFields[i]=matcher.group(i + 1);
      }
      model=(E)createObjectUsingFields(rowFields);
      if (model != null) {
        model.insert();
        affectedRecordCount++;
      }
 else {
        Log.error(""String_Node_Str"",matcher.group(0));
      }
    }
    if (atLeastOneMatch) {
      fileBuffer.delete(0,matchEnd);
      atLeastOneMatch=false;
    }
  }
  return affectedRecordCount;
}",0.0823353293413173
177660,"private String readStringByLength(int len){
  StringBuilder sb=new StringBuilder(len + 1);
  char val=0;
  while (len-- > 0) {
    val=readChar();
    if (val == -1)     break;
    sb.append(val);
  }
  return sb.toString();
}","private String readStringByLength(int len){
  StringBuilder sb=new StringBuilder(len + 1);
  char val=0;
  while (len-- > 0) {
    val=readChar();
    if (val == (char)-1)     break;
    sb.append(val);
  }
  return sb.toString();
}",0.9868995633187772
177661,"public int startBulkInsert(){
  int affectedRecords;
  if (!this.isReady)   return -1;
  if (regExp != null)   affectedRecords=startBulkInsertUsingRegex();
  try {
    affectedRecords=startBulkInsertUsingSeperators();
  }
 catch (  Exception e) {
    Log.error(e.getMessage());
    affectedRecords=-1;
  }
  releaseSourceStream();
  return affectedRecords;
}","public int startBulkInsert(){
  int affectedRecords;
  if (!this.isReady)   return -1;
  if (regExp != null) {
    affectedRecords=startBulkInsertUsingRegex();
  }
 else {
    try {
      affectedRecords=startBulkInsertUsingSeperators();
    }
 catch (    Exception e) {
      Log.error(e.getMessage());
      affectedRecords=-1;
    }
  }
  releaseSourceStream();
  return affectedRecords;
}",0.9546666666666668
177662,"/** 
 * Extracts declared non-<code>transient</code> fields of a given Entity. Makes  property bindings for fields using their annotations and checks for their getter-and setters (finds them automatically) if they are non-public fields.
 * @return fields of this class.
 */
@SuppressWarnings(""String_Node_Str"") private List<Field> extractFields(){
  this.fields.clear();
  for (  java.lang.reflect.Field f : this.clazz.getDeclaredFields()) {
    if (!Modifier.isTransient(f.getModifiers())) {
      Class<?> fieldType=f.getType();
      boolean isList=false;
      if (fieldType.equals(EntityList.class)) {
        OneToMany otm=f.getAnnotation(OneToMany.class);
        ManyToMany mtm=f.getAnnotation(ManyToMany.class);
        if (otm != null) {
          fieldType=otm.toType();
        }
 else         if (mtm != null) {
          fieldType=mtm.toType();
        }
 else {
          throw new UnannotatedCollectionFieldException(f.getName(),this.clazz.getName());
        }
        isList=true;
      }
      Field newF=new Field(fieldType,f);
      if (isList)       newF.setList(true);
      int accessibility=f.getModifiers();
      if (!(Modifier.isPublic(accessibility))) {
        Method setter=this.findSetterFor(this.clazz,f.getName());
        if (setter == null)         throw new NotDeclaredSetterException(f.getName(),this.clazz.getName());
 else         newF.setSetterMethod(setter);
        Method getter=this.findGetterFor(this.clazz,f.getName());
        if (getter == null)         throw new NotDeclaredGetterException(f.getName(),this.clazz.getName());
 else         newF.setGetterMethod(getter);
      }
      PrimaryKey pk=f.getAnnotation(PrimaryKey.class);
      if (pk != null) {
        newF.setPrimaryKey(true);
        if (!isSupportedForPrimaryKeyField(f.getType())) {
          throw new UnsupportedPrimaryKeyFieldTypeException(f.getType().getName(),clazz.getName());
        }
        newF.setAutoIncrement(pk.autoIncrement());
        if (newF.getIndex() == null) {
          newF.setIndex(new FieldIndexHolder(null,true,IndexType.HASH,true));
        }
      }
      if (f.isAnnotationPresent(Index.class)) {
        Index ann=f.getAnnotation(Index.class);
        newF.setIndex(new FieldIndexHolder(ann.name(),ann.unique(),ann.type(),false));
        newF.setNullable(false);
      }
      if (f.isAnnotationPresent(NotNull.class)) {
        newF.setNullable(false);
      }
      if (f.isAnnotationPresent(OneToOne.class)) {
        newF.setForeignKey(true);
        if (newF.getIndex() == null)         newF.setIndex(new FieldIndexHolder(null,true));
      }
      if (f.isAnnotationPresent(ManyToOne.class)) {
        newF.setForeignKey(true);
        if (newF.getIndex() == null)         newF.setIndex(new FieldIndexHolder(null,false));
      }
      newF.setRawField(f);
      fields.add(newF);
    }
  }
  return this.fields;
}","/** 
 * Extracts declared non-<code>transient</code> fields of a given Entity. Makes  property bindings for fields using their annotations and checks for their getter-and setters (finds them automatically) if they are non-public fields.
 * @return fields of this class.
 */
@SuppressWarnings(""String_Node_Str"") private List<Field> extractFields(){
  this.fields.clear();
  int modifiers;
  for (  java.lang.reflect.Field f : this.clazz.getDeclaredFields()) {
    modifiers=f.getModifiers();
    if (!Modifier.isTransient(modifiers) && !Modifier.isVolatile(modifiers)) {
      Class<?> fieldType=f.getType();
      boolean isList=false;
      if (fieldType.equals(EntityList.class)) {
        OneToMany otm=f.getAnnotation(OneToMany.class);
        ManyToMany mtm=f.getAnnotation(ManyToMany.class);
        if (otm != null) {
          fieldType=otm.toType();
        }
 else         if (mtm != null) {
          fieldType=mtm.toType();
        }
 else {
          throw new UnannotatedCollectionFieldException(f.getName(),this.clazz.getName());
        }
        isList=true;
      }
      Field newF=new Field(fieldType,f);
      if (isList)       newF.setList(true);
      modifiers=f.getModifiers();
      if (!(Modifier.isPublic(modifiers))) {
        Method setter=this.findSetterFor(this.clazz,f.getName());
        if (setter == null)         throw new NotDeclaredSetterException(f.getName(),this.clazz.getName());
 else         newF.setSetterMethod(setter);
        Method getter=this.findGetterFor(this.clazz,f.getName());
        if (getter == null)         throw new NotDeclaredGetterException(f.getName(),this.clazz.getName());
 else         newF.setGetterMethod(getter);
      }
      PrimaryKey pk=f.getAnnotation(PrimaryKey.class);
      if (pk != null) {
        newF.setPrimaryKey(true);
        if (!isSupportedForPrimaryKeyField(f.getType())) {
          throw new UnsupportedPrimaryKeyFieldTypeException(f.getType().getName(),clazz.getName());
        }
        newF.setAutoIncrement(pk.autoIncrement());
        if (newF.getIndex() == null) {
          newF.setIndex(new FieldIndexHolder(null,true,IndexType.HASH,true));
        }
      }
      if (f.isAnnotationPresent(Index.class)) {
        Index ann=f.getAnnotation(Index.class);
        newF.setIndex(new FieldIndexHolder(ann.name(),ann.unique(),ann.type(),false));
        newF.setNullable(false);
      }
      if (f.isAnnotationPresent(NotNull.class)) {
        newF.setNullable(false);
      }
      if (f.isAnnotationPresent(OneToOne.class)) {
        newF.setForeignKey(true);
        if (newF.getIndex() == null)         newF.setIndex(new FieldIndexHolder(null,true));
      }
      if (f.isAnnotationPresent(ManyToOne.class)) {
        newF.setForeignKey(true);
        if (newF.getIndex() == null)         newF.setIndex(new FieldIndexHolder(null,false));
      }
      newF.setRawField(f);
      fields.add(newF);
    }
  }
  return this.fields;
}",0.9591449750043096
177663,"private static List<Class<?>> populateClasses(File objectDir,String packageName){
  List<Class<?>> classes=new ArrayList<Class<?>>();
  File[] classFiles=objectDir.listFiles();
  for (  File classFile : classFiles) {
    if (!classFile.isDirectory())     classes.add(getClassFor(classFile,packageName));
 else     classes.addAll(populateClasses(classFile,packageName));
  }
  return classes;
}","private static List<Class<?>> populateClasses(File objectDir,String packageName){
  List<Class<?>> classes=new ArrayList<Class<?>>();
  File[] classFiles=objectDir.listFiles();
  for (  File classFile : classFiles) {
    if (!classFile.isDirectory())     classes.add(getClassFor(classFile,packageName));
 else     if (recursiveScan)     classes.addAll(populateClasses(classFile,packageName));
  }
  return classes;
}",0.9715698393077874
177664,"/** 
 * Returns list of   {@link Class} types of available classes types annotatedwith @ {@link Entity} from given package, recursively.
 * @param packageName Entity container package
 * @return List of all annotated classes
 */
public static List<Class<?>> findEntitiesInPackage(String packageName){
  String packageUrl, fileName;
  URL element;
  Enumeration<URL> classResources;
  List<Class<?>> classObjects;
  List<Class<?>> annotatedClasses=null;
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  if (classLoader == null)   return null;
  packageUrl=packageName.replace('.','/');
  try {
    classResources=classLoader.getResources(packageUrl);
  }
 catch (  IOException e) {
    Log.error(e.getMessage());
    return null;
  }
  classObjects=new ArrayList<Class<?>>();
  while (classResources.hasMoreElements()) {
    element=classResources.nextElement();
    try {
      fileName=URLDecoder.decode(element.getFile(),""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException e) {
      try {
        fileName=URLDecoder.decode(element.getFile(),""String_Node_Str"");
      }
 catch (      UnsupportedEncodingException e1) {
        fileName=element.getFile().replace(""String_Node_Str"",""String_Node_Str"");
      }
    }
    annotatedClasses=populateClasses(new File(fileName),packageName);
    for (    Class<?> currentClass : annotatedClasses) {
      if (currentClass != null && currentClass.isAnnotationPresent(org.orman.mapper.annotation.Entity.class)) {
        classObjects.add(currentClass);
      }
    }
  }
  return classObjects.size() == 0 ? null : classObjects;
}","/** 
 * Returns list of   {@link Class} types of available classes types annotatedwith @ {@link Entity} from given package, recursively.
 * @param packageName Entity container package
 * @return List of all annotated classes
 */
public static List<Class<?>> findEntitiesInPackage(String packageName){
  String packageUrl=null, fileName;
  URL element;
  Enumeration<URL> classResources;
  List<Class<?>> classObjects;
  List<Class<?>> annotatedClasses=null;
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  if (classLoader == null)   return null;
  if (packageName == null)   packageUrl=""String_Node_Str"";
 else   packageUrl=packageName.replace('.','/');
  try {
    classResources=classLoader.getResources(packageUrl);
  }
 catch (  IOException e) {
    Log.error(e.getMessage());
    return null;
  }
  classObjects=new ArrayList<Class<?>>();
  while (classResources.hasMoreElements()) {
    element=classResources.nextElement();
    try {
      fileName=URLDecoder.decode(element.getFile(),""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException e) {
      try {
        fileName=URLDecoder.decode(element.getFile(),""String_Node_Str"");
      }
 catch (      UnsupportedEncodingException e1) {
        fileName=element.getFile().replace(""String_Node_Str"",""String_Node_Str"");
      }
    }
    annotatedClasses=populateClasses(new File(fileName),packageName);
    for (    Class<?> currentClass : annotatedClasses) {
      if (currentClass != null && currentClass.isAnnotationPresent(org.orman.mapper.annotation.Entity.class)) {
        classObjects.add(currentClass);
      }
    }
  }
  return classObjects.size() == 0 ? null : classObjects;
}",0.9787750151607034
177665,"@SuppressWarnings(""String_Node_Str"") private static Class<?> getClassFor(File classFile,String packageName){
  String fileName=classFile.getName();
  Class classObj=null;
  if (fileName.endsWith(""String_Node_Str"")) {
    try {
      classObj=Class.forName(packageName + ""String_Node_Str"" + fileName.substring(0,fileName.length() - 6));
    }
 catch (    ClassNotFoundException e) {
      return null;
    }
  }
  return classObj;
}","@SuppressWarnings(""String_Node_Str"") private static Class<?> getClassFor(File classFile,String packageName){
  String fileName=classFile.getName();
  String className;
  Class classObj=null;
  if (fileName.endsWith(""String_Node_Str"")) {
    try {
      className=packageName != null ? packageName + ""String_Node_Str"" : ""String_Node_Str"";
      className+=fileName.substring(0,fileName.length() - 6);
      classObj=Class.forName(className);
    }
 catch (    ClassNotFoundException e) {
      return null;
    }
  }
  return classObj;
}",0.7321613236814891
177666,"public static String getWorkingRootPackageName(){
  int i;
  StackTraceElement[] callStack=Thread.currentThread().getStackTrace();
  String rootClass=callStack[callStack.length - 1].getClassName();
  i=rootClass.indexOf('.');
  if (i == -1)   return rootClass;
  return rootClass.substring(0,i);
}","public static String getWorkingRootPackageName(){
  int i;
  StackTraceElement[] callStack=Thread.currentThread().getStackTrace();
  String rootClass=callStack[callStack.length - 1].getClassName();
  i=rootClass.indexOf('.');
  if (i == -1) {
    recursiveScan=false;
    return null;
  }
  return rootClass.substring(0,i);
}",0.8938906752411575
177667,"@Override public ResultList executeForResultList(Query q){
  Log.trace(q.getExecutableSql());
  demandConnector.requestConnection();
  try {
    Statement stmt=conn.createStatement();
    stmt.executeQuery(q.getExecutableSql());
    ResultSet rs=stmt.getResultSet();
    ResultSetMetaData rsMeta=rs.getMetaData();
    int columnCount=rsMeta.getColumnCount();
    List<Object[]> result=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] row=new Object[columnCount];
      for (int colIndex=0; colIndex < columnCount; colIndex++) {
        row[colIndex]=rs.getObject(colIndex + 1);
      }
      result.add(row);
    }
    if (result.size() > 0) {
      Object[][] resultArr=new Object[result.size()][];
      int i=0;
      for (      Object[] row : result)       resultArr[i++]=row;
      String[] columnNames=new String[columnCount];
      for (int j=0; j < columnNames.length; j++) {
        columnNames[j]=rsMeta.getColumnName(j + 1);
      }
      Log.trace(""String_Node_Str"",result.size());
      return new ResultList(columnNames,resultArr);
    }
  }
 catch (  SQLException ex) {
    throwError(ex);
  }
  return null;
}","@Override public ResultList executeForResultList(Query q){
  Log.trace(""String_Node_Str"",q);
  demandConnector.requestConnection();
  try {
    Statement stmt=conn.createStatement();
    stmt.executeQuery(q.getExecutableSql());
    ResultSet rs=stmt.getResultSet();
    ResultSetMetaData rsMeta=rs.getMetaData();
    int columnCount=rsMeta.getColumnCount();
    List<Object[]> result=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] row=new Object[columnCount];
      for (int colIndex=0; colIndex < columnCount; colIndex++) {
        row[colIndex]=rs.getObject(colIndex + 1);
      }
      result.add(row);
    }
    if (result.size() > 0) {
      Object[][] resultArr=new Object[result.size()][];
      int i=0;
      for (      Object[] row : result)       resultArr[i++]=row;
      String[] columnNames=new String[columnCount];
      for (int j=0; j < columnNames.length; j++) {
        columnNames[j]=rsMeta.getColumnName(j + 1);
      }
      Log.trace(""String_Node_Str"",result.size());
      return new ResultList(columnNames,resultArr);
    }
  }
 catch (  SQLException ex) {
    throwError(ex);
  }
  return null;
}",0.9837932544897066
177668,"@Override public Object executeForSingleValue(Query q){
  Log.trace(q.getExecutableSql());
  demandConnector.requestConnection();
  Statement stmt;
  try {
    stmt=conn.createStatement();
    stmt.executeQuery(q.getExecutableSql());
    ResultSet rs=stmt.getResultSet();
    while (rs.next())     return rs.getString(1);
  }
 catch (  SQLException e) {
    throwError(e);
  }
  return null;
}","@Override public Object executeForSingleValue(Query q){
  Log.trace(""String_Node_Str"",q);
  demandConnector.requestConnection();
  Statement stmt;
  try {
    stmt=conn.createStatement();
    stmt.executeQuery(q.getExecutableSql());
    ResultSet rs=stmt.getResultSet();
    while (rs.next())     return rs.getString(1);
  }
 catch (  SQLException e) {
    throwError(e);
  }
  return null;
}",0.9503184713375796
177669,"/** 
 * Only executes the query without obtaining any results. throws  {@link QueryExecutionException} if error occurs.
 */
@Override public void executeOnly(Query q){
  Log.trace(q.getExecutableSql());
  demandConnector.requestConnection();
  try {
    Statement stmt=conn.createStatement();
    stmt.execute(q.getExecutableSql());
  }
 catch (  SQLException e) {
    throwError(e);
  }
}","/** 
 * Only executes the query without obtaining any results. throws  {@link QueryExecutionException} if error occurs.
 */
@Override public void executeOnly(Query q){
  Log.trace(""String_Node_Str"",q);
  demandConnector.requestConnection();
  try {
    Statement stmt=conn.createStatement();
    stmt.execute(q.getExecutableSql());
  }
 catch (  SQLException e) {
    throwError(e);
  }
}",0.9523809523809524
177670,"@Override public void close(){
  if (conn == null)   return;
  try {
    conn.close();
    conn=null;
    Log.info(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throwError(e);
  }
}","@Override public void close(){
  if (conn == null)   return;
  try {
    conn.close();
    conn=null;
    Log.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throwError(e);
  }
}",0.9765013054830288
177671,"@Override public boolean open(long cookie) throws IllegalConnectionOpenCallException {
  demandConnector.checkCallCookie(cookie);
  Properties props=new Properties();
  props.put(""String_Node_Str"",this.settings.getUsername());
  props.put(""String_Node_Str"",this.settings.getPassword());
  try {
    Log.info(""String_Node_Str"",this.settings.getHost(),this.settings.getPort());
    DriverManager.registerDriver(new Driver());
    conn=DriverManager.getConnection(""String_Node_Str"" + this.settings.getHost() + ""String_Node_Str""+ this.settings.getPort()+ ""String_Node_Str""+ this.settings.getDatabase(),props);
    conn.setAutoCommit(this.settings.isAutoCommit());
  }
 catch (  SQLException e) {
    throwError(new DatasourceConnectionException(e.getMessage()));
  }
  if (conn == null) {
    throwError(new DatasourceConnectionException(""String_Node_Str""));
    return false;
  }
 else   Log.info(""String_Node_Str"");
  return true;
}","@Override public boolean open(long cookie) throws IllegalConnectionOpenCallException {
  demandConnector.checkCallCookie(cookie);
  Properties props=new Properties();
  props.put(""String_Node_Str"",this.settings.getUsername());
  props.put(""String_Node_Str"",this.settings.getPassword());
  try {
    Log.debug(""String_Node_Str"",this.settings.getHost(),this.settings.getPort());
    DriverManager.registerDriver(new Driver());
    conn=DriverManager.getConnection(""String_Node_Str"" + this.settings.getHost() + ""String_Node_Str""+ this.settings.getPort()+ ""String_Node_Str""+ this.settings.getDatabase(),props);
    conn.setAutoCommit(this.settings.isAutoCommit());
  }
 catch (  SQLException e) {
    throwError(new DatasourceConnectionException(e.getMessage()));
  }
  if (conn == null) {
    throwError(new DatasourceConnectionException(""String_Node_Str""));
    return false;
  }
 else   Log.debug(""String_Node_Str"");
  return true;
}",0.9903329752953812
177672,"@Override public ResultList executeForResultList(Query q){
  Log.trace(""String_Node_Str"" + q);
  demandConnector.requestConnection();
  try {
    SQLiteStatement s=db.prepare(q.getExecutableSql());
    int columnCount=s.columnCount();
    String[] colNames=new String[columnCount];
    List<Object[]> result=new ArrayList<Object[]>();
    int rowIndex=0;
    while (s.step()) {
      Object[] row=new Object[columnCount];
      for (int j=0; j < columnCount; j++) {
        row[j]=s.columnValue(j);
      }
      result.add(row);
      ++rowIndex;
    }
    if (result.size() > 0) {
      Object[][] resultArr=new Object[result.size()][columnCount];
      int i=0;
      for (      Object[] row : result)       resultArr[i++]=row;
      for (int j=0; j < columnCount; j++) {
        colNames[j]=s.getColumnName(j);
      }
      return new ResultList(colNames,resultArr);
    }
  }
 catch (  SQLiteException ex) {
    throwError(ex);
  }
  return null;
}","@Override public ResultList executeForResultList(Query q){
  Log.trace(""String_Node_Str"",q);
  demandConnector.requestConnection();
  try {
    SQLiteStatement s=db.prepare(q.getExecutableSql());
    int columnCount=s.columnCount();
    String[] colNames=new String[columnCount];
    List<Object[]> result=new ArrayList<Object[]>();
    int rowIndex=0;
    while (s.step()) {
      Object[] row=new Object[columnCount];
      for (int j=0; j < columnCount; j++) {
        row[j]=s.columnValue(j);
      }
      result.add(row);
      ++rowIndex;
    }
    if (result.size() > 0) {
      Object[][] resultArr=new Object[result.size()][columnCount];
      int i=0;
      for (      Object[] row : result)       resultArr[i++]=row;
      for (int j=0; j < columnCount; j++) {
        colNames[j]=s.getColumnName(j);
      }
      return new ResultList(colNames,resultArr);
    }
  }
 catch (  SQLiteException ex) {
    throwError(ex);
  }
  return null;
}",0.9979013641133264
177673,"@Override public Object executeForSingleValue(Query q){
  Log.trace(""String_Node_Str"" + q);
  demandConnector.requestConnection();
  try {
    SQLiteStatement s=db.prepare(q.getExecutableSql());
    while (s.step()) {
      return s.columnValue(0);
    }
  }
 catch (  SQLiteException e) {
    throwError(e);
  }
  return null;
}","@Override public Object executeForSingleValue(Query q){
  Log.trace(""String_Node_Str"",q);
  demandConnector.requestConnection();
  try {
    SQLiteStatement s=db.prepare(q.getExecutableSql());
    while (s.step()) {
      return s.columnValue(0);
    }
  }
 catch (  SQLiteException e) {
    throwError(e);
  }
  return null;
}",0.9939024390243902
177674,"/** 
 * Only executes the query without obtaining any results. throws   {@link QueryExecutionException} if error occurs.
 */
@Override public void executeOnly(Query q){
  Log.trace(""String_Node_Str"" + q);
  demandConnector.requestConnection();
  try {
    db.exec(q.getExecutableSql());
  }
 catch (  SQLiteException e) {
    throwError(e);
  }
}","/** 
 * Only executes the query without obtaining any results. throws   {@link QueryExecutionException} if error occurs.
 */
@Override public void executeOnly(Query q){
  Log.trace(""String_Node_Str"",q);
  demandConnector.requestConnection();
  try {
    db.exec(q.getExecutableSql());
  }
 catch (  SQLiteException e) {
    throwError(e);
  }
}",0.9942028985507246
177675,"@Override public ResultList executeForResultList(Query q){
  Log.trace(""String_Node_Str"" + q);
  try {
    Cursor cur=db.rawQuery(q.getExecutableSql(),null);
    int columnCount=cur.getColumnCount();
    String[] colNames=cur.getColumnNames();
    List<Object[]> result=new ArrayList<Object[]>();
    int rowIndex=0;
    boolean hasRecord=cur.moveToFirst();
    while (hasRecord) {
      Object[] row=new Object[columnCount];
      for (int j=0; j < columnCount; j++) {
        row[j]=cur.getString(j);
      }
      result.add(row);
      ++rowIndex;
      hasRecord=cur.moveToNext();
    }
    if (result.size() > 0) {
      Object[][] resultArr=new Object[result.size()][columnCount];
      int i=0;
      for (      Object[] row : result)       resultArr[i++]=row;
      return new ResultList(colNames,resultArr);
    }
  }
 catch (  SQLiteException ex) {
    throwError(ex);
  }
  return null;
}","@Override public ResultList executeForResultList(Query q){
  Log.trace(""String_Node_Str"",q);
  try {
    Cursor cur=db.rawQuery(q.getExecutableSql(),null);
    int columnCount=cur.getColumnCount();
    String[] colNames=cur.getColumnNames();
    List<Object[]> result=new ArrayList<Object[]>();
    int rowIndex=0;
    boolean hasRecord=cur.moveToFirst();
    while (hasRecord) {
      Object[] row=new Object[columnCount];
      for (int j=0; j < columnCount; j++) {
        row[j]=cur.getString(j);
      }
      result.add(row);
      ++rowIndex;
      hasRecord=cur.moveToNext();
    }
    cur.close();
    if (result.size() > 0) {
      Object[][] resultArr=new Object[result.size()][columnCount];
      int i=0;
      for (      Object[] row : result)       resultArr[i++]=row;
      return new ResultList(colNames,resultArr);
    }
  }
 catch (  SQLiteException ex) {
    throwError(ex);
  }
  return null;
}",0.9884297520661156
177676,"@Override public void executeOnly(Query q){
  Log.trace(""String_Node_Str"" + q);
  try {
    db.execSQL(q.getExecutableSql());
  }
 catch (  SQLiteException e) {
    throwError(e);
  }
}","@Override public void executeOnly(Query q){
  Log.trace(""String_Node_Str"",q);
  try {
    db.execSQL(q.getExecutableSql());
  }
 catch (  SQLiteException e) {
    throwError(e);
  }
}",0.9891304347826086
177677,"@Override public Object executeForSingleValue(Query q){
  Log.trace(""String_Node_Str"" + q);
  try {
    Cursor cur=db.rawQuery(q.getExecutableSql(),null);
    if (!cur.moveToNext()) {
      return null;
    }
 else {
      return cur.getString(0);
    }
  }
 catch (  SQLiteException e) {
    throwError(e);
  }
  return null;
}","@Override public Object executeForSingleValue(Query q){
  Log.trace(""String_Node_Str"",q);
  Cursor cur=null;
  try {
    cur=db.rawQuery(q.getExecutableSql(),null);
    if (!cur.moveToNext()) {
      return null;
    }
 else {
      return cur.getString(0);
    }
  }
 catch (  SQLiteException e) {
    throwError(e);
    return null;
  }
 finally {
    if (cur != null)     cur.close();
  }
}",0.8321775312066574
177678,"/** 
 * Builds a serial schedule of building of entities into existing node list. Worst time complexity is <code>O(N!)</code> but the average time complexity converges to <code>O(N^2)</code>. Postcondition: <code>EntityDependencyGraph.nodes</code> is ordered list  of serializable schedule.
 */
private void buildSerialDependencyGraph(){
  for (  Entity e : this.entityList) {
    for (    Field f : e.getFields()) {
      if (!f.isList() && getEntityOfType(f.getClazz()) != null) {
        Entity requirement=getEntityOfType(f.getClazz());
        entityMap.get(e).requires.add(requirement);
      }
    }
  }
  Collections.sort(nodes);
  LinkedList<Node> orderedList=new LinkedList<Node>();
  for (  Node n : nodes)   orderedList.add(n);
  while (true) {
    Node unchecked=null;
    int pos=0;
    for (    Node n : orderedList) {
      if (!n.checked) {
        unchecked=n;
        break;
      }
      pos++;
    }
    if (unchecked == null)     break;
    boolean dependenciesSatisfied=true;
    do {
      dependenciesSatisfied=true;
      for (      Entity dependency : unchecked.requires) {
        boolean satisfied=false;
        for (int i=0; i < pos; i++) {
          if (orderedList.get(i).entity == dependency) {
            satisfied=true;
            break;
          }
        }
        dependenciesSatisfied&=satisfied;
      }
      if (dependenciesSatisfied) {
        unchecked.checked=true;
        break;
      }
 else {
        if (pos >= orderedList.size() - 1) {
          throw new UnsolvableDependencyOrderException();
        }
 else {
          orderedList.remove(pos);
          orderedList.add(pos + 1,unchecked);
          pos++;
        }
      }
    }
 while (!dependenciesSatisfied);
  }
  nodes=orderedList;
}","/** 
 * Builds a serial schedule of building of entities into existing node list. Worst time complexity is <code>O(N!)</code> but the average time complexity converges to <code>O(N^2)</code>. Postcondition: <code>EntityDependencyGraph.nodes</code> is ordered list  of serializable schedule.
 */
private void buildSerialDependencyGraph(){
  for (  Entity e : this.entityList) {
    for (    Field f : e.getFields()) {
      if (!f.isList() && getEntityOfType(f.getClazz()) != null && !f.getClazz().equals(e.getType())) {
        Entity requirement=getEntityOfType(f.getClazz());
        entityMap.get(e).requires.add(requirement);
      }
    }
  }
  Collections.sort(nodes);
  LinkedList<Node> orderedList=new LinkedList<Node>();
  for (  Node n : nodes)   orderedList.add(n);
  while (true) {
    Node unchecked=null;
    int pos=0;
    for (    Node n : orderedList) {
      if (!n.checked) {
        unchecked=n;
        break;
      }
      pos++;
    }
    if (unchecked == null)     break;
    boolean dependenciesSatisfied=true;
    do {
      dependenciesSatisfied=true;
      for (      Entity dependency : unchecked.requires) {
        boolean satisfied=false;
        for (int i=0; i < pos; i++) {
          if (orderedList.get(i).entity == dependency) {
            satisfied=true;
            break;
          }
        }
        dependenciesSatisfied&=satisfied;
      }
      if (dependenciesSatisfied) {
        unchecked.checked=true;
        break;
      }
 else {
        if (pos >= orderedList.size() - 1) {
          throw new UnsolvableDependencyOrderException();
        }
 else {
          orderedList.remove(pos);
          orderedList.add(pos + 1,unchecked);
          pos++;
        }
      }
    }
 while (!dependenciesSatisfied);
  }
  nodes=orderedList;
}",0.962921030285876
177679,"/** 
 * Set the   {@link Model} flags and hashes using the persistent fields of theentity to detect that object is changed later.
 */
private void makePersistent(){
  List<Field> fields=getEntity().getFields();
  __persistencyFieldHashes=new int[fields.size()];
  for (int i=0; i < __persistencyFieldHashes.length; i++) {
    Field f=fields.get(i);
    Object o=getEntityField(f);
    __persistencyFieldHashes[i]=(o == null || f.isList()) ? DEFAULT_TRANSIENT_HASHCODE : o.hashCode();
  }
  if (getEntity().getAutoIncrementField() != null)   __persistencyId=getEntityId();
  __persistencyHash=this.hashCode();
}","/** 
 * Set the   {@link Model} flags and hashes using the persistent fields of theentity to detect that object is changed later.
 */
protected void makePersistent(){
  List<Field> fields=getEntity().getFields();
  __persistencyFieldHashes=new int[fields.size()];
  for (int i=0; i < __persistencyFieldHashes.length; i++) {
    Field f=fields.get(i);
    Object o=getEntityField(f);
    __persistencyFieldHashes[i]=(o == null || f.isList()) ? DEFAULT_TRANSIENT_HASHCODE : o.hashCode();
  }
  if (getEntity().getAutoIncrementField() != null)   __persistencyId=getEntityId();
  __persistencyHash=this.hashCode();
}",0.9901800327332242
177680,"@SuppressWarnings(""String_Node_Str"") public static <E>E map(ResultRow row,Class<E> type,Entity e){
  E instance=null;
  try {
    instance=(E)e.getDefaultConstructor().newInstance();
  }
 catch (  Exception e1) {
    Log.error(e1.getMessage());
  }
  if (instance != null)   for (  Field f : e.getFields()) {
    if (!f.isList()) {
      Object fieldValue=row.getColumn(f.getGeneratedName());
      fieldValue=smartCasting(fieldValue,f.getClazz());
      fieldValue=makeCardinalityBinding(f,instance,fieldValue);
      if (f.getClazz().isEnum()) {
        Object[] enumConstant=f.getClazz().getEnumConstants();
        try {
          fieldValue=enumConstant[(Integer)fieldValue];
        }
 catch (        Exception ex) {
          Log.error(""String_Node_Str"",f.getClazz().getName(),fieldValue == null ? null : fieldValue);
          fieldValue=null;
        }
      }
      if (fieldValue != null)       ((Model<?>)instance).setEntityField(f,e,fieldValue);
    }
 else {
      Object fieldValue=makeCardinalityBinding(f,instance,((Model<?>)instance).getEntityField(((Model<?>)instance).getEntity().getAutoIncrementField()));
      if (fieldValue != null)       ((Model<?>)instance).setEntityField(f,e,fieldValue);
    }
  }
  return instance;
}","@SuppressWarnings(""String_Node_Str"") public static <E>E map(ResultRow row,Class<E> type,Entity e){
  E instance=null;
  try {
    instance=(E)e.getDefaultConstructor().newInstance();
  }
 catch (  Exception e1) {
    Log.error(e1.getMessage());
  }
  if (instance != null) {
    for (    Field f : e.getFields()) {
      if (!f.isList()) {
        Object fieldValue=row.getColumn(f.getGeneratedName());
        fieldValue=smartCasting(fieldValue,f.getClazz());
        fieldValue=makeCardinalityBinding(f,instance,fieldValue);
        if (f.getClazz().isEnum()) {
          Object[] enumConstant=f.getClazz().getEnumConstants();
          try {
            fieldValue=enumConstant[(Integer)fieldValue];
          }
 catch (          Exception ex) {
            Log.error(""String_Node_Str"",f.getClazz().getName(),fieldValue == null ? null : fieldValue);
            fieldValue=null;
          }
        }
        if (fieldValue != null)         ((Model<?>)instance).setEntityField(f,e,fieldValue);
      }
 else {
        Object fieldValue=makeCardinalityBinding(f,instance,((Model<?>)instance).getEntityField(((Model<?>)instance).getEntity().getAutoIncrementField()));
        if (fieldValue != null)         ((Model<?>)instance).setEntityField(f,e,fieldValue);
      }
    }
    ((Model<?>)instance).makePersistent();
  }
  return instance;
}",0.943993820007725
177681,"public static void main(String[] args){
  Database db=new SQLite(""String_Node_Str"");
  StandardLogger log=new StandardLogger();
  Log.setLogger(log);
  Log.setLevel(LoggingLevel.TRACE);
  MappingSession.registerDatabase(db);
  MappingSession.getConfiguration().setCreationPolicy(SchemeCreationPolicy.CREATE);
  MappingSession.start();
  Department d1=new Department();
  d1.title=""String_Node_Str"";
  Department d2=new Department();
  d2.title=""String_Node_Str"";
  d1.insert();
  d2.insert();
  d1.employees=new EntityList(Department.class,Employee.class,d1);
  Employee e1=new Employee();
  e1.name=""String_Node_Str"";
  e1.insert();
  d1.employees.add(e1);
  Employee e2=new Employee();
  e2.name=""String_Node_Str"";
  e2.insert();
  e2.dept=d2;
  e2.update();
  d2.employees=new EntityList(Department.class,Employee.class,d2);
  Employee e3=new Employee();
  e3.name=""String_Node_Str"";
  e3.insert();
  d2.employees.add(e3);
  System.out.println(""String_Node_Str"");
  System.out.println(d1.employees);
  System.out.println(d2.employees);
  System.out.println(""String_Node_Str"");
  List<Department> depts=Model.fetchAll(Department.class);
  for (  Department d : depts) {
    System.out.println(""String_Node_Str"" + d.toString() + ""String_Node_Str""+ d.employees);
  }
  System.out.println(""String_Node_Str"");
}","public static void main(String[] args){
  Database db=new SQLite(""String_Node_Str"");
  StandardLogger log=new StandardLogger();
  Log.setLogger(log);
  Log.setLevel(LoggingLevel.TRACE);
  MappingSession.registerDatabase(db);
  MappingSession.getConfiguration().setCreationPolicy(SchemeCreationPolicy.CREATE);
  MappingSession.start();
  Department d1=new Department();
  d1.title=""String_Node_Str"";
  Department d2=new Department();
  d2.title=""String_Node_Str"";
  d1.insert();
  d2.insert();
  d1.employees=new EntityList(Department.class,Employee.class,d1);
  Employee e1=new Employee();
  e1.name=""String_Node_Str"";
  e1.insert();
  d1.employees.add(e1);
  Employee e2=new Employee();
  e2.name=""String_Node_Str"";
  e2.dept=d2;
  e2.insert();
  d2.employees=new EntityList(Department.class,Employee.class,d2);
  Employee e3=new Employee();
  e3.name=""String_Node_Str"";
  e3.insert();
  d2.employees.add(e3);
  System.out.println(""String_Node_Str"");
  System.out.println(d1.employees);
  System.out.println(d2.employees);
  System.out.println(""String_Node_Str"");
  List<Department> depts=Model.fetchAll(Department.class);
  for (  Department d : depts) {
    System.out.println(""String_Node_Str"" + d.toString() + ""String_Node_Str""+ d.employees);
  }
  System.out.println(""String_Node_Str"");
}",0.9804072224356511
177682,"/** 
 * Fields should be in format of EntityName.fieldName, they will be translated to physical names. Field expression can be predeced with (+) indicating ASC, (-) indicating DESCending order. <p> examples: </p> orderBy(""User.lastName"", ""-Customer.id"")
 */
public ModelQuery orderBy(String... fields){
  for (int i=0; i < fields.length; i++) {
    String expr=fields[i].trim();
    boolean desc=fields[i].charAt(0) == '-';
    expr=expr.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    Entity e=parseEntity(expr);
    Field f=parseField(expr);
    String fieldName=f.getGeneratedName();
    fields[i]=(desc ? ""String_Node_Str"" : ""String_Node_Str"") + F.formatField(e,fieldName);
  }
  qb.orderBy(fields);
  return this;
}","/** 
 * Fields should be in format of EntityName.fieldName, they will be translated to physical names. Field expression can be predeced with (+) indicating ASC, (-) indicating DESCending order. <p> examples: </p> orderBy(""User.lastName"", ""-Customer.id"")
 */
public ModelQuery orderBy(String... fields){
  for (int i=0; i < fields.length; i++) {
    String expr=fields[i].trim();
    boolean desc=fields[i].charAt(0) == '-';
    expr=expr.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    Entity e=parseEntity(expr);
    Field f=parseField(expr);
    String fieldName=f.getOriginalName();
    fields[i]=(desc ? ""String_Node_Str"" : ""String_Node_Str"") + F.formatField(e,fieldName);
  }
  qb.orderBy(fields);
  return this;
}",0.9889106327462492
177683,"private String getTemplateFieldValue(String tplField) throws QueryBuilderException {
  if (""String_Node_Str"".equals(tplField))   return prepareSelectFieldList();
  if (""String_Node_Str"".equals(tplField))   return prepareFieldDescriptionList();
  if (""String_Node_Str"".equals(tplField))   return prepareTableConstraints();
  if (""String_Node_Str"".equals(tplField))   return prepareTableList();
  if (""String_Node_Str"".equals(tplField))   return prepareIndexName();
  if (""String_Node_Str"".equals(tplField))   return prepareValueList();
  if (""String_Node_Str"".equals(tplField))   return prepareFieldValuePairList();
  if (""String_Node_Str"".equals(tplField))   return prepareValuedFieldList();
  if (""String_Node_Str"".equals(tplField))   return prepareDatabase();
  SubclauseType subclause=SubclauseType.lookup(tplField);
  if (subclause != null) {
    return this.prepareSubclause(subclause);
  }
  return ""String_Node_Str"";
}","private String getTemplateFieldValue(String tplField) throws OrmanQueryBuilderException {
  if (""String_Node_Str"".equals(tplField))   return prepareSelectFieldList();
  if (""String_Node_Str"".equals(tplField))   return prepareFieldDescriptionList();
  if (""String_Node_Str"".equals(tplField))   return prepareTableConstraints();
  if (""String_Node_Str"".equals(tplField))   return prepareTableList();
  if (""String_Node_Str"".equals(tplField))   return prepareIndexName();
  if (""String_Node_Str"".equals(tplField))   return prepareValueList();
  if (""String_Node_Str"".equals(tplField))   return prepareFieldValuePairList();
  if (""String_Node_Str"".equals(tplField))   return prepareValuedFieldList();
  if (""String_Node_Str"".equals(tplField))   return prepareDatabase();
  SubclauseType subclause=SubclauseType.lookup(tplField);
  if (subclause != null) {
    return this.prepareSubclause(subclause);
  }
  return ""String_Node_Str"";
}",0.9973045822102424
177684,"public void setPort(short port){
  this.port=port < 0 || port > 0xffff ? -1 : port;
}","public void setPort(int port){
  this.port=port < 0 || port > 0xffff ? -1 : port;
}",0.9642857142857144
177685,"public short getPort(){
  return port;
}","public int getPort(){
  return port;
}",0.9230769230769232
177686,"public MySQLSettingsImpl(String username,String password,String db,String host,short port){
  if (username != null)   this.username=username;
  if (password != null)   this.password=password;
  if (db != null)   this.database=db;
  if (host != null)   this.host=host;
  if (port >= 0)   this.port=port;
}","public MySQLSettingsImpl(String username,String password,String db,String host,int port){
  if (username != null)   this.username=username;
  if (password != null)   this.password=password;
  if (db != null)   this.database=db;
  if (host != null)   this.host=host;
  if (port >= 0)   this.port=port;
}",0.99009900990099
177687,"public static void main(String[] args){
  Database db=new SQLite(""String_Node_Str"");
  StandardLogger log=new StandardLogger();
  Log.setLogger(log);
  Log.setLevel(LoggingLevel.TRACE);
  MappingSession.setAutoPackageRegistration(false);
  MappingSession.registerEntity(BlogPost.class);
  MappingSession.registerEntity(Keyword.class);
  MappingSession.registerDatabase(db);
  MappingSession.getConfiguration().setCreationPolicy(SchemeCreationPolicy.CREATE);
  MappingSession.start();
  Keyword k1=new Keyword(""String_Node_Str"");
  k1.insert();
  Keyword k2=new Keyword(""String_Node_Str"");
  k2.insert();
  Keyword k3=new Keyword(""String_Node_Str"");
  k3.insert();
  Keyword k4=new Keyword(""String_Node_Str"");
  k4.insert();
  System.out.println(""String_Node_Str"" + k1 + '\n'+ k2+ '\n'+ k3+ '\n'+ k4);
  BlogPost p1=new BlogPost();
  p1.title=""String_Node_Str"";
  p1.insert();
  BlogPost p2=new BlogPost();
  p2.title=""String_Node_Str"";
  p2.insert();
  p1.keywords.add(k1);
  p1.keywords.add(k2);
  p1.keywords.add(k3);
  k1.posts.add(p2);
  k2.posts.add(p2);
  k4.posts.add(p2);
  System.out.println(""String_Node_Str"");
  List<BlogPost> posts=Model.fetchAll(BlogPost.class);
  for (  BlogPost p : posts) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + p.title);
    System.out.println(""String_Node_Str"" + p.keywords);
  }
  System.out.println(""String_Node_Str"");
  List<Keyword> kws=Model.fetchAll(Keyword.class);
  for (  Keyword k : kws) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + k.word);
    System.out.println(""String_Node_Str"" + k.posts);
  }
}","public static void main(String[] args){
  Database db=new SQLite(""String_Node_Str"");
  StandardLogger log=new StandardLogger();
  Log.setLogger(log);
  Log.setLevel(LoggingLevel.TRACE);
  MappingSession.setAutoPackageRegistration(false);
  MappingSession.registerEntity(BlogPost.class);
  MappingSession.registerEntity(Keyword.class);
  MappingSession.registerDatabase(db);
  MappingSession.getConfiguration().setCreationPolicy(SchemeCreationPolicy.CREATE);
  PhysicalNamingPolicy columnNamePolicy=new PhysicalNamingPolicy().camelCase(true).underscore(false);
  MappingSession.getConfiguration().setColumnNamePolicy(columnNamePolicy);
  MappingSession.start();
  Keyword k1=new Keyword(""String_Node_Str"");
  k1.insert();
  Keyword k2=new Keyword(""String_Node_Str"");
  k2.insert();
  Keyword k3=new Keyword(""String_Node_Str"");
  k3.insert();
  Keyword k4=new Keyword(""String_Node_Str"");
  k4.insert();
  System.out.println(""String_Node_Str"" + k1 + '\n'+ k2+ '\n'+ k3+ '\n'+ k4);
  BlogPost p1=new BlogPost();
  p1.title=""String_Node_Str"";
  p1.insert();
  BlogPost p2=new BlogPost();
  p2.title=""String_Node_Str"";
  p2.insert();
  p1.keywords.add(k1);
  p1.keywords.add(k2);
  p1.keywords.add(k3);
  k1.posts.add(p2);
  k2.posts.add(p2);
  k4.posts.add(p2);
  System.out.println(""String_Node_Str"");
  List<BlogPost> posts=Model.fetchAll(BlogPost.class);
  for (  BlogPost p : posts) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + p.title);
    System.out.println(""String_Node_Str"" + p.keywords);
  }
  System.out.println(""String_Node_Str"");
  List<Keyword> kws=Model.fetchAll(Keyword.class);
  for (  Keyword k : kws) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + k.word);
    System.out.println(""String_Node_Str"" + k.posts);
  }
}",0.9486807770368224
177688,"public static void main(String[] args){
  Database db=new SQLite(""String_Node_Str"");
  StandardLogger log=new StandardLogger();
  Log.setLogger(log);
  Log.setLevel(LoggingLevel.WARN);
  MappingSession.setAutoPackageRegistration(false);
  MappingSession.registerEntity(BlogPost.class);
  MappingSession.registerEntity(Keyword.class);
  MappingSession.registerDatabase(db);
  MappingSession.getConfiguration().setCreationPolicy(SchemeCreationPolicy.UPDATE);
  MappingSession.start();
  Scanner scan=new Scanner(System.in);
  int option=0;
  do {
    System.out.print(""String_Node_Str"");
    System.out.print(""String_Node_Str"");
    option=scan.nextInt();
    if (option == 1) {
      List<BlogPost> posts=Model.fetchAll(BlogPost.class);
      for (      BlogPost p : posts) {
        System.out.println(""String_Node_Str"" + p.title);
        System.out.print(""String_Node_Str"");
        for (        Keyword k : p.keywords) {
          System.out.print(k.word + ""String_Node_Str"");
        }
        System.out.println();
      }
    }
    if (option == 2) {
      List<Keyword> kws=Model.fetchAll(Keyword.class);
      for (      Keyword k : kws) {
        System.out.println(""String_Node_Str"" + k.word + ""String_Node_Str""+ k.posts.size()+ ""String_Node_Str"");
      }
    }
    if (option == 3) {
      System.out.print(""String_Node_Str"");
      String word=null;
      do {
        word=scan.nextLine();
      }
 while (word == null || ""String_Node_Str"".equals(word));
      Keyword k=new Keyword(word);
      k.insert();
      System.err.println(""String_Node_Str"");
    }
    if (option == 4) {
      System.out.print(""String_Node_Str"");
      String title=null;
      do {
        title=scan.nextLine();
      }
 while (title == null || ""String_Node_Str"".equals(title));
      BlogPost b=new BlogPost();
      b.title=title;
      b.insert();
      List<Keyword> kws=Model.fetchAll(Keyword.class);
      System.out.println(""String_Node_Str"");
      for (int i=0; i < kws.size(); i++) {
        System.out.println(i + ""String_Node_Str"" + kws.get(i).word);
      }
      int kwChoice=-1;
      do {
        System.out.print(""String_Node_Str"");
        kwChoice=scan.nextInt();
        if (kwChoice >= 0 && kwChoice < kws.size()) {
          b.keywords.add(kws.get(kwChoice));
        }
      }
 while (kwChoice >= kws.size() || kwChoice >= 0);
      System.err.println(""String_Node_Str"");
    }
  }
 while (option != 0);
  System.err.println(""String_Node_Str"");
}","public static void main(String[] args){
  Database db=new SQLite(""String_Node_Str"");
  StandardLogger log=new StandardLogger();
  Log.setLogger(log);
  Log.setLevel(LoggingLevel.WARN);
  MappingSession.setAutoPackageRegistration(false);
  MappingSession.registerEntity(BlogPost.class);
  MappingSession.registerEntity(Keyword.class);
  MappingSession.registerDatabase(db);
  MappingSession.getConfiguration().setCreationPolicy(SchemeCreationPolicy.CREATE_IF_NOT_EXISTS);
  MappingSession.start();
  Scanner scan=new Scanner(System.in);
  int option=0;
  do {
    System.out.print(""String_Node_Str"");
    System.out.print(""String_Node_Str"");
    option=scan.nextInt();
    if (option == 1) {
      List<BlogPost> posts=Model.fetchAll(BlogPost.class);
      for (      BlogPost p : posts) {
        System.out.println(""String_Node_Str"" + p.title);
        System.out.print(""String_Node_Str"");
        for (        Keyword k : p.keywords) {
          System.out.print(k.word + ""String_Node_Str"");
        }
        System.out.println();
      }
    }
    if (option == 2) {
      List<Keyword> kws=Model.fetchAll(Keyword.class);
      for (      Keyword k : kws) {
        System.out.println(""String_Node_Str"" + k.word + ""String_Node_Str""+ k.posts.size()+ ""String_Node_Str"");
      }
    }
    if (option == 3) {
      System.out.print(""String_Node_Str"");
      String word=null;
      do {
        word=scan.nextLine();
      }
 while (word == null || ""String_Node_Str"".equals(word));
      Keyword k=new Keyword(word);
      k.insert();
      System.err.println(""String_Node_Str"");
    }
    if (option == 4) {
      System.out.print(""String_Node_Str"");
      String title=null;
      do {
        title=scan.nextLine();
      }
 while (title == null || ""String_Node_Str"".equals(title));
      BlogPost b=new BlogPost();
      b.title=title;
      b.insert();
      List<Keyword> kws=Model.fetchAll(Keyword.class);
      System.out.println(""String_Node_Str"");
      for (int i=0; i < kws.size(); i++) {
        System.out.println(i + ""String_Node_Str"" + kws.get(i).word);
      }
      int kwChoice=-1;
      do {
        System.out.print(""String_Node_Str"");
        kwChoice=scan.nextInt();
        if (kwChoice >= 0 && kwChoice < kws.size()) {
          b.keywords.add(kws.get(kwChoice));
        }
      }
 while (kwChoice >= kws.size() || kwChoice >= 0);
      System.err.println(""String_Node_Str"");
    }
  }
 while (option != 0);
  System.err.println(""String_Node_Str"");
}",0.9959514170040484
177689,"/** 
 * Tries to find a getter method for given field name within specified   {@link Class}. First match (according to the  Java naming standards) will be returned, null if not found. Warning: If getter method has arguments in its parameter list, it will not be matched.
 */
private static Method findGetterFor(Class<?> forClass,final String fieldName){
  if (fieldName == null || ""String_Node_Str"".equals(fieldName))   throw new IllegalArgumentException(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") List<String> methodNameCandidates=new ArrayList<String>(){
{
      add(""String_Node_Str"" + Character.toUpperCase(fieldName.charAt(0)) + (fieldName.length() > 1 ? fieldName.substring(1) : ""String_Node_Str""));
      add(""String_Node_Str"" + fieldName);
      add(fieldName);
    }
  }
;
  Method m=findMethodLike(forClass,methodNameCandidates);
  if (m != null && m.getParameterTypes().length == 0 && !m.getReturnType().equals(Void.TYPE))   return m;
 else   return null;
}","/** 
 * Tries to find a getter method for given field name within specified   {@link Class}. First match (according to the  Java naming standards) will be returned, null if not found. Warning: If getter method has arguments in its parameter list, it will not be matched.
 */
private static Method findGetterFor(Class<?> forClass,final String fieldName){
  if (fieldName == null || ""String_Node_Str"".equals(fieldName))   throw new IllegalArgumentException(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") List<String> methodNameCandidates=new ArrayList<String>(){
{
      add(""String_Node_Str"" + Character.toUpperCase(fieldName.charAt(0)) + (fieldName.length() > 1 ? fieldName.substring(1) : ""String_Node_Str""));
      add(""String_Node_Str"" + fieldName);
      add(""String_Node_Str"" + Character.toUpperCase(fieldName.charAt(0)) + (fieldName.length() > 1 ? fieldName.substring(1) : ""String_Node_Str""));
      add(""String_Node_Str"" + fieldName);
      add(fieldName);
    }
  }
;
  Method m=findMethodLike(forClass,methodNameCandidates);
  if (m != null && m.getParameterTypes().length == 0 && !m.getReturnType().equals(Void.TYPE))   return m;
 else   return null;
}",0.9123783031988874
177690,"/** 
 * Tries to find a setter method for given field name within specified   {@link Class}. First match (according to the  Java naming standards) will be returned, null if not found. Warning: If setter method does not have exactly 1 argument in parameter list, it will not be matched.
 */
private static Method findSetterFor(Class<?> forClass,final String fieldName){
  if (fieldName == null || ""String_Node_Str"".equals(fieldName))   throw new IllegalArgumentException(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") List<String> methodNameCandidates=new ArrayList<String>(){
{
      add(""String_Node_Str"" + Character.toUpperCase(fieldName.charAt(0)) + (fieldName.length() > 1 ? fieldName.substring(1) : ""String_Node_Str""));
      add(""String_Node_Str"" + fieldName);
      add(""String_Node_Str"" + Character.toUpperCase(fieldName.charAt(0)) + (fieldName.length() > 1 ? fieldName.substring(1) : ""String_Node_Str""));
      add(""String_Node_Str"" + fieldName);
      add(fieldName);
    }
  }
;
  Method m=findMethodLike(forClass,methodNameCandidates);
  if (m != null && m.getParameterTypes().length == 1)   return m;
 else   return null;
}","/** 
 * Tries to find a setter method for given field name within specified   {@link Class}. First match (according to the  Java naming standards) will be returned, null if not found. Warning: If setter method does not have exactly 1 argument in parameter list, it will not be matched.
 */
private static Method findSetterFor(Class<?> forClass,final String fieldName){
  if (fieldName == null || ""String_Node_Str"".equals(fieldName))   throw new IllegalArgumentException(""String_Node_Str"");
  @SuppressWarnings(""String_Node_Str"") List<String> methodNameCandidates=new ArrayList<String>(){
{
      add(""String_Node_Str"" + Character.toUpperCase(fieldName.charAt(0)) + (fieldName.length() > 1 ? fieldName.substring(1) : ""String_Node_Str""));
      add(""String_Node_Str"" + fieldName);
      add(fieldName);
    }
  }
;
  Method m=findMethodLike(forClass,methodNameCandidates);
  if (m != null && m.getParameterTypes().length == 1)   return m;
 else   return null;
}",0.9102990033222592
177691,"/** 
 * Prepares DDL queries to create existing scheme from scrats. TODO return them as a list to execute somehow.
 */
private static void constructScheme(){
  Queue<Query> constructionQueries=new LinkedList<Query>();
  SchemeCreationPolicy policy=configuration.getCreationPolicy();
  Log.info(""String_Node_Str"",policy.toString());
  if (policy.equals(SchemeCreationPolicy.CREATE) || policy.equals(SchemeCreationPolicy.UPDATE)) {
    EntityDependencyGraph serialSchedule=new EntityDependencyGraph(scheme.getEntities());
    for (    Entity e : serialSchedule.getDestroySchedule()) {
      if (policy.equals(SchemeCreationPolicy.CREATE)) {
        Query dT=DDLQueryGenerator.dropTableQuery(e);
        constructionQueries.offer(dT);
      }
    }
    for (    Entity e : serialSchedule.getConstructSchedule()) {
      Query cT=DDLQueryGenerator.createTableQuery(e,policy.equals(SchemeCreationPolicy.UPDATE));
      constructionQueries.offer(cT);
      List<Field> compositeIndexFields=new ArrayList<Field>(2);
      List<Field> singleIndexFields=new ArrayList<Field>(2);
      for (      Field f : e.getFields()) {
        if (f.getIndex() != null) {
          if (f.isPrimaryKey() && !f.isAutoIncrement())           compositeIndexFields.add(f);
          if (!f.isPrimaryKey()) {
            singleIndexFields.add(f);
          }
        }
      }
      if (policy.equals(SchemeCreationPolicy.CREATE)) {
        Query dCI=DDLQueryGenerator.dropCompositeIndexQuery(e);
        if (dCI != null)         constructionQueries.offer(dCI);
      }
      Query cCI=DDLQueryGenerator.createCompositeIndexQuery(e,compositeIndexFields,policy.equals(SchemeCreationPolicy.UPDATE));
      if (cCI != null)       constructionQueries.offer(cCI);
      for (      Field f : singleIndexFields) {
        if (policy.equals(SchemeCreationPolicy.CREATE)) {
          Query dI=DDLQueryGenerator.dropIndexQuery(e,f);
          constructionQueries.offer(dI);
        }
        Query cI=DDLQueryGenerator.createIndexQuery(e,f,policy.equals(SchemeCreationPolicy.UPDATE));
        constructionQueries.offer(cI);
      }
    }
    Log.info(""String_Node_Str"");
    for (    Query q : constructionQueries) {
      getExecuter().executeOnly(q);
    }
    Log.info(""String_Node_Str"");
  }
}","/** 
 * Prepares DDL queries to create existing scheme from scrats. TODO return them as a list to execute somehow.
 */
private static void constructScheme(){
  Queue<Query> constructionQueries=new LinkedList<Query>();
  SchemeCreationPolicy policy=configuration.getCreationPolicy();
  Log.info(""String_Node_Str"",policy.toString());
  if (policy.equals(SchemeCreationPolicy.CREATE) || policy.equals(SchemeCreationPolicy.CREATE_IF_NOT_EXISTS)) {
    EntityDependencyGraph serialSchedule=new EntityDependencyGraph(scheme.getEntities());
    for (    Entity e : serialSchedule.getDestroySchedule()) {
      if (policy.equals(SchemeCreationPolicy.CREATE)) {
        Query dT=DDLQueryGenerator.dropTableQuery(e);
        constructionQueries.offer(dT);
      }
    }
    for (    Entity e : serialSchedule.getConstructSchedule()) {
      Query cT=DDLQueryGenerator.createTableQuery(e,policy.equals(SchemeCreationPolicy.CREATE_IF_NOT_EXISTS));
      constructionQueries.offer(cT);
      List<Field> compositeIndexFields=new ArrayList<Field>(2);
      List<Field> singleIndexFields=new ArrayList<Field>(2);
      for (      Field f : e.getFields()) {
        if (f.getIndex() != null) {
          if (f.isPrimaryKey() && !f.isAutoIncrement())           compositeIndexFields.add(f);
          if (!f.isPrimaryKey()) {
            singleIndexFields.add(f);
          }
        }
      }
      if (policy.equals(SchemeCreationPolicy.CREATE)) {
        Query dCI=DDLQueryGenerator.dropCompositeIndexQuery(e);
        if (dCI != null)         constructionQueries.offer(dCI);
      }
      Query cCI=DDLQueryGenerator.createCompositeIndexQuery(e,compositeIndexFields,policy.equals(SchemeCreationPolicy.CREATE_IF_NOT_EXISTS));
      if (cCI != null)       constructionQueries.offer(cCI);
      for (      Field f : singleIndexFields) {
        if (policy.equals(SchemeCreationPolicy.CREATE)) {
          Query dI=DDLQueryGenerator.dropIndexQuery(e,f);
          constructionQueries.offer(dI);
        }
        Query cI=DDLQueryGenerator.createIndexQuery(e,f,policy.equals(SchemeCreationPolicy.CREATE_IF_NOT_EXISTS));
        constructionQueries.offer(cI);
      }
    }
    Log.info(""String_Node_Str"");
    for (    Query q : constructionQueries) {
      getExecuter().executeOnly(q);
    }
    Log.info(""String_Node_Str"");
  }
}",0.9825021872265968
177692,"/** 
 * Makes name and column type bindings to given <code>field</code>. It also makes default name bindings to unnamed   {@link Index}es (or autoIncrement  {@link PrimaryKey} fields since it covers {@link Index})
 * @param entity used to generate index name if not specified.
 * @param field
 * @param namingPolicy
 * @param dataTypeMapper
 */
public static void makeBinding(Entity entity,Field field,PhysicalNamingPolicy namingPolicy,DataTypeMapper dataTypeMapper){
  if (field.getCustomName() != null) {
    Log.trace(""String_Node_Str"",entity.getOriginalName(),field.getOriginalName());
    field.setGeneratedName(field.getCustomName());
  }
 else {
    field.setGeneratedName(PhysicalNameGenerator.format(field.getOriginalName(),namingPolicy));
  }
  if (field.getCustomType() != null) {
    Log.trace(""String_Node_Str"",entity.getOriginalName(),field.getOriginalName());
    field.setType(field.getCustomType());
  }
 else {
    Class<?> fieldType=null;
    String customizedBindingType=null;
    if (field.isAnnotationPresent(OneToOne.class)) {
      Class<?> idType=getAutoIncrementTypeForClass(field.getClazz());
      fieldType=idType;
      customizedBindingType=getCustomizedBinding(field.getClazz());
      Log.trace(""String_Node_Str"",entity.getOriginalName(),field.getOriginalName());
    }
 else     if (MappingSession.entityExists(field.getClazz())) {
      Class<?> idType=getAutoIncrementTypeForClass(field.getClazz());
      fieldType=idType;
      if (idType == null) {
        throw new NotDeclaredIdException(field.getClazz().getName());
      }
      customizedBindingType=getCustomizedBinding(field.getClazz());
      Log.trace(""String_Node_Str"",entity.getOriginalName(),field.getOriginalName());
    }
 else {
      fieldType=field.getClazz();
    }
    if (customizedBindingType != null)     field.setType(customizedBindingType);
 else {
      if (fieldType.isEnum()) {
        field.setType(dataTypeMapper.getTypeFor(Enum.class));
      }
 else {
        field.setType(dataTypeMapper.getTypeFor(fieldType));
      }
    }
    Log.debug(""String_Node_Str"",field.getOriginalName(),field.getClazz().getName(),field.getGeneratedName(),field.getType(),customizedBindingType != null ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (field.getIndex() != null) {
    if (field.getIndex().name() == null || ""String_Node_Str"".equals(field.getIndex().name())) {
      String indexName=null;
      if (field.isPrimaryKey()) {
        indexName=String.format(COMPOSITE_INDEX_FORMAT,PhysicalNameGenerator.capitalize(entity.getGeneratedName()),INDEX_POSTFIX);
      }
 else {
        indexName=String.format(FIELD_INDEX_FORMAT,PhysicalNameGenerator.capitalize(entity.getGeneratedName()),PhysicalNameGenerator.capitalize(field.getGeneratedName()),INDEX_POSTFIX);
      }
      Log.trace(""String_Node_Str"",field.getOriginalName(),indexName);
      field.getIndex().name(indexName);
    }
  }
}","/** 
 * Makes name and column type bindings to given <code>field</code>. It also makes default name bindings to unnamed   {@link Index}es (or autoIncrement  {@link PrimaryKey} fields since it covers {@link Index})
 * @param entity used to generate index name if not specified.
 * @param field
 * @param namingPolicy
 * @param dataTypeMapper
 */
public static void makeBinding(Entity entity,Field field,PhysicalNamingPolicy namingPolicy,DataTypeMapper dataTypeMapper){
  if (field.getCustomName() != null) {
    Log.trace(""String_Node_Str"",entity.getOriginalName(),field.getOriginalName());
    field.setGeneratedName(field.getCustomName());
  }
 else {
    field.setGeneratedName(PhysicalNameGenerator.format(field.getOriginalName(),namingPolicy));
  }
  if (field.getCustomType() != null) {
    Log.trace(""String_Node_Str"",entity.getOriginalName(),field.getOriginalName());
    field.setType(field.getCustomType());
  }
 else {
    Class<?> fieldType=null;
    String customizedBindingType=null;
    if (field.isAnnotationPresent(OneToOne.class)) {
      Class<?> idType=getAutoIncrementTypeForClass(field.getClazz());
      fieldType=idType;
      customizedBindingType=getCustomizedBinding(field.getClazz());
      Log.trace(""String_Node_Str"",entity.getOriginalName(),field.getOriginalName());
    }
 else     if (MappingSession.entityExists(field.getClazz())) {
      Class<?> idType=getAutoIncrementTypeForClass(field.getClazz());
      fieldType=idType;
      if (idType == null) {
        throw new NotDeclaredIdException(field.getClazz().getName());
      }
      customizedBindingType=getCustomizedBinding(field.getClazz());
      Log.trace(""String_Node_Str"",entity.getOriginalName(),field.getOriginalName());
    }
 else {
      fieldType=field.getClazz();
    }
    if (customizedBindingType != null)     field.setType(customizedBindingType);
 else {
      if (fieldType != null)       if (fieldType.isEnum()) {
        field.setType(dataTypeMapper.getTypeFor(Enum.class));
      }
 else {
        field.setType(dataTypeMapper.getTypeFor(fieldType));
      }
    }
    Log.debug(""String_Node_Str"",field.getOriginalName(),field.getClazz().getName(),field.getGeneratedName(),field.getType(),customizedBindingType != null ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (field.getIndex() != null) {
    if (field.getIndex().name() == null || ""String_Node_Str"".equals(field.getIndex().name())) {
      String indexName=null;
      if (field.isPrimaryKey()) {
        indexName=String.format(COMPOSITE_INDEX_FORMAT,PhysicalNameGenerator.capitalize(entity.getGeneratedName()),INDEX_POSTFIX);
      }
 else {
        indexName=String.format(FIELD_INDEX_FORMAT,PhysicalNameGenerator.capitalize(entity.getGeneratedName()),PhysicalNameGenerator.capitalize(field.getGeneratedName()),INDEX_POSTFIX);
      }
      Log.trace(""String_Node_Str"",field.getOriginalName(),indexName);
      field.getIndex().name(indexName);
    }
  }
}",0.9950282873307046
177693,"/** 
 * Formats given <code>originalName</code> to some other physical name using given <code>policy</code>.
 * @param originalName of the field, table or anything else.
 * @param policy physical naming configuration
 * @return converted name
 */
public static String format(String originalName,PhysicalNamingPolicy policy){
  if (!policy.isUnderscore()) {
    originalName=_toCamelCase(originalName);
  }
 else {
    originalName=camelCaseTo_(originalName);
  }
  if (policy.isUppercase()) {
    originalName=originalName.toUpperCase();
  }
 else   if (!policy.isUppercase() && !policy.isCamelCase()) {
    originalName=originalName.toLowerCase();
  }
  if (policy.isPluralize()) {
    originalName=pluralize(originalName);
  }
  return originalName;
}","/** 
 * Formats given <code>originalName</code> to some other physical name using given <code>policy</code>.
 * @param originalName of the field, table or anything else.
 * @param policy physical naming configuration
 * @return converted name
 */
public static String format(String originalName,PhysicalNamingPolicy policy){
  if (policy.isPluralize()) {
    originalName=pluralize(originalName);
  }
  if (!policy.isUnderscore()) {
    originalName=_toCamelCase(originalName);
  }
 else {
    originalName=camelCaseTo_(originalName);
  }
  if (policy.isUppercase()) {
    originalName=originalName.toUpperCase();
  }
 else   if (!policy.isUppercase() && !policy.isCamelCase()) {
    originalName=originalName.toLowerCase();
  }
  return originalName;
}",0.8764940239043825
177694,"/** 
 * Overrides lowercase policy.
 * @param camelCase
 */
public void camelCase(boolean camelCase){
  this.camelCase=camelCase;
}","/** 
 * Overrides lowercase policy.
 * @param camelCase
 */
public PhysicalNamingPolicy camelCase(boolean camelCase){
  this.camelCase=camelCase;
  return this;
}",0.8805460750853242
177695,"private static Class<?> getIdTypeForClass(Class<?> clazz){
  getIdFieldForClass(clazz).getType();
  return null;
}","private static Class<?> getIdTypeForClass(Class<?> clazz){
  return getIdFieldForClass(clazz).getType();
}",0.9
177696,"/** 
 * Makes name and column type bindings to given <code>field</code>. It also makes default name bindings to unnamed   {@link Index}es (or   {@link Id} fieldssince it covers  {@link Index})
 * @param entity used to generate index name if not specified.
 * @param field
 * @param namingPolicy
 * @param dataTypeMapper
 */
public static void makeBinding(Entity entity,Field field,PhysicalNamingPolicy namingPolicy,DataTypeMapper dataTypeMapper){
  if (field.getCustomName() != null) {
    Log.trace(""String_Node_Str"",entity.getOriginalName(),field.getOriginalName());
    field.setGeneratedName(field.getCustomName());
  }
 else {
    field.setGeneratedName(PhysicalNameGenerator.format(field.getOriginalName(),namingPolicy));
  }
  if (field.getCustomType() != null) {
    Log.trace(""String_Node_Str"",entity.getOriginalName(),field.getOriginalName());
    field.setType(field.getCustomType());
  }
 else {
    Class<?> fieldType=null;
    String customizedBindingType=null;
    if (field.isAnnotationPresent(OneToOne.class)) {
      Class<?> idType=getIdTypeForClass(field.getClazz());
      fieldType=idType;
      customizedBindingType=getCustomizedBinding(field.getClazz());
      Log.trace(""String_Node_Str"",entity.getOriginalName(),field.getOriginalName());
    }
 else     if (MappingSession.entityExists(field.getClazz())) {
      Class<?> idType=getIdTypeForClass(field.getClazz());
      fieldType=idType;
      Log.trace(""String_Node_Str"",entity.getOriginalName(),field.getOriginalName());
    }
 else {
      fieldType=field.getClazz();
    }
    if (customizedBindingType != null)     field.setType(customizedBindingType);
 else     field.setType(dataTypeMapper.getTypeFor(fieldType));
    Log.info(""String_Node_Str"",field.getOriginalName(),field.getClazz().getName(),field.getGeneratedName(),field.getType());
  }
  if (field.getIndex() != null) {
    if (field.getIndex().name() == null || ""String_Node_Str"".equals(field.getIndex().name())) {
      String indexName=String.format(INDEX_FORMAT,entity.getGeneratedName(),field.getGeneratedName(),INDEX_POSTFIX);
      Log.info(""String_Node_Str"",field.getOriginalName(),indexName);
      field.getIndex().name(indexName);
    }
  }
}","/** 
 * Makes name and column type bindings to given <code>field</code>. It also makes default name bindings to unnamed   {@link Index}es (or   {@link Id} fieldssince it covers  {@link Index})
 * @param entity used to generate index name if not specified.
 * @param field
 * @param namingPolicy
 * @param dataTypeMapper
 */
public static void makeBinding(Entity entity,Field field,PhysicalNamingPolicy namingPolicy,DataTypeMapper dataTypeMapper){
  if (field.getCustomName() != null) {
    Log.trace(""String_Node_Str"",entity.getOriginalName(),field.getOriginalName());
    field.setGeneratedName(field.getCustomName());
  }
 else {
    field.setGeneratedName(PhysicalNameGenerator.format(field.getOriginalName(),namingPolicy));
  }
  if (field.getCustomType() != null) {
    Log.trace(""String_Node_Str"",entity.getOriginalName(),field.getOriginalName());
    field.setType(field.getCustomType());
  }
 else {
    Class<?> fieldType=null;
    String customizedBindingType=null;
    if (MappingSession.entityExists(field.getClazz())) {
      Class<?> idType=getIdTypeForClass(field.getClazz());
      fieldType=idType;
      Log.error(fieldType);
      customizedBindingType=getCustomizedBinding(field.getClazz());
      Log.trace(""String_Node_Str"",entity.getOriginalName(),field.getOriginalName());
    }
 else     if (field.isAnnotationPresent(OneToOne.class)) {
      Class<?> idType=getIdTypeForClass(field.getClazz());
      fieldType=idType;
      customizedBindingType=getCustomizedBinding(field.getClazz());
      Log.trace(""String_Node_Str"",entity.getOriginalName(),field.getOriginalName());
    }
 else {
      fieldType=field.getClazz();
    }
    if (customizedBindingType != null)     field.setType(customizedBindingType);
 else     field.setType(dataTypeMapper.getTypeFor(fieldType));
    Log.info(""String_Node_Str"",field.getOriginalName(),field.getClazz().getName(),field.getGeneratedName(),field.getType(),customizedBindingType != null ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  if (field.getIndex() != null) {
    if (field.getIndex().name() == null || ""String_Node_Str"".equals(field.getIndex().name())) {
      String indexName=String.format(INDEX_FORMAT,entity.getGeneratedName(),field.getGeneratedName(),INDEX_POSTFIX);
      Log.info(""String_Node_Str"",field.getOriginalName(),indexName);
      field.getIndex().name(indexName);
    }
  }
}",0.9267222465993856
177697,"private static java.lang.reflect.Field getIdFieldForClass(Class<?> clazz){
  for (  java.lang.reflect.Field f : clazz.getDeclaredFields())   if (f.isAnnotationPresent(Id.class))   return f;
  return null;
}","private static java.lang.reflect.Field getIdFieldForClass(Class<?> clazz){
  for (  java.lang.reflect.Field f : clazz.getDeclaredFields()) {
    if (f.isAnnotationPresent(Id.class)) {
      return f;
    }
  }
  return null;
}",0.9537037037037036
177698,"public Log4jAdapter(){
  BasicConfigurator.configure();
  Logger.getLogger(FRAMEWORK_LOGGER_NAME);
}","public Log4jAdapter(){
  BasicConfigurator.configure();
  logger=Logger.getLogger(FRAMEWORK_LOGGER_NAME);
}",0.966183574879227
177699,"public static void main(String[] args){
  Database db=new SQLite(""String_Node_Str"");
  MappingSession.registerDatabase(db);
  MappingSession.registerEntity(User.class);
  MappingSession.registerEntity(Notebook.class);
  MappingSession.getConfiguration().setCreationPolicy(SchemeCreationPolicy.USE_EXISTING);
  MappingSession.start();
  User a=new User();
  Notebook n=new Notebook();
  n.insert();
  a.bookOfUser=n;
  a.insert();
  n.name=a.id + ""String_Node_Str"";
  n.update();
  Query custom=ModelQuery.select().from(User.class).where(C.gt(User.class,""String_Node_Str"",0)).getQuery();
  List<User> l=Model.fetchQuery(custom,User.class);
  System.out.println(l);
}","public static void main(String[] args){
  Database db=new SQLite(""String_Node_Str"");
  MappingSession.registerDatabase(db);
  MappingSession.registerEntity(User.class);
  MappingSession.registerEntity(Notebook.class);
  MappingSession.getConfiguration().setCreationPolicy(SchemeCreationPolicy.USE_EXISTING);
  MappingSession.start();
  Query custom=ModelQuery.select().from(User.class).getQuery();
  List<User> l=Model.fetchQuery(custom,User.class);
  System.out.println(l);
}",0.7572304995617879
177700,"/** 
 * Extracts declared non-<code>transient</code> fields of a given Entity. Makes  property bindings for fields using their annotations and checks for their getter-and setters (finds them automatically) if they are non-public fields.
 * @return fields of this class.
 */
@SuppressWarnings(""String_Node_Str"") private List<Field> extractFields(){
  this.fields.clear();
  for (  java.lang.reflect.Field f : this.clazz.getDeclaredFields()) {
    if (!Modifier.isTransient(f.getModifiers())) {
      Class<?> fieldType=f.getType();
      boolean isList=false;
      if (fieldType.equals(List.class) || fieldType.equals(ArrayList.class) || fieldType.equals(LinkedList.class)) {
        if (f.isAnnotationPresent(OneToMany.class)) {
          fieldType=f.getAnnotation(OneToMany.class).toType();
        }
 else {
          throw new UnannotatedCollectionFieldException(f.getName(),this.clazz.getName());
        }
        isList=true;
      }
      Field newF=new Field(fieldType,f.getName());
      if (isList)       newF.setList(true);
      int accessibility=f.getModifiers();
      if (!(Modifier.isPublic(accessibility))) {
        Method setter=this.findSetterFor(this.clazz,f.getName());
        if (setter == null)         throw new NotDeclaredSetterException(f.getName(),this.clazz.getName());
 else         newF.setSetterMethod(setter);
        Method getter=this.findGetterFor(this.clazz,f.getName());
        if (getter == null)         throw new NotDeclaredGetterException(f.getName(),this.clazz.getName());
 else         newF.setGetterMethod(getter);
      }
      if (f.isAnnotationPresent(Index.class)) {
        Index ann=f.getAnnotation(Index.class);
        newF.setIndex(new FieldIndexHolder(ann.name(),ann.unique()));
        newF.setNullable(false);
      }
      if (f.isAnnotationPresent(NotNull.class)) {
        newF.setNullable(false);
      }
      if (f.isAnnotationPresent(Id.class)) {
        newF.makeId(true);
        if (!isSupportedForIdField(f.getType())) {
          throw new UnsupportedIdFieldTypeException(f.getType().getName(),clazz.getName());
        }
        if (newF.getIndex() == null)         newF.setIndex(new FieldIndexHolder(null,true));
      }
      if (f.isAnnotationPresent(OneToOne.class)) {
        if (newF.getIndex() == null)         newF.setIndex(new FieldIndexHolder(null,true));
      }
      if (f.isAnnotationPresent(ManyToOne.class)) {
        if (newF.getIndex() == null)         newF.setIndex(new FieldIndexHolder(null,false));
      }
      newF.setRawField(f);
      fields.add(newF);
    }
  }
  return this.fields;
}","/** 
 * Extracts declared non-<code>transient</code> fields of a given Entity. Makes  property bindings for fields using their annotations and checks for their getter-and setters (finds them automatically) if they are non-public fields.
 * @return fields of this class.
 */
@SuppressWarnings(""String_Node_Str"") private List<Field> extractFields(){
  this.fields.clear();
  for (  java.lang.reflect.Field f : this.clazz.getDeclaredFields()) {
    if (!Modifier.isTransient(f.getModifiers())) {
      Class<?> fieldType=f.getType();
      boolean isList=false;
      if (fieldType.equals(List.class) || fieldType.equals(ArrayList.class) || fieldType.equals(LinkedList.class)) {
        if (f.isAnnotationPresent(OneToMany.class)) {
          fieldType=f.getAnnotation(OneToMany.class).toType();
        }
 else {
          throw new UnannotatedCollectionFieldException(f.getName(),this.clazz.getName());
        }
        isList=true;
      }
      Field newF=new Field(fieldType,f);
      if (isList)       newF.setList(true);
      int accessibility=f.getModifiers();
      if (!(Modifier.isPublic(accessibility))) {
        Method setter=this.findSetterFor(this.clazz,f.getName());
        if (setter == null)         throw new NotDeclaredSetterException(f.getName(),this.clazz.getName());
 else         newF.setSetterMethod(setter);
        Method getter=this.findGetterFor(this.clazz,f.getName());
        if (getter == null)         throw new NotDeclaredGetterException(f.getName(),this.clazz.getName());
 else         newF.setGetterMethod(getter);
      }
      if (f.isAnnotationPresent(Index.class)) {
        Index ann=f.getAnnotation(Index.class);
        newF.setIndex(new FieldIndexHolder(ann.name(),ann.unique()));
        newF.setNullable(false);
      }
      if (f.isAnnotationPresent(NotNull.class)) {
        newF.setNullable(false);
      }
      if (f.isAnnotationPresent(Id.class)) {
        newF.makeId(true);
        if (!isSupportedForIdField(f.getType())) {
          throw new UnsupportedIdFieldTypeException(f.getType().getName(),clazz.getName());
        }
        if (newF.getIndex() == null)         newF.setIndex(new FieldIndexHolder(null,true));
      }
      if (f.isAnnotationPresent(OneToOne.class)) {
        if (newF.getIndex() == null)         newF.setIndex(new FieldIndexHolder(null,true));
      }
      if (f.isAnnotationPresent(ManyToOne.class)) {
        if (newF.getIndex() == null)         newF.setIndex(new FieldIndexHolder(null,false));
      }
      newF.setRawField(f);
      fields.add(newF);
    }
  }
  return this.fields;
}",0.998062015503876
177701,"public Field(Class<?> clazz,String name){
  this.clazz=clazz;
  this.originalName=name;
  if (clazz.isAnnotationPresent(Column.class)) {
    String tmpCustomName=clazz.getAnnotation(Column.class).name();
    String tmpCustomType=clazz.getAnnotation(Column.class).type();
    this.customName=(tmpCustomName == null || ""String_Node_Str"".equals(tmpCustomName)) ? null : tmpCustomName;
    this.customType=(tmpCustomType == null || ""String_Node_Str"".equals(tmpCustomType)) ? null : tmpCustomType;
  }
}","public Field(Class<?> clazz,java.lang.reflect.Field fieldInstance){
  this.clazz=clazz;
  this.originalName=fieldInstance.getName();
  if (fieldInstance.isAnnotationPresent(Column.class)) {
    Column col=fieldInstance.getAnnotation(Column.class);
    String tmpCustomName=col.name();
    String tmpCustomType=col.type();
    this.customName=(tmpCustomName == null || ""String_Node_Str"".equals(tmpCustomName)) ? null : tmpCustomName;
    this.customType=(tmpCustomType == null || ""String_Node_Str"".equals(tmpCustomType)) ? null : tmpCustomType;
  }
}",0.7793696275071633
177702,"/** 
 * Saves the persistent instance to the database ""if changes are made on it"". If no changes are made, no queries will be executed.
 */
public void update(){
  Query q=prepareUpdateQuery();
  MappingSession.getExecuter().executeOnly(q);
  makePersistent();
}","/** 
 * Saves the persistent instance to the database ""if changes are made on it"". If no changes are made, no queries will be executed.
 */
public void update(){
  Query q=prepareUpdateQuery();
  if (q != null)   MappingSession.getExecuter().executeOnly(q);
  makePersistent();
}",0.9685767097966728
177703,"public static void main(String[] args){
  MappingSession.registerEntity(User.class);
  MappingSession.start();
  User u=new User();
  u.insert();
  u.id=5;
  u.setLastName(""String_Node_Str"");
  u.update();
  u.id=6;
  u.update();
  u.delete();
  ModelQuery q=ModelQuery.type(QueryType.SELECT);
  q.from(User.class).orderBy(""String_Node_Str"");
  System.out.println(q.getQuery());
}","public static void main(String[] args){
  MappingSession.registerEntity(User.class);
  MappingSession.start();
  User u=new User();
  u.setLastName(""String_Node_Str"");
  u.insert();
  u.setLastName(""String_Node_Str"");
  u.update();
  System.out.println();
  ModelQuery q=ModelQuery.type(QueryType.SELECT);
  q.fromAs(User.class,""String_Node_Str"").orderBy(""String_Node_Str"").where(C.and(C.eq(User.class,""String_Node_Str"",10),C.between(User.class,""String_Node_Str"",3,""String_Node_Str"")));
  System.out.println(q.getQuery());
}",0.6902654867256637
177704,"public static Criterion like(Field field,Object pattern){
  return C.like(formatField(field),pattern);
}","public static Criterion like(Class<?> entityClass,String fieldName,Object pattern){
  return C.like(F.field(entityClass,fieldName),pattern);
}",0.7723577235772358
177705,"public static Criterion in(Field field,Object val){
  return C.in(formatField(field),val);
}","public static Criterion in(Class<?> entityClass,String fieldName,Object set){
  return C.in(F.field(entityClass,fieldName),set);
}",0.6936936936936937
177706,"public static Criterion notBetween(Field field,Object l,Object h){
  return C.notBetween(formatField(field),l,h);
}","public static Criterion notBetween(Class<?> entityClass,String fieldName,Object l,Object h){
  return C.notBetween(F.field(entityClass,fieldName),l,h);
}",0.7910447761194029
177707,"public static Criterion lt(Field field,Object val){
  return C.lt(formatField(field),val);
}","public static Criterion lt(Class<?> entityClass,String fieldName,Object val){
  return C.lt(F.field(entityClass,fieldName),val);
}",0.7477477477477478
177708,"public static Criterion eq(Field field,Object val){
  return C.eq(formatField(field),val);
}","public static Criterion eq(Class<?> entityClass,String fieldName,Object val){
  return C.eq(F.field(entityClass,fieldName),val);
}",0.7477477477477478
177709,"public static Criterion gt(Field field,Object val){
  return C.gt(formatField(field),val);
}","public static Criterion gt(Class<?> entityClass,String fieldName,Object val){
  return C.gt(F.field(entityClass,fieldName),val);
}",0.7477477477477478
177710,"public static Criterion geq(Field field,Object val){
  return C.geq(formatField(field),val);
}","public static Criterion geq(Class<?> entityClass,String fieldName,Object val){
  return C.geq(F.field(entityClass,fieldName),val);
}",0.7522123893805309
177711,"public static Criterion notLike(Field field,Object pattern){
  return C.notLike(formatField(field),pattern);
}","public static Criterion notLike(Class<?> entityClass,String fieldName,Object pattern){
  return C.notLike(F.field(entityClass,fieldName),pattern);
}",0.7829457364341085
177712,"public static Criterion leq(Field field,Object val){
  return C.leq(formatField(field),val);
}","public static Criterion leq(Class<?> entityClass,String fieldName,Object val){
  return C.leq(F.field(entityClass,fieldName),val);
}",0.7522123893805309
177713,"public static Criterion notIn(Field field,Object val){
  return C.notIn(formatField(field),val);
}","public static Criterion notIn(Class<?> entityClass,String fieldName,Object set){
  return C.notIn(F.field(entityClass,fieldName),set);
}",0.7094017094017094
177714,"public static Criterion notEq(Field field,Object val){
  return C.notEq(formatField(field),val);
}","public static Criterion notEq(Class<?> entityClass,String fieldName,Object val){
  return C.notEq(F.field(entityClass,fieldName),val);
}",0.7606837606837606
177715,"public static Criterion between(Field field,Object l,Object h){
  return C.between(formatField(field),l,h);
}","public static Criterion between(Class<?> entityClass,String fieldName,Object l,Object h){
  return C.between(F.field(entityClass,fieldName),l,h);
}",0.78125
177716,"public static Query createTableQuery(Entity e){
  if (e.getGeneratedName() == null) {
    throw new UnmappedEntityException(e.getOriginalFullName());
  }
  QueryBuilder qb=QueryBuilder.getBuilder(QueryType.CREATE_TABLE);
  qb.from(e.getGeneratedName());
  for (  Field f : e.getFields()) {
    if (f.getGeneratedName() == null || f.getType() == null) {
      throw new UnmappedFieldException(f.getOriginalName() + ""String_Node_Str"" + e.getOriginalName()+ ""String_Node_Str"");
    }
    qb.createColumn(f.getGeneratedName(),f.getType());
  }
  return qb.getQuery();
}","public static Query createTableQuery(Entity e){
  if (e.getGeneratedName() == null) {
    throw new UnmappedEntityException(e.getOriginalFullName());
  }
  QueryBuilder qb=QueryBuilder.getBuilder(QueryType.CREATE_TABLE);
  qb.from(e.getGeneratedName());
  for (  Field f : e.getFields()) {
    if (f.getGeneratedName() == null || f.getType() == null) {
      throw new UnmappedFieldException(f.getOriginalName() + ""String_Node_Str"" + e.getOriginalName()+ ""String_Node_Str"");
    }
    qb.createColumn(f.getGeneratedName(),f.getType(),f.isNullable());
  }
  return qb.getQuery();
}",0.9868995633187772
177717,"@SuppressWarnings(""String_Node_Str"") private List<Field> extractFields(){
  this.fields.clear();
  for (  java.lang.reflect.Field f : this.clazz.getDeclaredFields()) {
    if (!Modifier.isTransient(f.getModifiers())) {
      Field newF=new Field(f.getType(),f.getName());
      int accessibility=f.getModifiers();
      if (!(Modifier.isPublic(accessibility))) {
        Method setter=this.findSetterFor(this.clazz,f.getName());
        if (setter == null)         throw new NotDeclaredSetterException(f.getName(),this.clazz.getName());
 else         newF.setSetterMethod(setter);
        Method getter=this.findGetterFor(this.clazz,f.getName());
        if (getter == null)         throw new NotDeclaredGetterException(f.getName(),this.clazz.getName());
 else         newF.setGetterMethod(getter);
      }
      if (f.isAnnotationPresent(Index.class)) {
        Index ann=f.getAnnotation(Index.class);
        newF.setIndex(new FieldIndexHolder(ann.name(),ann.unique()));
      }
      if (f.isAnnotationPresent(Id.class)) {
        newF.makeId(true);
        if (!isSupportedForIdField(f.getType()))         throw new UnsupportedIdFieldTypeException(f.getType().getName());
        if (newF.getIndex() == null)         newF.setIndex(new FieldIndexHolder(null,true));
      }
      fields.add(newF);
    }
  }
  return this.fields;
}","@SuppressWarnings(""String_Node_Str"") private List<Field> extractFields(){
  this.fields.clear();
  for (  java.lang.reflect.Field f : this.clazz.getDeclaredFields()) {
    if (!Modifier.isTransient(f.getModifiers())) {
      Field newF=new Field(f.getType(),f.getName());
      int accessibility=f.getModifiers();
      if (!(Modifier.isPublic(accessibility))) {
        Method setter=this.findSetterFor(this.clazz,f.getName());
        if (setter == null)         throw new NotDeclaredSetterException(f.getName(),this.clazz.getName());
 else         newF.setSetterMethod(setter);
        Method getter=this.findGetterFor(this.clazz,f.getName());
        if (getter == null)         throw new NotDeclaredGetterException(f.getName(),this.clazz.getName());
 else         newF.setGetterMethod(getter);
      }
      if (f.isAnnotationPresent(Index.class)) {
        Index ann=f.getAnnotation(Index.class);
        newF.setIndex(new FieldIndexHolder(ann.name(),ann.unique()));
      }
      if (f.isAnnotationPresent(NotNull.class)) {
        newF.setNullable(false);
      }
      if (f.isAnnotationPresent(Id.class)) {
        newF.makeId(true);
        if (!isSupportedForIdField(f.getType()))         throw new UnsupportedIdFieldTypeException(f.getType().getName());
        if (newF.getIndex() == null)         newF.setIndex(new FieldIndexHolder(null,true));
      }
      fields.add(newF);
    }
  }
  return this.fields;
}",0.9670170351576658
177718,"private Query prepareUpdateQuery(){
  List<Field> updatedFields=new ArrayList<Field>();
  List<Field> fields=getEntity().getFields();
  for (int i=0; i < __persistencyFieldHashes.length; i++) {
    Object o=getEntityField(fields.get(i),getEntity(),this);
    if (((o == null) ? DEFAULT_TRANSIENT_HASHCODE : o.hashCode()) != __persistencyFieldHashes[i])     updatedFields.add(fields.get(i));
  }
  if (!updatedFields.isEmpty()) {
    QueryBuilder qb=QueryBuilder.update().from(getEntity().getGeneratedName());
    for (    Field f : updatedFields) {
      qb.set(f.getGeneratedName(),getEntityField(f,getEntity(),this));
    }
    qb.where(C.eq(getEntity().getIdField().getGeneratedName(),__persistencyId));
    return qb.getQuery();
  }
 else   return null;
}","private Query prepareUpdateQuery(){
  List<Field> updatedFields=new ArrayList<Field>();
  List<Field> fields=getEntity().getFields();
  for (int i=0; i < __persistencyFieldHashes.length; i++) {
    Object o=getEntityField(fields.get(i),getEntity(),this);
    if (((o == null) ? DEFAULT_TRANSIENT_HASHCODE : o.hashCode()) != __persistencyFieldHashes[i])     updatedFields.add(fields.get(i));
  }
  if (!updatedFields.isEmpty()) {
    QueryBuilder qb=QueryBuilder.update().from(getEntity().getGeneratedName());
    for (    Field f : updatedFields) {
      Object fieldVal=getEntityField(f,getEntity(),this);
      if (!f.isNullable() && fieldVal == null)       throw new NotNullableFieldException(getEntity().getOriginalFullName(),f.getOriginalName());
      qb.set(f.getGeneratedName(),fieldVal);
    }
    qb.where(C.eq(getEntity().getIdField().getGeneratedName(),__persistencyId));
    return qb.getQuery();
  }
 else   return null;
}",0.855457227138643
177719,"private Query prepareInsertQuery(){
  QueryBuilder qb=QueryBuilder.insert();
  qb.from(getEntity().getGeneratedName());
  for (  Field f : getEntity().getFields()) {
    boolean useField=true;
    if (f.isId()) {
      IdGenerationPolicy policy=MappingSession.getConfiguration().getIdGenerationPolicy();
      if (policy == IdGenerationPolicy.ORMAN_ID_GENERATOR)       setEntityField(f,getEntity(),this,NativeIdGenerator.generate(f,this));
      if (policy == IdGenerationPolicy.DEFER_TO_DBMS)       useField=false;
    }
    if (useField)     qb.set(f.getGeneratedName(),getEntityField(f,getEntity(),this));
  }
  return qb.getQuery();
}","private Query prepareInsertQuery(){
  QueryBuilder qb=QueryBuilder.insert();
  qb.from(getEntity().getGeneratedName());
  for (  Field f : getEntity().getFields()) {
    boolean useField=true;
    if (f.isId()) {
      IdGenerationPolicy policy=MappingSession.getConfiguration().getIdGenerationPolicy();
      if (policy == IdGenerationPolicy.ORMAN_ID_GENERATOR)       setEntityField(f,getEntity(),this,NativeIdGenerator.generate(f,this));
      if (policy == IdGenerationPolicy.DEFER_TO_DBMS)       useField=false;
    }
    if (useField) {
      Object fieldVal=getEntityField(f,getEntity(),this);
      if (!f.isNullable() && fieldVal == null)       throw new NotNullableFieldException(getEntity().getOriginalFullName(),f.getOriginalName());
      qb.set(f.getGeneratedName(),fieldVal);
    }
  }
  return qb.getQuery();
}",0.8229665071770335
177720,"public Entity(Class<?> clazz){
  if (!clazz.isAnnotationPresent(org.orman.mapper.annotation.Entity.class))   throw new NotAnEntityException();
  this.clazz=clazz;
  this.originalName=clazz.getSimpleName();
  this.originalFullName=clazz.getName();
  this.fields=new EntityInspector(clazz).getFields();
  String tmpCustomName=clazz.getAnnotation(org.orman.mapper.annotation.Entity.class).table();
  this.customName=(tmpCustomName == null || ""String_Node_Str"".equals(tmpCustomName)) ? null : tmpCustomName;
}","public Entity(Class<?> clazz){
  if (!clazz.isAnnotationPresent(org.orman.mapper.annotation.Entity.class))   throw new NotAnEntityException(clazz.getName());
  this.clazz=clazz;
  this.originalName=clazz.getSimpleName();
  this.originalFullName=clazz.getName();
  this.fields=new EntityInspector(clazz).getFields();
  String tmpCustomName=clazz.getAnnotation(org.orman.mapper.annotation.Entity.class).table();
  this.customName=(tmpCustomName == null || ""String_Node_Str"".equals(tmpCustomName)) ? null : tmpCustomName;
}",0.9853658536585366
177721,"private List<Field> extractFields(){
  this.fields.clear();
  for (  java.lang.reflect.Field f : this.clazz.getDeclaredFields()) {
    if (!Modifier.isTransient(f.getModifiers())) {
      fields.add(new Field(f.getType(),f.getName()));
    }
  }
  return this.fields;
}","private List<Field> extractFields(){
  this.fields.clear();
  for (  java.lang.reflect.Field f : this.clazz.getDeclaredFields()) {
    if (!Modifier.isTransient(f.getModifiers())) {
      Field newF=new Field(f.getType(),f.getName());
      if (f.isAnnotationPresent(Index.class)) {
        Index ann=f.getAnnotation(Index.class);
        newF.setIndex(new FieldIndexHolder(ann.name(),ann.unique()));
      }
      fields.add(newF);
    }
  }
  return this.fields;
}",0.6938775510204082
177722,"/** 
 * Makes name and type bindings to entity and its fields then registers to the scheme.
 * @param entityClass
 */
public void registerEntity(Class<?> entityClass){
  Entity e=new Entity(entityClass);
  for (  Field f : e.getFields()) {
    PhysicalNameAndTypeBindingEngine.makeBinding(f,configuration.getColumnNamePolicy(),typeMapper);
  }
  scheme.checkConflictingFields(e);
  PhysicalNameAndTypeBindingEngine.makeBinding(e,configuration.getTableNamePolicy());
  scheme.addEntity(e);
}","/** 
 * Makes name and type bindings to entity and its fields then registers to the scheme.
 * @param entityClass
 * @return scheme props-binded entity  
 */
public Entity registerEntity(Class<?> entityClass){
  Entity e=new Entity(entityClass);
  for (  Field f : e.getFields()) {
    PhysicalNameAndTypeBindingEngine.makeBinding(f,configuration.getColumnNamePolicy(),typeMapper);
  }
  scheme.checkConflictingFields(e);
  PhysicalNameAndTypeBindingEngine.makeBinding(e,configuration.getTableNamePolicy());
  scheme.addEntity(e);
  return e;
}",0.9400386847195358
177723,"private Entity getEntityByTableName(String tblName){
  return this.tableNames.get(tblName);
}","public Entity getEntityByTableName(String tblName){
  return this.tableNames.get(tblName);
}",0.9513513513513514
177724,"public static void makeBinding(Field field,PhysicalNamingPolicy namingPolicy,DataTypeMapper dataTypeMapper){
  if (field.getCustomName() != null) {
    field.setGeneratedName(field.getCustomName());
  }
 else {
    field.setGeneratedName(PhysicalNameGenerator.format(field.getOriginalName(),namingPolicy));
  }
  if (field.getCustomType() != null) {
    field.setType(field.getCustomType());
  }
 else {
    field.setType(dataTypeMapper.getTypeFor(field.getClazz()));
  }
}","public static void makeBinding(Field field,PhysicalNamingPolicy namingPolicy,DataTypeMapper dataTypeMapper){
  if (field.getCustomName() != null) {
    field.setGeneratedName(field.getCustomName());
  }
 else {
    field.setGeneratedName(PhysicalNameGenerator.format(field.getOriginalName(),namingPolicy));
  }
  if (field.getCustomType() != null) {
    field.setType(field.getCustomType());
  }
 else {
    field.setType(dataTypeMapper.getTypeFor(field.getClazz()));
  }
  if (field.getIndex() != null) {
    if (field.getIndex().name() == null || ""String_Node_Str"".equals(field.getIndex().name())) {
      field.getIndex().name(field.getGeneratedName() + INDEX_POSTFIX);
    }
  }
}",0.8176318063958513
177725,"private static final String camelCaseTo_(String s){
  List<String> parts=new ArrayList<String>();
  ;
  int onUpperFor=0;
  int firstUpper=0;
  for (int i=0; i < s.length(); i++) {
    if (Character.isUpperCase(s.charAt(i))) {
      if (onUpperFor == 0) {
        if (i > 0) {
          parts.add(s.substring(firstUpper,i));
        }
        firstUpper=i;
      }
      onUpperFor++;
    }
 else {
      if (onUpperFor > 1) {
        parts.add(s.substring(firstUpper,firstUpper + onUpperFor - 1));
        firstUpper+=onUpperFor - 1;
      }
      onUpperFor=0;
    }
  }
  if (firstUpper < s.length()) {
    parts.add(s.substring(firstUpper,s.length()));
  }
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < parts.size(); i++) {
    sb.append(parts);
    if (i != parts.size() - 1)     sb.append(""String_Node_Str"");
  }
  return sb.toString();
}","private static final String camelCaseTo_(String s){
  List<String> parts=new ArrayList<String>();
  ;
  int onUpperFor=0;
  int firstUpper=0;
  for (int i=0; i < s.length(); i++) {
    if (Character.isUpperCase(s.charAt(i))) {
      if (onUpperFor == 0) {
        if (i > 0) {
          parts.add(s.substring(firstUpper,i));
        }
        firstUpper=i;
      }
      onUpperFor++;
    }
 else {
      if (onUpperFor > 1) {
        parts.add(s.substring(firstUpper,firstUpper + onUpperFor - 1));
        firstUpper+=onUpperFor - 1;
      }
      onUpperFor=0;
    }
  }
  if (firstUpper < s.length()) {
    parts.add(s.substring(firstUpper,s.length()));
  }
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < parts.size(); i++) {
    sb.append(parts.get(i));
    if (i != parts.size() - 1)     sb.append(""String_Node_Str"");
  }
  return sb.toString();
}",0.995937318630296
177726,"@Override public String getMessage(){
  return message;
}","@Override public String getMessage(){
  return String.format(message,this.s);
}",0.8382352941176471
177727,"public Query addTable(String tableName,String as){
  if (as == null || ""String_Node_Str"".equals(as))   as=acquireTableAlias(tableName);
  Table newTable=new Table(tableName,as);
  tables.add(newTable);
  return this;
}","public Query addTable(String tableName,String as){
  if (as == null || ""String_Node_Str"".equals(as))   as=acquireTableAlias(tableName);
  System.out.println(""String_Node_Str"" + as);
  Table newTable=new Table(tableName,as);
  newTable.setHandle(as);
  tables.add(newTable);
  return this;
}",0.8582677165354331
177728,"@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  Options options=new Options();
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(COLLECTION_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(ID_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(OUTPUT_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(MISSING_OPTION));
  CommandLine cmdline=null;
  CommandLineParser parser=new GnuParser();
  try {
    cmdline=parser.parse(options,args);
  }
 catch (  ParseException exp) {
    System.err.println(""String_Node_Str"" + exp.getMessage());
    System.exit(-1);
  }
  if (!cmdline.hasOption(COLLECTION_OPTION) || !cmdline.hasOption(ID_OPTION) || !cmdline.hasOption(OUTPUT_OPTION)|| !cmdline.hasOption(MISSING_OPTION)) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(ExtractSubcollection.class.getName(),options);
    System.exit(-1);
  }
  String outputFile=cmdline.getOptionValue(OUTPUT_OPTION);
  String collectionPath=cmdline.getOptionValue(COLLECTION_OPTION);
  LongOpenHashSet tweetids=new LongOpenHashSet();
  File tweetidsFile=new File(cmdline.getOptionValue(ID_OPTION));
  if (!tweetidsFile.exists()) {
    System.err.println(""String_Node_Str"" + tweetidsFile + ""String_Node_Str"");
    System.exit(-1);
  }
  LOG.info(""String_Node_Str"" + tweetidsFile);
  FileInputStream fin=new FileInputStream(tweetidsFile);
  BufferedReader br=new BufferedReader(new InputStreamReader(fin));
  String s;
  while ((s=br.readLine()) != null) {
    tweetids.add(Long.parseLong(s));
  }
  br.close();
  fin.close();
  LOG.info(""String_Node_Str"" + tweetids.size() + ""String_Node_Str"");
  File file=new File(collectionPath);
  if (!file.exists()) {
    System.err.println(""String_Node_Str"" + file + ""String_Node_Str"");
    System.exit(-1);
  }
  LongOpenHashSet seen=new LongOpenHashSet();
  Writer out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile),""String_Node_Str""));
  StatusStream stream=new JsonStatusCorpusReader(file);
  Status status;
  while ((status=stream.next()) != null) {
    if (tweetids.contains(status.getId()) && !seen.contains(status.getId())) {
      out.write(status.getJsonObject().toString() + ""String_Node_Str"");
      seen.add(status.getId());
    }
  }
  stream.close();
  out.close();
  LOG.info(""String_Node_Str"" + seen.size() + ""String_Node_Str"");
  LOG.info(""String_Node_Str"");
  out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile),""String_Node_Str""));
  LongIterator iter=tweetids.iterator();
  while (iter.hasNext()) {
    long t=iter.nextLong();
    if (!seen.contains(t)) {
      out.write(t + ""String_Node_Str"");
    }
  }
  out.close();
  LOG.info(""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  Options options=new Options();
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(COLLECTION_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(ID_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(OUTPUT_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(MISSING_OPTION));
  CommandLine cmdline=null;
  CommandLineParser parser=new GnuParser();
  try {
    cmdline=parser.parse(options,args);
  }
 catch (  ParseException exp) {
    System.err.println(""String_Node_Str"" + exp.getMessage());
    System.exit(-1);
  }
  if (!cmdline.hasOption(COLLECTION_OPTION) || !cmdline.hasOption(ID_OPTION) || !cmdline.hasOption(OUTPUT_OPTION)|| !cmdline.hasOption(MISSING_OPTION)) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(ExtractSubcollection.class.getName(),options);
    System.exit(-1);
  }
  String outputFile=cmdline.getOptionValue(OUTPUT_OPTION);
  String missingFile=cmdline.getOptionValue(MISSING_OPTION);
  String collectionPath=cmdline.getOptionValue(COLLECTION_OPTION);
  LongOpenHashSet tweetids=new LongOpenHashSet();
  File tweetidsFile=new File(cmdline.getOptionValue(ID_OPTION));
  if (!tweetidsFile.exists()) {
    System.err.println(""String_Node_Str"" + tweetidsFile + ""String_Node_Str"");
    System.exit(-1);
  }
  LOG.info(""String_Node_Str"" + tweetidsFile);
  FileInputStream fin=new FileInputStream(tweetidsFile);
  BufferedReader br=new BufferedReader(new InputStreamReader(fin));
  String s;
  while ((s=br.readLine()) != null) {
    tweetids.add(Long.parseLong(s));
  }
  br.close();
  fin.close();
  LOG.info(""String_Node_Str"" + tweetids.size() + ""String_Node_Str"");
  File file=new File(collectionPath);
  if (!file.exists()) {
    System.err.println(""String_Node_Str"" + file + ""String_Node_Str"");
    System.exit(-1);
  }
  LongOpenHashSet seen=new LongOpenHashSet();
  Writer out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile),""String_Node_Str""));
  StatusStream stream=new JsonStatusCorpusReader(file);
  Status status;
  while ((status=stream.next()) != null) {
    if (tweetids.contains(status.getId()) && !seen.contains(status.getId())) {
      out.write(status.getJsonObject().toString() + ""String_Node_Str"");
      seen.add(status.getId());
    }
  }
  stream.close();
  out.close();
  LOG.info(""String_Node_Str"" + seen.size() + ""String_Node_Str"");
  LOG.info(""String_Node_Str"");
  out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(missingFile),""String_Node_Str""));
  LongIterator iter=tweetids.iterator();
  while (iter.hasNext()) {
    long t=iter.nextLong();
    if (!seen.contains(t)) {
      out.write(t + ""String_Node_Str"");
    }
  }
  out.close();
  LOG.info(""String_Node_Str"");
}",0.98784494086728
177729,"public static void main(String[] args) throws NumberFormatException, TException, UnsupportedEncodingException {
  ParameterBroker params=new ParameterBroker(""String_Node_Str"");
  PrintStream out=new PrintStream(System.out,true,""String_Node_Str"");
  PrintStream err=new PrintStream(System.err,true,""String_Node_Str"");
  GQueries trainingQueries=new GQueriesJsonImpl();
  trainingQueries.setMetadataField(""String_Node_Str"");
  trainingQueries.read(params.getParamValue(TRAINING_QUERIES));
  GQueries queries=new GQueriesJsonImpl();
  queries.setMetadataField(""String_Node_Str"");
  queries.read(params.getParamValue(QUERIES_OPTION));
  Qrels qrels=new Qrels(params.getParamValue(QRELS_OPTION),false,1);
  int numResults=1000;
  try {
    if (params.getParamValue(NUM_RESULTS_OPTION) != null) {
      numResults=Integer.parseInt(params.getParamValue(NUM_RESULTS_OPTION));
    }
  }
 catch (  NumberFormatException e) {
    err.println(""String_Node_Str"" + NUM_RESULTS_OPTION + ""String_Node_Str""+ params.getParamValue(NUM_RESULTS_OPTION));
    System.exit(-1);
  }
  String group=params.getParamValue(GROUP_OPTION);
  if (group == null) {
    err.println(""String_Node_Str"" + GROUP_OPTION + ""String_Node_Str"");
    System.exit(-1);
  }
  String token=params.getParamValue(TOKEN_OPTION);
  if (group == null) {
    err.println(""String_Node_Str"" + TOKEN_OPTION + ""String_Node_Str"");
    System.exit(-1);
  }
  int trainingPort=9090;
  try {
    if (params.getParamValue(TRAINING_PORT) != null) {
      trainingPort=Integer.parseInt(params.getParamValue(TRAINING_PORT));
    }
  }
 catch (  NumberFormatException e) {
    err.println(""String_Node_Str"" + TRAINING_PORT + ""String_Node_Str""+ params.getParamValue(TRAINING_PORT));
    System.exit(-1);
  }
  int testingPort=9091;
  try {
    if (params.getParamValue(TESTING_PORT) != null) {
      testingPort=Integer.parseInt(params.getParamValue(TESTING_PORT));
    }
  }
 catch (  NumberFormatException e) {
    err.println(""String_Node_Str"" + TESTING_PORT + ""String_Node_Str""+ params.getParamValue(TESTING_PORT));
    System.exit(-1);
  }
  String runTag=params.getParamValue(RUNTAG_OPTION);
  if (runTag == null) {
    runTag=DEFAULT_RUNTAG;
  }
  double stepSize=0.1;
  try {
    if (params.getParamValue(JACCARD_STEP_SIZE) != null) {
      stepSize=Double.parseDouble(params.getParamValue(JACCARD_STEP_SIZE));
    }
  }
 catch (  NumberFormatException e) {
    err.println(""String_Node_Str"" + JACCARD_STEP_SIZE + ""String_Node_Str""+ params.getParamValue(JACCARD_STEP_SIZE));
    System.exit(-1);
  }
  String evalType=""String_Node_Str"";
  try {
    if (params.getParamValue(EVALUATION_OPTION) != null) {
      evalType=params.getParamValue(EVALUATION_OPTION);
    }
  }
 catch (  Exception e) {
    err.println(""String_Node_Str"" + EVALUATION_OPTION + ""String_Node_Str""+ params.getParamValue(EVALUATION_OPTION));
    System.exit(-1);
  }
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  String trainingFile=params.getParamValue(TRAINING_CLUSTERS);
  if (trainingFile == null) {
    err.println(""String_Node_Str"" + TRAINING_CLUSTERS + ""String_Node_Str"");
    System.exit(-1);
  }
  Map<String,Clusters> clusterMembership=new HashMap<String,Clusters>();
  JSONParser parser=new JSONParser();
  try {
    JSONObject parseObj=(JSONObject)parser.parse(new FileReader(trainingFile));
    JSONObject topicObj=(JSONObject)parseObj.get(""String_Node_Str"");
    Set<String> topics=topicObj.keySet();
    Iterator<String> topicIt=topics.iterator();
    while (topicIt.hasNext()) {
      String topic=topicIt.next();
      clusterMembership.put(topic,new Clusters());
      JSONArray clusters=(JSONArray)((JSONObject)topicObj.get(topic)).get(""String_Node_Str"");
      Iterator<JSONArray> clusterIt=clusters.iterator();
      while (clusterIt.hasNext()) {
        JSONArray cluster=(JSONArray)clusterIt.next();
        Cluster c=new Cluster();
        Iterator<String> clusterMemberIt=cluster.iterator();
        while (clusterMemberIt.hasNext()) {
          String member=clusterMemberIt.next();
          long memberId=Long.parseLong(member);
          c.add(memberId);
        }
        clusterMembership.get(topic).add(c);
      }
    }
  }
 catch (  Exception e) {
    err.println(""String_Node_Str"");
    e.printStackTrace();
    System.exit(-1);
  }
  TrecSearchThriftClient client=new TrecSearchThriftClient(params.getParamValue(HOST_OPTION),trainingPort,group,token);
  SimpleSearcher searcher=new SimpleSearcher(client,numResults);
  err.println(""String_Node_Str"");
  List<Double> thresholds=new ArrayList<Double>();
  double averageThreshold=0;
  Iterator<GQuery> queryIterator=trainingQueries.iterator();
  while (queryIterator.hasNext()) {
    GQuery query=queryIterator.next();
    Map<Long,TResult> seenResults=searcher.search(query);
    SimpleJaccardClusterer clusterer=new SimpleJaccardClusterer(new ArrayList<TResult>(seenResults.values()));
    double maxF1=0;
    double maxF1Threshold=1;
    for (double j=1.0; j >= 0.0; j-=stepSize) {
      Clusters clusters=clusterer.cluster(j);
      Set<Long> allResults=new HashSet<Long>(seenResults.keySet());
      allResults.removeAll(clusters.getAllClusteredResults());
      for (      Cluster c : clusters) {
        allResults.add(c.getFirstMember());
      }
      Clusters seenClusters=new Clusters();
      Clusters trueClusters=clusterMembership.get(query.getTitle());
      Iterator<Long> resultIt=allResults.iterator();
      while (resultIt.hasNext()) {
        long result=resultIt.next();
        Cluster trueCluster=trueClusters.findCluster(result);
        if (trueCluster != null) {
          seenClusters.add(trueCluster);
        }
      }
      int numRetrievedClusters=seenClusters.size();
      int numResultsReturned=allResults.size();
      int numTrueClusters=trueClusters.size();
      double precision=0;
      double recall=0;
      double f1=0;
      if (evalType.equals(""String_Node_Str"")) {
        precision=numRetrievedClusters / (double)numResultsReturned;
        recall=numRetrievedClusters / (double)numTrueClusters;
        f1=2 * precision * recall / (precision + recall);
      }
 else {
        int retrievedWeight=0;
        for (        Cluster cluster : seenClusters) {
          int w=cluster.getWeight(query,qrels);
          retrievedWeight+=w;
        }
        int resultsWeight=0;
        for (        long result : allResults) {
          int w=0;
          if (seenClusters.findCluster(result) == null)           resultsWeight+=w;
        }
        int trueWeight=0;
        for (        Cluster cluster : trueClusters) {
          int w=cluster.getWeight(query,qrels);
          trueWeight+=w;
        }
        precision=retrievedWeight / (double)resultsWeight;
        recall=retrievedWeight / (double)trueWeight;
        f1=2 * precision * recall / (precision + recall);
      }
      if (f1 > maxF1) {
        maxF1=f1;
        maxF1Threshold=j;
      }
    }
    thresholds.add(maxF1);
    err.println(""String_Node_Str"" + df.format(maxF1) + ""String_Node_Str""+ df.format(maxF1Threshold));
  }
  for (  double threshold : thresholds) {
    averageThreshold+=threshold;
  }
  averageThreshold/=thresholds.size();
  err.println(""String_Node_Str"" + averageThreshold);
  err.println(""String_Node_Str"");
  queryIterator=queries.iterator();
  while (queryIterator.hasNext()) {
    GQuery query=queryIterator.next();
    err.println(query.getTitle());
    client=new TrecSearchThriftClient(params.getParamValue(HOST_OPTION),testingPort,group,token);
    searcher=new SimpleSearcher(client,numResults);
    Map<Long,TResult> seenResults=searcher.search(query);
    SimpleJaccardClusterer clusterer=new SimpleJaccardClusterer(new ArrayList<TResult>(seenResults.values()));
    Clusters clusters=clusterer.cluster(averageThreshold);
    Set<Long> allResults=new HashSet<Long>(seenResults.keySet());
    allResults.removeAll(clusters.getAllClusteredResults());
    for (    Cluster c : clusters) {
      allResults.add(c.getFirstMember());
    }
    int i=0;
    for (    long result : allResults) {
      TResult hit=seenResults.get(result);
      out.println(String.format(""String_Node_Str"",query.getTitle(),hit.getId(),i,hit.getRsv(),runTag));
      i++;
    }
  }
  out.close();
  err.close();
}","public static void main(String[] args) throws NumberFormatException, TException, UnsupportedEncodingException {
  ParameterBroker params=new ParameterBroker(""String_Node_Str"");
  PrintStream out=new PrintStream(System.out,true,""String_Node_Str"");
  PrintStream err=new PrintStream(System.err,true,""String_Node_Str"");
  GQueries trainingQueries=new GQueriesJsonImpl();
  trainingQueries.setMetadataField(""String_Node_Str"");
  trainingQueries.read(params.getParamValue(TRAINING_QUERIES));
  GQueries queries=new GQueriesJsonImpl();
  queries.setMetadataField(""String_Node_Str"");
  queries.read(params.getParamValue(QUERIES_OPTION));
  Qrels qrels=new Qrels(params.getParamValue(QRELS_OPTION),false,1);
  int numResults=1000;
  try {
    if (params.getParamValue(NUM_RESULTS_OPTION) != null) {
      numResults=Integer.parseInt(params.getParamValue(NUM_RESULTS_OPTION));
    }
  }
 catch (  NumberFormatException e) {
    err.println(""String_Node_Str"" + NUM_RESULTS_OPTION + ""String_Node_Str""+ params.getParamValue(NUM_RESULTS_OPTION));
    System.exit(-1);
  }
  String group=params.getParamValue(GROUP_OPTION);
  if (group == null) {
    err.println(""String_Node_Str"" + GROUP_OPTION + ""String_Node_Str"");
    System.exit(-1);
  }
  String token=params.getParamValue(TOKEN_OPTION);
  if (group == null) {
    err.println(""String_Node_Str"" + TOKEN_OPTION + ""String_Node_Str"");
    System.exit(-1);
  }
  int trainingPort=9090;
  try {
    if (params.getParamValue(TRAINING_PORT) != null) {
      trainingPort=Integer.parseInt(params.getParamValue(TRAINING_PORT));
    }
  }
 catch (  NumberFormatException e) {
    err.println(""String_Node_Str"" + TRAINING_PORT + ""String_Node_Str""+ params.getParamValue(TRAINING_PORT));
    System.exit(-1);
  }
  int testingPort=9091;
  try {
    if (params.getParamValue(TESTING_PORT) != null) {
      testingPort=Integer.parseInt(params.getParamValue(TESTING_PORT));
    }
  }
 catch (  NumberFormatException e) {
    err.println(""String_Node_Str"" + TESTING_PORT + ""String_Node_Str""+ params.getParamValue(TESTING_PORT));
    System.exit(-1);
  }
  String runTag=params.getParamValue(RUNTAG_OPTION);
  if (runTag == null) {
    runTag=DEFAULT_RUNTAG;
  }
  double stepSize=0.1;
  try {
    if (params.getParamValue(JACCARD_STEP_SIZE) != null) {
      stepSize=Double.parseDouble(params.getParamValue(JACCARD_STEP_SIZE));
    }
  }
 catch (  NumberFormatException e) {
    err.println(""String_Node_Str"" + JACCARD_STEP_SIZE + ""String_Node_Str""+ params.getParamValue(JACCARD_STEP_SIZE));
    System.exit(-1);
  }
  String evalType=""String_Node_Str"";
  try {
    if (params.getParamValue(EVALUATION_OPTION) != null) {
      evalType=params.getParamValue(EVALUATION_OPTION);
    }
  }
 catch (  Exception e) {
    err.println(""String_Node_Str"" + EVALUATION_OPTION + ""String_Node_Str""+ params.getParamValue(EVALUATION_OPTION));
    System.exit(-1);
  }
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  String trainingFile=params.getParamValue(TRAINING_CLUSTERS);
  if (trainingFile == null) {
    err.println(""String_Node_Str"" + TRAINING_CLUSTERS + ""String_Node_Str"");
    System.exit(-1);
  }
  Map<String,Clusters> clusterMembership=new HashMap<String,Clusters>();
  JSONParser parser=new JSONParser();
  try {
    JSONObject parseObj=(JSONObject)parser.parse(new FileReader(trainingFile));
    JSONObject topicObj=(JSONObject)parseObj.get(""String_Node_Str"");
    Set<String> topics=topicObj.keySet();
    Iterator<String> topicIt=topics.iterator();
    while (topicIt.hasNext()) {
      String topic=topicIt.next();
      clusterMembership.put(topic,new Clusters());
      JSONArray clusters=(JSONArray)((JSONObject)topicObj.get(topic)).get(""String_Node_Str"");
      Iterator<JSONArray> clusterIt=clusters.iterator();
      while (clusterIt.hasNext()) {
        JSONArray cluster=(JSONArray)clusterIt.next();
        Cluster c=new Cluster();
        Iterator<String> clusterMemberIt=cluster.iterator();
        while (clusterMemberIt.hasNext()) {
          String member=clusterMemberIt.next();
          long memberId=Long.parseLong(member);
          c.add(memberId);
        }
        clusterMembership.get(topic).add(c);
      }
    }
  }
 catch (  Exception e) {
    err.println(""String_Node_Str"");
    e.printStackTrace();
    System.exit(-1);
  }
  TrecSearchThriftClient client=new TrecSearchThriftClient(params.getParamValue(HOST_OPTION),trainingPort,group,token);
  SimpleSearcher searcher=new SimpleSearcher(client,numResults);
  err.println(""String_Node_Str"");
  List<Double> thresholds=new ArrayList<Double>();
  double averageThreshold=0;
  Iterator<GQuery> queryIterator=trainingQueries.iterator();
  while (queryIterator.hasNext()) {
    GQuery query=queryIterator.next();
    Map<Long,TResult> seenResults=searcher.search(query);
    SimpleJaccardClusterer clusterer=new SimpleJaccardClusterer(new ArrayList<TResult>(seenResults.values()));
    double maxF1=0;
    double maxF1Threshold=1;
    for (double j=1.0; j >= 0.0; j-=stepSize) {
      Clusters clusters=clusterer.cluster(j);
      Set<Long> allResults=new HashSet<Long>(seenResults.keySet());
      allResults.removeAll(clusters.getAllClusteredResults());
      for (      Cluster c : clusters) {
        allResults.add(c.getFirstMember());
      }
      Clusters seenClusters=new Clusters();
      Clusters trueClusters=clusterMembership.get(query.getTitle());
      Iterator<Long> resultIt=allResults.iterator();
      while (resultIt.hasNext()) {
        long result=resultIt.next();
        Cluster trueCluster=trueClusters.findCluster(result);
        if (trueCluster != null) {
          seenClusters.add(trueCluster);
        }
      }
      int numRetrievedClusters=seenClusters.size();
      int numResultsReturned=allResults.size();
      int numTrueClusters=trueClusters.size();
      double precision=0;
      double recall=0;
      double f1=0;
      if (evalType.equals(""String_Node_Str"")) {
        precision=numRetrievedClusters / (double)numResultsReturned;
        recall=numRetrievedClusters / (double)numTrueClusters;
        f1=2 * precision * recall / (precision + recall);
      }
 else {
        int retrievedWeight=0;
        for (        Cluster cluster : seenClusters) {
          int w=cluster.getWeight(query,qrels);
          retrievedWeight+=w;
        }
        int resultsWeight=0;
        for (        long result : allResults) {
          int w=0;
          if (seenClusters.findCluster(result) == null)           resultsWeight+=w;
        }
        int trueWeight=0;
        for (        Cluster cluster : trueClusters) {
          int w=cluster.getWeight(query,qrels);
          trueWeight+=w;
        }
        precision=retrievedWeight / (double)resultsWeight;
        recall=retrievedWeight / (double)trueWeight;
        f1=2 * precision * recall / (precision + recall);
      }
      if (f1 > maxF1) {
        maxF1=f1;
        maxF1Threshold=j;
      }
    }
    thresholds.add(maxF1Threshold);
    err.println(""String_Node_Str"" + df.format(maxF1) + ""String_Node_Str""+ df.format(maxF1Threshold));
  }
  for (  double threshold : thresholds) {
    averageThreshold+=threshold;
  }
  averageThreshold/=thresholds.size();
  err.println(""String_Node_Str"" + averageThreshold);
  err.println(""String_Node_Str"");
  queryIterator=queries.iterator();
  while (queryIterator.hasNext()) {
    GQuery query=queryIterator.next();
    err.println(query.getTitle());
    client=new TrecSearchThriftClient(params.getParamValue(HOST_OPTION),testingPort,group,token);
    searcher=new SimpleSearcher(client,numResults);
    Map<Long,TResult> seenResults=searcher.search(query);
    SimpleJaccardClusterer clusterer=new SimpleJaccardClusterer(new ArrayList<TResult>(seenResults.values()));
    Clusters clusters=clusterer.cluster(averageThreshold);
    Set<Long> allResults=new HashSet<Long>(seenResults.keySet());
    allResults.removeAll(clusters.getAllClusteredResults());
    for (    Cluster c : clusters) {
      allResults.add(c.getFirstMember());
    }
    int i=0;
    for (    long result : allResults) {
      TResult hit=seenResults.get(result);
      out.println(String.format(""String_Node_Str"",query.getTitle(),hit.getId(),i,hit.getRsv(),runTag));
      i++;
    }
  }
  out.close();
  err.close();
}",0.9994543801151864
177730,"public JsonObject extractTweet(String html){
  JsonObject status=new JsonObject();
  Document doc=Jsoup.parse(html);
  Element tweet_div=doc.select(""String_Node_Str"").first();
  String tweet_text=doc.select(""String_Node_Str"").first().text();
  status.addProperty(""String_Node_Str"",tweet_text);
  String tweet_id=tweet_div.attr(""String_Node_Str"");
  status.addProperty(""String_Node_Str"",tweet_id);
  status.addProperty(""String_Node_Str"",Long.parseLong(tweet_id));
  String timestamp=doc.select(""String_Node_Str"").first().attr(""String_Node_Str"");
  Date created_at=new Date();
  created_at.setTime(Long.parseLong(timestamp) * 1000);
  status.addProperty(""String_Node_Str"",date_fmt.format(created_at));
  Elements js_stats_retweets=doc.select(""String_Node_Str"");
  if (!js_stats_retweets.isEmpty()) {
    status.addProperty(""String_Node_Str"",true);
    String count=js_stats_retweets.select(""String_Node_Str"").first().text();
    status.addProperty(""String_Node_Str"",Long.parseLong(count));
  }
 else {
    status.addProperty(""String_Node_Str"",false);
    status.addProperty(""String_Node_Str"",0);
  }
  Elements js_stats_favs=doc.select(""String_Node_Str"");
  status.addProperty(""String_Node_Str"",!js_stats_favs.isEmpty());
  JsonObject user=new JsonObject();
  String user_id=tweet_div.attr(""String_Node_Str"");
  user.addProperty(""String_Node_Str"",user_id);
  user.addProperty(""String_Node_Str"",Long.parseLong(user_id));
  String screen_name=tweet_div.attr(""String_Node_Str"");
  user.addProperty(""String_Node_Str"",screen_name);
  String user_name=tweet_div.attr(""String_Node_Str"");
  user.addProperty(""String_Node_Str"",user_name);
  status.add(""String_Node_Str"",user);
  return status;
}","public JsonObject extractTweet(String html){
  JsonObject status=new JsonObject();
  Document doc=Jsoup.parse(html);
  Element tweet_div=doc.select(""String_Node_Str"").first();
  String tweet_text=tweet_div.select(""String_Node_Str"").first().text();
  status.addProperty(""String_Node_Str"",tweet_text);
  String tweet_id=tweet_div.attr(""String_Node_Str"");
  status.addProperty(""String_Node_Str"",tweet_id);
  status.addProperty(""String_Node_Str"",Long.parseLong(tweet_id));
  String timestamp=doc.select(""String_Node_Str"").first().attr(""String_Node_Str"");
  Date created_at=new Date();
  created_at.setTime(Long.parseLong(timestamp) * 1000);
  status.addProperty(""String_Node_Str"",date_fmt.format(created_at));
  Elements js_stats_retweets=doc.select(""String_Node_Str"");
  if (!js_stats_retweets.isEmpty()) {
    status.addProperty(""String_Node_Str"",true);
    String count=js_stats_retweets.select(""String_Node_Str"").first().text();
    status.addProperty(""String_Node_Str"",Long.parseLong(count));
  }
 else {
    status.addProperty(""String_Node_Str"",false);
    status.addProperty(""String_Node_Str"",0);
  }
  Elements js_stats_favs=doc.select(""String_Node_Str"");
  status.addProperty(""String_Node_Str"",!js_stats_favs.isEmpty());
  JsonObject user=new JsonObject();
  String user_id=tweet_div.attr(""String_Node_Str"");
  user.addProperty(""String_Node_Str"",user_id);
  user.addProperty(""String_Node_Str"",Long.parseLong(user_id));
  String screen_name=tweet_div.attr(""String_Node_Str"");
  user.addProperty(""String_Node_Str"",screen_name);
  String user_name=tweet_div.attr(""String_Node_Str"");
  user.addProperty(""String_Node_Str"",user_name);
  status.add(""String_Node_Str"",user);
  return status;
}",0.996443390634262
177731,"/** 
 * Check if the character at position i in the buffer is a delimiter which wouldn't be used as part of an entity
 */
public boolean isNonentityDelimiter(int i){
  final char[] buffer=termAtt.buffer();
  final int bufferLength=termAtt.length();
switch (buffer[i]) {
case '-':
case '?':
case '!':
case ',':
case ';':
case ':':
case '(':
case ')':
case '[':
case ']':
case '/':
case '\\':
    return true;
case '.':
  return (i >= 2 && buffer[i - 2] != '.') || ((i + 2) < bufferLength && buffer[i + 2] != '.');
}
return false;
}","/** 
 * Check if the character at position i in the buffer is a delimiter which wouldn't be used as part of an entity
 */
public boolean isNonentityDelimiter(int i){
  final char[] buffer=termAtt.buffer();
  final int bufferLength=termAtt.length();
switch (buffer[i]) {
case '[':
case ']':
case '!':
case '""':
case '$':
case '%':
case '(':
case ')':
case '*':
case '+':
case ',':
case '/':
case ':':
case ';':
case '<':
case '=':
case '>':
case '?':
case '\\':
case '^':
case '`':
case '{':
case '|':
case '}':
case '~':
case '-':
case '…':
case '¬':
case '·':
    return true;
case '.':
  return (i >= 2 && buffer[i - 2] != '.') || ((i + 2) < bufferLength && buffer[i + 2] != '.');
case '&':
return i < 1 || (i + 1) >= bufferLength || Character.isLowerCase(buffer[i - 1]) || Character.isLowerCase(buffer[i + 1]);
}
return false;
}",0.6451138868479059
177732,"@Override public boolean incrementToken() throws IOException {
  if (tailBuffer == null && !input.incrementToken()) {
    return false;
  }
  final char[] buffer=termAtt.buffer();
  if (tailBuffer != null) {
    System.arraycopy(tailBuffer,0,buffer,0,tailBuffer.length);
    termAtt.setLength(tailBuffer.length);
    tailBuffer=null;
  }
  int entityType=isEntity(termAtt.toString());
  if (entityType == VALID_URL) {
    keywordAttr.setKeyword(true);
    return true;
  }
  for (int i=0; i < termAtt.length(); i++) {
    buffer[i]=Character.toLowerCase(buffer[i]);
  }
  if (entityType != INVALID_ENTITY) {
    if (isEntityDelimiter(0)) {
      keywordAttr.setKeyword(true);
      return true;
    }
    for (int i=0; i < termAtt.length(); i++) {
      if (isEntityDelimiter(i)) {
        tailBuffer=Arrays.copyOfRange(buffer,i,termAtt.length());
        termAtt.setLength(i);
        break;
      }
    }
  }
 else {
    for (int i=0; i < termAtt.length(); i++) {
      if (isNonentityDelimiter(i)) {
        tailBuffer=Arrays.copyOfRange(buffer,i + 1,termAtt.length());
        termAtt.setLength(i);
        break;
      }
    }
    if (isEntity(termAtt.toString()) != INVALID_ENTITY) {
      keywordAttr.setKeyword(true);
      return true;
    }
    for (int i=0; i < termAtt.length(); i++) {
      if (isEntityDelimiter(i)) {
        tailBuffer=Arrays.copyOfRange(buffer,i + 1,termAtt.length());
        termAtt.setLength(i);
        break;
      }
    }
  }
  removeNonAlphanumeric();
  return true;
}","@Override public boolean incrementToken() throws IOException {
  if (tailBuffer == null && tailBufferSaved == null && !input.incrementToken()) {
    return false;
  }
  final char[] buffer=termAtt.buffer();
  if (tailBuffer != null) {
    System.arraycopy(tailBuffer,0,buffer,0,tailBuffer.length);
    termAtt.setLength(tailBuffer.length);
    tailBuffer=null;
  }
 else   if (tailBufferSaved != null) {
    System.arraycopy(tailBufferSaved,0,buffer,0,tailBufferSaved.length);
    termAtt.setLength(tailBufferSaved.length);
    tailBufferSaved=null;
  }
  int entityType=isEntity(termAtt.toString());
  if (entityType == VALID_URL) {
    keywordAttr.setKeyword(true);
    return true;
  }
  if (entityType != INVALID_ENTITY) {
    for (int i=0; i < termAtt.length(); i++) {
      buffer[i]=Character.toLowerCase(buffer[i]);
    }
    if (isEntityDelimiter(0)) {
      keywordAttr.setKeyword(true);
      return true;
    }
    for (int i=0; i < termAtt.length(); i++) {
      if (isEntityDelimiter(i)) {
        tailBuffer=Arrays.copyOfRange(buffer,i,termAtt.length());
        termAtt.setLength(i);
        break;
      }
    }
  }
 else {
    for (int i=0; i < termAtt.length(); i++) {
      if (isNonentityDelimiter(i)) {
        tailBuffer=Arrays.copyOfRange(buffer,i + 1,termAtt.length());
        termAtt.setLength(i);
        break;
      }
    }
    if (isEntity(termAtt.toString()) != INVALID_ENTITY) {
      keywordAttr.setKeyword(true);
      for (int i=0; i < termAtt.length(); i++) {
        buffer[i]=Character.toLowerCase(buffer[i]);
      }
      return true;
    }
    for (int i=0; i < termAtt.length(); i++) {
      if (isEntityDelimiter(i)) {
        if (tailBuffer != null) {
          tailBufferSaved=tailBuffer;
        }
        tailBuffer=Arrays.copyOfRange(buffer,i + 1,termAtt.length());
        termAtt.setLength(i);
        break;
      }
    }
    for (int i=0; i < termAtt.length(); i++) {
      buffer[i]=Character.toLowerCase(buffer[i]);
    }
  }
  removeNonAlphanumeric();
  return true;
}",0.7859569648924122
177733,"@Test public void basic() throws Exception {
  Analyzer analyzer=new TweetAnalyzer(Version.LUCENE_41);
  String test1=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test1);
  String test2=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test2);
  String test3=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test3);
  String test5=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test5);
  String test6=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test6);
  String test7=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test7);
  String test8=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test8);
  String test10=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test10);
}","@Test public void basic() throws Exception {
  Analyzer analyzer=new TweetAnalyzer(Version.LUCENE_41);
  String test1=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test1);
  String test2=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test2);
  String test3=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test3);
  String test4=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test4);
  String test5=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test5);
  String test6=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test6);
  String test7=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test7);
  String test8=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test8);
  String test9=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test9);
  String test10=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test10);
  String test11=parseKeywords(analyzer,""String_Node_Str"");
  assertEquals(""String_Node_Str"",test11);
}",0.8572792362768497
177734,"public String parseKeywords(Analyzer analyzer,String keywords){
  StringBuilder sb=new StringBuilder();
  try {
    TokenStream tokenStream=analyzer.tokenStream(null,new StringReader(keywords));
    CharTermAttribute cattr=tokenStream.addAttribute(CharTermAttribute.class);
    tokenStream.reset();
    sb.append(""String_Node_Str"");
    while (tokenStream.incrementToken()) {
      if (cattr.toString().length() == 0)       continue;
      sb.append(cattr.toString());
      sb.append(""String_Node_Str"");
    }
    tokenStream.end();
    tokenStream.close();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return sb.toString();
}","public String parseKeywords(Analyzer analyzer,String keywords){
  System.out.println(keywords);
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  try {
    TokenStream tokenStream=analyzer.tokenStream(null,new StringReader(keywords));
    CharTermAttribute cattr=tokenStream.addAttribute(CharTermAttribute.class);
    tokenStream.reset();
    while (tokenStream.incrementToken()) {
      if (cattr.toString().length() == 0)       continue;
      sb.append(cattr.toString());
      sb.append(""String_Node_Str"");
    }
    tokenStream.end();
    tokenStream.close();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  System.out.println(sb + ""String_Node_Str"");
  return sb.toString();
}",0.9057706355003652
177735,"public long getRetweetedStatusId(){
  return retweetedStatusId;
}","public long getRetweetedStatusId(){
  return retweetStatusId;
}",0.984375
177736,"public static Status fromJson(String json){
  JsonObject obj=null;
  try {
    obj=(JsonObject)JSON_PARSER.parse(json);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  if (obj.get(""String_Node_Str"") == null) {
    return null;
  }
  Status status=new Status();
  status.text=obj.get(""String_Node_Str"").getAsString();
  status.id=obj.get(""String_Node_Str"").getAsLong();
  status.screenname=obj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsString();
  status.createdAt=obj.get(""String_Node_Str"").getAsString();
  try {
    status.epoch=(new SimpleDateFormat(DATE_FORMAT)).parse(status.createdAt).getTime() / 1000;
  }
 catch (  ParseException e) {
    status.epoch=-1L;
  }
  try {
    status.inReplyToStatusId=obj.get(""String_Node_Str"").getAsLong();
  }
 catch (  Exception e) {
    status.inReplyToStatusId=-1L;
  }
  try {
    status.inReplyToUserId=obj.get(""String_Node_Str"").getAsLong();
  }
 catch (  Exception e) {
    status.inReplyToUserId=-1L;
  }
  try {
    status.retweetedStatusId=obj.getAsJsonObject(""String_Node_Str"").get(""String_Node_Str"").getAsLong();
    status.retweetedUserId=obj.getAsJsonObject(""String_Node_Str"").get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsLong();
  }
 catch (  Exception e) {
    status.retweetedStatusId=-1L;
  }
  try {
    status.inReplyToUserId=obj.get(""String_Node_Str"").getAsLong();
  }
 catch (  Exception e) {
    status.retweetedUserId=-1L;
  }
  status.retweetCount=obj.get(""String_Node_Str"").getAsInt();
  try {
    status.lattitude=obj.getAsJsonObject(""String_Node_Str"").getAsJsonArray(""String_Node_Str"").get(0).getAsDouble();
    status.longitude=obj.getAsJsonObject(""String_Node_Str"").getAsJsonArray(""String_Node_Str"").get(1).getAsDouble();
  }
 catch (  Exception e) {
    status.lattitude=Double.NEGATIVE_INFINITY;
    status.longitude=Double.NEGATIVE_INFINITY;
  }
  try {
    status.lang=obj.get(""String_Node_Str"").getAsString();
  }
 catch (  Exception e) {
    status.lang=""String_Node_Str"";
  }
  status.followersCount=obj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsInt();
  status.friendsCount=obj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsInt();
  status.statusesCount=obj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsInt();
  status.jsonObject=obj;
  status.jsonString=json;
  return status;
}","public static Status fromJson(String json){
  JsonObject obj=null;
  try {
    obj=(JsonObject)JSON_PARSER.parse(json);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  if (obj.get(""String_Node_Str"") == null) {
    return null;
  }
  Status status=new Status();
  status.text=obj.get(""String_Node_Str"").getAsString();
  status.id=obj.get(""String_Node_Str"").getAsLong();
  status.screenname=obj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsString();
  status.createdAt=obj.get(""String_Node_Str"").getAsString();
  try {
    status.epoch=(new SimpleDateFormat(DATE_FORMAT)).parse(status.createdAt).getTime() / 1000;
  }
 catch (  ParseException e) {
    status.epoch=-1L;
  }
  try {
    status.inReplyToStatusId=obj.get(""String_Node_Str"").getAsLong();
  }
 catch (  Exception e) {
    status.inReplyToStatusId=-1L;
  }
  try {
    status.inReplyToUserId=obj.get(""String_Node_Str"").getAsLong();
  }
 catch (  Exception e) {
    status.inReplyToUserId=-1L;
  }
  try {
    status.retweetStatusId=obj.getAsJsonObject(""String_Node_Str"").get(""String_Node_Str"").getAsLong();
    status.retweetUserId=obj.getAsJsonObject(""String_Node_Str"").get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsLong();
  }
 catch (  Exception e) {
    status.retweetStatusId=-1L;
  }
  try {
    status.inReplyToUserId=obj.get(""String_Node_Str"").getAsLong();
  }
 catch (  Exception e) {
    status.retweetUserId=-1L;
  }
  status.retweetCount=obj.get(""String_Node_Str"").getAsInt();
  try {
    status.latitude=obj.getAsJsonObject(""String_Node_Str"").getAsJsonArray(""String_Node_Str"").get(1).getAsDouble();
    status.longitude=obj.getAsJsonObject(""String_Node_Str"").getAsJsonArray(""String_Node_Str"").get(0).getAsDouble();
  }
 catch (  Exception e) {
    status.latitude=Double.NEGATIVE_INFINITY;
    status.longitude=Double.NEGATIVE_INFINITY;
  }
  try {
    status.lang=obj.get(""String_Node_Str"").getAsString();
  }
 catch (  Exception e) {
    status.lang=""String_Node_Str"";
  }
  status.followersCount=obj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsInt();
  status.friendsCount=obj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsInt();
  status.statusesCount=obj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsInt();
  status.jsonObject=obj;
  status.jsonString=json;
  return status;
}",0.9497090606816292
177737,"public long getRetweetedUserId(){
  return retweetedUserId;
}","public long getRetweetedUserId(){
  return retweetUserId;
}",0.9833333333333332
177738,"@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  Options options=new Options();
  options.addOption(new Option(HELP_OPTION,""String_Node_Str""));
  options.addOption(new Option(JSON_OPTION,""String_Node_Str""));
  options.addOption(new Option(TSV_OPTION,""String_Node_Str""));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(COLLECTION_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(INDEX_OPTION));
  CommandLine cmdline=null;
  CommandLineParser parser=new GnuParser();
  try {
    cmdline=parser.parse(options,args);
  }
 catch (  ParseException exp) {
    System.err.println(""String_Node_Str"" + exp.getMessage());
    System.exit(-1);
  }
  if (cmdline.hasOption(HELP_OPTION) || !cmdline.hasOption(COLLECTION_OPTION) || !cmdline.hasOption(INDEX_OPTION)) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(IndexStatuses.class.getName(),options);
    System.exit(-1);
  }
  String collectionPath=cmdline.getOptionValue(COLLECTION_OPTION);
  String indexPath=cmdline.getOptionValue(INDEX_OPTION);
  long startTime=System.currentTimeMillis();
  StatusStream stream;
  File file=new File(collectionPath);
  if (!file.exists()) {
    System.err.println(""String_Node_Str"" + file + ""String_Node_Str"");
    System.exit(-1);
  }
  if (cmdline.hasOption(TSV_OPTION)) {
    stream=new TSVStatusCorpusReader(file);
  }
 else {
    stream=new JsonStatusCorpusReader(file);
  }
  Analyzer analyzer=new StandardAnalyzer(Version.LUCENE_41);
  Directory dir=FSDirectory.open(new File(indexPath));
  IndexWriterConfig config=new IndexWriterConfig(Version.LUCENE_41,analyzer);
  config.setOpenMode(OpenMode.CREATE);
  LOG.info(""String_Node_Str"" + collectionPath);
  LOG.info(""String_Node_Str"" + indexPath);
  IndexWriter writer=new IndexWriter(dir,config);
  int cnt=0;
  Status status;
  try {
    while ((status=stream.next()) != null) {
      if (status.getText() == null) {
        continue;
      }
      cnt++;
      Document doc=new Document();
      doc.add(new LongField(StatusField.ID.name,status.getId(),Field.Store.YES));
      doc.add(new LongField(StatusField.EPOCH.name,status.getEpoch(),Field.Store.YES));
      doc.add(new TextField(StatusField.SCREEN_NAME.name,status.getScreenname(),Store.YES));
      doc.add(new TextField(StatusField.CREATED_AT.name,status.getCreatedAt(),Store.YES));
      doc.add(new TextField(StatusField.TEXT.name,status.getText(),Store.YES));
      doc.add(new IntField(StatusField.RETWEET_COUNT.name,status.getRetweetCount(),Store.YES));
      long inReplyToStatusId=status.getInReplyToStatusId();
      if (inReplyToStatusId > 0) {
        doc.add(new LongField(StatusField.IN_REPLY_TO_STATUS_ID.name,inReplyToStatusId,Field.Store.YES));
        doc.add(new LongField(StatusField.IN_REPLY_TO_USER_ID.name,status.getInReplyToUserId(),Field.Store.YES));
      }
      String lang=status.getLang();
      if (!lang.equals(""String_Node_Str"")) {
        doc.add(new TextField(StatusField.LANG.name,status.getLang(),Store.YES));
      }
      double lattitude=status.getLattitude();
      if (!Double.isInfinite(lattitude)) {
        doc.add(new DoubleField(StatusField.LATTITUDE.name,lattitude,Field.Store.YES));
        doc.add(new DoubleField(StatusField.LONGITUDE.name,status.getLongitude(),Field.Store.YES));
      }
      long retweetStatusId=status.getRetweetedStatusId();
      if (retweetStatusId > 0) {
        doc.add(new LongField(StatusField.RETWEETED_STATUS_ID.name,retweetStatusId,Field.Store.YES));
        doc.add(new LongField(StatusField.RETWEETED_USER_ID.name,status.getRetweetedUserId(),Field.Store.YES));
      }
      doc.add(new IntField(StatusField.FRIENDS_COUNT.name,status.getFollowersCount(),Store.YES));
      doc.add(new IntField(StatusField.FOLLOWERS_COUNT.name,status.getFriendsCount(),Store.YES));
      doc.add(new IntField(StatusField.STATUSES_COUNT.name,status.getStatusesCount(),Store.YES));
      writer.addDocument(doc);
      if (cnt % 100000 == 0) {
        LOG.info(cnt + ""String_Node_Str"");
      }
    }
    LOG.info(String.format(""String_Node_Str"",cnt));
    LOG.info(""String_Node_Str"");
    writer.forceMerge(1);
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    writer.close();
    dir.close();
    stream.close();
  }
}","@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  Options options=new Options();
  options.addOption(new Option(HELP_OPTION,""String_Node_Str""));
  options.addOption(new Option(JSON_OPTION,""String_Node_Str""));
  options.addOption(new Option(TSV_OPTION,""String_Node_Str""));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(COLLECTION_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(INDEX_OPTION));
  CommandLine cmdline=null;
  CommandLineParser parser=new GnuParser();
  try {
    cmdline=parser.parse(options,args);
  }
 catch (  ParseException exp) {
    System.err.println(""String_Node_Str"" + exp.getMessage());
    System.exit(-1);
  }
  if (cmdline.hasOption(HELP_OPTION) || !cmdline.hasOption(COLLECTION_OPTION) || !cmdline.hasOption(INDEX_OPTION)) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(IndexStatuses.class.getName(),options);
    System.exit(-1);
  }
  String collectionPath=cmdline.getOptionValue(COLLECTION_OPTION);
  String indexPath=cmdline.getOptionValue(INDEX_OPTION);
  long startTime=System.currentTimeMillis();
  StatusStream stream;
  File file=new File(collectionPath);
  if (!file.exists()) {
    System.err.println(""String_Node_Str"" + file + ""String_Node_Str"");
    System.exit(-1);
  }
  if (cmdline.hasOption(TSV_OPTION)) {
    stream=new TSVStatusCorpusReader(file);
  }
 else {
    stream=new JsonStatusCorpusReader(file);
  }
  Analyzer analyzer=new StandardAnalyzer(Version.LUCENE_41);
  Directory dir=FSDirectory.open(new File(indexPath));
  IndexWriterConfig config=new IndexWriterConfig(Version.LUCENE_41,analyzer);
  config.setOpenMode(OpenMode.CREATE);
  LOG.info(""String_Node_Str"" + collectionPath);
  LOG.info(""String_Node_Str"" + indexPath);
  IndexWriter writer=new IndexWriter(dir,config);
  int cnt=0;
  Status status;
  try {
    while ((status=stream.next()) != null) {
      if (status.getText() == null) {
        continue;
      }
      cnt++;
      Document doc=new Document();
      doc.add(new LongField(StatusField.ID.name,status.getId(),Field.Store.YES));
      doc.add(new LongField(StatusField.EPOCH.name,status.getEpoch(),Field.Store.YES));
      doc.add(new TextField(StatusField.SCREEN_NAME.name,status.getScreenname(),Store.YES));
      doc.add(new TextField(StatusField.CREATED_AT.name,status.getCreatedAt(),Store.YES));
      doc.add(new TextField(StatusField.TEXT.name,status.getText(),Store.YES));
      doc.add(new IntField(StatusField.RETWEET_COUNT.name,status.getRetweetCount(),Store.YES));
      long inReplyToStatusId=status.getInReplyToStatusId();
      if (inReplyToStatusId > 0) {
        doc.add(new LongField(StatusField.IN_REPLY_TO_STATUS_ID.name,inReplyToStatusId,Field.Store.YES));
        doc.add(new LongField(StatusField.IN_REPLY_TO_USER_ID.name,status.getInReplyToUserId(),Field.Store.YES));
      }
      String lang=status.getLang();
      if (!lang.equals(""String_Node_Str"")) {
        doc.add(new TextField(StatusField.LANG.name,status.getLang(),Store.YES));
      }
      double latitude=status.getlatitude();
      if (!Double.isInfinite(latitude)) {
        doc.add(new DoubleField(StatusField.latitude.name,latitude,Field.Store.YES));
        doc.add(new DoubleField(StatusField.LONGITUDE.name,status.getLongitude(),Field.Store.YES));
      }
      doc.add(new IntField(StatusField.FRIENDS_COUNT.name,status.getFollowersCount(),Store.YES));
      doc.add(new IntField(StatusField.FOLLOWERS_COUNT.name,status.getFriendsCount(),Store.YES));
      doc.add(new IntField(StatusField.STATUSES_COUNT.name,status.getStatusesCount(),Store.YES));
      writer.addDocument(doc);
      if (cnt % 100000 == 0) {
        LOG.info(cnt + ""String_Node_Str"");
      }
    }
    LOG.info(String.format(""String_Node_Str"",cnt));
    LOG.info(""String_Node_Str"");
    writer.forceMerge(1);
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    writer.close();
    dir.close();
    stream.close();
  }
}",0.9390216154721274
177739,"public int compareTo(TResult other){
  if (!getClass().equals(other.getClass())) {
    return getClass().getName().compareTo(other.getClass().getName());
  }
  int lastComparison=0;
  TResult typedOther=(TResult)other;
  lastComparison=Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetId()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.id,typedOther.id);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetRsv()).compareTo(typedOther.isSetRsv());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetRsv()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.rsv,typedOther.rsv);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetScreen_name()).compareTo(typedOther.isSetScreen_name());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetScreen_name()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.screen_name,typedOther.screen_name);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetCreated_at()).compareTo(typedOther.isSetCreated_at());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetCreated_at()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.created_at,typedOther.created_at);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetText()).compareTo(typedOther.isSetText());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetText()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.text,typedOther.text);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  return 0;
}","public int compareTo(TResult other){
  if (!getClass().equals(other.getClass())) {
    return getClass().getName().compareTo(other.getClass().getName());
  }
  int lastComparison=0;
  TResult typedOther=(TResult)other;
  lastComparison=Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetId()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.id,typedOther.id);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetRsv()).compareTo(typedOther.isSetRsv());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetRsv()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.rsv,typedOther.rsv);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetScreen_name()).compareTo(typedOther.isSetScreen_name());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetScreen_name()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.screen_name,typedOther.screen_name);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetEpoch()).compareTo(typedOther.isSetEpoch());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetEpoch()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.epoch,typedOther.epoch);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetText()).compareTo(typedOther.isSetText());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetText()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.text,typedOther.text);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetFollowers_count()).compareTo(typedOther.isSetFollowers_count());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetFollowers_count()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.followers_count,typedOther.followers_count);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetStatuses_count()).compareTo(typedOther.isSetStatuses_count());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetStatuses_count()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.statuses_count,typedOther.statuses_count);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetLang()).compareTo(typedOther.isSetLang());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetLang()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.lang,typedOther.lang);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetIn_reply_to_status_id()).compareTo(typedOther.isSetIn_reply_to_status_id());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetIn_reply_to_status_id()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.in_reply_to_status_id,typedOther.in_reply_to_status_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetIn_reply_to_user_id()).compareTo(typedOther.isSetIn_reply_to_user_id());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetIn_reply_to_user_id()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.in_reply_to_user_id,typedOther.in_reply_to_user_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetRetweeted_status_id()).compareTo(typedOther.isSetRetweeted_status_id());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetRetweeted_status_id()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.retweeted_status_id,typedOther.retweeted_status_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetRetweeted_user_id()).compareTo(typedOther.isSetRetweeted_user_id());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetRetweeted_user_id()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.retweeted_user_id,typedOther.retweeted_user_id);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetRetweeted_count()).compareTo(typedOther.isSetRetweeted_count());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetRetweeted_count()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.retweeted_count,typedOther.retweeted_count);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  return 0;
}",0.5396825396825397
177740,"public Object getFieldValue(_Fields field){
switch (field) {
case ID:
    return Long.valueOf(getId());
case RSV:
  return Double.valueOf(getRsv());
case SCREEN_NAME:
return getScreen_name();
case CREATED_AT:
return getCreated_at();
case TEXT:
return getText();
}
throw new IllegalStateException();
}","public Object getFieldValue(_Fields field){
switch (field) {
case ID:
    return Long.valueOf(getId());
case RSV:
  return Double.valueOf(getRsv());
case SCREEN_NAME:
return getScreen_name();
case EPOCH:
return Long.valueOf(getEpoch());
case TEXT:
return getText();
case FOLLOWERS_COUNT:
return Integer.valueOf(getFollowers_count());
case STATUSES_COUNT:
return Integer.valueOf(getStatuses_count());
case LANG:
return getLang();
case IN_REPLY_TO_STATUS_ID:
return Long.valueOf(getIn_reply_to_status_id());
case IN_REPLY_TO_USER_ID:
return Long.valueOf(getIn_reply_to_user_id());
case RETWEETED_STATUS_ID:
return Long.valueOf(getRetweeted_status_id());
case RETWEETED_USER_ID:
return Long.valueOf(getRetweeted_user_id());
case RETWEETED_COUNT:
return Integer.valueOf(getRetweeted_count());
}
throw new IllegalStateException();
}",0.3726708074534161
177741,"@Override public void write(org.apache.thrift.protocol.TProtocol prot,TResult struct) throws org.apache.thrift.TException {
  TTupleProtocol oprot=(TTupleProtocol)prot;
  BitSet optionals=new BitSet();
  if (struct.isSetId()) {
    optionals.set(0);
  }
  if (struct.isSetRsv()) {
    optionals.set(1);
  }
  if (struct.isSetScreen_name()) {
    optionals.set(2);
  }
  if (struct.isSetCreated_at()) {
    optionals.set(3);
  }
  if (struct.isSetText()) {
    optionals.set(4);
  }
  oprot.writeBitSet(optionals,5);
  if (struct.isSetId()) {
    oprot.writeI64(struct.id);
  }
  if (struct.isSetRsv()) {
    oprot.writeDouble(struct.rsv);
  }
  if (struct.isSetScreen_name()) {
    oprot.writeString(struct.screen_name);
  }
  if (struct.isSetCreated_at()) {
    oprot.writeString(struct.created_at);
  }
  if (struct.isSetText()) {
    oprot.writeString(struct.text);
  }
}","@Override public void write(org.apache.thrift.protocol.TProtocol prot,TResult struct) throws org.apache.thrift.TException {
  TTupleProtocol oprot=(TTupleProtocol)prot;
  BitSet optionals=new BitSet();
  if (struct.isSetId()) {
    optionals.set(0);
  }
  if (struct.isSetRsv()) {
    optionals.set(1);
  }
  if (struct.isSetScreen_name()) {
    optionals.set(2);
  }
  if (struct.isSetEpoch()) {
    optionals.set(3);
  }
  if (struct.isSetText()) {
    optionals.set(4);
  }
  if (struct.isSetFollowers_count()) {
    optionals.set(5);
  }
  if (struct.isSetStatuses_count()) {
    optionals.set(6);
  }
  if (struct.isSetLang()) {
    optionals.set(7);
  }
  if (struct.isSetIn_reply_to_status_id()) {
    optionals.set(8);
  }
  if (struct.isSetIn_reply_to_user_id()) {
    optionals.set(9);
  }
  if (struct.isSetRetweeted_status_id()) {
    optionals.set(10);
  }
  if (struct.isSetRetweeted_user_id()) {
    optionals.set(11);
  }
  if (struct.isSetRetweeted_count()) {
    optionals.set(12);
  }
  oprot.writeBitSet(optionals,13);
  if (struct.isSetId()) {
    oprot.writeI64(struct.id);
  }
  if (struct.isSetRsv()) {
    oprot.writeDouble(struct.rsv);
  }
  if (struct.isSetScreen_name()) {
    oprot.writeString(struct.screen_name);
  }
  if (struct.isSetEpoch()) {
    oprot.writeI64(struct.epoch);
  }
  if (struct.isSetText()) {
    oprot.writeString(struct.text);
  }
  if (struct.isSetFollowers_count()) {
    oprot.writeI32(struct.followers_count);
  }
  if (struct.isSetStatuses_count()) {
    oprot.writeI32(struct.statuses_count);
  }
  if (struct.isSetLang()) {
    oprot.writeString(struct.lang);
  }
  if (struct.isSetIn_reply_to_status_id()) {
    oprot.writeI64(struct.in_reply_to_status_id);
  }
  if (struct.isSetIn_reply_to_user_id()) {
    oprot.writeI64(struct.in_reply_to_user_id);
  }
  if (struct.isSetRetweeted_status_id()) {
    oprot.writeI64(struct.retweeted_status_id);
  }
  if (struct.isSetRetweeted_user_id()) {
    oprot.writeI64(struct.retweeted_user_id);
  }
  if (struct.isSetRetweeted_count()) {
    oprot.writeI32(struct.retweeted_count);
  }
}",0.5220910623946037
177742,"@Override public void read(org.apache.thrift.protocol.TProtocol prot,TResult struct) throws org.apache.thrift.TException {
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(5);
  if (incoming.get(0)) {
    struct.id=iprot.readI64();
    struct.setIdIsSet(true);
  }
  if (incoming.get(1)) {
    struct.rsv=iprot.readDouble();
    struct.setRsvIsSet(true);
  }
  if (incoming.get(2)) {
    struct.screen_name=iprot.readString();
    struct.setScreen_nameIsSet(true);
  }
  if (incoming.get(3)) {
    struct.created_at=iprot.readString();
    struct.setCreated_atIsSet(true);
  }
  if (incoming.get(4)) {
    struct.text=iprot.readString();
    struct.setTextIsSet(true);
  }
}","@Override public void read(org.apache.thrift.protocol.TProtocol prot,TResult struct) throws org.apache.thrift.TException {
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(13);
  if (incoming.get(0)) {
    struct.id=iprot.readI64();
    struct.setIdIsSet(true);
  }
  if (incoming.get(1)) {
    struct.rsv=iprot.readDouble();
    struct.setRsvIsSet(true);
  }
  if (incoming.get(2)) {
    struct.screen_name=iprot.readString();
    struct.setScreen_nameIsSet(true);
  }
  if (incoming.get(3)) {
    struct.epoch=iprot.readI64();
    struct.setEpochIsSet(true);
  }
  if (incoming.get(4)) {
    struct.text=iprot.readString();
    struct.setTextIsSet(true);
  }
  if (incoming.get(5)) {
    struct.followers_count=iprot.readI32();
    struct.setFollowers_countIsSet(true);
  }
  if (incoming.get(6)) {
    struct.statuses_count=iprot.readI32();
    struct.setStatuses_countIsSet(true);
  }
  if (incoming.get(7)) {
    struct.lang=iprot.readString();
    struct.setLangIsSet(true);
  }
  if (incoming.get(8)) {
    struct.in_reply_to_status_id=iprot.readI64();
    struct.setIn_reply_to_status_idIsSet(true);
  }
  if (incoming.get(9)) {
    struct.in_reply_to_user_id=iprot.readI64();
    struct.setIn_reply_to_user_idIsSet(true);
  }
  if (incoming.get(10)) {
    struct.retweeted_status_id=iprot.readI64();
    struct.setRetweeted_status_idIsSet(true);
  }
  if (incoming.get(11)) {
    struct.retweeted_user_id=iprot.readI64();
    struct.setRetweeted_user_idIsSet(true);
  }
  if (incoming.get(12)) {
    struct.retweeted_count=iprot.readI32();
    struct.setRetweeted_countIsSet(true);
  }
}",0.5660377358490566
177743,"/** 
 * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise 
 */
public boolean isSet(_Fields field){
  if (field == null) {
    throw new IllegalArgumentException();
  }
switch (field) {
case ID:
    return isSetId();
case RSV:
  return isSetRsv();
case SCREEN_NAME:
return isSetScreen_name();
case CREATED_AT:
return isSetCreated_at();
case TEXT:
return isSetText();
}
throw new IllegalStateException();
}","/** 
 * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise 
 */
public boolean isSet(_Fields field){
  if (field == null) {
    throw new IllegalArgumentException();
  }
switch (field) {
case ID:
    return isSetId();
case RSV:
  return isSetRsv();
case SCREEN_NAME:
return isSetScreen_name();
case EPOCH:
return isSetEpoch();
case TEXT:
return isSetText();
case FOLLOWERS_COUNT:
return isSetFollowers_count();
case STATUSES_COUNT:
return isSetStatuses_count();
case LANG:
return isSetLang();
case IN_REPLY_TO_STATUS_ID:
return isSetIn_reply_to_status_id();
case IN_REPLY_TO_USER_ID:
return isSetIn_reply_to_user_id();
case RETWEETED_STATUS_ID:
return isSetRetweeted_status_id();
case RETWEETED_USER_ID:
return isSetRetweeted_user_id();
case RETWEETED_COUNT:
return isSetRetweeted_count();
}
throw new IllegalStateException();
}",0.5434131736526946
177744,"public void setFieldValue(_Fields field,Object value){
switch (field) {
case ID:
    if (value == null) {
      unsetId();
    }
 else {
      setId((Long)value);
    }
  break;
case RSV:
if (value == null) {
  unsetRsv();
}
 else {
  setRsv((Double)value);
}
break;
case SCREEN_NAME:
if (value == null) {
unsetScreen_name();
}
 else {
setScreen_name((String)value);
}
break;
case CREATED_AT:
if (value == null) {
unsetCreated_at();
}
 else {
setCreated_at((String)value);
}
break;
case TEXT:
if (value == null) {
unsetText();
}
 else {
setText((String)value);
}
break;
}
}","public void setFieldValue(_Fields field,Object value){
switch (field) {
case ID:
    if (value == null) {
      unsetId();
    }
 else {
      setId((Long)value);
    }
  break;
case RSV:
if (value == null) {
  unsetRsv();
}
 else {
  setRsv((Double)value);
}
break;
case SCREEN_NAME:
if (value == null) {
unsetScreen_name();
}
 else {
setScreen_name((String)value);
}
break;
case EPOCH:
if (value == null) {
unsetEpoch();
}
 else {
setEpoch((Long)value);
}
break;
case TEXT:
if (value == null) {
unsetText();
}
 else {
setText((String)value);
}
break;
case FOLLOWERS_COUNT:
if (value == null) {
unsetFollowers_count();
}
 else {
setFollowers_count((Integer)value);
}
break;
case STATUSES_COUNT:
if (value == null) {
unsetStatuses_count();
}
 else {
setStatuses_count((Integer)value);
}
break;
case LANG:
if (value == null) {
unsetLang();
}
 else {
setLang((String)value);
}
break;
case IN_REPLY_TO_STATUS_ID:
if (value == null) {
unsetIn_reply_to_status_id();
}
 else {
setIn_reply_to_status_id((Long)value);
}
break;
case IN_REPLY_TO_USER_ID:
if (value == null) {
unsetIn_reply_to_user_id();
}
 else {
setIn_reply_to_user_id((Long)value);
}
break;
case RETWEETED_STATUS_ID:
if (value == null) {
unsetRetweeted_status_id();
}
 else {
setRetweeted_status_id((Long)value);
}
break;
case RETWEETED_USER_ID:
if (value == null) {
unsetRetweeted_user_id();
}
 else {
setRetweeted_user_id((Long)value);
}
break;
case RETWEETED_COUNT:
if (value == null) {
unsetRetweeted_count();
}
 else {
setRetweeted_count((Integer)value);
}
break;
}
}",0.4134980988593156
177745,"@Override public void clear(){
  setIdIsSet(false);
  this.id=0;
  setRsvIsSet(false);
  this.rsv=0.0;
  this.screen_name=null;
  this.created_at=null;
  this.text=null;
}","@Override public void clear(){
  setIdIsSet(false);
  this.id=0;
  setRsvIsSet(false);
  this.rsv=0.0;
  this.screen_name=null;
  setEpochIsSet(false);
  this.epoch=0;
  this.text=null;
  setFollowers_countIsSet(false);
  this.followers_count=0;
  setStatuses_countIsSet(false);
  this.statuses_count=0;
  this.lang=null;
  setIn_reply_to_status_idIsSet(false);
  this.in_reply_to_status_id=0;
  setIn_reply_to_user_idIsSet(false);
  this.in_reply_to_user_id=0;
  setRetweeted_status_idIsSet(false);
  this.retweeted_status_id=0;
  setRetweeted_user_idIsSet(false);
  this.retweeted_user_id=0;
  setRetweeted_countIsSet(false);
  this.retweeted_count=0;
}",0.3656174334140435
177746,"/** 
 * Performs a deep copy on <i>other</i>.
 */
public TResult(TResult other){
  __isset_bitfield=other.__isset_bitfield;
  this.id=other.id;
  this.rsv=other.rsv;
  if (other.isSetScreen_name()) {
    this.screen_name=other.screen_name;
  }
  if (other.isSetCreated_at()) {
    this.created_at=other.created_at;
  }
  if (other.isSetText()) {
    this.text=other.text;
  }
}","/** 
 * Performs a deep copy on <i>other</i>.
 */
public TResult(TResult other){
  __isset_bitfield=other.__isset_bitfield;
  this.id=other.id;
  this.rsv=other.rsv;
  if (other.isSetScreen_name()) {
    this.screen_name=other.screen_name;
  }
  this.epoch=other.epoch;
  if (other.isSetText()) {
    this.text=other.text;
  }
  this.followers_count=other.followers_count;
  this.statuses_count=other.statuses_count;
  if (other.isSetLang()) {
    this.lang=other.lang;
  }
  this.in_reply_to_status_id=other.in_reply_to_status_id;
  this.in_reply_to_user_id=other.in_reply_to_user_id;
  this.retweeted_status_id=other.retweeted_status_id;
  this.retweeted_user_id=other.retweeted_user_id;
  this.retweeted_count=other.retweeted_count;
}",0.578096947935368
177747,"public boolean equals(TResult that){
  if (that == null)   return false;
  boolean this_present_id=true;
  boolean that_present_id=true;
  if (this_present_id || that_present_id) {
    if (!(this_present_id && that_present_id))     return false;
    if (this.id != that.id)     return false;
  }
  boolean this_present_rsv=true;
  boolean that_present_rsv=true;
  if (this_present_rsv || that_present_rsv) {
    if (!(this_present_rsv && that_present_rsv))     return false;
    if (this.rsv != that.rsv)     return false;
  }
  boolean this_present_screen_name=true && this.isSetScreen_name();
  boolean that_present_screen_name=true && that.isSetScreen_name();
  if (this_present_screen_name || that_present_screen_name) {
    if (!(this_present_screen_name && that_present_screen_name))     return false;
    if (!this.screen_name.equals(that.screen_name))     return false;
  }
  boolean this_present_created_at=true && this.isSetCreated_at();
  boolean that_present_created_at=true && that.isSetCreated_at();
  if (this_present_created_at || that_present_created_at) {
    if (!(this_present_created_at && that_present_created_at))     return false;
    if (!this.created_at.equals(that.created_at))     return false;
  }
  boolean this_present_text=true && this.isSetText();
  boolean that_present_text=true && that.isSetText();
  if (this_present_text || that_present_text) {
    if (!(this_present_text && that_present_text))     return false;
    if (!this.text.equals(that.text))     return false;
  }
  return true;
}","public boolean equals(TResult that){
  if (that == null)   return false;
  boolean this_present_id=true;
  boolean that_present_id=true;
  if (this_present_id || that_present_id) {
    if (!(this_present_id && that_present_id))     return false;
    if (this.id != that.id)     return false;
  }
  boolean this_present_rsv=true;
  boolean that_present_rsv=true;
  if (this_present_rsv || that_present_rsv) {
    if (!(this_present_rsv && that_present_rsv))     return false;
    if (this.rsv != that.rsv)     return false;
  }
  boolean this_present_screen_name=true && this.isSetScreen_name();
  boolean that_present_screen_name=true && that.isSetScreen_name();
  if (this_present_screen_name || that_present_screen_name) {
    if (!(this_present_screen_name && that_present_screen_name))     return false;
    if (!this.screen_name.equals(that.screen_name))     return false;
  }
  boolean this_present_epoch=true;
  boolean that_present_epoch=true;
  if (this_present_epoch || that_present_epoch) {
    if (!(this_present_epoch && that_present_epoch))     return false;
    if (this.epoch != that.epoch)     return false;
  }
  boolean this_present_text=true && this.isSetText();
  boolean that_present_text=true && that.isSetText();
  if (this_present_text || that_present_text) {
    if (!(this_present_text && that_present_text))     return false;
    if (!this.text.equals(that.text))     return false;
  }
  boolean this_present_followers_count=true;
  boolean that_present_followers_count=true;
  if (this_present_followers_count || that_present_followers_count) {
    if (!(this_present_followers_count && that_present_followers_count))     return false;
    if (this.followers_count != that.followers_count)     return false;
  }
  boolean this_present_statuses_count=true;
  boolean that_present_statuses_count=true;
  if (this_present_statuses_count || that_present_statuses_count) {
    if (!(this_present_statuses_count && that_present_statuses_count))     return false;
    if (this.statuses_count != that.statuses_count)     return false;
  }
  boolean this_present_lang=true && this.isSetLang();
  boolean that_present_lang=true && that.isSetLang();
  if (this_present_lang || that_present_lang) {
    if (!(this_present_lang && that_present_lang))     return false;
    if (!this.lang.equals(that.lang))     return false;
  }
  boolean this_present_in_reply_to_status_id=true;
  boolean that_present_in_reply_to_status_id=true;
  if (this_present_in_reply_to_status_id || that_present_in_reply_to_status_id) {
    if (!(this_present_in_reply_to_status_id && that_present_in_reply_to_status_id))     return false;
    if (this.in_reply_to_status_id != that.in_reply_to_status_id)     return false;
  }
  boolean this_present_in_reply_to_user_id=true;
  boolean that_present_in_reply_to_user_id=true;
  if (this_present_in_reply_to_user_id || that_present_in_reply_to_user_id) {
    if (!(this_present_in_reply_to_user_id && that_present_in_reply_to_user_id))     return false;
    if (this.in_reply_to_user_id != that.in_reply_to_user_id)     return false;
  }
  boolean this_present_retweeted_status_id=true;
  boolean that_present_retweeted_status_id=true;
  if (this_present_retweeted_status_id || that_present_retweeted_status_id) {
    if (!(this_present_retweeted_status_id && that_present_retweeted_status_id))     return false;
    if (this.retweeted_status_id != that.retweeted_status_id)     return false;
  }
  boolean this_present_retweeted_user_id=true;
  boolean that_present_retweeted_user_id=true;
  if (this_present_retweeted_user_id || that_present_retweeted_user_id) {
    if (!(this_present_retweeted_user_id && that_present_retweeted_user_id))     return false;
    if (this.retweeted_user_id != that.retweeted_user_id)     return false;
  }
  boolean this_present_retweeted_count=true;
  boolean that_present_retweeted_count=true;
  if (this_present_retweeted_count || that_present_retweeted_count) {
    if (!(this_present_retweeted_count && that_present_retweeted_count))     return false;
    if (this.retweeted_count != that.retweeted_count)     return false;
  }
  return true;
}",0.4593064401981599
177748,"@Override public String toString(){
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  boolean first=true;
  sb.append(""String_Node_Str"");
  sb.append(this.id);
  first=false;
  if (!first)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.rsv);
  first=false;
  if (!first)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (this.screen_name == null) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(this.screen_name);
  }
  first=false;
  if (!first)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (this.created_at == null) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(this.created_at);
  }
  first=false;
  if (!first)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (this.text == null) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(this.text);
  }
  first=false;
  sb.append(""String_Node_Str"");
  return sb.toString();
}","@Override public String toString(){
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  boolean first=true;
  sb.append(""String_Node_Str"");
  sb.append(this.id);
  first=false;
  if (!first)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.rsv);
  first=false;
  if (!first)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (this.screen_name == null) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(this.screen_name);
  }
  first=false;
  if (!first)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.epoch);
  first=false;
  if (!first)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (this.text == null) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(this.text);
  }
  first=false;
  if (!first)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.followers_count);
  first=false;
  if (!first)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.statuses_count);
  first=false;
  if (!first)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (this.lang == null) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(this.lang);
  }
  first=false;
  if (!first)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.in_reply_to_status_id);
  first=false;
  if (!first)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.in_reply_to_user_id);
  first=false;
  if (!first)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.retweeted_status_id);
  first=false;
  if (!first)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.retweeted_user_id);
  first=false;
  if (!first)   sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(this.retweeted_count);
  first=false;
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.5312605610003379
177749,"/** 
 * Find the _Fields constant that matches fieldId, or null if its not found.
 */
public static _Fields findByThriftId(int fieldId){
switch (fieldId) {
case 1:
    return ID;
case 2:
  return RSV;
case 3:
return SCREEN_NAME;
case 4:
return CREATED_AT;
case 5:
return TEXT;
default :
return null;
}
}","/** 
 * Find the _Fields constant that matches fieldId, or null if its not found.
 */
public static _Fields findByThriftId(int fieldId){
switch (fieldId) {
case 1:
    return ID;
case 2:
  return RSV;
case 3:
return SCREEN_NAME;
case 4:
return EPOCH;
case 5:
return TEXT;
case 6:
return FOLLOWERS_COUNT;
case 7:
return STATUSES_COUNT;
case 8:
return LANG;
case 9:
return IN_REPLY_TO_STATUS_ID;
case 10:
return IN_REPLY_TO_USER_ID;
case 11:
return RETWEETED_STATUS_ID;
case 12:
return RETWEETED_USER_ID;
case 13:
return RETWEETED_COUNT;
default :
return null;
}
}",0.6404624277456648
177750,"public static Status fromJson(String json){
  JsonObject obj=null;
  try {
    obj=(JsonObject)JSON_PARSER.parse(json);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  if (obj.get(""String_Node_Str"") == null) {
    return null;
  }
  Status status=new Status();
  status.text=obj.get(""String_Node_Str"").getAsString();
  status.id=obj.get(""String_Node_Str"").getAsLong();
  status.screenname=obj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsString();
  status.createdAt=obj.get(""String_Node_Str"").getAsString();
  try {
    status.epoch=(new SimpleDateFormat(DATE_FORMAT)).parse(status.createdAt).getTime() / 1000;
  }
 catch (  ParseException e) {
    status.epoch=-1L;
  }
  try {
    status.inReplyToStatusId=obj.get(""String_Node_Str"").getAsLong();
  }
 catch (  Exception e) {
    status.inReplyToStatusId=-1L;
  }
  try {
    status.inReplyToUserId=obj.get(""String_Node_Str"").getAsLong();
  }
 catch (  Exception e) {
    status.inReplyToUserId=-1L;
  }
  try {
    status.retweetStatusId=obj.getAsJsonObject(""String_Node_Str"").get(""String_Node_Str"").getAsLong();
    status.retweetUserId=obj.getAsJsonObject(""String_Node_Str"").get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsLong();
  }
 catch (  Exception e) {
    status.retweetStatusId=-1L;
  }
  try {
    status.inReplyToUserId=obj.get(""String_Node_Str"").getAsLong();
  }
 catch (  Exception e) {
    status.retweetUserId=-1L;
  }
  try {
    status.retweetCount=obj.get(""String_Node_Str"").getAsInt();
  }
 catch (  Exception e) {
    status.retweetCount=-1;
  }
  try {
    status.latitude=obj.getAsJsonObject(""String_Node_Str"").getAsJsonArray(""String_Node_Str"").get(1).getAsDouble();
    status.longitude=obj.getAsJsonObject(""String_Node_Str"").getAsJsonArray(""String_Node_Str"").get(0).getAsDouble();
  }
 catch (  Exception e) {
    status.latitude=Double.NEGATIVE_INFINITY;
    status.longitude=Double.NEGATIVE_INFINITY;
  }
  try {
    status.lang=obj.get(""String_Node_Str"").getAsString();
  }
 catch (  Exception e) {
    status.lang=""String_Node_Str"";
  }
  status.followersCount=obj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsInt();
  status.friendsCount=obj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsInt();
  status.statusesCount=obj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsInt();
  status.jsonObject=obj;
  status.jsonString=json;
  return status;
}","public static Status fromJson(String json){
  JsonObject obj=null;
  try {
    obj=(JsonObject)JSON_PARSER.parse(json);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  if (obj.get(""String_Node_Str"") == null) {
    return null;
  }
  Status status=new Status();
  status.text=obj.get(""String_Node_Str"").getAsString();
  status.id=obj.get(""String_Node_Str"").getAsLong();
  status.screenname=obj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsString();
  status.createdAt=obj.get(""String_Node_Str"").getAsString();
  try {
    status.epoch=(new SimpleDateFormat(DATE_FORMAT)).parse(status.createdAt).getTime() / 1000;
  }
 catch (  ParseException e) {
    status.epoch=-1L;
  }
  try {
    status.inReplyToStatusId=obj.get(""String_Node_Str"").getAsLong();
  }
 catch (  Exception e) {
    status.inReplyToStatusId=-1L;
  }
  try {
    status.inReplyToUserId=obj.get(""String_Node_Str"").getAsLong();
  }
 catch (  Exception e) {
    status.inReplyToUserId=-1L;
  }
  try {
    status.retweetStatusId=obj.getAsJsonObject(""String_Node_Str"").get(""String_Node_Str"").getAsLong();
    status.retweetUserId=obj.getAsJsonObject(""String_Node_Str"").get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsLong();
    status.retweetCount=Integer.parseInt(obj.get(""String_Node_Str"").getAsString().replace(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  Exception e) {
    status.retweetStatusId=-1L;
    status.retweetUserId=-1L;
    status.retweetCount=-1;
  }
  try {
    status.inReplyToUserId=obj.get(""String_Node_Str"").getAsLong();
  }
 catch (  Exception e) {
    status.inReplyToUserId=-1L;
  }
  try {
    status.latitude=obj.getAsJsonObject(""String_Node_Str"").getAsJsonArray(""String_Node_Str"").get(1).getAsDouble();
    status.longitude=obj.getAsJsonObject(""String_Node_Str"").getAsJsonArray(""String_Node_Str"").get(0).getAsDouble();
  }
 catch (  Exception e) {
    status.latitude=Double.NEGATIVE_INFINITY;
    status.longitude=Double.NEGATIVE_INFINITY;
  }
  try {
    status.lang=obj.get(""String_Node_Str"").getAsString();
  }
 catch (  Exception e) {
    status.lang=""String_Node_Str"";
  }
  status.followersCount=obj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsInt();
  status.friendsCount=obj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsInt();
  status.statusesCount=obj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsInt();
  status.jsonObject=obj;
  status.jsonString=json;
  return status;
}",0.9218156368726256
177751,"@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  Options options=new Options();
  options.addOption(new Option(HELP_OPTION,""String_Node_Str""));
  options.addOption(new Option(JSON_OPTION,""String_Node_Str""));
  options.addOption(new Option(TSV_OPTION,""String_Node_Str""));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(COLLECTION_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(INDEX_OPTION));
  CommandLine cmdline=null;
  CommandLineParser parser=new GnuParser();
  try {
    cmdline=parser.parse(options,args);
  }
 catch (  ParseException exp) {
    System.err.println(""String_Node_Str"" + exp.getMessage());
    System.exit(-1);
  }
  if (cmdline.hasOption(HELP_OPTION) || !cmdline.hasOption(COLLECTION_OPTION) || !cmdline.hasOption(INDEX_OPTION)) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(IndexStatuses.class.getName(),options);
    System.exit(-1);
  }
  String collectionPath=cmdline.getOptionValue(COLLECTION_OPTION);
  String indexPath=cmdline.getOptionValue(INDEX_OPTION);
  long startTime=System.currentTimeMillis();
  StatusStream stream;
  File file=new File(collectionPath);
  if (!file.exists()) {
    System.err.println(""String_Node_Str"" + file + ""String_Node_Str"");
    System.exit(-1);
  }
  if (cmdline.hasOption(TSV_OPTION)) {
    stream=new TSVStatusCorpusReader(file);
  }
 else {
    stream=new JsonStatusCorpusReader(file);
  }
  Analyzer analyzer=new StandardAnalyzer(Version.LUCENE_41);
  Directory dir=FSDirectory.open(new File(indexPath));
  IndexWriterConfig config=new IndexWriterConfig(Version.LUCENE_41,analyzer);
  config.setOpenMode(OpenMode.CREATE);
  LOG.info(""String_Node_Str"" + collectionPath);
  LOG.info(""String_Node_Str"" + indexPath);
  IndexWriter writer=new IndexWriter(dir,config);
  int cnt=0;
  Status status;
  try {
    while ((status=stream.next()) != null) {
      if (status.getText() == null) {
        continue;
      }
      cnt++;
      Document doc=new Document();
      doc.add(new LongField(StatusField.ID.name,status.getId(),Field.Store.YES));
      doc.add(new LongField(StatusField.EPOCH.name,status.getEpoch(),Field.Store.YES));
      doc.add(new TextField(StatusField.SCREEN_NAME.name,status.getScreenname(),Store.YES));
      doc.add(new TextField(StatusField.TEXT.name,status.getText(),Store.YES));
      doc.add(new IntField(StatusField.RETWEET_COUNT.name,status.getRetweetCount(),Store.YES));
      long inReplyToStatusId=status.getInReplyToStatusId();
      if (inReplyToStatusId > 0) {
        doc.add(new LongField(StatusField.IN_REPLY_TO_STATUS_ID.name,inReplyToStatusId,Field.Store.YES));
        doc.add(new LongField(StatusField.IN_REPLY_TO_USER_ID.name,status.getInReplyToUserId(),Field.Store.YES));
      }
      String lang=status.getLang();
      if (!lang.equals(""String_Node_Str"")) {
        doc.add(new TextField(StatusField.LANG.name,status.getLang(),Store.YES));
      }
      long retweetStatusId=status.getRetweetedStatusId();
      if (retweetStatusId > 0) {
        doc.add(new LongField(StatusField.RETWEETED_STATUS_ID.name,retweetStatusId,Field.Store.YES));
        doc.add(new LongField(StatusField.RETWEETED_USER_ID.name,status.getRetweetedUserId(),Field.Store.YES));
      }
      doc.add(new IntField(StatusField.FRIENDS_COUNT.name,status.getFollowersCount(),Store.YES));
      doc.add(new IntField(StatusField.FOLLOWERS_COUNT.name,status.getFriendsCount(),Store.YES));
      doc.add(new IntField(StatusField.STATUSES_COUNT.name,status.getStatusesCount(),Store.YES));
      writer.addDocument(doc);
      if (cnt % 100000 == 0) {
        LOG.info(cnt + ""String_Node_Str"");
      }
    }
    LOG.info(String.format(""String_Node_Str"",cnt));
    LOG.info(""String_Node_Str"");
    writer.forceMerge(1);
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    writer.close();
    dir.close();
    stream.close();
  }
}","@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  Options options=new Options();
  options.addOption(new Option(HELP_OPTION,""String_Node_Str""));
  options.addOption(new Option(JSON_OPTION,""String_Node_Str""));
  options.addOption(new Option(TSV_OPTION,""String_Node_Str""));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(COLLECTION_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(INDEX_OPTION));
  CommandLine cmdline=null;
  CommandLineParser parser=new GnuParser();
  try {
    cmdline=parser.parse(options,args);
  }
 catch (  ParseException exp) {
    System.err.println(""String_Node_Str"" + exp.getMessage());
    System.exit(-1);
  }
  if (cmdline.hasOption(HELP_OPTION) || !cmdline.hasOption(COLLECTION_OPTION) || !cmdline.hasOption(INDEX_OPTION)) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(IndexStatuses.class.getName(),options);
    System.exit(-1);
  }
  String collectionPath=cmdline.getOptionValue(COLLECTION_OPTION);
  String indexPath=cmdline.getOptionValue(INDEX_OPTION);
  long startTime=System.currentTimeMillis();
  StatusStream stream;
  File file=new File(collectionPath);
  if (!file.exists()) {
    System.err.println(""String_Node_Str"" + file + ""String_Node_Str"");
    System.exit(-1);
  }
  if (cmdline.hasOption(TSV_OPTION)) {
    stream=new TSVStatusCorpusReader(file);
  }
 else {
    stream=new JsonStatusCorpusReader(file);
  }
  Analyzer analyzer=new StandardAnalyzer(Version.LUCENE_41);
  Directory dir=FSDirectory.open(new File(indexPath));
  IndexWriterConfig config=new IndexWriterConfig(Version.LUCENE_41,analyzer);
  config.setOpenMode(OpenMode.CREATE);
  LOG.info(""String_Node_Str"" + collectionPath);
  LOG.info(""String_Node_Str"" + indexPath);
  IndexWriter writer=new IndexWriter(dir,config);
  int cnt=0;
  Status status;
  try {
    while ((status=stream.next()) != null) {
      if (status.getText() == null) {
        continue;
      }
      cnt++;
      Document doc=new Document();
      doc.add(new LongField(StatusField.ID.name,status.getId(),Field.Store.YES));
      doc.add(new LongField(StatusField.EPOCH.name,status.getEpoch(),Field.Store.YES));
      doc.add(new TextField(StatusField.SCREEN_NAME.name,status.getScreenname(),Store.YES));
      doc.add(new TextField(StatusField.TEXT.name,status.getText(),Store.YES));
      doc.add(new IntField(StatusField.FRIENDS_COUNT.name,status.getFollowersCount(),Store.YES));
      doc.add(new IntField(StatusField.FOLLOWERS_COUNT.name,status.getFriendsCount(),Store.YES));
      doc.add(new IntField(StatusField.STATUSES_COUNT.name,status.getStatusesCount(),Store.YES));
      long inReplyToStatusId=status.getInReplyToStatusId();
      if (inReplyToStatusId > 0) {
        doc.add(new LongField(StatusField.IN_REPLY_TO_STATUS_ID.name,inReplyToStatusId,Field.Store.YES));
        doc.add(new LongField(StatusField.IN_REPLY_TO_USER_ID.name,status.getInReplyToUserId(),Field.Store.YES));
      }
      String lang=status.getLang();
      if (!lang.equals(""String_Node_Str"")) {
        doc.add(new TextField(StatusField.LANG.name,status.getLang(),Store.YES));
      }
      long retweetStatusId=status.getRetweetedStatusId();
      if (retweetStatusId > 0) {
        doc.add(new LongField(StatusField.RETWEETED_STATUS_ID.name,retweetStatusId,Field.Store.YES));
        doc.add(new LongField(StatusField.RETWEETED_USER_ID.name,status.getRetweetedUserId(),Field.Store.YES));
        doc.add(new IntField(StatusField.RETWEET_COUNT.name,status.getRetweetCount(),Store.YES));
        if (status.getRetweetCount() < 0 || status.getRetweetedStatusId() < 0) {
          LOG.warn(""String_Node_Str"" + status.getId());
        }
      }
      writer.addDocument(doc);
      if (cnt % 100000 == 0) {
        LOG.info(cnt + ""String_Node_Str"");
      }
    }
    LOG.info(String.format(""String_Node_Str"",cnt));
    LOG.info(""String_Node_Str"");
    writer.forceMerge(1);
    LOG.info(""String_Node_Str"");
    LOG.info(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    writer.close();
    dir.close();
    stream.close();
  }
}",0.9124044679600236
177752,"@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  Options options=new Options();
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(INDEX_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(NUM_HITS_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(QUERY_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(SIMILARITY_OPTION));
  CommandLine cmdline=null;
  CommandLineParser parser=new GnuParser();
  try {
    cmdline=parser.parse(options,args);
  }
 catch (  ParseException exp) {
    System.err.println(""String_Node_Str"" + exp.getMessage());
    System.exit(-1);
  }
  if (!cmdline.hasOption(QUERY_OPTION) || !cmdline.hasOption(INDEX_OPTION)) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(SearchStatuses.class.getName(),options);
    System.exit(-1);
  }
  File indexLocation=new File(cmdline.getOptionValue(INDEX_OPTION));
  if (!indexLocation.exists()) {
    System.err.println(""String_Node_Str"" + indexLocation + ""String_Node_Str"");
    System.exit(-1);
  }
  String queryText=cmdline.getOptionValue(QUERY_OPTION);
  int numHits=10;
  try {
    if (cmdline.hasOption(NUM_HITS_OPTION)) {
      numHits=Integer.parseInt(cmdline.getOptionValue(NUM_HITS_OPTION));
    }
  }
 catch (  NumberFormatException e) {
    System.err.println(""String_Node_Str"" + NUM_HITS_OPTION + ""String_Node_Str""+ cmdline.getOptionValue(NUM_HITS_OPTION));
    System.exit(-1);
  }
  String similarity=""String_Node_Str"";
  if (cmdline.hasOption(SIMILARITY_OPTION)) {
    similarity=cmdline.getOptionValue(SIMILARITY_OPTION);
  }
  if (!Arrays.asList(SIMILARITIES).contains(similarity)) {
    System.err.println(""String_Node_Str"" + similarity);
    System.err.println(""String_Node_Str"" + Arrays.asList(SIMILARITIES));
    System.err.println(""String_Node_Str"");
  }
  PrintStream out=new PrintStream(System.out,true,""String_Node_Str"");
  IndexReader reader=DirectoryReader.open(FSDirectory.open(indexLocation));
  IndexSearcher searcher=new IndexSearcher(reader);
  if (similarity.equalsIgnoreCase(""String_Node_Str"")) {
    Similarity simBM25=new BM25Similarity();
    searcher.setSimilarity(simBM25);
  }
 else   if (similarity.equalsIgnoreCase(""String_Node_Str"")) {
    NamedList<Double> paramNamedList=new NamedList<Double>();
    paramNamedList.add(""String_Node_Str"",2500.0);
    SolrParams params=SolrParams.toSolrParams(paramNamedList);
    LMDirichletSimilarityFactory factory=new LMDirichletSimilarityFactory();
    factory.init(params);
    Similarity simLMDir=factory.getSimilarity();
    searcher.setSimilarity(simLMDir);
  }
  out.println(""String_Node_Str"" + searcher.getSimilarity().toString());
  QueryParser p=new QueryParser(Version.LUCENE_41,IndexStatuses.StatusField.TEXT.name,IndexStatuses.ANALYZER);
  Query query=p.parse(cmdline.getOptionValue(QUERY_OPTION));
  Term t=new Term(IndexStatuses.StatusField.TEXT.name,queryText);
  query=new TermQuery(t);
  out.println(""String_Node_Str"" + query);
  TopDocs rs=searcher.search(query,numHits);
  for (  ScoreDoc scoreDoc : rs.scoreDocs) {
    Document hit=searcher.doc(scoreDoc.doc);
    Field created=(Field)hit.getField(IndexStatuses.StatusField.CREATED_AT.name);
    out.println(String.format(""String_Node_Str"",scoreDoc.score,hit.getField(IndexStatuses.StatusField.ID.name).stringValue(),hit.getField(IndexStatuses.StatusField.SCREEN_NAME.name).stringValue(),(created == null ? ""String_Node_Str"" : created.stringValue()),hit.getField(IndexStatuses.StatusField.TEXT.name).stringValue()));
  }
}","@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  Options options=new Options();
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(INDEX_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(NUM_HITS_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(MAX_ID_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(QUERY_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(SIMILARITY_OPTION));
  CommandLine cmdline=null;
  CommandLineParser parser=new GnuParser();
  try {
    cmdline=parser.parse(options,args);
  }
 catch (  ParseException exp) {
    System.err.println(""String_Node_Str"" + exp.getMessage());
    System.exit(-1);
  }
  if (!cmdline.hasOption(QUERY_OPTION) || !cmdline.hasOption(INDEX_OPTION)) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(SearchStatuses.class.getName(),options);
    System.exit(-1);
  }
  File indexLocation=new File(cmdline.getOptionValue(INDEX_OPTION));
  if (!indexLocation.exists()) {
    System.err.println(""String_Node_Str"" + indexLocation + ""String_Node_Str"");
    System.exit(-1);
  }
  String queryText=cmdline.getOptionValue(QUERY_OPTION);
  int numHits=10;
  try {
    if (cmdline.hasOption(NUM_HITS_OPTION)) {
      numHits=Integer.parseInt(cmdline.getOptionValue(NUM_HITS_OPTION));
    }
  }
 catch (  NumberFormatException e) {
    System.err.println(""String_Node_Str"" + NUM_HITS_OPTION + ""String_Node_Str""+ cmdline.getOptionValue(NUM_HITS_OPTION));
    System.exit(-1);
  }
  long maxId=Long.MAX_VALUE;
  try {
    if (cmdline.hasOption(MAX_ID_OPTION)) {
      maxId=Long.parseLong(cmdline.getOptionValue(MAX_ID_OPTION));
    }
  }
 catch (  NumberFormatException e) {
    System.err.println(""String_Node_Str"" + MAX_ID_OPTION + ""String_Node_Str""+ cmdline.getOptionValue(MAX_ID_OPTION));
    System.exit(-1);
  }
  String similarity=""String_Node_Str"";
  if (cmdline.hasOption(SIMILARITY_OPTION)) {
    similarity=cmdline.getOptionValue(SIMILARITY_OPTION);
  }
  PrintStream out=new PrintStream(System.out,true,""String_Node_Str"");
  IndexReader reader=DirectoryReader.open(FSDirectory.open(indexLocation));
  IndexSearcher searcher=new IndexSearcher(reader);
  if (similarity.equalsIgnoreCase(""String_Node_Str"")) {
    Similarity simBM25=new BM25Similarity();
    searcher.setSimilarity(simBM25);
  }
 else   if (similarity.equalsIgnoreCase(""String_Node_Str"")) {
    NamedList<Double> paramNamedList=new NamedList<Double>();
    paramNamedList.add(""String_Node_Str"",2500.0);
    SolrParams params=SolrParams.toSolrParams(paramNamedList);
    LMDirichletSimilarityFactory factory=new LMDirichletSimilarityFactory();
    factory.init(params);
    Similarity simLMDir=factory.getSimilarity();
    searcher.setSimilarity(simLMDir);
  }
  out.println(""String_Node_Str"" + searcher.getSimilarity().toString());
  QueryParser p=new QueryParser(Version.LUCENE_41,IndexStatuses.StatusField.TEXT.name,IndexStatuses.ANALYZER);
  Query query=p.parse(queryText);
  Filter filter=NumericRangeFilter.newLongRange(DocField.TIME.name,0L,maxId,true,true);
  out.println(""String_Node_Str"" + query);
  TopDocs rs=searcher.search(query,filter,numHits);
  for (  ScoreDoc scoreDoc : rs.scoreDocs) {
    Document hit=searcher.doc(scoreDoc.doc);
    System.out.println(hit);
    Field epoch=(Field)hit.getField(IndexStatuses.StatusField.EPOCH.name);
    out.println(String.format(""String_Node_Str"",scoreDoc.score,hit.getField(IndexStatuses.StatusField.ID.name).stringValue(),hit.getField(IndexStatuses.StatusField.SCREEN_NAME.name).stringValue(),(epoch == null ? ""String_Node_Str"" : epoch.stringValue()),hit.getField(IndexStatuses.StatusField.TEXT.name).stringValue()));
  }
  reader.close();
}",0.7426171079429735
177753,"@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  Options options=new Options();
  options.addOption(new Option(HELP_OPTION,""String_Node_Str""));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(HOST_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(PORT_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(QUERIES_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(GROUP_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(TOKEN_OPTION));
  CommandLine cmdline=null;
  CommandLineParser parser=new GnuParser();
  try {
    cmdline=parser.parse(options,args);
  }
 catch (  ParseException exp) {
    System.err.println(""String_Node_Str"" + exp.getMessage());
    System.exit(-1);
  }
  if (!cmdline.hasOption(HOST_OPTION) || !cmdline.hasOption(PORT_OPTION) || !cmdline.hasOption(QUERIES_OPTION)) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(TrecSearchThriftClientCli.class.getName(),options);
    System.exit(-1);
  }
  String queryFile=cmdline.getOptionValue(QUERIES_OPTION);
  if (!new File(queryFile).exists()) {
    System.err.println(""String_Node_Str"" + queryFile + ""String_Node_Str"");
    System.exit(-1);
  }
  IndriQueryParams queryParams=new IndriQueryParams();
  queryParams.ParseXMLQueryFile(queryFile);
  String group=cmdline.hasOption(GROUP_OPTION) ? cmdline.getOptionValue(GROUP_OPTION) : null;
  String token=cmdline.hasOption(TOKEN_OPTION) ? cmdline.getOptionValue(TOKEN_OPTION) : null;
  TrecSearchThriftClient client=new TrecSearchThriftClient(cmdline.getOptionValue(HOST_OPTION),Integer.parseInt(cmdline.getOptionValue(PORT_OPTION)),group,token);
  Queries queries=queryParams.getQueries();
  Query query;
  while ((query=queries.getNextQuery()) != null) {
    List<TResult> results=client.search(query.getQueryString(),Long.parseLong(query.getMetadataField(""String_Node_Str"")),10000);
    int i=1;
    for (    TResult result : results) {
      System.out.println(query.getQueryName() + ""String_Node_Str"" + result.id+ ""String_Node_Str""+ i+ ""String_Node_Str""+ result.rsv+ ""String_Node_Str"");
      i++;
    }
  }
  client.close();
}","@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  Options options=new Options();
  options.addOption(new Option(HELP_OPTION,""String_Node_Str""));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(HOST_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(PORT_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(QUERIES_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(GROUP_OPTION));
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(TOKEN_OPTION));
  CommandLine cmdline=null;
  CommandLineParser parser=new GnuParser();
  try {
    cmdline=parser.parse(options,args);
  }
 catch (  ParseException exp) {
    System.err.println(""String_Node_Str"" + exp.getMessage());
    System.exit(-1);
  }
  if (!cmdline.hasOption(HOST_OPTION) || !cmdline.hasOption(PORT_OPTION) || !cmdline.hasOption(QUERIES_OPTION)) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(TrecSearchThriftClientCli.class.getName(),options);
    System.exit(-1);
  }
  String queryFile=cmdline.getOptionValue(QUERIES_OPTION);
  if (!new File(queryFile).exists()) {
    System.err.println(""String_Node_Str"" + queryFile + ""String_Node_Str"");
    System.exit(-1);
  }
  IndriQueryParams queryParams=new IndriQueryParams();
  queryParams.ParseXMLQueryFile(queryFile);
  String group=cmdline.hasOption(GROUP_OPTION) ? cmdline.getOptionValue(GROUP_OPTION) : null;
  String token=cmdline.hasOption(TOKEN_OPTION) ? cmdline.getOptionValue(TOKEN_OPTION) : null;
  TrecSearchThriftClient client=new TrecSearchThriftClient(cmdline.getOptionValue(HOST_OPTION),Integer.parseInt(cmdline.getOptionValue(PORT_OPTION)),group,token);
  Queries queries=queryParams.getQueries();
  Query query;
  while ((query=queries.getNextQuery()) != null) {
    List<TResult> results=client.search(query.getQueryString(),Long.parseLong(query.getMetadataField(""String_Node_Str"")),1000);
    int i=1;
    for (    TResult result : results) {
      System.out.println(query.getQueryName() + ""String_Node_Str"" + result.id+ ""String_Node_Str""+ i+ ""String_Node_Str""+ result.rsv+ ""String_Node_Str"");
      i++;
    }
  }
}",0.996173212487412
177754,"public List<TResult> search(TQuery query) throws TrecSearchException {
  Preconditions.checkNotNull(query);
  if (credentials != null && (!credentials.containsKey(query.group) || !credentials.get(query.group).equals(query.token))) {
    LOG.info(String.format(""String_Node_Str"",query.group,query.token));
    throw new TrecSearchException(""String_Node_Str"");
  }
  List<TResult> results=Lists.newArrayList();
  long startTime=System.currentTimeMillis();
  try {
    Filter filter=NumericRangeFilter.newLongRange(DocField.TIME.name,0L,query.max_id,true,true);
    Query q=QUERY_PARSER.parse(query.text);
    TopDocs rs=searcher.search(q,filter,query.num_results);
    for (    ScoreDoc scoreDoc : rs.scoreDocs) {
      Document hit=searcher.doc(scoreDoc.doc);
      TResult p=new TResult();
      p.id=Long.parseLong(hit.get(StatusField.ID.name));
      p.screen_name=hit.get(StatusField.SCREEN_NAME.name);
      p.created_at=hit.get(StatusField.CREATED_AT.name);
      p.text=hit.get(StatusField.TEXT.name);
      p.rsv=scoreDoc.score;
      results.add(p);
    }
  }
 catch (  Exception e) {
    throw new TrecSearchException(e.getMessage());
  }
  long endTime=System.currentTimeMillis();
  LOG.info(String.format(""String_Node_Str"",(endTime - startTime),query.toString()));
  return results;
}","public List<TResult> search(TQuery query) throws TrecSearchException {
  Preconditions.checkNotNull(query);
  if (credentials != null && (!credentials.containsKey(query.group) || !credentials.get(query.group).equals(query.token))) {
    LOG.info(String.format(""String_Node_Str"",query.group,query.token));
    throw new TrecSearchException(""String_Node_Str"");
  }
  List<TResult> results=Lists.newArrayList();
  long startTime=System.currentTimeMillis();
  try {
    Filter filter=NumericRangeFilter.newLongRange(DocField.TIME.name,0L,query.max_id,true,true);
    Query q=QUERY_PARSER.parse(query.text);
    TopDocs rs=searcher.search(q,filter,query.num_results);
    for (    ScoreDoc scoreDoc : rs.scoreDocs) {
      Document hit=searcher.doc(scoreDoc.doc);
      TResult p=new TResult();
      p.id=Long.parseLong(hit.get(StatusField.ID.name));
      p.screen_name=hit.get(StatusField.SCREEN_NAME.name);
      p.epoch=Long.parseLong(hit.get(StatusField.EPOCH.name));
      p.text=hit.get(StatusField.TEXT.name);
      p.rsv=scoreDoc.score;
      p.followers_count=Integer.parseInt(hit.get(StatusField.FOLLOWERS_COUNT.name));
      p.statuses_count=Integer.parseInt(hit.get(StatusField.STATUSES_COUNT.name));
      if (hit.get(StatusField.LANG.name) != null) {
        p.lang=hit.get(StatusField.LANG.name);
      }
      if (hit.get(StatusField.IN_REPLY_TO_STATUS_ID.name) != null) {
        p.in_reply_to_status_id=Long.parseLong(hit.get(StatusField.IN_REPLY_TO_STATUS_ID.name));
      }
      if (hit.get(StatusField.IN_REPLY_TO_USER_ID.name) != null) {
        p.in_reply_to_user_id=Long.parseLong(hit.get(StatusField.IN_REPLY_TO_USER_ID.name));
      }
      if (hit.get(StatusField.RETWEETED_STATUS_ID.name) != null) {
        p.retweeted_status_id=Long.parseLong(hit.get(StatusField.RETWEETED_STATUS_ID.name));
      }
      if (hit.get(StatusField.RETWEETED_USER_ID.name) != null) {
        p.retweeted_user_id=Long.parseLong(hit.get(StatusField.RETWEETED_USER_ID.name));
      }
      if (hit.get(StatusField.RETWEET_COUNT.name) != null) {
        p.retweeted_count=Integer.parseInt(hit.get(StatusField.RETWEET_COUNT.name));
      }
      results.add(p);
    }
  }
 catch (  Exception e) {
    throw new TrecSearchException(e.getMessage());
  }
  long endTime=System.currentTimeMillis();
  LOG.info(String.format(""String_Node_Str"",(endTime - startTime),query.toString()));
  return results;
}",0.6610765485528807
177755,"public List<TResult> search(String query,long maxId,int numResults) throws TException {
  TQuery q=new TQuery();
  q.text=query;
  q.max_id=maxId;
  q.num_results=numResults;
  q.group=group;
  q.token=token;
  return client.search(q);
}","public List<TResult> search(String query,long maxId,int numResults) throws TException {
  TTransport transport=new TSocket(host,port);
  transport.open();
  TrecSearch.Client client=new TrecSearch.Client(new TBinaryProtocol(transport));
  TQuery q=new TQuery();
  q.text=query;
  q.max_id=maxId;
  q.num_results=numResults;
  q.group=group;
  q.token=token;
  List<TResult> results=client.search(q);
  transport.close();
  return results;
}",0.6322008862629247
177756,"public TrecSearchThriftClient(String host,int port,@Nullable String group,@Nullable String token) throws TTransportException {
  Preconditions.checkNotNull(host);
  Preconditions.checkArgument(port > 0);
  this.group=group;
  this.token=token;
  transport=new TSocket(host,port);
  transport.open();
  client=new TrecSearch.Client(new TBinaryProtocol(transport));
}","public TrecSearchThriftClient(String host,int port,@Nullable String group,@Nullable String token){
  Preconditions.checkNotNull(host);
  Preconditions.checkArgument(port > 0);
  this.group=group;
  this.token=token;
  this.host=host;
  this.port=port;
}",0.7184466019417476
177757,"public String extractTweet(String html){
  Preconditions.checkNotNull(html);
  Matcher matcher=TWEET_PATTERN.matcher(html);
  if (!matcher.find()) {
    return null;
  }
  matcher=URL_PATTERN.matcher(matcher.group(1));
  StringBuffer rawsb=new StringBuffer();
  while (matcher.find()) {
    String deu=matcher.group(1).trim();
    String href=matcher.group(2).trim();
    if (!deu.equals(""String_Node_Str""))     matcher.appendReplacement(rawsb,deu);
 else     if (!href.equals(""String_Node_Str""))     matcher.appendReplacement(rawsb,href);
 else     matcher.appendReplacement(rawsb,""String_Node_Str"");
  }
  matcher.appendTail(rawsb);
  String tweet=rawsb.toString();
  tweet=tweet.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
  tweet=StringEscapeUtils.unescapeHtml(tweet);
  return tweet;
}","public String extractTweet(String html){
  Preconditions.checkNotNull(html);
  Matcher matcher=TWEET_PATTERN.matcher(html);
  if (!matcher.find()) {
    return null;
  }
  String tweet=matcher.group(1);
  matcher=URL_PATTERN.matcher(tweet);
  StringBuffer rawsb=new StringBuffer();
  while (matcher.find()) {
    HashMap<String,String> urls=new HashMap<String,String>();
    urls.put(matcher.group(1),matcher.group(2));
    urls.put(matcher.group(3),matcher.group(4));
    String deu=urls.containsKey(""String_Node_Str"") ? urls.get(""String_Node_Str"") : ""String_Node_Str"";
    String href=urls.containsKey(""String_Node_Str"") ? urls.get(""String_Node_Str"") : ""String_Node_Str"";
    if (!deu.equals(""String_Node_Str""))     matcher.appendReplacement(rawsb,deu);
 else     if (!href.equals(""String_Node_Str""))     matcher.appendReplacement(rawsb,href);
 else     matcher.appendReplacement(rawsb,""String_Node_Str"");
  }
  matcher.appendTail(rawsb);
  tweet=rawsb.toString();
  tweet=tweet.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
  tweet=StringEscapeUtils.unescapeHtml(tweet);
  return tweet;
}",0.7971360381861575
177758,"private synchronized void retry() throws Exception {
  Thread.sleep(1000);
  if (!retries.containsKey(id)) {
    retries.put(id,1);
    LOG.warn(""String_Node_Str"" + url + ""String_Node_Str"");
    asyncHttpClient.prepareGet(url).execute(new TweetFetcherHandler(id,username,url,isRedirect));
    return;
  }
  int attempts=retries.get(id);
  if (attempts > MAX_RETRY_ATTEMPTS) {
    LOG.warn(""String_Node_Str"" + url + ""String_Node_Str"");
    return;
  }
  attempts++;
  LOG.warn(""String_Node_Str"" + url + ""String_Node_Str""+ attempts);
  asyncHttpClient.prepareGet(url).execute(new TweetFetcherHandler(id,username,url,isRedirect));
  retries.put(id,attempts);
}","private synchronized void retry() throws Exception {
  Thread.sleep(1000);
  int attempts=retries.containsKey(id) ? retries.get(id) + 1 : 1;
  retries.put(id,attempts);
  if (attempts > MAX_RETRY_ATTEMPTS) {
    LOG.warn(""String_Node_Str"" + url + ""String_Node_Str"");
    return;
  }
  LOG.warn(""String_Node_Str"" + url + ""String_Node_Str""+ attempts);
  asyncHttpClient.prepareGet(url).execute(new TweetFetcherHandler(id,username,url,isRedirect));
}",0.3894927536231884
177759,"public String extractTweet(String html){
  Preconditions.checkNotNull(html);
  Matcher matcher=TWEET_PATTERN.matcher(html);
  if (!matcher.find()) {
    return null;
  }
  String tweet=matcher.group(1);
  matcher=URL_PATTERN.matcher(tweet);
  StringBuffer rawsb=new StringBuffer();
  while (matcher.find()) {
    HashMap<String,String> urls=new HashMap<String,String>();
    urls.put(matcher.group(1),matcher.group(2));
    urls.put(matcher.group(3),matcher.group(4));
    String deu=urls.containsKey(""String_Node_Str"") ? urls.get(""String_Node_Str"") : ""String_Node_Str"";
    String href=urls.containsKey(""String_Node_Str"") ? urls.get(""String_Node_Str"") : ""String_Node_Str"";
    if (!deu.equals(""String_Node_Str""))     matcher.appendReplacement(rawsb,deu);
 else     if (!href.equals(""String_Node_Str""))     matcher.appendReplacement(rawsb,href);
 else     matcher.appendReplacement(rawsb,""String_Node_Str"");
  }
  matcher.appendTail(rawsb);
  tweet=rawsb.toString();
  tweet=tweet.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
  tweet=StringEscapeUtils.unescapeHtml(tweet);
  return tweet;
}","public String extractTweet(String html){
  Preconditions.checkNotNull(html);
  Matcher matcher=TWEET_PATTERN.matcher(html);
  if (!matcher.find()) {
    return null;
  }
  String tweet=matcher.group(1);
  matcher=URL_PATTERN.matcher(tweet);
  StringBuffer rawsb=new StringBuffer();
  while (matcher.find()) {
    HashMap<String,String> urls=new HashMap<String,String>();
    urls.put(matcher.group(1),matcher.group(2));
    urls.put(matcher.group(3),matcher.group(4));
    String deu=urls.containsKey(""String_Node_Str"") ? urls.get(""String_Node_Str"") : ""String_Node_Str"";
    String href=urls.containsKey(""String_Node_Str"") ? urls.get(""String_Node_Str"") : ""String_Node_Str"";
    if (!deu.equals(""String_Node_Str""))     matcher.appendReplacement(rawsb,deu.replaceAll(""String_Node_Str"",""String_Node_Str""));
 else     if (!href.equals(""String_Node_Str""))     matcher.appendReplacement(rawsb,href.replaceAll(""String_Node_Str"",""String_Node_Str""));
 else     matcher.appendReplacement(rawsb,""String_Node_Str"");
  }
  matcher.appendTail(rawsb);
  tweet=rawsb.toString();
  tweet=tweet.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
  tweet=StringEscapeUtils.unescapeHtml(tweet);
  return tweet;
}",0.9614457831325302
177760,"/** 
 * Deserializes the object.
 */
public void readFields(DataInput in) throws IOException {
  this.version=in.readByte();
  this.httpStatusCode=in.readInt();
  this.timestamp=in.readLong();
  this.html=in.readUTF();
}","/** 
 * Deserializes the object.
 */
public void readFields(DataInput in) throws IOException {
  this.version=in.readByte();
  this.httpStatusCode=in.readInt();
  this.timestamp=in.readLong();
  this.html=in.readUTF();
  String newIndicator=""String_Node_Str"" + this.timestamp + ""String_Node_Str"";
  if (html.startsWith(newIndicator)) {
    int numChunks=Integer.parseInt(html.substring(newIndicator.length()));
    this.html=""String_Node_Str"";
    for (int i=0; i < numChunks; i++) {
      this.html+=in.readUTF();
    }
  }
}",0.5898123324396782
177761,"/** 
 * Serializes this object.
 */
public void write(DataOutput out) throws IOException {
  out.writeByte(version);
  out.writeInt(httpStatusCode);
  out.writeLong(timestamp);
  out.writeUTF(html);
}","/** 
 * Serializes this object.
 */
public void write(DataOutput out) throws IOException {
  out.writeByte(version);
  out.writeInt(httpStatusCode);
  out.writeLong(timestamp);
  int numChunks=(int)Math.ceil((double)html.length() / (double)CHUNK_SIZE);
  String header=""String_Node_Str"" + timestamp + ""String_Node_Str""+ numChunks;
  out.writeUTF(header);
  for (int i=0; i < numChunks - 1; i++) {
    out.writeUTF(html.substring(i * CHUNK_SIZE,(i + 1) * CHUNK_SIZE));
  }
  out.writeUTF(html.substring((numChunks - 1) * CHUNK_SIZE));
}",0.527891156462585
177762,"public String extractTweet(String html){
  Preconditions.checkNotNull(html);
  Matcher matcher=TWEET_PATTERN.matcher(html);
  if (!matcher.find()) {
    return null;
  }
  matcher=URL_PATTERN.matcher(matcher.group(1));
  StringBuffer rawsb=new StringBuffer();
  while (matcher.find()) {
    String deu=matcher.group(1).trim();
    String href=matcher.group(2).trim();
    if (!deu.equals(""String_Node_Str""))     matcher.appendReplacement(rawsb,deu);
 else     if (!href.equals(""String_Node_Str""))     matcher.appendReplacement(rawsb,href);
 else     matcher.appendReplacement(rawsb,""String_Node_Str"");
  }
  matcher.appendTail(rawsb);
  String tweet=rawsb.toString();
  tweet=tweet.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
  tweet=StringEscapeUtils.unescapeHtml(tweet);
  return tweet;
}","public String extractTweet(String html){
  Preconditions.checkNotNull(html);
  Matcher matcher=TWEET_PATTERN.matcher(html);
  if (!matcher.find()) {
    return null;
  }
  String tweet=matcher.group(1);
  matcher=URL_PATTERN.matcher(tweet);
  StringBuffer rawsb=new StringBuffer();
  while (matcher.find()) {
    HashMap<String,String> urls=new HashMap<String,String>();
    urls.put(matcher.group(1),matcher.group(2));
    urls.put(matcher.group(3),matcher.group(4));
    String deu=urls.containsKey(""String_Node_Str"") ? urls.get(""String_Node_Str"") : ""String_Node_Str"";
    String href=urls.containsKey(""String_Node_Str"") ? urls.get(""String_Node_Str"") : ""String_Node_Str"";
    if (!deu.equals(""String_Node_Str""))     matcher.appendReplacement(rawsb,deu);
 else     if (!href.equals(""String_Node_Str""))     matcher.appendReplacement(rawsb,href);
 else     matcher.appendReplacement(rawsb,""String_Node_Str"");
  }
  matcher.appendTail(rawsb);
  tweet=rawsb.toString();
  tweet=tweet.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
  tweet=StringEscapeUtils.unescapeHtml(tweet);
  return tweet;
}",0.7971360381861575
177763,"@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  Options options=new Options();
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(INPUT_OPTION));
  options.addOption(VERBOSE_OPTION,false,""String_Node_Str"");
  options.addOption(DUMP_OPTION,false,""String_Node_Str"");
  options.addOption(HTML_MODE,false,""String_Node_Str"" + JSON_MODE);
  options.addOption(JSON_MODE,false,""String_Node_Str"" + HTML_MODE);
  CommandLine cmdline=null;
  CommandLineParser parser=new GnuParser();
  try {
    cmdline=parser.parse(options,args);
  }
 catch (  ParseException exp) {
    System.err.println(""String_Node_Str"" + exp.getMessage());
    System.exit(-1);
  }
  if (!(cmdline.hasOption(INPUT_OPTION) && (cmdline.hasOption(HTML_MODE) ^ cmdline.hasOption(JSON_MODE)))) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(ReadStatuses.class.getName(),options);
    System.exit(-1);
  }
  PrintStream out=new PrintStream(System.out,true,""String_Node_Str"");
  StatusStream stream;
  if (cmdline.hasOption(HTML_MODE)) {
    FileSystem fs=FileSystem.get(new Configuration());
    Path file=new Path(cmdline.getOptionValue(INPUT_OPTION));
    if (!fs.exists(file)) {
      System.err.println(""String_Node_Str"" + file + ""String_Node_Str"");
      System.exit(-1);
    }
    if (fs.getFileStatus(file).isDir()) {
      stream=new HtmlStatusCorpusReader(file,fs);
    }
 else {
      stream=new HtmlStatusBlockReader(file,fs);
    }
  }
 else {
    File file=new File(cmdline.getOptionValue(INPUT_OPTION));
    if (!file.exists()) {
      System.err.println(""String_Node_Str"" + file + ""String_Node_Str"");
      System.exit(-1);
    }
    if (file.isDirectory()) {
      stream=new JsonStatusCorpusReader(file);
    }
 else {
      stream=new JsonStatusBlockReader(file);
    }
  }
  int cnt=0;
  Status status;
  while ((status=stream.next()) != null) {
    if (cmdline.hasOption(DUMP_OPTION)) {
      String text=status.getText();
      if (text != null) {
        text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
        text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
        text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      out.println(String.format(""String_Node_Str"",status.getId(),status.getScreenname(),status.getHttpStatusCode(),status.getCreatedAt(),text));
    }
    cnt++;
    if (cnt % 10000 == 0 && cmdline.hasOption(VERBOSE_OPTION)) {
      LOG.info(cnt + ""String_Node_Str"");
    }
  }
  stream.close();
  LOG.info(String.format(""String_Node_Str"",cnt));
}","@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  Options options=new Options();
  options.addOption(OptionBuilder.withArgName(""String_Node_Str"").hasArg().withDescription(""String_Node_Str"").create(INPUT_OPTION));
  options.addOption(VERBOSE_OPTION,false,""String_Node_Str"");
  options.addOption(DUMP_OPTION,false,""String_Node_Str"");
  options.addOption(HTML_MODE,false,""String_Node_Str"" + JSON_MODE);
  options.addOption(JSON_MODE,false,""String_Node_Str"" + HTML_MODE);
  CommandLine cmdline=null;
  CommandLineParser parser=new GnuParser();
  try {
    cmdline=parser.parse(options,args);
  }
 catch (  ParseException exp) {
    System.err.println(""String_Node_Str"" + exp.getMessage());
    System.exit(-1);
  }
  if (!(cmdline.hasOption(INPUT_OPTION) && (cmdline.hasOption(HTML_MODE) ^ cmdline.hasOption(JSON_MODE)))) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(ReadStatuses.class.getName(),options);
    System.exit(-1);
  }
  PrintStream out=new PrintStream(System.out,true,""String_Node_Str"");
  StatusStream stream;
  if (cmdline.hasOption(HTML_MODE)) {
    FileSystem fs=FileSystem.get(new Configuration());
    Path file=new Path(cmdline.getOptionValue(INPUT_OPTION));
    if (!fs.exists(file)) {
      System.err.println(""String_Node_Str"" + file + ""String_Node_Str"");
      System.exit(-1);
    }
    if (fs.getFileStatus(file).isDir()) {
      stream=new HtmlStatusCorpusReader(file,fs);
    }
 else {
      stream=new HtmlStatusBlockReader(file,fs);
    }
  }
 else {
    File file=new File(cmdline.getOptionValue(INPUT_OPTION));
    if (!file.exists()) {
      System.err.println(""String_Node_Str"" + file + ""String_Node_Str"");
      System.exit(-1);
    }
    if (file.isDirectory()) {
      stream=new JsonStatusCorpusReader(file);
    }
 else {
      stream=new JsonStatusBlockReader(file);
    }
  }
  int cnt=0;
  Status status;
  while ((status=stream.next()) != null) {
    if (cmdline.hasOption(DUMP_OPTION)) {
      String text=status.getText();
      if (text != null) {
        text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
        text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      out.println(String.format(""String_Node_Str"",status.getId(),status.getScreenname(),status.getHttpStatusCode(),status.getCreatedAt(),text));
    }
    cnt++;
    if (cnt % 10000 == 0 && cmdline.hasOption(VERBOSE_OPTION)) {
      LOG.info(cnt + ""String_Node_Str"");
    }
  }
  stream.close();
  LOG.info(String.format(""String_Node_Str"",cnt));
}",0.9870631396022398
177764,"@Override public synchronized void registerC2DM(final Context context){
  if (!isRegisteredC2DM(context) && !notificationRegistrationState.isC2dmPending() && config.getBooleanProperty(SocializeConfig.GCM_REGISTRATION_ENABLED,true)) {
    if (logger != null && logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
    notificationRegistrationState.setC2dmPendingRequestTime(System.currentTimeMillis());
    @SuppressWarnings(""String_Node_Str"") String senderId=config.getProperty(SocializeConfig.SOCIALIZE_GCM_SENDER_ID,config.getProperty(SocializeConfig.SOCIALIZE_C2DM_SENDER_ID));
    String customSender=config.getProperty(SocializeConfig.SOCIALIZE_CUSTOM_GCM_SENDER_ID);
    if (!StringUtils.isEmpty(senderId) && !StringUtils.isEmpty(customSender) && !senderId.equals(customSender)) {
      senderId=senderId + ""String_Node_Str"" + customSender;
    }
    Intent implicitIntent=newIntent(REQUEST_REGISTRATION_INTENT);
    PackageManager pm=context.getPackageManager();
    List<ResolveInfo> resolveInfos=pm.queryIntentServices(implicitIntent,0);
    if (resolveInfos != null && resolveInfos.size() == 1) {
      ResolveInfo serviceInfo=resolveInfos.get(0);
      String packageName=serviceInfo.serviceInfo.packageName;
      String className=serviceInfo.serviceInfo.name;
      ComponentName component=new ComponentName(packageName,className);
      Intent registrationIntent=newIntent(implicitIntent);
      registrationIntent.setComponent(component);
      registrationIntent.putExtra(EXTRA_APPLICATION_PENDING_INTENT,newPendingIntent(context));
      registrationIntent.putExtra(EXTRA_SENDER,senderId);
      context.startService(registrationIntent);
    }
  }
 else {
    if (logger != null && logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
  }
}","@Override public synchronized void registerC2DM(final Context context){
  if (!isRegisteredC2DM(context) && !notificationRegistrationState.isC2dmPending() && config.getBooleanProperty(SocializeConfig.GCM_REGISTRATION_ENABLED,true)) {
    if (logger != null && logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
    notificationRegistrationState.setC2dmPendingRequestTime(System.currentTimeMillis());
    @SuppressWarnings(""String_Node_Str"") String senderId=config.getProperty(SocializeConfig.SOCIALIZE_GCM_SENDER_ID,config.getProperty(SocializeConfig.SOCIALIZE_C2DM_SENDER_ID));
    String customSender=config.getProperty(SocializeConfig.SOCIALIZE_CUSTOM_GCM_SENDER_ID);
    if (!StringUtils.isEmpty(senderId) && !StringUtils.isEmpty(customSender) && !senderId.equals(customSender)) {
      senderId=senderId + ""String_Node_Str"" + customSender;
    }
    Intent implicitIntent=newIntent(REQUEST_REGISTRATION_INTENT);
    PackageManager pm=context.getPackageManager();
    List<ResolveInfo> resolveInfos=pm.queryIntentServices(implicitIntent,0);
    if (resolveInfos != null && resolveInfos.size() > 1) {
      ResolveInfo serviceInfo=resolveInfos.get(0);
      String packageName=serviceInfo.serviceInfo.packageName;
      String className=serviceInfo.serviceInfo.name;
      ComponentName component=new ComponentName(packageName,className);
      Intent registrationIntent=newIntent(implicitIntent);
      registrationIntent.setComponent(component);
      registrationIntent.putExtra(EXTRA_APPLICATION_PENDING_INTENT,newPendingIntent(context));
      registrationIntent.putExtra(EXTRA_SENDER,senderId);
      context.startService(registrationIntent);
    }
  }
 else {
    if (logger != null && logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
  }
}",0.9991641125661744
177765,"protected void handleUserUpdate(final Context context,final SocializeSession session,User savedUser,UserSettings userSettings,final UserListener listener){
  try {
    SessionLock.lock();
    User sessionUser=session.getUser();
    sessionUser.update(savedUser);
    UserSettings settings=session.getUserSettings();
    settings.update(userSettings);
    if (sessionPersister != null) {
      sessionPersister.saveUser(context,sessionUser,userSettings);
    }
    if (listener != null) {
      listener.onUpdate(sessionUser);
    }
  }
  finally {
    SessionLock.unlock();
  }
}","protected void handleUserUpdate(final Context context,final SocializeSession session,User savedUser,UserSettings userSettings,final UserListener listener){
  try {
    SessionLock.lock();
    User sessionUser=session.getUser();
    sessionUser.update(savedUser);
    if (sessionPersister != null) {
      sessionPersister.saveUser(context,sessionUser,userSettings);
    }
    if (listener != null) {
      listener.onUpdate(sessionUser);
    }
  }
  finally {
    SessionLock.unlock();
  }
}",0.9177570093457944
177766,"@Override public void saveUserAsync(final Context context,final SocializeSession session,final User user,final UserListener listener){
  final UserSettings settings=session.getUserSettings();
  settings.update(user);
  String endpoint=ENDPOINT + user.getId() + ""String_Node_Str"";
  putAsPostAsync(session,endpoint,user,new UserSaveListener(){
    @Override public void onError(    SocializeException error){
      listener.onError(error);
    }
    @Override public void onUpdate(    User savedUser){
      UserSettings oldProfile=session.getUserSettings();
      if (settings.isNotificationsEnabled() && oldProfile.isNotificationsEnabled() != settings.isNotificationsEnabled()) {
        if (notificationRegistrationSystem != null) {
          notificationRegistrationSystem.registerC2DMAsync(context);
        }
      }
      handleUserUpdate(context,session,savedUser,settings,listener);
    }
  }
);
}","@Override public void saveUserAsync(final Context context,final SocializeSession session,final User userToBeSaved,final UserListener listener){
  final UserSettings settings=session.getUserSettings();
  settings.update(userToBeSaved);
  String endpoint=ENDPOINT + userToBeSaved.getId() + ""String_Node_Str"";
  putAsPostAsync(session,endpoint,userToBeSaved,new UserSaveListener(){
    @Override public void onError(    SocializeException error){
      listener.onError(error);
    }
    @Override public void onUpdate(    User savedUser){
      handleUserUpdate(context,session,savedUser,settings,listener);
    }
  }
);
}",0.6793442622950819
177767,"@Override public void saveUserSettings(final Context context,final SocializeSession session,final UserSettings settings,final UserListener listener){
  User user=session.getUser();
  user.setFirstName(settings.getFirstName());
  user.setLastName(settings.getLastName());
  if (settings.getImage() != null) {
    user.setProfilePicData(bitmapUtils.encode(settings.getImage()));
  }
  saveUserAsync(context,session,user,listener);
}","@Override public void saveUserSettings(final Context context,final SocializeSession session,final UserSettings settingsToBeSaved,final UserListener listener){
  User sessionUser=session.getUser();
  UserSettings sessionSettings=session.getUserSettings();
  boolean wasNotificationsEnabled=sessionSettings.isNotificationsEnabled();
  sessionUser.setFirstName(settingsToBeSaved.getFirstName());
  sessionUser.setLastName(settingsToBeSaved.getLastName());
  sessionSettings.update(settingsToBeSaved);
  boolean isNotificationsEnabled=sessionSettings.isNotificationsEnabled();
  if (settingsToBeSaved.getImage() != null) {
    sessionUser.setProfilePicData(bitmapUtils.encode(settingsToBeSaved.getImage()));
  }
  if (isNotificationsEnabled && !wasNotificationsEnabled && notificationRegistrationSystem != null) {
    notificationRegistrationSystem.registerC2DMAsync(context);
  }
  saveUserAsync(context,session,sessionUser,listener);
}",0.4622157006603081
177768,"@Override public void onUpdate(User savedUser){
  UserSettings oldProfile=session.getUserSettings();
  if (settings.isNotificationsEnabled() && oldProfile.isNotificationsEnabled() != settings.isNotificationsEnabled()) {
    if (notificationRegistrationSystem != null) {
      notificationRegistrationSystem.registerC2DMAsync(context);
    }
  }
  handleUserUpdate(context,session,savedUser,settings,listener);
}","@Override public void onUpdate(User savedUser){
  handleUserUpdate(context,session,savedUser,settings,listener);
}",0.4342857142857143
177769,"/** 
 * Tests that the listener created in saveUserSettings behaves correctly.
 */
@UsesMocks({SocializeException.class,SocializeSessionPersister.class,NotificationRegistrationSystem.class,User.class,UserSettings.class}) public void testSaveUserProfileListener(){
  final long id=69;
  Context context=new MockContext();
  String firstName=""String_Node_Str"";
  String lastName=""String_Node_Str"";
  UserSettings profile=new UserSettings();
  profile.setFirstName(firstName);
  profile.setLastName(lastName);
  profile.setAutoPostFacebook(true);
  profile.setAutoPostTwitter(true);
  profile.setNotificationsEnabled(true);
  profile.setLocationEnabled(true);
  User user=AndroidMock.createMock(User.class);
  UserSettings userSettings=AndroidMock.createMock(UserSettings.class);
  SocializeSessionPersister sessionPersister=AndroidMock.createMock(SocializeSessionPersister.class);
  SocializeException exception=AndroidMock.createMock(SocializeException.class);
  NotificationRegistrationSystem notificationRegistrationSystem=AndroidMock.createMock(NotificationRegistrationSystem.class);
  AndroidMock.expect(session.getUser()).andReturn(user).times(2);
  AndroidMock.expect(session.getUserSettings()).andReturn(userSettings).times(2);
  AndroidMock.expect(user.getId()).andReturn(id);
  AndroidMock.expect(userSettings.isNotificationsEnabled()).andReturn(false);
  notificationRegistrationSystem.registerC2DMAsync(context);
  user.update(user);
  userSettings.update(profile);
  listener.onUpdate(user);
  listener.onError(exception);
  sessionPersister.saveUser(context,user,profile);
  user.setFirstName(firstName);
  user.setLastName(lastName);
  SocializeUserSystem api=new SocializeUserSystem(provider){
    @Override public void putAsPostAsync(    SocializeSession session,    String endpoint,    User object,    SocializeActionListener listener){
      addResult(listener);
    }
  }
;
  api.setSessionPersister(sessionPersister);
  AndroidMock.replay(session,listener,sessionPersister,user,userSettings,notificationRegistrationSystem);
  api.setNotificationRegistrationSystem(notificationRegistrationSystem);
  api.saveUserSettings(context,session,profile,listener);
  UserSaveListener listenerFound=getNextResult();
  assertNotNull(listenerFound);
  listenerFound.onUpdate(user);
  listenerFound.onError(exception);
  AndroidMock.verify(session,listener,sessionPersister,user,userSettings,notificationRegistrationSystem);
}","/** 
 * Tests that the listener created in saveUserSettings behaves correctly.
 */
@UsesMocks({SocializeException.class,SocializeSessionPersister.class,NotificationRegistrationSystem.class,User.class,UserSettings.class}) public void testSaveUserProfileListener(){
  final long id=69;
  Context context=new MockContext();
  String firstName=""String_Node_Str"";
  String lastName=""String_Node_Str"";
  UserSettings settingsToBeSaved=new UserSettings();
  settingsToBeSaved.setFirstName(firstName);
  settingsToBeSaved.setLastName(lastName);
  settingsToBeSaved.setAutoPostFacebook(true);
  settingsToBeSaved.setAutoPostTwitter(true);
  settingsToBeSaved.setNotificationsEnabled(true);
  settingsToBeSaved.setLocationEnabled(true);
  UserSettings sessionSettings=new UserSettings();
  sessionSettings.setNotificationsEnabled(false);
  User sessionUser=new User();
  sessionUser.setId(id);
  SocializeSessionPersister sessionPersister=AndroidMock.createMock(SocializeSessionPersister.class);
  SocializeException exception=AndroidMock.createMock(SocializeException.class);
  NotificationRegistrationSystem notificationRegistrationSystem=AndroidMock.createMock(NotificationRegistrationSystem.class);
  AndroidMock.expect(session.getUser()).andReturn(sessionUser).anyTimes();
  AndroidMock.expect(session.getUserSettings()).andReturn(sessionSettings).anyTimes();
  notificationRegistrationSystem.registerC2DMAsync(context);
  listener.onUpdate(sessionUser);
  listener.onError(exception);
  sessionPersister.saveUser(context,sessionUser,sessionSettings);
  SocializeUserSystem api=new SocializeUserSystem(provider){
    @Override public void putAsPostAsync(    SocializeSession session,    String endpoint,    User object,    SocializeActionListener listener){
      addResult(listener);
    }
  }
;
  api.setSessionPersister(sessionPersister);
  AndroidMock.replay(session,listener,sessionPersister,notificationRegistrationSystem);
  api.setNotificationRegistrationSystem(notificationRegistrationSystem);
  api.saveUserSettings(context,session,settingsToBeSaved,listener);
  UserSaveListener listenerFound=getNextResult();
  assertNotNull(listenerFound);
  listenerFound.onUpdate(sessionUser);
  listenerFound.onError(exception);
  AndroidMock.verify(session,listener,sessionPersister,notificationRegistrationSystem);
  Assert.assertEquals(firstName,sessionSettings.getFirstName());
  Assert.assertEquals(lastName,sessionSettings.getLastName());
  Assert.assertEquals(true,sessionSettings.isAutoPostFacebook());
  Assert.assertEquals(true,sessionSettings.isAutoPostTwitter());
  Assert.assertEquals(true,sessionSettings.isNotificationsEnabled());
  Assert.assertEquals(true,sessionSettings.isLocationEnabled());
  Assert.assertEquals(firstName,sessionUser.getFirstName());
  Assert.assertEquals(lastName,sessionUser.getLastName());
}",0.6440935894997146
177770,"@Override public void onInit(Context context,IOCContainer container){
  setContext(context);
}","@Override public void onInit(Context ctx,IOCContainer container){
  setContext(ctx);
  if (FacebookUtils.isAvailable(ctx)) {
    try {
      FacebookUtils.extendAccessToken(context,null);
    }
 catch (    Exception e) {
      SocializeLogger.e(""String_Node_Str"",e);
    }
  }
}",0.4354838709677419
177771,"@Override public void onResume(Activity context){
  if (paused && FacebookUtils.isAvailable(context)) {
    try {
      FacebookUtils.extendAccessToken(context,null);
    }
 catch (    Exception e) {
      SocializeLogger.e(""String_Node_Str"",e);
    }
    paused=false;
  }
  if (!Socialize.getSocialize().isInitialized(context)) {
    Socialize.getSocialize().initAsync(context,new SocializeInitListener(){
      @Override public void onError(      SocializeException error){
        SocializeLogger.e(""String_Node_Str"",error);
      }
      @Override public void onInit(      Context context,      IOCContainer container){
        setContext(context);
      }
    }
);
  }
 else {
    setContext(context);
  }
}","@Override public void onResume(final Activity context){
  if (!Socialize.getSocialize().isInitialized(context)) {
    Socialize.getSocialize().initAsync(context,new SocializeInitListener(){
      @Override public void onError(      SocializeException error){
        SocializeLogger.e(""String_Node_Str"",error);
      }
      @Override public void onInit(      Context ctx,      IOCContainer container){
        setContext(ctx);
        if (FacebookUtils.isAvailable(ctx)) {
          try {
            FacebookUtils.extendAccessToken(context,null);
          }
 catch (          Exception e) {
            SocializeLogger.e(""String_Node_Str"",e);
          }
        }
      }
    }
);
  }
 else {
    if (paused && FacebookUtils.isAvailable(context)) {
      try {
        FacebookUtils.extendAccessToken(context,null);
      }
 catch (      Exception e) {
        SocializeLogger.e(""String_Node_Str"",e);
      }
      paused=false;
    }
    setContext(context);
  }
}",0.5469678953626635
177772,"public void setAuthListener(SocializeAuthListener listener){
  twitterAuthClickListener.setListener(listener);
}","public void setAuthListener(SocializeAuthListener listener){
  if (twitterAuthClickListener != null) {
    twitterAuthClickListener.setListener(listener);
  }
}",0.8235294117647058
177773,"public void init(){
  if (logger != null && logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + getClass().getSimpleName());
  }
  LayoutParams masterParams=new LayoutParams(LayoutParams.FILL_PARENT,displayUtils.getDIP(ActionBarView.ACTION_BAR_HEIGHT));
  masterParams.gravity=options.getGravity() | Gravity.CENTER_VERTICAL;
  setLayoutParams(masterParams);
  setGravity(options.getGravity());
  if (!options.isHideLike() || !options.isHideTicker()) {
    likeIcon=getIcon(options.getLikeIconResourceId(),""String_Node_Str"");
    likeIconHi=getIcon(options.getLikeIconActiveResourceId(),""String_Node_Str"");
  }
  if (!options.isHideComment() || !options.isHideTicker()) {
    commentIcon=getIcon(options.getCommentIconResourceId(),""String_Node_Str"");
  }
  if (!options.isHideShare() || !options.isHideTicker()) {
    shareIcon=getIcon(options.getShareIconResourceId(),""String_Node_Str"");
  }
  if (!options.isHideTicker()) {
    viewIcon=getIcon(options.getViewIconResourceId(),""String_Node_Str"");
  }
  int accentHeight=displayUtils.getDIP(4);
  int strokeWidth=displayUtils.getDIP(1);
  int width=ActionBarView.ACTION_BAR_BUTTON_WIDTH;
  int likeWidth=width - 5;
  int commentWidth=width + 15;
  int shareWidth=width - 5;
  if (!options.isHideTicker()) {
    ticker=tickerFactory.getBean(options.getBackgroundColor());
  }
  int textColor=Color.WHITE;
  if (options.getTextColor() != null) {
    textColor=options.getTextColor();
  }
  if (!options.isHideComment() || !options.isHideTicker()) {
    commentsItem=itemFactory.getBean(textColor);
    commentsItem.setIcon(commentIcon);
    if (!options.isHideComment())     commentButton=buttonFactory.getBean();
  }
  if (!options.isHideLike() || !options.isHideTicker()) {
    likesItem=itemFactory.getBean(textColor);
    likesItem.setIcon(likeIcon);
    if (!options.isHideLike())     likeButton=buttonFactory.getBean();
  }
  if (!options.isHideShare() || !options.isHideTicker()) {
    sharesItem=itemFactory.getBean(textColor);
    sharesItem.setIcon(shareIcon);
    if (!options.isHideShare())     shareButton=buttonFactory.getBean();
  }
  if (!options.isHideTicker()) {
    viewsItem=itemFactory.getBean(textColor);
    viewsItem.setIcon(viewIcon);
    ticker.addTickerView(viewsItem);
    ticker.addTickerView(commentsItem);
    ticker.addTickerView(likesItem);
    ticker.addTickerView(sharesItem);
  }
  ActionBarButtonBackground bg=new ActionBarButtonBackground(accentHeight,strokeWidth,options.getStrokeColor(),options.getAccentColor(),options.getFillColor(),options.getHighlightColor(),options.getColorLayout());
  if (commentButton != null) {
    commentButton.setIcon(commentIcon);
    commentButton.setBackgroundDrawable(bg);
    commentButton.setListener(new ActionBarButtonListener(){
      @Override public void onClick(      ActionBarButton button){
        boolean consumed=false;
        if (onActionBarEventListener != null) {
          consumed=onActionBarEventListener.onClick(actionBarView,ActionBarEvent.COMMENT);
        }
        if (!consumed) {
          commentUtils.showCommentView(getActivity(),actionBarView.getEntity(),onCommentViewActionListener);
        }
      }
    }
);
  }
  if (likeButton != null) {
    likeButton.setIcon(likeIcon);
    likeButton.setBackgroundDrawable(bg);
    likeButton.setListener(new ActionBarButtonListener(){
      @Override public void onClick(      ActionBarButton button){
        boolean consumed=false;
        if (onActionBarEventListener != null) {
          consumed=onActionBarEventListener.onClick(actionBarView,ActionBarEvent.LIKE);
        }
        if (!consumed) {
          doLike(likeButton,null);
        }
      }
    }
);
  }
  if (shareButton != null) {
    shareButton.setIcon(shareIcon);
    shareButton.setBackgroundDrawable(bg);
    shareButton.setListener(new ActionBarButtonListener(){
      @Override public void onClick(      ActionBarButton button){
        boolean consumed=false;
        SocialNetworkDialogListener snListener=null;
        if (onActionBarEventListener != null) {
          consumed=onActionBarEventListener.onClick(actionBarView,ActionBarEvent.SHARE);
          if (onActionBarEventListener instanceof SocialNetworkDialogListener) {
            snListener=(SocialNetworkDialogListener)onActionBarEventListener;
          }
        }
        if (!consumed) {
          if (snListener == null) {
            snListener=new SocialNetworkDialogListener(){
              @Override public void onError(              SocializeException error){
                Toast.makeText(getActivity(),localizationService.getString(I18NConstants.ACTIONBAR_SHARE_FAIL),Toast.LENGTH_SHORT).show();
              }
              @Override public void onNetworkError(              Activity context,              SocialNetwork network,              Exception error){
                Toast.makeText(context,localizationService.getString(I18NConstants.ACTIONBAR_SHARE_FAIL),Toast.LENGTH_SHORT).show();
              }
              @Override public void onAfterPost(              Activity parent,              SocialNetwork socialNetwork,              JSONObject responseObject){
                Toast.makeText(parent,localizationService.getString(I18NConstants.ACTIONBAR_SHARE_SUCCESS),Toast.LENGTH_SHORT).show();
              }
            }
;
          }
          ShareUtils.showShareDialog(getActivity(),actionBarView.getEntity(),snListener);
        }
      }
    }
);
  }
  if (ticker != null) {
    ticker.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      android.view.View v){
        boolean consumed=false;
        if (onActionBarEventListener != null) {
          consumed=onActionBarEventListener.onClick(actionBarView,ActionBarEvent.VIEW);
        }
        if (!consumed) {
          ticker.skipToNext();
        }
      }
    }
);
  }
  if (viewsItem != null) {
    viewsItem.init();
    viewsItem.setText(loadingText);
  }
  if (commentsItem != null) {
    commentsItem.init();
    commentsItem.setText(loadingText);
    commentButton.init(commentWidth,0.0f,textColor);
    commentButton.setText(localizationService.getString(I18NConstants.ACTIONBAR_COMMENT));
  }
  if (likesItem != null) {
    likesItem.init();
    likesItem.setText(loadingText);
    likeButton.init(likeWidth,0.0f,textColor);
    likeButton.setText(loadingText);
  }
  if (sharesItem != null) {
    sharesItem.init();
    sharesItem.setText(loadingText);
    shareButton.init(shareWidth,0.0f,textColor);
    shareButton.setText(localizationService.getString(I18NConstants.ACTIONBAR_SHARE));
  }
  if (ticker != null) {
    ticker.init(LayoutParams.FILL_PARENT,1.0f);
  }
  if (ticker != null)   addView(ticker);
  if (likeButton != null)   addView(likeButton);
  if (shareButton != null)   addView(shareButton);
  if (commentButton != null)   addView(commentButton);
}","public void init(){
  if (logger != null && logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + getClass().getSimpleName());
  }
  int height=ActionBarView.ACTION_BAR_HEIGHT;
  if (displayUtils != null) {
    height=displayUtils.getDIP(ActionBarView.ACTION_BAR_HEIGHT);
  }
  LayoutParams masterParams=new LayoutParams(LayoutParams.FILL_PARENT,height);
  masterParams.gravity=options.getGravity() | Gravity.CENTER_VERTICAL;
  setLayoutParams(masterParams);
  setGravity(options.getGravity());
  if (!options.isHideLike() || !options.isHideTicker()) {
    likeIcon=getIcon(options.getLikeIconResourceId(),""String_Node_Str"");
    likeIconHi=getIcon(options.getLikeIconActiveResourceId(),""String_Node_Str"");
  }
  if (!options.isHideComment() || !options.isHideTicker()) {
    commentIcon=getIcon(options.getCommentIconResourceId(),""String_Node_Str"");
  }
  if (!options.isHideShare() || !options.isHideTicker()) {
    shareIcon=getIcon(options.getShareIconResourceId(),""String_Node_Str"");
  }
  if (!options.isHideTicker()) {
    viewIcon=getIcon(options.getViewIconResourceId(),""String_Node_Str"");
  }
  int accentHeight=displayUtils.getDIP(4);
  int strokeWidth=displayUtils.getDIP(1);
  int width=ActionBarView.ACTION_BAR_BUTTON_WIDTH;
  int likeWidth=width - 5;
  int commentWidth=width + 15;
  int shareWidth=width - 5;
  if (!options.isHideTicker()) {
    ticker=tickerFactory.getBean(options.getBackgroundColor());
  }
  int textColor=Color.WHITE;
  if (options.getTextColor() != null) {
    textColor=options.getTextColor();
  }
  if (!options.isHideComment() || !options.isHideTicker()) {
    commentsItem=itemFactory.getBean(textColor);
    commentsItem.setIcon(commentIcon);
    if (!options.isHideComment())     commentButton=buttonFactory.getBean();
  }
  if (!options.isHideLike() || !options.isHideTicker()) {
    likesItem=itemFactory.getBean(textColor);
    likesItem.setIcon(likeIcon);
    if (!options.isHideLike())     likeButton=buttonFactory.getBean();
  }
  if (!options.isHideShare() || !options.isHideTicker()) {
    sharesItem=itemFactory.getBean(textColor);
    sharesItem.setIcon(shareIcon);
    if (!options.isHideShare())     shareButton=buttonFactory.getBean();
  }
  if (!options.isHideTicker()) {
    viewsItem=itemFactory.getBean(textColor);
    viewsItem.setIcon(viewIcon);
    ticker.addTickerView(viewsItem);
    ticker.addTickerView(commentsItem);
    ticker.addTickerView(likesItem);
    ticker.addTickerView(sharesItem);
  }
  ActionBarButtonBackground bg=new ActionBarButtonBackground(accentHeight,strokeWidth,options.getStrokeColor(),options.getAccentColor(),options.getFillColor(),options.getHighlightColor(),options.getColorLayout());
  if (commentButton != null) {
    commentButton.setIcon(commentIcon);
    commentButton.setBackgroundDrawable(bg);
    commentButton.setListener(new ActionBarButtonListener(){
      @Override public void onClick(      ActionBarButton button){
        boolean consumed=false;
        if (onActionBarEventListener != null) {
          consumed=onActionBarEventListener.onClick(actionBarView,ActionBarEvent.COMMENT);
        }
        if (!consumed) {
          commentUtils.showCommentView(getActivity(),actionBarView.getEntity(),onCommentViewActionListener);
        }
      }
    }
);
  }
  if (likeButton != null) {
    likeButton.setIcon(likeIcon);
    likeButton.setBackgroundDrawable(bg);
    likeButton.setListener(new ActionBarButtonListener(){
      @Override public void onClick(      ActionBarButton button){
        boolean consumed=false;
        if (onActionBarEventListener != null) {
          consumed=onActionBarEventListener.onClick(actionBarView,ActionBarEvent.LIKE);
        }
        if (!consumed) {
          doLike(likeButton,null);
        }
      }
    }
);
  }
  if (shareButton != null) {
    shareButton.setIcon(shareIcon);
    shareButton.setBackgroundDrawable(bg);
    shareButton.setListener(new ActionBarButtonListener(){
      @Override public void onClick(      ActionBarButton button){
        boolean consumed=false;
        SocialNetworkDialogListener snListener=null;
        if (onActionBarEventListener != null) {
          consumed=onActionBarEventListener.onClick(actionBarView,ActionBarEvent.SHARE);
          if (onActionBarEventListener instanceof SocialNetworkDialogListener) {
            snListener=(SocialNetworkDialogListener)onActionBarEventListener;
          }
        }
        if (!consumed) {
          if (snListener == null) {
            snListener=new SocialNetworkDialogListener(){
              @Override public void onError(              SocializeException error){
                Toast.makeText(getActivity(),localizationService.getString(I18NConstants.ACTIONBAR_SHARE_FAIL),Toast.LENGTH_SHORT).show();
              }
              @Override public void onNetworkError(              Activity context,              SocialNetwork network,              Exception error){
                Toast.makeText(context,localizationService.getString(I18NConstants.ACTIONBAR_SHARE_FAIL),Toast.LENGTH_SHORT).show();
              }
              @Override public void onAfterPost(              Activity parent,              SocialNetwork socialNetwork,              JSONObject responseObject){
                Toast.makeText(parent,localizationService.getString(I18NConstants.ACTIONBAR_SHARE_SUCCESS),Toast.LENGTH_SHORT).show();
              }
            }
;
          }
          ShareUtils.showShareDialog(getActivity(),actionBarView.getEntity(),snListener);
        }
      }
    }
);
  }
  if (ticker != null) {
    ticker.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      android.view.View v){
        boolean consumed=false;
        if (onActionBarEventListener != null) {
          consumed=onActionBarEventListener.onClick(actionBarView,ActionBarEvent.VIEW);
        }
        if (!consumed) {
          ticker.skipToNext();
        }
      }
    }
);
  }
  if (viewsItem != null) {
    viewsItem.init();
    viewsItem.setText(loadingText);
  }
  if (commentsItem != null) {
    commentsItem.init();
    commentsItem.setText(loadingText);
    commentButton.init(commentWidth,0.0f,textColor);
    commentButton.setText(localizationService.getString(I18NConstants.ACTIONBAR_COMMENT));
  }
  if (likesItem != null) {
    likesItem.init();
    likesItem.setText(loadingText);
    likeButton.init(likeWidth,0.0f,textColor);
    likeButton.setText(loadingText);
  }
  if (sharesItem != null) {
    sharesItem.init();
    sharesItem.setText(loadingText);
    shareButton.init(shareWidth,0.0f,textColor);
    shareButton.setText(localizationService.getString(I18NConstants.ACTIONBAR_SHARE));
  }
  if (ticker != null) {
    ticker.init(LayoutParams.FILL_PARENT,1.0f);
  }
  if (ticker != null)   addView(ticker);
  if (likeButton != null)   addView(likeButton);
  if (shareButton != null)   addView(shareButton);
  if (commentButton != null)   addView(commentButton);
}",0.985280255238924
177774,"public SocializeSession authenticate(Context context,String endpoint,String key,String secret,AuthProviderData data,String udid) throws SocializeException {
  SocializeSession session=provider.authenticate(endpoint,key,secret,data,udid);
  if (!session.isRestored()) {
    checkNotifications(context,session);
  }
  return session;
}","public SocializeSession authenticate(Context context,String endpoint,String key,String secret,AuthProviderData data,String udid) throws SocializeException {
  SocializeSession session=provider.authenticate(endpoint,key,secret,data,udid);
  checkNotifications(context,session);
  return session;
}",0.890302066772655
177775,"/** 
 * Called at application startup.
 * @param context
 */
public boolean checkRegistrations(Context context,SocializeSession session){
  boolean checked=false;
  if (appUtils.isNotificationsAvailable(context)) {
    if (config.getBooleanProperty(SocializeConfig.SOCIALIZE_CHECK_NOTIFICATIONS,true)) {
      if (logger != null && logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      boolean c2DMRegistered=notificationRegistrationSystem.isRegisteredC2DM(context);
      boolean socRegistered=notificationRegistrationSystem.isRegisteredSocialize(context,session.getUser());
      if (!c2DMRegistered || !socRegistered) {
        notificationRegistrationState.load(context);
        if (!c2DMRegistered && config.getBooleanProperty(SocializeConfig.GCM_REGISTRATION_ENABLED,true)) {
          if (notificationRegistrationSystem.isRegistrationPending()) {
            if (logger != null && logger.isDebugEnabled()) {
              logger.debug(""String_Node_Str"");
            }
          }
 else {
            if (logger != null && logger.isInfoEnabled()) {
              logger.info(""String_Node_Str"");
            }
            notificationRegistrationSystem.registerC2DMAsync(context);
          }
        }
 else         if (!socRegistered && !StringUtils.isEmpty(notificationRegistrationState.getC2DMRegistrationId())) {
          if (notificationRegistrationSystem.isSocializeRegistrationPending()) {
            if (logger != null && logger.isDebugEnabled()) {
              logger.debug(""String_Node_Str"");
            }
          }
 else {
            if (logger != null && logger.isInfoEnabled()) {
              logger.info(""String_Node_Str"");
            }
            notificationRegistrationSystem.registerSocialize(context,notificationRegistrationState.getC2DMRegistrationId());
          }
        }
      }
 else {
        if (logger != null && logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"");
        }
      }
      checked=true;
    }
 else {
      if (logger != null && logger.isWarnEnabled()) {
        logger.warn(""String_Node_Str"");
      }
    }
  }
 else {
    if (logger != null && logger.isInfoEnabled()) {
      logger.info(""String_Node_Str"");
    }
    checked=true;
  }
  return checked;
}","/** 
 * Called at application startup.
 * @param context
 */
public boolean checkRegistrations(Context context,SocializeSession session){
  boolean checked=false;
  if (appUtils.isNotificationsAvailable(context)) {
    if (config.getBooleanProperty(SocializeConfig.SOCIALIZE_CHECK_NOTIFICATIONS,true)) {
      if (logger != null && logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"");
      }
      boolean c2DMRegistered=notificationRegistrationSystem.isRegisteredC2DM(context);
      boolean socRegistered=notificationRegistrationSystem.isRegisteredSocialize(context,session.getUser());
      if (!c2DMRegistered || !socRegistered) {
        notificationRegistrationState.reload(context);
        c2DMRegistered=notificationRegistrationSystem.isRegisteredC2DM(context);
        socRegistered=notificationRegistrationSystem.isRegisteredSocialize(context,session.getUser());
        if (!c2DMRegistered || !socRegistered) {
          if (!c2DMRegistered && config.getBooleanProperty(SocializeConfig.GCM_REGISTRATION_ENABLED,true)) {
            if (notificationRegistrationSystem.isRegistrationPending()) {
              if (logger != null && logger.isDebugEnabled()) {
                logger.debug(""String_Node_Str"");
              }
            }
 else {
              if (logger != null && logger.isInfoEnabled()) {
                logger.info(""String_Node_Str"");
              }
              notificationRegistrationSystem.registerC2DMAsync(context);
            }
          }
 else           if (!socRegistered && !StringUtils.isEmpty(notificationRegistrationState.getC2DMRegistrationId())) {
            if (notificationRegistrationSystem.isSocializeRegistrationPending()) {
              if (logger != null && logger.isDebugEnabled()) {
                logger.debug(""String_Node_Str"");
              }
            }
 else {
              if (logger != null && logger.isInfoEnabled()) {
                logger.info(""String_Node_Str"");
              }
              notificationRegistrationSystem.registerSocialize(context,notificationRegistrationState.getC2DMRegistrationId());
            }
          }
        }
 else {
          if (logger != null && logger.isDebugEnabled()) {
            logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        if (logger != null && logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"");
        }
      }
      checked=true;
    }
 else {
      if (logger != null && logger.isWarnEnabled()) {
        logger.warn(""String_Node_Str"");
      }
    }
  }
 else {
    if (logger != null && logger.isInfoEnabled()) {
      logger.info(""String_Node_Str"");
    }
    checked=true;
  }
  return checked;
}",0.8946201894015716
177776,"public boolean isRegisteredC2DM(Context context){
  load(context);
  long timeout=config.getLongProperty(SocializeConfig.GCM_REGISTRATION_INTERVAL,DEFAULT_GCM_TIMEOUT);
  long timeSinceLast=(System.currentTimeMillis() - lastSocializeRegistrationTime);
  if (StringUtils.isEmpty(c2DMRegistrationId) || (timeSinceLast > timeout && timeout >= 0)) {
    return false;
  }
  return true;
}","public boolean isRegisteredC2DM(Context context){
  load(context);
  long timeout=config.getLongProperty(SocializeConfig.GCM_REGISTRATION_INTERVAL,DEFAULT_GCM_TIMEOUT);
  long timeSinceLast=(System.currentTimeMillis() - lastC2DMRegistrationTime);
  if (StringUtils.isEmpty(c2DMRegistrationId) || (timeSinceLast > timeout && timeout >= 0)) {
    return false;
  }
  return true;
}",0.8623853211009175
177777,"@Override public void registerC2DMFailed(Context context,String cause){
  notificationRegistrationState.setC2dmPendingRequestTime(0);
  notificationRegistrationState.save(context);
}","@Override public void registerC2DMFailed(Context context,String cause){
  notificationRegistrationState.setC2dmPendingRequestTime(0);
}",0.8517350157728707
177778,"@Override public synchronized void registerC2DM(final Context context){
  if (!isRegisteredC2DM(context) && !notificationRegistrationState.isC2dmPending() && config.getBooleanProperty(SocializeConfig.GCM_REGISTRATION_ENABLED,true)) {
    if (logger != null && logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
    notificationRegistrationState.setC2dmPendingRequestTime(System.currentTimeMillis());
    notificationRegistrationState.save(context);
    @SuppressWarnings(""String_Node_Str"") String senderId=config.getProperty(SocializeConfig.SOCIALIZE_GCM_SENDER_ID,config.getProperty(SocializeConfig.SOCIALIZE_C2DM_SENDER_ID));
    String customSender=config.getProperty(SocializeConfig.SOCIALIZE_CUSTOM_GCM_SENDER_ID);
    if (!StringUtils.isEmpty(senderId) && !StringUtils.isEmpty(customSender)) {
      senderId=senderId + ""String_Node_Str"" + customSender;
    }
    Intent registrationIntent=newIntent(REQUEST_REGISTRATION_INTENT);
    registrationIntent.putExtra(EXTRA_APPLICATION_PENDING_INTENT,newPendingIntent(context));
    registrationIntent.putExtra(EXTRA_SENDER,senderId);
    context.startService(registrationIntent);
  }
 else {
    if (logger != null && logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
  }
}","@Override public synchronized void registerC2DM(final Context context){
  if (!isRegisteredC2DM(context) && !notificationRegistrationState.isC2dmPending() && config.getBooleanProperty(SocializeConfig.GCM_REGISTRATION_ENABLED,true)) {
    if (logger != null && logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
    notificationRegistrationState.setC2dmPendingRequestTime(System.currentTimeMillis());
    @SuppressWarnings(""String_Node_Str"") String senderId=config.getProperty(SocializeConfig.SOCIALIZE_GCM_SENDER_ID,config.getProperty(SocializeConfig.SOCIALIZE_C2DM_SENDER_ID));
    String customSender=config.getProperty(SocializeConfig.SOCIALIZE_CUSTOM_GCM_SENDER_ID);
    if (!StringUtils.isEmpty(senderId) && !StringUtils.isEmpty(customSender)) {
      senderId=senderId + ""String_Node_Str"" + customSender;
    }
    Intent registrationIntent=newIntent(REQUEST_REGISTRATION_INTENT);
    registrationIntent.putExtra(EXTRA_APPLICATION_PENDING_INTENT,newPendingIntent(context));
    registrationIntent.putExtra(EXTRA_SENDER,senderId);
    context.startService(registrationIntent);
  }
 else {
    if (logger != null && logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
  }
}",0.9802816901408452
177779,"/** 
 * @param args
 */
@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  if (args.length < 3) {
    System.err.println(""String_Node_Str"" + SendMessage.class.getSimpleName() + ""String_Node_Str"");
  }
 else {
    JSONParser p=new JSONParser();
    JSONObject json=(JSONObject)p.parse(args[2]);
    Set<String> keySet=(Set<String>)json.keySet();
    Builder builder=new Message.Builder();
    for (    String string : keySet) {
      builder.addData(string,json.get(string).toString());
    }
    Message message=builder.build();
    Sender sender=new Sender(args[0]);
    Result result=sender.send(message,args[1],5);
    System.out.println(""String_Node_Str"" + result.getMessageId());
    System.out.println(""String_Node_Str"" + result.getErrorCodeName());
  }
}","/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  String data=""String_Node_Str"";
  String key=""String_Node_Str"";
  String token=""String_Node_Str"";
  Builder builder=new Message.Builder();
  builder.addData(""String_Node_Str"",data);
  builder.addData(""String_Node_Str"",""String_Node_Str"");
  builder.collapseKey(""String_Node_Str"");
  Message message=builder.build();
  Sender sender=new Sender(key);
  Result result=sender.send(message,token,5);
  System.out.println(""String_Node_Str"" + result.getMessageId());
  System.out.println(""String_Node_Str"" + result.getErrorCodeName());
}",0.4594785059901339
177780,"public void testTimeUtils(){
  long second=1000;
  long minute=second * 60;
  long hour=minute * 60;
  long day=hour * 24;
  long month=day * 30;
  long a=30 * second;
  long b=20 * minute;
  long c=8 * hour;
  long d=15 * day;
  long e=2 * month;
  long f=400 * day;
  DateUtils timeUtils=new DateUtils();
  String aValue=timeUtils.getTimeString(a);
  String bValue=timeUtils.getTimeString(b);
  String cValue=timeUtils.getTimeString(c);
  String dValue=timeUtils.getTimeString(d);
  String eValue=timeUtils.getTimeString(e);
  String fValue=timeUtils.getTimeString(f);
  System.out.println(aValue);
  System.out.println(bValue);
  System.out.println(cValue);
  System.out.println(dValue);
  System.out.println(eValue);
  System.out.println(fValue);
  assertEquals(""String_Node_Str"",aValue);
  assertEquals(""String_Node_Str"",bValue);
  assertEquals(""String_Node_Str"",cValue);
  assertEquals(""String_Node_Str"",dValue);
  assertEquals(""String_Node_Str"",eValue);
  assertEquals(""String_Node_Str"",fValue);
}","public void testTimeUtils(){
  long second=1000;
  long minute=second * 60;
  long hour=minute * 60;
  long day=hour * 24;
  long month=day * 30;
  long a=30 * second;
  long b=20 * minute;
  long c=8 * hour;
  long d=15 * day;
  long e=2 * month;
  long f=400 * day;
  DateUtils timeUtils=new DateUtils();
  DefaultLocalizationService defaultLocalizationService=new DefaultLocalizationService();
  ResourceLocator resourceLocator=new ResourceLocator();
  defaultLocalizationService.setResourceLocator(resourceLocator);
  defaultLocalizationService.init(getContext());
  timeUtils.setLocalizationService(defaultLocalizationService);
  String aValue=timeUtils.getTimeString(a);
  String bValue=timeUtils.getTimeString(b);
  String cValue=timeUtils.getTimeString(c);
  String dValue=timeUtils.getTimeString(d);
  String eValue=timeUtils.getTimeString(e);
  String fValue=timeUtils.getTimeString(f);
  assertEquals(""String_Node_Str"",aValue);
  assertEquals(""String_Node_Str"",bValue);
  assertEquals(""String_Node_Str"",cValue);
  assertEquals(""String_Node_Str"",dValue);
  assertEquals(""String_Node_Str"",eValue);
  assertEquals(""String_Node_Str"",fValue);
}",0.7650882079851439
177781,"@SuppressWarnings(""String_Node_Str"") @UsesMocks({SocializeConfig.class,MockContext.class,Intent.class}) public void test_registerC2DM(){
  final String senderId=""String_Node_Str"";
  final String legacy_senderId=""String_Node_Str"";
  NotificationRegistrationState notificationRegistrationState=AndroidMock.createMock(NotificationRegistrationState.class);
  SocializeConfig config=AndroidMock.createMock(SocializeConfig.class);
  MockContext context=AndroidMock.createNiceMock(MockContext.class);
  final Intent registrationIntent=AndroidMock.createMock(Intent.class);
  AndroidMock.expect(notificationRegistrationState.isC2dmPending()).andReturn(false);
  notificationRegistrationState.setC2dmPendingRequestTime(AndroidMock.anyLong());
  notificationRegistrationState.save(context);
  AndroidMock.expect(config.getProperty(SocializeConfig.SOCIALIZE_C2DM_SENDER_ID)).andReturn(legacy_senderId);
  AndroidMock.expect(config.getProperty(SocializeConfig.SOCIALIZE_GCM_SENDER_ID,legacy_senderId)).andReturn(senderId);
  AndroidMock.expect(registrationIntent.putExtra(SocializeNotificationRegistrationSystem.EXTRA_APPLICATION_PENDING_INTENT,(PendingIntent)null)).andReturn(registrationIntent);
  AndroidMock.expect(registrationIntent.putExtra(SocializeNotificationRegistrationSystem.EXTRA_SENDER,senderId)).andReturn(registrationIntent);
  AndroidMock.expect(context.startService(registrationIntent)).andReturn(null);
  AndroidMock.replay(notificationRegistrationState,config,context,registrationIntent);
  SocializeNotificationRegistrationSystem system=new SocializeNotificationRegistrationSystem(){
    @Override public boolean isRegisteredC2DM(){
      return false;
    }
    @Override protected Intent newIntent(    String action){
      return registrationIntent;
    }
    @Override protected PendingIntent newPendingIntent(    Context context){
      return null;
    }
  }
;
  system.setConfig(config);
  system.setNotificationRegistrationState(notificationRegistrationState);
  system.registerC2DM(context);
  AndroidMock.verify(notificationRegistrationState,config,context,registrationIntent);
}","@SuppressWarnings(""String_Node_Str"") @UsesMocks({SocializeConfig.class,MockContext.class,Intent.class}) public void test_registerC2DM(){
  final String senderId=""String_Node_Str"";
  final String legacy_senderId=""String_Node_Str"";
  NotificationRegistrationState notificationRegistrationState=AndroidMock.createMock(NotificationRegistrationState.class);
  SocializeConfig config=AndroidMock.createMock(SocializeConfig.class);
  MockContext context=AndroidMock.createNiceMock(MockContext.class);
  final Intent registrationIntent=AndroidMock.createMock(Intent.class);
  AndroidMock.expect(notificationRegistrationState.isC2dmPending()).andReturn(false);
  notificationRegistrationState.setC2dmPendingRequestTime(AndroidMock.anyLong());
  notificationRegistrationState.save(context);
  AndroidMock.expect(config.getProperty(SocializeConfig.SOCIALIZE_C2DM_SENDER_ID)).andReturn(legacy_senderId);
  AndroidMock.expect(config.getProperty(SocializeConfig.SOCIALIZE_GCM_SENDER_ID,legacy_senderId)).andReturn(senderId);
  AndroidMock.expect(config.getProperty(SocializeConfig.SOCIALIZE_CUSTOM_GCM_SENDER_ID)).andReturn(null);
  AndroidMock.expect(registrationIntent.putExtra(SocializeNotificationRegistrationSystem.EXTRA_APPLICATION_PENDING_INTENT,(PendingIntent)null)).andReturn(registrationIntent);
  AndroidMock.expect(registrationIntent.putExtra(SocializeNotificationRegistrationSystem.EXTRA_SENDER,senderId)).andReturn(registrationIntent);
  AndroidMock.expect(context.startService(registrationIntent)).andReturn(null);
  AndroidMock.replay(notificationRegistrationState,config,context,registrationIntent);
  SocializeNotificationRegistrationSystem system=new SocializeNotificationRegistrationSystem(){
    @Override public boolean isRegisteredC2DM(){
      return false;
    }
    @Override protected Intent newIntent(    String action){
      return registrationIntent;
    }
    @Override protected PendingIntent newPendingIntent(    Context context){
      return null;
    }
  }
;
  system.setConfig(config);
  system.setNotificationRegistrationState(notificationRegistrationState);
  system.registerC2DM(context);
  AndroidMock.verify(notificationRegistrationState,config,context,registrationIntent);
}",0.9753602975360296
177782,"public void startSocialize(final boolean isMock){
  final ProgressDialog progress=SafeProgressDialog.show(Main.this,""String_Node_Str"",""String_Node_Str"");
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... params){
      if (isMock) {
        Socialize.init(Main.this,""String_Node_Str"",""String_Node_Str"");
      }
 else {
        Socialize.init(Main.this);
      }
      return null;
    }
    @Override protected void onPostExecute(    Void result){
      progress.dismiss();
      Intent i=new Intent(Main.this,AuthenticateActivity.class);
      startActivity(i);
    }
  }
.execute((Void)null);
}","public void startSocialize(final boolean isMock){
  final ProgressDialog progress=SafeProgressDialog.show(Main.this,""String_Node_Str"",""String_Node_Str"");
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... params){
      if (isMock) {
        SocializeAccess.init(Main.this,""String_Node_Str"",""String_Node_Str"");
      }
 else {
        Socialize.init(Main.this);
      }
      return null;
    }
    @Override protected void onPostExecute(    Void result){
      progress.dismiss();
      Intent i=new Intent(Main.this,AuthenticateActivity.class);
      startActivity(i);
    }
  }
.execute((Void)null);
}",0.9953198127925116
177783,"@Override protected Void doInBackground(Void... params){
  if (isMock) {
    Socialize.init(Main.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    Socialize.init(Main.this);
  }
  return null;
}","@Override protected Void doInBackground(Void... params){
  if (isMock) {
    SocializeAccess.init(Main.this,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    Socialize.init(Main.this);
  }
  return null;
}",0.9854368932038836
177784,"protected void invoke(Activity context,SocializeListener listener,String delegateBean,Method method,Object[] args) throws Throwable {
  SocializeService service=getSocialize();
  if (!service.isInitialized()) {
    doInitAsync(context,listener,delegateBean,method,args);
  }
 else   if (!service.isAuthenticated()) {
    doAuthAsync(context,listener,delegateBean,method,args);
  }
 else {
    method.invoke(Socialize.getBean(delegateBean),args);
  }
}","protected void invoke(Activity context,SocializeListener listener,String delegateBean,Method method,Object[] args) throws Throwable {
  SocializeService service=getSocialize();
  if (!service.isInitialized(context)) {
    doInitAsync(context,listener,delegateBean,method,args);
  }
 else   if (!service.isAuthenticated()) {
    doAuthAsync(context,listener,delegateBean,method,args);
  }
 else {
    method.invoke(Socialize.getBean(delegateBean),args);
  }
}",0.9922992299229924
177785,"protected synchronized <L extends SocializeListener>void doInitAsync(final Activity context,final SocializeListener listener,final String delegateBean,final Method method,final Object[] args) throws Throwable {
  final SocializeService service=getSocialize();
  if (!service.isInitialized()) {
synchronized (this) {
      if (!service.isInitialized()) {
        context.runOnUiThread(new Runnable(){
          @Override public void run(){
            service.initAsync(context,new SocializeInitListener(){
              @Override public void onError(              SocializeException error){
                if (listener != null) {
                  listener.onError(error);
                }
              }
              @Override public void onInit(              Context ctx,              IOCContainer container){
                try {
                  invoke(context,listener,delegateBean,method,args);
                }
 catch (                Throwable e) {
                  if (listener != null) {
                    listener.onError(SocializeException.wrap(e));
                  }
                }
              }
            }
);
          }
        }
);
      }
 else {
        invoke(context,listener,delegateBean,method,args);
      }
    }
  }
 else {
    invoke(context,listener,delegateBean,method,args);
  }
}","protected synchronized <L extends SocializeListener>void doInitAsync(final Activity context,final SocializeListener listener,final String delegateBean,final Method method,final Object[] args) throws Throwable {
  final SocializeService service=getSocialize();
  if (!service.isInitialized(context)) {
synchronized (this) {
      if (!service.isInitialized(context)) {
        context.runOnUiThread(new Runnable(){
          @Override public void run(){
            service.initAsync(context,new SocializeInitListener(){
              @Override public void onError(              SocializeException error){
                if (listener != null) {
                  listener.onError(error);
                }
              }
              @Override public void onInit(              Context ctx,              IOCContainer container){
                try {
                  invoke(context,listener,delegateBean,method,args);
                }
 catch (                Throwable e) {
                  if (listener != null) {
                    listener.onError(SocializeException.wrap(e));
                  }
                }
              }
            }
);
          }
        }
);
      }
 else {
        invoke(context,listener,delegateBean,method,args);
      }
    }
  }
 else {
    invoke(context,listener,delegateBean,method,args);
  }
}",0.994760479041916
177786,"/** 
 * Returns true if this SocializeService instance has been initialized.   PLEASE NOTE: Init should always be called so that each corresponding call to destroy is matched.
 * @return true if this SocializeService instance has been initialized.  
 */
public boolean isInitialized();","/** 
 * Returns true if this SocializeService instance has been initialized.  
 * @param context The current context.
 * @return true if this SocializeService instance has been initialized.  
 */
public boolean isInitialized(Context context);",0.4554079696394686
177787,"protected synchronized void authenticate(Context context,String consumerKey,String consumerSecret,AuthProviderData authProviderData,SocializeAuthListener authListener,boolean do3rdPartyAuth){
  if (checkKeys(consumerKey,consumerSecret,authListener)) {
    if (assertInitialized(authListener)) {
      userSystem.authenticate(context,consumerKey,consumerSecret,authProviderData,authListener,this,do3rdPartyAuth);
    }
  }
}","protected synchronized void authenticate(Context context,String consumerKey,String consumerSecret,AuthProviderData authProviderData,SocializeAuthListener authListener,boolean do3rdPartyAuth){
  if (checkKeys(consumerKey,consumerSecret,authListener)) {
    if (assertInitialized(context,authListener)) {
      userSystem.authenticate(context,consumerKey,consumerSecret,authProviderData,authListener,this,do3rdPartyAuth);
    }
  }
}",0.990632318501171
177788,"protected boolean assertInitialized(SocializeListener listener){
  if (asserter != null) {
    return asserter.assertInitialized(this,listener);
  }
  if (!isInitialized()) {
    if (listener != null) {
      if (logger != null && logger.isInitialized()) {
        listener.onError(new SocializeException(logger.getMessage(SocializeLogger.NOT_INITIALIZED)));
      }
 else {
        listener.onError(new SocializeException(""String_Node_Str""));
      }
    }
    if (logger != null) {
      if (logger.isInitialized()) {
        logger.error(SocializeLogger.NOT_INITIALIZED);
      }
 else {
        logger.error(""String_Node_Str"");
      }
    }
  }
  return isInitialized();
}","protected boolean assertInitialized(Context context,SocializeListener listener){
  if (asserter != null) {
    return asserter.assertInitialized(context,this,listener);
  }
  if (!isInitialized()) {
    if (listener != null) {
      if (logger != null && logger.isInitialized()) {
        listener.onError(new SocializeException(logger.getMessage(SocializeLogger.NOT_INITIALIZED)));
      }
 else {
        listener.onError(new SocializeException(""String_Node_Str""));
      }
    }
    if (logger != null) {
      if (logger.isInitialized()) {
        logger.error(SocializeLogger.NOT_INITIALIZED);
      }
 else {
        logger.error(""String_Node_Str"");
      }
    }
  }
  return isInitialized();
}",0.9825834542815676
177789,"protected boolean assertAuthenticated(SocializeListener listener){
  if (asserter != null) {
    return asserter.assertAuthenticated(this,session,listener);
  }
  if (assertInitialized(listener)) {
    if (session != null) {
      return true;
    }
 else {
      if (listener != null) {
        if (logger != null && logger.isInitialized()) {
          listener.onError(new SocializeException(logger.getMessage(SocializeLogger.NOT_AUTHENTICATED)));
        }
 else {
          listener.onError(new SocializeException(""String_Node_Str""));
        }
      }
      if (logger != null && logger.isInitialized()) {
        logger.error(SocializeLogger.NOT_AUTHENTICATED);
      }
 else {
        System.err.println(""String_Node_Str"");
      }
    }
  }
  return false;
}","protected boolean assertAuthenticated(SocializeListener listener){
  if (asserter != null) {
    return asserter.assertAuthenticated(this,session,listener);
  }
  if (session != null) {
    return true;
  }
 else {
    if (listener != null) {
      if (logger != null && logger.isInitialized()) {
        listener.onError(new SocializeException(logger.getMessage(SocializeLogger.NOT_AUTHENTICATED)));
      }
 else {
        listener.onError(new SocializeException(""String_Node_Str""));
      }
    }
    if (logger != null && logger.isInitialized()) {
      logger.error(SocializeLogger.NOT_AUTHENTICATED);
    }
 else {
      System.err.println(""String_Node_Str"");
    }
  }
  return false;
}",0.8978752570253599
177790,"@Override public void authenticateKnownUser(Context context,UserProviderCredentials userProviderCredentials,SocializeAuthListener authListener){
  if (assertInitialized(authListener)) {
    String consumerKey=config.getProperty(SocializeConfig.SOCIALIZE_CONSUMER_KEY);
    String consumerSecret=config.getProperty(SocializeConfig.SOCIALIZE_CONSUMER_SECRET);
    AuthProviderData authProviderData=this.authProviderDataFactory.getBean();
    authProviderData.setAuthProviderInfo(userProviderCredentials.getAuthProviderInfo());
    authProviderData.setToken3rdParty(userProviderCredentials.getAccessToken());
    authProviderData.setSecret3rdParty(userProviderCredentials.getTokenSecret());
    authProviderData.setUserId3rdParty(userProviderCredentials.getUserId());
    authenticate(context,consumerKey,consumerSecret,authProviderData,authListener,false);
  }
}","@Override public void authenticateKnownUser(Context context,UserProviderCredentials userProviderCredentials,SocializeAuthListener authListener){
  if (assertInitialized(context,authListener)) {
    String consumerKey=config.getProperty(SocializeConfig.SOCIALIZE_CONSUMER_KEY);
    String consumerSecret=config.getProperty(SocializeConfig.SOCIALIZE_CONSUMER_SECRET);
    AuthProviderData authProviderData=this.authProviderDataFactory.getBean();
    authProviderData.setAuthProviderInfo(userProviderCredentials.getAuthProviderInfo());
    authProviderData.setToken3rdParty(userProviderCredentials.getAccessToken());
    authProviderData.setSecret3rdParty(userProviderCredentials.getTokenSecret());
    authProviderData.setUserId3rdParty(userProviderCredentials.getUserId());
    authenticate(context,consumerKey,consumerSecret,authProviderData,authListener,false);
  }
}",0.9953703703703703
177791,"@Override public boolean isInitialized(){
  return this.initCount > 0;
}","@Override public boolean isInitialized(Context context){
  return this.initCount > 0 && container.getContext() == context;
}",0.7346938775510204
177792,"/** 
 * Clears the saved session state for the user.   WARNING: This will wipe any locally saved preferences for this user.
 * @param context
 */
public static void clearCache(Context context){
  if (!Socialize.getSocialize().isInitialized()) {
    Socialize.getSocialize().init(context);
  }
  Socialize.getSocialize().clearSessionCache(context);
}","/** 
 * Clears the saved session state for the user.   WARNING: This will wipe any locally saved preferences for this user.
 * @param context
 */
public static void clearCache(Context context){
  if (!Socialize.getSocialize().isInitialized(context)) {
    Socialize.getSocialize().init(context);
  }
  Socialize.getSocialize().clearSessionCache(context);
}",0.9900709219858156
177793,"public static void unregisterProxy(String name){
  Container.unregisterProxy(name);
}","/** 
 * Remove a previously registered proxy.
 * @param name
 */
public static void unregisterProxy(String name){
  Container.unregisterProxy(name);
}",0.723404255319149
177794,"public static void registerProxy(String name,Object proxy){
  Container.registerProxy(name,proxy);
}","/** 
 * Registers a static proxy for the bean with the given name. This method should be called BEFORE the container is initialized.   Calling this method after container initialization will do nothing.
 * @param name
 * @param proxy
 */
public static void registerProxy(String name,Object proxy){
  Container.registerProxy(name,proxy);
}",0.45662100456621
177795,"protected <T extends Object>void setRuntimeProxyInternal(String name,T bean,boolean isStatic){
  BeanRef beanRef=getBeanRef(name);
  if (beanRef != null) {
    if (!beanRef.isSingleton() || isStatic) {
      if (this.mapping.hasProxy(name)) {
        Logger.w(getClass().getSimpleName(),""String_Node_Str"" + name + ""String_Node_Str"");
      }
      mapping.addProxyRef(name);
      ProxyObject<T> proxy=new ProxyObject<T>();
      proxy.setDelegate(bean);
      proxies.put(name,proxy);
    }
 else {
      Logger.w(getClass().getSimpleName(),""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
 else {
    Logger.e(getClass().getSimpleName(),""String_Node_Str"" + name + ""String_Node_Str"");
  }
}","protected <T extends Object>void setRuntimeProxyInternal(String name,T bean,boolean isStatic){
  BeanRef beanRef=getBeanRef(name);
  if (beanRef != null) {
    if (!beanRef.isSingleton() || isStatic) {
      if (this.mapping.hasProxy(name)) {
        Logger.w(getClass().getSimpleName(),""String_Node_Str"" + name + ""String_Node_Str"");
      }
      mapping.addProxyRef(name);
      ProxyObject<T> proxy=new ProxyObject<T>();
      proxy.setDelegate(bean);
      proxy.setStaticProxy(isStatic);
      proxies.put(name,proxy);
    }
 else {
      Logger.w(getClass().getSimpleName(),""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
 else {
    Logger.e(getClass().getSimpleName(),""String_Node_Str"" + name + ""String_Node_Str"");
  }
}",0.9735376044568244
177796,"@Override public boolean assertInitialized(SocializeService service,SocializeListener listener){
  boolean initialized=service.isInitialized();
  if (!initialized) {
    if (listener != null) {
      if (logger != null) {
        listener.onError(new SocializeException(logger.getMessage(SocializeLogger.NOT_INITIALIZED)));
      }
 else {
        listener.onError(new SocializeException(""String_Node_Str""));
      }
    }
    if (logger != null)     logger.error(SocializeLogger.NOT_INITIALIZED);
  }
  return initialized;
}","@Override public boolean assertInitialized(Context context,SocializeService service,SocializeListener listener){
  boolean initialized=service.isInitialized(context);
  if (!initialized) {
    if (listener != null) {
      if (logger != null) {
        listener.onError(new SocializeException(logger.getMessage(SocializeLogger.NOT_INITIALIZED)));
      }
 else {
        listener.onError(new SocializeException(""String_Node_Str""));
      }
    }
    if (logger != null)     logger.error(SocializeLogger.NOT_INITIALIZED);
  }
  return initialized;
}",0.97856477166822
177797,"@Override public boolean assertAuthenticated(SocializeService service,SocializeSession session,SocializeListener listener){
  if (assertInitialized(service,listener)) {
    if (session != null) {
      return true;
    }
 else {
      if (listener != null) {
        if (logger != null) {
          listener.onError(new SocializeException(logger.getMessage(SocializeLogger.NOT_AUTHENTICATED)));
        }
 else {
          listener.onError(new SocializeException(""String_Node_Str""));
        }
      }
      if (logger != null)       logger.error(SocializeLogger.NOT_AUTHENTICATED);
    }
  }
  return false;
}","@Override public boolean assertAuthenticated(SocializeService service,SocializeSession session,SocializeListener listener){
  if (session != null) {
    return true;
  }
 else {
    if (listener != null) {
      if (logger != null) {
        listener.onError(new SocializeException(logger.getMessage(SocializeLogger.NOT_AUTHENTICATED)));
      }
 else {
        listener.onError(new SocializeException(""String_Node_Str""));
      }
    }
    if (logger != null)     logger.error(SocializeLogger.NOT_AUTHENTICATED);
  }
  return false;
}",0.9100436681222708
177798,"public boolean assertInitialized(SocializeService service,SocializeListener listener);","public boolean assertInitialized(Context context,SocializeService service,SocializeListener listener);",0.9148936170212766
177799,"@Override public boolean assertInitialized(SocializeListener listener){
  return super.assertInitialized(listener);
}","@Override public boolean assertInitialized(Context context,SocializeListener listener){
  return super.assertInitialized(context,listener);
}",0.9069767441860463
177800,"@Override public boolean assertInitialized(SocializeService service,SocializeListener listener){
  return true;
}","@Override public boolean assertInitialized(Context context,SocializeService service,SocializeListener listener){
  return true;
}",0.9338842975206612
177801,"@SuppressWarnings(""String_Node_Str"") @UsesMocks({Comment.class,ProgressDialog.class,DialogFactory.class,CommentAdapter.class,List.class,View.class,SocializeHeader.class,LoadingListView.class,SocializeSession.class,Entity.class}) public void testPostCommentSuccess(){
  final String title=""String_Node_Str"";
  final String message=""String_Node_Str"";
  final int totalCount=69;
  final int startIndex=0;
  final int endIndex=10;
  final String commentString=""String_Node_Str"";
  boolean shareLocation=true;
  final Comment comment=AndroidMock.createMock(Comment.class);
  final ProgressDialog dialog=AndroidMock.createMock(ProgressDialog.class,getActivity());
  final DialogFactory<ProgressDialog> progressDialogFactory=AndroidMock.createMock(DialogFactory.class);
  final CommentAdapter commentAdapter=AndroidMock.createMock(CommentAdapter.class);
  final List<Comment> comments=AndroidMock.createMock(List.class);
  final View field=AndroidMock.createMock(View.class,getContext());
  final SocializeHeader header=AndroidMock.createMock(SocializeHeader.class,getContext());
  final LoadingListView content=AndroidMock.createMock(LoadingListView.class,getContext());
  final Entity entity=AndroidMock.createMock(Entity.class);
  final SocializeSession session=AndroidMock.createMock(SocializeSession.class);
  AndroidMock.expect(progressDialogFactory.show(getContext(),title,message)).andReturn(dialog);
  comment.setText(commentString);
  comment.setNotificationsEnabled(false);
  comment.setEntity(entity);
  AndroidMock.expect(comment.getText()).andReturn(commentString);
  AndroidMock.expect(commentAdapter.getComments()).andReturn(comments);
  AndroidMock.expect(commentAdapter.getTotalCount()).andReturn(totalCount).anyTimes();
  comments.add(0,comment);
  header.setText((totalCount) + ""String_Node_Str"");
  commentAdapter.setTotalCount((totalCount + 1));
  commentAdapter.notifyDataSetChanged();
  content.scrollToTop();
  dialog.dismiss();
  AndroidMock.replay(progressDialogFactory);
  AndroidMock.replay(commentAdapter);
  AndroidMock.replay(comment);
  AndroidMock.replay(comments);
  AndroidMock.replay(header);
  AndroidMock.replay(field);
  AndroidMock.replay(content);
  AndroidMock.replay(dialog);
  final PublicSocialize socialize=new PublicSocialize(){
    @Override public void addComment(    Activity activity,    Comment comment,    ShareOptions shareOptions,    CommentAddListener commentAddListener){
      assertEquals(commentString,comment.getText());
      commentAddListener.onCreate(comment);
    }
    @Override public boolean isAuthenticated(    AuthProviderType providerType){
      return providerType.equals(AuthProviderType.FACEBOOK);
    }
    @Override public boolean assertAuthenticated(    SocializeListener listener){
      return true;
    }
    @Override public boolean assertInitialized(    SocializeListener listener){
      return true;
    }
    @Override public Comment newComment(){
      return comment;
    }
  }
;
  PublicCommentListView view=new PublicCommentListView(getActivity()){
    @Override protected SocializeService getSocialize(){
      return socialize;
    }
    @Override public Comment newComment(){
      return comment;
    }
  }
;
  socialize.setSession(session);
  view.setCommentAdapter(commentAdapter);
  view.setProgressDialogFactory(progressDialogFactory);
  view.setHeader(header);
  view.setField(field);
  view.setContent(content);
  view.setStartIndex(startIndex);
  view.setEndIndex(endIndex);
  view.setEntity(entity);
  view.doPostComment(commentString,shareLocation,false,SocialNetwork.FACEBOOK);
  AndroidMock.verify(progressDialogFactory);
  AndroidMock.verify(commentAdapter);
  AndroidMock.verify(comment);
  AndroidMock.verify(comments);
  AndroidMock.verify(header);
  AndroidMock.verify(field);
  AndroidMock.verify(content);
  AndroidMock.verify(dialog);
  assertEquals(startIndex + 1,view.getStartIndex());
  assertEquals(endIndex + 1,view.getEndIndex());
}","@SuppressWarnings(""String_Node_Str"") @UsesMocks({Comment.class,ProgressDialog.class,DialogFactory.class,CommentAdapter.class,List.class,View.class,SocializeHeader.class,LoadingListView.class,SocializeSession.class,Entity.class}) public void testPostCommentSuccess(){
  final String title=""String_Node_Str"";
  final String message=""String_Node_Str"";
  final int totalCount=69;
  final int startIndex=0;
  final int endIndex=10;
  final String commentString=""String_Node_Str"";
  boolean shareLocation=true;
  final Comment comment=AndroidMock.createMock(Comment.class);
  final ProgressDialog dialog=AndroidMock.createMock(ProgressDialog.class,getActivity());
  final DialogFactory<ProgressDialog> progressDialogFactory=AndroidMock.createMock(DialogFactory.class);
  final CommentAdapter commentAdapter=AndroidMock.createMock(CommentAdapter.class);
  final List<Comment> comments=AndroidMock.createMock(List.class);
  final View field=AndroidMock.createMock(View.class,getContext());
  final SocializeHeader header=AndroidMock.createMock(SocializeHeader.class,getContext());
  final LoadingListView content=AndroidMock.createMock(LoadingListView.class,getContext());
  final Entity entity=AndroidMock.createMock(Entity.class);
  final SocializeSession session=AndroidMock.createMock(SocializeSession.class);
  AndroidMock.expect(progressDialogFactory.show(getContext(),title,message)).andReturn(dialog);
  comment.setText(commentString);
  comment.setNotificationsEnabled(false);
  comment.setEntity(entity);
  AndroidMock.expect(comment.getText()).andReturn(commentString);
  AndroidMock.expect(commentAdapter.getComments()).andReturn(comments);
  AndroidMock.expect(commentAdapter.getTotalCount()).andReturn(totalCount).anyTimes();
  comments.add(0,comment);
  header.setText((totalCount) + ""String_Node_Str"");
  commentAdapter.setTotalCount((totalCount + 1));
  commentAdapter.notifyDataSetChanged();
  content.scrollToTop();
  dialog.dismiss();
  AndroidMock.replay(progressDialogFactory);
  AndroidMock.replay(commentAdapter);
  AndroidMock.replay(comment);
  AndroidMock.replay(comments);
  AndroidMock.replay(header);
  AndroidMock.replay(field);
  AndroidMock.replay(content);
  AndroidMock.replay(dialog);
  final PublicSocialize socialize=new PublicSocialize(){
    @Override public void addComment(    Activity activity,    Comment comment,    ShareOptions shareOptions,    CommentAddListener commentAddListener){
      assertEquals(commentString,comment.getText());
      commentAddListener.onCreate(comment);
    }
    @Override public boolean isAuthenticated(    AuthProviderType providerType){
      return providerType.equals(AuthProviderType.FACEBOOK);
    }
    @Override public boolean assertAuthenticated(    SocializeListener listener){
      return true;
    }
    @Override public boolean assertInitialized(    Context context,    SocializeListener listener){
      return true;
    }
    @Override public Comment newComment(){
      return comment;
    }
  }
;
  PublicCommentListView view=new PublicCommentListView(getActivity()){
    @Override protected SocializeService getSocialize(){
      return socialize;
    }
    @Override public Comment newComment(){
      return comment;
    }
  }
;
  socialize.setSession(session);
  view.setCommentAdapter(commentAdapter);
  view.setProgressDialogFactory(progressDialogFactory);
  view.setHeader(header);
  view.setField(field);
  view.setContent(content);
  view.setStartIndex(startIndex);
  view.setEndIndex(endIndex);
  view.setEntity(entity);
  view.doPostComment(commentString,shareLocation,false,SocialNetwork.FACEBOOK);
  AndroidMock.verify(progressDialogFactory);
  AndroidMock.verify(commentAdapter);
  AndroidMock.verify(comment);
  AndroidMock.verify(comments);
  AndroidMock.verify(header);
  AndroidMock.verify(field);
  AndroidMock.verify(content);
  AndroidMock.verify(dialog);
  assertEquals(startIndex + 1,view.getStartIndex());
  assertEquals(endIndex + 1,view.getEndIndex());
}",0.9974721941354904
177802,"@Override public boolean assertInitialized(SocializeListener listener){
  return true;
}","@Override public boolean assertInitialized(Context context,SocializeListener listener){
  return true;
}",0.9166666666666666
177803,"protected void invoke(Activity context,SocializeListener listener,String delegateBean,Method method,Object[] args) throws Throwable {
  SocializeService service=getSocialize();
  if (!service.isInitialized()) {
    doInit(context,listener,delegateBean,method,args);
  }
 else   if (!service.isAuthenticated()) {
    doAuth(context,listener,delegateBean,method,args);
  }
 else {
    method.invoke(Socialize.getBean(delegateBean),args);
  }
}","protected void invoke(Activity context,SocializeListener listener,String delegateBean,Method method,Object[] args) throws Throwable {
  SocializeService service=getSocialize();
  if (!service.isInitialized()) {
    doInitAsync(context,listener,delegateBean,method,args);
  }
 else   if (!service.isAuthenticated()) {
    doAuthAsync(context,listener,delegateBean,method,args);
  }
 else {
    method.invoke(Socialize.getBean(delegateBean),args);
  }
}",0.9887892376681614
177804,"/** 
 * Authenticates the application against the API as a user known to your app from a given 3rd party provider.
 * @param context The current context.
 * @param consumerKey The consumer key, obtained from registration at http://www.getsocialize.com.
 * @param consumerSecret The consumer secret, obtained from registration at http://www.getsocialize.com.
 * @param authProviderInfo Information about the auth provider to be used. 
 * @param userProviderCredentials Information about the user being authed.
 * @param authListener The callback for authentication outcomes.
 */
public void authenticateKnownUser(Context context,String consumerKey,String consumerSecret,AuthProviderInfo authProviderInfo,UserProviderCredentials userProviderCredentials,SocializeAuthListener authListener);","/** 
 * Authenticates the application against the API as a user known to your app from a given 3rd party provider.
 * @param context The current context.
 * @param userProviderCredentials Information about the user being authed.
 * @param authListener The callback for authentication outcomes.
 */
public void authenticateKnownUser(Context context,UserProviderCredentials userProviderCredentials,SocializeAuthListener authListener);",0.6316652994257588
177805,"@Override public synchronized void authenticateKnownUser(Context context,String consumerKey,String consumerSecret,AuthProviderInfo authProviderInfo,UserProviderCredentials userProviderCredentials,SocializeAuthListener authListener){
  if (assertInitialized(authListener)) {
    AuthProviderData authProviderData=this.authProviderDataFactory.getBean();
    authProviderData.setAuthProviderInfo(authProviderInfo);
    authProviderData.setToken3rdParty(userProviderCredentials.getAccessToken());
    authProviderData.setSecret3rdParty(userProviderCredentials.getTokenSecret());
    authProviderData.setUserId3rdParty(userProviderCredentials.getUserId());
    authenticate(context,consumerKey,consumerSecret,authProviderData,authListener,false);
  }
}","@Override public void authenticateKnownUser(Context context,UserProviderCredentials userProviderCredentials,SocializeAuthListener authListener){
  if (assertInitialized(authListener)) {
    String consumerKey=config.getProperty(SocializeConfig.SOCIALIZE_CONSUMER_KEY);
    String consumerSecret=config.getProperty(SocializeConfig.SOCIALIZE_CONSUMER_SECRET);
    AuthProviderData authProviderData=this.authProviderDataFactory.getBean();
    authProviderData.setAuthProviderInfo(userProviderCredentials.getAuthProviderInfo());
    authProviderData.setToken3rdParty(userProviderCredentials.getAccessToken());
    authProviderData.setSecret3rdParty(userProviderCredentials.getTokenSecret());
    authProviderData.setUserId3rdParty(userProviderCredentials.getUserId());
    authenticate(context,consumerKey,consumerSecret,authProviderData,authListener,false);
  }
}",0.1244555071561916
177806,"@Override public WritableSession load(Context context){
  SharedPreferences prefs=context.getSharedPreferences(PREFERENCES,Context.MODE_PRIVATE);
  String key=prefs.getString(""String_Node_Str"",null);
  String secret=prefs.getString(""String_Node_Str"",null);
  UserProviderCredentialsMap userProviderCredentials=loadUserProviderCredentials(prefs);
  WritableSession session=sessionFactory.create(key,secret,userProviderCredentials);
  session.setConsumerToken(prefs.getString(""String_Node_Str"",null));
  session.setConsumerTokenSecret(prefs.getString(""String_Node_Str"",null));
  String userJson=prefs.getString(""String_Node_Str"",null);
  if (userJson != null) {
    try {
      JSONObject json=new JSONObject(userJson);
      User user=userFactory.fromJSON(json);
      session.setUser(user);
    }
 catch (    JSONException e) {
      if (logger != null) {
        logger.error(""String_Node_Str"",e);
      }
 else {
        e.printStackTrace();
      }
    }
  }
  return session;
}","@Override public WritableSession load(Context context){
  SharedPreferences prefs=context.getSharedPreferences(PREFERENCES,Context.MODE_PRIVATE);
  String key=prefs.getString(""String_Node_Str"",null);
  String secret=prefs.getString(""String_Node_Str"",null);
  UserProviderCredentialsMap userProviderCredentials=loadUserProviderCredentials(prefs);
  WritableSession session=sessionFactory.create(key,secret,userProviderCredentials);
  session.setRestored(true);
  session.setConsumerToken(prefs.getString(""String_Node_Str"",null));
  session.setConsumerTokenSecret(prefs.getString(""String_Node_Str"",null));
  String userJson=prefs.getString(""String_Node_Str"",null);
  if (userJson != null) {
    try {
      JSONObject json=new JSONObject(userJson);
      User user=userFactory.fromJSON(json);
      session.setUser(user);
    }
 catch (    JSONException e) {
      if (logger != null) {
        logger.error(""String_Node_Str"",e);
      }
 else {
        e.printStackTrace();
      }
    }
  }
  return session;
}",0.9854344550477148
177807,"public SocializeSession authenticate(Context context,String endpoint,String key,String secret,AuthProviderData data,String udid) throws SocializeException {
  SocializeSession session=provider.authenticate(endpoint,key,secret,data,udid);
  checkNotifications(context,session);
  return session;
}","public SocializeSession authenticate(Context context,String endpoint,String key,String secret,AuthProviderData data,String udid) throws SocializeException {
  SocializeSession session=provider.authenticate(endpoint,key,secret,data,udid);
  if (!session.isRestored()) {
    checkNotifications(context,session);
  }
  return session;
}",0.9411764705882352
177808,"protected void handleRegularAuth(Context context,SocializeAuthRequest request,SocializeActionListener wrapper,SocializeAuthListener listener,String key,String secret,boolean force){
  SocializeSession session=null;
  if (!force) {
    try {
      session=loadSession(request.getEndpoint(),key,secret);
    }
 catch (    SocializeException e) {
      logger.warn(""String_Node_Str"",e);
    }
  }
  if (session != null) {
    if (logger != null && logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + session.getUser().getId() + ""String_Node_Str"");
    }
    if (listener != null) {
      listener.onAuthSuccess(session);
    }
  }
 else {
    AsyncAuthenicator authenicator=new AsyncAuthenicator(context,null,wrapper);
    authenicator.execute(request);
  }
}","protected void handleRegularAuth(Context context,SocializeAuthRequest request,SocializeActionListener wrapper,SocializeAuthListener listener,String key,String secret){
  AsyncAuthenicator authenicator=new AsyncAuthenicator(context,null,wrapper);
  authenicator.execute(request);
}",0.3485714285714286
177809,"protected void handle3rdPartyAuth(final Context context,final SocializeAuthRequest request,final SocializeActionListener wrapper,final SocializeAuthListener listener,final String key,final String secret){
  final AuthProviderData authProviderData=request.getAuthProviderData();
  SocializeSession session=null;
  AuthProviderType authProviderType=getAuthProviderType(authProviderData);
  try {
    validate(authProviderData);
  }
 catch (  SocializeException error) {
    if (listener != null) {
      listener.onError(error);
    }
 else     if (logger != null) {
      logger.error(""String_Node_Str"",error);
    }
  }
  try {
    session=loadSession(request.getEndpoint(),key,secret);
  }
 catch (  SocializeException e) {
    logger.warn(""String_Node_Str"",e);
  }
  if (session == null || !provider.validateSession(session,authProviderData)) {
    AuthProvider<AuthProviderInfo> authProvider=authProviders.getProvider(authProviderType);
    if (authProvider != null) {
      AuthProviderListener authProviderListener=new AuthProviderListener(){
        @Override public void onError(        SocializeException error){
          if (listener != null) {
            listener.onError(error);
          }
        }
        @Override public void onAuthSuccess(        AuthProviderResponse response){
          authProviderData.setUserId3rdParty(response.getUserId());
          authProviderData.setToken3rdParty(response.getToken());
          authProviderData.setSecret3rdParty(response.getSecret());
          handleRegularAuth(context,request,wrapper,listener,key,secret,true);
        }
        @Override public void onAuthFail(        SocializeException error){
          if (listener != null) {
            listener.onAuthFail(error);
          }
        }
        @Override public void onCancel(){
          if (listener != null) {
            listener.onCancel();
          }
        }
      }
;
      AuthProviderInfo authProviderInfo=authProviderData.getAuthProviderInfo();
      if (authProviderInfo != null) {
        authProvider.authenticate(authProviderInfo,authProviderListener);
      }
 else {
        if (listener != null) {
          listener.onError(new SocializeException(""String_Node_Str""));
        }
        logger.error(""String_Node_Str"");
      }
    }
 else {
      logger.error(""String_Node_Str"" + authProviderType.getName() + ""String_Node_Str"");
    }
  }
 else {
    if (listener != null) {
      listener.onAuthSuccess(session);
    }
  }
}","protected void handle3rdPartyAuth(final Context context,final SocializeAuthRequest request,final SocializeActionListener wrapper,final SocializeAuthListener listener,final String key,final String secret){
  final AuthProviderData authProviderData=request.getAuthProviderData();
  SocializeSession session=null;
  AuthProviderType authProviderType=getAuthProviderType(authProviderData);
  try {
    validate(authProviderData);
  }
 catch (  SocializeException error) {
    if (listener != null) {
      listener.onError(error);
    }
 else     if (logger != null) {
      logger.error(""String_Node_Str"",error);
    }
  }
  try {
    session=loadSession(request.getEndpoint(),key,secret);
  }
 catch (  SocializeException e) {
    logger.warn(""String_Node_Str"",e);
  }
  if (session == null || !provider.validateSession(session,authProviderData)) {
    AuthProvider<AuthProviderInfo> authProvider=authProviders.getProvider(authProviderType);
    if (authProvider != null) {
      AuthProviderListener authProviderListener=new AuthProviderListener(){
        @Override public void onError(        SocializeException error){
          if (listener != null) {
            listener.onError(error);
          }
        }
        @Override public void onAuthSuccess(        AuthProviderResponse response){
          authProviderData.setUserId3rdParty(response.getUserId());
          authProviderData.setToken3rdParty(response.getToken());
          authProviderData.setSecret3rdParty(response.getSecret());
          handleRegularAuth(context,request,wrapper,listener,key,secret);
        }
        @Override public void onAuthFail(        SocializeException error){
          if (listener != null) {
            listener.onAuthFail(error);
          }
        }
        @Override public void onCancel(){
          if (listener != null) {
            listener.onCancel();
          }
        }
      }
;
      AuthProviderInfo authProviderInfo=authProviderData.getAuthProviderInfo();
      if (authProviderInfo != null) {
        authProvider.authenticate(authProviderInfo,authProviderListener);
      }
 else {
        if (listener != null) {
          listener.onError(new SocializeException(""String_Node_Str""));
        }
        logger.error(""String_Node_Str"");
      }
    }
 else {
      logger.error(""String_Node_Str"" + authProviderType.getName() + ""String_Node_Str"");
    }
  }
 else {
    if (listener != null) {
      listener.onAuthSuccess(session);
    }
  }
}",0.9989868287740628
177810,"@Override public void onAuthSuccess(AuthProviderResponse response){
  authProviderData.setUserId3rdParty(response.getUserId());
  authProviderData.setToken3rdParty(response.getToken());
  authProviderData.setSecret3rdParty(response.getSecret());
  handleRegularAuth(context,request,wrapper,listener,key,secret,true);
}","@Override public void onAuthSuccess(AuthProviderResponse response){
  authProviderData.setUserId3rdParty(response.getUserId());
  authProviderData.setToken3rdParty(response.getToken());
  authProviderData.setSecret3rdParty(response.getSecret());
  handleRegularAuth(context,request,wrapper,listener,key,secret);
}",0.9920760697305864
177811,"public void authenticateAsync(Context context,String key,String secret,String uuid,final AuthProviderData data,final SocializeAuthListener listener,final SocializeSessionConsumer sessionConsumer,boolean do3rdPartyAuth){
  SocializeActionListener wrapper=null;
  final SocializeAuthListener localListener=new SocializeAuthListener(){
    @Override public void onError(    SocializeException error){
      if (listener != null) {
        listener.onError(error);
      }
 else {
        if (logger != null) {
          logger.error(""String_Node_Str"",error);
        }
      }
    }
    @Override public void onCancel(){
      if (listener != null) {
        listener.onCancel();
      }
    }
    @Override public void onAuthSuccess(    SocializeSession session){
      if (sessionConsumer != null) {
        sessionConsumer.setSession(session);
      }
      if (listener != null) {
        listener.onAuthSuccess(session);
      }
    }
    @Override public void onAuthFail(    SocializeException error){
      if (listener != null) {
        listener.onAuthFail(error);
      }
 else {
        if (logger != null) {
          logger.error(""String_Node_Str"",error);
        }
      }
    }
  }
;
  wrapper=new SocializeActionListener(){
    @Override public void onResult(    RequestType type,    SocializeResponse response){
      SocializeAuthResponse authResponse=(SocializeAuthResponse)response;
      localListener.onAuthSuccess(authResponse.getSession());
    }
    @Override public void onError(    SocializeException error){
      if (httpUtils != null && httpUtils.isAuthError(error)) {
        localListener.onAuthFail(error);
      }
 else {
        localListener.onError(error);
      }
    }
  }
;
  final SocializeAuthRequest request=new SocializeAuthRequest();
  request.setEndpoint(""String_Node_Str"");
  request.setConsumerKey(key);
  request.setConsumerSecret(secret);
  request.setUdid(uuid);
  request.setAuthProviderData(data);
  AuthProviderType authProviderType=getAuthProviderType(data);
  if (do3rdPartyAuth && !authProviderType.equals(AuthProviderType.SOCIALIZE)) {
    handle3rdPartyAuth(context,request,wrapper,localListener,key,secret);
  }
 else {
    handleRegularAuth(context,request,wrapper,localListener,key,secret,false);
  }
}","public void authenticateAsync(Context context,String key,String secret,String uuid,final AuthProviderData data,final SocializeAuthListener listener,final SocializeSessionConsumer sessionConsumer,boolean do3rdPartyAuth){
  SocializeActionListener wrapper=null;
  final SocializeAuthListener localListener=new SocializeAuthListener(){
    @Override public void onError(    SocializeException error){
      if (listener != null) {
        listener.onError(error);
      }
 else {
        if (logger != null) {
          logger.error(""String_Node_Str"",error);
        }
      }
    }
    @Override public void onCancel(){
      if (listener != null) {
        listener.onCancel();
      }
    }
    @Override public void onAuthSuccess(    SocializeSession session){
      if (sessionConsumer != null) {
        sessionConsumer.setSession(session);
      }
      if (listener != null) {
        listener.onAuthSuccess(session);
      }
    }
    @Override public void onAuthFail(    SocializeException error){
      if (listener != null) {
        listener.onAuthFail(error);
      }
 else {
        if (logger != null) {
          logger.error(""String_Node_Str"",error);
        }
      }
    }
  }
;
  wrapper=new SocializeActionListener(){
    @Override public void onResult(    RequestType type,    SocializeResponse response){
      SocializeAuthResponse authResponse=(SocializeAuthResponse)response;
      localListener.onAuthSuccess(authResponse.getSession());
    }
    @Override public void onError(    SocializeException error){
      if (httpUtils != null && httpUtils.isAuthError(error)) {
        localListener.onAuthFail(error);
      }
 else {
        localListener.onError(error);
      }
    }
  }
;
  final SocializeAuthRequest request=new SocializeAuthRequest();
  request.setEndpoint(""String_Node_Str"");
  request.setConsumerKey(key);
  request.setConsumerSecret(secret);
  request.setUdid(uuid);
  request.setAuthProviderData(data);
  AuthProviderType authProviderType=getAuthProviderType(data);
  if (do3rdPartyAuth && !authProviderType.equals(AuthProviderType.SOCIALIZE)) {
    handle3rdPartyAuth(context,request,wrapper,localListener,key,secret);
  }
 else {
    handleRegularAuth(context,request,wrapper,localListener,key,secret);
  }
}",0.9986713906111604
177812,"public void onBeforePost(Activity parent,SocialNetwork socialNetwork,Map<String,String> params){
}","public void onBeforePost(Activity parent,SocialNetwork socialNetwork,PostData postData){
}",0.8404255319148937
177813,"@Override protected FacebookAuthProviderInfo initInstance(){
  FacebookAuthProviderInfo info=new FacebookAuthProviderInfo();
  return info;
}","@Override protected FacebookAuthProviderInfo initInstance(){
  FacebookAuthProviderInfo info=facebookAuthProviderInfoInstanceFactory.getBean();
  return info;
}",0.903654485049834
177814,"/** 
 * Sets a custom property.  This will override settings in socialize.properties.
 * @param key
 * @param value
 */
public void setProperty(String key,String value){
  if (properties == null) {
    properties=createProperties();
  }
  if (value != null)   value=value.trim();
  properties.put(key,value);
}","/** 
 * Sets a custom property.  This will override settings in socialize.properties.
 * @param key
 * @param value
 */
public void setProperty(String key,String value){
  if (properties == null) {
    properties=createProperties();
  }
  if (value != null) {
    value=value.trim();
    properties.put(key,value);
  }
 else {
    properties.remove(key);
  }
}",0.9253731343283582
177815,"@Override public Map<AuthProviderType,UserAuthData> getUserAuthData(){
  return null;
}","@Override public UserAuthData getUserAuthData(AuthProviderType type){
  return null;
}",0.7514450867052023
177816,"@Override public boolean isAuthenticated(AuthProviderType providerType){
  if (isAuthenticated()) {
    if (providerType.equals(AuthProviderType.SOCIALIZE)) {
      return true;
    }
    AuthProviderType authProviderType=session.getAuthProviderType();
    if (authProviderType == null) {
      return false;
    }
 else {
      return (authProviderType.equals(providerType));
    }
  }
  return false;
}","@Override public boolean isAuthenticated(AuthProviderType providerType){
  if (isAuthenticated()) {
    if (providerType.equals(AuthProviderType.SOCIALIZE)) {
      return true;
    }
    UserAuthData userAuthData=session.getUserAuthData(providerType);
    if (userAuthData == null) {
      AuthProviderType authProviderType=session.getAuthProviderType();
      if (authProviderType == null) {
        return false;
      }
 else {
        return (authProviderType.equals(providerType));
      }
    }
 else {
      return true;
    }
  }
  return false;
}",0.6479166666666667
177817,"@Override public void clear3rdPartySession(Context context,AuthProviderType type){
  try {
    if (session != null) {
      AuthProvider<AuthProviderInfo> provider=authProviders.getProvider(type);
      if (provider != null) {
        boolean cleared=false;
        Map<AuthProviderType,UserAuthData> userAuthDataMap=session.getUserAuthData();
        if (userAuthDataMap != null) {
          UserAuthData userAuthData=userAuthDataMap.get(type);
          if (userAuthData != null) {
            AuthProviderInfo authProviderInfo=userAuthData.getAuthProviderInfo();
            if (authProviderInfo != null) {
              provider.clearCache(context,authProviderInfo);
              cleared=true;
            }
          }
        }
        if (!cleared) {
          AuthProvider<?> authProvider=session.getAuthProvider();
          String get3rdPartyAppId=session.get3rdPartyAppId();
          if (authProvider != null && !StringUtils.isEmpty(get3rdPartyAppId)) {
            authProvider.clearCache(context,get3rdPartyAppId);
          }
        }
      }
      session.clear(type);
    }
  }
  finally {
    if (userSystem != null) {
      userSystem.clearSession(type);
    }
  }
}","@Override public void clear3rdPartySession(Context context,AuthProviderType type){
  try {
    if (session != null) {
      AuthProvider<AuthProviderInfo> provider=authProviders.getProvider(type);
      if (provider != null) {
        boolean cleared=false;
        UserAuthData userAuthData=session.getUserAuthData(type);
        if (userAuthData != null) {
          AuthProviderInfo authProviderInfo=userAuthData.getAuthProviderInfo();
          if (authProviderInfo != null) {
            provider.clearCache(context,authProviderInfo);
            cleared=true;
          }
        }
        if (!cleared) {
          AuthProvider<?> authProvider=session.getAuthProvider();
          String get3rdPartyAppId=session.get3rdPartyAppId();
          if (authProvider != null && !StringUtils.isEmpty(get3rdPartyAppId)) {
            authProvider.clearCache(context,get3rdPartyAppId);
          }
        }
      }
      session.clear(type);
    }
  }
  finally {
    if (userSystem != null) {
      userSystem.clearSession(type);
    }
  }
}",0.8325101032779524
177818,"/** 
 * Returns the set of session data for any 3rd party providers.
 * @return
 */
public Map<AuthProviderType,UserAuthData> getUserAuthData();",public UserAuthData getUserAuthData(AuthProviderType type);,0.3743842364532019
177819,"public Map<AuthProviderType,UserAuthData> getUserAuthData(){
  return userAuthData;
}","@Override public UserAuthData getUserAuthData(AuthProviderType type){
  return userAuthData.get(type);
}",0.6666666666666666
177820,"@SuppressWarnings(""String_Node_Str"") @UsesMocks({Map.class,AuthProvider.class}) public void testGetProvider(){
  final AuthProviderType type=AuthProviderType.FACEBOOK;
  Map<Integer,AuthProvider> providerMap=AndroidMock.createMock(Map.class);
  AuthProvider provider=AndroidMock.createMock(AuthProvider.class);
  AndroidMock.expect(providerMap.get(type.getId())).andReturn(provider);
  AndroidMock.replay(providerMap);
  AuthProviders providers=new AuthProviders();
  providers.setProviders(providerMap);
  assertSame(provider,providers.getProvider(type));
  AndroidMock.verify(providerMap);
}","@SuppressWarnings(""String_Node_Str"") @UsesMocks({Map.class,AuthProvider.class}) public void testGetProvider(){
  final AuthProviderType type=AuthProviderType.FACEBOOK;
  Map<Integer,AuthProvider<?>> providerMap=AndroidMock.createMock(Map.class);
  AuthProvider<FacebookAuthProviderInfo> provider=AndroidMock.createMock(AuthProvider.class);
  AndroidMock.expect((AuthProvider<FacebookAuthProviderInfo>)providerMap.get(type.getId())).andReturn(provider);
  AndroidMock.replay(providerMap);
  AuthProviders providers=new AuthProviders();
  providers.setProviders(providerMap);
  assertSame(provider,providers.getProvider(type));
  AndroidMock.verify(providerMap);
}",0.9450199203187252
177821,"@UsesMocks({SocializeProvider.class,SocializeAuthRequest.class,AuthProviders.class,SocializeAuthListener.class,SocializeActionListener.class,SocializeException.class,IBeanFactory.class,AuthProviderData.class}) @SuppressWarnings(""String_Node_Str"") public void testHandle3rdPartyAuthFail(){
  String appId3rdParty=""String_Node_Str"";
  String key=""String_Node_Str"";
  String secret=""String_Node_Str"";
  String endpoint=""String_Node_Str"";
  AuthProviderType authProviderType=AuthProviderType.FACEBOOK;
  SocializeProvider<SocializeObject> provider=AndroidMock.createMock(SocializeProvider.class);
  AuthProviders authProviders=AndroidMock.createMock(AuthProviders.class);
  SocializeAuthListener listener=AndroidMock.createMock(SocializeAuthListener.class);
  SocializeAuthRequest request=AndroidMock.createMock(SocializeAuthRequest.class);
  SocializeActionListener actionListener=AndroidMock.createMock(SocializeActionListener.class);
  SocializeException error=AndroidMock.createMock(SocializeException.class);
  AuthProviderData authProviderData=AndroidMock.createMock(AuthProviderData.class);
  MockSocializeApi api=new MockSocializeApi(provider);
  AuthProvider authProvider=new AuthProvider(){
    @Override public void authenticate(    SocializeAuthRequest authRequest,    String appId,    AuthProviderListener listener){
      addResult(1,listener);
    }
    @Override public void clearCache(    Context context,    String appId){
      fail();
    }
  }
;
  listener.onError(error);
  listener.onError(error);
  AndroidMock.expect(request.getEndpoint()).andReturn(endpoint);
  AndroidMock.expect(authProviderData.getAuthProviderType()).andReturn(authProviderType);
  AndroidMock.expect(authProviderData.getAppId3rdParty()).andReturn(appId3rdParty);
  AndroidMock.expect(authProviders.getProvider(authProviderType)).andReturn(authProvider);
  AndroidMock.expect(request.getAuthProviderData()).andReturn(authProviderData);
  api.setAuthProviders(authProviders);
  AndroidMock.replay(authProviderData);
  AndroidMock.replay(authProviders);
  AndroidMock.replay(request);
  api.handle3rdPartyAuth(getContext(),request,actionListener,listener,key,secret);
  AuthProviderListener authProviderListener=getResult(1);
  String loadSession=getResult(0);
  assertNotNull(loadSession);
  assertNotNull(authProviderListener);
  assertEquals(""String_Node_Str"",loadSession);
  authProviderListener.onAuthFail(error);
  authProviderListener.onError(error);
  String handleRegularAuth=getResult(3);
  assertNull(handleRegularAuth);
  AndroidMock.verify(authProviderData);
  AndroidMock.verify(authProviders);
  AndroidMock.verify(request);
}","@UsesMocks({SocializeProvider.class,SocializeAuthRequest.class,AuthProviders.class,SocializeAuthListener.class,SocializeActionListener.class,SocializeException.class,IBeanFactory.class,AuthProviderData.class}) @SuppressWarnings(""String_Node_Str"") public void testHandle3rdPartyAuthFail(){
  String appId3rdParty=""String_Node_Str"";
  String key=""String_Node_Str"";
  String secret=""String_Node_Str"";
  String endpoint=""String_Node_Str"";
  AuthProviderType authProviderType=AuthProviderType.FACEBOOK;
  SocializeProvider<SocializeObject> provider=AndroidMock.createMock(SocializeProvider.class);
  AuthProviders authProviders=AndroidMock.createMock(AuthProviders.class);
  SocializeAuthListener listener=AndroidMock.createMock(SocializeAuthListener.class);
  SocializeAuthRequest request=AndroidMock.createMock(SocializeAuthRequest.class);
  SocializeActionListener actionListener=AndroidMock.createMock(SocializeActionListener.class);
  SocializeException error=AndroidMock.createMock(SocializeException.class);
  AuthProviderData authProviderData=AndroidMock.createMock(AuthProviderData.class);
  MockSocializeApi api=new MockSocializeApi(provider);
  AuthProvider<AuthProviderInfo> authProvider=new AuthProvider<AuthProviderInfo>(){
    @Override public void authenticate(    SocializeAuthRequest authRequest,    String appId,    AuthProviderListener listener){
      fail();
    }
    @Override public void clearCache(    Context context,    String appId){
      fail();
    }
    @Override public void authenticate(    SocializeAuthRequest authRequest,    AuthProviderInfo info,    AuthProviderListener listener){
      addResult(1,listener);
    }
    @Override public void clearCache(    Context context,    AuthProviderInfo info){
      fail();
    }
  }
;
  listener.onError(error);
  listener.onError(error);
  AndroidMock.expect(request.getEndpoint()).andReturn(endpoint);
  AndroidMock.expect(authProviderData.getAuthProviderType()).andReturn(authProviderType);
  AndroidMock.expect(authProviderData.getAppId3rdParty()).andReturn(appId3rdParty);
  AndroidMock.expect(authProviders.getProvider(authProviderType)).andReturn(authProvider);
  AndroidMock.expect(request.getAuthProviderData()).andReturn(authProviderData);
  api.setAuthProviders(authProviders);
  AndroidMock.replay(authProviderData);
  AndroidMock.replay(authProviders);
  AndroidMock.replay(request);
  api.handle3rdPartyAuth(getContext(),request,actionListener,listener,key,secret);
  AuthProviderListener authProviderListener=getResult(1);
  String loadSession=getResult(0);
  assertNotNull(loadSession);
  assertNotNull(authProviderListener);
  assertEquals(""String_Node_Str"",loadSession);
  authProviderListener.onAuthFail(error);
  authProviderListener.onError(error);
  String handleRegularAuth=getResult(3);
  assertNull(handleRegularAuth);
  AndroidMock.verify(authProviderData);
  AndroidMock.verify(authProviders);
  AndroidMock.verify(request);
}",0.9422765689624168
177822,"@Override public void authenticate(SocializeAuthRequest authRequest,String appId,AuthProviderListener listener){
  addResult(1,listener);
}","@Override public void authenticate(SocializeAuthRequest authRequest,AuthProviderInfo info,AuthProviderListener listener){
  addResult(1,listener);
}",0.9128919860627178
177823,"@Override public void clearCache(Context context,String appId){
  fail();
}","@Override public void clearCache(Context context,AuthProviderInfo info){
  fail();
}",0.8427672955974843
177824,"@UsesMocks({SocializeProvider.class,SocializeAuthRequest.class,AuthProviderResponse.class,AuthProviders.class,SocializeAuthListener.class,SocializeActionListener.class,IBeanFactory.class,AuthProviderData.class}) @SuppressWarnings(""String_Node_Str"") public void testHandle3rdPartyAuthSuccess(){
  String appId3rdParty=""String_Node_Str"";
  String key=""String_Node_Str"";
  String secret=""String_Node_Str"";
  String token=""String_Node_Str"";
  String user=""String_Node_Str"";
  String endpoint=""String_Node_Str"";
  AuthProviderType authProviderType=AuthProviderType.FACEBOOK;
  SocializeProvider<SocializeObject> provider=AndroidMock.createMock(SocializeProvider.class);
  AuthProviders authProviders=AndroidMock.createMock(AuthProviders.class);
  SocializeAuthListener listener=AndroidMock.createMock(SocializeAuthListener.class);
  SocializeAuthRequest request=AndroidMock.createMock(SocializeAuthRequest.class);
  SocializeActionListener actionListener=AndroidMock.createMock(SocializeActionListener.class);
  AuthProviderResponse response=AndroidMock.createMock(AuthProviderResponse.class);
  AuthProviderData authProviderData=AndroidMock.createMock(AuthProviderData.class);
  MockSocializeApi api=new MockSocializeApi(provider);
  AuthProvider authProvider=new AuthProvider(){
    @Override public void authenticate(    SocializeAuthRequest authRequest,    String appId,    AuthProviderListener listener){
      addResult(1,listener);
    }
    @Override public void clearCache(    Context context,    String appId){
      fail();
    }
  }
;
  AndroidMock.expect(request.getEndpoint()).andReturn(endpoint);
  AndroidMock.expect(request.getAuthProviderData()).andReturn(authProviderData);
  AndroidMock.expect(authProviderData.getAppId3rdParty()).andReturn(appId3rdParty);
  AndroidMock.expect(authProviderData.getAuthProviderType()).andReturn(authProviderType);
  AndroidMock.expect(authProviders.getProvider(authProviderType)).andReturn(authProvider);
  AndroidMock.expect(response.getToken()).andReturn(token);
  AndroidMock.expect(response.getUserId()).andReturn(user);
  authProviderData.setUserId3rdParty(user);
  authProviderData.setToken3rdParty(token);
  api.setAuthProviders(authProviders);
  AndroidMock.replay(authProviderData);
  AndroidMock.replay(authProviders);
  AndroidMock.replay(request);
  AndroidMock.replay(response);
  api.handle3rdPartyAuth(getContext(),request,actionListener,listener,key,secret);
  AuthProviderListener authProviderListener=getResult(1);
  String loadSession=getResult(0);
  assertNotNull(loadSession);
  assertNotNull(authProviderListener);
  assertEquals(""String_Node_Str"",loadSession);
  authProviderListener.onAuthSuccess(response);
  String handleRegularAuth=getResult(3);
  assertNotNull(handleRegularAuth);
  assertEquals(""String_Node_Str"",handleRegularAuth);
  AndroidMock.verify(authProviderData);
  AndroidMock.verify(authProviders);
  AndroidMock.verify(request);
  AndroidMock.verify(response);
}","@UsesMocks({SocializeProvider.class,SocializeAuthRequest.class,AuthProviderResponse.class,AuthProviders.class,SocializeAuthListener.class,SocializeActionListener.class,IBeanFactory.class,AuthProviderData.class}) @SuppressWarnings(""String_Node_Str"") public void testHandle3rdPartyAuthSuccess(){
  String appId3rdParty=""String_Node_Str"";
  String key=""String_Node_Str"";
  String secret=""String_Node_Str"";
  String token=""String_Node_Str"";
  String user=""String_Node_Str"";
  String endpoint=""String_Node_Str"";
  AuthProviderType authProviderType=AuthProviderType.FACEBOOK;
  SocializeProvider<SocializeObject> provider=AndroidMock.createMock(SocializeProvider.class);
  AuthProviders authProviders=AndroidMock.createMock(AuthProviders.class);
  SocializeAuthListener listener=AndroidMock.createMock(SocializeAuthListener.class);
  SocializeAuthRequest request=AndroidMock.createMock(SocializeAuthRequest.class);
  SocializeActionListener actionListener=AndroidMock.createMock(SocializeActionListener.class);
  AuthProviderResponse response=AndroidMock.createMock(AuthProviderResponse.class);
  AuthProviderData authProviderData=AndroidMock.createMock(AuthProviderData.class);
  MockSocializeApi api=new MockSocializeApi(provider);
  AuthProvider<AuthProviderInfo> authProvider=new AuthProvider<AuthProviderInfo>(){
    @Override public void authenticate(    SocializeAuthRequest authRequest,    String appId,    AuthProviderListener listener){
      fail();
    }
    @Override public void authenticate(    SocializeAuthRequest authRequest,    AuthProviderInfo info,    AuthProviderListener listener){
      addResult(1,listener);
    }
    @Override public void clearCache(    Context context,    AuthProviderInfo info){
      fail();
    }
    @Override public void clearCache(    Context context,    String appId){
      fail();
    }
  }
;
  AndroidMock.expect(request.getEndpoint()).andReturn(endpoint);
  AndroidMock.expect(request.getAuthProviderData()).andReturn(authProviderData);
  AndroidMock.expect(authProviderData.getAppId3rdParty()).andReturn(appId3rdParty);
  AndroidMock.expect(authProviderData.getAuthProviderType()).andReturn(authProviderType);
  AndroidMock.expect(authProviders.getProvider(authProviderType)).andReturn(authProvider);
  AndroidMock.expect(response.getToken()).andReturn(token);
  AndroidMock.expect(response.getUserId()).andReturn(user);
  authProviderData.setUserId3rdParty(user);
  authProviderData.setToken3rdParty(token);
  api.setAuthProviders(authProviders);
  AndroidMock.replay(authProviderData);
  AndroidMock.replay(authProviders);
  AndroidMock.replay(request);
  AndroidMock.replay(response);
  api.handle3rdPartyAuth(getContext(),request,actionListener,listener,key,secret);
  AuthProviderListener authProviderListener=getResult(1);
  String loadSession=getResult(0);
  assertNotNull(loadSession);
  assertNotNull(authProviderListener);
  assertEquals(""String_Node_Str"",loadSession);
  authProviderListener.onAuthSuccess(response);
  String handleRegularAuth=getResult(3);
  assertNotNull(handleRegularAuth);
  assertEquals(""String_Node_Str"",handleRegularAuth);
  AndroidMock.verify(authProviderData);
  AndroidMock.verify(authProviders);
  AndroidMock.verify(request);
  AndroidMock.verify(response);
}",0.9517819706498952
177825,"@Override public void authenticate(SocializeAuthRequest authRequest,FacebookAuthProviderInfo info,AuthProviderListener listener){
  AuthProviderResponse mockResponse=new AuthProviderResponse();
  mockResponse.setUserId(userId);
  mockResponse.setToken(token);
  listener.onAuthSuccess(mockResponse);
}","@Override public void authenticate(FacebookAuthProviderInfo info,AuthProviderListener listener){
  AuthProviderResponse mockResponse=new AuthProviderResponse();
  mockResponse.setUserId(userId);
  mockResponse.setToken(token);
  listener.onAuthSuccess(mockResponse);
}",0.9420035149384886
177826,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.ui_main2);
  final EditText txtEntity=(EditText)findViewById(R.id.txtEntity);
  final EditText txtEntityName=(EditText)findViewById(R.id.txtEntityName);
  final EditText txtFB=(EditText)findViewById(R.id.txtFBId);
  final CheckBox chkSSO=(CheckBox)findViewById(R.id.chkFacebook);
  final CheckBox chkNotifications=(CheckBox)findViewById(R.id.chkNotifications);
  final Button btn=(Button)findViewById(R.id.btnCommentView);
  final Button btnClearCache=(Button)findViewById(R.id.btnClearCache);
  final Button btnActionViewAuto=(Button)findViewById(R.id.btnActionViewAuto);
  final Button btnActionViewManual=(Button)findViewById(R.id.btnActionViewManual);
  final Button btnActionViewPager=(Button)findViewById(R.id.btnActionViewPager);
  final Button btnActionButton=(Button)findViewById(R.id.btnActionButton);
  final Button btnActionButtonManual=(Button)findViewById(R.id.btnActionButtonManual);
  final SocializeEntityLoader loader=new SocializeEntityLoader(){
    @Override public boolean canLoad(    Context context,    Entity entity){
      return true;
    }
    @Override public void loadEntity(    Activity activity,    Entity entity){
      Toast.makeText(activity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
;
  btn.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setupOverrides();
      Entity entity=new Entity();
      entity.setKey(txtEntity.getText().toString());
      entity.setName(txtEntityName.getText().toString());
      Socialize.getSocialize().setEntityLoader(loader);
      Socialize.getSocialize().getConfig().setProperty(SocializeConfig.SOCIALIZE_REGISTER_NOTIFICATION,String.valueOf(chkNotifications.isChecked()));
      Socialize.getSocialize().getConfig().setFacebookAppId(txtFB.getText().toString());
      Socialize.getSocialize().getConfig().setFacebookSingleSignOnEnabled(chkSSO.isChecked());
      Socialize.getSocializeUI().showCommentView(SampleActivity2.this,entity);
    }
  }
);
  btnClearCache.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      final ProgressDialog dialog=SafeProgressDialog.show(v.getContext(),""String_Node_Str"",""String_Node_Str"");
      new AsyncTask<Void,Void,Void>(){
        @Override protected Void doInBackground(        Void... params){
          Socialize.getSocialize().init(SampleActivity2.this);
          Socialize.getSocialize().clearSessionCache(SampleActivity2.this);
          return null;
        }
        @Override protected void onPostExecute(        Void result){
          dialog.dismiss();
        }
      }
.execute((Void)null);
    }
  }
);
  btnActionViewAuto.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setupOverrides();
      Intent intent=new Intent(SampleActivity2.this,ActionBarAutoActivity2.class);
      Entity entity=new Entity();
      entity.setKey(txtEntity.getText().toString());
      entity.setName(txtEntityName.getText().toString());
      intent.putExtra(Socialize.ENTITY_OBJECT,entity);
      Socialize.getSocialize().setEntityLoader(loader);
      Socialize.getSocialize().getConfig().setProperty(SocializeConfig.SOCIALIZE_REGISTER_NOTIFICATION,String.valueOf(chkNotifications.isChecked()));
      Socialize.getSocialize().getConfig().setFacebookAppId(txtFB.getText().toString());
      Socialize.getSocialize().getConfig().setFacebookSingleSignOnEnabled(chkSSO.isChecked());
      startActivity(intent);
    }
  }
);
  btnActionViewManual.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setupOverrides();
      Intent intent=new Intent(SampleActivity2.this,ActionBarManualActivity2.class);
      Entity entity=new Entity();
      entity.setKey(txtEntity.getText().toString());
      entity.setName(txtEntityName.getText().toString());
      intent.putExtra(Socialize.ENTITY_OBJECT,entity);
      Socialize.getSocialize().setEntityLoader(loader);
      Socialize.getSocialize().getConfig().setProperty(SocializeConfig.SOCIALIZE_REGISTER_NOTIFICATION,String.valueOf(chkNotifications.isChecked()));
      Socialize.getSocialize().getConfig().setFacebookAppId(txtFB.getText().toString());
      Socialize.getSocialize().getConfig().setFacebookSingleSignOnEnabled(chkSSO.isChecked());
      startActivity(intent);
    }
  }
);
  btnActionViewPager.setOnClickListener(new OnClickListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void onClick(    View v){
      setupOverrides();
      Intent intent=new Intent(SampleActivity2.this,ActionBarPagerActivity.class);
      Entity entity=new Entity();
      entity.setKey(txtEntity.getText().toString());
      entity.setName(txtEntityName.getText().toString());
      intent.putExtra(Socialize.ENTITY_OBJECT,entity);
      Socialize.getSocialize().setEntityLoader(loader);
      Socialize.getSocialize().getConfig().setProperty(SocializeConfig.SOCIALIZE_REGISTER_NOTIFICATION,String.valueOf(chkNotifications.isChecked()));
      Socialize.getSocialize().getConfig().setFacebookAppId(txtFB.getText().toString());
      Socialize.getSocialize().getConfig().setFacebookSingleSignOnEnabled(chkSSO.isChecked());
      startActivity(intent);
    }
  }
);
  btnActionButtonManual.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent i=new Intent(SampleActivity2.this,ActionButtonActivity.class);
      i.putExtra(""String_Node_Str"",true);
      startActivity(i);
    }
  }
);
  btnActionButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent i=new Intent(SampleActivity2.this,ActionButtonActivity.class);
      i.putExtra(""String_Node_Str"",false);
      startActivity(i);
    }
  }
);
  InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
  imm.hideSoftInputFromWindow(txtEntity.getWindowToken(),0);
  imm.hideSoftInputFromWindow(getWindow().getDecorView().getWindowToken(),0);
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.ui_main2);
  final EditText txtEntity=(EditText)findViewById(R.id.txtEntity);
  final EditText txtEntityName=(EditText)findViewById(R.id.txtEntityName);
  final EditText txtFB=(EditText)findViewById(R.id.txtFBId);
  final CheckBox chkSSO=(CheckBox)findViewById(R.id.chkFacebook);
  final CheckBox chkNotifications=(CheckBox)findViewById(R.id.chkNotifications);
  Socialize.getSocialize().init(this);
  txtFB.setText(Socialize.getSocialize().getConfig().getProperty(SocializeConfig.FACEBOOK_APP_ID));
  final Button btn=(Button)findViewById(R.id.btnCommentView);
  final Button btnClearCache=(Button)findViewById(R.id.btnClearCache);
  final Button btnActionViewAuto=(Button)findViewById(R.id.btnActionViewAuto);
  final Button btnActionViewManual=(Button)findViewById(R.id.btnActionViewManual);
  final Button btnActionViewPager=(Button)findViewById(R.id.btnActionViewPager);
  final Button btnActionButton=(Button)findViewById(R.id.btnActionButton);
  final Button btnActionButtonManual=(Button)findViewById(R.id.btnActionButtonManual);
  final SocializeEntityLoader loader=new SocializeEntityLoader(){
    @Override public boolean canLoad(    Context context,    Entity entity){
      return true;
    }
    @Override public void loadEntity(    Activity activity,    Entity entity){
      Toast.makeText(activity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
;
  btn.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setupOverrides();
      Entity entity=new Entity();
      entity.setKey(txtEntity.getText().toString());
      entity.setName(txtEntityName.getText().toString());
      Socialize.getSocialize().setEntityLoader(loader);
      Socialize.getSocialize().getConfig().setProperty(SocializeConfig.SOCIALIZE_REGISTER_NOTIFICATION,String.valueOf(chkNotifications.isChecked()));
      Socialize.getSocialize().getConfig().setFacebookAppId(txtFB.getText().toString());
      Socialize.getSocialize().getConfig().setFacebookSingleSignOnEnabled(chkSSO.isChecked());
      Socialize.getSocializeUI().showCommentView(SampleActivity2.this,entity);
    }
  }
);
  btnClearCache.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      final ProgressDialog dialog=SafeProgressDialog.show(v.getContext(),""String_Node_Str"",""String_Node_Str"");
      new AsyncTask<Void,Void,Void>(){
        @Override protected Void doInBackground(        Void... params){
          Socialize.getSocialize().init(SampleActivity2.this);
          Socialize.getSocialize().clearSessionCache(SampleActivity2.this);
          return null;
        }
        @Override protected void onPostExecute(        Void result){
          dialog.dismiss();
        }
      }
.execute((Void)null);
    }
  }
);
  btnActionViewAuto.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setupOverrides();
      Intent intent=new Intent(SampleActivity2.this,ActionBarAutoActivity2.class);
      Entity entity=new Entity();
      entity.setKey(txtEntity.getText().toString());
      entity.setName(txtEntityName.getText().toString());
      intent.putExtra(Socialize.ENTITY_OBJECT,entity);
      Socialize.getSocialize().setEntityLoader(loader);
      Socialize.getSocialize().getConfig().setProperty(SocializeConfig.SOCIALIZE_REGISTER_NOTIFICATION,String.valueOf(chkNotifications.isChecked()));
      Socialize.getSocialize().getConfig().setFacebookAppId(txtFB.getText().toString());
      Socialize.getSocialize().getConfig().setFacebookSingleSignOnEnabled(chkSSO.isChecked());
      startActivity(intent);
    }
  }
);
  btnActionViewManual.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setupOverrides();
      Intent intent=new Intent(SampleActivity2.this,ActionBarManualActivity2.class);
      Entity entity=new Entity();
      entity.setKey(txtEntity.getText().toString());
      entity.setName(txtEntityName.getText().toString());
      intent.putExtra(Socialize.ENTITY_OBJECT,entity);
      Socialize.getSocialize().setEntityLoader(loader);
      Socialize.getSocialize().getConfig().setProperty(SocializeConfig.SOCIALIZE_REGISTER_NOTIFICATION,String.valueOf(chkNotifications.isChecked()));
      Socialize.getSocialize().getConfig().setFacebookAppId(txtFB.getText().toString());
      Socialize.getSocialize().getConfig().setFacebookSingleSignOnEnabled(chkSSO.isChecked());
      startActivity(intent);
    }
  }
);
  btnActionViewPager.setOnClickListener(new OnClickListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void onClick(    View v){
      setupOverrides();
      Intent intent=new Intent(SampleActivity2.this,ActionBarPagerActivity.class);
      Entity entity=new Entity();
      entity.setKey(txtEntity.getText().toString());
      entity.setName(txtEntityName.getText().toString());
      intent.putExtra(Socialize.ENTITY_OBJECT,entity);
      Socialize.getSocialize().setEntityLoader(loader);
      Socialize.getSocialize().getConfig().setProperty(SocializeConfig.SOCIALIZE_REGISTER_NOTIFICATION,String.valueOf(chkNotifications.isChecked()));
      Socialize.getSocialize().getConfig().setFacebookAppId(txtFB.getText().toString());
      Socialize.getSocialize().getConfig().setFacebookSingleSignOnEnabled(chkSSO.isChecked());
      startActivity(intent);
    }
  }
);
  btnActionButtonManual.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent i=new Intent(SampleActivity2.this,ActionButtonActivity.class);
      i.putExtra(""String_Node_Str"",true);
      startActivity(i);
    }
  }
);
  btnActionButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent i=new Intent(SampleActivity2.this,ActionButtonActivity.class);
      i.putExtra(""String_Node_Str"",false);
      startActivity(i);
    }
  }
);
  InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
  imm.hideSoftInputFromWindow(txtEntity.getWindowToken(),0);
  imm.hideSoftInputFromWindow(getWindow().getDecorView().getWindowToken(),0);
}",0.9887221095334684
177827,"@Override public String buildShareLink(Entity entity){
  Long id=entity.getId();
  if (id != null) {
    if (config != null) {
      String host=config.getProperty(SocializeConfig.REDIRECT_HOST);
      if (!StringUtils.isEmpty(host)) {
        return host + ""String_Node_Str"" + id;
      }
    }
    return ""String_Node_Str"" + id;
  }
 else {
    return entity.getKey();
  }
}","@Override public String buildShareLink(Entity entity){
  return appUtils.getEntityUrl(entity);
}",0.3389830508474576
177828,"protected void setupListeners(){
  cancelButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      context.finish();
    }
  }
);
  saveButton.setOnClickListener(profileSaveButtonListenerFactory.getBean(getContext(),this));
  if (facebookEnabledCheckbox != null) {
    facebookEnabledCheckbox.setSignInListener(new SocializeAuthListener(){
      @Override public void onError(      SocializeException error){
        ProfileContentView.this.showError(ProfileContentView.this.getContext(),error);
      }
      @Override public void onCancel(){
      }
      @Override public void onAuthSuccess(      SocializeSession session){
        parent.setUserId(session.getUser().getId().toString());
        parent.doGetUserProfile();
      }
      @Override public void onAuthFail(      SocializeException error){
        ProfileContentView.this.showError(ProfileContentView.this.getContext(),error);
      }
    }
);
    facebookEnabledCheckbox.setSignOutListener(new FacebookSignOutListener(){
      @Override public void onSignOut(){
        parent.setUserId(Socialize.getSocialize().getSession().getUser().getId().toString());
        parent.doGetUserProfile();
      }
      @Override public void onCancel(){
      }
    }
);
  }
}","protected void setupListeners(){
  cancelButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      context.finish();
    }
  }
);
  saveButton.setOnClickListener(profileSaveButtonListenerFactory.getBean(getContext(),this));
  if (facebookEnabledCheckbox != null) {
    facebookEnabledCheckbox.setSignInListener(new SocializeAuthListener(){
      @Override public void onError(      SocializeException error){
        ProfileContentView.this.showErrorToast(ProfileContentView.this.getContext(),error);
      }
      @Override public void onCancel(){
      }
      @Override public void onAuthSuccess(      SocializeSession session){
        parent.setUserId(session.getUser().getId().toString());
        parent.doGetUserProfile();
      }
      @Override public void onAuthFail(      SocializeException error){
        ProfileContentView.this.showErrorToast(ProfileContentView.this.getContext(),error);
      }
    }
);
    facebookEnabledCheckbox.setSignOutListener(new FacebookSignOutListener(){
      @Override public void onSignOut(){
        parent.setUserId(Socialize.getSocialize().getSession().getUser().getId().toString());
        parent.doGetUserProfile();
      }
      @Override public void onCancel(){
      }
    }
);
  }
}",0.9960845732184808
177829,"@Override public void onAuthFail(SocializeException error){
  ProfileContentView.this.showError(ProfileContentView.this.getContext(),error);
}","@Override public void onAuthFail(SocializeException error){
  ProfileContentView.this.showErrorToast(ProfileContentView.this.getContext(),error);
}",0.9826989619377162
177830,"@Override public void onError(SocializeException error){
  ProfileContentView.this.showError(ProfileContentView.this.getContext(),error);
}","@Override public void onError(SocializeException error){
  ProfileContentView.this.showErrorToast(ProfileContentView.this.getContext(),error);
}",0.9823321554770318
177831,"public void init(Context context){
  packageName=context.getPackageName();
  try {
    Resources appR=context.getResources();
    CharSequence txt=appR.getText(appR.getIdentifier(""String_Node_Str"",""String_Node_Str"",context.getPackageName()));
    appName=txt.toString();
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"";
    if (logger != null) {
      logger.error(msg,e);
    }
 else {
      System.err.println(msg);
      e.printStackTrace();
    }
  }
  if (StringUtils.isEmpty(appName)) {
    appName=packageName;
  }
  if (StringUtils.isEmpty(appName)) {
    appName=""String_Node_Str"";
  }
}","public void init(Context context){
  packageName=context.getPackageName();
  try {
    Resources appR=context.getResources();
    CharSequence txt=appR.getText(appR.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName));
    appName=txt.toString();
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"";
    if (logger != null) {
      logger.error(msg,e);
    }
 else {
      System.err.println(msg);
      e.printStackTrace();
    }
  }
  if (StringUtils.isEmpty(appName)) {
    appName=packageName;
  }
  if (StringUtils.isEmpty(appName)) {
    appName=""String_Node_Str"";
  }
}",0.9875724937862468
177832,"@Override public String getMarketUrl(){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  builder.append(getAppName());
  return builder.toString();
}","@Override public String getMarketUrl(){
  StringBuilder builder=new StringBuilder();
  String appStore=config.getProperty(SocializeConfig.REDIRECT_APP_STORE);
  if (!StringUtils.isEmpty(appStore) && appStore.equalsIgnoreCase(""String_Node_Str"")) {
    builder.append(""String_Node_Str"");
  }
 else {
    builder.append(""String_Node_Str"");
  }
  builder.append(getPackageName());
  return builder.toString();
}",0.4906937394247039
177833,"public void test_buildShareLink(){
  SocializeConfig config=AndroidMock.createMock(SocializeConfig.class);
  Entity entity=AndroidMock.createMock(Entity.class);
  AndroidMock.expect(config.getProperty(SocializeConfig.REDIRECT_HOST)).andReturn(""String_Node_Str"");
  AndroidMock.expect(entity.getId()).andReturn(69L);
  AndroidMock.replay(config,entity);
  DefaultShareMessageBuilder builder=new DefaultShareMessageBuilder();
  builder.setConfig(config);
  String link=builder.buildShareLink(entity);
  AndroidMock.verify(config,entity);
  assertEquals(""String_Node_Str"",link);
}","@UsesMocks({AppUtils.class}) public void test_buildShareLink(){
  AppUtils appUtils=AndroidMock.createMock(AppUtils.class);
  Entity entity=AndroidMock.createMock(Entity.class);
  AndroidMock.expect(appUtils.getEntityUrl(entity)).andReturn(""String_Node_Str"");
  AndroidMock.replay(appUtils);
  DefaultShareMessageBuilder builder=new DefaultShareMessageBuilder();
  builder.setAppUtils(appUtils);
  String link=builder.buildShareLink(entity);
  AndroidMock.verify(appUtils);
  assertEquals(""String_Node_Str"",link);
}",0.412087912087912
177834,"@UsesMocks({SocializeProvider.class,SocializeAuthRequest.class,AuthProviders.class,SocializeAuthListener.class,SocializeActionListener.class,SocializeException.class,IBeanFactory.class,AuthProviderData.class,AuthProviderInfo.class}) @SuppressWarnings(""String_Node_Str"") public void testHandle3rdPartyAuthFail() throws SocializeException {
  String key=""String_Node_Str"";
  String secret=""String_Node_Str"";
  String endpoint=""String_Node_Str"";
  AuthProviderType authProviderType=AuthProviderType.FACEBOOK;
  AuthProviderInfo authProviderInfo=AndroidMock.createMock(AuthProviderInfo.class);
  SocializeProvider<SocializeObject> provider=AndroidMock.createMock(SocializeProvider.class);
  AuthProviders authProviders=AndroidMock.createMock(AuthProviders.class);
  SocializeAuthListener listener=AndroidMock.createMock(SocializeAuthListener.class);
  SocializeAuthRequest request=AndroidMock.createMock(SocializeAuthRequest.class);
  SocializeActionListener actionListener=AndroidMock.createMock(SocializeActionListener.class);
  SocializeException error=AndroidMock.createMock(SocializeException.class);
  AuthProviderData authProviderData=AndroidMock.createMock(AuthProviderData.class);
  MockSocializeApi api=new MockSocializeApi(provider);
  AuthProvider<AuthProviderInfo> authProvider=new AuthProvider<AuthProviderInfo>(){
    @Override public void authenticate(    SocializeAuthRequest authRequest,    String appId,    AuthProviderListener listener){
      fail();
    }
    @Override public void clearCache(    Context context,    String appId){
      fail();
    }
    @Override public void authenticate(    SocializeAuthRequest authRequest,    AuthProviderInfo info,    AuthProviderListener listener){
      addResult(1,listener);
    }
    @Override public void clearCache(    Context context,    AuthProviderInfo info){
      fail();
    }
  }
;
  listener.onError(error);
  listener.onError(error);
  AndroidMock.expect(request.getEndpoint()).andReturn(endpoint);
  AndroidMock.expect(authProviderData.getAuthProviderType()).andReturn(authProviderType);
  AndroidMock.expect(authProviders.getProvider(authProviderType)).andReturn(authProvider);
  AndroidMock.expect(request.getAuthProviderData()).andReturn(authProviderData);
  AndroidMock.expect(authProviderData.getAuthProviderInfo()).andReturn(authProviderInfo).anyTimes();
  AndroidMock.expect(authProviderInfo.getType()).andReturn(authProviderType);
  authProviderInfo.validate();
  api.setAuthProviders(authProviders);
  AndroidMock.replay(authProviderData,authProviderInfo,authProviders,request);
  api.handle3rdPartyAuth(getContext(),request,actionListener,listener,key,secret);
  AuthProviderListener authProviderListener=getResult(1);
  String loadSession=getResult(0);
  assertNotNull(loadSession);
  assertNotNull(authProviderListener);
  assertEquals(""String_Node_Str"",loadSession);
  authProviderListener.onAuthFail(error);
  authProviderListener.onError(error);
  String handleRegularAuth=getResult(3);
  assertNull(handleRegularAuth);
  AndroidMock.verify(authProviderData,authProviderInfo,authProviders,request);
}","@UsesMocks({SocializeProvider.class,SocializeAuthRequest.class,AuthProviders.class,SocializeAuthListener.class,SocializeActionListener.class,SocializeException.class,IBeanFactory.class,AuthProviderData.class,AuthProviderInfo.class}) @SuppressWarnings(""String_Node_Str"") public void testHandle3rdPartyAuthFail() throws SocializeException {
  String key=""String_Node_Str"";
  String secret=""String_Node_Str"";
  String endpoint=""String_Node_Str"";
  AuthProviderType authProviderType=AuthProviderType.FACEBOOK;
  AuthProviderInfo authProviderInfo=AndroidMock.createMock(AuthProviderInfo.class);
  SocializeProvider<SocializeObject> provider=AndroidMock.createMock(SocializeProvider.class);
  AuthProviders authProviders=AndroidMock.createMock(AuthProviders.class);
  SocializeAuthListener listener=AndroidMock.createMock(SocializeAuthListener.class);
  SocializeAuthRequest request=AndroidMock.createMock(SocializeAuthRequest.class);
  SocializeActionListener actionListener=AndroidMock.createMock(SocializeActionListener.class);
  SocializeException error=AndroidMock.createMock(SocializeException.class);
  AuthProviderData authProviderData=AndroidMock.createMock(AuthProviderData.class);
  MockSocializeApi api=new MockSocializeApi(provider);
  AuthProvider<AuthProviderInfo> authProvider=new AuthProvider<AuthProviderInfo>(){
    @Override public void authenticate(    SocializeAuthRequest authRequest,    String appId,    AuthProviderListener listener){
      fail();
    }
    @Override public void clearCache(    Context context,    String appId){
      fail();
    }
    @Override public void authenticate(    AuthProviderInfo info,    AuthProviderListener listener){
      addResult(1,listener);
    }
    @Override public void clearCache(    Context context,    AuthProviderInfo info){
      fail();
    }
  }
;
  listener.onError(error);
  listener.onError(error);
  AndroidMock.expect(request.getEndpoint()).andReturn(endpoint);
  AndroidMock.expect(authProviderData.getAuthProviderType()).andReturn(authProviderType);
  AndroidMock.expect(authProviders.getProvider(authProviderType)).andReturn(authProvider);
  AndroidMock.expect(request.getAuthProviderData()).andReturn(authProviderData);
  AndroidMock.expect(authProviderData.getAuthProviderInfo()).andReturn(authProviderInfo).anyTimes();
  AndroidMock.expect(authProviderInfo.getType()).andReturn(authProviderType);
  authProviderInfo.validate();
  api.setAuthProviders(authProviders);
  AndroidMock.replay(authProviderData,authProviderInfo,authProviders,request);
  api.handle3rdPartyAuth(getContext(),request,actionListener,listener,key,secret);
  AuthProviderListener authProviderListener=getResult(1);
  String loadSession=getResult(0);
  assertNotNull(loadSession);
  assertNotNull(authProviderListener);
  assertEquals(""String_Node_Str"",loadSession);
  authProviderListener.onAuthFail(error);
  authProviderListener.onError(error);
  String handleRegularAuth=getResult(3);
  assertNull(handleRegularAuth);
  AndroidMock.verify(authProviderData,authProviderInfo,authProviders,request);
}",0.9939768842585056
177835,"@Override public void authenticate(SocializeAuthRequest authRequest,AuthProviderInfo info,AuthProviderListener listener){
  addResult(1,listener);
}","@Override public void authenticate(AuthProviderInfo info,AuthProviderListener listener){
  addResult(1,listener);
}",0.8745247148288974
177836,"@UsesMocks({SocializeProvider.class,SocializeAuthRequest.class,AuthProviderResponse.class,AuthProviders.class,SocializeAuthListener.class,SocializeActionListener.class,IBeanFactory.class,AuthProviderData.class,AuthProviderInfo.class}) @SuppressWarnings(""String_Node_Str"") public void testHandle3rdPartyAuthSuccess() throws SocializeException {
  String appId3rdParty=""String_Node_Str"";
  String key=""String_Node_Str"";
  String secret=""String_Node_Str"";
  String token=""String_Node_Str"";
  String user=""String_Node_Str"";
  String endpoint=""String_Node_Str"";
  AuthProviderType authProviderType=AuthProviderType.FACEBOOK;
  AuthProviderInfo authProviderInfo=AndroidMock.createMock(AuthProviderInfo.class);
  SocializeProvider<SocializeObject> provider=AndroidMock.createMock(SocializeProvider.class);
  AuthProviders authProviders=AndroidMock.createMock(AuthProviders.class);
  SocializeAuthListener listener=AndroidMock.createMock(SocializeAuthListener.class);
  SocializeAuthRequest request=AndroidMock.createMock(SocializeAuthRequest.class);
  SocializeActionListener actionListener=AndroidMock.createMock(SocializeActionListener.class);
  AuthProviderResponse response=AndroidMock.createMock(AuthProviderResponse.class);
  AuthProviderData authProviderData=AndroidMock.createMock(AuthProviderData.class);
  MockSocializeApi api=new MockSocializeApi(provider);
  AuthProvider<AuthProviderInfo> authProvider=new AuthProvider<AuthProviderInfo>(){
    @Override public void authenticate(    SocializeAuthRequest authRequest,    String appId,    AuthProviderListener listener){
      fail();
    }
    @Override public void authenticate(    SocializeAuthRequest authRequest,    AuthProviderInfo info,    AuthProviderListener listener){
      addResult(1,listener);
    }
    @Override public void clearCache(    Context context,    AuthProviderInfo info){
      fail();
    }
    @Override public void clearCache(    Context context,    String appId){
      fail();
    }
  }
;
  AndroidMock.expect(request.getEndpoint()).andReturn(endpoint);
  AndroidMock.expect(authProviderData.getAuthProviderType()).andReturn(authProviderType);
  AndroidMock.expect(authProviders.getProvider(authProviderType)).andReturn(authProvider);
  AndroidMock.expect(request.getAuthProviderData()).andReturn(authProviderData);
  AndroidMock.expect(authProviderData.getAuthProviderInfo()).andReturn(authProviderInfo).anyTimes();
  AndroidMock.expect(authProviderInfo.getType()).andReturn(authProviderType);
  authProviderInfo.validate();
  AndroidMock.expect(response.getToken()).andReturn(token);
  AndroidMock.expect(response.getUserId()).andReturn(user);
  authProviderData.setUserId3rdParty(user);
  authProviderData.setToken3rdParty(token);
  api.setAuthProviders(authProviders);
  AndroidMock.replay(authProviderData,authProviderInfo,authProviders,request,response);
  api.handle3rdPartyAuth(getContext(),request,actionListener,listener,key,secret);
  AuthProviderListener authProviderListener=getResult(1);
  String loadSession=getResult(0);
  assertNotNull(loadSession);
  assertNotNull(authProviderListener);
  assertEquals(""String_Node_Str"",loadSession);
  authProviderListener.onAuthSuccess(response);
  String handleRegularAuth=getResult(3);
  assertNotNull(handleRegularAuth);
  assertEquals(""String_Node_Str"",handleRegularAuth);
  AndroidMock.verify(authProviderData,authProviderInfo,authProviders,request,response);
}","@UsesMocks({SocializeProvider.class,SocializeAuthRequest.class,AuthProviderResponse.class,AuthProviders.class,SocializeAuthListener.class,SocializeActionListener.class,IBeanFactory.class,AuthProviderData.class,AuthProviderInfo.class}) @SuppressWarnings(""String_Node_Str"") public void testHandle3rdPartyAuthSuccess() throws SocializeException {
  String appId3rdParty=""String_Node_Str"";
  String key=""String_Node_Str"";
  String secret=""String_Node_Str"";
  String token=""String_Node_Str"";
  String user=""String_Node_Str"";
  String endpoint=""String_Node_Str"";
  AuthProviderType authProviderType=AuthProviderType.FACEBOOK;
  AuthProviderInfo authProviderInfo=AndroidMock.createMock(AuthProviderInfo.class);
  SocializeProvider<SocializeObject> provider=AndroidMock.createMock(SocializeProvider.class);
  AuthProviders authProviders=AndroidMock.createMock(AuthProviders.class);
  SocializeAuthListener listener=AndroidMock.createMock(SocializeAuthListener.class);
  SocializeAuthRequest request=AndroidMock.createMock(SocializeAuthRequest.class);
  SocializeActionListener actionListener=AndroidMock.createMock(SocializeActionListener.class);
  AuthProviderResponse response=AndroidMock.createMock(AuthProviderResponse.class);
  AuthProviderData authProviderData=AndroidMock.createMock(AuthProviderData.class);
  MockSocializeApi api=new MockSocializeApi(provider);
  AuthProvider<AuthProviderInfo> authProvider=new AuthProvider<AuthProviderInfo>(){
    @Override public void authenticate(    SocializeAuthRequest authRequest,    String appId,    AuthProviderListener listener){
      fail();
    }
    @Override public void authenticate(    AuthProviderInfo info,    AuthProviderListener listener){
      addResult(1,listener);
    }
    @Override public void clearCache(    Context context,    AuthProviderInfo info){
      fail();
    }
    @Override public void clearCache(    Context context,    String appId){
      fail();
    }
  }
;
  AndroidMock.expect(request.getEndpoint()).andReturn(endpoint);
  AndroidMock.expect(authProviderData.getAuthProviderType()).andReturn(authProviderType);
  AndroidMock.expect(authProviders.getProvider(authProviderType)).andReturn(authProvider);
  AndroidMock.expect(request.getAuthProviderData()).andReturn(authProviderData);
  AndroidMock.expect(authProviderData.getAuthProviderInfo()).andReturn(authProviderInfo).anyTimes();
  AndroidMock.expect(authProviderInfo.getType()).andReturn(authProviderType);
  authProviderInfo.validate();
  AndroidMock.expect(response.getToken()).andReturn(token);
  AndroidMock.expect(response.getUserId()).andReturn(user);
  authProviderData.setUserId3rdParty(user);
  authProviderData.setToken3rdParty(token);
  api.setAuthProviders(authProviders);
  AndroidMock.replay(authProviderData,authProviderInfo,authProviders,request,response);
  api.handle3rdPartyAuth(getContext(),request,actionListener,listener,key,secret);
  AuthProviderListener authProviderListener=getResult(1);
  String loadSession=getResult(0);
  assertNotNull(loadSession);
  assertNotNull(authProviderListener);
  assertEquals(""String_Node_Str"",loadSession);
  authProviderListener.onAuthSuccess(response);
  String handleRegularAuth=getResult(3);
  assertNotNull(handleRegularAuth);
  assertEquals(""String_Node_Str"",handleRegularAuth);
  AndroidMock.verify(authProviderData,authProviderInfo,authProviders,request,response);
}",0.994538745387454
177837,"public void init(){
  imageView=new ImageView(getContext());
  textView=new TextView(getContext());
  int leftPadding=deviceUtils.getDIP(3);
  int rightPadding=deviceUtils.getDIP(1);
  LayoutParams masterParams=new LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT);
  masterParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  setLayoutParams(masterParams);
  LayoutParams iconParams=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  iconParams.gravity=Gravity.LEFT | Gravity.CENTER_VERTICAL;
  LayoutParams textParams=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  textParams.gravity=Gravity.LEFT | Gravity.CENTER_VERTICAL;
  if (icon != null) {
    imageView.setImageDrawable(icon);
  }
  imageView.setLayoutParams(iconParams);
  imageView.setPadding(leftPadding,0,rightPadding,0);
  RelativeLayout progressLayout=new RelativeLayout(getContext());
  LayoutParams progressLayoutParams=null;
  if (icon != null) {
    progressLayoutParams=new LayoutParams(icon.getIntrinsicWidth(),icon.getIntrinsicHeight());
  }
 else {
    progressLayoutParams=new LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
  }
  progressLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  progressLayout.setLayoutParams(progressLayoutParams);
  ProgressBar progress=new ProgressBar(getContext(),null,android.R.attr.progressBarStyleSmall);
  RelativeLayout.LayoutParams progressParams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
  progressParams.addRule(RelativeLayout.CENTER_IN_PARENT);
  progress.setLayoutParams(progressParams);
  progress.setPadding(leftPadding,0,0,0);
  progressLayout.addView(progress);
  LayoutParams iconFlipperParams=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  iconFlipperParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  iconFlipper=new SafeViewFlipper(getContext());
  iconFlipper.setLayoutParams(iconFlipperParams);
  iconFlipper.addView(imageView,0);
  iconFlipper.addView(progressLayout,1);
  iconFlipper.setDisplayedChild(0);
  textView.setLayoutParams(textParams);
  textView.setPadding(0,0,0,0);
  if (textSize > 0) {
    textView.setTextSize(TypedValue.COMPLEX_UNIT_SP,textSize);
  }
 else {
    textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP,11);
  }
  textView.setTypeface(Typeface.DEFAULT_BOLD);
  textView.setTextColor(textColor);
  if (this.text != null) {
    textView.setText(text);
  }
  addView(iconFlipper);
  addView(textView);
}","public void init(){
  int leftMargin=deviceUtils.getDIP(3);
  LayoutParams masterParams=new LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT);
  masterParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  setLayoutParams(masterParams);
  ProgressBar progress=new ProgressBar(getContext(),null,android.R.attr.progressBarStyleSmall);
  RelativeLayout progressLayout=new RelativeLayout(getContext());
  int minWidth=deviceUtils.getDIP(24);
  if (icon != null) {
    int intrinsicWidth=icon.getMinimumWidth();
    int intrinsicHeight=icon.getMinimumHeight();
    if (intrinsicWidth > minWidth) {
      minWidth=intrinsicWidth;
    }
    progressLayout.setMinimumHeight(intrinsicHeight);
  }
  minWidth+=leftMargin;
  progressLayout.setMinimumWidth(minWidth);
  LayoutParams progressLayoutParams=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  progressLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  progressLayoutParams.setMargins(leftMargin,0,0,0);
  RelativeLayout.LayoutParams progressParams=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  progressParams.addRule(RelativeLayout.CENTER_IN_PARENT);
  progressParams.addRule(RelativeLayout.CENTER_VERTICAL);
  progressLayout.setLayoutParams(progressLayoutParams);
  progress.setLayoutParams(progressParams);
  progressLayout.addView(progress);
  RelativeLayout imageLayout=new RelativeLayout(getContext());
  LayoutParams imageLayoutParams=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.FILL_PARENT);
  imageLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  imageLayoutParams.setMargins(leftMargin,0,0,0);
  imageLayout.setLayoutParams(imageLayoutParams);
  imageView=new ImageView(getContext());
  RelativeLayout.LayoutParams iconParams=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  iconParams.addRule(RelativeLayout.CENTER_IN_PARENT);
  if (this.icon != null) {
    imageView.setImageDrawable(icon);
  }
  imageView.setLayoutParams(iconParams);
  imageLayout.addView(imageView);
  textView=new TextView(getContext());
  LayoutParams textParams=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  textParams.gravity=Gravity.LEFT | Gravity.CENTER_VERTICAL;
  if (this.text != null) {
    textView.setText(text);
  }
  if (textSize > 0) {
    textView.setTextSize(TypedValue.COMPLEX_UNIT_SP,textSize);
  }
 else {
    textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP,11);
  }
  textView.setTypeface(Typeface.DEFAULT_BOLD);
  textView.setTextColor(textColor);
  textView.setLayoutParams(textParams);
  LayoutParams flipperParams=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  flipperParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  iconFlipper=new SafeViewFlipper(getContext());
  iconFlipper.setLayoutParams(flipperParams);
  iconFlipper.addView(imageLayout,0);
  iconFlipper.addView(progressLayout,1);
  iconFlipper.setDisplayedChild(0);
  addView(iconFlipper);
  addView(textView);
}",0.2797691904179052
177838,"public Drawable getDrawable(String name,int density,boolean tileX,boolean tileY,int scaleToWidth,int scaleToHeight,boolean eternal,int forceDensity){
  String densityPath=getPath(name,density);
  String commonPath=getPath(name);
  CacheableDrawable drawable=cache.get(densityPath);
  if (drawable == null) {
    drawable=cache.get(commonPath);
  }
  if (drawable != null && !drawable.isRecycled()) {
    return drawable;
  }
  InputStream in=null;
  try {
    ClassLoader loader=null;
    if (classLoaderProvider != null) {
      loader=classLoaderProvider.getClassLoader();
    }
 else {
      loader=Drawables.class.getClassLoader();
    }
    String path=densityPath;
    in=loader.getResourceAsStream(path);
    if (in == null) {
      if (logger != null && logger.isInfoEnabled()) {
        logger.info(""String_Node_Str"" + path + ""String_Node_Str"");
      }
      path=commonPath;
      in=loader.getResourceAsStream(path);
    }
    if (in != null) {
      drawable=createDrawable(in,path,tileX,tileY,scaleToWidth,scaleToHeight,forceDensity);
      addToCache(path,drawable,eternal);
    }
 else {
      if (logger != null && logger.isWarnEnabled()) {
        logger.warn(""String_Node_Str"" + path + ""String_Node_Str"");
      }
    }
    return drawable;
  }
  finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException ignore) {
        ignore.printStackTrace();
      }
    }
  }
}","public Drawable getDrawable(String name,int density,boolean tileX,boolean tileY,int scaleToWidth,int scaleToHeight,boolean eternal,int forceDensity){
  String densityPath=getPath(name,density);
  String commonPath=getPath(name);
  CacheableDrawable drawable=cache.get(densityPath + name);
  if (drawable == null) {
    drawable=cache.get(commonPath + name);
  }
  if (drawable != null && !drawable.isRecycled()) {
    return drawable;
  }
  InputStream in=null;
  try {
    ClassLoader loader=null;
    if (classLoaderProvider != null) {
      loader=classLoaderProvider.getClassLoader();
    }
 else {
      loader=Drawables.class.getClassLoader();
    }
    String path=densityPath;
    in=loader.getResourceAsStream(path);
    if (in == null) {
      if (logger != null && logger.isInfoEnabled()) {
        logger.info(""String_Node_Str"" + path + ""String_Node_Str"");
      }
      path=commonPath;
      in=loader.getResourceAsStream(path);
    }
    if (in != null) {
      drawable=createDrawable(in,path + name,tileX,tileY,scaleToWidth,scaleToHeight,forceDensity);
      addToCache(path + name,drawable,eternal);
    }
 else {
      if (logger != null && logger.isWarnEnabled()) {
        logger.warn(""String_Node_Str"" + path + ""String_Node_Str"");
      }
    }
    return drawable;
  }
  finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException ignore) {
        ignore.printStackTrace();
      }
    }
  }
}",0.9902845246356696
177839,"@Override public final void onCreate(Bundle savedInstanceState){
  try {
    super.onCreate(savedInstanceState);
    this.requestWindowFeature(Window.FEATURE_NO_TITLE);
    onCreateSafe(savedInstanceState);
  }
 catch (  Throwable e) {
    Log.e(""String_Node_Str"",""String_Node_Str"",e);
    finish();
  }
}","@Override public final void onCreate(Bundle savedInstanceState){
  try {
    super.onCreate(savedInstanceState);
    this.requestWindowFeature(Window.FEATURE_NO_TITLE);
    onCreateSafe(savedInstanceState);
  }
 catch (  Throwable e) {
    Log.e(SocializeLogger.LOG_TAG,""String_Node_Str"",e);
    finish();
  }
}",0.9318181818181818
177840,"@Override public void onClick(View v){
  try {
    String uri=""String_Node_Str"" + action.getLat() + ""String_Node_Str""+ action.getLon()+ ""String_Node_Str"";
    Intent intent=new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri));
    getActivity().startActivity(intent);
  }
 catch (  Exception e) {
    if (logger != null) {
      logger.warn(""String_Node_Str"",e);
    }
 else {
      Log.w(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
}","@Override public void onClick(View v){
  try {
    String uri=""String_Node_Str"" + action.getLat() + ""String_Node_Str""+ action.getLon()+ ""String_Node_Str"";
    Intent intent=new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri));
    getActivity().startActivity(intent);
  }
 catch (  Exception e) {
    if (logger != null) {
      logger.warn(""String_Node_Str"",e);
    }
 else {
      Log.w(SocializeLogger.LOG_TAG,""String_Node_Str"",e);
    }
  }
}",0.9557522123893806
177841,"public void setAction(final SocializeAction action){
  if (actionView != null) {
    actionView.setAction(action,new Date());
    actionView.setVisibility(VISIBLE);
  }
  User user=action.getUser();
  if (user != null) {
    divider.setText(""String_Node_Str"" + user.getDisplayName());
  }
  if (actionLocation != null) {
    if (action.isLocationShared() && action.getLat() != null && action.getLon() != null) {
      Address address=geoUtils.geoCode(action.getLat(),action.getLon());
      if (address != null) {
        actionLocationLine.setVisibility(View.VISIBLE);
        actionLocation.setText(geoUtils.getSimpleLocation(address));
        actionLocation.setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View v){
            try {
              String uri=""String_Node_Str"" + action.getLat() + ""String_Node_Str""+ action.getLon()+ ""String_Node_Str"";
              Intent intent=new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri));
              getActivity().startActivity(intent);
            }
 catch (            Exception e) {
              if (logger != null) {
                logger.warn(""String_Node_Str"",e);
              }
 else {
                Log.w(""String_Node_Str"",""String_Node_Str"",e);
              }
            }
          }
        }
);
      }
    }
  }
}","public void setAction(final SocializeAction action){
  if (actionView != null) {
    actionView.setAction(action,new Date());
    actionView.setVisibility(VISIBLE);
  }
  User user=action.getUser();
  if (user != null) {
    divider.setText(""String_Node_Str"" + user.getDisplayName());
  }
  if (actionLocation != null) {
    if (action.isLocationShared() && action.getLat() != null && action.getLon() != null) {
      Address address=geoUtils.geoCode(action.getLat(),action.getLon());
      if (address != null) {
        actionLocationLine.setVisibility(View.VISIBLE);
        actionLocation.setText(geoUtils.getSimpleLocation(address));
        actionLocation.setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View v){
            try {
              String uri=""String_Node_Str"" + action.getLat() + ""String_Node_Str""+ action.getLon()+ ""String_Node_Str"";
              Intent intent=new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri));
              getActivity().startActivity(intent);
            }
 catch (            Exception e) {
              if (logger != null) {
                logger.warn(""String_Node_Str"",e);
              }
 else {
                Log.w(SocializeLogger.LOG_TAG,""String_Node_Str"",e);
              }
            }
          }
        }
);
      }
    }
  }
}",0.9843166542195668
177842,"@Override protected void onViewLoad(){
  super.onViewLoad();
  if (getSocialize().isAuthenticated()) {
    dialog=progressDialogFactory.show(getContext(),""String_Node_Str"",""String_Node_Str"");
    count=1;
    doGetComment();
  }
 else {
    showError(getContext(),new SocializeException(""String_Node_Str""));
  }
}","@Override public void onViewLoad(){
  super.onViewLoad();
  if (getSocialize().isAuthenticated()) {
    dialog=progressDialogFactory.show(getContext(),""String_Node_Str"",""String_Node_Str"");
    count=1;
    doGetComment();
  }
 else {
    showError(getContext(),new SocializeException(""String_Node_Str""));
  }
}",0.9791332263242376
177843,"@Override protected View getView(Bundle bundle,Object... entityKeys){
  if (entityKeys != null) {
    if (actionLayoutView == null) {
      actionLayoutView=container.getBean(""String_Node_Str"",entityKeys);
      LayoutParams scrollViewLayout=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
      LayoutParams childViewLayout=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
      ScrollView scrollView=new ScrollView(getContext());
      scrollView.setFillViewport(true);
      scrollView.setLayoutParams(scrollViewLayout);
      scrollView.addView(actionLayoutView,childViewLayout);
      LinearLayout layout=new LinearLayout(getContext());
      LayoutParams masterParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
      layout.setLayoutParams(masterParams);
      layout.setBackgroundDrawable(((Drawables)container.getBean(""String_Node_Str"")).getDrawable(""String_Node_Str"",true,true,true));
      layout.addView(scrollView);
      view=layout;
    }
    return view;
  }
 else {
    Log.e(""String_Node_Str"",""String_Node_Str"" + getClass().getSimpleName());
    return null;
  }
}","@Override protected View getView(Bundle bundle,Object... entityKeys){
  if (entityKeys != null) {
    if (actionLayoutView == null) {
      actionLayoutView=container.getBean(""String_Node_Str"",entityKeys);
      LayoutParams scrollViewLayout=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
      LayoutParams childViewLayout=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
      ScrollView scrollView=new ScrollView(getContext());
      scrollView.setFillViewport(true);
      scrollView.setLayoutParams(scrollViewLayout);
      scrollView.addView(actionLayoutView,childViewLayout);
      LinearLayout layout=new LinearLayout(getContext());
      LayoutParams masterParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
      layout.setLayoutParams(masterParams);
      layout.setBackgroundDrawable(((Drawables)container.getBean(""String_Node_Str"")).getDrawable(""String_Node_Str"",true,true,true));
      layout.addView(scrollView);
      view=layout;
    }
    return view;
  }
 else {
    Log.e(SocializeLogger.LOG_TAG,""String_Node_Str"" + getClass().getSimpleName());
    return null;
  }
}",0.9850157728706624
177844,"@Override protected void onViewUpdate(){
  super.onViewUpdate();
  reload();
}","@Override public void onViewUpdate(){
  super.onViewUpdate();
  reload();
}",0.9281045751633988
177845,"@Override protected void onViewLoad(){
  super.onViewLoad();
  final String entityKey=actionBarView.getEntityKey();
  ticker.startTicker();
  if (logger != null && logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + getClass().getSimpleName());
  }
  if (onActionBarEventListener != null) {
    onActionBarEventListener.onLoad(actionBarView);
  }
  CacheableEntity entity=entityCache.get(entityKey);
  if (entity == null) {
    getSocialize().view(entityKey,new ViewAddListener(){
      @Override public void onError(      SocializeException error){
        error.printStackTrace();
        getEntityData(entityKey);
      }
      @Override public void onCreate(      View entity){
        getEntityData(entityKey);
      }
    }
);
  }
 else {
    getEntityData(entityKey);
  }
}","@Override public void onViewLoad(){
  super.onViewLoad();
  final String entityKey=actionBarView.getEntityKey();
  ticker.startTicker();
  if (logger != null && logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + getClass().getSimpleName());
  }
  if (onActionBarEventListener != null) {
    onActionBarEventListener.onLoad(actionBarView);
  }
  CacheableEntity entity=entityCache.get(entityKey);
  if (entity == null) {
    getSocialize().view(entityKey,new ViewAddListener(){
      @Override public void onError(      SocializeException error){
        error.printStackTrace();
        getEntityData(entityKey);
      }
      @Override public void onCreate(      View entity){
        getEntityData(entityKey);
      }
    }
);
  }
 else {
    getEntityData(entityKey);
  }
}",0.2435003170577045
177846,"@Override public void onCreateSafe(Bundle savedInstanceState){
  Bundle extras=getIntent().getExtras();
  if (extras == null || !extras.containsKey(SocializeUI.ENTITY_KEY)) {
    Log.w(""String_Node_Str"",""String_Node_Str"");
    finish();
  }
 else {
    String entityKey=extras.getString(SocializeUI.ENTITY_KEY);
    if (StringUtils.isEmpty(entityKey)) {
      Log.w(""String_Node_Str"",""String_Node_Str"");
      finish();
    }
 else {
      view=new CommentView(this);
      setContentView(view);
    }
  }
}","@Override public void onCreateSafe(Bundle savedInstanceState){
  Bundle extras=getIntent().getExtras();
  if (extras == null || !extras.containsKey(SocializeUI.ENTITY_KEY)) {
    Log.w(SocializeLogger.LOG_TAG,""String_Node_Str"");
    finish();
  }
 else {
    String entityKey=extras.getString(SocializeUI.ENTITY_KEY);
    if (StringUtils.isEmpty(entityKey)) {
      Log.w(SocializeLogger.LOG_TAG,""String_Node_Str"");
      finish();
    }
 else {
      view=new CommentView(this);
      setContentView(view);
    }
  }
}",0.9220272904483432
177847,"@Override public int getCount(){
  int extra=1;
  if (!isDisplayLoading()) {
    extra=0;
  }
  return (comments == null) ? 0 : comments.size() + extra;
}","@Override public int getCount(){
  return count;
}",0.4803921568627451
177848,"@Override public View getView(final int position,View oldView,ViewGroup parent){
  View returnView=null;
  CommentListItem view=null;
  if (oldView instanceof CommentListItem) {
    view=(CommentListItem)oldView;
  }
  User tmpUser=null;
  final Comment item=(Comment)getItem(position);
  if (item != null) {
    tmpUser=item.getUser();
  }
  User currentUser=getSocializeUI().getSocialize().getSession().getUser();
  if (currentUser != null && tmpUser != null && currentUser.getId().equals(tmpUser.getId())) {
    tmpUser=currentUser;
  }
  final User user=tmpUser;
  if (view == null || !imageLoader.isEmpty()) {
    view=commentItemViewFactory.getBean();
  }
  if (view != null) {
    returnView=view;
    if (position >= comments.size()) {
      if (loadingView == null) {
        loadingView=listItemLoadingViewFactory.getBean();
        loadingView.setTag(null);
      }
      returnView=loadingView;
    }
 else {
      if (item != null) {
        String displayName=""String_Node_Str"";
        String imageUrl=null;
        if (user != null) {
          imageUrl=user.getSmallImageUri();
          displayName=user.getDisplayName();
          if (displayName == null) {
            displayName=item.getUser().getDisplayName();
            if (displayName == null) {
              displayName=""String_Node_Str"";
            }
          }
          view.setOnClickListener(new OnClickListener(){
            @Override public void onClick(            View v){
              if (user != null && user.getId() != null) {
                getSocializeUI().showActionDetailViewForResult(context,user,item,SocializeUIActivity.PROFILE_UPDATE);
              }
 else {
                if (logger != null) {
                  logger.warn(""String_Node_Str"" + item.getId());
                }
              }
            }
          }
);
        }
 else {
          displayName=""String_Node_Str"";
        }
        TextView comment=view.getComment();
        TextView userName=view.getAuthor();
        TextView time=view.getTime();
        ImageView locationIcon=view.getLocationIcon();
        final ImageView userIcon=view.getUserIcon();
        if (comment != null) {
          comment.setText(item.getText());
        }
        if (userName != null) {
          userName.setText(displayName);
        }
        if (locationIcon != null) {
          if (item.hasLocation() && item.isLocationShared()) {
            locationIcon.setVisibility(View.VISIBLE);
          }
 else {
            locationIcon.setVisibility(View.GONE);
          }
        }
        if (time != null) {
          Long date=item.getDate();
          if (date != null && date > 0) {
            long diff=(now.getTime() - date.longValue());
            time.setText(dateUtils.getTimeString(diff) + ""String_Node_Str"");
          }
 else {
            time.setText(""String_Node_Str"");
          }
        }
        if (userIcon != null && drawables != null) {
          int densitySize=deviceUtils.getDIP(iconSize);
          final Drawable defaultImage=drawables.getDrawable(SocializeUI.DEFAULT_USER_ICON);
          if (user != null) {
            userIcon.getBackground().setAlpha(255);
            if (!StringUtils.isEmpty(imageUrl)) {
              try {
                CacheableDrawable cached=drawables.getCache().get(imageUrl);
                if (cached != null && !cached.isRecycled()) {
                  if (logger != null && logger.isInfoEnabled()) {
                    logger.info(""String_Node_Str"" + cached);
                  }
                  userIcon.setImageDrawable(cached);
                  userIcon.getBackground().setAlpha(255);
                }
 else {
                  userIcon.setImageDrawable(null);
                  userIcon.getBackground().setAlpha(64);
                  imageLoader.loadImage(position,imageUrl,new ImageLoadListener(){
                    @Override public void onImageLoadFail(                    final ImageLoadRequest request,                    Exception error){
                      logError(""String_Node_Str"",error);
                      userIcon.post(new Runnable(){
                        public void run(){
                          if (logger != null && logger.isInfoEnabled()) {
                            logger.info(""String_Node_Str"");
                          }
                          userIcon.setImageDrawable(defaultImage);
                          userIcon.getBackground().setAlpha(255);
                        }
                      }
);
                    }
                    @Override public void onImageLoad(                    final ImageLoadRequest request,                    final SafeBitmapDrawable drawable,                    boolean async){
                      if (request == null || !request.isCanceled()) {
                        if (async) {
                          userIcon.post(new Runnable(){
                            public void run(){
                              setImageIcon(user,position,userIcon,drawable,defaultImage);
                            }
                          }
);
                        }
 else {
                          setImageIcon(user,position,userIcon,drawable,defaultImage);
                        }
                      }
                    }
                  }
);
                }
              }
 catch (              Exception e) {
                String errorMsg=""String_Node_Str"" + imageUrl + ""String_Node_Str"";
                logError(errorMsg,e);
                userIcon.setImageDrawable(defaultImage);
              }
            }
 else             if (!StringUtils.isEmpty(user.getProfilePicData())) {
              try {
                Drawable drawable=drawables.getDrawable(user.getId().toString(),base64Utils.decode(user.getProfilePicData()),densitySize,densitySize);
                userIcon.setImageDrawable(drawable);
              }
 catch (              Base64DecoderException e) {
                logError(""String_Node_Str"",e);
                userIcon.setImageDrawable(defaultImage);
              }
            }
 else {
              userIcon.setImageDrawable(defaultImage);
            }
          }
        }
      }
    }
  }
  if (returnView == null) {
    returnView=oldView;
  }
  return returnView;
}","@Override public View getView(final int position,View oldView,ViewGroup parent){
  View returnView=null;
  CommentListItem view=null;
  if (oldView instanceof CommentListItem) {
    view=(CommentListItem)oldView;
  }
  User tmpUser=null;
  final Comment item=(Comment)getItem(position);
  if (item != null) {
    tmpUser=item.getUser();
  }
  User currentUser=getSocializeUI().getSocialize().getSession().getUser();
  if (currentUser != null && tmpUser != null && currentUser.getId().equals(tmpUser.getId())) {
    tmpUser=currentUser;
  }
  final User user=tmpUser;
  if (view == null || !imageLoader.isEmpty()) {
    view=commentItemViewFactory.getBean();
  }
  if (view != null) {
    returnView=view;
    if (position >= comments.size()) {
      if (loadingView == null) {
        Log.e(SocializeLogger.LOG_TAG,""String_Node_Str"");
        loadingView=listItemLoadingViewFactory.getBean();
        loadingView.setTag(null);
      }
      returnView=loadingView;
    }
 else {
      if (item != null) {
        String displayName=""String_Node_Str"";
        String imageUrl=null;
        if (user != null) {
          imageUrl=user.getSmallImageUri();
          displayName=user.getDisplayName();
          if (displayName == null) {
            displayName=item.getUser().getDisplayName();
            if (displayName == null) {
              displayName=""String_Node_Str"";
            }
          }
          view.setOnClickListener(new OnClickListener(){
            @Override public void onClick(            View v){
              if (user != null && user.getId() != null) {
                getSocializeUI().showActionDetailViewForResult(context,user,item,SocializeUIActivity.PROFILE_UPDATE);
              }
 else {
                if (logger != null) {
                  logger.warn(""String_Node_Str"" + item.getId());
                }
              }
            }
          }
);
        }
 else {
          displayName=""String_Node_Str"";
        }
        TextView comment=view.getComment();
        TextView userName=view.getAuthor();
        TextView time=view.getTime();
        ImageView locationIcon=view.getLocationIcon();
        final ImageView userIcon=view.getUserIcon();
        if (comment != null) {
          comment.setText(item.getText());
        }
        if (userName != null) {
          userName.setText(displayName);
        }
        if (locationIcon != null) {
          if (item.hasLocation() && item.isLocationShared()) {
            locationIcon.setVisibility(View.VISIBLE);
          }
 else {
            locationIcon.setVisibility(View.GONE);
          }
        }
        if (time != null) {
          Long date=item.getDate();
          if (date != null && date > 0) {
            long diff=(now.getTime() - date.longValue());
            time.setText(dateUtils.getTimeString(diff) + ""String_Node_Str"");
          }
 else {
            time.setText(""String_Node_Str"");
          }
        }
        if (userIcon != null && drawables != null) {
          int densitySize=deviceUtils.getDIP(iconSize);
          final Drawable defaultImage=drawables.getDrawable(SocializeUI.DEFAULT_USER_ICON);
          if (user != null) {
            userIcon.getBackground().setAlpha(255);
            if (!StringUtils.isEmpty(imageUrl)) {
              try {
                CacheableDrawable cached=drawables.getCache().get(imageUrl);
                if (cached != null && !cached.isRecycled()) {
                  if (logger != null && logger.isInfoEnabled()) {
                    logger.info(""String_Node_Str"" + cached);
                  }
                  userIcon.setImageDrawable(cached);
                  userIcon.getBackground().setAlpha(255);
                }
 else {
                  userIcon.setImageDrawable(null);
                  userIcon.getBackground().setAlpha(64);
                  imageLoader.loadImage(position,imageUrl,new ImageLoadListener(){
                    @Override public void onImageLoadFail(                    final ImageLoadRequest request,                    Exception error){
                      logError(""String_Node_Str"",error);
                      userIcon.post(new Runnable(){
                        public void run(){
                          if (logger != null && logger.isInfoEnabled()) {
                            logger.info(""String_Node_Str"");
                          }
                          userIcon.setImageDrawable(defaultImage);
                          userIcon.getBackground().setAlpha(255);
                        }
                      }
);
                    }
                    @Override public void onImageLoad(                    final ImageLoadRequest request,                    final SafeBitmapDrawable drawable,                    boolean async){
                      if (request == null || !request.isCanceled()) {
                        if (async) {
                          userIcon.post(new Runnable(){
                            public void run(){
                              setImageIcon(user,position,userIcon,drawable,defaultImage);
                            }
                          }
);
                        }
 else {
                          setImageIcon(user,position,userIcon,drawable,defaultImage);
                        }
                      }
                    }
                  }
);
                }
              }
 catch (              Exception e) {
                String errorMsg=""String_Node_Str"" + imageUrl + ""String_Node_Str"";
                logError(errorMsg,e);
                userIcon.setImageDrawable(defaultImage);
              }
            }
 else             if (!StringUtils.isEmpty(user.getProfilePicData())) {
              try {
                Drawable drawable=drawables.getDrawable(user.getId().toString(),base64Utils.decode(user.getProfilePicData()),densitySize,densitySize);
                userIcon.setImageDrawable(drawable);
              }
 catch (              Base64DecoderException e) {
                logError(""String_Node_Str"",e);
                userIcon.setImageDrawable(defaultImage);
              }
            }
 else {
              userIcon.setImageDrawable(defaultImage);
            }
          }
        }
      }
    }
  }
  if (returnView == null) {
    returnView=oldView;
  }
  return returnView;
}",0.9953814301640388
177849,"public boolean isDisplayLoading(){
  return !(last || (comments != null && comments.size() == 0));
}","public boolean isDisplayLoading(){
  return !last && (comments != null && comments.size() > 0);
}",0.9543147208121828
177850,"@Override public void notifyDataSetChanged(){
  super.notifyDataSetChanged();
}","@Override public void notifyDataSetChanged(){
  super.notifyDataSetChanged();
  int extra=0;
  if (isDisplayLoading()) {
    extra=1;
  }
  count=(comments == null) ? 0 : comments.size() + extra;
}",0.572463768115942
177851,"@Override protected void onViewLoad(){
  super.onViewLoad();
  if (getSocialize().isAuthenticated()) {
    dialog=progressDialogFactory.show(getContext(),""String_Node_Str"",""String_Node_Str"");
    count=2;
    doGetUserProfile();
    doGetComment();
  }
 else {
    showError(getContext(),new SocializeException(""String_Node_Str""));
  }
}","@Override public void onViewLoad(){
  super.onViewLoad();
  if (getSocialize().isAuthenticated()) {
    dialog=progressDialogFactory.show(getContext(),""String_Node_Str"",""String_Node_Str"");
    count=2;
    doGetUserProfile();
    doGetComment();
  }
 else {
    showError(getContext(),new SocializeException(""String_Node_Str""));
  }
}",0.9806259314456036
177852,"@Override protected View getView(Bundle bundle,Object... entityKeys){
  if (entityKeys != null) {
    if (commentLayoutView == null) {
      commentLayoutView=container.getBean(""String_Node_Str"",entityKeys);
    }
    return commentLayoutView;
  }
 else {
    Log.e(""String_Node_Str"",""String_Node_Str"" + getClass().getSimpleName());
    return null;
  }
}","@Override protected View getView(Bundle bundle,Object... entityKeys){
  if (entityKeys != null) {
    if (commentLayoutView == null) {
      commentLayoutView=container.getBean(""String_Node_Str"",entityKeys);
    }
    return commentLayoutView;
  }
 else {
    Log.e(SocializeLogger.LOG_TAG,""String_Node_Str"" + getClass().getSimpleName());
    return null;
  }
}",0.9441340782122905
177853,"@Override protected void onViewRendered(int width,int height){
  super.onViewRendered(width,height);
  commentField.requestFocus();
}","@Override public void onViewRendered(int width,int height){
  super.onViewRendered(width,height);
  commentField.requestFocus();
}",0.9581749049429658
177854,"public void init(){
  final int eight=deviceUtils.getDIP(8);
  final int four=deviceUtils.getDIP(4);
  final int imagePadding=deviceUtils.getDIP(4);
  final int textColor=colors.getColor(Colors.BODY);
  final int titleColor=colors.getColor(Colors.TITLE);
  final int iconSize=deviceUtils.getDIP(64);
  ListView.LayoutParams layout=new ListView.LayoutParams(ListView.LayoutParams.FILL_PARENT,ListView.LayoutParams.FILL_PARENT);
  setDrawingCacheEnabled(true);
  setBackgroundColor(colors.getColor(Colors.LIST_ITEM_BG));
  setOrientation(LinearLayout.HORIZONTAL);
  setLayoutParams(layout);
  setGravity(Gravity.TOP);
  setPadding(eight,eight,eight,eight);
  LinearLayout contentLayout=new LinearLayout(getContext());
  contentLayout.setOrientation(LinearLayout.VERTICAL);
  contentLayout.setGravity(Gravity.LEFT);
  contentLayout.setPadding(0,0,0,0);
  LinearLayout.LayoutParams contentLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentLayoutParams.setMargins(four,0,0,0);
  contentLayout.setLayoutParams(contentLayoutParams);
  LinearLayout contentHeaderLayout=new LinearLayout(getContext());
  LinearLayout.LayoutParams contentHeaderLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentHeaderLayout.setLayoutParams(contentHeaderLayoutParams);
  contentHeaderLayout.setGravity(Gravity.LEFT);
  contentHeaderLayout.setOrientation(LinearLayout.HORIZONTAL);
  contentHeaderLayout.setPadding(0,0,0,0);
  LinearLayout.LayoutParams authorLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  authorLayoutParams.weight=1.0f;
  author=new TextView(getContext());
  author.setTextSize(TypedValue.COMPLEX_UNIT_DIP,16);
  author.setMaxLines(1);
  author.setTypeface(Typeface.DEFAULT_BOLD);
  author.setTextColor(titleColor);
  author.setLayoutParams(authorLayoutParams);
  author.setSingleLine();
  LinearLayout.LayoutParams commentLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  comment=new TextView(getContext());
  comment.setTextSize(TypedValue.COMPLEX_UNIT_DIP,14);
  comment.setTextColor(textColor);
  comment.setLayoutParams(commentLayoutParams);
  comment.setMaxLines(3);
  LinearLayout.LayoutParams timeLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  time=new TextView(getContext());
  time.setTextSize(TypedValue.COMPLEX_UNIT_DIP,12);
  time.setMaxLines(1);
  time.setTypeface(Typeface.DEFAULT,Typeface.ITALIC);
  time.setTextColor(titleColor);
  time.setLayoutParams(timeLayoutParams);
  time.setSingleLine();
  time.setGravity(Gravity.RIGHT);
  LinearLayout.LayoutParams locationIconParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  locationIconParams.gravity=Gravity.RIGHT | Gravity.CENTER_VERTICAL;
  locationIcon=new ImageView(getContext());
  locationIcon.setImageDrawable(drawables.getDrawable(""String_Node_Str""));
  locationIcon.setLayoutParams(locationIconParams);
  LinearLayout.LayoutParams metaParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  metaParams.gravity=Gravity.RIGHT | Gravity.TOP;
  LinearLayout meta=new LinearLayout(getContext());
  meta.setOrientation(HORIZONTAL);
  meta.setLayoutParams(metaParams);
  meta.addView(time);
  meta.addView(locationIcon);
  contentHeaderLayout.addView(author);
  contentHeaderLayout.addView(meta);
  contentLayout.addView(contentHeaderLayout);
  contentLayout.addView(comment);
  LinearLayout iconLayout=new LinearLayout(getContext());
  LinearLayout.LayoutParams iconLayoutParams=new LinearLayout.LayoutParams(iconSize,iconSize);
  iconLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.TOP;
  iconLayout.setLayoutParams(iconLayoutParams);
  iconLayout.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.TOP);
  userIcon=new ImageView(getContext());
  userIcon.setLayoutParams(iconLayoutParams);
  userIcon.setPadding(imagePadding,imagePadding,imagePadding,imagePadding);
  GradientDrawable imageBG=new GradientDrawable(Orientation.BOTTOM_TOP,new int[]{Color.WHITE,Color.WHITE});
  imageBG.setStroke(deviceUtils.getDIP(1),Color.BLACK);
  userIcon.setBackgroundDrawable(imageBG);
  userIcon.setScaleType(ScaleType.CENTER_CROP);
  iconLayout.addView(userIcon);
  addView(iconLayout);
  addView(contentLayout);
}","public void init(){
  final int eight=deviceUtils.getDIP(8);
  final int four=deviceUtils.getDIP(4);
  final int imagePadding=deviceUtils.getDIP(4);
  final int textColor=colors.getColor(Colors.BODY);
  final int titleColor=colors.getColor(Colors.TITLE);
  final int iconSize=deviceUtils.getDIP(64);
  ListView.LayoutParams layout=new ListView.LayoutParams(ListView.LayoutParams.FILL_PARENT,deviceUtils.getDIP(80));
  setDrawingCacheEnabled(true);
  if (backgroundFactory != null) {
    setBackgroundDrawable(backgroundFactory.getBackground());
  }
 else {
    setBackgroundColor(colors.getColor(Colors.LIST_ITEM_BG));
  }
  setOrientation(LinearLayout.HORIZONTAL);
  setLayoutParams(layout);
  setGravity(Gravity.TOP);
  setPadding(eight,eight,eight,eight);
  LinearLayout contentLayout=new LinearLayout(getContext());
  contentLayout.setOrientation(LinearLayout.VERTICAL);
  contentLayout.setGravity(Gravity.LEFT);
  contentLayout.setPadding(0,0,0,0);
  LinearLayout.LayoutParams contentLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentLayoutParams.setMargins(four,0,0,0);
  contentLayout.setLayoutParams(contentLayoutParams);
  LinearLayout contentHeaderLayout=new LinearLayout(getContext());
  LinearLayout.LayoutParams contentHeaderLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentHeaderLayout.setLayoutParams(contentHeaderLayoutParams);
  contentHeaderLayout.setGravity(Gravity.LEFT);
  contentHeaderLayout.setOrientation(LinearLayout.HORIZONTAL);
  contentHeaderLayout.setPadding(0,0,0,0);
  LinearLayout.LayoutParams authorLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  authorLayoutParams.weight=1.0f;
  author=new TextView(getContext());
  author.setTextSize(TypedValue.COMPLEX_UNIT_DIP,16);
  author.setMaxLines(1);
  author.setTypeface(Typeface.DEFAULT_BOLD);
  author.setTextColor(titleColor);
  author.setLayoutParams(authorLayoutParams);
  author.setSingleLine();
  LinearLayout.LayoutParams commentLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  comment=new TextView(getContext());
  comment.setTextSize(TypedValue.COMPLEX_UNIT_DIP,14);
  comment.setTextColor(textColor);
  comment.setLayoutParams(commentLayoutParams);
  comment.setMaxLines(2);
  LinearLayout.LayoutParams timeLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  time=new TextView(getContext());
  time.setTextSize(TypedValue.COMPLEX_UNIT_DIP,12);
  time.setMaxLines(1);
  time.setTypeface(Typeface.DEFAULT,Typeface.ITALIC);
  time.setTextColor(titleColor);
  time.setLayoutParams(timeLayoutParams);
  time.setSingleLine();
  time.setGravity(Gravity.RIGHT);
  LinearLayout.LayoutParams locationIconParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  locationIconParams.gravity=Gravity.RIGHT | Gravity.CENTER_VERTICAL;
  locationIcon=new ImageView(getContext());
  locationIcon.setImageDrawable(drawables.getDrawable(""String_Node_Str""));
  locationIcon.setLayoutParams(locationIconParams);
  LinearLayout.LayoutParams metaParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  metaParams.gravity=Gravity.RIGHT | Gravity.TOP;
  LinearLayout meta=new LinearLayout(getContext());
  meta.setOrientation(HORIZONTAL);
  meta.setLayoutParams(metaParams);
  meta.addView(time);
  meta.addView(locationIcon);
  contentHeaderLayout.addView(author);
  contentHeaderLayout.addView(meta);
  contentLayout.addView(contentHeaderLayout);
  contentLayout.addView(comment);
  LinearLayout iconLayout=new LinearLayout(getContext());
  LinearLayout.LayoutParams iconLayoutParams=new LinearLayout.LayoutParams(iconSize,iconSize);
  iconLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.TOP;
  iconLayout.setLayoutParams(iconLayoutParams);
  iconLayout.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.TOP);
  userIcon=new ImageView(getContext());
  userIcon.setLayoutParams(iconLayoutParams);
  userIcon.setPadding(imagePadding,imagePadding,imagePadding,imagePadding);
  GradientDrawable imageBG=new GradientDrawable(Orientation.BOTTOM_TOP,new int[]{Color.WHITE,Color.WHITE});
  imageBG.setStroke(deviceUtils.getDIP(1),Color.BLACK);
  userIcon.setBackgroundDrawable(imageBG);
  userIcon.setScaleType(ScaleType.CENTER_CROP);
  iconLayout.addView(userIcon);
  addView(iconLayout);
  addView(contentLayout);
}",0.9760827407886232
177855,"@Override public void authenticate(String consumerKey,String consumerSecret,AuthProviderData authProviderData,SocializeAuthListener listener,SocializeSessionConsumer sessionConsumer,boolean do3rdPartyAuth){
  listener.onAuthSuccess(new SocializeSessionImpl());
  if (delegate != null)   delegate.authenticate(consumerKey,consumerSecret,authProviderData,listener,sessionConsumer,do3rdPartyAuth);
}","@Override public void authenticate(String consumerKey,String consumerSecret,AuthProviderData authProviderData,SocializeAuthListener listener,SocializeSessionConsumer sessionConsumer,boolean do3rdPartyAuth){
  MockSocializeSession mockSocializeSession=new MockSocializeSession();
  listener.onAuthSuccess(mockSocializeSession);
  sessionConsumer.setSession(mockSocializeSession);
  if (delegate != null)   delegate.authenticate(consumerKey,consumerSecret,authProviderData,listener,sessionConsumer,do3rdPartyAuth);
}",0.7758241758241758
177856,"@Override public void listActivityByUser(SocializeSession session,long id,int startIndex,int endIndex,ActivityListener listener){
  if (delegate != null)   delegate.listActivityByUser(session,id,startIndex,endIndex,listener);
}","@Override public void listActivityByUser(SocializeSession session,long id,int startIndex,int endIndex,ActivityListener listener){
  if (delegate != null)   delegate.listActivityByUser(session,id,startIndex,endIndex,listener);
  listener.onList((ListResult<SocializeAction>)listResult);
}",0.8832684824902723
177857,"@Override public void listCommentsById(SocializeSession session,CommentListener listener,int... ids){
  if (delegate != null)   delegate.listCommentsById(session,listener,ids);
}","@Override public void listCommentsById(SocializeSession session,CommentListener listener,int... ids){
  if (delegate != null)   delegate.listCommentsById(session,listener,ids);
  listener.onList((ListResult<Comment>)listResult);
}",0.8725490196078431
177858,"@Override public void listLikesById(SocializeSession session,LikeListener listener,int... ids){
  if (delegate != null)   delegate.listLikesById(session,listener,ids);
}","@Override public void listLikesById(SocializeSession session,LikeListener listener,int... ids){
  if (delegate != null)   delegate.listLikesById(session,listener,ids);
  listener.onList((ListResult<Like>)listResult);
}",0.8733850129198967
177859,"@Override public void listEntitiesByKey(SocializeSession session,EntityListener listener,String... keys){
  if (delegate != null)   delegate.listEntitiesByKey(session,listener,keys);
}","@Override public void listEntitiesByKey(SocializeSession session,EntityListener listener,String... keys){
  if (delegate != null)   delegate.listEntitiesByKey(session,listener,keys);
  listener.onList((ListResult<Entity>)listResult);
}",0.8782816229116945
177860,"@Override public void listCommentsByEntity(SocializeSession session,String url,int startIndex,int endIndex,CommentListener listener){
  if (delegate != null)   delegate.listCommentsByEntity(session,url,startIndex,endIndex,listener);
}","@Override public void listCommentsByEntity(SocializeSession session,String url,int startIndex,int endIndex,CommentListener listener){
  if (delegate != null)   delegate.listCommentsByEntity(session,url,startIndex,endIndex,listener);
  listener.onList((ListResult<Comment>)listResult);
}",0.9
177861,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  try {
    loadConfig();
    setContentView(R.layout.authenticate);
    txtHost=(EditText)findViewById(R.id.txtHost);
    txtConsumerKey=(EditText)findViewById(R.id.txtConsumerKey);
    txtConsumerSecret=(EditText)findViewById(R.id.txtConsumerSecret);
    txtAuthResult=(TextView)findViewById(R.id.txtAuthResult);
    txtAuthUserID=(TextView)findViewById(R.id.txtAuthUserID);
    txtAuthUser3rdPartyID=(TextView)findViewById(R.id.txtAuthUser3rdPartyID);
    config=Socialize.getSocialize().getConfig();
    txtHost.setText(url);
    txtConsumerKey.setText(consumerKey);
    txtConsumerSecret.setText(consumerSecret);
    btnAuth=(Button)findViewById(R.id.btnAuthenticate);
    btnAuthFB=(Button)findViewById(R.id.btnAuthenticateFB);
    btnCheckAuth=(Button)findViewById(R.id.btnCheckAuthenticate);
    btnCheckAuthFB=(Button)findViewById(R.id.btnCheckAuthenticateFB);
    btnApi=(Button)findViewById(R.id.btnApi);
    btnExit=(Button)findViewById(R.id.btnExit);
    btnClearAuth=(Button)findViewById(R.id.btnClearAuth);
    btnAuth.setOnClickListener(new AuthenticateClickListener(false));
    btnAuthFB.setOnClickListener(new AuthenticateClickListener(true));
    btnApi.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        Intent i=new Intent(AuthenticateActivity.this,ApiActivity.class);
        startActivity(i);
      }
    }
);
    btnExit.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        finish();
      }
    }
);
    btnCheckAuth.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        if (Socialize.getSocialize().isAuthenticated()) {
          txtAuthResult.setText(""String_Node_Str"");
        }
 else {
          txtAuthResult.setText(""String_Node_Str"");
        }
      }
    }
);
    btnCheckAuthFB.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        if (Socialize.getSocialize().isAuthenticated(AuthProviderType.FACEBOOK)) {
          txtAuthResult.setText(""String_Node_Str"");
        }
 else {
          txtAuthResult.setText(""String_Node_Str"");
        }
      }
    }
);
    btnClearAuth.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        final ProgressDialog progress=ProgressDialog.show(AuthenticateActivity.this,""String_Node_Str"",""String_Node_Str"");
        txtAuthResult.setText(""String_Node_Str"");
        new AsyncTask<Void,Void,Void>(){
          @Override protected Void doInBackground(          Void... params){
            Socialize.getSocialize().clearSessionCache();
            return null;
          }
          @Override protected void onPostExecute(          Void result){
            progress.dismiss();
            txtAuthResult.setText(""String_Node_Str"");
          }
        }
.execute((Void)null);
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  try {
    loadConfig();
    setContentView(R.layout.authenticate);
    txtHost=(EditText)findViewById(R.id.txtHost);
    txtConsumerKey=(EditText)findViewById(R.id.txtConsumerKey);
    txtConsumerSecret=(EditText)findViewById(R.id.txtConsumerSecret);
    txtAuthResult=(TextView)findViewById(R.id.txtAuthResult);
    txtAuthUserID=(TextView)findViewById(R.id.txtAuthUserID);
    txtAuthUser3rdPartyID=(TextView)findViewById(R.id.txtAuthUser3rdPartyID);
    config=Socialize.getSocialize().getConfig();
    txtHost.setText(url);
    txtConsumerKey.setText(consumerKey);
    txtConsumerSecret.setText(consumerSecret);
    btnAuth=(Button)findViewById(R.id.btnAuthenticate);
    btnAuthFB=(Button)findViewById(R.id.btnAuthenticateFB);
    btnCheckAuth=(Button)findViewById(R.id.btnCheckAuthenticate);
    btnCheckAuthFB=(Button)findViewById(R.id.btnCheckAuthenticateFB);
    btnApi=(Button)findViewById(R.id.btnApi);
    btnExit=(Button)findViewById(R.id.btnExit);
    btnClearAuth=(Button)findViewById(R.id.btnClearAuth);
    btnAuth.setOnClickListener(new AuthenticateClickListener(false));
    btnAuthFB.setOnClickListener(new AuthenticateClickListener(true));
    btnApi.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        Intent i=new Intent(AuthenticateActivity.this,ApiActivity.class);
        startActivity(i);
      }
    }
);
    btnExit.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        finish();
      }
    }
);
    btnCheckAuth.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        if (Socialize.getSocialize().isAuthenticated()) {
          txtAuthResult.setText(""String_Node_Str"");
        }
 else {
          txtAuthResult.setText(""String_Node_Str"");
        }
      }
    }
);
    btnCheckAuthFB.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        if (Socialize.getSocialize().isAuthenticated(AuthProviderType.FACEBOOK)) {
          txtAuthResult.setText(""String_Node_Str"");
        }
 else {
          txtAuthResult.setText(""String_Node_Str"");
        }
      }
    }
);
    btnClearAuth.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      final View v){
        final ProgressDialog progress=ProgressDialog.show(AuthenticateActivity.this,""String_Node_Str"",""String_Node_Str"");
        txtAuthResult.setText(""String_Node_Str"");
        new AsyncTask<Void,Void,Void>(){
          @Override protected Void doInBackground(          Void... params){
            Socialize.getSocialize().clearSessionCache(v.getContext());
            return null;
          }
          @Override protected void onPostExecute(          Void result){
            progress.dismiss();
            txtAuthResult.setText(""String_Node_Str"");
          }
        }
.execute((Void)null);
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9967416096448356
177862,"@Override protected Void doInBackground(Void... params){
  Socialize.getSocialize().clearSessionCache();
  return null;
}","@Override protected Void doInBackground(Void... params){
  Socialize.getSocialize().clearSessionCache(v.getContext());
  return null;
}",0.9453125
177863,"@Override public void clearCache(String appId){
}","@Override public void clearCache(Context context,String appId){
}",0.8596491228070176
177864,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.ui_main);
  final EditText txtEntity=(EditText)findViewById(R.id.txtEntity);
  final EditText txtFB=(EditText)findViewById(R.id.txtFBId);
  final CheckBox chkSSO=(CheckBox)findViewById(R.id.chkFacebook);
  final Button btn=(Button)findViewById(R.id.btnCommentView);
  final Button btnClearCache=(Button)findViewById(R.id.btnClearCache);
  final Button btnActionViewAuto=(Button)findViewById(R.id.btnActionViewAuto);
  final Button btnActionViewManual=(Button)findViewById(R.id.btnActionViewManual);
  btn.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      SocializeUI.getInstance().destroy(SampleActivity.this,true);
      setupOverrides();
      SocializeUI.getInstance().setFacebookAppId(txtFB.getText().toString());
      SocializeUI.getInstance().setFacebookSingleSignOnEnabled(chkSSO.isChecked());
      SocializeUI.getInstance().showCommentView(SampleActivity.this,txtEntity.getText().toString());
    }
  }
);
  btnClearCache.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      final ProgressDialog dialog=ProgressDialog.show(v.getContext(),""String_Node_Str"",""String_Node_Str"");
      new AsyncTask<Void,Void,Void>(){
        @Override protected Void doInBackground(        Void... params){
          try {
            Socialize.getSocialize().init(SampleActivity.this);
            Socialize.getSocialize().clearSessionCache();
          }
  finally {
            Socialize.getSocialize().destroy();
          }
          return null;
        }
        @Override protected void onPostExecute(        Void result){
          dialog.dismiss();
        }
      }
.execute((Void)null);
    }
  }
);
  btnActionViewAuto.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setupOverrides();
      Intent intent=new Intent(SampleActivity.this,ActionBarAutoActivity.class);
      SocializeUI.getInstance().setEntityUrl(SampleActivity.this,intent,txtEntity.getText().toString());
      SocializeUI.getInstance().setFacebookAppId(txtFB.getText().toString());
      SocializeUI.getInstance().setFacebookSingleSignOnEnabled(chkSSO.isChecked());
      startActivity(intent);
    }
  }
);
  btnActionViewManual.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setupOverrides();
      Intent intent=new Intent(SampleActivity.this,ActionBarManualActivity.class);
      SocializeUI.getInstance().setEntityUrl(SampleActivity.this,intent,txtEntity.getText().toString());
      SocializeUI.getInstance().setFacebookAppId(txtFB.getText().toString());
      SocializeUI.getInstance().setFacebookSingleSignOnEnabled(chkSSO.isChecked());
      startActivity(intent);
    }
  }
);
  InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
  imm.hideSoftInputFromWindow(txtEntity.getWindowToken(),0);
  imm.hideSoftInputFromWindow(getWindow().getDecorView().getWindowToken(),0);
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.ui_main);
  final EditText txtEntity=(EditText)findViewById(R.id.txtEntity);
  final EditText txtFB=(EditText)findViewById(R.id.txtFBId);
  final CheckBox chkSSO=(CheckBox)findViewById(R.id.chkFacebook);
  final Button btn=(Button)findViewById(R.id.btnCommentView);
  final Button btnClearCache=(Button)findViewById(R.id.btnClearCache);
  final Button btnActionViewAuto=(Button)findViewById(R.id.btnActionViewAuto);
  final Button btnActionViewManual=(Button)findViewById(R.id.btnActionViewManual);
  btn.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      SocializeUI.getInstance().destroy(SampleActivity.this,true);
      setupOverrides();
      SocializeUI.getInstance().setFacebookAppId(txtFB.getText().toString());
      SocializeUI.getInstance().setFacebookSingleSignOnEnabled(chkSSO.isChecked());
      SocializeUI.getInstance().showCommentView(SampleActivity.this,txtEntity.getText().toString());
    }
  }
);
  btnClearCache.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      final ProgressDialog dialog=ProgressDialog.show(v.getContext(),""String_Node_Str"",""String_Node_Str"");
      new AsyncTask<Void,Void,Void>(){
        @Override protected Void doInBackground(        Void... params){
          try {
            Socialize.getSocialize().init(SampleActivity.this);
            Socialize.getSocialize().clearSessionCache(SampleActivity.this);
          }
  finally {
            Socialize.getSocialize().destroy();
          }
          return null;
        }
        @Override protected void onPostExecute(        Void result){
          dialog.dismiss();
        }
      }
.execute((Void)null);
    }
  }
);
  btnActionViewAuto.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setupOverrides();
      Intent intent=new Intent(SampleActivity.this,ActionBarAutoActivity.class);
      SocializeUI.getInstance().setEntityUrl(SampleActivity.this,intent,txtEntity.getText().toString());
      SocializeUI.getInstance().setFacebookAppId(txtFB.getText().toString());
      SocializeUI.getInstance().setFacebookSingleSignOnEnabled(chkSSO.isChecked());
      startActivity(intent);
    }
  }
);
  btnActionViewManual.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setupOverrides();
      Intent intent=new Intent(SampleActivity.this,ActionBarManualActivity.class);
      SocializeUI.getInstance().setEntityUrl(SampleActivity.this,intent,txtEntity.getText().toString());
      SocializeUI.getInstance().setFacebookAppId(txtFB.getText().toString());
      SocializeUI.getInstance().setFacebookSingleSignOnEnabled(chkSSO.isChecked());
      startActivity(intent);
    }
  }
);
  InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
  imm.hideSoftInputFromWindow(txtEntity.getWindowToken(),0);
  imm.hideSoftInputFromWindow(getWindow().getDecorView().getWindowToken(),0);
}",0.9969310289129382
177865,"@Override protected Void doInBackground(Void... params){
  try {
    Socialize.getSocialize().init(SampleActivity.this);
    Socialize.getSocialize().clearSessionCache();
  }
  finally {
    Socialize.getSocialize().destroy();
  }
  return null;
}","@Override protected Void doInBackground(Void... params){
  try {
    Socialize.getSocialize().init(SampleActivity.this);
    Socialize.getSocialize().clearSessionCache(SampleActivity.this);
  }
  finally {
    Socialize.getSocialize().destroy();
  }
  return null;
}",0.9629629629629628
177866,"protected View showActionBar(Activity parent,View original,String entityKey,String entityName,boolean isEntityKeyUrl,boolean addScrollView,ActionBarListener listener){
  RelativeLayout barLayout=newRelativeLayout(parent);
  RelativeLayout originalLayout=newRelativeLayout(parent);
  ActionBarView socializeActionBar=newActionBarView(parent);
  socializeActionBar.assignId(original);
  socializeActionBar.setEntityKey(entityKey);
  socializeActionBar.setEntityName(entityName);
  socializeActionBar.setEntityKeyIsUrl(isEntityKeyUrl);
  LayoutParams barParams=newLayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT);
  barParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
  LayoutParams originalParams=newLayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT);
  originalParams.addRule(RelativeLayout.ABOVE,socializeActionBar.getId());
  socializeActionBar.setLayoutParams(barParams);
  originalLayout.setLayoutParams(originalParams);
  if (listener != null) {
    listener.onCreate(socializeActionBar);
  }
  if (addScrollView && !(original instanceof ScrollView)) {
    LayoutParams scrollViewParams=newLayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT);
    ScrollView scrollView=newScrollView(parent);
    scrollView.setFillViewport(true);
    scrollView.setLayoutParams(scrollViewParams);
    scrollView.addView(original);
    originalLayout.addView(scrollView);
  }
 else {
    originalLayout.addView(original);
  }
  barLayout.addView(originalLayout);
  barLayout.addView(socializeActionBar);
  return barLayout;
}","protected View showActionBar(Activity parent,View original,String entityKey,String entityName,boolean isEntityKeyUrl,boolean addScrollView,ActionBarListener listener){
  RelativeLayout barLayout=newRelativeLayout(parent);
  RelativeLayout originalLayout=newRelativeLayout(parent);
  ActionBarView socializeActionBar=newActionBarView(parent);
  socializeActionBar.assignId(original);
  socializeActionBar.setEntityKey(entityKey);
  socializeActionBar.setEntityName(entityName);
  socializeActionBar.setEntityKeyIsUrl(isEntityKeyUrl);
  LayoutParams barParams=newLayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT);
  barParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
  LayoutParams originalParams=newLayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT);
  originalParams.addRule(RelativeLayout.ABOVE,socializeActionBar.getId());
  socializeActionBar.setLayoutParams(barParams);
  originalLayout.setLayoutParams(originalParams);
  if (listener != null) {
    listener.onCreate(socializeActionBar);
  }
  if (addScrollView && !(original instanceof ScrollView)) {
    LayoutParams scrollViewParams=newLayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT);
    ScrollView scrollView=newScrollView(parent);
    scrollView.setFillViewport(true);
    scrollView.setLayoutParams(scrollViewParams);
    scrollView.addView(original);
    scrollView.setScrollContainer(false);
    originalLayout.addView(scrollView);
  }
 else {
    originalLayout.addView(original);
  }
  barLayout.addView(originalLayout);
  barLayout.addView(socializeActionBar);
  return barLayout;
}",0.9866835764109068
177867,"@Override public void onAfterAuthenticate(IOCContainer container){
  super.onAfterAuthenticate(container);
  sliderFactory=container.getBean(""String_Node_Str"");
  if (sliderFactory != null) {
    slider=sliderFactory.wrap(this);
  }
}","@Override public void onAfterAuthenticate(IOCContainer container){
  super.onAfterAuthenticate(container);
  sliderFactory=container.getBean(""String_Node_Str"");
  if (sliderFactory != null) {
    slider=sliderFactory.wrap(this,ZOrder.BEHIND,0);
  }
}",0.9669421487603306
177868,"public CommentAddButtonListener(Context context,CommentEditField field,CommentButtonCallback callback,KeyboardUtils keyboardUtils){
  this(context);
  this.field=field;
  this.callback=callback;
  this.keyboardUtils=keyboardUtils;
  this.consumerKey=getSocializeUI().getCustomConfigValue(SocializeConfig.SOCIALIZE_CONSUMER_KEY);
  this.consumerSecret=getSocializeUI().getCustomConfigValue(SocializeConfig.SOCIALIZE_CONSUMER_SECRET);
}","public CommentAddButtonListener(Context context,CommentButtonCallback callback){
  this(context);
  this.callback=callback;
  this.consumerKey=getSocializeUI().getCustomConfigValue(SocializeConfig.SOCIALIZE_CONSUMER_KEY);
  this.consumerSecret=getSocializeUI().getCustomConfigValue(SocializeConfig.SOCIALIZE_CONSUMER_SECRET);
}",0.859395532194481
177869,"@Override public CommentContentView make(Context context){
  LinearLayout contentView=new LinearLayout(context);
  LayoutParams contentViewLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentViewLayoutParams.weight=1.0f;
  contentView.setLayoutParams(contentViewLayoutParams);
  contentView.setOrientation(LinearLayout.VERTICAL);
  LayoutParams listViewLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
  listViewLayoutParams.weight=1.0f;
  ListView listView=new ListView(context);
  listView.setId(CommentActivity.LIST_VIEW_ID);
  listView.setLayoutParams(listViewLayoutParams);
  listView.setDrawingCacheEnabled(true);
  listView.setCacheColorHint(0);
  listView.setDividerHeight(2);
  listView.setSmoothScrollbarEnabled(true);
  contentView.addView(listView);
  CommentContentView flipper=new CommentContentView(context);
  LayoutParams flipperLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
  flipperLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  flipper.setLayoutParams(flipperLayoutParams);
  FrameLayout loadingScreen=new FrameLayout(context);
  FrameLayout.LayoutParams loadingScreenLayoutParams=new FrameLayout.LayoutParams(FrameLayout.LayoutParams.FILL_PARENT,FrameLayout.LayoutParams.FILL_PARENT);
  FrameLayout.LayoutParams progressLayoutParams=new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,FrameLayout.LayoutParams.WRAP_CONTENT);
  loadingScreenLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  progressLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  loadingScreen.setLayoutParams(loadingScreenLayoutParams);
  ProgressBar progress=new ProgressBar(context,null,android.R.attr.progressBarStyleSmall);
  progress.setLayoutParams(progressLayoutParams);
  loadingScreen.addView(progress);
  flipper.addView(loadingScreen);
  flipper.addView(contentView);
  flipper.setDisplayedChild(0);
  flipper.setListView(listView);
  return flipper;
}","@Override public CommentContentView make(Context context){
  LinearLayout contentView=new LinearLayout(context);
  LayoutParams contentViewLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
  contentView.setLayoutParams(contentViewLayoutParams);
  contentView.setOrientation(LinearLayout.VERTICAL);
  LayoutParams listViewLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
  ListView listView=new ListView(context);
  listView.setId(CommentActivity.LIST_VIEW_ID);
  listView.setLayoutParams(listViewLayoutParams);
  listView.setDrawingCacheEnabled(true);
  listView.setCacheColorHint(0);
  listView.setDividerHeight(2);
  listView.setSmoothScrollbarEnabled(true);
  contentView.addView(listView);
  CommentContentView flipper=new CommentContentView(context);
  LayoutParams flipperLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
  flipperLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  flipper.setLayoutParams(flipperLayoutParams);
  FrameLayout loadingScreen=new FrameLayout(context);
  FrameLayout.LayoutParams loadingScreenLayoutParams=new FrameLayout.LayoutParams(FrameLayout.LayoutParams.FILL_PARENT,FrameLayout.LayoutParams.FILL_PARENT);
  FrameLayout.LayoutParams progressLayoutParams=new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,FrameLayout.LayoutParams.WRAP_CONTENT);
  loadingScreenLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  progressLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  loadingScreen.setLayoutParams(loadingScreenLayoutParams);
  ProgressBar progress=new ProgressBar(context,null,android.R.attr.progressBarStyleSmall);
  progress.setLayoutParams(progressLayoutParams);
  loadingScreen.addView(progress);
  flipper.addView(loadingScreen);
  flipper.addView(contentView);
  flipper.setDisplayedChild(0);
  flipper.setListView(listView);
  return flipper;
}",0.8806738418343473
177870,"public synchronized void addResult(T result){
  if (results == null)   results=new ListResult<T>();
  List<T> list=results.getItems();
  if (list == null) {
    list=new LinkedList<T>();
    results.setItems(list);
  }
  list.add(result);
}","public void addResult(T result){
  if (results == null) {
synchronized (this) {
      if (results == null) {
        results=new ListResult<T>();
      }
    }
  }
  List<T> list=results.getItems();
  if (list == null) {
    list=new LinkedList<T>();
    results.setItems(list);
  }
  list.add(result);
}",0.7867647058823529
177871,"public synchronized T getFirstResult(){
  if (results != null) {
    List<T> list=results.getItems();
    if (list != null && list.size() > 0) {
      return list.get(0);
    }
  }
  return null;
}","public T getFirstResult(){
  if (results != null) {
    List<T> list=results.getItems();
    if (list != null && list.size() > 0) {
      return list.get(0);
    }
  }
  return null;
}",0.9658792650918636
177872,"public void merge(User user){
  setFirstName(user.getFirstName());
  setLastName(user.getLastName());
  setUsername(user.getUsername());
  setLocation(user.getLocation());
  setSmallImageUri(user.getSmallImageUri());
  setMediumImageUri(user.getMediumImageUri());
  setLargeImageUri(user.getLargeImageUri());
  setStats(user.getStats());
  setAuthData(user.getAuthData());
  setProfilePicData(user.getProfilePicData());
}","public void merge(User user){
  setFirstName(user.getFirstName());
  setLastName(user.getLastName());
  setUsername(user.getUsername());
  setLocation(user.getLocation());
  setSmallImageUri(user.getSmallImageUri());
  setMediumImageUri(user.getMediumImageUri());
  setLargeImageUri(user.getLargeImageUri());
  setStats(user.getStats());
  setAuthData(user.getAuthData());
  setProfilePicData(user.getProfilePicData());
  setAutoPostToFacebook(user.isAutoPostToFacebook());
}",0.9397321428571428
177873,"@Override protected void fromJSON(JSONObject from,T to) throws JSONException {
  super.fromJSON(from,to);
  try {
    if (from.has(""String_Node_Str"") && !from.isNull(""String_Node_Str"")) {
      JSONObject application=from.getJSONObject(""String_Node_Str"");
      if (application != null) {
        to.setApplication(applicationFactory.fromJSON(application));
      }
    }
    if (from.has(""String_Node_Str"") && !from.isNull(""String_Node_Str"")) {
      JSONObject user=from.getJSONObject(""String_Node_Str"");
      if (user != null) {
        to.setUser(userFactory.fromJSON(user));
      }
    }
    if (from.has(""String_Node_Str"") && !from.isNull(""String_Node_Str"")) {
      JSONObject entity=from.getJSONObject(""String_Node_Str"");
      if (entity != null) {
        to.setEntity(entityFactory.fromJSON(entity));
      }
    }
    if (from.has(""String_Node_Str"") && !from.isNull(""String_Node_Str"")) {
      to.setEntityKey(from.getString(""String_Node_Str""));
    }
    if (from.has(""String_Node_Str"") && !from.isNull(""String_Node_Str"")) {
      to.setLat(from.getDouble(""String_Node_Str""));
    }
    if (from.has(""String_Node_Str"") && !from.isNull(""String_Node_Str"")) {
      to.setLon(from.getDouble(""String_Node_Str""));
    }
    if (from.has(""String_Node_Str"") && !from.isNull(""String_Node_Str"")) {
      try {
        to.setDate(DATE_FORMAT.parse(from.getString(""String_Node_Str"")).getTime());
      }
 catch (      ParseException e) {
        if (logger != null && logger.isWarnEnabled()) {
          logger.warn(""String_Node_Str"" + from.getString(""String_Node_Str"") + ""String_Node_Str""+ DATE_FORMAT_STRING+ ""String_Node_Str"");
        }
      }
    }
  }
 catch (  Exception e) {
    if (e instanceof NullPointerException) {
      throw new JSONException(""String_Node_Str"");
    }
    throw new JSONException(e.getMessage());
  }
}","@Override protected void fromJSON(JSONObject from,T to) throws JSONException {
  super.fromJSON(from,to);
  try {
    if (from.has(""String_Node_Str"") && !from.isNull(""String_Node_Str"")) {
      JSONObject application=from.getJSONObject(""String_Node_Str"");
      if (application != null) {
        to.setApplication(applicationFactory.fromJSON(application));
      }
    }
    if (from.has(""String_Node_Str"") && !from.isNull(""String_Node_Str"")) {
      JSONObject user=from.getJSONObject(""String_Node_Str"");
      if (user != null) {
        to.setUser(userFactory.fromJSON(user));
      }
    }
    if (from.has(""String_Node_Str"") && !from.isNull(""String_Node_Str"")) {
      JSONObject entity=from.getJSONObject(""String_Node_Str"");
      if (entity != null) {
        to.setEntity(entityFactory.fromJSON(entity));
      }
    }
    if (from.has(""String_Node_Str"") && !from.isNull(""String_Node_Str"")) {
      to.setEntityKey(from.getString(""String_Node_Str""));
    }
    if (from.has(""String_Node_Str"") && !from.isNull(""String_Node_Str"")) {
      to.setLat(from.getDouble(""String_Node_Str""));
    }
    if (from.has(""String_Node_Str"") && !from.isNull(""String_Node_Str"")) {
      to.setLon(from.getDouble(""String_Node_Str""));
    }
    if (from.has(""String_Node_Str"") && !from.isNull(""String_Node_Str"")) {
      try {
        to.setDate(DATE_FORMAT.parse(from.getString(""String_Node_Str"")).getTime());
      }
 catch (      ParseException e) {
        if (logger != null && logger.isWarnEnabled()) {
          logger.warn(""String_Node_Str"" + from.getString(""String_Node_Str"") + ""String_Node_Str""+ DATE_FORMAT_STRING+ ""String_Node_Str"");
        }
      }
    }
  }
 catch (  Throwable e) {
    if (e instanceof NullPointerException) {
      throw new JSONException(""String_Node_Str"");
    }
    throw new JSONException(e.getMessage());
  }
}",0.9434475258292552
177874,"/** 
 * Connect to an HTTP URL and return the response as a string. Note that the HTTP method override is used on non-GET requests. (i.e. requests are made as ""POST"" with method specified in the body).
 * @param url - the resource to open: must be a welformed URL
 * @param method - the HTTP method to use (""GET"", ""POST"", etc.)
 * @param params - the query parameter for the URL (e.g. access_token=foo)
 * @return the URL contents as a String
 * @throws MalformedURLException - if the URL format is invalid
 * @throws IOException - if a network problem occurs
 */
public static String openUrl(String url,String method,Bundle params) throws MalformedURLException, IOException {
  String strBoundary=""String_Node_Str"";
  String endLine=""String_Node_Str"";
  OutputStream os;
  if (method.equals(""String_Node_Str"")) {
    url=url + ""String_Node_Str"" + encodeUrl(params);
  }
  Log.d(""String_Node_Str"",method + ""String_Node_Str"" + url);
  HttpURLConnection conn=(HttpURLConnection)new URL(url).openConnection();
  conn.setRequestProperty(""String_Node_Str"",System.getProperties().getProperty(""String_Node_Str"") + ""String_Node_Str"");
  if (!method.equals(""String_Node_Str"")) {
    Bundle dataparams=new Bundle();
    for (    String key : params.keySet()) {
      Object object=params.get(key);
      if (object instanceof byte[]) {
        dataparams.putByteArray(key,(byte[])object);
      }
 else       if (object instanceof String) {
        dataparams.putByteArray(key,((String)object).getBytes());
      }
    }
    if (!params.containsKey(""String_Node_Str"")) {
      params.putString(""String_Node_Str"",method);
    }
    if (params.containsKey(""String_Node_Str"")) {
      String decoded_token=URLDecoder.decode(params.getString(""String_Node_Str""));
      params.putString(""String_Node_Str"",decoded_token);
    }
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + strBoundary);
    conn.setDoOutput(true);
    conn.setDoInput(true);
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.connect();
    os=new BufferedOutputStream(conn.getOutputStream());
    os.write((""String_Node_Str"" + strBoundary + endLine).getBytes());
    os.write((encodePostBody(params,strBoundary)).getBytes());
    os.write((endLine + ""String_Node_Str"" + strBoundary+ endLine).getBytes());
    if (!dataparams.isEmpty()) {
      for (      String key : dataparams.keySet()) {
        os.write((""String_Node_Str"" + key + ""String_Node_Str""+ endLine).getBytes());
        os.write((""String_Node_Str"" + endLine + endLine).getBytes());
        os.write(dataparams.getByteArray(key));
        os.write((endLine + ""String_Node_Str"" + strBoundary+ endLine).getBytes());
      }
    }
    os.flush();
  }
  String response=""String_Node_Str"";
  try {
    response=read(conn.getInputStream());
  }
 catch (  FileNotFoundException e) {
    response=read(conn.getErrorStream());
  }
  return response;
}","/** 
 * Connect to an HTTP URL and return the response as a string. Note that the HTTP method override is used on non-GET requests. (i.e. requests are made as ""POST"" with method specified in the body).
 * @param url - the resource to open: must be a welformed URL
 * @param method - the HTTP method to use (""GET"", ""POST"", etc.)
 * @param params - the query parameter for the URL (e.g. access_token=foo)
 * @return the URL contents as a String
 * @throws MalformedURLException - if the URL format is invalid
 * @throws IOException - if a network problem occurs
 */
public static String openUrl(String url,String method,Bundle params) throws MalformedURLException, IOException {
  String strBoundary=""String_Node_Str"";
  String endLine=""String_Node_Str"";
  OutputStream os=null;
  try {
    if (method.equals(""String_Node_Str"")) {
      url=url + ""String_Node_Str"" + encodeUrl(params);
    }
    Log.d(""String_Node_Str"",method + ""String_Node_Str"" + url);
    HttpURLConnection conn=(HttpURLConnection)new URL(url).openConnection();
    conn.setRequestProperty(""String_Node_Str"",System.getProperties().getProperty(""String_Node_Str"") + ""String_Node_Str"");
    if (!method.equals(""String_Node_Str"")) {
      Bundle dataparams=new Bundle();
      for (      String key : params.keySet()) {
        Object object=params.get(key);
        if (object instanceof byte[]) {
          dataparams.putByteArray(key,(byte[])object);
        }
 else         if (object instanceof String) {
          dataparams.putByteArray(key,((String)object).getBytes());
        }
      }
      if (!params.containsKey(""String_Node_Str"")) {
        params.putString(""String_Node_Str"",method);
      }
      if (params.containsKey(""String_Node_Str"")) {
        String decoded_token=URLDecoder.decode(params.getString(""String_Node_Str""));
        params.putString(""String_Node_Str"",decoded_token);
      }
      conn.setRequestMethod(""String_Node_Str"");
      conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + strBoundary);
      conn.setDoOutput(true);
      conn.setDoInput(true);
      conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      conn.connect();
      os=new BufferedOutputStream(conn.getOutputStream());
      os.write((""String_Node_Str"" + strBoundary + endLine).getBytes());
      os.write((encodePostBody(params,strBoundary)).getBytes());
      os.write((endLine + ""String_Node_Str"" + strBoundary+ endLine).getBytes());
      if (!dataparams.isEmpty()) {
        for (        String key : dataparams.keySet()) {
          os.write((""String_Node_Str"" + key + ""String_Node_Str""+ endLine).getBytes());
          os.write((""String_Node_Str"" + endLine + endLine).getBytes());
          os.write(dataparams.getByteArray(key));
          os.write((endLine + ""String_Node_Str"" + strBoundary+ endLine).getBytes());
        }
      }
      os.flush();
    }
    String response=""String_Node_Str"";
    try {
      response=read(conn.getInputStream());
    }
 catch (    FileNotFoundException e) {
      response=read(conn.getErrorStream());
    }
    return response;
  }
  finally {
    if (os != null) {
      os.close();
    }
  }
}",0.9577511096498438
177875,"private ListResult<T> doListTypeRequest(HttpUriRequest request) throws SocializeException {
  List<T> results=null;
  List<ActionError> errors=null;
  HttpEntity entity=null;
  ListResult<T> result=null;
  try {
    HttpClient client=clientFactory.getClient();
    HttpResponse response=client.execute(request);
    entity=response.getEntity();
    if (httpUtils.isHttpError(response)) {
      if (sessionPersister != null && httpUtils.isAuthError(response)) {
        sessionPersister.delete(context);
      }
      String msg=ioUtils.readSafe(entity.getContent());
      throw new SocializeApiError(httpUtils,response.getStatusLine().getStatusCode(),msg);
    }
 else {
      result=new ListResult<T>();
      String json=ioUtils.readSafe(entity.getContent());
      if (logger != null && logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + json);
      }
      JSONObject object=jsonParser.parseObject(json);
      if (object.has(JSON_ATTR_ERRORS) && !object.isNull(JSON_ATTR_ERRORS)) {
        JSONArray errorList=object.getJSONArray(JSON_ATTR_ERRORS);
        int length=errorList.length();
        errors=new ArrayList<ActionError>(length);
        for (int i=0; i < length; i++) {
          JSONObject jsonObject=errorList.getJSONObject(i);
          ActionError error=errorFactory.fromJSON(jsonObject);
          errors.add(error);
        }
        result.setErrors(errors);
      }
      if (object.has(JSON_ATTR_ITEMS) && !object.isNull(JSON_ATTR_ITEMS)) {
        JSONArray list=object.getJSONArray(JSON_ATTR_ITEMS);
        int length=list.length();
        results=new ArrayList<T>(length);
        for (int i=0; i < length; i++) {
          results.add(objectFactory.fromJSON(list.getJSONObject(i)));
        }
        result.setItems(results);
      }
      if (object.has(JSON_ATTR_COUNT) && !object.isNull(JSON_ATTR_COUNT)) {
        result.setTotalCount(object.getInt(JSON_ATTR_COUNT));
      }
    }
  }
 catch (  Exception e) {
    if (e instanceof SocializeException) {
      throw (SocializeException)e;
    }
    throw new SocializeException(e);
  }
 finally {
    closeEntity(entity);
  }
  return result;
}","private ListResult<T> doListTypeRequest(HttpUriRequest request) throws SocializeException {
  List<T> results=null;
  List<ActionError> errors=null;
  HttpEntity entity=null;
  ListResult<T> result=null;
  try {
    HttpClient client=clientFactory.getClient();
    HttpResponse response=client.execute(request);
    entity=response.getEntity();
    if (httpUtils.isHttpError(response)) {
      if (sessionPersister != null && httpUtils.isAuthError(response)) {
        sessionPersister.delete(context);
      }
      String msg=ioUtils.readSafe(entity.getContent());
      throw new SocializeApiError(httpUtils,response.getStatusLine().getStatusCode(),msg);
    }
 else {
      result=new ListResult<T>();
      String json=ioUtils.readSafe(entity.getContent());
      if (logger != null && logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + json);
      }
      JSONObject object=jsonParser.parseObject(json);
      if (object.has(JSON_ATTR_ERRORS) && !object.isNull(JSON_ATTR_ERRORS)) {
        JSONArray errorList=object.getJSONArray(JSON_ATTR_ERRORS);
        int length=errorList.length();
        errors=new ArrayList<ActionError>(length);
        for (int i=0; i < length; i++) {
          JSONObject jsonObject=errorList.getJSONObject(i);
          ActionError error=errorFactory.fromJSON(jsonObject);
          errors.add(error);
        }
        result.setErrors(errors);
      }
      if (object.has(JSON_ATTR_ITEMS) && !object.isNull(JSON_ATTR_ITEMS)) {
        JSONArray list=object.getJSONArray(JSON_ATTR_ITEMS);
        int length=list.length();
        results=new ArrayList<T>(length);
        for (int i=0; i < length; i++) {
          results.add(objectFactory.fromJSON(list.getJSONObject(i)));
        }
        result.setItems(results);
      }
      if (object.has(JSON_ATTR_COUNT) && !object.isNull(JSON_ATTR_COUNT)) {
        result.setTotalCount(object.getInt(JSON_ATTR_COUNT));
      }
    }
  }
 catch (  Throwable e) {
    if (e instanceof SocializeException) {
      throw (SocializeException)e;
    }
    throw new SocializeException(e);
  }
 finally {
    closeEntity(entity);
  }
  return result;
}",0.9450651769087524
177876,"public void testDeviceUtilsUserAgentString(){
  DeviceUtils utils=new DeviceUtils();
  utils.init(getActivity());
  String userAgentString=utils.getUserAgentString();
  assertEquals(""String_Node_Str"" + android.os.Build.VERSION.SDK_INT + ""String_Node_Str""+ android.os.Build.MODEL+ ""String_Node_Str""+ Socialize.VERSION+ ""String_Node_Str""+ Locale.getDefault().getLanguage()+ ""String_Node_Str""+ Locale.getDefault().getCountry()+ ""String_Node_Str"",userAgentString + ""String_Node_Str"");
}","public void testDeviceUtilsUserAgentString(){
  DeviceUtils utils=new DeviceUtils();
  utils.init(getActivity());
  String userAgentString=utils.getUserAgentString();
  assertEquals(""String_Node_Str"" + android.os.Build.VERSION.SDK_INT + ""String_Node_Str""+ android.os.Build.MODEL+ ""String_Node_Str""+ Socialize.VERSION+ ""String_Node_Str""+ Locale.getDefault().getLanguage()+ ""String_Node_Str""+ Locale.getDefault().getCountry()+ ""String_Node_Str"",userAgentString);
}",0.9788135593220338
177877,"protected void onViewLoad(){
}","protected void onViewLoad(){
  loaded=true;
}",0.8
177878,"public void init(){
  int padding=deviceUtils.getDIP(8);
  int radius=deviceUtils.getDIP(4);
  int textPadding=deviceUtils.getDIP(4);
  int bottom=colors.getColor(bottomColor);
  int top=colors.getColor(topColor);
  int strokeTop=colors.getColor(strokeTopColor);
  int strokeBottom=colors.getColor(strokeBottomColor);
  int bgColor=Color.BLACK;
  if (!StringUtils.isEmpty(backgroundColor)) {
    bgColor=colors.getColor(backgroundColor);
  }
  GradientDrawable base=makeGradient(bgColor,bgColor);
  base.setCornerRadius(radius + deviceUtils.getDIP(2));
  GradientDrawable stroke=makeGradient(strokeBottom,strokeTop);
  stroke.setCornerRadius(radius + deviceUtils.getDIP(1));
  GradientDrawable background=makeGradient(bottom,top);
  background.setCornerRadius(radius);
  LayerDrawable layers=new LayerDrawable(new Drawable[]{base,stroke,background});
  layers.setLayerInset(1,1,1,1,1);
  layers.setLayerInset(2,2,2,2,2);
  int pWidth=LinearLayout.LayoutParams.WRAP_CONTENT;
  int pHeight=LinearLayout.LayoutParams.WRAP_CONTENT;
  if (width == null) {
    pWidth=LinearLayout.LayoutParams.FILL_PARENT;
  }
 else   if (width > 0) {
    pWidth=deviceUtils.getDIP(width);
  }
  if (height == null) {
    pHeight=LinearLayout.LayoutParams.FILL_PARENT;
  }
 else   if (height > 0) {
    pHeight=deviceUtils.getDIP(height);
  }
  LayoutParams fill=makeLayoutParams(pWidth,pHeight);
  fill.setMargins(padding,padding,padding,padding);
  setOrientation(LinearLayout.HORIZONTAL);
  setLayoutParams(fill);
  setBackgroundDrawable(layers);
  setPadding(padding,padding,padding,padding);
  setClickable(true);
  TEXT_ALIGN align=TEXT_ALIGN.LEFT;
  if (!StringUtils.isEmpty(textAlign)) {
    textAlign=textAlign.trim().toUpperCase();
    try {
      align=TEXT_ALIGN.valueOf(textAlign);
    }
 catch (    Exception ignore) {
      ignore.printStackTrace();
    }
  }
switch (align) {
case LEFT:
    setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);
  break;
case CENTER:
setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER);
break;
case RIGHT:
setGravity(Gravity.CENTER_VERTICAL | Gravity.RIGHT);
break;
}
LayoutParams imageLayout=makeLayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
LayoutParams textLayout=makeLayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
textView=makeTextView();
textView.setTextColor(Color.WHITE);
if (bold) {
if (italic) {
textView.setTypeface(Typeface.DEFAULT_BOLD,Typeface.BOLD_ITALIC);
}
 else {
textView.setTypeface(Typeface.DEFAULT_BOLD);
}
}
 else if (italic) {
textView.setTypeface(Typeface.DEFAULT,Typeface.ITALIC);
}
setTextSize(textSize);
textView.setText(text);
textView.setLayoutParams(textLayout);
if (!StringUtils.isEmpty(imageName)) {
imageView=makeImageView();
imageView.setImageDrawable(drawables.getDrawable(imageName));
imageView.setLayoutParams(imageLayout);
addView(imageView);
textView.setPadding(textPadding,0,0,0);
}
 else {
textView.setPadding(0,0,0,0);
}
addView(textView);
}","public void init(){
  int dipPadding=deviceUtils.getDIP(padding);
  int radius=deviceUtils.getDIP(4);
  int textPadding=deviceUtils.getDIP(4);
  int bottom=colors.getColor(bottomColor);
  int top=colors.getColor(topColor);
  int strokeTop=colors.getColor(strokeTopColor);
  int strokeBottom=colors.getColor(strokeBottomColor);
  int bgColor=Color.BLACK;
  if (!StringUtils.isEmpty(backgroundColor)) {
    bgColor=colors.getColor(backgroundColor);
  }
  GradientDrawable base=makeGradient(bgColor,bgColor);
  base.setCornerRadius(radius + deviceUtils.getDIP(2));
  GradientDrawable stroke=makeGradient(strokeBottom,strokeTop);
  stroke.setCornerRadius(radius + deviceUtils.getDIP(1));
  GradientDrawable background=makeGradient(bottom,top);
  background.setCornerRadius(radius);
  LayerDrawable layers=new LayerDrawable(new Drawable[]{base,stroke,background});
  layers.setLayerInset(1,1,1,1,1);
  layers.setLayerInset(2,2,2,2,2);
  int pWidth=LinearLayout.LayoutParams.WRAP_CONTENT;
  int pHeight=LinearLayout.LayoutParams.WRAP_CONTENT;
  if (width == null) {
    pWidth=LinearLayout.LayoutParams.FILL_PARENT;
  }
 else   if (width > 0) {
    pWidth=deviceUtils.getDIP(width);
  }
  if (height == null) {
    pHeight=LinearLayout.LayoutParams.FILL_PARENT;
  }
 else   if (height > 0) {
    pHeight=deviceUtils.getDIP(height);
  }
  LayoutParams fill=makeLayoutParams(pWidth,pHeight);
  fill.setMargins(dipPadding,dipPadding,dipPadding,dipPadding);
  setOrientation(LinearLayout.HORIZONTAL);
  setLayoutParams(fill);
  setBackgroundDrawable(layers);
  setPadding(dipPadding,dipPadding,dipPadding,dipPadding);
  setClickable(true);
  TEXT_ALIGN align=TEXT_ALIGN.LEFT;
  if (!StringUtils.isEmpty(textAlign)) {
    textAlign=textAlign.trim().toUpperCase();
    try {
      align=TEXT_ALIGN.valueOf(textAlign);
    }
 catch (    Exception ignore) {
      ignore.printStackTrace();
    }
  }
switch (align) {
case LEFT:
    setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);
  break;
case CENTER:
setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER);
break;
case RIGHT:
setGravity(Gravity.CENTER_VERTICAL | Gravity.RIGHT);
break;
}
LayoutParams imageLayout=makeLayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
LayoutParams textLayout=makeLayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
textView=makeTextView();
textView.setTextColor(Color.WHITE);
if (bold) {
if (italic) {
textView.setTypeface(Typeface.DEFAULT_BOLD,Typeface.BOLD_ITALIC);
}
 else {
textView.setTypeface(Typeface.DEFAULT_BOLD);
}
}
 else if (italic) {
textView.setTypeface(Typeface.DEFAULT,Typeface.ITALIC);
}
setTextSize(textSize);
textView.setText(text);
textView.setLayoutParams(textLayout);
if (!StringUtils.isEmpty(imageName)) {
imageView=makeImageView();
imageView.setImageDrawable(drawables.getDrawable(imageName));
imageView.setLayoutParams(imageLayout);
addView(imageView);
textView.setPadding(textPadding,0,0,0);
}
 else {
textView.setPadding(0,0,0,0);
}
addView(textView);
}",0.9912208050356136
177879,"@Override public View getView(int position,View oldView,ViewGroup parent){
  ViewHolder holder;
  View view=oldView;
  User tmpUser=null;
  final Comment item=(Comment)getItem(position);
  if (item != null) {
    tmpUser=item.getUser();
  }
  final User user=tmpUser;
  if (view == null) {
    CommentListItem v=commentItemViewFactory.getBean();
    holder=createViewHolder();
    holder.setTime(v.getTime());
    holder.setUserName(v.getAuthor());
    holder.setComment(v.getComment());
    holder.setUserIcon(v.getUserIcon());
    holder.setNow(new Date());
    v.setTag(holder);
    view=v;
  }
 else {
    holder=(ViewHolder)view.getTag();
    if (holder.getItemId() != null && holder.getImageUrl() != null && user != null && user.getSmallImageUri() != null && position != holder.getItemId() && !holder.getImageUrl().equals(user.getSmallImageUri())) {
      imageLoader.cancel(holder.getItemId());
    }
  }
  if (position >= comments.size()) {
    if (loadingView == null) {
      loadingView=listItemLoadingViewFactory.getBean();
      loadingView.setTag(holder);
    }
    view=loadingView;
  }
 else {
    if (item != null) {
      holder.setItemId(position);
      String displayName=null;
      if (user != null && displayName == null) {
        displayName=user.getDisplayName();
        if (displayName == null) {
          displayName=""String_Node_Str"";
        }
      }
      if (user != null) {
        view.setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View v){
            if (user != null && user.getId() != null) {
              getSocializeUI().showUserProfileView(context,user.getId().toString());
            }
 else {
              if (logger != null) {
                logger.warn(""String_Node_Str"" + item.getId());
              }
            }
          }
        }
);
      }
      TextView comment=holder.getComment();
      TextView userName=holder.getUserName();
      TextView time=holder.getTime();
      final ImageView userIcon=holder.getUserIcon();
      if (comment != null) {
        comment.setText(item.getText());
      }
      if (userName != null) {
        if (user != null) {
          userName.setText(displayName);
        }
      }
      if (time != null) {
        Long date=item.getDate();
        if (date != null && date > 0) {
          long diff=(holder.getNow().getTime() - date.longValue());
          time.setText(timeUtils.getTimeString(diff) + ""String_Node_Str"");
        }
 else {
          time.setText(""String_Node_Str"");
        }
      }
      if (userIcon != null && drawables != null) {
        int densitySize=deviceUtils.getDIP(iconSize);
        final Drawable defaultImage=drawables.getDrawable(SocializeUI.DEFAULT_USER_ICON,densitySize,densitySize,true);
        if (user != null) {
          String imageUrl=user.getSmallImageUri();
          holder.setImageUrl(imageUrl);
          if (!StringUtils.isEmpty(imageUrl)) {
            try {
              CacheableDrawable cached=drawables.getCache().get(imageUrl);
              if (cached != null && !cached.isRecycled()) {
                if (logger != null && logger.isInfoEnabled()) {
                  logger.info(""String_Node_Str"" + cached);
                }
                userIcon.setImageDrawable(cached);
              }
 else {
                userIcon.setImageDrawable(defaultImage);
                imageLoader.loadImage(item.getId(),imageUrl,new ImageLoadListener(){
                  @Override public void onImageLoadFail(                  Exception error){
                    error.printStackTrace();
                    userIcon.post(new Runnable(){
                      public void run(){
                        if (logger != null && logger.isInfoEnabled()) {
                          logger.info(""String_Node_Str"");
                        }
                        userIcon.setImageDrawable(defaultImage);
                      }
                    }
);
                  }
                  @Override public void onImageLoad(                  final SafeBitmapDrawable drawable){
                    userIcon.post(new Runnable(){
                      public void run(){
                        if (logger != null && logger.isInfoEnabled()) {
                          logger.info(""String_Node_Str"" + drawable);
                        }
                        userIcon.setImageDrawable(drawable);
                      }
                    }
);
                  }
                }
);
              }
            }
 catch (            Exception e) {
              String errorMsg=""String_Node_Str"" + imageUrl + ""String_Node_Str"";
              if (logger != null) {
                logger.error(errorMsg,e);
              }
 else {
                System.err.println(errorMsg);
              }
              userIcon.setImageDrawable(defaultImage);
            }
          }
 else           if (!StringUtils.isEmpty(user.getProfilePicData())) {
            try {
              Drawable drawable=drawables.getDrawable(user.getId().toString(),base64Utils.decode(user.getProfilePicData()),densitySize,densitySize);
              userIcon.setImageDrawable(drawable);
            }
 catch (            Base64DecoderException e) {
              if (logger != null) {
                logger.error(""String_Node_Str"",e);
              }
 else {
                e.printStackTrace();
              }
              userIcon.setImageDrawable(defaultImage);
            }
          }
 else {
            userIcon.setImageDrawable(defaultImage);
          }
        }
 else {
          userIcon.setImageDrawable(defaultImage);
        }
      }
    }
  }
  return view;
}","@Override public View getView(int position,View oldView,ViewGroup parent){
  ViewHolder holder;
  View view=oldView;
  User tmpUser=null;
  final Comment item=(Comment)getItem(position);
  if (item != null) {
    tmpUser=item.getUser();
  }
  final User user=tmpUser;
  if (view == null) {
    CommentListItem v=commentItemViewFactory.getBean();
    holder=createViewHolder();
    holder.setTime(v.getTime());
    holder.setUserName(v.getAuthor());
    holder.setComment(v.getComment());
    holder.setUserIcon(v.getUserIcon());
    holder.setNow(new Date());
    v.setTag(holder);
    view=v;
  }
 else {
    holder=(ViewHolder)view.getTag();
    if (holder.getItemId() != null && holder.getImageUrl() != null && user != null && user.getSmallImageUri() != null && position != holder.getItemId() && !holder.getImageUrl().equals(user.getSmallImageUri())) {
      imageLoader.cancel(holder.getItemId());
    }
  }
  if (position >= comments.size()) {
    if (loadingView == null) {
      loadingView=listItemLoadingViewFactory.getBean();
      loadingView.setTag(holder);
    }
    view=loadingView;
  }
 else {
    if (item != null) {
      holder.setItemId(position);
      String displayName=null;
      if (user != null && displayName == null) {
        displayName=user.getDisplayName();
        if (displayName == null) {
          displayName=""String_Node_Str"";
        }
      }
      if (user != null) {
        view.setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View v){
            if (user != null && user.getId() != null) {
              getSocializeUI().showUserProfileView(context,user.getId().toString());
            }
 else {
              if (logger != null) {
                logger.warn(""String_Node_Str"" + item.getId());
              }
            }
          }
        }
);
      }
      TextView comment=holder.getComment();
      TextView userName=holder.getUserName();
      TextView time=holder.getTime();
      final ImageView userIcon=holder.getUserIcon();
      if (comment != null) {
        comment.setText(item.getText());
      }
      if (userName != null) {
        if (user != null) {
          userName.setText(displayName);
        }
      }
      if (time != null) {
        Long date=item.getDate();
        if (date != null && date > 0) {
          long diff=(holder.getNow().getTime() - date.longValue());
          time.setText(timeUtils.getTimeString(diff) + ""String_Node_Str"");
        }
 else {
          time.setText(""String_Node_Str"");
        }
      }
      if (userIcon != null && drawables != null) {
        int densitySize=deviceUtils.getDIP(iconSize);
        final Drawable defaultImage=drawables.getDrawable(SocializeUI.DEFAULT_USER_ICON,true);
        if (user != null) {
          String imageUrl=user.getSmallImageUri();
          holder.setImageUrl(imageUrl);
          if (!StringUtils.isEmpty(imageUrl)) {
            try {
              CacheableDrawable cached=drawables.getCache().get(imageUrl);
              if (cached != null && !cached.isRecycled()) {
                if (logger != null && logger.isInfoEnabled()) {
                  logger.info(""String_Node_Str"" + cached);
                }
                userIcon.setImageDrawable(cached);
              }
 else {
                userIcon.setImageDrawable(defaultImage);
                imageLoader.loadImage(item.getId(),imageUrl,new ImageLoadListener(){
                  @Override public void onImageLoadFail(                  Exception error){
                    error.printStackTrace();
                    userIcon.post(new Runnable(){
                      public void run(){
                        if (logger != null && logger.isInfoEnabled()) {
                          logger.info(""String_Node_Str"");
                        }
                        userIcon.setImageDrawable(defaultImage);
                      }
                    }
);
                  }
                  @Override public void onImageLoad(                  final SafeBitmapDrawable drawable){
                    userIcon.post(new Runnable(){
                      public void run(){
                        if (logger != null && logger.isInfoEnabled()) {
                          logger.info(""String_Node_Str"" + drawable);
                        }
                        userIcon.setImageDrawable(drawable);
                      }
                    }
);
                  }
                }
);
              }
            }
 catch (            Exception e) {
              String errorMsg=""String_Node_Str"" + imageUrl + ""String_Node_Str"";
              if (logger != null) {
                logger.error(errorMsg,e);
              }
 else {
                System.err.println(errorMsg);
              }
              userIcon.setImageDrawable(defaultImage);
            }
          }
 else           if (!StringUtils.isEmpty(user.getProfilePicData())) {
            try {
              Drawable drawable=drawables.getDrawable(user.getId().toString(),base64Utils.decode(user.getProfilePicData()),densitySize,densitySize);
              userIcon.setImageDrawable(drawable);
            }
 catch (            Base64DecoderException e) {
              if (logger != null) {
                logger.error(""String_Node_Str"",e);
              }
 else {
                e.printStackTrace();
              }
              userIcon.setImageDrawable(defaultImage);
            }
          }
 else {
            userIcon.setImageDrawable(defaultImage);
          }
        }
 else {
          userIcon.setImageDrawable(defaultImage);
        }
      }
    }
  }
  return view;
}",0.9978730946472882
177880,"public void init(){
  final int eight=deviceUtils.getDIP(8);
  final int four=deviceUtils.getDIP(4);
  final int textColor=colors.getColor(Colors.BODY);
  final int titleColor=colors.getColor(Colors.TITLE);
  ListView.LayoutParams layout=new ListView.LayoutParams(ListView.LayoutParams.FILL_PARENT,ListView.LayoutParams.FILL_PARENT);
  setDrawingCacheEnabled(true);
  setBackgroundColor(colors.getColor(Colors.LIST_ITEM_BG));
  setOrientation(LinearLayout.HORIZONTAL);
  setLayoutParams(layout);
  setGravity(Gravity.TOP);
  setPadding(eight,eight,eight,eight);
  LinearLayout contentLayout=new LinearLayout(getContext());
  contentLayout.setOrientation(LinearLayout.VERTICAL);
  contentLayout.setGravity(Gravity.LEFT);
  contentLayout.setPadding(0,0,0,0);
  LinearLayout.LayoutParams contentLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentLayoutParams.setMargins(four,0,0,0);
  contentLayout.setLayoutParams(contentLayoutParams);
  LinearLayout contentHeaderLayout=new LinearLayout(getContext());
  LinearLayout.LayoutParams contentHeaderLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentHeaderLayout.setLayoutParams(contentHeaderLayoutParams);
  contentHeaderLayout.setGravity(Gravity.LEFT);
  contentHeaderLayout.setOrientation(LinearLayout.HORIZONTAL);
  contentHeaderLayout.setPadding(0,0,0,0);
  LinearLayout.LayoutParams authorLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  author=new TextView(getContext());
  author.setTextSize(TypedValue.COMPLEX_UNIT_DIP,16);
  author.setMaxLines(1);
  author.setTypeface(Typeface.DEFAULT_BOLD);
  author.setTextColor(titleColor);
  author.setLayoutParams(authorLayoutParams);
  author.setSingleLine();
  LinearLayout.LayoutParams timeLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  timeLayoutParams.gravity=Gravity.RIGHT;
  time=new TextView(getContext());
  time.setTextSize(TypedValue.COMPLEX_UNIT_DIP,12);
  time.setMaxLines(1);
  time.setTypeface(Typeface.DEFAULT,Typeface.ITALIC);
  time.setTextColor(titleColor);
  time.setLayoutParams(timeLayoutParams);
  time.setSingleLine();
  time.setGravity(Gravity.RIGHT);
  LinearLayout.LayoutParams commentLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  comment=new TextView(getContext());
  comment.setTextSize(TypedValue.COMPLEX_UNIT_DIP,14);
  comment.setTextColor(textColor);
  comment.setLayoutParams(commentLayoutParams);
  contentHeaderLayout.addView(author);
  contentHeaderLayout.addView(time);
  contentLayout.addView(contentHeaderLayout);
  contentLayout.addView(comment);
  LinearLayout iconLayout=new LinearLayout(getContext());
  LinearLayout.LayoutParams iconLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  iconLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.TOP;
  iconLayout.setLayoutParams(iconLayoutParams);
  iconLayout.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.TOP);
  iconLayout.setPadding(four,four,four,four);
  userIcon=new ImageView(getContext());
  userIcon.setLayoutParams(iconLayoutParams);
  userIcon.setScaleType(ScaleType.CENTER_CROP);
  iconLayout.addView(userIcon);
  addView(iconLayout);
  addView(contentLayout);
}","public void init(){
  final int eight=deviceUtils.getDIP(8);
  final int four=deviceUtils.getDIP(4);
  final int textColor=colors.getColor(Colors.BODY);
  final int titleColor=colors.getColor(Colors.TITLE);
  ListView.LayoutParams layout=new ListView.LayoutParams(ListView.LayoutParams.FILL_PARENT,ListView.LayoutParams.FILL_PARENT);
  setDrawingCacheEnabled(true);
  setBackgroundColor(colors.getColor(Colors.LIST_ITEM_BG));
  setOrientation(LinearLayout.HORIZONTAL);
  setLayoutParams(layout);
  setGravity(Gravity.TOP);
  setPadding(eight,eight,eight,eight);
  LinearLayout contentLayout=new LinearLayout(getContext());
  contentLayout.setOrientation(LinearLayout.VERTICAL);
  contentLayout.setGravity(Gravity.LEFT);
  contentLayout.setPadding(0,0,0,0);
  LinearLayout.LayoutParams contentLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentLayoutParams.setMargins(four,0,0,0);
  contentLayout.setLayoutParams(contentLayoutParams);
  LinearLayout contentHeaderLayout=new LinearLayout(getContext());
  LinearLayout.LayoutParams contentHeaderLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentHeaderLayout.setLayoutParams(contentHeaderLayoutParams);
  contentHeaderLayout.setGravity(Gravity.LEFT);
  contentHeaderLayout.setOrientation(LinearLayout.HORIZONTAL);
  contentHeaderLayout.setPadding(0,0,0,0);
  LinearLayout.LayoutParams authorLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  author=new TextView(getContext());
  author.setTextSize(TypedValue.COMPLEX_UNIT_DIP,16);
  author.setMaxLines(1);
  author.setTypeface(Typeface.DEFAULT_BOLD);
  author.setTextColor(titleColor);
  author.setLayoutParams(authorLayoutParams);
  author.setSingleLine();
  LinearLayout.LayoutParams timeLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  timeLayoutParams.gravity=Gravity.RIGHT;
  time=new TextView(getContext());
  time.setTextSize(TypedValue.COMPLEX_UNIT_DIP,12);
  time.setMaxLines(1);
  time.setTypeface(Typeface.DEFAULT,Typeface.ITALIC);
  time.setTextColor(titleColor);
  time.setLayoutParams(timeLayoutParams);
  time.setSingleLine();
  time.setGravity(Gravity.RIGHT);
  LinearLayout.LayoutParams commentLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  comment=new TextView(getContext());
  comment.setTextSize(TypedValue.COMPLEX_UNIT_DIP,14);
  comment.setTextColor(textColor);
  comment.setLayoutParams(commentLayoutParams);
  contentHeaderLayout.addView(author);
  contentHeaderLayout.addView(time);
  contentLayout.addView(contentHeaderLayout);
  contentLayout.addView(comment);
  LinearLayout iconLayout=new LinearLayout(getContext());
  LinearLayout.LayoutParams iconLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  iconLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.TOP;
  iconLayout.setLayoutParams(iconLayoutParams);
  iconLayout.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.TOP);
  userIcon=new ImageView(getContext());
  userIcon.setLayoutParams(iconLayoutParams);
  userIcon.setScaleType(ScaleType.CENTER);
  iconLayout.addView(userIcon);
  addView(iconLayout);
  addView(contentLayout);
}",0.9927194860813704
177881,"@Override public H make(Context context){
  int four=getDIP(4);
  H header=createHeaderInstance(context);
  LayoutParams titlePanelLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  titlePanelLayoutParams.gravity=Gravity.CENTER_VERTICAL;
  header.setLayoutParams(titlePanelLayoutParams);
  header.setOrientation(LinearLayout.HORIZONTAL);
  header.setPadding(four,four,four,four);
  GradientDrawable background=new GradientDrawable(GradientDrawable.Orientation.BOTTOM_TOP,new int[]{Color.BLACK,Color.BLACK});
  Drawable[] layers=new Drawable[]{background,drawables.getDrawable(""String_Node_Str"",true,false,true)};
  LayerDrawable bg=new LayerDrawable(layers);
  bg.setLayerInset(1,0,0,0,1);
  header.setBackgroundDrawable(bg);
  TextView titleText=new TextView(context);
  titleText.setTextSize(TypedValue.COMPLEX_UNIT_DIP,20);
  titleText.setTextColor(colors.getColor(Colors.HEADER));
  titleText.setText(getHeaderText());
  titleText.setPadding(0,0,0,deviceUtils.getDIP(2));
  LayoutParams titleTextLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  titleTextLayoutParams.gravity=Gravity.CENTER_VERTICAL;
  titleText.setLayoutParams(titleTextLayoutParams);
  ImageView titleImage=new ImageView(context);
  titleImage.setImageDrawable(drawables.getDrawable(""String_Node_Str"",true));
  titleImage.setPadding(0,0,0,0);
  LayoutParams titleImageLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  titleImageLayoutParams.gravity=Gravity.CENTER_VERTICAL;
  titleImageLayoutParams.setMargins(four,0,four,0);
  titleImage.setLayoutParams(titleImageLayoutParams);
  header.setTitleText(titleText);
  header.addView(titleImage);
  header.addView(titleText);
  return header;
}","@Override public H make(Context context){
  int four=getDIP(4);
  int eight=getDIP(8);
  H header=createHeaderInstance(context);
  LayoutParams titlePanelLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  titlePanelLayoutParams.gravity=Gravity.CENTER_VERTICAL;
  header.setLayoutParams(titlePanelLayoutParams);
  header.setOrientation(LinearLayout.HORIZONTAL);
  header.setPadding(four,four,four,four);
  GradientDrawable background=new GradientDrawable(GradientDrawable.Orientation.BOTTOM_TOP,new int[]{Color.BLACK,Color.BLACK});
  Drawable headerBG=drawables.getDrawable(""String_Node_Str"",true,false,true);
  Drawable[] layers=new Drawable[]{background,headerBG};
  LayerDrawable bg=new LayerDrawable(layers);
  bg.setLayerInset(1,0,0,0,1);
  header.setBackgroundDrawable(bg);
  TextView titleText=new TextView(context);
  titleText.setTextSize(TypedValue.COMPLEX_UNIT_DIP,20);
  titleText.setTextColor(colors.getColor(Colors.HEADER));
  titleText.setText(getHeaderText());
  titleText.setPadding(0,0,0,deviceUtils.getDIP(2));
  LayoutParams titleTextLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  titleTextLayoutParams.gravity=Gravity.CENTER_VERTICAL;
  titleText.setLayoutParams(titleTextLayoutParams);
  ImageView titleImage=new ImageView(context);
  titleImage.setImageDrawable(drawables.getDrawable(""String_Node_Str"",true));
  titleImage.setPadding(0,0,0,0);
  LayoutParams titleImageLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  titleImageLayoutParams.gravity=Gravity.CENTER_VERTICAL;
  titleImageLayoutParams.setMargins(eight,0,four,0);
  titleImage.setLayoutParams(titleImageLayoutParams);
  header.setTitleText(titleText);
  header.addView(titleImage);
  header.addView(titleText);
  return header;
}",0.9529534762153684
177882,"@Override public ProfileContentView make(Context context){
  final ProfileContentView view=newProfileContentView(context);
  view.setDrawables(drawables);
  view.setContextMenu(profileImageContextMenuFactory.getBean());
  final int padding=getDIP(4);
  final int imagePadding=2;
  final int margin=getDIP(8);
  final int imageSize=200;
  final int editTextStroke=getDIP(2);
  final float editTextRadius=editTextStroke;
  final int titleColor=getColor(Colors.TITLE);
  LayoutParams editPanelLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  editPanelLayoutParams.setMargins(margin,margin,margin,margin);
  view.setLayoutParams(editPanelLayoutParams);
  view.setOrientation(LinearLayout.HORIZONTAL);
  view.setPadding(0,0,0,0);
  view.setGravity(Gravity.TOP);
  LinearLayout nameLayout=new LinearLayout(context);
  LayoutParams nameLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  LinearLayout buttonLayout=new LinearLayout(context);
  LayoutParams buttonLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  buttonLayoutParams.setMargins(margin,margin,margin,margin);
  nameLayout.setLayoutParams(nameLayoutParams);
  nameLayout.setOrientation(LinearLayout.VERTICAL);
  nameLayout.setPadding(padding,padding,padding,padding);
  nameLayout.setGravity(Gravity.TOP);
  buttonLayout.setLayoutParams(buttonLayoutParams);
  buttonLayout.setOrientation(LinearLayout.HORIZONTAL);
  buttonLayout.setGravity(Gravity.TOP);
  LayoutParams imageLayout=new LinearLayout.LayoutParams(imageSize,imageSize);
  LayoutParams textLayout=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  LayoutParams textEditLayout=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  final ImageView profilePicture=new ImageView(context);
  final TextView displayName=new TextView(context);
  final EditText displayNameEdit=new EditText(context);
  final SocializeButton editButton=profileEditButtonFactory.getBean();
  final SocializeButton saveButton=profileSaveButtonFactory.getBean();
  final SocializeButton cancelButton=profileCancelButtonFactory.getBean();
  final SocializeButton facebookSignOutButton=facebookSignOutButtonFactory.getBean();
  final ProfileSaveButtonListener saveListener=profileSaveButtonListenerFactory.getBean(context,view);
  FacebookSignOutClickListener facebookSignOutClickListener=facebookSignOutClickListenerFactory.getBean();
  LayoutParams saveButtonLayout=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  LayoutParams cancelButtonLayout=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  saveButtonLayout.setMargins(0,0,0,0);
  cancelButtonLayout.setMargins(0,0,margin,0);
  saveButtonLayout.weight=1;
  cancelButtonLayout.weight=1;
  saveButton.setVisibility(View.GONE);
  saveButton.setLayoutParams(saveButtonLayout);
  cancelButton.setVisibility(View.GONE);
  cancelButton.setLayoutParams(cancelButtonLayout);
  editButton.setVisibility(View.GONE);
  facebookSignOutButton.setVisibility(View.GONE);
  textLayout.setMargins(margin,0,0,0);
  textEditLayout.setMargins(margin,0,margin,0);
  profilePicture.setLayoutParams(imageLayout);
  profilePicture.setPadding(imagePadding,imagePadding,imagePadding,imagePadding);
  displayName.setTextColor(titleColor);
  displayName.setTextSize(TypedValue.COMPLEX_UNIT_DIP,20);
  displayName.setMaxLines(1);
  displayName.setTypeface(Typeface.DEFAULT);
  displayName.setTextColor(titleColor);
  displayName.setSingleLine();
  displayName.setLayoutParams(textLayout);
  GradientDrawable textBG=new GradientDrawable(Orientation.BOTTOM_TOP,new int[]{colors.getColor(Colors.TEXT_BG),colors.getColor(Colors.TEXT_BG)});
  textBG.setStroke(editTextStroke,colors.getColor(Colors.TEXT_STROKE));
  textBG.setCornerRadius(editTextRadius);
  displayNameEdit.setLayoutParams(textEditLayout);
  displayNameEdit.setMinLines(1);
  displayNameEdit.setMaxLines(1);
  displayNameEdit.setSingleLine(true);
  displayNameEdit.setTextSize(TypedValue.COMPLEX_UNIT_DIP,16);
  displayNameEdit.setBackgroundDrawable(textBG);
  displayNameEdit.setVisibility(View.GONE);
  displayNameEdit.setPadding(padding,padding,padding,padding);
  InputFilter[] maxLength=new InputFilter[1];
  maxLength[0]=new InputFilter.LengthFilter(128);
  displayNameEdit.setFilters(maxLength);
  view.setProfilePicture(profilePicture);
  view.setDisplayName(displayName);
  view.setDisplayNameEdit(displayNameEdit);
  view.setFacebookSignOutButton(facebookSignOutButton);
  view.setSaveButton(saveButton);
  view.setCancelButton(cancelButton);
  view.setEditButton(editButton);
  editButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      view.onEdit();
    }
  }
);
  cancelButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      view.onCancel();
    }
  }
);
  profilePicture.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      view.onImageEdit();
    }
  }
);
  saveButton.setOnClickListener(saveListener);
  facebookSignOutButton.setOnClickListener(facebookSignOutClickListener);
  nameLayout.addView(displayName);
  nameLayout.addView(displayNameEdit);
  nameLayout.addView(facebookSignOutButton);
  nameLayout.addView(editButton);
  buttonLayout.addView(cancelButton);
  buttonLayout.addView(saveButton);
  nameLayout.addView(buttonLayout);
  view.addView(profilePicture);
  view.addView(nameLayout);
  return view;
}","@Override public ProfileContentView make(Context context){
  final ProfileContentView view=newProfileContentView(context);
  view.setDrawables(drawables);
  view.setContextMenu(profileImageContextMenuFactory.getBean());
  final int padding=getDIP(4);
  final int imagePadding=2;
  final int margin=getDIP(8);
  final int imageSize=200;
  final int editTextStroke=getDIP(2);
  final float editTextRadius=editTextStroke;
  final int titleColor=getColor(Colors.TITLE);
  LayoutParams editPanelLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  editPanelLayoutParams.setMargins(margin,margin,margin,margin);
  view.setLayoutParams(editPanelLayoutParams);
  view.setOrientation(LinearLayout.HORIZONTAL);
  view.setPadding(0,0,0,0);
  view.setGravity(Gravity.TOP);
  LinearLayout nameLayout=new LinearLayout(context);
  LayoutParams nameLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  LinearLayout buttonLayout=new LinearLayout(context);
  LayoutParams buttonLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  buttonLayoutParams.setMargins(margin,margin,margin,margin);
  nameLayout.setLayoutParams(nameLayoutParams);
  nameLayout.setOrientation(LinearLayout.VERTICAL);
  nameLayout.setPadding(padding,padding,padding,padding);
  nameLayout.setGravity(Gravity.TOP);
  buttonLayout.setLayoutParams(buttonLayoutParams);
  buttonLayout.setOrientation(LinearLayout.HORIZONTAL);
  buttonLayout.setGravity(Gravity.CENTER_VERTICAL | Gravity.RIGHT);
  LayoutParams imageLayout=new LinearLayout.LayoutParams(imageSize,imageSize);
  LayoutParams textLayout=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  LayoutParams textEditLayout=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  final ImageView profilePicture=new ImageView(context);
  final TextView displayName=new TextView(context);
  final EditText displayNameEdit=new EditText(context);
  final SocializeButton editButton=profileEditButtonFactory.getBean();
  final SocializeButton saveButton=profileSaveButtonFactory.getBean();
  final SocializeButton cancelButton=profileCancelButtonFactory.getBean();
  final SocializeButton facebookSignOutButton=facebookSignOutButtonFactory.getBean();
  final ProfileSaveButtonListener saveListener=profileSaveButtonListenerFactory.getBean(context,view);
  FacebookSignOutClickListener facebookSignOutClickListener=facebookSignOutClickListenerFactory.getBean();
  saveButton.setVisibility(View.GONE);
  cancelButton.setVisibility(View.GONE);
  editButton.setVisibility(View.GONE);
  facebookSignOutButton.setVisibility(View.GONE);
  textLayout.setMargins(margin,0,0,0);
  textEditLayout.setMargins(margin,0,margin,0);
  profilePicture.setLayoutParams(imageLayout);
  profilePicture.setPadding(imagePadding,imagePadding,imagePadding,imagePadding);
  displayName.setTextColor(titleColor);
  displayName.setTextSize(TypedValue.COMPLEX_UNIT_DIP,20);
  displayName.setMaxLines(1);
  displayName.setTypeface(Typeface.DEFAULT);
  displayName.setTextColor(titleColor);
  displayName.setSingleLine();
  displayName.setLayoutParams(textLayout);
  GradientDrawable textBG=new GradientDrawable(Orientation.BOTTOM_TOP,new int[]{colors.getColor(Colors.TEXT_BG),colors.getColor(Colors.TEXT_BG)});
  textBG.setStroke(editTextStroke,colors.getColor(Colors.TEXT_STROKE));
  textBG.setCornerRadius(editTextRadius);
  displayNameEdit.setLayoutParams(textEditLayout);
  displayNameEdit.setMinLines(1);
  displayNameEdit.setMaxLines(1);
  displayNameEdit.setSingleLine(true);
  displayNameEdit.setTextSize(TypedValue.COMPLEX_UNIT_DIP,16);
  displayNameEdit.setBackgroundDrawable(textBG);
  displayNameEdit.setVisibility(View.GONE);
  displayNameEdit.setPadding(padding,padding,padding,padding);
  InputFilter[] maxLength=new InputFilter[1];
  maxLength[0]=new InputFilter.LengthFilter(128);
  displayNameEdit.setFilters(maxLength);
  view.setProfilePicture(profilePicture);
  view.setDisplayName(displayName);
  view.setDisplayNameEdit(displayNameEdit);
  view.setFacebookSignOutButton(facebookSignOutButton);
  view.setSaveButton(saveButton);
  view.setCancelButton(cancelButton);
  view.setEditButton(editButton);
  editButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      view.onEdit();
    }
  }
);
  cancelButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      view.onCancel();
    }
  }
);
  profilePicture.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      view.onImageEdit();
    }
  }
);
  saveButton.setOnClickListener(saveListener);
  facebookSignOutButton.setOnClickListener(facebookSignOutClickListener);
  nameLayout.addView(displayName);
  nameLayout.addView(displayNameEdit);
  nameLayout.addView(facebookSignOutButton);
  nameLayout.addView(editButton);
  buttonLayout.addView(cancelButton);
  buttonLayout.addView(saveButton);
  nameLayout.addView(buttonLayout);
  view.addView(profilePicture);
  view.addView(nameLayout);
  return view;
}",0.923381651210948
177883,"public void testListComment() throws JSONException {
  robotium.clickOnButton(""String_Node_Str"");
  robotium.waitForActivity(""String_Node_Str"",DEFAULT_TIMEOUT_SECONDS);
  JSONObject json=getJSON(""String_Node_Str"");
  JSONArray jsonArray=json.getJSONArray(""String_Node_Str"");
  robotium.enterText(0,DEFAULT_GET_ENTITY);
  robotium.clickOnButton(""String_Node_Str"");
  robotium.waitForActivity(""String_Node_Str"",DEFAULT_TIMEOUT_SECONDS);
  robotium.waitForView(ListView.class);
  ListView comments=(ListView)robotium.getCurrentActivity().findViewById(R.id.list);
  assertEquals(jsonArray.length(),comments.getCount());
  robotium.clickInList(0);
  waitForSuccess();
  sleep(2000);
  TextView txt=(TextView)robotium.getCurrentActivity().findViewById(com.socialize.sample.R.id.txtCommentId);
  assertNotNull(txt);
  String value=txt.getText().toString();
  Integer.parseInt(value);
}","public void testListComment() throws JSONException {
  robotium.clickOnButton(""String_Node_Str"");
  robotium.waitForActivity(""String_Node_Str"",DEFAULT_TIMEOUT_SECONDS);
  robotium.enterText(0,DEFAULT_GET_ENTITY);
  robotium.clickOnButton(""String_Node_Str"");
  robotium.waitForActivity(""String_Node_Str"",DEFAULT_TIMEOUT_SECONDS);
  robotium.waitForView(ListView.class);
  ListView comments=(ListView)robotium.getCurrentActivity().findViewById(R.id.list);
  assertEquals(10,comments.getCount());
  robotium.clickInList(0);
  waitForSuccess();
  sleep(2000);
  TextView txt=(TextView)robotium.getCurrentActivity().findViewById(com.socialize.sample.R.id.txtCommentId);
  assertNotNull(txt);
  String value=txt.getText().toString();
  Integer.parseInt(value);
}",0.9228886168910648
177884,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  String consumerKey=""String_Node_Str"";
  String consumerSecret=""String_Node_Str"";
  SocializeUI.getInstance().setAppCredentials(this,consumerKey,consumerSecret);
  SocializeUI.getInstance().setEntityUrl(this,""String_Node_Str"");
  this.requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.main);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  String consumerKey=""String_Node_Str"";
  String consumerSecret=""String_Node_Str"";
  this.requestWindowFeature(Window.FEATURE_NO_TITLE);
  SocializeUI.getInstance().setAppCredentials(this,consumerKey,consumerSecret);
  SocializeUI.getInstance().setEntityUrl(this,""String_Node_Str"");
  setContentView(R.layout.main);
}",0.6400966183574879
177885,"@Override protected void onPostSocializeInit(IOCContainer container){
  SocializeUI.getInstance().initUI(container);
  consumerKey=Socialize.getSocialize().getConfig().getProperty(SocializeConfig.SOCIALIZE_CONSUMER_KEY);
  consumerSecret=Socialize.getSocialize().getConfig().getProperty(SocializeConfig.SOCIALIZE_CONSUMER_SECRET);
  fbAppId=Socialize.getSocialize().getConfig().getProperty(SocializeConfig.FACEBOOK_APP_ID);
}","@Override protected void onPostSocializeInit(IOCContainer container){
  SocializeUI.getInstance().initUI(container);
  consumerKey=SocializeUI.getInstance().getGlobalConfigValue(getContext(),SocializeConfig.SOCIALIZE_CONSUMER_KEY);
  consumerSecret=SocializeUI.getInstance().getGlobalConfigValue(getContext(),SocializeConfig.SOCIALIZE_CONSUMER_SECRET);
  fbAppId=SocializeUI.getInstance().getGlobalConfigValue(getContext(),SocializeConfig.FACEBOOK_APP_ID);
}",0.6908267270668177
177886,"/** 
 * Sets the credentials for your Socialize App.
 * @param context The current activity
 * @param consumerKey Your consumer key, obtained via registration at http://getsocialize.com
 * @param consumerSecret Your consumer secret, obtained via registration at http://getsocialize.com
 */
public void setAppCredentials(Context context,String consumerKey,String consumerSecret){
  assertSocializeInitialized(context);
  Socialize.getSocialize().getConfig().setProperty(SocializeConfig.SOCIALIZE_CONSUMER_KEY,consumerKey);
  Socialize.getSocialize().getConfig().setProperty(SocializeConfig.SOCIALIZE_CONSUMER_SECRET,consumerSecret);
}","/** 
 * Sets the credentials for your Socialize App.
 * @param context The current activity
 * @param consumerKey Your consumer key, obtained via registration at http://getsocialize.com
 * @param consumerSecret Your consumer secret, obtained via registration at http://getsocialize.com
 */
public void setAppCredentials(Context context,String consumerKey,String consumerSecret){
  SharedPreferences prefs=context.getSharedPreferences(CONFIG_KEY,Context.MODE_PRIVATE);
  Editor editor=prefs.edit();
  editor.putString(SocializeConfig.SOCIALIZE_CONSUMER_KEY,consumerKey);
  editor.putString(SocializeConfig.SOCIALIZE_CONSUMER_SECRET,consumerSecret);
  editor.commit();
}",0.787086856264412
177887,"/** 
 * Sets the FB credentials for the current user if available.
 * @param context The current activity
 * @param userId
 * @param token
 */
public void setFacebookUserCredentials(Activity context,String userId,String token){
  assertSocializeInitialized(context);
  Socialize.getSocialize().getConfig().setProperty(SocializeConfig.FACEBOOK_USER_ID,userId);
  Socialize.getSocialize().getConfig().setProperty(SocializeConfig.FACEBOOK_USER_TOKEN,token);
}","/** 
 * Sets the FB credentials for the current user if available.
 * @param context The current activity
 * @param userId
 * @param token
 */
public void setFacebookUserCredentials(Context context,String userId,String token){
  SharedPreferences prefs=context.getSharedPreferences(CONFIG_KEY,Context.MODE_PRIVATE);
  Editor editor=prefs.edit();
  editor.putString(SocializeConfig.FACEBOOK_USER_ID,userId);
  editor.putString(SocializeConfig.FACEBOOK_USER_TOKEN,token);
  editor.commit();
}",0.5898520084566596
177888,"@Override public View getView(int position,View view,ViewGroup parent){
  ViewHolder holder;
  Drawable defaultImage=drawables.getDrawable(SocializeUI.DEFAULT_USER_ICON,deviceUtils.getDIP(iconSize),deviceUtils.getDIP(iconSize),true);
  if (view == null) {
    CommentListItem v=commentItemViewFactory.getBean();
    holder=new ViewHolder();
    holder.time=v.getTime();
    holder.userName=v.getAuthor();
    holder.comment=v.getComment();
    holder.now=new Date();
    v.setTag(holder);
    view=v;
  }
 else {
    holder=(ViewHolder)view.getTag();
  }
  if (position >= comments.size()) {
    if (loadingView == null) {
      loadingView=listItemLoadingViewFactory.getBean();
      loadingView.setTag(holder);
    }
    view=loadingView;
  }
 else {
    Comment item=(Comment)getItem(position);
    if (item != null) {
      User currentUser=Socialize.getSocialize().getSession().getUser();
      User user=item.getUser();
      if (currentUser != null && user != null && currentUser.getId().equals(user.getId())) {
        user=currentUser;
      }
      if (holder.comment != null) {
        holder.comment.setText(item.getText());
      }
      if (holder.userName != null) {
        if (user != null) {
          holder.userName.setText(user.getDisplayName());
        }
 else {
          holder.userName.setText(""String_Node_Str"");
        }
      }
      if (holder.time != null) {
        Long date=item.getDate();
        if (date != null && date > 0) {
          long diff=(holder.now.getTime() - date.longValue());
          holder.time.setText(timeUtils.getTimeString(diff) + ""String_Node_Str"");
        }
 else {
          holder.time.setText(""String_Node_Str"");
        }
      }
      if (holder.userIcon != null) {
        if (user != null) {
          if (!StringUtils.isEmpty(user.getSmallImageUri())) {
            try {
              Uri uri=Uri.parse(user.getSmallImageUri());
              holder.userIcon.setImageURI(uri);
            }
 catch (            Exception e) {
              String errorMsg=""String_Node_Str"" + user.getSmallImageUri() + ""String_Node_Str"";
              if (logger != null) {
                logger.error(errorMsg,e);
              }
 else {
                System.err.println(errorMsg);
              }
              holder.userIcon.setImageDrawable(defaultImage);
            }
          }
 else           if (drawables != null && !StringUtils.isEmpty(user.getProfilePicData())) {
            try {
              Drawable drawable=drawables.getDrawable(user.getId().toString(),Base64.decode(user.getProfilePicData()),deviceUtils.getDIP(iconSize),deviceUtils.getDIP(iconSize));
              holder.userIcon.setImageDrawable(drawable);
            }
 catch (            Base64DecoderException e) {
              if (logger != null) {
                logger.error(""String_Node_Str"",e);
              }
 else {
                e.printStackTrace();
              }
              holder.userIcon.setImageDrawable(defaultImage);
            }
          }
 else {
            holder.userIcon.setImageDrawable(defaultImage);
          }
        }
 else {
          holder.userIcon.setImageDrawable(defaultImage);
        }
      }
    }
  }
  return view;
}","@Override public View getView(int position,View view,ViewGroup parent){
  ViewHolder holder;
  Drawable defaultImage=drawables.getDrawable(SocializeUI.DEFAULT_USER_ICON,deviceUtils.getDIP(iconSize),deviceUtils.getDIP(iconSize),true);
  if (view == null) {
    CommentListItem v=commentItemViewFactory.getBean();
    holder=new ViewHolder();
    holder.time=v.getTime();
    holder.userName=v.getAuthor();
    holder.comment=v.getComment();
    holder.now=new Date();
    v.setTag(holder);
    view=v;
  }
 else {
    holder=(ViewHolder)view.getTag();
  }
  if (position >= comments.size()) {
    if (loadingView == null) {
      loadingView=listItemLoadingViewFactory.getBean();
      loadingView.setTag(holder);
    }
    view=loadingView;
  }
 else {
    Comment item=(Comment)getItem(position);
    if (item != null) {
      User currentUser=Socialize.getSocialize().getSession().getUser();
      User user=item.getUser();
      if (currentUser != null && user != null && currentUser.getId().equals(user.getId())) {
        user=currentUser;
      }
      if (holder.comment != null) {
        holder.comment.setText(item.getText());
      }
      if (holder.userName != null) {
        if (user != null) {
          holder.userName.setText(position + ""String_Node_Str"" + user.getDisplayName());
        }
 else {
          holder.userName.setText(""String_Node_Str"");
        }
      }
      if (holder.time != null) {
        Long date=item.getDate();
        if (date != null && date > 0) {
          long diff=(holder.now.getTime() - date.longValue());
          holder.time.setText(timeUtils.getTimeString(diff) + ""String_Node_Str"");
        }
 else {
          holder.time.setText(""String_Node_Str"");
        }
      }
      if (holder.userIcon != null) {
        if (user != null) {
          if (!StringUtils.isEmpty(user.getSmallImageUri())) {
            try {
              Uri uri=Uri.parse(user.getSmallImageUri());
              holder.userIcon.setImageURI(uri);
            }
 catch (            Exception e) {
              String errorMsg=""String_Node_Str"" + user.getSmallImageUri() + ""String_Node_Str"";
              if (logger != null) {
                logger.error(errorMsg,e);
              }
 else {
                System.err.println(errorMsg);
              }
              holder.userIcon.setImageDrawable(defaultImage);
            }
          }
 else           if (drawables != null && !StringUtils.isEmpty(user.getProfilePicData())) {
            try {
              Drawable drawable=drawables.getDrawable(user.getId().toString(),Base64.decode(user.getProfilePicData()),deviceUtils.getDIP(iconSize),deviceUtils.getDIP(iconSize));
              holder.userIcon.setImageDrawable(drawable);
            }
 catch (            Base64DecoderException e) {
              if (logger != null) {
                logger.error(""String_Node_Str"",e);
              }
 else {
                e.printStackTrace();
              }
              holder.userIcon.setImageDrawable(defaultImage);
            }
          }
 else {
            holder.userIcon.setImageDrawable(defaultImage);
          }
        }
 else {
          holder.userIcon.setImageDrawable(defaultImage);
        }
      }
    }
  }
  return view;
}",0.9951840919683084
177889,"public void init(){
  final int eight=deviceUtils.getDIP(8);
  final int four=deviceUtils.getDIP(4);
  final int textColor=colors.getColor(Colors.BODY);
  final int titleColor=colors.getColor(Colors.TITLE);
  ListView.LayoutParams layout=new ListView.LayoutParams(ListView.LayoutParams.FILL_PARENT,ListView.LayoutParams.FILL_PARENT);
  setDrawingCacheEnabled(true);
  setBackgroundColor(colors.getColor(Colors.LIST_ITEM_BG));
  setOrientation(LinearLayout.HORIZONTAL);
  setLayoutParams(layout);
  setGravity(Gravity.TOP);
  setPadding(eight,eight,eight,eight);
  LinearLayout contentLayout=new LinearLayout(getContext());
  contentLayout.setOrientation(LinearLayout.VERTICAL);
  contentLayout.setGravity(Gravity.LEFT);
  contentLayout.setPadding(0,0,0,0);
  LinearLayout.LayoutParams contentLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentLayoutParams.setMargins(four,0,0,0);
  contentLayout.setLayoutParams(contentLayoutParams);
  LinearLayout contentHeaderLayout=new LinearLayout(getContext());
  LinearLayout.LayoutParams contentHeaderLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentHeaderLayout.setLayoutParams(contentHeaderLayoutParams);
  contentHeaderLayout.setGravity(Gravity.LEFT);
  contentHeaderLayout.setOrientation(LinearLayout.HORIZONTAL);
  contentHeaderLayout.setPadding(0,0,0,0);
  LinearLayout.LayoutParams authorLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  author=new TextView(getContext());
  author.setTextSize(TypedValue.COMPLEX_UNIT_DIP,14);
  author.setMaxLines(1);
  author.setTypeface(Typeface.DEFAULT_BOLD);
  author.setTextColor(titleColor);
  author.setLayoutParams(authorLayoutParams);
  author.setSingleLine();
  LinearLayout.LayoutParams timeLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  timeLayoutParams.gravity=Gravity.RIGHT;
  time=new TextView(getContext());
  time.setTextSize(TypedValue.COMPLEX_UNIT_DIP,11);
  time.setMaxLines(1);
  time.setTypeface(Typeface.DEFAULT,Typeface.ITALIC);
  time.setTextColor(titleColor);
  time.setLayoutParams(timeLayoutParams);
  time.setSingleLine();
  time.setGravity(Gravity.RIGHT);
  LinearLayout.LayoutParams commentLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  comment=new TextView(getContext());
  comment.setTextSize(TypedValue.COMPLEX_UNIT_DIP,11);
  comment.setTextColor(textColor);
  comment.setLayoutParams(commentLayoutParams);
  contentHeaderLayout.addView(author);
  contentHeaderLayout.addView(time);
  contentLayout.addView(contentHeaderLayout);
  contentLayout.addView(comment);
  addView(contentLayout);
}","public void init(){
  final int eight=deviceUtils.getDIP(8);
  final int four=deviceUtils.getDIP(4);
  final int textColor=colors.getColor(Colors.BODY);
  final int titleColor=colors.getColor(Colors.TITLE);
  ListView.LayoutParams layout=new ListView.LayoutParams(ListView.LayoutParams.FILL_PARENT,ListView.LayoutParams.FILL_PARENT);
  setDrawingCacheEnabled(true);
  setBackgroundColor(colors.getColor(Colors.LIST_ITEM_BG));
  setOrientation(LinearLayout.HORIZONTAL);
  setLayoutParams(layout);
  setGravity(Gravity.TOP);
  setPadding(eight,eight,eight,eight);
  LinearLayout contentLayout=new LinearLayout(getContext());
  contentLayout.setOrientation(LinearLayout.VERTICAL);
  contentLayout.setGravity(Gravity.LEFT);
  contentLayout.setPadding(0,0,0,0);
  LinearLayout.LayoutParams contentLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentLayoutParams.setMargins(four,0,0,0);
  contentLayout.setLayoutParams(contentLayoutParams);
  LinearLayout contentHeaderLayout=new LinearLayout(getContext());
  LinearLayout.LayoutParams contentHeaderLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentHeaderLayout.setLayoutParams(contentHeaderLayoutParams);
  contentHeaderLayout.setGravity(Gravity.LEFT);
  contentHeaderLayout.setOrientation(LinearLayout.HORIZONTAL);
  contentHeaderLayout.setPadding(0,0,0,0);
  LinearLayout.LayoutParams authorLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  author=new TextView(getContext());
  author.setTextSize(TypedValue.COMPLEX_UNIT_DIP,16);
  author.setMaxLines(1);
  author.setTypeface(Typeface.DEFAULT_BOLD);
  author.setTextColor(titleColor);
  author.setLayoutParams(authorLayoutParams);
  author.setSingleLine();
  LinearLayout.LayoutParams timeLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  timeLayoutParams.gravity=Gravity.RIGHT;
  time=new TextView(getContext());
  time.setTextSize(TypedValue.COMPLEX_UNIT_DIP,12);
  time.setMaxLines(1);
  time.setTypeface(Typeface.DEFAULT,Typeface.ITALIC);
  time.setTextColor(titleColor);
  time.setLayoutParams(timeLayoutParams);
  time.setSingleLine();
  time.setGravity(Gravity.RIGHT);
  LinearLayout.LayoutParams commentLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  comment=new TextView(getContext());
  comment.setTextSize(TypedValue.COMPLEX_UNIT_DIP,14);
  comment.setTextColor(textColor);
  comment.setLayoutParams(commentLayoutParams);
  contentHeaderLayout.addView(author);
  contentHeaderLayout.addView(time);
  contentLayout.addView(contentHeaderLayout);
  contentLayout.addView(comment);
  addView(contentLayout);
}",0.9989648033126294
177890,"@Override public void onClick(View v){
  final String text=editText.getText().toString();
  if (!StringUtils.isEmpty(text)) {
    imm.hideSoftInputFromWindow(editText.getWindowToken(),0);
    if (!Socialize.getSocialize().isAuthenticated()) {
      Socialize.getSocialize().authenticate(Socialize.getSocialize().getConfig().getProperty(SocializeConfig.SOCIALIZE_CONSUMER_KEY),Socialize.getSocialize().getConfig().getProperty(SocializeConfig.SOCIALIZE_CONSUMER_SECRET),new SocializeAuthListener(){
        @Override public void onError(        SocializeException error){
          showError(context,error.getMessage());
        }
        @Override public void onAuthSuccess(        SocializeSession session){
          doPostComment(text);
        }
        @Override public void onAuthFail(        SocializeException error){
          showError(context,error.getMessage());
        }
      }
);
    }
 else {
      doPostComment(text);
    }
  }
}","@Override public void onClick(View v){
  final String text=editText.getText().toString();
  if (!StringUtils.isEmpty(text)) {
    imm.hideSoftInputFromWindow(editText.getWindowToken(),0);
    if (!Socialize.getSocialize().isAuthenticated()) {
      Socialize.getSocialize().authenticate(consumerKey,consumerSecret,new SocializeAuthListener(){
        @Override public void onError(        SocializeException error){
          showError(context,error.getMessage());
        }
        @Override public void onAuthSuccess(        SocializeSession session){
          doPostComment(text);
        }
        @Override public void onAuthFail(        SocializeException error){
          showError(context,error.getMessage());
        }
      }
);
    }
 else {
      doPostComment(text);
    }
  }
}",0.8839080459770114
177891,"public CommentListView(final Context context,final CommentAdapter provider,final DeviceUtils deviceUtils,final Drawables drawables,final Colors colors,final String entityKey){
  super(context);
  this.provider=provider;
  this.entityKey=entityKey;
  this.drawables=drawables;
  this.colors=colors;
  int four=deviceUtils.getDIP(4);
  int eight=deviceUtils.getDIP(8);
  imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);
  LayoutParams fill=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
  setOrientation(LinearLayout.VERTICAL);
  setLayoutParams(fill);
  setBackgroundDrawable(drawables.getDrawable(""String_Node_Str"",true,true,true));
  setPadding(0,0,0,0);
  setVerticalFadingEdgeEnabled(false);
  LinearLayout titlePanel=new LinearLayout(context);
  LayoutParams titlePanelLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  titlePanelLayoutParams.gravity=Gravity.CENTER_VERTICAL;
  titlePanel.setLayoutParams(titlePanelLayoutParams);
  titlePanel.setOrientation(LinearLayout.HORIZONTAL);
  titlePanel.setPadding(four,four,four,four);
  titlePanel.setBackgroundDrawable(drawables.getDrawable(""String_Node_Str"",true,false,true));
  titleText=new TextView(context);
  titleText.setTextSize(TypedValue.COMPLEX_UNIT_DIP,20);
  titleText.setTextColor(colors.getColor(Colors.HEADER));
  titleText.setText(""String_Node_Str"");
  titleText.setPadding(0,0,0,deviceUtils.getDIP(2));
  LayoutParams titleTextLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  titleTextLayoutParams.gravity=Gravity.CENTER_VERTICAL;
  titleText.setLayoutParams(titleTextLayoutParams);
  ImageView titleImage=new ImageView(context);
  titleImage.setImageDrawable(drawables.getDrawable(""String_Node_Str"",true));
  titleImage.setPadding(0,0,0,0);
  LayoutParams titleImageLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  titleImageLayoutParams.gravity=Gravity.CENTER_VERTICAL;
  titleImageLayoutParams.setMargins(four,0,four,0);
  titleImage.setLayoutParams(titleImageLayoutParams);
  titlePanel.addView(titleImage);
  titlePanel.addView(titleText);
  LinearLayout editPanel=new LinearLayout(context);
  LayoutParams editPanelLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  editPanelLayoutParams.setMargins(eight,eight,eight,eight);
  editPanel.setLayoutParams(editPanelLayoutParams);
  editPanel.setOrientation(LinearLayout.HORIZONTAL);
  editPanel.setPadding(0,0,0,0);
  LinearLayout.LayoutParams editTextLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  editTextLayoutParams.gravity=Gravity.TOP;
  editTextLayoutParams.weight=1.0f;
  editTextLayoutParams.setMargins(0,0,four,0);
  editText=new EditText(context);
  editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
  editText.setMinLines(1);
  editText.setMaxLines(5);
  editText.setMinHeight(deviceUtils.getDIP(42));
  editText.setRawInputType(InputType.TYPE_TEXT_FLAG_MULTI_LINE);
  editText.setGravity(Gravity.TOP);
  editText.setVerticalScrollBarEnabled(true);
  editText.setVerticalFadingEdgeEnabled(true);
  editText.setTextSize(TypedValue.COMPLEX_UNIT_DIP,16);
  editText.setBackgroundColor(colors.getColor(Colors.TEXT_BG));
  editText.setHint(""String_Node_Str"");
  editText.setLayoutParams(editTextLayoutParams);
  LinearLayout.LayoutParams buttonLayoutParams=new LinearLayout.LayoutParams(deviceUtils.getDIP(42),deviceUtils.getDIP(42));
  buttonLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.TOP;
  int bottom=colors.getColor(Colors.BUTTON_BOTTOM);
  int top=colors.getColor(Colors.BUTTON_TOP);
  button=new ImageButton(context);
  button.setImageDrawable(drawables.getDrawable(""String_Node_Str"",true));
  GradientDrawable foreground=new GradientDrawable(GradientDrawable.Orientation.BOTTOM_TOP,new int[]{bottom,top});
  button.setBackgroundDrawable(foreground);
  button.setLayoutParams(buttonLayoutParams);
  button.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      final String text=editText.getText().toString();
      if (!StringUtils.isEmpty(text)) {
        imm.hideSoftInputFromWindow(editText.getWindowToken(),0);
        if (!Socialize.getSocialize().isAuthenticated()) {
          Socialize.getSocialize().authenticate(Socialize.getSocialize().getConfig().getProperty(SocializeConfig.SOCIALIZE_CONSUMER_KEY),Socialize.getSocialize().getConfig().getProperty(SocializeConfig.SOCIALIZE_CONSUMER_SECRET),new SocializeAuthListener(){
            @Override public void onError(            SocializeException error){
              showError(context,error.getMessage());
            }
            @Override public void onAuthSuccess(            SocializeSession session){
              doPostComment(text);
            }
            @Override public void onAuthFail(            SocializeException error){
              showError(context,error.getMessage());
            }
          }
);
        }
 else {
          doPostComment(text);
        }
      }
    }
  }
);
  editPanel.addView(editText);
  editPanel.addView(button);
  LinearLayout contentView=new LinearLayout(context);
  LayoutParams contentViewLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentViewLayoutParams.weight=1.0f;
  contentView.setLayoutParams(contentViewLayoutParams);
  contentView.setOrientation(LinearLayout.VERTICAL);
  LayoutParams listViewLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  listViewLayoutParams.weight=1.0f;
  listView=new ListView(context);
  listView.setAdapter(provider);
  listView.setLayoutParams(listViewLayoutParams);
  listView.setDrawingCacheEnabled(true);
  listView.setCacheColorHint(0);
  listView.setDividerHeight(2);
  listView.setSmoothScrollbarEnabled(true);
  listView.setOnScrollListener(new OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView view,    int scrollState){
    }
    @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      int lastInScreen=firstVisibleItem + visibleItemCount;
      boolean last=(lastInScreen == totalItemCount);
      if (last && !loading) {
        getNextSet();
      }
    }
  }
);
  listView.requestFocus();
  contentView.addView(listView);
  flipper=new ViewFlipper(context);
  LayoutParams flipperLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
  flipperLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  flipper.setLayoutParams(flipperLayoutParams);
  FrameLayout loadingScreen=new FrameLayout(context);
  FrameLayout.LayoutParams loadingScreenLayoutParams=new FrameLayout.LayoutParams(FrameLayout.LayoutParams.FILL_PARENT,FrameLayout.LayoutParams.FILL_PARENT);
  FrameLayout.LayoutParams progressLayoutParams=new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,FrameLayout.LayoutParams.WRAP_CONTENT);
  loadingScreenLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  progressLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  loadingScreen.setLayoutParams(loadingScreenLayoutParams);
  ProgressBar progress=new ProgressBar(context,null,android.R.attr.progressBarStyleSmall);
  progress.setLayoutParams(progressLayoutParams);
  loadingScreen.addView(progress);
  flipper.addView(loadingScreen);
  flipper.addView(contentView);
  flipper.setDisplayedChild(0);
  addView(titlePanel);
  addView(editPanel);
  addView(flipper);
}","public CommentListView(final Context context,final CommentAdapter provider,final DeviceUtils deviceUtils,final Drawables drawables,final Colors colors,final String entityKey){
  super(context);
  this.provider=provider;
  this.entityKey=entityKey;
  this.drawables=drawables;
  this.colors=colors;
  int four=deviceUtils.getDIP(4);
  int eight=deviceUtils.getDIP(8);
  imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);
  LayoutParams fill=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
  setOrientation(LinearLayout.VERTICAL);
  setLayoutParams(fill);
  setBackgroundDrawable(drawables.getDrawable(""String_Node_Str"",true,true,true));
  setPadding(0,0,0,0);
  setVerticalFadingEdgeEnabled(false);
  LinearLayout titlePanel=new LinearLayout(context);
  LayoutParams titlePanelLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  titlePanelLayoutParams.gravity=Gravity.CENTER_VERTICAL;
  titlePanel.setLayoutParams(titlePanelLayoutParams);
  titlePanel.setOrientation(LinearLayout.HORIZONTAL);
  titlePanel.setPadding(four,four,four,four);
  titlePanel.setBackgroundDrawable(drawables.getDrawable(""String_Node_Str"",true,false,true));
  titleText=new TextView(context);
  titleText.setTextSize(TypedValue.COMPLEX_UNIT_DIP,20);
  titleText.setTextColor(colors.getColor(Colors.HEADER));
  titleText.setText(""String_Node_Str"");
  titleText.setPadding(0,0,0,deviceUtils.getDIP(2));
  LayoutParams titleTextLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  titleTextLayoutParams.gravity=Gravity.CENTER_VERTICAL;
  titleText.setLayoutParams(titleTextLayoutParams);
  ImageView titleImage=new ImageView(context);
  titleImage.setImageDrawable(drawables.getDrawable(""String_Node_Str"",true));
  titleImage.setPadding(0,0,0,0);
  LayoutParams titleImageLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  titleImageLayoutParams.gravity=Gravity.CENTER_VERTICAL;
  titleImageLayoutParams.setMargins(four,0,four,0);
  titleImage.setLayoutParams(titleImageLayoutParams);
  titlePanel.addView(titleImage);
  titlePanel.addView(titleText);
  LinearLayout editPanel=new LinearLayout(context);
  LayoutParams editPanelLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  editPanelLayoutParams.setMargins(eight,eight,eight,eight);
  editPanel.setLayoutParams(editPanelLayoutParams);
  editPanel.setOrientation(LinearLayout.HORIZONTAL);
  editPanel.setPadding(0,0,0,0);
  LinearLayout.LayoutParams editTextLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  editTextLayoutParams.gravity=Gravity.TOP;
  editTextLayoutParams.weight=1.0f;
  editTextLayoutParams.setMargins(0,0,four,0);
  editText=new EditText(context);
  editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
  editText.setMinLines(1);
  editText.setMaxLines(5);
  editText.setMinHeight(deviceUtils.getDIP(42));
  editText.setRawInputType(InputType.TYPE_TEXT_FLAG_MULTI_LINE);
  editText.setGravity(Gravity.TOP);
  editText.setVerticalScrollBarEnabled(true);
  editText.setVerticalFadingEdgeEnabled(true);
  editText.setTextSize(TypedValue.COMPLEX_UNIT_DIP,16);
  editText.setBackgroundColor(colors.getColor(Colors.TEXT_BG));
  editText.setHint(""String_Node_Str"");
  editText.setLayoutParams(editTextLayoutParams);
  LinearLayout.LayoutParams buttonLayoutParams=new LinearLayout.LayoutParams(deviceUtils.getDIP(42),deviceUtils.getDIP(42));
  buttonLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.TOP;
  int bottom=colors.getColor(Colors.BUTTON_BOTTOM);
  int top=colors.getColor(Colors.BUTTON_TOP);
  button=new ImageButton(context);
  button.setImageDrawable(drawables.getDrawable(""String_Node_Str"",true));
  GradientDrawable foreground=new GradientDrawable(GradientDrawable.Orientation.BOTTOM_TOP,new int[]{bottom,top});
  button.setBackgroundDrawable(foreground);
  button.setLayoutParams(buttonLayoutParams);
  final String consumerKey=SocializeUI.getInstance().getGlobalConfigValue(getContext(),SocializeConfig.SOCIALIZE_CONSUMER_KEY);
  final String consumerSecret=SocializeUI.getInstance().getGlobalConfigValue(getContext(),SocializeConfig.SOCIALIZE_CONSUMER_SECRET);
  button.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      final String text=editText.getText().toString();
      if (!StringUtils.isEmpty(text)) {
        imm.hideSoftInputFromWindow(editText.getWindowToken(),0);
        if (!Socialize.getSocialize().isAuthenticated()) {
          Socialize.getSocialize().authenticate(consumerKey,consumerSecret,new SocializeAuthListener(){
            @Override public void onError(            SocializeException error){
              showError(context,error.getMessage());
            }
            @Override public void onAuthSuccess(            SocializeSession session){
              doPostComment(text);
            }
            @Override public void onAuthFail(            SocializeException error){
              showError(context,error.getMessage());
            }
          }
);
        }
 else {
          doPostComment(text);
        }
      }
    }
  }
);
  editPanel.addView(editText);
  editPanel.addView(button);
  LinearLayout contentView=new LinearLayout(context);
  LayoutParams contentViewLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentViewLayoutParams.weight=1.0f;
  contentView.setLayoutParams(contentViewLayoutParams);
  contentView.setOrientation(LinearLayout.VERTICAL);
  LayoutParams listViewLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  listViewLayoutParams.weight=1.0f;
  listView=new ListView(context);
  listView.setAdapter(provider);
  listView.setLayoutParams(listViewLayoutParams);
  listView.setDrawingCacheEnabled(true);
  listView.setCacheColorHint(0);
  listView.setDividerHeight(2);
  listView.setSmoothScrollbarEnabled(true);
  listView.setOnScrollListener(new OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView view,    int scrollState){
    }
    @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      int lastInScreen=firstVisibleItem + visibleItemCount;
      boolean last=(lastInScreen == totalItemCount);
      if (last && !loading) {
        getNextSet();
      }
    }
  }
);
  listView.requestFocus();
  contentView.addView(listView);
  flipper=new ViewFlipper(context);
  LayoutParams flipperLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
  flipperLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  flipper.setLayoutParams(flipperLayoutParams);
  FrameLayout loadingScreen=new FrameLayout(context);
  FrameLayout.LayoutParams loadingScreenLayoutParams=new FrameLayout.LayoutParams(FrameLayout.LayoutParams.FILL_PARENT,FrameLayout.LayoutParams.FILL_PARENT);
  FrameLayout.LayoutParams progressLayoutParams=new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,FrameLayout.LayoutParams.WRAP_CONTENT);
  loadingScreenLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  progressLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  loadingScreen.setLayoutParams(loadingScreenLayoutParams);
  ProgressBar progress=new ProgressBar(context,null,android.R.attr.progressBarStyleSmall);
  progress.setLayoutParams(progressLayoutParams);
  loadingScreen.addView(progress);
  flipper.addView(loadingScreen);
  flipper.addView(contentView);
  flipper.setDisplayedChild(0);
  addView(titlePanel);
  addView(editPanel);
  addView(flipper);
}",0.9368210762891748
177892,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (!Socialize.getSocialize().isInitialized()) {
    Socialize.init(this);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Socialize.init(this);
}",0.8143322475570033
177893,"/** 
 * Returns true if this SocializeService instance has been initialized.
 * @return
 */
public boolean isInitialized();","/** 
 * Returns true if this SocializeService instance has been initialized.
 * @return
 * @deprecated init should always be called! 
 */
@Deprecated public boolean isInitialized();",0.8092105263157895
177894,"private IOCContainer initInternal(Context context,String... paths) throws Exception {
  boolean init=false;
  if (isInitialized()) {
    for (    String path : paths) {
      if (Arrays.binarySearch(initPaths,path) < 0) {
        if (logger != null) {
          logger.info(""String_Node_Str"" + path + ""String_Node_Str"");
        }
        this.initCount=0;
        destroy();
        init=true;
        break;
      }
    }
  }
 else {
    init=true;
  }
  if (init) {
    try {
      initPaths=paths;
      Arrays.sort(initPaths);
      SocializeIOC container=new SocializeIOC();
      ResourceLocator locator=new ResourceLocator();
      ClassLoaderProvider provider=new ClassLoaderProvider();
      locator.setClassLoaderProvider(provider);
      container.init(context,locator,paths);
      init(context,container);
    }
 catch (    Exception e) {
      throw e;
    }
  }
 else {
    this.initCount++;
  }
  return container;
}","private IOCContainer initInternal(Context context,String... paths) throws Exception {
  boolean init=false;
  if (isInitialized()) {
    for (    String path : paths) {
      if (Arrays.binarySearch(initPaths,path) < 0) {
        if (logger != null) {
          logger.info(""String_Node_Str"" + path + ""String_Node_Str"");
        }
        this.initCount=0;
        destroy();
        init=true;
        break;
      }
    }
  }
 else {
    init=true;
  }
  if (init) {
    try {
      initPaths=paths;
      Arrays.sort(initPaths);
      SocializeIOC container=new SocializeIOC();
      ResourceLocator locator=new ResourceLocator();
      ClassLoaderProvider provider=new ClassLoaderProvider();
      locator.setClassLoaderProvider(provider);
      container.init(context,locator,paths);
      init(context,container);
    }
 catch (    Exception e) {
      throw e;
    }
  }
 else {
    this.initCount++;
  }
  if (container != null) {
    container.setContext(context);
  }
  return container;
}",0.9472049689440992
177895,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  service.onActivityResult(requestCode,resultCode,data);
  finish();
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  service.onActivityResult(requestCode,resultCode,data);
}",0.9704433497536946
177896,"@Override public void onPageFinished(WebView view,String url){
  super.onPageFinished(view,url);
  String title=mWebView.getTitle();
  if (title != null && title.length() > 0) {
    mTitle.setText(title);
  }
  mSpinner.dismiss();
}","@Override public void onPageFinished(WebView view,String url){
  super.onPageFinished(view,url);
  String title=mWebView.getTitle();
  if (title != null && title.length() > 0) {
    mTitle.setText(title);
  }
  try {
    mSpinner.dismiss();
  }
 catch (  Exception ignore) {
  }
}",0.90234375
177897,"@Override public void onError(SocializeException error){
  onAfterAuthenticate();
  showError(context,error.getMessage());
  error.printStackTrace();
}","@Override public void onError(SocializeException error){
  onAfterAuthenticate();
  showError(getContext(),error.getMessage());
  error.printStackTrace();
}",0.977198697068404
177898,"@Override public void onAuthFail(SocializeException error){
  onAfterAuthenticate();
  showError(context,error.getMessage());
  error.printStackTrace();
}","@Override public void onAuthFail(SocializeException error){
  onAfterAuthenticate();
  showError(getContext(),error.getMessage());
  error.printStackTrace();
}",0.977635782747604
177899,"@Override protected void initSocialize(){
  SocializeUI.getInstance().initSocialize(context);
}","@Override protected void initSocialize(){
  SocializeUI.getInstance().initSocialize(getContext());
}",0.964102564102564
177900,"protected Bundle getBundle(){
  Bundle bundle=null;
  if (context instanceof Activity) {
    Activity a=(Activity)context;
    bundle=a.getIntent().getExtras();
  }
  return bundle;
}","protected Bundle getBundle(){
  Bundle bundle=null;
  Context context=getContext();
  if (context instanceof Activity) {
    Activity a=(Activity)context;
    bundle=a.getIntent().getExtras();
  }
  return bundle;
}",0.9195979899497488
177901,"/** 
 * Sets the credentials for your Socialize App.
 * @param context The current activity
 * @param consumerKey Your consumer key, obtained via registration at http://getsocialize.com
 * @param consumerSecret Your consumer secret, obtained via registration at http://getsocialize.com
 */
public void setAppCredentials(Context context,String consumerKey,String consumerSecret){
  if (!Socialize.getSocialize().isInitialized()) {
    initSocialize(context);
  }
  Socialize.getSocialize().getConfig().setProperty(SocializeConfig.SOCIALIZE_CONSUMER_KEY,consumerKey);
  Socialize.getSocialize().getConfig().setProperty(SocializeConfig.SOCIALIZE_CONSUMER_SECRET,consumerSecret);
}","/** 
 * Sets the credentials for your Socialize App.
 * @param context The current activity
 * @param consumerKey Your consumer key, obtained via registration at http://getsocialize.com
 * @param consumerSecret Your consumer secret, obtained via registration at http://getsocialize.com
 */
public void setAppCredentials(Context context,String consumerKey,String consumerSecret){
  assertSocializeInitialized(context);
  Socialize.getSocialize().getConfig().setProperty(SocializeConfig.SOCIALIZE_CONSUMER_KEY,consumerKey);
  Socialize.getSocialize().getConfig().setProperty(SocializeConfig.SOCIALIZE_CONSUMER_SECRET,consumerSecret);
}",0.9435114503816794
177902,"/** 
 * Sets the Facebook ID for FB authentication.   This is optional.  If not specified the default Socialize FB app will be used.
 * @param context
 * @param appId Your Facebook App Id, obtained from https://developers.facebook.com/
 * @see https://developers.facebook.com/
 */
public void setFacebookAppId(Context context,String appId){
  if (!Socialize.getSocialize().isInitialized()) {
    initSocialize(context);
  }
  Socialize.getSocialize().getConfig().setProperty(SocializeConfig.FACEBOOK_APP_ID,appId);
}","/** 
 * Sets the Facebook ID for FB authentication.   This is optional.  If not specified the default Socialize FB app will be used.
 * @param context
 * @param appId Your Facebook App Id, obtained from https://developers.facebook.com/
 * @see https://developers.facebook.com/
 */
public void setFacebookAppId(Context context,String appId){
  assertSocializeInitialized(context);
  Socialize.getSocialize().getConfig().setProperty(SocializeConfig.FACEBOOK_APP_ID,appId);
}",0.902834008097166
177903,"/** 
 * Sets the FB credentials for the current user if available.
 * @param context The current activity
 * @param userId
 * @param token
 */
public void setFacebookUserCredentials(Activity context,String userId,String token){
  if (!Socialize.getSocialize().isInitialized()) {
    initSocialize(context);
  }
  Socialize.getSocialize().getConfig().setProperty(SocializeConfig.FACEBOOK_USER_ID,userId);
  Socialize.getSocialize().getConfig().setProperty(SocializeConfig.FACEBOOK_USER_TOKEN,token);
}","/** 
 * Sets the FB credentials for the current user if available.
 * @param context The current activity
 * @param userId
 * @param token
 */
public void setFacebookUserCredentials(Activity context,String userId,String token){
  assertSocializeInitialized(context);
  Socialize.getSocialize().getConfig().setProperty(SocializeConfig.FACEBOOK_USER_ID,userId);
  Socialize.getSocialize().getConfig().setProperty(SocializeConfig.FACEBOOK_USER_TOKEN,token);
}",0.9225941422594144
177904,"public SocializeView(Context context){
  super(context);
  this.context=context;
}","public SocializeView(Context context){
  super(context);
}",0.8285714285714286
177905,"public ProgressDialog show(Context context,String title,String message){
  try {
    ProgressDialog dialog=new ProgressDialog(context);
    dialog.setTitle(""String_Node_Str"");
    dialog.setMessage(""String_Node_Str"");
    dialog.show();
    return dialog;
  }
 catch (  Exception e) {
    if (logger != null) {
      logger.error(""String_Node_Str"",e);
    }
 else {
      e.printStackTrace();
    }
    return null;
  }
}","public ProgressDialog show(Context context,String title,String message){
  try {
    if (context instanceof Activity) {
      Activity activity=(Activity)context;
      while (activity.getParent() != null) {
        activity=activity.getParent();
      }
      context=activity;
    }
    ProgressDialog dialog=new ProgressDialog(context);
    dialog.setTitle(""String_Node_Str"");
    dialog.setMessage(""String_Node_Str"");
    dialog.show();
    return dialog;
  }
 catch (  Exception e) {
    if (logger != null) {
      logger.error(""String_Node_Str"",e);
    }
 else {
      e.printStackTrace();
    }
    return null;
  }
}",0.8049713193116634
177906,"@Override protected void onBeforeSocializeInit(){
  progress=ProgressDialog.show(context,""String_Node_Str"",""String_Node_Str"");
}","@Override protected void onBeforeSocializeInit(){
  progress=ProgressDialog.show(getContext(),""String_Node_Str"",""String_Node_Str"");
}",0.9731800766283524
177907,"public CommentListView(final Context context,final SocializeCommentProvider provider,final DeviceUtils deviceUtils,final String entityKey){
  super(context);
  this.context=context;
  this.provider=provider;
  this.entityKey=entityKey;
  int four=deviceUtils.getDIP(4);
  imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);
  LayoutParams fill=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
  setOrientation(LinearLayout.VERTICAL);
  setLayoutParams(fill);
  setBackgroundColor(SocializeUI.STANDARD_BACKGROUND_COLOR);
  LinearLayout editPanel=new LinearLayout(context);
  LayoutParams editPanelLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  editPanelLayoutParams.setMargins(four,four,four,four);
  editPanel.setLayoutParams(editPanelLayoutParams);
  editPanel.setOrientation(LinearLayout.HORIZONTAL);
  LinearLayout.LayoutParams editTextLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  editTextLayoutParams.gravity=Gravity.TOP;
  editTextLayoutParams.weight=1.0f;
  editTextLayoutParams.setMargins(0,0,four,0);
  editText=new EditText(context);
  editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
  editText.setMinLines(1);
  editText.setMaxLines(5);
  editText.setRawInputType(InputType.TYPE_TEXT_FLAG_MULTI_LINE);
  editText.setGravity(Gravity.TOP);
  editText.setVerticalScrollBarEnabled(true);
  editText.setVerticalFadingEdgeEnabled(true);
  editText.setTextSize(TypedValue.COMPLEX_UNIT_DIP,14);
  editText.setBackgroundColor(Color.WHITE);
  editText.setHint(""String_Node_Str"");
  editText.setLayoutParams(editTextLayoutParams);
  button=new SocializeButton(context,deviceUtils);
  button.setText(""String_Node_Str"");
  button.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      final String text=editText.getText().toString();
      if (!StringUtils.isEmpty(text)) {
        imm.hideSoftInputFromWindow(editText.getWindowToken(),0);
        if (!Socialize.getSocialize().isAuthenticated(AuthProviderType.FACEBOOK)) {
          Socialize.getSocialize().authenticate(Socialize.getSocialize().getConfig().getProperty(SocializeConfig.SOCIALIZE_CONSUMER_KEY),Socialize.getSocialize().getConfig().getProperty(SocializeConfig.SOCIALIZE_CONSUMER_SECRET),AuthProviderType.FACEBOOK,Socialize.getSocialize().getConfig().getProperty(SocializeConfig.FACEBOOK_APP_ID),new SocializeAuthListener(){
            @Override public void onError(            SocializeException error){
              showError(context,error.getMessage());
            }
            @Override public void onAuthSuccess(            SocializeSession session){
              doPostComment(text);
            }
            @Override public void onAuthFail(            SocializeException error){
              showError(context,error.getMessage());
            }
          }
);
        }
 else {
          doPostComment(text);
        }
      }
    }
  }
);
  editPanel.addView(editText);
  editPanel.addView(button);
  LinearLayout contentView=new LinearLayout(context);
  LayoutParams contentViewLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentViewLayoutParams.weight=1.0f;
  contentView.setLayoutParams(contentViewLayoutParams);
  contentView.setOrientation(LinearLayout.VERTICAL);
  LayoutParams listViewLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  listViewLayoutParams.weight=1.0f;
  listView=new ListView(context);
  listView.setAdapter(provider);
  listView.setLayoutParams(listViewLayoutParams);
  listView.setDrawingCacheEnabled(true);
  listView.setOnScrollListener(new OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView view,    int scrollState){
    }
    @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      int lastInScreen=firstVisibleItem + visibleItemCount;
      boolean last=(lastInScreen == totalItemCount);
      if (last && !loading) {
        loading=true;
        getNextSet();
      }
    }
  }
);
  listView.requestFocus();
  contentView.addView(listView);
  flipper=new ViewFlipper(context);
  LayoutParams flipperLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
  flipperLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  flipper.setLayoutParams(flipperLayoutParams);
  FrameLayout loadingScreen=new FrameLayout(context);
  FrameLayout.LayoutParams loadingScreenLayoutParams=new FrameLayout.LayoutParams(FrameLayout.LayoutParams.FILL_PARENT,FrameLayout.LayoutParams.FILL_PARENT);
  FrameLayout.LayoutParams progressLayoutParams=new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,FrameLayout.LayoutParams.WRAP_CONTENT);
  loadingScreenLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  progressLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  loadingScreen.setLayoutParams(loadingScreenLayoutParams);
  ProgressBar progress=new ProgressBar(context,null,android.R.attr.progressBarStyleLarge);
  progress.setLayoutParams(progressLayoutParams);
  loadingScreen.addView(progress);
  flipper.addView(loadingScreen);
  flipper.addView(contentView);
  flipper.setDisplayedChild(0);
  addView(editPanel);
  addView(flipper);
}","public CommentListView(final Context context,final SocializeCommentProvider provider,final DeviceUtils deviceUtils,final String entityKey){
  super(context);
  this.provider=provider;
  this.entityKey=entityKey;
  int four=deviceUtils.getDIP(4);
  imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);
  LayoutParams fill=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
  setOrientation(LinearLayout.VERTICAL);
  setLayoutParams(fill);
  setBackgroundColor(SocializeUI.STANDARD_BACKGROUND_COLOR);
  LinearLayout editPanel=new LinearLayout(context);
  LayoutParams editPanelLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  editPanelLayoutParams.setMargins(four,four,four,four);
  editPanel.setLayoutParams(editPanelLayoutParams);
  editPanel.setOrientation(LinearLayout.HORIZONTAL);
  LinearLayout.LayoutParams editTextLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  editTextLayoutParams.gravity=Gravity.TOP;
  editTextLayoutParams.weight=1.0f;
  editTextLayoutParams.setMargins(0,0,four,0);
  editText=new EditText(context);
  editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
  editText.setMinLines(1);
  editText.setMaxLines(5);
  editText.setRawInputType(InputType.TYPE_TEXT_FLAG_MULTI_LINE);
  editText.setGravity(Gravity.TOP);
  editText.setVerticalScrollBarEnabled(true);
  editText.setVerticalFadingEdgeEnabled(true);
  editText.setTextSize(TypedValue.COMPLEX_UNIT_DIP,14);
  editText.setBackgroundColor(Color.WHITE);
  editText.setHint(""String_Node_Str"");
  editText.setLayoutParams(editTextLayoutParams);
  button=new SocializeButton(context,deviceUtils);
  button.setText(""String_Node_Str"");
  button.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      final String text=editText.getText().toString();
      if (!StringUtils.isEmpty(text)) {
        imm.hideSoftInputFromWindow(editText.getWindowToken(),0);
        if (!Socialize.getSocialize().isAuthenticated(AuthProviderType.FACEBOOK)) {
          Socialize.getSocialize().authenticate(Socialize.getSocialize().getConfig().getProperty(SocializeConfig.SOCIALIZE_CONSUMER_KEY),Socialize.getSocialize().getConfig().getProperty(SocializeConfig.SOCIALIZE_CONSUMER_SECRET),AuthProviderType.FACEBOOK,Socialize.getSocialize().getConfig().getProperty(SocializeConfig.FACEBOOK_APP_ID),new SocializeAuthListener(){
            @Override public void onError(            SocializeException error){
              showError(context,error.getMessage());
            }
            @Override public void onAuthSuccess(            SocializeSession session){
              doPostComment(text);
            }
            @Override public void onAuthFail(            SocializeException error){
              showError(context,error.getMessage());
            }
          }
);
        }
 else {
          doPostComment(text);
        }
      }
    }
  }
);
  editPanel.addView(editText);
  editPanel.addView(button);
  LinearLayout contentView=new LinearLayout(context);
  LayoutParams contentViewLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  contentViewLayoutParams.weight=1.0f;
  contentView.setLayoutParams(contentViewLayoutParams);
  contentView.setOrientation(LinearLayout.VERTICAL);
  LayoutParams listViewLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  listViewLayoutParams.weight=1.0f;
  listView=new ListView(context);
  listView.setAdapter(provider);
  listView.setLayoutParams(listViewLayoutParams);
  listView.setDrawingCacheEnabled(true);
  listView.setOnScrollListener(new OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView view,    int scrollState){
    }
    @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      int lastInScreen=firstVisibleItem + visibleItemCount;
      boolean last=(lastInScreen == totalItemCount);
      if (last && !loading) {
        loading=true;
        getNextSet();
      }
    }
  }
);
  listView.requestFocus();
  contentView.addView(listView);
  flipper=new ViewFlipper(context);
  LayoutParams flipperLayoutParams=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.FILL_PARENT);
  flipperLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  flipper.setLayoutParams(flipperLayoutParams);
  FrameLayout loadingScreen=new FrameLayout(context);
  FrameLayout.LayoutParams loadingScreenLayoutParams=new FrameLayout.LayoutParams(FrameLayout.LayoutParams.FILL_PARENT,FrameLayout.LayoutParams.FILL_PARENT);
  FrameLayout.LayoutParams progressLayoutParams=new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,FrameLayout.LayoutParams.WRAP_CONTENT);
  loadingScreenLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  progressLayoutParams.gravity=Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;
  loadingScreen.setLayoutParams(loadingScreenLayoutParams);
  ProgressBar progress=new ProgressBar(context,null,android.R.attr.progressBarStyleLarge);
  progress.setLayoutParams(progressLayoutParams);
  loadingScreen.addView(progress);
  flipper.addView(loadingScreen);
  flipper.addView(contentView);
  flipper.setDisplayedChild(0);
  addView(editPanel);
  addView(flipper);
}",0.99786438868126
177908,"public void doPostComment(String comment){
  dialog=progressDialogFactory.show(context,""String_Node_Str"",""String_Node_Str"");
  Socialize.getSocialize().addComment(entityKey,comment,new CommentAddListener(){
    @Override public void onError(    SocializeException error){
      showError(getContext(),error.getMessage());
      dialog.dismiss();
    }
    @Override public void onCreate(    Comment entity){
      doListComments();
    }
  }
);
}","public void doPostComment(String comment){
  dialog=progressDialogFactory.show(getContext(),""String_Node_Str"",""String_Node_Str"");
  Socialize.getSocialize().addComment(entityKey,comment,new CommentAddListener(){
    @Override public void onError(    SocializeException error){
      showError(getContext(),error.getMessage());
      dialog.dismiss();
    }
    @Override public void onCreate(    Comment entity){
      doListComments();
    }
  }
);
}",0.992196209587514
177909,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  if (Socialize.getSocialize().isInitialized()) {
    if (Socialize.getSocialize().isAuthenticated()) {
      doListComments();
    }
 else {
      showError(getContext(),""String_Node_Str"");
      flipper.setDisplayedChild(1);
    }
  }
 else {
    showError(getContext(),""String_Node_Str"");
    flipper.setDisplayedChild(1);
  }
}","@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  if (Socialize.getSocialize().isAuthenticated()) {
    doListComments();
  }
 else {
    showError(getContext(),""String_Node_Str"");
    flipper.setDisplayedChild(1);
  }
}",0.7579908675799086
177910,"public void getAllComments(SocializeSession session,String key,CommentListener listener){
  super.listAsync(session,endpoint,key,listener);
}","public void getAllComments(SocializeSession session,String key,CommentListener listener){
  super.listAsync(session,ENDPOINT,key,listener);
}",0.9432624113475178
177911,"public void addComment(SocializeSession session,String key,String comment,CommentListener listener){
  Comment c=new Comment();
  c.setText(comment);
  super.putAsync(session,endpoint,c,listener);
}","public void addComment(SocializeSession session,String key,String comment,CommentListener listener){
  Comment c=new Comment();
  c.setText(comment);
  super.putAsync(session,ENDPOINT,c,listener);
}",0.9595959595959596
177912,"@UsesMocks({SocializeObjectFactory.class,JSONObject.class}) public void testToJSON() throws JSONException {
  AndroidMock.expect(factoryService.getFactoryFor(Application.class)).andReturn(appFactoryMock);
  AndroidMock.expect(factoryService.getFactoryFor(User.class)).andReturn(userFactoryMock);
  AndroidMock.expect(factoryService.getFactoryFor(Entity.class)).andReturn(entityFactoryMock);
  AndroidMock.expect(appFactoryMock.toJSON(this.application)).andReturn(jsonApplication);
  AndroidMock.expect(userFactoryMock.toJSON(this.user)).andReturn(jsonUser);
  AndroidMock.expect(entityFactoryMock.toJSON(this.entity)).andReturn(jsonEntity);
  AndroidMock.expect(json.put(""String_Node_Str"",jsonApplication)).andReturn(json);
  AndroidMock.expect(json.put(""String_Node_Str"",jsonUser)).andReturn(json);
  AndroidMock.expect(json.put(""String_Node_Str"",jsonEntity)).andReturn(json);
  AndroidMock.expect(json.put(""String_Node_Str"",id)).andReturn(json);
  AndroidMock.expect(json.put(""String_Node_Str"",lat)).andReturn(json);
  AndroidMock.expect(json.put(""String_Node_Str"",lon)).andReturn(json);
  AndroidMock.expect(json.put(""String_Node_Str"",SocializeObjectFactory.UTC_FORMAT.format(date))).andReturn(json);
  AndroidMock.expect(action.getId()).andReturn(id);
  AndroidMock.expect(action.getApplication()).andReturn(application);
  AndroidMock.expect(action.getUser()).andReturn(user);
  AndroidMock.expect(action.getEntity()).andReturn(entity);
  AndroidMock.expect(action.getLat()).andReturn(lat);
  AndroidMock.expect(action.getLon()).andReturn(lon);
  AndroidMock.expect(action.getDate()).andReturn(date);
  AndroidMock.replay(jsonApplication);
  AndroidMock.replay(jsonUser);
  AndroidMock.replay(jsonEntity);
  AndroidMock.replay(factoryService);
  AndroidMock.replay(appFactoryMock);
  AndroidMock.replay(userFactoryMock);
  AndroidMock.replay(entityFactoryMock);
  AndroidMock.replay(json);
  setupToJSONExpectations();
  factory.toJSON(action);
  doToJSONVerify();
}","@UsesMocks({SocializeObjectFactory.class,JSONObject.class}) public void testToJSON() throws JSONException {
  AndroidMock.expect(factoryService.getFactoryFor(Application.class)).andReturn(appFactoryMock);
  AndroidMock.expect(factoryService.getFactoryFor(User.class)).andReturn(userFactoryMock);
  AndroidMock.expect(factoryService.getFactoryFor(Entity.class)).andReturn(entityFactoryMock);
  AndroidMock.expect(appFactoryMock.toJSON(this.application)).andReturn(jsonApplication);
  AndroidMock.expect(userFactoryMock.toJSON(this.user)).andReturn(jsonUser);
  AndroidMock.expect(entityFactoryMock.toJSON(this.entity)).andReturn(jsonEntity);
  AndroidMock.expect(json.put(""String_Node_Str"",jsonApplication)).andReturn(json);
  AndroidMock.expect(json.put(""String_Node_Str"",jsonUser)).andReturn(json);
  AndroidMock.expect(json.put(""String_Node_Str"",jsonEntity)).andReturn(json);
  AndroidMock.expect(json.put(""String_Node_Str"",id)).andReturn(json);
  AndroidMock.expect(json.put(""String_Node_Str"",lat)).andReturn(json);
  AndroidMock.expect(json.put(""String_Node_Str"",lon)).andReturn(json);
  AndroidMock.expect(json.put(""String_Node_Str"",UTC_FORMAT.format(date))).andReturn(json);
  AndroidMock.expect(action.getId()).andReturn(id);
  AndroidMock.expect(action.getApplication()).andReturn(application);
  AndroidMock.expect(action.getUser()).andReturn(user);
  AndroidMock.expect(action.getEntity()).andReturn(entity);
  AndroidMock.expect(action.getLat()).andReturn(lat);
  AndroidMock.expect(action.getLon()).andReturn(lon);
  AndroidMock.expect(action.getDate()).andReturn(date);
  AndroidMock.replay(jsonApplication);
  AndroidMock.replay(jsonUser);
  AndroidMock.replay(jsonEntity);
  AndroidMock.replay(factoryService);
  AndroidMock.replay(appFactoryMock);
  AndroidMock.replay(userFactoryMock);
  AndroidMock.replay(entityFactoryMock);
  AndroidMock.replay(json);
  setupToJSONExpectations();
  factory.toJSON(action);
  doToJSONVerify();
}",0.9941311559071192
177913,"public void testFromJSON() throws JSONException, ParseException {
  AndroidMock.expect(factoryService.getFactoryFor(Application.class)).andReturn(appFactoryMock);
  AndroidMock.expect(factoryService.getFactoryFor(User.class)).andReturn(userFactoryMock);
  AndroidMock.expect(factoryService.getFactoryFor(Entity.class)).andReturn(entityFactoryMock);
  AndroidMock.expect(appFactoryMock.fromJSON(json)).andReturn(application);
  AndroidMock.expect(userFactoryMock.fromJSON(json)).andReturn(user);
  AndroidMock.expect(entityFactoryMock.fromJSON(json)).andReturn(entity);
  action.setApplication(application);
  action.setUser(user);
  action.setEntity(entity);
  AndroidMock.expect((float)json.getDouble(""String_Node_Str"")).andReturn(lat);
  AndroidMock.expect((float)json.getDouble(""String_Node_Str"")).andReturn(lon);
  AndroidMock.expect(json.getString(""String_Node_Str"")).andReturn(SocializeObjectFactory.UTC_FORMAT.format(date));
  AndroidMock.replay(factoryService);
  AndroidMock.replay(appFactoryMock);
  AndroidMock.replay(userFactoryMock);
  AndroidMock.replay(entityFactoryMock);
  setupFromJSONExpectations();
  factory.fromJSON(json);
  doFromJSONVerify();
}","public void testFromJSON() throws JSONException, ParseException {
  AndroidMock.expect(factoryService.getFactoryFor(Application.class)).andReturn(appFactoryMock);
  AndroidMock.expect(factoryService.getFactoryFor(User.class)).andReturn(userFactoryMock);
  AndroidMock.expect(factoryService.getFactoryFor(Entity.class)).andReturn(entityFactoryMock);
  AndroidMock.expect(appFactoryMock.fromJSON(json)).andReturn(application);
  AndroidMock.expect(userFactoryMock.fromJSON(json)).andReturn(user);
  AndroidMock.expect(entityFactoryMock.fromJSON(json)).andReturn(entity);
  action.setApplication(application);
  action.setUser(user);
  action.setEntity(entity);
  AndroidMock.expect((float)json.getDouble(""String_Node_Str"")).andReturn(lat);
  AndroidMock.expect((float)json.getDouble(""String_Node_Str"")).andReturn(lon);
  AndroidMock.expect(json.getString(""String_Node_Str"")).andReturn(UTC_FORMAT.format(date));
  AndroidMock.replay(factoryService);
  AndroidMock.replay(appFactoryMock);
  AndroidMock.replay(userFactoryMock);
  AndroidMock.replay(entityFactoryMock);
  setupFromJSONExpectations();
  factory.fromJSON(json);
  doFromJSONVerify();
}",0.9900562040639862
177914,"/** 
 * It returns a   {@link Calendar} objects complying with Java bean validationannotations. {@inheritDoc}
 */
public Object getValue(Class<?> attrType,List<Annotation> annotations) throws PodamMockeryException {
  if (null != findTypeFromList(annotations,AssertTrue.class)) {
    return Boolean.TRUE;
  }
  if (null != findTypeFromList(annotations,AssertFalse.class)) {
    return Boolean.FALSE;
  }
  if (null != findTypeFromList(annotations,Past.class)) {
    int days=PodamUtils.getIntegerInRange(1,365);
    long timestamp=System.currentTimeMillis() - TimeUnit.DAYS.toSeconds(days);
    return timestampToReturnType(timestamp);
  }
  if (null != findTypeFromList(annotations,Future.class)) {
    int days=PodamUtils.getIntegerInRange(1,365);
    long timestamp=System.currentTimeMillis() + TimeUnit.DAYS.toSeconds(days);
    return timestampToReturnType(timestamp);
  }
  Size size=findTypeFromList(annotations,Size.class);
  if (null != size) {
    int minValue=size.min();
    int maxValue=size.max();
    if (maxValue == Integer.MAX_VALUE) {
      maxValue=PodamConstants.STR_DEFAULT_LENGTH;
    }
    long length=PodamUtils.getLongInRange(minValue,maxValue);
    StringBuilder sb=new StringBuilder();
    while (sb.length() < length) {
      sb.append(PodamUtils.getNiceCharacter());
    }
    return sb.toString();
  }
  Pattern pattern=findTypeFromList(annotations,Pattern.class);
  if (null != pattern) {
    LOG.warn(""String_Node_Str"" + ""String_Node_Str"",pattern.regexp());
    return null;
  }
  boolean isRound=false;
  boolean isFloat=false;
  BigDecimal min=new BigDecimal(-Double.MAX_VALUE);
  BigDecimal max=new BigDecimal(Double.MAX_VALUE);
  DecimalMin decimalMin=findTypeFromList(annotations,DecimalMin.class);
  if (null != decimalMin) {
    isFloat=true;
    min=new BigDecimal(decimalMin.value());
  }
  DecimalMax decimalMax=findTypeFromList(annotations,DecimalMax.class);
  if (null != decimalMax) {
    isFloat=true;
    max=new BigDecimal(decimalMax.value());
  }
  Min minAnno=findTypeFromList(annotations,Min.class);
  if (null != minAnno) {
    isRound=true;
    min=new BigDecimal(minAnno.value()).max(min);
  }
  Max maxAnno=findTypeFromList(annotations,Max.class);
  if (null != maxAnno) {
    isRound=true;
    max=new BigDecimal(maxAnno.value()).min(max);
  }
  Digits digits=findTypeFromList(annotations,Digits.class);
  BigDecimal divisor=null;
  if (null != digits) {
    isRound=true;
    divisor=BigDecimal.TEN.pow(digits.fraction());
    BigDecimal limit=BigDecimal.TEN.pow(digits.integer());
    max=limit.min(max).multiply(divisor);
    min=limit.negate().max(min).multiply(divisor);
  }
  if (isRound || isFloat) {
    BigDecimal value=getValueInRange(min,max);
    if (isRound) {
      BigInteger intValue=value.toBigInteger();
      value=new BigDecimal(intValue);
    }
    if (null != divisor) {
      value=value.divide(divisor);
    }
    return decimalToReturnType(value);
  }
  return null;
}","/** 
 * It returns a   {@link Calendar} objects complying with Java bean validationannotations. {@inheritDoc}
 */
public Object getValue(Class<?> attrType,List<Annotation> annotations) throws PodamMockeryException {
  if (null != findTypeFromList(annotations,AssertTrue.class)) {
    return Boolean.TRUE;
  }
  if (null != findTypeFromList(annotations,AssertFalse.class)) {
    return Boolean.FALSE;
  }
  if (null != findTypeFromList(annotations,Past.class)) {
    int days=PodamUtils.getIntegerInRange(1,365);
    long timestamp=System.currentTimeMillis() - TimeUnit.DAYS.toSeconds(days);
    return timestampToReturnType(timestamp);
  }
  if (null != findTypeFromList(annotations,Future.class)) {
    int days=PodamUtils.getIntegerInRange(1,365);
    long timestamp=System.currentTimeMillis() + TimeUnit.DAYS.toSeconds(days);
    return timestampToReturnType(timestamp);
  }
  Size size=findTypeFromList(annotations,Size.class);
  if (null != size) {
    int minValue=size.min();
    int maxValue=size.max();
    if (minValue < 1 && maxValue > 0) {
      minValue=1;
    }
    if (maxValue == Integer.MAX_VALUE) {
      maxValue=PodamConstants.STR_DEFAULT_LENGTH;
    }
    long length=PodamUtils.getLongInRange(minValue,maxValue);
    StringBuilder sb=new StringBuilder();
    while (sb.length() < length) {
      sb.append(PodamUtils.getNiceCharacter());
    }
    return sb.toString();
  }
  Pattern pattern=findTypeFromList(annotations,Pattern.class);
  if (null != pattern) {
    LOG.warn(""String_Node_Str"" + ""String_Node_Str"",pattern.regexp());
    return null;
  }
  boolean isRound=false;
  boolean isFloat=false;
  BigDecimal min=new BigDecimal(-Double.MAX_VALUE);
  BigDecimal max=new BigDecimal(Double.MAX_VALUE);
  DecimalMin decimalMin=findTypeFromList(annotations,DecimalMin.class);
  if (null != decimalMin) {
    isFloat=true;
    min=new BigDecimal(decimalMin.value());
  }
  DecimalMax decimalMax=findTypeFromList(annotations,DecimalMax.class);
  if (null != decimalMax) {
    isFloat=true;
    max=new BigDecimal(decimalMax.value());
  }
  Min minAnno=findTypeFromList(annotations,Min.class);
  if (null != minAnno) {
    isRound=true;
    min=new BigDecimal(minAnno.value()).max(min);
  }
  Max maxAnno=findTypeFromList(annotations,Max.class);
  if (null != maxAnno) {
    isRound=true;
    max=new BigDecimal(maxAnno.value()).min(max);
  }
  Digits digits=findTypeFromList(annotations,Digits.class);
  BigDecimal divisor=null;
  if (null != digits) {
    isRound=true;
    divisor=BigDecimal.TEN.pow(digits.fraction());
    BigDecimal limit=BigDecimal.TEN.pow(digits.integer());
    max=limit.min(max).multiply(divisor);
    min=limit.negate().max(min).multiply(divisor);
  }
  if (isRound || isFloat) {
    BigDecimal value=getValueInRange(min,max);
    if (isRound) {
      BigInteger intValue=value.toBigInteger();
      value=new BigDecimal(intValue);
    }
    if (null != divisor) {
      value=value.divide(divisor);
    }
    return decimalToReturnType(value);
  }
  return null;
}",0.9892653471989266
177915,"/** 
 * It manufactures and returns the value for a POJO attribute.
 * @param pojo The POJO being filled with values
 * @param manufacturingCtx the manufacturing context
 * @param attributeType The type of the attribute for which a value is being manufactured
 * @param genericAttributeType The generic type of the attribute for which a value is being manufactured
 * @param annotations The annotations for the attribute being considered
 * @param attributeName The attribute name
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return The value for an attribute
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws IllegalArgumentException <ul> <li>If an illegal argument was passed</li> <li>If an invalid value was set for a precise value in an annotation and such value could not be converted to the desired type</li> </ul>
 * @throws ClassNotFoundException If class being manufactured cannot be loaded
 */
private Object manufactureAttributeValue(Object pojo,ManufacturingContext manufacturingCtx,Class<?> attributeType,Type genericAttributeType,List<Annotation> annotations,String attributeName,Map<String,Type> typeArgsMap,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Object attributeValue=null;
  Class<?> pojoClass=(pojo instanceof Class ? (Class<?>)pojo : pojo.getClass());
  Class<?> realAttributeType;
  if (attributeType != genericAttributeType && Object.class.equals(attributeType) && genericAttributeType instanceof TypeVariable) {
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
    realAttributeType=TypeManufacturerUtil.resolveGenericParameter(genericAttributeType,typeArgsMap,elementGenericTypeArgs);
  }
 else {
    realAttributeType=attributeType;
  }
  Type[] genericTypeArgsAll=TypeManufacturerUtil.mergeActualAndSuppliedGenericTypes(attributeType,genericAttributeType,genericTypeArgs,typeArgsMap);
  AttributeMetadata attributeMetadata=new AttributeMetadata(attributeName,realAttributeType,genericAttributeType,genericTypeArgsAll,annotations,pojoClass,pojo);
  if (realAttributeType.isArray()) {
    attributeValue=resolveArrayElementValue(pojo,manufacturingCtx,attributeMetadata,typeArgsMap);
  }
 else   if (Collection.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveCollectionValueWhenCollectionIsPojoAttribute(pojo,manufacturingCtx,attributeMetadata,typeArgsMap);
  }
 else   if (Map.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveMapValueWhenMapIsPojoAttribute(pojo,manufacturingCtx,attributeMetadata,typeArgsMap);
  }
  if (attributeValue == null) {
    Integer depth=manufacturingCtx.getPojos().get(realAttributeType);
    if (depth == null) {
      depth=-1;
    }
    if (depth <= strategy.getMaxDepth(pojoClass)) {
      manufacturingCtx.getPojos().put(realAttributeType,depth + 1);
      attributeValue=this.manufacturePojoInternal(realAttributeType,attributeMetadata,manufacturingCtx,genericTypeArgsAll);
      manufacturingCtx.getPojos().put(realAttributeType,depth);
    }
 else {
      attributeValue=resortToExternalFactory(manufacturingCtx,""String_Node_Str"" + depth + ""String_Node_Str"",realAttributeType,genericTypeArgsAll);
    }
  }
  return attributeValue;
}","/** 
 * It manufactures and returns the value for a POJO attribute.
 * @param pojo The POJO being filled with values
 * @param manufacturingCtx the manufacturing context
 * @param attributeType The type of the attribute for which a value is being manufactured
 * @param genericAttributeType The generic type of the attribute for which a value is being manufactured
 * @param annotations The annotations for the attribute being considered
 * @param attributeName The attribute name
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return The value for an attribute
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws IllegalArgumentException <ul> <li>If an illegal argument was passed</li> <li>If an invalid value was set for a precise value in an annotation and such value could not be converted to the desired type</li> </ul>
 * @throws ClassNotFoundException If class being manufactured cannot be loaded
 */
private Object manufactureAttributeValue(Object pojo,ManufacturingContext manufacturingCtx,Class<?> attributeType,Type genericAttributeType,List<Annotation> annotations,String attributeName,Map<String,Type> typeArgsMap,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Object attributeValue=null;
  Class<?> pojoClass=(pojo instanceof Class ? (Class<?>)pojo : pojo.getClass());
  Class<?> realAttributeType;
  if (attributeType != genericAttributeType && Object.class.equals(attributeType) && genericAttributeType instanceof TypeVariable) {
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
    realAttributeType=TypeManufacturerUtil.resolveGenericParameter(genericAttributeType,typeArgsMap,elementGenericTypeArgs);
  }
 else {
    realAttributeType=attributeType;
  }
  Type[] genericTypeArgsAll=TypeManufacturerUtil.mergeActualAndSuppliedGenericTypes(attributeType,genericAttributeType,genericTypeArgs,typeArgsMap);
  AttributeMetadata attributeMetadata=new AttributeMetadata(attributeName,realAttributeType,genericAttributeType,genericTypeArgsAll,annotations,pojoClass,pojo);
  if (realAttributeType.isArray()) {
    attributeValue=resolveArrayElementValue(pojo,manufacturingCtx,attributeMetadata,typeArgsMap);
  }
 else   if (Collection.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveCollectionValueWhenCollectionIsPojoAttribute(pojo,manufacturingCtx,attributeMetadata,typeArgsMap);
  }
 else   if (Map.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveMapValueWhenMapIsPojoAttribute(pojo,manufacturingCtx,attributeMetadata,typeArgsMap);
  }
  if (attributeValue == null) {
    Integer depth=manufacturingCtx.getPojos().get(realAttributeType);
    if (depth == null) {
      depth=0;
    }
    if (depth < strategy.getMaxDepth(pojoClass)) {
      manufacturingCtx.getPojos().put(realAttributeType,depth + 1);
      attributeValue=this.manufacturePojoInternal(realAttributeType,attributeMetadata,manufacturingCtx,genericTypeArgsAll);
      manufacturingCtx.getPojos().put(realAttributeType,depth);
    }
 else {
      attributeValue=resortToExternalFactory(manufacturingCtx,""String_Node_Str"" + depth + ""String_Node_Str"",realAttributeType,genericTypeArgsAll);
    }
  }
  return attributeValue;
}",0.999458434876794
177916,"/** 
 * {@inheritDoc}
 */
@Override public <T>T populatePojo(T pojo,Type... genericTypeArgs){
  ManufacturingContext manufacturingCtx=new ManufacturingContext();
  manufacturingCtx.getPojos().put(pojo.getClass(),0);
  final Map<String,Type> typeArgsMap=new HashMap<String,Type>();
  Type[] genericTypeArgsExtra=TypeManufacturerUtil.fillTypeArgMap(typeArgsMap,pojo.getClass(),genericTypeArgs);
  try {
    List<Annotation> annotations=null;
    return this.populatePojoInternal(pojo,annotations,manufacturingCtx,typeArgsMap,genericTypeArgsExtra);
  }
 catch (  InstantiationException e) {
    throw new PodamMockeryException(e.getMessage(),e);
  }
catch (  IllegalAccessException e) {
    throw new PodamMockeryException(e.getMessage(),e);
  }
catch (  InvocationTargetException e) {
    throw new PodamMockeryException(e.getMessage(),e);
  }
catch (  ClassNotFoundException e) {
    throw new PodamMockeryException(e.getMessage(),e);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public <T>T populatePojo(T pojo,Type... genericTypeArgs){
  ManufacturingContext manufacturingCtx=new ManufacturingContext();
  manufacturingCtx.getPojos().put(pojo.getClass(),1);
  final Map<String,Type> typeArgsMap=new HashMap<String,Type>();
  Type[] genericTypeArgsExtra=TypeManufacturerUtil.fillTypeArgMap(typeArgsMap,pojo.getClass(),genericTypeArgs);
  try {
    List<Annotation> annotations=null;
    return this.populatePojoInternal(pojo,annotations,manufacturingCtx,typeArgsMap,genericTypeArgsExtra);
  }
 catch (  InstantiationException e) {
    throw new PodamMockeryException(e.getMessage(),e);
  }
catch (  IllegalAccessException e) {
    throw new PodamMockeryException(e.getMessage(),e);
  }
catch (  InvocationTargetException e) {
    throw new PodamMockeryException(e.getMessage(),e);
  }
catch (  ClassNotFoundException e) {
    throw new PodamMockeryException(e.getMessage(),e);
  }
}",0.9989350372736954
177917,"/** 
 * {@inheritDoc}
 */
@Override public <T>T manufacturePojoWithFullData(Class<T> pojoClass,Type... genericTypeArgs){
  ManufacturingContext manufacturingCtx=new ManufacturingContext();
  manufacturingCtx.getPojos().put(pojoClass,0);
  manufacturingCtx.setConstructorOrdering(Order.HEAVY_FIRST);
  return doManufacturePojo(pojoClass,manufacturingCtx,genericTypeArgs);
}","/** 
 * {@inheritDoc}
 */
@Override public <T>T manufacturePojoWithFullData(Class<T> pojoClass,Type... genericTypeArgs){
  ManufacturingContext manufacturingCtx=new ManufacturingContext();
  manufacturingCtx.getPojos().put(pojoClass,1);
  manufacturingCtx.setConstructorOrdering(Order.HEAVY_FIRST);
  return doManufacturePojo(pojoClass,manufacturingCtx,genericTypeArgs);
}",0.9973118279569892
177918,"/** 
 * Fills a field with a getter
 * @param < T > The type for which should be populated
 * @param pojo The POJO being filled with values
 * @param attribute a attribute we are filling
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @param manufacturingCtx the manufacturing context
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return true, if attribute was found and populated
 * @throws ClassNotFoundException If class being manufactured cannot be loaded
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 */
private <T>boolean populateReadOnlyField(T pojo,ClassAttribute attribute,Map<String,Type> typeArgsMap,ManufacturingContext manufacturingCtx,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Method getter=PodamUtils.selectLatestMethod(attribute.getGetters());
  if (getter == null) {
    return false;
  }
  if (getter.getGenericParameterTypes().length > 0) {
    LOG.warn(""String_Node_Str"",getter);
    return false;
  }
  if (getter.getReturnType().isPrimitive()) {
    return false;
  }
  Object fieldValue=null;
  try {
    fieldValue=getter.invoke(pojo,PodamConstants.NO_ARGS);
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"",getter);
  }
  if (fieldValue != null) {
    LOG.debug(""String_Node_Str"",getter);
    Type[] genericTypeArgsAll;
    Map<String,Type> paramTypeArgsMap;
    if (getter.getGenericReturnType() instanceof ParameterizedType) {
      paramTypeArgsMap=new HashMap<String,Type>(typeArgsMap);
      ParameterizedType paramType=(ParameterizedType)getter.getGenericReturnType();
      Type[] actualTypes=paramType.getActualTypeArguments();
      TypeManufacturerUtil.fillTypeArgMap(paramTypeArgsMap,getter.getReturnType(),actualTypes);
      genericTypeArgsAll=TypeManufacturerUtil.fillTypeArgMap(paramTypeArgsMap,getter.getReturnType(),genericTypeArgs);
    }
 else {
      paramTypeArgsMap=typeArgsMap;
      genericTypeArgsAll=genericTypeArgs;
    }
    List<Annotation> pojoAttributeAnnotations=PodamUtils.getAttributeAnnotations(attribute.getAttribute(),getter);
    Class<?> fieldClass=fieldValue.getClass();
    Integer depth=manufacturingCtx.getPojos().get(fieldClass);
    if (depth == null) {
      depth=-1;
    }
    if (depth <= strategy.getMaxDepth(fieldClass)) {
      manufacturingCtx.getPojos().put(fieldClass,depth + 1);
      populatePojoInternal(fieldValue,pojoAttributeAnnotations,manufacturingCtx,paramTypeArgsMap,genericTypeArgsAll);
      manufacturingCtx.getPojos().put(fieldClass,depth);
    }
 else {
      LOG.warn(""String_Node_Str"" + depth + ""String_Node_Str"",getter);
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * Fills a field with a getter
 * @param < T > The type for which should be populated
 * @param pojo The POJO being filled with values
 * @param attribute a attribute we are filling
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @param manufacturingCtx the manufacturing context
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return true, if attribute was found and populated
 * @throws ClassNotFoundException If class being manufactured cannot be loaded
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 */
private <T>boolean populateReadOnlyField(T pojo,ClassAttribute attribute,Map<String,Type> typeArgsMap,ManufacturingContext manufacturingCtx,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Method getter=PodamUtils.selectLatestMethod(attribute.getGetters());
  if (getter == null) {
    return false;
  }
  if (getter.getGenericParameterTypes().length > 0) {
    LOG.warn(""String_Node_Str"",getter);
    return false;
  }
  if (getter.getReturnType().isPrimitive()) {
    return false;
  }
  Object fieldValue=null;
  try {
    fieldValue=getter.invoke(pojo,PodamConstants.NO_ARGS);
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"",getter);
  }
  if (fieldValue != null) {
    LOG.debug(""String_Node_Str"",getter);
    Type[] genericTypeArgsAll;
    Map<String,Type> paramTypeArgsMap;
    if (getter.getGenericReturnType() instanceof ParameterizedType) {
      paramTypeArgsMap=new HashMap<String,Type>(typeArgsMap);
      ParameterizedType paramType=(ParameterizedType)getter.getGenericReturnType();
      Type[] actualTypes=paramType.getActualTypeArguments();
      TypeManufacturerUtil.fillTypeArgMap(paramTypeArgsMap,getter.getReturnType(),actualTypes);
      genericTypeArgsAll=TypeManufacturerUtil.fillTypeArgMap(paramTypeArgsMap,getter.getReturnType(),genericTypeArgs);
    }
 else {
      paramTypeArgsMap=typeArgsMap;
      genericTypeArgsAll=genericTypeArgs;
    }
    List<Annotation> pojoAttributeAnnotations=PodamUtils.getAttributeAnnotations(attribute.getAttribute(),getter);
    Class<?> fieldClass=fieldValue.getClass();
    Integer depth=manufacturingCtx.getPojos().get(fieldClass);
    if (depth == null) {
      depth=0;
    }
    if (depth < strategy.getMaxDepth(fieldClass)) {
      manufacturingCtx.getPojos().put(fieldClass,depth + 1);
      populatePojoInternal(fieldValue,pojoAttributeAnnotations,manufacturingCtx,paramTypeArgsMap,genericTypeArgsAll);
      manufacturingCtx.getPojos().put(fieldClass,depth);
    }
 else {
      LOG.warn(""String_Node_Str"" + depth + ""String_Node_Str"",getter);
    }
    return true;
  }
 else {
    return false;
  }
}",0.999340804218853
177919,"/** 
 * {@inheritDoc}
 */
@Override public <T>T manufacturePojo(Class<T> pojoClass,Type... genericTypeArgs){
  ManufacturingContext manufacturingCtx=new ManufacturingContext();
  manufacturingCtx.getPojos().put(pojoClass,0);
  return doManufacturePojo(pojoClass,manufacturingCtx,genericTypeArgs);
}","/** 
 * {@inheritDoc}
 */
@Override public <T>T manufacturePojo(Class<T> pojoClass,Type... genericTypeArgs){
  ManufacturingContext manufacturingCtx=new ManufacturingContext();
  manufacturingCtx.getPojos().put(pojoClass,1);
  return doManufacturePojo(pojoClass,manufacturingCtx,genericTypeArgs);
}",0.9966442953020134
177920,"/** 
 * {@inheritDoc}
 */
@Override public int getMaxDepth(Class<?> type){
  return -1;
}","/** 
 * {@inheritDoc}
 */
@Override public int getMaxDepth(Class<?> type){
  return 1;
}",0.9943502824858758
177921,"private void createPojoWithCircularDependencies(PodamFactory podamFactory) throws Exception {
  Parent parent=podamInvocationSteps.whenIInvokeTheFactoryForClass(Parent.class,podamFactory);
  int depth=0;
  while (null != parent) {
    podamValidationSteps.thePojoMustBeOfTheType(parent,Parent.class);
    Child child=parent.getChild();
    podamValidationSteps.thePojoMustBeOfTheType(child,Child.class);
    parent=child.getParent();
    depth++;
  }
  podamValidationSteps.theIntFieldShouldHaveThePreciseValueOf(depth,podamFactory.getStrategy().getMaxDepth(Parent.class) + 2);
}","private void createPojoWithCircularDependencies(PodamFactory podamFactory) throws Exception {
  Parent parent=podamInvocationSteps.whenIInvokeTheFactoryForClass(Parent.class,podamFactory);
  int depth=0;
  while (null != parent) {
    podamValidationSteps.thePojoMustBeOfTheType(parent,Parent.class);
    Child child=parent.getChild();
    podamValidationSteps.thePojoMustBeOfTheType(child,Child.class);
    parent=child.getParent();
    depth++;
  }
  podamValidationSteps.theIntFieldShouldHaveThePreciseValueOf(depth,podamFactory.getStrategy().getMaxDepth(Parent.class));
}",0.9965337954939342
177922,"public AbstractRandomDataProviderStrategy(int nbrOfCollectionElements){
  this.nbrOfCollectionElements.set(nbrOfCollectionElements);
  TypeManufacturer<?> byteManufacturer=new ByteTypeManufacturerImpl();
  typeManufacturers.put(byte.class,byteManufacturer);
  typeManufacturers.put(Byte.class,byteManufacturer);
  TypeManufacturer<?> booleanManufacturer=new BooleanTypeManufacturerImpl();
  typeManufacturers.put(boolean.class,booleanManufacturer);
  typeManufacturers.put(Boolean.class,booleanManufacturer);
  TypeManufacturer<?> charManufacturer=new CharTypeManufacturerImpl();
  typeManufacturers.put(char.class,charManufacturer);
  typeManufacturers.put(Character.class,charManufacturer);
  TypeManufacturer<?> shortManufacturer=new ShortTypeManufacturerImpl();
  typeManufacturers.put(short.class,shortManufacturer);
  typeManufacturers.put(Short.class,shortManufacturer);
  TypeManufacturer<?> intManufacturer=new IntTypeManufacturerImpl();
  typeManufacturers.put(int.class,intManufacturer);
  typeManufacturers.put(Integer.class,intManufacturer);
  TypeManufacturer<?> longManufacturer=new LongTypeManufacturerImpl();
  typeManufacturers.put(long.class,longManufacturer);
  typeManufacturers.put(Long.class,longManufacturer);
  TypeManufacturer<?> floatManufacturer=new FloatTypeManufacturerImpl();
  typeManufacturers.put(float.class,floatManufacturer);
  typeManufacturers.put(Float.class,floatManufacturer);
  TypeManufacturer<?> doubleManufacturer=new DoubleTypeManufacturerImpl();
  typeManufacturers.put(double.class,doubleManufacturer);
  typeManufacturers.put(Double.class,doubleManufacturer);
  TypeManufacturer<?> stringManufacturer=new StringTypeManufacturerImpl();
  typeManufacturers.put(String.class,stringManufacturer);
  TypeManufacturer<?> enumManufacturer=new EnumTypeManufacturerImpl();
  typeManufacturers.put(Enum.class,enumManufacturer);
  TypeManufacturer<?> typeManufacturer=new TypeTypeManufacturerImpl();
  typeManufacturers.put(Type.class,typeManufacturer);
  TypeManufacturer<?> collectionManufacturer=new CollectionTypeManufacturerImpl();
  typeManufacturers.put(Collection.class,collectionManufacturer);
  TypeManufacturer<?> mapManufacturer=new MapTypeManufacturerImpl();
  typeManufacturers.put(Map.class,mapManufacturer);
  TypeManufacturer<?> arrayManufacturer=new ArrayTypeManufacturerImpl();
  typeManufacturers.put(Cloneable.class,arrayManufacturer);
}","public AbstractRandomDataProviderStrategy(int nbrOfCollectionElements){
  this.nbrOfCollectionElements.set(nbrOfCollectionElements);
  TypeManufacturer<?> byteManufacturer=new ByteTypeManufacturerImpl();
  typeManufacturers.put(byte.class,byteManufacturer);
  typeManufacturers.put(Byte.class,byteManufacturer);
  TypeManufacturer<?> booleanManufacturer=new BooleanTypeManufacturerImpl();
  typeManufacturers.put(boolean.class,booleanManufacturer);
  typeManufacturers.put(Boolean.class,booleanManufacturer);
  TypeManufacturer<?> charManufacturer=new CharTypeManufacturerImpl();
  typeManufacturers.put(char.class,charManufacturer);
  typeManufacturers.put(Character.class,charManufacturer);
  TypeManufacturer<?> shortManufacturer=new ShortTypeManufacturerImpl();
  typeManufacturers.put(short.class,shortManufacturer);
  typeManufacturers.put(Short.class,shortManufacturer);
  TypeManufacturer<?> intManufacturer=new IntTypeManufacturerImpl();
  typeManufacturers.put(int.class,intManufacturer);
  typeManufacturers.put(Integer.class,intManufacturer);
  TypeManufacturer<?> longManufacturer=new LongTypeManufacturerImpl();
  typeManufacturers.put(long.class,longManufacturer);
  typeManufacturers.put(Long.class,longManufacturer);
  TypeManufacturer<?> floatManufacturer=new FloatTypeManufacturerImpl();
  typeManufacturers.put(float.class,floatManufacturer);
  typeManufacturers.put(Float.class,floatManufacturer);
  TypeManufacturer<?> doubleManufacturer=new DoubleTypeManufacturerImpl();
  typeManufacturers.put(double.class,doubleManufacturer);
  typeManufacturers.put(Double.class,doubleManufacturer);
  TypeManufacturer<?> stringManufacturer=new StringTypeManufacturerImpl();
  typeManufacturers.put(String.class,stringManufacturer);
  TypeManufacturer<?> enumManufacturer=new EnumTypeManufacturerImpl();
  typeManufacturers.put(Enum.class,enumManufacturer);
  TypeManufacturer<?> typeManufacturer=new TypeTypeManufacturerImpl();
  typeManufacturers.put(Type.class,typeManufacturer);
  TypeManufacturer<?> collectionManufacturer=new CollectionTypeManufacturerImpl();
  typeManufacturers.put(List.class,collectionManufacturer);
  typeManufacturers.put(Collection.class,collectionManufacturer);
  TypeManufacturer<?> mapManufacturer=new MapTypeManufacturerImpl();
  typeManufacturers.put(Map.class,mapManufacturer);
  TypeManufacturer<?> arrayManufacturer=new ArrayTypeManufacturerImpl();
  typeManufacturers.put(Cloneable.class,arrayManufacturer);
}",0.9876390605686032
177923,"/** 
 * Fills given class filled with values dictated by the strategy
 * @param < T > The type for which should be populated
 * @param pojo An instance to be filled with dummy values
 * @param annotations a list of annotations attached to this POJO defined elsewhere 
 * @param manufacturingCtx the manufacturing context
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return An instance of &lt;T&gt; filled with dummy values
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If manufactured class cannot be loaded
 */
private <T>T populatePojoInternal(T pojo,List<Annotation> annotations,ManufacturingContext manufacturingCtx,Map<String,Type> typeArgsMap,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Class<?> pojoClass=pojo.getClass();
  if (pojo instanceof Collection && ((Collection<?>)pojo).isEmpty()) {
    @SuppressWarnings(""String_Node_Str"") Collection<Object> collection=(Collection<Object>)pojo;
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
    Class<?> elementTypeClass=findInheretedCollectionElementType(collection,manufacturingCtx,elementGenericTypeArgs,typeArgsMap,genericTypeArgs);
    String attributeName=null;
    if (null == annotations) {
      annotations=new ArrayList<Annotation>();
    }
    for (    Annotation annotation : collection.getClass().getAnnotations()) {
      annotations.add(annotation);
    }
    fillCollection(manufacturingCtx,annotations,attributeName,collection,elementTypeClass,elementGenericTypeArgs.get());
  }
 else   if (pojo instanceof Map && ((Map<?,?>)pojo).isEmpty()) {
    @SuppressWarnings(""String_Node_Str"") Map<Object,Object> map=(Map<Object,Object>)pojo;
    MapArguments mapArguments=findInheretedMapElementType(map,manufacturingCtx,typeArgsMap,genericTypeArgs);
    fillMap(mapArguments,manufacturingCtx);
  }
  Class<?>[] parameterTypes=null;
  Class<?> attributeType=null;
  ClassInfo classInfo=classInfoStrategy.getClassInfo(pojo.getClass());
  Set<ClassAttribute> classAttributes=classInfo.getClassAttributes();
  Object setterArg=null;
  Iterator<ClassAttribute> iter=classAttributes.iterator();
  while (iter.hasNext()) {
    ClassAttribute attribute=iter.next();
    Set<Method> setters=attribute.getSetters();
    if (setters.isEmpty()) {
      if (attribute.getGetters().isEmpty()) {
        iter.remove();
      }
      continue;
    }
 else {
      iter.remove();
    }
    Method setter=PodamUtils.selectLatestMethod(setters);
    parameterTypes=setter.getParameterTypes();
    if (parameterTypes.length != 1) {
      LOG.warn(""String_Node_Str"",setter);
      continue;
    }
    attributeType=parameterTypes[0];
    List<Annotation> pojoAttributeAnnotations=PodamUtils.getAttributeAnnotations(attribute.getAttribute(),setter);
    AttributeStrategy<?> attributeStrategy=TypeManufacturerUtil.findAttributeStrategy(strategy,pojoAttributeAnnotations,attributeType);
    if (null != attributeStrategy) {
      setterArg=TypeManufacturerUtil.returnAttributeDataStrategyValue(attributeType,attributeStrategy);
    }
 else {
      AtomicReference<Type[]> typeGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
      Type genericType=setter.getGenericParameterTypes()[0];
      final Type[] typeArguments;
      if (!(genericType instanceof GenericArrayType)) {
        attributeType=TypeManufacturerUtil.resolveGenericParameter(genericType,typeArgsMap,typeGenericTypeArgs);
        typeArguments=typeGenericTypeArgs.get();
      }
 else {
        typeArguments=PodamConstants.NO_TYPES;
      }
      for (int i=0; i < typeArguments.length; i++) {
        if (typeArguments[i] instanceof TypeVariable) {
          Class<?> resolvedType=TypeManufacturerUtil.resolveGenericParameter(typeArguments[i],typeArgsMap,typeGenericTypeArgs);
          if (!Collection.class.isAssignableFrom(resolvedType) && !Map.class.isAssignableFrom(resolvedType)) {
            typeArguments[i]=resolvedType;
          }
        }
      }
      setterArg=manufactureAttributeValue(pojo,manufacturingCtx,attributeType,genericType,pojoAttributeAnnotations,attribute.getName(),typeArgsMap,typeArguments);
    }
    try {
      setter.invoke(pojo,setterArg);
    }
 catch (    IllegalAccessException e) {
      LOG.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",setter.toString());
      setter.setAccessible(true);
      setter.invoke(pojo,setterArg);
    }
  }
  for (  ClassAttribute readOnlyAttribute : classAttributes) {
    Method getter=PodamUtils.selectLatestMethod(readOnlyAttribute.getGetters());
    if (getter != null && !getter.getReturnType().isPrimitive()) {
      if (getter.getGenericParameterTypes().length == 0) {
        Object fieldValue=null;
        try {
          fieldValue=getter.invoke(pojo,PodamConstants.NO_ARGS);
        }
 catch (        Exception e) {
          LOG.debug(""String_Node_Str"",getter);
        }
        if (fieldValue != null) {
          LOG.debug(""String_Node_Str"",getter);
          Type[] genericTypeArgsAll;
          Map<String,Type> paramTypeArgsMap;
          if (getter.getGenericReturnType() instanceof ParameterizedType) {
            paramTypeArgsMap=new HashMap<String,Type>(typeArgsMap);
            ParameterizedType paramType=(ParameterizedType)getter.getGenericReturnType();
            Type[] actualTypes=paramType.getActualTypeArguments();
            TypeManufacturerUtil.fillTypeArgMap(paramTypeArgsMap,getter.getReturnType(),actualTypes);
            genericTypeArgsAll=TypeManufacturerUtil.fillTypeArgMap(paramTypeArgsMap,getter.getReturnType(),genericTypeArgs);
          }
 else {
            paramTypeArgsMap=typeArgsMap;
            genericTypeArgsAll=genericTypeArgs;
          }
          List<Annotation> pojoAttributeAnnotations=PodamUtils.getAttributeAnnotations(readOnlyAttribute.getAttribute(),getter);
          Class<?> fieldClass=fieldValue.getClass();
          Integer depth=manufacturingCtx.getPojos().get(fieldClass);
          if (depth == null) {
            depth=-1;
          }
          if (depth <= strategy.getMaxDepth(fieldClass)) {
            manufacturingCtx.getPojos().put(fieldClass,depth + 1);
            populatePojoInternal(fieldValue,pojoAttributeAnnotations,manufacturingCtx,paramTypeArgsMap,genericTypeArgsAll);
            manufacturingCtx.getPojos().put(fieldClass,depth);
          }
 else {
            LOG.warn(""String_Node_Str"",getter);
          }
        }
      }
 else {
        LOG.warn(""String_Node_Str"",getter);
      }
    }
  }
  Collection<Method> extraMethods=classInfoStrategy.getExtraMethods(pojoClass);
  if (null != extraMethods) {
    for (    Method extraMethod : extraMethods) {
      Object[] args=getParameterValuesForMethod(extraMethod,pojoClass,manufacturingCtx,typeArgsMap,genericTypeArgs);
      extraMethod.invoke(pojo,args);
    }
  }
  return pojo;
}","/** 
 * Fills given class filled with values dictated by the strategy
 * @param < T > The type for which should be populated
 * @param pojo An instance to be filled with dummy values
 * @param annotations a list of annotations attached to this POJO defined elsewhere 
 * @param manufacturingCtx the manufacturing context
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return An instance of &lt;T&gt; filled with dummy values
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If manufactured class cannot be loaded
 */
private <T>T populatePojoInternal(T pojo,List<Annotation> annotations,ManufacturingContext manufacturingCtx,Map<String,Type> typeArgsMap,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Class<?> pojoClass=pojo.getClass();
  if (pojo instanceof Collection && ((Collection<?>)pojo).isEmpty()) {
    @SuppressWarnings(""String_Node_Str"") Collection<Object> collection=(Collection<Object>)pojo;
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
    Class<?> elementTypeClass=findInheretedCollectionElementType(collection,manufacturingCtx,elementGenericTypeArgs,typeArgsMap,genericTypeArgs);
    if (null == annotations) {
      annotations=new ArrayList<Annotation>();
    }
    for (    Annotation annotation : collection.getClass().getAnnotations()) {
      annotations.add(annotation);
    }
    String attributeName=null;
    fillCollection(manufacturingCtx,annotations,attributeName,collection,elementTypeClass,elementGenericTypeArgs.get());
  }
 else   if (pojo instanceof Map && ((Map<?,?>)pojo).isEmpty()) {
    @SuppressWarnings(""String_Node_Str"") Map<Object,Object> map=(Map<Object,Object>)pojo;
    MapArguments mapArguments=findInheretedMapElementType(map,manufacturingCtx,typeArgsMap,genericTypeArgs);
    if (null != annotations) {
      mapArguments.getAnnotations().addAll(annotations);
    }
    fillMap(mapArguments,manufacturingCtx);
  }
  Class<?>[] parameterTypes=null;
  Class<?> attributeType=null;
  ClassInfo classInfo=classInfoStrategy.getClassInfo(pojo.getClass());
  Set<ClassAttribute> classAttributes=classInfo.getClassAttributes();
  Object setterArg=null;
  Iterator<ClassAttribute> iter=classAttributes.iterator();
  while (iter.hasNext()) {
    ClassAttribute attribute=iter.next();
    Set<Method> setters=attribute.getSetters();
    if (setters.isEmpty()) {
      if (attribute.getGetters().isEmpty()) {
        iter.remove();
      }
      continue;
    }
 else {
      iter.remove();
    }
    Method setter=PodamUtils.selectLatestMethod(setters);
    parameterTypes=setter.getParameterTypes();
    if (parameterTypes.length != 1) {
      LOG.warn(""String_Node_Str"",setter);
      continue;
    }
    attributeType=parameterTypes[0];
    List<Annotation> pojoAttributeAnnotations=PodamUtils.getAttributeAnnotations(attribute.getAttribute(),setter);
    AttributeStrategy<?> attributeStrategy=TypeManufacturerUtil.findAttributeStrategy(strategy,pojoAttributeAnnotations,attributeType);
    if (null != attributeStrategy) {
      setterArg=TypeManufacturerUtil.returnAttributeDataStrategyValue(attributeType,attributeStrategy);
    }
 else {
      AtomicReference<Type[]> typeGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
      Type genericType=setter.getGenericParameterTypes()[0];
      final Type[] typeArguments;
      if (!(genericType instanceof GenericArrayType)) {
        attributeType=TypeManufacturerUtil.resolveGenericParameter(genericType,typeArgsMap,typeGenericTypeArgs);
        typeArguments=typeGenericTypeArgs.get();
      }
 else {
        typeArguments=PodamConstants.NO_TYPES;
      }
      for (int i=0; i < typeArguments.length; i++) {
        if (typeArguments[i] instanceof TypeVariable) {
          Class<?> resolvedType=TypeManufacturerUtil.resolveGenericParameter(typeArguments[i],typeArgsMap,typeGenericTypeArgs);
          if (!Collection.class.isAssignableFrom(resolvedType) && !Map.class.isAssignableFrom(resolvedType)) {
            typeArguments[i]=resolvedType;
          }
        }
      }
      setterArg=manufactureAttributeValue(pojo,manufacturingCtx,attributeType,genericType,pojoAttributeAnnotations,attribute.getName(),typeArgsMap,typeArguments);
    }
    try {
      setter.invoke(pojo,setterArg);
    }
 catch (    IllegalAccessException e) {
      LOG.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",setter.toString());
      setter.setAccessible(true);
      setter.invoke(pojo,setterArg);
    }
  }
  for (  ClassAttribute readOnlyAttribute : classAttributes) {
    Method getter=PodamUtils.selectLatestMethod(readOnlyAttribute.getGetters());
    if (getter != null && !getter.getReturnType().isPrimitive()) {
      if (getter.getGenericParameterTypes().length == 0) {
        Object fieldValue=null;
        try {
          fieldValue=getter.invoke(pojo,PodamConstants.NO_ARGS);
        }
 catch (        Exception e) {
          LOG.debug(""String_Node_Str"",getter);
        }
        if (fieldValue != null) {
          LOG.debug(""String_Node_Str"",getter);
          Type[] genericTypeArgsAll;
          Map<String,Type> paramTypeArgsMap;
          if (getter.getGenericReturnType() instanceof ParameterizedType) {
            paramTypeArgsMap=new HashMap<String,Type>(typeArgsMap);
            ParameterizedType paramType=(ParameterizedType)getter.getGenericReturnType();
            Type[] actualTypes=paramType.getActualTypeArguments();
            TypeManufacturerUtil.fillTypeArgMap(paramTypeArgsMap,getter.getReturnType(),actualTypes);
            genericTypeArgsAll=TypeManufacturerUtil.fillTypeArgMap(paramTypeArgsMap,getter.getReturnType(),genericTypeArgs);
          }
 else {
            paramTypeArgsMap=typeArgsMap;
            genericTypeArgsAll=genericTypeArgs;
          }
          List<Annotation> pojoAttributeAnnotations=PodamUtils.getAttributeAnnotations(readOnlyAttribute.getAttribute(),getter);
          Class<?> fieldClass=fieldValue.getClass();
          Integer depth=manufacturingCtx.getPojos().get(fieldClass);
          if (depth == null) {
            depth=-1;
          }
          if (depth <= strategy.getMaxDepth(fieldClass)) {
            manufacturingCtx.getPojos().put(fieldClass,depth + 1);
            populatePojoInternal(fieldValue,pojoAttributeAnnotations,manufacturingCtx,paramTypeArgsMap,genericTypeArgsAll);
            manufacturingCtx.getPojos().put(fieldClass,depth);
          }
 else {
            LOG.warn(""String_Node_Str"",getter);
          }
        }
      }
 else {
        LOG.warn(""String_Node_Str"",getter);
      }
    }
  }
  Collection<Method> extraMethods=classInfoStrategy.getExtraMethods(pojoClass);
  if (null != extraMethods) {
    for (    Method extraMethod : extraMethods) {
      Object[] args=getParameterValuesForMethod(extraMethod,pojoClass,manufacturingCtx,typeArgsMap,genericTypeArgs);
      extraMethod.invoke(pojo,args);
    }
  }
  return pojo;
}",0.9894380501015572
177924,"/** 
 * It fills an Array with the required number of elements of the required type. <p> This method has a so-called side-effect. It updates the Map given as argument. </p>
 * @param array The array POJO
 * @param attributeName The attribute name of collection in enclosing POJO class 
 * @param elementType The generic type of the collection element
 * @param genericElementType The generic type of the collection element
 * @param annotations The annotations for this attribute
 * @param manufacturingCtx Manufacturing context
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If it was not possible to create a class from a string
 */
private void fillArray(Object array,String attributeName,Class<?> elementType,Type genericElementType,List<Annotation> annotations,ManufacturingContext manufacturingCtx,Map<String,Type> typeArgsMap) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Class<?> componentType=array.getClass().getComponentType();
  Type genericComponentType;
  AtomicReference<Type[]> genericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
  if (genericElementType instanceof GenericArrayType) {
    genericComponentType=((GenericArrayType)genericElementType).getGenericComponentType();
    if (genericComponentType instanceof TypeVariable) {
      TypeVariable<?> componentTypeVariable=(TypeVariable<?>)genericComponentType;
      final Type resolvedType=typeArgsMap.get(componentTypeVariable.getName());
      componentType=TypeManufacturerUtil.resolveGenericParameter(resolvedType,typeArgsMap,genericTypeArgs);
    }
  }
 else {
    genericComponentType=componentType;
  }
  Holder<AttributeStrategy<?>> elementStrategyHolder=new Holder<AttributeStrategy<?>>();
  Holder<AttributeStrategy<?>> keyStrategyHolder=null;
  Integer nbrElements=TypeManufacturerUtil.findCollectionSize(strategy,annotations,elementType,elementStrategyHolder,keyStrategyHolder);
  AttributeStrategy<?> elementStrategy=elementStrategyHolder.value;
  for (int i=0; i < nbrElements; i++) {
    Object arrayElement=Array.get(array,i);
    if (null == arrayElement || arrayElement.getClass().isPrimitive() || arrayElement instanceof Number) {
      arrayElement=TypeManufacturerUtil.returnAttributeDataStrategyValue(componentType,elementStrategy);
      if (null == arrayElement) {
        arrayElement=manufactureAttributeValue(array,manufacturingCtx,componentType,genericComponentType,annotations,attributeName,typeArgsMap,genericTypeArgs.get());
      }
      Array.set(array,i,arrayElement);
    }
  }
}","/** 
 * It fills an Array with the required number of elements of the required type. <p> This method has a so-called side-effect. It updates the Map given as argument. </p>
 * @param array The array POJO
 * @param attributeName The attribute name of collection in enclosing POJO class 
 * @param elementType The generic type of the collection element
 * @param genericElementType The generic type of the collection element
 * @param annotations The annotations for this attribute
 * @param manufacturingCtx Manufacturing context
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If it was not possible to create a class from a string
 */
private void fillArray(Object array,String attributeName,Class<?> elementType,Type genericElementType,List<Annotation> annotations,ManufacturingContext manufacturingCtx,Map<String,Type> typeArgsMap) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Class<?> componentType=array.getClass().getComponentType();
  Type genericComponentType;
  AtomicReference<Type[]> genericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
  if (genericElementType instanceof GenericArrayType) {
    genericComponentType=((GenericArrayType)genericElementType).getGenericComponentType();
    if (genericComponentType instanceof TypeVariable) {
      TypeVariable<?> componentTypeVariable=(TypeVariable<?>)genericComponentType;
      final Type resolvedType=typeArgsMap.get(componentTypeVariable.getName());
      componentType=TypeManufacturerUtil.resolveGenericParameter(resolvedType,typeArgsMap,genericTypeArgs);
    }
  }
 else {
    genericComponentType=componentType;
  }
  Holder<AttributeStrategy<?>> elementStrategyHolder=new Holder<AttributeStrategy<?>>();
  Holder<AttributeStrategy<?>> keyStrategyHolder=null;
  TypeManufacturerUtil.findCollectionSize(strategy,annotations,elementType,elementStrategyHolder,keyStrategyHolder);
  AttributeStrategy<?> elementStrategy=elementStrategyHolder.value;
  int nbrElements=Array.getLength(array);
  for (int i=0; i < nbrElements; i++) {
    Object arrayElement=Array.get(array,i);
    if (null == arrayElement || arrayElement.getClass().isPrimitive() || arrayElement instanceof Number) {
      arrayElement=TypeManufacturerUtil.returnAttributeDataStrategyValue(componentType,elementStrategy);
      if (null == arrayElement) {
        arrayElement=manufactureAttributeValue(array,manufacturingCtx,componentType,genericComponentType,annotations,attributeName,typeArgsMap,genericTypeArgs.get());
      }
      Array.set(array,i,arrayElement);
    }
  }
}",0.989527027027027
177925,"/** 
 * Fills given class filled with values dictated by the strategy
 * @param < T > The type for which should be populated
 * @param pojo An instance to be filled with dummy values
 * @param annotations a list of annotations attached to this POJO defined elsewhere 
 * @param manufacturingCtx the manufacturing context
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return An instance of &lt;T&gt; filled with dummy values
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If manufactured class cannot be loaded
 */
private <T>T populatePojoInternal(T pojo,List<Annotation> annotations,ManufacturingContext manufacturingCtx,Map<String,Type> typeArgsMap,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Class<?> pojoClass=pojo.getClass();
  if (pojo instanceof Collection && ((Collection<?>)pojo).isEmpty()) {
    @SuppressWarnings(""String_Node_Str"") Collection<Object> collection=(Collection<Object>)pojo;
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
    Class<?> elementTypeClass=findInheretedCollectionElementType(collection,manufacturingCtx,elementGenericTypeArgs,typeArgsMap,genericTypeArgs);
    if (null == annotations) {
      annotations=new ArrayList<Annotation>();
    }
    for (    Annotation annotation : collection.getClass().getAnnotations()) {
      annotations.add(annotation);
    }
    String attributeName=null;
    fillCollection(manufacturingCtx,annotations,attributeName,collection,elementTypeClass,elementGenericTypeArgs.get());
  }
 else   if (pojo instanceof Map && ((Map<?,?>)pojo).isEmpty()) {
    @SuppressWarnings(""String_Node_Str"") Map<Object,Object> map=(Map<Object,Object>)pojo;
    MapArguments mapArguments=findInheretedMapElementType(map,manufacturingCtx,typeArgsMap,genericTypeArgs);
    if (null != annotations) {
      mapArguments.getAnnotations().addAll(annotations);
    }
    fillMap(mapArguments,manufacturingCtx);
  }
  Class<?>[] parameterTypes=null;
  Class<?> attributeType=null;
  ClassInfo classInfo=classInfoStrategy.getClassInfo(pojo.getClass());
  Set<ClassAttribute> classAttributes=classInfo.getClassAttributes();
  Object setterArg=null;
  Iterator<ClassAttribute> iter=classAttributes.iterator();
  while (iter.hasNext()) {
    ClassAttribute attribute=iter.next();
    Set<Method> setters=attribute.getSetters();
    if (setters.isEmpty()) {
      if (attribute.getGetters().isEmpty()) {
        iter.remove();
      }
      continue;
    }
 else {
      iter.remove();
    }
    Method setter=PodamUtils.selectLatestMethod(setters);
    parameterTypes=setter.getParameterTypes();
    if (parameterTypes.length != 1) {
      LOG.warn(""String_Node_Str"",setter);
      continue;
    }
    attributeType=parameterTypes[0];
    List<Annotation> pojoAttributeAnnotations=PodamUtils.getAttributeAnnotations(attribute.getAttribute(),setter);
    AttributeStrategy<?> attributeStrategy=TypeManufacturerUtil.findAttributeStrategy(strategy,pojoAttributeAnnotations,attributeType);
    if (null != attributeStrategy) {
      setterArg=TypeManufacturerUtil.returnAttributeDataStrategyValue(attributeType,attributeStrategy);
    }
 else {
      AtomicReference<Type[]> typeGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
      Type genericType=setter.getGenericParameterTypes()[0];
      final Type[] typeArguments;
      if (!(genericType instanceof GenericArrayType)) {
        attributeType=TypeManufacturerUtil.resolveGenericParameter(genericType,typeArgsMap,typeGenericTypeArgs);
        typeArguments=typeGenericTypeArgs.get();
      }
 else {
        typeArguments=PodamConstants.NO_TYPES;
      }
      for (int i=0; i < typeArguments.length; i++) {
        if (typeArguments[i] instanceof TypeVariable) {
          Class<?> resolvedType=TypeManufacturerUtil.resolveGenericParameter(typeArguments[i],typeArgsMap,typeGenericTypeArgs);
          if (!Collection.class.isAssignableFrom(resolvedType) && !Map.class.isAssignableFrom(resolvedType)) {
            typeArguments[i]=resolvedType;
          }
        }
      }
      setterArg=manufactureAttributeValue(pojo,manufacturingCtx,attributeType,genericType,pojoAttributeAnnotations,attribute.getName(),typeArgsMap,typeArguments);
    }
    try {
      setter.invoke(pojo,setterArg);
    }
 catch (    IllegalAccessException e) {
      LOG.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",setter.toString());
      setter.setAccessible(true);
      setter.invoke(pojo,setterArg);
    }
  }
  for (  ClassAttribute readOnlyAttribute : classAttributes) {
    Method getter=PodamUtils.selectLatestMethod(readOnlyAttribute.getGetters());
    if (getter != null && !getter.getReturnType().isPrimitive()) {
      if (getter.getGenericParameterTypes().length == 0) {
        Object fieldValue=null;
        try {
          fieldValue=getter.invoke(pojo,PodamConstants.NO_ARGS);
        }
 catch (        Exception e) {
          LOG.debug(""String_Node_Str"",getter);
        }
        if (fieldValue != null) {
          LOG.debug(""String_Node_Str"",getter);
          Type[] genericTypeArgsAll;
          Map<String,Type> paramTypeArgsMap;
          if (getter.getGenericReturnType() instanceof ParameterizedType) {
            paramTypeArgsMap=new HashMap<String,Type>(typeArgsMap);
            ParameterizedType paramType=(ParameterizedType)getter.getGenericReturnType();
            Type[] actualTypes=paramType.getActualTypeArguments();
            TypeManufacturerUtil.fillTypeArgMap(paramTypeArgsMap,getter.getReturnType(),actualTypes);
            genericTypeArgsAll=TypeManufacturerUtil.fillTypeArgMap(paramTypeArgsMap,getter.getReturnType(),genericTypeArgs);
          }
 else {
            paramTypeArgsMap=typeArgsMap;
            genericTypeArgsAll=genericTypeArgs;
          }
          List<Annotation> pojoAttributeAnnotations=PodamUtils.getAttributeAnnotations(readOnlyAttribute.getAttribute(),getter);
          Class<?> fieldClass=fieldValue.getClass();
          Integer depth=manufacturingCtx.getPojos().get(fieldClass);
          if (depth == null) {
            depth=-1;
          }
          if (depth <= strategy.getMaxDepth(fieldClass)) {
            manufacturingCtx.getPojos().put(fieldClass,depth + 1);
            populatePojoInternal(fieldValue,pojoAttributeAnnotations,manufacturingCtx,paramTypeArgsMap,genericTypeArgsAll);
            manufacturingCtx.getPojos().put(fieldClass,depth);
          }
 else {
            LOG.warn(""String_Node_Str"",getter);
          }
        }
      }
 else {
        LOG.warn(""String_Node_Str"",getter);
      }
    }
  }
  Collection<Method> extraMethods=classInfoStrategy.getExtraMethods(pojoClass);
  if (null != extraMethods) {
    for (    Method extraMethod : extraMethods) {
      Object[] args=getParameterValuesForMethod(extraMethod,pojoClass,manufacturingCtx,typeArgsMap,genericTypeArgs);
      extraMethod.invoke(pojo,args);
    }
  }
  return pojo;
}","/** 
 * Fills given class filled with values dictated by the strategy
 * @param < T > The type for which should be populated
 * @param pojo An instance to be filled with dummy values
 * @param annotations a list of annotations attached to this POJO defined elsewhere 
 * @param manufacturingCtx the manufacturing context
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return An instance of &lt;T&gt; filled with dummy values
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If manufactured class cannot be loaded
 */
private <T>T populatePojoInternal(T pojo,List<Annotation> annotations,ManufacturingContext manufacturingCtx,Map<String,Type> typeArgsMap,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Class<?> pojoClass=pojo.getClass();
  if (pojoClass.isArray()) {
    if (null == annotations) {
      annotations=new ArrayList<Annotation>();
    }
    String attributeName=null;
    fillArray(pojo,attributeName,pojoClass.getClass().getComponentType(),pojoClass.getClass().getComponentType(),annotations,manufacturingCtx,typeArgsMap);
  }
  if (pojo instanceof Collection && ((Collection<?>)pojo).isEmpty()) {
    @SuppressWarnings(""String_Node_Str"") Collection<Object> collection=(Collection<Object>)pojo;
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
    Class<?> elementTypeClass=findInheretedCollectionElementType(collection,manufacturingCtx,elementGenericTypeArgs,typeArgsMap,genericTypeArgs);
    if (null == annotations) {
      annotations=new ArrayList<Annotation>();
    }
    for (    Annotation annotation : collection.getClass().getAnnotations()) {
      annotations.add(annotation);
    }
    String attributeName=null;
    fillCollection(manufacturingCtx,annotations,attributeName,collection,elementTypeClass,elementGenericTypeArgs.get());
  }
 else   if (pojo instanceof Map && ((Map<?,?>)pojo).isEmpty()) {
    @SuppressWarnings(""String_Node_Str"") Map<Object,Object> map=(Map<Object,Object>)pojo;
    MapArguments mapArguments=findInheretedMapElementType(map,manufacturingCtx,typeArgsMap,genericTypeArgs);
    if (null != annotations) {
      mapArguments.getAnnotations().addAll(annotations);
    }
    fillMap(mapArguments,manufacturingCtx);
  }
  Class<?>[] parameterTypes=null;
  Class<?> attributeType=null;
  ClassInfo classInfo=classInfoStrategy.getClassInfo(pojo.getClass());
  Set<ClassAttribute> classAttributes=classInfo.getClassAttributes();
  Object setterArg=null;
  Iterator<ClassAttribute> iter=classAttributes.iterator();
  while (iter.hasNext()) {
    ClassAttribute attribute=iter.next();
    Set<Method> setters=attribute.getSetters();
    if (setters.isEmpty()) {
      if (attribute.getGetters().isEmpty()) {
        iter.remove();
      }
      continue;
    }
 else {
      iter.remove();
    }
    Method setter=PodamUtils.selectLatestMethod(setters);
    parameterTypes=setter.getParameterTypes();
    if (parameterTypes.length != 1) {
      LOG.warn(""String_Node_Str"",setter);
      continue;
    }
    attributeType=parameterTypes[0];
    List<Annotation> pojoAttributeAnnotations=PodamUtils.getAttributeAnnotations(attribute.getAttribute(),setter);
    AttributeStrategy<?> attributeStrategy=TypeManufacturerUtil.findAttributeStrategy(strategy,pojoAttributeAnnotations,attributeType);
    if (null != attributeStrategy) {
      setterArg=TypeManufacturerUtil.returnAttributeDataStrategyValue(attributeType,attributeStrategy);
    }
 else {
      AtomicReference<Type[]> typeGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
      Type genericType=setter.getGenericParameterTypes()[0];
      final Type[] typeArguments;
      if (!(genericType instanceof GenericArrayType)) {
        attributeType=TypeManufacturerUtil.resolveGenericParameter(genericType,typeArgsMap,typeGenericTypeArgs);
        typeArguments=typeGenericTypeArgs.get();
      }
 else {
        typeArguments=PodamConstants.NO_TYPES;
      }
      for (int i=0; i < typeArguments.length; i++) {
        if (typeArguments[i] instanceof TypeVariable) {
          Class<?> resolvedType=TypeManufacturerUtil.resolveGenericParameter(typeArguments[i],typeArgsMap,typeGenericTypeArgs);
          if (!Collection.class.isAssignableFrom(resolvedType) && !Map.class.isAssignableFrom(resolvedType)) {
            typeArguments[i]=resolvedType;
          }
        }
      }
      setterArg=manufactureAttributeValue(pojo,manufacturingCtx,attributeType,genericType,pojoAttributeAnnotations,attribute.getName(),typeArgsMap,typeArguments);
    }
    try {
      setter.invoke(pojo,setterArg);
    }
 catch (    IllegalAccessException e) {
      LOG.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",setter.toString());
      setter.setAccessible(true);
      setter.invoke(pojo,setterArg);
    }
  }
  for (  ClassAttribute readOnlyAttribute : classAttributes) {
    Method getter=PodamUtils.selectLatestMethod(readOnlyAttribute.getGetters());
    if (getter != null && !getter.getReturnType().isPrimitive()) {
      if (getter.getGenericParameterTypes().length == 0) {
        Object fieldValue=null;
        try {
          fieldValue=getter.invoke(pojo,PodamConstants.NO_ARGS);
        }
 catch (        Exception e) {
          LOG.debug(""String_Node_Str"",getter);
        }
        if (fieldValue != null) {
          LOG.debug(""String_Node_Str"",getter);
          Type[] genericTypeArgsAll;
          Map<String,Type> paramTypeArgsMap;
          if (getter.getGenericReturnType() instanceof ParameterizedType) {
            paramTypeArgsMap=new HashMap<String,Type>(typeArgsMap);
            ParameterizedType paramType=(ParameterizedType)getter.getGenericReturnType();
            Type[] actualTypes=paramType.getActualTypeArguments();
            TypeManufacturerUtil.fillTypeArgMap(paramTypeArgsMap,getter.getReturnType(),actualTypes);
            genericTypeArgsAll=TypeManufacturerUtil.fillTypeArgMap(paramTypeArgsMap,getter.getReturnType(),genericTypeArgs);
          }
 else {
            paramTypeArgsMap=typeArgsMap;
            genericTypeArgsAll=genericTypeArgs;
          }
          List<Annotation> pojoAttributeAnnotations=PodamUtils.getAttributeAnnotations(readOnlyAttribute.getAttribute(),getter);
          Class<?> fieldClass=fieldValue.getClass();
          Integer depth=manufacturingCtx.getPojos().get(fieldClass);
          if (depth == null) {
            depth=-1;
          }
          if (depth <= strategy.getMaxDepth(fieldClass)) {
            manufacturingCtx.getPojos().put(fieldClass,depth + 1);
            populatePojoInternal(fieldValue,pojoAttributeAnnotations,manufacturingCtx,paramTypeArgsMap,genericTypeArgsAll);
            manufacturingCtx.getPojos().put(fieldClass,depth);
          }
 else {
            LOG.warn(""String_Node_Str"",getter);
          }
        }
      }
 else {
        LOG.warn(""String_Node_Str"",getter);
      }
    }
  }
  Collection<Method> extraMethods=classInfoStrategy.getExtraMethods(pojoClass);
  if (null != extraMethods) {
    for (    Method extraMethod : extraMethods) {
      Object[] args=getParameterValuesForMethod(extraMethod,pojoClass,manufacturingCtx,typeArgsMap,genericTypeArgs);
      extraMethod.invoke(pojo,args);
    }
  }
  return pojo;
}",0.979957805907173
177926,"/** 
 * It resolves generic parameter type
 * @param paramType The generic parameter type
 * @param typeArgsMap A map of resolved types
 * @param methodGenericTypeArgs Return value posible generic types of the generic parameter type
 * @return value for class representing the generic parameter type
 */
public static Class<?> resolveGenericParameter(Type paramType,Map<String,Type> typeArgsMap,AtomicReference<Type[]> methodGenericTypeArgs){
  Class<?> parameterType=null;
  Map<String,Type> localMap=new HashMap<String,Type>(typeArgsMap);
  methodGenericTypeArgs.set(PodamConstants.NO_TYPES);
  if (paramType instanceof TypeVariable<?>) {
    final TypeVariable<?> typeVariable=(TypeVariable<?>)paramType;
    final Type type=localMap.get(typeVariable.getName());
    if (type != null) {
      parameterType=resolveGenericParameter(type,localMap,methodGenericTypeArgs);
    }
  }
 else   if (paramType instanceof ParameterizedType) {
    ParameterizedType pType=(ParameterizedType)paramType;
    parameterType=(Class<?>)pType.getRawType();
    methodGenericTypeArgs.set(pType.getActualTypeArguments());
  }
 else   if (paramType instanceof WildcardType) {
    WildcardType wType=(WildcardType)paramType;
    Type[] bounds=wType.getLowerBounds();
    String msg;
    if (bounds != null && bounds.length > 0) {
      msg=""String_Node_Str"";
    }
 else {
      bounds=wType.getUpperBounds();
      msg=""String_Node_Str"";
    }
    if (bounds != null && bounds.length > 0) {
      LOG.debug(msg + Arrays.toString(bounds));
      parameterType=resolveGenericParameter(bounds[0],localMap,methodGenericTypeArgs);
    }
  }
 else   if (paramType instanceof Class) {
    parameterType=(Class<?>)paramType;
  }
  if (parameterType == null) {
    LOG.warn(""String_Node_Str"",paramType);
    parameterType=Object.class;
  }
  return parameterType;
}","/** 
 * It resolves generic parameter type
 * @param paramType The generic parameter type
 * @param typeArgsMap A map of resolved types
 * @param methodGenericTypeArgs Return value posible generic types of the generic parameter type
 * @return value for class representing the generic parameter type
 */
public static Class<?> resolveGenericParameter(Type paramType,Map<String,Type> typeArgsMap,AtomicReference<Type[]> methodGenericTypeArgs){
  Class<?> parameterType=null;
  Map<String,Type> localMap=new HashMap<String,Type>(typeArgsMap);
  methodGenericTypeArgs.set(PodamConstants.NO_TYPES);
  if (paramType instanceof Class) {
    parameterType=(Class<?>)paramType;
  }
 else   if (paramType instanceof TypeVariable<?>) {
    final TypeVariable<?> typeVariable=(TypeVariable<?>)paramType;
    final Type type=localMap.get(typeVariable.getName());
    if (type != null) {
      parameterType=resolveGenericParameter(type,localMap,methodGenericTypeArgs);
    }
  }
 else   if (paramType instanceof ParameterizedType) {
    ParameterizedType pType=(ParameterizedType)paramType;
    parameterType=(Class<?>)pType.getRawType();
    Type[] actualTypeArgs=pType.getActualTypeArguments();
    if (!typeArgsMap.isEmpty()) {
      for (int i=0; i < actualTypeArgs.length; i++) {
        Class<?> tmp=resolveGenericParameter(actualTypeArgs[i],localMap,methodGenericTypeArgs);
        if (tmp != actualTypeArgs[i]) {
          if (ArrayUtils.isEmpty(methodGenericTypeArgs.get())) {
            actualTypeArgs[i]=tmp;
          }
        }
      }
    }
    methodGenericTypeArgs.set(actualTypeArgs);
  }
 else   if (paramType instanceof WildcardType) {
    WildcardType wType=(WildcardType)paramType;
    Type[] bounds=wType.getLowerBounds();
    String msg;
    if (bounds != null && bounds.length > 0) {
      msg=""String_Node_Str"";
    }
 else {
      bounds=wType.getUpperBounds();
      msg=""String_Node_Str"";
    }
    if (bounds != null && bounds.length > 0) {
      LOG.debug(msg + Arrays.toString(bounds));
      parameterType=resolveGenericParameter(bounds[0],localMap,methodGenericTypeArgs);
    }
  }
  if (parameterType == null) {
    LOG.warn(""String_Node_Str"",paramType);
    parameterType=Object.class;
  }
  return parameterType;
}",0.6669936243256498
177927,"/** 
 * It returns a   {@link Calendar} objects complying with Java bean validationannotations. {@inheritDoc}
 */
public Object getValue() throws PodamMockeryException {
  if (null != findTypeFromList(annotations,AssertTrue.class)) {
    return Boolean.TRUE;
  }
  if (null != findTypeFromList(annotations,AssertFalse.class)) {
    return Boolean.FALSE;
  }
  if (null != findTypeFromList(annotations,Past.class)) {
    int days=RANDOM.nextInt(365) + 1;
    long timestamp=System.currentTimeMillis() - TimeUnit.DAYS.toSeconds(days);
    return timestampToReturnType(timestamp);
  }
  if (null != findTypeFromList(annotations,Future.class)) {
    int days=RANDOM.nextInt(365) + 1;
    long timestamp=System.currentTimeMillis() + TimeUnit.DAYS.toSeconds(days);
    return timestampToReturnType(timestamp);
  }
  Size size=findTypeFromList(annotations,Size.class);
  if (null != size) {
    int minValue=size.min();
    int maxValue=size.max();
    if (maxValue == Integer.MAX_VALUE) {
      maxValue=PodamConstants.STR_DEFAULT_LENGTH;
    }
    long length=PodamUtils.getLongInRange(minValue,maxValue);
    StringBuilder sb=new StringBuilder();
    while (sb.length() < length) {
      sb.append(PodamUtils.getNiceCharacter());
    }
    return sb.toString();
  }
  Pattern pattern=findTypeFromList(annotations,Pattern.class);
  if (null != pattern) {
    LOG.warn(""String_Node_Str"" + ""String_Node_Str"",pattern.regexp());
    return null;
  }
  boolean isRound=false;
  boolean isFloat=false;
  BigDecimal min=new BigDecimal(Double.MIN_VALUE);
  BigDecimal max=new BigDecimal(Double.MAX_VALUE);
  DecimalMin decimalMin=findTypeFromList(annotations,DecimalMin.class);
  if (null != decimalMin) {
    isFloat=true;
    min=new BigDecimal(decimalMin.value());
  }
  DecimalMax decimalMax=findTypeFromList(annotations,DecimalMax.class);
  if (null != decimalMax) {
    isFloat=true;
    max=new BigDecimal(decimalMax.value());
  }
  Min minAnno=findTypeFromList(annotations,Min.class);
  if (null != minAnno) {
    isRound=true;
    min=new BigDecimal(minAnno.value()).max(min);
  }
  Max maxAnno=findTypeFromList(annotations,Max.class);
  if (null != maxAnno) {
    isRound=true;
    max=new BigDecimal(maxAnno.value()).min(max);
  }
  Digits digits=findTypeFromList(annotations,Digits.class);
  BigDecimal divisor=null;
  if (null != digits) {
    isRound=true;
    divisor=BigDecimal.TEN.pow(digits.fraction());
    max=BigDecimal.TEN.pow(digits.integer()).min(max).multiply(divisor);
    min=max.negate().max(min);
  }
  if (isRound || isFloat) {
    BigDecimal value=getValueInRange(min,max);
    if (isRound) {
      BigInteger intValue=value.toBigInteger();
      value=new BigDecimal(intValue);
    }
    if (null != divisor) {
      value=value.divide(divisor);
    }
    return decimalToReturnType(value);
  }
  return null;
}","/** 
 * It returns a   {@link Calendar} objects complying with Java bean validationannotations. {@inheritDoc}
 */
public Object getValue() throws PodamMockeryException {
  if (null != findTypeFromList(annotations,AssertTrue.class)) {
    return Boolean.TRUE;
  }
  if (null != findTypeFromList(annotations,AssertFalse.class)) {
    return Boolean.FALSE;
  }
  if (null != findTypeFromList(annotations,Past.class)) {
    int days=RANDOM.nextInt(365) + 1;
    long timestamp=System.currentTimeMillis() - TimeUnit.DAYS.toSeconds(days);
    return timestampToReturnType(timestamp);
  }
  if (null != findTypeFromList(annotations,Future.class)) {
    int days=RANDOM.nextInt(365) + 1;
    long timestamp=System.currentTimeMillis() + TimeUnit.DAYS.toSeconds(days);
    return timestampToReturnType(timestamp);
  }
  Size size=findTypeFromList(annotations,Size.class);
  if (null != size) {
    int minValue=size.min();
    int maxValue=size.max();
    if (maxValue == Integer.MAX_VALUE) {
      maxValue=PodamConstants.STR_DEFAULT_LENGTH;
    }
    long length=PodamUtils.getLongInRange(minValue,maxValue);
    StringBuilder sb=new StringBuilder();
    while (sb.length() < length) {
      sb.append(PodamUtils.getNiceCharacter());
    }
    return sb.toString();
  }
  Pattern pattern=findTypeFromList(annotations,Pattern.class);
  if (null != pattern) {
    LOG.warn(""String_Node_Str"" + ""String_Node_Str"",pattern.regexp());
    return null;
  }
  boolean isRound=false;
  boolean isFloat=false;
  BigDecimal min=new BigDecimal(-Double.MAX_VALUE);
  BigDecimal max=new BigDecimal(Double.MAX_VALUE);
  DecimalMin decimalMin=findTypeFromList(annotations,DecimalMin.class);
  if (null != decimalMin) {
    isFloat=true;
    min=new BigDecimal(decimalMin.value());
  }
  DecimalMax decimalMax=findTypeFromList(annotations,DecimalMax.class);
  if (null != decimalMax) {
    isFloat=true;
    max=new BigDecimal(decimalMax.value());
  }
  Min minAnno=findTypeFromList(annotations,Min.class);
  if (null != minAnno) {
    isRound=true;
    min=new BigDecimal(minAnno.value()).max(min);
  }
  Max maxAnno=findTypeFromList(annotations,Max.class);
  if (null != maxAnno) {
    isRound=true;
    max=new BigDecimal(maxAnno.value()).min(max);
  }
  Digits digits=findTypeFromList(annotations,Digits.class);
  BigDecimal divisor=null;
  if (null != digits) {
    isRound=true;
    divisor=BigDecimal.TEN.pow(digits.fraction());
    BigDecimal limit=BigDecimal.TEN.pow(digits.integer());
    max=limit.min(max).multiply(divisor);
    min=limit.negate().max(min).multiply(divisor);
  }
  if (isRound || isFloat) {
    BigDecimal value=getValueInRange(min,max);
    if (isRound) {
      BigInteger intValue=value.toBigInteger();
      value=new BigDecimal(intValue);
    }
    if (null != divisor) {
      value=value.divide(divisor);
    }
    return decimalToReturnType(value);
  }
  return null;
}",0.9647924330005256
177928,"/** 
 * Fills given class filled with values dictated by the strategy
 * @param < T > The type for which should be populated
 * @param pojo An instance to be filled with dummy values
 * @param manufacturingCtx the manufacturing context
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return An instance of &lt;T&gt; filled with dummy values
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If manufactured class cannot be loaded
 */
private <T>T populatePojoInternal(T pojo,ManufacturingContext manufacturingCtx,Map<String,Type> typeArgsMap,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Class<?> pojoClass=pojo.getClass();
  if (pojo instanceof Collection && ((Collection<?>)pojo).isEmpty()) {
    @SuppressWarnings(""String_Node_Str"") Collection<Object> collection=(Collection<Object>)pojo;
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
    Class<?> elementTypeClass=findInheretedCollectionElementType(collection,manufacturingCtx,elementGenericTypeArgs,typeArgsMap,genericTypeArgs);
    String attributeName=null;
    Annotation[] annotations=collection.getClass().getAnnotations();
    fillCollection(manufacturingCtx,Arrays.asList(annotations),attributeName,collection,elementTypeClass,elementGenericTypeArgs.get());
  }
 else   if (pojo instanceof Map && ((Map<?,?>)pojo).isEmpty()) {
    @SuppressWarnings(""String_Node_Str"") Map<Object,Object> map=(Map<Object,Object>)pojo;
    MapArguments mapArguments=findInheretedMapElementType(map,manufacturingCtx,typeArgsMap,genericTypeArgs);
    fillMap(mapArguments,manufacturingCtx);
  }
  Class<?>[] parameterTypes=null;
  Class<?> attributeType=null;
  ClassInfo classInfo=classInfoStrategy.getClassInfo(pojo.getClass());
  Set<ClassAttribute> classAttributes=classInfo.getClassAttributes();
  Object setterArg=null;
  Iterator<ClassAttribute> iter=classAttributes.iterator();
  while (iter.hasNext()) {
    ClassAttribute attribute=iter.next();
    Set<Method> setters=attribute.getSetters();
    if (setters.isEmpty()) {
      if (attribute.getGetters().isEmpty()) {
        iter.remove();
      }
      continue;
    }
 else {
      iter.remove();
    }
    Method setter=null;
    for (    Method current : setters) {
      if (setter == null || setter.getDeclaringClass().isAssignableFrom(current.getDeclaringClass())) {
        setter=current;
      }
    }
    parameterTypes=setter.getParameterTypes();
    if (parameterTypes.length != 1) {
      LOG.warn(""String_Node_Str"",setter);
      continue;
    }
    attributeType=parameterTypes[0];
    String attributeName=PodamUtils.extractFieldNameFromSetterMethod(setter);
    List<Annotation> pojoAttributeAnnotations=PodamUtils.getAttributeAnnotations(attribute.getAttribute(),setter);
    AttributeStrategy<?> attributeStrategy=TypeManufacturerUtil.findAttributeStrategy(strategy,pojoAttributeAnnotations,attributeType);
    if (null != attributeStrategy) {
      LOG.debug(""String_Node_Str"" + attributeName + ""String_Node_Str""+ attributeStrategy);
      setterArg=TypeManufacturerUtil.returnAttributeDataStrategyValue(attributeType,attributeStrategy);
    }
 else {
      Type[] typeArguments=PodamConstants.NO_TYPES;
      Type genericType=setter.getGenericParameterTypes()[0];
      if (genericType instanceof ParameterizedType) {
        final ParameterizedType attributeParameterizedType=(ParameterizedType)genericType;
        typeArguments=attributeParameterizedType.getActualTypeArguments();
      }
 else       if (genericType instanceof TypeVariable) {
        final TypeVariable<?> typeVariable=(TypeVariable<?>)genericType;
        Type type=typeArgsMap.get(typeVariable.getName());
        if (type instanceof ParameterizedType) {
          final ParameterizedType attributeParameterizedType=(ParameterizedType)type;
          typeArguments=attributeParameterizedType.getActualTypeArguments();
          attributeType=(Class<?>)attributeParameterizedType.getRawType();
        }
 else {
          attributeType=(Class<?>)type;
        }
      }
      AtomicReference<Type[]> typeGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
      for (int i=0; i < typeArguments.length; i++) {
        if (typeArguments[i] instanceof TypeVariable) {
          Class<?> resolvedType=TypeManufacturerUtil.resolveGenericParameter(typeArguments[i],typeArgsMap,typeGenericTypeArgs);
          if (!Collection.class.isAssignableFrom(resolvedType) && !Map.class.isAssignableFrom(resolvedType)) {
            typeArguments[i]=resolvedType;
          }
        }
      }
      setterArg=manufactureAttributeValue(pojo,manufacturingCtx,attributeType,genericType,pojoAttributeAnnotations,attributeName,typeArgsMap,typeArguments);
    }
    try {
      setter.invoke(pojo,setterArg);
    }
 catch (    IllegalAccessException e) {
      LOG.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",setter.toString());
      setter.setAccessible(true);
      setter.invoke(pojo,setterArg);
    }
  }
  for (  ClassAttribute readOnlyAttribute : classAttributes) {
    Method getter=readOnlyAttribute.getGetters().iterator().next();
    if (getter != null && !getter.getReturnType().isPrimitive()) {
      if (getter.getGenericParameterTypes().length == 0) {
        Object fieldValue=null;
        try {
          fieldValue=getter.invoke(pojo,PodamConstants.NO_ARGS);
        }
 catch (        Exception e) {
          LOG.debug(""String_Node_Str"",getter);
        }
        if (fieldValue != null) {
          LOG.debug(""String_Node_Str"",getter);
          Type[] genericTypeArgsAll;
          Map<String,Type> paramTypeArgsMap;
          if (getter.getGenericReturnType() instanceof ParameterizedType) {
            paramTypeArgsMap=new HashMap<String,Type>(typeArgsMap);
            ParameterizedType paramType=(ParameterizedType)getter.getGenericReturnType();
            Type[] actualTypes=paramType.getActualTypeArguments();
            TypeManufacturerUtil.fillTypeArgMap(paramTypeArgsMap,getter.getReturnType(),actualTypes);
            genericTypeArgsAll=TypeManufacturerUtil.fillTypeArgMap(paramTypeArgsMap,getter.getReturnType(),genericTypeArgs);
          }
 else {
            paramTypeArgsMap=typeArgsMap;
            genericTypeArgsAll=genericTypeArgs;
          }
          Class<?> fieldClass=fieldValue.getClass();
          Integer depth=manufacturingCtx.getPojos().get(fieldClass);
          if (depth == null) {
            depth=-1;
          }
          if (depth <= strategy.getMaxDepth(fieldClass)) {
            manufacturingCtx.getPojos().put(fieldClass,depth + 1);
            populatePojoInternal(fieldValue,manufacturingCtx,paramTypeArgsMap,genericTypeArgsAll);
            manufacturingCtx.getPojos().put(fieldClass,depth);
          }
 else {
            LOG.warn(""String_Node_Str"",getter);
          }
        }
      }
 else {
        LOG.warn(""String_Node_Str"",getter);
      }
    }
  }
  Collection<Method> extraMethods=classInfoStrategy.getExtraMethods(pojoClass);
  if (null != extraMethods) {
    for (    Method extraMethod : extraMethods) {
      Object[] args=getParameterValuesForMethod(extraMethod,pojoClass,manufacturingCtx,typeArgsMap,genericTypeArgs);
      extraMethod.invoke(pojo,args);
    }
  }
  return pojo;
}","/** 
 * Fills given class filled with values dictated by the strategy
 * @param < T > The type for which should be populated
 * @param pojo An instance to be filled with dummy values
 * @param manufacturingCtx the manufacturing context
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return An instance of &lt;T&gt; filled with dummy values
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If manufactured class cannot be loaded
 */
private <T>T populatePojoInternal(T pojo,ManufacturingContext manufacturingCtx,Map<String,Type> typeArgsMap,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Class<?> pojoClass=pojo.getClass();
  if (pojo instanceof Collection && ((Collection<?>)pojo).isEmpty()) {
    @SuppressWarnings(""String_Node_Str"") Collection<Object> collection=(Collection<Object>)pojo;
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
    Class<?> elementTypeClass=findInheretedCollectionElementType(collection,manufacturingCtx,elementGenericTypeArgs,typeArgsMap,genericTypeArgs);
    String attributeName=null;
    Annotation[] annotations=collection.getClass().getAnnotations();
    fillCollection(manufacturingCtx,Arrays.asList(annotations),attributeName,collection,elementTypeClass,elementGenericTypeArgs.get());
  }
 else   if (pojo instanceof Map && ((Map<?,?>)pojo).isEmpty()) {
    @SuppressWarnings(""String_Node_Str"") Map<Object,Object> map=(Map<Object,Object>)pojo;
    MapArguments mapArguments=findInheretedMapElementType(map,manufacturingCtx,typeArgsMap,genericTypeArgs);
    fillMap(mapArguments,manufacturingCtx);
  }
  Class<?>[] parameterTypes=null;
  Class<?> attributeType=null;
  ClassInfo classInfo=classInfoStrategy.getClassInfo(pojo.getClass());
  Set<ClassAttribute> classAttributes=classInfo.getClassAttributes();
  Object setterArg=null;
  Iterator<ClassAttribute> iter=classAttributes.iterator();
  while (iter.hasNext()) {
    ClassAttribute attribute=iter.next();
    Set<Method> setters=attribute.getSetters();
    if (setters.isEmpty()) {
      if (attribute.getGetters().isEmpty()) {
        iter.remove();
      }
      continue;
    }
 else {
      iter.remove();
    }
    Method setter=null;
    for (    Method current : setters) {
      if (setter == null || setter.getDeclaringClass().isAssignableFrom(current.getDeclaringClass())) {
        setter=current;
      }
    }
    parameterTypes=setter.getParameterTypes();
    if (parameterTypes.length != 1) {
      LOG.warn(""String_Node_Str"",setter);
      continue;
    }
    attributeType=parameterTypes[0];
    String attributeName=PodamUtils.extractFieldNameFromSetterMethod(setter);
    List<Annotation> pojoAttributeAnnotations=PodamUtils.getAttributeAnnotations(attribute.getAttribute(),setter);
    AttributeStrategy<?> attributeStrategy=TypeManufacturerUtil.findAttributeStrategy(strategy,pojoAttributeAnnotations,attributeType);
    if (null != attributeStrategy) {
      LOG.debug(""String_Node_Str"" + attributeName + ""String_Node_Str""+ attributeStrategy);
      setterArg=TypeManufacturerUtil.returnAttributeDataStrategyValue(attributeType,attributeStrategy);
    }
 else {
      AtomicReference<Type[]> typeGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
      Type genericType=setter.getGenericParameterTypes()[0];
      final Type[] typeArguments;
      if (!(genericType instanceof GenericArrayType)) {
        attributeType=TypeManufacturerUtil.resolveGenericParameter(genericType,typeArgsMap,typeGenericTypeArgs);
        typeArguments=typeGenericTypeArgs.get();
      }
 else {
        typeArguments=PodamConstants.NO_TYPES;
      }
      for (int i=0; i < typeArguments.length; i++) {
        if (typeArguments[i] instanceof TypeVariable) {
          Class<?> resolvedType=TypeManufacturerUtil.resolveGenericParameter(typeArguments[i],typeArgsMap,typeGenericTypeArgs);
          if (!Collection.class.isAssignableFrom(resolvedType) && !Map.class.isAssignableFrom(resolvedType)) {
            typeArguments[i]=resolvedType;
          }
        }
      }
      setterArg=manufactureAttributeValue(pojo,manufacturingCtx,attributeType,genericType,pojoAttributeAnnotations,attributeName,typeArgsMap,typeArguments);
    }
    try {
      setter.invoke(pojo,setterArg);
    }
 catch (    IllegalAccessException e) {
      LOG.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",setter.toString());
      setter.setAccessible(true);
      setter.invoke(pojo,setterArg);
    }
  }
  for (  ClassAttribute readOnlyAttribute : classAttributes) {
    Method getter=readOnlyAttribute.getGetters().iterator().next();
    if (getter != null && !getter.getReturnType().isPrimitive()) {
      if (getter.getGenericParameterTypes().length == 0) {
        Object fieldValue=null;
        try {
          fieldValue=getter.invoke(pojo,PodamConstants.NO_ARGS);
        }
 catch (        Exception e) {
          LOG.debug(""String_Node_Str"",getter);
        }
        if (fieldValue != null) {
          LOG.debug(""String_Node_Str"",getter);
          Type[] genericTypeArgsAll;
          Map<String,Type> paramTypeArgsMap;
          if (getter.getGenericReturnType() instanceof ParameterizedType) {
            paramTypeArgsMap=new HashMap<String,Type>(typeArgsMap);
            ParameterizedType paramType=(ParameterizedType)getter.getGenericReturnType();
            Type[] actualTypes=paramType.getActualTypeArguments();
            TypeManufacturerUtil.fillTypeArgMap(paramTypeArgsMap,getter.getReturnType(),actualTypes);
            genericTypeArgsAll=TypeManufacturerUtil.fillTypeArgMap(paramTypeArgsMap,getter.getReturnType(),genericTypeArgs);
          }
 else {
            paramTypeArgsMap=typeArgsMap;
            genericTypeArgsAll=genericTypeArgs;
          }
          Class<?> fieldClass=fieldValue.getClass();
          Integer depth=manufacturingCtx.getPojos().get(fieldClass);
          if (depth == null) {
            depth=-1;
          }
          if (depth <= strategy.getMaxDepth(fieldClass)) {
            manufacturingCtx.getPojos().put(fieldClass,depth + 1);
            populatePojoInternal(fieldValue,manufacturingCtx,paramTypeArgsMap,genericTypeArgsAll);
            manufacturingCtx.getPojos().put(fieldClass,depth);
          }
 else {
            LOG.warn(""String_Node_Str"",getter);
          }
        }
      }
 else {
        LOG.warn(""String_Node_Str"",getter);
      }
    }
  }
  Collection<Method> extraMethods=classInfoStrategy.getExtraMethods(pojoClass);
  if (null != extraMethods) {
    for (    Method extraMethod : extraMethods) {
      Object[] args=getParameterValuesForMethod(extraMethod,pojoClass,manufacturingCtx,typeArgsMap,genericTypeArgs);
      extraMethod.invoke(pojo,args);
    }
  }
  return pojo;
}",0.9203598800399868
177929,"/** 
 * It returns a collection of some sort with some data in it.
 * @param pojo The POJO being analyzed
 * @param manufacturingCtx the manufacturing context
 * @param attributeMetadata The attribute's metadata
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @return a collection of some sort with some data in it
 * @throws PodamMockeryException An exception occurred while resolving the collection
 * @throws IllegalArgumentException If the field name is null or empty
 */
private Collection<? super Object> resolveCollectionValueWhenCollectionIsPojoAttribute(Object pojo,ManufacturingContext manufacturingCtx,AttributeMetadata attributeMetadata,Map<String,Type> typeArgsMap){
  String attributeName=attributeMetadata.getAttributeName();
  Collection<Object> defaultValue=null;
  if (null != pojo && null != attributeName) {
    defaultValue=PodamUtils.getFieldValue(pojo,attributeName);
  }
  Collection<Object> retValue=null;
  if (null != defaultValue && (defaultValue.getClass().getModifiers() & Modifier.PRIVATE) == 0) {
    retValue=defaultValue;
  }
 else {
    @SuppressWarnings(""String_Node_Str"") Class<Collection<Object>> collectionType=(Class<Collection<Object>>)attributeMetadata.getAttributeType();
    retValue=strategy.getTypeValue(attributeMetadata,typeArgsMap,collectionType);
    if (null != retValue && null != defaultValue) {
      retValue.addAll(defaultValue);
    }
  }
  if (null == retValue) {
    return null;
  }
  try {
    Class<?> typeClass=null;
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
    if (ArrayUtils.isEmpty(attributeMetadata.getAttrGenericArgs())) {
      typeClass=findInheretedCollectionElementType(retValue,manufacturingCtx,elementGenericTypeArgs,typeArgsMap,attributeMetadata.getAttrGenericArgs());
    }
 else {
      Type actualTypeArgument=attributeMetadata.getAttrGenericArgs()[0];
      typeClass=TypeManufacturerUtil.resolveGenericParameter(actualTypeArgument,typeArgsMap,elementGenericTypeArgs);
    }
    fillCollection(manufacturingCtx,attributeMetadata.getAttributeAnnotations(),attributeName,retValue,typeClass,elementGenericTypeArgs.get());
  }
 catch (  SecurityException e) {
    throw new PodamMockeryException(RESOLVING_COLLECTION_EXCEPTION_STR,e);
  }
catch (  IllegalArgumentException e) {
    throw new PodamMockeryException(RESOLVING_COLLECTION_EXCEPTION_STR,e);
  }
catch (  InstantiationException e) {
    throw new PodamMockeryException(RESOLVING_COLLECTION_EXCEPTION_STR,e);
  }
catch (  IllegalAccessException e) {
    throw new PodamMockeryException(RESOLVING_COLLECTION_EXCEPTION_STR,e);
  }
catch (  ClassNotFoundException e) {
    throw new PodamMockeryException(RESOLVING_COLLECTION_EXCEPTION_STR,e);
  }
catch (  InvocationTargetException e) {
    throw new PodamMockeryException(RESOLVING_COLLECTION_EXCEPTION_STR,e);
  }
  return retValue;
}","/** 
 * It returns a collection of some sort with some data in it.
 * @param pojo The POJO being analyzed
 * @param manufacturingCtx the manufacturing context
 * @param attributeMetadata The attribute's metadata
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @return a collection of some sort with some data in it
 * @throws PodamMockeryException An exception occurred while resolving the collection
 * @throws IllegalArgumentException If the field name is null or empty
 */
private Collection<? super Object> resolveCollectionValueWhenCollectionIsPojoAttribute(Object pojo,ManufacturingContext manufacturingCtx,AttributeMetadata attributeMetadata,Map<String,Type> typeArgsMap){
  String attributeName=attributeMetadata.getAttributeName();
  Collection<Object> defaultValue=null;
  if (null != pojo && !Character.isDigit(attributeName.charAt(0))) {
    defaultValue=PodamUtils.getFieldValue(pojo,attributeName);
  }
  Collection<Object> retValue=null;
  if (null != defaultValue && (defaultValue.getClass().getModifiers() & Modifier.PRIVATE) == 0) {
    retValue=defaultValue;
  }
 else {
    @SuppressWarnings(""String_Node_Str"") Class<Collection<Object>> collectionType=(Class<Collection<Object>>)attributeMetadata.getAttributeType();
    retValue=strategy.getTypeValue(attributeMetadata,typeArgsMap,collectionType);
    if (null != retValue && null != defaultValue) {
      retValue.addAll(defaultValue);
    }
  }
  if (null == retValue) {
    return null;
  }
  try {
    Class<?> typeClass=null;
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
    if (ArrayUtils.isEmpty(attributeMetadata.getAttrGenericArgs())) {
      typeClass=findInheretedCollectionElementType(retValue,manufacturingCtx,elementGenericTypeArgs,typeArgsMap,attributeMetadata.getAttrGenericArgs());
    }
 else {
      Type actualTypeArgument=attributeMetadata.getAttrGenericArgs()[0];
      typeClass=TypeManufacturerUtil.resolveGenericParameter(actualTypeArgument,typeArgsMap,elementGenericTypeArgs);
    }
    fillCollection(manufacturingCtx,attributeMetadata.getAttributeAnnotations(),attributeName,retValue,typeClass,elementGenericTypeArgs.get());
  }
 catch (  SecurityException e) {
    throw new PodamMockeryException(RESOLVING_COLLECTION_EXCEPTION_STR,e);
  }
catch (  IllegalArgumentException e) {
    throw new PodamMockeryException(RESOLVING_COLLECTION_EXCEPTION_STR,e);
  }
catch (  InstantiationException e) {
    throw new PodamMockeryException(RESOLVING_COLLECTION_EXCEPTION_STR,e);
  }
catch (  IllegalAccessException e) {
    throw new PodamMockeryException(RESOLVING_COLLECTION_EXCEPTION_STR,e);
  }
catch (  ClassNotFoundException e) {
    throw new PodamMockeryException(RESOLVING_COLLECTION_EXCEPTION_STR,e);
  }
catch (  InvocationTargetException e) {
    throw new PodamMockeryException(RESOLVING_COLLECTION_EXCEPTION_STR,e);
  }
  return retValue;
}",0.993933265925177
177930,"/** 
 * It manufactures and returns a Map with at least one element in it
 * @param pojo The POJO being initialized
 * @param manufacturingCtx the manufacturing context
 * @param attributeMetadata The attribute's metadata
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @return Map with at least one element in it
 * @throws IllegalArgumentException <ul> <li>If the attribute name is null or empty</li> <li>If the array of types of the Map has length different from 2</li> </ul>
 * @throws PodamMockeryException If an error occurred while creating the Map object
 */
private Map<? super Object,? super Object> resolveMapValueWhenMapIsPojoAttribute(Object pojo,ManufacturingContext manufacturingCtx,AttributeMetadata attributeMetadata,Map<String,Type> typeArgsMap){
  String attributeName=attributeMetadata.getAttributeName();
  Map<Object,Object> defaultValue=null;
  if (null != pojo && null != attributeName) {
    defaultValue=PodamUtils.getFieldValue(pojo,attributeName);
  }
  Map<Object,Object> retValue;
  if (null != defaultValue && (defaultValue.getClass().getModifiers() & Modifier.PRIVATE) == 0) {
    retValue=defaultValue;
  }
 else {
    @SuppressWarnings(""String_Node_Str"") Class<Map<Object,Object>> mapType=(Class<Map<Object,Object>>)attributeMetadata.getAttributeType();
    retValue=strategy.getTypeValue(attributeMetadata,typeArgsMap,mapType);
    if (null != retValue && null != defaultValue) {
      retValue.putAll(defaultValue);
    }
  }
  if (null == retValue) {
    return null;
  }
  try {
    Class<?> keyClass=null;
    Class<?> elementClass=null;
    AtomicReference<Type[]> keyGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
    if (ArrayUtils.isEmpty(attributeMetadata.getAttrGenericArgs())) {
      MapArguments mapArgs=findInheretedMapElementType(retValue,manufacturingCtx,typeArgsMap,attributeMetadata.getAttrGenericArgs());
      keyClass=mapArgs.getKeyClass();
      elementClass=mapArgs.getElementClass();
    }
 else {
      if (attributeMetadata.getAttrGenericArgs().length != 2) {
        throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + Arrays.toString(attributeMetadata.getAttrGenericArgs()));
      }
      Type[] actualTypeArguments=attributeMetadata.getAttrGenericArgs();
      keyClass=TypeManufacturerUtil.resolveGenericParameter(actualTypeArguments[0],typeArgsMap,keyGenericTypeArgs);
      elementClass=TypeManufacturerUtil.resolveGenericParameter(actualTypeArguments[1],typeArgsMap,elementGenericTypeArgs);
    }
    MapArguments mapArguments=new MapArguments();
    mapArguments.setAttributeName(attributeName);
    mapArguments.setAnnotations(attributeMetadata.getAttributeAnnotations());
    mapArguments.setMapToBeFilled(retValue);
    mapArguments.setKeyClass(keyClass);
    mapArguments.setElementClass(elementClass);
    mapArguments.setKeyGenericTypeArgs(keyGenericTypeArgs.get());
    mapArguments.setElementGenericTypeArgs(elementGenericTypeArgs.get());
    fillMap(mapArguments,manufacturingCtx);
  }
 catch (  InstantiationException e) {
    throw new PodamMockeryException(MAP_CREATION_EXCEPTION_STR,e);
  }
catch (  IllegalAccessException e) {
    throw new PodamMockeryException(MAP_CREATION_EXCEPTION_STR,e);
  }
catch (  SecurityException e) {
    throw new PodamMockeryException(MAP_CREATION_EXCEPTION_STR,e);
  }
catch (  ClassNotFoundException e) {
    throw new PodamMockeryException(MAP_CREATION_EXCEPTION_STR,e);
  }
catch (  InvocationTargetException e) {
    throw new PodamMockeryException(MAP_CREATION_EXCEPTION_STR,e);
  }
  return retValue;
}","/** 
 * It manufactures and returns a Map with at least one element in it
 * @param pojo The POJO being initialized
 * @param manufacturingCtx the manufacturing context
 * @param attributeMetadata The attribute's metadata
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @return Map with at least one element in it
 * @throws IllegalArgumentException <ul> <li>If the attribute name is null or empty</li> <li>If the array of types of the Map has length different from 2</li> </ul>
 * @throws PodamMockeryException If an error occurred while creating the Map object
 */
private Map<? super Object,? super Object> resolveMapValueWhenMapIsPojoAttribute(Object pojo,ManufacturingContext manufacturingCtx,AttributeMetadata attributeMetadata,Map<String,Type> typeArgsMap){
  String attributeName=attributeMetadata.getAttributeName();
  Map<Object,Object> defaultValue=null;
  if (null != pojo && !Character.isDigit(attributeName.charAt(0))) {
    defaultValue=PodamUtils.getFieldValue(pojo,attributeName);
  }
  Map<Object,Object> retValue;
  if (null != defaultValue && (defaultValue.getClass().getModifiers() & Modifier.PRIVATE) == 0) {
    retValue=defaultValue;
  }
 else {
    @SuppressWarnings(""String_Node_Str"") Class<Map<Object,Object>> mapType=(Class<Map<Object,Object>>)attributeMetadata.getAttributeType();
    retValue=strategy.getTypeValue(attributeMetadata,typeArgsMap,mapType);
    if (null != retValue && null != defaultValue) {
      retValue.putAll(defaultValue);
    }
  }
  if (null == retValue) {
    return null;
  }
  try {
    Class<?> keyClass=null;
    Class<?> elementClass=null;
    AtomicReference<Type[]> keyGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
    if (ArrayUtils.isEmpty(attributeMetadata.getAttrGenericArgs())) {
      MapArguments mapArgs=findInheretedMapElementType(retValue,manufacturingCtx,typeArgsMap,attributeMetadata.getAttrGenericArgs());
      keyClass=mapArgs.getKeyClass();
      elementClass=mapArgs.getElementClass();
    }
 else {
      if (attributeMetadata.getAttrGenericArgs().length != 2) {
        throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + Arrays.toString(attributeMetadata.getAttrGenericArgs()));
      }
      Type[] actualTypeArguments=attributeMetadata.getAttrGenericArgs();
      keyClass=TypeManufacturerUtil.resolveGenericParameter(actualTypeArguments[0],typeArgsMap,keyGenericTypeArgs);
      elementClass=TypeManufacturerUtil.resolveGenericParameter(actualTypeArguments[1],typeArgsMap,elementGenericTypeArgs);
    }
    MapArguments mapArguments=new MapArguments();
    mapArguments.setAttributeName(attributeName);
    mapArguments.setAnnotations(attributeMetadata.getAttributeAnnotations());
    mapArguments.setMapToBeFilled(retValue);
    mapArguments.setKeyClass(keyClass);
    mapArguments.setElementClass(elementClass);
    mapArguments.setKeyGenericTypeArgs(keyGenericTypeArgs.get());
    mapArguments.setElementGenericTypeArgs(elementGenericTypeArgs.get());
    fillMap(mapArguments,manufacturingCtx);
  }
 catch (  InstantiationException e) {
    throw new PodamMockeryException(MAP_CREATION_EXCEPTION_STR,e);
  }
catch (  IllegalAccessException e) {
    throw new PodamMockeryException(MAP_CREATION_EXCEPTION_STR,e);
  }
catch (  SecurityException e) {
    throw new PodamMockeryException(MAP_CREATION_EXCEPTION_STR,e);
  }
catch (  ClassNotFoundException e) {
    throw new PodamMockeryException(MAP_CREATION_EXCEPTION_STR,e);
  }
catch (  InvocationTargetException e) {
    throw new PodamMockeryException(MAP_CREATION_EXCEPTION_STR,e);
  }
  return retValue;
}",0.9952076677316294
177931,"/** 
 * It returns a   {@link Field} matching the attribute name or null if a fieldwas not found.
 * @param pojoClass The class supposed to contain the field
 * @param attributeName The field name
 * @return a {@link Field} matching the attribute name or null if a fieldwas not found.
 */
public static Field getField(Class<?> pojoClass,String attributeName){
  Field field=null;
  Class<?> clazz=pojoClass;
  while (clazz != null) {
    try {
      field=clazz.getDeclaredField(attributeName);
      break;
    }
 catch (    NoSuchFieldException e) {
      clazz=clazz.getSuperclass();
    }
  }
  if (field == null) {
    LOG.warn(""String_Node_Str"",pojoClass,attributeName);
  }
  return field;
}","/** 
 * It returns a   {@link Field} matching the attribute name or null if a fieldwas not found.
 * @param pojoClass The class supposed to contain the field
 * @param attributeName The field name
 * @return a {@link Field} matching the attribute name or null if a fieldwas not found.
 */
public static Field getField(Class<?> pojoClass,String attributeName){
  Class<?> clazz=pojoClass;
  while (clazz != null) {
    try {
      return clazz.getDeclaredField(attributeName);
    }
 catch (    NoSuchFieldException e) {
      clazz=clazz.getSuperclass();
    }
  }
  LOG.warn(""String_Node_Str"",pojoClass,attributeName);
  return null;
}",0.9235382308845578
177932,"private void log(AttributeMetadata attributeMetadata){
  LOG.trace(""String_Node_Str"",attributeMetadata.getPojoClass().getName(),attributeMetadata.getAttributeName() != null ? attributeMetadata.getAttributeName() : ""String_Node_Str"");
}","private void log(AttributeMetadata attributeMetadata){
  LOG.trace(""String_Node_Str"",attributeMetadata.getPojoClass() != null ? attributeMetadata.getPojoClass().getName() : ""String_Node_Str"",attributeMetadata.getAttributeName() != null ? attributeMetadata.getAttributeName() : ""String_Node_Str"");
}",0.8818011257035647
177933,"/** 
 * It manufactures and returns the value for a POJO attribute.
 * @param pojo The POJO being filled with values
 * @param manufacturingCtx the manufacturing context
 * @param attributeType The type of the attribute for which a value is being manufactured
 * @param genericAttributeType The generic type of the attribute for which a value is being manufactured
 * @param annotations The annotations for the attribute being considered
 * @param attributeName The attribute name
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return The value for an attribute
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws IllegalArgumentException <ul> <li>If an illegal argument was passed</li> <li>If an invalid value was set for a precise value in an annotation and such value could not be converted to the desired type</li> </ul>
 * @throws ClassNotFoundException If class being manufactured cannot be loaded
 */
private Object manufactureAttributeValue(Object pojo,ManufacturingContext manufacturingCtx,Class<?> attributeType,Type genericAttributeType,List<Annotation> annotations,String attributeName,Map<String,Type> typeArgsMap,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Object attributeValue=null;
  Class<?> pojoClass=(pojo instanceof Class ? (Class<?>)pojo : pojo.getClass());
  Class<?> realAttributeType;
  if (attributeType != genericAttributeType && Object.class.equals(attributeType) && genericAttributeType instanceof TypeVariable) {
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
    realAttributeType=TypeManufacturerUtil.resolveGenericParameter(genericAttributeType,typeArgsMap,elementGenericTypeArgs);
  }
 else {
    realAttributeType=attributeType;
  }
  TypeVariable<?>[] typeParams=attributeType.getTypeParameters();
  Type[] genericTypeArgsAll;
  if (typeParams.length > genericTypeArgs.length) {
    genericTypeArgsAll=TypeManufacturerUtil.mergeActualAndSuppliedGenericTypes(typeParams,genericAttributeType,genericTypeArgs,typeArgsMap);
  }
 else {
    genericTypeArgsAll=genericTypeArgs;
  }
  AttributeMetadata attributeMetadata=new AttributeMetadata(attributeName,realAttributeType,genericAttributeType,genericTypeArgsAll,annotations,pojoClass);
  if (realAttributeType.isPrimitive() || TypeManufacturerUtil.isWrapper(realAttributeType) || realAttributeType.equals(String.class)) {
    attributeValue=typeMultiplexer.getTypeValue(strategy,attributeMetadata,typeArgsMap,realAttributeType.getName());
  }
 else   if (realAttributeType.isArray()) {
    attributeValue=resolveArrayElementValue(realAttributeType,genericAttributeType,attributeName,manufacturingCtx,annotations,pojo,typeArgsMap);
  }
 else   if (Collection.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveCollectionValueWhenCollectionIsPojoAttribute(pojo,manufacturingCtx,realAttributeType,attributeName,annotations,typeArgsMap,genericTypeArgsAll);
  }
 else   if (Map.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveMapValueWhenMapIsPojoAttribute(pojo,manufacturingCtx,realAttributeType,attributeName,annotations,typeArgsMap,genericTypeArgsAll);
  }
 else   if (realAttributeType.isEnum()) {
    attributeValue=typeMultiplexer.getTypeValue(strategy,attributeMetadata,typeArgsMap,PodamConstants.ENUMERATION_QUALIFIER);
  }
 else   if (Type.class.isAssignableFrom(realAttributeType)) {
    attributeValue=typeMultiplexer.getTypeValue(strategy,attributeMetadata,typeArgsMap,PodamConstants.GENERIC_TYPE_QUALIFIER);
  }
  if (attributeValue == null) {
    Integer depth=manufacturingCtx.getPojos().get(realAttributeType);
    if (depth == null) {
      depth=-1;
    }
    if (depth <= strategy.getMaxDepth(pojoClass)) {
      manufacturingCtx.getPojos().put(realAttributeType,depth + 1);
      attributeValue=this.manufacturePojoInternal(realAttributeType,attributeMetadata,manufacturingCtx,genericTypeArgsAll);
      manufacturingCtx.getPojos().put(realAttributeType,depth);
    }
 else {
      attributeValue=resortToExternalFactory(manufacturingCtx,""String_Node_Str"",realAttributeType,genericTypeArgsAll);
    }
  }
  return attributeValue;
}","/** 
 * It manufactures and returns the value for a POJO attribute.
 * @param pojo The POJO being filled with values
 * @param manufacturingCtx the manufacturing context
 * @param attributeType The type of the attribute for which a value is being manufactured
 * @param genericAttributeType The generic type of the attribute for which a value is being manufactured
 * @param annotations The annotations for the attribute being considered
 * @param attributeName The attribute name
 * @param typeArgsMap a map relating the generic class arguments (""&lt;T, V&gt;"" for example) with their actual types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return The value for an attribute
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws IllegalArgumentException <ul> <li>If an illegal argument was passed</li> <li>If an invalid value was set for a precise value in an annotation and such value could not be converted to the desired type</li> </ul>
 * @throws ClassNotFoundException If class being manufactured cannot be loaded
 */
private Object manufactureAttributeValue(Object pojo,ManufacturingContext manufacturingCtx,Class<?> attributeType,Type genericAttributeType,List<Annotation> annotations,String attributeName,Map<String,Type> typeArgsMap,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Object attributeValue=null;
  Class<?> pojoClass=(pojo instanceof Class ? (Class<?>)pojo : pojo.getClass());
  Class<?> realAttributeType;
  if (attributeType != genericAttributeType && Object.class.equals(attributeType) && genericAttributeType instanceof TypeVariable) {
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(PodamConstants.NO_TYPES);
    realAttributeType=TypeManufacturerUtil.resolveGenericParameter(genericAttributeType,typeArgsMap,elementGenericTypeArgs);
  }
 else {
    realAttributeType=attributeType;
  }
  TypeVariable<?>[] typeParams=attributeType.getTypeParameters();
  Type[] genericTypeArgsAll;
  if (typeParams.length > genericTypeArgs.length) {
    genericTypeArgsAll=TypeManufacturerUtil.mergeActualAndSuppliedGenericTypes(typeParams,genericAttributeType,genericTypeArgs,typeArgsMap);
  }
 else {
    genericTypeArgsAll=genericTypeArgs;
  }
  AttributeMetadata attributeMetadata=new AttributeMetadata(attributeName,realAttributeType,genericAttributeType,genericTypeArgsAll,annotations,pojoClass);
  if (realAttributeType.isArray()) {
    attributeValue=resolveArrayElementValue(realAttributeType,genericAttributeType,attributeName,manufacturingCtx,annotations,pojo,typeArgsMap);
  }
 else   if (Collection.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveCollectionValueWhenCollectionIsPojoAttribute(pojo,manufacturingCtx,realAttributeType,attributeName,annotations,typeArgsMap,genericTypeArgsAll);
  }
 else   if (Map.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveMapValueWhenMapIsPojoAttribute(pojo,manufacturingCtx,realAttributeType,attributeName,annotations,typeArgsMap,genericTypeArgsAll);
  }
 else   if (Type.class.isAssignableFrom(realAttributeType)) {
    attributeValue=typeMultiplexer.getTypeValue(strategy,attributeMetadata,typeArgsMap,PodamConstants.GENERIC_TYPE_QUALIFIER);
  }
  if (attributeValue == null) {
    Integer depth=manufacturingCtx.getPojos().get(realAttributeType);
    if (depth == null) {
      depth=-1;
    }
    if (depth <= strategy.getMaxDepth(pojoClass)) {
      manufacturingCtx.getPojos().put(realAttributeType,depth + 1);
      attributeValue=this.manufacturePojoInternal(realAttributeType,attributeMetadata,manufacturingCtx,genericTypeArgsAll);
      manufacturingCtx.getPojos().put(realAttributeType,depth);
    }
 else {
      attributeValue=resortToExternalFactory(manufacturingCtx,""String_Node_Str"",realAttributeType,genericTypeArgsAll);
    }
  }
  return attributeValue;
}",0.8718065175428636
177934,"/** 
 * Generic method which returns an instance of the given class filled with values dictated by the strategy
 * @param < T > The type for which a filled instance is required
 * @param pojoClass The name of the class for which an instance filled with values is required
 * @param pojoMetadata attribute metadata for POJOs produced recursively
 * @param manufacturingCtx the manufacturing context
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return An instance of &lt;T&gt; filled with dummy values
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If manufactured class cannot be loaded
 * @throws PodamMockeryException if a problem occurred while creating a POJO instance or while setting its state
 */
private <T>T manufacturePojoInternal(Class<T> pojoClass,AttributeMetadata pojoMetadata,ManufacturingContext manufacturingCtx,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  @SuppressWarnings(""String_Node_Str"") T objectToReuse=(T)strategy.getMemoizedObject(pojoMetadata);
  if (objectToReuse != null) {
    LOG.debug(""String_Node_Str"",pojoClass,Arrays.toString(genericTypeArgs));
    return objectToReuse;
  }
 else {
    LOG.debug(""String_Node_Str"",pojoClass,Arrays.toString(genericTypeArgs));
  }
  final Map<String,Type> typeArgsMap=new HashMap<String,Type>();
  if (pojoClass.isEnum()) {
    @SuppressWarnings(""String_Node_Str"") T tmp=(T)typeMultiplexer.getTypeValue(strategy,pojoMetadata,typeArgsMap,PodamConstants.ENUMERATION_QUALIFIER);
    return tmp;
  }
  if (pojoClass.isPrimitive()) {
    @SuppressWarnings(""String_Node_Str"") T tmp=(T)typeMultiplexer.getTypeValue(strategy,pojoMetadata,typeArgsMap,pojoClass.getName());
    return tmp;
  }
  Type[] genericTypeArgsExtra=TypeManufacturerUtil.fillTypeArgMap(typeArgsMap,pojoClass,genericTypeArgs);
  if (pojoClass.isInterface()) {
    return getValueForAbstractType(pojoClass,pojoMetadata,manufacturingCtx,typeArgsMap,genericTypeArgs);
  }
  T retValue=null;
  try {
    retValue=instantiatePojo(pojoClass,manufacturingCtx,typeArgsMap,genericTypeArgsExtra);
  }
 catch (  SecurityException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
  if (retValue == null) {
    return getValueForAbstractType(pojoClass,pojoMetadata,manufacturingCtx,typeArgsMap,genericTypeArgs);
  }
 else {
    strategy.cacheMemoizedObject(pojoMetadata,retValue);
    populatePojoInternal(retValue,manufacturingCtx,typeArgsMap,genericTypeArgsExtra);
  }
  return retValue;
}","/** 
 * Generic method which returns an instance of the given class filled with values dictated by the strategy
 * @param < T > The type for which a filled instance is required
 * @param pojoClass The name of the class for which an instance filled with values is required
 * @param pojoMetadata attribute metadata for POJOs produced recursively
 * @param manufacturingCtx the manufacturing context
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return An instance of &lt;T&gt; filled with dummy values
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If manufactured class cannot be loaded
 * @throws PodamMockeryException if a problem occurred while creating a POJO instance or while setting its state
 */
private <T>T manufacturePojoInternal(Class<T> pojoClass,AttributeMetadata pojoMetadata,ManufacturingContext manufacturingCtx,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  @SuppressWarnings(""String_Node_Str"") T objectToReuse=(T)strategy.getMemoizedObject(pojoMetadata);
  if (objectToReuse != null) {
    LOG.debug(""String_Node_Str"",pojoClass,Arrays.toString(genericTypeArgs));
    return objectToReuse;
  }
 else {
    LOG.debug(""String_Node_Str"",pojoClass,Arrays.toString(genericTypeArgs));
  }
  final Map<String,Type> typeArgsMap=new HashMap<String,Type>();
  if (pojoClass.isEnum()) {
    @SuppressWarnings(""String_Node_Str"") T tmp=(T)typeMultiplexer.getTypeValue(strategy,pojoMetadata,typeArgsMap,PodamConstants.ENUMERATION_QUALIFIER);
    return tmp;
  }
  if (pojoClass.isPrimitive() || pojoClass.equals(String.class) || TypeManufacturerUtil.isWrapper(pojoClass)) {
    @SuppressWarnings(""String_Node_Str"") T tmp=(T)typeMultiplexer.getTypeValue(strategy,pojoMetadata,typeArgsMap,pojoClass.getName());
    return tmp;
  }
  Type[] genericTypeArgsExtra=TypeManufacturerUtil.fillTypeArgMap(typeArgsMap,pojoClass,genericTypeArgs);
  if (pojoClass.isInterface()) {
    return getValueForAbstractType(pojoClass,pojoMetadata,manufacturingCtx,typeArgsMap,genericTypeArgs);
  }
  T retValue=null;
  try {
    retValue=instantiatePojo(pojoClass,manufacturingCtx,typeArgsMap,genericTypeArgsExtra);
  }
 catch (  SecurityException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
  if (retValue == null) {
    return getValueForAbstractType(pojoClass,pojoMetadata,manufacturingCtx,typeArgsMap,genericTypeArgs);
  }
 else {
    strategy.cacheMemoizedObject(pojoMetadata,retValue);
    populatePojoInternal(retValue,manufacturingCtx,typeArgsMap,genericTypeArgsExtra);
  }
  return retValue;
}",0.9862297367962348
177935,"/** 
 * Full constructor
 * @param list1 First List
 * @param list2 Second List
 */
public GenericCollectionsConstructorPojo(List<Long> list1,List<String> list2){
  this.list1=new ArrayList<Long>(list1);
  this.list2=new ArrayList<String>(list2);
}","/** 
 * Full constructor
 * @param list1 First List
 * @param list2 Second List
 */
public GenericCollectionsConstructorPojo(List<Long> list1,List<String> list2,List<?> list3){
  this.list1=new Vector<Long>(list1);
  this.list2=new Vector<String>(list2);
  this.list3=new Vector<Object>(list3);
}",0.8455882352941176
177936,"@Override public String toString(){
  final StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(list1);
  sb.append(""String_Node_Str"").append(list2);
  sb.append('}');
  return sb.toString();
}","@Override public String toString(){
  final StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(list1);
  sb.append(""String_Node_Str"").append(list2);
  sb.append(""String_Node_Str"").append(list3);
  sb.append('}');
  return sb.toString();
}",0.9105058365758756
177937,"@Test @Title(""String_Node_Str"") public void podamShouldHandleGenericCollectionsInConstructorWithMemoizationDisabled() throws Exception {
  PodamFactory podamFactory=podamFactorySteps.givenAStandardPodamFactory();
  GenericCollectionsConstructorPojo pojo=podamInvocationSteps.whenIInvokeTheFactoryForClass(GenericCollectionsConstructorPojo.class,podamFactory);
  podamValidationSteps.theObjectShouldNotBeNull(pojo);
  podamValidationSteps.theCollectionShouldNotBeNullOrEmptyAndContainElementsOfType(pojo.getList1(),Long.class);
  podamValidationSteps.theCollectionShouldNotBeNullOrEmptyAndContainElementsOfType(pojo.getList2(),String.class);
}","@Test @Title(""String_Node_Str"") public void podamShouldHandleGenericCollectionsInConstructorWithMemoizationDisabled() throws Exception {
  PodamFactory podamFactory=podamFactorySteps.givenAStandardPodamFactory();
  GenericCollectionsConstructorPojo pojo=podamInvocationSteps.whenIInvokeTheFactoryForClass(GenericCollectionsConstructorPojo.class,podamFactory);
  podamValidationSteps.theObjectShouldNotBeNull(pojo);
  podamValidationSteps.theCollectionShouldNotBeNullOrEmptyAndContainElementsOfType(pojo.getList1(),Long.class);
  podamValidationSteps.theCollectionShouldNotBeNullOrEmptyAndContainElementsOfType(pojo.getList2(),String.class);
  podamValidationSteps.theCollectionShouldNotBeNullOrEmptyAndContainElementsOfType(pojo.getList3(),Object.class);
}",0.9184549356223176
177938,"@Test @Title(""String_Node_Str"") public void podamShouldHandleGenericCollectionsInConstructorWithMemoizationEnabled() throws Exception {
  PodamFactory podamFactory=podamFactorySteps.givenAStandardPodamFactoryWithMemoizationEnabled();
  GenericCollectionsConstructorPojo pojo=podamInvocationSteps.whenIInvokeTheFactoryForClass(GenericCollectionsConstructorPojo.class,podamFactory);
  podamValidationSteps.theObjectShouldNotBeNull(pojo);
  podamValidationSteps.theCollectionShouldNotBeNullOrEmptyAndContainElementsOfType(pojo.getList1(),Long.class);
  podamValidationSteps.theCollectionShouldNotBeNullOrEmptyAndContainElementsOfType(pojo.getList2(),String.class);
}","@Test @Title(""String_Node_Str"") public void podamShouldHandleGenericCollectionsInConstructorWithMemoizationEnabled() throws Exception {
  PodamFactory podamFactory=podamFactorySteps.givenAStandardPodamFactoryWithMemoizationEnabled();
  GenericCollectionsConstructorPojo pojo=podamInvocationSteps.whenIInvokeTheFactoryForClass(GenericCollectionsConstructorPojo.class,podamFactory);
  podamValidationSteps.theObjectShouldNotBeNull(pojo);
  podamValidationSteps.theCollectionShouldNotBeNullOrEmptyAndContainElementsOfType(pojo.getList1(),Long.class);
  podamValidationSteps.theCollectionShouldNotBeNullOrEmptyAndContainElementsOfType(pojo.getList2(),String.class);
  podamValidationSteps.theCollectionShouldNotBeNullOrEmptyAndContainElementsOfType(pojo.getList3(),Object.class);
}",0.9208333333333332
177939,"@Step(""String_Node_Str"") public boolean theObjectShouldNotBeNull(Object pojo){
  return pojo == null;
}","@Step(""String_Node_Str"") public void theObjectShouldNotBeNull(Object pojo){
  assertThat(pojo,is(notNullValue()));
}",0.8036529680365296
177940,"/** 
 * Full constructor.
 * @param dataProviderStrategy The DataProviderStrategy
 * @param attributeMetadata    The AttributeMetadata
 * @param typeArgumentsMap The map of type arguments
 */
public TypeManufacturerParamsWrapperForGenericTypes(DataProviderStrategy dataProviderStrategy,AttributeMetadata attributeMetadata,Map<String,Type> typeArgumentsMap,Type attributeGenericType){
  super(dataProviderStrategy,attributeMetadata);
  this.typeArgumentsMap=new HashMap<String,Type>(typeArgumentsMap);
  this.attributeGenericType=attributeGenericType;
}","/** 
 * Full constructor.
 * @param dataProviderStrategy The DataProviderStrategy
 * @param attributeMetadata    The AttributeMetadata
 * @param typeArgumentsMap The map of type arguments
 * @param attributeGenericType The attribute generic type
 */
public TypeManufacturerParamsWrapperForGenericTypes(DataProviderStrategy dataProviderStrategy,AttributeMetadata attributeMetadata,Map<String,Type> typeArgumentsMap,Type attributeGenericType){
  super(dataProviderStrategy,attributeMetadata);
  this.typeArgumentsMap=new HashMap<String,Type>(typeArgumentsMap);
  this.attributeGenericType=attributeGenericType;
}",0.9500860585197934
177941,"/** 
 * It returns a   {@link Calendar} objects complying with Java bean validationannotations. {@inheritDoc}
 */
public Object getValue() throws PodamMockeryException {
  if (null != findTypeFromList(annotations,AssertTrue.class)) {
    return Boolean.TRUE;
  }
  if (null != findTypeFromList(annotations,AssertFalse.class)) {
    return Boolean.FALSE;
  }
  if (null != findTypeFromList(annotations,Past.class)) {
    int days=RANDOM.nextInt(365) + 1;
    long timestamp=System.currentTimeMillis() - TimeUnit.DAYS.toSeconds(days);
    return timestampToReturnType(timestamp);
  }
  if (null != findTypeFromList(annotations,Future.class)) {
    int days=RANDOM.nextInt(365) + 1;
    long timestamp=System.currentTimeMillis() + TimeUnit.DAYS.toSeconds(days);
    return timestampToReturnType(timestamp);
  }
  Annotation minAnno=null;
  Annotation maxAnno=null;
  minAnno=findTypeFromList(annotations,DecimalMin.class);
  maxAnno=findTypeFromList(annotations,DecimalMax.class);
  if ((null != minAnno) || (null != maxAnno)) {
    BigDecimal min;
    if (null != minAnno) {
      DecimalMin tmp=(DecimalMin)minAnno;
      min=new BigDecimal(tmp.value());
    }
 else {
      min=new BigDecimal(Double.MIN_VALUE);
    }
    BigDecimal max;
    if (null != maxAnno) {
      DecimalMax tmp=(DecimalMax)maxAnno;
      max=new BigDecimal(tmp.value());
    }
 else {
      max=new BigDecimal(Double.MAX_VALUE);
    }
    return decimalToReturnType(getValueInRange(min,max));
  }
  minAnno=findTypeFromList(annotations,Min.class);
  maxAnno=findTypeFromList(annotations,Max.class);
  if ((null != minAnno) || (null != maxAnno)) {
    BigDecimal min;
    if (null != minAnno) {
      Min tmp=(Min)minAnno;
      min=new BigDecimal(tmp.value());
    }
 else {
      min=new BigDecimal(Double.MIN_VALUE);
    }
    BigDecimal max;
    if (null != maxAnno) {
      Max tmp=(Max)maxAnno;
      max=new BigDecimal(tmp.value());
    }
 else {
      max=new BigDecimal(Double.MAX_VALUE);
    }
    BigInteger intValue=getValueInRange(min,max).toBigInteger();
    BigDecimal value=new BigDecimal(intValue);
    return decimalToReturnType(value);
  }
  if (null != (minAnno=findTypeFromList(annotations,Digits.class))) {
    Digits digits=(Digits)minAnno;
    BigDecimal divisor=BigDecimal.TEN.pow(digits.fraction());
    BigDecimal max=BigDecimal.TEN.pow(digits.integer()).multiply(divisor);
    BigDecimal min=max.negate();
    BigInteger intValue=getValueInRange(min,max).toBigInteger();
    BigDecimal value=new BigDecimal(intValue).divide(divisor);
    return decimalToReturnType(value);
  }
  if (null != (minAnno=findTypeFromList(annotations,Size.class))) {
    Size size=(Size)minAnno;
    long length=PodamUtils.getLongInRange(size.min(),size.max());
    StringBuilder sb=new StringBuilder();
    while (sb.length() < length) {
      sb.append(PodamUtils.getNiceCharacter());
    }
    return sb.toString();
  }
  if (null != (minAnno=findTypeFromList(annotations,Pattern.class))) {
    Pattern pattern=(Pattern)minAnno;
    LOG.warn(""String_Node_Str"" + ""String_Node_Str"",pattern.regexp());
    return null;
  }
  return null;
}","/** 
 * It returns a   {@link Calendar} objects complying with Java bean validationannotations. {@inheritDoc}
 */
public Object getValue() throws PodamMockeryException {
  if (null != findTypeFromList(annotations,AssertTrue.class)) {
    return Boolean.TRUE;
  }
  if (null != findTypeFromList(annotations,AssertFalse.class)) {
    return Boolean.FALSE;
  }
  if (null != findTypeFromList(annotations,Past.class)) {
    int days=RANDOM.nextInt(365) + 1;
    long timestamp=System.currentTimeMillis() - TimeUnit.DAYS.toSeconds(days);
    return timestampToReturnType(timestamp);
  }
  if (null != findTypeFromList(annotations,Future.class)) {
    int days=RANDOM.nextInt(365) + 1;
    long timestamp=System.currentTimeMillis() + TimeUnit.DAYS.toSeconds(days);
    return timestampToReturnType(timestamp);
  }
  Annotation minAnno=null;
  Annotation maxAnno=null;
  minAnno=findTypeFromList(annotations,DecimalMin.class);
  maxAnno=findTypeFromList(annotations,DecimalMax.class);
  if ((null != minAnno) || (null != maxAnno)) {
    BigDecimal min;
    if (null != minAnno) {
      DecimalMin tmp=(DecimalMin)minAnno;
      min=new BigDecimal(tmp.value());
    }
 else {
      min=new BigDecimal(Double.MIN_VALUE);
    }
    BigDecimal max;
    if (null != maxAnno) {
      DecimalMax tmp=(DecimalMax)maxAnno;
      max=new BigDecimal(tmp.value());
    }
 else {
      max=new BigDecimal(Double.MAX_VALUE);
    }
    return decimalToReturnType(getValueInRange(min,max));
  }
  minAnno=findTypeFromList(annotations,Min.class);
  maxAnno=findTypeFromList(annotations,Max.class);
  if ((null != minAnno) || (null != maxAnno)) {
    BigDecimal min;
    if (null != minAnno) {
      Min tmp=(Min)minAnno;
      min=new BigDecimal(tmp.value());
    }
 else {
      min=new BigDecimal(Double.MIN_VALUE);
    }
    BigDecimal max;
    if (null != maxAnno) {
      Max tmp=(Max)maxAnno;
      max=new BigDecimal(tmp.value());
    }
 else {
      max=new BigDecimal(Double.MAX_VALUE);
    }
    BigInteger intValue=getValueInRange(min,max).toBigInteger();
    BigDecimal value=new BigDecimal(intValue);
    return decimalToReturnType(value);
  }
  if (null != (minAnno=findTypeFromList(annotations,Digits.class))) {
    Digits digits=(Digits)minAnno;
    BigDecimal divisor=BigDecimal.TEN.pow(digits.fraction());
    BigDecimal max=BigDecimal.TEN.pow(digits.integer()).multiply(divisor);
    BigDecimal min=max.negate();
    BigInteger intValue=getValueInRange(min,max).toBigInteger();
    BigDecimal value=new BigDecimal(intValue).divide(divisor);
    return decimalToReturnType(value);
  }
  if (null != (minAnno=findTypeFromList(annotations,Size.class))) {
    Size size=(Size)minAnno;
    int minValue=size.min();
    int maxValue=size.max();
    if (maxValue == Integer.MAX_VALUE) {
      maxValue=PodamConstants.STR_DEFAULT_LENGTH;
    }
    long length=PodamUtils.getLongInRange(minValue,maxValue);
    StringBuilder sb=new StringBuilder();
    while (sb.length() < length) {
      sb.append(PodamUtils.getNiceCharacter());
    }
    return sb.toString();
  }
  if (null != (minAnno=findTypeFromList(annotations,Pattern.class))) {
    Pattern pattern=(Pattern)minAnno;
    LOG.warn(""String_Node_Str"" + ""String_Node_Str"",pattern.regexp());
    return null;
  }
  return null;
}",0.9701048677414306
177942,"@Test @Title(""String_Node_Str"") public void podamShouldFulfillMostOfTheJavaxValidationFramework() throws Exception {
  PodamFactory podamFactory=podamFactorySteps.givenAPodamFactoryWithEmailStrategy();
  ValidatedPojo pojo=podamInvocationSteps.whenIInvokeTheFactoryForClass(ValidatedPojo.class,podamFactory);
  podamValidationSteps.theObjectShouldNotBeNull(pojo);
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getBoolFalse());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getBoolTrue());
  podamValidationSteps.theStringFieldCannotBeNullOrEmpty(pojo.getFilledString());
  podamValidationSteps.theObjectShouldBeNull(pojo.getEmptyString());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getDecimalDouble());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getDecimalFloat());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getDecimalString());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getLongNumber());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getIntNumber());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getBigIntNumber());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getShortNumber());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getByteNumber());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getIntString());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getFractionDecimal());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getFractionString());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getPastDate());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getFutureCalendar());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getSizedString());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getMaxCollection());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getMinCollection());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getEmail());
  podamValidationSteps.theObjectShouldBeNull(pojo.getIdentifier());
  Validator validator=podamFactorySteps.givenAJavaxValidator();
  validatorSteps.thePojoShouldNotViolateAnyValidations(validator,pojo);
}","@Test @Title(""String_Node_Str"") public void podamShouldFulfillMostOfTheJavaxValidationFramework() throws Exception {
  PodamFactory podamFactory=podamFactorySteps.givenAPodamFactoryWithEmailStrategy();
  ValidatedPojo pojo=podamInvocationSteps.whenIInvokeTheFactoryForClass(ValidatedPojo.class,podamFactory);
  podamValidationSteps.theObjectShouldNotBeNull(pojo);
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getBoolFalse());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getBoolTrue());
  podamValidationSteps.theStringFieldCannotBeNullOrEmpty(pojo.getFilledString());
  podamValidationSteps.theObjectShouldBeNull(pojo.getEmptyString());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getDecimalDouble());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getDecimalFloat());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getDecimalString());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getLongNumber());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getIntNumber());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getBigIntNumber());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getShortNumber());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getByteNumber());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getIntString());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getFractionDecimal());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getFractionString());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getPastDate());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getFutureCalendar());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getSizedString());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getMaxCollection());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getMinCollection());
  podamValidationSteps.theObjectShouldNotBeNull(pojo.getEmail());
  podamValidationSteps.theObjectShouldBeNull(pojo.getIdentifier());
  Validator validator=podamFactorySteps.givenAJavaxValidator();
  validatorSteps.thePojoShouldNotViolateAnyValidationsOnValidatedPojo(validator,pojo);
}",0.9964209019327128
177943,"/** 
 * Bind an interface/abstract class to a specific implementation. If the strategy previously contained a binding for the interface/abstract class, the old value is replaced by the new value. If you want to implement more sophisticated binding strategy, override this class.
 * @param < T > return type
 * @param abstractClass the interface/abstract class to bind
 * @param specificClass the specific class implementing or extending {@code abstractClass}.
 * @return itself
 */
public <T>AbstractRandomDataProviderStrategy addSpecific(final Class<T> abstractClass,final Class<? extends T> specificClass){
  Class<?> aClass=specificTypes.putIfAbsent(abstractClass,specificClass);
  if (aClass == null) {
    aClass=specificClass;
  }
  return this;
}","/** 
 * Bind an interface/abstract class to a specific implementation. If the strategy previously contained a binding for the interface/abstract class, the old value is replaced by the new value. If you want to implement more sophisticated binding strategy, override this class.
 * @param < T > return type
 * @param abstractClass the interface/abstract class to bind
 * @param specificClass the specific class implementing or extending {@code abstractClass}.
 * @return itself
 */
public <T>AbstractRandomDataProviderStrategy addSpecific(final Class<T> abstractClass,final Class<? extends T> specificClass){
  Class<? extends T> aClass=(Class<? extends T>)specificTypes.putIfAbsent(abstractClass,specificClass);
  if (aClass == null) {
    aClass=specificClass;
  }
  return this;
}",0.98046875
177944,"/** 
 * Given the attribute and setter it combines annotations from them or an empty collection if no custom annotations were found
 * @param attribute The class attribute
 * @param attributeName The class attribute's setter
 * @return all annotations for the attribute
 */
public static List<Annotation> getAttributeAnnotations(final Field attribute,final Method setter){
  Annotation[] annotations=(attribute != null ? attribute.getAnnotations() : null);
  List<Annotation> retValue;
  if (annotations != null && annotations.length != 0) {
    retValue=Arrays.asList(annotations);
  }
 else {
    retValue=new ArrayList<Annotation>();
  }
  for (  Annotation annotation : setter.getParameterAnnotations()[0]) {
    retValue.add(annotation);
  }
  return retValue;
}","/** 
 * Given the attribute and setter it combines annotations from them or an empty collection if no custom annotations were found
 * @param attribute The class attribute
 * @param setter The class attribute's setter
 * @return all annotations for the attribute
 */
public static List<Annotation> getAttributeAnnotations(final Field attribute,final Method setter){
  Annotation[] annotations=(attribute != null ? attribute.getAnnotations() : null);
  List<Annotation> retValue;
  if (annotations != null && annotations.length != 0) {
    retValue=Arrays.asList(annotations);
  }
 else {
    retValue=new ArrayList<Annotation>();
  }
  for (  Annotation annotation : setter.getParameterAnnotations()[0]) {
    retValue.add(annotation);
  }
  return retValue;
}",0.9875573018991488
177945,"/** 
 * It manufactures and returns the value for a POJO attribute.
 * @param pojo The POJO being filled with values
 * @param pojos Set of manufactured pojos' types
 * @param attributeType The type of the attribute for which a value is being manufactured
 * @param genericAttributeType The generic type of the attribute for which a value is being manufactured
 * @param annotations The annotations for the attribute being considered
 * @param attributeName The attribute name
 * @param typeArgsMap a map relating the generic class arguments (""<T, V>"" for example) with their actual types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return The value for an attribute
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If it was not possible to create a class from a string
 * @throws IllegalArgumentException <ul> <li>If an illegal argument was passed</li> <li>If an invalid value was set for a precise value in an annotation and such value could not be converted to the desired type</li> </ul>
 */
private Object manufactureAttributeValue(Object pojo,Map<Class<?>,Integer> pojos,Class<?> attributeType,Type genericAttributeType,List<Annotation> annotations,String attributeName,Map<String,Type> typeArgsMap,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Object attributeValue=null;
  Class<?> realAttributeType;
  if (Object.class.equals(attributeType) && attributeType != genericAttributeType) {
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(NO_TYPES);
    realAttributeType=resolveGenericParameter(genericAttributeType,typeArgsMap,elementGenericTypeArgs);
  }
 else {
    realAttributeType=attributeType;
  }
  AttributeMetadata attributeMetadata=new AttributeMetadata(attributeName,realAttributeType,annotations,pojo.getClass());
  if (realAttributeType.isPrimitive()) {
    attributeValue=resolvePrimitiveValue(realAttributeType,annotations,attributeMetadata);
  }
 else   if (isWrapper(realAttributeType)) {
    attributeValue=resolveWrapperValue(realAttributeType,annotations,attributeMetadata);
  }
 else   if (realAttributeType.equals(String.class)) {
    attributeValue=resolveStringValue(annotations,attributeMetadata);
  }
 else   if (realAttributeType.isArray()) {
    attributeValue=resolveArrayElementValue(realAttributeType,genericAttributeType,pojos,annotations,pojo,attributeName,typeArgsMap);
  }
 else   if (Collection.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveCollectionValueWhenCollectionIsPojoAttribute(pojo,pojos,realAttributeType,attributeName,annotations,typeArgsMap,genericTypeArgs);
  }
 else   if (Map.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveMapValueWhenMapIsPojoAttribute(pojo,pojos,realAttributeType,attributeName,annotations,typeArgsMap,genericTypeArgs);
  }
 else   if (realAttributeType.isEnum()) {
    int enumConstantsLength=realAttributeType.getEnumConstants().length;
    if (enumConstantsLength > 0) {
      int enumIndex=strategy.getIntegerInRange(0,enumConstantsLength,attributeMetadata) % enumConstantsLength;
      attributeValue=realAttributeType.getEnumConstants()[enumIndex];
    }
  }
 else   if (Type.class.isAssignableFrom(realAttributeType)) {
    if (genericTypeArgs.length > 0 && genericTypeArgs[0] != null) {
      AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(NO_TYPES);
      attributeValue=resolveGenericParameter(genericTypeArgs[0],typeArgsMap,elementGenericTypeArgs);
    }
 else {
      LOG.error(""String_Node_Str"",genericAttributeType,typeArgsMap,Arrays.toString(genericTypeArgs));
    }
  }
  if (attributeValue == null) {
    TypeVariable<?>[] typeParams=attributeType.getTypeParameters();
    List<Type> resolvedTypes=new ArrayList<Type>();
    for (int i=0; i < typeParams.length; i++) {
      Type type=typeArgsMap.get(typeParams[i].getName());
      if (type != null) {
        resolvedTypes.add(type);
      }
    }
    Type[] genericTypeArgsAll=mergeTypeArrays(resolvedTypes.toArray(new Type[resolvedTypes.size()]),genericTypeArgs);
    Integer depth=pojos.get(realAttributeType);
    if (depth == null) {
      depth=-1;
    }
    if (depth <= strategy.getMaxDepth(pojo.getClass())) {
      pojos.put(realAttributeType,depth + 1);
      attributeValue=this.manufacturePojoInternal(realAttributeType,pojos,genericTypeArgsAll);
      pojos.put(realAttributeType,depth);
    }
 else {
      LOG.warn(""String_Node_Str"",realAttributeType);
      attributeValue=externalFactory.manufacturePojo(realAttributeType,genericTypeArgsAll);
    }
  }
  return attributeValue;
}","/** 
 * It manufactures and returns the value for a POJO attribute.
 * @param pojo The POJO being filled with values
 * @param pojos Set of manufactured pojos' types
 * @param attributeType The type of the attribute for which a value is being manufactured
 * @param genericAttributeType The generic type of the attribute for which a value is being manufactured
 * @param annotations The annotations for the attribute being considered
 * @param attributeName The attribute name
 * @param typeArgsMap a map relating the generic class arguments (""<T, V>"" for example) with their actual types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return The value for an attribute
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If it was not possible to create a class from a string
 * @throws IllegalArgumentException <ul> <li>If an illegal argument was passed</li> <li>If an invalid value was set for a precise value in an annotation and such value could not be converted to the desired type</li> </ul>
 */
private Object manufactureAttributeValue(Object pojo,Map<Class<?>,Integer> pojos,Class<?> attributeType,Type genericAttributeType,List<Annotation> annotations,String attributeName,Map<String,Type> typeArgsMap,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Object attributeValue=null;
  Class<?> realAttributeType;
  if (Object.class.equals(attributeType) && attributeType != genericAttributeType) {
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(NO_TYPES);
    realAttributeType=resolveGenericParameter(genericAttributeType,typeArgsMap,elementGenericTypeArgs);
  }
 else {
    realAttributeType=attributeType;
  }
  AttributeMetadata attributeMetadata=new AttributeMetadata(attributeName,realAttributeType,annotations,pojo.getClass());
  if (realAttributeType.isPrimitive()) {
    attributeValue=resolvePrimitiveValue(realAttributeType,annotations,attributeMetadata);
  }
 else   if (isWrapper(realAttributeType)) {
    attributeValue=resolveWrapperValue(realAttributeType,annotations,attributeMetadata);
  }
 else   if (realAttributeType.equals(String.class)) {
    attributeValue=resolveStringValue(annotations,attributeMetadata);
  }
 else   if (realAttributeType.isArray()) {
    attributeValue=resolveArrayElementValue(realAttributeType,genericAttributeType,pojos,annotations,pojo,attributeName,typeArgsMap);
  }
 else   if (Collection.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveCollectionValueWhenCollectionIsPojoAttribute(pojo,pojos,realAttributeType,attributeName,annotations,typeArgsMap,genericTypeArgs);
  }
 else   if (Map.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveMapValueWhenMapIsPojoAttribute(pojo,pojos,realAttributeType,attributeName,annotations,typeArgsMap,genericTypeArgs);
  }
 else   if (realAttributeType.isEnum()) {
    int enumConstantsLength=realAttributeType.getEnumConstants().length;
    if (enumConstantsLength > 0) {
      int enumIndex=strategy.getIntegerInRange(0,enumConstantsLength,attributeMetadata) % enumConstantsLength;
      attributeValue=realAttributeType.getEnumConstants()[enumIndex];
    }
  }
 else   if (Type.class.isAssignableFrom(realAttributeType)) {
    if (genericTypeArgs.length > 0 && genericTypeArgs[0] != null) {
      AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(NO_TYPES);
      attributeValue=resolveGenericParameter(genericTypeArgs[0],typeArgsMap,elementGenericTypeArgs);
    }
 else {
      LOG.error(""String_Node_Str"",genericAttributeType,typeArgsMap,Arrays.toString(genericTypeArgs));
    }
  }
  if (attributeValue == null) {
    TypeVariable<?>[] typeParams=attributeType.getTypeParameters();
    Type[] genericTypeArgsAll=mergeActualAndSuppliedGenericTypes(typeParams,genericTypeArgs,typeArgsMap);
    Integer depth=pojos.get(realAttributeType);
    if (depth == null) {
      depth=-1;
    }
    if (depth <= strategy.getMaxDepth(pojo.getClass())) {
      pojos.put(realAttributeType,depth + 1);
      attributeValue=this.manufacturePojoInternal(realAttributeType,pojos,genericTypeArgsAll);
      pojos.put(realAttributeType,depth);
    }
 else {
      LOG.warn(""String_Node_Str"",realAttributeType);
      attributeValue=externalFactory.manufacturePojo(realAttributeType,genericTypeArgsAll);
    }
  }
  return attributeValue;
}",0.961391160335369
177946,"/** 
 * It manufactures and returns the value for a POJO attribute.
 * @param pojo The POJO being filled with values
 * @param pojos Set of manufactured pojos' types
 * @param attributeType The type of the attribute for which a value is being manufactured
 * @param genericAttributeType The generic type of the attribute for which a value is being manufactured
 * @param annotations The annotations for the attribute being considered
 * @param attributeName The attribute name
 * @param typeArgsMap a map relating the generic class arguments (""<T, V>"" for example) with their actual types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return The value for an attribute
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If it was not possible to create a class from a string
 * @throws IllegalArgumentException <ul> <li>If an illegal argument was passed</li> <li>If an invalid value was set for a precise value in an annotation and such value could not be converted to the desired type</li> </ul>
 */
private Object manufactureAttributeValue(Object pojo,Map<Class<?>,Integer> pojos,Class<?> attributeType,Type genericAttributeType,List<Annotation> annotations,String attributeName,Map<String,Type> typeArgsMap,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Object attributeValue=null;
  Class<?> realAttributeType;
  if (Object.class.equals(attributeType) && attributeType != genericAttributeType) {
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(NO_TYPES);
    realAttributeType=resolveGenericParameter(genericAttributeType,typeArgsMap,elementGenericTypeArgs);
  }
 else {
    realAttributeType=attributeType;
  }
  AttributeMetadata attributeMetadata=new AttributeMetadata(attributeName,realAttributeType,annotations,pojo.getClass());
  if (realAttributeType.isPrimitive()) {
    attributeValue=resolvePrimitiveValue(realAttributeType,annotations,attributeMetadata);
  }
 else   if (isWrapper(realAttributeType)) {
    attributeValue=resolveWrapperValue(realAttributeType,annotations,attributeMetadata);
  }
 else   if (realAttributeType.equals(String.class)) {
    attributeValue=resolveStringValue(annotations,attributeMetadata);
  }
 else   if (realAttributeType.isArray()) {
    attributeValue=resolveArrayElementValue(realAttributeType,genericAttributeType,pojos,annotations,pojo,attributeName,typeArgsMap);
  }
 else   if (Collection.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveCollectionValueWhenCollectionIsPojoAttribute(pojo,pojos,realAttributeType,attributeName,annotations,typeArgsMap,genericTypeArgs);
  }
 else   if (Map.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveMapValueWhenMapIsPojoAttribute(pojo,pojos,realAttributeType,attributeName,annotations,typeArgsMap,genericTypeArgs);
  }
 else   if (realAttributeType.isEnum()) {
    int enumConstantsLength=realAttributeType.getEnumConstants().length;
    if (enumConstantsLength > 0) {
      int enumIndex=strategy.getIntegerInRange(0,enumConstantsLength,attributeMetadata) % enumConstantsLength;
      attributeValue=realAttributeType.getEnumConstants()[enumIndex];
    }
  }
 else   if (Type.class.isAssignableFrom(realAttributeType)) {
    if (genericTypeArgs.length > 0 && genericTypeArgs[0] != null) {
      AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(NO_TYPES);
      attributeValue=resolveGenericParameter(genericTypeArgs[0],typeArgsMap,elementGenericTypeArgs);
    }
 else {
      LOG.error(""String_Node_Str"",genericAttributeType,typeArgsMap,Arrays.toString(genericTypeArgs));
    }
  }
  if (attributeValue == null) {
    TypeVariable<?>[] typeParams=attributeType.getTypeParameters();
    Type[] genericTypeArgsAll=mergeActualAndSuppliedGenericTypes(typeParams,genericTypeArgs,typeArgsMap);
    Integer depth=pojos.get(realAttributeType);
    if (depth == null) {
      depth=-1;
    }
    if (depth <= strategy.getMaxDepth(pojo.getClass())) {
      pojos.put(realAttributeType,depth + 1);
      attributeValue=this.manufacturePojoInternal(realAttributeType,pojos,genericTypeArgsAll);
      pojos.put(realAttributeType,depth);
    }
 else {
      LOG.warn(""String_Node_Str"",realAttributeType);
      attributeValue=externalFactory.manufacturePojo(realAttributeType,genericTypeArgsAll);
    }
  }
  return attributeValue;
}","/** 
 * It manufactures and returns the value for a POJO attribute.
 * @param pojo The POJO being filled with values
 * @param pojos Set of manufactured pojos' types
 * @param attributeType The type of the attribute for which a value is being manufactured
 * @param genericAttributeType The generic type of the attribute for which a value is being manufactured
 * @param annotations The annotations for the attribute being considered
 * @param attributeName The attribute name
 * @param typeArgsMap a map relating the generic class arguments (""<T, V>"" for example) with their actual types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return The value for an attribute
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If it was not possible to create a class from a string
 * @throws IllegalArgumentException <ul> <li>If an illegal argument was passed</li> <li>If an invalid value was set for a precise value in an annotation and such value could not be converted to the desired type</li> </ul>
 */
private Object manufactureAttributeValue(Object pojo,Map<Class<?>,Integer> pojos,Class<?> attributeType,Type genericAttributeType,List<Annotation> annotations,String attributeName,Map<String,Type> typeArgsMap,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Object attributeValue=null;
  Class<?> realAttributeType;
  if (Object.class.equals(attributeType) && attributeType != genericAttributeType) {
    AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(NO_TYPES);
    realAttributeType=resolveGenericParameter(genericAttributeType,typeArgsMap,elementGenericTypeArgs);
  }
 else {
    realAttributeType=attributeType;
  }
  AttributeMetadata attributeMetadata=new AttributeMetadata(attributeName,realAttributeType,annotations,pojo.getClass());
  if (realAttributeType.isPrimitive()) {
    attributeValue=resolvePrimitiveValue(realAttributeType,annotations,attributeMetadata);
  }
 else   if (isWrapper(realAttributeType)) {
    attributeValue=resolveWrapperValue(realAttributeType,annotations,attributeMetadata);
  }
 else   if (realAttributeType.equals(String.class)) {
    attributeValue=resolveStringValue(annotations,attributeMetadata);
  }
 else   if (realAttributeType.isArray()) {
    attributeValue=resolveArrayElementValue(realAttributeType,genericAttributeType,pojos,annotations,pojo,attributeName,typeArgsMap);
  }
 else   if (Collection.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveCollectionValueWhenCollectionIsPojoAttribute(pojo,pojos,realAttributeType,attributeName,annotations,typeArgsMap,genericTypeArgs);
  }
 else   if (Map.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveMapValueWhenMapIsPojoAttribute(pojo,pojos,realAttributeType,attributeName,annotations,typeArgsMap,genericTypeArgs);
  }
 else   if (realAttributeType.isEnum()) {
    int enumConstantsLength=realAttributeType.getEnumConstants().length;
    if (enumConstantsLength > 0) {
      int enumIndex=strategy.getIntegerInRange(0,enumConstantsLength,attributeMetadata) % enumConstantsLength;
      attributeValue=realAttributeType.getEnumConstants()[enumIndex];
    }
  }
 else   if (Type.class.isAssignableFrom(realAttributeType)) {
    Type paremeterType=null;
    if (genericAttributeType instanceof ParameterizedType) {
      ParameterizedType parametrized=(ParameterizedType)genericAttributeType;
      Type[] arguments=parametrized.getActualTypeArguments();
      if (arguments.length > 0) {
        paremeterType=arguments[0];
      }
    }
 else     if (realAttributeType.getTypeParameters().length > 0) {
      paremeterType=realAttributeType.getTypeParameters()[0];
    }
    if (paremeterType != null) {
      AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(NO_TYPES);
      attributeValue=resolveGenericParameter(paremeterType,typeArgsMap,elementGenericTypeArgs);
    }
 else {
      LOG.error(""String_Node_Str"",genericAttributeType,typeArgsMap,Arrays.toString(genericTypeArgs));
    }
  }
  if (attributeValue == null) {
    TypeVariable<?>[] typeParams=attributeType.getTypeParameters();
    Type[] genericTypeArgsAll=mergeActualAndSuppliedGenericTypes(typeParams,genericTypeArgs,typeArgsMap);
    Integer depth=pojos.get(realAttributeType);
    if (depth == null) {
      depth=-1;
    }
    if (depth <= strategy.getMaxDepth(pojo.getClass())) {
      pojos.put(realAttributeType,depth + 1);
      attributeValue=this.manufacturePojoInternal(realAttributeType,pojos,genericTypeArgsAll);
      pojos.put(realAttributeType,depth);
    }
 else {
      LOG.warn(""String_Node_Str"",realAttributeType);
      attributeValue=externalFactory.manufacturePojo(realAttributeType,genericTypeArgsAll);
    }
  }
  return attributeValue;
}",0.949521677182984
177947,"/** 
 * Manufactures and returns the parameter value for method required to invoke it
 * @param parameterType type of parameter
 * @param genericType generic type of parameter
 * @param annotations parameter annotations
 * @param typeArgsMap map for resolving generic types
 * @param genericTypeArgsExtra extra generic types for chaining
 * @param pojos Set of manufactured pojos' types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return The parameter values required to invoke the constructor
 * @throws IllegalArgumentException If an illegal argument was passed to the constructor
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If it was not possible to create a class from a string
 */
private Object manufactureParameterValue(Class<?> parameterType,Type genericType,List<Annotation> annotations,final Map<String,Type> typeArgsMap,final Type[] genericTypeArgsExtra,Map<Class<?>,Integer> pojos,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Object parameterValue=null;
  if (Collection.class.isAssignableFrom(parameterType)) {
    Collection<? super Object> defaultValue=null;
    Collection<? super Object> collection=resolveCollectionType(parameterType,defaultValue);
    if (collection != null) {
      Class<?> collectionElementType;
      AtomicReference<Type[]> collectionGenericTypeArgs=new AtomicReference<Type[]>(NO_TYPES);
      if (genericType instanceof ParameterizedType) {
        ParameterizedType pType=(ParameterizedType)genericType;
        Type actualTypeArgument=pType.getActualTypeArguments()[0];
        collectionElementType=resolveGenericParameter(actualTypeArgument,typeArgsMap,collectionGenericTypeArgs);
      }
 else {
        LOG.warn(""String_Node_Str"" + ""String_Node_Str"",genericType);
        collectionElementType=Object.class;
      }
      Type[] genericTypeArgsAll=mergeTypeArrays(collectionGenericTypeArgs.get(),genericTypeArgsExtra);
      fillCollection(pojos,annotations,collection,collectionElementType,genericTypeArgsAll);
      parameterValue=collection;
    }
  }
 else   if (Map.class.isAssignableFrom(parameterType)) {
    Map<? super Object,? super Object> defaultValue=null;
    Map<? super Object,? super Object> map=resolveMapType(parameterType,defaultValue);
    if (map != null) {
      Class<?> keyClass;
      Class<?> elementClass;
      AtomicReference<Type[]> keyGenericTypeArgs=new AtomicReference<Type[]>(NO_TYPES);
      AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(NO_TYPES);
      if (genericType instanceof ParameterizedType) {
        ParameterizedType pType=(ParameterizedType)genericType;
        Type[] actualTypeArguments=pType.getActualTypeArguments();
        keyClass=resolveGenericParameter(actualTypeArguments[0],typeArgsMap,keyGenericTypeArgs);
        elementClass=resolveGenericParameter(actualTypeArguments[1],typeArgsMap,elementGenericTypeArgs);
      }
 else {
        LOG.warn(""String_Node_Str"" + ""String_Node_Str"",genericType);
        keyClass=Object.class;
        elementClass=Object.class;
      }
      Type[] genericTypeArgsAll=mergeTypeArrays(elementGenericTypeArgs.get(),genericTypeArgsExtra);
      MapArguments mapArguments=new MapArguments();
      mapArguments.setPojos(pojos);
      mapArguments.setAnnotations(annotations);
      mapArguments.setMapToBeFilled(map);
      mapArguments.setKeyClass(keyClass);
      mapArguments.setElementClass(elementClass);
      mapArguments.setKeyGenericTypeArgs(keyGenericTypeArgs.get());
      mapArguments.setElementGenericTypeArgs(genericTypeArgsAll);
      fillMap(mapArguments);
      parameterValue=map;
    }
  }
  if (parameterValue == null) {
    Map<String,Type> typeArgsMapForParam;
    if (genericType instanceof ParameterizedType) {
      typeArgsMapForParam=new HashMap<String,Type>(typeArgsMap);
      ParameterizedType parametrizedType=(ParameterizedType)genericType;
      TypeVariable<?>[] argumentTypes=parameterType.getTypeParameters();
      Type[] argumentGenericTypes=parametrizedType.getActualTypeArguments();
      for (int k=0; k < argumentTypes.length; k++) {
        if (argumentGenericTypes[k] instanceof Class) {
          Class<?> genericParam=(Class<?>)argumentGenericTypes[k];
          typeArgsMapForParam.put(argumentTypes[k].getName(),genericParam);
        }
      }
    }
 else {
      typeArgsMapForParam=typeArgsMap;
    }
    parameterValue=manufactureParameterValue(pojos,parameterType,genericType,annotations,typeArgsMapForParam,genericTypeArgs);
  }
  return parameterValue;
}","/** 
 * Manufactures and returns the parameter value for method required to invoke it
 * @param parameterType type of parameter
 * @param genericType generic type of parameter
 * @param annotations parameter annotations
 * @param typeArgsMap map for resolving generic types
 * @param genericTypeArgsExtra extra generic types for chaining
 * @param pojos Set of manufactured pojos' types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return The parameter values required to invoke the constructor
 * @throws IllegalArgumentException If an illegal argument was passed to the constructor
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If it was not possible to create a class from a string
 */
private Object manufactureParameterValue(Class<?> parameterType,Type genericType,List<Annotation> annotations,final Map<String,Type> typeArgsMap,Map<Class<?>,Integer> pojos,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Object parameterValue=null;
  if (Collection.class.isAssignableFrom(parameterType)) {
    Collection<? super Object> defaultValue=null;
    Collection<? super Object> collection=resolveCollectionType(parameterType,defaultValue);
    if (collection != null) {
      Class<?> collectionElementType;
      AtomicReference<Type[]> collectionGenericTypeArgs=new AtomicReference<Type[]>(NO_TYPES);
      if (genericType instanceof ParameterizedType) {
        ParameterizedType pType=(ParameterizedType)genericType;
        Type actualTypeArgument=pType.getActualTypeArguments()[0];
        collectionElementType=resolveGenericParameter(actualTypeArgument,typeArgsMap,collectionGenericTypeArgs);
      }
 else {
        LOG.warn(""String_Node_Str"" + ""String_Node_Str"",genericType);
        collectionElementType=Object.class;
      }
      Type[] genericTypeArgsAll=mergeTypeArrays(collectionGenericTypeArgs.get(),genericTypeArgs);
      fillCollection(pojos,annotations,collection,collectionElementType,genericTypeArgsAll);
      parameterValue=collection;
    }
  }
 else   if (Map.class.isAssignableFrom(parameterType)) {
    Map<? super Object,? super Object> defaultValue=null;
    Map<? super Object,? super Object> map=resolveMapType(parameterType,defaultValue);
    if (map != null) {
      Class<?> keyClass;
      Class<?> elementClass;
      AtomicReference<Type[]> keyGenericTypeArgs=new AtomicReference<Type[]>(NO_TYPES);
      AtomicReference<Type[]> elementGenericTypeArgs=new AtomicReference<Type[]>(NO_TYPES);
      if (genericType instanceof ParameterizedType) {
        ParameterizedType pType=(ParameterizedType)genericType;
        Type[] actualTypeArguments=pType.getActualTypeArguments();
        keyClass=resolveGenericParameter(actualTypeArguments[0],typeArgsMap,keyGenericTypeArgs);
        elementClass=resolveGenericParameter(actualTypeArguments[1],typeArgsMap,elementGenericTypeArgs);
      }
 else {
        LOG.warn(""String_Node_Str"" + ""String_Node_Str"",genericType);
        keyClass=Object.class;
        elementClass=Object.class;
      }
      Type[] genericTypeArgsAll=mergeTypeArrays(elementGenericTypeArgs.get(),genericTypeArgs);
      MapArguments mapArguments=new MapArguments();
      mapArguments.setPojos(pojos);
      mapArguments.setAnnotations(annotations);
      mapArguments.setMapToBeFilled(map);
      mapArguments.setKeyClass(keyClass);
      mapArguments.setElementClass(elementClass);
      mapArguments.setKeyGenericTypeArgs(keyGenericTypeArgs.get());
      mapArguments.setElementGenericTypeArgs(genericTypeArgsAll);
      fillMap(mapArguments);
      parameterValue=map;
    }
  }
  if (parameterValue == null) {
    Map<String,Type> typeArgsMapForParam;
    if (genericType instanceof ParameterizedType) {
      typeArgsMapForParam=new HashMap<String,Type>(typeArgsMap);
      ParameterizedType parametrizedType=(ParameterizedType)genericType;
      TypeVariable<?>[] argumentTypes=parameterType.getTypeParameters();
      Type[] argumentGenericTypes=parametrizedType.getActualTypeArguments();
      for (int k=0; k < argumentTypes.length; k++) {
        if (argumentGenericTypes[k] instanceof Class) {
          Class<?> genericParam=(Class<?>)argumentGenericTypes[k];
          typeArgsMapForParam.put(argumentTypes[k].getName(),genericParam);
        }
      }
    }
 else {
      typeArgsMapForParam=typeArgsMap;
    }
    parameterValue=manufactureParameterValue(pojos,parameterType,genericType,annotations,typeArgsMapForParam,genericTypeArgs);
  }
  return parameterValue;
}",0.995476043594489
177948,"/** 
 * It attempts to create an instance of the given class <p> This method attempts to create an instance of the given argument for classes without setters. These may be either immutable classes (e.g. with final attributes and no setters) or Java classes (e.g. belonging to the java / javax namespace). In case the class does not provide a public, no-arg constructor (e.g. Calendar), this method attempts to find a , no-args, factory method (e.g. getInstance()) and it invokes it </p>
 * @param pojoClass The name of the class for which an instance filled with values is required
 * @param pojos Set of manufactured pojos' types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return An instance of the given class
 * @throws IllegalArgumentException If an illegal argument was passed to the constructor
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If it was not possible to create a class from a string
 */
private Object instantiatePojoWithoutConstructors(Class<?> pojoClass,Map<Class<?>,Integer> pojos,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Object retValue=null;
  final Map<String,Type> typeArgsMap=new HashMap<String,Type>();
  Type[] genericTypeArgsExtra=fillTypeArgMap(typeArgsMap,pojoClass,genericTypeArgs);
  Method[] declaredMethods=pojoClass.getDeclaredMethods();
  strategy.sort(declaredMethods);
  Object[] parameterValues=null;
  Object[] noParams=new Object[]{};
  for (  Method candidateConstructor : declaredMethods) {
    if (!Modifier.isStatic(candidateConstructor.getModifiers()) || !candidateConstructor.getReturnType().equals(pojoClass) || retValue != null) {
      continue;
    }
    parameterValues=new Object[candidateConstructor.getParameterTypes().length];
    Class<?>[] parameterTypes=candidateConstructor.getParameterTypes();
    if (parameterTypes.length == 0) {
      parameterValues=noParams;
    }
 else {
      Annotation[][] parameterAnnotations=candidateConstructor.getParameterAnnotations();
      int idx=0;
      for (      Class<?> parameterType : parameterTypes) {
        List<Annotation> annotations=Arrays.asList(parameterAnnotations[idx]);
        Type genericType=candidateConstructor.getGenericParameterTypes()[idx];
        parameterValues[idx]=manufactureParameterValue(parameterType,genericType,annotations,typeArgsMap,genericTypeArgsExtra,pojos,genericTypeArgs);
        idx++;
      }
    }
    try {
      retValue=candidateConstructor.invoke(pojoClass,parameterValues);
      LOG.debug(""String_Node_Str"" + candidateConstructor);
    }
 catch (    Exception t) {
      LOG.debug(""String_Node_Str"" + candidateConstructor + ""String_Node_Str"",t);
    }
  }
  if (retValue == null) {
    retValue=externalFactory.manufacturePojo(pojoClass,genericTypeArgs);
  }
  if (retValue == null) {
    LOG.warn(""String_Node_Str"" + ""String_Node_Str"",pojoClass);
  }
  return retValue;
}","/** 
 * It attempts to create an instance of the given class <p> This method attempts to create an instance of the given argument for classes without setters. These may be either immutable classes (e.g. with final attributes and no setters) or Java classes (e.g. belonging to the java / javax namespace). In case the class does not provide a public, no-arg constructor (e.g. Calendar), this method attempts to find a , no-args, factory method (e.g. getInstance()) and it invokes it </p>
 * @param pojoClass The name of the class for which an instance filled with values is required
 * @param pojos Set of manufactured pojos' types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return An instance of the given class
 * @throws IllegalArgumentException If an illegal argument was passed to the constructor
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If it was not possible to create a class from a string
 */
private Object instantiatePojoWithoutConstructors(Class<?> pojoClass,Map<Class<?>,Integer> pojos,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  Object retValue=null;
  final Map<String,Type> typeArgsMap=new HashMap<String,Type>();
  Type[] genericTypeArgsExtra=fillTypeArgMap(typeArgsMap,pojoClass,genericTypeArgs);
  Method[] declaredMethods=pojoClass.getDeclaredMethods();
  strategy.sort(declaredMethods);
  Object[] parameterValues=null;
  Object[] noParams=new Object[]{};
  for (  Method candidateConstructor : declaredMethods) {
    if (!Modifier.isStatic(candidateConstructor.getModifiers()) || !candidateConstructor.getReturnType().equals(pojoClass) || retValue != null) {
      continue;
    }
    parameterValues=new Object[candidateConstructor.getParameterTypes().length];
    Class<?>[] parameterTypes=candidateConstructor.getParameterTypes();
    if (parameterTypes.length == 0) {
      parameterValues=noParams;
    }
 else {
      Annotation[][] parameterAnnotations=candidateConstructor.getParameterAnnotations();
      int idx=0;
      for (      Class<?> parameterType : parameterTypes) {
        List<Annotation> annotations=Arrays.asList(parameterAnnotations[idx]);
        Type genericType=candidateConstructor.getGenericParameterTypes()[idx];
        parameterValues[idx]=manufactureParameterValue(parameterType,genericType,annotations,typeArgsMap,pojos,genericTypeArgsExtra == null ? NO_TYPES : genericTypeArgsExtra);
        idx++;
      }
    }
    try {
      retValue=candidateConstructor.invoke(pojoClass,parameterValues);
      LOG.debug(""String_Node_Str"" + candidateConstructor);
    }
 catch (    Exception t) {
      LOG.debug(""String_Node_Str"" + candidateConstructor + ""String_Node_Str"",t);
    }
  }
  if (retValue == null) {
    retValue=externalFactory.manufacturePojo(pojoClass,genericTypeArgs);
  }
  if (retValue == null) {
    LOG.warn(""String_Node_Str"" + ""String_Node_Str"",pojoClass);
  }
  return retValue;
}",0.9916871921182266
177949,"/** 
 * Given a constructor it manufactures and returns the parameter values required to invoke it
 * @param constructor The constructor for which parameter values are required
 * @param pojoClass The POJO class containing the constructor
 * @param pojos Set of manufactured pojos' types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return The parameter values required to invoke the constructor
 * @throws IllegalArgumentException If an illegal argument was passed to the constructor
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If it was not possible to create a class from a string
 */
private Object[] getParameterValuesForConstructor(Constructor<?> constructor,Class<?> pojoClass,Map<Class<?>,Integer> pojos,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  final Map<String,Type> typeArgsMap=new HashMap<String,Type>();
  final Type[] genericTypeArgsExtra=fillTypeArgMap(typeArgsMap,pojoClass,genericTypeArgs);
  Annotation[][] parameterAnnotations=constructor.getParameterAnnotations();
  Class<?>[] parameterTypes=constructor.getParameterTypes();
  Object[] parameterValues=new Object[parameterTypes.length];
  int idx=0;
  for (  Class<?> parameterType : parameterTypes) {
    List<Annotation> annotations=Arrays.asList(parameterAnnotations[idx]);
    Type genericType=constructor.getGenericParameterTypes()[idx];
    parameterValues[idx]=manufactureParameterValue(parameterType,genericType,annotations,typeArgsMap,genericTypeArgsExtra,pojos,genericTypeArgs);
    idx++;
  }
  return parameterValues;
}","/** 
 * Given a constructor it manufactures and returns the parameter values required to invoke it
 * @param constructor The constructor for which parameter values are required
 * @param pojoClass The POJO class containing the constructor
 * @param pojos Set of manufactured pojos' types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return The parameter values required to invoke the constructor
 * @throws IllegalArgumentException If an illegal argument was passed to the constructor
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If it was not possible to create a class from a string
 */
private Object[] getParameterValuesForConstructor(Constructor<?> constructor,Class<?> pojoClass,Map<Class<?>,Integer> pojos,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, ClassNotFoundException {
  final Map<String,Type> typeArgsMap=new HashMap<String,Type>();
  final Type[] genericTypeArgsExtra=fillTypeArgMap(typeArgsMap,pojoClass,genericTypeArgs);
  Annotation[][] parameterAnnotations=constructor.getParameterAnnotations();
  Class<?>[] parameterTypes=constructor.getParameterTypes();
  Object[] parameterValues=new Object[parameterTypes.length];
  int idx=0;
  for (  Class<?> parameterType : parameterTypes) {
    List<Annotation> annotations=Arrays.asList(parameterAnnotations[idx]);
    Type genericType=constructor.getGenericParameterTypes()[idx];
    parameterValues[idx]=manufactureParameterValue(parameterType,genericType,annotations,typeArgsMap,pojos,genericTypeArgsExtra == null ? NO_TYPES : genericTypeArgsExtra);
    idx++;
  }
  return parameterValues;
}",0.9896049896049895
177950,"/** 
 * It manufactures and returns the value for a POJO attribute.
 * @param pojoClass The POJO class being filled with values
 * @param attributeType The type of the attribute for which a value is being manufactured
 * @param annotations The annotations for the attribute being considered
 * @param attributeName The attribute name
 * @param typeArgsMap a map relating the generic class arguments (""<T, V>"" for example) with their actual types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return The value for an attribute
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If it was not possible to create a class from a string
 * @throws IllegalArgumentException <ul> <li>If an illegal argument was passed</li> <li>If an invalid value was set for a precise value in an annotation and such value could not be converted to the desired type</li> </ul>
 */
@SuppressWarnings(""String_Node_Str"") private Object manufactureAttributeValue(Class<?> pojoClass,Class<?> attributeType,List<Annotation> annotations,String attributeName,Map<String,Type> typeArgsMap,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, IllegalArgumentException, ClassNotFoundException {
  Object attributeValue=null;
  Class<?> realAttributeType;
  if (genericTypeArgs.length > 0 && genericTypeArgs[0] instanceof Class && attributeType.isAssignableFrom((Class)genericTypeArgs[0])) {
    realAttributeType=(Class)genericTypeArgs[0];
  }
 else {
    realAttributeType=attributeType;
  }
  AttributeMetadata attributeMetadata=new AttributeMetadata(attributeName,realAttributeType,annotations);
  if (realAttributeType.isPrimitive()) {
    attributeValue=resolvePrimitiveValue(realAttributeType,annotations,attributeMetadata);
  }
 else   if (isWrapper(realAttributeType)) {
    attributeValue=resolveWrapperValue(realAttributeType,annotations,attributeMetadata);
  }
 else   if (realAttributeType.equals(String.class)) {
    attributeValue=resolveStringValue(annotations,attributeMetadata);
  }
 else   if (realAttributeType.getName().startsWith(""String_Node_Str"")) {
    attributeValue=resolveArrayElementValue(realAttributeType,annotations,pojoClass,attributeName,typeArgsMap);
  }
 else   if (Collection.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveCollectionValueWhenCollectionIsPojoAttribute(pojoClass,realAttributeType,attributeName,annotations,typeArgsMap,genericTypeArgs);
  }
 else   if (Map.class.isAssignableFrom(realAttributeType)) {
    attributeValue=resolveMapValueWhenMapIsPojoAttribute(pojoClass,realAttributeType,attributeName,annotations,typeArgsMap,genericTypeArgs);
  }
 else   if (realAttributeType.getName().startsWith(""String_Node_Str"") || realAttributeType.getName().startsWith(""String_Node_Str"")) {
    attributeValue=createNewInstanceForClassWithoutConstructors(pojoClass,realAttributeType,genericTypeArgs);
  }
 else   if (realAttributeType.isEnum()) {
    int enumConstantsLength=realAttributeType.getEnumConstants().length;
    if (enumConstantsLength > 0) {
      int enumIndex=strategy.getIntegerInRange(0,enumConstantsLength,attributeMetadata) % enumConstantsLength;
      attributeValue=realAttributeType.getEnumConstants()[enumIndex];
    }
  }
 else {
    attributeValue=this.manufacturePojo(realAttributeType,genericTypeArgs);
  }
  return attributeValue;
}","/** 
 * It manufactures and returns the value for a POJO attribute.
 * @param pojoClass The POJO class being filled with values
 * @param attributeType The type of the attribute for which a value is being manufactured
 * @param annotations The annotations for the attribute being considered
 * @param attributeName The attribute name
 * @param typeArgsMap a map relating the generic class arguments (""<T, V>"" for example) with their actual types
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return The value for an attribute
 * @throws InstantiationException If an exception occurred during instantiation
 * @throws IllegalAccessException If security was violated while creating the object
 * @throws InvocationTargetException If an exception occurred while invoking the constructor or factory method
 * @throws ClassNotFoundException If it was not possible to create a class from a string
 * @throws IllegalArgumentException <ul> <li>If an illegal argument was passed</li> <li>If an invalid value was set for a precise value in an annotation and such value could not be converted to the desired type</li> </ul>
 */
@SuppressWarnings(""String_Node_Str"") private Object manufactureAttributeValue(Class<?> pojoClass,Class<?> attributeType,List<Annotation> annotations,String attributeName,Map<String,Type> typeArgsMap,Type... genericTypeArgs) throws InstantiationException, IllegalAccessException, InvocationTargetException, IllegalArgumentException, ClassNotFoundException {
  int depth=0;
  return manufactureAttributeValueInternal(pojoClass,depth,attributeType,annotations,attributeName,typeArgsMap,genericTypeArgs);
}",0.5872628217170769
177951,"/** 
 * Generic method which returns an instance of the given class filled with values dictated by the strategy
 * @param < T > The type for which a filled instance is required
 * @param pojoClass The name of the class for which an instance filled with values is required
 * @param depth How many times  {@code pojoClass} has been found. This will beused for reentrant objects
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return An instance of <T> filled with dummy values
 * @throws PodamMockeryException if a problem occurred while creating a POJO instance or while setting its state
 */
@SuppressWarnings(""String_Node_Str"") private <T>T manufacturePojoInternal(Class<T> pojoClass,int depth,Type... genericTypeArgs){
  try {
    T retValue=null;
    final TypeVariable<?>[] typeParameters=pojoClass.getTypeParameters();
    if (typeParameters.length > genericTypeArgs.length) {
      LOG.info(pojoClass.getCanonicalName() + ""String_Node_Str"" + typeParameters.length+ ""String_Node_Str""+ genericTypeArgs.length+ ""String_Node_Str"");
      return retValue;
    }
    if (pojoClass.isPrimitive()) {
      ArrayList<Annotation> annotations=new ArrayList<Annotation>();
      String noName=null;
      return (T)resolvePrimitiveValue(pojoClass,annotations,new AttributeMetadata(noName,pojoClass,annotations));
    }
    if (pojoClass.isInterface() || Modifier.isAbstract(pojoClass.getModifiers())) {
      LOG.warn(""String_Node_Str"");
      return null;
    }
    ClassInfo classInfo=PodamUtils.getClassInfo(pojoClass,excludeAnnotations);
    try {
      Constructor<?>[] constructors=pojoClass.getConstructors();
      if (constructors == null || constructors.length == 0) {
        LOG.warn(""String_Node_Str"" + ""String_Node_Str"");
        Constructor<T> defaultConstructor=pojoClass.getDeclaredConstructor(new Class[]{});
        LOG.info(""String_Node_Str"" + defaultConstructor);
        defaultConstructor.setAccessible(true);
        retValue=defaultConstructor.newInstance();
      }
 else {
        retValue=resolvePojoWithoutSetters(pojoClass,depth,genericTypeArgs);
      }
    }
 catch (    SecurityException e) {
      throw new PodamMockeryException(""String_Node_Str"",e);
    }
catch (    NoSuchMethodException e1) {
      LOG.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      Constructor<?>[] constructors=pojoClass.getDeclaredConstructors();
      if (constructors == null || constructors.length == 0) {
        throw new IllegalStateException(""String_Node_Str"" + pojoClass + ""String_Node_Str"");
      }
      LOG.info(""String_Node_Str"" + constructors[0]);
      Object[] parameterValuesForConstructor=getParameterValuesForConstructor(constructors[0],pojoClass,genericTypeArgs);
      constructors[0].setAccessible(true);
      retValue=(T)constructors[0].newInstance(parameterValuesForConstructor);
    }
    Class<?>[] parameterTypes=null;
    Class<?> attributeType=null;
    Object setterArg=null;
    for (    Method setter : classInfo.getClassSetters()) {
      List<Annotation> pojoAttributeAnnotations=retrieveFieldAnnotations(pojoClass,setter);
      String attributeName=PodamUtils.extractFieldNameFromSetterMethod(setter);
      parameterTypes=setter.getParameterTypes();
      if (parameterTypes.length != 1) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      attributeType=parameterTypes[0];
      PodamStrategyValue attributeStrategyAnnotation=containsAttributeStrategyAnnotation(pojoAttributeAnnotations);
      if (null != attributeStrategyAnnotation) {
        AttributeStrategy<?> attributeStrategy=attributeStrategyAnnotation.value().newInstance();
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"" + attributeName + ""String_Node_Str""+ attributeStrategy);
        }
        setterArg=returnAttributeDataStrategyValue(attributeType,attributeStrategy);
      }
 else {
        final Map<String,Type> typeArgsMap=new HashMap<String,Type>();
        Type[] genericTypeArgsExtra=fillTypeArgMap(typeArgsMap,typeParameters,genericTypeArgs);
        if (genericTypeArgsExtra != null) {
          LOG.warn(String.format(""String_Node_Str"",genericTypeArgsExtra.length));
        }
        if (attributeType.equals(pojoClass)) {
          if (depth < strategy.getMaxDepth(pojoClass)) {
            depth++;
            setterArg=this.manufacturePojoInternal(attributeType,depth);
            setter.invoke(retValue,setterArg);
            continue;
          }
 else {
            setterArg=createNewInstanceForClassWithoutConstructors(pojoClass,pojoClass);
            setter.invoke(retValue,setterArg);
            depth=0;
            continue;
          }
        }
        Type[] typeArguments=new Type[]{};
        if (setter.getGenericParameterTypes()[0] instanceof ParameterizedType) {
          final ParameterizedType attributeParameterizedType=(ParameterizedType)setter.getGenericParameterTypes()[0];
          typeArguments=attributeParameterizedType.getActualTypeArguments();
        }
 else         if (setter.getGenericParameterTypes()[0] instanceof TypeVariable) {
          final TypeVariable<?> typeVariable=(TypeVariable<?>)setter.getGenericParameterTypes()[0];
          Type type=typeArgsMap.get(typeVariable.getName());
          if (type instanceof ParameterizedType) {
            final ParameterizedType attributeParameterizedType=(ParameterizedType)type;
            typeArguments=attributeParameterizedType.getActualTypeArguments();
            attributeType=(Class<?>)attributeParameterizedType.getRawType();
          }
 else {
            attributeType=(Class<?>)type;
          }
        }
        setterArg=manufactureAttributeValue(pojoClass,attributeType,pojoAttributeAnnotations,attributeName,typeArgsMap,typeArguments);
      }
      if (setterArg != null) {
        if (!Modifier.isPublic(setter.getModifiers())) {
          LOG.warn(""String_Node_Str"" + setter.getName() + ""String_Node_Str""+ ""String_Node_Str"");
          setter.setAccessible(true);
        }
        setter.invoke(retValue,setterArg);
      }
 else {
        LOG.warn(""String_Node_Str"" + attributeName + ""String_Node_Str"");
      }
    }
    return retValue;
  }
 catch (  InstantiationException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  IllegalArgumentException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  InvocationTargetException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  ClassNotFoundException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
}","/** 
 * Generic method which returns an instance of the given class filled with values dictated by the strategy
 * @param < T > The type for which a filled instance is required
 * @param pojoClass The name of the class for which an instance filled with values is required
 * @param depth How many times  {@code pojoClass} has been found. This will beused for reentrant objects
 * @param genericTypeArgs The generic type arguments for the current generic class instance
 * @return An instance of <T> filled with dummy values
 * @throws PodamMockeryException if a problem occurred while creating a POJO instance or while setting its state
 */
@SuppressWarnings(""String_Node_Str"") private <T>T manufacturePojoInternal(Class<T> pojoClass,int depth,Type... genericTypeArgs){
  try {
    T retValue=null;
    final TypeVariable<?>[] typeParameters=pojoClass.getTypeParameters();
    if (typeParameters.length > genericTypeArgs.length) {
      LOG.info(pojoClass.getCanonicalName() + ""String_Node_Str"" + typeParameters.length+ ""String_Node_Str""+ genericTypeArgs.length+ ""String_Node_Str"");
      return retValue;
    }
    if (pojoClass.isPrimitive()) {
      ArrayList<Annotation> annotations=new ArrayList<Annotation>();
      String noName=null;
      return (T)resolvePrimitiveValue(pojoClass,annotations,new AttributeMetadata(noName,pojoClass,annotations));
    }
    if (pojoClass.isInterface() || Modifier.isAbstract(pojoClass.getModifiers())) {
      LOG.warn(""String_Node_Str"");
      return null;
    }
    ClassInfo classInfo=PodamUtils.getClassInfo(pojoClass,excludeAnnotations);
    try {
      Constructor<?>[] constructors=pojoClass.getConstructors();
      if (constructors == null || constructors.length == 0) {
        LOG.warn(""String_Node_Str"" + ""String_Node_Str"");
        Constructor<T> defaultConstructor=pojoClass.getDeclaredConstructor(new Class[]{});
        LOG.info(""String_Node_Str"" + defaultConstructor);
        defaultConstructor.setAccessible(true);
        retValue=defaultConstructor.newInstance();
      }
 else {
        retValue=resolvePojoWithoutSetters(pojoClass,depth,genericTypeArgs);
      }
    }
 catch (    SecurityException e) {
      throw new PodamMockeryException(""String_Node_Str"",e);
    }
catch (    NoSuchMethodException e1) {
      LOG.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      Constructor<?>[] constructors=pojoClass.getDeclaredConstructors();
      if (constructors == null || constructors.length == 0) {
        throw new IllegalStateException(""String_Node_Str"" + pojoClass + ""String_Node_Str"");
      }
      LOG.info(""String_Node_Str"" + constructors[0]);
      Object[] parameterValuesForConstructor=getParameterValuesForConstructor(constructors[0],pojoClass,genericTypeArgs);
      constructors[0].setAccessible(true);
      retValue=(T)constructors[0].newInstance(parameterValuesForConstructor);
    }
    Class<?>[] parameterTypes=null;
    Class<?> attributeType=null;
    Object setterArg=null;
    for (    Method setter : classInfo.getClassSetters()) {
      List<Annotation> pojoAttributeAnnotations=retrieveFieldAnnotations(pojoClass,setter);
      String attributeName=PodamUtils.extractFieldNameFromSetterMethod(setter);
      parameterTypes=setter.getParameterTypes();
      if (parameterTypes.length != 1) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      attributeType=parameterTypes[0];
      PodamStrategyValue attributeStrategyAnnotation=containsAttributeStrategyAnnotation(pojoAttributeAnnotations);
      if (null != attributeStrategyAnnotation) {
        AttributeStrategy<?> attributeStrategy=attributeStrategyAnnotation.value().newInstance();
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"" + attributeName + ""String_Node_Str""+ attributeStrategy);
        }
        setterArg=returnAttributeDataStrategyValue(attributeType,attributeStrategy);
      }
 else {
        final Map<String,Type> typeArgsMap=new HashMap<String,Type>();
        Type[] genericTypeArgsExtra=fillTypeArgMap(typeArgsMap,typeParameters,genericTypeArgs);
        if (genericTypeArgsExtra != null) {
          LOG.warn(String.format(""String_Node_Str"",genericTypeArgsExtra.length));
        }
        if (depth >= strategy.getMaxDepth(pojoClass)) {
          setterArg=createNewInstanceForClassWithoutConstructors(attributeType,attributeType);
        }
 else {
          Type[] typeArguments=new Type[]{};
          if (setter.getGenericParameterTypes()[0] instanceof ParameterizedType) {
            final ParameterizedType attributeParameterizedType=(ParameterizedType)setter.getGenericParameterTypes()[0];
            typeArguments=attributeParameterizedType.getActualTypeArguments();
          }
 else           if (setter.getGenericParameterTypes()[0] instanceof TypeVariable) {
            final TypeVariable<?> typeVariable=(TypeVariable<?>)setter.getGenericParameterTypes()[0];
            Type type=typeArgsMap.get(typeVariable.getName());
            if (type instanceof ParameterizedType) {
              final ParameterizedType attributeParameterizedType=(ParameterizedType)type;
              typeArguments=attributeParameterizedType.getActualTypeArguments();
              attributeType=(Class<?>)attributeParameterizedType.getRawType();
            }
 else {
              attributeType=(Class<?>)type;
            }
          }
          setterArg=manufactureAttributeValueInternal(pojoClass,depth,attributeType,pojoAttributeAnnotations,attributeName,typeArgsMap,typeArguments);
        }
      }
      if (setterArg != null) {
        if (!Modifier.isPublic(setter.getModifiers())) {
          LOG.warn(""String_Node_Str"" + setter.getName() + ""String_Node_Str""+ ""String_Node_Str"");
          setter.setAccessible(true);
        }
        setter.invoke(retValue,setterArg);
      }
 else {
        LOG.warn(""String_Node_Str"" + attributeName + ""String_Node_Str"");
      }
    }
    return retValue;
  }
 catch (  InstantiationException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  IllegalArgumentException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  InvocationTargetException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  ClassNotFoundException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
}",0.9660101893392138
177952,"/** 
 * It returns a collection of some sort with some data in it.
 * @param pojoClass The POJO being analysed
 * @param collectionType The type of the attribute being evaluated
 * @param annotations The set of annotations for the annotated attribute. It might be empty
 * @param attributeName The name of the field being set
 * @return a collection of some sort with some data in it
 * @throws PodamMockeryException An exception occurred while resolving the collection
 * @throws IllegalArgumentException If the field name is null or empty
 */
@SuppressWarnings({""String_Node_Str""}) private Collection<? super Object> resolveCollectionValueWhenCollectionIsPojoAttribute(Class<?> pojoClass,Class<?> collectionType,String attributeName,List<Annotation> annotations){
  this.validateAttributeName(attributeName);
  Collection<? super Object> retValue=null;
  try {
    Object newInstance=pojoClass.newInstance();
    Field field=pojoClass.getDeclaredField(attributeName);
    field.setAccessible(true);
    Collection<? super Object> coll=(Collection<? super Object>)field.get(newInstance);
    if (null != coll) {
      retValue=coll;
    }
 else {
      retValue=this.resolveCollectionType(collectionType);
    }
    Class<?> typeClass=null;
    Type genericType=field.getGenericType();
    if (!(genericType instanceof ParameterizedType)) {
      LOG.warn(""String_Node_Str"" + attributeName + ""String_Node_Str"");
      typeClass=Object.class;
    }
 else {
      ParameterizedType pType=(ParameterizedType)genericType;
      Type actualTypeArguments=pType.getActualTypeArguments()[0];
      typeClass=Class.forName(PodamUtils.extractClassNameFromParameterisedTypeInField(actualTypeArguments));
    }
    this.fillCollection(pojoClass,attributeName,annotations,retValue,typeClass);
  }
 catch (  SecurityException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  NoSuchFieldException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  IllegalArgumentException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  InstantiationException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  ClassNotFoundException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  InvocationTargetException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
  return retValue;
}","/** 
 * It returns a collection of some sort with some data in it.
 * @param pojoClass The POJO being analysed
 * @param collectionType The type of the attribute being evaluated
 * @param annotations The set of annotations for the annotated attribute. It might be empty
 * @param attributeName The name of the field being set
 * @return a collection of some sort with some data in it
 * @throws PodamMockeryException An exception occurred while resolving the collection
 * @throws IllegalArgumentException If the field name is null or empty
 */
@SuppressWarnings({""String_Node_Str""}) private Collection<? super Object> resolveCollectionValueWhenCollectionIsPojoAttribute(Class<?> pojoClass,Class<?> collectionType,String attributeName,List<Annotation> annotations){
  this.validateAttributeName(attributeName);
  Collection<? super Object> retValue=null;
  try {
    Object newInstance=pojoClass.newInstance();
    Field field=null;
    Class<?> clazz=pojoClass;
    while (clazz != null) {
      try {
        field=clazz.getDeclaredField(attributeName);
        break;
      }
 catch (      NoSuchFieldException e) {
        clazz=clazz.getSuperclass();
      }
catch (      SecurityException e) {
        throw e;
      }
    }
    if (field == null) {
      throw new NoSuchFieldException();
    }
    field.setAccessible(true);
    Collection<? super Object> coll=(Collection<? super Object>)field.get(newInstance);
    if (null != coll) {
      retValue=coll;
    }
 else {
      retValue=this.resolveCollectionType(collectionType);
    }
    Class<?> typeClass=null;
    Type genericType=field.getGenericType();
    if (!(genericType instanceof ParameterizedType)) {
      LOG.warn(""String_Node_Str"" + attributeName + ""String_Node_Str"");
      typeClass=Object.class;
    }
 else {
      ParameterizedType pType=(ParameterizedType)genericType;
      Type actualTypeArguments=pType.getActualTypeArguments()[0];
      typeClass=Class.forName(PodamUtils.extractClassNameFromParameterisedTypeInField(actualTypeArguments));
    }
    this.fillCollection(pojoClass,attributeName,annotations,retValue,typeClass);
  }
 catch (  SecurityException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  NoSuchFieldException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  IllegalArgumentException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  InstantiationException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  ClassNotFoundException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
catch (  InvocationTargetException e) {
    throw new PodamMockeryException(""String_Node_Str"",e);
  }
  return retValue;
}",0.9376642883965453
177953,"public JenkinsWindowManager(Project project){
  this.project=project;
  final BrowserPanel browserPanel=BrowserPanel.getInstance(project);
  Content content=ContentFactory.SERVICE.getInstance().createContent(browserPanel,null,false);
  ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(project);
  ToolWindow toolWindow=toolWindowManager.registerToolWindow(JENKINS_BROWSER,false,ToolWindowAnchor.RIGHT);
  toolWindow.setIcon(JENKINS_ICON);
  ContentManager contentManager=toolWindow.getContentManager();
  contentManager.addContent(content);
  final StatusBar statusBar=WindowManager.getInstance().getStatusBar(project);
  JenkinsWidget jenkinsWidget=JenkinsWidget.getInstance(project);
  statusBar.addWidget(jenkinsWidget);
  jenkinsWidget.install(statusBar);
  final RssLogic rssLogic=RssLogic.getInstance(project);
  StartupManager.getInstance(project).registerPostStartupActivity(new DumbAwareRunnable(){
    @Override public void run(){
      browserPanel.init();
      rssLogic.init();
    }
  }
);
}","public JenkinsWindowManager(Project project){
  this.project=project;
  final BrowserPanel browserPanel=BrowserPanel.getInstance(project);
  Content content=ContentFactory.SERVICE.getInstance().createContent(browserPanel,null,false);
  ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(project);
  ToolWindow toolWindow=toolWindowManager.registerToolWindow(JENKINS_BROWSER,false,ToolWindowAnchor.RIGHT);
  toolWindow.setIcon(JENKINS_ICON);
  ContentManager contentManager=toolWindow.getContentManager();
  contentManager.addContent(content);
  final StatusBar statusBar=WindowManager.getInstance().getStatusBar(project);
  final JenkinsWidget jenkinsWidget=JenkinsWidget.getInstance(project);
  statusBar.addWidget(jenkinsWidget);
  jenkinsWidget.install(statusBar);
  final RssLogic rssLogic=RssLogic.getInstance(project);
  StartupManager.getInstance(project).registerPostStartupActivity(new DumbAwareRunnable(){
    @Override public void run(){
      browserPanel.init();
      rssLogic.init();
    }
  }
);
}",0.9970731707317072
177954,"public void reloadConfiguration(){
  BrowserPanel browserPanel=BrowserPanel.getInstance(project);
  browserPanel.reloadConfiguration();
  browserPanel.initScheduledJobs(scheduledThreadPoolExecutor);
  RssLogic.getInstance(project).initScheduledJobs(scheduledThreadPoolExecutor);
}","public void reloadConfiguration(){
  BrowserPanel browserPanel=BrowserPanel.getInstance(project);
  browserPanel.reloadConfiguration();
}",0.657074340527578
177955,"public JenkinsWindowManager(Project project){
  this.project=project;
  final BrowserPanel browserPanel=BrowserPanel.getInstance(project);
  Content content=ContentFactory.SERVICE.getInstance().createContent(browserPanel,null,false);
  ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(project);
  ToolWindow toolWindow=toolWindowManager.registerToolWindow(JENKINS_BROWSER,false,ToolWindowAnchor.RIGHT);
  toolWindow.setIcon(JENKINS_ICON);
  ContentManager contentManager=toolWindow.getContentManager();
  contentManager.addContent(content);
  final StatusBar statusBar=WindowManager.getInstance().getStatusBar(project);
  JenkinsWidget jenkinsWidget=JenkinsWidget.getInstance(project);
  statusBar.addWidget(jenkinsWidget);
  jenkinsWidget.install(statusBar);
  final RssLogic rssLogic=RssLogic.getInstance(project);
  StartupManager.getInstance(project).registerPostStartupActivity(new DumbAwareRunnable(){
    @Override public void run(){
      browserPanel.init();
      browserPanel.initScheduledJobs(scheduledThreadPoolExecutor);
      rssLogic.init();
      rssLogic.initScheduledJobs(scheduledThreadPoolExecutor);
    }
  }
);
}","public JenkinsWindowManager(Project project){
  this.project=project;
  final BrowserPanel browserPanel=BrowserPanel.getInstance(project);
  Content content=ContentFactory.SERVICE.getInstance().createContent(browserPanel,null,false);
  ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(project);
  ToolWindow toolWindow=toolWindowManager.registerToolWindow(JENKINS_BROWSER,false,ToolWindowAnchor.RIGHT);
  toolWindow.setIcon(JENKINS_ICON);
  ContentManager contentManager=toolWindow.getContentManager();
  contentManager.addContent(content);
  final StatusBar statusBar=WindowManager.getInstance().getStatusBar(project);
  JenkinsWidget jenkinsWidget=JenkinsWidget.getInstance(project);
  statusBar.addWidget(jenkinsWidget);
  jenkinsWidget.install(statusBar);
  final RssLogic rssLogic=RssLogic.getInstance(project);
  StartupManager.getInstance(project).registerPostStartupActivity(new DumbAwareRunnable(){
    @Override public void run(){
      browserPanel.init();
      rssLogic.init();
    }
  }
);
}",0.940202391904324
177956,"@Override public void run(){
  browserPanel.init();
  browserPanel.initScheduledJobs(scheduledThreadPoolExecutor);
  rssLogic.init();
  rssLogic.initScheduledJobs(scheduledThreadPoolExecutor);
}","@Override public void run(){
  browserPanel.init();
  rssLogic.init();
}",0.5413533834586466
177957,"@Override public void afterLogin(Project project){
  RssLogic rssLogic=RssLogic.getInstance(project);
  rssLogic.loadLatestBuilds(false);
}","@Override public void afterLogin(Project project){
  RssLogic rssLogic=RssLogic.getInstance(project);
  rssLogic.loadLatestBuilds(false);
  rssLogic.initScheduledJobs(JenkinsWindowManager.getInstance(project).getScheduledThreadPoolExecutor());
}",0.7239583333333334
177958,"public RSSLoaderActionHandler(){
  MessageBus myBus=ApplicationManager.getApplication().getMessageBus();
  myBus.connect().subscribe(RefreshActionNotifier.USER_LOGGED_IN,new RefreshActionNotifier(){
    @Override public void afterLogin(    Project project){
      RssLogic rssLogic=RssLogic.getInstance(project);
      rssLogic.loadLatestBuilds(false);
    }
  }
);
}","public RSSLoaderActionHandler(){
  MessageBus myBus=ApplicationManager.getApplication().getMessageBus();
  myBus.connect().subscribe(RefreshActionNotifier.USER_LOGGED_IN,new RefreshActionNotifier(){
    @Override public void afterLogin(    Project project){
      RssLogic rssLogic=RssLogic.getInstance(project);
      rssLogic.loadLatestBuilds(false);
      rssLogic.initScheduledJobs(JenkinsWindowManager.getInstance(project).getScheduledThreadPoolExecutor());
    }
  }
);
}",0.8696682464454977
177959,"public RefreshNodeActionHandler(){
  MessageBus myBus=ApplicationManager.getApplication().getMessageBus();
  myBus.connect().subscribe(RefreshActionNotifier.USER_LOGGED_IN,new RefreshActionNotifier(){
    @Override public void afterLogin(    Project project){
      BrowserPanel browser=BrowserPanel.getInstance(project);
      browser.postAuthenticationInitialization();
    }
  }
);
}","public RefreshNodeActionHandler(){
  MessageBus myBus=ApplicationManager.getApplication().getMessageBus();
  myBus.connect().subscribe(RefreshActionNotifier.USER_LOGGED_IN,new RefreshActionNotifier(){
    @Override public void afterLogin(    Project project){
      BrowserPanel browser=BrowserPanel.getInstance(project);
      browser.postAuthenticationInitialization();
      browser.initScheduledJobs(JenkinsWindowManager.getInstance(project).getScheduledThreadPoolExecutor());
    }
  }
);
}",0.8762769580022701
177960,"@Override public void afterLogin(Project project){
  BrowserPanel browser=BrowserPanel.getInstance(project);
  browser.postAuthenticationInitialization();
}","@Override public void afterLogin(Project project){
  BrowserPanel browser=BrowserPanel.getInstance(project);
  browser.postAuthenticationInitialization();
  browser.initScheduledJobs(JenkinsWindowManager.getInstance(project).getScheduledThreadPoolExecutor());
}",0.7482014388489209
177961,"public static void runInSwingThread(Runnable runnable){
  if (SwingUtilities.isEventDispatchThread()) {
    runnable.run();
  }
 else {
    SwingUtilities.invokeLater(runnable);
  }
}","@Deprecated public static void runInSwingThread(Runnable runnable){
  if (SwingUtilities.isEventDispatchThread()) {
    runnable.run();
  }
 else {
    SwingUtilities.invokeLater(runnable);
  }
}",0.9682539682539684
177962,"public void reloadConfiguration(){
  if (!SwingUtilities.isEventDispatchThread()) {
    logger.warn(""String_Node_Str"");
  }
  if (!jenkinsAppSettings.isServerUrlSet()) {
    JenkinsWidget.getInstance(project).updateStatusIcon(BuildStatusAggregator.EMPTY);
    DefaultTreeModel model=(DefaultTreeModel)jobTree.getModel();
    DefaultMutableTreeNode root=(DefaultMutableTreeNode)model.getRoot();
    root.removeAllChildren();
    model.nodeStructureChanged(root);
    jobTree.setRootVisible(false);
    jenkins.update(Jenkins.byDefault());
    currentSelectedView=null;
    jobTree.getEmptyText().setText(UNAVAILABLE);
    return;
  }
  new Task.Backgroundable(project,""String_Node_Str"",false,JenkinsLoadingTaskOption.INSTANCE){
    private Jenkins jenkinsWorkspace;
    @Override public void onSuccess(){
      jenkins.update(jenkinsWorkspace);
    }
    @Override public void onCancel(){
      jobTree.getEmptyText().setText(UNAVAILABLE);
    }
    @Override public void run(    @NotNull ProgressIndicator indicator){
      indicator.setIndeterminate(true);
      requestManager.authenticate(jenkinsAppSettings,jenkinsSettings);
      jenkinsWorkspace=requestManager.loadJenkinsWorkspace(jenkinsAppSettings);
    }
  }
.queue();
  if (!jenkinsSettings.getFavoriteJobs().isEmpty()) {
    createFavoriteViewIfNecessary();
  }
  String lastSelectedViewName=jenkinsSettings.getLastSelectedView();
  View viewToLoad;
  if (StringUtils.isEmpty(lastSelectedViewName)) {
    viewToLoad=jenkins.getPrimaryView();
  }
 else   if (favoriteView != null && lastSelectedViewName.equals(favoriteView.getName())) {
    viewToLoad=favoriteView;
  }
 else {
    viewToLoad=jenkins.getViewByName(lastSelectedViewName);
  }
  loadView(viewToLoad);
}","public void reloadConfiguration(){
  if (!SwingUtilities.isEventDispatchThread()) {
    logger.warn(""String_Node_Str"");
  }
  if (!jenkinsAppSettings.isServerUrlSet()) {
    JenkinsWidget.getInstance(project).updateStatusIcon(BuildStatusAggregator.EMPTY);
    DefaultTreeModel model=(DefaultTreeModel)jobTree.getModel();
    DefaultMutableTreeNode root=(DefaultMutableTreeNode)model.getRoot();
    root.removeAllChildren();
    model.nodeStructureChanged(root);
    jobTree.setRootVisible(false);
    jenkins.update(Jenkins.byDefault());
    currentSelectedView=null;
    jobTree.getEmptyText().setText(UNAVAILABLE);
    return;
  }
  new Task.Backgroundable(project,""String_Node_Str"",false,JenkinsLoadingTaskOption.INSTANCE){
    private Jenkins jenkinsWorkspace;
    @Override public void onSuccess(){
      jenkins.update(jenkinsWorkspace);
      BrowserPanel.this.refreshCurrentView();
    }
    @Override public void onCancel(){
      jobTree.getEmptyText().setText(UNAVAILABLE);
    }
    @Override public void run(    @NotNull ProgressIndicator indicator){
      indicator.setIndeterminate(true);
      requestManager.authenticate(jenkinsAppSettings,jenkinsSettings);
      jenkinsWorkspace=requestManager.loadJenkinsWorkspace(jenkinsAppSettings);
    }
  }
.queue();
  if (!jenkinsSettings.getFavoriteJobs().isEmpty()) {
    createFavoriteViewIfNecessary();
  }
  String lastSelectedViewName=jenkinsSettings.getLastSelectedView();
  View viewToLoad;
  if (StringUtils.isEmpty(lastSelectedViewName)) {
    viewToLoad=jenkins.getPrimaryView();
  }
 else   if (favoriteView != null && lastSelectedViewName.equals(favoriteView.getName())) {
    viewToLoad=favoriteView;
  }
 else {
    viewToLoad=jenkins.getViewByName(lastSelectedViewName);
  }
  loadView(viewToLoad);
}",0.9868721461187214
177963,"@Override public void actionPerformed(AnActionEvent event){
  try {
    Project project=browserPanel.getProject();
    Job job=browserPanel.getSelectedJob();
    RequestManager requestManager=browserPanel.getJenkinsManager();
    if (job.hasParameters()) {
      BuildParamDialog.showDialog(job,JenkinsAppSettings.getSafeInstance(project),requestManager,new BuildParamDialog.RunBuildCallback(){
        public void notifyOnOk(        Job job){
          notifyOnGoingMessage(job);
        }
        public void notifyOnError(        Job job,        Exception ex){
          browserPanel.notifyErrorJenkinsToolWindow(""String_Node_Str"" + job.getName() + ""String_Node_Str""+ ex.getMessage());
        }
      }
);
    }
 else {
      requestManager.runBuild(job,JenkinsAppSettings.getSafeInstance(project));
      notifyOnGoingMessage(job);
      browserPanel.loadSelectedJob();
    }
  }
 catch (  Exception ex) {
    LOG.error(ex.getMessage(),ex);
    browserPanel.notifyErrorJenkinsToolWindow(""String_Node_Str"" + ex.getMessage());
  }
}","@Override public void actionPerformed(AnActionEvent event){
  Project project=ActionUtil.getProject(event);
  try {
    Job job=browserPanel.getSelectedJob();
    RequestManager requestManager=browserPanel.getJenkinsManager();
    if (job.hasParameters()) {
      BuildParamDialog.showDialog(job,JenkinsAppSettings.getSafeInstance(project),requestManager,new BuildParamDialog.RunBuildCallback(){
        public void notifyOnOk(        Job job){
          notifyOnGoingMessage(job);
        }
        public void notifyOnError(        Job job,        Exception ex){
          browserPanel.notifyErrorJenkinsToolWindow(""String_Node_Str"" + job.getName() + ""String_Node_Str""+ ex.getMessage());
        }
      }
);
    }
 else {
      requestManager.runBuild(job,JenkinsAppSettings.getSafeInstance(project));
      notifyOnGoingMessage(job);
      browserPanel.loadSelectedJob();
    }
  }
 catch (  Exception ex) {
    LOG.error(ex.getMessage(),ex);
    browserPanel.notifyErrorJenkinsToolWindow(""String_Node_Str"" + ex.getMessage());
  }
}",0.9541284403669724
177964,"private void runMethod(String url,ResponseCollector responseCollector){
  httpClient.getParams().setAuthenticationPreemptive(false);
  PostMethod post=new PostMethod(url);
  setCrumbValueIfNeeded();
  if (isCrumbDataSet()) {
    post.addRequestHeader(CRUMB_NAME,crumbValue);
  }
  InputStream inputStream=null;
  try {
    int statusCode=httpClient.executeMethod(post);
    inputStream=post.getResponseBodyAsStream();
    String responseBody=IOUtils.toString(inputStream,post.getResponseCharSet());
    checkResponse(statusCode,responseBody);
    if (HttpURLConnection.HTTP_OK == statusCode) {
      responseCollector.collect(statusCode,responseBody);
    }
    if (isRedirection(statusCode)) {
      responseCollector.collect(statusCode,post.getResponseHeader(""String_Node_Str"").getValue());
    }
  }
 catch (  HttpException httpEx) {
    throw new ConfigurationException(String.format(""String_Node_Str"",url),httpEx);
  }
catch (  IOException ioEx) {
    throw new ConfigurationException(String.format(""String_Node_Str"",url),ioEx);
  }
 finally {
    IOUtils.closeQuietly(inputStream);
    post.releaseConnection();
  }
}","private void runMethod(String url,ResponseCollector responseCollector){
  PostMethod post=new PostMethod(url);
  setCrumbValueIfNeeded();
  if (isCrumbDataSet()) {
    post.addRequestHeader(CRUMB_NAME,crumbValue);
  }
  InputStream inputStream=null;
  try {
    int statusCode=httpClient.executeMethod(post);
    inputStream=post.getResponseBodyAsStream();
    String responseBody=IOUtils.toString(inputStream,post.getResponseCharSet());
    checkResponse(statusCode,responseBody);
    if (HttpURLConnection.HTTP_OK == statusCode) {
      responseCollector.collect(statusCode,responseBody);
    }
    if (isRedirection(statusCode)) {
      responseCollector.collect(statusCode,post.getResponseHeader(""String_Node_Str"").getValue());
    }
  }
 catch (  HttpException httpEx) {
    throw new ConfigurationException(String.format(""String_Node_Str"",url),httpEx);
  }
catch (  IOException ioEx) {
    throw new ConfigurationException(String.format(""String_Node_Str"",url),ioEx);
  }
 finally {
    IOUtils.closeQuietly(inputStream);
    post.releaseConnection();
  }
}",0.9720823798627002
177965,"private void showRssPanel(RelativePoint point){
  myPopup=JBPopupFactory.getInstance().createComponentPopupBuilder(buildStatusSummaryPanel,buildStatusSummaryPanel).setMovable(true).setResizable(true).setTitle(""String_Node_Str"").setDimensionServiceKey(null,""String_Node_Str"",true).setMinSize(getMinSize()).setCancelOnClickOutside(false).setRequestFocus(false).setBelongsToGlobalPopupStack(true).setLocateByContent(true).setCancelButton(new MinimizeButton(""String_Node_Str"")).createPopup();
  myPopup.showInScreenCoordinates(buildStatusSummaryPanel,new Point(point.getPoint()));
}","private void showRssPanel(RelativePoint point){
  myPopup=JBPopupFactory.getInstance().createComponentPopupBuilder(buildStatusSummaryPanel,buildStatusSummaryPanel).setMovable(true).setResizable(true).setTitle(""String_Node_Str"").setDimensionServiceKey(null,""String_Node_Str"",true).setMinSize(getMinSize()).setCancelOnClickOutside(false).setRequestFocus(false).setBelongsToGlobalPopupStack(true).setLocateByContent(true).setCancelButton(new MinimizeButton(""String_Node_Str"")).createPopup();
  myPopup.show(point);
}",0.92942254812099
177966,"private Jenkins createJenkins(Document doc){
  Element jenkinsElement=doc.getRootElement();
  if (!StringUtils.equals(JENKINS_ROOT_TAG,jenkinsElement.getName()) && StringUtils.equals(HUDSON_ROOT_TAG,jenkinsElement.getName())) {
    throw new ConfigurationException(""String_Node_Str"" + jenkinsElement.getName());
  }
  String description=jenkinsElement.getChildText(JENKINS_DESCRIPTION);
  if (description == null) {
    description=""String_Node_Str"";
  }
  return new Jenkins(description);
}","private Jenkins createJenkins(Document doc){
  Element jenkinsElement=doc.getRootElement();
  if (!StringUtils.equals(JENKINS_ROOT_TAG,jenkinsElement.getName()) && !StringUtils.equals(HUDSON_ROOT_TAG,jenkinsElement.getName())) {
    throw new ConfigurationException(""String_Node_Str"" + jenkinsElement.getName() + ""String_Node_Str"");
  }
  String description=jenkinsElement.getChildText(JENKINS_DESCRIPTION);
  if (description == null) {
    description=""String_Node_Str"";
  }
  return new Jenkins(description);
}",0.979062811565304
177967,"public Map<String,Build> loadJenkinsRssLatestBuilds(JenkinsConfiguration configuration) throws Exception {
  URL url=urlBuilder.createRssLatestUrl(configuration.getServerUrl());
  String inputStream=securityClient.execute(url);
  try {
    Document doc=getXMLBuilder().build(new CharSequenceReader(inputStream));
    return createLatestBuildList(doc);
  }
 catch (  Exception e) {
    throw new Exception(""String_Node_Str"" + inputStream);
  }
}","public Map<String,Build> loadJenkinsRssLatestBuilds(JenkinsConfiguration configuration) throws Exception {
  URL url=urlBuilder.createRssLatestUrl(configuration.getServerUrl());
  String rssData=securityClient.execute(url);
  Document doc=getXMLBuilder().build(new CharSequenceReader(rssData));
  return createLatestBuildList(doc);
}",0.8211068211068211
177968,"BasicSecurityClient(String username,String passwordFile,String crumbDataFile){
  super(new HttpClient(),crumbDataFile);
  this.username=username;
  this.passwordFile=passwordFile;
}","BasicSecurityClient(String username,String passwordFile,String crumbDataFile){
  super(new HttpClient(new MultiThreadedHttpConnectionManager()),crumbDataFile);
  this.username=username;
  this.passwordFile=passwordFile;
}",0.900497512437811
177969,"NoSecurityClient(String crumbDataFile){
  super(new HttpClient(),crumbDataFile);
}","NoSecurityClient(String crumbDataFile){
  super(new HttpClient(new MultiThreadedHttpConnectionManager()),crumbDataFile);
}",0.803921568627451
177970,"private void setType(String paramType){
  jobParameterType=JobParameterType.valueOf(paramType);
}","private void setType(String paramType){
  jobParameterType=evaluate(paramType);
}",0.8876404494382022
177971,"private void generateBuilderConstructorCopy(){
  if (data.isEffectiveBuilderScopeVisible()) {
    List<PropertyGen> nonDerived=nonDerivedProperties();
    if (nonDerived.size() > 0) {
      insertRegion.add(""String_Node_Str"");
      insertRegion.add(""String_Node_Str"");
      insertRegion.add(""String_Node_Str"");
      insertRegion.add(""String_Node_Str"");
      insertRegion.add(""String_Node_Str"" + data.getNestedClassConstructorScope() + ""String_Node_Str""+ data.getTypeNoExtends()+ ""String_Node_Str"");
      for (int i=0; i < nonDerived.size(); i++) {
        insertRegion.addAll(nonDerived.get(i).generateBuilderConstructorAssign(""String_Node_Str""));
      }
      insertRegion.add(""String_Node_Str"");
      insertRegion.add(""String_Node_Str"");
    }
  }
}","private void generateBuilderConstructorCopy(){
  if (data.isEffectiveBuilderScopeVisible()) {
    List<PropertyGen> nonDerived=nonDerivedProperties();
    if (nonDerived.size() > 0) {
      insertRegion.add(""String_Node_Str"");
      insertRegion.add(""String_Node_Str"");
      insertRegion.add(""String_Node_Str"");
      insertRegion.add(""String_Node_Str"");
      insertRegion.add(""String_Node_Str"" + data.getNestedClassConstructorScope() + ""String_Node_Str""+ data.getTypeNoExtends()+ ""String_Node_Str"");
      if (data.isSubClass()) {
        insertRegion.add(""String_Node_Str"");
      }
      for (int i=0; i < nonDerived.size(); i++) {
        insertRegion.addAll(nonDerived.get(i).generateBuilderConstructorAssign(""String_Node_Str""));
      }
      insertRegion.add(""String_Node_Str"");
      insertRegion.add(""String_Node_Str"");
    }
  }
}",0.9475
177972,"/** 
 * Restricted copy constructor.
 * @param beanToCopy  the bean to copy from, not null
 */
protected Builder(ImmSubPersonFromAbstract beanToCopy){
  this.middleName=beanToCopy.getMiddleName();
  this.addressList=beanToCopy.getAddressList();
}","/** 
 * Restricted copy constructor.
 * @param beanToCopy  the bean to copy from, not null
 */
protected Builder(ImmSubPersonFromAbstract beanToCopy){
  super(beanToCopy);
  this.middleName=beanToCopy.getMiddleName();
  this.addressList=beanToCopy.getAddressList();
}",0.95906432748538
177973,"/** 
 * Restricted copy constructor.
 * @param beanToCopy  the bean to copy from, not null
 */
protected Builder(ImmSubPersonNonFinal beanToCopy){
  this.middleName=beanToCopy.getMiddleName();
  this.addressList=beanToCopy.getAddressList();
}","/** 
 * Restricted copy constructor.
 * @param beanToCopy  the bean to copy from, not null
 */
protected Builder(ImmSubPersonNonFinal beanToCopy){
  super(beanToCopy);
  this.middleName=beanToCopy.getMiddleName();
  this.addressList=beanToCopy.getAddressList();
}",0.9584158415841584
177974,"/** 
 * Restricted copy constructor.
 * @param beanToCopy  the bean to copy from, not null
 */
private Builder(ImmSubSubPersonFinal beanToCopy){
  this.codeCounts=beanToCopy.getCodeCounts();
}","/** 
 * Restricted copy constructor.
 * @param beanToCopy  the bean to copy from, not null
 */
private Builder(ImmSubSubPersonFinal beanToCopy){
  super(beanToCopy);
  this.codeCounts=beanToCopy.getCodeCounts();
}",0.9481481481481482
177975,"/** 
 * Restricted copy constructor.
 * @param beanToCopy  the bean to copy from, not null
 */
private Builder(SimpleSubPersonWithBuilderFinal beanToCopy){
  this.middleName=beanToCopy.getMiddleName();
}","/** 
 * Restricted copy constructor.
 * @param beanToCopy  the bean to copy from, not null
 */
private Builder(SimpleSubPersonWithBuilderFinal beanToCopy){
  super(beanToCopy);
  this.middleName=beanToCopy.getMiddleName();
}",0.9508196721311476
177976,"/** 
 * Restricted copy constructor.
 * @param beanToCopy  the bean to copy from, not null
 */
protected Builder(SimpleSubPersonWithBuilderNonFinal beanToCopy){
  this.middleName=beanToCopy.getMiddleName();
}","/** 
 * Restricted copy constructor.
 * @param beanToCopy  the bean to copy from, not null
 */
protected Builder(SimpleSubPersonWithBuilderNonFinal beanToCopy){
  super(beanToCopy);
  this.middleName=beanToCopy.getMiddleName();
}",0.9519450800915332
177977,"private static Field findField(MetaBean metaBean,String propertyName){
  Field field=null;
  Class<?> cls=metaBean.beanType();
  while (cls != DirectBean.class) {
    try {
      field=cls.getDeclaredField(propertyName);
      break;
    }
 catch (    NoSuchFieldException ex) {
      try {
        field=cls.getDeclaredField(""String_Node_Str"" + propertyName);
        break;
      }
 catch (      NoSuchFieldException ex2) {
        cls=cls.getSuperclass();
      }
    }
  }
  return field;
}","private static Field findField(MetaBean metaBean,String propertyName){
  Field field=null;
  Class<?> cls=metaBean.beanType();
  while (cls != DirectBean.class && cls != Object.class && cls != null) {
    try {
      field=cls.getDeclaredField(propertyName);
      break;
    }
 catch (    NoSuchFieldException ex) {
      try {
        field=cls.getDeclaredField(""String_Node_Str"" + propertyName);
        break;
      }
 catch (      NoSuchFieldException ex2) {
        cls=cls.getSuperclass();
      }
    }
  }
  return field;
}",0.9629629629629628
177978,"private String parseSetStyle(List<String> content){
  String line=content.get(annotationIndex).trim();
  Matcher matcher=SETTER_PATTERN.matcher(line);
  if (matcher.matches()) {
    return matcher.group(1);
  }
  return ""String_Node_Str"";
}","private String parseSetStyle(List<String> content){
  String line=content.get(propertyIndex).trim();
  Matcher matcher=SETTER_PATTERN.matcher(line);
  if (matcher.matches()) {
    return matcher.group(1);
  }
  return ""String_Node_Str"";
}",0.9623430962343096
177979,"/** 
 * Constructor.
 * @param bean  the bean generator
 * @param content  the lines, not null
 * @param lineIndex  the index of a PropertyDefinition
 * @param derived  true if derived
 */
public PropertyGen(BeanGen bean,List<String> content,int lineIndex,boolean derived){
  this.bean=bean;
  this.annotationIndex=parseAnnotationStart(content,lineIndex);
  this.fieldIndex=parseCodeIndex(content);
  GeneratableProperty prop=new GeneratableProperty(bean.getData(),bean.getConfig());
  if (derived) {
    prop.setGetStyle(""String_Node_Str"");
    prop.setSetStyle(""String_Node_Str"");
    prop.setTypeStyle(""String_Node_Str"");
    prop.setDeprecated(parseDeprecated(content));
    prop.setPropertyName(parseMethodNameAsPropertyName(content));
    prop.setUpperName(makeUpperName(prop.getPropertyName()));
    prop.setFieldType(parseMethodType(content));
  }
 else {
    prop.setGetStyle(parseGetStyle(content));
    prop.setSetStyle(parseSetStyle(content));
    prop.setTypeStyle(parseTypeStyle(content));
    prop.setValidation(parseValidation(content));
    prop.setDeprecated(parseDeprecated(content));
    prop.setFieldName(parseFieldName(content));
    prop.setPropertyName(makePropertyName(bean,prop.getFieldName()));
    prop.setUpperName(makeUpperName(prop.getPropertyName()));
    prop.setFinal(parseFinal(content));
    prop.setFieldType(parseFieldType(content));
  }
  prop.resolveType();
  prop.resolveGetterGen();
  prop.resolveSetterGen();
  prop.resolveCopyGen();
  prop.resolveBuilderGen();
  List<String> comments=parseComment(content,prop.getPropertyName());
  prop.setFirstComment(comments.get(0));
  prop.getComments().addAll(comments.subList(1,comments.size()));
  this.data=prop;
}","/** 
 * Constructor.
 * @param bean  the bean generator
 * @param content  the lines, not null
 * @param lineIndex  the index of a PropertyDefinition
 * @param derived  true if derived
 */
public PropertyGen(BeanGen bean,List<String> content,int lineIndex,boolean derived){
  this.bean=bean;
  this.propertyIndex=lineIndex;
  this.annotationIndex=parseAnnotationStart(content,lineIndex);
  this.fieldIndex=parseCodeIndex(content);
  GeneratableProperty prop=new GeneratableProperty(bean.getData(),bean.getConfig());
  if (derived) {
    prop.setGetStyle(""String_Node_Str"");
    prop.setSetStyle(""String_Node_Str"");
    prop.setTypeStyle(""String_Node_Str"");
    prop.setDeprecated(parseDeprecated(content));
    prop.setPropertyName(parseMethodNameAsPropertyName(content));
    prop.setUpperName(makeUpperName(prop.getPropertyName()));
    prop.setFieldType(parseMethodType(content));
  }
 else {
    prop.setGetStyle(parseGetStyle(content));
    prop.setSetStyle(parseSetStyle(content));
    prop.setTypeStyle(parseTypeStyle(content));
    prop.setValidation(parseValidation(content));
    prop.setDeprecated(parseDeprecated(content));
    prop.setFieldName(parseFieldName(content));
    prop.setPropertyName(makePropertyName(bean,prop.getFieldName()));
    prop.setUpperName(makeUpperName(prop.getPropertyName()));
    prop.setFinal(parseFinal(content));
    prop.setFieldType(parseFieldType(content));
  }
  prop.resolveType();
  prop.resolveGetterGen();
  prop.resolveSetterGen();
  prop.resolveCopyGen();
  prop.resolveBuilderGen();
  List<String> comments=parseComment(content,prop.getPropertyName());
  prop.setFirstComment(comments.get(0));
  prop.getComments().addAll(comments.subList(1,comments.size()));
  this.data=prop;
}",0.9906814210832848
177980,"private String parseTypeStyle(List<String> content){
  String line=content.get(annotationIndex).trim();
  Matcher matcher=TYPE_PATTERN.matcher(line);
  if (matcher.matches()) {
    return matcher.group(1);
  }
  return ""String_Node_Str"";
}","private String parseTypeStyle(List<String> content){
  String line=content.get(propertyIndex).trim();
  Matcher matcher=TYPE_PATTERN.matcher(line);
  if (matcher.matches()) {
    return matcher.group(1);
  }
  return ""String_Node_Str"";
}",0.96218487394958
177981,"private boolean parseFinal(List<String> content){
  String line=parseFieldDefinition(content);
  String[] parts=line.split(""String_Node_Str"");
  if (parts.length < 2) {
    throw new RuntimeException(""String_Node_Str"" + annotationIndex);
  }
  if (parts[0].equals(""String_Node_Str"") || parts[1].equals(""String_Node_Str"") || (parts.length >= 3 && parts[2].equals(""String_Node_Str""))) {
    return true;
  }
  return false;
}","private boolean parseFinal(List<String> content){
  String line=parseFieldDefinition(content);
  String[] parts=line.split(""String_Node_Str"");
  if (parts.length < 2) {
    throw new RuntimeException(""String_Node_Str"" + propertyIndex);
  }
  if (parts[0].equals(""String_Node_Str"") || parts[1].equals(""String_Node_Str"") || (parts.length >= 3 && parts[2].equals(""String_Node_Str""))) {
    return true;
  }
  return false;
}",0.9786729857819904
177982,"private String parseFieldName(List<String> content){
  String line=parseFieldDefinition(content);
  String[] parts=line.split(""String_Node_Str"");
  String last=parts[parts.length - 1];
  if (last.endsWith(""String_Node_Str"") && last.length() > 1) {
    return last.substring(0,last.length() - 1);
  }
  throw new RuntimeException(""String_Node_Str"" + annotationIndex);
}","private String parseFieldName(List<String> content){
  String line=parseFieldDefinition(content);
  String[] parts=line.split(""String_Node_Str"");
  String last=parts[parts.length - 1];
  if (last.endsWith(""String_Node_Str"") && last.length() > 1) {
    return last.substring(0,last.length() - 1);
  }
  throw new RuntimeException(""String_Node_Str"" + propertyIndex);
}",0.9754768392370572
177983,"private String parseValidation(List<String> content){
  String line=content.get(annotationIndex).trim();
  Matcher matcher=VALIDATION_PATTERN.matcher(line);
  if (matcher.matches()) {
    return matcher.group(1);
  }
  return ""String_Node_Str"";
}","private String parseValidation(List<String> content){
  String line=content.get(propertyIndex).trim();
  Matcher matcher=VALIDATION_PATTERN.matcher(line);
  if (matcher.matches()) {
    return matcher.group(1);
  }
  return ""String_Node_Str"";
}",0.963265306122449
177984,"private String parseGetStyle(List<String> content){
  String line=content.get(annotationIndex).trim();
  Matcher matcher=GETTER_PATTERN.matcher(line);
  if (matcher.matches()) {
    return matcher.group(1);
  }
  return ""String_Node_Str"";
}","private String parseGetStyle(List<String> content){
  String line=content.get(propertyIndex).trim();
  Matcher matcher=GETTER_PATTERN.matcher(line);
  if (matcher.matches()) {
    return matcher.group(1);
  }
  return ""String_Node_Str"";
}",0.9623430962343096
177985,"private int parseCodeIndex(List<String> content){
  for (int index=annotationIndex; index < content.size(); index++) {
    if (content.get(index).trim().startsWith(""String_Node_Str"") == false) {
      if (content.get(index).trim().length() == 0) {
        throw new RuntimeException(""String_Node_Str"" + annotationIndex + ""String_Node_Str"");
      }
      return index;
    }
  }
  throw new RuntimeException(""String_Node_Str"" + annotationIndex);
}","private int parseCodeIndex(List<String> content){
  for (int index=propertyIndex; index < content.size(); index++) {
    if (content.get(index).trim().startsWith(""String_Node_Str"") == false) {
      if (content.get(index).trim().length() == 0) {
        throw new RuntimeException(""String_Node_Str"" + propertyIndex + ""String_Node_Str"");
      }
      return index;
    }
  }
  throw new RuntimeException(""String_Node_Str"" + propertyIndex);
}",0.9391891891891893
177986,"private String parseFieldType(List<String> content){
  String line=parseFieldDefinition(content);
  String[] parts=line.split(""String_Node_Str"");
  if (parts.length < 2) {
    throw new RuntimeException(""String_Node_Str"" + annotationIndex);
  }
  int partsPos=parts.length - 2;
  String type=parts[partsPos];
  while (true) {
    int open=0, openPos=0, close=0, closePos=0;
    while ((openPos=type.indexOf('<',openPos)) >= 0) {
      open++;
      openPos++;
    }
    while ((closePos=type.indexOf('>',closePos)) >= 0) {
      close++;
      closePos++;
    }
    if (open == close) {
      break;
    }
    if (partsPos == 0) {
      throw new RuntimeException(""String_Node_Str"" + annotationIndex + ""String_Node_Str"");
    }
    partsPos--;
    type=parts[partsPos] + ""String_Node_Str"" + type;
  }
  return type;
}","private String parseFieldType(List<String> content){
  String line=parseFieldDefinition(content);
  String[] parts=line.split(""String_Node_Str"");
  if (parts.length < 2) {
    throw new RuntimeException(""String_Node_Str"" + propertyIndex);
  }
  int partsPos=parts.length - 2;
  String type=parts[partsPos];
  while (true) {
    int open=0, openPos=0, close=0, closePos=0;
    while ((openPos=type.indexOf('<',openPos)) >= 0) {
      open++;
      openPos++;
    }
    while ((closePos=type.indexOf('>',closePos)) >= 0) {
      close++;
      closePos++;
    }
    if (open == close) {
      break;
    }
    if (partsPos == 0) {
      throw new RuntimeException(""String_Node_Str"" + propertyIndex + ""String_Node_Str"");
    }
    partsPos--;
    type=parts[partsPos] + ""String_Node_Str"" + type;
  }
  return type;
}",0.977914110429448
177987,"@Override protected MetaProperty<?> metaPropertyGet(String propertyName){
switch (propertyName.hashCode()) {
case 467061063:
    return forename;
case -1852993317:
  return surname;
case 926656063:
return numberOfCars;
case -1377524046:
return addressList;
case 1368089592:
return otherAddressMap;
case -226885792:
return addressesList;
case -2032731141:
return mainAddress;
case -1809421292:
return extensions;
}
return super.metaPropertyGet(propertyName);
}","@Override protected MetaProperty<?> metaPropertyGet(String propertyName){
switch (propertyName.hashCode()) {
case 467061063:
    return forename;
case -1852993317:
  return surname;
case 926656063:
return numberOfCars;
case -1377524046:
return addressList;
case 1368089592:
return otherAddressMap;
case -226885792:
return addressesList;
case -2032731141:
return mainAddress;
case 1897330136:
return propDefAnnotationSecondDeprecated;
case 1276990059:
return propDefAnnotationSecondManual;
}
return super.metaPropertyGet(propertyName);
}",0.8663316582914573
177988,"@Override public int hashCode(){
  int hash=getClass().hashCode();
  hash+=hash * 31 + JodaBeanUtils.hashCode(getForename());
  hash+=hash * 31 + JodaBeanUtils.hashCode(getSurname());
  hash+=hash * 31 + JodaBeanUtils.hashCode(getNumberOfCars());
  hash+=hash * 31 + JodaBeanUtils.hashCode(getAddressList());
  hash+=hash * 31 + JodaBeanUtils.hashCode(getOtherAddressMap());
  hash+=hash * 31 + JodaBeanUtils.hashCode(getAddressesList());
  hash+=hash * 31 + JodaBeanUtils.hashCode(getMainAddress());
  hash+=hash * 31 + JodaBeanUtils.hashCode(getExtensions());
  return hash;
}","@Override public int hashCode(){
  int hash=getClass().hashCode();
  hash+=hash * 31 + JodaBeanUtils.hashCode(getForename());
  hash+=hash * 31 + JodaBeanUtils.hashCode(getSurname());
  hash+=hash * 31 + JodaBeanUtils.hashCode(getNumberOfCars());
  hash+=hash * 31 + JodaBeanUtils.hashCode(getAddressList());
  hash+=hash * 31 + JodaBeanUtils.hashCode(getOtherAddressMap());
  hash+=hash * 31 + JodaBeanUtils.hashCode(getAddressesList());
  hash+=hash * 31 + JodaBeanUtils.hashCode(getMainAddress());
  hash+=hash * 31 + JodaBeanUtils.hashCode(getPropDefAnnotationSecondDeprecated());
  hash+=hash * 31 + JodaBeanUtils.hashCode(getPropDefAnnotationSecondManual());
  return hash;
}",0.886417791898332
177989,"@SuppressWarnings(""String_Node_Str"") @Override protected void propertySet(Bean bean,String propertyName,Object newValue,boolean quiet){
switch (propertyName.hashCode()) {
case 467061063:
    ((SimplePerson)bean).setForename((String)newValue);
  return;
case -1852993317:
((SimplePerson)bean).setSurname((String)newValue);
return;
case 926656063:
((SimplePerson)bean).setNumberOfCars((Integer)newValue);
return;
case -1377524046:
((SimplePerson)bean).setAddressList((List<Address>)newValue);
return;
case 1368089592:
((SimplePerson)bean).setOtherAddressMap((Map<String,Address>)newValue);
return;
case -226885792:
((SimplePerson)bean).setAddressesList((List<List<Address>>)newValue);
return;
case -2032731141:
((SimplePerson)bean).setMainAddress((Address)newValue);
return;
case -1809421292:
((SimplePerson)bean).setExtensions((FlexiBean)newValue);
return;
}
super.propertySet(bean,propertyName,newValue,quiet);
}","@SuppressWarnings(""String_Node_Str"") @Override protected void propertySet(Bean bean,String propertyName,Object newValue,boolean quiet){
switch (propertyName.hashCode()) {
case 467061063:
    ((SimplePerson)bean).setForename((String)newValue);
  return;
case -1852993317:
((SimplePerson)bean).setSurname((String)newValue);
return;
case 926656063:
((SimplePerson)bean).setNumberOfCars((Integer)newValue);
return;
case -1377524046:
((SimplePerson)bean).setAddressList((List<Address>)newValue);
return;
case 1368089592:
((SimplePerson)bean).setOtherAddressMap((Map<String,Address>)newValue);
return;
case -226885792:
((SimplePerson)bean).setAddressesList((List<List<Address>>)newValue);
return;
case -2032731141:
((SimplePerson)bean).setMainAddress((Address)newValue);
return;
case 1897330136:
((SimplePerson)bean).setPropDefAnnotationSecondDeprecated((FlexiBean)newValue);
return;
case 1276990059:
((SimplePerson)bean).setPropDefAnnotationSecondManual((Map<String,String>)newValue);
return;
}
super.propertySet(bean,propertyName,newValue,quiet);
}",0.9059304703476484
177990,"@Override protected Object propertyGet(Bean bean,String propertyName,boolean quiet){
switch (propertyName.hashCode()) {
case 467061063:
    return ((SimplePerson)bean).getForename();
case -1852993317:
  return ((SimplePerson)bean).getSurname();
case 926656063:
return ((SimplePerson)bean).getNumberOfCars();
case -1377524046:
return ((SimplePerson)bean).getAddressList();
case 1368089592:
return ((SimplePerson)bean).getOtherAddressMap();
case -226885792:
return ((SimplePerson)bean).getAddressesList();
case -2032731141:
return ((SimplePerson)bean).getMainAddress();
case -1809421292:
return ((SimplePerson)bean).getExtensions();
}
return super.propertyGet(bean,propertyName,quiet);
}","@Override protected Object propertyGet(Bean bean,String propertyName,boolean quiet){
switch (propertyName.hashCode()) {
case 467061063:
    return ((SimplePerson)bean).getForename();
case -1852993317:
  return ((SimplePerson)bean).getSurname();
case 926656063:
return ((SimplePerson)bean).getNumberOfCars();
case -1377524046:
return ((SimplePerson)bean).getAddressList();
case 1368089592:
return ((SimplePerson)bean).getOtherAddressMap();
case -226885792:
return ((SimplePerson)bean).getAddressesList();
case -2032731141:
return ((SimplePerson)bean).getMainAddress();
case 1897330136:
return ((SimplePerson)bean).getPropDefAnnotationSecondDeprecated();
case 1276990059:
return ((SimplePerson)bean).getPropDefAnnotationSecondManual();
}
return super.propertyGet(bean,propertyName,quiet);
}",0.8594704684317719
177991,"@Override public boolean equals(Object obj){
  if (obj == this) {
    return true;
  }
  if (obj != null && obj.getClass() == this.getClass()) {
    SimplePerson other=(SimplePerson)obj;
    return JodaBeanUtils.equal(getForename(),other.getForename()) && JodaBeanUtils.equal(getSurname(),other.getSurname()) && (getNumberOfCars() == other.getNumberOfCars())&& JodaBeanUtils.equal(getAddressList(),other.getAddressList())&& JodaBeanUtils.equal(getOtherAddressMap(),other.getOtherAddressMap())&& JodaBeanUtils.equal(getAddressesList(),other.getAddressesList())&& JodaBeanUtils.equal(getMainAddress(),other.getMainAddress())&& JodaBeanUtils.equal(getExtensions(),other.getExtensions());
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (obj == this) {
    return true;
  }
  if (obj != null && obj.getClass() == this.getClass()) {
    SimplePerson other=(SimplePerson)obj;
    return JodaBeanUtils.equal(getForename(),other.getForename()) && JodaBeanUtils.equal(getSurname(),other.getSurname()) && (getNumberOfCars() == other.getNumberOfCars())&& JodaBeanUtils.equal(getAddressList(),other.getAddressList())&& JodaBeanUtils.equal(getOtherAddressMap(),other.getOtherAddressMap())&& JodaBeanUtils.equal(getAddressesList(),other.getAddressesList())&& JodaBeanUtils.equal(getMainAddress(),other.getMainAddress())&& JodaBeanUtils.equal(getPropDefAnnotationSecondDeprecated(),other.getPropDefAnnotationSecondDeprecated())&& JodaBeanUtils.equal(getPropDefAnnotationSecondManual(),other.getPropDefAnnotationSecondManual());
  }
  return false;
}",0.8811817597944765
177992,"@Override public String toString(){
  StringBuilder buf=new StringBuilder(288);
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append('=').append(getForename()).append(',').append(' ');
  buf.append(""String_Node_Str"").append('=').append(getSurname()).append(',').append(' ');
  buf.append(""String_Node_Str"").append('=').append(getNumberOfCars()).append(',').append(' ');
  buf.append(""String_Node_Str"").append('=').append(getAddressList()).append(',').append(' ');
  buf.append(""String_Node_Str"").append('=').append(getOtherAddressMap()).append(',').append(' ');
  buf.append(""String_Node_Str"").append('=').append(getAddressesList()).append(',').append(' ');
  buf.append(""String_Node_Str"").append('=').append(getMainAddress()).append(',').append(' ');
  buf.append(""String_Node_Str"").append('=').append(getExtensions());
  buf.append('}');
  return buf.toString();
}","@Override public String toString(){
  StringBuilder buf=new StringBuilder(320);
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append('=').append(getForename()).append(',').append(' ');
  buf.append(""String_Node_Str"").append('=').append(getSurname()).append(',').append(' ');
  buf.append(""String_Node_Str"").append('=').append(getNumberOfCars()).append(',').append(' ');
  buf.append(""String_Node_Str"").append('=').append(getAddressList()).append(',').append(' ');
  buf.append(""String_Node_Str"").append('=').append(getOtherAddressMap()).append(',').append(' ');
  buf.append(""String_Node_Str"").append('=').append(getAddressesList()).append(',').append(' ');
  buf.append(""String_Node_Str"").append('=').append(getMainAddress()).append(',').append(' ');
  buf.append(""String_Node_Str"").append('=').append(getPropDefAnnotationSecondDeprecated()).append(',').append(' ');
  buf.append(""String_Node_Str"").append('=').append(getPropDefAnnotationSecondManual());
  buf.append('}');
  return buf.toString();
}",0.9165354330708662
177993,"public String getName(){
  final Element nameNode=get(NAME);
  if (nameNode != null)   return nameNode.getText();
 else   return null;
}","public String getName(){
  final Element nameNode=ElementUtils.contains(getRoot(),NAME,1);
  if (nameNode != null)   return nameNode.getText();
 else   return null;
}",0.9006622516556292
177994,"/** 
 * Publish a zipped shapefile. <P> These are the equivalent calls with cUrl: <PRE>  {@code curl -u admin:geoserver -XPUT -H 'Content-type: application/zip' \ --data-binary @$ZIPFILE \ http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/datastores/$STORENAME/file.shp curl -u admin:geoserver -XPOST -H 'Content-type: text/xml'  \ -d ""<featureType><name>$BARE</name><nativeCRS>EPSG:4326</nativeCRS><enabled>true</enabled></featureType>""  \ http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/datastores/$STORENAME/featuretypes/$LAYERNAME}</PRE>
 * @return true if the operation completed successfully.
 */
public boolean publishShp(String workspace,String storename,String layername,File zipFile,String srs) throws FileNotFoundException {
  StringBuilder sbUrl=new StringBuilder(restURL).append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(storename).append(""String_Node_Str"");
  String sentResult=HTTPUtils.put(sbUrl.toString(),zipFile,""String_Node_Str"",gsuser,gspass);
  boolean shpSent=sentResult != null;
  if (shpSent) {
    LOGGER.info(""String_Node_Str"" + layername + ""String_Node_Str""+ zipFile+ ""String_Node_Str"");
    StringBuilder postUrl=new StringBuilder(restURL).append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(storename).append(""String_Node_Str"").append(layername);
    GSFeatureTypeEncoder fte=new GSFeatureTypeEncoder();
    fte.addName(layername);
    fte.addSRS(srs);
    fte.addProjectionPolicy(ProjectionPolicy.REPROJECT_TO_DECLARED);
    String configuredResult=HTTPUtils.putXml(postUrl.toString(),fte.toString(),this.gsuser,this.gspass);
    boolean shpConfigured=configuredResult != null;
    if (!shpConfigured) {
      LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername+ ""String_Node_Str""+ zipFile);
    }
 else {
      LOGGER.info(""String_Node_Str"" + layername + ""String_Node_Str"");
    }
    return shpConfigured;
  }
 else {
    LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername+ ""String_Node_Str""+ zipFile);
    return false;
  }
}","/** 
 * Publish a zipped shapefile.<br> http://docs.geoserver.org/stable/en/user /restconfig/rest-config-examples/rest- config-examples-curl.html#uploading-a-shapefile
 * @param workspace the name of the workspace to use
 * @param storename the name of the store to create
 * @param layername the name of the layer to configure
 * @param zipFile the zip file containing the shapefile
 * @param srs the native CRS
 * @param params parameters to append to the url (can be null).<br> Accepted parameters are:<br> <ul> <li><b>charset</b> used to set the charset</li> </ul>
 * @return true if success false otherwise
 * @throws FileNotFoundException
 */
public boolean publishShp(String workspace,String storename,String layername,File zipFile,String srs,NameValuePair... params) throws FileNotFoundException {
  StringBuilder sbUrl=new StringBuilder(restURL).append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(storename).append(""String_Node_Str"");
  if (params != null) {
    final int paramsSize=params.length;
    if (paramsSize > 0) {
      sbUrl.append(params[0].getName()).append(""String_Node_Str"").append(params[0].getValue());
      for (int i=1; i < paramsSize; i++) {
        sbUrl.append(""String_Node_Str"").append(params[i].getName()).append(""String_Node_Str"").append(params[i].getValue());
      }
    }
  }
  String sentResult=HTTPUtils.put(sbUrl.toString(),zipFile,""String_Node_Str"",gsuser,gspass);
  boolean shpSent=sentResult != null;
  if (shpSent) {
    LOGGER.info(""String_Node_Str"" + layername + ""String_Node_Str""+ zipFile+ ""String_Node_Str"");
    StringBuilder postUrl=new StringBuilder(restURL).append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(storename).append(""String_Node_Str"").append(layername);
    GSFeatureTypeEncoder fte=new GSFeatureTypeEncoder();
    fte.addName(layername);
    fte.addSRS(srs);
    fte.addProjectionPolicy(ProjectionPolicy.REPROJECT_TO_DECLARED);
    String configuredResult=HTTPUtils.putXml(postUrl.toString(),fte.toString(),this.gsuser,this.gspass);
    boolean shpConfigured=configuredResult != null;
    if (!shpConfigured) {
      LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername+ ""String_Node_Str""+ zipFile);
    }
 else {
      LOGGER.info(""String_Node_Str"" + layername + ""String_Node_Str"");
    }
    return shpConfigured;
  }
 else {
    LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername+ ""String_Node_Str""+ zipFile);
    return false;
  }
}",0.6729251120119479
177995,"/** 
 * Create a new coverage in a given workspace and coverage store
 * @param ce contains the coverage name to create and the configuration to apply
 * @param wsname the workspace to search for existent coverage
 * @param csname the coverage store to search for existent coverage
 * @return
 */
public boolean createCoverage(final GSCoverageEncoder ce,final String wsname,final String csname){
  final String cname=ce.getName();
  if (cname == null) {
    if (LOGGER.isEnabledFor(Level.ERROR))     LOGGER.error(""String_Node_Str"");
    return false;
  }
  final String url=restURL + ""String_Node_Str"" + wsname+ ""String_Node_Str""+ csname+ ""String_Node_Str"";
  final String xmlBody=ce.toString();
  final String sendResult=HTTPUtils.postXml(url,xmlBody,gsuser,gspass);
  if (sendResult != null) {
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"" + wsname + ""String_Node_Str""+ csname+ ""String_Node_Str""+ cname);
    }
  }
 else {
    if (LOGGER.isEnabledFor(Level.WARN))     LOGGER.warn(""String_Node_Str"" + wsname + ""String_Node_Str""+ csname+ ""String_Node_Str""+ cname+ ""String_Node_Str""+ sendResult+ ""String_Node_Str"");
  }
  return sendResult != null;
}","/** 
 * Create a new coverage in a given workspace and coverage store
 * @param wsname the workspace to search for existent coverage
 * @param storeName an existent store name to use as data source
 * @param ce contains the coverage name to create and the configuration to apply
 * @return true if success
 * @throws IllegalArgumentException if arguments are null or empty
 */
public boolean createCoverage(final String wsname,final String storeName,final GSCoverageEncoder ce) throws IllegalArgumentException {
  if (wsname.isEmpty() || wsname == null || ce == null || ce.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final String coverageName=ce.getName();
  if (coverageName == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final String url=restURL + ""String_Node_Str"" + wsname+ ""String_Node_Str""+ storeName+ ""String_Node_Str"";
  final String xmlBody=ce.toString();
  final String sendResult=HTTPUtils.postXml(url,xmlBody,gsuser,gspass);
  if (sendResult != null) {
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"" + wsname + ""String_Node_Str""+ storeName+ ""String_Node_Str""+ coverageName);
    }
  }
 else {
    if (LOGGER.isEnabledFor(Level.WARN))     LOGGER.warn(""String_Node_Str"" + wsname + ""String_Node_Str""+ storeName+ ""String_Node_Str""+ coverageName+ ""String_Node_Str""+ sendResult+ ""String_Node_Str"");
  }
  return sendResult != null;
}",0.293620292083013
177996,"/** 
 * Publish a zipped shapefile.<br> http://docs.geoserver.org/stable/en/user /restconfig/rest-config-examples/rest- config-examples-curl.html#uploading-a-shapefile
 * @param workspace the name of the workspace to use
 * @param storename the name of the store to create
 * @param layername the name of the layer to configure
 * @param zipFile the zip file containing the shapefile
 * @param srs the native CRS
 * @param params parameters to append to the url (can be null).<br> Accepted parameters are:<br> <ul> <li><b>charset</b> used to set the charset</li> </ul>
 * @return true if success false otherwise
 * @throws FileNotFoundException
 */
public boolean publishShp(String workspace,String storename,String layername,File zipFile,String srs,NameValuePair... params) throws FileNotFoundException {
  StringBuilder sbUrl=new StringBuilder(restURL).append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(storename).append(""String_Node_Str"");
  sbUrl.append(appendParameters(params));
  String sentResult=HTTPUtils.put(sbUrl.toString(),zipFile,""String_Node_Str"",gsuser,gspass);
  boolean shpSent=sentResult != null;
  if (shpSent) {
    LOGGER.info(""String_Node_Str"" + layername + ""String_Node_Str""+ zipFile+ ""String_Node_Str"");
    StringBuilder postUrl=new StringBuilder(restURL).append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(storename).append(""String_Node_Str"").append(layername);
    GSFeatureTypeEncoder fte=new GSFeatureTypeEncoder();
    fte.addName(layername);
    fte.addSRS(srs);
    fte.addProjectionPolicy(ProjectionPolicy.REPROJECT_TO_DECLARED);
    String configuredResult=HTTPUtils.putXml(postUrl.toString(),fte.toString(),this.gsuser,this.gspass);
    boolean shpConfigured=configuredResult != null;
    if (!shpConfigured) {
      LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername+ ""String_Node_Str""+ zipFile);
    }
 else {
      LOGGER.info(""String_Node_Str"" + layername + ""String_Node_Str"");
    }
    return shpConfigured;
  }
 else {
    LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername+ ""String_Node_Str""+ zipFile);
    return false;
  }
}","/** 
 * Publish a zipped shapefile.<br> http://docs.geoserver.org/stable/en/user /restconfig/rest-config-examples/rest- config-examples-curl.html#uploading-a-shapefile
 * @param workspace the name of the workspace to use
 * @param storename the name of the store to create
 * @param layername the name of the layer to configure
 * @param zipFile the zip file containing the shapefile
 * @param srs the native CRS
 * @param params parameters to append to the url (can be null).<br> Accepted parameters are:<br> <ul> <li><b>charset</b> used to set the charset</li> </ul>
 * @return true if success false otherwise
 * @throws FileNotFoundException
 */
public boolean publishShp(String workspace,String storename,String layername,File zipFile,String srs,NameValuePair... params) throws FileNotFoundException {
  StringBuilder sbUrl=new StringBuilder(restURL).append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(storename).append(""String_Node_Str"");
  sbUrl.append(appendParameters(params));
  String sentResult=HTTPUtils.put(sbUrl.toString(),zipFile,""String_Node_Str"",gsuser,gspass);
  boolean shpSent=sentResult != null;
  if (shpSent) {
    LOGGER.info(""String_Node_Str"" + layername + ""String_Node_Str""+ zipFile+ ""String_Node_Str"");
    StringBuilder postUrl=new StringBuilder(restURL).append(""String_Node_Str"").append(workspace).append(""String_Node_Str"").append(storename).append(""String_Node_Str"").append(layername);
    GSFeatureTypeEncoder fte=new GSFeatureTypeEncoder();
    fte.setName(layername);
    fte.setSRS(srs);
    fte.setProjectionPolicy(ProjectionPolicy.FORCE_DECLARED);
    String configuredResult=HTTPUtils.putXml(postUrl.toString(),fte.toString(),this.gsuser,this.gspass);
    boolean shpConfigured=configuredResult != null;
    if (!shpConfigured) {
      LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername+ ""String_Node_Str""+ zipFile);
    }
 else {
      LOGGER.info(""String_Node_Str"" + layername + ""String_Node_Str"");
    }
    return shpConfigured;
  }
 else {
    LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storename+ ""String_Node_Str""+ layername+ ""String_Node_Str""+ zipFile);
    return false;
  }
}",0.993029008320216
177997,"/** 
 * Publish a GeoTiff. Simple wrapper for   {@link #publishCoverage(String,String,String,String,File,ParameterConfigure,NameValuePair)}<P> This is the equivalent call with cUrl: <PRE>  {@code curl -u admin:geoserver -XPUT -H 'Content-type: text' -d ""file:$FULLPATH"" \ http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/coveragestores/$STORENAME/external.geotiff}</PRE>
 * @param workspace Workspace to use
 * @param storeName Name of the coveragestore (if null the file name will be used)
 * @param layerName the name of the coverage (if null the file name will be used)
 * @param geotiff file to upload
 * @return true if the operation completed successfully.
 * @throws FileNotFoundException if file does not exists
 * @throws IllegalArgumentException if workspace or geotiff are null
 */
public boolean publishGeoTIFF(final String workspace,final String storeName,final String layerName,final File geotiff) throws FileNotFoundException, IllegalArgumentException {
  if (workspace == null || geotiff == null)   throw new IllegalArgumentException(""String_Node_Str"");
  return publishCoverage(workspace,(storeName != null) ? storeName : FilenameUtils.getBaseName(geotiff.getAbsolutePath()),""String_Node_Str"",""String_Node_Str"",geotiff,ParameterConfigure.FIRST,(layerName != null) ? new NameValuePair[]{new NameValuePair(""String_Node_Str"",layerName)} : (NameValuePair[])null);
}","/** 
 * Publish a GeoTiff. Simple wrapper for   {@link #publishCoverage(String,String,CoverageStoreExtension,String,File,ParameterConfigure,NameValuePair)}<P> This is the equivalent call with cUrl: <PRE>  {@code curl -u admin:geoserver -XPUT -H 'Content-type: text' -d ""file:$FULLPATH"" \ http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/coveragestores/$STORENAME/external.geotiff}</PRE>
 * @param workspace Workspace to use
 * @param storeName Name of the coveragestore (if null the file name will be used)
 * @param coverageName the name of the coverage (if null the file name will be used)
 * @param geotiff file to upload
 * @return true if the operation completed successfully.
 * @throws FileNotFoundException if file does not exists
 * @throws IllegalArgumentException if workspace or geotiff are null
 */
public boolean publishGeoTIFF(final String workspace,final String storeName,final String coverageName,final File geotiff) throws FileNotFoundException, IllegalArgumentException {
  if (workspace == null || geotiff == null)   throw new IllegalArgumentException(""String_Node_Str"");
  return publishCoverage(workspace,(storeName != null) ? storeName : FilenameUtils.getBaseName(geotiff.getAbsolutePath()),CoverageStoreExtension.geotiff,""String_Node_Str"",geotiff,ParameterConfigure.FIRST,(coverageName != null) ? new NameValuePair[]{new NameValuePair(""String_Node_Str"",coverageName)} : (NameValuePair[])null);
}",0.9548524706718804
177998,"/** 
 * Allows to configure some coverage's attributes
 * @param ce Coverage encoder
 * @param wsname workspace name
 * @param csname coveragestore name
 * @param cname coverage name (if != null will override the CoverageEncoder name)
 * @return true if success
 * @deprecated use{@link GeoServerRESTPublisher#configureCoverage(GSCoverageEncoder,String,String)}
 */
protected boolean configureCoverage(final GSCoverageEncoder ce,final String wsname,final String csname,String cname){
  if (cname != null)   ce.setName(cname);
 else   cname=ce.getName();
  return configureCoverage(ce,wsname,csname);
}","/** 
 * Configure an existent coverage in a given workspace and coverage store
 * @param ce contains the coverage name to configure and the configuration to apply
 * @param wsname the workspace to search for existent coverage
 * @param csname the coverage store to search for existent coverage
 * @return true if success
 */
public boolean configureCoverage(final GSCoverageEncoder ce,final String wsname,final String csname){
  final String cname=ce.getName();
  if (cname == null) {
    if (LOGGER.isEnabledFor(Level.ERROR))     LOGGER.error(""String_Node_Str"");
    return false;
  }
  GeoServerRESTReader reader;
  try {
    reader=new GeoServerRESTReader(restURL,gsuser,gspass);
  }
 catch (  MalformedURLException e) {
    if (LOGGER.isEnabledFor(Level.ERROR))     LOGGER.error(e);
    return false;
  }
  final RESTCoverageList covList=reader.getCoverages(wsname,csname);
  if (covList.isEmpty()) {
    if (LOGGER.isEnabledFor(Level.ERROR))     LOGGER.error(""String_Node_Str"" + csname);
    return false;
  }
  final Iterator<NameLinkElem> it=covList.iterator();
  boolean found=false;
  while (it.hasNext()) {
    NameLinkElem nameElem=it.next();
    if (nameElem.getName().equals(cname)) {
      found=true;
      break;
    }
  }
  if (!found) {
    if (LOGGER.isEnabledFor(Level.ERROR))     LOGGER.error(""String_Node_Str"" + csname + ""String_Node_Str""+ cname);
    return false;
  }
  final String url=restURL + ""String_Node_Str"" + wsname+ ""String_Node_Str""+ csname+ ""String_Node_Str""+ cname+ ""String_Node_Str"";
  final String xmlBody=ce.toString();
  final String sendResult=HTTPUtils.putXml(url,xmlBody,gsuser,gspass);
  if (sendResult != null) {
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"" + wsname + ""String_Node_Str""+ csname+ ""String_Node_Str""+ cname);
    }
  }
 else {
    if (LOGGER.isEnabledFor(Level.WARN))     LOGGER.warn(""String_Node_Str"" + wsname + ""String_Node_Str""+ csname+ ""String_Node_Str""+ cname+ ""String_Node_Str""+ sendResult+ ""String_Node_Str"");
  }
  return sendResult != null;
}",0.1023502653525398
177999,"/** 
 * Publish a Mosaic already in a filesystem readable by GeoServer. <P> Sample cUrl usage:<BR> <TT>curl -u admin:geoserver -XPUT -H 'Content-type: text' -d ""file:$ABSPORTDIR"" http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/coveragestores/$BAREDIR/external.imagemosaic </TT>
 * @param workspace an existing workspace
 * @param storeName the name of the coverageStore to be created
 * @param mosaicDir the directory where the raster images are located
 * @param coverageEncoder the set of parameters to be set to the coverage (bbox, srs, ...)
 * @param layerEncoder the set of parameters to be set to the layer (defaultstyle, wmspath, ...)
 * @return the created RESTCoverageStore
 * @deprecated this is keep only for backward compatibility usecreateExternalMosaic and getCoverageStore separately
 * @throws FileNotFoundException
 */
public RESTCoverageStore publishExternalMosaic(String workspace,String storeName,File mosaicDir,GSCoverageEncoder coverageEncoder,GSLayerEncoder layerEncoder) throws FileNotFoundException {
  if (!createExternalMosaic(workspace,storeName,mosaicDir,coverageEncoder,layerEncoder)) {
    return null;
  }
  GeoServerRESTReader reader;
  try {
    reader=new GeoServerRESTReader(restURL,gsuser,gspass);
  }
 catch (  MalformedURLException e1) {
    LOGGER.warn(""String_Node_Str"" + storeName,e1);
    return null;
  }
  final RESTCoverageStore store=reader.getCoverageStore(workspace,storeName);
  if (store == null) {
    LOGGER.warn(""String_Node_Str"" + workspace + ""String_Node_Str""+ storeName+ ""String_Node_Str"");
    return null;
  }
  return store;
}","/** 
 * Publish a Mosaic already in a filesystem readable by GeoServer. <P> Sample cUrl usage:<BR> <TT>curl -u admin:geoserver -XPUT -H 'Content-type: text' -d ""file:$ABSPORTDIR"" http://$GSIP:$GSPORT/$SERVLET/rest/workspaces/$WORKSPACE/coveragestores/$BAREDIR/external.imagemosaic </TT>
 * @param workspace an existing workspace
 * @param storeName the name of the coverageStore to be created
 * @param mosaicDir the directory where the raster images are located
 * @param coverageEncoder the set of parameters to be set to the coverage (bbox, srs, ...)
 * @param layerEncoder the set of parameters to be set to the layer (defaultstyle, wmspath, ...)
 * @return true if the operation completed successfully.
 * @throws FileNotFoundException
 */
public boolean publishExternalMosaic(String workspace,final String storeName,File mosaicDir,GSCoverageEncoder coverageEncoder,GSLayerEncoder layerEncoder) throws FileNotFoundException, IllegalArgumentException {
  if (coverageEncoder == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + mosaicDir);
  }
  String coverageName=coverageEncoder.getName();
  if (layerEncoder == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + workspace + ""String_Node_Str""+ coverageName);
  }
  RESTCoverageStore store=createExternaMosaicDatastore(workspace,storeName,mosaicDir,ParameterConfigure.NONE,ParameterUpdate.OVERWRITE);
  if (store == null) {
    return false;
  }
  if (!createCoverage(workspace,storeName,coverageEncoder)) {
    if (LOGGER.isEnabledFor(Level.ERROR))     LOGGER.error(""String_Node_Str"" + coverageName);
    return false;
  }
  if (!configureLayer(workspace,coverageName,layerEncoder)) {
    if (LOGGER.isEnabledFor(Level.ERROR))     LOGGER.error(""String_Node_Str"" + coverageName);
    return false;
  }
  return true;
}",0.4708994708994709
178000,"/** 
 * Publish a GeoTiff already in a filesystem readable by GeoServer.
 * @param workspace an existing workspace
 * @param storeName the coverageStore to be created
 * @param geotiff the geoTiff to be published
 * @return a PublishedCoverage, or null on errors
 * @throws FileNotFoundException
 */
public RESTCoverageStore publishExternalGeoTIFF(String workspace,String storeName,File geotiff,String srs,String defaultStyle) throws FileNotFoundException {
  String sUrl=restURL + ""String_Node_Str"" + workspace+ ""String_Node_Str""+ storeName+ ""String_Node_Str"";
  String sendResult=HTTPUtils.put(sUrl,geotiff.toURI().toString(),""String_Node_Str"",gsuser,gspass);
  RESTCoverageStore store=RESTCoverageStore.build(sendResult);
  if (store != null) {
    try {
      GeoServerRESTReader reader=new GeoServerRESTReader(restURL,gsuser,gspass);
      RESTCoverageList covList=reader.getCoverages(workspace,storeName);
      if (covList.isEmpty()) {
        LOGGER.error(""String_Node_Str"" + storeName);
        return null;
      }
      final String coverageName=covList.get(0).getName();
      GSCoverageEncoder coverageEncoder=new GSCoverageEncoder();
      coverageEncoder.addName(FilenameUtils.getBaseName(geotiff.getName()));
      coverageEncoder.addSRS(srs);
      coverageEncoder.addProjectionPolicy(ProjectionPolicy.REPROJECT_TO_DECLARED);
      configureCoverage(coverageEncoder,workspace,storeName,coverageName);
      GSLayerEncoder layerEncoder=new GSLayerEncoder();
      layerEncoder.addDefaultStyle(defaultStyle);
      configureLayer(workspace,coverageName,layerEncoder);
    }
 catch (    Exception e) {
      LOGGER.warn(""String_Node_Str"" + storeName,e);
      store=null;
    }
  }
  return store;
}","/** 
 * Publish a GeoTiff already in a filesystem readable by GeoServer.
 * @param workspace an existing workspace
 * @param storeName the coverageStore to be created
 * @param geotiff the geoTiff to be published
 * @param coverageEncoder
 * @param layerEncoder
 * @return true if successfully configured
 * @throws FileNotFoundException
 * @throws IllegalArgumentException if null parameter
 */
public RESTCoverageStore publishExternalGeoTIFF(final String workspace,final String storeName,final File geotiff,final GSCoverageEncoder coverageEncoder,final GSLayerEncoder layerEncoder) throws IllegalArgumentException, FileNotFoundException {
  if (workspace == null || geotiff == null || storeName == null || layerEncoder == null || coverageEncoder == null)   throw new IllegalArgumentException(""String_Node_Str"");
  final String coverageName=coverageEncoder.getName();
  if (coverageName.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final boolean store=publishExternalCoverage(workspace,storeName,CoverageStoreExtension.geotiff,""String_Node_Str"",geotiff,ParameterConfigure.NONE,ParameterUpdate.OVERWRITE);
  if (!store) {
    return null;
  }
  if (!createCoverage(workspace,storeName,coverageEncoder)) {
    if (LOGGER.isEnabledFor(Level.ERROR))     LOGGER.error(""String_Node_Str"" + coverageName);
    return null;
  }
  if (configureLayer(workspace,coverageName,layerEncoder)) {
    GeoServerRESTReader reader;
    try {
      reader=new GeoServerRESTReader(this.restURL,this.gsuser,this.gspass);
      return reader.getCoverageStore(workspace,storeName);
    }
 catch (    MalformedURLException e) {
      LOGGER.log(Level.ERROR,e.getMessage(),e);
    }
  }
  return null;
}",0.2535787321063394
