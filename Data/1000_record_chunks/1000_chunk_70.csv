record_number,buggy_code,fixed_code,code_similarity
69001,"private void addEmptyDataToContainer(StyleEntry style,XlsContainer parent,int startCoordinate,int width){
  Data data=createData(EMPTY,style,Data.STRING,parent);
  data.setSizeInfo(new ContainerSizeInfo(startCoordinate,width));
  addData(data);
}","private void addEmptyDataToContainer(StyleEntry style,XlsContainer parent,int startCoordinate,int width){
  Data data=createEmptyData(parent,style);
  data.setSizeInfo(new ContainerSizeInfo(startCoordinate,width));
  addData(data);
}",0.5845511482254697
69002,"protected void setMarginTopAndBottom(IStyle style,float margin){
  style.setProperty(IStyle.STYLE_MARGIN_TOP,createEmValue(margin));
  style.setProperty(IStyle.STYLE_MARGIN_BOTTOM,createEmValue(margin));
}","protected void setMarginTopAndBottom(IStyle style,float margin){
  setProperty(style,IStyle.STYLE_MARGIN_TOP,createEmValue(margin));
  setProperty(style,IStyle.STYLE_MARGIN_BOTTOM,createEmValue(margin));
}",0.9414634146341464
69003,"protected void setHStyle(IStyle style,float fontSize,float margin){
  setMarginTopAndBottom(style,margin);
  style.setProperty(IStyle.STYLE_FONT_SIZE,createEmValue(fontSize));
  style.setProperty(IStyle.STYLE_FONT_WEIGHT,IStyle.BOLD_VALUE);
  style.setProperty(IStyle.STYLE_PAGE_BREAK_AFTER,IStyle.AVOID_VALUE);
}","protected void setHStyle(IStyle style,float fontSize,float margin){
  setMarginTopAndBottom(style,margin);
  setProperty(style,IStyle.STYLE_FONT_SIZE,createEmValue(fontSize));
  setProperty(style,IStyle.STYLE_FONT_WEIGHT,IStyle.BOLD_VALUE);
  setProperty(style,IStyle.STYLE_PAGE_BREAK_AFTER,IStyle.AVOID_VALUE);
}",0.9424920127795527
69004,"protected void setFontStyle(IStyle style,Value fontStyle){
  style.setProperty(IStyle.STYLE_FONT_STYLE,fontStyle);
}","protected void setFontStyle(IStyle style,Value fontStyle){
  setProperty(style,IStyle.STYLE_FONT_STYLE,fontStyle);
}",0.9482758620689656
69005,"protected void setFontFamily(IStyle style,Value font){
  ListValue fonts=new ListValue();
  fonts.append(font);
  style.setProperty(IStyle.STYLE_FONT_FAMILY,fonts);
}","protected void setFontFamily(IStyle style,Value font){
  ListValue fonts=new ListValue();
  fonts.append(font);
  setProperty(style,IStyle.STYLE_FONT_FAMILY,fonts);
}",0.963855421686747
69006,"protected void setBlockDisplay(IStyle style){
  style.setProperty(IStyle.STYLE_DISPLAY,IStyle.BLOCK_VALUE);
}","protected void setBlockDisplay(IStyle style){
  setProperty(style,IStyle.STYLE_DISPLAY,IStyle.BLOCK_VALUE);
}",0.944954128440367
69007,"protected void setFontWeight(IStyle style,Value fontWeight){
  style.setProperty(IStyle.STYLE_FONT_WEIGHT,fontWeight);
}","protected void setFontWeight(IStyle style,Value fontWeight){
  setProperty(style,IStyle.STYLE_FONT_WEIGHT,fontWeight);
}",0.95
69008,"protected void setInlineDisplay(IStyle style){
  style.setProperty(IStyle.STYLE_DISPLAY,IStyle.INLINE_VALUE);
}","protected void setInlineDisplay(IStyle style){
  setProperty(style,IStyle.STYLE_DISPLAY,IStyle.INLINE_VALUE);
}",0.945945945945946
69009,"private void processCellStyle(Element element,Map<Element,StyleProperties> cssStyles){
  String border=element.getAttribute(PROPERTY_BORDER);
  String padding=element.getAttribute(PROPERTY_CELLPADDING);
  boolean hasBorder=border != null && border.length() > 0;
  boolean hasPadding=padding != null && padding.length() > 0;
  if (hasBorder || hasPadding) {
    for (Node node=element.getFirstChild(); node != null; node=node.getNextSibling()) {
      Element r=(Element)node;
      if (TAG_TR.equals(r.getTagName()) || TAG_TH.equals(r.getTagName())) {
        for (Node n=r.getFirstChild(); n != null; n=n.getNextSibling()) {
          Element c=(Element)n;
          if (TAG_TD.equals(c.getTagName())) {
            StyleProperties sp=cssStyles.get(c);
            if (sp == null) {
              sp=new StyleProperties(new StyleDeclaration(content.getCSSEngine()));
              cssStyles.put(c,sp);
            }
            if (hasBorder) {
              PropertiesProcessor.process(PROPERTY_BORDER,border,sp);
            }
            if (hasPadding) {
              PropertiesProcessor.process(PROPERTY_CELLPADDING,border,sp);
            }
          }
        }
      }
    }
  }
}","private void processCellStyle(Element element,Map<Element,StyleProperties> cssStyles){
  String border=element.getAttribute(PROPERTY_BORDER);
  String padding=element.getAttribute(PROPERTY_CELLPADDING);
  boolean hasBorder=border != null && border.length() > 0;
  boolean hasPadding=padding != null && padding.length() > 0;
  if (hasBorder || hasPadding) {
    for (Node node=element.getFirstChild(); node != null; node=node.getNextSibling()) {
      Element r=(Element)node;
      if (TAG_TR.equals(r.getTagName())) {
        for (Node n=r.getFirstChild(); n != null; n=n.getNextSibling()) {
          Element c=(Element)n;
          if (TAG_TD.equals(c.getTagName()) || TAG_TH.equals(c.getTagName())) {
            StyleProperties sp=cssStyles.get(c);
            if (sp == null) {
              sp=new StyleProperties(new StyleDeclaration(content.getCSSEngine()));
              cssStyles.put(c,sp);
            }
            if (hasBorder) {
              PropertiesProcessor.process(PROPERTY_BORDER,border,sp);
            }
            if (hasPadding) {
              PropertiesProcessor.process(PROPERTY_CELLPADDING,border,sp);
            }
          }
        }
      }
    }
  }
}",0.8899159663865546
69010,"/** 
 * 1) Creates row wrapper. 2) For the null cell in the row wrapper, fills the relevant position with dummy cell or empty cell. 3) Updates the height of the row and the cells in the row.
 * @param rowArea current rowArea.
 */
private void updateRow(RowArea rowArea,boolean isFixedLayout){
  RowArea lastRow=(RowArea)rows.getCurrent();
  boolean usedResolvedRow=false;
  int height=rowArea.getSpecifiedHeight();
  if (!isFixedLayout || height == 0) {
    for (int i=startCol; i <= endCol; i++) {
      CellArea upperCell=null;
      if (lastRow != null) {
        upperCell=lastRow.getCell(i);
      }
      if (upperCell != null && (upperCell.getRowSpan() > 1)) {
        if (rowArea.cells[i] != null) {
          rowArea.removeChild(rowArea.cells[i]);
        }
        DummyCell dummyCell=createDummyCell(upperCell);
        rowArea.setCell(dummyCell);
        int delta=dummyCell.getDelta();
        if (dummyCell.getRowSpan() == 1) {
          height=Math.max(height,dummyCell.getCell().getHeight() - delta);
        }
        i=i + upperCell.getColSpan() - 1;
      }
 else {
        CellArea cell=rowArea.getCell(i);
        if (cell == null) {
          if (unresolvedRow != null) {
            upperCell=unresolvedRow.getCell(i);
            usedResolvedRow=true;
          }
          if (upperCell != null) {
            cell=createEmptyCell(upperCell,i,rowArea,lastRow);
          }
        }
        if (cell != null && cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
          i=i + cell.getColSpan() - 1;
        }
      }
    }
  }
 else {
    for (int i=startCol; i <= endCol; i++) {
      CellArea upperCell=null;
      if (lastRow != null) {
        upperCell=lastRow.getCell(i);
      }
      if (upperCell != null && (upperCell.getRowSpan() > 1)) {
        DummyCell dummyCell=createDummyCell(upperCell);
        rowArea.setCell(dummyCell);
        i=i + upperCell.getColSpan() - 1;
      }
    }
  }
  if (usedResolvedRow) {
    unresolvedRow=null;
  }
  updateRowHeight(rowArea,height,isFixedLayout);
}","/** 
 * 1) Creates row wrapper. 2) For the null cell in the row wrapper, fills the relevant position with dummy cell or empty cell. 3) Updates the height of the row and the cells in the row.
 * @param rowArea current rowArea.
 */
private void updateRow(RowArea rowArea,boolean isFixedLayout){
  RowArea lastRow=(RowArea)rows.getCurrent();
  boolean usedResolvedRow=false;
  int height=rowArea.getSpecifiedHeight();
  if (!isFixedLayout || height == 0) {
    for (int i=startCol; i <= endCol; i++) {
      CellArea upperCell=null;
      if (lastRow != null) {
        upperCell=lastRow.getCell(i);
      }
      if (upperCell != null && (upperCell.getRowSpan() > 1)) {
        if (rowArea.cells[i] != null) {
          rowArea.removeChild(rowArea.cells[i]);
        }
        DummyCell dummyCell=createDummyCell(upperCell);
        rowArea.setCell(dummyCell);
        int delta=dummyCell.getDelta();
        if (dummyCell.getRowSpan() == 1) {
          height=Math.max(height,dummyCell.getCell().getHeight() - delta);
        }
        i=i + upperCell.getColSpan() - 1;
      }
 else {
        CellArea cell=rowArea.getCell(i);
        if (cell == null) {
          if (unresolvedRow != null) {
            upperCell=unresolvedRow.getCell(i);
            usedResolvedRow=true;
          }
          if (upperCell != null) {
            cell=createEmptyCell(upperCell,i,rowArea,lastRow);
          }
        }
        if (cell != null && cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
          i=i + cell.getColSpan() - 1;
        }
      }
    }
  }
 else {
    for (int i=startCol; i <= endCol; i++) {
      CellArea upperCell=null;
      if (lastRow != null) {
        upperCell=lastRow.getCell(i);
      }
      if (upperCell != null && (upperCell.getRowSpan() > 1)) {
        DummyCell dummyCell=createDummyCell(upperCell);
        rowArea.setCell(dummyCell);
        i=i + upperCell.getColSpan() - 1;
      }
 else {
        CellArea cell=rowArea.getCell(i);
        if (cell == null) {
          if (unresolvedRow != null) {
            upperCell=unresolvedRow.getCell(i);
            usedResolvedRow=true;
          }
          if (upperCell != null) {
            cell=createEmptyCell(upperCell,i,rowArea,lastRow);
          }
        }
        if (cell != null && cell.getRowSpan() == 1) {
          i=i + cell.getColSpan() - 1;
        }
      }
    }
  }
  if (usedResolvedRow) {
    unresolvedRow=null;
  }
  updateRowHeight(rowArea,height,isFixedLayout);
}",0.9030276437033786
69011,"protected void _splitSpanCell(int height,boolean force) throws BirtException {
  if (cells.length != children.size()) {
    for (int i=0; i < cells.length; i++) {
      if (cells[i] instanceof DummyCell) {
        int oh=((DummyCell)cells[i]).getCell().getHeight();
        int ch=((DummyCell)cells[i]).getDelta();
        int rowSpan=((DummyCell)cells[i]).getRowSpan();
        if (ch >= oh) {
          CellArea cell=cells[i].cloneArea();
          cell.setHeight(0);
          cell.setRowSpan(rowSpan);
          cell.setParent(this);
          addChildByColumnId(cell);
        }
 else {
          SplitResult splitCell=cells[i].split(height,force);
          CellArea cell=(CellArea)splitCell.getResult();
          if (cell != null) {
            CellArea oc=((DummyCell)cells[i]).getCell();
            ArrayList temp=cell.children;
            cell.children=oc.children;
            oc.children=temp;
            oc.updateChildrenPosition();
            cell.updateChildrenPosition();
            cell.setRowSpan(rowSpan);
            cell.setParent(this);
            addChildByColumnId(cell);
          }
 else {
            cell=cells[i].cloneArea();
            cell.setHeight(0);
            cell.setRowSpan(rowSpan);
            cell.setParent(this);
            addChildByColumnId(cell);
          }
        }
        i=i + cells[i].getColSpan() - 1;
      }
    }
  }
}","protected void _splitSpanCell(int height,boolean force) throws BirtException {
  if (cells.length != children.size()) {
    for (int i=0; i < cells.length; i++) {
      if (cells[i] instanceof DummyCell) {
        int oh=((DummyCell)cells[i]).getCell().getHeight();
        int ch=((DummyCell)cells[i]).getDelta();
        int rowSpan=((DummyCell)cells[i]).getRowSpan();
        if (ch >= oh) {
          CellArea cell=cells[i].cloneArea();
          cell.setHeight(0);
          cell.setRowSpan(rowSpan);
          cell.setParent(this);
          cell.isDummy=true;
          addChildByColumnId(cell);
        }
 else {
          SplitResult splitCell=cells[i].split(height,force);
          CellArea cell=(CellArea)splitCell.getResult();
          if (cell != null) {
            CellArea oc=((DummyCell)cells[i]).getCell();
            ArrayList temp=cell.children;
            cell.children=oc.children;
            oc.children=temp;
            oc.updateChildrenPosition();
            cell.updateChildrenPosition();
            cell.setRowSpan(rowSpan);
            cell.setParent(this);
            addChildByColumnId(cell);
          }
 else {
            cell=cells[i].cloneArea();
            cell.setHeight(0);
            cell.setRowSpan(rowSpan);
            cell.setParent(this);
            addChildByColumnId(cell);
          }
        }
        i=i + cells[i].getColSpan() - 1;
      }
    }
  }
}",0.9896391568417292
69012,"public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getReportDataSet() != null && ChartReportItemUtil.isContainerInheritable(itemHandle));
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
if (this.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ChartAdapter.beginIgnoreNotifications();
this.getDataServiceProvider().update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
ChartAdapter.endIgnoreNotifications();
}
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
}
updatePredefinedQueries();
autoSelect(true);
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
if (event.widget == btnInherit || event.widget == cmbDataItems) {
List<SeriesDefinition> sds=ChartUIUtil.getBaseSeriesDefinitions(getChartModel());
if (sds != null && sds.size() > 0) {
SeriesDefinition base=sds.get(0);
if (selectDataTypes.get(cmbDataItems.getSelectionIndex()).intValue() == SELECT_DATA_SET && !ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
base.getGrouping().setEnabled(true);
}
 else {
base.getGrouping().setEnabled(false);
}
}
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}","public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getReportDataSet() != null && ChartReportItemUtil.isContainerInheritable(itemHandle));
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
if (this.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ChartAdapter.beginIgnoreNotifications();
this.getDataServiceProvider().update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
ChartAdapter.endIgnoreNotifications();
}
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
}
updatePredefinedQueries();
autoSelect(true);
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
if (event.widget == btnInherit || event.widget == cmbDataItems) {
List<SeriesDefinition> sds=ChartUIUtil.getBaseSeriesDefinitions(getChartModel());
if (sds != null && sds.size() > 0) {
SeriesDefinition base=sds.get(0);
if (selectDataTypes.get(cmbDataItems.getSelectionIndex()).intValue() == SELECT_DATA_SET && !ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
if (base.getGrouping() == null) {
base.setGrouping(SeriesGroupingImpl.create());
}
base.getGrouping().setEnabled(true);
}
 else {
if (base.getGrouping() != null) {
base.getGrouping().setEnabled(false);
}
}
}
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}",0.986524064171123
69013,"private void updateQuery(String queryType,Query query,String expr,SeriesDefinition seriesDefinition){
  String actualExpr=expr;
  if (dataProvider.checkState(IDataServiceProvider.SHARE_QUERY) || dataProvider.checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS)) {
    boolean isGroupOrAggr=false;
    Object obj=getCurrentColumnHeadObject();
    if (obj instanceof ColumnBindingInfo) {
      ColumnBindingInfo cbi=(ColumnBindingInfo)obj;
      int type=cbi.getColumnType();
      if (type == ColumnBindingInfo.GROUP_COLUMN || type == ColumnBindingInfo.AGGREGATE_COLUMN) {
        actualExpr=cbi.getExpression();
        isGroupOrAggr=true;
      }
    }
    if (seriesDefinition != null && (queryType.equals(ChartUIConstants.QUERY_CATEGORY) || queryType.equals(ChartUIConstants.QUERY_VALUE))) {
      seriesDefinition.getGrouping().setEnabled(isGroupOrAggr);
    }
  }
  query.setDefinition(actualExpr);
}","private void updateQuery(String queryType,Query query,String expr,SeriesDefinition seriesDefinition){
  String actualExpr=expr;
  if (dataProvider.checkState(IDataServiceProvider.SHARE_QUERY) || dataProvider.checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS)) {
    boolean isGroupOrAggr=false;
    Object obj=getCurrentColumnHeadObject();
    if (obj instanceof ColumnBindingInfo) {
      ColumnBindingInfo cbi=(ColumnBindingInfo)obj;
      int type=cbi.getColumnType();
      if (type == ColumnBindingInfo.GROUP_COLUMN || type == ColumnBindingInfo.AGGREGATE_COLUMN) {
        actualExpr=cbi.getExpression();
        isGroupOrAggr=true;
      }
    }
    if (seriesDefinition != null && (queryType.equals(ChartUIConstants.QUERY_CATEGORY) || queryType.equals(ChartUIConstants.QUERY_VALUE))) {
      seriesDefinition.getGrouping().setEnabled(isGroupOrAggr);
    }
  }
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!dataProvider.checkState(IDataServiceProvider.SHARE_QUERY) && dataProvider.checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (dataProvider.getDataType(actualExpr) == DataType.DATE_TIME_LITERAL) {
        ChartAdapter.beginIgnoreNotifications();
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
        ChartAdapter.endIgnoreNotifications();
      }
    }
  }
  query.setDefinition(actualExpr);
}",0.7234387672343877
69014,"public void initialize(IEmitterServices service) throws BirtException {
  if (emitter != null) {
    emitter.initialize(service);
  }
  ReportDesignHandle designHandle=(ReportDesignHandle)service.getReportRunnable().getDesignHandle();
  if (designHandle != null) {
    String reportLayoutPreference=designHandle.getLayoutPreference();
    context.setFixedLayout(DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference));
  }
}","public void initialize(IEmitterServices service) throws BirtException {
  if (emitter != null) {
    emitter.initialize(service);
  }
  ReportDesignHandle designHandle=(ReportDesignHandle)service.getReportRunnable().getDesignHandle();
  if (designHandle != null) {
    String reportLayoutPreference=designHandle.getLayoutPreference();
    context.setFixedLayout(DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference));
  }
  if (context.getHtmlLayoutContext() != null) {
    if (context.isFixedLayout()) {
      context.setAutoPageBreak(context.getHtmlLayoutContext().allowPageBreak());
    }
  }
}",0.8409506398537477
69015,"public TextAreaLayout(ContainerArea parent,LayoutContext context,IContent content){
  parentLM=(InlineStackingArea)parent;
  ITextContent textContent=(ITextContent)content;
  parentLM.setTextIndent(textContent);
  String text=textContent.getText();
  if (text != null && text.length() != 0)   transform(textContent);
 else   textContent.setText(""String_Node_Str"");
  this.textContent=textContent;
  comp=new TextCompositor(textContent,context.getFontManager(),context);
  LineArea lineParent=getLineParent();
  boolean isEmptyLine=isEmtpy(lineParent);
  comp.setNewLineStatus(isEmptyLine);
}","public TextAreaLayout(ContainerArea parent,LayoutContext context,IContent content){
  parentLM=(InlineStackingArea)parent;
  ITextContent textContent=(ITextContent)content;
  parentLM.setTextIndent(textContent);
  String text=textContent.getText();
  if (text != null && text.length() != 0)   transform(textContent);
 else   textContent.setText(""String_Node_Str"");
  this.textContent=textContent;
  comp=new TextCompositor(textContent,context.getFontManager(),context);
  boolean isEmptyLine=isEmptyLine();
  comp.setNewLineStatus(isEmptyLine);
}",0.9481090589270008
69016,"/** 
 * Creates iText BaseFont with the given font family name.
 * @param ffn the specified font family name.
 * @return the created BaseFont.
 */
public BaseFont createFont(String familyName,int fontStyle){
  String key=familyName + fontStyle;
synchronized (baseFonts) {
    BaseFont font=(BaseFont)baseFonts.get(key);
    if (font == null) {
      try {
        String fontEncoding=(String)fontEncodings.get(familyName);
        if (fontEncoding == null) {
          fontEncoding=BaseFont.IDENTITY_H;
        }
        font=FontFactory.getFont(familyName,fontEncoding,BaseFont.EMBEDDED,14,fontStyle).getBaseFont();
        if (font != null) {
          baseFonts.put(key,font);
        }
      }
 catch (      Throwable de) {
        return null;
      }
    }
    return font;
  }
}","/** 
 * Creates iText BaseFont with the given font family name.
 * @param ffn the specified font family name.
 * @return the created BaseFont.
 */
public BaseFont createFont(String familyName,int fontStyle){
  String key=familyName + fontStyle;
synchronized (baseFonts) {
    BaseFont font=(BaseFont)baseFonts.get(key);
    if (font == null) {
      if (baseFonts.containsKey(key)) {
        return null;
      }
      try {
        String fontEncoding=(String)fontEncodings.get(familyName);
        if (fontEncoding == null) {
          fontEncoding=BaseFont.IDENTITY_H;
        }
        font=FontFactory.getFont(familyName,fontEncoding,BaseFont.EMBEDDED,14,fontStyle).getBaseFont();
        baseFonts.put(key,font);
      }
 catch (      Throwable de) {
        baseFonts.put(key,font);
        return null;
      }
    }
    return font;
  }
}",0.9129901960784312
69017,"private void processCellStyle(Element element,Map<Element,StyleProperties> cssStyles){
  String border=element.getAttribute(PROPERTY_BORDER);
  String padding=element.getAttribute(PROPERTY_CELLPADDING);
  boolean hasBorder=border != null && border.length() > 0;
  boolean hasPadding=padding != null && padding.length() > 0;
  if (hasBorder || hasPadding) {
    for (Node node=element.getFirstChild(); node != null; node=node.getNextSibling()) {
      Element r=(Element)node;
      if (TAG_TR.equals(r.getTagName())) {
        for (Node n=r.getFirstChild(); n != null; n=n.getNextSibling()) {
          Element c=(Element)n;
          if (TAG_TD.equals(c.getTagName())) {
            StyleProperties sp=cssStyles.get(c);
            if (sp == null) {
              sp=new StyleProperties(new StyleDeclaration(content.getCSSEngine()));
              cssStyles.put(c,sp);
            }
            if (hasBorder) {
              PropertiesProcessor.process(PROPERTY_BORDER,border,sp);
            }
            if (hasPadding) {
              PropertiesProcessor.process(PROPERTY_CELLPADDING,border,sp);
            }
          }
        }
      }
    }
  }
}","private void processCellStyle(Element element,Map<Element,StyleProperties> cssStyles){
  String border=element.getAttribute(PROPERTY_BORDER);
  String padding=element.getAttribute(PROPERTY_CELLPADDING);
  boolean hasBorder=border != null && border.length() > 0;
  boolean hasPadding=padding != null && padding.length() > 0;
  if (hasBorder || hasPadding) {
    for (Node node=element.getFirstChild(); node != null; node=node.getNextSibling()) {
      Element r=(Element)node;
      if (TAG_TR.equals(r.getTagName()) || TAG_TH.equals(r.getTagName())) {
        for (Node n=r.getFirstChild(); n != null; n=n.getNextSibling()) {
          Element c=(Element)n;
          if (TAG_TD.equals(c.getTagName())) {
            StyleProperties sp=cssStyles.get(c);
            if (sp == null) {
              sp=new StyleProperties(new StyleDeclaration(content.getCSSEngine()));
              cssStyles.put(c,sp);
            }
            if (hasBorder) {
              PropertiesProcessor.process(PROPERTY_BORDER,border,sp);
            }
            if (hasPadding) {
              PropertiesProcessor.process(PROPERTY_CELLPADDING,border,sp);
            }
          }
        }
      }
    }
  }
}",0.985939497230507
69018,"/** 
 * Updates UI selection according to Chart type
 */
protected void updateSelection(){
  boolean bOutXtab=!getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART);
  if (chartModel instanceof ChartWithAxes) {
    if (cbMultipleY != null) {
      lblMultipleY.setEnabled(bOutXtab && !is3D());
      cbMultipleY.setEnabled(bOutXtab && !is3D());
    }
    if (cbSeriesType != null) {
      lblSeriesType.setEnabled(bOutXtab && isTwoAxesEnabled());
      cbSeriesType.setEnabled(bOutXtab && isTwoAxesEnabled());
    }
  }
 else {
    if (cbMultipleY != null) {
      cbMultipleY.select(0);
      ((ChartWizardContext)getContext()).setMoreAxesSupported(false);
      lblMultipleY.setEnabled(false);
      cbMultipleY.setEnabled(false);
    }
    if (cbSeriesType != null) {
      lblSeriesType.setEnabled(false);
      cbSeriesType.setEnabled(false);
    }
  }
  if (cbOrientation != null) {
    lblOrientation.setEnabled(bOutXtab && lblOrientation.isEnabled());
    cbOrientation.setEnabled(bOutXtab && cbOrientation.isEnabled());
  }
}","/** 
 * Updates UI selection according to Chart type
 */
protected void updateSelection(){
  boolean bOutXtab=!getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART);
  if (chartModel instanceof ChartWithAxes) {
    if (cbMultipleY != null) {
      lblMultipleY.setEnabled(isMultiAxisSupported());
      cbMultipleY.setEnabled(isMultiAxisSupported());
    }
    if (cbSeriesType != null) {
      lblSeriesType.setEnabled(bOutXtab && isTwoAxesEnabled());
      cbSeriesType.setEnabled(bOutXtab && isTwoAxesEnabled());
    }
  }
 else {
    if (cbMultipleY != null) {
      cbMultipleY.select(0);
      ((ChartWizardContext)getContext()).setMoreAxesSupported(false);
      lblMultipleY.setEnabled(false);
      cbMultipleY.setEnabled(false);
    }
    if (cbSeriesType != null) {
      lblSeriesType.setEnabled(false);
      cbSeriesType.setEnabled(false);
    }
  }
  if (cbOrientation != null) {
    lblOrientation.setEnabled(bOutXtab && lblOrientation.isEnabled());
    cbOrientation.setEnabled(bOutXtab && cbOrientation.isEnabled());
  }
}",0.4153992395437262
69019,"private void synchronize(double height){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    SheetData lastData=cache.getColumnLastData(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    int span=lastData != null ? lastData.getRowSpanInDesign() : 0;
    if (span == 0 || (span == 1 && !isInContainer(lastData,rowContainer))) {
      maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
    }
  }
  int startRowIndex=rowContainer.getRowIndex();
  if (maxRowIndex == startRowIndex) {
    maxRowIndex++;
  }
  rowContainer.setRowIndex(maxRowIndex);
  double resize=height / (maxRowIndex - startRowIndex);
  for (int i=startRowIndex; i < maxRowIndex; i++) {
    cache.setRowHeight(i,resize);
  }
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    SheetData upstair=cache.getColumnLastData(currentColumnIndex);
    if (rowspan > 0) {
      if (upstair != null && canSpan(upstair,rowContainer)) {
        Type blankType=Type.VERTICAL;
        if (upstair.isBlank()) {
          BlankData blankData=(BlankData)upstair;
          if (blankData.getType() == Type.VERTICAL) {
            upstair.setRowSpan(upstair.getRowSpan() + rowspan);
          }
          blankType=blankData.getType();
        }
 else {
          upstair.setRowSpan(upstair.getRowSpan() + rowspan);
        }
        SheetData realData=getRealData(upstair);
        if (!isInContainer(upstair,rowContainer)) {
          realData.decreasRowSpanInDesign();
        }
        int rowIndex=upstair.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(upstair);
          blank.setRowIndex(rowIndex + p);
          blank.setType(blankType);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
 else     if (upstair.getRowSpanInDesign() > 0 && !isInContainer(upstair,rowContainer)) {
      upstair.decreasRowSpanInDesign();
    }
  }
}","private void synchronize(double height){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    SheetData lastData=cache.getColumnLastData(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    int span=lastData != null ? lastData.getRowSpanInDesign() : 0;
    if (span == 0 || (span == 1 && !isInContainer(lastData,rowContainer))) {
      maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
    }
  }
  int startRowIndex=rowContainer.getRowIndex();
  if (maxRowIndex == startRowIndex) {
    maxRowIndex++;
  }
  rowContainer.setRowIndex(maxRowIndex);
  double resize=height / (maxRowIndex - startRowIndex);
  for (int i=startRowIndex; i < maxRowIndex; i++) {
    cache.setRowHeight(i,resize);
  }
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    SheetData upstair=cache.getColumnLastData(currentColumnIndex);
    if (rowspan > 0) {
      if (upstair != null && canSpan(upstair,rowContainer)) {
        Type blankType=Type.VERTICAL;
        if (upstair.isBlank()) {
          BlankData blankData=(BlankData)upstair;
          if (blankData.getType() == Type.VERTICAL) {
            upstair.setRowSpan(upstair.getRowSpan() + rowspan);
            if (!isInContainer(blankData,rowContainer)) {
              upstair.decreasRowSpanInDesign();
            }
          }
          blankType=blankData.getType();
        }
 else {
          upstair.setRowSpan(upstair.getRowSpan() + rowspan);
          if (!isInContainer(upstair,rowContainer)) {
            upstair.decreasRowSpanInDesign();
          }
        }
        int rowIndex=upstair.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(upstair);
          blank.setRowIndex(rowIndex + p);
          blank.setType(blankType);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
 else     if (upstair.getRowSpanInDesign() > 0 && !isInContainer(upstair,rowContainer)) {
      upstair.decreasRowSpanInDesign();
    }
  }
}",0.9306445533358462
69020,"protected boolean isValidResult(List result){
  if (repeatList != null && !inHeaderBand) {
    return result.size() > repeatList.size();
  }
  return super.isValidResult(result);
}","protected boolean isValidResult(List result){
}",0.4140969162995594
69021,"protected Control createContents(Composite parent){
  getShell().setText(Messages.getString(""String_Node_Str""));
  Control c=super.createContents(parent);
  if (icon instanceof EmbeddedImage) {
    btnEmbeddedImage.setSelection(true);
    switchTo(EMBEDDED_TYPE);
  }
  c.pack();
  preview();
  Point size=getShell().computeSize(SWT.DEFAULT,SWT.DEFAULT);
  getShell().setSize(size.x,size.y);
  UIHelper.centerOnScreen(getShell());
  return c;
}","protected Control createContents(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.DIALOG_MARKER_ICON);
  getShell().setText(Messages.getString(""String_Node_Str""));
  Control c=super.createContents(parent);
  if (icon instanceof EmbeddedImage) {
    btnEmbeddedImage.setSelection(true);
    switchTo(EMBEDDED_TYPE);
  }
  c.pack();
  preview();
  Point size=getShell().computeSize(SWT.DEFAULT,SWT.DEFAULT);
  getShell().setSize(size.x,size.y);
  UIHelper.centerOnScreen(getShell());
  return c;
}",0.9259645464025026
69022,"private CellArea createEmptyCell(CellArea upperCell,int columnId,RowArea row,RowArea lastRow){
  ICellContent cellContent=null;
  int rowSpan=1;
  if (upperCell != null) {
    cellContent=(ICellContent)upperCell.getContent();
    rowSpan=upperCell.getRowSpan() - 1;
  }
  if (cellContent == null) {
    cellContent=tableContent.getReportContent().createCellContent();
    cellContent.setColumn(columnId);
    cellContent.setColSpan(1);
    cellContent.setRowSpan(1);
    cellContent.setParent(row.getContent());
  }
  int emptyCellColID=cellContent.getColumn();
  int emptyCellColSpan=cellContent.getColSpan();
  CellArea emptyCell=upperCell.cloneArea();
  emptyCell.setHeight(0);
  emptyCell.setRowSpan(rowSpan);
  CellArea leftSideCellArea=null;
  if (emptyCellColID > startCol) {
    leftSideCellArea=row.getCell(emptyCellColID - 1);
    if (leftSideCellArea == null) {
      int k=emptyCellColID - 1;
      while (leftSideCellArea == null && k > startCol) {
        k--;
        leftSideCellArea=row.getCell(k);
      }
    }
  }
 else {
    leftSideCellArea=null;
  }
  emptyCell.setParent(row);
  row.setCell(emptyCell);
  resolveBorderConflict(emptyCell,true);
  emptyCell.setWidth(getCellWidth(emptyCellColID,emptyCellColID + emptyCellColSpan));
  emptyCell.setPosition(layoutInfo.getXPosition(columnId),0);
  if (leftSideCellArea != null) {
    int index=row.indexOf(leftSideCellArea);
    row.addChild(index + 1,emptyCell);
  }
 else {
    row.addChild(0,emptyCell);
  }
  emptyCell.isDummy=true;
  return emptyCell;
}","private CellArea createEmptyCell(CellArea upperCell,int columnId,RowArea row,RowArea lastRow){
  ICellContent cellContent=null;
  int rowSpan=1;
  if (upperCell != null) {
    cellContent=(ICellContent)upperCell.getContent();
    rowSpan=upperCell.getRowSpan() - 1;
  }
  if (cellContent == null) {
    cellContent=tableContent.getReportContent().createCellContent();
    cellContent.setColumn(columnId);
    cellContent.setColSpan(1);
    cellContent.setRowSpan(1);
    cellContent.setParent(row.getContent());
  }
  int emptyCellColID=cellContent.getColumn();
  int emptyCellColSpan=cellContent.getColSpan();
  CellArea emptyCell=upperCell.cloneArea();
  BoxStyle bs=emptyCell.getBoxStyle();
  bs.setRightBorder(null);
  bs.setBottomBorder(null);
  emptyCell.setHeight(0);
  emptyCell.setRowSpan(rowSpan);
  CellArea leftSideCellArea=null;
  if (emptyCellColID > startCol) {
    leftSideCellArea=row.getCell(emptyCellColID - 1);
    if (leftSideCellArea == null) {
      int k=emptyCellColID - 1;
      while (leftSideCellArea == null && k > startCol) {
        k--;
        leftSideCellArea=row.getCell(k);
      }
    }
  }
 else {
    leftSideCellArea=null;
  }
  emptyCell.setParent(row);
  row.setCell(emptyCell);
  resolveBorderConflict(emptyCell,true);
  emptyCell.setWidth(getCellWidth(emptyCellColID,emptyCellColID + emptyCellColSpan));
  emptyCell.setPosition(layoutInfo.getXPosition(columnId),0);
  if (leftSideCellArea != null) {
    int index=row.indexOf(leftSideCellArea);
    row.addChild(index + 1,emptyCell);
  }
 else {
    row.addChild(0,emptyCell);
  }
  emptyCell.isDummy=true;
  return emptyCell;
}",0.97015873015873
69023,"private void addToExtension(BlockTextArea area){
  if (context.isFixedLayout() && context.getEngineTaskType() == IEngineTask.TASK_RUN) {
    ArrayList<BlockTextArea> list=(ArrayList<BlockTextArea>)content.getExtension(IContent.LAYOUT_EXTENSION);
    if (list == null) {
      list=new ArrayList<BlockTextArea>();
      content.setExtension(IContent.LAYOUT_EXTENSION,list);
    }
    if (area.finished) {
      list.add(area);
    }
 else {
      if (list.size() > 0 && list.get(list.size() - 1).finished) {
        list.add(list.size() - 1,area);
      }
 else {
        list.add(area);
      }
    }
  }
}","private void addToExtension(BlockTextArea area){
  if (context.isFixedLayout() && context.getEngineTaskType() == IEngineTask.TASK_RUN) {
    ArrayList<BlockTextArea> list=(ArrayList<BlockTextArea>)content.getExtension(IContent.LAYOUT_EXTENSION);
    if (list == null) {
      list=new ArrayList<BlockTextArea>();
      content.setExtension(IContent.LAYOUT_EXTENSION,list);
    }
    if (area.finished) {
      if (list.isEmpty() || (list.size() > 0 && !list.get(list.size() - 1).finished)) {
        list.add(area);
      }
    }
 else {
      if (list.size() > 0 && list.get(list.size() - 1).finished) {
        list.add(list.size() - 1,area);
      }
 else {
        list.add(area);
      }
    }
  }
}",0.8702290076335878
69024,"private void checkDataTypeImpl(Query query,Series series,boolean isBaseSeries){
  String expression=query.getDefinition();
  Axis axis=null;
  for (EObject o=query; o != null; ) {
    o=o.eContainer();
    if (o instanceof Axis) {
      axis=(Axis)o;
      break;
    }
  }
  Collection<ISeriesUIProvider> cRegisteredEntries=ChartUIExtensionsImpl.instance().getSeriesUIComponents(getContext().getClass().getSimpleName());
  Iterator<ISeriesUIProvider> iterEntries=cRegisteredEntries.iterator();
  String sSeries=null;
  while (iterEntries.hasNext()) {
    ISeriesUIProvider provider=iterEntries.next();
    sSeries=provider.getSeriesClass();
    if (sSeries.equals(series.getClass().getName())) {
      if (chartModel instanceof ChartWithAxes) {
        DataType dataType=getDataServiceProvider().getDataType(expression);
        SeriesDefinition baseSD=(ChartUIUtil.getBaseSeriesDefinitions(chartModel).get(0));
        SeriesDefinition orthSD=null;
        orthSD=(SeriesDefinition)series.eContainer();
        String aggFunc=null;
        try {
          aggFunc=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,query);
          ChartWizard.removeException(ChartWizard.PluginSet_getAggF_ID);
        }
 catch (        ChartException e) {
          ChartWizard.showException(ChartWizard.PluginSet_getAggF_ID,e.getLocalizedMessage());
        }
        if (baseSD != null) {
          if (!isBaseSeries && baseSD != orthSD && ChartUtil.isMagicAggregate(aggFunc)) {
            dataType=DataType.NUMERIC_LITERAL;
          }
        }
        if (isValidatedAxis(dataType,axis.getType())) {
          break;
        }
        AxisType[] axisTypes=provider.getCompatibleAxisType(series);
        for (int i=0; i < axisTypes.length; i++) {
          if (isValidatedAxis(dataType,axisTypes[i])) {
            axisNotification(axis,axisTypes[i]);
            ChartAdapter.beginIgnoreNotifications();
            axis.setType(axisTypes[i]);
            ChartAdapter.endIgnoreNotifications();
            break;
          }
        }
      }
      try {
        provider.validateSeriesBindingType(series,getDataServiceProvider());
        ChartWizard.removeException(ChartWizard.CheckSeriesBindingType_ID + series.eContainer().hashCode());
      }
 catch (      ChartException ce) {
        ChartWizard.showException(ChartWizard.CheckSeriesBindingType_ID + series.eContainer().hashCode(),Messages.getFormattedString(""String_Node_Str"",new String[]{ce.getLocalizedMessage(),series.getDisplayName()}));
      }
      break;
    }
  }
}","private void checkDataTypeImpl(Query query,Series series,boolean isBaseSeries){
  String expression=query.getDefinition();
  Axis axis=null;
  for (EObject o=query; o != null; ) {
    o=o.eContainer();
    if (o instanceof Axis) {
      axis=(Axis)o;
      break;
    }
  }
  Collection<ISeriesUIProvider> cRegisteredEntries=ChartUIExtensionsImpl.instance().getSeriesUIComponents(getContext().getClass().getSimpleName());
  Iterator<ISeriesUIProvider> iterEntries=cRegisteredEntries.iterator();
  String sSeries=null;
  while (iterEntries.hasNext()) {
    ISeriesUIProvider provider=iterEntries.next();
    sSeries=provider.getSeriesClass();
    if (sSeries.equals(series.getClass().getName())) {
      if (chartModel instanceof ChartWithAxes) {
        DataType dataType=getDataServiceProvider().getDataType(expression);
        SeriesDefinition baseSD=(ChartUIUtil.getBaseSeriesDefinitions(chartModel).get(0));
        SeriesDefinition orthSD=null;
        orthSD=(SeriesDefinition)series.eContainer();
        String aggFunc=null;
        try {
          aggFunc=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,query);
          ChartWizard.removeException(ChartWizard.PluginSet_getAggF_ID);
        }
 catch (        ChartException e) {
          ChartWizard.showException(ChartWizard.PluginSet_getAggF_ID,e.getLocalizedMessage());
        }
        if (baseSD != null) {
          if (!isBaseSeries && baseSD != orthSD && ChartUtil.isMagicAggregate(aggFunc)) {
            dataType=DataType.NUMERIC_LITERAL;
          }
        }
        if (isValidatedAxis(dataType,axis.getType())) {
          ChartWizard.removeException(ChartWizard.CheckSeriesBindingType_ID + series.eContainer().hashCode());
          break;
        }
        AxisType[] axisTypes=provider.getCompatibleAxisType(series);
        for (int i=0; i < axisTypes.length; i++) {
          if (isValidatedAxis(dataType,axisTypes[i])) {
            axisNotification(axis,axisTypes[i]);
            ChartAdapter.beginIgnoreNotifications();
            axis.setType(axisTypes[i]);
            ChartAdapter.endIgnoreNotifications();
            break;
          }
        }
      }
      try {
        provider.validateSeriesBindingType(series,getDataServiceProvider());
        ChartWizard.removeException(ChartWizard.CheckSeriesBindingType_ID + series.eContainer().hashCode());
      }
 catch (      ChartException ce) {
        ChartWizard.showException(ChartWizard.CheckSeriesBindingType_ID + series.eContainer().hashCode(),Messages.getFormattedString(""String_Node_Str"",new String[]{ce.getLocalizedMessage(),series.getDisplayName()}));
      }
      break;
    }
  }
}",0.7589683924762459
69025,"private void writeBorder(String position,String lineStyle,String weight,String color){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",position);
  if (isValid(lineStyle)) {
    writer.attribute(""String_Node_Str"",lineStyle);
  }
  if (isValid(weight)) {
    writer.attribute(""String_Node_Str"",weight);
  }
  if (isValid(color)) {
    writer.attribute(""String_Node_Str"",color);
  }
  writer.closeTag(""String_Node_Str"");
}","private void writeBorder(String position,String lineStyle,String weight,Color color){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",position);
  if (isValid(lineStyle)) {
    writer.attribute(""String_Node_Str"",lineStyle);
  }
  if (isValid(weight)) {
    writer.attribute(""String_Node_Str"",weight);
  }
  if (color != null) {
    writer.attribute(""String_Node_Str"",toString(color));
  }
  writer.closeTag(""String_Node_Str"");
}",0.9577777777777776
69026,"private void declareHyperlinkStyle(){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeFont(null,null,null,null,null,true,""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}","private void declareHyperlinkStyle(){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}",0.7907692307692308
69027,"private void writeFont(String fontName,Integer size,Boolean bold,Boolean italic,Boolean strikeThrough,Boolean underline,String color){
  writer.openTag(""String_Node_Str"");
  if (isValid(fontName)) {
    writer.attribute(""String_Node_Str"",fontName);
  }
  if (size != null) {
    writer.attribute(""String_Node_Str"",size);
  }
  if (bold != null && bold) {
    writer.attribute(""String_Node_Str"",1);
  }
  if (italic != null && italic) {
    writer.attribute(""String_Node_Str"",1);
  }
  if (strikeThrough != null && strikeThrough) {
    writer.attribute(""String_Node_Str"",1);
  }
  if (underline != null && underline) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (isValid(color)) {
    writer.attribute(""String_Node_Str"",color);
  }
  writer.closeTag(""String_Node_Str"");
}","private void writeFont(String fontName,Integer size,Boolean bold,Boolean italic,Boolean strikeThrough,Boolean underline,Color color){
  writer.openTag(""String_Node_Str"");
  if (isValid(fontName)) {
    writer.attribute(""String_Node_Str"",fontName);
  }
  if (size != null) {
    writer.attribute(""String_Node_Str"",size);
  }
  if (bold != null && bold) {
    writer.attribute(""String_Node_Str"",1);
  }
  if (italic != null && italic) {
    writer.attribute(""String_Node_Str"",1);
  }
  if (strikeThrough != null && strikeThrough) {
    writer.attribute(""String_Node_Str"",1);
  }
  if (underline != null && underline) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (color != null) {
    writer.attribute(""String_Node_Str"",toString(color));
  }
  writer.closeTag(""String_Node_Str"");
}",0.9762202753441802
69028,"private void writeBackGroudColor(String bgColor){
  if (isValid(bgColor)) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",bgColor);
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
}","private void writeBackGroudColor(StyleEntry style){
  Color bgColor=(Color)style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
  if (bgColor != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",bgColor);
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
}",0.2402597402597402
69029,"private void writeDataFormat(StyleEntry style){
  String typeString=(String)style.getProperty(StyleConstant.DATA_TYPE_PROP);
  if (typeString == null)   return;
  int type=Integer.parseInt(typeString);
  if (type == SheetData.DATE && style.getProperty(StyleConstant.DATE_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.DATE_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
  if (type == Data.NUMBER && style.getProperty(StyleConstant.NUMBER_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    String numberStyle=(String)style.getProperty(StyleConstant.NUMBER_FORMAT_PROP);
    writer.attribute(""String_Node_Str"",numberStyle);
    writer.closeTag(""String_Node_Str"");
  }
}","private void writeDataFormat(StyleEntry style){
  Integer type=(Integer)style.getProperty(StyleConstant.DATA_TYPE_PROP);
  if (type == SheetData.DATE && style.getProperty(StyleConstant.DATE_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.DATE_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
 else   if (type == Data.NUMBER && style.getProperty(StyleConstant.NUMBER_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    String numberStyle=(String)style.getProperty(StyleConstant.NUMBER_FORMAT_PROP);
    writer.attribute(""String_Node_Str"",numberStyle);
    writer.closeTag(""String_Node_Str"");
  }
}",0.916051040967092
69030,"private void declareStyle(StyleEntry style,int id){
  boolean wrapText=context.getWrappingText();
  String whiteSpace=(String)style.getProperty(StyleConstant.WHITE_SPACE);
  if (CSSConstants.CSS_NOWRAP_VALUE.equals(whiteSpace)) {
    wrapText=false;
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  if (style.getName() == StyleEntry.ENTRYNAME_HYPERLINK) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (id >= StyleEngine.RESERVE_STYLE_ID) {
    String direction=(String)style.getProperty(StyleConstant.DIRECTION_PROP);
    String horizontalAlign=(String)style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=(String)style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign,direction,wrapText);
    writer.openTag(""String_Node_Str"");
    String bottomColor=(String)style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=(String)style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=(String)style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    String topColor=(String)style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=(String)style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=(String)style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    String leftColor=(String)style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=(String)style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=(String)style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    String rightColor=(String)style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=(String)style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=(String)style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    String diagonalColor=(String)style.getProperty(StyleConstant.BORDER_DIAGONAL_COLOR_PROP);
    String diagonalStyle=(String)style.getProperty(StyleConstant.BORDER_DIAGONAL_STYLE_PROP);
    String diagonalWidth=(String)style.getProperty(StyleConstant.BORDER_DIAGONAL_WIDTH_PROP);
    writeBorder(""String_Node_Str"",diagonalStyle,diagonalWidth,diagonalColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=(String)style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    Integer size=(Integer)style.getProperty(StyleConstant.FONT_SIZE_PROP);
    Boolean fontStyle=(Boolean)style.getProperty(StyleConstant.FONT_STYLE_PROP);
    Boolean fontWeight=(Boolean)style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    Boolean strikeThrough=(Boolean)style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    Boolean underline=(Boolean)style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    String color=(String)style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    String bgColor=(String)style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
    writeBackGroudColor(bgColor);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}","private void declareStyle(StyleEntry style,int id){
  boolean wrapText=context.getWrappingText();
  String whiteSpace=(String)style.getProperty(StyleConstant.WHITE_SPACE);
  if (CSSConstants.CSS_NOWRAP_VALUE.equals(whiteSpace)) {
    wrapText=false;
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  if (style.getName() == StyleEntry.ENTRYNAME_HYPERLINK) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (id >= StyleEngine.RESERVE_STYLE_ID) {
    String direction=(String)style.getProperty(StyleConstant.DIRECTION_PROP);
    String horizontalAlign=(String)style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=(String)style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign,direction,wrapText);
    writer.openTag(""String_Node_Str"");
    Color bottomColor=(Color)style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=(String)style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=(String)style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    Color topColor=(Color)style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=(String)style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=(String)style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    Color leftColor=(Color)style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=(String)style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=(String)style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    Color rightColor=(Color)style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=(String)style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=(String)style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    Color diagonalColor=(Color)style.getProperty(StyleConstant.BORDER_DIAGONAL_COLOR_PROP);
    String diagonalStyle=(String)style.getProperty(StyleConstant.BORDER_DIAGONAL_STYLE_PROP);
    String diagonalWidth=(String)style.getProperty(StyleConstant.BORDER_DIAGONAL_WIDTH_PROP);
    writeBorder(""String_Node_Str"",diagonalStyle,diagonalWidth,diagonalColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=(String)style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    Integer size=(Integer)style.getProperty(StyleConstant.FONT_SIZE_PROP);
    Boolean fontStyle=(Boolean)style.getProperty(StyleConstant.FONT_STYLE_PROP);
    Boolean fontWeight=(Boolean)style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    Boolean strikeThrough=(Boolean)style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    Boolean underline=(Boolean)style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    Color color=(Color)style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    writeBackGroudColor(style);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}",0.9664746713927042
69031,"public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,""String_Node_Str"".equalsIgnoreCase(style.getFontStyle()));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,""String_Node_Str"".equalsIgnoreCase(style.getFontWeight()));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,""String_Node_Str"".equalsIgnoreCase(style.getTextLineThrough()));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,""String_Node_Str"".equalsIgnoreCase(style.getTextUnderline()));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign(),style.getDirection()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  entry.setProperty(StyleConstant.DIRECTION_PROP,style.getDirection());
  entry.setProperty(StyleConstant.WHITE_SPACE,style.getWhiteSpace());
  return entry;
}","public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  populateColor(style,StyleConstants.STYLE_BACKGROUND_COLOR,entry,StyleConstant.BACKGROUND_COLOR_PROP);
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_BOTTOM_COLOR,entry,StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_TOP_COLOR,entry,StyleConstant.BORDER_TOP_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_LEFT_COLOR,entry,StyleConstant.BORDER_LEFT_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    populateColor(style,StyleConstants.STYLE_BORDER_RIGHT_COLOR,entry,StyleConstant.BORDER_RIGHT_COLOR_PROP);
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  populateColor(style,StyleConstants.STYLE_COLOR,entry,StyleConstant.COLOR_PROP);
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,""String_Node_Str"".equalsIgnoreCase(style.getFontStyle()));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,""String_Node_Str"".equalsIgnoreCase(style.getFontWeight()));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,""String_Node_Str"".equalsIgnoreCase(style.getTextLineThrough()));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,""String_Node_Str"".equalsIgnoreCase(style.getTextUnderline()));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign(),style.getDirection()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  entry.setProperty(StyleConstant.DIRECTION_PROP,style.getDirection());
  entry.setProperty(StyleConstant.WHITE_SPACE,style.getWhiteSpace());
  return entry;
}",0.8234005944001251
69032,"public static StyleEntry applyDiagonalLine(StyleEntry entry,String color,String style,int width){
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_DIAGONAL_COLOR_PROP,convertColor(color));
    entry.setProperty(StyleConstant.BORDER_DIAGONAL_STYLE_PROP,convertBorderStyle(style));
    entry.setProperty(StyleConstant.BORDER_DIAGONAL_WIDTH_PROP,convertBorderWeight(width));
  }
  return entry;
}","public static StyleEntry applyDiagonalLine(StyleEntry entry,Color color,String style,int width){
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_DIAGONAL_COLOR_PROP,color);
    entry.setProperty(StyleConstant.BORDER_DIAGONAL_STYLE_PROP,convertBorderStyle(style));
    entry.setProperty(StyleConstant.BORDER_DIAGONAL_WIDTH_PROP,convertBorderWeight(width));
  }
  return entry;
}",0.9435382685069008
69033,"public void placeComponents(Composite parent){
  Series series=seriesDefn.getDesignTimeSeries();
  linkSeries=new Link(parent,SWT.NONE);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    linkSeries.setLayoutData(gd);
    linkSeries.setText(""String_Node_Str"" + seriesName + ""String_Node_Str"");
    linkSeries.addSelectionListener(this);
  }
  List<String> keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(parent,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),series.getSeriesIdentifier().toString());
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  cmbTypes=new Combo(parent,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmbTypes.setLayoutData(gd);
    cmbTypes.addSelectionListener(this);
    if (iSeriesDefinitionIndex == 0) {
      cmbTypes.setEnabled(false);
    }
  }
  if (!series.getClass().isAssignableFrom(SeriesImpl.class)) {
    spnZOrder=new Spinner(parent,SWT.BORDER);
{
      GridData gd=new GridData();
      gd.horizontalAlignment=SWT.CENTER;
      spnZOrder.setLayoutData(gd);
      spnZOrder.setMinimum(0);
      spnZOrder.setMaximum(10);
      if (getChart() instanceof ChartWithAxes && !(getContext().getChartType() instanceof BubbleChart)) {
        spnZOrder.setSelection(seriesDefn.getZOrder());
        spnZOrder.addSelectionListener(this);
      }
 else {
        spnZOrder.setEnabled(false);
      }
    }
    btnVisible=new Button(parent,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalAlignment=SWT.CENTER;
      btnVisible.setLayoutData(gd);
      btnVisible.setSelection(series.isVisible());
      btnVisible.addSelectionListener(this);
    }
    btnStack=new Button(parent,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalAlignment=SWT.CENTER;
      btnStack.setLayoutData(gd);
      btnStack.setEnabled(canStack && series.canBeStacked() && getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL && !bStackedPercent);
      if (series.isStacked() && !canStack) {
        btnStack.setSelection(false);
        series.setStacked(false);
      }
 else {
        btnStack.setSelection(series.isStacked());
      }
      btnStack.addSelectionListener(this);
    }
    btnTranslucent=new Button(parent,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalAlignment=SWT.CENTER;
      btnTranslucent.setLayoutData(gd);
      btnTranslucent.setSelection(series.isTranslucent());
      btnTranslucent.addSelectionListener(this);
    }
    setTypeComboState();
    setStackedBoxState();
  }
 else {
    Label dummy=new Label(parent,SWT.CHECK);
    GridData gd=new GridData();
    gd.horizontalSpan=4;
    dummy.setLayoutData(gd);
  }
  populateLists(seriesDefn.getDesignTimeSeries());
}","public void placeComponents(Composite parent){
  Series series=seriesDefn.getDesignTimeSeries();
  linkSeries=new Link(parent,SWT.NONE);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    linkSeries.setLayoutData(gd);
    linkSeries.setText(""String_Node_Str"" + seriesName + ""String_Node_Str"");
    linkSeries.addSelectionListener(this);
  }
  List<String> keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(parent,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),series.getSeriesIdentifier().toString());
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  cmbTypes=new Combo(parent,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmbTypes.setLayoutData(gd);
    cmbTypes.addSelectionListener(this);
    if (iSeriesDefinitionIndex == 0) {
      cmbTypes.setEnabled(false);
    }
  }
  if (!series.getClass().isAssignableFrom(SeriesImpl.class)) {
    spnZOrder=new Spinner(parent,SWT.BORDER);
{
      GridData gd=new GridData();
      gd.horizontalAlignment=SWT.CENTER;
      spnZOrder.setLayoutData(gd);
      spnZOrder.setMinimum(0);
      spnZOrder.setMaximum(10);
      if (getChart() instanceof ChartWithAxes && !(getContext().getChartType() instanceof BubbleChart) && getChart().getDimension() == ChartDimension.TWO_DIMENSIONAL_LITERAL) {
        spnZOrder.setSelection(seriesDefn.getZOrder());
        spnZOrder.addSelectionListener(this);
      }
 else {
        spnZOrder.setEnabled(false);
      }
    }
    btnVisible=new Button(parent,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalAlignment=SWT.CENTER;
      btnVisible.setLayoutData(gd);
      btnVisible.setSelection(series.isVisible());
      btnVisible.addSelectionListener(this);
    }
    btnStack=new Button(parent,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalAlignment=SWT.CENTER;
      btnStack.setLayoutData(gd);
      btnStack.setEnabled(canStack && series.canBeStacked() && getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL && !bStackedPercent);
      if (series.isStacked() && !canStack) {
        btnStack.setSelection(false);
        series.setStacked(false);
      }
 else {
        btnStack.setSelection(series.isStacked());
      }
      btnStack.addSelectionListener(this);
    }
    btnTranslucent=new Button(parent,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalAlignment=SWT.CENTER;
      btnTranslucent.setLayoutData(gd);
      btnTranslucent.setSelection(series.isTranslucent());
      btnTranslucent.addSelectionListener(this);
    }
    setTypeComboState();
    setStackedBoxState();
  }
 else {
    Label dummy=new Label(parent,SWT.CHECK);
    GridData gd=new GridData();
    gd.horizontalSpan=4;
    dummy.setLayoutData(gd);
  }
  populateLists(seriesDefn.getDesignTimeSeries());
}",0.988188321410747
69034,"protected String getBorderWidth(String[] values,CSSEngine engine){
  for (int i=0; i < values.length; i++) {
    LexicalUnit u=getUnit(values[i],engine);
    if (u != null) {
      int type=u.getLexicalUnitType();
      if (type >= LexicalUnit.SAC_EM && type <= LexicalUnit.SAC_PERCENTAGE) {
        return values[i];
      }
 else       if (type == LexicalUnit.SAC_IDENT) {
        if (isIdentifier(values[i],IStyle.STYLE_BORDER_TOP_WIDTH,engine)) {
          return values[i];
        }
      }
    }
  }
  return CSSConstants.CSS_MEDIUM_VALUE;
}","protected String getBorderWidth(String[] values,CSSEngine engine){
  for (int i=0; i < values.length; i++) {
    LexicalUnit u=getUnit(values[i],engine);
    if (u != null) {
      int type=u.getLexicalUnitType();
      if (type >= LexicalUnit.SAC_EM && type <= LexicalUnit.SAC_PERCENTAGE) {
        return values[i];
      }
 else       if (type == LexicalUnit.SAC_IDENT) {
        if (CSSConstants.CSS_MEDIUM_VALUE.equals(values[i]) || CSSConstants.CSS_THICK_VALUE.equals(values[i]) || CSSConstants.CSS_THIN_VALUE.equals(values[i])) {
          return values[i];
        }
      }
    }
  }
  return CSSConstants.CSS_MEDIUM_VALUE;
}",0.8494077834179357
69035,"/** 
 * Moves down one segment from its current segment of the iterator.
 * @return
 * @throws IOException
 */
private boolean nextSegment() throws IOException {
  if (stopSign.isStopped()) {
    return false;
  }
  if (!traversalor.next()) {
    return false;
  }
  currentSubDim=traversalor.getIntArray();
  currentSegment=factTable.getDocumentManager().openDocumentObject(FTSUDocumentObjectNamingUtil.getDocumentObjectName(NamingUtil.getFactTableName(factTable.getName()),getSubDimensionIndex()));
  for (int i=0; i < dimensionIndex.length; i++) {
    if (dimensionIndex[i] != -1) {
      SelectedSubDimension selectedSubDimension=((SelectedSubDimension)selectedSubDim[i].get(currentSubDim[i]));
      selectedPosOfCurSegment[i]=new int[selectedSubDimension.end - selectedSubDimension.start + 1];
      for (int j=0; j < selectedSubDimension.end - selectedSubDimension.start + 1; j++) {
        selectedPosOfCurSegment[i][j]=((Integer)selectedPos[dimensionIndex[i]].get(selectedSubDimension.start + j)).intValue();
      }
    }
  }
  return true;
}","/** 
 * Moves down one segment from its current segment of the iterator.
 * @return
 * @throws IOException
 */
private boolean nextSegment() throws IOException {
  while (true) {
    if (stopSign.isStopped()) {
      return false;
    }
    if (!traversalor.next()) {
      return false;
    }
    currentSubDim=traversalor.getIntArray();
    String FTSUDocName=FTSUDocumentObjectNamingUtil.getDocumentObjectName(NamingUtil.getFactTableName(factTable.getName()),getSubDimensionIndex());
    if (!factTable.getDocumentManager().exist(FTSUDocName)) {
      continue;
    }
    currentSegment=factTable.getDocumentManager().openDocumentObject(FTSUDocName);
    for (int i=0; i < dimensionIndex.length; i++) {
      if (dimensionIndex[i] != -1) {
        SelectedSubDimension selectedSubDimension=((SelectedSubDimension)selectedSubDim[i].get(currentSubDim[i]));
        selectedPosOfCurSegment[i]=new int[selectedSubDimension.end - selectedSubDimension.start + 1];
        for (int j=0; j < selectedSubDimension.end - selectedSubDimension.start + 1; j++) {
          selectedPosOfCurSegment[i][j]=((Integer)selectedPos[dimensionIndex[i]].get(selectedSubDimension.start + j)).intValue();
        }
      }
    }
    break;
  }
  return true;
}",0.8235807860262009
69036,"public String getName(){
  return name;
}","public String getName(){
  if (name != null) {
    return name;
  }
 else   if (generateBy instanceof ReportElementDesign) {
    return ((ReportElementDesign)generateBy).getName();
  }
  return null;
}",0.3388429752066115
69037,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_GRIDLINES);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=10;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  glGeneral.marginHeight=4;
  glGeneral.marginWidth=4;
  FillLayout flMajor=new FillLayout();
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  Composite choiceComposite=new Composite(cmpContent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  choiceComposite.setLayoutData(gd);
  choiceComposite.setLayout(new GridLayout(2,true));
  cbHidden=new Button(choiceComposite,SWT.CHECK);
  cbHidden.setLayoutData(new GridData(GridData.FILL_BOTH));
  cbHidden.setText(Messages.getString(""String_Node_Str""));
  cbHidden.setSelection(!axis.getLineAttributes().isVisible());
  cbHidden.addSelectionListener(this);
  cbTickBetweenCategory=new Button(choiceComposite,SWT.CHECK);
  cbTickBetweenCategory.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  cbTickBetweenCategory.setText(Messages.getString(""String_Node_Str""));
  cbTickBetweenCategory.setSelection(axis.getScale().isTickBetweenCategories());
  cbTickBetweenCategory.addSelectionListener(this);
  cbTickBetweenCategory.setEnabled(axis.isCategoryAxis());
  cbTickBetweenCategory.setVisible((angleType == AngleType.X) && axis.isCategoryAxis());
  cmpGeneral=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_BOTH);
  gdCMPGeneral.horizontalSpan=2;
  gdCMPGeneral.grabExcessVerticalSpace=false;
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  Label lblColor=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLColor=new GridData(GridData.FILL);
  lblColor.setLayoutData(gdLBLColor);
  lblColor.setText(Messages.getString(""String_Node_Str""));
  ColorDefinition clrCurrent=null;
  if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) {
    clrCurrent=axis.getLineAttributes().getColor();
  }
  fccLine=new FillChooserComposite(cmpGeneral,SWT.NONE,getContext(),clrCurrent,false,false);
  GridData gdFCCLine=new GridData(GridData.FILL_BOTH);
  gdFCCLine.horizontalSpan=9;
  gdFCCLine.heightHint=fccLine.getPreferredSize().y;
  gdFCCLine.grabExcessVerticalSpace=false;
  fccLine.setLayoutData(gdFCCLine);
  fccLine.addListener(this);
  lblGridStepNum=new Label(cmpGeneral,SWT.NONE);
  GridData gdLblGridStepNum=new GridData(GridData.FILL);
  lblGridStepNum.setLayoutData(gdLblGridStepNum);
  lblGridStepNum.setText(Messages.getString(""String_Node_Str""));
  majGridStNum=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    majGridStNum.setLayoutData(gd);
    majGridStNum.setMinimum(1);
    majGridStNum.setSelection(getAxisForProcessing().getScale().getMajorGridsStepNumber());
    majGridStNum.addSelectionListener(this);
  }
  lblGridCount=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLGridCount=new GridData();
  lblGridCount.setLayoutData(gdLBLGridCount);
  lblGridCount.setText(Messages.getString(""String_Node_Str""));
  iscGridCount=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    iscGridCount.setLayoutData(gd);
    iscGridCount.setMinimum(1);
    iscGridCount.setSelection(getAxisForProcessing().getScale().getMinorGridsPerUnit());
    iscGridCount.addSelectionListener(this);
  }
  grpMajor=new Group(cmpContent,SWT.NONE);
  GridData gdGRPMajor=new GridData(GridData.FILL_HORIZONTAL);
  grpMajor.setLayoutData(gdGRPMajor);
  grpMajor.setText(Messages.getString(""String_Node_Str""));
  grpMajor.setLayout(flMajor);
  gacMajor=new GridAttributesComposite(grpMajor,SWT.NONE,getContext(),axis.getMajorGrid(),axis.getOrientation().getValue());
  gacMajor.addListener(this);
  grpMinor=new Group(cmpContent,SWT.NONE);
{
    grpMinor.setLayout(new FillLayout());
    GridData gdGRPMinor=new GridData(GridData.FILL_HORIZONTAL);
    grpMinor.setLayoutData(gdGRPMinor);
    grpMinor.setText(Messages.getString(""String_Node_Str""));
  }
  gacMinor=new GridAttributesComposite(grpMinor,SWT.NONE,getContext(),axis.getMinorGrid(),axis.getOrientation().getValue());
  gacMinor.addListener(this);
  setStateOfMajorGrid();
  setStateOfMinorGrid();
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_GRIDLINES);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=10;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  glGeneral.marginHeight=4;
  glGeneral.marginWidth=4;
  FillLayout flMajor=new FillLayout();
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  Composite choiceComposite=new Composite(cmpContent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  choiceComposite.setLayoutData(gd);
  choiceComposite.setLayout(new GridLayout(2,true));
  cbHidden=new Button(choiceComposite,SWT.CHECK);
  cbHidden.setLayoutData(new GridData(GridData.FILL_BOTH));
  cbHidden.setText(Messages.getString(""String_Node_Str""));
  cbHidden.setSelection(!axis.getLineAttributes().isVisible());
  cbHidden.addSelectionListener(this);
  cbTickBetweenCategory=new Button(choiceComposite,SWT.CHECK);
  cbTickBetweenCategory.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  cbTickBetweenCategory.setText(Messages.getString(""String_Node_Str""));
  cbTickBetweenCategory.setSelection(axis.getScale().isTickBetweenCategories());
  cbTickBetweenCategory.addSelectionListener(this);
  cbTickBetweenCategory.setEnabled(axis.isCategoryAxis());
  cbTickBetweenCategory.setVisible((angleType == AngleType.X) && axis.isCategoryAxis());
  cmpGeneral=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_BOTH);
  gdCMPGeneral.horizontalSpan=2;
  gdCMPGeneral.grabExcessVerticalSpace=false;
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  Label lblColor=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLColor=new GridData(GridData.FILL);
  lblColor.setLayoutData(gdLBLColor);
  lblColor.setText(Messages.getString(""String_Node_Str""));
  ColorDefinition clrCurrent=null;
  if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) {
    clrCurrent=axis.getLineAttributes().getColor();
  }
  fccLine=new FillChooserComposite(cmpGeneral,SWT.NONE,getContext(),clrCurrent,false,false,true,true,false);
  GridData gdFCCLine=new GridData(GridData.FILL_BOTH);
  gdFCCLine.horizontalSpan=9;
  gdFCCLine.heightHint=fccLine.getPreferredSize().y;
  gdFCCLine.grabExcessVerticalSpace=false;
  fccLine.setLayoutData(gdFCCLine);
  fccLine.addListener(this);
  lblGridStepNum=new Label(cmpGeneral,SWT.NONE);
  GridData gdLblGridStepNum=new GridData(GridData.FILL);
  lblGridStepNum.setLayoutData(gdLblGridStepNum);
  lblGridStepNum.setText(Messages.getString(""String_Node_Str""));
  majGridStNum=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    majGridStNum.setLayoutData(gd);
    majGridStNum.setMinimum(1);
    majGridStNum.setSelection(getAxisForProcessing().getScale().getMajorGridsStepNumber());
    majGridStNum.addSelectionListener(this);
  }
  lblGridCount=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLGridCount=new GridData();
  lblGridCount.setLayoutData(gdLBLGridCount);
  lblGridCount.setText(Messages.getString(""String_Node_Str""));
  iscGridCount=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    iscGridCount.setLayoutData(gd);
    iscGridCount.setMinimum(1);
    iscGridCount.setSelection(getAxisForProcessing().getScale().getMinorGridsPerUnit());
    iscGridCount.addSelectionListener(this);
  }
  grpMajor=new Group(cmpContent,SWT.NONE);
  GridData gdGRPMajor=new GridData(GridData.FILL_HORIZONTAL);
  grpMajor.setLayoutData(gdGRPMajor);
  grpMajor.setText(Messages.getString(""String_Node_Str""));
  grpMajor.setLayout(flMajor);
  gacMajor=new GridAttributesComposite(grpMajor,SWT.NONE,getContext(),axis.getMajorGrid(),axis.getOrientation().getValue());
  gacMajor.addListener(this);
  grpMinor=new Group(cmpContent,SWT.NONE);
{
    grpMinor.setLayout(new FillLayout());
    GridData gdGRPMinor=new GridData(GridData.FILL_HORIZONTAL);
    grpMinor.setLayoutData(gdGRPMinor);
    grpMinor.setText(Messages.getString(""String_Node_Str""));
  }
  gacMinor=new GridAttributesComposite(grpMinor,SWT.NONE,getContext(),axis.getMinorGrid(),axis.getOrientation().getValue());
  gacMinor.addListener(this);
  setStateOfMajorGrid();
  setStateOfMinorGrid();
  return cmpContent;
}",0.9982429167581814
69038,"public void createControl(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    cmpBasic.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  if (getAxisAngleType() == AngleType.X) {
    btnCategoryAxis=new Button(cmpBasic,SWT.CHECK);
{
      btnCategoryAxis.setText(Messages.getString(""String_Node_Str""));
      btnCategoryAxis.addSelectionListener(this);
      btnCategoryAxis.setSelection(getAxisForProcessing().isCategoryAxis());
      btnCategoryAxis.setEnabled(!AxisType.TEXT_LITERAL.equals(getAxisForProcessing().getType()));
    }
    btnReverse=new Button(cmpBasic,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnCategoryAxis.setLayoutData(gd);
      btnReverse.setText(Messages.getString(""String_Node_Str""));
      btnReverse.addSelectionListener(this);
      btnReverse.setSelection(((ChartWithAxes)getChart()).isReverseCategory());
      btnReverse.setEnabled(btnCategoryAxis.getSelection());
    }
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List<String> keys=null;
  IUIServiceProvider serviceprovider=getContext().getUIServiceProvider();
  if (serviceprovider != null) {
    keys=serviceprovider.getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE,-1,-1,keys,serviceprovider,getAxisForProcessing().getTitle().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=250;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
    btnTitleVisible.setSelection(getChart().getTitle().isVisible());
    btnTitleVisible.addSelectionListener(this);
    btnTitleVisible.setSelection(getAxisForProcessing().getTitle().isVisible());
  }
  if (getAxisAngleType() != AngleType.Z) {
    Label lblType=new Label(cmpBasic,SWT.NONE);
    lblType.setText(Messages.getString(""String_Node_Str""));
    cmbTypes=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gd=new GridData();
      gd.widthHint=220;
      cmbTypes.setLayoutData(gd);
      cmbTypes.addSelectionListener(this);
    }
    btnFormatSpecifier=new Button(cmpBasic,SWT.PUSH);
{
      GridData gdBTNFormatSpecifier=new GridData();
      ChartUIUtil.setChartImageButtonHeightByPlatform(gdBTNFormatSpecifier);
      gdBTNFormatSpecifier.horizontalIndent=-3;
      btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
      btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
      btnFormatSpecifier.addSelectionListener(this);
      btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    }
    if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
      Label lblOrigin=new Label(cmpBasic,SWT.NONE);
      lblOrigin.setText(Messages.getString(""String_Node_Str""));
      cmbOrigin=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
        GridData gd=new GridData();
        gd.widthHint=220;
        gd.horizontalSpan=2;
        cmbOrigin.setLayoutData(gd);
        cmbOrigin.addSelectionListener(this);
      }
      boolean bValueOrigin=false;
      if (getAxisForProcessing().getOrigin() != null) {
        if (getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL)) {
          bValueOrigin=true;
        }
      }
      lblValue=new Label(cmpBasic,SWT.NONE);
{
        lblValue.setText(Messages.getString(""String_Node_Str""));
        lblValue.setEnabled(bValueOrigin);
      }
      txtValue=createDataElementComposite(cmpBasic);
{
        GridData gd=new GridData();
        gd.widthHint=245;
        gd.horizontalSpan=2;
        txtValue.setLayoutData(gd);
        txtValue.addListener(this);
        txtValue.setEnabled(bValueOrigin);
      }
    }
    populateLists();
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getAxisForProcessing().getLabel().getCaption().getFont(),getAxisForProcessing().getLabel().getCaption().getColor(),false);
{
    GridData gdFDCFont=new GridData();
    gdFDCFont.widthHint=250;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
  }
  Composite cmpLabel=new Composite(cmpBasic,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    cmpLabel.setLayout(layout);
  }
  btnLabelVisible=new Button(cmpLabel,SWT.CHECK);
{
    btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    btnLabelVisible.setLayoutData(gd);
    btnLabelVisible.addSelectionListener(this);
    btnLabelVisible.setSelection(getAxisForProcessing().getLabel().isVisible());
  }
  cbStaggered=new Button(cmpLabel,SWT.CHECK);
{
    Axis ax=getAxisForProcessing();
    boolean bStaggered=ax.isSetStaggered() && ax.isStaggered();
    boolean bNot3D=!isChart3D(ax);
    cbStaggered.setSelection(bNot3D && bStaggered);
    cbStaggered.setText(Messages.getString(""String_Node_Str""));
    cbStaggered.addSelectionListener(this);
    cbStaggered.setEnabled(bNot3D);
  }
  if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
    Label l=new Label(cmpBasic,SWT.NONE);
    l.setText(Messages.getString(""String_Node_Str""));
    FieldAssistHelper.getInstance().addRequiredFieldIndicator(l);
    Composite cmpEditorWithUnit=new Composite(cmpBasic,SWT.NONE);
{
      GridData gd=new GridData();
      gd.widthHint=250;
      cmpEditorWithUnit.setLayoutData(gd);
      GridLayout layout=new GridLayout(2,false);
      layout.marginWidth=0;
      layout.marginHeight=0;
      cmpEditorWithUnit.setLayout(layout);
    }
    lneLabelSpan=new LocalizedNumberEditorComposite(cmpEditorWithUnit,SWT.BORDER);
{
      lneLabelSpan.setValue(getAxisForProcessing().getLabelSpan());
      lneLabelSpan.addModifyListener(this);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      lneLabelSpan.setLayoutData(gd);
      lneLabelSpan.setEnabled(getAxisForProcessing().isSetLabelSpan());
    }
    new Label(cmpEditorWithUnit,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    btnFixLabelSpan=new Button(cmpBasic,SWT.CHECK);
{
      btnFixLabelSpan.setText(Messages.getString(""String_Node_Str""));
      btnFixLabelSpan.addSelectionListener(this);
      btnFixLabelSpan.setSelection(getAxisForProcessing().isSetLabelSpan());
    }
  }
  createButtonGroup(cmpContent);
  setStateOfTitle();
  setStateOfLabel();
}","public void createControl(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    cmpBasic.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  if (getAxisAngleType() == AngleType.X) {
    btnCategoryAxis=new Button(cmpBasic,SWT.CHECK);
{
      btnCategoryAxis.setText(Messages.getString(""String_Node_Str""));
      btnCategoryAxis.addSelectionListener(this);
      btnCategoryAxis.setSelection(getAxisForProcessing().isCategoryAxis());
      btnCategoryAxis.setEnabled(!AxisType.TEXT_LITERAL.equals(getAxisForProcessing().getType()));
    }
    btnReverse=new Button(cmpBasic,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnCategoryAxis.setLayoutData(gd);
      btnReverse.setText(Messages.getString(""String_Node_Str""));
      btnReverse.addSelectionListener(this);
      btnReverse.setSelection(((ChartWithAxes)getChart()).isReverseCategory());
      btnReverse.setEnabled(btnCategoryAxis.getSelection());
    }
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List<String> keys=null;
  IUIServiceProvider serviceprovider=getContext().getUIServiceProvider();
  if (serviceprovider != null) {
    keys=serviceprovider.getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE,-1,-1,keys,serviceprovider,getAxisForProcessing().getTitle().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=250;
    gd.horizontalIndent=5;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
    btnTitleVisible.setSelection(getChart().getTitle().isVisible());
    btnTitleVisible.addSelectionListener(this);
    btnTitleVisible.setSelection(getAxisForProcessing().getTitle().isVisible());
  }
  if (getAxisAngleType() != AngleType.Z) {
    Label lblType=new Label(cmpBasic,SWT.NONE);
    lblType.setText(Messages.getString(""String_Node_Str""));
    cmbTypes=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gd=new GridData();
      gd.widthHint=220;
      gd.horizontalIndent=5;
      cmbTypes.setLayoutData(gd);
      cmbTypes.addSelectionListener(this);
    }
    btnFormatSpecifier=new Button(cmpBasic,SWT.PUSH);
{
      GridData gdBTNFormatSpecifier=new GridData();
      ChartUIUtil.setChartImageButtonHeightByPlatform(gdBTNFormatSpecifier);
      gdBTNFormatSpecifier.horizontalIndent=-3;
      btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
      btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
      btnFormatSpecifier.addSelectionListener(this);
      btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    }
    if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
      Label lblOrigin=new Label(cmpBasic,SWT.NONE);
      lblOrigin.setText(Messages.getString(""String_Node_Str""));
      cmbOrigin=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
        GridData gd=new GridData();
        gd.widthHint=220;
        gd.horizontalSpan=2;
        gd.horizontalIndent=5;
        cmbOrigin.setLayoutData(gd);
        cmbOrigin.addSelectionListener(this);
      }
      boolean bValueOrigin=false;
      if (getAxisForProcessing().getOrigin() != null) {
        if (getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL)) {
          bValueOrigin=true;
        }
      }
      lblValue=new Label(cmpBasic,SWT.NONE);
{
        lblValue.setText(Messages.getString(""String_Node_Str""));
        lblValue.setEnabled(bValueOrigin);
      }
      txtValue=createDataElementComposite(cmpBasic);
{
        GridData gd=new GridData();
        gd.widthHint=245;
        gd.horizontalSpan=2;
        gd.horizontalIndent=5;
        txtValue.setLayoutData(gd);
        txtValue.addListener(this);
        txtValue.setEnabled(bValueOrigin);
      }
    }
    populateLists();
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getAxisForProcessing().getLabel().getCaption().getFont(),getAxisForProcessing().getLabel().getCaption().getColor(),false);
{
    GridData gdFDCFont=new GridData();
    gdFDCFont.widthHint=250;
    gdFDCFont.horizontalIndent=5;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
  }
  Composite cmpLabel=new Composite(cmpBasic,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    cmpLabel.setLayout(layout);
  }
  btnLabelVisible=new Button(cmpLabel,SWT.CHECK);
{
    btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    btnLabelVisible.setLayoutData(gd);
    btnLabelVisible.addSelectionListener(this);
    btnLabelVisible.setSelection(getAxisForProcessing().getLabel().isVisible());
  }
  cbStaggered=new Button(cmpLabel,SWT.CHECK);
{
    Axis ax=getAxisForProcessing();
    boolean bStaggered=ax.isSetStaggered() && ax.isStaggered();
    boolean bNot3D=!isChart3D(ax);
    cbStaggered.setSelection(bNot3D && bStaggered);
    cbStaggered.setText(Messages.getString(""String_Node_Str""));
    cbStaggered.addSelectionListener(this);
    cbStaggered.setEnabled(bNot3D);
  }
  if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
    Label l=new Label(cmpBasic,SWT.NONE);
    l.setText(Messages.getString(""String_Node_Str""));
    FieldAssistHelper.getInstance().addRequiredFieldIndicator(l);
    Composite cmpEditorWithUnit=new Composite(cmpBasic,SWT.NONE);
{
      GridData gd=new GridData();
      gd.widthHint=250;
      cmpEditorWithUnit.setLayoutData(gd);
      GridLayout layout=new GridLayout(2,false);
      layout.marginWidth=0;
      layout.marginHeight=0;
      cmpEditorWithUnit.setLayout(layout);
    }
    lneLabelSpan=new LocalizedNumberEditorComposite(cmpEditorWithUnit,SWT.BORDER);
    new TextNumberEditorAssistField(lneLabelSpan.getTextControl(),null);
{
      lneLabelSpan.setValue(getAxisForProcessing().getLabelSpan());
      lneLabelSpan.addModifyListener(this);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalIndent=5;
      lneLabelSpan.setLayoutData(gd);
      lneLabelSpan.setEnabled(getAxisForProcessing().isSetLabelSpan());
    }
    new Label(cmpEditorWithUnit,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    btnFixLabelSpan=new Button(cmpBasic,SWT.CHECK);
{
      btnFixLabelSpan.setText(Messages.getString(""String_Node_Str""));
      btnFixLabelSpan.addSelectionListener(this);
      btnFixLabelSpan.setSelection(getAxisForProcessing().isSetLabelSpan());
    }
  }
  createButtonGroup(cmpContent);
  setStateOfTitle();
  setStateOfLabel();
}",0.9818726805595204
69039,"private void createCurrencySettingPart(Composite parent){
  Group setting;
  if (isFormStyle) {
    setting=FormWidgetFactory.getInstance().createGroup(parent,""String_Node_Str"");
  }
 else {
    setting=new Group(parent,SWT.NONE);
  }
  setting.setText(LABEL_CURRENCY_SETTINGS_GROUP);
  setting.setLayoutData(createGridData4Part());
  GridLayout layout=new GridLayout(2,false);
  layout.marginHeight=4;
  layout.verticalSpacing=5;
  setting.setLayout(layout);
  FormWidgetFactory.getInstance().createLabel(setting,isFormStyle).setText(LABEL_DECIMAL_PLACES);
  cPlacesChoice=new XCombo(setting,false,isFormStyle);
  ;
  cPlacesChoice.setItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  cPlacesChoice.setLayoutData(data);
  cPlacesChoice.addSelectionListener(mySelectionListener);
  cPlacesChoice.addModifyListener(myModifyListener);
  cPlacesChoice.addFocusListener(myFocusListener);
  cPlacesChoice.select(2);
  cUseSep=FormWidgetFactory.getInstance().createButton(setting,SWT.CHECK,isFormStyle);
  cUseSep.setText(LABEL_USE_1000S_SEPARATOR);
  data=new GridData();
  data.horizontalSpan=2;
  cUseSep.setLayoutData(data);
  cUseSep.addSelectionListener(mySelectionListener);
  cUseSpace=FormWidgetFactory.getInstance().createButton(setting,SWT.CHECK,isFormStyle);
  cUseSpace.setText(LABEL_USE_SYMBOL_SPACE);
  data=new GridData();
  data.horizontalSpan=2;
  cUseSpace.setLayoutData(data);
  cUseSpace.addSelectionListener(mySelectionListener);
  cUseSpace.setEnabled(false);
  FormWidgetFactory.getInstance().createLabel(setting,isFormStyle).setText(LABEL_CURRENCY_SYMBOL);
  cSymbolChoice=new XCombo(setting,true,isFormStyle);
  ;
  cSymbolChoice.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  cSymbolChoice.setItems(FormatCurrencyNumPattern.BUILT_IN_SYMBOLS);
  cSymbolChoice.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (cSymbolChoice.getSelectionIndex() == 0) {
        cSymPosChoice.deselectAll();
        cSymPosChoice.setEnabled(false);
        cUseSpace.setEnabled(false);
      }
 else {
        if (!cSymPosChoice.isEnabled()) {
          cSymPosChoice.setEnabled(true);
          cSymPosChoice.select(1);
        }
        cUseSpace.setEnabled(true);
      }
      updatePreview();
      notifyFormatChange();
    }
  }
);
  cSymbolChoice.select(0);
  FormWidgetFactory.getInstance().createLabel(setting,isFormStyle).setText(LABEL_SYMBOL_POSITION);
  cSymPosChoice=new XCombo(setting,true,isFormStyle);
  cSymPosChoice.setItems(new String[]{FormatNumberPattern.SYMBOL_POSITION_AFTER,FormatNumberPattern.SYMBOL_POSITION_BEFORE});
  cSymPosChoice.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cSymPosChoice.addSelectionListener(mySelectionListener);
  cSymPosChoice.setEnabled(false);
  Label label=FormWidgetFactory.getInstance().createLabel(setting,isFormStyle);
  label.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  label.setText(LABEL_NEGATIVE_NUMBERS);
  if (isFormStyle) {
    cNegNumChoice=FormWidgetFactory.getInstance().createList(setting,SWT.SINGLE);
  }
 else {
    cNegNumChoice=new List(setting,SWT.SINGLE | SWT.BORDER);
  }
  cNegNumChoice.add(""String_Node_Str"" + DEFAULT_PREVIEW_TEXT);
  cNegNumChoice.add(""String_Node_Str"" + DEFAULT_PREVIEW_TEXT + ""String_Node_Str"");
  data=new GridData(GridData.FILL_BOTH);
  cNegNumChoice.setLayoutData(data);
  cNegNumChoice.addSelectionListener(mySelectionListener);
  cNegNumChoice.select(0);
}","private void createCurrencySettingPart(Composite parent){
  Group setting;
  if (isFormStyle) {
    setting=FormWidgetFactory.getInstance().createGroup(parent,""String_Node_Str"");
  }
 else {
    setting=new Group(parent,SWT.NONE);
  }
  setting.setText(LABEL_CURRENCY_SETTINGS_GROUP);
  setting.setLayoutData(createGridData4Part());
  GridLayout layout=new GridLayout(2,false);
  layout.marginHeight=4;
  layout.verticalSpacing=5;
  setting.setLayout(layout);
  FormWidgetFactory.getInstance().createLabel(setting,isFormStyle).setText(LABEL_DECIMAL_PLACES);
  cPlacesChoice=new XCombo(setting,false,isFormStyle);
  ;
  cPlacesChoice.setItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  cPlacesChoice.setLayoutData(data);
  cPlacesChoice.addSelectionListener(mySelectionListener);
  cPlacesChoice.addModifyListener(myModifyListener);
  cPlacesChoice.addFocusListener(myFocusListener);
  cPlacesChoice.select(2);
  cUseSep=FormWidgetFactory.getInstance().createButton(setting,SWT.CHECK,isFormStyle);
  cUseSep.setText(LABEL_USE_1000S_SEPARATOR);
  data=new GridData();
  data.horizontalSpan=2;
  cUseSep.setLayoutData(data);
  cUseSep.addSelectionListener(mySelectionListener);
  cUseSpace=FormWidgetFactory.getInstance().createButton(setting,SWT.CHECK,isFormStyle);
  cUseSpace.setText(LABEL_USE_SYMBOL_SPACE);
  data=new GridData();
  data.horizontalSpan=2;
  cUseSpace.setLayoutData(data);
  cUseSpace.addSelectionListener(mySelectionListener);
  cUseSpace.setEnabled(false);
  FormWidgetFactory.getInstance().createLabel(setting,isFormStyle).setText(LABEL_CURRENCY_SYMBOL);
  cSymbolChoice=new XCombo(setting,true,isFormStyle);
  ;
  cSymbolChoice.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
  cSymbolChoice.setItems(FormatCurrencyNumPattern.BUILT_IN_SYMBOLS);
  cSymbolChoice.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (cSymbolChoice.getSelectionIndex() == 0) {
        cSymPosChoice.deselectAll();
        cSymPosChoice.setEnabled(false);
        cUseSpace.setEnabled(false);
      }
 else {
        if (!cSymPosChoice.isEnabled()) {
          cSymPosChoice.setEnabled(true);
          String defaultPosition=FormatCurrencyNumPattern.getDefaultSymbolPosition(getLocale());
          if (defaultPosition != null) {
            cSymPosChoice.setText(defaultPosition);
          }
 else {
            cSymPosChoice.select(1);
          }
        }
        if (!cUseSpace.isEnabled()) {
          cUseSpace.setEnabled(true);
          boolean defaultUseSpace=FormatCurrencyNumPattern.getDefaultUsingSymbolSpace(getLocale());
          cUseSpace.setSelection(defaultUseSpace);
        }
      }
      updatePreview();
      notifyFormatChange();
    }
  }
);
  cSymbolChoice.select(0);
  FormWidgetFactory.getInstance().createLabel(setting,isFormStyle).setText(LABEL_SYMBOL_POSITION);
  cSymPosChoice=new XCombo(setting,true,isFormStyle);
  cSymPosChoice.setItems(new String[]{FormatNumberPattern.SYMBOL_POSITION_AFTER,FormatNumberPattern.SYMBOL_POSITION_BEFORE});
  cSymPosChoice.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cSymPosChoice.addSelectionListener(mySelectionListener);
  cSymPosChoice.setEnabled(false);
  Label label=FormWidgetFactory.getInstance().createLabel(setting,isFormStyle);
  label.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  label.setText(LABEL_NEGATIVE_NUMBERS);
  if (isFormStyle) {
    cNegNumChoice=FormWidgetFactory.getInstance().createList(setting,SWT.SINGLE);
  }
 else {
    cNegNumChoice=new List(setting,SWT.SINGLE | SWT.BORDER);
  }
  cNegNumChoice.add(""String_Node_Str"" + DEFAULT_PREVIEW_TEXT);
  cNegNumChoice.add(""String_Node_Str"" + DEFAULT_PREVIEW_TEXT + ""String_Node_Str"");
  data=new GridData(GridData.FILL_BOTH);
  cNegNumChoice.setLayoutData(data);
  cNegNumChoice.addSelectionListener(mySelectionListener);
  cNegNumChoice.select(0);
}",0.9423347398030942
69040,"public String getColumnText(Object element,int columnIndex){
  if (element == dummyChoice) {
    if (columnIndex == 1) {
      return INPUT_PROPMT;
    }
    return ""String_Node_Str"";
  }
  ComputedColumnHandle handle=((ComputedColumnHandle)element);
  String text=null;
switch (columnIndex) {
case 1:
    text=handle.getName();
  break;
case 2:
text=handle.getDisplayNameID();
break;
case 3:
text=handle.getDisplayName();
break;
case 4:
text=ChoiceSetFactory.getDisplayNameFromChoiceSet(handle.getDataType(),DATA_TYPE_CHOICE_SET);
break;
case 5:
text=org.eclipse.birt.report.designer.data.ui.util.DataUtil.getAggregationExpression(handle);
break;
case 6:
try {
String function=handle.getAggregateFunction();
if (function != null) {
if (org.eclipse.birt.report.designer.data.ui.util.DataUtil.getAggregationManager().getAggregation(function) != null) text=org.eclipse.birt.report.designer.data.ui.util.DataUtil.getAggregationManager().getAggregation(function).getDisplayName();
}
}
 catch (BirtException e) {
ExceptionHandler.handle(e);
}
case 7:
text=handle.getFilterExpression();
break;
case 8:
String value=DEUtil.getAggregateOn(handle);
if (value == null) {
if (handle.getAggregateFunction() != null) {
text=ALL;
}
 else text=NONE_AGGREGATEON;
}
 else {
text=value;
}
break;
}
if (text == null) {
text=""String_Node_Str"";
}
return text;
}","public String getColumnText(Object element,int columnIndex){
  if (element == dummyChoice) {
    if (columnIndex == 1) {
      return INPUT_PROPMT;
    }
    return ""String_Node_Str"";
  }
  ComputedColumnHandle handle=((ComputedColumnHandle)element);
  String text=null;
switch (columnIndex) {
case 1:
    text=handle.getName();
  break;
case 2:
text=handle.getDisplayNameID();
break;
case 3:
text=handle.getDisplayName();
break;
case 4:
text=ChoiceSetFactory.getDisplayNameFromChoiceSet(handle.getDataType(),DATA_TYPE_CHOICE_SET);
break;
case 5:
text=org.eclipse.birt.report.designer.data.ui.util.DataUtil.getAggregationExpression(handle);
break;
case 6:
try {
String function=handle.getAggregateFunction();
if (function != null) {
if (org.eclipse.birt.report.designer.data.ui.util.DataUtil.getAggregationManager().getAggregation(function) != null) text=org.eclipse.birt.report.designer.data.ui.util.DataUtil.getAggregationManager().getAggregation(function).getDisplayName();
}
}
 catch (BirtException e) {
ExceptionHandler.handle(e);
}
break;
case 7:
text=handle.getFilterExpression();
break;
case 8:
String value=DEUtil.getAggregateOn(handle);
if (value == null) {
if (handle.getAggregateFunction() != null) {
text=ALL;
}
 else text=NONE_AGGREGATEON;
}
 else {
text=value;
}
break;
}
if (text == null) {
text=""String_Node_Str"";
}
return text;
}",0.997394864160774
69041,"private void createAggregationItem(Composite composite){
  SeriesDefinition baseSD=ChartUIUtil.getBaseSeriesDefinitions(context.getModel()).get(0);
  boolean enabled=ChartUIUtil.isGroupingSupported(context) && (PluginSettings.instance().inEclipseEnv() || baseSD.getGrouping().isEnabled());
  if (query.getGrouping() == null) {
    SeriesGrouping aggGrouping=SeriesGroupingImpl.create();
    aggGrouping.setAggregateExpression(seriesdefinition.getGrouping().getAggregateExpression());
    query.setGrouping(aggGrouping);
  }
  fAggEditorComposite=new AggregateEditorComposite(composite,seriesdefinition,context,enabled,query);
}","private void createAggregationItem(Composite composite){
  SeriesDefinition baseSD=ChartUIUtil.getBaseSeriesDefinitions(context.getModel()).get(0);
  boolean enabled=ChartUIUtil.isGroupingSupported(context) && (PluginSettings.instance().inEclipseEnv() || baseSD.getGrouping().isEnabled());
  if (query.getGrouping() == null) {
    SeriesGrouping aggGrouping=SeriesGroupingImpl.create();
    if (seriesdefinition.getGrouping() != null) {
      aggGrouping.setAggregateExpression(seriesdefinition.getGrouping().getAggregateExpression());
    }
    query.setGrouping(aggGrouping);
  }
  fAggEditorComposite=new AggregateEditorComposite(composite,seriesdefinition,context,enabled,query);
}",0.9557926829268292
69042,"private int transferDimensions(int srcAxis,int offset) throws SemanticException {
  int transfered=0;
  int dimCount=crosstab.getDimensionCount(srcAxis) - offset;
  if (dimCount > 0) {
    int targetAxis=CrosstabModelUtil.getOppositeAxisType(srcAxis);
    CrosstabViewHandle targetCrosstabView=crosstab.getCrosstabView(targetAxis);
    if (targetCrosstabView == null) {
      targetCrosstabView=crosstab.addCrosstabView(targetAxis);
    }
    DesignElementHandle targetViewHandle=targetCrosstabView.getModelHandle();
    for (int i=0; i < dimCount; i++) {
      DimensionViewHandle dv=crosstab.getDimension(srcAxis,offset + i);
      dv.getModelHandle().moveTo(targetViewHandle,ICrosstabViewConstants.VIEWS_PROP,i);
      transfered++;
    }
  }
  return transfered;
}","private int transferDimensions(int srcAxis,int offset) throws SemanticException {
  int transfered=0;
  int dimCount=crosstab.getDimensionCount(srcAxis) - offset;
  if (dimCount > 0) {
    int targetAxis=CrosstabModelUtil.getOppositeAxisType(srcAxis);
    CrosstabViewHandle targetCrosstabView=crosstab.getCrosstabView(targetAxis);
    if (targetCrosstabView == null) {
      targetCrosstabView=crosstab.addCrosstabView(targetAxis);
    }
    DesignElementHandle targetViewHandle=targetCrosstabView.getModelHandle();
    for (int i=0; i < dimCount; i++) {
      DimensionViewHandle dv=crosstab.getDimension(srcAxis,offset);
      dv.getModelHandle().moveTo(targetViewHandle,ICrosstabViewConstants.VIEWS_PROP,i);
      transfered++;
    }
  }
  return transfered;
}",0.9973890339425588
69043,"/** 
 * Returns value of aggregate function parameters.
 * @param orthSD
 * @param baseSD
 * @param orthQuery
 * @since 2.5
 */
public static String[] getAggFunParameters(SeriesDefinition orthSD,SeriesDefinition baseSD,Query orthQuery){
  if (baseSD.getGrouping() != null && baseSD.getGrouping().isEnabled()) {
    SeriesGrouping grouping=orthSD.getGrouping();
    if (grouping != null && grouping.isEnabled()) {
      if (orthQuery != null && orthQuery.getGrouping() != null) {
        return orthQuery.getGrouping().getAggregateParameters().toArray(new String[0]);
      }
      return grouping.getAggregateParameters().toArray(new String[0]);
    }
    return baseSD.getGrouping().getAggregateParameters().toArray(new String[0]);
  }
 else {
    if (orthQuery != null && orthQuery.getGrouping() != null) {
      return orthQuery.getGrouping().getAggregateParameters().toArray(new String[0]);
    }
    return orthSD.getGrouping().getAggregateParameters().toArray(new String[0]);
  }
}","/** 
 * Returns value of aggregate function parameters.
 * @param orthSD
 * @param baseSD
 * @param orthQuery
 * @since 2.5
 */
public static String[] getAggFunParameters(SeriesDefinition orthSD,SeriesDefinition baseSD,Query orthQuery){
  if (baseSD.getGrouping() != null && baseSD.getGrouping().isEnabled()) {
    SeriesGrouping grouping=orthSD.getGrouping();
    if (grouping != null && grouping.isEnabled()) {
      if (orthQuery != null && orthQuery.getGrouping() != null) {
        return orthQuery.getGrouping().getAggregateParameters().toArray(new String[0]);
      }
      return grouping.getAggregateParameters().toArray(new String[0]);
    }
    return baseSD.getGrouping().getAggregateParameters().toArray(new String[0]);
  }
 else {
    if (orthQuery != null && orthQuery.getGrouping() != null && orthQuery.getGrouping().isEnabled()) {
      return orthQuery.getGrouping().getAggregateParameters().toArray(new String[0]);
    }
    return orthSD.getGrouping().getAggregateParameters().toArray(new String[0]);
  }
}",0.9806259314456036
69044,"private String generateCallBackMethodName(String funcName){
  return ""String_Node_Str"" + funcName + ""String_Node_Str""+ ScriptHandler.BASE_VALUE+ ""String_Node_Str""+ ScriptHandler.ORTHOGONAL_VALUE+ ""String_Node_Str""+ ScriptHandler.SERIES_VALUE+ ""String_Node_Str""+ IActionRenderer.LEGEND_ITEM_TEXT+ ""String_Node_Str""+ IActionRenderer.LEGEND_ITEM_VALUE+ ""String_Node_Str""+ IActionRenderer.AXIS_LABEL+ ""String_Node_Str"";
}","private String generateCallBackMethodName(String funcName){
  return ""String_Node_Str"" + funcName + ""String_Node_Str""+ ScriptHandler.BASE_VALUE+ ""String_Node_Str""+ ScriptHandler.ORTHOGONAL_VALUE+ ""String_Node_Str""+ ScriptHandler.SERIES_VALUE+ ""String_Node_Str""+ IActionRenderer.LEGEND_ITEM_TEXT+ ""String_Node_Str""+ IActionRenderer.LEGEND_ITEM_VALUE+ ""String_Node_Str""+ IActionRenderer.AXIS_LABEL+ ""String_Node_Str""+ ScriptHandler.ID+ ""String_Node_Str""+ ScriptHandler.COMP_LIST+ ""String_Node_Str""+ ScriptHandler.LABEL_LIST+ ""String_Node_Str"";
}",0.86875
69045,"private void doEdit(Object structureOrHandle){
  FilterConditionBuilder dlg=new FilterConditionBuilder(((DataSetEditor)getContainer()).getShell(),this.getTitle(structureOrHandle),this.getTitle(structureOrHandle));
  dlg.setDataSetHandle((DataSetHandle)getContainer().getModel());
  dlg.setBindingParams(getParamBindingHandleArray());
  dlg.setInput(structureOrHandle);
  if (dlg.open() == Window.OK) {
    update(structureOrHandle);
  }
}","private void doEdit(Object structureOrHandle){
  FilterConditionBuilder dlg=new FilterConditionBuilder(((DataSetEditor)getContainer()).getShell(),this.getTitle(structureOrHandle),this.getTitle(structureOrHandle));
  dlg.setDataSetHandle((DataSetHandle)getContainer().getModel(),new DataSetExpressionProvider((DataSetHandle)getContainer().getModel()));
  dlg.setBindingParams(getParamBindingHandleArray());
  dlg.setInput(structureOrHandle);
  if (dlg.open() == Window.OK) {
    update(structureOrHandle);
  }
}",0.9240506329113924
69046,"private BaseFont createBaseFont(String physicalFont){
  BaseFont font=(BaseFont)fonts.get(physicalFont);
  if (font == null) {
    font=fontManager.createFont(physicalFont,fontStyle);
    fonts.put(physicalFont,font);
  }
  return font;
}","private BaseFont createBaseFont(String physicalFont){
  BaseFont font=(BaseFont)fonts.get(physicalFont);
  if (font == null) {
    if (fonts.keySet().contains(physicalFont)) {
      return null;
    }
    font=fontManager.createFont(physicalFont,fontStyle);
    fonts.put(physicalFont,font);
  }
  return font;
}",0.8654545454545455
69047,"public void start(BundleContext context) throws Exception {
  super.start(context);
  ODAProviderFactory.initeTheFactory(new ODABaseProviderFactory());
  BundleFactory.setBundleFactory(new PlatformBundleFactory());
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  ODAProviderFactory.initeTheFactory(new ODABaseProviderFactory());
  OdaExtensionLoaderFactory.initeFactory(new OdaBaseExtensionLoaderFactory());
  BundleFactory.setBundleFactory(new PlatformBundleFactory());
}",0.8454011741682974
69048,"private void doEdit(Object structureOrHandle){
  FilterConditionBuilder dlg=new FilterConditionBuilder(((DataSetEditor)getContainer()).getShell(),this.getTitle(structureOrHandle),this.getTitle(structureOrHandle));
  dlg.setDataSetHandle((DataSetHandle)getContainer().getModel());
  dlg.setBindingParams(getParamBindingHandleArray());
  if (dlg.open() == Window.OK) {
    update(structureOrHandle);
  }
}","private void doEdit(Object structureOrHandle){
  FilterConditionBuilder dlg=new FilterConditionBuilder(((DataSetEditor)getContainer()).getShell(),this.getTitle(structureOrHandle),this.getTitle(structureOrHandle));
  dlg.setDataSetHandle((DataSetHandle)getContainer().getModel());
  dlg.setBindingParams(getParamBindingHandleArray());
  dlg.setInput(structureOrHandle);
  if (dlg.open() == Window.OK) {
    update(structureOrHandle);
  }
}",0.958382877526754
69049,"private void linkToSalarParameterChanged(){
  String paramName=Utility.findIndex(linkToSalarParameter.getItems(),linkToSalarParameter.getText()) == 0 ? null : linkToSalarParameter.getText();
  if (paramName == null) {
    enableComposite(defaultValueComposite,linkToSalarParameter.isEnabled());
    defaultValue.setText(defaultValueString);
  }
 else {
    if (defaultValue.isEnabled())     defaultValueString=defaultValue.getText();
    structureHandle.setDefaultValue(""String_Node_Str"");
    enableComposite(defaultValueComposite,false);
    defaultValue.setText(NONE_DEFAULT_VALUE);
  }
}","private void linkToSalarParameterChanged(){
  String paramName=Utility.findIndex(linkToSalarParameter.getItems(),linkToSalarParameter.getText()) == 0 ? null : linkToSalarParameter.getText();
  if (paramName == null) {
    enableComposite(defaultValueComposite,linkToSalarParameter.isEnabled());
    defaultValue.setText(NONE_DEFAULT_VALUE.equals(defaultValueString) ? ""String_Node_Str"" : defaultValueString);
  }
 else {
    if (defaultValue.isEnabled())     defaultValueString=defaultValue.getText();
    structureHandle.setDefaultValue(""String_Node_Str"");
    enableComposite(defaultValueComposite,false);
    defaultValue.setText(NONE_DEFAULT_VALUE);
  }
}",0.5536
69050,"/** 
 */
private void moveTo(int rowIndex) throws BirtException {
  if (resultIterator == null) {
    if (queryResults == null)     return;
    resultIterator=queryResults.getResultIterator();
  }
  if (resultIterator == null) {
    return;
  }
  resultIterator.moveTo(rowIndex);
  value=resultIterator.getValue(boundColumnName);
  this.visitedValues.add(value);
}","/** 
 */
private void moveTo(int rowIndex) throws BirtException {
  if (resultIterator == null) {
    if (queryResults == null)     return;
    resultIterator=queryResults.getResultIterator();
  }
  if (resultIterator == null || resultIterator.isEmpty()) {
    return;
  }
  resultIterator.moveTo(rowIndex);
  value=resultIterator.getValue(boundColumnName);
  this.visitedValues.add(value);
}",0.9629629629629628
69051,"private void addColumnHints(JointDataSetHandle dsHandle) throws SemanticException {
  columnHintHandle=dsHandle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  if (columnHintHandle == null)   return;
  columnHintHandle.clearValue();
  List<ColumnHint> rightColumns=new ArrayList<ColumnHint>();
  HashMap<String,ColumnHint> resultMap=new HashMap<String,ColumnHint>();
  String leftDsName=this.leftDataSetName;
  String rightDsName=this.rightDataSetName;
  try {
    DataSessionContext context;
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,leftHandle.getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    IResultMetaData leftMetaData=session.getDataSetMetaData(this.leftDataSetName,false);
    IResultMetaData righMetaData;
    if (this.leftDataSetName != null && this.leftDataSetName.equalsIgnoreCase(this.rightDataSetName)) {
      leftDsName=leftDsName + ""String_Node_Str"";
      rightDsName=rightDsName + ""String_Node_Str"";
      righMetaData=leftMetaData;
    }
 else {
      righMetaData=session.getDataSetMetaData(this.rightDataSetName,false);
    }
    for (int i=1; i <= leftMetaData.getColumnCount(); i++) {
      ColumnHint item=createColumnHint(leftMetaData,i,leftDsName);
      resultMap.put((String)item.getProperty(null,ColumnHint.ALIAS_MEMBER),item);
    }
    for (int i=1; i <= righMetaData.getColumnCount(); i++) {
      ColumnHint item=createColumnHint(righMetaData,i,rightDsName);
      rightColumns.add(item);
    }
    session.shutdown();
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
  }
  resetColumnHintAlias(rightColumns,resultMap,leftDsName,rightDsName);
  for (Iterator<ColumnHint> iter=resultMap.values().iterator(); iter.hasNext(); ) {
    ColumnHint item=iter.next();
    if (item != null)     columnHintHandle.addItem(item);
  }
}","private void addColumnHints(JointDataSetHandle dsHandle) throws SemanticException {
  columnHintHandle=dsHandle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  if (columnHintHandle == null)   return;
  columnHintHandle.clearValue();
  List<ColumnHint> rightColumns=new ArrayList<ColumnHint>();
  HashMap<String,ColumnHint> resultMap=new HashMap<String,ColumnHint>();
  String leftDsName=this.leftDataSetName;
  String rightDsName=this.rightDataSetName;
  try {
    DataSessionContext context;
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,leftHandle.getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    IResultMetaData leftMetaData=session.getDataSetMetaData(leftHandle,false);
    IResultMetaData righMetaData;
    if (this.leftDataSetName != null && this.leftDataSetName.equalsIgnoreCase(this.rightDataSetName)) {
      leftDsName=leftDsName + ""String_Node_Str"";
      rightDsName=rightDsName + ""String_Node_Str"";
      righMetaData=leftMetaData;
    }
 else {
      righMetaData=session.getDataSetMetaData(rightHandle,false);
    }
    for (int i=1; i <= leftMetaData.getColumnCount(); i++) {
      ColumnHint item=createColumnHint(leftMetaData,i,leftDsName);
      resultMap.put((String)item.getProperty(null,ColumnHint.ALIAS_MEMBER),item);
    }
    for (int i=1; i <= righMetaData.getColumnCount(); i++) {
      ColumnHint item=createColumnHint(righMetaData,i,rightDsName);
      rightColumns.add(item);
    }
    session.shutdown();
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
  }
  resetColumnHintAlias(rightColumns,resultMap,leftDsName,rightDsName);
  for (Iterator<ColumnHint> iter=resultMap.values().iterator(); iter.hasNext(); ) {
    ColumnHint item=iter.next();
    if (item != null)     columnHintHandle.addItem(item);
  }
}",0.984332793084819
69052,"public void initialize() throws BirtException {
  if (content == null) {
    this.maxAvaWidth=width;
    return;
  }
  IStyle style=content.getStyle();
  calculateSpecifiedWidth(content);
  calculateSpecifiedHeight(content);
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
    if (specifiedWidth > 0) {
      setContentWidth(specifiedWidth);
    }
 else {
      if (parent != null) {
        this.width=parent.getMaxAvaWidth();
      }
    }
    this.maxAvaWidth=width;
  }
 else {
    buildProperties(content,context);
    if (specifiedWidth > 0) {
      setContentWidth(specifiedWidth);
    }
    if (specifiedHeight > 0) {
      setContentHeight(specifiedHeight);
    }
 else {
      if (parent != null) {
        setAllocatedWidth(parent.getMaxAvaWidth());
      }
    }
    maxAvaWidth=getContentWidth();
  }
  textAlign=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
  this.bookmark=content.getBookmark();
  this.action=content.getHyperlinkAction();
  parent.add(this);
}","public void initialize() throws BirtException {
  if (content == null) {
    this.maxAvaWidth=width;
    return;
  }
  IStyle style=content.getStyle();
  calculateSpecifiedWidth(content);
  calculateSpecifiedHeight(content);
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
    if (specifiedWidth > 0) {
      setContentWidth(specifiedWidth);
    }
 else {
      if (parent != null) {
        this.width=parent.getMaxAvaWidth();
      }
    }
    this.maxAvaWidth=width;
  }
 else {
    buildProperties(content,context);
    if (specifiedHeight > 0) {
      setContentHeight(specifiedHeight);
    }
    if (specifiedWidth > 0) {
      setContentWidth(specifiedWidth);
    }
 else {
      if (parent != null) {
        setAllocatedWidth(parent.getMaxAvaWidth());
      }
    }
    maxAvaWidth=getContentWidth();
  }
  textAlign=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
  this.bookmark=content.getBookmark();
  this.action=content.getHyperlinkAction();
  parent.add(this);
}",0.9511520737327188
69053,"public void setAggregation(Query query,SeriesDefinition sd){
  this.query=query;
  this.fSeriesDefi=sd;
  fGrouping=null;
  if (sd.getGrouping() != null && sd.getGrouping().isEnabled()) {
    fGrouping=sd.getGrouping().copyInstance();
  }
  if (query.getGrouping() != null && query.getGrouping().isEnabled()) {
    fGrouping=query.getGrouping().copyInstance();
  }
  if (fGrouping == null) {
    fGrouping=SeriesGroupingImpl.create();
  }
}","public void setAggregation(Query query,SeriesDefinition sd){
  this.query=query;
  this.fSeriesDefi=sd;
  fGrouping=null;
  if (sd != null && sd.getGrouping() != null && sd.getGrouping().isEnabled()) {
    fGrouping=sd.getGrouping().copyInstance();
  }
  if (query.getGrouping() != null && query.getGrouping().isEnabled()) {
    fGrouping=query.getGrouping().copyInstance();
  }
  if (fGrouping == null) {
    fGrouping=SeriesGroupingImpl.create();
  }
}",0.9843400447427292
69054,"public void widgetSelected(SelectionEvent e){
  Object source=e.getSource();
  if (source == fCmbAggregate) {
    String aggFunc=((String[])fCmbAggregate.getData())[fCmbAggregate.getSelectionIndex()];
    showAggregateParameters(aggFunc);
    if (AGG_FUNC_NONE.equals(aggFunc)) {
      fGrouping.setEnabled(false);
      fGrouping.setAggregateExpression(null);
    }
 else {
      fGrouping.setEnabled(true);
      fGrouping.setAggregateExpression(aggFunc);
    }
  }
 else   if (isAggParametersWidget(source)) {
    setAggParameter((Text)source);
  }
 else   if (isBuilderBtnWidget(source)) {
    try {
      Text txtArg=fExprBuilderWidgetsMap.get(source);
      String sExpr=fChartContext.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,txtArg.getText(),fChartContext.getExtendedItem(),fTitle);
      txtArg.setText(sExpr);
      setAggParameter(txtArg);
    }
 catch (    ChartException e1) {
      WizardBase.displayException(e1);
    }
  }
 else   if (source == fBtnOK) {
    if (query != null) {
      query.setGrouping(fGrouping);
      query.getGrouping().eAdapters().addAll(query.eAdapters());
      fSeriesDefi.setGrouping(null);
    }
 else {
      fSeriesDefi.setGrouping(fGrouping);
      fSeriesDefi.getGrouping().eAdapters().addAll(fSeriesDefi.eAdapters());
    }
    ChartUIUtil.checkAggregateType(fChartContext);
    DataDefinitionTextManager.getInstance().updateTooltip();
    closeAggregateEditor(getShell());
  }
 else   if (source == fBtnCancel) {
    closeAggregateEditor(getShell());
  }
}","public void widgetSelected(SelectionEvent e){
  Object source=e.getSource();
  if (source == fCmbAggregate) {
    String aggFunc=((String[])fCmbAggregate.getData())[fCmbAggregate.getSelectionIndex()];
    showAggregateParameters(aggFunc);
    if (AGG_FUNC_NONE.equals(aggFunc)) {
      fGrouping.setEnabled(false);
      fGrouping.setAggregateExpression(null);
    }
 else {
      fGrouping.setEnabled(true);
      fGrouping.setAggregateExpression(aggFunc);
    }
  }
 else   if (isAggParametersWidget(source)) {
    setAggParameter((Text)source);
  }
 else   if (isBuilderBtnWidget(source)) {
    try {
      Text txtArg=fExprBuilderWidgetsMap.get(source);
      String sExpr=fChartContext.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,txtArg.getText(),fChartContext.getExtendedItem(),fTitle);
      txtArg.setText(sExpr);
      setAggParameter(txtArg);
    }
 catch (    ChartException e1) {
      WizardBase.displayException(e1);
    }
  }
 else   if (source == fBtnOK) {
    if (query != null) {
      query.setGrouping(fGrouping);
      query.getGrouping().eAdapters().addAll(query.eAdapters());
      if (fSeriesDefi != null) {
        fSeriesDefi.setGrouping(null);
      }
    }
 else {
      fSeriesDefi.setGrouping(fGrouping);
      fSeriesDefi.getGrouping().eAdapters().addAll(fSeriesDefi.eAdapters());
    }
    ChartUIUtil.checkAggregateType(fChartContext);
    DataDefinitionTextManager.getInstance().updateTooltip();
    closeAggregateEditor(getShell());
  }
 else   if (source == fBtnCancel) {
    closeAggregateEditor(getShell());
  }
}",0.9862838915470494
69055,"/** 
 * @param scope
 * @param cx
 * @param iParamBind
 * @return
 * @throws DataException
 */
private Object evaluateInputParameterValue(Scriptable scope,Context cx,IInputParameterBinding iParamBind) throws DataException {
  Object evaluateResult=null;
  Scriptable evaluateScope=scope;
  try {
    evaluateResult=ExprEvaluateUtil.evaluateRawExpression2(iParamBind.getExpr(),this.outerScope == null ? evaluateScope : this.outerScope,context);
  }
 catch (  BirtException e) {
    DataException dataEx=new DataException(ResourceConstants.UNEXPECTED_ERROR,e);
    if (logger != null)     logger.logp(Level.FINE,PreparedOdaDSQuery.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw dataEx;
  }
  return evaluateResult;
}","/** 
 * @param scope
 * @param cx
 * @param iParamBind
 * @return
 * @throws DataException
 */
private Object evaluateInputParameterValue(Scriptable scope,Context cx,IInputParameterBinding iParamBind) throws DataException {
  Object evaluateResult=null;
  try {
    if (iParamBind.getExpr() instanceof IScriptExpression) {
      ScriptContext evalContext=this.outerScope == null ? context : context.newContext(this.outerScope);
      ICompiledScript compiledScript=evalContext.compile(""String_Node_Str"",null,0,((IScriptExpression)iParamBind.getExpr()).getText());
      evaluateResult=evalContext.evaluate(compiledScript);
    }
  }
 catch (  BirtException e) {
    DataException dataEx=new DataException(ResourceConstants.UNEXPECTED_ERROR,e);
    if (logger != null)     logger.logp(Level.FINE,PreparedOdaDSQuery.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw dataEx;
  }
  return evaluateResult;
}",0.7086614173228346
69056,"public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  if (ChartXTabUtil.isAxisChart(eih)) {
    DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=org.eclipse.birt.chart.reportitem.i18n.Messages.getString(""String_Node_Str"");
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : cm.copyInstance();
    if (cmClone != null) {
      maintainCompatibility(cmClone);
    }
    final Object[] applyData=new Object[3];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    ReportDataServiceProvider dataProvider=new ReportDataServiceProvider(extendedHandle);
    ChartReportItemUIFactory uiFactory=ChartReportItemUIFactory.instance();
    IChartDataSheet dataSheet=uiFactory.createDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=uiFactory.createWizardContext(cmClone,this,dataProvider,dataSheet);
    dataProvider.setWizardContext(context);
    if (dataProvider.checkState(IDataServiceProvider.PART_CHART)) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
      context.setEnabled(ChartUIConstants.TYPE_PIE,false);
      context.setEnabled(ChartUIConstants.TYPE_METER,false);
      context.setEnabled(ChartUIConstants.TYPE_STOCK,false);
      context.setEnabled(ChartUIConstants.TYPE_BUBBLE,false);
      context.setEnabled(ChartUIConstants.TYPE_DIFFERENCE,false);
      context.setEnabled(ChartUIConstants.TYPE_GANTT,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=context.getModel().copyInstance();
        applyData[1]=context.getOutputFormat();
        applyData[2]=context.isInheritColumnsOnly();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(crii.isLayoutDirectionRTL());
    context.setTextRtL(extendedHandle.isDirectionRTL());
    context.setResourceFinder(crii);
    context.setExternalizer(crii);
    Object of=extendedHandle.getProperty(ChartReportItemUtil.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else {
        context.setOutputFormat((String)of);
      }
    }
    context.setInheritColumnsOnly(extendedHandle.getBooleanProperty(ChartReportItemUtil.PROPERTY_INHERIT_COLUMNS));
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartAdapter.beginIgnoreNotifications();
    if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      dataProvider.update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
    }
    ChartWizard.clearExceptions();
    if (eih.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_NONE && !ChartReportItemUtil.isContainerInheritable(eih)) {
      String[] dataSets=dataProvider.getAllDataSets();
      if (dataProvider.getAllDataCubes().length == 0 && dataSets.length == 1) {
        dataProvider.setDataSet(dataSets[0]);
      }
    }
    context.setActionEvaluator(new BIRTActionEvaluator());
    ChartAdapter.endIgnoreNotifications();
    isChartWizardOpen=true;
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    isChartWizardOpen=false;
    if (contextResult != null && contextResult.getModel() != null) {
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat(),contextResult.isInheritColumnsOnly());
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)contextResult.getModel());
      }
      commandStack.commit();
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1],(Boolean)applyData[2]);
      if (dataProvider.isPartChart()) {
        commandStack.startTrans(TRANS_NAME);
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)applyData[0]);
        commandStack.commit();
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
    isChartWizardOpen=false;
  }
}","public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  if (ChartXTabUtil.isAxisChart(eih)) {
    DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=org.eclipse.birt.chart.reportitem.i18n.Messages.getString(""String_Node_Str"");
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : cm.copyInstance();
    if (cmClone != null) {
      maintainCompatibility(cmClone);
    }
    final Object[] applyData=new Object[3];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    ReportDataServiceProvider dataProvider=new ReportDataServiceProvider(extendedHandle);
    ChartReportItemUIFactory uiFactory=ChartReportItemUIFactory.instance();
    IChartDataSheet dataSheet=uiFactory.createDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=uiFactory.createWizardContext(cmClone,this,dataProvider,dataSheet);
    dataProvider.setWizardContext(context);
    if (dataProvider.checkState(IDataServiceProvider.PART_CHART)) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
      context.setEnabled(ChartUIConstants.TYPE_PIE,false);
      context.setEnabled(ChartUIConstants.TYPE_METER,false);
      context.setEnabled(ChartUIConstants.TYPE_STOCK,false);
      context.setEnabled(ChartUIConstants.TYPE_BUBBLE,false);
      context.setEnabled(ChartUIConstants.TYPE_DIFFERENCE,false);
      context.setEnabled(ChartUIConstants.TYPE_GANTT,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=context.getModel().copyInstance();
        applyData[1]=context.getOutputFormat();
        applyData[2]=context.isInheritColumnsOnly();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(crii.isLayoutDirectionRTL());
    context.setTextRtL(extendedHandle.isDirectionRTL());
    context.setResourceFinder(crii);
    context.setExternalizer(crii);
    Object of=extendedHandle.getProperty(ChartReportItemUtil.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else {
        context.setOutputFormat((String)of);
      }
    }
    context.setInheritColumnsOnly(extendedHandle.getBooleanProperty(ChartReportItemUtil.PROPERTY_INHERIT_COLUMNS));
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartAdapter.beginIgnoreNotifications();
    if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      dataProvider.update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
    }
    ChartWizard.clearExceptions();
    if (eih.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_NONE && eih.getContainer() == null) {
      String[] dataSets=dataProvider.getAllDataSets();
      if (dataProvider.getAllDataCubes().length == 0 && dataSets.length == 1) {
        dataProvider.setDataSet(dataSets[0]);
      }
    }
    context.setActionEvaluator(new BIRTActionEvaluator());
    ChartAdapter.endIgnoreNotifications();
    isChartWizardOpen=true;
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    isChartWizardOpen=false;
    if (contextResult != null && contextResult.getModel() != null) {
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat(),contextResult.isInheritColumnsOnly());
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)contextResult.getModel());
      }
      commandStack.commit();
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1],(Boolean)applyData[2]);
      if (dataProvider.isPartChart()) {
        commandStack.startTrans(TRANS_NAME);
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)applyData[0]);
        commandStack.commit();
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
    isChartWizardOpen=false;
  }
}",0.9937647455342096
69057,"private void placeComponents(){
  cmpContainer=new Composite(shell,SWT.NONE);
{
    GridLayout glDialog=new GridLayout();
    glDialog.numColumns=3;
    glDialog.marginWidth=6;
    glDialog.marginHeight=6;
    glDialog.horizontalSpacing=5;
    glDialog.verticalSpacing=2;
    cmpContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
    cmpContainer.setLayout(glDialog);
  }
  mcSheetHeading=new MessageComposite(cmpContainer,""String_Node_Str"",sMessage,""String_Node_Str"",true);
  GridData gdMSGHeading=new GridData(GridData.FILL_HORIZONTAL);
  gdMSGHeading.heightHint=22;
  gdMSGHeading.horizontalSpan=3;
  mcSheetHeading.setLayoutData(gdMSGHeading);
  mcSheetHeading.setBackground(display.getSystemColor(SWT.COLOR_WHITE));
  lblImage=new Label(cmpContainer,SWT.NONE);
  lblImage.setImage(display.getSystemImage(SWT.ICON_ERROR));
  lblImage.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  grpProblems=new Group(cmpContainer,SWT.NONE);
{
    GridData gdGrpProblems=new GridData(GridData.FILL_BOTH);
    gdGrpProblems.horizontalSpan=2;
    gdGrpProblems.heightHint=90;
    grpProblems.setLayoutData(gdGrpProblems);
    FillLayout layout=new FillLayout();
    layout.marginWidth=2;
    layout.marginHeight=2;
    grpProblems.setLayout(layout);
  }
  txtProblems=new Text(grpProblems,SWT.WRAP | SWT.V_SCROLL);
{
    txtProblems.setEditable(false);
  }
  new Label(cmpContainer,SWT.NONE);
  btnDetails=new Button(cmpContainer,SWT.TOGGLE);
  GridData gdBtnDetails=new GridData();
  gdBtnDetails.horizontalSpan=2;
  btnDetails.setLayoutData(gdBtnDetails);
  btnDetails.addSelectionListener(this);
  new Label(cmpContainer,SWT.NONE);
  slDetails=new StackLayout();
  cmpDetails=new Composite(cmpContainer,SWT.NONE);
  GridData gdCmpDetails=new GridData(GridData.FILL_BOTH);
  gdCmpDetails.horizontalSpan=2;
  cmpDetails.setLayoutData(gdCmpDetails);
  cmpDetails.setLayout(slDetails);
  cmpDummy=new Composite(cmpDetails,SWT.NONE);
  grpDetails=new Group(cmpDetails,SWT.NONE);
  FillLayout flSolutions=new FillLayout();
  flSolutions.marginWidth=5;
  flSolutions.marginHeight=5;
  grpDetails.setLayout(flSolutions);
  txtDetails=new Text(grpDetails,SWT.BORDER | SWT.WRAP | SWT.V_SCROLL);
  txtDetails.setEditable(false);
  GridLayout glButtons=new GridLayout();
  glButtons.numColumns=2;
  glButtons.horizontalSpacing=5;
  glButtons.marginHeight=5;
  glButtons.marginWidth=5;
  Composite cmpButtons=new Composite(cmpContainer,SWT.NONE);
  GridData gdCmpButtons=new GridData(GridData.FILL_HORIZONTAL);
  gdCmpButtons.horizontalSpan=3;
  cmpButtons.setLayoutData(gdCmpButtons);
  cmpButtons.setLayout(glButtons);
  btnOK=new Button(cmpButtons,SWT.NONE);
  GridData gdBtnOK=null;
  if (bError) {
    gdBtnOK=new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_END);
  }
 else {
    gdBtnOK=new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_CENTER);
  }
  btnOK.setLayoutData(gdBtnOK);
  btnOK.addSelectionListener(this);
  if (bError) {
    btnCancel=new Button(cmpButtons,SWT.NONE);
    GridData gdBtnCancel=new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_BEGINNING);
    btnCancel.setLayoutData(gdBtnCancel);
    btnCancel.addSelectionListener(this);
  }
  if (bError) {
    grpProblems.setText(Messages.getString(""String_Node_Str""));
    txtProblems.setText(sErrors);
    btnDetails.setText(Messages.getString(""String_Node_Str""));
    grpDetails.setText(Messages.getString(""String_Node_Str""));
    btnOK.setText(Messages.getString(""String_Node_Str""));
    btnCancel.setText(Messages.getString(""String_Node_Str""));
    if (sFixes == null || sFixes.length() == 0) {
      btnDetails.setEnabled(false);
    }
 else {
      btnDetails.setEnabled(true);
      txtDetails.setText(sFixes);
    }
  }
 else {
    txtProblems.setText(sExceptionMessage);
    btnDetails.setText(Messages.getString(""String_Node_Str""));
    grpDetails.setText(Messages.getString(""String_Node_Str""));
    btnOK.setText(Messages.getString(""String_Node_Str""));
    if (sTrace == null || sTrace.length() == 0) {
      btnDetails.setEnabled(false);
    }
 else {
      btnDetails.setEnabled(true);
      txtDetails.setText(sTrace);
    }
  }
  slDetails.topControl=cmpDummy;
  shell.setSize(shell.getSize().x,DEFAULT_HEIGHT);
  shell.layout();
}","private void placeComponents(){
  cmpContainer=new Composite(shell,SWT.NONE);
{
    GridLayout glDialog=new GridLayout(3,false);
    glDialog.marginWidth=6;
    glDialog.marginHeight=6;
    glDialog.horizontalSpacing=5;
    glDialog.verticalSpacing=2;
    cmpContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
    cmpContainer.setLayout(glDialog);
  }
  mcSheetHeading=new MessageComposite(cmpContainer,""String_Node_Str"",sMessage,""String_Node_Str"",true);
  GridData gdMSGHeading=new GridData(GridData.FILL_HORIZONTAL);
  gdMSGHeading.heightHint=22;
  gdMSGHeading.horizontalSpan=3;
  mcSheetHeading.setLayoutData(gdMSGHeading);
  mcSheetHeading.setBackground(display.getSystemColor(SWT.COLOR_WHITE));
  lblImage=new Label(cmpContainer,SWT.NONE);
  lblImage.setImage(display.getSystemImage(SWT.ICON_ERROR));
  grpProblems=new Group(cmpContainer,SWT.NONE);
{
    GridData gdGrpProblems=new GridData(GridData.FILL_HORIZONTAL);
    gdGrpProblems.horizontalSpan=2;
    gdGrpProblems.heightHint=60;
    grpProblems.setLayoutData(gdGrpProblems);
    GridLayout layout=new GridLayout();
    layout.marginWidth=2;
    layout.marginHeight=2;
    grpProblems.setLayout(layout);
  }
  txtProblems=new Text(grpProblems,SWT.WRAP | SWT.V_SCROLL);
{
    txtProblems.setEditable(false);
    txtProblems.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  new Label(cmpContainer,SWT.NONE);
  btnDetails=new Button(cmpContainer,SWT.TOGGLE);
  GridData gdBtnDetails=new GridData();
  gdBtnDetails.horizontalSpan=2;
  btnDetails.setLayoutData(gdBtnDetails);
  btnDetails.addSelectionListener(this);
  new Label(cmpContainer,SWT.NONE);
  slDetails=new StackLayout();
  cmpDetails=new Composite(cmpContainer,SWT.NONE);
  GridData gdCmpDetails=new GridData(GridData.FILL_BOTH);
  gdCmpDetails.horizontalSpan=2;
  cmpDetails.setLayoutData(gdCmpDetails);
  cmpDetails.setLayout(slDetails);
  cmpDummy=new Composite(cmpDetails,SWT.NONE);
  grpDetails=new Group(cmpDetails,SWT.NONE);
  FillLayout flSolutions=new FillLayout();
  flSolutions.marginWidth=5;
  flSolutions.marginHeight=5;
  grpDetails.setLayout(flSolutions);
  txtDetails=new Text(grpDetails,SWT.BORDER | SWT.WRAP | SWT.V_SCROLL);
  txtDetails.setEditable(false);
  GridLayout glButtons=new GridLayout();
  glButtons.numColumns=2;
  glButtons.horizontalSpacing=5;
  glButtons.marginHeight=5;
  glButtons.marginWidth=5;
  Composite cmpButtons=new Composite(cmpContainer,SWT.NONE);
  GridData gdCmpButtons=new GridData(GridData.FILL_HORIZONTAL);
  gdCmpButtons.horizontalSpan=3;
  cmpButtons.setLayoutData(gdCmpButtons);
  cmpButtons.setLayout(glButtons);
  btnOK=new Button(cmpButtons,SWT.NONE);
  GridData gdBtnOK=null;
  if (bError) {
    gdBtnOK=new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_END);
  }
 else {
    gdBtnOK=new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_CENTER);
  }
  btnOK.setLayoutData(gdBtnOK);
  btnOK.addSelectionListener(this);
  if (bError) {
    btnCancel=new Button(cmpButtons,SWT.NONE);
    GridData gdBtnCancel=new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_BEGINNING);
    btnCancel.setLayoutData(gdBtnCancel);
    btnCancel.addSelectionListener(this);
  }
  if (bError) {
    grpProblems.setText(Messages.getString(""String_Node_Str""));
    txtProblems.setText(sErrors);
    btnDetails.setText(Messages.getString(""String_Node_Str""));
    grpDetails.setText(Messages.getString(""String_Node_Str""));
    btnOK.setText(Messages.getString(""String_Node_Str""));
    btnCancel.setText(Messages.getString(""String_Node_Str""));
    if (sFixes == null || sFixes.length() == 0) {
      btnDetails.setEnabled(false);
    }
 else {
      btnDetails.setEnabled(true);
      txtDetails.setText(sFixes);
    }
  }
 else {
    txtProblems.setText(sExceptionMessage);
    btnDetails.setText(Messages.getString(""String_Node_Str""));
    grpDetails.setText(Messages.getString(""String_Node_Str""));
    btnOK.setText(Messages.getString(""String_Node_Str""));
    if (sTrace == null || sTrace.length() == 0) {
      btnDetails.setEnabled(false);
    }
 else {
      btnDetails.setEnabled(true);
      txtDetails.setText(sTrace);
    }
  }
  slDetails.topControl=cmpDummy;
  shell.setSize(shell.getSize().x,DEFAULT_HEIGHT);
  shell.layout();
}",0.9319703912583716
69058,"/** 
 * @param queryResults
 * @param queryScope
 * @throws BirtException 
 */
private ResultIterator(QueryResults queryResults,ExprManager exprManager,Scriptable queryScope,Scriptable parentScope) throws BirtException {
  this.queryResults=queryResults;
  this.exprManager=exprManager;
  this.queryScope=queryScope;
  this.jsDummyRowObject=new JSDummyRowObject(exprManager,queryScope,parentScope,session.getEngineContext().getScriptContext());
  queryScope.put(""String_Node_Str"",queryScope,jsDummyRowObject);
  this.getRdSaveUtil().doSaveStart();
  exprValueMap=new HashMap();
  Map exprMap=getBindingMap(exprManager.getBindingExprs());
  Iterator it=exprMap.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Entry)it.next();
    String exprName=(String)entry.getKey();
    IBaseExpression baseExpr=(IBaseExpression)entry.getValue();
    Object exprValue=ExprEvaluateUtil.evaluateRawExpression(baseExpr,queryScope,session.getEngineContext().getScriptContext());
    exprValueMap.put(exprName,exprValue);
  }
  this.getRdSaveUtil().doSaveExpr(exprValueMap);
  if (needCache()) {
    try {
      createCacheOutputStream();
      saveMetaData();
      IOUtil.writeInt(this.rowOutputStream,1);
      cacheRow();
    }
 catch (    IOException e) {
      throw new DataException(ResourceConstants.CREATE_CACHE_TEMPFILE_ERROR);
    }
  }
}","/** 
 * @param queryResults
 * @param queryScope
 * @throws BirtException 
 */
private ResultIterator(QueryResults queryResults,ExprManager exprManager,Scriptable queryScope,Scriptable parentScope) throws BirtException {
  this.queryResults=queryResults;
  this.exprManager=exprManager;
  this.queryScope=queryScope;
  this.jsDummyRowObject=new JSDummyRowObject(exprManager,queryScope,parentScope,session.getEngineContext().getScriptContext());
  queryScope.put(""String_Node_Str"",queryScope,jsDummyRowObject);
  this.getRdSaveUtil().doSaveStart();
  exprValueMap=new HashMap();
  Map exprMap=getBindingMap(exprManager.getBindingExprs());
  Iterator it=exprMap.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Entry)it.next();
    String exprName=(String)entry.getKey();
    IBaseExpression baseExpr=(IBaseExpression)entry.getValue();
    Object exprValue=ExprEvaluateUtil.evaluateRawExpression(baseExpr,queryScope,session.getEngineContext().getScriptContext());
    IBinding binding=exprManager.getBinding(exprName);
    if (binding.getDataType() != baseExpr.getDataType())     exprValue=DataTypeUtil.convert(exprValue,binding.getDataType());
    exprValueMap.put(exprName,exprValue);
  }
  this.getRdSaveUtil().doSaveExpr(exprValueMap);
  if (needCache()) {
    try {
      createCacheOutputStream();
      saveMetaData();
      IOUtil.writeInt(this.rowOutputStream,1);
      cacheRow();
    }
 catch (    IOException e) {
      throw new DataException(ResourceConstants.CREATE_CACHE_TEMPFILE_ERROR);
    }
  }
}",0.937261698440208
69059,"public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  if (ChartXTabUtil.isAxisChart(eih)) {
    DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=org.eclipse.birt.chart.reportitem.i18n.Messages.getString(""String_Node_Str"");
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : cm.copyInstance();
    if (cmClone != null) {
      maintainCompatibility(cmClone);
    }
    final Object[] applyData=new Object[3];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    ReportDataServiceProvider dataProvider=new ReportDataServiceProvider(extendedHandle);
    ChartReportItemUIFactory uiFactory=ChartReportItemUIFactory.instance();
    IChartDataSheet dataSheet=uiFactory.createDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=uiFactory.createWizardContext(cmClone,this,dataProvider,dataSheet);
    dataProvider.setWizardContext(context);
    if (dataProvider.checkState(IDataServiceProvider.PART_CHART)) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
      context.setEnabled(ChartUIConstants.TYPE_PIE,false);
      context.setEnabled(ChartUIConstants.TYPE_METER,false);
      context.setEnabled(ChartUIConstants.TYPE_STOCK,false);
      context.setEnabled(ChartUIConstants.TYPE_BUBBLE,false);
      context.setEnabled(ChartUIConstants.TYPE_DIFFERENCE,false);
      context.setEnabled(ChartUIConstants.TYPE_GANTT,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=context.getModel().copyInstance();
        applyData[1]=context.getOutputFormat();
        applyData[2]=context.isInheritColumnsOnly();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(crii.isLayoutDirectionRTL());
    context.setTextRtL(extendedHandle.isDirectionRTL());
    context.setResourceFinder(crii);
    context.setExternalizer(crii);
    Object of=extendedHandle.getProperty(ChartReportItemUtil.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else {
        context.setOutputFormat((String)of);
      }
    }
    context.setInheritColumnsOnly(extendedHandle.getBooleanProperty(ChartReportItemUtil.PROPERTY_INHERIT_COLUMNS));
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartAdapter.beginIgnoreNotifications();
    if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      dataProvider.update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
    }
    ChartWizard.clearExceptions();
    if (eih.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_NONE && eih.getContainer() == null) {
      String[] dataSets=dataProvider.getAllDataSets();
      if (dataProvider.getAllDataCubes().length == 0 && dataSets.length == 1) {
        dataProvider.setDataSet(dataSets[0]);
      }
    }
    context.setActionEvaluator(new BIRTActionEvaluator());
    ChartAdapter.endIgnoreNotifications();
    isChartWizardOpen=true;
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    isChartWizardOpen=false;
    if (contextResult != null && contextResult.getModel() != null) {
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat(),contextResult.isInheritColumnsOnly());
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)contextResult.getModel());
      }
      commandStack.commit();
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1],(Boolean)applyData[2]);
      if (dataProvider.isPartChart()) {
        commandStack.startTrans(TRANS_NAME);
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)applyData[0]);
        commandStack.commit();
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
    isChartWizardOpen=false;
  }
}","public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  if (ChartXTabUtil.isAxisChart(eih)) {
    DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=org.eclipse.birt.chart.reportitem.i18n.Messages.getString(""String_Node_Str"");
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : cm.copyInstance();
    if (cmClone != null) {
      maintainCompatibility(cmClone);
    }
    final Object[] applyData=new Object[3];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    ReportDataServiceProvider dataProvider=new ReportDataServiceProvider(extendedHandle);
    ChartReportItemUIFactory uiFactory=ChartReportItemUIFactory.instance();
    IChartDataSheet dataSheet=uiFactory.createDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=uiFactory.createWizardContext(cmClone,this,dataProvider,dataSheet);
    dataProvider.setWizardContext(context);
    if (dataProvider.checkState(IDataServiceProvider.PART_CHART)) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
      context.setEnabled(ChartUIConstants.TYPE_PIE,false);
      context.setEnabled(ChartUIConstants.TYPE_METER,false);
      context.setEnabled(ChartUIConstants.TYPE_STOCK,false);
      context.setEnabled(ChartUIConstants.TYPE_BUBBLE,false);
      context.setEnabled(ChartUIConstants.TYPE_DIFFERENCE,false);
      context.setEnabled(ChartUIConstants.TYPE_GANTT,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=context.getModel().copyInstance();
        applyData[1]=context.getOutputFormat();
        applyData[2]=context.isInheritColumnsOnly();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(crii.isLayoutDirectionRTL());
    context.setTextRtL(extendedHandle.isDirectionRTL());
    context.setResourceFinder(crii);
    context.setExternalizer(crii);
    Object of=extendedHandle.getProperty(ChartReportItemUtil.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else {
        context.setOutputFormat((String)of);
      }
    }
    context.setInheritColumnsOnly(extendedHandle.getBooleanProperty(ChartReportItemUtil.PROPERTY_INHERIT_COLUMNS));
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartAdapter.beginIgnoreNotifications();
    if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      dataProvider.update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
    }
    ChartWizard.clearExceptions();
    if (eih.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_NONE && eih.getContainer() instanceof ModuleHandle) {
      String[] dataSets=dataProvider.getAllDataSets();
      if (dataProvider.getAllDataCubes().length == 0 && dataSets.length == 1) {
        dataProvider.setDataSet(dataSets[0]);
      }
    }
    context.setActionEvaluator(new BIRTActionEvaluator());
    ChartAdapter.endIgnoreNotifications();
    isChartWizardOpen=true;
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    isChartWizardOpen=false;
    if (contextResult != null && contextResult.getModel() != null) {
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat(),contextResult.isInheritColumnsOnly());
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)contextResult.getModel());
      }
      commandStack.commit();
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1],(Boolean)applyData[2]);
      if (dataProvider.isPartChart()) {
        commandStack.startTrans(TRANS_NAME);
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)applyData[0]);
        commandStack.commit();
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
    isChartWizardOpen=false;
  }
}",0.9974709155285788
69060,"/** 
 * create joint data set
 * @return
 * @throws SemanticException
 */
private DataSetHandle createJointDataSet() throws SemanticException {
  String dataSetName=""String_Node_Str"";
  if (nameEditor != null)   dataSetName=nameEditor.getText();
  JointDataSetHandle dsHandle=Utility.newJointDataSet(dataSetName);
  if (leftDataSetName.equals(rightDataSetName))   dsHandle.addDataSet(leftDataSetName);
 else {
    dsHandle.addDataSet(leftDataSetName);
    dsHandle.addDataSet(rightDataSetName);
  }
  setParameters(dsHandle);
  propertyHandle=dsHandle.getPropertyHandle(JointDataSet.JOIN_CONDITONS_PROP);
  propertyHandle.addItem(createJoinCondition());
  return dsHandle;
}","/** 
 * create joint data set
 * @return
 * @throws SemanticException
 */
private DataSetHandle createJointDataSet() throws SemanticException {
  String dataSetName=""String_Node_Str"";
  if (nameEditor != null)   dataSetName=nameEditor.getText();
  JointDataSetHandle dsHandle=Utility.newJointDataSet(dataSetName);
  if (leftDataSetName.equals(rightDataSetName))   dsHandle.addDataSet(leftDataSetName);
 else {
    dsHandle.addDataSet(leftDataSetName);
    dsHandle.addDataSet(rightDataSetName);
  }
  setParameters(dsHandle);
  propertyHandle=dsHandle.getPropertyHandle(JointDataSet.JOIN_CONDITONS_PROP);
  propertyHandle.addItem(createJoinCondition());
  addColumnHints(dsHandle);
  return dsHandle;
}",0.9752906976744186
69061,"/** 
 * @return
 * @throws SemanticException
 */
private boolean modifyJointCondition() throws SemanticException {
  JointDataSetHandle handle=null;
  if (leftDataSetName == null || rightDataSetName == null)   return false;
  if (propertyPageContainer instanceof DataSetEditor) {
    handle=(JointDataSetHandle)((DataSetEditor)propertyPageContainer).getModel();
    List datasetName=handle.getDataSetNames();
    for (int i=0; i < datasetName.size(); i++) {
      try {
        handle.removeDataSet((String)datasetName.get(i));
      }
 catch (      SemanticException e) {
      }
    }
    if (leftDataSetName.equals(rightDataSetName))     handle.addDataSet(leftDataSetName);
 else {
      handle.addDataSet(leftDataSetName);
      handle.addDataSet(rightDataSetName);
    }
    setParameters(handle);
  }
  if (propertyHandle != null) {
    JoinCondition condition=createJoinCondition();
    propertyHandle.removeItem(0);
    propertyHandle.addItem(condition);
    return true;
  }
 else   return false;
}","/** 
 * @return
 * @throws SemanticException
 */
private boolean modifyJointCondition() throws SemanticException {
  JointDataSetHandle handle=null;
  if (leftDataSetName == null || rightDataSetName == null)   return false;
  if (propertyPageContainer instanceof DataSetEditor) {
    handle=(JointDataSetHandle)((DataSetEditor)propertyPageContainer).getModel();
    List datasetName=handle.getDataSetNames();
    for (int i=0; i < datasetName.size(); i++) {
      try {
        handle.removeDataSet((String)datasetName.get(i));
      }
 catch (      SemanticException e) {
      }
    }
    if (leftDataSetName.equals(rightDataSetName))     handle.addDataSet(leftDataSetName);
 else {
      handle.addDataSet(leftDataSetName);
      handle.addDataSet(rightDataSetName);
    }
    setParameters(handle);
  }
  addColumnHints(handle);
  if (propertyHandle != null) {
    JoinCondition condition=createJoinCondition();
    propertyHandle.removeItem(0);
    propertyHandle.addItem(condition);
    return true;
  }
 else   return false;
}",0.9872549019607844
69062,"/** 
 * populate output columns
 * @throws BirtException
 */
private void populateOutputColums() throws BirtException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
  ModuleHandle handle=((DataSetEditor)getContainer()).getHandle().getModuleHandle();
  DataSessionContext context;
  if (handle instanceof ReportDesignHandle) {
    Map dataSetMap=new HashMap();
    Map dataSourceMap=new HashMap();
    try {
      EngineConfig ec=new EngineConfig();
      ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      DataSetUIUtil.clearPropertyBindingMap(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)handle),handle);
      DataRequestSession session=engineTask.getDataSession();
      engineTask.run();
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      viewer.getViewer().setInput(viewDatas);
      engineTask.close();
      engine.destroy();
    }
  finally {
      DataSetUIUtil.resetPropertyBinding(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
    }
  }
 else {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
    if (viewDatas == null) {
      viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
    }
    viewer.getViewer().setInput(viewDatas);
    session.shutdown();
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
}","/** 
 * populate output columns
 * @throws BirtException
 */
private void populateOutputColums() throws BirtException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
  ModuleHandle handle=((DataSetEditor)getContainer()).getHandle().getModuleHandle();
  DataSessionContext context;
  if (handle instanceof ReportDesignHandle) {
    Map dataSetMap=new HashMap();
    Map dataSourceMap=new HashMap();
    try {
      EngineConfig ec=new EngineConfig();
      ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      DataSetUIUtil.clearPropertyBindingMap(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)handle),handle);
      DataRequestSession session=engineTask.getDataSession();
      engineTask.run();
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      if (((DataSetEditor)getContainer()).getHandle() instanceof JointDataSetHandle) {
        PropertyHandle properyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
        if (properyHandle != null) {
          for (int i=0; i < viewDatas.length; i++) {
            for (Iterator columns=properyHandle.iterator(); columns.hasNext(); ) {
              ColumnHintHandle column=(ColumnHintHandle)columns.next();
              if (viewDatas[i].getName().equalsIgnoreCase(column.getColumnName())) {
                viewDatas[i].setAlias(column.getAlias());
                break;
              }
            }
          }
        }
      }
      viewer.getViewer().setInput(viewDatas);
      engineTask.close();
      engine.destroy();
    }
  finally {
      DataSetUIUtil.resetPropertyBinding(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
    }
  }
 else {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
    if (viewDatas == null) {
      viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
    }
    viewer.getViewer().setInput(viewDatas);
    session.shutdown();
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
}",0.8749773837524878
69063,"private void outputImageSource(ArrayImageSource imageSource){
  int originalWidth=imageSource.getWidth();
  int originalHeight=imageSource.getHeight();
  try {
    ByteArrayOutputStream byteOut=new ByteArrayOutputStream();
    DeflaterOutputStream deflateOut=new DeflaterOutputStream(byteOut,new Deflater(Deflater.DEFAULT_COMPRESSION));
    for (int i=0; i < originalHeight; i++) {
      for (int j=0; j < originalWidth; j++) {
        int pixel=imageSource.getRGB(j,i);
        int alpha=(pixel >> 24) & 0xff;
        int red=(pixel >> 16) & 0xff;
        int green=(pixel >> 8) & 0xff;
        int blue=pixel & 0xff;
        deflateOut.write(transferColor(alpha,red));
        deflateOut.write(transferColor(alpha,green));
        deflateOut.write(transferColor(alpha,blue));
      }
    }
    deflateOut.finish();
    deflateOut.close();
    byte[] byteArray=byteOut.toByteArray();
    byteOut.close();
    out.print(Util.toHexString(byteArray) + ""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private void outputImageSource(ArrayImageSource imageSource){
  int originalWidth=imageSource.getWidth();
  int originalHeight=imageSource.getHeight();
  try {
    ByteArrayOutputStream originalSource=new ByteArrayOutputStream();
    for (int i=0; i < originalHeight; i++) {
      for (int j=0; j < originalWidth; j++) {
        int pixel=imageSource.getRGB(j,i);
        int alpha=(pixel >> 24) & 0xff;
        int red=(pixel >> 16) & 0xff;
        int green=(pixel >> 8) & 0xff;
        int blue=pixel & 0xff;
        originalSource.write(transferColor(alpha,red));
        originalSource.write(transferColor(alpha,green));
        originalSource.write(transferColor(alpha,blue));
      }
    }
    byte[] byteArray=deflate(originalSource.toByteArray());
    out.print(Util.toHexString(byteArray) + ""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.7652901202300052
69064,"/** 
 * @return <code>true</code> if the command can be executed
 */
public boolean canExecute(){
  if (cloneElement == null) {
    return false;
  }
  DesignElementHandle childHandle=sourceHandle;
  if (childHandle == null) {
    if (cloneElement instanceof IDesignElement) {
      childHandle=((IDesignElement)cloneElement).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle().getModule());
    }
 else     if (cloneElement instanceof IElementCopy) {
      childHandle=((IElementCopy)cloneElement).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle());
    }
  }
  return DNDUtil.handleValidateTargetCanContain(newContainer,childHandle) && DNDUtil.handleValidateTargetCanContainMore(newContainer,1);
}","/** 
 * @return <code>true</code> if the command can be executed
 */
public boolean canExecute(){
  if (cloneElement == null) {
    return false;
  }
  if (newContainer instanceof PropertyHandle && cloneElement instanceof IElementCopy && newContainer instanceof DesignElementHandle) {
    PropertyHandle targetHandle=(PropertyHandle)newContainer;
    return CopyUtil.canPaste((IElementCopy)cloneElement,(DesignElementHandle)newContainer,targetHandle.getPropertyDefn().getName());
  }
  DesignElementHandle childHandle=sourceHandle;
  if (childHandle == null) {
    if (cloneElement instanceof IDesignElement) {
      childHandle=((IDesignElement)cloneElement).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle().getModule());
    }
 else     if (cloneElement instanceof IElementCopy) {
      childHandle=((IElementCopy)cloneElement).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle());
    }
  }
  return DNDUtil.handleValidateTargetCanContain(newContainer,childHandle) && DNDUtil.handleValidateTargetCanContainMore(newContainer,1);
}",0.8148558758314856
69065,"/** 
 * Validates target elements can contain transfer data. <p> If transfer data is single element, validate target's container also
 * @param targetObj target elements
 * @param transferData transfer data,single object or array are permitted
 * @param validateContainer validate target's container can contain
 * @return If target elements can't be dropped, return CONTAIN_NO.<p> If target elements can be dropped, return CONTAIN_THIS. <p> If target's container can be dropped, return CONTAIN_PARENT
 */
public static int handleValidateTargetCanContain(Object targetObj,Object transferData,boolean validateContainer){
  if (targetObj == null || transferData == null)   return CONTAIN_NO;
  if (transferData instanceof StructuredSelection) {
    return handleValidateTargetCanContain(targetObj,((StructuredSelection)transferData).toArray(),validateContainer);
  }
 else   if (transferData instanceof Object[]) {
    Object[] array=(Object[])transferData;
    if (array.length == 1) {
      return handleValidateTargetCanContain(targetObj,array[0],validateContainer);
    }
    int canContainAll=CONTAIN_NO;
    for (int i=0; i < array.length; i++) {
      int canContain=handleValidateTargetCanContain(targetObj,array[i],validateContainer);
      if (i == 0) {
        canContainAll=canContain;
      }
      if (canContain == CONTAIN_NO || canContain != canContainAll) {
        return CONTAIN_NO;
      }
    }
    return canContainAll;
  }
 else {
    if (transferData instanceof DesignElementHandle) {
      return handleValidateTargetCanContainByContainer(targetObj,(DesignElementHandle)transferData,validateContainer);
    }
 else     if (transferData instanceof ColumnBandData) {
      if (targetObj instanceof ColumnHandle) {
        return handleValidateContainColumnPaste((ColumnHandle)targetObj,(ColumnBandData)transferData,false) ? CONTAIN_PARENT : CONTAIN_NO;
      }
      return CONTAIN_NO;
    }
 else     if (transferData instanceof IDesignElement) {
      DesignElementHandle childHandle=((IDesignElement)transferData).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle().getModule());
      return handleValidateTargetCanContainByContainer(targetObj,childHandle,validateContainer);
    }
 else     if (transferData instanceof IElementCopy) {
      DesignElementHandle childHandle=((IElementCopy)transferData).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle());
      return handleValidateTargetCanContainByContainer(targetObj,childHandle,validateContainer);
    }
 else     if (transferData instanceof SlotHandle) {
      SlotHandle slot=(SlotHandle)transferData;
      Object[] childHandles=slot.getContents().toArray();
      return handleValidateTargetCanContainByContainer(targetObj,childHandles,validateContainer);
    }
 else     if (transferData instanceof IStructure) {
      return handleValidateTargetCanContainStructure(targetObj,(IStructure)transferData) ? CONTAIN_THIS : CONTAIN_NO;
    }
 else     if (transferData instanceof EmbeddedImageHandle) {
      if (targetObj instanceof ReportDesignHandle && ((EmbeddedImageHandle)transferData).getElementHandle().getRoot() instanceof LibraryHandle)       return CONTAIN_THIS;
 else       if (targetObj instanceof EmbeddedImageNode)       return CONTAIN_THIS;
 else       return CONTAIN_NO;
    }
 else {
      return CONTAIN_NO;
    }
  }
}","/** 
 * Validates target elements can contain transfer data. <p> If transfer data is single element, validate target's container also
 * @param targetObj target elements
 * @param transferData transfer data,single object or array are permitted
 * @param validateContainer validate target's container can contain
 * @return If target elements can't be dropped, return CONTAIN_NO.<p> If target elements can be dropped, return CONTAIN_THIS. <p> If target's container can be dropped, return CONTAIN_PARENT
 */
public static int handleValidateTargetCanContain(Object targetObj,Object transferData,boolean validateContainer){
  if (targetObj == null || transferData == null)   return CONTAIN_NO;
  if (transferData instanceof StructuredSelection) {
    return handleValidateTargetCanContain(targetObj,((StructuredSelection)transferData).toArray(),validateContainer);
  }
 else   if (transferData instanceof Object[]) {
    Object[] array=(Object[])transferData;
    if (array.length == 1) {
      return handleValidateTargetCanContain(targetObj,array[0],validateContainer);
    }
    int canContainAll=CONTAIN_NO;
    for (int i=0; i < array.length; i++) {
      int canContain=handleValidateTargetCanContain(targetObj,array[i],validateContainer);
      if (i == 0) {
        canContainAll=canContain;
      }
      if (canContain == CONTAIN_NO || canContain != canContainAll) {
        return CONTAIN_NO;
      }
    }
    return canContainAll;
  }
 else {
    if (transferData instanceof DesignElementHandle) {
      return handleValidateTargetCanContainByContainer(targetObj,(DesignElementHandle)transferData,validateContainer);
    }
 else     if (transferData instanceof ColumnBandData) {
      if (targetObj instanceof ColumnHandle) {
        return handleValidateContainColumnPaste((ColumnHandle)targetObj,(ColumnBandData)transferData,false) ? CONTAIN_PARENT : CONTAIN_NO;
      }
      return CONTAIN_NO;
    }
 else     if (transferData instanceof IDesignElement) {
      DesignElementHandle childHandle=((IDesignElement)transferData).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle().getModule());
      return handleValidateTargetCanContainByContainer(targetObj,childHandle,validateContainer);
    }
 else     if (transferData instanceof IElementCopy) {
      DesignElementHandle childHandle=((IElementCopy)transferData).getHandle(SessionHandleAdapter.getInstance().getReportDesignHandle());
      if (targetObj instanceof SlotHandle) {
        SlotHandle targetHandle=(SlotHandle)targetObj;
        return CopyUtil.canPaste((IElementCopy)transferData,targetHandle.getElementHandle(),targetHandle.getSlotID()) ? CONTAIN_THIS : CONTAIN_NO;
      }
      if (targetObj instanceof PropertyHandle) {
        PropertyHandle targetHandle=(PropertyHandle)targetObj;
        return CopyUtil.canPaste((IElementCopy)transferData,targetHandle.getElementHandle(),targetHandle.getPropertyDefn().getName()) ? CONTAIN_THIS : CONTAIN_NO;
      }
      return handleValidateTargetCanContainByContainer(targetObj,childHandle,validateContainer);
    }
 else     if (transferData instanceof SlotHandle) {
      SlotHandle slot=(SlotHandle)transferData;
      Object[] childHandles=slot.getContents().toArray();
      return handleValidateTargetCanContainByContainer(targetObj,childHandles,validateContainer);
    }
 else     if (transferData instanceof IStructure) {
      return handleValidateTargetCanContainStructure(targetObj,(IStructure)transferData) ? CONTAIN_THIS : CONTAIN_NO;
    }
 else     if (transferData instanceof EmbeddedImageHandle) {
      if (targetObj instanceof ReportDesignHandle && ((EmbeddedImageHandle)transferData).getElementHandle().getRoot() instanceof LibraryHandle)       return CONTAIN_THIS;
 else       if (targetObj instanceof EmbeddedImageNode)       return CONTAIN_THIS;
 else       return CONTAIN_NO;
    }
 else {
      return CONTAIN_NO;
    }
  }
}",0.9257316399779127
69066,"public void testReportlet() throws Exception {
  ArrayList iidList=new ArrayList();
  IReportRunnable runnable=engine.openReportDesign(REPORT_DESIGN);
  IRunTask task=engine.createRunTask(runnable);
  task.run(REPORT_DOCUMENT);
  task.close();
  IReportDocument document=engine.openReportDocument(REPORT_DOCUMENT);
  IRenderTask render=engine.createRenderTask(document);
  ByteArrayOutputStream ostream=new ByteArrayOutputStream();
  HTMLRenderOption option=new HTMLRenderOption();
  option.setOutputFormat(""String_Node_Str"");
  option.setOutputStream(ostream);
  option.setEnableMetadata(true);
  render.setRenderOption(option);
  render.render();
  render.close();
  String content=ostream.toString(""String_Node_Str"");
  Pattern iidPattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=iidPattern.matcher(content);
  while (matcher.find()) {
    String strIid=matcher.group(1);
    InstanceID iid=InstanceID.parse(strIid);
    long designId=iid.getComponentID();
    runnable=render.getReportRunnable();
    ReportDesignHandle report=(ReportDesignHandle)runnable.getDesignHandle();
    DesignElementHandle element=report.getElementByID(designId);
    if (element instanceof TableHandle) {
      iidList.add(iid);
      render=engine.createRenderTask(document);
      option=new HTMLRenderOption();
      option.setOutputFormat(""String_Node_Str"");
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      option.setOutputStream(out);
      render.setRenderOption(option);
      render.setInstanceID(iid.toUniqueString());
      render.render();
      assertTrue(render.getErrors().isEmpty());
      render.close();
      assertTrue(out.toString(""String_Node_Str"").length() > 2048);
    }
  }
  int[] goldenPageNumbers=new int[]{1};
  InstanceID iidTemp=(InstanceID)iidList.get(0);
  assertTrue(goldenPageNumbers[0] == document.getPageNumber(iidTemp));
  assertTrue(document.getInstanceOffset(iidTemp) != -1);
  render.close();
  document.close();
}","public void testReportlet() throws Exception {
  ArrayList iidList=new ArrayList();
  IReportRunnable runnable=engine.openReportDesign(REPORT_DESIGN);
  IRunTask task=engine.createRunTask(runnable);
  task.run(REPORT_DOCUMENT);
  task.close();
  IReportDocument document=engine.openReportDocument(REPORT_DOCUMENT);
  IRenderTask render=engine.createRenderTask(document);
  ByteArrayOutputStream ostream=new ByteArrayOutputStream();
  HTMLRenderOption option=new HTMLRenderOption();
  option.setOutputFormat(""String_Node_Str"");
  option.setOutputStream(ostream);
  option.setEnableMetadata(true);
  render.setRenderOption(option);
  render.render();
  render.close();
  String content=ostream.toString(""String_Node_Str"");
  Pattern iidPattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=iidPattern.matcher(content);
  while (matcher.find()) {
    String strIid=matcher.group(1);
    InstanceID iid=InstanceID.parse(strIid);
    long designId=iid.getComponentID();
    runnable=render.getReportRunnable();
    ReportDesignHandle report=(ReportDesignHandle)runnable.getDesignHandle();
    DesignElementHandle element=report.getElementByID(designId);
    if (element instanceof TableHandle) {
      iidList.add(iid);
      render=engine.createRenderTask(document);
      option=new HTMLRenderOption();
      option.setOutputFormat(""String_Node_Str"");
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      option.setOutputStream(out);
      render.setRenderOption(option);
      render.setInstanceID(iid.toUniqueString());
      render.render();
      assertTrue(render.getErrors().isEmpty());
      render.close();
      assertTrue(out.toString(""String_Node_Str"").length() > 1500);
    }
  }
  int[] goldenPageNumbers=new int[]{1};
  InstanceID iidTemp=(InstanceID)iidList.get(0);
  assertTrue(goldenPageNumbers[0] == document.getPageNumber(iidTemp));
  assertTrue(document.getInstanceOffset(iidTemp) != -1);
  render.close();
  document.close();
}",0.9984748347737672
69067,"public void testWhiteSpace() throws IOException {
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  HTMLWriter writer=new HTMLWriter();
  writer.open(stream);
  writer.text(""String_Node_Str"");
  writer.endWriter();
  assertEquals(""String_Node_Str"",stream.toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
  stream.close();
}","public void testWhiteSpace() throws IOException {
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  HTMLWriter writer=new HTMLWriter();
  writer.open(stream);
  writer.text(""String_Node_Str"");
  writer.endWriter();
  writer.close();
  assertEquals(""String_Node_Str"",stream.toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
  stream.close();
}",0.9747191011235956
69068,"public void testStyleEscape() throws IOException {
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  HTMLWriter writer=new HTMLWriter();
  writer.open(stream);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.endWriter();
  assertEquals(""String_Node_Str"",stream.toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
  stream.close();
}","public void testStyleEscape() throws IOException {
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  HTMLWriter writer=new HTMLWriter();
  writer.open(stream);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.endWriter();
  writer.close();
  assertEquals(""String_Node_Str"",stream.toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
  stream.close();
}",0.9763157894736842
69069,"/** 
 * Test HTMLWriter getEscapedStr() <p> Test Case: <ul> <li>getEscapedStr</li> </ul> Excepted: <ul> <li>all the corresponding characters are transformed</li> </ul>
 * @throws IOException
 */
public void testGetEscapeStr() throws IOException {
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  HTMLWriter writer=new HTMLWriter();
  writer.open(stream);
  writer.text(""String_Node_Str"");
  writer.endWriter();
  assertEquals(""String_Node_Str"",stream.toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
  stream.close();
}","/** 
 * Test HTMLWriter getEscapedStr() <p> Test Case: <ul> <li>getEscapedStr</li> </ul> Excepted: <ul> <li>all the corresponding characters are transformed</li> </ul>
 * @throws IOException
 */
public void testGetEscapeStr() throws IOException {
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  HTMLWriter writer=new HTMLWriter();
  writer.open(stream);
  writer.text(""String_Node_Str"");
  writer.endWriter();
  writer.close();
  assertEquals(""String_Node_Str"",stream.toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
  stream.close();
}",0.9837251356238698
69070,"private void writeReport(DataOutputStream dos,Report design) throws IOException {
  IOUtil.writeShort(dos,(short)8);
  IOUtil.writeShort(dos,FIELD_REPORT_VERSION);
  IOUtil.writeString(dos,design.getVersion());
  IOUtil.writeShort(dos,FIELD_REPORT_LOCALE);
  IOUtil.writeString(dos,design.getLocale());
  IOUtil.writeShort(dos,FIELD_REPORT_STYLES);
  writeReportStyles(dos,design);
  IOUtil.writeShort(dos,FIELD_REPORT_USER_PROPERTIES);
  writeExprMap(dos,design.getUserProperties());
  IOUtil.writeShort(dos,FIELD_REPORT_VARIABLE);
  writeReportVariable(dos,design);
  IOUtil.writeShort(dos,FIELD_ON_PAGE_START);
  Expression onPageStart=design.getOnPageStart();
  writeExpression(dos,onPageStart);
  IOUtil.writeShort(dos,FIELD_ON_PAGE_END);
  Expression onPageEnd=design.getOnPageEnd();
  writeExpression(dos,onPageEnd);
  IOUtil.writeShort(dos,FIELD_REPORT_MASTER_PAGES);
  ReportItemWriter writer=new ReportItemWriter(dos);
  writeReportPageSetup(dos,writer,design);
  IOUtil.writeShort(dos,FIELD_REPORT_BODY);
  writeReportBodyContent(dos,writer,design);
}","private void writeReport(DataOutputStream dos,Report design) throws IOException {
  IOUtil.writeShort(dos,(short)9);
  IOUtil.writeShort(dos,FIELD_REPORT_VERSION);
  IOUtil.writeString(dos,design.getVersion());
  IOUtil.writeShort(dos,FIELD_REPORT_LOCALE);
  IOUtil.writeString(dos,design.getLocale());
  IOUtil.writeShort(dos,FIELD_REPORT_STYLES);
  writeReportStyles(dos,design);
  IOUtil.writeShort(dos,FIELD_REPORT_USER_PROPERTIES);
  writeExprMap(dos,design.getUserProperties());
  IOUtil.writeShort(dos,FIELD_REPORT_VARIABLE);
  writeReportVariable(dos,design);
  IOUtil.writeShort(dos,FIELD_ON_PAGE_START);
  Expression onPageStart=design.getOnPageStart();
  writeExpression(dos,onPageStart);
  IOUtil.writeShort(dos,FIELD_ON_PAGE_END);
  Expression onPageEnd=design.getOnPageEnd();
  writeExpression(dos,onPageEnd);
  IOUtil.writeShort(dos,FIELD_REPORT_MASTER_PAGES);
  ReportItemWriter writer=new ReportItemWriter(dos);
  writeReportPageSetup(dos,writer,design);
  IOUtil.writeShort(dos,FIELD_REPORT_BODY);
  writeReportBodyContent(dos,writer,design);
}",0.9990583804143126
69071,"protected boolean checkPageBreak() throws BirtException {
  boolean ret=false;
  if (!isInInlineStacking && context.isAutoPageBreak()) {
    int aHeight=getAllocatedHeight();
    while (aHeight + parent.getAbsoluteBP() > context.getMaxBP()) {
      parent.autoPageBreak();
      aHeight=getAllocatedHeight();
      ret=true;
    }
  }
  return ret;
}","protected boolean checkPageBreak() throws BirtException {
  boolean ret=false;
  if (!isInInlineStacking && context.isAutoPageBreak()) {
    int aHeight=getAllocatedHeight();
    while (aHeight + parent.getAbsoluteBP() > context.getMaxBP() + 3000) {
      parent.autoPageBreak();
      aHeight=getAllocatedHeight();
      ret=true;
    }
  }
  return ret;
}",0.99009900990099
69072,"/** 
 * Sets the visibility property for ReportItem.
 * @param design The <code>ReportItemDesign</code> object.
 * @param content The <code>ReportItemContent</code> object.
 */
protected void processVisibility(ReportItemDesign design,IContent content){
  VisibilityDesign visibility=design.getVisibility();
  if (visibility != null) {
    StringBuffer buffer=new StringBuffer();
    for (int i=0; i < visibility.count(); i++) {
      VisibilityRuleDesign rule=visibility.getRule(i);
      Expression expr=rule.getExpression();
      Boolean result=evaluateBoolean(expr);
      if (result == null) {
        context.addException(new EngineException(MessageConstants.EXPRESSION_EVALUATION_ERROR,rule.getExpression()));
      }
      boolean isHidden=result.booleanValue();
      if (isHidden) {
        buffer.append(rule.getFormat());
        buffer.append(""String_Node_Str"");
      }
    }
    if (buffer.length() != 0) {
      buffer.setLength(buffer.length() - 1);
      content.getStyle().setVisibleFormat(buffer.toString());
    }
  }
}","/** 
 * Sets the visibility property for ReportItem.
 * @param design The <code>ReportItemDesign</code> object.
 * @param content The <code>ReportItemContent</code> object.
 */
protected void processVisibility(ReportItemDesign design,IContent content){
  VisibilityDesign visibility=design.getVisibility();
  if (visibility != null) {
    StringBuffer buffer=new StringBuffer();
    for (int i=0; i < visibility.count(); i++) {
      VisibilityRuleDesign rule=visibility.getRule(i);
      Expression expr=rule.getExpression();
      Boolean result=evaluateBoolean(expr);
      if (result == null) {
        context.addException(new EngineException(MessageConstants.EXPRESSION_EVALUATION_ERROR,rule.getExpression()));
        continue;
      }
      boolean isHidden=result.booleanValue();
      if (isHidden) {
        buffer.append(rule.getFormat());
        buffer.append(""String_Node_Str"");
      }
    }
    if (buffer.length() != 0) {
      buffer.setLength(buffer.length() - 1);
      content.getStyle().setVisibleFormat(buffer.toString());
    }
  }
}",0.9914204003813156
69073,"/** 
 * Sets the visibility property for column.
 */
protected void processColumnVisibility(ColumnDesign design,Column column){
  VisibilityDesign visibility=design.getVisibility();
  if (visibility != null) {
    StringBuffer buffer=new StringBuffer();
    for (int i=0; i < visibility.count(); i++) {
      VisibilityRuleDesign rule=visibility.getRule(i);
      Expression expr=rule.getExpression();
      try {
        Boolean result=evaluateBoolean(expr);
        if (result == null) {
          throw new EngineException(MessageConstants.EXPRESSION_EVALUATION_ERROR,rule.getExpression());
        }
        boolean isHidden=((Boolean)result).booleanValue();
        if (isHidden) {
          buffer.append(rule.getFormat());
          buffer.append(""String_Node_Str"");
        }
      }
 catch (      BirtException ex) {
        context.addException(ex);
      }
    }
    if (buffer.length() != 0) {
      buffer.setLength(buffer.length() - 1);
      column.setVisibleFormat(buffer.toString());
    }
  }
}","/** 
 * Sets the visibility property for column.
 */
protected void processColumnVisibility(ColumnDesign design,Column column){
  VisibilityDesign visibility=design.getVisibility();
  if (visibility != null) {
    StringBuffer buffer=new StringBuffer();
    for (int i=0; i < visibility.count(); i++) {
      VisibilityRuleDesign rule=visibility.getRule(i);
      Expression expr=rule.getExpression();
      Boolean result=evaluateBoolean(expr);
      if (result == null) {
        context.addException(new EngineException(MessageConstants.EXPRESSION_EVALUATION_ERROR,rule.getExpression()));
        continue;
      }
      boolean isHidden=((Boolean)result).booleanValue();
      if (isHidden) {
        buffer.append(rule.getFormat());
        buffer.append(""String_Node_Str"");
      }
    }
    if (buffer.length() != 0) {
      buffer.setLength(buffer.length() - 1);
      column.setVisibleFormat(buffer.toString());
    }
  }
}",0.7242798353909465
69074,"public ITreeNode next(){
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  try {
    DocTreeNode nextNode=readNode(nextOffset);
    nextNode.parent=parent;
    nextIndex++;
    nextOffset=nextNode.next;
    return nextNode;
  }
 catch (  IOException ex) {
    fatalError=true;
  }
  return null;
}","public ITreeNode next(){
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  try {
    DocTreeNode nextNode=readNode(nextOffset);
    nextNode.parent=parent;
    nextIndex++;
    nextOffset=nextNode.next;
    return nextNode;
  }
 catch (  IOException ex) {
    logger.log(Level.INFO,""String_Node_Str"" + nextOffset,ex);
    fatalError=true;
  }
  return null;
}",0.9098837209302324
69075,"private DocTreeNode readNode(int offset) throws IOException {
  DocTreeNode node=new DocTreeNode();
  node.offset=offset;
  in.seek(offset);
  node.next=in.readInt();
  node.child=in.readInt();
  node.childCount=in.readInt();
  int byteSize=in.readInt();
  byte[] bytes=new byte[byteSize];
  in.readFully(bytes,0,byteSize);
  DataInputStream input=new DataInputStream(new ByteArrayInputStream(bytes));
  node.readNode(input,classloader);
  node.children=new NodeCollection(node);
  return node;
}","synchronized private DocTreeNode readNode(int offset) throws IOException {
  DocTreeNode node=new DocTreeNode();
  node.offset=offset;
  in.seek(offset);
  node.next=in.readInt();
  node.child=in.readInt();
  node.childCount=in.readInt();
  int byteSize=in.readInt();
  byte[] bytes=new byte[byteSize];
  in.readFully(bytes,0,byteSize);
  DataInputStream input=new DataInputStream(new ByteArrayInputStream(bytes));
  node.readNode(input,classloader);
  node.children=new NodeCollection(node);
  return node;
}",0.9870646766169154
69076,"public void setDataElement(DataElement data){
  if (!(data == null || data instanceof DateTimeDataElement)) {
    return;
  }
  CDateTime calendar=null;
  if (data != null) {
    calendar=((DateTimeDataElement)data).getValueAsCDateTime();
  }
 else {
    calendar=new CDateTime(1970,1,1,0,0,0);
  }
  if (calendar.getYear() == 1970 && calendar.getMonth() == 0 && calendar.getDay() == 1) {
    btnDate.setSelection(false);
    pickerDate.setEnabled(false);
  }
  if (calendar.getHour() == 0 && calendar.getMinute() == 0 && calendar.getSecond() == 0) {
    btnTime.setSelection(false);
    pickerTime.setEnabled(false);
  }
  pickerDate.setYear(calendar.getYear());
  pickerDate.setMonth(calendar.getMonth());
  pickerDate.setDay(calendar.getDay());
  pickerTime.setHours(calendar.getHour());
  pickerTime.setMinutes(calendar.getMinute());
  pickerTime.setSeconds(calendar.getSecond());
}","public void setDataElement(DataElement data){
  if (!(data == null || data instanceof DateTimeDataElement)) {
    return;
  }
  CDateTime calendar=null;
  if (data != null) {
    calendar=((DateTimeDataElement)data).getValueAsCDateTime();
  }
 else {
    calendar=new CDateTime(1970,1,1,0,0,0);
  }
  if (calendar.getYear() == 1970 && calendar.getMonth() == 0 && calendar.getDay() == 1) {
    btnDate.setSelection(false);
    pickerDate.setEnabled(false);
  }
 else {
    btnDate.setSelection(true);
    pickerDate.setEnabled(true);
  }
  if (calendar.getHour() == 0 && calendar.getMinute() == 0 && calendar.getSecond() == 0) {
    btnTime.setSelection(false);
    pickerTime.setEnabled(false);
  }
 else {
    btnTime.setSelection(true);
    pickerTime.setEnabled(true);
  }
  pickerDate.setYear(calendar.getYear());
  pickerDate.setMonth(calendar.getMonth());
  pickerDate.setDay(calendar.getDay());
  pickerTime.setHours(calendar.getHour());
  pickerTime.setMinutes(calendar.getMinute());
  pickerTime.setSeconds(calendar.getSecond());
}",0.9200415368639668
69077,"/** 
 * Returns value of aggregate function parameters.
 * @param orthSD
 * @param baseSD
 * @param orthQuery
 * @since 2.5
 */
public static String[] getAggFunParameters(SeriesDefinition orthSD,SeriesDefinition baseSD,Query orthQuery){
  if (baseSD.getGrouping() != null && baseSD.getGrouping().isEnabled()) {
    SeriesGrouping grouping=orthSD.getGrouping();
    if (grouping.isEnabled()) {
      if (orthQuery != null && orthQuery.getGrouping() != null) {
        return orthQuery.getGrouping().getAggregateParameters().toArray(new String[0]);
      }
      return grouping.getAggregateParameters().toArray(new String[0]);
    }
    return baseSD.getGrouping().getAggregateParameters().toArray(new String[0]);
  }
 else {
    if (orthQuery != null && orthQuery.getGrouping() != null) {
      return orthQuery.getGrouping().getAggregateParameters().toArray(new String[0]);
    }
    return orthSD.getGrouping().getAggregateParameters().toArray(new String[0]);
  }
}","/** 
 * Returns value of aggregate function parameters.
 * @param orthSD
 * @param baseSD
 * @param orthQuery
 * @since 2.5
 */
public static String[] getAggFunParameters(SeriesDefinition orthSD,SeriesDefinition baseSD,Query orthQuery){
  if (baseSD.getGrouping() != null && baseSD.getGrouping().isEnabled()) {
    SeriesGrouping grouping=orthSD.getGrouping();
    if (grouping != null && grouping.isEnabled()) {
      if (orthQuery != null && orthQuery.getGrouping() != null) {
        return orthQuery.getGrouping().getAggregateParameters().toArray(new String[0]);
      }
      return grouping.getAggregateParameters().toArray(new String[0]);
    }
    return baseSD.getGrouping().getAggregateParameters().toArray(new String[0]);
  }
 else {
    if (orthQuery != null && orthQuery.getGrouping() != null) {
      return orthQuery.getGrouping().getAggregateParameters().toArray(new String[0]);
    }
    return orthSD.getGrouping().getAggregateParameters().toArray(new String[0]);
  }
}",0.9897645854657112
69078,"public void setAggregation(Query query,SeriesDefinition sd){
  this.query=query;
  this.fSeriesDefi=sd;
  if (query.getGrouping() == null) {
    if (sd.getGrouping() != null) {
      fGrouping=sd.getGrouping().copyInstance();
    }
 else {
      fGrouping=SeriesGroupingImpl.create();
    }
  }
 else {
    fGrouping=query.getGrouping().copyInstance();
  }
}","public void setAggregation(Query query,SeriesDefinition sd){
  this.query=query;
  this.fSeriesDefi=sd;
  fGrouping=null;
  if (sd.getGrouping() != null && sd.getGrouping().isEnabled()) {
    fGrouping=sd.getGrouping().copyInstance();
  }
  if (query.getGrouping() != null && query.getGrouping().isEnabled()) {
    fGrouping=query.getGrouping().copyInstance();
  }
  if (fGrouping == null) {
    fGrouping=SeriesGroupingImpl.create();
  }
}",0.5789473684210527
69079,"public void widgetSelected(SelectionEvent e){
  Object source=e.getSource();
  if (source == fCmbAggregate) {
    String aggFunc=((String[])fCmbAggregate.getData())[fCmbAggregate.getSelectionIndex()];
    showAggregateParameters(aggFunc);
    if (AGG_FUNC_NONE.equals(aggFunc)) {
      fGrouping.setEnabled(false);
      fGrouping.setAggregateExpression(null);
    }
 else {
      fGrouping.setEnabled(true);
      fGrouping.setAggregateExpression(aggFunc);
    }
  }
 else   if (isAggParametersWidget(source)) {
    setAggParameter((Text)source);
  }
 else   if (isBuilderBtnWidget(source)) {
    try {
      Text txtArg=fExprBuilderWidgetsMap.get(source);
      String sExpr=fChartContext.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,txtArg.getText(),fChartContext.getExtendedItem(),fTitle);
      txtArg.setText(sExpr);
      setAggParameter(txtArg);
    }
 catch (    ChartException e1) {
      WizardBase.displayException(e1);
    }
  }
 else   if (source == fBtnOK) {
    if (query != null) {
      query.setGrouping(fGrouping);
      query.getGrouping().eAdapters().addAll(query.eAdapters());
    }
 else {
      fSeriesDefi.setGrouping(fGrouping);
      fSeriesDefi.getGrouping().eAdapters().addAll(fSeriesDefi.eAdapters());
    }
    ChartUIUtil.checkAggregateType(fChartContext);
    DataDefinitionTextManager.getInstance().updateTooltip();
    closeAggregateEditor(getShell());
  }
 else   if (source == fBtnCancel) {
    closeAggregateEditor(getShell());
  }
}","public void widgetSelected(SelectionEvent e){
  Object source=e.getSource();
  if (source == fCmbAggregate) {
    String aggFunc=((String[])fCmbAggregate.getData())[fCmbAggregate.getSelectionIndex()];
    showAggregateParameters(aggFunc);
    if (AGG_FUNC_NONE.equals(aggFunc)) {
      fGrouping.setEnabled(false);
      fGrouping.setAggregateExpression(null);
    }
 else {
      fGrouping.setEnabled(true);
      fGrouping.setAggregateExpression(aggFunc);
    }
  }
 else   if (isAggParametersWidget(source)) {
    setAggParameter((Text)source);
  }
 else   if (isBuilderBtnWidget(source)) {
    try {
      Text txtArg=fExprBuilderWidgetsMap.get(source);
      String sExpr=fChartContext.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,txtArg.getText(),fChartContext.getExtendedItem(),fTitle);
      txtArg.setText(sExpr);
      setAggParameter(txtArg);
    }
 catch (    ChartException e1) {
      WizardBase.displayException(e1);
    }
  }
 else   if (source == fBtnOK) {
    if (query != null) {
      query.setGrouping(fGrouping);
      query.getGrouping().eAdapters().addAll(query.eAdapters());
      fSeriesDefi.setGrouping(null);
    }
 else {
      fSeriesDefi.setGrouping(fGrouping);
      fSeriesDefi.getGrouping().eAdapters().addAll(fSeriesDefi.eAdapters());
    }
    ChartUIUtil.checkAggregateType(fChartContext);
    DataDefinitionTextManager.getInstance().updateTooltip();
    closeAggregateEditor(getShell());
  }
 else   if (source == fBtnCancel) {
    closeAggregateEditor(getShell());
  }
}",0.9878887070376432
69080,"public void onRow(Object[] args) throws DataException {
  assert(args.length > 0);
  if (args[0] != null) {
    Object value=getTypedData(args[0]);
    Counter counter=(Counter)cacheMap.get(value);
    if (counter == null) {
      counter=new Counter(1,rowIndex);
      cacheMap.put(value,counter);
    }
 else {
      counter.count++;
    }
    if (counter.count > maxCount) {
      mode=value;
      maxCount=counter.count;
      modeMap.clear();
      modeMap.put(value,counter);
    }
 else     if (counter.count == maxCount) {
      modeMap.put(value,counter);
    }
    rowIndex++;
  }
}","public void onRow(Object[] args) throws DataException {
  assert(args.length > 0);
  if (args[0] != null) {
    Object value=getTypedData(args[0]);
    Object obj=cacheMap.get(value);
    int count=1;
    if (obj != null) {
      count=((Integer)obj).intValue();
      count++;
    }
    cacheMap.put(value,count);
    if (count > maxCount) {
      mode=value;
      maxCount=count;
      multiMaxValue=false;
    }
 else     if (count == maxCount) {
      multiMaxValue=true;
    }
  }
}",0.5605920444033302
69081,"public void start(){
  super.start();
  rowIndex=0;
  cacheMap=new HashMap();
  maxCount=0;
  mode=null;
  modeMap=new HashMap();
}","public void start(){
  super.start();
  maxCount=0;
  mode=null;
  cacheMap=new LinkedHashMap();
  multiMaxValue=false;
}",0.6984126984126984
69082,"public void finish() throws DataException {
  super.finish();
  cacheMap=null;
}","public void finish() throws DataException {
  super.finish();
}",0.8811188811188811
69083,"public Object getSummaryValue(){
  if (maxCount == 1) {
    return null;
  }
 else   if (modeMap.isEmpty() == false) {
    int minIndex=Integer.MAX_VALUE;
    for (Iterator i=modeMap.keySet().iterator(); i.hasNext(); ) {
      Object key=(Object)i.next();
      Counter info=(Counter)modeMap.get(key);
      if (info.firstIndex < minIndex) {
        minIndex=info.firstIndex;
        mode=key;
      }
    }
    modeMap=null;
  }
  return mode;
}","public Object getSummaryValue(){
  if (maxCount == 1) {
    return null;
  }
  if (multiMaxValue && cacheMap != null && !cacheMap.isEmpty()) {
    for (Iterator i=cacheMap.keySet().iterator(); i.hasNext(); ) {
      Object key=(Object)i.next();
      int count=(Integer)cacheMap.get(key);
      if (count == maxCount) {
        mode=key;
        break;
      }
    }
  }
  cacheMap=null;
  return mode;
}",0.4705882352941176
69084,"public void testTotalMode() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_MODE_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(1,ag.getParameterDefn().length);
  assertTrue(!ag.getParameterDefn()[0].isOptional());
  ac.start();
  for (int i=0; i < doubleArray1.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray1[i])});
  }
  ac.finish();
  assertEquals(new Double(4.0),ac.getValue());
  ac.start();
  for (int i=0; i < doubleArray2.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray2[i])});
  }
  ac.finish();
  assertEquals(new Double(4.0),ac.getValue());
  ac.start();
  for (int i=0; i < doubleArray4.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray4[i])});
  }
  ac.finish();
  assertEquals(null,ac.getValue());
  ac.start();
  for (int i=0; i < doubleArray5.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray5[i])});
  }
  ac.finish();
  assertEquals(new Double(1.0),ac.getValue());
  ac.start();
  for (int i=0; i < str1.length; i++) {
    ac.onRow(new Object[]{str1[i]});
  }
  ac.finish();
  assertEquals(new Double(4.0),ac.getValue());
  ac.start();
  ac.finish();
  assertEquals(null,ac.getValue());
  ac.start();
  try {
    ac.getValue();
    assertTrue(false);
  }
 catch (  RuntimeException e) {
    assertTrue(true);
  }
  ac.start();
  ac.onRow(new Double[]{new Double(4)});
  ac.onRow(new Double[]{new Double(4)});
  ac.onRow(new Double[]{new Double(3)});
  ac.finish();
  assertEquals(ac.getValue(),new Double(4));
  ac.start();
  for (int i=0; i < dates.length; i++) {
    ac.onRow(new Object[]{dates[i]});
  }
  ac.finish();
  assertEquals(ac.getValue(),null);
  ac.start();
  for (int i=0; i < dates2.length; i++) {
    ac.onRow(new Object[]{dates2[i]});
  }
  ac.finish();
  assertEquals(ac.getValue(),new Date(2000000L));
  ac.start();
  for (int i=0; i < bigDecimalArray.length; i++) {
    ac.onRow(new Object[]{bigDecimalArray[i]});
  }
  ac.finish();
  Object ret=ac.getValue();
  assertTrue(ret instanceof BigDecimal);
  assertTrue(new BigDecimal(4).compareTo((BigDecimal)ret) == 0);
}","public void testTotalMode() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_MODE_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(1,ag.getParameterDefn().length);
  assertTrue(!ag.getParameterDefn()[0].isOptional());
  ac.start();
  for (int i=0; i < doubleArray1.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray1[i])});
  }
  ac.finish();
  assertEquals(new Double(4.0),ac.getValue());
  ac.start();
  for (int i=0; i < doubleArray2.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray2[i])});
  }
  ac.finish();
  assertEquals(new Double(4.0),ac.getValue());
  ac.start();
  for (int i=0; i < doubleArray4.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray4[i])});
  }
  ac.finish();
  assertEquals(null,ac.getValue());
  ac.start();
  for (int i=0; i < doubleArray5.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray5[i])});
  }
  ac.finish();
  assertEquals(new Double(1.0),ac.getValue());
  ac.start();
  for (int i=0; i < doubleArray6.length; i++) {
    ac.onRow(new Double[]{new Double(doubleArray6[i])});
  }
  ac.finish();
  assertEquals(new Double(1.0),ac.getValue());
  ac.start();
  for (int i=0; i < str1.length; i++) {
    ac.onRow(new Object[]{str1[i]});
  }
  ac.finish();
  assertEquals(new Double(4.0),ac.getValue());
  ac.start();
  ac.finish();
  assertEquals(null,ac.getValue());
  ac.start();
  try {
    ac.getValue();
    assertTrue(false);
  }
 catch (  RuntimeException e) {
    assertTrue(true);
  }
  ac.start();
  ac.onRow(new Double[]{new Double(4)});
  ac.onRow(new Double[]{new Double(4)});
  ac.onRow(new Double[]{new Double(3)});
  ac.finish();
  assertEquals(ac.getValue(),new Double(4));
  ac.start();
  for (int i=0; i < dates.length; i++) {
    ac.onRow(new Object[]{dates[i]});
  }
  ac.finish();
  assertEquals(ac.getValue(),null);
  ac.start();
  for (int i=0; i < dates2.length; i++) {
    ac.onRow(new Object[]{dates2[i]});
  }
  ac.finish();
  assertEquals(ac.getValue(),new Date(2000000L));
  ac.start();
  for (int i=0; i < bigDecimalArray.length; i++) {
    ac.onRow(new Object[]{bigDecimalArray[i]});
  }
  ac.finish();
  Object ret=ac.getValue();
  assertTrue(ret instanceof BigDecimal);
  assertTrue(new BigDecimal(4).compareTo((BigDecimal)ret) == 0);
}",0.9602748550569036
69085,"public void startNode(Node node,HashMap cssStyles){
  String nodeName=node.getNodeName();
  HashMap cssStyle=(HashMap)cssStyles.get(node);
  writer.openTag(nodeName);
  NamedNodeMap attributes=node.getAttributes();
  if (attributes != null) {
    for (int i=0; i < attributes.getLength(); i++) {
      Node attribute=attributes.item(i);
      String attrName=attribute.getNodeName();
      String attrValue=attribute.getNodeValue();
      if (attrValue != null) {
        if (""String_Node_Str"".equalsIgnoreCase(nodeName) && ""String_Node_Str"".equalsIgnoreCase(attrName)) {
          String attrValueTrue=handleStyleImage(attrValue);
          if (attrValueTrue != null) {
            attrValue=attrValueTrue;
          }
        }
        writer.attribute(attrName,attrValue);
      }
    }
  }
  if (cssStyle != null) {
    StringBuffer buffer=new StringBuffer();
    Iterator ite=cssStyle.entrySet().iterator();
    while (ite.hasNext()) {
      Map.Entry entry=(Map.Entry)ite.next();
      Object keyObj=entry.getKey();
      Object valueObj=entry.getValue();
      if (keyObj == null || valueObj == null) {
        continue;
      }
      String key=keyObj.toString();
      String value=valueObj.toString();
      buffer.append(key);
      buffer.append(""String_Node_Str"");
      if (""String_Node_Str"".equalsIgnoreCase(key)) {
        String valueTrue=handleStyleImage(value,true);
        if (valueTrue != null) {
          value=valueTrue;
        }
        buffer.append(""String_Node_Str"");
        buffer.append(value);
        buffer.append(""String_Node_Str"");
      }
 else {
        buffer.append(value);
      }
      buffer.append(""String_Node_Str"");
    }
    if (buffer.length() != 0) {
      writer.attribute(""String_Node_Str"",buffer.toString());
    }
  }
}","public void startNode(Node node,HashMap<Element,StyleProperties> cssStyles){
  String nodeName=node.getNodeName();
  StyleProperties cssStyle=cssStyles.get(node);
  writer.openTag(nodeName);
  NamedNodeMap attributes=node.getAttributes();
  if (attributes != null) {
    for (int i=0; i < attributes.getLength(); i++) {
      Node attribute=attributes.item(i);
      String attrName=attribute.getNodeName();
      String attrValue=attribute.getNodeValue();
      if (attrValue != null) {
        if (""String_Node_Str"".equalsIgnoreCase(nodeName) && ""String_Node_Str"".equalsIgnoreCase(attrName)) {
          String attrValueTrue=handleStyleImage(attrValue);
          if (attrValueTrue != null) {
            attrValue=attrValueTrue;
          }
        }
        writer.attribute(attrName,attrValue);
      }
    }
  }
  if (cssStyle != null) {
    StringBuffer buffer=new StringBuffer();
    cssStyle.toString(buffer);
    if (buffer.length() != 0) {
      writer.attribute(""String_Node_Str"",buffer.toString());
    }
  }
}",0.6914551304969611
69086,"/** 
 * Visits the children nodes of the specific node
 * @param visitor the ITextNodeVisitor instance
 * @param ele the specific node
 */
private void processNodes(Element ele,HashMap cssStyles){
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    short nodeType=node.getNodeType();
    if (nodeType == Node.TEXT_NODE) {
      if (isScriptText(node)) {
        writer.cdata(node.getNodeValue());
      }
 else {
        writer.text(node.getNodeValue(),false);
      }
    }
 else     if (nodeType == Node.COMMENT_NODE) {
      writer.comment(node.getNodeValue());
    }
 else     if (nodeType == Node.ELEMENT_NODE) {
      if (""String_Node_Str"".equalsIgnoreCase(node.getNodeName())) {
        boolean bImplicitCloseTag=writer.isImplicitCloseTag();
        writer.setImplicitCloseTag(true);
        startNode(node,cssStyles);
        processNodes((Element)node,cssStyles);
        endNode(node);
        writer.setImplicitCloseTag(bImplicitCloseTag);
      }
 else {
        startNode(node,cssStyles);
        processNodes((Element)node,cssStyles);
        endNode(node);
      }
    }
  }
}","/** 
 * Visits the children nodes of the specific node
 * @param visitor the ITextNodeVisitor instance
 * @param ele the specific node
 */
private void processNodes(Element ele,HashMap<Element,StyleProperties> cssStyles){
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    short nodeType=node.getNodeType();
    if (nodeType == Node.TEXT_NODE) {
      if (isScriptText(node)) {
        writer.cdata(node.getNodeValue());
      }
 else {
        writer.text(node.getNodeValue(),false);
      }
    }
 else     if (nodeType == Node.COMMENT_NODE) {
      writer.comment(node.getNodeValue());
    }
 else     if (nodeType == Node.ELEMENT_NODE) {
      if (""String_Node_Str"".equalsIgnoreCase(node.getNodeName())) {
        boolean bImplicitCloseTag=writer.isImplicitCloseTag();
        writer.setImplicitCloseTag(true);
        startNode(node,cssStyles);
        processNodes((Element)node,cssStyles);
        endNode(node);
        writer.setImplicitCloseTag(bImplicitCloseTag);
      }
 else {
        startNode(node,cssStyles);
        processNodes((Element)node,cssStyles);
        endNode(node);
      }
    }
  }
}",0.989010989010989
69087,"private void outputHtmlText(IForeignContent foreign){
  boolean bIndent=writer.isIndent();
  writer.setIndent(false);
  Object rawValue=foreign.getRawValue();
  String text=rawValue == null ? null : rawValue.toString();
  Document doc=new TextParser().parse(text,TextParser.TEXT_TYPE_HTML);
  ReportDesignHandle design=(ReportDesignHandle)runnable.getDesignHandle();
  HTMLProcessor htmlProcessor=new HTMLProcessor(design,reportContext.getAppContext());
  HashMap styleMap=new HashMap();
  Element body=null;
  if (doc != null) {
    NodeList bodys=doc.getElementsByTagName(""String_Node_Str"");
    if (bodys.getLength() > 0) {
      body=(Element)bodys.item(0);
    }
  }
  if (body != null) {
    htmlProcessor.execute(body,styleMap);
    processNodes(body,styleMap);
  }
  writer.setIndent(bIndent);
}","private void outputHtmlText(IForeignContent foreign){
  boolean bIndent=writer.isIndent();
  writer.setIndent(false);
  Object rawValue=foreign.getRawValue();
  String text=rawValue == null ? null : rawValue.toString();
  Document doc=new TextParser().parse(text,TextParser.TEXT_TYPE_HTML);
  ReportDesignHandle design=(ReportDesignHandle)runnable.getDesignHandle();
  HTMLStyleProcessor htmlProcessor=new HTMLStyleProcessor(design);
  HashMap<Element,StyleProperties> styleMap=new HashMap<Element,StyleProperties>();
  Element body=null;
  if (doc != null) {
    NodeList bodys=doc.getElementsByTagName(""String_Node_Str"");
    if (bodys.getLength() > 0) {
      body=(Element)bodys.item(0);
    }
  }
  if (body != null) {
    htmlProcessor.execute(body,styleMap,reportContext.getAppContext());
    processNodes(body,styleMap);
  }
  writer.setIndent(bIndent);
}",0.9279711884753902
69088,"public Object getMinimum(DataSet ds) throws ChartException {
  DataSetIterator dsi=null;
  try {
    dsi=new DataSetIterator(ds);
    dsi.reset();
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,uiex);
  }
  if (dsi.size() == 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
  if (ds instanceof NumberDataSet) {
    boolean bAnyNonNull=false;
    Object o;
    double d, dMin=0;
    while (dsi.hasNext()) {
      o=dsi.next();
      if (o == null) {
        continue;
      }
      d=((Number)o).doubleValue();
      if (!bAnyNonNull) {
        dMin=d;
        bAnyNonNull=true;
      }
 else       if (dMin > d) {
        dMin=d;
      }
    }
    if (!bAnyNonNull) {
      logger.log(new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ALL_NULL_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale())));
    }
    return new Double(dMin);
  }
 else   if (ds instanceof DateTimeDataSet) {
    boolean bAnyNonNull=false;
    Calendar cal=null;
    Calendar calMin=Calendar.getInstance(getULocale());
    while (dsi.hasNext()) {
      cal=(Calendar)dsi.next();
      if (cal == null) {
        continue;
      }
      if (!bAnyNonNull) {
        calMin=cal;
        bAnyNonNull=true;
      }
 else       if (calMin.after(cal)) {
        calMin=cal;
      }
    }
    if (!bAnyNonNull) {
      logger.log(new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ALL_NULL_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale())));
    }
    return calMin;
  }
  return null;
}","public Object getMinimum(DataSet ds) throws ChartException {
  DataSetIterator dsi=null;
  try {
    dsi=new DataSetIterator(ds);
    dsi.reset();
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,uiex);
  }
  if (dsi.size() == 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
  if (ds instanceof NumberDataSet) {
    boolean bAnyNonNull=false;
    Object o;
    double d, dMin=0;
    while (dsi.hasNext()) {
      o=dsi.next();
      if (o == null) {
        continue;
      }
      d=((Number)o).doubleValue();
      if (Double.isNaN(d) || Double.isInfinite(d)) {
        continue;
      }
      if (!bAnyNonNull) {
        dMin=d;
        bAnyNonNull=true;
      }
 else       if (dMin > d) {
        dMin=d;
      }
    }
    if (!bAnyNonNull) {
      logger.log(new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ALL_NULL_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale())));
    }
    return new Double(dMin);
  }
 else   if (ds instanceof DateTimeDataSet) {
    boolean bAnyNonNull=false;
    Calendar cal=null;
    Calendar calMin=Calendar.getInstance(getULocale());
    while (dsi.hasNext()) {
      cal=(Calendar)dsi.next();
      if (cal == null) {
        continue;
      }
      if (!bAnyNonNull) {
        calMin=cal;
        bAnyNonNull=true;
      }
 else       if (calMin.after(cal)) {
        calMin=cal;
      }
    }
    if (!bAnyNonNull) {
      logger.log(new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ALL_NULL_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale())));
    }
    return calMin;
  }
  return null;
}",0.9772923253808564
69089,"public Object getMaximum(DataSet ds) throws ChartException {
  DataSetIterator dsi=null;
  try {
    dsi=new DataSetIterator(ds);
    dsi.reset();
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,uiex);
  }
  if (dsi.size() == 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
  if (ds instanceof NumberDataSet) {
    boolean bAnyNonNull=false;
    Object o;
    double d, dMax=0;
    while (dsi.hasNext()) {
      o=dsi.next();
      if (o == null) {
        continue;
      }
      d=((Number)o).doubleValue();
      if (!bAnyNonNull) {
        dMax=d;
        bAnyNonNull=true;
      }
 else       if (dMax < d) {
        dMax=d;
      }
    }
    if (!bAnyNonNull) {
      logger.log(new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ALL_NULL_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale())));
    }
    return new Double(dMax);
  }
 else   if (ds instanceof DateTimeDataSet) {
    boolean bAnyNonNull=false;
    Calendar cal=null;
    Calendar calMax=Calendar.getInstance(getULocale());
    while (dsi.hasNext()) {
      cal=(Calendar)dsi.next();
      if (cal == null) {
        continue;
      }
      if (!bAnyNonNull) {
        calMax=cal;
        bAnyNonNull=true;
      }
 else       if (calMax.before(cal)) {
        calMax=cal;
      }
    }
    if (!bAnyNonNull) {
      logger.log(new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ALL_NULL_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale())));
    }
    return calMax;
  }
  return null;
}","public Object getMaximum(DataSet ds) throws ChartException {
  DataSetIterator dsi=null;
  try {
    dsi=new DataSetIterator(ds);
    dsi.reset();
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,uiex);
  }
  if (dsi.size() == 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
  if (ds instanceof NumberDataSet) {
    boolean bAnyNonNull=false;
    Object o;
    double d, dMax=0;
    while (dsi.hasNext()) {
      o=dsi.next();
      if (o == null) {
        continue;
      }
      d=((Number)o).doubleValue();
      if (Double.isNaN(d) || Double.isInfinite(dMax)) {
        continue;
      }
      if (!bAnyNonNull) {
        dMax=d;
        bAnyNonNull=true;
      }
 else       if (dMax < d) {
        dMax=d;
      }
    }
    if (!bAnyNonNull) {
      logger.log(new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ALL_NULL_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale())));
    }
    return new Double(dMax);
  }
 else   if (ds instanceof DateTimeDataSet) {
    boolean bAnyNonNull=false;
    Calendar cal=null;
    Calendar calMax=Calendar.getInstance(getULocale());
    while (dsi.hasNext()) {
      cal=(Calendar)dsi.next();
      if (cal == null) {
        continue;
      }
      if (!bAnyNonNull) {
        calMax=cal;
        bAnyNonNull=true;
      }
 else       if (calMax.before(cal)) {
        calMax=cal;
      }
    }
    if (!bAnyNonNull) {
      logger.log(new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ALL_NULL_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale())));
    }
    return calMax;
  }
  return null;
}",0.97646383467279
69090,"private IDataElementComposite createDataElementComposite(Composite parent){
  Axis oAxis=getOppositeAxis();
  DataElement data=getAxisForProcessing().getOrigin().getValue();
  if (oAxis.getType().getValue() == AxisType.DATE_TIME && !(oAxis.isCategoryAxis())) {
    if (!(data instanceof DateTimeDataElement)) {
      data=DateTimeDataElementImpl.create(0);
    }
    return new DateTimeDataElementComposite(parent,SWT.BORDER,(DateTimeDataElement)data,false);
  }
  if (!(data instanceof NumberDataElement)) {
    data=NumberDataElementImpl.create(0);
  }
  return new NumberDataElementComposite(parent,(NumberDataElement)data);
}","private IDataElementComposite createDataElementComposite(Composite parent){
  Axis oAxis=getOppositeAxis();
  DataElement data=getAxisForProcessing().getOrigin().getValue();
  if (oAxis.getType().getValue() == AxisType.DATE_TIME && !(oAxis.isCategoryAxis())) {
    if (!(data instanceof DateTimeDataElement)) {
      data=DateTimeDataElementImpl.create(new CDateTime(1970,1,1,0,0,0));
    }
    return new DateTimeDataElementComposite(parent,SWT.BORDER,(DateTimeDataElement)data,false);
  }
  if (!(data instanceof NumberDataElement)) {
    data=NumberDataElementImpl.create(0);
  }
  return new NumberDataElementComposite(parent,(NumberDataElement)data);
}",0.9782270606531882
69091,"/** 
 * @param queryDefn
 * @param paramBindingIt
 * @param filterIt
 * @param bindingIt
 * @throws AdapterException 
 */
private void populateQueryDefn(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt,boolean disAllowAggregation) throws AdapterException {
  try {
    while (bindingIt != null && bindingIt.hasNext()) {
      IBinding binding=this.modelAdaptor.adaptBinding((ComputedColumnHandle)bindingIt.next());
      if (disAllowAggregation && binding.getAggrFunction() != null)       continue;
      queryDefn.addBinding(binding);
    }
    List parameterBindings=convertParamterBindings(paramBindingIt);
    if (parameterBindings != null)     queryDefn.getInputParamBindings().addAll(parameterBindings);
    List filters=convertFilters(filterIt);
    if (filters != null)     queryDefn.getFilters().addAll(filters);
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","/** 
 * @param queryDefn
 * @param paramBindingIt
 * @param filterIt
 * @param bindingIt
 * @throws AdapterException 
 */
private void populateQueryDefn(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt,boolean disAllowAggregation) throws AdapterException {
  try {
    while (bindingIt != null && bindingIt.hasNext()) {
      Object computedBinding=bindingIt.next();
      IBinding binding=null;
      if (computedBinding instanceof ComputedColumnHandle) {
        binding=this.modelAdaptor.adaptBinding((ComputedColumnHandle)computedBinding);
      }
 else       if (computedBinding instanceof org.eclipse.birt.report.model.api.elements.structures.ComputedColumn) {
        binding=adaptBinding((org.eclipse.birt.report.model.api.elements.structures.ComputedColumn)computedBinding);
      }
      if (binding == null || (disAllowAggregation && binding.getAggrFunction() != null))       continue;
      queryDefn.addBinding(binding);
    }
    List parameterBindings=convertParamterBindings(paramBindingIt);
    if (parameterBindings != null)     queryDefn.getInputParamBindings().addAll(parameterBindings);
    List filters=convertFilters(filterIt);
    if (filters != null)     queryDefn.getFilters().addAll(filters);
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.8038029386343993
69092,"private void update(Object structureOrHandle){
  if (structureOrHandle instanceof FilterCondition) {
    try {
      filters.addItem((FilterCondition)structureOrHandle);
      viewer.getViewer().refresh();
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
 else {
    viewer.getViewer().update(structureOrHandle,null);
  }
}","private void update(Object structureOrHandle){
  if (structureOrHandle instanceof FilterCondition) {
    viewer.getViewer().refresh();
  }
 else {
    viewer.getViewer().update(structureOrHandle,null);
  }
}",0.4840989399293286
69093,"private void doEdit(Object structureOrHandle){
  FilterConditionBuilder dlg=new FilterConditionBuilder(structureOrHandle);
  dlg.setTitle(this.getTitle(structureOrHandle));
  dlg.setDataSetColumns(this.columnExpressions);
  dlg.setExpressionProvider((DesignElementHandle)getContainer().getModel());
  dlg.setBindingParams(((DataSetHandle)getContainer().getModel()).paramBindingsIterator());
  if (dlg.open() == Window.OK) {
    update(structureOrHandle);
  }
}","private void doEdit(Object structureOrHandle){
  FilterConditionBuilder dlg=new FilterConditionBuilder(((DataSetEditor)getContainer()).getShell(),this.getTitle(structureOrHandle),this.getTitle(structureOrHandle));
  dlg.setDataSetHandle((DataSetHandle)getContainer().getModel());
  dlg.setBindingParams(getParamBindingHandleArray());
  if (dlg.open() == Window.OK) {
    update(structureOrHandle);
  }
}",0.5376593279258401
69094,"public Control createContents(Composite parent){
  initColumnNames();
  viewer=new PropertyHandleTableViewer(parent,true,true,true);
  TableColumn column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[0]);
  column.setWidth(150);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[1]);
  column.setWidth(100);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[2]);
  column.setWidth(100);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[3]);
  column.setWidth(100);
  initializeFilters();
  viewer.getViewer().setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      ArrayList filterList=new ArrayList(10);
      Iterator iter=filters.iterator();
      if (iter != null) {
        while (iter.hasNext()) {
          filterList.add(iter.next());
        }
      }
      return filterList.toArray();
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  viewer.getViewer().setLabelProvider(this);
  viewer.getViewer().setInput(filters);
  addListeners();
  setToolTips();
  return viewer.getControl();
}","public Control createContents(Composite parent){
  initColumnNames();
  viewer=new PropertyHandleTableViewer(parent,true,true,true);
  TableColumn column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[0]);
  column.setWidth(150);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[1]);
  column.setWidth(100);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[2]);
  column.setWidth(100);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[3]);
  column.setWidth(100);
  initializeFilters();
  viewer.getViewer().setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      ArrayList filterList=new ArrayList(10);
      Iterator iter=filters.iterator();
      if (iter != null) {
        while (iter.hasNext()) {
          filterList.add(iter.next());
        }
      }
      return filterList.toArray();
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  viewer.getViewer().setLabelProvider(new FilterTableProvider());
  viewer.getViewer().setInput(filters);
  addListeners();
  setToolTips();
  return viewer.getControl();
}",0.9891100262861434
69095,"/** 
 * get the the filter 
 * @param filterCondition
 * @return
 */
private String getValue1String(FilterCondition filterCondition){
  if (DesignChoiceConstants.FILTER_OPERATOR_IN.equals(filterCondition.getOperator()) || DesignChoiceConstants.FILTER_OPERATOR_NOT_IN.equals(filterCondition.getOperator())) {
    List value1List=filterCondition.getValue1List();
    StringBuffer buf=new StringBuffer();
    for (Iterator i=value1List.iterator(); i.hasNext(); ) {
      String value=(String)i.next();
      buf.append(value + ""String_Node_Str"");
    }
    if (buf.length() > 1) {
      buf.delete(buf.length() - 2,buf.length());
    }
    return buf.toString();
  }
 else {
    return filterCondition.getValue1();
  }
}","/** 
 * get the the filter
 * @param filterCondition
 * @return
 */
private String getValue1String(FilterCondition filterCondition){
  if (DesignChoiceConstants.FILTER_OPERATOR_IN.equals(filterCondition.getOperator()) || DesignChoiceConstants.FILTER_OPERATOR_NOT_IN.equals(filterCondition.getOperator())) {
    List value1List=filterCondition.getValue1List();
    StringBuffer buf=new StringBuffer();
    for (Iterator i=value1List.iterator(); i.hasNext(); ) {
      String value=(String)i.next();
      buf.append(value + ""String_Node_Str"");
    }
    if (buf.length() > 1) {
      buf.delete(buf.length() - 2,buf.length());
    }
    return buf.toString();
  }
 else {
    return filterCondition.getValue1();
  }
}",0.9993021632937892
69096,"public void setApplicationClassLoader(ClassLoader loader){
  this.applicationClassLoader=loader;
  Collection<IScriptEngine> engineSet=engines.values();
  for (  IScriptEngine engine : engineSet) {
    engine.setApplicationClassLoader(loader);
  }
}","/** 
 * the user can only set the application class loader to the top most context.
 */
public void setApplicationClassLoader(ClassLoader loader){
  if (parent != null) {
    parent.setApplicationClassLoader(loader);
  }
 else {
    this.applicationClassLoader=loader;
    Collection<IScriptEngine> engineSet=engines.values();
    for (    IScriptEngine engine : engineSet) {
      engine.setApplicationClassLoader(loader);
    }
  }
}",0.7280701754385965
69097,"public ClassLoader getApplicationClassLoader(){
  return applicationClassLoader;
}","public ClassLoader getApplicationClassLoader(){
  if (parent != null) {
    return parent.getApplicationClassLoader();
  }
  return applicationClassLoader;
}",0.6861924686192469
69098,"private IScriptEngine createEngine(IScriptEngineFactory factory) throws BirtException {
  IScriptEngine scriptEngine=factory.createScriptEngine();
  scriptEngine.setLocale(locale);
  scriptEngine.setTimeZone(timeZone);
  scriptEngine.setApplicationClassLoader(applicationClassLoader);
  engines.put(factory.getScriptLanguage(),scriptEngine);
  return scriptEngine;
}","private IScriptEngine createEngine(IScriptEngineFactory factory) throws BirtException {
  IScriptEngine scriptEngine=factory.createScriptEngine();
  scriptEngine.setLocale(locale);
  scriptEngine.setTimeZone(timeZone);
  scriptEngine.setApplicationClassLoader(getApplicationClassLoader());
  engines.put(factory.getScriptLanguage(),scriptEngine);
  return scriptEngine;
}",0.9905020352781548
69099,"public SheetData[] next(){
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  SheetData[] rowDatas=new SheetData[columnIndexes.length];
  for (int i=0; i < columnIndexes.length; i++) {
    ArrayList<SheetData> columnData=columns.get(i);
    int cursor=columnIndexes[i];
    int size=columnData.size();
    for (int j=cursor; j < size; j++) {
      SheetData data=columnData.get(j);
      int dataRowIndex=data.getRowIndex();
      if (dataRowIndex == rowIndex) {
        rowDatas[i]=data;
        if (!rowIndex2Height.isEmpty() && rowIndex2Height.containsKey(rowIndex))         rowDatas[i].setRowHeight(rowIndex2Height.get(rowIndex));
        columnIndexes[i]=j + 1;
        break;
      }
 else       if (dataRowIndex > rowIndex) {
        columnIndexes[i]=j;
        break;
      }
    }
  }
  rowIndex++;
  return rowDatas;
}","public SheetData[] next(){
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  SheetData[] rowDatas=new SheetData[columnIndexes.length];
  for (int i=0; i < columnIndexes.length; i++) {
    ArrayList<SheetData> columnData=columns.get(i);
    int cursor=columnIndexes[i];
    int size=columnData.size();
    for (int j=cursor; j < size; j++) {
      SheetData data=columnData.get(j);
      int dataRowIndex=data.getRowIndex();
      if (dataRowIndex == rowIndex) {
        rowDatas[i]=data;
        columnIndexes[i]=j + 1;
        break;
      }
 else       if (dataRowIndex > rowIndex) {
        columnIndexes[i]=j;
        break;
      }
    }
  }
  rowIndex++;
  return rowDatas;
}",0.9051948051948052
69100,"public void setRowHeight(int rowIndex,double height){
  if (!rowIndex2Height.containsKey(rowIndex))   rowIndex2Height.put(rowIndex,height);
}","public void setRowHeight(int rowIndex,double height){
  if (!rowIndex2Height.containsKey(rowIndex) || height > rowIndex2Height.get(rowIndex))   rowIndex2Height.put(rowIndex,height);
}",0.8703703703703703
69101,"/** 
 * It is not going to get the coordinate, but the colId relative to this coordinate. Gets the colId of the given coordinate point
 * @param value	 the coordinate point
 * @return the colId
 */
public int getColumnIndexByCoordinate(int value){
  int index=columnCoordinates.indexOf(value);
  return (index == -1) ? -1 : index;
}","/** 
 * It is not going to get the coordinate, but the colId relative to this coordinate. Gets the colId of the given coordinate point
 * @param value	 the coordinate point
 * @return the colId
 */
public int getColumnIndexByCoordinate(int value){
  return columnCoordinates.indexOf(value);
}",0.9134615384615384
69102,"private void synchronize(double height){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    SheetData lastData=cache.getColumnLastData(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    int span=lastData != null ? lastData.getRowSpanInDesign() : 0;
    if (span == 0 || (span == 1 && !isInContainer(lastData,rowContainer))) {
      maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
    }
  }
  int startRowIndex=rowContainer.getRowIndex();
  if (maxRowIndex == startRowIndex) {
    maxRowIndex++;
  }
  rowContainer.setRowIndex(maxRowIndex);
  double resize=height / (maxRowIndex - startRowIndex);
  for (int i=startRowIndex + 1; i <= maxRowIndex; i++) {
    cache.setRowHeight(i,resize);
  }
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    SheetData upstair=cache.getColumnLastData(currentColumnIndex);
    if (rowspan > 0) {
      if (upstair != null && canSpan(upstair,rowContainer)) {
        if (upstair.isBlank()) {
          SheetData real=getRealData(upstair);
          if (real.getRowIndex() != upstair.getRowIndex()) {
            upstair.setRowSpan(upstair.getRowSpan() + rowspan);
          }
        }
 else {
          upstair.setRowSpan(upstair.getRowSpan() + rowspan);
        }
        SheetData realData=getRealData(upstair);
        if (!isInContainer(upstair,rowContainer)) {
          realData.decreasRowSpanInDesign();
        }
        int rowIndex=upstair.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(upstair);
          blank.setRowIndex(rowIndex + p);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
 else     if (upstair.getRowSpanInDesign() > 0 && !isInContainer(upstair,rowContainer)) {
      upstair.decreasRowSpanInDesign();
    }
  }
}","private void synchronize(double height){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    SheetData lastData=cache.getColumnLastData(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    int span=lastData != null ? lastData.getRowSpanInDesign() : 0;
    if (span == 0 || (span == 1 && !isInContainer(lastData,rowContainer))) {
      maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
    }
  }
  int startRowIndex=rowContainer.getRowIndex();
  if (maxRowIndex == startRowIndex) {
    maxRowIndex++;
  }
  rowContainer.setRowIndex(maxRowIndex);
  double resize=height / (maxRowIndex - startRowIndex);
  for (int i=startRowIndex; i < maxRowIndex; i++) {
    cache.setRowHeight(i,resize);
  }
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    SheetData upstair=cache.getColumnLastData(currentColumnIndex);
    if (rowspan > 0) {
      if (upstair != null && canSpan(upstair,rowContainer)) {
        Type blankType=Type.VERTICAL;
        if (upstair.isBlank()) {
          BlankData blankData=(BlankData)upstair;
          if (blankData.getType() == Type.VERTICAL) {
            upstair.setRowSpan(upstair.getRowSpan() + rowspan);
          }
          blankType=blankData.getType();
        }
 else {
          upstair.setRowSpan(upstair.getRowSpan() + rowspan);
        }
        SheetData realData=getRealData(upstair);
        if (!isInContainer(upstair,rowContainer)) {
          realData.decreasRowSpanInDesign();
        }
        int rowIndex=upstair.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(upstair);
          blank.setRowIndex(rowIndex + p);
          blank.setType(blankType);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
 else     if (upstair.getRowSpanInDesign() > 0 && !isInContainer(upstair,rowContainer)) {
      upstair.decreasRowSpanInDesign();
    }
  }
}",0.8711943793911007
69103,"public RowData next(){
  SheetData[] row=rowIterator.next();
  List<SheetData> data=new ArrayList<SheetData>();
  int width=Math.min(row.length,maxCol - 1);
  double rowHeight=DEFAULT_ROW_HEIGHT;
  for (int i=0; i < width; i++) {
    SheetData d=row[i];
    if (d == null || d.isBlank()) {
      continue;
    }
    if (d.isProcessed()) {
      continue;
    }
    d.setProcessed(true);
    data.add(row[i]);
    double height=d.getRowHeight();
    rowHeight=height > rowHeight ? height : rowHeight;
  }
  SheetData[] rowdata=new SheetData[data.size()];
  data.toArray(rowdata);
  return new RowData(rowdata,rowHeight);
}","public RowData next(){
  SheetData[] row=rowIterator.next();
  List<SheetData> data=new ArrayList<SheetData>();
  int width=Math.min(row.length,maxCol - 1);
  int rowIndex=0;
  for (int i=0; i < width; i++) {
    SheetData d=row[i];
    if (d == null || d.isBlank()) {
      continue;
    }
    if (d.isProcessed()) {
      continue;
    }
    rowIndex=d.getRowIndex();
    d.setProcessed(true);
    data.add(row[i]);
  }
  SheetData[] rowdata=new SheetData[data.size()];
  double rowHeight=Math.max(DEFAULT_ROW_HEIGHT,cache.getRowHeight(rowIndex - 1));
  data.toArray(rowdata);
  return new RowData(rowdata,rowHeight);
}",0.3156199677938808
69104,"private SheetData getRealData(SheetData data){
  if (data.isBlank()) {
    return ((BlankData)data).getData();
  }
  return data;
}","private SheetData getRealData(SheetData data){
  while (data.isBlank()) {
    data=((BlankData)data).getData();
  }
  return data;
}",0.9429657794676806
69105,"private Data createData(Object text,StyleEntry s,int dataType,XlsContainer container,int rowSpanOfDesign){
  Data data=createData();
  data.setValue(text);
  data.setStyle(s);
  data.setDataType(dataType);
  data.setContainer(container);
  data.setRowSpanInDesign(rowSpanOfDesign);
  lastData=data;
  return data;
}","protected Data createData(Object text,StyleEntry s,int dataType,XlsContainer container,int rowSpanOfDesign){
  Data data=createData();
  data.setValue(text);
  data.setStyle(s);
  data.setDataType(dataType);
  data.setContainer(container);
  data.setRowSpanInDesign(rowSpanOfDesign);
  lastData=data;
  return data;
}",0.981012658227848
69106,"protected void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getSizeInfo().getStartCoordinate());
  if (col == -1 || col >= cache.getColumnCount())   return;
  int span=axis.getColumnIndexByCoordinate(data.getSizeInfo().getEndCoordinate()) - col;
  applyTopBorderStyle(data);
  outputDataIfBufferIsFull();
  updataRowIndex(data,container);
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(data);
    addDatatoCache(i,blankData);
  }
  if (container instanceof XlsCell) {
    XlsCell cell=(XlsCell)container;
    data.setRowSpanInDesign(cell.getRowSpan() - 1);
  }
  lastData=data;
}","protected void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getSizeInfo().getStartCoordinate());
  if (col == -1 || col >= cache.getColumnCount())   return;
  int span=axis.getColumnIndexByCoordinate(data.getSizeInfo().getEndCoordinate()) - col;
  applyTopBorderStyle(data);
  outputDataIfBufferIsFull();
  updataRowIndex(data,container);
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(data);
    blankData.setType(Type.HORIZONTAL);
    addDatatoCache(i,blankData);
  }
  if (container instanceof XlsCell) {
    XlsCell cell=(XlsCell)container;
    data.setRowSpanInDesign(cell.getRowSpan() - 1);
  }
  lastData=data;
}",0.9739243807040416
69107,"public void complete(){
  engine.applyContainerBottomStyle(containers.get(0));
  Iterator<SheetData[]> iterator=cache.getRowIterator();
  while (iterator.hasNext()) {
    SheetData[] rowData=iterator.next();
    for (int j=0; j < rowData.length; j++) {
      SheetData data=rowData[j];
      if (data == null || data.isBlank()) {
        continue;
      }
      int styleid=engine.getStyleID(data.getStyle());
      data.setStyleId(styleid);
      ContainerSizeInfo rule=data.getSizeInfo();
      int start=axis.getColumnIndexByCoordinate(rule.getStartCoordinate()) + 1;
      int end=axis.getColumnIndexByCoordinate(rule.getEndCoordinate()) + 1;
      end=Math.min(end,maxCol);
      int scount=Math.max(0,end - start - 1);
      Span span=new Span(start,scount);
      data.setSpan(span);
      HyperlinkDef hyperLink=data.getHyperlinkDef();
      if (hyperLink != null) {
        if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
          setLinkedBookmark(data,hyperLink);
        }
      }
    }
  }
}","public void complete(){
  engine.applyContainerBottomStyle(containers.get(0));
  Iterator<SheetData[]> iterator=cache.getRowIterator();
  while (iterator.hasNext()) {
    SheetData[] rowData=iterator.next();
    for (int j=0; j < rowData.length; j++) {
      SheetData data=rowData[j];
      if (data == null || data.isBlank()) {
        continue;
      }
      int styleid=engine.getStyleID(data.getStyle());
      data.setStyleId(styleid);
      ContainerSizeInfo rule=data.getSizeInfo();
      int start=axis.getColumnIndexByCoordinate(rule.getStartCoordinate()) + 1;
      int end=axis.getColumnIndexByCoordinate(rule.getEndCoordinate()) + 1;
      end=Math.min(end,maxCol);
      int scount=Math.max(0,end - start - 1);
      Span span=new Span(start,scount);
      data.setSpan(span);
      HyperlinkDef hyperLink=data.getHyperlinkDef();
      if (hyperLink != null) {
        if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
          setLinkedBookmark(data,hyperLink);
        }
      }
    }
    calculateRowHeight(rowData);
  }
}",0.984081041968162
69108,"CrosstabCellHandle addGrandTotal(List<MeasureViewHandle> measureList,List<String> functionList,boolean needTransaction) throws SemanticException {
  if (!isValidParameters(functionList,measureList))   return null;
  verifyTotalMeasureFunctions(crosstabView.getAxisType(),functionList,measureList);
  PropertyHandle propHandle=crosstabView.getGrandTotalProperty();
  CommandStack stack=null;
  if (needTransaction) {
    stack=crosstabView.getCommandStack();
    stack.startTrans(Messages.getString(""String_Node_Str""));
  }
  CrosstabCellHandle totalCell=null;
  try {
    ExtendedItemHandle grandTotal=null;
    if (propHandle.getContentCount() <= 0) {
      grandTotal=CrosstabExtendedItemFactory.createCrosstabCell(crosstabView.getModuleHandle());
      propHandle.add(grandTotal);
    }
    CrosstabReportItemHandle crosstab=crosstabView.getCrosstab();
    if (crosstab != null && measureList != null) {
      boolean isVerticalMeasure=MEASURE_DIRECTION_VERTICAL.equals(crosstab.getMeasureDirection());
      boolean needCheckCounterAxis=((isVerticalMeasure && crosstabView.getAxisType() == COLUMN_AXIS_TYPE) || (!isVerticalMeasure && crosstabView.getAxisType() == ROW_AXIS_TYPE));
      addMeasureAggregations(crosstabView.getAxisType(),measureList,functionList,needCheckCounterAxis);
      addTotalMeasureHeader(crosstabView.getAxisType(),null,measureList);
    }
    validateCrosstab();
    totalCell=(CrosstabCellHandle)CrosstabUtil.getReportItem(grandTotal);
  }
 catch (  SemanticException e) {
    crosstabView.getLogger().log(Level.INFO,e.getMessage(),e);
    if (needTransaction) {
      stack.rollback();
    }
    throw e;
  }
  if (needTransaction) {
    stack.commit();
  }
  return totalCell;
}","CrosstabCellHandle addGrandTotal(List<MeasureViewHandle> measureList,List<String> functionList,boolean needTransaction) throws SemanticException {
  if (!isValidParameters(functionList,measureList))   return null;
  verifyTotalMeasureFunctions(crosstabView.getAxisType(),functionList,measureList);
  PropertyHandle propHandle=crosstabView.getGrandTotalProperty();
  CommandStack stack=null;
  if (needTransaction) {
    stack=crosstabView.getCommandStack();
    stack.startTrans(Messages.getString(""String_Node_Str""));
  }
  CrosstabCellHandle totalCell=null;
  try {
    ExtendedItemHandle grandTotal=null;
    if (propHandle.getContentCount() <= 0) {
      grandTotal=CrosstabExtendedItemFactory.createCrosstabCell(crosstabView.getModuleHandle());
      propHandle.add(grandTotal);
    }
    CrosstabReportItemHandle crosstab=crosstabView.getCrosstab();
    if (crosstab != null && measureList != null) {
      boolean isVerticalMeasure=MEASURE_DIRECTION_VERTICAL.equals(crosstab.getMeasureDirection());
      boolean needCheckCounterAxis=((isVerticalMeasure && crosstabView.getAxisType() == COLUMN_AXIS_TYPE) || (!isVerticalMeasure && crosstabView.getAxisType() == ROW_AXIS_TYPE));
      addMeasureAggregations(crosstabView.getAxisType(),measureList,functionList,needCheckCounterAxis);
      addTotalMeasureHeader(crosstabView.getAxisType(),null,measureList);
    }
    validateCrosstab();
    if (measureList != null && functionList != null) {
      for (int i=0; i < measureList.size(); i++) {
        MeasureViewHandle mv=measureList.get(i);
        String func=functionList.get(i);
        setAggregationFunction(mv,func);
      }
    }
    totalCell=(CrosstabCellHandle)CrosstabUtil.getReportItem(grandTotal);
  }
 catch (  SemanticException e) {
    crosstabView.getLogger().log(Level.INFO,e.getMessage(),e);
    if (needTransaction) {
      stack.rollback();
    }
    throw e;
  }
  if (needTransaction) {
    stack.commit();
  }
  return totalCell;
}",0.9316634903348762
69109,"/** 
 * Gets the aggregation function for the level view sub-total. If the level view is null or not define any sub-total, return null.
 * @param measureView
 * @param function
 * @return
 * @throws SemanticException
 */
public void setAggregationFunction(MeasureViewHandle measureView,String function) throws SemanticException {
  if (focus.getAggregationHeader() == null || focus.getCubeLevelName() == null || focus.getCubeLevelName().length() <= 0 || measureView == null)   return;
  if (crosstab == null || crosstab != measureView.getCrosstab())   return;
  String levelName=focus.getCubeLevelName();
  int axisType=focus.getAxisType();
  String propName=CrosstabModelUtil.getAggregationOnPropName(axisType);
  CommandStack stack=crosstab.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  try {
    for (int j=0; j < measureView.getAggregationCount(); j++) {
      AggregationCellHandle cell=measureView.getAggregationCell(j);
      if (levelName.equals(cell.getModelHandle().getStringProperty(propName))) {
        CrosstabModelUtil.setAggregationFunction(crosstab,cell,function);
      }
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}","/** 
 * Gets the aggregation function for the level view sub-total. If the level view is null or not define any sub-total, return null.
 * @param measureView
 * @param function
 * @return
 * @throws SemanticException
 */
public void setAggregationFunction(MeasureViewHandle measureView,String function) throws SemanticException {
  if (focus.getAggregationHeader() == null || focus.getCubeLevelName() == null || focus.getCubeLevelName().length() <= 0 || measureView == null)   return;
  if (crosstab == null || crosstab != measureView.getCrosstab()) {
    return;
  }
  String levelName=focus.getCubeLevelName();
  int axisType=focus.getAxisType();
  String propName=CrosstabModelUtil.getAggregationOnPropName(axisType);
  CommandStack stack=crosstab.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  try {
    for (int j=0; j < measureView.getAggregationCount(); j++) {
      AggregationCellHandle cell=measureView.getAggregationCell(j);
      if (levelName.equals(cell.getModelHandle().getStringProperty(propName))) {
        CrosstabModelUtil.setAggregationFunction(crosstab,cell,function);
      }
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}",0.9894222945484134
69110,"/** 
 * @param measureList
 * @param functionList
 * @param levelView
 * @return
 * @throws SemanticException
 */
CrosstabCellHandle addSubTotal(List<MeasureViewHandle> measureList,List<String> functionList,boolean needTransaction) throws SemanticException {
  if (focus == null || !isValidParameters(functionList,measureList))   return null;
  verifyTotalMeasureFunctions(focus.getAxisType(),functionList,measureList);
  if (focus.isInnerMost()) {
    focus.getLogger().log(Level.WARNING,""String_Node_Str"" + focus.getModelHandle().getName() + ""String_Node_Str"");
    return null;
  }
  if (focus.getAggregationHeader() != null) {
    focus.getLogger().log(Level.INFO,""String_Node_Str"");
  }
  CommandStack stack=null;
  if (needTransaction) {
    stack=focus.getCommandStack();
    stack.startTrans(Messages.getString(""String_Node_Str""));
  }
  try {
    if (focus.getAggregationHeader() == null)     focus.getAggregationHeaderProperty().add(CrosstabExtendedItemFactory.createCrosstabCell(focus.getModuleHandle()));
    if (crosstab != null && measureList != null) {
      boolean isVerticalMeasure=MEASURE_DIRECTION_VERTICAL.equals(crosstab.getMeasureDirection());
      boolean needCheckCounterAxis=((isVerticalMeasure && focus.getAxisType() == COLUMN_AXIS_TYPE) || (!isVerticalMeasure && focus.getAxisType() == ROW_AXIS_TYPE));
      addMeasureAggregations(focus,measureList,functionList,needCheckCounterAxis);
      addTotalMeasureHeader(focus.getAxisType(),focus,measureList);
    }
    validateCrosstab();
  }
 catch (  SemanticException e) {
    focus.getLogger().log(Level.WARNING,e.getMessage(),e);
    if (needTransaction) {
      stack.rollback();
    }
    throw e;
  }
  if (needTransaction) {
    stack.commit();
  }
  return focus.getAggregationHeader();
}","/** 
 * @param measureList
 * @param functionList
 * @param levelView
 * @return
 * @throws SemanticException
 */
CrosstabCellHandle addSubTotal(List<MeasureViewHandle> measureList,List<String> functionList,boolean needTransaction) throws SemanticException {
  if (focus == null || !isValidParameters(functionList,measureList))   return null;
  verifyTotalMeasureFunctions(focus.getAxisType(),functionList,measureList);
  if (focus.isInnerMost()) {
    focus.getLogger().log(Level.WARNING,""String_Node_Str"" + focus.getModelHandle().getName() + ""String_Node_Str"");
    return null;
  }
  if (focus.getAggregationHeader() != null) {
    focus.getLogger().log(Level.INFO,""String_Node_Str"");
  }
  CommandStack stack=null;
  if (needTransaction) {
    stack=focus.getCommandStack();
    stack.startTrans(Messages.getString(""String_Node_Str""));
  }
  try {
    if (focus.getAggregationHeader() == null)     focus.getAggregationHeaderProperty().add(CrosstabExtendedItemFactory.createCrosstabCell(focus.getModuleHandle()));
    if (crosstab != null && measureList != null) {
      boolean isVerticalMeasure=MEASURE_DIRECTION_VERTICAL.equals(crosstab.getMeasureDirection());
      boolean needCheckCounterAxis=((isVerticalMeasure && focus.getAxisType() == COLUMN_AXIS_TYPE) || (!isVerticalMeasure && focus.getAxisType() == ROW_AXIS_TYPE));
      addMeasureAggregations(focus,measureList,functionList,needCheckCounterAxis);
      addTotalMeasureHeader(focus.getAxisType(),focus,measureList);
    }
    validateCrosstab();
    if (measureList != null && functionList != null) {
      for (int i=0; i < measureList.size(); i++) {
        MeasureViewHandle mv=measureList.get(i);
        String func=functionList.get(i);
        setAggregationFunction(mv,func);
      }
    }
  }
 catch (  SemanticException e) {
    focus.getLogger().log(Level.WARNING,e.getMessage(),e);
    if (needTransaction) {
      stack.rollback();
    }
    throw e;
  }
  if (needTransaction) {
    stack.commit();
  }
  return focus.getAggregationHeader();
}",0.9338603425559948
69111,"private void addContainer(XlsContainer child){
  XlsContainer parent=child.getParent();
  if (parent != null) {
    parent.setEmpty(false);
  }
  containers.push(child);
}","private void addContainer(XlsContainer child){
  XlsContainer parent=child.getParent();
  if (parent instanceof XlsCell) {
    addEmptyDataToContainer(child,parent);
  }
  if (parent != null) {
    parent.setEmpty(false);
  }
  containers.push(child);
}",0.8066037735849056
69112,"/** 
 * Constructor of the class.
 * @param chartTypePrefix the prefix string of chart type.
 * @param typeLiteral comment for type literal.
 * @param riserType riser type of bar series.
 */
public AbstractBarChart(String chartTypePrefix,String typeLiteral,RiserType riserType){
  fsChartTypePrefix=chartTypePrefix;
  fsTypeLiteral=typeLiteral;
  foRiserType=riserType;
}","/** 
 * Constructor of the class.
 * @param chartTypePrefix the prefix string of chart type.
 * @param typeLiteral comment for type literal.
 * @param riserType riser type of bar series.
 */
public AbstractBarChart(String chartTypePrefix,String typeLiteral,RiserType riserType){
  fsChartTypePrefix=chartTypePrefix;
  fsTypeLiteral=typeLiteral;
  foRiserType=riserType;
  super.chartTitle=Messages.getString(fsChartTypePrefix + ""String_Node_Str"" + fsChartTypePrefix+ ""String_Node_Str"");
}",0.8637951105937136
69113,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if ((currentChart instanceof ChartWithAxes)) {
    if (!currentChart.getType().equals(fsTypeLiteral)) {
      currentChart.setType(fsTypeLiteral);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(getDefaultTitle());
      ArrayList<AxisType> axisTypes=new ArrayList<AxisType>();
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).setPercent(sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
            axes.get(i).setType(AxisType.LINEAR_LITERAL);
          }
          boolean isStacked=(sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
          series.setStacked(isStacked);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),axisTypes));
    }
 else {
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!currentChart.getSubType().equals(sNewSubType)) {
          if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
            if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
              axes.get(i).setType(AxisType.LINEAR_LITERAL);
            }
            axes.get(i).setPercent(true);
          }
 else {
            axes.get(i).setPercent(false);
          }
        }
        EList seriesdefinitions=(axes.get(i)).getSeriesDefinitions();
        Series firstSeries=((SeriesDefinition)seriesdefinitions.get(0)).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
              (axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(fsTypeLiteral);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((ChartWithAxes)currentChart).getAxes().get(0).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((ChartWithAxes)currentChart).getAxes().get(0).setCategoryAxis(true);
    ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
{
      (((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      (((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=(seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        (seriesdefinitions.get(j)).getSeries().clear();
        (seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(getDefaultTitle());
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList<SeriesDefinition> seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=seriesdefinitions.get(j).getDesignTimeSeries();
      ((BarSeries)series).setRiser(foRiserType);
      series.setStacked(false);
      if ((series instanceof BarSeries) && (series.getLabelPosition() != Position.OUTSIDE_LITERAL)) {
        series.setLabelPosition(Position.OUTSIDE_LITERAL);
      }
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (!currentChart.getType().equals(fsTypeLiteral)) {
      currentChart.setType(fsTypeLiteral);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      ArrayList<AxisType> axisTypes=new ArrayList<AxisType>();
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).setPercent(sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
            axes.get(i).setType(AxisType.LINEAR_LITERAL);
          }
          boolean isStacked=(sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
          series.setStacked(isStacked);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),axisTypes));
    }
 else {
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!currentChart.getSubType().equals(sNewSubType)) {
          if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
            if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
              axes.get(i).setType(AxisType.LINEAR_LITERAL);
            }
            axes.get(i).setPercent(true);
          }
 else {
            axes.get(i).setPercent(false);
          }
        }
        EList seriesdefinitions=(axes.get(i)).getSeriesDefinitions();
        Series firstSeries=((SeriesDefinition)seriesdefinitions.get(0)).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
              (axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(fsTypeLiteral);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((ChartWithAxes)currentChart).getAxes().get(0).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((ChartWithAxes)currentChart).getAxes().get(0).setCategoryAxis(true);
    ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
{
      (((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      (((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=(seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        (seriesdefinitions.get(j)).getSeries().clear();
        (seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList<SeriesDefinition> seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=seriesdefinitions.get(j).getDesignTimeSeries();
      ((BarSeries)series).setRiser(foRiserType);
      series.setStacked(false);
      if ((series instanceof BarSeries) && (series.getLabelPosition() != Position.OUTSIDE_LITERAL)) {
        series.setLabelPosition(Position.OUTSIDE_LITERAL);
      }
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}",0.9548922917207372
69114,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
            ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
          }
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        Series firstSeries=((SeriesDefinition)seriesdefinitions.get(0)).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
              ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      ArrayList axisTypes=new ArrayList();
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
      series.setStacked(false);
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
            ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
          }
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        Series firstSeries=((SeriesDefinition)seriesdefinitions.get(0)).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
              ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      ArrayList axisTypes=new ArrayList();
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
      series.setStacked(false);
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}",0.976327150244319
69115,"public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setOrientation(orientation);
  newChart.setDimension(ChartUIUtil.getDimensionType(sDimension));
  newChart.setUnits(""String_Node_Str"");
  ((Axis)newChart.getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setCategoryAxis(true);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getSeriesPalette().shift(0);
  ((Axis)newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  newChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  if (sSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL)) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().shift(0);
    Series valueSeries=getSeries();
    ((AreaSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setPercent(true);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().shift(0);
    Series valueSeries=getSeries();
    ((AreaSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(OVERLAY_SUBTYPE_LITERAL)) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().shift(0);
    Series valueSeries=getSeries();
    ((AreaSeries)valueSeries).setStacked(false);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
  if (sDimension.equals(THREE_DIMENSION_TYPE)) {
    newChart.setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    newChart.setUnitSpacing(50);
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    newChart.getPrimaryOrthogonalAxis(newChart.getPrimaryBaseAxes()[0]).getTitle().getCaption().getFont().setRotation(0);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
  }
  addSampleData(newChart);
  return newChart;
}","public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setOrientation(orientation);
  newChart.setDimension(ChartUIUtil.getDimensionType(sDimension));
  newChart.setUnits(""String_Node_Str"");
  ((Axis)newChart.getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setCategoryAxis(true);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getSeriesPalette().shift(0);
  ((Axis)newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  newChart.getTitle().getLabel().getCaption().setValue(getDefaultTitle());
  if (sSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL)) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().shift(0);
    Series valueSeries=getSeries();
    ((AreaSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setPercent(true);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().shift(0);
    Series valueSeries=getSeries();
    ((AreaSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(OVERLAY_SUBTYPE_LITERAL)) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().shift(0);
    Series valueSeries=getSeries();
    ((AreaSeries)valueSeries).setStacked(false);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
  if (sDimension.equals(THREE_DIMENSION_TYPE)) {
    newChart.setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    newChart.setUnitSpacing(50);
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    newChart.getPrimaryOrthogonalAxis(newChart.getPrimaryBaseAxes()[0]).getTitle().getCaption().getFont().setRotation(0);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
  }
  addSampleData(newChart);
  return newChart;
}",0.9968152866242038
69116,"public AreaChart(){
  imgIcon=UIHelper.getImage(""String_Node_Str"");
}","public AreaChart(){
  imgIcon=UIHelper.getImage(""String_Node_Str"");
  super.chartTitle=Messages.getString(""String_Node_Str"");
}",0.7040816326530612
69117,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      Axis xAxis=((Axis)((ChartWithAxes)currentChart).getAxes().get(0));
      xAxis.setCategoryAxis(false);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      ArrayList axisTypes=new ArrayList();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      Axis xAxis=((Axis)((ChartWithAxes)currentChart).getAxes().get(0));
      xAxis.setCategoryAxis(false);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      ArrayList axisTypes=new ArrayList();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}",0.9642114322599152
69118,"public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setOrientation(orientation);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  ((Axis)newChart.getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setCategoryAxis(false);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  Series baseSeries=SeriesImpl.create();
  sdX.getSeries().add(baseSeries);
  sdX.getSeriesPalette().shift(0);
  ((Axis)newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  newChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
  SeriesDefinition sdY=SeriesDefinitionImpl.create();
  sdY.getSeriesPalette().shift(0);
  Series orthogonalSeries=BubbleSeriesImpl.create();
  ((BubbleSeries)orthogonalSeries).setStacked(false);
  sdY.getSeries().add(orthogonalSeries);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  if (sSubType.equalsIgnoreCase(STANDARD_SUBTYPE_LITERAL)) {
    newChart.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  }
  addSampleData(newChart);
  return newChart;
}","public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setOrientation(orientation);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  ((Axis)newChart.getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setCategoryAxis(false);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  Series baseSeries=SeriesImpl.create();
  sdX.getSeries().add(baseSeries);
  sdX.getSeriesPalette().shift(0);
  ((Axis)newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  newChart.getTitle().getLabel().getCaption().setValue(getDefaultTitle());
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
  SeriesDefinition sdY=SeriesDefinitionImpl.create();
  sdY.getSeriesPalette().shift(0);
  Series orthogonalSeries=BubbleSeriesImpl.create();
  ((BubbleSeries)orthogonalSeries).setStacked(false);
  sdY.getSeries().add(orthogonalSeries);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  if (sSubType.equalsIgnoreCase(STANDARD_SUBTYPE_LITERAL)) {
    newChart.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  }
  addSampleData(newChart);
  return newChart;
}",0.9922992299229924
69119,"public BubbleChart(){
  imgIcon=UIHelper.getImage(""String_Node_Str"");
}","public BubbleChart(){
  imgIcon=UIHelper.getImage(""String_Node_Str"");
  super.chartTitle=Messages.getString(""String_Node_Str"");
}",0.71
69120,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      ArrayList axisTypes=new ArrayList();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      ArrayList axisTypes=new ArrayList();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  return currentChart;
}",0.963973720309003
69121,"public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setOrientation(orientation);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  ((Axis)newChart.getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setCategoryAxis(true);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getSeriesPalette().shift(0);
  ((Axis)newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  newChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
  SeriesDefinition sdY=SeriesDefinitionImpl.create();
  sdY.getSeriesPalette().shift(0);
  Series valueSeries=DifferenceSeriesImpl.create();
  ((Marker)((DifferenceSeries)valueSeries).getMarkers().get(0)).setVisible(false);
  ((DifferenceSeries)valueSeries).getLineAttributes().setColor(ColorDefinitionImpl.BLUE());
  ((DifferenceSeries)valueSeries).setStacked(false);
  sdY.getSeries().add(valueSeries);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  addSampleData(newChart);
  return newChart;
}","public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setOrientation(orientation);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  ((Axis)newChart.getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setCategoryAxis(true);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getSeriesPalette().shift(0);
  ((Axis)newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  newChart.getTitle().getLabel().getCaption().setValue(getDefaultTitle());
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
  SeriesDefinition sdY=SeriesDefinitionImpl.create();
  sdY.getSeriesPalette().shift(0);
  Series valueSeries=DifferenceSeriesImpl.create();
  ((Marker)((DifferenceSeries)valueSeries).getMarkers().get(0)).setVisible(false);
  ((DifferenceSeries)valueSeries).getLineAttributes().setColor(ColorDefinitionImpl.BLUE());
  ((DifferenceSeries)valueSeries).setStacked(false);
  sdY.getSeries().add(valueSeries);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  addSampleData(newChart);
  return newChart;
}",0.9924690693921464
69122,"public DifferenceChart(){
  imgIcon=UIHelper.getImage(""String_Node_Str"");
}","public DifferenceChart(){
  imgIcon=UIHelper.getImage(""String_Node_Str"");
  super.chartTitle=Messages.getString(""String_Node_Str"");
}",0.7211538461538461
69123,"public static void showException(String key,String errorMessage){
  if (errorMessage != null) {
    WizardBase.showException(errorMessage);
    errors.put(key,errorMessage);
  }
}","public static void showException(String key,String errorMessage){
  if (errorMessage != null) {
    try {
      WizardBase.showException(errorMessage);
    }
 catch (    Exception e) {
    }
    errors.put(key,errorMessage);
  }
}",0.8753056234718827
69124,"public static void removeException(String key){
  boolean removed=false;
  String error=errors.get(key);
  if (error != null && error.equals(WizardBase.getErrors())) {
    WizardBase.removeException();
    removed=true;
  }
  errors.remove(key);
  if ((removed || WizardBase.getErrors() == null) && errors.size() > 0) {
    String es=errors.values().toArray(new String[errors.size()])[0];
    WizardBase.showException(es);
  }
}","public static void removeException(String key){
  boolean removed=false;
  String error=errors.get(key);
  if (error != null && error.equals(WizardBase.getErrors())) {
    try {
      WizardBase.removeException();
    }
 catch (    Exception e) {
    }
    removed=true;
  }
  errors.remove(key);
  if ((removed || WizardBase.getErrors() == null) && errors.size() > 0) {
    String es=errors.values().toArray(new String[errors.size()])[0];
    WizardBase.showException(es);
  }
}",0.9437706725468578
69125,"public IWizardContext open(String[] sTasks,String topTaskId,IWizardContext initialContext){
  errors.clear();
  Chart chart=getChartModel(initialContext);
  if (chart == null) {
    setTitle(getTitleNewChart());
  }
 else {
    setTitle(getTitleEditChart());
    getAdaptableObject(initialContext).eAdapters().add(adapter);
  }
  if (chart == null) {
    topTaskId=null;
  }
 else   if (topTaskId == null) {
    topTaskId=lastTask.get(initialContext.getWizardID());
  }
  return super.open(sTasks,topTaskId,initialContext);
}","public IWizardContext open(String[] sTasks,String topTaskId,IWizardContext initialContext){
  Chart chart=getChartModel(initialContext);
  if (chart == null) {
    setTitle(getTitleNewChart());
  }
 else {
    setTitle(getTitleEditChart());
    getAdaptableObject(initialContext).eAdapters().add(adapter);
  }
  if (chart == null) {
    topTaskId=null;
  }
 else   if (topTaskId == null) {
    topTaskId=lastTask.get(initialContext.getWizardID());
  }
  return super.open(sTasks,topTaskId,initialContext);
}",0.9825581395348836
69126,"private BaseFont createBaseFont(String physicalFont){
  BaseFont font=(BaseFont)fonts.get(physicalFont);
  if (font == null) {
    font=fontManager.createFont(physicalFont,fontStyle);
    if (font != null) {
      fonts.put(physicalFont,font);
    }
  }
  return font;
}","private BaseFont createBaseFont(String physicalFont){
  BaseFont font=(BaseFont)fonts.get(physicalFont);
  if (font == null) {
    font=fontManager.createFont(physicalFont,fontStyle);
    fonts.put(physicalFont,font);
  }
  return font;
}",0.7519685039370079
69127,"static boolean isNextWith(IContent content1,IContent content2){
  if (content1 == null || content2 == null || content1 == content2) {
    return false;
  }
  InstanceID id1=content1.getInstanceID();
  InstanceID id2=content2.getInstanceID();
  if (id1 == null || id2 == null) {
    return false;
  }
  if (id2.getUniqueID() == 0) {
    IContent parent2=(IContent)content2.getParent();
    if (parent2 instanceof IListBandContent || parent2 instanceof ITableBandContent) {
      InstanceID pid2=parent2.getInstanceID();
      if (pid2 == null) {
        return false;
      }
 else {
        if (pid2.getUniqueID() == 0) {
          return isNextWith(content1,parent2);
        }
 else {
          if (!content1.isLastChild()) {
            return false;
          }
          IContent parent1=(IContent)content1.getParent();
          while (parent1.isLastChild()) {
            parent1=(IContent)parent1.getParent();
          }
          if (parent1 instanceof IListBandContent || parent1 instanceof ITableBandContent) {
            return isSilbing(parent1,parent2);
          }
 else {
            return false;
          }
        }
      }
    }
 else {
      return equals(content1,parent2);
    }
  }
 else {
    if (content1 instanceof IContainerContent) {
      IContainerContent container=(IContainerContent)content1;
      if (container.getChildren().size() > 0) {
        return false;
      }
    }
    if (content1.isLastChild()) {
      IContent parent1=(IContent)content1.getParent();
      while (parent1.isLastChild()) {
        parent1=(IContent)parent1.getParent();
      }
      if (parent1 instanceof IListBandContent || parent1 instanceof ITableBandContent) {
        return false;
      }
 else {
        return isSilbing(parent1,content2);
      }
    }
 else {
      return isSilbing(content1,content2);
    }
  }
}","static boolean isNextWith(IContent content1,IContent content2){
  if (content1 == null || content2 == null || content1 == content2) {
    return false;
  }
  InstanceID id1=content1.getInstanceID();
  InstanceID id2=content2.getInstanceID();
  if (id1 == null || id2 == null) {
    return false;
  }
  if (id2.getUniqueID() == 0) {
    IContent parent2=(IContent)content2.getParent();
    if (parent2 instanceof IListBandContent || parent2 instanceof ITableBandContent) {
      InstanceID pid2=parent2.getInstanceID();
      if (pid2 == null) {
        return false;
      }
 else {
        if (pid2.getUniqueID() == 0) {
          return isNextWith(content1,parent2);
        }
 else {
          if (!content1.isLastChild()) {
            return false;
          }
          IContent parent1=(IContent)content1.getParent();
          while (parent1.isLastChild()) {
            parent1=(IContent)parent1.getParent();
          }
          if (parent1 instanceof IListBandContent || parent1 instanceof ITableBandContent) {
            return isSibling(parent1,parent2);
          }
 else {
            return false;
          }
        }
      }
    }
 else {
      return equals(content1,parent2);
    }
  }
 else {
    if (content1.hasChildren()) {
      return false;
    }
    if (content1.isLastChild()) {
      IContent parent1=(IContent)content1.getParent();
      while (parent1.isLastChild()) {
        parent1=(IContent)parent1.getParent();
      }
      if (parent1 instanceof IListBandContent || parent1 instanceof ITableBandContent) {
        return false;
      }
 else {
        return isSibling(parent1,content2);
      }
    }
 else {
      return isSibling(content1,content2);
    }
  }
}",0.8647125140924464
69128,"public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  if (ChartXTabUtil.isAxisChart(eih)) {
    DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=org.eclipse.birt.chart.reportitem.i18n.Messages.getString(""String_Node_Str"");
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : cm.copyInstance();
    if (cmClone != null) {
      maintainCompatibility(cmClone);
    }
    final Object[] applyData=new Object[3];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    ReportDataServiceProvider dataProvider=new ReportDataServiceProvider(extendedHandle);
    ChartReportItemUIFactory uiFactory=ChartReportItemUIFactory.instance();
    IChartDataSheet dataSheet=uiFactory.createDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=uiFactory.createWizardContext(cmClone,this,dataProvider,dataSheet);
    dataProvider.setWizardContext(context);
    if (dataProvider.checkState(IDataServiceProvider.PART_CHART)) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
      context.setEnabled(ChartUIConstants.TYPE_PIE,false);
      context.setEnabled(ChartUIConstants.TYPE_METER,false);
      context.setEnabled(ChartUIConstants.TYPE_STOCK,false);
      context.setEnabled(ChartUIConstants.TYPE_BUBBLE,false);
      context.setEnabled(ChartUIConstants.TYPE_DIFFERENCE,false);
      context.setEnabled(ChartUIConstants.TYPE_GANTT,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=context.getModel().copyInstance();
        applyData[1]=context.getOutputFormat();
        applyData[2]=context.isInheritColumnsOnly();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(crii.isLayoutDirectionRTL());
    context.setTextRtL(extendedHandle.isDirectionRTL());
    context.setResourceFinder(crii);
    context.setExternalizer(crii);
    Object of=extendedHandle.getProperty(ChartReportItemUtil.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else {
        context.setOutputFormat((String)of);
      }
    }
    context.setInheritColumnsOnly(extendedHandle.getBooleanProperty(ChartReportItemUtil.PROPERTY_INHERIT_COLUMNS));
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartAdapter.beginIgnoreNotifications();
    if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      dataProvider.update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
    }
    if (eih.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_NONE && !ChartReportItemUtil.isContainerInheritable(eih)) {
      String[] dataSets=dataProvider.getAllDataSets();
      if (dataProvider.getAllDataCubes().length == 0 && dataSets.length == 1) {
        dataProvider.setDataSet(dataSets[0]);
      }
    }
    context.setActionEvaluator(new BIRTActionEvaluator());
    ChartAdapter.endIgnoreNotifications();
    isChartWizardOpen=true;
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    isChartWizardOpen=false;
    if (contextResult != null && contextResult.getModel() != null) {
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat(),contextResult.isInheritColumnsOnly());
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)contextResult.getModel());
      }
      commandStack.commit();
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1],(Boolean)applyData[2]);
      if (dataProvider.isPartChart()) {
        commandStack.startTrans(TRANS_NAME);
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)applyData[0]);
        commandStack.commit();
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
    isChartWizardOpen=false;
  }
}","public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  if (ChartXTabUtil.isAxisChart(eih)) {
    DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemUtil.PROPERTY_HOST_CHART);
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=org.eclipse.birt.chart.reportitem.i18n.Messages.getString(""String_Node_Str"");
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemUtil.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : cm.copyInstance();
    if (cmClone != null) {
      maintainCompatibility(cmClone);
    }
    final Object[] applyData=new Object[3];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    ReportDataServiceProvider dataProvider=new ReportDataServiceProvider(extendedHandle);
    ChartReportItemUIFactory uiFactory=ChartReportItemUIFactory.instance();
    IChartDataSheet dataSheet=uiFactory.createDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=uiFactory.createWizardContext(cmClone,this,dataProvider,dataSheet);
    dataProvider.setWizardContext(context);
    if (dataProvider.checkState(IDataServiceProvider.PART_CHART)) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
      context.setEnabled(ChartUIConstants.TYPE_PIE,false);
      context.setEnabled(ChartUIConstants.TYPE_METER,false);
      context.setEnabled(ChartUIConstants.TYPE_STOCK,false);
      context.setEnabled(ChartUIConstants.TYPE_BUBBLE,false);
      context.setEnabled(ChartUIConstants.TYPE_DIFFERENCE,false);
      context.setEnabled(ChartUIConstants.TYPE_GANTT,false);
    }
    chartBuilder.addCustomButton(new ApplyButtonHandler(chartBuilder){
      public void run(){
        super.run();
        applyData[0]=context.getModel().copyInstance();
        applyData[1]=context.getOutputFormat();
        applyData[2]=context.isInheritColumnsOnly();
        commandStack.commit();
        commandStack.startTrans(TRANS_NAME);
      }
    }
);
    context.setRtL(crii.isLayoutDirectionRTL());
    context.setTextRtL(extendedHandle.isDirectionRTL());
    context.setResourceFinder(crii);
    context.setExternalizer(crii);
    Object of=extendedHandle.getProperty(ChartReportItemUtil.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else {
        context.setOutputFormat((String)of);
      }
    }
    context.setInheritColumnsOnly(extendedHandle.getBooleanProperty(ChartReportItemUtil.PROPERTY_INHERIT_COLUMNS));
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartAdapter.beginIgnoreNotifications();
    if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      dataProvider.update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
    }
    ChartWizard.clearExceptions();
    if (eih.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_NONE && !ChartReportItemUtil.isContainerInheritable(eih)) {
      String[] dataSets=dataProvider.getAllDataSets();
      if (dataProvider.getAllDataCubes().length == 0 && dataSets.length == 1) {
        dataProvider.setDataSet(dataSets[0]);
      }
    }
    context.setActionEvaluator(new BIRTActionEvaluator());
    ChartAdapter.endIgnoreNotifications();
    isChartWizardOpen=true;
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    isChartWizardOpen=false;
    if (contextResult != null && contextResult.getModel() != null) {
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat(),contextResult.isInheritColumnsOnly());
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)contextResult.getModel());
      }
      commandStack.commit();
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1],(Boolean)applyData[2]);
      if (dataProvider.isPartChart()) {
        commandStack.startTrans(TRANS_NAME);
        ChartXTabUIUtil.updateXTabForAxis(ChartXTabUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)applyData[0]);
        commandStack.commit();
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
    isChartWizardOpen=false;
  }
}",0.9970476592155209
69129,"/** 
 * Gets models of selected elements
 * @return
 */
protected List getElementHandles(){
  boolean isEditPart=false;
  List selList=null;
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  Object obj=context.getVariable(ICommandParameterNameContants.SELECTION);
  if (obj != null) {
    selList=new ArrayList();
    selList.add(obj);
  }
  if (selList == null || selList.size() < 1) {
    selList=getSelectedObjects();
  }
  for (int i=0; i < selList.size(); i++) {
    if (selList.get(i) instanceof ReportElementEditPart) {
      isEditPart=true;
    }
  }
  if (isEditPart) {
    selList=InsertInLayoutUtil.editPart2Model(TableUtil.filletCellInSelectionEditorpart(getSelection())).toList();
  }
  return selList;
}","/** 
 * Gets models of selected elements
 * @return
 */
protected List getElementHandles(){
  boolean isEditPart=false;
  List selList=null;
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  Object obj=context.getVariable(ICommandParameterNameContants.SELECTION);
  if (obj != null) {
    selList=new ArrayList();
    selList.add(obj);
  }
  if (selList == null || selList.size() < 1) {
    selList=getSelectedObjects();
  }
  for (int i=0; i < selList.size(); i++) {
    if (selList.get(i) instanceof ReportElementEditPart) {
      isEditPart=true;
    }
  }
  if (isEditPart) {
    selList=DNDUtil.unwrapToModel(InsertInLayoutUtil.editPart2Model(TableUtil.filletCellInSelectionEditorpart(getSelection())).toList());
  }
  return selList;
}",0.9848982271831912
69130,"private StyleHandle getStyleHandle(){
  IStructuredSelection selection=InsertInLayoutUtil.editPart2Model(getSelection());
  if (!selection.isEmpty() && selection.getFirstElement() instanceof DesignElementHandle) {
    if (selection.getFirstElement() instanceof RowHandle || selection.getFirstElement() instanceof ColumnHandle) {
      selection=InsertInLayoutUtil.editPart2Model(TableUtil.filletCellInSelectionEditorpart(getSelection()));
    }
    SharedStyleHandle style=((DesignElementHandle)selection.getFirstElement()).getStyle();
    for (Iterator iterator=selection.iterator(); iterator.hasNext(); ) {
      Object obj=iterator.next();
      if (!(obj instanceof DesignElementHandle)) {
        return null;
      }
      if (((DesignElementHandle)obj).getStyle() != style) {
        return null;
      }
    }
    return style;
  }
  return null;
}","private StyleHandle getStyleHandle(){
  IStructuredSelection selection=InsertInLayoutUtil.editPart2Model(getSelection());
  if (!selection.isEmpty()) {
    Object firstElement=DNDUtil.unwrapToModel(selection.getFirstElement());
    if (firstElement instanceof DesignElementHandle) {
      if (firstElement instanceof RowHandle || firstElement instanceof ColumnHandle) {
        selection=InsertInLayoutUtil.editPart2Model(TableUtil.filletCellInSelectionEditorpart(getSelection()));
      }
      List modelList=DNDUtil.unwrapToModel(selection.toList());
      SharedStyleHandle style=((DesignElementHandle)firstElement).getStyle();
      for (Iterator iterator=modelList.iterator(); iterator.hasNext(); ) {
        Object obj=iterator.next();
        if (!(obj instanceof DesignElementHandle)) {
          return null;
        }
        if (((DesignElementHandle)obj).getStyle() != style) {
          return null;
        }
      }
      return style;
    }
  }
  return null;
}",0.3751363140676118
69131,"protected SplitResult _split(int height,boolean force) throws BirtException {
  if (children.size() == 0) {
    if (isPageBreakBeforeAvoid() && !force) {
      updateChildrenPosition();
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
 else {
      updateChildrenPosition();
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  BlockContainerArea newContainer=null;
  int status=SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL;
  int cheight=getContentHeight(height);
  ListIterator iter=children.listIterator();
  int contentHeight=0;
  ArrayList result=new ArrayList();
  ContainerArea current=null;
  ContainerArea previous=null;
  while (iter.hasNext()) {
    previous=current;
    current=(ContainerArea)iter.next();
    int ah=current.getAllocatedHeight();
    contentHeight+=ah;
    if (contentHeight <= cheight && current.finished) {
      result.add(current);
      continue;
    }
 else {
      contentHeight-=ah;
      int childSplitHeight=cheight - contentHeight;
      SplitResult splitResult=current.split(childSplitHeight,force && !isValidResult(result));
      if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        ContainerArea splitChildArea=splitResult.getResult();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        contentHeight+=splitChildArea.getAllocatedHeight();
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
        if (force) {
          if (result.size() > 0) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
          }
        }
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        if (isValidResult(result)) {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (previous.isPageBreakAfterAvoid()) {
              status=SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL;
              break;
            }
 else {
              status=SplitResult.SPLIT_SUCCEED_WITH_PART;
              break;
            }
          }
        }
 else {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (isPageBreakBeforeAvoid()) {
              return SplitResult.BEFORE_AVOID_WITH_NULL;
            }
 else {
              return SplitResult.SUCCEED_WITH_NULL;
            }
          }
        }
      }
    }
  }
  if (result.size() == children.size()) {
    status=SplitResult.SPLIT_SUCCEED_WITH_PART;
  }
  if (!force && status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
    iter.previous();
    while (iter.hasPrevious()) {
      current=(ContainerArea)iter.previous();
      int ah=current.getAllocatedHeight();
      SplitResult splitResult=current.splitLines(1);
      if (splitResult.status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
        result.remove(current);
        contentHeight-=ah;
        continue;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        result.remove(current);
        ContainerArea splitChildArea=splitResult.getResult();
        contentHeight=contentHeight - ah + splitChildArea.getAllocatedHeight();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        result.remove(current);
        int preIndex=iter.previousIndex();
        if (preIndex >= 0) {
          ContainerArea prev=(ContainerArea)children.get(preIndex);
          if (prev.isPageBreakAfterAvoid()) {
            continue;
          }
 else {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
        }
 else {
          if (isPageBreakBeforeAvoid()) {
            return SplitResult.BEFORE_AVOID_WITH_NULL;
          }
 else {
            return SplitResult.SUCCEED_WITH_NULL;
          }
        }
      }
    }
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
  }
  if (status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
    newContainer=getSplitArea(result,contentHeight);
  }
  if (newContainer != null) {
    addRepeatedItem();
    updateChildrenPosition();
  }
  return new SplitResult(newContainer,status);
}","protected SplitResult _split(int height,boolean force) throws BirtException {
  if (children.size() == 0) {
    if (isPageBreakBeforeAvoid() && !force) {
      updateChildrenPosition();
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
 else {
      updateChildrenPosition();
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  BlockContainerArea newContainer=null;
  int status=SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL;
  int cheight=getContentHeight(height);
  ListIterator iter=children.listIterator();
  int contentHeight=0;
  ArrayList result=new ArrayList();
  ContainerArea current=null;
  ContainerArea previous=null;
  while (iter.hasNext()) {
    previous=current;
    current=(ContainerArea)iter.next();
    int ah=current.getAllocatedHeight();
    contentHeight+=ah;
    if (contentHeight <= cheight && current.finished) {
      result.add(current);
      continue;
    }
 else {
      contentHeight-=ah;
      int childSplitHeight=cheight - contentHeight;
      SplitResult splitResult=current.split(childSplitHeight,force && !isValidResult(result));
      if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        ContainerArea splitChildArea=splitResult.getResult();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        contentHeight+=splitChildArea.getAllocatedHeight();
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
        if (force) {
          if (result.size() > 0) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
          }
        }
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        if (isValidResult(result)) {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (previous.isPageBreakAfterAvoid()) {
              status=SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL;
              break;
            }
 else {
              status=SplitResult.SPLIT_SUCCEED_WITH_PART;
              break;
            }
          }
        }
 else {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (isPageBreakBeforeAvoid()) {
              return SplitResult.BEFORE_AVOID_WITH_NULL;
            }
 else {
              return SplitResult.SUCCEED_WITH_NULL;
            }
          }
        }
      }
    }
  }
  if (result.size() == children.size()) {
    status=SplitResult.SPLIT_SUCCEED_WITH_PART;
  }
  if (!force && status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
    iter.previous();
    while (iter.hasPrevious()) {
      current=(ContainerArea)iter.previous();
      int ah=current.getAllocatedHeight();
      SplitResult splitResult=current.splitLines(1);
      if (splitResult.status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
        result.remove(current);
        contentHeight-=ah;
        continue;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        result.remove(current);
        ContainerArea splitChildArea=splitResult.getResult();
        contentHeight=contentHeight - ah + splitChildArea.getAllocatedHeight();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        result.remove(current);
        int preIndex=iter.previousIndex();
        if (preIndex >= 0) {
          ContainerArea prev=(ContainerArea)children.get(preIndex);
          if (prev.isPageBreakAfterAvoid()) {
            continue;
          }
 else {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
        }
 else {
          if (isPageBreakBeforeAvoid()) {
            return SplitResult.BEFORE_AVOID_WITH_NULL;
          }
 else {
            return SplitResult.SUCCEED_WITH_NULL;
          }
        }
      }
    }
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
  }
  if (status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
    if (isValidResult(result)) {
      newContainer=getSplitArea(result,contentHeight);
    }
 else {
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  if (newContainer != null) {
    addRepeatedItem();
    updateChildrenPosition();
  }
  return new SplitResult(newContainer,status);
}",0.9889373114314448
69132,"/** 
 * Unwraps the object to model
 * @param obj object which may be wrapped, such as <code>ReportElementModel</code>, <code>ListBandProxy</code>
 * @return model object
 */
public static Object unwrapToModel(Object obj){
  if (obj instanceof ListBandProxy) {
    return ((ListBandProxy)obj).getSlotHandle();
  }
  if (obj instanceof IAdaptable) {
    return ((IAdaptable)obj).getAdapter(DesignElementHandle.class);
  }
  return obj;
}","/** 
 * Unwrap a list of objects to model objects.
 * @param objs
 * @return
 */
public static List unwrapToModel(List objs){
  if (objs == null || objs.size() == 0) {
    return objs;
  }
  List<Object> unwrapped=new ArrayList<Object>(objs.size());
  for (int i=0; i < objs.size(); i++) {
    unwrapped.add(unwrapToModel(objs.get(i)));
  }
  return unwrapped;
}",0.150375939849624
69133,"/** 
 * Gets a copy of source data. If copy multi-selection, skip all children's clone
 * @param source source to clone
 * @return copy of source
 */
public static Object cloneSource(Object source){
  source=unwrapToModel(source);
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    ArrayList list=new ArrayList();
    for (int i=0; i < array.length; i++) {
      if (array[i] instanceof ColumnHandle) {
        list.add(cloneSource(array[i]));
      }
    }
    if (!list.isEmpty()) {
      return list.toArray();
    }
    for (int i=0; i < array.length; i++) {
      if (!checkContainerExists(array[i],array)) {
        list.add(cloneSource(array[i]));
      }
    }
    return list.toArray();
  }
  if (source instanceof StructuredSelection) {
    return cloneSource(((StructuredSelection)source).toArray());
  }
  if (source instanceof ColumnHandle) {
    try {
      int columnNumber=HandleAdapterFactory.getInstance().getColumnHandleAdapter(source).getColumnNumber();
      Object parent=((ColumnHandle)source).getContainer();
      if (parent instanceof TableHandle) {
        return ((TableHandle)parent).copyColumn(columnNumber);
      }
 else       if (parent instanceof GridHandle) {
        return ((GridHandle)parent).copyColumn(columnNumber);
      }
    }
 catch (    SemanticException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
    return null;
  }
  if (source instanceof DesignElementHandle) {
    IElementCopy copyElement=CopyUtil.copy((DesignElementHandle)source);
    return copyElement;
  }
  if (source instanceof IDesignElement) {
    try {
      return ((IDesignElement)source).clone();
    }
 catch (    CloneNotSupportedException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    Object[] array=new Object[slot.getCount()];
    for (int i=0; i < array.length; i++) {
      array[i]=slot.get(i);
    }
    return cloneSource(array);
  }
  if (source instanceof StructureHandle) {
    return ((StructureHandle)source).getStructure().copy();
  }
  return null;
}","/** 
 * Gets a copy of source data. If copy multi-selection, skip all children's clone
 * @param source source to clone
 * @return copy of source
 */
public static Object cloneSource(Object source){
  source=unwrapToModel(source);
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    ArrayList<Object> list=new ArrayList<Object>();
    for (int i=0; i < array.length; i++) {
      if (array[i] instanceof ColumnHandle) {
        list.add(cloneSource(array[i]));
      }
    }
    if (!list.isEmpty()) {
      return list.toArray();
    }
    for (int i=0; i < array.length; i++) {
      if (!checkContainerExists(array[i],array)) {
        list.add(cloneSource(array[i]));
      }
    }
    return list.toArray();
  }
  if (source instanceof StructuredSelection) {
    return cloneSource(((StructuredSelection)source).toArray());
  }
  if (source instanceof ColumnHandle) {
    try {
      int columnNumber=HandleAdapterFactory.getInstance().getColumnHandleAdapter(source).getColumnNumber();
      Object parent=((ColumnHandle)source).getContainer();
      if (parent instanceof TableHandle) {
        return ((TableHandle)parent).copyColumn(columnNumber);
      }
 else       if (parent instanceof GridHandle) {
        return ((GridHandle)parent).copyColumn(columnNumber);
      }
    }
 catch (    SemanticException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
    return null;
  }
  if (source instanceof DesignElementHandle) {
    IElementCopy copyElement=CopyUtil.copy((DesignElementHandle)source);
    return copyElement;
  }
  if (source instanceof IDesignElement) {
    try {
      return ((IDesignElement)source).clone();
    }
 catch (    CloneNotSupportedException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    Object[] array=new Object[slot.getCount()];
    for (int i=0; i < array.length; i++) {
      array[i]=slot.get(i);
    }
    return cloneSource(array);
  }
  if (source instanceof StructureHandle) {
    return ((StructureHandle)source).getStructure().copy();
  }
  return null;
}",0.9962494139709328
69134,"/** 
 * Error processor, shows the Error message.
 * @param shell the parent window.
 * @param e Exception object.
 */
public static void processError(Shell shell,Exception e){
  ExceptionHandler.handle(e);
}","/** 
 * Error processor, shows the Error message.
 * @param shell the parent window.
 * @param e Exception object.
 * @deprecated use {@link ExceptionUtil#handle(Throwable)} instead.
 */
public static void processError(Shell shell,Exception e){
  ExceptionHandler.handle(e);
}",0.859504132231405
69135,"/** 
 * Gets models of selected elements
 */
protected List getElementHandles(){
  if (selectionHandles == null) {
    selectionHandles=InsertInLayoutUtil.editPart2Model(TableUtil.filletCellInSelectionEditorpart(getSelection())).toList();
  }
  return selectionHandles;
}","/** 
 * Gets models of selected elements
 */
protected List getElementHandles(){
  if (selectionHandles == null) {
    selectionHandles=DNDUtil.unwrapToModel(InsertInLayoutUtil.editPart2Model(TableUtil.filletCellInSelectionEditorpart(getSelection())).toList());
  }
  return selectionHandles;
}",0.95929203539823
69136,"/** 
 * Error processor, shows the Error message.
 * @param shell the parent window.
 * @param e Exception object.
 */
public static void processError(Exception e){
  ExceptionHandler.handle(e);
}","/** 
 * Error processor, shows the Error message.
 * @param shell the parent window.
 * @param e Exception object.
 * @deprecated use {@link ExceptionUtil#handle(Throwable)} instead.
 */
public static void processError(Exception e){
  ExceptionHandler.handle(e);
}",0.8521739130434782
69137,"private void changeOverlaySeriesType(){
  if (getCurrentChartType().canCombine()) {
    ChartCacheManager.getInstance().cacheSeriesType(cbSeriesType.getText());
  }
  try {
    Axis XAxis=((ChartWithAxes)chartModel).getAxes().get(0);
    int iSeriesDefinitionIndex=0 + (XAxis.getAssociatedAxes().get(0)).getSeriesDefinitions().size();
    int iOverlaySeriesCount=(XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().size();
    ChartAdapter.beginIgnoreNotifications();
    for (int i=0; i < iOverlaySeriesCount; i++) {
      Series lastSeries=((XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getDesignTimeSeries();
      if (!lastSeries.getDisplayName().equals(cbSeriesType.getText())) {
        Series newSeries=htSeriesNames.get(cbSeriesType.getText()).copyInstance();
        newSeries.translateFrom(lastSeries,iSeriesDefinitionIndex,chartModel);
        newSeries.eAdapters().addAll(chartModel.eAdapters());
        ((XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getSeries().clear();
        ((XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getSeries().add(newSeries);
        ChartUIUtil.setSeriesName(chartModel);
      }
    }
    ChartWizard.removeException(ChartWizard.TaskSelType_chOvST_ID);
  }
 catch (  Exception e) {
    ChartWizard.showException(ChartWizard.TaskSelType_chOvST_ID,e.getLocalizedMessage());
  }
 finally {
    ChartAdapter.endIgnoreNotifications();
  }
}","private void changeOverlaySeriesType(){
  if (getCurrentChartType().canCombine()) {
    ChartCacheManager.getInstance().cacheSeriesType(cbSeriesType.getText());
  }
  try {
    Axis XAxis=((ChartWithAxes)chartModel).getAxes().get(0);
    int iSeriesDefinitionIndex=(XAxis.getAssociatedAxes().get(0)).getSeriesDefinitions().size();
    int iOverlaySeriesCount=(XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().size();
    ChartAdapter.beginIgnoreNotifications();
    for (int i=0; i < iOverlaySeriesCount; i++) {
      Series lastSeries=((XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getDesignTimeSeries();
      if (!lastSeries.getDisplayName().equals(cbSeriesType.getText())) {
        String name=htSeriesNames.get(cbSeriesType.getText()).getClass().getName();
        Series newSeries=ChartCacheManager.getInstance().findSeries(name,iSeriesDefinitionIndex + i);
        if (newSeries == null) {
          newSeries=htSeriesNames.get(cbSeriesType.getText()).copyInstance();
          newSeries.translateFrom(lastSeries,iSeriesDefinitionIndex,chartModel);
        }
        newSeries.eAdapters().addAll(chartModel.eAdapters());
        ((XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getSeries().clear();
        ((XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getSeries().add(newSeries);
        ChartUIUtil.setSeriesName(chartModel);
      }
    }
    ChartWizard.removeException(ChartWizard.TaskSelType_chOvST_ID);
  }
 catch (  Exception e) {
    ChartWizard.showException(ChartWizard.TaskSelType_chOvST_ID,e.getLocalizedMessage());
  }
 finally {
    ChartAdapter.endIgnoreNotifications();
  }
}",0.922879177377892
69138,"/** 
 * Create filter provider by specified input.
 * @param input
 * @param providerInput
 * @return the created filter provider
 * @since 2.3
 */
public static AbstractFilterHandleProvider createFilterProvider(Object input,Object providerInput){
  AbstractFilterHandleProvider currentProvider=null;
  Object handle=null;
  if (input instanceof List<?>) {
    handle=((List<?>)input).get(0);
  }
 else {
    handle=input;
  }
  AbstractFilterHandleProvider baseProvider=getAdapter(new ChartPageGenerator(),AbstractFilterHandleProvider.class);
  if (baseProvider == null) {
    baseProvider=new FilterHandleProvider();
  }
  if (handle instanceof ReportItemHandle && ChartXTabUtil.getBindingCube((DesignElementHandle)handle) != null) {
    if (((ReportItemHandle)handle).getCube() != null && (ChartReportItemUtil.isChildOfMultiViewsHandle((DesignElementHandle)handle) || ((ReportItemHandle)handle).getDataBindingReference() != null)) {
      ReportItemHandle ref=((ReportItemHandle)handle).getDataBindingReference();
      if (ChartReportItemUtil.isChartHandle(ref)) {
        currentProvider=new ChartShareCubeFiltersHandleProvider(baseProvider);
      }
 else {
        currentProvider=new ChartShareCrosstabFiltersHandleProvider();
      }
    }
 else {
      currentProvider=new ChartCubeFilterHandleProvider(baseProvider);
    }
  }
 else {
    if (ChartReportItemUtil.isChildOfMultiViewsHandle((DesignElementHandle)handle)) {
      currentProvider=new ChartShareFiltersHandleProvider(baseProvider);
    }
 else {
      currentProvider=new ChartFilterHandleProvider(baseProvider);
    }
  }
  if (input != null) {
    currentProvider.setInput(input);
  }
  return currentProvider;
}","/** 
 * Create filter provider by specified input.
 * @param input
 * @param providerInput
 * @return the created filter provider
 * @since 2.3
 */
public static AbstractFilterHandleProvider createFilterProvider(Object input,Object providerInput){
  AbstractFilterHandleProvider currentProvider=null;
  Object handle=null;
  if (input instanceof List<?>) {
    handle=((List<?>)input).get(0);
  }
 else {
    handle=input;
  }
  AbstractFilterHandleProvider baseProvider=getAdapter(new ChartPageGenerator(),AbstractFilterHandleProvider.class);
  if (baseProvider == null) {
    baseProvider=new FilterHandleProvider();
  }
  if (handle instanceof ReportItemHandle && ChartXTabUtil.getBindingCube((DesignElementHandle)handle) != null) {
    if (((ReportItemHandle)handle).getCube() != null && (ChartReportItemUtil.isChildOfMultiViewsHandle((DesignElementHandle)handle) || ((ReportItemHandle)handle).getDataBindingReference() != null)) {
      ReportItemHandle ref=((ReportItemHandle)handle).getDataBindingReference();
      if (ChartReportItemUtil.isChartHandle(ref)) {
        currentProvider=new ChartShareCubeFiltersHandleProvider(new FilterHandleProvider());
      }
 else {
        currentProvider=new ChartShareCrosstabFiltersHandleProvider();
      }
    }
 else {
      currentProvider=new ChartCubeFilterHandleProvider(new FilterHandleProvider());
    }
  }
 else {
    if (ChartReportItemUtil.isChildOfMultiViewsHandle((DesignElementHandle)handle)) {
      currentProvider=new ChartShareFiltersHandleProvider(baseProvider);
    }
 else {
      currentProvider=new ChartFilterHandleProvider(baseProvider);
    }
  }
  if (input != null) {
    currentProvider.setInput(input);
  }
  return currentProvider;
}",0.977660199882422
69139,"private void createExpressionCell(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  defaultValueComposite=ControlProvider.getDefaultComposite(parent);
  defaultValueString=Utility.getNonNullString(structureHandle.getDefaultValue());
  defaultValue=ControlProvider.createText(defaultValueComposite,defaultValueString);
  defaultValue.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
  defaultValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (defaultValue.isEnabled()) {
        validateSyntax();
      }
    }
  }
);
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(defaultValue.getText());
      expressionBuilder.setExpressionProvier(null);
      if (expressionBuilder.open() == OK) {
        defaultValue.setText(expressionBuilder.getResult().trim());
      }
    }
  }
;
  ExpressionProvider provider=new ExpressionProvider((DataSetHandle)getContainer().getModel());
  ExpressionButtonUtil.createExpressionButton(defaultValueComposite,defaultValue,provider,true,SWT.PUSH);
  ExpressionButtonUtil.initExpressionButtonControl(defaultValue,structureHandle,DataSetParameter.DEFAULT_VALUE_MEMBER);
}","private void createExpressionCell(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  defaultValueComposite=ControlProvider.getDefaultComposite(parent);
  defaultValueString=Utility.getNonNullString(structureHandle.getDefaultValue());
  defaultValue=ControlProvider.createText(defaultValueComposite,defaultValueString);
  defaultValue.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
  defaultValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (defaultValue.isEnabled()) {
        validateSyntax();
      }
    }
  }
);
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(defaultValue.getText());
      expressionBuilder.setExpressionProvier(null);
      if (expressionBuilder.open() == OK) {
        defaultValue.setText(expressionBuilder.getResult().trim());
      }
    }
  }
;
  ExpressionProvider provider=new ExpressionProvider((DataSetHandle)getContainer().getModel());
  ExpressionButtonUtil.createExpressionButton(defaultValueComposite,defaultValue,provider,(DataSetHandle)getContainer().getModel(),true,SWT.PUSH);
  ExpressionButtonUtil.initExpressionButtonControl(defaultValue,structureHandle,DataSetParameter.DEFAULT_VALUE_MEMBER);
}",0.9846038302666166
69140,"private void createExpressionButton(Composite composite,final Text property,String propName){
  ExpressionButton exprButton=ExpressionButtonUtil.createExpressionButton(composite,property,new ExpressionProvider(handle),true,SWT.PUSH);
  if (PASSWORD.equals(propName)) {
    exprButton.setExpressionButtonProvider(new ExprButtonProvider(true,property));
  }
  Expression expr=handle.getPropertyBindingExpression(propName);
  property.setData(ExpressionButtonUtil.EXPR_TYPE,expr == null || expr.getType() == null ? UIUtil.getDefaultScriptType() : (String)expr.getType());
  property.setText((expr == null || expr.getStringExpression() == null) ? ""String_Node_Str"" : expr.getStringExpression());
  exprButton.refresh();
}","private void createExpressionButton(Composite composite,final Text property,String propName){
  ExpressionButton exprButton=ExpressionButtonUtil.createExpressionButton(composite,property,new ExpressionProvider(handle),handle,true,SWT.PUSH);
  if (PASSWORD.equals(propName)) {
    exprButton.setExpressionButtonProvider(new ExprButtonProvider(true,property));
  }
  Expression expr=handle.getPropertyBindingExpression(propName);
  property.setData(ExpressionButtonUtil.EXPR_TYPE,expr == null || expr.getType() == null ? UIUtil.getDefaultScriptType() : (String)expr.getType());
  property.setText((expr == null || expr.getStringExpression() == null) ? ""String_Node_Str"" : expr.getStringExpression());
  exprButton.refresh();
}",0.9951422623178348
69141,"private void changeOverlaySeriesType(){
  if (getCurrentChartType().canCombine()) {
    ChartCacheManager.getInstance().cacheSeriesType(cbSeriesType.getText());
  }
  try {
    Axis XAxis=((ChartWithAxes)chartModel).getAxes().get(0);
    int iSeriesDefinitionIndex=(XAxis.getAssociatedAxes().get(0)).getSeriesDefinitions().size();
    int iOverlaySeriesCount=(XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().size();
    ChartAdapter.beginIgnoreNotifications();
    for (int i=0; i < iOverlaySeriesCount; i++) {
      Series lastSeries=((XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getDesignTimeSeries();
      if (!lastSeries.getDisplayName().equals(cbSeriesType.getText())) {
        String name=htSeriesNames.get(cbSeriesType.getText()).getClass().getName();
        Series newSeries=ChartCacheManager.getInstance().findSeries(name,iSeriesDefinitionIndex + i);
        if (newSeries == null) {
          newSeries=htSeriesNames.get(cbSeriesType.getText()).copyInstance();
          newSeries.translateFrom(lastSeries,iSeriesDefinitionIndex,chartModel);
        }
        newSeries.eAdapters().addAll(chartModel.eAdapters());
        ((XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getSeries().clear();
        ((XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getSeries().add(newSeries);
        ChartUIUtil.setSeriesName(chartModel);
      }
    }
    ChartWizard.removeException(ChartWizard.TaskSelType_chOvST_ID);
  }
 catch (  Exception e) {
    ChartWizard.showException(ChartWizard.TaskSelType_chOvST_ID,e.getLocalizedMessage());
  }
 finally {
    ChartAdapter.endIgnoreNotifications();
  }
}","private void changeOverlaySeriesType(){
  if (getCurrentChartType().canCombine()) {
    ChartCacheManager.getInstance().cacheSeriesType(cbSeriesType.getText());
  }
  try {
    Axis XAxis=((ChartWithAxes)chartModel).getAxes().get(0);
    int iSeriesDefinitionIndex=(XAxis.getAssociatedAxes().get(0)).getSeriesDefinitions().size();
    int iOverlaySeriesCount=(XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().size();
    ChartAdapter.beginIgnoreNotifications();
    for (int i=0; i < iOverlaySeriesCount; i++) {
      Series lastSeries=((XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getDesignTimeSeries();
      if (!lastSeries.getDisplayName().equals(cbSeriesType.getText())) {
        String name=htSeriesNames.get(cbSeriesType.getText()).getClass().getName();
        Series newSeries=ChartCacheManager.getInstance().findSeries(name,iSeriesDefinitionIndex + i);
        if (newSeries == null || newSeries instanceof BarSeries) {
          newSeries=htSeriesNames.get(cbSeriesType.getText()).copyInstance();
          newSeries.translateFrom(lastSeries,iSeriesDefinitionIndex,chartModel);
        }
        newSeries.eAdapters().addAll(chartModel.eAdapters());
        ((XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getSeries().clear();
        ((XAxis.getAssociatedAxes().get(1)).getSeriesDefinitions().get(i)).getSeries().add(newSeries);
        ChartUIUtil.setSeriesName(chartModel);
      }
    }
    ChartWizard.removeException(ChartWizard.TaskSelType_chOvST_ID);
  }
 catch (  Exception e) {
    ChartWizard.showException(ChartWizard.TaskSelType_chOvST_ID,e.getLocalizedMessage());
  }
 finally {
    ChartAdapter.endIgnoreNotifications();
  }
}",0.9899049881235156
69142,"protected void delegateSetLength(long newLength) throws IOException {
  if (delegate == null) {
    if (newLength > memoryDelegate.length) {
      createRandomAccessFile();
    }
 else {
      length=(int)newLength;
    }
    return;
  }
  delegate.setLength(newLength);
}","protected void delegateSetLength(long newLength) throws IOException {
  if (delegate == null) {
    if (newLength > memoryDelegate.length && !pureMemory) {
      createRandomAccessFile();
    }
 else {
      if (newLength > memoryDelegate.length) {
        restructMemoryDelegate();
      }
      length=(int)newLength;
    }
    return;
  }
  delegate.setLength(newLength);
}",0.8395061728395061
69143,"protected void delegateSeek(long pos) throws IOException {
  if (delegate == null) {
    if (pos > memoryDelegate.length) {
      createRandomAccessFile();
    }
 else {
      pointer=(int)pos;
      return;
    }
  }
  delegate.seek(pos);
}","protected void delegateSeek(long pos) throws IOException {
  if (delegate == null) {
    if (pos > memoryDelegate.length && !pureMemory) {
      createRandomAccessFile();
    }
 else {
      if (pos > memoryDelegate.length) {
        restructMemoryDelegate();
      }
      pointer=(int)pos;
      return;
    }
  }
  delegate.seek(pos);
}",0.8310344827586207
69144,"protected void delegateWrite(byte[] b,int pos,int len) throws IOException {
  if (delegate == null) {
    if (pointer + len > memoryDelegate.length) {
      createRandomAccessFile();
    }
 else {
      System.arraycopy(b,pos,memoryDelegate,pointer,len);
      if (pointer + len > length) {
        length=pointer + len;
      }
      pointer+=len;
      return;
    }
  }
  delegate.write(b,pos,len);
}","protected void delegateWrite(byte[] b,int pos,int len) throws IOException {
  if (delegate == null) {
    if (pointer + len > memoryDelegate.length && !pureMemory) {
      createRandomAccessFile();
    }
 else {
      if (pointer + len > memoryDelegate.length) {
        restructMemoryDelegate();
      }
      System.arraycopy(b,pos,memoryDelegate,pointer,len);
      if (pointer + len > length) {
        length=pointer + len;
      }
      pointer+=len;
      return;
    }
  }
  delegate.write(b,pos,len);
}",0.8818380743982495
69145,"public static ExtendedItemHandle createChartHandle(DesignElementHandle anyHandle,String chartType,ExtendedItemHandle hostChartHandle) throws SemanticException {
  String name=ReportPlugin.getDefault().getCustomName(ChartReportItemConstants.CHART_EXTENSION_NAME);
  ExtendedItemHandle chartHandle=anyHandle.getElementFactory().newExtendedItem(name,ChartReportItemConstants.CHART_EXTENSION_NAME);
  if (chartType != null) {
    chartHandle.setProperty(ChartReportItemConstants.PROPERTY_CHART_TYPE,chartType);
  }
  if (hostChartHandle != null) {
    chartHandle.setProperty(ChartReportItemConstants.PROPERTY_HOST_CHART,hostChartHandle);
  }
  return chartHandle;
}","public static ExtendedItemHandle createChartHandle(DesignElementHandle anyHandle,String chartType,ExtendedItemHandle hostChartHandle) throws SemanticException {
  String name=ReportPlugin.getDefault().getCustomName(ChartReportItemConstants.CHART_EXTENSION_NAME);
  ExtendedItemHandle chartHandle=anyHandle.getElementFactory().newExtendedItem(name,ChartReportItemConstants.CHART_EXTENSION_NAME);
  if (chartType != null) {
    chartHandle.setProperty(ChartReportItemConstants.PROPERTY_CHART_TYPE,chartType);
  }
  if (hostChartHandle != null) {
    chartHandle.setProperty(ChartReportItemConstants.PROPERTY_HOST_CHART,hostChartHandle);
  }
 else {
    String namePrexif=name != null && name.length() > 0 ? name : org.eclipse.birt.chart.reportitem.i18n.Messages.getString((String)chartHandle.getDefn().getDisplayNameKey());
    chartHandle.makeUniqueName(namePrexif);
  }
  return chartHandle;
}",0.8282958199356913
69146,"private static ICubeQueryDefinition cloneCubeQueryDefinition(ICubeQueryDefinition query,IEdgeDrillFilter columnDrill,IEdgeDrillFilter rowDrill,ICube cube) throws DataException {
  ICubeQueryDefinition cloneQuery=null;
  if (query != null) {
    cloneQuery=new DrillCubeQueryDefinition(query.getName());
    if (query.getEdge(ICubeQueryDefinition.COLUMN_EDGE) != null) {
      if (columnDrill != null)       ((DrillCubeQueryDefinition)cloneQuery).setTupleOnColumn(columnDrill.getTuple());
      cloneEdgeDefinition(cloneQuery,query.getEdge(ICubeQueryDefinition.COLUMN_EDGE),ICubeQueryDefinition.COLUMN_EDGE,columnDrill,cube);
    }
    if (query.getEdge(ICubeQueryDefinition.ROW_EDGE) != null) {
      if (rowDrill != null)       ((DrillCubeQueryDefinition)cloneQuery).setTupleOnRow(rowDrill.getTuple());
      cloneEdgeDefinition(cloneQuery,query.getEdge(ICubeQueryDefinition.ROW_EDGE),ICubeQueryDefinition.ROW_EDGE,rowDrill,cube);
    }
    for (int i=0; i < query.getMeasures().size(); i++) {
      IMeasureDefinition measure=((IMeasureDefinition)query.getMeasures().get(i));
      IMeasureDefinition cloneMeasure=cloneQuery.createMeasure(measure.getName());
      cloneMeasure.setAggrFunction(measure.getAggrFunction());
    }
    for (int i=0; i < query.getComputedMeasures().size(); i++) {
      IComputedMeasureDefinition measure=((IComputedMeasureDefinition)query.getComputedMeasures().get(i));
      IMeasureDefinition cloneMeasure=cloneQuery.createComputedMeasure(measure.getName(),measure.getType(),measure.getExpression());
      cloneMeasure.setAggrFunction(measure.getAggrFunction());
    }
    List<String> levelDefnOnColumn=new ArrayList<String>();
    List<String> levelDefnOnRow=new ArrayList<String>();
    if (columnDrill != null) {
      levelDefnOnColumn=findLevelExpressionFromQuery(query.getEdge(ICubeQueryDefinition.COLUMN_EDGE),columnDrill,cube);
    }
    if (rowDrill != null) {
      levelDefnOnRow=findLevelExpressionFromQuery(query.getEdge(ICubeQueryDefinition.ROW_EDGE),rowDrill,cube);
    }
    for (int i=0; i < query.getBindings().size(); i++) {
      IBinding binding=(IBinding)query.getBindings().get(i);
      if (binding.getAggrFunction() != null) {
        List dimLevelOnColumn=getReferenceDimLevelOnEdge(query,ICubeQueryDefinition.COLUMN_EDGE);
        List dimLevelOnRow=getReferenceDimLevelOnEdge(query,ICubeQueryDefinition.ROW_EDGE);
        IBinding newBinding=new Binding(binding.getBindingName(),binding.getExpression());
        newBinding.setDataType(binding.getDataType());
        newBinding.setAggrFunction(binding.getAggrFunction());
        newBinding.setDisplayName(binding.getDisplayName());
        newBinding.setExportable(binding.exportable());
        newBinding.setFilter(newBinding.getFilter());
        for (int k=0; k < binding.getArguments().size(); k++) {
          newBinding.addArgument((IBaseExpression)binding.getArguments().get(k));
        }
        List aggrOns=binding.getAggregatOns();
        if (aggrOns != null && !aggrOns.isEmpty()) {
          boolean columnExist=false, rowExist=false;
          boolean detailLevelOnColumn=isGrandTotalOnEdge(aggrOns,dimLevelOnColumn);
          boolean detailLevelOnRow=isGrandTotalOnEdge(aggrOns,dimLevelOnRow);
          for (int k=0; k < aggrOns.size(); k++) {
            String aggrExpr=aggrOns.get(k).toString();
            DimLevel target=OlapExpressionUtil.getTargetDimLevel(aggrExpr);
            String dimensionNameOnColumn=columnDrill != null ? columnDrill.getTargetHierarchy().getDimension().getName() : null;
            String dimensionNameOnRow=rowDrill != null ? rowDrill.getTargetHierarchy().getDimension().getName() : null;
            if (!columnExist && target.getDimensionName().equals(dimensionNameOnColumn)) {
              if (!detailLevelOnColumn) {
                newBinding.addAggregateOn(aggrExpr);
              }
 else {
                columnExist=true;
                for (int t=0; t < levelDefnOnColumn.size(); t++)                 newBinding.addAggregateOn((String)levelDefnOnColumn.get(t));
              }
            }
 else             if (!rowExist && target.getDimensionName().equals(dimensionNameOnRow)) {
              if (!detailLevelOnRow) {
                newBinding.addAggregateOn(aggrExpr);
              }
 else {
                rowExist=true;
                for (int t=0; t < levelDefnOnRow.size(); t++)                 newBinding.addAggregateOn((String)levelDefnOnRow.get(t));
              }
            }
 else             if (!target.getDimensionName().equals(dimensionNameOnColumn) && !target.getDimensionName().equals(dimensionNameOnRow))             newBinding.addAggregateOn(aggrExpr);
          }
        }
        cloneQuery.addBinding(newBinding);
      }
 else       cloneQuery.addBinding((IBinding)query.getBindings().get(i));
    }
    for (int i=0; i < query.getFilters().size(); i++) {
      cloneQuery.addFilter((IFilterDefinition)query.getFilters().get(i));
    }
    for (int i=0; i < query.getSorts().size(); i++) {
      cloneQuery.addSort((ISortDefinition)query.getSorts().get(i));
    }
  }
  return cloneQuery;
}","private static ICubeQueryDefinition cloneCubeQueryDefinition(ICubeQueryDefinition query,IEdgeDrillFilter columnDrill,IEdgeDrillFilter rowDrill,ICube cube) throws DataException {
  ICubeQueryDefinition cloneQuery=null;
  if (query != null) {
    cloneQuery=new DrillCubeQueryDefinition(query.getName());
    if (query.getEdge(ICubeQueryDefinition.COLUMN_EDGE) != null) {
      if (columnDrill != null)       ((DrillCubeQueryDefinition)cloneQuery).setTupleOnColumn(columnDrill.getTuple());
      cloneEdgeDefinition(cloneQuery,query.getEdge(ICubeQueryDefinition.COLUMN_EDGE),ICubeQueryDefinition.COLUMN_EDGE,columnDrill,cube);
    }
    if (query.getEdge(ICubeQueryDefinition.ROW_EDGE) != null) {
      if (rowDrill != null)       ((DrillCubeQueryDefinition)cloneQuery).setTupleOnRow(rowDrill.getTuple());
      cloneEdgeDefinition(cloneQuery,query.getEdge(ICubeQueryDefinition.ROW_EDGE),ICubeQueryDefinition.ROW_EDGE,rowDrill,cube);
    }
    for (int i=0; i < query.getMeasures().size(); i++) {
      IMeasureDefinition measure=((IMeasureDefinition)query.getMeasures().get(i));
      IMeasureDefinition cloneMeasure=cloneQuery.createMeasure(measure.getName());
      cloneMeasure.setAggrFunction(measure.getAggrFunction());
    }
    for (int i=0; i < query.getComputedMeasures().size(); i++) {
      IComputedMeasureDefinition measure=((IComputedMeasureDefinition)query.getComputedMeasures().get(i));
      IMeasureDefinition cloneMeasure=cloneQuery.createComputedMeasure(measure.getName(),measure.getType(),measure.getExpression());
      cloneMeasure.setAggrFunction(measure.getAggrFunction());
    }
    List<String> levelDefnOnColumn=new ArrayList<String>();
    List<String> levelDefnOnRow=new ArrayList<String>();
    if (columnDrill != null) {
      levelDefnOnColumn=findLevelExpressionFromQuery(query.getEdge(ICubeQueryDefinition.COLUMN_EDGE),columnDrill,cube);
    }
    if (rowDrill != null) {
      levelDefnOnRow=findLevelExpressionFromQuery(query.getEdge(ICubeQueryDefinition.ROW_EDGE),rowDrill,cube);
    }
    for (int i=0; i < query.getBindings().size(); i++) {
      IBinding binding=(IBinding)query.getBindings().get(i);
      if (binding.getAggrFunction() != null) {
        List dimLevelOnColumn=getReferenceDimLevelOnEdge(query,ICubeQueryDefinition.COLUMN_EDGE);
        List dimLevelOnRow=getReferenceDimLevelOnEdge(query,ICubeQueryDefinition.ROW_EDGE);
        IBinding newBinding=new Binding(binding.getBindingName(),binding.getExpression());
        newBinding.setDataType(binding.getDataType());
        newBinding.setAggrFunction(binding.getAggrFunction());
        newBinding.setDisplayName(binding.getDisplayName());
        newBinding.setExportable(binding.exportable());
        newBinding.setFilter(newBinding.getFilter());
        for (int k=0; k < binding.getArguments().size(); k++) {
          newBinding.addArgument((IBaseExpression)binding.getArguments().get(k));
        }
        List aggrOns=binding.getAggregatOns();
        if (aggrOns != null && !aggrOns.isEmpty()) {
          boolean columnExist=false, rowExist=false;
          boolean detailLevelOnColumn=isGrandTotalOnEdge(aggrOns,dimLevelOnColumn);
          boolean detailLevelOnRow=isGrandTotalOnEdge(aggrOns,dimLevelOnRow);
          if (!detailLevelOnColumn && !detailLevelOnRow) {
            continue;
          }
          if ((detailLevelOnColumn && columnDrill != null) || (detailLevelOnRow && rowDrill != null)) {
            for (int k=0; k < aggrOns.size(); k++) {
              String aggrExpr=aggrOns.get(k).toString();
              DimLevel target=OlapExpressionUtil.getTargetDimLevel(aggrExpr);
              String dimensionNameOnColumn=columnDrill != null ? columnDrill.getTargetHierarchy().getDimension().getName() : null;
              String dimensionNameOnRow=rowDrill != null ? rowDrill.getTargetHierarchy().getDimension().getName() : null;
              if (!columnExist && target.getDimensionName().equals(dimensionNameOnColumn)) {
                if (!detailLevelOnColumn) {
                  newBinding.addAggregateOn(aggrExpr);
                }
 else {
                  columnExist=true;
                  for (int t=0; t < levelDefnOnColumn.size(); t++)                   newBinding.addAggregateOn((String)levelDefnOnColumn.get(t));
                }
              }
 else               if (!rowExist && target.getDimensionName().equals(dimensionNameOnRow)) {
                if (!detailLevelOnRow) {
                  newBinding.addAggregateOn(aggrExpr);
                }
 else {
                  rowExist=true;
                  for (int t=0; t < levelDefnOnRow.size(); t++)                   newBinding.addAggregateOn((String)levelDefnOnRow.get(t));
                }
              }
 else               if (!target.getDimensionName().equals(dimensionNameOnColumn) && !target.getDimensionName().equals(dimensionNameOnRow))               newBinding.addAggregateOn(aggrExpr);
            }
            cloneQuery.addBinding(newBinding);
          }
        }
      }
 else       cloneQuery.addBinding((IBinding)query.getBindings().get(i));
    }
    for (int i=0; i < query.getFilters().size(); i++) {
      cloneQuery.addFilter((IFilterDefinition)query.getFilters().get(i));
    }
    for (int i=0; i < query.getSorts().size(); i++) {
      cloneQuery.addSort((ISortDefinition)query.getSorts().get(i));
    }
  }
  return cloneQuery;
}",0.973571224119836
69147,"/** 
 * Internally provided to render a single legend entry
 * @param ipr
 * @param lg
 * @param la
 * @param dX
 * @param dY
 * @param dW
 * @param dItemHeight
 * @param dLeftInset
 * @param dHorizontalSpacing
 * @param se
 * @param fPaletteEntry
 * @param lirh
 * @param i data row index
 * @throws ChartException
 */
protected final void renderLegendItem(IPrimitiveRenderer ipr,Legend lg,Label la,Label valueLa,LegendItemHints lih,double dX,double dY,double dItemHeight,double dColumnWidth,double dLeftInset,double dHorizontalSpacing,Fill fPaletteEntry,LegendItemRenderingHints lirh,double dScale) throws ChartException {
  double dFullHeight=lih.getItemHeight();
  double dExtraHeight=lih.getValueHeight();
  Series se=lih.getSeries();
  int dataIndex=lih.getIndex();
  if (la != null && la.getCaption() != null && valueLa != null && valueLa.getCaption() != null) {
    valueLa.getCaption().setFont(goFactory.copyOf(la.getCaption().getFont()));
    valueLa.getCaption().setColor(goFactory.copyOf(la.getCaption().getColor()));
  }
  LegendEntryRenderingHints lerh=new LegendEntryRenderingHints(la,valueLa,dataIndex,fPaletteEntry);
  AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ENTRY,la);
  final Bounds bo=lirh.getLegendGraphicBounds();
  if (isRightToLeft()) {
    bo.setLeft((dX + dColumnWidth - dLeftInset - 1 - 3 * dItemHeight / 2) / dScale);
  }
 else {
    bo.setLeft((dX + dLeftInset + 1) / dScale);
  }
  bo.setTop((dY + 1 + (dFullHeight - dItemHeight) / 2) / dScale);
  bo.setWidth((3 * dItemHeight / 2) / dScale);
  bo.setHeight((dItemHeight - 2) / dScale);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ITEM,lerh);
  if (la != null) {
    la.getCaption().setValue(EllipsisHelper.ellipsisString(la.getCaption().getValue(),lih.getValidItemLen()));
  }
  cComp.applyWrapping(xs,la,lg.getWrappingSize());
  bo.setLeft(bo.getLeft() * dScale);
  bo.setTop(bo.getTop() * dScale);
  bo.setWidth(bo.getWidth() * dScale);
  bo.setHeight(bo.getHeight() * dScale);
  final BaseRenderer br=lirh.getRenderer();
  br.renderLegendGraphic(ipr,lg,fPaletteEntry,bo);
  final TextRenderEvent tre=((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),TextRenderEvent.class);
  double dLaAngle=la.getCaption().getFont().getRotation();
  if (isRightToLeft()) {
    dLaAngle=-dLaAngle;
  }
  double dDeltaHeight=0;
  if (dLaAngle > 0 && dLaAngle < 90) {
    dDeltaHeight=(bo.getHeight() + dFullHeight - dItemHeight) / 2;
  }
 else   if (dLaAngle < 0 && dLaAngle > -90) {
    dDeltaHeight=(bo.getHeight() - dFullHeight + dItemHeight) / 2;
  }
 else   if (dLaAngle == 0 || dLaAngle == 90 || dLaAngle == -90) {
    dDeltaHeight=bo.getHeight() / 2;
  }
  if (isRightToLeft()) {
    tre.setLocation(goFactory.createLocation(dX + dColumnWidth - dLeftInset - 3 * dItemHeight / 2 - dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.LEFT);
  }
 else {
    tre.setLocation(goFactory.createLocation(dX + dLeftInset + (3 * dItemHeight / 2)+ dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.RIGHT);
  }
  if (la.isVisible()) {
    tre.setLabel(la);
    tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
    if (rtc.isRightToLeftText()) {
      tre.setRtlCaption();
    }
    ipr.drawText(tre);
  }
  if (valueLa != null) {
    final double dValueWidth=dColumnWidth - 2 * dLeftInset;
    Label tmpLa=goFactory.copyOf(valueLa);
    TextAlignment ta=TextAlignmentImpl.create();
    ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    tre.setBlockAlignment(ta);
    tre.setBlockBounds(goFactory.createBounds(dX + dLeftInset + 1,dY + dFullHeight + 1,dValueWidth - 2,dExtraHeight - 1));
    tre.setLabel(tmpLa);
    tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
    if (rtc.isRightToLeftText()) {
      tre.setRtlCaption();
    }
    ipr.drawText(tre);
  }
  la.getCaption().setValue(lih.getItemText());
  if (isInteractivityEnabled()) {
    Trigger tg;
    EList<Trigger> elTriggers=lg.getTriggers();
    Location[] loaHotspot=new Location[4];
    loaHotspot[0]=goFactory.createLocation(dX + 1,dY + 1);
    loaHotspot[1]=goFactory.createLocation(dX + dColumnWidth - 1,dY + 1);
    loaHotspot[2]=goFactory.createLocation(dX + dColumnWidth - 1,dY + dFullHeight + dExtraHeight - 1);
    loaHotspot[3]=goFactory.createLocation(dX + 1,dY + dFullHeight + dExtraHeight - 1);
    Trigger buildinTg=null;
    if (cm.getInteractivity() != null) {
      boolean customed=false;
switch (cm.getInteractivity().getLegendBehavior().getValue()) {
case LegendBehaviorType.HIGHLIGHT_SERIE:
        for (Iterator<Trigger> itr=elTriggers.iterator(); itr.hasNext(); ) {
          tg=itr.next();
          if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.HIGHLIGHT_LITERAL) {
            customed=true;
          }
        }
      if (!customed) {
        buildinTg=goFactory.createTrigger(TriggerCondition.ONCLICK_LITERAL,goFactory.createAction(ActionType.HIGHLIGHT_LITERAL,goFactory.createSeriesValue(String.valueOf(se.getSeriesIdentifier()))));
      }
    break;
case LegendBehaviorType.TOGGLE_SERIE_VISIBILITY:
  for (Iterator<Trigger> itr=elTriggers.iterator(); itr.hasNext(); ) {
    tg=itr.next();
    if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.TOGGLE_VISIBILITY_LITERAL) {
      customed=true;
    }
  }
if (!customed) {
  buildinTg=goFactory.createTrigger(TriggerCondition.ONCLICK_LITERAL,goFactory.createAction(ActionType.TOGGLE_VISIBILITY_LITERAL,goFactory.createSeriesValue(String.valueOf(se.getSeriesIdentifier()))));
}
break;
case LegendBehaviorType.NONE:
break;
}
}
if (!elTriggers.isEmpty() || buildinTg != null) {
final StructureSource source;
if (this.cm.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL) {
final DataPointHints dph=new DataPointHints(la.getCaption().getValue(),null,null,null,null,null,null,null,null,dataIndex,null,0,null);
source=WrappedStructureSource.createSeriesDataPoint(se,dph);
}
 else {
source=StructureSource.createSeries(se);
}
final InteractionEvent iev=((EventObjectCache)ipr).getEventObject(source,InteractionEvent.class);
iev.setCursor(lg.getCursor());
for (int t=0; t < elTriggers.size(); t++) {
tg=goFactory.copyOf(elTriggers.get(t));
processTrigger(tg,WrappedStructureSource.createLegendEntry(lg,lih));
iev.addTrigger(tg);
}
if (buildinTg != null) {
processTrigger(buildinTg,WrappedStructureSource.createLegendEntry(lg,lih));
iev.addTrigger(buildinTg);
}
final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(source,PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
ipr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ITEM,lerh);
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ENTRY,la);
}","/** 
 * Internally provided to render a single legend entry
 * @param ipr
 * @param lg
 * @param la
 * @param dX
 * @param dY
 * @param dW
 * @param dItemHeight
 * @param dLeftInset
 * @param dHorizontalSpacing
 * @param se
 * @param fPaletteEntry
 * @param lirh
 * @param i data row index
 * @throws ChartException
 */
protected final void renderLegendItem(IPrimitiveRenderer ipr,Legend lg,Label la,Label valueLa,LegendItemHints lih,double dX,double dY,double dItemHeight,double dColumnWidth,double dLeftInset,double dHorizontalSpacing,Fill fPaletteEntry,LegendItemRenderingHints lirh,double dScale) throws ChartException {
  double dFullHeight=lih.getItemHeight();
  double dExtraHeight=lih.getValueHeight();
  Series se=lih.getSeries();
  int dataIndex=lih.getIndex();
  if (la != null && la.getCaption() != null && valueLa != null && valueLa.getCaption() != null) {
    valueLa.getCaption().setFont(goFactory.copyOf(la.getCaption().getFont()));
    valueLa.getCaption().setColor(goFactory.copyOf(la.getCaption().getColor()));
  }
  updateTranslucency(fPaletteEntry,lih.getSeries());
  LegendEntryRenderingHints lerh=new LegendEntryRenderingHints(la,valueLa,dataIndex,fPaletteEntry);
  AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ENTRY,la);
  final Bounds bo=lirh.getLegendGraphicBounds();
  if (isRightToLeft()) {
    bo.setLeft((dX + dColumnWidth - dLeftInset - 1 - 3 * dItemHeight / 2) / dScale);
  }
 else {
    bo.setLeft((dX + dLeftInset + 1) / dScale);
  }
  bo.setTop((dY + 1 + (dFullHeight - dItemHeight) / 2) / dScale);
  bo.setWidth((3 * dItemHeight / 2) / dScale);
  bo.setHeight((dItemHeight - 2) / dScale);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ITEM,lerh);
  if (la != null) {
    la.getCaption().setValue(EllipsisHelper.ellipsisString(la.getCaption().getValue(),lih.getValidItemLen()));
  }
  cComp.applyWrapping(xs,la,lg.getWrappingSize());
  bo.setLeft(bo.getLeft() * dScale);
  bo.setTop(bo.getTop() * dScale);
  bo.setWidth(bo.getWidth() * dScale);
  bo.setHeight(bo.getHeight() * dScale);
  final BaseRenderer br=lirh.getRenderer();
  br.renderLegendGraphic(ipr,lg,fPaletteEntry,bo);
  final TextRenderEvent tre=((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),TextRenderEvent.class);
  double dLaAngle=la.getCaption().getFont().getRotation();
  if (isRightToLeft()) {
    dLaAngle=-dLaAngle;
  }
  double dDeltaHeight=0;
  if (dLaAngle > 0 && dLaAngle < 90) {
    dDeltaHeight=(bo.getHeight() + dFullHeight - dItemHeight) / 2;
  }
 else   if (dLaAngle < 0 && dLaAngle > -90) {
    dDeltaHeight=(bo.getHeight() - dFullHeight + dItemHeight) / 2;
  }
 else   if (dLaAngle == 0 || dLaAngle == 90 || dLaAngle == -90) {
    dDeltaHeight=bo.getHeight() / 2;
  }
  if (isRightToLeft()) {
    tre.setLocation(goFactory.createLocation(dX + dColumnWidth - dLeftInset - 3 * dItemHeight / 2 - dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.LEFT);
  }
 else {
    tre.setLocation(goFactory.createLocation(dX + dLeftInset + (3 * dItemHeight / 2)+ dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.RIGHT);
  }
  if (la.isVisible()) {
    tre.setLabel(la);
    tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
    if (rtc.isRightToLeftText()) {
      tre.setRtlCaption();
    }
    ipr.drawText(tre);
  }
  if (valueLa != null) {
    final double dValueWidth=dColumnWidth - 2 * dLeftInset;
    Label tmpLa=goFactory.copyOf(valueLa);
    TextAlignment ta=TextAlignmentImpl.create();
    ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    tre.setBlockAlignment(ta);
    tre.setBlockBounds(goFactory.createBounds(dX + dLeftInset + 1,dY + dFullHeight + 1,dValueWidth - 2,dExtraHeight - 1));
    tre.setLabel(tmpLa);
    tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
    if (rtc.isRightToLeftText()) {
      tre.setRtlCaption();
    }
    ipr.drawText(tre);
  }
  la.getCaption().setValue(lih.getItemText());
  if (isInteractivityEnabled()) {
    Trigger tg;
    EList<Trigger> elTriggers=lg.getTriggers();
    Location[] loaHotspot=new Location[4];
    loaHotspot[0]=goFactory.createLocation(dX + 1,dY + 1);
    loaHotspot[1]=goFactory.createLocation(dX + dColumnWidth - 1,dY + 1);
    loaHotspot[2]=goFactory.createLocation(dX + dColumnWidth - 1,dY + dFullHeight + dExtraHeight - 1);
    loaHotspot[3]=goFactory.createLocation(dX + 1,dY + dFullHeight + dExtraHeight - 1);
    Trigger buildinTg=null;
    if (cm.getInteractivity() != null) {
      boolean customed=false;
switch (cm.getInteractivity().getLegendBehavior().getValue()) {
case LegendBehaviorType.HIGHLIGHT_SERIE:
        for (Iterator<Trigger> itr=elTriggers.iterator(); itr.hasNext(); ) {
          tg=itr.next();
          if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.HIGHLIGHT_LITERAL) {
            customed=true;
          }
        }
      if (!customed) {
        buildinTg=goFactory.createTrigger(TriggerCondition.ONCLICK_LITERAL,goFactory.createAction(ActionType.HIGHLIGHT_LITERAL,goFactory.createSeriesValue(String.valueOf(se.getSeriesIdentifier()))));
      }
    break;
case LegendBehaviorType.TOGGLE_SERIE_VISIBILITY:
  for (Iterator<Trigger> itr=elTriggers.iterator(); itr.hasNext(); ) {
    tg=itr.next();
    if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.TOGGLE_VISIBILITY_LITERAL) {
      customed=true;
    }
  }
if (!customed) {
  buildinTg=goFactory.createTrigger(TriggerCondition.ONCLICK_LITERAL,goFactory.createAction(ActionType.TOGGLE_VISIBILITY_LITERAL,goFactory.createSeriesValue(String.valueOf(se.getSeriesIdentifier()))));
}
break;
case LegendBehaviorType.NONE:
break;
}
}
if (!elTriggers.isEmpty() || buildinTg != null) {
final StructureSource source;
if (this.cm.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL) {
final DataPointHints dph=new DataPointHints(la.getCaption().getValue(),null,null,null,null,null,null,null,null,dataIndex,null,0,null);
source=WrappedStructureSource.createSeriesDataPoint(se,dph);
}
 else {
source=StructureSource.createSeries(se);
}
final InteractionEvent iev=((EventObjectCache)ipr).getEventObject(source,InteractionEvent.class);
iev.setCursor(lg.getCursor());
for (int t=0; t < elTriggers.size(); t++) {
tg=goFactory.copyOf(elTriggers.get(t));
processTrigger(tg,WrappedStructureSource.createLegendEntry(lg,lih));
iev.addTrigger(tg);
}
if (buildinTg != null) {
processTrigger(buildinTg,WrappedStructureSource.createLegendEntry(lg,lih));
iev.addTrigger(buildinTg);
}
final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(source,PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
ipr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ITEM,lerh);
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ENTRY,la);
}",0.996514304505097
69148,"public boolean isVisible(ICellContent cell){
  IElement parent=cell.getParent();
  if (parent instanceof IContent) {
    if (LayoutUtil.isHidden(((IContent)parent),format,context.getOutputDisplayNone())) {
      return false;
    }
  }
  IColumn column=cell.getColumnInstance();
  if (column == null) {
    return false;
  }
  if (isColumnHidden(column)) {
    return false;
  }
  return true;
}","public boolean isVisible(ICellContent cell){
  IElement parent=cell.getParent();
  boolean hiddenMask=context.isFixedLayout() && (Integer)context.getLayoutEngine().getOption(EngineTask.TASK_TYPE) == IEngineTask.TASK_RUN;
  if (parent instanceof IContent) {
    if (LayoutUtil.isHidden(((IContent)parent),format,context.getOutputDisplayNone(),hiddenMask)) {
      return false;
    }
  }
  IColumn column=cell.getColumnInstance();
  if (column == null) {
    return false;
  }
  if (isColumnHidden(column)) {
    return false;
  }
  return true;
}",0.8395324123273114
69149,"private boolean isColumnHidden(IColumn column){
  return LayoutUtil.isHiddenByVisibility(column,format);
}","private boolean isColumnHidden(IColumn column){
  boolean hiddenMask=context.isFixedLayout() && (Integer)context.getLayoutEngine().getOption(EngineTask.TASK_TYPE) == IEngineTask.TASK_RUN;
  return LayoutUtil.isHiddenByVisibility(column,format,hiddenMask);
}",0.5840220385674931
69150,"public static boolean isHiddenByVisibility(IColumn column,String format){
  String columnFormats=column.getVisibleFormat();
  if (columnFormats != null) {
    if (contains(columnFormats,EngineIRConstants.FORMAT_TYPE_VIEWER) || contains(columnFormats,BIRTConstants.BIRT_ALL_VALUE) || contains(columnFormats,format)) {
      return true;
    }
  }
  return false;
}","public static boolean isHiddenByVisibility(IColumn column,String format,boolean hiddenMask){
  String columnFormats=column.getVisibleFormat();
  if (columnFormats != null) {
    if (hiddenMask) {
      if (contains(columnFormats,BIRTConstants.BIRT_ALL_VALUE)) {
        return true;
      }
    }
 else {
      if (contains(columnFormats,EngineIRConstants.FORMAT_TYPE_VIEWER) || contains(columnFormats,BIRTConstants.BIRT_ALL_VALUE) || contains(columnFormats,format)) {
        return true;
      }
    }
  }
  return false;
}",0.6756756756756757
69151,"public static boolean isHidden(IContent content,String format,boolean outputDisplayNone){
  if (content != null) {
    IStyle style=content.getStyle();
    if (!outputDisplayNone) {
      if (IStyle.NONE_VALUE == style.getProperty(IStyle.STYLE_DISPLAY)) {
        return true;
      }
    }
    if (isHiddenByVisibility(style,format)) {
      return true;
    }
    if (content.getContentType() == IContent.CELL_CONTENT) {
      ICellContent cell=(ICellContent)content;
      IColumn column=cell.getColumnInstance();
      if (column != null) {
        return isHiddenByVisibility(column,format);
      }
    }
  }
  return false;
}","public static boolean isHidden(IContent content,String format,boolean outputDisplayNone,boolean hiddenMask){
  if (content != null) {
    IStyle style=content.getStyle();
    if (!outputDisplayNone) {
      if (IStyle.NONE_VALUE == style.getProperty(IStyle.STYLE_DISPLAY)) {
        return true;
      }
    }
    if (isHiddenByVisibility(style,format,hiddenMask)) {
      return true;
    }
    if (content.getContentType() == IContent.CELL_CONTENT) {
      ICellContent cell=(ICellContent)content;
      IColumn column=cell.getColumnInstance();
      if (column != null) {
        return isHiddenByVisibility(column,format,hiddenMask);
      }
    }
  }
  return false;
}",0.9685823754789272
69152,"public void startRow(IRowContent row) throws BirtException {
  if (cellEmitter != null) {
    cellEmitter.startRow(row);
  }
 else {
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone());
    if (context.isFixedLayout() && (Integer)context.getLayoutEngine().getOption(EngineTask.TASK_TYPE) == IEngineTask.TASK_RUN) {
      isHidden=false;
    }
    if (!isNestTable()) {
      int rowId=row.getRowID();
      if (lastRowId >= 0 && rowId > lastRowId + 1) {
        for (int i=lastRowId + 1; i < rowId; i++) {
          IRowContent newRow=(IRowContent)row.cloneContent(false);
          newRow.setParent(row.getParent());
          newRow.setRowID(i);
          startRow(newRow);
          endRow(newRow);
        }
      }
      layout.createRow(row,isHidden);
      if (!isHidden) {
        if (hasDropCell()) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          return;
        }
 else         if (layout.hasUnResolvedRow() && !LayoutUtil.isRepeatableRow(row)) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          hasDropCell=true;
          return;
        }
      }
    }
    if (!isHidden) {
      emitter.startRow(row);
    }
  }
}","public void startRow(IRowContent row) throws BirtException {
  if (cellEmitter != null) {
    cellEmitter.startRow(row);
  }
 else {
    boolean hiddenMask=context.isFixedLayout() && (Integer)context.getLayoutEngine().getOption(EngineTask.TASK_TYPE) == IEngineTask.TASK_RUN;
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone(),hiddenMask);
    if (!isNestTable()) {
      int rowId=row.getRowID();
      if (lastRowId >= 0 && rowId > lastRowId + 1) {
        for (int i=lastRowId + 1; i < rowId; i++) {
          IRowContent newRow=(IRowContent)row.cloneContent(false);
          newRow.setParent(row.getParent());
          newRow.setRowID(i);
          startRow(newRow);
          endRow(newRow);
        }
      }
      layout.createRow(row,isHidden);
      if (!isHidden) {
        if (hasDropCell()) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          return;
        }
 else         if (layout.hasUnResolvedRow() && !LayoutUtil.isRepeatableRow(row)) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          hasDropCell=true;
          return;
        }
      }
    }
    if (!isHidden) {
      emitter.startRow(row);
    }
  }
}",0.9104024297646166
69153,"public void endRow(IRowContent row) throws BirtException {
  if (cellEmitter != null) {
    cellEmitter.endRow(row);
  }
 else {
    if (!isNestTable()) {
      layout.endRow(row);
      lastRowId=row.getRowID();
      hasDropCell=layout.hasDropCell();
      if (hasDropCell()) {
        return;
      }
      if (layoutEvents.size() > 0) {
        flush();
        return;
      }
    }
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone());
    if (context.isFixedLayout() && (Integer)context.getLayoutEngine().getOption(EngineTask.TASK_TYPE) == IEngineTask.TASK_RUN) {
      isHidden=false;
    }
    if (!isHidden) {
      emitter.endRow(row);
    }
  }
}","public void endRow(IRowContent row) throws BirtException {
  if (cellEmitter != null) {
    cellEmitter.endRow(row);
  }
 else {
    if (!isNestTable()) {
      layout.endRow(row);
      lastRowId=row.getRowID();
      hasDropCell=layout.hasDropCell();
      if (hasDropCell()) {
        return;
      }
      if (layoutEvents.size() > 0) {
        flush();
        return;
      }
    }
    boolean hiddenMask=context.isFixedLayout() && (Integer)context.getLayoutEngine().getOption(EngineTask.TASK_TYPE) == IEngineTask.TASK_RUN;
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone(),hiddenMask);
    if (!isHidden) {
      emitter.endRow(row);
    }
  }
}",0.7662889518413598
69154,"public void startContent(IContent content,IContentEmitter emitter,boolean visible) throws BirtException {
  if (context.isFixedLayout() && (Integer)context.getLayoutEngine().getOption(EngineTask.TASK_TYPE) == IEngineTask.TASK_RUN) {
    visible=true;
  }
  if (isRepeated || (!visible && !currentNode.isStarted())) {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator,visible);
    setup(leafNode,true);
  }
 else {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator,visible);
    setup(leafNode,true);
    currentNode.start();
    if (visible) {
      ContentEmitterUtil.startContent(content,emitter);
    }
    generator.start(content,true);
    generator.end(content,true);
    currentNode.removeChildren();
  }
}","public void startContent(IContent content,IContentEmitter emitter,boolean visible) throws BirtException {
  if (isRepeated || (!visible && !currentNode.isStarted())) {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator,visible);
    setup(leafNode,true);
  }
 else {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator,visible);
    setup(leafNode,true);
    currentNode.start();
    if (visible) {
      ContentEmitterUtil.startContent(content,emitter);
    }
    generator.start(content,true);
    generator.end(content,true);
    currentNode.removeChildren();
  }
}",0.8577680525164114
69155,"public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter,boolean visible) throws BirtException {
  int type=content.getContentType();
  if (context.isFixedLayout() && (Integer)context.getLayoutEngine().getOption(EngineTask.TASK_TYPE) == IEngineTask.TASK_RUN) {
    visible=true;
  }
switch (type) {
case IContent.TABLE_BAND_CONTENT:
case IContent.LIST_BAND_CONTENT:
    boolean first=isFirst && !isRepeated;
  ContainerBufferNode bandNode=new ContainerBufferNode(content,emitter,generator,visible);
setup(bandNode,first);
currentNode=bandNode;
break;
case IContent.CELL_CONTENT:
ContainerBufferNode cellNode=new ContainerBufferNode(content,emitter,generator,visible);
setup(cellNode,isFirst);
if (currentNode.isStarted()) {
cellNode.start();
}
currentNode=cellNode;
break;
case IContent.PAGE_CONTENT:
PageNode pageNode=new PageNode(content,emitter,generator,visible);
setup(pageNode,isFirst);
currentNode=pageNode;
break;
case IContent.TABLE_CONTENT:
tableIds.add(content.getInstanceID().toUniqueString());
default :
ContainerBufferNode node=new ContainerBufferNode(content,emitter,generator,visible);
setup(node,isFirst);
currentNode=node;
break;
}
}","public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter,boolean visible) throws BirtException {
  int type=content.getContentType();
switch (type) {
case IContent.TABLE_BAND_CONTENT:
case IContent.LIST_BAND_CONTENT:
    boolean first=isFirst && !isRepeated;
  ContainerBufferNode bandNode=new ContainerBufferNode(content,emitter,generator,visible);
setup(bandNode,first);
currentNode=bandNode;
break;
case IContent.CELL_CONTENT:
ContainerBufferNode cellNode=new ContainerBufferNode(content,emitter,generator,visible);
setup(cellNode,isFirst);
if (currentNode.isStarted()) {
cellNode.start();
}
currentNode=cellNode;
break;
case IContent.PAGE_CONTENT:
PageNode pageNode=new PageNode(content,emitter,generator,visible);
setup(pageNode,isFirst);
currentNode=pageNode;
break;
case IContent.TABLE_CONTENT:
tableIds.add(content.getInstanceID().toUniqueString());
default :
ContainerBufferNode node=new ContainerBufferNode(content,emitter,generator,visible);
setup(node,isFirst);
currentNode=node;
break;
}
}",0.932487539646579
69156,"private boolean isColumnHidden(IColumn column){
  String format=context.getFormat();
  return LayoutUtil.isHiddenByVisibility(column,format);
}","private boolean isColumnHidden(IColumn column){
  String format=context.getFormat();
  return LayoutUtil.isHiddenByVisibility(column,format,false);
}",0.9794520547945206
69157,"public Object execute(Object[] arguments,IScriptFunctionContext context) throws BirtException {
  scriptContext=context;
  if (scriptContext != null) {
    ULocale locale=(ULocale)scriptContext.findProperty(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.LOCALE);
    if (defaultLocale != locale) {
      abbrMonthFormat=null;
      monthFormat=null;
      abbrWeekFormat=null;
      weekFormat=null;
      defaultLocale=locale;
    }
    timeZone=(TimeZone)scriptContext.findProperty(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.TIMEZONE);
  }
  return this.executor.execute(arguments,context);
}","public Object execute(Object[] arguments,IScriptFunctionContext context) throws BirtException {
  scriptContext=context;
  if (scriptContext != null) {
    ULocale locale=(ULocale)scriptContext.findProperty(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.LOCALE);
    if (defaultLocale != locale) {
      abbrMonthFormat=null;
      monthFormat=null;
      abbrWeekFormat=null;
      weekFormat=null;
      defaultLocale=locale;
    }
    timeZone=(TimeZone)scriptContext.findProperty(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.TIMEZONE);
  }
  if (timeZone == null) {
    timeZone=TimeZone.getDefault();
  }
  return this.executor.execute(arguments,context);
}",0.950965824665676
69158,"/** 
 * Return difference in number of seconds
 * @param d1
 * @param d2
 * @return
 */
private static long diffSecond(Date d1,Date d2){
  if (d1 == null || d2 == null) {
    throw new java.lang.IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  long diff=d2.getTime() - d1.getTime();
  if (timeZone.inDaylightTime(d1))   diff-=timeZone.getDSTSavings();
  if (timeZone.inDaylightTime(d2))   diff+=timeZone.getDSTSavings();
  return (new Long(diff / 1000)).longValue();
}","/** 
 * Return difference in number of seconds
 * @param d1
 * @param d2
 * @return
 */
private static long diffSecond(Date d1,Date d2){
  if (d1 == null || d2 == null) {
    throw new java.lang.IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  long diff=d2.getTime() - d1.getTime();
  if (timeZone != null && timeZone.inDaylightTime(d1))   diff-=timeZone.getDSTSavings();
  if (timeZone != null && timeZone.inDaylightTime(d2))   diff+=timeZone.getDSTSavings();
  return (new Long(diff / 1000)).longValue();
}",0.9607843137254902
69159,"/** 
 * Internally provided to render a single legend entry
 * @param ipr
 * @param lg
 * @param la
 * @param dX
 * @param dY
 * @param dW
 * @param dItemHeight
 * @param dLeftInset
 * @param dHorizontalSpacing
 * @param se
 * @param fPaletteEntry
 * @param lirh
 * @param i data row index
 * @throws ChartException
 */
protected final void renderLegendItem(IPrimitiveRenderer ipr,Legend lg,Label la,Label valueLa,LegendItemHints lih,double dX,double dY,double dItemHeight,double dColumnWidth,double dLeftInset,double dHorizontalSpacing,Fill fPaletteEntry,LegendItemRenderingHints lirh,double dScale) throws ChartException {
  double dFullHeight=lih.getItemHeight();
  double dExtraHeight=lih.getValueHeight();
  Series se=lih.getSeries();
  int dataIndex=lih.getIndex();
  if (la != null && la.getCaption() != null && valueLa != null && valueLa.getCaption() != null) {
    valueLa.getCaption().setFont(goFactory.copyOf(la.getCaption().getFont()));
    valueLa.getCaption().setColor(goFactory.copyOf(la.getCaption().getColor()));
  }
  LegendEntryRenderingHints lerh=new LegendEntryRenderingHints(la,valueLa,dataIndex,fPaletteEntry);
  AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ENTRY,la);
  final Bounds bo=lirh.getLegendGraphicBounds();
  if (isRightToLeft()) {
    bo.setLeft((dX + dColumnWidth - dLeftInset - 1 - 3 * dItemHeight / 2) / dScale);
  }
 else {
    bo.setLeft((dX + dLeftInset + 1) / dScale);
  }
  bo.setTop((dY + 1 + (dFullHeight - dItemHeight) / 2) / dScale);
  bo.setWidth((3 * dItemHeight / 2) / dScale);
  bo.setHeight((dItemHeight - 2) / dScale);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ITEM,lerh);
  if (la != null) {
    la.getCaption().setValue(EllipsisHelper.ellipsisString(la.getCaption().getValue(),lih.getValidItemLen()));
  }
  cComp.applyWrapping(xs,la,lg.getWrappingSize());
  bo.setLeft(bo.getLeft() * dScale);
  bo.setTop(bo.getTop() * dScale);
  bo.setWidth(bo.getWidth() * dScale);
  bo.setHeight(bo.getHeight() * dScale);
  final BaseRenderer br=lirh.getRenderer();
  br.renderLegendGraphic(ipr,lg,fPaletteEntry,bo);
  final TextRenderEvent tre=((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),TextRenderEvent.class);
  double dLaAngle=la.getCaption().getFont().getRotation();
  if (isRightToLeft()) {
    dLaAngle=-dLaAngle;
  }
  double dDeltaHeight=0;
  if (dLaAngle > 0 && dLaAngle < 90) {
    dDeltaHeight=(bo.getHeight() + dFullHeight - dItemHeight) / 2;
  }
 else   if (dLaAngle < 0 && dLaAngle > -90) {
    dDeltaHeight=(bo.getHeight() - dFullHeight + dItemHeight) / 2;
  }
 else   if (dLaAngle == 0 || dLaAngle == 90 || dLaAngle == -90) {
    dDeltaHeight=bo.getHeight() / 2;
  }
  if (isRightToLeft()) {
    tre.setLocation(goFactory.createLocation(dX + dColumnWidth - dLeftInset - 3 * dItemHeight / 2 - dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.LEFT);
  }
 else {
    tre.setLocation(goFactory.createLocation(dX + dLeftInset + (3 * dItemHeight / 2)+ dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.RIGHT);
  }
  if (la.isVisible()) {
    tre.setLabel(la);
    tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
    if (rtc.isRightToLeftText()) {
      tre.setRtlCaption();
    }
    ipr.drawText(tre);
  }
  if (valueLa != null) {
    final double dValueWidth=dColumnWidth - 2 * dLeftInset;
    Label tmpLa=goFactory.copyOf(valueLa);
    TextAlignment ta=TextAlignmentImpl.create();
    ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    tre.setBlockAlignment(ta);
    tre.setBlockBounds(goFactory.createBounds(dX + dLeftInset + 1,dY + dFullHeight + 1,dValueWidth - 2,dExtraHeight - 1));
    tre.setLabel(tmpLa);
    tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
    if (rtc.isRightToLeftText()) {
      tre.setRtlCaption();
    }
    ipr.drawText(tre);
  }
  la.getCaption().setValue(lih.getItemText());
  if (isInteractivityEnabled()) {
    Trigger tg;
    EList<Trigger> elTriggers=lg.getTriggers();
    Location[] loaHotspot=new Location[4];
    loaHotspot[0]=goFactory.createLocation(dX + 1,dY + 1);
    loaHotspot[1]=goFactory.createLocation(dX + dColumnWidth - 1,dY + 1);
    loaHotspot[2]=goFactory.createLocation(dX + dColumnWidth - 1,dY + dFullHeight + dExtraHeight - 1);
    loaHotspot[3]=goFactory.createLocation(dX + 1,dY + dFullHeight + dExtraHeight - 1);
    Trigger buildinTg=null;
    if (cm.getInteractivity() != null) {
      boolean customed=false;
switch (cm.getInteractivity().getLegendBehavior().getValue()) {
case LegendBehaviorType.HIGHLIGHT_SERIE:
        for (Iterator<Trigger> itr=elTriggers.iterator(); itr.hasNext(); ) {
          tg=itr.next();
          if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.HIGHLIGHT_LITERAL) {
            customed=true;
          }
        }
      if (!customed) {
        buildinTg=goFactory.createTrigger(TriggerCondition.ONCLICK_LITERAL,goFactory.createAction(ActionType.HIGHLIGHT_LITERAL,goFactory.createSeriesValue(String.valueOf(se.getSeriesIdentifier()))));
      }
    break;
case LegendBehaviorType.TOGGLE_SERIE_VISIBILITY:
  for (Iterator<Trigger> itr=elTriggers.iterator(); itr.hasNext(); ) {
    tg=itr.next();
    if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.TOGGLE_VISIBILITY_LITERAL) {
      customed=true;
    }
  }
if (!customed) {
  buildinTg=goFactory.createTrigger(TriggerCondition.ONCLICK_LITERAL,goFactory.createAction(ActionType.TOGGLE_VISIBILITY_LITERAL,goFactory.createSeriesValue(String.valueOf(se.getSeriesIdentifier()))));
}
break;
case LegendBehaviorType.NONE:
break;
}
}
if (!elTriggers.isEmpty() || buildinTg != null) {
final StructureSource source;
if (this.cm.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL) {
final DataPointHints dph=new DataPointHints(la,null,null,null,null,null,null,null,null,dataIndex,null,0,null);
source=WrappedStructureSource.createSeriesDataPoint(se,dph);
}
 else {
source=StructureSource.createSeries(se);
}
final InteractionEvent iev=((EventObjectCache)ipr).getEventObject(source,InteractionEvent.class);
iev.setCursor(lg.getCursor());
for (int t=0; t < elTriggers.size(); t++) {
tg=goFactory.copyOf(elTriggers.get(t));
processTrigger(tg,WrappedStructureSource.createLegendEntry(lg,lih));
iev.addTrigger(tg);
}
if (buildinTg != null) {
processTrigger(buildinTg,WrappedStructureSource.createLegendEntry(lg,lih));
iev.addTrigger(buildinTg);
}
final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(source,PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
ipr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ITEM,lerh);
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ENTRY,la);
}","/** 
 * Internally provided to render a single legend entry
 * @param ipr
 * @param lg
 * @param la
 * @param dX
 * @param dY
 * @param dW
 * @param dItemHeight
 * @param dLeftInset
 * @param dHorizontalSpacing
 * @param se
 * @param fPaletteEntry
 * @param lirh
 * @param i data row index
 * @throws ChartException
 */
protected final void renderLegendItem(IPrimitiveRenderer ipr,Legend lg,Label la,Label valueLa,LegendItemHints lih,double dX,double dY,double dItemHeight,double dColumnWidth,double dLeftInset,double dHorizontalSpacing,Fill fPaletteEntry,LegendItemRenderingHints lirh,double dScale) throws ChartException {
  double dFullHeight=lih.getItemHeight();
  double dExtraHeight=lih.getValueHeight();
  Series se=lih.getSeries();
  int dataIndex=lih.getIndex();
  if (la != null && la.getCaption() != null && valueLa != null && valueLa.getCaption() != null) {
    valueLa.getCaption().setFont(goFactory.copyOf(la.getCaption().getFont()));
    valueLa.getCaption().setColor(goFactory.copyOf(la.getCaption().getColor()));
  }
  LegendEntryRenderingHints lerh=new LegendEntryRenderingHints(la,valueLa,dataIndex,fPaletteEntry);
  AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ENTRY,la);
  final Bounds bo=lirh.getLegendGraphicBounds();
  if (isRightToLeft()) {
    bo.setLeft((dX + dColumnWidth - dLeftInset - 1 - 3 * dItemHeight / 2) / dScale);
  }
 else {
    bo.setLeft((dX + dLeftInset + 1) / dScale);
  }
  bo.setTop((dY + 1 + (dFullHeight - dItemHeight) / 2) / dScale);
  bo.setWidth((3 * dItemHeight / 2) / dScale);
  bo.setHeight((dItemHeight - 2) / dScale);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ITEM,lerh);
  if (la != null) {
    la.getCaption().setValue(EllipsisHelper.ellipsisString(la.getCaption().getValue(),lih.getValidItemLen()));
  }
  cComp.applyWrapping(xs,la,lg.getWrappingSize());
  bo.setLeft(bo.getLeft() * dScale);
  bo.setTop(bo.getTop() * dScale);
  bo.setWidth(bo.getWidth() * dScale);
  bo.setHeight(bo.getHeight() * dScale);
  final BaseRenderer br=lirh.getRenderer();
  br.renderLegendGraphic(ipr,lg,fPaletteEntry,bo);
  final TextRenderEvent tre=((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),TextRenderEvent.class);
  double dLaAngle=la.getCaption().getFont().getRotation();
  if (isRightToLeft()) {
    dLaAngle=-dLaAngle;
  }
  double dDeltaHeight=0;
  if (dLaAngle > 0 && dLaAngle < 90) {
    dDeltaHeight=(bo.getHeight() + dFullHeight - dItemHeight) / 2;
  }
 else   if (dLaAngle < 0 && dLaAngle > -90) {
    dDeltaHeight=(bo.getHeight() - dFullHeight + dItemHeight) / 2;
  }
 else   if (dLaAngle == 0 || dLaAngle == 90 || dLaAngle == -90) {
    dDeltaHeight=bo.getHeight() / 2;
  }
  if (isRightToLeft()) {
    tre.setLocation(goFactory.createLocation(dX + dColumnWidth - dLeftInset - 3 * dItemHeight / 2 - dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.LEFT);
  }
 else {
    tre.setLocation(goFactory.createLocation(dX + dLeftInset + (3 * dItemHeight / 2)+ dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.RIGHT);
  }
  if (la.isVisible()) {
    tre.setLabel(la);
    tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
    if (rtc.isRightToLeftText()) {
      tre.setRtlCaption();
    }
    ipr.drawText(tre);
  }
  if (valueLa != null) {
    final double dValueWidth=dColumnWidth - 2 * dLeftInset;
    Label tmpLa=goFactory.copyOf(valueLa);
    TextAlignment ta=TextAlignmentImpl.create();
    ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    tre.setBlockAlignment(ta);
    tre.setBlockBounds(goFactory.createBounds(dX + dLeftInset + 1,dY + dFullHeight + 1,dValueWidth - 2,dExtraHeight - 1));
    tre.setLabel(tmpLa);
    tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
    if (rtc.isRightToLeftText()) {
      tre.setRtlCaption();
    }
    ipr.drawText(tre);
  }
  la.getCaption().setValue(lih.getItemText());
  if (isInteractivityEnabled()) {
    Trigger tg;
    EList<Trigger> elTriggers=lg.getTriggers();
    Location[] loaHotspot=new Location[4];
    loaHotspot[0]=goFactory.createLocation(dX + 1,dY + 1);
    loaHotspot[1]=goFactory.createLocation(dX + dColumnWidth - 1,dY + 1);
    loaHotspot[2]=goFactory.createLocation(dX + dColumnWidth - 1,dY + dFullHeight + dExtraHeight - 1);
    loaHotspot[3]=goFactory.createLocation(dX + 1,dY + dFullHeight + dExtraHeight - 1);
    Trigger buildinTg=null;
    if (cm.getInteractivity() != null) {
      boolean customed=false;
switch (cm.getInteractivity().getLegendBehavior().getValue()) {
case LegendBehaviorType.HIGHLIGHT_SERIE:
        for (Iterator<Trigger> itr=elTriggers.iterator(); itr.hasNext(); ) {
          tg=itr.next();
          if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.HIGHLIGHT_LITERAL) {
            customed=true;
          }
        }
      if (!customed) {
        buildinTg=goFactory.createTrigger(TriggerCondition.ONCLICK_LITERAL,goFactory.createAction(ActionType.HIGHLIGHT_LITERAL,goFactory.createSeriesValue(String.valueOf(se.getSeriesIdentifier()))));
      }
    break;
case LegendBehaviorType.TOGGLE_SERIE_VISIBILITY:
  for (Iterator<Trigger> itr=elTriggers.iterator(); itr.hasNext(); ) {
    tg=itr.next();
    if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.TOGGLE_VISIBILITY_LITERAL) {
      customed=true;
    }
  }
if (!customed) {
  buildinTg=goFactory.createTrigger(TriggerCondition.ONCLICK_LITERAL,goFactory.createAction(ActionType.TOGGLE_VISIBILITY_LITERAL,goFactory.createSeriesValue(String.valueOf(se.getSeriesIdentifier()))));
}
break;
case LegendBehaviorType.NONE:
break;
}
}
if (!elTriggers.isEmpty() || buildinTg != null) {
final StructureSource source;
if (this.cm.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL) {
final DataPointHints dph=new DataPointHints(la.getCaption().getValue(),null,null,null,null,null,null,null,null,dataIndex,null,0,null);
source=WrappedStructureSource.createSeriesDataPoint(se,dph);
}
 else {
source=StructureSource.createSeries(se);
}
final InteractionEvent iev=((EventObjectCache)ipr).getEventObject(source,InteractionEvent.class);
iev.setCursor(lg.getCursor());
for (int t=0; t < elTriggers.size(); t++) {
tg=goFactory.copyOf(elTriggers.get(t));
processTrigger(tg,WrappedStructureSource.createLegendEntry(lg,lih));
iev.addTrigger(tg);
}
if (buildinTg != null) {
processTrigger(buildinTg,WrappedStructureSource.createLegendEntry(lg,lih));
iev.addTrigger(buildinTg);
}
final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(source,PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
ipr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ITEM,lerh);
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ENTRY,la);
}",0.9984135378106822
69160,"private BufferedStructureArray passBaseCubeResultSet(IAggregationResultSet baseResultSet,List<IAggregationResultSet> drillResultSets,List<IEdgeDrillFilter> drillFilters) throws IOException {
  BufferedStructureArray tempBufferArray=new BufferedStructureArray(Member.getCreator(),2000);
  List<Member[]> currentMemberList;
  List<Member[]> previewMemberList=new ArrayList<Member[]>();
  for (int i=0; i < baseResultSet.length(); i++) {
    baseResultSet.seek(i);
    IAggregationResultRow row=baseResultSet.getCurrentRow();
    currentMemberList=getDrilledMemberList(row.getLevelMembers(),drillResultSets,drillFilters);
    addMemberIntoBufferedArray(tempBufferArray,currentMemberList,previewMemberList);
  }
  return tempBufferArray;
}","private BufferedStructureArray passBaseCubeResultSet(IAggregationResultSet baseResultSet,List<IAggregationResultSet> drillResultSets,List<IEdgeDrillFilter> drillFilters) throws IOException {
  BufferedStructureArray tempBufferArray=new BufferedStructureArray(AggregationResultRow.getCreator(),2000);
  List<Member[]> currentMemberList;
  List<Member[]> previewMemberList=new ArrayList<Member[]>();
  for (int i=0; i < baseResultSet.length(); i++) {
    baseResultSet.seek(i);
    IAggregationResultRow row=baseResultSet.getCurrentRow();
    currentMemberList=getDrilledMemberList(row.getLevelMembers(),drillResultSets,drillFilters);
    addMemberIntoBufferedArray(tempBufferArray,currentMemberList,previewMemberList);
  }
  return tempBufferArray;
}",0.9824797843665768
69161,"public IAggregationResultRow getCurrentRow() throws IOException {
  return rs.getCurrentRow();
}","public IAggregationResultRow getCurrentRow() throws IOException {
  Member[] member=new Member[resultObject.length];
  for (int i=0; i < resultObject.length; i++) {
    member[i]=(Member)resultObject[i];
  }
  IAggregationResultRow row=new AggregationResultRow(member,null);
  return row;
}",0.3626943005181347
69162,"private static boolean isGrandTotalOnEdge(List aggrOns,List dimLevelOnColumn) throws DataException {
  boolean flag=false;
  for (int i=0; i < aggrOns.size(); i++) {
    String aggrExpr=aggrOns.get(i).toString();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(aggrExpr);
    if (dimLevelOnColumn.get(dimLevelOnColumn.size() - 1).equals(target)) {
      flag=true;
      break;
    }
  }
  return flag;
}","private static boolean isGrandTotalOnEdge(List aggrOns,List dimLevels) throws DataException {
  boolean flag=false;
  for (int i=0; i < aggrOns.size(); i++) {
    String aggrExpr=aggrOns.get(i).toString();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(aggrExpr);
    if (!dimLevels.isEmpty() && dimLevels.get(dimLevels.size() - 1).equals(target)) {
      flag=true;
      break;
    }
  }
  return flag;
}",0.887816646562123
69163,"DataSetHandle createSelectedDataSet(){
  DataSetHandle dataSetHandle=null;
  try {
    if (useODAV3) {
      dataSetHandle=createDataSetODAV3();
    }
 else {
      dataSetHandle=createDataSetODAV2();
    }
    return dataSetHandle;
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return null;
  }
catch (  IllegalStateException e) {
    ExceptionHandler.handle(e);
    return null;
  }
catch (  OdaException e) {
    ExceptionHandler.handle(e);
    return null;
  }
}","DataSetHandle createSelectedDataSet(){
  DataSetHandle dataSetHandle=null;
  try {
    if (useODAV3) {
      dataSetHandle=createDataSetODAV3();
    }
 else {
      dataSetHandle=createDataSetODAV2();
    }
    if (nameEditor != null && !nameEditor.isDisposed())     dataSetHandle.setName(nameEditor.getText());
    return dataSetHandle;
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return null;
  }
catch (  IllegalStateException e) {
    ExceptionHandler.handle(e);
    return null;
  }
catch (  OdaException e) {
    ExceptionHandler.handle(e);
    return null;
  }
}",0.9037580201649864
69164,"public void startRow(IRowContent row) throws BirtException {
  if (cellEmitter != null) {
    cellEmitter.startRow(row);
  }
 else {
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone());
    if (!isNestTable()) {
      int rowId=row.getRowID();
      if (lastRowId >= 0 && rowId > lastRowId + 1) {
        for (int i=lastRowId + 1; i < rowId; i++) {
          IRowContent newRow=(IRowContent)row.cloneContent(false);
          newRow.setParent(row.getParent());
          newRow.setRowID(i);
          startRow(newRow);
          endRow(newRow);
        }
      }
      layout.createRow(row,isHidden);
      if (!isHidden) {
        if (hasDropCell()) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          return;
        }
 else         if (layout.hasUnResolvedRow() && !LayoutUtil.isRepeatableRow(row)) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          hasDropCell=true;
          return;
        }
      }
    }
    if (!isHidden) {
      emitter.startRow(row);
    }
  }
}","public void startRow(IRowContent row) throws BirtException {
  if (cellEmitter != null) {
    cellEmitter.startRow(row);
  }
 else {
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone());
    if (context.isFixedLayout() && (Integer)context.getLayoutEngine().getOption(EngineTask.TASK_TYPE) == IEngineTask.TASK_RUN) {
      isHidden=false;
    }
    if (!isNestTable()) {
      int rowId=row.getRowID();
      if (lastRowId >= 0 && rowId > lastRowId + 1) {
        for (int i=lastRowId + 1; i < rowId; i++) {
          IRowContent newRow=(IRowContent)row.cloneContent(false);
          newRow.setParent(row.getParent());
          newRow.setRowID(i);
          startRow(newRow);
          endRow(newRow);
        }
      }
      layout.createRow(row,isHidden);
      if (!isHidden) {
        if (hasDropCell()) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          return;
        }
 else         if (layout.hasUnResolvedRow() && !LayoutUtil.isRepeatableRow(row)) {
          layoutEvents.push(new LayoutEvent(LayoutEvent.ON_ROW,new StartInfo(layout.getRowCount() - 1,0)));
          hasDropCell=true;
          return;
        }
      }
    }
    if (!isHidden) {
      emitter.startRow(row);
    }
  }
}",0.9367190648931882
69165,"public void endRow(IRowContent row) throws BirtException {
  if (cellEmitter != null) {
    cellEmitter.endRow(row);
  }
 else {
    if (!isNestTable()) {
      layout.endRow(row);
      lastRowId=row.getRowID();
      hasDropCell=layout.hasDropCell();
      if (hasDropCell()) {
        return;
      }
      if (layoutEvents.size() > 0) {
        flush();
        return;
      }
    }
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone());
    if (!isHidden) {
      emitter.endRow(row);
    }
  }
}","public void endRow(IRowContent row) throws BirtException {
  if (cellEmitter != null) {
    cellEmitter.endRow(row);
  }
 else {
    if (!isNestTable()) {
      layout.endRow(row);
      lastRowId=row.getRowID();
      hasDropCell=layout.hasDropCell();
      if (hasDropCell()) {
        return;
      }
      if (layoutEvents.size() > 0) {
        flush();
        return;
      }
    }
    boolean isHidden=LayoutUtil.isHidden(row,emitter.getOutputFormat(),context.getOutputDisplayNone());
    if (context.isFixedLayout() && (Integer)context.getLayoutEngine().getOption(EngineTask.TASK_TYPE) == IEngineTask.TASK_RUN) {
      isHidden=false;
    }
    if (!isHidden) {
      emitter.endRow(row);
    }
  }
}",0.8752978554408261
69166,"protected void addCaption(String caption) throws BirtException {
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  ReportContent report=(ReportContent)content.getReportContent();
  IRowContent row=report.createRowContent();
  row.setParent(content);
  ICellContent cell=report.createCellContent();
  cell.setColSpan(getColumnCount());
  cell.setColumn(0);
  StyleDeclaration cstyle=new StyleDeclaration(report.getCSSEngine());
  cstyle.setProperty(IStyle.STYLE_BORDER_TOP_STYLE,IStyle.HIDDEN_VALUE);
  cstyle.setProperty(IStyle.STYLE_BORDER_LEFT_STYLE,IStyle.HIDDEN_VALUE);
  cstyle.setProperty(IStyle.STYLE_BORDER_RIGHT_STYLE,IStyle.HIDDEN_VALUE);
  cell.setInlineStyle(cstyle);
  cell.setParent(row);
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setParent(cell);
  captionLabel.setText(caption);
  StyleDeclaration style=new StyleDeclaration(report.getCSSEngine());
  style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  captionLabel.setInlineStyle(style);
  RowArea captionRow=new RowArea(this,context,row);
  captionRow.setParent(this);
  captionRow.setWidth(width);
  captionRow.initialize();
  CellArea captionCell=new CellArea(captionRow,context,cell);
  captionCell.setWidth(width);
  captionCell.setMaxAvaWidth(width);
  captionCell.initialize();
  captionRow.children.add(captionCell);
  ILayout layout=new BlockTextArea(captionCell,context,captionLabel);
  layout.layout();
  int h=((BlockContainerArea)layout).getAllocatedHeight();
  captionCell.setContentHeight(h);
  captionRow.setHeight(captionCell.getAllocatedHeight());
  captionRow.finished=true;
  add(captionRow);
  if (repeatList == null) {
    repeatList=new ArrayList();
  }
  repeatList.add(captionRow);
  update(captionRow);
}","protected void addCaption(String caption) throws BirtException {
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  ReportContent report=(ReportContent)content.getReportContent();
  IRowContent row=report.createRowContent();
  row.setParent(content);
  ICellContent cell=report.createCellContent();
  cell.setColSpan(getColumnCount());
  cell.setColumn(0);
  StyleDeclaration cstyle=new StyleDeclaration(report.getCSSEngine());
  cstyle.setProperty(IStyle.STYLE_BORDER_TOP_STYLE,IStyle.HIDDEN_VALUE);
  cstyle.setProperty(IStyle.STYLE_BORDER_LEFT_STYLE,IStyle.HIDDEN_VALUE);
  cstyle.setProperty(IStyle.STYLE_BORDER_RIGHT_STYLE,IStyle.HIDDEN_VALUE);
  cell.setInlineStyle(cstyle);
  cell.setParent(row);
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setParent(cell);
  captionLabel.setText(caption);
  StyleDeclaration style=new StyleDeclaration(report.getCSSEngine());
  style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  captionLabel.setInlineStyle(style);
  RowArea captionRow=new RowArea(this,context,row);
  captionRow.isDummy=true;
  captionRow.setParent(this);
  captionRow.setWidth(width);
  captionRow.initialize();
  CellArea captionCell=new CellArea(captionRow,context,cell);
  captionCell.setWidth(width);
  captionCell.setMaxAvaWidth(width);
  captionCell.initialize();
  captionCell.isDummy=true;
  captionRow.children.add(captionCell);
  BlockTextArea captionText=new BlockTextArea(captionCell,context,captionLabel);
  captionText.isDummy=true;
  captionText.layout();
  int h=captionText.getAllocatedHeight();
  captionCell.setContentHeight(h);
  captionRow.setHeight(captionCell.getAllocatedHeight());
  captionRow.finished=true;
  add(captionRow);
  if (repeatList == null) {
    repeatList=new ArrayList();
  }
  repeatList.add(captionRow);
  update(captionRow);
}",0.9233314947600662
69167,"private void createExpressionCell(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  defaultValueComposite=ControlProvider.getDefaultComposite(parent);
  defaultValueString=Utility.getNonNullString(structureHandle.getDefaultValue());
  defaultValue=ControlProvider.createText(defaultValueComposite,defaultValueString);
  defaultValue.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
  defaultValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (defaultValue.isEnabled()) {
        validateSyntax();
      }
    }
  }
);
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(defaultValue.getText());
      expressionBuilder.setExpressionProvier(null);
      if (expressionBuilder.open() == OK) {
        defaultValue.setText(expressionBuilder.getResult().trim());
      }
    }
  }
;
  ExpressionButton exprButton=createExpressionButton(defaultValueComposite);
  defaultValue.setData(DataUIConstants.EXPR_BUTTON,exprButton);
  ExpressionHandle expr=getExpressionHandle();
  defaultValue.setText(expr == null || expr.getExpression() == null ? ""String_Node_Str"" : (String)expr.getExpression());
  defaultValue.setData(DataUIConstants.EXPR_TYPE,expr == null || expr.getType() == null ? UIUtil.getDefaultScriptType() : (String)expr.getType());
  ExpressionButton button=(ExpressionButton)defaultValue.getData(DataUIConstants.EXPR_BUTTON);
  if (button != null)   button.refresh();
}","private void createExpressionCell(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  defaultValueComposite=ControlProvider.getDefaultComposite(parent);
  defaultValueString=Utility.getNonNullString(structureHandle.getDefaultValue());
  defaultValue=ControlProvider.createText(defaultValueComposite,defaultValueString);
  defaultValue.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
  defaultValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (defaultValue.isEnabled()) {
        validateSyntax();
      }
    }
  }
);
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(defaultValue.getText());
      expressionBuilder.setExpressionProvier(null);
      if (expressionBuilder.open() == OK) {
        defaultValue.setText(expressionBuilder.getResult().trim());
      }
    }
  }
;
  ExpressionProvider provider=new ExpressionProvider((DataSetHandle)getContainer().getModel());
  ExpressionButtonUtil.createExpressionButton(defaultValueComposite,defaultValue,provider,true,SWT.PUSH);
  ExpressionButtonUtil.initExpressionButtonControl(defaultValue,structureHandle,DataSetParameter.DEFAULT_VALUE_MEMBER);
}",0.7037677151745593
69168,"private Status updateStructureHandle(){
  try {
    structureHandle.setName(dataSetParamName.getText());
    structureHandle.setParameterDataType(ParameterPageUtil.getTypeName(dataType.getText()));
    setDirection(direction.getText());
    structureHandle.setExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER,new Expression(defaultValue.isEnabled() ? defaultValue.getText().trim() : defaultValueString,(String)defaultValue.getData(DataUIConstants.EXPR_TYPE)));
    if (isOdaDataSetHandle)     ((OdaDataSetParameterHandle)structureHandle).setParamName(Utility.findIndex(linkToSalarParameter.getItems(),linkToSalarParameter.getText()) == 0 ? null : linkToSalarParameter.getText());
  }
 catch (  SemanticException e) {
    return getMiscStatus(IStatus.ERROR,Utility.getNonNullString(e.getMessage()));
  }
  return null;
}","private Status updateStructureHandle(){
  try {
    structureHandle.setName(dataSetParamName.getText());
    structureHandle.setParameterDataType(ParameterPageUtil.getTypeName(dataType.getText()));
    setDirection(direction.getText());
    ExpressionButtonUtil.saveExpressionButtonControl(defaultValue,structureHandle,DataSetParameter.DEFAULT_VALUE_MEMBER);
    if (isOdaDataSetHandle)     ((OdaDataSetParameterHandle)structureHandle).setParamName(Utility.findIndex(linkToSalarParameter.getItems(),linkToSalarParameter.getText()) == 0 ? null : linkToSalarParameter.getText());
  }
 catch (  SemanticException e) {
    return getMiscStatus(IStatus.ERROR,Utility.getNonNullString(e.getMessage()));
  }
  return null;
}",0.8471502590673575
69169,"private void createExpressionButton(Composite composite,final Text property,String propName){
  ExpressionButton exprButton=UIUtil.createExpressionButton(composite,SWT.PUSH);
  if (handle == null) {
    handle=DesignElementFactory.getInstance(getModuleHandle()).newOdaDataSet(null);
  }
  IExpressionHelper helper=new IExpressionHelper(){
    public String getExpression(){
      if (property != null)       return property.getText();
 else       return ""String_Node_Str"";
    }
    public void setExpression(    String expression){
      if (property != null)       property.setText(expression);
    }
    public void notifyExpressionChangeEvent(    String oldExpression,    String newExpression){
    }
    public IExpressionProvider getExpressionProvider(){
      return new ExpressionProvider(handle);
    }
    public String getExpressionType(){
      return (String)property.getData(DataUIConstants.EXPR_TYPE);
    }
    public void setExpressionType(    String exprType){
      property.setData(DataUIConstants.EXPR_TYPE,exprType);
    }
  }
;
  helper.setExpressionType(UIUtil.getDefaultScriptType());
  exprButton.setExpressionHelper(helper);
  if (PASSWORD.equals(propName)) {
    exprButton.setExpressionButtonProvider(new ExprButtonProvider(true,property));
  }
  Expression expr=handle.getPropertyBindingExpression(propName);
  property.setData(DataUIConstants.EXPR_BUTTON,exprButton);
  property.setText((expr == null || expr.getStringExpression() == null) ? ""String_Node_Str"" : expr.getStringExpression());
  if (expr != null)   property.setData(DataUIConstants.EXPR_TYPE,expr.getType());
  exprButton=(ExpressionButton)property.getData(DataUIConstants.EXPR_BUTTON);
  if (exprButton != null)   exprButton.refresh();
}","private void createExpressionButton(Composite composite,final Text property,String propName){
  ExpressionButton exprButton=ExpressionButtonUtil.createExpressionButton(composite,property,new ExpressionProvider(handle),true,SWT.PUSH);
  if (PASSWORD.equals(propName)) {
    exprButton.setExpressionButtonProvider(new ExprButtonProvider(true,property));
  }
  Expression expr=handle.getPropertyBindingExpression(propName);
  property.setData(ExpressionButtonUtil.EXPR_TYPE,expr == null || expr.getType() == null ? UIUtil.getDefaultScriptType() : (String)expr.getType());
  property.setText((expr == null || expr.getStringExpression() == null) ? ""String_Node_Str"" : expr.getStringExpression());
  exprButton.refresh();
}",0.2995918367346938
69170,"private void applyStyles(Chart model,StyledComponent type,EObject component,IStyleProcessor externalProcessor){
  if (component instanceof Block) {
    if (component.eContainer() instanceof Chart) {
      IStyle style=getMingledStyle(model,type,externalProcessor);
      ColorDefinition newBackcolor=style.getBackgroundColor();
      Image newBackimage=style.getBackgroundImage();
      Fill background=((Block)component).getBackground();
      if (background == null || (background instanceof ColorDefinition && ((ColorDefinition)background).getTransparency() == 0)) {
        if (newBackcolor != null) {
          ((Block)component).setBackground(newBackcolor);
        }
        if (newBackimage != null) {
          ((Block)component).setBackground(newBackimage);
        }
      }
      Insets ins=((Block)component).getInsets();
      Insets padding=style.getPadding();
      if (padding != null) {
        if (ins == null) {
          ins=goFactory.createInsets(0,0,0,0);
          ((Block)component).setInsets(ins);
          ins.setTop(padding.getTop());
          ins.setLeft(padding.getLeft());
          ins.setBottom(padding.getBottom());
          ins.setRight(padding.getRight());
        }
      }
    }
  }
 else   if (component instanceof Text) {
    IStyle style=getMingledStyle(model,type,externalProcessor);
    Text text=(Text)component;
    if (text.getFont() == null) {
      text.setFont(style.getFont());
    }
 else {
      FontDefinition newFont=style.getFont();
      FontDefinition font=text.getFont();
      ChartUtil.mergeFont(font,newFont);
    }
    if (text.getColor() == null) {
      text.setColor(style.getColor());
    }
  }
 else   if (component instanceof LineAttributes) {
    if (component.eContainer() instanceof Axis) {
      LineAttributes lia=(LineAttributes)component;
      if (lia.getColor() == null) {
        IStyle style=getMingledStyle(model,type,externalProcessor);
        lia.setColor(style.getColor());
      }
    }
  }
}","private void applyStyles(Chart model,StyledComponent type,EObject component,IStyleProcessor externalProcessor){
  if (component instanceof Block) {
    if (component.eContainer() instanceof Chart) {
      IStyle style=getMingledStyle(model,type,externalProcessor);
      ColorDefinition newBackcolor=style.getBackgroundColor();
      Image newBackimage=style.getBackgroundImage();
      Fill background=((Block)component).getBackground();
      if (background == null || (background instanceof ColorDefinition && ((ColorDefinition)background).getTransparency() == 0)) {
        if (newBackcolor != null) {
          ((Block)component).setBackground(newBackcolor);
        }
        if (newBackimage != null) {
          ((Block)component).setBackground(newBackimage);
        }
      }
      Insets ins=((Block)component).getInsets();
      Insets padding=style.getPadding();
      if (padding != null) {
        if (ins == null) {
          ins=goFactory.createInsets(0,0,0,0);
          ((Block)component).setInsets(ins);
          ins.setTop(padding.getTop());
          ins.setLeft(padding.getLeft());
          ins.setBottom(padding.getBottom());
          ins.setRight(padding.getRight());
        }
      }
    }
  }
 else   if (component instanceof Text) {
    IStyle style=getMingledStyle(model,type,externalProcessor);
    Text text=(Text)component;
    if (text.getFont() == null) {
      text.setFont(style.getFont());
    }
 else {
      FontDefinition newFont=style.getFont();
      FontDefinition font=text.getFont();
      ChartUtil.mergeFont(font,newFont);
    }
    if (text.getColor() == null) {
      text.setColor(style.getColor());
    }
  }
 else   if (component instanceof LineAttributes) {
    if (component.eContainer() instanceof Axis) {
      LineAttributes lia=(LineAttributes)component;
      if (lia.getColor() == null) {
        IStyle style=getMingledStyle(model,type,externalProcessor);
        lia.setColor(style.getColor());
      }
    }
  }
 else   if (component instanceof Axis) {
    Axis axis=(Axis)component;
    if (axis.getFormatSpecifier() == null) {
      IStyle style=getMingledStyle(model,type,externalProcessor);
switch (axis.getType()) {
case DATE_TIME_LITERAL:
        axis.setFormatSpecifier(style.getDateTimeFormat());
      break;
case LINEAR_LITERAL:
case LOGARITHMIC_LITERAL:
    axis.setFormatSpecifier(style.getNumberFormat());
  break;
case TEXT_LITERAL:
axis.setFormatSpecifier(style.getStringFormat());
break;
}
}
}
}",0.8882907133243607
69171,"/** 
 * A convenience methods provided to create an initialized NumberFormatSpecifier instance NOTE: Manually written
 * @return this instance
 */
public static StringFormatSpecifier create(){
  final StringFormatSpecifier sfs=AttributeFactory.eINSTANCE.createStringFormatSpecifier();
  return sfs;
}","public static StringFormatSpecifier create(String pattern){
  final StringFormatSpecifier sfs=create();
  sfs.setPattern(pattern);
  return sfs;
}",0.4932735426008968
69172,"/** 
 * Returns the background color of current style.
 * @return
 */
ColorDefinition getBackgroundColor();","/** 
 * Returns the background color of current style.
 * @return ColorDefinition
 */
ColorDefinition getBackgroundColor();",0.9304347826086956
69173,"/** 
 * Returns the padding of current style.
 * @return
 */
Insets getPadding();","/** 
 * Returns the padding of current style.
 * @return Insets
 */
Insets getPadding();",0.9585798816568049
69174,"/** 
 * Returns the color of current style.
 * @return
 */
ColorDefinition getColor();","/** 
 * Returns the color of current style.
 * @return ColorDefinition
 */
ColorDefinition getColor();",0.9148936170212766
69175,"/** 
 * Returns the font of current style.
 * @return
 */
FontDefinition getFont();","/** 
 * Returns the font of current style.
 * @return FontDefinition
 */
FontDefinition getFont();",0.9171270718232044
69176,"/** 
 * Returns the background image of current style.
 * @return
 */
Image getBackgroundImage();","/** 
 * Returns the background image of current style.
 * @return Image
 */
Image getBackgroundImage();",0.97
69177,"/** 
 * The constructor.
 * @param src
 */
public SimpleStyle(IStyle src){
  super();
  if (src != null) {
    if (src.getFont() != null) {
      setFont(goFactory.copyOf(src.getFont()));
    }
    if (src.getColor() != null) {
      setColor(goFactory.copyOf(src.getColor()));
    }
    if (src.getBackgroundColor() != null) {
      setBackgroundColor(goFactory.copyOf(src.getBackgroundColor()));
    }
    if (src.getBackgroundImage() != null) {
      setBackgroundImage(goFactory.copyOf(src.getBackgroundImage()));
    }
    if (src.getPadding() != null) {
      setPadding(goFactory.copyOf(src.getPadding()));
    }
  }
}","/** 
 * The constructor.
 * @param src
 */
public SimpleStyle(IStyle src){
  super();
  if (src != null) {
    if (src.getFont() != null) {
      setFont(goFactory.copyOf(src.getFont()));
    }
    if (src.getColor() != null) {
      setColor(goFactory.copyOf(src.getColor()));
    }
    if (src.getBackgroundColor() != null) {
      setBackgroundColor(goFactory.copyOf(src.getBackgroundColor()));
    }
    if (src.getBackgroundImage() != null) {
      setBackgroundImage(goFactory.copyOf(src.getBackgroundImage()));
    }
    if (src.getPadding() != null) {
      setPadding(goFactory.copyOf(src.getPadding()));
    }
    if (src.getDateTimeFormat() != null) {
      setDateTimeFormat(src.getDateTimeFormat().copyInstance());
    }
    if (src.getNumberFormat() != null) {
      setNumberFormat(src.getNumberFormat().copyInstance());
    }
    if (src.getStringFormat() != null) {
      setStringFormat(src.getStringFormat().copyInstance());
    }
  }
}",0.7911392405063291
69178,"/** 
 * Returns a copy of current instance.
 * @return
 */
public SimpleStyle copy(){
  SimpleStyle ss=new SimpleStyle();
  if (font != null) {
    ss.setFont(goFactory.copyOf(font));
  }
  if (color != null) {
    ss.setColor(goFactory.copyOf(color));
  }
  if (backcolor != null) {
    ss.setBackgroundColor(goFactory.copyOf(backcolor));
  }
  if (backimage != null) {
    ss.setBackgroundImage(goFactory.copyOf(backimage));
  }
  if (padding != null) {
    ss.setPadding(goFactory.copyOf(padding));
  }
  return ss;
}","/** 
 * Returns a copy of current instance.
 * @return
 */
public SimpleStyle copy(){
  SimpleStyle ss=new SimpleStyle();
  if (font != null) {
    ss.setFont(goFactory.copyOf(font));
  }
  if (color != null) {
    ss.setColor(goFactory.copyOf(color));
  }
  if (backcolor != null) {
    ss.setBackgroundColor(goFactory.copyOf(backcolor));
  }
  if (backimage != null) {
    ss.setBackgroundImage(goFactory.copyOf(backimage));
  }
  if (padding != null) {
    ss.setPadding(goFactory.copyOf(padding));
  }
  if (dateTimeFormat != null) {
    ss.setDateTimeFormat(dateTimeFormat.copyInstance());
  }
  if (numberFormat != null) {
    ss.setNumberFormat(numberFormat.copyInstance());
  }
  if (stringFormat != null) {
    ss.setStringFormat(stringFormat.copyInstance());
  }
  return ss;
}",0.7773527161438408
69179,"public IStyle getStyle(Chart model,StyledComponent name){
  SimpleStyle ss=null;
  if (cache == null || !useCache) {
    StyleHandle style=handle.getPrivateStyle();
    ss=new SimpleStyle();
    String fname=style.getFontFamilyHandle().getStringValue();
    int fsize=getFontSizeIntValue(handle);
    boolean fbold=getFontWeight(style.getFontWeight()) >= 700;
    boolean fitalic=DesignChoiceConstants.FONT_STYLE_ITALIC.equals(style.getFontStyle());
    boolean funder=DesignChoiceConstants.TEXT_UNDERLINE_UNDERLINE.equals(style.getTextUnderline());
    boolean fstrike=DesignChoiceConstants.TEXT_LINE_THROUGH_LINE_THROUGH.equals(style.getTextLineThrough());
    if (dstyle != null) {
      CSSValueList valueList=(CSSValueList)dstyle.getProperty(StyleConstants.STYLE_FONT_FAMILY);
      if (valueList.getLength() > 0) {
        fname=valueList.item(0).getCssText();
      }
      fsize=getSize(dstyle.getProperty(StyleConstants.STYLE_FONT_SIZE));
      fbold=isBoldFont(dstyle.getProperty(StyleConstants.STYLE_FONT_WEIGHT));
      fitalic=isItalicFont(dstyle.getFontStyle());
      funder=CSSConstants.CSS_UNDERLINE_VALUE.equals(dstyle.getTextUnderline());
      fstrike=CSSConstants.CSS_LINE_THROUGH_VALUE.equals(dstyle.getTextLineThrough());
    }
    HorizontalAlignment ha=HorizontalAlignment.LEFT_LITERAL;
    if (DesignChoiceConstants.TEXT_ALIGN_CENTER.equals(style.getTextAlign())) {
      ha=HorizontalAlignment.CENTER_LITERAL;
    }
 else     if (DesignChoiceConstants.TEXT_ALIGN_RIGHT.equals(style.getTextAlign())) {
      ha=HorizontalAlignment.RIGHT_LITERAL;
    }
    VerticalAlignment va=VerticalAlignment.TOP_LITERAL;
    if (DesignChoiceConstants.VERTICAL_ALIGN_MIDDLE.equals(style.getVerticalAlign())) {
      va=VerticalAlignment.CENTER_LITERAL;
    }
 else     if (DesignChoiceConstants.VERTICAL_ALIGN_BOTTOM.equals(style.getVerticalAlign())) {
      va=VerticalAlignment.BOTTOM_LITERAL;
    }
    TextAlignment ta=goFactory.createTextAlignment();
    ta.setHorizontalAlignment(ha);
    ta.setVerticalAlignment(va);
    FontDefinition fd=goFactory.createFontDefinition(fname,fsize,fbold,fitalic,funder,fstrike,true,0,ta);
    ss.setFont(fd);
    ColorHandle ch=style.getColor();
    if (dstyle != null) {
      ss.setColor(getColor(dstyle.getProperty(StyleConstants.STYLE_COLOR)));
    }
 else     if (ch != null && ch.getRGB() != -1) {
      int rgbValue=ch.getRGB();
      ColorDefinition cd=goFactory.createColorDefinition((rgbValue >> 16) & 0xff,(rgbValue >> 8) & 0xff,rgbValue & 0xff);
      ss.setColor(cd);
    }
 else {
      ss.setColor(goFactory.BLACK());
    }
    ch=style.getBackgroundColor();
    if (dstyle != null) {
      ss.setBackgroundColor(getColor(dstyle.getProperty(StyleConstants.STYLE_BACKGROUND_COLOR)));
    }
 else     if (ch != null && ch.getRGB() != -1) {
      int rgbValue=ch.getRGB();
      ColorDefinition cd=goFactory.createColorDefinition((rgbValue >> 16) & 0xff,(rgbValue >> 8) & 0xff,rgbValue & 0xff);
      ss.setBackgroundColor(cd);
    }
    if (style.getBackgroundImage() != null && style.getBackgroundImage().length() > 0) {
      String urlString=style.getBackgroundImage();
      try {
        new URL(urlString);
        ss.setBackgroundImage(goFactory.createImage(urlString));
      }
 catch (      Exception _) {
        if (urlString != null && urlString.startsWith(""String_Node_Str"")) {
          urlString=""String_Node_Str"" + urlString;
        }
 else {
          urlString=""String_Node_Str"" + urlString;
        }
        try {
          new URL(urlString);
          ss.setBackgroundImage(goFactory.createImage(urlString));
        }
 catch (        Exception __) {
          logger.log(_);
        }
      }
    }
    double pt=convertToPixel(style.getPaddingTop());
    double pb=convertToPixel(style.getPaddingBottom());
    double pl=convertToPixel(style.getPaddingLeft());
    double pr=convertToPixel(style.getPaddingRight());
    ss.setPadding(goFactory.createInsets(pt,pl,pb,pr));
    if (useCache) {
      cache=ss;
    }
  }
  if (useCache) {
    ss=cache.copy();
  }
  return ss;
}","public IStyle getStyle(Chart model,StyledComponent name){
  SimpleStyle ss=null;
  if (cache == null || !useCache) {
    StyleHandle style=handle.getPrivateStyle();
    ss=new SimpleStyle();
    String fname=style.getFontFamilyHandle().getStringValue();
    int fsize=getFontSizeIntValue(handle);
    boolean fbold=getFontWeight(style.getFontWeight()) >= 700;
    boolean fitalic=DesignChoiceConstants.FONT_STYLE_ITALIC.equals(style.getFontStyle());
    boolean funder=DesignChoiceConstants.TEXT_UNDERLINE_UNDERLINE.equals(style.getTextUnderline());
    boolean fstrike=DesignChoiceConstants.TEXT_LINE_THROUGH_LINE_THROUGH.equals(style.getTextLineThrough());
    if (dstyle != null) {
      CSSValueList valueList=(CSSValueList)dstyle.getProperty(StyleConstants.STYLE_FONT_FAMILY);
      if (valueList.getLength() > 0) {
        fname=valueList.item(0).getCssText();
      }
      fsize=getSize(dstyle.getProperty(StyleConstants.STYLE_FONT_SIZE));
      fbold=isBoldFont(dstyle.getProperty(StyleConstants.STYLE_FONT_WEIGHT));
      fitalic=isItalicFont(dstyle.getFontStyle());
      funder=CSSConstants.CSS_UNDERLINE_VALUE.equals(dstyle.getTextUnderline());
      fstrike=CSSConstants.CSS_LINE_THROUGH_VALUE.equals(dstyle.getTextLineThrough());
    }
    HorizontalAlignment ha=HorizontalAlignment.LEFT_LITERAL;
    if (DesignChoiceConstants.TEXT_ALIGN_CENTER.equals(style.getTextAlign())) {
      ha=HorizontalAlignment.CENTER_LITERAL;
    }
 else     if (DesignChoiceConstants.TEXT_ALIGN_RIGHT.equals(style.getTextAlign())) {
      ha=HorizontalAlignment.RIGHT_LITERAL;
    }
    VerticalAlignment va=VerticalAlignment.TOP_LITERAL;
    if (DesignChoiceConstants.VERTICAL_ALIGN_MIDDLE.equals(style.getVerticalAlign())) {
      va=VerticalAlignment.CENTER_LITERAL;
    }
 else     if (DesignChoiceConstants.VERTICAL_ALIGN_BOTTOM.equals(style.getVerticalAlign())) {
      va=VerticalAlignment.BOTTOM_LITERAL;
    }
    TextAlignment ta=goFactory.createTextAlignment();
    ta.setHorizontalAlignment(ha);
    ta.setVerticalAlignment(va);
    FontDefinition fd=goFactory.createFontDefinition(fname,fsize,fbold,fitalic,funder,fstrike,true,0,ta);
    ss.setFont(fd);
    ColorHandle ch=style.getColor();
    if (dstyle != null) {
      ss.setColor(getColor(dstyle.getProperty(StyleConstants.STYLE_COLOR)));
    }
 else     if (ch != null && ch.getRGB() != -1) {
      int rgbValue=ch.getRGB();
      ColorDefinition cd=goFactory.createColorDefinition((rgbValue >> 16) & 0xff,(rgbValue >> 8) & 0xff,rgbValue & 0xff);
      ss.setColor(cd);
    }
 else {
      ss.setColor(goFactory.BLACK());
    }
    ch=style.getBackgroundColor();
    if (dstyle != null) {
      ss.setBackgroundColor(getColor(dstyle.getProperty(StyleConstants.STYLE_BACKGROUND_COLOR)));
    }
 else     if (ch != null && ch.getRGB() != -1) {
      int rgbValue=ch.getRGB();
      ColorDefinition cd=goFactory.createColorDefinition((rgbValue >> 16) & 0xff,(rgbValue >> 8) & 0xff,rgbValue & 0xff);
      ss.setBackgroundColor(cd);
    }
    if (style.getBackgroundImage() != null && style.getBackgroundImage().length() > 0) {
      String urlString=style.getBackgroundImage();
      try {
        new URL(urlString);
        ss.setBackgroundImage(goFactory.createImage(urlString));
      }
 catch (      Exception _) {
        if (urlString != null && urlString.startsWith(""String_Node_Str"")) {
          urlString=""String_Node_Str"" + urlString;
        }
 else {
          urlString=""String_Node_Str"" + urlString;
        }
        try {
          new URL(urlString);
          ss.setBackgroundImage(goFactory.createImage(urlString));
        }
 catch (        Exception __) {
          logger.log(_);
        }
      }
    }
    double pt=convertToPixel(style.getPaddingTop());
    double pb=convertToPixel(style.getPaddingBottom());
    double pl=convertToPixel(style.getPaddingLeft());
    double pr=convertToPixel(style.getPaddingRight());
    ss.setPadding(goFactory.createInsets(pt,pl,pb,pr));
    String dateTimeFormat=null, stringFormat=null, numberFormat=null;
    if (dstyle != null) {
      dateTimeFormat=dstyle.getDateTimeFormat();
      stringFormat=dstyle.getStringFormat();
      numberFormat=dstyle.getNumberFormat();
    }
 else {
      dateTimeFormat=style.getDateTimeFormat();
      stringFormat=style.getStringFormat();
      numberFormat=style.getNumberFormat();
    }
    if (dateTimeFormat != null) {
      ss.setDateTimeFormat(JavaDateFormatSpecifierImpl.create(new DateFormatter(dateTimeFormat).getFormatCode()));
    }
    if (stringFormat != null) {
      ss.setStringFormat(StringFormatSpecifierImpl.create(stringFormat));
    }
    if (numberFormat != null) {
      ss.setNumberFormat(JavaNumberFormatSpecifierImpl.create(new NumberFormatter(numberFormat).getFormatCode()));
    }
    if (useCache) {
      cache=ss;
    }
  }
  if (useCache) {
    ss=cache.copy();
  }
  return ss;
}",0.9093145476909316
69180,"public void testGetSelectionList() throws Exception {
  ArrayList selist=(ArrayList)task.getSelectionList(""String_Node_Str"");
  IParameterSelectionChoice se=(IParameterSelectionChoice)selist.get(0);
  selist=(ArrayList)task.getSelectionList(""String_Node_Str"");
  se=(IParameterSelectionChoice)selist.get(0);
  assertEquals(""String_Node_Str"",se.getValue().toString());
  int listnumb=selist.size();
  assertEquals(21,listnumb);
  selist=(ArrayList)task.getSelectionList(""String_Node_Str"");
  se=(IParameterSelectionChoice)selist.get(0);
  assertEquals(""String_Node_Str"",se.getValue().toString());
  task.setValue(""String_Node_Str"",""String_Node_Str"");
  selist=(ArrayList)task.getSelectionList(""String_Node_Str"");
  se=(IParameterSelectionChoice)selist.get(0);
  assertEquals(""String_Node_Str"",se.getValue().toString());
  task.setValue(""String_Node_Str"",""String_Node_Str"");
  selist=(ArrayList)task.getSelectionList(""String_Node_Str"");
  se=(IParameterSelectionChoice)selist.get(0);
  assertEquals(""String_Node_Str"",se.getValue().toString());
  selist=(ArrayList)task.getSelectionList(""String_Node_Str"");
  se=(IParameterSelectionChoice)selist.get(0);
  assertEquals(""String_Node_Str"",se.getValue().toString());
  task.setValue(""String_Node_Str"",""String_Node_Str"");
  selist=(ArrayList)task.getSelectionList(""String_Node_Str"");
  se=(IParameterSelectionChoice)selist.get(0);
  assertEquals(""String_Node_Str"",se.getValue().toString());
  Integer icustno=new Integer(""String_Node_Str"");
  task.setValue(""String_Node_Str"",icustno);
  selist=(ArrayList)task.getSelectionList(""String_Node_Str"");
  se=(IParameterSelectionChoice)selist.get(0);
  assertEquals(""String_Node_Str"",se.getValue().toString());
  Integer iorderno=new Integer(""String_Node_Str"");
  task.setValue(""String_Node_Str"",iorderno);
}","public void testGetSelectionList() throws Exception {
  ArrayList selist=(ArrayList)task.getSelectionList(""String_Node_Str"");
  IParameterSelectionChoice se=(IParameterSelectionChoice)selist.get(0);
  assertEquals(""String_Node_Str"",se.getValue().toString());
  se=(IParameterSelectionChoice)selist.get(1);
  assertEquals(""String_Node_Str"",se.getValue().toString());
  selist=(ArrayList)task.getSelectionList(""String_Node_Str"");
  se=(IParameterSelectionChoice)selist.get(0);
  assertEquals(""String_Node_Str"",se.getValue().toString());
  int listnumb=selist.size();
  assertEquals(21,listnumb);
  selist=(ArrayList)task.getSelectionList(""String_Node_Str"");
  se=(IParameterSelectionChoice)selist.get(0);
  assertEquals(""String_Node_Str"",se.getValue().toString());
  task.setValue(""String_Node_Str"",""String_Node_Str"");
  selist=(ArrayList)task.getSelectionList(""String_Node_Str"");
  se=(IParameterSelectionChoice)selist.get(0);
  assertEquals(""String_Node_Str"",se.getValue().toString());
  task.setValue(""String_Node_Str"",""String_Node_Str"");
  selist=(ArrayList)task.getSelectionList(""String_Node_Str"");
  se=(IParameterSelectionChoice)selist.get(0);
  assertEquals(""String_Node_Str"",se.getValue().toString());
  selist=(ArrayList)task.getSelectionList(""String_Node_Str"");
  se=(IParameterSelectionChoice)selist.get(0);
  assertEquals(""String_Node_Str"",se.getValue().toString());
  task.setValue(""String_Node_Str"",""String_Node_Str"");
  selist=(ArrayList)task.getSelectionList(""String_Node_Str"");
  se=(IParameterSelectionChoice)selist.get(0);
  assertEquals(""String_Node_Str"",se.getValue().toString());
  Integer icustno=new Integer(""String_Node_Str"");
  task.setValue(""String_Node_Str"",icustno);
  selist=(ArrayList)task.getSelectionList(""String_Node_Str"");
  se=(IParameterSelectionChoice)selist.get(0);
  assertEquals(""String_Node_Str"",se.getValue().toString());
  Integer iorderno=new Integer(""String_Node_Str"");
  task.setValue(""String_Node_Str"",iorderno);
}",0.955525965379494
69181,"public void testGetSelectionListType_none(){
  scalarDefn=(IScalarParameterDefn)paramTask.getParameterDefn(""String_Node_Str"");
  assertEquals(""String_Node_Str"",IScalarParameterDefn.SELECTION_LIST_NONE,scalarDefn.getSelectionListType());
}","public void testGetSelectionListType_none(){
  scalarDefn=(IScalarParameterDefn)paramTask.getParameterDefn(""String_Node_Str"");
  assertEquals(""String_Node_Str"",IScalarParameterDefn.SELECTION_LIST_STATIC,scalarDefn.getSelectionListType());
}",0.9790794979079498
69182,"/** 
 * Refreshes the parameter list adds any new parameter retrieved. This method doesn't clear unused parameters. It is the users responsibility to delete individual parameters through the UI.
 */
private void refreshParameters(){
  try {
    DataSetHandle ds=((DataSetHandle)getContainer().getModel());
    Collection paramsFromDataSet=null;
    paramsFromDataSet=DataSetProvider.getCurrentInstance().getParametersFromDataSet(ds);
    if (paramsFromDataSet != null) {
      Iterator iter=paramsFromDataSet.iterator();
      while (iter.hasNext()) {
        IParameterMetaData paramFromDataSet=(IParameterMetaData)iter.next();
        DataSetParameter parameter=null;
        if (paramFromDataSet.getPosition() > 0) {
          parameter=findParameterByPosition(paramFromDataSet.getPosition());
        }
 else {
          parameter=findParameterByName(paramFromDataSet.getName());
        }
        if (parameter != null) {
          DataSetParameter newParameter=newParameter(paramFromDataSet);
          if (!isSameParameters(parameter,newParameter)) {
            parameters.replaceItem(parameter,newParameter);
          }
        }
 else {
          parameters.addItem(newParameter(paramFromDataSet));
        }
      }
      if (parameters.getListValue() != null && paramsFromDataSet.size() < parameters.getListValue().size()) {
        int size=parameters.getListValue().size();
        while (size > paramsFromDataSet.size()) {
          parameters.removeItem(size - 1);
          size=parameters.getListValue().size();
        }
      }
      updateParams2UniqueName(parameters.getListValue());
    }
 else {
      if (viewer != null) {
        PropertyHandle handle=(PropertyHandle)viewer.getViewer().getInput();
        handle.clearValue();
      }
    }
    refreshPositions();
    setPageProperties();
  }
 catch (  Exception e) {
  }
}","/** 
 * Refreshes the parameter list adds any new parameter retrieved. This method doesn't clear unused parameters. It is the users responsibility to delete individual parameters through the UI.
 */
private void refreshParameters(){
  try {
    DataSetHandle ds=((DataSetHandle)getContainer().getModel());
    Collection paramsFromDataSet=null;
    paramsFromDataSet=DataSetProvider.getCurrentInstance().getParametersFromDataSet(ds);
    if (paramsFromDataSet != null) {
      Iterator iter=paramsFromDataSet.iterator();
      while (iter.hasNext()) {
        IParameterMetaData paramFromDataSet=(IParameterMetaData)iter.next();
        DataSetParameter parameter=null;
        if (paramFromDataSet.getPosition() > 0) {
          parameter=findParameterByPosition(paramFromDataSet.getPosition());
        }
 else {
          parameter=findParameterByName(paramFromDataSet.getName());
        }
        if (parameter != null) {
          DataSetParameter newParameter=newParameter(paramFromDataSet);
          if (!isSameParameters(parameter,newParameter)) {
            parameters.replaceItem(parameter,newParameter);
          }
        }
 else {
          parameters.addItem(newParameter(paramFromDataSet));
        }
      }
      if (parameters.getListValue() != null && paramsFromDataSet.size() < parameters.getListValue().size()) {
        int size=parameters.getListValue().size();
        while (size > paramsFromDataSet.size()) {
          parameters.removeItem(size - 1);
          size=parameters.getListValue().size();
        }
      }
      updateParams2UniqueName(parameters.getListValue());
    }
 else {
      if (viewer != null) {
        PropertyHandle handle=(PropertyHandle)viewer.getViewer().getInput();
        handle.clearValue();
      }
    }
    refreshPositions();
    setPageProperties();
    refreshMessage();
  }
 catch (  Exception e) {
  }
}",0.9940955448201824
69183,"/** 
 * Creates a status .
 * @param severity The status severity: ERROR, WARNING, INFO and OK.
 * @param message The message of the status. Applies only for ERROR, WARNING and INFO.
 */
public StatusInfo(int severity,String message){
  fStatusMessage=message;
  fSeverity=severity;
}","/** 
 * Creates a status .
 * @param pluginID the plugin id this status is associated with.
 * @param severity The status severity: ERROR, WARNING, INFO and OK.
 * @param message The message of the status. Applies only for ERROR, WARNING and INFO.
 */
public StatusInfo(String pluginID,int severity,String message){
  fPluginID=pluginID;
  fStatusMessage=message;
  fSeverity=severity;
}",0.8464977645305514
69184,"public String getPlugin(){
  return ReportPlugin.REPORT_UI;
}","public String getPlugin(){
  return fPluginID == null ? ReportPlugin.REPORT_UI : fPluginID;
}",0.7922077922077922
69185,"public void doSave(IProgressMonitor monitor){
  if (ModuleUtil.compareReportVersion(ModuleUtil.getReportVersion(),getModel().getVersion()) > 0) {
    if (!MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
      return;
    }
  }
  getCurrentPageInstance().doSave(monitor);
  fireDesignFileChangeEvent();
}","public void doSave(IProgressMonitor monitor){
  boolean isReselect=false;
  if (ModuleUtil.compareReportVersion(ModuleUtil.getReportVersion(),getModel().getVersion()) > 0) {
    if (!MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
      return;
    }
 else {
      isReselect=true;
    }
  }
  getCurrentPageInstance().doSave(monitor);
  fireDesignFileChangeEvent();
  if (isReselect) {
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
          if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer() != null) {
            GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
            GraphicalViewer view=editor.getGraphicalViewer();
            UIUtil.resetViewSelection(view,true);
          }
        }
      }
    }
);
  }
}",0.5561959654178674
69186,"/** 
 * Return difference in number of seconds
 * @param d1
 * @param d2
 * @return
 */
private static long diffSecond(Date d1,Date d2){
  if (d1 == null || d2 == null) {
    throw new java.lang.IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  long diff=d2.getTime() - d1.getTime();
  diff+=timeZone.getDSTSavings();
  return (new Long(diff / 1000)).longValue();
}","/** 
 * Return difference in number of seconds
 * @param d1
 * @param d2
 * @return
 */
private static long diffSecond(Date d1,Date d2){
  if (d1 == null || d2 == null) {
    throw new java.lang.IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  long diff=d2.getTime() - d1.getTime();
  if (timeZone.inDaylightTime(d1))   diff-=timeZone.getDSTSavings();
  if (timeZone.inDaylightTime(d2))   diff+=timeZone.getDSTSavings();
  return (new Long(diff / 1000)).longValue();
}",0.8812785388127854
69187,"/** 
 * Computes the size of the legend. Note the computation relies on the title size, so the title block must be layouted first before this.
 * @param lg
 * @param sea
 * @throws ChartException
 */
public final Size compute(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc) throws ChartException {
  LegendData lgData=new LegendData(xs,cm,seda,rtc);
  initAvailableSize(lgData);
  boolean bMinSliceDefined=false;
  if (cm instanceof ChartWithoutAxes) {
    bMinSliceDefined=((ChartWithoutAxes)cm).isSetMinSlice();
    lgData.sMinSliceLabel=((ChartWithoutAxes)cm).getMinSliceLabel();
    if (lgData.sMinSliceLabel == null || lgData.sMinSliceLabel.length() == 0) {
      lgData.sMinSliceLabel=IConstants.UNDEFINED_STRING;
    }
 else {
      lgData.sMinSliceLabel=rtc.externalizedMessage(lgData.sMinSliceLabel);
    }
  }
  if (bMinSliceDefined && lgData.bPaletteByCategory && cm instanceof ChartWithoutAxes) {
    calculateExtraLegend(cm,rtc,lgData);
  }
  Size titleSize=getTitleSize(lgData);
  double[] size=null;
  Boolean bDataEmpty=rtc.getState(RunTimeContext.StateKey.DATA_EMPTY_KEY);
  if (bDataEmpty == null) {
    bDataEmpty=false;
  }
  if (!bDataEmpty) {
    ContentProvider cProvider=ContentProvider.newInstance(lgData);
    ContentPlacer cPlacer=ContentPlacer.newInstance(lgData);
    LegendItemHints lih;
    while ((lih=cProvider.nextContent()) != null) {
      if (!cPlacer.placeContent(lih)) {
        break;
      }
    }
    cPlacer.finishPlacing();
    size=cPlacer.getSize();
  }
  if (size == null) {
    size=new double[]{0,0};
  }
  double dWidth=size[0], dHeight=size[1];
  if (titleSize != null) {
    int iTitlePos=lgData.lg.getTitlePosition().getValue();
    if (iTitlePos == Position.ABOVE || iTitlePos == Position.BELOW) {
      dWidth=Math.max(dWidth,titleSize.getWidth());
      dHeight=dHeight + titleSize.getHeight();
    }
 else {
      dWidth=dWidth + titleSize.getWidth();
      dHeight=Math.max(dHeight,titleSize.getHeight());
    }
  }
  if (rtc != null) {
    List<LegendItemHints> legendItems=lgData.legendItems;
    LegendItemHints[] liha=legendItems.toArray(new LegendItemHints[legendItems.size()]);
    LegendLayoutHints lilh=new LegendLayoutHints(SizeImpl.create(dWidth,dHeight),titleSize,lgData.laTitle,lgData.bMinSliceApplied,lgData.sMinSliceLabel,liha);
    rtc.setLegendLayoutHints(lilh);
  }
  sz=SizeImpl.create(dWidth,dHeight);
  return sz;
}","/** 
 * Computes the size of the legend. Note the computation relies on the title size, so the title block must be layouted first before this.
 * @param lg
 * @param sea
 * @throws ChartException
 */
public final Size compute(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc) throws ChartException {
  LegendData lgData=new LegendData(xs,cm,seda,rtc);
  initAvailableSize(lgData);
  boolean bMinSliceDefined=false;
  if (cm instanceof ChartWithoutAxes) {
    bMinSliceDefined=((ChartWithoutAxes)cm).isSetMinSlice();
    lgData.sMinSliceLabel=((ChartWithoutAxes)cm).getMinSliceLabel();
    if (lgData.sMinSliceLabel == null || lgData.sMinSliceLabel.length() == 0) {
      lgData.sMinSliceLabel=IConstants.UNDEFINED_STRING;
    }
 else {
      lgData.sMinSliceLabel=rtc.externalizedMessage(lgData.sMinSliceLabel);
    }
  }
  if (bMinSliceDefined && lgData.bPaletteByCategory && cm instanceof ChartWithoutAxes) {
    calculateExtraLegend(cm,rtc,lgData);
  }
  Size titleSize=getTitleSize(lgData);
  double[] size=null;
  Boolean bDataEmpty=null;
  if (rtc != null) {
    bDataEmpty=rtc.getState(RunTimeContext.StateKey.DATA_EMPTY_KEY);
  }
  if (bDataEmpty == null) {
    bDataEmpty=false;
  }
  if (!bDataEmpty) {
    ContentProvider cProvider=ContentProvider.newInstance(lgData);
    ContentPlacer cPlacer=ContentPlacer.newInstance(lgData);
    LegendItemHints lih;
    while ((lih=cProvider.nextContent()) != null) {
      if (!cPlacer.placeContent(lih)) {
        break;
      }
    }
    cPlacer.finishPlacing();
    size=cPlacer.getSize();
  }
  if (size == null) {
    size=new double[]{0,0};
  }
  double dWidth=size[0], dHeight=size[1];
  if (titleSize != null) {
    int iTitlePos=lgData.lg.getTitlePosition().getValue();
    if (iTitlePos == Position.ABOVE || iTitlePos == Position.BELOW) {
      dWidth=Math.max(dWidth,titleSize.getWidth());
      dHeight=dHeight + titleSize.getHeight();
    }
 else {
      dWidth=dWidth + titleSize.getWidth();
      dHeight=Math.max(dHeight,titleSize.getHeight());
    }
  }
  if (rtc != null) {
    List<LegendItemHints> legendItems=lgData.legendItems;
    LegendItemHints[] liha=legendItems.toArray(new LegendItemHints[legendItems.size()]);
    LegendLayoutHints lilh=new LegendLayoutHints(SizeImpl.create(dWidth,dHeight),titleSize,lgData.laTitle,lgData.bMinSliceApplied,lgData.sMinSliceLabel,liha);
    rtc.setLegendLayoutHints(lilh);
  }
  sz=SizeImpl.create(dWidth,dHeight);
  return sz;
}",0.990569905699057
69188,"public boolean equals(Vector other){
  return v[0] == other.v[0] && v[1] == other.v[1] && v[2] == other.v[2];
}","public boolean equals(Object other){
  if (other instanceof Vector) {
    Vector ot=(Vector)other;
    return v[0] == ot.v[0] && v[1] == ot.v[1] && v[2] == ot.v[2];
  }
 else {
    return false;
  }
}",0.2572347266881029
69189,"public Object clone(){
  return new AxisTickCoordinates(size,dStart,dEnd,dStep,isTickBetweenCategory);
}","public Object clone(){
  try {
    AxisTickCoordinates cl=(AxisTickCoordinates)super.clone();
    cl.size=this.size;
    cl.dStart=this.dStart;
    cl.dEnd=this.dEnd;
    cl.dStep=this.dStep;
    cl.isTickBetweenCategory=this.isTickBetweenCategory;
    return cl;
  }
 catch (  CloneNotSupportedException e) {
    return new AxisTickCoordinates(size,dStart,dEnd,dStep,isTickBetweenCategory);
  }
}",0.3712574850299401
69190,"private void computeYLocationWithMinOrigin() throws ChartException, IllegalArgumentException {
  IntersectionValue iv=fHorizontalAxis.getIntersectionValue();
  double dY=PlotWithAxes.getLocation(fVerticalAxis.getScale(),iv);
  double dY1=dY;
  double dY2=dY;
  dY-=dAppliedXAxisPlotSpacing;
  dHTotal-=dAppliedXAxisPlotSpacing;
  dY1=dY;
  dY2=dY;
  double dTickSize=fPlotWithAxes.getTickSize();
  if (bTicksAbove && dTickSize <= dHTotal) {
    dY1-=dTickSize;
    dHTotal-=dTickSize;
  }
 else {
    dTickSize=0;
  }
  double dH1=0;
  double dH2=0;
  if (iXLabelLocation == PlotWithAxes.ABOVE) {
    dH1=Math.max(dXAxisLabelsThickness,dDecorationThickness[0]);
    dH2=Math.max(bTicksBelow ? fPlotWithAxes.getTickSize() : 0,dAppliedXAxisPlotSpacing);
  }
 else   if (iXLabelLocation == PlotWithAxes.BELOW) {
    dH1=dDecorationThickness[0];
    dH2+=Math.max((bTicksBelow ? fPlotWithAxes.getTickSize() : 0) + dXAxisLabelsThickness,dAppliedXAxisPlotSpacing);
  }
  if (dH1 + dH2 <= dHTotal) {
    dY1-=dH1;
    dY2+=dH2;
    dHTotal-=(dH1 + dH2);
  }
 else {
    fHorizontalAxis.setShowLabels(false);
  }
  if (iXTitleLocation == PlotWithAxes.ABOVE) {
    dY1-=dXAxisTitleThickness;
  }
 else   if (iXTitleLocation == PlotWithAxes.BELOW) {
    dY2+=dXAxisTitleThickness;
  }
  double dBlockY=fPlotBounds.getTop();
  if (dY1 < dBlockY) {
    final double dDelta=(dBlockY - dY1);
    dY1=dBlockY;
    dY+=dDelta;
    dY2+=dDelta;
  }
  if (iXLabelLocation == PlotWithAxes.ABOVE) {
    dXAxisThickness=dY2 - dY1;
  }
 else   if (iXLabelLocation == PlotWithAxes.BELOW) {
    dXAxisThickness=dY2 - dY1;
  }
  fAxisY=dY;
  fAxisTop=dY1;
  fAxisBottom=dY2;
}","private void computeYLocationWithMinOrigin() throws ChartException, IllegalArgumentException {
  IntersectionValue iv=fHorizontalAxis.getIntersectionValue();
  double dY=PlotWithAxes.getLocation(fVerticalAxis.getScale(),iv);
  double dY1=dY;
  double dY2=dY;
  dY-=dAppliedXAxisPlotSpacing;
  dHTotal-=dAppliedXAxisPlotSpacing;
  dY1=dY;
  dY2=dY;
  double dTickSize=fPlotWithAxes.getTickSize();
  if (bTicksAbove && dTickSize <= dHTotal) {
    dY1-=dTickSize;
    dHTotal-=dTickSize;
  }
 else {
    dTickSize=0;
  }
  double dH1=0;
  double dH2=0;
  if (iXLabelLocation == PlotWithAxes.ABOVE) {
    dH1=Math.max(dXAxisLabelsThickness,dDecorationThickness[0]);
    dH2=Math.max(bTicksBelow ? fPlotWithAxes.getTickSize() : 0,dAppliedXAxisPlotSpacing);
  }
 else   if (iXLabelLocation == PlotWithAxes.BELOW) {
    dH1=dDecorationThickness[0];
    dH2+=Math.max((bTicksBelow ? fPlotWithAxes.getTickSize() : 0) + dXAxisLabelsThickness,dAppliedXAxisPlotSpacing);
  }
  if (dH1 + dH2 <= dHTotal) {
    dY1-=dH1;
    dY2+=dH2;
    dHTotal-=(dH1 + dH2);
  }
 else {
    fHorizontalAxis.setShowLabels(false);
  }
  if (iXTitleLocation == PlotWithAxes.ABOVE) {
    dY1-=dXAxisTitleThickness;
  }
 else   if (iXTitleLocation == PlotWithAxes.BELOW) {
    dY2+=dXAxisTitleThickness;
  }
  double dBlockY=fPlotBounds.getTop();
  if (dY1 < dBlockY) {
    final double dDelta=(dBlockY - dY1);
    dY1=dBlockY;
    dY+=dDelta;
    dY2+=dDelta;
  }
  fAxisY=dY;
  fAxisTop=dY1;
  fAxisBottom=dY2;
}",0.9195402298850576
69191,"private void computeYLocationWithMaxOrigin() throws ChartException, IllegalArgumentException {
  IntersectionValue iv=fHorizontalAxis.getIntersectionValue();
  double dY=PlotWithAxes.getLocation(fVerticalAxis.getScale(),iv);
  double dY1=dY;
  double dY2=dY;
  dY+=dAppliedXAxisPlotSpacing;
  dHTotal-=dAppliedXAxisPlotSpacing;
  dY1=dY;
  dY2=dY;
  double dTickSize=fPlotWithAxes.getTickSize();
  if (bTicksBelow && dTickSize < dHTotal) {
    dY2+=dTickSize;
    dHTotal-=dTickSize;
  }
 else {
    dTickSize=0;
  }
  if (iXLabelLocation == PlotWithAxes.ABOVE) {
    double dXLabelHeight=Math.max((bTicksAbove ? dTickSize : 0) + dXAxisLabelsThickness,dAppliedXAxisPlotSpacing);
    if (dXLabelHeight + dDecorationThickness[1] < dHTotal) {
      dY1-=dXLabelHeight;
      dY2+=dDecorationThickness[1];
      dHTotal-=(dXLabelHeight + dDecorationThickness[1]);
    }
 else {
      dXLabelHeight=0;
      fHorizontalAxis.setShowLabels(false);
    }
  }
 else   if (iXLabelLocation == PlotWithAxes.BELOW) {
    double dXLabelHeight=Math.max(dXAxisLabelsThickness,dDecorationThickness[1]);
    double dHt1=Math.max(bTicksAbove ? dTickSize : 0,dAppliedXAxisPlotSpacing);
    if (dXLabelHeight + dHt1 <= dHTotal) {
      dY2+=dXLabelHeight;
      dY1-=dHt1;
      dHTotal-=(dXLabelHeight + dHt1);
    }
 else {
      dXLabelHeight=0;
      fHorizontalAxis.setShowLabels(false);
    }
  }
  if (iXTitleLocation == PlotWithAxes.ABOVE) {
    dY1-=dXAxisTitleThickness;
  }
 else   if (iXTitleLocation == PlotWithAxes.BELOW) {
    dY2+=dXAxisTitleThickness;
  }
  double dBlockY=fPlotBounds.getTop();
  double dBlockHeight=fPlotBounds.getHeight();
  if (dY2 > dBlockY + dBlockHeight) {
    final double dDelta=(dY2 - (dBlockY + dBlockHeight));
    dY2=dBlockY + dBlockHeight;
    dY-=dDelta;
    dY1-=dDelta;
  }
  if (iXLabelLocation == PlotWithAxes.ABOVE) {
    dXAxisThickness=dY2 - dY1;
  }
 else   if (iXLabelLocation == PlotWithAxes.BELOW) {
    dXAxisThickness=dY2 - dY1;
  }
  fAxisY=dY;
  fAxisTop=dY1;
  fAxisBottom=dY2;
}","private void computeYLocationWithMaxOrigin() throws ChartException, IllegalArgumentException {
  IntersectionValue iv=fHorizontalAxis.getIntersectionValue();
  double dY=PlotWithAxes.getLocation(fVerticalAxis.getScale(),iv);
  double dY1=dY;
  double dY2=dY;
  dY+=dAppliedXAxisPlotSpacing;
  dHTotal-=dAppliedXAxisPlotSpacing;
  dY1=dY;
  dY2=dY;
  double dTickSize=fPlotWithAxes.getTickSize();
  if (bTicksBelow && dTickSize < dHTotal) {
    dY2+=dTickSize;
    dHTotal-=dTickSize;
  }
 else {
    dTickSize=0;
  }
  if (iXLabelLocation == PlotWithAxes.ABOVE) {
    double dXLabelHeight=Math.max((bTicksAbove ? dTickSize : 0) + dXAxisLabelsThickness,dAppliedXAxisPlotSpacing);
    if (dXLabelHeight + dDecorationThickness[1] < dHTotal) {
      dY1-=dXLabelHeight;
      dY2+=dDecorationThickness[1];
      dHTotal-=(dXLabelHeight + dDecorationThickness[1]);
    }
 else {
      dXLabelHeight=0;
      fHorizontalAxis.setShowLabels(false);
    }
  }
 else   if (iXLabelLocation == PlotWithAxes.BELOW) {
    double dXLabelHeight=Math.max(dXAxisLabelsThickness,dDecorationThickness[1]);
    double dHt1=Math.max(bTicksAbove ? dTickSize : 0,dAppliedXAxisPlotSpacing);
    if (dXLabelHeight + dHt1 <= dHTotal) {
      dY2+=dXLabelHeight;
      dY1-=dHt1;
      dHTotal-=(dXLabelHeight + dHt1);
    }
 else {
      dXLabelHeight=0;
      fHorizontalAxis.setShowLabels(false);
    }
  }
  if (iXTitleLocation == PlotWithAxes.ABOVE) {
    dY1-=dXAxisTitleThickness;
  }
 else   if (iXTitleLocation == PlotWithAxes.BELOW) {
    dY2+=dXAxisTitleThickness;
  }
  double dBlockY=fPlotBounds.getTop();
  double dBlockHeight=fPlotBounds.getHeight();
  if (dY2 > dBlockY + dBlockHeight) {
    final double dDelta=(dY2 - (dBlockY + dBlockHeight));
    dY2=dBlockY + dBlockHeight;
    dY-=dDelta;
    dY1-=dDelta;
  }
  fAxisY=dY;
  fAxisTop=dY1;
  fAxisBottom=dY2;
}",0.9349509550851832
69192,"private void computeLinearMinMax(boolean bAlignZero){
  final double dMinReal, dMaxReal;
  final double dMinValue, dMaxValue;
  double dMargin=0;
  if (bMargin) {
    dMargin=Math.abs(asDouble(oMaxAuto).doubleValue() - asDouble(oMinAuto).doubleValue()) * iMarginPercent / 100;
  }
  dMinReal=asDouble(oMinAuto).doubleValue() - dMargin;
  dMaxReal=asDouble(oMaxAuto).doubleValue() + dMargin;
  dMinValue=bMinimumFixed ? asDouble(oMinFixed).doubleValue() : dMinReal;
  dMaxValue=bMaximumFixed ? asDouble(oMaxFixed).doubleValue() : dMaxReal;
  double dMinAxis=dMinValue;
  double dMaxAxis=dMaxValue;
  double dStep=0;
  if (bStepFixed && oStepNumber != null) {
    oStep=new Double(Math.abs(dMaxValue - dMinValue) / (oStepNumber.intValue()));
    dStep=asDouble(oStep).doubleValue();
  }
 else {
    dStep=asDouble(oStep).doubleValue();
    if (bMargin) {
      dMinAxis=((dStep >= 1) ? Math.floor(dMinAxis / dStep) : Math.round(dMinAxis / dStep)) * dStep;
      dMaxAxis=(((dStep >= 1) ? Math.floor(dMaxAxis / dStep) : Math.round(dMaxAxis / dStep)) + 1) * dStep;
      if (dMaxAxis - dMaxValue >= dStep) {
        dMaxAxis-=dStep;
      }
    }
 else     if (!bExpandMinmax) {
      double dMinAxis1=((dStep >= 1) ? Math.floor(dMinAxis / dStep) : Math.round(dMinAxis / dStep)) * dStep;
      dMinAxis=dMinAxis < dMinAxis1 ? dMinAxis1 - dStep : dMinAxis1;
      double dMaxAxis1=((dStep >= 1) ? Math.floor(dMaxAxis / dStep) : Math.round(dMaxAxis / dStep)) * dStep;
      dMaxAxis=dMaxAxis > dMaxAxis1 ? dMaxAxis1 + dStep : dMaxAxis1;
    }
 else {
      final double dAbsMax=Math.abs(dMaxValue);
      final double dAbsMin=Math.abs(dMinValue);
      dMinAxis=((dStep >= 1) ? Math.floor(dAbsMin / dStep) : Math.round(dAbsMin / dStep)) * dStep;
      dMaxAxis=((dStep >= 1) ? Math.floor(dAbsMax / dStep) : Math.round(dAbsMax / dStep)) * dStep;
      if (ChartUtil.mathEqual(dMinAxis,dAbsMin)) {
        dMinAxis+=dStep;
        if (dMinValue < 0) {
          dMinAxis=-dMinAxis;
        }
 else         if (dMinValue == 0) {
          dMinAxis=0;
        }
      }
 else {
        if (dMinValue < 0) {
          dMinAxis=-(dMinAxis + dStep);
        }
 else         if (dMinAxis >= dMinValue && dMinAxis != 0) {
          dMinAxis-=dStep;
        }
      }
      if (ChartUtil.mathEqual(dMaxAxis,dAbsMax)) {
        dMaxAxis+=dStep;
        if (dMaxValue < 0) {
          dMaxAxis=-dMaxAxis;
        }
 else         if (dMaxValue == 0) {
          dMaxAxis=0;
        }
      }
 else       if (!ChartUtil.mathEqual(dMinAxis,dMaxValue)) {
        if (dMaxValue < 0) {
          dMaxAxis=-(dMaxAxis - dStep);
        }
 else         if (dMaxValue > 0) {
          if (dMaxAxis < dMaxValue) {
            dMaxAxis+=dStep;
          }
        }
      }
      if (dMinValue < 0 && dMaxValue < 0) {
        if (dMaxAxis <= dMaxValue - dStep) {
          dMaxAxis+=2 * dStep;
        }
      }
      if (dMinValue > 0 && dMaxValue > 0) {
        if (dMinAxis >= dMinValue + dStep) {
          dMinAxis-=2 * dStep;
        }
      }
    }
  }
  if (dMinValue == 0 && dMaxValue == 0) {
    if (dMinAxis >= 0) {
      dMinAxis=-1;
    }
    if (dMaxAxis <= 0) {
      dMaxAxis=1;
    }
  }
  if ((iType & PERCENT) == PERCENT) {
    if (dMaxAxis > 0) {
      dMaxAxis=100;
    }
    if (dMinAxis < 0) {
      dMinAxis=-100;
    }
  }
  if (bAlignZero && dMinAxis < 0 && dMaxAxis > 0) {
    double abs=Math.max(Math.abs(dMinAxis),Math.abs(dMaxAxis));
    dMinAxis=-abs;
    dMaxAxis=abs;
  }
  if (!bMaximumFixed) {
    oMax=new Double(dMaxAxis);
  }
  if (!bMinimumFixed) {
    oMin=new Double(dMinAxis);
  }
  if (bMargin) {
    if (bMinimumFixed && dMinValue > dMinReal) {
      oMinAuto=new Double(dMinReal);
    }
 else {
      oMinAuto=null;
    }
    if (bMaximumFixed && dMaxValue < dMaxReal) {
      oMaxAuto=new Double(dMaxReal);
    }
 else {
      oMaxAuto=null;
    }
  }
 else {
    oMinAuto=null;
    oMaxAuto=null;
  }
}","private void computeLinearMinMax(boolean bAlignZero){
  final double dMinReal, dMaxReal;
  final double dMinValue, dMaxValue;
  double dMargin=0;
  if (bMargin) {
    dMargin=Math.abs(asDouble(oMaxAuto).doubleValue() - asDouble(oMinAuto).doubleValue()) * iMarginPercent / 100;
  }
  dMinReal=asDouble(oMinAuto).doubleValue() - dMargin;
  dMaxReal=asDouble(oMaxAuto).doubleValue() + dMargin;
  dMinValue=bMinimumFixed ? asDouble(oMinFixed).doubleValue() : dMinReal;
  dMaxValue=bMaximumFixed ? asDouble(oMaxFixed).doubleValue() : dMaxReal;
  double dMinAxis=dMinValue;
  double dMaxAxis=dMaxValue;
  double dStep=0;
  if (bStepFixed && oStepNumber != null) {
    oStep=new Double(Math.abs(dMaxValue - dMinValue) / (oStepNumber.intValue()));
  }
 else {
    dStep=asDouble(oStep).doubleValue();
    if (bMargin) {
      dMinAxis=((dStep >= 1) ? Math.floor(dMinAxis / dStep) : Math.round(dMinAxis / dStep)) * dStep;
      dMaxAxis=(((dStep >= 1) ? Math.floor(dMaxAxis / dStep) : Math.round(dMaxAxis / dStep)) + 1) * dStep;
      if (dMaxAxis - dMaxValue >= dStep) {
        dMaxAxis-=dStep;
      }
    }
 else     if (!bExpandMinmax) {
      double dMinAxis1=((dStep >= 1) ? Math.floor(dMinAxis / dStep) : Math.round(dMinAxis / dStep)) * dStep;
      dMinAxis=dMinAxis < dMinAxis1 ? dMinAxis1 - dStep : dMinAxis1;
      double dMaxAxis1=((dStep >= 1) ? Math.floor(dMaxAxis / dStep) : Math.round(dMaxAxis / dStep)) * dStep;
      dMaxAxis=dMaxAxis > dMaxAxis1 ? dMaxAxis1 + dStep : dMaxAxis1;
    }
 else {
      final double dAbsMax=Math.abs(dMaxValue);
      final double dAbsMin=Math.abs(dMinValue);
      dMinAxis=((dStep >= 1) ? Math.floor(dAbsMin / dStep) : Math.round(dAbsMin / dStep)) * dStep;
      dMaxAxis=((dStep >= 1) ? Math.floor(dAbsMax / dStep) : Math.round(dAbsMax / dStep)) * dStep;
      if (ChartUtil.mathEqual(dMinAxis,dAbsMin)) {
        dMinAxis+=dStep;
        if (dMinValue < 0) {
          dMinAxis=-dMinAxis;
        }
 else         if (dMinValue == 0) {
          dMinAxis=0;
        }
      }
 else {
        if (dMinValue < 0) {
          dMinAxis=-(dMinAxis + dStep);
        }
 else         if (dMinAxis >= dMinValue && dMinAxis != 0) {
          dMinAxis-=dStep;
        }
      }
      if (ChartUtil.mathEqual(dMaxAxis,dAbsMax)) {
        dMaxAxis+=dStep;
        if (dMaxValue < 0) {
          dMaxAxis=-dMaxAxis;
        }
 else         if (dMaxValue == 0) {
          dMaxAxis=0;
        }
      }
 else       if (!ChartUtil.mathEqual(dMinAxis,dMaxValue)) {
        if (dMaxValue < 0) {
          dMaxAxis=-(dMaxAxis - dStep);
        }
 else         if (dMaxValue > 0) {
          if (dMaxAxis < dMaxValue) {
            dMaxAxis+=dStep;
          }
        }
      }
      if (dMinValue < 0 && dMaxValue < 0) {
        if (dMaxAxis <= dMaxValue - dStep) {
          dMaxAxis+=2 * dStep;
        }
      }
      if (dMinValue > 0 && dMaxValue > 0) {
        if (dMinAxis >= dMinValue + dStep) {
          dMinAxis-=2 * dStep;
        }
      }
    }
  }
  if (dMinValue == 0 && dMaxValue == 0) {
    if (dMinAxis >= 0) {
      dMinAxis=-1;
    }
    if (dMaxAxis <= 0) {
      dMaxAxis=1;
    }
  }
  if ((iType & PERCENT) == PERCENT) {
    if (dMaxAxis > 0) {
      dMaxAxis=100;
    }
    if (dMinAxis < 0) {
      dMinAxis=-100;
    }
  }
  if (bAlignZero && dMinAxis < 0 && dMaxAxis > 0) {
    double abs=Math.max(Math.abs(dMinAxis),Math.abs(dMaxAxis));
    dMinAxis=-abs;
    dMaxAxis=abs;
  }
  if (!bMaximumFixed) {
    oMax=new Double(dMaxAxis);
  }
  if (!bMinimumFixed) {
    oMin=new Double(dMinAxis);
  }
  if (bMargin) {
    if (bMinimumFixed && dMinValue > dMinReal) {
      oMinAuto=new Double(dMinReal);
    }
 else {
      oMinAuto=null;
    }
    if (bMaximumFixed && dMaxValue < dMaxReal) {
      oMaxAuto=new Double(dMaxReal);
    }
 else {
      oMaxAuto=null;
    }
  }
 else {
    oMinAuto=null;
    oMaxAuto=null;
  }
}",0.9947415672694626
69193,"@Override protected void updateDefaultsByLocale(){
  ULocale locale=getLocaleByDisplayName(localeChoicer.getText());
  if (locale == null) {
    locale=ULocale.getDefault();
  }
  String category=formatAdapter.getCategory4DisplayName(typeChoicer.getText());
  if (category.equals(DesignChoiceConstants.NUMBER_FORMAT_TYPE_CURRENCY)) {
    String defaultPosition=FormatCurrencyNumPattern.getDefaultSymbolPosition(locale);
    boolean defaultUseSpace=FormatCurrencyNumPattern.getDefaultUsingSymbolSpace(locale);
    cUseSpace.setSelection(defaultUseSpace);
    if (defaultPosition != null) {
      cSymPosChoice.setText(defaultPosition);
    }
  }
 else   if (category.equals(DesignChoiceConstants.NUMBER_FORMAT_TYPE_PERCENT)) {
    String defaultPosition=FormatPercentNumPattern.getDefaultSymbolPosition(locale);
    if (defaultPosition != null) {
      pSymPosChoice.setText(defaultPosition);
    }
  }
}","@Override protected void updateDefaultsByLocale(){
  ULocale locale=getLocaleByDisplayName(localeChoicer.getText());
  if (locale == null) {
    locale=ULocale.getDefault();
  }
  String category=formatAdapter.getCategory4DisplayName(typeChoicer.getText());
  if (category.equals(DesignChoiceConstants.NUMBER_FORMAT_TYPE_CURRENCY)) {
    String defaultPosition=FormatCurrencyNumPattern.getDefaultSymbolPosition(locale);
    boolean defaultUseSpace=FormatCurrencyNumPattern.getDefaultUsingSymbolSpace(locale);
    int defaultDigits=FormatCurrencyNumPattern.getDefaultFractionDigits(locale);
    cUseSpace.setSelection(defaultUseSpace);
    if (defaultPosition != null) {
      cSymPosChoice.setText(defaultPosition);
    }
    cPlacesChoice.setText(String.valueOf(defaultDigits));
  }
 else   if (category.equals(DesignChoiceConstants.NUMBER_FORMAT_TYPE_PERCENT)) {
    String defaultPosition=FormatPercentNumPattern.getDefaultSymbolPosition(locale);
    if (defaultPosition != null) {
      pSymPosChoice.setText(defaultPosition);
    }
  }
}",0.92853470437018
69194,"/** 
 * @param parent
 * @param index
 */
private void createComboBoxCell(Composite parent,final int index){
  ControlProvider.createLabel(parent,dialogLabels[index]);
  cmbDataType=ControlProvider.createCombo(parent,SWT.READ_ONLY);
  cmbDataType.setLayoutData(ControlProvider.getGridDataWithHSpan(2));
  populateDataTypeComboItems();
  cmbDataType.select(Utility.findIndex(cmbDataType.getItems(),getTypeDisplayName((String)getProperty(getStructureOrHandle(),cellProperties[index]))));
  cmbDataType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      validateSyntax();
    }
  }
);
}","/** 
 * @param parent
 * @param index
 */
private void createComboBoxCell(Composite parent,final int index){
  Label label=ControlProvider.createLabel(parent,dialogLabels[index]);
  this.maxWidth=computeMaxWidth(label);
  cmbDataType=ControlProvider.createCombo(parent,SWT.READ_ONLY);
  cmbDataType.setLayoutData(ControlProvider.getGridDataWithHSpan(2));
  populateDataTypeComboItems();
  cmbDataType.select(Utility.findIndex(cmbDataType.getItems(),getTypeDisplayName((String)getProperty(getStructureOrHandle(),cellProperties[index]))));
  cmbDataType.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      validateSyntax();
    }
  }
);
}",0.9607843137254902
69195,"/** 
 * @param params
 */
private void createParameterUISection(IParameterDefn[] params){
  txtParams=new Text[params.length];
  for (int i=0; i < params.length; i++) {
    IParameterDefn param=params[i];
    Label paramLabel=new Label(parameterContainer,SWT.NONE | SWT.WRAP);
    paramLabel.setText(Utility.getNonNullString(param.getDisplayName()));
    GridData gd=new GridData();
    final int widthHint=firstLabel.computeSize(-1,-1).x - firstLabel.getBorderWidth();
    gd.widthHint=widthHint;
    paramLabel.setLayoutData(gd);
    Composite composite=ControlProvider.getDefaultComposite(parameterContainer);
    if (param.isDataField()) {
      String text=BLANK;
      if (lastExpression != null) {
        text=lastExpression;
      }
 else {
        text=(String)getProperty(getStructureOrHandle(),cellProperties[EXPRESSION_INDEX]);
      }
      txtParams[i]=ControlProvider.createText(composite,text);
      final Text txtDataField=txtParams[i];
      txtDataField.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
      txtDataField.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent e){
          lastExpression=txtDataField.getText();
          validateSyntax();
        }
      }
);
    }
 else {
      Text txtArgument=ControlProvider.createText(composite,null);
      txtArgument.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
      txtArgument.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent e){
          validateSyntax();
        }
      }
);
      txtParams[i]=txtArgument;
    }
    txtParams[i].setToolTipText(param.getDescription());
    createExpressionButton(composite,txtParams[i]);
  }
  updateParametersText(params);
}","/** 
 * @param params
 */
private void createParameterUISection(IParameterDefn[] params){
  txtParams=new Text[params.length];
  for (int i=0; i < params.length; i++) {
    IParameterDefn param=params[i];
    Label paramLabel=new Label(parameterContainer,SWT.NONE | SWT.WRAP);
    paramLabel.setText(Utility.getNonNullString(param.getDisplayName()));
    GridData gd=new GridData();
    this.maxWidth=computeMaxWidth(paramLabel);
    gd.widthHint=this.maxWidth;
    paramLabel.setLayoutData(gd);
    Composite composite=ControlProvider.getDefaultComposite(parameterContainer);
    if (param.isDataField()) {
      String text=BLANK;
      if (lastExpression != null) {
        text=lastExpression;
      }
 else {
        text=(String)getProperty(getStructureOrHandle(),cellProperties[EXPRESSION_INDEX]);
      }
      txtParams[i]=ControlProvider.createText(composite,text);
      final Text txtDataField=txtParams[i];
      txtDataField.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
      txtDataField.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent e){
          lastExpression=txtDataField.getText();
          validateSyntax();
        }
      }
);
    }
 else {
      Text txtArgument=ControlProvider.createText(composite,null);
      txtArgument.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
      txtArgument.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent e){
          validateSyntax();
        }
      }
);
      txtParams[i]=txtArgument;
    }
    txtParams[i].setToolTipText(param.getDescription());
    createExpressionButton(composite,txtParams[i]);
  }
  updateLabelWidth();
  updateParametersText(params);
}",0.9499136442141624
69196,"/** 
 * @param parent
 * @param index
 */
private void createTextCell(Composite parent,final int index){
  firstLabel=ControlProvider.createLabel(parent,dialogLabels[index]);
  txtColumnName=ControlProvider.createText(parent,(String)getProperty(getStructureOrHandle(),cellProperties[index]));
  txtColumnName.setLayoutData(ControlProvider.getGridDataWithHSpan(2));
  columnName=txtColumnName.getText();
  txtColumnName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateSyntax();
    }
  }
);
}","/** 
 * @param parent
 * @param index
 */
private void createTextCell(Composite parent,final int index){
  firstLabel=ControlProvider.createLabel(parent,dialogLabels[index]);
  this.maxWidth=computeMaxWidth(firstLabel);
  txtColumnName=ControlProvider.createText(parent,(String)getProperty(getStructureOrHandle(),cellProperties[index]));
  txtColumnName.setLayoutData(ControlProvider.getGridDataWithHSpan(2));
  columnName=txtColumnName.getText();
  txtColumnName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      validateSyntax();
    }
  }
);
}",0.9602824360105914
69197,"/** 
 * @param parent
 * @param index
 */
private void createAggrListCell(final Composite parent,final int index){
  ControlProvider.createLabel(parent,dialogLabels[index]);
  cmbAggregation=ControlProvider.createCombo(parent,SWT.READ_ONLY);
  cmbAggregation.setLayoutData(ControlProvider.getGridDataWithHSpan(2));
  cmbAggregation.add(BLANK);
  cmbAggregation.setData(BLANK,new Integer(0));
  for (int i=0; i < functions.length; i++) {
    cmbAggregation.add(functions[i].getDisplayName());
    cmbAggregation.setData(functions[i].getName(),new Integer(i + 1));
  }
  String aggrFuncName=(String)getProperty(getStructureOrHandle(),cellProperties[index]);
  int selectionIndex=getAggrFuncIndex(aggrFuncName);
  cmbAggregation.select(selectionIndex);
  cmbAggregation.setToolTipText(selectionIndex > 0 ? functions[selectionIndex - 1].getDescription() : BLANK);
  cmbAggregation.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleAggrSelectEvent(true);
      validateSyntax();
      updateFilterUIStatus();
    }
  }
);
}","/** 
 * @param parent
 * @param index
 */
private void createAggrListCell(final Composite parent,final int index){
  Label label=ControlProvider.createLabel(parent,dialogLabels[index]);
  this.maxWidth=computeMaxWidth(label);
  cmbAggregation=ControlProvider.createCombo(parent,SWT.READ_ONLY);
  cmbAggregation.setLayoutData(ControlProvider.getGridDataWithHSpan(2));
  cmbAggregation.add(BLANK);
  cmbAggregation.setData(BLANK,new Integer(0));
  for (int i=0; i < functions.length; i++) {
    cmbAggregation.add(functions[i].getDisplayName());
    cmbAggregation.setData(functions[i].getName(),new Integer(i + 1));
  }
  String aggrFuncName=(String)getProperty(getStructureOrHandle(),cellProperties[index]);
  int selectionIndex=getAggrFuncIndex(aggrFuncName);
  cmbAggregation.select(selectionIndex);
  cmbAggregation.setToolTipText(selectionIndex > 0 ? functions[selectionIndex - 1].getDescription() : BLANK);
  cmbAggregation.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleAggrSelectEvent(true);
      validateSyntax();
      updateFilterUIStatus();
    }
  }
);
}",0.976470588235294
69198,"/** 
 * Same functionality as the first openConnection method, but with an additional argument to pass in an application context  to the underlying ODA driver.
 * @param appContext	Application context map to pass thru to the underlying ODA driver.
 * @return	an opened <code>Connection</code> instance. 
 * @throws DataException	if data source error occurs
 */
public Connection openConnection(String dataSourceElementId,Properties connectionProperties,Map appContext) throws DataException {
  final String methodName=""String_Node_Str"";
  if (getLogger().isLoggingEnterExitLevel())   getLogger().entering(sm_className,methodName,new Object[]{dataSourceElementId,connectionProperties});
  try {
    DriverManager driverMgr=DriverManager.getInstance();
    IDriver driverHelper=driverMgr.getDriverHelper(dataSourceElementId);
    String dataSourceId=driverMgr.getExtensionDataSourceId(dataSourceElementId);
    appContext=addProfileProviderService(appContext);
    driverHelper.setAppContext(appContext);
    IConnection connection=driverHelper.getConnection(dataSourceId);
    connection.open(connectionProperties);
    Connection ret=new Connection(connection,dataSourceElementId);
    getLogger().exiting(sm_className,methodName,ret);
    return ret;
  }
 catch (  OdaException ex) {
    getLogger().logp(Level.SEVERE,sm_className,methodName,""String_Node_Str"",ex);
    throw new DataException(ResourceConstants.CANNOT_OPEN_CONNECTION,ex,new Object[]{dataSourceElementId});
  }
catch (  UnsupportedOperationException ex) {
    getLogger().logp(Level.SEVERE,sm_className,methodName,""String_Node_Str"",ex);
    throw new DataException(ResourceConstants.CANNOT_OPEN_CONNECTION,ex,new Object[]{dataSourceElementId});
  }
}","/** 
 * Same functionality as the first openConnection method, but with an additional argument to pass in an application context  to the underlying ODA driver.
 * @param appContext	Application context map to pass thru to the underlying ODA driver.
 * @return	an opened <code>Connection</code> instance. 
 * @throws DataException	if data source error occurs
 */
public Connection openConnection(String dataSourceElementId,Properties connectionProperties,Map appContext) throws DataException {
  final String methodName=""String_Node_Str"";
  if (getLogger().isLoggingEnterExitLevel())   getLogger().entering(sm_className,methodName,new Object[]{dataSourceElementId,connectionProperties});
  try {
    DriverManager driverMgr=DriverManager.getInstance();
    IDriver driverHelper=driverMgr.getDriverHelper(dataSourceElementId);
    String dataSourceId=driverMgr.getExtensionDataSourceId(dataSourceElementId);
    appContext=addProfileProviderService(appContext);
    driverHelper.setAppContext(appContext);
    IConnection connection=driverHelper.getConnection(dataSourceId);
    ULocale locale=toULocale(appContext.get(""String_Node_Str""));
    if (locale != null) {
      try {
        connection.setLocale(locale);
      }
 catch (      UnsupportedOperationException ex) {
      }
    }
    connection.open(connectionProperties);
    Connection ret=new Connection(connection,dataSourceElementId);
    getLogger().exiting(sm_className,methodName,ret);
    return ret;
  }
 catch (  OdaException ex) {
    getLogger().logp(Level.SEVERE,sm_className,methodName,""String_Node_Str"",ex);
    throw new DataException(ResourceConstants.CANNOT_OPEN_CONNECTION,ex,new Object[]{dataSourceElementId});
  }
catch (  UnsupportedOperationException ex) {
    getLogger().logp(Level.SEVERE,sm_className,methodName,""String_Node_Str"",ex);
    throw new DataException(ResourceConstants.CANNOT_OPEN_CONNECTION,ex,new Object[]{dataSourceElementId});
  }
}",0.9415958321908418
69199,"public void startContent(IContent content,IContentEmitter emitter,boolean visible) throws BirtException {
  if (context.isFixedLayout() && (Integer)context.getLayoutEngine().getOption(EngineTask.TASK_TYPE) == IEngineTask.TASK_RUN) {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator,visible);
    setup(leafNode,true);
    currentNode.start();
    ContentEmitterUtil.startContent(content,emitter);
    generator.start(content,true);
    generator.end(content,true);
    currentNode.removeChildren();
  }
 else   if (isRepeated || (!visible && !currentNode.isStarted())) {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator,visible);
    setup(leafNode,true);
  }
 else {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator,visible);
    setup(leafNode,true);
    currentNode.start();
    if (visible) {
      ContentEmitterUtil.startContent(content,emitter);
    }
    generator.start(content,true);
    generator.end(content,true);
    currentNode.removeChildren();
  }
}","public void startContent(IContent content,IContentEmitter emitter,boolean visible) throws BirtException {
  if (context.isFixedLayout() && (Integer)context.getLayoutEngine().getOption(EngineTask.TASK_TYPE) == IEngineTask.TASK_RUN) {
    visible=true;
  }
  if (isRepeated || (!visible && !currentNode.isStarted())) {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator,visible);
    setup(leafNode,true);
  }
 else {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator,visible);
    setup(leafNode,true);
    currentNode.start();
    if (visible) {
      ContentEmitterUtil.startContent(content,emitter);
    }
    generator.start(content,true);
    generator.end(content,true);
    currentNode.removeChildren();
  }
}",0.5617352614015573
69200,"public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter,boolean visible) throws BirtException {
  int type=content.getContentType();
switch (type) {
case IContent.TABLE_BAND_CONTENT:
case IContent.LIST_BAND_CONTENT:
    boolean first=isFirst && !isRepeated;
  ContainerBufferNode bandNode=new ContainerBufferNode(content,emitter,generator,visible);
setup(bandNode,first);
currentNode=bandNode;
break;
case IContent.CELL_CONTENT:
ContainerBufferNode cellNode=new ContainerBufferNode(content,emitter,generator,visible);
setup(cellNode,isFirst);
if (currentNode.isStarted()) {
cellNode.start();
}
currentNode=cellNode;
break;
case IContent.PAGE_CONTENT:
PageNode pageNode=new PageNode(content,emitter,generator,visible);
setup(pageNode,isFirst);
currentNode=pageNode;
break;
case IContent.TABLE_CONTENT:
tableIds.add(content.getInstanceID().toUniqueString());
default :
ContainerBufferNode node=new ContainerBufferNode(content,emitter,generator,visible);
setup(node,isFirst);
currentNode=node;
break;
}
}","public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter,boolean visible) throws BirtException {
  int type=content.getContentType();
  if (context.isFixedLayout() && (Integer)context.getLayoutEngine().getOption(EngineTask.TASK_TYPE) == IEngineTask.TASK_RUN) {
    visible=true;
  }
switch (type) {
case IContent.TABLE_BAND_CONTENT:
case IContent.LIST_BAND_CONTENT:
    boolean first=isFirst && !isRepeated;
  ContainerBufferNode bandNode=new ContainerBufferNode(content,emitter,generator,visible);
setup(bandNode,first);
currentNode=bandNode;
break;
case IContent.CELL_CONTENT:
ContainerBufferNode cellNode=new ContainerBufferNode(content,emitter,generator,visible);
setup(cellNode,isFirst);
if (currentNode.isStarted()) {
cellNode.start();
}
currentNode=cellNode;
break;
case IContent.PAGE_CONTENT:
PageNode pageNode=new PageNode(content,emitter,generator,visible);
setup(pageNode,isFirst);
currentNode=pageNode;
break;
case IContent.TABLE_CONTENT:
tableIds.add(content.getInstanceID().toUniqueString());
default :
ContainerBufferNode node=new ContainerBufferNode(content,emitter,generator,visible);
setup(node,isFirst);
currentNode=node;
break;
}
}",0.932487539646579
69201,"public void setPattern(String patternStr){
  String patt=valPattern(patternStr);
  this.useSep=patt.indexOf(""String_Node_Str"") != -1;
  this.useSpace=patt.indexOf(""String_Node_Str"") != -1;
  this.useBracket=patt.indexOf(""String_Node_Str"") != -1 && patt.indexOf(""String_Node_Str"") != -1;
  if (patt.indexOf(""String_Node_Str"") != -1) {
    this.decPlaces=patt.lastIndexOf(""String_Node_Str"") - patt.lastIndexOf(""String_Node_Str"");
  }
  for (int i=0; i < symbols.length; i++) {
    String sTemp=symbols[i];
    int sPos=patt.indexOf(sTemp);
    if (sPos != -1) {
      this.symbol=sTemp;
      if (sPos == 0) {
        this.symPos=FormatNumberPattern.SYMBOL_POSITION_BEFORE;
      }
 else {
        this.symPos=FormatNumberPattern.SYMBOL_POSITION_AFTER;
      }
      break;
    }
  }
  return;
}","public void setPattern(String patternStr){
  String patt=valPattern(patternStr);
  this.useSep=patt.indexOf(""String_Node_Str"") != -1;
  this.useSpace=patt.indexOf(""String_Node_Str"") != -1;
  this.useBracket=patt.indexOf(""String_Node_Str"") != -1 && patt.indexOf(""String_Node_Str"") != -1;
  this.decPlaces=0;
  if (patt.indexOf(""String_Node_Str"") != -1) {
    this.decPlaces=patt.lastIndexOf(""String_Node_Str"") - patt.lastIndexOf(""String_Node_Str"");
  }
  this.symbol=""String_Node_Str"";
  this.symPos=""String_Node_Str"";
  for (int i=0; i < BUILT_IN_SYMBOLS.length; i++) {
    String sTemp=BUILT_IN_SYMBOLS[i];
    int sPos=patt.indexOf(sTemp);
    if (sPos != -1) {
      this.symbol=sTemp;
      if (sPos == 0) {
        this.symPos=FormatNumberPattern.SYMBOL_POSITION_BEFORE;
      }
 else {
        this.symPos=FormatNumberPattern.SYMBOL_POSITION_AFTER;
      }
      break;
    }
  }
  if (this.symbol.length() == 0) {
  }
  return;
}",0.9010989010989012
69202,"public static String[] getCustormPatternCategorys(){
  return customFormatMap.keySet().toArray(new String[0]);
}","public static String[] getCustormPatternCategorys(){
  return customCategories;
}",0.7668393782383419
69203,"public static String getCustormFormatPattern(String custormCategory){
  return customFormatMap.get(custormCategory) == null ? ""String_Node_Str"" : customFormatMap.get(custormCategory).toString();
}","public static String getCustormFormatPattern(String custormCategory,ULocale locale){
  if (locale == null) {
    locale=ULocale.getDefault();
  }
  if (DATETIEM_FORMAT_TYPE_GENERAL_TIME.equals(custormCategory)) {
    return Messages.getString(""String_Node_Str"" + DATETIEM_FORMAT_TYPE_GENERAL_TIME,locale.toLocale());
  }
  if (DATETIEM_FORMAT_TYPE_YEAR.equals(custormCategory)) {
    return Messages.getString(""String_Node_Str"" + DATETIEM_FORMAT_TYPE_YEAR,locale.toLocale());
  }
  if (DATETIEM_FORMAT_TYPE_SHORT_YEAR.equals(custormCategory)) {
    return Messages.getString(""String_Node_Str"" + DATETIEM_FORMAT_TYPE_SHORT_YEAR,locale.toLocale());
  }
  if (DATETIEM_FORMAT_TYPE_LONG_MONTH_YEAR.equals(custormCategory)) {
    return Messages.getString(""String_Node_Str"" + DATETIEM_FORMAT_TYPE_LONG_MONTH_YEAR,locale.toLocale());
  }
  if (DATETIEM_FORMAT_TYPE_SHOT_MONTH_YEAR.equals(custormCategory)) {
    return Messages.getString(""String_Node_Str"" + DATETIEM_FORMAT_TYPE_SHOT_MONTH_YEAR,locale.toLocale());
  }
  if (DATETIEM_FORMAT_TYPE_MONTH.equals(custormCategory)) {
    return Messages.getString(""String_Node_Str"" + DATETIEM_FORMAT_TYPE_MONTH,locale.toLocale());
  }
  if (DATETIEM_FORMAT_TYPE_LONG_DAY_OF_WEEK.equals(custormCategory)) {
    return Messages.getString(""String_Node_Str"" + DATETIEM_FORMAT_TYPE_LONG_DAY_OF_WEEK,locale.toLocale());
  }
  if (DATETIEM_FORMAT_TYPE_DAY_OF_MONTH.equals(custormCategory)) {
    return Messages.getString(""String_Node_Str"" + DATETIEM_FORMAT_TYPE_DAY_OF_MONTH,locale.toLocale());
  }
  if (DATETIEM_FORMAT_TYPE_MEDIUM_DAY_OF_YEAR.equals(custormCategory)) {
    return Messages.getString(""String_Node_Str"" + DATETIEM_FORMAT_TYPE_MEDIUM_DAY_OF_YEAR,locale.toLocale());
  }
  if (DATETIEM_FORMAT_TYPE_MINUTES.equals(custormCategory)) {
    return Messages.getString(""String_Node_Str"" + DATETIEM_FORMAT_TYPE_MINUTES,locale.toLocale());
  }
  if (DATETIEM_FORMAT_TYPE_SECONTDS.equals(custormCategory)) {
    return Messages.getString(""String_Node_Str"" + DATETIEM_FORMAT_TYPE_SECONTDS,locale.toLocale());
  }
  return ""String_Node_Str"";
}",0.1124780316344463
69204,"/** 
 * Adapts the specified Model Data Set to a Data Engine API data set design object
 */
public IBaseDataSetDesign appendRuntimeInfoToDataSet(DataSetHandle handle,BaseDataSetDesign dataSet) throws BirtException {
  if (dataSet instanceof OdaDataSetDesign)   return newOdaDataSet((OdaDataSetHandle)handle,(OdaDataSetDesign)dataSet,context);
  if (dataSet instanceof ScriptDataSetDesign)   return newScriptDataSet((ScriptDataSetHandle)handle,(ScriptDataSetDesign)dataSet,context);
  if (dataSet instanceof JointDataSetDesign)   return newJointDataSet((JointDataSetHandle)handle,(JointDataSetDesign)dataSet);
  return dteSession.getModelAdaptor().adaptDataSet(handle);
}","/** 
 * Adapts the specified Model Data Set to a Data Engine API data set design object
 */
public IBaseDataSetDesign appendRuntimeInfoToDataSet(DataSetHandle handle,BaseDataSetDesign dataSet) throws BirtException {
  if (dataSet instanceof OdaDataSetDesign)   return newOdaDataSet((OdaDataSetHandle)handle,(OdaDataSetDesign)dataSet,context);
  if (dataSet instanceof ScriptDataSetDesign)   return newScriptDataSet((ScriptDataSetHandle)handle,(ScriptDataSetDesign)dataSet,context);
  if (dataSet instanceof JointDataSetDesign)   return newJointDataSet((JointDataSetHandle)handle,(JointDataSetDesign)dataSet);
  if (dteSession == null)   return dataSet;
  return dteSession.getModelAdaptor().adaptDataSet(handle);
}",0.963872832369942
69205,"private IAggregationResultSet[] populateRs(BirtCubeView view,AggregationDefinition[] aggrDefns,CubeQueryExecutorHelper cubeQueryExcutorHelper2,StopSign stopSign,boolean saveToRD) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  String id=null;
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  if (executor.getCubeQueryDefinition().getQueryResultsID() == null) {
    if (view.getCubeQueryDefinition() instanceof DrillCubeQueryDefinition) {
      DrillCubeQueryDefinition query=(DrillCubeQueryDefinition)view.getCubeQueryDefinition();
      for (int i=0; i < query.getLevelFilter().size(); i++) {
        cubeQueryExecutorHelper.addFilter((LevelFilter)query.getLevelFilter().get(i));
      }
    }
    rs=cubeQueryExecutorHelper.execute(aggrDefns,executor.getSession().getStopSign());
    CubeOperationsExecutor coe=new CubeOperationsExecutor(view.getCubeQueryDefinition(),view.getPreparedCubeOperations(),view.getCubeQueryExecutor().getScope(),view.getCubeQueryExecutor().getSession().getEngineContext().getScriptContext());
    rs=coe.execute(rs,stopSign);
    if (executor.getCubeQueryDefinition().cacheQueryResults()) {
      id=executor.getSession().getQueryResultIDUtil().nextID();
      File tmpDir=new File(executor.getSession().getTempDir());
      if (!FileSecurity.fileExist(tmpDir) || !FileSecurity.fileIsDirectory(tmpDir)) {
        FileSecurity.fileMakeDirs(tmpDir);
      }
      ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(executor.getSession().getTempDir() + ""String_Node_Str"",""String_Node_Str""));
      AggregationResultSetSaveUtil.save(id,rs,writer);
      writer.finish();
    }
    if (saveToRD) {
      if (id != null) {
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
 else {
        id=executor.getSession().getQueryResultIDUtil().nextID();
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
    }
  }
 else {
    id=executor.getCubeQueryDefinition().getQueryResultsID();
    rs=AggregationResultSetSaveUtil.load(id,new FileArchiveReader(executor.getSession().getTempDir() + ""String_Node_Str""),VersionManager.getLatestVersion());
  }
  executor.setQueryResultsId(id);
  return rs;
}","private IAggregationResultSet[] populateRs(BirtCubeView view,AggregationDefinition[] aggrDefns,CubeQueryExecutorHelper cubeQueryExcutorHelper2,StopSign stopSign,boolean saveToRD) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  String id=null;
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  if (executor.getCubeQueryDefinition().getQueryResultsID() == null) {
    rs=cubeQueryExecutorHelper.execute(aggrDefns,executor.getSession().getStopSign());
    CubeOperationsExecutor coe=new CubeOperationsExecutor(view.getCubeQueryDefinition(),view.getPreparedCubeOperations(),view.getCubeQueryExecutor().getScope(),view.getCubeQueryExecutor().getSession().getEngineContext().getScriptContext());
    rs=coe.execute(rs,stopSign);
    if (executor.getCubeQueryDefinition().cacheQueryResults()) {
      id=executor.getSession().getQueryResultIDUtil().nextID();
      File tmpDir=new File(executor.getSession().getTempDir());
      if (!FileSecurity.fileExist(tmpDir) || !FileSecurity.fileIsDirectory(tmpDir)) {
        FileSecurity.fileMakeDirs(tmpDir);
      }
      ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(executor.getSession().getTempDir() + ""String_Node_Str"",""String_Node_Str""));
      AggregationResultSetSaveUtil.save(id,rs,writer);
      writer.finish();
    }
    if (saveToRD) {
      if (id != null) {
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
 else {
        id=executor.getSession().getQueryResultIDUtil().nextID();
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
    }
  }
 else {
    id=executor.getCubeQueryDefinition().getQueryResultsID();
    rs=AggregationResultSetSaveUtil.load(id,new FileArchiveReader(executor.getSession().getTempDir() + ""String_Node_Str""),VersionManager.getLatestVersion());
  }
  executor.setQueryResultsId(id);
  return rs;
}",0.9192846785886902
69206,"/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper());
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,aggrDefns,cubeQueryExecutorHelper,stopSign,true);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,aggrDefns,cubeQueryExecutorHelper,stopSign,false);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion());
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(aggrDefns,stopSign);
    CubeOperationsExecutor coe=new CubeOperationsExecutor(view.getCubeQueryDefinition(),view.getPreparedCubeOperations(),view.getCubeQueryExecutor().getScope(),view.getCubeQueryExecutor().getSession().getEngineContext().getScriptContext());
    rs=coe.execute(rs,stopSign);
    break;
  }
}
default :
{
rs=cubeQueryExecutorHelper.execute(aggrDefns,stopSign);
CubeOperationsExecutor coe=new CubeOperationsExecutor(view.getCubeQueryDefinition(),view.getPreparedCubeOperations(),view.getCubeQueryExecutor().getScope(),view.getCubeQueryExecutor().getSession().getEngineContext().getScriptContext());
rs=coe.execute(rs,stopSign);
String id=executor.getCubeQueryDefinition().getQueryResultsID();
if (id == null) {
  id=executor.getSession().getQueryResultIDUtil().nextID();
}
AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
executor.setQueryResultsId(id);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}","/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper());
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  if (view.getCubeQueryDefinition() instanceof DrillCubeQueryDefinition) {
    DrillCubeQueryDefinition query=(DrillCubeQueryDefinition)view.getCubeQueryDefinition();
    for (int i=0; i < query.getLevelFilter().size(); i++) {
      cubeQueryExecutorHelper.addFilter((LevelFilter)query.getLevelFilter().get(i));
    }
  }
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,aggrDefns,cubeQueryExecutorHelper,stopSign,true);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,aggrDefns,cubeQueryExecutorHelper,stopSign,false);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion());
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(aggrDefns,stopSign);
    CubeOperationsExecutor coe=new CubeOperationsExecutor(view.getCubeQueryDefinition(),view.getPreparedCubeOperations(),view.getCubeQueryExecutor().getScope(),view.getCubeQueryExecutor().getSession().getEngineContext().getScriptContext());
    rs=coe.execute(rs,stopSign);
    break;
  }
}
default :
{
rs=cubeQueryExecutorHelper.execute(aggrDefns,stopSign);
CubeOperationsExecutor coe=new CubeOperationsExecutor(view.getCubeQueryDefinition(),view.getPreparedCubeOperations(),view.getCubeQueryExecutor().getScope(),view.getCubeQueryExecutor().getSession().getEngineContext().getScriptContext());
rs=coe.execute(rs,stopSign);
String id=executor.getCubeQueryDefinition().getQueryResultsID();
if (id == null) {
  id=executor.getSession().getQueryResultIDUtil().nextID();
}
AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
executor.setQueryResultsId(id);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}",0.9517819706498952
69207,"/** 
 * Return difference in number of seconds
 * @param d1
 * @param d2
 * @return
 */
private static long diffSecond(Date d1,Date d2){
  if (d1 == null || d2 == null) {
    throw new java.lang.IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  long diff=d2.getTime() - d1.getTime();
  return (new Long(diff / 1000)).longValue();
}","/** 
 * Return difference in number of seconds
 * @param d1
 * @param d2
 * @return
 */
private static long diffSecond(Date d1,Date d2){
  if (d1 == null || d2 == null) {
    throw new java.lang.IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  long diff=d2.getTime() - d1.getTime();
  diff+=timeZone.getDSTSavings();
  return (new Long(diff / 1000)).longValue();
}",0.9539295392953928
69208,"/** 
 * @param dataSet
 * @param queryDefn
 * @param useColumnHints
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSet,IQueryDefinition queryDefn,boolean useColumnHints,boolean useFilters,boolean clearCache,ExecutionContext context,DataRequestSession session) throws BirtException {
  IBaseDataSetDesign dataSetDesign=session.getModelAdaptor().adaptDataSet(dataSet);
  if (!(dataSet instanceof JointDataSetHandle) && context != null) {
    context.setReportContext(new ReportContextImpl(context));
    dataSetDesign=new ModelDteApiAdapter(context).appendRuntimeInfoToDataSet(dataSet,(BaseDataSetDesign)dataSetDesign);
  }
  if (clearCache) {
    IBaseDataSourceDesign dataSourceDesign=session.getModelAdaptor().adaptDataSource(dataSet.getDataSource());
    session.clearCache(dataSourceDesign,dataSetDesign);
  }
  if (!useColumnHints) {
    dataSetDesign.getResultSetHints().clear();
  }
  if (!useFilters) {
    dataSetDesign.getFilters().clear();
  }
  if (!(dataSet instanceof JointDataSetHandle) && context != null) {
    if (dataSet.getDataSource() != null) {
      session.defineDataSource(session.getModelAdaptor().adaptDataSource(dataSet.getDataSource()));
    }
    session.defineDataSet(dataSetDesign);
  }
  IQueryResults resultSet=executeQuery(session,queryDefn);
  saveResultToDataItems(dataSet,resultSet);
  return resultSet;
}","/** 
 * @param dataSet
 * @param queryDefn
 * @param useColumnHints
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSet,IQueryDefinition queryDefn,boolean useColumnHints,boolean useFilters,boolean clearCache,ExecutionContext context,DataRequestSession session) throws BirtException {
  IBaseDataSetDesign dataSetDesign=session.getModelAdaptor().adaptDataSet(dataSet);
  if (!(dataSet instanceof JointDataSetHandle || dataSet instanceof DerivedDataSetHandle) && context != null) {
    context.setReportContext(new ReportContextImpl(context));
    dataSetDesign=new ModelDteApiAdapter(context).appendRuntimeInfoToDataSet(dataSet,(BaseDataSetDesign)dataSetDesign);
  }
  if (clearCache) {
    IBaseDataSourceDesign dataSourceDesign=session.getModelAdaptor().adaptDataSource(dataSet.getDataSource());
    session.clearCache(dataSourceDesign,dataSetDesign);
  }
  if (!useColumnHints) {
    dataSetDesign.getResultSetHints().clear();
  }
  if (!useFilters) {
    dataSetDesign.getFilters().clear();
  }
  if (!(dataSet instanceof JointDataSetHandle || dataSet instanceof DerivedDataSetHandle) && context != null) {
    if (dataSet.getDataSource() != null) {
      session.defineDataSource(session.getModelAdaptor().adaptDataSource(dataSet.getDataSource()));
    }
    session.defineDataSet(dataSetDesign);
  }
  IQueryResults resultSet=executeQuery(session,queryDefn);
  saveResultToDataItems(dataSet,resultSet);
  return resultSet;
}",0.9698245614035088
69209,"/** 
 * Ths background is the first component rendered within the plot block. This is rendered with Z-order=0
 */
protected void renderBackground(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  super.renderBackground(ipr,p);
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final ClientArea ca=p.getClientArea();
  if (!ca.isVisible()) {
    return;
  }
  Bounds bo=pwa.getPlotBounds();
  final RectangleRenderEvent rre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),RectangleRenderEvent.class);
  if (!isDimension3D()) {
    if (ca.getShadowColor() != null) {
      rre.setBounds(goFactory.translateBounds(bo,3,3));
      rre.setBackground(ca.getShadowColor());
      ipr.fillRectangle(rre);
    }
    rre.setBounds(bo);
    rre.setOutline(ca.getOutline());
    rre.setBackground(ca.getBackground());
    ipr.fillRectangle(rre);
  }
  double dSeriesThickness=pwa.getSeriesThickness();
  double[] daX={bo.getLeft() - dSeriesThickness,bo.getLeft() + bo.getWidth() - dSeriesThickness};
  double[] daY={bo.getTop() + bo.getHeight() + dSeriesThickness,bo.getTop() + dSeriesThickness};
  final AllAxes aax=pwa.getAxes();
  AutoScale scPrimaryBase=null;
  AutoScale scPrimaryOrthogonal=null;
  AutoScale scAncillaryBase=null;
  double dXStart=0;
  double dYStart=0;
  double dZStart=0;
  double dXEnd=0;
  double dYEnd=0;
  double dZEnd=0;
  int baseTickCount=0;
  int ancillaryTickCount=0;
  int orthogonalTickCount=0;
  double xStep=0;
  double yStep=0;
  double zStep=0;
  if (isDimension3D()) {
    scPrimaryBase=aax.getPrimaryBase().getScale();
    scPrimaryOrthogonal=aax.getPrimaryOrthogonal().getScale();
    scAncillaryBase=aax.getAncillaryBase().getScale();
    dXStart=scPrimaryBase.getStart();
    dYStart=scPrimaryOrthogonal.getStart();
    dZStart=scAncillaryBase.getStart();
    dXEnd=scPrimaryBase.getEnd();
    dYEnd=scPrimaryOrthogonal.getEnd();
    dZEnd=scAncillaryBase.getEnd();
    baseTickCount=scPrimaryBase.getTickCordinates().size();
    ancillaryTickCount=scAncillaryBase.getTickCordinates().size();
    orthogonalTickCount=scPrimaryOrthogonal.getTickCordinates().size();
    xStep=scPrimaryBase.getUnitSize();
    yStep=scPrimaryOrthogonal.getUnitSize();
    zStep=scAncillaryBase.getUnitSize();
  }
  if (pwa.getDimension() == IConstants.TWO_5_D) {
    Location[] loa=null;
    if (cwa.getWallFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{goFactory.createLocation(daX[0],daY[0]),goFactory.createLocation(daX[0],daY[1])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      loa=new Location[4];
      loa[0]=goFactory.createLocation(daX[0],daY[0]);
      loa[1]=goFactory.createLocation(daX[0],daY[1]);
      loa[2]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[1] - dSeriesThickness);
      loa[3]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getWallFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
    if (cwa.getFloorFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{goFactory.createLocation(daX[0],daY[0]),goFactory.createLocation(daX[1],daY[0])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      if (loa == null) {
        loa=new Location[4];
      }
      loa[0]=goFactory.createLocation(daX[0],daY[0]);
      loa[1]=goFactory.createLocation(daX[1],daY[0]);
      loa[2]=goFactory.createLocation(daX[1] + dSeriesThickness,daY[0] - dSeriesThickness);
      loa[3]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getFloorFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
  }
 else   if (pwa.getDimension() == IConstants.THREE_D) {
    Location3D[] loa=null;
    final Polygon3DRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Polygon3DRenderEvent.class);
    pre.setDoubleSided(true);
    loa=new Location3D[4];
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXStart,dYEnd,dZStart);
    loa[2]=goFactory.createLocation3D(dXStart,dYEnd,dZEnd);
    loa[3]=goFactory.createLocation3D(dXStart,dYStart,dZEnd);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    Object event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dLeftWall=Engine3D.getObjectFromEvent(event_new);
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXEnd,dYStart,dZStart);
    loa[2]=goFactory.createLocation3D(dXEnd,dYEnd,dZStart);
    loa[3]=goFactory.createLocation3D(dXStart,dYEnd,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dRightWall=Engine3D.getObjectFromEvent(event_new);
    if ((cwa.getWallFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getWallFill()).getTransparency() > 0) || (!(cwa.getWallFill() instanceof ColorDefinition) && cwa.getWallFill() != null)) {
      leftWallFill=true;
      rightWallFill=true;
    }
    if (loa == null) {
      loa=new Location3D[4];
    }
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXStart,dYStart,dZEnd);
    loa[2]=goFactory.createLocation3D(dXEnd,dYStart,dZEnd);
    loa[3]=goFactory.createLocation3D(dXEnd,dYStart,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getFloorFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dFloor=Engine3D.getObjectFromEvent(event_new);
    if ((cwa.getFloorFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getFloorFill()).getTransparency() > 0) || (!(cwa.getFloorFill() instanceof ColorDefinition) && cwa.getFloorFill() != null)) {
      floorFill=true;
    }
  }
  final OneAxis[] oaxa=new OneAxis[2 + aax.getOverlayCount() + (aax.getAncillaryBase() != null ? 1 : 0)];
  oaxa[0]=aax.getPrimaryBase();
  oaxa[1]=aax.getPrimaryOrthogonal();
  for (int i=0; i < aax.getOverlayCount(); i++) {
    oaxa[2 + i]=aax.getOverlay(i);
  }
  if (aax.getAncillaryBase() != null) {
    oaxa[2 + aax.getOverlayCount()]=aax.getAncillaryBase();
  }
  renderMarkerRanges(oaxa,bo);
  renderMarkerLines(oaxa,bo);
  double x=0, y=0, vnext=0;
  LineAttributes lia;
  LineRenderEvent lre;
  final Insets insCA=aax.getInsets();
  int iCount;
  Grid g;
  double[] doaMinor=null;
  for (int i=0; i < oaxa.length; i++) {
    g=oaxa[i].getGrid();
    iCount=g.getMinorCountPerMajor();
    lia=oaxa[i].getGrid().getLineAttributes(IConstants.MINOR);
    if (lia == null || !lia.isVisible()) {
      continue;
    }
    if (iCount <= 0) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{Integer.valueOf(iCount)},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    AutoScale sc=oaxa[i].getScale();
    doaMinor=sc.getMinorCoordinates(iCount);
    if (isDimension3D()) {
      Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
      lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
        AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
      if (floorFill) {
        for (int k=0; k < xa.size() - 1; k++) {
          for (int j=0; j < doaMinor.length - 1; j++) {
            if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
              continue;
            }
            lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
            lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
            lre3d.setObject3DParent(o3dFloor);
            getDeferredCache().addLine(lre3d);
          }
        }
      }
    if (rightWallFill) {
      for (int k=0; k < xa.size() - 1; k++) {
        for (int j=0; j < doaMinor.length - 1; j++) {
          if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
            continue;
          }
          lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
          lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
          lre3d.setObject3DParent(o3dRightWall);
          getDeferredCache().addLine(lre3d);
        }
      }
    }
  break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
  for (int j=0; j < doaMinor.length - 1; j++) {
    if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
      continue;
    }
    lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
    lre3d.setEnd3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart + (ancillaryTickCount - 1) * zStep));
    lre3d.setObject3DParent(o3dLeftWall);
    getDeferredCache().addLine(lre3d);
  }
}
}
if (rightWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
  if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
    continue;
  }
  lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setObject3DParent(o3dRightWall);
  getDeferredCache().addLine(lre3d);
}
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k) + doaMinor[j]));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
}
if (floorFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],da.getCoordinate(j + 1))) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],da.getCoordinate(j + 1)))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x + iDirection * doaMinor[k],dY1 + pwa.getSeriesThickness()));
lre.setEnd(goFactory.createLocation(x + iDirection * doaMinor[k] + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
vnext+=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x + iDirection * doaMinor[k],dY1));
lre.setEnd(goFactory.createLocation(x + iDirection * doaMinor[k],dY2));
ipr.drawLine(lre);
}
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j) - pwa.getSeriesThickness();
vnext=da.getCoordinate(j + 1) - pwa.getSeriesThickness();
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(goFactory.createLocation(dX1 - pwa.getSeriesThickness(),y + iDirection * doaMinor[k] + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
vnext-=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(goFactory.createLocation(dX2,y + iDirection * doaMinor[k]));
ipr.drawLine(lre);
}
}
}
}
for (int i=0; i < oaxa.length; i++) {
final int STEP_NUMBER=oaxa[i].getModelAxis().getScale().getMajorGridsStepNumber();
lia=oaxa[i].getGrid().getLineAttributes(IConstants.MAJOR);
if (lia == null || !lia.isVisible()) {
continue;
}
AutoScale sc=oaxa[i].getScale();
if (isDimension3D()) {
Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
if (floorFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
if (rightWallFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
lre3d.setObject3DParent(o3dRightWall);
getDeferredCache().addLine(lre3d);
}
}
break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart + (ancillaryTickCount - 1) * zStep));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
if (rightWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k),dZStart));
lre3d.setObject3DParent(o3dRightWall);
getDeferredCache().addLine(lre3d);
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k)));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
if (floorFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k)));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x,dY1 + pwa.getSeriesThickness()));
lre.setEnd(goFactory.createLocation(x + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x,dY1));
lre.setEnd(goFactory.createLocation(x,dY2));
ipr.drawLine(lre);
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=(da.getCoordinate(j) - pwa.getSeriesThickness());
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y));
lre.setEnd(goFactory.createLocation(dX1 - pwa.getSeriesThickness(),y + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y));
lre.setEnd(goFactory.createLocation(dX2,y));
ipr.drawLine(lre);
}
}
}
if (!isDimension3D() && p.getClientArea().getOutline().isVisible()) {
rre.setBounds(bo);
ipr.drawRectangle(rre);
}
}","/** 
 * Ths background is the first component rendered within the plot block. This is rendered with Z-order=0
 */
protected void renderBackground(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  super.renderBackground(ipr,p);
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final ClientArea ca=p.getClientArea();
  if (!ca.isVisible()) {
    return;
  }
  Bounds bo=pwa.getPlotBounds();
  final RectangleRenderEvent rre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),RectangleRenderEvent.class);
  if (!isDimension3D()) {
    if (ca.getShadowColor() != null) {
      rre.setBounds(goFactory.translateBounds(bo,3,3));
      rre.setBackground(ca.getShadowColor());
      ipr.fillRectangle(rre);
    }
    rre.setBounds(bo);
    rre.setOutline(ca.getOutline());
    rre.setBackground(ca.getBackground());
    ipr.fillRectangle(rre);
  }
  double dSeriesThickness=pwa.getSeriesThickness();
  double[] daX={bo.getLeft() - dSeriesThickness,bo.getLeft() + bo.getWidth() - dSeriesThickness};
  double[] daY={bo.getTop() + bo.getHeight() + dSeriesThickness,bo.getTop() + dSeriesThickness};
  final AllAxes aax=pwa.getAxes();
  AutoScale scPrimaryBase=null;
  AutoScale scPrimaryOrthogonal=null;
  AutoScale scAncillaryBase=null;
  double dXStart=0;
  double dYStart=0;
  double dZStart=0;
  double dXEnd=0;
  double dYEnd=0;
  double dZEnd=0;
  int baseTickCount=0;
  int ancillaryTickCount=0;
  int orthogonalTickCount=0;
  double xStep=0;
  double yStep=0;
  double zStep=0;
  if (isDimension3D()) {
    scPrimaryBase=aax.getPrimaryBase().getScale();
    scPrimaryOrthogonal=aax.getPrimaryOrthogonal().getScale();
    scAncillaryBase=aax.getAncillaryBase().getScale();
    dXStart=scPrimaryBase.getStart();
    dYStart=scPrimaryOrthogonal.getStart();
    dZStart=scAncillaryBase.getStart();
    dXEnd=scPrimaryBase.getEnd();
    dYEnd=scPrimaryOrthogonal.getEnd();
    dZEnd=scAncillaryBase.getEnd();
    baseTickCount=scPrimaryBase.getTickCordinates().size();
    ancillaryTickCount=scAncillaryBase.getTickCordinates().size();
    orthogonalTickCount=scPrimaryOrthogonal.getTickCordinates().size();
    xStep=scPrimaryBase.getUnitSize();
    yStep=scPrimaryOrthogonal.getUnitSize();
    zStep=scAncillaryBase.getUnitSize();
  }
  if (pwa.getDimension() == IConstants.TWO_5_D) {
    Location[] loa=null;
    if (cwa.getWallFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{goFactory.createLocation(daX[0],daY[0]),goFactory.createLocation(daX[0],daY[1])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      loa=new Location[4];
      loa[0]=goFactory.createLocation(daX[0],daY[0]);
      loa[1]=goFactory.createLocation(daX[0],daY[1]);
      loa[2]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[1] - dSeriesThickness);
      loa[3]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getWallFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
    if (cwa.getFloorFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{goFactory.createLocation(daX[0],daY[0]),goFactory.createLocation(daX[1],daY[0])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      if (loa == null) {
        loa=new Location[4];
      }
      loa[0]=goFactory.createLocation(daX[0],daY[0]);
      loa[1]=goFactory.createLocation(daX[1],daY[0]);
      loa[2]=goFactory.createLocation(daX[1] + dSeriesThickness,daY[0] - dSeriesThickness);
      loa[3]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getFloorFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
  }
 else   if (pwa.getDimension() == IConstants.THREE_D) {
    Location3D[] loa=null;
    final Polygon3DRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Polygon3DRenderEvent.class);
    pre.setDoubleSided(true);
    loa=new Location3D[4];
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXStart,dYEnd,dZStart);
    loa[2]=goFactory.createLocation3D(dXStart,dYEnd,dZEnd);
    loa[3]=goFactory.createLocation3D(dXStart,dYStart,dZEnd);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    Object event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dLeftWall=Engine3D.getObjectFromEvent(event_new);
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXEnd,dYStart,dZStart);
    loa[2]=goFactory.createLocation3D(dXEnd,dYEnd,dZStart);
    loa[3]=goFactory.createLocation3D(dXStart,dYEnd,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dRightWall=Engine3D.getObjectFromEvent(event_new);
    if ((cwa.getWallFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getWallFill()).getTransparency() > 0) || (!(cwa.getWallFill() instanceof ColorDefinition) && cwa.getWallFill() != null)) {
      leftWallFill=true;
      rightWallFill=true;
    }
    if (loa == null) {
      loa=new Location3D[4];
    }
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXStart,dYStart,dZEnd);
    loa[2]=goFactory.createLocation3D(dXEnd,dYStart,dZEnd);
    loa[3]=goFactory.createLocation3D(dXEnd,dYStart,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getFloorFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dFloor=Engine3D.getObjectFromEvent(event_new);
    if ((cwa.getFloorFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getFloorFill()).getTransparency() > 0) || (!(cwa.getFloorFill() instanceof ColorDefinition) && cwa.getFloorFill() != null)) {
      floorFill=true;
    }
  }
  final OneAxis[] oaxa=new OneAxis[2 + aax.getOverlayCount() + (aax.getAncillaryBase() != null ? 1 : 0)];
  oaxa[0]=aax.getPrimaryBase();
  oaxa[1]=aax.getPrimaryOrthogonal();
  for (int i=0; i < aax.getOverlayCount(); i++) {
    oaxa[2 + i]=aax.getOverlay(i);
  }
  if (aax.getAncillaryBase() != null) {
    oaxa[2 + aax.getOverlayCount()]=aax.getAncillaryBase();
  }
  renderMarkerRanges(oaxa,bo);
  renderMarkerLines(oaxa,bo);
  double x=0, y=0, vnext=0;
  LineAttributes lia;
  LineRenderEvent lre;
  final Insets insCA=aax.getInsets();
  int iCount;
  Grid g;
  double[] doaMinor=null;
  for (int i=0; i < oaxa.length; i++) {
    g=oaxa[i].getGrid();
    iCount=g.getMinorCountPerMajor();
    lia=oaxa[i].getGrid().getLineAttributes(IConstants.MINOR);
    if (lia == null || !lia.isVisible()) {
      continue;
    }
    if (iCount <= 0) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{Integer.valueOf(iCount)},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    AutoScale sc=oaxa[i].getScale();
    doaMinor=sc.getMinorCoordinates(iCount);
    if (isDimension3D()) {
      Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
      lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
        AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
      if (floorFill) {
        for (int k=0; k < xa.size() - 1; k++) {
          for (int j=0; j < doaMinor.length - 1; j++) {
            if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
              continue;
            }
            lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
            lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
            lre3d.setObject3DParent(o3dFloor);
            getDeferredCache().addLine(lre3d);
          }
        }
      }
    if (rightWallFill) {
      for (int k=0; k < xa.size() - 1; k++) {
        for (int j=0; j < doaMinor.length - 1; j++) {
          if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
            continue;
          }
          lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
          lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
          lre3d.setObject3DParent(o3dRightWall);
          getDeferredCache().addLine(lre3d);
        }
      }
    }
  break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
  for (int j=0; j < doaMinor.length - 1; j++) {
    if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
      continue;
    }
    lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
    lre3d.setEnd3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart + (ancillaryTickCount - 1) * zStep));
    lre3d.setObject3DParent(o3dLeftWall);
    getDeferredCache().addLine(lre3d);
  }
}
}
if (rightWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
  if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
    continue;
  }
  lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setObject3DParent(o3dRightWall);
  getDeferredCache().addLine(lre3d);
}
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k) + doaMinor[j]));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
}
if (floorFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],da.getCoordinate(j + 1))) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],da.getCoordinate(j + 1)))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x + iDirection * doaMinor[k],dY1 + pwa.getSeriesThickness()));
lre.setEnd(goFactory.createLocation(x + iDirection * doaMinor[k] + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
vnext+=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x + iDirection * doaMinor[k],dY1));
lre.setEnd(goFactory.createLocation(x + iDirection * doaMinor[k],dY2));
ipr.drawLine(lre);
}
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j) - pwa.getSeriesThickness();
vnext=da.getCoordinate(j + 1) - pwa.getSeriesThickness();
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(goFactory.createLocation(dX1 - pwa.getSeriesThickness(),y + iDirection * doaMinor[k] + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
vnext-=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(goFactory.createLocation(dX2,y + iDirection * doaMinor[k]));
ipr.drawLine(lre);
}
}
}
}
for (int i=0; i < oaxa.length; i++) {
final int STEP_NUMBER=oaxa[i].getModelAxis().getScale().getMajorGridsStepNumber();
lia=oaxa[i].getGrid().getLineAttributes(IConstants.MAJOR);
if (lia == null || !lia.isVisible()) {
continue;
}
AutoScale sc=oaxa[i].getScale();
if (isDimension3D()) {
Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
if (floorFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
if (rightWallFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
lre3d.setObject3DParent(o3dRightWall);
getDeferredCache().addLine(lre3d);
}
}
break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart + (ancillaryTickCount - 1) * zStep));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
if (rightWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k),dZStart));
lre3d.setObject3DParent(o3dRightWall);
getDeferredCache().addLine(lre3d);
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k)));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
if (floorFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k)));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x,dY1 + pwa.getSeriesThickness()));
lre.setEnd(goFactory.createLocation(x + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x,dY1));
lre.setEnd(goFactory.createLocation(x,dY2));
ipr.drawLine(lre);
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=(da.getCoordinate(j) - pwa.getSeriesThickness());
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y));
lre.setEnd(goFactory.createLocation(dX1 - pwa.getSeriesThickness(),y + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y));
lre.setEnd(goFactory.createLocation(dX2,y));
ipr.drawLine(lre);
}
}
}
if (!isDimension3D() && p.getClientArea().getOutline().isVisible()) {
rre.setBounds(bo);
rre.setOutline(ca.getOutline());
ipr.drawRectangle(rre);
}
}",0.99921152605548
69210,"/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  ChartWithAxes cwa=getModel();
  initInnerFields(bo,cwa);
  if (boPlot.getWidth() <= 0 || boPlot.getHeight() <= 0) {
    return;
  }
  if (ChartUtil.hasMultipleYAxes(getModel()) && getModel().isStudyLayout()) {
    computeWithStudyLayout();
  }
 else {
    computeCommon();
  }
}","/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  ChartWithAxes cwa=getModel();
  initInnerFields(bo,cwa);
  if (boPlot.getWidth() < 0 || boPlot.getHeight() < 0) {
    return;
  }
  if (ChartUtil.hasMultipleYAxes(getModel()) && getModel().isStudyLayout()) {
    computeWithStudyLayout();
  }
 else {
    computeCommon();
  }
}",0.9982517482517482
69211,"public void setHyperlinkDef(HyperlinkDef def){
  this.hyperLink=def;
  if (hyperLink != null) {
    style.setProperty(StyleConstant.COLOR_PROP,HYPERLINK_COLOR);
    style.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,HYPERLINK_UNDERLINE);
    style.setName(StyleEntry.ENTRYNAME_HYPERLINK);
  }
}","public void setHyperlinkDef(HyperlinkDef def){
  this.hyperLink=def;
  if (hyperLink != null) {
    style.setProperty(StyleConstant.COLOR_PROP,HYPERLINK_COLOR);
    style.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,true);
    style.setName(StyleEntry.ENTRYNAME_HYPERLINK);
  }
}",0.96
69212,"/** 
 * Renders all marker ranges associated with all axes (base and orthogonal) in the plot Marker ranges are drawn immediately (not rendered as deferred) at an appropriate Z-order immediately after the plot background is drawn.
 * @param oaxa An array containing all axes
 * @param boPlotClientArea The bounds of the actual client area
 * @throws ChartException
 */
private final void renderMarkerRanges(OneAxis[] oaxa,Bounds boPlotClientArea) throws ChartException {
  Axis ax;
  int iRangeCount, iAxisCount=oaxa.length;
  MarkerRange mr;
  RectangleRenderEvent rre;
  DataElement deStart, deEnd;
  AutoScale asc;
  double dMin=0, dMax=0;
  int iOrientation, iCompare=IConstants.EQUAL;
  final Bounds bo=goFactory.createBounds(0,0,0,0);
  final IDeviceRenderer idr=getDevice();
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  final boolean bTransposed=((ChartWithAxes)getModel()).isTransposed();
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final StringBuffer sb=new StringBuffer();
  Bounds boText=goFactory.createBounds(0,0,0,0);
  Anchor anc=null;
  Label la=null;
  TextRenderEvent tre;
  double dOriginalAngle=0;
  for (int i=0; i < iAxisCount; i++) {
    ax=oaxa[i].getModelAxis();
    iOrientation=ax.getOrientation().getValue();
    if (bTransposed) {
      iOrientation=(iOrientation == Orientation.HORIZONTAL) ? Orientation.VERTICAL : Orientation.HORIZONTAL;
    }
    asc=oaxa[i].getScale();
    EList<MarkerRange> el=ax.getMarkerRanges();
    iRangeCount=el.size();
    for (int j=0; j < iRangeCount; j++) {
      mr=el.get(j);
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_MARKER_RANGE,ax,mr,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_MARKER_RANGE,mr);
      deStart=mr.getStartValue();
      deEnd=mr.getEndValue();
      try {
        iCompare=compare(deStart,deEnd);
      }
 catch (      ChartException dfex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,dfex);
      }
      if (iCompare == IConstants.MORE) {
        final DataElement deTemp=deStart;
        deStart=deEnd;
        deEnd=deTemp;
      }
      if (isDimension3D()) {
        return;
      }
      try {
        dMin=(deStart == null) ? ((iOrientation == Orientation.HORIZONTAL) ? boPlotClientArea.getLeft() : boPlotClientArea.getTop() + boPlotClientArea.getHeight()) : Methods.getLocation(asc,deStart);
      }
 catch (      Exception ex) {
        logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",new Object[]{deStart,mr},getRunTimeContext().getULocale()));
        continue;
      }
      try {
        dMax=(deEnd == null) ? ((iOrientation == Orientation.HORIZONTAL) ? boPlotClientArea.getLeft() + boPlotClientArea.getWidth() : boPlotClientArea.getTop()) : Methods.getLocation(asc,deEnd);
      }
 catch (      Exception ex) {
        logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",new Object[]{deEnd,mr},getRunTimeContext().getULocale()));
        continue;
      }
      rre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerRange(mr),RectangleRenderEvent.class);
      if (iOrientation == Orientation.HORIZONTAL) {
        if (dMax > boPlotClientArea.getLeft() + boPlotClientArea.getWidth()) {
          dMax=boPlotClientArea.getLeft() + boPlotClientArea.getWidth();
        }
        if (dMin < boPlotClientArea.getLeft()) {
          dMax=boPlotClientArea.getLeft();
        }
        bo.set(dMin,boPlotClientArea.getTop(),dMax - dMin,boPlotClientArea.getHeight());
      }
 else {
        if (dMax < boPlotClientArea.getTop()) {
          dMax=boPlotClientArea.getTop();
        }
        if (dMin > boPlotClientArea.getTop() + boPlotClientArea.getHeight()) {
          dMin=boPlotClientArea.getTop() + boPlotClientArea.getHeight();
        }
        bo.set(boPlotClientArea.getLeft(),dMax,boPlotClientArea.getWidth(),dMin - dMax);
      }
      if (pwa.getDimension() == IConstants.TWO_5_D) {
        if (iOrientation == Orientation.HORIZONTAL) {
          bo.translate(pwa.getSeriesThickness(),0);
        }
 else {
          bo.translate(0,-pwa.getSeriesThickness());
        }
      }
      rre.setBounds(bo);
      rre.setOutline(mr.getOutline());
      rre.setBackground(mr.getFill());
      idr.fillRectangle(rre);
      idr.drawRectangle(rre);
      la=goFactory.copyOf(mr.getLabel());
      if (la.isVisible()) {
        if (la.getCaption().getValue() != null && !IConstants.UNDEFINED_STRING.equals(la.getCaption().getValue()) && la.getCaption().getValue().length() > 0) {
          la.getCaption().setValue(oaxa[i].getRunTimeContext().externalizedMessage(la.getCaption().getValue()));
        }
 else {
          try {
            sb.delete(0,sb.length());
            sb.append(Messages.getString(""String_Node_Str"",getRunTimeContext().getULocale()));
            sb.append(ValueFormatter.format(deStart,mr.getFormatSpecifier(),oaxa[i].getRunTimeContext().getULocale(),null));
            sb.append(Messages.getString(""String_Node_Str"",getRunTimeContext().getULocale()));
            sb.append(ValueFormatter.format(deEnd,mr.getFormatSpecifier(),oaxa[i].getRunTimeContext().getULocale(),null));
            sb.append(Messages.getString(""String_Node_Str"",getRunTimeContext().getULocale()));
            la.getCaption().setValue(sb.toString());
          }
 catch (          ChartException dfex) {
            throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,dfex);
          }
        }
        anc=switchAnchor(mr.getLabelAnchor());
        if (bTransposed) {
          dOriginalAngle=la.getCaption().getFont().getRotation();
          try {
            la.getCaption().getFont().setRotation(pwa.getTransposedAngle(dOriginalAngle));
            anc=ChartUtil.transposeAnchor(anc);
          }
 catch (          IllegalArgumentException uiex) {
            throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
          }
        }
        BoundingBox bb=null;
        try {
          bb=cComp.computeBox(idr.getDisplayServer(),IConstants.LEFT,la,0,0);
        }
 catch (        IllegalArgumentException uiex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
        }
        boText.set(0,0,bb.getWidth(),bb.getHeight());
        tre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerRange(mr),TextRenderEvent.class);
        tre.setBlockBounds(bo);
        tre.setBlockAlignment(anchorToAlignment(anc));
        tre.setLabel(la);
        tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
        getDeferredCache().addLabel(tre);
      }
      if (isInteractivityEnabled()) {
        Trigger tg;
        EList<Trigger> elTriggers=mr.getTriggers();
        if (!elTriggers.isEmpty()) {
          final InteractionEvent iev=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerRange(mr),InteractionEvent.class);
          iev.setCursor(mr.getCursor());
          for (int t=0; t < elTriggers.size(); t++) {
            tg=goFactory.copyOf(elTriggers.get(t));
            processTrigger(tg,StructureSource.createMarkerRange(mr));
            iev.addTrigger(tg);
          }
          iev.setHotSpot(rre);
          idr.enableInteraction(iev);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_MARKER_RANGE,ax,mr,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_MARKER_RANGE,mr);
    }
  }
}","/** 
 * Renders all marker ranges associated with all axes (base and orthogonal) in the plot Marker ranges are drawn immediately (not rendered as deferred) at an appropriate Z-order immediately after the plot background is drawn.
 * @param oaxa An array containing all axes
 * @param boPlotClientArea The bounds of the actual client area
 * @throws ChartException
 */
private final void renderMarkerRanges(OneAxis[] oaxa,Bounds boPlotClientArea) throws ChartException {
  Axis ax;
  int iRangeCount, iAxisCount=oaxa.length;
  MarkerRange mr;
  RectangleRenderEvent rre;
  DataElement deStart, deEnd;
  AutoScale asc;
  double dMin=0, dMax=0;
  int iOrientation, iCompare=IConstants.EQUAL;
  final Bounds bo=goFactory.createBounds(0,0,0,0);
  final IDeviceRenderer idr=getDevice();
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  final boolean bTransposed=((ChartWithAxes)getModel()).isTransposed();
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final StringBuffer sb=new StringBuffer();
  Bounds boText=goFactory.createBounds(0,0,0,0);
  Anchor anc=null;
  Label la=null;
  TextRenderEvent tre;
  double dOriginalAngle=0;
  for (int i=0; i < iAxisCount; i++) {
    ax=oaxa[i].getModelAxis();
    iOrientation=ax.getOrientation().getValue();
    if (bTransposed) {
      iOrientation=(iOrientation == Orientation.HORIZONTAL) ? Orientation.VERTICAL : Orientation.HORIZONTAL;
    }
    asc=oaxa[i].getScale();
    EList<MarkerRange> el=ax.getMarkerRanges();
    iRangeCount=el.size();
    for (int j=0; j < iRangeCount; j++) {
      mr=el.get(j);
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_MARKER_RANGE,ax,mr,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_MARKER_RANGE,mr);
      deStart=mr.getStartValue();
      deEnd=mr.getEndValue();
      try {
        iCompare=compare(deStart,deEnd);
      }
 catch (      ChartException dfex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,dfex);
      }
      if (iCompare == IConstants.MORE) {
        final DataElement deTemp=deStart;
        deStart=deEnd;
        deEnd=deTemp;
      }
      if (isDimension3D()) {
        return;
      }
      try {
        dMin=(deStart == null) ? ((iOrientation == Orientation.HORIZONTAL) ? boPlotClientArea.getLeft() : boPlotClientArea.getTop() + boPlotClientArea.getHeight()) : Methods.getLocation(asc,deStart);
      }
 catch (      Exception ex) {
        logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",new Object[]{deStart,mr},getRunTimeContext().getULocale()));
        continue;
      }
      try {
        dMax=(deEnd == null) ? ((iOrientation == Orientation.HORIZONTAL) ? boPlotClientArea.getLeft() + boPlotClientArea.getWidth() : boPlotClientArea.getTop()) : Methods.getLocation(asc,deEnd);
      }
 catch (      Exception ex) {
        logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",new Object[]{deEnd,mr},getRunTimeContext().getULocale()));
        continue;
      }
      rre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerRange(mr),RectangleRenderEvent.class);
      if (iOrientation == Orientation.HORIZONTAL) {
        double maxLimit=boPlotClientArea.getLeft() + boPlotClientArea.getWidth();
        double minLimit=boPlotClientArea.getLeft();
        dMax=Math.min(dMax,maxLimit);
        dMin=Math.min(dMin,maxLimit);
        dMax=Math.max(dMax,minLimit);
        dMin=Math.max(dMin,minLimit);
        bo.set(dMin,boPlotClientArea.getTop(),dMax - dMin,boPlotClientArea.getHeight());
      }
 else {
        double minLimit=boPlotClientArea.getTop();
        double maxLimit=boPlotClientArea.getTop() + boPlotClientArea.getHeight();
        dMax=Math.min(dMax,maxLimit);
        dMin=Math.min(dMin,maxLimit);
        dMax=Math.max(dMax,minLimit);
        dMin=Math.max(dMin,minLimit);
        bo.set(boPlotClientArea.getLeft(),dMax,boPlotClientArea.getWidth(),dMin - dMax);
      }
      if (pwa.getDimension() == IConstants.TWO_5_D) {
        if (iOrientation == Orientation.HORIZONTAL) {
          bo.translate(pwa.getSeriesThickness(),0);
        }
 else {
          bo.translate(0,-pwa.getSeriesThickness());
        }
      }
      rre.setBounds(bo);
      rre.setOutline(mr.getOutline());
      rre.setBackground(mr.getFill());
      idr.fillRectangle(rre);
      idr.drawRectangle(rre);
      la=goFactory.copyOf(mr.getLabel());
      if (la.isVisible()) {
        if (la.getCaption().getValue() != null && !IConstants.UNDEFINED_STRING.equals(la.getCaption().getValue()) && la.getCaption().getValue().length() > 0) {
          la.getCaption().setValue(oaxa[i].getRunTimeContext().externalizedMessage(la.getCaption().getValue()));
        }
 else {
          try {
            sb.delete(0,sb.length());
            sb.append(Messages.getString(""String_Node_Str"",getRunTimeContext().getULocale()));
            sb.append(ValueFormatter.format(deStart,mr.getFormatSpecifier(),oaxa[i].getRunTimeContext().getULocale(),null));
            sb.append(Messages.getString(""String_Node_Str"",getRunTimeContext().getULocale()));
            sb.append(ValueFormatter.format(deEnd,mr.getFormatSpecifier(),oaxa[i].getRunTimeContext().getULocale(),null));
            sb.append(Messages.getString(""String_Node_Str"",getRunTimeContext().getULocale()));
            la.getCaption().setValue(sb.toString());
          }
 catch (          ChartException dfex) {
            throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,dfex);
          }
        }
        anc=switchAnchor(mr.getLabelAnchor());
        if (bTransposed) {
          dOriginalAngle=la.getCaption().getFont().getRotation();
          try {
            la.getCaption().getFont().setRotation(pwa.getTransposedAngle(dOriginalAngle));
            anc=ChartUtil.transposeAnchor(anc);
          }
 catch (          IllegalArgumentException uiex) {
            throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
          }
        }
        BoundingBox bb=null;
        try {
          bb=cComp.computeBox(idr.getDisplayServer(),IConstants.LEFT,la,0,0);
        }
 catch (        IllegalArgumentException uiex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
        }
        boText.set(0,0,bb.getWidth(),bb.getHeight());
        tre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerRange(mr),TextRenderEvent.class);
        tre.setBlockBounds(bo);
        tre.setBlockAlignment(anchorToAlignment(anc));
        tre.setLabel(la);
        tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
        getDeferredCache().addLabel(tre);
      }
      if (isInteractivityEnabled()) {
        Trigger tg;
        EList<Trigger> elTriggers=mr.getTriggers();
        if (!elTriggers.isEmpty()) {
          final InteractionEvent iev=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerRange(mr),InteractionEvent.class);
          iev.setCursor(mr.getCursor());
          for (int t=0; t < elTriggers.size(); t++) {
            tg=goFactory.copyOf(elTriggers.get(t));
            processTrigger(tg,StructureSource.createMarkerRange(mr));
            iev.addTrigger(tg);
          }
          iev.setHotSpot(rre);
          idr.enableInteraction(iev);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_MARKER_RANGE,ax,mr,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_MARKER_RANGE,mr);
    }
  }
}",0.9580996370834708
69213,"public static MemberTreeNode[] getDateTimeNodes(String[][] types,Object dateTimeValue,int index){
  String[] dateTypes=new String[types.length - index];
  for (int i=index; i < types.length; i++) {
    dateTypes[i - index]=getTimeType(types[i][0]);
  }
  MemberTreeNode[] secondsNode=null;
  MemberTreeNode[] minutesNode=null;
  MemberTreeNode[] hoursNode=null;
  MemberTreeNode[] dayOfYearNode=null;
  MemberTreeNode[] dayOfMonthNode=null;
  MemberTreeNode[] dayOfWeekNode=null;
  MemberTreeNode[] monthNode=null;
  MemberTreeNode[] parent=null;
  List temp=new ArrayList();
  List parentList=new ArrayList();
  for (int i=0; i < dateTypes.length; i++) {
    temp.clear();
    if (DATE_TIME_LEVEL_TYPE_SECOND.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            secondsNode=createSecond();
            nodes[j].addAllNodes(secondsNode);
            temp.add(secondsNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        secondsNode=createSecond();
        parent=secondsNode;
        parentList.clear();
        parentList.add(secondsNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MINUTE.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            minutesNode=createMinute();
            nodes[j].addAllNodes(minutesNode);
            temp.add(minutesNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        minutesNode=createMinute();
        parent=minutesNode;
        parentList.clear();
        parentList.add(minutesNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_HOUR.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            hoursNode=createHour();
            nodes[j].addAllNodes(hoursNode);
            temp.add(hoursNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        hoursNode=createHour();
        parent=hoursNode;
        parentList.clear();
        parentList.add(hoursNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_YEAR.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfYearNode=createDayOfYearNode(year);
            nodes[j].addAllNodes(dayOfYearNode);
            temp.add(dayOfYearNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfYearNode=createDayOfYearNode(year);
        parent=dayOfYearNode;
        parentList.clear();
        parentList.add(dayOfYearNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_MONTH.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      int month=getCalendar((Date)dateTimeValue).get(Calendar.MONTH);
      boolean isUnderMonthHierarchy=false;
      if (i > 0)       isUnderMonthHierarchy=isDayMonth(dateTypes[i - 1]);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            if (isUnderMonthHierarchy)             dayOfMonthNode=createDayOfMonth(year,((Integer)nodes[j].key).intValue());
 else             dayOfMonthNode=createDayOfMonth(year,month + 1);
            nodes[j].addAllNodes(dayOfMonthNode);
            temp.add(dayOfMonthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfMonthNode=createDayOfMonth(year,month + 1);
        parent=dayOfMonthNode;
        parentList.clear();
        parentList.add(dayOfMonthNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_WEEK.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfWeekNode=createDayOfWeek();
            nodes[j].addAllNodes(dayOfWeekNode);
            temp.add(dayOfWeekNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfWeekNode=createDayOfWeek();
        parent=dayOfWeekNode;
        parentList.clear();
        parentList.add(dayOfWeekNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MONTH.equals(dateTypes[i])) {
      if (isQuarterMonth(dateTypes)) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int k=0; k < nodes.length; k++) {
            monthNode=createQuarterMonthNode(k);
            nodes[k].addAllNodes(monthNode);
            temp.add(monthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        monthNode=createMonthNode();
        parent=monthNode;
        parentList.add(parent);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_QUARTER.equals(dateTypes[i])) {
      parent=createQuarterNode();
      parentList.add(parent);
    }
  }
  return parent;
}","public static MemberTreeNode[] getDateTimeNodes(String[][] types,Object dateTimeValue,int index){
  String[] dateTypes=new String[types.length - index];
  for (int i=index; i < types.length; i++) {
    dateTypes[i - index]=getTimeType(types[i][0]);
  }
  MemberTreeNode[] secondsNode=null;
  MemberTreeNode[] minutesNode=null;
  MemberTreeNode[] hoursNode=null;
  MemberTreeNode[] dayOfYearNode=null;
  MemberTreeNode[] dayOfMonthNode=null;
  MemberTreeNode[] dayOfWeekNode=null;
  MemberTreeNode[] monthNode=null;
  MemberTreeNode[] parent=null;
  List temp=new ArrayList();
  List parentList=new ArrayList();
  for (int i=0; i < dateTypes.length; i++) {
    temp.clear();
    if (DATE_TIME_LEVEL_TYPE_SECOND.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            secondsNode=createSecond();
            nodes[j].addAllNodes(secondsNode);
            temp.add(secondsNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        secondsNode=createSecond();
        parent=secondsNode;
        parentList.clear();
        parentList.add(secondsNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MINUTE.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            minutesNode=createMinute();
            nodes[j].addAllNodes(minutesNode);
            temp.add(minutesNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        minutesNode=createMinute();
        parent=minutesNode;
        parentList.clear();
        parentList.add(minutesNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_HOUR.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            hoursNode=createHour();
            nodes[j].addAllNodes(hoursNode);
            temp.add(hoursNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        hoursNode=createHour();
        parent=hoursNode;
        parentList.clear();
        parentList.add(hoursNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_YEAR.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfYearNode=createDayOfYearNode(year);
            nodes[j].addAllNodes(dayOfYearNode);
            temp.add(dayOfYearNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfYearNode=createDayOfYearNode(year);
        parent=dayOfYearNode;
        parentList.clear();
        parentList.add(dayOfYearNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_MONTH.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      int month=getCalendar((Date)dateTimeValue).get(Calendar.MONTH);
      boolean isUnderMonthHierarchy=false;
      if (i > 0)       isUnderMonthHierarchy=isDayMonth(dateTypes[i - 1]);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            if (isUnderMonthHierarchy)             dayOfMonthNode=createDayOfMonth(year,((Integer)nodes[j].key).intValue());
 else             dayOfMonthNode=createDayOfMonth(year,month + 1);
            nodes[j].addAllNodes(dayOfMonthNode);
            temp.add(dayOfMonthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfMonthNode=createDayOfMonth(year,month + 1);
        parent=dayOfMonthNode;
        parentList.clear();
        parentList.add(dayOfMonthNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_WEEK.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfWeekNode=createDayOfWeek();
            nodes[j].addAllNodes(dayOfWeekNode);
            temp.add(dayOfWeekNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfWeekNode=createDayOfWeek();
        parent=dayOfWeekNode;
        parentList.clear();
        parentList.add(dayOfWeekNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MONTH.equals(dateTypes[i])) {
      if (isQuarterMonth(dateTypes)) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int k=0; k < nodes.length; k++) {
            monthNode=createQuarterMonthNode(k);
            nodes[k].addAllNodes(monthNode);
            temp.add(monthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        monthNode=createMonthNode();
        parent=monthNode;
        parentList.add(parent);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_QUARTER.equals(dateTypes[i])) {
      parent=createQuarterNode();
      parentList.add(parent);
    }
  }
  for (int i=0; i < parent.length; i++) {
    ((Member)parent[i].key).setAttributes(new Object[]{dateTimeValue});
  }
  return parent;
}",0.9875660023846022
69214,"private void loadReport() throws IOException {
  readDocumentExtension(0);
  int size=stream.readInt();
  if (size != -1) {
    byte[] buffer=new byte[size];
    stream.readFully(buffer,0,size);
    DataInputStream oi=new DataInputStream(new ByteArrayInputStream(buffer));
    int contentType=IOUtil.readInt(oi);
    if (contentType == IContent.REPORT_CONTENT) {
      reportContent.readContent(oi,loader);
      offset+=4 + size;
    }
  }
}","private void loadReport() throws IOException {
  readDocumentExtensionV1(0);
  int size=stream.readInt();
  if (size != -1) {
    byte[] buffer=new byte[size];
    stream.readFully(buffer,0,size);
    DataInputStream oi=new DataInputStream(new ByteArrayInputStream(buffer));
    int contentType=IOUtil.readInt(oi);
    if (contentType == IContent.REPORT_CONTENT) {
      reportContent.readContent(oi,loader);
      offset+=INDEX_ENTRY_SIZE_V1 + 4 + size;
      rootOffset=offset;
    }
  }
}",0.947481243301179
69215,"ReportBodyExecutor(ExecutorManager manager,Fragment fragment){
  super(manager,-1);
  this.reportDesign=context.getReport();
  this.reader=manager.getReportReader();
  this.nextItem=0;
  if (fragment == null) {
    if (!reader.isEmpty()) {
      nextOffset=0;
    }
  }
 else {
    setFragment(fragment);
    Object[][] sections=fragment.getSections();
    if (sections != null && sections.length > 0) {
      Object[] edges=sections[0];
      if (edges[0] == Segment.LEFT_MOST_EDGE) {
        if (!reader.isEmpty()) {
          nextOffset=0;
        }
      }
 else {
        InstanceIndex leftEdge=(InstanceIndex)edges[0];
        if (leftEdge.getOffset() == -1) {
          if (!reader.isEmpty()) {
            nextOffset=0;
          }
        }
      }
    }
  }
  this.content=report.getRoot();
  initializeReportlet();
}","ReportBodyExecutor(ExecutorManager manager,Fragment fragment){
  super(manager,-1);
  this.reportDesign=context.getReport();
  this.reader=manager.getReportReader();
  this.nextItem=0;
  if (fragment == null) {
    if (!reader.isEmpty()) {
      nextOffset=reader.getRootOffset();
    }
  }
 else {
    setFragment(fragment);
    Object[][] sections=fragment.getSections();
    if (sections != null && sections.length > 0) {
      Object[] edges=sections[0];
      if (edges[0] == Segment.LEFT_MOST_EDGE) {
        if (!reader.isEmpty()) {
          nextOffset=reader.getRootOffset();
        }
      }
 else {
        InstanceIndex leftEdge=(InstanceIndex)edges[0];
        if (leftEdge.getOffset() == -1) {
          if (!reader.isEmpty()) {
            nextOffset=reader.getRootOffset();
          }
        }
      }
    }
  }
  this.content=report.getRoot();
  initializeReportlet();
}",0.9598136284216656
69216,"@Override public void handleEvent(Event event){
  if (event.data instanceof String[]) {
    preview(DEUtil.removeQuote(((String[])event.data)[1]));
  }
}","public void handleEvent(Event event){
  if (event.data instanceof String[]) {
    preview(DEUtil.removeQuote(((String[])event.data)[1]));
  }
}",0.9662162162162162
69217,"private void buildInputAreaButton(int type){
  Listener listener=new Listener(){
    @Override public void handleEvent(    Event event){
      if (event.data instanceof String[]) {
        preview(DEUtil.removeQuote(((String[])event.data)[1]));
      }
    }
  }
;
  if (type == URI_TYPE) {
    ExpressionButtonUtil.createExpressionButton(inputArea,uriEditor,new ExpressionProvider(inputImage),listener,true,SWT.PUSH);
    new Label(inputArea,SWT.NONE);
  }
 else   if (type == FILE_TYPE) {
    inputButton=new Button(inputArea,SWT.PUSH);
    setOpenFileButtonImage(inputButton);
    inputButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        openResourceBrowser();
      }
    }
);
    inputButton.setToolTipText(BUTTON_BROWSE_TOOLTIP);
    ExpressionButtonUtil.createExpressionButton(inputArea,uriEditor,new ExpressionProvider(inputImage),listener,true,SWT.PUSH);
  }
 else   if (type == EMBEDDED_TYPE) {
    importButton=new Button(inputArea,SWT.PUSH);
    importButton.setText(BUTTON_IMPORT);
    importButton.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_END));
    importButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog fileChooser=new FileDialog(getShell(),SWT.OPEN);
        fileChooser.setText(Messages.getString(""String_Node_Str""));
        fileChooser.setFilterExtensions(IMAGE_FILEFILTERS);
        try {
          String fullPath=fileChooser.open();
          if (fullPath != null) {
            String fileName=fileChooser.getFileName();
            if (fileName != null) {
              if (embeddedImageList.indexOf(fileName) != -1) {
                ExceptionHandler.openMessageBox(DLG_TITLE_IMPORT_FAIL,DLG_ERROR_MSG_FILE_EXISTS,SWT.ICON_WARNING);
                return;
              }
              if (checkExtensions(fileName) == false) {
                ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                return;
              }
              previewCanvas.loadImage(ImageManager.getInstance().loadImage(inputImage.getModuleHandle(),fullPath));
              BirtImageLoader imageLoader=new BirtImageLoader();
              EmbeddedImage image=imageLoader.save(getModuleHandle(),fullPath,fileName);
              embeddedImageList.add(image.getName());
              embeddedImageList.select(embeddedImageList.indexOf(image.getName()));
              updateButtons();
            }
          }
        }
 catch (        Throwable e) {
          preview();
          if (e instanceof OutOfMemoryError) {
            e=GUIException.createGUIException(ReportPlugin.REPORT_UI,e);
          }
          ExceptionHandler.handle(e,DLG_TITLE_LOADING_FAIL,DLG_ERROR_MSG_LOADING_FAIL);
        }
      }
    }
);
    new Label(inputArea,SWT.NONE);
    new Label(inputArea,SWT.NONE);
  }
 else   if (type == BLOB_TYPE) {
    inputButton=new Button(inputArea,SWT.PUSH);
    inputButton.setText(BUTTON_SELECT_IMAGE_DATA);
    inputButton.setEnabled(!getModuleHandle().getVisibleDataSets().isEmpty());
    inputButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        openBidingDialog();
      }
    }
);
    new Label(inputArea,SWT.NONE);
    new Label(inputArea,SWT.NONE);
  }
}","private void buildInputAreaButton(int type){
  Listener listener=new Listener(){
    public void handleEvent(    Event event){
      if (event.data instanceof String[]) {
        preview(DEUtil.removeQuote(((String[])event.data)[1]));
      }
    }
  }
;
  if (type == URI_TYPE) {
    ExpressionButtonUtil.createExpressionButton(inputArea,uriEditor,new ExpressionProvider(inputImage),listener,true,SWT.PUSH);
    new Label(inputArea,SWT.NONE);
  }
 else   if (type == FILE_TYPE) {
    inputButton=new Button(inputArea,SWT.PUSH);
    setOpenFileButtonImage(inputButton);
    inputButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        openResourceBrowser();
      }
    }
);
    inputButton.setToolTipText(BUTTON_BROWSE_TOOLTIP);
    ExpressionButtonUtil.createExpressionButton(inputArea,uriEditor,new ExpressionProvider(inputImage),listener,true,SWT.PUSH);
  }
 else   if (type == EMBEDDED_TYPE) {
    importButton=new Button(inputArea,SWT.PUSH);
    importButton.setText(BUTTON_IMPORT);
    importButton.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_END));
    importButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog fileChooser=new FileDialog(getShell(),SWT.OPEN);
        fileChooser.setText(Messages.getString(""String_Node_Str""));
        fileChooser.setFilterExtensions(IMAGE_FILEFILTERS);
        try {
          String fullPath=fileChooser.open();
          if (fullPath != null) {
            String fileName=fileChooser.getFileName();
            if (fileName != null) {
              if (embeddedImageList.indexOf(fileName) != -1) {
                ExceptionHandler.openMessageBox(DLG_TITLE_IMPORT_FAIL,DLG_ERROR_MSG_FILE_EXISTS,SWT.ICON_WARNING);
                return;
              }
              if (checkExtensions(fileName) == false) {
                ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                return;
              }
              previewCanvas.loadImage(ImageManager.getInstance().loadImage(inputImage.getModuleHandle(),fullPath));
              BirtImageLoader imageLoader=new BirtImageLoader();
              EmbeddedImage image=imageLoader.save(getModuleHandle(),fullPath,fileName);
              embeddedImageList.add(image.getName());
              embeddedImageList.select(embeddedImageList.indexOf(image.getName()));
              updateButtons();
            }
          }
        }
 catch (        Throwable e) {
          preview();
          if (e instanceof OutOfMemoryError) {
            e=GUIException.createGUIException(ReportPlugin.REPORT_UI,e);
          }
          ExceptionHandler.handle(e,DLG_TITLE_LOADING_FAIL,DLG_ERROR_MSG_LOADING_FAIL);
        }
      }
    }
);
    new Label(inputArea,SWT.NONE);
    new Label(inputArea,SWT.NONE);
  }
 else   if (type == BLOB_TYPE) {
    inputButton=new Button(inputArea,SWT.PUSH);
    inputButton.setText(BUTTON_SELECT_IMAGE_DATA);
    inputButton.setEnabled(!getModuleHandle().getVisibleDataSets().isEmpty());
    inputButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        openBidingDialog();
      }
    }
);
    new Label(inputArea,SWT.NONE);
    new Label(inputArea,SWT.NONE);
  }
}",0.9985237673457336
69218,"public synchronized static void setCrosstabModelListener(ICrosstabModelListener listener){
  modelListener=listener;
}","public static void setCrosstabModelListener(ICrosstabModelListener listener){
  if (listener == null) {
    modelListener.remove();
  }
 else {
    modelListener.set(listener);
  }
}",0.6933333333333334
69219,"public static ICrosstabModelListener getCrosstabModelListener(){
  return modelListener;
}","public static ICrosstabModelListener getCrosstabModelListener(){
  return modelListener.get();
}",0.967741935483871
69220,"/** 
 * Notifies any creation event for crosstab model.
 * @param type see <code>ICrosstabModelListener</code> for the type constants.
 * @param model the model object associated with this event.
 */
public static void notifyCreation(int type,Object model){
  if (modelListener != null) {
    modelListener.onCreated(type,model);
  }
}","/** 
 * Notifies any creation event for crosstab model.
 * @param type see <code>ICrosstabModelListener</code> for the type constants.
 * @param model the model object associated with this event.
 */
public static void notifyCreation(int type,Object model){
  ICrosstabModelListener listener=modelListener.get();
  if (listener != null) {
    listener.onCreated(type,model);
  }
}",0.8951048951048951
69221,"public EmitterInfo(String format,String id,String pagination,String mimeType,String icon,String namespace,String fileExt,Boolean outputDisplayNone,Boolean isHidden,String supportedImageFormats,boolean needOutputResultSet,IConfigurationElement emitter){
  this.format=format;
  this.id=id;
  this.emitter=emitter;
  this.pagination=pagination;
  this.mimeType=mimeType;
  this.icon=icon;
  this.namespace=namespace;
  this.fileExtension=fileExt;
  this.outputDisplayNone=outputDisplayNone;
  this.isHidden=isHidden;
  this.supportedImageFormats=supportedImageFormats;
}","public EmitterInfo(String format,String id,String pagination,String mimeType,String icon,String namespace,String fileExt,Boolean outputDisplayNone,Boolean isHidden,String supportedImageFormats,boolean needOutputResultSet,IConfigurationElement emitter){
  this.format=format;
  this.id=id;
  this.emitter=emitter;
  this.pagination=pagination;
  this.mimeType=mimeType;
  this.icon=icon;
  this.namespace=namespace;
  this.fileExtension=fileExt;
  this.outputDisplayNone=outputDisplayNone;
  this.isHidden=isHidden;
  this.supportedImageFormats=supportedImageFormats;
  this.needOutputResultSet=needOutputResultSet;
}",0.9594594594594594
69222,"protected void putCachedQueryResult(IBaseQueryDefinition query,String id){
  if (query.cacheQueryResults()) {
    queryCache.putCachedQuery(query,id);
  }
}","protected void putCachedQueryResult(IBaseQueryDefinition query,String id){
  queryCache.putCachedQuery(query,id);
}",0.8487084870848709
69223,"protected IBaseResultSet doExecuteQuery(IBaseResultSet parentResultSet,IQueryDefinition query,Object queryOwner,boolean useCache) throws BirtException {
  IPreparedQuery pQuery=(IPreparedQuery)queryMap.get(query);
  if (pQuery == null) {
    return null;
  }
  ScriptContext scriptContext=context.getScriptContext();
  IBaseQueryResults dteResults=null;
  boolean needExecute=queryCache.needExecute(query,queryOwner,needCache || useCache);
  if (!needExecute) {
    dteResults=getCachedQueryResult(query,parentResultSet);
  }
  if (dteResults == null) {
    if (parentResultSet == null) {
      dteResults=dteSession.execute(pQuery,null,scriptContext);
    }
 else {
      dteResults=dteSession.execute(pQuery,parentResultSet.getQueryResults(),scriptContext);
    }
    putCachedQueryResult(query,dteResults.getID());
  }
  IBaseResultSet resultSet;
  if (parentResultSet == null) {
    resultSet=new QueryResultSet(this,context,query,(IQueryResults)dteResults);
  }
 else {
    resultSet=new QueryResultSet(this,context,parentResultSet,query,(IQueryResults)dteResults);
  }
  if (resultSet != null && needCache) {
    cacheResultID(parentResultSet,query,resultSet);
  }
  return resultSet;
}","protected IBaseResultSet doExecuteQuery(IBaseResultSet parentResultSet,IQueryDefinition query,Object queryOwner,boolean useCache) throws BirtException {
  IPreparedQuery pQuery=(IPreparedQuery)queryMap.get(query);
  if (pQuery == null) {
    return null;
  }
  ScriptContext scriptContext=context.getScriptContext();
  IBaseQueryResults dteResults=null;
  boolean needExecute=queryCache.needExecute(query,queryOwner,useCache);
  if (!needExecute) {
    dteResults=getCachedQueryResult(query,parentResultSet);
  }
  if (dteResults == null) {
    if (needCache) {
      ((BaseQueryDefinition)query).setCacheQueryResults(true);
    }
    if (parentResultSet == null) {
      dteResults=dteSession.execute(pQuery,null,scriptContext);
    }
 else {
      dteResults=dteSession.execute(pQuery,parentResultSet.getQueryResults(),scriptContext);
    }
    queryCache.putCachedQuery(query,dteResults.getID());
  }
  IBaseResultSet resultSet;
  if (parentResultSet == null) {
    resultSet=new QueryResultSet(this,context,query,(IQueryResults)dteResults);
  }
 else {
    resultSet=new QueryResultSet(this,context,parentResultSet,query,(IQueryResults)dteResults);
  }
  if (needCache) {
    cacheResultID(parentResultSet,query,resultSet);
  }
  return resultSet;
}",0.8605316973415132
69224,"protected IBaseResultSet doExecuteCube(IBaseResultSet parentResultSet,ICubeQueryDefinition query,Object queryOwner,boolean useCache) throws BirtException {
  if (needCache || useCache) {
    Object obj=cachedQueryToResults.get(query);
    String rsetId=obj == null ? null : String.valueOf(obj);
    query.setQueryResultsID(rsetId);
  }
 else {
    query.setQueryResultsID(null);
  }
  IBasePreparedQuery pQuery=(IBasePreparedQuery)queryMap.get(query);
  if (pQuery == null) {
    throw new EngineException(MessageConstants.PREPARED_QUERY_NOT_FOUND_ERROR,query);
  }
  ScriptContext scriptContext=context.getScriptContext();
  IBaseResultSet resultSet;
  ICubeQueryResults dteResults;
  if (parentResultSet == null) {
    dteResults=(ICubeQueryResults)dteSession.execute(pQuery,null,scriptContext);
    resultSet=new CubeResultSet(this,context,query,dteResults);
  }
 else {
    dteResults=(ICubeQueryResults)dteSession.execute(pQuery,parentResultSet.getQueryResults(),scriptContext);
    resultSet=new CubeResultSet(this,context,parentResultSet,query,(ICubeQueryResults)dteResults);
  }
  if (query.cacheQueryResults()) {
    cachedQueryToResults.put(query,dteResults.getID());
  }
  if (resultSet != null && needCache) {
    cacheResultID(parentResultSet,query,resultSet);
  }
  return resultSet;
}","protected IBaseResultSet doExecuteCube(IBaseResultSet parentResultSet,ICubeQueryDefinition query,Object queryOwner,boolean useCache) throws BirtException {
  if (useCache) {
    Object obj=cachedQueryToResults.get(query);
    String rsetId=obj == null ? null : String.valueOf(obj);
    query.setQueryResultsID(rsetId);
  }
 else {
    query.setQueryResultsID(null);
  }
  if (needCache) {
    ((ICubeQueryDefinition)query).setCacheQueryResults(true);
  }
  IBasePreparedQuery pQuery=(IBasePreparedQuery)queryMap.get(query);
  if (pQuery == null) {
    throw new EngineException(MessageConstants.PREPARED_QUERY_NOT_FOUND_ERROR,query);
  }
  ScriptContext scriptContext=context.getScriptContext();
  IBaseResultSet resultSet;
  ICubeQueryResults dteResults;
  if (parentResultSet == null) {
    dteResults=(ICubeQueryResults)dteSession.execute(pQuery,null,scriptContext);
    resultSet=new CubeResultSet(this,context,query,dteResults);
  }
 else {
    dteResults=(ICubeQueryResults)dteSession.execute(pQuery,parentResultSet.getQueryResults(),scriptContext);
    resultSet=new CubeResultSet(this,context,parentResultSet,query,(ICubeQueryResults)dteResults);
  }
  cachedQueryToResults.put(query,dteResults.getID());
  if (needCache) {
    cacheResultID(parentResultSet,query,resultSet);
  }
  return resultSet;
}",0.870398773006135
69225,"/** 
 * @param fm
 * @return The width of the line containing the maximum width (if multilinesplit by hard breaks) or the width of the single line of text
 */
private final double stringWidth(){
  if (!Double.isNaN(cachedwidth)) {
    return cachedwidth;
  }
  cachedwidth=0;
  Rectangle2D r2d;
  if (iLineCount > 1) {
    double dWidth, dMaxWidth=0;
    for (int i=0; i < iLineCount; i++) {
      r2d=fm.getStringBounds(fsa[0],g2d);
      dWidth=r2d.getWidth();
      if (dWidth > dMaxWidth) {
        dMaxWidth=dWidth;
      }
    }
    cachedwidth=Math.max(0,dMaxWidth);
  }
 else   if (iLineCount == 1) {
    double w=fm.getStringBounds(fsa[0],g2d).getWidth();
    cachedwidth=Math.max(0,w);
  }
  return cachedwidth;
}","/** 
 * @param fm
 * @return The width of the line containing the maximum width (if multilinesplit by hard breaks) or the width of the single line of text
 */
private final double stringWidth(){
  if (!Double.isNaN(cachedwidth)) {
    return cachedwidth;
  }
  cachedwidth=0;
  Rectangle2D r2d;
  if (iLineCount > 1) {
    double dWidth, dMaxWidth=0;
    for (int i=0; i < iLineCount; i++) {
      r2d=tla[i].getBounds();
      dWidth=r2d.getWidth();
      if (dWidth > dMaxWidth) {
        dMaxWidth=dWidth;
      }
    }
    cachedwidth=Math.max(0,dMaxWidth);
  }
 else   if (iLineCount == 1) {
    double w=fm.getStringBounds(fsa[0],g2d).getWidth();
    cachedwidth=Math.max(0,w);
  }
  return cachedwidth;
}",0.6708507670850767
69226,"public void startContent(IContent content,IContentEmitter emitter,boolean visible) throws BirtException {
  if (isRepeated || (!visible && !currentNode.isStarted())) {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator,visible);
    setup(leafNode,true);
  }
 else {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator,visible);
    setup(leafNode,true);
    currentNode.start();
    if (visible) {
      ContentEmitterUtil.startContent(content,emitter);
    }
    generator.start(content,true);
    generator.end(content,true);
    currentNode.removeChildren();
  }
}","public void startContent(IContent content,IContentEmitter emitter,boolean visible) throws BirtException {
  if (context.isFixedLayout() && (Integer)context.getLayoutEngine().getOption(EngineTask.TASK_TYPE) == IEngineTask.TASK_RUN) {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator,visible);
    setup(leafNode,true);
    currentNode.start();
    ContentEmitterUtil.startContent(content,emitter);
    generator.start(content,true);
    generator.end(content,true);
    currentNode.removeChildren();
  }
 else   if (isRepeated || (!visible && !currentNode.isStarted())) {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator,visible);
    setup(leafNode,true);
  }
 else {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator,visible);
    setup(leafNode,true);
    currentNode.start();
    if (visible) {
      ContentEmitterUtil.startContent(content,emitter);
    }
    generator.start(content,true);
    generator.end(content,true);
    currentNode.removeChildren();
  }
}",0.7410551849605822
69227,"public void startTable(ITableContent table){
  ContainerSizeInfo sizeInfo=engine.getCurrentContainer().getSizeInfo();
  int width=sizeInfo.getWidth();
  ColumnsInfo info=null;
  if (isAuto) {
    info=LayoutUtil.createTable(table,width);
  }
 else {
    int[] columns=LayoutUtil.createFixedTable(table,LayoutUtil.getElementWidth(table,width));
    info=new ColumnsInfo(columns);
  }
  if (info == null)   return;
  String caption=table.getCaption();
  if (caption != null) {
    engine.addCaption(caption);
  }
  engine.addTable(table,info,sizeInfo);
}","public void startTable(ITableContent table){
  ContainerSizeInfo sizeInfo=engine.getCurrentContainer().getSizeInfo();
  int width=sizeInfo.getWidth();
  ColumnsInfo info=null;
  if (isAuto) {
    info=LayoutUtil.createTable(table,width);
  }
 else {
    int[] columns=LayoutUtil.createFixedTable(table,LayoutUtil.getElementWidth(table,width));
    info=new ColumnsInfo(columns);
  }
  if (info == null)   return;
  String caption=table.getCaption();
  if (caption != null) {
    engine.addCaption(caption,table.getComputedStyle());
  }
  engine.addTable(table,info,sizeInfo);
}",0.9778565101860052
69228,"public void addCaption(String text){
  ContainerSizeInfo rule=getCurrentContainer().getSizeInfo();
  StyleEntry entry=StyleBuilder.createEmptyStyleEntry();
  entry.setProperty(StyleEntry.H_ALIGN_PROP,""String_Node_Str"");
  Data data=createData(text,entry);
  data.setSizeInfo(rule);
  addData(data);
}","public void addCaption(String text,IStyle style){
  ContainerSizeInfo rule=getCurrentContainer().getSizeInfo();
  StyleEntry entry=StyleBuilder.createEmptyStyleEntry();
  entry.setProperty(StyleEntry.H_ALIGN_PROP,""String_Node_Str"");
  entry.setProperty(StyleEntry.FONT_SIZE_PROP,StyleBuilder.convertFontSize(style.getFontSize()));
  Data data=createData(text,entry);
  data.setSizeInfo(rule);
  addData(data);
}",0.8438818565400844
69229,"/** 
 * Get resultSet
 * @return
 */
private IQueryResults executeProcess(DataRequestSession session){
  errorList=new ArrayList();
  try {
    metaData=((DataSetEditor)this.getContainer()).getCurrentItemModel();
    columnCount=metaData == null ? 0 : metaData.length;
    QueryDefinition query=new QueryDefinition();
    query.setDataSetName(((DataSetEditor)getContainer()).getHandle().getQualifiedName());
    int maxRow=getMaxRowPreference();
    query.setMaxRows(maxRow);
    PropertyHandle handle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
    if (handle != null) {
      Iterator paramIter=handle.iterator();
      while (paramIter.hasNext()) {
        String value=null;
        DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
        if (paramDefn.isInput()) {
          if (paramDefn instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)paramDefn).getParamName() != null) {
            String linkedReportParam=((OdaDataSetParameterHandle)paramDefn).getParamName();
            if (linkedReportParam != null) {
              ParameterHandle ph=((DataSetEditor)getContainer()).getHandle().getModuleHandle().findParameter(linkedReportParam);
              if (ph instanceof ScalarParameterHandle) {
                if (((ScalarParameterHandle)ph).getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE)) {
                  throw new BirtException(Messages.getFormattedString(""String_Node_Str"",new String[]{linkedReportParam}),null);
                }
              }
            }
            value=DataUtil.getParamValue(((DataSetEditor)getContainer()).getHandle(),(OdaDataSetParameterHandle)paramDefn);
          }
          if (value != null) {
            InputParameterBinding binding=new InputParameterBinding(paramDefn.getName(),new ScriptExpression(value));
            query.addInputParamBinding(binding);
          }
        }
      }
    }
    columnBindingNames=new String[columnCount];
    ScriptExpression[] expressions=new ScriptExpression[columnCount];
    for (int n=0; n < columnCount; n++) {
      columnBindingNames[n]=metaData[n].getName();
      expressions[n]=new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(metaData[n].getName()));
      expressions[n].setDataType(metaData[n].getDataType());
      query.addResultSetExpression(columnBindingNames[n],expressions[n]);
    }
    boolean needCache=false;
    if (this.previousMaxRow != maxRow) {
      this.previousMaxRow=maxRow;
      needCache=true;
    }
    IQueryResults resultSet=DataSetProvider.getCurrentInstance().execute(((DataSetEditor)getContainer()).getHandle(),query,true,true,needCache,session);
    return resultSet;
  }
 catch (  BirtException e) {
    errorList.add(e);
    return null;
  }
}","/** 
 * Get resultSet
 * @return
 */
private IQueryResults executeProcess(DataRequestSession session,ExecutionContext context){
  errorList=new ArrayList();
  try {
    metaData=((DataSetEditor)this.getContainer()).getCurrentItemModel();
    columnCount=metaData == null ? 0 : metaData.length;
    QueryDefinition query=new QueryDefinition();
    query.setDataSetName(((DataSetEditor)getContainer()).getHandle().getQualifiedName());
    int maxRow=getMaxRowPreference();
    query.setMaxRows(maxRow);
    PropertyHandle handle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
    if (handle != null) {
      Iterator paramIter=handle.iterator();
      while (paramIter.hasNext()) {
        String value=null;
        DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
        if (paramDefn.isInput()) {
          if (paramDefn instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)paramDefn).getParamName() != null) {
            String linkedReportParam=((OdaDataSetParameterHandle)paramDefn).getParamName();
            if (linkedReportParam != null) {
              ParameterHandle ph=((DataSetEditor)getContainer()).getHandle().getModuleHandle().findParameter(linkedReportParam);
              if (ph instanceof ScalarParameterHandle) {
                if (((ScalarParameterHandle)ph).getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE)) {
                  throw new BirtException(Messages.getFormattedString(""String_Node_Str"",new String[]{linkedReportParam}),null);
                }
              }
            }
            value=DataUtil.getParamValue(((DataSetEditor)getContainer()).getHandle(),(OdaDataSetParameterHandle)paramDefn);
          }
          if (value != null) {
            InputParameterBinding binding=new InputParameterBinding(paramDefn.getName(),new ScriptExpression(value));
            query.addInputParamBinding(binding);
          }
        }
      }
    }
    columnBindingNames=new String[columnCount];
    ScriptExpression[] expressions=new ScriptExpression[columnCount];
    for (int n=0; n < columnCount; n++) {
      columnBindingNames[n]=metaData[n].getName();
      expressions[n]=new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(metaData[n].getName()));
      expressions[n].setDataType(metaData[n].getDataType());
      query.addResultSetExpression(columnBindingNames[n],expressions[n]);
    }
    boolean needCache=false;
    if (this.previousMaxRow != maxRow) {
      this.previousMaxRow=maxRow;
      needCache=true;
    }
    IQueryResults resultSet=DataSetProvider.getCurrentInstance().execute(((DataSetEditor)getContainer()).getHandle(),query,true,true,needCache,context,session);
    return resultSet;
  }
 catch (  BirtException e) {
    errorList.add(e);
    return null;
  }
}",0.9941788675251368
69230,"/** 
 * Show ProgressMonitorDialog
 */
private void updateResultsProcess(){
  needsUpdateUI=true;
  clearResultSetTable();
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      if (resultSetTable != null && !resultSetTable.isDisposed()) {
        ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
        ClassLoader parentLoader=oldContextLoader;
        if (parentLoader == null)         parentLoader=this.getClass().getClassLoader();
        ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
        Thread.currentThread().setContextClassLoader(newContextLoader);
        Map dataSetBindingMap=new HashMap();
        Map dataSourceBindingMap=new HashMap();
        ModuleHandle handle;
        DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
        handle=dsHandle.getModuleHandle();
        try {
          if (handle instanceof ReportDesignHandle) {
            EngineConfig ec=new EngineConfig();
            ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
            ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
            DataSetUIUtil.clearPropertyBindingMap(dsHandle,dataSetBindingMap,dataSourceBindingMap);
            DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)handle),handle);
            DataRequestSession session=engineTask.getDataSession();
            Map appContext=new HashMap();
            appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
            engineTask.setAppContext(appContext);
            engineTask.run();
            IQueryResults resultSet=executeProcess(session);
            populateRecords(resultSet);
            engineTask.close();
            engine.destroy();
            monitor.done();
          }
 else {
            DataSessionContext context;
            context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
            DataRequestSession session=DataRequestSession.newSession(context);
            Map appContext=new HashMap();
            appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
            if (context.getAppContext() != null) {
              appContext.putAll(context.getAppContext());
            }
            context.setAppContext(appContext);
            IQueryResults resultSet=executeProcess(session);
            populateRecords(resultSet);
            session.shutdown();
          }
        }
 catch (        BirtException e) {
          ExceptionHandler.handle(e);
        }
 finally {
          try {
            DataSetUIUtil.resetPropertyBinding(dsHandle,dataSetBindingMap,dataSourceBindingMap);
          }
 catch (          SemanticException e) {
          }
        }
        Thread.currentThread().setContextClassLoader(oldContextLoader);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell()){
      protected void cancelPressed(){
        super.cancelPressed();
        needsUpdateUI=false;
      }
    }
.run(true,true,runnable);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.handle(e);
  }
catch (  InterruptedException e) {
    ExceptionHandler.handle(e);
  }
  updateResultSetTableUI();
}","/** 
 * Show ProgressMonitorDialog
 */
private void updateResultsProcess(){
  needsUpdateUI=true;
  clearResultSetTable();
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      if (resultSetTable != null && !resultSetTable.isDisposed()) {
        ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
        ClassLoader parentLoader=oldContextLoader;
        if (parentLoader == null)         parentLoader=this.getClass().getClassLoader();
        ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
        Thread.currentThread().setContextClassLoader(newContextLoader);
        Map dataSetBindingMap=new HashMap();
        Map dataSourceBindingMap=new HashMap();
        ModuleHandle handle;
        DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
        handle=dsHandle.getModuleHandle();
        try {
          if (handle instanceof ReportDesignHandle) {
            EngineConfig ec=new EngineConfig();
            ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
            ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
            DataSetUIUtil.clearPropertyBindingMap(dsHandle,dataSetBindingMap,dataSourceBindingMap);
            DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)handle),handle);
            DataRequestSession session=engineTask.getDataSession();
            Map appContext=new HashMap();
            appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
            engineTask.setAppContext(appContext);
            engineTask.run();
            IQueryResults resultSet=executeProcess(session,engineTask.getExecutionContext());
            populateRecords(resultSet);
            engineTask.close();
            engine.destroy();
            monitor.done();
          }
 else {
            DataSessionContext context;
            context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
            DataRequestSession session=DataRequestSession.newSession(context);
            Map appContext=new HashMap();
            appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
            if (context.getAppContext() != null) {
              appContext.putAll(context.getAppContext());
            }
            context.setAppContext(appContext);
            IQueryResults resultSet=executeProcess(session,null);
            populateRecords(resultSet);
            session.shutdown();
          }
        }
 catch (        BirtException e) {
          ExceptionHandler.handle(e);
        }
 finally {
          try {
            DataSetUIUtil.resetPropertyBinding(dsHandle,dataSetBindingMap,dataSourceBindingMap);
          }
 catch (          SemanticException e) {
          }
        }
        Thread.currentThread().setContextClassLoader(oldContextLoader);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell()){
      protected void cancelPressed(){
        super.cancelPressed();
        needsUpdateUI=false;
      }
    }
.run(true,true,runnable);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.handle(e);
  }
catch (  InterruptedException e) {
    ExceptionHandler.handle(e);
  }
  updateResultSetTableUI();
}",0.9950052576235542
69231,"/** 
 * @throws IOException
 */
private void writeTypes() throws IOException {
  writeIndexEntry(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  File output=makeFile(null,""String_Node_Str"");
  writer=new PrintStream(new FileOutputStream(output));
  writeln(""String_Node_Str"");
  write(""String_Node_Str"");
  writeln(""String_Node_Str"");
  writeln(""String_Node_Str"");
  writeln(""String_Node_Str"");
  writeln(""String_Node_Str"");
  writeln(""String_Node_Str"");
  writeln(""String_Node_Str"");
  writeln(""String_Node_Str"");
  writeSectionBody(typeHeader);
  writeln(""String_Node_Str"");
  Iterator iter=propertyTypes.iterator();
  while (iter.hasNext()) {
    DocPropertyType type=(DocPropertyType)iter.next();
    write(""String_Node_Str"");
    write(type.getName());
    write(""String_Node_Str"");
    write(type.getName());
    writeln(""String_Node_Str"");
    writeSectionBody(type.getSummary());
    writeSectionHeader(""String_Node_Str"");
    startDetailsTable();
    detailRow(""String_Node_Str"",type.getDisplayName());
    detailRow(""String_Node_Str"",type.getSince());
    detailRow(""String_Node_Str"",""String_Node_Str"" + type.getXmlName() + ""String_Node_Str"");
    detailRow(""String_Node_Str"",type.getJSDesignType());
    detailRow(""String_Node_Str"",type.getJSRuntimeType());
    endDetailsTable();
    writeSection(""String_Node_Str"",type.getDescription());
    if (type.getSeeAlso() != null) {
      writeSection(""String_Node_Str"",type.getSeeAlso());
    }
    if (iter.hasNext())     ;
    writeln(""String_Node_Str"");
  }
  finishSummaryTable();
  writeFooter();
  writer.close();
}","/** 
 * @throws IOException
 */
private void writeTypes() throws IOException {
  writeIndexEntry(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  File output=makeFile(null,""String_Node_Str"");
  writer=new PrintStream(new FileOutputStream(output));
  writeln(""String_Node_Str"");
  write(""String_Node_Str"");
  writeln(""String_Node_Str"");
  writeln(""String_Node_Str"");
  writeln(""String_Node_Str"");
  writeln(""String_Node_Str"");
  writeln(""String_Node_Str"");
  writeln(""String_Node_Str"");
  writeln(""String_Node_Str"");
  writeSectionBody(typeHeader);
  writeln(""String_Node_Str"");
  Iterator iter=propertyTypes.iterator();
  while (iter.hasNext()) {
    DocPropertyType type=(DocPropertyType)iter.next();
    write(""String_Node_Str"");
    write(type.getName());
    write(""String_Node_Str"");
    write(type.getName());
    writeln(""String_Node_Str"");
    writeSectionBody(type.getSummary());
    writeSectionHeader(""String_Node_Str"");
    startDetailsTable();
    detailRow(""String_Node_Str"",type.getDisplayName());
    detailRow(""String_Node_Str"",type.getSince());
    detailRow(""String_Node_Str"",""String_Node_Str"" + type.getXmlName() + ""String_Node_Str"");
    detailRow(""String_Node_Str"",type.getJSDesignType());
    detailRow(""String_Node_Str"",type.getJSRuntimeType());
    endDetailsTable();
    writeSection(""String_Node_Str"",type.getDescription());
    if (type.getSeeAlso() != null) {
      writeSection(""String_Node_Str"",type.getSeeAlso());
    }
    writeln(""String_Node_Str"");
  }
  finishSummaryTable();
  writeFooter();
  writer.close();
}",0.9904580152671756
69232,"/** 
 * Reloads the library with the given library file path. If the library already is included directly or indirectly(that is, the reload path could be the path of grandson of this module), reload it. If the library is not included, exception will be thrown. <p> Call this method cautiously ONLY on the condition that the library file is REALLY changed outside. After reload successfully, the command stack is cleared.
 * @param reloadPath this is supposed to be an absolute path, not in url form.
 * @throws SemanticException if error is encountered when handling <code>IncludeLibrary </code> structure list. Or it maybe because that the given library is not found in the design. Or that the library has descedents in the current module
 * @throws DesignFileException if the library file is not found, or has fatal error.
 */
public void reloadLibrary(String reloadPath) throws SemanticException, DesignFileException {
  if (StringUtil.isEmpty(reloadPath))   return;
  URL url=ModelUtil.getURLPresentation(reloadPath);
  String path=null;
  if (url != null)   path=url.toExternalForm();
  if (path == null) {
    DesignParserException ex=new DesignParserException(new String[]{path},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(path,exceptionList);
  }
  List<Library> libs=module.getLibrariesByLocation(path,IAccessControl.ARBITARY_LEVEL);
  Map<String,Library> reloadLibs=new HashMap();
  for (int i=0; i < libs.size(); i++) {
    LibraryCommand command=new LibraryCommand(module);
    Library lib=libs.get(i);
    command.reloadLibrary(lib,null,reloadLibs);
  }
  ModuleOption options=module.getOptions();
  if (options == null || options.useSemanticCheck())   checkReport();
}","/** 
 * Reloads the library with the given library file path. If the library already is included directly or indirectly(that is, the reload path could be the path of grandson of this module), reload it. If the library is not included, exception will be thrown. <p> Call this method cautiously ONLY on the condition that the library file is REALLY changed outside. After reload successfully, the command stack is cleared.
 * @param reloadPath this is supposed to be an absolute path, not in url form.
 * @throws SemanticException if error is encountered when handling <code>IncludeLibrary </code> structure list. Or it maybe because that the given library is not found in the design. Or that the library has descedents in the current module
 * @throws DesignFileException if the library file is not found, or has fatal error.
 */
public void reloadLibrary(String reloadPath) throws SemanticException, DesignFileException {
  if (StringUtil.isEmpty(reloadPath))   return;
  URL url=ModelUtil.getURLPresentation(reloadPath);
  String path=null;
  if (url != null)   path=url.toExternalForm();
  if (path == null) {
    DesignParserException ex=new DesignParserException(new String[]{reloadPath},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(path,exceptionList);
  }
  List<Library> libs=module.getLibrariesByLocation(path,IAccessControl.ARBITARY_LEVEL);
  Map<String,Library> reloadLibs=new HashMap();
  for (int i=0; i < libs.size(); i++) {
    LibraryCommand command=new LibraryCommand(module);
    Library lib=libs.get(i);
    command.reloadLibrary(lib,null,reloadLibs);
  }
  ModuleOption options=module.getOptions();
  if (options == null || options.useSemanticCheck())   checkReport();
}",0.9977753058954394
69233,"/** 
 * Returns the referred template parameter definition of the template element.
 * @return the handle to the referred template parameter definition
 */
TemplateParameterDefinitionHandle getRefTemplateParameter(){
}","/** 
 * Returns the referred template parameter definition of the template element.
 * @return the handle to the referred template parameter definition
 */
TemplateParameterDefinitionHandle getRefTemplateParameter(){
  TemplateParameterDefinition refTemplateParam=((TemplateElement)getElement()).getTemplateParameterElement(module);
  if (refTemplateParam == null)   return null;
  return (TemplateParameterDefinitionHandle)refTemplateParam.getHandle(module);
}",0.6421207658321061
69234,"/** 
 * Creates a row in the slot.
 * @param row the row element
 */
protected void newLayoutRow(TableRow row){
  int rowCount=rows.size();
  if (rowCount == 0 || rowCount == currentRowId + 1)   ensureSize(rowCount + 1,colCount);
  if (rowCount != 0)   currentRowId++;
  rowCount++;
}","/** 
 * Creates a row in the slot.
 * @param row the row element
 */
protected void newLayoutRow(TableRow row){
  int rowCount=rows.size();
  if (rowCount == 0 || rowCount == currentRowId + 1)   ensureSize(rowCount + 1,colCount);
  if (rowCount != 0)   currentRowId++;
}",0.9747292418772564
69235,"/** 
 * Creates a new design session handle. The application uses the handle to open, create and manage designs. The session also represents the user and maintains the user's locale information.
 * @param locale the user's locale. If <code>null</code>, uses the system locale.
 * @return the design session handle
 * @see SessionHandle
 */
public SessionHandle newSessionHandle(ULocale locale){
  if (isInitialized.booleanValue() && MetaDataDictionary.getInstance().isIntializedExtension())   return new SessionHandle(locale);
synchronized (isInitialized) {
    if (isInitialized.booleanValue() && MetaDataDictionary.getInstance().isIntializedExtension())     return new SessionHandle(locale);
    if (!isInitialized.booleanValue())     MetaDataDictionary.reset();
    try {
      initialize(ReportDesign.class.getResourceAsStream(ROM_DEF_FILE_NAME));
    }
 catch (    MetaDataReaderException e) {
    }
 finally {
      MetaLogManager.shutDown();
    }
    isInitialized=Boolean.TRUE;
  }
  SessionHandle session=new SessionHandle(locale);
  if (designConfig != null) {
    IResourceLocator locator=designConfig.getResourceLocator();
    if (locator != null)     session.setResourceLocator(locator);
  }
  return session;
}","/** 
 * Creates a new design session handle. The application uses the handle to open, create and manage designs. The session also represents the user and maintains the user's locale information.
 * @param locale the user's locale. If <code>null</code>, uses the system locale.
 * @return the design session handle
 * @see SessionHandle
 */
public SessionHandle newSessionHandle(ULocale locale){
  if (isInitialized.booleanValue() && MetaDataDictionary.getInstance().isIntializedExtension())   return new SessionHandle(locale);
synchronized (DesignEngineImpl.class) {
    if (isInitialized.booleanValue() && MetaDataDictionary.getInstance().isIntializedExtension())     return new SessionHandle(locale);
    if (!isInitialized.booleanValue())     MetaDataDictionary.reset();
    try {
      initialize(ReportDesign.class.getResourceAsStream(ROM_DEF_FILE_NAME));
    }
 catch (    MetaDataReaderException e) {
    }
 finally {
      MetaLogManager.shutDown();
    }
    isInitialized=Boolean.TRUE;
  }
  SessionHandle session=new SessionHandle(locale);
  if (designConfig != null) {
    IResourceLocator locator=designConfig.getResourceLocator();
    if (locator != null)     session.setResourceLocator(locator);
  }
  return session;
}",0.9865799105327367
69236,"/** 
 * Initializes the meta-data system and loads all extensions which implements the extension pointers the model defines. The application must call this method once (and only once) before opening or creating a design. It is the application's responsibility because the application will choose the location to store the definition file, and that location may differ for different applications.
 * @param is stream for reading the ""rom.def"" file that provides the meta-data for the system
 * @throws MetaDataReaderException if error occurs during read the meta-data file.
 */
private static void initialize(InputStream is) throws MetaDataReaderException {
  try {
    if (!isInitialized.booleanValue())     MetaDataReader.read(is);
    if (!MetaDataDictionary.getInstance().isIntializedExtension())     MetaDataDictionary.getInstance().intializeExtension();
    if (!isInitialized.booleanValue())     SimpleElementFactory.setInstance(new org.eclipse.birt.report.model.api.impl.SimpleElementFactory());
  }
 catch (  MetaDataParserException e) {
    throw new MetaDataReaderException(MetaDataReaderException.DESIGN_EXCEPTION_META_DATA_ERROR,e);
  }
}","/** 
 * Initializes the meta-data system and loads all extensions which implements the extension pointers the model defines. The application must call this method once (and only once) before opening or creating a design. It is the application's responsibility because the application will choose the location to store the definition file, and that location may differ for different applications.
 * @param is stream for reading the ""rom.def"" file that provides the meta-data for the system
 * @throws MetaDataReaderException if error occurs during read the meta-data file.
 */
private static void initialize(InputStream is) throws MetaDataReaderException {
  try {
    if (!isInitialized.booleanValue())     MetaDataReader.read(is);
    if (!MetaDataDictionary.getInstance().isIntializedExtension())     MetaDataDictionary.intializeExtension();
    if (!isInitialized.booleanValue())     SimpleElementFactory.setInstance(new org.eclipse.birt.report.model.api.impl.SimpleElementFactory());
  }
 catch (  MetaDataParserException e) {
    throw new MetaDataReaderException(MetaDataReaderException.DESIGN_EXCEPTION_META_DATA_ERROR,e);
  }
}",0.9938757655293088
69237,"/** 
 * Gets the meta-data of the design engine.
 * @return the meta-data of the design engine.
 */
public IMetaDataDictionary getMetaData(){
  if (isInitialized.booleanValue() && MetaDataDictionary.getInstance().isIntializedExtension())   return MetaDataDictionary.getInstance();
synchronized (isInitialized) {
    if (isInitialized.booleanValue() && MetaDataDictionary.getInstance().isIntializedExtension())     return MetaDataDictionary.getInstance();
    if (!isInitialized.booleanValue())     MetaDataDictionary.reset();
    try {
      initialize(ReportDesign.class.getResourceAsStream(ROM_DEF_FILE_NAME));
    }
 catch (    MetaDataReaderException e) {
    }
 finally {
      MetaLogManager.shutDown();
    }
    isInitialized=Boolean.TRUE;
  }
  return MetaDataDictionary.getInstance();
}","/** 
 * Gets the meta-data of the design engine.
 * @return the meta-data of the design engine.
 */
public IMetaDataDictionary getMetaData(){
  if (isInitialized.booleanValue() && MetaDataDictionary.getInstance().isIntializedExtension())   return MetaDataDictionary.getInstance();
synchronized (DesignEngineImpl.class) {
    if (isInitialized.booleanValue() && MetaDataDictionary.getInstance().isIntializedExtension())     return MetaDataDictionary.getInstance();
    if (!isInitialized.booleanValue())     MetaDataDictionary.reset();
    try {
      initialize(ReportDesign.class.getResourceAsStream(ROM_DEF_FILE_NAME));
    }
 catch (    MetaDataReaderException e) {
    }
 finally {
      MetaLogManager.shutDown();
    }
    isInitialized=Boolean.TRUE;
  }
  return MetaDataDictionary.getInstance();
}",0.9781386633354152
69238,"/** 
 * Validates whether the group with the given name can be added into the given listing element.
 * @param element List/Table element
 * @param groupName name of the group to add
 * @return error list, each of which is the instance of<code>SemanticException</code>.
 */
public List<SemanticException> validateForAddingGroup(ListingHandle element,String groupName){
  List<GroupElement> groupList=Collections.emptyList();
  ListingElement targetElement=getListingElement(element.getModule(),(ListingElement)element.getElement());
  if (targetElement == null) {
    targetElement=(ListingElement)element.getElement();
    groupList=getGroups(element.getModule(),(ListingElement)element.getElement());
  }
 else {
    groupList=getGroupsWithContents(element.getModule(),targetElement);
  }
  List<SemanticException> list=new ArrayList<SemanticException>();
  if (isDuplicateGroupName(element.getModule(),groupList,groupName)) {
    list.add(new NameException(targetElement,groupName,NameException.DESIGN_EXCEPTION_DUPLICATE));
    return list;
  }
  return list;
}","/** 
 * Validates whether the group with the given name can be added into the given listing element.
 * @param element List/Table element
 * @param groupName name of the group to add
 * @return error list, each of which is the instance of<code>SemanticException</code>.
 */
public List<SemanticException> validateForAddingGroup(ListingHandle element,String groupName){
  List<GroupElement> groupList=Collections.emptyList();
  ListingElement targetElement=(ListingElement)element.getElement();
  if (targetElement == null) {
    targetElement=(ListingElement)element.getElement();
    groupList=getGroups(element.getModule(),(ListingElement)element.getElement());
  }
 else {
    groupList=getGroupsWithContents(element.getModule(),targetElement);
  }
  List<SemanticException> list=new ArrayList<SemanticException>();
  if (isDuplicateGroupName(element.getModule(),groupList,groupName)) {
    list.add(new NameException(targetElement,groupName,NameException.DESIGN_EXCEPTION_DUPLICATE));
    return list;
  }
  return list;
}",0.958393113342898
69239,"/** 
 * Validates whether the group can be renamed to the given name.
 * @param element List/Table element
 * @param group the group to rename
 * @param groupName name of the group to add
 * @return error list, each of which is the instance of<code>SemanticException</code>.
 */
public List<SemanticException> validateForRenamingGroup(ListingHandle element,GroupHandle group,String groupName){
  if (group.getName() == groupName || (groupName != null && groupName.equals(group.getName()))) {
    return Collections.emptyList();
  }
  ListingElement targetElement=getListingElement(element.getModule(),(ListingElement)element.getElement());
  if (targetElement == null)   return Collections.emptyList();
  List<GroupElement> groupList=getGroupsWithContents(element.getModule(),targetElement);
  List<SemanticException> list=new ArrayList<SemanticException>();
  if (isDuplicateGroupName(element.getModule(),groupList,groupName)) {
    list.add(new NameException(targetElement,groupName,NameException.DESIGN_EXCEPTION_DUPLICATE));
    return list;
  }
  return list;
}","/** 
 * Validates whether the group can be renamed to the given name.
 * @param element List/Table element
 * @param group the group to rename
 * @param groupName name of the group to add
 * @return error list, each of which is the instance of<code>SemanticException</code>.
 */
public List<SemanticException> validateForRenamingGroup(ListingHandle element,GroupHandle group,String groupName){
  if (group.getName() == groupName || (groupName != null && groupName.equals(group.getName()))) {
    return Collections.emptyList();
  }
  ListingElement targetElement=(ListingElement)element.getElement();
  if (targetElement == null)   return Collections.emptyList();
  List<GroupElement> groupList=getGroupsWithContents(element.getModule(),targetElement);
  List<SemanticException> list=new ArrayList<SemanticException>();
  if (isDuplicateGroupName(element.getModule(),groupList,groupName)) {
    list.add(new NameException(targetElement,groupName,NameException.DESIGN_EXCEPTION_DUPLICATE));
    return list;
  }
  return list;
}",0.9479216435738176
69240,"/** 
 * Checks the current element name. Done when adding a newly created element where the element name is already set on the new element.
 * @param name the name to check.
 * @throws NameException if the element name is not allowed to change.
 */
public void checkName(String name) throws NameException {
  ElementDefn metaData=(ElementDefn)element.getDefn();
  if (name == null) {
    if (element.hasDerived() || element.hasReferences())     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_HAS_REFERENCES);
    if (metaData.getNameOption() == MetaDataConstants.REQUIRED_NAME)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_REQUIRED);
    if ((module instanceof Library) && (element.getContainer() instanceof Library)) {
      throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_REQUIRED);
    }
  }
 else {
    PropertyDefn propDefn=(PropertyDefn)metaData.getProperty(IDesignElementModel.NAME_PROP);
    if (propDefn == null)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_FORBIDDEN);
    try {
      name=(String)propDefn.validateValue(module,name);
    }
 catch (    PropertyValueException e) {
      throw new NameException(element,name,NameException.DESIGN_EXCEPTION_INVALID_NAME);
    }
    if (element instanceof StyleElement) {
      if (!styleNamePattern.matcher(name).matches())       throw new NameException(element,name,NameException.DESIGN_EXCEPTION_INVALID_STYLE_NAME);
    }
    if (!isNameValidInContext(name))     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_DUPLICATE);
    if (metaData.getNameOption() == MetaDataConstants.NO_NAME)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_FORBIDDEN);
    if (!element.isManagedByNameSpace()) {
      return;
    }
    DesignElement existedElement=new NameExecutor(element).getNameSpace(module).getElement(name);
    if (existedElement != null)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_DUPLICATE);
  }
}","/** 
 * Checks the current element name. Done when adding a newly created element where the element name is already set on the new element.
 * @param name the name to check.
 * @throws NameException if the element name is not allowed to change.
 */
public void checkName(String name) throws NameException {
  ElementDefn metaData=(ElementDefn)element.getDefn();
  if (name == null) {
    if (element.hasDerived() || element.hasReferences())     throw new NameException(element,null,NameException.DESIGN_EXCEPTION_HAS_REFERENCES);
    if (metaData.getNameOption() == MetaDataConstants.REQUIRED_NAME)     throw new NameException(element,null,NameException.DESIGN_EXCEPTION_NAME_REQUIRED);
    if ((module instanceof Library) && (element.getContainer() instanceof Library)) {
      throw new NameException(element,null,NameException.DESIGN_EXCEPTION_NAME_REQUIRED);
    }
  }
 else {
    PropertyDefn propDefn=(PropertyDefn)metaData.getProperty(IDesignElementModel.NAME_PROP);
    if (propDefn == null)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_FORBIDDEN);
    try {
      name=(String)propDefn.validateValue(module,name);
    }
 catch (    PropertyValueException e) {
      throw new NameException(element,name,NameException.DESIGN_EXCEPTION_INVALID_NAME);
    }
    if (element instanceof StyleElement) {
      if (!styleNamePattern.matcher(name).matches())       throw new NameException(element,name,NameException.DESIGN_EXCEPTION_INVALID_STYLE_NAME);
    }
    if (!isNameValidInContext(name))     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_DUPLICATE);
    if (metaData.getNameOption() == MetaDataConstants.NO_NAME)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_FORBIDDEN);
    if (!element.isManagedByNameSpace()) {
      return;
    }
    DesignElement existedElement=new NameExecutor(element).getNameSpace(module).getElement(name);
    if (existedElement != null)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_DUPLICATE);
  }
}",0.99560546875
69241,"/** 
 * Sets the value of a property. If the mask of a property is ""lock"", throws one exception. <p> If the mask of this property has been set to ""lock"", no value will be set. To set the value of a property, the mask value must be ""hide"" or ""change"".
 * @param prop definition of the property to set
 * @param value the new property value.
 * @throws SemanticException if the value is invalid or the property mask is ""lock"".
 */
public void setProperty(ElementPropertyDefn prop,Object value) throws SemanticException {
  checkAllowedOperation();
  if (prop.isElementType()) {
    setElementTypeProperty(prop,value);
    return;
  }
  String propName=prop.getName();
  if ((IReportItemModel.TOC_PROP.equals(propName) || IGroupElementModel.TOC_PROP.equals(propName)) && (value instanceof String)) {
    Structure oldValue=(Structure)element.getLocalProperty(module,prop);
    if (oldValue != null) {
      StructureContext ref=new StructureContext(oldValue,(PropertyDefn)oldValue.getDefn().getMember(TOC.TOC_EXPRESSION),null);
      setMember(ref,value);
      return;
    }
    value=StructureFactory.createTOC((String)value);
  }
  if (IExtendedItemModel.EXTENSION_NAME_PROP.equals(prop.getName()) && element instanceof IExtendedItemModel) {
    throw new PropertyValueException(element,IExtendedItemModel.EXTENSION_NAME_PROP,value,PropertyValueException.DESIGN_EXCEPTION_EXTENSION_SETTING_FORBIDDEN);
  }
  String mask=element.getPropertyMask(module,prop.getName());
  if (DesignChoiceConstants.PROPERTY_MASK_TYPE_LOCK.equalsIgnoreCase(mask)) {
    throw new PropertyValueException(element,prop,value,PropertyValueException.DESIGN_EXCEPTION_VALUE_LOCKED);
  }
  if (element.isVirtualElement() && element instanceof Cell) {
    propName=prop.getName();
    if (ICellModel.COL_SPAN_PROP.equalsIgnoreCase(propName) || ICellModel.ROW_SPAN_PROP.equalsIgnoreCase(propName) || ICellModel.DROP_PROP.equalsIgnoreCase(propName)|| ICellModel.COLUMN_PROP.equalsIgnoreCase(propName)) {
      throw new PropertyValueException(element,prop,value,PropertyValueException.DESIGN_EXCEPTION_PROPERTY_CHANGE_FORBIDDEN);
    }
  }
  if (element instanceof MasterPage) {
    propName=prop.getName();
    if (!((MasterPage)element).isCustomType(module) && (IMasterPageModel.WIDTH_PROP.equals(propName) || IMasterPageModel.HEIGHT_PROP.equals(propName))) {
      throw new SemanticError(element,SemanticError.DESIGN_EXCEPTION_CANNOT_SPECIFY_PAGE_SIZE);
    }
  }
  value=validateCompatibleObject(prop,value);
  if (value instanceof Structure) {
    Structure struct=(Structure)value;
    if (struct.getContext() != null)     value=struct.copy();
  }
  value=validateValue(prop,value);
  if (value instanceof ElementRefValue && prop.getTypeCode() == IPropertyType.ELEMENT_REF_TYPE) {
    checkRecursiveElementReference(prop,(ElementRefValue)value);
    checkDataBindingReference(prop,(ElementRefValue)value);
  }
  if (element instanceof GroupElement && IGroupElementModel.GROUP_NAME_PROP.equals(prop.getName())) {
    if (!isGroupNameValidInContext((String)value))     throw new NameException(element,(String)value,NameException.DESIGN_EXCEPTION_DUPLICATE);
  }
  if (prop.isIntrinsic()) {
    setIntrinsicProperty(prop,value);
    return;
  }
  if (IDesignElementModel.REF_TEMPLATE_PARAMETER_PROP.equals(prop.getName()) && value == null) {
    clearRefTemplateParameterProp(prop,value);
    return;
  }
  if (element instanceof ContentElement) {
    if (!((ContentElement)element).isLocal()) {
      ContentElementCommand attrCmd=new ContentElementCommand(module,element,((ContentElement)element).getValueContainer());
      attrCmd.doSetProperty(prop,value);
      return;
    }
  }
  doSetProperty(prop,value);
}","/** 
 * Sets the value of a property. If the mask of a property is ""lock"", throws one exception. <p> If the mask of this property has been set to ""lock"", no value will be set. To set the value of a property, the mask value must be ""hide"" or ""change"".
 * @param prop definition of the property to set
 * @param value the new property value.
 * @throws SemanticException if the value is invalid or the property mask is ""lock"".
 */
public void setProperty(ElementPropertyDefn prop,Object value) throws SemanticException {
  checkAllowedOperation();
  if (prop.isElementType()) {
    setElementTypeProperty(prop,value);
    return;
  }
  String propName=prop.getName();
  if ((IReportItemModel.TOC_PROP.equals(propName) || IGroupElementModel.TOC_PROP.equals(propName)) && (value instanceof String)) {
    Structure oldValue=(Structure)element.getLocalProperty(module,prop);
    if (oldValue != null) {
      StructureContext ref=new StructureContext(oldValue,(PropertyDefn)oldValue.getDefn().getMember(TOC.TOC_EXPRESSION),null);
      setMember(ref,value);
      return;
    }
    value=StructureFactory.createTOC((String)value);
  }
  if (IExtendedItemModel.EXTENSION_NAME_PROP.equals(prop.getName()) && element instanceof IExtendedItemModel) {
    throw new PropertyValueException(element,IExtendedItemModel.EXTENSION_NAME_PROP,value,PropertyValueException.DESIGN_EXCEPTION_EXTENSION_SETTING_FORBIDDEN);
  }
  String mask=element.getPropertyMask(module,prop.getName());
  if (DesignChoiceConstants.PROPERTY_MASK_TYPE_LOCK.equalsIgnoreCase(mask)) {
    throw new PropertyValueException(element,prop,value,PropertyValueException.DESIGN_EXCEPTION_VALUE_LOCKED);
  }
  if (element.isVirtualElement() && element instanceof Cell) {
    propName=prop.getName();
    if (ICellModel.COL_SPAN_PROP.equalsIgnoreCase(propName) || ICellModel.ROW_SPAN_PROP.equalsIgnoreCase(propName) || ICellModel.DROP_PROP.equalsIgnoreCase(propName)|| ICellModel.COLUMN_PROP.equalsIgnoreCase(propName)) {
      throw new PropertyValueException(element,prop,value,PropertyValueException.DESIGN_EXCEPTION_PROPERTY_CHANGE_FORBIDDEN);
    }
  }
  if (element instanceof MasterPage) {
    propName=prop.getName();
    if (!((MasterPage)element).isCustomType(module) && (IMasterPageModel.WIDTH_PROP.equals(propName) || IMasterPageModel.HEIGHT_PROP.equals(propName))) {
      throw new SemanticError(element,SemanticError.DESIGN_EXCEPTION_CANNOT_SPECIFY_PAGE_SIZE);
    }
  }
  value=validateCompatibleObject(prop,value);
  if (value instanceof Structure) {
    Structure struct=(Structure)value;
    if (struct.getContext() != null)     value=struct.copy();
  }
  value=validateValue(prop,value);
  if (value instanceof ElementRefValue && prop.getTypeCode() == IPropertyType.ELEMENT_REF_TYPE) {
    checkRecursiveElementReference(prop,(ElementRefValue)value);
    checkDataBindingReference(prop,(ElementRefValue)value);
  }
  if (element instanceof GroupElement && IGroupElementModel.GROUP_NAME_PROP.equals(prop.getName())) {
    if (!isGroupNameValidInContext((String)value))     throw new NameException(element,(String)value,NameException.DESIGN_EXCEPTION_DUPLICATE);
  }
  if (prop.isIntrinsic()) {
    setIntrinsicProperty(prop,value);
    return;
  }
  if (IDesignElementModel.REF_TEMPLATE_PARAMETER_PROP.equals(prop.getName()) && value == null) {
    clearRefTemplateParameterProp(prop,null);
    return;
  }
  if (element instanceof ContentElement) {
    if (!((ContentElement)element).isLocal()) {
      ContentElementCommand attrCmd=new ContentElementCommand(module,element,((ContentElement)element).getValueContainer());
      attrCmd.doSetProperty(prop,value);
      return;
    }
  }
  doSetProperty(prop,value);
}",0.9987803225369292
69242,"/** 
 * Gets styles with default value for TOC.
 * @return list each item is <code>Style</code>
 */
public List<DesignElement> getDefaultTOCStyleValue(){
  if (isTOCStyleInitialized)   return Collections.unmodifiableList(defaultTOCStyleList);
synchronized (isTOCStyleInitialized) {
    if (!isTOCStyleInitialized) {
      initDefaultTOCStyle();
      isTOCStyleInitialized=Boolean.TRUE;
    }
  }
  return Collections.unmodifiableList(defaultTOCStyleList);
}","/** 
 * Gets styles with default value for TOC.
 * @return list each item is <code>Style</code>
 */
public List<DesignElement> getDefaultTOCStyleValue(){
  if (isTOCStyleInitialized)   return Collections.unmodifiableList(defaultTOCStyleList);
synchronized (DesignSession.class) {
    if (!isTOCStyleInitialized) {
      initDefaultTOCStyle();
      isTOCStyleInitialized=Boolean.TRUE;
    }
  }
  return Collections.unmodifiableList(defaultTOCStyleList);
}",0.9562363238512036
69243,"/** 
 * Compare two object array value.
 * @param arrayOne
 * @param arrayTwo
 * @return
 */
protected boolean equalArray(Object[] arrayOne,Object[] arrayTwo){
  if ((arrayOne == null && arrayTwo != null) || (arrayOne != null && arrayTwo == null))   return false;
  if (arrayOne == null && arrayTwo == null)   return true;
  if (arrayOne.length != arrayTwo.length)   return false;
  for (int i=0; i < arrayOne.length; ++i) {
    Object one=arrayOne[i];
    Object two=arrayTwo[i];
    if ((one != null && !one.equals(two)) || (two != null && !two.equals(one)))     return false;
  }
  return true;
}","/** 
 * Compare two object array value.
 * @param arrayOne
 * @param arrayTwo
 * @return
 */
protected boolean equalArray(Object[] arrayOne,Object[] arrayTwo){
  if (arrayOne == null && arrayTwo == null)   return true;
  if ((arrayOne == null && arrayTwo != null) || (arrayOne != null && arrayTwo == null))   return false;
  if (arrayOne.length != arrayTwo.length)   return false;
  for (int i=0; i < arrayOne.length; ++i) {
    Object one=arrayOne[i];
    Object two=arrayTwo[i];
    if ((one != null && !one.equals(two)) || (two != null && !two.equals(one)))     return false;
  }
  return true;
}",0.9015025041736228
69244,"public ModuleOption getOptions(){
  if (options != null)   return this.options;
  Module hostModule=this.host;
  while (hostModule != null) {
    ModuleOption hostOptions=hostModule.getOptions();
    if (hostOptions != null)     return hostOptions;
    if (hostModule instanceof Library)     hostModule=((Library)hostModule).host;
    return null;
  }
  return null;
}","public ModuleOption getOptions(){
  if (options != null)   return options;
  Module hostModule=host;
  while (hostModule != null) {
    ModuleOption hostOptions=hostModule.getOptions();
    if (hostOptions != null)     return hostOptions;
    if (hostModule instanceof Library)     hostModule=((Library)hostModule).host;
    break;
  }
  return null;
}",0.8833333333333333
69245,"protected DesignElement getStyleContainer(DesignElement designElement){
}","protected DesignElement getStyleContainer(DesignElement designElement){
  DesignElement tmpContainer=designElement.getContainer();
  if (tmpContainer == null || !(tmpContainer instanceof MultiViews))   return tmpContainer;
  tmpContainer=tmpContainer.getContainer();
  if (tmpContainer == null)   return null;
  return tmpContainer.getContainer();
}",0.3459715639810427
69246,"public Object validateValue(Module module,PropertyDefn defn,Object value) throws PropertyValueException {
  if (value == null)   return null;
  int trimOption=defn.getTrimOption();
  if (value instanceof Expression) {
    String expr=((Expression)value).getStringExpression();
    String tmpType=((Expression)value).getUserDefinedType();
    String trimExpr=trimString(expr,trimOption);
    if (trimExpr == null) {
      if (tmpType == null)       return null;
      return new Expression(trimExpr,tmpType);
    }
    return value;
  }
  if (value instanceof String) {
    String expr=trimString((String)value,trimOption);
    if (expr == null)     return null;
    return new Expression(expr,null);
  }
  throw new PropertyValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,EXPRESSION_TYPE);
}","public Object validateValue(Module module,PropertyDefn defn,Object value) throws PropertyValueException {
  if (value == null)   return null;
  int trimOption=defn.getTrimOption();
  if (value instanceof Expression) {
    String expr=((Expression)value).getStringExpression();
    String tmpType=((Expression)value).getUserDefinedType();
    String trimExpr=trimString(expr,trimOption);
    if (trimExpr == null) {
      if (tmpType == null)       return null;
      return new Expression(null,tmpType);
    }
    return value;
  }
  if (value instanceof String) {
    String expr=trimString((String)value,trimOption);
    if (expr == null)     return null;
    return new Expression(expr,null);
  }
  throw new PropertyValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,EXPRESSION_TYPE);
}",0.9926470588235294
69247,"protected void repeatHeader() throws BirtException {
  if (!isFirstLayout) {
    ITableContent table=(ITableContent)content;
    if (table.isHeaderRepeat()) {
      IBandContent header=table.getHeader();
      if (header != null) {
        refineBandContent((ITableBandContent)header);
        boolean pageBreak=context.allowPageBreak();
        context.setAllowPageBreak(false);
        IPageBuffer buffer=context.getPageBufferManager();
        boolean isRepeated=buffer.isRepeated();
        buffer.setRepeated(true);
        engine.layout(this,header,emitter);
        buffer.setRepeated(isRepeated);
        context.setAllowPageBreak(pageBreak);
      }
    }
  }
  isFirstLayout=false;
}","protected void repeatHeader() throws BirtException {
  if (!isFirstLayout) {
    ITableContent table=(ITableContent)content;
    if (table.isHeaderRepeat()) {
      IBandContent header=table.getHeader();
      if (header != null) {
        refineBandContent((ITableBandContent)header);
        cleanRepeatedLayoutExtension(header);
        boolean pageBreak=context.allowPageBreak();
        context.setAllowPageBreak(false);
        IPageBuffer buffer=context.getPageBufferManager();
        boolean isRepeated=buffer.isRepeated();
        buffer.setRepeated(true);
        engine.layout(this,header,emitter);
        buffer.setRepeated(isRepeated);
        context.setAllowPageBreak(pageBreak);
      }
    }
  }
  isFirstLayout=false;
}",0.9678770949720672
69248,"protected SplitResult _split(int height,boolean force) throws BirtException {
  if (children.size() == 0) {
    if (isPageBreakBeforeAvoid() && !force) {
      updateChildrenPosition();
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
 else {
      updateChildrenPosition();
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  BlockContainerArea newContainer=null;
  int status=SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL;
  int cheight=getContentHeight(height);
  ListIterator iter=children.listIterator();
  int contentHeight=0;
  ArrayList result=new ArrayList();
  ContainerArea current=null;
  ContainerArea previous=null;
  while (iter.hasNext()) {
    previous=current;
    current=(ContainerArea)iter.next();
    int ah=current.getAllocatedHeight();
    contentHeight+=ah;
    if (contentHeight <= cheight && current.finished) {
      result.add(current);
      continue;
    }
 else {
      contentHeight-=ah;
      int childSplitHeight=cheight - contentHeight;
      SplitResult splitResult=current.split(childSplitHeight,force && !isValidResult(result));
      if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        ContainerArea splitChildArea=splitResult.getResult();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        contentHeight+=splitChildArea.getAllocatedHeight();
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
        if (force) {
          if (result.size() > 0) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
          }
        }
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        if (isValidResult(result)) {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (previous.isPageBreakAfterAvoid()) {
              status=SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL;
              break;
            }
 else {
              status=SplitResult.SPLIT_SUCCEED_WITH_PART;
              break;
            }
          }
        }
 else {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (isPageBreakBeforeAvoid()) {
              return SplitResult.BEFORE_AVOID_WITH_NULL;
            }
 else {
              return SplitResult.SUCCEED_WITH_NULL;
            }
          }
        }
      }
    }
  }
  if (result.size() == children.size()) {
    status=SplitResult.SPLIT_SUCCEED_WITH_PART;
  }
  if (!force && status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
    iter.previous();
    while (iter.hasPrevious()) {
      current=(ContainerArea)iter.previous();
      int ah=current.getAllocatedHeight();
      SplitResult splitResult=current.splitLines(1);
      if (splitResult.status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
        result.remove(current);
        contentHeight-=ah;
        continue;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        result.remove(current);
        ContainerArea splitChildArea=splitResult.getResult();
        contentHeight=contentHeight - ah + splitChildArea.getAllocatedHeight();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        result.remove(current);
        int preIndex=iter.previousIndex();
        if (preIndex >= 0) {
          ContainerArea prev=(ContainerArea)children.get(preIndex);
          if (prev.isPageBreakAfterAvoid()) {
            continue;
          }
 else {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
        }
 else {
          if (isPageBreakBeforeAvoid()) {
            return SplitResult.BEFORE_AVOID_WITH_NULL;
          }
 else {
            return SplitResult.SUCCEED_WITH_NULL;
          }
        }
      }
    }
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
  }
  if (status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
    newContainer=cloneArea();
    for (int i=0; i < result.size(); i++) {
      ContainerArea child=(ContainerArea)result.get(i);
      child.setParent(newContainer);
      newContainer.addChild(child);
      children.remove(child);
    }
    newContainer.updateContentHeight(contentHeight);
  }
  if (newContainer != null) {
    addRepeatedItem();
    updateChildrenPosition();
  }
  return new SplitResult(newContainer,status);
}","protected SplitResult _split(int height,boolean force) throws BirtException {
  if (children.size() == 0) {
    if (isPageBreakBeforeAvoid() && !force) {
      updateChildrenPosition();
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
 else {
      updateChildrenPosition();
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  BlockContainerArea newContainer=null;
  int status=SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL;
  int cheight=getContentHeight(height);
  ListIterator iter=children.listIterator();
  int contentHeight=0;
  ArrayList result=new ArrayList();
  ContainerArea current=null;
  ContainerArea previous=null;
  while (iter.hasNext()) {
    previous=current;
    current=(ContainerArea)iter.next();
    int ah=current.getAllocatedHeight();
    contentHeight+=ah;
    if (contentHeight <= cheight && current.finished) {
      result.add(current);
      continue;
    }
 else {
      contentHeight-=ah;
      int childSplitHeight=cheight - contentHeight;
      SplitResult splitResult=current.split(childSplitHeight,force && !isValidResult(result));
      if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        ContainerArea splitChildArea=splitResult.getResult();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        contentHeight+=splitChildArea.getAllocatedHeight();
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
        if (force) {
          if (result.size() > 0) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
          }
        }
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        if (isValidResult(result)) {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (previous.isPageBreakAfterAvoid()) {
              status=SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL;
              break;
            }
 else {
              status=SplitResult.SPLIT_SUCCEED_WITH_PART;
              break;
            }
          }
        }
 else {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (isPageBreakBeforeAvoid()) {
              return SplitResult.BEFORE_AVOID_WITH_NULL;
            }
 else {
              return SplitResult.SUCCEED_WITH_NULL;
            }
          }
        }
      }
    }
  }
  if (result.size() == children.size()) {
    status=SplitResult.SPLIT_SUCCEED_WITH_PART;
  }
  if (!force && status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
    iter.previous();
    while (iter.hasPrevious()) {
      current=(ContainerArea)iter.previous();
      int ah=current.getAllocatedHeight();
      SplitResult splitResult=current.splitLines(1);
      if (splitResult.status == SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL) {
        result.remove(current);
        contentHeight-=ah;
        continue;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        result.remove(current);
        ContainerArea splitChildArea=splitResult.getResult();
        contentHeight=contentHeight - ah + splitChildArea.getAllocatedHeight();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        result.remove(current);
        int preIndex=iter.previousIndex();
        if (preIndex >= 0) {
          ContainerArea prev=(ContainerArea)children.get(preIndex);
          if (prev.isPageBreakAfterAvoid()) {
            continue;
          }
 else {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
        }
 else {
          if (isPageBreakBeforeAvoid()) {
            return SplitResult.BEFORE_AVOID_WITH_NULL;
          }
 else {
            return SplitResult.SUCCEED_WITH_NULL;
          }
        }
      }
    }
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
  }
  if (status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
    newContainer=getSplitArea(result,contentHeight);
  }
  if (newContainer != null) {
    addRepeatedItem();
    updateChildrenPosition();
  }
  return new SplitResult(newContainer,status);
}",0.94223786995269
69249,"public BlockTextArea cloneArea(){
  BlockTextArea newArea=new BlockTextArea(this);
  addToExtension(newArea);
  return newArea;
}","public BlockTextArea cloneArea(){
  BlockTextArea newArea=new BlockTextArea(this);
  return newArea;
}",0.8831168831168831
69250,"private void addToExtension(BlockTextArea area){
  if (context.isFixedLayout() && context.getEngineTaskType() == IEngineTask.TASK_RUN) {
    ArrayList<BlockTextArea> list=(ArrayList<BlockTextArea>)content.getExtension(IContent.LAYOUT_EXTENSION);
    if (list == null) {
      list=new ArrayList<BlockTextArea>();
      content.setExtension(IContent.LAYOUT_EXTENSION,list);
    }
    if (area.finished) {
      list.add(area);
    }
 else {
      if (list.size() > 0 && list.get(list.size() - 1).finished) {
        list.add(list.size() - 1,area);
        list.size();
      }
 else {
        list.add(area);
      }
    }
  }
}","private void addToExtension(BlockTextArea area){
  if (context.isFixedLayout() && context.getEngineTaskType() == IEngineTask.TASK_RUN) {
    ArrayList<BlockTextArea> list=(ArrayList<BlockTextArea>)content.getExtension(IContent.LAYOUT_EXTENSION);
    if (list == null) {
      list=new ArrayList<BlockTextArea>();
      content.setExtension(IContent.LAYOUT_EXTENSION,list);
    }
    if (area.finished) {
      list.add(area);
    }
 else {
      if (list.size() > 0 && list.get(list.size() - 1).finished) {
        list.add(list.size() - 1,area);
      }
 else {
        list.add(area);
      }
    }
  }
}",0.9326845093268452
69251,"public SplitResult split(int height,boolean force) throws BirtException {
  if (force) {
    InlineTextArea newArea=cloneArea();
    newArea.children.addAll(children);
    children.clear();
    this.height=0;
    replaceLine(this,newArea);
    addLineBreakToExtension(newArea);
    return new SplitResult(newArea,SplitResult.SPLIT_SUCCEED_WITH_PART);
  }
 else {
    addLineBreakToExtension();
    return SplitResult.SUCCEED_WITH_NULL;
  }
}","public SplitResult split(int height,boolean force) throws BirtException {
  if (force) {
    InlineTextArea newArea=(InlineTextArea)cloneArea();
    addLineToExtension(newArea);
    newArea.children.addAll(children);
    children.clear();
    this.height=0;
    replaceLine(this,newArea);
    addLineBreakToExtension(newArea);
    return new SplitResult(newArea,SplitResult.SPLIT_SUCCEED_WITH_PART);
  }
 else {
    addLineBreakToExtension();
    return SplitResult.SUCCEED_WITH_NULL;
  }
}",0.9258861439312568
69252,"public InlineTextArea cloneArea(){
  InlineTextArea newArea=new InlineTextArea(this);
  addLineToExtension(newArea);
  return newArea;
}","public InlineTextArea cloneArea(){
  InlineTextArea newArea=new InlineTextArea(this);
  return newArea;
}",0.8713692946058091
69253,"private void doFinish(IPath containerName,String fileName,String sourceFileName,IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(CREATING + fileName,2);
  IResource resource=ResourcesPlugin.getWorkspace().getRoot().findMember(containerName);
  IContainer container=null;
  if (resource == null || !resource.exists() || !(resource instanceof IContainer)) {
    IFolder folder=createFolderHandle(containerName);
    UIUtil.createFolder(folder,monitor);
    container=folder;
  }
 else {
    container=(IContainer)resource;
  }
  final IFile file=container.getFile(new Path(fileName));
  try {
    ModuleHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createLibraryFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference(file.getProject())) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference(file.getProject()));
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()) != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()));
    }
    if (inPredifinedTemplateFolder(sourceFileName)) {
      String description=handle.getDescription();
      if (description != null && description.trim().length() > 0) {
        handle.setDescription(Messages.getString(description));
      }
    }
    handle.saveAs(file.getLocation().toOSString());
    handle.close();
  }
 catch (  Exception e) {
  }
  container.refreshLocal(IResource.DEPTH_INFINITE,monitor);
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        IDE.openEditor(page,file,true);
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
  fireLibraryChanged(fileName);
}","private void doFinish(IPath containerName,String fileName,String sourceFileName,IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(CREATING + fileName,2);
  IResource resource=ResourcesPlugin.getWorkspace().getRoot().findMember(containerName);
  IContainer container=null;
  if (resource == null || !resource.exists() || !(resource instanceof IContainer)) {
    IFolder folder=createFolderHandle(containerName);
    UIUtil.createFolder(folder,monitor);
    container=folder;
  }
 else {
    container=(IContainer)resource;
  }
  final IFile file=container.getFile(new Path(fileName));
  try {
    ModuleHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createLibraryFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference(file.getProject())) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference(file.getProject()));
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()) != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()));
    }
    if (inPredifinedTemplateFolder(sourceFileName)) {
      String description=handle.getDescription();
      if (description != null && description.trim().length() > 0) {
        handle.setDescription(Messages.getString(description));
      }
    }
    UIUtil.addCreateBy(handle);
    handle.saveAs(file.getLocation().toOSString());
    handle.close();
  }
 catch (  Exception e) {
  }
  container.refreshLocal(IResource.DEPTH_INFINITE,monitor);
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        IDE.openEditor(page,file,true);
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
  fireLibraryChanged(fileName);
}",0.9924421350968352
69254,"/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param containerName
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath containerName,String fileName,final String sourceFileName,String cheatSheetId,boolean showCheatSheet,IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(CREATING + fileName,2);
  IResource resource=ResourcesPlugin.getWorkspace().getRoot().findMember(containerName);
  IContainer container=null;
  if (resource == null || !resource.exists() || !(resource instanceof IContainer)) {
    IFolder folder=createFolderHandle(containerName);
    UIUtil.createFolder(folder,monitor);
    container=folder;
  }
 else {
    container=(IContainer)resource;
  }
  final IFile file=container.getFile(new Path(fileName));
  final String cheatId=cheatSheetId;
  final boolean showCheat=showCheatSheet;
  try {
    ReportDesignHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference(file.getProject())) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference(file.getProject()));
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()) != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()));
    }
    if (isPredifinedTemplate(sourceFileName)) {
      handle.setDisplayName(null);
      handle.setDescription(null);
    }
    String bidiOrientation;
    if (templateChoicePage.isLTRDirection())     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
 else     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
    handle.setBidiOrientation(bidiOrientation);
    handle.saveAs(file.getLocation().toOSString());
    handle.close();
  }
 catch (  Exception e) {
  }
  file.refreshLocal(IResource.DEPTH_INFINITE,monitor);
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        IDE.openEditor(page,file,true);
        BasicNewProjectResourceWizard.updatePerspective(configElement);
        if (showCheat && !cheatId.equals(""String_Node_Str"")) {
          Object oldData=Display.getCurrent().getActiveShell().getData();
          if (oldData instanceof TrayDialog) {
            Display.getCurrent().getActiveShell().setData(null);
          }
          new OpenCheatSheetAction(cheatId).run();
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}","/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param containerName
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath containerName,String fileName,final String sourceFileName,String cheatSheetId,boolean showCheatSheet,IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(CREATING + fileName,2);
  IResource resource=ResourcesPlugin.getWorkspace().getRoot().findMember(containerName);
  IContainer container=null;
  if (resource == null || !resource.exists() || !(resource instanceof IContainer)) {
    IFolder folder=createFolderHandle(containerName);
    UIUtil.createFolder(folder,monitor);
    container=folder;
  }
 else {
    container=(IContainer)resource;
  }
  final IFile file=container.getFile(new Path(fileName));
  final String cheatId=cheatSheetId;
  final boolean showCheat=showCheatSheet;
  try {
    ReportDesignHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference(file.getProject())) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference(file.getProject()));
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()) != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()));
    }
    if (isPredifinedTemplate(sourceFileName)) {
      handle.setDisplayName(null);
      handle.setDescription(null);
    }
    String bidiOrientation;
    if (templateChoicePage.isLTRDirection())     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
 else     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
    handle.setBidiOrientation(bidiOrientation);
    UIUtil.addCreateBy(handle);
    handle.saveAs(file.getLocation().toOSString());
    handle.close();
  }
 catch (  Exception e) {
  }
  file.refreshLocal(IResource.DEPTH_INFINITE,monitor);
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        IDE.openEditor(page,file,true);
        BasicNewProjectResourceWizard.updatePerspective(configElement);
        if (showCheat && !cheatId.equals(""String_Node_Str"")) {
          Object oldData=Display.getCurrent().getActiveShell().getData();
          if (oldData instanceof TrayDialog) {
            Display.getCurrent().getActiveShell().setData(null);
          }
          new OpenCheatSheetAction(cheatId).run();
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}",0.9946737683089214
69255,"/** 
 * Set report basic settings.
 * @param model
 * @throws IOException
 */
void setReportSettings(Object model) throws IOException {
  ReportDesignHandle handle=(ReportDesignHandle)model;
  try {
    handle.setDisplayName(settingPage.getDisplayName());
    handle.setDescription(settingPage.getDescription());
    handle.setIconFile(settingPage.getPreviewImagePath());
  }
 catch (  SemanticException e) {
  }
}","/** 
 * Set report basic settings.
 * @param model
 * @throws IOException
 */
void setReportSettings(Object model) throws IOException {
  ReportDesignHandle handle=(ReportDesignHandle)model;
  try {
    handle.setDisplayName(settingPage.getDisplayName());
    handle.setDescription(settingPage.getDescription());
    handle.setIconFile(settingPage.getPreviewImagePath());
    UIUtil.addCreateBy(handle);
  }
 catch (  SemanticException e) {
  }
}",0.9627906976744186
69256,"/** 
 * Set report basic settings.
 * @param model
 * @throws IOException
 */
void setReportSettings(Object model) throws IOException {
  ReportDesignHandle handle=(ReportDesignHandle)model;
  try {
    handle.setDisplayName(settingPage.getDisplayName());
    handle.setDescription(settingPage.getDescription());
    handle.setIconFile(settingPage.getPreviewImagePath());
  }
 catch (  SemanticException e) {
  }
}","/** 
 * Set report basic settings.
 * @param model
 * @throws IOException
 */
void setReportSettings(Object model) throws IOException {
  ReportDesignHandle handle=(ReportDesignHandle)model;
  try {
    handle.setDisplayName(settingPage.getDisplayName());
    handle.setDescription(settingPage.getDescription());
    handle.setIconFile(settingPage.getPreviewImagePath());
    UIUtil.addCreateBy(handle);
  }
 catch (  SemanticException e) {
  }
}",0.9627906976744186
69257,"/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param locationPath
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath locationPath,String fileName,String sourceFileName,final String cheatSheetId,final boolean showCheatSheet,IProgressMonitor monitor){
  monitor.beginTask(CREATING + fileName,2);
  final File file=new File(locationPath.toString(),fileName);
  try {
    File container=new File(locationPath.toString());
    boolean conExists=container.exists();
    if (!conExists) {
      conExists=container.mkdirs();
    }
    if (!conExists) {
      ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      return;
    }
    ReportDesignHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference() != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference());
    }
    if (isPredifinedTemplate(sourceFileName)) {
      handle.setDisplayName(null);
      handle.setDescription(null);
    }
    String bidiOrientation;
    if (templateChoicePage.isLTRDirection())     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
 else     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
    handle.setBidiOrientation(bidiOrientation);
    handle.saveAs(file.getAbsolutePath());
    handle.close();
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        if (page == null) {
          throw new IllegalArgumentException();
        }
        page.openEditor(new ReportEditorInput(file),IReportEditorContants.DESIGN_EDITOR_ID,true);
        if (showCheatSheet && !cheatSheetId.equals(""String_Node_Str"")) {
          Display.getCurrent().getActiveShell().setData(page);
          new OpenCheatSheetAction(cheatSheetId).run();
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}","/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param locationPath
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath locationPath,String fileName,String sourceFileName,final String cheatSheetId,final boolean showCheatSheet,IProgressMonitor monitor){
  monitor.beginTask(CREATING + fileName,2);
  final File file=new File(locationPath.toString(),fileName);
  try {
    File container=new File(locationPath.toString());
    boolean conExists=container.exists();
    if (!conExists) {
      conExists=container.mkdirs();
    }
    if (!conExists) {
      ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      return;
    }
    ReportDesignHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference() != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference());
    }
    if (isPredifinedTemplate(sourceFileName)) {
      handle.setDisplayName(null);
      handle.setDescription(null);
    }
    UIUtil.addCreateBy(handle);
    String bidiOrientation;
    if (templateChoicePage.isLTRDirection())     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
 else     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
    handle.setBidiOrientation(bidiOrientation);
    handle.saveAs(file.getAbsolutePath());
    handle.close();
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        if (page == null) {
          throw new IllegalArgumentException();
        }
        page.openEditor(new ReportEditorInput(file),IReportEditorContants.DESIGN_EDITOR_ID,true);
        if (showCheatSheet && !cheatSheetId.equals(""String_Node_Str"")) {
          Display.getCurrent().getActiveShell().setData(page);
          new OpenCheatSheetAction(cheatSheetId).run();
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}",0.9941046425939573
69258,"private void doFinish(IPath locationPath,String fileName,String sourceFileName,IProgressMonitor monitor){
  monitor.beginTask(CREATING + fileName,2);
  File container=null;
  try {
    container=new File(locationPath.toString());
    if (!container.exists()) {
      container.mkdirs();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  if (container == null) {
    return;
  }
  final File file=new File(locationPath.toString(),fileName);
  try {
    ModuleHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createLibraryFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference() != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference());
    }
    if (inPredifinedTemplateFolder(sourceFileName)) {
      String description=handle.getDescription();
      if (description != null && description.trim().length() > 0) {
        handle.setDescription(Messages.getString(description));
      }
    }
    handle.saveAs(file.getAbsolutePath());
    handle.close();
  }
 catch (  Exception e) {
  }
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        page.openEditor(new ReportEditorInput(file),IReportEditorContants.LIBRARY_EDITOR_ID,true);
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
  fireLibraryChanged(fileName);
}","private void doFinish(IPath locationPath,String fileName,String sourceFileName,IProgressMonitor monitor){
  monitor.beginTask(CREATING + fileName,2);
  File container=null;
  try {
    container=new File(locationPath.toString());
    if (!container.exists()) {
      container.mkdirs();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  if (container == null) {
    return;
  }
  final File file=new File(locationPath.toString(),fileName);
  try {
    ModuleHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createLibraryFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference() != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference());
    }
    if (inPredifinedTemplateFolder(sourceFileName)) {
      String description=handle.getDescription();
      if (description != null && description.trim().length() > 0) {
        handle.setDescription(Messages.getString(description));
      }
    }
    UIUtil.addCreateBy(handle);
    handle.saveAs(file.getAbsolutePath());
    handle.close();
  }
 catch (  Exception e) {
  }
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        page.openEditor(new ReportEditorInput(file),IReportEditorContants.LIBRARY_EDITOR_ID,true);
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
  fireLibraryChanged(fileName);
}",0.9915745129015272
69259,"/** 
 * @param handle
 * @return
 */
public int getBackgroundImageHeight(DesignElementHandle handle,Dimension size,Image image){
  DimensionHandle obj=handle.getDimensionProperty(StyleHandle.BACKGROUND_SIZE_HEIGHT);
  if (obj == null || obj.getUnits() == null || obj.getUnits().length() == 0) {
    if (image == null) {
      return 0;
    }
    String str=handle.getStringProperty(StyleHandle.BACKGROUND_SIZE_WIDTH);
    if (DesignChoiceConstants.BACKGROUND_SIZE_CONTAIN.equals(str)) {
      Dimension imageSize=new Dimension(image);
      if (((double)imageSize.width / ((double)imageSize.height)) > ((double)size.width / ((double)size.height))) {
        double value=((double)imageSize.height * ((double)size.width) / ((double)imageSize.width));
        return (int)value;
      }
 else {
        return size.height;
      }
    }
 else     if (DesignChoiceConstants.BACKGROUND_SIZE_COVER.equals(str)) {
      return size.height;
    }
    return 0;
  }
  int fontSize=DEUtil.getFontSizeIntValue(getHandle());
  double py=0;
  py=DEUtil.convertToPixel(obj,fontSize);
  return (int)py;
}","/** 
 * @param handle
 * @return
 */
public int getBackgroundImageHeight(DesignElementHandle handle,Dimension size,Image image){
  DimensionHandle obj=handle.getDimensionProperty(StyleHandle.BACKGROUND_SIZE_HEIGHT);
  if (obj == null || obj.getUnits() == null || obj.getUnits().length() == 0) {
    if (image == null) {
      return 0;
    }
    String str=handle.getStringProperty(StyleHandle.BACKGROUND_SIZE_WIDTH);
    if (DesignChoiceConstants.BACKGROUND_SIZE_CONTAIN.equals(str)) {
      Dimension imageSize=new Dimension(image);
      if (((double)imageSize.width / ((double)imageSize.height)) > ((double)size.width / ((double)size.height))) {
        double value=((double)imageSize.height * ((double)size.width) / ((double)imageSize.width));
        return (int)value;
      }
 else {
        return size.height;
      }
    }
 else     if (DesignChoiceConstants.BACKGROUND_SIZE_COVER.equals(str)) {
      Dimension imageSize=new Dimension(image);
      if (((double)imageSize.width / ((double)imageSize.height)) > ((double)size.width / ((double)size.height))) {
        return size.height;
      }
 else {
        double value=((double)imageSize.height * ((double)size.width) / ((double)imageSize.width));
        return (int)value;
      }
    }
    return 0;
  }
  int fontSize=DEUtil.getFontSizeIntValue(getHandle());
  double py=0;
  py=DEUtil.convertToPixel(obj,fontSize);
  return (int)py;
}",0.8581730769230769
69260,"/** 
 * @param handle
 * @return
 */
public int getBackgroundImageWidth(DesignElementHandle handle,Dimension size,Image image){
  DimensionHandle obj=handle.getDimensionProperty(StyleHandle.BACKGROUND_SIZE_WIDTH);
  if (obj == null || obj.getUnits() == null || obj.getUnits().length() == 0) {
    if (image == null) {
      return 0;
    }
    String str=handle.getStringProperty(StyleHandle.BACKGROUND_SIZE_WIDTH);
    if (DesignChoiceConstants.BACKGROUND_SIZE_CONTAIN.equals(str)) {
      Dimension imageSize=new Dimension(image);
      if (((double)imageSize.width / ((double)imageSize.height)) > ((double)size.width / ((double)size.height))) {
        return size.width;
      }
 else {
        double value=((double)imageSize.width * ((double)size.height) / ((double)imageSize.height));
        return (int)value;
      }
    }
 else     if (DesignChoiceConstants.BACKGROUND_SIZE_COVER.equals(str)) {
      return size.width;
    }
    return 0;
  }
  int fontSize=DEUtil.getFontSizeIntValue(getHandle());
  double px=0;
  px=DEUtil.convertToPixel(obj,fontSize);
  return (int)px;
}","/** 
 * @param handle
 * @return
 */
public int getBackgroundImageWidth(DesignElementHandle handle,Dimension size,Image image){
  DimensionHandle obj=handle.getDimensionProperty(StyleHandle.BACKGROUND_SIZE_WIDTH);
  if (obj == null || obj.getUnits() == null || obj.getUnits().length() == 0) {
    if (image == null) {
      return 0;
    }
    String str=handle.getStringProperty(StyleHandle.BACKGROUND_SIZE_WIDTH);
    if (DesignChoiceConstants.BACKGROUND_SIZE_CONTAIN.equals(str)) {
      Dimension imageSize=new Dimension(image);
      if (((double)imageSize.width / ((double)imageSize.height)) > ((double)size.width / ((double)size.height))) {
        return size.width;
      }
 else {
        double value=((double)imageSize.width * ((double)size.height) / ((double)imageSize.height));
        return (int)value;
      }
    }
 else     if (DesignChoiceConstants.BACKGROUND_SIZE_COVER.equals(str)) {
      Dimension imageSize=new Dimension(image);
      if (((double)imageSize.width / ((double)imageSize.height)) > ((double)size.width / ((double)size.height))) {
        double value=((double)imageSize.width * ((double)size.height) / ((double)imageSize.height));
        return (int)value;
      }
 else {
        return size.width;
      }
    }
    return 0;
  }
  int fontSize=DEUtil.getFontSizeIntValue(getHandle());
  double px=0;
  px=DEUtil.convertToPixel(obj,fontSize);
  return (int)px;
}",0.8590927338418306
69261,"/** 
 * @param dataSet
 * @param queryDefn
 * @param useColumnHints
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSet,IQueryDefinition queryDefn,boolean useColumnHints,boolean useFilters,boolean clearCache,DataRequestSession session) throws BirtException {
  IBaseDataSetDesign dataSetDesign=session.getModelAdaptor().adaptDataSet(dataSet);
  if (clearCache) {
    IBaseDataSourceDesign dataSourceDesign=session.getModelAdaptor().adaptDataSource(dataSet.getDataSource());
    session.clearCache(dataSourceDesign,dataSetDesign);
  }
  if (!useColumnHints) {
    dataSetDesign.getResultSetHints().clear();
  }
  if (!useFilters) {
    dataSetDesign.getFilters().clear();
  }
  IQueryResults resultSet=executeQuery(session,queryDefn);
  saveResultToDataItems(dataSet,resultSet);
  return resultSet;
}","/** 
 * @param dataSet
 * @param queryDefn
 * @param useColumnHints
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSet,IQueryDefinition queryDefn,boolean useColumnHints,boolean useFilters,boolean clearCache,ExecutionContext context,DataRequestSession session) throws BirtException {
  IBaseDataSetDesign dataSetDesign=session.getModelAdaptor().adaptDataSet(dataSet);
  if (!(dataSet instanceof JointDataSetHandle) && context != null) {
    context.setReportContext(new ReportContextImpl(context));
    dataSetDesign=new ModelDteApiAdapter(context).appendRuntimeInfoToDataSet(dataSet,(BaseDataSetDesign)dataSetDesign);
  }
  if (clearCache) {
    IBaseDataSourceDesign dataSourceDesign=session.getModelAdaptor().adaptDataSource(dataSet.getDataSource());
    session.clearCache(dataSourceDesign,dataSetDesign);
  }
  if (!useColumnHints) {
    dataSetDesign.getResultSetHints().clear();
  }
  if (!useFilters) {
    dataSetDesign.getFilters().clear();
  }
  if (!(dataSet instanceof JointDataSetHandle) && context != null) {
    if (dataSet.getDataSource() != null) {
      session.defineDataSource(session.getModelAdaptor().adaptDataSource(dataSet.getDataSource()));
    }
    session.defineDataSet(dataSetDesign);
  }
  IQueryResults resultSet=executeQuery(session,queryDefn);
  saveResultToDataItems(dataSet,resultSet);
  return resultSet;
}",0.7198198198198198
69262,"/** 
 * @param session
 * @param queryDefn
 * @return
 * @throws BirtException
 */
private IQueryResults executeQuery(DataRequestSession session,IQueryDefinition queryDefn) throws BirtException {
  IQueryResults resultSet=session.executeQuery(queryDefn,null,null,null);
  return resultSet;
}","/** 
 * @param session
 * @param queryDefn
 * @return
 * @throws BirtException
 */
private IQueryResults executeQuery(DataRequestSession session,IQueryDefinition queryDefn) throws BirtException {
  IPreparedQuery preparedQuery=session.prepare(queryDefn);
  IQueryResults resultSet=(IQueryResults)session.execute(preparedQuery,null,new ScriptContext());
  return resultSet;
}",0.806015037593985
69263,"public void doSave(StreamWrapper streamsWrapper,boolean isSubQuery) throws DataException {
  if (streamsWrapper.getStreamForGroupInfo() != null) {
    this.resultSetPopulator.getGroupProcessorManager().getGroupCalculationUtil().doSave(streamsWrapper.getStreamForGroupInfo());
  }
  if (isSubQuery == false && (!((IQueryDefinition)this.resultSetPopulator.getQuery().getQueryDefinition()).isSummaryQuery()) && streamsWrapper.getStreamForResultClass() != null) {
    ((ResultClass)this.resultSetPopulator.getResultSetMetadata()).doSave(streamsWrapper.getStreamForResultClass(),resultSetPopulator.getEventHandler().getAllColumnBindings());
    try {
      streamsWrapper.getStreamForResultClass().close();
      if (streamsWrapper.getStreamForDataSet() != null) {
        this.resultSetPopulator.getCache().doSave(streamsWrapper.getStreamForDataSet(),streamsWrapper.getStreamForDataSetRowLens(),resultSetPopulator.getEventHandler().getAllColumnBindings());
      }
      streamsWrapper.getStreamForDataSet().close();
      streamsWrapper.getStreamForDataSetRowLens().close();
    }
 catch (    IOException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
  }
  if (streamsWrapper.getStreamManager().getVersion() >= VersionManager.VERSION_2_5_1_0) {
    if (!aggrHolderManager.isEmpty()) {
      aggrHolderManager.doSave(streamsWrapper.getStreamManager().getOutStream(DataEngineContext.AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),streamsWrapper.getStreamManager().getOutStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
    }
  }
}","public void doSave(StreamWrapper streamsWrapper,boolean isSubQuery) throws DataException {
  if (streamsWrapper.getStreamForGroupInfo() != null) {
    this.resultSetPopulator.getGroupProcessorManager().getGroupCalculationUtil().doSave(streamsWrapper.getStreamForGroupInfo());
  }
  if (isSubQuery == false && (!isSummaryQuery(this.resultSetPopulator.getQuery())) && streamsWrapper.getStreamForResultClass() != null) {
    ((ResultClass)this.resultSetPopulator.getResultSetMetadata()).doSave(streamsWrapper.getStreamForResultClass(),resultSetPopulator.getEventHandler().getAllColumnBindings());
    try {
      streamsWrapper.getStreamForResultClass().close();
      if (streamsWrapper.getStreamForDataSet() != null) {
        this.resultSetPopulator.getCache().doSave(streamsWrapper.getStreamForDataSet(),streamsWrapper.getStreamForDataSetRowLens(),resultSetPopulator.getEventHandler().getAllColumnBindings());
      }
      streamsWrapper.getStreamForDataSet().close();
      streamsWrapper.getStreamForDataSetRowLens().close();
    }
 catch (    IOException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
  }
  if (streamsWrapper.getStreamManager().getVersion() >= VersionManager.VERSION_2_5_1_0) {
    if (!aggrHolderManager.isEmpty()) {
      aggrHolderManager.doSave(streamsWrapper.getStreamManager().getOutStream(DataEngineContext.AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),streamsWrapper.getStreamManager().getOutStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
    }
  }
}",0.9653434152488972
69264,"public void testToUpper(){
  String script1=""String_Node_Str"" + str + ""String_Node_Str"";
  String script2=""String_Node_Str"" + null + ""String_Node_Str"";
  assertEquals(((String)cx.evaluateString(scope,script1,""String_Node_Str"",1,null)),""String_Node_Str"");
  assertEquals(((String)cx.evaluateString(scope,script2,""String_Node_Str"",1,null)),null);
}","public void testToUpper(){
  String script1=""String_Node_Str"" + str + ""String_Node_Str"";
  String script2=""String_Node_Str"" + null + ""String_Node_Str"";
  String script3=""String_Node_Str"";
  String script4=""String_Node_Str"";
  String script5=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  assertEquals(((String)cx.evaluateString(scope,script1,""String_Node_Str"",1,null)),""String_Node_Str"");
  assertEquals(((String)cx.evaluateString(scope,script2,""String_Node_Str"",1,null)),null);
  Object result1=cx.evaluateString(scope,script3,""String_Node_Str"",1,null);
  if (!(result1 instanceof Object[]))   fail(""String_Node_Str"");
  assertTrue(eqaulArray((Object[])result1,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  try {
    cx.evaluateString(scope,script4,""String_Node_Str"",1,null);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertTrue(e instanceof IllegalArgumentException);
  }
  try {
    cx.evaluateString(scope,script5,""String_Node_Str"",1,null);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertTrue(e instanceof IllegalArgumentException);
  }
}",0.4707482993197279
69265,"public void testToLower(){
  String script1=""String_Node_Str"" + str + ""String_Node_Str"";
  String script2=""String_Node_Str"" + null + ""String_Node_Str"";
  assertEquals(((String)cx.evaluateString(scope,script1,""String_Node_Str"",1,null)),""String_Node_Str"");
  assertEquals(((String)cx.evaluateString(scope,script2,""String_Node_Str"",1,null)),null);
}","public void testToLower(){
  String script1=""String_Node_Str"" + str + ""String_Node_Str"";
  String script2=""String_Node_Str"" + null + ""String_Node_Str"";
  String script3=""String_Node_Str"";
  String script4=""String_Node_Str"";
  String script5=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  assertEquals(((String)cx.evaluateString(scope,script1,""String_Node_Str"",1,null)),""String_Node_Str"");
  assertEquals(((String)cx.evaluateString(scope,script2,""String_Node_Str"",1,null)),null);
  Object result1=cx.evaluateString(scope,script3,""String_Node_Str"",1,null);
  if (!(result1 instanceof Object[]))   fail(""String_Node_Str"");
  assertTrue(eqaulArray((Object[])result1,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  try {
    cx.evaluateString(scope,script4,""String_Node_Str"",1,null);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertTrue(e instanceof IllegalArgumentException);
  }
  try {
    cx.evaluateString(scope,script5,""String_Node_Str"",1,null);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertTrue(e instanceof IllegalArgumentException);
  }
}",0.4707482993197279
69266,"/** 
 * Retrieves all distinct values of a data set column based on searchInfo and return in a Collection.
 * @param dataSet Handle of data set to query
 * @param inputParamBindings An iterator of ParamBindingHandle objects that defines bindings for the data set's input parameters
 * @param columnBindings An iterator of ComputedColumnHandle objects that define all column binding expressions
 * @param boundColumnName Name of the bound column to retrieve values for
 * @param requestInfo Information on result set retrieving(like start index,return row number...)
 * @return
 * @throws BirtException
 */
public abstract Collection getColumnValueSet(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException ;","/** 
 * Retrieves all distinct values of a data set column based on searchInfo and return in a Collection.
 * @param dataSet Handle of data set to query
 * @param inputParamBindings An iterator of ParamBindingHandle objects that defines bindings for the data set's input parameters
 * @param columnBindings An iterator of ComputedColumnHandle objects that define all column binding expressions
 * @param groupDefns An iterator of GroupHandle objects that define all group using in this report item
 * @param boundColumnName Name of the bound column to retrieve values for
 * @param requestInfo Information on result set retrieving(like start index,return row number...)
 * @return
 * @throws BirtException
 */
public abstract Collection getColumnValueSet(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,Iterator groupDefns,String boundColumnName,IRequestInfo requestInfo) throws BirtException ;",0.9277389277389276
69267,"public Collection getColumnValueSet(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  IColumnValueIterator columnValueIterator=getColumnValueIterator(dataSet,inputParamBindings,columnBindings,boundColumnName,requestInfo);
  ArrayList values=new ArrayList();
  do {
    if (columnValueIterator.getValue() != null)     values.add(columnValueIterator.getValue());
  }
 while (columnValueIterator.next());
  columnValueIterator.close();
  return values;
}","public Collection getColumnValueSet(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,Iterator groupDefns,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  IColumnValueIterator columnValueIterator=getColumnValueIterator(dataSet,inputParamBindings,columnBindings,groupDefns,boundColumnName,requestInfo);
  ArrayList values=new ArrayList();
  do {
    if (columnValueIterator.getValue() != null)     values.add(columnValueIterator.getValue());
  }
 while (columnValueIterator.next());
  columnValueIterator.close();
  return values;
}",0.9725420726306466
69268,"/** 
 * @param dataSet
 * @param inputParamBindings
 * @param columnBindings
 * @param boundColumnName
 * @param requestInfo
 * @return
 * @throws BirtException
 */
private IColumnValueIterator getColumnValueIterator(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  ArrayList temp=new ArrayList();
  while (columnBindings != null && columnBindings.hasNext()) {
    Object nextBinding=columnBindings.next();
    IBinding binding=this.modelAdaptor.adaptBinding((ComputedColumnHandle)nextBinding);
    if (binding.getAggrFunction() == null || binding.getAggregatOns() == null || binding.getAggregatOns().size() == 0)     temp.add(nextBinding);
  }
  IQueryResults queryResults=getQueryResults(dataSet,inputParamBindings,temp.iterator(),boundColumnName);
  return new ColumnValueIterator(queryResults,boundColumnName,requestInfo);
}","/** 
 * @param dataSet
 * @param inputParamBindings
 * @param columnBindings
 * @param groupDefn
 * @param boundColumnName
 * @param requestInfo
 * @return
 * @throws BirtException
 */
private IColumnValueIterator getColumnValueIterator(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,Iterator groupDefn,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  IQueryResults queryResults=getQueryResults(dataSet,inputParamBindings,columnBindings,groupDefn,boundColumnName);
  return new ColumnValueIterator(queryResults,boundColumnName,requestInfo);
}",0.5009861932938856
69269,"/** 
 * get the distinct value of query
 * @param dataSet
 * @param inputParamBindings
 * @param columnBindings
 * @param boundColumnName
 * @return
 * @throws BirtException
 */
private IQueryResults getQueryResults(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName) throws BirtException {
}","/** 
 * get the distinct value of query
 * @param dataSet
 * @param inputParamBindings
 * @param columnBindings
 * @param boundColumnName
 * @return
 * @throws BirtException
 */
private IQueryResults getQueryResults(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,Iterator groupDefns,String boundColumnName) throws BirtException {
}",0.971264367816092
69270,"/** 
 * Depending on the Computed the properties of various controls on this page are set
 */
private void setPageProperties(){
  boolean computedColumnsExist=false;
  computedColumnsExist=(computedColumns != null && computedColumns.getListValue() != null && computedColumns.getListValue().size() > 0);
  viewer.getEditButton().setEnabled(computedColumnsExist);
  viewer.getDownButton().setEnabled(computedColumnsExist && computedColumns.getListValue().size() > 1);
  viewer.getUpButton().setEnabled(computedColumnsExist && computedColumns.getListValue().size() > 1);
  viewer.getRemoveButton().setEnabled(computedColumnsExist);
  viewer.getRemoveMenuItem().setEnabled(computedColumnsExist);
  viewer.getRemoveAllMenuItem().setEnabled(computedColumnsExist);
  validateAllComputedColumns();
}","/** 
 * Depending on the Computed the properties of various controls on this page are set
 */
private void setPageProperties(){
  viewer.updateButtons();
  validateAllComputedColumns();
}",0.3721881390593047
69271,"/** 
 * Creates a DataSetParameter instance according to the given arguments
 * @param parameter
 * @param dataSetName
 * @param position
 * @return
 */
private DataSetParameter createDataSetParameter(DataSetParameterHandle parameter,String dataSetName,int position){
  DataSetParameter dataSetParameter=null;
  if (parameter instanceof OdaDataSetParameterHandle) {
    dataSetParameter=new OdaDataSetParameter();
    ((OdaDataSetParameter)dataSetParameter).setParamName(((OdaDataSetParameterHandle)parameter).getParamName());
  }
 else {
    dataSetParameter=new DataSetParameter();
  }
  dataSetParameter.setDataType(parameter.getDataType());
  dataSetParameter.setAllowNull(parameter.allowNull());
  dataSetParameter.setDefaultValue(parameter.getDefaultValue());
  dataSetParameter.setIsInput(parameter.isInput());
  dataSetParameter.setIsOutput(parameter.isOutput());
  dataSetParameter.setName(dataSetName + separator + parameter.getName());
  dataSetParameter.setIsOptional(parameter.isOptional());
  dataSetParameter.setPosition(position);
  return dataSetParameter;
}","/** 
 * Creates a DataSetParameter instance according to the given arguments
 * @param parameter
 * @param dataSetName
 * @param position
 * @return
 */
private DataSetParameter createDataSetParameter(DataSetParameterHandle parameter,String dataSetName,int position){
  DataSetParameter dataSetParameter=null;
  if (parameter instanceof OdaDataSetParameterHandle) {
    dataSetParameter=new OdaDataSetParameter();
    ((OdaDataSetParameter)dataSetParameter).setParamName(((OdaDataSetParameterHandle)parameter).getParamName());
  }
 else {
    dataSetParameter=new DataSetParameter();
  }
  dataSetParameter.setDataType(parameter.getDataType());
  dataSetParameter.setAllowNull(parameter.allowNull());
  dataSetParameter.setDefaultValue(parameter.getDefaultValue());
  dataSetParameter.setExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER,(Expression)parameter.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER).getValue());
  dataSetParameter.setIsInput(parameter.isInput());
  dataSetParameter.setIsOutput(parameter.isOutput());
  dataSetParameter.setName(dataSetName + separator + parameter.getName());
  dataSetParameter.setIsOptional(parameter.isOptional());
  dataSetParameter.setPosition(position);
  return dataSetParameter;
}",0.9247311827956988
69272,"/** 
 * Depending on the value of the parameters the properties of various controls on this page are set
 */
private void setPageProperties(){
  boolean parametersExist=false;
  parametersExist=(parameters != null && parameters.getListValue() != null && parameters.getListValue().size() > 0);
  if (viewer != null) {
    viewer.getNewButton().setEnabled(!isJointOrDerivedDataSetHandle);
    viewer.getEditButton().setEnabled(!isJointOrDerivedDataSetHandle && parametersExist);
    viewer.getRemoveButton().setEnabled(!isJointOrDerivedDataSetHandle && parametersExist);
    viewer.getUpButton().setEnabled(!isJointOrDerivedDataSetHandle && parametersExist && parameters.getListValue().size() > 1);
    viewer.getDownButton().setEnabled(!isJointOrDerivedDataSetHandle && parametersExist && parameters.getListValue().size() > 1);
    viewer.getRemoveMenuItem().setEnabled(!isJointOrDerivedDataSetHandle && parametersExist);
    viewer.getRemoveAllMenuItem().setEnabled(!isJointOrDerivedDataSetHandle && parametersExist);
  }
  if (parametersExist == false)   getContainer().setMessage(DEFAULT_MESSAGE,IMessageProvider.NONE);
}","/** 
 * Depending on the value of the parameters the properties of various controls on this page are set
 */
private void setPageProperties(){
  viewer.updateButtons();
  boolean parametersExist=(parameters != null && parameters.getListValue() != null && parameters.getListValue().size() > 0);
  if (!parametersExist)   getContainer().setMessage(DEFAULT_MESSAGE,IMessageProvider.NONE);
}",0.4781456953642384
69273,"protected void rollback(){
  DataSetParameter structure=getStructure(getStructureOrHandle());
  if (originalStructure != null) {
    structure.setName(originalStructure.getName());
    structure.setParameterDataType(originalStructure.getParameterDataType());
    structure.setIsInput(originalStructure.isInput());
    structure.setIsOutput(originalStructure.isOutput());
    structure.setDefaultValue(originalStructure.getDefaultValue());
    if (isOdaDataSetHandle)     ((OdaDataSetParameter)structure).setParamName(((OdaDataSetParameter)originalStructure).getParamName());
    originalStructure=null;
  }
 else {
    try {
      parameters.removeItem(structure);
      viewer.getViewer().refresh();
    }
 catch (    PropertyValueException e) {
      ExceptionHandler.handle(e);
    }
  }
  modelChanged=inputChanged;
}","protected void rollback(){
  DataSetParameter structure=getStructure(getStructureOrHandle());
  try {
    if (originalStructure != null) {
      structure.setName(originalStructure.getName());
      structure.setParameterDataType(originalStructure.getParameterDataType());
      structure.setIsInput(originalStructure.isInput());
      structure.setIsOutput(originalStructure.isOutput());
      structure.setDefaultValue(originalStructure.getDefaultValue());
      structure.setExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER,originalStructure.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER));
      if (isOdaDataSetHandle)       ((OdaDataSetParameter)structure).setParamName(((OdaDataSetParameter)originalStructure).getParamName());
      originalStructure=null;
    }
 else {
      parameters.removeItem(structure);
      viewer.getViewer().refresh();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  modelChanged=inputChanged;
}",0.7363737486095662
69274,"/** 
 * Create parameter page control, if the datasetHandle is ODA, add the ""linked with report parameter"" cell.
 * @param parent
 * @return
 */
private Control createParameterPageControl(Composite parent){
  viewer=new PropertyHandleTableViewer(parent,true,true,true);
  TableColumn column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(""String_Node_Str"");
  column.setResizable(false);
  column.setWidth(23);
  DataSetHandle dataSetHandle=(DataSetHandle)getContainer().getModel();
  isOdaDataSetHandle=ParameterPageUtil.isOdaDataSetHandle(dataSetHandle);
  isJointOrDerivedDataSetHandle=ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle);
  if (isOdaDataSetHandle) {
    String[] cellLabels=ParameterPageUtil.odaCellLabels;
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[0]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[1]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[2]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[3]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[4]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[5]);
    column.setWidth(180);
  }
 else {
    String[] cellLabels=ParameterPageUtil.cellLabels;
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[0]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[1]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[2]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[3]);
    column.setWidth(100);
    if (isJointOrDerivedDataSetHandle) {
      column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
      column.setText(ParameterPageUtil.odaCellLabels[5]);
      column.setWidth(180);
    }
  }
  viewer.getViewer().setContentProvider(new ParameterViewContentProvider());
  viewer.getViewer().setLabelProvider(new ParameterViewLableProvider(dataSetHandle));
  adjustParameterOnPosition(parameters);
  if (ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle)) {
    viewer.getViewer().setInput(dataSetHandle);
  }
 else {
    viewer.getViewer().setInput(parameters);
  }
  setToolTips();
  if (!isJointOrDerivedDataSetHandle) {
    addRefreshMenu();
    addListeners();
  }
  dataSetHandle.addListener(this);
  return viewer.getControl();
}","/** 
 * Create parameter page control, if the datasetHandle is ODA, add the ""linked with report parameter"" cell.
 * @param parent
 * @return
 */
private Control createParameterPageControl(Composite parent){
  DataSetHandle dataSetHandle=(DataSetHandle)getContainer().getModel();
  isOdaDataSetHandle=ParameterPageUtil.isOdaDataSetHandle(dataSetHandle);
  isJointOrDerivedDataSetHandle=ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle);
  viewer=new PropertyHandleTableViewer(parent,true,true,true,!isJointOrDerivedDataSetHandle);
  TableColumn column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(""String_Node_Str"");
  column.setResizable(false);
  column.setWidth(23);
  if (isOdaDataSetHandle) {
    String[] cellLabels=ParameterPageUtil.odaCellLabels;
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[0]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[1]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[2]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[3]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[4]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[5]);
    column.setWidth(180);
  }
 else {
    String[] cellLabels=ParameterPageUtil.cellLabels;
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[0]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[1]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[2]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[3]);
    column.setWidth(100);
    if (isJointOrDerivedDataSetHandle) {
      column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
      column.setText(ParameterPageUtil.odaCellLabels[5]);
      column.setWidth(180);
    }
  }
  viewer.getViewer().setContentProvider(new ParameterViewContentProvider());
  viewer.getViewer().setLabelProvider(new ParameterViewLableProvider(dataSetHandle));
  adjustParameterOnPosition(parameters);
  if (ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle)) {
    viewer.getViewer().setInput(dataSetHandle);
  }
 else {
    viewer.getViewer().setInput(parameters);
  }
  setToolTips();
  if (!isJointOrDerivedDataSetHandle) {
    addRefreshMenu();
    addListeners();
  }
  dataSetHandle.addListener(this);
  return viewer.getControl();
}",0.911130284728214
69275,"/** 
 */
public PropertyHandleTableViewer(Composite parent,boolean showMenus,boolean showButtons,boolean enableKeyStrokes){
  mainControl=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  mainControl.setLayout(layout);
  viewer=new TableViewer(mainControl,SWT.FULL_SELECTION | SWT.BORDER);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.grabExcessHorizontalSpace=true;
  viewer.getControl().setLayoutData(data);
  viewer.getTable().setHeaderVisible(true);
  viewer.getTable().setLinesVisible(true);
  if (showButtons) {
    localizeButtonWidth();
    createButtonComposite();
  }
  if (showMenus)   createMenuComposite();
  if (enableKeyStrokes)   enableKeyStrokes();
}","/** 
 */
public PropertyHandleTableViewer(Composite parent,boolean showMenus,boolean showButtons,boolean enableKeyStrokes,boolean editable){
  mainControl=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  mainControl.setLayout(layout);
  viewer=new TableViewer(mainControl,SWT.FULL_SELECTION | SWT.BORDER);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.grabExcessHorizontalSpace=true;
  viewer.getControl().setLayoutData(data);
  viewer.getTable().setHeaderVisible(true);
  viewer.getTable().setLinesVisible(true);
  if (showButtons) {
    localizeButtonWidth();
    createButtonComposite(editable);
  }
  if (showMenus)   createMenuComposite();
  if (enableKeyStrokes)   enableKeyStrokes();
}",0.9830278343516632
69276,"void doRemove(){
  int index=viewer.getTable().getSelectionIndex();
  PropertyHandle handle=(PropertyHandle)viewer.getInput();
  int count=(handle.getListValue() == null) ? 0 : handle.getListValue().size();
  if (index > -1 && index < count) {
    try {
      handle.removeItem(index);
    }
 catch (    PropertyValueException e1) {
      ExceptionHandler.handle(e1);
    }
    viewer.refresh();
    viewer.getTable().select(index);
  }
}","void doRemove(){
  int index=viewer.getTable().getSelectionIndex();
  PropertyHandle handle=(PropertyHandle)viewer.getInput();
  int count=(handle.getListValue() == null) ? 0 : handle.getListValue().size();
  if (index > -1 && index < count) {
    try {
      handle.removeItem(index);
    }
 catch (    PropertyValueException e1) {
      ExceptionHandler.handle(e1);
    }
    viewer.refresh();
    viewer.getTable().setFocus();
    viewer.getTable().select(index);
    updateButtons();
  }
}",0.9194414607948442
69277,"private Button createButton(Composite parent,String label,SelectionListener listener){
  Button button=new Button(parent,SWT.PUSH);
  button.setText(label);
  button.addSelectionListener(listener);
  GridData gd=new GridData();
  gd.widthHint=defaultButtonWidth;
  button.setLayoutData(gd);
  return button;
}","private Button createButton(Composite parent,String label,SelectionListener listener){
  Button button=new Button(parent,SWT.PUSH);
  button.setText(label);
  if (listener != null)   button.addSelectionListener(listener);
  GridData gd=new GridData();
  gd.widthHint=defaultButtonWidth;
  button.setLayoutData(gd);
  return button;
}",0.9626168224299064
69278,"private void createButtonComposite(){
  Composite composite=new Composite(mainControl,SWT.NONE);
  GridData gd=new GridData();
  gd.verticalIndent=-5;
  gd.verticalAlignment=SWT.BEGINNING;
  composite.setLayoutData(gd);
  composite.setLayout(new GridLayout());
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      doButtonSelected(e);
    }
  }
;
  if (buttonLabels != null) {
    buttonArray=new Button[buttonLabels.length];
    for (int i=0; i < buttonLabels.length; i++) {
      String currLabel=buttonLabels[i];
      if (currLabel != null) {
        buttonArray[i]=createButton(composite,currLabel,listener);
      }
 else {
        buttonArray[i]=null;
        createSeparator(composite);
      }
    }
  }
}","private void createButtonComposite(boolean editable){
  Composite composite=new Composite(mainControl,SWT.NONE);
  GridData gd=new GridData();
  gd.verticalIndent=-5;
  gd.verticalAlignment=SWT.BEGINNING;
  composite.setLayoutData(gd);
  composite.setLayout(new GridLayout());
  SelectionAdapter listener=null;
  if (editable)   listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      doButtonSelected(e);
    }
  }
;
  if (buttonLabels != null) {
    buttonArray=new Button[buttonLabels.length];
    for (int i=0; i < buttonLabels.length; i++) {
      String currLabel=buttonLabels[i];
      if (currLabel != null) {
        buttonArray[i]=createButton(composite,currLabel,listener);
        if (!editable)         buttonArray[i].setEnabled(editable);
      }
 else {
        buttonArray[i]=null;
        createSeparator(composite);
      }
    }
  }
}",0.9176187612748046
69279,"public void widgetSelected(SelectionEvent e){
  try {
    PropertyHandle handle=(PropertyHandle)viewer.getInput();
    handle.clearValue();
    viewer.refresh();
  }
 catch (  SemanticException e1) {
    ExceptionHandler.handle(e1);
  }
}","public void widgetSelected(SelectionEvent e){
  try {
    PropertyHandle handle=(PropertyHandle)viewer.getInput();
    handle.clearValue();
    viewer.refresh();
    updateButtons();
  }
 catch (  SemanticException e1) {
    ExceptionHandler.handle(e1);
  }
}",0.9577464788732394
69280,"private void createMenuComposite(){
  menu=new Menu(viewer.getTable());
  menu.addMenuListener(new MenuAdapter(){
    public void menuShown(    MenuEvent e){
      viewer.cancelEditing();
    }
  }
);
  itmRemove=new MenuItem(menu,SWT.NONE);
  itmRemove.setText(Messages.getString(""String_Node_Str""));
  itmRemove.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      doRemove();
    }
  }
);
  itmRemoveAll=new MenuItem(menu,SWT.NONE);
  itmRemoveAll.setText(Messages.getString(""String_Node_Str""));
  itmRemoveAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      try {
        PropertyHandle handle=(PropertyHandle)viewer.getInput();
        handle.clearValue();
        viewer.refresh();
      }
 catch (      SemanticException e1) {
        ExceptionHandler.handle(e1);
      }
    }
  }
);
  viewer.getTable().setMenu(menu);
}","private void createMenuComposite(){
  menu=new Menu(viewer.getTable());
  menu.addMenuListener(new MenuAdapter(){
    public void menuShown(    MenuEvent e){
      viewer.cancelEditing();
    }
  }
);
  itmRemove=new MenuItem(menu,SWT.NONE);
  itmRemove.setText(Messages.getString(""String_Node_Str""));
  itmRemove.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      doRemove();
    }
  }
);
  itmRemoveAll=new MenuItem(menu,SWT.NONE);
  itmRemoveAll.setText(Messages.getString(""String_Node_Str""));
  itmRemoveAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      try {
        PropertyHandle handle=(PropertyHandle)viewer.getInput();
        handle.clearValue();
        viewer.refresh();
        updateButtons();
      }
 catch (      SemanticException e1) {
        ExceptionHandler.handle(e1);
      }
    }
  }
);
  viewer.getTable().setMenu(menu);
}",0.9868351764086362
69281,"private void doUp(){
  int index=viewer.getTable().getSelectionIndex();
  PropertyHandle handle=(PropertyHandle)viewer.getInput();
  if (index > 0 && handle.getListValue() != null && index < handle.getListValue().size()) {
    viewer.cancelEditing();
    try {
      handle.moveItem(index,index - 1);
    }
 catch (    PropertyValueException e1) {
      ExceptionHandler.handle(e1);
    }
    viewer.refresh();
    viewer.getTable().select(index - 1);
  }
}","private void doUp(){
  int index=viewer.getTable().getSelectionIndex();
  PropertyHandle handle=(PropertyHandle)viewer.getInput();
  if (index > 0 && handle.getListValue() != null && index < handle.getListValue().size()) {
    viewer.cancelEditing();
    try {
      handle.moveItem(index,index - 1);
    }
 catch (    PropertyValueException e1) {
      ExceptionHandler.handle(e1);
    }
    viewer.refresh();
    viewer.getTable().setFocus();
    viewer.getTable().select(index - 1);
    updateButtons();
  }
}",0.9432404540763674
69282,"private void doDown(){
  int index=viewer.getTable().getSelectionIndex();
  PropertyHandle handle=(PropertyHandle)viewer.getInput();
  if (index > -1 && handle.getListValue() != null && index < handle.getListValue().size() - 1) {
    viewer.cancelEditing();
    try {
      handle.moveItem(index,index + 1);
    }
 catch (    PropertyValueException e1) {
      ExceptionHandler.handle(e1);
    }
    viewer.refresh();
    viewer.getTable().select(index + 1);
  }
}","private void doDown(){
  int index=viewer.getTable().getSelectionIndex();
  PropertyHandle handle=(PropertyHandle)viewer.getInput();
  if (index > -1 && handle.getListValue() != null && index < handle.getListValue().size() - 1) {
    viewer.cancelEditing();
    try {
      handle.moveItem(index,index + 1);
    }
 catch (    PropertyValueException e1) {
      ExceptionHandler.handle(e1);
    }
    viewer.refresh();
    viewer.getTable().setFocus();
    viewer.getTable().select(index + 1);
    updateButtons();
  }
}",0.9440488301119024
69283,"public void handleEvent(Event event){
  if (event.data == getDataSheet() || event.data instanceof BaseDataDefinitionComponent) {
    if (event.type == IChartDataSheet.EVENT_PREVIEW) {
      doPreview();
      updateApplyButton();
    }
 else     if (event.type == IChartDataSheet.EVENT_QUERY) {
      getCustomizeUI().refreshBottomBindingArea();
      getCustomizeUI().refreshLeftBindingArea();
      getCustomizeUI().refreshRightBindingArea();
      DataDefinitionTextManager.getInstance().refreshAll();
    }
  }
  if (event.type == IChartDataSheet.EVENT_QUERY) {
    if (ChartUIConstants.QUERY_CATEGORY.equals(event.data)) {
      getCustomizeUI().refreshBottomBindingArea();
    }
 else     if (ChartUIConstants.QUERY_OPTIONAL.equals(event.data)) {
      getCustomizeUI().refreshRightBindingArea();
    }
 else     if (ChartUIConstants.QUERY_VALUE.equals(event.data)) {
      getCustomizeUI().refreshLeftBindingArea();
    }
    DataDefinitionTextManager.getInstance().refreshAll();
  }
 else   if (event.type == SWT.Resize) {
    autoSash();
  }
}","public void handleEvent(Event event){
  if (event.data == getDataSheet() || event.data instanceof BaseDataDefinitionComponent) {
    if (event.type == IChartDataSheet.EVENT_PREVIEW) {
      if (getChartModel() instanceof ChartWithAxes) {
        checkDataTypeForChartWithAxes();
      }
      doPreview();
      updateApplyButton();
    }
 else     if (event.type == IChartDataSheet.EVENT_QUERY) {
      getCustomizeUI().refreshBottomBindingArea();
      getCustomizeUI().refreshLeftBindingArea();
      getCustomizeUI().refreshRightBindingArea();
      DataDefinitionTextManager.getInstance().refreshAll();
    }
  }
  if (event.type == IChartDataSheet.EVENT_QUERY) {
    if (ChartUIConstants.QUERY_CATEGORY.equals(event.data)) {
      getCustomizeUI().refreshBottomBindingArea();
    }
 else     if (ChartUIConstants.QUERY_OPTIONAL.equals(event.data)) {
      getCustomizeUI().refreshRightBindingArea();
    }
 else     if (ChartUIConstants.QUERY_VALUE.equals(event.data)) {
      getCustomizeUI().refreshLeftBindingArea();
    }
    DataDefinitionTextManager.getInstance().refreshAll();
  }
 else   if (event.type == SWT.Resize) {
    autoSash();
  }
}",0.953330312641595
69284,"private void declareHyperlinkStyle(){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeFont(null,null,null,null,null,""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}","private void declareHyperlinkStyle(){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeFont(null,null,null,null,null,true,""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}",0.9645868465430016
69285,"private void writeFont(String fontName,Integer size,String bold,String italic,String strikeThrough,String underline,String color){
  writer.openTag(""String_Node_Str"");
  if (isValid(fontName)) {
    writer.attribute(""String_Node_Str"",fontName);
  }
  if (size != null) {
    writer.attribute(""String_Node_Str"",size);
  }
  if (isValid(bold)) {
    writer.attribute(""String_Node_Str"",bold);
  }
  if (isValid(italic)) {
    writer.attribute(""String_Node_Str"",italic);
  }
  if (isValid(strikeThrough)) {
    writer.attribute(""String_Node_Str"",strikeThrough);
  }
  if (isValid(underline) && !""String_Node_Str"".equalsIgnoreCase(underline)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (isValid(color)) {
    writer.attribute(""String_Node_Str"",color);
  }
  writer.closeTag(""String_Node_Str"");
}","private void writeFont(String fontName,Integer size,Boolean bold,Boolean italic,Boolean strikeThrough,Boolean underline,String color){
  writer.openTag(""String_Node_Str"");
  if (isValid(fontName)) {
    writer.attribute(""String_Node_Str"",fontName);
  }
  if (size != null) {
    writer.attribute(""String_Node_Str"",size);
  }
  if (bold != null && bold) {
    writer.attribute(""String_Node_Str"",1);
  }
  if (italic != null && italic) {
    writer.attribute(""String_Node_Str"",1);
  }
  if (strikeThrough != null && strikeThrough) {
    writer.attribute(""String_Node_Str"",1);
  }
  if (underline != null && underline) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (isValid(color)) {
    writer.attribute(""String_Node_Str"",color);
  }
  writer.closeTag(""String_Node_Str"");
}",0.792803970223325
69286,"private void declareStyle(StyleEntry style,int id){
  boolean wrapText=context.getWrappingText();
  String whiteSpace=(String)style.getProperty(StyleConstant.WHITE_SPACE);
  if (CSSConstants.CSS_NOWRAP_VALUE.equals(whiteSpace)) {
    wrapText=false;
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  if (style.getName() == StyleEntry.ENTRYNAME_HYPERLINK) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (id >= StyleEngine.RESERVE_STYLE_ID) {
    String direction=(String)style.getProperty(StyleConstant.DIRECTION_PROP);
    String horizontalAlign=(String)style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=(String)style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign,direction,wrapText);
    writer.openTag(""String_Node_Str"");
    String bottomColor=(String)style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=(String)style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=(String)style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    String topColor=(String)style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=(String)style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=(String)style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    String leftColor=(String)style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=(String)style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=(String)style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    String rightColor=(String)style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=(String)style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=(String)style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    String diagonalColor=(String)style.getProperty(StyleConstant.BORDER_DIAGONAL_COLOR_PROP);
    String diagonalStyle=(String)style.getProperty(StyleConstant.BORDER_DIAGONAL_STYLE_PROP);
    String diagonalWidth=(String)style.getProperty(StyleConstant.BORDER_DIAGONAL_WIDTH_PROP);
    writeBorder(""String_Node_Str"",diagonalStyle,diagonalWidth,diagonalColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=(String)style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    Integer size=(Integer)style.getProperty(StyleConstant.FONT_SIZE_PROP);
    String fontStyle=(String)style.getProperty(StyleConstant.FONT_STYLE_PROP);
    String fontWeight=(String)style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    String strikeThrough=(String)style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    String underline=(String)style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    String color=(String)style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    String bgColor=(String)style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
    writeBackGroudColor(bgColor);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}","private void declareStyle(StyleEntry style,int id){
  boolean wrapText=context.getWrappingText();
  String whiteSpace=(String)style.getProperty(StyleConstant.WHITE_SPACE);
  if (CSSConstants.CSS_NOWRAP_VALUE.equals(whiteSpace)) {
    wrapText=false;
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  if (style.getName() == StyleEntry.ENTRYNAME_HYPERLINK) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (id >= StyleEngine.RESERVE_STYLE_ID) {
    String direction=(String)style.getProperty(StyleConstant.DIRECTION_PROP);
    String horizontalAlign=(String)style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=(String)style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign,direction,wrapText);
    writer.openTag(""String_Node_Str"");
    String bottomColor=(String)style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=(String)style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=(String)style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    String topColor=(String)style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=(String)style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=(String)style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    String leftColor=(String)style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=(String)style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=(String)style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    String rightColor=(String)style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=(String)style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=(String)style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    String diagonalColor=(String)style.getProperty(StyleConstant.BORDER_DIAGONAL_COLOR_PROP);
    String diagonalStyle=(String)style.getProperty(StyleConstant.BORDER_DIAGONAL_STYLE_PROP);
    String diagonalWidth=(String)style.getProperty(StyleConstant.BORDER_DIAGONAL_WIDTH_PROP);
    writeBorder(""String_Node_Str"",diagonalStyle,diagonalWidth,diagonalColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=(String)style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    Integer size=(Integer)style.getProperty(StyleConstant.FONT_SIZE_PROP);
    Boolean fontStyle=(Boolean)style.getProperty(StyleConstant.FONT_STYLE_PROP);
    Boolean fontWeight=(Boolean)style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    Boolean strikeThrough=(Boolean)style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    Boolean underline=(Boolean)style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    String color=(String)style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    String bgColor=(String)style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
    writeBackGroudColor(bgColor);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}",0.9848396501457726
69287,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
      if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
        ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      }
      return currentChart;
    }
 else     if (currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(BarChart.TYPE_LITERAL)|| currentChart.getType().equals(TubeChart.TYPE_LITERAL)|| currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        ((Axis)axes.get(i)).setPercent(false);
        ((Axis)axes.get(i)).setType(AxisType.DATE_TIME_LITERAL);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType()));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.DATE_TIME_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType()));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
      if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
        ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      }
      return currentChart;
    }
 else     if (currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(BarChart.TYPE_LITERAL)|| currentChart.getType().equals(TubeChart.TYPE_LITERAL)|| currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        ((Axis)axes.get(i)).setPercent(false);
        ((Axis)axes.get(i)).setType(AxisType.DATE_TIME_LITERAL);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType()));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.DATE_TIME_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType()));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  ChartUIUtil.updateDefaultAggregations(currentChart);
  return currentChart;
}",0.9958599924727136
69288,"/** 
 * Sets default aggregation functions for model
 * @param cm model
 * @since 2.5.1
 */
public static void updateDefaultAggregations(Chart cm){
  for (  SeriesDefinition vsd : getAllOrthogonalSeriesDefinitions(cm)) {
    Series vs=vsd.getDesignTimeSeries();
    if (vs instanceof StockSeries) {
      EList<Query> queries=vs.getDataDefinition();
      while (queries.size() < 4) {
        queries.add(QueryImpl.create(""String_Node_Str""));
      }
      setSeriesAggregation(queries.get(0),""String_Node_Str"");
      setSeriesAggregation(queries.get(1),""String_Node_Str"");
      setSeriesAggregation(queries.get(2),""String_Node_Str"");
      setSeriesAggregation(queries.get(3),""String_Node_Str"");
    }
  }
}","/** 
 * Sets default aggregation functions for model
 * @param cm model
 * @since 2.5.1
 */
public static void updateDefaultAggregations(Chart cm){
  for (  SeriesDefinition vsd : getAllOrthogonalSeriesDefinitions(cm)) {
    Series vs=vsd.getDesignTimeSeries();
    if (vs instanceof StockSeries) {
      EList<Query> queries=vs.getDataDefinition();
      while (queries.size() < 4) {
        queries.add(QueryImpl.create(""String_Node_Str""));
      }
      setSeriesAggregation(queries.get(0),""String_Node_Str"");
      setSeriesAggregation(queries.get(1),""String_Node_Str"");
      setSeriesAggregation(queries.get(2),""String_Node_Str"");
      setSeriesAggregation(queries.get(3),""String_Node_Str"");
    }
    if (vs instanceof GanttSeries) {
      EList<Query> queries=vs.getDataDefinition();
      while (queries.size() < 3) {
        queries.add(QueryImpl.create(""String_Node_Str""));
      }
      setSeriesAggregation(queries.get(0),""String_Node_Str"");
      setSeriesAggregation(queries.get(1),""String_Node_Str"");
    }
  }
}",0.816561242093157
69289,"public void setProperty(String name,String value) throws OdaException {
  if (name == null)   throw new NullPointerException(""String_Node_Str"");
  if (name.equals(""String_Node_Str"")) {
    if (value != null && value.length() > 0) {
      try {
        double secs=Double.parseDouble(value);
        this.callStat.setQueryTimeout((int)secs);
      }
 catch (      SQLException e) {
        logger.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
 else   if (name.equals(ConnectionProfileProperty.PROFILE_NAME_PROP_KEY) || name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PROP_KEY) || name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PATH_PROP_KEY)) {
  }
 else {
    OdaException e=new OdaException(""String_Node_Str"" + name);
    logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
}","public void setProperty(String name,String value) throws OdaException {
  if (name == null)   throw new NullPointerException(""String_Node_Str"");
  if (name.equals(""String_Node_Str"")) {
    if (value != null && value.length() > 0) {
      try {
        double secs=Double.parseDouble(value);
        this.callStat.setQueryTimeout((int)secs);
      }
 catch (      SQLException e) {
        logger.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (value != null && value.length() > 0) {
      try {
        double fetchSize=Double.parseDouble(value);
        this.callStat.setFetchSize((int)fetchSize);
      }
 catch (      SQLException e) {
        logger.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
 else   if (name.equals(ConnectionProfileProperty.PROFILE_NAME_PROP_KEY) || name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PROP_KEY) || name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PATH_PROP_KEY)) {
  }
 else {
    OdaException e=new OdaException(""String_Node_Str"" + name);
    logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
  }
}",0.8393030009680542
69290,"public void setProperty(String name,String value) throws OdaException {
  if (name == null)   throw new NullPointerException(""String_Node_Str"");
  if (name.equals(""String_Node_Str"")) {
    if (value != null && value.length() > 0) {
      try {
        double secs=Double.parseDouble(value);
        this.preStat.setQueryTimeout((int)secs);
      }
 catch (      SQLException e) {
        logger.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (value != null && value.length() > 0) {
      try {
        double rows=Double.parseDouble(value);
        this.preStat.setFetchSize((int)rows);
      }
 catch (      SQLException e) {
        logger.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
 else   if (name.equals(ConnectionProfileProperty.PROFILE_NAME_PROP_KEY) || name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PROP_KEY) || name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PATH_PROP_KEY)) {
  }
 else {
    OdaException e=new OdaException(""String_Node_Str"" + name);
    addLog(""String_Node_Str"",e);
    throw e;
  }
}","public void setProperty(String name,String value) throws OdaException {
  if (name == null)   throw new NullPointerException(""String_Node_Str"");
  if (name.equals(""String_Node_Str"")) {
    if (value != null && value.length() > 0) {
      try {
        double secs=Double.parseDouble(value);
        this.preStat.setQueryTimeout((int)secs);
      }
 catch (      SQLException e) {
        logger.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (value != null && value.length() > 0) {
      try {
        double rows=Double.parseDouble(value);
        this.preStat.setFetchSize((int)rows);
      }
 catch (      SQLException e) {
        logger.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
 else   if (name.equals(ConnectionProfileProperty.PROFILE_NAME_PROP_KEY) || name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PROP_KEY) || name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PATH_PROP_KEY)) {
  }
 else {
    OdaException e=new OdaException(""String_Node_Str"" + name);
    logger.logp(java.util.logging.Level.WARNING,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
  }
}",0.9385425812115892
69291,"/** 
 * Test case: <br> To read a design file, uses adapter to create a data source design. Checks values of the created data source design.
 * @throws Exception
 */
public void testROMDataSetToODADataSet() throws Exception {
  openDesign(INPUT_FILE);
  OdaDataSetHandle setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  DataSetDesign setDesign=new ModelOdaAdapter().createDataSetDesign(setHandle);
  assertEquals(""String_Node_Str"",setDesign.getName());
  assertEquals(DATA_SET_EXTENSIONID,setDesign.getOdaExtensionDataSetId());
  assertEquals(""String_Node_Str"",setDesign.getDisplayName());
  Properties props=setDesign.getPublicProperties();
  assertEquals(1,props.getProperties().size());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  props=setDesign.getPrivateProperties();
  assertEquals(1,props.getProperties().size());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  DataSetParameters params=setDesign.getParameters();
  ParameterDefinition paramDefn=(ParameterDefinition)params.getParameterDefinitions().get(0);
  DataElementAttributes dataAttrs=paramDefn.getAttributes();
  assertEquals(ElementNullability.NULLABLE,dataAttrs.getNullability().getValue());
  assertEquals(1,dataAttrs.getPosition());
  assertEquals(0,dataAttrs.getNativeDataTypeCode());
  assertEquals(ParameterMode.IN,paramDefn.getInOutMode().getValue());
  InputParameterAttributes inParamAttrs=paramDefn.getInputAttributes();
  InputElementAttributes inElementAttrs=inParamAttrs.getElementAttributes();
  assertTrue(inElementAttrs.isOptional());
  assertEquals(""String_Node_Str"",inElementAttrs.getDefaultScalarValue());
  assertNull(setDesign.getResultSets());
  assertEquals(0,dataAttrs.getNativeDataTypeCode());
  assertEquals(""String_Node_Str"",setDesign.getPrimaryResultSetName());
  assertEquals(""String_Node_Str"",setDesign.getQueryText());
  DataSourceDesign sourceDesign=setDesign.getDataSourceDesign();
  assertNotNull(sourceDesign);
  assertEquals(""String_Node_Str"",sourceDesign.getName());
  assertEquals(DATA_SOURCE_EXTENSIONID,sourceDesign.getOdaExtensionId());
  assertEquals(""String_Node_Str"",sourceDesign.getDisplayName());
  props=sourceDesign.getPublicProperties();
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertNull(props.findProperty(""String_Node_Str"").getValue());
  assertNull(props.findProperty(""String_Node_Str"").getValue());
  props=sourceDesign.getPrivateProperties();
  assertEquals(2,props.getProperties().size());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
}","/** 
 * Test case: <br> To read a design file, uses adapter to create a data source design. Checks values of the created data source design.
 * @throws Exception
 */
public void testROMDataSetToODADataSet() throws Exception {
  openDesign(INPUT_FILE);
  OdaDataSetHandle setHandle=(OdaDataSetHandle)designHandle.findDataSet(""String_Node_Str"");
  DataSetDesign setDesign=new ModelOdaAdapter().createDataSetDesign(setHandle);
  assertEquals(""String_Node_Str"",setDesign.getName());
  assertEquals(DATA_SET_EXTENSIONID,setDesign.getOdaExtensionDataSetId());
  assertEquals(""String_Node_Str"",setDesign.getDisplayName());
  Properties props=setDesign.getPublicProperties();
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  props=setDesign.getPrivateProperties();
  assertEquals(1,props.getProperties().size());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  DataSetParameters params=setDesign.getParameters();
  ParameterDefinition paramDefn=(ParameterDefinition)params.getParameterDefinitions().get(0);
  DataElementAttributes dataAttrs=paramDefn.getAttributes();
  assertEquals(ElementNullability.NULLABLE,dataAttrs.getNullability().getValue());
  assertEquals(1,dataAttrs.getPosition());
  assertEquals(0,dataAttrs.getNativeDataTypeCode());
  assertEquals(ParameterMode.IN,paramDefn.getInOutMode().getValue());
  InputParameterAttributes inParamAttrs=paramDefn.getInputAttributes();
  InputElementAttributes inElementAttrs=inParamAttrs.getElementAttributes();
  assertTrue(inElementAttrs.isOptional());
  assertEquals(""String_Node_Str"",inElementAttrs.getDefaultScalarValue());
  assertNull(setDesign.getResultSets());
  assertEquals(0,dataAttrs.getNativeDataTypeCode());
  assertEquals(""String_Node_Str"",setDesign.getPrimaryResultSetName());
  assertEquals(""String_Node_Str"",setDesign.getQueryText());
  DataSourceDesign sourceDesign=setDesign.getDataSourceDesign();
  assertNotNull(sourceDesign);
  assertEquals(""String_Node_Str"",sourceDesign.getName());
  assertEquals(DATA_SOURCE_EXTENSIONID,sourceDesign.getOdaExtensionId());
  assertEquals(""String_Node_Str"",sourceDesign.getDisplayName());
  props=sourceDesign.getPublicProperties();
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertNull(props.findProperty(""String_Node_Str"").getValue());
  assertNull(props.findProperty(""String_Node_Str"").getValue());
  props=sourceDesign.getPrivateProperties();
  assertEquals(2,props.getProperties().size());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
  assertEquals(""String_Node_Str"",props.findProperty(""String_Node_Str"").getValue());
}",0.9914101646385112
69292,"/** 
 * Returns a delegate of filter handle provider, it wraps actual filter provider for chart consuming data set, cube set, including sharing query, grand total view cases.
 * @return
 */
private AbstractFilterHandleProvider getFilterProviderDelegate(){
  AbstractFilterHandleProvider provider=ChartFilterProviderDelegate.createFilterProvider(input,null);
  return new ChartFilterProviderDelegate(provider);
}","/** 
 * Returns a delegate of filter handle provider, it wraps actual filter provider for chart consuming data set, cube set, including sharing query, grand total view cases.
 * @return
 */
private AbstractFilterHandleProvider getFilterProviderDelegate(){
  AbstractFilterHandleProvider provider=ChartFilterProviderDelegate.createFilterProvider(input,null);
  return provider;
}",0.9378960709759188
69293,"public BlankData(SheetData data){
  super(data);
  this.data=data;
}","public BlankData(){
}",0.4719101123595505
69294,"private void writeText(int type,Object value,StyleEntry style){
  String txt=ExcelUtil.format(value,type);
  writer.openTag(""String_Node_Str"");
  if (type == SheetData.NUMBER) {
    if (ExcelUtil.isNaN(value) || ExcelUtil.isBigNumber(value) || ExcelUtil.isInfinity(value)) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (type == SheetData.DATE) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (style != null) {
    if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(style.getProperty(StyleConstant.TEXT_TRANSFORM))) {
      txt=capitalize(txt);
    }
 else     if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(style.getProperty(StyleConstant.TEXT_TRANSFORM))) {
      txt=txt.toUpperCase();
    }
 else     if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(style.getProperty(StyleConstant.TEXT_TRANSFORM))) {
      txt=txt.toLowerCase();
    }
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}","private void writeText(int type,Object value,StyleEntry style){
  String txt=ExcelUtil.format(value,type);
  writer.openTag(""String_Node_Str"");
  if (type == SheetData.NUMBER) {
    if (ExcelUtil.isNaN(value) || ExcelUtil.isBigNumber(value) || ExcelUtil.isInfinity(value)) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (type == SheetData.DATE) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (style != null) {
    String textTransform=(String)style.getProperty(StyleConstant.TEXT_TRANSFORM);
    if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(textTransform)) {
      txt=capitalize(txt);
    }
 else     if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(textTransform)) {
      txt=txt.toUpperCase();
    }
 else     if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(textTransform)) {
      txt=txt.toLowerCase();
    }
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}",0.7973094170403587
69295,"private void writeFont(String fontName,String size,String bold,String italic,String strikeThrough,String underline,String color){
  writer.openTag(""String_Node_Str"");
  if (isValid(fontName)) {
    writer.attribute(""String_Node_Str"",fontName);
  }
  if (isValid(size)) {
    writer.attribute(""String_Node_Str"",size);
  }
  if (isValid(bold)) {
    writer.attribute(""String_Node_Str"",bold);
  }
  if (isValid(italic)) {
    writer.attribute(""String_Node_Str"",italic);
  }
  if (isValid(strikeThrough)) {
    writer.attribute(""String_Node_Str"",strikeThrough);
  }
  if (isValid(underline) && !""String_Node_Str"".equalsIgnoreCase(underline)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (isValid(color)) {
    writer.attribute(""String_Node_Str"",color);
  }
  writer.closeTag(""String_Node_Str"");
}","private void writeFont(String fontName,Integer size,String bold,String italic,String strikeThrough,String underline,String color){
  writer.openTag(""String_Node_Str"");
  if (isValid(fontName)) {
    writer.attribute(""String_Node_Str"",fontName);
  }
  if (size != null) {
    writer.attribute(""String_Node_Str"",size);
  }
  if (isValid(bold)) {
    writer.attribute(""String_Node_Str"",bold);
  }
  if (isValid(italic)) {
    writer.attribute(""String_Node_Str"",italic);
  }
  if (isValid(strikeThrough)) {
    writer.attribute(""String_Node_Str"",strikeThrough);
  }
  if (isValid(underline) && !""String_Node_Str"".equalsIgnoreCase(underline)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (isValid(color)) {
    writer.attribute(""String_Node_Str"",color);
  }
  writer.closeTag(""String_Node_Str"");
}",0.981640146878825
69296,"private void writeDataFormat(StyleEntry style){
  String typeString=style.getProperty(StyleConstant.DATA_TYPE_PROP);
  if (typeString == null)   return;
  int type=Integer.parseInt(typeString);
  if (type == SheetData.DATE && style.getProperty(StyleConstant.DATE_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.DATE_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
  if (type == Data.NUMBER && style.getProperty(StyleConstant.NUMBER_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    String numberStyle=style.getProperty(StyleConstant.NUMBER_FORMAT_PROP);
    writer.attribute(""String_Node_Str"",numberStyle);
    writer.closeTag(""String_Node_Str"");
  }
}","private void writeDataFormat(StyleEntry style){
  String typeString=(String)style.getProperty(StyleConstant.DATA_TYPE_PROP);
  if (typeString == null)   return;
  int type=Integer.parseInt(typeString);
  if (type == SheetData.DATE && style.getProperty(StyleConstant.DATE_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.DATE_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
  if (type == Data.NUMBER && style.getProperty(StyleConstant.NUMBER_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    String numberStyle=(String)style.getProperty(StyleConstant.NUMBER_FORMAT_PROP);
    writer.attribute(""String_Node_Str"",numberStyle);
    writer.closeTag(""String_Node_Str"");
  }
}",0.9896640826873384
69297,"private void declareStyle(StyleEntry style,int id){
  boolean wrapText=context.getWrappingText();
  String whiteSpace=style.getProperty(StyleConstant.WHITE_SPACE);
  if (CSSConstants.CSS_NOWRAP_VALUE.equals(whiteSpace)) {
    wrapText=false;
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  if (style.getName() == StyleEntry.ENTRYNAME_HYPERLINK) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (id >= StyleEngine.RESERVE_STYLE_ID) {
    String direction=style.getProperty(StyleConstant.DIRECTION_PROP);
    String horizontalAlign=style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign,direction,wrapText);
    writer.openTag(""String_Node_Str"");
    String bottomColor=style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    String topColor=style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    String leftColor=style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    String rightColor=style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    String diagonalColor=style.getProperty(StyleConstant.BORDER_DIAGONAL_COLOR_PROP);
    String diagonalStyle=style.getProperty(StyleConstant.BORDER_DIAGONAL_STYLE_PROP);
    String diagonalWidth=style.getProperty(StyleConstant.BORDER_DIAGONAL_WIDTH_PROP);
    writeBorder(""String_Node_Str"",diagonalStyle,diagonalWidth,diagonalColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    String size=style.getProperty(StyleConstant.FONT_SIZE_PROP);
    String fontStyle=style.getProperty(StyleConstant.FONT_STYLE_PROP);
    String fontWeight=style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    String strikeThrough=style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    String underline=style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    String color=style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    String bgColor=style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
    writeBackGroudColor(bgColor);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}","private void declareStyle(StyleEntry style,int id){
  boolean wrapText=context.getWrappingText();
  String whiteSpace=(String)style.getProperty(StyleConstant.WHITE_SPACE);
  if (CSSConstants.CSS_NOWRAP_VALUE.equals(whiteSpace)) {
    wrapText=false;
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  if (style.getName() == StyleEntry.ENTRYNAME_HYPERLINK) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (id >= StyleEngine.RESERVE_STYLE_ID) {
    String direction=(String)style.getProperty(StyleConstant.DIRECTION_PROP);
    String horizontalAlign=(String)style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=(String)style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign,direction,wrapText);
    writer.openTag(""String_Node_Str"");
    String bottomColor=(String)style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=(String)style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=(String)style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    String topColor=(String)style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=(String)style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=(String)style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    String leftColor=(String)style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=(String)style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=(String)style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    String rightColor=(String)style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=(String)style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=(String)style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    String diagonalColor=(String)style.getProperty(StyleConstant.BORDER_DIAGONAL_COLOR_PROP);
    String diagonalStyle=(String)style.getProperty(StyleConstant.BORDER_DIAGONAL_STYLE_PROP);
    String diagonalWidth=(String)style.getProperty(StyleConstant.BORDER_DIAGONAL_WIDTH_PROP);
    writeBorder(""String_Node_Str"",diagonalStyle,diagonalWidth,diagonalColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=(String)style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    Integer size=(Integer)style.getProperty(StyleConstant.FONT_SIZE_PROP);
    String fontStyle=(String)style.getProperty(StyleConstant.FONT_STYLE_PROP);
    String fontWeight=(String)style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    String strikeThrough=(String)style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    String underline=(String)style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    String color=(String)style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    String bgColor=(String)style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
    writeBackGroudColor(bgColor);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}",0.965330117576123
69298,"public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontWeight(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getTextLineThrough(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getTextUnderline(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign(),style.getDirection()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  entry.setProperty(StyleConstant.DIRECTION_PROP,style.getDirection());
  entry.setProperty(StyleConstant.WHITE_SPACE,style.getWhiteSpace());
  return entry;
}","public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,""String_Node_Str"".equalsIgnoreCase(style.getFontStyle()));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,""String_Node_Str"".equalsIgnoreCase(style.getFontWeight()));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,""String_Node_Str"".equalsIgnoreCase(style.getTextLineThrough()));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,""String_Node_Str"".equalsIgnoreCase(style.getTextUnderline()));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign(),style.getDirection()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  entry.setProperty(StyleConstant.DIRECTION_PROP,style.getDirection());
  entry.setProperty(StyleConstant.WHITE_SPACE,style.getWhiteSpace());
  return entry;
}",0.911818181818182
69299,"public static StyleEntry createEmptyStyleEntry(){
  StyleEntry entry=new StyleEntry();
  for (int i=0; i < StyleEntry.COUNT; i++) {
    entry.setProperty(i,StyleEntry.NULL);
  }
  return entry;
}","public static StyleEntry createEmptyStyleEntry(){
  StyleEntry entry=new StyleEntry();
  return entry;
}",0.6956521739130435
69300,"public static String convertFontSize(String size){
  String fsize=StyleConstant.NULL;
  try {
    fsize=Float.toString(Math.round(Float.parseFloat(size) / 1000));
  }
 catch (  NumberFormatException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  return fsize;
}","public static Integer convertFontSize(String size){
  Integer fsize=null;
  try {
    fsize=Math.round(Float.parseFloat(size) / 1000);
  }
 catch (  NumberFormatException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  return fsize;
}",0.7915057915057915
69301,"public void applyContainerBottomStyle(XlsContainer container){
  ContainerSizeInfo rule=container.getSizeInfo();
  StyleEntry entry=container.getStyle();
  int start=rule.getStartCoordinate();
  int col=engine.getAxis().getColumnIndexByCoordinate(start);
  int span=engine.getAxis().getColumnIndexByCoordinate(rule.getEndCoordinate());
  for (int i=col; i < span; i++) {
    SheetData data=engine.getColumnLastData(i);
    if (data == null) {
      continue;
    }
    StyleBuilder.applyBottomBorder(entry,data.style);
  }
}","public void applyContainerBottomStyle(XlsContainer container){
  ContainerSizeInfo rule=container.getSizeInfo();
  StyleEntry entry=container.getStyle();
  int start=rule.getStartCoordinate();
  int col=engine.getAxis().getColumnIndexByCoordinate(start);
  int span=engine.getAxis().getColumnIndexByCoordinate(rule.getEndCoordinate());
  for (int i=col; i < span; i++) {
    SheetData data=engine.getColumnLastData(i);
    if (data == null) {
      continue;
    }
    if (data.style != null) {
      StyleBuilder.applyBottomBorder(entry,data.style);
    }
  }
}",0.9650092081031308
69302,"public String getProperty(int id){
  return props[id];
}","public Object getProperty(int id){
  return props[id];
}",0.9107142857142856
69303,"public int hashCode(){
  int code=0;
  for (int i=0; i < StyleConstant.COUNT; i++) {
    String value=props[i] == null ? NULL : props[i];
    code+=value.hashCode() * 2 + 1;
    if (Integer.MAX_VALUE == code) {
      break;
    }
  }
  return code;
}","public int hashCode(){
  int code=0;
  for (int i=0; i < StyleConstant.COUNT; i++) {
    int hashCode=props[i] == null ? 0 : props[i].hashCode();
    code+=hashCode * 2 + 1;
    if (Integer.MAX_VALUE == code) {
      break;
    }
  }
  return code;
}",0.78
69304,"public void setProperty(int id,String value){
  props[id]=value;
}","public void setProperty(int id,Object value){
  props[id]=value;
}",0.9242424242424242
69305,"public static boolean isNull(String value){
  return value == null ? true : StyleConstant.NULL.equalsIgnoreCase(value);
}","public static boolean isNull(Object value){
  if (value == null)   return true;
  if (value instanceof String)   return StyleConstant.NULL.equalsIgnoreCase((String)value);
  return false;
}",0.6967741935483871
69306,"public StyleEntry(){
  props=new String[StyleConstant.COUNT];
}","public StyleEntry(){
  props=new Object[StyleConstant.COUNT];
}",0.9206349206349206
69307,"private void updataRowIndex(SheetData data,XlsContainer container){
  int rowIndex=container.getRowIndex() + 1;
  data.setRowIndex(rowIndex);
  container.setRowIndex(rowIndex);
}","protected void updataRowIndex(SheetData data,XlsContainer container){
  int rowIndex=container.getRowIndex() + 1;
  data.setRowIndex(rowIndex);
  container.setRowIndex(rowIndex);
}",0.9776536312849162
69308,"private void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getSizeInfo().getStartCoordinate());
  if (col == -1 || col >= cache.getColumnCount())   return;
  int span=axis.getColumnIndexByCoordinate(data.getSizeInfo().getEndCoordinate()) - col;
  applyTopBorderStyle(data);
  outputDataIfBufferIsFull();
  updataRowIndex(data,container);
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(data);
    addDatatoCache(i,blankData);
  }
  if (container instanceof XlsCell) {
    XlsCell cell=(XlsCell)container;
    data.setRowSpanInDesign(cell.getRowSpan() - 1);
  }
  lastData=data;
}","protected void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getSizeInfo().getStartCoordinate());
  if (col == -1 || col >= cache.getColumnCount())   return;
  int span=axis.getColumnIndexByCoordinate(data.getSizeInfo().getEndCoordinate()) - col;
  applyTopBorderStyle(data);
  outputDataIfBufferIsFull();
  updataRowIndex(data,container);
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(data);
    addDatatoCache(i,blankData);
  }
  if (container instanceof XlsCell) {
    XlsCell cell=(XlsCell)container;
    data.setRowSpanInDesign(cell.getRowSpan() - 1);
  }
  lastData=data;
}",0.9919571045576407
69309,"public static void applyBottomBorder(StyleEntry cEntry,StyleEntry entry){
  overwriteProp(cEntry,entry,StyleConstant.BORDER_BOTTOM_COLOR_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_BOTTOM_STYLE_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
}","public static void applyBottomBorder(StyleEntry cEntry,StyleEntry entry){
  if (entry == null) {
    return;
  }
  overwriteProp(cEntry,entry,StyleConstant.BORDER_BOTTOM_COLOR_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_BOTTOM_STYLE_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
}",0.9359605911330048
69310,"public static void applyRightBorder(StyleEntry cEntry,StyleEntry entry){
  overwriteProp(cEntry,entry,StyleConstant.BORDER_RIGHT_COLOR_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_RIGHT_STYLE_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_RIGHT_WIDTH_PROP);
}","public static void applyRightBorder(StyleEntry cEntry,StyleEntry entry){
  if (entry == null) {
    return;
  }
  overwriteProp(cEntry,entry,StyleConstant.BORDER_RIGHT_COLOR_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_RIGHT_STYLE_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_RIGHT_WIDTH_PROP);
}",0.9351081530782028
69311,"public static void applyLeftBorder(StyleEntry cEntry,StyleEntry entry){
  overwriteProp(cEntry,entry,StyleConstant.BORDER_LEFT_COLOR_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_LEFT_STYLE_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_LEFT_WIDTH_PROP);
}","public static void applyLeftBorder(StyleEntry cEntry,StyleEntry entry){
  if (entry == null) {
    return;
  }
  overwriteProp(cEntry,entry,StyleConstant.BORDER_LEFT_COLOR_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_LEFT_STYLE_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_LEFT_WIDTH_PROP);
}",0.9342327150084316
69312,"public static void applyTopBorder(StyleEntry cEntry,StyleEntry entry){
  overwriteProp(cEntry,entry,StyleConstant.BORDER_TOP_COLOR_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_TOP_STYLE_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_TOP_WIDTH_PROP);
}","public static void applyTopBorder(StyleEntry cEntry,StyleEntry entry){
  if (entry == null) {
    return;
  }
  overwriteProp(cEntry,entry,StyleConstant.BORDER_TOP_COLOR_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_TOP_STYLE_PROP);
  overwriteProp(cEntry,entry,StyleConstant.BORDER_TOP_WIDTH_PROP);
}",0.9333333333333332
69313,"private SheetData createImageData(IImageContent image,StyleEntry entry,XlsContainer container){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Integer.toString(type));
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    return createData(altText,entry);
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    byte[] data=imageInfo.getData();
    if (data != null) {
      return new ImageData(image,entry,type,imageInfo,container);
    }
 else {
      return createData(image.getAltText(),entry);
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    return createData(image.getAltText(),entry);
  }
}","private SheetData createImageData(IImageContent image,StyleEntry entry,XlsContainer container){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Integer.toString(type));
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    return createData(altText,entry);
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    byte[] data=imageInfo.getData();
    if (data != null) {
      return createData(image,entry,container,type,imageInfo);
    }
 else {
      return createData(image.getAltText(),entry);
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    return createData(image.getAltText(),entry);
  }
}",0.98334174659263
69314,"private String getJSMethodName(TriggerCondition tc,ShapedAction sa){
  return ""String_Node_Str"" + Math.abs(generateUniqueJSKey(sa.getActionForCondition(tc)).hashCode());
}","private String getJSMethodName(TriggerCondition tc,ShapedAction sa){
  int hashCode=generateUniqueJSKey(sa.getActionForCondition(tc)).hashCode();
  if (hashCode != Integer.MIN_VALUE) {
    return ""String_Node_Str"" + Math.abs(hashCode);
  }
 else {
    return ""String_Node_Str"" + Integer.MAX_VALUE;
  }
}",0.5654008438818565
69315,"public boolean equals(Object object){
  if (object == null)   return false;
  GradientPaint gp=(GradientPaint)object;
  return (gp.getColor1().equals(getColor1()) && gp.getColor2().equals(getColor2()) && (gp.isCyclic() == gp.isCyclic())&& gp.getPoint1().equals(getPoint1())&& gp.getPoint2().equals(getPoint2()));
}","public boolean equals(Object object){
  if (object == null)   return false;
  if (object instanceof GradientPaint) {
    GradientPaint gp=(GradientPaint)object;
    return (gp.getColor1().equals(getColor1()) && gp.getColor2().equals(getColor2()) && (gp.isCyclic() == gp.isCyclic())&& gp.getPoint1().equals(getPoint1())&& gp.getPoint2().equals(getPoint2()));
  }
 else {
    return false;
  }
}",0.8741159830268741
69316,"/** 
 * Set SVG attributes for multiple URL values.
 * @param muv
 * @param elm
 * @param src
 * @param scriptEvent
 * @param bDblClick
 */
private void setMultiURLValuesAttributes(MultiURLValues muv,Element elm,StructureSource src,String scriptEvent,boolean bDblClick){
  List<URLValue> validURLValues=MultiURLValuesScriptGenerator.getValidURLValues(muv);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + validURLValues.size() + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  for (  URLValue uv : validURLValues) {
    sb.append(""String_Node_Str"");
    String url=uv.getBaseUrl();
    if (!(url.startsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str""))) {
      url=""String_Node_Str"" + url + ""String_Node_Str"";
    }
    String text=uv.getLabel().getCaption().getValue();
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"" + text + ""String_Node_Str"");
    sb.append(""String_Node_Str"" + url + ""String_Node_Str"");
    sb.append(""String_Node_Str"" + uv.getTarget() + ""String_Node_Str"");
    if (uv.getTooltip() != null)     sb.append(""String_Node_Str"" + uv.getTooltip() + ""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  EMap<String,String> stylesMap=muv.getPropertiesMap();
  String menuStyle=CSSHelper.getStylingHyphenFormat(stylesMap.get(MenuStylesKeyType.MENU.getName()));
  String textStyle=CSSHelper.getStylingHyphenFormat(stylesMap.get(MenuStylesKeyType.MENU_ITEM.getName()));
  String onmouseoverStyle=CSSHelper.getStylingHyphenFormat(stylesMap.get(MenuStylesKeyType.ON_MOUSE_OVER.getName()));
  String onmouseoutStyle=CSSHelper.getStylingHyphenFormat(stylesMap.get(MenuStylesKeyType.ON_MOUSE_OUT.getName()));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + menuStyle + ""String_Node_Str"").append(""String_Node_Str"" + textStyle + ""String_Node_Str"").append(""String_Node_Str"" + onmouseoverStyle + ""String_Node_Str"").append(""String_Node_Str"" + onmouseoutStyle + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  String script=sb.toString();
  StringBuffer callbackFunction=new StringBuffer(""String_Node_Str"");
  callbackFunction.append(Math.abs(script.hashCode()));
  callbackFunction.append(""String_Node_Str"");
  callbackFunction.append(src.getSource().hashCode());
  if (StructureType.SERIES_DATA_POINT.equals(src.getType())) {
    final DataPointHints dph=(DataPointHints)src.getSource();
    ScriptUtil.script(callbackFunction,dph);
  }
  callbackFunction.append(""String_Node_Str"");
  elm.setAttribute(scriptEvent,wrapJS(bDblClick,callbackFunction.toString()));
  if (!(scripts.contains(script))) {
    svg_g2d.addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
    scripts.add(script);
  }
}","/** 
 * Set SVG attributes for multiple URL values.
 * @param muv
 * @param elm
 * @param src
 * @param scriptEvent
 * @param bDblClick
 */
private void setMultiURLValuesAttributes(MultiURLValues muv,Element elm,StructureSource src,String scriptEvent,boolean bDblClick){
  List<URLValue> validURLValues=MultiURLValuesScriptGenerator.getValidURLValues(muv);
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + validURLValues.size() + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  for (  URLValue uv : validURLValues) {
    sb.append(""String_Node_Str"");
    String url=uv.getBaseUrl();
    if (!(url.startsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str""))) {
      url=""String_Node_Str"" + url + ""String_Node_Str"";
    }
    String text=uv.getLabel().getCaption().getValue();
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"" + text + ""String_Node_Str"");
    sb.append(""String_Node_Str"" + url + ""String_Node_Str"");
    sb.append(""String_Node_Str"" + uv.getTarget() + ""String_Node_Str"");
    if (uv.getTooltip() != null)     sb.append(""String_Node_Str"" + uv.getTooltip() + ""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  EMap<String,String> stylesMap=muv.getPropertiesMap();
  String menuStyle=CSSHelper.getStylingHyphenFormat(stylesMap.get(MenuStylesKeyType.MENU.getName()));
  String textStyle=CSSHelper.getStylingHyphenFormat(stylesMap.get(MenuStylesKeyType.MENU_ITEM.getName()));
  String onmouseoverStyle=CSSHelper.getStylingHyphenFormat(stylesMap.get(MenuStylesKeyType.ON_MOUSE_OVER.getName()));
  String onmouseoutStyle=CSSHelper.getStylingHyphenFormat(stylesMap.get(MenuStylesKeyType.ON_MOUSE_OUT.getName()));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + menuStyle + ""String_Node_Str"").append(""String_Node_Str"" + textStyle + ""String_Node_Str"").append(""String_Node_Str"" + onmouseoverStyle + ""String_Node_Str"").append(""String_Node_Str"" + onmouseoutStyle + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  String script=sb.toString();
  StringBuffer callbackFunction=new StringBuffer(""String_Node_Str"");
  int hashCode=script.hashCode();
  if (hashCode != Integer.MIN_VALUE) {
    callbackFunction.append(Math.abs(hashCode));
  }
 else {
    callbackFunction.append(Integer.MAX_VALUE);
  }
  callbackFunction.append(""String_Node_Str"");
  callbackFunction.append(src.getSource().hashCode());
  if (StructureType.SERIES_DATA_POINT.equals(src.getType())) {
    final DataPointHints dph=(DataPointHints)src.getSource();
    ScriptUtil.script(callbackFunction,dph);
  }
  callbackFunction.append(""String_Node_Str"");
  elm.setAttribute(scriptEvent,wrapJS(bDblClick,callbackFunction.toString()));
  if (!(scripts.contains(script))) {
    if (hashCode != Integer.MIN_VALUE) {
      svg_g2d.addScript(""String_Node_Str"" + Math.abs(hashCode) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
    }
 else {
      svg_g2d.addScript(""String_Node_Str"" + Integer.MAX_VALUE + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
    }
    scripts.add(script);
  }
}",0.9032894736842104
69317,"/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers,Cursor cursor){
  if (elm != null && triggers != null) {
    if (triggers != null && triggers.length > 0) {
      setCursorAttribute(elm,cursor,defaultCursor);
    }
    boolean redirect=false;
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      if (tg.getAction().getType().getValue() == ActionType.URL_REDIRECT) {
        redirect=true;
        break;
      }
    }
    if (redirect) {
      Element aLink=svg_g2d.createElement(""String_Node_Str"");
      Element group=svg_g2d.createElement(""String_Node_Str"");
      group.appendChild(elm);
      aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
      aLink.appendChild(group);
      elm=group;
      hotspotLayer.appendChild(aLink);
    }
 else     hotspotLayer.appendChild(elm);
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
        boolean bDblClick=false;
        if (scriptEvent.equals(""String_Node_Str"")) {
          scriptEvent=""String_Node_Str"";
          bDblClick=true;
        }
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
          String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
        if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
          Element title=svg_g2d.dom.createElement(""String_Node_Str"");
          title.appendChild(svg_g2d.dom.createTextNode(tooltipText));
          elm.appendChild(title);
          String componentId=null;
          if (src instanceof WrappedStructureSource) {
            componentId=findFirstComponentId((WrappedStructureSource)src);
          }
          if (scriptEvent.equals(""String_Node_Str"")) {
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
            if (componentId != null)             elm.setAttribute(""String_Node_Str"",""String_Node_Str"" + componentId + ""String_Node_Str"");
 else             elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            if (componentId != null) {
              elm.setAttribute(scriptEvent,wrapJS(bDblClick,""String_Node_Str"" + componentId + ""String_Node_Str""));
            }
 else {
              elm.setAttribute(scriptEvent,wrapJS(bDblClick,""String_Node_Str""));
            }
          }
        }
      break;
case ActionType.URL_REDIRECT:
    ActionValue av=tg.getAction().getValue();
  if (av instanceof URLValue) {
    URLValue urlValue=(URLValue)av;
    setURLValueAttributes(urlValue,elm,src,scriptEvent,bDblClick);
  }
 else   if (av instanceof MultiURLValues) {
    MultiURLValues muv=(MultiURLValues)av;
    List<URLValue> validURLValues=MultiURLValuesScriptGenerator.getValidURLValues(muv);
    int size=validURLValues.size();
    if (size == 0) {
      setTooltipForURLRedirect(elm,src,muv.getTooltip());
      break;
    }
    if (size == 1) {
      setURLValueAttributes(validURLValues.get(0),elm,src,scriptEvent,bDblClick);
      setTooltipForURLRedirect(elm,src,muv.getTooltip());
    }
 else {
      setMultiURLValuesAttributes(muv,elm,src,scriptEvent,bDblClick);
    }
    setTooltipForURLRedirect(elm,src,muv.getTooltip());
  }
break;
case ActionType.TOGGLE_VISIBILITY:
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
case ActionType.HIGHLIGHT:
addJSCodeOnElement(src,tg,elm,scriptEvent,tg.getAction().getType().getValue(),bDblClick);
break;
case ActionType.INVOKE_SCRIPT:
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=svg_g2d.createElement(""String_Node_Str"");
title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=svg_g2d.createElement(""String_Node_Str"");
description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
StringBuffer callbackFunction=new StringBuffer(""String_Node_Str"");
callbackFunction.append(Math.abs(script.hashCode()));
callbackFunction.append(""String_Node_Str"");
callbackFunction.append(src.getSource().hashCode());
if (StructureType.SERIES_DATA_POINT.equals(src.getType())) {
final DataPointHints dph=(DataPointHints)src.getSource();
ScriptUtil.script(callbackFunction,dph);
}
callbackFunction.append(""String_Node_Str"");
elm.setAttribute(scriptEvent,wrapJS(bDblClick,callbackFunction.toString()));
if (!(scripts.contains(script))) {
svg_g2d.addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
}
}
}","/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers,Cursor cursor){
  if (elm != null && triggers != null) {
    if (triggers != null && triggers.length > 0) {
      setCursorAttribute(elm,cursor,defaultCursor);
    }
    boolean redirect=false;
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      if (tg.getAction().getType().getValue() == ActionType.URL_REDIRECT) {
        redirect=true;
        break;
      }
    }
    if (redirect) {
      Element aLink=svg_g2d.createElement(""String_Node_Str"");
      Element group=svg_g2d.createElement(""String_Node_Str"");
      group.appendChild(elm);
      aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
      aLink.appendChild(group);
      elm=group;
      hotspotLayer.appendChild(aLink);
    }
 else     hotspotLayer.appendChild(elm);
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
        boolean bDblClick=false;
        if (scriptEvent.equals(""String_Node_Str"")) {
          scriptEvent=""String_Node_Str"";
          bDblClick=true;
        }
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
          String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
        if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
          Element title=svg_g2d.dom.createElement(""String_Node_Str"");
          title.appendChild(svg_g2d.dom.createTextNode(tooltipText));
          elm.appendChild(title);
          String componentId=null;
          if (src instanceof WrappedStructureSource) {
            componentId=findFirstComponentId((WrappedStructureSource)src);
          }
          if (scriptEvent.equals(""String_Node_Str"")) {
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
            if (componentId != null)             elm.setAttribute(""String_Node_Str"",""String_Node_Str"" + componentId + ""String_Node_Str"");
 else             elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            if (componentId != null) {
              elm.setAttribute(scriptEvent,wrapJS(bDblClick,""String_Node_Str"" + componentId + ""String_Node_Str""));
            }
 else {
              elm.setAttribute(scriptEvent,wrapJS(bDblClick,""String_Node_Str""));
            }
          }
        }
      break;
case ActionType.URL_REDIRECT:
    ActionValue av=tg.getAction().getValue();
  if (av instanceof URLValue) {
    URLValue urlValue=(URLValue)av;
    setURLValueAttributes(urlValue,elm,src,scriptEvent,bDblClick);
  }
 else   if (av instanceof MultiURLValues) {
    MultiURLValues muv=(MultiURLValues)av;
    List<URLValue> validURLValues=MultiURLValuesScriptGenerator.getValidURLValues(muv);
    int size=validURLValues.size();
    if (size == 0) {
      setTooltipForURLRedirect(elm,src,muv.getTooltip());
      break;
    }
    if (size == 1) {
      setURLValueAttributes(validURLValues.get(0),elm,src,scriptEvent,bDblClick);
      setTooltipForURLRedirect(elm,src,muv.getTooltip());
    }
 else {
      setMultiURLValuesAttributes(muv,elm,src,scriptEvent,bDblClick);
    }
    setTooltipForURLRedirect(elm,src,muv.getTooltip());
  }
break;
case ActionType.TOGGLE_VISIBILITY:
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
case ActionType.HIGHLIGHT:
addJSCodeOnElement(src,tg,elm,scriptEvent,tg.getAction().getType().getValue(),bDblClick);
break;
case ActionType.INVOKE_SCRIPT:
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=svg_g2d.createElement(""String_Node_Str"");
title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=svg_g2d.createElement(""String_Node_Str"");
description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
StringBuffer callbackFunction=new StringBuffer(""String_Node_Str"");
int hashCode=script.hashCode();
if (hashCode != Integer.MIN_VALUE) {
callbackFunction.append(Math.abs(hashCode));
}
 else {
callbackFunction.append(Integer.MAX_VALUE);
}
callbackFunction.append(""String_Node_Str"");
callbackFunction.append(src.getSource().hashCode());
if (StructureType.SERIES_DATA_POINT.equals(src.getType())) {
final DataPointHints dph=(DataPointHints)src.getSource();
ScriptUtil.script(callbackFunction,dph);
}
callbackFunction.append(""String_Node_Str"");
elm.setAttribute(scriptEvent,wrapJS(bDblClick,callbackFunction.toString()));
if (!(scripts.contains(script))) {
if (hashCode != Integer.MIN_VALUE) {
svg_g2d.addScript(""String_Node_Str"" + Math.abs(hashCode) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
}
 else {
svg_g2d.addScript(""String_Node_Str"" + Integer.MAX_VALUE + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
}
scripts.add(script);
}
}
break;
}
}
}
}
}",0.9545274812178728
69318,"private boolean testWithinLine(Point pStart,Point pEnd,Point p){
  boolean c=(p.x >= pStart.x && p.x <= pEnd.x || p.x <= pStart.x && p.x >= pEnd.x) && (p.y >= pStart.y && p.y <= pEnd.y || p.y <= pStart.y && p.y >= pEnd.y);
  if (c) {
    if (pEnd.x == pStart.x && pEnd.x == p.x) {
      return true;
    }
 else     if ((pEnd.x - pStart.x) * (pEnd.x - p.x) == 0) {
      return false;
    }
    c=(pEnd.y - pStart.y) / (pEnd.x - pStart.x) == (pEnd.y - p.y) / (pEnd.x - p.x);
  }
  return c;
}","private boolean testWithinLine(Point pStart,Point pEnd,Point p){
  boolean c=(p.x >= pStart.x && p.x <= pEnd.x || p.x <= pStart.x && p.x >= pEnd.x) && (p.y >= pStart.y && p.y <= pEnd.y || p.y <= pStart.y && p.y >= pEnd.y);
  if (c) {
    if (pEnd.x == pStart.x && pEnd.x == p.x) {
      return true;
    }
 else     if ((pEnd.x - pStart.x) * (pEnd.x - p.x) == 0) {
      return false;
    }
    c=ChartUtil.mathEqual((pEnd.y - pStart.y) / (pEnd.x - pStart.x),(pEnd.y - p.y) / (pEnd.x - p.x));
  }
  return c;
}",0.9740518962075848
69319,"private boolean ccw(Point a,Point b,Point c){
  double dx1=b.x - a.x;
  double dx2=c.x - b.x;
  double dy1=b.y - a.y;
  double dy2=c.y - b.y;
  double gradient1=dy2 * dx1;
  double gradient2=dy1 * dx2;
  if (gradient1 == gradient2) {
    return (dx1 * dx2 >= 0 && dy1 * dy2 >= 0);
  }
 else {
    return (gradient1 > gradient2);
  }
}","private boolean ccw(Point a,Point b,Point c){
  double dx1=b.x - a.x;
  double dx2=c.x - b.x;
  double dy1=b.y - a.y;
  double dy2=c.y - b.y;
  double gradient1=dy2 * dx1;
  double gradient2=dy1 * dx2;
  if (ChartUtil.mathEqual(gradient1,gradient2)) {
    return (dx1 * dx2 >= 0 && dy1 * dy2 >= 0);
  }
 else {
    return (gradient1 > gradient2);
  }
}",0.9096209912536444
69320,"/** 
 * Zooms OUT 'once' into a scale of type numerical or datetime Typically, this is called in a loop until label overlaps occur
 */
public final boolean zoomOut(){
  if (info.bStepFixed || this.getTickCordinates().size() < 3) {
    return false;
  }
  Object oStep=context.getStep();
  if (((Number)oStep).doubleValue() >= Double.MAX_VALUE) {
    return false;
  }
  if ((info.type & NUMERICAL) == NUMERICAL) {
    if ((info.type & LOGARITHMIC) == LOGARITHMIC) {
      final double dStep=asDouble(oStep).doubleValue();
      if ((Math.log(dStep) / LOG_10) >= 1) {
        setStep(new Double(dStep * 10));
      }
 else {
        final int n=iaLogarithmicDeltas.length;
        for (int i=0; i < n; i++) {
          if ((int)dStep == iaLogarithmicDeltas[i]) {
            setStep(new Double(iaLogarithmicDeltas[i + 1]));
            return true;
          }
        }
        return false;
      }
    }
 else     if ((info.type & LINEAR) == LINEAR) {
      if (asDouble(context.getMin()).doubleValue() * asDouble(context.getMax()).doubleValue() < 0 && this.getTickCordinates().size() <= 3) {
        return false;
      }
      double dStep=asDouble(oStep).doubleValue();
      double dPower=Math.log10(dStep);
      if (dPower < 0) {
        dPower=Math.floor(dPower);
        dPower=Math.pow(10,dPower);
      }
 else {
        dPower=dStep;
      }
      dStep/=dPower;
      dStep=Math.round(dStep);
      int n=iaLinearDeltas.length;
      int i=0;
      for (; i < n; i++) {
        if (dStep < iaLinearDeltas[i]) {
          dStep=iaLinearDeltas[i] * dPower;
          break;
        }
      }
      if (i == n) {
        dPower*=20;
        dStep=iaLinearDeltas[0] * dPower;
      }
      if (((Number)oStep).doubleValue() == dStep) {
        return false;
      }
      dStep=ChartUtil.alignWithInt(dStep,false);
      setStep(new Double(dStep));
    }
  }
 else   if ((info.type & DATE_TIME) == DATE_TIME) {
    int[] ia=null;
    int iStep=asInteger(oStep);
    int iUnit=asInteger(context.getUnit());
    for (int icu=0; icu < iaCalendarUnits.length; icu++) {
      if (iUnit == iaCalendarUnits[icu]) {
        ia=iaCalendarDeltas[icu];
        if (ia == null) {
          iStep++;
          setStep(Integer.valueOf(iStep));
        }
 else {
          int i=0, n=ia.length;
          for (; i < n; i++) {
            if (ia[i] == iStep) {
              break;
            }
          }
          if (i == n - 1) {
            ia=iaCalendarDeltas[icu + 1];
            context.setUnit(Integer.valueOf(iaCalendarUnits[icu + 1]));
            if (ia == null) {
              setStep(Integer.valueOf(1));
              return true;
            }
            i=-1;
          }
          setStep(Integer.valueOf(ia[i + 1]));
          break;
        }
      }
    }
  }
  return true;
}","/** 
 * Zooms OUT 'once' into a scale of type numerical or datetime Typically, this is called in a loop until label overlaps occur
 */
public final boolean zoomOut(){
  if (info.bStepFixed || this.getTickCordinates().size() < 3) {
    return false;
  }
  Object oStep=context.getStep();
  if (((Number)oStep).doubleValue() >= Double.MAX_VALUE) {
    return false;
  }
  if ((info.type & NUMERICAL) == NUMERICAL) {
    if ((info.type & LOGARITHMIC) == LOGARITHMIC) {
      final double dStep=asDouble(oStep).doubleValue();
      if ((Math.log(dStep) / LOG_10) >= 1) {
        setStep(new Double(dStep * 10));
      }
 else {
        final int n=iaLogarithmicDeltas.length;
        for (int i=0; i < n; i++) {
          if ((int)dStep == iaLogarithmicDeltas[i]) {
            setStep(new Double(iaLogarithmicDeltas[i + 1]));
            return true;
          }
        }
        return false;
      }
    }
 else     if ((info.type & LINEAR) == LINEAR) {
      if (asDouble(context.getMin()).doubleValue() * asDouble(context.getMax()).doubleValue() < 0 && this.getTickCordinates().size() <= 3) {
        return false;
      }
      double dStep=asDouble(oStep).doubleValue();
      double dPower=Math.log10(dStep);
      if (dPower < 0) {
        dPower=Math.floor(dPower);
        dPower=Math.pow(10,dPower);
      }
 else {
        dPower=dStep;
      }
      dStep/=dPower;
      dStep=Math.round(dStep);
      int n=iaLinearDeltas.length;
      int i=0;
      for (; i < n; i++) {
        if (dStep < iaLinearDeltas[i]) {
          dStep=iaLinearDeltas[i] * dPower;
          break;
        }
      }
      if (i == n) {
        dPower*=20;
        dStep=iaLinearDeltas[0] * dPower;
      }
      if (ChartUtil.mathEqual(((Number)oStep).doubleValue(),dStep)) {
        return false;
      }
      dStep=ChartUtil.alignWithInt(dStep,false);
      setStep(new Double(dStep));
    }
  }
 else   if ((info.type & DATE_TIME) == DATE_TIME) {
    int[] ia=null;
    int iStep=asInteger(oStep);
    int iUnit=asInteger(context.getUnit());
    for (int icu=0; icu < iaCalendarUnits.length; icu++) {
      if (iUnit == iaCalendarUnits[icu]) {
        ia=iaCalendarDeltas[icu];
        if (ia == null) {
          iStep++;
          setStep(Integer.valueOf(iStep));
        }
 else {
          int i=0, n=ia.length;
          for (; i < n; i++) {
            if (ia[i] == iStep) {
              break;
            }
          }
          if (i == n - 1) {
            ia=iaCalendarDeltas[icu + 1];
            context.setUnit(Integer.valueOf(iaCalendarUnits[icu + 1]));
            if (ia == null) {
              setStep(Integer.valueOf(1));
              return true;
            }
            i=-1;
          }
          setStep(Integer.valueOf(ia[i + 1]));
          break;
        }
      }
    }
  }
  return true;
}",0.9935828877005348
69321,"/** 
 * Zooms IN 'once' into a scale of type numerical or datetime Typically, this is called in a loop until label overlaps occur
 */
public final boolean zoomIn(){
  if (info.bStepFixed) {
    return false;
  }
  if (ChartUtil.mathEqual(0,((Number)context.getStep()).doubleValue())) {
    return false;
  }
  if ((info.type & NUMERICAL) == NUMERICAL) {
    if ((info.type & LOGARITHMIC) == LOGARITHMIC) {
      final double dStep=asDouble(context.getStep()).doubleValue();
      if ((Math.log(dStep) / LOG_10) > 1) {
        setStep(new Double(dStep / 10));
      }
 else {
        int n=iaLogarithmicDeltas.length;
        for (int i=n - 1; i >= 0; i--) {
          if ((int)dStep == iaLogarithmicDeltas[i]) {
            if (i > 0) {
              setStep(new Double(iaLogarithmicDeltas[i - 1]));
              return true;
            }
 else {
              return false;
            }
          }
        }
        return false;
      }
    }
 else     if ((info.type & LINEAR) == LINEAR) {
      double dStep=asDouble(context.getStep()).doubleValue();
      final double oldStep=dStep;
      double dPower=(Math.log(dStep) / LOG_10);
      dPower=Math.floor(dPower);
      dPower=Math.pow(10.0,dPower);
      dStep/=dPower;
      dStep=Math.round(dStep);
      int n=iaLinearDeltas.length;
      for (int i=0; i < n; i++) {
        if ((int)dStep == iaLinearDeltas[i]) {
          if (i > 0) {
            dStep=iaLinearDeltas[i - 1] * dPower;
          }
 else {
            dPower/=10;
            dStep=iaLinearDeltas[n - 2] * dPower;
          }
          break;
        }
      }
      if (dStep == oldStep) {
        dStep/=2;
      }
      setStep(new Double(dStep));
      if (((Number)context.getStep()).doubleValue() < info.dPrecision) {
        setStep(oldStep);
        return false;
      }
    }
  }
 else   if ((info.type & DATE_TIME) == DATE_TIME) {
    int[] ia=null;
    int iStep=asInteger(context.getStep());
    int iUnit=asInteger(context.getUnit());
    for (int icu=0; icu < iaCalendarUnits.length; icu++) {
      if (iUnit == iaCalendarUnits[icu]) {
        ia=iaCalendarDeltas[icu];
        if (ia == null) {
          iStep--;
          if (iStep == 0) {
            setStep(Integer.valueOf(iaMonthDeltas[iaMonthDeltas.length - 1]));
            context.setUnit(Integer.valueOf(Calendar.MONTH));
          }
        }
 else {
          int i=0;
          for (; i < ia.length; i++) {
            if (ia[i] == iStep) {
              break;
            }
          }
          if (i == 0) {
            if (icu <= info.iMinUnit) {
              return false;
            }
            ia=iaCalendarDeltas[icu - 1];
            i=ia.length;
            context.setUnit(Integer.valueOf(iaCalendarUnits[icu - 1]));
          }
          setStep(Integer.valueOf(ia[i - 1]));
          break;
        }
      }
    }
  }
  return true;
}","/** 
 * Zooms IN 'once' into a scale of type numerical or datetime Typically, this is called in a loop until label overlaps occur
 */
public final boolean zoomIn(){
  if (info.bStepFixed) {
    return false;
  }
  if (ChartUtil.mathEqual(0,((Number)context.getStep()).doubleValue())) {
    return false;
  }
  if ((info.type & NUMERICAL) == NUMERICAL) {
    if ((info.type & LOGARITHMIC) == LOGARITHMIC) {
      final double dStep=asDouble(context.getStep()).doubleValue();
      if ((Math.log(dStep) / LOG_10) > 1) {
        setStep(new Double(dStep / 10));
      }
 else {
        int n=iaLogarithmicDeltas.length;
        for (int i=n - 1; i >= 0; i--) {
          if ((int)dStep == iaLogarithmicDeltas[i]) {
            if (i > 0) {
              setStep(new Double(iaLogarithmicDeltas[i - 1]));
              return true;
            }
 else {
              return false;
            }
          }
        }
        return false;
      }
    }
 else     if ((info.type & LINEAR) == LINEAR) {
      double dStep=asDouble(context.getStep()).doubleValue();
      final double oldStep=dStep;
      double dPower=(Math.log(dStep) / LOG_10);
      dPower=Math.floor(dPower);
      dPower=Math.pow(10.0,dPower);
      dStep/=dPower;
      dStep=Math.round(dStep);
      int n=iaLinearDeltas.length;
      for (int i=0; i < n; i++) {
        if ((int)dStep == iaLinearDeltas[i]) {
          if (i > 0) {
            dStep=iaLinearDeltas[i - 1] * dPower;
          }
 else {
            dPower/=10;
            dStep=iaLinearDeltas[n - 2] * dPower;
          }
          break;
        }
      }
      if (ChartUtil.mathEqual(dStep,oldStep)) {
        dStep/=2;
      }
      setStep(new Double(dStep));
      if (((Number)context.getStep()).doubleValue() < info.dPrecision) {
        setStep(oldStep);
        return false;
      }
    }
  }
 else   if ((info.type & DATE_TIME) == DATE_TIME) {
    int[] ia=null;
    int iStep=asInteger(context.getStep());
    int iUnit=asInteger(context.getUnit());
    for (int icu=0; icu < iaCalendarUnits.length; icu++) {
      if (iUnit == iaCalendarUnits[icu]) {
        ia=iaCalendarDeltas[icu];
        if (ia == null) {
          iStep--;
          if (iStep == 0) {
            setStep(Integer.valueOf(iaMonthDeltas[iaMonthDeltas.length - 1]));
            context.setUnit(Integer.valueOf(Calendar.MONTH));
          }
        }
 else {
          int i=0;
          for (; i < ia.length; i++) {
            if (ia[i] == iStep) {
              break;
            }
          }
          if (i == 0) {
            if (icu <= info.iMinUnit) {
              return false;
            }
            ia=iaCalendarDeltas[icu - 1];
            i=ia.length;
            context.setUnit(Integer.valueOf(iaCalendarUnits[icu - 1]));
          }
          setStep(Integer.valueOf(ia[i - 1]));
          break;
        }
      }
    }
  }
  return true;
}",0.9912982944657152
69322,"/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param axisOrigin
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,AxisOrigin axisOrigin,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent,PlotComputation plotComp) throws ChartException {
  final Scale scModel=ax.getModelAxis().getScale();
  final FormatSpecifier fs=ax.getFormatSpecifier();
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? Integer.valueOf(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if (scModel.isSetFactor() && (iType & LINEAR) == LINEAR && !ax.isCategoryScale()) {
    double factor=scModel.getFactor() * 72 / xs.getDpiResolution();
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=Double.NaN;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (oMinimum != null && oMinimum instanceof NumberDataElement) {
      dMinValue=((NumberDataElement)oMinimum).getValue();
    }
    double length=Math.abs(dEnd - dStart);
    double valueLength=length * factor;
    dMaxValue=dMinValue + valueLength;
    double dStep=1;
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).dPrecision(dPrecision).bStepFixed(true).dsiData(dsi).dFactor(factor);
    sc=new AutoScale(info);
    sc.setMinimum(Double.valueOf(0));
    sc.setMaximum(Double.valueOf(0));
    sc.setStep(new Double(dStep));
    sc.setStepNumber(oStepNumber);
    setStepToScale(sc,oStep,null,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.setMinimum(oMinValue);
    sc.setMaximum(oMaxValue);
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    sc.setData(dsi);
    return sc;
  }
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent);
    sc=new AutoScale(info);
    sc.setData(dsi);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=Double.NaN;
    ;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).dPrecision(dPrecision);
    sc=new AutoScale(info);
    sc.setMaximum(Double.valueOf(0));
    sc.setMinimum(Double.valueOf(0));
    sc.setStep(new Double(dStep));
    sc.setStepNumber(oStepNumber);
    sc.setData(dsi);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent);
    sc=new AutoScale(info);
    sc.setMaximum(Double.valueOf(0));
    sc.setMinimum(Double.valueOf(0));
    sc.setStep(new Double(10));
    sc.setStepNumber(oStepNumber);
    sc.setData(dsi);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.info.bStepFixed(true);
      sc.info.bMaximumFixed(true);
      sc.info.bMinimumFixed(true);
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    ScaleInfo info=new ScaleInfo(plotComp,DATE_TIME,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).iMinUnit(oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc));
    sc=new AutoScale(info);
    sc.setMaximum(cdtMaxAxis);
    sc.setMinimum(cdtMinAxis);
    sc.setStep(Integer.valueOf(1));
    sc.setStepNumber(oStepNumber);
    sc.context.setUnit(Integer.valueOf(iUnit));
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.setMinimum(((DateTimeDataElement)oMinimum).getValueAsCDateTime());
        sc.info.oMinimumFixed(((DateTimeDataElement)oMinimum).getValueAsCDateTime());
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.info.bMinimumFixed(true);
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.setMaximum(((DateTimeDataElement)oMaximum).getValueAsCDateTime());
        sc.info.oMaximumFixed(((DateTimeDataElement)oMaximum).getValueAsCDateTime());
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMaximum(),ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.info.bMaximumFixed(true);
    }
    if (sc.info.bMaximumFixed && sc.info.bMinimumFixed) {
      if (((CDateTime)sc.getMinimum()).after(sc.getMaximum())) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMinimum(),sc.getMaximum()},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.info.bStepFixed || rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  sc.setData(dsi);
  return sc;
}","/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param axisOrigin
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,AxisOrigin axisOrigin,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent,PlotComputation plotComp) throws ChartException {
  final Scale scModel=ax.getModelAxis().getScale();
  final FormatSpecifier fs=ax.getFormatSpecifier();
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? Integer.valueOf(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if (scModel.isSetFactor() && (iType & LINEAR) == LINEAR && !ax.isCategoryScale()) {
    double factor=scModel.getFactor() * 72 / xs.getDpiResolution();
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=Double.NaN;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (oMinimum != null && oMinimum instanceof NumberDataElement) {
      dMinValue=((NumberDataElement)oMinimum).getValue();
    }
    double length=Math.abs(dEnd - dStart);
    double valueLength=length * factor;
    dMaxValue=dMinValue + valueLength;
    double dStep=1;
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).dPrecision(dPrecision).bStepFixed(true).dsiData(dsi).dFactor(factor);
    sc=new AutoScale(info);
    sc.setMinimum(Double.valueOf(0));
    sc.setMaximum(Double.valueOf(0));
    sc.setStep(new Double(dStep));
    sc.setStepNumber(oStepNumber);
    setStepToScale(sc,oStep,null,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.setMinimum(oMinValue);
    sc.setMaximum(oMaxValue);
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    sc.setData(dsi);
    return sc;
  }
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent);
    sc=new AutoScale(info);
    sc.setData(dsi);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=Double.NaN;
    ;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).dPrecision(dPrecision);
    sc=new AutoScale(info);
    sc.setMaximum(Double.valueOf(0));
    sc.setMinimum(Double.valueOf(0));
    sc.setStep(new Double(dStep));
    sc.setStepNumber(oStepNumber);
    sc.setData(dsi);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent);
    sc=new AutoScale(info);
    sc.setMaximum(Double.valueOf(0));
    sc.setMinimum(Double.valueOf(0));
    sc.setStep(new Double(10));
    sc.setStepNumber(oStepNumber);
    sc.setData(dsi);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.info.bStepFixed(true);
      sc.info.bMaximumFixed(true);
      sc.info.bMinimumFixed(true);
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    ScaleInfo info=new ScaleInfo(plotComp,DATE_TIME,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).iMinUnit(oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc));
    sc=new AutoScale(info);
    sc.setMaximum(cdtMaxAxis);
    sc.setMinimum(cdtMinAxis);
    sc.setStep(Integer.valueOf(1));
    sc.setStepNumber(oStepNumber);
    sc.context.setUnit(Integer.valueOf(iUnit));
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.setMinimum(((DateTimeDataElement)oMinimum).getValueAsCDateTime());
        sc.info.oMinimumFixed(((DateTimeDataElement)oMinimum).getValueAsCDateTime());
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.info.bMinimumFixed(true);
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.setMaximum(((DateTimeDataElement)oMaximum).getValueAsCDateTime());
        sc.info.oMaximumFixed(((DateTimeDataElement)oMaximum).getValueAsCDateTime());
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMaximum(),ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.info.bMaximumFixed(true);
    }
    if (sc.info.bMaximumFixed && sc.info.bMinimumFixed) {
      if (((CDateTime)sc.getMinimum()).after(sc.getMaximum())) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMinimum(),sc.getMaximum()},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.info.bStepFixed || rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  if (sc != null) {
    sc.setData(dsi);
  }
  return sc;
}",0.9980099502487564
69323,"/** 
 * Computes value precision if more precise than existing one For instance 3.4 has a precision of 0.1 and 1400 has a precision of 100. That is the position where the first significant digit appears, or in double representation, the value of the exponent
 * @param precision
 * @param value
 * @return precision
 */
protected static double getPrecision(double precision,double pValue,FormatSpecifier fs,ULocale locale,boolean bIsPercent){
  double value=Math.abs(pValue);
  value=getValidDouble(value);
  final boolean isFirst=Double.isNaN(precision);
  if (value == 0) {
    if (isFirst || precision == 0) {
      return 1;
    }
    return precision;
  }
  if (isFirst) {
    precision=0;
  }
  if (precision == 0) {
    if (bIsPercent) {
      precision=1;
    }
 else {
      precision=Math.pow(10,Math.floor(Math.log(value) / Math.log(10)));
    }
  }
  double check=value / precision;
  int loopCounter=0;
  while (Math.floor(check) != check && loopCounter < 20) {
    loopCounter++;
    precision/=10;
    check=value / precision;
  }
  if (loopCounter == 20)   logger.log(ILogger.WARNING,""String_Node_Str"" + value);
  if (fs != null) {
    if (fs instanceof NumberFormatSpecifier) {
      NumberFormatSpecifier ns=(NumberFormatSpecifier)fs;
      if (ns.isSetFractionDigits()) {
        double multiplier=ns.isSetMultiplier() ? ns.getMultiplier() : 1;
        if (multiplier != 0) {
          double formatPrecision=Math.pow(10,-ns.getFractionDigits()) / multiplier;
          if (precision == 0)           precision=formatPrecision;
 else           precision=Math.max(precision,formatPrecision);
        }
      }
    }
  }
  return precision;
}","/** 
 * Computes value precision if more precise than existing one For instance 3.4 has a precision of 0.1 and 1400 has a precision of 100. That is the position where the first significant digit appears, or in double representation, the value of the exponent
 * @param precision
 * @param value
 * @return precision
 */
protected static double getPrecision(double precision,double pValue,FormatSpecifier fs,ULocale locale,boolean bIsPercent){
  double value=Math.abs(pValue);
  value=getValidDouble(value);
  final boolean isFirst=Double.isNaN(precision);
  if (value == 0) {
    if (isFirst || precision == 0) {
      return 1;
    }
    return precision;
  }
  if (isFirst) {
    precision=0;
  }
  if (precision == 0) {
    if (bIsPercent) {
      precision=1;
    }
 else {
      precision=Math.pow(10,Math.floor(Math.log(value) / Math.log(10)));
    }
  }
  double check=value / precision;
  int loopCounter=0;
  while (!ChartUtil.mathEqual(Math.floor(check),check) && loopCounter < 20) {
    loopCounter++;
    precision/=10;
    check=value / precision;
  }
  if (loopCounter == 20)   logger.log(ILogger.WARNING,""String_Node_Str"" + value);
  if (fs != null) {
    if (fs instanceof NumberFormatSpecifier) {
      NumberFormatSpecifier ns=(NumberFormatSpecifier)fs;
      if (ns.isSetFractionDigits()) {
        double multiplier=ns.isSetMultiplier() ? ns.getMultiplier() : 1;
        if (multiplier != 0) {
          double formatPrecision=Math.pow(10,-ns.getFractionDigits()) / multiplier;
          if (precision == 0)           precision=formatPrecision;
 else           precision=Math.max(precision,formatPrecision);
        }
      }
    }
  }
  return precision;
}",0.991904047976012
69324,"/** 
 * @param dBlockY
 * @param dBlockHeight
 * @param aax
 * @param axPH
 * @param scY
 * @param iXLabelLocation
 * @param iYLabelLocation
 * @param iXTitleLocation
 * @param laYAxisLabels
 * @param iv
 * @param dXAxisLabelsThickness
 * @param dDecorationThickness
 * @param dXAxisTitleThickness
 * @param dHTotal
 * @param dY
 * @param dY1
 * @param dY2
 * @param bTicksAbove
 * @param bTicksBelow
 * @param bForwardScale
 * @return
 * @throws ChartException
 */
private double adjustVerticalWithValueOrigin(double dBlockY,double dBlockHeight,AllAxes aax,final OneAxis axPH,final AutoScale scY,final int iXLabelLocation,final int iYLabelLocation,final int iXTitleLocation,final Label laYAxisLabels,final IntersectionValue iv,double dXAxisLabelsThickness,double[] dDecorationThickness,double dXAxisTitleThickness,double dHTotal,double dY,double dY1,double dY2,final boolean bTicksAbove,final boolean bTicksBelow,final boolean bForwardScale) throws ChartException {
  double dDeltaY1=0, dDeltaY2=0;
  if (iXLabelLocation == ABOVE) {
    double dH1=(bTicksAbove ? getTickSize() : 0) + Math.max(dXAxisLabelsThickness,dDecorationThickness[0]);
    double dH2=(bTicksBelow ? getTickSize() : 0);
    if (dH1 + dH2 <= dHTotal) {
      dY1-=dH1;
      dY2+=dH2;
      dHTotal-=(dH1 + dH2);
    }
 else {
      axPH.setShowLabels(false);
    }
    if (iXTitleLocation == ABOVE) {
      dY1-=dXAxisTitleThickness;
    }
 else     if (iXTitleLocation == BELOW) {
      dY2+=dXAxisTitleThickness;
    }
    dDeltaY1=dY - dY1;
    dDeltaY2=dY2 - dY;
    if (dY1 < dBlockY) {
      final Object[] oaMinMax=scY.getMinMax();
      boolean bForceBreak=false;
      do {
        scY.setEndPoints(scY.getStart() + scY.getStartShift(),scY.getEnd() - scY.getEndShift());
        scY.resetShifts();
        double[] da=scY.getEndPoints();
        double dT_RI=dBlockY - dY1;
        double dStart, dEnd;
        if (bForwardScale) {
          double dAMin_AMax=da[1] - da[0];
          double dAMin_RI=da[1] - dY;
          dEnd=da[1];
          dStart=(dT_RI / dAMin_RI) * dAMin_AMax + da[0];
          if (dStart < dBlockY) {
            dStart=dBlockY;
            bForceBreak=true;
          }
        }
 else {
          double dAMin_AMax=da[0] - da[1];
          double dAMin_RI=da[0] - dY;
          dStart=da[0];
          dEnd=(dT_RI / dAMin_RI) * dAMin_AMax + da[1];
          if (dEnd < dBlockY) {
            dEnd=dBlockY;
            bForceBreak=true;
          }
        }
        scY.setEndPoints(dStart,dEnd);
        scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
        if (!scY.isStepFixed()) {
          while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
            if (!scY.zoomOut()) {
              bForceBreak=true;
              break;
            }
            scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
            if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              bForceBreak=true;
              break;
            }
          }
        }
        dY=getLocation(scY,iv);
        dY1=dY - dDeltaY1;
        dY2=dY + dDeltaY2;
      }
 while (Math.abs(dY1 - dBlockY) > 1 && !bForceBreak);
    }
  }
 else   if (iXLabelLocation == BELOW) {
    double dH1=(bTicksAbove ? getTickSize() : 0);
    double dH2=(bTicksBelow ? getTickSize() : 0) + Math.max(dXAxisLabelsThickness,dDecorationThickness[1]);
    if (dH1 + dH2 <= dHTotal) {
      dY1-=dH1;
      dY2+=dH2;
      dHTotal-=(dH1 + dH2);
    }
    if (iXTitleLocation == ABOVE) {
      dY1-=dXAxisTitleThickness;
    }
 else     if (iXTitleLocation == BELOW) {
      dY2+=dXAxisTitleThickness;
    }
    dDeltaY1=dY - dY1;
    dDeltaY2=dY2 - dY;
    if (dY2 > dBlockY + dBlockHeight) {
      final Object[] oaMinMax=scY.getMinMax();
      boolean bForceBreak=false;
      do {
        scY.setEndPoints(scY.getStart() + scY.getStartShift(),scY.getEnd() - scY.getEndShift());
        scY.resetShifts();
        double[] da=scY.getEndPoints();
        double dX2_X1=dY2 - (dBlockY + dBlockHeight);
        double dStart, dEnd;
        if (bForwardScale) {
          double dAMin_AMax=da[1] - da[0];
          double dX2_AMax=dY - da[0];
          dEnd=da[1] - (dX2_X1 / dX2_AMax) * dAMin_AMax;
          dStart=da[0];
          if (dEnd > dBlockY + dBlockHeight) {
            dEnd=dBlockY + dBlockHeight;
            bForceBreak=true;
          }
        }
 else {
          double dAMin_AMax=da[0] - da[1];
          double dX2_AMax=dY - da[1];
          dStart=da[0] - (dX2_X1 / dX2_AMax) * dAMin_AMax;
          dEnd=da[1];
          if (dStart > dBlockY + dBlockHeight) {
            dStart=dBlockY + dBlockHeight;
            bForceBreak=true;
          }
        }
        if (ChartUtil.mathEqual(Math.abs(dEnd - dStart),0)) {
          bForceBreak=true;
        }
        scY.setEndPoints(dStart,dEnd);
        scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
        if (!scY.isStepFixed()) {
          while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
            if (!scY.zoomOut()) {
              bForceBreak=true;
              break;
            }
            scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
            if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              bForceBreak=true;
              break;
            }
          }
        }
        dY=getLocation(scY,iv);
        dY2=dY + dDeltaY2;
        dY1=dY - dDeltaY1;
      }
 while (Math.abs(dY2 - (dBlockY + dBlockHeight)) > 1 && !bForceBreak);
    }
  }
  axPH.setTitleCoordinate((iXTitleLocation == ABOVE) ? dY1 - 1 : dY2 + 1 - dXAxisTitleThickness);
  return dY;
}","/** 
 * @param dBlockY
 * @param dBlockHeight
 * @param aax
 * @param axPH
 * @param scY
 * @param iXLabelLocation
 * @param iYLabelLocation
 * @param iXTitleLocation
 * @param laYAxisLabels
 * @param iv
 * @param dXAxisLabelsThickness
 * @param dDecorationThickness
 * @param dXAxisTitleThickness
 * @param dHTotal
 * @param dY
 * @param dY1
 * @param dY2
 * @param bTicksAbove
 * @param bTicksBelow
 * @param bForwardScale
 * @return
 * @throws ChartException
 */
private double adjustVerticalWithValueOrigin(double dBlockY,double dBlockHeight,AllAxes aax,final OneAxis axPH,final AutoScale scY,final int iXLabelLocation,final int iYLabelLocation,final int iXTitleLocation,final Label laYAxisLabels,final IntersectionValue iv,double dXAxisLabelsThickness,double[] dDecorationThickness,double dXAxisTitleThickness,double dHTotal,double dY,double dY1,double dY2,final boolean bTicksAbove,final boolean bTicksBelow,final boolean bForwardScale) throws ChartException {
  double dDeltaY1=0, dDeltaY2=0;
  if (iXLabelLocation == ABOVE) {
    double dH1=(bTicksAbove ? getTickSize() : 0) + Math.max(dXAxisLabelsThickness,dDecorationThickness[0]);
    double dH2=(bTicksBelow ? getTickSize() : 0);
    if (dH1 + dH2 <= dHTotal) {
      dY1-=dH1;
      dY2+=dH2;
    }
 else {
      axPH.setShowLabels(false);
    }
    if (iXTitleLocation == ABOVE) {
      dY1-=dXAxisTitleThickness;
    }
 else     if (iXTitleLocation == BELOW) {
      dY2+=dXAxisTitleThickness;
    }
    dDeltaY1=dY - dY1;
    dDeltaY2=dY2 - dY;
    if (dY1 < dBlockY) {
      final Object[] oaMinMax=scY.getMinMax();
      boolean bForceBreak=false;
      do {
        scY.setEndPoints(scY.getStart() + scY.getStartShift(),scY.getEnd() - scY.getEndShift());
        scY.resetShifts();
        double[] da=scY.getEndPoints();
        double dT_RI=dBlockY - dY1;
        double dStart, dEnd;
        if (bForwardScale) {
          double dAMin_AMax=da[1] - da[0];
          double dAMin_RI=da[1] - dY;
          dEnd=da[1];
          dStart=(dT_RI / dAMin_RI) * dAMin_AMax + da[0];
          if (dStart < dBlockY) {
            dStart=dBlockY;
            bForceBreak=true;
          }
        }
 else {
          double dAMin_AMax=da[0] - da[1];
          double dAMin_RI=da[0] - dY;
          dStart=da[0];
          dEnd=(dT_RI / dAMin_RI) * dAMin_AMax + da[1];
          if (dEnd < dBlockY) {
            dEnd=dBlockY;
            bForceBreak=true;
          }
        }
        scY.setEndPoints(dStart,dEnd);
        scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
        if (!scY.isStepFixed()) {
          while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
            if (!scY.zoomOut()) {
              bForceBreak=true;
              break;
            }
            scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
            if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              bForceBreak=true;
              break;
            }
          }
        }
        dY=getLocation(scY,iv);
        dY1=dY - dDeltaY1;
        dY2=dY + dDeltaY2;
      }
 while (Math.abs(dY1 - dBlockY) > 1 && !bForceBreak);
    }
  }
 else   if (iXLabelLocation == BELOW) {
    double dH1=(bTicksAbove ? getTickSize() : 0);
    double dH2=(bTicksBelow ? getTickSize() : 0) + Math.max(dXAxisLabelsThickness,dDecorationThickness[1]);
    if (dH1 + dH2 <= dHTotal) {
      dY1-=dH1;
      dY2+=dH2;
    }
    if (iXTitleLocation == ABOVE) {
      dY1-=dXAxisTitleThickness;
    }
 else     if (iXTitleLocation == BELOW) {
      dY2+=dXAxisTitleThickness;
    }
    dDeltaY1=dY - dY1;
    dDeltaY2=dY2 - dY;
    if (dY2 > dBlockY + dBlockHeight) {
      final Object[] oaMinMax=scY.getMinMax();
      boolean bForceBreak=false;
      do {
        scY.setEndPoints(scY.getStart() + scY.getStartShift(),scY.getEnd() - scY.getEndShift());
        scY.resetShifts();
        double[] da=scY.getEndPoints();
        double dX2_X1=dY2 - (dBlockY + dBlockHeight);
        double dStart, dEnd;
        if (bForwardScale) {
          double dAMin_AMax=da[1] - da[0];
          double dX2_AMax=dY - da[0];
          dEnd=da[1] - (dX2_X1 / dX2_AMax) * dAMin_AMax;
          dStart=da[0];
          if (dEnd > dBlockY + dBlockHeight) {
            dEnd=dBlockY + dBlockHeight;
            bForceBreak=true;
          }
        }
 else {
          double dAMin_AMax=da[0] - da[1];
          double dX2_AMax=dY - da[1];
          dStart=da[0] - (dX2_X1 / dX2_AMax) * dAMin_AMax;
          dEnd=da[1];
          if (dStart > dBlockY + dBlockHeight) {
            dStart=dBlockY + dBlockHeight;
            bForceBreak=true;
          }
        }
        if (ChartUtil.mathEqual(Math.abs(dEnd - dStart),0)) {
          bForceBreak=true;
        }
        scY.setEndPoints(dStart,dEnd);
        scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
        if (!scY.isStepFixed()) {
          while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
            if (!scY.zoomOut()) {
              bForceBreak=true;
              break;
            }
            scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
            if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              bForceBreak=true;
              break;
            }
          }
        }
        dY=getLocation(scY,iv);
        dY2=dY + dDeltaY2;
        dY1=dY - dDeltaY1;
      }
 while (Math.abs(dY2 - (dBlockY + dBlockHeight)) > 1 && !bForceBreak);
    }
  }
  axPH.setTitleCoordinate((iXTitleLocation == ABOVE) ? dY1 - 1 : dY2 + 1 - dXAxisTitleThickness);
  return dY;
}",0.9952806337434688
69325,"/** 
 * @param dBlockX
 * @param aax
 * @param axPV
 * @param scX
 * @param iXLabelLocation
 * @param iYLabelLocation
 * @param iYTitleLocation
 * @param laXAxisLabels
 * @param bTicksLeft
 * @param bTicksRight
 * @param dAppliedYAxisPlotSpacing
 * @param dYAxisLabelsThickness
 * @param dDecorationThickness
 * @param dYAxisTitleThickness
 * @param dX
 * @param dWTotal
 * @return
 * @throws ChartException
 */
private double adjustHorizontalWithOrigin(double dBlockX,AllAxes aax,final OneAxis axPV,final AutoScale scX,final int iXLabelLocation,final int iYLabelLocation,final int iYTitleLocation,final Label laXAxisLabels,final boolean bTicksLeft,final boolean bTicksRight,final double dAppliedYAxisPlotSpacing,double dYAxisLabelsThickness,double[] dDecorationThickness,double dYAxisTitleThickness,double dX,double dWTotal) throws ChartException {
  double dStart;
  double dEnd;
  double dX1;
  double dX2;
  if (scX.getDirection() == BACKWARD) {
    dX=getLocation(scX,IntersectionValue.MAX_VALUE);
  }
  dX-=dAppliedYAxisPlotSpacing;
  dX1=dX;
  dX2=dX;
  double dTickSize=getTickSize();
  if (bTicksLeft && dTickSize <= dWTotal) {
    dX1-=getTickSize();
    dWTotal-=dTickSize;
  }
 else {
    dTickSize=0;
  }
  double dW1=0, dW2=0;
  if (iYLabelLocation == LEFT) {
    dW1=Math.max(dYAxisLabelsThickness,dDecorationThickness[0]);
    dW2=Math.max(bTicksRight ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
  }
 else   if (iYLabelLocation == RIGHT) {
    dW1=dDecorationThickness[0];
    dW2=Math.max((bTicksRight ? getTickSize() : 0) + dYAxisLabelsThickness,dAppliedYAxisPlotSpacing);
  }
  if (dW1 + dW2 <= dWTotal) {
    dX1-=dW1;
    dX2+=dW2;
    dWTotal-=(dW1 + dW2);
  }
 else {
    axPV.setShowLabels(false);
  }
  if (iYTitleLocation == LEFT) {
    dX1-=dYAxisTitleThickness;
  }
 else   if (iYTitleLocation == RIGHT) {
    dX2+=dYAxisTitleThickness;
  }
  if (dX1 < dBlockX) {
    final double dDelta=(dBlockX - dX1);
    dX1=dBlockX;
    dX+=dDelta;
    dX2+=dDelta;
  }
  final double dDeltaX1=dX - dX1;
  final double dDeltaX2=dX2 - dX;
  if (iYLabelLocation == RIGHT) {
    dX2=(dX + dAppliedYAxisPlotSpacing);
  }
  double dYAxisThickness=dX2 - dX1;
  scX.computeAxisStartEndShifts(ids,laXAxisLabels,HORIZONTAL,iXLabelLocation,aax);
  boolean startEndChanged=false;
  if (scX.getDirection() == BACKWARD) {
    if (dYAxisThickness > scX.getEndShift()) {
      dEnd=dX2;
      startEndChanged=true;
    }
 else {
      dEnd=scX.getEnd();
    }
    dStart=scX.getStart();
  }
 else {
    if (dYAxisThickness > scX.getStartShift()) {
      dStart=dX2;
      startEndChanged=true;
    }
 else {
      dStart=scX.getStart();
    }
    dEnd=scX.getEnd();
  }
  scX.resetShifts();
  scX.setEndPoints(dStart,dEnd);
  if (scX.getDirection() == BACKWARD) {
    scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,!startEndChanged,aax);
  }
 else {
    scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,!startEndChanged,true,aax);
  }
  if (!scX.isStepFixed()) {
    final Object[] oaMinMax=scX.getMinMax();
    while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
      if (!scX.zoomOut()) {
        break;
      }
      scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
      int tickCount;
      if (scX.getDirection() == BACKWARD) {
        tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,!startEndChanged,aax);
      }
 else {
        tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,!startEndChanged,true,aax);
      }
      if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
        break;
      }
    }
  }
  if (scX.getDirection() == BACKWARD) {
    if (dYAxisThickness < scX.getEndShift()) {
      dX=scX.getEnd() - (dX2 - dX);
    }
  }
 else {
    if (dYAxisThickness < scX.getStartShift()) {
      dX=scX.getStart() - (dX2 - dX);
    }
  }
  dX-=insCA.getLeft();
  dX2=dX + dDeltaX2;
  dX1=dX - dDeltaX1;
  axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX2 + 1 - dYAxisTitleThickness);
  return dX;
}","/** 
 * @param dBlockX
 * @param aax
 * @param axPV
 * @param scX
 * @param iXLabelLocation
 * @param iYLabelLocation
 * @param iYTitleLocation
 * @param laXAxisLabels
 * @param bTicksLeft
 * @param bTicksRight
 * @param dAppliedYAxisPlotSpacing
 * @param dYAxisLabelsThickness
 * @param dDecorationThickness
 * @param dYAxisTitleThickness
 * @param dX
 * @param dWTotal
 * @return
 * @throws ChartException
 */
private double adjustHorizontalWithOrigin(double dBlockX,AllAxes aax,final OneAxis axPV,final AutoScale scX,final int iXLabelLocation,final int iYLabelLocation,final int iYTitleLocation,final Label laXAxisLabels,final boolean bTicksLeft,final boolean bTicksRight,final double dAppliedYAxisPlotSpacing,double dYAxisLabelsThickness,double[] dDecorationThickness,double dYAxisTitleThickness,double dX,double dWTotal) throws ChartException {
  double dStart;
  double dEnd;
  double dX1;
  double dX2;
  if (scX.getDirection() == BACKWARD) {
    dX=getLocation(scX,IntersectionValue.MAX_VALUE);
  }
  dX-=dAppliedYAxisPlotSpacing;
  dX1=dX;
  dX2=dX;
  double dTickSize=getTickSize();
  if (bTicksLeft && dTickSize <= dWTotal) {
    dX1-=getTickSize();
    dWTotal-=dTickSize;
  }
 else {
    dTickSize=0;
  }
  double dW1=0, dW2=0;
  if (iYLabelLocation == LEFT) {
    dW1=Math.max(dYAxisLabelsThickness,dDecorationThickness[0]);
    dW2=Math.max(bTicksRight ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
  }
 else   if (iYLabelLocation == RIGHT) {
    dW1=dDecorationThickness[0];
    dW2=Math.max((bTicksRight ? getTickSize() : 0) + dYAxisLabelsThickness,dAppliedYAxisPlotSpacing);
  }
  if (dW1 + dW2 <= dWTotal) {
    dX1-=dW1;
    dX2+=dW2;
  }
 else {
    axPV.setShowLabels(false);
  }
  if (iYTitleLocation == LEFT) {
    dX1-=dYAxisTitleThickness;
  }
 else   if (iYTitleLocation == RIGHT) {
    dX2+=dYAxisTitleThickness;
  }
  if (dX1 < dBlockX) {
    final double dDelta=(dBlockX - dX1);
    dX1=dBlockX;
    dX+=dDelta;
    dX2+=dDelta;
  }
  final double dDeltaX1=dX - dX1;
  final double dDeltaX2=dX2 - dX;
  if (iYLabelLocation == RIGHT) {
    dX2=(dX + dAppliedYAxisPlotSpacing);
  }
  double dYAxisThickness=dX2 - dX1;
  scX.computeAxisStartEndShifts(ids,laXAxisLabels,HORIZONTAL,iXLabelLocation,aax);
  boolean startEndChanged=false;
  if (scX.getDirection() == BACKWARD) {
    if (dYAxisThickness > scX.getEndShift()) {
      dEnd=dX2;
      startEndChanged=true;
    }
 else {
      dEnd=scX.getEnd();
    }
    dStart=scX.getStart();
  }
 else {
    if (dYAxisThickness > scX.getStartShift()) {
      dStart=dX2;
      startEndChanged=true;
    }
 else {
      dStart=scX.getStart();
    }
    dEnd=scX.getEnd();
  }
  scX.resetShifts();
  scX.setEndPoints(dStart,dEnd);
  if (scX.getDirection() == BACKWARD) {
    scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,!startEndChanged,aax);
  }
 else {
    scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,!startEndChanged,true,aax);
  }
  if (!scX.isStepFixed()) {
    final Object[] oaMinMax=scX.getMinMax();
    while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
      if (!scX.zoomOut()) {
        break;
      }
      scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
      int tickCount;
      if (scX.getDirection() == BACKWARD) {
        tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,!startEndChanged,aax);
      }
 else {
        tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,!startEndChanged,true,aax);
      }
      if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
        break;
      }
    }
  }
  if (scX.getDirection() == BACKWARD) {
    if (dYAxisThickness < scX.getEndShift()) {
      dX=scX.getEnd() - (dX2 - dX);
    }
  }
 else {
    if (dYAxisThickness < scX.getStartShift()) {
      dX=scX.getStart() - (dX2 - dX);
    }
  }
  dX-=insCA.getLeft();
  dX2=dX + dDeltaX2;
  dX1=dX - dDeltaX1;
  axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX2 + 1 - dYAxisTitleThickness);
  return dX;
}",0.9968423609424338
69326,"/** 
 * @param dBlockX
 * @param dBlockWidth
 * @param aax
 * @param axPV
 * @param scX
 * @param iXLabelLocation
 * @param iYLabelLocation
 * @param iYTitleLocation
 * @param laXAxisLabels
 * @param bTicksLeft
 * @param bTicksRight
 * @param dAppliedYAxisPlotSpacing
 * @param dYAxisLabelsThickness
 * @param dDecorationThickness
 * @param dYAxisTitleThickness
 * @param dX
 * @param dWTotal
 * @return
 * @throws ChartException
 */
private double adjustHorizontalWithMaxOrigin(double dBlockX,double dBlockWidth,AllAxes aax,final OneAxis axPV,final AutoScale scX,final int iXLabelLocation,final int iYLabelLocation,final int iYTitleLocation,final Label laXAxisLabels,final boolean bTicksLeft,final boolean bTicksRight,final double dAppliedYAxisPlotSpacing,double dYAxisLabelsThickness,double[] dDecorationThickness,double dYAxisTitleThickness,double dX,double dWTotal) throws ChartException {
  double dStart;
  double dEnd;
  double dX1;
  double dX2;
  if (scX.getDirection() == BACKWARD) {
    dX=getLocation(scX,IntersectionValue.MIN_VALUE);
  }
  dX+=dAppliedYAxisPlotSpacing;
  dWTotal-=dAppliedYAxisPlotSpacing;
  dX1=dX;
  dX2=dX;
  if (bTicksRight && getTickSize() <= dWTotal) {
    dX2+=getTickSize();
    dWTotal-=getTickSize();
  }
 else {
  }
  double dW1=0, dW2=0;
  if (iYLabelLocation == RIGHT) {
    dW1=Math.max((bTicksLeft ? getTickSize() : 0) + dDecorationThickness[0],dAppliedYAxisPlotSpacing);
    dW2=Math.max(dYAxisLabelsThickness,dDecorationThickness[1]);
  }
 else   if (iYLabelLocation == LEFT) {
    dW1=Math.max((bTicksLeft ? getTickSize() : 0) + Math.max(dYAxisLabelsThickness,dDecorationThickness[0]),dAppliedYAxisPlotSpacing);
    dW2=dDecorationThickness[1];
  }
  if (dW1 + dW2 <= dWTotal) {
    dX1-=dW1;
    dX2+=dW2;
    dWTotal-=(dW1 + dW2);
  }
 else {
    axPV.setShowLabels(false);
  }
  if (iYTitleLocation == RIGHT) {
    dX2+=dYAxisTitleThickness;
  }
 else   if (iYTitleLocation == LEFT) {
    dX1-=dYAxisTitleThickness;
  }
  if (dX2 > dBlockX + dBlockWidth) {
    final double dDelta=dX2 - (dBlockX + dBlockWidth);
    dX2=dBlockX + dBlockWidth;
    dX-=dDelta;
    dX1-=dDelta;
  }
  final double dDeltaX1=dX - dX1;
  final double dDeltaX2=dX2 - dX;
  if (iYLabelLocation == LEFT) {
    dX1=(dX - dAppliedYAxisPlotSpacing);
  }
  double dYAxisThickness=dX2 - dX1;
  scX.computeAxisStartEndShifts(ids,laXAxisLabels,HORIZONTAL,iXLabelLocation,aax);
  boolean startEndChanged=false;
  if (scX.getDirection() == BACKWARD) {
    if (dYAxisThickness > scX.getStartShift()) {
      dStart=dX1;
      startEndChanged=true;
    }
 else {
      dStart=scX.getStart();
    }
    dEnd=scX.getEnd();
  }
 else {
    if (dYAxisThickness > scX.getEndShift()) {
      dEnd=dX1;
      startEndChanged=true;
    }
 else {
      dEnd=scX.getEnd();
    }
    dStart=scX.getStart();
  }
  scX.resetShifts();
  scX.setEndPoints(dStart,dEnd);
  if (scX.getDirection() == BACKWARD) {
    scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,!startEndChanged,true,aax);
  }
 else {
    scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,!startEndChanged,aax);
  }
  if (!scX.isStepFixed()) {
    final Object[] oaMinMax=scX.getMinMax();
    while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
      if (!scX.zoomOut()) {
        break;
      }
      scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
      int tickCount;
      if (scX.getDirection() == BACKWARD) {
        tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,!startEndChanged,true,aax);
      }
 else {
        tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,!startEndChanged,aax);
      }
      if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
        break;
      }
    }
  }
  if (scX.getDirection() == BACKWARD) {
    if (dYAxisThickness < scX.getStartShift()) {
      dX=scX.getStart() - (dX1 - dX);
    }
  }
 else {
    if (dYAxisThickness < scX.getEndShift()) {
      dX=scX.getEnd() - (dX1 - dX);
    }
  }
  dX+=insCA.getRight();
  dX2=dX + dDeltaX2;
  dX1=dX - dDeltaX1;
  axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX2 + 1 - dYAxisTitleThickness);
  return dX;
}","/** 
 * @param dBlockX
 * @param dBlockWidth
 * @param aax
 * @param axPV
 * @param scX
 * @param iXLabelLocation
 * @param iYLabelLocation
 * @param iYTitleLocation
 * @param laXAxisLabels
 * @param bTicksLeft
 * @param bTicksRight
 * @param dAppliedYAxisPlotSpacing
 * @param dYAxisLabelsThickness
 * @param dDecorationThickness
 * @param dYAxisTitleThickness
 * @param dX
 * @param dWTotal
 * @return
 * @throws ChartException
 */
private double adjustHorizontalWithMaxOrigin(double dBlockX,double dBlockWidth,AllAxes aax,final OneAxis axPV,final AutoScale scX,final int iXLabelLocation,final int iYLabelLocation,final int iYTitleLocation,final Label laXAxisLabels,final boolean bTicksLeft,final boolean bTicksRight,final double dAppliedYAxisPlotSpacing,double dYAxisLabelsThickness,double[] dDecorationThickness,double dYAxisTitleThickness,double dX,double dWTotal) throws ChartException {
  double dStart;
  double dEnd;
  double dX1;
  double dX2;
  if (scX.getDirection() == BACKWARD) {
    dX=getLocation(scX,IntersectionValue.MIN_VALUE);
  }
  dX+=dAppliedYAxisPlotSpacing;
  dWTotal-=dAppliedYAxisPlotSpacing;
  dX1=dX;
  dX2=dX;
  if (bTicksRight && getTickSize() <= dWTotal) {
    dX2+=getTickSize();
    dWTotal-=getTickSize();
  }
 else {
  }
  double dW1=0, dW2=0;
  if (iYLabelLocation == RIGHT) {
    dW1=Math.max((bTicksLeft ? getTickSize() : 0) + dDecorationThickness[0],dAppliedYAxisPlotSpacing);
    dW2=Math.max(dYAxisLabelsThickness,dDecorationThickness[1]);
  }
 else   if (iYLabelLocation == LEFT) {
    dW1=Math.max((bTicksLeft ? getTickSize() : 0) + Math.max(dYAxisLabelsThickness,dDecorationThickness[0]),dAppliedYAxisPlotSpacing);
    dW2=dDecorationThickness[1];
  }
  if (dW1 + dW2 <= dWTotal) {
    dX1-=dW1;
    dX2+=dW2;
  }
 else {
    axPV.setShowLabels(false);
  }
  if (iYTitleLocation == RIGHT) {
    dX2+=dYAxisTitleThickness;
  }
 else   if (iYTitleLocation == LEFT) {
    dX1-=dYAxisTitleThickness;
  }
  if (dX2 > dBlockX + dBlockWidth) {
    final double dDelta=dX2 - (dBlockX + dBlockWidth);
    dX2=dBlockX + dBlockWidth;
    dX-=dDelta;
    dX1-=dDelta;
  }
  final double dDeltaX1=dX - dX1;
  final double dDeltaX2=dX2 - dX;
  if (iYLabelLocation == LEFT) {
    dX1=(dX - dAppliedYAxisPlotSpacing);
  }
  double dYAxisThickness=dX2 - dX1;
  scX.computeAxisStartEndShifts(ids,laXAxisLabels,HORIZONTAL,iXLabelLocation,aax);
  boolean startEndChanged=false;
  if (scX.getDirection() == BACKWARD) {
    if (dYAxisThickness > scX.getStartShift()) {
      dStart=dX1;
      startEndChanged=true;
    }
 else {
      dStart=scX.getStart();
    }
    dEnd=scX.getEnd();
  }
 else {
    if (dYAxisThickness > scX.getEndShift()) {
      dEnd=dX1;
      startEndChanged=true;
    }
 else {
      dEnd=scX.getEnd();
    }
    dStart=scX.getStart();
  }
  scX.resetShifts();
  scX.setEndPoints(dStart,dEnd);
  if (scX.getDirection() == BACKWARD) {
    scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,!startEndChanged,true,aax);
  }
 else {
    scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,!startEndChanged,aax);
  }
  if (!scX.isStepFixed()) {
    final Object[] oaMinMax=scX.getMinMax();
    while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
      if (!scX.zoomOut()) {
        break;
      }
      scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
      int tickCount;
      if (scX.getDirection() == BACKWARD) {
        tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,!startEndChanged,true,aax);
      }
 else {
        tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,!startEndChanged,aax);
      }
      if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
        break;
      }
    }
  }
  if (scX.getDirection() == BACKWARD) {
    if (dYAxisThickness < scX.getStartShift()) {
      dX=scX.getStart() - (dX1 - dX);
    }
  }
 else {
    if (dYAxisThickness < scX.getEndShift()) {
      dX=scX.getEnd() - (dX1 - dX);
    }
  }
  dX+=insCA.getRight();
  dX2=dX + dDeltaX2;
  dX1=dX - dDeltaX1;
  axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX2 + 1 - dYAxisTitleThickness);
  return dX;
}",0.996946923438234
69327,"/** 
 * @param dBlockY
 * @param dBlockHeight
 * @param aax
 * @param axPH
 * @param scY
 * @param iXLabelLocation
 * @param iYLabelLocation
 * @param iXTitleLocation
 * @param laYAxisLabels
 * @param dXAxisLabelsThickness
 * @param dDecorationThickness
 * @param dXAxisTitleThickness
 * @param dHTotal
 * @param dY
 * @param bTicksAbove
 * @param bTicksBelow
 * @param dAppliedXAxisPlotSpacing
 * @param bForwardScale
 * @return
 * @throws ChartException
 */
private double adjustVerticalWithMaxOrigin(double dBlockY,double dBlockHeight,AllAxes aax,final OneAxis axPH,final AutoScale scY,final int iXLabelLocation,final int iYLabelLocation,final int iXTitleLocation,final Label laYAxisLabels,double dXAxisLabelsThickness,double[] dDecorationThickness,double dXAxisTitleThickness,double dHTotal,double dY,final boolean bTicksAbove,final boolean bTicksBelow,final double dAppliedXAxisPlotSpacing,final boolean bForwardScale) throws ChartException {
  double dY1;
  double dY2;
  dY+=dAppliedXAxisPlotSpacing;
  dHTotal-=dAppliedXAxisPlotSpacing;
  dY1=dY;
  dY2=dY;
  double dTickSize=getTickSize();
  if (bTicksBelow && dTickSize < dHTotal) {
    dY2+=dTickSize;
    dHTotal-=dTickSize;
  }
 else {
    dTickSize=0;
  }
  if (iXLabelLocation == ABOVE) {
    double dXLabelHeight=Math.max((bTicksAbove ? dTickSize : 0) + dXAxisLabelsThickness,dAppliedXAxisPlotSpacing);
    if (dXLabelHeight + dDecorationThickness[1] < dHTotal) {
      dY1-=dXLabelHeight;
      dY2+=dDecorationThickness[1];
      dHTotal-=(dXLabelHeight + dDecorationThickness[1]);
    }
 else {
      dXLabelHeight=0;
      axPH.setShowLabels(false);
    }
  }
 else   if (iXLabelLocation == BELOW) {
    double dXLabelHeight=Math.max(dXAxisLabelsThickness,dDecorationThickness[1]);
    double dHt1=Math.max(bTicksAbove ? dTickSize : 0,dAppliedXAxisPlotSpacing);
    if (dXLabelHeight + dHt1 <= dHTotal) {
      dY2+=dXLabelHeight;
      dY1-=dHt1;
      dHTotal-=(dXLabelHeight + dHt1);
    }
 else {
      dXLabelHeight=0;
      axPH.setShowLabels(false);
    }
  }
  if (iXTitleLocation == ABOVE) {
    dY1-=dXAxisTitleThickness;
  }
 else   if (iXTitleLocation == BELOW) {
    dY2+=dXAxisTitleThickness;
  }
  if (dY2 > dBlockY + dBlockHeight) {
    final double dDelta=(dY2 - (dBlockY + dBlockHeight));
    dY2=dBlockY + dBlockHeight;
    dY-=dDelta;
    dY1-=dDelta;
  }
  double dDeltaY1=dY - dY1;
  double dDeltaY2=dY2 - dY;
  double dXAxisThickness=0;
  if (iXLabelLocation == ABOVE) {
    dY1=(dY - dAppliedXAxisPlotSpacing);
    dXAxisThickness=dY2 - dY1;
  }
 else   if (iXLabelLocation == BELOW) {
    dXAxisThickness=dY2 - dY1;
  }
  if ((bForwardScale && dXAxisThickness > scY.getEndShift()) || (!bForwardScale && dXAxisThickness > scY.getStartShift())) {
    double dStart=dY1 + scY.getStartShift(), dEnd=scY.getEnd();
    if (bForwardScale) {
      dStart=scY.getStart();
      dEnd=dY1 + scY.getEndShift();
    }
    scY.resetShifts();
    if (dStart < dEnd + 1) {
      dStart=dEnd + 1;
    }
    scY.setEndPoints(dStart,dEnd);
    scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
    if (!scY.isStepFixed()) {
      final Object[] oaMinMax=scY.getMinMax();
      while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
        if (!scY.zoomOut()) {
          break;
        }
        double dOldStep=((Number)scY.getStep()).doubleValue();
        scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
        double dNewStep=((Number)scY.getStep()).doubleValue();
        if (dNewStep < dOldStep) {
          break;
        }
        if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
          break;
        }
      }
    }
  }
  dY+=insCA.getBottom();
  dY1=dY - dDeltaY1;
  dY2=dY + dDeltaY2;
  axPH.setTitleCoordinate((iXTitleLocation == ABOVE) ? dY1 - 1 : dY2 + 1 - dXAxisTitleThickness);
  return dY;
}","/** 
 * @param dBlockY
 * @param dBlockHeight
 * @param aax
 * @param axPH
 * @param scY
 * @param iXLabelLocation
 * @param iYLabelLocation
 * @param iXTitleLocation
 * @param laYAxisLabels
 * @param dXAxisLabelsThickness
 * @param dDecorationThickness
 * @param dXAxisTitleThickness
 * @param dHTotal
 * @param dY
 * @param bTicksAbove
 * @param bTicksBelow
 * @param dAppliedXAxisPlotSpacing
 * @param bForwardScale
 * @return
 * @throws ChartException
 */
private double adjustVerticalWithMaxOrigin(double dBlockY,double dBlockHeight,AllAxes aax,final OneAxis axPH,final AutoScale scY,final int iXLabelLocation,final int iYLabelLocation,final int iXTitleLocation,final Label laYAxisLabels,double dXAxisLabelsThickness,double[] dDecorationThickness,double dXAxisTitleThickness,double dHTotal,double dY,final boolean bTicksAbove,final boolean bTicksBelow,final double dAppliedXAxisPlotSpacing,final boolean bForwardScale) throws ChartException {
  double dY1;
  double dY2;
  dY+=dAppliedXAxisPlotSpacing;
  dHTotal-=dAppliedXAxisPlotSpacing;
  dY1=dY;
  dY2=dY;
  double dTickSize=getTickSize();
  if (bTicksBelow && dTickSize < dHTotal) {
    dY2+=dTickSize;
    dHTotal-=dTickSize;
  }
 else {
    dTickSize=0;
  }
  if (iXLabelLocation == ABOVE) {
    double dXLabelHeight=Math.max((bTicksAbove ? dTickSize : 0) + dXAxisLabelsThickness,dAppliedXAxisPlotSpacing);
    if (dXLabelHeight + dDecorationThickness[1] < dHTotal) {
      dY1-=dXLabelHeight;
      dY2+=dDecorationThickness[1];
    }
 else {
      dXLabelHeight=0;
      axPH.setShowLabels(false);
    }
  }
 else   if (iXLabelLocation == BELOW) {
    double dXLabelHeight=Math.max(dXAxisLabelsThickness,dDecorationThickness[1]);
    double dHt1=Math.max(bTicksAbove ? dTickSize : 0,dAppliedXAxisPlotSpacing);
    if (dXLabelHeight + dHt1 <= dHTotal) {
      dY2+=dXLabelHeight;
      dY1-=dHt1;
    }
 else {
      dXLabelHeight=0;
      axPH.setShowLabels(false);
    }
  }
  if (iXTitleLocation == ABOVE) {
    dY1-=dXAxisTitleThickness;
  }
 else   if (iXTitleLocation == BELOW) {
    dY2+=dXAxisTitleThickness;
  }
  if (dY2 > dBlockY + dBlockHeight) {
    final double dDelta=(dY2 - (dBlockY + dBlockHeight));
    dY2=dBlockY + dBlockHeight;
    dY-=dDelta;
    dY1-=dDelta;
  }
  double dDeltaY1=dY - dY1;
  double dDeltaY2=dY2 - dY;
  double dXAxisThickness=0;
  if (iXLabelLocation == ABOVE) {
    dY1=(dY - dAppliedXAxisPlotSpacing);
    dXAxisThickness=dY2 - dY1;
  }
 else   if (iXLabelLocation == BELOW) {
    dXAxisThickness=dY2 - dY1;
  }
  if ((bForwardScale && dXAxisThickness > scY.getEndShift()) || (!bForwardScale && dXAxisThickness > scY.getStartShift())) {
    double dStart=dY1 + scY.getStartShift(), dEnd=scY.getEnd();
    if (bForwardScale) {
      dStart=scY.getStart();
      dEnd=dY1 + scY.getEndShift();
    }
    scY.resetShifts();
    if (dStart < dEnd + 1) {
      dStart=dEnd + 1;
    }
    scY.setEndPoints(dStart,dEnd);
    scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
    if (!scY.isStepFixed()) {
      final Object[] oaMinMax=scY.getMinMax();
      while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
        if (!scY.zoomOut()) {
          break;
        }
        double dOldStep=((Number)scY.getStep()).doubleValue();
        scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
        double dNewStep=((Number)scY.getStep()).doubleValue();
        if (dNewStep < dOldStep) {
          break;
        }
        if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
          break;
        }
      }
    }
  }
  dY+=insCA.getBottom();
  dY1=dY - dDeltaY1;
  dY2=dY + dDeltaY2;
  axPH.setTitleCoordinate((iXTitleLocation == ABOVE) ? dY1 - 1 : dY2 + 1 - dXAxisTitleThickness);
  return dY;
}",0.9433388262137152
69328,"/** 
 * @param dBlockY
 * @param aax
 * @param axPH
 * @param scY
 * @param iXLabelLocation
 * @param iYLabelLocation
 * @param iXTitleLocation
 * @param laYAxisLabels
 * @param dXAxisLabelsThickness
 * @param dDecorationThickness
 * @param dXAxisTitleThickness
 * @param dHTotal
 * @param dY
 * @param bTicksAbove
 * @param bTicksBelow
 * @param dAppliedXAxisPlotSpacing
 * @param bForwardScale
 * @return
 * @throws ChartException
 */
private double adjustVerticalWithMinOrigin(double dBlockY,AllAxes aax,final OneAxis axPH,final AutoScale scY,final int iXLabelLocation,final int iYLabelLocation,final int iXTitleLocation,final Label laYAxisLabels,double dXAxisLabelsThickness,double[] dDecorationThickness,double dXAxisTitleThickness,double dHTotal,double dY,final boolean bTicksAbove,final boolean bTicksBelow,final double dAppliedXAxisPlotSpacing,final boolean bForwardScale) throws ChartException {
  double dY1;
  double dY2;
  dY-=dAppliedXAxisPlotSpacing;
  dHTotal-=dAppliedXAxisPlotSpacing;
  dY1=dY;
  dY2=dY;
  double dTickSize=getTickSize();
  if (bTicksAbove && dTickSize <= dHTotal) {
    dY1-=dTickSize;
    dHTotal-=dTickSize;
  }
 else {
    dTickSize=0;
  }
  double dH1=0;
  double dH2=0;
  if (iXLabelLocation == ABOVE) {
    dH1=Math.max(dXAxisLabelsThickness,dDecorationThickness[0]);
    dH2=Math.max(bTicksBelow ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
  }
 else   if (iXLabelLocation == BELOW) {
    dH1=dDecorationThickness[0];
    dH2+=Math.max((bTicksBelow ? getTickSize() : 0) + dXAxisLabelsThickness,dAppliedXAxisPlotSpacing);
  }
  if (dH1 + dH2 <= dHTotal) {
    dY1-=dH1;
    dY2+=dH2;
    dHTotal-=(dH1 + dH2);
  }
 else {
    axPH.setShowLabels(false);
  }
  if (iXTitleLocation == ABOVE) {
    dY1-=dXAxisTitleThickness;
  }
 else   if (iXTitleLocation == BELOW) {
    dY2+=dXAxisTitleThickness;
  }
  if (dY1 < dBlockY) {
    final double dDelta=(dBlockY - dY1);
    dY1=dBlockY;
    dY+=dDelta;
    dY2+=dDelta;
  }
  double dDeltaY1=dY - dY1;
  double dDeltaY2=dY2 - dY;
  double dXAxisThickness=0;
  if (iXLabelLocation == ABOVE) {
    dXAxisThickness=dY2 - dY1;
  }
 else   if (iXLabelLocation == BELOW) {
    dY2=(dY + dAppliedXAxisPlotSpacing);
    dXAxisThickness=dY2 - dY1;
  }
  if ((bForwardScale && dXAxisThickness > scY.getStartShift()) || (!bForwardScale && dXAxisThickness > scY.getEndShift())) {
    double dStart=scY.getStart(), dEnd=dY2 - scY.getEndShift();
    if (bForwardScale) {
      dStart=dY2 - scY.getStartShift();
      dEnd=scY.getEnd();
    }
    scY.resetShifts();
    scY.setEndPoints(dStart,dEnd);
    scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
    if (!scY.isStepFixed()) {
      final Object[] oaMinMax=scY.getMinMax();
      while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
        if (!scY.zoomOut()) {
          break;
        }
        scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
        if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
          break;
        }
      }
    }
  }
  dY-=insCA.getTop();
  dY1=dY - dDeltaY1;
  dY2=dY + dDeltaY2;
  axPH.setTitleCoordinate((iXTitleLocation == ABOVE) ? dY1 - 1 : dY2 + 1 - dXAxisTitleThickness);
  return dY;
}","/** 
 * @param dBlockY
 * @param aax
 * @param axPH
 * @param scY
 * @param iXLabelLocation
 * @param iYLabelLocation
 * @param iXTitleLocation
 * @param laYAxisLabels
 * @param dXAxisLabelsThickness
 * @param dDecorationThickness
 * @param dXAxisTitleThickness
 * @param dHTotal
 * @param dY
 * @param bTicksAbove
 * @param bTicksBelow
 * @param dAppliedXAxisPlotSpacing
 * @param bForwardScale
 * @return
 * @throws ChartException
 */
private double adjustVerticalWithMinOrigin(double dBlockY,AllAxes aax,final OneAxis axPH,final AutoScale scY,final int iXLabelLocation,final int iYLabelLocation,final int iXTitleLocation,final Label laYAxisLabels,double dXAxisLabelsThickness,double[] dDecorationThickness,double dXAxisTitleThickness,double dHTotal,double dY,final boolean bTicksAbove,final boolean bTicksBelow,final double dAppliedXAxisPlotSpacing,final boolean bForwardScale) throws ChartException {
  double dY1;
  double dY2;
  dY-=dAppliedXAxisPlotSpacing;
  dHTotal-=dAppliedXAxisPlotSpacing;
  dY1=dY;
  dY2=dY;
  double dTickSize=getTickSize();
  if (bTicksAbove && dTickSize <= dHTotal) {
    dY1-=dTickSize;
    dHTotal-=dTickSize;
  }
 else {
    dTickSize=0;
  }
  double dH1=0;
  double dH2=0;
  if (iXLabelLocation == ABOVE) {
    dH1=Math.max(dXAxisLabelsThickness,dDecorationThickness[0]);
    dH2=Math.max(bTicksBelow ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
  }
 else   if (iXLabelLocation == BELOW) {
    dH1=dDecorationThickness[0];
    dH2+=Math.max((bTicksBelow ? getTickSize() : 0) + dXAxisLabelsThickness,dAppliedXAxisPlotSpacing);
  }
  if (dH1 + dH2 <= dHTotal) {
    dY1-=dH1;
    dY2+=dH2;
  }
 else {
    axPH.setShowLabels(false);
  }
  if (iXTitleLocation == ABOVE) {
    dY1-=dXAxisTitleThickness;
  }
 else   if (iXTitleLocation == BELOW) {
    dY2+=dXAxisTitleThickness;
  }
  if (dY1 < dBlockY) {
    final double dDelta=(dBlockY - dY1);
    dY1=dBlockY;
    dY+=dDelta;
    dY2+=dDelta;
  }
  double dDeltaY1=dY - dY1;
  double dDeltaY2=dY2 - dY;
  double dXAxisThickness=0;
  if (iXLabelLocation == ABOVE) {
    dXAxisThickness=dY2 - dY1;
  }
 else   if (iXLabelLocation == BELOW) {
    dY2=(dY + dAppliedXAxisPlotSpacing);
    dXAxisThickness=dY2 - dY1;
  }
  if ((bForwardScale && dXAxisThickness > scY.getStartShift()) || (!bForwardScale && dXAxisThickness > scY.getEndShift())) {
    double dStart=scY.getStart(), dEnd=dY2 - scY.getEndShift();
    if (bForwardScale) {
      dStart=dY2 - scY.getStartShift();
      dEnd=scY.getEnd();
    }
    scY.resetShifts();
    scY.setEndPoints(dStart,dEnd);
    scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
    if (!scY.isStepFixed()) {
      final Object[] oaMinMax=scY.getMinMax();
      while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
        if (!scY.zoomOut()) {
          break;
        }
        scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
        if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
          break;
        }
      }
    }
  }
  dY-=insCA.getTop();
  dY1=dY - dDeltaY1;
  dY2=dY + dDeltaY2;
  axPH.setTitleCoordinate((iXTitleLocation == ABOVE) ? dY1 - 1 : dY2 + 1 - dXAxisTitleThickness);
  return dY;
}",0.9961159247086944
69329,"/** 
 * This method validates several crucial properties for an axis associated with a Chart
 * @param ax The axis to validate
 * @throws ChartException
 */
protected void validateAxis(Axis ax) throws ChartException {
  LineAttributes liaTicks=ax.getMajorGrid().getTickAttributes();
  liaTicks=ax.getMinorGrid().getTickAttributes();
  final int iOrientation=ax.getOrientation().getValue();
  if (iOrientation == Orientation.VERTICAL) {
    int iPosition=-1;
    if (ax.getLabel().isVisible()) {
      iPosition=ax.getLabelPosition().getValue();
      if (iPosition != Position.LEFT && iPosition != Position.RIGHT) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getLabelPosition().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    if (ax.getTitle().isVisible()) {
      iPosition=ax.getTitlePosition().getValue();
      if (iPosition != Position.LEFT && iPosition != Position.RIGHT) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getLabelPosition().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    int iTickStyle=ax.getMajorGrid().getTickStyle().getValue();
    if (iTickStyle != TickStyle.ACROSS && iTickStyle != TickStyle.LEFT && iTickStyle != TickStyle.RIGHT) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getMajorGrid().getTickStyle().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
    }
    iTickStyle=ax.getMinorGrid().getTickStyle().getValue();
    if (iTickStyle != TickStyle.ACROSS && iTickStyle != TickStyle.LEFT && iTickStyle != TickStyle.RIGHT) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getMinorGrid().getTickStyle().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
 else   if (iOrientation == Orientation.HORIZONTAL) {
    int iPosition=-1;
    if (ax.getLabel().isVisible()) {
      iPosition=ax.getLabelPosition().getValue();
      if (iPosition != Position.ABOVE && iPosition != Position.BELOW) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getLabelPosition().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    if (ax.getTitle().isVisible()) {
      iPosition=ax.getTitlePosition().getValue();
      if (iPosition != Position.ABOVE && iPosition != Position.BELOW) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getTitlePosition().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    int iTickStyle=ax.getMajorGrid().getTickStyle().getValue();
    if (iTickStyle != TickStyle.ACROSS && iTickStyle != TickStyle.ABOVE && iTickStyle != TickStyle.BELOW) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getMajorGrid().getTickStyle().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
    }
    iTickStyle=ax.getMinorGrid().getTickStyle().getValue();
    if (iTickStyle != TickStyle.ACROSS && iTickStyle != TickStyle.ABOVE && iTickStyle != TickStyle.BELOW) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getMinorGrid().getTickStyle().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
}","/** 
 * This method validates several crucial properties for an axis associated with a Chart
 * @param ax The axis to validate
 * @throws ChartException
 */
protected void validateAxis(Axis ax) throws ChartException {
  final int iOrientation=ax.getOrientation().getValue();
  if (iOrientation == Orientation.VERTICAL) {
    int iPosition=-1;
    if (ax.getLabel().isVisible()) {
      iPosition=ax.getLabelPosition().getValue();
      if (iPosition != Position.LEFT && iPosition != Position.RIGHT) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getLabelPosition().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    if (ax.getTitle().isVisible()) {
      iPosition=ax.getTitlePosition().getValue();
      if (iPosition != Position.LEFT && iPosition != Position.RIGHT) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getLabelPosition().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    int iTickStyle=ax.getMajorGrid().getTickStyle().getValue();
    if (iTickStyle != TickStyle.ACROSS && iTickStyle != TickStyle.LEFT && iTickStyle != TickStyle.RIGHT) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getMajorGrid().getTickStyle().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
    }
    iTickStyle=ax.getMinorGrid().getTickStyle().getValue();
    if (iTickStyle != TickStyle.ACROSS && iTickStyle != TickStyle.LEFT && iTickStyle != TickStyle.RIGHT) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getMinorGrid().getTickStyle().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
 else   if (iOrientation == Orientation.HORIZONTAL) {
    int iPosition=-1;
    if (ax.getLabel().isVisible()) {
      iPosition=ax.getLabelPosition().getValue();
      if (iPosition != Position.ABOVE && iPosition != Position.BELOW) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getLabelPosition().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    if (ax.getTitle().isVisible()) {
      iPosition=ax.getTitlePosition().getValue();
      if (iPosition != Position.ABOVE && iPosition != Position.BELOW) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getTitlePosition().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    int iTickStyle=ax.getMajorGrid().getTickStyle().getValue();
    if (iTickStyle != TickStyle.ACROSS && iTickStyle != TickStyle.ABOVE && iTickStyle != TickStyle.BELOW) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getMajorGrid().getTickStyle().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
    }
    iTickStyle=ax.getMinorGrid().getTickStyle().getValue();
    if (iTickStyle != TickStyle.ACROSS && iTickStyle != TickStyle.ABOVE && iTickStyle != TickStyle.BELOW) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.VALIDATION,""String_Node_Str"",new Object[]{ax.getMinorGrid().getTickStyle().getName(),ax},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
}",0.9834078776511326
69330,"/** 
 * @param dBlockX
 * @param dBlockWidth
 * @param aax
 * @param axPV
 * @param scX
 * @param iXLabelLocation
 * @param iYLabelLocation
 * @param iYTitleLocation
 * @param laXAxisLabels
 * @param iv
 * @param bTicksLeft
 * @param bTicksRight
 * @param dYAxisLabelsThickness
 * @param dDecorationThickness
 * @param dYAxisTitleThickness
 * @param dX
 * @param dX1
 * @param dX2
 * @param dWTotal
 * @return
 * @throws ChartException
 */
private double adjustHorizontalWithValueOrigin(double dBlockX,double dBlockWidth,AllAxes aax,final OneAxis axPV,final AutoScale scX,final int iXLabelLocation,final int iYLabelLocation,final int iYTitleLocation,final Label laXAxisLabels,final IntersectionValue iv,final boolean bTicksLeft,final boolean bTicksRight,double dYAxisLabelsThickness,double[] dDecorationThickness,double dYAxisTitleThickness,double dX,double dX1,double dX2,double dWTotal) throws ChartException {
  double dStart;
  double dEnd;
  double dDeltaX1=0, dDeltaX2=0;
  if (iYTitleLocation == RIGHT) {
    dX2+=dYAxisTitleThickness;
  }
 else   if (iYTitleLocation == LEFT) {
    dX1-=dYAxisTitleThickness;
  }
  double dW1=0, dW2=0;
  if (iYLabelLocation == LEFT) {
    dW1=(bTicksLeft ? getTickSize() : 0) + Math.max(dYAxisLabelsThickness,dDecorationThickness[0]);
    dW2=(bTicksRight ? getTickSize() : 0);
    if (dW1 + dW2 <= dWTotal) {
      dX1-=dW1;
      dX2+=dW2;
      dWTotal-=(dW1 + dW2);
    }
 else {
      axPV.setShowLabels(false);
    }
    dDeltaX1=dX - dX1;
    dDeltaX2=dX2 - dX;
    if (dX1 < dBlockX) {
      final Object[] oaMinMax=scX.getMinMax();
      boolean bForceBreak=false;
      do {
        scX.setEndPoints(scX.getStart() - scX.getStartShift(),scX.getEnd() + scX.getEndShift());
        scX.resetShifts();
        double[] da=scX.getEndPoints();
        double dT_RI=dBlockX - dX1;
        if (scX.getDirection() == BACKWARD) {
          double dAMin_AMax=da[0] - da[1];
          double dAMax_RI=Math.abs(da[0] - dX);
          double dDelta=(dT_RI / dAMax_RI) * dAMin_AMax;
          dEnd=da[1] + dDelta;
          dStart=da[0];
          if (dEnd < dBlockX) {
            dEnd=dBlockX;
            bForceBreak=true;
          }
        }
 else {
          double dAMin_AMax=da[1] - da[0];
          double dAMax_RI=Math.abs(da[1] - dX);
          double dDelta=(dT_RI / dAMax_RI) * dAMin_AMax;
          dStart=da[0] + dDelta;
          dEnd=da[1];
          if (dStart < dBlockX) {
            dStart=dBlockX;
            bForceBreak=true;
          }
        }
        scX.setEndPoints(dStart,dEnd);
        scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
        while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
          if (!scX.zoomOut()) {
            bForceBreak=true;
            break;
          }
          scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
          int tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
          if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
            bForceBreak=true;
            break;
          }
        }
        dX=getLocation(scX,iv);
        dX1=dX - dDeltaX1;
      }
 while (Math.abs(dX1 - dBlockX) > 1 && !bForceBreak);
    }
 else {
      dStart=scX.getStart();
      dEnd=scX.getEnd();
      scX.setEndPoints(dStart,dEnd);
      scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
      if (!scX.isStepFixed()) {
        final Object[] oaMinMax=scX.getMinMax();
        while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
          if (!scX.zoomOut()) {
            break;
          }
          scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
          int tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
          if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
            break;
          }
        }
      }
      dX=getLocation(scX,iv);
    }
    dX1=dX - dDeltaX1;
    dX2=dX + dDeltaX2;
  }
 else   if (iYLabelLocation == RIGHT) {
    dW1=(bTicksLeft ? getTickSize() : 0);
    dW2=(bTicksRight ? getTickSize() : 0) + Math.max(dYAxisLabelsThickness,dDecorationThickness[1]);
    if (dW1 + dW2 <= dWTotal) {
      dX1-=dW1;
      dX2+=dW2;
      dWTotal-=(dW1 + dW2);
    }
    dDeltaX1=dX - dX1;
    dDeltaX2=dX2 - dX;
    if (dX2 > dBlockX + dBlockWidth) {
      final Object[] oaMinMax=scX.getMinMax();
      boolean bForceBreak=false;
      do {
        scX.setEndPoints(scX.getStart() - scX.getStartShift(),scX.getEnd() + scX.getEndShift());
        scX.resetShifts();
        double[] da=scX.getEndPoints();
        double dT_RI=dX2 - (dBlockX + dBlockWidth);
        if (scX.getDirection() == BACKWARD) {
          double dAMin_AMax=da[0] - da[1];
          double dAMin_RI=Math.abs(dX - da[1]);
          double dDelta=Math.abs(dT_RI / dAMin_RI) * dAMin_AMax;
          dStart=da[0] - dDelta;
          dEnd=da[1];
          if (dStart > dBlockX + dBlockWidth) {
            dStart=dBlockX + dBlockWidth;
            bForceBreak=true;
          }
        }
 else {
          double dAMin_AMax=da[1] - da[0];
          double dAMin_RI=Math.abs(dX - da[0]);
          double dDelta=(dT_RI / dAMin_RI) * dAMin_AMax;
          dEnd=da[1] - dDelta;
          dStart=da[0];
          if (dEnd > dBlockX + dBlockWidth) {
            dEnd=dBlockX + dBlockWidth;
            bForceBreak=true;
          }
        }
        scX.setEndPoints(dStart,dEnd);
        scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
        if (!scX.isStepFixed()) {
          while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
            if (!scX.zoomOut()) {
              bForceBreak=true;
              break;
            }
            scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
            if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              bForceBreak=true;
              break;
            }
          }
        }
        dX=getLocation(scX,iv);
        dX2=dX + dDeltaX2;
      }
 while (Math.abs(dX2 - (dBlockX + dBlockWidth)) > 1 && !bForceBreak);
    }
 else {
      dStart=scX.getStart();
      dEnd=scX.getEnd();
      scX.setEndPoints(dStart,dEnd);
      scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
      if (!scX.isStepFixed()) {
        final Object[] oaMinMax=scX.getMinMax();
        while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
          if (!scX.zoomOut()) {
            break;
          }
          scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
          int tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
          if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
            break;
          }
        }
      }
      dX=getLocation(scX,iv);
    }
    dX2=dX + dDeltaX2;
    dX1=dX - dDeltaX1;
  }
  axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX2 + 1 - dYAxisTitleThickness);
  return dX;
}","/** 
 * @param dBlockX
 * @param dBlockWidth
 * @param aax
 * @param axPV
 * @param scX
 * @param iXLabelLocation
 * @param iYLabelLocation
 * @param iYTitleLocation
 * @param laXAxisLabels
 * @param iv
 * @param bTicksLeft
 * @param bTicksRight
 * @param dYAxisLabelsThickness
 * @param dDecorationThickness
 * @param dYAxisTitleThickness
 * @param dX
 * @param dX1
 * @param dX2
 * @param dWTotal
 * @return
 * @throws ChartException
 */
private double adjustHorizontalWithValueOrigin(double dBlockX,double dBlockWidth,AllAxes aax,final OneAxis axPV,final AutoScale scX,final int iXLabelLocation,final int iYLabelLocation,final int iYTitleLocation,final Label laXAxisLabels,final IntersectionValue iv,final boolean bTicksLeft,final boolean bTicksRight,double dYAxisLabelsThickness,double[] dDecorationThickness,double dYAxisTitleThickness,double dX,double dX1,double dX2,double dWTotal) throws ChartException {
  double dStart;
  double dEnd;
  double dDeltaX1=0, dDeltaX2=0;
  if (iYTitleLocation == RIGHT) {
    dX2+=dYAxisTitleThickness;
  }
 else   if (iYTitleLocation == LEFT) {
    dX1-=dYAxisTitleThickness;
  }
  double dW1=0, dW2=0;
  if (iYLabelLocation == LEFT) {
    dW1=(bTicksLeft ? getTickSize() : 0) + Math.max(dYAxisLabelsThickness,dDecorationThickness[0]);
    dW2=(bTicksRight ? getTickSize() : 0);
    if (dW1 + dW2 <= dWTotal) {
      dX1-=dW1;
      dX2+=dW2;
    }
 else {
      axPV.setShowLabels(false);
    }
    dDeltaX1=dX - dX1;
    dDeltaX2=dX2 - dX;
    if (dX1 < dBlockX) {
      final Object[] oaMinMax=scX.getMinMax();
      boolean bForceBreak=false;
      do {
        scX.setEndPoints(scX.getStart() - scX.getStartShift(),scX.getEnd() + scX.getEndShift());
        scX.resetShifts();
        double[] da=scX.getEndPoints();
        double dT_RI=dBlockX - dX1;
        if (scX.getDirection() == BACKWARD) {
          double dAMin_AMax=da[0] - da[1];
          double dAMax_RI=Math.abs(da[0] - dX);
          double dDelta=(dT_RI / dAMax_RI) * dAMin_AMax;
          dEnd=da[1] + dDelta;
          dStart=da[0];
          if (dEnd < dBlockX) {
            dEnd=dBlockX;
            bForceBreak=true;
          }
        }
 else {
          double dAMin_AMax=da[1] - da[0];
          double dAMax_RI=Math.abs(da[1] - dX);
          double dDelta=(dT_RI / dAMax_RI) * dAMin_AMax;
          dStart=da[0] + dDelta;
          dEnd=da[1];
          if (dStart < dBlockX) {
            dStart=dBlockX;
            bForceBreak=true;
          }
        }
        scX.setEndPoints(dStart,dEnd);
        scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
        while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
          if (!scX.zoomOut()) {
            bForceBreak=true;
            break;
          }
          scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
          int tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
          if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
            bForceBreak=true;
            break;
          }
        }
        dX=getLocation(scX,iv);
        dX1=dX - dDeltaX1;
      }
 while (Math.abs(dX1 - dBlockX) > 1 && !bForceBreak);
    }
 else {
      dStart=scX.getStart();
      dEnd=scX.getEnd();
      scX.setEndPoints(dStart,dEnd);
      scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
      if (!scX.isStepFixed()) {
        final Object[] oaMinMax=scX.getMinMax();
        while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
          if (!scX.zoomOut()) {
            break;
          }
          scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
          int tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
          if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
            break;
          }
        }
      }
      dX=getLocation(scX,iv);
    }
    dX1=dX - dDeltaX1;
    dX2=dX + dDeltaX2;
  }
 else   if (iYLabelLocation == RIGHT) {
    dW1=(bTicksLeft ? getTickSize() : 0);
    dW2=(bTicksRight ? getTickSize() : 0) + Math.max(dYAxisLabelsThickness,dDecorationThickness[1]);
    if (dW1 + dW2 <= dWTotal) {
      dX1-=dW1;
      dX2+=dW2;
    }
    dDeltaX1=dX - dX1;
    dDeltaX2=dX2 - dX;
    if (dX2 > dBlockX + dBlockWidth) {
      final Object[] oaMinMax=scX.getMinMax();
      boolean bForceBreak=false;
      do {
        scX.setEndPoints(scX.getStart() - scX.getStartShift(),scX.getEnd() + scX.getEndShift());
        scX.resetShifts();
        double[] da=scX.getEndPoints();
        double dT_RI=dX2 - (dBlockX + dBlockWidth);
        if (scX.getDirection() == BACKWARD) {
          double dAMin_AMax=da[0] - da[1];
          double dAMin_RI=Math.abs(dX - da[1]);
          double dDelta=Math.abs(dT_RI / dAMin_RI) * dAMin_AMax;
          dStart=da[0] - dDelta;
          dEnd=da[1];
          if (dStart > dBlockX + dBlockWidth) {
            dStart=dBlockX + dBlockWidth;
            bForceBreak=true;
          }
        }
 else {
          double dAMin_AMax=da[1] - da[0];
          double dAMin_RI=Math.abs(dX - da[0]);
          double dDelta=(dT_RI / dAMin_RI) * dAMin_AMax;
          dEnd=da[1] - dDelta;
          dStart=da[0];
          if (dEnd > dBlockX + dBlockWidth) {
            dEnd=dBlockX + dBlockWidth;
            bForceBreak=true;
          }
        }
        scX.setEndPoints(dStart,dEnd);
        scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
        if (!scX.isStepFixed()) {
          while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
            if (!scX.zoomOut()) {
              bForceBreak=true;
              break;
            }
            scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
            if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              bForceBreak=true;
              break;
            }
          }
        }
        dX=getLocation(scX,iv);
        dX2=dX + dDeltaX2;
      }
 while (Math.abs(dX2 - (dBlockX + dBlockWidth)) > 1 && !bForceBreak);
    }
 else {
      dStart=scX.getStart();
      dEnd=scX.getEnd();
      scX.setEndPoints(dStart,dEnd);
      scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
      if (!scX.isStepFixed()) {
        final Object[] oaMinMax=scX.getMinMax();
        while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
          if (!scX.zoomOut()) {
            break;
          }
          scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
          int tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
          if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
            break;
          }
        }
      }
      dX=getLocation(scX,iv);
    }
    dX2=dX + dDeltaX2;
    dX1=dX - dDeltaX1;
  }
  axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX2 + 1 - dYAxisTitleThickness);
  return dX;
}",0.9961638580627484
69331,"private void computeLinearMinMax(boolean bAlignZero){
  final double dMinReal, dMaxReal;
  final double dMinValue, dMaxValue;
  double dMargin=0;
  if (bMargin) {
    dMargin=Math.abs(asDouble(oMaxAuto).doubleValue() - asDouble(oMinAuto).doubleValue()) * iMarginPercent / 100;
  }
  dMinReal=asDouble(oMinAuto).doubleValue() - dMargin;
  dMaxReal=asDouble(oMaxAuto).doubleValue() + dMargin;
  dMinValue=bMinimumFixed ? asDouble(oMinFixed).doubleValue() : dMinReal;
  dMaxValue=bMaximumFixed ? asDouble(oMaxFixed).doubleValue() : dMaxReal;
  double dMinAxis=dMinValue;
  double dMaxAxis=dMaxValue;
  double dStep=0;
  if (bStepFixed && oStepNumber != null) {
    oStep=new Double(Math.abs(dMaxValue - dMinValue) / (oStepNumber.intValue()));
    dStep=asDouble(oStep).doubleValue();
  }
 else {
    dStep=asDouble(oStep).doubleValue();
    if (bMargin) {
      dMinAxis=((dStep >= 1) ? Math.floor(dMinAxis / dStep) : Math.round(dMinAxis / dStep)) * dStep;
      dMaxAxis=(((dStep >= 1) ? Math.floor(dMaxAxis / dStep) : Math.round(dMaxAxis / dStep)) + 1) * dStep;
      if (dMaxAxis - dMaxValue >= dStep) {
        dMaxAxis-=dStep;
      }
    }
 else     if (!bExpandMinmax) {
      double dMinAxis1=((dStep >= 1) ? Math.floor(dMinAxis / dStep) : Math.round(dMinAxis / dStep)) * dStep;
      dMinAxis=dMinAxis < dMinAxis1 ? dMinAxis1 - dStep : dMinAxis1;
      double dMaxAxis1=((dStep >= 1) ? Math.floor(dMaxAxis / dStep) : Math.round(dMaxAxis / dStep)) * dStep;
      dMaxAxis=dMaxAxis > dMaxAxis1 ? dMaxAxis1 + dStep : dMaxAxis1;
    }
 else {
      final double dAbsMax=Math.abs(dMaxValue);
      final double dAbsMin=Math.abs(dMinValue);
      dMinAxis=((dStep >= 1) ? Math.floor(dAbsMin / dStep) : Math.round(dAbsMin / dStep)) * dStep;
      dMaxAxis=((dStep >= 1) ? Math.floor(dAbsMax / dStep) : Math.round(dAbsMax / dStep)) * dStep;
      if (dMinAxis == dAbsMin) {
        dMinAxis+=dStep;
        if (dMinValue < 0) {
          dMinAxis=-dMinAxis;
        }
 else         if (dMinValue == 0) {
          dMinAxis=0;
        }
      }
 else {
        if (dMinValue < 0) {
          dMinAxis=-(dMinAxis + dStep);
        }
 else         if (dMinAxis >= dMinValue && dMinAxis != 0) {
          dMinAxis-=dStep;
        }
      }
      if (dMaxAxis == dAbsMax) {
        dMaxAxis+=dStep;
        if (dMaxValue < 0) {
          dMaxAxis=-dMaxAxis;
        }
 else         if (dMaxValue == 0) {
          dMaxAxis=0;
        }
      }
 else       if (dMinAxis != dMaxValue) {
        if (dMaxValue < 0) {
          dMaxAxis=-(dMaxAxis - dStep);
        }
 else         if (dMaxValue > 0) {
          if (dMaxAxis < dMaxValue) {
            dMaxAxis+=dStep;
          }
        }
      }
      if (dMinValue < 0 && dMaxValue < 0) {
        if (dMaxAxis <= dMaxValue - dStep) {
          dMaxAxis+=2 * dStep;
        }
      }
      if (dMinValue > 0 && dMaxValue > 0) {
        if (dMinAxis >= dMinValue + dStep) {
          dMinAxis-=2 * dStep;
        }
      }
    }
  }
  if (dMinValue == 0 && dMaxValue == 0) {
    if (dMinAxis >= 0) {
      dMinAxis=-1;
    }
    if (dMaxAxis <= 0) {
      dMaxAxis=1;
    }
  }
  if ((iType & PERCENT) == PERCENT) {
    if (dMaxAxis > 0) {
      dMaxAxis=100;
    }
    if (dMinAxis < 0) {
      dMinAxis=-100;
    }
  }
  if (bAlignZero && dMinAxis < 0 && dMaxAxis > 0) {
    double abs=Math.max(Math.abs(dMinAxis),Math.abs(dMaxAxis));
    dMinAxis=-abs;
    dMaxAxis=abs;
  }
  if (!bMaximumFixed) {
    oMax=new Double(dMaxAxis);
  }
  if (!bMinimumFixed) {
    oMin=new Double(dMinAxis);
  }
  if (bMargin) {
    if (bMinimumFixed && dMinValue > dMinReal) {
      oMinAuto=new Double(dMinReal);
    }
 else {
      oMinAuto=null;
    }
    if (bMaximumFixed && dMaxValue < dMaxReal) {
      oMaxAuto=new Double(dMaxReal);
    }
 else {
      oMaxAuto=null;
    }
  }
 else {
    oMinAuto=null;
    oMaxAuto=null;
  }
}","private void computeLinearMinMax(boolean bAlignZero){
  final double dMinReal, dMaxReal;
  final double dMinValue, dMaxValue;
  double dMargin=0;
  if (bMargin) {
    dMargin=Math.abs(asDouble(oMaxAuto).doubleValue() - asDouble(oMinAuto).doubleValue()) * iMarginPercent / 100;
  }
  dMinReal=asDouble(oMinAuto).doubleValue() - dMargin;
  dMaxReal=asDouble(oMaxAuto).doubleValue() + dMargin;
  dMinValue=bMinimumFixed ? asDouble(oMinFixed).doubleValue() : dMinReal;
  dMaxValue=bMaximumFixed ? asDouble(oMaxFixed).doubleValue() : dMaxReal;
  double dMinAxis=dMinValue;
  double dMaxAxis=dMaxValue;
  double dStep=0;
  if (bStepFixed && oStepNumber != null) {
    oStep=new Double(Math.abs(dMaxValue - dMinValue) / (oStepNumber.intValue()));
    dStep=asDouble(oStep).doubleValue();
  }
 else {
    dStep=asDouble(oStep).doubleValue();
    if (bMargin) {
      dMinAxis=((dStep >= 1) ? Math.floor(dMinAxis / dStep) : Math.round(dMinAxis / dStep)) * dStep;
      dMaxAxis=(((dStep >= 1) ? Math.floor(dMaxAxis / dStep) : Math.round(dMaxAxis / dStep)) + 1) * dStep;
      if (dMaxAxis - dMaxValue >= dStep) {
        dMaxAxis-=dStep;
      }
    }
 else     if (!bExpandMinmax) {
      double dMinAxis1=((dStep >= 1) ? Math.floor(dMinAxis / dStep) : Math.round(dMinAxis / dStep)) * dStep;
      dMinAxis=dMinAxis < dMinAxis1 ? dMinAxis1 - dStep : dMinAxis1;
      double dMaxAxis1=((dStep >= 1) ? Math.floor(dMaxAxis / dStep) : Math.round(dMaxAxis / dStep)) * dStep;
      dMaxAxis=dMaxAxis > dMaxAxis1 ? dMaxAxis1 + dStep : dMaxAxis1;
    }
 else {
      final double dAbsMax=Math.abs(dMaxValue);
      final double dAbsMin=Math.abs(dMinValue);
      dMinAxis=((dStep >= 1) ? Math.floor(dAbsMin / dStep) : Math.round(dAbsMin / dStep)) * dStep;
      dMaxAxis=((dStep >= 1) ? Math.floor(dAbsMax / dStep) : Math.round(dAbsMax / dStep)) * dStep;
      if (ChartUtil.mathEqual(dMinAxis,dAbsMin)) {
        dMinAxis+=dStep;
        if (dMinValue < 0) {
          dMinAxis=-dMinAxis;
        }
 else         if (dMinValue == 0) {
          dMinAxis=0;
        }
      }
 else {
        if (dMinValue < 0) {
          dMinAxis=-(dMinAxis + dStep);
        }
 else         if (dMinAxis >= dMinValue && dMinAxis != 0) {
          dMinAxis-=dStep;
        }
      }
      if (ChartUtil.mathEqual(dMaxAxis,dAbsMax)) {
        dMaxAxis+=dStep;
        if (dMaxValue < 0) {
          dMaxAxis=-dMaxAxis;
        }
 else         if (dMaxValue == 0) {
          dMaxAxis=0;
        }
      }
 else       if (!ChartUtil.mathEqual(dMinAxis,dMaxValue)) {
        if (dMaxValue < 0) {
          dMaxAxis=-(dMaxAxis - dStep);
        }
 else         if (dMaxValue > 0) {
          if (dMaxAxis < dMaxValue) {
            dMaxAxis+=dStep;
          }
        }
      }
      if (dMinValue < 0 && dMaxValue < 0) {
        if (dMaxAxis <= dMaxValue - dStep) {
          dMaxAxis+=2 * dStep;
        }
      }
      if (dMinValue > 0 && dMaxValue > 0) {
        if (dMinAxis >= dMinValue + dStep) {
          dMinAxis-=2 * dStep;
        }
      }
    }
  }
  if (dMinValue == 0 && dMaxValue == 0) {
    if (dMinAxis >= 0) {
      dMinAxis=-1;
    }
    if (dMaxAxis <= 0) {
      dMaxAxis=1;
    }
  }
  if ((iType & PERCENT) == PERCENT) {
    if (dMaxAxis > 0) {
      dMaxAxis=100;
    }
    if (dMinAxis < 0) {
      dMinAxis=-100;
    }
  }
  if (bAlignZero && dMinAxis < 0 && dMaxAxis > 0) {
    double abs=Math.max(Math.abs(dMinAxis),Math.abs(dMaxAxis));
    dMinAxis=-abs;
    dMaxAxis=abs;
  }
  if (!bMaximumFixed) {
    oMax=new Double(dMaxAxis);
  }
  if (!bMinimumFixed) {
    oMin=new Double(dMinAxis);
  }
  if (bMargin) {
    if (bMinimumFixed && dMinValue > dMinReal) {
      oMinAuto=new Double(dMinReal);
    }
 else {
      oMinAuto=null;
    }
    if (bMaximumFixed && dMaxValue < dMaxReal) {
      oMaxAuto=new Double(dMaxReal);
    }
 else {
      oMaxAuto=null;
    }
  }
 else {
    oMinAuto=null;
    oMaxAuto=null;
  }
}",0.9803417705255044
69332,"void renderVerticalAxisByType(ComputationContext context,double dXEnd,double dZEnd,double dZ,double dStaggeredLabelOffset) throws ChartException {
  final int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
  IAxisTypeComputation computation=createAxisTypeComputation(context);
  computation.initialize();
  final double dOffset=computation instanceof TextAxisTypeComputation && bTickBetweenCategories ? iDirection * sc.getUnitSize() / 2 : 0;
  final int length=computation instanceof TextAxisTypeComputation ? da.size() - 1 : da.size();
  final double x=(iLabelLocation == IConstants.LEFT) ? context.dTick1 - 1 : context.dTick2 + 1;
  int yLast=Integer.MIN_VALUE;
  Location loMinorStart=goFactory.createLocation(0,0);
  Location loMinorEnd=goFactory.createLocation(0,0);
  for (int i=0; i < length; i++) {
    computation.handlePreEachTick(i);
    int y=(int)da.getCoordinate(i);
    boolean bSkipTickLine=(yLast == y);
    if (!bSkipTickLine) {
      yLast=y;
    }
    if (bRendering3D) {
      context.y3d=(int)da3D.getCoordinate(i);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS) {
      double dXMinorTick1=((iMinorTickStyle & IConstants.TICK_LEFT) == IConstants.TICK_LEFT) ? (context.dX - pwa.getTickSize()) : context.dX;
      double dXMinorTick2=((iMinorTickStyle & IConstants.TICK_RIGHT) == IConstants.TICK_RIGHT) ? context.dX + pwa.getTickSize() : context.dX;
      if (dXMinorTick1 != dXMinorTick2) {
        if (i != da.size() - 1) {
          if (bRenderOrthogonal3DAxis) {
          }
 else {
            if (!bSkipTickLine && ((i > 0 && i < length - 1) || !axModel.isCategoryAxis() || bTickBetweenCategories)) {
              LineRenderEvent lreMinor=null;
              int minorStep=(int)(1d / da.getStep());
              if (minorStep < 1) {
                minorStep=1;
              }
              for (int k=0; k < daMinor.length - 1; k+=minorStep) {
                if (computation instanceof LinearAxisTypeComputation) {
                  if ((iDirection == -1 && y - daMinor[k] <= da.getCoordinate(i + 1)) || (iDirection == 1 && y + daMinor[k] >= da.getCoordinate(i + 1))) {
                    continue;
                  }
                }
                lreMinor=((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
                lreMinor.setLineAttributes(liaMinorTick);
                loMinorStart.set(dXMinorTick1,y + iDirection * daMinor[k]);
                lreMinor.setStart(loMinorStart);
                loMinorEnd.set(dXMinorTick2,y + iDirection * daMinor[k]);
                lreMinor.setEnd(loMinorEnd);
                ipr.drawLine(lreMinor);
              }
            }
          }
        }
      }
      if (computation instanceof TextAxisTypeComputation && !bTickBetweenCategories && i == 0) {
        continue;
      }
      if (!bSkipTickLine && context.dTick1 != context.dTick2) {
        if (bRenderOrthogonal3DAxis) {
        }
 else {
          lre.setLineAttributes(liaMajorTick);
          lre.getStart().set(context.dTick1,y);
          lre.getEnd().set(context.dTick2,y);
          ipr.drawLine(lre);
        }
        if (iv != null && iDimension == IConstants.TWO_5_D && iv.getType() == IConstants.VALUE) {
          lre.setStart(goFactory.createLocation(context.dX,y));
          lre.setEnd(goFactory.createLocation(context.dX + dSeriesThickness,y - dSeriesThickness));
          ipr.drawLine(lre);
        }
      }
    }
    if (bRenderAxisLabels && sc.isTickLabelVisible(i)) {
      double sx=x;
      double sx2=dXEnd;
      if (bAxisLabelStaggered && sc.isTickLabelStaggered(i)) {
        if (iLabelLocation == IConstants.LEFT) {
          sx-=dStaggeredLabelOffset;
          sx2+=dStaggeredLabelOffset;
        }
 else {
          sx+=dStaggeredLabelOffset;
          sx2-=dStaggeredLabelOffset;
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
      if (ax.getLabel().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          lo3d.set(sx - pwa.getHorizontalSpacingInPixels(),context.y3d + dOffset,dZEnd + pwa.getHorizontalSpacingInPixels());
          t3dre.setLocation3D(lo3d);
          t3dre.setTextPosition(TextRenderEvent.LEFT);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
          lo3d.set(sx2 + pwa.getHorizontalSpacingInPixels(),context.y3d + dOffset,dZ - pwa.getHorizontalSpacingInPixels());
          t3dre.setLocation3D(lo3d);
          t3dre.setTextPosition(TextRenderEvent.RIGHT);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          if (this.renderer.rtc.isRightToLeftText()) {
            t3dre.setRtlCaption();
          }
          dc.addLabel(t3dre);
        }
 else {
          lo.set(sx,y + dOffset);
          tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          if (bLabelWithinAxes) {
            if (i == 0) {
              tre.setTextPosition(iLabelLocation | IConstants.POSITION_MOVE_ABOVE);
            }
 else {
              tre.setTextPosition(iLabelLocation);
            }
          }
          if (this.renderer.rtc.isRightToLeftText()) {
            tre.setRtlCaption();
          }
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
    }
    computation.handlePostEachTick(i);
  }
  computation.close();
}","void renderVerticalAxisByType(ComputationContext context,double dXEnd,double dZEnd,double dZ,double dStaggeredLabelOffset) throws ChartException {
  final int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
  IAxisTypeComputation computation=createAxisTypeComputation(context);
  computation.initialize();
  final double dOffset=computation instanceof TextAxisTypeComputation && bTickBetweenCategories ? iDirection * sc.getUnitSize() / 2 : 0;
  final int length=computation instanceof TextAxisTypeComputation ? da.size() - 1 : da.size();
  final double x=(iLabelLocation == IConstants.LEFT) ? context.dTick1 - 1 : context.dTick2 + 1;
  int yLast=Integer.MIN_VALUE;
  Location loMinorStart=goFactory.createLocation(0,0);
  Location loMinorEnd=goFactory.createLocation(0,0);
  for (int i=0; i < length; i++) {
    computation.handlePreEachTick(i);
    int y=(int)da.getCoordinate(i);
    boolean bSkipTickLine=(yLast == y);
    if (!bSkipTickLine) {
      yLast=y;
    }
    if (bRendering3D) {
      context.y3d=(int)da3D.getCoordinate(i);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS) {
      double dXMinorTick1=((iMinorTickStyle & IConstants.TICK_LEFT) == IConstants.TICK_LEFT) ? (context.dX - pwa.getTickSize()) : context.dX;
      double dXMinorTick2=((iMinorTickStyle & IConstants.TICK_RIGHT) == IConstants.TICK_RIGHT) ? context.dX + pwa.getTickSize() : context.dX;
      if (!ChartUtil.mathEqual(dXMinorTick1,dXMinorTick2)) {
        if (i != da.size() - 1) {
          if (bRenderOrthogonal3DAxis) {
          }
 else {
            if (!bSkipTickLine && ((i > 0 && i < length - 1) || !axModel.isCategoryAxis() || bTickBetweenCategories)) {
              LineRenderEvent lreMinor=null;
              int minorStep=(int)(1d / da.getStep());
              if (minorStep < 1) {
                minorStep=1;
              }
              for (int k=0; k < daMinor.length - 1; k+=minorStep) {
                if (computation instanceof LinearAxisTypeComputation) {
                  if ((iDirection == -1 && y - daMinor[k] <= da.getCoordinate(i + 1)) || (iDirection == 1 && y + daMinor[k] >= da.getCoordinate(i + 1))) {
                    continue;
                  }
                }
                lreMinor=((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
                lreMinor.setLineAttributes(liaMinorTick);
                loMinorStart.set(dXMinorTick1,y + iDirection * daMinor[k]);
                lreMinor.setStart(loMinorStart);
                loMinorEnd.set(dXMinorTick2,y + iDirection * daMinor[k]);
                lreMinor.setEnd(loMinorEnd);
                ipr.drawLine(lreMinor);
              }
            }
          }
        }
      }
      if (computation instanceof TextAxisTypeComputation && !bTickBetweenCategories && i == 0) {
        continue;
      }
      if (!bSkipTickLine && !ChartUtil.mathEqual(context.dTick1,context.dTick2)) {
        if (bRenderOrthogonal3DAxis) {
        }
 else {
          lre.setLineAttributes(liaMajorTick);
          lre.getStart().set(context.dTick1,y);
          lre.getEnd().set(context.dTick2,y);
          ipr.drawLine(lre);
        }
        if (iv != null && iDimension == IConstants.TWO_5_D && iv.getType() == IConstants.VALUE) {
          lre.setStart(goFactory.createLocation(context.dX,y));
          lre.setEnd(goFactory.createLocation(context.dX + dSeriesThickness,y - dSeriesThickness));
          ipr.drawLine(lre);
        }
      }
    }
    if (bRenderAxisLabels && sc.isTickLabelVisible(i)) {
      double sx=x;
      double sx2=dXEnd;
      if (bAxisLabelStaggered && sc.isTickLabelStaggered(i)) {
        if (iLabelLocation == IConstants.LEFT) {
          sx-=dStaggeredLabelOffset;
          sx2+=dStaggeredLabelOffset;
        }
 else {
          sx+=dStaggeredLabelOffset;
          sx2-=dStaggeredLabelOffset;
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
      if (ax.getLabel().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          lo3d.set(sx - pwa.getHorizontalSpacingInPixels(),context.y3d + dOffset,dZEnd + pwa.getHorizontalSpacingInPixels());
          t3dre.setLocation3D(lo3d);
          t3dre.setTextPosition(TextRenderEvent.LEFT);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
          lo3d.set(sx2 + pwa.getHorizontalSpacingInPixels(),context.y3d + dOffset,dZ - pwa.getHorizontalSpacingInPixels());
          t3dre.setLocation3D(lo3d);
          t3dre.setTextPosition(TextRenderEvent.RIGHT);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          if (this.renderer.rtc.isRightToLeftText()) {
            t3dre.setRtlCaption();
          }
          dc.addLabel(t3dre);
        }
 else {
          lo.set(sx,y + dOffset);
          tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          if (bLabelWithinAxes) {
            if (i == 0) {
              tre.setTextPosition(iLabelLocation | IConstants.POSITION_MOVE_ABOVE);
            }
 else {
              tre.setTextPosition(iLabelLocation);
            }
          }
          if (this.renderer.rtc.isRightToLeftText()) {
            tre.setRtlCaption();
          }
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
    }
    computation.handlePostEachTick(i);
  }
  computation.close();
}",0.9952978056426331
69333,"void renderHorizontalAxisByType(ComputationContext context,double dXEnd,double dZEnd,double dZ,double dStaggeredLabelOffset) throws ChartException {
  final int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
  IAxisTypeComputation computation=createAxisTypeComputation(context);
  computation.initialize();
  final double dOffset=computation instanceof TextAxisTypeComputation && bTickBetweenCategories ? iDirection * sc.getUnitSize() / 2 : 0;
  final int length=computation instanceof TextAxisTypeComputation ? da.size() - 1 : da.size();
  double y=(iLabelLocation == IConstants.ABOVE) ? (bRendering3D ? context.dTick1 + 1 : context.dTick1 - 1) : (bRendering3D ? context.dTick2 - 1 : context.dTick2 + 1);
  int xLast=Integer.MIN_VALUE;
  Location loMinorStart=goFactory.createLocation(0,0);
  Location loMinorEnd=goFactory.createLocation(0,0);
  for (int i=0; i < length; i++) {
    computation.handlePreEachTick(i);
    int x=(int)da.getCoordinate(i);
    boolean bSkipTickLine=(x == xLast);
    if (!bSkipTickLine) {
      xLast=x;
    }
    if (bRendering3D) {
      context.x3d=(int)da3D.getCoordinate(i);
      context.z3d=(int)da3D.getCoordinate(i);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS) {
      double dYMinorTick1=((iMinorTickStyle & IConstants.TICK_ABOVE) == IConstants.TICK_ABOVE) ? (bRendering3D ? context.dY + pwa.getTickSize() : context.dY - pwa.getTickSize()) : context.dY;
      double dYMinorTick2=((iMinorTickStyle & IConstants.TICK_BELOW) == IConstants.TICK_BELOW) ? (bRendering3D ? context.dY - pwa.getTickSize() : context.dY + pwa.getTickSize()) : context.dY;
      if (dYMinorTick1 != -dYMinorTick2) {
        if (i != da.size() - 1) {
          if (bRenderBase3DAxis) {
          }
 else           if (bRenderAncillary3DAxis) {
          }
 else {
            if (!bSkipTickLine && ((i > 0 && i < length - 1) || !axModel.isCategoryAxis() || bTickBetweenCategories)) {
              LineRenderEvent lreMinor=null;
              int minorStep=(int)(1d / da.getStep());
              if (minorStep < 1) {
                minorStep=1;
              }
              for (int k=0; k < daMinor.length - 1; k+=minorStep) {
                if (computation instanceof LinearAxisTypeComputation) {
                  if ((iDirection == 1 && x + daMinor[k] >= da.getCoordinate(i + 1)) || (iDirection == -1 && x - daMinor[k] <= da.getCoordinate(i + 1))) {
                    continue;
                  }
                }
                lreMinor=((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
                lreMinor.setLineAttributes(liaMinorTick);
                loMinorStart.set(x + iDirection * daMinor[k],dYMinorTick1);
                lreMinor.setStart(loMinorStart);
                loMinorEnd.set(x + iDirection * daMinor[k],dYMinorTick2);
                lreMinor.setEnd(loMinorEnd);
                ipr.drawLine(lreMinor);
              }
            }
          }
        }
      }
      if (computation instanceof TextAxisTypeComputation && !bTickBetweenCategories && i == 0) {
        continue;
      }
      if (!bSkipTickLine && context.dTick1 != context.dTick2) {
        if (bRenderBase3DAxis) {
        }
 else         if (bRenderAncillary3DAxis) {
        }
 else {
          lre.setLineAttributes(liaMajorTick);
          lre.getStart().set(x,context.dTick1);
          lre.getEnd().set(x,context.dTick2);
          ipr.drawLine(lre);
        }
        if (iv != null && iDimension == IConstants.TWO_5_D && iv.getType() == IConstants.VALUE) {
          lre.getStart().set(x,context.dY);
          lre.getEnd().set(x + dSeriesThickness,context.dY - dSeriesThickness);
          ipr.drawLine(lre);
        }
      }
    }
    if (bRenderAxisLabels && sc.isTickLabelVisible(i)) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
      double sy=y;
      if (bAxisLabelStaggered && sc.isTickLabelStaggered(i)) {
        if (iLabelLocation == IConstants.ABOVE) {
          sy-=dStaggeredLabelOffset;
        }
 else {
          sy+=dStaggeredLabelOffset;
        }
      }
      if (ax.getLabel().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          if (axisType == IConstants.BASE_AXIS) {
            lo3d.set(context.x3d + dOffset,sy - pwa.getVerticalSpacingInPixels(),dZEnd + pwa.getVerticalSpacingInPixels());
          }
 else {
            lo3d.set(dXEnd + pwa.getVerticalSpacingInPixels(),sy - pwa.getVerticalSpacingInPixels(),context.z3d + dOffset);
          }
          t3dre.setLocation3D(lo3d);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          if (this.renderer.rtc.isRightToLeftText()) {
            t3dre.setRtlCaption();
          }
          dc.addLabel(t3dre);
        }
 else {
          lo.set(x + dOffset,sy);
          tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          if (bLabelWithinAxes) {
            if (i == 0) {
              tre.setTextPosition(iLabelLocation | IConstants.POSITION_MOVE_RIGHT);
            }
 else {
              tre.setTextPosition(iLabelLocation);
            }
          }
          if (this.renderer.rtc.isRightToLeftText()) {
            tre.setRtlCaption();
          }
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
    }
    computation.handlePostEachTick(i);
  }
  computation.close();
}","void renderHorizontalAxisByType(ComputationContext context,double dXEnd,double dZEnd,double dZ,double dStaggeredLabelOffset) throws ChartException {
  final int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
  IAxisTypeComputation computation=createAxisTypeComputation(context);
  computation.initialize();
  final double dOffset=computation instanceof TextAxisTypeComputation && bTickBetweenCategories ? iDirection * sc.getUnitSize() / 2 : 0;
  final int length=computation instanceof TextAxisTypeComputation ? da.size() - 1 : da.size();
  double y=(iLabelLocation == IConstants.ABOVE) ? (bRendering3D ? context.dTick1 + 1 : context.dTick1 - 1) : (bRendering3D ? context.dTick2 - 1 : context.dTick2 + 1);
  int xLast=Integer.MIN_VALUE;
  Location loMinorStart=goFactory.createLocation(0,0);
  Location loMinorEnd=goFactory.createLocation(0,0);
  for (int i=0; i < length; i++) {
    computation.handlePreEachTick(i);
    int x=(int)da.getCoordinate(i);
    boolean bSkipTickLine=(x == xLast);
    if (!bSkipTickLine) {
      xLast=x;
    }
    if (bRendering3D) {
      context.x3d=(int)da3D.getCoordinate(i);
      context.z3d=(int)da3D.getCoordinate(i);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS) {
      double dYMinorTick1=((iMinorTickStyle & IConstants.TICK_ABOVE) == IConstants.TICK_ABOVE) ? (bRendering3D ? context.dY + pwa.getTickSize() : context.dY - pwa.getTickSize()) : context.dY;
      double dYMinorTick2=((iMinorTickStyle & IConstants.TICK_BELOW) == IConstants.TICK_BELOW) ? (bRendering3D ? context.dY - pwa.getTickSize() : context.dY + pwa.getTickSize()) : context.dY;
      if (!ChartUtil.mathEqual(dYMinorTick1,-dYMinorTick2)) {
        if (i != da.size() - 1) {
          if (bRenderBase3DAxis) {
          }
 else           if (bRenderAncillary3DAxis) {
          }
 else {
            if (!bSkipTickLine && ((i > 0 && i < length - 1) || !axModel.isCategoryAxis() || bTickBetweenCategories)) {
              LineRenderEvent lreMinor=null;
              int minorStep=(int)(1d / da.getStep());
              if (minorStep < 1) {
                minorStep=1;
              }
              for (int k=0; k < daMinor.length - 1; k+=minorStep) {
                if (computation instanceof LinearAxisTypeComputation) {
                  if ((iDirection == 1 && x + daMinor[k] >= da.getCoordinate(i + 1)) || (iDirection == -1 && x - daMinor[k] <= da.getCoordinate(i + 1))) {
                    continue;
                  }
                }
                lreMinor=((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
                lreMinor.setLineAttributes(liaMinorTick);
                loMinorStart.set(x + iDirection * daMinor[k],dYMinorTick1);
                lreMinor.setStart(loMinorStart);
                loMinorEnd.set(x + iDirection * daMinor[k],dYMinorTick2);
                lreMinor.setEnd(loMinorEnd);
                ipr.drawLine(lreMinor);
              }
            }
          }
        }
      }
      if (computation instanceof TextAxisTypeComputation && !bTickBetweenCategories && i == 0) {
        continue;
      }
      if (!bSkipTickLine && !ChartUtil.mathEqual(context.dTick1,context.dTick2)) {
        if (bRenderBase3DAxis) {
        }
 else         if (bRenderAncillary3DAxis) {
        }
 else {
          lre.setLineAttributes(liaMajorTick);
          lre.getStart().set(x,context.dTick1);
          lre.getEnd().set(x,context.dTick2);
          ipr.drawLine(lre);
        }
        if (iv != null && iDimension == IConstants.TWO_5_D && iv.getType() == IConstants.VALUE) {
          lre.getStart().set(x,context.dY);
          lre.getEnd().set(x + dSeriesThickness,context.dY - dSeriesThickness);
          ipr.drawLine(lre);
        }
      }
    }
    if (bRenderAxisLabels && sc.isTickLabelVisible(i)) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
      double sy=y;
      if (bAxisLabelStaggered && sc.isTickLabelStaggered(i)) {
        if (iLabelLocation == IConstants.ABOVE) {
          sy-=dStaggeredLabelOffset;
        }
 else {
          sy+=dStaggeredLabelOffset;
        }
      }
      if (ax.getLabel().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          if (axisType == IConstants.BASE_AXIS) {
            lo3d.set(context.x3d + dOffset,sy - pwa.getVerticalSpacingInPixels(),dZEnd + pwa.getVerticalSpacingInPixels());
          }
 else {
            lo3d.set(dXEnd + pwa.getVerticalSpacingInPixels(),sy - pwa.getVerticalSpacingInPixels(),context.z3d + dOffset);
          }
          t3dre.setLocation3D(lo3d);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          if (this.renderer.rtc.isRightToLeftText()) {
            t3dre.setRtlCaption();
          }
          dc.addLabel(t3dre);
        }
 else {
          lo.set(x + dOffset,sy);
          tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          if (bLabelWithinAxes) {
            if (i == 0) {
              tre.setTextPosition(iLabelLocation | IConstants.POSITION_MOVE_RIGHT);
            }
 else {
              tre.setTextPosition(iLabelLocation);
            }
          }
          if (this.renderer.rtc.isRightToLeftText()) {
            tre.setRtlCaption();
          }
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
    }
    computation.handlePostEachTick(i);
  }
  computation.close();
}",0.9953108718304968
69334,"/** 
 * Gets cascading parameter values.
 * @param values
 * @param task
 * @return cascading parameter values. each item is<code>IParameterSelectionChoice</code>
 */
private List getCascadingValues(List values,IGetParameterDefinitionTask task){
  CascadingParameterGroupHandle container=(CascadingParameterGroupHandle)handle.getContainer();
  List groupList=new ArrayList();
  List children=group.getChildren();
  Iterator iterator=children.iterator();
  while (iterator.hasNext()) {
    IParameter param=(IParameter)iterator.next();
    if (param == this)     break;
    String value=param.getSelectionValue();
    groupList.add(value);
  }
  Object[] groupKeys=new Object[groupList.size()];
  for (int i=0; i < groupList.size(); i++) {
    groupKeys[i]=groupList.get(i);
  }
  List cascading=(List)task.getSelectionListForCascadingGroup(container.getName(),groupKeys);
  return cascading;
}","/** 
 * Gets cascading parameter values.
 * @param values
 * @param task
 * @return cascading parameter values. each item is<code>IParameterSelectionChoice</code>
 */
private List getCascadingValues(List values,IGetParameterDefinitionTask task){
  CascadingParameterGroupHandle container=(CascadingParameterGroupHandle)handle.getContainer();
  List groupList=new ArrayList();
  List children=group.getChildren();
  Iterator iterator=children.iterator();
  while (iterator.hasNext()) {
    IParameter param=(IParameter)iterator.next();
    if (param == this)     break;
    String value=param.getSelectionValue();
    try {
      groupList.add(param.converToDataType(value));
    }
 catch (    BirtException e) {
    }
  }
  Object[] groupKeys=new Object[groupList.size()];
  for (int i=0; i < groupList.size(); i++) {
    groupKeys[i]=groupList.get(i);
  }
  List cascading=(List)task.getSelectionListForCascadingGroup(container.getName(),groupKeys);
  return cascading;
}",0.9361930294906168
69335,"/** 
 * Gets cascading parameter values.
 * @param values
 * @param task
 * @return cascading parameter values. each item is<code>IParameterSelectionChoice</code>
 */
private List getCascadingValues(List values,IGetParameterDefinitionTask task){
  CascadingParameterGroupHandle container=(CascadingParameterGroupHandle)handle.getContainer();
  List groupList=new ArrayList();
  List children=group.getChildren();
  Iterator iterator=children.iterator();
  while (iterator.hasNext()) {
    IParameter param=(IParameter)iterator.next();
    if (param == this)     break;
    String value=param.getSelectionValue();
    groupList.add(value);
  }
  Object[] groupKeys=new Object[groupList.size()];
  for (int i=0; i < groupList.size(); i++) {
    groupKeys[i]=groupList.get(i);
  }
  List cascading=(List)task.getSelectionListForCascadingGroup(container.getName(),groupKeys);
  return cascading;
}","/** 
 * Gets cascading parameter values.
 * @param values
 * @param task
 * @return cascading parameter values. each item is<code>IParameterSelectionChoice</code>
 */
private List getCascadingValues(List values,IGetParameterDefinitionTask task){
  CascadingParameterGroupHandle container=(CascadingParameterGroupHandle)handle.getContainer();
  List groupList=new ArrayList();
  List children=group.getChildren();
  Iterator iterator=children.iterator();
  while (iterator.hasNext()) {
    IParameter param=(IParameter)iterator.next();
    if (param == this)     break;
    String value=param.getSelectionValue();
    try {
      groupList.add(param.converToDataType(value));
    }
 catch (    BirtException e) {
    }
  }
  Object[] groupKeys=new Object[groupList.size()];
  for (int i=0; i < groupList.size(); i++) {
    groupKeys[i]=groupList.get(i);
  }
  List cascading=(List)task.getSelectionListForCascadingGroup(container.getName(),groupKeys);
  return cascading;
}",0.9361930294906168
69336,"public static String formatNumberPattern(String givenValue,ULocale locale){
  String returnStr=""String_Node_Str"";
  if (givenValue == null) {
    return ""String_Node_Str"";
  }
  if (givenValue.length() == 1) {
    char ch=givenValue.charAt(0);
    if (ch == 'G' || ch == 'g' || ch == 'd' || ch == 'D') {
      return ""String_Node_Str"";
    }
    if (ch == 'C' || ch == 'c') {
      return getCurrencySymbol(locale) + ""String_Node_Str"";
    }
    if (ch == 'f' || ch == 'F') {
      return ""String_Node_Str"";
    }
    if (ch == 'N' || ch == 'n') {
      return ""String_Node_Str"";
    }
    if (ch == 'p' || ch == 'P') {
      return ""String_Node_Str"";
    }
    if (ch == 'e' || ch == 'E') {
      return ""String_Node_Str"";
    }
    if (ch == 'x' || ch == 'X') {
      return ""String_Node_Str"";
    }
  }
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (validType(givenValue)) {
    return givenValue;
  }
  int count=givenValue.length();
  boolean flag=false;
  for (int num=0; num < count; num++) {
    char temp=givenValue.charAt(num);
    if (temp == '\'') {
      if (flag) {
        flag=false;
      }
 else {
        char nextChar=givenValue.charAt(num + 1);
        if (nextChar == '\'') {
          returnStr=returnStr + '\'';
          num++;
          flag=false;
        }
 else {
          flag=true;
        }
      }
    }
 else {
      if (flag) {
        returnStr=returnStr + ""String_Node_Str"" + temp;
      }
 else {
        if (specialStr.indexOf(temp) != -1) {
          returnStr=returnStr + ""String_Node_Str"" + temp;
        }
 else         if (temp == '¤') {
          String symbol=getCurrencySymbol(locale);
          returnStr=returnStr + ""String_Node_Str"" + symbol+ ""String_Node_Str"";
        }
 else         if (currencySymbol.indexOf(temp) != -1) {
          returnStr=returnStr + ""String_Node_Str"" + temp+ ""String_Node_Str"";
        }
 else {
          returnStr=returnStr + temp;
        }
      }
    }
  }
  if (returnStr.indexOf(""String_Node_Str"") == -1 && returnStr.indexOf(""String_Node_Str"") == -1) {
    returnStr+=""String_Node_Str"";
  }
  return returnStr;
}","public static String formatNumberPattern(String givenValue,ULocale locale){
  String returnStr=""String_Node_Str"";
  if (givenValue == null) {
    return ""String_Node_Str"";
  }
  if (givenValue.length() == 1) {
    char ch=givenValue.charAt(0);
    if (ch == 'G' || ch == 'g' || ch == 'd' || ch == 'D') {
      return ""String_Node_Str"";
    }
    if (ch == 'C' || ch == 'c') {
      return getCurrencySymbol(locale) + ""String_Node_Str"";
    }
    if (ch == 'f' || ch == 'F') {
      return ""String_Node_Str"";
    }
    if (ch == 'N' || ch == 'n') {
      return ""String_Node_Str"";
    }
    if (ch == 'p' || ch == 'P') {
      return ""String_Node_Str"";
    }
    if (ch == 'e' || ch == 'E') {
      return ""String_Node_Str"";
    }
    if (ch == 'x' || ch == 'X') {
      return ""String_Node_Str"";
    }
  }
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (validType(givenValue)) {
    return givenValue;
  }
  if (isScientific(givenValue)) {
    givenValue=givenValue.replace(""String_Node_Str"",""String_Node_Str"");
    return givenValue;
  }
  int count=givenValue.length();
  boolean flag=false;
  for (int num=0; num < count; num++) {
    char temp=givenValue.charAt(num);
    if (temp == '\'') {
      if (flag) {
        flag=false;
      }
 else {
        char nextChar=givenValue.charAt(num + 1);
        if (nextChar == '\'') {
          returnStr=returnStr + '\'';
          num++;
          flag=false;
        }
 else {
          flag=true;
        }
      }
    }
 else {
      if (flag) {
        returnStr=returnStr + ""String_Node_Str"" + temp;
      }
 else {
        if (specialStr.indexOf(temp) != -1) {
          returnStr=returnStr + ""String_Node_Str"" + temp;
        }
 else         if (temp == '¤') {
          String symbol=getCurrencySymbol(locale);
          returnStr=returnStr + ""String_Node_Str"" + symbol+ ""String_Node_Str"";
        }
 else         if (currencySymbol.indexOf(temp) != -1) {
          returnStr=returnStr + ""String_Node_Str"" + temp+ ""String_Node_Str"";
        }
 else {
          returnStr=returnStr + temp;
        }
      }
    }
  }
  if (returnStr.indexOf(""String_Node_Str"") == -1 && returnStr.indexOf(""String_Node_Str"") == -1) {
    returnStr+=""String_Node_Str"";
  }
  return returnStr;
}",0.9732124874118832
69337,"public String getSplitText(){
  ITextContent textContent=(ITextContent)blockContainer.content;
  String splitText=textContent.getText().substring(textStartPos,textStartPos + textLength);
  return splitText;
}","public String getSplitText(){
  ITextContent textContent=(ITextContent)blockContainer.content;
  if (textStartPos == -1 || textLength == 0) {
    return ""String_Node_Str"";
  }
 else {
    String splitText=textContent.getText().substring(textStartPos,textStartPos + textLength);
    return splitText;
  }
}",0.8109161793372319
69338,"public String getSplitText(){
  ITextContent textContent=(ITextContent)inlineContainer.content;
  String splitText=textContent.getText().substring(textStartPos,textStartPos + textLength);
  return splitText;
}","public String getSplitText(){
  ITextContent textContent=(ITextContent)inlineContainer.content;
  if (textStartPos == -1 || textLength == 0) {
    return ""String_Node_Str"";
  }
 else {
    String splitText=textContent.getText().substring(textStartPos,textStartPos + textLength);
    return splitText;
  }
}",0.8116504854368932
69339,"/** 
 * Create filter provider by specified input.
 * @param input
 * @param providerInput
 * @return the created filter provider
 * @since 2.3
 */
public static AbstractFilterHandleProvider createFilterProvider(Object input,Object providerInput){
  AbstractFilterHandleProvider currentProvider=null;
  Object handle=null;
  if (input instanceof List<?>) {
    handle=((List<?>)input).get(0);
  }
 else {
    handle=input;
  }
  AbstractFilterHandleProvider baseProvider=getAdapter(new ChartPageGenerator(),AbstractFilterHandleProvider.class);
  if (baseProvider == null) {
    baseProvider=new FilterHandleProvider();
  }
  if (handle instanceof ReportItemHandle && ChartXTabUtil.getBindingCube((DesignElementHandle)handle) != null) {
    if (((ReportItemHandle)handle).getCube() != null && (ChartReportItemUtil.isChildOfMultiViewsHandle((DesignElementHandle)handle) || ((ReportItemHandle)handle).getDataBindingReference() != null)) {
      ReportItemHandle ref=((ReportItemHandle)handle).getDataBindingReference();
      if (ChartReportItemUtil.isChartHandle(ref)) {
        currentProvider=new ChartShareCubeFiltersHandleProvider(baseProvider);
      }
 else {
        currentProvider=new ChartShareCrosstabFiltersHandleProvider();
      }
    }
 else {
      currentProvider=new ChartCubeFilterHandleProvider(baseProvider);
    }
  }
 else {
    if (ChartReportItemUtil.isChildOfMultiViewsHandle((DesignElementHandle)handle)) {
      currentProvider=new ChartShareFiltersHandleProvider(baseProvider);
    }
 else {
      currentProvider=new ChartFilterHandleProvider(baseProvider);
    }
  }
  return currentProvider;
}","/** 
 * Create filter provider by specified input.
 * @param input
 * @param providerInput
 * @return the created filter provider
 * @since 2.3
 */
public static AbstractFilterHandleProvider createFilterProvider(Object input,Object providerInput){
  AbstractFilterHandleProvider currentProvider=null;
  Object handle=null;
  if (input instanceof List<?>) {
    handle=((List<?>)input).get(0);
  }
 else {
    handle=input;
  }
  AbstractFilterHandleProvider baseProvider=getAdapter(new ChartPageGenerator(),AbstractFilterHandleProvider.class);
  if (baseProvider == null) {
    baseProvider=new FilterHandleProvider();
  }
  if (handle instanceof ReportItemHandle && ChartXTabUtil.getBindingCube((DesignElementHandle)handle) != null) {
    if (((ReportItemHandle)handle).getCube() != null && (ChartReportItemUtil.isChildOfMultiViewsHandle((DesignElementHandle)handle) || ((ReportItemHandle)handle).getDataBindingReference() != null)) {
      ReportItemHandle ref=((ReportItemHandle)handle).getDataBindingReference();
      if (ChartReportItemUtil.isChartHandle(ref)) {
        currentProvider=new ChartShareCubeFiltersHandleProvider(baseProvider);
      }
 else {
        currentProvider=new ChartShareCrosstabFiltersHandleProvider();
      }
    }
 else {
      currentProvider=new ChartCubeFilterHandleProvider(baseProvider);
    }
  }
 else {
    if (ChartReportItemUtil.isChildOfMultiViewsHandle((DesignElementHandle)handle)) {
      currentProvider=new ChartShareFiltersHandleProvider(baseProvider);
    }
 else {
      currentProvider=new ChartFilterHandleProvider(baseProvider);
    }
  }
  currentProvider.setInput(input);
  return currentProvider;
}",0.9759219750076196
69340,"public NumberFormatter getNumberFormatter(String pattern,String locale){
  String key=pattern + ""String_Node_Str"" + locale;
  NumberFormatter fmt=numberFormatters.get(key);
  if (fmt == null) {
    fmt=new NumberFormatter(pattern,ulocale == null ? ulocale : new ULocale(locale));
    numberFormatters.put(key,fmt);
  }
  return fmt;
}","public NumberFormatter getNumberFormatter(String pattern,String locale){
  String key=pattern + ""String_Node_Str"" + locale;
  NumberFormatter fmt=numberFormatters.get(key);
  if (fmt == null) {
    fmt=new NumberFormatter(pattern,locale == null ? ulocale : new ULocale(locale));
    numberFormatters.put(key,fmt);
  }
  return fmt;
}",0.9985007496251874
69341,"/** 
 * Gets the SWT image instance for given Image model
 * @return SWT image instance
 */
public Image getImage(){
  String imageSource=getImageHandle().getSource();
  if (DesignChoiceConstants.IMAGE_REF_TYPE_EMBED.equalsIgnoreCase(imageSource)) {
    return ImageManager.getInstance().getEmbeddedImage(getImageHandle().getModuleHandle(),getImageHandle().getImageName());
  }
 else   if (DesignChoiceConstants.IMAGE_REF_TYPE_FILE.equalsIgnoreCase(imageSource)) {
    if (URIUtil.isValidResourcePath(getImageHandle().getURI())) {
      return ImageManager.getInstance().getImage(getHandle().getModuleHandle(),URIUtil.getLocalPath(removeQuoteString(getImageHandle().getURI())));
    }
 else {
      return ImageManager.getInstance().getImage(getHandle().getModuleHandle(),removeQuoteString(getImageHandle().getURI()));
    }
  }
 else   if (DesignChoiceConstants.IMAGE_REF_TYPE_URL.equalsIgnoreCase(imageSource)) {
    return ImageManager.getInstance().getURIImage(getHandle().getModuleHandle(),removeQuoteString(getImageHandle().getURI()));
  }
 else   if (DesignChoiceConstants.IMAGE_REF_TYPE_EXPR.equalsIgnoreCase(imageSource)) {
  }
  return null;
}","/** 
 * Gets the SWT image instance for given Image model
 * @return SWT image instance
 */
public Image getImage(){
  ImageHandle imageHandel=getImageHandle();
  String imageSource=imageHandel.getSource();
  PropertyHandle uriPropertyHandle=imageHandel.getPropertyHandle(IImageItemModel.URI_PROP);
  ExpressionHandle expression=imageHandel.getExpressionProperty(IImageItemModel.URI_PROP);
  String url=imageHandel.getURI();
  if (uriPropertyHandle != null && uriPropertyHandle.isLocal()) {
    if (expression != null && !ExpressionType.CONSTANT.equals(expression.getType())) {
      url=removeQuoteString(url);
    }
  }
  if (DesignChoiceConstants.IMAGE_REF_TYPE_EMBED.equalsIgnoreCase(imageSource)) {
    return ImageManager.getInstance().getEmbeddedImage(imageHandel.getModuleHandle(),imageHandel.getImageName());
  }
 else   if (DesignChoiceConstants.IMAGE_REF_TYPE_FILE.equalsIgnoreCase(imageSource)) {
    if (URIUtil.isValidResourcePath(url)) {
      return ImageManager.getInstance().getImage(imageHandel.getModuleHandle(),URIUtil.getLocalPath(url));
    }
 else {
      return ImageManager.getInstance().getImage(imageHandel.getModuleHandle(),url);
    }
  }
 else   if (DesignChoiceConstants.IMAGE_REF_TYPE_URL.equalsIgnoreCase(imageSource)) {
    return ImageManager.getInstance().getURIImage(imageHandel.getModuleHandle(),url);
  }
 else   if (DesignChoiceConstants.IMAGE_REF_TYPE_EXPR.equalsIgnoreCase(imageSource)) {
  }
  return null;
}",0.7024952015355086
69342,"private void initURIEditor(){
  if (getURI() != null && selectedType == URI_TYPE) {
    setURIEditor();
  }
  if (getURI() != null && selectedType == FILE_TYPE) {
    setURIEditor();
  }
  ;
  if (selectedType == BLOB_TYPE) {
    if (inputImage.getValueExpression() != null) {
      uriEditor.setText(inputImage.getValueExpression());
    }
  }
  uriEditor.setFocus();
  clearPreview();
  if (!uriEditor.getText().equals(""String_Node_Str"") && selectedType != BLOB_TYPE) {
    preview(DEUtil.removeQuote(uriEditor.getText()));
  }
}","private void initURIEditor(){
  if (getURI() != null && selectedType == URI_TYPE) {
    setURIEditor();
  }
  if (getURI() != null && selectedType == FILE_TYPE) {
    setURIEditor();
  }
  ;
  if (selectedType == BLOB_TYPE) {
    if (inputImage.getValueExpression() != null) {
      uriEditor.setText(inputImage.getValueExpression());
    }
  }
  uriEditor.setFocus();
  clearPreview();
  if (!uriEditor.getText().equals(""String_Node_Str"") && selectedType != BLOB_TYPE) {
    previewTextEditor();
  }
}",0.9583736689254598
69343,"public void focusLost(FocusEvent e){
  preview(DEUtil.removeQuote(uriEditor.getText().trim()));
}","public void focusLost(FocusEvent e){
  previewTextEditor();
}",0.7341772151898734
69344,"private void buildURIEditor(int type){
  Label uriEditorLabel=new Label(inputArea,SWT.NONE);
  GridData labelGd=new GridData(GridData.FILL_HORIZONTAL);
  labelGd.horizontalSpan=3;
  uriEditorLabel.setLayoutData(labelGd);
  uriEditorLabel.setText(uriEditorLabelMap.get(Integer.valueOf(type)));
  uriEditor=new Text(inputArea,SWT.SINGLE | SWT.BORDER);
  GridData textGd=new GridData(GridData.GRAB_HORIZONTAL | GridData.FILL_HORIZONTAL);
  uriEditor.setLayoutData(textGd);
  uriEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  uriEditor.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
    }
    public void focusLost(    FocusEvent e){
      preview(DEUtil.removeQuote(uriEditor.getText().trim()));
    }
  }
);
}","private void buildURIEditor(int type){
  Label uriEditorLabel=new Label(inputArea,SWT.NONE);
  GridData labelGd=new GridData(GridData.FILL_HORIZONTAL);
  labelGd.horizontalSpan=3;
  uriEditorLabel.setLayoutData(labelGd);
  uriEditorLabel.setText(uriEditorLabelMap.get(Integer.valueOf(type)));
  uriEditor=new Text(inputArea,SWT.SINGLE | SWT.BORDER);
  GridData textGd=new GridData(GridData.GRAB_HORIZONTAL | GridData.FILL_HORIZONTAL);
  uriEditor.setLayoutData(textGd);
  uriEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  uriEditor.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
    }
    public void focusLost(    FocusEvent e){
      previewTextEditor();
    }
  }
);
}",0.9692118226600984
69345,"protected void paintFigure(Graphics graphics){
  setIntervalForPaint();
  double dotsPerUnit=getDPU();
  Rectangle clip=transposer.t(graphics.getClip(Rectangle.SINGLETON));
  Rectangle figClientArea=transposer.t(getClientArea());
  Rectangle clippedBounds=clip;
  clippedBounds.x=figClientArea.x;
  clippedBounds.width=figClientArea.width - BORDER_WIDTH;
  if (isOpaque()) {
    graphics.fillRectangle(transposer.t(clippedBounds));
  }
  int unitsPerMajorMark=(int)(minPixelsBetweenMajorMarks / dotsPerUnit);
  if (minPixelsBetweenMajorMarks % dotsPerUnit != 0.0) {
    unitsPerMajorMark++;
  }
  if (interval > 0) {
    int intervalMultiple=interval;
    while (intervalMultiple < unitsPerMajorMark) {
      intervalMultiple+=interval;
    }
    unitsPerMajorMark=intervalMultiple;
  }
 else   if (unitsPerMajorMark != 1 && unitsPerMajorMark % 2 != 0) {
    unitsPerMajorMark++;
  }
  int divsPerMajorMark;
  if (divisions > 0 && dotsPerUnit * unitsPerMajorMark / divisions >= minPixelsBetweenMarks) {
    divsPerMajorMark=divisions;
  }
 else {
    divsPerMajorMark=2;
    if (getUnit() == RulerProvider.UNIT_CENTIMETERS) {
      divsPerMajorMark=10;
    }
 else     if (getUnit() == RulerProvider.UNIT_INCHES) {
      divsPerMajorMark=8;
    }
    while (dotsPerUnit * unitsPerMajorMark / divsPerMajorMark < minPixelsBetweenMarks) {
      divsPerMajorMark/=2;
      if (divsPerMajorMark == 0) {
        break;
      }
    }
    if (divsPerMajorMark == 0) {
      divsPerMajorMark=1;
    }
  }
  int mediumMarkerDivNum=1;
switch (divsPerMajorMark) {
case 20:
case 10:
case 5:
    mediumMarkerDivNum=5;
  break;
case 16:
case 8:
mediumMarkerDivNum=4;
break;
case 4:
mediumMarkerDivNum=2;
break;
case 2:
mediumMarkerDivNum=1;
}
Rectangle leftRect=transposer.t(getScaleLeftSpace());
int leftMargin=leftRect.y;
double dotsPerDivision=dotsPerUnit * unitsPerMajorMark / divsPerMajorMark;
int startMark=(int)((clippedBounds.y - leftMargin) / (dotsPerUnit * unitsPerMajorMark)) * divsPerMajorMark;
if (clippedBounds.y < 0) {
startMark-=divsPerMajorMark;
}
int endMark=(int)(((clippedBounds.y + clippedBounds.height - leftMargin) / dotsPerDivision)) + 1;
int leading=FigureUtilities.getFontMetrics(getFont()).getLeading();
Rectangle forbiddenZone=new Rectangle();
for (int div=startMark; div <= endMark; div++) {
if (leftRect.bottom() <= clippedBounds.bottom()) {
}
int y=(int)(div * dotsPerDivision);
if (div % divsPerMajorMark == 0) {
String num=""String_Node_Str"" + (div / divsPerMajorMark) * unitsPerMajorMark;
if (isHorizontal()) {
Dimension numSize=FigureUtilities.getStringExtents(num,getFont());
if (numSize.width % 2 == 0) {
numSize.width--;
}
Point textLocation=new Point(y - (numSize.width / 2) + leftMargin,clippedBounds.x + textMargin - leading);
forbiddenZone.setLocation(textLocation);
forbiddenZone.setSize(numSize);
forbiddenZone.expand(1,1);
graphics.fillRectangle(forbiddenZone);
if (canDrawNumber(num,textLocation,graphics)) {
graphics.drawText(num,textLocation);
}
}
 else {
Image numImage=ImageUtilities.createRotatedImageOfString(num,getFont(),getForegroundColor(),getBackgroundColor());
Point textLocation=new Point(clippedBounds.x + textMargin,y - (numImage.getBounds().height / 2) + leftMargin);
forbiddenZone.setLocation(textLocation);
forbiddenZone.setSize(numImage.getBounds().width,numImage.getBounds().height);
forbiddenZone.expand(1,1 + (numImage.getBounds().height % 2 == 0 ? 1 : 0));
graphics.fillRectangle(forbiddenZone);
if (canDrawNumber(num,new Point(textLocation.x,textLocation.y + getScaleLeftSpace().y - numImage.getBounds().height),graphics)) {
graphics.drawImage(numImage,textLocation);
}
numImage.dispose();
}
}
 else if ((div % divsPerMajorMark) % mediumMarkerDivNum == 0) {
Point start=transposer.t(new Point((clippedBounds.getRight().x - mediumMarkWidth) / 2,y + leftMargin));
Point end=transposer.t(new Point(((clippedBounds.getRight().x - mediumMarkWidth) / 2) + mediumMarkWidth,y + leftMargin));
if (!forbiddenZone.contains(start)) {
graphics.drawLine(start,end);
}
}
 else {
Point start=transposer.t(new Point((clippedBounds.getRight().x - smallMarkWidth) / 2,y + leftMargin));
Point end=transposer.t(new Point(((clippedBounds.getRight().x - smallMarkWidth) / 2) + smallMarkWidth,y + leftMargin));
if (!forbiddenZone.contains(start)) {
graphics.drawLine(start,end);
}
}
}
clippedBounds.expand(BORDER_WIDTH,0);
graphics.setForegroundColor(ColorConstants.buttonDarker);
graphics.drawLine(transposer.t(clippedBounds.getTopRight().translate(-1,-1)),transposer.t(clippedBounds.getBottomRight().translate(-1,-1)));
Color c=Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
graphics.setBackgroundColor(c);
Rectangle rect=new Rectangle(0,0,clippedBounds.height,leftMargin - 2);
rect=transposer.t(rect);
graphics.fillRectangle(rect);
graphics.fillRectangle(getEndRect(graphics.getClip(Rectangle.SINGLETON)));
}","protected void paintFigure(Graphics graphics){
  setIntervalForPaint();
  double dotsPerUnit=getDPU();
  Rectangle clip=transposer.t(graphics.getClip(Rectangle.SINGLETON));
  Rectangle figClientArea=transposer.t(getClientArea());
  Rectangle clippedBounds=clip;
  clippedBounds.x=figClientArea.x;
  clippedBounds.width=figClientArea.width - BORDER_WIDTH;
  if (isOpaque()) {
    graphics.fillRectangle(transposer.t(clippedBounds));
  }
  int unitsPerMajorMark=(int)(minPixelsBetweenMajorMarks / dotsPerUnit);
  if (minPixelsBetweenMajorMarks % dotsPerUnit != 0.0) {
    unitsPerMajorMark++;
  }
  if (interval > 0) {
    int intervalMultiple=interval;
    while (intervalMultiple < unitsPerMajorMark) {
      intervalMultiple+=interval;
    }
    unitsPerMajorMark=intervalMultiple;
  }
 else   if (unitsPerMajorMark != 1 && unitsPerMajorMark % 2 != 0) {
    unitsPerMajorMark++;
  }
  int divsPerMajorMark;
  if (divisions > 0 && dotsPerUnit * unitsPerMajorMark / divisions >= minPixelsBetweenMarks) {
    divsPerMajorMark=divisions;
  }
 else {
    divsPerMajorMark=2;
    if (getUnit() == RulerProvider.UNIT_CENTIMETERS) {
      divsPerMajorMark=10;
    }
 else     if (getUnit() == RulerProvider.UNIT_INCHES) {
      divsPerMajorMark=8;
    }
    while (dotsPerUnit * unitsPerMajorMark / divsPerMajorMark < minPixelsBetweenMarks) {
      divsPerMajorMark/=2;
      if (divsPerMajorMark == 0) {
        break;
      }
    }
    if (divsPerMajorMark == 0) {
      divsPerMajorMark=1;
    }
  }
  int mediumMarkerDivNum=1;
switch (divsPerMajorMark) {
case 20:
case 10:
case 5:
    mediumMarkerDivNum=5;
  break;
case 16:
case 8:
mediumMarkerDivNum=4;
break;
case 4:
mediumMarkerDivNum=2;
break;
case 2:
mediumMarkerDivNum=1;
}
Rectangle leftRect=transposer.t(getScaleLeftSpace());
int leftMargin=leftRect.y;
double dotsPerDivision=dotsPerUnit * unitsPerMajorMark / divsPerMajorMark;
int startMark=(int)((clippedBounds.y - leftMargin) / (dotsPerUnit * unitsPerMajorMark)) * divsPerMajorMark;
if (clippedBounds.y < 0) {
startMark-=divsPerMajorMark;
}
int endMark=(int)(((clippedBounds.y + clippedBounds.height - leftMargin) / dotsPerDivision)) + 1;
int leading=FigureUtilities.getFontMetrics(getFont()).getLeading();
Rectangle forbiddenZone=new Rectangle();
for (int div=startMark; div <= endMark; div++) {
if (leftRect.bottom() <= clippedBounds.bottom()) {
}
int y=(int)(div * dotsPerDivision);
if (div % divsPerMajorMark == 0) {
String num=""String_Node_Str"" + (div / divsPerMajorMark) * unitsPerMajorMark;
if (isHorizontal()) {
Dimension numSize=FigureUtilities.getStringExtents(num,getFont());
if (numSize.width % 2 == 0) {
numSize.width--;
}
Point textLocation=new Point(y - (numSize.width / 2) + leftMargin,clippedBounds.x + textMargin - leading);
forbiddenZone.setLocation(textLocation);
forbiddenZone.setSize(numSize);
forbiddenZone.expand(1,1);
graphics.fillRectangle(forbiddenZone);
{
graphics.drawText(num,textLocation);
}
}
 else {
Image numImage=ImageUtilities.createRotatedImageOfString(num,getFont(),getForegroundColor(),getBackgroundColor());
Point textLocation=new Point(clippedBounds.x + textMargin,y - (numImage.getBounds().height / 2) + leftMargin);
forbiddenZone.setLocation(textLocation);
forbiddenZone.setSize(numImage.getBounds().width,numImage.getBounds().height);
forbiddenZone.expand(1,1 + (numImage.getBounds().height % 2 == 0 ? 1 : 0));
graphics.fillRectangle(forbiddenZone);
{
graphics.drawImage(numImage,textLocation);
}
numImage.dispose();
}
}
 else if ((div % divsPerMajorMark) % mediumMarkerDivNum == 0) {
Point start=transposer.t(new Point((clippedBounds.getRight().x - mediumMarkWidth) / 2,y + leftMargin));
Point end=transposer.t(new Point(((clippedBounds.getRight().x - mediumMarkWidth) / 2) + mediumMarkWidth,y + leftMargin));
if (!forbiddenZone.contains(start)) {
graphics.drawLine(start,end);
}
}
 else {
Point start=transposer.t(new Point((clippedBounds.getRight().x - smallMarkWidth) / 2,y + leftMargin));
Point end=transposer.t(new Point(((clippedBounds.getRight().x - smallMarkWidth) / 2) + smallMarkWidth,y + leftMargin));
if (!forbiddenZone.contains(start)) {
graphics.drawLine(start,end);
}
}
}
clippedBounds.expand(BORDER_WIDTH,0);
graphics.setForegroundColor(ColorConstants.buttonDarker);
graphics.drawLine(transposer.t(clippedBounds.getTopRight().translate(-1,-1)),transposer.t(clippedBounds.getBottomRight().translate(-1,-1)));
Color c=Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
graphics.setBackgroundColor(c);
Rectangle rect=new Rectangle(0,0,transposer.t(getBounds()).width,leftMargin);
rect=transposer.t(rect);
graphics.fillRectangle(rect);
graphics.fillRectangle(getEndRect(graphics.getClip(Rectangle.SINGLETON)));
}",0.9774939809483932
69346,"protected void setUp() throws Exception {
  super.setUp();
  cells[0]=new CellArea(10,10,40,40);
  cells[1]=new CellArea(50,10,40,40);
  cells[2]=new CellArea(90,10,40,40);
  cells[2].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[2].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  cells[3]=new CellArea(10,50,40,80);
  cells[3].defineBorder(BorderInfo.BOTTOM_BORDER,6);
  cells[3].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[4]=new CellArea(50,50,40,40);
  cells[5]=new CellArea(90,50,40,40);
  cells[5].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[5].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  cells[6]=null;
  cells[7]=new CellArea(50,90,40,40);
  cells[7].defineBorder(BorderInfo.BOTTOM_BORDER,4);
  cells[7].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[8]=new CellArea(90,90,40,40);
  cells[8].defineBorder(BorderInfo.BOTTOM_BORDER,2);
  cells[8].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[8].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[8].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(""String_Node_Str""));
  writer=new PostscriptWriter(bufferedOutputStream,""String_Node_Str"");
  writer.startRenderer();
  writer.startPage(pageWidth,pageHeight);
  testBorderDraw();
  writer.endPage();
  writer.stopRenderer();
}","protected void setUp() throws Exception {
  super.setUp();
  cells[0]=new CellArea(10,10,40,40);
  cells[1]=new CellArea(50,10,40,40);
  cells[2]=new CellArea(90,10,40,40);
  cells[2].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[2].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  cells[3]=new CellArea(10,50,40,80);
  cells[3].defineBorder(BorderInfo.BOTTOM_BORDER,6);
  cells[3].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[4]=new CellArea(50,50,40,40);
  cells[5]=new CellArea(90,50,40,40);
  cells[5].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[5].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  cells[6]=null;
  cells[7]=new CellArea(50,90,40,40);
  cells[7].defineBorder(BorderInfo.BOTTOM_BORDER,4);
  cells[7].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[8]=new CellArea(90,90,40,40);
  cells[8].defineBorder(BorderInfo.BOTTOM_BORDER,2);
  cells[8].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[8].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[8].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(""String_Node_Str""));
  writer=new PostscriptWriter(bufferedOutputStream,""String_Node_Str"");
  writer.startRenderer(null,null,null,1,false);
  writer.startPage(pageWidth,pageHeight);
  testBorderDraw();
  writer.endPage();
  writer.stopRenderer();
}",0.9921259842519684
69347,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(Messages.getString(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(Messages.getString(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(Messages.getString(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(Messages.getString(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(""String_Node_Str"");
  paperSize.setToolTip(null);
  paperSize.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(Messages.getString(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.STRING);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(Messages.getString(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(Messages.getString(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(Messages.getString(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(Messages.getString(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(""String_Node_Str"");
  paperSize.setToolTip(null);
  paperSize.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(Messages.getString(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.STRING);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray};
}",0.9952649379932356
69348,"/** 
 * Initializes the pdfEmitter.
 * @param services the emitter svervices object.
 * @throws EngineException 
 */
private void initialize(IEmitterServices services) throws EngineException {
  this.services=services;
  IReportRunnable reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  this.context=services.getReportContext();
  this.output=EmitterUtil.getOuputStream(services,""String_Node_Str"");
}","/** 
 * Initializes the pdfEmitter.
 * @param services the emitter svervices object.
 * @throws EngineException 
 */
private void initialize(IEmitterServices services) throws EngineException {
  this.services=services;
  renderOption=(RenderOption)services.getRenderOption();
  IReportRunnable reportRunnable=services.getReportRunnable();
  if (reportRunnable != null) {
    reportDesign=(ReportDesignHandle)reportRunnable.getDesignHandle();
  }
  this.context=services.getReportContext();
  this.output=EmitterUtil.getOuputStream(services,""String_Node_Str"");
}",0.9464788732394366
69349,"public IPageDevice createPageDevice(String title,String author,String subject,String description,IReportContext context,IReportContent report){
  try {
    return new PostscriptPageDevice(output,title,author,description);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage());
  }
  return null;
}","public IPageDevice createPageDevice(String title,String author,String subject,String description,IReportContext context,IReportContent report){
  try {
    return new PostscriptPageDevice(renderOption,output,title,author,description);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage());
  }
  return null;
}",0.97984496124031
69350,"/** 
 * Gets postscript level.
 */
public int getPostscriptLevel(){
  Object value=options.get(PS_LEVEL);
  if (value instanceof Integer) {
    return ((Integer)value).intValue();
  }
  return 1;
}","/** 
 * Gets postscript level.
 */
public int getPostscriptLevel(){
  return getIntOption(PS_LEVEL,1);
}",0.5913621262458472
69351,"public void startRenderer(String author,String description) throws IOException {
  out.println(""String_Node_Str"" + author);
  FileUtil.load(""String_Node_Str"",out);
}","public void startRenderer(String author,String description,String paperSize,String paperTray,String duplex,int copies,boolean collate) throws IOException {
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  setPaperSize(paperSize);
  setPaperTray(paperTray);
  setDuplex(duplex);
  FileUtil.load(""String_Node_Str"",out);
}",0.5030487804878049
69352,"public PostscriptPageDevice(OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  writer.startRenderer(author,description);
}","public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  String paperTray=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  String duplex=renderOption.getStringOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  writer.startRenderer(author,description,paperSize,paperTray,duplex,copies,collate);
}",0.5381818181818182
69353,"public boolean isEditable(){
  if (((ReportItemHandle)DEUtil.getInputFirstElement(input)).getCube() != null) {
    return true;
  }
  return false;
}","public boolean isEditable(){
  if (((ReportItemHandle)DEUtil.getInputFirstElement(getInput())).getCube() != null) {
    return true;
  }
  return false;
}",0.976897689768977
69354,"/** 
 * Create filter provider by specified input.
 * @param input
 * @param providerInput
 * @return the created filter provider
 * @since 2.3
 */
public static AbstractFilterHandleProvider createFilterProvider(Object input,Object providerInput){
  AbstractFilterHandleProvider currentProvider=null;
  Object handle=null;
  if (input instanceof List<?>) {
    handle=((List<?>)input).get(0);
  }
 else {
    handle=input;
  }
  AbstractFilterHandleProvider baseProvider=getAdapter(new ChartPageGenerator(),AbstractFilterHandleProvider.class);
  if (baseProvider == null) {
    baseProvider=new FilterHandleProvider();
  }
  if (handle instanceof ReportItemHandle && ChartXTabUtil.getBindingCube((DesignElementHandle)handle) != null) {
    if (((ReportItemHandle)handle).getCube() != null && (ChartReportItemUtil.isChildOfMultiViewsHandle((DesignElementHandle)handle) || ((ReportItemHandle)handle).getDataBindingReference() != null)) {
      ReportItemHandle ref=((ReportItemHandle)handle).getDataBindingReference();
      if (ChartReportItemUtil.isChartHandle(ref)) {
        currentProvider=new ChartShareCubeFiltersHandleProvider(baseProvider);
      }
 else {
        currentProvider=new ChartShareCrosstabFiltersHandleProvider();
      }
    }
 else {
      currentProvider=new ChartCubeFilterHandleProvider(baseProvider);
    }
  }
 else {
    if (ChartReportItemUtil.isChildOfMultiViewsHandle((DesignElementHandle)handle)) {
      currentProvider=new ChartShareFiltersHandleProvider(baseProvider);
    }
 else {
      currentProvider=new ChartFilterHandleProvider(baseProvider);
    }
  }
  currentProvider.setInput(providerInput);
  return currentProvider;
}","/** 
 * Create filter provider by specified input.
 * @param input
 * @param providerInput
 * @return the created filter provider
 * @since 2.3
 */
public static AbstractFilterHandleProvider createFilterProvider(Object input,Object providerInput){
  AbstractFilterHandleProvider currentProvider=null;
  Object handle=null;
  if (input instanceof List<?>) {
    handle=((List<?>)input).get(0);
  }
 else {
    handle=input;
  }
  AbstractFilterHandleProvider baseProvider=getAdapter(new ChartPageGenerator(),AbstractFilterHandleProvider.class);
  if (baseProvider == null) {
    baseProvider=new FilterHandleProvider();
  }
  if (handle instanceof ReportItemHandle && ChartXTabUtil.getBindingCube((DesignElementHandle)handle) != null) {
    if (((ReportItemHandle)handle).getCube() != null && (ChartReportItemUtil.isChildOfMultiViewsHandle((DesignElementHandle)handle) || ((ReportItemHandle)handle).getDataBindingReference() != null)) {
      ReportItemHandle ref=((ReportItemHandle)handle).getDataBindingReference();
      if (ChartReportItemUtil.isChartHandle(ref)) {
        currentProvider=new ChartShareCubeFiltersHandleProvider(baseProvider);
      }
 else {
        currentProvider=new ChartShareCrosstabFiltersHandleProvider();
      }
    }
 else {
      currentProvider=new ChartCubeFilterHandleProvider(baseProvider);
    }
  }
 else {
    if (ChartReportItemUtil.isChildOfMultiViewsHandle((DesignElementHandle)handle)) {
      currentProvider=new ChartShareFiltersHandleProvider(baseProvider);
    }
 else {
      currentProvider=new ChartFilterHandleProvider(baseProvider);
    }
  }
  return currentProvider;
}",0.9735481909394952
69355,"public boolean isEditable(){
  if (input == null) {
    return false;
  }
  boolean editable=super.isEditable();
  if (ChartReportItemUtil.isChildOfMultiViewsHandle(((ReportItemHandle)DEUtil.getInputFirstElement(input)))) {
    return false;
  }
  return editable;
}","public boolean isEditable(){
  if (getInput() == null) {
    return false;
  }
  boolean editable=super.isEditable();
  if (ChartReportItemUtil.isChildOfMultiViewsHandle(((ReportItemHandle)DEUtil.getInputFirstElement(input)))) {
    return false;
  }
  return editable;
}",0.9720670391061452
69356,"private Object evaluate(ICompiledScript compiledScript) throws BirtException {
  return scriptContext.evaluate(compiledScript);
}","private Object evaluate(ICompiledScript compiledScript) throws BirtException {
  return getScriptContext().evaluate(compiledScript);
}",0.973384030418251
69357,"private void placeComponent(){
  mainComposite.setLayoutData(new GridData(GridData.FILL_VERTICAL | GridData.FILL_HORIZONTAL));
  mainComposite.setLayout(new GridLayout(3,true));
  Group sGroup=new Group(mainComposite,SWT.NONE);
  sGroup.setLayout(new GridLayout());
  sGroup.setLayoutData(new GridData(GridData.FILL_VERTICAL | GridData.FILL_HORIZONTAL));
  sGroup.setText(Messages.getString(""String_Node_Str""));
  createTree(sGroup);
  Composite rComp=new Composite(mainComposite,SWT.NONE);
  GridData gridData=new GridData(GridData.FILL_VERTICAL | GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=2;
  rComp.setLayout(new GridLayout());
  rComp.setLayoutData(gridData);
  Group preGroup=new Group(rComp,SWT.NONE);
  preGroup.setLayout(new GridLayout());
  preGroup.setLayoutData(new GridData(GridData.FILL_VERTICAL | GridData.FILL_HORIZONTAL));
  preGroup.setText(Messages.getString(""String_Node_Str""));
  gridData=new GridData(GridData.FILL_VERTICAL | GridData.HORIZONTAL_ALIGN_FILL);
  preGroup.setLayoutData(gridData);
  paintCanvas=new Canvas(preGroup,SWT.BORDER);
  paintCanvas.setLayoutData(new GridData(GridData.FILL_BOTH));
  paintCanvas.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  preview=new ChartPreview();
  paintCanvas.addPaintListener(preview);
  paintCanvas.addControlListener(preview);
  preview.setPreview(paintCanvas);
  Group desGroup=new Group(rComp,SWT.NONE);
  desGroup.setLayout(new GridLayout());
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.heightHint=60;
  desGroup.setLayoutData(gridData);
  desGroup.setText(Messages.getString(""String_Node_Str""));
  description=new Label(desGroup,SWT.WRAP);
  description.setLayoutData(new GridData(GridData.FILL_VERTICAL | GridData.FILL_HORIZONTAL));
  description.setText(icp.getDefaultDescription());
}","private void placeComponent(){
  mainComposite.setLayoutData(new GridData(GridData.FILL_VERTICAL | GridData.FILL_HORIZONTAL));
  mainComposite.setLayout(new GridLayout(3,true));
  Group sGroup=new Group(mainComposite,SWT.NONE);
  sGroup.setLayout(new GridLayout());
  sGroup.setLayoutData(new GridData(GridData.FILL_VERTICAL | GridData.FILL_HORIZONTAL));
  sGroup.setText(Messages.getString(""String_Node_Str""));
  createTree(sGroup);
  Composite rComp=new Composite(mainComposite,SWT.NONE);
  GridData gridData=new GridData(GridData.FILL_VERTICAL | GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=2;
  rComp.setLayout(new GridLayout());
  rComp.setLayoutData(gridData);
  Group preGroup=new Group(rComp,SWT.NONE);
  preGroup.setLayout(new GridLayout());
  preGroup.setLayoutData(new GridData(GridData.FILL_VERTICAL | GridData.FILL_HORIZONTAL));
  preGroup.setText(Messages.getString(""String_Node_Str""));
  gridData=new GridData(GridData.FILL_VERTICAL | GridData.HORIZONTAL_ALIGN_FILL);
  preGroup.setLayoutData(gridData);
  paintCanvas=new Canvas(preGroup,SWT.BORDER);
  paintCanvas.setLayoutData(new GridData(GridData.FILL_BOTH));
  paintCanvas.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  preview=new ChartPreview();
  paintCanvas.addPaintListener(preview);
  paintCanvas.addControlListener(preview);
  preview.setPreview(paintCanvas);
  Group desGroup=new Group(rComp,SWT.NONE);
  desGroup.setLayout(new GridLayout());
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.heightHint=60;
  desGroup.setLayoutData(gridData);
  desGroup.setText(Messages.getString(""String_Node_Str""));
  description=new Text(desGroup,SWT.WRAP | SWT.READ_ONLY | SWT.V_SCROLL);
  description.setLayoutData(new GridData(GridData.FILL_VERTICAL | GridData.FILL_HORIZONTAL));
  description.setText(icp.getDefaultDescription());
}",0.9890770070999454
69358,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption embededFont=new ConfigurableOption(EMBEDED_FONT);
  embededFont.setDisplayName(Messages.getString(""String_Node_Str""));
  embededFont.setDataType(IConfigurableOption.DataType.BOOLEAN);
  embededFont.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  embededFont.setDefaultValue(Boolean.TRUE);
  embededFont.setToolTip(null);
  embededFont.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,embededFont};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption embeddedFont=new ConfigurableOption(EMBEDDED_FONT);
  embeddedFont.setDisplayName(Messages.getString(""String_Node_Str""));
  embeddedFont.setDataType(IConfigurableOption.DataType.BOOLEAN);
  embeddedFont.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  embeddedFont.setDefaultValue(Boolean.TRUE);
  embeddedFont.setToolTip(null);
  embeddedFont.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,embeddedFont};
}",0.998378670509818
69359,"private void createNameText(Composite content){
  final Label nameLabel=new Label(content,SWT.CHECK);
  nameLabel.setText(Messages.getString(""String_Node_Str""));
  GridData labelData=new GridData();
  labelData.horizontalSpan=1;
  labelData.verticalIndent=15;
  nameLabel.setLayoutData(labelData);
  nameText=new Text(content,SWT.BORDER);
  GridData textGd=new GridData(GridData.FILL_HORIZONTAL);
  textGd.verticalIndent=15;
  textGd.horizontalIndent=10;
  nameText.setLayoutData(textGd);
  nameText.setText(this.fileName == null ? ""String_Node_Str"" : this.fileName);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      fileName=nameText.getText().trim();
      validate();
    }
  }
);
}","private void createNameText(Composite content){
  final Label nameLabel=new Label(content,SWT.CHECK);
  nameLabel.setText(Messages.getString(""String_Node_Str""));
  GridData labelData=new GridData();
  labelData.horizontalSpan=1;
  labelData.verticalIndent=5;
  nameLabel.setLayoutData(labelData);
  nameText=new Text(content,SWT.BORDER);
  GridData textGd=new GridData(GridData.FILL_HORIZONTAL);
  textGd.verticalIndent=5;
  textGd.horizontalIndent=10;
  nameText.setLayoutData(textGd);
  nameText.setText(this.fileName == null ? ""String_Node_Str"" : this.fileName);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      fileName=nameText.getText().trim();
      validate();
    }
  }
);
}",0.9986468200270636
69360,"protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.None);
  GridLayout parentLayout=new GridLayout();
  parentLayout.marginLeft=parentLayout.marginTop=parentLayout.marginRight=10;
  parentLayout.marginBottom=15;
  composite.setLayout(parentLayout);
  GridData data=new GridData(GridData.FILL_BOTH);
  composite.setLayoutData(data);
  Label message=new Label(composite,SWT.BOLD);
  message.setFont(new Font(Display.getCurrent(),""String_Node_Str"",13,SWT.BOLD));
  message.setText(Messages.getFormattedString(""String_Node_Str"",new Object[]{this.dataSourceHandle.getQualifiedName()}));
  createSeparator(composite,1);
  Composite content=new Composite(composite,SWT.None);
  GridLayout layout=new GridLayout();
  layout.marginTop=15;
  layout.marginWidth=10;
  layout.numColumns=2;
  content.setLayout(layout);
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  content.setLayoutData(layoutData);
  createCheckboxArea(content);
  createSeparator(content,2);
  createNameText(content);
  return parent;
}","protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.None);
  GridLayout parentLayout=new GridLayout();
  parentLayout.marginLeft=parentLayout.marginTop=parentLayout.marginRight=10;
  parentLayout.marginBottom=5;
  composite.setLayout(parentLayout);
  GridData data=new GridData(GridData.FILL_BOTH);
  composite.setLayoutData(data);
  Label message=new Label(composite,SWT.BOLD);
  message.setText(Messages.getFormattedString(""String_Node_Str"",new Object[]{this.dataSourceHandle.getQualifiedName()}));
  createSeparator(composite,1);
  Composite content=new Composite(composite,SWT.None);
  GridLayout layout=new GridLayout();
  layout.marginWidth=10;
  layout.numColumns=2;
  content.setLayout(layout);
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  content.setLayoutData(layoutData);
  createCheckboxArea(content);
  createSeparator(content,2);
  createNameText(content);
  return parent;
}",0.7583457897359243
69361,"private void createSeparator(Composite composite,int span){
  Label separator=new Label(composite,SWT.HORIZONTAL | SWT.SEPARATOR);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.verticalIndent=10;
  gd.horizontalSpan=span;
  separator.setLayoutData(gd);
}","private void createSeparator(Composite composite,int span){
  Label separator=new Label(composite,SWT.HORIZONTAL | SWT.SEPARATOR);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.verticalIndent=5;
  gd.horizontalSpan=span;
  separator.setLayoutData(gd);
}",0.9943714821763602
69362,"private void createExpressionButton(Composite composite,final Text property,String propName){
  ExpressionButton exprButton=UIUtil.createExpressionButton(composite,SWT.PUSH);
  if (handle == null) {
    handle=DesignElementFactory.getInstance(getModuleHandle()).newOdaDataSet(null);
  }
  IExpressionHelper helper=new IExpressionHelper(){
    public String getExpression(){
      if (property != null)       return property.getText();
 else       return ""String_Node_Str"";
    }
    public void setExpression(    String expression){
      if (property != null)       property.setText(expression);
    }
    public void notifyExpressionChangeEvent(    String oldExpression,    String newExpression){
    }
    public IExpressionProvider getExpressionProvider(){
      return new ExpressionProvider(handle);
    }
    public String getExpressionType(){
      return (String)property.getData(DataUIConstants.EXPR_TYPE);
    }
    public void setExpressionType(    String exprType){
      property.setData(DataUIConstants.EXPR_TYPE,exprType);
    }
  }
;
  helper.setExpressionType(UIUtil.getDefaultScriptType());
  exprButton.setExpressionHelper(helper);
  Expression expr=handle.getPropertyBindingExpression(propName);
  property.setData(DataUIConstants.EXPR_BUTTON,exprButton);
  property.setText((expr == null || expr.getStringExpression() == null) ? ""String_Node_Str"" : expr.getStringExpression());
  if (expr != null)   property.setData(DataUIConstants.EXPR_TYPE,expr.getType());
  exprButton=(ExpressionButton)property.getData(DataUIConstants.EXPR_BUTTON);
  if (exprButton != null)   exprButton.refresh();
}","private void createExpressionButton(Composite composite,final Text property,String propName){
  ExpressionButton exprButton=UIUtil.createExpressionButton(composite,SWT.PUSH);
  if (handle == null) {
    handle=DesignElementFactory.getInstance(getModuleHandle()).newOdaDataSet(null);
  }
  IExpressionHelper helper=new IExpressionHelper(){
    public String getExpression(){
      if (property != null)       return property.getText();
 else       return ""String_Node_Str"";
    }
    public void setExpression(    String expression){
      if (property != null)       property.setText(expression);
    }
    public void notifyExpressionChangeEvent(    String oldExpression,    String newExpression){
    }
    public IExpressionProvider getExpressionProvider(){
      return new ExpressionProvider(handle);
    }
    public String getExpressionType(){
      return (String)property.getData(DataUIConstants.EXPR_TYPE);
    }
    public void setExpressionType(    String exprType){
      property.setData(DataUIConstants.EXPR_TYPE,exprType);
    }
  }
;
  helper.setExpressionType(UIUtil.getDefaultScriptType());
  exprButton.setExpressionHelper(helper);
  if (PASSWORD.equals(propName)) {
    exprButton.setExpressionButtonProvider(new ExprButtonProvider(true,property));
  }
  Expression expr=handle.getPropertyBindingExpression(propName);
  property.setData(DataUIConstants.EXPR_BUTTON,exprButton);
  property.setText((expr == null || expr.getStringExpression() == null) ? ""String_Node_Str"" : expr.getStringExpression());
  if (expr != null)   property.setData(DataUIConstants.EXPR_TYPE,expr.getType());
  exprButton=(ExpressionButton)property.getData(DataUIConstants.EXPR_BUTTON);
  if (exprButton != null)   exprButton.refresh();
}",0.9635167464114832
69363,"public boolean performOk(){
  for (int i=0; i < bindingName.size(); i++) {
    try {
      String value=null;
      Text propertyText=(Text)propertyTextList.get(i);
      if (!propertyText.isDisposed() && propertyText.getText() != null && propertyText.getText().trim().length() > 0) {
        value=propertyText.getText().trim();
      }
      Expression expr=new Expression(value,(String)propertyText.getData(DataUIConstants.EXPR_TYPE));
      if (ds instanceof DesignElementHandle) {
        ((DesignElementHandle)ds).setPropertyBinding((String)bindingName.get(i),expr);
      }
    }
 catch (    SemanticException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
  }
  return super.performOk();
}","public boolean performOk(){
  for (int i=0; i < bindingName.size(); i++) {
    try {
      String value=null;
      Text propertyText=(Text)propertyTextList.get(i);
      if (!propertyText.isDisposed() && propertyText.getText() != null && propertyText.getText().trim().length() > 0) {
        value=propertyText.getText().trim();
      }
      Expression expr=new Expression(value,(String)propertyText.getData(DataUIConstants.EXPR_TYPE));
      if (ds instanceof DesignElementHandle) {
        ((DesignElementHandle)ds).setPropertyBinding((String)bindingName.get(i),expr);
      }
    }
 catch (    Exception e) {
      logger.log(Level.FINE,e.getMessage(),e);
      ExceptionHandler.handle(e);
      return true;
    }
  }
  return super.performOk();
}",0.9582477754962354
69364,"/** 
 * the content
 */
public Control createContents(Composite parent){
  initPropertyBinding();
  int size=bindingName.size();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(3,false));
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL);
  composite.setLayoutData(gridData);
  Label nameLabel;
  Text propertyText=null;
  for (int i=0; i < size; i++) {
    nameLabel=new Label(composite,SWT.NONE);
    nameLabel.setText((String)displayName.get(i) + ""String_Node_Str"");
    nameLabelList.add(nameLabel);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    if (((String)bindingName.get(i)).equals(QUERYTEXT)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
      data.heightHint=100;
    }
 else     if (((String)bindingName.get(i)).equals(PASSWORD)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.PASSWORD);
    }
 else     propertyText=new Text(composite,SWT.BORDER);
    propertyText.setLayoutData(data);
    propertyText.setText((String)bindingValue.get(i) == null ? ""String_Node_Str"" : (String)bindingValue.get(i));
    propertyTextList.add(propertyText);
    if (ds instanceof OdaDataSourceHandle) {
      handle=(OdaDataSourceHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)ds;
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
 else     if (ds instanceof OdaDataSetHandle) {
      handle=(OdaDataSetHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)(((OdaDataSetHandle)ds).getDataSource());
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    createExpressionButton(composite,propertyText,(String)bindingName.get(i));
  }
  if (size <= 0)   setEmptyPropertyMessages(composite);
  return composite;
}","/** 
 * the content
 */
public Control createContents(Composite parent){
  initPropertyBinding();
  int size=bindingName.size();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(3,false));
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL);
  composite.setLayoutData(gridData);
  Label nameLabel;
  Text propertyText=null;
  for (int i=0; i < size; i++) {
    nameLabel=new Label(composite,SWT.NONE);
    nameLabel.setText((String)displayName.get(i) + ""String_Node_Str"");
    nameLabelList.add(nameLabel);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    if (((String)bindingName.get(i)).equals(QUERYTEXT)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
      data.heightHint=100;
    }
 else     if (((String)bindingName.get(i)).equals(PASSWORD)) {
      propertyText=new Text(composite,SWT.BORDER);
      if (ds instanceof DesignElementHandle) {
        Expression expr=((DesignElementHandle)ds).getPropertyBindingExpression((String)bindingName.get(i));
        if (expr != null && ExpressionType.CONSTANT.equals(expr.getType())) {
          Text dummy=new Text(composite,SWT.BORDER | SWT.PASSWORD);
          propertyText.setEchoChar(dummy.getEchoChar());
          dummy.dispose();
        }
      }
    }
 else     propertyText=new Text(composite,SWT.BORDER);
    propertyText.setLayoutData(data);
    propertyText.setText((String)bindingValue.get(i) == null ? ""String_Node_Str"" : (String)bindingValue.get(i));
    propertyTextList.add(propertyText);
    if (ds instanceof OdaDataSourceHandle) {
      handle=(OdaDataSourceHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)ds;
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
 else     if (ds instanceof OdaDataSetHandle) {
      handle=(OdaDataSetHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)(((OdaDataSetHandle)ds).getDataSource());
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    createExpressionButton(composite,propertyText,(String)bindingName.get(i));
  }
  if (size <= 0)   setEmptyPropertyMessages(composite);
  return composite;
}",0.9136242208370436
69365,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption embededFont=new ConfigurableOption(EMBEDED_FONT);
  embededFont.setDisplayName(Messages.getString(""String_Node_Str""));
  embededFont.setDataType(IConfigurableOption.DataType.BOOLEAN);
  embededFont.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  embededFont.setDefaultValue(Boolean.TRUE);
  embededFont.setToolTip(null);
  embededFont.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,embededFont};
}",0.914822792245937
69366,"public void widgetSelected(SelectionEvent e){
  Object source=e.getSource();
  if (source == fCmbAggregate) {
    String aggFunc=((String[])fCmbAggregate.getData())[fCmbAggregate.getSelectionIndex()];
    showAggregateParameters(aggFunc);
    if (AGG_FUNC_NONE.equals(aggFunc)) {
      fGrouping.setEnabled(false);
      fGrouping.setAggregateExpression(null);
    }
 else {
      fGrouping.setEnabled(true);
      fGrouping.setAggregateExpression(aggFunc);
    }
  }
 else   if (isAggParametersWidget(source)) {
    setAggParameter((Text)source);
  }
 else   if (isBuilderBtnWidget(source)) {
    try {
      Text txtArg=fExprBuilderWidgetsMap.get(source);
      String sExpr=fChartContext.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,txtArg.getText(),fChartContext.getExtendedItem(),fTitle);
      txtArg.setText(sExpr);
      setAggParameter(txtArg);
    }
 catch (    ChartException e1) {
      WizardBase.displayException(e1);
    }
  }
 else   if (source == fBtnOK) {
    if (query != null) {
      query.setGrouping(fGrouping);
      query.getGrouping().eAdapters().addAll(query.eAdapters());
    }
 else {
      fSeriesDefi.setGrouping(fGrouping);
      fSeriesDefi.getGrouping().eAdapters().addAll(fSeriesDefi.eAdapters());
    }
    ChartUIUtil.checkAggregateType(fChartContext);
    closeAggregateEditor(getShell());
  }
 else   if (source == fBtnCancel) {
    closeAggregateEditor(getShell());
  }
}","public void widgetSelected(SelectionEvent e){
  Object source=e.getSource();
  if (source == fCmbAggregate) {
    String aggFunc=((String[])fCmbAggregate.getData())[fCmbAggregate.getSelectionIndex()];
    showAggregateParameters(aggFunc);
    if (AGG_FUNC_NONE.equals(aggFunc)) {
      fGrouping.setEnabled(false);
      fGrouping.setAggregateExpression(null);
    }
 else {
      fGrouping.setEnabled(true);
      fGrouping.setAggregateExpression(aggFunc);
    }
  }
 else   if (isAggParametersWidget(source)) {
    setAggParameter((Text)source);
  }
 else   if (isBuilderBtnWidget(source)) {
    try {
      Text txtArg=fExprBuilderWidgetsMap.get(source);
      String sExpr=fChartContext.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,txtArg.getText(),fChartContext.getExtendedItem(),fTitle);
      txtArg.setText(sExpr);
      setAggParameter(txtArg);
    }
 catch (    ChartException e1) {
      WizardBase.displayException(e1);
    }
  }
 else   if (source == fBtnOK) {
    if (query != null) {
      query.setGrouping(fGrouping);
      query.getGrouping().eAdapters().addAll(query.eAdapters());
    }
 else {
      fSeriesDefi.setGrouping(fGrouping);
      fSeriesDefi.getGrouping().eAdapters().addAll(fSeriesDefi.eAdapters());
    }
    ChartUIUtil.checkAggregateType(fChartContext);
    DataDefinitionTextManager.getInstance().updateTooltip();
    closeAggregateEditor(getShell());
  }
 else   if (source == fBtnCancel) {
    closeAggregateEditor(getShell());
  }
}",0.9793709841055124
69367,"/** 
 * Handle grouping/sorting action.
 */
protected void handleGroupAction(){
  SeriesDefinition sdBackup=seriesdefinition.copyInstance();
  GroupSortingDialog groupDialog=createGroupSortingDialog(sdBackup);
  if (groupDialog.open() == Window.OK) {
    if (!sdBackup.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
      seriesdefinition.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
    }
 else {
      seriesdefinition.setSorting(sdBackup.getSorting());
    }
    seriesdefinition.setSortKey(sdBackup.getSortKey());
    seriesdefinition.getSortKey().eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setGrouping(sdBackup.getGrouping());
    seriesdefinition.getGrouping().eAdapters().addAll(seriesdefinition.eAdapters());
    ChartUIUtil.checkGroupType(context,context.getModel());
    ChartUIUtil.checkAggregateType(context);
  }
}","/** 
 * Handle grouping/sorting action.
 */
protected void handleGroupAction(){
  SeriesDefinition sdBackup=seriesdefinition.copyInstance();
  GroupSortingDialog groupDialog=createGroupSortingDialog(sdBackup);
  if (groupDialog.open() == Window.OK) {
    if (!sdBackup.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
      seriesdefinition.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
    }
 else {
      seriesdefinition.setSorting(sdBackup.getSorting());
    }
    seriesdefinition.setSortKey(sdBackup.getSortKey());
    seriesdefinition.getSortKey().eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setGrouping(sdBackup.getGrouping());
    seriesdefinition.getGrouping().eAdapters().addAll(seriesdefinition.eAdapters());
    ChartUIUtil.checkGroupType(context,context.getModel());
    ChartUIUtil.checkAggregateType(context);
    DataDefinitionTextManager.getInstance().updateTooltip();
  }
}",0.9667574931880109
69368,"private String getTooltipForDataText(String queryText){
  if (isTableSharedBinding()) {
    int index=cmbDefinition.getSelectionIndex();
    if (index >= 0) {
      ColumnBindingInfo cbi=(ColumnBindingInfo)((Object[])cmbDefinition.getData())[index];
      if (cbi.getColumnType() == ColumnBindingInfo.GROUP_COLUMN || cbi.getColumnType() == ColumnBindingInfo.AGGREGATE_COLUMN) {
        return cbi.getTooltip();
      }
    }
  }
  if (queryText.trim().length() == 0) {
    return tooltipWhenBlank;
  }
  return queryText;
}","private String getTooltipForDataText(String queryText){
  if (isTableSharedBinding()) {
    int index=cmbDefinition.getSelectionIndex();
    if (index >= 0) {
      ColumnBindingInfo cbi=(ColumnBindingInfo)((Object[])cmbDefinition.getData())[index];
      if (cbi.getColumnType() == ColumnBindingInfo.GROUP_COLUMN || cbi.getColumnType() == ColumnBindingInfo.AGGREGATE_COLUMN) {
        return cbi.getTooltip();
      }
    }
  }
  if (queryText.trim().length() == 0) {
    return tooltipWhenBlank;
  }
  if (ChartUIConstants.QUERY_VALUE.equals(queryType) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
    SeriesDefinition baseSd=ChartUIUtil.getBaseSeriesDefinitions(context.getModel()).get(0);
    SeriesGrouping sg=null;
    if (baseSd.getGrouping() != null && baseSd.getGrouping().isEnabled()) {
      sg=baseSd.getGrouping();
      if (seriesdefinition.getGrouping() != null && seriesdefinition.getGrouping().isEnabled()) {
        sg=seriesdefinition.getGrouping();
      }
      if (query.getGrouping() != null && query.getGrouping().isEnabled()) {
        sg=query.getGrouping();
      }
    }
    if (sg != null) {
      StringBuffer sbuf=new StringBuffer();
      sbuf.append(sg.getAggregateExpression());
      sbuf.append(""String_Node_Str"");
      sbuf.append(queryText);
      IAggregateFunction aFunc=null;
      try {
        aFunc=PluginSettings.instance().getAggregateFunction(sg.getAggregateExpression());
      }
 catch (      ChartException e) {
      }
      int count=aFunc != null ? aFunc.getParametersCount() : sg.getAggregateParameters().size();
      for (int i=0; i < sg.getAggregateParameters().size(); i++) {
        if (i < count) {
          sbuf.append(""String_Node_Str"");
          sbuf.append(sg.getAggregateParameters().get(i));
        }
      }
      sbuf.append(""String_Node_Str"");
      return sbuf.toString();
    }
  }
  return queryText;
}",0.4211388775092175
69369,"/** 
 * Set tooltip for input control.
 */
private void setTooltipForInputControl(){
  getInputControl().setToolTipText(getTooltipForDataText(getExpression(getInputControl())));
}","/** 
 * Set tooltip for input control.
 */
public void setTooltipForInputControl(){
  getInputControl().setToolTipText(getTooltipForDataText(getExpression(getInputControl())));
}",0.9747899159663864
69370,"public ColumnBindingMetaData(IBaseQueryDefinition queryDefn,IResultClass rsClass) throws DataException {
  bindingList=new ArrayList<Binding>();
  bindingList.addAll(queryDefn.getBindings().values());
  if (((QueryDefinition)queryDefn).needAutoBinding() && rsClass != null) {
    IResultMetaData metaData=new ResultMetaData(rsClass);
    aliasMap=new HashMap<Integer,String>();
    int columnCount=metaData.getColumnCount();
    for (int i=0; i < columnCount; i++) {
      int colIndex=i + 1;
      try {
        String colName=metaData.getColumnName(colIndex);
        if (isTemp(colName)) {
          continue;
        }
        String alias=metaData.getColumnAlias(colIndex);
        if (alias != null) {
          aliasMap.put(new Integer(colIndex),alias);
        }
        ScriptExpression baseExpr=new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(colName),metaData.getColumnType(colIndex));
        Binding binding=new Binding(colName,baseExpr);
        binding.setDisplayName(colName);
        bindingList.add(binding);
      }
 catch (      BirtException e) {
      }
    }
  }
}","public ColumnBindingMetaData(IBaseQueryDefinition queryDefn,IResultClass rsClass) throws DataException {
  bindingList=new ArrayList<Binding>();
  bindingList.addAll(queryDefn.getBindings().values());
  if (((QueryDefinition)queryDefn).needAutoBinding() && rsClass != null) {
    IResultMetaData metaData=new ResultMetaData(rsClass);
    aliasMap=new HashMap<Integer,String>();
    int columnCount=metaData.getColumnCount();
    for (int i=0; i < columnCount; i++) {
      int colIndex=i + 1;
      try {
        String colName=metaData.getColumnName(colIndex);
        if (isTemp(colName)) {
          continue;
        }
        String alias=metaData.getColumnAlias(colIndex);
        if (alias != null) {
          aliasMap.put(new Integer(colIndex),alias);
        }
        ScriptExpression baseExpr=new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(colName),metaData.getColumnType(colIndex));
        Binding binding=new Binding(colName,baseExpr);
        binding.setDisplayName(metaData.getColumnLabel(colIndex));
        bindingList.add(binding);
      }
 catch (      BirtException e) {
      }
    }
  }
}",0.97224709042077
69371,"public IBinding adaptBinding(ComputedColumnHandle handle){
  try {
    if (handle == null)     return null;
    Binding result=new Binding(handle.getName());
    if (handle.getExpression() != null) {
      ScriptExpression expr=this.adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.EXPRESSION_MEMBER).getValue(),handle.getDataType());
      expr.setGroupName(handle.getAggregateOn());
      result.setExpression(expr);
    }
    result.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(handle.getDataType()));
    result.setAggrFunction(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelAggregationType(handle.getAggregateFunction()));
    result.setFilter(handle.getFilterExpression() == null ? null : this.adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.FILTER_MEMBER).getValue(),DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN));
    populateArgument(result,handle);
    populateAggregateOns(result,handle);
    return result;
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    return null;
  }
}","public IBinding adaptBinding(ComputedColumnHandle handle){
  try {
    if (handle == null)     return null;
    Binding result=new Binding(handle.getName());
    if (handle.getExpression() != null) {
      ScriptExpression expr=this.adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.EXPRESSION_MEMBER).getValue(),handle.getDataType());
      expr.setGroupName(handle.getAggregateOn());
      result.setExpression(expr);
    }
    result.setDisplayName(handle.getDisplayName());
    result.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(handle.getDataType()));
    result.setAggrFunction(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelAggregationType(handle.getAggregateFunction()));
    result.setFilter(handle.getFilterExpression() == null ? null : this.adaptExpression((Expression)handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.FILTER_MEMBER).getValue(),DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN));
    populateArgument(result,handle);
    populateAggregateOns(result,handle);
    return result;
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    return null;
  }
}",0.9794303797468354
69372,"private static String getCurrencySymbol(ULocale locale){
  NumberFormat format=NumberFormat.getCurrencyInstance(locale);
  String symbol=format.getCurrency().getSymbol();
  if (symbol.equals(""String_Node_Str"")) {
    symbol=""String_Node_Str"";
  }
  if (symbol.equals(""String_Node_Str"")) {
    symbol=""String_Node_Str"";
  }
  if (symbol.equals(""String_Node_Str"")) {
    symbol=""String_Node_Str"";
  }
  return symbol;
}","private static String getCurrencySymbol(ULocale locale){
  NumberFormat format=NumberFormat.getCurrencyInstance(locale);
  Currency currency=format.getCurrency();
  if (currency != null) {
    String symbol=currency.getSymbol(locale);
    if (symbol.equals(""String_Node_Str"")) {
      symbol=""String_Node_Str"";
    }
    if (symbol.equals(""String_Node_Str"")) {
      symbol=""String_Node_Str"";
    }
    if (symbol.equals(""String_Node_Str"")) {
      symbol=""String_Node_Str"";
    }
    if (symbol == null) {
      symbol=""String_Node_Str"";
    }
    return symbol;
  }
  return ""String_Node_Str"";
}",0.6074950690335306
69373,"public void paintControl(PaintEvent pe){
  if (idr != null && fdCurrent != null && bUseSize) {
    idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,pe.gc);
    TextRenderEvent tre=new TextRenderEvent(this);
    tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
    TextAlignment ta=TextAlignmentImpl.create();
    if (fdCurrent != null) {
      ta.setHorizontalAlignment(ChartUIUtil.getFontTextAlignment(fdCurrent).getHorizontalAlignment());
      ta.setVerticalAlignment(ChartUIUtil.getFontTextAlignment(fdCurrent).getVerticalAlignment());
    }
 else {
      ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
      ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    }
    tre.setBlockAlignment(ta);
    Bounds bo=BoundsImpl.create(0,0,this.getSize().x - 3,this.getSize().y - 3);
    tre.setBlockBounds(bo);
    String fontName=ChartUIUtil.getFontName(fdCurrent);
    Text tx=TextImpl.create(fontName);
    FontDefinition fd=fdCurrent.copyInstance();
    fd.setName(fontName);
    if (!fd.isSetSize()) {
      fd.setSize(9);
    }
    tx.setFont(fd);
    ColorDefinition cdFore, cdBack;
    if (!this.isEnabled()) {
      Color cFore=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
      Color cBack=Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
      cdFore=ColorDefinitionImpl.create(cFore.getRed(),cFore.getGreen(),cFore.getBlue());
      cdBack=ColorDefinitionImpl.create(cBack.getRed(),cBack.getGreen(),cBack.getBlue());
    }
 else {
      Color cBack=Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND);
      cdBack=ColorDefinitionImpl.create(cBack.getRed(),cBack.getGreen(),cBack.getBlue());
      if (cdCurrent != null && bUseColor) {
        cdFore=cdCurrent.copyInstance();
      }
 else {
        cdFore=ColorDefinitionImpl.BLACK();
      }
    }
    tx.setColor(cdFore);
    Label lb=LabelImpl.create();
    lb.setBackground(cdBack);
    lb.setCaption(tx);
    tre.setLabel(lb);
    RectangleRenderEvent rre=new RectangleRenderEvent(this);
    rre.setBounds(bo);
    rre.setBackground(cdBack);
    try {
      idr.fillRectangle(rre);
      idr.drawText(tre);
    }
 catch (    ChartException e) {
    }
    return;
  }
  Font fSize=null;
  Font fCurrent=null;
  Color cFore=null;
  Color cBack=null;
  GC gc=pe.gc;
  gc.setAdvanced(true);
  Font fOld=gc.getFont();
  if (!this.isEnabled()) {
    cFore=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
    cBack=Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
  }
 else {
    cBack=Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND);
    if (cdCurrent != null && bUseColor && cdCurrent.getTransparency() > 0) {
      cFore=new Color(this.getDisplay(),cdCurrent.getRed(),cdCurrent.getGreen(),cdCurrent.getBlue());
    }
 else {
      cFore=new Color(this.getDisplay(),0,0,0);
    }
  }
  gc.setForeground(cFore);
  gc.setBackground(cBack);
  gc.fillRectangle(0,0,this.getSize().x,this.getSize().y);
  if (fdCurrent != null) {
    int iStyle=(fdCurrent.isSetBold() && fdCurrent.isBold()) ? SWT.BOLD : SWT.NORMAL;
    iStyle|=(fdCurrent.isSetItalic() && fdCurrent.isItalic()) ? SWT.ITALIC : iStyle;
    String sFontName=ChartUIUtil.getFontName(fdCurrent);
    if (!bUseSize) {
      gc.setClipping(2,2,this.getSize().x - 40,26);
      fCurrent=new Font(this.getDisplay(),ChartUIUtil.getFontName(fdCurrent),fOld.getFontData()[0].getHeight(),iStyle);
    }
 else {
      fCurrent=new Font(this.getDisplay(),ChartUIUtil.getFontName(fdCurrent),fdCurrent.isSetSize() ? (int)fdCurrent.getSize() : 9,iStyle);
    }
    gc.setFont(fCurrent);
    int iStartX=5;
    int iStartY=3;
    if (bUseAlignment) {
      if (ChartUIUtil.getFontTextAlignment(fdCurrent).getHorizontalAlignment().equals(HorizontalAlignment.LEFT_LITERAL)) {
        iStartX=5;
      }
 else       if (ChartUIUtil.getFontTextAlignment(fdCurrent).getHorizontalAlignment().equals(HorizontalAlignment.CENTER_LITERAL)) {
        iStartX=this.getSize().x / 2 - (getStringWidth(gc,sFontName).x / 2);
      }
 else       if (ChartUIUtil.getFontTextAlignment(fdCurrent).getHorizontalAlignment().equals(HorizontalAlignment.RIGHT_LITERAL)) {
        iStartX=this.getSize().x - getStringWidth(gc,sFontName).x - 5;
      }
      if (ChartUIUtil.getFontTextAlignment(fdCurrent).getVerticalAlignment().equals(VerticalAlignment.TOP_LITERAL)) {
        iStartY=3;
      }
 else       if (ChartUIUtil.getFontTextAlignment(fdCurrent).getVerticalAlignment().equals(VerticalAlignment.CENTER_LITERAL)) {
        iStartY=(this.getSize().y / 2);
        if (bUseSize) {
          iStartY-=(getStringWidth(gc,sFontName).y / 2);
        }
 else {
          iStartY-=15;
        }
      }
 else       if (ChartUIUtil.getFontTextAlignment(fdCurrent).getVerticalAlignment().equals(VerticalAlignment.BOTTOM_LITERAL)) {
        iStartY=this.getSize().y;
        if (bUseSize) {
          iStartY-=(getStringWidth(gc,sFontName).y) + 5;
        }
 else {
          iStartY-=30;
        }
      }
    }
    gc.drawText(sFontName,iStartX,iStartY);
    if (fdCurrent.isUnderline()) {
      gc.drawLine(iStartX,iStartY + getStringWidth(gc,sFontName).y - gc.getFontMetrics().getDescent(),iStartX + getStringWidth(gc,sFontName).x - gc.getFontMetrics().getDescent(),iStartY + getStringWidth(gc,sFontName).y - gc.getFontMetrics().getDescent());
    }
    if (fdCurrent.isStrikethrough()) {
      gc.drawLine(iStartX,iStartY + (getStringWidth(gc,sFontName).y / 2) + 1,iStartX + getStringWidth(gc,sFontName).x,iStartY + (getStringWidth(gc,sFontName).y / 2) + 1);
    }
    if (!bUseSize) {
      gc.setClipping(1,1,this.getSize().x,this.getSize().y);
      fSize=new Font(this.getDisplay(),""String_Node_Str"",fOld.getFontData()[0].getHeight(),SWT.NORMAL);
      gc.setFont(fSize);
      String sizeString=""String_Node_Str"" + (fdCurrent.isSetSize() ? String.valueOf((int)fdCurrent.getSize()) : ChartUIUtil.FONT_AUTO) + ""String_Node_Str"";
      Point pt=gc.textExtent(sizeString);
      gc.drawText(sizeString,this.getSize().x - pt.x - this.getBorderWidth()- 2,(this.getSize().y - pt.y) / 2 - 1);
      fSize.dispose();
    }
    fCurrent.dispose();
  }
  if (this.isEnabled()) {
    cFore.dispose();
  }
  gc.setFont(fOld);
}","public void paintControl(PaintEvent pe){
  if (idr != null && fdCurrent != null && bUseSize) {
    idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,pe.gc);
    TextRenderEvent tre=new TextRenderEvent(this);
    tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
    TextAlignment ta=TextAlignmentImpl.create();
    if (fdCurrent != null) {
      ta.setHorizontalAlignment(ChartUIUtil.getFontTextAlignment(fdCurrent).getHorizontalAlignment());
      ta.setVerticalAlignment(ChartUIUtil.getFontTextAlignment(fdCurrent).getVerticalAlignment());
    }
 else {
      ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
      ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    }
    tre.setBlockAlignment(ta);
    Bounds bo=BoundsImpl.create(0,0,this.getSize().x - 3,this.getSize().y - 3);
    tre.setBlockBounds(bo);
    String fontName=ChartUIUtil.getFontName(fdCurrent);
    Text tx=TextImpl.create(fontName);
    FontDefinition fd=fdCurrent.copyInstance();
    fd.setName(fontName);
    if (!fd.isSetSize()) {
      fd.setSize(9);
    }
    tx.setFont(fd);
    ColorDefinition cdFore, cdBack;
    if (!this.isEnabled()) {
      Color cFore=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
      Color cBack=Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
      cdFore=ColorDefinitionImpl.create(cFore.getRed(),cFore.getGreen(),cFore.getBlue());
      cdBack=ColorDefinitionImpl.create(cBack.getRed(),cBack.getGreen(),cBack.getBlue());
    }
 else {
      Color cBack=Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND);
      cdBack=ColorDefinitionImpl.create(cBack.getRed(),cBack.getGreen(),cBack.getBlue());
      if (cdCurrent != null && bUseColor) {
        cdFore=cdCurrent.copyInstance();
      }
 else {
        cdFore=ColorDefinitionImpl.BLACK();
      }
    }
    tx.setColor(cdFore);
    Label lb=LabelImpl.create();
    lb.setBackground(cdBack);
    lb.setCaption(tx);
    tre.setLabel(lb);
    RectangleRenderEvent rre=new RectangleRenderEvent(this);
    rre.setBounds(bo);
    rre.setBackground(cdBack);
    try {
      idr.fillRectangle(rre);
      idr.drawText(tre);
    }
 catch (    ChartException e) {
    }
    return;
  }
  Font fSize=null;
  Font fCurrent=null;
  Color cFore=null;
  Color cBack=null;
  GC gc=pe.gc;
  gc.setAdvanced(true);
  Font fOld=gc.getFont();
  if (!this.isEnabled()) {
    cFore=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
    cBack=Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
  }
 else {
    cBack=Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND);
    if (cdCurrent != null && bUseColor && cdCurrent.getTransparency() > 0) {
      cFore=new Color(this.getDisplay(),cdCurrent.getRed(),cdCurrent.getGreen(),cdCurrent.getBlue());
    }
 else {
      cFore=new Color(this.getDisplay(),0,0,0);
    }
  }
  gc.setForeground(cFore);
  gc.setBackground(cBack);
  gc.fillRectangle(0,0,this.getSize().x,this.getSize().y);
  if (fdCurrent != null) {
    int iStyle=(fdCurrent.isSetBold() && fdCurrent.isBold()) ? SWT.BOLD : SWT.NORMAL;
    iStyle|=(fdCurrent.isSetItalic() && fdCurrent.isItalic()) ? SWT.ITALIC : iStyle;
    String sFontName=ChartUIUtil.getFontName(fdCurrent);
    if (!bUseSize) {
      gc.setClipping(2,2,this.getSize().x - 40,26);
      fCurrent=new Font(this.getDisplay(),ChartUIUtil.getFontName(fdCurrent),fOld.getFontData()[0].getHeight(),iStyle);
    }
 else {
      fCurrent=new Font(this.getDisplay(),ChartUIUtil.getFontName(fdCurrent),fdCurrent.isSetSize() ? (int)fdCurrent.getSize() : 9,iStyle);
    }
    gc.setFont(fCurrent);
    int iStartX=5;
    int iStartY=3;
    if (bUseAlignment) {
      if (ChartUIUtil.getFontTextAlignment(fdCurrent).getHorizontalAlignment().equals(HorizontalAlignment.LEFT_LITERAL)) {
        iStartX=5;
      }
 else       if (ChartUIUtil.getFontTextAlignment(fdCurrent).getHorizontalAlignment().equals(HorizontalAlignment.CENTER_LITERAL)) {
        iStartX=this.getSize().x / 2 - (getStringWidth(gc,sFontName).x / 2);
      }
 else       if (ChartUIUtil.getFontTextAlignment(fdCurrent).getHorizontalAlignment().equals(HorizontalAlignment.RIGHT_LITERAL)) {
        iStartX=this.getSize().x - getStringWidth(gc,sFontName).x - 5;
      }
      if (ChartUIUtil.getFontTextAlignment(fdCurrent).getVerticalAlignment().equals(VerticalAlignment.TOP_LITERAL)) {
        iStartY=3;
      }
 else       if (ChartUIUtil.getFontTextAlignment(fdCurrent).getVerticalAlignment().equals(VerticalAlignment.CENTER_LITERAL)) {
        iStartY=(this.getSize().y / 2);
        if (bUseSize) {
          iStartY-=(getStringWidth(gc,sFontName).y / 2);
        }
 else {
          iStartY-=15;
        }
      }
 else       if (ChartUIUtil.getFontTextAlignment(fdCurrent).getVerticalAlignment().equals(VerticalAlignment.BOTTOM_LITERAL)) {
        iStartY=this.getSize().y;
        if (bUseSize) {
          iStartY-=(getStringWidth(gc,sFontName).y) + 5;
        }
 else {
          iStartY-=30;
        }
      }
    }
    gc.drawText(sFontName,iStartX,iStartY);
    if (fdCurrent.isUnderline()) {
      gc.drawLine(iStartX,iStartY + getStringWidth(gc,sFontName).y - gc.getFontMetrics().getDescent(),iStartX + getStringWidth(gc,sFontName).x - gc.getFontMetrics().getDescent(),iStartY + getStringWidth(gc,sFontName).y - gc.getFontMetrics().getDescent());
    }
    if (fdCurrent.isStrikethrough()) {
      gc.drawLine(iStartX,iStartY + (getStringWidth(gc,sFontName).y / 2) + 1,iStartX + getStringWidth(gc,sFontName).x,iStartY + (getStringWidth(gc,sFontName).y / 2) + 1);
    }
    if (!bUseSize) {
      gc.setClipping(1,1,this.getSize().x,this.getSize().y);
      fSize=new Font(this.getDisplay(),""String_Node_Str"",fOld.getFontData()[0].getHeight(),SWT.NORMAL);
      gc.setFont(fSize);
      String sizeString=""String_Node_Str"" + (fdCurrent.isSetSize() ? String.valueOf((int)fdCurrent.getSize()) : ChartUIUtil.FONT_AUTO) + ""String_Node_Str"";
      Point pt=gc.textExtent(sizeString);
      gc.drawText(sizeString,this.getSize().x - pt.x - this.getBorderWidth()- 2,(this.getSize().y - pt.y) / 2 - 1);
      fSize.dispose();
      preferredWidth=getStringWidth(gc,sFontName).x + getStringWidth(gc,sizeString).x + 5+ iStartX;
    }
    fCurrent.dispose();
  }
  if (this.isEnabled()) {
    cFore.dispose();
  }
  gc.setFont(fOld);
}",0.9920140552627376
69374,"/** 
 * @param parent Parent composite to which the canvas is to be added
 * @param style SWT style for this composite
 * @param fdSelected FontDefinition instance that holds the font information to be displayed
 * @param cdSelected ColorDefinition instance that provides the foreground color for text to be displayed
 */
public FontCanvas(Composite parent,int style,FontDefinition fdSelected,ColorDefinition cdSelected,boolean bUseSize,boolean bUseColor,boolean bUseAlignment){
  super(parent,style);
  this.setSize(parent.getClientArea().x,parent.getClientArea().x);
  this.fdCurrent=fdSelected == null ? FontDefinitionImpl.createEmpty() : fdSelected;
  this.cdCurrent=cdSelected == null ? ColorDefinitionImpl.create(0,0,0) : cdSelected;
  this.bUseColor=bUseColor;
  this.bUseAlignment=bUseAlignment;
  this.bUseSize=bUseSize;
  try {
    idr=PluginSettings.instance().getDevice(""String_Node_Str"");
  }
 catch (  ChartException pex) {
    idr=null;
    WizardBase.displayException(pex);
  }
  addDisposeListener(this);
  addPaintListener(this);
}","/** 
 * @param parent Parent composite to which the canvas is to be added
 * @param style SWT style for this composite
 * @param fdSelected FontDefinition instance that holds the font information to be displayed
 * @param cdSelected ColorDefinition instance that provides the foreground color for text to be displayed
 */
public FontCanvas(Composite parent,int style,FontDefinition fdSelected,ColorDefinition cdSelected,boolean bUseSize,boolean bUseColor,boolean bUseAlignment){
  super(parent,style);
  this.setSize(parent.getClientArea().x,parent.getClientArea().x);
  this.fdCurrent=fdSelected == null ? FontDefinitionImpl.createEmpty() : fdSelected;
  this.cdCurrent=cdSelected == null ? ColorDefinitionImpl.create(0,0,0) : cdSelected;
  this.bUseColor=bUseColor;
  this.bUseAlignment=bUseAlignment;
  this.bUseSize=bUseSize;
  try {
    idr=PluginSettings.instance().getDevice(""String_Node_Str"");
  }
 catch (  ChartException pex) {
    idr=null;
    WizardBase.displayException(pex);
  }
  addDisposeListener(this);
  addPaintListener(this);
  GC gc=new GC(this);
  Event e=new Event();
  e.gc=gc;
  notifyListeners(SWT.Paint,e);
}",0.959743824336688
69375,"public Point getPreferredSize(){
  int height=btnFont.computeSize(SWT.DEFAULT,SWT.DEFAULT).y;
  return new Point(120,(24 > height) ? 24 : height);
}","public Point getPreferredSize(){
  Point bP=btnFont.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  return new Point(cnvSelection.getPreferredWidth() + bP.x + 2,bP.y);
}",0.7378640776699029
69376,"/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glGroup=new GridLayout();
  glGroup.horizontalSpacing=8;
  glGroup.verticalSpacing=5;
  glGroup.marginHeight=4;
  glGroup.marginWidth=4;
  glGroup.numColumns=8 / numberRows;
  this.setLayout(flMain);
  grpInsets=new Group(this,SWT.NONE);
  grpInsets.setLayout(glGroup);
  grpInsets.setText(Messages.getFormattedString(""String_Node_Str"",LiteralHelper.unitsOfMeasurementSet.getDisplayNameByName(sUnits,sUnits)));
  lblTop=new Label(grpInsets,SWT.NONE);
  GridData gdLTop=new GridData(GridData.VERTICAL_ALIGN_CENTER);
  gdLTop.heightHint=20;
  lblTop.setLayoutData(gdLTop);
  lblTop.setText(Messages.getString(""String_Node_Str""));
  txtTop=new LocalizedNumberEditorComposite(grpInsets,SWT.BORDER);
  new TextNumberEditorAssistField(txtTop.getTextControl(),null);
  GridData gdTTop=new GridData(GridData.FILL_BOTH);
  gdTTop.heightHint=20;
  gdTTop.widthHint=45;
  txtTop.setLayoutData(gdTTop);
  double dblPoints=insets.getTop();
  double dblCurrent=serviceprovider.getConvertedValue(dblPoints,""String_Node_Str"",sUnits);
  txtTop.setValue(dblCurrent);
  txtTop.addModifyListener(this);
  lblLeft=new Label(grpInsets,SWT.NONE);
  GridData gdLLeft=new GridData(GridData.VERTICAL_ALIGN_CENTER);
  gdLLeft.heightHint=20;
  lblLeft.setLayoutData(gdLLeft);
  lblLeft.setText(Messages.getString(""String_Node_Str""));
  txtLeft=new LocalizedNumberEditorComposite(grpInsets,SWT.BORDER);
  new TextNumberEditorAssistField(txtLeft.getTextControl(),null);
  GridData gdTLeft=new GridData(GridData.FILL_BOTH);
  gdTLeft.heightHint=20;
  gdTLeft.widthHint=45;
  txtLeft.setLayoutData(gdTLeft);
  dblPoints=insets.getLeft();
  dblCurrent=serviceprovider.getConvertedValue(dblPoints,""String_Node_Str"",sUnits);
  txtLeft.setValue(dblCurrent);
  txtLeft.addModifyListener(this);
  lblBottom=new Label(grpInsets,SWT.NONE);
  GridData gdLBottom=new GridData(GridData.VERTICAL_ALIGN_CENTER);
  gdLBottom.heightHint=20;
  lblBottom.setLayoutData(gdLBottom);
  lblBottom.setText(Messages.getString(""String_Node_Str""));
  txtBottom=new LocalizedNumberEditorComposite(grpInsets,SWT.BORDER);
  new TextNumberEditorAssistField(txtBottom.getTextControl(),null);
  GridData gdTBottom=new GridData(GridData.FILL_BOTH);
  gdTBottom.heightHint=20;
  gdTBottom.widthHint=45;
  txtBottom.setLayoutData(gdTBottom);
  dblPoints=insets.getBottom();
  dblCurrent=serviceprovider.getConvertedValue(dblPoints,""String_Node_Str"",sUnits);
  txtBottom.setValue(dblCurrent);
  txtBottom.addModifyListener(this);
  lblRight=new Label(grpInsets,SWT.NONE);
  GridData gdLRight=new GridData(GridData.VERTICAL_ALIGN_CENTER);
  gdLRight.heightHint=20;
  lblRight.setLayoutData(gdLRight);
  lblRight.setText(Messages.getString(""String_Node_Str""));
  txtRight=new LocalizedNumberEditorComposite(grpInsets,SWT.BORDER);
  new TextNumberEditorAssistField(txtRight.getTextControl(),null);
  GridData gdTRight=new GridData(GridData.FILL_BOTH);
  gdTRight.heightHint=20;
  gdTRight.widthHint=45;
  txtRight.setLayoutData(gdTRight);
  dblPoints=insets.getRight();
  dblCurrent=serviceprovider.getConvertedValue(dblPoints,""String_Node_Str"",sUnits);
  txtRight.setValue(dblCurrent);
  txtRight.addModifyListener(this);
}","/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glGroup=new GridLayout();
  glGroup.horizontalSpacing=8;
  glGroup.verticalSpacing=5;
  glGroup.marginHeight=4;
  glGroup.marginWidth=4;
  glGroup.numColumns=8 / numberRows;
  this.setLayout(flMain);
  grpInsets=new Group(this,SWT.NONE);
  grpInsets.setLayout(glGroup);
  grpInsets.setText(Messages.getFormattedString(""String_Node_Str"",LiteralHelper.unitsOfMeasurementSet.getDisplayNameByName(sUnits,sUnits)));
  lblTop=new Label(grpInsets,SWT.NONE);
  GridData gdLTop=new GridData(GridData.VERTICAL_ALIGN_CENTER);
  lblTop.setLayoutData(gdLTop);
  lblTop.setText(Messages.getString(""String_Node_Str""));
  txtTop=new LocalizedNumberEditorComposite(grpInsets,SWT.BORDER);
  new TextNumberEditorAssistField(txtTop.getTextControl(),null);
  GridData gdTTop=new GridData(GridData.FILL_BOTH);
  gdTTop.widthHint=45;
  txtTop.setLayoutData(gdTTop);
  double dblPoints=insets.getTop();
  double dblCurrent=serviceprovider.getConvertedValue(dblPoints,""String_Node_Str"",sUnits);
  txtTop.setValue(dblCurrent);
  txtTop.addModifyListener(this);
  lblLeft=new Label(grpInsets,SWT.NONE);
  GridData gdLLeft=new GridData(GridData.VERTICAL_ALIGN_CENTER);
  lblLeft.setLayoutData(gdLLeft);
  lblLeft.setText(Messages.getString(""String_Node_Str""));
  txtLeft=new LocalizedNumberEditorComposite(grpInsets,SWT.BORDER);
  new TextNumberEditorAssistField(txtLeft.getTextControl(),null);
  GridData gdTLeft=new GridData(GridData.FILL_BOTH);
  gdTLeft.widthHint=45;
  txtLeft.setLayoutData(gdTLeft);
  dblPoints=insets.getLeft();
  dblCurrent=serviceprovider.getConvertedValue(dblPoints,""String_Node_Str"",sUnits);
  txtLeft.setValue(dblCurrent);
  txtLeft.addModifyListener(this);
  lblBottom=new Label(grpInsets,SWT.NONE);
  GridData gdLBottom=new GridData(GridData.VERTICAL_ALIGN_CENTER);
  lblBottom.setLayoutData(gdLBottom);
  lblBottom.setText(Messages.getString(""String_Node_Str""));
  txtBottom=new LocalizedNumberEditorComposite(grpInsets,SWT.BORDER);
  new TextNumberEditorAssistField(txtBottom.getTextControl(),null);
  GridData gdTBottom=new GridData(GridData.FILL_BOTH);
  gdTBottom.widthHint=45;
  txtBottom.setLayoutData(gdTBottom);
  dblPoints=insets.getBottom();
  dblCurrent=serviceprovider.getConvertedValue(dblPoints,""String_Node_Str"",sUnits);
  txtBottom.setValue(dblCurrent);
  txtBottom.addModifyListener(this);
  lblRight=new Label(grpInsets,SWT.NONE);
  GridData gdLRight=new GridData(GridData.VERTICAL_ALIGN_CENTER);
  lblRight.setLayoutData(gdLRight);
  lblRight.setText(Messages.getString(""String_Node_Str""));
  txtRight=new LocalizedNumberEditorComposite(grpInsets,SWT.BORDER);
  new TextNumberEditorAssistField(txtRight.getTextControl(),null);
  GridData gdTRight=new GridData(GridData.FILL_BOTH);
  gdTRight.widthHint=45;
  txtRight.setLayoutData(gdTRight);
  dblPoints=insets.getRight();
  dblCurrent=serviceprovider.getConvertedValue(dblPoints,""String_Node_Str"",sUnits);
  txtRight.setValue(dblCurrent);
  txtRight.addModifyListener(this);
}",0.9680551205762604
69377,"/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glAttributes=new GridLayout();
  glAttributes.horizontalSpacing=5;
  glAttributes.verticalSpacing=5;
  glAttributes.marginHeight=7;
  glAttributes.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=2;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  FillLayout flOutline=new FillLayout();
  this.setLayout(flMain);
  if (sGroupName == null || sGroupName.length() == 0) {
    grpAttributes=new Composite(this,SWT.NONE);
  }
 else {
    grpAttributes=new Group(this,SWT.NONE);
    ((Group)grpAttributes).setText(sGroupName);
  }
  grpAttributes.setLayout(glAttributes);
  cmpGeneral=new Composite(grpAttributes,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_HORIZONTAL);
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  boolean bEnableUI=bEnabled && this.lblCurrent.isVisible();
  if (attributesContext.isVisibilityEnabled) {
    cbVisible=new Button(cmpGeneral,SWT.CHECK);
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=2;
    cbVisible.setLayoutData(gdCBVisible);
    cbVisible.setSelection(this.lblCurrent.isVisible());
    cbVisible.setText(Messages.getString(""String_Node_Str""));
    cbVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=cbVisible.getSelection();
    }
  }
  if (attributesContext.isLabelEnabled) {
    lblLabel=new Label(cmpGeneral,SWT.NONE);
{
      GridData gd=new GridData();
      lblLabel.setLayoutData(gd);
      lblLabel.setText(Messages.getString(""String_Node_Str""));
    }
    txtLabel=new ExternalizedTextEditorComposite(cmpGeneral,SWT.BORDER | SWT.SINGLE,-1,-1,wizardContext.getUIServiceProvider().getRegisteredKeys(),wizardContext.getUIServiceProvider(),""String_Node_Str"");
{
      GridData gd=new GridData(GridData.FILL_BOTH);
      txtLabel.setLayoutData(gd);
      txtLabel.addListener(this);
    }
  }
  if (attributesContext.isPositionEnabled) {
    lblPosition=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLPosition=new GridData();
    lblPosition.setLayoutData(gdLBLPosition);
    lblPosition.setText(Messages.getString(""String_Node_Str""));
    lblPosition.setEnabled(bEnableUI);
    cmbPosition=new Combo(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY);
    GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
    cmbPosition.setLayoutData(gdCMBPosition);
    cmbPosition.addSelectionListener(this);
    cmbPosition.setEnabled(bEnableUI);
  }
  if (attributesContext.isFontEnabled) {
    lblFont=new Label(cmpGeneral,SWT.NONE);
    GridData gdLFont=new GridData();
    lblFont.setLayoutData(gdLFont);
    lblFont.setText(Messages.getString(""String_Node_Str""));
    lblFont.setEnabled(bEnableUI);
    fdcFont=new FontDefinitionComposite(cmpGeneral,SWT.NONE,wizardContext,this.fdCurrent,this.cdFont,attributesContext.isFontAlignmentEnabled);
    GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
    gdFDCFont.heightHint=fdcFont.getPreferredSize().y;
    gdFDCFont.widthHint=96;
    gdFDCFont.grabExcessVerticalSpace=false;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
    fdcFont.setEnabled(bEnableUI);
  }
  lblFill=new Label(cmpGeneral,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  lblFill.setEnabled(bEnableUI);
  fccBackground=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,fBackground,false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.heightHint=fccBackground.getPreferredSize().y;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  fccBackground.setEnabled(bEnableUI);
  if (attributesContext.isShadowEnabled) {
    lblShadow=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    lblShadow.setEnabled(bEnableUI);
    fccShadow=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,cdShadow,false,false);
    GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
    fccShadow.setEnabled(bEnableUI);
  }
  grpOutline=new Group(grpAttributes,SWT.NONE);
  GridData gdGOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGOutline.heightHint=110;
  grpOutline.setLayoutData(gdGOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  grpOutline.setLayout(flOutline);
  grpOutline.setEnabled(bEnableUI);
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,wizardContext,laCurrent,true,true,true);
  liacOutline.addListener(this);
  liacOutline.setAttributesEnabled(bEnableUI);
  if (attributesContext.isInsetsEnabled) {
    icInsets=new InsetsComposite(grpAttributes,SWT.NONE,insets,sUnits,wizardContext.getUIServiceProvider());
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.heightHint=icInsets.getPreferredSize().y;
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.addListener(this);
    icInsets.setLayoutData(gdICInsets);
    icInsets.setEnabled(bEnableUI);
  }
  populateLists();
}","/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glAttributes=new GridLayout();
  glAttributes.horizontalSpacing=5;
  glAttributes.verticalSpacing=5;
  glAttributes.marginHeight=7;
  glAttributes.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=2;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  FillLayout flOutline=new FillLayout();
  this.setLayout(flMain);
  if (sGroupName == null || sGroupName.length() == 0) {
    grpAttributes=new Composite(this,SWT.NONE);
  }
 else {
    grpAttributes=new Group(this,SWT.NONE);
    ((Group)grpAttributes).setText(sGroupName);
  }
  grpAttributes.setLayout(glAttributes);
  cmpGeneral=new Composite(grpAttributes,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_HORIZONTAL);
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  boolean bEnableUI=bEnabled && this.lblCurrent.isVisible();
  if (attributesContext.isVisibilityEnabled) {
    cbVisible=new Button(cmpGeneral,SWT.CHECK);
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=2;
    cbVisible.setLayoutData(gdCBVisible);
    cbVisible.setSelection(this.lblCurrent.isVisible());
    cbVisible.setText(Messages.getString(""String_Node_Str""));
    cbVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=cbVisible.getSelection();
    }
  }
  if (attributesContext.isLabelEnabled) {
    lblLabel=new Label(cmpGeneral,SWT.NONE);
{
      GridData gd=new GridData();
      lblLabel.setLayoutData(gd);
      lblLabel.setText(Messages.getString(""String_Node_Str""));
    }
    txtLabel=new ExternalizedTextEditorComposite(cmpGeneral,SWT.BORDER | SWT.SINGLE,-1,-1,wizardContext.getUIServiceProvider().getRegisteredKeys(),wizardContext.getUIServiceProvider(),""String_Node_Str"");
{
      GridData gd=new GridData(GridData.FILL_BOTH);
      txtLabel.setLayoutData(gd);
      txtLabel.addListener(this);
    }
  }
  if (attributesContext.isPositionEnabled) {
    lblPosition=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLPosition=new GridData();
    lblPosition.setLayoutData(gdLBLPosition);
    lblPosition.setText(Messages.getString(""String_Node_Str""));
    lblPosition.setEnabled(bEnableUI);
    cmbPosition=new Combo(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY);
    GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
    cmbPosition.setLayoutData(gdCMBPosition);
    cmbPosition.addSelectionListener(this);
    cmbPosition.setEnabled(bEnableUI);
  }
  if (attributesContext.isFontEnabled) {
    lblFont=new Label(cmpGeneral,SWT.NONE);
    GridData gdLFont=new GridData();
    lblFont.setLayoutData(gdLFont);
    lblFont.setText(Messages.getString(""String_Node_Str""));
    lblFont.setEnabled(bEnableUI);
    fdcFont=new FontDefinitionComposite(cmpGeneral,SWT.NONE,wizardContext,this.fdCurrent,this.cdFont,attributesContext.isFontAlignmentEnabled);
    GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
    gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
    gdFDCFont.grabExcessVerticalSpace=false;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
    fdcFont.setEnabled(bEnableUI);
  }
  lblFill=new Label(cmpGeneral,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  lblFill.setEnabled(bEnableUI);
  fccBackground=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,fBackground,false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.heightHint=fccBackground.getPreferredSize().y;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  fccBackground.setEnabled(bEnableUI);
  if (attributesContext.isShadowEnabled) {
    lblShadow=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    lblShadow.setEnabled(bEnableUI);
    fccShadow=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,cdShadow,false,false);
    GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
    fccShadow.setEnabled(bEnableUI);
  }
  grpOutline=new Group(grpAttributes,SWT.NONE);
  GridData gdGOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGOutline.heightHint=110;
  grpOutline.setLayoutData(gdGOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  grpOutline.setLayout(flOutline);
  grpOutline.setEnabled(bEnableUI);
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,wizardContext,laCurrent,true,true,true);
  liacOutline.addListener(this);
  liacOutline.setAttributesEnabled(bEnableUI);
  if (attributesContext.isInsetsEnabled) {
    icInsets=new InsetsComposite(grpAttributes,SWT.NONE,insets,sUnits,wizardContext.getUIServiceProvider());
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.heightHint=icInsets.getPreferredSize().y;
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.addListener(this);
    icInsets.setLayoutData(gdICInsets);
    icInsets.setEnabled(bEnableUI);
  }
  populateLists();
}",0.9919818885010848
69378,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_LEGEND_BLOCK);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.horizontalSpacing=5;
    glMain.verticalSpacing=5;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  Group grpTxtArea=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=7;
    layout.marginWidth=7;
    grpTxtArea.setLayout(layout);
    grpTxtArea.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpTxtArea.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblFormat=new Label(grpTxtArea,SWT.NONE);
{
    lblFormat.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpFormat=new Composite(grpTxtArea,SWT.BORDER);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginWidth=0;
    layout.marginHeight=0;
    layout.horizontalSpacing=0;
    cmpFormat.setLayout(layout);
    cmpFormat.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    cmpFormat.setBackground(cmpFormat.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  }
  fsp=new FormatSpecifierPreview(cmpFormat,SWT.NONE,false);
{
    GridData gd=new GridData();
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=SWT.CENTER;
    fsp.setLayoutData(gd);
    fsp.updatePreview(getChart().getLegend().getFormatSpecifier());
  }
  btnFormatSpecifier=new Button(cmpFormat,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.heightHint=20;
    btnFormatSpecifier.setLayoutData(gd);
    btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.addListener(SWT.Selection,this);
  }
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getText().getFont(),getLegend().getText().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_HORIZONTAL);
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  spnEllipsis=new Spinner(grpTxtArea,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    spnEllipsis.setLayoutData(gd);
    spnEllipsis.setMinimum(0);
    spnEllipsis.setSelection(getLegend().getEllipsis());
    spnEllipsis.setToolTipText(Messages.getString(""String_Node_Str""));
    spnEllipsis.addListener(SWT.Selection,this);
  }
  Label lblShadow=new Label(grpTxtArea,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getClientArea().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Label lblBackground=new Label(grpTxtArea,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpTxtArea,SWT.DROP_DOWN | SWT.READ_ONLY,getContext(),getChart().getLegend().getClientArea().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    fccBackground.setLayoutData(gridData);
    fccBackground.addListener(this);
  }
  Group grpOutline=new Group(grpTxtArea,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.horizontalSpan=2;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getLegend().getClientArea().getOutline(),true,true,true);
  outlineText.addListener(this);
  outlineText.setAttributesEnabled(true);
  icText=new InsetsComposite(grpTxtArea,SWT.NONE,getLegend().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  gdInsets.horizontalSpan=2;
  icText.setLayoutData(gdInsets);
  icText.addListener(this);
  Group grpSeparator=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=5;
    grpSeparator.setLayout(layout);
    grpSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpSeparator.setText(Messages.getString(""String_Node_Str""));
  }
  lineSeparator=new LineAttributesComposite(grpSeparator,SWT.NONE,getContext(),getLegend().getSeparator(),true,true,true);
{
    lineSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    lineSeparator.addListener(this);
    lineSeparator.setAttributesEnabled(true);
  }
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_LEGEND_BLOCK);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.horizontalSpacing=5;
    glMain.verticalSpacing=5;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  Group grpTxtArea=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=7;
    layout.marginWidth=7;
    grpTxtArea.setLayout(layout);
    grpTxtArea.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpTxtArea.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblFormat=new Label(grpTxtArea,SWT.NONE);
{
    lblFormat.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpFormat=new Composite(grpTxtArea,SWT.BORDER);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginWidth=0;
    layout.marginHeight=0;
    layout.horizontalSpacing=0;
    cmpFormat.setLayout(layout);
    cmpFormat.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    cmpFormat.setBackground(cmpFormat.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  }
  fsp=new FormatSpecifierPreview(cmpFormat,SWT.NONE,false);
{
    GridData gd=new GridData();
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=SWT.CENTER;
    fsp.setLayoutData(gd);
    fsp.updatePreview(getChart().getLegend().getFormatSpecifier());
  }
  btnFormatSpecifier=new Button(cmpFormat,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.heightHint=20;
    btnFormatSpecifier.setLayoutData(gd);
    btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.addListener(SWT.Selection,this);
  }
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getText().getFont(),getLegend().getText().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_HORIZONTAL);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  spnEllipsis=new Spinner(grpTxtArea,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    spnEllipsis.setLayoutData(gd);
    spnEllipsis.setMinimum(0);
    spnEllipsis.setSelection(getLegend().getEllipsis());
    spnEllipsis.setToolTipText(Messages.getString(""String_Node_Str""));
    spnEllipsis.addListener(SWT.Selection,this);
  }
  Label lblShadow=new Label(grpTxtArea,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getClientArea().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Label lblBackground=new Label(grpTxtArea,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpTxtArea,SWT.DROP_DOWN | SWT.READ_ONLY,getContext(),getChart().getLegend().getClientArea().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    fccBackground.setLayoutData(gridData);
    fccBackground.addListener(this);
  }
  Group grpOutline=new Group(grpTxtArea,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.horizontalSpan=2;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getLegend().getClientArea().getOutline(),true,true,true);
  outlineText.addListener(this);
  outlineText.setAttributesEnabled(true);
  icText=new InsetsComposite(grpTxtArea,SWT.NONE,getLegend().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  gdInsets.horizontalSpan=2;
  icText.setLayoutData(gdInsets);
  icText.addListener(this);
  Group grpSeparator=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=5;
    grpSeparator.setLayout(layout);
    grpSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpSeparator.setText(Messages.getString(""String_Node_Str""));
  }
  lineSeparator=new LineAttributesComposite(grpSeparator,SWT.NONE,getContext(),getLegend().getSeparator(),true,true,true);
{
    lineSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    lineSeparator.addListener(this);
    lineSeparator.setAttributesEnabled(true);
  }
  return cmpContent;
}",0.9947833065810594
69379,"private void createAttributeArea(Composite parent){
  grpAttributes=new Group(parent,SWT.NONE);
{
    grpAttributes.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpAttributes.setLayout(new GridLayout(2,false));
    grpAttributes.setText(Messages.getString(""String_Node_Str""));
  }
  lblPosition=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLPosition=new GridData();
  lblPosition.setLayoutData(gdLBLPosition);
  lblPosition.setText(Messages.getString(""String_Node_Str""));
  cmbPosition=new Combo(grpAttributes,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
  cmbPosition.setLayoutData(gdCMBPosition);
  cmbPosition.addSelectionListener(this);
  lblFont=new Label(grpAttributes,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getCaption().getFont(),getSeriesForProcessing().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.heightHint=fdcFont.getPreferredSize().y;
  gdFDCFont.widthHint=96;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(grpAttributes,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.heightHint=fccBackground.getPreferredSize().y;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
}","private void createAttributeArea(Composite parent){
  grpAttributes=new Group(parent,SWT.NONE);
{
    grpAttributes.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpAttributes.setLayout(new GridLayout(2,false));
    grpAttributes.setText(Messages.getString(""String_Node_Str""));
  }
  lblPosition=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLPosition=new GridData();
  lblPosition.setLayoutData(gdLBLPosition);
  lblPosition.setText(Messages.getString(""String_Node_Str""));
  cmbPosition=new Combo(grpAttributes,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
  cmbPosition.setLayoutData(gdCMBPosition);
  cmbPosition.addSelectionListener(this);
  lblFont=new Label(grpAttributes,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getCaption().getFont(),getSeriesForProcessing().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(grpAttributes,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.heightHint=fccBackground.getPreferredSize().y;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
}",0.991887743915808
69380,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_CURVE_FITTING);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Composite cmpLeft=new Composite(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout();
    gl.numColumns=2;
    cmpLeft.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    cmpLeft.setLayoutData(gd);
  }
  lblValue=new Label(cmpLeft,SWT.NONE);
{
    GridData gd=new GridData();
    lblValue.setLayoutData(gd);
    lblValue.setText(Messages.getString(""String_Node_Str""));
  }
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtValue=new ExternalizedTextEditorComposite(cmpLeft,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),getTrendline().getLabel().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=125;
    txtValue.setLayoutData(gd);
    txtValue.addListener(this);
  }
  lblAnchor=new Label(cmpLeft,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  Composite cmpRight=new Composite(cmpContent,SWT.NONE);
{
    cmpRight.setLayout(new FillLayout());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpRight.setLayoutData(gd);
  }
  trendLineText=new LineAttributesComposite(cmpRight,SWT.NONE,getContext(),getTrendline().getLineAttributes(),true,true,false);
  trendLineText.addListener(this);
  Group cmpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabel.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpLabel.setLayoutData(gd);
    cmpLabel.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpLabelInner=new Composite(cmpLabel,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabelInner.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalAlignment=SWT.BEGINNING;
    cmpLabelInner.setLayoutData(gd);
  }
  btnVisible=new Button(cmpLabelInner,SWT.CHECK);
  GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
  gdCBVisible.horizontalSpan=2;
  btnVisible.setLayoutData(gdCBVisible);
  btnVisible.setSelection(getTrendline().getLabel().isVisible());
  btnVisible.setText(Messages.getString(""String_Node_Str""));
  btnVisible.addSelectionListener(this);
  lblFont=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getCaption().getFont(),getTrendline().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.heightHint=fdcFont.getPreferredSize().y;
  gdFDCFont.widthHint=96;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.heightHint=fccBackground.getPreferredSize().y;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Group grpOutline=new Group(cmpLabel,SWT.NONE);
  grpOutline.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getTrendline().getLabel().getOutline(),true,true,true);
  outlineText.addListener(this);
  icLabel=new InsetsComposite(cmpLabel,SWT.NONE,1,getTrendline().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdICBlock=new GridData(GridData.FILL_HORIZONTAL);
  gdICBlock.horizontalSpan=2;
  icLabel.setLayoutData(gdICBlock);
  icLabel.addListener(this);
  populateLists();
  setState(btnVisible.getSelection());
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_CURVE_FITTING);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Composite cmpLeft=new Composite(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout();
    gl.numColumns=2;
    cmpLeft.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    cmpLeft.setLayoutData(gd);
  }
  lblValue=new Label(cmpLeft,SWT.NONE);
{
    GridData gd=new GridData();
    lblValue.setLayoutData(gd);
    lblValue.setText(Messages.getString(""String_Node_Str""));
  }
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtValue=new ExternalizedTextEditorComposite(cmpLeft,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),getTrendline().getLabel().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=125;
    txtValue.setLayoutData(gd);
    txtValue.addListener(this);
  }
  lblAnchor=new Label(cmpLeft,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  Composite cmpRight=new Composite(cmpContent,SWT.NONE);
{
    cmpRight.setLayout(new FillLayout());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpRight.setLayoutData(gd);
  }
  trendLineText=new LineAttributesComposite(cmpRight,SWT.NONE,getContext(),getTrendline().getLineAttributes(),true,true,false);
  trendLineText.addListener(this);
  Group cmpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabel.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpLabel.setLayoutData(gd);
    cmpLabel.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpLabelInner=new Composite(cmpLabel,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabelInner.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalAlignment=SWT.BEGINNING;
    cmpLabelInner.setLayoutData(gd);
  }
  btnVisible=new Button(cmpLabelInner,SWT.CHECK);
  GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
  gdCBVisible.horizontalSpan=2;
  btnVisible.setLayoutData(gdCBVisible);
  btnVisible.setSelection(getTrendline().getLabel().isVisible());
  btnVisible.setText(Messages.getString(""String_Node_Str""));
  btnVisible.addSelectionListener(this);
  lblFont=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getCaption().getFont(),getTrendline().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.heightHint=fccBackground.getPreferredSize().y;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Group grpOutline=new Group(cmpLabel,SWT.NONE);
  grpOutline.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getTrendline().getLabel().getOutline(),true,true,true);
  outlineText.addListener(this);
  icLabel=new InsetsComposite(cmpLabel,SWT.NONE,1,getTrendline().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdICBlock=new GridData(GridData.FILL_HORIZONTAL);
  gdICBlock.horizontalSpan=2;
  icLabel.setLayoutData(gdICBlock);
  icLabel.addListener(this);
  populateLists();
  setState(btnVisible.getSelection());
  return cmpContent;
}",0.9918555588264156
69381,"public static boolean canPreviewWithErrors(ModuleHandle model){
  if (model == null) {
    return false;
  }
  model.checkReport();
  List list=model.getErrorList();
  if (list.size() > 0) {
    return MessageDialog.openConfirm(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  return true;
}","public static boolean canPreviewWithErrors(ModuleHandle model){
  if (model == null) {
    return false;
  }
  model.checkReport();
  List errorList=model.getErrorList();
  if (errorList.size() > 0) {
    ErrorStatus status=new ErrorStatus(ReportPlugin.REPORT_UI,1009,Messages.getString(""String_Node_Str""),null);
    for (int i=0; i < errorList.size(); i++) {
      ErrorDetail ed=(ErrorDetail)errorList.get(i);
      status.addError(""String_Node_Str"" + ed.getLineNo() + ""String_Node_Str""+ ed.getMessage());
    }
    return new ErrorDialog(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),status,IStatus.OK | IStatus.INFO | IStatus.WARNING| IStatus.ERROR){
      protected void createButtonsForButtonBar(      Composite parent){
        createButton(parent,IDialogConstants.OK_ID,IDialogConstants.OK_LABEL,true);
        createButton(parent,IDialogConstants.CANCEL_ID,IDialogConstants.CANCEL_LABEL,false);
        createDetailsButton(parent);
      }
    }
.open() == Window.OK;
  }
  return true;
}",0.450664800559832
69382,"public ImageData(IImageContent image,StyleEntry style,int datatype,Image imageInfo,XlsContainer currentContainer){
  super();
  this.style=style;
  this.dataType=datatype;
  height=imageInfo.getHeight() * ExcelUtil.PX_PT;
  double imageWidth=imageInfo.getWidth() * ExcelUtil.PX_PT;
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  container=currentContainer;
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}","public ImageData(IImageContent image,StyleEntry style,int datatype,Image imageInfo,XlsContainer currentContainer){
  super();
  this.style=style;
  this.dataType=datatype;
  height=ExcelUtil.convertImageSize(image.getHeight(),(int)(imageInfo.getHeight() * ExcelUtil.PX_PT));
  double imageWidth=ExcelUtil.convertImageSize(image.getWidth(),(int)(imageInfo.getWidth() * ExcelUtil.PX_PT));
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  container=currentContainer;
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}",0.9097162510748066
69383,"public void addImageData(IImageContent image,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  XlsContainer container=getCurrentContainer();
  ContainerSizeInfo rule=container.getSizeInfo();
  StyleEntry entry=engine.getStyle(style,rule);
  SheetData data=createImageData(image,entry,container);
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  data.setSizeInfo(rule);
  addData(data);
}","public void addImageData(IImageContent image,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  XlsContainer container=getCurrentContainer();
  ContainerSizeInfo parentSizeInfo=container.getSizeInfo();
  ColumnsInfo imageColumnsInfo=LayoutUtil.createImage(image,parentSizeInfo.getWidth());
  splitColumns(imageColumnsInfo,parentSizeInfo);
  StyleEntry entry=engine.getStyle(style,parentSizeInfo);
  SheetData data=createImageData(image,entry,container);
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  ContainerSizeInfo imageSizeInfo=new ContainerSizeInfo(parentSizeInfo.getStartCoordinate(),imageColumnsInfo.getTotalWidth());
  data.setSizeInfo(imageSizeInfo);
  addData(data);
}",0.6823529411764706
69384,"public static int getElementWidth(IContent content,int width){
  DimensionType value=content.getWidth();
  if (value != null) {
    try {
      width=Math.min(ExcelUtil.covertDimensionType(value,width),width);
    }
 catch (    Exception e) {
    }
  }
  return width;
}","private static int getElementWidth(DimensionType contentWdith,int width){
  try {
    width=Math.min(ExcelUtil.covertDimensionType(contentWdith,width),width);
  }
 catch (  Exception e) {
  }
  return width;
}",0.651356993736952
69385,"public static ColumnsInfo createChart(IForeignContent content,int width){
  ExtendedItemDesign design=(ExtendedItemDesign)content.getGenerateBy();
  DimensionType value=design.getWidth();
  if (value != null) {
    width=Math.min(ExcelUtil.covertDimensionType(value,width),width);
  }
  int[] column=new int[]{width};
  return new ColumnsInfo(column);
}","public static ColumnsInfo createChart(IForeignContent content,int width){
  ExtendedItemDesign design=(ExtendedItemDesign)content.getGenerateBy();
  DimensionType value=design.getWidth();
  if (value != null) {
    width=getElementWidth(value,width);
  }
  int[] column=new int[]{width};
  return new ColumnsInfo(column);
}",0.8994082840236687
69386,"private void traverse(IArea area){
  if (area instanceof ContainerArea) {
    if (area instanceof TableArea) {
      tableIds.add(((TableArea)area).getContent().getInstanceID().toUniqueString());
    }
    ContainerArea container=(ContainerArea)area;
    if (container.content != null) {
      start(container);
    }
    if (!(container.content instanceof ForeignContent)) {
      for (Iterator<IArea> i=container.getChildren(); i.hasNext(); ) {
        IArea child=i.next();
        traverse(child);
      }
    }
  }
  String bookmark=area.getBookmark();
  if (bookmark != null) {
    context.addBookmarkMap(context.getPageNumber(),bookmark);
  }
}","private void traverse(IArea area){
  if (area instanceof ContainerArea) {
    if (area instanceof TableArea) {
      tableIds.add(((TableArea)area).getContent().getInstanceID().toUniqueString());
    }
    ContainerArea container=(ContainerArea)area;
    if (container.content != null && !container.isDummy) {
      start(container);
    }
    if (!(container.content instanceof ForeignContent)) {
      for (Iterator<IArea> i=container.getChildren(); i.hasNext(); ) {
        IArea child=i.next();
        traverse(child);
      }
    }
  }
  String bookmark=area.getBookmark();
  if (bookmark != null) {
    context.addBookmarkMap(context.getPageNumber(),bookmark);
  }
}",0.9833836858006042
69387,"public List<UnresolvedRowHint> getUnresolvedRowHints(){
  ArrayList<UnresolvedRowHint> unresolvedRowHintsList=new ArrayList<UnresolvedRowHint>();
  Iterator<String> iter=getTableKeys().iterator();
  while (iter.hasNext()) {
    String key=iter.next();
    if (unresolvedRowHints != null) {
      UnresolvedRowHint hint=unresolvedRowHints.get(key);
      if (hint != null) {
        unresolvedRowHintsList.add(hint);
        continue;
      }
    }
    UnresolvedRowHint hint=htmlUnresolvedRowHints.get(key);
    if (hint != null) {
      unresolvedRowHintsList.add(hint);
    }
  }
  return unresolvedRowHintsList;
}","public List<UnresolvedRowHint> getUnresolvedRowHints(){
  ArrayList<UnresolvedRowHint> unresolvedRowHintsList=new ArrayList<UnresolvedRowHint>();
  Iterator<String> iter=getTableKeys().iterator();
  while (iter.hasNext()) {
    String key=iter.next();
    if (docUnresolvedRowHints != null) {
      UnresolvedRowHint hint=docUnresolvedRowHints.get(key);
      if (hint != null) {
        unresolvedRowHintsList.add(hint);
        continue;
      }
    }
    UnresolvedRowHint hint=htmlUnresolvedRowHints.get(key);
    if (hint != null) {
      unresolvedRowHintsList.add(hint);
    }
  }
  return unresolvedRowHintsList;
}",0.9919224555735056
69388,"public void addUnresolvedRowHint(String tableId,UnresolvedRowHint hint){
  if (unresolvedRowHints == null) {
    unresolvedRowHints=new HashMap<String,UnresolvedRowHint>();
  }
  unresolvedRowHints.put(htmlLayoutContext.getPageHintManager().getHintMapKey(tableId),hint);
}","public void addUnresolvedRowHint(String tableId,UnresolvedRowHint hint){
  if (currentPageUnresolvedRowHints == null) {
    currentPageUnresolvedRowHints=new HashMap<String,UnresolvedRowHint>();
  }
  currentPageUnresolvedRowHints.put(htmlLayoutContext.getPageHintManager().getHintMapKey(tableId),hint);
}",0.9324090121317158
69389,"private UnresolvedRowHint convertRowToHint(RowArea row){
  IRowContent rowContent=(IRowContent)row.getContent();
  ITableContent table=rowContent.getTable();
  InstanceID tableId=table.getInstanceID();
  InstanceID rowId=rowContent.getInstanceID();
  UnresolvedRowHint hint=new UnresolvedRowHint(tableId.toUniqueString(),rowId.toUniqueString());
  for (Iterator i=row.getChildren(); i.hasNext(); ) {
    AbstractArea area=(AbstractArea)i.next();
    String style=null;
    if (area instanceof CellArea) {
      CellArea cell=(CellArea)area;
      ICellContent cellContent=(ICellContent)cell.getContent();
      if (cellContent != null) {
        style=cellContent.getStyle().getCssText();
      }
      hint.addUnresolvedCell(style,cell.columnID,cell.colSpan,cell.rowSpan);
    }
  }
  return hint;
}","private UnresolvedRowHint convertRowToHint(RowArea row){
  IRowContent rowContent=(IRowContent)row.getContent();
  ITableContent table=rowContent.getTable();
  InstanceID tableId=table.getInstanceID();
  InstanceID rowId=rowContent.getInstanceID();
  UnresolvedRowHint hint=new UnresolvedRowHint(tableId.toUniqueString(),rowId.toUniqueString());
  if (row.cells != null) {
    for (int i=0; i < row.cells.length; i++) {
      AbstractArea area=(AbstractArea)row.cells[i];
      String style=null;
      if (area instanceof DummyCell) {
        CellArea cell=((DummyCell)area).getCell();
        ICellContent cellContent=(ICellContent)cell.getContent();
        if (cellContent != null) {
          style=cellContent.getStyle().getCssText();
        }
        hint.addUnresolvedCell(style,cell.columnID,((DummyCell)area).colSpan,((DummyCell)area).rowSpan);
      }
 else       if (area instanceof CellArea) {
        CellArea cell=(CellArea)area;
        ICellContent cellContent=(ICellContent)cell.getContent();
        if (cellContent != null) {
          style=cellContent.getStyle().getCssText();
        }
        hint.addUnresolvedCell(style,cell.columnID,cell.colSpan,cell.rowSpan);
      }
    }
  }
  return hint;
}",0.4933267424616905
69390,"private CellArea createEmptyCell(CellArea upperCell,int columnId,RowArea row,RowArea lastRow){
  ICellContent cellContent=null;
  int rowSpan=1;
  if (upperCell != null) {
    cellContent=(ICellContent)upperCell.getContent();
    rowSpan=upperCell.getRowSpan() - 1;
  }
  if (cellContent == null) {
    cellContent=tableContent.getReportContent().createCellContent();
    cellContent.setColumn(columnId);
    cellContent.setColSpan(1);
    cellContent.setRowSpan(1);
    cellContent.setParent(row.getContent());
  }
  int emptyCellColID=cellContent.getColumn();
  int emptyCellColSpan=cellContent.getColSpan();
  CellArea emptyCell=upperCell.cloneArea();
  emptyCell.setHeight(0);
  emptyCell.setRowSpan(rowSpan);
  CellArea leftSideCellArea=null;
  if (emptyCellColID > startCol) {
    leftSideCellArea=row.getCell(emptyCellColID - 1);
    if (leftSideCellArea == null) {
      int k=emptyCellColID - 1;
      while (leftSideCellArea == null && k > startCol) {
        k--;
        leftSideCellArea=row.getCell(k);
      }
    }
  }
 else {
    leftSideCellArea=null;
  }
  emptyCell.setParent(row);
  row.setCell(emptyCell);
  resolveBorderConflict(emptyCell,true);
  emptyCell.setWidth(getCellWidth(emptyCellColID,emptyCellColID + emptyCellColSpan));
  emptyCell.setPosition(layoutInfo.getXPosition(columnId),0);
  if (leftSideCellArea != null) {
    int index=row.indexOf(leftSideCellArea);
    row.addChild(index + 1,emptyCell);
  }
 else {
    row.addChild(0,emptyCell);
  }
  return emptyCell;
}","private CellArea createEmptyCell(CellArea upperCell,int columnId,RowArea row,RowArea lastRow){
  ICellContent cellContent=null;
  int rowSpan=1;
  if (upperCell != null) {
    cellContent=(ICellContent)upperCell.getContent();
    rowSpan=upperCell.getRowSpan() - 1;
  }
  if (cellContent == null) {
    cellContent=tableContent.getReportContent().createCellContent();
    cellContent.setColumn(columnId);
    cellContent.setColSpan(1);
    cellContent.setRowSpan(1);
    cellContent.setParent(row.getContent());
  }
  int emptyCellColID=cellContent.getColumn();
  int emptyCellColSpan=cellContent.getColSpan();
  CellArea emptyCell=upperCell.cloneArea();
  emptyCell.setHeight(0);
  emptyCell.setRowSpan(rowSpan);
  CellArea leftSideCellArea=null;
  if (emptyCellColID > startCol) {
    leftSideCellArea=row.getCell(emptyCellColID - 1);
    if (leftSideCellArea == null) {
      int k=emptyCellColID - 1;
      while (leftSideCellArea == null && k > startCol) {
        k--;
        leftSideCellArea=row.getCell(k);
      }
    }
  }
 else {
    leftSideCellArea=null;
  }
  emptyCell.setParent(row);
  row.setCell(emptyCell);
  resolveBorderConflict(emptyCell,true);
  emptyCell.setWidth(getCellWidth(emptyCellColID,emptyCellColID + emptyCellColSpan));
  emptyCell.setPosition(layoutInfo.getXPosition(columnId),0);
  if (leftSideCellArea != null) {
    int index=row.indexOf(leftSideCellArea);
    row.addChild(index + 1,emptyCell);
  }
 else {
    row.addChild(0,emptyCell);
  }
  emptyCell.isDummy=true;
  return emptyCell;
}",0.9914191419141914
69391,"protected void drawBackgroundImage(float x,float y,float width,float height,float iWidth,float iHeight,int repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  contentByte.saveState();
  try {
    Image img=null;
    try {
      img=Image.getInstance(new URL(imageUrl));
    }
 catch (    IOException e) {
      if (SvgFile.isSvg(imageUrl)) {
        try {
          img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
        }
 catch (        IOException ex) {
          throw ex;
        }
      }
 else {
        throw e;
      }
    }
    float imageWidth=iWidth;
    float imageHeight=iHeight;
    if (imageHeight == 0 || imageWidth == 0) {
      int resolutionX=img.getDpiX();
      int resolutionY=img.getDpiY();
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=96;
        resolutionY=96;
      }
      imageWidth=img.plainWidth() / resolutionX * 72;
      imageHeight=img.plainHeight() / resolutionY * 72;
    }
    if (BackgroundImageInfo.NO_REPEAT == repeat) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,imageWidth);
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,imageHeight);
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=contentByte.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,imageWidth,0,0,imageHeight,translationX,translationY);
      contentByte.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (BackgroundImageInfo.REPEAT_X == repeat) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > imageWidth) {
        if (height - absPosY > imageHeight) {
          template=contentByte.createTemplate(imageWidth,imageHeight);
          template.addImage(img,imageWidth,0,0,imageHeight,0,0);
        }
 else {
          template=contentByte.createTemplate(imageWidth,height);
          template.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + height);
        }
      }
      while (remainX > 0) {
        if (remainX < imageWidth) {
          if (height - absPosY > imageHeight) {
            PdfTemplate templateX=contentByte.createTemplate(remainX,imageHeight);
            templateX.addImage(img,imageWidth,0,0,imageHeight,0,0);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - imageHeight);
          }
 else {
            PdfTemplate templateX=contentByte.createTemplate(remainX,height);
            templateX.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + height - absPosY);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > imageHeight)           contentByte.addTemplate(template,x + width - remainX,y - absPosY - imageHeight);
 else           contentByte.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=imageWidth;
        }
      }
    }
 else     if (BackgroundImageInfo.REPEAT_Y == repeat) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > imageHeight) {
        template=contentByte.createTemplate(width - absPosX > imageWidth ? imageWidth : width - absPosX,imageHeight);
        template.addImage(img,imageWidth,0,0,imageHeight,0,0);
      }
      while (remainY > 0) {
        if (remainY < imageHeight) {
          PdfTemplate templateY=contentByte.createTemplate(width - absPosX > imageWidth ? imageWidth : width - absPosX,remainY);
          templateY.addImage(img,width > imageWidth ? imageWidth : width - absPosX,0,0,imageHeight,0,-(imageHeight - remainY));
          contentByte.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          contentByte.addTemplate(template,x + absPosX,y - height + remainY - imageHeight);
          remainY-=imageHeight;
        }
      }
    }
 else     if (BackgroundImageInfo.REPEAT == repeat) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width >= imageWidth && height >= imageHeight) {
        template=contentByte.createTemplate(imageWidth,imageHeight);
        template.addImage(img,imageWidth,0,0,imageHeight,0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < imageHeight) {
          while (remainX > 0) {
            if (remainX < imageWidth) {
              PdfTemplate templateXY=contentByte.createTemplate(remainX,remainY);
              templateXY.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + remainY);
              contentByte.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=contentByte.createTemplate(imageWidth,remainY);
              templateY.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + remainY);
              contentByte.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=imageWidth;
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < imageWidth) {
              PdfTemplate templateX=contentByte.createTemplate(remainX,imageHeight);
              templateX.addImage(img,imageWidth,0,0,imageHeight,0,0);
              contentByte.addTemplate(templateX,x + width - remainX,y - height + remainY - imageHeight);
              remainX=0;
            }
 else {
              contentByte.addTemplate(template,x + width - remainX,y - height + remainY - imageHeight);
              remainX-=imageWidth;
            }
          }
          remainY-=imageHeight;
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  contentByte.restoreState();
}","protected void drawBackgroundImage(float x,float y,float width,float height,float iWidth,float iHeight,int repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  contentByte.saveState();
  try {
    Image img=null;
    try {
      img=Image.getInstance(new URL(imageUrl));
    }
 catch (    IOException e) {
      if (SvgFile.isSvg(imageUrl)) {
        try {
          img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
        }
 catch (        IOException ex) {
          throw ex;
        }
      }
 else {
        throw e;
      }
    }
    float imageWidth=iWidth;
    float imageHeight=iHeight;
    if (imageHeight == 0 || imageWidth == 0) {
      int resolutionX=img.getDpiX();
      int resolutionY=img.getDpiY();
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=96;
        resolutionY=96;
      }
      imageWidth=img.plainWidth() / resolutionX * 72;
      imageHeight=img.plainHeight() / resolutionY * 72;
    }
    if (BackgroundImageInfo.NO_REPEAT == repeat) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,imageWidth);
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,imageHeight);
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=contentByte.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,imageWidth,0,0,imageHeight,translationX,translationY);
      contentByte.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (BackgroundImageInfo.REPEAT_X == repeat) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > imageWidth) {
        if (height - absPosY > imageHeight) {
          template=contentByte.createTemplate(imageWidth,imageHeight);
          template.addImage(img,imageWidth,0,0,imageHeight,0,0);
        }
 else {
          template=contentByte.createTemplate(imageWidth,height);
          template.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + height);
        }
      }
      while (remainX > 0) {
        if (remainX <= imageWidth) {
          if (height - absPosY >= imageHeight) {
            PdfTemplate templateX=contentByte.createTemplate(remainX,imageHeight);
            templateX.addImage(img,imageWidth,0,0,imageHeight,0,0);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - imageHeight);
          }
 else {
            PdfTemplate templateX=contentByte.createTemplate(remainX,height);
            templateX.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + height - absPosY);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > imageHeight)           contentByte.addTemplate(template,x + width - remainX,y - absPosY - imageHeight);
 else           contentByte.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=imageWidth;
        }
      }
    }
 else     if (BackgroundImageInfo.REPEAT_Y == repeat) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > imageHeight) {
        template=contentByte.createTemplate(width - absPosX > imageWidth ? imageWidth : width - absPosX,imageHeight);
        template.addImage(img,imageWidth,0,0,imageHeight,0,0);
      }
      while (remainY > 0) {
        if (remainY < imageHeight) {
          PdfTemplate templateY=contentByte.createTemplate(width - absPosX > imageWidth ? imageWidth : width - absPosX,remainY);
          templateY.addImage(img,width > imageWidth ? imageWidth : width - absPosX,0,0,imageHeight,0,-(imageHeight - remainY));
          contentByte.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          contentByte.addTemplate(template,x + absPosX,y - height + remainY - imageHeight);
          remainY-=imageHeight;
        }
      }
    }
 else     if (BackgroundImageInfo.REPEAT == repeat) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width >= imageWidth && height >= imageHeight) {
        template=contentByte.createTemplate(imageWidth,imageHeight);
        template.addImage(img,imageWidth,0,0,imageHeight,0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < imageHeight) {
          while (remainX > 0) {
            if (remainX < imageWidth) {
              PdfTemplate templateXY=contentByte.createTemplate(remainX,remainY);
              templateXY.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + remainY);
              contentByte.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=contentByte.createTemplate(imageWidth,remainY);
              templateY.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + remainY);
              contentByte.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=imageWidth;
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < imageWidth) {
              PdfTemplate templateX=contentByte.createTemplate(remainX,imageHeight);
              templateX.addImage(img,imageWidth,0,0,imageHeight,0,0);
              contentByte.addTemplate(templateX,x + width - remainX,y - height + remainY - imageHeight);
              remainX=0;
            }
 else {
              contentByte.addTemplate(template,x + width - remainX,y - height + remainY - imageHeight);
              remainX-=imageWidth;
            }
          }
          remainY-=imageHeight;
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  contentByte.restoreState();
}",0.9998406120497292
69392,"public void close() throws BirtException {
  int overFlowType=context.getPageOverflow();
  if (overFlowType == IPDFRenderOption.FIT_TO_PAGE_SIZE) {
    float scale=calculatePageScale(this);
    if (1f == scale) {
      pageContent.setExtension(IContent.LAYOUT_EXTENSION,this);
      outputPage(pageContent);
      return;
    }
    this.setScale(scale);
    getBody().setNeedClip(false);
    updatePageDimension(scale,this);
  }
 else   if (overFlowType == IPDFRenderOption.ENLARGE_PAGE_SIZE) {
    getBody().setNeedClip(false);
    updatePageDimension(this);
  }
  pageContent.setExtension(IContent.LAYOUT_EXTENSION,this);
  outputPage(pageContent);
  finished=true;
}","public void close() throws BirtException {
  int overFlowType=context.getPageOverflow();
  if (overFlowType == IPDFRenderOption.FIT_TO_PAGE_SIZE) {
    float scale=calculatePageScale(this);
    if (1f == scale) {
      pageContent.setExtension(IContent.LAYOUT_EXTENSION,this);
      outputPage(pageContent);
      return;
    }
    this.setScale(scale);
    getBody().setNeedClip(false);
    updatePageDimension(scale,this);
  }
 else   if (overFlowType == IPDFRenderOption.ENLARGE_PAGE_SIZE) {
    getBody().setNeedClip(false);
    updatePageDimension(this);
  }
  pageContent.setExtension(IContent.LAYOUT_EXTENSION,this);
  outputPage(pageContent);
  context.resetUnresolveRowHints();
  finished=true;
}",0.9737991266375546
69393,"protected BackgroundImageInfo createBackgroundImage(String url,IContent content){
  IStyle style=content.getStyle();
  String widthStr=style.getBackgroundWidth();
  String heightStr=style.getBackgroundHeight();
  Image img=null;
  try {
    img=Image.getInstance(new URL(url));
  }
 catch (  Exception e) {
    if (SvgFile.isSvg(url)) {
      try {
        img=Image.getInstance(SvgFile.transSvgToArray(url));
      }
 catch (      Exception ex) {
        logger.log(Level.WARNING,ex.getMessage(),ex);
      }
    }
 else {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
  int resolutionX=img.getDpiX();
  int resolutionY=img.getDpiY();
  if (0 == resolutionX || 0 == resolutionY) {
    resolutionX=96;
    resolutionY=96;
  }
  float imageWidth=img.plainWidth() / resolutionX * 72 * PDFConstants.LAYOUT_TO_PDF_RATIO;
  float imageHeight=img.plainHeight() / resolutionY * 72 * PDFConstants.LAYOUT_TO_PDF_RATIO;
  int actualWidth=(int)imageWidth;
  int actualHeight=(int)imageHeight;
  if (widthStr != null && widthStr.length() > 0 || heightStr != null && heightStr.length() > 0) {
    if (""String_Node_Str"".equals(widthStr) || ""String_Node_Str"".equals(heightStr)) {
      float rh=imageHeight / height;
      float rw=imageWidth / width;
      if (rh > rw) {
        actualHeight=height;
        actualWidth=(int)(imageWidth * height / imageHeight);
      }
 else {
        actualWidth=width;
        actualHeight=(int)(imageHeight * width / imageWidth);
      }
    }
 else     if (""String_Node_Str"".equals(widthStr) || ""String_Node_Str"".equals(heightStr)) {
      float rh=imageHeight / height;
      float rw=imageWidth / width;
      if (rh > rw) {
        actualWidth=width;
        actualHeight=(int)(imageHeight * width / imageWidth);
      }
 else {
        actualHeight=height;
        actualWidth=(int)(imageWidth * height / imageHeight);
      }
    }
 else {
      DimensionType widthDim=DimensionType.parserUnit(widthStr);
      DimensionType heightDim=DimensionType.parserUnit(heightStr);
      if (widthDim != null) {
        actualWidth=PropertyUtil.getDimensionValue(content,widthDim);
        if (heightDim == null) {
          actualHeight=(int)(imageHeight * actualWidth / imageWidth);
        }
 else {
          actualHeight=PropertyUtil.getDimensionValue(content,heightDim);
        }
      }
 else       if (heightDim != null) {
        actualHeight=PropertyUtil.getDimensionValue(content,heightDim);
        if (widthDim == null) {
          actualWidth=(int)(imageWidth * actualHeight / imageHeight);
        }
 else {
          actualWidth=PropertyUtil.getDimensionValue(content,widthDim);
        }
      }
 else {
        actualHeight=(int)imageHeight;
        actualWidth=(int)imageWidth;
      }
    }
  }
  IStyle cs=pageContent.getComputedStyle();
  return new BackgroundImageInfo(url,cs.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width - actualWidth),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),height - actualHeight),actualHeight,actualWidth);
}","protected BackgroundImageInfo createBackgroundImage(String url,IContent content){
  IStyle style=content.getStyle();
  String widthStr=style.getBackgroundWidth();
  String heightStr=style.getBackgroundHeight();
  Image img=null;
  try {
    img=Image.getInstance(new URL(url));
  }
 catch (  Exception e) {
    if (SvgFile.isSvg(url)) {
      try {
        img=Image.getInstance(SvgFile.transSvgToArray(url));
      }
 catch (      Exception ex) {
        logger.log(Level.WARNING,ex.getMessage(),ex);
      }
    }
 else {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
  if (img != null) {
    int resolutionX=img.getDpiX();
    int resolutionY=img.getDpiY();
    if (0 == resolutionX || 0 == resolutionY) {
      resolutionX=96;
      resolutionY=96;
    }
    float imageWidth=img.plainWidth() / resolutionX * 72 * PDFConstants.LAYOUT_TO_PDF_RATIO;
    float imageHeight=img.plainHeight() / resolutionY * 72 * PDFConstants.LAYOUT_TO_PDF_RATIO;
    int actualWidth=(int)imageWidth;
    int actualHeight=(int)imageHeight;
    if (widthStr != null && widthStr.length() > 0 || heightStr != null && heightStr.length() > 0) {
      if (""String_Node_Str"".equals(widthStr) || ""String_Node_Str"".equals(heightStr)) {
        float rh=imageHeight / height;
        float rw=imageWidth / width;
        if (rh > rw) {
          actualHeight=height;
          actualWidth=(int)(imageWidth * height / imageHeight);
        }
 else {
          actualWidth=width;
          actualHeight=(int)(imageHeight * width / imageWidth);
        }
      }
 else       if (""String_Node_Str"".equals(widthStr) || ""String_Node_Str"".equals(heightStr)) {
        float rh=imageHeight / height;
        float rw=imageWidth / width;
        if (rh > rw) {
          actualWidth=width;
          actualHeight=(int)(imageHeight * width / imageWidth);
        }
 else {
          actualHeight=height;
          actualWidth=(int)(imageWidth * height / imageHeight);
        }
      }
 else {
        DimensionType widthDim=DimensionType.parserUnit(widthStr);
        DimensionType heightDim=DimensionType.parserUnit(heightStr);
        if (widthDim != null) {
          actualWidth=PropertyUtil.getDimensionValue(content,widthDim);
          if (heightDim == null) {
            actualHeight=(int)(imageHeight * actualWidth / imageWidth);
          }
 else {
            actualHeight=PropertyUtil.getDimensionValue(content,heightDim);
          }
        }
 else         if (heightDim != null) {
          actualHeight=PropertyUtil.getDimensionValue(content,heightDim);
          if (widthDim == null) {
            actualWidth=(int)(imageWidth * actualHeight / imageHeight);
          }
 else {
            actualWidth=PropertyUtil.getDimensionValue(content,widthDim);
          }
        }
 else {
          actualHeight=(int)imageHeight;
          actualWidth=(int)imageWidth;
        }
      }
    }
    IStyle cs=pageContent.getComputedStyle();
    return new BackgroundImageInfo(url,cs.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width - actualWidth),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),height - actualHeight),actualHeight,actualWidth);
  }
  return null;
}",0.9753632343651296
69394,"public void endLine(boolean endParagraph) throws BirtException {
  lineCount++;
  if (getChildrenCount() > 0) {
    close(false);
  }
  if (lineParent != null) {
    lineParent.removeChild(this);
    lineParent.endLine(endParagraph);
    initialize();
  }
}","public void endLine(boolean endParagraph) throws BirtException {
  lineCount++;
  if (getChildrenCount() > 0) {
    close(false);
  }
  if (lineParent != null) {
    lineParent.endLine(endParagraph);
    initialize();
  }
}",0.9291666666666668
69395,"public void initialize() throws BirtException {
  IStyle style=content.getStyle();
  calculateSpecifiedWidth(content);
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
 else {
    buildProperties(content,context);
  }
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
  vAlign=style.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  currentIP=0;
  currentBP=0;
  parent.add(this);
}","public void initialize() throws BirtException {
  IStyle style=content.getStyle();
  calculateSpecifiedWidth(content);
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
 else {
    buildProperties(content,context);
  }
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
  vAlign=style.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  currentIP=0;
  currentBP=0;
}",0.981203007518797
69396,"public LineArea(LineArea area){
  super(area);
  this.baseLevel=area.baseLevel;
}","public LineArea(LineArea area){
  super(area);
  this.baseLevel=area.baseLevel;
  this.isInlineStacking=true;
}",0.84375
69397,"public TextAreaLayout(ContainerArea parent,LayoutContext context,IContent content){
  parentLM=(InlineStackingArea)parent;
  ITextContent textContent=(ITextContent)content;
  parentLM.setTextIndent(textContent);
  String text=textContent.getText();
  if (text != null && text.length() != 0)   transform(textContent);
 else   textContent.setText(""String_Node_Str"");
  this.textContent=textContent;
  comp=new TextCompositor(textContent,context.getFontManager(),context);
  ContainerArea ancestor=parentLM;
  do {
    if (null == ancestor) {
      comp.setNewLineStatus(true);
      return;
    }
    if (!ancestor.isEmpty()) {
      comp.setNewLineStatus(false);
      return;
    }
    if (ancestor instanceof LineArea) {
      comp.setNewLineStatus(ancestor.isEmpty());
      return;
    }
    ancestor=ancestor.getParent();
  }
 while (true);
}","public TextAreaLayout(ContainerArea parent,LayoutContext context,IContent content){
  parentLM=(InlineStackingArea)parent;
  ITextContent textContent=(ITextContent)content;
  parentLM.setTextIndent(textContent);
  String text=textContent.getText();
  if (text != null && text.length() != 0)   transform(textContent);
 else   textContent.setText(""String_Node_Str"");
  this.textContent=textContent;
  comp=new TextCompositor(textContent,context.getFontManager(),context);
  LineArea lineParent=getLineParent();
  boolean isEmptyLine=isEmtpy(lineParent);
  comp.setNewLineStatus(isEmptyLine);
}",0.6666666666666666
69398,"private void synchronize(double height){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    SheetData lastData=cache.getColumnLastData(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    int span=lastData != null ? lastData.getRowSpanInDesign() : 0;
    if (span == 0 || (span == 1 && !isInContainer(lastData,rowContainer))) {
      maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
    }
  }
  int startRowIndex=rowContainer.getRowIndex();
  if (maxRowIndex == startRowIndex) {
    maxRowIndex++;
  }
  rowContainer.setRowIndex(maxRowIndex);
  double resize=height / (maxRowIndex - startRowIndex);
  for (int i=startRowIndex + 1; i <= maxRowIndex; i++) {
    cache.setRowHeight(i,resize);
  }
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    SheetData upstair=cache.getColumnLastData(currentColumnIndex);
    if (rowspan > 0) {
      if (upstair != null && canSpan(upstair,rowContainer)) {
        upstair.setRowSpan(rowspan);
        SheetData realData=getRealData(upstair);
        if (!isInContainer(upstair,rowContainer)) {
          realData.decreasRowSpanInDesign();
        }
        int rowIndex=upstair.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(upstair);
          blank.setRowIndex(rowIndex + p);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
 else     if (upstair.getRowSpanInDesign() > 0 && !isInContainer(upstair,rowContainer)) {
      upstair.decreasRowSpanInDesign();
    }
  }
}","private void synchronize(double height){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    SheetData lastData=cache.getColumnLastData(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    int span=lastData != null ? lastData.getRowSpanInDesign() : 0;
    if (span == 0 || (span == 1 && !isInContainer(lastData,rowContainer))) {
      maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
    }
  }
  int startRowIndex=rowContainer.getRowIndex();
  if (maxRowIndex == startRowIndex) {
    maxRowIndex++;
  }
  rowContainer.setRowIndex(maxRowIndex);
  double resize=height / (maxRowIndex - startRowIndex);
  for (int i=startRowIndex + 1; i <= maxRowIndex; i++) {
    cache.setRowHeight(i,resize);
  }
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    SheetData upstair=cache.getColumnLastData(currentColumnIndex);
    if (rowspan > 0) {
      if (upstair != null && canSpan(upstair,rowContainer)) {
        if (upstair.isBlank()) {
          SheetData real=getRealData(upstair);
          if (real.getRowIndex() != upstair.getRowIndex()) {
            upstair.setRowSpan(upstair.getRowSpan() + rowspan);
          }
        }
 else {
          upstair.setRowSpan(upstair.getRowSpan() + rowspan);
        }
        SheetData realData=getRealData(upstair);
        if (!isInContainer(upstair,rowContainer)) {
          realData.decreasRowSpanInDesign();
        }
        int rowIndex=upstair.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(upstair);
          blank.setRowIndex(rowIndex + p);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
 else     if (upstair.getRowSpanInDesign() > 0 && !isInContainer(upstair,rowContainer)) {
      upstair.decreasRowSpanInDesign();
    }
  }
}",0.8727885425442291
69399,"/** 
 */
private void createDropDownComponent(int iXLoc,int iYLoc){
  if (!bEnabled) {
    return;
  }
  int iShellHeight=170;
  int iShellWidth=190;
  if (bGradientEnabled) {
    iShellHeight+=30;
  }
  if (bImageEnabled) {
    iShellHeight+=30;
  }
  if (bAutoEnabled) {
    iShellHeight+=30;
  }
  if (bTransparentEnabled) {
    iShellHeight+=30;
  }
  if (bPositiveNegativeEnabled) {
    iShellHeight+=30;
  }
  Shell shell=new Shell(this.getShell(),SWT.NO_FOCUS);
  shell.setLayout(new FillLayout());
  shell.setSize(iShellWidth,iShellHeight);
  if ((getStyle() & SWT.RIGHT_TO_LEFT) != 0) {
    iXLoc-=iShellWidth;
  }
  shell.setLocation(iXLoc,iYLoc);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      clearColorSelection();
    }
  }
);
  cmpDropDown=new Composite(shell,SWT.NO_FOCUS);
  GridLayout glDropDown=new GridLayout();
  glDropDown.marginHeight=2;
  glDropDown.marginWidth=2;
  glDropDown.horizontalSpacing=1;
  glDropDown.verticalSpacing=4;
  cmpDropDown.setLayout(glDropDown);
  if (colorArray == null) {
    colorArray=createColorMap(getDisplay());
  }
  ColorSelectionCanvas cnv=new ColorSelectionCanvas(cmpDropDown,SWT.BORDER,colorArray);
  GridData gdCnv=new GridData(GridData.FILL_BOTH);
  gdCnv.heightHint=110;
  cnv.setLayoutData(gdCnv);
  cnv.addListener(SWT.Traverse,this);
  cnv.addListener(SWT.FocusOut,this);
  if (this.fCurrent instanceof ColorDefinition) {
    cnv.setColor(new Color(this.getDisplay(),((ColorDefinition)fCurrent).getRed(),((ColorDefinition)fCurrent).getGreen(),((ColorDefinition)fCurrent).getBlue()));
  }
  cmpButtons=new Composite(cmpDropDown,SWT.NO_FOCUS);
  GridLayout glButtons=new GridLayout();
  glButtons.marginHeight=3;
  glButtons.marginWidth=4;
  glButtons.horizontalSpacing=1;
  glButtons.verticalSpacing=4;
  glButtons.numColumns=2;
  cmpButtons.setLayout(glButtons);
  GridData gdButtons=new GridData(GridData.FILL_HORIZONTAL);
  cmpButtons.setLayoutData(gdButtons);
  GridLayout glTransparency=new GridLayout();
  glTransparency.numColumns=1;
  glTransparency.horizontalSpacing=5;
  glTransparency.verticalSpacing=3;
  glTransparency.marginHeight=4;
  glTransparency.marginWidth=0;
  Composite cmpTransparency=new Composite(cmpButtons,SWT.NONE | SWT.NO_FOCUS);
  GridData gdTransparency=new GridData(GridData.FILL_BOTH);
  gdTransparency.horizontalSpan=2;
  cmpTransparency.setLayoutData(gdTransparency);
  cmpTransparency.setLayout(glTransparency);
  if (bTransparencySliderEnable) {
    lblTransparency=new Label(cmpTransparency,SWT.NONE);
    GridData gdLBLTransparency=new GridData(GridData.FILL_HORIZONTAL);
    gdLBLTransparency.horizontalIndent=2;
    lblTransparency.setLayoutData(gdLBLTransparency);
    lblTransparency.setText(Messages.getString(""String_Node_Str""));
    srTransparency=new Slider(cmpTransparency,SWT.HORIZONTAL | SWT.NO_FOCUS);
    GridData gdTransparent=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
    gdTransparent.horizontalSpan=2;
    srTransparency.setLayoutData(gdTransparent);
    if (fCurrent == null) {
      srTransparency.setValues(0,0,256,1,1,10);
      srTransparency.setEnabled(false);
    }
 else {
      int iValue=0;
      if (fCurrent instanceof ColorDefinition) {
        iValue=((ColorDefinition)fCurrent).getTransparency();
        srTransparency.setValues(iValue,0,256,1,1,10);
      }
 else       if (fCurrent instanceof Gradient) {
        iValue=((Gradient)fCurrent).getTransparency();
        srTransparency.setValues(iValue,0,256,1,1,10);
      }
 else {
        srTransparency.setEnabled(false);
      }
    }
    lblTransparency.setText(new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{Integer.valueOf(srTransparency.getSelection())}));
    srTransparency.setToolTipText(String.valueOf(srTransparency.getSelection()));
    srTransparency.addSelectionListener(this);
    srTransparency.addListener(SWT.FocusOut,this);
    srTransparency.addListener(SWT.KeyDown,this);
    srTransparency.addListener(SWT.Traverse,this);
  }
  final int BUTTON_HEIGHTHINT=28;
  if (this.bTransparentEnabled) {
    btnReset=new Button(cmpButtons,SWT.NONE);
    GridData gdReset=new GridData(GridData.FILL_BOTH);
    gdReset.heightHint=BUTTON_HEIGHTHINT;
    gdReset.horizontalSpan=2;
    btnReset.setLayoutData(gdReset);
    btnReset.setText(Messages.getString(""String_Node_Str""));
    btnReset.addSelectionListener(this);
    btnReset.addListener(SWT.FocusOut,this);
    btnReset.addListener(SWT.KeyDown,this);
    btnReset.addListener(SWT.Traverse,this);
  }
  if (this.bAutoEnabled) {
    btnAuto=new Button(cmpButtons,SWT.NONE);
    GridData gdGradient=new GridData(GridData.FILL_BOTH);
    gdGradient.heightHint=BUTTON_HEIGHTHINT;
    gdGradient.horizontalSpan=2;
    btnAuto.setLayoutData(gdGradient);
    btnAuto.setText(Messages.getString(""String_Node_Str""));
    btnAuto.addSelectionListener(this);
    btnAuto.addListener(SWT.FocusOut,this);
    btnAuto.addListener(SWT.KeyDown,this);
    btnAuto.addListener(SWT.Traverse,this);
  }
  if (this.bGradientEnabled) {
    btnGradient=new Button(cmpButtons,SWT.NONE);
    GridData gdGradient=new GridData(GridData.FILL_BOTH);
    gdGradient.heightHint=BUTTON_HEIGHTHINT;
    gdGradient.horizontalSpan=2;
    btnGradient.setLayoutData(gdGradient);
    btnGradient.setText(Messages.getString(""String_Node_Str""));
    btnGradient.addSelectionListener(this);
    btnGradient.addListener(SWT.FocusOut,this);
    btnGradient.addListener(SWT.KeyDown,this);
    btnGradient.addListener(SWT.Traverse,this);
  }
  btnCustom=new Button(cmpButtons,SWT.NONE);
  GridData gdCustom=new GridData(GridData.FILL_BOTH);
  gdCustom.heightHint=BUTTON_HEIGHTHINT;
  gdCustom.horizontalSpan=2;
  btnCustom.setLayoutData(gdCustom);
  btnCustom.setText(Messages.getString(""String_Node_Str""));
  btnCustom.addSelectionListener(this);
  btnCustom.addListener(SWT.FocusOut,this);
  btnCustom.addListener(SWT.KeyDown,this);
  btnCustom.addListener(SWT.Traverse,this);
  if (this.bImageEnabled) {
    btnImage=new Button(cmpButtons,SWT.NONE);
    GridData gdImage=new GridData(GridData.FILL_BOTH);
    gdImage.heightHint=BUTTON_HEIGHTHINT;
    gdImage.horizontalSpan=2;
    btnImage.setLayoutData(gdImage);
    btnImage.setText(Messages.getString(""String_Node_Str""));
    btnImage.addSelectionListener(this);
    btnImage.addListener(SWT.FocusOut,this);
    btnImage.addListener(SWT.KeyDown,this);
    btnImage.addListener(SWT.Traverse,this);
  }
  if (this.bPositiveNegativeEnabled) {
    btnPN=new Button(cmpButtons,SWT.NONE);
    GridData gdPN=new GridData(GridData.FILL_BOTH);
    gdPN.heightHint=BUTTON_HEIGHTHINT;
    gdPN.horizontalSpan=2;
    btnPN.setLayoutData(gdPN);
    btnPN.setText(Messages.getString(""String_Node_Str""));
    btnPN.addSelectionListener(this);
    btnPN.addListener(SWT.FocusOut,this);
    btnPN.addListener(SWT.KeyDown,this);
    btnPN.addListener(SWT.Traverse,this);
  }
  shell.layout();
  shell.open();
}","/** 
 */
private void createDropDownComponent(int iXLoc,int iYLoc){
  if (!bEnabled) {
    return;
  }
  int iShellHeight=170;
  int iShellWidth=190;
  if (bGradientEnabled) {
    iShellHeight+=30;
  }
  if (bImageEnabled) {
    iShellHeight+=30;
  }
  if (bAutoEnabled) {
    iShellHeight+=30;
  }
  if (bTransparentEnabled) {
    iShellHeight+=30;
  }
  if (bPositiveNegativeEnabled) {
    iShellHeight+=30;
  }
  Shell shell=new Shell(this.getShell(),SWT.NO_FOCUS);
  shell.setLayout(new FillLayout());
  shell.setSize(iShellWidth,iShellHeight);
  if ((getStyle() & SWT.RIGHT_TO_LEFT) != 0) {
    iXLoc-=iShellWidth;
  }
  shell.setLocation(iXLoc,iYLoc);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      clearColorSelection();
    }
  }
);
  cmpDropDown=new Composite(shell,SWT.NO_FOCUS);
  GridLayout glDropDown=new GridLayout();
  glDropDown.marginHeight=2;
  glDropDown.marginWidth=2;
  glDropDown.horizontalSpacing=1;
  glDropDown.verticalSpacing=4;
  cmpDropDown.setLayout(glDropDown);
  if (colorArray == null) {
    colorArray=createColorMap(getDisplay());
  }
  ColorSelectionCanvas cnv=new ColorSelectionCanvas(cmpDropDown,SWT.BORDER,colorArray);
  GridData gdCnv=new GridData(GridData.FILL_BOTH);
  gdCnv.widthHint=190;
  gdCnv.heightHint=110;
  cnv.setLayoutData(gdCnv);
  cnv.addListener(SWT.Traverse,this);
  cnv.addListener(SWT.FocusOut,this);
  if (this.fCurrent instanceof ColorDefinition) {
    cnv.setColor(new Color(this.getDisplay(),((ColorDefinition)fCurrent).getRed(),((ColorDefinition)fCurrent).getGreen(),((ColorDefinition)fCurrent).getBlue()));
  }
  cmpButtons=new Composite(cmpDropDown,SWT.NO_FOCUS);
  GridLayout glButtons=new GridLayout();
  glButtons.marginHeight=3;
  glButtons.marginWidth=4;
  glButtons.horizontalSpacing=1;
  glButtons.verticalSpacing=4;
  glButtons.numColumns=2;
  cmpButtons.setLayout(glButtons);
  GridData gdButtons=new GridData(GridData.FILL_HORIZONTAL);
  cmpButtons.setLayoutData(gdButtons);
  GridLayout glTransparency=new GridLayout();
  glTransparency.numColumns=1;
  glTransparency.horizontalSpacing=5;
  glTransparency.verticalSpacing=3;
  glTransparency.marginHeight=4;
  glTransparency.marginWidth=0;
  Composite cmpTransparency=new Composite(cmpButtons,SWT.NONE | SWT.NO_FOCUS);
  GridData gdTransparency=new GridData(GridData.FILL_BOTH);
  gdTransparency.horizontalSpan=2;
  cmpTransparency.setLayoutData(gdTransparency);
  cmpTransparency.setLayout(glTransparency);
  if (bTransparencySliderEnable) {
    lblTransparency=new Label(cmpTransparency,SWT.NONE);
    GridData gdLBLTransparency=new GridData(GridData.FILL_HORIZONTAL);
    gdLBLTransparency.horizontalIndent=2;
    lblTransparency.setLayoutData(gdLBLTransparency);
    lblTransparency.setText(Messages.getString(""String_Node_Str""));
    srTransparency=new Slider(cmpTransparency,SWT.HORIZONTAL | SWT.NO_FOCUS);
    GridData gdTransparent=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
    gdTransparent.horizontalSpan=2;
    srTransparency.setLayoutData(gdTransparent);
    if (fCurrent == null) {
      srTransparency.setValues(0,0,256,1,1,10);
      srTransparency.setEnabled(false);
    }
 else {
      int iValue=0;
      if (fCurrent instanceof ColorDefinition) {
        iValue=((ColorDefinition)fCurrent).getTransparency();
        srTransparency.setValues(iValue,0,256,1,1,10);
      }
 else       if (fCurrent instanceof Gradient) {
        iValue=((Gradient)fCurrent).getTransparency();
        srTransparency.setValues(iValue,0,256,1,1,10);
      }
 else {
        srTransparency.setEnabled(false);
      }
    }
    lblTransparency.setText(new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{Integer.valueOf(srTransparency.getSelection())}));
    srTransparency.setToolTipText(String.valueOf(srTransparency.getSelection()));
    srTransparency.addSelectionListener(this);
    srTransparency.addListener(SWT.FocusOut,this);
    srTransparency.addListener(SWT.KeyDown,this);
    srTransparency.addListener(SWT.Traverse,this);
  }
  final int BUTTON_HEIGHTHINT=28;
  if (this.bTransparentEnabled) {
    btnReset=new Button(cmpButtons,SWT.NONE);
    GridData gdReset=new GridData(GridData.FILL_BOTH);
    gdReset.heightHint=BUTTON_HEIGHTHINT;
    gdReset.horizontalSpan=2;
    btnReset.setLayoutData(gdReset);
    btnReset.setText(Messages.getString(""String_Node_Str""));
    btnReset.addSelectionListener(this);
    btnReset.addListener(SWT.FocusOut,this);
    btnReset.addListener(SWT.KeyDown,this);
    btnReset.addListener(SWT.Traverse,this);
  }
  if (this.bAutoEnabled) {
    btnAuto=new Button(cmpButtons,SWT.NONE);
    GridData gdGradient=new GridData(GridData.FILL_BOTH);
    gdGradient.heightHint=BUTTON_HEIGHTHINT;
    gdGradient.horizontalSpan=2;
    btnAuto.setLayoutData(gdGradient);
    btnAuto.setText(Messages.getString(""String_Node_Str""));
    btnAuto.addSelectionListener(this);
    btnAuto.addListener(SWT.FocusOut,this);
    btnAuto.addListener(SWT.KeyDown,this);
    btnAuto.addListener(SWT.Traverse,this);
  }
  if (this.bGradientEnabled) {
    btnGradient=new Button(cmpButtons,SWT.NONE);
    GridData gdGradient=new GridData(GridData.FILL_BOTH);
    gdGradient.heightHint=BUTTON_HEIGHTHINT;
    gdGradient.horizontalSpan=2;
    btnGradient.setLayoutData(gdGradient);
    btnGradient.setText(Messages.getString(""String_Node_Str""));
    btnGradient.addSelectionListener(this);
    btnGradient.addListener(SWT.FocusOut,this);
    btnGradient.addListener(SWT.KeyDown,this);
    btnGradient.addListener(SWT.Traverse,this);
  }
  btnCustom=new Button(cmpButtons,SWT.NONE);
  GridData gdCustom=new GridData(GridData.FILL_BOTH);
  gdCustom.heightHint=BUTTON_HEIGHTHINT;
  gdCustom.horizontalSpan=2;
  btnCustom.setLayoutData(gdCustom);
  btnCustom.setText(Messages.getString(""String_Node_Str""));
  btnCustom.addSelectionListener(this);
  btnCustom.addListener(SWT.FocusOut,this);
  btnCustom.addListener(SWT.KeyDown,this);
  btnCustom.addListener(SWT.Traverse,this);
  if (this.bImageEnabled) {
    btnImage=new Button(cmpButtons,SWT.NONE);
    GridData gdImage=new GridData(GridData.FILL_BOTH);
    gdImage.heightHint=BUTTON_HEIGHTHINT;
    gdImage.horizontalSpan=2;
    btnImage.setLayoutData(gdImage);
    btnImage.setText(Messages.getString(""String_Node_Str""));
    btnImage.addSelectionListener(this);
    btnImage.addListener(SWT.FocusOut,this);
    btnImage.addListener(SWT.KeyDown,this);
    btnImage.addListener(SWT.Traverse,this);
  }
  if (this.bPositiveNegativeEnabled) {
    btnPN=new Button(cmpButtons,SWT.NONE);
    GridData gdPN=new GridData(GridData.FILL_BOTH);
    gdPN.heightHint=BUTTON_HEIGHTHINT;
    gdPN.horizontalSpan=2;
    btnPN.setLayoutData(gdPN);
    btnPN.setText(Messages.getString(""String_Node_Str""));
    btnPN.addSelectionListener(this);
    btnPN.addListener(SWT.FocusOut,this);
    btnPN.addListener(SWT.KeyDown,this);
    btnPN.addListener(SWT.Traverse,this);
  }
  shell.pack();
  shell.layout();
  shell.open();
}",0.997210100865584
69400,"/** 
 * @param handle
 * @return
 */
public int getBackgroundImageHeight(DesignElementHandle handle){
  DimensionHandle obj=handle.getDimensionProperty(StyleHandle.BACKGROUND_SIZE_HEIGHT);
  if (obj == null || obj.getUnits() == null || obj.getUnits().length() == 0) {
    return 0;
  }
  int fontSize=DEUtil.getFontSizeIntValue(getHandle());
  double py=0;
  py=DEUtil.convertToPixel(obj,fontSize);
  return (int)py;
}","/** 
 * @param handle
 * @return
 */
public int getBackgroundImageHeight(DesignElementHandle handle,Dimension size,Image image){
  DimensionHandle obj=handle.getDimensionProperty(StyleHandle.BACKGROUND_SIZE_HEIGHT);
  if (obj == null || obj.getUnits() == null || obj.getUnits().length() == 0) {
    if (image == null) {
      return 0;
    }
    String str=handle.getStringProperty(StyleHandle.BACKGROUND_SIZE_WIDTH);
    if (DesignChoiceConstants.BACKGROUND_SIZE_CONTAIN.equals(str)) {
      Dimension imageSize=new Dimension(image);
      if (((double)imageSize.width / ((double)imageSize.height)) > ((double)size.width / ((double)size.height))) {
        double value=((double)imageSize.height * ((double)size.width) / ((double)imageSize.width));
        return (int)value;
      }
 else {
        return size.height;
      }
    }
 else     if (DesignChoiceConstants.BACKGROUND_SIZE_COVER.equals(str)) {
      return size.height;
    }
    return 0;
  }
  int fontSize=DEUtil.getFontSizeIntValue(getHandle());
  double py=0;
  py=DEUtil.convertToPixel(obj,fontSize);
  return (int)py;
}",0.5543766578249337
69401,"/** 
 * @param handle
 * @return
 */
public int getBackgroundImageWidth(DesignElementHandle handle){
  DimensionHandle obj=handle.getDimensionProperty(StyleHandle.BACKGROUND_SIZE_WIDTH);
  if (obj == null || obj.getUnits() == null || obj.getUnits().length() == 0) {
    return 0;
  }
  int fontSize=DEUtil.getFontSizeIntValue(getHandle());
  double px=0;
  px=DEUtil.convertToPixel(obj,fontSize);
  return (int)px;
}","/** 
 * @param handle
 * @return
 */
public int getBackgroundImageWidth(DesignElementHandle handle,Dimension size,Image image){
  DimensionHandle obj=handle.getDimensionProperty(StyleHandle.BACKGROUND_SIZE_WIDTH);
  if (obj == null || obj.getUnits() == null || obj.getUnits().length() == 0) {
    if (image == null) {
      return 0;
    }
    String str=handle.getStringProperty(StyleHandle.BACKGROUND_SIZE_WIDTH);
    if (DesignChoiceConstants.BACKGROUND_SIZE_CONTAIN.equals(str)) {
      Dimension imageSize=new Dimension(image);
      if (((double)imageSize.width / ((double)imageSize.height)) > ((double)size.width / ((double)size.height))) {
        return size.width;
      }
 else {
        double value=((double)imageSize.width * ((double)size.height) / ((double)imageSize.height));
        return (int)value;
      }
    }
 else     if (DesignChoiceConstants.BACKGROUND_SIZE_COVER.equals(str)) {
      return size.width;
    }
    return 0;
  }
  int fontSize=DEUtil.getFontSizeIntValue(getHandle());
  double px=0;
  px=DEUtil.convertToPixel(obj,fontSize);
  return (int)px;
}",0.5535595475715236
69402,"public void refreshFigure(){
  int color=getBackgroundColor((MasterPageHandle)getModel());
  getFigure().setBackgroundColor(getBackGroundColor(color));
  Dimension size=getMasterPageSize((MasterPageHandle)getModel());
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
  ReportDesignMarginBorder reportDesignMarginBorder=new ReportDesignMarginBorder(getMasterPageInsets((MasterPageHandle)getModel()));
  reportDesignMarginBorder.setBackgroundColor(((MasterPageHandle)getModel()).getPropertyHandle(StyleHandle.BACKGROUND_COLOR_PROP).getIntValue());
  refreshMarginBorder(reportDesignMarginBorder);
  refreshBackground((MasterPageHandle)getModel());
  ((ReportElementFigure)getFigure()).setBackGroundImageSize(getModelAdapter().getBackgroundImageWidth((MasterPageHandle)getModel()),getModelAdapter().getBackgroundImageHeight((MasterPageHandle)getModel()));
}","public void refreshFigure(){
  int color=getBackgroundColor((MasterPageHandle)getModel());
  getFigure().setBackgroundColor(getBackGroundColor(color));
  Dimension size=getMasterPageSize((MasterPageHandle)getModel());
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
  ReportDesignMarginBorder reportDesignMarginBorder=new ReportDesignMarginBorder(getMasterPageInsets((MasterPageHandle)getModel()));
  reportDesignMarginBorder.setBackgroundColor(((MasterPageHandle)getModel()).getPropertyHandle(StyleHandle.BACKGROUND_COLOR_PROP).getIntValue());
  refreshMarginBorder(reportDesignMarginBorder);
  refreshBackground((MasterPageHandle)getModel());
  ((ReportElementFigure)getFigure()).setBackGroundImageSize(getModelAdapter().getBackgroundImageWidth((MasterPageHandle)getModel(),size,getBackImage((MasterPageHandle)getModel())),getModelAdapter().getBackgroundImageHeight((MasterPageHandle)getModel(),size,getBackImage((MasterPageHandle)getModel())));
}",0.9272183449651048
69403,"public void refreshFigure(){
  SimpleMasterPageHandle masterPageHandle=getSimpleMasterPageHandle();
  Dimension size=getMasterPageSize(masterPageHandle);
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  ReportRootFigure figure=(ReportRootFigure)getFigure();
  figure.setShowMargin(showMargin);
  ((ReportDesignLayout)(figure.getLayoutManager())).setAuto(DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(((ReportDesignHandle)getModel()).getLayoutPreference()));
  ((ReportDesignLayout)(figure.getLayoutManager())).setAuto(DesignChoiceConstants.BIDI_DIRECTION_LTR.equals(((ReportDesignHandle)getModel()).getBidiOrientation()));
  if (!showMargin) {
    Insets mg=getMasterPageInsets(masterPageHandle);
    bounds.width-=mg.getWidth();
    bounds.height-=mg.getHeight();
  }
  Insets initInsets=getMasterPageInsets(masterPageHandle);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitInsets(initInsets);
  refreshMarginBorder((ReportDesignMarginBorder)getFigure().getBorder());
  int color=getBackgroundColor(masterPageHandle);
  getFigure().setBackgroundColor(getBackGroundColor(color));
  refreshBackground(masterPageHandle);
  ((ReportElementFigure)getFigure()).setBackGroundImageSize(getModelAdapter().getBackgroundImageWidth(masterPageHandle),getModelAdapter().getBackgroundImageHeight(masterPageHandle));
}","public void refreshFigure(){
  SimpleMasterPageHandle masterPageHandle=getSimpleMasterPageHandle();
  Dimension size=getMasterPageSize(masterPageHandle);
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  ReportRootFigure figure=(ReportRootFigure)getFigure();
  figure.setShowMargin(showMargin);
  ((ReportDesignLayout)(figure.getLayoutManager())).setAuto(DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(((ReportDesignHandle)getModel()).getLayoutPreference()));
  ((ReportDesignLayout)(figure.getLayoutManager())).setAuto(DesignChoiceConstants.BIDI_DIRECTION_LTR.equals(((ReportDesignHandle)getModel()).getBidiOrientation()));
  if (!showMargin) {
    Insets mg=getMasterPageInsets(masterPageHandle);
    bounds.width-=mg.getWidth();
    bounds.height-=mg.getHeight();
  }
  Insets initInsets=getMasterPageInsets(masterPageHandle);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitInsets(initInsets);
  refreshMarginBorder((ReportDesignMarginBorder)getFigure().getBorder());
  int color=getBackgroundColor(masterPageHandle);
  getFigure().setBackgroundColor(getBackGroundColor(color));
  refreshBackground(masterPageHandle);
  ((ReportElementFigure)getFigure()).setBackGroundImageSize(getModelAdapter().getBackgroundImageWidth(masterPageHandle,size,getBackImage(masterPageHandle)),getModelAdapter().getBackgroundImageHeight(masterPageHandle,size,getBackImage(masterPageHandle)));
}",0.975016880486158
69404,"private void advance() throws OLAPException {
switch (currentState) {
case STATE_INIT:
case STATE_ROW_EDGE:
    if (rowGroups.size() > 0) {
      for (int i=groupIndex; i < rowGroups.size(); i++) {
        EdgeGroup group=(EdgeGroup)rowGroups.get(i);
        groupIndex++;
        dimensionIndex=group.dimensionIndex;
        levelIndex=group.levelIndex;
        currentState=STATE_ROW_EDGE;
        return;
      }
    }
  if (mCount > 0 && isVerticalMeasure && !isHideMeasureHeader) {
    for (int i=0; i < mCount; i++) {
      MeasureViewHandle mv=crosstabItem.getMeasure(i);
      if (mv.getHeader() != null) {
        currentState=STATE_MEASURE_HEADER;
        return;
      }
    }
  }
case STATE_MEASURE_HEADER:
inProcessingGrandTotalBefore=columnGroups.size() > 0 && columnEdgeCursor != null && crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE) != null && GRAND_TOTAL_LOCATION_BEFORE.equals(crosstabItem.getCrosstabView(COLUMN_AXIS_TYPE).getGrandTotalLocation());
case STATE_PENDING_CHECK_COLUMN_EDGE:
if (!inProcessingGrandTotalBefore && columnGroups.size() > 0 && columnEdgeCursor != null) {
columnDimensionCursors=columnEdgeCursor.getDimensionCursor();
columnEdgeCursor.beforeFirst();
hasNext=columnEdgeCursor.next();
columnProcessed=false;
groupIndex=0;
measureIndex=-1;
tmpStartGroupIndex=0;
tmpEndGroupIndex=lastColumnGroupIndex;
}
case STATE_COLUMN_TOTAL_BEFORE:
case STATE_COLUMN_TOTAL_AFTER:
case STATE_COLUMN_EDGE:
if (!inProcessingGrandTotalBefore && columnGroups.size() > 0 && columnEdgeCursor != null) {
while (hasNext) {
if (mCount > 0 || !IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE) {
  for (int i=tmpStartGroupIndex; i < columnGroups.size(); i++) {
    EdgeGroup group=(EdgeGroup)columnGroups.get(i);
    if (!GroupUtil.isLeafGroup(columnDimensionCursors,i)) {
      DimensionCursor dc=(DimensionCursor)columnDimensionCursors.get(i);
      if (dc.getEdgeStart() == columnEdgeCursor.getPosition()) {
        LevelViewHandle lv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,group.dimensionIndex).getLevel(group.levelIndex);
        if (lv.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_BEFORE.equals(lv.getAggregationHeaderLocation())) {
          if (mCount > 0 && !isVerticalMeasure) {
            for (int m=measureIndex + 1; m < mCount; m++) {
              if (GroupUtil.hasTotalContent(crosstabItem,COLUMN_AXIS_TYPE,group.dimensionIndex,group.levelIndex,m)) {
                tmpStartGroupIndex=i;
                dimensionIndex=group.dimensionIndex;
                levelIndex=group.levelIndex;
                measureIndex=m;
                currentState=STATE_COLUMN_TOTAL_BEFORE;
                return;
              }
            }
            measureIndex=-1;
          }
 else           if (GroupUtil.hasTotalContent(crosstabItem,COLUMN_AXIS_TYPE,group.dimensionIndex,group.levelIndex,-1)) {
            tmpStartGroupIndex=i + 1;
            dimensionIndex=group.dimensionIndex;
            levelIndex=group.levelIndex;
            currentState=STATE_COLUMN_TOTAL_BEFORE;
            return;
          }
        }
      }
    }
  }
  tmpStartGroupIndex=columnGroups.size();
}
if (currentState != STATE_COLUMN_EDGE && currentState != STATE_COLUMN_TOTAL_AFTER) {
  measureIndex=-1;
}
if (!columnProcessed) {
  if (mCount > 0 && !isVerticalMeasure) {
    for (int m=measureIndex + 1; m < mCount; m++) {
      measureIndex=m;
      currentState=STATE_COLUMN_EDGE;
      return;
    }
  }
 else   if (measureIndex == -1) {
    measureIndex--;
    currentState=STATE_COLUMN_EDGE;
    return;
  }
  columnProcessed=true;
}
if (mCount > 0 || !IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE) {
  if (currentState != STATE_COLUMN_TOTAL_AFTER) {
    measureIndex=-1;
  }
  for (int i=tmpEndGroupIndex; i >= 0; i--) {
    EdgeGroup group=(EdgeGroup)columnGroups.get(i);
    if (!GroupUtil.isLeafGroup(columnDimensionCursors,i)) {
      DimensionCursor dc=(DimensionCursor)columnDimensionCursors.get(i);
      if (dc.getEdgeEnd() == columnEdgeCursor.getPosition()) {
        LevelViewHandle lv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,group.dimensionIndex).getLevel(group.levelIndex);
        if (lv.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_AFTER.equals(lv.getAggregationHeaderLocation())) {
          if (mCount > 0 && !isVerticalMeasure) {
            for (int m=measureIndex + 1; m < mCount; m++) {
              if (GroupUtil.hasTotalContent(crosstabItem,COLUMN_AXIS_TYPE,group.dimensionIndex,group.levelIndex,m)) {
                tmpEndGroupIndex=i;
                dimensionIndex=group.dimensionIndex;
                levelIndex=group.levelIndex;
                measureIndex=m;
                currentState=STATE_COLUMN_TOTAL_AFTER;
                return;
              }
            }
            measureIndex=-1;
          }
 else           if (GroupUtil.hasTotalContent(crosstabItem,COLUMN_AXIS_TYPE,group.dimensionIndex,group.levelIndex,-1)) {
            tmpEndGroupIndex=i - 1;
            dimensionIndex=group.dimensionIndex;
            levelIndex=group.levelIndex;
            currentState=STATE_COLUMN_TOTAL_AFTER;
            return;
          }
        }
      }
    }
  }
}
hasNext=columnEdgeCursor.next();
columnProcessed=false;
tmpStartGroupIndex=0;
tmpEndGroupIndex=lastColumnGroupIndex;
measureIndex=-1;
}
if (crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE) != null && GRAND_TOTAL_LOCATION_BEFORE.equals(crosstabItem.getCrosstabView(COLUMN_AXIS_TYPE).getGrandTotalLocation())) {
currentState=STATE_END;
return;
}
}
measureIndex=-1;
case STATE_GRAND_TOTAL:
if (columnGroups.size() > 0 && columnEdgeCursor != null) {
if (crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE) != null) {
if (mCount > 0 || !IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE) {
if (mCount > 0 && !isVerticalMeasure) {
for (int i=measureIndex + 1; i < mCount; i++) {
  if (GroupUtil.hasTotalContent(crosstabItem,COLUMN_AXIS_TYPE,-1,-1,i)) {
    measureIndex=i;
    currentState=STATE_GRAND_TOTAL;
    return;
  }
}
}
 else if (currentState != STATE_GRAND_TOTAL) {
if (GroupUtil.hasTotalContent(crosstabItem,COLUMN_AXIS_TYPE,-1,-1,-1)) {
  currentState=STATE_GRAND_TOTAL;
  return;
}
}
}
if (inProcessingGrandTotalBefore) {
inProcessingGrandTotalBefore=false;
currentState=STATE_PENDING_CHECK_COLUMN_EDGE;
return;
}
}
currentState=STATE_END;
return;
}
case STATE_MEASURE:
if (!isVerticalMeasure) {
for (int i=measureIndex + 1; i < mCount; i++) {
measureIndex=i;
currentState=STATE_MEASURE;
return;
}
}
 else if (measureIndex == -1) {
measureIndex--;
currentState=STATE_MEASURE;
return;
}
currentState=STATE_END;
return;
}
}","private void advance() throws OLAPException {
switch (currentState) {
case STATE_INIT:
case STATE_ROW_EDGE:
    if (rowGroups.size() > 0) {
      for (int i=groupIndex; i < rowGroups.size(); i++) {
        EdgeGroup group=(EdgeGroup)rowGroups.get(i);
        groupIndex++;
        dimensionIndex=group.dimensionIndex;
        levelIndex=group.levelIndex;
        currentState=STATE_ROW_EDGE;
        return;
      }
    }
  if (mCount > 0 && isVerticalMeasure && !isHideMeasureHeader) {
    for (int i=0; i < mCount; i++) {
      MeasureViewHandle mv=crosstabItem.getMeasure(i);
      if (mv.getHeader() != null) {
        currentState=STATE_MEASURE_HEADER;
        return;
      }
    }
  }
case STATE_MEASURE_HEADER:
inProcessingGrandTotalBefore=columnGroups.size() > 0 && columnEdgeCursor != null && crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE) != null && GRAND_TOTAL_LOCATION_BEFORE.equals(crosstabItem.getCrosstabView(COLUMN_AXIS_TYPE).getGrandTotalLocation());
case STATE_PENDING_CHECK_COLUMN_EDGE:
if (!inProcessingGrandTotalBefore && columnGroups.size() > 0 && columnEdgeCursor != null) {
columnDimensionCursors=columnEdgeCursor.getDimensionCursor();
columnEdgeCursor.beforeFirst();
hasNext=columnEdgeCursor.next();
columnProcessed=false;
groupIndex=0;
measureIndex=-1;
tmpStartGroupIndex=0;
tmpEndGroupIndex=lastColumnGroupIndex;
}
case STATE_COLUMN_TOTAL_BEFORE:
case STATE_COLUMN_TOTAL_AFTER:
case STATE_COLUMN_EDGE:
if (!inProcessingGrandTotalBefore && columnGroups.size() > 0 && columnEdgeCursor != null) {
while (hasNext) {
if (mCount > 0 || !IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE) {
  for (int i=tmpStartGroupIndex; i < columnGroups.size(); i++) {
    EdgeGroup group=(EdgeGroup)columnGroups.get(i);
    if (!GroupUtil.isLeafGroup(columnDimensionCursors,i)) {
      DimensionCursor dc=(DimensionCursor)columnDimensionCursors.get(i);
      if (dc.getEdgeStart() == columnEdgeCursor.getPosition()) {
        LevelViewHandle lv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,group.dimensionIndex).getLevel(group.levelIndex);
        if (lv.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_BEFORE.equals(lv.getAggregationHeaderLocation())) {
          if (mCount > 0 && !isVerticalMeasure) {
            for (int m=measureIndex + 1; m < mCount; m++) {
              if (GroupUtil.hasTotalContent(crosstabItem,COLUMN_AXIS_TYPE,group.dimensionIndex,group.levelIndex,m)) {
                tmpStartGroupIndex=i;
                dimensionIndex=group.dimensionIndex;
                levelIndex=group.levelIndex;
                measureIndex=m;
                currentState=STATE_COLUMN_TOTAL_BEFORE;
                return;
              }
            }
            measureIndex=-1;
          }
 else           if (GroupUtil.hasTotalContent(crosstabItem,COLUMN_AXIS_TYPE,group.dimensionIndex,group.levelIndex,-1)) {
            tmpStartGroupIndex=i + 1;
            dimensionIndex=group.dimensionIndex;
            levelIndex=group.levelIndex;
            currentState=STATE_COLUMN_TOTAL_BEFORE;
            return;
          }
        }
      }
    }
  }
  tmpStartGroupIndex=columnGroups.size();
}
if (currentState != STATE_COLUMN_EDGE && currentState != STATE_COLUMN_TOTAL_AFTER) {
  measureIndex=-1;
}
if (!columnProcessed) {
  if (mCount > 0 && !isVerticalMeasure) {
    for (int m=measureIndex + 1; m < mCount; m++) {
      measureIndex=m;
      currentState=STATE_COLUMN_EDGE;
      return;
    }
  }
 else   if (measureIndex == -1) {
    measureIndex--;
    currentState=STATE_COLUMN_EDGE;
    return;
  }
  columnProcessed=true;
}
if (mCount > 0 || !IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE) {
  if (currentState != STATE_COLUMN_TOTAL_AFTER) {
    measureIndex=-1;
  }
  for (int i=tmpEndGroupIndex; i >= 0; i--) {
    EdgeGroup group=(EdgeGroup)columnGroups.get(i);
    if (!GroupUtil.isLeafGroup(columnDimensionCursors,i)) {
      DimensionCursor dc=(DimensionCursor)columnDimensionCursors.get(i);
      if (dc.getEdgeEnd() == columnEdgeCursor.getPosition()) {
        LevelViewHandle lv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,group.dimensionIndex).getLevel(group.levelIndex);
        if (lv.getAggregationHeader() != null && AGGREGATION_HEADER_LOCATION_AFTER.equals(lv.getAggregationHeaderLocation())) {
          if (mCount > 0 && !isVerticalMeasure) {
            for (int m=measureIndex + 1; m < mCount; m++) {
              if (GroupUtil.hasTotalContent(crosstabItem,COLUMN_AXIS_TYPE,group.dimensionIndex,group.levelIndex,m)) {
                tmpEndGroupIndex=i;
                dimensionIndex=group.dimensionIndex;
                levelIndex=group.levelIndex;
                measureIndex=m;
                currentState=STATE_COLUMN_TOTAL_AFTER;
                return;
              }
            }
            measureIndex=-1;
          }
 else           if (GroupUtil.hasTotalContent(crosstabItem,COLUMN_AXIS_TYPE,group.dimensionIndex,group.levelIndex,-1)) {
            tmpEndGroupIndex=i - 1;
            dimensionIndex=group.dimensionIndex;
            levelIndex=group.levelIndex;
            currentState=STATE_COLUMN_TOTAL_AFTER;
            return;
          }
        }
      }
    }
  }
}
hasNext=columnEdgeCursor.next();
columnProcessed=false;
tmpStartGroupIndex=0;
tmpEndGroupIndex=lastColumnGroupIndex;
measureIndex=-1;
}
if (crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE) != null && GRAND_TOTAL_LOCATION_BEFORE.equals(crosstabItem.getCrosstabView(COLUMN_AXIS_TYPE).getGrandTotalLocation())) {
currentState=STATE_END;
return;
}
}
measureIndex=-1;
case STATE_GRAND_TOTAL:
if (columnGroups.size() > 0 && columnEdgeCursor != null) {
if (crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE) != null) {
if (mCount > 0 || !IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE) {
if (mCount > 0 && !isVerticalMeasure) {
for (int i=measureIndex + 1; i < mCount; i++) {
  if (GroupUtil.hasTotalContent(crosstabItem,COLUMN_AXIS_TYPE,-1,-1,i)) {
    measureIndex=i;
    currentState=STATE_GRAND_TOTAL;
    return;
  }
}
}
 else if (currentState != STATE_GRAND_TOTAL) {
if (GroupUtil.hasTotalContent(crosstabItem,COLUMN_AXIS_TYPE,-1,-1,-1)) {
  currentState=STATE_GRAND_TOTAL;
  return;
}
}
}
if (inProcessingGrandTotalBefore) {
inProcessingGrandTotalBefore=false;
currentState=STATE_PENDING_CHECK_COLUMN_EDGE;
return;
}
}
currentState=STATE_END;
return;
}
case STATE_MEASURE:
if (!isVerticalMeasure) {
for (int i=measureIndex + 1; i < mCount; i++) {
measureIndex=i;
currentState=STATE_MEASURE;
return;
}
}
 else if (measureIndex == -1 && mCount > 0) {
measureIndex--;
currentState=STATE_MEASURE;
return;
}
currentState=STATE_END;
return;
}
}",0.9989298272435408
69405,"public IReportItemExecutor getNextChild(){
  IReportItemExecutor nextExecutor=null;
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
        if (blankStarted && ev.type != ColumnEvent.ROW_EDGE_CHANGE) {
          nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
          ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
          blankStarted=false;
          hasLast=false;
        }
      break;
  }
  if (!blankStarted && (ev.type == ColumnEvent.ROW_EDGE_CHANGE)) {
    blankStarted=true;
    rowSpan=1;
    colSpan=0;
    hasLast=true;
  }
  currentEdgePosition=ev.dataPosition;
  currentChangeType=ev.type;
  colSpan++;
  currentColIndex++;
  if (nextExecutor != null) {
    return nextExecutor;
  }
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
if (blankStarted) {
  nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
  ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
  blankStarted=false;
}
}
return nextExecutor;
}","public IReportItemExecutor getNextChild(){
  IReportItemExecutor nextExecutor=null;
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
case ColumnEvent.MEASURE_HEADER_CHANGE:
        if (blankStarted && ev.type != ColumnEvent.ROW_EDGE_CHANGE && ev.type != ColumnEvent.MEASURE_HEADER_CHANGE) {
          nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
          ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
          blankStarted=false;
          hasLast=false;
        }
      break;
  }
  if (!blankStarted && (ev.type == ColumnEvent.ROW_EDGE_CHANGE)) {
    blankStarted=true;
    rowSpan=1;
    colSpan=0;
    hasLast=true;
  }
 else   if (!emptyStarted && ev.type != ColumnEvent.ROW_EDGE_CHANGE && ev.type != ColumnEvent.MEASURE_HEADER_CHANGE) {
    emptyStarted=true;
    rowSpan=1;
    colSpan=0;
    hasLast=true;
  }
  currentEdgePosition=ev.dataPosition;
  currentChangeType=ev.type;
  colSpan++;
  currentColIndex++;
  if (nextExecutor != null) {
    return nextExecutor;
  }
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
if (blankStarted) {
  nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
  ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
  blankStarted=false;
}
 else if (emptyStarted) {
  nextExecutor=new CrosstabCellExecutor(this,null,rowSpan,colSpan,currentColIndex - colSpan + 1);
  ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
  emptyStarted=false;
}
}
return nextExecutor;
}",0.8211355431572038
69406,"private void prepareChildren(){
  currentChangeType=ColumnEvent.UNKNOWN_CHANGE;
  currentColIndex=-1;
  currentEdgePosition=-1;
  blankStarted=false;
  rowSpan=1;
  colSpan=0;
  hasLast=false;
  walker.reload();
}","private void prepareChildren(){
  currentChangeType=ColumnEvent.UNKNOWN_CHANGE;
  currentColIndex=-1;
  currentEdgePosition=-1;
  blankStarted=false;
  emptyStarted=false;
  rowSpan=1;
  colSpan=0;
  hasLast=false;
  walker.reload();
}",0.9508928571428572
69407,"protected boolean layoutNodes() throws BirtException {
  boolean hasNext=false;
  if (childLayout != null) {
    hasNext=childLayout.layout();
    if (childLayout.isFinished()) {
      childLayout.close();
      childExecutor.close();
      childLayout=null;
      childExecutor=null;
    }
    if (hasNext) {
      return true;
    }
  }
  while (executor.hasNextChild() && !context.getCancelFlag()) {
    childExecutor=(IReportItemExecutor)executor.getNextChild();
    IContent childContent=childExecutor.execute();
    if (childContent != null) {
      childLayout=engine.createLayoutManager(this,childContent,childExecutor,emitter);
      hasNext=childLayout.layout();
      if (!executor.hasNextChild()) {
        childContent.setLastChild(true);
      }
 else {
        childContent.setLastChild(false);
      }
      if (hasNext) {
        if (childLayout.isFinished()) {
          childLayout.close();
          childExecutor.close();
          childLayout=null;
          childExecutor=null;
        }
        return true;
      }
      childLayout.close();
      childLayout=null;
    }
    childExecutor.close();
    childExecutor=null;
  }
  return false;
}","protected boolean layoutNodes() throws BirtException {
  boolean hasNext=false;
  if (childLayout != null) {
    hasNext=childLayout.layout();
    if (childLayout.isFinished()) {
      childLayout.close();
      childExecutor.close();
      childLayout=null;
      childExecutor=null;
    }
    if (hasNext) {
      return true;
    }
  }
  while (executor.hasNextChild() && !context.getCancelFlag()) {
    childExecutor=(IReportItemExecutor)executor.getNextChild();
    childContent=childExecutor.execute();
    if (childContent != null) {
      childLayout=engine.createLayoutManager(this,childContent,childExecutor,emitter);
      hasNext=childLayout.layout();
      if (hasNext) {
        if (childLayout.isFinished()) {
          childLayout.close();
          childExecutor.close();
          childLayout=null;
          childExecutor=null;
        }
        return true;
      }
      childLayout.close();
      childLayout=null;
    }
    childExecutor.close();
    childExecutor=null;
  }
  if (childContent != null) {
    childContent.setLastChild(true);
  }
  return false;
}",0.4904656319290466
69408,"private void initalizeChildren() throws BirtException {
  while (executor.hasNextChild()) {
    IReportItemExecutor childExecutor=(IReportItemExecutor)executor.getNextChild();
    IContent childContent=childExecutor.execute();
    if (childContent == null) {
      childrenLayouts.add(null);
    }
 else {
      if (!executor.hasNextChild()) {
        childContent.setLastChild(true);
      }
 else {
        childContent.setLastChild(false);
      }
      ILayoutManager childLayout=engine.createLayoutManager(this,childContent,childExecutor,emitter);
      childrenLayouts.add(childLayout);
    }
    childrenExecutors.add(childExecutor);
    childrenFinished.add(Boolean.FALSE);
  }
}","private void initalizeChildren() throws BirtException {
  IContent childContent=null;
  while (executor.hasNextChild()) {
    IReportItemExecutor childExecutor=(IReportItemExecutor)executor.getNextChild();
    childContent=childExecutor.execute();
    if (childContent == null) {
      childrenLayouts.add(null);
    }
 else {
      ILayoutManager childLayout=engine.createLayoutManager(this,childContent,childExecutor,emitter);
      childrenLayouts.add(childLayout);
    }
    childrenExecutors.add(childExecutor);
    childrenFinished.add(Boolean.FALSE);
  }
  if (childContent != null) {
    childContent.setLastChild(true);
  }
}",0.8069644208932627
69409,"protected boolean layoutNodes() throws BirtException {
  boolean hasNext=false;
  if (childLayout != null) {
    hasNext=childLayout.layout();
    if (childLayout.isFinished()) {
      childLayout.close();
      childExecutor.close();
      childLayout=null;
      childExecutor=null;
    }
    if (hasNext) {
      return true;
    }
  }
  while (executor.hasNextChild() && !context.getCancelFlag()) {
    childExecutor=(IReportItemExecutor)executor.getNextChild();
    IContent childContent=childExecutor.execute();
    if (childContent != null) {
      childLayout=engine.createLayoutManager(this,childContent,childExecutor,emitter);
      hasNext=childLayout.layout();
      if (hasNext) {
        if (childLayout.isFinished()) {
          childLayout.close();
          childExecutor.close();
          childLayout=null;
          childExecutor=null;
        }
        return true;
      }
      childLayout.close();
      childLayout=null;
    }
    childExecutor.close();
    childExecutor=null;
  }
  return false;
}","protected boolean layoutNodes() throws BirtException {
  boolean hasNext=false;
  if (childLayout != null) {
    hasNext=childLayout.layout();
    if (childLayout.isFinished()) {
      childLayout.close();
      childExecutor.close();
      childLayout=null;
      childExecutor=null;
    }
    if (hasNext) {
      return true;
    }
  }
  while (executor.hasNextChild() && !context.getCancelFlag()) {
    childExecutor=(IReportItemExecutor)executor.getNextChild();
    IContent childContent=childExecutor.execute();
    if (childContent != null) {
      childLayout=engine.createLayoutManager(this,childContent,childExecutor,emitter);
      hasNext=childLayout.layout();
      if (!executor.hasNextChild()) {
        childContent.setLastChild(true);
      }
 else {
        childContent.setLastChild(false);
      }
      if (hasNext) {
        if (childLayout.isFinished()) {
          childLayout.close();
          childExecutor.close();
          childLayout=null;
          childExecutor=null;
        }
        return true;
      }
      childLayout.close();
      childLayout=null;
    }
    childExecutor.close();
    childExecutor=null;
  }
  return false;
}",0.93296853625171
69410,"private void initalizeChildren() throws BirtException {
  while (executor.hasNextChild()) {
    IReportItemExecutor childExecutor=(IReportItemExecutor)executor.getNextChild();
    IContent childContent=childExecutor.execute();
    if (childContent == null) {
      childrenLayouts.add(null);
    }
 else {
      ILayoutManager childLayout=engine.createLayoutManager(this,childContent,childExecutor,emitter);
      childrenLayouts.add(childLayout);
    }
    childrenExecutors.add(childExecutor);
    childrenFinished.add(Boolean.FALSE);
  }
}","private void initalizeChildren() throws BirtException {
  while (executor.hasNextChild()) {
    IReportItemExecutor childExecutor=(IReportItemExecutor)executor.getNextChild();
    IContent childContent=childExecutor.execute();
    if (childContent == null) {
      childrenLayouts.add(null);
    }
 else {
      if (!executor.hasNextChild()) {
        childContent.setLastChild(true);
      }
 else {
        childContent.setLastChild(false);
      }
      ILayoutManager childLayout=engine.createLayoutManager(this,childContent,childExecutor,emitter);
      childrenLayouts.add(childLayout);
    }
    childrenExecutors.add(childExecutor);
    childrenFinished.add(Boolean.FALSE);
  }
}",0.8820179007323027
69411,"private void start(ContainerArea area){
  if (startContent == null) {
    startContent=createSizeBasedContent(area);
    currentContent=startContent;
  }
 else {
    if (currentContent != null) {
      if (InstanceIDComparator.isNextWith(currentContent.content,area.content)) {
        currentContent=createSizeBasedContent(area);
      }
 else       if (InstanceIDComparator.equals(startContent.content,currentContent.content)) {
        if (startContent.content instanceof IContainerContent) {
          startContent=createSizeBasedContent(area);
          currentContent=startContent;
        }
      }
 else {
        fixedLayoutPageHints.add(new SizeBasedContent[]{startContent,currentContent});
        startContent=createSizeBasedContent(area);
        currentContent=startContent;
      }
    }
  }
}","private void start(ContainerArea area){
  if (startContent == null) {
    startContent=createSizeBasedContent(area);
    currentContent=startContent;
  }
 else {
    if (currentContent != null) {
      if (InstanceIDComparator.isNextWith(currentContent.content,area.content)) {
        currentContent=createSizeBasedContent(area);
      }
 else       if (InstanceIDComparator.equals(currentContent.content,area.content)) {
      }
 else {
        fixedLayoutPageHints.add(new SizeBasedContent[]{startContent,currentContent});
        startContent=createSizeBasedContent(area);
        currentContent=startContent;
      }
    }
  }
}",0.864677307425399
69412,"static boolean isNextWith(IContent content1,IContent content2){
  if (content1 == null || content2 == null || content1 == content2) {
    return false;
  }
  InstanceID id1=content1.getInstanceID();
  InstanceID id2=content2.getInstanceID();
  if (id1 == null || id2 == null) {
    return false;
  }
  if (id2.getUniqueID() == 0) {
    return equals(content1,(IContent)content2.getParent());
  }
 else   if ((content1 != null) && content1.isLastChild()) {
    content1=(IContent)content1.getParent();
    return isNextWith(content1,content2);
  }
 else   if (id1.getUniqueID() + 1 == id2.getUniqueID()) {
    IContent parent1=(IContent)content1.getParent();
    IContent parent2=(IContent)content2.getParent();
    return equals(parent1,parent2);
  }
  return false;
}","static boolean isNextWith(IContent content1,IContent content2){
  if (content1 == null || content2 == null || content1 == content2) {
    return false;
  }
  InstanceID id1=content1.getInstanceID();
  InstanceID id2=content2.getInstanceID();
  if (id1 == null || id2 == null) {
    return false;
  }
  if (id2.getUniqueID() == 0) {
    IContent parent2=(IContent)content2.getParent();
    if (parent2 instanceof IListBandContent || parent2 instanceof ITableBandContent) {
      InstanceID pid2=parent2.getInstanceID();
      if (pid2 == null) {
        return false;
      }
 else {
        if (pid2.getUniqueID() == 0) {
          return isNextWith(content1,parent2);
        }
 else {
          if (!content1.isLastChild()) {
            return false;
          }
          IContent parent1=(IContent)content1.getParent();
          while (parent1.isLastChild()) {
            parent1=(IContent)parent1.getParent();
          }
          if (parent1 instanceof IListBandContent || parent1 instanceof ITableBandContent) {
            return isSilbing(parent1,parent2);
          }
 else {
            return false;
          }
        }
      }
    }
 else {
      return equals(content1,parent2);
    }
  }
 else {
    if (content1 instanceof IContainerContent) {
      IContainerContent container=(IContainerContent)content1;
      if (container.getChildren().size() > 0) {
        return false;
      }
    }
    if (content1.isLastChild()) {
      IContent parent1=(IContent)content1.getParent();
      while (parent1.isLastChild()) {
        parent1=(IContent)parent1.getParent();
      }
      if (parent1 instanceof IListBandContent || parent1 instanceof ITableBandContent) {
        return false;
      }
 else {
        return isSilbing(parent1,content2);
      }
    }
 else {
      return isSilbing(content1,content2);
    }
  }
}",0.339463601532567
69413,"/** 
 * when generating page hint, inline text must invoke this method first.
 */
public void updatePageHintInfo(InlineTextArea area){
  if (lineBreaks == null || lineBreaks.size() == 0) {
    return;
  }
  int lineNumber=lines.indexOf(area);
  if (lineNumber != 0 && !lineBreaks.contains(lineNumber - 1)) {
    return;
  }
  offsetInContent=0;
  floatPos=0;
  dimension=0;
  widthRestrict=0;
  Collections.sort(lineBreaks);
  int startLineNumber=lineNumber;
  for (int i=0; i < startLineNumber; i++) {
    offsetInContent+=lines.get(i).getAllocatedWidth();
  }
  for (Iterator<Integer> iter=lineBreaks.iterator(); iter.hasNext(); ) {
    int breakLineNumber=iter.next();
    if (breakLineNumber >= startLineNumber) {
      InlineTextArea startLine=lines.get(startLineNumber);
      floatPos=startLine.getAllocatedX();
      for (int i=startLineNumber; i <= breakLineNumber; i++) {
        dimension+=lines.get(i).getAllocatedWidth();
        widthRestrict=startLine.parent.getWidth();
      }
      break;
    }
  }
}","/** 
 * when generating page hint, inline text must invoke this method first.
 */
public void updatePageHintInfo(InlineTextArea area){
  if (lineBreaks == null || lineBreaks.size() == 0) {
    return;
  }
  offsetInContent=0;
  floatPos=0;
  dimension=0;
  widthRestrict=0;
  int lineNumber=lines.indexOf(area);
  if (lineNumber != 0 && !lineBreaks.contains(lineNumber - 1)) {
    return;
  }
  Collections.sort(lineBreaks);
  int startLineNumber=lineNumber;
  for (int i=0; i < startLineNumber; i++) {
    offsetInContent+=lines.get(i).getAllocatedWidth();
  }
  for (Iterator<Integer> iter=lineBreaks.iterator(); iter.hasNext(); ) {
    int breakLineNumber=iter.next();
    if (breakLineNumber >= startLineNumber) {
      InlineTextArea startLine=lines.get(startLineNumber);
      floatPos=startLine.getAllocatedX();
      for (int i=startLineNumber; i <= breakLineNumber; i++) {
        dimension+=lines.get(i).getAllocatedWidth();
        widthRestrict=startLine.parent.getWidth();
      }
      break;
    }
  }
}",0.3742632612966601
69414,"public Object evaluate(ScriptContext scriptContext,ICompiledScript compiledScript) throws BirtException {
  assert(compiledScript instanceof CompiledJavascript);
  Script script=((CompiledJavascript)compiledScript).getCompiledScript();
  Object value=script.exec(context,getJSScope(scriptContext));
  return jsToJava(value);
}","public Object evaluate(ScriptContext scriptContext,ICompiledScript compiledScript) throws BirtException {
  assert(compiledScript instanceof CompiledJavascript);
  try {
    Script script=((CompiledJavascript)compiledScript).getCompiledScript();
    Object value=script.exec(context,getJSScope(scriptContext));
    return jsToJava(value);
  }
 catch (  JavaScriptException e) {
    throw new BirtException(e.getLocalizedMessage());
  }
}",0.854521625163827
69415,"/** 
 * Splits text for fixed layout reports.
 */
private void splitText(){
  Integer taskType=(Integer)engine.getOption(EngineTask.TASK_TYPE);
  if (taskType.intValue() == IEngineTask.TASK_RENDER && context.isFixedLayout()) {
    SizeBasedContent sizeBasedContent=context.getPageHintManager().getSizeBasedContentMapping().get(content.getInstanceID().toUniqueString());
    if (sizeBasedContent == null || sizeBasedContent.dimension == -1) {
      return;
    }
    HtmlRegionArea container=new HtmlRegionArea();
    container.setWidth(sizeBasedContent.width);
    IContainerContent containerContent=content.getReportContent().createContainerContent();
    containerContent.getChildren().add(content);
    LayoutContext pdfLayoutContext=new LayoutContext();
    pdfLayoutContext.setFormat(""String_Node_Str"");
    pdfLayoutContext.setFixedLayout(true);
    pdfLayoutContext.setInHtmlRender(true);
    pdfLayoutContext.setLocale(engine.locale);
    pdfLayoutContext.setHtmlLayoutContext(context);
    pdfLayoutContext.setMaxBP(Integer.MAX_VALUE);
    RegionLayoutEngine rle=new RegionLayoutEngine(container,pdfLayoutContext);
    try {
      rle.layout(containerContent);
    }
 catch (    BirtException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
}","/** 
 * Splits text for fixed layout reports.
 */
private void splitText(){
  Integer taskType=(Integer)engine.getOption(EngineTask.TASK_TYPE);
  if (taskType.intValue() == IEngineTask.TASK_RENDER && context.isFixedLayout()) {
    SizeBasedContent sizeBasedContent=context.getPageHintManager().getSizeBasedContentMapping().get(content.getInstanceID().toUniqueString());
    if (sizeBasedContent == null || sizeBasedContent.dimension == -1) {
      return;
    }
    HtmlRegionArea container=new HtmlRegionArea();
    container.setWidth(sizeBasedContent.width);
    IReportContent report=content.getReportContent();
    IContainerContent containerContent=report.createContainerContent();
    containerContent.getChildren().add(content);
    LayoutContext pdfLayoutContext=new LayoutContext();
    pdfLayoutContext.setFormat(""String_Node_Str"");
    pdfLayoutContext.setFixedLayout(true);
    pdfLayoutContext.setInHtmlRender(true);
    pdfLayoutContext.setLocale(engine.locale);
    pdfLayoutContext.setHtmlLayoutContext(context);
    pdfLayoutContext.setMaxBP(Integer.MAX_VALUE);
    pdfLayoutContext.setReport(report);
    RegionLayoutEngine rle=new RegionLayoutEngine(container,pdfLayoutContext);
    try {
      rle.layout(containerContent);
    }
 catch (    BirtException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
}",0.9471264367816092
69416,"/** 
 * Creates a new sort based on model sort key definition
 * @throws AdapterException 
 */
public SortAdapter(IModelAdapter adapter,SortKeyHandle keyHandle) throws AdapterException {
  ExpressionHandle handle=keyHandle.getExpressionProperty(SortKey.KEY_MEMBER);
  if (handle == null)   return;
  IScriptExpression expr=adapter.adaptExpression((Expression)handle.getValue());
  this.setExpression(expr);
  this.setSortStrength(keyHandle.getStrength());
  if (keyHandle.getLocale() != null)   this.setSortLocale(keyHandle.getLocale());
}","/** 
 * Creates a new sort based on model sort key definition
 * @throws AdapterException 
 */
public SortAdapter(IModelAdapter adapter,SortKeyHandle keyHandle) throws AdapterException {
  ExpressionHandle handle=keyHandle.getExpressionProperty(SortKey.KEY_MEMBER);
  if (handle == null)   return;
  IScriptExpression expr=adapter.adaptExpression((Expression)handle.getValue());
  this.setExpression(expr);
  this.setSortDirection(sortDirectionFromModel(keyHandle.getDirection()));
  this.setSortStrength(keyHandle.getStrength());
  if (keyHandle.getLocale() != null)   this.setSortLocale(keyHandle.getLocale());
}",0.9349522983521248
69417,"public void removeTabItem(String title){
  CTabItem[] items=tabFolder.getItems();
  for (int i=0; i < items.length; i++) {
    if (items[i].getText().equals(title)) {
      itemMap.remove(items[i]);
      items[i].dispose();
    }
  }
}","/** 
 * Removes the tab with given key.
 * @param itemKey
 */
public void removeTabItem(String itemKey){
  CTabItem[] items=tabFolder.getItems();
  for (int i=0; i < items.length; i++) {
    if (items[i].getText().equals(itemKey)) {
      itemMap.remove(items[i]);
      items[i].dispose();
    }
  }
}",0.8401486988847584
69418,"public boolean existTabItem(String title){
  CTabItem[] items=tabFolder.getItems();
  for (int i=0; i < items.length; i++) {
    if (items[i].getText().equals(title))     return true;
  }
  return false;
}","/** 
 * Checks if a tab with given key exists.
 * @param itemKey
 * @return
 */
public boolean existTabItem(String itemKey){
  CTabItem[] items=tabFolder.getItems();
  for (int i=0; i < items.length; i++) {
    if (items[i].getText().equals(itemKey))     return true;
  }
  return false;
}",0.7894736842105263
69419,"protected void createTabItem(String itemKey,String getItemIndex){
  if (existTabItem(itemKey))   return;
  CTabItem tabItem=new CTabItem(tabFolder,SWT.NONE,getItemIndex(getItemIndex) + 1);
  tabItem.setText(itemKey);
  itemMap.put(tabItem,null);
}","/** 
 * Creates a new tab after the given preceding tab.
 * @param itemKey
 * @param precedingItemKey
 */
protected void createTabItem(String itemKey,String precedingItemKey){
  if (existTabItem(itemKey))   return;
  CTabItem tabItem=new CTabItem(tabFolder,SWT.NONE,getItemIndex(precedingItemKey) + 1);
  tabItem.setText(itemKey);
  itemMap.put(tabItem,null);
}",0.7335526315789473
69420,"public int getItemIndex(String title){
  if (title == null)   return -1;
  CTabItem[] items=tabFolder.getItems();
  for (int i=0; i < items.length; i++) {
    if (items[i].getText().equals(title))     return i;
  }
  return -1;
}","/** 
 * Returns the index of the tab with given key.
 * @param title
 * @return 0-based index. -1 means no tab found.
 */
public int getItemIndex(String itemKey){
  if (itemKey == null)   return -1;
  CTabItem[] items=tabFolder.getItems();
  for (int i=0; i < items.length; i++) {
    if (items[i].getText().equals(itemKey))     return i;
  }
  return -1;
}",0.7303754266211604
69421,"/** 
 * overwrite to add additional tabs.
 */
abstract protected void createTabItems();","/** 
 * The subclass should overwrite this to add additional tabs.
 */
abstract protected void createTabItems();",0.8743718592964824
69422,"protected void buildItemContent(CTabItem item){
  if (itemMap.containsKey(item) && itemMap.get(item) == null) {
    String title=tabFolder.getSelection().getText();
    TabPage page=buildTabContent(title);
    if (page != null) {
      setPageInput(page);
      refresh(tabFolder,page,true);
      item.setControl(page.getControl());
      itemMap.put(item,page);
    }
  }
 else   if (itemMap.get(item) != null) {
    setPageInput(itemMap.get(item));
    refresh(tabFolder,itemMap.get(item),false);
  }
}","/** 
 * Builds and initialize the content for each tab.
 * @param item
 */
protected void buildItemContent(CTabItem item){
  if (itemMap.containsKey(item) && itemMap.get(item) == null) {
    String title=tabFolder.getSelection().getText();
    TabPage page=buildTabContent(title);
    if (page != null) {
      setPageInput(page);
      refresh(tabFolder,page,true);
      item.setControl(page.getControl());
      itemMap.put(item,page);
    }
  }
 else   if (itemMap.get(item) != null) {
    setPageInput(itemMap.get(item));
    refresh(tabFolder,itemMap.get(item),false);
  }
}",0.9308755760368664
69423,"/** 
 * Creats default content for each tab.
 * @param tabKey
 */
protected TabPage buildTabContent(String tabKey){
  TabPage page=null;
  if (tabKey.equals(BINDINGTITLE)) {
    if (isSupportAggregationBinding()) {
      page=new AggregateOnBindingPage();
    }
 else {
      page=new BindingPage();
    }
  }
 else   if (tabKey.equals(SORTINGTITLE)) {
    page=new FormPage(FormPropertyDescriptor.FULL_FUNCTION,new SortingHandleProvider(),true,true);
  }
 else   if (tabKey.equals(FILTERTITLE)) {
    AbstractFilterHandleProvider filterProvider=(AbstractFilterHandleProvider)ElementAdapterManager.getAdapter(this,AbstractFilterHandleProvider.class);
    if (filterProvider == null) {
      filterProvider=new FilterHandleProvider();
    }
    page=new FormPage(FormPropertyDescriptor.FULL_FUNCTION,filterProvider,true,true);
  }
 else   if (tabKey.equals(HIGHLIGHTSTITLE)) {
    page=new PreviewPage(true);
    ((PreviewPage)page).setPreview(new HighlightPropertyDescriptor(true));
    ((PreviewPage)page).setProvider(new HighlightDescriptorProvider());
  }
 else   if (tabKey.equals(MAPTITLE)) {
    page=new PreviewPage(true);
    ((PreviewPage)page).setPreview(new MapPropertyDescriptor(true));
    ((PreviewPage)page).setProvider(new MapDescriptorProvider());
  }
  return page;
}","/** 
 * Creats the page content for each tab. Note this doesn't include the default cateogry-styled tab, which is handled separately.
 * @param tabKey
 */
protected TabPage buildTabContent(String tabKey){
  TabPage page=null;
  if (tabKey.equals(BINDINGTITLE)) {
    if (isSupportAggregationBinding()) {
      page=new AggregateOnBindingPage();
    }
 else {
      page=new BindingPage();
    }
  }
 else   if (tabKey.equals(SORTINGTITLE)) {
    page=new FormPage(FormPropertyDescriptor.FULL_FUNCTION,new SortingHandleProvider(),true,true);
  }
 else   if (tabKey.equals(FILTERTITLE)) {
    AbstractFilterHandleProvider filterProvider=(AbstractFilterHandleProvider)ElementAdapterManager.getAdapter(this,AbstractFilterHandleProvider.class);
    if (filterProvider == null) {
      filterProvider=new FilterHandleProvider();
    }
    page=new FormPage(FormPropertyDescriptor.FULL_FUNCTION,filterProvider,true,true);
  }
 else   if (tabKey.equals(HIGHLIGHTSTITLE)) {
    page=new PreviewPage(true);
    ((PreviewPage)page).setPreview(new HighlightPropertyDescriptor(true));
    ((PreviewPage)page).setProvider(new HighlightDescriptorProvider());
  }
 else   if (tabKey.equals(MAPTITLE)) {
    page=new PreviewPage(true);
    ((PreviewPage)page).setPreview(new MapPropertyDescriptor(true));
    ((PreviewPage)page).setProvider(new MapDescriptorProvider());
  }
  return page;
}",0.947724708537044
69424,"public void setCategoryProvider(ICategoryProvider provider){
  this.customProvider=provider;
}","/** 
 * Overrides the default category provider for the basic category-styled page. Note this is only effective when called before the <code>createTabItems(List)</code> method is called.
 */
public void setCategoryProvider(ICategoryProvider provider){
  this.customProvider=provider;
}",0.496042216358839
69425,"public String getSelectedTabText(){
  return selectedTabText;
}","/** 
 * Returns the text of current selected tab.
 * @return
 */
public String getSelectedTabText(){
  return selectedTabText;
}",0.6596858638743456
69426,"/** 
 * Creates attribute pages
 * @param tabFolder The attribute tabFolder.
 * @param input The current selection.
 */
public void createTabItems(final List input){
  ISafeRunnable runnable=new ISafeRunnable(){
    public void run() throws Exception {
      CTabItem[] oldPages=tabFolder.getItems();
      int index=tabFolder.getSelectionIndex();
      for (int i=0; i < oldPages.length; i++) {
        if (oldPages[i].isDisposed())         continue;
        if (index == i)         continue;
        if (oldPages[i].getControl() != null) {
          oldPages[i].getControl().dispose();
        }
        oldPages[i].dispose();
      }
      if (index > -1 && !oldPages[index].isDisposed()) {
        oldPages[index].getControl().dispose();
        oldPages[index].dispose();
      }
    }
    public void handleException(    Throwable exception){
    }
  }
;
  SafeRunner.run(runnable);
}","/** 
 * Creates the tab items for the page
 * @param tabFolder The attribute tabFolder.
 * @param input The current selection.
 */
public void createTabItems(final List input){
  ISafeRunnable runnable=new ISafeRunnable(){
    public void run() throws Exception {
      CTabItem[] oldPages=tabFolder.getItems();
      int index=tabFolder.getSelectionIndex();
      for (int i=0; i < oldPages.length; i++) {
        if (oldPages[i].isDisposed())         continue;
        if (index == i)         continue;
        if (oldPages[i].getControl() != null) {
          oldPages[i].getControl().dispose();
        }
        oldPages[i].dispose();
      }
      if (index > -1 && !oldPages[index].isDisposed()) {
        oldPages[index].getControl().dispose();
        oldPages[index].dispose();
      }
    }
    public void handleException(    Throwable exception){
    }
  }
;
  SafeRunner.run(runnable);
}",0.977107761027359
69427,"public void setSelectedTabText(String selectedTabText){
  this.selectedTabText=selectedTabText;
}","/** 
 * Sets the text of current selected tab.
 * @param selectedTabText
 */
public void setSelectedTabText(String selectedTabText){
  this.selectedTabText=selectedTabText;
}",0.7158671586715867
69428,Control getControl();,"/** 
 * Returns the page control.
 * @return
 */
Control getControl();",0.4615384615384615
69429,void refresh();,"/** 
 * Refresh the page content based on current input
 */
void refresh();",0.3333333333333333
69430,Object getInput();,"/** 
 * Returns the input.
 * @return
 */
Object getInput();",0.4615384615384615
69431,"void createControl(Composite parent,Object input);","/** 
 * Creates the content of the page control.
 * @param parent
 * @param input
 */
void createControl(Composite parent,Object input);",0.5376344086021505
69432,"public Object evaluate(String expression){
  try {
    return fResultIterator.getValue(expression);
  }
 catch (  BirtException e) {
    sLogger.log(e);
  }
  return null;
}","public Object evaluate(String expression){
  try {
    return fResultIterator.getValue(expression);
  }
 catch (  BirtException e) {
    sLogger.log(e);
    return e;
  }
}",0.9681159420289857
69433,"public void setAttributes(Map<String,Object> attributes){
  if (attributes != null) {
    this.attributes.putAll(attributes);
  }
}","public void setAttributes(Map<String,Object> attributes){
  if (attributes != null) {
    for (    Entry<String,Object> attribute : attributes.entrySet()) {
      setAttribute(attribute.getKey(),attribute.getValue());
    }
  }
}",0.5611111111111111
69434,"public void setAttribute(String name,Object value){
  attributes.put(name,value);
}","public void setAttribute(String name,Object value){
  attributes.put(name,value);
  for (  IScriptContext context : scriptContexts.values()) {
    context.setAttribute(name,value);
  }
}",0.6171003717472119
69435,"public void removeAttribute(String name){
  attributes.remove(name);
}","public void removeAttribute(String name){
  attributes.remove(name);
  for (  IScriptContext context : scriptContexts.values()) {
    context.removeAttribute(name);
  }
}",0.5833333333333334
69436,"public ICubeQueryResults execute(IBaseQueryResults outerResults,Scriptable scope) throws DataException {
  Scriptable cubeScope=null;
  try {
    cubeScope=((IDataScriptEngine)session.getEngineContext().getScriptContext().getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSContext(session.getEngineContext().getScriptContext()).newObject(scope == null ? this.session.getSharedScope() : scope);
    cubeScope.setParentScope(scope == null ? this.session.getSharedScope() : scope);
    cubeScope.setPrototype(scope == null ? this.session.getSharedScope() : scope);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  Object delegateObject=null;
  try {
    delegateObject=Thread.currentThread().getContextClassLoader().loadClass(""String_Node_Str"").getConstructor(ICubeQueryDefinition.class,DataEngineSession.class,DataEngineContext.class,Map.class).newInstance(cubeQueryDefn,session,context,appContext);
  }
 catch (  ClassNotFoundException e) {
  }
catch (  InstantiationException e) {
  }
catch (  IllegalAccessException e) {
  }
catch (  SecurityException e) {
  }
catch (  IllegalArgumentException e) {
  }
catch (  InvocationTargetException e) {
  }
catch (  NoSuchMethodException e) {
  }
  if (delegateObject != null) {
    try {
      Method method=delegateObject.getClass().getMethod(""String_Node_Str"",new Class[]{IBaseQueryResults.class,Scriptable.class});
      return (ICubeQueryResults)method.invoke(delegateObject,new Object[]{outerResults,scope});
    }
 catch (    SecurityException e) {
    }
catch (    NoSuchMethodException e) {
    }
catch (    IllegalArgumentException e) {
    }
catch (    IllegalAccessException e) {
    }
catch (    InvocationTargetException e) {
    }
  }
  return new CubeQueryResults(outerResults,this,this.session,cubeScope,this.context,appContext);
}","public ICubeQueryResults execute(IBaseQueryResults outerResults,Scriptable scope) throws DataException {
  Scriptable cubeScope=null;
  try {
    cubeScope=((IDataScriptEngine)session.getEngineContext().getScriptContext().getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSContext(session.getEngineContext().getScriptContext()).initStandardObjects();
    cubeScope.setParentScope(scope == null ? this.session.getSharedScope() : scope);
    cubeScope.setPrototype(scope == null ? this.session.getSharedScope() : scope);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  Object delegateObject=null;
  try {
    delegateObject=Thread.currentThread().getContextClassLoader().loadClass(""String_Node_Str"").getConstructor(ICubeQueryDefinition.class,DataEngineSession.class,DataEngineContext.class,Map.class).newInstance(cubeQueryDefn,session,context,appContext);
  }
 catch (  ClassNotFoundException e) {
  }
catch (  InstantiationException e) {
  }
catch (  IllegalAccessException e) {
  }
catch (  SecurityException e) {
  }
catch (  IllegalArgumentException e) {
  }
catch (  InvocationTargetException e) {
  }
catch (  NoSuchMethodException e) {
  }
  if (delegateObject != null) {
    try {
      Method method=delegateObject.getClass().getMethod(""String_Node_Str"",new Class[]{IBaseQueryResults.class,Scriptable.class});
      return (ICubeQueryResults)method.invoke(delegateObject,new Object[]{outerResults,scope});
    }
 catch (    SecurityException e) {
    }
catch (    NoSuchMethodException e) {
    }
catch (    IllegalArgumentException e) {
    }
catch (    IllegalAccessException e) {
    }
catch (    InvocationTargetException e) {
    }
  }
  return new CubeQueryResults(outerResults,this,this.session,cubeScope,this.context,appContext);
}",0.9595762475606356
69437,"public void widgetSelected(SelectionEvent e){
  Object oSource=e.getSource();
  if (oSource.equals(cmbType)) {
    fGrouping.setGroupType(DataType.getByName(LiteralHelper.dataTypeSet.getNameByDisplayName(cmbType.getText())));
    boolean bEnableUI=btnEnabled.getSelection();
    String selName=cmbType.getText();
    boolean bEnabled=isDateTimeGrouping(selName) || isTextGrouping(selName);
    resetGroupingUnitsCombo(bEnableUI);
    lblUnit.setEnabled(bEnableUI & bEnabled);
    cmbUnit.setEnabled(bEnableUI & bEnabled);
    lblInterval.setEnabled(bEnableUI);
    iscInterval.setEnabled(bEnableUI);
    if (fbAggEnabled) {
      lblAggregate.setEnabled(bEnableUI);
      cmbAggregate.setEnabled(bEnableUI);
      if (fChartContext.getChartType() instanceof StockChart) {
        ChartUIUtil.updateDefaultAggregations(fChartContext.getModel());
      }
    }
  }
 else   if (oSource.equals(cmbUnit)) {
    fGrouping.setGroupingUnit(GroupingUnitType.getByName(LiteralHelper.groupingUnitTypeSet.getNameByDisplayName(cmbUnit.getText())));
  }
 else   if (oSource.equals(cmbAggregate)) {
    int idx=cmbAggregate.getSelectionIndex();
    String aggExpr=null;
    if (idx >= 0) {
      String[] names=(String[])cmbAggregate.getData();
      aggExpr=names[idx];
    }
    showAggregateParameters(aggExpr);
    getShell().pack();
    fGrouping.setAggregateExpression(aggExpr);
  }
 else   if (oSource.equals(btnEnabled)) {
    fGrouping.setEnabled(btnEnabled.getSelection());
    setButtonsStatus();
    populateLists();
    populateAggParameters();
    String aggFuncName=null;
    try {
      aggFuncName=((String[])cmbAggregate.getData())[cmbAggregate.getSelectionIndex()];
    }
 catch (    Exception e1) {
      ;
    }
    showAggregateParameters(aggFuncName);
    getShell().pack();
  }
 else   if (oSource.equals(iscInterval)) {
    fGrouping.setGroupingInterval(Double.valueOf(iscInterval.getText()).doubleValue());
  }
 else   if (isAggParametersWidget(oSource)) {
    setAggParameter((Text)oSource);
  }
 else   if (isBuilderBtnWidget(oSource)) {
    try {
      Text txtArg=fExprBuilderWidgetsMap.get(oSource);
      String sExpr=fChartContext.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,txtArg.getText(),fChartContext.getExtendedItem(),fTitle);
      txtArg.setText(sExpr);
      setAggParameter(txtArg);
    }
 catch (    ChartException e1) {
      WizardBase.displayException(e1);
    }
  }
}","public void widgetSelected(SelectionEvent e){
  Object oSource=e.getSource();
  if (oSource.equals(cmbType)) {
    fGrouping.setGroupType(DataType.getByName(LiteralHelper.dataTypeSet.getNameByDisplayName(cmbType.getText())));
    boolean bEnableUI=btnEnabled.getSelection();
    String selName=cmbType.getText();
    boolean bEnabled=isDateTimeGrouping(selName) || isTextGrouping(selName);
    resetGroupingUnitsCombo(bEnableUI);
    lblUnit.setEnabled(bEnableUI & bEnabled);
    cmbUnit.setEnabled(bEnableUI & bEnabled);
    lblInterval.setEnabled(bEnableUI);
    iscInterval.setEnabled(bEnableUI);
    if (fbAggEnabled) {
      lblAggregate.setEnabled(bEnableUI);
      cmbAggregate.setEnabled(bEnableUI);
      if (fChartContext.getChartType() instanceof StockChart && fGrouping.getGroupType().getValue() == DataType.DATE_TIME) {
        ChartUIUtil.updateDefaultAggregations(fChartContext.getModel());
      }
    }
  }
 else   if (oSource.equals(cmbUnit)) {
    fGrouping.setGroupingUnit(GroupingUnitType.getByName(LiteralHelper.groupingUnitTypeSet.getNameByDisplayName(cmbUnit.getText())));
  }
 else   if (oSource.equals(cmbAggregate)) {
    int idx=cmbAggregate.getSelectionIndex();
    String aggExpr=null;
    if (idx >= 0) {
      String[] names=(String[])cmbAggregate.getData();
      aggExpr=names[idx];
    }
    showAggregateParameters(aggExpr);
    getShell().pack();
    fGrouping.setAggregateExpression(aggExpr);
  }
 else   if (oSource.equals(btnEnabled)) {
    fGrouping.setEnabled(btnEnabled.getSelection());
    setButtonsStatus();
    populateLists();
    populateAggParameters();
    String aggFuncName=null;
    try {
      aggFuncName=((String[])cmbAggregate.getData())[cmbAggregate.getSelectionIndex()];
    }
 catch (    Exception e1) {
      ;
    }
    showAggregateParameters(aggFuncName);
    getShell().pack();
  }
 else   if (oSource.equals(iscInterval)) {
    fGrouping.setGroupingInterval(Double.valueOf(iscInterval.getText()).doubleValue());
  }
 else   if (isAggParametersWidget(oSource)) {
    setAggParameter((Text)oSource);
  }
 else   if (isBuilderBtnWidget(oSource)) {
    try {
      Text txtArg=fExprBuilderWidgetsMap.get(oSource);
      String sExpr=fChartContext.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,txtArg.getText(),fChartContext.getExtendedItem(),fTitle);
      txtArg.setText(sExpr);
      setAggParameter(txtArg);
    }
 catch (    ChartException e1) {
      WizardBase.displayException(e1);
    }
  }
}",0.9876443184119912
69438,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if ((currentChart instanceof ChartWithAxes)) {
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        for (        Axis yAxis : xAxis.getAssociatedAxes()) {
          yAxis.setPercent(false);
          for (          SeriesDefinition ysd : yAxis.getSeriesDefinitions()) {
            Series series=ysd.getDesignTimeSeries();
            series.setStacked(false);
            if (series instanceof StockSeries) {
              ((StockSeries)series).setShowAsBarStick(BAR_STICK_SUBTYPE_LITERAL.equals(currentChart.getSubType()));
            }
          }
        }
      }
    }
 else {
      if (!currentChart.getType().equals(TYPE_LITERAL)) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),false));
      }
      currentChart.setType(TYPE_LITERAL);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      xAxis.setCategoryAxis(true);
      currentChart.setSubType(sNewSubType);
      int seriesIndex=0;
      for (      Axis yAxis : xAxis.getAssociatedAxes()) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          yAxis.setType(AxisType.LINEAR_LITERAL);
        }
        yAxis.setPercent(false);
        for (        SeriesDefinition ysd : yAxis.getSeriesDefinitions()) {
          Series series=ysd.getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex);
          series.setStacked(false);
          ysd.getSeries().clear();
          ysd.getSeries().add(series);
          seriesIndex++;
        }
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    xAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
    xAxis.setCategoryAxis(true);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    yAxis.setOrientation(Orientation.VERTICAL_LITERAL);
    yAxis.setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData(),true));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      SeriesDefinition bsd=xAxis.getSeriesDefinitions().get(0);
      Series series=bsd.getDesignTimeSeries();
      bsd.getSeries().clear();
      bsd.getSeries().add(series);
      int j=0;
      for (      SeriesDefinition vsd : yAxis.getSeriesDefinitions()) {
        series=vsd.getDesignTimeSeries();
        series=getConvertedSeries(series,j++);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        vsd.getSeries().clear();
        vsd.getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  ChartUIUtil.updateDefaultAggregations(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if ((currentChart instanceof ChartWithAxes)) {
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        for (        Axis yAxis : xAxis.getAssociatedAxes()) {
          yAxis.setPercent(false);
          for (          SeriesDefinition ysd : yAxis.getSeriesDefinitions()) {
            Series series=ysd.getDesignTimeSeries();
            series.setStacked(false);
            if (series instanceof StockSeries) {
              ((StockSeries)series).setShowAsBarStick(BAR_STICK_SUBTYPE_LITERAL.equals(currentChart.getSubType()));
            }
          }
        }
      }
    }
 else {
      if (!currentChart.getType().equals(TYPE_LITERAL)) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),false));
      }
      currentChart.setType(TYPE_LITERAL);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      xAxis.setCategoryAxis(true);
      currentChart.setSubType(sNewSubType);
      int seriesIndex=0;
      for (      Axis yAxis : xAxis.getAssociatedAxes()) {
        if (!ChartPreviewPainter.isLivePreviewActive()) {
          yAxis.setType(AxisType.LINEAR_LITERAL);
        }
        yAxis.setPercent(false);
        for (        SeriesDefinition ysd : yAxis.getSeriesDefinitions()) {
          Series series=ysd.getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex);
          series.setStacked(false);
          ysd.getSeries().clear();
          ysd.getSeries().add(series);
          seriesIndex++;
        }
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    Axis xAxis=((ChartWithAxes)currentChart).getAxes().get(0);
    xAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
    xAxis.setCategoryAxis(true);
    Axis yAxis=xAxis.getAssociatedAxes().get(0);
    yAxis.setOrientation(Orientation.VERTICAL_LITERAL);
    yAxis.setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData(),true));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      xAxis.getSeriesDefinitions().clear();
      xAxis.getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      yAxis.getSeriesDefinitions().clear();
      yAxis.getSeriesDefinitions().addAll(xAxis.getSeriesDefinitions().get(0).getSeriesDefinitions());
      SeriesDefinition bsd=xAxis.getSeriesDefinitions().get(0);
      Series series=bsd.getDesignTimeSeries();
      bsd.getSeries().clear();
      bsd.getSeries().add(series);
      int j=0;
      for (      SeriesDefinition vsd : yAxis.getSeriesDefinitions()) {
        series=vsd.getDesignTimeSeries();
        series=getConvertedSeries(series,j++);
        series.getLabel().setVisible(false);
        series.setStacked(false);
        vsd.getSeries().clear();
        vsd.getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  SeriesGrouping sg=ChartUtil.getBaseSeriesDefinitions(currentChart).get(0).getGrouping();
  if (sg.getGroupType().getValue() == DataType.DATE_TIME) {
    ChartUIUtil.updateDefaultAggregations(currentChart);
  }
  return currentChart;
}",0.9797907992281912
69439,"/** 
 * Sets default aggregation functions for model
 * @param cm model
 * @since 2.5.1
 */
public static void updateDefaultAggregations(Chart cm){
  SeriesGrouping sg=getBaseSeriesDefinitions(cm).get(0).getGrouping();
  if (sg.getGroupType().getValue() == DataType.DATE_TIME) {
    for (    SeriesDefinition vsd : getAllOrthogonalSeriesDefinitions(cm)) {
      Series vs=vsd.getDesignTimeSeries();
      if (vs instanceof StockSeries) {
        EList<Query> queries=vs.getDataDefinition();
        while (queries.size() < 4) {
          queries.add(QueryImpl.create(""String_Node_Str""));
        }
        setSeriesAggregation(queries.get(0),""String_Node_Str"");
        setSeriesAggregation(queries.get(1),""String_Node_Str"");
        setSeriesAggregation(queries.get(2),""String_Node_Str"");
        setSeriesAggregation(queries.get(3),""String_Node_Str"");
      }
    }
  }
}","/** 
 * Sets default aggregation functions for model
 * @param cm model
 * @since 2.5.1
 */
public static void updateDefaultAggregations(Chart cm){
  for (  SeriesDefinition vsd : getAllOrthogonalSeriesDefinitions(cm)) {
    Series vs=vsd.getDesignTimeSeries();
    if (vs instanceof StockSeries) {
      EList<Query> queries=vs.getDataDefinition();
      while (queries.size() < 4) {
        queries.add(QueryImpl.create(""String_Node_Str""));
      }
      setSeriesAggregation(queries.get(0),""String_Node_Str"");
      setSeriesAggregation(queries.get(1),""String_Node_Str"");
      setSeriesAggregation(queries.get(2),""String_Node_Str"");
      setSeriesAggregation(queries.get(3),""String_Node_Str"");
    }
  }
}",0.8389134554643083
69440,"/** 
 * Evaluate data for all expressions, include base series, optional Y series grouping and value series.
 * @param idre
 * @param columns
 * @param areValueSeries
 * @return
 * @since 2.3
 */
public List<Object[]> evaluateRowSet(IDataRowExpressionEvaluator idre,final Object[] columns){
  List<Object[]> liResultSet=new ArrayList<Object[]>();
  final int iColumnCount=columns.length;
  Object[] oaTuple;
  final int MAX_ROW_COUNT=ChartUtil.getSupportedMaxRowCount(rtc);
  if (idre.first()) {
    int count=0;
    do {
      if (MAX_ROW_COUNT > 0 && count++ >= MAX_ROW_COUNT) {
        break;
      }
      oaTuple=new Object[iColumnCount];
      for (int i=0; i < columns.length; i++) {
        Object value=idre.evaluate((String)columns[i]);
        if (value instanceof Date) {
          value=new CDateTime((Date)value);
        }
 else         if (value instanceof Calendar) {
          value=new CDateTime((Calendar)value);
        }
        oaTuple[i]=value;
      }
      liResultSet.add(oaTuple);
    }
 while (idre.next());
  }
  return liResultSet;
}","/** 
 * Evaluate data for all expressions, include base series, optional Y series grouping and value series.
 * @param idre
 * @param columns
 * @param areValueSeries
 * @return the evaluated results.
 * @since 2.3
 */
public List<Object[]> evaluateRowSet(IDataRowExpressionEvaluator idre,final Object[] columns) throws ChartException {
  List<Object[]> liResultSet=new ArrayList<Object[]>();
  final int iColumnCount=columns.length;
  Object[] oaTuple;
  final int MAX_ROW_COUNT=ChartUtil.getSupportedMaxRowCount(rtc);
  if (idre.first()) {
    int count=0;
    do {
      if (MAX_ROW_COUNT > 0 && count++ >= MAX_ROW_COUNT) {
        break;
      }
      oaTuple=new Object[iColumnCount];
      for (int i=0; i < columns.length; i++) {
        Object value=idre.evaluate((String)columns[i]);
        if (value instanceof Date) {
          value=new CDateTime((Date)value);
        }
 else         if (value instanceof Calendar) {
          value=new CDateTime((Calendar)value);
        }
 else         if (value instanceof BirtException) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,(BirtException)value);
        }
        oaTuple[i]=value;
      }
      liResultSet.add(oaTuple);
    }
 while (idre.next());
  }
  return liResultSet;
}",0.9082373026034998
69441,"public void showSelectionPage(PropertyNode selectedNode){
  super.showSelectionPage(selectedNode);
  if (showPage) {
    if (historyBar != null) {
      historyBar.addHistoryNode(selectedNode);
    }
    if (!internalPages.contains(selectedNode.getId())) {
      getShell().pack();
    }
  }
}","public void showSelectionPage(PropertyNode selectedNode){
  super.showSelectionPage(selectedNode);
  if (showPage) {
    if (historyBar != null) {
      historyBar.addHistoryNode(selectedNode);
    }
    if (!PageLayoutManager.isRegisteredPage(selectedNode.getId())) {
      getShell().pack();
    }
  }
}",0.9096989966555185
69442,"/** 
 * Splits text for fixed layout reports.
 */
private void splitText(){
  Integer taskType=(Integer)engine.getOption(EngineTask.TASK_TYPE);
  if (taskType.intValue() == IEngineTask.TASK_RENDER && context.isFixedLayout()) {
    SizeBasedContent sizeBasedContent=context.getPageHintManager().getSizeBasedContentMapping().get(content.getInstanceID().toUniqueString());
    HtmlRegionArea container=new HtmlRegionArea();
    container.setWidth(sizeBasedContent.width);
    IContainerContent containerContent=content.getReportContent().createContainerContent();
    containerContent.getChildren().add(content);
    LayoutContext pdfLayoutContext=new LayoutContext();
    pdfLayoutContext.setFormat(""String_Node_Str"");
    pdfLayoutContext.setFixedLayout(true);
    pdfLayoutContext.setInHtmlRender(true);
    pdfLayoutContext.setLocale(engine.locale);
    pdfLayoutContext.setHtmlLayoutContext(context);
    pdfLayoutContext.setMaxBP(Integer.MAX_VALUE);
    RegionLayoutEngine rle=new RegionLayoutEngine(container,pdfLayoutContext);
    try {
      rle.layout(containerContent);
    }
 catch (    BirtException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
}","/** 
 * Splits text for fixed layout reports.
 */
private void splitText(){
  Integer taskType=(Integer)engine.getOption(EngineTask.TASK_TYPE);
  if (taskType.intValue() == IEngineTask.TASK_RENDER && context.isFixedLayout()) {
    SizeBasedContent sizeBasedContent=context.getPageHintManager().getSizeBasedContentMapping().get(content.getInstanceID().toUniqueString());
    if (sizeBasedContent == null || sizeBasedContent.dimension == -1) {
      return;
    }
    HtmlRegionArea container=new HtmlRegionArea();
    container.setWidth(sizeBasedContent.width);
    IContainerContent containerContent=content.getReportContent().createContainerContent();
    containerContent.getChildren().add(content);
    LayoutContext pdfLayoutContext=new LayoutContext();
    pdfLayoutContext.setFormat(""String_Node_Str"");
    pdfLayoutContext.setFixedLayout(true);
    pdfLayoutContext.setInHtmlRender(true);
    pdfLayoutContext.setLocale(engine.locale);
    pdfLayoutContext.setHtmlLayoutContext(context);
    pdfLayoutContext.setMaxBP(Integer.MAX_VALUE);
    RegionLayoutEngine rle=new RegionLayoutEngine(container,pdfLayoutContext);
    try {
      rle.layout(containerContent);
    }
 catch (    BirtException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
}",0.962356792144026
69443,"private SizeBasedContent createSizeBasedContent(ContainerArea area){
  SizeBasedContent sizeBasedContent=new SizeBasedContent();
  if (area.content instanceof AbstractContentWrapper) {
    sizeBasedContent.content=((AbstractContentWrapper)area.content).getContent();
  }
 else {
    sizeBasedContent.content=area.content;
  }
  if (area instanceof BlockTextArea) {
    BlockTextArea blockText=(BlockTextArea)area;
    sizeBasedContent.floatPos=0;
    ArrayList<BlockTextArea> list=(ArrayList<BlockTextArea>)area.content.getExtension(IContent.LAYOUT_EXTENSION);
    if (list.size() > 1) {
      Iterator<BlockTextArea> i=list.iterator();
      int offsetInContent=0;
      int lastHeight=0;
      while (i.hasNext()) {
        offsetInContent+=lastHeight;
        BlockTextArea current=i.next();
        if (current == area) {
          break;
        }
        lastHeight=current.getHeight();
      }
      sizeBasedContent.offsetInContent=offsetInContent;
    }
 else {
      sizeBasedContent.offsetInContent=0;
    }
    sizeBasedContent.dimension=blockText.getHeight();
    sizeBasedContent.width=blockText.getWidth();
  }
 else   if (area instanceof InlineTextArea) {
    InlineTextArea inlineText=(InlineTextArea)area;
    InlineTextExtension ext=(InlineTextExtension)area.content.getExtension(IContent.LAYOUT_EXTENSION);
    ext.updatePageHintInfo(inlineText);
    sizeBasedContent.floatPos=ext.getFloatPos();
    sizeBasedContent.offsetInContent=ext.getOffsetInContent();
    sizeBasedContent.dimension=ext.getDimension();
    sizeBasedContent.width=ext.getWidthRestrict();
  }
 else {
    sizeBasedContent.floatPos=0;
    sizeBasedContent.offsetInContent=0;
    sizeBasedContent.dimension=0;
    sizeBasedContent.width=0;
  }
  return sizeBasedContent;
}","private SizeBasedContent createSizeBasedContent(ContainerArea area){
  SizeBasedContent sizeBasedContent=new SizeBasedContent();
  if (area.content instanceof AbstractContentWrapper) {
    sizeBasedContent.content=((AbstractContentWrapper)area.content).getContent();
  }
 else {
    sizeBasedContent.content=area.content;
  }
  if (area instanceof BlockTextArea) {
    BlockTextArea blockText=(BlockTextArea)area;
    sizeBasedContent.floatPos=0;
    ArrayList<BlockTextArea> list=(ArrayList<BlockTextArea>)area.content.getExtension(IContent.LAYOUT_EXTENSION);
    if (list.size() > 1) {
      Iterator<BlockTextArea> i=list.iterator();
      int offsetInContent=0;
      int lastHeight=0;
      while (i.hasNext()) {
        offsetInContent+=lastHeight;
        BlockTextArea current=i.next();
        if (current == area) {
          break;
        }
        lastHeight=current.getHeight();
      }
      sizeBasedContent.offsetInContent=offsetInContent;
    }
 else {
      sizeBasedContent.offsetInContent=0;
    }
    sizeBasedContent.dimension=blockText.getHeight();
    sizeBasedContent.width=blockText.getWidth();
  }
 else   if (area instanceof InlineTextArea) {
    InlineTextArea inlineText=(InlineTextArea)area;
    InlineTextExtension ext=(InlineTextExtension)area.content.getExtension(IContent.LAYOUT_EXTENSION);
    ext.updatePageHintInfo(inlineText);
    sizeBasedContent.floatPos=ext.getFloatPos();
    sizeBasedContent.offsetInContent=ext.getOffsetInContent();
    sizeBasedContent.dimension=ext.getDimension();
    sizeBasedContent.width=ext.getWidthRestrict();
  }
 else {
    sizeBasedContent.floatPos=-1;
    sizeBasedContent.offsetInContent=-1;
    sizeBasedContent.dimension=-1;
    sizeBasedContent.width=-1;
  }
  return sizeBasedContent;
}",0.9744897959183674
69444,"protected IStatus validateSemantics(Object structureOrHandle){
  AggregationArgument aggrArgument=null;
  String columnName=txtColumnName.getText();
  String dataTypeName=getTypeName(cmbDataType.getText());
  IAggrFunction aggrFunc=getSelectedFunction();
  try {
    String funcName=aggrFunc != null ? aggrFunc.getName() : BLANK;
    String filter=this.txtFilter.getText();
    if (structureOrHandle instanceof ComputedColumnHandle) {
      ComputedColumnHandle handle=(ComputedColumnHandle)structureOrHandle;
      handle.setName(columnName);
      handle.setDataType(dataTypeName);
      handle.setAggregateFunction(funcName);
      if (aggrFunc == null) {
        handle.setExpression(txtParams[0].getText().trim());
      }
 else {
        handle.setExpression(BLANK);
        handle.setFilterExpression(filter);
        handle.clearArgumentList();
        IParameterDefn[] params=aggrFunc.getParameterDefn();
        for (int i=0; i < params.length; i++) {
          aggrArgument=StructureFactory.createAggregationArgument();
          aggrArgument.setName(params[i].getName());
          aggrArgument.setValue(txtParams[i].getText().trim());
          handle.addArgument(aggrArgument);
        }
      }
    }
 else     if (structureOrHandle instanceof ComputedColumn) {
      ComputedColumn handle=(ComputedColumn)structureOrHandle;
      handle.setName(columnName);
      handle.setDataType(dataTypeName);
      handle.setAggregateFunction(funcName);
      if (aggrFunc == null) {
        handle.setExpression(txtParams[0].getText().trim());
      }
 else {
        handle.setExpression(BLANK);
        handle.setFilterExpression(filter);
        IParameterDefn[] params=aggrFunc.getParameterDefn();
        for (int i=0; i < params.length; i++) {
          aggrArgument=StructureFactory.createAggregationArgument();
          aggrArgument.setName(params[i].getName());
          aggrArgument.setValue(txtParams[i].getText().trim());
          handle.addArgument(aggrArgument);
        }
      }
      updateComputedColumns(handle);
    }
  }
 catch (  Exception e) {
    Status status=new Status(IStatus.ERROR,ReportPlugin.REPORT_UI,BLANK,e);
    return status;
  }
  return getOKStatus();
}","protected IStatus validateSemantics(Object structureOrHandle){
  AggregationArgument aggrArgument=null;
  String columnName=txtColumnName.getText();
  String dataTypeName=getTypeName(cmbDataType.getText());
  IAggrFunction aggrFunc=getSelectedFunction();
  try {
    String funcName=aggrFunc != null ? aggrFunc.getName() : BLANK;
    String filter=this.txtFilter.getText();
    if (structureOrHandle instanceof ComputedColumnHandle) {
      ComputedColumnHandle handle=(ComputedColumnHandle)structureOrHandle;
      handle.setName(columnName);
      handle.setDataType(dataTypeName);
      handle.setAggregateFunction(funcName);
      if (aggrFunc == null) {
        handle.setExpression(txtParams[0].getText().trim());
      }
 else {
        handle.setExpression(BLANK);
        handle.setFilterExpression(filter);
        handle.clearArgumentList();
        IParameterDefn[] params=aggrFunc.getParameterDefn();
        for (int i=0; i < params.length; i++) {
          if (txtParams[i].getText().trim().length() == 0)           continue;
          aggrArgument=StructureFactory.createAggregationArgument();
          aggrArgument.setName(params[i].getName());
          aggrArgument.setValue(txtParams[i].getText().trim());
          handle.addArgument(aggrArgument);
        }
      }
    }
 else     if (structureOrHandle instanceof ComputedColumn) {
      ComputedColumn handle=(ComputedColumn)structureOrHandle;
      handle.setName(columnName);
      handle.setDataType(dataTypeName);
      handle.setAggregateFunction(funcName);
      if (aggrFunc == null) {
        handle.setExpression(txtParams[0].getText().trim());
      }
 else {
        handle.setExpression(BLANK);
        handle.setFilterExpression(filter);
        IParameterDefn[] params=aggrFunc.getParameterDefn();
        for (int i=0; i < params.length; i++) {
          if (txtParams[i].getText().trim().length() == 0)           continue;
          aggrArgument=StructureFactory.createAggregationArgument();
          aggrArgument.setName(params[i].getName());
          aggrArgument.setValue(txtParams[i].getText().trim());
          handle.addArgument(aggrArgument);
        }
      }
      updateComputedColumns(handle);
    }
  }
 catch (  Exception e) {
    Status status=new Status(IStatus.ERROR,ReportPlugin.REPORT_UI,BLANK,e);
    return status;
  }
  return getOKStatus();
}",0.9653356735410268
69445,"/** 
 * @param binding
 * @param modelCmptdColumn
 * @throws AdapterException
 */
private void populateArgument(IBinding binding,ComputedColumnHandle modelCmptdColumn) throws AdapterException {
  Iterator it=modelCmptdColumn.argumentsIterator();
  while (it != null && it.hasNext()) {
    AggregationArgumentHandle arg=(AggregationArgumentHandle)it.next();
    try {
      binding.addArgument(this.adaptExpression((Expression)arg.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue()));
    }
 catch (    DataException e) {
      throw new AdapterException(e.getLocalizedMessage(),e);
    }
  }
}","/** 
 * @param binding
 * @param modelCmptdColumn
 * @throws AdapterException
 */
private void populateArgument(IBinding binding,ComputedColumnHandle modelCmptdColumn) throws AdapterException {
  Iterator it=modelCmptdColumn.argumentsIterator();
  while (it != null && it.hasNext()) {
    AggregationArgumentHandle arg=(AggregationArgumentHandle)it.next();
    try {
      Expression expr=(Expression)arg.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue();
      if (expr != null)       binding.addArgument(this.adaptExpression(expr));
    }
 catch (    DataException e) {
      throw new AdapterException(e.getLocalizedMessage(),e);
    }
  }
}",0.8944881889763779
69446,"private void defineName(String name,String refer){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",name);
  writer.attribute(""String_Node_Str"",refer);
  writer.closeTag(""String_Node_Str"");
}","public String defineName(String cells){
  return null;
}",0.2647058823529412
69447,"private void outputCSSStyles(Report reportDesign,ReportDesignHandle designHandle){
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    if (!enableInlineStyle) {
      writer.openTag(HTMLTags.TAG_STYLE);
      writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
      String styleNamePrefix;
      if (null != htmlIDNamespace) {
        styleNamePrefix=""String_Node_Str"" + htmlIDNamespace;
      }
 else {
        styleNamePrefix=""String_Node_Str"";
      }
      String defaultStyleName=reportDesign.getRootStyleName();
      Map styles=reportDesign.getStyles();
      Iterator iter=styles.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry entry=(Map.Entry)iter.next();
        String styleName=(String)entry.getKey();
        if (styleName != null) {
          IStyle style=(IStyle)entry.getValue();
          StringBuffer styleBuffer=new StringBuffer();
          if (styleName.equals(defaultStyleName)) {
            htmlEmitter.buildDefaultStyle(styleBuffer,style);
          }
 else {
            htmlEmitter.buildStyle(styleBuffer,style);
          }
          if (styleBuffer.length() > 0) {
            writer.style(styleNamePrefix + styleName,styleBuffer.toString());
            outputtedStyles.add(styleName);
          }
        }
      }
      writer.closeTag(HTMLTags.TAG_STYLE);
    }
  }
  hasCsslinks=false;
  if (designHandle != null) {
    List externalCsses=designHandle.getAllExternalIncludedCsses();
    if (null != externalCsses) {
      Iterator iter=externalCsses.iterator();
      while (iter.hasNext()) {
        IncludedCssStyleSheetHandle cssStyleSheetHandle=(IncludedCssStyleSheetHandle)iter.next();
        String href=cssStyleSheetHandle.getExternalCssURI();
        if (href != null) {
          hasCsslinks=true;
          writer.openTag(HTMLTags.TAG_LINK);
          writer.attribute(HTMLTags.ATTR_REL,""String_Node_Str"");
          writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
          writer.attribute(HTMLTags.ATTR_HREF,href);
          writer.closeTag(HTMLTags.TAG_LINK);
        }
      }
    }
  }
}","private void outputCSSStyles(Report reportDesign,ReportDesignHandle designHandle){
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    if (!enableInlineStyle) {
      openStyleSheet();
      String styleNamePrefix;
      if (null != htmlIDNamespace) {
        styleNamePrefix=""String_Node_Str"" + htmlIDNamespace;
      }
 else {
        styleNamePrefix=""String_Node_Str"";
      }
      String defaultStyleName=reportDesign.getRootStyleName();
      Map styles=reportDesign.getStyles();
      Iterator iter=styles.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry entry=(Map.Entry)iter.next();
        String styleName=(String)entry.getKey();
        if (styleName != null) {
          IStyle style=(IStyle)entry.getValue();
          StringBuffer styleBuffer=new StringBuffer();
          if (styleName.equals(defaultStyleName)) {
            htmlEmitter.buildDefaultStyle(styleBuffer,style);
          }
 else {
            htmlEmitter.buildStyle(styleBuffer,style);
          }
          if (styleBuffer.length() > 0) {
            writer.style(styleNamePrefix + styleName,styleBuffer.toString());
            outputtedStyles.add(styleName);
          }
        }
      }
      closeStyleSheet();
    }
  }
  hasCsslinks=false;
  if (designHandle != null) {
    List externalCsses=designHandle.getAllExternalIncludedCsses();
    if (null != externalCsses) {
      Iterator iter=externalCsses.iterator();
      while (iter.hasNext()) {
        IncludedCssStyleSheetHandle cssStyleSheetHandle=(IncludedCssStyleSheetHandle)iter.next();
        String href=cssStyleSheetHandle.getExternalCssURI();
        if (href != null) {
          hasCsslinks=true;
          writer.openTag(HTMLTags.TAG_LINK);
          writer.attribute(HTMLTags.ATTR_REL,""String_Node_Str"");
          writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
          writer.attribute(HTMLTags.ATTR_HREF,href);
          writer.closeTag(HTMLTags.TAG_LINK);
        }
      }
    }
  }
}",0.2059108527131783
69448,"/** 
 * This method is called when the plug-in is stopped
 */
public void stop(BundleContext context) throws Exception {
  super.stop(context);
  Platform.setPlatform(null);
  Platform.setContextClassLoader(null);
  FunctionProvider.setFunctionProvider(null);
}","/** 
 * This method is called when the plug-in is stopped
 */
public void stop(BundleContext context) throws Exception {
  super.stop(context);
  Platform.setPlatform(null);
  Platform.setContextClassLoader(null);
  FunctionProvider.setFunctionProvider(null);
  ScriptEngineFactoryManager.setInstance(null);
}",0.9157894736842104
69449,"/** 
 * This method is called upon plug-in activation.
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  Platform.setPlatform(new EclipsePlatform(context));
  ClassLoader contextClassLoader=(ClassLoader)AccessController.doPrivileged(new PrivilegedAction<Object>(){
    public Object run(){
      return Thread.currentThread().getContextClassLoader();
    }
  }
);
  Platform.setContextClassLoader(contextClassLoader);
  FunctionProvider.setFunctionProvider(new FunctionProviderImpl());
}","/** 
 * This method is called upon plug-in activation.
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  Platform.setPlatform(new EclipsePlatform(context));
  ClassLoader contextClassLoader=(ClassLoader)AccessController.doPrivileged(new PrivilegedAction<Object>(){
    public Object run(){
      return Thread.currentThread().getContextClassLoader();
    }
  }
);
  Platform.setContextClassLoader(contextClassLoader);
  FunctionProvider.setFunctionProvider(new FunctionProviderImpl());
  ScriptEngineFactoryManager.setInstance(new ScriptEngineFactoryManagerImpl());
}",0.929453262786596
69450,"private ScriptContext(ScriptContext scriptContext,Object scope,Map<String,Object> attributes){
  if (scriptContext == null) {
    engines=new HashMap<String,IScriptEngine>();
  }
 else {
    engines=scriptContext.engines;
  }
  this.attributes=new HashMap<String,Object>();
  if (attributes != null) {
    this.attributes.putAll(attributes);
  }
  parent=scriptContext;
  scriptContexts=new HashMap<String,IScriptContext>();
  this.scope=scope;
  this.engineFactoryManager=new ScriptEngineFactoryManager();
}","private ScriptContext(ScriptContext scriptContext,Object scope,Map<String,Object> attributes){
  if (scriptContext == null) {
    engines=new HashMap<String,IScriptEngine>();
  }
 else {
    engines=scriptContext.engines;
  }
  this.attributes=new HashMap<String,Object>();
  if (attributes != null) {
    this.attributes.putAll(attributes);
  }
  parent=scriptContext;
  scriptContexts=new HashMap<String,IScriptContext>();
  this.scope=scope;
}",0.9350104821802936
69451,"public IScriptEngine getScriptEngine(String scriptName) throws BirtException {
  if (scriptName == null) {
    throw new NullPointerException();
  }
  if (engines.containsKey(scriptName)) {
    return engines.get(scriptName);
  }
  IScriptEngineFactory factory=engineFactoryManager.getScriptEngineFactory(scriptName);
  if (factory == null) {
    throw new BirtException(""String_Node_Str"" + scriptName);
  }
  return createEngine(factory);
}","public IScriptEngine getScriptEngine(String scriptName) throws BirtException {
  if (scriptName == null) {
    throw new NullPointerException();
  }
  if (engines.containsKey(scriptName)) {
    return engines.get(scriptName);
  }
  IScriptEngineFactory factory=ScriptEngineFactoryManager.getInstance().getScriptEngineFactory(scriptName);
  if (factory == null) {
    throw new BirtException(""String_Node_Str"" + scriptName);
  }
  return createEngine(factory);
}",0.975609756097561
69452,"public IScriptEngineFactory getScriptEngineFactory(String scriptLanguage){
  if (factories.containsKey(scriptLanguage)) {
    return factories.get(scriptLanguage);
  }
  if (configs.containsKey(scriptLanguage)) {
    IConfigurationElement configuration=configs.get(scriptLanguage);
    try {
      Object object=configuration.createExecutableExtension(""String_Node_Str"");
      if (object instanceof IScriptEngineFactory) {
        IScriptEngineFactory factory=(IScriptEngineFactory)object;
        factories.put(scriptLanguage,factory);
        return factory;
      }
    }
 catch (    FrameworkException e) {
      logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
    }
  }
  return null;
}","synchronized public IScriptEngineFactory getScriptEngineFactory(String language){
  if (factories.containsKey(language)) {
    return factories.get(language);
  }
  IScriptEngineFactory factory=createFactory(language);
  factories.put(language,factory);
  return factory;
}",0.3550051599587203
69453,"public ScriptEngineFactoryManager(){
  factories=new HashMap<String,IScriptEngineFactory>();
}","protected ScriptEngineFactoryManager(){
  factories=new HashMap<String,IScriptEngineFactory>();
}",0.9424083769633508
69454,"public void performTransfer(){
  if (getModel() instanceof TemplateElementHandle) {
    try {
      ((TemplateReportItemHandle)getModel()).transformToReportItem((ReportItemHandle)copiedHandle);
    }
 catch (    SemanticException e) {
      SessionHandleAdapter.getInstance().getCommandStack().rollbackAll();
    }
 finally {
      copiedHandle=null;
    }
  }
}","public void performTransfer(){
  if (getModel() instanceof TemplateElementHandle) {
    try {
      ((TemplateReportItemHandle)getModel()).transformToReportItem((ReportItemHandle)copiedHandle);
      ProviderFactory.createProvider(copiedHandle).performRequest(copiedHandle,new Request(IRequestConstants.REQUST_REVERT_TO_REPORTITEM));
    }
 catch (    SemanticException e) {
      SessionHandleAdapter.getInstance().getCommandStack().rollbackAll();
    }
catch (    Exception e) {
      SessionHandleAdapter.getInstance().getCommandStack().rollbackAll();
    }
 finally {
      copiedHandle=null;
    }
  }
}",0.7463917525773196
69455,"/** 
 * Transfer background for current page to Doc format. Now, the exported file will apply the first background properties, and followed background will ignore. In addition, Since the Word only support fill-in background, the background attach, pos, posX, posY and repeat are not mapped to Word easyly. At present, ignore those properties.
 * @throws IOException
 * @TODO support background properties. attach, pos, posx, posy and repeat.
 */
protected void drawDocumentBackground() throws IOException {
  IStyle style=previousPage.getComputedStyle();
  String backgroundColor=style.getBackgroundColor();
  String backgroundImageUrl=EmitterUtil.getBackgroundImageUrl(style,reportContent.getDesign().getReportDesign(),reportContext.getAppContext());
  String height=style.getBackgroundHeight();
  String width=style.getBackgroundWidth();
  wordWriter.drawDocumentBackground(backgroundColor,backgroundImageUrl,height,width);
}","/** 
 * Transfer background for current page to Doc format. Now, the exported file will apply the first background properties, and followed background will ignore. In addition, Since the Word only support fill-in background, the background attach, pos, posX, posY and repeat are not mapped to Word easyly. At present, ignore those properties.
 * @throws IOException
 * @TODO support background properties. attach, pos, posx, posy and repeat.
 */
protected void drawDocumentBackground() throws IOException {
  IStyle style=previousPage.getStyle();
  String backgroundColor=style.getBackgroundColor();
  String backgroundImageUrl=EmitterUtil.getBackgroundImageUrl(style,reportContent.getDesign().getReportDesign(),reportContext.getAppContext());
  String height=style.getBackgroundHeight();
  String width=style.getBackgroundWidth();
  wordWriter.drawDocumentBackground(backgroundColor,backgroundImageUrl,height,width);
}",0.9956663055254604
69456,"private void writeHeaderFooter() throws IOException, BirtException {
  IStyle style=previousPage.getComputedStyle();
  String backgroundHeight=style.getBackgroundHeight();
  String backgroundWidth=style.getBackgroundWidth();
  if (previousPage.getPageHeader() != null || backgroundHeight != null || backgroundWidth != null) {
    SimpleMasterPageDesign master=(SimpleMasterPageDesign)previousPage.getGenerateBy();
    wordWriter.startHeader(!master.isShowHeaderOnFirst(),headerHeight,contentWidth);
    if (backgroundHeight != null || backgroundWidth != null) {
      String backgroundImageUrl=EmitterUtil.getBackgroundImageUrl(style,reportContent.getDesign().getReportDesign(),reportContext.getAppContext());
      wordWriter.drawDocumentBackgroundImage(backgroundImageUrl,backgroundHeight,backgroundWidth,WordUtil.twipToPt(topMargin),WordUtil.twipToPt(leftMargin),WordUtil.twipToPt(pageHeight),WordUtil.twipToPt(pageWidth));
    }
    contentVisitor.visitChildren(previousPage.getPageHeader(),null);
    wordWriter.endHeader();
  }
  if (previousPage.getPageFooter() != null) {
    wordWriter.startFooter(footerHeight,contentWidth);
    contentVisitor.visitChildren(previousPage.getPageFooter(),null);
    wordWriter.endFooter();
  }
}","private void writeHeaderFooter() throws IOException, BirtException {
  IStyle style=previousPage.getStyle();
  String backgroundHeight=style.getBackgroundHeight();
  String backgroundWidth=style.getBackgroundWidth();
  if (previousPage.getPageHeader() != null || backgroundHeight != null || backgroundWidth != null) {
    SimpleMasterPageDesign master=(SimpleMasterPageDesign)previousPage.getGenerateBy();
    wordWriter.startHeader(!master.isShowHeaderOnFirst(),headerHeight,contentWidth);
    if (backgroundHeight != null || backgroundWidth != null) {
      String backgroundImageUrl=EmitterUtil.getBackgroundImageUrl(style,reportContent.getDesign().getReportDesign(),reportContext.getAppContext());
      wordWriter.drawDocumentBackgroundImage(backgroundImageUrl,backgroundHeight,backgroundWidth,WordUtil.twipToPt(topMargin),WordUtil.twipToPt(leftMargin),WordUtil.twipToPt(pageHeight),WordUtil.twipToPt(pageWidth));
    }
    contentVisitor.visitChildren(previousPage.getPageHeader(),null);
    wordWriter.endHeader();
  }
  if (previousPage.getPageFooter() != null) {
    wordWriter.startFooter(footerHeight,contentWidth);
    contentVisitor.visitChildren(previousPage.getPageFooter(),null);
    wordWriter.endFooter();
  }
}",0.9967558799675588
69457,"public Object[] getElements(Object inputElement){
  if (inputElement == null)   return new Object[0];
  if (inputElement instanceof JointDataSetHandle) {
    JointDataSetHandle handle=(JointDataSetHandle)inputElement;
    List params=getSubDataSetParameters(handle,""String_Node_Str"",0);
    return params.toArray();
  }
  if (!(inputElement instanceof PropertyHandle))   return new Object[0];
  Iterator iter=((PropertyHandle)inputElement).iterator();
  ArrayList params=new ArrayList(10);
  if (iter != null) {
    while (iter.hasNext()) {
      params.add(iter.next());
    }
  }
  refreshPositions();
  return params.toArray();
}","public Object[] getElements(Object inputElement){
  if (inputElement == null)   return new Object[0];
  if (inputElement instanceof JointDataSetHandle) {
    JointDataSetHandle handle=(JointDataSetHandle)inputElement;
    List params=getSubDataSetParameters(handle,""String_Node_Str"",0);
    return params.toArray();
  }
  if (inputElement instanceof DerivedDataSetHandle) {
    List paramList=getDerivedDataSetParameters((DerivedDataSetHandle)inputElement,""String_Node_Str"",0);
    return paramList.toArray();
  }
  if (!(inputElement instanceof PropertyHandle))   return new Object[0];
  Iterator iter=((PropertyHandle)inputElement).iterator();
  ArrayList params=new ArrayList(10);
  if (iter != null) {
    while (iter.hasNext()) {
      params.add(iter.next());
    }
  }
  refreshPositions();
  return params.toArray();
}",0.8669410150891632
69458,"/** 
 * Create parameter page control, if the datasetHandle is ODA, add the ""linked with report parameter"" cell.
 * @param parent
 * @return
 */
private Control createParameterPageControl(Composite parent){
  viewer=new PropertyHandleTableViewer(parent,true,true,true);
  TableColumn column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(""String_Node_Str"");
  column.setResizable(false);
  column.setWidth(23);
  DataSetHandle dataSetHandle=(DataSetHandle)getContainer().getModel();
  isOdaDataSetHandle=ParameterPageUtil.isOdaDataSetHandle(dataSetHandle);
  isJointOrDerivedDataSetHandle=ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle);
  if (isOdaDataSetHandle) {
    String[] cellLabels=ParameterPageUtil.odaCellLabels;
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[0]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[1]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[2]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[3]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[4]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[5]);
    column.setWidth(180);
  }
 else {
    String[] cellLabels=ParameterPageUtil.cellLabels;
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[0]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[1]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[2]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[3]);
    column.setWidth(100);
    if (isJointOrDerivedDataSetHandle) {
      column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
      column.setText(ParameterPageUtil.odaCellLabels[5]);
      column.setWidth(180);
    }
  }
  viewer.getViewer().setContentProvider(new ParameterViewContentProvider());
  viewer.getViewer().setLabelProvider(new ParameterViewLableProvider(dataSetHandle));
  adjustParameterOnPosition(parameters);
  if (ParameterPageUtil.isJointDataSetHandle(dataSetHandle)) {
    viewer.getViewer().setInput((JointDataSetHandle)dataSetHandle);
  }
 else {
    viewer.getViewer().setInput(parameters);
  }
  setToolTips();
  if (!isJointOrDerivedDataSetHandle) {
    addRefreshMenu();
    addListeners();
    dataSetHandle.addListener(this);
  }
  return viewer.getControl();
}","/** 
 * Create parameter page control, if the datasetHandle is ODA, add the ""linked with report parameter"" cell.
 * @param parent
 * @return
 */
private Control createParameterPageControl(Composite parent){
  viewer=new PropertyHandleTableViewer(parent,true,true,true);
  TableColumn column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(""String_Node_Str"");
  column.setResizable(false);
  column.setWidth(23);
  DataSetHandle dataSetHandle=(DataSetHandle)getContainer().getModel();
  isOdaDataSetHandle=ParameterPageUtil.isOdaDataSetHandle(dataSetHandle);
  isJointOrDerivedDataSetHandle=ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle);
  if (isOdaDataSetHandle) {
    String[] cellLabels=ParameterPageUtil.odaCellLabels;
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[0]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[1]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[2]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[3]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[4]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[5]);
    column.setWidth(180);
  }
 else {
    String[] cellLabels=ParameterPageUtil.cellLabels;
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[0]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[1]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[2]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[3]);
    column.setWidth(100);
    if (isJointOrDerivedDataSetHandle) {
      column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
      column.setText(ParameterPageUtil.odaCellLabels[5]);
      column.setWidth(180);
    }
  }
  viewer.getViewer().setContentProvider(new ParameterViewContentProvider());
  viewer.getViewer().setLabelProvider(new ParameterViewLableProvider(dataSetHandle));
  adjustParameterOnPosition(parameters);
  if (ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle)) {
    viewer.getViewer().setInput(dataSetHandle);
  }
 else {
    viewer.getViewer().setInput(parameters);
  }
  setToolTips();
  if (!isJointOrDerivedDataSetHandle) {
    addRefreshMenu();
    addListeners();
  }
  dataSetHandle.addListener(this);
  return viewer.getControl();
}",0.9842478795222434
69459,"public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter,boolean visible) throws BirtException {
switch (content.getContentType()) {
case IContent.TABLE_CONTENT:
    nestCount++;
  if (buffers == null) {
    ITableContent table=(ITableContent)content;
    boolean hasPageBreak=hasPageBreak(table);
    if (hasPageBreak) {
      if (currentTableIndex < 0) {
        INode[] nodeList=currentBuffer.getNodeStack();
        pageBreakIndexs=getPageBreakIndex(table);
        repeatEnd=getRepeatEnd(table);
        currentBuffer.startContainer(createTable(table,pageBreakIndexs,0),isFirst,emitter,visible);
        currentTableIndex=nestCount;
        buffers=new IPageBuffer[pageBreakIndexs.length];
        buffers[0]=currentBuffer;
        String tableId=table.getInstanceID().toUniqueString();
        currentBuffer.addTableColumnHint(new TableColumnHint(tableId,0,pageBreakIndexs[0] + 1));
        for (int i=1; i < pageBreakIndexs.length; i++) {
          buffers[i]=new TableBreakBuffer(null,context);
          INode[] list=new INode[nodeList.length + 1];
          ITableContent newTable=createTable(table,pageBreakIndexs,i);
          list[0]=new ContainerBufferNode(newTable,emitter,null,true);
          for (int j=0; j < nodeList.length; j++) {
            list[j + 1]=nodeList[j];
          }
          buffers[i].openPage(list);
          if (hasRepeatedColumn && repeatEnd > repeatStart) {
            buffers[i].addTableColumnHint(new TableColumnHint(tableId,repeatStart,repeatEnd - repeatStart));
          }
          buffers[i].addTableColumnHint(new TableColumnHint(tableId,pageBreakIndexs[i - 1] + 1,pageBreakIndexs[i] - pageBreakIndexs[i - 1]));
        }
      }
    }
 else {
      currentBuffer.startContainer(content,isFirst,emitter,visible);
    }
  }
 else {
    currentBuffer.startContainer(content,isFirst,emitter,visible);
  }
break;
case IContent.TABLE_GROUP_CONTENT:
case IContent.TABLE_BAND_CONTENT:
case IContent.ROW_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
currentIndex=0;
currentBuffer=buffers[0];
startContainerInPages(content,isFirst,emitter,visible);
if (hasRepeatedColumn) {
  repeatEvent.clear();
}
}
 else {
currentBuffer.startContainer(content,isFirst,emitter,visible);
}
break;
case IContent.CELL_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
if (hasRepeatedColumn && isRepeatedCell((ICellContent)content)) {
isRepeatStatus=true;
}
int index=getStartPageIndex((ICellContent)content);
if (index != currentIndex) {
currentIndex=index;
repeatCells(emitter);
}
currentBuffer=buffers[currentIndex];
if (isRepeatCellContent) {
if (currentIndex >= 1) {
ICellContent cc=(ICellContent)content;
int start=cc.getColumn();
if (start > pageBreakIndexs[currentIndex - 1] + 1) repeatCellContent(emitter);
repeatCellContentEvent.clear();
isRepeatCellContent=false;
}
}
if (((ICellContent)content).repeatContent()) {
int colSpan=((ICellContent)content).getColSpan();
if (colSpan > 1) {
int col=((ICellContent)content).getColumn();
if (col + colSpan > pageBreakIndexs[currentIndex] + 1) {
  isRepeatCellContent=true;
}
}
}
}
currentBuffer.startContainer(content,isFirst,emitter,visible);
break;
default :
currentBuffer.startContainer(content,isFirst,emitter,visible);
break;
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.START_CONTAINER_EVENT));
}
if (isRepeatCellContent) {
repeatCellContentEvent.add(new ContentEvent(content,visible,ContentEvent.START_CONTAINER_EVENT));
}
}","public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter,boolean visible) throws BirtException {
switch (content.getContentType()) {
case IContent.TABLE_CONTENT:
    nestCount++;
  if (buffers == null) {
    ITableContent table=(ITableContent)content;
    boolean hasPageBreak=hasPageBreak(table);
    if (hasPageBreak) {
      if (currentTableIndex < 0) {
        INode[] nodeList=currentBuffer.getNodeStack();
        pageBreakIndexs=getPageBreakIndex(table);
        repeatEnd=getRepeatEnd(table);
        currentBuffer.startContainer(createTable(table,pageBreakIndexs,0),isFirst,emitter,visible);
        currentTableIndex=nestCount;
        buffers=new IPageBuffer[pageBreakIndexs.length];
        buffers[0]=currentBuffer;
        String tableId=table.getInstanceID().toUniqueString();
        currentBuffer.addTableColumnHint(new TableColumnHint(tableId,0,pageBreakIndexs[0] + 1));
        for (int i=1; i < pageBreakIndexs.length; i++) {
          buffers[i]=new TableBreakBuffer(null,context);
          INode[] list=new INode[nodeList.length + 1];
          ITableContent newTable=createTable(table,pageBreakIndexs,i);
          list[0]=new ContainerBufferNode(newTable,emitter,null,true);
          for (int j=0; j < nodeList.length; j++) {
            list[j + 1]=nodeList[j];
          }
          buffers[i].openPage(list);
          if (hasRepeatedColumn && repeatEnd > repeatStart) {
            buffers[i].addTableColumnHint(new TableColumnHint(tableId,repeatStart,repeatEnd - repeatStart));
          }
          buffers[i].addTableColumnHint(new TableColumnHint(tableId,pageBreakIndexs[i - 1] + 1,pageBreakIndexs[i] - pageBreakIndexs[i - 1]));
        }
      }
    }
 else {
      currentBuffer.startContainer(content,isFirst,emitter,visible);
    }
  }
 else {
    currentBuffer.startContainer(content,isFirst,emitter,visible);
  }
break;
case IContent.TABLE_GROUP_CONTENT:
case IContent.TABLE_BAND_CONTENT:
case IContent.ROW_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
currentIndex=0;
currentBuffer=buffers[0];
startContainerInPages(content,isFirst,emitter,visible);
if (hasRepeatedColumn) {
  repeatEvent.clear();
}
}
 else {
currentBuffer.startContainer(content,isFirst,emitter,visible);
}
break;
case IContent.CELL_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
if (hasRepeatedColumn && isRepeatedCell((ICellContent)content)) {
isRepeatStatus=true;
}
int index=getStartPageIndex((ICellContent)content);
if (index != currentIndex) {
for (int i=currentIndex + 1; i <= index; i++) {
currentBuffer=buffers[i];
repeatCells(emitter);
}
currentIndex=index;
}
currentBuffer=buffers[currentIndex];
if (isRepeatCellContent) {
if (currentIndex >= 1) {
ICellContent cc=(ICellContent)content;
int start=cc.getColumn();
if (start > pageBreakIndexs[currentIndex - 1] + 1) repeatCellContent(emitter);
repeatCellContentEvent.clear();
isRepeatCellContent=false;
}
}
if (((ICellContent)content).repeatContent()) {
int colSpan=((ICellContent)content).getColSpan();
if (colSpan > 1) {
int col=((ICellContent)content).getColumn();
if (col + colSpan > pageBreakIndexs[currentIndex] + 1) {
  isRepeatCellContent=true;
}
}
}
}
currentBuffer.startContainer(content,isFirst,emitter,visible);
break;
default :
currentBuffer.startContainer(content,isFirst,emitter,visible);
break;
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.START_CONTAINER_EVENT));
}
if (isRepeatCellContent) {
repeatCellContentEvent.add(new ContentEvent(content,visible,ContentEvent.START_CONTAINER_EVENT));
}
}",0.9890449438202248
69460,"/** 
 * Convert DimensionType to a pixel value.
 * @param d DimensionType value
 * @return pixel value
 */
public static int getDimensionPixelValue(DimensionType d,int dpi){
  if (d == null) {
    return 0;
  }
  try {
    String units=d.getUnits();
    if (EngineIRConstants.UNITS_PX.equals(units)) {
      return (int)d.getMeasure();
    }
 else     if (EngineIRConstants.UNITS_PT.equals(units) || EngineIRConstants.UNITS_CM.equals(units) || EngineIRConstants.UNITS_MM.equals(units)|| EngineIRConstants.UNITS_PC.equals(units)|| EngineIRConstants.UNITS_IN.equals(units)) {
      double point=d.convertTo(EngineIRConstants.UNITS_PT);
      if (dpi > 0) {
        return (int)(point / 72 * dpi);
      }
 else {
        return (int)(point / 72 * 96);
      }
    }
 else     if (EngineIRConstants.UNITS_PERCENTAGE.equals(units)) {
      return 0;
    }
  }
 catch (  Exception e) {
    return 0;
  }
  return 0;
}","/** 
 * Convert DimensionType to a pixel value.
 * @param d DimensionType value
 * @return pixel value
 */
public static int getDimensionPixelValue(DimensionType d,int dpi){
  if (d == null) {
    return 0;
  }
  int valueType=d.getValueType();
  if (valueType == DimensionType.TYPE_DIMENSION) {
    String units=d.getUnits();
    if (EngineIRConstants.UNITS_PX.equals(units)) {
      return (int)d.getMeasure();
    }
 else     if (EngineIRConstants.UNITS_PT.equals(units) || EngineIRConstants.UNITS_CM.equals(units) || EngineIRConstants.UNITS_MM.equals(units)|| EngineIRConstants.UNITS_PC.equals(units)|| EngineIRConstants.UNITS_IN.equals(units)) {
      double point=d.convertTo(EngineIRConstants.UNITS_PT);
      if (dpi > 0) {
        return (int)(point / 72 * dpi);
      }
 else {
        return (int)(point / 72 * 96);
      }
    }
  }
 else   if (valueType == DimensionType.TYPE_CHOICE) {
    String choice=d.getChoice();
    if (""String_Node_Str"".equalsIgnoreCase(choice)) {
      return 3;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(choice)) {
      return 5;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(choice)) {
      return 1;
    }
  }
  return 0;
}",0.7643979057591623
69461,"protected void addRepeatedItem() throws BirtException {
  if (repeatList != null && repeatList.size() > 0) {
    if (!inHeaderBand) {
      if (getRepeatedHeight() < getMaxAvaHeight()) {
        for (int i=0; i < repeatList.size(); i++) {
          ContainerArea row=(ContainerArea)repeatList.get(i);
          ContainerArea cloneRow=row.deepClone();
          if (i == 0 && cloneRow instanceof RowArea) {
            ((RowArea)cloneRow).needResolveBorder=true;
          }
          cloneRow.finished=true;
          children.add(i,cloneRow);
          cloneRow.setParent(this);
          update(cloneRow);
          cloneRow.setAllocatedY(currentBP);
        }
      }
 else {
        repeatList=null;
      }
    }
  }
}","protected void addRepeatedItem() throws BirtException {
  if (repeatList != null && repeatList.size() > 0) {
    if (!inHeaderBand) {
      if (getRepeatedHeight() < getMaxAvaHeight()) {
        for (int i=0; i < repeatList.size(); i++) {
          ContainerArea row=(ContainerArea)repeatList.get(i);
          ContainerArea cloneRow=row.deepClone();
          if (cloneRow instanceof RowArea) {
            ((RowArea)cloneRow).needResolveBorder=true;
          }
          cloneRow.finished=true;
          children.add(i,cloneRow);
          cloneRow.setParent(this);
          update(cloneRow);
          cloneRow.setAllocatedY(currentBP);
        }
      }
 else {
        repeatList=null;
      }
    }
  }
}",0.9930362116991645
69462,"protected void addCaption(String caption) throws BirtException {
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  ReportContent report=(ReportContent)content.getReportContent();
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setText(caption);
  StyleDeclaration style=new StyleDeclaration(report.getCSSEngine());
  style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  captionLabel.setInlineStyle(style);
  RowArea captionRow=new RowArea(getColumnCount());
  captionRow.setParent(this);
  captionRow.setWidth(width);
  CellArea captionCell=new CellArea();
  captionCell.setColSpan(getColumnCount());
  captionCell.setWidth(width);
  captionCell.setMaxAvaWidth(width);
  captionRow.children.add(captionCell);
  ILayout layout=new BlockTextArea(captionCell,context,captionLabel);
  layout.layout();
  int h=((BlockContainerArea)layout).getAllocatedHeight();
  captionCell.setContentHeight(h);
  captionRow.setHeight(captionCell.getAllocatedHeight());
  add(captionRow);
  if (repeatList == null) {
    repeatList=new ArrayList();
  }
  repeatList.add(captionRow);
  update(captionRow);
}","protected void addCaption(String caption) throws BirtException {
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  ReportContent report=(ReportContent)content.getReportContent();
  IRowContent row=report.createRowContent();
  row.setParent(content);
  ICellContent cell=report.createCellContent();
  cell.setColSpan(getColumnCount());
  cell.setColumn(0);
  StyleDeclaration cstyle=new StyleDeclaration(report.getCSSEngine());
  cstyle.setProperty(IStyle.STYLE_BORDER_TOP_STYLE,IStyle.HIDDEN_VALUE);
  cstyle.setProperty(IStyle.STYLE_BORDER_LEFT_STYLE,IStyle.HIDDEN_VALUE);
  cstyle.setProperty(IStyle.STYLE_BORDER_RIGHT_STYLE,IStyle.HIDDEN_VALUE);
  cell.setInlineStyle(cstyle);
  cell.setParent(row);
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setParent(cell);
  captionLabel.setText(caption);
  StyleDeclaration style=new StyleDeclaration(report.getCSSEngine());
  style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  captionLabel.setInlineStyle(style);
  RowArea captionRow=new RowArea(this,context,row);
  captionRow.setParent(this);
  captionRow.setWidth(width);
  captionRow.initialize();
  CellArea captionCell=new CellArea(captionRow,context,cell);
  captionCell.setWidth(width);
  captionCell.setMaxAvaWidth(width);
  captionCell.initialize();
  captionRow.children.add(captionCell);
  ILayout layout=new BlockTextArea(captionCell,context,captionLabel);
  layout.layout();
  int h=((BlockContainerArea)layout).getAllocatedHeight();
  captionCell.setContentHeight(h);
  captionRow.setHeight(captionCell.getAllocatedHeight());
  captionRow.finished=true;
  add(captionRow);
  if (repeatList == null) {
    repeatList=new ArrayList();
  }
  repeatList.add(captionRow);
  update(captionRow);
}",0.7477785372522214
69463,"public void testValidateBinding() throws Exception {
  checkDuplicateBindingName();
}","public void testValidateBinding() throws Exception {
  checkDuplicateBindingName();
  checkInexistentReference();
  checkReferenceCycle();
}",0.7555555555555555
69464,"/** 
 * @param defn
 * @param scope
 */
public PreparedCubeQuery(ICubeQueryDefinition defn,DataEngineSession session,DataEngineContext context,Map appContext) throws DataException {
  this.cubeQueryDefn=defn;
  this.session=session;
  this.context=context;
  this.appContext=appContext;
}","/** 
 * @param defn
 * @param scope
 */
public PreparedCubeQuery(ICubeQueryDefinition defn,DataEngineSession session,DataEngineContext context,Map appContext) throws DataException {
  this.cubeQueryDefn=defn;
  this.session=session;
  this.context=context;
  this.appContext=appContext;
  if (!containsDrillFilter(defn))   validateQuery();
}",0.9157392686804452
69465,"private void initializeScriptContext(){
  scriptContext=new ScriptContext();
  if (engine != null) {
    EngineConfig config=engine.getConfig();
    registerBeans(config.getConfigMap());
    registerBeans(config.getScriptObjects());
    scriptContext.setAttribute(""String_Node_Str"",config.getStatusHandler());
  }
  scriptContext.setLocale(locale);
  scriptContext.setAttribute(""String_Node_Str"",new ReportObject());
  scriptContext.setAttribute(""String_Node_Str"",params);
  scriptContext.setAttribute(""String_Node_Str"",configs);
  scriptContext.setAttribute(""String_Node_Str"",new Long(pageNumber));
  scriptContext.setAttribute(""String_Node_Str"",new Long(totalPage));
  scriptContext.setAttribute(""String_Node_Str"",this);
  scriptContext.setAttribute(""String_Node_Str"",pageVariables);
  if (runnable != null) {
    registerDesign(runnable);
  }
  if (reportContext != null) {
    scriptContext.setAttribute(""String_Node_Str"",reportContext);
  }
  scriptContext.setLocale(locale);
  scriptContext.setAttribute(""String_Node_Str"",new Long(pageNumber));
  scriptContext.setAttribute(""String_Node_Str"",new Long(totalPage));
  if (task != null) {
    IStatusHandler handler=task.getStatusHandler();
    if (handler != null) {
      handler.initialize();
      scriptContext.setAttribute(""String_Node_Str"",handler);
    }
  }
  if (transientBeans != null) {
    Iterator entries=transientBeans.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      scriptContext.setAttribute((String)entry.getKey(),entry.getValue());
    }
  }
  if (persistentBeans != null) {
    Iterator entries=persistentBeans.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      registerInRoot((String)entry.getKey(),entry.getValue());
    }
  }
  scriptContext.setApplicationClassLoader(getApplicationClassLoader());
}","private void initializeScriptContext(){
  scriptContext=new ScriptContext();
  if (engine != null) {
    EngineConfig config=engine.getConfig();
    IStatusHandler statusHandler=config.getStatusHandler();
    if (statusHandler != null) {
      scriptContext.setAttribute(""String_Node_Str"",statusHandler);
    }
  }
  scriptContext.setLocale(locale);
  scriptContext.setAttribute(""String_Node_Str"",new ReportObject());
  scriptContext.setAttribute(""String_Node_Str"",params);
  scriptContext.setAttribute(""String_Node_Str"",configs);
  scriptContext.setAttribute(""String_Node_Str"",new Long(pageNumber));
  scriptContext.setAttribute(""String_Node_Str"",new Long(totalPage));
  scriptContext.setAttribute(""String_Node_Str"",this);
  scriptContext.setAttribute(""String_Node_Str"",pageVariables);
  if (runnable != null) {
    registerDesign(runnable);
  }
  if (reportContext != null) {
    scriptContext.setAttribute(""String_Node_Str"",reportContext);
  }
  scriptContext.setLocale(locale);
  scriptContext.setAttribute(""String_Node_Str"",new Long(pageNumber));
  scriptContext.setAttribute(""String_Node_Str"",new Long(totalPage));
  if (task != null) {
    IStatusHandler handler=task.getStatusHandler();
    if (handler != null) {
      handler.initialize();
      scriptContext.setAttribute(""String_Node_Str"",handler);
    }
  }
  if (transientBeans != null) {
    Iterator entries=transientBeans.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      scriptContext.setAttribute((String)entry.getKey(),entry.getValue());
    }
  }
  if (persistentBeans != null) {
    Iterator entries=persistentBeans.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      registerInRoot((String)entry.getKey(),entry.getValue());
    }
  }
  scriptContext.setApplicationClassLoader(getApplicationClassLoader());
}",0.8706192358366271
69466,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_MARKERS);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  GridLayout glList=new GridLayout();
  glList.numColumns=3;
  glList.horizontalSpacing=5;
  glList.verticalSpacing=5;
  glList.marginHeight=0;
  glList.marginWidth=0;
  cmpList=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPList=new GridData(GridData.FILL_BOTH);
  gdCMPList.horizontalSpan=2;
  cmpList.setLayoutData(gdCMPList);
  cmpList.setLayout(glList);
  GridLayout glButtons=new GridLayout();
  glButtons.numColumns=3;
  glButtons.horizontalSpacing=5;
  glButtons.verticalSpacing=5;
  glButtons.marginHeight=5;
  glButtons.marginWidth=0;
  Composite cmpButtons=new Composite(cmpList,SWT.NONE);
  GridData gdCMPButtons=new GridData(GridData.FILL_HORIZONTAL);
  gdCMPButtons.horizontalSpan=3;
  cmpButtons.setLayoutData(gdCMPButtons);
  cmpButtons.setLayout(glButtons);
  btnAddLine=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNAddLine=new GridData(GridData.FILL_HORIZONTAL);
  btnAddLine.setLayoutData(gdBTNAddLine);
  btnAddLine.setText(Messages.getString(""String_Node_Str""));
  btnAddLine.addSelectionListener(this);
  btnAddRange=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNAddRange=new GridData(GridData.FILL_HORIZONTAL);
  btnAddRange.setLayoutData(gdBTNAddRange);
  btnAddRange.setText(Messages.getString(""String_Node_Str""));
  btnAddRange.addSelectionListener(this);
  btnRemove=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNRemove=new GridData(GridData.FILL_HORIZONTAL);
  btnRemove.setLayoutData(gdBTNRemove);
  btnRemove.setText(Messages.getString(""String_Node_Str""));
  btnRemove.addSelectionListener(this);
  lstMarkers=new List(cmpList,SWT.BORDER | SWT.SINGLE | SWT.V_SCROLL);
  GridData gdLSTMarkers=new GridData(GridData.FILL_HORIZONTAL);
  gdLSTMarkers.horizontalSpan=3;
  gdLSTMarkers.heightHint=100;
  lstMarkers.setLayoutData(gdLSTMarkers);
  lstMarkers.addSelectionListener(this);
  slMarkers=new StackLayout();
  slMarkers.marginHeight=0;
  slMarkers.marginWidth=0;
  grpGeneral=new Group(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  grpGeneral.setLayoutData(gdCMPGeneral);
  grpGeneral.setLayout(slMarkers);
  grpGeneral.setText(Messages.getString(""String_Node_Str""));
  GridLayout glMarkerLine=new GridLayout();
  glMarkerLine.numColumns=3;
  glMarkerLine.horizontalSpacing=5;
  glMarkerLine.verticalSpacing=5;
  glMarkerLine.marginHeight=7;
  glMarkerLine.marginWidth=7;
  cmpLine=new Composite(grpGeneral,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_HORIZONTAL);
  cmpLine.setLayoutData(gdGRPLine);
  cmpLine.setLayout(glMarkerLine);
  lblValue=new Label(cmpLine,SWT.NONE);
  GridData gdLBLValue=new GridData();
  gdLBLValue.horizontalIndent=5;
  lblValue.setLayoutData(gdLBLValue);
  lblValue.setText(Messages.getString(""String_Node_Str""));
  txtValue=new TextEditorComposite(cmpLine,SWT.BORDER | SWT.SINGLE,false);
  GridData gdTXTValue=new GridData(GridData.FILL_HORIZONTAL);
  txtValue.setLayoutData(gdTXTValue);
  txtValue.addListener(this);
  btnLineFormatSpecifier=new Button(cmpLine,SWT.PUSH);
  GridData gdBTNLineFormatSpecifier=new GridData();
  gdBTNLineFormatSpecifier.heightHint=20;
  btnLineFormatSpecifier.setLayoutData(gdBTNLineFormatSpecifier);
  btnLineFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnLineFormatSpecifier.addSelectionListener(this);
  btnLineFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  lblAnchor=new Label(cmpLine,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  gdLBLAnchor.horizontalIndent=5;
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbLineAnchor=new Combo(cmpLine,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBAnchor.horizontalSpan=2;
  cmbLineAnchor.setLayoutData(gdCMBAnchor);
  cmbLineAnchor.addSelectionListener(this);
  grpMarkerLine=new Group(cmpLine,SWT.NONE);
  GridData gdGRPMarkerLine=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPMarkerLine.horizontalSpan=3;
  grpMarkerLine.setLayoutData(gdGRPMarkerLine);
  grpMarkerLine.setLayout(new FillLayout());
  grpMarkerLine.setText(Messages.getString(""String_Node_Str""));
  liacMarkerLine=new LineAttributesComposite(grpMarkerLine,SWT.NONE,getContext(),null,true,true,true);
  liacMarkerLine.addListener(this);
  btnLineTriggers=new Button(cmpLine,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnLineTriggers.setLayoutData(gd);
    btnLineTriggers.setText(Messages.getString(""String_Node_Str""));
    btnLineTriggers.addSelectionListener(this);
    btnLineTriggers.setEnabled(getChart().getInteractivity().isEnable());
  }
  GridLayout glMarkerRange=new GridLayout();
  glMarkerRange.numColumns=3;
  glMarkerRange.horizontalSpacing=5;
  glMarkerRange.verticalSpacing=5;
  glMarkerRange.marginHeight=7;
  glMarkerRange.marginWidth=7;
  cmpRange=new Composite(grpGeneral,SWT.NONE);
  GridData gdGRPRange=new GridData(GridData.FILL_HORIZONTAL);
  cmpRange.setLayoutData(gdGRPRange);
  cmpRange.setLayout(glMarkerRange);
  lblStartValue=new Label(cmpRange,SWT.NONE);
  GridData gdLBLStartValue=new GridData();
  gdLBLStartValue.horizontalIndent=5;
  lblStartValue.setLayoutData(gdLBLStartValue);
  lblStartValue.setText(Messages.getString(""String_Node_Str""));
  txtStartValue=new TextEditorComposite(cmpRange,SWT.BORDER | SWT.SINGLE,false);
  GridData gdTXTStartValue=new GridData(GridData.FILL_HORIZONTAL);
  txtStartValue.setLayoutData(gdTXTStartValue);
  txtStartValue.addListener(this);
  btnStartFormatSpecifier=new Button(cmpRange,SWT.PUSH);
  GridData gdBTNStartFormatSpecifier=new GridData();
  gdBTNStartFormatSpecifier.heightHint=18;
  gdBTNStartFormatSpecifier.widthHint=18;
  btnStartFormatSpecifier.setLayoutData(gdBTNStartFormatSpecifier);
  btnStartFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnStartFormatSpecifier.setImage(UIHelper.getImage(""String_Node_Str""));
  btnStartFormatSpecifier.addSelectionListener(this);
  btnStartFormatSpecifier.getImage().setBackground(btnStartFormatSpecifier.getBackground());
  lblEndValue=new Label(cmpRange,SWT.NONE);
  GridData gdLBLEndValue=new GridData();
  gdLBLEndValue.horizontalIndent=5;
  lblEndValue.setLayoutData(gdLBLEndValue);
  lblEndValue.setText(Messages.getString(""String_Node_Str""));
  txtEndValue=new TextEditorComposite(cmpRange,SWT.BORDER | SWT.SINGLE,false);
  GridData gdTXTEndValue=new GridData(GridData.FILL_HORIZONTAL);
  txtEndValue.setLayoutData(gdTXTEndValue);
  txtEndValue.addListener(this);
  btnEndFormatSpecifier=new Button(cmpRange,SWT.PUSH);
  GridData gdBTNEndFormatSpecifier=new GridData();
  gdBTNEndFormatSpecifier.heightHint=18;
  gdBTNEndFormatSpecifier.widthHint=18;
  btnEndFormatSpecifier.setLayoutData(gdBTNEndFormatSpecifier);
  btnEndFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnEndFormatSpecifier.setImage(UIHelper.getImage(""String_Node_Str""));
  btnEndFormatSpecifier.addSelectionListener(this);
  btnEndFormatSpecifier.getImage().setBackground(btnEndFormatSpecifier.getBackground());
  lblRangeAnchor=new Label(cmpRange,SWT.NONE);
  GridData gdLBLRangeAnchor=new GridData();
  gdLBLRangeAnchor.horizontalIndent=5;
  lblRangeAnchor.setLayoutData(gdLBLRangeAnchor);
  lblRangeAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbRangeAnchor=new Combo(cmpRange,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBRangeAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBRangeAnchor.horizontalSpan=2;
  cmbRangeAnchor.setLayoutData(gdCMBRangeAnchor);
  cmbRangeAnchor.addSelectionListener(this);
  lblRangeFill=new Label(cmpRange,SWT.NONE);
  GridData gdLBLRangeFill=new GridData();
  gdLBLRangeFill.horizontalIndent=5;
  lblRangeFill.setLayoutData(gdLBLRangeFill);
  lblRangeFill.setText(Messages.getString(""String_Node_Str""));
  fccRange=new FillChooserComposite(cmpRange,SWT.NONE,getContext(),null,true,true);
  GridData gdFCCRange=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCRange.horizontalSpan=2;
  fccRange.setLayoutData(gdFCCRange);
  fccRange.addListener(this);
  grpMarkerRange=new Group(cmpRange,SWT.NONE);
  GridData gdGRPMarkerRange=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPMarkerRange.horizontalSpan=3;
  grpMarkerRange.setLayoutData(gdGRPMarkerRange);
  grpMarkerRange.setLayout(new FillLayout());
  grpMarkerRange.setText(Messages.getString(""String_Node_Str""));
  liacMarkerRange=new LineAttributesComposite(grpMarkerRange,SWT.NONE,getContext(),null,true,true,true);
  liacMarkerRange.addListener(this);
  btnRangeTriggers=new Button(cmpRange,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnRangeTriggers.setLayoutData(gd);
    btnRangeTriggers.setText(Messages.getString(""String_Node_Str""));
    btnRangeTriggers.addSelectionListener(this);
    btnRangeTriggers.setEnabled(getChart().getInteractivity().isEnable());
  }
  LabelAttributesContext attributesContext=new LabelAttributesContext();
  attributesContext.isPositionEnabled=false;
  attributesContext.isFontAlignmentEnabled=false;
  attributesContext.isLabelEnabled=true;
  lacLabel=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),Position.ABOVE_LITERAL,LabelImpl.create(),getChart().getUnits());
  GridData gdLACLabel=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  lacLabel.setLayoutData(gdLACLabel);
  lacLabel.addListener(this);
  slMarkers.topControl=cmpLine;
  populateLists();
  refreshButtons();
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_MARKERS);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  GridLayout glList=new GridLayout();
  glList.numColumns=3;
  glList.horizontalSpacing=5;
  glList.verticalSpacing=5;
  glList.marginHeight=0;
  glList.marginWidth=0;
  cmpList=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPList=new GridData(GridData.FILL_BOTH);
  gdCMPList.horizontalSpan=2;
  cmpList.setLayoutData(gdCMPList);
  cmpList.setLayout(glList);
  GridLayout glButtons=new GridLayout();
  glButtons.numColumns=3;
  glButtons.horizontalSpacing=5;
  glButtons.verticalSpacing=5;
  glButtons.marginHeight=5;
  glButtons.marginWidth=0;
  Composite cmpButtons=new Composite(cmpList,SWT.NONE);
  GridData gdCMPButtons=new GridData(GridData.FILL_HORIZONTAL);
  gdCMPButtons.horizontalSpan=3;
  cmpButtons.setLayoutData(gdCMPButtons);
  cmpButtons.setLayout(glButtons);
  btnAddLine=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNAddLine=new GridData(GridData.FILL_HORIZONTAL);
  btnAddLine.setLayoutData(gdBTNAddLine);
  btnAddLine.setText(Messages.getString(""String_Node_Str""));
  btnAddLine.addSelectionListener(this);
  btnAddRange=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNAddRange=new GridData(GridData.FILL_HORIZONTAL);
  btnAddRange.setLayoutData(gdBTNAddRange);
  btnAddRange.setText(Messages.getString(""String_Node_Str""));
  btnAddRange.addSelectionListener(this);
  btnRemove=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNRemove=new GridData(GridData.FILL_HORIZONTAL);
  btnRemove.setLayoutData(gdBTNRemove);
  btnRemove.setText(Messages.getString(""String_Node_Str""));
  btnRemove.addSelectionListener(this);
  lstMarkers=new List(cmpList,SWT.BORDER | SWT.SINGLE | SWT.V_SCROLL);
  GridData gdLSTMarkers=new GridData(GridData.FILL_HORIZONTAL);
  gdLSTMarkers.horizontalSpan=3;
  gdLSTMarkers.heightHint=100;
  lstMarkers.setLayoutData(gdLSTMarkers);
  lstMarkers.addSelectionListener(this);
  slMarkers=new StackLayout();
  slMarkers.marginHeight=0;
  slMarkers.marginWidth=0;
  grpGeneral=new Group(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  grpGeneral.setLayoutData(gdCMPGeneral);
  grpGeneral.setLayout(slMarkers);
  grpGeneral.setText(Messages.getString(""String_Node_Str""));
  GridLayout glMarkerLine=new GridLayout();
  glMarkerLine.numColumns=3;
  glMarkerLine.horizontalSpacing=5;
  glMarkerLine.verticalSpacing=5;
  glMarkerLine.marginHeight=7;
  glMarkerLine.marginWidth=7;
  cmpLine=new Composite(grpGeneral,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_HORIZONTAL);
  cmpLine.setLayoutData(gdGRPLine);
  cmpLine.setLayout(glMarkerLine);
  lblValue=new Label(cmpLine,SWT.NONE);
  GridData gdLBLValue=new GridData();
  gdLBLValue.horizontalIndent=5;
  lblValue.setLayoutData(gdLBLValue);
  lblValue.setText(Messages.getString(""String_Node_Str""));
  txtValue=new TextEditorComposite(cmpLine,SWT.BORDER | SWT.SINGLE,false);
  GridData gdTXTValue=new GridData(GridData.FILL_HORIZONTAL);
  txtValue.setLayoutData(gdTXTValue);
  txtValue.addListener(this);
  btnLineFormatSpecifier=new Button(cmpLine,SWT.PUSH);
  GridData gdBTNLineFormatSpecifier=new GridData();
  gdBTNLineFormatSpecifier.heightHint=20;
  btnLineFormatSpecifier.setLayoutData(gdBTNLineFormatSpecifier);
  btnLineFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnLineFormatSpecifier.addSelectionListener(this);
  btnLineFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  lblAnchor=new Label(cmpLine,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  gdLBLAnchor.horizontalIndent=5;
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbLineAnchor=new Combo(cmpLine,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBAnchor.horizontalSpan=2;
  cmbLineAnchor.setLayoutData(gdCMBAnchor);
  cmbLineAnchor.addSelectionListener(this);
  grpMarkerLine=new Group(cmpLine,SWT.NONE);
  GridData gdGRPMarkerLine=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPMarkerLine.horizontalSpan=3;
  grpMarkerLine.setLayoutData(gdGRPMarkerLine);
  grpMarkerLine.setLayout(new FillLayout());
  grpMarkerLine.setText(Messages.getString(""String_Node_Str""));
  liacMarkerLine=new LineAttributesComposite(grpMarkerLine,SWT.NONE,getContext(),null,true,true,true);
  liacMarkerLine.addListener(this);
  btnLineTriggers=new Button(cmpLine,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnLineTriggers.setLayoutData(gd);
    btnLineTriggers.setText(Messages.getString(""String_Node_Str""));
    btnLineTriggers.addSelectionListener(this);
    btnLineTriggers.setEnabled(getChart().getInteractivity().isEnable());
  }
  GridLayout glMarkerRange=new GridLayout();
  glMarkerRange.numColumns=3;
  glMarkerRange.horizontalSpacing=5;
  glMarkerRange.verticalSpacing=5;
  glMarkerRange.marginHeight=7;
  glMarkerRange.marginWidth=7;
  cmpRange=new Composite(grpGeneral,SWT.NONE);
  GridData gdGRPRange=new GridData(GridData.FILL_HORIZONTAL);
  cmpRange.setLayoutData(gdGRPRange);
  cmpRange.setLayout(glMarkerRange);
  lblStartValue=new Label(cmpRange,SWT.NONE);
  GridData gdLBLStartValue=new GridData();
  gdLBLStartValue.horizontalIndent=5;
  lblStartValue.setLayoutData(gdLBLStartValue);
  lblStartValue.setText(Messages.getString(""String_Node_Str""));
  txtStartValue=new TextEditorComposite(cmpRange,SWT.BORDER | SWT.SINGLE,false);
  GridData gdTXTStartValue=new GridData(GridData.FILL_HORIZONTAL);
  txtStartValue.setLayoutData(gdTXTStartValue);
  txtStartValue.addListener(this);
  btnStartFormatSpecifier=new Button(cmpRange,SWT.PUSH);
  GridData gdBTNStartFormatSpecifier=new GridData();
  gdBTNStartFormatSpecifier.heightHint=18;
  btnStartFormatSpecifier.setLayoutData(gdBTNStartFormatSpecifier);
  btnStartFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnStartFormatSpecifier.addSelectionListener(this);
  btnStartFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  lblEndValue=new Label(cmpRange,SWT.NONE);
  GridData gdLBLEndValue=new GridData();
  gdLBLEndValue.horizontalIndent=5;
  lblEndValue.setLayoutData(gdLBLEndValue);
  lblEndValue.setText(Messages.getString(""String_Node_Str""));
  txtEndValue=new TextEditorComposite(cmpRange,SWT.BORDER | SWT.SINGLE,false);
  GridData gdTXTEndValue=new GridData(GridData.FILL_HORIZONTAL);
  txtEndValue.setLayoutData(gdTXTEndValue);
  txtEndValue.addListener(this);
  btnEndFormatSpecifier=new Button(cmpRange,SWT.PUSH);
  GridData gdBTNEndFormatSpecifier=new GridData();
  gdBTNEndFormatSpecifier.heightHint=18;
  btnEndFormatSpecifier.setLayoutData(gdBTNEndFormatSpecifier);
  btnEndFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
  btnEndFormatSpecifier.addSelectionListener(this);
  btnEndFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  lblRangeAnchor=new Label(cmpRange,SWT.NONE);
  GridData gdLBLRangeAnchor=new GridData();
  gdLBLRangeAnchor.horizontalIndent=5;
  lblRangeAnchor.setLayoutData(gdLBLRangeAnchor);
  lblRangeAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbRangeAnchor=new Combo(cmpRange,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBRangeAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBRangeAnchor.horizontalSpan=2;
  cmbRangeAnchor.setLayoutData(gdCMBRangeAnchor);
  cmbRangeAnchor.addSelectionListener(this);
  lblRangeFill=new Label(cmpRange,SWT.NONE);
  GridData gdLBLRangeFill=new GridData();
  gdLBLRangeFill.horizontalIndent=5;
  lblRangeFill.setLayoutData(gdLBLRangeFill);
  lblRangeFill.setText(Messages.getString(""String_Node_Str""));
  fccRange=new FillChooserComposite(cmpRange,SWT.NONE,getContext(),null,true,true);
  GridData gdFCCRange=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCRange.horizontalSpan=2;
  fccRange.setLayoutData(gdFCCRange);
  fccRange.addListener(this);
  grpMarkerRange=new Group(cmpRange,SWT.NONE);
  GridData gdGRPMarkerRange=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPMarkerRange.horizontalSpan=3;
  grpMarkerRange.setLayoutData(gdGRPMarkerRange);
  grpMarkerRange.setLayout(new FillLayout());
  grpMarkerRange.setText(Messages.getString(""String_Node_Str""));
  liacMarkerRange=new LineAttributesComposite(grpMarkerRange,SWT.NONE,getContext(),null,true,true,true);
  liacMarkerRange.addListener(this);
  btnRangeTriggers=new Button(cmpRange,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnRangeTriggers.setLayoutData(gd);
    btnRangeTriggers.setText(Messages.getString(""String_Node_Str""));
    btnRangeTriggers.addSelectionListener(this);
    btnRangeTriggers.setEnabled(getChart().getInteractivity().isEnable());
  }
  LabelAttributesContext attributesContext=new LabelAttributesContext();
  attributesContext.isPositionEnabled=false;
  attributesContext.isFontAlignmentEnabled=false;
  attributesContext.isLabelEnabled=true;
  lacLabel=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),Position.ABOVE_LITERAL,LabelImpl.create(),getChart().getUnits());
  GridData gdLACLabel=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  lacLabel.setLayoutData(gdLACLabel);
  lacLabel.addListener(this);
  slMarkers.topControl=cmpLine;
  populateLists();
  refreshButtons();
  return cmpContent;
}",0.9519820187985288
69467,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.FALSE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}",0.998502032955275
69468,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.FALSE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}",0.998502032955275
69469,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.FALSE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}",0.998502032955275
69470,"/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DteLevelDataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByRowKeyCountTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.util.DirectedGraphTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.DimensionSegmentsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableHelperTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableHelperTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableRowIteratorWithFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}","/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DteLevelDataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByRowKeyCountTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.util.DirectedGraphTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeDrillFeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.DimensionSegmentsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableHelperTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableHelperTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.facttable.FactTableRowIteratorWithFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}",0.994571922033062
69471,"protected void drawBackgroundImage(float x,float y,float width,float height,float iWidth,float iHeight,int repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  contentByte.saveState();
  try {
    Image img=null;
    try {
      img=Image.getInstance(new URL(imageUrl));
    }
 catch (    IOException e) {
      if (SvgFile.isSvg(imageUrl)) {
        try {
          img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
        }
 catch (        IOException ex) {
          throw ex;
        }
      }
 else {
        throw e;
      }
    }
    float imageWidth=iWidth;
    float imageHeight=iHeight;
    if (imageHeight == 0 || imageWidth == 0) {
      int resolutionX=img.getDpiX();
      int resolutionY=img.getDpiY();
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=96;
        resolutionY=96;
      }
      imageWidth=img.plainWidth() / resolutionX * 72;
      imageHeight=img.plainHeight() / resolutionY * 72;
    }
    if (BackgroundImageInfo.NO_REPEAT == repeat) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,imageWidth);
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,imageHeight);
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=contentByte.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,imageWidth,0,0,imageHeight,translationX,translationY);
      contentByte.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (BackgroundImageInfo.REPEAT_X == repeat) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > imageWidth) {
        if (height - absPosY > imageHeight) {
          template=contentByte.createTemplate(imageWidth,imageHeight);
          template.addImage(img,imageWidth,0,0,imageHeight,0,0);
        }
 else {
          template=contentByte.createTemplate(imageWidth,height);
          template.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + height);
        }
      }
      while (remainX > 0) {
        if (remainX < imageWidth) {
          if (height - absPosY > imageHeight) {
            PdfTemplate templateX=contentByte.createTemplate(remainX,imageHeight);
            templateX.addImage(img,imageWidth,0,0,imageHeight,0,0);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - imageHeight);
          }
 else {
            PdfTemplate templateX=contentByte.createTemplate(remainX,height);
            templateX.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + height - absPosY);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > imageHeight)           contentByte.addTemplate(template,x + width - remainX,y - absPosY - imageHeight);
 else           contentByte.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=imageWidth;
        }
      }
    }
 else     if (BackgroundImageInfo.REPEAT_Y == repeat) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > imageHeight) {
        template=contentByte.createTemplate(width - absPosX > imageWidth ? imageWidth : width - absPosX,imageHeight);
        template.addImage(img,imageWidth,0,0,imageHeight,0,0);
      }
      while (remainY > 0) {
        if (remainY < imageHeight) {
          PdfTemplate templateY=contentByte.createTemplate(width - absPosX > imageWidth ? imageWidth : width - absPosX,remainY);
          templateY.addImage(img,width > imageWidth ? imageWidth : width - absPosX,0,0,imageHeight,0,-(imageHeight - remainY));
          contentByte.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          contentByte.addTemplate(template,x + absPosX,y - height + remainY - imageHeight);
          remainY-=imageHeight;
        }
      }
    }
 else     if (BackgroundImageInfo.REPEAT == repeat) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width > imageWidth && height > imageHeight) {
        template=contentByte.createTemplate(imageWidth,imageHeight);
        template.addImage(img,imageWidth,0,0,imageHeight,0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < imageHeight) {
          while (remainX > 0) {
            if (remainX < imageWidth) {
              PdfTemplate templateXY=contentByte.createTemplate(remainX,remainY);
              templateXY.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + remainY);
              contentByte.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=contentByte.createTemplate(imageWidth,remainY);
              templateY.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + remainY);
              contentByte.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=imageWidth;
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < imageWidth) {
              PdfTemplate templateX=contentByte.createTemplate(remainX,imageHeight);
              templateX.addImage(img,imageWidth,0,0,imageHeight,0,0);
              contentByte.addTemplate(templateX,x + width - remainX,y - height + remainY - imageHeight);
              remainX=0;
            }
 else {
              contentByte.addTemplate(template,x + width - remainX,y - height + remainY - imageHeight);
              remainX-=imageWidth;
            }
          }
          remainY-=imageHeight;
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  contentByte.restoreState();
}","protected void drawBackgroundImage(float x,float y,float width,float height,float iWidth,float iHeight,int repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  contentByte.saveState();
  try {
    Image img=null;
    try {
      img=Image.getInstance(new URL(imageUrl));
    }
 catch (    IOException e) {
      if (SvgFile.isSvg(imageUrl)) {
        try {
          img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
        }
 catch (        IOException ex) {
          throw ex;
        }
      }
 else {
        throw e;
      }
    }
    float imageWidth=iWidth;
    float imageHeight=iHeight;
    if (imageHeight == 0 || imageWidth == 0) {
      int resolutionX=img.getDpiX();
      int resolutionY=img.getDpiY();
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=96;
        resolutionY=96;
      }
      imageWidth=img.plainWidth() / resolutionX * 72;
      imageHeight=img.plainHeight() / resolutionY * 72;
    }
    if (BackgroundImageInfo.NO_REPEAT == repeat) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,imageWidth);
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,imageHeight);
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=contentByte.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,imageWidth,0,0,imageHeight,translationX,translationY);
      contentByte.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (BackgroundImageInfo.REPEAT_X == repeat) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > imageWidth) {
        if (height - absPosY > imageHeight) {
          template=contentByte.createTemplate(imageWidth,imageHeight);
          template.addImage(img,imageWidth,0,0,imageHeight,0,0);
        }
 else {
          template=contentByte.createTemplate(imageWidth,height);
          template.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + height);
        }
      }
      while (remainX > 0) {
        if (remainX < imageWidth) {
          if (height - absPosY > imageHeight) {
            PdfTemplate templateX=contentByte.createTemplate(remainX,imageHeight);
            templateX.addImage(img,imageWidth,0,0,imageHeight,0,0);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - imageHeight);
          }
 else {
            PdfTemplate templateX=contentByte.createTemplate(remainX,height);
            templateX.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + height - absPosY);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > imageHeight)           contentByte.addTemplate(template,x + width - remainX,y - absPosY - imageHeight);
 else           contentByte.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=imageWidth;
        }
      }
    }
 else     if (BackgroundImageInfo.REPEAT_Y == repeat) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > imageHeight) {
        template=contentByte.createTemplate(width - absPosX > imageWidth ? imageWidth : width - absPosX,imageHeight);
        template.addImage(img,imageWidth,0,0,imageHeight,0,0);
      }
      while (remainY > 0) {
        if (remainY < imageHeight) {
          PdfTemplate templateY=contentByte.createTemplate(width - absPosX > imageWidth ? imageWidth : width - absPosX,remainY);
          templateY.addImage(img,width > imageWidth ? imageWidth : width - absPosX,0,0,imageHeight,0,-(imageHeight - remainY));
          contentByte.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          contentByte.addTemplate(template,x + absPosX,y - height + remainY - imageHeight);
          remainY-=imageHeight;
        }
      }
    }
 else     if (BackgroundImageInfo.REPEAT == repeat) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width >= imageWidth && height >= imageHeight) {
        template=contentByte.createTemplate(imageWidth,imageHeight);
        template.addImage(img,imageWidth,0,0,imageHeight,0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < imageHeight) {
          while (remainX > 0) {
            if (remainX < imageWidth) {
              PdfTemplate templateXY=contentByte.createTemplate(remainX,remainY);
              templateXY.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + remainY);
              contentByte.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=contentByte.createTemplate(imageWidth,remainY);
              templateY.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + remainY);
              contentByte.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=imageWidth;
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < imageWidth) {
              PdfTemplate templateX=contentByte.createTemplate(remainX,imageHeight);
              templateX.addImage(img,imageWidth,0,0,imageHeight,0,0);
              contentByte.addTemplate(templateX,x + width - remainX,y - height + remainY - imageHeight);
              remainX=0;
            }
 else {
              contentByte.addTemplate(template,x + width - remainX,y - height + remainY - imageHeight);
              remainX-=imageWidth;
            }
          }
          remainY-=imageHeight;
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  contentByte.restoreState();
}",0.9998405612244898
69472,"public void startRow(IRowContent row){
  if (!isHidden(row)) {
    rowFilledFlag=false;
    boolean isHeader=false;
    styles.push(row.getComputedStyle());
    if (row.getBand() != null && row.getBand().getBandType() == IBandContent.BAND_HEADER) {
      isHeader=true;
    }
    double height=WordUtil.convertTo(row.getHeight());
    wordWriter.startTableRow(height,isHeader,row.getTable().isHeaderRepeat(),fixedLayout);
    context.newRow();
  }
}","public void startRow(IRowContent row){
  if (!isHidden(row)) {
    writeBookmark(row);
    rowFilledFlag=false;
    boolean isHeader=false;
    styles.push(row.getComputedStyle());
    if (row.getBand() != null && row.getBand().getBandType() == IBandContent.BAND_HEADER) {
      isHeader=true;
    }
    double height=WordUtil.convertTo(row.getHeight());
    wordWriter.startTableRow(height,isHeader,row.getTable().isHeaderRepeat(),fixedLayout);
    context.newRow();
  }
}",0.9739696312364424
69473,"public void startCell(ICellContent cell){
  rowFilledFlag=true;
  context.startCell();
  int columnId=cell.getColumn();
  List<SpanInfo> spans=context.getSpans(columnId);
  if (spans != null) {
    for (int i=0; i < spans.size(); i++) {
      wordWriter.writeSpanCell(spans.get(i));
    }
  }
  int columnSpan=cell.getColSpan();
  int rowSpan=cell.getRowSpan();
  int cellWidth=context.getCellWidth(columnId,columnSpan);
  IStyle style=computeStyle(cell.getComputedStyle());
  if (rowSpan > 1) {
    context.addSpan(columnId,columnSpan,cellWidth,rowSpan,style);
  }
  SpanInfo info=null;
  if (columnSpan > 1 || rowSpan > 1) {
    info=new SpanInfo(columnId,columnSpan,cellWidth,true,style);
  }
  wordWriter.startTableCell(cellWidth,style,info);
  context.addWidth(getCellWidth(cellWidth,style));
  writeTableToc();
  if (cell.getDiagonalNumber() != 0 && cell.getDiagonalStyle() != null && !""String_Node_Str"".equalsIgnoreCase(cell.getDiagonalStyle())) {
    drawDiagonalLine(cell,WordUtil.twipToPt(cellWidth));
  }
}","public void startCell(ICellContent cell){
  rowFilledFlag=true;
  context.startCell();
  writeBookmark(cell);
  int columnId=cell.getColumn();
  List<SpanInfo> spans=context.getSpans(columnId);
  if (spans != null) {
    for (int i=0; i < spans.size(); i++) {
      wordWriter.writeSpanCell(spans.get(i));
    }
  }
  int columnSpan=cell.getColSpan();
  int rowSpan=cell.getRowSpan();
  int cellWidth=context.getCellWidth(columnId,columnSpan);
  IStyle style=computeStyle(cell.getComputedStyle());
  if (rowSpan > 1) {
    context.addSpan(columnId,columnSpan,cellWidth,rowSpan,style);
  }
  SpanInfo info=null;
  if (columnSpan > 1 || rowSpan > 1) {
    info=new SpanInfo(columnId,columnSpan,cellWidth,true,style);
  }
  wordWriter.startTableCell(cellWidth,style,info);
  context.addWidth(getCellWidth(cellWidth,style));
  writeTableToc();
  if (cell.getDiagonalNumber() != 0 && cell.getDiagonalStyle() != null && !""String_Node_Str"".equalsIgnoreCase(cell.getDiagonalStyle())) {
    drawDiagonalLine(cell,WordUtil.twipToPt(cellWidth));
  }
}",0.988818667963053
69474,"public boolean performOk(){
  if (doSaveEmptyParameter(parameters)) {
    refreshPositions();
    if (this.modelChanged && this.getContainer() != null && this.getContainer() instanceof DataSetEditor) {
      this.modelChanged=false;
      ((DataSetHandle)getContainer().getModel()).removeListener(this);
      ((DataSetEditor)getContainer()).updateDataSetDesign(this);
    }
    return super.performOk();
  }
 else {
    String name=getNoneValuedParameterName();
    boolean confirm=MessageDialog.openConfirm(null,Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new Object[]{name}));
    if (confirm)     ((DataSetEditor)getContainer()).updateDataSetDesign(this);
    return confirm;
  }
}","public boolean performOk(){
  DataSetHandle dataSetHandle=(DataSetHandle)getContainer().getModel();
  isOdaDataSetHandle=ParameterPageUtil.isOdaDataSetHandle(dataSetHandle);
  isJointOrDerivedDataSetHandle=ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle);
  if (doSaveEmptyParameter(parameters)) {
    refreshPositions();
    if (this.modelChanged && this.getContainer() != null && this.getContainer() instanceof DataSetEditor) {
      this.modelChanged=false;
      ((DataSetHandle)getContainer().getModel()).removeListener(this);
      ((DataSetEditor)getContainer()).updateDataSetDesign(this);
    }
    return super.performOk();
  }
 else {
    String name=getNoneValuedParameterName();
    boolean confirm=MessageDialog.openConfirm(null,Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new Object[]{name}));
    if (confirm)     ((DataSetEditor)getContainer()).updateDataSetDesign(this);
    return confirm;
  }
}",0.8569739952718676
69475,"public boolean canFinish(){
  try {
    if (m_designSession != null)     return isPageComplete() && m_designSession.getNewWizard().canFinish();
 else     return isPageComplete();
  }
 catch (  OdaException e) {
    return false;
  }
}","public boolean canFinish(){
  try {
    if (m_designSession != null)     return m_designSession.getNewWizard().canFinish();
 else     return isPageComplete();
  }
 catch (  OdaException e) {
    return false;
  }
}",0.6830357142857143
69476,"public void startTable(ITableContent table){
  ContainerSizeInfo sizeInfo=engine.getCurrentContainer().getSizeInfo();
  int width=sizeInfo.getWidth();
  int[] columns=LayoutUtil.createTable(table,LayoutUtil.getElementWidth(table,width));
  ColumnsInfo info=new ColumnsInfo(columns);
  String caption=table.getCaption();
  if (caption != null) {
    engine.addCaption(caption);
  }
  engine.addTable(table,info,sizeInfo);
}","public void startTable(ITableContent table){
  ContainerSizeInfo sizeInfo=engine.getCurrentContainer().getSizeInfo();
  int width=sizeInfo.getWidth();
  ColumnsInfo info=null;
  if (isAuto) {
    info=LayoutUtil.createTable(table,width);
  }
 else {
    int[] columns=LayoutUtil.createFixedTable(table,LayoutUtil.getElementWidth(table,width));
    info=new ColumnsInfo(columns);
  }
  if (info == null)   return;
  String caption=table.getCaption();
  if (caption != null) {
    engine.addCaption(caption);
  }
  engine.addTable(table,info,sizeInfo);
}",0.8172484599589322
69477,"/** 
 * It is not going to get the coordinate, but the colId relative to this coordinate. Gets the colId of the given coordinate point
 * @param value	 the coordinate point
 * @return the colId
 */
public int getColumnIndexByCoordinate(int value){
  int index=columnCoordinates.indexOf(value);
  return (index == -1) ? 0 : index;
}","/** 
 * It is not going to get the coordinate, but the colId relative to this coordinate. Gets the colId of the given coordinate point
 * @param value	 the coordinate point
 * @return the colId
 */
public int getColumnIndexByCoordinate(int value){
  int index=columnCoordinates.indexOf(value);
  return (index == -1) ? -1 : index;
}",0.995475113122172
69478,"private int[] calculateColumnCoordinates(ColumnsInfo table,int startCoordinate,int endCoordinate){
  int columnCount=table.getColumnCount();
  int[] columnStartCoordinates=new int[columnCount + 1];
  columnStartCoordinates[0]=startCoordinate;
  for (int i=1; i <= columnCount; i++) {
    columnStartCoordinates[i]=columnStartCoordinates[i - 1] + table.getColumnWidth(i - 1);
  }
  return columnStartCoordinates;
}","private int[] calculateColumnCoordinates(ColumnsInfo table,int startCoordinate,int endCoordinate){
  int columnCount=table.getColumnCount();
  int[] columnStartCoordinates=new int[columnCount + 1];
  columnStartCoordinates[0]=startCoordinate;
  for (int i=1; i <= columnCount; i++) {
    if ((columnStartCoordinates[i - 1] + table.getColumnWidth(i - 1)) > endCoordinate) {
      columnStartCoordinates[i]=endCoordinate;
    }
 else     columnStartCoordinates[i]=columnStartCoordinates[i - 1] + table.getColumnWidth(i - 1);
  }
  return columnStartCoordinates;
}",0.7248459958932238
69479,"private void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getSizeInfo().getStartCoordinate());
  int span=axis.getColumnIndexByCoordinate(data.getSizeInfo().getEndCoordinate()) - col;
  applyTopBorderStyle(data);
  outputDataIfBufferIsFull();
  updataRowIndex(data,container);
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(data);
    addDatatoCache(i,blankData);
  }
  if (container instanceof XlsCell) {
    XlsCell cell=(XlsCell)container;
    data.setRowSpanInDesign(cell.getRowSpan() - 1);
  }
  lastData=data;
}","private void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getSizeInfo().getStartCoordinate());
  if (col == -1 || col >= cache.getColumnCount())   return;
  int span=axis.getColumnIndexByCoordinate(data.getSizeInfo().getEndCoordinate()) - col;
  applyTopBorderStyle(data);
  outputDataIfBufferIsFull();
  updataRowIndex(data,container);
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(data);
    addDatatoCache(i,blankData);
  }
  if (container instanceof XlsCell) {
    XlsCell cell=(XlsCell)container;
    data.setRowSpanInDesign(cell.getRowSpan() - 1);
  }
  lastData=data;
}",0.958041958041958
69480,"public static int[] createTable(ITableContent table,int tableWidth){
  int columnCount=table.getColumnCount();
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.covertDimensionType(value,tableWidth);
      totalAssigned+=columns[i];
    }
  }
  if (table.getWidth() == null && unassignedCount == 0) {
    return columns;
  }
  return EmitterUtil.resizeTableColumn(tableWidth,columns,unassignedCount,totalAssigned);
}","public static ColumnsInfo createTable(ITableContent table,int width){
  int tableWidth=getElementWidth(table,width);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.covertDimensionType(value,tableWidth);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if (leftWidth != 0 && unassignedCount == 0) {
    for (int i=0; i < columnCount; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
    }
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1)       columns[1]=0;
 else       columns[i]=resize(columns[i],totalAssigned,leftWidth);
    }
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}",0.4965174129353233
69481,"/** 
 * Convert String without specified locale to java.util.Date Try to format the given String for JRE default Locale, if it fails, try to format the String for Locale.US 
 * @param source the String to be convert
 * @param locate the locate of the string
 * @return result Date
 */
private static Date toDate(String source) throws BirtException {
  try {
    return toDateISO8601(source,null);
  }
 catch (  BirtException e) {
    try {
      return toDate(source,JRE_DEFAULT_LOCALE);
    }
 catch (    BirtException use) {
      return toDate(source,DEFAULT_LOCALE);
    }
  }
}","/** 
 * Convert String without specified locale to java.util.Date Try to format the given String for JRE default Locale, if it fails, try to format the String for Locale.US 
 * @param source the String to be convert
 * @param locate the locate of the string
 * @return result Date
 */
private static Date toDate(String source) throws BirtException {
  try {
    return toDateISO8601(source,null);
  }
 catch (  BirtException e) {
    try {
      return toDate(source,JRE_DEFAULT_LOCALE);
    }
 catch (    BirtException use) {
      try {
        return toDate(source,DEFAULT_LOCALE);
      }
 catch (      BirtException de) {
        return toDateForSpecialFormat(source);
      }
    }
  }
}",0.9129411764705884
69482,"public void setTextIndent(ITextContent content){
  lineParent.setTextIndent(content);
}","public void setTextIndent(ITextContent content){
  int pi=lineParent.getCurrentIP();
  lineParent.setTextIndent(content);
  if (pi != lineParent.getCurrentIP()) {
    maxAvaWidth=parent.getCurrentMaxContentWidth();
  }
}",0.5667752442996743
69483,"/** 
 * @param severity
 * @param message
 * @return
 */
protected Status getMiscStatus(int severity,String message){
  return new Status(severity,PlatformUI.PLUGIN_ID,IStatus.OK,message,null);
}","/** 
 * @param severity
 * @param message
 * @return
 */
protected Status getMiscStatus(int severity,String message){
  return new Status(severity,PlatformUI.PLUGIN_ID,severity,message,null);
}",0.9587628865979382
69484,"public ExportDataSourceDialog(Shell parentShell,String title,DataSourceHandle selection){
  this(parentShell,title);
  this.dataSourceHandle=selection;
  this.fileName=this.dataSourceHandle.getQualifiedName();
}","public ExportDataSourceDialog(Shell parentShell,String title,DataSourceHandle selection){
  this(parentShell,title);
  this.dataSourceHandle=selection;
  initProfileName();
}",0.8727272727272727
69485,"protected void writeText(int type,String txt,IContent content,InlineFlag inlineFlag,IStyle computedStyle,IStyle inlineStyle){
  HyperlinkInfo hyper=getHyperlink(content);
  if (content instanceof TextContent) {
    TextFlag textFlag=TextFlag.START;
    String fontFamily=null;
    if (""String_Node_Str"".equals(txt) || txt == null || WordUtil.isField(content)) {
      wordWriter.writeContent(type,txt,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag);
    }
 else {
      FontSplitter fontSplitter=getFontSplitter(content);
      while (fontSplitter.hasMore()) {
        Chunk ch=fontSplitter.getNext();
        int offset=ch.getOffset();
        int length=ch.getLength();
        fontFamily=getFontFamily(computedStyle,ch);
        wordWriter.writeContent(type,txt.substring(offset,offset + length),computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag);
        textFlag=fontSplitter.hasMore() ? TextFlag.MIDDLE : TextFlag.END;
      }
    }
    if (inlineFlag == InlineFlag.BLOCK) {
      wordWriter.writeContent(type,null,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,TextFlag.END);
    }
  }
 else {
    wordWriter.writeContent(type,txt,computedStyle,inlineStyle,computedStyle.getFontFamily(),hyper,inlineFlag,TextFlag.WHOLE);
  }
}","protected void writeText(int type,String txt,IContent content,InlineFlag inlineFlag,IStyle computedStyle,IStyle inlineStyle){
  HyperlinkInfo hyper=getHyperlink(content);
  int paragraphWidth=(int)WordUtil.twipToPt(context.getCurrentWidth());
  if (content instanceof TextContent) {
    TextFlag textFlag=TextFlag.START;
    String fontFamily=null;
    if (""String_Node_Str"".equals(txt) || txt == null || WordUtil.isField(content)) {
      wordWriter.writeContent(type,txt,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag,paragraphWidth);
    }
 else {
      FontSplitter fontSplitter=getFontSplitter(content);
      while (fontSplitter.hasMore()) {
        Chunk ch=fontSplitter.getNext();
        int offset=ch.getOffset();
        int length=ch.getLength();
        fontFamily=getFontFamily(computedStyle,ch);
        wordWriter.writeContent(type,txt.substring(offset,offset + length),computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag,paragraphWidth);
        textFlag=fontSplitter.hasMore() ? TextFlag.MIDDLE : TextFlag.END;
      }
    }
    if (inlineFlag == InlineFlag.BLOCK) {
      wordWriter.writeContent(type,null,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,TextFlag.END,paragraphWidth);
    }
  }
 else {
    wordWriter.writeContent(type,txt,computedStyle,inlineStyle,computedStyle.getFontFamily(),hyper,inlineFlag,TextFlag.WHOLE,paragraphWidth);
  }
}",0.950561797752809
69486,"void writeContent(int type,String txt,IStyle style,IStyle inlineStyle,String fontFamily,HyperlinkInfo info,InlineFlag inlineFlag,TextFlag flag);","void writeContent(int type,String txt,IStyle style,IStyle inlineStyle,String fontFamily,HyperlinkInfo info,InlineFlag inlineFlag,TextFlag flag,int paragraphWidth);",0.9381107491856676
69487,"public void writeText(int type,String txt,IStyle style,String fontFamily,HyperlinkInfo info,TextFlag flag){
  if (flag == TextFlag.START) {
    writeTextInParagraph(type,txt,style,fontFamily,info);
  }
 else   if (flag == TextFlag.END) {
    writer.closeTag(""String_Node_Str"");
  }
 else   if (flag == TextFlag.MIDDLE) {
    writeTextInRun(type,txt,style,fontFamily,info,false);
  }
 else {
    writeTextInParagraph(type,txt,style,fontFamily,info);
    writer.closeTag(""String_Node_Str"");
  }
}","public void writeText(int type,String txt,IStyle style,String fontFamily,HyperlinkInfo info,TextFlag flag,int paragraphWidth){
  if (flag == TextFlag.START) {
    writeTextInParagraph(type,txt,style,fontFamily,info,paragraphWidth);
  }
 else   if (flag == TextFlag.END) {
    writer.closeTag(""String_Node_Str"");
  }
 else   if (flag == TextFlag.MIDDLE) {
    writeTextInRun(type,txt,style,fontFamily,info,false,paragraphWidth);
  }
 else {
    writeTextInParagraph(type,txt,style,fontFamily,info,paragraphWidth);
    writer.closeTag(""String_Node_Str"");
  }
}",0.9391634980988594
69488,"public void writeTextInRun(int type,String txt,IStyle style,String fontFamily,HyperlinkInfo info,boolean isInline){
}","public void writeTextInRun(int type,String txt,IStyle style,String fontFamily,HyperlinkInfo info,boolean isInline,int paragraphWidth){
}",0.924901185770751
69489,"private void writeTextInParagraph(int type,String txt,IStyle style,String fontFamily,HyperlinkInfo info){
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  CSSValue lineHeight=style.getProperty(StyleConstants.STYLE_LINE_HEIGHT);
  if (!""String_Node_Str"".equalsIgnoreCase(lineHeight.getCssText())) {
    writeSpacing(lineHeight);
  }
  writeAlign(style.getTextAlign(),style.getDirection());
  writeBackgroundColor(style.getBackgroundColor());
  writeParagraphBorders(style);
  writer.closeTag(""String_Node_Str"");
  writeTextInRun(type,txt,style,fontFamily,info,false);
}","private void writeTextInParagraph(int type,String txt,IStyle style,String fontFamily,HyperlinkInfo info,int paragraphWidth){
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  CSSValue lineHeight=style.getProperty(StyleConstants.STYLE_LINE_HEIGHT);
  if (!""String_Node_Str"".equalsIgnoreCase(lineHeight.getCssText())) {
    writeSpacing(lineHeight);
  }
  writeAlign(style.getTextAlign(),style.getDirection());
  writeBackgroundColor(style.getBackgroundColor());
  writeParagraphBorders(style);
  int indent=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_TEXT_INDENT),paragraphWidth * 1000) / 1000 * 20;
  if (indent != 0) {
    writeIndent(indent);
  }
  writer.closeTag(""String_Node_Str"");
  writeTextInRun(type,txt,style,fontFamily,info,false,paragraphWidth);
}",0.8463726884779517
69490,"public void startParagraph(IStyle style,boolean isInline){
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writeSpacing((style.getProperty(StyleConstants.STYLE_MARGIN_TOP)),(style.getProperty(StyleConstants.STYLE_MARGIN_BOTTOM)));
  writeAlign(style.getTextAlign(),style.getDirection());
  if (!isInline) {
    writeBackgroundColor(style.getBackgroundColor());
    writeParagraphBorders(style);
  }
  writer.closeTag(""String_Node_Str"");
}","public void startParagraph(IStyle style,boolean isInline,int paragraphWidth){
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writeSpacing((style.getProperty(StyleConstants.STYLE_MARGIN_TOP)),(style.getProperty(StyleConstants.STYLE_MARGIN_BOTTOM)));
  writeAlign(style.getTextAlign(),style.getDirection());
  int indent=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_TEXT_INDENT),paragraphWidth) / 1000 * 20;
  if (indent != 0) {
    writeIndent(indent);
  }
  if (!isInline) {
    writeBackgroundColor(style.getBackgroundColor());
    writeParagraphBorders(style);
  }
  writer.closeTag(""String_Node_Str"");
}",0.827708703374778
69491,"public void writeContent(int type,String txt,IStyle style,IStyle inlineStyle,String fontFamily,HyperlinkInfo info,InlineFlag inlineFlag,TextFlag flag){
  if (inlineFlag == InlineFlag.BLOCK) {
    writeText(type,txt,style,fontFamily,info,flag);
  }
 else {
    boolean isInline=true;
    if (inlineFlag == InlineFlag.FIRST_INLINE && flag == TextFlag.START) {
      startParagraph(style,isInline);
    }
    if (inlineStyle != null)     writeTextInRun(type,txt,inlineStyle,fontFamily,info,isInline);
 else     writeTextInRun(type,txt,style,fontFamily,info,isInline);
  }
}","public void writeContent(int type,String txt,IStyle style,IStyle inlineStyle,String fontFamily,HyperlinkInfo info,InlineFlag inlineFlag,TextFlag flag,int paragraphWidth){
  if (inlineFlag == InlineFlag.BLOCK) {
    writeText(type,txt,style,fontFamily,info,flag,paragraphWidth);
  }
 else {
    boolean isInline=true;
    if (inlineFlag == InlineFlag.FIRST_INLINE && flag == TextFlag.START) {
      startParagraph(style,isInline,paragraphWidth);
    }
    if (inlineStyle != null)     writeTextInRun(type,txt,inlineStyle,fontFamily,info,isInline,paragraphWidth);
 else     writeTextInRun(type,txt,style,fontFamily,info,isInline,paragraphWidth);
  }
}",0.9351927809680064
69492,"/** 
 * check if it is a J2EE Dynamic Web Project
 */
protected boolean isValidProject(IProject fProject){
  return J2EEProjectUtilities.isDynamicWebProject(fProject);
}","/** 
 * check if it is a J2EE Dynamic Web Project
 */
protected boolean isValidProject(IProject fProject){
  return JavaEEProjectUtilities.isDynamicWebProject(fProject);
}",0.9882352941176472
69493,"/** 
 * Returns the web contents folder of the specified project
 * @param project the project which web contents path is needed
 * @return IPath of the web contents folder
 */
public static IPath getWebContentPath(IProject project){
  IPath path=null;
  if (project != null && J2EEProjectUtilities.isDynamicWebProject(project)) {
    IVirtualComponent component=ComponentCore.createComponent(project);
    path=component.getRootFolder().getWorkspaceRelativePath();
  }
  return path;
}","/** 
 * Returns the web contents folder of the specified project
 * @param project the project which web contents path is needed
 * @return IPath of the web contents folder
 */
public static IPath getWebContentPath(IProject project){
  IPath path=null;
  if (project != null && JavaEEProjectUtilities.isDynamicWebProject(project)) {
    IVirtualComponent component=ComponentCore.createComponent(project);
    path=component.getRootFolder().getWorkspaceRelativePath();
  }
  return path;
}",0.995893223819302
69494,"/** 
 * Resets size of column.
 * @param start
 * @param end
 * @param value
 */
public void resizeColumn(int start,int end,int value){
  Object startColumn=getColumn(start);
  ColumnHandleAdapter startAdapt=HandleAdapterFactory.getInstance().getColumnHandleAdapter(startColumn);
  Object endColumn=getColumn(end);
  ColumnHandleAdapter endAdapt=HandleAdapterFactory.getInstance().getColumnHandleAdapter(endColumn);
  int startWidth=0;
  int endWidth=0;
  startWidth=TableUtil.caleVisualWidth(this,startColumn);
  try {
    getTableAdapter().transStar(RESIZE_COLUMN_TRANS_LABEL);
    startAdapt.setWidth(startWidth + value);
    getTableAdapter().transEnd();
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
}","/** 
 * Resets size of column.
 * @param start
 * @param end
 * @param value
 */
public void resizeColumn(int start,int end,int value,boolean isResetEnd){
  Object startColumn=getColumn(start);
  ColumnHandleAdapter startAdapt=HandleAdapterFactory.getInstance().getColumnHandleAdapter(startColumn);
  Object endColumn=getColumn(end);
  ColumnHandleAdapter endAdapt=HandleAdapterFactory.getInstance().getColumnHandleAdapter(endColumn);
  int startWidth=0;
  int endWidth=0;
  startWidth=TableUtil.caleVisualWidth(this,startColumn);
  endWidth=TableUtil.caleVisualWidth(this,endColumn);
  try {
    getTableAdapter().transStar(RESIZE_COLUMN_TRANS_LABEL);
    startAdapt.setWidth(startWidth + value);
    if (isResetEnd) {
      endAdapt.setWidth(endWidth - value);
    }
    getTableAdapter().transEnd();
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
}",0.91055900621118
69495,"@Override protected void fitResize(){
  List exclusion=new ArrayList();
  TableEditPart part=(TableEditPart)getSourceEditPart();
  int value=getMouseTrueValueX();
  part.getTableAdapter().transStar(RESIZE_COLUMN_TRANS_LABEL);
  int width=0;
  if (isresizeMultipleColumn()) {
    List list=filterEditPart(part.getViewer().getSelectedEditParts());
    for (int i=0; i < list.size(); i++) {
      int tempValue=value;
      Object model=((EditPart)list.get(i)).getModel();
      ColumnHandleAdapter adapter=HandleAdapterFactory.getInstance().getColumnHandleAdapter(model);
      int start=adapter.getColumnNumber();
      exclusion.add(Integer.valueOf(start));
      int end=start + 1;
      int ori=TableUtil.caleVisualWidth(part,model);
      int adjustWidth=TableUtil.caleVisualWidth(part,part.getColumn(getStart())) + value;
      if (getStart() != start) {
        tempValue=adjustWidth - ori;
      }
      if (start == part.getColumnCount()) {
        end=start;
      }
      width=width + getTrueValue(tempValue,start,end);
      resizeFixColumn(tempValue,start,end);
    }
  }
 else {
    exclusion.add(Integer.valueOf(getStart()));
    width=width + getTrueValue(value,getStart(),getEnd());
    resizeFixColumn(value,getStart(),getEnd());
  }
  Dimension tableSize=part.getFigure().getSize();
  try {
    ReportItemHandle handle=part.getTableAdapter().getReportItemHandle();
    double tbWidth=converPixToDefaultUnit(tableSize.width + width);
    setDimensionValue(handle,tbWidth);
  }
 catch (  SemanticException e) {
    part.getTableAdapter().rollBack();
    ExceptionHandler.handle(e);
  }
  adjustOthersColumn(exclusion);
  part.getTableAdapter().transEnd();
}","@Override protected void fitResize(){
  List exclusion=new ArrayList();
  TableEditPart part=(TableEditPart)getSourceEditPart();
  int value=getMouseTrueValueX();
  part.getTableAdapter().transStar(RESIZE_COLUMN_TRANS_LABEL);
  int width=0;
  if (isresizeMultipleColumn() && isCtrlDown()) {
    List list=filterEditPart(part.getViewer().getSelectedEditParts());
    for (int i=0; i < list.size(); i++) {
      int tempValue=value;
      Object model=((EditPart)list.get(i)).getModel();
      ColumnHandleAdapter adapter=HandleAdapterFactory.getInstance().getColumnHandleAdapter(model);
      int start=adapter.getColumnNumber();
      exclusion.add(Integer.valueOf(start));
      int end=start + 1;
      int ori=TableUtil.caleVisualWidth(part,model);
      int adjustWidth=TableUtil.caleVisualWidth(part,part.getColumn(getStart())) + value;
      if (getStart() != start) {
        tempValue=adjustWidth - ori;
      }
      if (start == part.getColumnCount()) {
        end=start;
      }
      width=width + getTrueValue(tempValue,start,end);
      resizeFixColumn(tempValue,start,end);
    }
  }
 else {
    exclusion.add(Integer.valueOf(getStart()));
    width=width + getTrueValue(value,getStart(),getEnd());
    resizeFixColumn(value,getStart(),getEnd());
  }
  if (!isCtrlDown()) {
    exclusion.add(Integer.valueOf(getEnd()));
    if (getStart() != getEnd()) {
      width=0;
    }
  }
  Dimension tableSize=part.getFigure().getSize();
  try {
    ReportItemHandle handle=part.getTableAdapter().getReportItemHandle();
    double tbWidth=converPixToDefaultUnit(tableSize.width + width);
    setDimensionValue(handle,tbWidth);
  }
 catch (  SemanticException e) {
    part.getTableAdapter().rollBack();
    ExceptionHandler.handle(e);
  }
  adjustOthersColumn(exclusion);
  part.getTableAdapter().transEnd();
}",0.9587392550143268
69496,"private void resizeColumn(int value,int start,int end){
  TableEditPart part=(TableEditPart)getSourceEditPart();
  if (start != end) {
    value=getTrueValue(value,start,end);
    part.resizeColumn(start,end,value);
  }
 else {
    Dimension dimension=getDragWidth(start,end);
    if (value < dimension.width) {
      value=dimension.width;
    }
    TableHandleAdapter adp=HandleAdapterFactory.getInstance().getTableHandleAdapter(part.getModel());
    Dimension dm=adp.calculateSize();
    dm.width+=value;
    dm.height=-1;
    try {
      adp.ajustSize(dm);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
}","private void resizeColumn(int value,int start,int end){
  TableEditPart part=(TableEditPart)getSourceEditPart();
  if (start != end) {
    value=getTrueValue(value,start,end);
    part.resizeColumn(start,end,value,!isCtrlDown());
  }
 else {
    Dimension dimension=getDragWidth(start,end);
    if (value < dimension.width) {
      value=dimension.width;
    }
    TableHandleAdapter adp=HandleAdapterFactory.getInstance().getTableHandleAdapter(part.getModel());
    Dimension dm=adp.calculateSize();
    dm.width+=value;
    dm.height=-1;
    try {
      adp.ajustSize(dm);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
}",0.9892966360856268
69497,"private void adjustOthersColumn(List exclusion){
  AbstractTableEditPart part=getAbstractTableEditPart();
  WorkingData data=getTableWorkingData();
  ColumnData[] datas=data.columnWidths;
  if (datas == null) {
    return;
  }
  for (int i=0; i < datas.length; i++) {
    if (exclusion.contains(Integer.valueOf(datas[i].columnNumber))) {
      continue;
    }
    ITableLayoutOwner.DimensionInfomation dim=part.getColumnWidth(datas[i].columnNumber);
    if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(dim.getUnits())) {
      resizeFixColumn(0,datas[i].columnNumber,1);
    }
 else     if (dim.getUnits() == null || dim.getUnits().length() == 0) {
      resizeFixColumn(0,datas[i].columnNumber,1);
    }
  }
}","private void adjustOthersColumn(List exclusion){
  AbstractTableEditPart part=getAbstractTableEditPart();
  WorkingData data=getTableWorkingData();
  ColumnData[] datas=data.columnWidths;
  if (datas == null) {
    return;
  }
  for (int i=0; i < datas.length; i++) {
    if (exclusion.contains(Integer.valueOf(datas[i].columnNumber))) {
      continue;
    }
    ITableLayoutOwner.DimensionInfomation dim=part.getColumnWidth(datas[i].columnNumber);
    if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(dim.getUnits())) {
      resizeFixColumn(0,datas[i].columnNumber,1);
    }
 else     if (dim.getUnits() == null || dim.getUnits().length() == 0) {
      resizeFixColumn(0,datas[i].columnNumber,datas[i].columnNumber);
    }
  }
}",0.984764542936288
69498,"private void resizeFixColumn(int value,int start,int end){
  TableEditPart part=(TableEditPart)getSourceEditPart();
  value=getTrueValue(value,start,end);
  Object startColumn=part.getColumn(start);
  if (!(startColumn instanceof ColumnHandle)) {
    return;
  }
  int startWidth=0;
  int endWidth=0;
  startWidth=TableUtil.caleVisualWidth(part,startColumn);
  try {
    double width=converPixToDefaultUnit(startWidth + value);
    DimensionValue dimensionValue=new DimensionValue(width,getDefaultUnits());
    ((ColumnHandle)startColumn).getWidth().setValue(dimensionValue);
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
}","private void resizeFixColumn(int value,int start,int end){
  TableEditPart part=(TableEditPart)getSourceEditPart();
  value=getTrueValue(value,start,end);
  Object startColumn=part.getColumn(start);
  if (!(startColumn instanceof ColumnHandle)) {
    return;
  }
  Object endColumn=part.getColumn(end);
  if (!(endColumn instanceof ColumnHandle)) {
    return;
  }
  int startWidth=0;
  int endWidth=0;
  startWidth=TableUtil.caleVisualWidth(part,startColumn);
  endWidth=TableUtil.caleVisualWidth(part,endColumn);
  try {
    double width=converPixToDefaultUnit(startWidth + value);
    DimensionValue dimensionValue=new DimensionValue(width,getDefaultUnits());
    ((ColumnHandle)startColumn).getWidth().setValue(dimensionValue);
    width=converPixToDefaultUnit(endWidth - value);
    dimensionValue=new DimensionValue(width,getDefaultUnits());
    if (!isCtrlDown() && start != end) {
      ((ColumnHandle)endColumn).getWidth().setValue(dimensionValue);
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
}",0.7701421800947867
69499,"protected Dimension getDragWidth(int start,int end){
  TableEditPart part=(TableEditPart)getSourceEditPart();
  Dimension retValue=new Dimension(part.getMinWidth(start) - getColumnWidth(start),Integer.MAX_VALUE);
  return retValue;
}","protected Dimension getDragWidth(int start,int end){
  TableEditPart part=(TableEditPart)getSourceEditPart();
  if (isCtrlDown()) {
    Dimension retValue=new Dimension(part.getMinWidth(start) - getColumnWidth(start),Integer.MAX_VALUE);
    return retValue;
  }
 else {
    if (getStart() == getEnd()) {
      return new Dimension(part.getMinWidth(getStart()) - getColumnWidth(getStart()),Integer.MAX_VALUE);
    }
    return new Dimension(part.getMinWidth(getStart()) - getColumnWidth(getStart()),getColumnWidth(getEnd()) - part.getMinWidth(getEnd()));
  }
}",0.5883838383838383
69500,"protected void resize(){
  TableEditPart part=(TableEditPart)getSourceEditPart();
  int value=getMouseTrueValueX();
  part.getTableAdapter().transStar(RESIZE_COLUMN_TRANS_LABEL);
  if (isresizeMultipleColumn()) {
    List list=filterEditPart(part.getViewer().getSelectedEditParts());
    boolean resizeTable=false;
    int width=0;
    for (int i=0; i < list.size(); i++) {
      int tempValue=value;
      Object model=((EditPart)list.get(i)).getModel();
      ColumnHandleAdapter adapter=HandleAdapterFactory.getInstance().getColumnHandleAdapter(model);
      int start=adapter.getColumnNumber();
      int end=start + 1;
      int ori=TableUtil.caleVisualWidth(part,model);
      int adjustWidth=TableUtil.caleVisualWidth(part,part.getColumn(getStart())) + value;
      if (getStart() != start) {
        tempValue=adjustWidth - ori;
      }
      if (start == part.getColumnCount()) {
        end=start;
        resizeTable=true;
      }
 else {
        width=width + getTrueValue(tempValue,start,end);
      }
      resizeColumn(tempValue,start,end);
    }
    if (resizeTable) {
      Dimension size=part.getTableAdapter().getSize();
      try {
        part.getTableAdapter().setSize(new Dimension(size.width + width,-1));
      }
 catch (      SemanticException e) {
        part.getTableAdapter().rollBack();
        ExceptionHandler.handle(e);
      }
    }
  }
 else {
    resizeColumn(value,getStart(),getEnd());
  }
  part.getTableAdapter().transEnd();
}","protected void resize(){
  TableEditPart part=(TableEditPart)getSourceEditPart();
  int value=getMouseTrueValueX();
  part.getTableAdapter().transStar(RESIZE_COLUMN_TRANS_LABEL);
  if (isresizeMultipleColumn() && isCtrlDown()) {
    List list=filterEditPart(part.getViewer().getSelectedEditParts());
    boolean resizeTable=false;
    int width=0;
    for (int i=0; i < list.size(); i++) {
      int tempValue=value;
      Object model=((EditPart)list.get(i)).getModel();
      ColumnHandleAdapter adapter=HandleAdapterFactory.getInstance().getColumnHandleAdapter(model);
      int start=adapter.getColumnNumber();
      int end=start + 1;
      int ori=TableUtil.caleVisualWidth(part,model);
      int adjustWidth=TableUtil.caleVisualWidth(part,part.getColumn(getStart())) + value;
      if (getStart() != start) {
        tempValue=adjustWidth - ori;
      }
      if (start == part.getColumnCount()) {
        end=start;
        resizeTable=true;
      }
 else {
        width=width + getTrueValue(tempValue,start,end);
      }
      resizeColumn(tempValue,start,end);
    }
    if (resizeTable) {
      Dimension size=part.getTableAdapter().getSize();
      try {
        part.getTableAdapter().setSize(new Dimension(size.width + width,-1));
      }
 catch (      SemanticException e) {
        part.getTableAdapter().rollBack();
        ExceptionHandler.handle(e);
      }
    }
  }
 else {
    resizeColumn(value,getStart(),getEnd());
  }
  part.getTableAdapter().transEnd();
}",0.9945762711864408
69501,"@Override protected void fitResize(){
  List exclusion=new ArrayList();
  CrosstabTableEditPart part=(CrosstabTableEditPart)getSourceEditPart().getParent();
  int value=getMouseTrueValueX();
  CommandStack stack=part.getCrosstabHandleAdapter().getCrosstabItemHandle().getModuleHandle().getCommandStack();
  stack.startTrans(RESIZE_COLUMN_TRANS_LABEL);
  int width=0;
  exclusion.add(Integer.valueOf(getStart()));
  width=width + getTrueValue(value,getStart(),getEnd());
  resizeFixColumn(getTrueValue(value),getStart(),getEnd());
  Dimension tableSize=part.getFigure().getSize();
  part.getCrosstabHandleAdapter().setWidth(converPixToDefaultUnit(tableSize.width + width),getDefaultUnits());
  adjustOthersColumn(exclusion);
  stack.commit();
}","@Override protected void fitResize(){
  List exclusion=new ArrayList();
  CrosstabTableEditPart part=(CrosstabTableEditPart)getSourceEditPart().getParent();
  int value=getMouseTrueValueX();
  CommandStack stack=part.getCrosstabHandleAdapter().getCrosstabItemHandle().getModuleHandle().getCommandStack();
  stack.startTrans(RESIZE_COLUMN_TRANS_LABEL);
  int width=0;
  exclusion.add(Integer.valueOf(getStart()));
  width=width + getTrueValue(value,getStart(),getEnd());
  resizeFixColumn(getTrueValue(value),getStart(),getEnd());
  if (!isCtrlDown()) {
    exclusion.add(Integer.valueOf(getEnd()));
    if (getStart() != getEnd()) {
      width=0;
    }
  }
  Dimension tableSize=part.getFigure().getSize();
  part.getCrosstabHandleAdapter().setWidth(converPixToDefaultUnit(tableSize.width + width),getDefaultUnits());
  adjustOthersColumn(exclusion);
  stack.commit();
}",0.9206939281288724
69502,"/** 
 * Resets size of column.
 * @param start
 * @param end
 * @param value
 */
public void resizeColumn(int start,int end,int value){
  CrosstabTableEditPart part=(CrosstabTableEditPart)getSourceEditPart().getParent();
  CrosstabHandleAdapter crosstabAdapter=part.getCrosstabHandleAdapter();
  int startWidth=0;
  int endWidth=0;
  startWidth=CrosstabTableUtil.caleVisualWidth(part,start);
  crosstabAdapter.setColumnWidth(start,startWidth + value);
}","/** 
 * Resets size of column.
 * @param start
 * @param end
 * @param value
 */
public void resizeColumn(int start,int end,int value){
  CrosstabTableEditPart part=(CrosstabTableEditPart)getSourceEditPart().getParent();
  CrosstabHandleAdapter crosstabAdapter=part.getCrosstabHandleAdapter();
  int startWidth=0;
  int endWidth=0;
  startWidth=CrosstabTableUtil.caleVisualWidth(part,start);
  endWidth=CrosstabTableUtil.caleVisualWidth(part,end);
  crosstabAdapter.setColumnWidth(start,startWidth + value);
  if (!isCtrlDown() && start != end) {
    crosstabAdapter.setColumnWidth(end,endWidth - value);
  }
}",0.852304797742239
69503,"protected void adjustOthersColumn(List exclusion){
  AbstractTableEditPart part=getAbstractTableEditPart();
  WorkingData data=getTableWorkingData();
  ColumnData[] datas=data.columnWidths;
  if (datas == null) {
    return;
  }
  for (int i=0; i < datas.length; i++) {
    if (exclusion.contains(Integer.valueOf(datas[i].columnNumber))) {
      continue;
    }
    ITableLayoutOwner.DimensionInfomation dim=part.getColumnWidth(datas[i].columnNumber);
    if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(dim.getUnits())) {
      resizeFixColumn(0,datas[i].columnNumber,1);
    }
 else     if (dim.getUnits() == null || dim.getUnits().length() == 0) {
      resizeFixColumn(0,datas[i].columnNumber,1);
    }
  }
}","protected void adjustOthersColumn(List exclusion){
  AbstractTableEditPart part=getAbstractTableEditPart();
  WorkingData data=getTableWorkingData();
  ColumnData[] datas=data.columnWidths;
  if (datas == null) {
    return;
  }
  for (int i=0; i < datas.length; i++) {
    if (exclusion.contains(Integer.valueOf(datas[i].columnNumber))) {
      continue;
    }
    ITableLayoutOwner.DimensionInfomation dim=part.getColumnWidth(datas[i].columnNumber);
    if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(dim.getUnits())) {
      resizeFixColumn(0,datas[i].columnNumber,1);
    }
 else     if (dim.getUnits() == null || dim.getUnits().length() == 0) {
      resizeFixColumn(0,datas[i].columnNumber,datas[i].columnNumber);
    }
  }
}",0.9848066298342542
69504,"private void resizeFixColumn(int value,int start,int end){
  CrosstabTableEditPart part=(CrosstabTableEditPart)getSourceEditPart().getParent();
  CrosstabHandleAdapter crosstabAdapter=part.getCrosstabHandleAdapter();
  int startWidth=0;
  startWidth=CrosstabTableUtil.caleVisualWidth(part,start);
  crosstabAdapter.setColumnWidth(start,converPixToDefaultUnit(startWidth + value),getDefaultUnits());
}","private void resizeFixColumn(int value,int start,int end){
  CrosstabTableEditPart part=(CrosstabTableEditPart)getSourceEditPart().getParent();
  CrosstabHandleAdapter crosstabAdapter=part.getCrosstabHandleAdapter();
  int startWidth=0;
  int endWidth=0;
  startWidth=CrosstabTableUtil.caleVisualWidth(part,start);
  endWidth=CrosstabTableUtil.caleVisualWidth(part,end);
  crosstabAdapter.setColumnWidth(start,converPixToDefaultUnit(startWidth + value),getDefaultUnits());
  if (!isCtrlDown() && start != end) {
    crosstabAdapter.setColumnWidth(end,converPixToDefaultUnit(endWidth - value),getDefaultUnits());
  }
}",0.7767944936086529
69505,"protected Dimension getDragWidth(int start,int end){
  return new Dimension(TableUtil.getMinWidth(getCrosstabTableEditPart(),getStart()) - CrosstabTableUtil.caleVisualWidth(getCrosstabTableEditPart(),getStart()),Integer.MAX_VALUE);
}","protected Dimension getDragWidth(int start,int end){
  if (isCtrlDown()) {
    return new Dimension(TableUtil.getMinWidth(getCrosstabTableEditPart(),getStart()) - CrosstabTableUtil.caleVisualWidth(getCrosstabTableEditPart(),getStart()),Integer.MAX_VALUE);
  }
 else {
    if (getStart() == getEnd()) {
      return new Dimension(TableUtil.getMinWidth(getCrosstabTableEditPart(),getStart()) - CrosstabTableUtil.caleVisualWidth(getCrosstabTableEditPart(),getStart()),Integer.MAX_VALUE);
    }
    return new Dimension(TableUtil.getMinWidth(getCrosstabTableEditPart(),getStart()) - CrosstabTableUtil.caleVisualWidth(getCrosstabTableEditPart(),getStart()),CrosstabTableUtil.caleVisualWidth(getCrosstabTableEditPart(),getEnd()) - TableUtil.getMinWidth(getCrosstabTableEditPart(),getEnd()));
  }
}",0.455078125
69506,"protected Data addDataContent(IDataContent data){
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  Data excelData=null;
  Object generateBy=data.getGenerateBy();
  IStyle style=data.getComputedStyle();
  DataFormatValue dataformat=style.getDataFormat();
  MapDesign map=null;
  if (generateBy instanceof DataItemDesign) {
    DataItemDesign design=(DataItemDesign)generateBy;
    map=design.getMap();
  }
  if (map != null && map.getRuleCount() > 0 && data.getLabelText() != null) {
    excelData=engine.addData(data.getLabelText().trim(),style,url,bookmark);
  }
 else {
    String locale=null;
    int type=ExcelUtil.getType(data.getValue());
    if (type == SheetData.STRING) {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      excelData=engine.addData(data.getText(),style,url,bookmark,locale);
    }
 else     if (type == Data.NUMBER) {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      excelData=engine.addData(data.getValue(),style,url,bookmark,locale);
    }
 else {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      excelData=engine.addDateTime(data,style,url,bookmark,locale);
    }
  }
  return excelData;
}","protected Data addDataContent(IDataContent data){
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  Data excelData=null;
  Object generateBy=data.getGenerateBy();
  IStyle style=data.getComputedStyle();
  DataFormatValue dataformat=style.getDataFormat();
  MapDesign map=null;
  if (generateBy instanceof DataItemDesign) {
    DataItemDesign design=(DataItemDesign)generateBy;
    map=design.getMap();
  }
  if (map != null && map.getRuleCount() > 0 && data.getLabelText() != null) {
    excelData=engine.addData(data.getLabelText().trim(),style,url,bookmark);
  }
 else {
    String locale=null;
    int type=ExcelUtil.getType(data.getValue());
    if (type == SheetData.STRING) {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      excelData=engine.addData(data.getText(),style,url,bookmark,locale);
    }
 else     if (type == Data.NUMBER) {
      if (dataformat != null) {
        locale=dataformat.getNumberLocale();
      }
      excelData=engine.addData(data.getValue(),style,url,bookmark,locale);
    }
 else {
      if (dataformat != null) {
        locale=dataformat.getDateTimeLocale();
      }
      excelData=engine.addDateTime(data,style,url,bookmark,locale);
    }
  }
  return excelData;
}",0.9898278560250392
69507,"public Object getLevelAttribute(int levelIndex,int attributeIndex){
  return this.rs.getLevelAttribute(levelIndex,attributeIndex);
}","public Object getLevelAttribute(int levelIndex,int attributeIndex){
  if (levelIndex < 0 || resultObject.length < levelIndex) {
    return null;
  }
  return ((Member)this.resultObject[levelIndex]).getAttributes()[attributeIndex];
}",0.5824175824175825
69508,"public MirroredAggregationResultSet(IAggregationResultSet rs,int mirrorLevel,boolean breakHierarchy,List sortList) throws IOException {
  this.mirrorLevel=mirrorLevel;
  this.breakHierarchy=breakHierarchy;
  this.rootNode=new MemberTreeNode(""String_Node_Str"");
  this.resultObject=new Object[rs.getLevelCount()];
  this.rs=rs;
  this.sortList=sortList;
  this.isTimeMirror=TimeMemberUtil.containsTimeMirror(rs,mirrorLevel);
  if (!isTimeMirror && breakHierarchy) {
    this.breakHierarchyList=new ArrayList[rs.getLevelCount() - mirrorLevel];
    for (int j=0; j < breakHierarchyList.length; j++) {
      breakHierarchyList[j]=new ArrayList();
    }
    populateMirror();
  }
 else {
    if (!breakHierarchy) {
      this.mirrorLevel=this.mirrorLevel - 1;
    }
    populateTimeMirror();
    nodeLength=getLength(this.rootNode);
    valueMapLength=0;
    Iterator iter=this.noBreakHierarchyKeyMap.entrySet().iterator();
    while (iter.hasNext()) {
      valueMapLength+=getLength((MemberTreeNode)((Entry)iter.next()).getValue());
    }
    this.length=nodeLength * valueMapLength;
  }
}","public MirroredAggregationResultSet(IAggregationResultSet rs,int mirrorLevel,boolean breakHierarchy,List sortList) throws IOException {
  this.mirrorLevel=mirrorLevel;
  this.breakHierarchy=breakHierarchy;
  Member member=new Member();
  member.setKeyValues(new Object[]{""String_Node_Str""});
  this.rootNode=new MemberTreeNode(member);
  this.resultObject=new Object[rs.getLevelCount()];
  this.rs=rs;
  this.sortList=sortList;
  this.isTimeMirror=TimeMemberUtil.containsTimeMirror(rs,mirrorLevel);
  if (!isTimeMirror && breakHierarchy) {
    this.breakHierarchyList=new ArrayList[rs.getLevelCount() - mirrorLevel];
    for (int j=0; j < breakHierarchyList.length; j++) {
      breakHierarchyList[j]=new ArrayList();
    }
    populateMirror();
  }
 else {
    if (!breakHierarchy) {
      this.mirrorLevel=this.mirrorLevel - 1;
    }
    populateTimeMirror();
    nodeLength=getLength(this.rootNode);
    valueMapLength=0;
    Iterator iter=this.noBreakHierarchyKeyMap.entrySet().iterator();
    while (iter.hasNext()) {
      valueMapLength+=getLength((MemberTreeNode)((Entry)iter.next()).getValue());
    }
    this.length=nodeLength * valueMapLength;
  }
}",0.9470404984423676
69509,"public Object[] getLevelKeyValue(int levelIndex){
  return new Object[]{this.resultObject[levelIndex]};
}","public Object[] getLevelKeyValue(int levelIndex){
  return ((Member)this.resultObject[levelIndex]).getKeyValues();
}",0.8506787330316742
69510,"private void populateTimeMirror() throws IOException {
  MemberTreeNode parent;
  MemberTreeNode child;
  Object[] preValue=new Object[rs.getLevelCount()];
  Object[] currValue=new Object[rs.getLevelCount()];
  final int sortType=this.getSortTypeOnMirroredLevel(this.mirrorLevel);
  if (sortType != IDimensionSortDefn.SORT_UNDEFINED) {
    noBreakHierarchyKeyMap=new TreeMap(new Comparator(){
      public int compare(      final Object arg0,      final Object arg1){
        if (sortType == IDimensionSortDefn.SORT_ASC)         return ((Comparable)arg0).compareTo(arg1);
 else         return ((Comparable)arg0).compareTo(arg1) * -1;
      }
    }
);
  }
 else {
    noBreakHierarchyKeyMap=new HashMap();
  }
  for (int i=0; i < rs.length(); i++) {
    rs.seek(i);
    parent=this.rootNode;
    for (int j=0; j < rs.getLevelCount(); j++) {
      currValue[j]=rs.getLevelKeyValue(j)[0];
    }
    for (int j=0; j < this.mirrorLevel; j++) {
      if (!isEqualObject(preValue[j],currValue[j])) {
        child=new MemberTreeNode(currValue[j]);
        parent.insertNode(child);
        child.parentNode=parent;
        parent=child;
      }
 else {
        if (parent.childNodesList.size() > 0)         parent=(MemberTreeNode)parent.childNodesList.get(parent.childNodesList.size() - 1);
 else {
          child=new MemberTreeNode(currValue[j]);
          parent.insertNode(child);
          child.parentNode=parent;
          parent=child;
        }
      }
    }
    if (noBreakHierarchyKeyMap.containsKey(currValue[this.mirrorLevel])) {
      MemberTreeNode node=(MemberTreeNode)noBreakHierarchyKeyMap.get(currValue[this.mirrorLevel]);
      for (int j=this.mirrorLevel + 1; j < this.rs.getLevelCount(); j++) {
        if (!node.containsChild(currValue[j])) {
          if (TimeMemberUtil.isTimeMirror(rs,j)) {
            break;
          }
 else {
            MemberTreeNode childNode=new MemberTreeNode(currValue[j]);
            node.insertNode(childNode);
            childNode.parentNode=node;
            node=childNode;
          }
        }
 else {
          node=node.getChild(currValue[j]);
        }
      }
    }
 else {
      MemberTreeNode parentNode=null;
      for (int j=this.mirrorLevel; j < this.rs.getLevelCount(); j++) {
        if (TimeMemberUtil.isTimeMirror(rs,j)) {
          MemberTreeNode[] nodes=TimeMemberUtil.getDateTimeNodes(rs.getAttributeNames(),rs.getLevelAttribute(j,0),j);
          for (int k=0; k < nodes.length; k++) {
            if (parentNode == null) {
              noBreakHierarchyKeyMap.put(nodes[k].key,nodes[k]);
            }
 else             parentNode.insertNode(nodes[k]);
            nodes[k].parentNode=parentNode;
          }
          break;
        }
 else {
          if (parentNode == null) {
            parentNode=new MemberTreeNode(currValue[j]);
            noBreakHierarchyKeyMap.put(currValue[this.mirrorLevel],parentNode);
          }
 else {
            MemberTreeNode childNode=new MemberTreeNode(currValue[j]);
            parentNode.insertNode(childNode);
            childNode.parentNode=parentNode;
            parentNode=childNode;
          }
        }
      }
    }
    for (int k=0; k < rs.getLevelCount(); k++) {
      preValue[k]=currValue[k];
    }
  }
  int level=mirrorLevel + 1;
  List nodeList1=new ArrayList();
  nodeList1.addAll(noBreakHierarchyKeyMap.values());
  for (int k=mirrorLevel + 1; k < rs.getLevelCount(); k++) {
    final int childSortType=this.getSortTypeOnMirroredLevel(k);
    List nodeList2=new ArrayList();
    if (sortType != IDimensionSortDefn.SORT_UNDEFINED) {
      while (k > level) {
        for (int j=0; j < nodeList1.size(); j++) {
          nodeList2.addAll(((MemberTreeNode)nodeList1.get(j)).childNodesList);
        }
        nodeList1.clear();
        nodeList1.addAll(nodeList2);
        nodeList2.clear();
        level++;
      }
      for (int j=0; j < nodeList1.size(); j++) {
        MemberTreeNode node=(MemberTreeNode)nodeList1.get(j);
        Collections.sort(node.childNodesList,new Comparator(){
          public int compare(          final Object arg0,          final Object arg1){
            if (childSortType == IDimensionSortDefn.SORT_ASC)             return ((Comparable)((MemberTreeNode)arg0).key).compareTo(((MemberTreeNode)arg1).key);
 else             return ((Comparable)((MemberTreeNode)arg0).key).compareTo(((MemberTreeNode)arg1).key) * -1;
          }
        }
);
      }
    }
  }
}","private void populateTimeMirror() throws IOException {
  MemberTreeNode parent;
  MemberTreeNode child;
  Object[] preValue=new Object[rs.getLevelCount()];
  Object[] currValue=new Object[rs.getLevelCount()];
  final int sortType=this.getSortTypeOnMirroredLevel(this.mirrorLevel);
  if (sortType != IDimensionSortDefn.SORT_UNDEFINED) {
    noBreakHierarchyKeyMap=new TreeMap(new Comparator(){
      public int compare(      final Object arg0,      final Object arg1){
        if (sortType == IDimensionSortDefn.SORT_ASC)         return ((Comparable)arg0).compareTo(arg1);
 else         return ((Comparable)arg0).compareTo(arg1) * -1;
      }
    }
);
  }
 else {
    noBreakHierarchyKeyMap=new HashMap();
  }
  for (int i=0; i < rs.length(); i++) {
    rs.seek(i);
    parent=this.rootNode;
    for (int j=0; j < rs.getLevelCount(); j++) {
      currValue[j]=rs.getLevelKeyValue(j)[0];
    }
    for (int j=0; j < this.mirrorLevel; j++) {
      if (!isEqualObject(preValue[j],currValue[j])) {
        Member member=new Member();
        member.setKeyValues(new Object[]{currValue[j]});
        member.setAttributes(rs.getLevelAttributesValue(j));
        child=new MemberTreeNode(member);
        parent.insertNode(child);
        child.parentNode=parent;
        parent=child;
      }
 else {
        if (parent.childNodesList.size() > 0)         parent=(MemberTreeNode)parent.childNodesList.get(parent.childNodesList.size() - 1);
 else {
          Member member=new Member();
          member.setKeyValues(new Object[]{currValue[j]});
          member.setAttributes(rs.getLevelAttributesValue(j));
          child=new MemberTreeNode(member);
          parent.insertNode(child);
          child.parentNode=parent;
          parent=child;
        }
      }
    }
    Member mirrorMember=new Member();
    mirrorMember.setKeyValues(new Object[]{currValue[this.mirrorLevel]});
    mirrorMember.setAttributes(rs.getLevelAttributesValue(this.mirrorLevel));
    if (noBreakHierarchyKeyMap.containsKey(mirrorMember)) {
      MemberTreeNode node=(MemberTreeNode)noBreakHierarchyKeyMap.get(mirrorMember);
      for (int j=this.mirrorLevel + 1; j < this.rs.getLevelCount(); j++) {
        Member member=new Member();
        member.setKeyValues(new Object[]{currValue[j]});
        member.setAttributes(rs.getLevelAttributesValue(j));
        if (!node.containsChild(member)) {
          if (TimeMemberUtil.isTimeMirror(rs,j)) {
            break;
          }
 else {
            MemberTreeNode childNode=new MemberTreeNode(member);
            node.insertNode(childNode);
            childNode.parentNode=node;
            node=childNode;
          }
        }
 else {
          node=node.getChild(member);
        }
      }
    }
 else {
      MemberTreeNode parentNode=null;
      for (int j=this.mirrorLevel; j < this.rs.getLevelCount(); j++) {
        if (TimeMemberUtil.isTimeMirror(rs,j)) {
          MemberTreeNode[] nodes=TimeMemberUtil.getDateTimeNodes(rs.getAttributeNames(),rs.getLevelAttribute(j,0),j);
          for (int k=0; k < nodes.length; k++) {
            if (parentNode == null) {
              noBreakHierarchyKeyMap.put(nodes[k].key,nodes[k]);
            }
 else             parentNode.insertNode(nodes[k]);
            nodes[k].parentNode=parentNode;
          }
          break;
        }
 else {
          if (parentNode == null) {
            Member member=new Member();
            member.setKeyValues(new Object[]{currValue[j]});
            member.setAttributes(rs.getLevelAttributesValue(j));
            parentNode=new MemberTreeNode(member);
            noBreakHierarchyKeyMap.put(mirrorMember,parentNode);
          }
 else {
            Member member=new Member();
            member.setKeyValues(new Object[]{currValue[j]});
            member.setAttributes(rs.getLevelAttributesValue(j));
            MemberTreeNode childNode=new MemberTreeNode(member);
            parentNode.insertNode(childNode);
            childNode.parentNode=parentNode;
            parentNode=childNode;
          }
        }
      }
    }
    for (int k=0; k < rs.getLevelCount(); k++) {
      preValue[k]=currValue[k];
    }
  }
  int level=mirrorLevel + 1;
  List nodeList1=new ArrayList();
  nodeList1.addAll(noBreakHierarchyKeyMap.values());
  for (int k=mirrorLevel + 1; k < rs.getLevelCount(); k++) {
    final int childSortType=this.getSortTypeOnMirroredLevel(k);
    List nodeList2=new ArrayList();
    if (sortType != IDimensionSortDefn.SORT_UNDEFINED) {
      while (k > level) {
        for (int j=0; j < nodeList1.size(); j++) {
          nodeList2.addAll(((MemberTreeNode)nodeList1.get(j)).childNodesList);
        }
        nodeList1.clear();
        nodeList1.addAll(nodeList2);
        nodeList2.clear();
        level++;
      }
      for (int j=0; j < nodeList1.size(); j++) {
        MemberTreeNode node=(MemberTreeNode)nodeList1.get(j);
        Collections.sort(node.childNodesList,new Comparator(){
          public int compare(          final Object arg0,          final Object arg1){
            if (childSortType == IDimensionSortDefn.SORT_ASC)             return ((Comparable)((MemberTreeNode)arg0).key).compareTo(((MemberTreeNode)arg1).key);
 else             return ((Comparable)((MemberTreeNode)arg0).key).compareTo(((MemberTreeNode)arg1).key) * -1;
          }
        }
);
      }
    }
  }
}",0.6506715882292627
69511,"private void populateMirror() throws IOException {
  MemberTreeNode parent;
  MemberTreeNode child;
  Object[] preValue=new Object[mirrorLevel];
  Object[] currValue=new Object[mirrorLevel];
  for (int i=0; i < rs.length(); i++) {
    rs.seek(i);
    parent=this.rootNode;
    for (int j=0; j < mirrorLevel; j++) {
      currValue[j]=rs.getLevelKeyValue(j)[0];
    }
    for (int j=0; j < mirrorLevel; j++) {
      if (!isEqualObject(preValue[j],currValue[j])) {
        child=new MemberTreeNode(currValue[j]);
        parent.insertNode(child);
        child.parentNode=parent;
        parent=child;
      }
 else {
        if (parent.childNodesList.size() > 0)         parent=(MemberTreeNode)parent.childNodesList.get(parent.childNodesList.size() - 1);
 else {
          child=new MemberTreeNode(currValue[j]);
          parent.insertNode(child);
          child.parentNode=parent;
          parent=child;
        }
      }
    }
    for (int j=0; j < breakHierarchyList.length; j++) {
      if (!breakHierarchyList[j].contains(rs.getLevelKeyValue(j + mirrorLevel)[0]))       breakHierarchyList[j].add(rs.getLevelKeyValue(j + mirrorLevel)[0]);
    }
    for (int k=0; k < mirrorLevel; k++) {
      preValue[k]=currValue[k];
    }
  }
  this.length=getLength(this.rootNode);
  for (int k=0; k < breakHierarchyList.length; k++) {
    final int sortType=getSortTypeOnMirroredLevel(k + mirrorLevel);
    if (sortType != IDimensionSortDefn.SORT_UNDEFINED) {
      Collections.sort(breakHierarchyList[k],new Comparator(){
        public int compare(        final Object arg0,        final Object arg1){
          if (sortType == IDimensionSortDefn.SORT_ASC)           return ((Comparable)arg0).compareTo(arg1);
 else           return ((Comparable)arg0).compareTo(arg1) * -1;
        }
      }
);
    }
    this.length*=breakHierarchyList[k].size();
  }
}","private void populateMirror() throws IOException {
  MemberTreeNode parent;
  MemberTreeNode child;
  Object[] preValue=new Object[mirrorLevel];
  Object[] currValue=new Object[mirrorLevel];
  for (int i=0; i < rs.length(); i++) {
    rs.seek(i);
    parent=this.rootNode;
    for (int j=0; j < mirrorLevel; j++) {
      currValue[j]=rs.getLevelKeyValue(j)[0];
    }
    for (int j=0; j < mirrorLevel; j++) {
      if (!isEqualObject(preValue[j],currValue[j])) {
        Member member=new Member();
        member.setKeyValues(new Object[]{currValue[j]});
        member.setAttributes(rs.getLevelAttributesValue(j));
        child=new MemberTreeNode(member);
        parent.insertNode(child);
        child.parentNode=parent;
        parent=child;
      }
 else {
        if (parent.childNodesList.size() > 0)         parent=(MemberTreeNode)parent.childNodesList.get(parent.childNodesList.size() - 1);
 else {
          Member member=new Member();
          member.setKeyValues(new Object[]{currValue[j]});
          member.setAttributes(rs.getLevelAttributesValue(j));
          child=new MemberTreeNode(member);
          parent.insertNode(child);
          child.parentNode=parent;
          parent=child;
        }
      }
    }
    for (int j=0; j < breakHierarchyList.length; j++) {
      Member temp=new Member();
      temp.setKeyValues(rs.getLevelKeyValue(j + mirrorLevel));
      if (!breakHierarchyList[j].contains(temp)) {
        Member member=new Member();
        member.setKeyValues(rs.getLevelKeyValue(j + mirrorLevel));
        member.setAttributes(rs.getLevelAttributesValue(j + mirrorLevel));
        breakHierarchyList[j].add(member);
      }
    }
    for (int k=0; k < mirrorLevel; k++) {
      preValue[k]=currValue[k];
    }
  }
  this.length=getLength(this.rootNode);
  for (int k=0; k < breakHierarchyList.length; k++) {
    final int sortType=getSortTypeOnMirroredLevel(k + mirrorLevel);
    if (sortType != IDimensionSortDefn.SORT_UNDEFINED) {
      Collections.sort(breakHierarchyList[k],new Comparator(){
        public int compare(        final Object arg0,        final Object arg1){
          if (sortType == IDimensionSortDefn.SORT_ASC)           return ((Comparable)arg0).compareTo(arg1);
 else           return ((Comparable)arg0).compareTo(arg1) * -1;
        }
      }
);
    }
    this.length*=breakHierarchyList[k].size();
  }
}",0.7047664216267489
69512,"public void startRow(IRowContent row){
  if (!isHidden(row)) {
    rowFilledFlag=false;
    boolean isHeader=false;
    styles.push(row.getComputedStyle());
    if (row.getBand() != null && row.getBand().getBandType() == IBandContent.BAND_HEADER) {
      isHeader=true;
    }
    double height=WordUtil.convertTo(row.getHeight());
    wordWriter.startTableRow(height,isHeader,row.getTable().isHeaderRepeat());
    context.newRow();
  }
}","public void startRow(IRowContent row){
  if (!isHidden(row)) {
    rowFilledFlag=false;
    boolean isHeader=false;
    styles.push(row.getComputedStyle());
    if (row.getBand() != null && row.getBand().getBandType() == IBandContent.BAND_HEADER) {
      isHeader=true;
    }
    double height=WordUtil.convertTo(row.getHeight());
    wordWriter.startTableRow(height,isHeader,row.getTable().isHeaderRepeat(),fixedLayout);
    context.newRow();
  }
}",0.9864559819413092
69513,"public void start(IReportContent report){
  this.reportContent=report;
}","public void start(IReportContent report){
  this.reportContent=report;
  if (null == layoutPreference) {
    ReportDesignHandle designHandle=report.getDesign().getReportDesign();
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
    fixedLayout=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  }
}",0.1775585696670776
69514,"public void initialize(IEmitterServices service) throws EngineException {
  if (service != null) {
    this.out=EmitterUtil.getOuputStream(service,""String_Node_Str"" + getOutputFormat());
    this.reportRunnable=service.getReportRunnable();
    this.actionHandler=(IHTMLActionHandler)service.getOption(RenderOption.ACTION_HANDLER);
    reportContext=service.getReportContext();
    ULocale locale=null;
    if (reportContext != null) {
      locale=ULocale.forLocale(reportContext.getLocale());
    }
    if (locale == null) {
      locale=ULocale.getDefault();
    }
    EngineResourceHandle resourceHandle=new EngineResourceHandle(locale);
    messageFlashObjectNotSupported=resourceHandle.getMessage(MessageConstants.FLASH_OBJECT_NOT_SUPPORTED_PROMPT);
  }
  context=new EmitterContext();
}","public void initialize(IEmitterServices service) throws EngineException {
  if (service != null) {
    this.out=EmitterUtil.getOuputStream(service,""String_Node_Str"" + getOutputFormat());
    this.reportRunnable=service.getReportRunnable();
    this.actionHandler=(IHTMLActionHandler)service.getOption(RenderOption.ACTION_HANDLER);
    reportContext=service.getReportContext();
    ULocale locale=null;
    if (reportContext != null) {
      locale=ULocale.forLocale(reportContext.getLocale());
    }
    if (locale == null) {
      locale=ULocale.getDefault();
    }
    EngineResourceHandle resourceHandle=new EngineResourceHandle(locale);
    messageFlashObjectNotSupported=resourceHandle.getMessage(MessageConstants.FLASH_OBJECT_NOT_SUPPORTED_PROMPT);
    IRenderOption renderOption=service.getRenderOption();
    if (renderOption != null) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
      layoutPreference=htmlOption.getLayoutPreference();
    }
  }
  context=new EmitterContext();
}",0.8765910348644161
69515,"/** 
 * @param style style of the row
 * @param height height of current row, if heigh equals 1 then ignore height
 * @param type header or normal
 */
public void startTableRow(double height,boolean isHeader,boolean repeatHeader){
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  if (height != -1) {
    writeAttrTag(""String_Node_Str"",height);
  }
  if (isHeader) {
    String headerOnOff=repeatHeader ? ""String_Node_Str"" : ""String_Node_Str"";
    writeAttrTag(""String_Node_Str"",headerOnOff);
  }
  writer.closeTag(""String_Node_Str"");
}","/** 
 * @param style style of the row
 * @param height height of current row, if heigh equals 1 then ignore height
 * @param type header or normal
 */
public void startTableRow(double height,boolean isHeader,boolean repeatHeader,boolean fixedLayout){
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  if (height != -1) {
    writer.openTag(""String_Node_Str"");
    if (fixedLayout) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
    writer.attribute(""String_Node_Str"",height);
    writer.closeTag(""String_Node_Str"");
  }
  if (isHeader) {
    String headerOnOff=repeatHeader ? ""String_Node_Str"" : ""String_Node_Str"";
    writeAttrTag(""String_Node_Str"",headerOnOff);
  }
  writer.closeTag(""String_Node_Str"");
}",0.8382687927107062
69516,"public void startTableRow(double height){
  startTableRow(height,false,false);
}","public void startTableRow(double height){
  startTableRow(height,false,false,false);
}",0.963855421686747
69517,"public IRenderOption getPreferredRenderOption(){
  EXCELRenderOption renderOption=new EXCELRenderOption();
  renderOption.setEmitterID(getID());
  renderOption.setOutputFormat(""String_Node_Str"");
  for (  IOptionValue optionValue : values) {
    if (optionValue != null) {
      renderOption.setOption(optionValue.getName(),optionValue.getValue());
    }
  }
  return renderOption;
}","public IRenderOption getPreferredRenderOption(){
  EXCELRenderOption renderOption=new EXCELRenderOption();
  renderOption.setEmitterID(getID());
  renderOption.setOutputFormat(""String_Node_Str"");
  for (  IOptionValue optionValue : values) {
    if (optionValue != null) {
      renderOption.setOption(getRenderOptionName(optionValue.getName()),optionValue.getValue());
    }
  }
  return renderOption;
}",0.9733163913595934
69518,"private void initOptions(){
  ConfigurableOption wrappingText=new ConfigurableOption(IExcelRenderOption.WRAPPING_TEXT);
  wrappingText.setDisplayName(Messages.getString(""String_Node_Str""));
  wrappingText.setDataType(IConfigurableOption.DataType.BOOLEAN);
  wrappingText.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  wrappingText.setDefaultValue(Boolean.TRUE);
  wrappingText.setToolTip(null);
  wrappingText.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{wrappingText};
}","private void initOptions(){
  ConfigurableOption wrappingText=new ConfigurableOption(TEXT_WRAPPING);
  wrappingText.setDisplayName(Messages.getString(""String_Node_Str""));
  wrappingText.setDataType(IConfigurableOption.DataType.BOOLEAN);
  wrappingText.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  wrappingText.setDefaultValue(Boolean.TRUE);
  wrappingText.setToolTip(null);
  wrappingText.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{wrappingText};
}",0.9740634005763688
69519,"public IRenderOption getPreferredRenderOption(){
  PDFRenderOption renderOption=new PDFRenderOption();
  renderOption.setEmitterID(getID());
  renderOption.setOutputFormat(""String_Node_Str"");
  for (  IOptionValue optionValue : values) {
    if (optionValue != null) {
      renderOption.setOption(optionValue.getName(),optionValue.getValue());
    }
  }
  return renderOption;
}","public IRenderOption getPreferredRenderOption(){
  PDFRenderOption renderOption=new PDFRenderOption();
  renderOption.setEmitterID(getID());
  renderOption.setOutputFormat(""String_Node_Str"");
  for (  IOptionValue optionValue : values) {
    if (optionValue != null) {
      renderOption.setOption(getRenderOptionName(optionValue.getName()),optionValue.getValue());
    }
  }
  return renderOption;
}",0.9730423620025674
69520,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(IPDFRenderOption.PDF_BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.FALSE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(IPDFRenderOption.PDF_TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.FALSE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}",0.986700443318556
69521,"@Override public IRenderOption getPreferredRenderOption(){
  RenderOption renderOption=new RenderOption();
  renderOption.setEmitterID(getID());
  renderOption.setOutputFormat(""String_Node_Str"");
  for (  IOptionValue optionValue : values) {
    if (optionValue != null) {
      renderOption.setOption(optionValue.getName(),optionValue.getValue());
    }
  }
  return renderOption;
}","@Override public IRenderOption getPreferredRenderOption(){
  RenderOption renderOption=new RenderOption();
  renderOption.setEmitterID(getID());
  renderOption.setOutputFormat(""String_Node_Str"");
  for (  IOptionValue optionValue : values) {
    if (optionValue != null) {
      renderOption.setOption(getRenderOptionName(optionValue.getName()),optionValue.getValue());
    }
  }
  return renderOption;
}",0.9733163913595934
69522,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(IPDFRenderOption.PDF_BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.FALSE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(IPDFRenderOption.PDF_TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.FALSE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}",0.986700443318556
69523,"@Override public IRenderOption getPreferredRenderOption(){
  PDFRenderOption renderOption=new PDFRenderOption();
  renderOption.setEmitterID(getID());
  renderOption.setOutputFormat(""String_Node_Str"");
  for (  IOptionValue optionValue : values) {
    if (optionValue != null) {
      renderOption.setOption(optionValue.getName(),optionValue.getValue());
    }
  }
  return renderOption;
}","@Override public IRenderOption getPreferredRenderOption(){
  PDFRenderOption renderOption=new PDFRenderOption();
  renderOption.setEmitterID(getID());
  renderOption.setOutputFormat(""String_Node_Str"");
  for (  IOptionValue optionValue : values) {
    if (optionValue != null) {
      renderOption.setOption(getRenderOptionName(optionValue.getName()),optionValue.getValue());
    }
  }
  return renderOption;
}",0.9737171464330412
69524,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(IPDFRenderOption.PDF_BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.FALSE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(IPDFRenderOption.PDF_TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.FALSE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}",0.986700443318556
69525,"public void startTable(ITableContent table){
  ContainerSizeInfo sizeInfo=engine.getCurrentContainer().getSizeInfo();
  int width=sizeInfo.getWidth();
  ColumnsInfo info=LayoutUtil.createTable(table,width);
  if (info == null) {
    return;
  }
  String caption=table.getCaption();
  if (caption != null) {
    engine.addCaption(caption);
  }
  engine.addTable(table,info,sizeInfo);
}","public void startTable(ITableContent table){
  ContainerSizeInfo sizeInfo=engine.getCurrentContainer().getSizeInfo();
  int width=sizeInfo.getWidth();
  int[] columns=LayoutUtil.createTable(table,LayoutUtil.getElementWidth(table,width));
  ColumnsInfo info=new ColumnsInfo(columns);
  String caption=table.getCaption();
  if (caption != null) {
    engine.addCaption(caption);
  }
  engine.addTable(table,info,sizeInfo);
}",0.5409429280397022
69526,"public static ColumnsInfo createTable(ITableContent table,int width){
  int tableWidth=getElementWidth(table,width);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.covertDimensionType(value,tableWidth);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if (leftWidth != 0 && unassignedCount == 0) {
    for (int i=0; i < columnCount; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
    }
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1)       columns[1]=0;
 else       columns[i]=resize(columns[i],totalAssigned,leftWidth);
    }
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}","public static int[] createTable(ITableContent table,int tableWidth){
  int columnCount=table.getColumnCount();
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.covertDimensionType(value,tableWidth);
      totalAssigned+=columns[i];
    }
  }
  if (table.getWidth() == null && unassignedCount == 0) {
    return columns;
  }
  return EmitterUtil.resizeTableColumn(tableWidth,columns,unassignedCount,totalAssigned);
}",0.5353233830845772
69527,"private static int getElementWidth(IContent content,int width){
  DimensionType value=content.getWidth();
  if (value != null) {
    try {
      width=Math.min(ExcelUtil.covertDimensionType(value,width),width);
    }
 catch (    Exception e) {
    }
  }
  return width;
}","public static int getElementWidth(IContent content,int width){
  DimensionType value=content.getWidth();
  if (value != null) {
    try {
      width=Math.min(ExcelUtil.covertDimensionType(value,width),width);
    }
 catch (    Exception e) {
    }
  }
  return width;
}",0.9796672828096118
69528,"public void startTable(ITableContent table){
  adjustInline();
  styles.push(table.getComputedStyle());
  writeBookmark(table);
  Object tableToc=table.getTOC();
  if (tableToc != null) {
    tableTocs.add(new TocInfo(tableToc.toString(),tocLevel));
  }
  increaseTOCLevel(table);
  String caption=table.getCaption();
  if (caption != null) {
    wordWriter.writeCaption(caption);
  }
  if (context.isLastTable()) {
    wordWriter.insertHiddenParagraph();
  }
  int width=WordUtil.convertTo(table.getWidth(),context.getCurrentWidth());
  width=Math.min(width,context.getCurrentWidth());
  wordWriter.startTable(table.getComputedStyle(),width);
  int[] cols=computeTblColumnWidths(table,width);
  wordWriter.writeColumn(cols);
  context.addTable(cols,table.getComputedStyle());
}","public void startTable(ITableContent table){
  adjustInline();
  styles.push(table.getComputedStyle());
  writeBookmark(table);
  Object tableToc=table.getTOC();
  if (tableToc != null) {
    tableTocs.add(new TocInfo(tableToc.toString(),tocLevel));
  }
  increaseTOCLevel(table);
  String caption=table.getCaption();
  if (caption != null) {
    wordWriter.writeCaption(caption);
  }
  if (context.isLastTable()) {
    wordWriter.insertHiddenParagraph();
  }
  int width=WordUtil.convertTo(table.getWidth(),context.getCurrentWidth());
  width=Math.min(width,context.getCurrentWidth());
  int[] cols=computeTblColumnWidths(table,width);
  wordWriter.startTable(table.getComputedStyle(),getTableWidth(cols));
  wordWriter.writeColumn(cols);
  context.addTable(cols,table.getComputedStyle());
}",0.9070063694267516
69529,"private int[] computeTblColumnWidths(ITableContent table,int tblWidth){
  int colCount=table.getColumnCount();
  int[] tblColumns=new int[colCount];
  int count=0;
  int total=0;
  for (int i=0; i < colCount; i++) {
    IColumn col=table.getColumn(i);
    if (col.getWidth() == null) {
      tblColumns[i]=-1;
      count++;
    }
 else {
      tblColumns[i]=WordUtil.convertTo(col.getWidth(),tblWidth);
      total+=tblColumns[i];
    }
  }
  for (int i=0; i < tblColumns.length; i++) {
    if (tblColumns[i] == -1) {
      tblColumns[i]=(tblWidth - total) / count;
    }
  }
  return tblColumns;
}","private int[] computeTblColumnWidths(ITableContent table,int tblWidth){
  int colCount=table.getColumnCount();
  int[] tblColumns=new int[colCount];
  int count=0;
  int total=0;
  for (int i=0; i < colCount; i++) {
    IColumn col=table.getColumn(i);
    if (col.getWidth() == null) {
      tblColumns[i]=-1;
      count++;
    }
 else {
      tblColumns[i]=WordUtil.convertTo(col.getWidth(),tblWidth);
      total+=tblColumns[i];
    }
  }
  if (table.getWidth() == null && count == 0) {
    return tblColumns;
  }
  return EmitterUtil.resizeTableColumn(tblWidth,tblColumns,count,total);
}",0.7747899159663866
69530,"protected void buildLogicContainerProperties(IContent content,LayoutContext context){
  IStyle style=content.getStyle();
  if (style != null && !style.isEmpty()) {
    boxStyle=new BoxStyle();
    IStyle cs=content.getComputedStyle();
    Color color=PropertyUtil.getColor(cs.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
    if (color != null) {
      boxStyle.setBackgroundColor(color);
    }
    String url=style.getBackgroundImage();
    if (url != null) {
      boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),cs.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),0,0,0,0));
    }
    if (!isInInlineStacking) {
      pageBreakAfter=cs.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
      pageBreakInside=cs.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
      pageBreakBefore=cs.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    }
  }
 else {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
}","protected void buildLogicContainerProperties(IContent content,LayoutContext context){
  IStyle style=content.getStyle();
  if (style != null && !style.isEmpty()) {
    boxStyle=new BoxStyle();
    IStyle cs=content.getComputedStyle();
    Color color=PropertyUtil.getColor(cs.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
    if (color != null) {
      boxStyle.setBackgroundColor(color);
    }
    String url=style.getBackgroundImage();
    if (url != null) {
      boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),cs.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),0,0,0,0));
    }
    if (!isInInlineStacking) {
      pageBreakAfter=cs.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
      if (pageBreakInside == null) {
        pageBreakInside=cs.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
      }
      pageBreakBefore=cs.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    }
  }
 else {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
}",0.9776934029425725
69531,"protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  localProperties.setMarginBottom(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_BOTTOM),maw));
  localProperties.setMarginLeft(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_LEFT),maw));
  localProperties.setMarginTop(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_TOP),maw));
  localProperties.setMarginRight(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_RIGHT),maw));
  localProperties.setPaddingBottom(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),maw));
  localProperties.setPaddingLeft(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),maw));
  localProperties.setPaddingTop(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),maw));
  localProperties.setPaddingRight(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),maw));
  if (!isInInlineStacking) {
    pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    pageBreakInside=style.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
    pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
  }
  this.boxStyle=new BoxStyle();
  int borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setLeftBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_LEFT_COLOR),style.getProperty(IStyle.STYLE_BORDER_LEFT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setRightBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_RIGHT_COLOR),style.getProperty(IStyle.STYLE_BORDER_RIGHT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setTopBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_TOP_COLOR),style.getProperty(IStyle.STYLE_BORDER_TOP_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setBottomBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_COLOR),style.getProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE),borderWidth));
  }
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  CSSValue url=style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE);
  if (!IStyle.NONE_VALUE.equals(style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE))) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url.getCssText()),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),0,0,0,0));
  }
  action=content.getHyperlinkAction();
  bookmark=content.getBookmark();
}","protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  localProperties.setMarginBottom(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_BOTTOM),maw));
  localProperties.setMarginLeft(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_LEFT),maw));
  localProperties.setMarginTop(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_TOP),maw));
  localProperties.setMarginRight(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_RIGHT),maw));
  localProperties.setPaddingBottom(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),maw));
  localProperties.setPaddingLeft(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),maw));
  localProperties.setPaddingTop(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),maw));
  localProperties.setPaddingRight(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),maw));
  if (!isInInlineStacking) {
    pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    if (pageBreakInside == null) {
      pageBreakInside=style.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
    }
    pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
  }
  this.boxStyle=new BoxStyle();
  int borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setLeftBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_LEFT_COLOR),style.getProperty(IStyle.STYLE_BORDER_LEFT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setRightBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_RIGHT_COLOR),style.getProperty(IStyle.STYLE_BORDER_RIGHT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setTopBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_TOP_COLOR),style.getProperty(IStyle.STYLE_BORDER_TOP_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setBottomBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_COLOR),style.getProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE),borderWidth));
  }
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  CSSValue url=style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE);
  if (!IStyle.NONE_VALUE.equals(style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE))) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url.getCssText()),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),0,0,0,0));
  }
  action=content.getHyperlinkAction();
  bookmark=content.getBookmark();
}",0.992710628920156
69532,"protected void updateBackgroundImage(){
  BackgroundImageInfo bgi=boxStyle.getBackgroundImage();
  Image img=null;
  if (bgi != null) {
    if ((bgi.getXOffset() != 0 || bgi.getYOffset() != 0)) {
      String imageUrl=bgi.getUrl();
      try {
        img=Image.getInstance(new URL(bgi.getUrl()));
      }
 catch (      Exception e) {
        if (SvgFile.isSvg(imageUrl)) {
          try {
            img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
          }
 catch (          Exception ex) {
            logger.log(Level.WARNING,ex.getMessage(),ex);
          }
        }
 else {
          logger.log(Level.WARNING,e.getMessage(),e);
        }
      }
      if (img != null) {
        int resolutionX=img.getDpiX();
        int resolutionY=img.getDpiY();
        if (0 == resolutionX || 0 == resolutionY) {
          resolutionX=96;
          resolutionY=96;
        }
        float imageWidth=img.plainWidth() / resolutionX * 72;
        float imageHeight=img.plainHeight() / resolutionY * 72;
        if (content != null) {
          IStyle style=content.getComputedStyle();
          int ox=getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),(width - (int)(imageWidth * PDFConstants.LAYOUT_TO_PDF_RATIO)));
          int oy=getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),(height - (int)(imageHeight * PDFConstants.LAYOUT_TO_PDF_RATIO)));
          bgi.setXOffset(ox);
          bgi.setYOffset(oy);
        }
      }
    }
  }
}","protected void updateBackgroundImage(){
  BackgroundImageInfo bgi=boxStyle.getBackgroundImage();
  Image img=null;
  if (bgi != null) {
    String imageUrl=bgi.getUrl();
    try {
      img=Image.getInstance(new URL(bgi.getUrl()));
    }
 catch (    Exception e) {
      if (SvgFile.isSvg(imageUrl)) {
        try {
          img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
        }
 catch (        Exception ex) {
          logger.log(Level.WARNING,ex.getMessage(),ex);
        }
      }
 else {
        logger.log(Level.WARNING,e.getMessage(),e);
      }
    }
    if (img != null) {
      int resolutionX=img.getDpiX();
      int resolutionY=img.getDpiY();
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=96;
        resolutionY=96;
      }
      float imageWidth=img.plainWidth() / resolutionX * 72;
      float imageHeight=img.plainHeight() / resolutionY * 72;
      if (content != null) {
        IStyle style=content.getComputedStyle();
        int ox=getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),(width - (int)(imageWidth * PDFConstants.LAYOUT_TO_PDF_RATIO)));
        int oy=getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),(height - (int)(imageHeight * PDFConstants.LAYOUT_TO_PDF_RATIO)));
        bgi.setXOffset(ox);
        bgi.setYOffset(oy);
      }
    }
  }
}",0.9325842696629212
69533,"/** 
 * @param name
 * @param resultSets
 * @param writer
 * @throws IOException
 */
public static void save(String name,IAggregationResultSet[] resultSets,IDocArchiveWriter writer) throws IOException {
  if (name == null)   return;
  RAOutputStream outputStream=writer.createRandomAccessStream(name);
  DataOutputStream dataOutputStream=new DataOutputStream(outputStream);
  if (resultSets == null) {
    dataOutputStream.writeInt(-1);
    return;
  }
  dataOutputStream.writeInt(resultSets.length);
  dataOutputStream.close();
  for (int i=0; i < resultSets.length; i++) {
    outputStream=writer.createRandomAccessStream(name + PREFIX_RESULTSET + i);
    dataOutputStream=new DataOutputStream(outputStream);
    saveOneResultSet(dataOutputStream,resultSets[i]);
    dataOutputStream.close();
  }
}","/** 
 * @param name
 * @param resultSets
 * @param writer
 * @throws IOException
 */
public static void save(String name,IAggregationResultSet[] resultSets,IDocArchiveWriter writer) throws IOException {
  if (writer == null || name == null)   return;
  RAOutputStream outputStream=writer.createRandomAccessStream(name);
  DataOutputStream dataOutputStream=new DataOutputStream(outputStream);
  if (resultSets == null) {
    dataOutputStream.writeInt(-1);
    return;
  }
  dataOutputStream.writeInt(resultSets.length);
  dataOutputStream.close();
  for (int i=0; i < resultSets.length; i++) {
    outputStream=writer.createRandomAccessStream(name + PREFIX_RESULTSET + i);
    dataOutputStream=new DataOutputStream(outputStream);
    saveOneResultSet(dataOutputStream,resultSets[i]);
    dataOutputStream.close();
  }
}",0.9888751545117428
69534,"private void saveFile(final ModuleHandle moduleHandle,final File file,final IPath oldReportPath,IProgressMonitor monitor){
  if (file.exists() && !file.canWrite()) {
    MessageDialog.openError(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new Object[]{file.getAbsolutePath()}));
    return;
  }
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public synchronized final void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      try {
        IWorkspaceRunnable workspaceRunnable=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor pm) throws CoreException {
            try {
              execute(pm);
            }
 catch (            CoreException e) {
              throw e;
            }
catch (            IOException e) {
              ExceptionHandler.handle(e);
            }
          }
        }
;
        ResourcesPlugin.getWorkspace().run(workspaceRunnable,ResourcesPlugin.getWorkspace().getRoot(),IResource.NONE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
catch (      OperationCanceledException e) {
        throw new InterruptedException(e.getMessage());
      }
    }
    public void execute(    final IProgressMonitor monitor) throws CoreException, IOException {
      if (file.exists() || file.createNewFile()) {
        FileOutputStream out=new FileOutputStream(file);
        try {
          moduleHandle.serialize(out);
        }
  finally {
          out.close();
        }
        if (oldReportPath != null) {
          copyReportConfigFile(new Path(file.getAbsolutePath()),oldReportPath);
        }
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(UIUtil.getDefaultShell()).run(false,true,op);
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}","private void saveFile(final ModuleHandle moduleHandle,final File file,final IPath oldReportPath,IProgressMonitor monitor){
  if (file.exists() && !file.canWrite()) {
    MessageDialog.openError(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new Object[]{file.getAbsolutePath()}));
    return;
  }
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public synchronized final void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      try {
        IWorkspaceRunnable workspaceRunnable=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor pm) throws CoreException {
            try {
              execute(pm);
            }
 catch (            CoreException e) {
              throw e;
            }
catch (            IOException e) {
              ExceptionHandler.handle(e);
            }
          }
        }
;
        ResourcesPlugin.getWorkspace().run(workspaceRunnable,ResourcesPlugin.getWorkspace().getRoot(),IResource.NONE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
catch (      OperationCanceledException e) {
        throw new InterruptedException(e.getMessage());
      }
    }
    public void execute(    final IProgressMonitor monitor) throws CoreException, IOException {
      if (file.exists() || file.createNewFile()) {
        OutputStream out=new BufferedOutputStream(new FileOutputStream(file),8192 * 2);
        try {
          moduleHandle.serialize(out);
          out.flush();
        }
  finally {
          out.close();
        }
        if (oldReportPath != null) {
          copyReportConfigFile(new Path(file.getAbsolutePath()),oldReportPath);
        }
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(UIUtil.getDefaultShell()).run(false,true,op);
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}",0.9492227979274612
69535,"public void execute(final IProgressMonitor monitor) throws CoreException, IOException {
  if (file.exists() || file.createNewFile()) {
    FileOutputStream out=new FileOutputStream(file);
    try {
      moduleHandle.serialize(out);
    }
  finally {
      out.close();
    }
    if (oldReportPath != null) {
      copyReportConfigFile(new Path(file.getAbsolutePath()),oldReportPath);
    }
  }
}","public void execute(final IProgressMonitor monitor) throws CoreException, IOException {
  if (file.exists() || file.createNewFile()) {
    OutputStream out=new BufferedOutputStream(new FileOutputStream(file),8192 * 2);
    try {
      moduleHandle.serialize(out);
      out.flush();
    }
  finally {
      out.close();
    }
    if (oldReportPath != null) {
      copyReportConfigFile(new Path(file.getAbsolutePath()),oldReportPath);
    }
  }
}",0.7814726840855107
69536,"/** 
 * The method checks if specified aggregate function is a magic aggregate, it means these aggregates operations will change data type. <p> Now the magic aggregates in chart include Count, DistinctCount, Top, TopPercent, Bottom, BottomPercent, Rank and PercentRank.
 * @param aggFunc
 * @return if magic aggregate
 * @since BIRT 2.3
 */
public static boolean isMagicAggregate(String aggFunc){
  return PluginSettings.DefaultAggregations.COUNT.equals(aggFunc) || PluginSettings.DefaultAggregations.DISTINCT_COUNT.equals(aggFunc) || PluginSettings.DefaultAggregations.TOP.equals(aggFunc)|| PluginSettings.DefaultAggregations.TOP_PERCENT.equals(aggFunc)|| PluginSettings.DefaultAggregations.BOTTOM.equals(aggFunc)|| PluginSettings.DefaultAggregations.BOTTOM_PERCENT.equals(aggFunc)|| PluginSettings.DefaultAggregations.RANK.equals(aggFunc)|| PluginSettings.DefaultAggregations.PERCENT_RANK.equals(aggFunc);
}","/** 
 * The method checks if specified aggregate function is a magic aggregate, it means these aggregates operations will change data type. <p> Now the magic aggregates in chart include Count, DistinctCount, Top, TopPercent, Bottom, BottomPercent, Rank, PercentRank and Running Count.
 * @param aggFunc
 * @return if magic aggregate
 * @since BIRT 2.3
 */
public static boolean isMagicAggregate(String aggFunc){
  return PluginSettings.DefaultAggregations.COUNT.equals(aggFunc) || PluginSettings.DefaultAggregations.DISTINCT_COUNT.equals(aggFunc) || PluginSettings.DefaultAggregations.TOP.equals(aggFunc)|| PluginSettings.DefaultAggregations.TOP_PERCENT.equals(aggFunc)|| PluginSettings.DefaultAggregations.BOTTOM.equals(aggFunc)|| PluginSettings.DefaultAggregations.BOTTOM_PERCENT.equals(aggFunc)|| PluginSettings.DefaultAggregations.RANK.equals(aggFunc)|| PluginSettings.DefaultAggregations.PERCENT_RANK.equals(aggFunc)|| PluginSettings.DefaultAggregations.RUNNING_COUNT.equals(aggFunc);
}",0.9463157894736842
69537,"/** 
 * Create composite of sort area.
 * @param cmpBasic
 */
public void createSortArea(Composite parent){
  Composite cmpSortArea=new Composite(parent,SWT.NONE);
{
    cmpSortArea.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpSortArea.setLayoutData(gd);
  }
  Label lblSorting=new Label(cmpSortArea,SWT.NONE);
  lblSorting.setText(Messages.getString(""String_Node_Str""));
  cmbSorting=new Combo(cmpSortArea,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBSorting=new GridData(GridData.FILL_HORIZONTAL);
  cmbSorting.setLayoutData(gdCMBSorting);
  cmbSorting.addListener(SWT.Selection,this);
  new Label(cmpSortArea,SWT.NONE);
  Label lblSortExpr=new Label(cmpSortArea,SWT.NONE);
  lblSortExpr.setText(Messages.getString(""String_Node_Str""));
  cmbSortExpr=new Combo(cmpSortArea,SWT.DROP_DOWN);
  GridData gdCMBSortExpr=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortExpr.setLayoutData(gdCMBSortExpr);
  cmbSortExpr.addListener(SWT.Selection,this);
  cmbSortExpr.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      String sExpr=cmbSortExpr.getText();
      registerSortKey(sExpr);
      getSeriesDefinitionForProcessing().getSortKey().setDefinition(sExpr);
    }
  }
);
  if (fHasExprBuilder) {
    btnSortExprBuilder=new Button(cmpSortArea,SWT.PUSH);
{
      GridData gdBTNBuilder=new GridData();
      gdBTNBuilder.heightHint=20;
      gdBTNBuilder.widthHint=20;
      btnSortExprBuilder.setLayoutData(gdBTNBuilder);
      btnSortExprBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
      btnSortExprBuilder.addSelectionListener(this);
      btnSortExprBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
      btnSortExprBuilder.getImage().setBackground(btnSortExprBuilder.getBackground());
      btnSortExprBuilder.setEnabled(wizardContext.getUIServiceProvider().isInvokingSupported());
      btnSortExprBuilder.setVisible(wizardContext.getUIServiceProvider().isEclipseModeSupported());
    }
  }
}","/** 
 * Create composite of sort area.
 * @param cmpBasic
 */
public void createSortArea(Composite parent){
  Composite cmpSortArea=new Composite(parent,SWT.NONE);
{
    cmpSortArea.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpSortArea.setLayoutData(gd);
  }
  lblSorting=new Label(cmpSortArea,SWT.NONE);
  lblSorting.setText(Messages.getString(""String_Node_Str""));
  cmbSorting=new Combo(cmpSortArea,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBSorting=new GridData(GridData.FILL_HORIZONTAL);
  cmbSorting.setLayoutData(gdCMBSorting);
  cmbSorting.addListener(SWT.Selection,this);
  new Label(cmpSortArea,SWT.NONE);
  lblSortExpr=new Label(cmpSortArea,SWT.NONE);
  lblSortExpr.setText(Messages.getString(""String_Node_Str""));
  cmbSortExpr=new Combo(cmpSortArea,SWT.DROP_DOWN);
  GridData gdCMBSortExpr=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortExpr.setLayoutData(gdCMBSortExpr);
  cmbSortExpr.addListener(SWT.Selection,this);
  cmbSortExpr.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      String sExpr=cmbSortExpr.getText();
      registerSortKey(sExpr);
      getSeriesDefinitionForProcessing().getSortKey().setDefinition(sExpr);
    }
  }
);
  if (fHasExprBuilder) {
    btnSortExprBuilder=new Button(cmpSortArea,SWT.PUSH);
{
      GridData gdBTNBuilder=new GridData();
      gdBTNBuilder.heightHint=20;
      gdBTNBuilder.widthHint=20;
      btnSortExprBuilder.setLayoutData(gdBTNBuilder);
      btnSortExprBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
      btnSortExprBuilder.addSelectionListener(this);
      btnSortExprBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
      btnSortExprBuilder.getImage().setBackground(btnSortExprBuilder.getBackground());
      btnSortExprBuilder.setEnabled(wizardContext.getUIServiceProvider().isInvokingSupported());
      btnSortExprBuilder.setVisible(wizardContext.getUIServiceProvider().isEclipseModeSupported());
    }
  }
}",0.9970428782651553
69538,"/** 
 * Set state of SortKey components.
 * @param enabled
 * @since BIRT 2.3
 */
protected void setSortKeySelectionState(boolean enabled){
  cmbSortExpr.setEnabled(enabled);
  if (btnSortExprBuilder != null) {
    btnSortExprBuilder.setEnabled(enabled);
  }
}","/** 
 * Set state of SortKey components.
 * @param enabled
 * @since BIRT 2.3
 */
protected void setSortKeySelectionState(boolean enabled){
  lblSortExpr.setEnabled(enabled);
  cmbSortExpr.setEnabled(enabled);
  if (btnSortExprBuilder != null) {
    btnSortExprBuilder.setEnabled(enabled);
  }
}",0.9369369369369368
69539,"public void createSortArea(Composite parent){
  super.createSortArea(parent);
  if (!isYGroupingEnabled()) {
    cmbSorting.setEnabled(false);
    cmbSortExpr.setEnabled(false);
  }
}","public void createSortArea(Composite parent){
  super.createSortArea(parent);
  if (!isYGroupingEnabled()) {
    lblSorting.setEnabled(false);
    cmbSorting.setEnabled(false);
    lblSortExpr.setEnabled(false);
    cmbSortExpr.setEnabled(false);
  }
}",0.8413793103448276
69540,"/** 
 * Checks if grouping is supported.
 * @param wizardContext
 * @since 2.3
 */
public static boolean isGroupingSupported(ChartWizardContext wizardContext){
  final int state=wizardContext.getDataServiceProvider().getState();
  return (state & IDataServiceProvider.SHARE_QUERY) != IDataServiceProvider.SHARE_QUERY && (state & IDataServiceProvider.INHERIT_COLUMNS_GROUPS) != IDataServiceProvider.INHERIT_COLUMNS_GROUPS;
}","/** 
 * Checks if grouping is supported.
 * @param wizardContext
 * @since 2.3
 */
public static boolean isGroupingSupported(ChartWizardContext wizardContext){
  final int state=wizardContext.getDataServiceProvider().getState();
  return (state & IDataServiceProvider.SHARE_QUERY) != IDataServiceProvider.SHARE_QUERY && (state & IDataServiceProvider.INHERIT_COLUMNS_GROUPS) != IDataServiceProvider.INHERIT_COLUMNS_GROUPS && (state & IDataServiceProvider.HAS_CUBE) != IDataServiceProvider.HAS_CUBE;
}",0.9175704989154012
69541,"IOdaDataSetDesign newOdaDataSet(OdaDataSetHandle modelDataSet,ExecutionContext context) throws BirtException {
  OdaDataSetDesign dteDataSet=new OdaDataSetDesign(modelDataSet.getQualifiedName());
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(modelDataSet,context);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(modelDataSet,dteDataSet);
  Expression expression=modelDataSet.getPropertyBindingExpression(OdaDataSet.QUERY_TEXT_PROP);
  String queryTextBinding=getExpressionValue(expression);
  if (needPropertyBinding() && queryTextBinding != null && queryTextBinding.length() > 0 && context.getDataEngine() instanceof DteDataEngine) {
    dteDataSet.setQueryText(evaluatePropertyBindingExpr(queryTextBinding));
  }
 else {
    dteDataSet.setQueryText(modelDataSet.getQueryText());
  }
  dteDataSet.setExtensionID(modelDataSet.getExtensionID());
  dteDataSet.setPrimaryResultSetName(modelDataSet.getResultSetName());
  if (modelDataSet.getPropertyHandle(IOdaDataSetModel.RESULT_SET_NUMBER_PROP).isSet())   dteDataSet.setPrimaryResultSetNumber(modelDataSet.getResultSetNumber());
  Map staticProps=getExtensionProperties(modelDataSet,modelDataSet.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      Expression expr=modelDataSet.getPropertyBindingExpression(propName);
      String bindingExpr=getExpressionValue(expr);
      String propValue;
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=this.evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteDataSet.addPublicProperty((String)propName,propValue);
    }
  }
  Iterator elmtIter=modelDataSet.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteDataSet.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  return dteDataSet;
}","IOdaDataSetDesign newOdaDataSet(OdaDataSetHandle modelDataSet,OdaDataSetDesign dteDataSet,ExecutionContext context) throws BirtException {
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(modelDataSet,context);
  dteDataSet.setEventHandler(eventHandler);
  Expression expression=modelDataSet.getPropertyBindingExpression(OdaDataSet.QUERY_TEXT_PROP);
  String queryTextBinding=getExpressionValue(expression);
  if (needPropertyBinding() && queryTextBinding != null && queryTextBinding.length() > 0 && context.getDataEngine() instanceof DteDataEngine) {
    dteDataSet.setQueryText(evaluatePropertyBindingExpr(queryTextBinding));
  }
  Map staticProps=getExtensionProperties(modelDataSet,modelDataSet.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      Expression expr=modelDataSet.getPropertyBindingExpression(propName);
      String bindingExpr=getExpressionValue(expr);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        String propValue=this.evaluatePropertyBindingExpr(bindingExpr);
        dteDataSet.addPublicProperty((String)propName,propValue);
      }
    }
  }
  return dteDataSet;
}",0.6938662225922843
69542,"/** 
 * @param dataSet
 * @throws BirtException
 */
private void doDefineDataSet(DataSetHandle dataSet) throws BirtException {
  if (dataSet instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)dataSet;
    Iterator iter=((JointDataSetHandle)jointDataSet).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          doDefineDataSource(childDataSource);
        }
        doDefineDataSet(childDataSet);
      }
    }
  }
  dteSession.defineDataSet(dteSession.getModelAdaptor().adaptDataSet(dataSet));
}","/** 
 * @param dataSet
 * @throws BirtException
 */
private void doDefineDataSet(DataSetHandle dataSet) throws BirtException {
  if (dataSet instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)dataSet;
    Iterator iter=((JointDataSetHandle)jointDataSet).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          doDefineDataSource(childDataSource);
        }
        doDefineDataSet(childDataSet);
      }
    }
  }
  dteSession.defineDataSet(this.appendRuntimeInfoToDataSet(dataSet,dteSession.getModelAdaptor().adaptDataSet(dataSet)));
}",0.9730794484569928
69543,"/** 
 * Create an IJointDataSetDesign instance.
 * @param handle
 * @param context2
 * @return
 * @throws BirtException
 */
private IJointDataSetDesign newJointDataSet(JointDataSetHandle handle) throws BirtException {
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(handle,context);
  JointDataSetDesign dteDataSet=(JointDataSetDesign)this.dteSession.getModelAdaptor().adaptDataSet(handle);
  dteDataSet.setEventHandler(eventHandler);
  return dteDataSet;
}","/** 
 * Create an IJointDataSetDesign instance.
 * @param handle
 * @param context2
 * @return
 * @throws BirtException
 */
private IJointDataSetDesign newJointDataSet(JointDataSetHandle handle,JointDataSetDesign dteDataSet) throws BirtException {
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(handle,context);
  dteDataSet.setEventHandler(eventHandler);
  return dteDataSet;
}",0.7155963302752294
69544,"IScriptDataSetDesign newScriptDataSet(ScriptDataSetHandle modelDataSet,ExecutionContext context) throws BirtException {
  ScriptDataSetDesign dteDataSet=new ScriptDataSetDesign(modelDataSet.getQualifiedName());
  IScriptDataSetEventHandler eventHandler=new ScriptDataSetScriptExecutor(modelDataSet,context);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(modelDataSet,dteDataSet);
  dteDataSet.setOpenScript(modelDataSet.getOpen());
  dteDataSet.setFetchScript(modelDataSet.getFetch());
  dteDataSet.setCloseScript(modelDataSet.getClose());
  dteDataSet.setDescribeScript(modelDataSet.getDescribe());
  return dteDataSet;
}","IScriptDataSetDesign newScriptDataSet(ScriptDataSetHandle modelDataSet,ScriptDataSetDesign dteDataSet,ExecutionContext context) throws BirtException {
  IScriptDataSetEventHandler eventHandler=new ScriptDataSetScriptExecutor(modelDataSet,context);
  dteDataSet.setEventHandler(eventHandler);
  return dteDataSet;
}",0.4386149003147954
69545,"/** 
 * Gets the IPageGenerator class corresponding to the given DE type.
 * @param type The DE element type
 * @return The class of the IPageGenerator
 */
private Class getGeneratorClass(Object obj){
  Class type=obj.getClass();
  if (type == TableHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return ListPageGenerator.class;
  }
  if (type == ImageHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return TextPageGenerator.class;
  }
  if (type == TextItemHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return TextPageGenerator.class;
  }
  if (type == TextDataHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return TextPageGenerator.class;
  }
  if (type == ColumnHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return ColumnPageGenerator.class;
  }
  if (type == RowHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return ColumnPageGenerator.class;
  }
  if (type == GridHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return GridPageGenerator.class;
  }
  if (type == DataItemHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return DataPageGenerator.class;
  }
  if (type == CellHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return ColumnPageGenerator.class;
  }
  if (type == ListHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return ListPageGenerator.class;
  }
  if (type == TabularCubeHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return ListPageGenerator.class;
  }
  if (type == ModelClassWrapper.class) {
    getGeneratorClass(((ModelClassWrapper)obj).getElement());
    return MessagePageGenerator.class;
  }
  if (type == LabelHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return LabelPageGenerator.class;
  }
 else   if (type == SimpleMasterPageHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (type == DataSourceHandle.class || type == OdaDataSourceHandle.class || type == ScriptDataSourceHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (type == DataSetHandle.class || type == OdaDataSetHandle.class || type == JointDataSetHandle.class || type == ScriptDataSetHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (type == ScalarParameterHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (type == TemplateReportItemHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (type == ReportDesignHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (type == LibraryHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (type == AutoTextHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (type == ParameterGroupHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (type == CascadingParameterGroupHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else {
    typeInfo=Messages.getString(""String_Node_Str"");
    return TabPageGenerator.class;
  }
  return CategoryPageGenerator.class;
}","/** 
 * Gets the IPageGenerator class corresponding to the given DE type.
 * @param type The DE element type
 * @return The class of the IPageGenerator
 */
private Class getGeneratorClass(Object obj){
  Class type=obj.getClass();
  if (type == TableHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return ListPageGenerator.class;
  }
  if (type == ImageHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return TextPageGenerator.class;
  }
  if (type == TextItemHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return TextPageGenerator.class;
  }
  if (type == TextDataHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return TextPageGenerator.class;
  }
  if (type == ColumnHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return ColumnPageGenerator.class;
  }
  if (type == RowHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return ColumnPageGenerator.class;
  }
  if (type == GridHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return GridPageGenerator.class;
  }
  if (type == DataItemHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return DataPageGenerator.class;
  }
  if (type == CellHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return ColumnPageGenerator.class;
  }
  if (type == ListHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return ListPageGenerator.class;
  }
  if (type == TabularCubeHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return ListPageGenerator.class;
  }
  if (type == ModelClassWrapper.class) {
    getGeneratorClass(((ModelClassWrapper)obj).getElement());
    return MessagePageGenerator.class;
  }
  if (type == LabelHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
    return LabelPageGenerator.class;
  }
 else   if (type == SimpleMasterPageHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (DataSourceHandle.class.isAssignableFrom(type)) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (DataSetHandle.class.isAssignableFrom(type)) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (type == ScalarParameterHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (type == TemplateReportItemHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (type == ReportDesignHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (type == LibraryHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (type == AutoTextHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (type == ParameterGroupHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else   if (type == CascadingParameterGroupHandle.class) {
    typeInfo=Messages.getString(""String_Node_Str"");
  }
 else {
    typeInfo=Messages.getString(""String_Node_Str"");
    return TabPageGenerator.class;
  }
  return CategoryPageGenerator.class;
}",0.9386865857454092
69546,"public IPageHint readFixedLayoutPageHint(DataInputStream in) throws IOException {
  long pageNumber=IOUtil.readLong(in);
  String masterPage=IOUtil.readString(in);
  PageHint hint=new PageHint(pageNumber,masterPage);
  hint.setOffset(pageIndexReader.getPageOffset(masterPage));
  int sectionCount=IOUtil.readInt(in);
  for (int i=0; i < sectionCount; i++) {
    PageSection section=null;
    int sectionType=IOUtil.readInt(in);
    if (sectionType == PageSection.TYPE_FIXED_LAYOUT_PAGE_SECTION) {
      section=new SizeBasedPageSection();
    }
 else {
      section=new PageSection();
    }
    section.read(in);
    hint.addSection(section);
  }
  int hintSize=IOUtil.readInt(in);
  for (int i=0; i < hintSize; i++) {
    UnresolvedRowHint rowHint=new UnresolvedRowHint();
    rowHint.readObject(new DataInputStream(in));
    hint.addUnresolvedRowHint(rowHint);
  }
  int columnHintSize=IOUtil.readInt(in);
  for (int i=0; i < columnHintSize; i++) {
    String tableId=IOUtil.readString(in);
    int start=IOUtil.readInt(in);
    int columnCount=IOUtil.readInt(in);
    hint.addTableColumnHint(new TableColumnHint(tableId,start,columnCount));
  }
  return hint;
}","public IPageHint readFixedLayoutPageHint(DataInputStream in) throws IOException {
  long pageNumber=IOUtil.readLong(in);
  String masterPage=IOUtil.readString(in);
  PageHint hint=new PageHint(pageNumber,masterPage);
  hint.setOffset(pageIndexReader.getPageOffset(masterPage));
  int sectionCount=IOUtil.readInt(in);
  for (int i=0; i < sectionCount; i++) {
    PageSection section=null;
    int sectionType=IOUtil.readInt(in);
    if (sectionType == PageSection.TYPE_FIXED_LAYOUT_PAGE_SECTION) {
      section=new SizeBasedPageSection();
    }
 else {
      section=new PageSection();
    }
    section.read(in);
    hint.addSection(section);
  }
  int hintSize=IOUtil.readInt(in);
  for (int i=0; i < hintSize; i++) {
    UnresolvedRowHint rowHint=new UnresolvedRowHint();
    rowHint.readObject(new DataInputStream(in));
    hint.addUnresolvedRowHint(rowHint);
  }
  int columnHintSize=IOUtil.readInt(in);
  for (int i=0; i < columnHintSize; i++) {
    String tableId=IOUtil.readString(in);
    int start=IOUtil.readInt(in);
    int columnCount=IOUtil.readInt(in);
    hint.addTableColumnHint(new TableColumnHint(tableId,start,columnCount));
  }
  Collection<PageVariable> variables=hint.getPageVariables();
  readPageVariables(in,variables);
  return hint;
}",0.954264524103832
69547,"protected void writePageHint(DataOutputStream out,IPageHint hint) throws IOException {
  IOUtil.writeLong(out,hint.getPageNumber());
  IOUtil.writeString(out,hint.getMasterPage());
  int sectionCount=hint.getSectionCount();
  IOUtil.writeInt(out,sectionCount);
  for (int i=0; i < sectionCount; i++) {
    PageSection section=hint.getSection(i);
    section.write(out);
  }
  int hintSize=hint.getUnresolvedRowCount();
  IOUtil.writeInt(out,hintSize);
  ;
  for (int i=0; i < hintSize; i++) {
    UnresolvedRowHint rowHint=hint.getUnresolvedRowHint(i);
    rowHint.writeObject(out);
  }
  int columnHintSize=hint.getTableColumnHintCount();
  IOUtil.writeInt(out,columnHintSize);
  for (int i=0; i < columnHintSize; i++) {
    TableColumnHint columnHint=hint.getTableColumnHint(i);
    IOUtil.writeString(out,columnHint.getTableId());
    IOUtil.writeInt(out,columnHint.getStart());
    IOUtil.writeInt(out,columnHint.getColumnCount());
  }
}","protected void writePageHint(DataOutputStream out,IPageHint hint) throws IOException {
  IOUtil.writeLong(out,hint.getPageNumber());
  IOUtil.writeString(out,hint.getMasterPage());
  int sectionCount=hint.getSectionCount();
  IOUtil.writeInt(out,sectionCount);
  for (int i=0; i < sectionCount; i++) {
    PageSection section=hint.getSection(i);
    section.write(out);
  }
  int hintSize=hint.getUnresolvedRowCount();
  IOUtil.writeInt(out,hintSize);
  ;
  for (int i=0; i < hintSize; i++) {
    UnresolvedRowHint rowHint=hint.getUnresolvedRowHint(i);
    rowHint.writeObject(out);
  }
  int columnHintSize=hint.getTableColumnHintCount();
  IOUtil.writeInt(out,columnHintSize);
  for (int i=0; i < columnHintSize; i++) {
    TableColumnHint columnHint=hint.getTableColumnHint(i);
    IOUtil.writeString(out,columnHint.getTableId());
    IOUtil.writeInt(out,columnHint.getStart());
    IOUtil.writeInt(out,columnHint.getColumnCount());
  }
  Collection<PageVariable> variables=hint.getPageVariables();
  writePageVariables(out,variables);
}",0.95002523977789
69548,"public abstract void buildCellStyle(ICellContent cell,StringBuffer styleBuffer,boolean isHead);","public abstract void buildCellStyle(ICellContent cell,StringBuffer styleBuffer,boolean isHead,boolean fixedCellHeight);",0.8878504672897196
69549,"public HTMLEmitter(HTMLReportEmitter reportEmitter,HTMLWriter writer,String layoutPreference,boolean enableInlineStyle,int browserVersion){
  this.reportEmitter=reportEmitter;
  this.writer=writer;
  this.layoutPreference=layoutPreference;
  this.enableInlineStyle=enableInlineStyle;
  this.browserVersion=browserVersion;
}","public HTMLEmitter(HTMLReportEmitter reportEmitter,HTMLWriter writer,boolean fixedReport,boolean enableInlineStyle,int browserVersion){
  this.reportEmitter=reportEmitter;
  this.writer=writer;
  this.fixedReport=fixedReport;
  this.enableInlineStyle=enableInlineStyle;
  this.browserVersion=browserVersion;
}",0.7215189873417721
69550,public abstract void handleCellAlign(ICellContent cell);,"/** 
 * Handles the text align property of the element content.
 */
public void handleCellAlign(ICellContent cell){
  IStyle style=cell.getStyle();
  CSSValue hAlign=style.getProperty(IStyle.STYLE_TEXT_ALIGN);
  if (null != hAlign) {
    writer.attribute(HTMLTags.ATTR_ALIGN,hAlign.getCssText());
  }
}",0.0558659217877094
69551,"public HTMLPerformanceOptimize(HTMLReportEmitter reportEmitter,HTMLWriter writer,String layoutPreference,boolean enableInlineStyle,int browserVersion){
  super(reportEmitter,writer,layoutPreference,enableInlineStyle,browserVersion);
}","public HTMLPerformanceOptimize(HTMLReportEmitter reportEmitter,HTMLWriter writer,boolean fixedReport,boolean enableInlineStyle,int browserVersion){
  super(reportEmitter,writer,fixedReport,enableInlineStyle,browserVersion);
}",0.8583877995642701
69552,"/** 
 * Build the style of cell content.
 */
public void buildCellStyle(ICellContent cell,StringBuffer styleBuffer,boolean isHead){
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    styleBuffer.append(""String_Node_Str"");
  }
  IStyle style=cell.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(cell);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}","/** 
 * Build the style of cell content.
 */
public void buildCellStyle(ICellContent cell,StringBuffer styleBuffer,boolean isHead,boolean fixedCellHeight){
  if (fixedReport) {
    styleBuffer.append(""String_Node_Str"");
  }
  IStyle style=cell.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(cell);
  if (style == null) {
    if (fixedCellHeight) {
      styleBuffer.append(""String_Node_Str"");
    }
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildMargins(styleBuffer,style);
  if (fixedCellHeight) {
    styleBuffer.append(""String_Node_Str"");
  }
 else {
    AttributeBuilder.buildPaddings(styleBuffer,style);
  }
  AttributeBuilder.buildBorders(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.7949393779652082
69553,"/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  boolean widthOutputFlag=false;
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
    widthOutputFlag=true;
  }
 else {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      boolean absoluteWidth=true;
      for (int i=0; i < table.getColumnCount(); i++) {
        IColumn column=table.getColumn(i);
        DimensionType columnWidth=column.getWidth();
        if (columnWidth == null) {
          absoluteWidth=false;
          break;
        }
 else {
          if (""String_Node_Str"".endsWith(columnWidth.getUnits())) {
            absoluteWidth=false;
            break;
          }
        }
      }
      if (!absoluteWidth) {
        styleBuffer.append(""String_Node_Str"");
        widthOutputFlag=true;
      }
    }
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      if (!widthOutputFlag) {
        styleBuffer.append(""String_Node_Str"");
      }
      styleBuffer.append(""String_Node_Str"");
    }
  }
  String value=style.getTextAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}","/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  boolean widthOutputFlag=false;
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
    widthOutputFlag=true;
  }
 else {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      boolean absoluteWidth=true;
      for (int i=0; i < table.getColumnCount(); i++) {
        IColumn column=table.getColumn(i);
        DimensionType columnWidth=column.getWidth();
        if (columnWidth == null) {
          absoluteWidth=false;
          break;
        }
 else {
          if (""String_Node_Str"".endsWith(columnWidth.getUnits())) {
            absoluteWidth=false;
            break;
          }
        }
      }
      if (!absoluteWidth) {
        styleBuffer.append(""String_Node_Str"");
        widthOutputFlag=true;
      }
    }
  }
  if (fixedReport) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      if (!widthOutputFlag) {
        styleBuffer.append(""String_Node_Str"");
      }
      styleBuffer.append(""String_Node_Str"");
    }
  }
  String value=style.getTextAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.9839715048975958
69554,"void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  updateRtLFlag();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    LayoutPageHandler layoutHandler=new LayoutPageHandler();
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      LayoutEngine pdfLayoutEmitter=new LayoutEngine(executor,emitter,renderOptions,executionContext.getLocale(),0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (ExtensionManager.PAGE_BREAK_PAGINATION.equalsIgnoreCase(pagination)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}","void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  updateRtLFlag();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    LayoutPageHandler layoutHandler=new LayoutPageHandler();
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      LayoutEngine pdfLayoutEmitter=new LayoutEngine(executor,emitter,renderOptions,executionContext.getLocale(),0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format) || FORMAT_XHTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}",0.9834824501032348
69555,"public IPage newPage(int width,int height,Color backgroundColor){
  currentPage=new PDFPage(width,height,doc,writer,this);
  currentPage.drawBackgroundColor(backgroundColor,0,0,width,height);
  return currentPage;
}","public IPage newPage(int width,int height,Color backgroundColor){
  int w=Math.min(width,MAX_PAGE_WIDTH);
  int h=Math.min(height,MAX_PAGE_HEIGHT);
  currentPage=new PDFPage(w,h,doc,writer,this);
  currentPage.drawBackgroundColor(backgroundColor,0,0,w,h);
  return currentPage;
}",0.7813765182186235
69556,"String removeSpace(String v){
  return v;
}","String removeSpace(String v){
  StringBuilder sb=new StringBuilder(v.length());
  try {
    BufferedReader reader=new BufferedReader(new StringReader(v));
    String line=reader.readLine();
    while (line != null) {
      line=line.trim();
      if (!line.startsWith(""String_Node_Str"")) {
        sb.append(line);
        sb.append('\n');
      }
      line=reader.readLine();
    }
  }
 catch (  IOException ex) {
  }
  return sb.toString();
}",0.1393442622950819
69557,"public void write(OutputStream out,Report report) throws Exception {
  Document document=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  new ReportDumpVisitor(document).createDocument(report);
  Transformer tr=TransformerFactory.newInstance().newTransformer();
  tr.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
  tr.setOutputProperty(OutputKeys.METHOD,""String_Node_Str"");
  tr.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  tr.transform(new DOMSource(document),new StreamResult(out));
}","public void write(OutputStream out,Report report) throws Exception {
  Document document=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  new ReportDumpVisitor(document).createDocument(report);
  Transformer tr=TransformerFactory.newInstance().newTransformer();
  tr.setOutputProperty(OutputKeys.STANDALONE,""String_Node_Str"");
  tr.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
  tr.setOutputProperty(OutputKeys.METHOD,""String_Node_Str"");
  tr.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  tr.transform(new DOMSource(document),new StreamResult(out));
}",0.9427312775330396
69558,"/** 
 * @param name
 * @param resultSets
 * @param writer
 * @throws IOException
 */
public static void save(String name,IAggregationResultSet[] resultSets,IDocArchiveWriter writer) throws IOException {
  RAOutputStream outputStream=writer.createRandomAccessStream(name);
  DataOutputStream dataOutputStream=new DataOutputStream(outputStream);
  if (resultSets == null) {
    dataOutputStream.writeInt(-1);
    return;
  }
  dataOutputStream.writeInt(resultSets.length);
  dataOutputStream.close();
  for (int i=0; i < resultSets.length; i++) {
    outputStream=writer.createRandomAccessStream(name + PREFIX_RESULTSET + i);
    dataOutputStream=new DataOutputStream(outputStream);
    saveOneResultSet(dataOutputStream,resultSets[i]);
    dataOutputStream.close();
  }
}","/** 
 * @param name
 * @param resultSets
 * @param writer
 * @throws IOException
 */
public static void save(String name,IAggregationResultSet[] resultSets,IDocArchiveWriter writer) throws IOException {
  if (name == null)   return;
  RAOutputStream outputStream=writer.createRandomAccessStream(name);
  DataOutputStream dataOutputStream=new DataOutputStream(outputStream);
  if (resultSets == null) {
    dataOutputStream.writeInt(-1);
    return;
  }
  dataOutputStream.writeInt(resultSets.length);
  dataOutputStream.close();
  for (int i=0; i < resultSets.length; i++) {
    outputStream=writer.createRandomAccessStream(name + PREFIX_RESULTSET + i);
    dataOutputStream=new DataOutputStream(outputStream);
    saveOneResultSet(dataOutputStream,resultSets[i]);
    dataOutputStream.close();
  }
}",0.9808917197452228
69559,"/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign) throws IOException, BirtException {
}","/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getMeasureNameManger().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  IDocumentManager documentManager=getDocumentManager(executor);
  ICube cube=loadCube(documentManager,executor);
  CubeQueryValidator.validateCubeQueryDefinition(executor.getCubeQueryDefinition(),view,cube,view.getMeasureNameManger().getCalculatedMembersFromQuery());
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper());
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,aggrDefns,cubeQueryExecutorHelper,stopSign,true);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,aggrDefns,cubeQueryExecutorHelper,stopSign,false);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion());
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(aggrDefns,stopSign);
    CubeOperationsExecutor coe=new CubeOperationsExecutor(view.getCubeQueryDefinition(),view.getPreparedCubeOperations(),view.getCubeQueryExecutor().getScope(),view.getCubeQueryExecutor().getSession().getEngineContext().getScriptContext());
    rs=coe.execute(rs,stopSign);
    break;
  }
}
default :
{
rs=cubeQueryExecutorHelper.execute(aggrDefns,stopSign);
CubeOperationsExecutor coe=new CubeOperationsExecutor(view.getCubeQueryDefinition(),view.getPreparedCubeOperations(),view.getCubeQueryExecutor().getScope(),view.getCubeQueryExecutor().getSession().getEngineContext().getScriptContext());
rs=coe.execute(rs,stopSign);
String id=executor.getCubeQueryDefinition().getQueryResultsID();
if (id == null) {
  id=executor.getSession().getQueryResultIDUtil().nextID();
}
AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
executor.setQueryResultsId(id);
}
}
cube.close();
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}",0.1211111111111111
69560,"private void traverse(IArea area){
  if (area instanceof ContainerArea) {
    if (area instanceof TableArea) {
      tableIds.add(((TableArea)area).getContent().getInstanceID().toUniqueString());
    }
    ContainerArea container=(ContainerArea)area;
    if (container.content != null) {
      start(container);
    }
    if (!(container.content instanceof ForeignContent)) {
      for (Iterator<IArea> i=container.getChildren(); i.hasNext(); ) {
        IArea child=i.next();
        traverse(child);
      }
    }
  }
}","private void traverse(IArea area){
  if (area instanceof ContainerArea) {
    if (area instanceof TableArea) {
      tableIds.add(((TableArea)area).getContent().getInstanceID().toUniqueString());
    }
    ContainerArea container=(ContainerArea)area;
    if (container.content != null) {
      start(container);
    }
    if (!(container.content instanceof ForeignContent)) {
      for (Iterator<IArea> i=container.getChildren(); i.hasNext(); ) {
        IArea child=i.next();
        traverse(child);
      }
    }
  }
  String bookmark=area.getBookmark();
  if (bookmark != null) {
    context.addBookmarkMap(context.getPageNumber(),bookmark);
  }
}",0.8890784982935154
69561,"public FixedLayoutPageHintGenerator(LayoutContext context){
  htmlLayoutContext=context.getHtmlLayoutContext();
}","public FixedLayoutPageHintGenerator(LayoutContext context){
  this.context=context;
  htmlLayoutContext=context.getHtmlLayoutContext();
}",0.904
69562,"public void onPage(long pageNumber,Object context){
  if (context instanceof LayoutContext) {
    LayoutContext pdfContext=(LayoutContext)context;
    document.setPageCount(pageNumber);
    boolean reportFinished=pdfContext.isFinished();
    if (reportFinished) {
      writePageVariables();
      writeTotalPage(pageNumber);
      close();
      return;
    }
    boolean checkpoint=false;
    if (executionContext.isProgressiveViewingEnable()) {
      if (pageNumber == 1 || pageNumber == 10 || pageNumber == 50 || pageNumber % 100 == 0) {
        checkpoint=true;
      }
    }
    writePageHint(pdfContext);
    if (checkpoint) {
      try {
        IDocArchiveWriter archive=document.getArchive();
        writeTotalPage(pageNumber);
        document.savePersistentObjects(ReportDocumentBuilder.this.executionContext.getGlobalBeans());
        document.saveCoreStreams();
        archive.flush();
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,""String_Node_Str"",e);
      }
    }
    if (pageHandler != null) {
{
        IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,pageNumber,false);
        pageHandler.onPage((int)pageNumber,checkpoint,docInfo);
      }
    }
  }
  executionContext.getProgressMonitor().onProgress(IProgressMonitor.END_PAGE,(int)pageNumber);
}","public void onPage(long pageNumber,Object context){
  if (context instanceof LayoutContext) {
    LayoutContext pdfContext=(LayoutContext)context;
    document.setPageCount(pageNumber);
    boolean reportFinished=pdfContext.isFinished();
    if (reportFinished) {
      addBookmarkMap(pdfContext);
      writePageVariables();
      writeTotalPage(pageNumber);
      close();
      return;
    }
    boolean checkpoint=false;
    if (executionContext.isProgressiveViewingEnable()) {
      if (pageNumber == 1 || pageNumber == 10 || pageNumber == 50 || pageNumber % 100 == 0) {
        checkpoint=true;
      }
    }
    writePageHint(pdfContext);
    if (checkpoint) {
      try {
        IDocArchiveWriter archive=document.getArchive();
        writeTotalPage(pageNumber);
        document.savePersistentObjects(ReportDocumentBuilder.this.executionContext.getGlobalBeans());
        document.saveCoreStreams();
        archive.flush();
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,""String_Node_Str"",e);
      }
    }
    if (pageHandler != null) {
{
        IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,pageNumber,false);
        pageHandler.onPage((int)pageNumber,checkpoint,docInfo);
      }
    }
  }
  executionContext.getProgressMonitor().onProgress(IProgressMonitor.END_PAGE,(int)pageNumber);
}",0.9872276483846733
69563,"public void startForeign(IForeignContent foreign) throws BirtException {
  if (IForeignContent.HTML_TYPE.equals(foreign.getRawType())) {
    _startContainer(foreign);
    HTML2Content.html2Content(foreign);
    if (context.isFixedLayout()) {
      IStyle style=foreign.getStyle();
      style.setProperty(IStyle.STYLE_PAGE_BREAK_INSIDE,IStyle.AVOID_VALUE);
    }
    java.util.Collection children=foreign.getChildren();
    if (children != null && !children.isEmpty()) {
      Iterator iter=children.iterator();
      IContent child=(IContent)iter.next();
      visitContent(child,this);
    }
    foreign.getChildren().clear();
    _endContainer(foreign);
  }
 else {
    startContent(foreign);
  }
}","public void startForeign(IForeignContent foreign) throws BirtException {
  _startContainer(foreign);
  if (IForeignContent.HTML_TYPE.equals(foreign.getRawType())) {
    HTML2Content.html2Content(foreign);
    if (context.isFixedLayout()) {
      IStyle style=foreign.getStyle();
      style.setProperty(IStyle.STYLE_PAGE_BREAK_INSIDE,IStyle.AVOID_VALUE);
    }
    java.util.Collection children=foreign.getChildren();
    if (children != null && !children.isEmpty()) {
      Iterator iter=children.iterator();
      IContent child=(IContent)iter.next();
      visitContent(child,this);
    }
    foreign.getChildren().clear();
  }
  _endContainer(foreign);
}",0.9242089771891095
69564,"protected Data addDataContent(IDataContent data){
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  Data excelData=null;
  Object generateBy=data.getGenerateBy();
  IStyle style=data.getComputedStyle();
  DataFormatValue dataformat=style.getDataFormat();
  DataItemDesign design=(DataItemDesign)generateBy;
  MapDesign map=design.getMap();
  if (map != null && map.getRuleCount() > 0 && data.getLabelText() != null) {
    excelData=engine.addData(data.getLabelText().trim(),style,url,bookmark);
  }
 else {
    String locale=null;
    int type=ExcelUtil.getType(data.getValue());
    if (type == SheetData.STRING) {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      excelData=engine.addData(data.getText(),style,url,bookmark,locale);
    }
 else     if (type == Data.NUMBER) {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      excelData=engine.addData(data.getValue(),style,url,bookmark,locale);
    }
 else {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      excelData=engine.addDateTime(data,style,url,bookmark,locale);
    }
  }
  return excelData;
}","protected Data addDataContent(IDataContent data){
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  Data excelData=null;
  Object generateBy=data.getGenerateBy();
  IStyle style=data.getComputedStyle();
  DataFormatValue dataformat=style.getDataFormat();
  MapDesign map=null;
  if (generateBy instanceof DataItemDesign) {
    DataItemDesign design=(DataItemDesign)generateBy;
    map=design.getMap();
  }
  if (map != null && map.getRuleCount() > 0 && data.getLabelText() != null) {
    excelData=engine.addData(data.getLabelText().trim(),style,url,bookmark);
  }
 else {
    String locale=null;
    int type=ExcelUtil.getType(data.getValue());
    if (type == SheetData.STRING) {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      excelData=engine.addData(data.getText(),style,url,bookmark,locale);
    }
 else     if (type == Data.NUMBER) {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      excelData=engine.addData(data.getValue(),style,url,bookmark,locale);
    }
 else {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      excelData=engine.addDateTime(data,style,url,bookmark,locale);
    }
  }
  return excelData;
}",0.944533762057878
69565,"public IContent execute(){
  context.setPageNumber(pageNumber);
  tocBuilder=context.getTOCBuilder();
  context.setTOCBuilder(null);
  context.setExecutingMasterPage(true);
  IPageContent pageContent=report.createPageContent();
  pageContent.setPageNumber(pageNumber);
  content=pageContent;
  content.setGenerateBy(masterPage);
  instanceId=new InstanceID(null,pageNumber,masterPage.getID(),null);
  content.setInstanceID(instanceId);
  return content;
}","public IContent execute(){
  context.setPageNumber(pageNumber);
  tocBuilder=context.getTOCBuilder();
  context.setTOCBuilder(null);
  rs=context.getResultSets();
  context.setExecutingMasterPage(true);
  IPageContent pageContent=report.createPageContent();
  pageContent.setPageNumber(pageNumber);
  content=pageContent;
  content.setGenerateBy(masterPage);
  instanceId=new InstanceID(null,pageNumber,masterPage.getID(),null);
  content.setInstanceID(instanceId);
  return content;
}",0.9680851063829788
69566,"public void close() throws BirtException {
  context.setExecutingMasterPage(false);
  context.setTOCBuilder(tocBuilder);
  super.close();
}","public void close() throws BirtException {
  context.setExecutingMasterPage(false);
  context.setTOCBuilder(tocBuilder);
  context.setResultSets(rs);
  super.close();
}",0.9055374592833876
69567,"public void close(){
  context.setExecutingMasterPage(false);
  pageNumber=0;
  if (pageOffset != -1) {
    manager.getPageReader().unloadContent(pageOffset);
  }
  nextBand=0;
  super.close();
}","public void close(){
  context.setExecutingMasterPage(false);
  context.setResultSets(rs);
  pageNumber=0;
  if (pageOffset != -1) {
    manager.getPageReader().unloadContent(pageOffset);
  }
  nextBand=0;
  super.close();
}",0.9307875894988068
69568,"public IContent execute(){
  if (executed) {
    return content;
  }
  context.setExecutingMasterPage(true);
  context.setPageNumber(pageNumber);
  executed=true;
  try {
    long pageNo=pageNumber;
    PageHintReader hintReader=manager.getPageHintReader();
    long totalPage=hintReader.getTotalPage();
    if (pageNumber > totalPage) {
      pageNo=totalPage;
    }
    IPageHint pageHint=hintReader.getPageHint(pageNo);
    Collection<PageVariable> vars=pageHint.getPageVariables();
    if (vars != null) {
      context.addPageVariables(vars);
    }
    pageOffset=hintReader.getPageOffset(pageNo,masterPage.getName());
    CachedReportContentReaderV3 pageReader=manager.getPageReader();
    content=pageReader.loadContent(pageOffset);
    InstanceID iid=content.getInstanceID();
    long id=iid.getComponentID();
    masterPage=(SimpleMasterPageDesign)context.getReport().getReportItemByID(id);
    content.setGenerateBy(masterPage);
    IPageContent pageContent=(IPageContent)content;
    pageContent.setPageNumber(pageNumber);
    return content;
  }
 catch (  IOException ex) {
    context.addException(this.getDesign(),new EngineException(ex.getLocalizedMessage(),ex));
  }
  return null;
}","public IContent execute(){
  if (executed) {
    return content;
  }
  context.setExecutingMasterPage(true);
  rs=context.getResultSets();
  context.setPageNumber(pageNumber);
  executed=true;
  try {
    long pageNo=pageNumber;
    PageHintReader hintReader=manager.getPageHintReader();
    long totalPage=hintReader.getTotalPage();
    if (pageNumber > totalPage) {
      pageNo=totalPage;
    }
    IPageHint pageHint=hintReader.getPageHint(pageNo);
    Collection<PageVariable> vars=pageHint.getPageVariables();
    if (vars != null) {
      context.addPageVariables(vars);
    }
    pageOffset=hintReader.getPageOffset(pageNo,masterPage.getName());
    CachedReportContentReaderV3 pageReader=manager.getPageReader();
    content=pageReader.loadContent(pageOffset);
    InstanceID iid=content.getInstanceID();
    long id=iid.getComponentID();
    masterPage=(SimpleMasterPageDesign)context.getReport().getReportItemByID(id);
    content.setGenerateBy(masterPage);
    IPageContent pageContent=(IPageContent)content;
    pageContent.setPageNumber(pageNumber);
    return content;
  }
 catch (  IOException ex) {
    context.addException(this.getDesign(),new EngineException(ex.getLocalizedMessage(),ex));
  }
  return null;
}",0.987644151565074
69569,"private void checkTask(String designFile,String[][] bookmarksWithMetadata,String[][] bookmarksWithoutMetadata,boolean isRenderTask) throws EngineException, IOException {
  HTMLRenderOption options=new HTMLRenderOption();
  RenderResult result=getRenderResult(designFile,isRenderTask,options);
  checkOutput(result.content,result.instanceIDs,bookmarksWithMetadata,bookmarksWithoutMetadata);
}","private void checkTask(String designFile,String[][] bookmarksWithMetadata,String[][] bookmarksWithoutMetadata,boolean isRenderTask) throws EngineException, IOException {
  HTMLRenderOption options=new HTMLRenderOption();
  options.setSupportedImageFormats(""String_Node_Str"");
  RenderResult result=getRenderResult(designFile,isRenderTask,options);
  checkOutput(result.content,result.instanceIDs,bookmarksWithMetadata,bookmarksWithoutMetadata);
}",0.9342891278375148
69570,"protected void renderReportlet(String docName,String bookmark){
  report_document=outputPath + docName + ""String_Node_Str"";
  report_design=inputPath + docName + ""String_Node_Str"";
  copyResource_INPUT(docName + ""String_Node_Str"",docName + ""String_Node_Str"");
  IRenderTask task;
  boolean toc=false;
  String s_toc=null;
  if (bookmark.substring(0,3).equals(""String_Node_Str"")) {
    toc=true;
  }
  createDir(docName);
  try {
    createReportDocument(report_design,report_document);
    reportDoc=engine.openReportDocument(report_document);
    task=engine.createRenderTask(reportDoc);
    IRenderOption htmlRenderOptions=new HTMLRenderOption();
    HTMLRenderContext renderContext=new HTMLRenderContext();
    renderContext.setImageDirectory(""String_Node_Str"");
    HashMap appContext=new HashMap();
    appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,renderContext);
    task.setAppContext(appContext);
    outputFileName=outputPath + docName + ""String_Node_Str""+ bookmark+ ""String_Node_Str"";
    htmlRenderOptions.setOutputFileName(outputFileName);
    htmlRenderOptions.setOutputFormat(""String_Node_Str"");
    if (toc) {
      s_toc=((TOCNode)(reportDoc.findTOCByName(bookmark).get(0))).getBookmark();
    }
 else {
      s_toc=bookmark;
    }
    task.setReportlet(s_toc);
    task.setRenderOption(htmlRenderOptions);
    task.render();
    assertEquals(""String_Node_Str"" + docName + ""String_Node_Str"",0,task.getErrors().size());
    assertTrue(""String_Node_Str"" + docName + ""String_Node_Str"",new File(outputFileName).exists());
    outputFileName=outputPath + docName + ""String_Node_Str""+ bookmark+ ""String_Node_Str"";
    htmlRenderOptions.setOutputFileName(outputFileName);
    htmlRenderOptions.setOutputFormat(""String_Node_Str"");
    task.setRenderOption(htmlRenderOptions);
    task.setReportlet(s_toc);
    task.render();
    assertEquals(""String_Node_Str"" + docName + ""String_Node_Str"",0,task.getErrors().size());
    task.close();
    assertTrue(""String_Node_Str"" + docName + ""String_Node_Str"",new File(outputFileName).exists());
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue(""String_Node_Str"" + bookmark + ""String_Node_Str""+ docName+ ""String_Node_Str""+ e.getLocalizedMessage(),false);
  }
}","protected void renderReportlet(String docName,String bookmark){
  report_document=outputPath + docName + ""String_Node_Str"";
  report_design=inputPath + docName + ""String_Node_Str"";
  copyResource_INPUT(docName + ""String_Node_Str"",docName + ""String_Node_Str"");
  IRenderTask task;
  boolean toc=false;
  String s_toc=null;
  if (bookmark.substring(0,3).equals(""String_Node_Str"")) {
    toc=true;
  }
  createDir(docName);
  try {
    createReportDocument(report_design,report_document);
    reportDoc=engine.openReportDocument(report_document);
    task=engine.createRenderTask(reportDoc);
    IRenderOption htmlRenderOptions=new HTMLRenderOption();
    HTMLRenderContext renderContext=new HTMLRenderContext();
    renderContext.setImageDirectory(""String_Node_Str"");
    HashMap appContext=new HashMap();
    appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,renderContext);
    task.setAppContext(appContext);
    outputFileName=outputPath + docName + ""String_Node_Str""+ bookmark+ ""String_Node_Str"";
    htmlRenderOptions.setOutputFileName(outputFileName);
    htmlRenderOptions.setOutputFormat(""String_Node_Str"");
    htmlRenderOptions.setEmitterID(null);
    if (toc) {
      s_toc=((TOCNode)(reportDoc.findTOCByName(bookmark).get(0))).getBookmark();
    }
 else {
      s_toc=bookmark;
    }
    task.setReportlet(s_toc);
    task.setRenderOption(htmlRenderOptions);
    task.render();
    assertEquals(""String_Node_Str"" + docName + ""String_Node_Str"",0,task.getErrors().size());
    assertTrue(""String_Node_Str"" + docName + ""String_Node_Str"",new File(outputFileName).exists());
    outputFileName=outputPath + docName + ""String_Node_Str""+ bookmark+ ""String_Node_Str"";
    htmlRenderOptions.setOutputFileName(outputFileName);
    htmlRenderOptions.setOutputFormat(""String_Node_Str"");
    htmlRenderOptions.setEmitterID(null);
    task.setRenderOption(htmlRenderOptions);
    task.setReportlet(s_toc);
    task.render();
    assertEquals(""String_Node_Str"" + docName + ""String_Node_Str"",0,task.getErrors().size());
    task.close();
    assertTrue(""String_Node_Str"" + docName + ""String_Node_Str"",new File(outputFileName).exists());
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue(""String_Node_Str"" + bookmark + ""String_Node_Str""+ docName+ ""String_Node_Str""+ e.getLocalizedMessage(),false);
  }
}",0.9816272965879264
69571,"protected void renderReportBookmark(String fileName,String bookmark){
  report_design=inputPath + fileName + ""String_Node_Str"";
  report_document=outputPath + fileName + ""String_Node_Str"";
  copyResource_INPUT(fileName + ""String_Node_Str"",fileName + ""String_Node_Str"");
  IRenderTask task;
  createDir(fileName);
  try {
    createReportDocument(report_design,report_document);
    reportDoc=engine.openReportDocument(report_document);
    IRenderOption options=new HTMLRenderOption();
    HTMLRenderContext renderContext=new HTMLRenderContext();
    renderContext.setImageDirectory(""String_Node_Str"");
    HashMap appContext=new HashMap();
    appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,renderContext);
    options.setOutputFormat(""String_Node_Str"");
    options.getOutputSetting().put(HTMLRenderOption.URL_ENCODING,""String_Node_Str"");
    outputFileName=outputPath + fileName + ""String_Node_Str""+ bookmark+ ""String_Node_Str"";
    removeFile(outputFileName);
    options.setOutputFileName(outputFileName);
    task=engine.createRenderTask(reportDoc);
    task.setLocale(Locale.ENGLISH);
    task.setAppContext(appContext);
    task.setBookmark(bookmark);
    task.setRenderOption(options);
    task.render();
    assertEquals(""String_Node_Str"" + fileName,0,task.getErrors().size());
    task.close();
    File htmlFile=new File(outputFileName);
    assertTrue(""String_Node_Str"" + bookmark + ""String_Node_Str"",htmlFile.exists());
    assertTrue(""String_Node_Str"" + bookmark + ""String_Node_Str"",htmlFile.length() != 0);
    outputFileName=outputPath + fileName + ""String_Node_Str""+ bookmark+ ""String_Node_Str"";
    options.setOutputFileName(outputFileName);
    options.setOutputFormat(""String_Node_Str"");
    task=engine.createRenderTask(reportDoc);
    task.setLocale(Locale.ENGLISH);
    task.setAppContext(appContext);
    task.setBookmark(bookmark);
    task.setRenderOption(options);
    task.render();
    assertEquals(""String_Node_Str"" + fileName,0,task.getErrors().size());
    task.close();
    File pdfFile=new File(outputFileName);
    assertTrue(""String_Node_Str"" + bookmark + ""String_Node_Str"",pdfFile.exists());
    assertTrue(""String_Node_Str"" + bookmark + ""String_Node_Str"",pdfFile.length() != 0);
    removeFile(outputPath + fileName);
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue(""String_Node_Str"" + fileName + ""String_Node_Str""+ e.getLocalizedMessage(),false);
  }
}","protected void renderReportBookmark(String fileName,String bookmark){
  report_design=inputPath + fileName + ""String_Node_Str"";
  report_document=outputPath + fileName + ""String_Node_Str"";
  copyResource_INPUT(fileName + ""String_Node_Str"",fileName + ""String_Node_Str"");
  IRenderTask task;
  createDir(fileName);
  try {
    createReportDocument(report_design,report_document);
    reportDoc=engine.openReportDocument(report_document);
    IRenderOption options=new HTMLRenderOption();
    HTMLRenderContext renderContext=new HTMLRenderContext();
    renderContext.setImageDirectory(""String_Node_Str"");
    HashMap appContext=new HashMap();
    appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,renderContext);
    options.setOutputFormat(""String_Node_Str"");
    options.setEmitterID(null);
    options.getOutputSetting().put(HTMLRenderOption.URL_ENCODING,""String_Node_Str"");
    outputFileName=outputPath + fileName + ""String_Node_Str""+ bookmark+ ""String_Node_Str"";
    removeFile(outputFileName);
    options.setOutputFileName(outputFileName);
    task=engine.createRenderTask(reportDoc);
    task.setLocale(Locale.ENGLISH);
    task.setAppContext(appContext);
    task.setBookmark(bookmark);
    task.setRenderOption(options);
    task.render();
    assertEquals(""String_Node_Str"" + fileName,0,task.getErrors().size());
    task.close();
    File htmlFile=new File(outputFileName);
    assertTrue(""String_Node_Str"" + bookmark + ""String_Node_Str"",htmlFile.exists());
    assertTrue(""String_Node_Str"" + bookmark + ""String_Node_Str"",htmlFile.length() != 0);
    outputFileName=outputPath + fileName + ""String_Node_Str""+ bookmark+ ""String_Node_Str"";
    options.setOutputFileName(outputFileName);
    options.setOutputFormat(""String_Node_Str"");
    options.setEmitterID(null);
    task=engine.createRenderTask(reportDoc);
    task.setLocale(Locale.ENGLISH);
    task.setAppContext(appContext);
    task.setBookmark(bookmark);
    task.setRenderOption(options);
    task.render();
    assertEquals(""String_Node_Str"" + fileName,0,task.getErrors().size());
    task.close();
    File pdfFile=new File(outputFileName);
    assertTrue(""String_Node_Str"" + bookmark + ""String_Node_Str"",pdfFile.exists());
    assertTrue(""String_Node_Str"" + bookmark + ""String_Node_Str"",pdfFile.length() != 0);
    removeFile(outputPath + fileName);
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue(""String_Node_Str"" + fileName + ""String_Node_Str""+ e.getLocalizedMessage(),false);
  }
}",0.9869918699186992
69572,"private void traverse(IArea area){
  if (area instanceof ContainerArea) {
    if (((ContainerArea)area).content instanceof ForeignContent) {
      return;
    }
    if (area instanceof TableArea) {
      tableIds.add(((TableArea)area).getContent().getInstanceID().toUniqueString());
    }
    ContainerArea container=(ContainerArea)area;
    if (container.content != null) {
      start(container);
    }
    for (Iterator<IArea> i=container.getChildren(); i.hasNext(); ) {
      IArea child=i.next();
      traverse(child);
    }
  }
}","private void traverse(IArea area){
  if (area instanceof ContainerArea) {
    if (area instanceof TableArea) {
      tableIds.add(((TableArea)area).getContent().getInstanceID().toUniqueString());
    }
    ContainerArea container=(ContainerArea)area;
    if (container.content != null) {
      start(container);
    }
    if (!(container.content instanceof ForeignContent)) {
      for (Iterator<IArea> i=container.getChildren(); i.hasNext(); ) {
        IArea child=i.next();
        traverse(child);
      }
    }
  }
}",0.8495742667928098
69573,"public void changeTask(Notification notification){
  if (previewPainter != null) {
    if (notification == null) {
      if (getChartModel() instanceof ChartWithAxes) {
        checkDataTypeForChartWithAxes();
      }
      return;
    }
    if (notification.getEventType() == Notification.REMOVE && notification.getNotifier() instanceof Axis) {
      ChartWizard.removeAllExceptions(""String_Node_Str"" + notification.getOldValue().hashCode());
    }
    if (notification.getNotifier() instanceof SeriesDefinition && getChartModel() instanceof ChartWithAxes) {
      checkDataTypeForChartWithAxes();
    }
    if (notification.getNotifier() instanceof Query || notification.getNotifier() instanceof Axis || notification.getNotifier() instanceof SeriesDefinition|| notification.getNotifier() instanceof SeriesGrouping) {
      doPreview();
    }
 else     if (ChartPreviewPainterBase.isLivePreviewActive()) {
      ChartAdapter.beginIgnoreNotifications();
      ChartUIUtil.syncRuntimeSeries(getChartModel());
      ChartAdapter.endIgnoreNotifications();
      doPreview();
    }
 else {
      doPreview();
    }
  }
}","public void changeTask(Notification notification){
  if (previewPainter != null) {
    if (notification == null) {
      if (getChartModel() instanceof ChartWithAxes) {
        checkDataTypeForChartWithAxes();
      }
      return;
    }
    if (notification.getEventType() == Notification.REMOVE && notification.getNotifier() instanceof Axis) {
      ChartWizard.removeAllExceptions(""String_Node_Str"" + notification.getOldValue().hashCode());
    }
    if ((notification.getNotifier() instanceof Query && ((Query)notification.getNotifier()).eContainer() instanceof Series)) {
      checkDataType((Query)notification.getNotifier(),(Series)((Query)notification.getNotifier()).eContainer());
    }
    if (notification.getNotifier() instanceof SeriesDefinition && getChartModel() instanceof ChartWithAxes) {
      checkDataTypeForChartWithAxes();
    }
    if (notification.getNotifier() instanceof Query || notification.getNotifier() instanceof Axis || notification.getNotifier() instanceof SeriesDefinition|| notification.getNotifier() instanceof SeriesGrouping) {
      doPreview();
    }
 else     if (ChartPreviewPainterBase.isLivePreviewActive()) {
      ChartAdapter.beginIgnoreNotifications();
      ChartUIUtil.syncRuntimeSeries(getChartModel());
      ChartAdapter.endIgnoreNotifications();
      doPreview();
    }
 else {
      doPreview();
    }
  }
}",0.8248587570621468
69574,"private void setQueryExpression(String expression){
  if (query != null) {
    query.setDefinition(expression);
  }
 else {
    query=QueryImpl.create(expression);
    query.eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setQuery(query);
  }
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!(context.getChartType() instanceof GanttChart) && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (context.getDataServiceProvider().getDataType(expression) == DataType.DATE_TIME_LITERAL) {
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
      }
    }
  }
}","private void setQueryExpression(String expression){
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!(context.getChartType() instanceof GanttChart) && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (context.getDataServiceProvider().getDataType(expression) == DataType.DATE_TIME_LITERAL) {
        ChartAdapter.beginIgnoreNotifications();
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
        ChartAdapter.endIgnoreNotifications();
      }
    }
  }
  if (query != null) {
    query.setDefinition(expression);
  }
 else {
    query=QueryImpl.create(expression);
    query.eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setQuery(query);
  }
}",0.7326530612244898
69575,"/** 
 * Get a List of JDBCDriverInformations loaded from the given fileList
 * @param fileList the File List
 * @param urlClassLoader
 * @return List of JDBCDriverInformation
 */
private static List getJDBCDriverInfoList(List fileList){
  List driverList=new ArrayList();
  URLClassLoader urlClassLoader=createClassLoader(fileList.toArray());
  for (int i=0; i < fileList.size(); i++) {
    String[] resourceNames=getAllResouceNames((File)fileList.get(i));
    List subDriverList=new ArrayList();
    for (int j=0; j < resourceNames.length; j++) {
      String resourceName=resourceNames[j];
      if (resourceName.endsWith(""String_Node_Str"")) {
        resourceName=modifyResourceName(resourceName);
        Class aClass=loadClass(urlClassLoader,resourceName);
        if (isImplementedDriver(aClass)) {
          JDBCDriverInformation info=JDBCDriverInformation.newInstance(aClass);
          if (info != null) {
            driverList.add(info);
            subDriverList.add(info);
          }
        }
      }
    }
    if (subDriverList.isEmpty()) {
      if (!failLoadFileList.contains(fileList.get(i)))       failLoadFileList.add(fileList.get(i));
    }
 else {
      if (failLoadFileList.contains(fileList.get(i)))       failLoadFileList.remove(fileList.get(i));
    }
    file2Drivers.put(((File)fileList.get(i)).getName(),subDriverList);
  }
  urlClassLoader.close();
  return driverList;
}","/** 
 * Get a List of JDBCDriverInformations loaded from the given fileList
 * @param fileList the File List
 * @param urlClassLoader
 * @return List of JDBCDriverInformation
 */
private static List getJDBCDriverInfoList(List fileList){
  List driverList=new ArrayList();
  URLClassLoader urlClassLoader=createClassLoader(fileList.toArray());
  for (int i=0; i < fileList.size(); i++) {
    String[] resourceNames=getAllResouceNames((File)fileList.get(i));
    List subDriverList=new ArrayList();
    for (int j=0; j < resourceNames.length; j++) {
      String resourceName=resourceNames[j];
      if (resourceName.endsWith(""String_Node_Str"")) {
        resourceName=modifyResourceName(resourceName);
        Class aClass=loadClass(urlClassLoader,resourceName);
        if (isImplementedDriver(aClass)) {
          JDBCDriverInformation info=JDBCDriverInformation.newInstance(aClass);
          if (info != null) {
            driverList.add(info);
            subDriverList.add(info);
          }
        }
      }
    }
    if (subDriverList.isEmpty()) {
      if (!failLoadFileList.contains(fileList.get(i)))       failLoadFileList.add(fileList.get(i));
    }
 else {
      if (failLoadFileList.contains(fileList.get(i)))       failLoadFileList.remove(fileList.get(i));
    }
    file2Drivers.put(((File)fileList.get(i)).getName(),subDriverList);
  }
  return driverList;
}",0.9906407487401008
69576,"private static List getJDBCDriverInfoListFromODADir(List fileList){
  List driverList=new ArrayList();
  List allJars=new ArrayList();
  allJars.addAll(fileList);
  allJars.addAll(Arrays.asList(JarFile.getDriverLocation().listFiles(new FileFilter(){
    public boolean accept(    File fileName){
      if (fileName.isFile() && (fileName.getName().toLowerCase().endsWith(""String_Node_Str"") || fileName.getName().toLowerCase().endsWith(""String_Node_Str""))) {
        return true;
      }
      return false;
    }
  }
)));
  if (allJars == null || allJars.size() == 0)   return driverList;
  URLClassLoader urlClassLoader=createClassLoader(allJars.toArray());
  for (int i=0; i < fileList.size(); i++) {
    String[] resourceNames=getAllResouceNames((File)fileList.get(i));
    List subDriverList=new ArrayList();
    for (int j=0; j < resourceNames.length; j++) {
      String resourceName=resourceNames[j];
      if (resourceName.endsWith(""String_Node_Str"")) {
        resourceName=modifyResourceName(resourceName);
        Class aClass=loadClass(urlClassLoader,resourceName);
        if (isImplementedDriver(aClass)) {
          JDBCDriverInformation info=JDBCDriverInformation.newInstance(aClass);
          if (info != null) {
            driverList.add(info);
            subDriverList.add(info);
          }
        }
      }
    }
    if (subDriverList.isEmpty()) {
      if (!failLoadFileList.contains(fileList.get(i)))       failLoadFileList.add(fileList.get(i));
    }
 else {
      if (failLoadFileList.contains(fileList.get(i)))       failLoadFileList.remove(fileList.get(i));
    }
    file2Drivers.put(((File)fileList.get(i)).getName(),subDriverList);
  }
  urlClassLoader.close();
  return driverList;
}","private static List getJDBCDriverInfoListFromODADir(List fileList){
  List driverList=new ArrayList();
  List allJars=new ArrayList();
  allJars.addAll(fileList);
  allJars.addAll(Arrays.asList(JarFile.getDriverLocation().listFiles(new FileFilter(){
    public boolean accept(    File fileName){
      if (fileName.isFile() && (fileName.getName().toLowerCase().endsWith(""String_Node_Str"") || fileName.getName().toLowerCase().endsWith(""String_Node_Str""))) {
        return true;
      }
      return false;
    }
  }
)));
  if (allJars == null || allJars.size() == 0)   return driverList;
  URLClassLoader urlClassLoader=createClassLoader(allJars.toArray());
  for (int i=0; i < fileList.size(); i++) {
    String[] resourceNames=getAllResouceNames((File)fileList.get(i));
    List subDriverList=new ArrayList();
    for (int j=0; j < resourceNames.length; j++) {
      String resourceName=resourceNames[j];
      if (resourceName.endsWith(""String_Node_Str"")) {
        resourceName=modifyResourceName(resourceName);
        Class aClass=loadClass(urlClassLoader,resourceName);
        if (isImplementedDriver(aClass)) {
          JDBCDriverInformation info=JDBCDriverInformation.newInstance(aClass);
          if (info != null) {
            driverList.add(info);
            subDriverList.add(info);
          }
        }
      }
    }
    if (subDriverList.isEmpty()) {
      if (!failLoadFileList.contains(fileList.get(i)))       failLoadFileList.add(fileList.get(i));
    }
 else {
      if (failLoadFileList.contains(fileList.get(i)))       failLoadFileList.remove(fileList.get(i));
    }
    file2Drivers.put(((File)fileList.get(i)).getName(),subDriverList);
  }
  return driverList;
}",0.9923708920187794
69577,"/** 
 * @param severity
 * @param message
 * @return
 */
protected Status getMiscStatus(int severity,String message){
  return new Status(severity,PlatformUI.PLUGIN_ID,IStatus.OK,message,null);
}","/** 
 * @param severity
 * @param message
 * @return
 */
protected Status getMiscStatus(int severity,String message){
  return new Status(severity,PlatformUI.PLUGIN_ID,severity,message,null);
}",0.9587628865979382
69578,"public ExportDataSourceDialog(Shell parentShell,String title,DataSourceHandle selection){
  this(parentShell,title);
  this.dataSourceHandle=selection;
  this.fileName=this.dataSourceHandle.getQualifiedName();
}","public ExportDataSourceDialog(Shell parentShell,String title,DataSourceHandle selection){
  this(parentShell,title);
  this.dataSourceHandle=selection;
  initProfileName();
}",0.8727272727272727
69579,"protected void writePageHint(LayoutContext pdfContext){
  ArrayList pageHintList=pdfContext.getPageHint();
  PageHint hint=new PageHint(pdfContext.getPageNumber(),pdfContext.getMasterPage());
  for (int i=0; i < pageHintList.size(); i++) {
    SizeBasedContent[] range=(SizeBasedContent[])pageHintList.get(i);
    PageSection section=createPageSection(range[0],range[1]);
    hint.addSection(section);
  }
  hint.addUnresolvedRowHints(pdfContext.getUnresolvedRowHints());
  hint.addTableColumnHints(pdfContext.getTableColumnHints());
  if (ensureOpen()) {
    try {
      hintWriter.writePageHint(hint);
    }
 catch (    IOException ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
      close();
    }
  }
}","protected void writePageHint(LayoutContext pdfContext){
  ArrayList pageHintList=pdfContext.getPageHint();
  PageHint hint=new PageHint(pdfContext.getPageNumber(),pdfContext.getMasterPage());
  for (int i=0; i < pageHintList.size(); i++) {
    SizeBasedContent[] range=(SizeBasedContent[])pageHintList.get(i);
    PageSection section=createPageSection(range[0],range[1]);
    hint.addSection(section);
  }
  hint.addUnresolvedRowHints(pdfContext.getUnresolvedRowHints());
  hint.addTableColumnHints(pdfContext.getTableColumnHints());
  Collection<PageVariable> vars=getPageVariable();
  hint.getPageVariables().addAll(vars);
  if (ensureOpen()) {
    try {
      hintWriter.writePageHint(hint);
    }
 catch (    IOException ex) {
      logger.log(Level.SEVERE,""String_Node_Str"",ex);
      close();
    }
  }
}",0.9404839764551994
69580,"public void onPage(long pageNumber,Object context){
  if (context instanceof LayoutContext) {
    LayoutContext pdfContext=(LayoutContext)context;
    document.setPageCount(pageNumber);
    boolean reportFinished=pdfContext.isFinished();
    if (reportFinished) {
      writeTotalPage(pageNumber);
      close();
      return;
    }
    boolean checkpoint=false;
    if (executionContext.isProgressiveViewingEnable()) {
      if (pageNumber == 1 || pageNumber == 10 || pageNumber == 50 || pageNumber % 100 == 0) {
        checkpoint=true;
      }
    }
    writePageHint(pdfContext);
    if (checkpoint) {
      try {
        IDocArchiveWriter archive=document.getArchive();
        writeTotalPage(pageNumber);
        document.savePersistentObjects(ReportDocumentBuilder.this.executionContext.getGlobalBeans());
        document.saveCoreStreams();
        archive.flush();
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,""String_Node_Str"",e);
      }
    }
    if (pageHandler != null) {
{
        IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,pageNumber,false);
        pageHandler.onPage((int)pageNumber,checkpoint,docInfo);
      }
    }
  }
  executionContext.getProgressMonitor().onProgress(IProgressMonitor.END_PAGE,(int)pageNumber);
}","public void onPage(long pageNumber,Object context){
  if (context instanceof LayoutContext) {
    LayoutContext pdfContext=(LayoutContext)context;
    document.setPageCount(pageNumber);
    boolean reportFinished=pdfContext.isFinished();
    if (reportFinished) {
      writePageVariables();
      writeTotalPage(pageNumber);
      close();
      return;
    }
    boolean checkpoint=false;
    if (executionContext.isProgressiveViewingEnable()) {
      if (pageNumber == 1 || pageNumber == 10 || pageNumber == 50 || pageNumber % 100 == 0) {
        checkpoint=true;
      }
    }
    writePageHint(pdfContext);
    if (checkpoint) {
      try {
        IDocArchiveWriter archive=document.getArchive();
        writeTotalPage(pageNumber);
        document.savePersistentObjects(ReportDocumentBuilder.this.executionContext.getGlobalBeans());
        document.saveCoreStreams();
        archive.flush();
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,""String_Node_Str"",e);
      }
    }
    if (pageHandler != null) {
{
        IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,pageNumber,false);
        pageHandler.onPage((int)pageNumber,checkpoint,docInfo);
      }
    }
  }
  executionContext.getProgressMonitor().onProgress(IProgressMonitor.END_PAGE,(int)pageNumber);
}",0.9892307692307692
69581,"private Collection<PageVariable> getPageVariable(){
  Collection<PageVariable> pageVars=new ArrayList<PageVariable>();
  Collection<PageVariable> vars=executionContext.getPageVariables();
  for (  PageVariable var : vars) {
    if (PageVariable.SCOPE_PAGE.equals(var.getScope())) {
      pageVars.add(var);
    }
  }
  return pageVars;
}","protected Collection<PageVariable> getPageVariable(){
  Collection<PageVariable> pageVars=new ArrayList<PageVariable>();
  Collection<PageVariable> vars=executionContext.getPageVariables();
  for (  PageVariable var : vars) {
    if (PageVariable.SCOPE_PAGE.equals(var.getScope())) {
      pageVars.add(var);
    }
  }
  return pageVars;
}",0.9822485207100592
69582,"public Object[] getFieldValues(){
  ArrayList fields=new ArrayList();
  fields.add(new Integer(startIndex));
  fields.add(new Integer(endIndex));
  if (sortKeys != null) {
    fields.add(new Integer(sortKeys.length));
    for (int i=0; i < sortKeys.length; i++)     fields.add(sortKeys[i]);
  }
 else {
    fields.add(null);
  }
  if (sortDirections != null) {
    fields.add(new Integer(sortDirections.length));
    for (int i=0; i < sortDirections.length; i++)     fields.add(new Boolean(sortDirections[i]));
  }
 else {
    fields.add(null);
  }
  if (this.comparator != null) {
    fields.add(new Integer(comparator.length));
    for (int i=0; i < comparator.length; i++)     fields.add(comparator[i] == null ? ISortDefinition.ASCII_SORT_STRENGTH : new Integer(comparator[i].getStrength()));
    for (int i=0; i < comparator.length; i++)     fields.add(comparator[i] == null ? null : comparator[i].getLocale(ULocale.ACTUAL_LOCALE).getBaseName());
  }
 else {
    fields.add(null);
    fields.add(null);
  }
  fields.add(new Boolean(accept));
  return fields.toArray();
}","public Object[] getFieldValues(){
  ArrayList fields=new ArrayList();
  fields.add(new Integer(startIndex));
  fields.add(new Integer(endIndex));
  if (sortKeys != null) {
    fields.add(new Integer(sortKeys.length));
    for (int i=0; i < sortKeys.length; i++)     fields.add(sortKeys[i]);
  }
 else {
    fields.add(null);
  }
  if (sortDirections != null) {
    fields.add(new Integer(sortDirections.length));
    for (int i=0; i < sortDirections.length; i++)     fields.add(new Boolean(sortDirections[i]));
  }
 else {
    fields.add(null);
  }
  if (this.comparator != null) {
    fields.add(new Integer(comparator.length));
    for (int i=0; i < comparator.length; i++)     fields.add(comparator[i] == null ? ISortDefinition.ASCII_SORT_STRENGTH : new Integer(comparator[i].getStrength()));
    for (int i=0; i < comparator.length; i++)     fields.add(comparator[i] == null ? null : comparator[i].getLocale(ULocale.ACTUAL_LOCALE).getBaseName());
  }
 else {
    fields.add(null);
  }
  fields.add(new Boolean(accept));
  return fields.toArray();
}",0.9896519285042332
69583,"public ICachedObject createInstance(Object[] fields){
  GroupBoundaryInfo groupBoundaryInfo=new GroupBoundaryInfo(((Integer)fields[0]).intValue(),((Integer)fields[1]).intValue());
  Object[] sortKeys=null;
  int sortKeysTotalLength=1;
  if (fields[2] != null) {
    sortKeys=new Object[((Integer)fields[2]).intValue()];
    System.arraycopy(fields,3,sortKeys,0,sortKeys.length);
    sortKeysTotalLength=sortKeys.length + 1;
  }
  boolean[] sortDirections=null;
  if (fields[2 + sortKeysTotalLength] != null) {
    sortDirections=new boolean[((Integer)fields[2 + sortKeysTotalLength]).intValue()];
    for (int i=0; i < sortDirections.length; i++) {
      sortDirections[i]=((Boolean)fields[3 + sortKeysTotalLength + i]).booleanValue();
    }
  }
  int[] sortStrength=null;
  if (fields[2 + sortKeysTotalLength * 2] != null) {
    sortStrength=new int[((Integer)fields[2 + sortKeysTotalLength * 2]).intValue()];
    for (int i=0; i < sortStrength.length; i++) {
      sortStrength[i]=((Integer)fields[3 + sortKeysTotalLength * 2 + i]).intValue();
    }
  }
  ULocale[] locales=null;
  if (fields[2 + sortKeysTotalLength * 3] != null) {
    locales=new ULocale[((Integer)fields[2 + sortKeysTotalLength * 3]).intValue()];
    for (int i=0; i < sortStrength.length; i++) {
      Object locale=fields[3 + sortKeysTotalLength * 3 + i];
      if (locale != null)       locales[i]=new ULocale((String)locale);
    }
  }
  groupBoundaryInfo.setSortCondition(sortKeys,sortDirections,sortStrength,locales);
  groupBoundaryInfo.setAccepted(((Boolean)fields[fields.length - 1]).booleanValue());
  return groupBoundaryInfo;
}","public ICachedObject createInstance(Object[] fields){
  GroupBoundaryInfo groupBoundaryInfo=new GroupBoundaryInfo(((Integer)fields[0]).intValue(),((Integer)fields[1]).intValue());
  Object[] sortKeys=null;
  int sortKeysTotalLength=1;
  if (fields[2] != null) {
    sortKeys=new Object[((Integer)fields[2]).intValue()];
    System.arraycopy(fields,3,sortKeys,0,sortKeys.length);
    sortKeysTotalLength=sortKeys.length + 1;
  }
  boolean[] sortDirections=null;
  if (fields[2 + sortKeysTotalLength] != null) {
    sortDirections=new boolean[((Integer)fields[2 + sortKeysTotalLength]).intValue()];
    for (int i=0; i < sortDirections.length; i++) {
      sortDirections[i]=((Boolean)fields[3 + sortKeysTotalLength + i]).booleanValue();
    }
  }
  int[] sortStrength=null;
  ULocale[] locales=null;
  if (fields[2 + sortKeysTotalLength * 2] != null) {
    sortStrength=new int[((Integer)fields[2 + sortKeysTotalLength * 2]).intValue()];
    for (int i=0; i < sortStrength.length; i++) {
      sortStrength[i]=((Integer)fields[3 + sortKeysTotalLength * 2 + i]).intValue();
    }
    locales=new ULocale[sortStrength.length];
    for (int i=0; i < sortStrength.length; i++) {
      Object locale=fields[2 + sortKeysTotalLength * 3 + i];
      if (locale != null)       locales[i]=new ULocale((String)locale);
    }
  }
  groupBoundaryInfo.setSortCondition(sortKeys,sortDirections,sortStrength,locales);
  groupBoundaryInfo.setAccepted(((Boolean)fields[fields.length - 1]).booleanValue());
  return groupBoundaryInfo;
}",0.8046050527662296
69584,"/** 
 * @param uri The uri to set.
 */
public void setURI(String uri){
  if (sourceType == IMAGE_NAME) {
    setImageName(uri);
  }
 else {
    setImageURI(uri);
  }
}","/** 
 * @param uri The uri to set.
 */
public void setURI(String uri){
switch (sourceType) {
case IMAGE_NAME:
    setImageName(uri);
  break;
case IMAGE_FILE:
case IMAGE_URL:
setImageURI(uri);
break;
default :
this.uri=uri;
break;
}
}",0.6234413965087282
69585,"public String getURI(){
  if (sourceType == IMAGE_NAME) {
    return getImageName();
  }
  return getImageURI();
}","public String getURI(){
switch (sourceType) {
case IMAGE_NAME:
    return getImageName();
case IMAGE_FILE:
case IMAGE_URL:
  return getImageURI();
default :
return uri;
}
}",0.7342657342657343
69586,"public Composite createDataSelector(Composite parent){
  Composite cmpDataSet=ChartUIUtil.createCompositeWrapper(parent);
{
    cmpDataSet.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Label label=new Label(cmpDataSet,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  Composite cmpDetail=new Composite(cmpDataSet,SWT.NONE);
{
    GridLayout gridLayout=new GridLayout(2,false);
    gridLayout.marginWidth=10;
    gridLayout.marginHeight=0;
    cmpDetail.setLayout(gridLayout);
    cmpDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Composite compRadios=ChartUIUtil.createCompositeWrapper(cmpDetail);
{
    GridData gd=new GridData();
    gd.verticalSpan=2;
    compRadios.setLayoutData(gd);
  }
  btnInherit=new Button(compRadios,SWT.RADIO);
  btnInherit.setText(Messages.getString(""String_Node_Str""));
  btnInherit.addListener(SWT.Selection,this);
  btnUseData=new Button(compRadios,SWT.RADIO);
  btnUseData.setText(Messages.getString(""String_Node_Str""));
  btnUseData.addListener(SWT.Selection,this);
  cmbInherit=new CCombo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  cmbInherit.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbInherit.addListener(SWT.Selection,this);
  cmbDataItems=new CCombo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  cmbDataItems.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbDataItems.addListener(SWT.Selection,this);
  initDataSelector();
  updatePredefinedQueries();
  if (dataProvider.checkState(IDataServiceProvider.IN_MULTI_VIEWS)) {
    autoSelect(false);
  }
  return cmpDataSet;
}","public Composite createDataSelector(Composite parent){
  Composite cmpDataSet=ChartUIUtil.createCompositeWrapper(parent);
{
    cmpDataSet.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Label label=new Label(cmpDataSet,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  Composite cmpDetail=new Composite(cmpDataSet,SWT.NONE);
{
    GridLayout gridLayout=new GridLayout(2,false);
    gridLayout.marginWidth=10;
    gridLayout.marginHeight=0;
    cmpDetail.setLayout(gridLayout);
    cmpDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Composite compRadios=ChartUIUtil.createCompositeWrapper(cmpDetail);
{
    GridData gd=new GridData();
    gd.verticalSpan=2;
    compRadios.setLayoutData(gd);
  }
  btnInherit=new Button(compRadios,SWT.RADIO);
  btnInherit.setText(Messages.getString(""String_Node_Str""));
  btnInherit.addListener(SWT.Selection,this);
  btnUseData=new Button(compRadios,SWT.RADIO);
  btnUseData.setText(Messages.getString(""String_Node_Str""));
  btnUseData.addListener(SWT.Selection,this);
  cmbInherit=new CCombo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  cmbInherit.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbInherit.addListener(SWT.Selection,this);
  cmbDataItems=new CCombo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  cmbDataItems.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbDataItems.addListener(SWT.Selection,this);
  initDataSelector();
  updatePredefinedQueries();
  checkColBindingForCube();
  if (dataProvider.checkState(IDataServiceProvider.IN_MULTI_VIEWS)) {
    autoSelect(false);
  }
  return cmpDataSet;
}",0.9917208752217622
69587,"public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getReportDataSet() != null);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
ChartAdapter.beginIgnoreNotifications();
if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ExtendedItemHandle refHandle=ChartReportItemUtil.getChartReferenceItemHandle(itemHandle);
if (refHandle != null) {
ChartReportItemUtil.copyChartSeriesDefinition(ChartReportItemUtil.getChartFromHandle(refHandle),getChartModel());
}
}
ChartAdapter.endIgnoreNotifications();
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
}
updatePredefinedQueries();
autoSelect(true);
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}","public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getReportDataSet() != null);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
ChartAdapter.beginIgnoreNotifications();
if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ExtendedItemHandle refHandle=ChartReportItemUtil.getChartReferenceItemHandle(itemHandle);
if (refHandle != null) {
ChartReportItemUtil.copyChartSeriesDefinition(ChartReportItemUtil.getChartFromHandle(refHandle),getChartModel());
}
}
ChartAdapter.endIgnoreNotifications();
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
}
updatePredefinedQueries();
autoSelect(true);
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}",0.9980137509549274
69588,"int invokeDataBinding(){
  Shell shell=new Shell(Display.getDefault(),SWT.DIALOG_TRIM | SWT.RESIZE | SWT.APPLICATION_MODAL);
  ExtendedItemHandle handle=getItemHandle();
  handle.getModuleHandle().getCommandStack().startTrans(null);
  ColumnBindingDialog page=new ChartColumnBindingDialog(handle,shell,getContext());
  ExpressionProvider ep=new ExpressionProvider(getItemHandle());
  ep.addFilter(new ExpressionFilter(){
    public boolean select(    Object parentElement,    Object element){
      return !(parentElement.equals(ExpressionProvider.BIRT_OBJECTS) && element instanceof IClassInfo && ((IClassInfo)element).getName().equals(""String_Node_Str""));
    }
  }
);
  page.setExpressionProvider(ep);
  ((ChartColumnBindingDialog)page).setReadOnly(getDataServiceProvider().isSharedBinding() || getDataServiceProvider().isInheritanceOnly());
  int openStatus=page.open();
  if (openStatus == Window.OK) {
    handle.getModuleHandle().getCommandStack().commit();
    updatePredefinedQueries();
  }
 else {
    handle.getModuleHandle().getCommandStack().rollback();
  }
  return openStatus;
}","int invokeDataBinding(){
  Shell shell=new Shell(Display.getDefault(),SWT.DIALOG_TRIM | SWT.RESIZE | SWT.APPLICATION_MODAL);
  ExtendedItemHandle handle=getItemHandle();
  handle.getModuleHandle().getCommandStack().startTrans(null);
  ColumnBindingDialog page=new ChartColumnBindingDialog(handle,shell,getContext());
  ExpressionProvider ep=new ExpressionProvider(getItemHandle());
  ep.addFilter(new ExpressionFilter(){
    public boolean select(    Object parentElement,    Object element){
      return !(parentElement.equals(ExpressionProvider.BIRT_OBJECTS) && element instanceof IClassInfo && ((IClassInfo)element).getName().equals(""String_Node_Str""));
    }
  }
);
  page.setExpressionProvider(ep);
  ((ChartColumnBindingDialog)page).setReadOnly(getDataServiceProvider().isSharedBinding() || getDataServiceProvider().isInheritanceOnly());
  int openStatus=page.open();
  if (openStatus == Window.OK) {
    handle.getModuleHandle().getCommandStack().commit();
    updatePredefinedQueries();
    checkColBindingForCube();
  }
 else {
    handle.getModuleHandle().getCommandStack().rollback();
  }
  return openStatus;
}",0.986462093862816
69589,"private void autoSelect(boolean force){
  if (dataProvider.checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) {
    Query query=ChartUIUtil.getAllOrthogonalSeriesDefinitions(getContext().getModel()).get(0).getDesignTimeSeries().getDataDefinition().get(0);
    Object[] valueExprs=getContext().getPredefinedQuery(ChartUIConstants.QUERY_VALUE);
    if ((force || query.getDefinition() == null || query.getDefinition().trim().length() == 0) && valueExprs != null && valueExprs.length == 1) {
      String text=valueExprs[0].toString();
      query.setDefinition(text);
      if (dataProvider.update(ChartUIConstants.QUERY_VALUE,text)) {
        Event e=new Event();
        e.type=IChartDataSheet.EVENT_QUERY;
        this.notifyListeners(e);
      }
      if (force) {
        fireEvent(tablePreview,EVENT_PREVIEW);
      }
    }
  }
}","private void autoSelect(boolean force){
  if (dataProvider.checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY) && !dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
    Query query=ChartUIUtil.getAllOrthogonalSeriesDefinitions(getContext().getModel()).get(0).getDesignTimeSeries().getDataDefinition().get(0);
    Object[] valueExprs=getContext().getPredefinedQuery(ChartUIConstants.QUERY_VALUE);
    if ((force || query.getDefinition() == null || query.getDefinition().trim().length() == 0) && valueExprs != null && valueExprs.length == 1) {
      String text=valueExprs[0].toString();
      query.setDefinition(text);
      if (dataProvider.update(ChartUIConstants.QUERY_VALUE,text)) {
        Event e=new Event();
        e.type=IChartDataSheet.EVENT_QUERY;
        this.notifyListeners(e);
      }
      if (force) {
        fireEvent(tablePreview,EVENT_PREVIEW);
      }
    }
  }
}",0.9609644087256028
69590,"public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getReportDataSet() != null);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
ChartAdapter.beginIgnoreNotifications();
if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ExtendedItemHandle refHandle=ChartReportItemUtil.getChartReferenceItemHandle(itemHandle);
if (refHandle != null) {
ChartReportItemUtil.copyChartSeriesDefinition(ChartReportItemUtil.getChartFromHandle(refHandle),getChartModel());
}
}
ChartAdapter.endIgnoreNotifications();
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
}
updatePredefinedQueries();
autoSelect(true);
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
SeriesDefinition base=ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0);
if (selectDataTypes.get(cmbDataItems.getSelectionIndex()).intValue() == SELECT_DATA_SET && !ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
base.getGrouping().setEnabled(true);
}
 else {
base.getGrouping().setEnabled(false);
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}","public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getReportDataSet() != null);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
ChartAdapter.beginIgnoreNotifications();
if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ExtendedItemHandle refHandle=ChartReportItemUtil.getChartReferenceItemHandle(itemHandle);
if (refHandle != null) {
ChartReportItemUtil.copyChartSeriesDefinition(ChartReportItemUtil.getChartFromHandle(refHandle),getChartModel());
}
}
ChartAdapter.endIgnoreNotifications();
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
}
updatePredefinedQueries();
autoSelect(true);
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
if (event.widget == btnInherit || event.widget == cmbDataItems) {
SeriesDefinition base=ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0);
if (selectDataTypes.get(cmbDataItems.getSelectionIndex()).intValue() == SELECT_DATA_SET && !ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
base.getGrouping().setEnabled(true);
}
 else {
base.getGrouping().setEnabled(false);
}
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}",0.995086705202312
69591,"public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getReportDataSet() != null);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
ChartAdapter.beginIgnoreNotifications();
if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ExtendedItemHandle refHandle=ChartReportItemUtil.getChartReferenceItemHandle(itemHandle);
if (refHandle != null) {
ChartReportItemUtil.copyChartSeriesDefinition(ChartReportItemUtil.getChartFromHandle(refHandle),getChartModel());
}
}
ChartAdapter.endIgnoreNotifications();
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
}
updatePredefinedQueries();
autoSelect(true);
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}","public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getReportDataSet() != null);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
ChartAdapter.beginIgnoreNotifications();
if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ExtendedItemHandle refHandle=ChartReportItemUtil.getChartReferenceItemHandle(itemHandle);
if (refHandle != null) {
ChartReportItemUtil.copyChartSeriesDefinition(ChartReportItemUtil.getChartFromHandle(refHandle),getChartModel());
}
}
ChartAdapter.endIgnoreNotifications();
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
}
updatePredefinedQueries();
autoSelect(true);
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
SeriesDefinition base=ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0);
if (selectDataTypes.get(cmbDataItems.getSelectionIndex()).intValue() == SELECT_DATA_SET && !ChartUIConstants.TYPE_GANTT.equals(getChartModel().getType())) {
base.getGrouping().setEnabled(true);
}
 else {
base.getGrouping().setEnabled(false);
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}",0.9756024992561736
69592,"public void changeTask(Notification notification){
  if (previewPainter != null) {
    if (notification == null) {
      if (getChartModel() instanceof ChartWithAxes) {
        checkDataTypeForChartWithAxes();
      }
      return;
    }
    if (notification.getEventType() == Notification.REMOVE && notification.getNotifier() instanceof Axis) {
      ChartWizard.removeAllExceptions(""String_Node_Str"" + notification.getOldValue().hashCode());
    }
    if ((notification.getNotifier() instanceof Query && ((Query)notification.getNotifier()).eContainer() instanceof Series)) {
      Query query=(Query)notification.getNotifier();
      checkDataType(query,(Series)query.eContainer());
      if (!(((ChartWizardContext)getContext()).getChartType() instanceof GanttChart) && !getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
        if (getChartModel() instanceof ChartWithAxes) {
          Axis axisWithCurrentQuery=(Axis)((Query)notification.getNotifier()).eContainer().eContainer().eContainer();
          if (ChartUIUtil.getAxisXForProcessing((ChartWithAxes)getChartModel()).isCategoryAxis() && axisWithCurrentQuery.eContainer() instanceof Axis) {
            SeriesDefinition base=ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0);
            if (!base.getGrouping().isEnabled()) {
              base.getGrouping().setEnabled(true);
            }
            if (axisWithCurrentQuery.getType() == AxisType.DATE_TIME_LITERAL || getDataServiceProvider().getDataType(query.getDefinition()) == DataType.DATE_TIME_LITERAL) {
              if (query.getGrouping() == null) {
                query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
              }
              SeriesGrouping group=query.getGrouping();
              group.setEnabled(true);
              group.setAggregateExpression(""String_Node_Str"");
            }
          }
        }
 else {
          if (((Query)notification.getNotifier()).eContainer().eContainer().eContainer() instanceof SeriesDefinition) {
            SeriesDefinition base=ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0);
            if (!base.getGrouping().isEnabled()) {
              base.getGrouping().setEnabled(true);
            }
          }
        }
      }
    }
    if (notification.getNotifier() instanceof SeriesDefinition && getChartModel() instanceof ChartWithAxes) {
      checkDataTypeForChartWithAxes();
    }
    if (notification.getNotifier() instanceof Query || notification.getNotifier() instanceof Axis || notification.getNotifier() instanceof SeriesDefinition|| notification.getNotifier() instanceof SeriesGrouping) {
      doPreview();
    }
 else     if (ChartPreviewPainterBase.isLivePreviewActive()) {
      ChartAdapter.beginIgnoreNotifications();
      ChartUIUtil.syncRuntimeSeries(getChartModel());
      ChartAdapter.endIgnoreNotifications();
      doPreview();
    }
 else {
      doPreview();
    }
  }
}","public void changeTask(Notification notification){
  if (previewPainter != null) {
    if (notification == null) {
      if (getChartModel() instanceof ChartWithAxes) {
        checkDataTypeForChartWithAxes();
      }
      return;
    }
    if (notification.getEventType() == Notification.REMOVE && notification.getNotifier() instanceof Axis) {
      ChartWizard.removeAllExceptions(""String_Node_Str"" + notification.getOldValue().hashCode());
    }
    if (notification.getNotifier() instanceof SeriesDefinition && getChartModel() instanceof ChartWithAxes) {
      checkDataTypeForChartWithAxes();
    }
    if (notification.getNotifier() instanceof Query || notification.getNotifier() instanceof Axis || notification.getNotifier() instanceof SeriesDefinition|| notification.getNotifier() instanceof SeriesGrouping) {
      doPreview();
    }
 else     if (ChartPreviewPainterBase.isLivePreviewActive()) {
      ChartAdapter.beginIgnoreNotifications();
      ChartUIUtil.syncRuntimeSeries(getChartModel());
      ChartAdapter.endIgnoreNotifications();
      doPreview();
    }
 else {
      doPreview();
    }
  }
}",0.3466473008956669
69593,"private void setQueryExpression(String expression){
  if (query != null) {
    query.setDefinition(expression);
  }
 else {
    query=QueryImpl.create(expression);
    query.eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setQuery(query);
  }
}","private void setQueryExpression(String expression){
  if (query != null) {
    query.setDefinition(expression);
  }
 else {
    query=QueryImpl.create(expression);
    query.eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setQuery(query);
  }
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!(context.getChartType() instanceof GanttChart) && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (context.getDataServiceProvider().getDataType(expression) == DataType.DATE_TIME_LITERAL) {
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
      }
    }
  }
}",0.445371142618849
69594,"public void moveTo(int destIndex) throws DataException {
  checkValid(destIndex);
  int advancedStep;
  if (destIndex >= currResultIndex) {
    advancedStep=destIndex - currResultIndex;
  }
 else {
    if (!needCache) {
      reset();
      initCache();
      advancedStep=destIndex + 1;
      for (int i=0; i < advancedStep; i++)       next();
    }
 else {
      SimpleCachedObject cachedRow;
      try {
        cachedRow=(SimpleCachedObject)cache.get(destIndex);
        currResultObject=new ResultObject(rsMeta,cachedRow.getFieldValues());
      }
 catch (      IOException e) {
        throw new DataException(ResourceConstants.READ_TEMPFILE_ERROR,e);
      }
    }
  }
  currResultIndex=destIndex;
  if (currResultIndex == -1 || currResultIndex == countOfResult)   currResultObject=null;
}","public void moveTo(int destIndex) throws DataException {
  checkValid(destIndex);
  int advancedStep;
  if (destIndex >= currResultIndex) {
    advancedStep=destIndex - currResultIndex;
    for (int i=0; i < advancedStep; i++)     next();
  }
 else {
    if (!needCache) {
      reset();
      initCache();
      advancedStep=destIndex + 1;
      for (int i=0; i < advancedStep; i++)       next();
    }
 else {
      SimpleCachedObject cachedRow;
      try {
        cachedRow=(SimpleCachedObject)cache.get(destIndex);
        currResultObject=new ResultObject(rsMeta,cachedRow.getFieldValues());
      }
 catch (      IOException e) {
        throw new DataException(ResourceConstants.READ_TEMPFILE_ERROR,e);
      }
    }
  }
  currResultIndex=destIndex;
  if (currResultIndex == -1 || currResultIndex == countOfResult)   currResultObject=null;
}",0.9677811550151976
69595,"/** 
 * This method return the OrderingInfo that will be finally used to re-generate the smartcache.
 * @param groups
 * @return
 */
OrderingInfo getOrderingInfo(List[] groups){
  for (int i=1; i < groups.length; i++) {
    groups[i]=mergeTwoGroupBoundaryInfoGroups(groups[i - 1],groups[i]);
  }
  OrderingInfo odInfo=new OrderingInfo();
  for (int i=0; i < groups[groups.length - 1].size(); i++) {
    odInfo.add(((GroupBoundaryInfo)groups[groups.length - 1].get(i)).getStartIndex(),((GroupBoundaryInfo)groups[groups.length - 1].get(i)).getEndIndex());
  }
  return odInfo;
}","/** 
 * This method return the OrderingInfo that will be finally used to re-generate the smartcache.
 * @param groups
 * @return
 */
OrderingInfo getOrderingInfo(List[] groups){
  for (int i=1; i < groups.length; i++) {
    try {
      groups[i]=mergeTwoGroupBoundaryInfoGroups(groups[i - 1],groups[i]);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  OrderingInfo odInfo=new OrderingInfo();
  for (int i=0; i < groups[groups.length - 1].size(); i++) {
    odInfo.add(((GroupBoundaryInfo)groups[groups.length - 1].get(i)).getStartIndex(),((GroupBoundaryInfo)groups[groups.length - 1].get(i)).getEndIndex());
  }
  return odInfo;
}",0.935064935064935
69596,"/** 
 * Re-sort the GroupBoundaryInfo instances of a lower group level according the ordering of GroupBoundaryInfo instances of a higher group level .
 * @param higherGroup
 * @param lowerGroup
 * @return
 */
private List mergeTwoGroupBoundaryInfoGroups(List higherGroup,List lowerGroup){
  List result=new CachedList(tempDir,DataEngineSession.getCurrentClassLoader(),GroupBoundaryInfo.getCreator());
  for (int i=0; i < higherGroup.size(); i++) {
    GroupBoundaryInfo gbi1=(GroupBoundaryInfo)higherGroup.get(i);
    for (int j=0; j < lowerGroup.size(); j++) {
      if (gbi1.isInBoundary((GroupBoundaryInfo)lowerGroup.get(j)))       result.add(lowerGroup.get(j));
    }
  }
  return result;
}","/** 
 * Re-sort the GroupBoundaryInfo instances of a lower group level according the ordering of GroupBoundaryInfo instances of a higher group level .
 * @param higherGroup
 * @param lowerGroup
 * @return
 * @throws IOException 
 */
private List mergeTwoGroupBoundaryInfoGroups(List higherGroup,List lowerGroup) throws IOException {
  List result=new CachedList(tempDir,DataEngineSession.getCurrentClassLoader(),GroupBoundaryInfo.getCreator());
  GroupInfoWithIndex groupInfoWithIndex;
  DiskSortedStack higherSortedStack=new DiskSortedStack(0,false,new GroupInfoWithIndexComparator(GroupInfoWithIndexComparator.START_INDEX_KEY),GroupInfoWithIndex.getCreator());
  DiskSortedStack lowerSortedStack=new DiskSortedStack(0,false,new GroupInfoWithIndexComparator(GroupInfoWithIndexComparator.START_INDEX_KEY),GroupInfoWithIndex.getCreator());
  for (int i=0; i < higherGroup.size(); i++) {
    groupInfoWithIndex=new GroupInfoWithIndex();
    groupInfoWithIndex.groupIndex=i;
    groupInfoWithIndex.groupBoundaryInfo=(GroupBoundaryInfo)higherGroup.get(i);
    higherSortedStack.push(groupInfoWithIndex);
  }
  for (int i=0; i < lowerGroup.size(); i++) {
    groupInfoWithIndex=new GroupInfoWithIndex();
    groupInfoWithIndex.groupIndex=i;
    groupInfoWithIndex.groupBoundaryInfo=(GroupBoundaryInfo)lowerGroup.get(i);
    lowerSortedStack.push(groupInfoWithIndex);
  }
  DiskSortedStack resultSortedStack=new DiskSortedStack(0,false,new GroupInfoWithIndexComparator(GroupInfoWithIndexComparator.PARENT_GROUP_INDEX_KEY),GroupInfoWithIndex.getCreator());
  GroupInfoWithIndex gbiH;
  GroupInfoWithIndex gbiL=(GroupInfoWithIndex)lowerSortedStack.pop();
  for (int i=0; i < higherSortedStack.size(); i++) {
    gbiH=(GroupInfoWithIndex)higherSortedStack.pop();
    while (gbiL != null && gbiL.groupBoundaryInfo.getStartIndex() <= gbiH.groupBoundaryInfo.getEndIndex()) {
      if (gbiH.groupBoundaryInfo.isInBoundary(gbiL.groupBoundaryInfo)) {
        gbiL.parentGroupIndex=gbiH.groupIndex;
        resultSortedStack.push(gbiL);
      }
      gbiL=(GroupInfoWithIndex)lowerSortedStack.pop();
    }
  }
  for (int i=0; i < resultSortedStack.size(); i++) {
    result.add(((GroupInfoWithIndex)resultSortedStack.pop()).groupBoundaryInfo);
  }
  return result;
}",0.405570652173913
69597,"public void startTable(ITableContent table){
  ContainerSizeInfo sizeInfo=engine.getCurrentContainer().getSizeInfo();
  int width=sizeInfo.getWidth();
  TableInfo info=LayoutUtil.createTable(table,width);
  if (info == null) {
    return;
  }
  String caption=table.getCaption();
  if (caption != null) {
    engine.addCaption(caption);
  }
  engine.addTable(table,info,sizeInfo);
}","public void startTable(ITableContent table){
  ContainerSizeInfo sizeInfo=engine.getCurrentContainer().getSizeInfo();
  int width=sizeInfo.getWidth();
  ColumnsInfo info=LayoutUtil.createTable(table,width);
  if (info == null) {
    return;
  }
  String caption=table.getCaption();
  if (caption != null) {
    engine.addCaption(caption);
  }
  engine.addTable(table,info,sizeInfo);
}",0.9843342036553524
69598,"public void startList(IListContent list){
  ContainerSizeInfo size=engine.getCurrentContainer().getSizeInfo();
  TableInfo table=LayoutUtil.createTable(list,size.getWidth());
  engine.addTable(list,table,size);
  if (list.getChildren() == null) {
    HyperlinkDef link=parseHyperLink(list);
    BookmarkDef bookmark=getBookmark(list);
    engine.addData(ExcelLayoutEngine.EMPTY,list.getComputedStyle(),link,bookmark);
  }
}","public void startList(IListContent list){
  ContainerSizeInfo size=engine.getCurrentContainer().getSizeInfo();
  ColumnsInfo table=LayoutUtil.createTable(list,size.getWidth());
  engine.addTable(list,table,size);
  if (list.getChildren() == null) {
    HyperlinkDef link=parseHyperLink(list);
    BookmarkDef bookmark=getBookmark(list);
    engine.addData(ExcelLayoutEngine.EMPTY,list.getComputedStyle(),link,bookmark);
  }
}",0.9858490566037736
69599,"public void addTable(IContainerContent content,TableInfo table,ContainerSizeInfo size){
  IStyle style=content.getComputedStyle();
  XlsContainer currentContainer=getCurrentContainer();
  ContainerSizeInfo parentSizeInfo=currentContainer.getSizeInfo();
  int startCoordinate=parentSizeInfo.getStartCoordinate();
  int endCoordinate=parentSizeInfo.getEndCoordinate();
  int[] columnStartCoordinates=calculateColumnCoordinates(table,startCoordinate,endCoordinate);
  splitColumns(startCoordinate,endCoordinate,columnStartCoordinates);
  createTable(table,style,currentContainer,columnStartCoordinates);
}","public void addTable(IContainerContent content,ColumnsInfo table,ContainerSizeInfo size){
  IStyle style=content.getComputedStyle();
  XlsContainer currentContainer=getCurrentContainer();
  ContainerSizeInfo parentSizeInfo=currentContainer.getSizeInfo();
  int[] columnStartCoordinates=splitColumns(table,parentSizeInfo);
  createTable(table,style,currentContainer,columnStartCoordinates);
}",0.7069486404833837
69600,"public RowData next(){
  SheetData[] row=rowIterator.next();
  List<SheetData> data=new ArrayList<SheetData>();
  int width=Math.min(row.length,maxCol - 1);
  double rowHeight=DEFAULT_ROW_HEIGHT;
  for (int i=0; i < width; i++) {
    SheetData d=row[i];
    if (d == null || d.isBlank()) {
      continue;
    }
    if (d.isProcessed()) {
      continue;
    }
    d.setProcessed(true);
    data.add(row[i]);
    if (d instanceof ImageData) {
      ImageData imagedata=(ImageData)d;
      double height=imagedata.getHeight();
      if (height > rowHeight)       rowHeight=height;
    }
 else {
      double height=d.getRowHeight();
      rowHeight=height > rowHeight ? height : rowHeight;
    }
  }
  SheetData[] rowdata=new SheetData[data.size()];
  data.toArray(rowdata);
  return new RowData(rowdata,rowHeight);
}","public RowData next(){
  SheetData[] row=rowIterator.next();
  List<SheetData> data=new ArrayList<SheetData>();
  int width=Math.min(row.length,maxCol - 1);
  double rowHeight=DEFAULT_ROW_HEIGHT;
  for (int i=0; i < width; i++) {
    SheetData d=row[i];
    if (d == null || d.isBlank()) {
      continue;
    }
    if (d.isProcessed()) {
      continue;
    }
    d.setProcessed(true);
    data.add(row[i]);
    double height=d.getRowHeight();
    rowHeight=height > rowHeight ? height : rowHeight;
  }
  SheetData[] rowdata=new SheetData[data.size()];
  data.toArray(rowdata);
  return new RowData(rowdata,rowHeight);
}",0.8197633959638135
69601,"private void createTable(TableInfo tableInfo,IStyle style,XlsContainer currentContainer,int[] columnStartCoordinates){
  int leftCordinate=columnStartCoordinates[0];
  int width=columnStartCoordinates[columnStartCoordinates.length - 1] - leftCordinate;
  ContainerSizeInfo sizeInfo=new ContainerSizeInfo(leftCordinate,width);
  StyleEntry styleEntry=engine.createEntry(sizeInfo,style);
  XlsTable table=new XlsTable(tableInfo,styleEntry,sizeInfo,currentContainer);
  tables.push(table);
  addContainer(table);
}","private void createTable(ColumnsInfo tableInfo,IStyle style,XlsContainer currentContainer,int[] columnStartCoordinates){
  int leftCordinate=columnStartCoordinates[0];
  int width=columnStartCoordinates[columnStartCoordinates.length - 1] - leftCordinate;
  ContainerSizeInfo sizeInfo=new ContainerSizeInfo(leftCordinate,width);
  StyleEntry styleEntry=engine.createEntry(sizeInfo,style);
  XlsTable table=new XlsTable(tableInfo,styleEntry,sizeInfo,currentContainer);
  tables.push(table);
  addContainer(table);
}",0.98828125
69602,"private int[] calculateColumnCoordinates(TableInfo table,int startCoordinate,int endCoordinate){
  int columnCount=table.getColumnCount();
  int[] columnStartCoordinates=new int[columnCount + 1];
  columnStartCoordinates[0]=startCoordinate;
  for (int i=1; i <= columnCount; i++) {
    columnStartCoordinates[i]=columnStartCoordinates[i - 1] + table.getColumnWidth(i - 1);
  }
  return columnStartCoordinates;
}","private int[] calculateColumnCoordinates(ColumnsInfo table,int startCoordinate,int endCoordinate){
  int columnCount=table.getColumnCount();
  int[] columnStartCoordinates=new int[columnCount + 1];
  columnStartCoordinates[0]=startCoordinate;
  for (int i=1; i <= columnCount; i++) {
    columnStartCoordinates[i]=columnStartCoordinates[i - 1] + table.getColumnWidth(i - 1);
  }
  return columnStartCoordinates;
}",0.9854368932038836
69603,"public static TableInfo createTable(ITableContent table,int width){
  int tableWidth=getElementWidth(table,width);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.covertDimensionType(value,tableWidth);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if (leftWidth != 0 && unassignedCount == 0) {
    for (int i=0; i < columnCount; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
    }
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1)       columns[1]=0;
 else       columns[i]=resize(columns[i],totalAssigned,leftWidth);
    }
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new DefaultTableInfo(columns);
}","public static ColumnsInfo createTable(ITableContent table,int width){
  int tableWidth=getElementWidth(table,width);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.covertDimensionType(value,tableWidth);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if (leftWidth != 0 && unassignedCount == 0) {
    for (int i=0; i < columnCount; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
    }
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1)       columns[1]=0;
 else       columns[i]=resize(columns[i],totalAssigned,leftWidth);
    }
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}",0.988539741219963
69604,"public XlsTable(TableInfo table,XlsContainer container){
  this(table,container.getStyle(),container.getSizeInfo(),container);
}","public XlsTable(ColumnsInfo table,XlsContainer container){
  this(table,container.getStyle(),container.getSizeInfo(),container);
}",0.9612403100775194
69605,"private final void showTooltip(Action ac){
  TooltipValue tv=(TooltipValue)ac.getValue();
  String tooltip=tv.getText().replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!tooltip.equals(tv.getText())) {
    tooltip=""String_Node_Str"" + tooltip + ""String_Node_Str"";
  }
 else {
    tooltip=tv.getText();
  }
  ((JComponent)iun.peerInstance()).setToolTipText(tooltip);
}","private final void showTooltip(Action ac){
  TooltipValue tv=(TooltipValue)ac.getValue();
  if (tv.getText() == null) {
    return;
  }
  String tooltip=tv.getText().replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!tooltip.equals(tv.getText())) {
    tooltip=""String_Node_Str"" + tooltip + ""String_Node_Str"";
  }
 else {
    tooltip=tv.getText();
  }
  ((JComponent)iun.peerInstance()).setToolTipText(tooltip);
}",0.9417721518987342
69606,"public boolean next() throws DataException {
  if (currResultIndex > countOfResult - 1) {
    currResultObject=null;
  }
 else {
    currResultIndex++;
    if (currResultIndex == countOfResult)     currResultObject=null;
 else     try {
      currResultObject=diskBasedResultSet.nextRow();
    }
 catch (    IOException e) {
      throw new DataException(ResourceConstants.READ_TEMPFILE_ERROR,e);
    }
  }
  return currResultObject != null;
}","public boolean next() throws DataException {
  if (currResultIndex > countOfResult - 1) {
    currResultObject=null;
    return false;
  }
 else {
    currResultIndex++;
    if (currResultIndex == countOfResult) {
      currResultObject=null;
      return false;
    }
  }
  try {
    if (needCache) {
      if (currResultIndex < cache.size()) {
        SimpleCachedObject cachedRow=(SimpleCachedObject)cache.get(currResultIndex);
        currResultObject=new ResultObject(rsMeta,cachedRow.getFieldValues());
      }
 else {
        currResultObject=diskBasedResultSet.nextRow();
        cache.add(new SimpleCachedObject(getAllFields(currResultObject)));
      }
    }
 else {
      currResultObject=diskBasedResultSet.nextRow();
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_TEMPFILE_ERROR,e);
  }
  return currResultObject != null;
}",0.6303030303030303
69607,"public void reset() throws DataException {
  diskBasedResultSet.reset();
  currResultIndex=-1;
  currResultObject=null;
}","public void reset() throws DataException {
  diskBasedResultSet.reset();
  needCache=false;
  if (cache != null) {
    try {
      cache.close();
    }
 catch (    IOException e) {
      throw new DataException(ResourceConstants.READ_TEMPFILE_ERROR,e);
    }
    cache=null;
  }
  currResultIndex=-1;
  currResultObject=null;
}",0.5401785714285714
69608,"public void close() throws DataException {
  diskBasedResultSet.close();
  File goalFile=new File(goalFileStr);
  FileSecurity.fileDelete(goalFile);
  File tempDir=new File(sessionRootDirStr);
  FileSecurity.fileDelete(tempDir);
  currResultIndex=-1;
  currResultObject=null;
}","public void close() throws DataException {
  if (cache != null) {
    try {
      cache.close();
    }
 catch (    IOException e) {
      throw new DataException(ResourceConstants.READ_TEMPFILE_ERROR,e);
    }
    cache=null;
  }
  diskBasedResultSet.close();
  File goalFile=new File(goalFileStr);
  FileSecurity.fileDelete(goalFile);
  File tempDir=new File(sessionRootDirStr);
  FileSecurity.fileDelete(tempDir);
  currResultIndex=-1;
  currResultObject=null;
}",0.747638326585695
69609,"public void moveTo(int destIndex) throws DataException {
  checkValid(destIndex);
  int advancedStep;
  if (destIndex >= currResultIndex) {
    advancedStep=destIndex - currResultIndex;
  }
 else {
    reset();
    advancedStep=destIndex + 1;
  }
  for (int i=0; i < advancedStep; i++)   next();
  currResultIndex=destIndex;
  if (currResultIndex == -1 || currResultIndex == countOfResult)   currResultObject=null;
}","public void moveTo(int destIndex) throws DataException {
  checkValid(destIndex);
  int advancedStep;
  if (destIndex >= currResultIndex) {
    advancedStep=destIndex - currResultIndex;
  }
 else {
    if (!needCache) {
      reset();
      initCache();
      advancedStep=destIndex + 1;
      for (int i=0; i < advancedStep; i++)       next();
    }
 else {
      SimpleCachedObject cachedRow;
      try {
        cachedRow=(SimpleCachedObject)cache.get(destIndex);
        currResultObject=new ResultObject(rsMeta,cachedRow.getFieldValues());
      }
 catch (      IOException e) {
        throw new DataException(ResourceConstants.READ_TEMPFILE_ERROR,e);
      }
    }
  }
  currResultIndex=destIndex;
  if (currResultIndex == -1 || currResultIndex == countOfResult)   currResultObject=null;
}",0.4686468646864686
69610,"/** 
 * @param outResults
 * @param defn
 * @param session
 * @param scope
 * @param context
 * @throws DataException 
 */
public CubeQueryExecutor(IBaseQueryResults outResults,ICubeQueryDefinition defn,DataEngineSession session,Scriptable scope,DataEngineContext context) throws DataException {
  this.defn=defn;
  this.scope=scope;
  this.context=context;
  this.session=session;
  this.outResults=outResults;
  this.dimensionFilterEvalHelpers=new ArrayList<IJSFilterHelper>();
  this.aggrMeasureFilterEvalHelpers=new ArrayList<IAggrMeasureFilterEvalHelper>();
  this.advancedFacttableBasedFilterEvalHelper=new ArrayList<IJSFacttableFilterEvalHelper>();
  populateFilterHelpers();
}","/** 
 * @param outResults
 * @param defn
 * @param session
 * @param scope
 * @param context
 * @throws DataException 
 */
public CubeQueryExecutor(IBaseQueryResults outResults,ICubeQueryDefinition defn,DataEngineSession session,Scriptable scope,DataEngineContext context) throws DataException {
  this.defn=defn;
  this.scope=scope;
  this.context=context;
  this.session=session;
  TempPathManager.setTempPath(session.getTempDir());
  this.outResults=outResults;
  this.dimensionFilterEvalHelpers=new ArrayList<IJSFilterHelper>();
  this.aggrMeasureFilterEvalHelpers=new ArrayList<IAggrMeasureFilterEvalHelper>();
  this.advancedFacttableBasedFilterEvalHelper=new ArrayList<IJSFacttableFilterEvalHelper>();
  populateFilterHelpers();
}",0.9627023223082336
69611,"/** 
 * Computes the size of the legend. Note the computation relies on the title size, so the title block must be layouted first before this.
 * @param lg
 * @param sea
 * @throws ChartException
 */
public final Size compute(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc) throws ChartException {
  final Legend lg=cm.getLegend();
  LegendData lgData=new LegendData(xs,cm,seda,rtc);
  initAvailableSize(lgData);
  boolean bMinSliceDefined=false;
  if (cm instanceof ChartWithoutAxes) {
    bMinSliceDefined=((ChartWithoutAxes)cm).isSetMinSlice();
    lgData.sMinSliceLabel=((ChartWithoutAxes)cm).getMinSliceLabel();
    if (lgData.sMinSliceLabel == null || lgData.sMinSliceLabel.length() == 0) {
      lgData.sMinSliceLabel=IConstants.UNDEFINED_STRING;
    }
 else {
      lgData.sMinSliceLabel=rtc.externalizedMessage(lgData.sMinSliceLabel);
    }
  }
  if (bMinSliceDefined && lgData.bPaletteByCategory && cm instanceof ChartWithoutAxes) {
    calculateExtraLegend(cm,rtc,lgData);
  }
  Size titleSize=getTitleSize(lgData);
  double[] size=null;
  Boolean bDataEmpty=rtc.getState(RunTimeContext.StateKey.DATA_EMPTY_KEY);
  if (bDataEmpty == null) {
    bDataEmpty=false;
  }
  if (!bDataEmpty) {
    ContentProvider cProvider=ContentProvider.newInstance(lgData);
    ContentPlacer cPlacer=ContentPlacer.newInstance(lgData);
    LegendItemHints lih;
    while ((lih=cProvider.nextContent()) != null) {
      if (!cPlacer.placeContent(lih)) {
        break;
      }
    }
    cPlacer.finishPlacing();
    size=cPlacer.getSize();
  }
  if (size == null) {
    size=new double[]{0,0};
  }
  double dWidth=size[0], dHeight=size[1];
  if (titleSize != null) {
    int iTitlePos=lgData.lg.getTitlePosition().getValue();
    if (iTitlePos == Position.ABOVE || iTitlePos == Position.BELOW) {
      dWidth=Math.max(dWidth,titleSize.getWidth());
      dHeight=dHeight + titleSize.getHeight();
    }
 else {
      dWidth=dWidth + titleSize.getWidth();
      dHeight=Math.max(dHeight,titleSize.getHeight());
    }
  }
  if (rtc != null) {
    List<LegendItemHints> legendItems=lgData.legendItems;
    LegendItemHints[] liha=legendItems.toArray(new LegendItemHints[legendItems.size()]);
    LegendLayoutHints lilh=new LegendLayoutHints(SizeImpl.create(dWidth,dHeight),titleSize,lgData.laTitle,lgData.bMinSliceApplied,lgData.sMinSliceLabel,liha);
    rtc.setLegendLayoutHints(lilh);
  }
  sz=SizeImpl.create(dWidth,dHeight);
  return sz;
}","/** 
 * Computes the size of the legend. Note the computation relies on the title size, so the title block must be layouted first before this.
 * @param lg
 * @param sea
 * @throws ChartException
 */
public final Size compute(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc) throws ChartException {
  LegendData lgData=new LegendData(xs,cm,seda,rtc);
  initAvailableSize(lgData);
  boolean bMinSliceDefined=false;
  if (cm instanceof ChartWithoutAxes) {
    bMinSliceDefined=((ChartWithoutAxes)cm).isSetMinSlice();
    lgData.sMinSliceLabel=((ChartWithoutAxes)cm).getMinSliceLabel();
    if (lgData.sMinSliceLabel == null || lgData.sMinSliceLabel.length() == 0) {
      lgData.sMinSliceLabel=IConstants.UNDEFINED_STRING;
    }
 else {
      lgData.sMinSliceLabel=rtc.externalizedMessage(lgData.sMinSliceLabel);
    }
  }
  if (bMinSliceDefined && lgData.bPaletteByCategory && cm instanceof ChartWithoutAxes) {
    calculateExtraLegend(cm,rtc,lgData);
  }
  Size titleSize=getTitleSize(lgData);
  double[] size=null;
  Boolean bDataEmpty=rtc.getState(RunTimeContext.StateKey.DATA_EMPTY_KEY);
  if (bDataEmpty == null) {
    bDataEmpty=false;
  }
  if (!bDataEmpty) {
    ContentProvider cProvider=ContentProvider.newInstance(lgData);
    ContentPlacer cPlacer=ContentPlacer.newInstance(lgData);
    LegendItemHints lih;
    while ((lih=cProvider.nextContent()) != null) {
      if (!cPlacer.placeContent(lih)) {
        break;
      }
    }
    cPlacer.finishPlacing();
    size=cPlacer.getSize();
  }
  if (size == null) {
    size=new double[]{0,0};
  }
  double dWidth=size[0], dHeight=size[1];
  if (titleSize != null) {
    int iTitlePos=lgData.lg.getTitlePosition().getValue();
    if (iTitlePos == Position.ABOVE || iTitlePos == Position.BELOW) {
      dWidth=Math.max(dWidth,titleSize.getWidth());
      dHeight=dHeight + titleSize.getHeight();
    }
 else {
      dWidth=dWidth + titleSize.getWidth();
      dHeight=Math.max(dHeight,titleSize.getHeight());
    }
  }
  if (rtc != null) {
    List<LegendItemHints> legendItems=lgData.legendItems;
    LegendItemHints[] liha=legendItems.toArray(new LegendItemHints[legendItems.size()]);
    LegendLayoutHints lilh=new LegendLayoutHints(SizeImpl.create(dWidth,dHeight),titleSize,lgData.laTitle,lgData.bMinSliceApplied,lgData.sMinSliceLabel,liha);
    rtc.setLegendLayoutHints(lilh);
  }
  sz=SizeImpl.create(dWidth,dHeight);
  return sz;
}",0.9930127414714344
69612,"protected String format(Object oText) throws ChartException {
  DecimalFormat df=null;
  if (fs == null && oText instanceof Number) {
    String sPattern=ValueFormatter.getNumericPattern(((Number)oText).doubleValue());
    df=dfCache.get(sPattern);
  }
  try {
    return ValueFormatter.format(oText,fs,lgData.rtc.getULocale(),df);
  }
 catch (  ChartException e) {
    return oText.toString();
  }
}","@Override protected String format(Object oText) throws ChartException {
  if (defaultDateFormat != null && fs == null && oText instanceof Calendar) {
    return ValueFormatter.format(oText,fs,lgData.rtc.getULocale(),defaultDateFormat);
  }
 else {
    return super.format(oText);
  }
}",0.5635036496350365
69613,"protected CategoryContentProvider(LegendData lgData) throws ChartException {
  super(lgData);
  sdBase=ChartUtil.getBaseSeriesDefinitions(lgData.cm).get(0);
  seBase=sdBase.getRunTimeSeries().get(0);
  dsiBase=createDataSetIterator(seBase,lgData.cm);
  fs=lgData.cm.getLegend().getFormatSpecifier();
  boolean bDataReverse=bNeedInvert;
  if (lgData.cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)lgData.cm;
    bDataReverse=ChartUtil.XOR(bNeedInvert,cwa.isReverseCategory());
  }
  dsiBase.reverse(bDataReverse);
}","protected CategoryContentProvider(LegendData lgData) throws ChartException {
  super(lgData);
  sdBase=ChartUtil.getBaseSeriesDefinitions(lgData.cm).get(0);
  seBase=sdBase.getRunTimeSeries().get(0);
  dsiBase=createDataSetIterator(seBase,lgData.cm);
  fs=lgData.cm.getLegend().getFormatSpecifier();
  int iDateTimeUnit=ChartUtil.computeDateTimeCategoryUnit(lgData.cm,dsiBase);
  if (iDateTimeUnit != IConstants.UNDEFINED) {
    defaultDateFormat=DateFormatWrapperFactory.getPreferredDateFormat(iDateTimeUnit,lgData.rtc.getULocale());
  }
  boolean bDataReverse=bNeedInvert;
  if (lgData.cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)lgData.cm;
    bDataReverse=ChartUtil.XOR(bNeedInvert,cwa.isReverseCategory());
  }
  dsiBase.reverse(bDataReverse);
}",0.8174178762414056
69614,"/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOrigin
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,AxisOrigin axisOrigin,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? Integer.valueOf(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if (scModel.isSetFactor() && (iType & LINEAR) == LINEAR && !ax.isCategoryScale()) {
    double factor=scModel.getFactor() * 72 / xs.getDpiResolution();
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (oMinimum != null && oMinimum instanceof NumberDataElement) {
      dMinValue=((NumberDataElement)oMinimum).getValue();
    }
    double length=Math.abs(dEnd - dStart);
    double valueLength=length * factor;
    dMaxValue=dMinValue + valueLength;
    double dStep=1;
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    ScaleInfo info=new ScaleInfo(iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).dPrecision(dPrecision).bStepFixed(true).dsiData(dsi).dFactor(factor);
    sc=new AutoScale(info);
    sc.setMinimum(Double.valueOf(0));
    sc.setMaximum(Double.valueOf(0));
    sc.setStep(new Double(dStep));
    sc.setStepNumber(oStepNumber);
    setStepToScale(sc,oStep,null,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.setMinimum(oMinValue);
    sc.setMaximum(oMaxValue);
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    sc.setData(dsi);
    return sc;
  }
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    ScaleInfo info=new ScaleInfo(iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent);
    sc=new AutoScale(info);
    sc.setData(dsi);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    ScaleInfo info=new ScaleInfo(iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).dPrecision(dPrecision);
    sc=new AutoScale(info);
    sc.setMaximum(Double.valueOf(0));
    sc.setMinimum(Double.valueOf(0));
    sc.setStep(new Double(dStep));
    sc.setStepNumber(oStepNumber);
    sc.setData(dsi);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    ScaleInfo info=new ScaleInfo(iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent);
    sc=new AutoScale(info);
    sc.setMaximum(Double.valueOf(0));
    sc.setMinimum(Double.valueOf(0));
    sc.setStep(new Double(10));
    sc.setStepNumber(oStepNumber);
    sc.setData(dsi);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.info.bStepFixed(true);
      sc.info.bMaximumFixed(true);
      sc.info.bMinimumFixed(true);
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    ScaleInfo info=new ScaleInfo(DATE_TIME,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).iMinUnit(oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc));
    sc=new AutoScale(info);
    sc.setMaximum(cdtMaxAxis);
    sc.setMinimum(cdtMinAxis);
    sc.setStep(Integer.valueOf(1));
    sc.setStepNumber(oStepNumber);
    sc.context.setUnit(Integer.valueOf(iUnit));
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.setMinimum(((DateTimeDataElement)oMinimum).getValueAsCDateTime());
        sc.info.oMinimumFixed(((DateTimeDataElement)oMinimum).getValueAsCDateTime());
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.info.bMinimumFixed(true);
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.setMaximum(((DateTimeDataElement)oMaximum).getValueAsCDateTime());
        sc.info.oMaximumFixed(((DateTimeDataElement)oMaximum).getValueAsCDateTime());
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMaximum(),ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.info.bMaximumFixed(true);
    }
    if (sc.info.bMaximumFixed && sc.info.bMinimumFixed) {
      if (((CDateTime)sc.getMinimum()).after(sc.getMaximum())) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMinimum(),sc.getMaximum()},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.info.bStepFixed || rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  sc.setData(dsi);
  return sc;
}","/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param axisOrigin
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,AxisOrigin axisOrigin,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent,PlotComputation plotComp) throws ChartException {
  final Scale scModel=ax.getModelAxis().getScale();
  final FormatSpecifier fs=ax.getFormatSpecifier();
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? Integer.valueOf(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if (scModel.isSetFactor() && (iType & LINEAR) == LINEAR && !ax.isCategoryScale()) {
    double factor=scModel.getFactor() * 72 / xs.getDpiResolution();
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (oMinimum != null && oMinimum instanceof NumberDataElement) {
      dMinValue=((NumberDataElement)oMinimum).getValue();
    }
    double length=Math.abs(dEnd - dStart);
    double valueLength=length * factor;
    dMaxValue=dMinValue + valueLength;
    double dStep=1;
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).dPrecision(dPrecision).bStepFixed(true).dsiData(dsi).dFactor(factor);
    sc=new AutoScale(info);
    sc.setMinimum(Double.valueOf(0));
    sc.setMaximum(Double.valueOf(0));
    sc.setStep(new Double(dStep));
    sc.setStepNumber(oStepNumber);
    setStepToScale(sc,oStep,null,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.setMinimum(oMinValue);
    sc.setMaximum(oMaxValue);
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    sc.setData(dsi);
    return sc;
  }
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent);
    sc=new AutoScale(info);
    sc.setData(dsi);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).dPrecision(dPrecision);
    sc=new AutoScale(info);
    sc.setMaximum(Double.valueOf(0));
    sc.setMinimum(Double.valueOf(0));
    sc.setStep(new Double(dStep));
    sc.setStepNumber(oStepNumber);
    sc.setData(dsi);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent);
    sc=new AutoScale(info);
    sc.setMaximum(Double.valueOf(0));
    sc.setMinimum(Double.valueOf(0));
    sc.setStep(new Double(10));
    sc.setStepNumber(oStepNumber);
    sc.setData(dsi);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.info.bStepFixed(true);
      sc.info.bMaximumFixed(true);
      sc.info.bMinimumFixed(true);
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    ScaleInfo info=new ScaleInfo(plotComp,DATE_TIME,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).iMinUnit(oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc));
    sc=new AutoScale(info);
    sc.setMaximum(cdtMaxAxis);
    sc.setMinimum(cdtMinAxis);
    sc.setStep(Integer.valueOf(1));
    sc.setStepNumber(oStepNumber);
    sc.context.setUnit(Integer.valueOf(iUnit));
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.setMinimum(((DateTimeDataElement)oMinimum).getValueAsCDateTime());
        sc.info.oMinimumFixed(((DateTimeDataElement)oMinimum).getValueAsCDateTime());
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.info.bMinimumFixed(true);
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.setMaximum(((DateTimeDataElement)oMaximum).getValueAsCDateTime());
        sc.info.oMaximumFixed(((DateTimeDataElement)oMaximum).getValueAsCDateTime());
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMaximum(),ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.info.bMaximumFixed(true);
    }
    if (sc.info.bMaximumFixed && sc.info.bMinimumFixed) {
      if (((CDateTime)sc.getMinimum()).after(sc.getMaximum())) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMinimum(),sc.getMaximum()},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.info.bStepFixed || rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  sc.setData(dsi);
  return sc;
}",0.9845421122994652
69615,"/** 
 * Calculates visibility for axis labels.
 * @param xs
 * @param la
 * @param iLabelLocation
 * @return
 * @throws ChartException
 */
final protected void checkTickLabelsVisibility(IDisplayServer xs,Label la,int iLabelLocation) throws ChartException {
  hmComputedLabelText=new HashMap<Integer,String>();
  boolean vis=la.isVisible();
  if (!vis && info.rtc.getSharedScale() != null) {
    vis=true;
  }
  boolean staggerEnabled=isAxisLabelStaggered();
  this.staggeredHelper=StaggeredHelper.createInstance(staggerEnabled,atcTickCoordinates.size(),info.iLabelShowingInterval);
  this.labelVisHelper=LabelVisibleHelper.createInstance(vis,isCategoryScale(),atcTickCoordinates.size(),info.iLabelShowingInterval);
  if (!vis || !isCategoryScale()) {
    return;
  }
  DataSetIterator dsi=getData();
  dsi.reset();
  final int iDateTimeUnit=(info.type == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
  dsi.reset();
  CateLabVisTester tester=this.createCateLabVisTester(xs,la,iLabelLocation);
  EllipsisHelper eHelper=new EllipsisHelper(tester,la.getEllipsis());
  int start_id=isTickBetweenCategories() ? 0 : 1;
  RotatedRectangle rrPrev[]=new RotatedRectangle[2];
  double dStep=Math.abs(atcTickCoordinates.getStep() * info.dZoomFactor);
  int indexStep=dStep > 1 ? 1 : (int)(1d / dStep);
  int iSkip=indexStep - 1;
  for (int i=start_id; i < atcTickCoordinates.size() - 1; i+=indexStep) {
    Object oValue=null;
    if (iSkip > 0) {
      if (dsi.skip(iSkip) < iSkip) {
        break;
      }
    }
    if (dsi.hasNext()) {
      oValue=dsi.next();
    }
 else {
      break;
    }
    if (labelVisHelper.shouldTickLabelVisible(i)) {
      double x=0, y=0;
      String sText=formatCategoryValue(info.type,oValue,iDateTimeUnit);
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=this.atcTickCoordinates.getCoordinate(i) * info.dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=this.atcTickCoordinates.getCoordinate(i) * info.dZoomFactor;
      }
      la.getCaption().setValue(sText);
      RotatedRectangle rrCurr=null;
      int arrayIndex=isAxisLabelStaggered() && isTickLabelStaggered(i) ? 1 : 0;
      boolean bVis;
      if (rrPrev[arrayIndex] == null) {
        rrCurr=info.cComp.computePolygon(xs,iLabelLocation,la,x,y,null);
        bVis=true;
      }
 else {
        tester.setFPara(rrPrev[arrayIndex],x,y);
        bVis=eHelper.checkLabelEllipsis(sText,null);
        rrCurr=tester.getCurrentRR();
      }
      if (bVis) {
        labelVisHelper.addVisible(i);
        rrPrev[arrayIndex]=rrCurr;
        hmComputedLabelText.put(i,la.getCaption().getValue());
      }
    }
  }
}","/** 
 * Calculates visibility for axis labels.
 * @param xs
 * @param la
 * @param iLabelLocation
 * @return
 * @throws ChartException
 */
final protected void checkTickLabelsVisibility(IDisplayServer xs,Label la,int iLabelLocation) throws ChartException {
  hmComputedLabelText=new HashMap<Integer,String>();
  boolean vis=la.isVisible();
  if (!vis && info.rtc.getSharedScale() != null) {
    vis=true;
  }
  boolean staggerEnabled=isAxisLabelStaggered();
  this.staggeredHelper=StaggeredHelper.createInstance(staggerEnabled,atcTickCoordinates.size(),info.iLabelShowingInterval);
  this.labelVisHelper=LabelVisibleHelper.createInstance(vis,isCategoryScale(),atcTickCoordinates.size(),info.iLabelShowingInterval);
  if (!vis || !isCategoryScale()) {
    return;
  }
  DataSetIterator dsi=getData();
  dsi.reset();
  int iDateTimeUnit=IConstants.UNDEFINED;
  if (info.type == IConstants.DATE_TIME) {
    iDateTimeUnit=ChartUtil.computeDateTimeCategoryUnit(info.plotComp.getModel(),dsi);
  }
  CateLabVisTester tester=this.createCateLabVisTester(xs,la,iLabelLocation);
  EllipsisHelper eHelper=new EllipsisHelper(tester,la.getEllipsis());
  int start_id=isTickBetweenCategories() ? 0 : 1;
  RotatedRectangle rrPrev[]=new RotatedRectangle[2];
  double dStep=Math.abs(atcTickCoordinates.getStep() * info.dZoomFactor);
  int indexStep=dStep > 1 ? 1 : (int)(1d / dStep);
  int iSkip=indexStep - 1;
  for (int i=start_id; i < atcTickCoordinates.size() - 1; i+=indexStep) {
    Object oValue=null;
    if (iSkip > 0) {
      if (dsi.skip(iSkip) < iSkip) {
        break;
      }
    }
    if (dsi.hasNext()) {
      oValue=dsi.next();
    }
 else {
      break;
    }
    if (labelVisHelper.shouldTickLabelVisible(i)) {
      double x=0, y=0;
      String sText=formatCategoryValue(info.type,oValue,iDateTimeUnit);
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=this.atcTickCoordinates.getCoordinate(i) * info.dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=this.atcTickCoordinates.getCoordinate(i) * info.dZoomFactor;
      }
      la.getCaption().setValue(sText);
      RotatedRectangle rrCurr=null;
      int arrayIndex=isAxisLabelStaggered() && isTickLabelStaggered(i) ? 1 : 0;
      boolean bVis;
      if (rrPrev[arrayIndex] == null) {
        rrCurr=info.cComp.computePolygon(xs,iLabelLocation,la,x,y,null);
        bVis=true;
      }
 else {
        tester.setFPara(rrPrev[arrayIndex],x,y);
        bVis=eHelper.checkLabelEllipsis(sText,null);
        rrCurr=tester.getCurrentRR();
      }
      if (bVis) {
        labelVisHelper.addVisible(i);
        rrPrev[arrayIndex]=rrCurr;
        hmComputedLabelText.put(i,la.getCaption().getValue());
      }
    }
  }
}",0.9661764705882352
69616,"public ScaleInfo(int iType,RunTimeContext rtc,FormatSpecifier fs,OneAxis ax,int iScaleDirection,boolean bExpandMinMax){
  this.type=iType;
  this.rtc=rtc;
  this.fs=fs;
  this.iScaleDirection=iScaleDirection;
  this.bExpandMinMax=bExpandMinMax;
  cacheNumFormat=new ChartUtil.CacheDecimalFormat(rtc.getULocale());
  cacheDateFormat=new ChartUtil.CacheDateFormat(rtc.getULocale());
  cComp=rtc.getState(StateKey.CHART_COMPUTATION_KEY);
  if (ax != null) {
    bAxisLabelStaggered=ax.isAxisLabelStaggered();
    iLabelShowingInterval=ax.getLableShowingInterval();
    bTickBetweenCategories=ax.isTickBwtweenCategories();
    bAlignZero=ax.getModelAxis().isAligned();
    bLabelWithinAxes=ax.getModelAxis().isLabelWithinAxes();
    bCategoryScale=(iType & TEXT) == TEXT || ax.isCategoryScale();
  }
 else {
    bAxisLabelStaggered=false;
    iLabelShowingInterval=0;
    bTickBetweenCategories=true;
    bAlignZero=false;
    bLabelWithinAxes=false;
    bCategoryScale=false;
  }
}","public ScaleInfo(PlotComputation plotComp,int iType,RunTimeContext rtc,FormatSpecifier fs,OneAxis ax,int iScaleDirection,boolean bExpandMinMax){
  this.plotComp=plotComp;
  this.oax=ax;
  this.type=iType;
  this.rtc=rtc;
  this.fs=fs;
  this.iScaleDirection=iScaleDirection;
  this.bExpandMinMax=bExpandMinMax;
  cacheNumFormat=new ChartUtil.CacheDecimalFormat(rtc.getULocale());
  cacheDateFormat=new ChartUtil.CacheDateFormat(rtc.getULocale());
  cComp=rtc.getState(StateKey.CHART_COMPUTATION_KEY);
  if (ax != null) {
    bAxisLabelStaggered=ax.isAxisLabelStaggered();
    iLabelShowingInterval=ax.getLableShowingInterval();
    bTickBetweenCategories=ax.isTickBwtweenCategories();
    bAlignZero=ax.getModelAxis().isAligned();
    bLabelWithinAxes=ax.getModelAxis().isLabelWithinAxes();
    bCategoryScale=(iType & TEXT) == TEXT || ax.isCategoryScale();
  }
 else {
    bAxisLabelStaggered=false;
    iLabelShowingInterval=0;
    bTickBetweenCategories=true;
    bAlignZero=false;
    bLabelWithinAxes=false;
    bCategoryScale=false;
  }
}",0.9673590504451038
69617,"private void edit(){
  int pos=table.getSelectionIndex();
  if (pos == -1) {
    table.setFocus();
    return;
  }
  CommandStack stack=getActionStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  if (!provider.doEditItem(pos)) {
    stack.rollback();
    return;
  }
  stack.commit();
  table.setSelection(pos);
}","private void edit(){
  int pos=table.getSelectionIndex();
  if (pos == -1) {
    table.setFocus();
    return;
  }
  CommandStack stack=getActionStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  if (!provider.doEditItem(pos)) {
    stack.rollback();
    return;
  }
  stack.commit();
  table.setSelection(pos);
  refresh();
}",0.9807976366322008
69618,"private void computeDateTimeMinMax(){
  int iStep=asInteger(oStep);
  CDateTime cdtMinValue=bMinimumFixed ? asDateTime(oMinFixed) : asDateTime(oMinAuto);
  CDateTime cdtMaxValue=bMaximumFixed ? asDateTime(oMaxFixed) : asDateTime(oMaxAuto);
  int iUnit=((Integer)oUnit).intValue();
  if (bMaximumFixed && !bMinimumFixed) {
    oMax=cdtMaxValue;
    double diff=CDateTime.computeDifference(cdtMaxValue,cdtMinValue,iUnit) / iStep;
    int count=(int)diff * iStep;
    if (!ChartUtil.mathEqual(diff,Math.floor(diff))) {
      count+=iStep;
    }
    CDateTime cdtMinValue_new=(CDateTime)cdtMaxValue.clone();
    cdtMinValue_new.add(iUnit,-count);
    oMin=cdtMinValue_new;
  }
 else {
    if (bExpandMinmax) {
      if (!bMinimumFixed) {
        cdtMinValue=cdtMinValue.backward(iUnit,iStep);
        cdtMinValue.clearBelow(iUnit);
        if (!bMaximumFixed) {
          cdtMaxValue=cdtMaxValue.forward(iUnit,1);
          cdtMaxValue.clearBelow(iUnit);
        }
      }
    }
 else {
      cdtMinValue.clearBelow(iUnit);
      long lMax0=cdtMaxValue.getTimeInMillis();
      cdtMaxValue.clearBelow(iUnit);
      if (lMax0 > cdtMaxValue.getTimeInMillis()) {
        cdtMaxValue=cdtMaxValue.forward(iUnit,1);
      }
    }
    oMin=cdtMinValue;
    double diff=CDateTime.computeDifference(cdtMaxValue,cdtMinValue,iUnit) / iStep;
    int count=(int)diff * iStep;
    if (!ChartUtil.mathEqual(diff,Math.floor(diff))) {
      count+=iStep;
    }
    CDateTime cdtMaxValue_new=(CDateTime)cdtMinValue.clone();
    cdtMaxValue_new.add(iUnit,count);
    oMax=cdtMaxValue_new;
  }
  oMinAuto=null;
  oMaxAuto=null;
}","private void computeDateTimeMinMax(){
  int iStep=asInteger(oStep);
  CDateTime cdtMinValue=bMinimumFixed ? asDateTime(oMinFixed) : asDateTime(oMinAuto);
  CDateTime cdtMaxValue=bMaximumFixed ? asDateTime(oMaxFixed) : asDateTime(oMaxAuto);
  int iUnit=((Integer)oUnit).intValue();
  if (bMaximumFixed && !bMinimumFixed) {
    oMax=cdtMaxValue;
    double diff=CDateTime.computeDifference(cdtMaxValue,cdtMinValue,iUnit) / iStep;
    int count=(int)diff * iStep;
    if (!ChartUtil.mathEqual(diff,Math.floor(diff))) {
      count+=iStep;
    }
    CDateTime cdtMinValue_new=(CDateTime)cdtMaxValue.clone();
    cdtMinValue_new.add(iUnit,-count);
    oMin=cdtMinValue_new;
  }
 else {
    if (bExpandMinmax) {
      if (!bMinimumFixed) {
        cdtMinValue=cdtMinValue.backward(iUnit,iStep);
        cdtMinValue.clearBelow(iUnit);
        if (!bMaximumFixed) {
          cdtMaxValue=cdtMaxValue.forward(iUnit,1);
          cdtMaxValue.clearBelow(iUnit);
        }
      }
    }
 else {
      cdtMinValue.clearBelow(iUnit);
    }
    oMin=cdtMinValue;
    double diff=CDateTime.computeDifference(cdtMaxValue,cdtMinValue,iUnit) / iStep;
    int count=(int)diff * iStep;
    if (!ChartUtil.mathEqual(diff,Math.floor(diff))) {
      count+=iStep;
    }
    CDateTime cdtMaxValue_new=(CDateTime)cdtMinValue.clone();
    cdtMaxValue_new.add(iUnit,count);
    oMax=cdtMaxValue_new;
  }
  oMinAuto=null;
  oMaxAuto=null;
}",0.9356763925729444
69619,"/** 
 * retrieve the binding meta data information.
 * @return
 * @throws DataException
 */
public IResultMetaData getBindingMetaData() throws DataException {
  if (bindingMetaData == null) {
    ExprMetaInfo[] metaInfo=getRDLoad(subQueryName,queryResultID).loadExprMetaInfo();
    bindingMetaData=new BindingMetaData(metaInfo);
  }
  return bindingMetaData;
}","/** 
 * retrieve the binding meta data information.
 * @return
 * @throws DataException
 */
public IResultMetaData getBindingMetaData() throws DataException {
  if (bindingMetaData == null) {
    ExprMetaInfo[] metaInfo=getRDLoad(subQueryName,queryResultID).loadExprMetaInfo();
    if (ExprMetaUtil.isBasedOnRD(metaInfo)) {
      ExprMetaInfo[] infos=new ExprMetaInfo[metaInfo.length - 1];
      for (int i=0, k=0; i < infos.length; i++, k++) {
        if (isInternalMetaInfo(metaInfo[k]))         i--;
 else         infos[i]=metaInfo[k];
      }
      bindingMetaData=new BindingMetaData(infos);
    }
 else {
      bindingMetaData=new BindingMetaData(metaInfo);
    }
  }
  return bindingMetaData;
}",0.6409048067860509
69620,"private final void showRightValue(IPrimitiveRenderer renderer,Location location,Label label,int labelPosition,boolean bShadow){
  IDeviceRenderer idr=(IDeviceRenderer)renderer;
  IChartComputation cComp=idr.getChartComputation();
  Graphics2D g2d=(Graphics2D)idr.getGraphicsContext();
  FontDefinition fontDef=label.getCaption().getFont();
  double dAngleInDegrees=fontDef.getRotation();
  if (bShadow) {
    bShadow=label.getShadowColor() != null;
  }
  Color clrText=(Color)_sxs.getColor(label.getCaption().getColor());
  Color clrBackground=null;
  if (label.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)label.getBackground());
  }
  final ITextMetrics textMetrics=cComp.getTextMetrics(_sxs,label,0);
  AffineTransform afTransform=new AffineTransform(g2d.getTransform());
  location=adjustTextPosition(labelPosition,location,textMetrics,dAngleInDegrees);
  double dX=location.getX(), dY=location.getY();
  dY+=1;
  try {
    final double dFullWidth=textMetrics.getFullWidth();
    final double dHeight=textMetrics.getHeight();
    final double dDescent=textMetrics.getDescent();
    final double dFullHeight=textMetrics.getFullHeight();
    double dXOffset=0, dWidth=0;
    final int lineCount=textMetrics.getLineCount();
    final Insets insets=label.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
    final double shadowness=3 * _sxs.getDpiResolution() / 72d;
    final boolean bEmptyText=""String_Node_Str"".equals(label.getCaption().getValue());
    ChartTextLayout textLayout;
    double dYDiff=dY - dHeight;
    final HorizontalAlignment hAlign=label.getCaption().getFont().getAlignment().getHorizontalAlignment();
    final boolean bRightAligned=hAlign.getValue() == HorizontalAlignment.RIGHT;
    final boolean bCenterAligned=hAlign.getValue() == HorizontalAlignment.CENTER;
    double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    int iRotateX=(int)dX;
    int iRotateY=(int)(dY + dHeight / 2);
    dY+=dHeight / 2;
    if (dAngleInDegrees == 0) {
      double dYHalfOffset=(dFullHeight + dHeight) / 2d;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,(dY - dYHalfOffset) + shadowness + dFullHeight),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)(dY - dYHalfOffset + insets.getTop() + dHeight * (i + 1) - dDescent));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
      double dDeltaX=dHeight * Math.sin(dAngleInRadians);
      double dDeltaY=dHeight * Math.cos(dAngleInRadians) - dHeight / 2;
      dX-=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,iRotateX - dDeltaX,iRotateY + dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dYDiff) + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,(dYDiff) + shadowness + dFullHeight),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,(dYDiff) + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,(dYDiff),dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)((dY - dDescent + dHeight * i) + insets.getTop()));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
      double dDeltaY=-dHeight / 2;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,iRotateX,iRotateY + dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dFullHeight) + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,(dY - dFullHeight) + shadowness + dFullHeight),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,(dY - dFullHeight) + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFullHeight,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)((dY - dDescent - dHeight * (lineCount - i - 1)) - insets.getBottom()));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees == 90) {
      double dDeltaX=dHeight;
      double dDeltaY=(dFullWidth - dHeight) / 2;
      dX+=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dYDiff) + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,(dYDiff) + shadowness + dFullHeight),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,(dYDiff) + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dYDiff,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)((dY - dDescent + dHeight * i) + insets.getTop()));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees == -90) {
      double dDeltaX=0;
      double dDeltaY=(dFullWidth + dHeight) / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dYDiff) + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,(dYDiff) + shadowness + dFullHeight),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,(dYDiff) + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dYDiff,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)((dY - dDescent + dHeight * i) + insets.getTop()));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
  }
  finally {
    g2d.setTransform(afTransform);
    cComp.recycleTextMetrics(textMetrics);
  }
}","private final void showRightValue(IPrimitiveRenderer renderer,Location location,Label label,int labelPosition,boolean bShadow){
  IDeviceRenderer idr=(IDeviceRenderer)renderer;
  IChartComputation cComp=idr.getChartComputation();
  Graphics2D g2d=(Graphics2D)idr.getGraphicsContext();
  FontDefinition fontDef=label.getCaption().getFont();
  double dAngleInDegrees=fontDef.getRotation();
  if (bShadow) {
    bShadow=label.getShadowColor() != null;
  }
  Color clrText=(Color)_sxs.getColor(label.getCaption().getColor());
  Color clrBackground=null;
  if (label.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)label.getBackground());
  }
  final ITextMetrics textMetrics=cComp.getTextMetrics(_sxs,label,0);
  AffineTransform afTransform=new AffineTransform(g2d.getTransform());
  location=adjustTextPosition(labelPosition,location,textMetrics,dAngleInDegrees);
  double dX=location.getX(), dY=location.getY();
  dY+=1;
  try {
    final double dFullWidth=textMetrics.getFullWidth();
    final double dHeight=textMetrics.getHeight();
    final double dDescent=textMetrics.getDescent();
    final double dFullHeight=textMetrics.getFullHeight();
    double dXOffset=0, dWidth=0;
    final int lineCount=textMetrics.getLineCount();
    final Insets insets=label.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
    final double shadowness=3 * _sxs.getDpiResolution() / 72d;
    final boolean bEmptyText=""String_Node_Str"".equals(label.getCaption().getValue());
    ChartTextLayout textLayout;
    double dYDiff;
    final HorizontalAlignment hAlign=label.getCaption().getFont().getAlignment().getHorizontalAlignment();
    final boolean bRightAligned=hAlign.getValue() == HorizontalAlignment.RIGHT;
    final boolean bCenterAligned=hAlign.getValue() == HorizontalAlignment.CENTER;
    double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    int iRotateX=(int)dX;
    int iRotateY=(int)(dY + dHeight / 2);
    dY+=dHeight / 2;
    if (dAngleInDegrees == 0) {
      double dYHalfOffset=(dFullHeight + dHeight) / 2d;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,(dY - dYHalfOffset) + shadowness + dFullHeight),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)(dY - dYHalfOffset + insets.getTop() + dHeight * (i + 1) - dDescent));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
      double dDeltaX=dHeight * Math.sin(dAngleInRadians);
      double dDeltaY=dHeight * Math.cos(dAngleInRadians) - dHeight / 2;
      dX-=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,iRotateX - dDeltaX,iRotateY + dDeltaY);
      dYDiff=dY - dFullHeight;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,dYDiff + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,dY + shadowness),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,dYDiff + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dYDiff,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)((dY - dDescent + dHeight * i) + insets.getTop()));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
      double dDeltaY=-dHeight / 2;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,iRotateX,iRotateY + dDeltaY);
      dYDiff=dY - dFullHeight;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,dYDiff + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,dY + shadowness),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,dYDiff + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dFullHeight,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)((dY - dDescent - dHeight * (lineCount - i - 1)) - insets.getBottom()));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees == 90) {
      double dDeltaX=dHeight;
      double dDeltaY=(dFullWidth - dHeight) / 2;
      dX+=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      dYDiff=dY - dFullHeight;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,dYDiff + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,dY + shadowness),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,dYDiff + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dYDiff,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)((dY - dDescent + dHeight * i) + insets.getTop()));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees == -90) {
      double dDeltaX=0;
      double dDeltaY=(dFullWidth + dHeight) / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      dYDiff=dY - dFullHeight;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,dYDiff + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,dY + shadowness),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,dYDiff + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dYDiff,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)((dY - dDescent + dHeight * i) + insets.getTop()));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
  }
  finally {
    g2d.setTransform(afTransform);
    cComp.recycleTextMetrics(textMetrics);
  }
}",0.9862383074587394
69621,"private final void showLeftValue(IPrimitiveRenderer renderer,Location location,Label label,int labelPosition,boolean bShadow){
  IDeviceRenderer idr=(IDeviceRenderer)renderer;
  IChartComputation cComp=idr.getChartComputation();
  Graphics2D g2d=(Graphics2D)idr.getGraphicsContext();
  FontDefinition fontDef=label.getCaption().getFont();
  double dAngleInDegrees=fontDef.getRotation();
  if (bShadow) {
    bShadow=label.getShadowColor() != null;
  }
  Color clrText=(Color)_sxs.getColor(label.getCaption().getColor());
  Color clrBackground=null;
  if (label.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)label.getBackground());
  }
  final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final double dSineTheta=(Math.sin(dAngleInRadians));
  final double dCosTheta=(Math.cos(dAngleInRadians));
  final ITextMetrics textMetrics=cComp.getTextMetrics(_sxs,label,0);
  AffineTransform afTransform=new AffineTransform(g2d.getTransform());
  location=adjustTextPosition(labelPosition,location,textMetrics,dAngleInDegrees);
  double dX=location.getX(), dY=location.getY();
  try {
    final double dFullWidth=textMetrics.getFullWidth();
    final double dHeight=textMetrics.getHeight();
    final double dDescent=textMetrics.getDescent();
    final double dFullHeight=textMetrics.getFullHeight();
    double dXOffset=0, dWidth=0;
    final int lineCount=textMetrics.getLineCount();
    final Insets insets=label.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
    final double shadowness=3 * _sxs.getDpiResolution() / 72d;
    final boolean bEmptyText=""String_Node_Str"".equals(label.getCaption().getValue());
    ChartTextLayout textLayout;
    double dYDiff=dY - dFullHeight;
    final HorizontalAlignment hAlign=label.getCaption().getFont().getAlignment().getHorizontalAlignment();
    final boolean bRightAligned=hAlign.getValue() == HorizontalAlignment.RIGHT;
    final boolean bCenterAligned=hAlign.getValue() == HorizontalAlignment.CENTER;
    double dRotateX=(dX - dFullWidth);
    double dRotateY=(dY + dHeight / 2);
    dX-=dFullWidth;
    dY+=dHeight / 2;
    if (dAngleInDegrees == 0) {
      double dYHalfOffset=(dFullHeight + dHeight) / 2d;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,(dY - dYHalfOffset) + shadowness + dFullHeight),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)(dY - dYHalfOffset + insets.getTop() + dHeight * (i + 1) - dDescent));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
      double dDeltaX=dFullWidth - dFullWidth * dCosTheta;
      double dDeltaY=dFullWidth * dSineTheta + dHeight / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dYDiff) + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,(dYDiff) + shadowness + dFullHeight),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,(dYDiff) + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dYDiff,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < textMetrics.getLineCount(); i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(lineCount - i - 1);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)(((dY - dDescent) - (dHeight * i)) - insets.getBottom()));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
      double dDeltaX=dFullWidth - dFullWidth * dCosTheta - dHeight * dSineTheta;
      double dDeltaY=dFullWidth * dSineTheta + dHeight / 2 - dHeight * dCosTheta;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dHeight) + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,(dY - dHeight) + shadowness + dFullHeight),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,(dY - dHeight) + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dHeight,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)(((dY - dDescent) + (dHeight * i)) + insets.getTop()));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees == 90) {
      double dDeltaX=dFullWidth;
      double dDeltaY=(dFullWidth - dHeight) / 2;
      dX+=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dYDiff) + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,(dYDiff) + shadowness + dFullHeight),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,(dYDiff) + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dYDiff,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)(((dY - dDescent) - (dHeight * (lineCount - i - 1))) + insets.getTop()));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees == -90) {
      double dDeltaX=dFullWidth - dHeight;
      double dDeltaY=(dFullWidth + dHeight) / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dYDiff) + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,(dYDiff) + shadowness + dFullHeight),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,(dYDiff) + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dHeight,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)(((dY - dDescent) + (dHeight * i)) + insets.getTop()));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
  }
  finally {
    g2d.setTransform(afTransform);
    cComp.recycleTextMetrics(textMetrics);
  }
}","private final void showLeftValue(IPrimitiveRenderer renderer,Location location,Label label,int labelPosition,boolean bShadow){
  IDeviceRenderer idr=(IDeviceRenderer)renderer;
  IChartComputation cComp=idr.getChartComputation();
  Graphics2D g2d=(Graphics2D)idr.getGraphicsContext();
  FontDefinition fontDef=label.getCaption().getFont();
  double dAngleInDegrees=fontDef.getRotation();
  if (bShadow) {
    bShadow=label.getShadowColor() != null;
  }
  Color clrText=(Color)_sxs.getColor(label.getCaption().getColor());
  Color clrBackground=null;
  if (label.getBackground() != null) {
    clrBackground=(Color)_sxs.getColor((ColorDefinition)label.getBackground());
  }
  final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
  final double dSineTheta=(Math.sin(dAngleInRadians));
  final double dCosTheta=(Math.cos(dAngleInRadians));
  final ITextMetrics textMetrics=cComp.getTextMetrics(_sxs,label,0);
  AffineTransform afTransform=new AffineTransform(g2d.getTransform());
  location=adjustTextPosition(labelPosition,location,textMetrics,dAngleInDegrees);
  double dX=location.getX(), dY=location.getY();
  try {
    final double dFullWidth=textMetrics.getFullWidth();
    final double dHeight=textMetrics.getHeight();
    final double dDescent=textMetrics.getDescent();
    final double dFullHeight=textMetrics.getFullHeight();
    double dXOffset=0, dWidth=0;
    final int lineCount=textMetrics.getLineCount();
    final Insets insets=label.getInsets().scaledInstance(_sxs.getDpiResolution() / 72d);
    final double shadowness=3 * _sxs.getDpiResolution() / 72d;
    final boolean bEmptyText=""String_Node_Str"".equals(label.getCaption().getValue());
    ChartTextLayout textLayout;
    double dYDiff;
    final HorizontalAlignment hAlign=label.getCaption().getFont().getAlignment().getHorizontalAlignment();
    final boolean bRightAligned=hAlign.getValue() == HorizontalAlignment.RIGHT;
    final boolean bCenterAligned=hAlign.getValue() == HorizontalAlignment.CENTER;
    double dRotateX=(dX - dFullWidth);
    double dRotateY=(dY + dHeight / 2);
    dX-=dFullWidth;
    dY+=dHeight / 2;
    if (dAngleInDegrees == 0) {
      double dYHalfOffset=(dFullHeight + dHeight) / 2d;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,(dY - dYHalfOffset) + shadowness + dFullHeight),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,(dY - dYHalfOffset) + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dY - dYHalfOffset,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)(dY - dYHalfOffset + insets.getTop() + dHeight * (i + 1) - dDescent));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees > 0 && dAngleInDegrees < 90) {
      double dDeltaX=dFullWidth - dFullWidth * dCosTheta;
      double dDeltaY=dFullWidth * dSineTheta + dHeight / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
      dYDiff=dY - dFullHeight;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,dYDiff + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,dY + shadowness),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,dYDiff + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dYDiff,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < textMetrics.getLineCount(); i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(lineCount - i - 1);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)(((dY - dDescent) - (dHeight * i)) - insets.getBottom()));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees < 0 && dAngleInDegrees > -90) {
      double dDeltaX=dFullWidth - dFullWidth * dCosTheta - dHeight * dSineTheta;
      double dDeltaY=dFullWidth * dSineTheta + dHeight / 2 - dHeight * dCosTheta;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dRotateX + dDeltaX,dRotateY - dDeltaY);
      dYDiff=dY - dFullHeight;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,dYDiff + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,dY + shadowness),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,dYDiff + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dYDiff,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)(((dY - dDescent) + (dHeight * i)) + insets.getTop()));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees == 90) {
      double dDeltaX=dFullWidth;
      double dDeltaY=(dFullWidth - dHeight) / 2;
      dX+=dDeltaX;
      dY+=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      dYDiff=dY - dFullHeight;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,dYDiff + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,dY + shadowness),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,dYDiff + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dYDiff,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)(((dY - dDescent) - (dHeight * (lineCount - i - 1))) + insets.getTop()));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
 else     if (dAngleInDegrees == -90) {
      double dDeltaX=dFullWidth - dHeight;
      double dDeltaY=(dFullWidth + dHeight) / 2;
      dX+=dDeltaX;
      dY-=dDeltaY;
      g2d.rotate(dAngleInRadians,dX,dY);
      dYDiff=dY - dFullHeight;
      if (bShadow) {
        g2d.setPaint(new GradientPaint(new Point2D.Double(dX + shadowness,dYDiff + shadowness),(Color)_sxs.getColor(label.getShadowColor()),new Point2D.Double(dX + shadowness + dFullWidth,dY + shadowness),(Color)_sxs.getColor(label.getShadowColor().translucent())));
        fillShadow(g2d,new Rectangle2D.Double(dX + shadowness,dYDiff + shadowness,dFullWidth,dFullHeight));
      }
 else {
        final Rectangle2D.Double r2d=new Rectangle2D.Double(dX,dYDiff,dFullWidth,dFullHeight);
        if (clrBackground != null) {
          g2d.setColor(clrBackground);
          g2d.fill(r2d);
        }
        if (!bEmptyText) {
          g2d.setColor(clrText);
          for (int i=0; i < lineCount; i++) {
            textLayout=((ChartTextMetrics)textMetrics).getLayout(i);
            if (bRightAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + dFullWidth - dWidth - insets.getRight();
            }
 else             if (bCenterAligned) {
              dWidth=textLayout.getBounds().getWidth();
              dXOffset=-insets.getLeft() + (dFullWidth - dWidth) / 2;
            }
            textLayout.draw(g2d,(float)(dX + dXOffset + insets.getLeft()),(float)(((dY - dDescent) + (dHeight * i)) + insets.getTop()));
          }
        }
        renderOutline(renderer,label.getOutline(),r2d);
      }
    }
  }
  finally {
    g2d.setTransform(afTransform);
    cComp.recycleTextMetrics(textMetrics);
  }
}",0.9858300554476092
69622,"/** 
 * Look for the Driver from drivers directory if it not in plugin class path
 * @param className
 * @return Driver instance
 * @throws OdaException 
 */
private Driver findDriver(String className,Collection<String> driverClassPath,boolean refreshClassLoader) throws OdaException {
  Class driverClass=null;
  try {
    driverClass=Class.forName(className);
    logger.info(""String_Node_Str"" + className);
  }
 catch (  ClassNotFoundException e) {
    if (logger.isLoggable(Level.FINE)) {
      logger.info(""String_Node_Str"" + className + ""String_Node_Str"");
    }
    driverClass=loadExtraDriver(className,true,refreshClassLoader,driverClassPath);
    if (driverClass == null) {
      logger.warning(""String_Node_Str"" + className);
      throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
    }
  }
  Driver driver=null;
  try {
    driver=this.getDriverInstance(driverClass);
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + className,e);
    throw new JDBCException(ResourceConstants.CANNOT_INSTANTIATE_DRIVER,null,className);
  }
  return driver;
}","/** 
 * Look for the Driver from drivers directory if it not in plugin class path
 * @param className
 * @return Driver instance
 * @throws OdaException 
 */
private Driver findDriver(String className,Collection<String> driverClassPath,boolean refreshClassLoader) throws OdaException {
  Class driverClass=null;
  try {
    driverClass=Class.forName(className);
    logger.info(""String_Node_Str"" + className);
  }
 catch (  ClassNotFoundException e) {
    if (logger.isLoggable(Level.FINE)) {
      logger.info(""String_Node_Str"" + className + ""String_Node_Str"");
    }
    driverClass=loadExtraDriver(className,true,refreshClassLoader,driverClassPath);
    if (driverClass == null) {
      ClassLoader loader=Thread.currentThread().getContextClassLoader();
      if (loader != null) {
        try {
          driverClass=Class.forName(className,true,loader);
        }
 catch (        ClassNotFoundException e1) {
          driverClass=null;
        }
      }
    }
  }
  if (driverClass == null) {
    logger.warning(""String_Node_Str"" + className);
    throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
  }
  Driver driver=null;
  try {
    driver=this.getDriverInstance(driverClass);
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + className,e);
    throw new JDBCException(ResourceConstants.CANNOT_INSTANTIATE_DRIVER,null,className);
  }
  return driver;
}",0.8730723606168446
69623,"/** 
 * This method is used to register the Java Script Objects which are defined in the scope of source ResultSet ( might be IResultSet or CubeCursor ) to target scope. One possible client of this method is Report Engine. A classic use case is that instead of register its own ""row"" object  the Report Engine can simply call this method with proper argument so that the ""row"" object registered in IResultIterator's scope, that is, JSResultSetRow, can be accessed by engine using engine scope. 
 * @param targetScope
 * @param source
 */
public static void registerJSObject(Scriptable targetScope,ILinkedResult source){
  int type=((ILinkedResult)source).getCurrentResultType();
  if (type == ILinkedResult.TYPE_TABLE) {
    targetScope.put(""String_Node_Str"",targetScope,new JSResultIteratorObject((ILinkedResult)source));
  }
 else   if (type == ILinkedResult.TYPE_CUBE) {
    Scriptable scope=((ICubeCursor)source.getCurrentResult()).getScope();
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
  }
}","/** 
 * This method is used to register the Java Script Objects which are defined in the scope of source ResultSet ( might be IResultSet or CubeCursor ) to target scope. One possible client of this method is Report Engine. A classic use case is that instead of register its own ""row"" object  the Report Engine can simply call this method with proper argument so that the ""row"" object registered in IResultIterator's scope, that is, JSResultSetRow, can be accessed by engine using engine scope. 
 * @param targetScope
 * @param source
 */
public static void registerJSObject(Scriptable targetScope,ILinkedResult source,ScriptContext context){
  int type=((ILinkedResult)source).getCurrentResultType();
  if (type == ILinkedResult.TYPE_TABLE) {
    targetScope.put(""String_Node_Str"",targetScope,new JSResultIteratorObject((ILinkedResult)source,context));
  }
 else   if (type == ILinkedResult.TYPE_CUBE) {
    Scriptable scope=((ICubeCursor)source.getCurrentResult()).getScope();
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
  }
}",0.9877949552481692
69624,"JSResultIteratorObject(ILinkedResult it){
  this.it=it;
  if (it.getCurrentResultType() == ILinkedResult.TYPE_TABLE)   this.currentIterator=(IResultIterator)it.getCurrentResult();
}","JSResultIteratorObject(ILinkedResult it,ScriptContext context){
  this.it=it;
  this.sContext=context;
  if (it.getCurrentResultType() == ILinkedResult.TYPE_TABLE)   this.currentIterator=(IResultIterator)it.getCurrentResult();
}",0.8850855745721271
69625,"public void setResultSets(IBaseResultSet[] rsets){
  if (this.rsets == rsets) {
    return;
  }
  if (rsets != null) {
    this.rsets=rsets;
    if (rsets[0] != null) {
      Scriptable scope=getScriptContext().getRootScope();
      DataAdapterUtil.registerJSObject(scope,new ResultIteratorTree(rsets[0]));
    }
  }
 else {
    this.rsets=null;
  }
}","public void setResultSets(IBaseResultSet[] rsets){
  if (this.rsets == rsets) {
    return;
  }
  if (rsets != null) {
    this.rsets=rsets;
    if (rsets[0] != null) {
      Scriptable scope=getScriptContext().getRootScope();
      DataAdapterUtil.registerJSObject(scope,new ResultIteratorTree(rsets[0]),this.getScriptContext());
    }
  }
 else {
    this.rsets=null;
  }
}",0.8512396694214877
69626,"/** 
 * @throws BirtException
 */
public void testBasicFooter() throws BirtException {
  int countOfRow=8;
  List genValue=null;
{
    QueryDefinition qd=newReportQuery();
    IBaseExpression[] rowBeArray=getRowExpr();
    IBaseExpression[] totalBeArray=getAggrExpr();
    rowExprName=getRowExprName();
    totalExprName=getAggrExprName();
    prepareExprNameAndQuery(rowExprName,rowBeArray,totalExprName,totalBeArray,qd);
    IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
    saveForPresentation(qr,rowBeArray,totalBeArray);
    IResultIterator ri=qr.getResultIterator();
    int currRow=-1;
    while (ri.next()) {
      currRow++;
      if (currRow == countOfRow - 1) {
        genValue=new ArrayList();
        for (int i=0; i < rowBeArray.length; i++)         genValue.add(ri.getValue(rowExprName[i]));
        for (int i=0; i < totalBeArray.length; i++)         genValue.add(ri.getValue(totalExprName[i]));
      }
    }
    ri.close();
    ri.close();
    qr.close();
    qr.close();
    myGenDataEngine.shutdown();
  }
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  List preValue=null;
{
    IQueryResults qr=myPreDataEngine.getQueryResults(queryResultID);
    IResultIterator ri=qr.getResultIterator();
    ri.moveTo(countOfRow - 1);
    preValue=new ArrayList();
    if (rowExprName != null) {
      for (int i=0; i < rowExprName.length; i++) {
        Object ob2=ri.getValue(rowExprName[i]);
        preValue.add(ob2);
      }
    }
    if (totalExprName != null) {
      for (int i=0; i < totalExprName.length; i++) {
        Object ob2=ri.getValue(totalExprName[i]);
        preValue.add(ob2);
      }
    }
    ri.close();
    myPreDataEngine.shutdown();
    this.closeArchiveReader();
  }
  Iterator it1=genValue.iterator();
  Iterator it2=preValue.iterator();
  String str=""String_Node_Str"";
  while (it1.hasNext()) {
    Object ob2=it2.next();
    assertTrue(it1.next().equals(ob2));
    str+=ob2.toString() + ""String_Node_Str"";
  }
  System.out.println(""String_Node_Str"" + str);
}","/** 
 * @throws BirtException
 */
public void testBasicFooter() throws BirtException {
  int countOfRow=8;
  List genValue=null;
{
    QueryDefinition qd=newReportQuery();
    IBaseExpression[] rowBeArray=getRowExpr();
    IBaseExpression[] totalBeArray=getAggrExpr();
    rowExprName=getRowExprName();
    totalExprName=getAggrExprName();
    prepareExprNameAndQuery(qd);
    IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
    saveForPresentation(qr);
    IResultIterator ri=qr.getResultIterator();
    int currRow=-1;
    while (ri.next()) {
      currRow++;
      if (currRow == countOfRow - 1) {
        genValue=new ArrayList();
        for (int i=0; i < rowBeArray.length; i++)         genValue.add(ri.getValue(rowExprName[i]));
        for (int i=0; i < totalBeArray.length; i++)         genValue.add(ri.getValue(totalExprName[i]));
      }
    }
    ri.close();
    ri.close();
    qr.close();
    qr.close();
    myGenDataEngine.shutdown();
  }
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  List preValue=null;
{
    IQueryResults qr=myPreDataEngine.getQueryResults(queryResultID);
    IResultIterator ri=qr.getResultIterator();
    ri.moveTo(countOfRow - 1);
    preValue=new ArrayList();
    if (rowExprName != null) {
      for (int i=0; i < rowExprName.length; i++) {
        Object ob2=ri.getValue(rowExprName[i]);
        preValue.add(ob2);
      }
    }
    if (totalExprName != null) {
      for (int i=0; i < totalExprName.length; i++) {
        Object ob2=ri.getValue(totalExprName[i]);
        preValue.add(ob2);
      }
    }
    ri.close();
    myPreDataEngine.shutdown();
    this.closeArchiveReader();
  }
  Iterator it1=genValue.iterator();
  Iterator it2=preValue.iterator();
  String str=""String_Node_Str"";
  while (it1.hasNext()) {
    Object ob2=it2.next();
    assertTrue(it1.next().equals(ob2));
    str+=ob2.toString() + ""String_Node_Str"";
  }
  System.out.println(""String_Node_Str"" + str);
}",0.9824228028503564
69627,"/** 
 * @throws BirtException
 */
private void genComputedColumn() throws BirtException {
  String[] ccName=new String[]{""String_Node_Str"",""String_Node_Str""};
  String[] ccExpr=new String[]{""String_Node_Str"",""String_Node_Str""};
  int[] dataTypes=new int[]{DataType.STRING_TYPE,DataType.INTEGER_TYPE};
  for (int i=0; i < 2; i++) {
    ComputedColumn computedColumn=new ComputedColumn(ccName[i],ccExpr[i],dataTypes[i]);
    ((BaseDataSetDesign)this.dataSet).addComputedColumn(computedColumn);
  }
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] tempArray=getRowExpr();
  int length=tempArray.length;
  IBaseExpression[] rowBeArray=new IBaseExpression[length + 2];
  System.arraycopy(tempArray,0,rowBeArray,0,length);
  for (int i=0; i < ccName.length; i++)   rowBeArray[length + i]=new ScriptExpression(""String_Node_Str"" + ccName[i]);
  rowExprName=new String[rowBeArray.length];
  for (int i=0; i < rowExprName.length; i++) {
    rowExprName[i]=""String_Node_Str"" + i;
  }
  IBaseExpression[] totalBeArray=getAggrExpr();
  totalExprName=getAggrExprName();
  prepareExprNameAndQuery(rowExprName,rowBeArray,totalExprName,totalBeArray,qd);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  saveForPresentation(qr,rowBeArray,totalBeArray);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    for (int i=0; i < rowBeArray.length; i++)     expectedValue.add(ri.getValue(rowExprName[i]));
    for (int i=0; i < totalBeArray.length; i++)     expectedValue.add(ri.getValue(totalExprName[i]));
  }
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void genComputedColumn() throws BirtException {
  String[] ccName=new String[]{""String_Node_Str"",""String_Node_Str""};
  String[] ccExpr=new String[]{""String_Node_Str"",""String_Node_Str""};
  int[] dataTypes=new int[]{DataType.STRING_TYPE,DataType.INTEGER_TYPE};
  for (int i=0; i < 2; i++) {
    ComputedColumn computedColumn=new ComputedColumn(ccName[i],ccExpr[i],dataTypes[i]);
    ((BaseDataSetDesign)this.dataSet).addComputedColumn(computedColumn);
  }
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] tempArray=getRowExpr();
  int length=tempArray.length;
  IBaseExpression[] rowBeArray=new IBaseExpression[length + 2];
  System.arraycopy(tempArray,0,rowBeArray,0,length);
  for (int i=0; i < ccName.length; i++)   rowBeArray[length + i]=new ScriptExpression(""String_Node_Str"" + ccName[i]);
  rowExprName=new String[rowBeArray.length];
  for (int i=0; i < rowExprName.length; i++) {
    rowExprName[i]=""String_Node_Str"" + i;
  }
  IBaseExpression[] totalBeArray=getAggrExpr();
  totalExprName=getAggrExprName();
  IBaseExpression[] totalBeArray2=getAggrExpr();
  IBinding total1=new Binding(this.totalExprName[0],totalBeArray2[0]);
  total1.setAggrFunction(""String_Node_Str"");
  IBinding total2=new Binding(this.totalExprName[1],totalBeArray2[1]);
  total2.setAggrFunction(""String_Node_Str"");
  qd.addBinding(total1);
  qd.addBinding(total2);
  for (int i=0; i < rowExprName.length; i++) {
    qd.addBinding(new Binding(this.rowExprName[i],rowBeArray[i]));
  }
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  saveForPresentation(qr);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    for (int i=0; i < rowBeArray.length; i++)     expectedValue.add(ri.getValue(rowExprName[i]));
    for (int i=0; i < totalBeArray.length; i++)     expectedValue.add(ri.getValue(totalExprName[i]));
  }
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
}",0.8581962563811685
69628,"/** 
 * @throws BirtException
 */
private void genSubQuery4() throws BirtException {
  QueryDefinition queryDefn=newReportQuery();
  queryDefn.setUsesDetails(false);
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  queryDefn.addGroup(groupDefn);
  rowExprName=new String[1];
  rowExprName[0]=""String_Node_Str"";
  IBaseExpression[] rowBeArray=new IBaseExpression[1];
  rowBeArray[0]=new ScriptExpression(""String_Node_Str"");
  prepareExprNameAndQuery(rowExprName,rowBeArray,new String[0],null,queryDefn);
  rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  rowExprName=getRowExprName();
  totalExprName=getAggrExprName();
  SubqueryDefinition subQueryDefn=new SubqueryDefinition(subQueryName,queryDefn);
  GroupDefinition subGroupDefn=new GroupDefinition(""String_Node_Str"");
  subGroupDefn.setKeyExpression(""String_Node_Str"");
  subQueryDefn.addGroup(subGroupDefn);
  groupDefn.addSubquery(subQueryDefn);
  subQueryDefn.setUsesDetails(false);
  prepareExprNameAndQuery(rowExprName,rowBeArray,totalExprName,totalBeArray,subQueryDefn);
  IQueryResults qr=myGenDataEngine.prepare(queryDefn).execute(scope);
  saveForPresentation(qr,rowBeArray,totalBeArray);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    System.out.println(ri.getValue(""String_Node_Str""));
    IResultIterator ri2=ri.getSecondaryIterator(subQueryName,subScope);
    while (ri2.next()) {
      for (int i=0; i < rowBeArray.length; i++)       expectedValue.add(ri2.getValue(rowExprName[i]));
      for (int i=0; i < totalBeArray.length; i++)       expectedValue.add(ri2.getValue(totalExprName[i]));
    }
    ri2.close();
  }
  qr.close();
  myGenDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void genSubQuery4() throws BirtException {
  QueryDefinition queryDefn=newReportQuery();
  queryDefn.setUsesDetails(false);
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  queryDefn.addGroup(groupDefn);
  rowExprName=new String[1];
  rowExprName[0]=""String_Node_Str"";
  IBaseExpression[] rowBeArray=new IBaseExpression[1];
  rowBeArray[0]=new ScriptExpression(""String_Node_Str"");
  for (int i=0; i < rowExprName.length; i++) {
    queryDefn.addBinding(new Binding(this.rowExprName[i],rowBeArray[i]));
  }
  rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  rowExprName=getRowExprName();
  totalExprName=getAggrExprName();
  SubqueryDefinition subQueryDefn=new SubqueryDefinition(subQueryName,queryDefn);
  GroupDefinition subGroupDefn=new GroupDefinition(""String_Node_Str"");
  subGroupDefn.setKeyExpression(""String_Node_Str"");
  subQueryDefn.addGroup(subGroupDefn);
  groupDefn.addSubquery(subQueryDefn);
  subQueryDefn.setUsesDetails(false);
  prepareExprNameAndQuery(subQueryDefn);
  IQueryResults qr=myGenDataEngine.prepare(queryDefn).execute(scope);
  saveForPresentation(qr);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    System.out.println(ri.getValue(""String_Node_Str""));
    IResultIterator ri2=ri.getSecondaryIterator(subQueryName,subScope);
    while (ri2.next()) {
      for (int i=0; i < rowBeArray.length; i++)       expectedValue.add(ri2.getValue(rowExprName[i]));
      for (int i=0; i < totalBeArray.length; i++)       expectedValue.add(ri2.getValue(totalExprName[i]));
    }
    ri2.close();
  }
  qr.close();
  myGenDataEngine.shutdown();
}",0.5214348206474191
69629,"/** 
 * @throws BirtException
 */
private void genSubQuery3() throws BirtException {
  QueryDefinition queryDefn=newReportQuery();
  SubqueryDefinition subQueryDefn=new SubqueryDefinition(subQueryName,queryDefn);
  subQueryDefn.setApplyOnGroupFlag(false);
  queryDefn.addSubquery(subQueryDefn);
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  rowExprName=getRowExprName();
  totalExprName=getAggrExprName();
  prepareExprNameAndQuery(rowExprName,rowBeArray,totalExprName,totalBeArray,subQueryDefn);
  IQueryResults qr=myGenDataEngine.prepare(queryDefn).execute(scope);
  saveForPresentation(qr,rowBeArray,totalBeArray);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    IResultIterator ri2=ri.getSecondaryIterator(subQueryName,subScope);
    while (ri2.next()) {
      for (int i=0; i < rowBeArray.length; i++)       expectedValue.add(ri2.getValue(rowExprName[i]));
      for (int i=0; i < totalBeArray.length; i++)       expectedValue.add(ri2.getValue(totalExprName[i]));
    }
    ri2.close();
  }
  qr.close();
  myGenDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void genSubQuery3() throws BirtException {
  QueryDefinition queryDefn=newReportQuery();
  SubqueryDefinition subQueryDefn=new SubqueryDefinition(subQueryName,queryDefn);
  subQueryDefn.setApplyOnGroupFlag(false);
  queryDefn.addSubquery(subQueryDefn);
  prepareExprNameAndQuery(subQueryDefn);
  IQueryResults qr=myGenDataEngine.prepare(queryDefn).execute(scope);
  saveForPresentation(qr);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    IResultIterator ri2=ri.getSecondaryIterator(subQueryName,subScope);
    while (ri2.next()) {
      for (int i=0; i < rowExprName.length; i++)       expectedValue.add(ri2.getValue(rowExprName[i]));
      for (int i=0; i < totalExprName.length; i++)       expectedValue.add(ri2.getValue(totalExprName[i]));
    }
    ri2.close();
  }
  qr.close();
  myGenDataEngine.shutdown();
}",0.3981945837512538
69630,"/** 
 * @throws BirtException
 */
private void genSubQuery2() throws BirtException {
  QueryDefinition queryDefn=newReportQuery();
  SubqueryDefinition subQueryDefn=new SubqueryDefinition(subQueryName,queryDefn);
  queryDefn.addSubquery(subQueryDefn);
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  rowExprName=getRowExprName();
  totalExprName=getAggrExprName();
  prepareExprNameAndQuery(rowExprName,rowBeArray,totalExprName,totalBeArray,subQueryDefn);
  IQueryResults qr=myGenDataEngine.prepare(queryDefn).execute(scope);
  saveForPresentation(qr,rowBeArray,totalBeArray);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next())   ;
  IResultIterator ri2=ri.getSecondaryIterator(subQueryName,subScope);
  while (ri2.next()) {
    for (int i=0; i < rowBeArray.length; i++)     expectedValue.add(ri2.getValue(rowExprName[i]));
    for (int i=0; i < totalBeArray.length; i++)     expectedValue.add(ri2.getValue(totalExprName[i]));
  }
  ri2.close();
  qr.close();
  myGenDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void genSubQuery2() throws BirtException {
  QueryDefinition queryDefn=newReportQuery();
  SubqueryDefinition subQueryDefn=new SubqueryDefinition(subQueryName,queryDefn);
  queryDefn.addSubquery(subQueryDefn);
  prepareExprNameAndQuery(subQueryDefn);
  IQueryResults qr=myGenDataEngine.prepare(queryDefn).execute(scope);
  saveForPresentation(qr);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next())   ;
  IResultIterator ri2=ri.getSecondaryIterator(subQueryName,subScope);
  while (ri2.next()) {
    for (int i=0; i < rowExprName.length; i++)     expectedValue.add(ri2.getValue(rowExprName[i]));
    for (int i=0; i < totalExprName.length; i++)     expectedValue.add(ri2.getValue(totalExprName[i]));
  }
  ri2.close();
  qr.close();
  myGenDataEngine.shutdown();
}",0.3792735042735042
69631,"/** 
 * @throws BirtException
 */
private void genSubOfSubQuery() throws BirtException {
  QueryDefinition queryDefn=newReportQuery();
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  queryDefn.addGroup(groupDefn);
  queryDefn.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  SubqueryDefinition subQueryDefn=new SubqueryDefinition(subQueryName,queryDefn);
  groupDefn.addSubquery(subQueryDefn);
  GroupDefinition subGroupDefn=new GroupDefinition();
  subGroupDefn.setKeyColumn(""String_Node_Str"");
  subQueryDefn.addGroup(subGroupDefn);
  subQueryDefn.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  SubqueryDefinition subOfSubQueryDefn=new SubqueryDefinition(subOfSubQueryName,subQueryDefn);
  subGroupDefn.addSubquery(subOfSubQueryDefn);
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  rowExprName=getRowExprName();
  totalExprName=getAggrExprName();
  prepareExprNameAndQuery(rowExprName,rowBeArray,totalExprName,totalBeArray,subOfSubQueryDefn);
  IQueryResults qr=myGenDataEngine.prepare(queryDefn).execute(subScope);
  saveForPresentation(qr,rowBeArray,totalBeArray);
  IResultIterator ri=qr.getResultIterator();
  ri.next();
  IResultIterator ri2=ri.getSecondaryIterator(subQueryName,scope);
  ri2.next();
  IResultIterator ri3=ri2.getSecondaryIterator(subOfSubQueryName,subOfSubScope);
  while (ri3.next()) {
    for (int i=0; i < rowBeArray.length; i++)     expectedValue.add(ri3.getValue(rowExprName[i]));
    for (int i=0; i < totalBeArray.length; i++)     expectedValue.add(ri3.getValue(totalExprName[i]));
  }
  ri3.close();
  ri2.close();
  qr.close();
  myGenDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void genSubOfSubQuery() throws BirtException {
  QueryDefinition queryDefn=newReportQuery();
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  queryDefn.addGroup(groupDefn);
  queryDefn.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  SubqueryDefinition subQueryDefn=new SubqueryDefinition(subQueryName,queryDefn);
  groupDefn.addSubquery(subQueryDefn);
  GroupDefinition subGroupDefn=new GroupDefinition();
  subGroupDefn.setKeyColumn(""String_Node_Str"");
  subQueryDefn.addGroup(subGroupDefn);
  subQueryDefn.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  SubqueryDefinition subOfSubQueryDefn=new SubqueryDefinition(subOfSubQueryName,subQueryDefn);
  subGroupDefn.addSubquery(subOfSubQueryDefn);
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  rowExprName=getRowExprName();
  totalExprName=getAggrExprName();
  prepareExprNameAndQuery(subOfSubQueryDefn);
  IQueryResults qr=myGenDataEngine.prepare(queryDefn).execute(subScope);
  saveForPresentation(qr);
  IResultIterator ri=qr.getResultIterator();
  ri.next();
  IResultIterator ri2=ri.getSecondaryIterator(subQueryName,scope);
  ri2.next();
  IResultIterator ri3=ri2.getSecondaryIterator(subOfSubQueryName,subOfSubScope);
  while (ri3.next()) {
    for (int i=0; i < rowBeArray.length; i++)     expectedValue.add(ri3.getValue(rowExprName[i]));
    for (int i=0; i < totalBeArray.length; i++)     expectedValue.add(ri3.getValue(totalExprName[i]));
  }
  ri3.close();
  ri2.close();
  qr.close();
  myGenDataEngine.shutdown();
}",0.6643518518518519
69632,"/** 
 * @throws BirtException 
 */
private void genBasicSkipToEnd() throws BirtException {
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  rowExprName=getRowExprName();
  totalExprName=getAggrExprName();
  prepareExprNameAndQuery(rowExprName,rowBeArray,totalExprName,totalBeArray,qd);
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  qd.addGroup(groupDefn);
  groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  qd.addGroup(groupDefn);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  saveForPresentation(qr,rowBeArray,totalBeArray);
  IResultIterator ri=qr.getResultIterator();
  ri.next();
  ri.skipToEnd(1);
  while (ri.next()) {
    for (int i=0; i < rowBeArray.length; i++)     expectedValue.add(ri.getValue(rowExprName[i]));
    for (int i=0; i < totalBeArray.length; i++)     expectedValue.add(ri.getValue(totalExprName[i]));
    this.expectedStartingGroupLevelValueList.add(new Integer(ri.getStartingGroupLevel()));
    this.expectedEndingGroupLevelValueList.add(new Integer(ri.getEndingGroupLevel()));
  }
  ri.close();
  ri.close();
  qr.close();
  qr.close();
  myGenDataEngine.shutdown();
}","/** 
 * @throws BirtException 
 */
private void genBasicSkipToEnd() throws BirtException {
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  rowExprName=getRowExprName();
  totalExprName=getAggrExprName();
  prepareExprNameAndQuery(qd);
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  qd.addGroup(groupDefn);
  groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  qd.addGroup(groupDefn);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  saveForPresentation(qr);
  IResultIterator ri=qr.getResultIterator();
  ri.next();
  ri.skipToEnd(1);
  while (ri.next()) {
    for (int i=0; i < rowBeArray.length; i++)     expectedValue.add(ri.getValue(rowExprName[i]));
    for (int i=0; i < totalBeArray.length; i++)     expectedValue.add(ri.getValue(totalExprName[i]));
    this.expectedStartingGroupLevelValueList.add(new Integer(ri.getStartingGroupLevel()));
    this.expectedEndingGroupLevelValueList.add(new Integer(ri.getEndingGroupLevel()));
  }
  ri.close();
  ri.close();
  qr.close();
  qr.close();
  myGenDataEngine.shutdown();
}",0.970257234726688
69633,"/** 
 * @throws BirtException 
 */
private void genBasicGroupLevel2() throws BirtException {
  QueryDefinition qd=newReportQuery();
  qd.setUsesDetails(false);
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  rowExprName=getRowExprName();
  totalExprName=getAggrExprName();
  prepareExprNameAndQuery(rowExprName,rowBeArray,totalExprName,totalBeArray,qd);
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  qd.addGroup(groupDefn);
  groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  qd.addGroup(groupDefn);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  saveForPresentation(qr,rowBeArray,totalBeArray);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    for (int i=0; i < rowBeArray.length; i++)     expectedValue.add(ri.getValue(rowExprName[i]));
    for (int i=0; i < totalBeArray.length; i++)     expectedValue.add(ri.getValue(totalExprName[i]));
    this.expectedStartingGroupLevelValueList.add(new Integer(ri.getStartingGroupLevel()));
    this.expectedEndingGroupLevelValueList.add(new Integer(ri.getEndingGroupLevel()));
  }
  ri.close();
  ri.close();
  qr.close();
  qr.close();
  myGenDataEngine.shutdown();
}","/** 
 * @throws BirtException 
 */
private void genBasicGroupLevel2() throws BirtException {
  QueryDefinition qd=newReportQuery();
  qd.setUsesDetails(false);
  prepareExprNameAndQuery(qd);
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  qd.addGroup(groupDefn);
  groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  qd.addGroup(groupDefn);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  saveForPresentation(qr);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    for (int i=0; i < rowExprName.length; i++)     expectedValue.add(ri.getValue(rowExprName[i]));
    for (int i=0; i < totalExprName.length; i++)     expectedValue.add(ri.getValue(totalExprName[i]));
    this.expectedStartingGroupLevelValueList.add(new Integer(ri.getStartingGroupLevel()));
    this.expectedEndingGroupLevelValueList.add(new Integer(ri.getEndingGroupLevel()));
  }
  ri.close();
  ri.close();
  qr.close();
  qr.close();
  myGenDataEngine.shutdown();
}",0.8727429062768701
69634,"/** 
 * @param rowBeArray
 * @param totalBeArray
 */
private void saveForPresentation(IQueryResults queryResuls,IBaseExpression[] rowBeArray,IBaseExpression[] totalBeArray){
  queryResultID=queryResuls.getID();
}","/** 
 * @param rowBeArray
 * @param totalBeArray
 */
private void saveForPresentation(IQueryResults qr){
  queryResultID=qr.getID();
}",0.7745664739884393
69635,"/** 
 * @throws BirtException
 */
private void genBasic() throws BirtException {
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  rowExprName=getRowExprName();
  totalExprName=getAggrExprName();
  prepareExprNameAndQuery(rowExprName,rowBeArray,totalExprName,totalBeArray,qd);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  saveForPresentation(qr,rowBeArray,totalBeArray);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    for (int i=0; i < rowBeArray.length; i++)     expectedValue.add(ri.getValue(rowExprName[i]));
    for (int i=0; i < totalBeArray.length; i++)     expectedValue.add(ri.getValue(totalExprName[i]));
  }
  ri.close();
  ri.close();
  qr.close();
  qr.close();
  myGenDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void genBasic() throws BirtException {
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  rowExprName=getRowExprName();
  totalExprName=getAggrExprName();
  prepareExprNameAndQuery(qd);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  saveForPresentation(qr);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    for (int i=0; i < rowBeArray.length; i++)     expectedValue.add(ri.getValue(rowExprName[i]));
    for (int i=0; i < totalExprName.length; i++)     expectedValue.add(ri.getValue(totalExprName[i]));
  }
  ri.close();
  ri.close();
  qr.close();
  qr.close();
  myGenDataEngine.shutdown();
}",0.7961165048543689
69636,"/** 
 * Basic report document test without sub query, but it has aggregation.
 * @throws Exception 
 */
public void testJointDataSet() throws Exception {
  OdaDataSetDesign dset1=new OdaDataSetDesign(""String_Node_Str"");
  dset1.setDataSource(this.dataSource.getName());
  dset1.setQueryText(""String_Node_Str"" + this.getTestTableName());
  dset1.setExtensionID(JDBCOdaDataSource.DATA_SET_TYPE);
  OdaDataSetDesign dset2=new OdaDataSetDesign(""String_Node_Str"");
  dset2.setDataSource(this.dataSource.getName());
  dset2.setQueryText(""String_Node_Str"" + this.getTestTableName());
  dset2.setExtensionID(JDBCOdaDataSource.DATA_SET_TYPE);
  List a=new ArrayList();
  a.add(new JoinCondition(new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str""),IJoinCondition.OP_EQ));
  JointDataSetDesign dset3=new JointDataSetDesign(""String_Node_Str"",dset1.getName(),dset2.getName(),0,a);
  myGenDataEngine.defineDataSet(dset1);
  myGenDataEngine.defineDataSet(dset2);
  myGenDataEngine.defineDataSet(dset3);
  QueryDefinition query=this.newReportQuery(dset3);
  IBaseExpression[] rowBeArray=new IBaseExpression[6];
  rowBeArray[0]=new ScriptExpression(""String_Node_Str"");
  rowBeArray[1]=new ScriptExpression(""String_Node_Str"");
  rowBeArray[2]=new ScriptExpression(""String_Node_Str"");
  rowBeArray[3]=new ScriptExpression(""String_Node_Str"");
  rowBeArray[4]=new ScriptExpression(""String_Node_Str"");
  rowBeArray[5]=new ScriptExpression(""String_Node_Str"");
  rowExprName=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  prepareExprNameAndQuery(rowExprName,rowBeArray,new String[0],new IBaseExpression[0],query);
  IQueryResults qr=myGenDataEngine.prepare(query).execute(scope);
  saveForPresentation(qr,rowBeArray,new IBaseExpression[0]);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    for (int i=0; i < rowBeArray.length; i++)     expectedValue.add(ri.getValue(rowExprName[i]));
  }
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.preBasic();
  this.closeArchiveReader();
}","/** 
 * Basic report document test without sub query, but it has aggregation.
 * @throws Exception 
 */
public void testJointDataSet() throws Exception {
  OdaDataSetDesign dset1=new OdaDataSetDesign(""String_Node_Str"");
  dset1.setDataSource(this.dataSource.getName());
  dset1.setQueryText(""String_Node_Str"" + this.getTestTableName());
  dset1.setExtensionID(JDBCOdaDataSource.DATA_SET_TYPE);
  OdaDataSetDesign dset2=new OdaDataSetDesign(""String_Node_Str"");
  dset2.setDataSource(this.dataSource.getName());
  dset2.setQueryText(""String_Node_Str"" + this.getTestTableName());
  dset2.setExtensionID(JDBCOdaDataSource.DATA_SET_TYPE);
  List a=new ArrayList();
  a.add(new JoinCondition(new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str""),IJoinCondition.OP_EQ));
  JointDataSetDesign dset3=new JointDataSetDesign(""String_Node_Str"",dset1.getName(),dset2.getName(),0,a);
  myGenDataEngine.defineDataSet(dset1);
  myGenDataEngine.defineDataSet(dset2);
  myGenDataEngine.defineDataSet(dset3);
  QueryDefinition query=this.newReportQuery(dset3);
  IBaseExpression[] rowBeArray=new IBaseExpression[6];
  rowBeArray[0]=new ScriptExpression(""String_Node_Str"");
  rowBeArray[1]=new ScriptExpression(""String_Node_Str"");
  rowBeArray[2]=new ScriptExpression(""String_Node_Str"");
  rowBeArray[3]=new ScriptExpression(""String_Node_Str"");
  rowBeArray[4]=new ScriptExpression(""String_Node_Str"");
  rowBeArray[5]=new ScriptExpression(""String_Node_Str"");
  rowExprName=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < rowExprName.length; i++) {
    query.addBinding(new Binding(this.rowExprName[i],rowBeArray[i]));
  }
  IQueryResults qr=myGenDataEngine.prepare(query).execute(scope);
  saveForPresentation(qr);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    for (int i=0; i < rowBeArray.length; i++)     expectedValue.add(ri.getValue(rowExprName[i]));
  }
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_PRESENTATION,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.preBasic();
  this.closeArchiveReader();
}",0.957479621061908
69637,"/** 
 * @throws BirtException
 */
private void genSubQuery() throws BirtException {
  QueryDefinition queryDefn=newReportQuery();
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  queryDefn.addGroup(groupDefn);
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  rowExprName=getRowExprName();
  totalExprName=getAggrExprName();
  prepareExprNameAndQuery(rowExprName,rowBeArray,totalExprName,totalBeArray,queryDefn);
  SubqueryDefinition subQueryDefn=new SubqueryDefinition(subQueryName,queryDefn);
  groupDefn.addSubquery(subQueryDefn);
  SortDefinition sortDefn=new SortDefinition();
  sortDefn.setColumn(""String_Node_Str"");
  sortDefn.setSortDirection(ISortDefinition.SORT_DESC);
  subQueryDefn.addSort(sortDefn);
  prepareExprNameAndQuery(rowExprName,rowBeArray,totalExprName,totalBeArray,subQueryDefn);
  IQueryResults qr=myGenDataEngine.prepare(queryDefn).execute(scope);
  saveForPresentation(qr,rowBeArray,totalBeArray);
  IResultIterator ri=qr.getResultIterator();
  int loopCount=5;
  for (int i=0; i < loopCount; i++)   ri.next();
  IResultIterator ri2=ri.getSecondaryIterator(subQueryName,subScope);
  while (ri2.next()) {
    for (int i=0; i < rowBeArray.length; i++)     expectedValue.add(ri2.getValue(rowExprName[i]));
    for (int i=0; i < totalBeArray.length; i++)     expectedValue.add(ri2.getValue(totalExprName[i]));
  }
  ri2.close();
  qr.close();
  myGenDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void genSubQuery() throws BirtException {
  QueryDefinition queryDefn=newReportQuery();
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  queryDefn.addGroup(groupDefn);
  prepareExprNameAndQuery(queryDefn);
  SubqueryDefinition subQueryDefn=new SubqueryDefinition(subQueryName,queryDefn);
  groupDefn.addSubquery(subQueryDefn);
  SortDefinition sortDefn=new SortDefinition();
  sortDefn.setColumn(""String_Node_Str"");
  sortDefn.setSortDirection(ISortDefinition.SORT_DESC);
  subQueryDefn.addSort(sortDefn);
  prepareExprNameAndQuery(subQueryDefn);
  IQueryResults qr=myGenDataEngine.prepare(queryDefn).execute(scope);
  saveForPresentation(qr);
  IResultIterator ri=qr.getResultIterator();
  int loopCount=5;
  for (int i=0; i < loopCount; i++)   ri.next();
  IResultIterator ri2=ri.getSecondaryIterator(subQueryName,subScope);
  while (ri2.next()) {
    for (int i=0; i < rowExprName.length; i++)     expectedValue.add(ri2.getValue(rowExprName[i]));
    for (int i=0; i < totalExprName.length; i++)     expectedValue.add(ri2.getValue(totalExprName[i]));
  }
  ri2.close();
  qr.close();
  myGenDataEngine.shutdown();
}",0.6311111111111111
69638,"/** 
 * @return aggregation expression array
 */
private IBaseExpression[] getAggrExpr(){
  int num2=2;
  IBaseExpression[] totalBeArray=new IBaseExpression[num2];
  totalBeArray[0]=new ScriptExpression(""String_Node_Str"");
  totalBeArray[1]=new ScriptExpression(""String_Node_Str"");
  return totalBeArray;
}","/** 
 * @return aggregation expression array
 */
private IBaseExpression[] getAggrExpr(){
  int num2=2;
  IBaseExpression[] totalBeArray=new IBaseExpression[num2];
  totalBeArray[0]=new ScriptExpression(null);
  totalBeArray[1]=new ScriptExpression(""String_Node_Str"");
  return totalBeArray;
}",0.8247078464106845
69639,"/** 
 * Add expression on the row of group
 * @param rowBeArray
 * @param totalBeArray
 * @param qd
 */
private void prepareExprNameAndQuery(String[] rowBeName,IBaseExpression[] rowBeArray,String[] totalBeName,IBaseExpression[] totalBeArray,BaseQueryDefinition qd){
  for (int i=0; i < rowBeName.length; i++)   qd.addResultSetExpression(rowBeName[i],rowBeArray[i]);
  for (int i=0; i < totalBeName.length; i++)   qd.addResultSetExpression(totalBeName[i],totalBeArray[i]);
}","private void prepareExprNameAndQuery(BaseQueryDefinition qd) throws DataException {
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=new IBaseExpression[2];
  this.rowExprName=this.getRowExprName();
  totalBeArray[0]=new ScriptExpression(null);
  totalBeArray[1]=new ScriptExpression(""String_Node_Str"");
  totalExprName=new String[totalBeArray.length];
  this.totalExprName[0]=""String_Node_Str"";
  this.totalExprName[1]=""String_Node_Str"";
  IBinding total1=new Binding(this.totalExprName[0],totalBeArray[0]);
  total1.setAggrFunction(""String_Node_Str"");
  IBinding total2=new Binding(this.totalExprName[1],totalBeArray[1]);
  total2.setAggrFunction(""String_Node_Str"");
  qd.addBinding(total1);
  qd.addBinding(total2);
  for (int i=0; i < rowExprName.length; i++) {
    qd.addBinding(new Binding(this.rowExprName[i],rowBeArray[i]));
  }
}",0.2
69640,"/** 
 * @throws BirtException
 */
private void genNestedQuery() throws BirtException {
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray1=getRowExpr();
  IBaseExpression[] totalBeArray1=getAggrExpr();
  rowExprName=getRowExprName();
  totalExprName=getAggrExprName();
  prepareExprNameAndQuery(rowExprName,rowBeArray1,totalExprName,totalBeArray1,qd);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  qr.getResultIterator().next();
  Context cx=Context.enter();
  ScriptableObject nestedScope=cx.initStandardObjects();
  nestedScope.setPrototype(this.scope);
  Context.exit();
  QueryDefinition nestedQD=newReportQuery();
  IBaseExpression[] tempArray2=getRowExpr();
  int length=tempArray2.length;
  IBaseExpression[] rowBeArray2=new IBaseExpression[length + 1];
  System.arraycopy(tempArray2,0,rowBeArray2,0,length);
  rowBeArray2[length]=new ScriptExpression(""String_Node_Str"");
  rowExprName=new String[rowBeArray2.length];
  for (int i=0; i < rowExprName.length; i++) {
    rowExprName[i]=""String_Node_Str"" + i;
  }
  IBaseExpression[] totalBeArray2=getAggrExpr();
  totalExprName=getAggrExprName();
  prepareExprNameAndQuery(rowExprName,rowBeArray2,totalExprName,totalBeArray2,nestedQD);
  IQueryResults qr2=myGenDataEngine.prepare(nestedQD).execute(qr,nestedScope);
  IResultIterator ri=qr2.getResultIterator();
  saveForPresentation(qr2,rowBeArray2,totalBeArray2);
  while (ri.next()) {
    for (int i=0; i < rowBeArray2.length; i++)     expectedValue.add(ri.getValue(rowExprName[i]));
    for (int i=0; i < totalBeArray2.length; i++)     expectedValue.add(ri.getValue(totalExprName[i]));
  }
  ri.close();
  qr2.close();
  qr.close();
  myGenDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void genNestedQuery() throws BirtException {
  QueryDefinition qd=newReportQuery();
  prepareExprNameAndQuery(qd);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  qr.getResultIterator().next();
  Context cx=Context.enter();
  ScriptableObject nestedScope=cx.initStandardObjects();
  nestedScope.setPrototype(this.scope);
  Context.exit();
  QueryDefinition nestedQD=newReportQuery();
  IBaseExpression[] tempArray2=getRowExpr();
  int length=tempArray2.length;
  IBaseExpression[] rowBeArray2=new IBaseExpression[length + 1];
  System.arraycopy(tempArray2,0,rowBeArray2,0,length);
  rowBeArray2[length]=new ScriptExpression(""String_Node_Str"");
  rowExprName=new String[rowBeArray2.length];
  for (int i=0; i < rowExprName.length; i++) {
    rowExprName[i]=""String_Node_Str"" + i;
  }
  IBaseExpression[] totalBeArray2=getAggrExpr();
  IBinding total1=new Binding(this.totalExprName[0],totalBeArray2[0]);
  total1.setAggrFunction(""String_Node_Str"");
  IBinding total2=new Binding(this.totalExprName[1],totalBeArray2[1]);
  total2.setAggrFunction(""String_Node_Str"");
  nestedQD.addBinding(total1);
  nestedQD.addBinding(total2);
  for (int i=0; i < rowExprName.length; i++) {
    nestedQD.addBinding(new Binding(this.rowExprName[i],rowBeArray2[i]));
  }
  IQueryResults qr2=myGenDataEngine.prepare(nestedQD).execute(qr,nestedScope);
  IResultIterator ri=qr2.getResultIterator();
  saveForPresentation(qr2);
  while (ri.next()) {
    for (int i=0; i < rowBeArray2.length; i++)     expectedValue.add(ri.getValue(rowExprName[i]));
    for (int i=0; i < totalBeArray2.length; i++)     expectedValue.add(ri.getValue(totalExprName[i]));
  }
  ri.close();
  qr2.close();
  qr.close();
  myGenDataEngine.shutdown();
}",0.7838848920863309
69641,"/** 
 * @throws BirtException 
 */
private void genBasicGroupLevel() throws BirtException {
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  rowExprName=getRowExprName();
  totalExprName=getAggrExprName();
  prepareExprNameAndQuery(rowExprName,rowBeArray,totalExprName,totalBeArray,qd);
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  qd.addGroup(groupDefn);
  groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  qd.addGroup(groupDefn);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  saveForPresentation(qr,rowBeArray,totalBeArray);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    for (int i=0; i < rowBeArray.length; i++)     expectedValue.add(ri.getValue(rowExprName[i]));
    for (int i=0; i < totalBeArray.length; i++)     expectedValue.add(ri.getValue(totalExprName[i]));
    this.expectedStartingGroupLevelValueList.add(new Integer(ri.getStartingGroupLevel()));
    this.expectedEndingGroupLevelValueList.add(new Integer(ri.getEndingGroupLevel()));
  }
  ri.close();
  ri.close();
  qr.close();
  qr.close();
  myGenDataEngine.shutdown();
}","/** 
 * @throws BirtException 
 */
private void genBasicGroupLevel() throws BirtException {
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  rowExprName=getRowExprName();
  totalExprName=getAggrExprName();
  prepareExprNameAndQuery(qd);
  GroupDefinition groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  qd.addGroup(groupDefn);
  groupDefn=new GroupDefinition();
  groupDefn.setKeyColumn(""String_Node_Str"");
  qd.addGroup(groupDefn);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  saveForPresentation(qr);
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    for (int i=0; i < rowBeArray.length; i++)     expectedValue.add(ri.getValue(rowExprName[i]));
    for (int i=0; i < totalBeArray.length; i++)     expectedValue.add(ri.getValue(totalExprName[i]));
    this.expectedStartingGroupLevelValueList.add(new Integer(ri.getStartingGroupLevel()));
    this.expectedEndingGroupLevelValueList.add(new Integer(ri.getEndingGroupLevel()));
  }
  ri.close();
  ri.close();
  qr.close();
  qr.close();
  myGenDataEngine.shutdown();
}",0.9694971145919208
69642,"private void genSkipToEnd(boolean useDetails) throws BirtException {
  Context context=Context.enter();
  Scriptable scope=context.initStandardObjects();
  Context.exit();
  QueryDefinition qd=newReportQuery();
  qd.setUsesDetails(useDetails);
  GroupDefinition gd=new GroupDefinition();
  String columnBindingNameGroup=""String_Node_Str"";
  IBaseExpression columnBindingExprGroup=new ScriptExpression(""String_Node_Str"");
  gd.setKeyColumn(""String_Node_Str"");
  qd.addResultSetExpression(columnBindingNameGroup,columnBindingExprGroup);
  qd.addGroup(gd);
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  prepareExprNameAndQuery(rowBeArray,totalBeArray,qd);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  queryResultID=qr.getID();
  IResultIterator ri=qr.getResultIterator();
  ri.next();
  ri.moveTo(4);
  ri.skipToEnd(1);
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
}","private void genSkipToEnd(boolean useDetails) throws BirtException {
  Context context=Context.enter();
  Scriptable scope=context.initStandardObjects();
  Context.exit();
  QueryDefinition qd=newReportQuery();
  qd.setUsesDetails(useDetails);
  GroupDefinition gd=new GroupDefinition();
  String columnBindingNameGroup=""String_Node_Str"";
  IBaseExpression columnBindingExprGroup=new ScriptExpression(""String_Node_Str"");
  gd.setKeyColumn(""String_Node_Str"");
  qd.addBinding(new Binding(columnBindingNameGroup,columnBindingExprGroup));
  qd.addGroup(gd);
  prepareExprNameAndQuery(qd);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  queryResultID=qr.getID();
  IResultIterator ri=qr.getResultIterator();
  ri.next();
  ri.moveTo(4);
  ri.skipToEnd(1);
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
}",0.8804960541149943
69643,"private void genHasGapRs() throws BirtException {
  Context context=Context.enter();
  Scriptable scope=context.initStandardObjects();
  Context.exit();
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  prepareExprNameAndQuery(rowBeArray,totalBeArray,qd);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  queryResultID=qr.getID();
  IResultIterator ri=qr.getResultIterator();
  ri.next();
  ri.moveTo(3);
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
}","private void genHasGapRs() throws BirtException {
  Context context=Context.enter();
  Scriptable scope=context.initStandardObjects();
  Context.exit();
  QueryDefinition qd=newReportQuery();
  prepareExprNameAndQuery(qd);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  queryResultID=qr.getID();
  IResultIterator ri=qr.getResultIterator();
  ri.next();
  ri.moveTo(3);
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
}",0.4094955489614243
69644,"/** 
 * Add expression on the row of group
 * @param rowBeArray
 * @param totalBeArray
 * @param qd
 */
private void prepareExprNameAndQuery(IBaseExpression[] rowBeArray,IBaseExpression[] totalBeArray,BaseQueryDefinition qd){
  int num=rowBeArray.length;
  for (int i=0; i < num; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  if (totalBeArray != null) {
    int num2=totalBeArray.length;
    for (int i=0; i < num2; i++)     qd.addResultSetExpression(this.totalExprName[i],totalBeArray[i]);
  }
}","/** 
 * Add expression on the row of group
 * @param rowBeArray
 * @param totalBeArray
 * @param qd
 * @throws DataException 
 */
private void prepareExprNameAndQuery(BaseQueryDefinition qd) throws DataException {
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=new IBaseExpression[2];
  totalBeArray[0]=new ScriptExpression(null);
  totalBeArray[1]=new ScriptExpression(""String_Node_Str"");
  totalExprName=new String[totalBeArray.length];
  this.totalExprName[0]=""String_Node_Str"";
  this.totalExprName[1]=""String_Node_Str"";
  IBinding total1=new Binding(this.totalExprName[0],totalBeArray[0]);
  total1.setAggrFunction(""String_Node_Str"");
  IBinding total2=new Binding(this.totalExprName[1],totalBeArray[1]);
  total2.setAggrFunction(""String_Node_Str"");
  qd.addBinding(total1);
  qd.addBinding(total2);
  for (int i=0; i < rowExprName.length; i++) {
    qd.addBinding(new Binding(this.rowExprName[i],rowBeArray[i]));
  }
}",0.3590785907859078
69645,"/** 
 * @throws Exception
 */
private void genBasic() throws Exception {
  Context context=Context.enter();
  Scriptable scope=context.initStandardObjects();
  Context.exit();
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  prepareExprNameAndQuery(rowBeArray,totalBeArray,qd);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  queryResultID=qr.getID();
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    ri.getValue(this.rowExprName[0]);
    ri.getValue(this.totalExprName[0]);
  }
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
}","/** 
 * @throws Exception
 */
private void genBasic() throws Exception {
  Context context=Context.enter();
  Scriptable scope=context.initStandardObjects();
  Context.exit();
  QueryDefinition qd=newReportQuery();
  prepareExprNameAndQuery(qd);
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  queryResultID=qr.getID();
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    ri.getValue(this.rowExprName[0]);
    ri.getValue(this.totalExprName[0]);
  }
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
}",0.87986743993372
69646,"/** 
 * @param ids
 * @throws BirtException
 * @throws DataException
 */
private void preComplexNestedQuery(List ids) throws BirtException, DataException {
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  deContext2.setTmpdir(this.getTempDir());
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  QueryDefinition qd=new QueryDefinition();
  populateColumnBinding(qd,rowBeArray,totalBeArray);
  qd.setQueryResultsID(this.GEN_queryResultID);
  QueryDefinition qd2=newReportQuery();
  populateColumnBinding(qd2,rowBeArray,totalBeArray);
  ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"");
  qd2.addFilter(new FilterDefinition(filterExpr));
  QueryDefinition qd3=newReportQuery();
  populateColumnBinding(qd3,rowBeArray,totalBeArray);
  ConditionalExpression filterExpr1=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"");
  qd3.addFilter(new FilterDefinition(filterExpr1));
  GroupDefinition gd=new GroupDefinition();
  gd.setKeyColumn(""String_Node_Str"");
  qd3.addGroup(gd);
  IQueryResults qr=myPreDataEngine.prepare(qd).execute(null);
  this.UPDATE_queryResultID=qr.getID();
  assertTrue(qr.getResultMetaData() != null);
  IResultIterator ri=qr.getResultIterator();
  ri.next();
  do {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri.getValue(totalExprName[i]) + ""String_Node_Str"";
    this.testPrintln(abc + ri.getRowId());
    qd2.setQueryResultsID(ids.get(0).toString());
    ids.remove(0);
    IQueryResults qr2=myPreDataEngine.prepare(qd2).execute(qr,null);
    IResultIterator subRi1=qr2.getResultIterator();
    while (subRi1.next()) {
      abc=""String_Node_Str"";
      for (int i=0; i < rowExprName.length; i++)       abc+=subRi1.getValue(rowExprName[i]) + ""String_Node_Str"";
      this.testPrintln(abc);
      qd3.setQueryResultsID(ids.get(0).toString());
      ids.remove(0);
      IResultIterator subRi2=myPreDataEngine.prepare(qd3).execute(qr2,null).getResultIterator();
      while (subRi2.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < rowExprName.length; i++)         abc+=subRi2.getValue(rowExprName[i]) + ""String_Node_Str"";
        this.testPrintln(abc);
      }
    }
  }
 while (ri.next());
  this.testPrintln(""String_Node_Str"");
  ri.close();
  qr.close();
  myPreDataEngine.shutdown();
  this.closeArchiveReader();
  this.closeArchiveWriter();
}","/** 
 * @param ids
 * @throws BirtException
 * @throws DataException
 */
private void preComplexNestedQuery(List ids) throws BirtException, DataException {
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  deContext2.setTmpdir(this.getTempDir());
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  IBaseExpression[] rowBeArray=getRowExpr();
  IBinding[] totalBeArray=getAggrExpr();
  QueryDefinition qd=new QueryDefinition();
  populateColumnBinding(qd,rowBeArray,totalBeArray);
  qd.setQueryResultsID(this.GEN_queryResultID);
  QueryDefinition qd2=newReportQuery();
  populateColumnBinding(qd2,rowBeArray,totalBeArray);
  ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"");
  qd2.addFilter(new FilterDefinition(filterExpr));
  QueryDefinition qd3=newReportQuery();
  populateColumnBinding(qd3,rowBeArray,totalBeArray);
  ConditionalExpression filterExpr1=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"");
  qd3.addFilter(new FilterDefinition(filterExpr1));
  GroupDefinition gd=new GroupDefinition();
  gd.setKeyColumn(""String_Node_Str"");
  qd3.addGroup(gd);
  IQueryResults qr=myPreDataEngine.prepare(qd).execute(null);
  this.UPDATE_queryResultID=qr.getID();
  assertTrue(qr.getResultMetaData() != null);
  IResultIterator ri=qr.getResultIterator();
  ri.next();
  do {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri.getValue(totalExprName[i]) + ""String_Node_Str"";
    this.testPrintln(abc + ri.getRowId());
    qd2.setQueryResultsID(ids.get(0).toString());
    ids.remove(0);
    IQueryResults qr2=myPreDataEngine.prepare(qd2).execute(qr,null);
    IResultIterator subRi1=qr2.getResultIterator();
    while (subRi1.next()) {
      abc=""String_Node_Str"";
      for (int i=0; i < rowExprName.length; i++)       abc+=subRi1.getValue(rowExprName[i]) + ""String_Node_Str"";
      this.testPrintln(abc);
      qd3.setQueryResultsID(ids.get(0).toString());
      ids.remove(0);
      IResultIterator subRi2=myPreDataEngine.prepare(qd3).execute(qr2,null).getResultIterator();
      while (subRi2.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < rowExprName.length; i++)         abc+=subRi2.getValue(rowExprName[i]) + ""String_Node_Str"";
        this.testPrintln(abc);
      }
    }
  }
 while (ri.next());
  this.testPrintln(""String_Node_Str"");
  ri.close();
  qr.close();
  myPreDataEngine.shutdown();
  this.closeArchiveReader();
  this.closeArchiveWriter();
}",0.996478220574606
69647,"/** 
 * IV request is applied here
 * @return query definition for interactive viewing
 */
private QueryDefinition newPreIVReportQuery(int filterNeeded,boolean sortNeeded,int groupNeeded,int mode){
  QueryDefinition qd=new QueryDefinition();
  qd.setDataSetName(""String_Node_Str"");
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  for (int i=0; i < totalBeArray.length; i++)   qd.addResultSetExpression(this.totalExprName[i],totalBeArray[i]);
  if (this.updateNewBindingName != null && this.updateNewBindingName.trim().length() > 0) {
    qd.addResultSetExpression(this.updateNewBindingName,this.updateNewBindingExpr);
  }
  if (mode == UPDATE) {
    qd.getFilters().addAll(this.GEN_filterDefn);
  }
 else   if (mode == PRESENTATION) {
    if (PRE_basedon_genfilter == false)     qd.getFilters().addAll(UPDATE_filterDefn);
 else     qd.getFilters().addAll(GEN_filterDefn);
  }
  if (filterNeeded == 0) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 1) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 2) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 3) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 4) {
    BaseExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"" + TimeZone.getDefault().getRawOffset() / 3600000 + ""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 5) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 6) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  UPDATE_filterDefn=qd.getFilters();
  if (sortNeeded) {
    SortDefinition sd=new SortDefinition();
    sd.setExpression(""String_Node_Str"");
    sd.setSortDirection(ISortDefinition.SORT_ASC);
    qd.addSort(sd);
  }
  if (groupNeeded == 1 || groupNeeded == 0) {
    GroupDefinition gd=null;
    if (groupNeeded == 1) {
      gd=new GroupDefinition(""String_Node_Str"");
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
 else     if (groupNeeded == 0) {
      gd=new GroupDefinition();
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
    if (this.UPDATE_add_subquery == 1) {
      SubqueryDefinition subqueryDefn=getSubQueryDefn(qd);
      gd.addSubquery(subqueryDefn);
    }
    if (this.UPDATE_add_subquery == 2) {
      SubqueryDefinition subqueryDefn=new SubqueryDefinition(subQueryName2,qd);
      subRowExprName2=new String[2];
      subRowExprName2[0]=""String_Node_Str"";
      subRowExprName2[1]=""String_Node_Str"";
      ScriptExpression[] exprs=new ScriptExpression[2];
      exprs[0]=new ScriptExpression(""String_Node_Str"");
      exprs[1]=new ScriptExpression(""String_Node_Str"");
      for (int i=0; i < subRowExprName2.length; i++)       subqueryDefn.addResultSetExpression(subRowExprName2[i],exprs[i]);
      subqueryDefn.setApplyOnGroupFlag(true);
      gd.addSubquery(subqueryDefn);
    }
  }
  if (add_subquery_on_query) {
    qd.addSubquery(getSubQueryDefn(qd));
  }
  return qd;
}","/** 
 * IV request is applied here
 * @return query definition for interactive viewing
 * @throws DataException 
 */
private QueryDefinition newPreIVReportQuery(int filterNeeded,boolean sortNeeded,int groupNeeded,int mode) throws DataException {
  QueryDefinition qd=new QueryDefinition();
  qd.setDataSetName(""String_Node_Str"");
  IBaseExpression[] rowBeArray=getRowExpr();
  IBinding[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  for (int i=0; i < totalBeArray.length; i++)   qd.addBinding(totalBeArray[i]);
  if (this.updateNewBindingName != null && this.updateNewBindingName.trim().length() > 0) {
    qd.addResultSetExpression(this.updateNewBindingName,this.updateNewBindingExpr);
  }
  if (mode == UPDATE) {
    qd.getFilters().addAll(this.GEN_filterDefn);
  }
 else   if (mode == PRESENTATION) {
    if (PRE_basedon_genfilter == false)     qd.getFilters().addAll(UPDATE_filterDefn);
 else     qd.getFilters().addAll(GEN_filterDefn);
  }
  if (filterNeeded == 0) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 1) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 2) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 3) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 4) {
    BaseExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"" + TimeZone.getDefault().getRawOffset() / 3600000 + ""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 5) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 6) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  UPDATE_filterDefn=qd.getFilters();
  if (sortNeeded) {
    SortDefinition sd=new SortDefinition();
    sd.setExpression(""String_Node_Str"");
    sd.setSortDirection(ISortDefinition.SORT_ASC);
    qd.addSort(sd);
  }
  if (groupNeeded == 1 || groupNeeded == 0) {
    GroupDefinition gd=null;
    if (groupNeeded == 1) {
      gd=new GroupDefinition(""String_Node_Str"");
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
 else     if (groupNeeded == 0) {
      gd=new GroupDefinition();
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
    if (this.UPDATE_add_subquery == 1) {
      SubqueryDefinition subqueryDefn=getSubQueryDefn(qd);
      gd.addSubquery(subqueryDefn);
    }
    if (this.UPDATE_add_subquery == 2) {
      SubqueryDefinition subqueryDefn=new SubqueryDefinition(subQueryName2,qd);
      subRowExprName2=new String[2];
      subRowExprName2[0]=""String_Node_Str"";
      subRowExprName2[1]=""String_Node_Str"";
      ScriptExpression[] exprs=new ScriptExpression[2];
      exprs[0]=new ScriptExpression(""String_Node_Str"");
      exprs[1]=new ScriptExpression(""String_Node_Str"");
      for (int i=0; i < subRowExprName2.length; i++)       subqueryDefn.addResultSetExpression(subRowExprName2[i],exprs[i]);
      subqueryDefn.setApplyOnGroupFlag(true);
      gd.addSubquery(subqueryDefn);
    }
  }
  if (add_subquery_on_query) {
    qd.addSubquery(getSubQueryDefn(qd));
  }
  return qd;
}",0.9863906013725718
69648,"/** 
 * @return
 * @throws BirtException
 */
private List genBasicNestedQuery() throws BirtException {
  QueryDefinition qd1=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  populateColumnBinding(qd1,rowBeArray,totalBeArray);
  IQueryResults qr1=myGenDataEngine.prepare(qd1).execute(scope);
  QueryDefinition qd2=newReportQuery();
  populateColumnBinding(qd2,rowBeArray,totalBeArray);
  ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"");
  qd2.addFilter(new FilterDefinition(filterExpr));
  IPreparedQuery preparedQuery=myGenDataEngine.prepare(qd2);
  GEN_queryResultID=qr1.getID();
  List nestedQueryResultId=new ArrayList();
  IResultIterator ri1=qr1.getResultIterator();
  while (ri1.next()) {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri1.getValue(this.rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri1.getValue(this.totalExprName[i]) + ""String_Node_Str"";
    this.testPrintln(abc);
    IQueryResults qr=preparedQuery.execute(qr1,scope);
    nestedQueryResultId.add(qr.getID());
    IResultIterator subRi=qr.getResultIterator();
    while (subRi.next()) {
      abc=""String_Node_Str"";
      for (int i=0; i < rowExprName.length; i++) {
        abc+=subRi.getValue(rowExprName[i]) + ""String_Node_Str"";
      }
      this.testPrintln(abc);
    }
    subRi.close();
  }
  this.testPrintln(""String_Node_Str"");
  ri1.close();
  qr1.close();
  myGenDataEngine.shutdown();
  this.closeArchiveWriter();
  return nestedQueryResultId;
}","/** 
 * @return
 * @throws BirtException
 */
private List genBasicNestedQuery() throws BirtException {
  QueryDefinition qd1=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBinding[] totalBeArray=getAggrExpr();
  populateColumnBinding(qd1,rowBeArray,totalBeArray);
  IQueryResults qr1=myGenDataEngine.prepare(qd1).execute(scope);
  QueryDefinition qd2=newReportQuery();
  populateColumnBinding(qd2,rowBeArray,totalBeArray);
  ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"");
  qd2.addFilter(new FilterDefinition(filterExpr));
  IPreparedQuery preparedQuery=myGenDataEngine.prepare(qd2);
  GEN_queryResultID=qr1.getID();
  List nestedQueryResultId=new ArrayList();
  IResultIterator ri1=qr1.getResultIterator();
  while (ri1.next()) {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri1.getValue(this.rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri1.getValue(this.totalExprName[i]) + ""String_Node_Str"";
    this.testPrintln(abc);
    IQueryResults qr=preparedQuery.execute(qr1,scope);
    nestedQueryResultId.add(qr.getID());
    IResultIterator subRi=qr.getResultIterator();
    while (subRi.next()) {
      abc=""String_Node_Str"";
      for (int i=0; i < rowExprName.length; i++) {
        abc+=subRi.getValue(rowExprName[i]) + ""String_Node_Str"";
      }
      this.testPrintln(abc);
    }
    subRi.close();
  }
  this.testPrintln(""String_Node_Str"");
  ri1.close();
  qr1.close();
  myGenDataEngine.shutdown();
  this.closeArchiveWriter();
  return nestedQueryResultId;
}",0.9942857142857144
69649,"/** 
 * @return
 * @throws BirtException
 */
private List genComplexNestedQuery() throws BirtException {
  QueryDefinition qd1=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  populateColumnBinding(qd1,rowBeArray,totalBeArray);
  IQueryResults qr1=myGenDataEngine.prepare(qd1).execute(scope);
  QueryDefinition qd2=newReportQuery();
  populateColumnBinding(qd2,rowBeArray,totalBeArray);
  ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"");
  qd2.addFilter(new FilterDefinition(filterExpr));
  IPreparedQuery preparedQuery2=myGenDataEngine.prepare(qd2);
  QueryDefinition qd3=newReportQuery();
  populateColumnBinding(qd3,rowBeArray,totalBeArray);
  ConditionalExpression filterExpr1=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"");
  qd3.addFilter(new FilterDefinition(filterExpr1));
  IPreparedQuery preparedQuery3=myGenDataEngine.prepare(qd3);
  GEN_queryResultID=qr1.getID();
  List nestedQueryResultId=new ArrayList();
  IResultIterator ri1=qr1.getResultIterator();
  while (ri1.next()) {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri1.getValue(this.rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri1.getValue(this.totalExprName[i]) + ""String_Node_Str"";
    this.testPrintln(abc);
    IQueryResults qr2=preparedQuery2.execute(qr1,scope);
    nestedQueryResultId.add(qr2.getID());
    IResultIterator subRi1=qr2.getResultIterator();
    while (subRi1.next()) {
      abc=""String_Node_Str"";
      for (int i=0; i < rowExprName.length; i++) {
        abc+=subRi1.getValue(rowExprName[i]) + ""String_Node_Str"";
      }
      this.testPrintln(abc);
      IQueryResults qr3=preparedQuery3.execute(qr2,scope);
      nestedQueryResultId.add(qr3.getID());
      IResultIterator subRi2=qr3.getResultIterator();
      while (subRi2.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < rowExprName.length; i++) {
          abc+=subRi2.getValue(rowExprName[i]) + ""String_Node_Str"";
        }
        this.testPrintln(abc);
      }
      subRi2.close();
    }
    subRi1.close();
  }
  this.testPrintln(""String_Node_Str"");
  ri1.close();
  qr1.close();
  myGenDataEngine.shutdown();
  this.closeArchiveWriter();
  return nestedQueryResultId;
}","/** 
 * @return
 * @throws BirtException
 */
private List genComplexNestedQuery() throws BirtException {
  QueryDefinition qd1=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBinding[] totalBeArray=getAggrExpr();
  populateColumnBinding(qd1,rowBeArray,totalBeArray);
  IQueryResults qr1=myGenDataEngine.prepare(qd1).execute(scope);
  QueryDefinition qd2=newReportQuery();
  populateColumnBinding(qd2,rowBeArray,totalBeArray);
  ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"");
  qd2.addFilter(new FilterDefinition(filterExpr));
  IPreparedQuery preparedQuery2=myGenDataEngine.prepare(qd2);
  QueryDefinition qd3=newReportQuery();
  populateColumnBinding(qd3,rowBeArray,totalBeArray);
  ConditionalExpression filterExpr1=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"");
  qd3.addFilter(new FilterDefinition(filterExpr1));
  IPreparedQuery preparedQuery3=myGenDataEngine.prepare(qd3);
  GEN_queryResultID=qr1.getID();
  List nestedQueryResultId=new ArrayList();
  IResultIterator ri1=qr1.getResultIterator();
  while (ri1.next()) {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri1.getValue(this.rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri1.getValue(this.totalExprName[i]) + ""String_Node_Str"";
    this.testPrintln(abc);
    IQueryResults qr2=preparedQuery2.execute(qr1,scope);
    nestedQueryResultId.add(qr2.getID());
    IResultIterator subRi1=qr2.getResultIterator();
    while (subRi1.next()) {
      abc=""String_Node_Str"";
      for (int i=0; i < rowExprName.length; i++) {
        abc+=subRi1.getValue(rowExprName[i]) + ""String_Node_Str"";
      }
      this.testPrintln(abc);
      IQueryResults qr3=preparedQuery3.execute(qr2,scope);
      nestedQueryResultId.add(qr3.getID());
      IResultIterator subRi2=qr3.getResultIterator();
      while (subRi2.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < rowExprName.length; i++) {
          abc+=subRi2.getValue(rowExprName[i]) + ""String_Node_Str"";
        }
        this.testPrintln(abc);
      }
      subRi2.close();
    }
    subRi1.close();
  }
  this.testPrintln(""String_Node_Str"");
  ri1.close();
  qr1.close();
  myGenDataEngine.shutdown();
  this.closeArchiveWriter();
  return nestedQueryResultId;
}",0.996075191076224
69650,"public void setUp() throws Exception {
  super.setUp();
  this.notIncludeAggr=false;
  this.add_subquery_on_query=false;
  this.USE_ROW_IN_AGGREGATION=false;
  this.GEN_queryResultID=null;
  this.UPDATE_queryResultID=null;
  this.USE_DATE_IN_COLUMNBINDING=true;
  this.GEN_add_subquery=false;
  this.GEN_add_sort=true;
  this.GEN_add_filter=false;
  this.GEN_add_group=false;
  this.GEN_print=false;
  this.GEN_use_invalid_column=false;
  this.UPDATE_add_filter=-1;
  this.UPDATE_add_sort=false;
  this.UPDATE_add_diff_group=false;
  this.UPDATE_add_same_group=false;
  this.UPDATE_add_subquery=0;
  this.USE_DATE_IN_SUBQUERY=false;
  this.PRE_add_filter=-1;
  this.PRE_add_sort=false;
  this.PRE_execute_query=false;
  this.PRE_print_groupinfo=false;
  this.PRE_use_skipto=false;
  this.PRE_use_skipto_num=-1;
  this.PRE_add_group=-1;
  this.PRE_basedon_genfilter=false;
  this.GEN_filterDefn=new ArrayList();
  this.UPDATE_filterDefn=new ArrayList();
  this.TEST_ISEMPTY=false;
  TimeZone.setDefault(TimeZone.getTimeZone(""String_Node_Str""));
}","public void setUp() throws Exception {
  super.setUp();
  this.notIncludeAggr=false;
  this.add_subquery_on_query=false;
  this.USE_ROW_IN_AGGREGATION=false;
  this.GEN_queryResultID=null;
  this.UPDATE_queryResultID=null;
  this.USE_DATE_IN_COLUMNBINDING=true;
  this.GEN_add_subquery=false;
  this.GEN_add_sort=true;
  this.GEN_add_filter=false;
  this.GEN_add_group=false;
  this.GEN_print=false;
  this.GEN_USE_RUNNING_AGGR=false;
  this.GEN_use_invalid_column=false;
  this.UPDATE_add_filter=-1;
  this.UPDATE_add_sort=false;
  this.UPDATE_add_diff_group=false;
  this.UPDATE_add_same_group=false;
  this.UPDATE_add_subquery=0;
  this.USE_DATE_IN_SUBQUERY=false;
  this.PRE_add_filter=-1;
  this.PRE_add_sort=false;
  this.PRE_execute_query=false;
  this.PRE_print_groupinfo=false;
  this.PRE_use_skipto=false;
  this.PRE_use_skipto_num=-1;
  this.PRE_add_group=-1;
  this.PRE_basedon_genfilter=false;
  this.GEN_filterDefn=new ArrayList();
  this.UPDATE_filterDefn=new ArrayList();
  this.TEST_ISEMPTY=false;
  TimeZone.setDefault(TimeZone.getTimeZone(""String_Node_Str""));
}",0.983529411764706
69651,"/** 
 * @param ids
 * @throws BirtException
 * @throws DataException
 */
private void preBasicNestedQuery(List ids) throws BirtException, DataException {
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  QueryDefinition qd=new QueryDefinition();
  populateColumnBinding(qd,rowBeArray,totalBeArray);
  qd.setQueryResultsID(this.GEN_queryResultID);
  QueryDefinition qd2=newReportQuery();
  populateColumnBinding(qd2,rowBeArray,totalBeArray);
  ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"");
  qd2.addFilter(new FilterDefinition(filterExpr));
  GroupDefinition gd=new GroupDefinition();
  gd.setKeyColumn(""String_Node_Str"");
  qd2.addGroup(gd);
  IQueryResults qr=myPreDataEngine.prepare(qd).execute(null);
  this.UPDATE_queryResultID=qr.getID();
  assertTrue(qr.getResultMetaData() != null);
  IResultIterator ri=qr.getResultIterator();
  ri.next();
  do {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri.getValue(totalExprName[i]) + ""String_Node_Str"";
    this.testPrintln(abc + ri.getRowId());
    qd2.setQueryResultsID(ids.get(0).toString());
    ids.remove(0);
    IResultIterator subRi=myPreDataEngine.prepare(qd2).execute(qr,null).getResultIterator();
    while (subRi.next()) {
      abc=""String_Node_Str"";
      for (int i=0; i < rowExprName.length; i++)       abc+=subRi.getValue(rowExprName[i]) + ""String_Node_Str"";
      this.testPrintln(abc);
    }
  }
 while (ri.next());
  this.testPrintln(""String_Node_Str"");
  ri.close();
  myPreDataEngine.shutdown();
  this.closeArchiveReader();
  this.closeArchiveWriter();
}","/** 
 * @param ids
 * @throws BirtException
 * @throws DataException
 */
private void preBasicNestedQuery(List ids) throws BirtException, DataException {
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  IBaseExpression[] rowBeArray=getRowExpr();
  IBinding[] totalBeArray=getAggrExpr();
  QueryDefinition qd=new QueryDefinition();
  populateColumnBinding(qd,rowBeArray,totalBeArray);
  qd.setQueryResultsID(this.GEN_queryResultID);
  QueryDefinition qd2=newReportQuery();
  populateColumnBinding(qd2,rowBeArray,totalBeArray);
  ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"");
  qd2.addFilter(new FilterDefinition(filterExpr));
  GroupDefinition gd=new GroupDefinition();
  gd.setKeyColumn(""String_Node_Str"");
  qd2.addGroup(gd);
  IQueryResults qr=myPreDataEngine.prepare(qd).execute(null);
  this.UPDATE_queryResultID=qr.getID();
  assertTrue(qr.getResultMetaData() != null);
  IResultIterator ri=qr.getResultIterator();
  ri.next();
  do {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri.getValue(totalExprName[i]) + ""String_Node_Str"";
    this.testPrintln(abc + ri.getRowId());
    qd2.setQueryResultsID(ids.get(0).toString());
    ids.remove(0);
    IResultIterator subRi=myPreDataEngine.prepare(qd2).execute(qr,null).getResultIterator();
    while (subRi.next()) {
      abc=""String_Node_Str"";
      for (int i=0; i < rowExprName.length; i++)       abc+=subRi.getValue(rowExprName[i]) + ""String_Node_Str"";
      this.testPrintln(abc);
    }
  }
 while (ri.next());
  this.testPrintln(""String_Node_Str"");
  ri.close();
  myPreDataEngine.shutdown();
  this.closeArchiveReader();
  this.closeArchiveWriter();
}",0.995119445157976
69652,"/** 
 * @param qd1
 * @param rowBeArray
 * @param totalBeArray
 */
private void populateColumnBinding(QueryDefinition qd1,IBaseExpression[] rowBeArray,IBaseExpression[] totalBeArray){
  for (int i=0; i < rowBeArray.length; i++)   qd1.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  for (int i=0; i < totalBeArray.length; i++)   qd1.addResultSetExpression(this.totalExprName[i],totalBeArray[i]);
}","/** 
 * @param qd1
 * @param rowBeArray
 * @param totalBeArray
 * @throws DataException 
 */
private void populateColumnBinding(QueryDefinition qd1,IBaseExpression[] rowBeArray,IBinding[] totalBeArray) throws DataException {
  for (int i=0; i < rowBeArray.length; i++)   qd1.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  for (int i=0; i < totalBeArray.length; i++)   qd1.addBinding(totalBeArray[i]);
}",0.8266666666666667
69653,"/** 
 * @return aggregation expression array
 */
private IBaseExpression[] getAggrExpr(){
  if (this.notIncludeAggr)   return new IBaseExpression[0];
  int num2=2;
  IBaseExpression[] totalBeArray=new IBaseExpression[num2];
  totalBeArray[0]=new ScriptExpression(""String_Node_Str"");
  if (this.USE_ROW_IN_AGGREGATION)   totalBeArray[1]=new ScriptExpression(""String_Node_Str"");
 else   totalBeArray[1]=new ScriptExpression(""String_Node_Str"");
  totalExprName=new String[totalBeArray.length];
  this.totalExprName[0]=""String_Node_Str"";
  this.totalExprName[1]=""String_Node_Str"";
  return totalBeArray;
}","/** 
 * @return aggregation expression array
 * @throws DataException 
 */
private IBinding[] getAggrExpr() throws DataException {
  if (this.notIncludeAggr)   return new IBinding[0];
  totalExprName=new String[2];
  this.totalExprName[0]=""String_Node_Str"";
  this.totalExprName[1]=""String_Node_Str"";
  int num2=2;
  IBinding[] totalBeArray=new IBinding[num2];
  totalBeArray[0]=new Binding(this.totalExprName[0],new ScriptExpression(null));
  if (this.GEN_USE_RUNNING_AGGR)   totalBeArray[0].setAggrFunction(""String_Node_Str"");
 else   totalBeArray[0].setAggrFunction(""String_Node_Str"");
  if (this.USE_ROW_IN_AGGREGATION) {
    totalBeArray[1]=new Binding(this.totalExprName[1],new ScriptExpression(""String_Node_Str""));
  }
 else {
    totalBeArray[1]=new Binding(this.totalExprName[1],new ScriptExpression(""String_Node_Str""));
  }
  if (this.GEN_USE_RUNNING_AGGR)   totalBeArray[1].setAggrFunction(""String_Node_Str"");
 else   totalBeArray[1].setAggrFunction(""String_Node_Str"");
  return totalBeArray;
}",0.4943960149439601
69654,"public void testEmptyResult() throws BirtException {
  try {
    QueryDefinition qd1=newReportQuery();
    IBaseExpression[] rowBeArray=getRowExpr();
    IBaseExpression[] totalBeArray=getAggrExpr();
    populateColumnBinding(qd1,rowBeArray,totalBeArray);
    qd1.addFilter(new FilterDefinition(new ScriptExpression(""String_Node_Str"")));
    IQueryResults qr1=myGenDataEngine.prepare(qd1).execute(scope);
    GEN_queryResultID=qr1.getID();
    IResultIterator ri1=qr1.getResultIterator();
    while (ri1.next()) {
      String abc=""String_Node_Str"";
      for (int i=0; i < rowExprName.length; i++)       abc+=ri1.getValue(this.rowExprName[i]) + ""String_Node_Str"";
      for (int i=0; i < totalExprName.length; i++)       abc+=ri1.getValue(this.totalExprName[i]) + ""String_Node_Str"";
    }
    ri1.close();
    myGenDataEngine.shutdown();
    this.closeArchiveWriter();
    DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
    myPreDataEngine=DataEngine.newDataEngine(deContext2);
    QueryDefinition qd2=newReportQuery();
    populateColumnBinding(qd2,rowBeArray,totalBeArray);
    qd2.addFilter(new FilterDefinition(new ScriptExpression(""String_Node_Str"")));
    SortDefinition sortDefn=new SortDefinition();
    sortDefn.setColumn(""String_Node_Str"");
    qd2.addSort(sortDefn);
    qd2.setQueryResultsID(GEN_queryResultID);
    IQueryResults qr2=myPreDataEngine.prepare(qd2).execute(scope);
    IResultIterator ri2=qr2.getResultIterator();
    while (ri2.next()) {
      String abc=""String_Node_Str"";
      for (int i=0; i < rowExprName.length; i++)       abc+=ri2.getValue(this.rowExprName[i]) + ""String_Node_Str"";
      for (int i=0; i < totalExprName.length; i++)       abc+=ri2.getValue(this.totalExprName[i]) + ""String_Node_Str"";
    }
    ri2.close();
    myPreDataEngine.shutdown();
    this.closeArchiveReader();
    this.closeArchiveWriter();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testEmptyResult() throws BirtException {
  try {
    QueryDefinition qd1=newReportQuery();
    IBaseExpression[] rowBeArray=getRowExpr();
    IBinding[] totalBeArray=getAggrExpr();
    populateColumnBinding(qd1,rowBeArray,totalBeArray);
    qd1.addFilter(new FilterDefinition(new ScriptExpression(""String_Node_Str"")));
    IQueryResults qr1=myGenDataEngine.prepare(qd1).execute(scope);
    GEN_queryResultID=qr1.getID();
    IResultIterator ri1=qr1.getResultIterator();
    while (ri1.next()) {
      String abc=""String_Node_Str"";
      for (int i=0; i < rowExprName.length; i++)       abc+=ri1.getValue(this.rowExprName[i]) + ""String_Node_Str"";
      for (int i=0; i < totalExprName.length; i++)       abc+=ri1.getValue(this.totalExprName[i]) + ""String_Node_Str"";
    }
    ri1.close();
    myGenDataEngine.shutdown();
    this.closeArchiveWriter();
    DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
    myPreDataEngine=DataEngine.newDataEngine(deContext2);
    QueryDefinition qd2=newReportQuery();
    populateColumnBinding(qd2,rowBeArray,totalBeArray);
    qd2.addFilter(new FilterDefinition(new ScriptExpression(""String_Node_Str"")));
    SortDefinition sortDefn=new SortDefinition();
    sortDefn.setColumn(""String_Node_Str"");
    qd2.addSort(sortDefn);
    qd2.setQueryResultsID(GEN_queryResultID);
    IQueryResults qr2=myPreDataEngine.prepare(qd2).execute(scope);
    IResultIterator ri2=qr2.getResultIterator();
    while (ri2.next()) {
      String abc=""String_Node_Str"";
      for (int i=0; i < rowExprName.length; i++)       abc+=ri2.getValue(this.rowExprName[i]) + ""String_Node_Str"";
      for (int i=0; i < totalExprName.length; i++)       abc+=ri2.getValue(this.totalExprName[i]) + ""String_Node_Str"";
    }
    ri2.close();
    myPreDataEngine.shutdown();
    this.closeArchiveReader();
    this.closeArchiveWriter();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9951419074405524
69655,"/** 
 * @return
 */
private QueryDefinition newGenIVReportQuery(){
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  if (this.GEN_use_invalid_column)   qd.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  if (!this.notIncludeAggr) {
    for (int i=0; i < totalBeArray.length; i++)     qd.addResultSetExpression(this.totalExprName[i],totalBeArray[i]);
  }
  if (this.GEN_add_filter == true) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.TEST_ISEMPTY) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.GEN_add_sort) {
    SortDefinition sortDefn=new SortDefinition();
    sortDefn.setColumn(""String_Node_Str"");
    qd.addSort(sortDefn);
  }
  if (this.GEN_add_group == true) {
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
    if (this.GEN_add_subquery == true) {
      SubqueryDefinition subqueryDefn=getSubQueryDefn(qd);
      gd.addSubquery(subqueryDefn);
    }
  }
  if (this.GEN_add_group1 == true) {
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
    gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
  }
  if (add_subquery_on_query) {
    qd.addSubquery(getSubQueryDefn(qd));
  }
  return qd;
}","/** 
 * @return
 * @throws DataException 
 */
private QueryDefinition newGenIVReportQuery() throws DataException {
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBinding[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  if (this.GEN_use_invalid_column)   qd.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  if (!this.notIncludeAggr) {
    for (int i=0; i < totalBeArray.length; i++)     qd.addBinding(totalBeArray[i]);
  }
  if (this.GEN_add_filter == true) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.TEST_ISEMPTY) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.GEN_add_sort) {
    SortDefinition sortDefn=new SortDefinition();
    sortDefn.setColumn(""String_Node_Str"");
    qd.addSort(sortDefn);
  }
  if (this.GEN_add_group == true) {
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
    if (this.GEN_add_subquery == true) {
      SubqueryDefinition subqueryDefn=getSubQueryDefn(qd);
      gd.addSubquery(subqueryDefn);
    }
  }
  if (this.GEN_add_group1 == true) {
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
    gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
  }
  if (add_subquery_on_query) {
    qd.addSubquery(getSubQueryDefn(qd));
  }
  return qd;
}",0.9701454452666496
69656,"public Composite createArea(Composite parent){
  int numColumns=2;
  if (description != null && description.length() > 0) {
    numColumns++;
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    numColumns++;
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    numColumns++;
  }
  cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=numColumns;
    glContent.marginHeight=0;
    glContent.marginWidth=0;
    glContent.horizontalSpacing=2;
    cmpTop.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpTop.setLayoutData(gd);
  }
  Label lblDesc=null;
  if (description != null && description.length() > 0) {
    lblDesc=new Label(cmpTop,SWT.NONE);
    lblDesc.setText(description);
    lblDesc.setToolTipText(tooltipWhenBlank);
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    createAggregationItem(cmpTop);
  }
  boolean isSharingChart=context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY);
  final Object[] predefinedQuery=context.getPredefinedQuery(queryType);
  IDataServiceProvider provider=context.getDataServiceProvider();
  boolean needComboField=predefinedQuery != null && predefinedQuery.length > 0 && (provider.checkState(IDataServiceProvider.SHARE_QUERY) || provider.checkState(IDataServiceProvider.HAS_CUBE) || provider.checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS));
  needComboField&=!isSharingChart;
  boolean hasContentAssist=(!isSharingChart && predefinedQuery != null && predefinedQuery.length > 0);
  if (needComboField) {
    Composite control=new Composite(cmpTop,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.widthHint=80;
    control.setLayoutData(gd);
    GridLayout gl=new GridLayout();
    FieldAssistHelper.getInstance().initDecorationMargin(gl);
    control.setLayout(gl);
    cmbDefinition=new CCombo(control,context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) ? SWT.READ_ONLY | SWT.BORDER : SWT.BORDER);
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.grabExcessHorizontalSpace=true;
    cmbDefinition.setLayoutData(gd);
    if (hasContentAssist) {
      String[] items=getContentItems(predefinedQuery);
      if (items != null) {
        new CComboAssistField(cmbDefinition,null,items);
      }
    }
    if (predefinedQuery.length > 0) {
      populateExprComboItems(predefinedQuery);
    }
 else     if (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str"")) {
      cmbDefinition.setEnabled(false);
    }
    cmbDefinition.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
        String text=cmbDefinition.getText();
        if (!isTableSharedBinding() && text.equals(oldQuery)) {
          return;
        }
        updateQuery(text);
        if (!oldQuery.equals(text) && queryType == ChartUIConstants.QUERY_VALUE) {
          if (context.getDataServiceProvider().update(ChartUIConstants.QUERY_VALUE,text)) {
            Event e=new Event();
            e.data=BaseDataDefinitionComponent.this;
            e.widget=cmbDefinition;
            e.type=IChartDataSheet.EVENT_QUERY;
            context.getDataSheet().notifyListeners(e);
          }
        }
        if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) && ChartUIConstants.QUERY_CATEGORY.equals(queryType) && context.getModel() instanceof ChartWithAxes) {
          ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
        }
        if (predefinedQuery.length == 0 && (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str""))) {
          cmbDefinition.setEnabled(false);
        }
      }
    }
);
    cmbDefinition.addModifyListener(this);
    cmbDefinition.addFocusListener(this);
    cmbDefinition.addKeyListener(this);
    initComboExprText();
  }
 else {
    Composite control=cmpTop;
    if (hasContentAssist) {
      control=new Composite(cmpTop,SWT.NONE);
      GridData gd=new GridData(GridData.FILL_BOTH);
      gd.widthHint=80;
      control.setLayoutData(gd);
      GridLayout gl=new GridLayout();
      FieldAssistHelper.getInstance().initDecorationMargin(gl);
      control.setLayout(gl);
    }
    txtDefinition=new Text(control,SWT.BORDER | SWT.SINGLE);
    GridData gdTXTDefinition=new GridData(GridData.FILL_HORIZONTAL);
    gdTXTDefinition.widthHint=80;
    gdTXTDefinition.grabExcessHorizontalSpace=true;
    txtDefinition.setLayoutData(gdTXTDefinition);
    if (query != null && query.getDefinition() != null) {
      txtDefinition.setText(query.getDefinition());
      txtDefinition.setToolTipText(getTooltipForDataText(query.getDefinition()));
    }
    txtDefinition.addModifyListener(this);
    txtDefinition.addFocusListener(this);
    txtDefinition.addKeyListener(this);
    if (hasContentAssist) {
      String[] items=getContentItems(predefinedQuery);
      if (items != null) {
        TextAssistField taf=new TextAssistField(txtDefinition,null,items);
        ((CTextContentAdapter)taf.getContentAdapter()).addContentChangeListener(new IContentChangeListener(){
          public void contentChanged(          Control control,          Object newValue,          Object oldValue){
            isQueryModified=true;
            saveQuery();
          }
        }
);
      }
    }
  }
  Control dropControl=getInputControl();
  DropTarget target=new DropTarget(dropControl,DND.DROP_COPY);
  Transfer[] types=new Transfer[]{SimpleTextTransfer.getInstance()};
  target.setTransfer(types);
  target.addDropListener(new DataTextDropListener(dropControl));
  DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl,this);
  btnBuilder=new Button(cmpTop,SWT.PUSH);
{
    GridData gdBTNBuilder=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNBuilder);
    btnBuilder.setLayoutData(gdBTNBuilder);
    btnBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnBuilder.addSelectionListener(this);
    btnBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnBuilder.getImage().setBackground(btnBuilder.getBackground());
    btnBuilder.setEnabled(context.getUIServiceProvider().isInvokingSupported());
    btnBuilder.setVisible(context.getUIServiceProvider().isEclipseModeSupported());
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    btnGroup=new Button(cmpTop,SWT.PUSH);
    GridData gdBTNGroup=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup);
    btnGroup.setLayoutData(gdBTNGroup);
    btnGroup.setImage(UIHelper.getImage(""String_Node_Str""));
    btnGroup.addSelectionListener(this);
    btnGroup.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  setColor();
  boolean isCubeNoMultiDimensions=(provider.checkState(IDataServiceProvider.HAS_CUBE) || provider.checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) && !provider.checkState(IDataServiceProvider.MULTI_CUBE_DIMENSIONS);
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) || context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY)) {
    if (txtDefinition != null && (!context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY) || isSharingChart)) {
      txtDefinition.setEnabled(false);
    }
    btnBuilder.setEnabled(false);
    if (btnGroup != null) {
      btnGroup.setEnabled(false);
    }
  }
  if (cmbDefinition != null && ChartUIConstants.QUERY_OPTIONAL.equals(queryType) && isCubeNoMultiDimensions) {
    cmbDefinition.setEnabled(false);
    btnBuilder.setEnabled(false);
  }
  setTooltipForInputControl();
  boolean isRequiredField=(ChartUIConstants.QUERY_CATEGORY.equals(queryType));
  if (lblDesc != null && isRequiredField) {
    FieldAssistHelper.getInstance().addRequiredFieldIndicator(lblDesc);
  }
  return cmpTop;
}","public Composite createArea(Composite parent){
  int numColumns=2;
  if (description != null && description.length() > 0) {
    numColumns++;
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    numColumns++;
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    numColumns++;
  }
  cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=numColumns;
    glContent.marginHeight=0;
    glContent.marginWidth=0;
    glContent.horizontalSpacing=2;
    cmpTop.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpTop.setLayoutData(gd);
  }
  Label lblDesc=null;
  if (description != null && description.length() > 0) {
    lblDesc=new Label(cmpTop,SWT.NONE);
    lblDesc.setText(description);
    lblDesc.setToolTipText(tooltipWhenBlank);
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    createAggregationItem(cmpTop);
  }
  boolean isSharingChart=context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY);
  final Object[] predefinedQuery=context.getPredefinedQuery(queryType);
  IDataServiceProvider provider=context.getDataServiceProvider();
  boolean needComboField=predefinedQuery != null && predefinedQuery.length > 0 && (provider.checkState(IDataServiceProvider.SHARE_QUERY) || provider.checkState(IDataServiceProvider.HAS_CUBE) || provider.checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS));
  needComboField&=!isSharingChart;
  boolean hasContentAssist=(!isSharingChart && predefinedQuery != null && predefinedQuery.length > 0);
  if (needComboField) {
    Composite control=new Composite(cmpTop,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.widthHint=80;
    control.setLayoutData(gd);
    GridLayout gl=new GridLayout();
    FieldAssistHelper.getInstance().initDecorationMargin(gl);
    control.setLayout(gl);
    cmbDefinition=new CCombo(control,context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) ? SWT.READ_ONLY | SWT.BORDER : SWT.BORDER);
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.grabExcessHorizontalSpace=true;
    cmbDefinition.setLayoutData(gd);
    if (hasContentAssist) {
      String[] items=getContentItems(predefinedQuery);
      if (items != null) {
        new CComboAssistField(cmbDefinition,null,items);
      }
    }
    if (predefinedQuery.length > 0) {
      populateExprComboItems(predefinedQuery);
    }
 else     if (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str"")) {
      cmbDefinition.setEnabled(false);
    }
    cmbDefinition.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
        String text=cmbDefinition.getText();
        if (!isTableSharedBinding() && text.equals(oldQuery)) {
          return;
        }
        updateQuery(text);
        if (!oldQuery.equals(text) && queryType == ChartUIConstants.QUERY_VALUE) {
          if (context.getDataServiceProvider().update(ChartUIConstants.QUERY_VALUE,text)) {
            Event e=new Event();
            e.data=BaseDataDefinitionComponent.this;
            e.widget=cmbDefinition;
            e.type=IChartDataSheet.EVENT_QUERY;
            context.getDataSheet().notifyListeners(e);
          }
        }
        if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) && ChartUIConstants.QUERY_CATEGORY.equals(queryType) && context.getModel() instanceof ChartWithAxes) {
          ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
        }
        if (predefinedQuery.length == 0 && (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str""))) {
          cmbDefinition.setEnabled(false);
        }
      }
    }
);
    cmbDefinition.addModifyListener(this);
    cmbDefinition.addFocusListener(this);
    cmbDefinition.addKeyListener(this);
    initComboExprText();
  }
 else {
    Composite control=cmpTop;
    if (hasContentAssist) {
      control=new Composite(cmpTop,SWT.NONE);
      GridData gd=new GridData(GridData.FILL_BOTH);
      gd.widthHint=80;
      control.setLayoutData(gd);
      GridLayout gl=new GridLayout();
      FieldAssistHelper.getInstance().initDecorationMargin(gl);
      control.setLayout(gl);
    }
    txtDefinition=new Text(control,SWT.BORDER | SWT.SINGLE);
    GridData gdTXTDefinition=new GridData(GridData.FILL_HORIZONTAL);
    gdTXTDefinition.widthHint=80;
    gdTXTDefinition.grabExcessHorizontalSpace=true;
    txtDefinition.setLayoutData(gdTXTDefinition);
    if (query != null && query.getDefinition() != null) {
      txtDefinition.setText(query.getDefinition());
      txtDefinition.setToolTipText(getTooltipForDataText(query.getDefinition()));
    }
    txtDefinition.addModifyListener(this);
    txtDefinition.addFocusListener(this);
    txtDefinition.addKeyListener(this);
    if (hasContentAssist) {
      String[] items=getContentItems(predefinedQuery);
      if (items != null) {
        TextAssistField taf=new TextAssistField(txtDefinition,null,items);
        ((CTextContentAdapter)taf.getContentAdapter()).addContentChangeListener(new IContentChangeListener(){
          public void contentChanged(          Control control,          Object newValue,          Object oldValue){
            isQueryModified=true;
            saveQuery();
          }
        }
);
      }
    }
  }
  Control dropControl=getInputControl();
  DropTarget target=new DropTarget(dropControl,DND.DROP_COPY);
  Transfer[] types=new Transfer[]{SimpleTextTransfer.getInstance()};
  target.setTransfer(types);
  target.addDropListener(new DataTextDropListener(dropControl));
  DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl,this);
  btnBuilder=new Button(cmpTop,SWT.PUSH);
{
    GridData gdBTNBuilder=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNBuilder);
    btnBuilder.setLayoutData(gdBTNBuilder);
    btnBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnBuilder.addSelectionListener(this);
    btnBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnBuilder.getImage().setBackground(btnBuilder.getBackground());
    btnBuilder.setEnabled(context.getUIServiceProvider().isInvokingSupported());
    btnBuilder.setVisible(context.getUIServiceProvider().isEclipseModeSupported());
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    btnGroup=new Button(cmpTop,SWT.PUSH);
    GridData gdBTNGroup=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup);
    btnGroup.setLayoutData(gdBTNGroup);
    btnGroup.setImage(UIHelper.getImage(""String_Node_Str""));
    btnGroup.addSelectionListener(this);
    btnGroup.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  setColor();
  boolean isCubeNoMultiDimensions=(provider.checkState(IDataServiceProvider.HAS_CUBE) || provider.checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) && !provider.checkState(IDataServiceProvider.MULTI_CUBE_DIMENSIONS);
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) || context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY)) {
    if (txtDefinition != null && (!context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY) || isSharingChart)) {
      if (!ChartUIConstants.QUERY_OPTIONAL.equals(queryType) || !provider.checkState(IDataServiceProvider.SHARE_TABLE_QUERY) || getQuery().getDefinition() == null || getQuery().getDefinition().trim().length() == 0) {
        txtDefinition.setEnabled(false);
      }
    }
    btnBuilder.setEnabled(false);
    if (btnGroup != null) {
      btnGroup.setEnabled(false);
    }
  }
  if (cmbDefinition != null && ChartUIConstants.QUERY_OPTIONAL.equals(queryType) && isCubeNoMultiDimensions) {
    cmbDefinition.setEnabled(false);
    btnBuilder.setEnabled(false);
  }
  setTooltipForInputControl();
  boolean isRequiredField=(ChartUIConstants.QUERY_CATEGORY.equals(queryType));
  if (lblDesc != null && isRequiredField) {
    FieldAssistHelper.getInstance().addRequiredFieldIndicator(lblDesc);
  }
  return cmpTop;
}",0.94483055538471
69657,"/** 
 * Computes for non-study-layout case.
 * @throws ChartException
 * @throws IllegalArgumentException
 */
private void computeCommon() throws ChartException, IllegalArgumentException {
  ChartWithAxes cwa=getModel();
  double dX=boPlot.getLeft();
  double dY=boPlot.getTop();
  double dW=boPlot.getWidth();
  double dH=boPlot.getHeight();
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    if (rtc.getSharedScale() != null) {
      dsi=rtc.getSharedScale().createDataSetIterator(iAxisType);
    }
 else {
      dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
    }
    dsi.reverse(cwa.isReverseCategory());
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax,aax.getPrimaryOrthogonal());
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax,aax.getPrimaryOrthogonal());
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,goFactory.createBounds(dX,dY,dW,dH));
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  computePlotBackground(aax.getPrimaryBase(),new OneAxis[]{aax.getPrimaryOrthogonal()});
  computePlotWithMargin(axPH,axPV);
}","/** 
 * Computes for non-study-layout case.
 * @throws ChartException
 * @throws IllegalArgumentException
 */
private void computeCommon() throws ChartException, IllegalArgumentException {
  ChartWithAxes cwa=getModel();
  double dX=boPlot.getLeft();
  double dY=boPlot.getTop();
  double dW=boPlot.getWidth();
  double dH=boPlot.getHeight();
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    if (rtc.getSharedScale() != null) {
      dsi=rtc.getSharedScale().createDataSetIterator(iAxisType);
    }
 else {
      dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
    }
    dsi.reverse(cwa.isReverseCategory());
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax,aax.getPrimaryOrthogonal());
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax,aax.getPrimaryOrthogonal());
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,goFactory.createBounds(dX,dY,dW,dH));
  adjustOverlayAxesDueToEndShifts();
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  computePlotBackground(aax.getPrimaryBase(),new OneAxis[]{aax.getPrimaryOrthogonal()});
  computePlotWithMargin(axPH,axPV);
}",0.995204147764096
69658,"public Object load(){
  if (input == null)   return ""String_Node_Str"";
  DesignElementHandle handle=(DesignElementHandle)DEUtil.getInputFirstElement(input);
  if (handle.getExtends() == null)   return ""String_Node_Str"";
  try {
    String filePath=DEUtil.getFilePathFormURL(new URL(handle.getExtends().getRoot().getFileName()));
    if (filePath != null) {
      File libraryFile=new File(filePath);
      if (libraryFile.exists())       return libraryFile.getAbsolutePath();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  return ""String_Node_Str"";
}","public Object load(){
  if (input == null)   return ""String_Node_Str"";
  DesignElementHandle handle=(DesignElementHandle)DEUtil.getInputFirstElement(input);
  if (handle.getExtends() == null)   return ""String_Node_Str"";
  String filePath=null;
  try {
    filePath=DEUtil.getFilePathFormURL(new URL(handle.getExtends().getRoot().getFileName()));
  }
 catch (  Exception e) {
    filePath=handle.getExtends().getRoot().getFileName();
  }
  if (filePath != null) {
    File libraryFile=new File(filePath);
    if (libraryFile.exists())     return libraryFile.getAbsolutePath();
  }
  return ""String_Node_Str"";
}",0.8270042194092827
69659,"/** 
 * @return
 * @throws DataException
 */
private IQueryDefinition createScriptDataSetQuery() throws DataException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(""String_Node_Str"");
  query.addBinding(new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str"")));
  return query;
}","/** 
 * @return
 * @throws DataException
 */
private IQueryDefinition createScriptDataSetQuery() throws DataException {
  QueryDefinition query=new QueryDefinition();
  query.setDataSetName(""String_Node_Str"");
  query.addBinding(new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str"")));
  query.addBinding(new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str"")));
  return query;
}",0.8547945205479452
69660,"void mouseDown(MouseEvent e){
  if (e.widget.equals(cnvMarkers)) {
    int ix=e.x / MARKER_BLOCK_WIDTH;
    int iy=e.y / MARKER_BLOCK_HEIGHT + iStartRow;
    iSelectedIndex=iy * MARKER_ROW_MAX_NUMBER + ix;
    if (ix >= MARKER_ROW_MAX_NUMBER || iSelectedIndex >= getMarkers().size()) {
      return;
    }
    this.cnvMarkers.redraw();
    setEnabledState();
  }
}","void mouseDown(MouseEvent e){
  if (e.widget.equals(cnvMarkers)) {
    int ix=e.x / MARKER_BLOCK_WIDTH;
    int iy=e.y / MARKER_BLOCK_HEIGHT + iStartRow;
    int clickIndex=iy * MARKER_ROW_MAX_NUMBER + ix;
    if (ix >= MARKER_ROW_MAX_NUMBER || clickIndex >= getMarkers().size()) {
      return;
    }
    iSelectedIndex=clickIndex;
    this.cnvMarkers.redraw();
    setEnabledState();
  }
}",0.6781456953642384
69661,"/** 
 * Updates the event by given LabelBlock object.
 */
public final String updateFrom(LabelBlock lb,double dScale,RunTimeContext rtc){
  final String sPreviousValue=lb.getLabel().getCaption().getValue();
  lb.getLabel().getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
  setLabel(lb.getLabel());
  Bounds bo=goFactory.scaleBounds(lb.getBounds(),dScale);
  bo.adjust(goFactory.scaleInsets(lb.getInsets(),dScale));
  setBlockBounds(bo);
  setBlockAlignment(lb.getLabel().getCaption().getFont().getAlignment());
  setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
  return sPreviousValue;
}","/** 
 * Updates the event by given LabelBlock object.
 */
public final void updateFrom(LabelBlock lb,double dScale,RunTimeContext rtc){
  setLabel(lb.getLabel());
  Bounds bo=goFactory.scaleBounds(lb.getBounds(),dScale);
  bo.adjust(goFactory.scaleInsets(lb.getInsets(),dScale));
  setBlockBounds(bo);
  setBlockAlignment(lb.getLabel().getCaption().getFont().getAlignment());
  setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
}",0.8217054263565892
69662,"protected BoundingBox computeBox(IDisplayServer xs,RunTimeContext rtc) throws ChartException {
  Label la=goFactory.copyOf(getLabel());
  final String sPreviousValue=la.getCaption().getValue();
  la.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
  la.setEllipsis(1);
  Map<Label,LabelLimiter> mapLimiter=rtc.getState(RunTimeContext.StateKey.LABEL_LIMITER_LOOKUP_KEY);
  LabelLimiter lbLimiter=mapLimiter.get(getLabel());
  lbLimiter.computeWrapping(xs,la);
  int iTitileAnchor=getAnchor().getValue();
  EnumSet<LabelLimiter.Option> option=iTitileAnchor == Anchor.EAST || iTitileAnchor == Anchor.WEST ? EnumSet.of(LabelLimiter.Option.FIX_HEIGHT) : EnumSet.of(LabelLimiter.Option.FIX_WIDTH);
  IChartComputation cComp=rtc.getState(StateKey.CHART_COMPUTATION_KEY);
  LabelLimiter lbLimiterNew=lbLimiter.limitLabelSize(cComp,xs,la,option);
  mapLimiter.put(getLabel(),lbLimiterNew);
  return lbLimiterNew.getBounding(null);
}","protected BoundingBox computeBox(IDisplayServer xs,RunTimeContext rtc) throws ChartException {
  Label la=goFactory.copyOf(getLabel());
  final String sPreviousValue=la.getCaption().getValue();
  la.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
  la.setEllipsis(1);
  Map<Label,LabelLimiter> mapLimiter=rtc.getState(RunTimeContext.StateKey.LABEL_LIMITER_LOOKUP_KEY);
  LabelLimiter lbLimiter=mapLimiter.get(getLabel());
  lbLimiter.computeWrapping(xs,la);
  IChartComputation cComp=rtc.getState(StateKey.CHART_COMPUTATION_KEY);
  LabelLimiter lbLimiterNew=lbLimiter.limitLabelSize(cComp,xs,la);
  mapLimiter.put(getLabel(),lbLimiterNew);
  return lbLimiterNew.getBounding(null);
}",0.8166259168704156
69663,"/** 
 * Renders all blocks using the appropriate block z-order and the containment hierarchy.
 * @param bo
 */
public void render(Map<Series,LegendItemRenderingHints> htRenderers,Bounds bo) throws ChartException {
  final boolean bFirstInSequence=(iSeriesIndex == 0);
  final boolean bLastInSequence=(iSeriesIndex == iSeriesCount - 1);
  boolean bStarted=bFirstInSequence;
  Block bl=cm.getBlock();
  final Enumeration<Block> e=bl.children(true);
  final BlockGenerationEvent bge=new BlockGenerationEvent(this);
  final IDeviceRenderer idr=getDevice();
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  if (bFirstInSequence) {
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
    bge.updateBlock(bl);
    renderChartBlock(idr,bl,StructureSource.createChartBlock(bl));
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
  }
  while (e.hasMoreElements()) {
    bl=e.nextElement();
    bge.updateBlock(bl);
    if (bl instanceof Plot) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderPlot(ir,(Plot)bl);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      if (bFirstInSequence && !bLastInSequence) {
        break;
      }
      if (!bStarted) {
        bStarted=true;
      }
    }
 else     if (bl instanceof TitleBlock && bStarted) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderTitle(ir,(TitleBlock)bl);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    }
 else     if (bl instanceof LabelBlock && bStarted) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderLabel(ir,bl,StructureSource.createUnknown(bl));
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    }
 else     if (bl instanceof Legend && bStarted && bLastInSequence) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderLegend(idr,(Legend)bl,htRenderers);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    }
 else     if (bStarted) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderBlock(ir,bl,StructureSource.createUnknown(bl));
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    }
  }
  if (bLastInSequence) {
    try {
      fDeferredCacheManager.flushAll();
    }
 catch (    ChartException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
  }
}","/** 
 * Renders all blocks using the appropriate block z-order and the containment hierarchy.
 * @param bo
 */
public void render(Map<Series,LegendItemRenderingHints> htRenderers,Bounds bo) throws ChartException {
  final boolean bFirstInSequence=(iSeriesIndex == 0);
  final boolean bLastInSequence=(iSeriesIndex == iSeriesCount - 1);
  boolean bStarted=bFirstInSequence;
  Block bl=cm.getBlock();
  final Enumeration<Block> e=bl.children(true);
  final BlockGenerationEvent bge=new BlockGenerationEvent(this);
  final IDeviceRenderer idr=getDevice();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  if (bFirstInSequence) {
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
    bge.updateBlock(bl);
    renderChartBlock(idr,bl,StructureSource.createChartBlock(bl));
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
  }
  while (e.hasMoreElements()) {
    bl=e.nextElement();
    bge.updateBlock(bl);
    if (bl instanceof Plot) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderPlot(ir,(Plot)bl);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      if (bFirstInSequence && !bLastInSequence) {
        break;
      }
      if (!bStarted) {
        bStarted=true;
      }
    }
 else     if (bl instanceof TitleBlock && bStarted) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderTitle(ir,(TitleBlock)bl);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    }
 else     if (bl instanceof LabelBlock && bStarted) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderLabel(ir,bl,StructureSource.createUnknown(bl));
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    }
 else     if (bl instanceof Legend && bStarted && bLastInSequence) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderLegend(idr,(Legend)bl,htRenderers);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    }
 else     if (bStarted) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
      renderBlock(ir,bl,StructureSource.createUnknown(bl));
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    }
  }
  if (bLastInSequence) {
    try {
      fDeferredCacheManager.flushAll();
    }
 catch (    ChartException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
  }
}",0.9996422182468694
69664,"/** 
 * Internally provided to render a single legend entry
 * @param ipr
 * @param lg
 * @param la
 * @param dX
 * @param dY
 * @param dW
 * @param dItemHeight
 * @param dLeftInset
 * @param dHorizontalSpacing
 * @param se
 * @param fPaletteEntry
 * @param lirh
 * @param i data row index
 * @throws ChartException
 */
protected final void renderLegendItem(IPrimitiveRenderer ipr,Legend lg,Label la,Label valueLa,LegendItemHints lih,double dX,double dY,double dItemHeight,double dColumnWidth,double dLeftInset,double dHorizontalSpacing,Fill fPaletteEntry,LegendItemRenderingHints lirh,double dScale) throws ChartException {
  double dFullHeight=lih.getItemHeight();
  double dExtraHeight=lih.getValueHeight();
  Series se=lih.getSeries();
  int dataIndex=lih.getIndex();
  if (la != null && la.getCaption() != null && valueLa != null && valueLa.getCaption() != null) {
    valueLa.getCaption().setFont(goFactory.copyOf(la.getCaption().getFont()));
    valueLa.getCaption().setColor(goFactory.copyOf(la.getCaption().getColor()));
  }
  LegendEntryRenderingHints lerh=new LegendEntryRenderingHints(la,valueLa,dataIndex,fPaletteEntry);
  AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ENTRY,la);
  final Bounds bo=lirh.getLegendGraphicBounds();
  if (isRightToLeft()) {
    bo.setLeft((dX + dColumnWidth - dLeftInset - 1 - 3 * dItemHeight / 2) / dScale);
  }
 else {
    bo.setLeft((dX + dLeftInset + 1) / dScale);
  }
  bo.setTop((dY + 1 + (dFullHeight - dItemHeight) / 2) / dScale);
  bo.setWidth((3 * dItemHeight / 2) / dScale);
  bo.setHeight((dItemHeight - 2) / dScale);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ITEM,lerh);
  if (la != null) {
    la.getCaption().setValue(EllipsisHelper.ellipsisString(la.getCaption().getValue(),lih.getValidItemLen()));
  }
  cComp.applyWrapping(xs,la,lg.getWrappingSize());
  bo.setLeft(bo.getLeft() * dScale);
  bo.setTop(bo.getTop() * dScale);
  bo.setWidth(bo.getWidth() * dScale);
  bo.setHeight(bo.getHeight() * dScale);
  final BaseRenderer br=lirh.getRenderer();
  br.renderLegendGraphic(ipr,lg,fPaletteEntry,bo);
  final TextRenderEvent tre=((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),TextRenderEvent.class);
  double dLaAngle=la.getCaption().getFont().getRotation();
  if (isRightToLeft()) {
    dLaAngle=-dLaAngle;
  }
  double dDeltaHeight=0;
  if (dLaAngle > 0 && dLaAngle < 90) {
    dDeltaHeight=(bo.getHeight() + dFullHeight - dItemHeight) / 2;
  }
 else   if (dLaAngle < 0 && dLaAngle > -90) {
    dDeltaHeight=(bo.getHeight() - dFullHeight + dItemHeight) / 2;
  }
 else   if (dLaAngle == 0 || dLaAngle == 90 || dLaAngle == -90) {
    dDeltaHeight=bo.getHeight() / 2;
  }
  if (isRightToLeft()) {
    tre.setLocation(goFactory.createLocation(dX + dColumnWidth - dLeftInset - 3 * dItemHeight / 2 - dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.LEFT);
  }
 else {
    tre.setLocation(goFactory.createLocation(dX + dLeftInset + (3 * dItemHeight / 2)+ dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.RIGHT);
  }
  if (la.isVisible()) {
    tre.setLabel(la);
    tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
    if (rtc.isRightToLeftText()) {
      tre.setRtlCaption();
    }
    ipr.drawText(tre);
  }
  if (valueLa != null) {
    final double dValueWidth=dColumnWidth - 2 * dLeftInset;
    Label tmpLa=goFactory.copyOf(valueLa);
    TextAlignment ta=TextAlignmentImpl.create();
    ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    tre.setBlockAlignment(ta);
    tre.setBlockBounds(goFactory.createBounds(dX + dLeftInset + 1,dY + dFullHeight + 1,dValueWidth - 2,dExtraHeight - 1));
    tre.setLabel(tmpLa);
    tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
    if (rtc.isRightToLeftText()) {
      tre.setRtlCaption();
    }
    ipr.drawText(tre);
  }
  la.getCaption().setValue(lih.getItemText());
  if (isInteractivityEnabled()) {
    Trigger tg;
    EList<Trigger> elTriggers=lg.getTriggers();
    Location[] loaHotspot=new Location[4];
    loaHotspot[0]=goFactory.createLocation(dX + 1,dY + 1);
    loaHotspot[1]=goFactory.createLocation(dX + dColumnWidth - 1,dY + 1);
    loaHotspot[2]=goFactory.createLocation(dX + dColumnWidth - 1,dY + dFullHeight + dExtraHeight - 1);
    loaHotspot[3]=goFactory.createLocation(dX + 1,dY + dFullHeight + dExtraHeight - 1);
    Trigger buildinTg=null;
    if (cm.getInteractivity() != null) {
      boolean customed=false;
switch (cm.getInteractivity().getLegendBehavior().getValue()) {
case LegendBehaviorType.HIGHLIGHT_SERIE:
        for (Iterator<Trigger> itr=elTriggers.iterator(); itr.hasNext(); ) {
          tg=itr.next();
          if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.HIGHLIGHT_LITERAL) {
            customed=true;
          }
        }
      if (!customed) {
        buildinTg=goFactory.createTrigger(TriggerCondition.ONCLICK_LITERAL,goFactory.createAction(ActionType.HIGHLIGHT_LITERAL,goFactory.createSeriesValue(String.valueOf(se.getSeriesIdentifier()))));
      }
    break;
case LegendBehaviorType.TOGGLE_SERIE_VISIBILITY:
  for (Iterator<Trigger> itr=elTriggers.iterator(); itr.hasNext(); ) {
    tg=itr.next();
    if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.TOGGLE_VISIBILITY_LITERAL) {
      customed=true;
    }
  }
if (!customed) {
  buildinTg=goFactory.createTrigger(TriggerCondition.ONCLICK_LITERAL,goFactory.createAction(ActionType.TOGGLE_VISIBILITY_LITERAL,goFactory.createSeriesValue(String.valueOf(se.getSeriesIdentifier()))));
}
break;
case LegendBehaviorType.NONE:
break;
}
}
if (!elTriggers.isEmpty() || buildinTg != null) {
final StructureSource source;
if (this.cm.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL) {
final DataPointHints dph=new DataPointHints(la,null,null,null,null,null,null,null,null,dataIndex,null,0,null);
source=WrappedStructureSource.createSeriesDataPoint(se,dph);
}
 else {
source=StructureSource.createSeries(se);
}
final InteractionEvent iev=((EventObjectCache)ipr).getEventObject(source,InteractionEvent.class);
iev.setCursor(lg.getCursor());
for (int t=0; t < elTriggers.size(); t++) {
tg=goFactory.copyOf(elTriggers.get(t));
processTrigger(tg,WrappedStructureSource.createLegendEntry(lg,lih));
iev.addTrigger(tg);
}
if (buildinTg != null) {
processTrigger(buildinTg,WrappedStructureSource.createLegendEntry(lg,lih));
iev.addTrigger(buildinTg);
}
final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(source,PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
ipr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ITEM,lerh);
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ENTRY,la);
}","/** 
 * Internally provided to render a single legend entry
 * @param ipr
 * @param lg
 * @param la
 * @param dX
 * @param dY
 * @param dW
 * @param dItemHeight
 * @param dLeftInset
 * @param dHorizontalSpacing
 * @param se
 * @param fPaletteEntry
 * @param lirh
 * @param i data row index
 * @throws ChartException
 */
protected final void renderLegendItem(IPrimitiveRenderer ipr,Legend lg,Label la,Label valueLa,LegendItemHints lih,double dX,double dY,double dItemHeight,double dColumnWidth,double dLeftInset,double dHorizontalSpacing,Fill fPaletteEntry,LegendItemRenderingHints lirh,double dScale) throws ChartException {
  double dFullHeight=lih.getItemHeight();
  double dExtraHeight=lih.getValueHeight();
  Series se=lih.getSeries();
  int dataIndex=lih.getIndex();
  if (la != null && la.getCaption() != null && valueLa != null && valueLa.getCaption() != null) {
    valueLa.getCaption().setFont(goFactory.copyOf(la.getCaption().getFont()));
    valueLa.getCaption().setColor(goFactory.copyOf(la.getCaption().getColor()));
  }
  LegendEntryRenderingHints lerh=new LegendEntryRenderingHints(la,valueLa,dataIndex,fPaletteEntry);
  AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ENTRY,la);
  final Bounds bo=lirh.getLegendGraphicBounds();
  if (isRightToLeft()) {
    bo.setLeft((dX + dColumnWidth - dLeftInset - 1 - 3 * dItemHeight / 2) / dScale);
  }
 else {
    bo.setLeft((dX + dLeftInset + 1) / dScale);
  }
  bo.setTop((dY + 1 + (dFullHeight - dItemHeight) / 2) / dScale);
  bo.setWidth((3 * dItemHeight / 2) / dScale);
  bo.setHeight((dItemHeight - 2) / dScale);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ITEM,lerh);
  if (la != null) {
    la.getCaption().setValue(EllipsisHelper.ellipsisString(la.getCaption().getValue(),lih.getValidItemLen()));
  }
  cComp.applyWrapping(xs,la,lg.getWrappingSize());
  bo.setLeft(bo.getLeft() * dScale);
  bo.setTop(bo.getTop() * dScale);
  bo.setWidth(bo.getWidth() * dScale);
  bo.setHeight(bo.getHeight() * dScale);
  final BaseRenderer br=lirh.getRenderer();
  br.renderLegendGraphic(ipr,lg,fPaletteEntry,bo);
  final TextRenderEvent tre=((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),TextRenderEvent.class);
  double dLaAngle=la.getCaption().getFont().getRotation();
  if (isRightToLeft()) {
    dLaAngle=-dLaAngle;
  }
  double dDeltaHeight=0;
  if (dLaAngle > 0 && dLaAngle < 90) {
    dDeltaHeight=(bo.getHeight() + dFullHeight - dItemHeight) / 2;
  }
 else   if (dLaAngle < 0 && dLaAngle > -90) {
    dDeltaHeight=(bo.getHeight() - dFullHeight + dItemHeight) / 2;
  }
 else   if (dLaAngle == 0 || dLaAngle == 90 || dLaAngle == -90) {
    dDeltaHeight=bo.getHeight() / 2;
  }
  if (isRightToLeft()) {
    tre.setLocation(goFactory.createLocation(dX + dColumnWidth - dLeftInset - 3 * dItemHeight / 2 - dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.LEFT);
  }
 else {
    tre.setLocation(goFactory.createLocation(dX + dLeftInset + (3 * dItemHeight / 2)+ dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.RIGHT);
  }
  if (la.isVisible()) {
    tre.setLabel(la);
    tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
    if (rtc.isRightToLeftText()) {
      tre.setRtlCaption();
    }
    ipr.drawText(tre);
  }
  if (valueLa != null) {
    final double dValueWidth=dColumnWidth - 2 * dLeftInset;
    Label tmpLa=goFactory.copyOf(valueLa);
    TextAlignment ta=TextAlignmentImpl.create();
    ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    tre.setBlockAlignment(ta);
    tre.setBlockBounds(goFactory.createBounds(dX + dLeftInset + 1,dY + dFullHeight + 1,dValueWidth - 2,dExtraHeight - 1));
    tre.setLabel(tmpLa);
    tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
    if (rtc.isRightToLeftText()) {
      tre.setRtlCaption();
    }
    ipr.drawText(tre);
  }
  la.getCaption().setValue(lih.getItemText());
  if (isInteractivityEnabled()) {
    Trigger tg;
    EList<Trigger> elTriggers=lg.getTriggers();
    Location[] loaHotspot=new Location[4];
    loaHotspot[0]=goFactory.createLocation(dX + 1,dY + 1);
    loaHotspot[1]=goFactory.createLocation(dX + dColumnWidth - 1,dY + 1);
    loaHotspot[2]=goFactory.createLocation(dX + dColumnWidth - 1,dY + dFullHeight + dExtraHeight - 1);
    loaHotspot[3]=goFactory.createLocation(dX + 1,dY + dFullHeight + dExtraHeight - 1);
    Trigger buildinTg=null;
    if (cm.getInteractivity() != null) {
      boolean customed=false;
switch (cm.getInteractivity().getLegendBehavior().getValue()) {
case LegendBehaviorType.HIGHLIGHT_SERIE:
        for (Iterator<Trigger> itr=elTriggers.iterator(); itr.hasNext(); ) {
          tg=itr.next();
          if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.HIGHLIGHT_LITERAL) {
            customed=true;
          }
        }
      if (!customed) {
        buildinTg=goFactory.createTrigger(TriggerCondition.ONCLICK_LITERAL,goFactory.createAction(ActionType.HIGHLIGHT_LITERAL,goFactory.createSeriesValue(String.valueOf(se.getSeriesIdentifier()))));
      }
    break;
case LegendBehaviorType.TOGGLE_SERIE_VISIBILITY:
  for (Iterator<Trigger> itr=elTriggers.iterator(); itr.hasNext(); ) {
    tg=itr.next();
    if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.TOGGLE_VISIBILITY_LITERAL) {
      customed=true;
    }
  }
if (!customed) {
  buildinTg=goFactory.createTrigger(TriggerCondition.ONCLICK_LITERAL,goFactory.createAction(ActionType.TOGGLE_VISIBILITY_LITERAL,goFactory.createSeriesValue(String.valueOf(se.getSeriesIdentifier()))));
}
break;
case LegendBehaviorType.NONE:
break;
}
}
if (!elTriggers.isEmpty() || buildinTg != null) {
final StructureSource source;
if (this.cm.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL) {
final DataPointHints dph=new DataPointHints(la,null,null,null,null,null,null,null,null,dataIndex,null,0,null);
source=WrappedStructureSource.createSeriesDataPoint(se,dph);
}
 else {
source=StructureSource.createSeries(se);
}
final InteractionEvent iev=((EventObjectCache)ipr).getEventObject(source,InteractionEvent.class);
iev.setCursor(lg.getCursor());
for (int t=0; t < elTriggers.size(); t++) {
tg=goFactory.copyOf(elTriggers.get(t));
processTrigger(tg,WrappedStructureSource.createLegendEntry(lg,lih));
iev.addTrigger(tg);
}
if (buildinTg != null) {
processTrigger(buildinTg,WrappedStructureSource.createLegendEntry(lg,lih));
iev.addTrigger(buildinTg);
}
final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(source,PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
ipr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ITEM,lerh);
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ENTRY,la);
}",0.9998013376597576
69665,"void removeDimension(DimensionViewHandle dimensionView,boolean needTransaction) throws SemanticException {
  if (dimensionView == null || dimensionView.getContainer() != crosstabView)   return;
  CommandStack stack=null;
  if (needTransaction) {
    stack=crosstabView.getCommandStack();
    stack.startTrans(Messages.getString(""String_Node_Str""));
  }
  int count=dimensionView.getLevelCount();
  try {
    if (crosstab != null) {
      DimensionViewTask dimTask=new DimensionViewTask(dimensionView);
      for (int i=0; i < count; i++) {
        LevelViewHandle lv=dimensionView.getLevel(0);
        if (lv != null) {
          dimTask.removeLevel(lv,false);
        }
      }
    }
    dimensionView.getModelHandle().drop();
    if (crosstabView.getDimensionCount() == 0) {
      removeGrandTotal(false);
    }
  }
 catch (  SemanticException e) {
    if (needTransaction) {
      stack.rollback();
    }
    throw e;
  }
  if (needTransaction) {
    stack.commit();
  }
}","void removeDimension(DimensionViewHandle dimensionView,boolean needTransaction) throws SemanticException {
  if (dimensionView == null || dimensionView.getContainer() != crosstabView)   return;
  CommandStack stack=null;
  if (needTransaction) {
    stack=crosstabView.getCommandStack();
    stack.startTrans(Messages.getString(""String_Node_Str""));
  }
  int count=dimensionView.getLevelCount();
  try {
    if (crosstabView.getDimensionCount() == 1) {
      removeGrandTotal(false);
    }
    if (crosstab != null) {
      DimensionViewTask dimTask=new DimensionViewTask(dimensionView);
      for (int i=0; i < count; i++) {
        LevelViewHandle lv=dimensionView.getLevel(0);
        if (lv != null) {
          dimTask.removeLevel(lv,false);
        }
      }
    }
    dimensionView.getModelHandle().drop();
  }
 catch (  SemanticException e) {
    if (needTransaction) {
      stack.rollback();
    }
    throw e;
  }
  if (needTransaction) {
    stack.commit();
  }
}",0.9117948717948718
69666,"/** 
 * This method is responsible for computing the aggregation result according to the specified aggregation definitions.
 * @param aggregations
 * @param stopSign
 * @return
 * @throws DataException
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet[] onePassExecute(AggregationDefinition[] aggregations,StopSign stopSign) throws DataException, IOException, BirtException {
  IDiskArray[] dimPosition=getFilterResult();
  int count=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      count++;
    }
  }
  IDimension[] dimensions=cube.getDimesions();
  String[] validDimensionName=new String[count];
  IDiskArray[] validDimPosition=new IDiskArray[count];
  int pos=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      validDimPosition[pos]=dimPosition[i];
      validDimensionName[pos]=dimensions[i].getName();
      pos++;
    }
  }
  FactTableRowIterator factTableRowIterator=new FactTableRowIterator(cube.getFactTable(),validDimensionName,validDimPosition,populateDimensionResultIterator(stopSign),null,stopSign);
  if (cubePosFilters != null && !cubePosFilters.isEmpty()) {
    for (Iterator itr=cubePosFilters.iterator(); itr.hasNext(); ) {
      ICubePosFilter cubePosFilter=(ICubePosFilter)itr.next();
      factTableRowIterator.addCubePosFilter(cubePosFilter);
    }
  }
  for (int i=0; i < measureFilters.size(); i++) {
    factTableRowIterator.addMeasureFilter((IJSFacttableFilterEvalHelper)measureFilters.get(i));
  }
  DimensionResultIterator[] dimensionResultIterators=populateDimensionResultIterator(dimPosition,stopSign);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(factTableRowIterator,dimensionResultIterators,computedMeasureHelper);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(new CubeDimensionReader(cube),dataSet4Aggregation,aggregations);
  return aggregationCalculatorExecutor.execute(stopSign);
}","/** 
 * This method is responsible for computing the aggregation result according to the specified aggregation definitions.
 * @param aggregations
 * @param stopSign
 * @return
 * @throws DataException
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet[] onePassExecute(AggregationDefinition[] aggregations,StopSign stopSign) throws DataException, IOException, BirtException {
  IDiskArray[] dimPosition=getFilterResult();
  int count=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      count++;
    }
  }
  IDimension[] dimensions=cube.getDimesions();
  String[] validDimensionName=new String[count];
  IDiskArray[] validDimPosition=new IDiskArray[count];
  int pos=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      validDimPosition[pos]=dimPosition[i];
      validDimensionName[pos]=dimensions[i].getName();
      pos++;
    }
  }
  FactTableRowIterator factTableRowIterator=new FactTableRowIterator(cube.getFactTable(),validDimensionName,validDimPosition,cube.getDimesions(),null,stopSign);
  if (cubePosFilters != null && !cubePosFilters.isEmpty()) {
    for (Iterator itr=cubePosFilters.iterator(); itr.hasNext(); ) {
      ICubePosFilter cubePosFilter=(ICubePosFilter)itr.next();
      factTableRowIterator.addCubePosFilter(cubePosFilter);
    }
  }
  for (int i=0; i < measureFilters.size(); i++) {
    factTableRowIterator.addMeasureFilter((IJSFacttableFilterEvalHelper)measureFilters.get(i));
  }
  DimensionResultIterator[] dimensionResultIterators=populateDimensionResultIterator(dimPosition,stopSign);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(factTableRowIterator,dimensionResultIterators,computedMeasureHelper);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(new CubeDimensionReader(cube),dataSet4Aggregation,aggregations);
  return aggregationCalculatorExecutor.execute(stopSign);
}",0.9873417721518988
69667,"public Object getLevelAttributeValue(String dimensionName,String levelName,String attributeName) throws DataException, IOException {
  int dimensionIndex=getDimensionIndex(dimensionName);
  if (dimensionIndex < 0) {
    return null;
  }
  Member member;
  try {
    member=getLevelMember(dimensionIndex,levelName);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  int attributeIndex=allCubeDimensionResultIterators[dimensionIndex].getLevelAttributeIndex(levelName,attributeName);
  if (member != null && attributeIndex >= 0)   return member.getAttributes()[attributeIndex];
  return null;
}","public Object getLevelAttributeValue(String dimensionName,String levelName,String attributeName) throws DataException, IOException {
  int dimensionIndex=getDimensionIndex(dimensionName);
  if (dimensionIndex < 0) {
    return null;
  }
  Member member;
  try {
    member=getLevelMember(dimensionIndex,levelName);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  checkAndInitDimIterator(dimensionIndex);
  int attributeIndex=allCubeDimensionResultIterators[dimensionIndex].getLevelAttributeIndex(levelName,attributeName);
  if (member != null && attributeIndex >= 0)   return member.getAttributes()[attributeIndex];
  return null;
}",0.9661150512214342
69668,"/** 
 * @param factTable
 * @param dimensionName
 * @param dimensionPos
 * @param stopSign
 * @throws IOException
 */
public FactTableRowIterator(FactTable factTable,String[] dimensionName,IDiskArray[] dimensionPos,IDimensionResultIterator[] allCubeDimensionResultIterators,IComputedMeasureHelper computedMeasureHelper,StopSign stopSign) throws IOException {
}","/** 
 * @param factTable
 * @param dimensionName
 * @param dimensionPos
 * @param stopSign
 * @throws IOException
 */
public FactTableRowIterator(FactTable factTable,String[] dimensionName,IDiskArray[] dimensionPos,IDimension[] allCubeDimensions,IComputedMeasureHelper computedMeasureHelper,StopSign stopSign) throws IOException {
}",0.9595375722543352
69669,"/** 
 * @param iteratorIndex
 * @param levelIndex
 * @param dimensionPosition
 * @return
 * @throws BirtException
 * @throws IOException
 */
private Member getLevelObject(int dimIndex,int levelIndex,int dimensionPosition) throws BirtException, IOException {
  allCubeDimensionResultIterators[dimIndex].seek(dimensionPosition);
  return allCubeDimensionResultIterators[dimIndex].getLevelMember(levelIndex);
}","/** 
 * @param iteratorIndex
 * @param levelIndex
 * @param dimensionPosition
 * @return
 * @throws BirtException
 * @throws IOException
 */
private Member getLevelObject(int dimIndex,int levelIndex,int dimensionPosition) throws BirtException, IOException {
  checkAndInitDimIterator(dimIndex);
  allCubeDimensionResultIterators[dimIndex].seek(dimensionPosition);
  return allCubeDimensionResultIterators[dimIndex].getLevelMember(levelIndex);
}",0.9565217391304348
69670,"private Member getLevelMember(int dimIndex,String levelName) throws BirtException, IOException {
  int levelIndex=-1;
  if (dimIndex >= 0) {
    IDimensionResultIterator itr=allCubeDimensionResultIterators[dimIndex];
    levelIndex=itr.getLevelIndex(levelName);
    if (levelIndex >= 0)     return getMember(dimIndex,levelIndex);
  }
  return null;
}","private Member getLevelMember(int dimIndex,String levelName) throws BirtException, IOException {
  int levelIndex=-1;
  if (dimIndex >= 0) {
    checkAndInitDimIterator(dimIndex);
    IDimensionResultIterator itr=allCubeDimensionResultIterators[dimIndex];
    levelIndex=itr.getLevelIndex(levelName);
    if (levelIndex >= 0)     return getMember(dimIndex,levelIndex);
  }
  return null;
}",0.9472259810554804
69671,"/** 
 * Create controls in the preview editor.
 * @param parent parent composite
 */
public void createPartControl(Composite parent){
  final ScrolledComposite sc=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  mainPane=new Composite(sc,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  layout.verticalSpacing=0;
  mainPane.setLayout(layout);
  mainPane.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Composite buttonTray=new Composite(mainPane,SWT.NONE);
  GridData gData=new GridData(GridData.FILL_BOTH);
  gData.grabExcessHorizontalSpace=true;
  gData.grabExcessVerticalSpace=false;
  buttonTray.setLayoutData(gData);
  layout=new GridLayout(2,false);
  layout.marginWidth=5;
  layout.horizontalSpacing=0;
  buttonTray.setLayout(layout);
  bParameter=new Button(buttonTray,SWT.PUSH);
  bParameter.setToolTipText(Messages.getString(""String_Node_Str""));
  bParameter.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData();
  bParameter.setLayoutData(gd);
  final FormText note=new FormText(buttonTray,SWT.NONE);
  note.setText(getDisplayInfoText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW)),true,true);
  note.setSize(SWT.DEFAULT - 10,SWT.DEFAULT);
  gd=new GridData();
  gd.horizontalIndent=20;
  note.setLayoutData(gd);
  note.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      if (PreferencesUtil.createPreferenceDialogOn(UIUtil.getDefaultShell(),""String_Node_Str"",new String[]{""String_Node_Str""},null).open() == Window.OK) {
        boolean ret=MessageDialog.openQuestion(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (ret == true) {
          refresh();
        }
      }
    }
  }
);
  ViewerPlugin.getDefault().getPluginPreferences().addPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (note == null || note.isDisposed()) {
        ViewerPlugin.getDefault().getPluginPreferences().removePropertyChangeListener(this);
        return;
      }
      if (WebViewer.PREVIEW_MAXROW.equals(event.getProperty())) {
        note.setText(getDisplayInfoText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW)),true,true);
        buttonTray.layout();
      }
    }
  }
);
  progressBar=new ProgressBar(mainPane,SWT.INDETERMINATE);
  gd=new GridData(GridData.END,GridData.CENTER,false,false);
  gd.heightHint=10;
  gd.widthHint=100;
  progressBar.setLayoutData(gd);
  progressBar.setVisible(true);
  createMainBrowser();
  parameterDialog=new InputParameterHtmlDialog(Display.getCurrent().getActiveShell(),InputParameterHtmlDialog.TITLE,getFileUri(),browser);
  if (bParameter != null) {
    final IWebAppInfo webapp=WebViewer.getCurrentWebApp();
    bParameter.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        if (webapp != null && webapp.useCustomParamHandling()) {
          suggestShowParameterPage=true;
          refresh();
          suggestShowParameterPage=false;
        }
 else {
          parameterDialog.open();
          if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
            refresh();
          }
        }
      }
    }
);
  }
  sc.addControlListener(new ControlAdapter(){
    public void controlResized(    ControlEvent e){
      sc.setMinSize(buttonTray.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      mainPane.layout();
    }
  }
);
  sc.setContent(mainPane);
}","/** 
 * Create controls in the preview editor.
 * @param parent parent composite
 */
public void createPartControl(Composite parent){
  final ScrolledComposite sc=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  mainPane=new Composite(sc,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  layout.verticalSpacing=0;
  mainPane.setLayout(layout);
  mainPane.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Composite buttonTray=new Composite(mainPane,SWT.NONE);
  GridData gData=new GridData(GridData.FILL_BOTH);
  gData.grabExcessHorizontalSpace=true;
  gData.grabExcessVerticalSpace=false;
  buttonTray.setLayoutData(gData);
  layout=new GridLayout(2,false);
  layout.marginWidth=5;
  layout.horizontalSpacing=0;
  buttonTray.setLayout(layout);
  bParameter=new Button(buttonTray,SWT.PUSH);
  bParameter.setToolTipText(Messages.getString(""String_Node_Str""));
  bParameter.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData();
  bParameter.setLayoutData(gd);
  final FormText note=new FormText(buttonTray,SWT.NONE);
  note.setText(getDisplayInfoText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW)),true,true);
  note.setSize(SWT.DEFAULT - 10,SWT.DEFAULT);
  gd=new GridData();
  gd.horizontalIndent=20;
  note.setLayoutData(gd);
  note.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      if (PreferencesUtil.createPreferenceDialogOn(UIUtil.getDefaultShell(),""String_Node_Str"",new String[]{""String_Node_Str""},null).open() == Window.OK) {
        boolean ret=MessageDialog.openQuestion(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (ret == true) {
          refresh();
        }
      }
    }
  }
);
  ViewerPlugin.getDefault().getPluginPreferences().addPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (note == null || note.isDisposed()) {
        ViewerPlugin.getDefault().getPluginPreferences().removePropertyChangeListener(this);
        return;
      }
      if (WebViewer.PREVIEW_MAXROW.equals(event.getProperty())) {
        note.setText(getDisplayInfoText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW)),true,true);
        buttonTray.layout();
      }
    }
  }
);
  progressBar=new ProgressBar(mainPane,SWT.INDETERMINATE);
  gd=new GridData(GridData.END,GridData.CENTER,false,false);
  gd.heightHint=10;
  gd.widthHint=100;
  progressBar.setLayoutData(gd);
  progressBar.setVisible(false);
  createMainBrowser();
  parameterDialog=new InputParameterHtmlDialog(Display.getCurrent().getActiveShell(),InputParameterHtmlDialog.TITLE,getFileUri(),browser);
  if (bParameter != null) {
    final IWebAppInfo webapp=WebViewer.getCurrentWebApp();
    bParameter.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        if (webapp != null && webapp.useCustomParamHandling()) {
          suggestShowParameterPage=true;
          refresh();
          suggestShowParameterPage=false;
        }
 else {
          parameterDialog.open();
          if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
            refresh();
          }
        }
      }
    }
);
  }
  sc.addControlListener(new ControlAdapter(){
    public void controlResized(    ControlEvent e){
      sc.setMinSize(buttonTray.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      mainPane.layout();
    }
  }
);
  sc.setContent(mainPane);
}",0.9990474894543476
69672,"protected boolean refresh(){
  if (isPreviewing)   return false;
  isPreviewing=true;
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (!UIUtil.canPreviewWithErrors(model)) {
    isPreviewing=false;
    return false;
  }
  boolean isDisplay=false;
  if (isMissingParameter()) {
    if (parameterDialog != null) {
      parameterDialog.open();
      if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
        isDisplay=true;
        if (isMissingParameter()) {
          return false;
        }
      }
    }
  }
 else {
    isDisplay=true;
  }
  if (isDisplay) {
    display();
  }
  ReportRequest request=new ReportRequest(ReportPreviewFormPage.this);
  List list=new ArrayList();
  list.add(new Object());
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  isPreviewing=false;
  return true;
}","protected boolean refresh(){
  if (isPreviewing)   return false;
  isPreviewing=true;
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (!UIUtil.canPreviewWithErrors(model)) {
    isPreviewing=false;
    return false;
  }
  boolean isDisplay=false;
  showProgress();
  if (isMissingParameter()) {
    if (parameterDialog != null) {
      parameterDialog.open();
      if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
        isDisplay=true;
        if (isMissingParameter()) {
          return false;
        }
      }
 else {
        hideProgress();
      }
    }
  }
 else {
    isDisplay=true;
  }
  if (isDisplay) {
    display();
  }
  ReportRequest request=new ReportRequest(ReportPreviewFormPage.this);
  List list=new ArrayList();
  list.add(new Object());
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  isPreviewing=false;
  return true;
}",0.9712871287128712
69673,"/** 
 * @return true if BIRT render the report page by page. false if BIRTrender the report as a whole page.
 */
protected boolean needPagedExecutor(List<long[]> pageSequences){
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    if (pageSequences == null) {
      return false;
    }
    if (pageSequences != null && pageSequences.size() == 1) {
      long[] pages=pageSequences.get(0);
      if (pages[0] == 1) {
        return false;
      }
    }
    return true;
  }
  int pageCount=getPageCount();
  if (pageCount == 1) {
    return true;
  }
  IRenderOption renderOption=executionContext.getRenderOption();
  HTMLRenderOption htmlRenderOption=new HTMLRenderOption(renderOption);
  boolean htmlPagination=htmlRenderOption.getHtmlPagination();
  if (!htmlPagination) {
    return false;
  }
  return true;
}","/** 
 * @return true if BIRT render the report page by page. false if BIRTrender the report as a whole page.
 */
protected boolean needPagedExecutor(List<long[]> pageSequences){
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    if (pageSequences == null) {
      return false;
    }
    if (pageSequences != null && pageSequences.size() == 1) {
      long[] pages=pageSequences.get(0);
      if (pages[0] == 1 && pages[1] == reportDocument.getPageCount()) {
        return false;
      }
    }
    return true;
  }
  int pageCount=getPageCount();
  if (pageCount == 1) {
    return true;
  }
  IRenderOption renderOption=executionContext.getRenderOption();
  HTMLRenderOption htmlRenderOption=new HTMLRenderOption(renderOption);
  boolean htmlPagination=htmlRenderOption.getHtmlPagination();
  if (!htmlPagination) {
    return false;
  }
  return true;
}",0.9736379613356766
69674,"/** 
 * Draws the background image at the contentByteUnder of the PPT with the given offset
 * @param imageURI the URI referring the image
 * @param x the start X coordinate at the PPT where the image is positioned
 * @param y the start Y coordinate at the PPT where the image is positioned
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 * @param positionX the offset X percentage relating to start X
 * @param positionY the offset Y percentage relating to start Y
 * @param repeat the background-repeat property
 * @param xMode whether the horizontal position is a percentage value or not
 * @param yMode whether the vertical position is a percentage value or not
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float iWidth,float iHeight,float positionX,float positionY,int repeat){
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  float imageWidth=iWidth;
  float imageHeight=iHeight;
  String extension=getImageExtension(imageURI);
  Image image=EmitterUtil.parseImage(null,IImageContent.IMAGE_URL,imageURI,null,extension);
  byte[] imageData=image.getData();
  if (imageWidth == 0 || imageHeight == 0) {
    imageWidth=image.getWidth();
    imageHeight=image.getHeight();
  }
  ImageInfo imageInfo=getImageInfo(imageURI,imageData,extension);
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  Position imageSize=new Position(imageWidth,imageHeight);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    exportImageDefn(imageInfo.imageName,imageInfo.imageId,imageWidth,imageHeight,position.getX(),position.getY(),null);
  }
}","/** 
 * Draws the background image at the contentByteUnder of the PPT with the given offset
 * @param imageURI the URI referring the image
 * @param x the start X coordinate at the PPT where the image is positioned
 * @param y the start Y coordinate at the PPT where the image is positioned
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 * @param positionX the offset X percentage relating to start X
 * @param positionY the offset Y percentage relating to start Y
 * @param repeat the background-repeat property
 * @param xMode whether the horizontal position is a percentage value or not
 * @param yMode whether the vertical position is a percentage value or not
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float iWidth,float iHeight,float positionX,float positionY,int repeat){
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  float imageWidth=iWidth;
  float imageHeight=iHeight;
  String extension=getImageExtension(imageURI);
  try {
    Image image=EmitterUtil.parseImage(null,IImageContent.IMAGE_URL,imageURI,null,extension);
    byte[] imageData=image.getData();
    if (imageWidth == 0 || imageHeight == 0) {
      imageWidth=image.getWidth();
      imageHeight=image.getHeight();
    }
    ImageInfo imageInfo=getImageInfo(imageURI,imageData,extension);
    Position areaPosition=new Position(x,y);
    Position areaSize=new Position(width,height);
    Position imagePosition=new Position(x + positionX,y + positionY);
    Position imageSize=new Position(imageWidth,imageHeight);
    BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
    Collection positions=layout.getImagePositions(repeat);
    Iterator iterator=positions.iterator();
    while (iterator.hasNext()) {
      Position position=(Position)iterator.next();
      exportImageDefn(imageInfo.imageName,imageInfo.imageId,imageWidth,imageHeight,position.getX(),position.getY(),null);
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
  }
}",0.9676484789956544
69675,"private SheetData createImageData(IImageContent image,StyleEntry entry,XlsContainer container){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Integer.toString(type));
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    return createData(altText,entry);
  }
  Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
  byte[] data=imageInfo.getData();
  if (data != null) {
    return new ImageData(image,entry,type,imageInfo,container);
  }
 else {
    return createData(image.getAltText(),entry);
  }
}","private SheetData createImageData(IImageContent image,StyleEntry entry,XlsContainer container){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Integer.toString(type));
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    return createData(altText,entry);
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    byte[] data=imageInfo.getData();
    if (data != null) {
      return new ImageData(image,entry,type,imageInfo,container);
    }
 else {
      return createData(image.getAltText(),entry);
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    return createData(image.getAltText(),entry);
  }
}",0.911684037301152
69676,"public void startImage(IImageContent image){
  IStyle style=image.getComputedStyle();
  InlineFlag inlineFlag=getInlineFlag(style);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  context.addContainer(false);
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (altText == null) {
      altText=messageFlashObjectNotSupported;
    }
    wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
    return;
  }
  Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),uri,mimeType,extension);
  byte[] data=imageInfo.getData();
  if (data == null || data.length == 0) {
    wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
    return;
  }
  double height=WordUtil.convertImageSize(image.getHeight(),imageInfo.getHeight());
  double width=WordUtil.convertImageSize(image.getWidth(),imageInfo.getWidth());
  writeBookmark(image);
  writeToc(image);
  HyperlinkInfo hyper=getHyperlink(image);
  wordWriter.drawImage(data,height,width,hyper,style,inlineFlag,altText,uri);
}","public void startImage(IImageContent image){
  IStyle style=image.getComputedStyle();
  InlineFlag inlineFlag=getInlineFlag(style);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  context.addContainer(false);
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (altText == null) {
      altText=messageFlashObjectNotSupported;
    }
    wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
    return;
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),uri,mimeType,extension);
    byte[] data=imageInfo.getData();
    if (data == null || data.length == 0) {
      wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
      return;
    }
    double height=WordUtil.convertImageSize(image.getHeight(),imageInfo.getHeight());
    double width=WordUtil.convertImageSize(image.getWidth(),imageInfo.getWidth());
    writeBookmark(image);
    writeToc(image);
    HyperlinkInfo hyper=getHyperlink(image);
    wordWriter.drawImage(data,height,width,hyper,style,inlineFlag,altText,uri);
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
  }
}",0.9416243654822336
69677,"public void drawDocumentBackground(String bgcolor,String backgroundImageUrl,String backgroundHeight,String backgroundWidth){
  writer.openTag(""String_Node_Str"");
  if (backgroundImageUrl != null && backgroundHeight == null && backgroundWidth == null) {
    byte[] backgroundImageData=EmitterUtil.getImageData(backgroundImageUrl);
    drawDocumentBackgroundImage(backgroundImageData);
  }
 else   drawDocumentBackgroundColor(bgcolor);
  writer.closeTag(""String_Node_Str"");
}","public void drawDocumentBackground(String bgcolor,String backgroundImageUrl,String backgroundHeight,String backgroundWidth){
  writer.openTag(""String_Node_Str"");
  if (backgroundImageUrl != null && backgroundHeight == null && backgroundWidth == null) {
    try {
      byte[] backgroundImageData=EmitterUtil.getImageData(backgroundImageUrl);
      drawDocumentBackgroundImage(backgroundImageData);
    }
 catch (    IOException e) {
      logger.log(Level.WARNING,e.getLocalizedMessage());
    }
  }
 else   drawDocumentBackgroundColor(bgcolor);
  writer.closeTag(""String_Node_Str"");
}",0.8941398865784499
69678,"public static byte[] getImageData(String imageURI){
  byte[] imageData=null;
  if (SvgFile.isSvg(imageURI)) {
    try {
      imageData=SvgFile.transSvgToArray(imageURI);
    }
 catch (    IOException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
 else {
    imageData=getNonSVGImageData(imageURI);
  }
  return imageData;
}","public static byte[] getImageData(String imageURI) throws IOException {
  byte[] imageData=null;
  if (SvgFile.isSvg(imageURI)) {
    imageData=SvgFile.transSvgToArray(imageURI);
  }
 else {
    imageData=getNonSVGImageData(imageURI);
  }
  return imageData;
}",0.5074626865671642
69679,"private static byte[] getNonSVGImageData(String imageURI){
  InputStream imageStream=null;
  byte[] imageData;
  try {
    URL url=new URL(imageURI);
    imageStream=url.openStream();
    imageData=readData(imageStream);
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
    imageData=null;
  }
 finally {
    if (imageStream != null) {
      try {
        imageStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return imageData;
}","private static byte[] getNonSVGImageData(String imageURI) throws IOException {
  InputStream imageStream=null;
  byte[] imageData;
  try {
    URL url=new URL(imageURI);
    imageStream=url.openStream();
    imageData=readData(imageStream);
  }
  finally {
    if (imageStream != null) {
      try {
        imageStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return imageData;
}",0.5723830734966593
69680,"public static org.eclipse.birt.report.engine.layout.emitter.Image parseImage(IImageContent image,int imageSource,String uri,String mimeType,String extension){
  org.eclipse.birt.report.engine.layout.emitter.Image imageInfo=null;
  byte[] data=null;
  InputStream in=null;
  try {
switch (imageSource) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URL:
      if (uri != null) {
        if (SvgFile.isSvg(uri)) {
          data=SvgFile.transSvgToArray(uri);
        }
 else {
          data=getNonSVGImageData(uri);
        }
      }
    break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
  data=image.getData();
if (SvgFile.isSvg(mimeType,uri,extension) && null != data) {
  in=new ByteArrayInputStream(data);
  data=SvgFile.transSvgToArray(in);
}
break;
}
imageInfo=new org.eclipse.birt.report.engine.layout.emitter.Image();
if (data != null) {
imageInfo.setInput(data);
if (!imageInfo.check()) {
imageInfo.setData(null);
}
}
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
 finally {
if (in != null) {
try {
in.close();
in=null;
}
 catch (Exception t) {
logger.log(Level.WARNING,t.getMessage());
}
}
}
return imageInfo;
}","public static org.eclipse.birt.report.engine.layout.emitter.Image parseImage(IImageContent image,int imageSource,String uri,String mimeType,String extension) throws IOException {
  org.eclipse.birt.report.engine.layout.emitter.Image imageInfo=null;
  byte[] data=null;
  InputStream in=null;
  try {
switch (imageSource) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URL:
      if (uri != null) {
        if (SvgFile.isSvg(uri)) {
          data=SvgFile.transSvgToArray(uri);
        }
 else {
          data=getNonSVGImageData(uri);
        }
      }
    break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
  data=image.getData();
if (SvgFile.isSvg(mimeType,uri,extension) && null != data) {
  in=new ByteArrayInputStream(data);
  data=SvgFile.transSvgToArray(in);
}
break;
}
imageInfo=new org.eclipse.birt.report.engine.layout.emitter.Image();
if (data != null) {
imageInfo.setInput(data);
if (!imageInfo.check()) {
imageInfo.setData(null);
}
}
}
  finally {
if (in != null) {
try {
in.close();
in=null;
}
 catch (Exception t) {
logger.log(Level.WARNING,t.getMessage());
}
}
}
return imageInfo;
}",0.88504753673293
69681,"/** 
 * @param expList
 * @param uv
 */
private void getURLValueExpressions(List<String> expList,URLValue uv){
  String sa=uv.getBaseUrl();
  try {
    ActionHandle handle=ModuleUtil.deserializeAction(sa);
    String exp;
    if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType())) {
      exp=handle.getURI();
      if (!expList.contains(exp)) {
        expList.add(exp);
      }
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType())) {
      exp=handle.getTargetBookmark();
      if (!expList.contains(exp)) {
        expList.add(exp);
      }
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(handle.getLinkType())) {
      exp=handle.getTargetBookmark();
      if (exp != null && !expList.contains(exp)) {
        expList.add(exp);
      }
      for (Iterator itr=handle.getSearch().iterator(); itr.hasNext(); ) {
        SearchKeyHandle skh=(SearchKeyHandle)itr.next();
        exp=skh.getExpression();
        if (!expList.contains(exp)) {
          expList.add(exp);
        }
      }
      for (Iterator itr=handle.getParamBindings().iterator(); itr.hasNext(); ) {
        ParamBindingHandle pbh=(ParamBindingHandle)itr.next();
        exp=pbh.getExpression();
        if (!expList.contains(exp)) {
          expList.add(exp);
        }
      }
    }
  }
 catch (  DesignFileException e) {
    logger.log(e);
  }
}","/** 
 * @param expList
 * @param uv
 */
private void getURLValueExpressions(List<String> expList,URLValue uv){
  String sa=uv.getBaseUrl();
  try {
    ActionHandle handle=ModuleUtil.deserializeAction(sa);
    String exp;
    if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType())) {
      ExpressionHandle expHandle=handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.Action.URI_MEMBER);
      if (ExpressionType.JAVASCRIPT.equals(expHandle.getType())) {
        exp=expHandle.getStringExpression();
        if (!expList.contains(exp)) {
          expList.add(exp);
        }
      }
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType())) {
      exp=handle.getTargetBookmark();
      if (!expList.contains(exp)) {
        expList.add(exp);
      }
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(handle.getLinkType())) {
      exp=handle.getTargetBookmark();
      if (exp != null && !expList.contains(exp)) {
        expList.add(exp);
      }
      for (Iterator itr=handle.getSearch().iterator(); itr.hasNext(); ) {
        SearchKeyHandle skh=(SearchKeyHandle)itr.next();
        exp=skh.getExpression();
        if (!expList.contains(exp)) {
          expList.add(exp);
        }
      }
      for (Iterator itr=handle.getParamBindings().iterator(); itr.hasNext(); ) {
        ParamBindingHandle pbh=(ParamBindingHandle)itr.next();
        exp=pbh.getExpression();
        if (!expList.contains(exp)) {
          expList.add(exp);
        }
      }
    }
  }
 catch (  DesignFileException e) {
    logger.log(e);
  }
}",0.9103269666558756
69682,"protected String getActionString(ChartHyperlinkActionBase chAction,ActionHandle handle){
  if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType()))   return ChartUtil.stringValue(chAction.evaluate(handle.getURI()));
  if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))   return ChartUtil.stringValue(chAction.evaluate(handle.getTargetBookmark()));
  return null;
}","protected String getActionString(ChartHyperlinkActionBase chAction,ActionHandle handle){
  if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType())) {
    ExpressionHandle urlExpr=handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.Action.URI_MEMBER);
    String text=urlExpr.getStringExpression();
    if (ExpressionType.CONSTANT.equals(urlExpr.getType())) {
      return text;
    }
 else {
      return ChartUtil.stringValue(chAction.evaluate(text));
    }
  }
  if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))   return ChartUtil.stringValue(chAction.evaluate(handle.getTargetBookmark()));
  return null;
}",0.6442477876106195
69683,"public void startCell(ICellContent cell){
  IStyle style=cell.getComputedStyle();
  engine.addCell(cell.getColumn(),cell.getColSpan(),cell.getRowSpan(),style);
}","public void startCell(ICellContent cell){
  IStyle style=cell.getComputedStyle();
  engine.addCell(cell,cell.getColumn(),cell.getColSpan(),cell.getRowSpan(),style);
}",0.9847094801223242
69684,"private void declareStyle(StyleEntry style,int id){
  boolean wrapText=context.getWrappingText();
  String whiteSpace=style.getProperty(StyleConstant.WHITE_SPACE);
  if (CSSConstants.CSS_NOWRAP_VALUE.equals(whiteSpace)) {
    wrapText=false;
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  if (style.getName() == StyleEntry.ENTRYNAME_HYPERLINK) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (id >= StyleEngine.RESERVE_STYLE_ID) {
    String direction=style.getProperty(StyleConstant.DIRECTION_PROP);
    String horizontalAlign=style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign,direction,wrapText);
    writer.openTag(""String_Node_Str"");
    String bottomColor=style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    String topColor=style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    String leftColor=style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    String rightColor=style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    String size=style.getProperty(StyleConstant.FONT_SIZE_PROP);
    String fontStyle=style.getProperty(StyleConstant.FONT_STYLE_PROP);
    String fontWeight=style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    String strikeThrough=style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    String underline=style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    String color=style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    String bgColor=style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
    writeBackGroudColor(bgColor);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}","private void declareStyle(StyleEntry style,int id){
  boolean wrapText=context.getWrappingText();
  String whiteSpace=style.getProperty(StyleConstant.WHITE_SPACE);
  if (CSSConstants.CSS_NOWRAP_VALUE.equals(whiteSpace)) {
    wrapText=false;
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  if (style.getName() == StyleEntry.ENTRYNAME_HYPERLINK) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (id >= StyleEngine.RESERVE_STYLE_ID) {
    String direction=style.getProperty(StyleConstant.DIRECTION_PROP);
    String horizontalAlign=style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign,direction,wrapText);
    writer.openTag(""String_Node_Str"");
    String bottomColor=style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    String topColor=style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    String leftColor=style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    String rightColor=style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    String diagonalColor=style.getProperty(StyleConstant.BORDER_DIAGONAL_COLOR_PROP);
    String diagonalStyle=style.getProperty(StyleConstant.BORDER_DIAGONAL_STYLE_PROP);
    String diagonalWidth=style.getProperty(StyleConstant.BORDER_DIAGONAL_WIDTH_PROP);
    writeBorder(""String_Node_Str"",diagonalStyle,diagonalWidth,diagonalColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    String size=style.getProperty(StyleConstant.FONT_SIZE_PROP);
    String fontStyle=style.getProperty(StyleConstant.FONT_STYLE_PROP);
    String fontWeight=style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    String strikeThrough=style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    String underline=style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    String color=style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    String bgColor=style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
    writeBackGroudColor(bgColor);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}",0.9447368421052632
69685,"public static String convertColor(String value){
  if (value == null || ""String_Node_Str"".equalsIgnoreCase(value)) {
    return StyleConstant.NULL;
  }
  value=ExcelUtil.getValue(value);
  Matcher m=colorp.matcher(value);
  if (m.matches()) {
    StringBuffer buffer=new StringBuffer();
    buffer.append(""String_Node_Str"");
    for (int i=2; i <= 4; i++) {
      String hex=Integer.toHexString(Integer.parseInt(ExcelUtil.getValue(m.group(i)).trim()));
      if (hex.length() < 2) {
        buffer.append(0);
      }
      buffer.append(hex);
    }
    return buffer.toString();
  }
  return StyleConstant.NULL;
}","public static String convertColor(String value){
  value=EmitterUtil.parseColor(ExcelUtil.getValue(value));
  if (value == null) {
    return StyleConstant.NULL;
  }
 else {
    return ""String_Node_Str"" + value;
  }
}",0.3349397590361446
69686,"public static String convertBorderWeight(String linestyle){
  String w=StyleConstant.NULL;
  if (linestyle != null && !""String_Node_Str"".equalsIgnoreCase(linestyle)) {
    linestyle=ExcelUtil.getValue(linestyle);
    int weight=(int)Double.parseDouble(linestyle);
    if (weight >= 749 && weight < 1499) {
      w=""String_Node_Str"";
    }
 else     if (weight >= 1499 && weight < 2249) {
      w=""String_Node_Str"";
    }
 else     if (weight >= 2249) {
      w=""String_Node_Str"";
    }
 else {
      w=""String_Node_Str"";
    }
  }
  return w;
}","public static String convertBorderWeight(double width){
  String w=StyleConstant.NULL;
  if (width >= 749 && width < 1499) {
    w=""String_Node_Str"";
  }
 else   if (width >= 1499 && width < 2249) {
    w=""String_Node_Str"";
  }
 else   if (width >= 2249) {
    w=""String_Node_Str"";
  }
 else {
    w=""String_Node_Str"";
  }
  return w;
}",0.3477272727272727
69687,"public StyleEntry createEntry(ContainerSizeInfo sizeInfo,IStyle style){
  if (style == null) {
    return StyleBuilder.createEmptyStyleEntry();
  }
  StyleEntry entry=initStyle(style,sizeInfo);
  entry.setStart(true);
  return entry;
}","public StyleEntry createEntry(ContainerSizeInfo sizeInfo,IStyle style){
  if (style == null) {
    return StyleBuilder.createEmptyStyleEntry();
  }
  StyleEntry entry=initStyle(style,sizeInfo);
  return entry;
}",0.8923766816143498
69688,"public void addCell(int col,int colSpan,int rowSpan,IStyle style){
  XlsTable table=tables.peek();
  ContainerSizeInfo cellSizeInfo=table.getColumnSizeInfo(col,colSpan);
  XlsCell cell=new XlsCell(engine.createEntry(cellSizeInfo,style),cellSizeInfo,getCurrentContainer(),rowSpan);
  addContainer(cell);
}","public void addCell(ICellContent cellcontent,int col,int colSpan,int rowSpan,IStyle style){
  XlsTable table=tables.peek();
  ContainerSizeInfo cellSizeInfo=table.getColumnSizeInfo(col,colSpan);
  int diagonalNumber=cellcontent.getDiagonalNumber();
  StyleEntry cellStyleEntry=null;
  if (diagonalNumber != 0) {
    String diagonalColor=cellcontent.getDiagonalColor();
    String diagonalStyle=cellcontent.getDiagonalStyle();
    int diagonalWidth=PropertyUtil.getDimensionValue(cellcontent,cellcontent.getDiagonalWidth(),cellSizeInfo.getWidth());
    cellStyleEntry=engine.createCellEntry(cellSizeInfo,style,diagonalColor,diagonalStyle,diagonalWidth);
  }
 else {
    cellStyleEntry=engine.createEntry(cellSizeInfo,style);
  }
  XlsCell cell=new XlsCell(cellStyleEntry,cellSizeInfo,getCurrentContainer(),rowSpan);
  addContainer(cell);
}",0.4746059544658494
69689,"public static String parseColor(String color){
  if (""String_Node_Str"".equalsIgnoreCase(color) || color == null || color.length() == 0) {
    return null;
  }
  if (color.startsWith(""String_Node_Str"")) {
    return color.substring(1,Math.min(color.length(),7));
  }
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
  String[] values=color.substring(color.indexOf(""String_Node_Str"") + 1,color.length() - 1).split(""String_Node_Str"");
  String value=""String_Node_Str"";
  for (int i=0; i < values.length; i++) {
    try {
      String s=Integer.toHexString((Integer.parseInt(values[i].trim())));
      if (s.length() == 1) {
        s=""String_Node_Str"" + s;
      }
      value+=s;
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      value=null;
    }
  }
  return value;
}","public static String parseColor(String color){
  return EmitterUtil.parseColor(color);
}",0.0616658996778647
69690,"public void layout(IFigure container){
  if (!isDistroy()) {
    return;
  }
  if (!isCalculating) {
    helper=new TableBorderHelper(owner);
    helper.updateCellBorderInsets();
  }
  figureInfo.clear();
  data=new WorkingData();
  data.columnWidths=new TableLayoutData.ColumnData[getColumnCount()];
  data.rowHeights=new TableLayoutData.RowData[getRowCount()];
  init(data.columnWidths,data.rowHeights);
  List children=container.getChildren();
  initMinSize(children);
  initMergeMinsize(children);
  caleLayoutData(container);
  if (!isCalculating) {
    layoutTable(container);
  }
  resetRowMinSize(data.rowHeights);
  initRowMinSize(children);
  initRowMergeMinsize(children);
  caleRowData();
  if (!isCalculating) {
    layoutTable(container);
  }
  setConstraint(container,data);
  needlayout=false;
  if (isCalculating) {
  }
  int containerWidth=getOwner().getFigure().getParent().getClientArea().getSize().width;
  if (containerWidth < 0) {
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        if (isNeedRelayout) {
          getOwner().reLayout();
          isNeedRelayout=false;
        }
      }
    }
);
    return;
  }
  reselect();
}","public void layout(IFigure container){
  if (!isDistroy()) {
    return;
  }
{
    helper=new TableBorderHelper(owner);
    helper.updateCellBorderInsets();
  }
  figureInfo.clear();
  data=new WorkingData();
  data.columnWidths=new TableLayoutData.ColumnData[getColumnCount()];
  data.rowHeights=new TableLayoutData.RowData[getRowCount()];
  init(data.columnWidths,data.rowHeights);
  List children=container.getChildren();
  initMinSize(children);
  initMergeMinsize(children);
  caleLayoutData(container);
  if (!isCalculating) {
    layoutTable(container);
  }
  resetRowMinSize(data.rowHeights);
  initRowMinSize(children);
  initRowMergeMinsize(children);
  caleRowData();
  if (!isCalculating) {
    layoutTable(container);
  }
  setConstraint(container,data);
  needlayout=false;
  if (isCalculating) {
  }
  int containerWidth=getOwner().getFigure().getParent().getClientArea().getSize().width;
  if (containerWidth < 0) {
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        if (isNeedRelayout) {
          getOwner().reLayout();
          isNeedRelayout=false;
        }
      }
    }
);
    return;
  }
  reselect();
}",0.9906143344709898
69691,"private void preview(String uri){
  try {
    if (imageData != null) {
      ByteArrayInputStream bis=new ByteArrayInputStream(Base64.decodeBase64(imageData.getBytes()));
      previewCanvas.loadImage(bis);
    }
 else {
      previewCanvas.loadImage(new URL(uri));
    }
  }
 catch (  Exception e) {
    logger.log(e);
  }
}","private void preview(String uri){
  try {
    previewCanvas.loadImage(new URL(uri));
  }
 catch (  Exception e) {
    logger.log(e);
  }
}",0.5961123110151187
69692,"/** 
 * @throws DataException
 */
protected void createAccumulators() throws DataException {
  AggregationFunctionDefinition[] aggregationFunctions=aggregation.getAggregationFunctions();
  if (aggregationFunctions != null) {
    this.accumulators=new Accumulator[aggregationFunctions.length];
    for (int i=0; i < aggregationFunctions.length; i++) {
      IAggrFunction aggregationFunc=AggregationManager.getInstance().getAggregation(aggregationFunctions[i].getFunctionName());
      if (aggregation == null) {
        throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + aggregationFunctions[i].getFunctionName());
      }
      this.accumulators[i]=aggregationFunc.newAccumulator();
      this.accumulators[i].start();
    }
  }
}","/** 
 * @throws DataException
 */
protected void createAccumulators() throws DataException {
  AggregationFunctionDefinition[] aggregationFunctions=aggregation.getAggregationFunctions();
  if (aggregationFunctions != null) {
    this.accumulators=new Accumulator[aggregationFunctions.length];
    for (int i=0; i < aggregationFunctions.length; i++) {
      IAggrFunction aggregationFunc=AggregationManager.getInstance().getAggregation(aggregationFunctions[i].getFunctionName());
      if (aggregationFunc == null) {
        throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + aggregationFunctions[i].getFunctionName());
      }
      this.accumulators[i]=aggregationFunc.newAccumulator();
      this.accumulators[i].start();
    }
  }
}",0.9974747474747476
69693,"public boolean preHandleMouseUp(){
  if (getRequest().getNewObjectType() instanceof ScalarParameterHandle) {
    try {
      Object newObj=getRequest().getNewObject();
      if (newObj instanceof Object[]) {
        Object[] newObjs=(Object[])newObj;
        Object[] insertedObjs=new Object[newObjs.length];
        for (int i=0; i < newObjs.length; i++) {
          DesignElementHandle elementHandle=(DesignElementHandle)newObjs[i];
          if (elementHandle.getRoot() instanceof LibraryHandle) {
            ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
            LibraryHandle library=(LibraryHandle)elementHandle.getRoot();
            if (moduleHandle != library) {
              try {
                if (UIUtil.includeLibrary(moduleHandle,library)) {
                  elementHandle=moduleHandle.getElementFactory().newElementFrom(elementHandle,elementHandle.getName());
                  moduleHandle.addElement(elementHandle,ModuleHandle.PARAMETER_SLOT);
                  insertedObjs[i]=elementHandle;
                  continue;
                }
              }
 catch (              Exception e) {
                ExceptionHandler.handle(e);
              }
            }
          }
          insertedObjs[i]=newObjs[i];
        }
        newObj=insertedObjs;
      }
      Object newHandle=InsertInLayoutUtil.performInsert(newObj,getTargetEditPart());
      if (newHandle == null)       return false;
      setModel(newHandle);
      return super.preHandleMouseUp();
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
  return false;
}","public boolean preHandleMouseUp(){
  if (getRequest().getNewObjectType() instanceof ScalarParameterHandle) {
    try {
      Object newObj=getRequest().getNewObject();
      if (newObj instanceof Object[]) {
        Object[] newObjs=(Object[])newObj;
        newObj=UIUtil.getInsertPamaterElements(newObjs);
      }
      Object newHandle=InsertInLayoutUtil.performInsert(newObj,getTargetEditPart());
      if (newHandle == null)       return false;
      setModel(newHandle);
      return super.preHandleMouseUp();
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
  return false;
}",0.302491103202847
69694,"protected void updateRelatedViews(){
  updatePaletteView(getCurrentPageInstance());
  updateOutLineView(getCurrentPageInstance());
  updateDateView(getCurrentPageInstance());
}","public void updateRelatedViews(){
  updatePaletteView(getCurrentPageInstance());
  updateOutLineView(getCurrentPageInstance());
  updateDateView(getCurrentPageInstance());
}",0.968481375358166
69695,"private void setAllInput(FileEditorInput input){
  if (pages == null) {
    return;
  }
  setInput(input);
  if (getEditorInput() != null) {
    setPartName(getEditorInput().getName());
    firePropertyChange(IWorkbenchPartConstants.PROP_PART_NAME);
    firePropertyChange(IWorkbenchPartConstants.PROP_PART_NAME);
    getProvider().getReportModuleHandle(getEditorInput()).setFileName(getProvider().getInputPath(getEditorInput()).toOSString());
  }
  for (Iterator it=pages.iterator(); it.hasNext(); ) {
    Object page=it.next();
    if (page instanceof IReportEditorPage) {
      ((IReportEditorPage)page).setInput(input);
    }
  }
}","private void setAllInput(FileEditorInput input){
  if (pages == null) {
    return;
  }
  setInput(input);
  if (getEditorInput() != null) {
    setPartName(getEditorInput().getName());
    firePropertyChange(IWorkbenchPartConstants.PROP_PART_NAME);
    firePropertyChange(IWorkbenchPartConstants.PROP_PART_NAME);
    getProvider().getReportModuleHandle(getEditorInput()).setFileName(getProvider().getInputPath(getEditorInput()).toOSString());
  }
  for (Iterator it=pages.iterator(); it.hasNext(); ) {
    Object page=it.next();
    if (page instanceof IReportEditorPage) {
      ((IReportEditorPage)page).setInput(input);
    }
  }
  updateRelatedViews();
}",0.98145285935085
69696,"/** 
 * This method is used for back-forward compatible. For the new DTE api store the original ComputedColumnHandle expression as a parameter value now, we should retrive expression value from ComputedColumnHandle's expression(old) or argument value.
 * @param bindingColumn
 * @return
 */
public static String getAggregationExpression(ComputedColumnHandle bindingColumn){
  if (bindingColumn.getExpression() != null)   return bindingColumn.getExpression();
  String functionName=bindingColumn.getAggregateFunction();
  try {
    IAggrFunction function=getAggregationManager().getAggregation(functionName);
    for (    IParameterDefn param : function.getParameterDefn()) {
      if (param.isDataField()) {
        for (Iterator iterator=bindingColumn.argumentsIterator(); iterator.hasNext(); ) {
          AggregationArgumentHandle arg=(AggregationArgumentHandle)iterator.next();
          if (DataAdapterUtil.adaptArgumentName(arg.getName()).equals(param.getName())) {
            return arg.getValue();
          }
        }
      }
    }
  }
 catch (  BirtException e) {
  }
  return null;
}","/** 
 * This method is used for back-forward compatible. For the new DTE api store the original ComputedColumnHandle expression as a parameter value now, we should retrive expression value from ComputedColumnHandle's expression(old) or argument value.
 * @param bindingColumn
 * @return
 */
public static String getAggregationExpression(ComputedColumnHandle bindingColumn){
  if (bindingColumn.getExpression() != null)   return bindingColumn.getExpression();
  String functionName=bindingColumn.getAggregateFunction();
  try {
    IAggrFunction function=getAggregationManager().getAggregation(DataAdapterUtil.adaptModelAggregationType(functionName));
    for (    IParameterDefn param : function.getParameterDefn()) {
      if (param.isDataField()) {
        for (Iterator iterator=bindingColumn.argumentsIterator(); iterator.hasNext(); ) {
          AggregationArgumentHandle arg=(AggregationArgumentHandle)iterator.next();
          if (DataAdapterUtil.adaptArgumentName(arg.getName()).equals(param.getName())) {
            return arg.getValue();
          }
        }
      }
    }
  }
 catch (  BirtException e) {
  }
  return null;
}",0.9807606263982104
69697,"protected static DataItemHandle performInsertParameter(ScalarParameterHandle model) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getName());
  bindingColumn.setExpression(DEUtil.getExpression(model));
  String paramType=model.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(paramType))   paramType=DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME;
  bindingColumn.setDataType(paramType);
  dataHandle.addColumnBinding(bindingColumn,false);
  dataHandle.setResultSetColumn(bindingColumn.getName());
  return dataHandle;
}","public static DataItemHandle performInsertParameter(ScalarParameterHandle model) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getName());
  bindingColumn.setExpression(DEUtil.getExpression(model));
  String paramType=model.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(paramType))   paramType=DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME;
  bindingColumn.setDataType(paramType);
  dataHandle.addColumnBinding(bindingColumn,false);
  dataHandle.setResultSetColumn(bindingColumn.getName());
  return dataHandle;
}",0.990531682447196
69698,"public void refreshFigure(){
  refreshBorder((DesignElementHandle)getModel(),new LineBorder());
  Insets pist=getImageAdapter().getPadding(getFigure().getInsets());
  ((LineBorder)(getFigure().getBorder())).setPaddingInsets(pist);
  Image image=null;
  try {
    image=getImageAdapter().getImage();
  }
 catch (  SWTException e) {
  }
  ((ImageFigure)this.getFigure()).setStretched(image != null);
  if (image == null) {
    image=ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_MISSING_IMG);
  }
  ((ImageFigure)this.getFigure()).setImage(image);
  if (getImageAdapter().getSize() != null) {
    this.getFigure().setSize(getImageAdapter().getSize());
  }
 else   if (image != null) {
    Dimension rawSize=getImageAdapter().getRawSize();
    if (rawSize.height == 0 && rawSize.width == 0) {
      this.getFigure().setSize(new Dimension(image.getBounds().width,image.getBounds().height));
    }
 else     if (rawSize.height == 0) {
      this.getFigure().setSize(new Dimension(rawSize.width,image.getBounds().height));
    }
 else {
      this.getFigure().setSize(new Dimension(image.getBounds().width,rawSize.height));
    }
  }
  refreshBackgroundColor((DesignElementHandle)getModel());
  refreshMargin();
  ((AbstractGraphicalEditPart)getParent()).setLayoutConstraint(this,getFigure(),getConstraint());
}","public void refreshFigure(){
  refreshBorder((DesignElementHandle)getModel(),new LineBorder());
  Insets pist=getImageAdapter().getPadding(getFigure().getInsets());
  ((LineBorder)(getFigure().getBorder())).setPaddingInsets(pist);
  Image image=null;
  try {
    image=getImageAdapter().getImage();
  }
 catch (  SWTException e) {
  }
  ((ImageFigure)this.getFigure()).setStretched(image != null);
  if (image == null) {
    image=ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_MISSING_IMG);
  }
  ((ImageFigure)this.getFigure()).setImage(image);
  if (getImageAdapter().getSize() != null) {
    this.getFigure().setSize(getImageAdapter().getSize());
  }
 else   if (image != null) {
    Dimension rawSize=getImageAdapter().getRawSize();
    if (rawSize.height == 0 && rawSize.width == 0) {
      this.getFigure().setSize(new Dimension(image.getBounds().width,image.getBounds().height));
    }
 else     if (rawSize.height == 0) {
      this.getFigure().setSize(new Dimension(rawSize.width,(int)(image.getBounds().height * ((double)rawSize.width / image.getBounds().width))));
    }
 else {
      this.getFigure().setSize(new Dimension((int)(image.getBounds().width * ((double)rawSize.height / image.getBounds().height)),rawSize.height));
    }
  }
  refreshBackgroundColor((DesignElementHandle)getModel());
  refreshMargin();
  ((AbstractGraphicalEditPart)getParent()).setLayoutConstraint(this,getFigure(),getConstraint());
}",0.9565217391304348
69699,"public void refreshFigure(){
  int color=getBackgroundColor((MasterPageHandle)getModel());
  getFigure().setBackgroundColor(getBackGroundColor(color));
  Dimension size=getMasterPageSize((MasterPageHandle)getModel());
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
  ReportDesignMarginBorder reportDesignMarginBorder=new ReportDesignMarginBorder(getMasterPageInsets((MasterPageHandle)getModel()));
  reportDesignMarginBorder.setBackgroundColor(((MasterPageHandle)getModel()).getPropertyHandle(StyleHandle.BACKGROUND_COLOR_PROP).getIntValue());
  refreshMarginBorder(reportDesignMarginBorder);
  refreshBackground((MasterPageHandle)getModel());
}","public void refreshFigure(){
  int color=getBackgroundColor((MasterPageHandle)getModel());
  getFigure().setBackgroundColor(getBackGroundColor(color));
  Dimension size=getMasterPageSize((MasterPageHandle)getModel());
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
  ReportDesignMarginBorder reportDesignMarginBorder=new ReportDesignMarginBorder(getMasterPageInsets((MasterPageHandle)getModel()));
  reportDesignMarginBorder.setBackgroundColor(((MasterPageHandle)getModel()).getPropertyHandle(StyleHandle.BACKGROUND_COLOR_PROP).getIntValue());
  refreshMarginBorder(reportDesignMarginBorder);
  refreshBackground((MasterPageHandle)getModel());
  ((ReportElementFigure)getFigure()).setBackGroundImageSize(getModelAdapter().getBackgroundImageWidth((MasterPageHandle)getModel()),getModelAdapter().getBackgroundImageHeight((MasterPageHandle)getModel()));
}",0.8784497944803288
69700,"public void refreshFigure(){
  SimpleMasterPageHandle masterPageHandle=getSimpleMasterPageHandle();
  Dimension size=getMasterPageSize(masterPageHandle);
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  ReportRootFigure figure=(ReportRootFigure)getFigure();
  figure.setShowMargin(showMargin);
  ((ReportDesignLayout)(figure.getLayoutManager())).setAuto(DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(((ReportDesignHandle)getModel()).getLayoutPreference()));
  ((ReportDesignLayout)(figure.getLayoutManager())).setAuto(DesignChoiceConstants.BIDI_DIRECTION_LTR.equals(((ReportDesignHandle)getModel()).getBidiOrientation()));
  if (!showMargin) {
    Insets mg=getMasterPageInsets(masterPageHandle);
    bounds.width-=mg.getWidth();
    bounds.height-=mg.getHeight();
  }
  Insets initInsets=getMasterPageInsets(masterPageHandle);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitInsets(initInsets);
  refreshMarginBorder((ReportDesignMarginBorder)getFigure().getBorder());
  int color=getBackgroundColor(masterPageHandle);
  getFigure().setBackgroundColor(getBackGroundColor(color));
  refreshBackground(masterPageHandle);
}","public void refreshFigure(){
  SimpleMasterPageHandle masterPageHandle=getSimpleMasterPageHandle();
  Dimension size=getMasterPageSize(masterPageHandle);
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  ReportRootFigure figure=(ReportRootFigure)getFigure();
  figure.setShowMargin(showMargin);
  ((ReportDesignLayout)(figure.getLayoutManager())).setAuto(DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(((ReportDesignHandle)getModel()).getLayoutPreference()));
  ((ReportDesignLayout)(figure.getLayoutManager())).setAuto(DesignChoiceConstants.BIDI_DIRECTION_LTR.equals(((ReportDesignHandle)getModel()).getBidiOrientation()));
  if (!showMargin) {
    Insets mg=getMasterPageInsets(masterPageHandle);
    bounds.width-=mg.getWidth();
    bounds.height-=mg.getHeight();
  }
  Insets initInsets=getMasterPageInsets(masterPageHandle);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitInsets(initInsets);
  refreshMarginBorder((ReportDesignMarginBorder)getFigure().getBorder());
  int color=getBackgroundColor(masterPageHandle);
  getFigure().setBackgroundColor(getBackGroundColor(color));
  refreshBackground(masterPageHandle);
  ((ReportElementFigure)getFigure()).setBackGroundImageSize(getModelAdapter().getBackgroundImageWidth(masterPageHandle),getModelAdapter().getBackgroundImageHeight(masterPageHandle));
}",0.9323974879940894
69701,"/** 
 * @see org.eclipse.draw2d.Figure#paintFigure(Graphics)
 */
protected void paintFigure(Graphics graphics){
  if (isOpaque()) {
    if (getBorder() instanceof BaseBorder) {
      graphics.fillRectangle(getBounds().getCopy().crop(((BaseBorder)getBorder()).getBorderInsets()));
    }
 else {
      graphics.fillRectangle(getBounds());
    }
  }
  Image image=getImage();
  if (image == null) {
    return;
  }
  int x, y;
  Rectangle area=getBounds();
  graphics.getClip(PRIVATE_RECT);
  if (position != null && position.x != -1) {
    x=area.x + position.x;
  }
 else {
switch (alignment & PositionConstants.EAST_WEST) {
case PositionConstants.EAST:
      x=area.x + area.width - size.width;
    break;
case PositionConstants.WEST:
  x=area.x;
break;
default :
x=(area.width - size.width) / 2 + area.x;
break;
}
}
if (position != null && position.y != -1) {
y=area.y + position.y;
}
 else {
switch (alignment & PositionConstants.NORTH_SOUTH) {
case PositionConstants.NORTH:
y=area.y;
break;
case PositionConstants.SOUTH:
y=area.y + area.height - size.height;
break;
default :
y=(area.height - size.height) / 2 + area.y;
break;
}
}
ArrayList xyList=createImageList(x,y);
Iterator iter=xyList.iterator();
while (iter.hasNext()) {
Point point=(Point)iter.next();
graphics.drawImage(image,point);
}
xyList.clear();
graphics.setClip(PRIVATE_RECT);
}","/** 
 * @see org.eclipse.draw2d.Figure#paintFigure(Graphics)
 */
protected void paintFigure(Graphics graphics){
  if (isOpaque()) {
    if (getBorder() instanceof BaseBorder) {
      graphics.fillRectangle(getBounds().getCopy().crop(((BaseBorder)getBorder()).getBorderInsets()));
    }
 else {
      graphics.fillRectangle(getBounds());
    }
  }
  Image image=getImage();
  if (image == null) {
    return;
  }
  int x, y;
  Rectangle area=getBounds();
  graphics.getClip(PRIVATE_RECT);
  if (position != null && position.x != -1) {
    x=area.x + position.x;
  }
 else {
switch (alignment & PositionConstants.EAST_WEST) {
case PositionConstants.EAST:
      x=area.x + area.width - size.width;
    break;
case PositionConstants.WEST:
  x=area.x;
break;
default :
x=(area.width - size.width) / 2 + area.x;
break;
}
}
if (position != null && position.y != -1) {
y=area.y + position.y;
}
 else {
switch (alignment & PositionConstants.NORTH_SOUTH) {
case PositionConstants.NORTH:
y=area.y;
break;
case PositionConstants.SOUTH:
y=area.y + area.height - size.height;
break;
default :
y=(area.height - size.height) / 2 + area.y;
break;
}
}
ArrayList xyList=createImageList(x,y);
Iterator iter=xyList.iterator();
Dimension imageSize=new Rectangle(image.getBounds()).getSize();
while (iter.hasNext()) {
Point point=(Point)iter.next();
graphics.drawImage(image,0,0,imageSize.width,imageSize.height,point.x,point.y,size.width,size.height);
}
xyList.clear();
graphics.setClip(PRIVATE_RECT);
}",0.9497878359264498
69702,"/** 
 * Set the sort conditions
 * @param sortKeys
 * @param sortOrderings
 */
void setSortCondition(Object[] sortKeys,boolean[] sortOrderings,int[] sortStrength){
  this.sortKeys=sortKeys;
  this.sortDirections=sortOrderings;
  this.comparator=new Collator[this.sortKeys.length];
  for (int i=0; i < this.comparator.length; i++) {
    this.comparator[i]=sortStrength[i] == ISortDefinition.ASCII_SORT_STRENGTH ? null : Collator.getInstance();
  }
}","/** 
 * Set the sort conditions
 * @param sortKeys
 * @param sortOrderings
 */
void setSortCondition(Object[] sortKeys,boolean[] sortOrderings,int[] sortStrength,ULocale[] sortLocale){
  this.sortKeys=sortKeys;
  this.sortDirections=sortOrderings;
  this.comparator=new Collator[this.sortKeys.length];
  for (int i=0; i < this.comparator.length; i++) {
    this.comparator[i]=sortStrength[i] == ISortDefinition.ASCII_SORT_STRENGTH ? null : Collator.getInstance(sortLocale[i]);
  }
}",0.9634408602150538
69703,"public Object[] getFieldValues(){
  ArrayList fields=new ArrayList();
  fields.add(new Integer(startIndex));
  fields.add(new Integer(endIndex));
  if (sortKeys != null) {
    fields.add(new Integer(sortKeys.length));
    for (int i=0; i < sortKeys.length; i++)     fields.add(sortKeys[i]);
  }
 else {
    fields.add(null);
  }
  if (sortDirections != null) {
    fields.add(new Integer(sortDirections.length));
    for (int i=0; i < sortDirections.length; i++)     fields.add(new Boolean(sortDirections[i]));
  }
 else {
    fields.add(null);
  }
  if (this.comparator != null) {
    fields.add(new Integer(comparator.length));
    for (int i=0; i < comparator.length; i++)     fields.add(comparator[i] == null ? ISortDefinition.ASCII_SORT_STRENGTH : new Integer(comparator[i].getStrength()));
  }
 else {
    fields.add(null);
  }
  fields.add(new Boolean(accept));
  return fields.toArray();
}","public Object[] getFieldValues(){
  ArrayList fields=new ArrayList();
  fields.add(new Integer(startIndex));
  fields.add(new Integer(endIndex));
  if (sortKeys != null) {
    fields.add(new Integer(sortKeys.length));
    for (int i=0; i < sortKeys.length; i++)     fields.add(sortKeys[i]);
  }
 else {
    fields.add(null);
  }
  if (sortDirections != null) {
    fields.add(new Integer(sortDirections.length));
    for (int i=0; i < sortDirections.length; i++)     fields.add(new Boolean(sortDirections[i]));
  }
 else {
    fields.add(null);
  }
  if (this.comparator != null) {
    fields.add(new Integer(comparator.length));
    for (int i=0; i < comparator.length; i++)     fields.add(comparator[i] == null ? ISortDefinition.ASCII_SORT_STRENGTH : new Integer(comparator[i].getStrength()));
    for (int i=0; i < comparator.length; i++)     fields.add(comparator[i] == null ? null : comparator[i].getLocale(ULocale.ACTUAL_LOCALE).getBaseName());
  }
 else {
    fields.add(null);
    fields.add(null);
  }
  fields.add(new Boolean(accept));
  return fields.toArray();
}",0.9101978691019786
69704,"public ICachedObject createInstance(Object[] fields){
  GroupBoundaryInfo groupBoundaryInfo=new GroupBoundaryInfo(((Integer)fields[0]).intValue(),((Integer)fields[1]).intValue());
  Object[] sortKeys=null;
  int sortKeysTotalLength=1;
  if (fields[2] != null) {
    sortKeys=new Object[((Integer)fields[2]).intValue()];
    System.arraycopy(fields,3,sortKeys,0,sortKeys.length);
    sortKeysTotalLength=sortKeys.length + 1;
  }
  boolean[] sortDirections=null;
  if (fields[2 + sortKeysTotalLength] != null) {
    sortDirections=new boolean[((Integer)fields[2 + sortKeysTotalLength]).intValue()];
    for (int i=0; i < sortDirections.length; i++) {
      sortDirections[i]=((Boolean)fields[3 + sortKeysTotalLength + i]).booleanValue();
    }
  }
  int[] sortStrength=null;
  if (fields[2 + sortKeysTotalLength * 2] != null) {
    sortStrength=new int[((Integer)fields[2 + sortKeysTotalLength * 2]).intValue()];
    for (int i=0; i < sortStrength.length; i++) {
      sortStrength[i]=((Integer)fields[3 + sortKeysTotalLength * 2 + i]).intValue();
    }
  }
  groupBoundaryInfo.setSortCondition(sortKeys,sortDirections,sortStrength);
  groupBoundaryInfo.setAccepted(((Boolean)fields[fields.length - 1]).booleanValue());
  return groupBoundaryInfo;
}","public ICachedObject createInstance(Object[] fields){
  GroupBoundaryInfo groupBoundaryInfo=new GroupBoundaryInfo(((Integer)fields[0]).intValue(),((Integer)fields[1]).intValue());
  Object[] sortKeys=null;
  int sortKeysTotalLength=1;
  if (fields[2] != null) {
    sortKeys=new Object[((Integer)fields[2]).intValue()];
    System.arraycopy(fields,3,sortKeys,0,sortKeys.length);
    sortKeysTotalLength=sortKeys.length + 1;
  }
  boolean[] sortDirections=null;
  if (fields[2 + sortKeysTotalLength] != null) {
    sortDirections=new boolean[((Integer)fields[2 + sortKeysTotalLength]).intValue()];
    for (int i=0; i < sortDirections.length; i++) {
      sortDirections[i]=((Boolean)fields[3 + sortKeysTotalLength + i]).booleanValue();
    }
  }
  int[] sortStrength=null;
  if (fields[2 + sortKeysTotalLength * 2] != null) {
    sortStrength=new int[((Integer)fields[2 + sortKeysTotalLength * 2]).intValue()];
    for (int i=0; i < sortStrength.length; i++) {
      sortStrength[i]=((Integer)fields[3 + sortKeysTotalLength * 2 + i]).intValue();
    }
  }
  ULocale[] locales=null;
  if (fields[2 + sortKeysTotalLength * 3] != null) {
    locales=new ULocale[((Integer)fields[2 + sortKeysTotalLength * 3]).intValue()];
    for (int i=0; i < sortStrength.length; i++) {
      Object locale=fields[3 + sortKeysTotalLength * 3 + i];
      if (locale != null)       locales[i]=new ULocale((String)locale);
    }
  }
  groupBoundaryInfo.setSortCondition(sortKeys,sortDirections,sortStrength,locales);
  groupBoundaryInfo.setAccepted(((Boolean)fields[fields.length - 1]).booleanValue());
  return groupBoundaryInfo;
}",0.8726382085374388
69705,"/** 
 * Add sort infos to GroupBoundaryInfo in groupArray.
 * @param cx
 * @param groupArray
 * @param groupPosition groupPosition = groupLevel - 1; it is 0-based;
 * @param groupIndex
 * @throws DataException
 */
private void populateGroupBoundaryInfoSortings(ScriptContext cx,List[] groupArray,int groupPosition,int groupIndex) throws DataException {
  Object[] sortKeys=new Object[this.populator.getQuery().getGrouping()[groupPosition].getSorts().size()];
  boolean[] sortDirections=new boolean[sortKeys.length];
  int[] sortStrength=new int[sortKeys.length];
  this.populator.getResultIterator().last(groupPosition + 1);
  for (int l=0; l < sortKeys.length; l++) {
    sortKeys[l]=ScriptEvalUtil.evalExpr(((ISortDefinition)this.populator.getQuery().getGrouping()[groupPosition].getSorts().get(l)).getExpression(),cx,this.groupProcessor.getExpressionProcessor().getScope(),ScriptExpression.defaultID,0);
    sortDirections[l]=((ISortDefinition)this.populator.getQuery().getGrouping()[groupPosition].getSorts().get(l)).getSortDirection() == ISortDefinition.SORT_ASC ? true : false;
    sortStrength[l]=((ISortDefinition)this.populator.getQuery().getGrouping()[groupPosition].getSorts().get(l)).getSortStrength();
  }
  ((GroupBoundaryInfo)groupArray[groupPosition].get(groupIndex)).setSortCondition(sortKeys,sortDirections,sortStrength);
  this.populator.getResultIterator().next();
}","/** 
 * Add sort infos to GroupBoundaryInfo in groupArray.
 * @param cx
 * @param groupArray
 * @param groupPosition groupPosition = groupLevel - 1; it is 0-based;
 * @param groupIndex
 * @throws DataException
 */
private void populateGroupBoundaryInfoSortings(ScriptContext cx,List[] groupArray,int groupPosition,int groupIndex) throws DataException {
  Object[] sortKeys=new Object[this.populator.getQuery().getGrouping()[groupPosition].getSorts().size()];
  boolean[] sortDirections=new boolean[sortKeys.length];
  int[] sortStrength=new int[sortKeys.length];
  ULocale[] sortLocale=new ULocale[sortKeys.length];
  this.populator.getResultIterator().last(groupPosition + 1);
  for (int l=0; l < sortKeys.length; l++) {
    sortKeys[l]=ScriptEvalUtil.evalExpr(((ISortDefinition)this.populator.getQuery().getGrouping()[groupPosition].getSorts().get(l)).getExpression(),cx,this.groupProcessor.getExpressionProcessor().getScope(),ScriptExpression.defaultID,0);
    sortDirections[l]=((ISortDefinition)this.populator.getQuery().getGrouping()[groupPosition].getSorts().get(l)).getSortDirection() == ISortDefinition.SORT_ASC ? true : false;
    sortStrength[l]=((ISortDefinition)this.populator.getQuery().getGrouping()[groupPosition].getSorts().get(l)).getSortStrength();
    ULocale locale=((ISortDefinition)this.populator.getQuery().getGrouping()[groupPosition].getSorts().get(l)).getSortLocale();
    if (locale == null)     locale=populator.getSession().getEngineContext().getLocale();
    sortLocale[l]=locale;
  }
  ((GroupBoundaryInfo)groupArray[groupPosition].get(groupIndex)).setSortCondition(sortKeys,sortDirections,sortStrength,sortLocale);
  this.populator.getResultIterator().next();
}",0.9
69706,"private static String toString_SortDefinition(Object source){
  SortDefinition sort=(SortDefinition)source;
  StringBuffer stringBuffer=new StringBuffer(""String_Node_Str"");
  if (!isEmpty(sort.getColumn()))   stringBuffer.append(""String_Node_Str"" + sort.getColumn() + ""String_Node_Str"");
  if (!isEmpty(sort.getExpression()))   stringBuffer.append(""String_Node_Str"" + sort.getExpression() + ""String_Node_Str"");
  stringBuffer.append(""String_Node_Str"" + sort.getSortDirection() + ""String_Node_Str"");
  stringBuffer.append(""String_Node_Str"" + sort.getSortStrength() + ""String_Node_Str"");
  return stringBuffer.toString();
}","private static String toString_SortDefinition(Object source){
  SortDefinition sort=(SortDefinition)source;
  StringBuffer stringBuffer=new StringBuffer(""String_Node_Str"");
  if (!isEmpty(sort.getColumn()))   stringBuffer.append(""String_Node_Str"" + sort.getColumn() + ""String_Node_Str"");
  if (!isEmpty(sort.getExpression()))   stringBuffer.append(""String_Node_Str"" + sort.getExpression() + ""String_Node_Str"");
  stringBuffer.append(""String_Node_Str"" + sort.getSortDirection() + ""String_Node_Str"");
  stringBuffer.append(""String_Node_Str"" + sort.getSortStrength() + ""String_Node_Str"");
  stringBuffer.append(""String_Node_Str"" + sort.getSortLocale() + ""String_Node_Str"");
  return stringBuffer.toString();
}",0.8922381311228335
69707,"/** 
 * Populate the sortings in a query.
 * @throws DataException
 */
private void populateSorting() throws DataException {
  List sorts=this.baseQueryDefn.getSorts();
  if (sorts != null && !sorts.isEmpty()) {
    IQuery.SortSpec[] sortSpecs=new IQuery.SortSpec[sorts.size()];
    Iterator it=sorts.iterator();
    for (int i=0; it.hasNext(); i++) {
      ISortDefinition src=(ISortDefinition)it.next();
      int sortIndex=-1;
      String sortKey=src.getColumn();
      if (sortKey == null)       sortKey=src.getExpression().getText();
 else {
        sortKey=getColumnRefExpression(sortKey);
      }
      temporaryComputedColumns.add(new ComputedColumn(""String_Node_Str"" + i + ""String_Node_Str"",sortKey,getExpressionDataType(sortKey)));
      sortIndex=-1;
      sortKey=String.valueOf(""String_Node_Str"" + i + ""String_Node_Str"");
      IQuery.SortSpec dest=new IQuery.SortSpec(sortIndex,sortKey,src.getSortDirection() == ISortDefinition.SORT_ASC,src.getSortStrength() == -1 ? null : Collator.getInstance());
      sortSpecs[i]=dest;
    }
    odiQuery.setOrdering(Arrays.asList(sortSpecs));
  }
}","/** 
 * Populate the sortings in a query.
 * @throws DataException
 */
private void populateSorting() throws DataException {
  List sorts=this.baseQueryDefn.getSorts();
  if (sorts != null && !sorts.isEmpty()) {
    IQuery.SortSpec[] sortSpecs=new IQuery.SortSpec[sorts.size()];
    Iterator it=sorts.iterator();
    for (int i=0; it.hasNext(); i++) {
      ISortDefinition src=(ISortDefinition)it.next();
      int sortIndex=-1;
      String sortKey=src.getColumn();
      if (sortKey == null)       sortKey=src.getExpression().getText();
 else {
        sortKey=getColumnRefExpression(sortKey);
      }
      temporaryComputedColumns.add(new ComputedColumn(""String_Node_Str"" + i + ""String_Node_Str"",sortKey,getExpressionDataType(sortKey)));
      sortIndex=-1;
      sortKey=String.valueOf(""String_Node_Str"" + i + ""String_Node_Str"");
      IQuery.SortSpec dest=new IQuery.SortSpec(sortIndex,sortKey,src.getSortDirection() == ISortDefinition.SORT_ASC,src.getSortStrength() == -1 ? null : Collator.getInstance(src.getSortLocale() == null ? session.getEngineContext().getLocale() : src.getSortLocale()));
      sortSpecs[i]=dest;
    }
    odiQuery.setOrdering(Arrays.asList(sortSpecs));
  }
}",0.960767218831735
69708,"/** 
 * @param outputStream
 * @param sorts
 * @throws IOException 
 */
public static void saveSorts(OutputStream outputStream,List sorts,int version) throws IOException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  if (sorts == null) {
    IOUtil.writeInt(dos,0);
  }
 else {
    IOUtil.writeInt(dos,sorts.size());
    Iterator it=sorts.iterator();
    while (it.hasNext()) {
      ISortDefinition sortDefn=(ISortDefinition)it.next();
      IOUtil.writeString(dos,sortDefn.getColumn());
      ExprUtil.saveBaseExpr(dos,sortDefn.getExpression());
      IOUtil.writeInt(dos,sortDefn.getSortDirection());
      if (version >= VersionManager.VERSION_2_3_1)       IOUtil.writeInt(dos,sortDefn.getSortStrength());
    }
  }
  dos.flush();
}","/** 
 * @param outputStream
 * @param sorts
 * @throws IOException 
 */
public static void saveSorts(OutputStream outputStream,List sorts,int version) throws IOException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  if (sorts == null) {
    IOUtil.writeInt(dos,0);
  }
 else {
    IOUtil.writeInt(dos,sorts.size());
    Iterator it=sorts.iterator();
    while (it.hasNext()) {
      ISortDefinition sortDefn=(ISortDefinition)it.next();
      IOUtil.writeString(dos,sortDefn.getColumn());
      ExprUtil.saveBaseExpr(dos,sortDefn.getExpression());
      IOUtil.writeInt(dos,sortDefn.getSortDirection());
      if (version >= VersionManager.VERSION_2_3_1)       IOUtil.writeInt(dos,sortDefn.getSortStrength());
      if (version >= VersionManager.VERSION_2_5_0_1)       IOUtil.writeString(dos,sortDefn.getSortLocale() == null ? null : sortDefn.getSortLocale().getBaseName());
    }
  }
  dos.flush();
}",0.9011384062312762
69709,"/** 
 * @param outputStream
 * @param sorts
 * @throws IOException
 */
public static List loadSorts(InputStream inputStream,int version) throws IOException {
  DataInputStream dis=new DataInputStream(inputStream);
  List sortList=new ArrayList();
  int size=IOUtil.readInt(dis);
  for (int i=0; i < size; i++) {
    String sortKeyColumn=IOUtil.readString(dis);
    IScriptExpression sortKeyExpr=(IScriptExpression)ExprUtil.loadBaseExpr(dis);
    int direction=IOUtil.readInt(dis);
    SortDefinition sortDefn=new SortDefinition();
    if (sortKeyColumn != null)     sortDefn.setColumn(sortKeyColumn);
 else     sortDefn.setExpression(sortKeyExpr.getText());
    sortDefn.setSortDirection(direction);
    if (version >= VersionManager.VERSION_2_3_1)     sortDefn.setSortStrength(IOUtil.readInt(dis));
    sortList.add(sortDefn);
  }
  return sortList;
}","/** 
 * @param outputStream
 * @param sorts
 * @throws IOException
 */
public static List loadSorts(InputStream inputStream,int version) throws IOException {
  DataInputStream dis=new DataInputStream(inputStream);
  List sortList=new ArrayList();
  int size=IOUtil.readInt(dis);
  for (int i=0; i < size; i++) {
    String sortKeyColumn=IOUtil.readString(dis);
    IScriptExpression sortKeyExpr=(IScriptExpression)ExprUtil.loadBaseExpr(dis);
    int direction=IOUtil.readInt(dis);
    SortDefinition sortDefn=new SortDefinition();
    if (sortKeyColumn != null)     sortDefn.setColumn(sortKeyColumn);
 else     sortDefn.setExpression(sortKeyExpr.getText());
    sortDefn.setSortDirection(direction);
    if (version >= VersionManager.VERSION_2_3_1)     sortDefn.setSortStrength(IOUtil.readInt(dis));
    if (version >= VersionManager.VERSION_2_5_0_1) {
      String locale=IOUtil.readString(dis);
      if (locale != null)       sortDefn.setSortLocale(new ULocale(locale));
    }
    sortList.add(sortDefn);
  }
  return sortList;
}",0.8747346072186837
69710,"/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_2_3_2_1;
}","/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_2_5_0_1;
}",0.976470588235294
69711,"/** 
 * Creates a new sort based on model sort key definition
 */
public SortAdapter(SortKeyHandle keyHandle){
  this(keyHandle.getKey(),keyHandle.getDirection());
}","/** 
 * Creates a new sort based on model sort key definition
 */
public SortAdapter(SortKeyHandle keyHandle){
  this(keyHandle.getKey(),keyHandle.getDirection());
  this.setSortStrength(keyHandle.getStrength());
  if (keyHandle.getLocale() != null)   this.setSortLocale(keyHandle.getLocale());
}",0.7158351409978309
69712,"/** 
 * Opens an editor on the specified library file, and refresh the specified library explorer page.
 * @param viewer the library explorer page
 * @param file the specified library to open.
 */
public static void openLibrary(final LibraryExplorerTreeViewPage viewer,final File file,final boolean forceRefresh){
  if (file == null || !file.exists() || !file.isFile()) {
    return;
  }
  Display display;
  if (viewer != null) {
    display=viewer.getSite().getShell().getDisplay();
  }
 else {
    display=Display.getCurrent();
  }
  display.asyncExec(new Runnable(){
    public void run(){
      try {
        IWorkbench workbench=PlatformUI.getWorkbench();
        IWorkbenchWindow window=workbench == null ? null : workbench.getActiveWorkbenchWindow();
        IWorkbenchPage page=window == null ? null : window.getActivePage();
        if (page != null) {
          IEditorInput input=null;
          Object adapter=Platform.getAdapterManager().getAdapter(viewer,IPathEditorInputFactory.class);
          if (adapter instanceof IPathEditorInputFactory) {
            input=((IPathEditorInputFactory)adapter).create(new Path(file.getAbsolutePath()));
          }
          if (input == null) {
            input=new ReportEditorInput(file);
          }
          page.openEditor(input,IReportEditorContants.LIBRARY_EDITOR_ID,true);
        }
      }
 catch (      PartInitException e) {
        ExceptionHandler.handle(e);
      }
 finally {
        viewer.selectPath(new String[]{file.getAbsolutePath()},forceRefresh);
      }
    }
  }
);
}","/** 
 * Opens an editor on the specified library file, and refresh the specified library explorer page.
 * @param viewer the library explorer page
 * @param file the specified library to open.
 */
public static void openLibrary(final LibraryExplorerTreeViewPage viewer,final File file,final boolean forceRefresh){
  if (file == null || !file.exists() || !file.isFile()) {
    return;
  }
  Display display;
  if (viewer != null) {
    display=viewer.getSite().getShell().getDisplay();
  }
 else {
    display=Display.getCurrent();
  }
  display.asyncExec(new Runnable(){
    public void run(){
      try {
        IWorkbench workbench=PlatformUI.getWorkbench();
        IWorkbenchWindow window=workbench == null ? null : workbench.getActiveWorkbenchWindow();
        IWorkbenchPage page=window == null ? null : window.getActivePage();
        if (page != null) {
          IEditorInput input=null;
          Object adapter=Platform.getAdapterManager().getAdapter(viewer,IPathEditorInputFactory.class);
          if (adapter instanceof IPathEditorInputFactory) {
            input=((IPathEditorInputFactory)adapter).create(new Path(file.getAbsolutePath()));
            IFile file=(IFile)input.getAdapter(IFile.class);
            if (file != null) {
              try {
                file.refreshLocal(IResource.DEPTH_INFINITE,null);
              }
 catch (              CoreException e) {
              }
            }
          }
          if (input == null) {
            input=new ReportEditorInput(file);
          }
          page.openEditor(input,IReportEditorContants.LIBRARY_EDITOR_ID,true);
        }
      }
 catch (      PartInitException e) {
        ExceptionHandler.handle(e);
      }
 finally {
        viewer.selectPath(new String[]{file.getAbsolutePath()},forceRefresh);
      }
    }
  }
);
}",0.9208804283164784
69713,"protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  boxStyle=new BoxStyle();
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  String url=content.getStyle().getBackgroundImage();
  if (url != null) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),100),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),100),0,0));
  }
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  IStyle cs=content.getStyle();
  CSSValue padding=cs.getProperty(IStyle.STYLE_PADDING_TOP);
  if (padding == null) {
    localProperties.setPaddingTop(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingTop(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_BOTTOM);
  if (padding == null) {
    localProperties.setPaddingBottom(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingBottom(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_LEFT);
  if (padding == null) {
    localProperties.setPaddingLeft(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingLeft(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_RIGHT);
  if (padding == null) {
    localProperties.setPaddingRight(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingRight(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),width));
  }
  textAlign=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
}","protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  boxStyle=new BoxStyle();
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  String url=content.getStyle().getBackgroundImage();
  if (url != null) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),0,0,0,0));
  }
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  IStyle cs=content.getStyle();
  CSSValue padding=cs.getProperty(IStyle.STYLE_PADDING_TOP);
  if (padding == null) {
    localProperties.setPaddingTop(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingTop(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_BOTTOM);
  if (padding == null) {
    localProperties.setPaddingBottom(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingBottom(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_LEFT);
  if (padding == null) {
    localProperties.setPaddingLeft(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingLeft(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_RIGHT);
  if (padding == null) {
    localProperties.setPaddingRight(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingRight(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),width));
  }
  textAlign=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
}",0.958490566037736
69714,"protected void buildLogicContainerProperties(IContent content,LayoutContext context){
  IStyle style=content.getStyle();
  if (style != null && !style.isEmpty()) {
    boxStyle=new BoxStyle();
    IStyle cs=content.getComputedStyle();
    Color color=PropertyUtil.getColor(cs.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
    if (color != null) {
      boxStyle.setBackgroundColor(color);
    }
    String url=style.getBackgroundImage();
    if (url != null) {
      boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),cs.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),100),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),100),0,0));
    }
    if (!isInInlineStacking) {
      pageBreakAfter=cs.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
      pageBreakInside=cs.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
      pageBreakBefore=cs.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    }
  }
 else {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
}","protected void buildLogicContainerProperties(IContent content,LayoutContext context){
  IStyle style=content.getStyle();
  if (style != null && !style.isEmpty()) {
    boxStyle=new BoxStyle();
    IStyle cs=content.getComputedStyle();
    Color color=PropertyUtil.getColor(cs.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
    if (color != null) {
      boxStyle.setBackgroundColor(color);
    }
    String url=style.getBackgroundImage();
    if (url != null) {
      boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),cs.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),0,0,0,0));
    }
    if (!isInInlineStacking) {
      pageBreakAfter=cs.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
      pageBreakInside=cs.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
      pageBreakBefore=cs.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    }
  }
 else {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
}",0.9328493647912884
69715,"protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  localProperties.setMarginBottom(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_BOTTOM),maw));
  localProperties.setMarginLeft(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_LEFT),maw));
  localProperties.setMarginTop(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_TOP),maw));
  localProperties.setMarginRight(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_RIGHT),maw));
  localProperties.setPaddingBottom(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),maw));
  localProperties.setPaddingLeft(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),maw));
  localProperties.setPaddingTop(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),maw));
  localProperties.setPaddingRight(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),maw));
  if (!isInInlineStacking) {
    pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    pageBreakInside=style.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
    pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
  }
  this.boxStyle=new BoxStyle();
  int borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setLeftBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_LEFT_COLOR),style.getProperty(IStyle.STYLE_BORDER_LEFT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setRightBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_RIGHT_COLOR),style.getProperty(IStyle.STYLE_BORDER_RIGHT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setTopBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_TOP_COLOR),style.getProperty(IStyle.STYLE_BORDER_TOP_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setBottomBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_COLOR),style.getProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE),borderWidth));
  }
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  CSSValue url=style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE);
  if (!IStyle.NONE_VALUE.equals(style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE))) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url.getCssText()),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),100),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),100),0,0));
  }
  action=content.getHyperlinkAction();
  bookmark=content.getBookmark();
}","protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  localProperties.setMarginBottom(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_BOTTOM),maw));
  localProperties.setMarginLeft(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_LEFT),maw));
  localProperties.setMarginTop(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_TOP),maw));
  localProperties.setMarginRight(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_RIGHT),maw));
  localProperties.setPaddingBottom(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),maw));
  localProperties.setPaddingLeft(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),maw));
  localProperties.setPaddingTop(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),maw));
  localProperties.setPaddingRight(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),maw));
  if (!isInInlineStacking) {
    pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    pageBreakInside=style.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
    pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
  }
  this.boxStyle=new BoxStyle();
  int borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setLeftBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_LEFT_COLOR),style.getProperty(IStyle.STYLE_BORDER_LEFT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setRightBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_RIGHT_COLOR),style.getProperty(IStyle.STYLE_BORDER_RIGHT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setTopBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_TOP_COLOR),style.getProperty(IStyle.STYLE_BORDER_TOP_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setBottomBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_COLOR),style.getProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE),borderWidth));
  }
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  CSSValue url=style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE);
  if (!IStyle.NONE_VALUE.equals(style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE))) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url.getCssText()),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),0,0,0,0));
  }
  action=content.getHyperlinkAction();
  bookmark=content.getBookmark();
}",0.9743589743589745
69716,"protected void updateBackgroundImage(){
  BackgroundImageInfo bgi=boxStyle.getBackgroundImage();
  Image img=null;
  if (bgi != null) {
    if ((bgi.getXOffset() != 0 || bgi.getYOffset() != 0)) {
      String imageUrl=bgi.getUrl();
      try {
        img=Image.getInstance(new URL(bgi.getUrl()));
      }
 catch (      Exception e) {
        if (SvgFile.isSvg(imageUrl)) {
          try {
            img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
          }
 catch (          Exception ex) {
            logger.log(Level.WARNING,ex.getMessage(),ex);
          }
        }
 else {
          logger.log(Level.WARNING,e.getMessage(),e);
        }
      }
      if (img != null) {
        int resolutionX=img.getDpiX();
        int resolutionY=img.getDpiY();
        if (0 == resolutionX || 0 == resolutionY) {
          resolutionX=96;
          resolutionY=96;
        }
        float imageWidth=img.plainWidth() / resolutionX * 72;
        float imageHeight=img.plainHeight() / resolutionY * 72;
        bgi.setXOffset(bgi.getXOffset() * (width - (int)(imageWidth * PDFConstants.LAYOUT_TO_PDF_RATIO)) / 100);
        bgi.setYOffset(bgi.getYOffset() * (height - (int)(imageHeight * PDFConstants.LAYOUT_TO_PDF_RATIO)) / 100);
      }
    }
  }
}","protected void updateBackgroundImage(){
  BackgroundImageInfo bgi=boxStyle.getBackgroundImage();
  Image img=null;
  if (bgi != null) {
    if ((bgi.getXOffset() != 0 || bgi.getYOffset() != 0)) {
      String imageUrl=bgi.getUrl();
      try {
        img=Image.getInstance(new URL(bgi.getUrl()));
      }
 catch (      Exception e) {
        if (SvgFile.isSvg(imageUrl)) {
          try {
            img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
          }
 catch (          Exception ex) {
            logger.log(Level.WARNING,ex.getMessage(),ex);
          }
        }
 else {
          logger.log(Level.WARNING,e.getMessage(),e);
        }
      }
      if (img != null) {
        int resolutionX=img.getDpiX();
        int resolutionY=img.getDpiY();
        if (0 == resolutionX || 0 == resolutionY) {
          resolutionX=96;
          resolutionY=96;
        }
        float imageWidth=img.plainWidth() / resolutionX * 72;
        float imageHeight=img.plainHeight() / resolutionY * 72;
        if (content != null) {
          IStyle style=content.getComputedStyle();
          int ox=getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),(width - (int)(imageWidth * PDFConstants.LAYOUT_TO_PDF_RATIO)));
          int oy=getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),(height - (int)(imageHeight * PDFConstants.LAYOUT_TO_PDF_RATIO)));
          bgi.setXOffset(ox);
          bgi.setYOffset(oy);
        }
      }
    }
  }
}",0.8485069191551348
69717,"protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getStyle();
  if (style != null && !style.isEmpty()) {
    boxStyle=new BoxStyle();
    IStyle cs=content.getComputedStyle();
    Color color=PropertyUtil.getColor(cs.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
    if (color != null) {
      boxStyle.setBackgroundColor(color);
    }
    String url=style.getBackgroundImage();
    if (url != null) {
      boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),cs.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),100),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),100),0,0));
    }
    localProperties=new LocalProperties();
    int maw=parent.getMaxAvaWidth();
    localProperties.setMarginBottom(getDimensionValue(cs.getProperty(IStyle.STYLE_MARGIN_BOTTOM),maw));
    localProperties.setMarginLeft(getDimensionValue(cs.getProperty(IStyle.STYLE_MARGIN_LEFT),maw));
    localProperties.setMarginTop(getDimensionValue(cs.getProperty(IStyle.STYLE_MARGIN_TOP),maw));
    localProperties.setMarginRight(getDimensionValue(cs.getProperty(IStyle.STYLE_MARGIN_RIGHT),maw));
    if (!isInInlineStacking) {
      pageBreakAfter=cs.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
      pageBreakInside=cs.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
      pageBreakBefore=cs.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    }
  }
 else {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
}","protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getStyle();
  if (style != null && !style.isEmpty()) {
    boxStyle=new BoxStyle();
    IStyle cs=content.getComputedStyle();
    Color color=PropertyUtil.getColor(cs.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
    if (color != null) {
      boxStyle.setBackgroundColor(color);
    }
    String url=style.getBackgroundImage();
    if (url != null) {
      boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),cs.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),0,0,0,0));
    }
    localProperties=new LocalProperties();
    int maw=parent.getMaxAvaWidth();
    localProperties.setMarginBottom(getDimensionValue(cs.getProperty(IStyle.STYLE_MARGIN_BOTTOM),maw));
    localProperties.setMarginLeft(getDimensionValue(cs.getProperty(IStyle.STYLE_MARGIN_LEFT),maw));
    localProperties.setMarginTop(getDimensionValue(cs.getProperty(IStyle.STYLE_MARGIN_TOP),maw));
    localProperties.setMarginRight(getDimensionValue(cs.getProperty(IStyle.STYLE_MARGIN_RIGHT),maw));
    if (!isInInlineStacking) {
      pageBreakAfter=cs.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
      pageBreakInside=cs.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
      pageBreakBefore=cs.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    }
  }
 else {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
}",0.9529262086513997
69718,"protected void addRows(ContainerArea container,TableLayout layout) throws BirtException {
  if (container instanceof RowArea) {
    RowArea row=(RowArea)container;
    if (row.needResolveBorder) {
      int size=row.getChildrenCount();
      for (int i=0; i < size; i++) {
        CellArea cell=(CellArea)row.getChild(i);
        int ch=cell.getContentHeight();
        cell.boxStyle.clearBorder();
        layout.resolveBorderConflict(cell,true);
        cell.setContentHeight(ch);
      }
      row.needResolveBorder=false;
    }
    if (row.finished) {
      if (row.getChildrenCount() != row.cells.length) {
        for (int i=0; i < row.cells.length; i++) {
          if (row.cells[i] instanceof DummyCell) {
            row.cells[i]=null;
          }
        }
      }
      layout.addRow((RowArea)container,context.isFixedLayout());
    }
  }
 else {
    int size=container.getChildrenCount();
    for (int i=0; i < size; i++) {
      ContainerArea child=(ContainerArea)container.getChild(i);
      addRows(child,layout);
      child.updateChildrenPosition();
    }
  }
}","protected void addRows(ContainerArea container,TableLayout layout) throws BirtException {
  if (container instanceof RowArea) {
    RowArea row=(RowArea)container;
    if (row.needResolveBorder) {
      int size=row.getChildrenCount();
      for (int i=0; i < size; i++) {
        CellArea cell=(CellArea)row.getChild(i);
        int ch=cell.getContentHeight();
        cell.boxStyle.clearBorder();
        layout.resolveBorderConflict(cell,true);
        cell.setContentHeight(ch);
      }
      row.needResolveBorder=false;
    }
    if (row.finished) {
      if (row.getChildrenCount() != row.cells.length) {
        for (int i=0; i < row.cells.length; i++) {
          if (row.cells[i] instanceof DummyCell) {
            row.cells[i]=null;
          }
        }
      }
      int rh=row.getHeight();
      layout.addRow(row,context.isFixedLayout());
      int delta=row.getHeight() - rh;
      if (delta > 0) {
        ContainerArea rowParent=row.getParent();
        if (rowParent != null) {
          rowParent.updateChildrenPosition();
        }
      }
    }
  }
 else {
    int size=container.getChildrenCount();
    for (int i=0; i < size; i++) {
      ContainerArea child=(ContainerArea)container.getChild(i);
      addRows(child,layout);
      child.updateChildrenPosition();
    }
  }
}",0.8730025231286795
69719,"public void updateRow(RowArea original){
  int height=0;
  Iterator iter=children.iterator();
  while (iter.hasNext()) {
    CellArea cell=(CellArea)iter.next();
    height=Math.max(height,cell.getHeight());
  }
  this.height=height;
  for (int i=0; i < cells.length; i++) {
    if (cells[i] == null) {
      CellArea oCell=original.getCell(i);
      if (oCell != null && !(oCell instanceof DummyCell)) {
        CellArea nCell=oCell.cloneArea();
        nCell.setHeight(height);
        nCell.setParent(this);
        children.add(nCell);
        i=i + oCell.getColSpan() - 1;
      }
    }
 else {
      cells[i].setHeight(height);
    }
  }
}","public void updateRow(RowArea original){
  int height=0;
  Iterator iter=children.iterator();
  while (iter.hasNext()) {
    CellArea cell=(CellArea)iter.next();
    height=Math.max(height,cell.getHeight());
  }
  this.height=height;
  for (int i=0; i < cells.length; i++) {
    if (cells[i] == null) {
      CellArea oCell=original.getCell(i);
      if (oCell != null && !(oCell instanceof DummyCell)) {
        CellArea nCell=oCell.cloneArea();
        nCell.setHeight(height);
        nCell.setParent(this);
        addChildByColumnId(nCell);
        i=i + oCell.getColSpan() - 1;
      }
    }
 else {
      cells[i].setHeight(height);
    }
  }
}",0.9814814814814816
69720,"public void addChildByColumnId(CellArea cell){
  int columnId=cell.getColumnID();
  int index=0;
  for (int i=0; i < children.size(); i++) {
    CellArea current=(CellArea)children.get(i);
    if (current.getColumnID() >= columnId) {
      index=i;
      break;
    }
  }
  children.add(index,cell);
  setCell(cell);
}","public void addChildByColumnId(CellArea cell){
  int columnId=cell.getColumnID();
  int index=0;
  for (int i=0; i < children.size(); i++) {
    CellArea current=(CellArea)children.get(i);
    if (current.getColumnID() >= columnId) {
      index=i;
      children.add(index,cell);
      setCell(cell);
      return;
    }
  }
  children.add(children.size(),cell);
  setCell(cell);
}",0.8542857142857143
69721,"/** 
 * convert a object to given class Classes supported: Integer.class BigDecimal.class Boolean.class Time.class Date.class Double.class String.class Blob.class
 * @param source
 * @param toTypeClass
 * @return
 * @throws BirtException
 */
public static Object convert(Object source,Class toTypeClass) throws BirtException {
  if (source != null && source.getClass() == toTypeClass) {
    return source;
  }
  if (toTypeClass == DataType.getClass(DataType.ANY_TYPE))   return source;
  if (toTypeClass == Integer.class)   return toInteger(source);
  if (toTypeClass == BigDecimal.class)   return toBigDecimal(source);
  if (toTypeClass == Boolean.class)   return toBoolean(source);
  if (toTypeClass == Time.class)   return toSqlTime(source);
  if (toTypeClass == java.sql.Date.class)   return toSqlDate(source);
  if (toTypeClass == java.sql.Timestamp.class)   return toDate(source);
  if (toTypeClass == Date.class)   return toDate(source);
  if (toTypeClass == Double.class)   return toDouble(source);
  if (toTypeClass == String.class)   return toString(source);
  if (toTypeClass == Blob.class) {
    if (source instanceof byte[])     return source;
 else     return toBlob(source);
  }
  if (toTypeClass == byte[].class)   return source;
  throw new CoreException(ResourceConstants.INVALID_TYPE,resourceBundle);
}","/** 
 * convert a object to given class Classes supported: Integer.class BigDecimal.class Boolean.class Time.class Date.class Double.class String.class Blob.class
 * @param source
 * @param toTypeClass
 * @return
 * @throws BirtException
 */
public static Object convert(Object source,Class toTypeClass) throws BirtException {
  if (source != null && source.getClass() == toTypeClass) {
    return source;
  }
  if (toTypeClass == DataType.getClass(DataType.ANY_TYPE))   return source;
  if (toTypeClass == Integer.class)   return toInteger(source);
  if (toTypeClass == BigDecimal.class)   return toBigDecimal(source);
  if (toTypeClass == Boolean.class)   return toBoolean(source);
  if (toTypeClass == Time.class)   return toSqlTime(source);
  if (toTypeClass == java.sql.Date.class)   return toSqlDate(source);
  if (toTypeClass == java.sql.Timestamp.class)   return toTimestamp(source);
  if (toTypeClass == Date.class)   return toDate(source);
  if (toTypeClass == Double.class)   return toDouble(source);
  if (toTypeClass == String.class)   return toString(source);
  if (toTypeClass == Blob.class) {
    if (source instanceof byte[])     return source;
 else     return toBlob(source);
  }
  if (toTypeClass == byte[].class)   return source;
  throw new CoreException(ResourceConstants.INVALID_TYPE,resourceBundle);
}",0.9950887797506612
69722,"private void retrySetDateParamValue(ParameterName paramName,int paramIndex,java.util.Date paramValue,int parameterType) throws DataException {
switch (parameterType) {
case Types.CHAR:
{
      Date sqlDate=new Date(paramValue.getTime());
      String s=sqlDate.toString();
      setString(paramName,paramIndex,s);
      return;
    }
case Types.TIME:
{
    Time timeValue=new Time(paramValue.getTime());
    setTime(paramName,paramIndex,timeValue);
    return;
  }
case Types.TIMESTAMP:
{
  Timestamp ts=new Timestamp(paramValue.getTime());
  setTimestamp(paramName,paramIndex,ts);
  return;
}
default :
conversionError(paramName,paramIndex,paramValue,parameterType,null);
return;
}
}","private void retrySetDateParamValue(ParameterName paramName,int paramIndex,Date paramValue,int parameterType) throws DataException {
switch (parameterType) {
case Types.CHAR:
{
      Date sqlDate=new Date(paramValue.getTime());
      String s=sqlDate.toString();
      setString(paramName,paramIndex,s);
      return;
    }
case Types.TIME:
{
    Time timeValue=new Time(paramValue.getTime());
    setTime(paramName,paramIndex,timeValue);
    return;
  }
case Types.TIMESTAMP:
{
  Timestamp ts=new Timestamp(paramValue.getTime());
  setTimestamp(paramName,paramIndex,ts);
  return;
}
default :
conversionError(paramName,paramIndex,paramValue,parameterType,null);
return;
}
}",0.9926362297496318
69723,"private void setParameterValue(String paramName,int paramIndex,Object paramValue) throws DataException {
  final String methodName=""String_Node_Str"";
  ParameterName paramNameObj=null;
  if (paramName != null) {
    paramNameObj=new ParameterName(paramName,this);
    paramNameObj.logNullNativeName();
  }
  try {
    if (paramValue == null) {
      setNull(paramNameObj,paramIndex);
      return;
    }
    if (paramValue instanceof Integer) {
      int i=((Integer)paramValue).intValue();
      setInt(paramNameObj,paramIndex,i);
      return;
    }
    if (paramValue instanceof Double) {
      double d=((Double)paramValue).doubleValue();
      setDouble(paramNameObj,paramIndex,d);
      return;
    }
    if (paramValue instanceof String) {
      String string=(String)paramValue;
      setString(paramNameObj,paramIndex,string);
      return;
    }
    if (paramValue instanceof BigDecimal) {
      BigDecimal decimal=(BigDecimal)paramValue;
      setBigDecimal(paramNameObj,paramIndex,decimal);
      return;
    }
    if (paramValue instanceof Time) {
      Time time=(Time)paramValue;
      setTime(paramNameObj,paramIndex,time);
      return;
    }
    if (paramValue instanceof Timestamp) {
      Timestamp timestamp=(Timestamp)paramValue;
      setTimestamp(paramNameObj,paramIndex,timestamp);
      return;
    }
    if (paramValue instanceof java.sql.Date) {
      Date sqlDate=(Date)paramValue;
      setDate(paramNameObj,paramIndex,sqlDate);
      return;
    }
    if (paramValue instanceof java.util.Date) {
      java.util.Date date=(java.util.Date)paramValue;
      Timestamp sqlDateTime=new Timestamp(date.getTime());
      setTimestamp(paramNameObj,paramIndex,sqlDateTime);
      return;
    }
    if (paramValue instanceof Boolean) {
      boolean val=((Boolean)paramValue).booleanValue();
      setBoolean(paramNameObj,paramIndex,val);
      return;
    }
{
      setObject(paramNameObj,paramIndex,paramValue);
      return;
    }
  }
 catch (  RuntimeException ex) {
    retrySetParameterValue(paramNameObj,paramIndex,paramValue,ex);
    return;
  }
catch (  DataException ex) {
    retrySetParameterValue(paramNameObj,paramIndex,paramValue,ex);
    return;
  }
}","private void setParameterValue(String paramName,int paramIndex,Object paramValue) throws DataException {
  final String methodName=""String_Node_Str"";
  ParameterName paramNameObj=null;
  if (paramName != null) {
    paramNameObj=new ParameterName(paramName,this);
    paramNameObj.logNullNativeName();
  }
  try {
    if (paramValue == null) {
      setNull(paramNameObj,paramIndex);
      return;
    }
    if (paramValue instanceof Integer) {
      int i=((Integer)paramValue).intValue();
      setInt(paramNameObj,paramIndex,i);
      return;
    }
    if (paramValue instanceof Double) {
      double d=((Double)paramValue).doubleValue();
      setDouble(paramNameObj,paramIndex,d);
      return;
    }
    if (paramValue instanceof String) {
      String string=(String)paramValue;
      setString(paramNameObj,paramIndex,string);
      return;
    }
    if (paramValue instanceof BigDecimal) {
      BigDecimal decimal=(BigDecimal)paramValue;
      setBigDecimal(paramNameObj,paramIndex,decimal);
      return;
    }
    if (paramValue instanceof Time) {
      Time time=(Time)paramValue;
      setTime(paramNameObj,paramIndex,time);
      return;
    }
    if (paramValue instanceof Timestamp) {
      Timestamp timestamp=(Timestamp)paramValue;
      setTimestamp(paramNameObj,paramIndex,timestamp);
      return;
    }
    if (paramValue instanceof java.sql.Date) {
      Date sqlDate=(Date)paramValue;
      setDate(paramNameObj,paramIndex,sqlDate);
      return;
    }
    if (paramValue instanceof Boolean) {
      boolean val=((Boolean)paramValue).booleanValue();
      setBoolean(paramNameObj,paramIndex,val);
      return;
    }
{
      setObject(paramNameObj,paramIndex,paramValue);
      return;
    }
  }
 catch (  RuntimeException ex) {
    retrySetParameterValue(paramNameObj,paramIndex,paramValue,ex);
    return;
  }
catch (  DataException ex) {
    retrySetParameterValue(paramNameObj,paramIndex,paramValue,ex);
    return;
  }
}",0.942512077294686
69724,"private void outputSfnts(PrintStream out){
  String[] tablesDesired={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  List<String> tablesToAdd=new ArrayList<String>();
  addTables(tablesToAdd,tablesDesired);
  Collections.sort(tablesToAdd);
  int tableNumber=tablesToAdd.size() + 1;
  int searchRange=getSearchRange(tableNumber);
  Util.putInt16(directoryRawData,4,tableNumber);
  Util.putInt16(directoryRawData,6,searchRange);
  Util.putInt16(directoryRawData,8,getExponent(searchRange));
  Util.putInt16(directoryRawData,10,(tableNumber << 4) - searchRange);
  ArrayList<byte[]> metadata=new ArrayList<byte[]>();
  ArrayList<byte[]> data=new ArrayList<byte[]>();
  metadata.add(directoryRawData);
  addGdirTable(metadata,0);
  int offset=12 + tableNumber * 16;
  byte[] headData=null;
  for (int i=0; i < tablesToAdd.size(); i++) {
    String name=(String)tablesToAdd.get(i);
    int newOffset=offset;
    try {
      int[] tableLocation=getTableLocation(name);
      if (tableLocation != null) {
        byte[] tableMetadata=metadataTables.get(name);
        setOffset(tableMetadata,offset);
        metadata.add(tableMetadata);
        newOffset=offset + getEvenLength(tableLocation[1]);
        List<byte[]> datas=readTable(name);
        if (""String_Node_Str"".equals(name)) {
          headData=datas.get(0);
        }
        data.addAll(datas);
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"" + name);
    }
    offset=newOffset;
  }
  long adjustment=calculateChecksumAdjustment(metadata,data);
  Util.putInt32(headData,8,adjustment);
  out.println(""String_Node_Str"");
  byte[] metadataArray=concatMetadata(metadata);
  out.println(toHexString(metadataArray));
  for (  byte[] bytes : data) {
    out.println(toHexString(bytes));
  }
  out.println(""String_Node_Str"");
}","private void outputSfnts(PrintStream out){
  String[] tablesDesired={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  List<String> tablesToAdd=new ArrayList<String>();
  addTables(tablesToAdd,tablesDesired);
  Collections.sort(tablesToAdd);
  int tableNumber=tablesToAdd.size() + 1;
  int searchRange=getSearchRange(tableNumber);
  Util.putInt16(directoryRawData,4,tableNumber);
  Util.putInt16(directoryRawData,6,searchRange);
  Util.putInt16(directoryRawData,8,getExponent(searchRange));
  Util.putInt16(directoryRawData,10,(tableNumber << 4) - searchRange);
  ArrayList<byte[]> metadata=new ArrayList<byte[]>();
  ArrayList<byte[]> data=new ArrayList<byte[]>();
  metadata.add(directoryRawData);
  addGdirTable(metadata,0);
  int offset=12 + tableNumber * 16;
  byte[] headData=null;
  for (int i=0; i < tablesToAdd.size(); i++) {
    String name=(String)tablesToAdd.get(i);
    int newOffset=offset;
    try {
      int[] tableLocation=getTableLocation(name);
      if (tableLocation != null) {
        byte[] tableMetadata=metadataTables.get(name);
        setOffset(tableMetadata,offset);
        metadata.add(tableMetadata);
        newOffset=offset + getEvenLength(tableLocation[1]);
        List<byte[]> datas=readTable(name);
        if (""String_Node_Str"".equals(name)) {
          headData=datas.get(0);
        }
        data.addAll(datas);
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"" + name);
    }
    offset=newOffset;
  }
  long adjustment=calculateChecksumAdjustment(metadata,data);
  Util.putInt32(headData,8,adjustment);
  out.println(""String_Node_Str"");
  byte[] metadataArray=concatMetadata(metadata);
  out.println(toHexString(metadataArray));
  for (  byte[] bytes : data) {
    out.println(toHexString(bytes));
  }
  out.println(""String_Node_Str"");
}",0.9814145585957668
69725,"/** 
 * @param elSD orthogonal series definitions list
 * @param lhmLookup
 */
public void addSeriesDefinitions(EList<SeriesDefinition> elSD,GroupingLookupHelper lhmLookup) throws ChartException {
  for (  SeriesDefinition sdOrthogonal : elSD) {
    Series series=sdOrthogonal.getDesignTimeSeries();
    List<Query> qlist=ChartEngine.instance().getDataSetProcessor(series.getClass()).getDataDefinitionsForGrouping(series);
    String strOrtAgg=lhmLookup.getOrthogonalAggregationExpression(sdOrthogonal);
    for (    Query query : qlist) {
      if (strOrtAgg == null) {
        baseQueryList.add(query.getDefinition());
      }
 else {
        if (query.getGrouping() == null) {
          aggregationExpsList.add(strOrtAgg);
        }
 else {
          aggregationExpsList.add(query.getGrouping().getAggregateExpression());
        }
        querysList.add(query.getDefinition());
      }
    }
  }
}","/** 
 * @param elSD orthogonal series definitions list
 * @param lhmLookup
 */
public void addSeriesDefinitions(EList<SeriesDefinition> elSD,GroupingLookupHelper lhmLookup) throws ChartException {
  for (  SeriesDefinition sdOrthogonal : elSD) {
    Series series=sdOrthogonal.getDesignTimeSeries();
    List<Query> qlist=ChartEngine.instance().getDataSetProcessor(series.getClass()).getDataDefinitionsForGrouping(series);
    String strOrtAgg=lhmLookup.getOrthogonalAggregationExpression(sdOrthogonal);
    for (    Query query : qlist) {
      if (strOrtAgg == null) {
        baseQueryList.add(query.getDefinition());
      }
 else {
        if (query.getGrouping() == null || !query.getGrouping().isEnabled()) {
          aggregationExpsList.add(strOrtAgg);
        }
 else {
          aggregationExpsList.add(query.getGrouping().getAggregateExpression());
        }
        querysList.add(query.getDefinition());
      }
    }
  }
}",0.9804134929270948
69726,"public static byte[] getImageData(String imageURI){
  byte[] imageData=null;
  InputStream imageStream=null;
  try {
    URL url=new URL(imageURI);
    imageStream=url.openStream();
    imageData=readData(imageStream);
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
    imageData=null;
  }
 finally {
    if (imageStream != null) {
      try {
        imageStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return imageData;
}","public static byte[] getImageData(String imageURI){
  byte[] imageData=null;
  if (SvgFile.isSvg(imageURI)) {
    try {
      imageData=SvgFile.transSvgToArray(imageURI);
    }
 catch (    IOException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
 else {
    imageData=getNonSVGImageData(imageURI);
  }
  return imageData;
}",0.40625
69727,"public static org.eclipse.birt.report.engine.layout.emitter.Image parseImage(IImageContent image,int imageSource,String uri,String mimeType,String extension){
  org.eclipse.birt.report.engine.layout.emitter.Image imageInfo=null;
  byte[] data=null;
  InputStream in=null;
  try {
switch (imageSource) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URL:
      if (uri != null) {
        if (SvgFile.isSvg(uri)) {
          data=SvgFile.transSvgToArray(uri);
        }
 else {
          data=getImageData(uri);
        }
      }
    break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
  data=image.getData();
if (SvgFile.isSvg(mimeType,uri,extension) && null != data) {
  in=new ByteArrayInputStream(data);
  data=SvgFile.transSvgToArray(in);
}
break;
}
imageInfo=new org.eclipse.birt.report.engine.layout.emitter.Image();
if (data != null) {
imageInfo.setInput(data);
if (!imageInfo.check()) {
imageInfo.setData(null);
}
}
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
 finally {
if (in != null) {
try {
in.close();
in=null;
}
 catch (Exception t) {
logger.log(Level.WARNING,t.getMessage());
}
}
}
return imageInfo;
}","public static org.eclipse.birt.report.engine.layout.emitter.Image parseImage(IImageContent image,int imageSource,String uri,String mimeType,String extension){
  org.eclipse.birt.report.engine.layout.emitter.Image imageInfo=null;
  byte[] data=null;
  InputStream in=null;
  try {
switch (imageSource) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URL:
      if (uri != null) {
        if (SvgFile.isSvg(uri)) {
          data=SvgFile.transSvgToArray(uri);
        }
 else {
          data=getNonSVGImageData(uri);
        }
      }
    break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
  data=image.getData();
if (SvgFile.isSvg(mimeType,uri,extension) && null != data) {
  in=new ByteArrayInputStream(data);
  data=SvgFile.transSvgToArray(in);
}
break;
}
imageInfo=new org.eclipse.birt.report.engine.layout.emitter.Image();
if (data != null) {
imageInfo.setInput(data);
if (!imageInfo.check()) {
imageInfo.setData(null);
}
}
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
 finally {
if (in != null) {
try {
in.close();
in=null;
}
 catch (Exception t) {
logger.log(Level.WARNING,t.getMessage());
}
}
}
return imageInfo;
}",0.9974533106960952
69728,"private void synchronize(double height){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
  }
  int startRowIndex=rowContainer.getRowIndex();
  if (maxRowIndex == startRowIndex) {
    maxRowIndex++;
  }
  rowContainer.setRowIndex(maxRowIndex);
  double resize=height / (maxRowIndex - startRowIndex);
  for (int i=startRowIndex + 1; i <= maxRowIndex; i++) {
    cache.setRowHeight(i,resize);
  }
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    if (rowspan > 0) {
      SheetData upstair=cache.getColumnLastData(currentColumnIndex);
      if (upstair != null && canSpan(upstair,rowContainer)) {
        upstair.setRowSpan(rowspan);
        SheetData realData=getRealData(upstair);
        if (!isInContainer(upstair,rowContainer)) {
          realData.decreasRowSpanInDesign();
        }
        int rowIndex=upstair.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(upstair);
          blank.setRowIndex(rowIndex + p);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
  }
}","private void synchronize(double height){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    SheetData lastData=cache.getColumnLastData(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    int span=lastData != null ? lastData.getRowSpanInDesign() : 0;
    if (span == 0 || (span == 1 && !isInContainer(lastData,rowContainer))) {
      maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
    }
  }
  int startRowIndex=rowContainer.getRowIndex();
  if (maxRowIndex == startRowIndex) {
    maxRowIndex++;
  }
  rowContainer.setRowIndex(maxRowIndex);
  double resize=height / (maxRowIndex - startRowIndex);
  for (int i=startRowIndex + 1; i <= maxRowIndex; i++) {
    cache.setRowHeight(i,resize);
  }
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    SheetData upstair=cache.getColumnLastData(currentColumnIndex);
    if (rowspan > 0) {
      if (upstair != null && canSpan(upstair,rowContainer)) {
        upstair.setRowSpan(rowspan);
        SheetData realData=getRealData(upstair);
        if (!isInContainer(upstair,rowContainer)) {
          realData.decreasRowSpanInDesign();
        }
        int rowIndex=upstair.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(upstair);
          blank.setRowIndex(rowIndex + p);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
 else     if (upstair.getRowSpanInDesign() > 0 && !isInContainer(upstair,rowContainer)) {
      upstair.decreasRowSpanInDesign();
    }
  }
}",0.8239573229873909
69729,"public BIRTPropertyManagerFactory(){
  vms=new ValueManager[PerfectHash.TOTAL_KEYWORDS];
  vms[StyleConstants.STYLE_TEXT_ALIGN]=new TextAlignManager(CSSConstants.CSS_TEXT_ALIGN_PROPERTY,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_TEXT_INDENT]=new LengthManager(CSSConstants.CSS_TEXT_INDENT_PROPERTY,true,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_NUMBER_ALIGN]=new TextAlignManager(BIRTConstants.BIRT_NUMBER_ALIGN_PROPERTY,CSSValueConstants.NONE_VALUE);
  vms[StyleConstants.STYLE_VERTICAL_ALIGN]=new VerticalAlignManager();
  vms[StyleConstants.STYLE_LINE_HEIGHT]=new LineHeightManager();
  vms[StyleConstants.STYLE_BACKGROUND_REPEAT]=new BackgroundRepeatManager();
  vms[StyleConstants.STYLE_BACKGROUND_ATTACHMENT]=new BackgroundAttachmentManager();
  vms[StyleConstants.STYLE_CAN_SHRINK]=new BooleanManager(BIRTConstants.BIRT_CAN_SHRINK_PROPERTY,true,false);
  vms[StyleConstants.STYLE_TEXT_OVERLINE]=new TextOverlineManager();
  vms[StyleConstants.STYLE_TEXT_UNDERLINE]=new TextUnderlineManager();
  vms[StyleConstants.STYLE_TEXT_LINETHROUGH]=new TextLineThroughManager();
  vms[StyleConstants.STYLE_BACKGROUND_IMAGE]=new URIManager(CSSConstants.CSS_BACKGROUND_IMAGE_PROPERTY,false,CSSValueConstants.NONE_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_TOP_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_LEFT_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_RIGHT_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_BOTTOM_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_COLOR]=new ColorManager(CSSConstants.CSS_COLOR_PROPERTY,true,CSSValueConstants.BLACK_RGB_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_TOP_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_LEFT_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_RIGHT_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_BOTTOM_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_COLOR]=new ColorManager(CSSConstants.CSS_BACKGROUND_COLOR_PROPERTY,false,CSSValueConstants.TRANSPARENT_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_TOP_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_LEFT_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_RIGHT_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_BOTTOM_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_LETTER_SPACING]=new SpacingManager(CSSConstants.CSS_LETTER_SPACING_PROPERTY);
  vms[StyleConstants.STYLE_FONT_WEIGHT]=new FontWeightManager();
  vms[StyleConstants.STYLE_FONT_VARIANT]=new FontVariantManager();
  vms[StyleConstants.STYLE_MARGIN_LEFT]=new MarginManager(CSSConstants.CSS_MARGIN_LEFT_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_RIGHT]=new MarginManager(CSSConstants.CSS_MARGIN_RIGHT_PROPERTY);
  vms[StyleConstants.STYLE_DISPLAY]=new DisplayManager();
  vms[StyleConstants.STYLE_TEXT_TRANSFORM]=new TextTransformManager();
  vms[StyleConstants.STYLE_BACKGROUND_POSITION_Y]=new BackgroundPositionYManager();
  vms[StyleConstants.STYLE_PADDING_LEFT]=new LengthManager(CSSConstants.CSS_PADDING_LEFT_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_PADDING_RIGHT]=new LengthManager(CSSConstants.CSS_PADDING_RIGHT_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_FONT_SIZE]=new FontSizeManager();
  vms[StyleConstants.STYLE_FONT_STYLE]=new FontStyleManager();
  vms[StyleConstants.STYLE_WHITE_SPACE]=new WhiteSpaceManager();
  vms[StyleConstants.STYLE_ORPHANS]=new IntegerManager(CSSConstants.CSS_ORPHANS_PROPERTY,true,2);
  vms[StyleConstants.STYLE_MASTER_PAGE]=new StringManager(BIRTConstants.BIRT_MASTER_PAGE_PROPERTY,false,null);
  vms[StyleConstants.STYLE_WORD_SPACING]=new SpacingManager(CSSConstants.CSS_WORD_SPACING_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_POSITION_X]=new BackgroundPositionXManager();
  vms[StyleConstants.STYLE_PAGE_BREAK_BEFORE]=new PageBreakBeforeAfterManager(CSSConstants.CSS_PAGE_BREAK_BEFORE_PROPERTY);
  vms[StyleConstants.STYLE_PAGE_BREAK_INSIDE]=new PageBreakInsideManager();
  vms[StyleConstants.STYLE_SHOW_IF_BLANK]=new BooleanManager(BIRTConstants.BIRT_SHOW_IF_BLANK_PROPERTY,true,false);
  vms[StyleConstants.STYLE_FONT_FAMILY]=new FontFamilyManager();
  vms[StyleConstants.STYLE_PAGE_BREAK_AFTER]=new PageBreakBeforeAfterManager(CSSConstants.CSS_PAGE_BREAK_AFTER_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_BOTTOM]=new MarginManager(CSSConstants.CSS_MARGIN_BOTTOM_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_TOP]=new MarginManager(CSSConstants.CSS_MARGIN_TOP_PROPERTY);
  vms[StyleConstants.STYLE_WIDOWS]=new IntegerManager(CSSConstants.CSS_WIDOWS_PROPERTY,true,2);
  vms[StyleConstants.STYLE_PADDING_BOTTOM]=new LengthManager(CSSConstants.CSS_PADDING_BOTTOM_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_PADDING_TOP]=new LengthManager(CSSConstants.CSS_PADDING_TOP_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_VISIBLE_FORMAT]=new VisibleFormatManager();
  vms[StyleConstants.STYLE_DIRECTION]=new StringManager(BIRTConstants.CSS_DIRECTION_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_BACKGROUND_HEIGHT]=new StringManager(CSSConstants.CSS_BACKGROUND_HEIGHT_PROPERTY,false,null);
  vms[StyleConstants.STYLE_BACKGROUND_WIDTH]=new StringManager(CSSConstants.CSS_BACKGROUND_WIDTH_PROPERTY,false,null);
  vms[StyleConstants.STYLE_DATA_FORMAT]=new DataFormatManager();
}","public BIRTPropertyManagerFactory(){
  vms=new ValueManager[PerfectHash.TOTAL_KEYWORDS];
  vms[StyleConstants.STYLE_TEXT_ALIGN]=new TextAlignManager(CSSConstants.CSS_TEXT_ALIGN_PROPERTY,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_TEXT_INDENT]=new LengthManager(CSSConstants.CSS_TEXT_INDENT_PROPERTY,true,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_NUMBER_ALIGN]=new TextAlignManager(BIRTConstants.BIRT_NUMBER_ALIGN_PROPERTY,CSSValueConstants.NONE_VALUE);
  vms[StyleConstants.STYLE_VERTICAL_ALIGN]=new VerticalAlignManager();
  vms[StyleConstants.STYLE_LINE_HEIGHT]=new LineHeightManager();
  vms[StyleConstants.STYLE_BACKGROUND_REPEAT]=new BackgroundRepeatManager();
  vms[StyleConstants.STYLE_BACKGROUND_ATTACHMENT]=new BackgroundAttachmentManager();
  vms[StyleConstants.STYLE_CAN_SHRINK]=new BooleanManager(BIRTConstants.BIRT_CAN_SHRINK_PROPERTY,true,false);
  vms[StyleConstants.STYLE_TEXT_OVERLINE]=new TextOverlineManager();
  vms[StyleConstants.STYLE_TEXT_UNDERLINE]=new TextUnderlineManager();
  vms[StyleConstants.STYLE_TEXT_LINETHROUGH]=new TextLineThroughManager();
  vms[StyleConstants.STYLE_BACKGROUND_IMAGE]=new URIManager(CSSConstants.CSS_BACKGROUND_IMAGE_PROPERTY,false,CSSValueConstants.NONE_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_TOP_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_LEFT_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_RIGHT_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_BOTTOM_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_COLOR]=new ColorManager(CSSConstants.CSS_COLOR_PROPERTY,true,CSSValueConstants.BLACK_RGB_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_TOP_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_LEFT_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_RIGHT_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_BOTTOM_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_COLOR]=new ColorManager(CSSConstants.CSS_BACKGROUND_COLOR_PROPERTY,false,CSSValueConstants.TRANSPARENT_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_TOP_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_LEFT_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_RIGHT_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_BOTTOM_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_LETTER_SPACING]=new SpacingManager(CSSConstants.CSS_LETTER_SPACING_PROPERTY);
  vms[StyleConstants.STYLE_FONT_WEIGHT]=new FontWeightManager();
  vms[StyleConstants.STYLE_FONT_VARIANT]=new FontVariantManager();
  vms[StyleConstants.STYLE_MARGIN_LEFT]=new MarginManager(CSSConstants.CSS_MARGIN_LEFT_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_RIGHT]=new MarginManager(CSSConstants.CSS_MARGIN_RIGHT_PROPERTY);
  vms[StyleConstants.STYLE_DISPLAY]=new DisplayManager();
  vms[StyleConstants.STYLE_TEXT_TRANSFORM]=new TextTransformManager();
  vms[StyleConstants.STYLE_BACKGROUND_POSITION_Y]=new BackgroundPositionYManager();
  vms[StyleConstants.STYLE_PADDING_LEFT]=new LengthManager(CSSConstants.CSS_PADDING_LEFT_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_PADDING_RIGHT]=new LengthManager(CSSConstants.CSS_PADDING_RIGHT_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_FONT_SIZE]=new FontSizeManager();
  vms[StyleConstants.STYLE_FONT_STYLE]=new FontStyleManager();
  vms[StyleConstants.STYLE_WHITE_SPACE]=new WhiteSpaceManager();
  vms[StyleConstants.STYLE_ORPHANS]=new IntegerManager(CSSConstants.CSS_ORPHANS_PROPERTY,true,2);
  vms[StyleConstants.STYLE_MASTER_PAGE]=new StringManager(BIRTConstants.BIRT_MASTER_PAGE_PROPERTY,false,null);
  vms[StyleConstants.STYLE_WORD_SPACING]=new SpacingManager(CSSConstants.CSS_WORD_SPACING_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_POSITION_X]=new BackgroundPositionXManager();
  vms[StyleConstants.STYLE_PAGE_BREAK_BEFORE]=new PageBreakBeforeAfterManager(CSSConstants.CSS_PAGE_BREAK_BEFORE_PROPERTY);
  vms[StyleConstants.STYLE_PAGE_BREAK_INSIDE]=new PageBreakInsideManager();
  vms[StyleConstants.STYLE_SHOW_IF_BLANK]=new BooleanManager(BIRTConstants.BIRT_SHOW_IF_BLANK_PROPERTY,true,false);
  vms[StyleConstants.STYLE_FONT_FAMILY]=new FontFamilyManager();
  vms[StyleConstants.STYLE_PAGE_BREAK_AFTER]=new PageBreakBeforeAfterManager(CSSConstants.CSS_PAGE_BREAK_AFTER_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_BOTTOM]=new MarginManager(CSSConstants.CSS_MARGIN_BOTTOM_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_TOP]=new MarginManager(CSSConstants.CSS_MARGIN_TOP_PROPERTY);
  vms[StyleConstants.STYLE_WIDOWS]=new IntegerManager(CSSConstants.CSS_WIDOWS_PROPERTY,true,2);
  vms[StyleConstants.STYLE_PADDING_BOTTOM]=new LengthManager(CSSConstants.CSS_PADDING_BOTTOM_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_PADDING_TOP]=new LengthManager(CSSConstants.CSS_PADDING_TOP_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_VISIBLE_FORMAT]=new VisibleFormatManager();
  vms[StyleConstants.STYLE_DIRECTION]=new DirectionManager();
  vms[StyleConstants.STYLE_BACKGROUND_HEIGHT]=new BackgroundSizeManager(CSSConstants.CSS_BACKGROUND_HEIGHT_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_WIDTH]=new BackgroundSizeManager(CSSConstants.CSS_BACKGROUND_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_DATA_FORMAT]=new DataFormatManager();
}",0.9875692927935494
69730,"/** 
 * Gets the proper icon image for the given model
 * @param model the given model
 * @return Returns the proper icon image for the given model, or null if noproper one exists
 */
public static Image getImage(Object model){
  Image image=null;
  if (model instanceof ExtendedItemHandle) {
    image=getImage(getIconSymbolName(((ExtendedItemHandle)model).getExtensionName(),IExtensionConstants.ATTRIBUTE_KEY_OUTLINE_ICON));
    if (image == null) {
      image=getImage(IReportGraphicConstants.ICON_ELEMENT_EXTENDED_ITEM);
    }
  }
  if (model instanceof VariableElementHandle) {
    VariableElementHandle variable=(VariableElementHandle)model;
    if (DesignChoiceConstants.VARIABLE_TYPE_REPORT.equals(variable.getType())) {
      return getImage(IReportGraphicConstants.ICON_ELEMENT_VARIABLE_REPORT);
    }
 else {
      return getImage(IReportGraphicConstants.ICON_ELEMENT_VARIABLE_PAGE);
    }
  }
 else   if (model instanceof DesignElementHandle) {
    if (isLinkImg((DesignElementHandle)model) == true) {
      image=getImage(((DesignElementHandle)model).getElement().getDefn().getName() + ""String_Node_Str"" + IReportGraphicConstants.LINK);
    }
 else {
      image=getImage(((DesignElementHandle)model).getElement().getDefn().getName());
    }
  }
 else   if (model instanceof CssStyleSheetHandle) {
    if (isCSSLinkImg((CssStyleSheetHandle)model) == true) {
      image=getImage(IReportGraphicConstants.ICON_ELEMENT_CSS_STYLE_SHEET + ""String_Node_Str"" + IReportGraphicConstants.LINK);
    }
 else {
      image=getImage(IReportGraphicConstants.ICON_ELEMENT_CSS_STYLE_SHEET);
    }
  }
  return image;
}","/** 
 * Gets the proper icon image for the given model
 * @param model the given model
 * @return Returns the proper icon image for the given model, or null if noproper one exists
 */
public static Image getImage(Object model){
  Image image=null;
  if (model instanceof ExtendedItemHandle) {
    image=getImage(getIconSymbolName(((ExtendedItemHandle)model).getExtensionName(),IExtensionConstants.ATTRIBUTE_KEY_OUTLINE_ICON));
    if (image == null) {
      image=getImage(IReportGraphicConstants.ICON_ELEMENT_EXTENDED_ITEM);
    }
  }
 else   if (model instanceof VariableElementHandle) {
    VariableElementHandle variable=(VariableElementHandle)model;
    if (DesignChoiceConstants.VARIABLE_TYPE_REPORT.equals(variable.getType())) {
      return getImage(IReportGraphicConstants.ICON_ELEMENT_VARIABLE_REPORT);
    }
 else {
      return getImage(IReportGraphicConstants.ICON_ELEMENT_VARIABLE_PAGE);
    }
  }
 else   if (model instanceof DesignElementHandle) {
    if (isLinkImg((DesignElementHandle)model) == true) {
      image=getImage(((DesignElementHandle)model).getElement().getDefn().getName() + ""String_Node_Str"" + IReportGraphicConstants.LINK);
    }
 else {
      image=getImage(((DesignElementHandle)model).getElement().getDefn().getName());
    }
  }
 else   if (model instanceof CssStyleSheetHandle) {
    if (isCSSLinkImg((CssStyleSheetHandle)model) == true) {
      image=getImage(IReportGraphicConstants.ICON_ELEMENT_CSS_STYLE_SHEET + ""String_Node_Str"" + IReportGraphicConstants.LINK);
    }
 else {
      image=getImage(IReportGraphicConstants.ICON_ELEMENT_CSS_STYLE_SHEET);
    }
  }
  return image;
}",0.9981470043236566
69731,"public void handleSelectionChanged(ISelection selection){
  if (editorUIEnabled == true) {
    saveModel();
  }
  if (selection != null) {
    Object[] sel=((IStructuredSelection)selection).toArray();
    IElementPropertyDefn targetMethod=null;
    if (sel.length == 1) {
      editObject=sel[0];
      if (sel[0] instanceof ScriptElementNode) {
        editObject=((ScriptElementNode)editObject).getParent();
      }
 else       if (sel[0] instanceof ScriptObjectNode) {
        editObject=((ScriptObjectNode)editObject).getParent();
      }
      if (editObject instanceof PropertyHandle) {
        targetMethod=((PropertyHandle)editObject).getPropertyDefn();
        editObject=((PropertyHandle)editObject).getElementHandle();
      }
    }
    if (editObject instanceof DesignElementHandle) {
      palettePage.getSupport().setCurrentEditObject(editObject);
      setComboViewerInput(editObject);
      cmbItemLastSelected=null;
      setEditorText(""String_Node_Str"");
      if (cmbExpList.getItemCount() > 0) {
        enableEditor();
        if (targetMethod != null) {
          selectItemInComboExpList(new StructuredSelection(targetMethod));
        }
 else {
          selectItemInComboExpList((ISelection)selectionMap.get(getModel()));
        }
      }
 else {
        disableEditor();
      }
      checkDirty();
      palettePage.getSupport().updateParametersTree();
    }
 else {
      disableEditor();
      cmbExpList.removeAll();
      cmbSubFunctions.setItems(null);
      cmbItemLastSelected=null;
      palettePage.getSupport().setCurrentEditObject(null);
    }
    if (sel.length > 0) {
      updateAnnotationLabel(sel[0]);
    }
  }
}","public void handleSelectionChanged(ISelection selection){
  if (editorUIEnabled == true) {
    saveModel();
  }
  if (selection != null) {
    Object[] sel=((IStructuredSelection)selection).toArray();
    IElementPropertyDefn targetMethod=null;
    if (sel.length == 1) {
      editObject=sel[0];
      if (sel[0] instanceof ScriptElementNode) {
        editObject=((ScriptElementNode)editObject).getParent();
      }
 else       if (sel[0] instanceof ScriptObjectNode) {
        editObject=((ScriptObjectNode)editObject).getParent();
      }
      if (editObject instanceof PropertyHandle) {
        targetMethod=((PropertyHandle)editObject).getPropertyDefn();
        if (targetMethod.getMethodInfo() != null) {
          editObject=((PropertyHandle)editObject).getElementHandle();
        }
      }
    }
    if (editObject instanceof DesignElementHandle) {
      palettePage.getSupport().setCurrentEditObject(editObject);
      setComboViewerInput(editObject);
      cmbItemLastSelected=null;
      setEditorText(""String_Node_Str"");
      if (cmbExpList.getItemCount() > 0) {
        enableEditor();
        if (targetMethod != null) {
          selectItemInComboExpList(new StructuredSelection(targetMethod));
        }
 else {
          selectItemInComboExpList((ISelection)selectionMap.get(getModel()));
        }
      }
 else {
        disableEditor();
      }
      checkDirty();
      palettePage.getSupport().updateParametersTree();
    }
 else {
      disableEditor();
      cmbExpList.removeAll();
      cmbSubFunctions.setItems(null);
      cmbItemLastSelected=null;
      palettePage.getSupport().setCurrentEditObject(null);
    }
    if (sel.length > 0) {
      updateAnnotationLabel(sel[0]);
    }
  }
}",0.98105387803434
69732,"private void createImageMap(int[] area,IImageArea imageArea,String url,String targetWindow){
  if (url == null) {
    return;
  }
  ActionContent link=new ActionContent();
  if (isBookmark(url)) {
    String bookmark=getBookmark(url);
    link.setBookmark(bookmark);
  }
 else {
    link.setHyperlink(url,targetWindow);
  }
  area=getAbsoluteArea(area,imageArea);
  createImageMapContainer(area[0],area[1],area[2],area[3],link);
}","private void createImageMap(int[] area,IImageArea imageArea,String url,String targetWindow){
  if (url == null) {
    return;
  }
  url=url.replaceAll(""String_Node_Str"",""String_Node_Str"");
  ActionContent link=new ActionContent();
  if (isBookmark(url)) {
    String bookmark=getBookmark(url);
    link.setBookmark(bookmark);
  }
 else {
    link.setHyperlink(url,targetWindow);
  }
  area=getAbsoluteArea(area,imageArea);
  createImageMapContainer(area[0],area[1],area[2],area[3],link);
}",0.9357997823721436
69733,"protected void createVariablesCategory(){
  if (variablesItem == null) {
    int idx=getIndex(contextItem);
    variablesItem=createTopTreeItem(tree,""String_Node_Str"",idx);
  }
  buildVariableTree();
}","protected void createVariablesCategory(){
  if (variablesItem == null || variablesItem.isDisposed()) {
    int idx=getIndex(contextItem);
    variablesItem=createTopTreeItem(tree,""String_Node_Str"",idx);
  }
  buildVariableTree();
}",0.9305555555555556
69734,"private void retrySetDateParamValue(ParameterName paramName,int paramIndex,Date paramValue,int parameterType) throws DataException {
switch (parameterType) {
case Types.CHAR:
{
      Date sqlDate=new Date(paramValue.getTime());
      String s=sqlDate.toString();
      setString(paramName,paramIndex,s);
      return;
    }
case Types.TIME:
{
    Time timeValue=new Time(paramValue.getTime());
    setTime(paramName,paramIndex,timeValue);
    return;
  }
case Types.TIMESTAMP:
{
  Timestamp ts=new Timestamp(paramValue.getTime());
  setTimestamp(paramName,paramIndex,ts);
  return;
}
default :
conversionError(paramName,paramIndex,paramValue,parameterType,null);
return;
}
}","private void retrySetDateParamValue(ParameterName paramName,int paramIndex,java.util.Date paramValue,int parameterType) throws DataException {
switch (parameterType) {
case Types.CHAR:
{
      Date sqlDate=new Date(paramValue.getTime());
      String s=sqlDate.toString();
      setString(paramName,paramIndex,s);
      return;
    }
case Types.TIME:
{
    Time timeValue=new Time(paramValue.getTime());
    setTime(paramName,paramIndex,timeValue);
    return;
  }
case Types.TIMESTAMP:
{
  Timestamp ts=new Timestamp(paramValue.getTime());
  setTimestamp(paramName,paramIndex,ts);
  return;
}
default :
conversionError(paramName,paramIndex,paramValue,parameterType,null);
return;
}
}",0.9926362297496318
69735,"private void setParameterValue(String paramName,int paramIndex,Object paramValue) throws DataException {
  final String methodName=""String_Node_Str"";
  ParameterName paramNameObj=null;
  if (paramName != null) {
    paramNameObj=new ParameterName(paramName,this);
    paramNameObj.logNullNativeName();
  }
  try {
    if (paramValue == null) {
      setNull(paramNameObj,paramIndex);
      return;
    }
    if (paramValue instanceof Integer) {
      int i=((Integer)paramValue).intValue();
      setInt(paramNameObj,paramIndex,i);
      return;
    }
    if (paramValue instanceof Double) {
      double d=((Double)paramValue).doubleValue();
      setDouble(paramNameObj,paramIndex,d);
      return;
    }
    if (paramValue instanceof String) {
      String string=(String)paramValue;
      setString(paramNameObj,paramIndex,string);
      return;
    }
    if (paramValue instanceof BigDecimal) {
      BigDecimal decimal=(BigDecimal)paramValue;
      setBigDecimal(paramNameObj,paramIndex,decimal);
      return;
    }
    if (paramValue instanceof Time) {
      Time time=(Time)paramValue;
      setTime(paramNameObj,paramIndex,time);
      return;
    }
    if (paramValue instanceof Timestamp) {
      Timestamp timestamp=(Timestamp)paramValue;
      setTimestamp(paramNameObj,paramIndex,timestamp);
      return;
    }
    if (paramValue instanceof java.sql.Date) {
      Date sqlDate=(Date)paramValue;
      setDate(paramNameObj,paramIndex,sqlDate);
      return;
    }
    if (paramValue instanceof Boolean) {
      boolean val=((Boolean)paramValue).booleanValue();
      setBoolean(paramNameObj,paramIndex,val);
      return;
    }
{
      setObject(paramNameObj,paramIndex,paramValue);
      return;
    }
  }
 catch (  RuntimeException ex) {
    retrySetParameterValue(paramNameObj,paramIndex,paramValue,ex);
    return;
  }
catch (  DataException ex) {
    retrySetParameterValue(paramNameObj,paramIndex,paramValue,ex);
    return;
  }
}","private void setParameterValue(String paramName,int paramIndex,Object paramValue) throws DataException {
  final String methodName=""String_Node_Str"";
  ParameterName paramNameObj=null;
  if (paramName != null) {
    paramNameObj=new ParameterName(paramName,this);
    paramNameObj.logNullNativeName();
  }
  try {
    if (paramValue == null) {
      setNull(paramNameObj,paramIndex);
      return;
    }
    if (paramValue instanceof Integer) {
      int i=((Integer)paramValue).intValue();
      setInt(paramNameObj,paramIndex,i);
      return;
    }
    if (paramValue instanceof Double) {
      double d=((Double)paramValue).doubleValue();
      setDouble(paramNameObj,paramIndex,d);
      return;
    }
    if (paramValue instanceof String) {
      String string=(String)paramValue;
      setString(paramNameObj,paramIndex,string);
      return;
    }
    if (paramValue instanceof BigDecimal) {
      BigDecimal decimal=(BigDecimal)paramValue;
      setBigDecimal(paramNameObj,paramIndex,decimal);
      return;
    }
    if (paramValue instanceof Time) {
      Time time=(Time)paramValue;
      setTime(paramNameObj,paramIndex,time);
      return;
    }
    if (paramValue instanceof Timestamp) {
      Timestamp timestamp=(Timestamp)paramValue;
      setTimestamp(paramNameObj,paramIndex,timestamp);
      return;
    }
    if (paramValue instanceof java.sql.Date) {
      Date sqlDate=(Date)paramValue;
      setDate(paramNameObj,paramIndex,sqlDate);
      return;
    }
    if (paramValue instanceof java.util.Date) {
      java.util.Date date=(java.util.Date)paramValue;
      Timestamp sqlDateTime=new Timestamp(date.getTime());
      setTimestamp(paramNameObj,paramIndex,sqlDateTime);
      return;
    }
    if (paramValue instanceof Boolean) {
      boolean val=((Boolean)paramValue).booleanValue();
      setBoolean(paramNameObj,paramIndex,val);
      return;
    }
{
      setObject(paramNameObj,paramIndex,paramValue);
      return;
    }
  }
 catch (  RuntimeException ex) {
    retrySetParameterValue(paramNameObj,paramIndex,paramValue,ex);
    return;
  }
catch (  DataException ex) {
    retrySetParameterValue(paramNameObj,paramIndex,paramValue,ex);
    return;
  }
}",0.942512077294686
69736,"private void preview(String uri){
  try {
    if (imageData != null) {
      ByteArrayInputStream bis=new ByteArrayInputStream(Base64.decodeBase64(imageData.getBytes()));
      previewCanvas.loadImage(bis);
    }
 else {
      previewCanvas.loadImage(new URL(uri));
    }
  }
 catch (  Exception e) {
    WizardBase.displayException(e);
  }
}","private void preview(String uri){
  try {
    if (imageData != null) {
      ByteArrayInputStream bis=new ByteArrayInputStream(Base64.decodeBase64(imageData.getBytes()));
      previewCanvas.loadImage(bis);
    }
 else {
      previewCanvas.loadImage(new URL(uri));
    }
  }
 catch (  Exception e) {
    logger.log(e);
  }
}",0.944527736131934
69737,"private void updateButtons(){
  boolean complete=uriEditor.getText() != null && uriEditor.getText().trim().length() > 0;
  URL url=null;
  try {
    url=new URL(removeQuote(uriEditor.getText().trim()));
    if (selectedType == EMBEDDED_TYPE) {
      File file=new File(url.getPath());
      complete=file.exists() && file.isAbsolute();
    }
 else     if (selectedType == URI_TYPE) {
      ImageDescriptor.createFromURL(url).createImage();
    }
  }
 catch (  Exception e) {
    complete=false;
  }
  previewButton.setEnabled(complete);
  getButton(IDialogConstants.OK_ID).setEnabled(complete);
  browseButton.setVisible(embedded.getSelection());
}","private void updateButtons(){
  boolean complete=uriEditor.getText() != null && uriEditor.getText().trim().length() > 0;
  URL url=null;
  try {
    url=new URL(removeQuote(uriEditor.getText().trim()));
    if (selectedType == EMBEDDED_TYPE) {
      File file=new File(url.getPath());
      complete=file.exists() && file.isAbsolute();
    }
  }
 catch (  Exception e) {
    complete=false;
  }
  previewButton.setEnabled(complete);
  getButton(IDialogConstants.OK_ID).setEnabled(complete);
  browseButton.setVisible(embedded.getSelection());
}",0.912751677852349
69738,"/** 
 * Remove the quote if the string enclosed width quote .
 * @param string
 * @return string
 */
public String removeQuote(String string){
  if (string != null && string.trim().length() >= 2 && string.trim().startsWith(""String_Node_Str"") && string.trim().endsWith(""String_Node_Str"")) {
    return string.trim().substring(1,string.trim().length() - 1);
  }
  return string.trim();
}","/** 
 * Remove the quote if the string enclosed width quote .
 * @param string
 * @return string
 */
private String removeQuote(String string){
  if (string != null && string.trim().length() >= 2 && string.trim().startsWith(""String_Node_Str"") && string.trim().endsWith(""String_Node_Str"")) {
    return string.trim().substring(1,string.trim().length() - 1);
  }
  return string.trim();
}",0.9857328145265888
69739,"private void retrySetDateParamValue(ParameterName paramName,int paramIndex,java.util.Date paramValue,int parameterType) throws DataException {
switch (parameterType) {
case Types.CHAR:
{
      Date sqlDate=new Date(paramValue.getTime());
      String s=sqlDate.toString();
      setString(paramName,paramIndex,s);
      return;
    }
case Types.TIME:
{
    Time timeValue=new Time(paramValue.getTime());
    setTime(paramName,paramIndex,timeValue);
    return;
  }
case Types.TIMESTAMP:
{
  Timestamp ts=new Timestamp(paramValue.getTime());
  setTimestamp(paramName,paramIndex,ts);
  return;
}
default :
conversionError(paramName,paramIndex,paramValue,parameterType,null);
return;
}
}","private void retrySetDateParamValue(ParameterName paramName,int paramIndex,Date paramValue,int parameterType) throws DataException {
switch (parameterType) {
case Types.CHAR:
{
      Date sqlDate=new Date(paramValue.getTime());
      String s=sqlDate.toString();
      setString(paramName,paramIndex,s);
      return;
    }
case Types.TIME:
{
    Time timeValue=new Time(paramValue.getTime());
    setTime(paramName,paramIndex,timeValue);
    return;
  }
case Types.TIMESTAMP:
{
  Timestamp ts=new Timestamp(paramValue.getTime());
  setTimestamp(paramName,paramIndex,ts);
  return;
}
default :
conversionError(paramName,paramIndex,paramValue,parameterType,null);
return;
}
}",0.9926362297496318
69740,"private void setParameterValue(String paramName,int paramIndex,Object paramValue) throws DataException {
  final String methodName=""String_Node_Str"";
  ParameterName paramNameObj=null;
  if (paramName != null) {
    paramNameObj=new ParameterName(paramName,this);
    paramNameObj.logNullNativeName();
  }
  try {
    if (paramValue == null) {
      setNull(paramNameObj,paramIndex);
      return;
    }
    if (paramValue instanceof Integer) {
      int i=((Integer)paramValue).intValue();
      setInt(paramNameObj,paramIndex,i);
      return;
    }
    if (paramValue instanceof Double) {
      double d=((Double)paramValue).doubleValue();
      setDouble(paramNameObj,paramIndex,d);
      return;
    }
    if (paramValue instanceof String) {
      String string=(String)paramValue;
      setString(paramNameObj,paramIndex,string);
      return;
    }
    if (paramValue instanceof BigDecimal) {
      BigDecimal decimal=(BigDecimal)paramValue;
      setBigDecimal(paramNameObj,paramIndex,decimal);
      return;
    }
    if (paramValue instanceof Time) {
      Time time=(Time)paramValue;
      setTime(paramNameObj,paramIndex,time);
      return;
    }
    if (paramValue instanceof Timestamp) {
      Timestamp timestamp=(Timestamp)paramValue;
      setTimestamp(paramNameObj,paramIndex,timestamp);
      return;
    }
    if (paramValue instanceof java.sql.Date) {
      Date sqlDate=(Date)paramValue;
      setDate(paramNameObj,paramIndex,sqlDate);
      return;
    }
    if (paramValue instanceof java.util.Date) {
      java.util.Date date=(java.util.Date)paramValue;
      Timestamp sqlDateTime=new Timestamp(date.getTime());
      setTimestamp(paramNameObj,paramIndex,sqlDateTime);
      return;
    }
    if (paramValue instanceof Boolean) {
      boolean val=((Boolean)paramValue).booleanValue();
      setBoolean(paramNameObj,paramIndex,val);
      return;
    }
{
      setObject(paramNameObj,paramIndex,paramValue);
      return;
    }
  }
 catch (  RuntimeException ex) {
    retrySetParameterValue(paramNameObj,paramIndex,paramValue,ex);
    return;
  }
catch (  DataException ex) {
    retrySetParameterValue(paramNameObj,paramIndex,paramValue,ex);
    return;
  }
}","private void setParameterValue(String paramName,int paramIndex,Object paramValue) throws DataException {
  final String methodName=""String_Node_Str"";
  ParameterName paramNameObj=null;
  if (paramName != null) {
    paramNameObj=new ParameterName(paramName,this);
    paramNameObj.logNullNativeName();
  }
  try {
    if (paramValue == null) {
      setNull(paramNameObj,paramIndex);
      return;
    }
    if (paramValue instanceof Integer) {
      int i=((Integer)paramValue).intValue();
      setInt(paramNameObj,paramIndex,i);
      return;
    }
    if (paramValue instanceof Double) {
      double d=((Double)paramValue).doubleValue();
      setDouble(paramNameObj,paramIndex,d);
      return;
    }
    if (paramValue instanceof String) {
      String string=(String)paramValue;
      setString(paramNameObj,paramIndex,string);
      return;
    }
    if (paramValue instanceof BigDecimal) {
      BigDecimal decimal=(BigDecimal)paramValue;
      setBigDecimal(paramNameObj,paramIndex,decimal);
      return;
    }
    if (paramValue instanceof Time) {
      Time time=(Time)paramValue;
      setTime(paramNameObj,paramIndex,time);
      return;
    }
    if (paramValue instanceof Timestamp) {
      Timestamp timestamp=(Timestamp)paramValue;
      setTimestamp(paramNameObj,paramIndex,timestamp);
      return;
    }
    if (paramValue instanceof java.sql.Date) {
      Date sqlDate=(Date)paramValue;
      setDate(paramNameObj,paramIndex,sqlDate);
      return;
    }
    if (paramValue instanceof Boolean) {
      boolean val=((Boolean)paramValue).booleanValue();
      setBoolean(paramNameObj,paramIndex,val);
      return;
    }
{
      setObject(paramNameObj,paramIndex,paramValue);
      return;
    }
  }
 catch (  RuntimeException ex) {
    retrySetParameterValue(paramNameObj,paramIndex,paramValue,ex);
    return;
  }
catch (  DataException ex) {
    retrySetParameterValue(paramNameObj,paramIndex,paramValue,ex);
    return;
  }
}",0.942512077294686
69741,"/** 
 * compile the expression from a script tree
 * @param expression
 * @param context
 * @param tree
 * @param columnExprList
 * @throws BirtException
 */
private void CompiledExprFromTree(String expression,Context context,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  if (tree.getFirstChild() == tree.getLastChild()) {
    if (tree.getFirstChild().getType() == Token.FUNCTION) {
      int index=getFunctionIndex(tree.getFirstChild().getString(),tree);
      compileFunctionNode(tree.getFunctionNode(index),tree,columnExprList);
    }
 else {
      if (tree.getFirstChild().getType() != Token.EXPR_RESULT && tree.getFirstChild().getType() != Token.EXPR_VOID && tree.getFirstChild().getType() != Token.BLOCK) {
        throw new CoreException(pluginId,ResourceConstants.INVALID_EXPRESSION);
      }
      Node exprNode=tree.getFirstChild();
      processChild(exprNode,tree,columnExprList);
    }
  }
 else {
    compileComplexExpr(tree,tree,columnExprList);
  }
}","/** 
 * compile the expression from a script tree
 * @param expression
 * @param context
 * @param tree
 * @param columnExprList
 * @throws BirtException
 */
private void CompiledExprFromTree(String expression,Context context,ScriptOrFnNode tree,List columnExprList) throws BirtException {
  if (tree.getFirstChild() == tree.getLastChild()) {
    if (tree.getFirstChild().getType() == Token.FUNCTION) {
      int index=getFunctionIndex(tree.getFirstChild().getString(),tree);
      compileFunctionNode(tree.getFunctionNode(index),tree,columnExprList);
    }
 else {
      if (tree.getFirstChild().getType() != Token.EXPR_RESULT && tree.getFirstChild().getType() != Token.EXPR_VOID && tree.getFirstChild().getType() != Token.BLOCK && tree.getFirstChild().getType() != Token.SCRIPT) {
        throw new CoreException(pluginId,ResourceConstants.INVALID_EXPRESSION);
      }
      Node exprNode=tree.getFirstChild();
      processChild(exprNode,tree,columnExprList);
    }
  }
 else {
    compileComplexExpr(tree,tree,columnExprList);
  }
}",0.9752720079129574
69742,"protected CubeCursor getCubeCursor(){
  if (cubeCursor != null) {
    return cubeCursor;
  }
 else   if (parentExecutor instanceof BaseCrosstabExecutor) {
    return ((BaseCrosstabExecutor)parentExecutor).getCubeCursor();
  }
  return null;
}","protected CubeCursor getCubeCursor(){
  if (cubeCursor != null) {
    return cubeCursor;
  }
 else   if (parentExecutor instanceof BaseCrosstabExecutor && !(this instanceof CrosstabReportItemExecutor)) {
    return ((BaseCrosstabExecutor)parentExecutor).getCubeCursor();
  }
  return null;
}",0.9080675422138836
69743,"protected ICubeResultSet getCubeResultSet(){
  if (cubeRset != null) {
    return cubeRset;
  }
 else   if (parentExecutor instanceof BaseCrosstabExecutor) {
    return ((BaseCrosstabExecutor)parentExecutor).getCubeResultSet();
  }
  return null;
}","protected ICubeResultSet getCubeResultSet(){
  if (cubeRset != null) {
    return cubeRset;
  }
 else   if (parentExecutor instanceof BaseCrosstabExecutor && !(this instanceof CrosstabReportItemExecutor)) {
    return ((BaseCrosstabExecutor)parentExecutor).getCubeResultSet();
  }
  return null;
}",0.910091743119266
69744,"private void updateButtons(){
  boolean complete=uriEditor.getText() != null && uriEditor.getText().trim().length() > 0;
  URL url=null;
  try {
    url=new URL(uriEditor.getText().trim());
    if (selectedType == EMBEDDED_TYPE) {
      File file=new File(url.getPath());
      complete=file.exists() && file.isAbsolute();
    }
  }
 catch (  Exception e) {
    complete=false;
  }
  previewButton.setEnabled(complete);
  getButton(IDialogConstants.OK_ID).setEnabled(complete);
  browseButton.setVisible(embedded.getSelection());
}","private void updateButtons(){
  boolean complete=uriEditor.getText() != null && uriEditor.getText().trim().length() > 0;
  URL url=null;
  try {
    url=new URL(removeQuote(uriEditor.getText().trim()));
    if (selectedType == EMBEDDED_TYPE) {
      File file=new File(url.getPath());
      complete=file.exists() && file.isAbsolute();
    }
 else     if (selectedType == URI_TYPE) {
      ImageDescriptor.createFromURL(url).createImage();
    }
  }
 catch (  Exception e) {
    complete=false;
  }
  previewButton.setEnabled(complete);
  getButton(IDialogConstants.OK_ID).setEnabled(complete);
  browseButton.setVisible(embedded.getSelection());
}",0.900763358778626
69745,"/** 
 * Remove the quote if the string enclosed width quote .
 * @param string
 * @return string
 */
public String removeQuote(String string){
  if (string != null && string.length() >= 2 && string.startsWith(""String_Node_Str"") && string.endsWith(""String_Node_Str"")) {
    return string.substring(1,string.length() - 1);
  }
  return string;
}","/** 
 * Remove the quote if the string enclosed width quote .
 * @param string
 * @return string
 */
public String removeQuote(String string){
  if (string != null && string.trim().length() >= 2 && string.trim().startsWith(""String_Node_Str"") && string.trim().endsWith(""String_Node_Str"")) {
    return string.trim().substring(1,string.trim().length() - 1);
  }
  return string.trim();
}",0.9423076923076924
69746,"public ScriptContext(ScriptableObject root){
  try {
    this.context=Context.enter();
    global=new ImporterTopLevel();
    if (root != null) {
      new LazilyLoadedCtor(global,""String_Node_Str"",""String_Node_Str"",false);
      global.exportAsJSClass(3,global,false);
      global.delete(""String_Node_Str"");
      global.setPrototype(root);
    }
 else {
      global.initStandardObjects(context,true);
    }
    this.scope=global;
    sharedScope=context.newObject(scope);
    sharedScope.setParentScope(scope);
  }
 catch (  Exception ex) {
    Context.exit();
    this.scope=null;
    this.context=null;
    if (logger.isLoggable(Level.WARNING)) {
      logger.log(Level.WARNING,ex.getMessage());
    }
  }
}","public ScriptContext(ScriptableObject root){
  try {
    this.context=Context.enter();
    global=new ImporterTopLevel();
    if (root != null) {
      new LazilyLoadedCtor(global,""String_Node_Str"",""String_Node_Str"",false);
      global.exportAsJSClass(3,global,false);
      global.delete(""String_Node_Str"");
      global.setPrototype(root);
    }
 else {
      global.initStandardObjects(context,true);
    }
    if (global.get(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.FUNCITON_BEAN_NAME,global) == org.mozilla.javascript.UniqueTag.NOT_FOUND) {
      IScriptFunctionContext functionContext=new IScriptFunctionContext(){
        public Object findProperty(        String name){
          return propertyMap.get(name);
        }
      }
;
      Object sObj=Context.javaToJS(functionContext,global);
      global.put(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.FUNCITON_BEAN_NAME,global,sObj);
    }
    this.scope=global;
    sharedScope=context.newObject(scope);
    sharedScope.setParentScope(scope);
  }
 catch (  Exception ex) {
    Context.exit();
    this.scope=null;
    this.context=null;
    if (logger.isLoggable(Level.WARNING)) {
      logger.log(Level.WARNING,ex.getMessage());
    }
  }
}",0.7256997455470738
69747,"/** 
 * The Calendar by default will give you an instance of current time. This is however not expected. The method clear() has to be invoked to re-init the Calendar instance.
 * @return
 */
private static Calendar getClearedCalendarInstance(int year,int month,int date){
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(year,month,date);
  return c;
}","/** 
 * The Calendar by default will give you an instance of current time. This is however not expected. The method clear() has to be invoked to re-init the Calendar instance.
 * @return
 */
private static Calendar getClearedCalendarInstance(int year,int month,int date){
  Calendar c=Calendar.getInstance(timeZone);
  c.clear();
  c.set(year,month,date);
  return c;
}",0.989041095890411
69748,"/** 
 * @param d
 * @return
 */
private static Calendar getCalendar(Date d){
  Calendar c=Calendar.getInstance();
  if (d == null) {
    c.clear();
    c.set(1970,0,1);
  }
 else {
    c.setTime(d);
  }
  return c;
}","/** 
 * @param d
 * @return
 */
private static Calendar getCalendar(Date d){
  Calendar c=Calendar.getInstance(timeZone);
  if (d == null) {
    c.clear();
    c.set(1970,0,1);
  }
 else {
    c.setTime(d);
  }
  return c;
}",0.9818181818181818
69749,"public Object execute(Object[] arguments,IScriptFunctionContext context) throws BirtException {
  scriptContext=context;
  if (scriptContext != null) {
    ULocale locale=(ULocale)scriptContext.findProperty(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.LOCALE);
    if (defaultLocale != null && !defaultLocale.equals(locale)) {
      abbrMonthFormat=null;
      monthFormat=null;
      abbrWeekFormat=null;
      weekFormat=null;
      defaultLocale=locale;
    }
 else     defaultLocale=locale;
  }
  return this.executor.execute(arguments,context);
}","public Object execute(Object[] arguments,IScriptFunctionContext context) throws BirtException {
  scriptContext=context;
  if (scriptContext != null) {
    ULocale locale=(ULocale)scriptContext.findProperty(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.LOCALE);
    if (defaultLocale != locale) {
      abbrMonthFormat=null;
      monthFormat=null;
      abbrWeekFormat=null;
      weekFormat=null;
      defaultLocale=locale;
    }
    timeZone=(TimeZone)scriptContext.findProperty(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.TIMEZONE);
  }
  return this.executor.execute(arguments,context);
}",0.8385502471169687
69750,"/** 
 * Returns a timestamp value which is midnight of the current date.
 * @return
 */
private static Date today(){
  Calendar calendar=Calendar.getInstance();
  calendar.set(Calendar.HOUR_OF_DAY,0);
  calendar.clear(Calendar.MINUTE);
  calendar.clear(Calendar.SECOND);
  calendar.clear(Calendar.MILLISECOND);
  return calendar.getTime();
}","/** 
 * Returns a timestamp value which is midnight of the current date.
 * @return
 */
private static Date today(){
  Calendar calendar=Calendar.getInstance(timeZone);
  calendar.set(Calendar.HOUR_OF_DAY,0);
  calendar.clear(Calendar.MINUTE);
  calendar.clear(Calendar.SECOND);
  calendar.clear(Calendar.MILLISECOND);
  return calendar.getTime();
}",0.9884057971014492
69751,"/** 
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @throws BirtException
 */
private DataEngineContext(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer,ClassLoader classLoader,ScriptContext context) throws BirtException {
  Object[] params={new Integer(mode),scope,reader,writer,classLoader};
  logger.entering(DataEngineContext.class.getName(),""String_Node_Str"",params);
  if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == DIRECT_PRESENTATION || mode == MODE_UPDATE))   throw new DataException(ResourceConstants.RD_INVALID_MODE);
  if (writer == null && mode == MODE_GENERATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_PRESENTATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_UPDATE)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  this.classLoader=classLoader;
  this.mode=mode;
  this.scope=newSubScope(scope,context);
  this.reader=reader;
  this.writer=writer;
  this.cacheOption=CACHE_USE_DEFAULT;
  this.scriptContext=context;
  this.currentLocale=ULocale.getDefault();
  this.currentTimeZone=TimeZone.getDefault();
  logger.exiting(DataEngineContext.class.getName(),""String_Node_Str"");
}","/** 
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @throws BirtException
 */
private DataEngineContext(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer,ClassLoader classLoader,ScriptContext context) throws BirtException {
  Object[] params={new Integer(mode),scope,reader,writer,classLoader};
  logger.entering(DataEngineContext.class.getName(),""String_Node_Str"",params);
  if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == DIRECT_PRESENTATION || mode == MODE_UPDATE))   throw new DataException(ResourceConstants.RD_INVALID_MODE);
  if (writer == null && mode == MODE_GENERATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_PRESENTATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_UPDATE)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  this.classLoader=classLoader;
  this.mode=mode;
  this.scope=scope;
  this.reader=reader;
  this.writer=writer;
  this.cacheOption=CACHE_USE_DEFAULT;
  this.scriptContext=context;
  this.currentLocale=ULocale.getDefault();
  this.currentTimeZone=TimeZone.getDefault();
  logger.exiting(DataEngineContext.class.getName(),""String_Node_Str"");
}",0.9880170081175106
69752,"/** 
 * @param locale The current task's locale
 */
public void setLocale(Locale locale){
  currentLocale=ULocale.forLocale(locale);
  propertyMap.put(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.LOCALE,currentLocale);
  DataException.setLocale(currentLocale);
}","/** 
 * @param locale The current task's locale
 */
public void setLocale(Locale locale){
  currentLocale=ULocale.forLocale(locale);
  DataException.setLocale(currentLocale);
}",0.7635574837310195
69753,"public void setTimeZone(TimeZone timeZone){
  this.timeZone=timeZone;
}","public void setTimeZone(TimeZone timeZone){
  this.timeZone=timeZone;
  this.getScriptContext().setTimeZone(timeZone);
}",0.743455497382199
69754,"/** 
 * @param locale The locale to set.
 */
public void setLocale(Locale locale){
  this.locale=locale;
  if (scriptContext != null) {
    scriptContext.getContext().setLocale(locale);
  }
}","/** 
 * @param locale The locale to set.
 */
public void setLocale(Locale locale){
  this.locale=locale;
  this.getScriptContext().setLocale(locale);
}",0.8421052631578947
69755,"/** 
 * @param type: a Data Engine data type
 * @return Data Engine data types compatible with <code>type</code>, including <code>type</code> itself
 * @throws exception if <code>DataType.ANY_TYPE</code>, <code>DataType.UNKNOWN_TYPE</code> or other unsupported int value is passed into
 */
public static int[] getCompatibleDataTypes(int type) throws AdapterException {
switch (type) {
case DataType.BOOLEAN_TYPE:
    return new int[]{DataType.BOOLEAN_TYPE};
case DataType.INTEGER_TYPE:
  return new int[]{DataType.INTEGER_TYPE};
case DataType.DOUBLE_TYPE:
return new int[]{DataType.DOUBLE_TYPE,DataType.INTEGER_TYPE};
case DataType.DECIMAL_TYPE:
return new int[]{DataType.DECIMAL_TYPE,DataType.DOUBLE_TYPE,DataType.INTEGER_TYPE};
case DataType.STRING_TYPE:
return new int[]{DataType.STRING_TYPE,DataType.BOOLEAN_TYPE,DataType.DECIMAL_TYPE,DataType.DOUBLE_TYPE,DataType.INTEGER_TYPE,DataType.DATE_TYPE,DataType.BLOB_TYPE,DataType.BINARY_TYPE,DataType.SQL_DATE_TYPE,DataType.SQL_TIME_TYPE};
case DataType.DATE_TYPE:
return new int[]{DataType.DATE_TYPE,DataType.SQL_DATE_TYPE,DataType.SQL_TIME_TYPE};
case DataType.BLOB_TYPE:
return new int[]{DataType.BLOB_TYPE};
case DataType.BINARY_TYPE:
return new int[]{DataType.BINARY_TYPE};
case DataType.SQL_DATE_TYPE:
return new int[]{DataType.SQL_DATE_TYPE,DataType.DATE_TYPE};
case DataType.SQL_TIME_TYPE:
return new int[]{DataType.SQL_TIME_TYPE};
default :
throw new AdapterException(ResourceConstants.INVALID_DATA_TYPE,type);
}
}","/** 
 * @param type: a Data Engine data type
 * @return Data Engine data types compatible with <code>type</code>, including <code>type</code> itself
 * @throws exception if <code>DataType.ANY_TYPE</code>, <code>DataType.UNKNOWN_TYPE</code> or other unsupported int value is passed into
 */
public static int[] getCompatibleDataTypes(int type) throws AdapterException {
switch (type) {
case DataType.BOOLEAN_TYPE:
    return new int[]{DataType.BOOLEAN_TYPE};
case DataType.INTEGER_TYPE:
  return new int[]{DataType.INTEGER_TYPE};
case DataType.DOUBLE_TYPE:
return new int[]{DataType.DOUBLE_TYPE,DataType.INTEGER_TYPE};
case DataType.DECIMAL_TYPE:
return new int[]{DataType.DECIMAL_TYPE,DataType.DOUBLE_TYPE,DataType.INTEGER_TYPE};
case DataType.STRING_TYPE:
return new int[]{DataType.STRING_TYPE,DataType.BOOLEAN_TYPE,DataType.DECIMAL_TYPE,DataType.DOUBLE_TYPE,DataType.INTEGER_TYPE,DataType.DATE_TYPE,DataType.BLOB_TYPE,DataType.BINARY_TYPE,DataType.SQL_DATE_TYPE,DataType.SQL_TIME_TYPE};
case DataType.DATE_TYPE:
return new int[]{DataType.DATE_TYPE,DataType.SQL_DATE_TYPE,DataType.SQL_TIME_TYPE};
case DataType.BLOB_TYPE:
return new int[]{DataType.BLOB_TYPE};
case DataType.BINARY_TYPE:
return new int[]{DataType.BINARY_TYPE};
case DataType.SQL_DATE_TYPE:
return new int[]{DataType.SQL_DATE_TYPE,DataType.DATE_TYPE};
case DataType.SQL_TIME_TYPE:
return new int[]{DataType.SQL_TIME_TYPE,DataType.DATE_TYPE};
default :
throw new AdapterException(ResourceConstants.INVALID_DATA_TYPE,type);
}
}",0.993587580155248
69756,"private ExpressionButton createExpressionButton(Composite composite,final Text property){
  ExpressionButton exprButton=UIUtil.createExpressionButton(composite,SWT.PUSH);
  if (handle == null) {
    handle=DesignElementFactory.getInstance(getModuleHandle()).newOdaDataSet(null);
  }
  IExpressionHelper helper=new IExpressionHelper(){
    public String getExpression(){
      if (property != null)       return property.getText();
 else       return ""String_Node_Str"";
    }
    public void setExpression(    String expression){
      if (property != null)       property.setText(expression);
    }
    public void notifyExpressionChangeEvent(    String oldExpression,    String newExpression){
    }
    public IExpressionProvider getExpressionProvider(){
      return new ExpressionProvider(handle);
    }
    public String getExpressionType(){
      return (String)property.getData(DataUIConstants.EXPR_TYPE);
    }
    public void setExpressionType(    String exprType){
      property.setData(DataUIConstants.EXPR_TYPE,exprType);
    }
  }
;
  exprButton.setExpressionHelper(helper);
  buttonList.add(exprButton);
  return exprButton;
}","private void createExpressionButton(Composite composite,final Text property,String propName){
  ExpressionButton exprButton=UIUtil.createExpressionButton(composite,SWT.PUSH);
  if (handle == null) {
    handle=DesignElementFactory.getInstance(getModuleHandle()).newOdaDataSet(null);
  }
  IExpressionHelper helper=new IExpressionHelper(){
    public String getExpression(){
      if (property != null)       return property.getText();
 else       return ""String_Node_Str"";
    }
    public void setExpression(    String expression){
      if (property != null)       property.setText(expression);
    }
    public void notifyExpressionChangeEvent(    String oldExpression,    String newExpression){
    }
    public IExpressionProvider getExpressionProvider(){
      return new ExpressionProvider(handle);
    }
    public String getExpressionType(){
      return (String)property.getData(DataUIConstants.EXPR_TYPE);
    }
    public void setExpressionType(    String exprType){
      property.setData(DataUIConstants.EXPR_TYPE,exprType);
    }
  }
;
  exprButton.setExpressionHelper(helper);
  Expression expr=handle.getPropertyBindingExpression(propName);
  property.setData(DataUIConstants.EXPR_BUTTON,exprButton);
  property.setText((expr == null || expr.getStringExpression() == null) ? ""String_Node_Str"" : expr.getStringExpression());
  if (expr != null)   property.setData(DataUIConstants.EXPR_TYPE,expr.getType());
  exprButton=(ExpressionButton)property.getData(DataUIConstants.EXPR_BUTTON);
  if (exprButton != null)   exprButton.refresh();
}",0.8057927961381359
69757,"public boolean performOk(){
  for (int i=0; i < bindingName.size(); i++) {
    try {
      String value=null;
      Text propertyText=(Text)propertyTextList.get(i);
      if (propertyText.isDisposed() || propertyText.getText() == null || propertyText.getText().trim().length() == 0)       value=null;
 else       value=propertyText.getText().trim();
      Expression expr=new Expression(value,(String)propertyText.getData(DataUIConstants.EXPR_TYPE));
      if (ds instanceof DataSourceHandle)       ((DataSourceHandle)ds).setPropertyBinding((String)bindingName.get(i),value);
 else       if (ds instanceof DataSetHandle)       ((DataSetHandle)ds).setPropertyBinding((String)bindingName.get(i),expr);
    }
 catch (    SemanticException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
  }
  return super.performOk();
}","public boolean performOk(){
  for (int i=0; i < bindingName.size(); i++) {
    try {
      String value=null;
      Text propertyText=(Text)propertyTextList.get(i);
      if (!propertyText.isDisposed() && propertyText.getText() != null && propertyText.getText().trim().length() > 0) {
        value=propertyText.getText().trim();
      }
      Expression expr=new Expression(value,(String)propertyText.getData(DataUIConstants.EXPR_TYPE));
      if (ds instanceof DesignElementHandle) {
        ((DesignElementHandle)ds).setPropertyBinding((String)bindingName.get(i),expr);
      }
    }
 catch (    SemanticException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
  }
  return super.performOk();
}",0.6201954397394137
69758,"/** 
 * the content
 */
public Control createContents(Composite parent){
  initPropertyBinding();
  int size=bindingName.size();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(3,false));
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL);
  composite.setLayoutData(gridData);
  Label nameLabel;
  Text propertyText=null;
  for (int i=0; i < size; i++) {
    nameLabel=new Label(composite,SWT.NONE);
    nameLabel.setText((String)displayName.get(i) + ""String_Node_Str"");
    nameLabelList.add(nameLabel);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    if (((String)bindingName.get(i)).equals(QUERYTEXT)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
      data.heightHint=100;
    }
 else     if (((String)bindingName.get(i)).equals(PASSWORD)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.PASSWORD);
    }
 else     propertyText=new Text(composite,SWT.BORDER);
    propertyText.setLayoutData(data);
    propertyText.setText((String)bindingValue.get(i) == null ? ""String_Node_Str"" : (String)bindingValue.get(i));
    propertyTextList.add(propertyText);
    if (ds instanceof OdaDataSourceHandle) {
      handle=(OdaDataSourceHandle)ds;
      Button buildButton=new Button(composite,SWT.NONE);
      UIUtil.setExpressionButtonImage(buildButton);
      buttonList.add(buildButton);
      addListener();
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)ds;
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
 else     if (ds instanceof OdaDataSetHandle) {
      handle=(OdaDataSetHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)(((OdaDataSetHandle)ds).getDataSource());
      ExpressionButton button=createExpressionButton(composite,propertyText);
      propertyText.setData(DataUIConstants.EXPR_BUTTON,button);
      Expression expr=handle.getPropertyBindingExpression((String)bindingName.get(i));
      propertyText.setText(expr == null || expr.getStringExpression() == null ? ""String_Node_Str"" : expr.getStringExpression());
      if (expr != null && expr.getType() != null)       propertyText.setData(DataUIConstants.EXPR_TYPE,expr.getType());
      button=(ExpressionButton)propertyText.getData(DataUIConstants.EXPR_BUTTON);
      if (button != null)       button.refresh();
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  if (size <= 0)   setEmptyPropertyMessages(composite);
  return composite;
}","/** 
 * the content
 */
public Control createContents(Composite parent){
  initPropertyBinding();
  int size=bindingName.size();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(3,false));
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL);
  composite.setLayoutData(gridData);
  Label nameLabel;
  Text propertyText=null;
  for (int i=0; i < size; i++) {
    nameLabel=new Label(composite,SWT.NONE);
    nameLabel.setText((String)displayName.get(i) + ""String_Node_Str"");
    nameLabelList.add(nameLabel);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    if (((String)bindingName.get(i)).equals(QUERYTEXT)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
      data.heightHint=100;
    }
 else     if (((String)bindingName.get(i)).equals(PASSWORD)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.PASSWORD);
    }
 else     propertyText=new Text(composite,SWT.BORDER);
    propertyText.setLayoutData(data);
    propertyText.setText((String)bindingValue.get(i) == null ? ""String_Node_Str"" : (String)bindingValue.get(i));
    propertyTextList.add(propertyText);
    if (ds instanceof OdaDataSourceHandle) {
      handle=(OdaDataSourceHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)ds;
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
 else     if (ds instanceof OdaDataSetHandle) {
      handle=(OdaDataSetHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)(((OdaDataSetHandle)ds).getDataSource());
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    createExpressionButton(composite,propertyText,(String)bindingName.get(i));
  }
  if (size <= 0)   setEmptyPropertyMessages(composite);
  return composite;
}",0.8220833333333334
69759,"/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else {
          if (ExpressionType.CONSTANT.equals(modelParam.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER).getType())) {
            defaultValueExpr=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(modelParam.getDefaultValue()) + ""String_Node_Str"";
          }
 else {
            defaultValueExpr=modelParam.getDefaultValue();
          }
        }
        if (defaultValueExpr != null) {
          dteDataSet.addParameter(new ParameterAdapter(modelParam));
          paramBindingCandidates.put(modelParam.getName(),new ExpressionAdapter(defaultValueExpr,org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType())));
        }
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      if (modelParamBinding.getExpression() != null)       paramBindingCandidates.put(modelParamBinding.getParamName(),new ExpressionAdapter(modelParamBinding.getExpression(),DataType.ANY_TYPE));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ExpressionAdapter expression=(ExpressionAdapter)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else {
          if (ExpressionType.CONSTANT.equals(modelParam.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER).getType())) {
            defaultValueExpr=JavascriptEvalUtil.transformToJsExpression(modelParam.getDefaultValue());
          }
 else {
            defaultValueExpr=modelParam.getDefaultValue();
          }
        }
        if (defaultValueExpr != null) {
          dteDataSet.addParameter(new ParameterAdapter(modelParam));
          paramBindingCandidates.put(modelParam.getName(),new ExpressionAdapter(defaultValueExpr,org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType())));
        }
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      if (modelParamBinding.getExpression() != null)       paramBindingCandidates.put(modelParamBinding.getParamName(),new ExpressionAdapter(modelParamBinding.getExpression(),DataType.ANY_TYPE));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ExpressionAdapter expression=(ExpressionAdapter)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}",0.9874973511337148
69760,"IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  setResourceIDtoDataSourceHandle(source);
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(MessageConstants.EXTENTION_ID_MISSING_ERROR,source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=source.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0 && context.getDataEngine() instanceof DteDataEngine) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(dteSource);
  return dteSource;
}","IOdaDataSourceDesign newOdaDataSource(OdaDataSourceHandle source) throws BirtException {
  setResourceIDtoDataSourceHandle(source);
  OdaDataSourceDesign dteSource=new OdaDataSourceDesign(source.getQualifiedName());
  IBaseDataSourceEventHandler eventHandler=new DataSourceScriptExecutor(source,context);
  dteSource.setEventHandler(eventHandler);
  adaptBaseDataSource(source,dteSource);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new EngineException(MessageConstants.EXTENTION_ID_MISSING_ERROR,source.getName());
  }
  dteSource.setExtensionID(driverName);
  Map staticProps=getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      Expression expr=source.getPropertyBindingExpression(propName);
      String bindingExpr=getExpressionValue(expr);
      String propValue;
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0 && context.getDataEngine() instanceof DteDataEngine) {
        propValue=evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteSource.addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteSource.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(dteSource);
  return dteSource;
}",0.9557069846678024
69761,"/** 
 * @param modelDataSet
 * @param dteDataSet
 * @return
 */
private Iterator populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle) {
          String linkedReportParam=((OdaDataSetParameterHandle)modelParam).getParamName();
          if (linkedReportParam != null) {
            ParameterHandle ph=modelDataSet.getModuleHandle().findParameter(linkedReportParam);
            if (ph instanceof ScalarParameterHandle) {
              if (((ScalarParameterHandle)ph).getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE)) {
                throw new DataException(ResourceConstants.Linked_REPORT_PARAM_ALLOW_MULTI_VALUES,new String[]{linkedReportParam,modelParam.getName()});
              }
            }
            defaultValueExpr=ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName());
          }
 else {
            if (ExpressionType.CONSTANT.equals(modelParam.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER).getType())) {
              defaultValueExpr=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(modelParam.getDefaultValue()) + ""String_Node_Str"";
            }
 else {
              defaultValueExpr=modelParam.getDefaultValue();
            }
          }
        }
 else {
          if (ExpressionType.CONSTANT.equals(modelParam.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER).getType())) {
            defaultValueExpr=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(modelParam.getDefaultValue()) + ""String_Node_Str"";
          }
 else {
            defaultValueExpr=modelParam.getDefaultValue();
          }
        }
        dteDataSet.addParameter(newParam(modelParam));
        paramBindingCandidates.put(modelParam.getName(),new ScriptExpression(defaultValueExpr,DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType())));
      }
 else {
        dteDataSet.addParameter(newParam(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),new ScriptExpression(modelParamBinding.getExpression()));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ScriptExpression expression=(ScriptExpression)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
    }
  }
  return elmtIter;
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 * @return
 */
private Iterator populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle) {
          String linkedReportParam=((OdaDataSetParameterHandle)modelParam).getParamName();
          if (linkedReportParam != null) {
            ParameterHandle ph=modelDataSet.getModuleHandle().findParameter(linkedReportParam);
            if (ph instanceof ScalarParameterHandle) {
              if (((ScalarParameterHandle)ph).getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE)) {
                throw new DataException(ResourceConstants.Linked_REPORT_PARAM_ALLOW_MULTI_VALUES,new String[]{linkedReportParam,modelParam.getName()});
              }
            }
            defaultValueExpr=ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName());
          }
 else {
            defaultValueExpr=getExpressionDefaultValue(modelParam);
          }
        }
 else {
          defaultValueExpr=getExpressionDefaultValue(modelParam);
        }
        dteDataSet.addParameter(newParam(modelParam));
        paramBindingCandidates.put(modelParam.getName(),new ScriptExpression(defaultValueExpr,DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType())));
      }
 else {
        dteDataSet.addParameter(newParam(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),new ScriptExpression(modelParamBinding.getExpression()));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ScriptExpression expression=(ScriptExpression)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
    }
  }
  return elmtIter;
}",0.8654991243432575
69762,"IOdaDataSetDesign newOdaDataSet(OdaDataSetHandle modelDataSet,ExecutionContext context) throws BirtException {
  OdaDataSetDesign dteDataSet=new OdaDataSetDesign(modelDataSet.getQualifiedName());
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(modelDataSet,context);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(modelDataSet,dteDataSet);
  Expression expression=modelDataSet.getPropertyBindingExpression(OdaDataSet.QUERY_TEXT_PROP);
  String queryTextBinding=null;
  if (expression != null && (expression.getExpression() instanceof String)) {
    queryTextBinding=(String)expression.getExpression();
    if (ExpressionType.CONSTANT.equals(expression.getType())) {
      queryTextBinding=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(queryTextBinding) + ""String_Node_Str"";
    }
  }
  if (needPropertyBinding() && queryTextBinding != null && queryTextBinding.length() > 0 && context.getDataEngine() instanceof DteDataEngine) {
    dteDataSet.setQueryText(evaluatePropertyBindingExpr(queryTextBinding));
  }
 else {
    dteDataSet.setQueryText(modelDataSet.getQueryText());
  }
  dteDataSet.setExtensionID(modelDataSet.getExtensionID());
  dteDataSet.setPrimaryResultSetName(modelDataSet.getResultSetName());
  if (modelDataSet.getPropertyHandle(IOdaDataSetModel.RESULT_SET_NUMBER_PROP).isSet())   dteDataSet.setPrimaryResultSetNumber(modelDataSet.getResultSetNumber());
  Map staticProps=getExtensionProperties(modelDataSet,modelDataSet.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=null;
      Expression expr=modelDataSet.getPropertyBindingExpression(propName);
      if (expr != null && (expr.getExpression() instanceof String)) {
        bindingExpr=(String)expr.getExpression();
        if (ExpressionType.CONSTANT.equals(expr.getType())) {
          bindingExpr=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(bindingExpr) + ""String_Node_Str"";
        }
      }
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=this.evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteDataSet.addPublicProperty((String)propName,propValue);
    }
  }
  Iterator elmtIter=modelDataSet.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteDataSet.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  return dteDataSet;
}","IOdaDataSetDesign newOdaDataSet(OdaDataSetHandle modelDataSet,ExecutionContext context) throws BirtException {
  OdaDataSetDesign dteDataSet=new OdaDataSetDesign(modelDataSet.getQualifiedName());
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(modelDataSet,context);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(modelDataSet,dteDataSet);
  Expression expression=modelDataSet.getPropertyBindingExpression(OdaDataSet.QUERY_TEXT_PROP);
  String queryTextBinding=getExpressionValue(expression);
  if (needPropertyBinding() && queryTextBinding != null && queryTextBinding.length() > 0 && context.getDataEngine() instanceof DteDataEngine) {
    dteDataSet.setQueryText(evaluatePropertyBindingExpr(queryTextBinding));
  }
 else {
    dteDataSet.setQueryText(modelDataSet.getQueryText());
  }
  dteDataSet.setExtensionID(modelDataSet.getExtensionID());
  dteDataSet.setPrimaryResultSetName(modelDataSet.getResultSetName());
  if (modelDataSet.getPropertyHandle(IOdaDataSetModel.RESULT_SET_NUMBER_PROP).isSet())   dteDataSet.setPrimaryResultSetNumber(modelDataSet.getResultSetNumber());
  Map staticProps=getExtensionProperties(modelDataSet,modelDataSet.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      Expression expr=modelDataSet.getPropertyBindingExpression(propName);
      String bindingExpr=getExpressionValue(expr);
      String propValue;
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=this.evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteDataSet.addPublicProperty((String)propName,propValue);
    }
  }
  Iterator elmtIter=modelDataSet.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteDataSet.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  return dteDataSet;
}",0.7124480506629725
69763,"private void synchronize(double height){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
  }
  int startRowIndex=rowContainer.getRowIndex();
  if (maxRowIndex == startRowIndex) {
    maxRowIndex++;
  }
  rowContainer.setRowIndex(maxRowIndex);
  double resize=height / (maxRowIndex - startRowIndex);
  for (int i=startRowIndex + 1; i <= maxRowIndex; i++) {
    cache.setRowHeight(i,resize);
  }
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    if (rowspan > 0) {
      SheetData upstair=cache.getColumnLastData(currentColumnIndex);
      if (upstair != null && canSpan(upstair,rowContainer)) {
        SheetData predata=upstair;
        int rs=predata.getRowSpan() + rowspan;
        predata.setRowSpan(rs);
        SheetData realData=getRealData(predata);
        BlankData blankData=new BlankData(realData);
        if (!isInContainer(predata,rowContainer)) {
          blankData.decreasRowSpanInDesign();
        }
        int rowIndex=predata.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(predata);
          blank.setRowIndex(rowIndex + p);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
  }
}","private void synchronize(double height){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
  }
  int startRowIndex=rowContainer.getRowIndex();
  if (maxRowIndex == startRowIndex) {
    maxRowIndex++;
  }
  rowContainer.setRowIndex(maxRowIndex);
  double resize=height / (maxRowIndex - startRowIndex);
  for (int i=startRowIndex + 1; i <= maxRowIndex; i++) {
    cache.setRowHeight(i,resize);
  }
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    if (rowspan > 0) {
      SheetData upstair=cache.getColumnLastData(currentColumnIndex);
      if (upstair != null && canSpan(upstair,rowContainer)) {
        upstair.setRowSpan(rowspan);
        SheetData realData=getRealData(upstair);
        if (!isInContainer(upstair,rowContainer)) {
          realData.decreasRowSpanInDesign();
        }
        int rowIndex=upstair.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(upstair);
          blank.setRowIndex(rowIndex + p);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
  }
}",0.8315816457318637
69764,"private void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getSizeInfo().getStartCoordinate());
  int span=axis.getColumnIndexByCoordinate(data.getSizeInfo().getEndCoordinate()) - col;
  applyTopBorderStyle(data);
  outputDataIfBufferIsFull();
  updataRowIndex(data,container);
  addDatatoCache(col,data);
  Data newData=new Data(data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(newData);
    addDatatoCache(i,blankData);
  }
  if (container instanceof XlsCell) {
    XlsCell cell=(XlsCell)container;
    data.setRowSpanInDesign(cell.getRowSpan() - 1);
  }
  lastData=data;
}","private void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getSizeInfo().getStartCoordinate());
  int span=axis.getColumnIndexByCoordinate(data.getSizeInfo().getEndCoordinate()) - col;
  applyTopBorderStyle(data);
  outputDataIfBufferIsFull();
  updataRowIndex(data,container);
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(data);
    addDatatoCache(i,blankData);
  }
  if (container instanceof XlsCell) {
    XlsCell cell=(XlsCell)container;
    data.setRowSpanInDesign(cell.getRowSpan() - 1);
  }
  lastData=data;
}",0.9743589743589745
69765,"protected TextArea createTextArea(IAutoTextContent content,FontInfo fontInfo,boolean blankLine){
  TextStyle textStyle=TextAreaLayout.buildTextStyle(content,fontInfo);
  String text=content.getText();
  TextArea area=new TextArea(text,textStyle);
  area.setTextLength(text.length());
  return area;
}","protected TextArea createTextArea(IAutoTextContent content,FontInfo fontInfo,boolean blankLine){
  TextStyle textStyle=TextAreaLayout.buildTextStyle(content,fontInfo);
  String text=content.getText();
  TextArea area=new TextArea(text,textStyle);
  area.setTextLength(text.length());
  area.setAction(content.getHyperlinkAction());
  return area;
}",0.925925925925926
69766,"protected ImageArea createImageArea(IImageContent content){
  ImageArea area=new ImageArea();
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URL:
    area.setUrl(content.getURI());
  area.setExtension(content.getExtension());
area.setMIMEType(content.getMIMEType());
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
area.setData(content.getData());
area.setExtension(content.getExtension());
area.setMIMEType(content.getMIMEType());
break;
}
if (content instanceof ObjectContent) {
ObjectContent object=(ObjectContent)content;
area.setParameters(object.getParamters());
}
return area;
}","protected ImageArea createImageArea(IImageContent content){
  ImageArea area=new ImageArea();
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URL:
    area.setUrl(content.getURI());
  area.setExtension(content.getExtension());
area.setMIMEType(content.getMIMEType());
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
area.setData(content.getData());
area.setExtension(content.getExtension());
area.setMIMEType(content.getMIMEType());
break;
}
if (content instanceof ObjectContent) {
ObjectContent object=(ObjectContent)content;
area.setParameters(object.getParamters());
}
area.setAction(content.getHyperlinkAction());
return area;
}",0.9661764705882352
69767,"protected TemplateArea createTemplateArea(IContent content,FontInfo fontInfo){
  TextStyle textStyle=TextAreaLayout.buildTextStyle(content,fontInfo);
  TemplateArea area=new TemplateArea(null,textStyle);
  return area;
}","protected TemplateArea createTemplateArea(IContent content,FontInfo fontInfo){
  TextStyle textStyle=TextAreaLayout.buildTextStyle(content,fontInfo);
  TemplateArea area=new TemplateArea(null,textStyle);
  area.setAction(content.getHyperlinkAction());
  return area;
}",0.9016393442622952
69768,"protected TextArea createTextArea(ITextContent textContent,int offset,int runLevel,FontInfo fontInfo){
  if (textStyle == null || textStyle.getFontInfo() != fontInfo) {
    textStyle=TextAreaLayout.buildTextStyle(textContent,fontInfo);
  }
  TextArea area=new TextArea(textContent.getText(),textStyle);
  area.setOffset(offset);
  area.setRunLevel(runLevel);
  area.setVerticalAlign(textContent.getComputedStyle().getProperty(IStyle.STYLE_VERTICAL_ALIGN));
  return area;
}","protected TextArea createTextArea(ITextContent textContent,int offset,int runLevel,FontInfo fontInfo){
  if (textStyle == null || textStyle.getFontInfo() != fontInfo) {
    textStyle=TextAreaLayout.buildTextStyle(textContent,fontInfo);
  }
  TextArea area=new TextArea(textContent.getText(),textStyle);
  area.setAction(textContent.getHyperlinkAction());
  area.setOffset(offset);
  area.setRunLevel(runLevel);
  area.setVerticalAlign(textContent.getComputedStyle().getProperty(IStyle.STYLE_VERTICAL_ALIGN));
  return area;
}",0.9478957915831664
69769,"private void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getSizeInfo().getStartCoordinate());
  int span=axis.getColumnIndexByCoordinate(data.getSizeInfo().getEndCoordinate()) - col;
  applyTopBorderStyle(data);
  outputDataIfBufferIsFull();
  updataRowIndex(data,container);
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(data);
    addDatatoCache(i,blankData);
  }
  if (container instanceof XlsCell) {
    XlsCell cell=(XlsCell)container;
    data.setRowSpanInDesign(cell.getRowSpan() - 1);
  }
  lastData=data;
}","private void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getSizeInfo().getStartCoordinate());
  int span=axis.getColumnIndexByCoordinate(data.getSizeInfo().getEndCoordinate()) - col;
  applyTopBorderStyle(data);
  outputDataIfBufferIsFull();
  updataRowIndex(data,container);
  addDatatoCache(col,data);
  Data newData=new Data(data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(newData);
    addDatatoCache(i,blankData);
  }
  if (container instanceof XlsCell) {
    XlsCell cell=(XlsCell)container;
    data.setRowSpanInDesign(cell.getRowSpan() - 1);
  }
  lastData=data;
}",0.9743589743589745
69770,"/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content,Image image){
  if (image != null) {
    int resolutionX=image.getDpiX();
    int resolutionY=image.getDpiY();
    if (0 == resolutionX || 0 == resolutionY) {
      ReportDesignHandle designHandle=content.getReportContent().getDesign().getReportDesign();
      resolutionX=designHandle.getImageDPI();
      resolutionY=designHandle.getImageDPI();
    }
    if (0 == resolutionX || 0 == resolutionY) {
      resolutionX=context.getDpi();
      resolutionY=context.getDpi();
    }
    if (0 == resolutionX || 0 == resolutionY) {
      resolutionX=96;
      resolutionY=96;
    }
    return new Dimension((int)(image.plainWidth() * 1000 / resolutionX * 72),(int)(image.plainHeight() * 1000 / resolutionY * 72));
  }
  return null;
}","/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content,Image image){
  if (image != null) {
    resolutionX=image.getDpiX();
    resolutionY=image.getDpiY();
    if (0 == resolutionX || 0 == resolutionY) {
      ReportDesignHandle designHandle=content.getReportContent().getDesign().getReportDesign();
      resolutionX=designHandle.getImageDPI();
      resolutionY=designHandle.getImageDPI();
    }
    if (0 == resolutionX || 0 == resolutionY) {
      resolutionX=context.getDpi();
      resolutionY=context.getDpi();
    }
    if (0 == resolutionX || 0 == resolutionY) {
      resolutionX=96;
      resolutionY=96;
    }
    return new Dimension((int)(image.plainWidth() * 1000 / resolutionX * 72),(int)(image.plainHeight() * 1000 / resolutionY * 72));
  }
  return null;
}",0.9959718026183284
69771,"public void focusLost(FocusEvent e){
  if (e == null || e.widget.equals(getInputControl())) {
    saveQuery();
  }
}","public void focusLost(FocusEvent e){
  if (e == null || e.widget.equals(getInputControl())) {
    if (!ChartUIUtil.getText(getInputControl()).equals(query.getDefinition())) {
      saveQuery();
    }
  }
}",0.7227414330218068
69772,"/** 
 * Handle builder dialog action.
 */
protected void handleBuilderAction(){
  try {
    String sExpr=context.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,getExpression(getInputControl()),context.getExtendedItem(),sTitle);
    boolean isSuccess=setUIText(getInputControl(),sExpr);
    updateQuery(sExpr);
    if (!isSuccess) {
      Event event=new Event();
      event.type=IChartDataSheet.EVENT_QUERY;
      event.data=queryType;
      context.getDataSheet().notifyListeners(event);
    }
  }
 catch (  ChartException e1) {
    WizardBase.displayException(e1);
  }
}","/** 
 * Handle builder dialog action.
 */
protected void handleBuilderAction(){
  try {
    String oldExpr=getExpression(getInputControl());
    String sExpr=context.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,oldExpr,context.getExtendedItem(),sTitle);
    if (!oldExpr.equals(sExpr)) {
      boolean isSuccess=setUIText(getInputControl(),sExpr);
      updateQuery(sExpr);
      if (!isSuccess) {
        Event event=new Event();
        event.type=IChartDataSheet.EVENT_QUERY;
        event.data=queryType;
        context.getDataSheet().notifyListeners(event);
      }
    }
  }
 catch (  ChartException e1) {
    WizardBase.displayException(e1);
  }
}",0.6738461538461539
69773,"private void createColumnsViewerArea(Composite parent){
  cmpColumnsList=ChartUIUtil.createCompositeWrapper(parent);
  Label label=new Label(cmpColumnsList,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    columnListDescription=new Label(cmpColumnsList,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      columnListDescription.setLayoutData(gd);
      columnListDescription.setText(Messages.getString(""String_Node_Str""));
    }
  }
  btnShowDataPreviewB=new Button(cmpColumnsList,SWT.CHECK);
  btnShowDataPreviewB.setText(Messages.getString(""String_Node_Str""));
  btnShowDataPreviewB.addListener(SWT.Selection,this);
  final Table table=new Table(cmpColumnsList,SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION);
  GridData gd=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  tableViewerColumns=new TableViewer(table);
  tableViewerColumns.setUseHashlookup(true);
  new TableColumn(table,SWT.LEFT);
  table.addMouseMoveListener(new MouseMoveListener(){
    public void mouseMove(    MouseEvent e){
      if (!dataProvider.isLivePreviewEnabled()) {
        table.setToolTipText(null);
        return;
      }
      String tooltip=null;
      TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
      if (item != null) {
        List<Object[]> data=(List<Object[]>)tableViewerColumns.getData(KEY_PREVIEW_DATA);
        if (data != null) {
          StringBuilder sb=new StringBuilder();
          int index=((Table)e.widget).indexOf(item);
          int i=0;
          for (; i < data.size(); i++) {
            if (sb.length() > 45) {
              break;
            }
            if (data.get(i)[index] != null) {
              if (i != 0)               sb.append(""String_Node_Str"");
              sb.append(String.valueOf(data.get(i)[index]));
            }
          }
          if (i == 1 && sb.length() > 45) {
            sb=new StringBuilder(sb.substring(0,45));
            sb.append(""String_Node_Str"");
          }
 else           if (i < data.size()) {
            sb.append(""String_Node_Str"");
          }
          tooltip=sb.toString();
        }
      }
      table.setToolTipText(tooltip);
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if (e.button == 3) {
        if (isCubeMode()) {
          table.setMenu(null);
        }
 else {
          TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
          if (item == null) {
            tableViewerColumns.getTable().select(-1);
          }
          boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
          if (item != null && !isSharingChart) {
            if (table.getMenu() != null) {
              table.getMenu().dispose();
            }
            table.setMenu(createMenuManager(item.getData()).createContextMenu(table));
          }
 else {
            table.setMenu(null);
          }
          if (table.getMenu() != null && !isSharingChart) {
            table.getMenu().setVisible(true);
          }
        }
      }
    }
  }
);
  table.addListener(SWT.Resize,new Listener(){
    public void handleEvent(    Event event){
      Table table=(Table)event.widget;
      int totalWidth=table.getClientArea().width;
      table.getColumn(0).setWidth(totalWidth);
    }
  }
);
  DragSource ds=new DragSource(table,DND.DROP_COPY | DND.DROP_MOVE);
  ds.setTransfer(new Transfer[]{SimpleTextTransfer.getInstance()});
  ColumnNamesTableDragListener dragSourceAdapter=new ColumnNamesTableDragListener(table,itemHandle);
  ds.addDragListener(dragSourceAdapter);
  tableViewerColumns.setContentProvider(new IStructuredContentProvider(){
    /** 
 * Gets the food items for the list
 * @param arg0 the data model
 * @return Object[]
 */
    public Object[] getElements(    Object arg0){
      if (arg0 == null)       return null;
      return (ColumnBindingInfo[])arg0;
    }
    /** 
 * Disposes any created resources
 */
    public void dispose(){
    }
    /** 
 * Called when the input changes
 * @param arg0 the viewer
 * @param arg1 the old input
 * @param arg2 the new input
 */
    public void inputChanged(    Viewer arg0,    Object arg1,    Object arg2){
    }
  }
);
  tableViewerColumns.setLabelProvider(new ILabelProvider(){
    /** 
 * images
 * @param arg0 the element
 * @return Image
 */
    public Image getImage(    Object arg0){
      String imageName=((ColumnBindingInfo)arg0).getImageName();
      if (imageName == null)       return null;
      return UIHelper.getImage(imageName);
    }
    /** 
 * Gets the text for an element
 * @param arg0 the element
 * @return String
 */
    public String getText(    Object arg0){
      return ((ColumnBindingInfo)arg0).getName();
    }
    /** 
 * Adds a listener
 * @param arg0 the listener
 */
    public void addListener(    ILabelProviderListener arg0){
    }
    /** 
 * Disposes any resources
 */
    public void dispose(){
    }
    /** 
 * Returns whether changing the specified property for the specified element affect the label
 * @param arg0 the element
 * @param arg1 the property
 * @return boolean
 */
    public boolean isLabelProperty(    Object arg0,    String arg1){
      return false;
    }
    /** 
 * Removes a listener
 * @param arg0 the listener
 */
    public void removeListener(    ILabelProviderListener arg0){
    }
  }
);
}","private void createColumnsViewerArea(Composite parent){
  cmpColumnsList=ChartUIUtil.createCompositeWrapper(parent);
  Label label=new Label(cmpColumnsList,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell()) {
    columnListDescription=new Label(cmpColumnsList,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      columnListDescription.setLayoutData(gd);
      columnListDescription.setText(Messages.getString(""String_Node_Str""));
    }
  }
  btnShowDataPreviewB=new Button(cmpColumnsList,SWT.CHECK);
  btnShowDataPreviewB.setText(Messages.getString(""String_Node_Str""));
  btnShowDataPreviewB.addListener(SWT.Selection,this);
  final Table table=new Table(cmpColumnsList,SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION);
  GridData gd=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  tableViewerColumns=new TableViewer(table);
  tableViewerColumns.setUseHashlookup(true);
  new TableColumn(table,SWT.LEFT);
  table.addMouseMoveListener(new MouseMoveListener(){
    public void mouseMove(    MouseEvent e){
      if (!dataProvider.isLivePreviewEnabled()) {
        table.setToolTipText(null);
        return;
      }
      String tooltip=null;
      TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
      if (item != null) {
        List<Object[]> data=(List<Object[]>)tableViewerColumns.getData(KEY_PREVIEW_DATA);
        if (data != null) {
          StringBuilder sb=new StringBuilder();
          int index=((Table)e.widget).indexOf(item);
          int i=0;
          for (; i < data.size(); i++) {
            if (sb.length() > 45) {
              break;
            }
            if (data.get(i)[index] != null) {
              if (i != 0)               sb.append(""String_Node_Str"");
              sb.append(String.valueOf(data.get(i)[index]));
            }
          }
          if (i == 1 && sb.length() > 45) {
            sb=new StringBuilder(sb.substring(0,45));
            sb.append(""String_Node_Str"");
          }
 else           if (i < data.size()) {
            sb.append(""String_Node_Str"");
          }
          tooltip=sb.toString();
        }
      }
      table.setToolTipText(tooltip);
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if (e.button == 3) {
        if (isCubeMode()) {
          table.setMenu(null);
        }
 else {
          TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
          if (item == null) {
            tableViewerColumns.getTable().select(-1);
          }
          boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
          if (item != null && !isSharingChart) {
            if (table.getMenu() != null) {
              table.getMenu().dispose();
            }
            table.setMenu(createMenuManager(item.getData()).createContextMenu(table));
          }
 else {
            table.setMenu(null);
          }
          if (table.getMenu() != null && !isSharingChart) {
            table.getMenu().setVisible(true);
          }
        }
      }
    }
  }
);
  table.addListener(SWT.Resize,new Listener(){
    public void handleEvent(    Event event){
      Table table=(Table)event.widget;
      int totalWidth=table.getClientArea().width;
      table.getColumn(0).setWidth(totalWidth);
    }
  }
);
  DragSource ds=new DragSource(table,DND.DROP_COPY | DND.DROP_MOVE);
  ds.setTransfer(new Transfer[]{SimpleTextTransfer.getInstance()});
  ColumnNamesTableDragListener dragSourceAdapter=new ColumnNamesTableDragListener(table,itemHandle);
  ds.addDragListener(dragSourceAdapter);
  tableViewerColumns.setContentProvider(new IStructuredContentProvider(){
    /** 
 * Gets the food items for the list
 * @param arg0 the data model
 * @return Object[]
 */
    public Object[] getElements(    Object arg0){
      if (arg0 == null)       return null;
      return (ColumnBindingInfo[])arg0;
    }
    /** 
 * Disposes any created resources
 */
    public void dispose(){
    }
    /** 
 * Called when the input changes
 * @param arg0 the viewer
 * @param arg1 the old input
 * @param arg2 the new input
 */
    public void inputChanged(    Viewer arg0,    Object arg1,    Object arg2){
    }
  }
);
  tableViewerColumns.setLabelProvider(new ILabelProvider(){
    /** 
 * images
 * @param arg0 the element
 * @return Image
 */
    public Image getImage(    Object arg0){
      String imageName=((ColumnBindingInfo)arg0).getImageName();
      if (imageName == null)       return null;
      return UIHelper.getImage(imageName);
    }
    /** 
 * Gets the text for an element
 * @param arg0 the element
 * @return String
 */
    public String getText(    Object arg0){
      return ((ColumnBindingInfo)arg0).getName();
    }
    /** 
 * Adds a listener
 * @param arg0 the listener
 */
    public void addListener(    ILabelProviderListener arg0){
    }
    /** 
 * Disposes any resources
 */
    public void dispose(){
    }
    /** 
 * Returns whether changing the specified property for the specified element affect the label
 * @param arg0 the element
 * @param arg1 the property
 * @return boolean
 */
    public boolean isLabelProperty(    Object arg0,    String arg1){
      return false;
    }
    /** 
 * Removes a listener
 * @param arg0 the listener
 */
    public void removeListener(    ILabelProviderListener arg0){
    }
  }
);
}",0.9970256872465074
69774,"private void updateDragDataSource(){
  if (isCubeMode()) {
    if (getDataServiceProvider().getReportItemReference() != null) {
      if (!getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
        ((GridData)columnListDescription.getLayoutData()).exclude=false;
        columnListDescription.setVisible(true);
        columnListDescription.setText(Messages.getString(""String_Node_Str""));
      }
 else {
        ((GridData)columnListDescription.getLayoutData()).exclude=true;
        columnListDescription.setVisible(false);
      }
      cmpColumnsList.layout();
      getContext().setShowingDataPreview(Boolean.FALSE);
      btnShowDataPreviewB.setSelection(false);
      btnShowDataPreviewB.setEnabled(false);
      stackLayout.topControl=cmpColumnsList;
      refreshDataPreviewPane();
    }
 else {
      stackLayout.topControl=cmpCubeTree;
      cubeTreeViewer.setInput(getCube());
    }
    cmpStack.layout();
    return;
  }
  if (columnListDescription != null) {
    ((GridData)columnListDescription.getLayoutData()).exclude=false;
    columnListDescription.setVisible(true);
    columnListDescription.setText(Messages.getString(""String_Node_Str""));
  }
  btnShowDataPreviewB.setEnabled(true);
  cmpColumnsList.layout();
  String pValue=(previousData == null) ? ""String_Node_Str"" : previousData;
  String cValue=(currentData == null) ? ""String_Node_Str"" : currentData;
  if (!pValue.equals(cValue)) {
    getContext().setShowingDataPreview(null);
  }
  previousData=currentData;
  try {
    if (!getContext().isSetShowingDataPreview() && getDataServiceProvider().getPreviewHeadersInfo().length >= 6) {
      getContext().setShowingDataPreview(Boolean.FALSE);
    }
    ChartWizard.removeException(ChartWizard.StaChartDSh_gHeaders_ID);
  }
 catch (  NullPointerException e) {
  }
catch (  ChartException e) {
    ChartWizard.showException(ChartWizard.StaChartDSh_gHeaders_ID,e.getMessage());
  }
  btnShowDataPreviewA.setSelection(getContext().isShowingDataPreview());
  btnShowDataPreviewB.setSelection(getContext().isShowingDataPreview());
  if (getContext().isShowingDataPreview()) {
    stackLayout.topControl=cmpDataPreview;
  }
 else {
    stackLayout.topControl=cmpColumnsList;
  }
  refreshDataPreviewPane();
  cmpStack.layout();
}","private void updateDragDataSource(){
  if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
    if (columnListDescription != null) {
      ((GridData)columnListDescription.getLayoutData()).exclude=true;
      columnListDescription.setVisible(false);
      cmpColumnsList.layout();
    }
    if (dataPreviewDescription != null) {
      ((GridData)dataPreviewDescription.getLayoutData()).exclude=true;
      dataPreviewDescription.setVisible(false);
      cmpDataPreview.layout();
    }
  }
  if (isCubeMode()) {
    if (getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) {
      if (!getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
        ((GridData)columnListDescription.getLayoutData()).exclude=false;
        columnListDescription.setVisible(true);
        columnListDescription.setText(Messages.getString(""String_Node_Str""));
        cmpColumnsList.layout();
      }
      getContext().setShowingDataPreview(Boolean.FALSE);
      btnShowDataPreviewB.setSelection(false);
      btnShowDataPreviewB.setEnabled(false);
      stackLayout.topControl=cmpColumnsList;
      refreshDataPreviewPane();
    }
 else {
      stackLayout.topControl=cmpCubeTree;
      cubeTreeViewer.setInput(getCube());
    }
    cmpStack.layout();
    return;
  }
  if (columnListDescription != null) {
    if (!dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      ((GridData)columnListDescription.getLayoutData()).exclude=false;
      columnListDescription.setVisible(true);
      columnListDescription.setText(Messages.getString(""String_Node_Str""));
      cmpColumnsList.layout();
    }
  }
  btnShowDataPreviewB.setEnabled(true);
  String pValue=(previousData == null) ? ""String_Node_Str"" : previousData;
  String cValue=(currentData == null) ? ""String_Node_Str"" : currentData;
  if (!pValue.equals(cValue)) {
    getContext().setShowingDataPreview(null);
  }
  previousData=currentData;
  try {
    if (!getContext().isSetShowingDataPreview() && getDataServiceProvider().getPreviewHeadersInfo().length >= 6) {
      getContext().setShowingDataPreview(Boolean.FALSE);
    }
    ChartWizard.removeException(ChartWizard.StaChartDSh_gHeaders_ID);
  }
 catch (  NullPointerException e) {
  }
catch (  ChartException e) {
    ChartWizard.showException(ChartWizard.StaChartDSh_gHeaders_ID,e.getMessage());
  }
  btnShowDataPreviewA.setSelection(getContext().isShowingDataPreview());
  btnShowDataPreviewB.setSelection(getContext().isShowingDataPreview());
  if (getContext().isShowingDataPreview()) {
    stackLayout.topControl=cmpDataPreview;
  }
 else {
    stackLayout.topControl=cmpColumnsList;
  }
  refreshDataPreviewPane();
  cmpStack.layout();
}",0.7844
69775,"public Composite createDataDragSource(Composite parent){
  cmpStack=new Composite(parent,SWT.NONE);
  cmpStack.setLayoutData(new GridData(GridData.FILL_BOTH));
  stackLayout=new StackLayout();
  stackLayout.marginHeight=0;
  stackLayout.marginWidth=0;
  cmpStack.setLayout(stackLayout);
  cmpCubeTree=ChartUIUtil.createCompositeWrapper(cmpStack);
  cmpDataPreview=ChartUIUtil.createCompositeWrapper(cmpStack);
  createColumnsViewerArea(cmpStack);
  Label label=new Label(cmpCubeTree,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    Label description=new Label(cmpCubeTree,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      description.setLayoutData(gd);
      description.setText(Messages.getString(""String_Node_Str""));
    }
  }
  cubeTreeViewer=new TreeViewer(cmpCubeTree,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  cubeTreeViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)cubeTreeViewer.getTree().getLayoutData()).heightHint=120;
  ViewsTreeProvider provider=new ViewsTreeProvider();
  cubeTreeViewer.setLabelProvider(provider);
  cubeTreeViewer.setContentProvider(provider);
  cubeTreeViewer.setInput(getCube());
  final DragSource dragSource=new DragSource(cubeTreeViewer.getTree(),DND.DROP_COPY);
  dragSource.setTransfer(new Transfer[]{SimpleTextTransfer.getInstance()});
  dragSource.addDragListener(new DragSourceListener(){
    private String text=null;
    public void dragFinished(    DragSourceEvent event){
    }
    public void dragSetData(    DragSourceEvent event){
      event.data=text;
    }
    public void dragStart(    DragSourceEvent event){
      text=createCubeExpression();
      if (text == null) {
        event.doit=false;
      }
    }
  }
);
  cubeTreeViewer.getTree().addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      if (event.button == 3 && event.widget instanceof Tree) {
        Tree tree=(Tree)event.widget;
        TreeItem treeItem=tree.getSelection()[0];
        if (treeItem.getData() instanceof LevelHandle || treeItem.getData() instanceof MeasureHandle) {
          if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
            tree.setMenu(null);
          }
 else {
            tree.setMenu(createMenuManager(treeItem.getData()).createContextMenu(tree));
          }
        }
 else {
          tree.setMenu(null);
        }
      }
    }
  }
);
  label=new Label(cmpDataPreview,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    Label description=new Label(cmpDataPreview,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      description.setLayoutData(gd);
      description.setText(Messages.getString(""String_Node_Str""));
    }
  }
  btnShowDataPreviewA=new Button(cmpDataPreview,SWT.CHECK);
  btnShowDataPreviewA.setText(Messages.getString(""String_Node_Str""));
  btnShowDataPreviewA.addListener(SWT.Selection,this);
  tablePreview=new CustomPreviewTable(cmpDataPreview,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.FULL_SELECTION);
{
    GridData gridData=new GridData(GridData.FILL_BOTH);
    gridData.widthHint=400;
    gridData.heightHint=120;
    tablePreview.setLayoutData(gridData);
    tablePreview.setHeaderAlignment(SWT.LEFT);
    tablePreview.addListener(CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE,this);
  }
  updateDragDataSource();
  return cmpStack;
}","public Composite createDataDragSource(Composite parent){
  cmpStack=new Composite(parent,SWT.NONE);
  cmpStack.setLayoutData(new GridData(GridData.FILL_BOTH));
  stackLayout=new StackLayout();
  stackLayout.marginHeight=0;
  stackLayout.marginWidth=0;
  cmpStack.setLayout(stackLayout);
  cmpCubeTree=ChartUIUtil.createCompositeWrapper(cmpStack);
  cmpDataPreview=ChartUIUtil.createCompositeWrapper(cmpStack);
  createColumnsViewerArea(cmpStack);
  Label label=new Label(cmpCubeTree,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    Label description=new Label(cmpCubeTree,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      description.setLayoutData(gd);
      description.setText(Messages.getString(""String_Node_Str""));
    }
  }
  cubeTreeViewer=new TreeViewer(cmpCubeTree,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  cubeTreeViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)cubeTreeViewer.getTree().getLayoutData()).heightHint=120;
  ViewsTreeProvider provider=new ViewsTreeProvider();
  cubeTreeViewer.setLabelProvider(provider);
  cubeTreeViewer.setContentProvider(provider);
  cubeTreeViewer.setInput(getCube());
  final DragSource dragSource=new DragSource(cubeTreeViewer.getTree(),DND.DROP_COPY);
  dragSource.setTransfer(new Transfer[]{SimpleTextTransfer.getInstance()});
  dragSource.addDragListener(new DragSourceListener(){
    private String text=null;
    public void dragFinished(    DragSourceEvent event){
    }
    public void dragSetData(    DragSourceEvent event){
      event.data=text;
    }
    public void dragStart(    DragSourceEvent event){
      text=createCubeExpression();
      if (text == null) {
        event.doit=false;
      }
    }
  }
);
  cubeTreeViewer.getTree().addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event event){
      if (event.button == 3 && event.widget instanceof Tree) {
        Tree tree=(Tree)event.widget;
        TreeItem treeItem=tree.getSelection()[0];
        if (treeItem.getData() instanceof LevelHandle || treeItem.getData() instanceof MeasureHandle) {
          if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
            tree.setMenu(null);
          }
 else {
            tree.setMenu(createMenuManager(treeItem.getData()).createContextMenu(tree));
          }
        }
 else {
          tree.setMenu(null);
        }
      }
    }
  }
);
  label=new Label(cmpDataPreview,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    dataPreviewDescription=new Label(cmpDataPreview,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      dataPreviewDescription.setLayoutData(gd);
      dataPreviewDescription.setText(Messages.getString(""String_Node_Str""));
    }
  }
  btnShowDataPreviewA=new Button(cmpDataPreview,SWT.CHECK);
  btnShowDataPreviewA.setText(Messages.getString(""String_Node_Str""));
  btnShowDataPreviewA.addListener(SWT.Selection,this);
  tablePreview=new CustomPreviewTable(cmpDataPreview,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.FULL_SELECTION);
{
    GridData gridData=new GridData(GridData.FILL_BOTH);
    gridData.widthHint=400;
    gridData.heightHint=120;
    tablePreview.setLayoutData(gridData);
    tablePreview.setHeaderAlignment(SWT.LEFT);
    tablePreview.addListener(CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE,this);
  }
  updateDragDataSource();
  return cmpStack;
}",0.9944587106365724
69776,"/** 
 * Locates the cell which controls the column with for given cell
 * @param crosstab
 * @throws SemanticException
 */
public void validateCrosstab() throws SemanticException {
}","/** 
 * Validates the entire crosstab model.
 * @param crosstab
 * @throws SemanticException
 */
public void validateCrosstab() throws SemanticException {
}",0.834319526627219
69777,"/** 
 * @param axisType
 * @param measureList
 * @param functionList
 * @param isAdd
 * @param checkCounterAxis
 * @throws SemanticException
 */
protected void addMeasureAggregations(int axisType,List<MeasureViewHandle> measureList,List<String> functionList,boolean checkCounterAxis) throws SemanticException {
  if (crosstab == null || measureList == null || measureList.isEmpty() || crosstab.getGrandTotal(axisType) == null)   return;
  int counterAxisType=CrosstabModelUtil.getOppositeAxisType(axisType);
  String dimensionName=null;
  String levelName=null;
  boolean isCounterAxisEmpty=true;
  for (int dimension=0; dimension < crosstab.getDimensionCount(counterAxisType); dimension++) {
    DimensionViewHandle dimensionView=crosstab.getDimension(counterAxisType,dimension);
    for (int level=0; level < dimensionView.getLevelCount(); level++) {
      isCounterAxisEmpty=false;
      LevelViewHandle levelView=dimensionView.getLevel(level);
      String rowDimension=null;
      String rowLevel=null;
      String colDimension=null;
      String colLevel=null;
      if (counterAxisType == ROW_AXIS_TYPE) {
        rowDimension=dimensionView.getCubeDimensionName();
        rowLevel=levelView.getCubeLevelName();
        colDimension=dimensionName;
        colLevel=levelName;
      }
 else       if (counterAxisType == COLUMN_AXIS_TYPE) {
        rowDimension=dimensionName;
        rowLevel=levelName;
        colDimension=dimensionView.getCubeDimensionName();
        colLevel=levelView.getCubeLevelName();
      }
      if (levelView.isInnerMost() || levelView.getAggregationHeader() != null) {
        for (int i=0; i < measureList.size(); i++) {
          MeasureViewHandle measureView=measureList.get(i);
          if (measureView.getCrosstab() != crosstab)           continue;
          String function=functionList == null ? CrosstabModelUtil.getDefaultMeasureAggregationFunction(measureView) : (String)functionList.get(i);
          if (checkCounterAxis && !CrosstabModelUtil.isAggregationOn(measureView,levelView.getCubeLevelName(),counterAxisType))           continue;
          CrosstabModelUtil.addDataItem(crosstab,measureView,function,rowDimension,rowLevel,colDimension,colLevel);
        }
      }
    }
  }
  if (crosstab.getGrandTotal(counterAxisType) != null || isCounterAxisEmpty) {
    String rowDimension=null;
    String rowLevel=null;
    String colDimension=null;
    String colLevel=null;
    for (int i=0; i < measureList.size(); i++) {
      MeasureViewHandle measureView=measureList.get(i);
      if (measureView.getCrosstab() != crosstab)       continue;
      String function=functionList == null ? CrosstabModelUtil.getDefaultMeasureAggregationFunction(measureView) : (String)functionList.get(i);
      if (checkCounterAxis && !CrosstabModelUtil.isAggregationOn(measureView,null,counterAxisType))       continue;
      CrosstabModelUtil.addDataItem(crosstab,measureView,function,rowDimension,rowLevel,colDimension,colLevel);
    }
  }
}","/** 
 * This method checks and adds the missing aggregations for given measures on the specific axis(grand total). Note if <code>checkCounterAxis</code> is <code>true</code>, in certain cases, the check in this method will be skipped, and the remaining work is expected to be done in subsequent <code>validateCrosstab</code>.
 * @param axisType
 * @param measureList
 * @param functionList
 * @param isAdd
 * @param checkCounterAxis
 * @throws SemanticException
 */
protected void addMeasureAggregations(int axisType,List<MeasureViewHandle> measureList,List<String> functionList,boolean checkCounterAxis) throws SemanticException {
  if (crosstab == null || measureList == null || measureList.isEmpty() || crosstab.getGrandTotal(axisType) == null)   return;
  int counterAxisType=CrosstabModelUtil.getOppositeAxisType(axisType);
  String dimensionName=null;
  String levelName=null;
  boolean isCounterAxisEmpty=true;
  for (int dimension=0; dimension < crosstab.getDimensionCount(counterAxisType); dimension++) {
    DimensionViewHandle dimensionView=crosstab.getDimension(counterAxisType,dimension);
    for (int level=0; level < dimensionView.getLevelCount(); level++) {
      isCounterAxisEmpty=false;
      LevelViewHandle levelView=dimensionView.getLevel(level);
      String rowDimension=null;
      String rowLevel=null;
      String colDimension=null;
      String colLevel=null;
      if (counterAxisType == ROW_AXIS_TYPE) {
        rowDimension=dimensionView.getCubeDimensionName();
        rowLevel=levelView.getCubeLevelName();
        colDimension=dimensionName;
        colLevel=levelName;
      }
 else       if (counterAxisType == COLUMN_AXIS_TYPE) {
        rowDimension=dimensionName;
        rowLevel=levelName;
        colDimension=dimensionView.getCubeDimensionName();
        colLevel=levelView.getCubeLevelName();
      }
      if (levelView.isInnerMost() || levelView.getAggregationHeader() != null) {
        for (int i=0; i < measureList.size(); i++) {
          MeasureViewHandle measureView=measureList.get(i);
          if (measureView.getCrosstab() != crosstab)           continue;
          String function=functionList == null ? CrosstabModelUtil.getDefaultMeasureAggregationFunction(measureView) : (String)functionList.get(i);
          if (checkCounterAxis && !CrosstabModelUtil.isAggregationOn(measureView,levelView.getCubeLevelName(),counterAxisType))           continue;
          CrosstabModelUtil.addDataItem(crosstab,measureView,function,rowDimension,rowLevel,colDimension,colLevel);
        }
      }
    }
  }
  if (crosstab.getGrandTotal(counterAxisType) != null || isCounterAxisEmpty) {
    String rowDimension=null;
    String rowLevel=null;
    String colDimension=null;
    String colLevel=null;
    for (int i=0; i < measureList.size(); i++) {
      MeasureViewHandle measureView=measureList.get(i);
      if (measureView.getCrosstab() != crosstab)       continue;
      String function=functionList == null ? CrosstabModelUtil.getDefaultMeasureAggregationFunction(measureView) : (String)functionList.get(i);
      if (checkCounterAxis && !CrosstabModelUtil.isAggregationOn(measureView,null,counterAxisType))       continue;
      CrosstabModelUtil.addDataItem(crosstab,measureView,function,rowDimension,rowLevel,colDimension,colLevel);
    }
  }
}",0.94882831181253
69778,"/** 
 * Returns if aggregation is needed on given level on specific axis, this is mainly to check if there's any existing aggregation cell on given level subtotal or grantotal(given level view is null). One special case is the given axis area is blank(so level view is also null), in this case, we need check subtotal and grandtotal on couter axis.
 * @param measureView
 * @param levelView
 * @param axisType
 * @return
 */
private boolean isAggregationNeeded(MeasureViewHandle measureView,LevelViewHandle levelView,int axisType,List<LevelViewHandle> counterAggregationLevels){
  if (measureView != null) {
    String checkDimensionName=null;
    String checkLevelName=null;
    if (levelView != null) {
      checkDimensionName=((DimensionViewHandle)levelView.getContainer()).getCubeDimensionName();
      checkLevelName=levelView.getCubeLevelName();
    }
    int counterAxisType=CrosstabModelUtil.getOppositeAxisType(axisType);
    boolean isInnerMost=levelView != null ? levelView.isInnerMost() : false;
    int totalDimensions=crosstab.getDimensionCount(axisType);
    if (isInnerMost || totalDimensions == 0) {
      if (counterAggregationLevels.size() > 0) {
        return true;
      }
      if (crosstab.getGrandTotal(counterAxisType) != null) {
        return true;
      }
    }
    int totalCounterDimensions=crosstab.getDimensionCount(counterAxisType);
    if (totalCounterDimensions > 0) {
      for (int i=0; i < totalCounterDimensions; i++) {
        DimensionViewHandle dv=crosstab.getDimension(counterAxisType,i);
        int totalLevels=dv.getLevelCount();
        for (int j=0; j < totalLevels; j++) {
          LevelViewHandle lv=dv.getLevel(j);
          if ((i == totalCounterDimensions - 1 && j == totalLevels - 1) || lv.getAggregationHeader() != null) {
            AggregationCellHandle cell=null;
            if (axisType == ROW_AXIS_TYPE) {
              cell=measureView.getAggregationCell(checkDimensionName,checkLevelName,dv.getCubeDimensionName(),lv.getCubeLevelName());
            }
 else {
              cell=measureView.getAggregationCell(dv.getCubeDimensionName(),lv.getCubeLevelName(),checkDimensionName,checkLevelName);
            }
            if (cell != null) {
              return true;
            }
          }
        }
      }
    }
    if (totalCounterDimensions == 0 || crosstab.getGrandTotal(counterAxisType) != null) {
      AggregationCellHandle cell=null;
      if (axisType == ROW_AXIS_TYPE) {
        cell=measureView.getAggregationCell(checkDimensionName,checkLevelName,null,null);
      }
 else {
        cell=measureView.getAggregationCell(null,null,checkDimensionName,checkLevelName);
      }
      if (cell != null) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Returns if aggregation is needed on given level on specific axis, this is mainly to check if there's any existing aggregation cell on given level subtotal or grantotal(if given level view is null). One special case is the given axis area is blank(so level view is also null), in this case, we need check subtotal and grandtotal on couter axis.
 * @param measureView
 * @param levelView
 * @param axisType
 * @return
 */
private boolean isAggregationNeeded(MeasureViewHandle measureView,LevelViewHandle levelView,int axisType,List<LevelViewHandle> counterAggregationLevels){
  if (measureView != null) {
    String checkDimensionName=null;
    String checkLevelName=null;
    if (levelView != null) {
      checkDimensionName=((DimensionViewHandle)levelView.getContainer()).getCubeDimensionName();
      checkLevelName=levelView.getCubeLevelName();
    }
    int counterAxisType=CrosstabModelUtil.getOppositeAxisType(axisType);
    boolean isInnerMost=levelView != null ? levelView.isInnerMost() : false;
    int totalDimensions=crosstab.getDimensionCount(axisType);
    if (isInnerMost || totalDimensions == 0) {
      if (counterAggregationLevels.size() > 0) {
        return true;
      }
      if (crosstab.getGrandTotal(counterAxisType) != null) {
        return true;
      }
    }
    int totalCounterDimensions=crosstab.getDimensionCount(counterAxisType);
    if (totalCounterDimensions > 0) {
      for (int i=0; i < totalCounterDimensions; i++) {
        DimensionViewHandle dv=crosstab.getDimension(counterAxisType,i);
        int totalLevels=dv.getLevelCount();
        for (int j=0; j < totalLevels; j++) {
          LevelViewHandle lv=dv.getLevel(j);
          if ((i == totalCounterDimensions - 1 && j == totalLevels - 1) || lv.getAggregationHeader() != null) {
            AggregationCellHandle cell=null;
            if (axisType == ROW_AXIS_TYPE) {
              cell=measureView.getAggregationCell(checkDimensionName,checkLevelName,dv.getCubeDimensionName(),lv.getCubeLevelName());
            }
 else {
              cell=measureView.getAggregationCell(dv.getCubeDimensionName(),lv.getCubeLevelName(),checkDimensionName,checkLevelName);
            }
            if (cell != null) {
              return true;
            }
          }
        }
      }
    }
    if (totalCounterDimensions == 0 || crosstab.getGrandTotal(counterAxisType) != null) {
      AggregationCellHandle cell=null;
      if (axisType == ROW_AXIS_TYPE) {
        cell=measureView.getAggregationCell(checkDimensionName,checkLevelName,null,null);
      }
 else {
        cell=measureView.getAggregationCell(null,null,checkDimensionName,checkLevelName);
      }
      if (cell != null) {
        return true;
      }
    }
  }
  return false;
}",0.9994524548275232
69779,"public static void notifyCreation(int type,Object model){
  if (modelListener != null) {
    modelListener.onCreated(type,model);
  }
}","/** 
 * Notifies any creation event for crosstab model.
 * @param type see <code>ICrosstabModelListener</code> for the type constants.
 * @param model the model object associated with this event.
 */
public static void notifyCreation(int type,Object model){
  if (modelListener != null) {
    modelListener.onCreated(type,model);
  }
}",0.574468085106383
69780,"/** 
 * Gets the aggregation function for this cell.
 * @param crosstab
 * @param cell
 * @param function
 * @return
 * @throws SemanticException
 */
public static void setAggregationFunction(CrosstabReportItemHandle crosstab,AggregationCellHandle cell,String function) throws SemanticException {
}","/** 
 * Sets the aggregation function for this cell.
 * @param crosstab
 * @param cell
 * @param function
 * @return
 * @throws SemanticException
 */
public static void setAggregationFunction(CrosstabReportItemHandle crosstab,AggregationCellHandle cell,String function) throws SemanticException {
}",0.9966442953020134
69781,"/** 
 * Locates the cell which controls the column with for given cell
 * @param crosstabItem
 * @param cell
 * @return
 */
public static CrosstabCellHandle locateColumnWidthCell(CrosstabReportItemHandle crosstabItem,CrosstabCellHandle cell){
  if (crosstabItem != null && cell != null && cell.getCrosstab() == crosstabItem) {
    boolean isMeasureHorizontal=MEASURE_DIRECTION_HORIZONTAL.equals(crosstabItem.getMeasureDirection());
    if (cell instanceof AggregationCellHandle) {
      AggregationCellHandle aggCell=(AggregationCellHandle)cell;
      MeasureViewHandle mv=null;
      if (IMeasureViewConstants.DETAIL_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        if (isMeasureHorizontal) {
          return ((MeasureViewHandle)cell.getContainer()).getCell();
        }
 else {
          return crosstabItem.getMeasure(0).getCell();
        }
      }
      if (isMeasureHorizontal) {
        mv=(MeasureViewHandle)aggCell.getContainer();
      }
 else {
        mv=crosstabItem.getMeasure(0);
      }
      String colDimension=aggCell.getDimensionName(COLUMN_AXIS_TYPE);
      String colLevel=aggCell.getLevelName(COLUMN_AXIS_TYPE);
      LevelViewHandle colLevelHandle=getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE);
      if (colLevelHandle == null) {
        return mv.getCell();
      }
      DimensionViewHandle colDimHandle=(DimensionViewHandle)colLevelHandle.getContainer();
      if (colLevelHandle.getCubeLevelName().equals(colLevel) && colDimHandle.getCubeDimensionName().equals(colDimension)) {
        return mv.getCell();
      }
      String rowDimension=null;
      String rowLevel=null;
      LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
      if (rowLevelHandle != null) {
        rowDimension=((DimensionViewHandle)rowLevelHandle.getContainer()).getCubeDimensionName();
        rowLevel=rowLevelHandle.getCubeLevelName();
      }
      return mv.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
    }
 else     if (cell.getContainer() instanceof MeasureViewHandle) {
      if (isMeasureHorizontal) {
        MeasureViewHandle mv=(MeasureViewHandle)cell.getContainer();
        int headerPos=cell.getModelHandle().getIndex();
        if (headerPos > 0) {
          List<LevelViewHandle> levels=CrosstabModelUtil.getAllAggregationLevels(crosstabItem,COLUMN_AXIS_TYPE);
          Collections.reverse(levels);
          String rowDimension=null;
          String rowLevel=null;
          LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
          if (rowLevelHandle != null) {
            rowDimension=((DimensionViewHandle)rowLevelHandle.getContainer()).getCubeDimensionName();
            rowLevel=rowLevelHandle.getCubeLevelName();
          }
          int realIndex=1;
          for (int i=1; i < levels.size(); i++) {
            LevelViewHandle lv=levels.get(i);
            if (CrosstabModelUtil.isAggregationOn(mv,lv.getCubeLevelName(),COLUMN_AXIS_TYPE)) {
              if (headerPos == realIndex) {
                String colDimension=((DimensionViewHandle)lv.getContainer()).getCubeDimensionName();
                String colLevel=lv.getCubeLevelName();
                return mv.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
              }
              realIndex++;
            }
          }
          return mv.getAggregationCell(rowDimension,rowLevel,null,null);
        }
        return mv.getCell();
      }
 else       if (IMeasureViewConstants.HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
          MeasureViewHandle mv=crosstabItem.getMeasure(i);
          if (mv.getHeader() != null) {
            return mv.getHeader();
          }
        }
      }
 else {
        return crosstabItem.getMeasure(0).getCell();
      }
    }
 else     if (cell.getContainer() instanceof LevelViewHandle) {
      LevelViewHandle lv=(LevelViewHandle)cell.getContainer();
      boolean isRowLevl=ICrosstabReportItemConstants.ROWS_PROP.equals(lv.getContainer().getContainer().getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName());
      if (isRowLevl) {
        if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
          return getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE).getCell();
        }
        return cell;
      }
      if (crosstabItem.getMeasureCount() == 0) {
        if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
          return cell;
        }
        return getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE).getCell();
      }
      if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        String rowDimension=null;
        String rowLevel=null;
        String colDimension=((DimensionViewHandle)lv.getContainer()).getCubeDimensionName();
        String colLevel=lv.getCubeLevelName();
        LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
        if (rowLevelHandle != null) {
          rowDimension=((DimensionViewHandle)rowLevelHandle.getContainer()).getCubeDimensionName();
          rowLevel=rowLevelHandle.getCubeLevelName();
        }
        if (isMeasureHorizontal) {
          for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
            CrosstabCellHandle aggCell=crosstabItem.getMeasure(i).getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
            if (aggCell != null) {
              return aggCell;
            }
          }
        }
 else {
          return crosstabItem.getMeasure(0).getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
        }
      }
      return crosstabItem.getMeasure(0).getCell();
    }
 else     if (cell.getContainer() instanceof CrosstabViewHandle) {
      boolean isRowGrandTotal=ICrosstabReportItemConstants.ROWS_PROP.equals(cell.getContainer().getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName());
      if (isRowGrandTotal) {
        LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
        if (rowLevelHandle != null) {
          return rowLevelHandle.getCell();
        }
        return cell;
      }
      if (crosstabItem.getMeasureCount() == 0) {
        return cell;
      }
      String rowDimension=null;
      String rowLevel=null;
      LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
      if (rowLevelHandle != null) {
        rowDimension=((DimensionViewHandle)rowLevelHandle.getContainer()).getCubeDimensionName();
        rowLevel=rowLevelHandle.getCubeLevelName();
      }
      if (isMeasureHorizontal) {
        for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
          CrosstabCellHandle aggCell=crosstabItem.getMeasure(i).getAggregationCell(rowDimension,rowLevel,null,null);
          if (aggCell != null) {
            return aggCell;
          }
        }
      }
 else {
        return crosstabItem.getMeasure(0).getAggregationCell(rowDimension,rowLevel,null,null);
      }
    }
 else     if (cell.getContainer() instanceof CrosstabReportItemHandle) {
      LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
      if (rowLevelHandle != null) {
        return rowLevelHandle.getCell();
      }
      if (!isMeasureHorizontal) {
        for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
          MeasureViewHandle mv=crosstabItem.getMeasure(i);
          if (mv.getHeader() != null) {
            return mv.getHeader();
          }
        }
      }
      return cell;
    }
  }
  return null;
}","/** 
 * Locates the cell which controls the column width for given cell
 * @param crosstabItem
 * @param cell
 * @return
 */
public static CrosstabCellHandle locateColumnWidthCell(CrosstabReportItemHandle crosstabItem,CrosstabCellHandle cell){
  if (crosstabItem != null && cell != null && cell.getCrosstab() == crosstabItem) {
    boolean isMeasureHorizontal=MEASURE_DIRECTION_HORIZONTAL.equals(crosstabItem.getMeasureDirection());
    if (cell instanceof AggregationCellHandle) {
      AggregationCellHandle aggCell=(AggregationCellHandle)cell;
      MeasureViewHandle mv=null;
      if (IMeasureViewConstants.DETAIL_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        if (isMeasureHorizontal) {
          return ((MeasureViewHandle)cell.getContainer()).getCell();
        }
 else {
          return crosstabItem.getMeasure(0).getCell();
        }
      }
      if (isMeasureHorizontal) {
        mv=(MeasureViewHandle)aggCell.getContainer();
      }
 else {
        mv=crosstabItem.getMeasure(0);
      }
      String colDimension=aggCell.getDimensionName(COLUMN_AXIS_TYPE);
      String colLevel=aggCell.getLevelName(COLUMN_AXIS_TYPE);
      LevelViewHandle colLevelHandle=getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE);
      if (colLevelHandle == null) {
        return mv.getCell();
      }
      DimensionViewHandle colDimHandle=(DimensionViewHandle)colLevelHandle.getContainer();
      if (colLevelHandle.getCubeLevelName().equals(colLevel) && colDimHandle.getCubeDimensionName().equals(colDimension)) {
        return mv.getCell();
      }
      String rowDimension=null;
      String rowLevel=null;
      LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
      if (rowLevelHandle != null) {
        rowDimension=((DimensionViewHandle)rowLevelHandle.getContainer()).getCubeDimensionName();
        rowLevel=rowLevelHandle.getCubeLevelName();
      }
      return mv.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
    }
 else     if (cell.getContainer() instanceof MeasureViewHandle) {
      if (isMeasureHorizontal) {
        MeasureViewHandle mv=(MeasureViewHandle)cell.getContainer();
        int headerPos=cell.getModelHandle().getIndex();
        if (headerPos > 0) {
          List<LevelViewHandle> levels=CrosstabModelUtil.getAllAggregationLevels(crosstabItem,COLUMN_AXIS_TYPE);
          Collections.reverse(levels);
          String rowDimension=null;
          String rowLevel=null;
          LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
          if (rowLevelHandle != null) {
            rowDimension=((DimensionViewHandle)rowLevelHandle.getContainer()).getCubeDimensionName();
            rowLevel=rowLevelHandle.getCubeLevelName();
          }
          int realIndex=1;
          for (int i=1; i < levels.size(); i++) {
            LevelViewHandle lv=levels.get(i);
            if (CrosstabModelUtil.isAggregationOn(mv,lv.getCubeLevelName(),COLUMN_AXIS_TYPE)) {
              if (headerPos == realIndex) {
                String colDimension=((DimensionViewHandle)lv.getContainer()).getCubeDimensionName();
                String colLevel=lv.getCubeLevelName();
                return mv.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
              }
              realIndex++;
            }
          }
          return mv.getAggregationCell(rowDimension,rowLevel,null,null);
        }
        return mv.getCell();
      }
 else       if (IMeasureViewConstants.HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
          MeasureViewHandle mv=crosstabItem.getMeasure(i);
          if (mv.getHeader() != null) {
            return mv.getHeader();
          }
        }
      }
 else {
        return crosstabItem.getMeasure(0).getCell();
      }
    }
 else     if (cell.getContainer() instanceof LevelViewHandle) {
      LevelViewHandle lv=(LevelViewHandle)cell.getContainer();
      boolean isRowLevl=ICrosstabReportItemConstants.ROWS_PROP.equals(lv.getContainer().getContainer().getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName());
      if (isRowLevl) {
        if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
          return getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE).getCell();
        }
        return cell;
      }
      if (crosstabItem.getMeasureCount() == 0) {
        if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
          return cell;
        }
        return getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE).getCell();
      }
      if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        String rowDimension=null;
        String rowLevel=null;
        String colDimension=((DimensionViewHandle)lv.getContainer()).getCubeDimensionName();
        String colLevel=lv.getCubeLevelName();
        LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
        if (rowLevelHandle != null) {
          rowDimension=((DimensionViewHandle)rowLevelHandle.getContainer()).getCubeDimensionName();
          rowLevel=rowLevelHandle.getCubeLevelName();
        }
        if (isMeasureHorizontal) {
          for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
            CrosstabCellHandle aggCell=crosstabItem.getMeasure(i).getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
            if (aggCell != null) {
              return aggCell;
            }
          }
        }
 else {
          return crosstabItem.getMeasure(0).getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
        }
      }
      return crosstabItem.getMeasure(0).getCell();
    }
 else     if (cell.getContainer() instanceof CrosstabViewHandle) {
      boolean isRowGrandTotal=ICrosstabReportItemConstants.ROWS_PROP.equals(cell.getContainer().getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName());
      if (isRowGrandTotal) {
        LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
        if (rowLevelHandle != null) {
          return rowLevelHandle.getCell();
        }
        return cell;
      }
      if (crosstabItem.getMeasureCount() == 0) {
        return cell;
      }
      String rowDimension=null;
      String rowLevel=null;
      LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
      if (rowLevelHandle != null) {
        rowDimension=((DimensionViewHandle)rowLevelHandle.getContainer()).getCubeDimensionName();
        rowLevel=rowLevelHandle.getCubeLevelName();
      }
      if (isMeasureHorizontal) {
        for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
          CrosstabCellHandle aggCell=crosstabItem.getMeasure(i).getAggregationCell(rowDimension,rowLevel,null,null);
          if (aggCell != null) {
            return aggCell;
          }
        }
      }
 else {
        return crosstabItem.getMeasure(0).getAggregationCell(rowDimension,rowLevel,null,null);
      }
    }
 else     if (cell.getContainer() instanceof CrosstabReportItemHandle) {
      LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
      if (rowLevelHandle != null) {
        return rowLevelHandle.getCell();
      }
      if (!isMeasureHorizontal) {
        for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
          MeasureViewHandle mv=crosstabItem.getMeasure(i);
          if (mv.getHeader() != null) {
            return mv.getHeader();
          }
        }
      }
      return cell;
    }
  }
  return null;
}",0.9999364312503972
69782,"/** 
 * Gets the aggregation function for the row/column grand total in the crosstab.
 * @param crosstab
 * @param axisType
 * @param measureView
 * @param function
 * @throws SemanticException
 */
public void setAggregationFunction(int axisType,MeasureViewHandle measureView,String function) throws SemanticException {
  if (crosstab == null || crosstab.getGrandTotal(axisType) == null || measureView == null || crosstab != measureView.getCrosstab())   return;
  CommandStack stack=crosstab.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  try {
    for (int j=0; j < measureView.getAggregationCount(); j++) {
      AggregationCellHandle cell=measureView.getAggregationCell(j);
      if ((axisType == COLUMN_AXIS_TYPE && cell.getAggregationOnColumn() == null) || (axisType == ROW_AXIS_TYPE && cell.getAggregationOnRow() == null)) {
        CrosstabModelUtil.setAggregationFunction(crosstab,cell,function);
      }
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}","/** 
 * Sets the aggregation function for the row/column grand total in the crosstab.
 * @param crosstab
 * @param axisType
 * @param measureView
 * @param function
 * @throws SemanticException
 */
public void setAggregationFunction(int axisType,MeasureViewHandle measureView,String function) throws SemanticException {
  if (crosstab == null || crosstab.getGrandTotal(axisType) == null || measureView == null || crosstab != measureView.getCrosstab())   return;
  CommandStack stack=crosstab.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  try {
    for (int j=0; j < measureView.getAggregationCount(); j++) {
      AggregationCellHandle cell=measureView.getAggregationCell(j);
      if ((axisType == COLUMN_AXIS_TYPE && cell.getAggregationOnColumn() == null) || (axisType == ROW_AXIS_TYPE && cell.getAggregationOnRow() == null)) {
        CrosstabModelUtil.setAggregationFunction(crosstab,cell,function);
      }
    }
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
}",0.9990448901623686
69783,"/** 
 * Inserts a row/column dimension into the given position. The axis type can be either <code>ICrosstabConstants.ROW_AXIS_TYPE</code> or <code>ICrosstabConstants.COLUMN_AXIS_TYPE</code>. And index is 0-based integer.
 * @param dimensionHandle the OLAP dimension handle to use
 * @param axisType row/column axis type
 * @param index insert position, a 0-based integer
 * @return
 * @throws SemanticException
 */
public DimensionViewHandle insertDimension(DimensionHandle dimensionHandle,int axisType,int index) throws SemanticException {
  if (dimensionHandle != null && crosstab.getDimension(dimensionHandle.getQualifiedName()) != null) {
    crosstab.getLogger().log(Level.SEVERE,MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_DIMENSION,dimensionHandle.getQualifiedName());
    throw new CrosstabException(crosstab.getModelHandle().getElement(),new String[]{dimensionHandle.getQualifiedName(),crosstab.getModelHandle().getElement().getIdentifier()},MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_DIMENSION);
  }
  DimensionViewHandle dimensionView=null;
  CommandStack stack=crosstab.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  try {
    CrosstabViewHandle crosstabView=crosstab.getCrosstabView(axisType);
    if (crosstabView == null) {
      crosstabView=crosstab.addCrosstabView(axisType);
    }
    dimensionView=crosstabView.insertDimension(dimensionHandle,index);
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
  return dimensionView;
}","/** 
 * Inserts a row/column dimension into the given position. The axis type can be either <code>ICrosstabConstants.ROW_AXIS_TYPE</code> or <code>ICrosstabConstants.COLUMN_AXIS_TYPE</code>. The index is 0-based integer.
 * @param dimensionHandle the OLAP dimension handle to use
 * @param axisType row/column axis type
 * @param index insert position, a 0-based integer
 * @return
 * @throws SemanticException
 */
public DimensionViewHandle insertDimension(DimensionHandle dimensionHandle,int axisType,int index) throws SemanticException {
  if (dimensionHandle != null && crosstab.getDimension(dimensionHandle.getQualifiedName()) != null) {
    crosstab.getLogger().log(Level.SEVERE,MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_DIMENSION,dimensionHandle.getQualifiedName());
    throw new CrosstabException(crosstab.getModelHandle().getElement(),new String[]{dimensionHandle.getQualifiedName(),crosstab.getModelHandle().getElement().getIdentifier()},MessageConstants.CROSSTAB_EXCEPTION_DUPLICATE_DIMENSION);
  }
  DimensionViewHandle dimensionView=null;
  CommandStack stack=crosstab.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  try {
    CrosstabViewHandle crosstabView=crosstab.getCrosstabView(axisType);
    if (crosstabView == null) {
      crosstabView=crosstab.addCrosstabView(axisType);
    }
    dimensionView=crosstabView.insertDimension(dimensionHandle,index);
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
  return dimensionView;
}",0.9980366492146596
69784,"/** 
 * @param axisType
 * @param measureList
 * @param functionList
 * @return
 * @throws SemanticException
 */
public CrosstabCellHandle addGrandTotal(int axisType,List<MeasureViewHandle> measureList,List<String> functionList) throws SemanticException {
  if (crosstab == null || !CrosstabModelUtil.isValidAxisType(axisType))   return null;
  CommandStack stack=crosstab.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  CrosstabCellHandle grandTotal=null;
  try {
    CrosstabViewHandle crosstabView=crosstab.getCrosstabView(axisType);
    if (crosstabView == null) {
      crosstabView=crosstab.addCrosstabView(axisType);
    }
    grandTotal=new CrosstabViewTask(crosstabView).addGrandTotal(measureList,functionList,false);
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
  return grandTotal;
}","/** 
 * Adds the grandtotal on given axis for the specified measures. Depending on the measure direction, it will automatically decide if need process other measures even if it's not in the given list to resovle crosstab model consistency.
 * @param axisType
 * @param measureList
 * @param functionList
 * @return
 * @throws SemanticException
 */
public CrosstabCellHandle addGrandTotal(int axisType,List<MeasureViewHandle> measureList,List<String> functionList) throws SemanticException {
  if (crosstab == null || !CrosstabModelUtil.isValidAxisType(axisType))   return null;
  CommandStack stack=crosstab.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  CrosstabCellHandle grandTotal=null;
  try {
    CrosstabViewHandle crosstabView=crosstab.getCrosstabView(axisType);
    if (crosstabView == null) {
      crosstabView=crosstab.addCrosstabView(axisType);
    }
    grandTotal=new CrosstabViewTask(crosstabView).addGrandTotal(measureList,functionList,false);
  }
 catch (  SemanticException e) {
    stack.rollback();
    throw e;
  }
  stack.commit();
  return grandTotal;
}",0.8816120906801007
69785,"/** 
 * Gets the measure view list that define aggregations for the row/column grand total in the crosstab. Each item in the list is instance of <code>MeasureViewHandle</code>.
 * @param crosstab
 * @param axisType
 * @return
 */
public List<MeasureViewHandle> getAggregationMeasures(int axisType){
  if (crosstab == null || crosstab.getGrandTotal(axisType) == null)   return Collections.emptyList();
  List<MeasureViewHandle> measures=new ArrayList<MeasureViewHandle>();
  for (int i=0; i < crosstab.getMeasureCount(); i++) {
    MeasureViewHandle measureView=crosstab.getMeasure(i);
    if (measures.contains(measureView))     continue;
    if (CrosstabModelUtil.isAggregationOn(measureView,null,axisType))     measures.add(measureView);
  }
  return measures;
}","/** 
 * Gets the measure view list that has defined aggregations for the row/column grand total in the crosstab. Each item in the list is an instance of <code>MeasureViewHandle</code>.
 * @param crosstab
 * @param axisType
 * @return
 */
public List<MeasureViewHandle> getAggregationMeasures(int axisType){
  if (crosstab == null || crosstab.getGrandTotal(axisType) == null)   return Collections.emptyList();
  List<MeasureViewHandle> measures=new ArrayList<MeasureViewHandle>();
  for (int i=0; i < crosstab.getMeasureCount(); i++) {
    MeasureViewHandle measureView=crosstab.getMeasure(i);
    if (measures.contains(measureView))     continue;
    if (CrosstabModelUtil.isAggregationOn(measureView,null,axisType))     measures.add(measureView);
  }
  return measures;
}",0.9947916666666666
69786,"CrosstabCellHandle addGrandTotal(List<MeasureViewHandle> measureList,List<String> functionList,boolean needTransaction) throws SemanticException {
  if (!isValidParameters(functionList,measureList))   return null;
  verifyTotalMeasureFunctions(crosstabView.getAxisType(),functionList,measureList);
  PropertyHandle propHandle=crosstabView.getGrandTotalProperty();
  CommandStack stack=null;
  if (needTransaction) {
    stack=crosstabView.getCommandStack();
    stack.startTrans(Messages.getString(""String_Node_Str""));
  }
  CrosstabCellHandle totalCell=null;
  try {
    ExtendedItemHandle grandTotal=null;
    if (propHandle.getContentCount() <= 0) {
      grandTotal=CrosstabExtendedItemFactory.createCrosstabCell(crosstabView.getModuleHandle());
      propHandle.add(grandTotal);
    }
    CrosstabReportItemHandle crosstab=crosstabView.getCrosstab();
    if (crosstab != null && measureList != null) {
      addMeasureAggregations(crosstabView.getAxisType(),measureList,functionList,false);
      addTotalMeasureHeader(crosstabView.getAxisType(),null,measureList);
    }
    validateCrosstab();
    totalCell=(CrosstabCellHandle)CrosstabUtil.getReportItem(grandTotal);
  }
 catch (  SemanticException e) {
    crosstabView.getLogger().log(Level.INFO,e.getMessage(),e);
    if (needTransaction) {
      stack.rollback();
    }
    throw e;
  }
  if (needTransaction) {
    stack.commit();
  }
  return totalCell;
}","CrosstabCellHandle addGrandTotal(List<MeasureViewHandle> measureList,List<String> functionList,boolean needTransaction) throws SemanticException {
  if (!isValidParameters(functionList,measureList))   return null;
  verifyTotalMeasureFunctions(crosstabView.getAxisType(),functionList,measureList);
  PropertyHandle propHandle=crosstabView.getGrandTotalProperty();
  CommandStack stack=null;
  if (needTransaction) {
    stack=crosstabView.getCommandStack();
    stack.startTrans(Messages.getString(""String_Node_Str""));
  }
  CrosstabCellHandle totalCell=null;
  try {
    ExtendedItemHandle grandTotal=null;
    if (propHandle.getContentCount() <= 0) {
      grandTotal=CrosstabExtendedItemFactory.createCrosstabCell(crosstabView.getModuleHandle());
      propHandle.add(grandTotal);
    }
    CrosstabReportItemHandle crosstab=crosstabView.getCrosstab();
    if (crosstab != null && measureList != null) {
      boolean isVerticalMeasure=MEASURE_DIRECTION_VERTICAL.equals(crosstab.getMeasureDirection());
      boolean needCheckCounterAxis=((isVerticalMeasure && crosstabView.getAxisType() == COLUMN_AXIS_TYPE) || (!isVerticalMeasure && crosstabView.getAxisType() == ROW_AXIS_TYPE));
      addMeasureAggregations(crosstabView.getAxisType(),measureList,functionList,needCheckCounterAxis);
      addTotalMeasureHeader(crosstabView.getAxisType(),null,measureList);
    }
    validateCrosstab();
    totalCell=(CrosstabCellHandle)CrosstabUtil.getReportItem(grandTotal);
  }
 catch (  SemanticException e) {
    crosstabView.getLogger().log(Level.INFO,e.getMessage(),e);
    if (needTransaction) {
      stack.rollback();
    }
    throw e;
  }
  if (needTransaction) {
    stack.commit();
  }
  return totalCell;
}",0.8839884947267498
69787,"/** 
 * @param measureList
 * @param functionList
 * @param levelView
 * @return
 * @throws SemanticException
 */
CrosstabCellHandle addSubTotal(List<MeasureViewHandle> measureList,List<String> functionList,boolean needTransaction) throws SemanticException {
  if (focus == null || !isValidParameters(functionList,measureList))   return null;
  verifyTotalMeasureFunctions(focus.getAxisType(),functionList,measureList);
  if (focus.isInnerMost()) {
    focus.getLogger().log(Level.WARNING,""String_Node_Str"" + focus.getModelHandle().getName() + ""String_Node_Str"");
    return null;
  }
  if (focus.getAggregationHeader() != null) {
    focus.getLogger().log(Level.INFO,""String_Node_Str"");
  }
  CommandStack stack=null;
  if (needTransaction) {
    stack=focus.getCommandStack();
    stack.startTrans(Messages.getString(""String_Node_Str""));
  }
  try {
    if (focus.getAggregationHeader() == null)     focus.getAggregationHeaderProperty().add(CrosstabExtendedItemFactory.createCrosstabCell(focus.getModuleHandle()));
    if (crosstab != null && measureList != null) {
      addMeasureAggregations(focus,measureList,functionList,false);
      addTotalMeasureHeader(focus.getAxisType(),focus,measureList);
    }
    validateCrosstab();
  }
 catch (  SemanticException e) {
    focus.getLogger().log(Level.WARNING,e.getMessage(),e);
    if (needTransaction) {
      stack.rollback();
    }
    throw e;
  }
  if (needTransaction) {
    stack.commit();
  }
  return focus.getAggregationHeader();
}","/** 
 * @param measureList
 * @param functionList
 * @param levelView
 * @return
 * @throws SemanticException
 */
CrosstabCellHandle addSubTotal(List<MeasureViewHandle> measureList,List<String> functionList,boolean needTransaction) throws SemanticException {
  if (focus == null || !isValidParameters(functionList,measureList))   return null;
  verifyTotalMeasureFunctions(focus.getAxisType(),functionList,measureList);
  if (focus.isInnerMost()) {
    focus.getLogger().log(Level.WARNING,""String_Node_Str"" + focus.getModelHandle().getName() + ""String_Node_Str"");
    return null;
  }
  if (focus.getAggregationHeader() != null) {
    focus.getLogger().log(Level.INFO,""String_Node_Str"");
  }
  CommandStack stack=null;
  if (needTransaction) {
    stack=focus.getCommandStack();
    stack.startTrans(Messages.getString(""String_Node_Str""));
  }
  try {
    if (focus.getAggregationHeader() == null)     focus.getAggregationHeaderProperty().add(CrosstabExtendedItemFactory.createCrosstabCell(focus.getModuleHandle()));
    if (crosstab != null && measureList != null) {
      boolean isVerticalMeasure=MEASURE_DIRECTION_VERTICAL.equals(crosstab.getMeasureDirection());
      boolean needCheckCounterAxis=((isVerticalMeasure && focus.getAxisType() == COLUMN_AXIS_TYPE) || (!isVerticalMeasure && focus.getAxisType() == ROW_AXIS_TYPE));
      addMeasureAggregations(focus,measureList,functionList,needCheckCounterAxis);
      addTotalMeasureHeader(focus.getAxisType(),focus,measureList);
    }
    validateCrosstab();
  }
 catch (  SemanticException e) {
    focus.getLogger().log(Level.WARNING,e.getMessage(),e);
    if (needTransaction) {
      stack.rollback();
    }
    throw e;
  }
  if (needTransaction) {
    stack.commit();
  }
  return focus.getAggregationHeader();
}",0.9096477794793262
69788,"/** 
 * Gets the measure view list that define aggregations for the given level view. Each item in the list is instance of <code>MeasureViewHandle</code> .
 * @param levelView
 * @return
 */
public List getAggregationMeasures(){
  if (focus.getAggregationHeader() == null || focus.getCubeLevelName() == null || focus.getCubeLevelName().length() <= 0)   return Collections.EMPTY_LIST;
  if (crosstab == null)   return Collections.EMPTY_LIST;
  int axisType=focus.getAxisType();
  String levelName=focus.getCubeLevelName();
  List measures=new ArrayList();
  for (int i=0; i < crosstab.getMeasureCount(); i++) {
    MeasureViewHandle measureView=crosstab.getMeasure(i);
    if (measures.contains(measureView))     continue;
    if (CrosstabModelUtil.isAggregationOn(measureView,levelName,axisType))     measures.add(measureView);
  }
  return measures;
}","/** 
 * Gets the measure view list that define aggregations for the given level view. Each item in the list is an instance of <code>MeasureViewHandle</code> .
 * @param levelView
 * @return
 */
public List<MeasureViewHandle> getAggregationMeasures(){
  if (focus.getAggregationHeader() == null || focus.getCubeLevelName() == null || focus.getCubeLevelName().length() <= 0)   return Collections.emptyList();
  if (crosstab == null)   return Collections.emptyList();
  int axisType=focus.getAxisType();
  String levelName=focus.getCubeLevelName();
  List<MeasureViewHandle> measures=new ArrayList<MeasureViewHandle>();
  for (int i=0; i < crosstab.getMeasureCount(); i++) {
    MeasureViewHandle measureView=crosstab.getMeasure(i);
    if (measures.contains(measureView))     continue;
    if (CrosstabModelUtil.isAggregationOn(measureView,levelName,axisType))     measures.add(measureView);
  }
  return measures;
}",0.9445073612684032
69789,"/** 
 * add several common use page for Birt data set editor
 * @param ds
 */
private void addCommonPage(DataSetHandle ds){
  if (ds instanceof ScriptDataSetHandle) {
    addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new OutputColumnDefnPage());
    addPageTo(""String_Node_Str"",PARAMETERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetParametersPage());
    addPageTo(""String_Node_Str"",FILTERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetFiltersPage());
    addDataSetSettingPage(ds);
    addPageTo(""String_Node_Str"",RESULTSET_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new ResultSetPreviewPage());
  }
 else   if (ds instanceof OdaDataSetHandle) {
    addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new OutputColumnsPage());
    addPageTo(""String_Node_Str"",COMPUTED_COLUMNS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetComputedColumnsPage());
    if (includeInputParameterPage)     addPageTo(""String_Node_Str"",PARAMETERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetParametersPage());
    addPageTo(""String_Node_Str"",FILTERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetFiltersPage());
    addPageTo(""String_Node_Str"",DATASOURCE_EDITOR_PROPERTY_PAGE,Messages.getString(""String_Node_Str""),null,new PropertyBindingPage());
    addDataSetSettingPage(ds);
    if (includeOutputParameterPage)     addPageTo(""String_Node_Str"",OUTPUT_PARAMETER_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new OutputParameterPreviewPage());
    addPageTo(""String_Node_Str"",RESULTSET_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new ResultSetPreviewPage());
  }
 else   if (ds instanceof JointDataSetHandle) {
    addPageTo(""String_Node_Str"",JOINT_DATA_SET_PAGE,Messages.getString(""String_Node_Str""),null,new JointDataSetPage(Messages.getString(""String_Node_Str"")));
    addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new OutputColumnsPage());
    addPageTo(""String_Node_Str"",COMPUTED_COLUMNS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetComputedColumnsPage());
    addPageTo(""String_Node_Str"",PARAMETERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetParametersPage());
    addPageTo(""String_Node_Str"",FILTERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetFiltersPage());
    addPageTo(""String_Node_Str"",RESULTSET_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new ResultSetPreviewPage());
  }
 else {
    IPropertyPage[] pages=ExtenalUIUtil.getCommonPages(ds);
    if (pages != null && pages.length > 0) {
      for (int i=0; i < pages.length; i++) {
        addPageTo(""String_Node_Str"",pages[i].getClass().getName(),pages[i].getName(),null,pages[i]);
      }
      addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new OutputColumnsPage());
      addPageTo(""String_Node_Str"",COMPUTED_COLUMNS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetComputedColumnsPage());
      addPageTo(""String_Node_Str"",PARAMETERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetParametersPage());
      addPageTo(""String_Node_Str"",FILTERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetFiltersPage());
      addPageTo(""String_Node_Str"",RESULTSET_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new ResultSetPreviewPage());
    }
  }
  if (needToFocusOnOutput)   setDefaultNode(OUTPUTCOLUMN_PAGE);
}","/** 
 * add several common use page for Birt data set editor
 * @param ds
 */
private void addCommonPage(DataSetHandle ds){
  if (ds instanceof ScriptDataSetHandle) {
    addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new OutputColumnDefnPage());
    addPageTo(""String_Node_Str"",PARAMETERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetParametersPage());
    addPageTo(""String_Node_Str"",FILTERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetFiltersPage());
    addDataSetSettingPage(ds);
    addPageTo(""String_Node_Str"",RESULTSET_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new ResultSetPreviewPage());
  }
 else   if (ds instanceof OdaDataSetHandle) {
    addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new OutputColumnsPage());
    addPageTo(""String_Node_Str"",COMPUTED_COLUMNS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetComputedColumnsPage());
    if (includeInputParameterPage)     addPageTo(""String_Node_Str"",PARAMETERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetParametersPage());
    IPropertyPage filterpage=new DataSetFiltersPage();
    try {
      filterpage=(IPropertyPage)Class.forName(""String_Node_Str"").newInstance();
    }
 catch (    Throwable e) {
    }
    addPageTo(""String_Node_Str"",FILTERS_PAGE,Messages.getString(""String_Node_Str""),null,filterpage);
    addPageTo(""String_Node_Str"",DATASOURCE_EDITOR_PROPERTY_PAGE,Messages.getString(""String_Node_Str""),null,new PropertyBindingPage());
    addDataSetSettingPage(ds);
    if (includeOutputParameterPage)     addPageTo(""String_Node_Str"",OUTPUT_PARAMETER_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new OutputParameterPreviewPage());
    addPageTo(""String_Node_Str"",RESULTSET_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new ResultSetPreviewPage());
  }
 else   if (ds instanceof JointDataSetHandle) {
    addPageTo(""String_Node_Str"",JOINT_DATA_SET_PAGE,Messages.getString(""String_Node_Str""),null,new JointDataSetPage(Messages.getString(""String_Node_Str"")));
    addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new OutputColumnsPage());
    addPageTo(""String_Node_Str"",COMPUTED_COLUMNS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetComputedColumnsPage());
    addPageTo(""String_Node_Str"",PARAMETERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetParametersPage());
    addPageTo(""String_Node_Str"",FILTERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetFiltersPage());
    addPageTo(""String_Node_Str"",RESULTSET_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new ResultSetPreviewPage());
  }
 else {
    IPropertyPage[] pages=ExtenalUIUtil.getCommonPages(ds);
    if (pages != null && pages.length > 0) {
      for (int i=0; i < pages.length; i++) {
        addPageTo(""String_Node_Str"",pages[i].getClass().getName(),pages[i].getName(),null,pages[i]);
      }
      addPageTo(""String_Node_Str"",OUTPUTCOLUMN_PAGE,Messages.getString(""String_Node_Str""),null,new OutputColumnsPage());
      addPageTo(""String_Node_Str"",COMPUTED_COLUMNS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetComputedColumnsPage());
      addPageTo(""String_Node_Str"",PARAMETERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetParametersPage());
      addPageTo(""String_Node_Str"",FILTERS_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetFiltersPage());
      addPageTo(""String_Node_Str"",RESULTSET_PREVIEW_PAGE,Messages.getString(""String_Node_Str""),null,new ResultSetPreviewPage());
    }
  }
  if (needToFocusOnOutput)   setDefaultNode(OUTPUTCOLUMN_PAGE);
}",0.9697390338700722
69790,"/** 
 * Constructs the data request session with the provided session context information.
 * @param context
 * @throws BirtException
 */
public DataRequestSessionImpl(DataSessionContext context) throws BirtException {
  if (context == null)   throw new AdapterException(ResourceConstants.CONEXT_NULL_ERROR);
  dataEngine=(DataEngineImpl)DataEngine.newDataEngine(context.getDataEngineContext());
  modelAdaptor=new DataModelAdapter(context);
  sessionContext=context;
  cubeHandleMap=new HashMap();
  if (sessionContext != null) {
    this.setModuleHandleToAppContext();
  }
}","/** 
 * Constructs the data request session with the provided session context information.
 * @param context
 * @throws BirtException
 */
public DataRequestSessionImpl(DataSessionContext context) throws BirtException {
  if (context == null)   throw new AdapterException(ResourceConstants.CONEXT_NULL_ERROR);
  dataEngine=(DataEngineImpl)DataEngine.newDataEngine(context.getDataEngineContext());
  try {
    modelAdaptor=(IModelAdapter)Class.forName(""String_Node_Str"").getConstructor(context.getClass()).newInstance(context);
  }
 catch (  Throwable e) {
    modelAdaptor=new ModelAdapter(context);
  }
  sessionContext=context;
  cubeHandleMap=new HashMap();
  if (sessionContext != null) {
    this.setModuleHandleToAppContext();
  }
}",0.8651942117288652
69791,"protected void startDiagonalCell(ICellContent cell){
  DimensionType cellWidth=getCellWidth(cell);
  DimensionType cellHeight=getCellHeight(cell);
  if (cellWidth == null || cellHeight == null)   return;
  String imgUri=diagonalCellImageMap.get(cell.getInstanceID().getComponentID());
  if (imgUri == null) {
    DiagonalLineImage imageCreater=new DiagonalLineImage();
    imageCreater.setDiagonalLine(cell.getDiagonalNumber(),cell.getDiagonalStyle(),cell.getDiagonalWidth(),cell.getDiagonalColor());
    imageCreater.setAntidiagonalLine(cell.getAntidiagonalNumber(),cell.getAntidiagonalStyle(),cell.getAntidiagonalWidth(),cell.getAntidiagonalColor());
    imageCreater.setImageDpi(imageDpi);
    imageCreater.setImageSize(cellWidth,cellHeight);
    IStyle cellComputedStyle=cell.getComputedStyle();
    String strColor=cellComputedStyle.getColor();
    imageCreater.setColor(PropertyUtil.getColor(strColor));
    byte[] imageByteArray=null;
    try {
      imageByteArray=imageCreater.drawImage();
    }
 catch (    IOException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
    if (imageByteArray != null) {
      Image image=new Image(imageByteArray,null,""String_Node_Str"");
      imgUri=imageHandler.onCustomImage(image,reportContext);
      if (imgUri != null) {
        diagonalCellImageMap.put(cell.getInstanceID().getComponentID(),imgUri);
      }
    }
  }
  writer.openTag(HTMLTags.TAG_DIV);
  writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  if (imgUri != null) {
    writer.openTag(HTMLTags.TAG_IMAGE);
    writer.attributeAllowEmpty(HTMLTags.ATTR_ALT,""String_Node_Str"");
    writer.attribute(HTMLTags.ATTR_SRC,imgUri);
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    if (null == htmlIDNamespace) {
      writer.attribute(HTMLTags.ATTR_ONLOAD,""String_Node_Str"");
    }
 else {
      writer.attribute(HTMLTags.ATTR_ONLOAD,htmlIDNamespace + ""String_Node_Str"");
    }
    writer.closeTag(HTMLTags.TAG_IMAGE);
  }
}","protected void startDiagonalCell(ICellContent cell){
  DimensionType cellWidth=getCellWidth(cell);
  DimensionType cellHeight=getCellHeight(cell);
  if (cellWidth == null || cellHeight == null)   return;
  String imgUri=diagonalCellImageMap.get(cell.getInstanceID().getComponentID());
  if (imgUri == null) {
    DiagonalLineImage imageCreater=new DiagonalLineImage();
    imageCreater.setDiagonalLine(cell.getDiagonalNumber(),cell.getDiagonalStyle(),cell.getDiagonalWidth(),cell.getDiagonalColor());
    imageCreater.setAntidiagonalLine(cell.getAntidiagonalNumber(),cell.getAntidiagonalStyle(),cell.getAntidiagonalWidth(),cell.getAntidiagonalColor());
    imageCreater.setImageDpi(imageDpi);
    imageCreater.setImageSize(cellWidth,cellHeight);
    IStyle cellComputedStyle=cell.getComputedStyle();
    String strColor=cellComputedStyle.getColor();
    imageCreater.setColor(PropertyUtil.getColor(strColor));
    byte[] imageByteArray=null;
    try {
      imageByteArray=imageCreater.drawImage();
    }
 catch (    IOException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
    if (imageByteArray != null) {
      Image image=new Image(imageByteArray,cell.getInstanceID().toUniqueString(),""String_Node_Str"");
      image.setReportRunnable(runnable);
      image.setRenderOption(renderOption);
      imgUri=imageHandler.onCustomImage(image,reportContext);
      if (imgUri != null) {
        diagonalCellImageMap.put(cell.getInstanceID().getComponentID(),imgUri);
      }
    }
  }
  writer.openTag(HTMLTags.TAG_DIV);
  writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  if (imgUri != null) {
    writer.openTag(HTMLTags.TAG_IMAGE);
    writer.attributeAllowEmpty(HTMLTags.ATTR_ALT,""String_Node_Str"");
    writer.attribute(HTMLTags.ATTR_SRC,imgUri);
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    if (null == htmlIDNamespace) {
      writer.attribute(HTMLTags.ATTR_ONLOAD,""String_Node_Str"");
    }
 else {
      writer.attribute(HTMLTags.ATTR_ONLOAD,htmlIDNamespace + ""String_Node_Str"");
    }
    writer.closeTag(HTMLTags.TAG_IMAGE);
  }
}",0.969097651421508
69792,"/** 
 * Convert DimensionType to a pixel value.
 * @param d DimensionType value
 * @return pixel value
 */
public static int getDimensionPixelValue(DimensionType d,int dpi){
  if (d == null) {
    return 0;
  }
  try {
    String units=d.getUnits();
    if (units.equals(EngineIRConstants.UNITS_PX)) {
      return (int)d.getMeasure();
    }
 else     if (units.equals(EngineIRConstants.UNITS_PT) || units.equals(EngineIRConstants.UNITS_CM) || units.equals(EngineIRConstants.UNITS_MM)|| units.equals(EngineIRConstants.UNITS_PC)|| units.equals(EngineIRConstants.UNITS_IN)) {
      double point=d.convertTo(EngineIRConstants.UNITS_PT);
      if (dpi > 0) {
        return (int)(point / 72 * dpi);
      }
 else {
        return (int)(point / 72 * 96);
      }
    }
 else     if (units.equals(EngineIRConstants.UNITS_PERCENTAGE)) {
      return 0;
    }
  }
 catch (  Exception e) {
    return 0;
  }
  return 0;
}","/** 
 * Convert DimensionType to a pixel value.
 * @param d DimensionType value
 * @return pixel value
 */
public static int getDimensionPixelValue(DimensionType d,int dpi){
  if (d == null) {
    return 0;
  }
  try {
    String units=d.getUnits();
    if (EngineIRConstants.UNITS_PX.equals(units)) {
      return (int)d.getMeasure();
    }
 else     if (EngineIRConstants.UNITS_PT.equals(units) || EngineIRConstants.UNITS_CM.equals(units) || EngineIRConstants.UNITS_MM.equals(units)|| EngineIRConstants.UNITS_PC.equals(units)|| EngineIRConstants.UNITS_IN.equals(units)) {
      double point=d.convertTo(EngineIRConstants.UNITS_PT);
      if (dpi > 0) {
        return (int)(point / 72 * dpi);
      }
 else {
        return (int)(point / 72 * 96);
      }
    }
 else     if (EngineIRConstants.UNITS_PERCENTAGE.equals(units)) {
      return 0;
    }
  }
 catch (  Exception e) {
    return 0;
  }
  return 0;
}",0.9002192982456141
69793,"/** 
 * @return The constraint
 */
protected Object getConstraint(){
  ReportItemHandle handle=(ReportItemHandle)getModel();
  ReportItemConstraint constraint=new ReportItemConstraint();
  constraint.setDisplay(handle.getPrivateStyle().getDisplay());
  DimensionHandle value=handle.getWidth();
  constraint.setMeasure(value.getMeasure());
  constraint.setUnits(value.getUnits());
  return constraint;
}","/** 
 * @return The constraint
 */
protected Object getConstraint(){
  ReportItemHandle handle=(ReportItemHandle)getModel();
  ReportItemConstraint constraint=new ReportItemConstraint();
  StyleHandle style=handle.getPrivateStyle();
  constraint.setDisplay(style.getDisplay());
  DimensionHandle value=handle.getWidth();
  constraint.setMeasure(value.getMeasure());
  constraint.setUnits(value.getUnits());
  String vAlign=style.getVerticalAlign();
  if (DesignChoiceConstants.VERTICAL_ALIGN_MIDDLE.equals(vAlign)) {
    constraint.setAlign(ReportFlowLayout.ALIGN_CENTER);
  }
 else   if (DesignChoiceConstants.VERTICAL_ALIGN_BOTTOM.equals(vAlign)) {
    constraint.setAlign(ReportFlowLayout.ALIGN_RIGHTBOTTOM);
  }
 else   if (DesignChoiceConstants.VERTICAL_ALIGN_TOP.equals(vAlign)) {
    constraint.setAlign(ReportFlowLayout.ALIGN_LEFTTOP);
  }
  return constraint;
}",0.4889937106918239
69794,"/** 
 * @return The constraint
 */
protected Object getConstraint(){
  ReportItemHandle handle=(ReportItemHandle)getModel();
  ReportItemConstraint constraint=new ReportItemConstraint();
  constraint.setDisplay(handle.getPrivateStyle().getDisplay());
  DimensionHandle value=handle.getWidth();
  constraint.setMeasure(value.getMeasure());
  constraint.setUnits(value.getUnits());
  return constraint;
}","/** 
 * @return The constraint
 */
protected Object getConstraint(){
  ReportItemHandle handle=(ReportItemHandle)getModel();
  ReportItemConstraint constraint=new ReportItemConstraint();
  StyleHandle style=handle.getPrivateStyle();
  constraint.setDisplay(style.getDisplay());
  DimensionHandle value=handle.getWidth();
  constraint.setMeasure(value.getMeasure());
  constraint.setUnits(value.getUnits());
  String vAlign=style.getVerticalAlign();
  if (DesignChoiceConstants.VERTICAL_ALIGN_MIDDLE.equals(vAlign)) {
    constraint.setAlign(ReportFlowLayout.ALIGN_CENTER);
  }
 else   if (DesignChoiceConstants.VERTICAL_ALIGN_BOTTOM.equals(vAlign)) {
    constraint.setAlign(ReportFlowLayout.ALIGN_RIGHTBOTTOM);
  }
 else   if (DesignChoiceConstants.VERTICAL_ALIGN_TOP.equals(vAlign)) {
    constraint.setAlign(ReportFlowLayout.ALIGN_LEFTTOP);
  }
  return constraint;
}",0.4889937106918239
69795,"/** 
 * @return The constraint
 */
protected Object getConstraint(){
  ExtendedItemHandle handle=getExtendedItemHandle();
  ReportItemConstraint constraint=new ReportItemConstraint();
  String type=handle.getPrivateStyle().getDisplay();
  if (type == null || DesignChoiceConstants.DISPLAY_NONE.equals(type)) {
    type=DesignChoiceConstants.DISPLAY_BLOCK;
  }
  constraint.setDisplay(type);
  constraint.setMargin(getModelAdapter().getMargin(null));
  DimensionHandle value=handle.getWidth();
  constraint.setMeasure(value.getMeasure());
  constraint.setUnits(value.getUnits());
  return constraint;
}","/** 
 * @return The constraint
 */
protected Object getConstraint(){
  ExtendedItemHandle handle=getExtendedItemHandle();
  ReportItemConstraint constraint=new ReportItemConstraint();
  String type=handle.getPrivateStyle().getDisplay();
  if (type == null || DesignChoiceConstants.DISPLAY_NONE.equals(type)) {
    type=DesignChoiceConstants.DISPLAY_BLOCK;
  }
  constraint.setDisplay(type);
  constraint.setMargin(getModelAdapter().getMargin(null));
  DimensionHandle value=handle.getWidth();
  constraint.setMeasure(value.getMeasure());
  constraint.setUnits(value.getUnits());
  String vAlign=handle.getPrivateStyle().getVerticalAlign();
  if (DesignChoiceConstants.VERTICAL_ALIGN_MIDDLE.equals(vAlign)) {
    constraint.setAlign(ReportFlowLayout.ALIGN_CENTER);
  }
 else   if (DesignChoiceConstants.VERTICAL_ALIGN_BOTTOM.equals(vAlign)) {
    constraint.setAlign(ReportFlowLayout.ALIGN_RIGHTBOTTOM);
  }
 else   if (DesignChoiceConstants.VERTICAL_ALIGN_TOP.equals(vAlign)) {
    constraint.setAlign(ReportFlowLayout.ALIGN_LEFTTOP);
  }
  return constraint;
}",0.7003610108303249
69796,"/** 
 * Layouts one row of components. This is done based on the layout's orientation, minor alignment and major alignment.
 * @param parent the parent figure
 * @since 2.0
 */
protected void layoutRow(IFigure parent){
  int majorAdjustment=0;
  int minorAdjustment=0;
  int correctMajorAlignment=majorAlignment;
  int correctMinorAlignment=minorAlignment;
  majorAdjustment=data.area.width - data.rowWidth + getMinorSpacing();
  if (majorAdjustment < 0) {
    if (parent instanceof ReportRootFigure || !parent.isMirrored()) {
      majorAdjustment=0;
    }
  }
 else {
switch (correctMajorAlignment) {
case ALIGN_LEFTTOP:
      majorAdjustment=0;
    break;
case ALIGN_CENTER:
  majorAdjustment/=2;
break;
case ALIGN_RIGHTBOTTOM:
break;
}
}
boolean needVerticalAlign=minorAlignment == ALIGN_CENTER || minorAlignment == ALIGN_RIGHTBOTTOM;
for (int j=data.rowPos; j < data.rowCount; j++) {
if (fill) {
data.bounds[j].height=data.rowHeight;
}
 else {
minorAdjustment=data.rowHeight - data.bounds[j].height;
switch (correctMinorAlignment) {
case ALIGN_LEFTTOP:
minorAdjustment=0;
break;
case ALIGN_CENTER:
minorAdjustment/=2;
break;
case ALIGN_RIGHTBOTTOM:
break;
}
if (minorAdjustment < 0) {
minorAdjustment=0;
}
data.bounds[j].y+=minorAdjustment;
}
data.bounds[j].x+=majorAdjustment;
Rectangle parentArea=parent.getClientArea().getCopy();
if (data.rowY < parentArea.y + parentArea.height && data.rowY + data.rowHeight > parentArea.y + parentArea.height) {
Rectangle rect=data.bounds[j].getCopy();
rect.translate(parentArea.x,parentArea.y);
int distanceHeight=rect.y + rect.height - parentArea.y - parentArea.height;
if (distanceHeight > 0) {
int topDistnceHeight=rect.y - data.rowY - parentArea.y;
if (topDistnceHeight > 0) {
if (distanceHeight > topDistnceHeight) {
data.bounds[j].y=data.bounds[j].y - topDistnceHeight;
}
 else {
if (correctMinorAlignment == ALIGN_CENTER) {
data.bounds[j].y=data.bounds[j].y - minorAdjustment + (topDistnceHeight - distanceHeight) / 2;
}
 else {
data.bounds[j].y=(data.bounds[j].y - minorAdjustment + topDistnceHeight - distanceHeight);
}
}
}
}
 else {
if (correctMinorAlignment == ALIGN_CENTER) {
data.bounds[j].y=data.bounds[j].y - minorAdjustment + (parentArea.height - data.rowY - data.bounds[j].height) / 2;
}
}
}
if (!needVerticalAlign) {
setBoundsOfChild(parent,data.row[j],data.bounds[j].getCopy().crop(data.margin[j]));
}
}
data.rowPos=data.rowCount;
data.rowY+=getMajorSpacing() + data.rowHeight;
postLayoutRow(data);
initRow();
}","/** 
 * Layouts one row of components. This is done based on the layout's orientation, minor alignment and major alignment.
 * @param parent the parent figure
 * @since 2.0
 */
protected void layoutRow(IFigure parent){
  int majorAdjustment=0;
  int minorAdjustment=0;
  int correctMajorAlignment=majorAlignment;
  majorAdjustment=data.area.width - data.rowWidth + getMinorSpacing();
  if (majorAdjustment < 0) {
    if (parent instanceof ReportRootFigure || !parent.isMirrored()) {
      majorAdjustment=0;
    }
  }
 else {
switch (correctMajorAlignment) {
case ALIGN_LEFTTOP:
      majorAdjustment=0;
    break;
case ALIGN_CENTER:
  majorAdjustment/=2;
break;
case ALIGN_RIGHTBOTTOM:
break;
}
}
boolean needVerticalAlign=minorAlignment == ALIGN_CENTER || minorAlignment == ALIGN_RIGHTBOTTOM;
for (int j=data.rowPos; j < data.rowCount; j++) {
int correctMinorAlignment=getChildVerticalAlign(data.row[j]);
if (fill) {
data.bounds[j].height=data.rowHeight;
}
 else {
minorAdjustment=data.rowHeight - data.bounds[j].height;
switch (correctMinorAlignment) {
case ALIGN_LEFTTOP:
minorAdjustment=0;
break;
case ALIGN_CENTER:
minorAdjustment/=2;
break;
case ALIGN_RIGHTBOTTOM:
break;
}
if (minorAdjustment < 0) {
minorAdjustment=0;
}
data.bounds[j].y+=minorAdjustment;
}
data.bounds[j].x+=majorAdjustment;
Rectangle parentArea=parent.getClientArea().getCopy();
if (data.rowY < parentArea.y + parentArea.height && data.rowY + data.rowHeight > parentArea.y + parentArea.height) {
Rectangle rect=data.bounds[j].getCopy();
rect.translate(parentArea.x,parentArea.y);
int distanceHeight=rect.y + rect.height - parentArea.y - parentArea.height;
if (distanceHeight > 0) {
int topDistnceHeight=rect.y - data.rowY - parentArea.y;
if (topDistnceHeight > 0) {
if (distanceHeight > topDistnceHeight) {
data.bounds[j].y=data.bounds[j].y - topDistnceHeight;
}
 else {
if (correctMinorAlignment == ALIGN_CENTER) {
data.bounds[j].y=data.bounds[j].y - minorAdjustment + (topDistnceHeight - distanceHeight) / 2;
}
 else {
data.bounds[j].y=(data.bounds[j].y - minorAdjustment + topDistnceHeight - distanceHeight);
}
}
}
}
 else {
if (correctMinorAlignment == ALIGN_CENTER) {
data.bounds[j].y=data.bounds[j].y - minorAdjustment + (parentArea.height - data.rowY - data.bounds[j].height) / 2;
}
}
}
if (!needVerticalAlign) {
setBoundsOfChild(parent,data.row[j],data.bounds[j].getCopy().crop(data.margin[j]));
}
}
data.rowPos=data.rowCount;
data.rowY+=getMajorSpacing() + data.rowHeight;
postLayoutRow(data);
initRow();
}",0.9786548530004028
69797,"public static String parseColor(String color){
  if (""String_Node_Str"".equalsIgnoreCase(color) || color == null) {
    return null;
  }
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
  String[] values=color.substring(color.indexOf(""String_Node_Str"") + 1,color.length() - 1).split(""String_Node_Str"");
  String value=""String_Node_Str"";
  for (int i=0; i < values.length; i++) {
    try {
      String s=Integer.toHexString((Integer.parseInt(values[i].trim())));
      if (s.length() == 1) {
        s=""String_Node_Str"" + s;
      }
      value+=s;
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      value=null;
    }
  }
  return value;
}","public static String parseColor(String color){
  if (""String_Node_Str"".equalsIgnoreCase(color) || color == null || color.length() == 0) {
    return null;
  }
  if (color.startsWith(""String_Node_Str"")) {
    return color.substring(1,Math.min(color.length(),7));
  }
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
  String[] values=color.substring(color.indexOf(""String_Node_Str"") + 1,color.length() - 1).split(""String_Node_Str"");
  String value=""String_Node_Str"";
  for (int i=0; i < values.length; i++) {
    try {
      String s=Integer.toHexString((Integer.parseInt(values[i].trim())));
      if (s.length() == 1) {
        s=""String_Node_Str"" + s;
      }
      value+=s;
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      value=null;
    }
  }
  return value;
}",0.9678217821782178
69798,"/** 
 * @param dataSet
 * @param inputParamBindings
 * @param columnBindings
 * @param boundColumnName
 * @param requestInfo
 * @return
 * @throws BirtException
 */
private IColumnValueIterator getColumnValueIterator(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  ArrayList temp=new ArrayList();
  while (columnBindings != null && columnBindings.hasNext()) {
    IBinding binding=this.modelAdaptor.adaptBinding((ComputedColumnHandle)columnBindings.next());
    if (binding.getAggrFunction() == null)     temp.add(binding);
  }
  IQueryResults queryResults=getQueryResults(dataSet,inputParamBindings,temp.iterator(),boundColumnName);
  return new ColumnValueIterator(queryResults,boundColumnName,requestInfo);
}","/** 
 * @param dataSet
 * @param inputParamBindings
 * @param columnBindings
 * @param boundColumnName
 * @param requestInfo
 * @return
 * @throws BirtException
 */
private IColumnValueIterator getColumnValueIterator(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  ArrayList temp=new ArrayList();
  while (columnBindings != null && columnBindings.hasNext()) {
    Object nextBinding=columnBindings.next();
    IBinding binding=this.modelAdaptor.adaptBinding((ComputedColumnHandle)nextBinding);
    if (binding.getAggrFunction() == null)     temp.add(nextBinding);
  }
  IQueryResults queryResults=getQueryResults(dataSet,inputParamBindings,temp.iterator(),boundColumnName);
  return new ColumnValueIterator(queryResults,boundColumnName,requestInfo);
}",0.9434416365824309
69799,"public HTMLEmitter(HTMLReportEmitter reportEmitter,HTMLWriter writer,String layoutPreference,boolean enableInlineStyle){
  this.reportEmitter=reportEmitter;
  this.writer=writer;
  this.layoutPreference=layoutPreference;
  this.enableInlineStyle=enableInlineStyle;
}","public HTMLEmitter(HTMLReportEmitter reportEmitter,HTMLWriter writer,String layoutPreference,boolean enableInlineStyle,int browserVersion){
  this.reportEmitter=reportEmitter;
  this.writer=writer;
  this.layoutPreference=layoutPreference;
  this.enableInlineStyle=enableInlineStyle;
  this.browserVersion=browserVersion;
}",0.9032258064516128
69800,"/** 
 * Open the tag when implement the inline box.
 */
protected void openInlineBoxTag(){
  writer.openTag(HTMLTags.TAG_DIV);
  writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  writer.openTag(HTMLTags.TAG_TABLE);
  writer.openTag(HTMLTags.TAG_TR);
  writer.openTag(HTMLTags.TAG_TD);
}","/** 
 * Open the tag when implement the inline box.
 */
protected void openInlineBoxTag(){
  writer.openTag(HTMLTags.TAG_DIV);
  if (browserVersion == HTMLEmitterUtil.BROWSER_IE7) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
 else {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  writer.openTag(HTMLTags.TAG_TABLE);
  writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  writer.openTag(HTMLTags.TAG_TR);
  writer.openTag(HTMLTags.TAG_TD);
}",0.7535121328224776
69801,"public HTMLPerformanceOptimize(HTMLReportEmitter reportEmitter,HTMLWriter writer,String layoutPreference,boolean enableInlineStyle){
  super(reportEmitter,writer,layoutPreference,enableInlineStyle);
}","public HTMLPerformanceOptimize(HTMLReportEmitter reportEmitter,HTMLWriter writer,String layoutPreference,boolean enableInlineStyle,int browserVersion){
  super(reportEmitter,writer,layoutPreference,enableInlineStyle,browserVersion);
}",0.9216589861751152
69802,"public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
    Map appContext=reportContext.getAppContext();
    if (appContext != null) {
      Object tmp=appContext.get(EngineConstants.APPCONTEXT_CHART_RESOLUTION);
      if (tmp != null && tmp instanceof Number) {
        imageDpi=((Number)tmp).intValue();
      }
    }
    if (imageDpi <= 0) {
      imageDpi=designHandle.getImageDPI();
    }
    if (imageDpi <= 0) {
      imageDpi=96;
    }
  }
  retrieveRtLFlag();
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,layoutPreference,enableInlineStyle);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,layoutPreference,enableInlineStyle,htmlRtLFlag);
  }
  if (isEmbeddable) {
    outputCSSStyles(reportDesign,designHandle);
    fixTransparentPNG();
    fixRedirect();
    openRootTag();
    writeBidiFlag();
    if (report != null) {
      String defaultStyleName=report.getDesign().getRootStyleName();
      if (defaultStyleName != null) {
        if (enableInlineStyle) {
          StringBuffer defaultStyleBuffer=new StringBuffer();
          IStyle defaultStyle=report.findStyle(defaultStyleName);
          htmlEmitter.buildDefaultStyle(defaultStyleBuffer,defaultStyle);
          if (defaultStyleBuffer.length() > 0) {
            writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
          }
        }
 else {
          if (htmlIDNamespace != null) {
            writer.attribute(HTMLTags.ATTR_CLASS,htmlIDNamespace + defaultStyleName);
          }
 else {
            writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
          }
        }
      }
    }
    return;
  }
  openRootTag();
  writeBidiFlag();
  writer.openTag(HTMLTags.TAG_HEAD);
  outputReportTitle(designHandle);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  outputCSSStyles(reportDesign,designHandle);
  fixTransparentPNG();
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String defaultStyleName=report.getDesign().getRootStyleName();
    if (defaultStyleName != null) {
      if (enableInlineStyle) {
        IStyle defaultStyle=report.findStyle(defaultStyleName);
        htmlEmitter.buildDefaultStyle(defaultStyleBuffer,defaultStyle);
      }
 else {
        if (htmlIDNamespace != null) {
          writer.attribute(HTMLTags.ATTR_CLASS,htmlIDNamespace + defaultStyleName);
        }
 else {
          writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
        }
      }
    }
  }
  if (outputMasterPageContent) {
    defaultStyleBuffer.append(""String_Node_Str"");
  }
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
  }
}","public void start(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  ReportDesignHandle designHandle=null;
  Report reportDesign=null;
  if (report != null) {
    reportDesign=report.getDesign();
    designHandle=reportDesign.getReportDesign();
    Map appContext=reportContext.getAppContext();
    if (appContext != null) {
      Object tmp=appContext.get(EngineConstants.APPCONTEXT_CHART_RESOLUTION);
      if (tmp != null && tmp instanceof Number) {
        imageDpi=((Number)tmp).intValue();
      }
    }
    if (imageDpi <= 0) {
      imageDpi=designHandle.getImageDPI();
    }
    if (imageDpi <= 0) {
      imageDpi=96;
    }
  }
  retrieveRtLFlag();
  if (null == layoutPreference) {
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
  }
  if (enableAgentStyleEngine) {
    htmlEmitter=new HTMLPerformanceOptimize(this,writer,layoutPreference,enableInlineStyle,browserVersion);
  }
 else {
    htmlEmitter=new HTMLVisionOptimize(this,writer,layoutPreference,enableInlineStyle,htmlRtLFlag,browserVersion);
  }
  if (isEmbeddable) {
    outputCSSStyles(reportDesign,designHandle);
    fixTransparentPNG();
    fixRedirect();
    openRootTag();
    writeBidiFlag();
    if (report != null) {
      String defaultStyleName=report.getDesign().getRootStyleName();
      if (defaultStyleName != null) {
        if (enableInlineStyle) {
          StringBuffer defaultStyleBuffer=new StringBuffer();
          IStyle defaultStyle=report.findStyle(defaultStyleName);
          htmlEmitter.buildDefaultStyle(defaultStyleBuffer,defaultStyle);
          if (defaultStyleBuffer.length() > 0) {
            writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
          }
        }
 else {
          if (htmlIDNamespace != null) {
            writer.attribute(HTMLTags.ATTR_CLASS,htmlIDNamespace + defaultStyleName);
          }
 else {
            writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
          }
        }
      }
    }
    return;
  }
  openRootTag();
  writeBidiFlag();
  writer.openTag(HTMLTags.TAG_HEAD);
  outputReportTitle(designHandle);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_META);
  outputCSSStyles(reportDesign,designHandle);
  fixTransparentPNG();
  fixRedirect();
  writer.closeTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_BODY);
  StringBuffer defaultStyleBuffer=new StringBuffer();
  if (report != null) {
    String defaultStyleName=report.getDesign().getRootStyleName();
    if (defaultStyleName != null) {
      if (enableInlineStyle) {
        IStyle defaultStyle=report.findStyle(defaultStyleName);
        htmlEmitter.buildDefaultStyle(defaultStyleBuffer,defaultStyle);
      }
 else {
        if (htmlIDNamespace != null) {
          writer.attribute(HTMLTags.ATTR_CLASS,htmlIDNamespace + defaultStyleName);
        }
 else {
          writer.attribute(HTMLTags.ATTR_CLASS,defaultStyleName);
        }
      }
    }
  }
  if (outputMasterPageContent) {
    defaultStyleBuffer.append(""String_Node_Str"");
  }
  if (defaultStyleBuffer.length() > 0) {
    writer.attribute(HTMLTags.ATTR_STYLE,defaultStyleBuffer.toString());
  }
}",0.9959753152669708
69803,"public void initialize(IEmitterServices services) throws EngineException {
  this.services=services;
  this.out=EmitterUtil.getOuputStream(services,REPORT_FILE);
  Object emitterConfig=services.getEmitterConfig().get(""String_Node_Str"");
  if (emitterConfig != null && emitterConfig instanceof HTMLEmitterConfig) {
    imageHandler=((HTMLEmitterConfig)emitterConfig).getImageHandler();
    actionHandler=((HTMLEmitterConfig)emitterConfig).getActionHandler();
  }
  Object im=services.getOption(HTMLRenderOption.IMAGE_HANDLER);
  if (im != null && im instanceof IHTMLImageHandler) {
    imageHandler=(IHTMLImageHandler)im;
  }
  Object ac=services.getOption(HTMLRenderOption.ACTION_HANDLER);
  if (ac != null && ac instanceof IHTMLActionHandler) {
    actionHandler=(IHTMLActionHandler)ac;
  }
  reportContext=services.getReportContext();
  renderOption=services.getRenderOption();
  runnable=services.getReportRunnable();
  writer=creatWriter();
  if (renderOption != null) {
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
    isEmbeddable=htmlOption.getEmbeddable();
    Map options=renderOption.getOutputSetting();
    if (options != null) {
      urlEncoding=(String)options.get(HTMLRenderOption.URL_ENCODING);
    }
    outputMasterPageContent=htmlOption.getMasterPageContent();
    IHTMLActionHandler actHandler=htmlOption.getActionHandle();
    if (ac != null) {
      actionHandler=actHandler;
    }
    pageFooterFloatFlag=htmlOption.getPageFooterFloatFlag();
    enableMetadata=htmlOption.getEnableMetadata();
    if (enableMetadata) {
      metadataFilter=htmlOption.getMetadataFilter();
      if (metadataFilter == null) {
        metadataFilter=new MetadataFilter();
      }
    }
    ouputInstanceIDs=htmlOption.getInstanceIDs();
    metadataEmitter=creatMetadataEmitter(writer,htmlOption);
    layoutPreference=htmlOption.getLayoutPreference();
    enableAgentStyleEngine=htmlOption.getEnableAgentStyleEngine();
    outputMasterPageMargins=htmlOption.getOutputMasterPageMargins();
    htmlIDNamespace=htmlOption.getHTMLIDNamespace();
    if (null != htmlIDNamespace) {
      if (htmlIDNamespace.length() > 0) {
        htmlIDNamespace+=""String_Node_Str"";
        metadataEmitter.setHTMLIDNamespace(htmlIDNamespace);
      }
 else {
        htmlIDNamespace=null;
      }
    }
    writer.setIndent(htmlOption.getHTMLIndent());
    if (isEmbeddable) {
      enableInlineStyle=htmlOption.getEnableInlineStyle();
    }
  }
}","public void initialize(IEmitterServices services) throws EngineException {
  this.services=services;
  this.out=EmitterUtil.getOuputStream(services,REPORT_FILE);
  Object emitterConfig=services.getEmitterConfig().get(""String_Node_Str"");
  if (emitterConfig != null && emitterConfig instanceof HTMLEmitterConfig) {
    imageHandler=((HTMLEmitterConfig)emitterConfig).getImageHandler();
    actionHandler=((HTMLEmitterConfig)emitterConfig).getActionHandler();
  }
  Object im=services.getOption(HTMLRenderOption.IMAGE_HANDLER);
  if (im != null && im instanceof IHTMLImageHandler) {
    imageHandler=(IHTMLImageHandler)im;
  }
  Object ac=services.getOption(HTMLRenderOption.ACTION_HANDLER);
  if (ac != null && ac instanceof IHTMLActionHandler) {
    actionHandler=(IHTMLActionHandler)ac;
  }
  reportContext=services.getReportContext();
  renderOption=services.getRenderOption();
  runnable=services.getReportRunnable();
  writer=creatWriter();
  if (renderOption != null) {
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
    isEmbeddable=htmlOption.getEmbeddable();
    Map options=renderOption.getOutputSetting();
    if (options != null) {
      urlEncoding=(String)options.get(HTMLRenderOption.URL_ENCODING);
    }
    outputMasterPageContent=htmlOption.getMasterPageContent();
    IHTMLActionHandler actHandler=htmlOption.getActionHandle();
    if (ac != null) {
      actionHandler=actHandler;
    }
    pageFooterFloatFlag=htmlOption.getPageFooterFloatFlag();
    enableMetadata=htmlOption.getEnableMetadata();
    if (enableMetadata) {
      metadataFilter=htmlOption.getMetadataFilter();
      if (metadataFilter == null) {
        metadataFilter=new MetadataFilter();
      }
    }
    ouputInstanceIDs=htmlOption.getInstanceIDs();
    metadataEmitter=creatMetadataEmitter(writer,htmlOption);
    layoutPreference=htmlOption.getLayoutPreference();
    enableAgentStyleEngine=htmlOption.getEnableAgentStyleEngine();
    outputMasterPageMargins=htmlOption.getOutputMasterPageMargins();
    htmlIDNamespace=htmlOption.getHTMLIDNamespace();
    if (null != htmlIDNamespace) {
      if (htmlIDNamespace.length() > 0) {
        htmlIDNamespace+=""String_Node_Str"";
        metadataEmitter.setHTMLIDNamespace(htmlIDNamespace);
      }
 else {
        htmlIDNamespace=null;
      }
    }
    writer.setIndent(htmlOption.getHTMLIndent());
    if (isEmbeddable) {
      enableInlineStyle=htmlOption.getEnableInlineStyle();
    }
    browserVersion=HTMLEmitterUtil.getBrowserVersion(htmlOption.getUserAgent());
  }
}",0.983764281419122
69804,"public HTMLVisionOptimize(HTMLReportEmitter reportEmitter,HTMLWriter writer,String layoutPreference,boolean enableInlineStyle,boolean htmlRtLFlag){
  super(reportEmitter,writer,layoutPreference,enableInlineStyle);
  this.htmlRtLFlag=htmlRtLFlag;
}","public HTMLVisionOptimize(HTMLReportEmitter reportEmitter,HTMLWriter writer,String layoutPreference,boolean enableInlineStyle,boolean htmlRtLFlag,int browserVersion){
  super(reportEmitter,writer,layoutPreference,enableInlineStyle,browserVersion);
  this.htmlRtLFlag=htmlRtLFlag;
}",0.9356060606060606
69805,"/** 
 * @param dataSet
 * @param inputParamBindings
 * @param columnBindings
 * @param boundColumnName
 * @param requestInfo
 * @return
 * @throws BirtException
 */
private IColumnValueIterator getColumnValueIterator(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  ArrayList temp=new ArrayList();
  while (columnBindings != null && columnBindings.hasNext()) {
    Object nextBinding=columnBindings.next();
    IBinding binding=this.modelAdaptor.adaptBinding((ComputedColumnHandle)nextBinding);
    if (binding.getAggrFunction() == null)     temp.add(nextBinding);
  }
  IQueryResults queryResults=getQueryResults(dataSet,inputParamBindings,temp.iterator(),boundColumnName);
  return new ColumnValueIterator(queryResults,boundColumnName,requestInfo);
}","/** 
 * @param dataSet
 * @param inputParamBindings
 * @param columnBindings
 * @param boundColumnName
 * @param requestInfo
 * @return
 * @throws BirtException
 */
private IColumnValueIterator getColumnValueIterator(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  ArrayList temp=new ArrayList();
  while (columnBindings != null && columnBindings.hasNext()) {
    Object nextBinding=columnBindings.next();
    IBinding binding=this.modelAdaptor.adaptBinding((ComputedColumnHandle)nextBinding);
    if (binding.getAggregatOns() == null || binding.getAggregatOns().size() == 0)     temp.add(nextBinding);
  }
  IQueryResults queryResults=getQueryResults(dataSet,inputParamBindings,temp.iterator(),boundColumnName);
  return new ColumnValueIterator(queryResults,boundColumnName,requestInfo);
}",0.9684089603676048
69806,"/** 
 * Outputs the flash.
 * @param ele
 * @param cssStyles
 * @param content
 */
protected static void outputFlash(Element ele,Map cssStyles,IContent content){
  String src=ele.getAttribute(""String_Node_Str"");
  if (src != null) {
    ObjectContent flash=(ObjectContent)((ReportContent)(content.getReportContent())).createObjectContent();
    flash.setExtension(""String_Node_Str"");
    flash.setMIMEType(""String_Node_Str"");
    addChild(content,flash);
    handleStyle(ele,cssStyles,flash);
    if (!FileUtil.isLocalResource(src)) {
      flash.setImageSource(IImageContent.IMAGE_URL);
      flash.setURI(src);
    }
 else {
      ReportDesignHandle handle=content.getReportContent().getDesign().getReportDesign();
      URL url=handle.findResource(src,IResourceLocator.IMAGE,content.getReportContent().getReportContext() == null ? null : content.getReportContent().getReportContext().getAppContext());
      if (url != null) {
        src=url.toString();
      }
      flash.setImageSource(IImageContent.IMAGE_FILE);
      flash.setURI(src);
    }
    IForeignContent foreign=getForeignRoot(content);
    if (null != ele.getAttribute(""String_Node_Str"") && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      flash.setWidth(PropertyUtil.getDimensionAttribute(ele,""String_Node_Str""));
    }
 else {
      if (null != foreign)       flash.setWidth(foreign.getWidth());
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      flash.setHeight(PropertyUtil.getDimensionAttribute(ele,""String_Node_Str""));
    }
 else {
      if (null != foreign)       flash.setHeight(foreign.getHeight());
    }
    String flashVars=ele.getAttribute(""String_Node_Str"");
    if (flashVars != null && !""String_Node_Str"".equals(flashVars)) {
      flash.addParam(""String_Node_Str"",flashVars);
    }
    String alt=ele.getAttribute(""String_Node_Str"");
    if (alt != null && !""String_Node_Str"".equals(alt)) {
      flash.setAltText(alt);
    }
  }
}","/** 
 * Outputs the flash.
 * @param ele
 * @param cssStyles
 * @param content
 */
protected static void outputFlash(Element ele,Map cssStyles,IContent content){
  String src=ele.getAttribute(""String_Node_Str"");
  if (src != null) {
    ObjectContent flash=(ObjectContent)((ReportContent)(content.getReportContent())).createObjectContent();
    flash.setExtension(""String_Node_Str"");
    flash.setMIMEType(""String_Node_Str"");
    addChild(content,flash);
    handleStyle(ele,cssStyles,flash);
    if (!FileUtil.isLocalResource(src)) {
      flash.setImageSource(IImageContent.IMAGE_URL);
      flash.setURI(src);
    }
 else {
      ReportDesignHandle handle=content.getReportContent().getDesign().getReportDesign();
      URL url=handle.findResource(src,IResourceLocator.IMAGE,content.getReportContent().getReportContext() == null ? null : content.getReportContent().getReportContext().getAppContext());
      if (url != null) {
        src=url.toString();
      }
      flash.setImageSource(IImageContent.IMAGE_FILE);
      flash.setURI(src);
    }
    IForeignContent foreign=getForeignRoot(content);
    if (null != foreign) {
      flash.setWidth(foreign.getWidth());
      flash.setHeight(foreign.getHeight());
    }
    String flashVars=ele.getAttribute(""String_Node_Str"");
    if (flashVars != null && !""String_Node_Str"".equals(flashVars)) {
      flash.addParam(""String_Node_Str"",flashVars);
    }
    String alt=ele.getAttribute(""String_Node_Str"");
    if (alt != null && !""String_Node_Str"".equals(alt)) {
      flash.setAltText(alt);
    }
  }
}",0.7126886528787032
69807,"/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content,Image image){
  if (image != null) {
    int contentResolution=content.getResolution();
    if (contentResolution != 0) {
      resolutionX=contentResolution;
      resolutionY=contentResolution;
    }
 else {
      resolutionX=image.getDpiX();
      resolutionY=image.getDpiY();
      if (0 == resolutionX || 0 == resolutionY) {
        ReportDesignHandle designHandle=content.getReportContent().getDesign().getReportDesign();
        resolutionX=designHandle.getImageDPI();
        resolutionY=designHandle.getImageDPI();
      }
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=context.getDpi();
        resolutionY=context.getDpi();
      }
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=96;
        resolutionY=96;
      }
    }
    return new Dimension((int)(image.plainWidth() * 1000 / resolutionX * 72),(int)(image.plainHeight() * 1000 / resolutionY * 72));
  }
  return null;
}","/** 
 * get intrinsic dimension of image in pixels. Now only support png, bmp, jpg, gif.
 * @param in
 * @return
 * @throws IOException
 * @throws MalformedURLException
 * @throws BadElementException
 */
protected Dimension getIntrinsicDimension(IImageContent content,Image image){
  if (image != null) {
    int resolutionX=image.getDpiX();
    int resolutionY=image.getDpiY();
    if (0 == resolutionX || 0 == resolutionY) {
      ReportDesignHandle designHandle=content.getReportContent().getDesign().getReportDesign();
      resolutionX=designHandle.getImageDPI();
      resolutionY=designHandle.getImageDPI();
    }
    if (0 == resolutionX || 0 == resolutionY) {
      resolutionX=context.getDpi();
      resolutionY=context.getDpi();
    }
    if (0 == resolutionX || 0 == resolutionY) {
      resolutionX=96;
      resolutionY=96;
    }
    return new Dimension((int)(image.plainWidth() * 1000 / resolutionX * 72),(int)(image.plainHeight() * 1000 / resolutionY * 72));
  }
  return null;
}",0.8719817767653758
69808,"public IBaseResultSet getResultSet(){
  ReportContent reportContent=(ReportContent)report;
  List<IBaseResultSet> resultSet=QueryUtil.getResultSet(reportContent,instanceId);
  return resultSet.get(resultSet.size() - 1);
}","public IBaseResultSet getResultSet(){
  ReportContent reportContent=(ReportContent)report;
  List<IBaseResultSet> resultSets=QueryUtil.getResultSet(reportContent,instanceId);
  if (resultSets == null || resultSets.size() == 0) {
    return null;
  }
  return new BaseResultSetDecorator(resultSets);
}",0.7178502879078695
69809,"private void initOptions(){
  ConfigurableOption wrappingText=new ConfigurableOption(IExcelRenderOption.WRAPPING_TEXT);
  wrappingText.setDisplayName(Messages.getString(""String_Node_Str""));
  wrappingText.setDataType(IConfigurableOption.DataType.BOOLEAN);
  wrappingText.setDisplayType(IConfigurableOption.DispayType.CHECKBOX);
  wrappingText.setDefaultValue(Boolean.TRUE);
  wrappingText.setToolTip(null);
  wrappingText.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{wrappingText};
}","private void initOptions(){
  ConfigurableOption wrappingText=new ConfigurableOption(IExcelRenderOption.WRAPPING_TEXT);
  wrappingText.setDisplayName(Messages.getString(""String_Node_Str""));
  wrappingText.setDataType(IConfigurableOption.DataType.BOOLEAN);
  wrappingText.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  wrappingText.setDefaultValue(Boolean.TRUE);
  wrappingText.setToolTip(null);
  wrappingText.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{wrappingText};
}",0.9990557129367328
69810,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(IPDFRenderOption.PDF_BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DispayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.FALSE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(IPDFRenderOption.PDF_TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DispayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DispayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DispayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(IPDFRenderOption.PDF_BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.FALSE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(IPDFRenderOption.PDF_TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}",0.999165971643036
69811,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(IPDFRenderOption.PDF_BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DispayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.FALSE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(IPDFRenderOption.PDF_TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DispayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DispayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DispayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(IPDFRenderOption.PDF_BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.FALSE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(IPDFRenderOption.PDF_TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}",0.999165971643036
69812,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(IPDFRenderOption.PDF_BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DispayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.FALSE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(IPDFRenderOption.PDF_TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DispayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DispayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DispayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(IPDFRenderOption.PDF_BIDI_PROCESSING);
  bidiProcessing.setDisplayName(Messages.getString(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.FALSE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(IPDFRenderOption.PDF_TEXT_WRAPPING);
  textWrapping.setDisplayName(Messages.getString(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(Messages.getString(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(Messages.getString(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(Messages.getString(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,Messages.getString(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,Messages.getString(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(Messages.getString(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow};
}",0.999165971643036
69813,"public DispayType getDisplayType(){
  return dispayType;
}","public DisplayType getDisplayType(){
  return displayType;
}",0.9830508474576272
69814,"/** 
 * Sets option type.
 * @param dispayType the option type to set.
 */
public void setDisplayType(DispayType dispayType){
  this.dispayType=dispayType;
}","/** 
 * Sets option type.
 * @param displayType the option type to set.
 */
public void setDisplayType(DisplayType displayType){
  this.displayType=displayType;
}",0.9843260188087776
69815,"/** 
 * Constructs a configurable option with the all specified params.
 * @param name the option name.
 * @param dataType the data type.
 * @param dispayType the option type.
 * @param defaultValue the default value.
 * @param choices the chioces list.
 * @param displayName the display name.
 * @param description the option description.
 * @param toolTip the tool tip.
 */
public ConfigurableOption(String name,DataType dataType,DispayType dispayType,Object defaultValue,IOptionValue[] choices,String displayName,String description,String toolTip){
  this(name,dataType,dispayType,defaultValue);
  setChoices(choices);
  setDescription(description);
  setDisplayName(displayName);
  setToolTip(toolTip);
}","/** 
 * Constructs a configurable option with the all specified params.
 * @param name the option name.
 * @param dataType the data type.
 * @param displayType the option type.
 * @param defaultValue the default value.
 * @param choices the chioces list.
 * @param displayName the display name.
 * @param description the option description.
 * @param toolTip the tool tip.
 */
public ConfigurableOption(String name,DataType dataType,DisplayType displayType,Object defaultValue,IOptionValue[] choices,String displayName,String description,String toolTip){
  this(name,dataType,displayType,defaultValue);
  setChoices(choices);
  setDescription(description);
  setDisplayName(displayName);
  setToolTip(toolTip);
}",0.9816901408450704
69816,"/** 
 * Returns the display type of this option.
 */
DispayType getDisplayType();","/** 
 * Returns the display type of this option.
 */
DisplayType getDisplayType();",0.9938650306748468
69817,"/** 
 * @param dataSet
 * @param inputParamBindings
 * @param columnBindings
 * @param boundColumnName
 * @param requestInfo
 * @return
 * @throws BirtException
 */
private IColumnValueIterator getColumnValueIterator(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  ArrayList temp=new ArrayList();
  while (columnBindings != null && columnBindings.hasNext()) {
    temp.add(columnBindings.next());
  }
  IQueryResults queryResults=getQueryResults(dataSet,inputParamBindings,temp.iterator(),boundColumnName);
  return new ColumnValueIterator(queryResults,boundColumnName,requestInfo);
}","/** 
 * @param dataSet
 * @param inputParamBindings
 * @param columnBindings
 * @param boundColumnName
 * @param requestInfo
 * @return
 * @throws BirtException
 */
private IColumnValueIterator getColumnValueIterator(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  ArrayList temp=new ArrayList();
  while (columnBindings != null && columnBindings.hasNext()) {
    IBinding binding=this.modelAdaptor.adaptBinding((ComputedColumnHandle)columnBindings.next());
    if (binding.getAggrFunction() == null)     temp.add(binding);
  }
  IQueryResults queryResults=getQueryResults(dataSet,inputParamBindings,temp.iterator(),boundColumnName);
  return new ColumnValueIterator(queryResults,boundColumnName,requestInfo);
}",0.9043478260869564
69818,"/** 
 * @param dataSet
 * @param inputParamBindings
 * @param columnBindings
 * @param boundColumnName
 * @param requestInfo
 * @return
 * @throws BirtException
 */
private IColumnValueIterator getColumnValueIterator(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  ArrayList temp=new ArrayList();
  while (columnBindings != null && columnBindings.hasNext()) {
    Object nextBinding=columnBindings.next();
    IBinding binding=this.modelAdaptor.adaptBinding((ComputedColumnHandle)nextBinding);
    if (binding.getAggregatOns() == null || binding.getAggregatOns().size() == 0)     temp.add(nextBinding);
  }
  IQueryResults queryResults=getQueryResults(dataSet,inputParamBindings,temp.iterator(),boundColumnName);
  return new ColumnValueIterator(queryResults,boundColumnName,requestInfo);
}","/** 
 * @param dataSet
 * @param inputParamBindings
 * @param columnBindings
 * @param boundColumnName
 * @param requestInfo
 * @return
 * @throws BirtException
 */
private IColumnValueIterator getColumnValueIterator(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  ArrayList temp=new ArrayList();
  while (columnBindings != null && columnBindings.hasNext()) {
    Object nextBinding=columnBindings.next();
    IBinding binding=this.modelAdaptor.adaptBinding((ComputedColumnHandle)nextBinding);
    if (binding.getAggrFunction() == null || binding.getAggregatOns() == null || binding.getAggregatOns().size() == 0)     temp.add(nextBinding);
  }
  IQueryResults queryResults=getQueryResults(dataSet,inputParamBindings,temp.iterator(),boundColumnName);
  return new ColumnValueIterator(queryResults,boundColumnName,requestInfo);
}",0.9719317556411669
69819,"public void add(AbstractArea area){
  super.add(area);
  if (repeatList != null) {
    IContent content=((ContainerArea)area).getContent();
    if (content != null) {
      IElement parent=content.getParent();
      if (parent != null && parent instanceof IBandContent) {
        int type=((IBandContent)parent).getBandType();
        if (type == IBandContent.BAND_HEADER || type == IBandContent.BAND_GROUP_HEADER) {
          if (content instanceof IRowContent) {
            RowDesign rowDesign=(RowDesign)content.getGenerateBy();
            if (rowDesign != null && rowDesign.getRepeatable()) {
              repeatList.add(area);
            }
          }
 else {
            repeatList.add(area);
          }
        }
      }
    }
  }
}","public void add(AbstractArea area){
  super.add(area);
  if (repeatList != null) {
    IContent content=((ContainerArea)area).getContent();
    if (content != null) {
      IElement parent=content.getParent();
      if (parent != null && parent instanceof IBandContent) {
        int type=((IBandContent)parent).getBandType();
        if (type == IBandContent.BAND_HEADER || type == IBandContent.BAND_GROUP_HEADER) {
          if (content instanceof IRowContent) {
            RowDesign rowDesign=(RowDesign)content.getGenerateBy();
            if (rowDesign == null || rowDesign.getRepeatable()) {
              repeatList.add(area);
            }
          }
 else {
            repeatList.add(area);
          }
        }
      }
    }
  }
}",0.995967741935484
69820,"public synchronized void run(){
  try {
    Map<ConnectionProp,Set<CacheConnection>> odaConnectionsMap=DataSource.dataEngineLevelConnectionPool.remove(session);
    if (odaConnectionsMap == null)     return;
    for (    Set<CacheConnection> set : odaConnectionsMap.values()) {
      for (      CacheConnection conn : set) {
        try {
          conn.odaConn.close();
        }
 catch (        DataException e) {
          e.printStackTrace();
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(){
  try {
synchronized (DataSource.dataEngineLevelConnectionPool) {
      Map<ConnectionProp,Set<CacheConnection>> odaConnectionsMap=DataSource.dataEngineLevelConnectionPool.remove(session);
      if (odaConnectionsMap == null)       return;
      for (      Set<CacheConnection> set : odaConnectionsMap.values()) {
        for (        CacheConnection conn : set) {
          try {
            conn.odaConn.close();
          }
 catch (          DataException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8939526730937774
69821,"public void testCSSStyleClass() throws EngineException, IOException {
  HTMLRenderOption options=new HTMLRenderOption();
  options.setEmbeddable(true);
  options.setEnableInlineStyle(false);
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  List instanceIDs=new ArrayList();
  options.setInstanceIDs(instanceIDs);
  options.setOutputStream(output);
  IRenderTask task=createRenderTask(designFile);
  task.setRenderOption(options);
  task.render();
  task.close();
  String content=new String(output.toByteArray());
  output.close();
  String regex=""String_Node_Str"";
  Matcher matcher=Pattern.compile(regex).matcher(content);
  assertEquals(true,matcher.find());
  regex=""String_Node_Str"";
  matcher=Pattern.compile(regex).matcher(content);
  assertEquals(true,matcher.find());
  regex=""String_Node_Str"";
  matcher=Pattern.compile(regex).matcher(content);
  assertEquals(false,matcher.find());
}","public void testCSSStyleClass() throws EngineException, IOException {
  HTMLRenderOption options=new HTMLRenderOption();
  options.setEmbeddable(true);
  options.setEnableInlineStyle(false);
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  List instanceIDs=new ArrayList();
  options.setInstanceIDs(instanceIDs);
  options.setOutputStream(output);
  IRenderTask task=createRenderTask(designFile);
  task.setRenderOption(options);
  task.render();
  task.close();
  String content=new String(output.toByteArray());
  output.close();
  String regex=""String_Node_Str"";
  Matcher matcher=Pattern.compile(regex).matcher(content);
  assertEquals(true,matcher.find());
  regex=""String_Node_Str"";
  matcher=Pattern.compile(regex).matcher(content);
  assertEquals(false,matcher.find());
  regex=""String_Node_Str"";
  matcher=Pattern.compile(regex).matcher(content);
  assertEquals(false,matcher.find());
}",0.9961432506887052
69822,"public ApplicationClassLoader run(){
  return new ApplicationClassLoader(engine,getOnPreparedRunnable(),null);
}","public ApplicationClassLoader run(){
  return new ApplicationClassLoader(engine,getOnPreparedRunnable(),engine.getConfig().getAppContext());
}",0.8582677165354331
69823,"public ClassLoader getClassLoader(){
  if (applicationClassLoader != null) {
    return applicationClassLoader;
  }
synchronized (this) {
    if (applicationClassLoader == null) {
      applicationClassLoader=AccessController.doPrivileged(new PrivilegedAction<ApplicationClassLoader>(){
        public ApplicationClassLoader run(){
          return new ApplicationClassLoader(engine,getOnPreparedRunnable(),null);
        }
      }
);
    }
  }
  return applicationClassLoader;
}","public ClassLoader getClassLoader(){
  if (applicationClassLoader != null) {
    return applicationClassLoader;
  }
synchronized (this) {
    if (applicationClassLoader == null) {
      applicationClassLoader=AccessController.doPrivileged(new PrivilegedAction<ApplicationClassLoader>(){
        public ApplicationClassLoader run(){
          return new ApplicationClassLoader(engine,getOnPreparedRunnable(),engine.getConfig().getAppContext());
        }
      }
);
    }
  }
  return applicationClassLoader;
}",0.9615384615384616
69824,"/** 
 * create the class loader used by the design. the method should be synchronized as the class loader of a document may be used by multiple tasks.
 */
protected synchronized void createDesignClassLoader(){
  if (designClassLoader != null) {
    return;
  }
  ArrayList<URL> urls=new ArrayList<URL>();
  if (runnable != null) {
    ModuleHandle module=(ModuleHandle)runnable.getDesignHandle();
    Iterator iter=module.scriptLibsIterator();
    while (iter.hasNext()) {
      ScriptLibHandle lib=(ScriptLibHandle)iter.next();
      String libPath=lib.getName();
      URL url=module.findResource(libPath,IResourceLocator.LIBRARY,executionContext.getAppContext());
      if (url != null) {
        urls.add(url);
      }
 else {
        if (executionContext != null) {
          executionContext.addException(new EngineException(MessageConstants.JAR_NOT_FOUND_ERROR,libPath));
        }
        logger.log(Level.SEVERE,""String_Node_Str"" + libPath);
      }
    }
  }
  URL[] jarUrls=(URL[])urls.toArray(new URL[]{});
  if (engine != null) {
    designClassLoader=new URLClassLoader(jarUrls,engine.getEngineClassLoader());
  }
 else {
    designClassLoader=new URLClassLoader(jarUrls);
  }
}","/** 
 * create the class loader used by the design. the method should be synchronized as the class loader of a document may be used by multiple tasks.
 */
protected synchronized void createDesignClassLoader(){
  if (designClassLoader != null) {
    return;
  }
  ArrayList<URL> urls=new ArrayList<URL>();
  if (runnable != null) {
    ModuleHandle module=(ModuleHandle)runnable.getDesignHandle();
    Iterator iter=module.scriptLibsIterator();
    while (iter.hasNext()) {
      ScriptLibHandle lib=(ScriptLibHandle)iter.next();
      String libPath=lib.getName();
      URL url=module.findResource(libPath,IResourceLocator.LIBRARY,appContext);
      if (url != null) {
        urls.add(url);
      }
 else {
        logger.log(Level.SEVERE,""String_Node_Str"" + libPath);
      }
    }
  }
  URL[] jarUrls=(URL[])urls.toArray(new URL[]{});
  if (engine != null) {
    designClassLoader=new URLClassLoader(jarUrls,engine.getEngineClassLoader());
  }
 else {
    designClassLoader=new URLClassLoader(jarUrls);
  }
}",0.9174228675136116
69825,"public ApplicationClassLoader(ReportEngine engine,IReportRunnable reportRunnable,ExecutionContext executionContext){
  this.runnable=reportRunnable;
  this.engine=engine;
  this.executionContext=executionContext;
}","public ApplicationClassLoader(ReportEngine engine,IReportRunnable reportRunnable,Map<String,Object> appContext){
  this.runnable=reportRunnable;
  this.engine=engine;
  this.appContext=appContext;
}",0.8446601941747572
69826,"/** 
 * return application class loader. The application class loader is used to load the report item event handle and  java classes called in the javascript.
 * @return class loader
 */
public ClassLoader getApplicationClassLoader(){
  if (applicationClassLoader == null) {
    closeClassLoader=true;
    applicationClassLoader=new ApplicationClassLoader(engine,runnable,this);
    if (scriptContext != null) {
      scriptContext.setApplicationClassLoader(applicationClassLoader);
    }
  }
  return applicationClassLoader;
}","/** 
 * return application class loader. The application class loader is used to load the report item event handle and  java classes called in the javascript.
 * @return class loader
 */
public ClassLoader getApplicationClassLoader(){
  if (applicationClassLoader == null) {
    closeClassLoader=true;
    applicationClassLoader=new ApplicationClassLoader(engine,runnable,appContext);
    if (scriptContext != null) {
      scriptContext.setApplicationClassLoader(applicationClassLoader);
    }
  }
  return applicationClassLoader;
}",0.9867924528301888
69827,"/** 
 * Puts container's child areas into the visual (display) order and repositions them following that order horizontally.
 * @author Lina Kemmel
 */
private void reorderVisually(ContainerArea parent){
  int n=parent.getChildrenCount();
  if (n == 0)   return;
  int i=0;
  AbstractArea[] areas=new AbstractArea[n];
  byte[] levels=new byte[n];
  Iterator<?> iter=parent.getChildren();
  for (; i < n && iter.hasNext(); i++) {
    AbstractArea area=(AbstractArea)iter.next();
    areas[i]=area;
    if (area instanceof TextArea)     levels[i]=(byte)((TextArea)area).getRunLevel();
 else {
      levels[i]=baseLevel;
      if (area instanceof ContainerArea) {
        reorderVisually((ContainerArea)area);
      }
    }
  }
  if (n > 1) {
    int x=areas[0].getAllocatedX();
    Bidi.reorderVisually(levels,0,areas,0,n);
    for (i=0; i < n - 1; i++) {
      areas[i].setAllocatedPosition(x,areas[i].getAllocatedY());
      x+=areas[i].getAllocatedWidth();
    }
    areas[i].setAllocatedPosition(x,areas[i].getAllocatedY());
  }
}","/** 
 * Puts container's child areas into the visual (display) order and repositions them following that order horizontally.
 * @author Lina Kemmel
 */
private void reorderVisually(ContainerArea parent){
  int n=parent.getChildrenCount();
  if (n == 0)   return;
  int i=0;
  AbstractArea[] areas=new AbstractArea[n];
  byte[] levels=new byte[n];
  Iterator<?> iter=parent.getChildren();
  for (; i < n && iter.hasNext(); i++) {
    AbstractArea area=(AbstractArea)iter.next();
    areas[i]=area;
    if (area instanceof TextArea)     levels[i]=(byte)((TextArea)area).getRunLevel();
 else {
      levels[i]=baseLevel;
      if (area instanceof InlineStackingArea) {
        reorderVisually((ContainerArea)area);
      }
    }
  }
  if (n > 1) {
    int x=areas[0].getAllocatedX();
    Bidi.reorderVisually(levels,0,areas,0,n);
    for (i=0; i < n - 1; i++) {
      areas[i].setAllocatedPosition(x,areas[i].getAllocatedY());
      x+=areas[i].getAllocatedWidth();
    }
    areas[i].setAllocatedPosition(x,areas[i].getAllocatedY());
  }
}",0.9888835186080231
69828,"/** 
 * Sets the <code>'class'</code> property and stores the style to styleMap object.
 * @param styleClass the style name
 */
protected void setStyleName(String styleClass,IContent content){
  StringBuffer classBuffer=new StringBuffer();
  if (enableMetadata) {
    String metadataStyleClass=metadataEmitter.getMetadataStyleClass(content);
    if (null != metadataStyleClass) {
      classBuffer.append(metadataStyleClass);
    }
  }
  if (!enableInlineStyle && styleClass != null && styleClass.length() > 0) {
    String[] strings=styleClass.split(""String_Node_Str"");
    for (    String string : strings) {
      string=string.trim();
      if (string.length() > 0) {
        if (classBuffer.length() > 0) {
          classBuffer.append(' ');
        }
        if (null != htmlIDNamespace) {
          classBuffer.append(htmlIDNamespace);
        }
        classBuffer.append(string);
      }
    }
  }
  if (hasCsslinks) {
    Object genBy=content.getGenerateBy();
    if (genBy instanceof StyledElementDesign) {
      DesignElementHandle handle=((StyledElementDesign)genBy).getHandle();
      if (handle != null) {
        String name=handle.getStringProperty(ReportItemHandle.STYLE_PROP);
        if (name != null) {
          if (classBuffer.length() != 0) {
            classBuffer.append(""String_Node_Str"" + name);
          }
 else {
            classBuffer.append(name);
          }
        }
      }
    }
  }
  if (classBuffer.length() != 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,classBuffer.toString());
  }
}","/** 
 * Sets the <code>'class'</code> property and stores the style to styleMap object.
 * @param styleName the style name
 */
protected void setStyleName(String styleName,IContent content){
  StringBuffer classBuffer=new StringBuffer();
  if (enableMetadata) {
    String metadataStyleClass=metadataEmitter.getMetadataStyleClass(content);
    if (null != metadataStyleClass) {
      classBuffer.append(metadataStyleClass);
    }
  }
  if (!enableInlineStyle && styleName != null && styleName.length() > 0) {
    if (outputtedStyles.contains(styleName)) {
      if (classBuffer.length() != 0) {
        classBuffer.append(""String_Node_Str"");
      }
      if (null != htmlIDNamespace) {
        classBuffer.append(htmlIDNamespace);
      }
      classBuffer.append(styleName);
    }
  }
  if (hasCsslinks) {
    Object genBy=content.getGenerateBy();
    if (genBy instanceof StyledElementDesign) {
      DesignElementHandle handle=((StyledElementDesign)genBy).getHandle();
      if (handle != null) {
        String name=handle.getStringProperty(ReportItemHandle.STYLE_PROP);
        if (name != null) {
          if (classBuffer.length() != 0) {
            classBuffer.append(""String_Node_Str"" + name);
          }
 else {
            classBuffer.append(name);
          }
        }
      }
    }
  }
  if (classBuffer.length() != 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,classBuffer.toString());
  }
}",0.8563648740639891
69829,"private void outputCSSStyles(Report reportDesign,ReportDesignHandle designHandle){
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    if (!enableInlineStyle) {
      writer.openTag(HTMLTags.TAG_STYLE);
      writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
      String styleNamePrefix;
      if (null != htmlIDNamespace) {
        styleNamePrefix=""String_Node_Str"" + htmlIDNamespace;
      }
 else {
        styleNamePrefix=""String_Node_Str"";
      }
      String defaultStyleName=reportDesign.getRootStyleName();
      Map styles=reportDesign.getStyles();
      Iterator iter=styles.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry entry=(Map.Entry)iter.next();
        String styleName=(String)entry.getKey();
        if (styleName != null) {
          IStyle style=(IStyle)entry.getValue();
          StringBuffer styleBuffer=new StringBuffer();
          if (styleName.equals(defaultStyleName)) {
            htmlEmitter.buildDefaultStyle(styleBuffer,style);
          }
 else {
            htmlEmitter.buildStyle(styleBuffer,style);
          }
          if (styleBuffer.length() > 0) {
            writer.style(styleNamePrefix + styleName,styleBuffer.toString());
          }
        }
      }
      writer.closeTag(HTMLTags.TAG_STYLE);
    }
  }
  hasCsslinks=false;
  if (designHandle != null) {
    List externalCsses=designHandle.getAllExternalIncludedCsses();
    if (null != externalCsses) {
      Iterator iter=externalCsses.iterator();
      while (iter.hasNext()) {
        IncludedCssStyleSheetHandle cssStyleSheetHandle=(IncludedCssStyleSheetHandle)iter.next();
        String href=cssStyleSheetHandle.getExternalCssURI();
        if (href != null) {
          hasCsslinks=true;
          writer.openTag(HTMLTags.TAG_LINK);
          writer.attribute(HTMLTags.ATTR_REL,""String_Node_Str"");
          writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
          writer.attribute(HTMLTags.ATTR_HREF,href);
          writer.closeTag(HTMLTags.TAG_LINK);
        }
      }
    }
  }
}","private void outputCSSStyles(Report reportDesign,ReportDesignHandle designHandle){
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    if (!enableInlineStyle) {
      writer.openTag(HTMLTags.TAG_STYLE);
      writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
      String styleNamePrefix;
      if (null != htmlIDNamespace) {
        styleNamePrefix=""String_Node_Str"" + htmlIDNamespace;
      }
 else {
        styleNamePrefix=""String_Node_Str"";
      }
      String defaultStyleName=reportDesign.getRootStyleName();
      Map styles=reportDesign.getStyles();
      Iterator iter=styles.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry entry=(Map.Entry)iter.next();
        String styleName=(String)entry.getKey();
        if (styleName != null) {
          IStyle style=(IStyle)entry.getValue();
          StringBuffer styleBuffer=new StringBuffer();
          if (styleName.equals(defaultStyleName)) {
            htmlEmitter.buildDefaultStyle(styleBuffer,style);
          }
 else {
            htmlEmitter.buildStyle(styleBuffer,style);
          }
          if (styleBuffer.length() > 0) {
            writer.style(styleNamePrefix + styleName,styleBuffer.toString());
            outputtedStyles.add(styleName);
          }
        }
      }
      writer.closeTag(HTMLTags.TAG_STYLE);
    }
  }
  hasCsslinks=false;
  if (designHandle != null) {
    List externalCsses=designHandle.getAllExternalIncludedCsses();
    if (null != externalCsses) {
      Iterator iter=externalCsses.iterator();
      while (iter.hasNext()) {
        IncludedCssStyleSheetHandle cssStyleSheetHandle=(IncludedCssStyleSheetHandle)iter.next();
        String href=cssStyleSheetHandle.getExternalCssURI();
        if (href != null) {
          hasCsslinks=true;
          writer.openTag(HTMLTags.TAG_LINK);
          writer.attribute(HTMLTags.ATTR_REL,""String_Node_Str"");
          writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
          writer.attribute(HTMLTags.ATTR_HREF,href);
          writer.closeTag(HTMLTags.TAG_LINK);
        }
      }
    }
  }
}",0.989478718316595
69830,"/** 
 * Test get/setStyle methods set the style then get it to test if they work correctly
 */
public void testBaseStyle(){
  ((StyledElementDesign)element).setStyleClass(""String_Node_Str"");
  assertEquals(""String_Node_Str"",((StyledElementDesign)element).getStyleClass());
}","/** 
 * Test get/setStyle methods set the style then get it to test if they work correctly
 */
public void testBaseStyle(){
  ((StyledElementDesign)element).setStyleName(""String_Node_Str"");
  assertEquals(""String_Node_Str"",((StyledElementDesign)element).getStyleName());
}",0.967032967032967
69831,"/** 
 * test if the shared style is same. Two element use the same shared style, so those two elements should have same style properties.
 */
public void testSharedStyle(){
  GridItemDesign grid=(GridItemDesign)report.getContent(0);
  IStyle style=grid.getStyle();
  assertEquals(style.getColor(),""String_Node_Str"");
  assertEquals(style.getBorderBottomStyle(),""String_Node_Str"");
  RowDesign row=grid.getRow(0);
  style=row.getStyle();
  assertEquals(style.getColor(),""String_Node_Str"");
  assertEquals(style.getBorderBottomStyle(),""String_Node_Str"");
  CellDesign cell=row.getCell(0);
  style=cell.getStyle();
  assertEquals(style.getColor(),""String_Node_Str"");
  assertEquals(style.getFontSize(),""String_Node_Str"");
  assertEquals(style.getBorderBottomStyle(),""String_Node_Str"");
  LabelItemDesign label=(LabelItemDesign)cell.getContent(0);
  assertTrue(label.getStyleClass() == null);
}","/** 
 * test if the shared style is same. Two element use the same shared style, so those two elements should have same style properties.
 */
public void testSharedStyle(){
  GridItemDesign grid=(GridItemDesign)report.getContent(0);
  IStyle style=report.findStyle(grid.getStyleName());
  assertEquals(style.getColor(),""String_Node_Str"");
  assertEquals(style.getBorderBottomStyle(),""String_Node_Str"");
  RowDesign row=grid.getRow(0);
  style=report.findStyle(row.getStyleName());
  assertEquals(style.getColor(),""String_Node_Str"");
  assertEquals(style.getBorderBottomStyle(),""String_Node_Str"");
  CellDesign cell=row.getCell(0);
  style=report.findStyle(cell.getStyleName());
  assertEquals(style.getColor(),""String_Node_Str"");
  assertEquals(style.getFontSize(),""String_Node_Str"");
  assertEquals(style.getBorderBottomStyle(),""String_Node_Str"");
  LabelItemDesign label=(LabelItemDesign)cell.getContent(0);
  assertTrue(label.getStyleName() == null);
}",0.9420054200542004
69832,"protected void writeFields(DataOutputStream out) throws IOException {
  if (name != null) {
    IOUtil.writeShort(out,FIELD_NAME);
    IOUtil.writeString(out,name);
  }
  if (x != null) {
    IOUtil.writeShort(out,FIELD_X);
    x.writeObject(out);
  }
  if (y != null) {
    IOUtil.writeShort(out,FIELD_Y);
    y.writeObject(out);
  }
  if (width != null) {
    IOUtil.writeShort(out,FIELD_WIDTH);
    width.writeObject(out);
  }
  if (height != null) {
    IOUtil.writeShort(out,FIELD_HEIGHT);
    height.writeObject(out);
  }
  if (hyperlink != null) {
    IOUtil.writeShort(out,FIELD_HYPERLINK);
    ((ActionContent)hyperlink).writeObject(out);
  }
  if (bookmark != null) {
    IOUtil.writeShort(out,FIELD_BOOKMARK);
    IOUtil.writeString(out,bookmark);
  }
  if (helpText != null) {
    IOUtil.writeShort(out,FIELD_HELPTEXT);
    IOUtil.writeString(out,helpText);
  }
  if (inlineStyle != null) {
    if (!inlineStyle.isEmpty()) {
      IOUtil.writeShort(out,FIELD_INLINESTYLE_VERSION_1);
      inlineStyle.write(out);
    }
  }
  if (classStyle != null && !classStyle.isEmpty()) {
    IOUtil.writeShort(out,FIELD_CLASS_STYLE);
    classStyle.write(out);
  }
  if (instanceId != null) {
    IOUtil.writeShort(out,FIELD_INSTANCE_ID);
    IOUtil.writeString(out,instanceId.toString());
  }
  if (toc != null) {
    IOUtil.writeShort(out,FIELD_TOC);
    IOUtil.writeObject(out,toc);
  }
  if (acl != null) {
    IOUtil.writeShort(out,FIELD_ACL);
    IOUtil.writeObject(out,acl);
  }
}","protected void writeFields(DataOutputStream out) throws IOException {
  if (name != null) {
    IOUtil.writeShort(out,FIELD_NAME);
    IOUtil.writeString(out,name);
  }
  if (x != null) {
    IOUtil.writeShort(out,FIELD_X);
    x.writeObject(out);
  }
  if (y != null) {
    IOUtil.writeShort(out,FIELD_Y);
    y.writeObject(out);
  }
  if (width != null) {
    IOUtil.writeShort(out,FIELD_WIDTH);
    width.writeObject(out);
  }
  if (height != null) {
    IOUtil.writeShort(out,FIELD_HEIGHT);
    height.writeObject(out);
  }
  if (hyperlink != null) {
    IOUtil.writeShort(out,FIELD_HYPERLINK);
    ((ActionContent)hyperlink).writeObject(out);
  }
  if (bookmark != null) {
    IOUtil.writeShort(out,FIELD_BOOKMARK);
    IOUtil.writeString(out,bookmark);
  }
  if (helpText != null) {
    IOUtil.writeShort(out,FIELD_HELPTEXT);
    IOUtil.writeString(out,helpText);
  }
  if (inlineStyle != null) {
    if (!inlineStyle.isEmpty()) {
      IOUtil.writeShort(out,FIELD_INLINESTYLE_VERSION_1);
      inlineStyle.write(out);
    }
  }
  if (instanceId != null) {
    IOUtil.writeShort(out,FIELD_INSTANCE_ID);
    IOUtil.writeString(out,instanceId.toString());
  }
  if (toc != null) {
    IOUtil.writeShort(out,FIELD_TOC);
    IOUtil.writeObject(out,toc);
  }
  if (acl != null) {
    IOUtil.writeShort(out,FIELD_ACL);
    IOUtil.writeObject(out,acl);
  }
}",0.9542897327707456
69833,"public String getStyleClass(){
  if (styleClass != null) {
    return styleClass;
  }
  if (generateBy instanceof StyledElementDesign) {
    return ((StyledElementDesign)generateBy).getStyleClass();
  }
  return null;
}","public String getStyleClass(){
  if (styleClass != null) {
    return styleClass;
  }
  if (generateBy instanceof StyledElementDesign) {
    return ((StyledElementDesign)generateBy).getStyleName();
  }
  return null;
}",0.9794050343249427
69834,"protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_NAME:
    name=IOUtil.readString(in);
  break;
case FIELD_X:
x=new DimensionType();
x.readObject(in);
break;
case FIELD_Y:
y=new DimensionType();
y.readObject(in);
break;
case FIELD_WIDTH:
width=new DimensionType();
width.readObject(in);
break;
case FIELD_HEIGHT:
height=new DimensionType();
height.readObject(in);
break;
case FIELD_HYPERLINK:
ActionContent action=new ActionContent();
action.readObject(in,loader);
hyperlink=action;
break;
case FIELD_BOOKMARK:
bookmark=IOUtil.readString(in);
break;
case FIELD_HELPTEXT:
helpText=IOUtil.readString(in);
break;
case FIELD_INLINESTYLE_VERSION_0:
String styleCssText=IOUtil.readString(in);
if (styleCssText != null && styleCssText.length() != 0) {
inlineStyle=new StyleDeclaration(cssEngine);
inlineStyle.setCssText(styleCssText);
}
break;
case FIELD_INLINESTYLE_VERSION_1:
inlineStyle=readStyle(in);
break;
case FIELD_CLASS_STYLE:
classStyle=readStyle(in);
break;
case FIELD_INSTANCE_ID:
String value=IOUtil.readString(in);
instanceId=InstanceID.parse(value);
break;
case FIELD_TOC:
toc=IOUtil.readObject(in,loader);
break;
case FIELD_ACL:
acl=IOUtil.readString(in);
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_NAME:
    name=IOUtil.readString(in);
  break;
case FIELD_X:
x=new DimensionType();
x.readObject(in);
break;
case FIELD_Y:
y=new DimensionType();
y.readObject(in);
break;
case FIELD_WIDTH:
width=new DimensionType();
width.readObject(in);
break;
case FIELD_HEIGHT:
height=new DimensionType();
height.readObject(in);
break;
case FIELD_HYPERLINK:
ActionContent action=new ActionContent();
action.readObject(in,loader);
hyperlink=action;
break;
case FIELD_BOOKMARK:
bookmark=IOUtil.readString(in);
break;
case FIELD_HELPTEXT:
helpText=IOUtil.readString(in);
break;
case FIELD_INLINESTYLE_VERSION_0:
String styleCssText=IOUtil.readString(in);
if (styleCssText != null && styleCssText.length() != 0) {
inlineStyle=new StyleDeclaration(cssEngine);
inlineStyle.setCssText(styleCssText);
}
break;
case FIELD_INLINESTYLE_VERSION_1:
IStyle style=new StyleDeclaration(cssEngine);
if (null != style) {
style.read(in);
if (!style.isEmpty()) {
inlineStyle=style;
}
}
break;
case FIELD_INSTANCE_ID:
String value=IOUtil.readString(in);
instanceId=InstanceID.parse(value);
break;
case FIELD_TOC:
toc=IOUtil.readObject(in,loader);
break;
case FIELD_ACL:
acl=IOUtil.readString(in);
}
}",0.9172521467603436
69835,"public IStyle getStyle(){
  if (style == null) {
    if (inlineStyle == null) {
      inlineStyle=report.createStyle();
    }
    IStyle classStyle=getClassStyle();
    if (classStyle != null) {
      style=new CompositeStyle(classStyle,inlineStyle);
    }
 else {
      style=inlineStyle;
    }
  }
  return new ContentStyle((AbstractStyle)style);
}","public IStyle getStyle(){
  if (style == null) {
    if (inlineStyle == null) {
      inlineStyle=report.createStyle();
    }
    String styleClass=getStyleClass();
    if (styleClass != null) {
      IStyle classStyle=report.findStyle(styleClass);
      style=new CompositeStyle(classStyle,inlineStyle);
    }
 else {
      style=inlineStyle;
    }
  }
  return new ContentStyle((AbstractStyle)style);
}",0.8090185676392573
69836,"public IStyle getStyle(){
  if (style == null) {
    if (inlineStyle == null) {
      inlineStyle=report.createStyle();
    }
    IStyle classStyle=getClassStyle();
    style=new CompositeStyle(classStyle,inlineStyle);
  }
  return style;
}","public IStyle getStyle(){
  if (style == null) {
    if (inlineStyle == null) {
      inlineStyle=report.createStyle();
    }
    String styleClass=getStyleClass();
    IStyle classStyle=report.findStyle(styleClass);
    style=new CompositeStyle(classStyle,inlineStyle);
  }
  return style;
}",0.849624060150376
69837,"public String getStyleClass(){
  if (styleClass != null) {
    return styleClass;
  }
  if (generateBy instanceof ColumnDesign) {
    return ((ColumnDesign)generateBy).getStyleClass();
  }
  return null;
}","public String getStyleClass(){
  if (styleClass != null) {
    return styleClass;
  }
  if (generateBy instanceof ColumnDesign) {
    return ((ColumnDesign)generateBy).getStyleName();
  }
  return null;
}",0.9779951100244498
69838,"protected void setupPageBreak(PolicyNode node){
  ReportItemDesign item=node.design;
  IStyle style=item.getStyle();
  if (style != null) {
    CSSValue masterPage=style.getProperty(IStyle.STYLE_MASTER_PAGE);
    CSSValue pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    CSSValue pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    if (masterPage != null || (pageBreakBefore != null) && !pageBreakBefore.equals(IStyle.AUTO_VALUE)) {
      node.breakBefore=true;
      node.execute=true;
    }
    if (pageBreakAfter != null && !pageBreakAfter.equals(IStyle.AUTO_VALUE)) {
      node.breakAfter=true;
      node.execute=true;
    }
  }
  if (item.getJavaClass() != null || item.getOnCreate() != null || item.getOnPageBreak() != null) {
    node.breakBefore=true;
    node.breakAfter=true;
    node.execute=true;
    if (item instanceof TableItemDesign) {
      node.executeAll=true;
    }
  }
  if (node.breakBefore || node.breakAfter) {
    Iterator iter=rows.iterator();
    while (iter.hasNext()) {
      PolicyNode row=(PolicyNode)iter.next();
      row.executeAll=true;
    }
    return;
  }
  if (item.getHighlight() != null || item.getMap() != null) {
    node.execute=true;
  }
  if (item.getTOC() != null || item.getBookmark() != null || item.getAction() != null) {
    node.execute=true;
  }
  if (item.getQueries() != null) {
    node.execute=true;
  }
  if (item.getVisibility() != null) {
    node.execute=true;
  }
}","protected void setupPageBreak(PolicyNode node){
  ReportItemDesign item=node.design;
  String styleClass=item.getStyleName();
  if (styleClass != null) {
    IStyle style=report.findStyle(styleClass);
    CSSValue masterPage=style.getProperty(IStyle.STYLE_MASTER_PAGE);
    CSSValue pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    CSSValue pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    if (masterPage != null || (pageBreakBefore != null) && !pageBreakBefore.equals(IStyle.AUTO_VALUE)) {
      node.breakBefore=true;
      node.execute=true;
    }
    if (pageBreakAfter != null && !pageBreakAfter.equals(IStyle.AUTO_VALUE)) {
      node.breakAfter=true;
      node.execute=true;
    }
  }
  if (item.getJavaClass() != null || item.getOnCreate() != null || item.getOnPageBreak() != null) {
    node.breakBefore=true;
    node.breakAfter=true;
    node.execute=true;
    if (item instanceof TableItemDesign) {
      node.executeAll=true;
    }
  }
  if (node.breakBefore || node.breakAfter) {
    Iterator iter=rows.iterator();
    while (iter.hasNext()) {
      PolicyNode row=(PolicyNode)iter.next();
      row.executeAll=true;
    }
    return;
  }
  if (item.getHighlight() != null || item.getMap() != null) {
    node.execute=true;
  }
  if (item.getTOC() != null || item.getBookmark() != null || item.getAction() != null) {
    node.execute=true;
  }
  if (item.getQueries() != null) {
    node.execute=true;
  }
  if (item.getVisibility() != null) {
    node.execute=true;
  }
}",0.9536202869536204
69839,"public byte[] drawImage() throws IOException {
  if (diagonalNumber <= 0 && antidiagonalNumber <= 0) {
    return null;
  }
  if (imageDpi < 0) {
    imageDpi=DEFAULT_IMAGE_DPI;
  }
  int imagePXWidth=HTMLEmitterUtil.getDimensionPixelValue(imageWidth,imageDpi);
  int imagePXHeight=HTMLEmitterUtil.getDimensionPixelValue(imageHeight,imageDpi);
  if (imagePXWidth <= 0) {
    imagePXWidth=DEFAULT_IMAGE_PX_WIDTH;
  }
  if (imagePXHeight <= 0) {
    imagePXHeight=DEFAULT_IMAGE_PX_HEIGHT;
  }
  int diagonalPXWidth=HTMLEmitterUtil.getDimensionPixelValue(diagonalWidth,imageDpi);
  if (diagonalPXWidth <= 0) {
    diagonalPXWidth=1;
  }
  int antidiagonalPXWidth=HTMLEmitterUtil.getDimensionPixelValue(antidiagonalWidth,imageDpi);
  if (antidiagonalPXWidth <= 0) {
    antidiagonalPXWidth=1;
  }
  BufferedImage bufferedImage=new BufferedImage(imagePXWidth,imagePXHeight,BufferedImage.TYPE_INT_ARGB);
  Graphics2D g2d=bufferedImage.createGraphics();
  originStroke=g2d.getStroke();
  try {
    if (diagonalStyle != null && !""String_Node_Str"".equalsIgnoreCase(diagonalStyle)) {
      Color lineColor=PropertyUtil.getColor(diagonalColor);
      if (lineColor == null) {
        lineColor=color;
      }
      if (lineColor != null) {
        g2d.setColor(lineColor);
      }
      if (""String_Node_Str"".equalsIgnoreCase(diagonalStyle)) {
        float dash[]={1,(diagonalPXWidth * 2) - 1 + (diagonalPXWidth % 2)};
        Stroke stroke=new BasicStroke(diagonalPXWidth,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,10.0f,dash,(diagonalPXWidth * 2) - (diagonalPXWidth / 2));
        g2d.setStroke(stroke);
        if (diagonalNumber == 1) {
          g2d.drawLine(0,diagonalPXWidth / 2,imagePXWidth - 1,imagePXHeight - 1 + (diagonalPXWidth / 2));
        }
 else         if (diagonalNumber == 2) {
          g2d.drawLine((imagePXWidth / 3) - 1,diagonalPXWidth / 2,imagePXWidth - 1,imagePXHeight - 1 + (diagonalPXWidth / 2));
          g2d.drawLine(0,(imagePXHeight / 3) - 1 + (diagonalPXWidth / 2),imagePXWidth - 1,imagePXHeight - 1 + (diagonalPXWidth / 2));
        }
 else         if (diagonalNumber >= 3) {
          g2d.drawLine((imagePXWidth / 2) - 1,diagonalPXWidth / 2,imagePXWidth - 1,imagePXHeight - 1 + (diagonalPXWidth / 2));
          g2d.drawLine(0,diagonalPXWidth / 2,imagePXWidth - 1,imagePXHeight - 1 + (diagonalPXWidth / 2));
          g2d.drawLine(0,(imagePXHeight / 2) - 1 + (diagonalPXWidth / 2),imagePXWidth - 1,imagePXHeight - 1 + (diagonalPXWidth / 2));
        }
      }
 else {
        if (""String_Node_Str"".equalsIgnoreCase(diagonalStyle)) {
          float dash[]={3 * diagonalPXWidth};
          Stroke stroke=new BasicStroke(diagonalPXWidth,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,10.0f,dash,0.0f);
          g2d.setStroke(stroke);
        }
 else {
          if (diagonalPXWidth > 1) {
            g2d.setStroke(new BasicStroke(diagonalPXWidth));
          }
        }
        if (diagonalNumber == 1) {
          g2d.drawLine(0,0,imagePXWidth - 1,imagePXHeight - 1);
        }
 else         if (diagonalNumber == 2) {
          g2d.drawLine((imagePXWidth / 3) - 1,0,imagePXWidth - 1,imagePXHeight - 1);
          g2d.drawLine(0,(imagePXHeight / 3) - 1,imagePXWidth - 1,imagePXHeight - 1);
        }
 else         if (diagonalNumber >= 3) {
          g2d.drawLine((imagePXWidth / 2) - 1,0,imagePXWidth - 1,imagePXHeight - 1);
          g2d.drawLine(0,0,imagePXWidth - 1,imagePXHeight - 1);
          g2d.drawLine(0,(imagePXHeight / 2) - 1,imagePXWidth - 1,imagePXHeight - 1);
        }
      }
    }
    if (antidiagonalStyle != null && !""String_Node_Str"".equalsIgnoreCase(antidiagonalStyle)) {
      Color lineColor=PropertyUtil.getColor(antidiagonalColor);
      if (lineColor == null) {
        lineColor=color;
      }
      if (lineColor != null) {
        g2d.setColor(lineColor);
      }
      if (""String_Node_Str"".equalsIgnoreCase(antidiagonalStyle)) {
        float dash[]={1,(antidiagonalPXWidth * 2) - 1 + (antidiagonalPXWidth % 2)};
        Stroke stroke=new BasicStroke(antidiagonalPXWidth,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,10.0f,dash,(antidiagonalPXWidth * 2) - (antidiagonalPXWidth / 2));
        g2d.setStroke(stroke);
        if (antidiagonalNumber == 1) {
          g2d.drawLine(imagePXWidth - 1,antidiagonalPXWidth / 2,0,imagePXHeight - 1 + (antidiagonalPXWidth / 2));
        }
 else         if (antidiagonalNumber == 2) {
          g2d.drawLine((imagePXWidth * 2 / 3) - 1,antidiagonalPXWidth / 2,0,imagePXHeight - 1 + (antidiagonalPXWidth / 2));
          g2d.drawLine(imagePXWidth - 1,(imagePXHeight / 3) - 1 + (antidiagonalPXWidth / 2),0,imagePXHeight - 1 + (antidiagonalPXWidth / 2));
        }
 else         if (antidiagonalNumber >= 3) {
          g2d.drawLine((imagePXWidth / 2) - 1,antidiagonalPXWidth / 2,0,imagePXHeight - 1 + (antidiagonalPXWidth / 2));
          g2d.drawLine(imagePXWidth - 1,antidiagonalPXWidth / 2,0,imagePXHeight - 1 + (antidiagonalPXWidth / 2));
          g2d.drawLine(imagePXWidth - 1,(imagePXHeight / 2) - 1 + (antidiagonalPXWidth / 2),0,imagePXHeight - 1 + (antidiagonalPXWidth / 2));
        }
      }
 else {
        if (""String_Node_Str"".equalsIgnoreCase(antidiagonalStyle)) {
          float dash[]={3 * antidiagonalPXWidth};
          Stroke stroke=new BasicStroke(antidiagonalPXWidth,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,10.0f,dash,0.0f);
          g2d.setStroke(stroke);
        }
 else {
          if (antidiagonalPXWidth > 1) {
            g2d.setStroke(new BasicStroke(antidiagonalPXWidth));
          }
 else {
            g2d.setStroke(originStroke);
          }
        }
        if (antidiagonalNumber == 1) {
          g2d.drawLine(imagePXWidth - 1,0,0,imagePXHeight - 1);
        }
 else         if (antidiagonalNumber == 2) {
          g2d.drawLine((imagePXWidth * 2 / 3) - 1,0,0,imagePXHeight - 1);
          g2d.drawLine(imagePXWidth - 1,(imagePXHeight / 3) - 1,0,imagePXHeight - 1);
        }
 else         if (antidiagonalNumber >= 3) {
          g2d.drawLine((imagePXWidth / 2) - 1,0,0,imagePXHeight - 1);
          g2d.drawLine(imagePXWidth - 1,0,0,imagePXHeight - 1);
          g2d.drawLine(imagePXWidth - 1,(imagePXHeight / 2) - 1,0,imagePXHeight - 1);
        }
      }
    }
  }
  finally {
    g2d.dispose();
  }
  byte[] resultImageByteArray=null;
  ByteArrayOutputStream imageStream=new ByteArrayOutputStream();
  ImageIO.write(bufferedImage,""String_Node_Str"",imageStream);
  imageStream.flush();
  resultImageByteArray=imageStream.toByteArray();
  imageStream.close();
  return resultImageByteArray;
}","public byte[] drawImage() throws IOException {
  if (diagonalNumber <= 0 && antidiagonalNumber <= 0) {
    return null;
  }
  if (imageDpi < 0) {
    imageDpi=DEFAULT_IMAGE_DPI;
  }
  int imagePXWidth=HTMLEmitterUtil.getDimensionPixelValue(imageWidth,imageDpi);
  int imagePXHeight=HTMLEmitterUtil.getDimensionPixelValue(imageHeight,imageDpi);
  if (imagePXWidth <= 0) {
    imagePXWidth=DEFAULT_IMAGE_PX_WIDTH;
  }
  if (imagePXHeight <= 0) {
    imagePXHeight=DEFAULT_IMAGE_PX_HEIGHT;
  }
  int diagonalPXWidth=HTMLEmitterUtil.getDimensionPixelValue(diagonalWidth,imageDpi);
  if (diagonalPXWidth <= 0) {
    diagonalPXWidth=1;
  }
  int antidiagonalPXWidth=HTMLEmitterUtil.getDimensionPixelValue(antidiagonalWidth,imageDpi);
  if (antidiagonalPXWidth <= 0) {
    antidiagonalPXWidth=1;
  }
  BufferedImage bufferedImage=new BufferedImage(imagePXWidth,imagePXHeight,BufferedImage.TYPE_INT_ARGB);
  Graphics2D g2d=bufferedImage.createGraphics();
  originStroke=g2d.getStroke();
  try {
    if (diagonalStyle != null && !""String_Node_Str"".equalsIgnoreCase(diagonalStyle)) {
      Color lineColor=PropertyUtil.getColor(diagonalColor);
      if (lineColor == null) {
        lineColor=color;
      }
      if (lineColor != null) {
        g2d.setColor(lineColor);
      }
      if (""String_Node_Str"".equalsIgnoreCase(diagonalStyle)) {
        float dash[]={1,(diagonalPXWidth * 2) - 1 + (diagonalPXWidth % 2)};
        Stroke stroke=new BasicStroke(diagonalPXWidth,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,10.0f,dash,(diagonalPXWidth * 2) - (diagonalPXWidth / 2));
        g2d.setStroke(stroke);
        if (diagonalNumber == 1) {
          g2d.drawLine(0,diagonalPXWidth / 2,imagePXWidth - 1,imagePXHeight - 1 + (diagonalPXWidth / 2));
        }
 else         if (diagonalNumber == 2) {
          g2d.drawLine((imagePXWidth / 3) - 1,diagonalPXWidth / 2,imagePXWidth - 1,imagePXHeight - 1 + (diagonalPXWidth / 2));
          g2d.drawLine(0,(imagePXHeight / 3) - 1 + (diagonalPXWidth / 2),imagePXWidth - 1,imagePXHeight - 1 + (diagonalPXWidth / 2));
        }
 else         if (diagonalNumber >= 3) {
          g2d.drawLine((imagePXWidth / 2) - 1,diagonalPXWidth / 2,imagePXWidth - 1,imagePXHeight - 1 + (diagonalPXWidth / 2));
          g2d.drawLine(0,diagonalPXWidth / 2,imagePXWidth - 1,imagePXHeight - 1 + (diagonalPXWidth / 2));
          g2d.drawLine(0,(imagePXHeight / 2) - 1 + (diagonalPXWidth / 2),imagePXWidth - 1,imagePXHeight - 1 + (diagonalPXWidth / 2));
        }
      }
 else {
        if (""String_Node_Str"".equalsIgnoreCase(diagonalStyle)) {
          float dash[]={3 * diagonalPXWidth};
          Stroke stroke=new BasicStroke(diagonalPXWidth,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,10.0f,dash,0.0f);
          g2d.setStroke(stroke);
        }
 else {
          if (diagonalPXWidth > 1) {
            g2d.setStroke(new BasicStroke(diagonalPXWidth));
          }
        }
        if (diagonalNumber == 1) {
          g2d.drawLine(0,0,imagePXWidth - 1,imagePXHeight - 1);
        }
 else         if (diagonalNumber == 2) {
          g2d.drawLine((imagePXWidth / 3) - 1,0,imagePXWidth - 1,imagePXHeight - 1);
          g2d.drawLine(0,(imagePXHeight / 3) - 1,imagePXWidth - 1,imagePXHeight - 1);
        }
 else         if (diagonalNumber >= 3) {
          g2d.drawLine((imagePXWidth / 2) - 1,0,imagePXWidth - 1,imagePXHeight - 1);
          g2d.drawLine(0,0,imagePXWidth - 1,imagePXHeight - 1);
          g2d.drawLine(0,(imagePXHeight / 2) - 1,imagePXWidth - 1,imagePXHeight - 1);
        }
      }
    }
  }
  finally {
    g2d.dispose();
  }
  byte[] resultImageByteArray=null;
  ByteArrayOutputStream imageStream=new ByteArrayOutputStream();
  ImageIO.write(bufferedImage,""String_Node_Str"",imageStream);
  imageStream.flush();
  resultImageByteArray=imageStream.toByteArray();
  imageStream.close();
  return resultImageByteArray;
}",0.7423950712360415
69840,"/** 
 * @param type: a Data Engine data type
 * @return Data Engine data types compatible with <code>type</code>, including <code>type</code> itself
 * @throws exception if <code>DataType.ANY_TYPE</code>, <code>DataType.UNKNOWN_TYPE</code> or other unsupported int value is passed into
 */
public static int[] getCompatibleDataTypes(int type) throws AdapterException {
switch (type) {
case DataType.BOOLEAN_TYPE:
    return new int[]{DataType.BOOLEAN_TYPE};
case DataType.INTEGER_TYPE:
  return new int[]{DataType.INTEGER_TYPE};
case DataType.DOUBLE_TYPE:
return new int[]{DataType.DOUBLE_TYPE,DataType.INTEGER_TYPE};
case DataType.DECIMAL_TYPE:
return new int[]{DataType.DECIMAL_TYPE,DataType.DOUBLE_TYPE,DataType.INTEGER_TYPE};
case DataType.STRING_TYPE:
return new int[]{DataType.STRING_TYPE,DataType.BOOLEAN_TYPE,DataType.DECIMAL_TYPE,DataType.DOUBLE_TYPE,DataType.INTEGER_TYPE,DataType.DATE_TYPE,DataType.BLOB_TYPE,DataType.BINARY_TYPE,DataType.SQL_DATE_TYPE,DataType.SQL_TIME_TYPE};
case DataType.DATE_TYPE:
return new int[]{DataType.DATE_TYPE,DataType.SQL_DATE_TYPE,DataType.SQL_TIME_TYPE};
case DataType.BLOB_TYPE:
return new int[]{DataType.BLOB_TYPE};
case DataType.BINARY_TYPE:
return new int[]{DataType.BINARY_TYPE};
case DataType.SQL_DATE_TYPE:
return new int[]{DataType.SQL_DATE_TYPE};
case DataType.SQL_TIME_TYPE:
return new int[]{DataType.SQL_TIME_TYPE};
default :
throw new AdapterException(ResourceConstants.INVALID_DATA_TYPE,type);
}
}","/** 
 * @param type: a Data Engine data type
 * @return Data Engine data types compatible with <code>type</code>, including <code>type</code> itself
 * @throws exception if <code>DataType.ANY_TYPE</code>, <code>DataType.UNKNOWN_TYPE</code> or other unsupported int value is passed into
 */
public static int[] getCompatibleDataTypes(int type) throws AdapterException {
switch (type) {
case DataType.BOOLEAN_TYPE:
    return new int[]{DataType.BOOLEAN_TYPE};
case DataType.INTEGER_TYPE:
  return new int[]{DataType.INTEGER_TYPE};
case DataType.DOUBLE_TYPE:
return new int[]{DataType.DOUBLE_TYPE,DataType.INTEGER_TYPE};
case DataType.DECIMAL_TYPE:
return new int[]{DataType.DECIMAL_TYPE,DataType.DOUBLE_TYPE,DataType.INTEGER_TYPE};
case DataType.STRING_TYPE:
return new int[]{DataType.STRING_TYPE,DataType.BOOLEAN_TYPE,DataType.DECIMAL_TYPE,DataType.DOUBLE_TYPE,DataType.INTEGER_TYPE,DataType.DATE_TYPE,DataType.BLOB_TYPE,DataType.BINARY_TYPE,DataType.SQL_DATE_TYPE,DataType.SQL_TIME_TYPE};
case DataType.DATE_TYPE:
return new int[]{DataType.DATE_TYPE,DataType.SQL_DATE_TYPE,DataType.SQL_TIME_TYPE};
case DataType.BLOB_TYPE:
return new int[]{DataType.BLOB_TYPE};
case DataType.BINARY_TYPE:
return new int[]{DataType.BINARY_TYPE};
case DataType.SQL_DATE_TYPE:
return new int[]{DataType.SQL_DATE_TYPE,DataType.DATE_TYPE};
case DataType.SQL_TIME_TYPE:
return new int[]{DataType.SQL_TIME_TYPE};
default :
throw new AdapterException(ResourceConstants.INVALID_DATA_TYPE,type);
}
}",0.9935042735042736
69841,"public long getPageNumber(InstanceID iid){
  if (!isComplete()) {
    return -1;
  }
  initializePageHintReader();
  if (pageHintReader == null) {
    return -1;
  }
  int version=pageHintReader.getVersion();
  try {
    if (version == IPageHintReader.VERSION_0) {
      long offset=getInstanceOffset(iid);
      if (offset == -1) {
        return -1;
      }
      long totalPage=pageHintReader.getTotalPage();
      for (long pageNumber=1; pageNumber <= totalPage; pageNumber++) {
        IPageHint hint=pageHintReader.getPageHint(pageNumber);
        PageSection section=hint.getSection(0);
        if (offset >= section.startOffset) {
          return pageNumber;
        }
      }
    }
 else     if (version == IPageHintReader.VERSION_1) {
      long offset=getInstanceOffset(iid);
      if (offset == -1) {
        return -1;
      }
      long totalPage=pageHintReader.getTotalPage();
      for (long pageNumber=1; pageNumber <= totalPage; pageNumber++) {
        IPageHint hint=pageHintReader.getPageHint(pageNumber);
        int sectionCount=hint.getSectionCount();
        for (int i=0; i < sectionCount; i++) {
          PageSection section=hint.getSection(i);
          if (section.startOffset <= offset && offset <= section.endOffset) {
            return pageNumber;
          }
        }
      }
    }
 else     if (version == IPageHintReader.VERSION_2 || version == IPageHintReader.VERSION_3 || version == IPageHintReader.VERSION_4 || version == IPageHintReader.VERSION_5) {
      long totalPage=pageHintReader.getTotalPage();
      for (long pageNumber=1; pageNumber <= totalPage; pageNumber++) {
        IPageHint hint=pageHintReader.getPageHint(pageNumber);
        int sectionCount=hint.getSectionCount();
        Fragment fragment=new Fragment(new InstanceIDComparator());
        for (int i=0; i < sectionCount; i++) {
          PageSection section=hint.getSection(i);
          fragment.addFragment(section.starts,section.ends);
        }
        if (fragment.inFragment(iid)) {
          return pageNumber;
        }
      }
    }
  }
 catch (  IOException ex) {
  }
  return -1;
}","public long getPageNumber(InstanceID iid){
  if (!isComplete()) {
    return -1;
  }
  initializePageHintReader();
  if (pageHintReader == null) {
    return -1;
  }
  int version=pageHintReader.getVersion();
  try {
    if (version == IPageHintReader.VERSION_0) {
      long offset=getInstanceOffset(iid);
      if (offset == -1) {
        return -1;
      }
      long totalPage=pageHintReader.getTotalPage();
      for (long pageNumber=1; pageNumber <= totalPage; pageNumber++) {
        IPageHint hint=pageHintReader.getPageHint(pageNumber);
        PageSection section=hint.getSection(0);
        if (offset >= section.startOffset) {
          return pageNumber;
        }
      }
    }
 else     if (version == IPageHintReader.VERSION_1) {
      long offset=getInstanceOffset(iid);
      if (offset == -1) {
        return -1;
      }
      long totalPage=pageHintReader.getTotalPage();
      for (long pageNumber=1; pageNumber <= totalPage; pageNumber++) {
        IPageHint hint=pageHintReader.getPageHint(pageNumber);
        int sectionCount=hint.getSectionCount();
        for (int i=0; i < sectionCount; i++) {
          PageSection section=hint.getSection(i);
          if (section.startOffset <= offset && offset <= section.endOffset) {
            return pageNumber;
          }
        }
      }
    }
 else     if (version == IPageHintReader.VERSION_2 || version == IPageHintReader.VERSION_3 || version == IPageHintReader.VERSION_4 || version == IPageHintReader.VERSION_5 || version == IPageHintReader.VERSION_6) {
      long totalPage=pageHintReader.getTotalPage();
      for (long pageNumber=1; pageNumber <= totalPage; pageNumber++) {
        IPageHint hint=pageHintReader.getPageHint(pageNumber);
        int sectionCount=hint.getSectionCount();
        Fragment fragment=new Fragment(new InstanceIDComparator());
        for (int i=0; i < sectionCount; i++) {
          PageSection section=hint.getSection(i);
          fragment.addFragment(section.starts,section.ends);
        }
        if (fragment.inFragment(iid)) {
          return pageNumber;
        }
      }
    }
  }
 catch (  IOException ex) {
  }
  return -1;
}",0.9905926622765756
69842,"/** 
 * The page variable is only supported in VERSION_6
 */
synchronized public Collection<PageVariable> getPageVariables() throws IOException {
  if (pageVariables == null) {
    pageVariables=new ArrayList<PageVariable>();
    if (version == VERSION_6) {
      indexStream.seek(8);
      long offset=indexStream.readLong();
      hintsStream.seek(offset);
      readPageVariables(new DataInputStream(hintsStream),pageVariables);
    }
  }
  return pageVariables;
}","/** 
 * The page variable is only supported in VERSION_6
 */
synchronized public Collection<PageVariable> getPageVariables() throws IOException {
  if (pageVariables == null) {
    pageVariables=new ArrayList<PageVariable>();
    if (version == VERSION_6) {
      indexStream.seek(8);
      long offset=indexStream.readLong();
      if (offset != -1) {
        hintsStream.seek(offset);
        readPageVariables(new DataInputStream(hintsStream),pageVariables);
      }
    }
  }
  return pageVariables;
}",0.9609053497942388
69843,"public PageHintWriterV4(IDocArchiveWriter writer) throws IOException {
  this.writer=writer;
  try {
    hintsStream=writer.createRandomAccessStream(ReportDocumentConstants.PAGEHINT_STREAM);
    hintsStream.writeInt(IPageHintWriter.VERSION);
    indexStream=writer.createRandomAccessStream(ReportDocumentConstants.PAGEHINT_INDEX_STREAM);
  }
 catch (  IOException ex) {
    close();
    throw ex;
  }
}","public PageHintWriterV4(IDocArchiveWriter writer) throws IOException {
  this.writer=writer;
  try {
    hintsStream=writer.createRandomAccessStream(ReportDocumentConstants.PAGEHINT_STREAM);
    hintsStream.writeInt(IPageHintWriter.VERSION);
    indexStream=writer.createRandomAccessStream(ReportDocumentConstants.PAGEHINT_INDEX_STREAM);
    indexStream.writeLong(0);
    indexStream.writeLong(-1);
  }
 catch (  IOException ex) {
    close();
    throw ex;
  }
}",0.9294797687861271
69844,"public void testImageBasic(){
  ImageItemDesign image=(ImageItemDesign)report.getContent(0);
  assertEquals(""String_Node_Str"",image.getName());
  assertEquals(10,image.getHeight().getValue().getMeasure(),Double.MIN_VALUE);
  assertEquals(12,image.getWidth().getValue().getMeasure(),Double.MIN_VALUE);
  assertEquals(1,image.getX().getValue().getMeasure(),Double.MIN_VALUE);
  assertEquals(2,image.getY().getValue().getMeasure(),Double.MIN_VALUE);
  assertEquals(""String_Node_Str"",image.getImageUri());
  assertEquals(ActionDesign.ACTION_HYPERLINK,image.getAction().getActionType());
  assertEquals(""String_Node_Str"",image.getAction().getHyperlink().getDesignValue());
  assertEquals(""String_Node_Str"",image.getAltText().getValue());
}","public void testImageBasic(){
  ImageItemDesign image=(ImageItemDesign)report.getContent(0);
  assertEquals(""String_Node_Str"",image.getName());
  assertEquals(10,image.getHeight().getValue().getMeasure(),Double.MIN_VALUE);
  assertEquals(12,image.getWidth().getValue().getMeasure(),Double.MIN_VALUE);
  assertEquals(1,image.getX().getValue().getMeasure(),Double.MIN_VALUE);
  assertEquals(2,image.getY().getValue().getMeasure(),Double.MIN_VALUE);
  assertEquals(Expression.newExpression(""String_Node_Str""),image.getImageUri());
  assertEquals(ActionDesign.ACTION_HYPERLINK,image.getAction().getActionType());
  assertEquals(""String_Node_Str"",image.getAction().getHyperlink().getDesignValue());
  assertEquals(""String_Node_Str"",image.getAltText().getValue());
}",0.9825970548862116
69845,"/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  IResultMetaData rsMeta=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,new ArrayList());
    }
 else {
      dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
    }
    throw e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    List columnList=new ArrayList();
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(DataAdapterUtil.adapterToModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        columnList.add(rsc);
      }
    }
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,columnList);
    }
 else {
      if (dataSetHandle.getCachedMetaDataHandle() != null) {
        List resultSetColumnHandles=getResultSetColumnHandles(dataSetHandle.getCachedMetaDataHandle());
        if (resultSetColumnHandles.size() == columnList.size()) {
          for (int i=0; i < resultSetColumnHandles.size(); i++) {
            ResultSetColumnHandle rsh=(ResultSetColumnHandle)resultSetColumnHandles.get(i);
            ResultSetColumn rsc=(ResultSetColumn)columnList.get(i);
            if (!rsh.getColumnName().equals(rsc.getColumnName())) {
              rsh.setColumnName(rsc.getColumnName());
            }
            if (!rsh.getDataType().equals(rsc.getDataType())) {
              rsh.setDataType(rsc.getDataType());
            }
          }
          return rsMeta;
        }
      }
      dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
      for (int i=0; i < columnList.size(); i++) {
        dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem((ResultSetColumn)columnList.get(i));
      }
    }
  }
  return rsMeta;
}","/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  IResultMetaData rsMeta=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,new ArrayList());
    }
 else {
      if (dataSetHandle.getCachedMetaDataHandle() != null)       dataSetHandle.getCachedMetaDataHandle().getResultSet().clearValue();
 else       dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
    }
    throw e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    List columnList=new ArrayList();
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(DataAdapterUtil.adapterToModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        columnList.add(rsc);
      }
    }
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,columnList);
    }
 else {
      if (dataSetHandle.getCachedMetaDataHandle() != null) {
        List resultSetColumnHandles=getResultSetColumnHandles(dataSetHandle.getCachedMetaDataHandle());
        if (resultSetColumnHandles.size() == columnList.size()) {
          for (int i=0; i < resultSetColumnHandles.size(); i++) {
            ResultSetColumnHandle rsh=(ResultSetColumnHandle)resultSetColumnHandles.get(i);
            ResultSetColumn rsc=(ResultSetColumn)columnList.get(i);
            if (!rsh.getColumnName().equals(rsc.getColumnName())) {
              rsh.setColumnName(rsc.getColumnName());
            }
            if (!rsh.getDataType().equals(rsc.getDataType())) {
              rsh.setDataType(rsc.getDataType());
            }
          }
          return rsMeta;
        }
 else {
          dataSetHandle.getCachedMetaDataHandle().getResultSet().clearValue();
        }
      }
 else {
        dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
      }
      for (int i=0; i < columnList.size(); i++) {
        dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem((ResultSetColumn)columnList.get(i));
      }
    }
  }
  return rsMeta;
}",0.9464623136678564
69846,"/** 
 * Test get/setImageUri methods set the image by a URI address then get the address and check the source type to test if they work correctly
 */
public void testUri(){
  ImageItemDesign image=new ImageItemDesign();
  image.setImageUri(""String_Node_Str"");
  assertEquals(image.getImageUri(),""String_Node_Str"");
  assertEquals(image.getImageSource(),ImageItemDesign.IMAGE_URI);
}","/** 
 * Test get/setImageUri methods set the image by a URI address then get the address and check the source type to test if they work correctly
 */
public void testUri(){
  ImageItemDesign image=new ImageItemDesign();
  image.setImageUri(Expression.newConstant(""String_Node_Str""));
  assertEquals(image.getImageUri().getValue(),""String_Node_Str"");
  assertEquals(image.getImageSource(),ImageItemDesign.IMAGE_URI);
  image.setImageUri(Expression.newExpression(""String_Node_Str""));
  assertEquals(image.getImageUri(),Expression.newExpression(""String_Node_Str""));
  assertEquals(image.getImageSource(),ImageItemDesign.IMAGE_URI);
}",0.7549407114624506
69847,"public Object visitImageItem(ImageItemDesign image,Object value){
  IDataQueryDefinition query;
  if (image.useCachedResult()) {
    query=getRefenceQuery(image);
    if (query == null) {
      registerUnresolvedQueryReference(image);
      return null;
    }
  }
 else {
    query=createQuery(image,(IDataQueryDefinition)value);
  }
  if (query != value && query instanceof BaseQueryDefinition) {
    setUsesDetails((BaseQueryDefinition)query);
  }
  try {
    if (image.getImageSource() == ImageItemDesign.IMAGE_EXPRESSION) {
      String newImageExpression=transformExpression(image.getImageExpression(),query);
      String newImageFormat=transformExpression(image.getImageFormat(),query);
      image.setImageExpression(newImageExpression,newImageFormat);
    }
 else     if (image.getImageSource() == ImageItemDesign.IMAGE_URI) {
      String newImageUri=transformExpression(image.getImageUri(),query);
      image.setImageUri(newImageUri);
    }
 else     if (image.getImageSource() == ImageItemDesign.IMAGE_FILE) {
      String newImageUri=transformExpression(image.getImageUri(),query);
      image.setImageFile(newImageUri);
    }
    transformExpressions(image,query);
    return getResultQuery(query,value);
  }
 catch (  BirtException ex) {
    context.addException(image.getHandle(),ex);
    return null;
  }
}","public Object visitImageItem(ImageItemDesign image,Object value){
  IDataQueryDefinition query;
  if (image.useCachedResult()) {
    query=getRefenceQuery(image);
    if (query == null) {
      registerUnresolvedQueryReference(image);
      return null;
    }
  }
 else {
    query=createQuery(image,(IDataQueryDefinition)value);
  }
  if (query != value && query instanceof BaseQueryDefinition) {
    setUsesDetails((BaseQueryDefinition)query);
  }
  try {
    if (image.getImageSource() == ImageItemDesign.IMAGE_EXPRESSION) {
      String newImageExpression=transformExpression(image.getImageExpression(),query);
      String newImageFormat=transformExpression(image.getImageFormat(),query);
      image.setImageExpression(newImageExpression,newImageFormat);
    }
 else     if (image.getImageSource() == ImageItemDesign.IMAGE_URI) {
      Expression<String> newImageUri=transformExpression(image.getImageUri(),query);
      image.setImageUri(newImageUri);
    }
 else     if (image.getImageSource() == ImageItemDesign.IMAGE_FILE) {
      Expression<String> newImageUri=transformExpression(image.getImageUri(),query);
      image.setImageFile(newImageUri);
    }
    transformExpressions(image,query);
    return getResultQuery(query,value);
  }
 catch (  BirtException ex) {
    context.addException(image.getHandle(),ex);
    return null;
  }
}",0.9910179640718564
69848,"protected void handleURIImage(String uriExpr,IImageContent imageContent) throws BirtException {
}","protected void handleURIImage(Expression<String> uriExpr,IImageContent imageContent) throws BirtException {
}",0.941747572815534
69849,"protected void handleFileExpressionImage(String fileExpr,IImageContent imageContent) throws BirtException {
  String imageFile=""String_Node_Str"";
  try {
    Object file=evaluate(fileExpr);
    if (file != null) {
      imageFile=file.toString();
    }
 else     if (fileExpr != null && fileExpr.length() > 0) {
      imageFile=fileExpr;
    }
    handleFileImage(imageFile,imageContent);
  }
 catch (  BirtException ex) {
    if (fileExpr != null && fileExpr.length() > 0) {
      handleFileImage(fileExpr,imageContent);
    }
    throw ex;
  }
}","protected void handleFileExpressionImage(Expression<String> fileExpr,IImageContent imageContent) throws BirtException {
  String imageFile=""String_Node_Str"";
  Object file=evaluate(fileExpr);
  if (file != null) {
    imageFile=file.toString();
  }
 else   if (fileExpr != null) {
    imageFile=fileExpr.getValue();
  }
  handleFileImage(imageFile,imageContent);
}",0.5927552140504939
69850,"protected void readImageField(DataInputStream in,ImageItemDesign image,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_IMAGE_SOURCE:
    int imageSource=IOUtil.readInt(in);
switch (imageSource) {
case ImageItemDesign.IMAGE_NAME:
    String imageName=IOUtil.readString(in);
  image.setImageName(imageName);
break;
case ImageItemDesign.IMAGE_FILE:
String imageFile=IOUtil.readString(in);
image.setImageFile(imageFile);
break;
case ImageItemDesign.IMAGE_URI:
String imageUri=IOUtil.readString(in);
image.setImageUri(imageUri);
break;
case ImageItemDesign.IMAGE_EXPRESSION:
String imageExpr=IOUtil.readString(in);
String imageFormat=IOUtil.readString(in);
image.setImageExpression(imageExpr,imageFormat);
break;
default :
throw new IOException(""String_Node_Str"" + imageSource);
}
break;
case FIELD_ALT_TEXT:
Expression<String> altTextKey=readStringConstant(in);
Expression<String> altText=readStringConstant(in);
image.setAltText(altTextKey,altText);
break;
case FIELD_HELP_TEXT:
Expression<String> helpTextKey=readStringConstant(in);
Expression<String> helpText=readStringConstant(in);
image.setHelpText(helpTextKey,helpText);
break;
case FIELD_FIT_TO_CONTAINER:
Boolean isFitToContainer=IOUtil.readBool(in);
image.setFitToContainer(isFitToContainer);
break;
default :
readReportItemField(in,image,fieldType);
}
}","protected void readImageField(DataInputStream in,ImageItemDesign image,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_IMAGE_SOURCE:
    int imageSource=IOUtil.readInt(in);
switch (imageSource) {
case ImageItemDesign.IMAGE_NAME:
    String imageName=IOUtil.readString(in);
  image.setImageName(imageName);
break;
case ImageItemDesign.IMAGE_FILE:
Expression<String> imageFile=readStringExpression(in);
image.setImageFile(imageFile);
break;
case ImageItemDesign.IMAGE_URI:
Expression<String> imageUri=readStringExpression(in);
image.setImageUri(imageUri);
break;
case ImageItemDesign.IMAGE_EXPRESSION:
String imageExpr=IOUtil.readString(in);
String imageFormat=IOUtil.readString(in);
image.setImageExpression(imageExpr,imageFormat);
break;
default :
throw new IOException(""String_Node_Str"" + imageSource);
}
break;
case FIELD_ALT_TEXT:
Expression<String> altTextKey=readStringConstant(in);
Expression<String> altText=readStringConstant(in);
image.setAltText(altTextKey,altText);
break;
case FIELD_HELP_TEXT:
Expression<String> helpTextKey=readStringConstant(in);
Expression<String> helpText=readStringConstant(in);
image.setHelpText(helpTextKey,helpText);
break;
case FIELD_FIT_TO_CONTAINER:
Boolean isFitToContainer=IOUtil.readBool(in);
image.setFitToContainer(isFitToContainer);
break;
default :
readReportItemField(in,image,fieldType);
}
}",0.9547141796585004
69851,"protected void writeImage(DataOutputStream out,ImageItemDesign image) throws IOException {
  writeReportItem(out,image);
  IOUtil.writeShort(out,FIELD_IMAGE_SOURCE);
  int imageSource=image.getImageSource();
  IOUtil.writeInt(out,imageSource);
switch (imageSource) {
case ImageItemDesign.IMAGE_NAME:
{
      String imageName=image.getImageName();
      DesignElementHandle handle=image.getHandle();
      if (handle instanceof ImageHandle) {
        String designImageName=image.getImageName();
        if (imageName != null && imageName.equals(designImageName)) {
          imageName=null;
        }
      }
      IOUtil.writeString(out,imageName);
    }
  break;
case ImageItemDesign.IMAGE_FILE:
IOUtil.writeString(out,image.getImageUri());
break;
case ImageItemDesign.IMAGE_URI:
IOUtil.writeString(out,image.getImageUri());
break;
case ImageItemDesign.IMAGE_EXPRESSION:
IOUtil.writeString(out,image.getImageExpression());
IOUtil.writeString(out,image.getImageFormat());
break;
}
boolean isFitToContainer=image.isFitToContainer();
if (isFitToContainer) {
IOUtil.writeShort(out,FIELD_FIT_TO_CONTAINER);
IOUtil.writeBool(out,true);
}
Expression<String> altText=image.getAltText();
Expression<String> altTextKey=image.getAltTextKey();
Expression<String> helpText=image.getHelpText();
Expression<String> helpTextKey=image.getHelpTextKey();
if (altText != null || altTextKey != null) {
IOUtil.writeShort(out,FIELD_ALT_TEXT);
write(out,altTextKey);
write(out,altText);
}
if (helpText != null || helpText != null) {
IOUtil.writeShort(out,FIELD_HELP_TEXT);
write(out,helpTextKey);
write(out,helpText);
}
}","protected void writeImage(DataOutputStream out,ImageItemDesign image) throws IOException {
  writeReportItem(out,image);
  IOUtil.writeShort(out,FIELD_IMAGE_SOURCE);
  int imageSource=image.getImageSource();
  IOUtil.writeInt(out,imageSource);
switch (imageSource) {
case ImageItemDesign.IMAGE_NAME:
{
      String imageName=image.getImageName();
      DesignElementHandle handle=image.getHandle();
      if (handle instanceof ImageHandle) {
        String designImageName=image.getImageName();
        if (imageName != null && imageName.equals(designImageName)) {
          imageName=null;
        }
      }
      IOUtil.writeString(out,imageName);
    }
  break;
case ImageItemDesign.IMAGE_FILE:
write(out,image.getImageUri());
break;
case ImageItemDesign.IMAGE_URI:
write(out,image.getImageUri());
break;
case ImageItemDesign.IMAGE_EXPRESSION:
IOUtil.writeString(out,image.getImageExpression());
IOUtil.writeString(out,image.getImageFormat());
break;
}
boolean isFitToContainer=image.isFitToContainer();
if (isFitToContainer) {
IOUtil.writeShort(out,FIELD_FIT_TO_CONTAINER);
IOUtil.writeBool(out,true);
}
Expression<String> altText=image.getAltText();
Expression<String> altTextKey=image.getAltTextKey();
Expression<String> helpText=image.getHelpText();
Expression<String> helpTextKey=image.getHelpTextKey();
if (altText != null || altTextKey != null) {
IOUtil.writeShort(out,FIELD_ALT_TEXT);
write(out,altTextKey);
write(out,altText);
}
if (helpText != null || helpText != null) {
IOUtil.writeShort(out,FIELD_HELP_TEXT);
write(out,helpTextKey);
write(out,helpText);
}
}",0.9854981084489282
69852,"/** 
 * @param imageUri The imageUri to set.
 */
public void setImageUri(String imageUri){
  this.imageSource=IMAGE_URI;
  this.imageUri=imageUri;
}","/** 
 * @param imageUri The imageUri to set.
 */
public void setImageUri(Expression<String> imageUri){
  this.imageSource=IMAGE_URI;
  this.imageUri=imageUri;
}",0.961038961038961
69853,"public void setImageFile(String file){
  imageSource=IMAGE_FILE;
  imageUri=file;
}","public void setImageFile(Expression<String> file){
  imageSource=IMAGE_FILE;
  imageUri=file;
}",0.9325842696629212
69854,"/** 
 * @return Returns the imageUri.
 */
public String getImageUri(){
  return imageUri;
}","/** 
 * @return Returns the imageUri.
 */
public Expression<String> getImageUri(){
  return imageUri;
}",0.9381443298969072
69855,"public void startCell(ICellContent cell){
  rowFilledFlag=true;
  context.startCell();
  int columnId=cell.getColumn();
  List<SpanInfo> spans=context.getSpans(columnId);
  if (spans != null) {
    for (int i=0; i < spans.size(); i++) {
      wordWriter.writeSpanCell(spans.get(i));
    }
  }
  int columnSpan=cell.getColSpan();
  int rowSpan=cell.getRowSpan();
  int cellWidth=context.getCellWidth(columnId,columnSpan);
  IStyle style=computeStyle(cell.getComputedStyle());
  if (rowSpan > 1) {
    context.addSpan(columnId,columnSpan,cellWidth,rowSpan,style);
  }
  SpanInfo info=null;
  if (columnSpan > 1 || rowSpan > 1) {
    info=new SpanInfo(columnId,columnSpan,cellWidth,true,style);
  }
  wordWriter.startTableCell(cellWidth,style,info);
  context.addWidth(getCellWidth(cellWidth,style));
  writeTableToc();
  if (cell.getDiagonalNumber() != 0) {
    drawDiagonalLine(cell,WordUtil.twipToPt(cellWidth));
  }
}","public void startCell(ICellContent cell){
  rowFilledFlag=true;
  context.startCell();
  int columnId=cell.getColumn();
  List<SpanInfo> spans=context.getSpans(columnId);
  if (spans != null) {
    for (int i=0; i < spans.size(); i++) {
      wordWriter.writeSpanCell(spans.get(i));
    }
  }
  int columnSpan=cell.getColSpan();
  int rowSpan=cell.getRowSpan();
  int cellWidth=context.getCellWidth(columnId,columnSpan);
  IStyle style=computeStyle(cell.getComputedStyle());
  if (rowSpan > 1) {
    context.addSpan(columnId,columnSpan,cellWidth,rowSpan,style);
  }
  SpanInfo info=null;
  if (columnSpan > 1 || rowSpan > 1) {
    info=new SpanInfo(columnId,columnSpan,cellWidth,true,style);
  }
  wordWriter.startTableCell(cellWidth,style,info);
  context.addWidth(getCellWidth(cellWidth,style));
  writeTableToc();
  if (cell.getDiagonalNumber() != 0 && cell.getDiagonalStyle() != null && !""String_Node_Str"".equalsIgnoreCase(cell.getDiagonalStyle())) {
    drawDiagonalLine(cell,WordUtil.twipToPt(cellWidth));
  }
}",0.9488372093023256
69856,"public static <Type>Expression<Type> newConstant(Type value){
  if (value == null) {
    return null;
  }
  return new Expression<Type>(value,(Class<Type>)value.getClass());
}","public static <Type>Expression<Type> newConstant(String value,Class<Type> type){
  if (value == null) {
    return null;
  }
  try {
    return new Expression<Type>(DataUtil.convertType(value,type),type);
  }
 catch (  BirtException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
    return null;
  }
}",0.5376782077393075
69857,"protected String encodeText(String text){
  return XLSEncodeUtil.encodeText(text);
}","protected String encodeText(String text){
  return XLSEncodeUtil.encodeXLSText(text);
}",0.9824561403508772
69858,"public boolean isValidAggregationType(Series series,SeriesDefinition orthSD,SeriesDefinition baseSD){
  boolean isValidAgg=true;
  EList<Query> queries=series.getDataDefinition();
  for (  int i : validationIndex(series)) {
    if (!isValidAgg) {
      break;
    }
    Query query=queries.get(i);
    boolean checked=false;
    String id=ChartWizard.Gatt_aggCheck_ID + series.eContainer().hashCode() + series.getDataDefinition().indexOf(query);
    if (query.getGrouping() != null && query.getGrouping().isEnabled()) {
      checked=true;
      isValidAgg=isValidAggregation(query.getGrouping(),false,id);
    }
    if (!checked && orthSD.getGrouping() != null && orthSD.getGrouping().isEnabled()) {
      checked=true;
      isValidAgg=isValidAggregation(orthSD.getGrouping(),false,id);
    }
    if (!checked) {
      if (baseSD.getGrouping() != null && baseSD.getGrouping().isEnabled()) {
        isValidAgg=isValidAggregation(baseSD.getGrouping(),true,id);
      }
    }
  }
  return isValidAgg;
}","public boolean isValidAggregationType(Series series,SeriesDefinition orthSD,SeriesDefinition baseSD){
  boolean isValidAgg=true;
  EList<Query> queries=series.getDataDefinition();
  for (  int i : validationIndex(series)) {
    if (!isValidAgg) {
      break;
    }
    Query query=queries.get(i);
    boolean checked=false;
    String id=ChartWizard.Gatt_aggCheck_ID + series.eContainer().hashCode() + series.getDataDefinition().indexOf(query);
    ChartWizard.removeException(id);
    if (query.getGrouping() != null && query.getGrouping().isEnabled()) {
      checked=true;
      isValidAgg=isValidAggregation(query.getGrouping(),false,id);
    }
    if (!checked && orthSD.getGrouping() != null && orthSD.getGrouping().isEnabled()) {
      checked=true;
      isValidAgg=isValidAggregation(orthSD.getGrouping(),false,id);
    }
    if (!checked) {
      if (baseSD.getGrouping() != null && baseSD.getGrouping().isEnabled()) {
        isValidAgg=isValidAggregation(baseSD.getGrouping(),true,id);
      }
    }
  }
  return isValidAgg;
}",0.9818716315531604
69859,"/** 
 * Check if default aggregation and value series aggregation are valid for Gantt chart and show warning message in UI.
 * @param grouping
 * @param isCategoryGrouping
 * @param id error id for log
 * @return <code>true</code> if aggregation is valid.
 * @since 2.3
 */
private boolean isValidAggregation(SeriesGrouping grouping,boolean isCategoryGrouping,String id){
  ChartWizard.removeAllExceptions(id);
  if (grouping == null || !grouping.isEnabled()) {
    return true;
  }
  String aggName=grouping.getAggregateExpression();
  if (!(""String_Node_Str"".equalsIgnoreCase(aggName) || ""String_Node_Str"".equalsIgnoreCase(aggName) || ""String_Node_Str"".equalsIgnoreCase(aggName)|| ""String_Node_Str"".equalsIgnoreCase(aggName))) {
    String aggPlace=""String_Node_Str"";
    if (isCategoryGrouping) {
      aggPlace=Messages.getString(""String_Node_Str"");
    }
 else {
      aggPlace=Messages.getString(""String_Node_Str"");
    }
    ChartWizard.showException(id,Messages.getString(""String_Node_Str"") + aggName + Messages.getString(""String_Node_Str"")+ aggPlace+ Messages.getString(""String_Node_Str""));
    return false;
  }
  return true;
}","/** 
 * Check if default aggregation and value series aggregation are valid for Gantt chart and show warning message in UI.
 * @param grouping
 * @param isCategoryGrouping
 * @param id error id for log
 * @return <code>true</code> if aggregation is valid.
 * @since 2.3
 */
private boolean isValidAggregation(SeriesGrouping grouping,boolean isCategoryGrouping,String id){
  if (grouping == null || !grouping.isEnabled()) {
    return true;
  }
  String aggName=grouping.getAggregateExpression();
  if (!(""String_Node_Str"".equalsIgnoreCase(aggName) || ""String_Node_Str"".equalsIgnoreCase(aggName) || ""String_Node_Str"".equalsIgnoreCase(aggName)|| ""String_Node_Str"".equalsIgnoreCase(aggName))) {
    String aggPlace=""String_Node_Str"";
    if (isCategoryGrouping) {
      aggPlace=Messages.getString(""String_Node_Str"");
    }
 else {
      aggPlace=Messages.getString(""String_Node_Str"");
    }
    ChartWizard.showException(id,Messages.getString(""String_Node_Str"") + aggName + Messages.getString(""String_Node_Str"")+ aggPlace+ Messages.getString(""String_Node_Str""));
    return false;
  }
  return true;
}",0.982565936522128
69860,"private void switchMarkerType(int newMarkerTypeIndex){
  MarkerType newType=MarkerType.getByName(typeNameSet[newMarkerTypeIndex]);
  if (newType == MarkerType.ICON_LITERAL) {
    MarkerIconDialog iconDialog=new MarkerIconDialog(new Shell(),getMarker().getFill());
    if (iconDialog.open() == Window.OK) {
      Fill resultFill=iconDialog.getFill();
      if (resultFill.eAdapters().isEmpty()) {
        resultFill.eAdapters().addAll(getMarker().eAdapters());
      }
      getMarker().setFill(resultFill);
    }
 else {
      return;
    }
  }
  getMarker().setType(newType);
  Control[] children=cmpType.getChildren();
  children[newMarkerTypeIndex].redraw();
  children[markerTypeIndex].redraw();
  updateMarkerPreview();
}","private void switchMarkerType(int newMarkerTypeIndex){
  MarkerType newType=MarkerType.getByName(typeNameSet[newMarkerTypeIndex]);
  if (newType == MarkerType.ICON_LITERAL) {
    MarkerIconDialog iconDialog=new MarkerIconDialog(new Shell(),getMarker().getFill());
    if (iconDialog.open() == Window.OK) {
      Fill resultFill=iconDialog.getFill();
      if (resultFill.eAdapters().isEmpty()) {
        resultFill.eAdapters().addAll(getMarker().eAdapters());
      }
      getMarker().setFill(resultFill);
    }
 else {
      return;
    }
  }
  getMarker().setType(newType);
  updateMarkerPreview();
}",0.90744920993228
69861,"public void initialize() throws BirtException {
  if (content == null) {
    this.maxAvaWidth=width;
    return;
  }
  IStyle style=content.getStyle();
  calculateSpecifiedWidth(content);
  calculateSpecifiedHeight(content);
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
    if (specifiedWidth > 0) {
      this.width=specifiedWidth;
    }
 else {
      if (parent != null) {
        this.width=parent.getMaxAvaWidth();
      }
    }
    this.maxAvaWidth=width;
  }
 else {
    buildProperties(content,context);
    if (specifiedWidth > 0) {
      this.width=specifiedWidth;
    }
 else {
      if (parent != null) {
        setAllocatedWidth(parent.getMaxAvaWidth());
      }
    }
    maxAvaWidth=getContentWidth();
  }
  textAlign=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
  this.bookmark=content.getBookmark();
  this.action=content.getHyperlinkAction();
  parent.add(this);
}","public void initialize() throws BirtException {
  if (content == null) {
    this.maxAvaWidth=width;
    return;
  }
  IStyle style=content.getStyle();
  calculateSpecifiedWidth(content);
  calculateSpecifiedHeight(content);
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
    if (specifiedWidth > 0) {
      setContentWidth(specifiedWidth);
    }
 else {
      if (parent != null) {
        this.width=parent.getMaxAvaWidth();
      }
    }
    this.maxAvaWidth=width;
  }
 else {
    buildProperties(content,context);
    if (specifiedWidth > 0) {
      setContentWidth(specifiedWidth);
    }
 else {
      if (parent != null) {
        setAllocatedWidth(parent.getMaxAvaWidth());
      }
    }
    maxAvaWidth=getContentWidth();
  }
  textAlign=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
  this.bookmark=content.getBookmark();
  this.action=content.getHyperlinkAction();
  parent.add(this);
}",0.944055944055944
69862,"/** 
 * Create parameter page control, if the datasetHandle is ODA, add the ""linked with report parameter"" cell.
 * @param parent
 * @return
 */
private Control createParameterPageControl(Composite parent){
  viewer=new PropertyHandleTableViewer(parent,true,true,true);
  TableColumn column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(""String_Node_Str"");
  column.setResizable(false);
  column.setWidth(23);
  DataSetHandle dataSetHandle=(DataSetHandle)getContainer().getModel();
  isOdaDataSetHandle=ParameterPageUtil.isOdaDataSetHandle(dataSetHandle);
  isJointOrDerivedDataSetHandle=ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle);
  if (isOdaDataSetHandle) {
    String[] cellLabels=ParameterPageUtil.odaCellLabels;
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[0]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[1]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[2]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[3]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[4]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[5]);
    column.setWidth(180);
  }
 else {
    String[] cellLabels=ParameterPageUtil.cellLabels;
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[0]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[1]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[2]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[3]);
    column.setWidth(100);
    if (isJointOrDerivedDataSetHandle) {
      column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
      column.setText(ParameterPageUtil.odaCellLabels[5]);
      column.setWidth(180);
    }
  }
  viewer.getViewer().setContentProvider(new ParameterViewContentProvider());
  viewer.getViewer().setLabelProvider(new ParameterViewLableProvider(dataSetHandle));
  adjustParameterOnPosition(parameters);
  if (ParameterPageUtil.isJointDataSetHandle(dataSetHandle)) {
    viewer.getViewer().setInput((JointDataSetHandle)dataSetHandle);
  }
 else {
    viewer.getViewer().setInput(parameters);
  }
  setToolTips();
  if (isJointOrDerivedDataSetHandle) {
    addRefreshMenu();
    addListeners();
    dataSetHandle.addListener(this);
  }
  return viewer.getControl();
}","/** 
 * Create parameter page control, if the datasetHandle is ODA, add the ""linked with report parameter"" cell.
 * @param parent
 * @return
 */
private Control createParameterPageControl(Composite parent){
  viewer=new PropertyHandleTableViewer(parent,true,true,true);
  TableColumn column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(""String_Node_Str"");
  column.setResizable(false);
  column.setWidth(23);
  DataSetHandle dataSetHandle=(DataSetHandle)getContainer().getModel();
  isOdaDataSetHandle=ParameterPageUtil.isOdaDataSetHandle(dataSetHandle);
  isJointOrDerivedDataSetHandle=ParameterPageUtil.isJointOrDerivedDataSetHandle(dataSetHandle);
  if (isOdaDataSetHandle) {
    String[] cellLabels=ParameterPageUtil.odaCellLabels;
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[0]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[1]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[2]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[3]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[4]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[5]);
    column.setWidth(180);
  }
 else {
    String[] cellLabels=ParameterPageUtil.cellLabels;
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[0]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[1]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[2]);
    column.setWidth(100);
    column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
    column.setText(cellLabels[3]);
    column.setWidth(100);
    if (isJointOrDerivedDataSetHandle) {
      column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
      column.setText(ParameterPageUtil.odaCellLabels[5]);
      column.setWidth(180);
    }
  }
  viewer.getViewer().setContentProvider(new ParameterViewContentProvider());
  viewer.getViewer().setLabelProvider(new ParameterViewLableProvider(dataSetHandle));
  adjustParameterOnPosition(parameters);
  if (ParameterPageUtil.isJointDataSetHandle(dataSetHandle)) {
    viewer.getViewer().setInput((JointDataSetHandle)dataSetHandle);
  }
 else {
    viewer.getViewer().setInput(parameters);
  }
  setToolTips();
  if (!isJointOrDerivedDataSetHandle) {
    addRefreshMenu();
    addListeners();
    dataSetHandle.addListener(this);
  }
  return viewer.getControl();
}",0.999827258593885
69863,"/** 
 * @param dataSetDesign
 * @param appContext 
 * @return
 * @throws DataException
 */
private static IBaseDataSetDesign cloneDataSetDesign(IBaseDataSetDesign dataSetDesign,Map appContext) throws DataException {
  if (dataSetDesign instanceof IScriptDataSetDesign) {
    return new ScriptDataSetAdapter(dataSetDesign);
  }
 else   if (dataSetDesign instanceof IOdaDataSetDesign) {
    return adaptOdaDataSetDesign(dataSetDesign,appContext);
  }
 else   if (dataSetDesign instanceof IJointDataSetDesign) {
    return new JointDataSetAdapter(dataSetDesign);
  }
 else {
    IBaseDataSetDesign design=DataSetDesignHelper.createAdapter(dataSetDesign);
    if (design == null)     throw new DataException(ResourceConstants.UNSUPPORTED_DATASET_TYPE,dataSetDesign.getName());
 else     return design;
  }
}","/** 
 * @param dataSetDesign
 * @param appContext 
 * @return
 * @throws DataException
 */
private static IBaseDataSetDesign cloneDataSetDesign(IBaseDataSetDesign dataSetDesign,Map appContext) throws DataException {
  if (dataSetDesign instanceof IScriptDataSetDesign) {
    return new ScriptDataSetAdapter(dataSetDesign);
  }
 else   if (dataSetDesign instanceof IOdaDataSetDesign) {
    return adaptOdaDataSetDesign(dataSetDesign,appContext);
  }
 else   if (dataSetDesign instanceof IJointDataSetDesign) {
    return new JointDataSetAdapter(dataSetDesign);
  }
 else {
    IBaseDataSetDesign design=DataSetDesignHelper.createAdapter(dataSetDesign);
    return design;
  }
}",0.8979039891818796
69864,"public static void defineDataSourceAndDataSet(DataSetHandle dataSet,DataEngine dataEngine,IModelAdapter modelAdaptor) throws BirtException {
  DataSourceHandle dataSource=dataSet.getDataSource();
  if (dataSource != null && ((DataEngineImpl)dataEngine).getDataSourceRuntime(dataSource.getName()) == null) {
    dataEngine.defineDataSource(modelAdaptor.adaptDataSource(dataSource));
  }
  if (dataSet instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)dataSet;
    Iterator iter=jointDataSet.dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          dataEngine.defineDataSource(modelAdaptor.adaptDataSource(childDataSource));
        }
        defineDataSourceAndDataSet(childDataSet,dataEngine,modelAdaptor);
      }
    }
  }
  if (dataSet instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)dataSet).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSourceAndDataSet((DataSetHandle)inputDataSet.get(i),dataEngine,modelAdaptor);
    }
  }
  if (((DataEngineImpl)dataEngine).getDataSetDesign(dataSet.getQualifiedName()) == null)   dataEngine.defineDataSet(modelAdaptor.adaptDataSet(dataSet));
}","public static void defineDataSourceAndDataSet(DataSetHandle dataSet,DataEngine dataEngine,IModelAdapter modelAdaptor) throws BirtException {
  if (dataSet == null)   return;
  DataSourceHandle dataSource=dataSet.getDataSource();
  if (dataSource != null && ((DataEngineImpl)dataEngine).getDataSourceRuntime(dataSource.getName()) == null) {
    dataEngine.defineDataSource(modelAdaptor.adaptDataSource(dataSource));
  }
  if (dataSet instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)dataSet;
    Iterator iter=jointDataSet.dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          dataEngine.defineDataSource(modelAdaptor.adaptDataSource(childDataSource));
        }
        defineDataSourceAndDataSet(childDataSet,dataEngine,modelAdaptor);
      }
    }
  }
  if (dataSet instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)dataSet).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSourceAndDataSet((DataSetHandle)inputDataSet.get(i),dataEngine,modelAdaptor);
    }
  }
  if (((DataEngineImpl)dataEngine).getDataSetDesign(dataSet.getQualifiedName()) == null)   dataEngine.defineDataSet(modelAdaptor.adaptDataSet(dataSet));
}",0.9883679943602396
69865,"public int getBaseLine(){
  if (baseLine == 0 && children.size() > 0) {
    Iterator iter=children.iterator();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      baseLine=Math.max(baseLine,child.getBaseLine());
    }
  }
  return baseLine;
}","public int getBaseLine(){
  if (baseLine == 0 && children.size() > 0) {
    Iterator iter=children.iterator();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      baseLine=Math.max(baseLine,child.getY() + child.getBaseLine());
    }
  }
  return baseLine;
}",0.9736379613356766
69866,"protected void verticalAlign(){
  Iterator iter=getChildren();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    CSSValue vAlign=child.getVerticalAlign();
    if (IStyle.TOP_VALUE.equals(vAlign)) {
      continue;
    }
    int spacing=getContentHeight() - child.getAllocatedHeight();
    if (spacing < 0) {
      spacing=0;
    }
    if (vAlign == null || IStyle.BASELINE_VALUE.equals(vAlign)) {
      int lineHeight=parent.getLineHeight();
      if (lineHeight > 0) {
        child.setPosition(child.getX(),child.getY() + getBaseLine() - child.getBaseLine() + spacing / 2);
      }
 else {
        child.setPosition(child.getX(),child.getY() + getBaseLine() - child.getBaseLine());
      }
    }
 else     if (IStyle.BOTTOM_VALUE.equals(vAlign)) {
      child.setPosition(child.getX(),child.getY() + spacing);
    }
 else     if (IStyle.MIDDLE_VALUE.equals(vAlign)) {
      child.setPosition(child.getX(),child.getY() + spacing / 2);
    }
  }
}","protected void verticalAlign(){
  Iterator iter=getChildren();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    CSSValue vAlign=child.getVerticalAlign();
    if (IStyle.TOP_VALUE.equals(vAlign)) {
      continue;
    }
    int spacing=getContentHeight() - child.getAllocatedHeight();
    if (spacing < 0) {
      spacing=0;
    }
    if (vAlign == null || IStyle.BASELINE_VALUE.equals(vAlign)) {
      int lineHeight=parent.getLineHeight();
      if (lineHeight > 0) {
        child.setPosition(child.getX(),getBaseLine() - child.getBaseLine() + spacing / 2);
      }
 else {
        child.setPosition(child.getX(),getBaseLine() - child.getBaseLine());
      }
    }
 else     if (IStyle.BOTTOM_VALUE.equals(vAlign)) {
      child.setPosition(child.getX(),child.getY() + spacing);
    }
 else     if (IStyle.MIDDLE_VALUE.equals(vAlign)) {
      child.setPosition(child.getX(),child.getY() + spacing / 2);
    }
  }
}",0.9501557632398754
69867,"public List validate(){
  List list=new ArrayList();
  if (!(this.getModelHandle().isInTemplateParameter()) && this.getCube() == null) {
    ExtendedElementException extendedException=new ExtendedElementException(this.getModelHandle().getElement(),""String_Node_Str"",""String_Node_Str"",new Object[]{""String_Node_Str""},Messages.getResourceBundle());
    list.add(extendedException);
  }
  return list;
}","public List validate(){
  List list=new ArrayList();
  if (!(this.getModelHandle().isInTemplateParameter()) && this.getCube() == null && !(this.getModelHandle().getRoot() instanceof LibraryHandle)) {
    ExtendedElementException extendedException=new ExtendedElementException(this.getModelHandle().getElement(),""String_Node_Str"",""String_Node_Str"",new Object[]{""String_Node_Str""},Messages.getResourceBundle());
    list.add(extendedException);
  }
  return list;
}",0.9269988412514484
69868,"private void drawDiagonalLine(ICellContent cell,double cellWidth){
  if (cellWidth == 0)   return;
  int cellHeight=WordUtil.convertTo(getCellHeight(cell),0) / 20;
  if (cellHeight == 0)   return;
  DiagonalLineInfo diagonalLineInfo=new DiagonalLineInfo();
  int diagonalWidth=PropertyUtil.getDimensionValue(cell,cell.getDiagonalWidth(),(int)cellWidth) / 1000;
  diagonalLineInfo.setDiagonalLine(cell.getDiagonalNumber(),cell.getDiagonalStyle(),diagonalWidth);
  diagonalLineInfo.setAntidiagonalLine(0,null,0);
  diagonalLineInfo.setCoordinateSize(cellWidth,cellHeight);
  String lineColor=WordUtil.parseColor(cell.getComputedStyle().getColor());
  diagonalLineInfo.setColor(lineColor);
  wordWriter.drawDiagonalLine(diagonalLineInfo);
}","private void drawDiagonalLine(ICellContent cell,double cellWidth){
  if (cellWidth == 0)   return;
  int cellHeight=WordUtil.convertTo(getCellHeight(cell),0) / 20;
  if (cellHeight == 0)   return;
  DiagonalLineInfo diagonalLineInfo=new DiagonalLineInfo();
  int diagonalWidth=PropertyUtil.getDimensionValue(cell,cell.getDiagonalWidth(),(int)cellWidth) / 1000;
  diagonalLineInfo.setDiagonalLine(cell.getDiagonalNumber(),cell.getDiagonalStyle(),diagonalWidth);
  diagonalLineInfo.setAntidiagonalLine(0,null,0);
  diagonalLineInfo.setCoordinateSize(cellWidth,cellHeight);
  String lineColor=null;
  if (cell.getDiagonalColor() != null) {
    lineColor=WordUtil.parseColor(cell.getDiagonalColor());
  }
 else {
    lineColor=WordUtil.parseColor(cell.getComputedStyle().getColor());
  }
  diagonalLineInfo.setColor(lineColor);
  wordWriter.drawDiagonalLine(diagonalLineInfo);
}",0.91495965238982
69869,"public static String parseColor(String color){
  if (""String_Node_Str"".equalsIgnoreCase(color) || color == null) {
    return null;
  }
  String[] values=color.substring(color.indexOf(""String_Node_Str"") + 1,color.length() - 1).split(""String_Node_Str"");
  String value=""String_Node_Str"";
  for (int i=0; i < values.length; i++) {
    try {
      String s=Integer.toHexString((Integer.parseInt(values[i].trim())));
      if (s.length() == 1) {
        s=""String_Node_Str"" + s;
      }
      value+=s;
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      value=null;
    }
  }
  return value;
}","public static String parseColor(String color){
  if (""String_Node_Str"".equalsIgnoreCase(color) || color == null) {
    return null;
  }
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (color.equalsIgnoreCase(""String_Node_Str""))   return ""String_Node_Str"";
  String[] values=color.substring(color.indexOf(""String_Node_Str"") + 1,color.length() - 1).split(""String_Node_Str"");
  String value=""String_Node_Str"";
  for (int i=0; i < values.length; i++) {
    try {
      String s=Integer.toHexString((Integer.parseInt(values[i].trim())));
      if (s.length() == 1) {
        s=""String_Node_Str"" + s;
      }
      value+=s;
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      value=null;
    }
  }
  return value;
}",0.4856700232378002
69870,"/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param containerName
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath containerName,String fileName,final String sourceFileName,String cheatSheetId,boolean showCheatSheet,IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(CREATING + fileName,2);
  IResource resource=ResourcesPlugin.getWorkspace().getRoot().findMember(containerName);
  IContainer container=null;
  if (resource == null || !resource.exists() || !(resource instanceof IContainer)) {
    IFolder folder=createFolderHandle(containerName);
    UIUtil.createFolder(folder,monitor);
    container=folder;
  }
 else {
    container=(IContainer)resource;
  }
  final IFile file=container.getFile(new Path(fileName));
  final String cheatId=cheatSheetId;
  final boolean showCheat=showCheatSheet;
  try {
    ReportDesignHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference(file.getProject())) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference(file.getProject()));
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()) != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()));
    }
    if (isPredifinedTemplate(sourceFileName)) {
      handle.setDisplayName(null);
      handle.setDescription(null);
    }
    String bidiOrientation;
    if (templateChoicePage.isLTRDirection())     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
 else     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
    handle.setBidiOrientation(bidiOrientation);
    handle.saveAs(file.getLocation().toOSString());
    handle.close();
  }
 catch (  Exception e) {
  }
  container.refreshLocal(IResource.DEPTH_INFINITE,monitor);
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        IDE.openEditor(page,file,true);
        BasicNewProjectResourceWizard.updatePerspective(configElement);
        if (showCheat && !cheatId.equals(""String_Node_Str"")) {
          Object oldData=Display.getCurrent().getActiveShell().getData();
          if (oldData instanceof TrayDialog) {
            Display.getCurrent().getActiveShell().setData(null);
          }
          new OpenCheatSheetAction(cheatId).run();
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}","/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param containerName
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath containerName,String fileName,final String sourceFileName,String cheatSheetId,boolean showCheatSheet,IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(CREATING + fileName,2);
  IResource resource=ResourcesPlugin.getWorkspace().getRoot().findMember(containerName);
  IContainer container=null;
  if (resource == null || !resource.exists() || !(resource instanceof IContainer)) {
    IFolder folder=createFolderHandle(containerName);
    UIUtil.createFolder(folder,monitor);
    container=folder;
  }
 else {
    container=(IContainer)resource;
  }
  final IFile file=container.getFile(new Path(fileName));
  final String cheatId=cheatSheetId;
  final boolean showCheat=showCheatSheet;
  try {
    ReportDesignHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference(file.getProject())) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference(file.getProject()));
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()) != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference(file.getProject()));
    }
    if (isPredifinedTemplate(sourceFileName)) {
      handle.setDisplayName(null);
      handle.setDescription(null);
    }
    String bidiOrientation;
    if (templateChoicePage.isLTRDirection())     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_LTR;
 else     bidiOrientation=DesignChoiceConstants.BIDI_DIRECTION_RTL;
    handle.setBidiOrientation(bidiOrientation);
    handle.saveAs(file.getLocation().toOSString());
    handle.close();
  }
 catch (  Exception e) {
  }
  file.refreshLocal(IResource.DEPTH_INFINITE,monitor);
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        IDE.openEditor(page,file,true);
        BasicNewProjectResourceWizard.updatePerspective(configElement);
        if (showCheat && !cheatId.equals(""String_Node_Str"")) {
          Object oldData=Display.getCurrent().getActiveShell().getData();
          if (oldData instanceof TrayDialog) {
            Display.getCurrent().getActiveShell().setData(null);
          }
          new OpenCheatSheetAction(cheatId).run();
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}",0.99782645042635
69871,"protected void drawCellDiagonal(CellArea cell){
  DiagonalInfo diagonalInfo=cell.getDiagonalInfo();
  if (diagonalInfo != null) {
    int startX=currentX + getX(cell);
    int startY=currentY + getY(cell);
    int width=getWidth(cell);
    int height=getHeight(cell);
    int dw=diagonalInfo.getDiagonalWidth();
    int ds=diagonalInfo.getDiagonalStyle();
    if (ds == DiagonalInfo.BORDER_STYLE_DOUBLE) {
      ds=DiagonalInfo.BORDER_STYLE_SOLID;
    }
switch (diagonalInfo.getDiagonalNumber()) {
case 2:
      pageGraphic.drawLine(startX,startY + dw / 2,startX + width,startY + height / 2 - dw / 2,getScaledValue(diagonalInfo.getDiagonalWidth()),diagonalInfo.getColor(),ds);
    pageGraphic.drawLine(startX,startY + dw / 2,startX + width / 2,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),ds);
  break;
case 3:
pageGraphic.drawLine(startX,startY + dw / 2,startX + width,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),ds);
pageGraphic.drawLine(startX,startY + dw / 2,startX + width,startY + height / 2 - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),ds);
pageGraphic.drawLine(startX,startY + dw / 2,startX + width / 2,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),ds);
break;
default :
pageGraphic.drawLine(startX,startY + dw / 2,startX + width,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),ds);
break;
}
dw=diagonalInfo.getAntidiagonalWidth();
ds=diagonalInfo.getAntidiagonalStyle();
if (ds == DiagonalInfo.BORDER_STYLE_DOUBLE) {
ds=DiagonalInfo.BORDER_STYLE_SOLID;
}
switch (diagonalInfo.getAntidiagonalNumber()) {
case 2:
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width / 2,startY + dw / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),ds);
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width,startY + height / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),ds);
break;
case 3:
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width / 2,startY + dw / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),ds);
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width,startY + height / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),ds);
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width,startY + dw / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),ds);
break;
default :
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width,startY + dw / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),ds);
break;
}
}
}","protected void drawCellDiagonal(CellArea cell){
  DiagonalInfo diagonalInfo=cell.getDiagonalInfo();
  if (diagonalInfo != null) {
    int startX=currentX + getX(cell);
    int startY=currentY + getY(cell);
    int width=getWidth(cell);
    int height=getHeight(cell);
    int dw=diagonalInfo.getDiagonalWidth();
    int ds=diagonalInfo.getDiagonalStyle();
    if (ds == DiagonalInfo.BORDER_STYLE_DOUBLE) {
      ds=DiagonalInfo.BORDER_STYLE_SOLID;
    }
switch (diagonalInfo.getDiagonalNumber()) {
case 2:
      pageGraphic.drawLine(startX + width / 2,startY,startX + width,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),ds);
    pageGraphic.drawLine(startX,startY + height / 2,startX + width,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),ds);
  break;
case 3:
pageGraphic.drawLine(startX,startY + dw / 2,startX + width,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),ds);
pageGraphic.drawLine(startX + width / 2,startY + dw / 2,startX + width,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),ds);
pageGraphic.drawLine(startX,startY + height / 2,startX + width,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),ds);
break;
default :
pageGraphic.drawLine(startX,startY + dw / 2,startX + width,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),ds);
break;
}
}
}",0.5075439030422954
69872,"/** 
 * Makes one pass over the odiResult and calculates values for all aggregate expressions. odiResult must be open, and cursor placed at first row. Upon return, odiResult is rewinded to first row. Before calling this method, a Javascript ""row"" object must be set up in the passed-in JS context and bound to the passed in odiResult.
 */
private void calculate() throws DataException {
}","/** 
 * Makes one pass over the odiResult and calculates values for all aggregate expressions. odiResult must be open, and cursor placed at first row. Upon return, odiResult is rewinded to first row. Before calling this method, a Javascript ""row"" object must be set up in the passed-in JS context and bound to the passed in odiResult.
 */
private void calculate() throws DataException {
  List validAggregations=new ArrayList();
  boolean[] populateAggrValue=new boolean[this.currentAggrCount];
  int count=1;
  for (int i=0; i < this.currentAggrCount; i++) {
    validAggregations.add(new Integer(i));
    if (this.getAggrInfo(i).getAggregation().getNumberOfPasses() > 1)     populateAggrValue[i]=false;
 else     populateAggrValue[i]=true;
    accumulatorManagers[i]=new AccumulatorManager(this.getAggrInfo(i).getAggregation());
  }
  while (validAggregations.size() > 0) {
    int[] validAggregationArray=new int[validAggregations.size()];
    for (int i=0; i < validAggregations.size(); i++) {
      validAggregationArray[i]=((Integer)validAggregations.get(i)).intValue();
    }
    assert(this.getCurrentResult() == null || this.getCurrentResultIndex() == 0);
    if (this.getCurrentResult() == null) {
      return;
    }
    pass(populateAggrValue,validAggregationArray);
    this.first(0);
    count++;
    prepareNextIteration(validAggregations,populateAggrValue,count);
  }
}",0.4376762549351382
69873,"private void drawDiagonalLine(ICellContent cell,double cellWidth){
  if (cellWidth == 0)   return;
  int cellHeight=WordUtil.convertTo(getCellHeight(cell),0) / 20;
  if (cellHeight == 0)   return;
  DiagonalLineInfo diagonalLineInfo=new DiagonalLineInfo();
  int diagonalWidth=PropertyUtil.getDimensionValue(cell,cell.getDiagonalWidth(),(int)cellWidth) / 1000;
  diagonalLineInfo.setDiagonalLine(cell.getDiagonalNumber(),cell.getDiagonalStyle(),diagonalWidth);
  int antidiagonalWidth=PropertyUtil.getDimensionValue(cell,cell.getAntidiagonalWidth(),(int)cellWidth) / 1000;
  diagonalLineInfo.setAntidiagonalLine(cell.getAntidiagonalNumber(),cell.getAntidiagonalStyle(),antidiagonalWidth);
  diagonalLineInfo.setCoordinateSize(cellWidth,cellHeight);
  String lineColor=WordUtil.parseColor(cell.getComputedStyle().getColor());
  diagonalLineInfo.setColor(lineColor);
  wordWriter.drawDiagonalLine(diagonalLineInfo);
}","private void drawDiagonalLine(ICellContent cell,double cellWidth){
  if (cellWidth == 0)   return;
  int cellHeight=WordUtil.convertTo(getCellHeight(cell),0) / 20;
  if (cellHeight == 0)   return;
  DiagonalLineInfo diagonalLineInfo=new DiagonalLineInfo();
  int diagonalWidth=PropertyUtil.getDimensionValue(cell,cell.getDiagonalWidth(),(int)cellWidth) / 1000;
  diagonalLineInfo.setDiagonalLine(cell.getDiagonalNumber(),cell.getDiagonalStyle(),diagonalWidth);
  diagonalLineInfo.setAntidiagonalLine(0,null,0);
  diagonalLineInfo.setCoordinateSize(cellWidth,cellHeight);
  String lineColor=WordUtil.parseColor(cell.getComputedStyle().getColor());
  diagonalLineInfo.setColor(lineColor);
  wordWriter.drawDiagonalLine(diagonalLineInfo);
}",0.8401937046004843
69874,"public void startCell(ICellContent cell){
  rowFilledFlag=true;
  context.startCell();
  int columnId=cell.getColumn();
  List<SpanInfo> spans=context.getSpans(columnId);
  if (spans != null) {
    for (int i=0; i < spans.size(); i++) {
      wordWriter.writeSpanCell(spans.get(i));
    }
  }
  int columnSpan=cell.getColSpan();
  int rowSpan=cell.getRowSpan();
  int cellWidth=context.getCellWidth(columnId,columnSpan);
  IStyle style=computeStyle(cell.getComputedStyle());
  if (rowSpan > 1) {
    context.addSpan(columnId,columnSpan,cellWidth,rowSpan,style);
  }
  SpanInfo info=null;
  if (columnSpan > 1 || rowSpan > 1) {
    info=new SpanInfo(columnId,columnSpan,cellWidth,true,style);
  }
  wordWriter.startTableCell(cellWidth,style,info);
  context.addWidth(getCellWidth(cellWidth,style));
  writeTableToc();
  if (cell.getDiagonalNumber() != 0 || cell.getAntidiagonalNumber() != 0) {
    drawDiagonalLine(cell,WordUtil.twipToPt(cellWidth));
  }
}","public void startCell(ICellContent cell){
  rowFilledFlag=true;
  context.startCell();
  int columnId=cell.getColumn();
  List<SpanInfo> spans=context.getSpans(columnId);
  if (spans != null) {
    for (int i=0; i < spans.size(); i++) {
      wordWriter.writeSpanCell(spans.get(i));
    }
  }
  int columnSpan=cell.getColSpan();
  int rowSpan=cell.getRowSpan();
  int cellWidth=context.getCellWidth(columnId,columnSpan);
  IStyle style=computeStyle(cell.getComputedStyle());
  if (rowSpan > 1) {
    context.addSpan(columnId,columnSpan,cellWidth,rowSpan,style);
  }
  SpanInfo info=null;
  if (columnSpan > 1 || rowSpan > 1) {
    info=new SpanInfo(columnId,columnSpan,cellWidth,true,style);
  }
  wordWriter.startTableCell(cellWidth,style,info);
  context.addWidth(getCellWidth(cellWidth,style));
  writeTableToc();
  if (cell.getDiagonalNumber() != 0) {
    drawDiagonalLine(cell,WordUtil.twipToPt(cellWidth));
  }
}",0.9802455953016552
69875,"public void setDiagonalLine(int diagonalCount,String diagonalStyle,int diagonalWidth){
  this.diagonalCount=diagonalCount;
  this.diagonalStyle=diagonalStyle;
  this.diagonalWidth=diagonalWidth;
}","public void setDiagonalLine(int diagonalCount,String diagonalStyle,int diagonalWidth){
  if (diagonalCount > 3) {
    this.diagonalCount=3;
  }
 else {
    this.diagonalCount=diagonalCount;
  }
  this.diagonalStyle=diagonalStyle;
  this.diagonalWidth=diagonalWidth;
}",0.7041036717062635
69876,"public boolean performOk(){
  if (doSaveEmptyParameter(parameters)) {
    refreshPositions();
    if (this.modelChanged && this.getContainer() != null && this.getContainer() instanceof DataSetEditor) {
      this.modelChanged=false;
      ((DataSetHandle)getContainer().getModel()).removeListener(this);
      ((DataSetEditor)getContainer()).updateDataSetDesign(this);
    }
    return super.performOk();
  }
 else {
    String name=getNoneValuedParameterName();
    TestDialog a=new TestDialog(null,""String_Node_Str"");
    if (a.open() == Dialog.OK)     return true;
 else     return false;
  }
}","public boolean performOk(){
  if (doSaveEmptyParameter(parameters)) {
    refreshPositions();
    if (this.modelChanged && this.getContainer() != null && this.getContainer() instanceof DataSetEditor) {
      this.modelChanged=false;
      ((DataSetHandle)getContainer().getModel()).removeListener(this);
      ((DataSetEditor)getContainer()).updateDataSetDesign(this);
    }
    return super.performOk();
  }
 else {
    String name=getNoneValuedParameterName();
    boolean confirm=MessageDialog.openConfirm(null,Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new Object[]{name}));
    if (confirm)     ((DataSetEditor)getContainer()).updateDataSetDesign(this);
    return confirm;
  }
}",0.7488653555219364
69877,"void mouseDown(MouseEvent e){
  if (e.widget instanceof Canvas) {
    int markerIndex=((Integer)e.widget.getData()).intValue();
    switchMarkerType(markerIndex);
    if (!this.getShell().isDisposed()) {
      this.getShell().close();
    }
  }
}","void mouseDown(MouseEvent e){
  if (e.widget instanceof Canvas) {
    int markerIndex=((Integer)e.widget.getData()).intValue();
    switchMarkerType(markerIndex);
    if (!this.isDisposed() && !this.getShell().isDisposed()) {
      this.getShell().close();
    }
  }
}",0.9571984435797666
69878,"private void switchMarkerType(int newMarkerTypeIndex){
  MarkerType newType=MarkerType.getByName(typeNameSet[newMarkerTypeIndex]);
  if (newType == MarkerType.ICON_LITERAL) {
    MarkerIconDialog iconDialog=new MarkerIconDialog(this.getShell(),getMarker().getFill());
    if (iconDialog.open() == Window.OK) {
      Fill resultFill=iconDialog.getFill();
      if (resultFill.eAdapters().isEmpty()) {
        resultFill.eAdapters().addAll(getMarker().eAdapters());
      }
      getMarker().setFill(resultFill);
    }
 else {
      return;
    }
  }
  getMarker().setType(newType);
  Control[] children=cmpType.getChildren();
  children[newMarkerTypeIndex].redraw();
  children[markerTypeIndex].redraw();
  updateMarkerPreview();
}","private void switchMarkerType(int newMarkerTypeIndex){
  MarkerType newType=MarkerType.getByName(typeNameSet[newMarkerTypeIndex]);
  if (newType == MarkerType.ICON_LITERAL) {
    MarkerIconDialog iconDialog=new MarkerIconDialog(new Shell(),getMarker().getFill());
    if (iconDialog.open() == Window.OK) {
      Fill resultFill=iconDialog.getFill();
      if (resultFill.eAdapters().isEmpty()) {
        resultFill.eAdapters().addAll(getMarker().eAdapters());
      }
      getMarker().setFill(resultFill);
    }
 else {
      return;
    }
  }
  getMarker().setType(newType);
  Control[] children=cmpType.getChildren();
  children[newMarkerTypeIndex].redraw();
  children[markerTypeIndex].redraw();
  updateMarkerPreview();
}",0.9917582417582418
69879,"protected Control createContents(Composite parent){
  getShell().setText(Messages.getString(""String_Node_Str""));
  getShell().setSize(600,435);
  UIHelper.centerOnScreen(getShell());
  Control c=super.createContents(parent);
  if (icon instanceof EmbeddedImage) {
    btnEmbeddedImage.setSelection(true);
    switchTo(EMBEDDED_TYPE);
  }
  c.pack();
  preview();
  return c;
}","protected Control createContents(Composite parent){
  getShell().setText(Messages.getString(""String_Node_Str""));
  Control c=super.createContents(parent);
  if (icon instanceof EmbeddedImage) {
    btnEmbeddedImage.setSelection(true);
    switchTo(EMBEDDED_TYPE);
  }
  c.pack();
  preview();
  Point size=getShell().computeSize(SWT.DEFAULT,SWT.DEFAULT);
  getShell().setSize(size.x,size.y);
  UIHelper.centerOnScreen(getShell());
  return c;
}",0.4048780487804878
69880,"private void swtichToLocalType(){
  Composite buttonBar=new Composite(inputArea,SWT.NONE);
  GridLayout gl=new GridLayout();
  gl.marginWidth=0;
  gl.marginHeight=0;
  buttonBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  buttonBar.setLayout(gl);
  Label description=new Label(buttonBar,SWT.NONE);
  description.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  description.setText(Messages.getString(""String_Node_Str""));
  btnBrowse=new Button(buttonBar,SWT.PUSH);
  btnBrowse.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_END);
  gd.grabExcessHorizontalSpace=true;
  btnBrowse.setLayoutData(gd);
  btnBrowse.addSelectionListener(this);
}","private void swtichToLocalType(){
  Composite buttonBar=new Composite(inputArea,SWT.NONE);
  GridLayout gl=new GridLayout();
  gl.marginWidth=0;
  gl.marginHeight=0;
  buttonBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  buttonBar.setLayout(gl);
  Label description=new Label(buttonBar,SWT.WRAP);
  description.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.HORIZONTAL_ALIGN_BEGINNING));
  description.setText(Messages.getString(""String_Node_Str""));
  btnBrowse=new Button(buttonBar,SWT.PUSH);
  btnBrowse.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_END);
  gd.grabExcessHorizontalSpace=true;
  btnBrowse.setLayoutData(gd);
  btnBrowse.addSelectionListener(this);
}",0.976303317535545
69881,"public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    reloadEditorInput();
    doSave(null);
  }
 else   if (prePage != this && (prePage.isDirty() || prePage.getStaleType() != IPageStaleType.NONE)) {
    ModuleHandle model=getProvider().getReportModuleHandle(getEditorInput(),false);
    if (ModuleUtil.compareReportVersion(ModuleUtil.getReportVersion(),model.getVersion()) > 0) {
      if (!MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        return false;
      }
    }
    prePage.doSave(null);
    UIUtil.doFinishSava(getModel());
    prePage.markPageStale(IPageStaleType.NONE);
    refreshDocument();
    markPageStale(IPageStaleType.NONE);
  }
  hookModelEventManager(getModel());
  ReportRequest request=new ReportRequest(ReportXMLSourceEditorFormPage.this);
  List list=new ArrayList();
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator(getModel()).notifyRequest(request);
  reportXMLEditor.setFocus();
  return true;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    reloadEditorInput();
    doSave(null);
  }
 else   if (prePage != this && (prePage.isDirty() || prePage.getStaleType() != IPageStaleType.NONE)) {
    ModuleHandle model=getProvider().getReportModuleHandle(getEditorInput(),false);
    if (ModuleUtil.compareReportVersion(ModuleUtil.getReportVersion(),model.getVersion()) > 0) {
      if (!MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        return false;
      }
    }
    prePage.doSave(null);
    UIUtil.doFinishSava(getModel());
    prePage.markPageStale(IPageStaleType.NONE);
    refreshDocument();
    markPageStale(IPageStaleType.NONE);
  }
  hookModelEventManager(getModel());
  SessionHandleAdapter.getInstance().getMediator(getProvider().getReportModuleHandle(getEditorInput())).addColleague(this);
  ReportRequest request=new ReportRequest(ReportXMLSourceEditorFormPage.this);
  List list=new ArrayList();
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator(getModel()).notifyRequest(request);
  reportXMLEditor.setFocus();
  return true;
}",0.952887537993921
69882,"private void doFinish(IPath locationPath,String fileName,String sourceFileName,IProgressMonitor monitor){
  monitor.beginTask(CREATING + fileName,2);
  File container=null;
  try {
    container=new File(locationPath.toString());
    if (!container.exists()) {
      container.mkdirs();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  if (container == null) {
    return;
  }
  final File file=new File(locationPath.toString(),fileName);
  try {
    ModuleHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().openLibrary(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference() != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference());
    }
    if (inPredifinedTemplateFolder(sourceFileName)) {
      String description=handle.getDescription();
      if (description != null && description.trim().length() > 0) {
        handle.setDescription(Messages.getString(description));
      }
    }
    handle.saveAs(file.getAbsolutePath());
    handle.close();
  }
 catch (  Exception e) {
  }
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        page.openEditor(new ReportEditorInput(file),IReportEditorContants.LIBRARY_EDITOR_ID,true);
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
  fireLibraryChanged(fileName);
}","private void doFinish(IPath locationPath,String fileName,String sourceFileName,IProgressMonitor monitor){
  monitor.beginTask(CREATING + fileName,2);
  File container=null;
  try {
    container=new File(locationPath.toString());
    if (!container.exists()) {
      container.mkdirs();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  if (container == null) {
    return;
  }
  final File file=new File(locationPath.toString(),fileName);
  try {
    ModuleHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createLibraryFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (ReportPlugin.getDefault().getDefaultUnitPreference() != null) {
      handle.setStringProperty(ModuleHandle.UNITS_PROP,ReportPlugin.getDefault().getDefaultUnitPreference());
    }
    if (inPredifinedTemplateFolder(sourceFileName)) {
      String description=handle.getDescription();
      if (description != null && description.trim().length() > 0) {
        handle.setDescription(Messages.getString(description));
      }
    }
    handle.saveAs(file.getAbsolutePath());
    handle.close();
  }
 catch (  Exception e) {
  }
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        page.openEditor(new ReportEditorInput(file),IReportEditorContants.LIBRARY_EDITOR_ID,true);
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
  fireLibraryChanged(fileName);
}",0.994136460554371
69883,"/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,String link){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str""+ shapeCount+ ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    link=codeLink(link);
    println(""String_Node_Str"" + link + ""String_Node_Str""+ link+ ""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,String link){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    link=codeLink(link);
    println(""String_Node_Str"" + link + ""String_Node_Str""+ link+ ""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}",0.9915508312891796
69884,"private void refreshValues(){
  resultList.clear();
  if (columnChooser.isEnabled()) {
    ResultSetColumnHandle selectedColumn=null;
    try {
      IQueryDefinition query=DataUtil.getPreparedQuery(engine,getDataSetHandle()).getReportQueryDefn();
      String queryExpr=null;
      for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
        ResultSetColumnHandle column=(ResultSetColumnHandle)iter.next();
        if (column.getColumnName().equals(columnChooser.getText())) {
          queryExpr=DEUtil.getResultSetColumnExpression(column.getColumnName());
          selectedColumn=column;
          break;
        }
      }
      if (queryExpr == null) {
        return;
      }
      ScriptExpression expression=new ScriptExpression(queryExpr);
      String columnBindingName=""String_Node_Str"";
      Binding binding=new Binding(columnBindingName);
      binding.setExpression(expression);
      if (expression != null)       binding.setDataType(expression.getDataType());
      query.addBinding(binding);
      DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,getDataSetHandle().getModuleHandle());
      DataRequestSession session=DataRequestSession.newSession(context);
      IQueryResults results=DataSetProvider.getCurrentInstance().execute(getDataSetHandle(),query,true,true,true,session);
      if (results != null) {
        IResultIterator iter=results.getResultIterator();
        if (iter != null) {
          while (iter.next()) {
            String result=null;
            Object data=iter.getValue(columnBindingName);
            if (data instanceof Date) {
              result=convertToStandardFormat((Date)data);
            }
 else {
              if (data == null) {
                result=nullValue;
                hasNullValue=true;
              }
 else {
                result=String.valueOf(data);
              }
            }
            if (!resultList.contains(result)) {
              resultList.add(result);
            }
          }
        }
        results.close();
        session.shutdown();
      }
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
      valueList.removeAll();
      valueList.deselectAll();
      updateButtons();
    }
    filteValues();
  }
 else {
    valueList.removeAll();
    valueList.deselectAll();
    updateButtons();
  }
}","private void refreshValues(){
  resultList.clear();
  if (columnChooser.isEnabled()) {
    ResultSetColumnHandle selectedColumn=null;
    try {
      IQueryDefinition query=DataUtil.getPreparedQuery(engine,getDataSetHandle()).getReportQueryDefn();
      String queryExpr=null;
      int queryValueType=-1;
      for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
        ResultSetColumnHandle column=(ResultSetColumnHandle)iter.next();
        if (column.getColumnName().equals(columnChooser.getText())) {
          queryExpr=DEUtil.getResultSetColumnExpression(column.getColumnName());
          queryValueType=DataAdapterUtil.adaptModelDataType(column.getDataType());
          selectedColumn=column;
          break;
        }
      }
      if (queryExpr == null) {
        return;
      }
      ScriptExpression expression=new ScriptExpression(queryExpr);
      String columnBindingName=""String_Node_Str"";
      Binding binding=new Binding(columnBindingName);
      binding.setExpression(expression);
      binding.setDataType(queryValueType);
      query.addBinding(binding);
      DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,getDataSetHandle().getModuleHandle());
      DataRequestSession session=DataRequestSession.newSession(context);
      IQueryResults results=DataSetProvider.getCurrentInstance().execute(getDataSetHandle(),query,true,true,true,session);
      if (results != null) {
        IResultIterator iter=results.getResultIterator();
        if (iter != null) {
          while (iter.next()) {
            String result=null;
            Object data=iter.getValue(columnBindingName);
            if (data instanceof Date) {
              result=convertToStandardFormat((Date)data);
            }
 else {
              if (data == null) {
                result=nullValue;
                hasNullValue=true;
              }
 else {
                result=String.valueOf(data);
              }
            }
            if (!resultList.contains(result)) {
              resultList.add(result);
            }
          }
        }
        results.close();
        session.shutdown();
      }
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
      valueList.removeAll();
      valueList.deselectAll();
      updateButtons();
    }
    filteValues();
  }
 else {
    valueList.removeAll();
    valueList.deselectAll();
    updateButtons();
  }
}",0.964196502914238
69885,"/** 
 * Sets the <code>'class'</code> property and stores the style to styleMap object.
 * @param styleClass the style name
 */
protected void setStyleName(String styleClass,IContent content){
  StringBuffer classBuffer=new StringBuffer();
  if (enableMetadata) {
    String metadataStyleClass=metadataEmitter.getMetadataStyleClass(content);
    if (null != metadataStyleClass) {
      classBuffer.append(metadataStyleClass);
    }
  }
  if (!enableInlineStyle && styleClass != null) {
    if (classBuffer.length() != 0) {
      classBuffer.append(""String_Node_Str"");
    }
    if (null != htmlIDNamespace) {
      classBuffer.append(getStyleClassWithNameSpace(styleClass));
    }
 else {
      classBuffer.append(styleClass);
    }
  }
  if (hasCsslinks) {
    Object genBy=content.getGenerateBy();
    if (genBy instanceof StyledElementDesign) {
      DesignElementHandle handle=((StyledElementDesign)genBy).getHandle();
      if (handle != null) {
        String name=handle.getStringProperty(ReportItemHandle.STYLE_PROP);
        if (name != null) {
          if (classBuffer.length() != 0) {
            classBuffer.append(""String_Node_Str"" + name);
          }
 else {
            classBuffer.append(name);
          }
        }
      }
    }
  }
  if (classBuffer.length() != 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,classBuffer.toString());
  }
}","/** 
 * Sets the <code>'class'</code> property and stores the style to styleMap object.
 * @param styleClass the style name
 */
protected void setStyleName(String styleClass,IContent content){
  StringBuffer classBuffer=new StringBuffer();
  if (enableMetadata) {
    String metadataStyleClass=metadataEmitter.getMetadataStyleClass(content);
    if (null != metadataStyleClass) {
      classBuffer.append(metadataStyleClass);
    }
  }
  if (!enableInlineStyle && styleClass != null && styleClass.length() > 0) {
    String[] strings=styleClass.split(""String_Node_Str"");
    for (    String string : strings) {
      string=string.trim();
      if (string.length() > 0) {
        if (classBuffer.length() > 0) {
          classBuffer.append(' ');
        }
        if (null != htmlIDNamespace) {
          classBuffer.append(htmlIDNamespace);
        }
        classBuffer.append(string);
      }
    }
  }
  if (hasCsslinks) {
    Object genBy=content.getGenerateBy();
    if (genBy instanceof StyledElementDesign) {
      DesignElementHandle handle=((StyledElementDesign)genBy).getHandle();
      if (handle != null) {
        String name=handle.getStringProperty(ReportItemHandle.STYLE_PROP);
        if (name != null) {
          if (classBuffer.length() != 0) {
            classBuffer.append(""String_Node_Str"" + name);
          }
 else {
            classBuffer.append(name);
          }
        }
      }
    }
  }
  if (classBuffer.length() != 0) {
    writer.attribute(HTMLTags.ATTR_CLASS,classBuffer.toString());
  }
}",0.8372576177285319
69886,"/** 
 * Draws a line with the line-style specified in advance from the start position to the end position with the given line width, color, and style on the PPT. If the line-style is NOT set before invoking this method, ""solid"" will be used as the default line-style.
 * @param startX the start X coordinate of the line
 * @param startY the start Y coordinate of the line
 * @param endX the end X coordinate of the line
 * @param endY the end Y coordinate of the line
 * @param width the lineWidth
 * @param color the color of the line
 */
private void drawRawLine(double startX,double startY,double endX,double endY,double width,Color color,int lineStyle){
  print(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  print(""String_Node_Str"" + startX + ""String_Node_Str""+ startY+ ""String_Node_Str"");
  print(""String_Node_Str"" + endX + ""String_Node_Str""+ endY+ ""String_Node_Str"");
  print(""String_Node_Str"" + getColorString(color) + ""String_Node_Str"");
  print(""String_Node_Str"" + width + ""String_Node_Str"");
  if (lineStyle == BorderInfo.BORDER_STYLE_DASHED) {
    println(""String_Node_Str"");
  }
 else   if (lineStyle == BorderInfo.BORDER_STYLE_DOTTED) {
    println(""String_Node_Str"");
  }
 else   if (lineStyle == BorderInfo.BORDER_STYLE_DOUBLE) {
    println(""String_Node_Str"");
  }
 else {
    println(""String_Node_Str"");
    return;
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * Draws a line with the line-style specified in advance from the start position to the end position with the given line width, color, and style on the PPT. If the line-style is NOT set before invoking this method, ""solid"" will be used as the default line-style.
 * @param startX the start X coordinate of the line
 * @param startY the start Y coordinate of the line
 * @param endX the end X coordinate of the line
 * @param endY the end Y coordinate of the line
 * @param width the lineWidth
 * @param color the color of the line
 */
private void drawRawLine(double startX,double startY,double endX,double endY,double width,Color color,int lineStyle){
  boolean needflip=false;
  if (endX > startX && endY < startY || endX < startX && endY > startY) {
    needflip=true;
  }
  print(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  print(""String_Node_Str"");
  if (needflip) {
    print(""String_Node_Str"" + startX + ""String_Node_Str""+ endY+ ""String_Node_Str"");
    print(""String_Node_Str"" + endX + ""String_Node_Str""+ startY+ ""String_Node_Str"");
  }
 else {
    print(""String_Node_Str"" + startX + ""String_Node_Str""+ startY+ ""String_Node_Str"");
    print(""String_Node_Str"" + endX + ""String_Node_Str""+ endY+ ""String_Node_Str"");
  }
  print(""String_Node_Str"" + getColorString(color) + ""String_Node_Str"");
  print(""String_Node_Str"" + width + ""String_Node_Str"");
  if (lineStyle == BorderInfo.BORDER_STYLE_DASHED) {
    println(""String_Node_Str"");
    println(""String_Node_Str"");
  }
 else   if (lineStyle == BorderInfo.BORDER_STYLE_DOTTED) {
    println(""String_Node_Str"");
    println(""String_Node_Str"");
  }
 else   if (lineStyle == BorderInfo.BORDER_STYLE_DOUBLE) {
    println(""String_Node_Str"");
    println(""String_Node_Str"");
  }
 else {
    println(""String_Node_Str"");
    return;
  }
  println(""String_Node_Str"");
}",0.8462249614791988
69887,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(AttributeBuilderTest.class);
  suite.addTestSuite(HTMLReportEmitterTest.class);
  suite.addTestSuite(MetadataEmitterTest.class);
  suite.addTestSuite(TableLayoutTest.class);
  suite.addTestSuite(ScriptTest.class);
  suite.addTestSuite(DrillThroughActionScriptTest.class);
  suite.addTestSuite(HTMLEmitterOptimizeTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(AttributeBuilderTest.class);
  suite.addTestSuite(HTMLReportEmitterTest.class);
  suite.addTestSuite(MetadataEmitterTest.class);
  suite.addTestSuite(TableLayoutTest.class);
  suite.addTestSuite(ScriptTest.class);
  suite.addTestSuite(DrillThroughActionScriptTest.class);
  suite.addTestSuite(HTMLEmitterOptimizeTest.class);
  suite.addTestSuite(StyleTest.class);
  return suite;
}",0.9578378378378378
69888,"protected void startDiagonalCell(ICellContent cell){
  String imgUri=diagonalCellImageMap.get(cell.getInstanceID().getComponentID());
  if (imgUri == null) {
    DiagonalLineImage imageCreater=new DiagonalLineImage();
    imageCreater.setDiagonalLine(cell.getDiagonalNumber(),cell.getDiagonalStyle(),cell.getDiagonalWidth());
    imageCreater.setAntidiagonalLine(cell.getAntidiagonalNumber(),cell.getAntidiagonalStyle(),cell.getAntidiagonalWidth());
    imageCreater.setImageDpi(imageDpi);
    imageCreater.setImageSize(getCellWidth(cell),getCellHeight(cell));
    IStyle cellComputedStyle=cell.getComputedStyle();
    String strColor=cellComputedStyle.getColor();
    imageCreater.setColor(PropertyUtil.getColor(strColor));
    byte[] imageByteArray=null;
    try {
      imageByteArray=imageCreater.drawImage();
    }
 catch (    IOException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
    if (imageByteArray != null) {
      Image image=new Image(imageByteArray,null,""String_Node_Str"");
      imgUri=imageHandler.onCustomImage(image,reportContext);
      if (imgUri != null) {
        diagonalCellImageMap.put(cell.getInstanceID().getComponentID(),imgUri);
      }
    }
  }
  writer.openTag(HTMLTags.TAG_DIV);
  writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  if (imgUri != null) {
    writer.openTag(HTMLTags.TAG_IMAGE);
    writer.attributeAllowEmpty(HTMLTags.ATTR_ALT,""String_Node_Str"");
    writer.attribute(HTMLTags.ATTR_SRC,imgUri);
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    if (null == htmlIDNamespace) {
      writer.attribute(HTMLTags.ATTR_ONLOAD,""String_Node_Str"");
    }
 else {
      writer.attribute(HTMLTags.ATTR_ONLOAD,htmlIDNamespace + ""String_Node_Str"");
    }
    writer.closeTag(HTMLTags.TAG_IMAGE);
  }
}","protected void startDiagonalCell(ICellContent cell){
  DimensionType cellWidth=getCellWidth(cell);
  DimensionType cellHeight=getCellHeight(cell);
  if (cellWidth == null || cellHeight == null)   return;
  String imgUri=diagonalCellImageMap.get(cell.getInstanceID().getComponentID());
  if (imgUri == null) {
    DiagonalLineImage imageCreater=new DiagonalLineImage();
    imageCreater.setDiagonalLine(cell.getDiagonalNumber(),cell.getDiagonalStyle(),cell.getDiagonalWidth());
    imageCreater.setAntidiagonalLine(cell.getAntidiagonalNumber(),cell.getAntidiagonalStyle(),cell.getAntidiagonalWidth());
    imageCreater.setImageDpi(imageDpi);
    imageCreater.setImageSize(cellWidth,cellHeight);
    IStyle cellComputedStyle=cell.getComputedStyle();
    String strColor=cellComputedStyle.getColor();
    imageCreater.setColor(PropertyUtil.getColor(strColor));
    byte[] imageByteArray=null;
    try {
      imageByteArray=imageCreater.drawImage();
    }
 catch (    IOException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
    if (imageByteArray != null) {
      Image image=new Image(imageByteArray,null,""String_Node_Str"");
      imgUri=imageHandler.onCustomImage(image,reportContext);
      if (imgUri != null) {
        diagonalCellImageMap.put(cell.getInstanceID().getComponentID(),imgUri);
      }
    }
  }
  writer.openTag(HTMLTags.TAG_DIV);
  writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  if (imgUri != null) {
    writer.openTag(HTMLTags.TAG_IMAGE);
    writer.attributeAllowEmpty(HTMLTags.ATTR_ALT,""String_Node_Str"");
    writer.attribute(HTMLTags.ATTR_SRC,imgUri);
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    if (null == htmlIDNamespace) {
      writer.attribute(HTMLTags.ATTR_ONLOAD,""String_Node_Str"");
    }
 else {
      writer.attribute(HTMLTags.ATTR_ONLOAD,htmlIDNamespace + ""String_Node_Str"");
    }
    writer.closeTag(HTMLTags.TAG_IMAGE);
  }
}",0.9531292332701164
69889,"protected void endDiagonalCell(ICellContent cell){
  writer.closeTag(HTMLTags.TAG_DIV);
}","protected void endDiagonalCell(ICellContent cell){
  DimensionType cellWidth=getCellWidth(cell);
  DimensionType cellHeight=getCellHeight(cell);
  if (cellWidth == null || cellHeight == null)   return;
  writer.closeTag(HTMLTags.TAG_DIV);
}",0.541033434650456
69890,"private void drawDiagonalLine(ICellContent cell,double cellWidth){
  DiagonalLineInfo diagonalLineInfo=new DiagonalLineInfo();
  int diagonalWidth=PropertyUtil.getDimensionValue(cell,cell.getDiagonalWidth(),(int)cellWidth) / 1000;
  diagonalLineInfo.setDiagonalLine(cell.getDiagonalNumber(),cell.getDiagonalStyle(),diagonalWidth);
  int antidiagonalWidth=PropertyUtil.getDimensionValue(cell,cell.getAntidiagonalWidth(),(int)cellWidth) / 1000;
  diagonalLineInfo.setAntidiagonalLine(cell.getAntidiagonalNumber(),cell.getAntidiagonalStyle(),antidiagonalWidth);
  int cellHeight=WordUtil.convertTo(getCellHeight(cell),0) / 20;
  diagonalLineInfo.setCoordinateSize(cellWidth,cellHeight);
  String lineColor=WordUtil.parseColor(cell.getComputedStyle().getColor());
  diagonalLineInfo.setColor(lineColor);
  wordWriter.drawDiagonalLine(diagonalLineInfo);
}","private void drawDiagonalLine(ICellContent cell,double cellWidth){
  if (cellWidth == 0)   return;
  int cellHeight=WordUtil.convertTo(getCellHeight(cell),0) / 20;
  if (cellHeight == 0)   return;
  DiagonalLineInfo diagonalLineInfo=new DiagonalLineInfo();
  int diagonalWidth=PropertyUtil.getDimensionValue(cell,cell.getDiagonalWidth(),(int)cellWidth) / 1000;
  diagonalLineInfo.setDiagonalLine(cell.getDiagonalNumber(),cell.getDiagonalStyle(),diagonalWidth);
  int antidiagonalWidth=PropertyUtil.getDimensionValue(cell,cell.getAntidiagonalWidth(),(int)cellWidth) / 1000;
  diagonalLineInfo.setAntidiagonalLine(cell.getAntidiagonalNumber(),cell.getAntidiagonalStyle(),antidiagonalWidth);
  diagonalLineInfo.setCoordinateSize(cellWidth,cellHeight);
  String lineColor=WordUtil.parseColor(cell.getComputedStyle().getColor());
  diagonalLineInfo.setColor(lineColor);
  wordWriter.drawDiagonalLine(diagonalLineInfo);
}",0.8895184135977338
69891,"private void updateDragDataSource(){
  if (isCubeMode()) {
    if (getDataServiceProvider().getReportItemReference() != null) {
      if (!getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
        ((GridData)columnListDescription.getLayoutData()).exclude=false;
        columnListDescription.setVisible(true);
        columnListDescription.setText(Messages.getString(""String_Node_Str""));
      }
 else {
        ((GridData)columnListDescription.getLayoutData()).exclude=true;
        columnListDescription.setVisible(false);
      }
      cmpColumnsList.layout();
      getContext().setShowingDataPreview(Boolean.FALSE);
      btnShowDataPreviewB.setSelection(false);
      btnShowDataPreviewB.setEnabled(false);
      stackLayout.topControl=cmpColumnsList;
      refreshDataPreviewPane();
    }
 else {
      stackLayout.topControl=cmpCubeTree;
      cubeTreeViewer.setInput(getCube());
    }
    cmpStack.layout();
    return;
  }
  ((GridData)columnListDescription.getLayoutData()).exclude=false;
  columnListDescription.setVisible(true);
  columnListDescription.setText(Messages.getString(""String_Node_Str""));
  btnShowDataPreviewB.setEnabled(true);
  cmpColumnsList.layout();
  String pValue=(previousData == null) ? ""String_Node_Str"" : previousData;
  String cValue=(currentData == null) ? ""String_Node_Str"" : currentData;
  if (!pValue.equals(cValue)) {
    getContext().setShowingDataPreview(null);
  }
  previousData=currentData;
  try {
    if (!getContext().isSetShowingDataPreview() && getDataServiceProvider().getPreviewHeadersInfo().length >= 6) {
      getContext().setShowingDataPreview(Boolean.FALSE);
    }
    ChartWizard.removeException(ChartWizard.StaChartDSh_gHeaders_ID);
  }
 catch (  NullPointerException e) {
  }
catch (  ChartException e) {
    ChartWizard.showException(ChartWizard.StaChartDSh_gHeaders_ID,e.getMessage());
  }
  btnShowDataPreviewA.setSelection(getContext().isShowingDataPreview());
  btnShowDataPreviewB.setSelection(getContext().isShowingDataPreview());
  if (getContext().isShowingDataPreview()) {
    stackLayout.topControl=cmpDataPreview;
  }
 else {
    stackLayout.topControl=cmpColumnsList;
  }
  refreshDataPreviewPane();
  cmpStack.layout();
}","private void updateDragDataSource(){
  if (isCubeMode()) {
    if (getDataServiceProvider().getReportItemReference() != null) {
      if (!getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
        ((GridData)columnListDescription.getLayoutData()).exclude=false;
        columnListDescription.setVisible(true);
        columnListDescription.setText(Messages.getString(""String_Node_Str""));
      }
 else {
        ((GridData)columnListDescription.getLayoutData()).exclude=true;
        columnListDescription.setVisible(false);
      }
      cmpColumnsList.layout();
      getContext().setShowingDataPreview(Boolean.FALSE);
      btnShowDataPreviewB.setSelection(false);
      btnShowDataPreviewB.setEnabled(false);
      stackLayout.topControl=cmpColumnsList;
      refreshDataPreviewPane();
    }
 else {
      stackLayout.topControl=cmpCubeTree;
      cubeTreeViewer.setInput(getCube());
    }
    cmpStack.layout();
    return;
  }
  if (columnListDescription != null) {
    ((GridData)columnListDescription.getLayoutData()).exclude=false;
    columnListDescription.setVisible(true);
    columnListDescription.setText(Messages.getString(""String_Node_Str""));
  }
  btnShowDataPreviewB.setEnabled(true);
  cmpColumnsList.layout();
  String pValue=(previousData == null) ? ""String_Node_Str"" : previousData;
  String cValue=(currentData == null) ? ""String_Node_Str"" : currentData;
  if (!pValue.equals(cValue)) {
    getContext().setShowingDataPreview(null);
  }
  previousData=currentData;
  try {
    if (!getContext().isSetShowingDataPreview() && getDataServiceProvider().getPreviewHeadersInfo().length >= 6) {
      getContext().setShowingDataPreview(Boolean.FALSE);
    }
    ChartWizard.removeException(ChartWizard.StaChartDSh_gHeaders_ID);
  }
 catch (  NullPointerException e) {
  }
catch (  ChartException e) {
    ChartWizard.showException(ChartWizard.StaChartDSh_gHeaders_ID,e.getMessage());
  }
  btnShowDataPreviewA.setSelection(getContext().isShowingDataPreview());
  btnShowDataPreviewB.setSelection(getContext().isShowingDataPreview());
  if (getContext().isShowingDataPreview()) {
    stackLayout.topControl=cmpDataPreview;
  }
 else {
    stackLayout.topControl=cmpColumnsList;
  }
  refreshDataPreviewPane();
  cmpStack.layout();
}",0.9891183655340884
69892,"/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else         defaultValueExpr=modelParam.getDefaultValue();
        if (defaultValueExpr != null) {
          dteDataSet.addParameter(new ParameterAdapter(modelParam));
          paramBindingCandidates.put(modelParam.getName(),new ExpressionAdapter(defaultValueExpr,org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType())));
        }
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      if (modelParamBinding.getExpression() != null)       paramBindingCandidates.put(modelParamBinding.getParamName(),new ExpressionAdapter(modelParamBinding.getExpression(),DataType.ANY_TYPE));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ExpressionAdapter expression=(ExpressionAdapter)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 */
private static void populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
        }
 else {
          if (ExpressionType.CONSTANT.equals(modelParam.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER).getType())) {
            defaultValueExpr=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(modelParam.getDefaultValue()) + ""String_Node_Str"";
          }
 else {
            defaultValueExpr=modelParam.getDefaultValue();
          }
        }
        if (defaultValueExpr != null) {
          dteDataSet.addParameter(new ParameterAdapter(modelParam));
          paramBindingCandidates.put(modelParam.getName(),new ExpressionAdapter(defaultValueExpr,org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType())));
        }
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      if (modelParamBinding.getExpression() != null)       paramBindingCandidates.put(modelParamBinding.getParamName(),new ExpressionAdapter(modelParamBinding.getExpression(),DataType.ANY_TYPE));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ExpressionAdapter expression=(ExpressionAdapter)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}",0.9118773946360154
69893,"/** 
 * @param modelDataSet
 * @param dteDataSet
 * @return
 */
private Iterator populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle) {
          String linkedReportParam=((OdaDataSetParameterHandle)modelParam).getParamName();
          if (linkedReportParam != null) {
            ParameterHandle ph=modelDataSet.getModuleHandle().findParameter(linkedReportParam);
            if (ph instanceof ScalarParameterHandle) {
              if (((ScalarParameterHandle)ph).getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE)) {
                throw new DataException(ResourceConstants.Linked_REPORT_PARAM_ALLOW_MULTI_VALUES,new String[]{linkedReportParam,modelParam.getName()});
              }
            }
            defaultValueExpr=ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName());
          }
 else {
            defaultValueExpr=modelParam.getDefaultValue();
          }
        }
 else {
          defaultValueExpr=modelParam.getDefaultValue();
        }
        dteDataSet.addParameter(newParam(modelParam));
        paramBindingCandidates.put(modelParam.getName(),new ScriptExpression(defaultValueExpr,DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType())));
      }
 else {
        dteDataSet.addParameter(newParam(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),new ScriptExpression(modelParamBinding.getExpression()));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ScriptExpression expression=(ScriptExpression)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
    }
  }
  return elmtIter;
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 * @return
 */
private Iterator populateParameter(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle) {
          String linkedReportParam=((OdaDataSetParameterHandle)modelParam).getParamName();
          if (linkedReportParam != null) {
            ParameterHandle ph=modelDataSet.getModuleHandle().findParameter(linkedReportParam);
            if (ph instanceof ScalarParameterHandle) {
              if (((ScalarParameterHandle)ph).getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE)) {
                throw new DataException(ResourceConstants.Linked_REPORT_PARAM_ALLOW_MULTI_VALUES,new String[]{linkedReportParam,modelParam.getName()});
              }
            }
            defaultValueExpr=ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)modelParam).getParamName());
          }
 else {
            if (ExpressionType.CONSTANT.equals(modelParam.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER).getType())) {
              defaultValueExpr=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(modelParam.getDefaultValue()) + ""String_Node_Str"";
            }
 else {
              defaultValueExpr=modelParam.getDefaultValue();
            }
          }
        }
 else {
          if (ExpressionType.CONSTANT.equals(modelParam.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER).getType())) {
            defaultValueExpr=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(modelParam.getDefaultValue()) + ""String_Node_Str"";
          }
 else {
            defaultValueExpr=modelParam.getDefaultValue();
          }
        }
        dteDataSet.addParameter(newParam(modelParam));
        paramBindingCandidates.put(modelParam.getName(),new ScriptExpression(defaultValueExpr,DataAdapterUtil.modelDataTypeToCoreDataType(modelParam.getDataType())));
      }
 else {
        dteDataSet.addParameter(newParam(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      paramBindingCandidates.put(modelParamBinding.getParamName(),new ScriptExpression(modelParamBinding.getExpression()));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ScriptExpression expression=(ScriptExpression)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(newInputParamBinding((String)paramName,expression));
    }
  }
  return elmtIter;
}",0.8865073787772312
69894,"IOdaDataSetDesign newOdaDataSet(OdaDataSetHandle modelDataSet,ExecutionContext context) throws BirtException {
  OdaDataSetDesign dteDataSet=new OdaDataSetDesign(modelDataSet.getQualifiedName());
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(modelDataSet,context);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(modelDataSet,dteDataSet);
  String queryTextBinding=modelDataSet.getPropertyBinding(OdaDataSet.QUERY_TEXT_PROP);
  if (needPropertyBinding() && queryTextBinding != null && queryTextBinding.length() > 0 && context.getDataEngine() instanceof DteDataEngine) {
    dteDataSet.setQueryText(evaluatePropertyBindingExpr(queryTextBinding));
  }
 else {
    dteDataSet.setQueryText(modelDataSet.getQueryText());
  }
  dteDataSet.setExtensionID(modelDataSet.getExtensionID());
  dteDataSet.setPrimaryResultSetName(modelDataSet.getResultSetName());
  if (modelDataSet.getPropertyHandle(IOdaDataSetModel.RESULT_SET_NUMBER_PROP).isSet())   dteDataSet.setPrimaryResultSetNumber(modelDataSet.getResultSetNumber());
  Map staticProps=getExtensionProperties(modelDataSet,modelDataSet.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=modelDataSet.getPropertyBinding(propName);
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=this.evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteDataSet.addPublicProperty((String)propName,propValue);
    }
  }
  Iterator elmtIter=modelDataSet.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteDataSet.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  return dteDataSet;
}","IOdaDataSetDesign newOdaDataSet(OdaDataSetHandle modelDataSet,ExecutionContext context) throws BirtException {
  OdaDataSetDesign dteDataSet=new OdaDataSetDesign(modelDataSet.getQualifiedName());
  IBaseDataSetEventHandler eventHandler=new DataSetScriptExecutor(modelDataSet,context);
  dteDataSet.setEventHandler(eventHandler);
  adaptBaseDataSet(modelDataSet,dteDataSet);
  Expression expression=modelDataSet.getPropertyBindingExpression(OdaDataSet.QUERY_TEXT_PROP);
  String queryTextBinding=null;
  if (expression != null && (expression.getExpression() instanceof String)) {
    queryTextBinding=(String)expression.getExpression();
    if (ExpressionType.CONSTANT.equals(expression.getType())) {
      queryTextBinding=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(queryTextBinding) + ""String_Node_Str"";
    }
  }
  if (needPropertyBinding() && queryTextBinding != null && queryTextBinding.length() > 0 && context.getDataEngine() instanceof DteDataEngine) {
    dteDataSet.setQueryText(evaluatePropertyBindingExpr(queryTextBinding));
  }
 else {
    dteDataSet.setQueryText(modelDataSet.getQueryText());
  }
  dteDataSet.setExtensionID(modelDataSet.getExtensionID());
  dteDataSet.setPrimaryResultSetName(modelDataSet.getResultSetName());
  if (modelDataSet.getPropertyHandle(IOdaDataSetModel.RESULT_SET_NUMBER_PROP).isSet())   dteDataSet.setPrimaryResultSetNumber(modelDataSet.getResultSetNumber());
  Map staticProps=getExtensionProperties(modelDataSet,modelDataSet.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue;
      String bindingExpr=null;
      Expression expr=modelDataSet.getPropertyBindingExpression(propName);
      if (expr != null && (expr.getExpression() instanceof String)) {
        bindingExpr=(String)expr.getExpression();
        if (ExpressionType.CONSTANT.equals(expr.getType())) {
          bindingExpr=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(bindingExpr) + ""String_Node_Str"";
        }
      }
      if (needPropertyBinding() && bindingExpr != null && bindingExpr.length() > 0) {
        propValue=this.evaluatePropertyBindingExpr(bindingExpr);
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      dteDataSet.addPublicProperty((String)propName,propValue);
    }
  }
  Iterator elmtIter=modelDataSet.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      dteDataSet.addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  return dteDataSet;
}",0.8241022519780888
69895,"protected void init() throws BirtException {
  if (PropertyUtil.isInlineElement(image)) {
    root=new ImageInlineContainer(parent,context,image);
  }
 else {
    root=new ImageBlockContainer(parent,context,image);
  }
  root.initialize();
  root.setAllocatedWidth(parent.getMaxAvaWidth());
  root.setMaxAvaWidth(root.getContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=createImageArea(image);
  int maxHeight=root.getMaxAvaHeight();
  int maxWidth=root.getMaxAvaWidth();
  int cHeight=contentDimension.getHeight();
  int cWidth=contentDimension.getWidth();
  int actualHeight=cHeight;
  int actualWidth=cWidth;
  if (cHeight > maxHeight || cWidth > maxWidth) {
    if (fitToContainer) {
      float rh=((float)maxHeight) / cHeight;
      float rw=((float)maxWidth) / cWidth;
      if (rh > rw) {
        actualHeight=(int)((float)cHeight * maxWidth / cWidth);
        actualWidth=maxWidth;
      }
 else {
        actualHeight=maxHeight;
        actualWidth=(int)((float)cWidth * maxHeight / cHeight);
      }
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setContentWidth(imageArea.getWidth());
      root.setContentHeight(imageArea.getHeight());
    }
 else {
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setNeedClip(true);
      root.setAllocatedHeight(Math.min(maxHeight,cHeight));
      root.setAllocatedWidth(Math.min(maxWidth,cWidth));
    }
  }
 else {
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
    root.setContentWidth(imageArea.getWidth());
    root.setContentHeight(imageArea.getHeight());
  }
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.finished=false;
}","protected void init() throws BirtException {
  if (PropertyUtil.isInlineElement(image)) {
    root=new ImageInlineContainer(parent,context,image);
  }
 else {
    root=new ImageBlockContainer(parent,context,image);
  }
  root.initialize();
  root.setAllocatedWidth(parent.getMaxAvaWidth());
  root.setMaxAvaWidth(root.getContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=createImageArea(image);
  int maxHeight=root.getMaxAvaHeight();
  int maxWidth=root.getMaxAvaWidth();
  int cHeight=contentDimension.getHeight();
  int cWidth=contentDimension.getWidth();
  int actualHeight=cHeight;
  int actualWidth=cWidth;
  if (cHeight > maxHeight || cWidth > maxWidth) {
    if (fitToContainer) {
      float rh=((float)maxHeight) / cHeight;
      float rw=((float)maxWidth) / cWidth;
      if (rh > rw) {
        actualHeight=(int)((float)cHeight * maxWidth / cWidth);
        actualWidth=maxWidth;
      }
 else {
        actualHeight=maxHeight;
        actualWidth=(int)((float)cWidth * maxHeight / cHeight);
      }
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setContentWidth(imageArea.getWidth());
      root.setContentHeight(imageArea.getHeight());
    }
 else {
      if (context.getPageOverflow() == IPDFRenderOption.FIT_TO_PAGE_SIZE || context.getPageOverflow() == IPDFRenderOption.ENLARGE_PAGE_SIZE) {
        imageArea.setWidth(actualWidth);
        imageArea.setHeight(actualHeight);
        root.setContentHeight(actualHeight);
        root.setContentWidth(actualWidth);
      }
 else {
        imageArea.setWidth(actualWidth);
        imageArea.setHeight(actualHeight);
        root.setNeedClip(true);
        root.setAllocatedHeight(Math.min(maxHeight,cHeight));
        root.setAllocatedWidth(Math.min(maxWidth,cWidth));
      }
    }
  }
 else {
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
    root.setContentWidth(imageArea.getWidth());
    root.setContentHeight(imageArea.getHeight());
  }
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.finished=false;
}",0.91431377363123
69896,"/** 
 * With filter
 * @throws BirtException
 */
public void testBasic() throws Exception {
  this.GEN_add_filter=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  deContext2.setTmpdir(this.getTempDir());
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_sort=true;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_add_filter=0;
  this.PRE_add_sort=true;
  this.PRE_execute_query=true;
  this.preBasicIV();
  this.checkOutputFile();
}","/** 
 * With filter
 * @throws BirtException
 */
public void testBasic() throws Exception {
  this.GEN_add_filter=true;
  this.GEN_print=true;
  this.genBasicIV();
  this.closeArchiveWriter();
  DataEngineContext deContext2=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  deContext2.setTmpdir(this.getTempDir());
  myPreDataEngine=DataEngine.newDataEngine(deContext2);
  this.UPDATE_add_sort=true;
  this.updatePreBasicIV();
  this.closeArchiveReader();
  this.closeArchiveWriter();
  DataEngineContext deContext3=newContext(DataEngineContext.MODE_UPDATE,fileName,fileName);
  myPreDataEngine=DataEngine.newDataEngine(deContext3);
  this.PRE_add_filter=0;
  this.PRE_add_sort=true;
  this.PRE_execute_query=true;
  this.preBasicIV();
  this.checkOutputFile();
}",0.9849574885546108
69897,"/** 
 * When the action is invoked, pop up a File Dialog to designate the directory.
 */
public void run(){
  Chart cm=ChartExamples.getChartModel();
  if (cm != null) {
    final FileDialog saveDialog=new FileDialog(cmp.getShell(),SWT.SAVE);
    saveDialog.setFilterExtensions(new String[]{""String_Node_Str""});
    try {
      saveDialog.open();
      String name=saveDialog.getFileName();
      if (name != null && name != ""String_Node_Str"") {
        Serializer serializer=null;
        final File file=new File(saveDialog.getFilterPath(),name);
        if (file.exists()) {
          MessageBox box=new MessageBox(cmp.getShell(),SWT.ICON_WARNING | SWT.YES | SWT.NO);
          box.setText(Messages.getDescription(""String_Node_Str""));
          box.setMessage(Messages.getDescription(""String_Node_Str""));
          if (box.open() != SWT.YES) {
            return;
          }
        }
        serializer=SerializerImpl.instance();
        try {
          serializer.write(cm,new FileOutputStream(file));
        }
 catch (        IOException ioe) {
          ioe.printStackTrace();
        }
      }
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}","/** 
 * When the action is invoked, pop up a File Dialog to designate the directory.
 */
public void run(){
  Chart cm=ChartExamples.getChartModel().copyInstance();
  if (cm != null) {
    final FileDialog saveDialog=new FileDialog(cmp.getShell(),SWT.SAVE);
    saveDialog.setFilterExtensions(new String[]{""String_Node_Str""});
    try {
      saveDialog.open();
      String name=saveDialog.getFileName();
      if (name != null && name != ""String_Node_Str"") {
        Serializer serializer=null;
        final File file=new File(saveDialog.getFilterPath(),name);
        if (file.exists()) {
          MessageBox box=new MessageBox(cmp.getShell(),SWT.ICON_WARNING | SWT.YES | SWT.NO);
          box.setText(Messages.getDescription(""String_Node_Str""));
          box.setMessage(Messages.getDescription(""String_Node_Str""));
          if (box.open() != SWT.YES) {
            return;
          }
        }
        serializer=SerializerImpl.instance();
        try {
          serializer.write(cm,new FileOutputStream(file));
        }
 catch (        IOException ioe) {
          ioe.printStackTrace();
        }
      }
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}",0.9936575052854124
69898,"protected void readRowField(DataInputStream in,RowDesign row,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_IS_START_OF_GROUP:
    boolean isStartOfGroup=IOUtil.readBool(in);
  row.setStartOfGroup(isStartOfGroup);
break;
default :
readReportItemField(in,row,fieldType);
}
}","protected void readRowField(DataInputStream in,RowDesign row,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_IS_START_OF_GROUP:
    boolean isStartOfGroup=IOUtil.readBool(in);
  row.setStartOfGroup(isStartOfGroup);
break;
case FIELD_IS_REPEATABLE:
boolean isRepeatable=IOUtil.readBool(in);
row.setRepeatable(isRepeatable);
break;
default :
readReportItemField(in,row,fieldType);
}
}",0.8457142857142858
69899,"protected void writeRow(DataOutputStream out,RowDesign row) throws IOException {
  writeReportItem(out,row);
  boolean isStartOfGroup=row.isStartOfGroup();
  if (isStartOfGroup) {
    IOUtil.writeShort(out,FIELD_IS_START_OF_GROUP);
    IOUtil.writeBool(out,isStartOfGroup);
  }
}","protected void writeRow(DataOutputStream out,RowDesign row) throws IOException {
  writeReportItem(out,row);
  boolean isStartOfGroup=row.isStartOfGroup();
  if (isStartOfGroup) {
    IOUtil.writeShort(out,FIELD_IS_START_OF_GROUP);
    IOUtil.writeBool(out,isStartOfGroup);
  }
  boolean repeatable=row.getRepeatable();
  if (!repeatable) {
    IOUtil.writeShort(out,FIELD_IS_REPEATABLE);
    IOUtil.writeBool(out,repeatable);
  }
}",0.7848101265822784
69900,"public void visitCell(CellHandle handle){
  CellDesign cell=new CellDesign();
  setupStyledElement(cell,handle);
  setupAuralInfomation(cell,handle);
  SlotHandle contentSlot=handle.getContent();
  for (int i=0; i < contentSlot.getCount(); i++) {
    apply(contentSlot.get(i));
    if (currentElement != null) {
      cell.addContent((ReportItemDesign)currentElement);
    }
  }
  cell.setColSpan(handle.getColumnSpan());
  int columnId=handle.getColumn() - 1;
  if (columnId < 0) {
    columnId=-1;
  }
  cell.setColumn(columnId);
  cell.setRowSpan(handle.getRowSpan());
  if (isCellInGroupHeader(handle)) {
    cell.setDrop(handle.getDrop());
  }
  String onCreate=handle.getOnCreate();
  String onCreateScriptText=validateExpression(onCreate);
  if (null != onCreateScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ICellModel.ON_CREATE_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(onCreateScriptText,id);
    cell.setOnCreate(scriptExpr);
  }
  String OnRenderScriptText=handle.getOnRender();
  if (null != OnRenderScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ICellModel.ON_RENDER_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(OnRenderScriptText,id);
    cell.setOnRender(scriptExpr);
  }
  setupHighlight(cell,null);
  int diagonalNumber=handle.getDiagonalNumber();
  if (diagonalNumber > 0) {
    cell.setDiagonalNumber(diagonalNumber);
    cell.setDiagonalStyle(handle.getDiagonalStyle());
    cell.setDiagonalWidth(createDimension(handle.getDiagonalThickness(),false));
  }
  int antidiagonalNumber=handle.getAntidiagonalNumber();
  if (antidiagonalNumber > 0) {
    cell.setAntidiagonalNumber(antidiagonalNumber);
    cell.setAntidiagonalStyle(handle.getAntidiagonalStyle());
    cell.setAntidiagonalWidth(createDimension(handle.getAntidiagonalThickness(),false));
  }
  setCurrentElement(cell);
}","public void visitCell(CellHandle handle){
  CellDesign cell=new CellDesign();
  setupStyledElement(cell,handle);
  setupAuralInfomation(cell,handle);
  SlotHandle contentSlot=handle.getContent();
  for (int i=0; i < contentSlot.getCount(); i++) {
    apply(contentSlot.get(i));
    if (currentElement != null) {
      cell.addContent((ReportItemDesign)currentElement);
    }
  }
  cell.setColSpan(handle.getColumnSpan());
  int columnId=handle.getColumn() - 1;
  if (columnId < 0) {
    columnId=-1;
  }
  cell.setColumn(columnId);
  cell.setRowSpan(handle.getRowSpan());
  if (isCellInGroupHeader(handle)) {
    cell.setDrop(handle.getDrop());
  }
  String onCreate=handle.getOnCreate();
  String onCreateScriptText=validateExpression(onCreate);
  if (null != onCreateScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ICellModel.ON_CREATE_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(onCreateScriptText,id);
    cell.setOnCreate(scriptExpr);
  }
  String OnRenderScriptText=handle.getOnRender();
  if (null != OnRenderScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ICellModel.ON_RENDER_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(OnRenderScriptText,id);
    cell.setOnRender(scriptExpr);
  }
  setupHighlight(cell,null);
  int diagonalNumber=handle.getDiagonalNumber();
  if (diagonalNumber > 0) {
    cell.setDiagonalNumber(diagonalNumber);
    cell.setDiagonalStyle(handle.getDiagonalStyle());
    cell.setDiagonalWidth(createDimension(handle.getDiagonalThickness(),true));
  }
  int antidiagonalNumber=handle.getAntidiagonalNumber();
  if (antidiagonalNumber > 0) {
    cell.setAntidiagonalNumber(antidiagonalNumber);
    cell.setAntidiagonalStyle(handle.getAntidiagonalStyle());
    cell.setAntidiagonalWidth(createDimension(handle.getAntidiagonalThickness(),true));
  }
  setCurrentElement(cell);
}",0.8299104791995787
69901,"private void createColumnsViewerArea(Composite parent){
  cmpColumnsList=ChartUIUtil.createCompositeWrapper(parent);
  Label label=new Label(cmpColumnsList,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    columnListDescription=new Label(cmpColumnsList,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      columnListDescription.setLayoutData(gd);
      columnListDescription.setText(Messages.getString(""String_Node_Str""));
    }
  }
  btnShowDataPreviewB=new Button(cmpColumnsList,SWT.CHECK);
  btnShowDataPreviewB.setText(Messages.getString(""String_Node_Str""));
  btnShowDataPreviewB.addListener(SWT.Selection,this);
  final Table table=new Table(cmpColumnsList,SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION);
  GridData gd=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  tableViewerColumns=new TableViewer(table);
  tableViewerColumns.setUseHashlookup(true);
  new TableColumn(table,SWT.CENTER);
  table.addMouseMoveListener(new MouseMoveListener(){
    public void mouseMove(    MouseEvent e){
      if (!dataProvider.isLivePreviewEnabled()) {
        table.setToolTipText(null);
        return;
      }
      String tooltip=null;
      TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
      if (item != null) {
        List<Object[]> data=(List<Object[]>)tableViewerColumns.getData(KEY_PREVIEW_DATA);
        if (data != null) {
          StringBuilder sb=new StringBuilder();
          int index=((Table)e.widget).indexOf(item);
          int i=0;
          for (; i < data.size(); i++) {
            if (sb.length() > 45) {
              break;
            }
            if (data.get(i)[index] != null) {
              if (i != 0)               sb.append(""String_Node_Str"");
              sb.append(String.valueOf(data.get(i)[index]));
            }
          }
          if (i == 1 && sb.length() > 45) {
            sb=new StringBuilder(sb.substring(0,45));
            sb.append(""String_Node_Str"");
          }
 else           if (i < data.size()) {
            sb.append(""String_Node_Str"");
          }
          tooltip=sb.toString();
        }
      }
      table.setToolTipText(tooltip);
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if (e.button == 3) {
        if (isCubeMode()) {
          table.setMenu(null);
        }
 else {
          TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
          if (item == null) {
            tableViewerColumns.getTable().select(-1);
          }
          boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
          if (item != null && !isSharingChart) {
            if (table.getMenu() != null) {
              table.getMenu().dispose();
            }
            table.setMenu(createMenuManager(item.getData()).createContextMenu(table));
          }
 else {
            table.setMenu(null);
          }
          if (table.getMenu() != null && !isSharingChart) {
            table.getMenu().setVisible(true);
          }
        }
      }
    }
  }
);
  table.addListener(SWT.Resize,new Listener(){
    public void handleEvent(    Event event){
      Table table=(Table)event.widget;
      int totalWidth=table.getClientArea().width;
      table.getColumn(0).setWidth(totalWidth);
    }
  }
);
  DragSource ds=new DragSource(table,DND.DROP_COPY | DND.DROP_MOVE);
  ds.setTransfer(new Transfer[]{SimpleTextTransfer.getInstance()});
  ColumnNamesTableDragListener dragSourceAdapter=new ColumnNamesTableDragListener(table,itemHandle);
  ds.addDragListener(dragSourceAdapter);
  tableViewerColumns.setContentProvider(new IStructuredContentProvider(){
    /** 
 * Gets the food items for the list
 * @param arg0 the data model
 * @return Object[]
 */
    public Object[] getElements(    Object arg0){
      if (arg0 == null)       return null;
      return (ColumnBindingInfo[])arg0;
    }
    /** 
 * Disposes any created resources
 */
    public void dispose(){
    }
    /** 
 * Called when the input changes
 * @param arg0 the viewer
 * @param arg1 the old input
 * @param arg2 the new input
 */
    public void inputChanged(    Viewer arg0,    Object arg1,    Object arg2){
    }
  }
);
  tableViewerColumns.setLabelProvider(new ILabelProvider(){
    /** 
 * images
 * @param arg0 the element
 * @return Image
 */
    public Image getImage(    Object arg0){
      String imageName=((ColumnBindingInfo)arg0).getImageName();
      if (imageName == null)       return null;
      return UIHelper.getImage(imageName);
    }
    /** 
 * Gets the text for an element
 * @param arg0 the element
 * @return String
 */
    public String getText(    Object arg0){
      return ((ColumnBindingInfo)arg0).getName();
    }
    /** 
 * Adds a listener
 * @param arg0 the listener
 */
    public void addListener(    ILabelProviderListener arg0){
    }
    /** 
 * Disposes any resources
 */
    public void dispose(){
    }
    /** 
 * Returns whether changing the specified property for the specified element affect the label
 * @param arg0 the element
 * @param arg1 the property
 * @return boolean
 */
    public boolean isLabelProperty(    Object arg0,    String arg1){
      return false;
    }
    /** 
 * Removes a listener
 * @param arg0 the listener
 */
    public void removeListener(    ILabelProviderListener arg0){
    }
  }
);
}","private void createColumnsViewerArea(Composite parent){
  cmpColumnsList=ChartUIUtil.createCompositeWrapper(parent);
  Label label=new Label(cmpColumnsList,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    columnListDescription=new Label(cmpColumnsList,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      columnListDescription.setLayoutData(gd);
      columnListDescription.setText(Messages.getString(""String_Node_Str""));
    }
  }
  btnShowDataPreviewB=new Button(cmpColumnsList,SWT.CHECK);
  btnShowDataPreviewB.setText(Messages.getString(""String_Node_Str""));
  btnShowDataPreviewB.addListener(SWT.Selection,this);
  final Table table=new Table(cmpColumnsList,SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION);
  GridData gd=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  tableViewerColumns=new TableViewer(table);
  tableViewerColumns.setUseHashlookup(true);
  new TableColumn(table,SWT.LEFT);
  table.addMouseMoveListener(new MouseMoveListener(){
    public void mouseMove(    MouseEvent e){
      if (!dataProvider.isLivePreviewEnabled()) {
        table.setToolTipText(null);
        return;
      }
      String tooltip=null;
      TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
      if (item != null) {
        List<Object[]> data=(List<Object[]>)tableViewerColumns.getData(KEY_PREVIEW_DATA);
        if (data != null) {
          StringBuilder sb=new StringBuilder();
          int index=((Table)e.widget).indexOf(item);
          int i=0;
          for (; i < data.size(); i++) {
            if (sb.length() > 45) {
              break;
            }
            if (data.get(i)[index] != null) {
              if (i != 0)               sb.append(""String_Node_Str"");
              sb.append(String.valueOf(data.get(i)[index]));
            }
          }
          if (i == 1 && sb.length() > 45) {
            sb=new StringBuilder(sb.substring(0,45));
            sb.append(""String_Node_Str"");
          }
 else           if (i < data.size()) {
            sb.append(""String_Node_Str"");
          }
          tooltip=sb.toString();
        }
      }
      table.setToolTipText(tooltip);
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if (e.button == 3) {
        if (isCubeMode()) {
          table.setMenu(null);
        }
 else {
          TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
          if (item == null) {
            tableViewerColumns.getTable().select(-1);
          }
          boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
          if (item != null && !isSharingChart) {
            if (table.getMenu() != null) {
              table.getMenu().dispose();
            }
            table.setMenu(createMenuManager(item.getData()).createContextMenu(table));
          }
 else {
            table.setMenu(null);
          }
          if (table.getMenu() != null && !isSharingChart) {
            table.getMenu().setVisible(true);
          }
        }
      }
    }
  }
);
  table.addListener(SWT.Resize,new Listener(){
    public void handleEvent(    Event event){
      Table table=(Table)event.widget;
      int totalWidth=table.getClientArea().width;
      table.getColumn(0).setWidth(totalWidth);
    }
  }
);
  DragSource ds=new DragSource(table,DND.DROP_COPY | DND.DROP_MOVE);
  ds.setTransfer(new Transfer[]{SimpleTextTransfer.getInstance()});
  ColumnNamesTableDragListener dragSourceAdapter=new ColumnNamesTableDragListener(table,itemHandle);
  ds.addDragListener(dragSourceAdapter);
  tableViewerColumns.setContentProvider(new IStructuredContentProvider(){
    /** 
 * Gets the food items for the list
 * @param arg0 the data model
 * @return Object[]
 */
    public Object[] getElements(    Object arg0){
      if (arg0 == null)       return null;
      return (ColumnBindingInfo[])arg0;
    }
    /** 
 * Disposes any created resources
 */
    public void dispose(){
    }
    /** 
 * Called when the input changes
 * @param arg0 the viewer
 * @param arg1 the old input
 * @param arg2 the new input
 */
    public void inputChanged(    Viewer arg0,    Object arg1,    Object arg2){
    }
  }
);
  tableViewerColumns.setLabelProvider(new ILabelProvider(){
    /** 
 * images
 * @param arg0 the element
 * @return Image
 */
    public Image getImage(    Object arg0){
      String imageName=((ColumnBindingInfo)arg0).getImageName();
      if (imageName == null)       return null;
      return UIHelper.getImage(imageName);
    }
    /** 
 * Gets the text for an element
 * @param arg0 the element
 * @return String
 */
    public String getText(    Object arg0){
      return ((ColumnBindingInfo)arg0).getName();
    }
    /** 
 * Adds a listener
 * @param arg0 the listener
 */
    public void addListener(    ILabelProviderListener arg0){
    }
    /** 
 * Disposes any resources
 */
    public void dispose(){
    }
    /** 
 * Returns whether changing the specified property for the specified element affect the label
 * @param arg0 the element
 * @param arg1 the property
 * @return boolean
 */
    public boolean isLabelProperty(    Object arg0,    String arg1){
      return false;
    }
    /** 
 * Removes a listener
 * @param arg0 the listener
 */
    public void removeListener(    ILabelProviderListener arg0){
    }
  }
);
}",0.9994609164420484
69902,"/** 
 * true if succeed to new a line.
 */
public void newLine() throws BirtException {
  parentLM.endLine(true);
}","/** 
 * true if succeed to new a line.
 */
public void newLine(boolean endParagraph) throws BirtException {
  parentLM.endLine(endParagraph);
}",0.8682170542635659
69903,"protected void layoutChildren() throws BirtException {
  if (null == textContent)   return;
  while (comp.hasNextArea()) {
    TextArea area=comp.getNextArea(getFreeSpace());
    if (area != null) {
      addTextArea(area);
      comp.setNewLineStatus(false);
      if (area.isLineBreak()) {
        newLine();
        comp.setNewLineStatus(true);
      }
    }
  }
}","protected void layoutChildren() throws BirtException {
  if (null == textContent)   return;
  while (comp.hasNextArea()) {
    TextArea area=comp.getNextArea(getFreeSpace());
    if (area != null) {
      addTextArea(area);
      comp.setNewLineStatus(false);
      if (area.isLineBreak()) {
        newLine(area.blankLine);
        comp.setNewLineStatus(true);
      }
    }
  }
}",0.9812834224598932
69904,"/** 
 * Visits the children nodes of the specific node
 * @param visitor the ITextNodeVisitor instance
 * @param ele the specific node
 */
private void processNodes(Element ele,HashMap cssStyles){
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    short nodeType=node.getNodeType();
    if (nodeType == Node.TEXT_NODE) {
      if (isScriptText(node)) {
        writer.cdata(node.getNodeValue());
      }
 else {
        writer.text(node.getNodeValue());
      }
    }
 else     if (nodeType == Node.COMMENT_NODE) {
      writer.comment(node.getNodeValue());
    }
 else     if (nodeType == Node.ELEMENT_NODE) {
      if (""String_Node_Str"".equalsIgnoreCase(node.getNodeName())) {
        boolean bImplicitCloseTag=writer.isImplicitCloseTag();
        writer.setImplicitCloseTag(true);
        startNode(node,cssStyles);
        processNodes((Element)node,cssStyles);
        endNode(node);
        writer.setImplicitCloseTag(bImplicitCloseTag);
      }
 else {
        startNode(node,cssStyles);
        processNodes((Element)node,cssStyles);
        endNode(node);
      }
    }
  }
}","/** 
 * Visits the children nodes of the specific node
 * @param visitor the ITextNodeVisitor instance
 * @param ele the specific node
 */
private void processNodes(Element ele,HashMap cssStyles){
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    short nodeType=node.getNodeType();
    if (nodeType == Node.TEXT_NODE) {
      if (isScriptText(node)) {
        writer.cdata(node.getNodeValue());
      }
 else {
        writer.text(node.getNodeValue(),false);
      }
    }
 else     if (nodeType == Node.COMMENT_NODE) {
      writer.comment(node.getNodeValue());
    }
 else     if (nodeType == Node.ELEMENT_NODE) {
      if (""String_Node_Str"".equalsIgnoreCase(node.getNodeName())) {
        boolean bImplicitCloseTag=writer.isImplicitCloseTag();
        writer.setImplicitCloseTag(true);
        startNode(node,cssStyles);
        processNodes((Element)node,cssStyles);
        endNode(node);
        writer.setImplicitCloseTag(bImplicitCloseTag);
      }
 else {
        startNode(node,cssStyles);
        processNodes((Element)node,cssStyles);
        endNode(node);
      }
    }
  }
}",0.997326203208556
69905,"public void layout() throws BirtException {
  initialize();
  if (content instanceof ITextContent && lineParent.getChildrenCount() == 1) {
    lineParent.setTextIndent((ITextContent)content);
  }
  TextAreaLayout inlineText=new TextAreaLayout(this,context,content);
  inlineText.initialize();
  inlineText.layout();
  inlineText.close();
  close();
}","public void layout() throws BirtException {
  initialize();
  TextAreaLayout inlineText=new TextAreaLayout(this,context,content);
  inlineText.initialize();
  inlineText.layout();
  inlineText.close();
  close();
}",0.2375886524822695
69906,"public void endLine(boolean endParagraph) throws BirtException {
  close(false,endParagraph);
  currentIP=0;
}","public void endLine(boolean endParagraph) throws BirtException {
  close(false,endParagraph);
  currentIP=0;
  if (endParagraph) {
    setIndent=false;
  }
}",0.8239700374531835
69907,"public void setTextIndent(ITextContent content){
  if (content != null) {
    IStyle contentStyle=content.getComputedStyle();
    currentIP=getDimensionValue(contentStyle.getProperty(StyleConstants.STYLE_TEXT_INDENT),maxAvaWidth);
  }
}","public void setTextIndent(ITextContent content){
  if (!setIndent && content != null) {
    IStyle contentStyle=content.getComputedStyle();
    currentIP=getDimensionValue(contentStyle.getProperty(StyleConstants.STYLE_TEXT_INDENT),maxAvaWidth);
    setIndent=true;
  }
}",0.932806324110672
69908,"/** 
 * clear the property binding in dataset to disable it when run the query
 * @param dsHandle
 * @param dataSetMap
 * @param dataSourceMap
 * @throws SemanticException
 */
public static void clearPropertyBindingMap(DataSetHandle dsHandle,Map dataSetMap,Map dataSourceMap) throws SemanticException {
  if (dsHandle.getExtends() != null) {
    return;
  }
  if (dsHandle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)dsHandle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle ds=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        clearPropertyBindingMap(ds,dataSetMap,dataSourceMap);
      }
    }
  }
 else   if (dsHandle instanceof OdaDataSetHandle) {
    List dataSetBindingList=dsHandle.getPropertyBindings();
    List dataSourceBindingList=dsHandle.getDataSource().getPropertyBindings();
    if (!dataSetBindingList.isEmpty())     dataSetMap.put(dsHandle.getName(),dataSetBindingList);
    if (!dataSourceBindingList.isEmpty())     dataSourceMap.put(dsHandle.getDataSource().getName(),dataSourceBindingList);
    for (int i=0; i < dataSetBindingList.size(); i++) {
      PropertyBinding binding=(PropertyBinding)dataSetBindingList.get(i);
      dsHandle.setPropertyBinding(binding.getName(),""String_Node_Str"");
    }
    for (int i=0; i < dataSourceBindingList.size(); i++) {
      PropertyBinding binding=(PropertyBinding)dataSourceBindingList.get(i);
      dsHandle.getDataSource().setPropertyBinding(binding.getName(),""String_Node_Str"");
    }
  }
}","/** 
 * clear the property binding in dataset to disable it when run the query
 * @param dsHandle
 * @param dataSetMap
 * @param dataSourceMap
 * @throws SemanticException
 */
public static void clearPropertyBindingMap(DataSetHandle dsHandle,Map dataSetMap,Map dataSourceMap) throws SemanticException {
  if (dsHandle.getExtends() != null) {
    return;
  }
  if (dsHandle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)dsHandle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle ds=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        clearPropertyBindingMap(ds,dataSetMap,dataSourceMap);
      }
    }
  }
 else   if (dsHandle instanceof OdaDataSetHandle) {
    List dataSetBindingList=dsHandle.getPropertyBindings();
    List dataSourceBindingList=dsHandle.getDataSource().getPropertyBindings();
    if (!dataSetBindingList.isEmpty())     dataSetMap.put(dsHandle.getName(),dataSetBindingList);
    if (!dataSourceBindingList.isEmpty())     dataSourceMap.put(dsHandle.getDataSource().getName(),dataSourceBindingList);
    for (int i=0; i < dataSetBindingList.size(); i++) {
      PropertyBinding binding=(PropertyBinding)dataSetBindingList.get(i);
      dsHandle.clearProperty(binding.getName());
    }
    for (int i=0; i < dataSourceBindingList.size(); i++) {
      PropertyBinding binding=(PropertyBinding)dataSourceBindingList.get(i);
      dsHandle.getDataSource().clearProperty(binding.getName());
    }
  }
}",0.9779559118236472
69909,"/** 
 * reset the property binding in dataset.
 * @param dsHandle
 * @param dataSetMap
 * @param dataSourceMap
 * @throws SemanticException
 */
public static void resetPropertyBinding(DataSetHandle dsHandle,Map dataSetMap,Map dataSourceMap) throws SemanticException {
  if (dsHandle.getExtends() != null) {
    return;
  }
  if (dsHandle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)dsHandle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle ds=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        resetPropertyBinding(ds,dataSetMap,dataSourceMap);
      }
    }
  }
 else {
    if (dsHandle instanceof OdaDataSetHandle) {
      if (dataSetMap.get(dsHandle.getName()) != null) {
        List pList=(List)dataSetMap.get(dsHandle.getName());
        for (int i=0; i < pList.size(); i++) {
          PropertyBinding binding=(PropertyBinding)pList.get(i);
          dsHandle.clearProperty(binding.getName());
        }
      }
      if (dataSourceMap.get(dsHandle.getDataSource().getName()) != null) {
        List pList=(List)dataSourceMap.get(dsHandle.getDataSource().getName());
        for (int i=0; i < pList.size(); i++) {
          PropertyBinding binding=(PropertyBinding)pList.get(i);
          dsHandle.getDataSource().clearProperty(binding.getName());
        }
      }
    }
  }
}","/** 
 * reset the property binding in dataset.
 * @param dsHandle
 * @param dataSetMap
 * @param dataSourceMap
 * @throws SemanticException
 */
public static void resetPropertyBinding(DataSetHandle dsHandle,Map dataSetMap,Map dataSourceMap) throws SemanticException {
  if (dsHandle.getExtends() != null) {
    return;
  }
  if (dsHandle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)dsHandle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle ds=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        resetPropertyBinding(ds,dataSetMap,dataSourceMap);
      }
    }
  }
 else {
    if (dsHandle instanceof OdaDataSetHandle) {
      if (dataSetMap.get(dsHandle.getName()) != null) {
        List pList=(List)dataSetMap.get(dsHandle.getName());
        for (int i=0; i < pList.size(); i++) {
          PropertyBinding binding=(PropertyBinding)pList.get(i);
          dsHandle.setPropertyBinding(binding.getName(),binding.getValue());
        }
      }
      if (dataSourceMap.get(dsHandle.getDataSource().getName()) != null) {
        List pList=(List)dataSourceMap.get(dsHandle.getDataSource().getName());
        for (int i=0; i < pList.size(); i++) {
          PropertyBinding binding=(PropertyBinding)pList.get(i);
          dsHandle.getDataSource().setPropertyBinding(binding.getName(),binding.getValue());
        }
      }
    }
  }
}",0.9752186588921284
69910,"private void cleanDataDefinition(SeriesDefinition sd){
  EList<Query> dds=sd.getDesignTimeSeries().getDataDefinition();
  for (int i=0; i < dds.size(); i++) {
    dds.get(i).setDefinition(""String_Node_Str"");
    dds.get(i).getGrouping().setEnabled(false);
  }
}","private void cleanDataDefinition(SeriesDefinition sd){
  EList<Query> dds=sd.getDesignTimeSeries().getDataDefinition();
  for (int i=0; i < dds.size(); i++) {
    dds.get(i).setDefinition(""String_Node_Str"");
    if (dds.get(i).getGrouping() != null) {
      dds.get(i).getGrouping().setEnabled(false);
    }
  }
}",0.9094076655052264
69911,"/** 
 * clear the property binding in dataset to disable it when run the query
 * @param dsHandle
 * @param dataSetMap
 * @param dataSourceMap
 * @throws SemanticException
 */
public static void clearPropertyBindingMap(DataSetHandle dsHandle,Map dataSetMap,Map dataSourceMap) throws SemanticException {
  if (dsHandle.getExtends() != null) {
    return;
  }
  if (dsHandle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)dsHandle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle ds=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        clearPropertyBindingMap(ds,dataSetMap,dataSourceMap);
      }
    }
  }
 else   if (dsHandle instanceof OdaDataSetHandle) {
    List dataSetBindingList=dsHandle.getPropertyBindings();
    List dataSourceBindingList=dsHandle.getDataSource().getPropertyBindings();
    if (!dataSetBindingList.isEmpty())     dataSetMap.put(dsHandle.getName(),dataSetBindingList);
    if (!dataSourceBindingList.isEmpty())     dataSourceMap.put(dsHandle.getDataSource().getName(),dataSourceBindingList);
    for (int i=0; i < dataSetBindingList.size(); i++) {
      PropertyBinding binding=(PropertyBinding)dataSetBindingList.get(i);
      dsHandle.clearProperty(binding.getName());
    }
    for (int i=0; i < dataSourceBindingList.size(); i++) {
      PropertyBinding binding=(PropertyBinding)dataSourceBindingList.get(i);
      dsHandle.getDataSource().clearProperty(binding.getName());
    }
  }
}","/** 
 * clear the property binding in dataset to disable it when run the query
 * @param dsHandle
 * @param dataSetMap
 * @param dataSourceMap
 * @throws SemanticException
 */
public static void clearPropertyBindingMap(DataSetHandle dsHandle,Map dataSetMap,Map dataSourceMap) throws SemanticException {
  if (dsHandle.getExtends() != null) {
    return;
  }
  if (dsHandle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)dsHandle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle ds=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        clearPropertyBindingMap(ds,dataSetMap,dataSourceMap);
      }
    }
  }
 else   if (dsHandle instanceof OdaDataSetHandle) {
    List dataSetBindingList=dsHandle.getPropertyBindings();
    List dataSourceBindingList=dsHandle.getDataSource().getPropertyBindings();
    if (!dataSetBindingList.isEmpty())     dataSetMap.put(dsHandle.getName(),dataSetBindingList);
    if (!dataSourceBindingList.isEmpty())     dataSourceMap.put(dsHandle.getDataSource().getName(),dataSourceBindingList);
    for (int i=0; i < dataSetBindingList.size(); i++) {
      PropertyBinding binding=(PropertyBinding)dataSetBindingList.get(i);
      dsHandle.setPropertyBinding(binding.getName(),(Expression)null);
    }
    for (int i=0; i < dataSourceBindingList.size(); i++) {
      PropertyBinding binding=(PropertyBinding)dataSourceBindingList.get(i);
      dsHandle.getDataSource().setPropertyBinding(binding.getName(),(Expression)null);
    }
  }
}",0.9786096256684492
69912,"protected void writeRunProperties(IStyle style,String fontFamily,boolean ishyperlink){
  writeHyperlinkStyle(ishyperlink,style);
  writeFont(fontFamily);
  writeFontSize(style);
  writeLetterSpacing(style);
  writeTextLineThrough(style);
  writeFontStyle(style);
  writeFontWeight(style);
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}","protected void writeRunProperties(IStyle style,String fontFamily,boolean ishyperlink){
  writeHyperlinkStyle(ishyperlink,style);
  writeFont(fontFamily);
  writeFontSize(style);
  writeLetterSpacing(style);
  writeTextLineThrough(style);
  writeFontStyle(style);
  writeFontWeight(style);
}",0.8854961832061069
69913,"private void drawDiagonalLine(ICellContent cell,double cellWidth){
  DiagonalLineInfo diagonalLineInfo=new DiagonalLineInfo();
  diagonalLineInfo.setDiagonalLine(cell.getDiagonalNumber(),cell.getDiagonalStyle(),cell.getDiagonalWidth());
  diagonalLineInfo.setAntidiagonalLine(cell.getAntidiagonalNumber(),cell.getAntidiagonalStyle(),cell.getAntidiagonalWidth());
  int cellHeight=WordUtil.convertTo(getCellHeight(cell),0) / 20;
  diagonalLineInfo.setCoordinateSize(cellWidth,cellHeight);
  String lineColor=WordUtil.parseColor(cell.getComputedStyle().getColor());
  diagonalLineInfo.setColor(lineColor);
  wordWriter.drawDiagonalLine(diagonalLineInfo);
}","private void drawDiagonalLine(ICellContent cell,double cellWidth){
  DiagonalLineInfo diagonalLineInfo=new DiagonalLineInfo();
  int diagonalWidth=PropertyUtil.getDimensionValue(cell,cell.getDiagonalWidth(),(int)cellWidth) / 1000;
  diagonalLineInfo.setDiagonalLine(cell.getDiagonalNumber(),cell.getDiagonalStyle(),diagonalWidth);
  int antidiagonalWidth=PropertyUtil.getDimensionValue(cell,cell.getAntidiagonalWidth(),(int)cellWidth) / 1000;
  diagonalLineInfo.setAntidiagonalLine(cell.getAntidiagonalNumber(),cell.getAntidiagonalStyle(),antidiagonalWidth);
  int cellHeight=WordUtil.convertTo(getCellHeight(cell),0) / 20;
  diagonalLineInfo.setCoordinateSize(cellWidth,cellHeight);
  String lineColor=WordUtil.parseColor(cell.getComputedStyle().getColor());
  diagonalLineInfo.setColor(lineColor);
  wordWriter.drawDiagonalLine(diagonalLineInfo);
}",0.8018617021276596
69914,"public ArrayList<Line> getDiagonalLine(){
  ArrayList<Line> diagonalLine=new ArrayList<Line>();
  int num=diagonalCount >> 1;
  double x=2d / (diagonalCount + 1) * width;
  double y=2d / (diagonalCount + 1) * height;
  if (diagonalCount % 2 == 1) {
    diagonalLine.add(new Line(coordoriginX,coordoriginY,coordoriginX + width,coordoriginY + height));
  }
  for (int i=1; i <= num; i++) {
    diagonalLine.add(new Line(coordoriginX + width - i * x,coordoriginY,coordoriginX + width,coordoriginY + height));
    diagonalLine.add(new Line(coordoriginX,coordoriginY + height - i * y,coordoriginX + width,coordoriginY + height));
  }
  return diagonalLine;
}","public ArrayList<Line> getDiagonalLine(){
  ArrayList<Line> diagonalLine=new ArrayList<Line>();
  int num=diagonalCount >> 1;
  double x=2d / (diagonalCount + 1) * width;
  double y=2d / (diagonalCount + 1) * height;
  if (diagonalCount % 2 == 1) {
    diagonalLine.add(new Line(coordoriginX - CELL_MARGIN_COMPENSATION,coordoriginY,coordoriginX + width - CELL_MARGIN_COMPENSATION,coordoriginY + height));
  }
  for (int i=1; i <= num; i++) {
    diagonalLine.add(new Line(coordoriginX + width - i * x - CELL_MARGIN_COMPENSATION,coordoriginY,coordoriginX + width - CELL_MARGIN_COMPENSATION,coordoriginY + height));
    diagonalLine.add(new Line(coordoriginX - CELL_MARGIN_COMPENSATION,coordoriginY + height - i * y,coordoriginX + width - CELL_MARGIN_COMPENSATION,coordoriginY + height));
  }
  return diagonalLine;
}",0.8896457765667575
69915,"public void setAntidiagonalLine(int antidiagonalCount,String antidiagonalStyle,DimensionType antidiagonalWidth){
  this.antiDiagonalCount=antidiagonalCount;
  this.antiDiagonalStyle=antidiagonalStyle;
  this.antiDiagonalWidth=antidiagonalWidth;
}","public void setAntidiagonalLine(int antidiagonalCount,String antidiagonalStyle,int antidiagonalWidth){
  this.antiDiagonalCount=antidiagonalCount;
  this.antiDiagonalStyle=antidiagonalStyle;
  this.antiDiagonalWidth=antidiagonalWidth;
}",0.966804979253112
69916,"public double getAntiDiagonalLineWidth(){
  return WordUtil.convertTo(antiDiagonalWidth,0) / 20d;
}","public double getAntiDiagonalLineWidth(){
  return antiDiagonalWidth;
}",0.8352941176470589
69917,"public void setDiagonalLine(int diagonalCount,String diagonalStyle,DimensionType diagonalWidth){
  this.diagonalCount=diagonalCount;
  this.diagonalStyle=diagonalStyle;
  this.diagonalWidth=diagonalWidth;
}","public void setDiagonalLine(int diagonalCount,String diagonalStyle,int diagonalWidth){
  this.diagonalCount=diagonalCount;
  this.diagonalStyle=diagonalStyle;
  this.diagonalWidth=diagonalWidth;
}",0.9701492537313432
69918,"public ArrayList<Line> getAntidiagonalLine(){
  ArrayList<Line> antiDiagonalLine=new ArrayList<Line>();
  int num=antiDiagonalCount >> 1;
  double x=2d / (antiDiagonalCount + 1) * width;
  double y=2d / (antiDiagonalCount + 1) * height;
  if (antiDiagonalCount % 2 == 1) {
    antiDiagonalLine.add(new Line(coordoriginX,coordoriginY + height,coordoriginX + width,coordoriginY));
  }
  for (int i=1; i <= num; i++) {
    antiDiagonalLine.add(new Line(coordoriginX,coordoriginY + height,coordoriginX + i * x,coordoriginY));
    antiDiagonalLine.add(new Line(coordoriginX,coordoriginY + height,coordoriginX + width,coordoriginY + height - i * y));
  }
  return antiDiagonalLine;
}","public ArrayList<Line> getAntidiagonalLine(){
  ArrayList<Line> antiDiagonalLine=new ArrayList<Line>();
  int num=antiDiagonalCount >> 1;
  double x=2d / (antiDiagonalCount + 1) * width;
  double y=2d / (antiDiagonalCount + 1) * height;
  if (antiDiagonalCount % 2 == 1) {
    antiDiagonalLine.add(new Line(coordoriginX - CELL_MARGIN_COMPENSATION,coordoriginY + height,coordoriginX + width - CELL_MARGIN_COMPENSATION,coordoriginY));
  }
  for (int i=1; i <= num; i++) {
    antiDiagonalLine.add(new Line(coordoriginX - CELL_MARGIN_COMPENSATION,coordoriginY + height,coordoriginX + i * x - CELL_MARGIN_COMPENSATION,coordoriginY));
    antiDiagonalLine.add(new Line(coordoriginX - CELL_MARGIN_COMPENSATION,coordoriginY + height,coordoriginX + width - CELL_MARGIN_COMPENSATION,coordoriginY + height - i * y));
  }
  return antiDiagonalLine;
}",0.8931398416886543
69919,"public double getDiagonalLineWidth(){
  return WordUtil.convertTo(diagonalWidth,0) / 20d;
}","public double getDiagonalLineWidth(){
  return diagonalWidth;
}",0.8181818181818182
69920,"private void createExpressionCell(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  defaultValueComposite=ControlProvider.getDefaultComposite(parent);
  defaultValueString=Utility.getNonNullString(structureHandle.getDefaultValue());
  defaultValue=ControlProvider.createText(defaultValueComposite,defaultValueString);
  defaultValue.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
  defaultValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (defaultValue.isEnabled()) {
        validateSyntax();
      }
    }
  }
);
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(defaultValue.getText());
      expressionBuilder.setExpressionProvier(null);
      if (expressionBuilder.open() == OK) {
        defaultValue.setText(expressionBuilder.getResult().trim());
      }
    }
  }
;
  ControlProvider.createButton(defaultValueComposite,SWT.PUSH,listener);
}","private void createExpressionCell(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  defaultValueComposite=ControlProvider.getDefaultComposite(parent);
  defaultValueString=Utility.getNonNullString(structureHandle.getDefaultValue());
  defaultValue=ControlProvider.createText(defaultValueComposite,defaultValueString);
  defaultValue.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
  defaultValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (defaultValue.isEnabled()) {
        validateSyntax();
      }
    }
  }
);
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(defaultValue.getText());
      expressionBuilder.setExpressionProvier(null);
      if (expressionBuilder.open() == OK) {
        defaultValue.setText(expressionBuilder.getResult().trim());
      }
    }
  }
;
  ExpressionButton exprButton=createExpressionButton(defaultValueComposite);
  defaultValue.setData(DataUIConstants.EXPR_BUTTON,exprButton);
  ExpressionHandle expr=getExpressionHandle();
  defaultValue.setText(expr == null || expr.getExpression() == null ? ""String_Node_Str"" : (String)expr.getExpression());
  defaultValue.setData(DataUIConstants.EXPR_TYPE,expr == null || expr.getType() == null ? null : (String)expr.getType());
  ExpressionButton button=(ExpressionButton)defaultValue.getData(DataUIConstants.EXPR_BUTTON);
  if (button != null)   button.refresh();
}",0.7766323024054983
69921,"private Status updateStructureHandle(){
  try {
    structureHandle.setName(dataSetParamName.getText());
    structureHandle.setParameterDataType(ParameterPageUtil.getTypeName(dataType.getText()));
    setDirection(direction.getText());
    structureHandle.setDefaultValue(defaultValue.isEnabled() ? defaultValue.getText().trim() : defaultValueString);
    if (isOdaDataSetHandle)     ((OdaDataSetParameterHandle)structureHandle).setParamName(Utility.findIndex(linkToSalarParameter.getItems(),linkToSalarParameter.getText()) == 0 ? null : linkToSalarParameter.getText());
  }
 catch (  SemanticException e) {
    return getMiscStatus(IStatus.ERROR,Utility.getNonNullString(e.getMessage()));
  }
  return null;
}","private Status updateStructureHandle(){
  try {
    structureHandle.setName(dataSetParamName.getText());
    structureHandle.setParameterDataType(ParameterPageUtil.getTypeName(dataType.getText()));
    setDirection(direction.getText());
    structureHandle.setExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER,new Expression(defaultValue.isEnabled() ? defaultValue.getText().trim() : defaultValueString,(String)defaultValue.getData(DataUIConstants.EXPR_TYPE)));
    if (isOdaDataSetHandle)     ((OdaDataSetParameterHandle)structureHandle).setParamName(Utility.findIndex(linkToSalarParameter.getItems(),linkToSalarParameter.getText()) == 0 ? null : linkToSalarParameter.getText());
  }
 catch (  SemanticException e) {
    return getMiscStatus(IStatus.ERROR,Utility.getNonNullString(e.getMessage()));
  }
  return null;
}",0.8725617685305592
69922,"public boolean performOk(){
  for (int i=0; i < bindingName.size(); i++) {
    try {
      String value=null;
      if (((Text)propertyTextList.get(i)).isDisposed() || ((Text)propertyTextList.get(i)).getText() == null || ((Text)propertyTextList.get(i)).getText().trim().length() == 0)       value=null;
 else       value=((Text)propertyTextList.get(i)).getText().trim();
      if (ds instanceof DataSourceHandle)       ((DataSourceHandle)ds).setPropertyBinding((String)bindingName.get(i),value);
 else       if (ds instanceof DataSetHandle)       ((DataSetHandle)ds).setPropertyBinding((String)bindingName.get(i),value);
    }
 catch (    SemanticException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
  }
  return super.performOk();
}","public boolean performOk(){
  for (int i=0; i < bindingName.size(); i++) {
    try {
      String value=null;
      Text propertyText=(Text)propertyTextList.get(i);
      if (propertyText.isDisposed() || propertyText.getText() == null || propertyText.getText().trim().length() == 0)       value=null;
 else       value=propertyText.getText().trim();
      Expression expr=new Expression(value,(String)propertyText.getData(DataUIConstants.EXPR_TYPE));
      if (ds instanceof DataSourceHandle)       ((DataSourceHandle)ds).setPropertyBinding((String)bindingName.get(i),value);
 else       if (ds instanceof DataSetHandle)       ((DataSetHandle)ds).setPropertyBinding((String)bindingName.get(i),expr);
    }
 catch (    SemanticException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
  }
  return super.performOk();
}",0.7860317460317461
69923,"/** 
 * the content
 */
public Control createContents(Composite parent){
  initPropertyBinding();
  int size=bindingName.size();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(3,false));
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL);
  composite.setLayoutData(gridData);
  Label nameLabel;
  Text propertyText;
  Button buildButton;
  for (int i=0; i < size; i++) {
    nameLabel=new Label(composite,SWT.NONE);
    nameLabel.setText((String)displayName.get(i) + ""String_Node_Str"");
    nameLabelList.add(nameLabel);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    if (((String)bindingName.get(i)).equals(QUERYTEXT)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
      data.heightHint=100;
    }
 else     if (((String)bindingName.get(i)).equals(PASSWORD)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.PASSWORD);
    }
 else     propertyText=new Text(composite,SWT.BORDER);
    propertyText.setLayoutData(data);
    propertyText.setText((String)bindingValue.get(i) == null ? ""String_Node_Str"" : (String)bindingValue.get(i));
    propertyTextList.add(propertyText);
    buildButton=new Button(composite,SWT.NONE);
    UIUtil.setExpressionButtonImage(buildButton);
    buttonList.add(buildButton);
  }
  addListener();
  if (size <= 0)   setEmptyPropertyMessages(composite);
  if (ds instanceof OdaDataSourceHandle) {
    OdaDataSourceHandle odsh=(OdaDataSourceHandle)ds;
    Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (ds instanceof OdaDataSetHandle) {
    OdaDataSourceHandle odsh=(OdaDataSourceHandle)(((OdaDataSetHandle)ds).getDataSource());
    Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  return composite;
}","/** 
 * the content
 */
public Control createContents(Composite parent){
  initPropertyBinding();
  int size=bindingName.size();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(3,false));
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL);
  composite.setLayoutData(gridData);
  Label nameLabel;
  Text propertyText=null;
  for (int i=0; i < size; i++) {
    nameLabel=new Label(composite,SWT.NONE);
    nameLabel.setText((String)displayName.get(i) + ""String_Node_Str"");
    nameLabelList.add(nameLabel);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    if (((String)bindingName.get(i)).equals(QUERYTEXT)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
      data.heightHint=100;
    }
 else     if (((String)bindingName.get(i)).equals(PASSWORD)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.PASSWORD);
    }
 else     propertyText=new Text(composite,SWT.BORDER);
    propertyText.setLayoutData(data);
    propertyText.setText((String)bindingValue.get(i) == null ? ""String_Node_Str"" : (String)bindingValue.get(i));
    propertyTextList.add(propertyText);
    if (ds instanceof OdaDataSourceHandle) {
      handle=(OdaDataSourceHandle)ds;
      Button buildButton=new Button(composite,SWT.NONE);
      UIUtil.setExpressionButtonImage(buildButton);
      buttonList.add(buildButton);
      addListener();
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)ds;
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
 else     if (ds instanceof OdaDataSetHandle) {
      handle=(OdaDataSetHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)(((OdaDataSetHandle)ds).getDataSource());
      ExpressionButton button=createExpressionButton(composite,propertyText);
      propertyText.setData(DataUIConstants.EXPR_BUTTON,button);
      Expression expr=handle.getPropertyBindingExpression((String)bindingName.get(i));
      propertyText.setText(expr == null || expr.getStringExpression() == null ? ""String_Node_Str"" : expr.getStringExpression());
      if (expr != null && expr.getType() != null)       propertyText.setData(DataUIConstants.EXPR_TYPE,expr.getType());
      button=(ExpressionButton)propertyText.getData(DataUIConstants.EXPR_BUTTON);
      if (button != null)       button.refresh();
      Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  if (size <= 0)   setEmptyPropertyMessages(composite);
  return composite;
}",0.7746508234313112
69924,"/** 
 * clear the property binding in dataset to disable it when run the query
 * @param dsHandle
 * @param dataSetMap
 * @param dataSourceMap
 * @throws SemanticException
 */
public static void clearPropertyBindingMap(DataSetHandle dsHandle,Map dataSetMap,Map dataSourceMap) throws SemanticException {
  if (dsHandle.getExtends() != null) {
    return;
  }
  if (dsHandle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)dsHandle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle ds=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        clearPropertyBindingMap(ds,dataSetMap,dataSourceMap);
      }
    }
  }
 else   if (dsHandle instanceof OdaDataSetHandle) {
    List dataSetBindingList=dsHandle.getPropertyBindings();
    List dataSourceBindingList=dsHandle.getDataSource().getPropertyBindings();
    if (!dataSetBindingList.isEmpty())     dataSetMap.put(dsHandle.getName(),dataSetBindingList);
    if (!dataSourceBindingList.isEmpty())     dataSourceMap.put(dsHandle.getDataSource().getName(),dataSourceBindingList);
    for (int i=0; i < dataSetBindingList.size(); i++) {
      PropertyBinding binding=(PropertyBinding)dataSetBindingList.get(i);
      dsHandle.setPropertyBinding(binding.getName(),null);
    }
    for (int i=0; i < dataSourceBindingList.size(); i++) {
      PropertyBinding binding=(PropertyBinding)dataSourceBindingList.get(i);
      dsHandle.getDataSource().setPropertyBinding(binding.getName(),null);
    }
  }
}","/** 
 * clear the property binding in dataset to disable it when run the query
 * @param dsHandle
 * @param dataSetMap
 * @param dataSourceMap
 * @throws SemanticException
 */
public static void clearPropertyBindingMap(DataSetHandle dsHandle,Map dataSetMap,Map dataSourceMap) throws SemanticException {
  if (dsHandle.getExtends() != null) {
    return;
  }
  if (dsHandle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)dsHandle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle ds=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        clearPropertyBindingMap(ds,dataSetMap,dataSourceMap);
      }
    }
  }
 else   if (dsHandle instanceof OdaDataSetHandle) {
    List dataSetBindingList=dsHandle.getPropertyBindings();
    List dataSourceBindingList=dsHandle.getDataSource().getPropertyBindings();
    if (!dataSetBindingList.isEmpty())     dataSetMap.put(dsHandle.getName(),dataSetBindingList);
    if (!dataSourceBindingList.isEmpty())     dataSourceMap.put(dsHandle.getDataSource().getName(),dataSourceBindingList);
    for (int i=0; i < dataSetBindingList.size(); i++) {
      PropertyBinding binding=(PropertyBinding)dataSetBindingList.get(i);
      dsHandle.setPropertyBinding(binding.getName(),""String_Node_Str"");
    }
    for (int i=0; i < dataSourceBindingList.size(); i++) {
      PropertyBinding binding=(PropertyBinding)dataSourceBindingList.get(i);
      dsHandle.getDataSource().setPropertyBinding(binding.getName(),""String_Node_Str"");
    }
  }
}",0.9860650298606504
69925,"/** 
 * reset the property binding in dataset.
 * @param dsHandle
 * @param dataSetMap
 * @param dataSourceMap
 * @throws SemanticException
 */
public static void resetPropertyBinding(DataSetHandle dsHandle,Map dataSetMap,Map dataSourceMap) throws SemanticException {
  if (dsHandle.getExtends() != null) {
    return;
  }
  if (dsHandle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)dsHandle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle ds=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        resetPropertyBinding(ds,dataSetMap,dataSourceMap);
      }
    }
  }
 else {
    if (dsHandle instanceof OdaDataSetHandle) {
      if (dataSetMap.get(dsHandle.getName()) != null) {
        List pList=(List)dataSetMap.get(dsHandle.getName());
        for (int i=0; i < pList.size(); i++) {
          PropertyBinding binding=(PropertyBinding)pList.get(i);
          dsHandle.setPropertyBinding(binding.getName(),binding.getValue());
        }
      }
      if (dataSourceMap.get(dsHandle.getDataSource().getName()) != null) {
        List pList=(List)dataSourceMap.get(dsHandle.getDataSource().getName());
        for (int i=0; i < pList.size(); i++) {
          PropertyBinding binding=(PropertyBinding)pList.get(i);
          dsHandle.getDataSource().setPropertyBinding(binding.getName(),binding.getValue());
        }
      }
    }
  }
}","/** 
 * reset the property binding in dataset.
 * @param dsHandle
 * @param dataSetMap
 * @param dataSourceMap
 * @throws SemanticException
 */
public static void resetPropertyBinding(DataSetHandle dsHandle,Map dataSetMap,Map dataSourceMap) throws SemanticException {
  if (dsHandle.getExtends() != null) {
    return;
  }
  if (dsHandle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)dsHandle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle ds=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        resetPropertyBinding(ds,dataSetMap,dataSourceMap);
      }
    }
  }
 else {
    if (dsHandle instanceof OdaDataSetHandle) {
      if (dataSetMap.get(dsHandle.getName()) != null) {
        List pList=(List)dataSetMap.get(dsHandle.getName());
        for (int i=0; i < pList.size(); i++) {
          PropertyBinding binding=(PropertyBinding)pList.get(i);
          dsHandle.clearProperty(binding.getName());
        }
      }
      if (dataSourceMap.get(dsHandle.getDataSource().getName()) != null) {
        List pList=(List)dataSourceMap.get(dsHandle.getDataSource().getName());
        for (int i=0; i < pList.size(); i++) {
          PropertyBinding binding=(PropertyBinding)pList.get(i);
          dsHandle.getDataSource().clearProperty(binding.getName());
        }
      }
    }
  }
}",0.9752186588921284
69926,"public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  ArrayList al=new ArrayList();
  al.addAll(series.getDataDefinition());
  for (int i=0; i < al.size(); i++) {
    Query query=(Query)al.get(i);
    DataType dataType=idsp.getDataType(query.getDefinition());
    if ((i != 2) && (dataType == DataType.TEXT_LITERAL || dataType == DataType.NUMERIC_LITERAL)) {
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,query.getDefinition());
    }
  }
}","public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  ArrayList<Query> al=new ArrayList<Query>();
  al.addAll(series.getDataDefinition());
  for (int i=0; i < al.size(); i++) {
    Query query=al.get(i);
    DataType dataType=idsp.getDataType(query.getDefinition());
    if ((i != 2) && (dataType == DataType.TEXT_LITERAL || dataType == DataType.NUMERIC_LITERAL)) {
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,query.getDefinition());
    }
  }
}",0.9803186504217432
69927,"public void widgetSelected(SelectionEvent e){
  Object source=e.getSource();
  if (source == fCmbAggregate) {
    String aggFunc=((String[])fCmbAggregate.getData())[fCmbAggregate.getSelectionIndex()];
    showAggregateParameters(aggFunc);
    if (AGG_FUNC_NONE.equals(aggFunc)) {
      fGrouping.setEnabled(false);
      fGrouping.setAggregateExpression(null);
    }
 else {
      fGrouping.setEnabled(true);
      fGrouping.setAggregateExpression(aggFunc);
    }
  }
 else   if (isAggParametersWidget(source)) {
    setAggParameter((Text)source);
  }
 else   if (isBuilderBtnWidget(source)) {
    try {
      Text txtArg=fExprBuilderWidgetsMap.get(source);
      String sExpr=fChartContext.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,txtArg.getText(),fChartContext.getExtendedItem(),fTitle);
      txtArg.setText(sExpr);
      setAggParameter(txtArg);
    }
 catch (    ChartException e1) {
      WizardBase.displayException(e1);
    }
  }
 else   if (source == fBtnOK) {
    if (query != null) {
      query.setGrouping(fGrouping);
      query.getGrouping().eAdapters().addAll(query.eAdapters());
    }
 else {
      fSeriesDefi.setGrouping(fGrouping);
      fSeriesDefi.getGrouping().eAdapters().addAll(fSeriesDefi.eAdapters());
    }
    ChartUIUtil.isValidAggregation(fChartContext,fGrouping,false);
    closeAggregateEditor(getShell());
  }
 else   if (source == fBtnCancel) {
    closeAggregateEditor(getShell());
  }
}","public void widgetSelected(SelectionEvent e){
  Object source=e.getSource();
  if (source == fCmbAggregate) {
    String aggFunc=((String[])fCmbAggregate.getData())[fCmbAggregate.getSelectionIndex()];
    showAggregateParameters(aggFunc);
    if (AGG_FUNC_NONE.equals(aggFunc)) {
      fGrouping.setEnabled(false);
      fGrouping.setAggregateExpression(null);
    }
 else {
      fGrouping.setEnabled(true);
      fGrouping.setAggregateExpression(aggFunc);
    }
  }
 else   if (isAggParametersWidget(source)) {
    setAggParameter((Text)source);
  }
 else   if (isBuilderBtnWidget(source)) {
    try {
      Text txtArg=fExprBuilderWidgetsMap.get(source);
      String sExpr=fChartContext.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,txtArg.getText(),fChartContext.getExtendedItem(),fTitle);
      txtArg.setText(sExpr);
      setAggParameter(txtArg);
    }
 catch (    ChartException e1) {
      WizardBase.displayException(e1);
    }
  }
 else   if (source == fBtnOK) {
    if (query != null) {
      query.setGrouping(fGrouping);
      query.getGrouping().eAdapters().addAll(query.eAdapters());
    }
 else {
      fSeriesDefi.setGrouping(fGrouping);
      fSeriesDefi.getGrouping().eAdapters().addAll(fSeriesDefi.eAdapters());
    }
    ChartUIUtil.checkAggregateType(fChartContext);
    closeAggregateEditor(getShell());
  }
 else   if (source == fBtnCancel) {
    closeAggregateEditor(getShell());
  }
}",0.9821428571428572
69928,"/** 
 * Handle grouping/sorting action.
 */
protected void handleGroupAction(){
  SeriesDefinition sdBackup=seriesdefinition.copyInstance();
  GroupSortingDialog groupDialog=createGroupSortingDialog(sdBackup);
  if (groupDialog.open() == Window.OK) {
    if (!sdBackup.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
      seriesdefinition.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
    }
 else {
      seriesdefinition.setSorting(sdBackup.getSorting());
    }
    seriesdefinition.setSortKey(sdBackup.getSortKey());
    seriesdefinition.getSortKey().eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setGrouping(sdBackup.getGrouping());
    seriesdefinition.getGrouping().eAdapters().addAll(seriesdefinition.eAdapters());
    ChartUIUtil.checkGroupType(context,context.getModel());
    ChartUIUtil.isValidAggregation(context,seriesdefinition.getGrouping(),true);
  }
}","/** 
 * Handle grouping/sorting action.
 */
protected void handleGroupAction(){
  SeriesDefinition sdBackup=seriesdefinition.copyInstance();
  GroupSortingDialog groupDialog=createGroupSortingDialog(sdBackup);
  if (groupDialog.open() == Window.OK) {
    if (!sdBackup.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting())) {
      seriesdefinition.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
    }
 else {
      seriesdefinition.setSorting(sdBackup.getSorting());
    }
    seriesdefinition.setSortKey(sdBackup.getSortKey());
    seriesdefinition.getSortKey().eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setGrouping(sdBackup.getGrouping());
    seriesdefinition.getGrouping().eAdapters().addAll(seriesdefinition.eAdapters());
    ChartUIUtil.checkGroupType(context,context.getModel());
    ChartUIUtil.checkAggregateType(context);
  }
}",0.960220994475138
69929,"public void widgetSelected(SelectionEvent e){
  if (e.widget.equals(btnSeriesDelete)) {
    updateColorRegistry(cmbSeriesSelect.getSelectionIndex());
    removeSeriesDefinition();
    setSeriesDeleteEnabled();
    int oldSelectedIndex=cmbSeriesSelect.getSelectionIndex();
    refreshSeriesCombo();
    if (oldSelectedIndex > cmbSeriesSelect.getItemCount() - 2) {
      oldSelectedIndex=cmbSeriesSelect.getItemCount() - 2;
    }
    cmbSeriesSelect.select(oldSelectedIndex);
    updateDataDefinition();
    refreshQuery();
    setSelectedSeriesIndex();
    ChartUIUtil.setSeriesName(wizardContext.getModel());
    selectDataUI.layoutAll();
  }
 else   if (e.widget.equals(cmbSeriesSelect)) {
    if (cmbSeriesSelect.getSelectionIndex() == cmbSeriesSelect.getItemCount() - 1 && !isPartChart()) {
      addNewSeriesDefinition();
      setSeriesDeleteEnabled();
      refreshSeriesCombo();
      cmbSeriesSelect.select(cmbSeriesSelect.getItemCount() - 2);
    }
    updateDataDefinition();
    refreshQuery();
    setSelectedSeriesIndex();
    selectDataUI.layoutAll();
  }
 else   if (e.widget.equals(cmbAxisSelect)) {
    if (cmbAxisSelect.getSelectionIndex() == cmbAxisSelect.getItemCount() - 1) {
      String currentDimension=ChartUIUtil.getDimensionString(getChart().getDimension());
      boolean isDimensionSupported=wizardContext.getChartType().isDimensionSupported(currentDimension,wizardContext,cmbAxisSelect.getItemCount(),0);
      if (!isDimensionSupported) {
        ChartAdapter.beginIgnoreNotifications();
        getChart().setDimension(ChartUIUtil.getDimensionType(wizardContext.getChartType().getDefaultDimension()));
        ChartAdapter.endIgnoreNotifications();
      }
      ChartUIUtil.addAxis((ChartWithAxes)getChart());
      setAxisDeleteEnabled();
      refreshAxisCombo();
      cmbAxisSelect.select(cmbAxisSelect.getItemCount() - 2);
    }
    axisIndex=cmbAxisSelect.getSelectionIndex();
    updateAllSeriesUnderAxis();
  }
 else   if (e.widget.equals(btnAxisDelete)) {
    updateColorRegistry(-1);
    ChartUIUtil.removeAxis(getChart(),axisIndex);
    setAxisDeleteEnabled();
    refreshAxisCombo();
    if (axisIndex > cmbAxisSelect.getItemCount() - 2) {
      axisIndex=cmbAxisSelect.getItemCount() - 2;
    }
    cmbAxisSelect.select(axisIndex);
    ChartUIUtil.setSeriesName(wizardContext.getModel());
    updateAllSeriesUnderAxis();
  }
}","public void widgetSelected(SelectionEvent e){
  if (e.widget.equals(btnSeriesDelete)) {
    updateColorRegistry(cmbSeriesSelect.getSelectionIndex());
    removeSeriesDefinition();
    setSeriesDeleteEnabled();
    int oldSelectedIndex=cmbSeriesSelect.getSelectionIndex();
    refreshSeriesCombo();
    if (oldSelectedIndex > cmbSeriesSelect.getItemCount() - 2) {
      oldSelectedIndex=cmbSeriesSelect.getItemCount() - 2;
    }
    cmbSeriesSelect.select(oldSelectedIndex);
    updateDataDefinition();
    refreshQuery();
    setSelectedSeriesIndex();
    ChartUIUtil.setSeriesName(wizardContext.getModel());
    selectDataUI.layoutAll();
  }
 else   if (e.widget.equals(cmbSeriesSelect)) {
    if (cmbSeriesSelect.getSelectionIndex() == cmbSeriesSelect.getItemCount() - 1 && !isPartChart()) {
      addNewSeriesDefinition();
      setSeriesDeleteEnabled();
      refreshSeriesCombo();
      cmbSeriesSelect.select(cmbSeriesSelect.getItemCount() - 2);
    }
    updateDataDefinition();
    refreshQuery();
    setSelectedSeriesIndex();
    selectDataUI.layoutAll();
  }
 else   if (e.widget.equals(cmbAxisSelect)) {
    if (cmbAxisSelect.getSelectionIndex() == cmbAxisSelect.getItemCount() - 1) {
      String currentDimension=ChartUIUtil.getDimensionString(getChart().getDimension());
      boolean isDimensionSupported=wizardContext.getChartType().isDimensionSupported(currentDimension,wizardContext,cmbAxisSelect.getItemCount(),0);
      if (!isDimensionSupported) {
        ChartAdapter.beginIgnoreNotifications();
        getChart().setDimension(ChartUIUtil.getDimensionType(wizardContext.getChartType().getDefaultDimension()));
        ChartAdapter.endIgnoreNotifications();
      }
      ChartUIUtil.addAxis((ChartWithAxes)getChart());
      setAxisDeleteEnabled();
      refreshAxisCombo();
      cmbAxisSelect.select(cmbAxisSelect.getItemCount() - 2);
    }
    axisIndex=cmbAxisSelect.getSelectionIndex();
    updateAllSeriesUnderAxis();
  }
 else   if (e.widget.equals(btnAxisDelete)) {
    updateColorRegistry(-1);
    ChartUIUtil.removeAxis(getChart(),axisIndex);
    setAxisDeleteEnabled();
    refreshAxisCombo();
    if (axisIndex > cmbAxisSelect.getItemCount() - 2) {
      axisIndex=cmbAxisSelect.getItemCount() - 2;
    }
    cmbAxisSelect.select(axisIndex);
    ChartUIUtil.setSeriesName(wizardContext.getModel());
    updateAllSeriesUnderAxis();
  }
  ChartUIUtil.checkAggregateType(wizardContext);
}",0.9897767577717504
69930,"/** 
 * Get the compatible axis type according to series type.
 * @param series
 * @return An array containing all possible axis types for the designated series.
 * @since 2.2
 */
public AxisType[] getCompatibleAxisType(Series series);","/** 
 * Get the compatible axis type according to series type.
 * @param series
 * @return An array containing all possible axis types for the designatedseries.
 * @since 2.2
 */
public AxisType[] getCompatibleAxisType(Series series);",0.997867803837953
69931,"/** 
 * Check if default aggregation and value series aggregation are valid for Gantt chart and show warning message in UI.
 * @param context
 * @since 2.3
 */
public static void checkAggregateType(ChartWizardContext context){
  boolean isValidAgg=true;
  for (Iterator<SeriesDefinition> iter=ChartUIUtil.getOrthogonalSeriesDefinitions(context.getModel(),0).iterator(); iter.hasNext(); ) {
    if (!isValidAgg) {
      return;
    }
    SeriesDefinition orthSD=iter.next();
    if (orthSD.getGrouping() != null && orthSD.getGrouping().isEnabled()) {
      isValidAgg=isValidAggregation(context,orthSD.getGrouping(),false);
    }
  }
  if (isValidAgg) {
    SeriesDefinition baseSD=ChartUIUtil.getBaseSeriesDefinitions(context.getModel()).get(0);
    if (baseSD.getGrouping() != null && baseSD.getGrouping().isEnabled()) {
      isValidAggregation(context,baseSD.getGrouping(),true);
    }
  }
}","/** 
 * Check if default aggregation and value series aggregation are valid for Gantt chart and show warning message in UI.
 * @param context
 * @since 2.3
 */
public static void checkAggregateType(ChartWizardContext context){
  boolean isValid=true;
  SeriesDefinition baseSD=ChartUIUtil.getBaseSeriesDefinitions(context.getModel()).get(0);
  for (  SeriesDefinition orthSD : ChartUIUtil.getOrthogonalSeriesDefinitions(context.getModel(),0)) {
    if (!isValid) {
      return;
    }
    Series oSeries=orthSD.getDesignTimeSeries();
    isValid=getSeriesUIProvider(oSeries).isValidAggregationType(oSeries,orthSD,baseSD);
  }
}",0.5036160420775806
69932,"public SplitResult split(int height,boolean force) throws BirtException {
  SplitResult result=cell.split(height + delta,force);
  if (result.getResult() != null) {
    RowArea row=(RowArea)cell.getParent();
    row.replace(cell,(CellArea)result.getResult());
  }
  return result;
}","public SplitResult split(int height,boolean force) throws BirtException {
  SplitResult result=cell.split(height + delta,force);
  return result;
}",0.6853146853146853
69933,"protected void _splitSpanCell(int height,boolean force) throws BirtException {
  if (cells.length != children.size()) {
    for (int i=0; i < cells.length; i++) {
      if (cells[i] instanceof DummyCell) {
        int oh=((DummyCell)cells[i]).getCell().getHeight();
        int ch=((DummyCell)cells[i]).getDelta();
        int rowSpan=((DummyCell)cells[i]).getRowSpan();
        if (ch >= oh) {
          CellArea cell=cells[i].cloneArea();
          cell.setHeight(0);
          cell.setRowSpan(rowSpan);
          cell.setParent(this);
          addChildByColumnId(cell);
        }
 else {
          CellArea cell=cells[i].cloneArea();
          cell.setHeight(0);
          cell.setRowSpan(rowSpan);
          cell.setParent(this);
          addChildByColumnId(cell);
        }
        i=i + cells[i].getColSpan() - 1;
      }
    }
  }
}","protected void _splitSpanCell(int height,boolean force) throws BirtException {
  if (cells.length != children.size()) {
    for (int i=0; i < cells.length; i++) {
      if (cells[i] instanceof DummyCell) {
        int oh=((DummyCell)cells[i]).getCell().getHeight();
        int ch=((DummyCell)cells[i]).getDelta();
        int rowSpan=((DummyCell)cells[i]).getRowSpan();
        if (ch >= oh) {
          CellArea cell=cells[i].cloneArea();
          cell.setHeight(0);
          cell.setRowSpan(rowSpan);
          cell.setParent(this);
          addChildByColumnId(cell);
        }
 else {
          SplitResult splitCell=cells[i].split(height,force);
          CellArea cell=(CellArea)splitCell.getResult();
          if (cell != null) {
            CellArea oc=((DummyCell)cells[i]).getCell();
            ArrayList temp=cell.children;
            cell.children=oc.children;
            oc.children=temp;
            oc.updateChildrenPosition();
            cell.updateChildrenPosition();
            cell.setRowSpan(rowSpan);
            cell.setParent(this);
            addChildByColumnId(cell);
          }
 else {
            cell=cells[i].cloneArea();
            cell.setHeight(0);
            cell.setRowSpan(rowSpan);
            cell.setParent(this);
            addChildByColumnId(cell);
          }
        }
        i=i + cells[i].getColSpan() - 1;
      }
    }
  }
}",0.7187780772686433
69934,"public boolean next() throws BirtException {
  boolean hasNext=super.next();
  if (hasNext)   currRowIndex++;
  return hasNext;
}","public boolean next() throws BirtException {
  boolean hasNext=super.next();
  if (hasNext)   currRowIndex++;
 else   if (currRowIndex == -1) {
    this.cachedRowId=-1;
  }
  return hasNext;
}",0.8037383177570093
69935,"protected void writeText(int type,String txt,IContent content,InlineFlag inlineFlag,IStyle computedStyle,IStyle inlineStyle){
  HyperlinkInfo hyper=getHyperlink(content);
  if (content instanceof TextContent) {
    TextFlag textFlag=TextFlag.START;
    String fontFamily=null;
    if (""String_Node_Str"".equals(txt)) {
      wordWriter.writeContent(type,txt,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag);
    }
 else {
      FontSplitter fontSplitter=getFontSplitter(content);
      while (fontSplitter.hasMore()) {
        Chunk ch=fontSplitter.getNext();
        int offset=ch.getOffset();
        int length=ch.getLength();
        fontFamily=getFontFamily(computedStyle,ch);
        wordWriter.writeContent(type,txt.substring(offset,offset + length),computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag);
        textFlag=fontSplitter.hasMore() ? TextFlag.MIDDLE : TextFlag.END;
      }
    }
    if (inlineFlag == InlineFlag.BLOCK) {
      wordWriter.writeContent(type,null,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,TextFlag.END);
    }
  }
 else {
    wordWriter.writeContent(type,txt,computedStyle,inlineStyle,computedStyle.getFontFamily(),hyper,inlineFlag,TextFlag.WHOLE);
  }
}","protected void writeText(int type,String txt,IContent content,InlineFlag inlineFlag,IStyle computedStyle,IStyle inlineStyle){
  HyperlinkInfo hyper=getHyperlink(content);
  if (content instanceof TextContent) {
    TextFlag textFlag=TextFlag.START;
    String fontFamily=null;
    if (""String_Node_Str"".equals(txt) || txt == null) {
      wordWriter.writeContent(type,txt,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag);
    }
 else {
      FontSplitter fontSplitter=getFontSplitter(content);
      while (fontSplitter.hasMore()) {
        Chunk ch=fontSplitter.getNext();
        int offset=ch.getOffset();
        int length=ch.getLength();
        fontFamily=getFontFamily(computedStyle,ch);
        wordWriter.writeContent(type,txt.substring(offset,offset + length),computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag);
        textFlag=fontSplitter.hasMore() ? TextFlag.MIDDLE : TextFlag.END;
      }
    }
    if (inlineFlag == InlineFlag.BLOCK) {
      wordWriter.writeContent(type,null,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,TextFlag.END);
    }
  }
 else {
    wordWriter.writeContent(type,txt,computedStyle,inlineStyle,computedStyle.getFontFamily(),hyper,inlineFlag,TextFlag.WHOLE);
  }
}",0.9939148073022313
69936,"private String getFontFamily(IStyle c_style,Chunk ch){
  FontInfo info=ch.getFontInfo();
  return info.getFontName();
}","private String getFontFamily(IStyle c_style,Chunk ch){
  String fontFamily=null;
  FontInfo info=ch.getFontInfo();
  if (info != null) {
    fontFamily=info.getFontName();
  }
 else {
    fontFamily=c_style.getFontFamily();
  }
  return fontFamily;
}",0.6070460704607046
69937,"private Chunk processLineBreak(){
  Chunk lineBreakChunk=null;
  if (chunkText[currentPos] == '\n') {
    lineBreakChunk=Chunk.HARD_LINE_BREAK;
    lineBreakChunk.setText(""String_Node_Str"");
  }
 else   if (chunkText[currentPos] == '\r') {
    lineBreakChunk=Chunk.HARD_LINE_BREAK;
    if (currentPos + 1 < chunkText.length && chunkText[currentPos + 1] == '\n') {
      lineBreakChunk.setText(""String_Node_Str"");
    }
 else {
      lineBreakChunk.setText(""String_Node_Str"");
    }
  }
  if (lineBreakChunk != null) {
    return processLineBreak(lineBreakChunk);
  }
  return null;
}","private Chunk processLineBreak(){
  Chunk lineBreakChunk=null;
  if (chunkText[currentPos] == '\n') {
    lineBreakChunk=Chunk.HARD_LINE_BREAK;
    lineBreakChunk.setText(""String_Node_Str"");
    lineBreakChunk.setOffset(currentPos);
  }
 else   if (chunkText[currentPos] == '\r') {
    lineBreakChunk=Chunk.HARD_LINE_BREAK;
    lineBreakChunk.setOffset(currentPos);
    if (currentPos + 1 < chunkText.length && chunkText[currentPos + 1] == '\n') {
      lineBreakChunk.setText(""String_Node_Str"");
    }
 else {
      lineBreakChunk.setText(""String_Node_Str"");
    }
  }
  if (lineBreakChunk != null) {
    return processLineBreak(lineBreakChunk);
  }
  return null;
}",0.9328
69938,"/** 
 * Returns the object can be deleted. If the parent can be deleted, the children will be skippedl
 * @param source single or multiple objects
 */
protected boolean canDrop(Object source){
  if (source == null) {
    return false;
  }
  if (source instanceof List) {
    return canDrop(((List)source).toArray());
  }
  if (source instanceof StructuredSelection) {
    return canDrop(((StructuredSelection)source).toArray());
  }
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    if (array.length == 0) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (DNDUtil.checkContainerExists(array[i],array))       continue;
      if (array[i] instanceof MasterPageHandle) {
        int masterPageCount=SessionHandleAdapter.getInstance().getReportDesignHandle().getMasterPages().getCount();
        for (int j=0; j < array.length; j++) {
          if (array[j] instanceof MasterPageHandle)           masterPageCount--;
        }
        if (masterPageCount == 0)         return false;
      }
      if (!canDrop(array[i]))       return false;
    }
    return true;
  }
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    DesignElementHandle handle=slot.getElementHandle();
    return slot.getContents().size() > 0 && ((handle instanceof ListHandle && ((ListHandle)handle).canDrop()) || (handle instanceof ListGroupHandle && ((ListGroupHandle)handle).canDrop())) && canDrop(slot.getContents());
  }
  if (source instanceof EmbeddedImageHandle) {
    return true;
  }
  if (source instanceof ExtendedItemHandle && isExtendedCell((ExtendedItemHandle)source)) {
    return ((ExtendedItemHandle)source).getContents(DEUtil.getDefaultContentName(source)).size() > 0 && ((ExtendedItemHandle)source).canDrop();
  }
  if (source instanceof CellHandle) {
    return ((CellHandle)source).getContent().getContents().size() > 0 && ((CellHandle)source).canDrop();
  }
  if (source instanceof MasterPageHandle) {
    if (SessionHandleAdapter.getInstance().getReportDesignHandle().getMasterPages().getCount() > 1) {
      return true;
    }
    return false;
  }
 else   if (source instanceof ReportElementHandle) {
    return ((ReportElementHandle)source).canDrop();
  }
 else   if (source instanceof LibraryHandle) {
    if (((LibraryHandle)source).getHostHandle() != null)     return true;
 else     return false;
  }
 else   if (source instanceof CssStyleSheetHandle) {
    DesignElementHandle elementHandle=((CssStyleSheetHandle)source).getContainerHandle();
    if (elementHandle instanceof ReportDesignHandle) {
      return ((ReportDesignHandle)elementHandle).canDropCssStyleSheet((CssStyleSheetHandle)source);
    }
 else     if (elementHandle instanceof ThemeHandle) {
      return ((ThemeHandle)elementHandle).canDropCssStyleSheet((CssStyleSheetHandle)source);
    }
 else {
      return false;
    }
  }
 else   return false;
}","/** 
 * Returns the object can be deleted. If the parent can be deleted, the children will be skippedl
 * @param source single or multiple objects
 */
protected boolean canDrop(Object source){
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() == null) {
    return false;
  }
  if (source == null) {
    return false;
  }
  if (source instanceof List) {
    return canDrop(((List)source).toArray());
  }
  if (source instanceof StructuredSelection) {
    return canDrop(((StructuredSelection)source).toArray());
  }
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    if (array.length == 0) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (DNDUtil.checkContainerExists(array[i],array))       continue;
      if (array[i] instanceof MasterPageHandle) {
        int masterPageCount=SessionHandleAdapter.getInstance().getReportDesignHandle().getMasterPages().getCount();
        for (int j=0; j < array.length; j++) {
          if (array[j] instanceof MasterPageHandle)           masterPageCount--;
        }
        if (masterPageCount == 0)         return false;
      }
      if (!canDrop(array[i]))       return false;
    }
    return true;
  }
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    DesignElementHandle handle=slot.getElementHandle();
    return slot.getContents().size() > 0 && ((handle instanceof ListHandle && ((ListHandle)handle).canDrop()) || (handle instanceof ListGroupHandle && ((ListGroupHandle)handle).canDrop())) && canDrop(slot.getContents());
  }
  if (source instanceof EmbeddedImageHandle) {
    return true;
  }
  if (source instanceof ExtendedItemHandle && isExtendedCell((ExtendedItemHandle)source)) {
    return ((ExtendedItemHandle)source).getContents(DEUtil.getDefaultContentName(source)).size() > 0 && ((ExtendedItemHandle)source).canDrop();
  }
  if (source instanceof CellHandle) {
    return ((CellHandle)source).getContent().getContents().size() > 0 && ((CellHandle)source).canDrop();
  }
  if (source instanceof MasterPageHandle) {
    if (SessionHandleAdapter.getInstance().getReportDesignHandle().getMasterPages().getCount() > 1) {
      return true;
    }
    return false;
  }
 else   if (source instanceof ReportElementHandle) {
    return ((ReportElementHandle)source).canDrop();
  }
 else   if (source instanceof LibraryHandle) {
    if (((LibraryHandle)source).getHostHandle() != null)     return true;
 else     return false;
  }
 else   if (source instanceof CssStyleSheetHandle) {
    DesignElementHandle elementHandle=((CssStyleSheetHandle)source).getContainerHandle();
    if (elementHandle instanceof ReportDesignHandle) {
      return ((ReportDesignHandle)elementHandle).canDropCssStyleSheet((CssStyleSheetHandle)source);
    }
 else     if (elementHandle instanceof ThemeHandle) {
      return ((ThemeHandle)elementHandle).canDropCssStyleSheet((CssStyleSheetHandle)source);
    }
 else {
      return false;
    }
  }
 else   return false;
}",0.9836284664216504
69939,"public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  List existingCubes=getCubes();
  CommandStack stack=getActionStack();
  stack.startTrans(""String_Node_Str"");
  TabularCubeHandle newCube=DesignElementFactory.getInstance().newTabularCube(Messages.getString(""String_Node_Str""));
  boolean isFailed=false;
  try {
    SessionHandleAdapter.getInstance().getReportDesignHandle().getCubes().add(newCube);
    CubeBuilder builder=new CubeBuilder(PlatformUI.getWorkbench().getDisplay().getActiveShell(),newCube);
    String wizardTitle=Messages.getString(""String_Node_Str"");
    builder.setTitle(wizardTitle);
    int result=builder.open();
    notifyResult(result == WizardDialog.OK);
    if (result != WizardDialog.OK) {
      stack.rollback();
      isFailed=true;
    }
  }
 catch (  Exception e) {
    stack.rollback();
    isFailed=true;
    ExceptionHandler.handle(e);
  }
  if (!isFailed)   stack.commit();
  List newCubes=getCubes();
  CubeHandle cube=findNewCube(existingCubes,newCubes);
  ReportRequest request=new ReportRequest(ReportRequest.CREATE_ELEMENT);
  List selectionObjects=new ArrayList();
  selectionObjects.add(cube);
  request.setSelectionObject(selectionObjects);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
}","public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() == null) {
    return;
  }
  List existingCubes=getCubes();
  CommandStack stack=getActionStack();
  stack.startTrans(""String_Node_Str"");
  TabularCubeHandle newCube=DesignElementFactory.getInstance().newTabularCube(Messages.getString(""String_Node_Str""));
  boolean isFailed=false;
  try {
    SessionHandleAdapter.getInstance().getReportDesignHandle().getCubes().add(newCube);
    CubeBuilder builder=new CubeBuilder(PlatformUI.getWorkbench().getDisplay().getActiveShell(),newCube);
    String wizardTitle=Messages.getString(""String_Node_Str"");
    builder.setTitle(wizardTitle);
    int result=builder.open();
    notifyResult(result == WizardDialog.OK);
    if (result != WizardDialog.OK) {
      stack.rollback();
      isFailed=true;
    }
  }
 catch (  Exception e) {
    stack.rollback();
    isFailed=true;
    ExceptionHandler.handle(e);
  }
  if (!isFailed)   stack.commit();
  List newCubes=getCubes();
  CubeHandle cube=findNewCube(existingCubes,newCubes);
  ReportRequest request=new ReportRequest(ReportRequest.CREATE_ELEMENT);
  List selectionObjects=new ArrayList();
  selectionObjects.add(cube);
  request.setSelectionObject(selectionObjects);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
}",0.96602658788774
69940,"public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  List existingDataSets=getDataSets();
  if (existingDataSets.isEmpty()) {
    MessageDialog.openError(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    notifyResult(false);
  }
 else {
    HandleAdapterFactory.getInstance().getReportDesignHandleAdapter().getModuleHandle().getCommandStack().startPersistentTrans(Messages.getString(""String_Node_Str""));
    JointDataSetWizard wizard=new JointDataSetWizard();
    wizard.setWindowTitle(Messages.getString(""String_Node_Str""));
    WizardDialog dialog=new WizardDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),wizard){
      protected void configureShell(      Shell newShell){
        super.configureShell(newShell);
        newShell.setSize(750,650);
        Rectangle rect=Display.getDefault().getBounds();
        newShell.setLocation((rect.width - 750) / 2,(rect.height - 650) / 2);
      }
    }
;
    if (dialog.open() == WizardDialog.OK) {
      List newDataSets=getDataSets();
      editDataSet(existingDataSets,newDataSets);
      HandleAdapterFactory.getInstance().getReportDesignHandleAdapter().getModuleHandle().getCommandStack().commit();
      ReportRequest request=new ReportRequest(ReportRequest.CREATE_ELEMENT);
      List selectionObjects=new ArrayList();
      selectionObjects.add(dataSetHandle);
      request.setSelectionObject(selectionObjects);
      SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
      notifyResult(true);
    }
 else {
      HandleAdapterFactory.getInstance().getReportDesignHandleAdapter().getModuleHandle().getCommandStack().rollback();
      notifyResult(false);
    }
  }
}","public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() == null) {
    return;
  }
  List existingDataSets=getDataSets();
  if (existingDataSets.isEmpty()) {
    MessageDialog.openError(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    notifyResult(false);
  }
 else {
    if (SessionHandleAdapter.getInstance().getReportDesignHandle() == null) {
      return;
    }
    HandleAdapterFactory.getInstance().getReportDesignHandleAdapter().getModuleHandle().getCommandStack().startPersistentTrans(Messages.getString(""String_Node_Str""));
    JointDataSetWizard wizard=new JointDataSetWizard();
    wizard.setWindowTitle(Messages.getString(""String_Node_Str""));
    WizardDialog dialog=new WizardDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),wizard){
      protected void configureShell(      Shell newShell){
        super.configureShell(newShell);
        newShell.setSize(750,650);
        Rectangle rect=Display.getDefault().getBounds();
        newShell.setLocation((rect.width - 750) / 2,(rect.height - 650) / 2);
      }
    }
;
    if (dialog.open() == WizardDialog.OK) {
      List newDataSets=getDataSets();
      editDataSet(existingDataSets,newDataSets);
      HandleAdapterFactory.getInstance().getReportDesignHandleAdapter().getModuleHandle().getCommandStack().commit();
      ReportRequest request=new ReportRequest(ReportRequest.CREATE_ELEMENT);
      List selectionObjects=new ArrayList();
      selectionObjects.add(dataSetHandle);
      request.setSelectionObject(selectionObjects);
      SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
      notifyResult(true);
    }
 else {
      HandleAdapterFactory.getInstance().getReportDesignHandleAdapter().getModuleHandle().getCommandStack().rollback();
      notifyResult(false);
    }
  }
}",0.9497354497354498
69941,"private void gendoc(IAction action){
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  FormEditor editor=UIUtil.getActiveReportEditor(false);
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (editor != null) {
    if (model.needsSave()) {
      editor.doSave(null);
    }
  }
  Map options=new HashMap();
  options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
  options.put(WebViewer.SERVLET_NAME_KEY,WebViewer.VIEWER_DOCUMENT);
  Object adapter=ElementAdapterManager.getAdapter(action,IPreviewAction.class);
  if (adapter instanceof IPreviewAction) {
    IPreviewAction delegate=(IPreviewAction)adapter;
    delegate.setProperty(IPreviewConstants.REPORT_PREVIEW_OPTIONS,options);
    delegate.setProperty(IPreviewConstants.REPORT_FILE_PATH,model.getFileName());
    delegate.run();
    return;
  }
  WebViewer.display(model.getFileName(),options);
}","private void gendoc(IAction action){
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  FormEditor editor=UIUtil.getActiveReportEditor(false);
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (model == null) {
    return;
  }
  if (editor != null) {
    if (model.needsSave()) {
      editor.doSave(null);
    }
  }
  Map options=new HashMap();
  options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
  options.put(WebViewer.SERVLET_NAME_KEY,WebViewer.VIEWER_DOCUMENT);
  Object adapter=ElementAdapterManager.getAdapter(action,IPreviewAction.class);
  if (adapter instanceof IPreviewAction) {
    IPreviewAction delegate=(IPreviewAction)adapter;
    delegate.setProperty(IPreviewConstants.REPORT_PREVIEW_OPTIONS,options);
    delegate.setProperty(IPreviewConstants.REPORT_FILE_PATH,model.getFileName());
    delegate.run();
    return;
  }
  WebViewer.display(model.getFileName(),options);
}",0.9820193637621024
69942,"protected void preview(String format,boolean allowPage){
  if (!prePreview()) {
    return;
  }
  FormEditor editor=UIUtil.getActiveReportEditor(false);
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (editor != null) {
    if (model.needsSave()) {
      editor.doSave(null);
    }
  }
  Map options=new HashMap();
  options.put(WebViewer.FORMAT_KEY,format);
  options.put(WebViewer.ALLOW_PAGE_KEY,Boolean.valueOf(allowPage));
  options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
  WebViewer.display(model.getFileName(),options);
}","protected void preview(String format,boolean allowPage){
  if (!prePreview()) {
    return;
  }
  FormEditor editor=UIUtil.getActiveReportEditor(false);
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (model == null) {
    return;
  }
  if (editor != null) {
    if (model.needsSave()) {
      editor.doSave(null);
    }
  }
  Map options=new HashMap();
  options.put(WebViewer.FORMAT_KEY,format);
  options.put(WebViewer.ALLOW_PAGE_KEY,Boolean.valueOf(allowPage));
  options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
  WebViewer.display(model.getFileName(),options);
}",0.9689243027888448
69943,"/** 
 * Runs this action. The detail implementation must define in the method <code>doAction</code>
 */
public void run(){
  if (!isEnabled()) {
    return;
  }
  CommandStack stack=getCommandStack();
  stack.startTrans(getTransactionLabel());
  try {
    if (Policy.TRACING_ACTIONS) {
      String[] result=this.getClass().getName().split(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + result[result.length - 1] + ""String_Node_Str""+ getSelection()+ ""String_Node_Str"");
    }
    if (doAction()) {
      if (Policy.TRACING_ACTIONS) {
        System.out.println(""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
      }
      stack.commit();
    }
 else {
      if (Policy.TRACING_ACTIONS) {
        System.out.println(""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
      }
      stack.rollbackAll();
    }
  }
 catch (  Exception e) {
    if (Policy.TRACING_ACTIONS) {
      System.out.println(""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    }
    stack.rollbackAll();
    handleException(e);
  }
}","/** 
 * Runs this action. The detail implementation must define in the method <code>doAction</code>
 */
public void run(){
  if (!isEnabled()) {
    return;
  }
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() == null) {
    return;
  }
  CommandStack stack=getCommandStack();
  stack.startTrans(getTransactionLabel());
  try {
    if (Policy.TRACING_ACTIONS) {
      String[] result=this.getClass().getName().split(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + result[result.length - 1] + ""String_Node_Str""+ getSelection()+ ""String_Node_Str"");
    }
    if (doAction()) {
      if (Policy.TRACING_ACTIONS) {
        System.out.println(""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
      }
      stack.commit();
    }
 else {
      if (Policy.TRACING_ACTIONS) {
        System.out.println(""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
      }
      stack.rollbackAll();
    }
  }
 catch (  Exception e) {
    if (Policy.TRACING_ACTIONS) {
      System.out.println(""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    }
    stack.rollbackAll();
    handleException(e);
  }
}",0.9591111111111112
69944,"public void run(){
  CommandStack stack=SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack();
  IElementProcessor processor=ElementProcessorFactory.createProcessor(dataType);
  stack.startTrans(processor.getCreateTransactionLabel());
  DesignElementHandle handle=processor.createElement(null);
  if (handle == null) {
    stack.rollback();
  }
 else {
    try {
      getContainer().add(handle);
    }
 catch (    Exception e) {
      stack.rollback();
      ExceptionHandler.handle(e);
    }
    stack.commit();
    synWithMediator(handle);
  }
  super.run();
}","public void run(){
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() == null) {
    return;
  }
  CommandStack stack=SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack();
  IElementProcessor processor=ElementProcessorFactory.createProcessor(dataType);
  stack.startTrans(processor.getCreateTransactionLabel());
  DesignElementHandle handle=processor.createElement(null);
  if (handle == null) {
    stack.rollback();
  }
 else {
    try {
      getContainer().add(handle);
    }
 catch (    Exception e) {
      stack.rollback();
      ExceptionHandler.handle(e);
    }
    stack.commit();
    synWithMediator(handle);
  }
  super.run();
}",0.9272151898734176
69945,"/** 
 * Perform renaming
 * @param handle the handle of the element to rename
 * @param newName the newName to set
 * @return Returns true if perform successfully,or false if failed
 */
private boolean rename(Object handle,String newName){
  if (newName.length() == 0) {
    newName=null;
  }
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(TRANS_LABEL + ""String_Node_Str"" + DEUtil.getDisplayLabel(handle));
  try {
    if (handle instanceof DesignElementHandle) {
      ((DesignElementHandle)handle).setName(newName);
    }
    if (handle instanceof EmbeddedImageHandle) {
      ((EmbeddedImageHandle)handle).setName(newName);
    }
    stack.commit();
  }
 catch (  NameException e) {
    ExceptionHandler.handle(e,ERROR_TITLE,e.getLocalizedMessage());
    stack.rollback();
    return false;
  }
catch (  SemanticException e) {
    ExceptionHandler.handle(e,ERROR_TITLE,e.getLocalizedMessage());
    stack.rollback();
    return true;
  }
  return true;
}","/** 
 * Perform renaming
 * @param handle the handle of the element to rename
 * @param newName the newName to set
 * @return Returns true if perform successfully,or false if failed
 */
private boolean rename(Object handle,String newName){
  if (newName.length() == 0) {
    newName=null;
  }
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() == null) {
    return false;
  }
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(TRANS_LABEL + ""String_Node_Str"" + DEUtil.getDisplayLabel(handle));
  try {
    if (handle instanceof DesignElementHandle) {
      ((DesignElementHandle)handle).setName(newName);
    }
    if (handle instanceof EmbeddedImageHandle) {
      ((EmbeddedImageHandle)handle).setName(newName);
    }
    stack.commit();
  }
 catch (  NameException e) {
    ExceptionHandler.handle(e,ERROR_TITLE,e.getLocalizedMessage());
    stack.rollback();
    return false;
  }
catch (  SemanticException e) {
    ExceptionHandler.handle(e,ERROR_TITLE,e.getLocalizedMessage());
    stack.rollback();
    return true;
  }
  return true;
}",0.95346628679962
69946,"public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
  for (int i=0; i < entries.length; i++) {
    if (entries[i].getItemName().equals(this.insertType)) {
      try {
        selectElement(entries[i].executeCreate(),false);
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
      return;
    }
  }
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(STACK_MSG_INSERT_ELEMENT);
  try {
    final Request req=insertElement();
    if (req != null) {
      stack.commit();
      selectElement(req.getExtendedData().get(IRequestConstants.REQUEST_KEY_RESULT),true);
      return;
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  stack.rollback();
}","public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
  for (int i=0; i < entries.length; i++) {
    if (entries[i].getItemName().equals(this.insertType)) {
      try {
        selectElement(entries[i].executeCreate(),false);
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
      return;
    }
  }
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() == null) {
    return;
  }
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(STACK_MSG_INSERT_ELEMENT);
  try {
    final Request req=insertElement();
    if (req != null) {
      stack.commit();
      selectElement(req.getExtendedData().get(IRequestConstants.REQUEST_KEY_RESULT),true);
      return;
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  stack.rollback();
}",0.9495060373216246
69947,"public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"" + getClass() + ""String_Node_Str"");
  }
  if (menu != null) {
    actionItems=getItems();
    menu.removeAll();
    for (Iterator i=actionItems.iterator(); i.hasNext(); ) {
      DynamicItemAction action=(DynamicItemAction)i.next();
      if (action != null) {
        action.setSelection(getSelection());
        menu.add(action);
      }
 else {
        menu.add(new Separator());
      }
    }
    if (menu.getItems().length == 0) {
      menu.add(NoneAction.getInstance());
    }
    menu.update(true);
  }
}","public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"" + getClass() + ""String_Node_Str"");
  }
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() == null) {
    return;
  }
  if (menu != null) {
    actionItems=getItems();
    menu.removeAll();
    for (Iterator i=actionItems.iterator(); i.hasNext(); ) {
      DynamicItemAction action=(DynamicItemAction)i.next();
      if (action != null) {
        action.setSelection(getSelection());
        menu.add(action);
      }
 else {
        menu.add(new Separator());
      }
    }
    if (menu.getItems().length == 0) {
      menu.add(NoneAction.getInstance());
    }
    menu.update(true);
  }
}",0.9291217257318952
69948,"public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  UIUtil.bindHelp(composite,IHelpContextIds.NEW_REPORT_COPY_WIZARD_ID);
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.marginHeight=10;
  gridLayout.marginWidth=10;
  gridLayout.horizontalSpacing=10;
  gridLayout.verticalSpacing=10;
  composite.setLayout(gridLayout);
  Label label0=new Label(composite,SWT.NONE);
  label0.setText(MESSAGE_REPORT_TEMPLATES);
  Label previewLabel=new Label(composite,SWT.NONE);
  previewLabel.setText(MESSAGE_PREVIEW);
  GridData data=new GridData(GridData.BEGINNING);
  previewLabel.setLayoutData(data);
  templateList=new TreeViewer(composite,SWT.BORDER | SWT.SINGLE);
  predefinedCount=templates.size();
  createCustomTemplateList();
  data=new GridData(GridData.BEGINNING | GridData.FILL_VERTICAL);
  data.widthHint=220;
  templateList.getTree().setLayoutData(data);
  previewPane=new Composite(composite,0);
  data=new GridData(GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
  previewPane.setLayoutData(data);
  gridLayout=new GridLayout();
  gridLayout.verticalSpacing=10;
  previewPane.setLayout(gridLayout);
  Composite previewComposite=new Composite(previewPane,SWT.BORDER);
  data=new GridData(GridData.BEGINNING);
  data.heightHint=229;
  data.widthHint=184;
  previewComposite.setLayoutData(data);
  previewComposite.setLayout(new FormLayout());
  previewCanvas=new ImageCanvas(previewComposite);
  FormData formData=new FormData(184,229);
  formData.left=new FormAttachment(previewComposite);
  formData.top=new FormAttachment(previewComposite);
  previewCanvas.setLayoutData(formData);
  Label descriptionTitle=new Label(previewPane,SWT.NONE);
  descriptionTitle.setText(MESSAGE_DESCRIPTION);
  data=new GridData(GridData.FILL_HORIZONTAL);
  descriptionTitle.setLayoutData(data);
  description=new Label(previewPane,SWT.WRAP);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=184;
  data.horizontalIndent=20;
  description.setLayoutData(data);
  new Label(previewPane,SWT.NONE);
  chkBox=new Button(composite,SWT.CHECK);
  chkBox.setText(MESSAGE_SHOW_CHEATSHEET);
  chkBox.setSelection(ReportPlugin.readCheatSheetPreference());
  chkBox.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      ReportPlugin.writeCheatSheetPreference(chkBox.getSelection());
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      ReportPlugin.writeCheatSheetPreference(chkBox.getSelection());
    }
  }
);
  addBidiPart(composite);
  hookListeners();
  initTreeViewer();
  if (templates.size() > 0) {
    templateList.setSelection(new StructuredSelection(templates.get(0)));
    setPageComplete(true);
  }
 else {
    setPageComplete(false);
  }
  setControl(composite);
}","public void createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  UIUtil.bindHelp(composite,IHelpContextIds.NEW_REPORT_COPY_WIZARD_ID);
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.marginHeight=10;
  gridLayout.marginWidth=10;
  gridLayout.horizontalSpacing=10;
  gridLayout.verticalSpacing=10;
  composite.setLayout(gridLayout);
  Label label0=new Label(composite,SWT.NONE);
  label0.setText(MESSAGE_REPORT_TEMPLATES);
  Label previewLabel=new Label(composite,SWT.NONE);
  previewLabel.setText(MESSAGE_PREVIEW);
  GridData data=new GridData(GridData.BEGINNING);
  previewLabel.setLayoutData(data);
  templateList=new TreeViewer(composite,SWT.BORDER | SWT.SINGLE);
  predefinedCount=templates.size();
  createCustomTemplateList();
  data=new GridData(GridData.BEGINNING | GridData.FILL_VERTICAL);
  data.widthHint=220;
  templateList.getTree().setLayoutData(data);
  previewPane=new Composite(composite,0);
  data=new GridData(GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
  previewPane.setLayoutData(data);
  gridLayout=new GridLayout();
  gridLayout.verticalSpacing=10;
  previewPane.setLayout(gridLayout);
  Composite previewComposite=new Composite(previewPane,SWT.BORDER);
  data=new GridData(GridData.BEGINNING);
  data.heightHint=229;
  data.widthHint=184;
  previewComposite.setLayoutData(data);
  previewComposite.setLayout(new FormLayout());
  previewCanvas=new ImageCanvas(previewComposite);
  FormData formData=new FormData(184,229);
  formData.left=new FormAttachment(previewComposite);
  formData.top=new FormAttachment(previewComposite);
  previewCanvas.setLayoutData(formData);
  Label descriptionTitle=new Label(previewPane,SWT.NONE);
  descriptionTitle.setText(MESSAGE_DESCRIPTION);
  data=new GridData(GridData.FILL_HORIZONTAL);
  descriptionTitle.setLayoutData(data);
  description=new Label(previewPane,SWT.WRAP);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.widthHint=184;
  data.horizontalIndent=20;
  description.setLayoutData(data);
  new Label(previewPane,SWT.NONE);
  chkBox=new Button(composite,SWT.CHECK);
  chkBox.setText(MESSAGE_SHOW_CHEATSHEET);
  chkBox.setSelection(ReportPlugin.readCheatSheetPreference());
  chkBox.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      ReportPlugin.writeCheatSheetPreference(chkBox.getSelection());
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      ReportPlugin.writeCheatSheetPreference(chkBox.getSelection());
    }
  }
);
  hookListeners();
  initTreeViewer();
  if (templates.size() > 0) {
    templateList.setSelection(new StructuredSelection(templates.get(0)));
    setPageComplete(true);
  }
 else {
    setPageComplete(false);
  }
  setControl(composite);
}",0.9152421652421652
69949,"private void processSelectionReportDesignHandle(ReportDesignHandle handle){
  if (handle == null) {
    previewCanvas.clear();
    description.setText(""String_Node_Str"");
    chkBox.setSelection(false);
    chkBox.setEnabled(false);
    setPageComplete(false);
    directionCombo.setEnabled(false);
    return;
  }
  directionCombo.setEnabled(true);
  String ReprotDescription=handle.getDescription();
  if (ReprotDescription != null && ReprotDescription.trim().length() != 0) {
    if (isPredifinedTemplate(handle.getFileName())) {
      description.setText(Messages.getString(ReprotDescription));
    }
 else {
      description.setText(ReprotDescription);
    }
  }
 else {
    description.setText(""String_Node_Str"");
  }
  previewPane.layout();
  String key=handle.getIconFile();
  if (key != null && key.trim().length() != 0 && checkExtensions(key) == false) {
    key=null;
  }
  Object img=null;
  if (handle.getThumbnail() != null && handle.getThumbnail().length != 0) {
    byte[] thumbnailData=handle.getThumbnail();
    ByteArrayInputStream inputStream=new ByteArrayInputStream(thumbnailData);
    if (thumbnailImage != null) {
      thumbnailImage.dispose();
      thumbnailImage=null;
    }
    thumbnailImage=new Image(null,inputStream);
    previewCanvas.clear();
    previewCanvas.loadImage(thumbnailImage);
  }
 else   if ((key != null) && (!""String_Node_Str"".equals(key.trim()))) {
    URL url=getPreviewImageURL(handle.getFileName(),key);
    if (url != null) {
      try {
        key=FileLocator.resolve(url).getPath();
      }
 catch (      IOException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
      img=imageMap.get(key);
      if (img == null) {
        try {
          url=new URL(""String_Node_Str"" + key);
          img=ImageManager.getInstance().loadImage(url);
        }
 catch (        IOException e) {
          logger.log(Level.SEVERE,e.getMessage(),e);
        }
        if (img != null) {
          imageMap.put(key,img);
        }
      }
      if (img != null) {
        previewCanvas.clear();
        previewCanvas.loadImage(((Image)img));
      }
    }
 else {
      key=null;
    }
  }
  if ((handle.getThumbnail() == null || handle.getThumbnail().length == 0) && key == null) {
    if (thumbnailImage != null) {
      thumbnailImage.dispose();
      thumbnailImage=null;
    }
    Rectangle rect=previewCanvas.getBounds();
    thumbnailImage=new Image(null,rect.width,rect.height);
    ReportGraphicsViewPainter painter=new ReportGraphicsViewPainter(handle);
    painter.paint(thumbnailImage,previewCanvas.getDisplay(),rect);
    painter.dispose();
    previewCanvas.clear();
    previewCanvas.loadImage(thumbnailImage);
  }
  if (handle.getCheatSheet() != null && handle.getCheatSheet().trim().length() != 0) {
    chkBox.setEnabled(!(handle.getCheatSheet().equals(""String_Node_Str"") || handle.getCheatSheet().equals(""String_Node_Str"")));
    chkBox.setSelection(true);
  }
 else {
    chkBox.setSelection(false);
    chkBox.setEnabled(false);
  }
  setPageComplete(true);
}","private void processSelectionReportDesignHandle(ReportDesignHandle handle){
  if (handle == null) {
    previewCanvas.clear();
    description.setText(""String_Node_Str"");
    chkBox.setSelection(false);
    chkBox.setEnabled(false);
    setPageComplete(false);
    if (directionCombo != null) {
      directionCombo.setEnabled(false);
    }
    return;
  }
  if (directionCombo != null) {
    directionCombo.setEnabled(true);
  }
  String ReprotDescription=handle.getDescription();
  if (ReprotDescription != null && ReprotDescription.trim().length() != 0) {
    if (isPredifinedTemplate(handle.getFileName())) {
      description.setText(Messages.getString(ReprotDescription));
    }
 else {
      description.setText(ReprotDescription);
    }
  }
 else {
    description.setText(""String_Node_Str"");
  }
  previewPane.layout();
  String key=handle.getIconFile();
  if (key != null && key.trim().length() != 0 && checkExtensions(key) == false) {
    key=null;
  }
  Object img=null;
  if (handle.getThumbnail() != null && handle.getThumbnail().length != 0) {
    byte[] thumbnailData=handle.getThumbnail();
    ByteArrayInputStream inputStream=new ByteArrayInputStream(thumbnailData);
    if (thumbnailImage != null) {
      thumbnailImage.dispose();
      thumbnailImage=null;
    }
    thumbnailImage=new Image(null,inputStream);
    previewCanvas.clear();
    previewCanvas.loadImage(thumbnailImage);
  }
 else   if ((key != null) && (!""String_Node_Str"".equals(key.trim()))) {
    URL url=getPreviewImageURL(handle.getFileName(),key);
    if (url != null) {
      try {
        key=FileLocator.resolve(url).getPath();
      }
 catch (      IOException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
      img=imageMap.get(key);
      if (img == null) {
        try {
          url=new URL(""String_Node_Str"" + key);
          img=ImageManager.getInstance().loadImage(url);
        }
 catch (        IOException e) {
          logger.log(Level.SEVERE,e.getMessage(),e);
        }
        if (img != null) {
          imageMap.put(key,img);
        }
      }
      if (img != null) {
        previewCanvas.clear();
        previewCanvas.loadImage(((Image)img));
      }
    }
 else {
      key=null;
    }
  }
  if ((handle.getThumbnail() == null || handle.getThumbnail().length == 0) && key == null) {
    if (thumbnailImage != null) {
      thumbnailImage.dispose();
      thumbnailImage=null;
    }
    Rectangle rect=previewCanvas.getBounds();
    thumbnailImage=new Image(null,rect.width,rect.height);
    ReportGraphicsViewPainter painter=new ReportGraphicsViewPainter(handle);
    painter.paint(thumbnailImage,previewCanvas.getDisplay(),rect);
    painter.dispose();
    previewCanvas.clear();
    previewCanvas.loadImage(thumbnailImage);
  }
  if (handle.getCheatSheet() != null && handle.getCheatSheet().trim().length() != 0) {
    chkBox.setEnabled(!(handle.getCheatSheet().equals(""String_Node_Str"") || handle.getCheatSheet().equals(""String_Node_Str"")));
    chkBox.setSelection(true);
  }
 else {
    chkBox.setSelection(false);
    chkBox.setEnabled(false);
  }
  setPageComplete(true);
}",0.983750406239844
69950,"/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
protected final void initialize(int iAxisType){
  setLabel(LabelImpl.create());
  LineAttributes lia=LineAttributesImpl.create(this,ComponentPackage.eINSTANCE.getAxis_LineAttributes());
  setLineAttributes(lia);
  AxisOrigin ao=AttributeFactory.eINSTANCE.createAxisOrigin();
  ao.setType(IntersectionType.MIN_LITERAL);
  ao.setValue(null);
  setOrigin(ao);
  Label la=LabelImpl.create();
  la.getCaption().setValue(""String_Node_Str"");
  la.getCaption().getFont().setSize(14);
  la.getCaption().getFont().setBold(true);
  TextAlignment ta=TextAlignmentImpl.create();
  ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
  ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
  la.getCaption().getFont().setAlignment(ta);
  la.setVisible(false);
  setTitle(la);
  Grid gr=ComponentFactory.eINSTANCE.createGrid();
  lia=LineAttributesImpl.create(gr,ComponentPackage.eINSTANCE.getGrid_LineAttributes());
  lia.setColor(ColorDefinitionImpl.create(196,196,196));
  gr.setLineAttributes(lia);
  lia=LineAttributesImpl.create(gr,ComponentPackage.eINSTANCE.getGrid_LineAttributes());
  lia.setColor(ColorDefinitionImpl.create(196,196,196));
  lia.setVisible(true);
  gr.setTickAttributes(lia);
  setMajorGrid(gr);
  gr=ComponentFactory.eINSTANCE.createGrid();
  lia=LineAttributesImpl.create(gr,ComponentPackage.eINSTANCE.getGrid_LineAttributes());
  lia.setColor(ColorDefinitionImpl.create(225,225,225));
  gr.setLineAttributes(lia);
  lia=LineAttributesImpl.create(gr,ComponentPackage.eINSTANCE.getGrid_LineAttributes());
  lia.setColor(ColorDefinitionImpl.create(225,225,225));
  gr.setTickAttributes(lia);
  setMinorGrid(gr);
  Scale sc=ComponentFactory.eINSTANCE.createScale();
  setScale(sc);
  if (iAxisType == Axis.BASE) {
    setOrientation(Orientation.HORIZONTAL_LITERAL);
    setLabelPosition(Position.ABOVE_LITERAL);
  }
 else   if (iAxisType == Axis.ORTHOGONAL) {
    setOrientation(Orientation.VERTICAL_LITERAL);
    setLabelPosition(Position.RIGHT_LITERAL);
  }
  setOrigin(AxisOriginImpl.create(IntersectionType.MAX_LITERAL,null));
}","/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
protected final void initialize(int iAxisType){
  setLabel(LabelImpl.create());
  LineAttributes lia=LineAttributesImpl.create(null,LineStyle.SOLID_LITERAL,1);
  setLineAttributes(lia);
  AxisOrigin ao=AttributeFactory.eINSTANCE.createAxisOrigin();
  ao.setType(IntersectionType.MIN_LITERAL);
  ao.setValue(null);
  setOrigin(ao);
  setPrimaryAxis(false);
  Label la=LabelImpl.create();
  la.getCaption().setValue(""String_Node_Str"");
  la.getCaption().getFont().setSize(14);
  la.getCaption().getFont().setBold(true);
  TextAlignment ta=TextAlignmentImpl.create();
  ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
  ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
  la.getCaption().getFont().setAlignment(ta);
  la.setVisible(false);
  setTitle(la);
  Grid gr=ComponentFactory.eINSTANCE.createGrid();
  lia=LineAttributesImpl.create(ColorDefinitionImpl.create(196,196,196),LineStyle.SOLID_LITERAL,1);
  lia.setVisible(false);
  gr.setLineAttributes(lia);
  lia=LineAttributesImpl.create(ColorDefinitionImpl.create(196,196,196),LineStyle.SOLID_LITERAL,1);
  gr.setTickAttributes(lia);
  gr.setTickStyle(TickStyle.ACROSS_LITERAL);
  setMajorGrid(gr);
  gr=ComponentFactory.eINSTANCE.createGrid();
  lia=LineAttributesImpl.create(ColorDefinitionImpl.create(225,225,225),LineStyle.SOLID_LITERAL,1);
  lia.setVisible(false);
  gr.setLineAttributes(lia);
  lia=LineAttributesImpl.create(ColorDefinitionImpl.create(225,225,225),LineStyle.SOLID_LITERAL,1);
  lia.setVisible(false);
  gr.setTickAttributes(lia);
  gr.setTickStyle(TickStyle.ACROSS_LITERAL);
  setMinorGrid(gr);
  Scale sc=ComponentFactory.eINSTANCE.createScale();
  sc.setMinorGridsPerUnit(5);
  setScale(sc);
  setPercent(false);
  if (iAxisType == Axis.BASE) {
    setOrientation(Orientation.HORIZONTAL_LITERAL);
    setLabelPosition(Position.ABOVE_LITERAL);
  }
 else   if (iAxisType == Axis.ORTHOGONAL) {
    setOrientation(Orientation.VERTICAL_LITERAL);
    setLabelPosition(Position.RIGHT_LITERAL);
  }
  setOrigin(AxisOriginImpl.create(IntersectionType.MAX_LITERAL,null));
}",0.5265599628856413
69951,"/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
public final void initialize(){
  setCaption(TextImpl.create((String)null));
  setBackground(ColorDefinitionImpl.create(this,ComponentPackage.eINSTANCE.getLabel_Background()));
  final Insets ins=InsetsImpl.create(this,ComponentPackage.eINSTANCE.getLabel_Insets());
  setInsets(ins);
  final LineAttributes lia=LineAttributesImpl.create(this,ComponentPackage.eINSTANCE.getLabel_Outline());
  lia.setColor(ColorDefinitionImpl.create(lia,AttributePackage.eINSTANCE.getLineAttributes_Color()));
  setOutline(lia);
}","/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
protected final void initialize(){
  setCaption(TextImpl.create((String)null));
  setBackground(ColorDefinitionImpl.TRANSPARENT());
  final Insets ins=AttributeFactory.eINSTANCE.createInsets();
  ((InsetsImpl)ins).set(0,2,0,3);
  setInsets(ins);
  final LineAttributes lia=AttributeFactory.eINSTANCE.createLineAttributes();
  ((LineAttributesImpl)lia).set(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,1);
  setOutline(lia);
  setVisible(true);
}",0.4357638888888889
69952,"protected void initialize(){
  LabelImpl la=(LabelImpl)LabelImpl.create(this,ComponentPackage.eINSTANCE.getSeries_Label());
  la.initialize();
  setLabel(la);
  setSeriesIdentifier(IConstants.UNDEFINED_STRING);
  setDataPoint(DataPointImpl.create(null,null,""String_Node_Str""));
}","protected void initialize(){
  setStacked(false);
  setVisible(true);
  final Label la=LabelImpl.create();
  LineAttributes lia=LineAttributesImpl.create(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,1);
  la.setOutline(lia);
  lia.setVisible(false);
  setLabel(la);
  la.setVisible(false);
  setLabelPosition(Position.OUTSIDE_LITERAL);
  setSeriesIdentifier(IConstants.UNDEFINED_STRING);
  setDataPoint(DataPointImpl.create(null,null,""String_Node_Str""));
}",0.4797843665768194
69953,"/** 
 * Note: Manually written
 */
protected void initialize(){
  setVersion(VERSION);
  block=BlockImpl.create();
  block.setBackground(ColorDefinitionImpl.WHITE());
  TitleBlock tb=(TitleBlock)TitleBlockImpl.create();
  Plot pl=(Plot)PlotImpl.create();
  Legend lg=(Legend)LegendImpl.create();
  block.add(tb);
  block.add(pl);
  block.add(lg);
  Text txtChartTitle=tb.getLabel().getCaption();
  txtChartTitle.setValue(""String_Node_Str"");
  txtChartTitle.getFont().setSize(16);
  txtChartTitle.getFont().setBold(true);
  TextAlignment taTitle=TextAlignmentImpl.create();
  taTitle.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
  taTitle.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
  txtChartTitle.getFont().setAlignment(taTitle);
  setSeriesThickness(10);
  setInteractivity(InteractivityImpl.create());
  setEmptyMessage(newEmptyMessage());
}","/** 
 * Note: Manually written
 */
protected void initialize(){
  setVersion(VERSION);
  block=BlockImpl.create();
  block.setBackground(ColorDefinitionImpl.WHITE());
  TitleBlock tb=(TitleBlock)TitleBlockImpl.create();
  Plot pl=(Plot)PlotImpl.create();
  Legend lg=(Legend)LegendImpl.create();
  block.add(tb);
  block.add(pl);
  block.add(lg);
  Text txtChartTitle=tb.getLabel().getCaption();
  txtChartTitle.setValue(""String_Node_Str"");
  txtChartTitle.getFont().setSize(16);
  txtChartTitle.getFont().setBold(true);
  TextAlignment taTitle=TextAlignmentImpl.create();
  taTitle.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
  taTitle.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
  txtChartTitle.getFont().setAlignment(taTitle);
  setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  setSeriesThickness(10);
  setInteractivity(InteractivityImpl.create());
  setEmptyMessage(newEmptyMessage());
}",0.9688542825361512
69954,"/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
protected void initialize(){
  final LineAttributes lia=LineAttributesImpl.create(this,LayoutPackage.eINSTANCE.getBlock_Outline());
  lia.setColor(ColorDefinitionImpl.create(lia,AttributePackage.eINSTANCE.getLineAttributes_Color()));
  setOutline(lia);
  final Bounds bo=BoundsImpl.create(this,LayoutPackage.eINSTANCE.getBlock_Bounds());
  setBounds(bo);
  final Insets i=InsetsImpl.create(this,LayoutPackage.eINSTANCE.getBlock_Insets());
  setInsets(i);
}","/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
protected void initialize(){
  final LineAttributes lia=LineAttributesImpl.create(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,1);
  lia.setVisible(false);
  setOutline(lia);
  final Bounds bo=AttributeFactory.eINSTANCE.createBounds();
  ((BoundsImpl)bo).set(0,0,0,0);
  setBounds(bo);
  final Insets i=AttributeFactory.eINSTANCE.createInsets();
  ((InsetsImpl)i).set(3,3,3,3);
  setInsets(i);
  setRow(-1);
  setColumn(-1);
  setRowspan(-1);
  setColumnspan(-1);
  setVisible(true);
}",0.3714788732394366
69955,"/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
public final void initialize(){
  final LineAttributes lia=LineAttributesImpl.create(this,LayoutPackage.eINSTANCE.getClientArea_Outline());
  lia.setColor(ColorDefinitionImpl.create(lia,AttributePackage.eINSTANCE.getLineAttributes_Color()));
  setOutline(lia);
  setInsets(InsetsImpl.create(this,LayoutPackage.eINSTANCE.getClientArea_Insets()));
}","/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
public final void initialize(){
  final LineAttributes lia=LineAttributesImpl.create(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,0);
  lia.setVisible(false);
  setOutline(lia);
  setInsets(InsetsImpl.create(0,0,0,0));
}",0.5590551181102362
69956,"/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
protected final void initialize(){
  super.initialize();
  Label la=LabelImpl.create();
  LineAttributes lia=LineAttributesImpl.create(this,ComponentPackage.eINSTANCE.getLabel_Outline());
  lia.setColor(ColorDefinitionImpl.create(lia,AttributePackage.eINSTANCE.getLineAttributes_Color()));
  la.setOutline(lia);
  la.setVisible(false);
  setTitle(la);
  LineAttributes separator=LineAttributesImpl.create(this,LayoutPackage.eINSTANCE.getLegend_Separator());
  separator.setColor(ColorDefinitionImpl.create(separator,AttributePackage.eINSTANCE.getLineAttributes_Color()));
  setSeparator(separator);
  final ClientArea ca=LayoutFactory.eINSTANCE.createClientArea();
  ((ClientAreaImpl)ca).initialize();
  ca.getInsets().set(2,2,2,2);
  setClientArea(ca);
  setText(TextImpl.create((String)null));
}","/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
protected final void initialize(){
  super.initialize();
  setPosition(Position.RIGHT_LITERAL);
  setOrientation(Orientation.VERTICAL_LITERAL);
  setDirection(Direction.TOP_BOTTOM_LITERAL);
  setItemType(LegendItemType.SERIES_LITERAL);
  Label la=LabelImpl.create();
  LineAttributes lia=LineAttributesImpl.create(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,1);
  lia.setVisible(false);
  la.setOutline(lia);
  la.setVisible(false);
  setTitle(la);
  setTitlePosition(Position.ABOVE_LITERAL);
  LineAttributes separator=LineAttributesImpl.create(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,1);
  separator.setVisible(true);
  setSeparator(separator);
  final ClientArea ca=LayoutFactory.eINSTANCE.createClientArea();
  ((ClientAreaImpl)ca).initialize();
  ca.getInsets().set(2,2,2,2);
  setClientArea(ca);
  setText(TextImpl.create((String)null));
}",0.5135135135135135
69957,"/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
protected final void initialize(){
  super.initialize();
  final ClientArea ca=LayoutFactory.eINSTANCE.createClientArea();
  ((ClientAreaImpl)ca).initialize();
  setClientArea(ca);
}","/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
protected final void initialize(){
  super.initialize();
  final ClientArea ca=LayoutFactory.eINSTANCE.createClientArea();
  ((ClientAreaImpl)ca).initialize();
  setClientArea(ca);
  setHorizontalSpacing(5);
  setVerticalSpacing(5);
}",0.913907284768212
69958,"/** 
 * Destroy action
 * @param rollback true: rollback to savedItemModel false: do nothing
 */
public void destory(boolean rollback){
  if (rollback) {
    if (ds instanceof OdaDataSetHandle) {
      try {
        ((OdaDataSetHandle)ds).setQueryText(this.savedQueryText);
        DataSetProvider.getCurrentInstance().getDataSetDesign(ds,true,true);
      }
 catch (      SemanticException e) {
      }
catch (      BirtException e) {
      }
    }
    DataSetProvider.getCurrentInstance().setModelOfDataSetHandle(this.ds,savedItemModel);
  }
  ds.removeListener(this);
}","/** 
 * Destroy action
 * @param rollback true: rollback to savedItemModel false: do nothing
 */
public void destory(boolean rollback){
  if (rollback) {
    if (ds instanceof OdaDataSetHandle) {
      try {
        ((OdaDataSetHandle)ds).setQueryText(this.savedQueryText);
        DataSetProvider.getCurrentInstance().getDataSetDesign(ds,true,true);
      }
 catch (      SemanticException e) {
      }
catch (      BirtException e) {
      }
    }
    DataSetProvider.getCurrentInstance().setModelOfDataSetHandle(this.ds,savedItemModel);
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
  ds.removeListener(this);
}",0.9454545454545454
69959,"/** 
 * @param dataSet
 */
private void setContextLoader(DataSetHandle dataSet){
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,dataSet.getModuleHandle());
  Thread.currentThread().setContextClassLoader(newContextLoader);
}","/** 
 * @param dataSet
 */
private void setContextLoader(DataSetHandle dataSet){
  oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,dataSet.getModuleHandle());
  Thread.currentThread().setContextClassLoader(newContextLoader);
}",0.9868995633187772
69960,"public SeriesOptionChoser(SeriesDefinition seriesDefn,String seriesName,int iSeriesDefinitionIndex,int treeIndex,boolean canStack,int axisIndex){
  this.seriesDefn=seriesDefn;
  this.seriesName=seriesName;
  this.iSeriesDefinitionIndex=iSeriesDefinitionIndex;
  this.treeIndex=treeIndex;
  this.canStack=canStack;
  this.axisIndex=axisIndex;
}","public SeriesOptionChoser(SeriesDefinition seriesDefn,String seriesName,int iSeriesDefinitionIndex,int treeIndex,boolean canStack,int axisIndex){
  this.seriesDefn=seriesDefn;
  this.seriesName=seriesName;
  this.iSeriesDefinitionIndex=iSeriesDefinitionIndex;
  this.treeIndex=treeIndex;
  this.canStack=canStack;
  this.axisIndex=axisIndex;
  this.bStackedPercent=isStackedPercent(seriesDefn);
}",0.9282814614343708
69961,"/** 
 * Set state of stacked CheckBox by type of series.
 */
private void setStackedBoxState(){
  if (btnStack == null) {
    return;
  }
  ChartDimension cd=getChart().getDimension();
  if ((cd == ChartDimension.TWO_DIMENSIONAL_LITERAL || cd == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL)) {
    List<SeriesDefinition> seriesDefns=ChartUIUtil.getOrthogonalSeriesDefinitions(getChart(),axisIndex);
    Series s=seriesDefns.get(0).getDesignTimeSeries();
    if (s.getDisplayName().equals(seriesDefn.getDesignTimeSeries().getDisplayName())) {
      if (canStack && seriesDefn.getDesignTimeSeries().canBeStacked()) {
        btnStack.setEnabled(true);
      }
    }
 else {
      btnStack.setEnabled(false);
      cmbTypes.setEnabled(true);
    }
  }
}","/** 
 * Set state of stacked CheckBox by type of series.
 */
private void setStackedBoxState(){
  if (btnStack == null) {
    return;
  }
  ChartDimension cd=getChart().getDimension();
  if ((cd == ChartDimension.TWO_DIMENSIONAL_LITERAL || cd == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL)) {
    List<SeriesDefinition> seriesDefns=ChartUIUtil.getOrthogonalSeriesDefinitions(getChart(),axisIndex);
    Series s=seriesDefns.get(0).getDesignTimeSeries();
    if (s.getDisplayName().equals(seriesDefn.getDesignTimeSeries().getDisplayName())) {
      if (canStack && seriesDefn.getDesignTimeSeries().canBeStacked() && !bStackedPercent) {
        btnStack.setEnabled(true);
      }
    }
 else {
      btnStack.setEnabled(false);
      cmbTypes.setEnabled(true);
    }
  }
}",0.9869451697127938
69962,"public void placeComponents(Composite parent){
  Series series=seriesDefn.getDesignTimeSeries();
  linkSeries=new Link(parent,SWT.NONE);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    linkSeries.setLayoutData(gd);
    linkSeries.setText(""String_Node_Str"" + seriesName + ""String_Node_Str"");
    linkSeries.addSelectionListener(this);
  }
  List<String> keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(parent,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),series.getSeriesIdentifier().toString());
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  cmbTypes=new Combo(parent,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmbTypes.setLayoutData(gd);
    cmbTypes.addSelectionListener(this);
    if (iSeriesDefinitionIndex == 0) {
      cmbTypes.setEnabled(false);
    }
  }
  if (!series.getClass().isAssignableFrom(SeriesImpl.class)) {
    spnZOrder=new Spinner(parent,SWT.BORDER);
{
      GridData gd=new GridData();
      gd.horizontalAlignment=SWT.CENTER;
      spnZOrder.setLayoutData(gd);
      spnZOrder.setMinimum(0);
      spnZOrder.setMaximum(10);
      if (getChart() instanceof ChartWithAxes && !(getContext().getChartType() instanceof BubbleChart)) {
        spnZOrder.setSelection(seriesDefn.getZOrder());
        spnZOrder.addSelectionListener(this);
      }
 else {
        spnZOrder.setEnabled(false);
      }
    }
    btnVisible=new Button(parent,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalAlignment=SWT.CENTER;
      btnVisible.setLayoutData(gd);
      btnVisible.setSelection(series.isVisible());
      btnVisible.addSelectionListener(this);
    }
    btnStack=new Button(parent,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalAlignment=SWT.CENTER;
      btnStack.setLayoutData(gd);
      btnStack.setEnabled(canStack && series.canBeStacked() && getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL);
      if (series.isStacked() && !canStack) {
        btnStack.setSelection(false);
        series.setStacked(false);
      }
 else {
        btnStack.setSelection(series.isStacked());
      }
      btnStack.addSelectionListener(this);
    }
    btnTranslucent=new Button(parent,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalAlignment=SWT.CENTER;
      btnTranslucent.setLayoutData(gd);
      btnTranslucent.setSelection(series.isTranslucent());
      btnTranslucent.addSelectionListener(this);
    }
    setTypeComboState();
    setStackedBoxState();
  }
 else {
    Label dummy=new Label(parent,SWT.CHECK);
    GridData gd=new GridData();
    gd.horizontalSpan=4;
    dummy.setLayoutData(gd);
  }
  populateLists(seriesDefn.getDesignTimeSeries());
}","public void placeComponents(Composite parent){
  Series series=seriesDefn.getDesignTimeSeries();
  linkSeries=new Link(parent,SWT.NONE);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    linkSeries.setLayoutData(gd);
    linkSeries.setText(""String_Node_Str"" + seriesName + ""String_Node_Str"");
    linkSeries.addSelectionListener(this);
  }
  List<String> keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(parent,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),series.getSeriesIdentifier().toString());
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  cmbTypes=new Combo(parent,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmbTypes.setLayoutData(gd);
    cmbTypes.addSelectionListener(this);
    if (iSeriesDefinitionIndex == 0) {
      cmbTypes.setEnabled(false);
    }
  }
  if (!series.getClass().isAssignableFrom(SeriesImpl.class)) {
    spnZOrder=new Spinner(parent,SWT.BORDER);
{
      GridData gd=new GridData();
      gd.horizontalAlignment=SWT.CENTER;
      spnZOrder.setLayoutData(gd);
      spnZOrder.setMinimum(0);
      spnZOrder.setMaximum(10);
      if (getChart() instanceof ChartWithAxes && !(getContext().getChartType() instanceof BubbleChart)) {
        spnZOrder.setSelection(seriesDefn.getZOrder());
        spnZOrder.addSelectionListener(this);
      }
 else {
        spnZOrder.setEnabled(false);
      }
    }
    btnVisible=new Button(parent,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalAlignment=SWT.CENTER;
      btnVisible.setLayoutData(gd);
      btnVisible.setSelection(series.isVisible());
      btnVisible.addSelectionListener(this);
    }
    btnStack=new Button(parent,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalAlignment=SWT.CENTER;
      btnStack.setLayoutData(gd);
      btnStack.setEnabled(canStack && series.canBeStacked() && getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL && !bStackedPercent);
      if (series.isStacked() && !canStack) {
        btnStack.setSelection(false);
        series.setStacked(false);
      }
 else {
        btnStack.setSelection(series.isStacked());
      }
      btnStack.addSelectionListener(this);
    }
    btnTranslucent=new Button(parent,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalAlignment=SWT.CENTER;
      btnTranslucent.setLayoutData(gd);
      btnTranslucent.setSelection(series.isTranslucent());
      btnTranslucent.addSelectionListener(this);
    }
    setTypeComboState();
    setStackedBoxState();
  }
 else {
    Label dummy=new Label(parent,SWT.CHECK);
    GridData gd=new GridData();
    gd.horizontalSpan=4;
    dummy.setLayoutData(gd);
  }
  populateLists(seriesDefn.getDesignTimeSeries());
}",0.9966216216216216
69963,"public void mouseDown(MouseEvent e){
  if (e.button == 3) {
    TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
    if (item == null) {
      tableViewerColumns.getTable().select(-1);
    }
    boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
    if (item != null && !isSharingChart) {
      if (table.getMenu() != null) {
        table.getMenu().dispose();
      }
      table.setMenu(createMenuManager(item.getData()).createContextMenu(table));
    }
 else {
      table.setMenu(null);
    }
    if (table.getMenu() != null && !isSharingChart) {
      table.getMenu().setVisible(true);
    }
  }
}","public void mouseDown(MouseEvent e){
  if (e.button == 3) {
    if (isCubeMode()) {
      table.setMenu(null);
    }
 else {
      TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
      if (item == null) {
        tableViewerColumns.getTable().select(-1);
      }
      boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
      if (item != null && !isSharingChart) {
        if (table.getMenu() != null) {
          table.getMenu().dispose();
        }
        table.setMenu(createMenuManager(item.getData()).createContextMenu(table));
      }
 else {
        table.setMenu(null);
      }
      if (table.getMenu() != null && !isSharingChart) {
        table.getMenu().setVisible(true);
      }
    }
  }
}",0.8941009239516702
69964,"private void createColumnsViewerArea(Composite parent){
  cmpColumnsList=ChartUIUtil.createCompositeWrapper(parent);
  Label label=new Label(cmpColumnsList,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    Label description=new Label(cmpColumnsList,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      description.setLayoutData(gd);
      description.setText(Messages.getString(""String_Node_Str""));
    }
  }
  btnShowDataPreviewB=new Button(cmpColumnsList,SWT.CHECK);
  btnShowDataPreviewB.setText(Messages.getString(""String_Node_Str""));
  btnShowDataPreviewB.addListener(SWT.Selection,this);
  final Table table=new Table(cmpColumnsList,SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION);
  GridData gd=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  tableViewerColumns=new TableViewer(table);
  tableViewerColumns.setUseHashlookup(true);
  new TableColumn(table,SWT.CENTER);
  table.addMouseMoveListener(new MouseMoveListener(){
    public void mouseMove(    MouseEvent e){
      if (!dataProvider.isLivePreviewEnabled()) {
        table.setToolTipText(null);
        return;
      }
      String tooltip=null;
      TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
      if (item != null) {
        List<Object[]> data=(List<Object[]>)tableViewerColumns.getData(KEY_PREVIEW_DATA);
        if (data != null) {
          StringBuilder sb=new StringBuilder();
          int index=((Table)e.widget).indexOf(item);
          int i=0;
          for (; i < data.size(); i++) {
            if (sb.length() > 45) {
              break;
            }
            if (data.get(i)[index] != null) {
              if (i != 0)               sb.append(""String_Node_Str"");
              sb.append(String.valueOf(data.get(i)[index]));
            }
          }
          if (i == 1 && sb.length() > 45) {
            sb=new StringBuilder(sb.substring(0,45));
            sb.append(""String_Node_Str"");
          }
 else           if (i < data.size()) {
            sb.append(""String_Node_Str"");
          }
          tooltip=sb.toString();
        }
      }
      table.setToolTipText(tooltip);
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if (e.button == 3) {
        TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
        if (item == null) {
          tableViewerColumns.getTable().select(-1);
        }
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (item != null && !isSharingChart) {
          if (table.getMenu() != null) {
            table.getMenu().dispose();
          }
          table.setMenu(createMenuManager(item.getData()).createContextMenu(table));
        }
 else {
          table.setMenu(null);
        }
        if (table.getMenu() != null && !isSharingChart) {
          table.getMenu().setVisible(true);
        }
      }
    }
  }
);
  table.addListener(SWT.Resize,new Listener(){
    public void handleEvent(    Event event){
      Table table=(Table)event.widget;
      int totalWidth=table.getClientArea().width;
      table.getColumn(0).setWidth(totalWidth);
    }
  }
);
  DragSource ds=new DragSource(table,DND.DROP_COPY | DND.DROP_MOVE);
  ds.setTransfer(new Transfer[]{SimpleTextTransfer.getInstance()});
  ColumnNamesTableDragListener dragSourceAdapter=new ColumnNamesTableDragListener(table);
  ds.addDragListener(dragSourceAdapter);
  tableViewerColumns.setContentProvider(new IStructuredContentProvider(){
    /** 
 * Gets the food items for the list
 * @param arg0 the data model
 * @return Object[]
 */
    public Object[] getElements(    Object arg0){
      if (arg0 == null)       return null;
      return (ColumnBindingInfo[])arg0;
    }
    /** 
 * Disposes any created resources
 */
    public void dispose(){
    }
    /** 
 * Called when the input changes
 * @param arg0 the viewer
 * @param arg1 the old input
 * @param arg2 the new input
 */
    public void inputChanged(    Viewer arg0,    Object arg1,    Object arg2){
    }
  }
);
  tableViewerColumns.setLabelProvider(new ILabelProvider(){
    /** 
 * images
 * @param arg0 the element
 * @return Image
 */
    public Image getImage(    Object arg0){
      String imageName=((ColumnBindingInfo)arg0).getImageName();
      if (imageName == null)       return null;
      return UIHelper.getImage(imageName);
    }
    /** 
 * Gets the text for an element
 * @param arg0 the element
 * @return String
 */
    public String getText(    Object arg0){
      return ((ColumnBindingInfo)arg0).getName();
    }
    /** 
 * Adds a listener
 * @param arg0 the listener
 */
    public void addListener(    ILabelProviderListener arg0){
    }
    /** 
 * Disposes any resources
 */
    public void dispose(){
    }
    /** 
 * Returns whether changing the specified property for the specified element affect the label
 * @param arg0 the element
 * @param arg1 the property
 * @return boolean
 */
    public boolean isLabelProperty(    Object arg0,    String arg1){
      return false;
    }
    /** 
 * Removes a listener
 * @param arg0 the listener
 */
    public void removeListener(    ILabelProviderListener arg0){
    }
  }
);
}","private void createColumnsViewerArea(Composite parent){
  cmpColumnsList=ChartUIUtil.createCompositeWrapper(parent);
  Label label=new Label(cmpColumnsList,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    columnListDescription=new Label(cmpColumnsList,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      columnListDescription.setLayoutData(gd);
      columnListDescription.setText(Messages.getString(""String_Node_Str""));
    }
  }
  btnShowDataPreviewB=new Button(cmpColumnsList,SWT.CHECK);
  btnShowDataPreviewB.setText(Messages.getString(""String_Node_Str""));
  btnShowDataPreviewB.addListener(SWT.Selection,this);
  final Table table=new Table(cmpColumnsList,SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION);
  GridData gd=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  tableViewerColumns=new TableViewer(table);
  tableViewerColumns.setUseHashlookup(true);
  new TableColumn(table,SWT.CENTER);
  table.addMouseMoveListener(new MouseMoveListener(){
    public void mouseMove(    MouseEvent e){
      if (!dataProvider.isLivePreviewEnabled()) {
        table.setToolTipText(null);
        return;
      }
      String tooltip=null;
      TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
      if (item != null) {
        List<Object[]> data=(List<Object[]>)tableViewerColumns.getData(KEY_PREVIEW_DATA);
        if (data != null) {
          StringBuilder sb=new StringBuilder();
          int index=((Table)e.widget).indexOf(item);
          int i=0;
          for (; i < data.size(); i++) {
            if (sb.length() > 45) {
              break;
            }
            if (data.get(i)[index] != null) {
              if (i != 0)               sb.append(""String_Node_Str"");
              sb.append(String.valueOf(data.get(i)[index]));
            }
          }
          if (i == 1 && sb.length() > 45) {
            sb=new StringBuilder(sb.substring(0,45));
            sb.append(""String_Node_Str"");
          }
 else           if (i < data.size()) {
            sb.append(""String_Node_Str"");
          }
          tooltip=sb.toString();
        }
      }
      table.setToolTipText(tooltip);
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if (e.button == 3) {
        if (isCubeMode()) {
          table.setMenu(null);
        }
 else {
          TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
          if (item == null) {
            tableViewerColumns.getTable().select(-1);
          }
          boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
          if (item != null && !isSharingChart) {
            if (table.getMenu() != null) {
              table.getMenu().dispose();
            }
            table.setMenu(createMenuManager(item.getData()).createContextMenu(table));
          }
 else {
            table.setMenu(null);
          }
          if (table.getMenu() != null && !isSharingChart) {
            table.getMenu().setVisible(true);
          }
        }
      }
    }
  }
);
  table.addListener(SWT.Resize,new Listener(){
    public void handleEvent(    Event event){
      Table table=(Table)event.widget;
      int totalWidth=table.getClientArea().width;
      table.getColumn(0).setWidth(totalWidth);
    }
  }
);
  DragSource ds=new DragSource(table,DND.DROP_COPY | DND.DROP_MOVE);
  ds.setTransfer(new Transfer[]{SimpleTextTransfer.getInstance()});
  ColumnNamesTableDragListener dragSourceAdapter=new ColumnNamesTableDragListener(table,itemHandle);
  ds.addDragListener(dragSourceAdapter);
  tableViewerColumns.setContentProvider(new IStructuredContentProvider(){
    /** 
 * Gets the food items for the list
 * @param arg0 the data model
 * @return Object[]
 */
    public Object[] getElements(    Object arg0){
      if (arg0 == null)       return null;
      return (ColumnBindingInfo[])arg0;
    }
    /** 
 * Disposes any created resources
 */
    public void dispose(){
    }
    /** 
 * Called when the input changes
 * @param arg0 the viewer
 * @param arg1 the old input
 * @param arg2 the new input
 */
    public void inputChanged(    Viewer arg0,    Object arg1,    Object arg2){
    }
  }
);
  tableViewerColumns.setLabelProvider(new ILabelProvider(){
    /** 
 * images
 * @param arg0 the element
 * @return Image
 */
    public Image getImage(    Object arg0){
      String imageName=((ColumnBindingInfo)arg0).getImageName();
      if (imageName == null)       return null;
      return UIHelper.getImage(imageName);
    }
    /** 
 * Gets the text for an element
 * @param arg0 the element
 * @return String
 */
    public String getText(    Object arg0){
      return ((ColumnBindingInfo)arg0).getName();
    }
    /** 
 * Adds a listener
 * @param arg0 the listener
 */
    public void addListener(    ILabelProviderListener arg0){
    }
    /** 
 * Disposes any resources
 */
    public void dispose(){
    }
    /** 
 * Returns whether changing the specified property for the specified element affect the label
 * @param arg0 the element
 * @param arg1 the property
 * @return boolean
 */
    public boolean isLabelProperty(    Object arg0,    String arg1){
      return false;
    }
    /** 
 * Removes a listener
 * @param arg0 the listener
 */
    public void removeListener(    ILabelProviderListener arg0){
    }
  }
);
}",0.9819639278557114
69965,"private void updateDragDataSource(){
  if (isCubeMode()) {
    stackLayout.topControl=cmpCubeTree;
    cubeTreeViewer.setInput(getCube());
    cmpStack.layout();
    return;
  }
  String pValue=(previousData == null) ? ""String_Node_Str"" : previousData;
  String cValue=(currentData == null) ? ""String_Node_Str"" : currentData;
  if (!pValue.equals(cValue)) {
    getContext().setShowingDataPreview(null);
  }
  previousData=currentData;
  try {
    if (!getContext().isSetShowingDataPreview() && getDataServiceProvider().getPreviewHeadersInfo().length >= 6) {
      getContext().setShowingDataPreview(Boolean.FALSE);
    }
    ChartWizard.removeException(ChartWizard.StaChartDSh_gHeaders_ID);
  }
 catch (  NullPointerException e) {
  }
catch (  ChartException e) {
    ChartWizard.showException(ChartWizard.StaChartDSh_gHeaders_ID,e.getMessage());
  }
  btnShowDataPreviewA.setSelection(getContext().isShowingDataPreview());
  btnShowDataPreviewB.setSelection(getContext().isShowingDataPreview());
  if (getContext().isShowingDataPreview()) {
    stackLayout.topControl=cmpDataPreview;
  }
 else {
    stackLayout.topControl=cmpColumnsList;
  }
  refreshDataPreviewPane();
  cmpStack.layout();
}","private void updateDragDataSource(){
  if (isCubeMode()) {
    if (getDataServiceProvider().getReportItemReference() != null) {
      if (!getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
        ((GridData)columnListDescription.getLayoutData()).exclude=false;
        columnListDescription.setVisible(true);
        columnListDescription.setText(Messages.getString(""String_Node_Str""));
      }
 else {
        ((GridData)columnListDescription.getLayoutData()).exclude=true;
        columnListDescription.setVisible(false);
      }
      cmpColumnsList.layout();
      getContext().setShowingDataPreview(Boolean.FALSE);
      btnShowDataPreviewB.setSelection(false);
      btnShowDataPreviewB.setEnabled(false);
      stackLayout.topControl=cmpColumnsList;
      refreshDataPreviewPane();
    }
 else {
      stackLayout.topControl=cmpCubeTree;
      cubeTreeViewer.setInput(getCube());
    }
    cmpStack.layout();
    return;
  }
  ((GridData)columnListDescription.getLayoutData()).exclude=false;
  columnListDescription.setVisible(true);
  columnListDescription.setText(Messages.getString(""String_Node_Str""));
  btnShowDataPreviewB.setEnabled(true);
  cmpColumnsList.layout();
  String pValue=(previousData == null) ? ""String_Node_Str"" : previousData;
  String cValue=(currentData == null) ? ""String_Node_Str"" : currentData;
  if (!pValue.equals(cValue)) {
    getContext().setShowingDataPreview(null);
  }
  previousData=currentData;
  try {
    if (!getContext().isSetShowingDataPreview() && getDataServiceProvider().getPreviewHeadersInfo().length >= 6) {
      getContext().setShowingDataPreview(Boolean.FALSE);
    }
    ChartWizard.removeException(ChartWizard.StaChartDSh_gHeaders_ID);
  }
 catch (  NullPointerException e) {
  }
catch (  ChartException e) {
    ChartWizard.showException(ChartWizard.StaChartDSh_gHeaders_ID,e.getMessage());
  }
  btnShowDataPreviewA.setSelection(getContext().isShowingDataPreview());
  btnShowDataPreviewB.setSelection(getContext().isShowingDataPreview());
  if (getContext().isShowingDataPreview()) {
    stackLayout.topControl=cmpDataPreview;
  }
 else {
    stackLayout.topControl=cmpColumnsList;
  }
  refreshDataPreviewPane();
  cmpStack.layout();
}",0.4313267095265926
69966,"/** 
 */
private void refreshColumnsListView(){
  if (dataProvider.getDataSetFromHandle() == null) {
    return;
  }
  if (isCubeMode()) {
    return;
  }
  Runnable runnable=new Runnable(){
    public void run(){
      ColumnBindingInfo[] headers=null;
      List<?> dataList=null;
      try {
        headers=getDataServiceProvider().getPreviewHeadersInfo();
        if (dataProvider.isLivePreviewEnabled()) {
          dataList=getPreviewData();
        }
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateColumnsTableViewer(headerInfo,data);
            ChartWizard.removeException(ChartWizard.StaChartDSh_dPreview_ID);
          }
        }
);
      }
 catch (      Exception e) {
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        final String message=e.getLocalizedMessage();
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateColumnsTableViewer(headerInfo,data);
            ChartWizard.showException(ChartWizard.StaChartDSh_dPreview_ID,message);
          }
        }
);
      }
    }
  }
;
  new Thread(runnable).start();
}","/** 
 */
private void refreshColumnsListView(){
  Runnable runnable=new Runnable(){
    public void run(){
      ColumnBindingInfo[] headers=null;
      List<?> dataList=null;
      try {
        headers=getDataServiceProvider().getPreviewHeadersInfo();
        if (dataProvider.isLivePreviewEnabled()) {
          dataList=getPreviewData();
        }
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateColumnsTableViewer(headerInfo,data);
            ChartWizard.removeException(ChartWizard.StaChartDSh_dPreview_ID);
          }
        }
);
      }
 catch (      Exception e) {
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        final String message=e.getLocalizedMessage();
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateColumnsTableViewer(headerInfo,data);
            ChartWizard.showException(ChartWizard.StaChartDSh_dPreview_ID,message);
          }
        }
);
      }
    }
  }
;
  new Thread(runnable).start();
}",0.956129561295613
69967,"public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  List entries=series.getDataDefinition();
  if (entries.size() >= 2) {
    Query query=(Query)entries.get(1);
    DataType dataType=idsp.getDataType(query.getDefinition());
    if (dataType == DataType.TEXT_LITERAL || dataType == DataType.DATE_TIME_LITERAL) {
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,query.getDefinition());
    }
  }
}","public void validateSeriesBindingType(Series series,IDataServiceProvider idsp) throws ChartException {
  List<Query> entries=series.getDataDefinition();
  if (entries.size() >= 2) {
    Query query=entries.get(1);
    DataType dataType=idsp.getDataType(query.getDefinition());
    if (dataType == DataType.TEXT_LITERAL || dataType == DataType.DATE_TIME_LITERAL) {
      throw new ChartException(ChartUIExtensionPlugin.ID,ChartException.DATA_BINDING,query.getDefinition());
    }
  }
}",0.9855371900826446
69968,"private void checkDataType(Query query,Series series){
  String expression=query.getDefinition();
  Axis axis=null;
  for (EObject o=query; o != null; ) {
    o=o.eContainer();
    if (o instanceof Axis) {
      axis=(Axis)o;
      break;
    }
  }
  Collection<ISeriesUIProvider> cRegisteredEntries=ChartUIExtensionsImpl.instance().getSeriesUIComponents(getContext().getClass().getSimpleName());
  Iterator<ISeriesUIProvider> iterEntries=cRegisteredEntries.iterator();
  String sSeries=null;
  while (iterEntries.hasNext()) {
    ISeriesUIProvider provider=iterEntries.next();
    sSeries=provider.getSeriesClass();
    if (sSeries.equals(series.getClass().getName())) {
      if (getChartModel() instanceof ChartWithAxes) {
        DataType dataType=getDataServiceProvider().getDataType(expression);
        SeriesDefinition baseSD=(ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0));
        SeriesDefinition orthSD=null;
        orthSD=(SeriesDefinition)series.eContainer();
        String aggFunc=null;
        try {
          aggFunc=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,query);
          ChartWizard.removeException(ChartWizard.PluginSet_getAggF_ID);
        }
 catch (        ChartException e) {
          ChartWizard.showException(ChartWizard.PluginSet_getAggF_ID,e.getLocalizedMessage());
        }
        if (baseSD != orthSD && baseSD.eContainer() != axis && ChartUtil.isMagicAggregate(aggFunc)) {
          dataType=DataType.NUMERIC_LITERAL;
        }
        AxisType[] axisTypes=provider.getCompatibleAxisType(series);
        int[] validationIndex=provider.validationIndex(series);
        boolean needValidate=false;
        for (int i=0; i < validationIndex.length; i++) {
          if (query == series.getDataDefinition().get(i)) {
            needValidate=true;
            break;
          }
        }
        SeriesDefinition sd=(SeriesDefinition)series.eContainer();
        if (((Axis)sd.eContainer()).getSeriesDefinitions().indexOf(sd) > 0) {
          needValidate=false;
        }
        if (needValidate) {
          if (dataType == null) {
            dataType=ChartUIUtil.convertAxisTypeToDataType(axis.getType());
          }
          for (int i=0; i < axisTypes.length; i++) {
            if (isValidatedAxis(dataType,axisTypes[i])) {
              axisNotification(axis,axisTypes[i]);
              axis.setType(axisTypes[i]);
              break;
            }
          }
        }
      }
      try {
        provider.validateSeriesBindingType(series,getDataServiceProvider());
        ChartWizard.removeException(ChartWizard.CheckSeriesBindingType_ID + series.eContainer().hashCode());
      }
 catch (      ChartException ce) {
        ChartWizard.showException(ChartWizard.CheckSeriesBindingType_ID + series.eContainer().hashCode(),Messages.getFormattedString(""String_Node_Str"",new String[]{ce.getLocalizedMessage(),series.getDisplayName()}));
      }
      break;
    }
  }
}","private void checkDataType(Query query,Series series){
  String expression=query.getDefinition();
  Axis axis=null;
  for (EObject o=query; o != null; ) {
    o=o.eContainer();
    if (o instanceof Axis) {
      axis=(Axis)o;
      break;
    }
  }
  Collection<ISeriesUIProvider> cRegisteredEntries=ChartUIExtensionsImpl.instance().getSeriesUIComponents(getContext().getClass().getSimpleName());
  Iterator<ISeriesUIProvider> iterEntries=cRegisteredEntries.iterator();
  String sSeries=null;
  while (iterEntries.hasNext()) {
    ISeriesUIProvider provider=iterEntries.next();
    sSeries=provider.getSeriesClass();
    if (sSeries.equals(series.getClass().getName())) {
      boolean isMagicAgg=false;
      if (getChartModel() instanceof ChartWithAxes) {
        DataType dataType=getDataServiceProvider().getDataType(expression);
        SeriesDefinition baseSD=(ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0));
        SeriesDefinition orthSD=null;
        orthSD=(SeriesDefinition)series.eContainer();
        String aggFunc=null;
        try {
          aggFunc=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,query);
          ChartWizard.removeException(ChartWizard.PluginSet_getAggF_ID);
        }
 catch (        ChartException e) {
          ChartWizard.showException(ChartWizard.PluginSet_getAggF_ID,e.getLocalizedMessage());
        }
        if (baseSD != orthSD && baseSD.eContainer() != axis && ChartUtil.isMagicAggregate(aggFunc)) {
          dataType=DataType.NUMERIC_LITERAL;
          isMagicAgg=true;
        }
        if (!isValidatedAxis(dataType,axis.getType())) {
          AxisType[] axisTypes=provider.getCompatibleAxisType(series);
          int[] validationIndex=provider instanceof BubbleSeriesUIProvider ? new int[]{0} : provider.validationIndex(series);
          boolean needValidate=false;
          for (int i=0; i < validationIndex.length; i++) {
            if (query == series.getDataDefinition().get(i)) {
              needValidate=true;
              break;
            }
          }
          SeriesDefinition sd=(SeriesDefinition)series.eContainer();
          if (((Axis)sd.eContainer()).getSeriesDefinitions().indexOf(sd) > 0) {
            needValidate=false;
          }
          if (needValidate) {
            for (int i=0; i < axisTypes.length; i++) {
              if (isValidatedAxis(dataType,axisTypes[i])) {
                axisNotification(axis,axisTypes[i]);
                axis.setType(axisTypes[i]);
                break;
              }
            }
          }
        }
      }
      try {
        if (!isMagicAgg) {
          provider.validateSeriesBindingType(series,getDataServiceProvider());
        }
        ChartWizard.removeException(ChartWizard.CheckSeriesBindingType_ID + series.eContainer().hashCode());
      }
 catch (      ChartException ce) {
        ChartWizard.showException(ChartWizard.CheckSeriesBindingType_ID + series.eContainer().hashCode(),Messages.getFormattedString(""String_Node_Str"",new String[]{ce.getLocalizedMessage(),series.getDisplayName()}));
      }
      break;
    }
  }
}",0.8480318883906328
69969,"private void checkDataTypeImpl(Query query,Series series,boolean isBaseSeries){
  String expression=query.getDefinition();
  Axis axis=null;
  for (EObject o=query; o != null; ) {
    o=o.eContainer();
    if (o instanceof Axis) {
      axis=(Axis)o;
      break;
    }
  }
  Collection<ISeriesUIProvider> cRegisteredEntries=ChartUIExtensionsImpl.instance().getSeriesUIComponents(getContext().getClass().getSimpleName());
  Iterator<ISeriesUIProvider> iterEntries=cRegisteredEntries.iterator();
  String sSeries=null;
  while (iterEntries.hasNext()) {
    ISeriesUIProvider provider=iterEntries.next();
    sSeries=provider.getSeriesClass();
    if (sSeries.equals(series.getClass().getName())) {
      if (chartModel instanceof ChartWithAxes) {
        DataType dataType=getDataServiceProvider().getDataType(expression);
        SeriesDefinition baseSD=(ChartUIUtil.getBaseSeriesDefinitions(chartModel).get(0));
        SeriesDefinition orthSD=null;
        orthSD=(SeriesDefinition)series.eContainer();
        String aggFunc=null;
        try {
          aggFunc=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,query);
          ChartWizard.removeException(ChartWizard.PluginSet_getAggF_ID);
        }
 catch (        ChartException e) {
          ChartWizard.showException(ChartWizard.PluginSet_getAggF_ID,e.getLocalizedMessage());
        }
        if (baseSD != null) {
          if (!isBaseSeries && baseSD != orthSD && ChartUtil.isMagicAggregate(aggFunc)) {
            dataType=DataType.NUMERIC_LITERAL;
          }
        }
        if (dataType == null) {
          dataType=ChartUIUtil.convertAxisTypeToDataType(axis.getType());
        }
        AxisType[] axisTypes=provider.getCompatibleAxisType(series);
        for (int i=0; i < axisTypes.length; i++) {
          if (isValidatedAxis(dataType,axisTypes[i])) {
            axisNotification(axis,axisTypes[i]);
            ChartAdapter.beginIgnoreNotifications();
            axis.setType(axisTypes[i]);
            ChartAdapter.endIgnoreNotifications();
            break;
          }
        }
      }
      try {
        provider.validateSeriesBindingType(series,getDataServiceProvider());
        ChartWizard.removeException(ChartWizard.CheckSeriesBindingType_ID + series.eContainer().hashCode());
      }
 catch (      ChartException ce) {
        ChartWizard.showException(ChartWizard.CheckSeriesBindingType_ID + series.eContainer().hashCode(),Messages.getFormattedString(""String_Node_Str"",new String[]{ce.getLocalizedMessage(),series.getDisplayName()}));
      }
      break;
    }
  }
}","private void checkDataTypeImpl(Query query,Series series,boolean isBaseSeries){
  String expression=query.getDefinition();
  Axis axis=null;
  for (EObject o=query; o != null; ) {
    o=o.eContainer();
    if (o instanceof Axis) {
      axis=(Axis)o;
      break;
    }
  }
  Collection<ISeriesUIProvider> cRegisteredEntries=ChartUIExtensionsImpl.instance().getSeriesUIComponents(getContext().getClass().getSimpleName());
  Iterator<ISeriesUIProvider> iterEntries=cRegisteredEntries.iterator();
  String sSeries=null;
  while (iterEntries.hasNext()) {
    ISeriesUIProvider provider=iterEntries.next();
    sSeries=provider.getSeriesClass();
    if (sSeries.equals(series.getClass().getName())) {
      if (chartModel instanceof ChartWithAxes) {
        DataType dataType=getDataServiceProvider().getDataType(expression);
        SeriesDefinition baseSD=(ChartUIUtil.getBaseSeriesDefinitions(chartModel).get(0));
        SeriesDefinition orthSD=null;
        orthSD=(SeriesDefinition)series.eContainer();
        String aggFunc=null;
        try {
          aggFunc=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,query);
          ChartWizard.removeException(ChartWizard.PluginSet_getAggF_ID);
        }
 catch (        ChartException e) {
          ChartWizard.showException(ChartWizard.PluginSet_getAggF_ID,e.getLocalizedMessage());
        }
        if (baseSD != null) {
          if (!isBaseSeries && baseSD != orthSD && ChartUtil.isMagicAggregate(aggFunc)) {
            dataType=DataType.NUMERIC_LITERAL;
          }
        }
        if (isValidatedAxis(dataType,axis.getType())) {
          break;
        }
        AxisType[] axisTypes=provider.getCompatibleAxisType(series);
        for (int i=0; i < axisTypes.length; i++) {
          if (isValidatedAxis(dataType,axisTypes[i])) {
            axisNotification(axis,axisTypes[i]);
            ChartAdapter.beginIgnoreNotifications();
            axis.setType(axisTypes[i]);
            ChartAdapter.endIgnoreNotifications();
            break;
          }
        }
      }
      try {
        provider.validateSeriesBindingType(series,getDataServiceProvider());
        ChartWizard.removeException(ChartWizard.CheckSeriesBindingType_ID + series.eContainer().hashCode());
      }
 catch (      ChartException ce) {
        ChartWizard.showException(ChartWizard.CheckSeriesBindingType_ID + series.eContainer().hashCode(),Messages.getFormattedString(""String_Node_Str"",new String[]{ce.getLocalizedMessage(),series.getDisplayName()}));
      }
      break;
    }
  }
}",0.97893286079937
69970,"/** 
 * Calculates visibility for axis labels.
 * @param xs
 * @param la
 * @param iLabelLocation
 * @return
 * @throws ChartException
 */
final protected void checkTickLabelsVisibility(IDisplayServer xs,Label la,int iLabelLocation) throws ChartException {
  hmComputedLabelText=new HashMap<Integer,String>();
  boolean vis=la.isVisible();
  if (!vis && rtc.getSharedScale() != null) {
    vis=true;
  }
  boolean staggerEnabled=isAxisLabelStaggered();
  this.staggeredHelper=StaggeredHelper.createInstance(staggerEnabled,atcTickCoordinates.size(),iLabelShowingInterval);
  this.labelVisHelper=LabelVisibleHelper.createInstance(vis,isCategoryScale(),atcTickCoordinates.size(),iLabelShowingInterval);
  if (!vis || !isCategoryScale()) {
    return;
  }
  DataSetIterator dsi=getData();
  dsi.reset();
  final int iDateTimeUnit=(iType == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
  dsi.reset();
  CateLabVisTester tester=this.createCateLabVisTester(xs,la,iLabelLocation);
  EllipsisHelper eHelper=new EllipsisHelper(tester,la.getEllipsis());
  int start_id=isTickBetweenCategories() ? 0 : 1;
  RotatedRectangle rrPrev[]=new RotatedRectangle[2];
  double dStep=Math.abs(atcTickCoordinates.getStep() * dZoomFactor);
  int indexStep=dStep > 1 ? 1 : (int)(1d / dStep);
  for (int i=start_id; i < atcTickCoordinates.size() - 1; i+=indexStep) {
    Object oValue=null;
    if (dsi.hasNext()) {
      oValue=dsi.next();
    }
    if (labelVisHelper.shouldTickLabelVisible(i)) {
      double x=0, y=0;
      String sText=formatCategoryValue(iType,oValue,iDateTimeUnit);
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=this.atcTickCoordinates.getCoordinate(i) * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=this.atcTickCoordinates.getCoordinate(i) * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      RotatedRectangle rrCurr=null;
      int arrayIndex=isAxisLabelStaggered() && isTickLabelStaggered(i) ? 1 : 0;
      boolean bVis;
      if (rrPrev[arrayIndex] == null) {
        rrCurr=cComp.computePolygon(xs,iLabelLocation,la,x,y,null);
        bVis=true;
      }
 else {
        tester.setFPara(rrPrev[arrayIndex],x,y);
        bVis=eHelper.checkLabelEllipsis(sText,null);
        rrCurr=tester.getCurrentRR();
      }
      if (bVis) {
        labelVisHelper.addVisible(i);
        rrPrev[arrayIndex]=rrCurr;
        hmComputedLabelText.put(i,la.getCaption().getValue());
      }
    }
  }
}","/** 
 * Calculates visibility for axis labels.
 * @param xs
 * @param la
 * @param iLabelLocation
 * @return
 * @throws ChartException
 */
final protected void checkTickLabelsVisibility(IDisplayServer xs,Label la,int iLabelLocation) throws ChartException {
  hmComputedLabelText=new HashMap<Integer,String>();
  boolean vis=la.isVisible();
  if (!vis && rtc.getSharedScale() != null) {
    vis=true;
  }
  boolean staggerEnabled=isAxisLabelStaggered();
  this.staggeredHelper=StaggeredHelper.createInstance(staggerEnabled,atcTickCoordinates.size(),iLabelShowingInterval);
  this.labelVisHelper=LabelVisibleHelper.createInstance(vis,isCategoryScale(),atcTickCoordinates.size(),iLabelShowingInterval);
  if (!vis || !isCategoryScale()) {
    return;
  }
  DataSetIterator dsi=getData();
  dsi.reset();
  final int iDateTimeUnit=(iType == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
  dsi.reset();
  CateLabVisTester tester=this.createCateLabVisTester(xs,la,iLabelLocation);
  EllipsisHelper eHelper=new EllipsisHelper(tester,la.getEllipsis());
  int start_id=isTickBetweenCategories() ? 0 : 1;
  RotatedRectangle rrPrev[]=new RotatedRectangle[2];
  double dStep=Math.abs(atcTickCoordinates.getStep() * dZoomFactor);
  int indexStep=dStep > 1 ? 1 : (int)(1d / dStep);
  int iSkip=indexStep - 1;
  for (int i=start_id; i < atcTickCoordinates.size() - 1; i+=indexStep) {
    Object oValue=null;
    if (iSkip > 0) {
      if (dsi.skip(iSkip) < iSkip) {
        break;
      }
    }
    if (dsi.hasNext()) {
      oValue=dsi.next();
    }
 else {
      break;
    }
    if (labelVisHelper.shouldTickLabelVisible(i)) {
      double x=0, y=0;
      String sText=formatCategoryValue(iType,oValue,iDateTimeUnit);
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=this.atcTickCoordinates.getCoordinate(i) * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=this.atcTickCoordinates.getCoordinate(i) * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      RotatedRectangle rrCurr=null;
      int arrayIndex=isAxisLabelStaggered() && isTickLabelStaggered(i) ? 1 : 0;
      boolean bVis;
      if (rrPrev[arrayIndex] == null) {
        rrCurr=cComp.computePolygon(xs,iLabelLocation,la,x,y,null);
        bVis=true;
      }
 else {
        tester.setFPara(rrPrev[arrayIndex],x,y);
        bVis=eHelper.checkLabelEllipsis(sText,null);
        rrCurr=tester.getCurrentRR();
      }
      if (bVis) {
        labelVisHelper.addVisible(i);
        rrPrev[arrayIndex]=rrCurr;
        hmComputedLabelText.put(i,la.getCaption().getValue());
      }
    }
  }
}",0.9506483452680472
69971,"/** 
 * @return
 * @throws UndefinedValueException
 */
private final int getJavaType() throws ChartException {
  if (!isSetType()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,Messages.getString(""String_Node_Str""));
  }
switch (getType().getValue()) {
case DateFormatType.SHORT:
    return DateFormat.SHORT;
case DateFormatType.MEDIUM:
  return DateFormat.MEDIUM;
case DateFormatType.LONG:
return DateFormat.LONG;
case DateFormatType.FULL:
return DateFormat.FULL;
}
return 0;
}","/** 
 * @return
 * @throws UndefinedValueException
 */
private final int getJavaType() throws ChartException {
switch (getType().getValue()) {
case DateFormatType.SHORT:
    return DateFormat.SHORT;
case DateFormatType.MEDIUM:
  return DateFormat.MEDIUM;
case DateFormatType.LONG:
return DateFormat.LONG;
case DateFormatType.FULL:
return DateFormat.FULL;
}
return 0;
}",0.8335220838052095
69972,"public BigDecimal getBigDecimal(String columnName) throws OdaException {
  assertNotNull(rs);
  try {
    return rs.getBigDecimal(columnName);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_BIGDECIMAL_VALUE,e);
  }
}","public BigDecimal getBigDecimal(String columnName) throws OdaException {
  assertNotNull(rs);
  try {
    return rs.getBigDecimal(columnName);
  }
 catch (  SQLException e) {
    try {
      Object value=rs.getObject(columnName);
      if (value instanceof BigDecimal)       return (BigDecimal)value;
    }
 catch (    SQLException e1) {
    }
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_BIGDECIMAL_VALUE,e);
  }
}",0.7602836879432624
69973,"public IClob getClob(int index) throws OdaException {
  assertNotNull(rs);
  try {
    java.sql.Clob clob=rs.getClob(index);
    return new Clob(clob);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_BLOB_VALUE,e);
  }
}","public IClob getClob(int index) throws OdaException {
  assertNotNull(rs);
  try {
    java.sql.Clob clob=rs.getClob(index);
    return new Clob(clob);
  }
 catch (  SQLException e) {
    try {
      Object value=rs.getObject(index);
      if (value instanceof IBlob)       return (IClob)value;
    }
 catch (    SQLException ex) {
    }
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_BLOB_VALUE,e);
  }
}",0.7787356321839081
69974,"public IBlob getBlob(int index) throws OdaException {
  assertNotNull(rs);
  try {
    java.sql.Blob blob=rs.getBlob(index);
    return new Blob(blob);
  }
 catch (  UnsupportedOperationException e1) {
    try {
      InputStream inputStream=rs.getBinaryStream(index);
      return new Blob(SqlBlobUtil.newBlob(inputStream));
    }
 catch (    SQLException e2) {
      throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_BLOB_VALUE,e2);
    }
  }
catch (  SQLException e) {
    try {
      byte[] bytes=rs.getBytes(index);
      if (bytes == null)       return null;
      return new Blob(SqlBlobUtil.newBlob(new ByteArrayInputStream(bytes)));
    }
 catch (    SQLException e2) {
      throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_BLOB_VALUE,e2);
    }
  }
}","public IBlob getBlob(int index) throws OdaException {
  assertNotNull(rs);
  try {
    java.sql.Blob blob=rs.getBlob(index);
    return new Blob(blob);
  }
 catch (  UnsupportedOperationException e1) {
    try {
      InputStream inputStream=rs.getBinaryStream(index);
      return new Blob(SqlBlobUtil.newBlob(inputStream));
    }
 catch (    SQLException e2) {
      throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_BLOB_VALUE,e2);
    }
  }
catch (  SQLException e) {
    try {
      byte[] bytes=rs.getBytes(index);
      if (bytes == null)       return null;
      return new Blob(SqlBlobUtil.newBlob(new ByteArrayInputStream(bytes)));
    }
 catch (    SQLException e2) {
      try {
        Object value=rs.getObject(index);
        if (value instanceof IBlob)         return (IBlob)value;
      }
 catch (      SQLException ex) {
      }
      throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_BLOB_VALUE,e2);
    }
  }
}",0.9036697247706422
69975,"public void testNoRepeatOfSmallImage2(){
  Position imagePosition=new Position(2,2);
  BackgroundImageLayout layout=getLayoutOfSmallImage2();
  List positions=layout.getImagePositions(BackgroundImageLayout.REPEAT_NONE);
  assertEquals(1,positions.size());
  assertEquals(imagePosition,positions.iterator().next());
}","public void testNoRepeatOfSmallImage2(){
  Position imagePosition=new Position(2,2);
  BackgroundImageLayout layout=getLayoutOfSmallImage2();
  List positions=layout.getImagePositions(AreaConstants.NO_REPEAT);
  assertEquals(1,positions.size());
  assertEquals(imagePosition,positions.iterator().next());
}",0.9292604501607716
69976,"/** 
 * Test only the initial image position will be returned when the image is smaller than the area and repeat mode is no repeat.
 */
public void testNoRepeatOfSmallImage(){
  Position imagePosition=new Position(2,2);
  BackgroundImageLayout layout=getLayoutOfSmallImage();
  List positions=layout.getImagePositions(BackgroundImageLayout.REPEAT_NONE);
  assertEquals(1,positions.size());
  assertEquals(imagePosition,positions.iterator().next());
}","/** 
 * Test only the initial image position will be returned when the image is smaller than the area and repeat mode is no repeat.
 */
public void testNoRepeatOfSmallImage(){
  Position imagePosition=new Position(2,2);
  BackgroundImageLayout layout=getLayoutOfSmallImage();
  List positions=layout.getImagePositions(AreaConstants.NO_REPEAT);
  assertEquals(1,positions.size());
  assertEquals(imagePosition,positions.iterator().next());
}",0.950561797752809
69977,"public void testRepeatOfSmallImage(){
  List expected=new ArrayList();
  for (float y=-1.0f; y <= 8.0f; y+=3.0) {
    for (float x=-1.0f; x <= 8.0f; x+=3.0) {
      expected.add(new Position(x,y));
    }
  }
  Collections.sort(expected);
  BackgroundImageLayout layout=getLayoutOfSmallImage();
  List actual=layout.getImagePositions(BackgroundImageLayout.REPEAT_BOTH);
  assertEquals(expected,actual);
}","public void testRepeatOfSmallImage(){
  List expected=new ArrayList();
  for (float y=-1.0f; y <= 8.0f; y+=3.0) {
    for (float x=-1.0f; x <= 8.0f; x+=3.0) {
      expected.add(new Position(x,y));
    }
  }
  Collections.sort(expected);
  BackgroundImageLayout layout=getLayoutOfSmallImage();
  List actual=layout.getImagePositions(AreaConstants.REPEAT);
  assertEquals(expected,actual);
}",0.9508196721311476
69978,"public void testRepeatYOfSmallImage(){
  List expected=new ArrayList();
  for (float y=-1.0f; y <= 8.0f; y+=3.0) {
    expected.add(new Position(2.0f,y));
  }
  BackgroundImageLayout layout=getLayoutOfSmallImage();
  List actual=layout.getImagePositions(BackgroundImageLayout.REPEAT_Y);
  assertEquals(expected,actual);
}","public void testRepeatYOfSmallImage(){
  List expected=new ArrayList();
  for (float y=-1.0f; y <= 8.0f; y+=3.0) {
    expected.add(new Position(2.0f,y));
  }
  BackgroundImageLayout layout=getLayoutOfSmallImage();
  List actual=layout.getImagePositions(AreaConstants.REPEAT_Y);
  assertEquals(expected,actual);
}",0.946372239747634
69979,"public void testRepeatXOfSmallImage(){
  List expected=new ArrayList();
  for (float x=-1.0f; x <= 8.0f; x+=3.0) {
    expected.add(new Position(x,2.0f));
  }
  BackgroundImageLayout layout=getLayoutOfSmallImage();
  List actual=layout.getImagePositions(BackgroundImageLayout.REPEAT_X);
  assertEquals(expected,actual);
}","public void testRepeatXOfSmallImage(){
  List expected=new ArrayList();
  for (float x=-1.0f; x <= 8.0f; x+=3.0) {
    expected.add(new Position(x,2.0f));
  }
  BackgroundImageLayout layout=getLayoutOfSmallImage();
  List actual=layout.getImagePositions(AreaConstants.REPEAT_X);
  assertEquals(expected,actual);
}",0.946372239747634
69980,"/** 
 * Test when image is larger than area, only the initial image position will be returned.
 */
public void testNoRepeatOfBigImage(){
  Position areaPosition=new Position(0,0);
  Position areaSize=new Position(10,10);
  Position imagePosition=new Position(-1,-1);
  Position imageSize=new Position(11,11);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  List positions=layout.getImagePositions(BackgroundImageLayout.REPEAT_NONE);
  assertEquals(1,positions.size());
  assertEquals(imagePosition,positions.iterator().next());
  positions=layout.getImagePositions(BackgroundImageLayout.REPEAT_X);
  assertEquals(1,positions.size());
  assertEquals(imagePosition,positions.iterator().next());
  positions=layout.getImagePositions(BackgroundImageLayout.REPEAT_Y);
  assertEquals(1,positions.size());
  assertEquals(imagePosition,positions.iterator().next());
  positions=layout.getImagePositions(BackgroundImageLayout.REPEAT_BOTH);
  assertEquals(1,positions.size());
  assertEquals(imagePosition,positions.iterator().next());
}","/** 
 * Test when image is larger than area, only the initial image position will be returned.
 */
public void testNoRepeatOfBigImage(){
  Position areaPosition=new Position(0,0);
  Position areaSize=new Position(10,10);
  Position imagePosition=new Position(-1,-1);
  Position imageSize=new Position(11,11);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  List positions=layout.getImagePositions(AreaConstants.NO_REPEAT);
  assertEquals(1,positions.size());
  assertEquals(imagePosition,positions.iterator().next());
  positions=layout.getImagePositions(AreaConstants.REPEAT_X);
  assertEquals(1,positions.size());
  assertEquals(imagePosition,positions.iterator().next());
  positions=layout.getImagePositions(AreaConstants.REPEAT_Y);
  assertEquals(1,positions.size());
  assertEquals(imagePosition,positions.iterator().next());
  positions=layout.getImagePositions(AreaConstants.REPEAT);
  assertEquals(1,positions.size());
  assertEquals(imagePosition,positions.iterator().next());
}",0.9292076887013596
69981,"private static boolean isRepeatX(int repeat){
  return (repeat & REPEAT_X) != 0;
}","private static boolean isRepeatX(int repeat){
  return repeat == AreaConstants.REPEAT || repeat == AreaConstants.REPEAT_X;
}",0.7184466019417476
69982,"public List<Position> getImagePositions(String repeat){
  int repeatMode=REPEAT_BOTH;
  if (!(""String_Node_Str"".equals(repeat))) {
    if (""String_Node_Str"".equals(repeat)) {
      repeatMode=REPEAT_X;
    }
 else     if (""String_Node_Str"".equals(repeat)) {
      repeatMode=REPEAT_Y;
    }
 else     if (""String_Node_Str"".equals(repeat)) {
      repeatMode=REPEAT_NONE;
    }
  }
  return getImagePositions(repeatMode);
}","public List<Position> getImagePositions(String repeat){
  int repeatMode=AreaConstants.REPEAT;
  if (!(""String_Node_Str"".equals(repeat))) {
    if (""String_Node_Str"".equals(repeat)) {
      repeatMode=AreaConstants.REPEAT_X;
    }
 else     if (""String_Node_Str"".equals(repeat)) {
      repeatMode=AreaConstants.REPEAT_Y;
    }
 else     if (""String_Node_Str"".equals(repeat)) {
      repeatMode=AreaConstants.NO_REPEAT;
    }
  }
  return getImagePositions(repeatMode);
}",0.9137737961926092
69983,"private static boolean isRepeatY(int repeat){
  return (repeat & REPEAT_Y) != 0;
}","private static boolean isRepeatY(int repeat){
  return repeat == AreaConstants.REPEAT || repeat == AreaConstants.REPEAT_Y;
}",0.7184466019417476
69984,"private String applyFont(String fontName,int fontStyle,float fontSize,String text){
  if (isIntrinsicFont(fontName)) {
    return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
  }
 else {
    try {
      String fontPath=getFontPath(fontName);
      if (fontPath == null) {
        return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
      }
      ITrueTypeWriter trueTypeWriter=getTrueTypeFontWriter(fontPath);
      String displayName=fontName.replace(' ','_');
      trueTypeWriter.useDisplayName(displayName);
      trueTypeWriter.ensureGlyphsAvailable(text);
      setFont(displayName,fontSize);
      return toHexString(text);
    }
 catch (    Exception e) {
      log.log(Level.WARNING,""String_Node_Str"" + fontName);
    }
    return null;
  }
}","private String applyFont(String fontName,int fontStyle,float fontSize,String text){
  if (isIntrinsicFont(fontName)) {
    return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
  }
 else {
    try {
      String fontPath=getFontPath(fontName);
      if (fontPath == null) {
        return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
      }
      ITrueTypeWriter trueTypeWriter=getTrueTypeFontWriter(fontPath);
      String displayName=fontName.replace(' ','_');
      trueTypeWriter.useDisplayName(displayName);
      trueTypeWriter.ensureGlyphsAvailable(text);
      setFont(displayName,fontSize);
      return trueTypeWriter.toHexString(text);
    }
 catch (    Exception e) {
      log.log(Level.WARNING,""String_Node_Str"" + fontName);
    }
    return null;
  }
}",0.9903412749517064
69985,"protected void drawBackgroundImage(float x,float y,float width,float height,float imageWidth,float imageHeight,int repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  writer.drawBackgroundImage(imageUrl,x,y,width,height,imageWidth,imageHeight,absPosX,absPosY,repeat);
}","protected void drawBackgroundImage(float x,float y,float width,float height,int repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
}",0.6905829596412556
69986,"void setDataCube(String cubeName){
  try {
    if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      itemHandle.setDataBindingReference(null);
    }
    itemHandle.setDataSet(null);
    if (cubeName == null) {
      itemHandle.setCube(null);
      clearBindings();
    }
 else {
      if (!cubeName.equals(getDataCube())) {
        CubeHandle cubeHandle=getReportDesignHandle().findCube(cubeName);
        itemHandle.setCube(cubeHandle);
        clearBindings();
        generateBindings(generateComputedColumns(cubeHandle));
      }
    }
  }
 catch (  SemanticException e) {
    WizardBase.showException(e.getLocalizedMessage());
  }
}","void setDataCube(String cubeName){
  try {
    if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      itemHandle.setDataBindingReference(null);
    }
    itemHandle.setDataSet(null);
    if (cubeName == null) {
      itemHandle.setCube(null);
      clearBindings();
    }
 else {
      if (!cubeName.equals(getDataCube())) {
        CubeHandle cubeHandle=getReportDesignHandle().findCube(cubeName);
        itemHandle.setCube(cubeHandle);
        clearBindings();
        generateBindings(generateComputedColumns(cubeHandle));
      }
    }
    ChartWizard.removeException(ChartWizard.RepDSProvider_Cube_ID);
  }
 catch (  SemanticException e) {
    ChartWizard.showException(ChartWizard.RepDSProvider_Cube_ID,e.getLocalizedMessage());
  }
}",0.8982935153583618
69987,"void setReportItemReference(String referenceName){
  try {
    if (referenceName == null) {
      itemHandle.setDataBindingReference(null);
    }
 else {
      itemHandle.setDataSet(null);
      itemHandle.setCube(null);
      if (!referenceName.equals(getReportItemReference())) {
        itemHandle.setDataBindingReference((ReportItemHandle)getReportDesignHandle().findElement(referenceName));
      }
    }
  }
 catch (  SemanticException e) {
    WizardBase.showException(e.getLocalizedMessage());
  }
}","void setReportItemReference(String referenceName){
  try {
    if (referenceName == null) {
      itemHandle.setDataBindingReference(null);
    }
 else {
      itemHandle.setDataSet(null);
      itemHandle.setCube(null);
      if (!referenceName.equals(getReportItemReference())) {
        itemHandle.setDataBindingReference((ReportItemHandle)getReportDesignHandle().findElement(referenceName));
      }
    }
    ChartWizard.removeException(ChartWizard.RepDSProvider_Ref_ID);
  }
 catch (  SemanticException e) {
    ChartWizard.showException(ChartWizard.RepDSProvider_Ref_ID,e.getLocalizedMessage());
  }
}",0.8681614349775785
69988,"void setDataSet(String datasetName){
  try {
    boolean isPreviousDataBindingReference=false;
    if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      isPreviousDataBindingReference=true;
      itemHandle.setDataBindingReference(null);
    }
    itemHandle.setCube(null);
    if (datasetName == null) {
      if (getBoundDataSet() != null) {
        clearBindings();
      }
      itemHandle.setDataSet(null);
    }
 else {
      DataSetHandle dataset=getReportDesignHandle().findDataSet(datasetName);
      if (isPreviousDataBindingReference || itemHandle.getDataSet() != dataset) {
        itemHandle.setDataSet(dataset);
        clearBindings();
        generateBindings(generateComputedColumns(dataset));
      }
    }
  }
 catch (  SemanticException e) {
    WizardBase.showException(e.getLocalizedMessage());
  }
}","void setDataSet(String datasetName){
  try {
    boolean isPreviousDataBindingReference=false;
    if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      isPreviousDataBindingReference=true;
      itemHandle.setDataBindingReference(null);
    }
    itemHandle.setCube(null);
    if (datasetName == null) {
      if (getBoundDataSet() != null) {
        clearBindings();
      }
      itemHandle.setDataSet(null);
    }
 else {
      DataSetHandle dataset=getReportDesignHandle().findDataSet(datasetName);
      if (isPreviousDataBindingReference || itemHandle.getDataSet() != dataset) {
        itemHandle.setDataSet(dataset);
        clearBindings();
        generateBindings(generateComputedColumns(dataset));
      }
    }
    ChartWizard.removeException(ChartWizard.RepDSProvider_Set_ID);
  }
 catch (  SemanticException e) {
    ChartWizard.showException(ChartWizard.RepDSProvider_Set_ID,e.getLocalizedMessage());
  }
}",0.9198036006546644
69989,"public void setStyle(String styleName){
  try {
    if (styleName == null) {
      itemHandle.setStyle(null);
    }
 else {
      itemHandle.setStyle(getStyle(styleName));
    }
  }
 catch (  SemanticException e) {
    WizardBase.showException(e.getLocalizedMessage());
  }
}","public void setStyle(String styleName){
  try {
    if (styleName == null) {
      itemHandle.setStyle(null);
    }
 else {
      itemHandle.setStyle(getStyle(styleName));
    }
    ChartWizard.removeException(ChartWizard.RepDSProvider_Style_ID);
  }
 catch (  SemanticException e) {
    ChartWizard.showException(ChartWizard.RepDSProvider_Style_ID,e.getLocalizedMessage());
  }
}",0.7358778625954199
69990,"private void switchDataTable(){
  if (isCubeMode()) {
    return;
  }
  Runnable runnable=new Runnable(){
    public void run(){
      ColumnBindingInfo[] headers=null;
      List<?> dataList=null;
      try {
        headers=getDataServiceProvider().getPreviewHeadersInfo();
        dataList=getPreviewData();
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateTablePreview(headerInfo,data);
            if (errorMsg != null && errorMsg.equals(WizardBase.getErrors())) {
              WizardBase.removeException();
            }
          }
        }
);
      }
 catch (      Exception e) {
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        errorMsg=e.getMessage();
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateTablePreview(headerInfo,data);
            WizardBase.showException(errorMsg);
          }
        }
);
      }
    }
  }
;
  new Thread(runnable).start();
}","private void switchDataTable(){
  if (isCubeMode()) {
    return;
  }
  Runnable runnable=new Runnable(){
    public void run(){
      ColumnBindingInfo[] headers=null;
      List<?> dataList=null;
      try {
        headers=getDataServiceProvider().getPreviewHeadersInfo();
        dataList=getPreviewData();
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateTablePreview(headerInfo,data);
            ChartWizard.removeException(ChartWizard.StaChartDSh_dPreview_ID);
          }
        }
);
      }
 catch (      Exception e) {
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        final String message=e.getMessage();
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateTablePreview(headerInfo,data);
            ChartWizard.showException(ChartWizard.StaChartDSh_dPreview_ID,message);
          }
        }
);
      }
    }
  }
;
  new Thread(runnable).start();
}",0.8958990536277602
69991,"private void updateDragDataSource(){
  if (isCubeMode()) {
    stackLayout.topControl=cmpCubeTree;
    cubeTreeViewer.setInput(getCube());
    cmpStack.layout();
    return;
  }
  String pValue=(previousData == null) ? ""String_Node_Str"" : previousData;
  String cValue=(currentData == null) ? ""String_Node_Str"" : currentData;
  if (!pValue.equals(cValue)) {
    getContext().setShowingDataPreview(null);
  }
  previousData=currentData;
  try {
    if (!getContext().isSetShowingDataPreview() && getDataServiceProvider().getPreviewHeadersInfo().length >= 6) {
      getContext().setShowingDataPreview(Boolean.FALSE);
    }
  }
 catch (  NullPointerException e) {
  }
catch (  ChartException e) {
    WizardBase.showException(e.getMessage());
  }
  btnShowDataPreviewA.setSelection(getContext().isShowingDataPreview());
  btnShowDataPreviewB.setSelection(getContext().isShowingDataPreview());
  if (getContext().isShowingDataPreview()) {
    stackLayout.topControl=cmpDataPreview;
  }
 else {
    stackLayout.topControl=cmpColumnsList;
  }
  refreshDataPreviewPane();
  cmpStack.layout();
}","private void updateDragDataSource(){
  if (isCubeMode()) {
    stackLayout.topControl=cmpCubeTree;
    cubeTreeViewer.setInput(getCube());
    cmpStack.layout();
    return;
  }
  String pValue=(previousData == null) ? ""String_Node_Str"" : previousData;
  String cValue=(currentData == null) ? ""String_Node_Str"" : currentData;
  if (!pValue.equals(cValue)) {
    getContext().setShowingDataPreview(null);
  }
  previousData=currentData;
  try {
    if (!getContext().isSetShowingDataPreview() && getDataServiceProvider().getPreviewHeadersInfo().length >= 6) {
      getContext().setShowingDataPreview(Boolean.FALSE);
    }
    ChartWizard.removeException(ChartWizard.StaChartDSh_gHeaders_ID);
  }
 catch (  NullPointerException e) {
  }
catch (  ChartException e) {
    ChartWizard.showException(ChartWizard.StaChartDSh_gHeaders_ID,e.getMessage());
  }
  btnShowDataPreviewA.setSelection(getContext().isShowingDataPreview());
  btnShowDataPreviewB.setSelection(getContext().isShowingDataPreview());
  if (getContext().isShowingDataPreview()) {
    stackLayout.topControl=cmpDataPreview;
  }
 else {
    stackLayout.topControl=cmpColumnsList;
  }
  refreshDataPreviewPane();
  cmpStack.layout();
}",0.9005694261936049
69992,"/** 
 */
private void refreshColumnsListView(){
  if (dataProvider.getDataSetFromHandle() == null) {
    return;
  }
  if (isCubeMode()) {
    return;
  }
  Runnable runnable=new Runnable(){
    public void run(){
      ColumnBindingInfo[] headers=null;
      List<?> dataList=null;
      try {
        headers=getDataServiceProvider().getPreviewHeadersInfo();
        if (dataProvider.isLivePreviewEnabled()) {
          dataList=getPreviewData();
        }
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateColumnsTableViewer(headerInfo,data);
            if (errorMsg != null && errorMsg.equals(WizardBase.getErrors())) {
              WizardBase.removeException();
            }
          }
        }
);
      }
 catch (      Exception e) {
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        errorMsg=e.getMessage();
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateColumnsTableViewer(headerInfo,data);
            WizardBase.showException(errorMsg);
          }
        }
);
      }
    }
  }
;
  new Thread(runnable).start();
}","/** 
 */
private void refreshColumnsListView(){
  if (dataProvider.getDataSetFromHandle() == null) {
    return;
  }
  if (isCubeMode()) {
    return;
  }
  Runnable runnable=new Runnable(){
    public void run(){
      ColumnBindingInfo[] headers=null;
      List<?> dataList=null;
      try {
        headers=getDataServiceProvider().getPreviewHeadersInfo();
        if (dataProvider.isLivePreviewEnabled()) {
          dataList=getPreviewData();
        }
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateColumnsTableViewer(headerInfo,data);
            ChartWizard.removeException(ChartWizard.StaChartDSh_dPreview_ID);
          }
        }
);
      }
 catch (      Exception e) {
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        final String message=e.getLocalizedMessage();
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateColumnsTableViewer(headerInfo,data);
            ChartWizard.showException(ChartWizard.StaChartDSh_dPreview_ID,message);
          }
        }
);
      }
    }
  }
;
  new Thread(runnable).start();
}",0.9058084772370488
69993,"public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getReportDataSet() != null);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
ChartAdapter.beginIgnoreNotifications();
if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ExtendedItemHandle refHandle=ChartReportItemUtil.getChartReferenceItemHandle(itemHandle);
if (refHandle != null) {
ChartReportItemUtil.copyChartSeriesDefinition(ChartReportItemUtil.getChartFromHandle(refHandle),getChartModel());
}
}
ChartAdapter.endIgnoreNotifications();
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
}
updatePredefinedQueries();
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
}
 catch (ChartException e1) {
WizardBase.showException(e1.getLocalizedMessage());
}
}
}","public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getReportDataSet() != null);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
ChartAdapter.beginIgnoreNotifications();
if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ExtendedItemHandle refHandle=ChartReportItemUtil.getChartReferenceItemHandle(itemHandle);
if (refHandle != null) {
ChartReportItemUtil.copyChartSeriesDefinition(ChartReportItemUtil.getChartFromHandle(refHandle),getChartModel());
}
}
ChartAdapter.endIgnoreNotifications();
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
}
updatePredefinedQueries();
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}",0.9917240312475828
69994,"protected void addBinding(ComputedColumn column){
  try {
    DEUtil.addColumn(inputElement,column,true);
  }
 catch (  SemanticException e) {
    WizardBase.showException(e.getLocalizedMessage());
  }
}","protected void addBinding(ComputedColumn column){
  try {
    DEUtil.addColumn(inputElement,column,true);
    ChartWizard.removeException(ChartWizard.ChartColBinDia_ID);
  }
 catch (  SemanticException e) {
    ChartWizard.showException(ChartWizard.ChartColBinDia_ID,e.getLocalizedMessage());
  }
}",0.7145708582834331
69995,"private void updatePreview(){
  boolean hasException=false;
  try {
    fsp.updatePreview(getFormatSpecifier());
  }
 catch (  IllegalArgumentException e) {
    ChartWizard.showException(e.getMessage());
    hasException=true;
  }
  if (!hasException) {
    ChartWizard.removeException();
  }
}","private void updatePreview(){
  boolean hasException=false;
  try {
    fsp.updatePreview(getFormatSpecifier());
    ChartWizard.removeException(ChartWizard.FormatSpeciCom_ID);
  }
 catch (  IllegalArgumentException e) {
    ChartWizard.showException(ChartWizard.FormatSpeciCom_ID,e.getMessage());
    hasException=true;
  }
  if (!hasException) {
    ChartWizard.removeException();
  }
}",0.8621700879765396
69996,"private void paintMarker(GC gc,Marker currentMarker,Location location){
  Marker renderMarker=currentMarker;
  if (currentMarker.getType() == MarkerType.ICON_LITERAL) {
    renderMarker=currentMarker.copyInstance();
    renderMarker.setFill(ImageImpl.create(UIHelper.getURL(""String_Node_Str"").toString()));
  }
  idrSWT.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
  final MarkerRenderer mr=new MarkerRenderer(idrSWT,StructureSource.createUnknown(null),location,LineAttributesImpl.create(getMarker().isVisible() ? ColorDefinitionImpl.BLUE() : ColorDefinitionImpl.GREY(),LineStyle.SOLID_LITERAL,1),getMarker().isVisible() ? ColorDefinitionImpl.create(80,168,218) : ColorDefinitionImpl.GREY(),renderMarker,Integer.valueOf(4),null,false,false);
  boolean bException=false;
  try {
    mr.draw(idrSWT);
  }
 catch (  ChartException ex) {
    bException=true;
    WizardBase.showException(ex.getLocalizedMessage());
  }
  if (!bException) {
    WizardBase.removeException();
  }
  if (cnvMarker.isFocusControl()) {
    gc.setLineStyle(SWT.LINE_DOT);
    gc.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_BLACK));
    gc.drawRectangle(0,0,getSize().x - 21,this.getSize().y - 5);
  }
}","private void paintMarker(GC gc,Marker currentMarker,Location location){
  Marker renderMarker=currentMarker;
  if (currentMarker.getType() == MarkerType.ICON_LITERAL) {
    renderMarker=currentMarker.copyInstance();
    renderMarker.setFill(ImageImpl.create(UIHelper.getURL(""String_Node_Str"").toString()));
  }
  idrSWT.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
  final MarkerRenderer mr=new MarkerRenderer(idrSWT,StructureSource.createUnknown(null),location,LineAttributesImpl.create(getMarker().isVisible() ? ColorDefinitionImpl.BLUE() : ColorDefinitionImpl.GREY(),LineStyle.SOLID_LITERAL,1),getMarker().isVisible() ? ColorDefinitionImpl.create(80,168,218) : ColorDefinitionImpl.GREY(),renderMarker,Integer.valueOf(4),null,false,false);
  try {
    mr.draw(idrSWT);
    ChartWizard.removeException(ChartWizard.MarkerEdiCom_ID);
  }
 catch (  ChartException ex) {
    ChartWizard.showException(ChartWizard.MarkerEdiCom_ID,ex.getLocalizedMessage());
  }
  if (cnvMarker.isFocusControl()) {
    gc.setLineStyle(SWT.LINE_DOT);
    gc.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_BLACK));
    gc.drawRectangle(0,0,getSize().x - 21,this.getSize().y - 5);
  }
}",0.9010526315789472
69997,"private void updateQuery(String queryType,Query query,String expr,SeriesDefinition seriesDefinition){
  String actualExpr=expr;
  if (dataProvider.checkState(IDataServiceProvider.SHARE_QUERY)) {
    boolean isGroupOrAggr=false;
    Object obj=getCurrentColumnHeadObject();
    if (obj instanceof ColumnBindingInfo) {
      ColumnBindingInfo cbi=(ColumnBindingInfo)obj;
      int type=cbi.getColumnType();
      if (type == ColumnBindingInfo.GROUP_COLUMN || type == ColumnBindingInfo.AGGREGATE_COLUMN) {
        actualExpr=cbi.getExpression();
        isGroupOrAggr=true;
      }
    }
    if (seriesDefinition != null && (queryType.equals(ChartUIConstants.QUERY_CATEGORY) || queryType.equals(ChartUIConstants.QUERY_VALUE))) {
      seriesDefinition.getGrouping().setEnabled(isGroupOrAggr);
    }
  }
  query.setDefinition(actualExpr);
}","private void updateQuery(String queryType,Query query,String expr,SeriesDefinition seriesDefinition){
  String actualExpr=expr;
  if (dataProvider.checkState(IDataServiceProvider.SHARE_QUERY) || dataProvider.checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS)) {
    boolean isGroupOrAggr=false;
    Object obj=getCurrentColumnHeadObject();
    if (obj instanceof ColumnBindingInfo) {
      ColumnBindingInfo cbi=(ColumnBindingInfo)obj;
      int type=cbi.getColumnType();
      if (type == ColumnBindingInfo.GROUP_COLUMN || type == ColumnBindingInfo.AGGREGATE_COLUMN) {
        actualExpr=cbi.getExpression();
        isGroupOrAggr=true;
      }
    }
    if (seriesDefinition != null && (queryType.equals(ChartUIConstants.QUERY_CATEGORY) || queryType.equals(ChartUIConstants.QUERY_VALUE))) {
      seriesDefinition.getGrouping().setEnabled(isGroupOrAggr);
    }
  }
  query.setDefinition(actualExpr);
}",0.9587155963302753
69998,"/** 
 * Whether the script string is null or comments
 */
static boolean isNullOrComments(String script){
  if (script == null)   return true;
  String scriptWithoutComments=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (scriptWithoutComments.trim().length() == 0)   return true;
 else   return false;
}","/** 
 * Whether the script string is null or comments
 */
static boolean isNullOrComments(String script){
  if (script == null)   return true;
  try {
    String scriptWithoutComments=script.replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (scriptWithoutComments.trim().length() == 0)     return true;
 else     return false;
  }
 catch (  Throwable e) {
    return false;
  }
}",0.8534850640113798
69999,"public void add(AbstractArea area){
  super.add(area);
  if (repeatList != null) {
    IContent content=((ContainerArea)area).getContent();
    if (content != null) {
      IElement parent=content.getParent();
      if (parent != null && parent instanceof IBandContent) {
        int type=((IBandContent)parent).getBandType();
        if (type == IBandContent.BAND_HEADER || type == IBandContent.BAND_GROUP_HEADER) {
          if (content instanceof IRowContent) {
            RowDesign rowDesign=(RowDesign)content.getGenerateBy();
            if (rowDesign.getRepeatable())             repeatList.add(area);
          }
 else           repeatList.add(area);
        }
      }
    }
  }
}","public void add(AbstractArea area){
  super.add(area);
  if (repeatList != null) {
    IContent content=((ContainerArea)area).getContent();
    if (content != null) {
      IElement parent=content.getParent();
      if (parent != null && parent instanceof IBandContent) {
        int type=((IBandContent)parent).getBandType();
        if (type == IBandContent.BAND_HEADER || type == IBandContent.BAND_GROUP_HEADER) {
          if (content instanceof IRowContent) {
            RowDesign rowDesign=(RowDesign)content.getGenerateBy();
            if (rowDesign != null && rowDesign.getRepeatable()) {
              repeatList.add(area);
            }
          }
 else {
            repeatList.add(area);
          }
        }
      }
    }
  }
}",0.9560362875087228
70000,"/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
  }
 else {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      boolean absoluteWidth=true;
      for (int i=0; i < table.getColumnCount(); i++) {
        IColumn column=table.getColumn(i);
        DimensionType columnWidth=column.getWidth();
        if (columnWidth == null) {
          absoluteWidth=false;
          break;
        }
 else {
          if (""String_Node_Str"".endsWith(columnWidth.getUnits())) {
            absoluteWidth=false;
            break;
          }
        }
      }
      if (!absoluteWidth) {
        styleBuffer.append(""String_Node_Str"");
      }
    }
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  String value=style.getTextAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}","/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  boolean widthOutputFlag=false;
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
    widthOutputFlag=true;
  }
 else {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      boolean absoluteWidth=true;
      for (int i=0; i < table.getColumnCount(); i++) {
        IColumn column=table.getColumn(i);
        DimensionType columnWidth=column.getWidth();
        if (columnWidth == null) {
          absoluteWidth=false;
          break;
        }
 else {
          if (""String_Node_Str"".endsWith(columnWidth.getUnits())) {
            absoluteWidth=false;
            break;
          }
        }
      }
      if (!absoluteWidth) {
        styleBuffer.append(""String_Node_Str"");
        widthOutputFlag=true;
      }
    }
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      if (!widthOutputFlag) {
        styleBuffer.append(""String_Node_Str"");
      }
      styleBuffer.append(""String_Node_Str"");
    }
  }
  String value=style.getTextAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.9602012808783166
