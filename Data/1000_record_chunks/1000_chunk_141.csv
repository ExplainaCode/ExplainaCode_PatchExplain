record_number,buggy_code,fixed_code,code_similarity
140001,"@Override protected void addFieldsListeners(){
  lowerText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=lowerText.getText();
      String max=higherText.getText();
      if (!CheckValueUtils.isEmpty(min)) {
        if (isRangeForDate) {
          if (!CheckValueUtils.isDateValue(min)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_DATE);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
 else         if (!CheckValueUtils.isNumberWithNegativeValue(min)) {
          updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
        }
 else         if (!CheckValueUtils.isEmpty(max) && CheckValueUtils.isAoverB(min,max)) {
          updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
        }
 else {
          updateStatus(IStatus.OK,MSG_OK);
        }
      }
 else {
        updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
      }
    }
  }
);
  higherText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=lowerText.getText();
      String max=higherText.getText();
      if (!CheckValueUtils.isEmpty(max)) {
        if (isRangeForDate) {
          if (!CheckValueUtils.isDateValue(max)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_DATE);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
 else         if (!CheckValueUtils.isNumberWithNegativeValue(max)) {
          updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
        }
 else         if (!CheckValueUtils.isEmpty(min) && CheckValueUtils.isAoverB(min,max)) {
          updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
        }
 else {
          updateStatus(IStatus.OK,MSG_OK);
        }
      }
 else {
        updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
      }
    }
  }
);
  if (isContainRowCount) {
    pLowerText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String pmin=pLowerText.getText();
        String pmax=pHigherText.getText();
        if (!CheckValueUtils.isEmpty(pmin)) {
          if (!CheckValueUtils.isRealNumberValue(pmin)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
          }
 else           if (CheckValueUtils.isOutRange(MIN,MAX,pmin)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_INDICATOR_VALUE_OUT_OF_RANGE);
          }
 else           if (!CheckValueUtils.isEmpty(pmax) && CheckValueUtils.isAoverB(pmin,pmax)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
 else {
          updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
        }
      }
    }
);
    pHigherText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String pmin=pLowerText.getText();
        String pmax=pHigherText.getText();
        if (!CheckValueUtils.isEmpty(pmax)) {
          if (!CheckValueUtils.isRealNumberValue(pmax)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
          }
 else           if (CheckValueUtils.isOutRange(MIN,MAX,pmax)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_INDICATOR_VALUE_OUT_OF_RANGE);
          }
 else           if (!CheckValueUtils.isEmpty(pmin) && CheckValueUtils.isAoverB(pmin,pmax)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
 else {
          updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
        }
      }
    }
);
  }
}","@Override protected void addFieldsListeners(){
  lowerText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=lowerText.getText();
      String max=higherText.getText();
      if (!CheckValueUtils.isEmpty(min)) {
        if (isRangeForDate) {
          if (!CheckValueUtils.isDateValue(min)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_DATE);
          }
 else           if (!CheckValueUtils.isEmpty(max) && CheckValueUtils.isAoverB(min,max)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
 else {
          if (!CheckValueUtils.isNumberWithNegativeValue(min)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
          }
 else           if (!CheckValueUtils.isEmpty(max) && CheckValueUtils.isAoverB(min,max)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
      }
 else {
        updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
      }
    }
  }
);
  higherText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=lowerText.getText();
      String max=higherText.getText();
      if (!CheckValueUtils.isEmpty(max)) {
        if (isRangeForDate) {
          if (!CheckValueUtils.isDateValue(max)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_DATE);
          }
 else           if (!CheckValueUtils.isEmpty(min) && CheckValueUtils.isAoverB(min,max)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
 else {
          if (!CheckValueUtils.isNumberWithNegativeValue(max)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
          }
 else           if (!CheckValueUtils.isEmpty(min) && CheckValueUtils.isAoverB(min,max)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
      }
 else {
        updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
      }
    }
  }
);
  if (isContainRowCount) {
    pLowerText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String pmin=pLowerText.getText();
        String pmax=pHigherText.getText();
        if (!CheckValueUtils.isEmpty(pmin)) {
          if (!CheckValueUtils.isRealNumberValue(pmin)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
          }
 else           if (CheckValueUtils.isOutRange(MIN,MAX,pmin)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_INDICATOR_VALUE_OUT_OF_RANGE);
          }
 else           if (!CheckValueUtils.isEmpty(pmax) && CheckValueUtils.isAoverB(pmin,pmax)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
 else {
          updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
        }
      }
    }
);
    pHigherText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String pmin=pLowerText.getText();
        String pmax=pHigherText.getText();
        if (!CheckValueUtils.isEmpty(pmax)) {
          if (!CheckValueUtils.isRealNumberValue(pmax)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
          }
 else           if (CheckValueUtils.isOutRange(MIN,MAX,pmax)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_INDICATOR_VALUE_OUT_OF_RANGE);
          }
 else           if (!CheckValueUtils.isEmpty(pmin) && CheckValueUtils.isAoverB(pmin,pmax)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
 else {
          updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
        }
      }
    }
);
  }
}",0.9004898169631348
140002,"@Override protected ColumnIndicator[] getPredefinedColumnIndicator(){
  IndicatorEnum[] allwedEnumes=new IndicatorEnum[2];
  allwedEnumes[0]=IndicatorEnum.LowFrequencyIndicatorEnum;
  allwedEnumes[1]=IndicatorEnum.FrequencyIndicatorEnum;
  ColumnIndicator[] returnColumnIndicator=composePredefinedColumnIndicator(allwedEnumes);
  if (parameters != null) {
    for (    ColumnIndicator columnIndicator : returnColumnIndicator) {
      for (      Indicator indicator : columnIndicator.getIndicators()) {
        if (indicator instanceof FrequencyIndicator) {
          indicator.getParameters().getDateParameters().setDateAggregationType(parameters.getDateParameters().getDateAggregationType());
        }
      }
    }
  }
  return returnColumnIndicator;
}","@Override protected ColumnIndicator[] getPredefinedColumnIndicator(){
  IndicatorEnum[] allwedEnumes=new IndicatorEnum[5];
  allwedEnumes[0]=IndicatorEnum.CountsIndicatorEnum;
  allwedEnumes[1]=IndicatorEnum.MinValueIndicatorEnum;
  allwedEnumes[2]=IndicatorEnum.MaxValueIndicatorEnum;
  allwedEnumes[3]=IndicatorEnum.LowFrequencyIndicatorEnum;
  allwedEnumes[4]=IndicatorEnum.FrequencyIndicatorEnum;
  ColumnIndicator[] returnColumnIndicator=composePredefinedColumnIndicator(allwedEnumes);
  if (parameters != null) {
    for (    ColumnIndicator columnIndicator : returnColumnIndicator) {
      for (      Indicator indicator : columnIndicator.getIndicators()) {
        if (indicator instanceof FrequencyIndicator) {
          indicator.getParameters().getDateParameters().setDateAggregationType(parameters.getDateParameters().getDateAggregationType());
        }
      }
    }
  }
  return returnColumnIndicator;
}",0.8870292887029289
140003,"@Override public void run(){
  if (isSelectedSameDataProvider()) {
    TdColumn oneColumn=columns[0];
    TdDataProvider dataprovider=DataProviderHelper.getTdDataProvider(oneColumn);
    ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(oneColumn);
    String tableName=ColumnSetNameHelper.getColumnSetQualifiedName(dataprovider,columnSetOwner);
    String columnClause=""String_Node_Str"";
    for (    TdColumn column : columns) {
      String columnName=ColumnHelper.getFullName(column);
      columnClause+=columnName + ""String_Node_Str"";
    }
    columnClause=columnClause.substring(0,columnClause.length() - 1);
    String query=""String_Node_Str"" + columnClause + ""String_Node_Str""+ tableName;
    CorePlugin.getDefault().runInDQViewer(dataprovider,query,tableName);
  }
 else {
    MessageDialogWithToggle.openWarning(null,""String_Node_Str"",""String_Node_Str"");
  }
}","@Override public void run(){
  if (ColumnHelper.isFromSameTable(Arrays.asList((Column[])columns))) {
    TdColumn oneColumn=columns[0];
    TdDataProvider dataprovider=DataProviderHelper.getTdDataProvider(oneColumn);
    ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(oneColumn);
    String tableName=ColumnSetNameHelper.getColumnSetQualifiedName(dataprovider,columnSetOwner);
    DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(dataprovider);
    String columnClause=""String_Node_Str"";
    for (    TdColumn column : columns) {
      columnClause+=language.quote(column.getName()) + ""String_Node_Str"";
    }
    columnClause=columnClause.substring(0,columnClause.length() - 1);
    String query=""String_Node_Str"" + columnClause + ""String_Node_Str""+ tableName;
    CorePlugin.getDefault().runInDQViewer(dataprovider,query,tableName);
  }
 else {
    MessageDialogWithToggle.openWarning(null,""String_Node_Str"",""String_Node_Str"");
  }
}",0.8342420937840785
140004,"@Override public void run(){
  if (column != null) {
    TdDataProvider dataprovider=DataProviderHelper.getTdDataProvider(column);
    ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(column);
    String tableName=ColumnSetNameHelper.getColumnSetQualifiedName(dataprovider,columnSetOwner);
    String columnName=ColumnHelper.getFullName(column);
    String query=""String_Node_Str"" + columnName + ""String_Node_Str""+ tableName;
    CorePlugin.getDefault().runInDQViewer(dataprovider,query,column.getName());
  }
}","@Override public void run(){
  if (isSelectedSameDataProvider()) {
    TdColumn oneColumn=columns[0];
    TdDataProvider dataprovider=DataProviderHelper.getTdDataProvider(oneColumn);
    ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(oneColumn);
    String tableName=ColumnSetNameHelper.getColumnSetQualifiedName(dataprovider,columnSetOwner);
    String columnClause=""String_Node_Str"";
    for (    TdColumn column : columns) {
      String columnName=ColumnHelper.getFullName(column);
      columnClause+=columnName + ""String_Node_Str"";
    }
    columnClause=columnClause.substring(0,columnClause.length() - 1);
    String query=""String_Node_Str"" + columnClause + ""String_Node_Str""+ tableName;
    CorePlugin.getDefault().runInDQViewer(dataprovider,query,tableName);
  }
 else {
    MessageDialogWithToggle.openWarning(null,""String_Node_Str"",""String_Node_Str"");
  }
}",0.6862464183381088
140005,"public PreviewColumnAction(TdColumn column){
  super(""String_Node_Str"");
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.EXPLORE_IMAGE));
  this.column=column;
}","public PreviewColumnAction(TdColumn[] columns){
  super(""String_Node_Str"");
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.EXPLORE_IMAGE));
  this.columns=columns;
}",0.9855907780979828
140006,"@Override public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  TdColumn column=(TdColumn)treeSelection.getFirstElement();
  PreviewColumnAction action=new PreviewColumnAction(column);
  menu.add(action);
}","@Override public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  Object[] selectedObjs=treeSelection.toArray();
  TdColumn[] columns=new TdColumn[selectedObjs.length];
  for (int i=0; i < selectedObjs.length; i++) {
    columns[i]=(TdColumn)selectedObjs[i];
  }
  PreviewColumnAction action=new PreviewColumnAction(columns);
  menu.add(action);
}",0.6865248226950355
140007,"/** 
 * DOC Zqin Comment method ""previewSelectedElements"".
 * @param newTree
 */
private void previewSelectedElements(Tree newTree){
  TreeItem[] items=newTree.getSelection();
  if (isSelectedSameDataProvider(items)) {
    TreeItem oneItem=items[0];
    ColumnIndicator oneColumnIndicator=(ColumnIndicator)oneItem.getData(COLUMN_INDICATOR_KEY);
    TdColumn oneColumn=oneColumnIndicator.getTdColumn();
    TdDataProvider dataprovider=DataProviderHelper.getTdDataProvider(oneColumn);
    ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(oneColumn);
    String tableName=ColumnSetNameHelper.getColumnSetQualifiedName(dataprovider,columnSetOwner);
    String columnClause=""String_Node_Str"";
    for (    TreeItem item : items) {
      ColumnIndicator columnIndicator=(ColumnIndicator)item.getData(COLUMN_INDICATOR_KEY);
      TdColumn column=columnIndicator.getTdColumn();
      String columnName=ColumnHelper.getFullName(column);
      columnClause+=columnName + ""String_Node_Str"";
    }
    columnClause=columnClause.substring(0,columnClause.length() - 1);
    String query=""String_Node_Str"" + columnClause + ""String_Node_Str""+ tableName;
    CorePlugin.getDefault().runInDQViewer(dataprovider,query,tableName);
  }
 else {
    MessageDialogWithToggle.openWarning(null,""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * DOC Zqin Comment method ""previewSelectedElements"".
 * @param newTree
 */
private void previewSelectedElements(Tree newTree){
  TreeItem[] items=newTree.getSelection();
  TdColumn[] columns=new TdColumn[items.length];
  for (int i=0; i < items.length; i++) {
    ColumnIndicator columnIndicator=(ColumnIndicator)items[i].getData(COLUMN_INDICATOR_KEY);
    TdColumn column=columnIndicator.getTdColumn();
    columns[i]=column;
  }
  new PreviewColumnAction(columns).run();
}",0.3103448275862069
140008,"private boolean isSelectedPatternIndicator(TreeItem[] items){
  if (!isSelectedIndicator(items)) {
    return false;
  }
  for (  TreeItem item : items) {
    IndicatorUnit unit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
    Indicator indicator=unit.getIndicator();
    if (!(indicator instanceof PatternMatchingIndicator)) {
      return false;
    }
  }
  return true;
}","private boolean isSelectedPatternIndicator(TreeItem[] items){
  if (!isSelectedIndicator(items)) {
    return false;
  }
  for (  TreeItem item : items) {
    IndicatorUnit unit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
    if (unit != null) {
      Indicator indicator=unit.getIndicator();
      if (!(indicator instanceof PatternMatchingIndicator)) {
        return false;
      }
    }
  }
  return true;
}",0.9521410579345088
140009,"/** 
 * DOC Zqin Comment method ""showSelectedElements"".MOD 2009-01-07 mzhao
 * @param newTree
 */
private void showSelectedElements(Tree newTree){
  TreeItem[] selection=newTree.getSelection();
  DQRespositoryView dqview=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
  if (selection.length == 1) {
    try {
      ColumnIndicator columnIndicator=(ColumnIndicator)selection[0].getData(COLUMN_INDICATOR_KEY);
      TdColumn column=columnIndicator.getTdColumn();
      dqview.showSelectedElements(column);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","/** 
 * DOC Zqin Comment method ""showSelectedElements"".MOD 2009-01-07 mzhao.
 * @param newTree
 */
private void showSelectedElements(Tree newTree){
  TreeItem[] selection=newTree.getSelection();
  DQRespositoryView dqview=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
  if (selection.length == 1) {
    try {
      ColumnIndicator columnIndicator=(ColumnIndicator)selection[0].getData(COLUMN_INDICATOR_KEY);
      TdColumn column=columnIndicator.getTdColumn();
      dqview.showSelectedElements(column);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9991714995857498
140010,"public void run(String[] params,ICheatSheetManager manager){
  if (params == null || params.length == 0) {
    return;
  }
  Integer analysisCatigory=null;
  if (NumberUtils.isNumber(params[0])) {
    analysisCatigory=NumberUtils.toInt(params[0]);
  }
  AnalysisType analysisType=null;
  if (analysisCatigory != null) {
switch (analysisCatigory) {
case AnalysisType.MULTIPLE_COLUMN_VALUE:
      analysisType=AnalysisType.MULTIPLE_COLUMN;
    break;
case AnalysisType.CATALOG_VALUE:
  analysisType=AnalysisType.CATALOG;
break;
case AnalysisType.SCHEMA_VALUE:
analysisType=AnalysisType.SCHEMA;
break;
case AnalysisType.COLUMNS_COMPARISON_VALUE:
analysisType=AnalysisType.COLUMNS_COMPARISON;
break;
case AnalysisType.COLUMN_CORRELATION_VALUE:
analysisType=AnalysisType.COLUMN_CORRELATION;
if (params[1] != null) {
if (NumberUtils.isNumber(params[1])) {
AnalysisParameter parameter=new AnalysisParameter();
parameter.setAnalysisTypeName(analysisType.getLiteral());
Wizard wizard=null;
int correAnaType=NumberUtils.toInt(params[1]);
if (correAnaType == 0) {
wizard=new ColumnWizard(parameter);
}
 else {
wizard=new ColumnTimeWizard(parameter);
}
wizard.setForcePreviousAndNextButtons(true);
WizardDialog dialog=new WizardDialog(null,wizard);
dialog.setPageSize(500,340);
dialog.open();
}
}
return;
default :
break;
}
}
if (analysisType == null) {
return;
}
Wizard wizard=WizardFactory.createAnalysisWizard(analysisType);
wizard.setForcePreviousAndNextButtons(true);
WizardDialog dialog=new WizardDialog(null,wizard);
dialog.setPageSize(500,340);
dialog.open();
}","public void run(String[] params,ICheatSheetManager manager){
  if (params == null || params.length == 0) {
    return;
  }
  Integer analysisCatigory=null;
  if (NumberUtils.isNumber(params[0])) {
    analysisCatigory=NumberUtils.toInt(params[0]);
  }
  AnalysisType analysisType=null;
  Wizard wizard=null;
  if (analysisCatigory != null) {
switch (analysisCatigory) {
case AnalysisType.MULTIPLE_COLUMN_VALUE:
      analysisType=AnalysisType.MULTIPLE_COLUMN;
    wizard=WizardFactory.createAnalysisWizard(analysisType);
  break;
case AnalysisType.CATALOG_VALUE:
analysisType=AnalysisType.CATALOG;
wizard=WizardFactory.createAnalysisWizard(analysisType);
break;
case AnalysisType.SCHEMA_VALUE:
analysisType=AnalysisType.SCHEMA;
wizard=WizardFactory.createAnalysisWizard(analysisType);
break;
case AnalysisType.COLUMNS_COMPARISON_VALUE:
analysisType=AnalysisType.COLUMNS_COMPARISON;
wizard=WizardFactory.createAnalysisWizard(analysisType);
break;
case AnalysisType.COLUMN_CORRELATION_VALUE:
analysisType=AnalysisType.COLUMN_CORRELATION;
if (params[1] != null) {
if (NumberUtils.isNumber(params[1])) {
AnalysisLabelParameter parameter=new AnalysisLabelParameter();
parameter.setAnalysisTypeName(analysisType.getLiteral());
int correAnaType=NumberUtils.toInt(params[1]);
if (correAnaType == 0) {
parameter.setCategoryLabel(AnalysisLabelParameter.NUMBERIC_CORRELATION);
}
 else {
parameter.setCategoryLabel(AnalysisLabelParameter.DATE_CORRELATION);
}
wizard=WizardFactory.createAnalysisWizard(analysisType,parameter);
}
}
break;
default :
break;
}
}
if (analysisType == null || wizard == null) {
return;
}
wizard.setForcePreviousAndNextButtons(true);
WizardDialog dialog=new WizardDialog(null,wizard);
dialog.setPageSize(500,340);
dialog.open();
}",0.7193939393939394
140011,"@Override public void run(){
  if (preDo()) {
    WizardDialog dialog=getPredefinedDialog();
    if (dialog == null) {
      dialog=getStandardAnalysisWizardDialog();
    }
    dialog.setPageSize(500,340);
    if (dialog.open() == Window.OK) {
      if (getPredefinedColumnIndicator() != null) {
        getMasterPage().getTreeViewer().addElements(getPredefinedColumnIndicator());
        getMasterPage().doSave(null);
      }
    }
  }
}","@Override public void run(){
  if (preDo()) {
    WizardDialog dialog=getPredefinedDialog();
    if (dialog == null) {
      dialog=getStandardAnalysisWizardDialog();
    }
    dialog.setPageSize(500,340);
    if (dialog.open() == Window.OK) {
      ColumnIndicator[] predefinedColumnIndicator=getPredefinedColumnIndicator();
      if (predefinedColumnIndicator != null) {
        getMasterPage().getTreeViewer().addElements(predefinedColumnIndicator);
        getMasterPage().doSave(null);
      }
    }
  }
}",0.7742616033755274
140012,"@Override protected ColumnIndicator[] getPredefinedColumnIndicator(){
  IndicatorEnum[] allwedEnumes=new IndicatorEnum[5];
  allwedEnumes[0]=IndicatorEnum.CountsIndicatorEnum;
  allwedEnumes[1]=IndicatorEnum.MinValueIndicatorEnum;
  allwedEnumes[2]=IndicatorEnum.MaxValueIndicatorEnum;
  allwedEnumes[3]=IndicatorEnum.LowFrequencyIndicatorEnum;
  allwedEnumes[4]=IndicatorEnum.FrequencyIndicatorEnum;
  ColumnIndicator[] returnColumnIndicator=composePredefinedColumnIndicator(allwedEnumes);
  if (parameters != null) {
    for (    ColumnIndicator columnIndicator : returnColumnIndicator) {
      for (      Indicator indicator : columnIndicator.getIndicators()) {
        if (indicator instanceof FrequencyIndicator) {
          indicator.setParameters(parameters);
        }
      }
    }
  }
  return returnColumnIndicator;
}","@Override protected ColumnIndicator[] getPredefinedColumnIndicator(){
  IndicatorEnum[] allwedEnumes=new IndicatorEnum[2];
  allwedEnumes[0]=IndicatorEnum.LowFrequencyIndicatorEnum;
  allwedEnumes[1]=IndicatorEnum.FrequencyIndicatorEnum;
  ColumnIndicator[] returnColumnIndicator=composePredefinedColumnIndicator(allwedEnumes);
  if (parameters != null) {
    for (    ColumnIndicator columnIndicator : returnColumnIndicator) {
      for (      Indicator indicator : columnIndicator.getIndicators()) {
        if (indicator instanceof FrequencyIndicator) {
          indicator.getParameters().getDateParameters().setDateAggregationType(parameters.getDateParameters().getDateAggregationType());
        }
      }
    }
  }
  return returnColumnIndicator;
}",0.8111181301326595
140013,"/** 
 * DOC mzhao Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 */
public SQLEditor openInSqlEditor(TdDataProvider tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  TdProviderConnection providerConnection=tdPc.getObject();
  String url=providerConnection.getConnectionString();
  SQLExplorerPlugin sqlexplorer=SQLExplorerPlugin.getDefault();
  Collection<Alias> aliases=sqlexplorer.getAliasManager().getAliases();
  if (aliases.isEmpty()) {
    new ChangePerspectiveAction(PluginConstant.SE_ID).run();
  }
  SQLEditor editorPart=null;
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + editorName + ""String_Node_Str"");
      input.setUser(alias.getDefaultUser());
      try {
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        break;
      }
 catch (      PartInitException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  return editorPart;
}","/** 
 * DOC mzhao Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 */
public SQLEditor openInSqlEditor(TdDataProvider tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  TdProviderConnection providerConnection=tdPc.getObject();
  String url=providerConnection.getConnectionString();
  SQLExplorerPlugin sqlexplorer=SQLExplorerPlugin.getDefault();
  Collection<Alias> aliases=sqlexplorer.getAliasManager().getAliases();
  boolean isExisted=false;
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      isExisted=true;
    }
  }
  if (!isExisted) {
    new ChangePerspectiveAction(PluginConstant.SE_ID).run();
  }
  SQLEditor editorPart=null;
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + editorName + ""String_Node_Str"");
      input.setUser(alias.getDefaultUser());
      try {
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
        editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        break;
      }
 catch (      PartInitException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  return editorPart;
}",0.9445945945945946
140014,"protected void createPart(Composite parent,String dbLiteral,final DBConnectionParameter connectionParam){
  if (dbLiteral.trim().equals(""String_Node_Str"")) {
    GridLayout layout=new GridLayout();
    layout.numColumns=3;
    parent.setLayout(layout);
    Label labelJar=new Label(parent,SWT.NONE);
    labelJar.setText(""String_Node_Str"");
    final Text jarText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    jarText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    jarText.setEditable(false);
    jarText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setDriverPath(jarText.getText());
      }
    }
);
    final Button selectJar=new Button(parent,SWT.PUSH);
    final StringBuilder filenameAll=new StringBuilder();
    selectJar.setText(""String_Node_Str"");
    selectJar.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
        String filename=dialog.open();
        if (filename != null) {
          filenameAll.append(filename + ""String_Node_Str"");
          jarText.setText(filenameAll.toString());
        }
 else {
          jarText.setText(""String_Node_Str"");
        }
      }
    }
);
    Label labelDriver=new Label(parent,SWT.NONE);
    labelDriver.setText(""String_Node_Str"");
    final Combo comboDriver=new Combo(parent,SWT.READ_ONLY);
    comboDriver.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    comboDriver.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        connectionParam.setDriverClassName(comboDriver.getText());
      }
    }
);
    Button listDriverBtn=new Button(parent,SWT.PUSH);
    listDriverBtn.setText(""String_Node_Str"");
    listDriverBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        comboDriver.removeAll();
        for (        String stringToFile : jarText.getText().trim().split(""String_Node_Str"")) {
          File file=new File(stringToFile);
          if (file != null) {
            try {
              MyURLClassLoader cl=new MyURLClassLoader(file.toURL());
              Class[] classes=cl.getAssignableClasses(Driver.class);
              for (int i=0; i < classes.length; ++i) {
                comboDriver.add(classes[i].getName());
              }
            }
 catch (            MalformedURLException ex) {
              ex.printStackTrace();
            }
catch (            IOException ex) {
              ex.printStackTrace();
            }
          }
        }
        if (comboDriver.getItemCount() > 0) {
          comboDriver.setText(comboDriver.getItem(0));
        }
      }
    }
);
    Label labelUrl=new Label(parent,SWT.NONE);
    labelUrl.setText(""String_Node_Str"");
    final Text urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setJdbcUrl(urlText.getText());
      }
    }
);
  }
 else   if (dbLiteral.trim().equals(""String_Node_Str"")) {
    GridLayout layout=new GridLayout();
    layout.numColumns=3;
    parent.setLayout(layout);
    Label labelfile=new Label(parent,SWT.NONE);
    final Text fileText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    final Button selectFile=new Button(parent,SWT.PUSH);
    Label labelUrl=new Label(parent,SWT.NONE);
    final Text urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    labelfile.setText(""String_Node_Str"");
    fileText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    fileText.setEditable(false);
    fileText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setFilePath(fileText.getText());
      }
    }
);
    selectFile.setText(""String_Node_Str"");
    labelUrl.setText(""String_Node_Str"");
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str""));
    urlText.setText(getConnectionURL());
    urlText.setEditable(false);
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    selectFile.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
        String filename=dialog.open();
        if (filename != null) {
          fileText.setText(filename);
        }
 else {
          fileText.setText(""String_Node_Str"");
        }
        String url=SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str"");
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"" + url);
        }
        setConnectionURL(url);
        urlText.setText(getConnectionURL());
      }
    }
);
  }
 else {
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    parent.setLayout(layout);
    boolean compositeEnable=!(dbType.getHostName() == null);
    Label label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text hostNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    hostNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      hostNameText.setText(dbType.getHostName());
    }
    label.setEnabled(compositeEnable);
    hostNameText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getPort() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text portText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    portText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      portText.setText(dbType.getPort());
    }
    label.setEnabled(compositeEnable);
    portText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getDBName() == null);
    label=new Label(parent,SWT.NONE);
    if (dbType == SupportDBUrlType.ORACLEWITHSIDDEFAULTURL) {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else     if (dbType == SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL) {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else {
      label.setText(""String_Node_Str"");
    }
    final Text databaseNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    databaseNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      databaseNameText.setText(dbType.getDBName());
    }
    label.setEnabled(compositeEnable);
    databaseNameText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getParamSeprator() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(""String_Node_Str"");
    final Text parameterText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    parameterText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (dbType.getParamSeprator() != null) {
      parameterText.setText(org.talend.dq.PluginConstant.DEFAULT_PARAMETERS);
    }
 else {
      parameterText.setText(PluginConstant.EMPTY_STRING);
    }
    parameterText.setEnabled(compositeEnable);
    label.setEnabled(compositeEnable);
    parameterText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getDataSource() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text dataSourceText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    dataSourceText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      dataSourceText.setText(dbType.getDataSource());
    }
    label.setEnabled(compositeEnable);
    dataSourceText.setEnabled(compositeEnable);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    urlText.setText(getConnectionURL());
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    dataSourceText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
    hostNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
    portText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
    portText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        Long portValue=null;
        try {
          portValue=new Long(portText.getText());
        }
 catch (        NumberFormatException e1) {
        }
        if (portValue == null || portValue <= 0) {
          portText.setText(PluginConstant.EMPTY_STRING);
        }
      }
    }
);
    databaseNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
        SupportDBUrlStore.getInstance().changeAllDBNmae(databaseNameText.getText());
      }
    }
);
    parameterText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
  }
}","protected void createPart(Composite parent,String dbLiteral,final DBConnectionParameter connectionParam){
  if (dbLiteral.trim().equals(""String_Node_Str"")) {
    GridLayout layout=new GridLayout();
    layout.numColumns=3;
    parent.setLayout(layout);
    Label labelJar=new Label(parent,SWT.NONE);
    labelJar.setText(""String_Node_Str"");
    final Text jarText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    jarText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    jarText.setEditable(false);
    jarText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setDriverPath(jarText.getText());
      }
    }
);
    final Button selectJar=new Button(parent,SWT.PUSH);
    final StringBuilder filenameAll=new StringBuilder();
    selectJar.setText(""String_Node_Str"");
    selectJar.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
        String filename=dialog.open();
        if (filename != null) {
          filenameAll.append(filename + ""String_Node_Str"");
          jarText.setText(filenameAll.toString());
        }
 else {
          jarText.setText(""String_Node_Str"");
        }
      }
    }
);
    Label labelDriver=new Label(parent,SWT.NONE);
    labelDriver.setText(""String_Node_Str"");
    final Combo comboDriver=new Combo(parent,SWT.READ_ONLY);
    comboDriver.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    comboDriver.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        connectionParam.setDriverClassName(comboDriver.getText());
      }
    }
);
    Button listDriverBtn=new Button(parent,SWT.PUSH);
    listDriverBtn.setText(""String_Node_Str"");
    listDriverBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        comboDriver.removeAll();
        for (        String stringToFile : jarText.getText().trim().split(""String_Node_Str"")) {
          File file=new File(stringToFile);
          if (file != null) {
            try {
              MyURLClassLoader cl=new MyURLClassLoader(file.toURL());
              Class[] classes=cl.getAssignableClasses(Driver.class);
              for (int i=0; i < classes.length; ++i) {
                comboDriver.add(classes[i].getName());
              }
            }
 catch (            MalformedURLException ex) {
              ex.printStackTrace();
            }
catch (            IOException ex) {
              ex.printStackTrace();
            }
          }
        }
        if (comboDriver.getItemCount() > 0) {
          comboDriver.setText(comboDriver.getItem(0));
        }
      }
    }
);
    Label labelUrl=new Label(parent,SWT.NONE);
    labelUrl.setText(""String_Node_Str"");
    final Text urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setJdbcUrl(urlText.getText());
      }
    }
);
  }
 else   if (dbLiteral.trim().equals(SupportDBUrlType.SQLITE3DEFAULTURL.getLanguage())) {
    GridLayout layout=new GridLayout();
    layout.numColumns=3;
    parent.setLayout(layout);
    Label labelfile=new Label(parent,SWT.NONE);
    final Text fileText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    final Button selectFile=new Button(parent,SWT.PUSH);
    Label labelUrl=new Label(parent,SWT.NONE);
    final Text urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    labelfile.setText(""String_Node_Str"");
    fileText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    fileText.setEditable(false);
    fileText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setFilePath(fileText.getText());
      }
    }
);
    selectFile.setText(""String_Node_Str"");
    labelUrl.setText(""String_Node_Str"");
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str""));
    urlText.setText(getConnectionURL());
    urlText.setEditable(false);
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    selectFile.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
        String filename=dialog.open();
        if (filename != null) {
          fileText.setText(filename);
        }
 else {
          fileText.setText(""String_Node_Str"");
        }
        String url=SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str"");
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"" + url);
        }
        setConnectionURL(url);
        urlText.setText(getConnectionURL());
      }
    }
);
  }
 else {
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    parent.setLayout(layout);
    boolean compositeEnable=!(dbType.getHostName() == null);
    Label label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text hostNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    hostNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      hostNameText.setText(dbType.getHostName());
    }
    label.setEnabled(compositeEnable);
    hostNameText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getPort() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text portText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    portText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      portText.setText(dbType.getPort());
    }
    label.setEnabled(compositeEnable);
    portText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getDBName() == null);
    label=new Label(parent,SWT.NONE);
    if (dbType == SupportDBUrlType.ORACLEWITHSIDDEFAULTURL) {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else     if (dbType == SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL) {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else {
      label.setText(""String_Node_Str"");
    }
    final Text databaseNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    databaseNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      databaseNameText.setText(dbType.getDBName());
    }
    label.setEnabled(compositeEnable);
    databaseNameText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getParamSeprator() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(""String_Node_Str"");
    final Text parameterText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    parameterText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (dbType.getParamSeprator() != null) {
      parameterText.setText(org.talend.dq.PluginConstant.DEFAULT_PARAMETERS);
    }
 else {
      parameterText.setText(PluginConstant.EMPTY_STRING);
    }
    parameterText.setEnabled(compositeEnable);
    label.setEnabled(compositeEnable);
    parameterText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getDataSource() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text dataSourceText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    dataSourceText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      dataSourceText.setText(dbType.getDataSource());
    }
    label.setEnabled(compositeEnable);
    dataSourceText.setEnabled(compositeEnable);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    urlText.setText(getConnectionURL());
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    dataSourceText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
    hostNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
    portText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
    portText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        Long portValue=null;
        try {
          portValue=new Long(portText.getText());
        }
 catch (        NumberFormatException e1) {
        }
        if (portValue == null || portValue <= 0) {
          portText.setText(PluginConstant.EMPTY_STRING);
        }
      }
    }
);
    databaseNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
        SupportDBUrlStore.getInstance().changeAllDBNmae(databaseNameText.getText());
      }
    }
);
    parameterText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
  }
}",0.9971774718832777
140015,"@Override public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (!canSave()) {
    return;
  }
  try {
    saveAnalysis();
    currentEditor.setRunActionButtonState(canRun());
    this.isDirty=false;
  }
 catch (  DataprofilerCoreException e) {
    ExceptionHandler.process(e,Level.ERROR);
    e.printStackTrace();
  }
}","@Override public void doSave(IProgressMonitor monitor){
  ReturnCode rc=canSave();
  if (!rc.isOk()) {
    MessageDialogWithToggle.openError(null,""String_Node_Str"",rc.getMessage());
  }
 else {
    super.doSave(monitor);
    try {
      saveAnalysis();
      currentEditor.setRunActionButtonState(canRun().isOk());
      this.isDirty=false;
    }
 catch (    DataprofilerCoreException e) {
      ExceptionHandler.process(e,Level.ERROR);
      e.printStackTrace();
    }
  }
}",0.6389228886168911
140016,protected abstract boolean canRun();,protected abstract ReturnCode canRun();,0.8266666666666667
140017,"protected boolean canSave(){
  return true;
}",protected abstract ReturnCode canSave();,0.5647058823529412
140018,"@Override protected boolean canRun(){
  return true;
}","@Override protected ReturnCode canRun(){
  return new ReturnCode(true);
}",0.7716535433070866
140019,"@Override protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  if (masterPage.isDirty() && (newPageIndex == RESULT_PAGE_INDEX)) {
    masterPage.doSave(null);
  }
  if (isRefreshResultPage && columnResultPage != null && newPageIndex == columnResultPage.getIndex() && columnResultPage instanceof ColumnAnalysisResultPage) {
    ((ColumnAnalysisResultPage)columnResultPage).refresh((ColumnMasterDetailsPage)masterPage);
    isRefreshResultPage=false;
  }
  if (isRefreshResultPage && columnResultPage != null && newPageIndex == columnResultPage.getIndex() && columnResultPage instanceof ColumnCorrelationNominalIntervalResultPage) {
    ((ColumnCorrelationNominalIntervalResultPage)columnResultPage).refresh((ColumnCorrelationNominalAndIntervalMasterPage)masterPage);
    isRefreshResultPage=false;
  }
  if (masterPage != null) {
    setRunActionButtonState(masterPage.canRun());
  }
}","@Override protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  if (masterPage.isDirty() && (newPageIndex == RESULT_PAGE_INDEX)) {
    masterPage.doSave(null);
  }
  if (isRefreshResultPage && columnResultPage != null && newPageIndex == columnResultPage.getIndex() && columnResultPage instanceof ColumnAnalysisResultPage) {
    ((ColumnAnalysisResultPage)columnResultPage).refresh((ColumnMasterDetailsPage)masterPage);
    isRefreshResultPage=false;
  }
  if (isRefreshResultPage && columnResultPage != null && newPageIndex == columnResultPage.getIndex() && columnResultPage instanceof ColumnCorrelationNominalIntervalResultPage) {
    ((ColumnCorrelationNominalIntervalResultPage)columnResultPage).refresh((ColumnCorrelationNominalAndIntervalMasterPage)masterPage);
    isRefreshResultPage=false;
  }
  if (masterPage != null) {
    setRunActionButtonState(masterPage.canRun().isOk());
  }
}",0.9961769524849808
140020,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  if (columnSetMultiIndicator.getAnalyzedColumns().size() != 0) {
    indicatorIsBlank=false;
  }
  columnCorrelationAnalysisHandler.clearAnalysis();
  columnSetMultiIndicator.getAnalyzedColumns().clear();
  List<String> comboStringList=new ArrayList<String>();
  List<String> correctString=new ArrayList<String>();
  List<Column> columnSetMultiValueList=treeViewer.getColumnSetMultiValueList();
  for (int i=0; i < columnSetMultiValueList.size(); i++) {
    TdColumn tdColumn=(TdColumn)columnSetMultiValueList.get(i);
    if (columnSetMultiIndicator instanceof CountAvgNullIndicator && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      MessageDialog.openWarning(new Shell(),""String_Node_Str"",""String_Node_Str"");
      return;
    }
 else     if (columnSetMultiIndicator instanceof MinMaxDateIndicator && Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
      MessageDialog.openWarning(new Shell(),""String_Node_Str"",""String_Node_Str"");
      return;
    }
    String comboString=MetadataHelper.getDataminingType(tdColumn).getLiteral();
    comboStringList.add(comboString);
  }
  boolean isSave=true;
  correctString.add(DataminingType.NOMINAL.getLiteral());
  correctString.add(DataminingType.INTERVAL.getLiteral());
  for (  String combo : comboStringList) {
    if (!correctString.contains(combo)) {
      isSave=false;
      break;
    }
  }
  if (!isSave) {
    MessageDialog.openWarning(new Shell(),""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TdDataProvider tdProvider=null;
    EList<ModelElement> tdColumns=columnCorrelationAnalysisHandler.getAnalyzedColumns();
    if (columnSetMultiValueList != null) {
      if (columnSetMultiValueList.size() != 0) {
        tdProvider=DataProviderHelper.getTdDataProvider(SwitchHelpers.COLUMN_SWITCH.doSwitch(columnSetMultiValueList.get(0)));
        analysis.getContext().setConnection(tdProvider);
        columnSetMultiIndicator.getAnalyzedColumns().addAll(columnSetMultiValueList);
      }
      columnCorrelationAnalysisHandler.addIndicator(columnSetMultiValueList,columnSetMultiIndicator);
    }
    columnCorrelationAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
    String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
    ReturnCode saved=AnaResourceFileHelper.getInstance().save(analysis);
    if (saved.isOk()) {
      if (tdProvider != null) {
        PrvResourceFileHelper.getInstance().save(tdProvider);
      }
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
      }
    }
 else {
      throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
    }
    treeViewer.setDirty(false);
    dataFilterComp.setDirty(false);
  }
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  columnCorrelationAnalysisHandler.clearAnalysis();
  columnSetMultiIndicator.getAnalyzedColumns().clear();
  List<String> comboStringList=new ArrayList<String>();
  List<String> correctString=new ArrayList<String>();
  List<Column> columnSetMultiValueList=treeViewer.getColumnSetMultiValueList();
  for (int i=0; i < columnSetMultiValueList.size(); i++) {
    TdColumn tdColumn=(TdColumn)columnSetMultiValueList.get(i);
    if (columnSetMultiIndicator instanceof CountAvgNullIndicator && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      MessageDialog.openWarning(new Shell(),""String_Node_Str"",""String_Node_Str"");
      return;
    }
 else     if (columnSetMultiIndicator instanceof MinMaxDateIndicator && Java2SqlType.isNumbericInSQL(tdColumn.getJavaType())) {
      MessageDialog.openWarning(new Shell(),""String_Node_Str"",""String_Node_Str"");
      return;
    }
    String comboString=MetadataHelper.getDataminingType(tdColumn).getLiteral();
    comboStringList.add(comboString);
  }
  boolean isSave=true;
  correctString.add(DataminingType.NOMINAL.getLiteral());
  correctString.add(DataminingType.INTERVAL.getLiteral());
  for (  String combo : comboStringList) {
    if (!correctString.contains(combo)) {
      isSave=false;
      break;
    }
  }
  if (!isSave) {
    MessageDialog.openWarning(new Shell(),""String_Node_Str"",""String_Node_Str"");
  }
 else {
    TdDataProvider tdProvider=null;
    EList<ModelElement> tdColumns=columnCorrelationAnalysisHandler.getAnalyzedColumns();
    if (columnSetMultiValueList != null) {
      if (columnSetMultiValueList.size() != 0) {
        tdProvider=DataProviderHelper.getTdDataProvider(SwitchHelpers.COLUMN_SWITCH.doSwitch(columnSetMultiValueList.get(0)));
        analysis.getContext().setConnection(tdProvider);
        columnSetMultiIndicator.getAnalyzedColumns().addAll(columnSetMultiValueList);
      }
      columnCorrelationAnalysisHandler.addIndicator(columnSetMultiValueList,columnSetMultiIndicator);
    }
    columnCorrelationAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
    String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
    ReturnCode saved=AnaResourceFileHelper.getInstance().save(analysis);
    if (saved.isOk()) {
      if (tdProvider != null) {
        PrvResourceFileHelper.getInstance().save(tdProvider);
      }
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
      }
    }
 else {
      throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",analysis.getName(),urlString,saved.getMessage()));
    }
    treeViewer.setDirty(false);
    dataFilterComp.setDirty(false);
  }
}",0.9832421340629276
140021,"public boolean canRun(){
  if (isDirty() || getTreeViewer().getTree().getItemCount() == 0) {
    return false;
  }
  return true;
}","@Override protected ReturnCode canRun(){
  List<Column> columnSetMultiValueList=getTreeViewer().getColumnSetMultiValueList();
  if (columnSetMultiValueList.isEmpty()) {
    return new ReturnCode(""String_Node_Str"",false);
  }
  return new ReturnCode(true);
}",0.2989690721649484
140022,"protected boolean canSave(){
  return true;
}","@Override protected ReturnCode canSave(){
  List<Column> columnSetMultiValueList=getTreeViewer().getColumnSetMultiValueList();
  if (!columnSetMultiValueList.isEmpty()) {
    if (!ColumnHelper.isFromSameTable(columnSetMultiValueList)) {
      return new ReturnCode(""String_Node_Str"",false);
    }
  }
  return new ReturnCode(true);
}",0.0952380952380952
140023,"public void initialize(FormEditor editor){
  super.initialize(editor);
  columnCorrelationAnalysisHandler=new ColumnCorrelationAnalysisHandler();
  columnCorrelationAnalysisHandler.setAnalysis((Analysis)this.currentModelElement);
  stringDataFilter=columnCorrelationAnalysisHandler.getStringDataFilter();
  analyzedColumns=columnCorrelationAnalysisHandler.getAnalyzedColumns();
  CountAvgNullIndicator currentCountAvgNullIndicator;
  if (columnCorrelationAnalysisHandler.getIndicator() == null) {
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    currentCountAvgNullIndicator=columnsetFactory.createCountAvgNullIndicator();
    columnSetMultiIndicator=currentCountAvgNullIndicator;
    indicatorIsBlank=false;
  }
 else {
    indicatorIsBlank=false;
    columnSetMultiIndicator=(ColumnSetMultiValueIndicator)columnCorrelationAnalysisHandler.getIndicator();
  }
  for (  ModelElement element : analyzedColumns) {
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (tdColumn == null) {
      continue;
    }
    DataminingType dataminingType=DataminingType.get(columnCorrelationAnalysisHandler.getDatamingType(tdColumn));
    MetadataHelper.setDataminingType(dataminingType == null ? DataminingType.NOMINAL : dataminingType,tdColumn);
  }
}","public void initialize(FormEditor editor){
  super.initialize(editor);
  columnCorrelationAnalysisHandler=new ColumnCorrelationAnalysisHandler();
  columnCorrelationAnalysisHandler.setAnalysis((Analysis)this.currentModelElement);
  stringDataFilter=columnCorrelationAnalysisHandler.getStringDataFilter();
  analyzedColumns=columnCorrelationAnalysisHandler.getAnalyzedColumns();
  CountAvgNullIndicator currentCountAvgNullIndicator;
  if (columnCorrelationAnalysisHandler.getIndicator() == null) {
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    currentCountAvgNullIndicator=columnsetFactory.createCountAvgNullIndicator();
    columnSetMultiIndicator=currentCountAvgNullIndicator;
  }
 else {
    columnSetMultiIndicator=(ColumnSetMultiValueIndicator)columnCorrelationAnalysisHandler.getIndicator();
  }
  for (  ModelElement element : analyzedColumns) {
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    if (tdColumn == null) {
      continue;
    }
    DataminingType dataminingType=DataminingType.get(columnCorrelationAnalysisHandler.getDatamingType(tdColumn));
    MetadataHelper.setDataminingType(dataminingType == null ? DataminingType.NOMINAL : dataminingType,tdColumn);
  }
}",0.9776892430278884
140024,"@Override protected boolean canRun(){
  ColumnIndicator[] columnIndicators=treeViewer.getColumnIndicator();
  if (columnIndicators == null || columnIndicators.length == 0) {
    return false;
  }
  for (  ColumnIndicator columnIndicator : columnIndicators) {
    if (columnIndicator.getIndicators().length == 0) {
      return false;
    }
  }
  return true;
}","@Override protected ReturnCode canRun(){
  ColumnIndicator[] columnIndicators=treeViewer.getColumnIndicator();
  if (columnIndicators == null || columnIndicators.length == 0) {
    return new ReturnCode(""String_Node_Str"",false);
  }
  for (  ColumnIndicator columnIndicator : columnIndicators) {
    if (columnIndicator.getIndicators().length == 0) {
      return new ReturnCode(""String_Node_Str"",false);
    }
  }
  return new ReturnCode(true);
}",0.8649318463444857
140025,"@Override protected boolean canRun(){
  return rowMatchingIndicatorA.getColumnSetA().size() != 0;
}","@Override protected ReturnCode canRun(){
  return new ReturnCode(rowMatchingIndicatorA.getColumnSetA().size() != 0);
}",0.8663594470046083
140026,"protected boolean canSave(){
  if (columnListA.size() != columnListB.size()) {
    MessageDialog.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    return false;
  }
  if (columnListA.size() > 0) {
    ColumnSet columnSetOwnerA=null;
    ColumnSet columnSetOwnerB=null;
    ColumnSet ownerA=null;
    ColumnSet ownerB=null;
    for (int i=0; i < columnListA.size(); i++) {
      if (!((TdColumn)columnListA.get(i)).getSqlDataType().getName().equals(((TdColumn)columnListB.get(i)).getSqlDataType().getName())) {
        MessageDialog.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        return false;
      }
      ownerA=ColumnHelper.getColumnSetOwner(columnListA.get(i));
      ownerB=ColumnHelper.getColumnSetOwner(columnListB.get(i));
      if (i == 0) {
        columnSetOwnerA=ownerA;
        columnSetOwnerB=ownerB;
      }
 else {
        if ((columnSetOwnerA != ownerA) || (columnSetOwnerB != ownerB)) {
          MessageDialog.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
          return false;
        }
      }
    }
    Package parentCatalogOrSchemaA=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwnerA);
    Package parentCatalogOrSchemaB=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwnerB);
    if (!parentCatalogOrSchemaA.getName().equals(parentCatalogOrSchemaB.getName())) {
      MessageDialog.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      return false;
    }
  }
  return true;
}","@Override protected ReturnCode canSave(){
  if (columnListA.size() != columnListB.size()) {
    return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
  }
  if (columnListA.size() > 0) {
    ColumnSet columnSetOwnerA=null;
    ColumnSet columnSetOwnerB=null;
    ColumnSet ownerA=null;
    ColumnSet ownerB=null;
    for (int i=0; i < columnListA.size(); i++) {
      if (!((TdColumn)columnListA.get(i)).getSqlDataType().getName().equals(((TdColumn)columnListB.get(i)).getSqlDataType().getName())) {
        return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
      }
      ownerA=ColumnHelper.getColumnSetOwner(columnListA.get(i));
      ownerB=ColumnHelper.getColumnSetOwner(columnListB.get(i));
      if (i == 0) {
        columnSetOwnerA=ownerA;
        columnSetOwnerB=ownerB;
      }
 else {
        if ((columnSetOwnerA != ownerA) || (columnSetOwnerB != ownerB)) {
          return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
        }
      }
    }
    Package parentCatalogOrSchemaA=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwnerA);
    Package parentCatalogOrSchemaB=ColumnSetHelper.getParentCatalogOrSchema(columnSetOwnerB);
    if (!parentCatalogOrSchemaA.getName().equals(parentCatalogOrSchemaB.getName())) {
      return new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
    }
  }
  return new ReturnCode(true);
}",0.4557366570789389
140027,"public void run(){
  Map<EIndicatorChartType,List<IndicatorUnit>> indicatorComposite=CompositeIndicator.getInstance().getIndicatorComposite(columnIndicator);
  for (  EIndicatorChartType chartType : indicatorComposite.keySet()) {
    List<IndicatorUnit> units=indicatorComposite.get(chartType);
    if (!units.isEmpty()) {
      IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(chartType,units);
      JFreeChart chart=chartTypeState.getFeatChart();
      if (chart != null) {
        ChartComposite cc=new ChartComposite(comp,SWT.NONE,chart,true);
        GridData gd=new GridData();
        gd.widthHint=550;
        gd.heightHint=250;
        cc.setLayoutData(gd);
      }
    }
  }
}","public void run(){
  Map<EIndicatorChartType,List<IndicatorUnit>> indicatorComposite=CompositeIndicator.getInstance().getIndicatorComposite(columnIndicator);
  for (  EIndicatorChartType chartType : indicatorComposite.keySet()) {
    List<IndicatorUnit> units=indicatorComposite.get(chartType);
    if (!units.isEmpty()) {
      final IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(chartType,units);
      JFreeChart chart=chartTypeState.getFeatChart();
      if (chart != null) {
        final ChartComposite chartComp=new ChartComposite(comp,SWT.NONE,chart,true);
        GridData gd=new GridData();
        gd.widthHint=550;
        gd.heightHint=250;
        chartComp.setLayoutData(gd);
        addListenerToChartComp(chartComp,chartTypeState);
      }
    }
  }
}",0.92
140028,"public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  previewChartList=new ArrayList<ExpandableComposite>();
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + column.getName());
    exComp.setLayout(new GridLayout());
    exComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    exComp.setData(columnIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"") + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().syncExec(new Runnable(){
            public void run(){
              Map<EIndicatorChartType,List<IndicatorUnit>> indicatorComposite=CompositeIndicator.getInstance().getIndicatorComposite(columnIndicator);
              for (              EIndicatorChartType chartType : indicatorComposite.keySet()) {
                List<IndicatorUnit> units=indicatorComposite.get(chartType);
                if (!units.isEmpty()) {
                  IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(chartType,units);
                  JFreeChart chart=chartTypeState.getFeatChart();
                  if (chart != null) {
                    ChartComposite cc=new ChartComposite(comp,SWT.NONE,chart,true);
                    GridData gd=new GridData();
                    gd.widthHint=550;
                    gd.heightHint=250;
                    cc.setLayoutData(gd);
                  }
                }
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        getChartComposite().layout();
        form.reflow(true);
        composite.pack();
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}","public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  previewChartList=new ArrayList<ExpandableComposite>();
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + column.getName());
    exComp.setLayout(new GridLayout());
    exComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    exComp.setData(columnIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"") + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().syncExec(new Runnable(){
            public void run(){
              Map<EIndicatorChartType,List<IndicatorUnit>> indicatorComposite=CompositeIndicator.getInstance().getIndicatorComposite(columnIndicator);
              for (              EIndicatorChartType chartType : indicatorComposite.keySet()) {
                List<IndicatorUnit> units=indicatorComposite.get(chartType);
                if (!units.isEmpty()) {
                  final IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(chartType,units);
                  JFreeChart chart=chartTypeState.getFeatChart();
                  if (chart != null) {
                    final ChartComposite chartComp=new ChartComposite(comp,SWT.NONE,chart,true);
                    GridData gd=new GridData();
                    gd.widthHint=550;
                    gd.heightHint=250;
                    chartComp.setLayoutData(gd);
                    addListenerToChartComp(chartComp,chartTypeState);
                  }
                }
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        getChartComposite().layout();
        form.reflow(true);
        composite.pack();
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}",0.9774590163934426
140029,"public AbstractChartTypeStates(List<IndicatorUnit> units){
  Iterator<IndicatorUnit> it=units.iterator();
  while (it.hasNext()) {
    IndicatorUnit unit=it.next();
    if (!unit.isExcuted()) {
      it.remove();
    }
 else {
      IndicatorCommonUtil.getIndicatorValue(unit);
    }
  }
  this.units=units;
}","public AbstractChartTypeStates(List<IndicatorUnit> units){
  Iterator<IndicatorUnit> it=units.iterator();
  while (it.hasNext()) {
    IndicatorUnit unit=it.next();
    if (!unit.isExcuted()) {
      it.remove();
    }
 else {
      IndicatorCommonUtil.getIndicatorValue(unit);
    }
  }
  if (units != null) {
    this.units.addAll(units);
  }
}",0.916030534351145
140030,"public boolean createDQStructure(){
  Shell shell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
  try {
    IProject project=this.createNewProject(DATA_PROFILING,shell);
    IFolder createNewFoler=this.createNewFoler(project,ANALYSIS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,ANALYSIS_FOLDER_PROPERTY);
    createNewFoler=this.createNewFoler(project,REPORTS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,REPORT_FOLDER_PROPERTY);
    project=this.createNewProject(LIBRARIES,shell);
    createNewFoler=this.createNewFoler(project,PATTERNS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,PATTERNS_FOLDER_PROPERTY);
    checkVersionFile(project);
    this.copyFilesToFolder(PATTERN_PATH,true,createNewFoler);
    createNewFoler=this.createNewFoler(project,SQL_PATTERNS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,SQLPATTERNS_FOLDER_PROPERTY);
    this.copyFilesToFolder(SQL_LIKE_PATH,true,createNewFoler);
    createNewFoler=this.createNewFoler(project,SOURCE_FILES);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,SOURCEFILES_FOLDER_PROPERTY);
    this.copyFilesToFolder(DEMO_PATH,true,createNewFoler);
    project=this.createNewProject(METADATA,shell);
    createNewFoler=this.createNewFoler(project,DB_CONNECTIONS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,DBCONNECTION_FOLDER_PROPERTY);
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return false;
  }
  return true;
}","public boolean createDQStructure(){
  Shell shell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
  try {
    IProject project=this.createNewProject(DATA_PROFILING,shell);
    IFolder createNewFoler=this.createNewFoler(project,ANALYSIS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,ANALYSIS_FOLDER_PROPERTY);
    createNewFoler=this.createNewFoler(project,REPORTS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,REPORT_FOLDER_PROPERTY);
    project=this.createNewProject(LIBRARIES,shell);
    createNewFoler=this.createNewFoler(project,PATTERNS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,PATTERNS_FOLDER_PROPERTY);
    WorkspaceVersionHelper.storeVersion();
    this.copyFilesToFolder(PATTERN_PATH,true,createNewFoler);
    createNewFoler=this.createNewFoler(project,SQL_PATTERNS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,SQLPATTERNS_FOLDER_PROPERTY);
    this.copyFilesToFolder(SQL_LIKE_PATH,true,createNewFoler);
    createNewFoler=this.createNewFoler(project,SOURCE_FILES);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,SOURCEFILES_FOLDER_PROPERTY);
    this.copyFilesToFolder(DEMO_PATH,true,createNewFoler);
    project=this.createNewProject(METADATA,shell);
    createNewFoler=this.createNewFoler(project,DB_CONNECTIONS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,DBCONNECTION_FOLDER_PROPERTY);
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return false;
  }
  return true;
}",0.9854497354497356
140031,"private void createResultDataComposite(final Composite comp,final ColumnIndicator columnIndicator){
  if (columnIndicator.getIndicators().length != 0) {
    final TdColumn column=columnIndicator.getTdColumn();
    IRunnableWithProgress rwp=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"") + column.getName(),IProgressMonitor.UNKNOWN);
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            Map<EIndicatorChartType,List<IndicatorUnit>> indicatorComposite=CompositeIndicator.getInstance().getIndicatorComposite(columnIndicator);
            for (            EIndicatorChartType chartType : indicatorComposite.keySet()) {
              List<IndicatorUnit> units=indicatorComposite.get(chartType);
              if (!units.isEmpty()) {
                IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(chartType,units);
                ChartWithData chartData=new ChartWithData(chartType,chartTypeState.getChart(),chartTypeState.getDataEntity());
                ExpandableComposite subComp=toolkit.createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
                subComp.setText(chartData.getChartType().getLiteral());
                subComp.setLayoutData(new GridData(GridData.FILL_BOTH));
                final Composite composite=toolkit.createComposite(subComp,SWT.NULL);
                composite.setLayout(new GridLayout(2,false));
                composite.setLayoutData(new GridData(GridData.FILL_BOTH));
                Analysis analysis=masterPage.getAnalysisHandler().getAnalysis();
                TableViewer tableviewer=chartTypeState.getTableForm(composite);
                tableviewer.setInput(chartData);
                DataExplorer dataExplorer=chartTypeState.getDataExplorer();
                ChartTableFactory.addMenuAndTip(tableviewer,dataExplorer,analysis);
                JFreeChart chart=chartTypeState.getChart();
                if (chart != null) {
                  GridData gd=new GridData(GridData.FILL_BOTH);
                  ChartPanel chartPanel=ChartUtils.createAWTSWTComp(composite,gd,chart);
                  addMouseListenerForChart(chartPanel,dataExplorer,analysis);
                }
                subComp.setClient(composite);
                subComp.addExpansionListener(new ExpansionAdapter(){
                  @Override public void expansionStateChanged(                  ExpansionEvent e){
                    form.reflow(true);
                  }
                }
);
              }
            }
          }
        }
);
        monitor.done();
      }
    }
;
    try {
      new ProgressMonitorDialog(null).run(true,false,rwp);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}","private void createResultDataComposite(final Composite comp,final ColumnIndicator columnIndicator){
  if (columnIndicator.getIndicators().length != 0) {
    final TdColumn column=columnIndicator.getTdColumn();
    IRunnableWithProgress rwp=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"") + column.getName(),IProgressMonitor.UNKNOWN);
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            Map<EIndicatorChartType,List<IndicatorUnit>> indicatorComposite=CompositeIndicator.getInstance().getIndicatorComposite(columnIndicator);
            for (            EIndicatorChartType chartType : indicatorComposite.keySet()) {
              List<IndicatorUnit> units=indicatorComposite.get(chartType);
              if (!units.isEmpty()) {
                IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(chartType,units);
                ChartWithData chartData=new ChartWithData(chartType,chartTypeState.getChart(),chartTypeState.getDataEntity());
                ExpandableComposite subComp=toolkit.createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
                subComp.setText(chartData.getChartType().getLiteral());
                subComp.setLayoutData(new GridData(GridData.FILL_BOTH));
                final Composite composite=toolkit.createComposite(subComp,SWT.NULL);
                composite.setLayout(new GridLayout(2,false));
                composite.setLayoutData(new GridData(GridData.FILL_BOTH));
                Analysis analysis=masterPage.getAnalysisHandler().getAnalysis();
                TableViewer tableviewer=chartTypeState.getTableForm(composite);
                tableviewer.setInput(chartData);
                DataExplorer dataExplorer=chartTypeState.getDataExplorer();
                ChartTableFactory.addMenuAndTip(tableviewer,dataExplorer,analysis);
                JFreeChart chart=chartTypeState.getChart();
                if (chart != null) {
                  GridData gd=new GridData();
                  gd.widthHint=450;
                  gd.heightHint=240;
                  ChartPanel chartPanel=ChartUtils.createAWTSWTComp(composite,gd,chart);
                  addMouseListenerForChart(chartPanel,dataExplorer,analysis);
                }
                subComp.setClient(composite);
                subComp.addExpansionListener(new ExpansionAdapter(){
                  @Override public void expansionStateChanged(                  ExpansionEvent e){
                    form.reflow(true);
                  }
                }
);
              }
            }
          }
        }
);
        monitor.done();
      }
    }
;
    try {
      new ProgressMonitorDialog(null).run(true,false,rwp);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}",0.98479023901053
140032,"@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=""String_Node_Str"";
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  elementIndics=this.elementToIndicators.values().iterator().next();
  if (elementIndics.isEmpty()) {
    String msg=""String_Node_Str"" + dataProvider;
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  ConnectionIndicator connectionIndicator=getConnectionIndicator();
  this.resetCounts(connectionIndicator);
  List<TdCatalog> catalogs=DataProviderHelper.getTdCatalogs(dataProvider);
  if (catalogs.isEmpty()) {
    List<TdSchema> schemata=DataProviderHelper.getTdSchema(dataProvider);
    for (    TdSchema tdSchema : schemata) {
      evalSchemaIndic(tdSchema,ok);
    }
  }
 else {
    for (    TdCatalog tdCatalog : catalogs) {
      String catName=tdCatalog.getName();
      try {
        connection.setCatalog(catName);
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + sqlStatement,e);
      }
      CatalogIndicator catalogIndic=SchemaFactory.eINSTANCE.createCatalogIndicator();
      DefinitionHandler.getInstance().setDefaultIndicatorDefinition(catalogIndic);
      this.addToConnectionIndicator(catalogIndic);
      List<TdSchema> schemas=CatalogHelper.getSchemas(tdCatalog);
      if (schemas.isEmpty()) {
        evalCatalogIndic(catalogIndic,tdCatalog,ok);
      }
 else {
        catalogIndic.setAnalyzedElement(tdCatalog);
        for (        TdSchema tdSchema : schemas) {
          SchemaIndicator schemaIndic=SchemaFactory.eINSTANCE.createSchemaIndicator();
          DefinitionHandler.getInstance().setDefaultIndicatorDefinition(schemaIndic);
          evalSchemaIndicLow(catalogIndic,schemaIndic,tdCatalog,tdSchema,ok);
        }
        catalogIndic.setSchemaCount(schemas.size());
      }
    }
  }
  if (log.isDebugEnabled()) {
    printCounts(connectionIndicator);
  }
  return ok;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=""String_Node_Str"";
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  elementIndics=this.elementToIndicators.values().iterator().next();
  if (elementIndics.isEmpty()) {
    String msg=""String_Node_Str"" + dataProvider;
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  ConnectionIndicator connectionIndicator=getConnectionIndicator();
  this.resetCounts(connectionIndicator);
  List<TdCatalog> catalogs=DataProviderHelper.getTdCatalogs(dataProvider);
  if (catalogs.isEmpty()) {
    List<TdSchema> schemata=DataProviderHelper.getTdSchema(dataProvider);
    for (    TdSchema tdSchema : schemata) {
      evalSchemaIndic(tdSchema,ok);
    }
  }
 else {
    for (    TdCatalog tdCatalog : catalogs) {
      String catName=tdCatalog.getName();
      try {
        connection.setCatalog(catName);
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + sqlStatement,e);
      }
      CatalogIndicator catalogIndic=SchemaFactory.eINSTANCE.createCatalogIndicator();
      DefinitionHandler.getInstance().setDefaultIndicatorDefinition(catalogIndic);
      List<TdSchema> schemas=CatalogHelper.getSchemas(tdCatalog);
      if (schemas.isEmpty()) {
        evalCatalogIndic(catalogIndic,tdCatalog,ok);
      }
 else {
        catalogIndic.setAnalyzedElement(tdCatalog);
        for (        TdSchema tdSchema : schemas) {
          SchemaIndicator schemaIndic=SchemaFactory.eINSTANCE.createSchemaIndicator();
          DefinitionHandler.getInstance().setDefaultIndicatorDefinition(schemaIndic);
          evalSchemaIndicLow(catalogIndic,schemaIndic,tdCatalog,tdSchema,ok);
        }
        catalogIndic.setSchemaCount(schemas.size());
      }
    }
  }
  if (log.isDebugEnabled()) {
    printCounts(connectionIndicator);
  }
  return ok;
}",0.9875942593043056
140033,"@Override public void run(){
  for (  Section section : editorBarWrap.getSections()) {
    section.setExpanded(false);
  }
}","@Override public void run(){
  Iterator<Section> it=editorBarWrap.getSections().iterator();
  Section section=null;
  while (it.hasNext()) {
    section=it.next();
    if (section == null || section.isDisposed()) {
      it.remove();
      continue;
    }
    section.setExpanded(false);
  }
  section=null;
}",0.3510392609699769
140034,"public static ProductVersion getVesion(){
  IFile versionFile=getVersionFile();
  if (versionFile.exists()) {
    Properties pros=new Properties();
    try {
      pros.load(versionFile.getContents());
      String version=pros.getProperty(VERSION);
      if (!""String_Node_Str"".equals(version)) {
        return ProductVersion.fromString(version);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return new ProductVersion(0,0,0);
}","public static ProductVersion getVesion(){
  IFile versionFile=getVersionFile();
  if (versionFile.exists()) {
    Properties pros=new Properties();
    try {
      pros.load(versionFile.getContents());
      String version=pros.getProperty(VERSION);
      if (version != null && !""String_Node_Str"".equals(version)) {
        return ProductVersion.fromString(version);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return new ProductVersion(0,0,0);
}",0.9799366420274552
140035,"public void setEnitty(ChartDataEntity entity){
  this.entity=entity;
  this.indicator=entity.getIndicator();
  this.indicatorEnum=IndicatorEnum.findIndicatorEnum(indicator.eClass());
  this.columnName=dbmsLanguage.quote(indicator.getAnalyzedElement().getName());
}","public void setEnitty(ChartDataEntity entity){
  this.entity=entity;
  this.indicator=entity.getIndicator();
  this.indicatorEnum=IndicatorEnum.findIndicatorEnum(indicator.eClass());
  this.columnName=dbmsLanguage.quote(indicator.getAnalyzedElement().getName());
  this.sqltype=((TdColumn)entity.getIndicator().getAnalyzedElement()).getJavaType();
}",0.8613376835236541
140036,"/** 
 * Method ""getMatchingRowsStatement"".
 * @return the query to get the rows with a matching value
 */
private String getMatchingRowsStatement(){
  double value=Double.valueOf(entity.getValue());
  String whereClause=dbmsLanguage.where() + this.columnName + dbmsLanguage.equal()+ value;
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  return ""String_Node_Str"" + getFullyQualifiedTableName(column) + whereClause;
}","/** 
 * Method ""getMatchingRowsStatement"".
 * @return the query to get the rows with a matching value
 */
private String getMatchingRowsStatement(){
  String whereClause=""String_Node_Str"";
  if (Java2SqlType.isDateInSQL(sqltype)) {
    Date date=new Date(entity.getValue());
    whereClause=dbmsLanguage.where() + this.columnName + dbmsLanguage.equal()+ date.toString();
  }
 else {
    double value=Double.valueOf(entity.getValue());
    whereClause=dbmsLanguage.where() + this.columnName + dbmsLanguage.equal()+ value;
  }
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  return ""String_Node_Str"" + getFullyQualifiedTableName(column) + whereClause;
}",0.7744292237442922
140037,"/** 
 * DOC zqin Comment method ""isDateValue"".
 * @param inputString
 * @return
 */
public static boolean isDateValue(String inputString){
  if (!isEmpty(inputString)) {
    try {
      DateFormat df=DateFormat.getDateInstance();
      df.parse(inputString);
      return true;
    }
 catch (    Exception e) {
      return false;
    }
  }
  return false;
}","/** 
 * DOC zqin Comment method ""isDateValue"".
 * @param inputString
 * @return
 */
public static boolean isDateValue(String inputString){
  if (!isEmpty(inputString)) {
    try {
      DateFormat df=new SimpleDateFormat(""String_Node_Str"");
      df.setLenient(false);
      df.parse(inputString);
      return true;
    }
 catch (    Exception e) {
      return false;
    }
  }
  return false;
}",0.9059602649006624
140038,"/** 
 * DOC Zqin DateTimeDialog constructor comment.
 * @param shell
 */
public DateTimeDialog(Shell shell){
  super(shell);
}","/** 
 * DOC Zqin DateTimeDialog constructor comment.
 * @param shell
 */
public DateTimeDialog(Shell shell,boolean isDatetime){
  super(shell);
  this.isDatetime=isDatetime;
}",0.8372093023255814
140039,"@Override protected Control createDialogArea(Composite parent){
  Composite top=new Composite(parent,SWT.NONE);
  top.setLayout(new FillLayout());
  timec=new DateTime(top,SWT.CALENDAR);
  return top;
}","@Override protected Control createDialogArea(Composite parent){
  Composite top=new Composite(parent,SWT.NONE);
  top.setLayout(new GridLayout(2,false));
  Label dl=new Label(top,SWT.NONE);
  dl.setText(""String_Node_Str"");
  dl.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  timed=new DateTime(top,SWT.CALENDAR);
  timed.setLayoutData(new GridData(GridData.FILL_BOTH));
  if (isDatetime) {
    Label dt=new Label(top,SWT.NONE);
    dt.setText(""String_Node_Str"");
    timet=new DateTime(top,SWT.TIME);
    timet.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  return top;
}",0.4168734491315136
140040,"@Override protected void okPressed(){
  int year=timec.getYear();
  int month=timec.getMonth();
  int day=timec.getDay();
  Calendar cenlendar=Calendar.getInstance();
  cenlendar.set(year,month,day);
  SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
  selectDate=format.format(cenlendar.getTime());
  super.okPressed();
}","@Override protected void okPressed(){
  Calendar cenlendar=Calendar.getInstance();
  SimpleDateFormat format=null;
  int year=timed.getYear();
  int month=timed.getMonth();
  int day=timed.getDay();
  if (timet != null) {
    format=new SimpleDateFormat(""String_Node_Str"");
    int hour=timet.getHours();
    int mnts=timet.getMinutes();
    int secds=timet.getSeconds();
    cenlendar.set(year,month,day,hour,mnts,secds);
  }
 else {
    format=new SimpleDateFormat(""String_Node_Str"");
    cenlendar.set(year,month,day);
  }
  selectDate=format.format(cenlendar.getTime());
  super.okPressed();
}",0.4877005347593582
140041,"@Override protected void addFields(){
  Group group=new Group(this,SWT.NONE);
  group.setLayout(new GridLayout(2,false));
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  group.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData gdText=new GridData(GridData.FILL_HORIZONTAL);
  Label lowerLabel=new Label(group,SWT.NONE);
  lowerLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  lowerText=new Text(group,SWT.BORDER);
  lowerText.setLayoutData(gdText);
  Label higherLabel=new Label(group,SWT.NONE);
  higherLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  higherText=new Text(group,SWT.BORDER);
  higherText.setLayoutData(gdText);
  if (!isOptionForRowCount && !isRangeForDate) {
    Group pGroup=new Group(this,SWT.NONE);
    pGroup.setLayout(new GridLayout(2,false));
    pGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    pGroup.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    Label pLower=new Label(pGroup,SWT.NONE);
    pLower.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    pLowerText=new Text(pGroup,SWT.BORDER);
    pLowerText.setLayoutData(gdText);
    Label pHigher=new Label(pGroup,SWT.NONE);
    pHigher.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    pHigherText=new Text(pGroup,SWT.BORDER);
    pHigherText.setLayoutData(gdText);
    setPercentUIEnable();
  }
}","@Override protected void addFields(){
  int colsForLayout=2;
  if (isRangeForDate) {
    colsForLayout=4;
  }
  Group group=new Group(this,SWT.NONE);
  group.setLayout(new GridLayout(colsForLayout,false));
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  group.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData gdText=new GridData(GridData.FILL_HORIZONTAL);
  Label lowerLabel=new Label(group,SWT.NONE);
  lowerLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  lowerText=new Text(group,SWT.BORDER);
  lowerText.setLayoutData(gdText);
  if (isRangeForDate) {
    lowerBTN=new Button(group,SWT.PUSH);
    lowerBTN.setText(""String_Node_Str"");
    lowerDelBTN=new Button(group,SWT.PUSH);
    lowerDelBTN.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    lowerText.setEditable(false);
    lowerText.setEnabled(false);
  }
  Label higherLabel=new Label(group,SWT.NONE);
  higherLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  higherText=new Text(group,SWT.BORDER);
  higherText.setLayoutData(gdText);
  if (isRangeForDate) {
    higherBTN=new Button(group,SWT.PUSH);
    higherBTN.setText(""String_Node_Str"");
    higherDelBTN=new Button(group,SWT.PUSH);
    higherDelBTN.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    higherText.setEditable(false);
    higherText.setEnabled(false);
  }
  if (!isOptionForRowCount && !isRangeForDate) {
    Group pGroup=new Group(this,SWT.NONE);
    pGroup.setLayout(new GridLayout(2,false));
    pGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    pGroup.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    Label pLower=new Label(pGroup,SWT.NONE);
    pLower.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    pLowerText=new Text(pGroup,SWT.BORDER);
    pLowerText.setLayoutData(gdText);
    Label pHigher=new Label(pGroup,SWT.NONE);
    pHigher.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    pHigherText=new Text(pGroup,SWT.BORDER);
    pHigherText.setLayoutData(gdText);
    setPercentUIEnable();
  }
}",0.8067855089131685
140042,"public IndicatorThresholdsForm(Composite parent,int style,IndicatorParameters parameters){
  super(parent,style,parameters);
  Indicator currentIndicator=(Indicator)parameters.eContainer();
  int sqltype=((TdColumn)currentIndicator.getAnalyzedElement()).getJavaType();
  IndicatorEnum currentIndicatorType=IndicatorEnum.findIndicatorEnum(currentIndicator.eClass());
  isRangeForDate=Java2SqlType.isDateInSQL(sqltype) && currentIndicatorType.isAChildOf(IndicatorEnum.RangeIndicatorEnum);
  isOptionForRowCount=currentIndicatorType == IndicatorEnum.RowCountIndicatorEnum;
  setupForm();
}","public IndicatorThresholdsForm(Composite parent,int style,IndicatorParameters parameters){
  super(parent,style,parameters);
  Indicator currentIndicator=(Indicator)parameters.eContainer();
  int sqltype=((TdColumn)currentIndicator.getAnalyzedElement()).getJavaType();
  IndicatorEnum currentIndicatorType=IndicatorEnum.findIndicatorEnum(currentIndicator.eClass());
  isRangeForDate=Java2SqlType.isDateInSQL(sqltype) && currentIndicatorType.isAChildOf(IndicatorEnum.RangeIndicatorEnum);
  if (isRangeForDate) {
    isDatetime=Java2SqlType.isDateTimeSQL(sqltype);
  }
  isOptionForRowCount=currentIndicatorType == IndicatorEnum.RowCountIndicatorEnum;
  setupForm();
}",0.9361022364217252
140043,"@Override protected void addUtilsButtonListeners(){
  if (isRangeForDate) {
    lowerText.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        DateTimeDialog dialog=new DateTimeDialog(null);
        if (Window.OK == dialog.open()) {
          lowerText.setText(dialog.getSelectDate());
        }
      }
    }
);
    higherText.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        DateTimeDialog dialog=new DateTimeDialog(null);
        if (Window.OK == dialog.open()) {
          higherText.setText(dialog.getSelectDate());
        }
      }
    }
);
  }
}","@Override protected void addUtilsButtonListeners(){
  if (isRangeForDate) {
    lowerBTN.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        DateTimeDialog dialog=new DateTimeDialog(null,isDatetime);
        if (Window.OK == dialog.open()) {
          lowerText.setText(dialog.getSelectDate());
        }
      }
    }
);
    higherBTN.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        DateTimeDialog dialog=new DateTimeDialog(null,isDatetime);
        if (Window.OK == dialog.open()) {
          higherText.setText(dialog.getSelectDate());
        }
      }
    }
);
    lowerDelBTN.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        lowerText.setText(""String_Node_Str"");
      }
    }
);
    higherDelBTN.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        higherText.setText(""String_Node_Str"");
      }
    }
);
  }
}",0.5255972696245734
140044,"/** 
 * DOC rli Comment method ""createTempConnectionFile"".
 * @throws ReloadCompareException
 */
protected void createTempConnectionFile() throws ReloadCompareException {
  IFile tempConnectionFile=DQStructureComparer.getTempRefreshFile();
  TypedReturnCode<TdDataProvider> returnProvider=getRefreshedDataProvider(oldDataProvider);
  if (!returnProvider.isOk()) {
    throw new ReloadCompareException(returnProvider.getMessage());
  }
  tempReloadProvider=returnProvider.getObject();
  DqRepositoryViewService.saveDataProviderResource(tempReloadProvider,(IFolder)tempConnectionFile.getParent(),tempConnectionFile);
}","/** 
 * DOC rli Comment method ""createTempConnectionFile"".
 * @throws ReloadCompareException
 */
protected void createTempConnectionFile() throws ReloadCompareException {
  IFile tempConnectionFile=DQStructureComparer.getTempRefreshFile();
  TypedReturnCode<TdDataProvider> returnProvider=getRefreshedDataProvider(oldDataProvider);
  if (!returnProvider.isOk()) {
    throw new ReloadCompareException(returnProvider.getMessage());
  }
  tempReloadProvider=returnProvider.getObject();
  tempReloadProvider.setComponent(oldDataProvider.getComponent());
  DqRepositoryViewService.saveDataProviderResource(tempReloadProvider,(IFolder)tempConnectionFile.getParent(),tempConnectionFile);
  tempReloadProvider.setComponent(null);
}",0.9194029850746268
140045,"public static IComparisonLevel creatComparisonLevel(Object selectedObject){
  IComparisonLevel comparisonLevel=null;
  if (selectedObject instanceof AbstractDatabaseFolderNode) {
    AbstractDatabaseFolderNode dbFolderNode=(AbstractDatabaseFolderNode)selectedObject;
    EObject parentEObject=dbFolderNode.getParent();
    EObject childEObject=(EObject)dbFolderNode.getChildren()[0];
    Package ctatlogSwtich=SwitchHelpers.PACKAGE_SWITCH.doSwitch(parentEObject);
    if (ctatlogSwtich != null) {
      comparisonLevel=new CatalogSchemaComparisonLevel(ctatlogSwtich,childEObject);
    }
    ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(parentEObject);
    if (columnSet != null) {
      comparisonLevel=new TableViewComparisonLevel(columnSet);
    }
  }
 else   if (selectedObject instanceof IFile) {
    comparisonLevel=new DataProviderComparisonLevel(selectedObject);
  }
 else {
    comparisonLevel=null;
  }
  return comparisonLevel;
}","public static IComparisonLevel creatComparisonLevel(Object selectedObject){
  IComparisonLevel comparisonLevel=null;
  if (selectedObject instanceof AbstractDatabaseFolderNode) {
    AbstractDatabaseFolderNode dbFolderNode=(AbstractDatabaseFolderNode)selectedObject;
    EObject parentEObject=dbFolderNode.getParent();
    int folderNodeType=dbFolderNode.getFolderNodeType();
    Package ctatlogSwtich=SwitchHelpers.PACKAGE_SWITCH.doSwitch(parentEObject);
    if (ctatlogSwtich != null) {
      comparisonLevel=new CatalogSchemaComparisonLevel(ctatlogSwtich,folderNodeType);
    }
    ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(parentEObject);
    if (columnSet != null) {
      comparisonLevel=new TableViewComparisonLevel(columnSet);
    }
  }
 else   if (selectedObject instanceof IFile) {
    comparisonLevel=new DataProviderComparisonLevel(selectedObject);
  }
 else {
    comparisonLevel=null;
  }
  return comparisonLevel;
}",0.9453781512605042
140046,"public CatalogSchemaComparisonLevel(EObject parentObj,EObject childObj){
  this(parentObj);
  if (childObj != null) {
    if (SwitchHelpers.TABLE_SWITCH.doSwitch(childObj) != null) {
      isCompareTabel=true;
    }
    if (SwitchHelpers.VIEW_SWITCH.doSwitch(childObj) != null) {
      isCompareView=true;
    }
  }
}","public CatalogSchemaComparisonLevel(EObject parentObj,int folderType){
  this(parentObj);
  if (folderType == IFolderNode.TABLEFOLDER_NODE_TYPE) {
    isCompareTabel=true;
  }
  if (folderType == IFolderNode.VIEWFOLDER_NODE_TYPE) {
    isCompareView=true;
  }
}",0.3044982698961938
140047,"@Override public void createPartControl(Composite parent){
  Composite comp=new Composite(parent,SWT.NONE);
  comp.setLayout(new FillLayout());
  ScrolledComposite scomp=new ScrolledComposite(comp,SWT.H_SCROLL | SWT.V_SCROLL);
  scomp.setLayout(new FillLayout());
  Composite composite=new Composite(scomp,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  scomp.setExpandHorizontal(true);
  scomp.setExpandVertical(true);
  scomp.setMinWidth(400);
  scomp.setMinHeight(300);
  scomp.setContent(composite);
  gContainer=new Group(composite,SWT.NONE);
  gContainer.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridLayout layout=new GridLayout(2,false);
  GridData data=new GridData(GridData.FILL_BOTH);
  gContainer.setLayout(layout);
  gContainer.setLayoutData(data);
  if (switchFlag) {
    tContainer=new Group(composite,SWT.NONE);
    tContainer.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tContainer.setLayout(new GridLayout(2,false));
    tContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
    createExtDefault();
  }
  createDefault();
  getSite().getWorkbenchWindow().getSelectionService().addSelectionListener(this);
}","@Override public void createPartControl(Composite parent){
  Composite comp=new Composite(parent,SWT.NONE);
  comp.setLayout(new FillLayout());
  ScrolledComposite scomp=new ScrolledComposite(comp,SWT.H_SCROLL | SWT.V_SCROLL);
  scomp.setLayout(new FillLayout());
  Composite composite=new Composite(scomp,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  scomp.setExpandHorizontal(true);
  scomp.setExpandVertical(true);
  scomp.setMinWidth(400);
  scomp.setMinHeight(350);
  scomp.setContent(composite);
  gContainer=new Group(composite,SWT.NONE);
  gContainer.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridLayout layout=new GridLayout(2,false);
  GridData data=new GridData(GridData.FILL_BOTH);
  gContainer.setLayout(layout);
  gContainer.setLayoutData(data);
  if (switchFlag) {
    tContainer=new Group(composite,SWT.NONE);
    tContainer.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tContainer.setLayout(new GridLayout(2,false));
    tContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
    createExtDefault();
  }
  createDefault();
  getSite().getWorkbenchWindow().getSelectionService().addSelectionListener(this);
  initializeToolBar();
}",0.9899638699317544
140048,"/** 
 * Method ""createConnection"".
 * @param url the database url
 * @param driverClassName the Driver classname
 * @param props properties passed to the driver manager for getting the connection (normally at least a ""user"" and""password"" property should be included)
 * @return the connection
 * @throws SQLException
 * @throws InstantiationException
 * @throws IllegalAccessException
 * @throws ClassNotFoundException
 * @throws IOException
 */
public static Connection createConnection(String url,String driverClassName,Properties props) throws SQLException, InstantiationException, IllegalAccessException, ClassNotFoundException {
  Driver driver=getClassDriver(driverClassName);
  if (driver != null) {
    DriverManager.registerDriver(driver);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + driverClassName);
      log.debug(""String_Node_Str"");
      Enumeration<Driver> drivers=DriverManager.getDrivers();
      while (drivers.hasMoreElements()) {
        log.debug(drivers.nextElement());
      }
    }
    Connection connection=null;
    if (driverClassName.equals(""String_Node_Str"")) {
      connection=DriverManager.getConnection(url,props);
    }
 else     if (driverClassName.equals(""String_Node_Str"")) {
      connection=DriverManager.getConnection(url);
    }
 else {
      connection=driver.connect(url,props);
    }
    return connection;
  }
  return null;
}","/** 
 * Method ""createConnection"".
 * @param url the database url
 * @param driverClassName the Driver classname
 * @param props properties passed to the driver manager for getting the connection (normally at least a ""user"" and""password"" property should be included)
 * @return the connection
 * @throws SQLException
 * @throws InstantiationException
 * @throws IllegalAccessException
 * @throws ClassNotFoundException
 * @throws IOException
 */
public static Connection createConnection(String url,String driverClassName,Properties props) throws SQLException, InstantiationException, IllegalAccessException, ClassNotFoundException {
  Driver driver=getClassDriver(driverClassName);
  if (driver != null) {
    DriverManager.registerDriver(driver);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + driverClassName);
      log.debug(""String_Node_Str"");
      Enumeration<Driver> drivers=DriverManager.getDrivers();
      while (drivers.hasMoreElements()) {
        log.debug(drivers.nextElement());
      }
    }
    Connection connection=null;
    if (driverClassName.equals(""String_Node_Str"")) {
      connection=DriverManager.getConnection(url,props);
    }
 else {
      connection=driver.connect(url,props);
    }
    return connection;
  }
  return null;
}",0.9020926756352764
140049,"public void createControl(Composite parent){
  connectionParam=(DBConnectionParameter)getParameter();
  setPageComplete(false);
  Composite comp=new Composite(parent,SWT.NULL);
  comp.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout();
  comp.setLayout(layout);
  layout.numColumns=2;
  layout.verticalSpacing=9;
  GridData data=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  data.horizontalSpan=1;
  Composite tempComp=new Composite(comp,SWT.NULL);
  tempComp.setLayoutData(data);
  GridLayout tempLayout=new GridLayout();
  tempComp.setLayout(tempLayout);
  tempLayout.numColumns=2;
  Label label=new Label(tempComp,SWT.NULL);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  final Text username=new Text(tempComp,SWT.BORDER | SWT.SINGLE);
  GridData fullHorizontal=new GridData(GridData.FILL_HORIZONTAL);
  username.setLayoutData(fullHorizontal);
  username.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      String userId=((Text)event.getSource()).getText();
      setUserid(userId);
      updateButtonState();
    }
  }
);
  label=new Label(tempComp,SWT.NULL);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  final Text passwordText=new Text(tempComp,SWT.BORDER | SWT.SINGLE);
  passwordText.setEchoChar('*');
  fullHorizontal=new GridData(GridData.FILL_HORIZONTAL);
  passwordText.setLayoutData(fullHorizontal);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      String passwordStr=((Text)event.getSource()).getText();
      setPassword(passwordStr);
      updateButtonState();
    }
  }
);
  label=new Label(tempComp,SWT.NULL);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  final Combo dbTypeCombo=new Combo(tempComp,SWT.READ_ONLY);
  dbTypeCombo.setItems(SupportDBUrlStore.getInstance().getDBTypes());
  dbTypeCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  dbTypeCombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (dbTypeCombo.getText().trim().equals(""String_Node_Str"")) {
        updateStatus(IStatus.WARNING,UIMessages.MSG_SELECT_GENERIC_JDBC);
      }
      if (dbTypeCombo.getText().trim().equals(""String_Node_Str"")) {
        username.setEnabled(false);
        passwordText.setEnabled(false);
      }
      String selectedItem=((Combo)e.getSource()).getText();
      setDBType(selectedItem);
      dbTypeSwitchFlag=true;
      rebuildJDBCControls(SupportDBUrlStore.getInstance().getDBUrlType(selectedItem));
    }
  }
);
  String defalutItem=SupportDBUrlType.MYSQLDEFAULTURL.getDBKey();
  dbTypeCombo.setText(defalutItem);
  setDBType(defalutItem);
  lastTimeDBType=SupportDBUrlStore.getInstance().getDBUrlType(dbTypeCombo.getText());
  checkButton=new Button(comp,SWT.NULL);
  GridData buttonData=new GridData(SWT.CENTER,SWT.CENTER,true,true);
  buttonData.heightHint=25;
  buttonData.widthHint=100;
  checkButton.setLayoutData(buttonData);
  checkButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  checkButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  checkButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ReturnCode code=checkDBConnection();
      if (code.isOk()) {
        MessageDialog.openInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else {
        MessageDialog.openInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"") + code.getMessage());
      }
    }
  }
);
  this.container=comp;
  setControl(comp);
  rebuildJDBCControls(SupportDBUrlType.MYSQLDEFAULTURL);
  String tempUserid=connectionParam.getParameters().getProperty(PluginConstant.USER_PROPERTY);
  if (tempUserid != null) {
    userid=tempUserid;
    username.setText(userid);
  }
  String tempPassword=connectionParam.getParameters().getProperty(org.talend.dq.PluginConstant.PASSWORD_PROPERTY);
  if (tempPassword != null) {
    password=tempPassword;
    passwordText.setText(password);
  }
  String tempURL=connectionParam.getJdbcUrl();
  if (tempURL != null) {
    connectionURL=tempURL;
  }
 else {
  }
}","public void createControl(Composite parent){
  connectionParam=(DBConnectionParameter)getParameter();
  setPageComplete(false);
  Composite comp=new Composite(parent,SWT.NULL);
  comp.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout();
  comp.setLayout(layout);
  layout.numColumns=2;
  layout.verticalSpacing=9;
  GridData data=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  data.horizontalSpan=1;
  Composite tempComp=new Composite(comp,SWT.NULL);
  tempComp.setLayoutData(data);
  GridLayout tempLayout=new GridLayout();
  tempComp.setLayout(tempLayout);
  tempLayout.numColumns=2;
  Label label=new Label(tempComp,SWT.NULL);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  final Text username=new Text(tempComp,SWT.BORDER | SWT.SINGLE);
  GridData fullHorizontal=new GridData(GridData.FILL_HORIZONTAL);
  username.setLayoutData(fullHorizontal);
  username.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      String userId=((Text)event.getSource()).getText();
      setUserid(userId);
      updateButtonState();
    }
  }
);
  label=new Label(tempComp,SWT.NULL);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  final Text passwordText=new Text(tempComp,SWT.BORDER | SWT.SINGLE);
  passwordText.setEchoChar('*');
  fullHorizontal=new GridData(GridData.FILL_HORIZONTAL);
  passwordText.setLayoutData(fullHorizontal);
  passwordText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      String passwordStr=((Text)event.getSource()).getText();
      setPassword(passwordStr);
      updateButtonState();
    }
  }
);
  label=new Label(tempComp,SWT.NULL);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  final Combo dbTypeCombo=new Combo(tempComp,SWT.READ_ONLY);
  dbTypeCombo.setItems(SupportDBUrlStore.getInstance().getDBTypes());
  dbTypeCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  dbTypeCombo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (dbTypeCombo.getText().trim().equals(""String_Node_Str"")) {
        updateStatus(IStatus.WARNING,UIMessages.MSG_SELECT_GENERIC_JDBC);
      }
      if (dbTypeCombo.getText().trim().equals(""String_Node_Str"")) {
        username.setEnabled(false);
        passwordText.setEnabled(false);
      }
 else {
        username.setEnabled(true);
        passwordText.setEnabled(true);
      }
      String selectedItem=((Combo)e.getSource()).getText();
      setDBType(selectedItem);
      dbTypeSwitchFlag=true;
      rebuildJDBCControls(SupportDBUrlStore.getInstance().getDBUrlType(selectedItem));
    }
  }
);
  String defalutItem=SupportDBUrlType.MYSQLDEFAULTURL.getDBKey();
  dbTypeCombo.setText(defalutItem);
  setDBType(defalutItem);
  lastTimeDBType=SupportDBUrlStore.getInstance().getDBUrlType(dbTypeCombo.getText());
  checkButton=new Button(comp,SWT.NULL);
  GridData buttonData=new GridData(SWT.CENTER,SWT.CENTER,true,true);
  buttonData.heightHint=25;
  buttonData.widthHint=100;
  checkButton.setLayoutData(buttonData);
  checkButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  checkButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  checkButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ReturnCode code=checkDBConnection();
      if (code.isOk()) {
        MessageDialog.openInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else {
        MessageDialog.openInformation(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"") + code.getMessage());
      }
    }
  }
);
  this.container=comp;
  setControl(comp);
  rebuildJDBCControls(SupportDBUrlType.MYSQLDEFAULTURL);
  String tempUserid=connectionParam.getParameters().getProperty(PluginConstant.USER_PROPERTY);
  if (tempUserid != null) {
    userid=tempUserid;
    username.setText(userid);
  }
  String tempPassword=connectionParam.getParameters().getProperty(org.talend.dq.PluginConstant.PASSWORD_PROPERTY);
  if (tempPassword != null) {
    password=tempPassword;
    passwordText.setText(password);
  }
  String tempURL=connectionParam.getJdbcUrl();
  if (tempURL != null) {
    connectionURL=tempURL;
  }
 else {
  }
}",0.9898051653828728
140050,"public void widgetSelected(SelectionEvent event){
  FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
  String filename=dialog.open();
  if (filename != null) {
    fileText.setText(filename);
  }
 else {
    fileText.setText(""String_Node_Str"");
  }
  String url=SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str"");
  String validURL=getValidURL(url);
  setConnectionURL(validURL);
  urlText.setText(getConnectionURL());
}","public void widgetSelected(SelectionEvent event){
  FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
  String filename=dialog.open();
  if (filename != null) {
    fileText.setText(filename);
  }
 else {
    fileText.setText(""String_Node_Str"");
  }
  String url=SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str"");
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"" + url);
  }
  setConnectionURL(url);
  urlText.setText(getConnectionURL());
}",0.8078641644325291
140051,"protected void createPart(Composite parent,String dbLiteral,final DBConnectionParameter connectionParam){
  if (dbLiteral.trim().equals(""String_Node_Str"")) {
    GridLayout layout=new GridLayout();
    layout.numColumns=3;
    parent.setLayout(layout);
    Label labelJar=new Label(parent,SWT.NONE);
    labelJar.setText(""String_Node_Str"");
    final Text jarText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    jarText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    jarText.setEditable(false);
    jarText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setDriverPath(jarText.getText());
      }
    }
);
    final Button selectJar=new Button(parent,SWT.PUSH);
    final StringBuilder filenameAll=new StringBuilder();
    selectJar.setText(""String_Node_Str"");
    selectJar.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
        String filename=dialog.open();
        if (filename != null) {
          filenameAll.append(filename + ""String_Node_Str"");
          jarText.setText(filenameAll.toString());
        }
 else {
          jarText.setText(""String_Node_Str"");
        }
      }
    }
);
    Label labelDriver=new Label(parent,SWT.NONE);
    labelDriver.setText(""String_Node_Str"");
    final Combo comboDriver=new Combo(parent,SWT.READ_ONLY);
    comboDriver.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    comboDriver.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        connectionParam.setDriverClassName(comboDriver.getText());
      }
    }
);
    Button listDriverBtn=new Button(parent,SWT.PUSH);
    listDriverBtn.setText(""String_Node_Str"");
    listDriverBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        comboDriver.removeAll();
        for (        String stringToFile : jarText.getText().trim().split(""String_Node_Str"")) {
          File file=new File(stringToFile);
          if (file != null) {
            try {
              MyURLClassLoader cl=new MyURLClassLoader(file.toURL());
              Class[] classes=cl.getAssignableClasses(Driver.class);
              for (int i=0; i < classes.length; ++i) {
                comboDriver.add(classes[i].getName());
              }
            }
 catch (            MalformedURLException ex) {
              ex.printStackTrace();
            }
catch (            IOException ex) {
              ex.printStackTrace();
            }
          }
        }
        if (comboDriver.getItemCount() > 0) {
          comboDriver.setText(comboDriver.getItem(0));
        }
      }
    }
);
    Label labelUrl=new Label(parent,SWT.NONE);
    labelUrl.setText(""String_Node_Str"");
    final Text urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setJdbcUrl(urlText.getText());
      }
    }
);
  }
 else   if (dbLiteral.trim().equals(""String_Node_Str"")) {
    GridLayout layout=new GridLayout();
    layout.numColumns=3;
    parent.setLayout(layout);
    Label labelfile=new Label(parent,SWT.NONE);
    final Text fileText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    final Button selectFile=new Button(parent,SWT.PUSH);
    Label labelUrl=new Label(parent,SWT.NONE);
    final Text urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    labelfile.setText(""String_Node_Str"");
    fileText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    fileText.setEditable(false);
    fileText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setFilePath(fileText.getText());
      }
    }
);
    selectFile.setText(""String_Node_Str"");
    labelUrl.setText(""String_Node_Str"");
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str""));
    urlText.setText(getConnectionURL());
    urlText.setEditable(false);
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    selectFile.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
        String filename=dialog.open();
        if (filename != null) {
          fileText.setText(filename);
        }
 else {
          fileText.setText(""String_Node_Str"");
        }
        String url=SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str"");
        String validURL=getValidURL(url);
        setConnectionURL(validURL);
        urlText.setText(getConnectionURL());
      }
      private String getValidURL(      String url){
        if (url.indexOf(""String_Node_Str"") != 0) {
          url=url.replace(""String_Node_Str"",""String_Node_Str"");
        }
        return url;
      }
    }
);
  }
 else {
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    parent.setLayout(layout);
    boolean compositeEnable=!(dbType.getHostName() == null);
    Label label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text hostNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    hostNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      hostNameText.setText(dbType.getHostName());
    }
    label.setEnabled(compositeEnable);
    hostNameText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getPort() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text portText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    portText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      portText.setText(dbType.getPort());
    }
    label.setEnabled(compositeEnable);
    portText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getDBName() == null);
    label=new Label(parent,SWT.NONE);
    if (dbType == SupportDBUrlType.ORACLEWITHSIDDEFAULTURL) {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else     if (dbType == SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL) {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else {
      label.setText(""String_Node_Str"");
    }
    final Text databaseNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    databaseNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      databaseNameText.setText(dbType.getDBName());
    }
    label.setEnabled(compositeEnable);
    databaseNameText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getParamSeprator() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(""String_Node_Str"");
    final Text parameterText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    parameterText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (dbType.getParamSeprator() != null) {
      parameterText.setText(org.talend.dq.PluginConstant.DEFAULT_PARAMETERS);
    }
 else {
      parameterText.setText(PluginConstant.EMPTY_STRING);
    }
    parameterText.setEnabled(compositeEnable);
    label.setEnabled(compositeEnable);
    parameterText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getDataSource() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text dataSourceText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    dataSourceText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      dataSourceText.setText(dbType.getDataSource());
    }
    label.setEnabled(compositeEnable);
    dataSourceText.setEnabled(compositeEnable);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    urlText.setText(getConnectionURL());
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    dataSourceText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
    hostNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
    portText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
    portText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        Long portValue=null;
        try {
          portValue=new Long(portText.getText());
        }
 catch (        NumberFormatException e1) {
        }
        if (portValue == null || portValue <= 0) {
          portText.setText(PluginConstant.EMPTY_STRING);
        }
      }
    }
);
    databaseNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
        SupportDBUrlStore.getInstance().changeAllDBNmae(databaseNameText.getText());
      }
    }
);
    parameterText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
  }
}","protected void createPart(Composite parent,String dbLiteral,final DBConnectionParameter connectionParam){
  if (dbLiteral.trim().equals(""String_Node_Str"")) {
    GridLayout layout=new GridLayout();
    layout.numColumns=3;
    parent.setLayout(layout);
    Label labelJar=new Label(parent,SWT.NONE);
    labelJar.setText(""String_Node_Str"");
    final Text jarText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    jarText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    jarText.setEditable(false);
    jarText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setDriverPath(jarText.getText());
      }
    }
);
    final Button selectJar=new Button(parent,SWT.PUSH);
    final StringBuilder filenameAll=new StringBuilder();
    selectJar.setText(""String_Node_Str"");
    selectJar.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
        String filename=dialog.open();
        if (filename != null) {
          filenameAll.append(filename + ""String_Node_Str"");
          jarText.setText(filenameAll.toString());
        }
 else {
          jarText.setText(""String_Node_Str"");
        }
      }
    }
);
    Label labelDriver=new Label(parent,SWT.NONE);
    labelDriver.setText(""String_Node_Str"");
    final Combo comboDriver=new Combo(parent,SWT.READ_ONLY);
    comboDriver.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    comboDriver.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        connectionParam.setDriverClassName(comboDriver.getText());
      }
    }
);
    Button listDriverBtn=new Button(parent,SWT.PUSH);
    listDriverBtn.setText(""String_Node_Str"");
    listDriverBtn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        comboDriver.removeAll();
        for (        String stringToFile : jarText.getText().trim().split(""String_Node_Str"")) {
          File file=new File(stringToFile);
          if (file != null) {
            try {
              MyURLClassLoader cl=new MyURLClassLoader(file.toURL());
              Class[] classes=cl.getAssignableClasses(Driver.class);
              for (int i=0; i < classes.length; ++i) {
                comboDriver.add(classes[i].getName());
              }
            }
 catch (            MalformedURLException ex) {
              ex.printStackTrace();
            }
catch (            IOException ex) {
              ex.printStackTrace();
            }
          }
        }
        if (comboDriver.getItemCount() > 0) {
          comboDriver.setText(comboDriver.getItem(0));
        }
      }
    }
);
    Label labelUrl=new Label(parent,SWT.NONE);
    labelUrl.setText(""String_Node_Str"");
    final Text urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setJdbcUrl(urlText.getText());
      }
    }
);
  }
 else   if (dbLiteral.trim().equals(""String_Node_Str"")) {
    GridLayout layout=new GridLayout();
    layout.numColumns=3;
    parent.setLayout(layout);
    Label labelfile=new Label(parent,SWT.NONE);
    final Text fileText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    final Button selectFile=new Button(parent,SWT.PUSH);
    Label labelUrl=new Label(parent,SWT.NONE);
    final Text urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    labelfile.setText(""String_Node_Str"");
    fileText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    fileText.setEditable(false);
    fileText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        connectionParam.setFilePath(fileText.getText());
      }
    }
);
    selectFile.setText(""String_Node_Str"");
    labelUrl.setText(""String_Node_Str"");
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str""));
    urlText.setText(getConnectionURL());
    urlText.setEditable(false);
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    selectFile.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent event){
        FileDialog dialog=new FileDialog(Display.getCurrent().getActiveShell());
        String filename=dialog.open();
        if (filename != null) {
          fileText.setText(filename);
        }
 else {
          fileText.setText(""String_Node_Str"");
        }
        String url=SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),""String_Node_Str"",""String_Node_Str"",fileText.getText(),""String_Node_Str"",""String_Node_Str"");
        if (log.isInfoEnabled()) {
          log.info(""String_Node_Str"" + url);
        }
        setConnectionURL(url);
        urlText.setText(getConnectionURL());
      }
    }
);
  }
 else {
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    parent.setLayout(layout);
    boolean compositeEnable=!(dbType.getHostName() == null);
    Label label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text hostNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    hostNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      hostNameText.setText(dbType.getHostName());
    }
    label.setEnabled(compositeEnable);
    hostNameText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getPort() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text portText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    portText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      portText.setText(dbType.getPort());
    }
    label.setEnabled(compositeEnable);
    portText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getDBName() == null);
    label=new Label(parent,SWT.NONE);
    if (dbType == SupportDBUrlType.ORACLEWITHSIDDEFAULTURL) {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else     if (dbType == SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL) {
      label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else {
      label.setText(""String_Node_Str"");
    }
    final Text databaseNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    databaseNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      databaseNameText.setText(dbType.getDBName());
    }
    label.setEnabled(compositeEnable);
    databaseNameText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getParamSeprator() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(""String_Node_Str"");
    final Text parameterText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    parameterText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (dbType.getParamSeprator() != null) {
      parameterText.setText(org.talend.dq.PluginConstant.DEFAULT_PARAMETERS);
    }
 else {
      parameterText.setText(PluginConstant.EMPTY_STRING);
    }
    parameterText.setEnabled(compositeEnable);
    label.setEnabled(compositeEnable);
    parameterText.setEnabled(compositeEnable);
    compositeEnable=!(dbType.getDataSource() == null);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    final Text dataSourceText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    dataSourceText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (compositeEnable) {
      dataSourceText.setText(dbType.getDataSource());
    }
    label.setEnabled(compositeEnable);
    dataSourceText.setEnabled(compositeEnable);
    label=new Label(parent,SWT.NONE);
    label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
    urlText.setEditable(false);
    urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    urlText.addFocusListener(new FocusAdapter(){
      public void focusGained(      FocusEvent e){
        urlText.setEditable(true);
      }
      public void focusLost(      FocusEvent e){
        urlText.setEditable(false);
      }
    }
);
    urlText.setText(getConnectionURL());
    urlText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        setConnectionURL(urlText.getText());
      }
    }
);
    dataSourceText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
    hostNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
    portText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
    portText.addKeyListener(new KeyAdapter(){
      public void keyReleased(      KeyEvent e){
        Long portValue=null;
        try {
          portValue=new Long(portText.getText());
        }
 catch (        NumberFormatException e1) {
        }
        if (portValue == null || portValue <= 0) {
          portText.setText(PluginConstant.EMPTY_STRING);
        }
      }
    }
);
    databaseNameText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent event){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
        SupportDBUrlStore.getInstance().changeAllDBNmae(databaseNameText.getText());
      }
    }
);
    parameterText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
        urlText.setText(getConnectionURL());
      }
    }
);
  }
}",0.9801381692573402
140052,"private boolean isContainNumber(){
  TdColumn column=(TdColumn)selection.getFirstElement();
  return Java2SqlType.isNumbericInSQL(column.getJavaType());
}","private boolean isContainNumber(){
  if (!selection.isEmpty()) {
    Iterator it=selection.iterator();
    while (it.hasNext()) {
      TdColumn column=(TdColumn)it.next();
      if (Java2SqlType.isNumbericInSQL(column.getJavaType())) {
        return true;
      }
    }
  }
  return false;
}",0.5055928411633109
140053,"/** 
 * @param parentShell
 */
public IndicatorSelectDialog(Shell parentShell,String title,ColumnIndicator[] columnIndicators){
  super(parentShell);
  this.title=title;
  this.columnIndicators=columnIndicators;
  this.setShellStyle(SWT.MAX | SWT.RESIZE);
}","/** 
 * @param parentShell
 */
public IndicatorSelectDialog(Shell parentShell,String title,ColumnIndicator[] columnIndicators){
  super(parentShell);
  this.title=title;
  this.columnIndicators=columnIndicators;
  int shellStyle=getShellStyle();
  setShellStyle(shellStyle | SWT.MAX | SWT.RESIZE);
}",0.8561151079136691
140054,"protected TypedReturnCode<TdDataProvider> getRefreshedDataProvider(TdDataProvider oldDataProvider){
  TypedReturnCode<TdProviderConnection> tdProviderConnection=DataProviderHelper.getTdProviderConnection(oldDataProvider);
  String urlString=tdProviderConnection.getObject().getConnectionString();
  String driverClassName=tdProviderConnection.getObject().getDriverClassName();
  Properties properties=new Properties();
  properties.setProperty(PluginConstant.USER_PROPERTY,TaggedValueHelper.getValue(PluginConstant.USER_PROPERTY,tdProviderConnection.getObject()));
  properties.setProperty(org.talend.dq.PluginConstant.PASSWORD_PROPERTY,TaggedValueHelper.getValue(org.talend.dq.PluginConstant.PASSWORD_PROPERTY,tdProviderConnection.getObject()));
  DBConnectionParameter connectionParameters=new DBConnectionParameter();
  connectionParameters.setName(oldDataProvider.getName());
  connectionParameters.setAuthor(TaggedValueHelper.getAuthor(oldDataProvider));
  connectionParameters.setDescription(TaggedValueHelper.getDescription(oldDataProvider));
  connectionParameters.setPurpose(TaggedValueHelper.getPurpose(oldDataProvider));
  connectionParameters.setStatus(TaggedValueHelper.getDevStatus(oldDataProvider).getLiteral());
  connectionParameters.setJdbcUrl(urlString);
  connectionParameters.setDriverClassName(driverClassName);
  connectionParameters.setParameters(properties);
  TypedReturnCode<TdDataProvider> returnProvider=ConnectionService.createConnection(connectionParameters);
  return returnProvider;
}","protected TypedReturnCode<TdDataProvider> getRefreshedDataProvider(TdDataProvider oldDataProvider){
  TypedReturnCode<TdProviderConnection> tdProviderConnection=DataProviderHelper.getTdProviderConnection(oldDataProvider);
  String urlString=tdProviderConnection.getObject().getConnectionString();
  String driverClassName=tdProviderConnection.getObject().getDriverClassName();
  Properties properties=new Properties();
  properties.setProperty(PluginConstant.USER_PROPERTY,TaggedValueHelper.getValue(PluginConstant.USER_PROPERTY,tdProviderConnection.getObject()));
  properties.setProperty(org.talend.dq.PluginConstant.PASSWORD_PROPERTY,DataProviderHelper.getClearTextPassword(oldDataProvider));
  DBConnectionParameter connectionParameters=new DBConnectionParameter();
  connectionParameters.setName(oldDataProvider.getName());
  connectionParameters.setAuthor(TaggedValueHelper.getAuthor(oldDataProvider));
  connectionParameters.setDescription(TaggedValueHelper.getDescription(oldDataProvider));
  connectionParameters.setPurpose(TaggedValueHelper.getPurpose(oldDataProvider));
  connectionParameters.setStatus(TaggedValueHelper.getDevStatus(oldDataProvider).getLiteral());
  connectionParameters.setJdbcUrl(urlString);
  connectionParameters.setDriverClassName(driverClassName);
  connectionParameters.setParameters(properties);
  TypedReturnCode<TdDataProvider> returnProvider=ConnectionService.createConnection(connectionParameters);
  return returnProvider;
}",0.4968152866242038
140055,"/** 
 * DOC scorreia Comment method ""getWhereInvalidClause"".
 * @param value
 * @param whereClause
 * @param domain
 * @return
 */
private String getWhereInvalidClause(double value,Domain domain){
  double max=Double.valueOf(DomainHelper.getMaxValue(domain.getRanges().get(0)));
  double min=Double.valueOf(DomainHelper.getMinValue(domain.getRanges().get(0)));
  String whereClause=(value < min || value > max) ? columnName + dbmsLanguage.less() + min+ dbmsLanguage.or()+ columnName+ dbmsLanguage.greater()+ max : null;
  return whereClause;
}","/** 
 * DOC scorreia Comment method ""getWhereInvalidClause"".
 * @param value
 * @param whereClause
 * @param domain
 * @return
 */
private String getWhereInvalidClause(double value,Domain domain){
  final String maxValue=DomainHelper.getMaxValue(domain.getRanges().get(0));
  final String minValue=DomainHelper.getMinValue(domain.getRanges().get(0));
  String whereClause=null;
  boolean hasLowerThreshold=!StringUtils.isEmpty(minValue);
  boolean hasHigherThreshold=!StringUtils.isEmpty(maxValue);
  if (hasLowerThreshold && hasHigherThreshold) {
    whereClause=columnName + dbmsLanguage.less() + minValue+ dbmsLanguage.or()+ columnName+ dbmsLanguage.greater()+ maxValue;
  }
 else   if (hasLowerThreshold) {
    whereClause=columnName + dbmsLanguage.less() + minValue;
  }
 else   if (hasHigherThreshold) {
    whereClause=columnName + dbmsLanguage.greater() + maxValue;
  }
  return whereClause;
}",0.4390581717451524
140056,"public void checkPerformed(AbstractForm source){
  if (source.isStatusOnError()) {
    DynamicIndicatorOptionsPage.this.setPageComplete(false);
    setErrorMessage(source.getStatus());
  }
 else {
    DynamicIndicatorOptionsPage.this.setPageComplete(true);
    setErrorMessage(null);
    setMessage(source.getStatus(),source.getStatusLevel());
  }
}","public void checkPerformed(AbstractForm source){
  if (source.isStatusOnError()) {
    setPageComplete(false);
    setErrorMessage(source.getStatus());
  }
 else {
    setPageComplete(true);
    setErrorMessage(null);
    setMessage(source.getStatus(),source.getStatusLevel());
  }
}",0.3860759493670886
140057,"/** 
 * DOC zqin DynamicIndicatorOptionsPage constructor comment.
 * @param pageName
 */
public DynamicIndicatorOptionsPage(IndicatorUnit indicatorUnit){
  super(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.indicatorUnit=indicatorUnit;
  setPageComplete(false);
  setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.listener=new AbstractForm.ICheckListener(){
    public void checkPerformed(    AbstractForm source){
      if (source.isStatusOnError()) {
        DynamicIndicatorOptionsPage.this.setPageComplete(false);
        setErrorMessage(source.getStatus());
      }
 else {
        DynamicIndicatorOptionsPage.this.setPageComplete(true);
        setErrorMessage(null);
        setMessage(source.getStatus(),source.getStatusLevel());
      }
    }
  }
;
}","/** 
 * DOC zqin DynamicIndicatorOptionsPage constructor comment.
 * @param pageName
 */
public DynamicIndicatorOptionsPage(IndicatorUnit indicatorUnit){
  super(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.indicatorUnit=indicatorUnit;
  setPageComplete(false);
  setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.listener=new AbstractForm.ICheckListener(){
    public void checkPerformed(    AbstractForm source){
      if (source.isStatusOnError()) {
        setPageComplete(false);
        setErrorMessage(source.getStatus());
      }
 else {
        setPageComplete(true);
        setErrorMessage(null);
        setMessage(source.getStatus(),source.getStatusLevel());
      }
    }
  }
;
}",0.7646341463414634
140058,"@Override protected void addFieldsListeners(){
  minValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=minValue.getText();
      if (min == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isRealNumberValue(min)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  maxValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String max=maxValue.getText();
      if (max == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isRealNumberValue(max)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  numbOfBins.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String numb=numbOfBins.getText();
      if (numb == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isNumberValue(numb)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  isSetRange.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      int numb=numbOfBins.getText().equals(""String_Node_Str"") ? 0 : Integer.parseInt(numbOfBins.getText());
      boolean flag=((Button)e.getSource()).getSelection();
      if (flag && numb > 0) {
        addSlice.setEnabled(true);
        delSlice.setEnabled(true);
        minValue.setEnabled(false);
        maxValue.setEnabled(false);
        numbOfBins.setEnabled(false);
        double min=Double.parseDouble(minValue.getText());
        double max=Double.parseDouble(maxValue.getText());
        Domain customerDomin=DomainHelper.createContiguousClosedBinsIntoDomain(""String_Node_Str"",numb,min,max);
        tableViewer.setInput(customerDomin.getRanges());
      }
 else {
        addSlice.setEnabled(false);
        delSlice.setEnabled(false);
        minValue.setEnabled(true);
        maxValue.setEnabled(true);
        numbOfBins.setEnabled(true);
        tableViewer.setInput(""String_Node_Str"");
      }
    }
  }
);
  addSlice.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      if (tableViewer.getInput() instanceof List) {
        List<RangeRestriction> inputList=(List<RangeRestriction>)tableViewer.getInput();
        RangeRestriction newRange=DomainHelper.createRealRangeRestriction(0,0);
        inputList.add(newRange);
        tableViewer.setInput(inputList);
      }
    }
  }
);
  delSlice.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      boolean flag=!tableViewer.getSelection().isEmpty();
      if (flag) {
        IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
        RangeRestriction range=(RangeRestriction)selection.getFirstElement();
        if (tableViewer.getInput() instanceof List) {
          List<RangeRestriction> inputList=(List<RangeRestriction>)tableViewer.getInput();
          inputList.remove(range);
          tableViewer.setInput(inputList);
        }
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  minValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String mintxt=minValue.getText();
      String maxtxt=maxValue.getText();
      if (mintxt == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isRealNumberValue(mintxt)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
      }
 else       if (!maxtxt.equals(""String_Node_Str"") && CheckValueUtils.isAoverB(mintxt,maxtxt)) {
        updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
      }
 else {
        min=Double.parseDouble(mintxt);
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  maxValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String mintxt=minValue.getText();
      String maxtxt=maxValue.getText();
      if (maxtxt == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isRealNumberValue(maxtxt)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
      }
 else       if (!mintxt.equals(""String_Node_Str"") && CheckValueUtils.isAoverB(mintxt,maxtxt)) {
        updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
      }
 else {
        max=Double.parseDouble(maxtxt);
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  numbOfBins.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String numbtxt=numbOfBins.getText();
      if (numbtxt == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isNumberValue(numbtxt)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else {
        numb=Integer.parseInt(numbtxt);
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  isSetRange.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean flag=((Button)e.getSource()).getSelection();
      if (flag && numb > 0) {
        addSlice.setEnabled(true);
        delSlice.setEnabled(true);
        minValue.setEnabled(false);
        maxValue.setEnabled(false);
        numbOfBins.setEnabled(false);
        Domain customerDomin=DomainHelper.createContiguousClosedBinsIntoDomain(""String_Node_Str"",numb,min,max);
        tableViewer.setInput(customerDomin.getRanges());
      }
 else {
        addSlice.setEnabled(false);
        delSlice.setEnabled(false);
        minValue.setEnabled(true);
        maxValue.setEnabled(true);
        numbOfBins.setEnabled(true);
        tableViewer.setInput(""String_Node_Str"");
      }
    }
  }
);
  addSlice.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      if (tableViewer.getInput() instanceof List) {
        List<RangeRestriction> inputList=(List<RangeRestriction>)tableViewer.getInput();
        RangeRestriction newRange=DomainHelper.createRealRangeRestriction(0,0);
        inputList.add(newRange);
        tableViewer.setInput(inputList);
      }
    }
  }
);
  delSlice.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      boolean flag=!tableViewer.getSelection().isEmpty();
      if (flag) {
        IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
        RangeRestriction range=(RangeRestriction)selection.getFirstElement();
        if (tableViewer.getInput() instanceof List) {
          List<RangeRestriction> inputList=(List<RangeRestriction>)tableViewer.getInput();
          inputList.remove(range);
          tableViewer.setInput(inputList);
        }
      }
    }
  }
);
}",0.7353783231083845
140059,"public void modifyText(ModifyEvent e){
  String numb=numbOfBins.getText();
  if (numb == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
  }
 else   if (!CheckValueUtils.isNumberValue(numb)) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
  }
 else {
    updateStatus(IStatus.OK,MSG_OK);
  }
}","public void modifyText(ModifyEvent e){
  String numbtxt=numbOfBins.getText();
  if (numbtxt == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
  }
 else   if (!CheckValueUtils.isNumberValue(numbtxt)) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
  }
 else {
    numb=Integer.parseInt(numbtxt);
    updateStatus(IStatus.OK,MSG_OK);
  }
}",0.9327354260089686
140060,"@SuppressWarnings(""String_Node_Str"") @Override public boolean performFinish(){
  Object inputList=tableViewer.getInput();
  Domain userDomain=DomainHelper.createDomain(""String_Node_Str"");
  if (inputList != null && (inputList instanceof List)) {
    List<RangeRestriction> eInputList=(List<RangeRestriction>)inputList;
    userDomain.getRanges().addAll(eInputList);
    parameters.setBins(userDomain);
    return true;
  }
 else {
    parameters.setBins(null);
    return false;
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean performFinish(){
  Object inputList=tableViewer.getInput();
  Domain userDomain=DomainHelper.createDomain(""String_Node_Str"");
  if (inputList != null && (inputList instanceof List)) {
    List<RangeRestriction> eInputList=(List<RangeRestriction>)inputList;
    userDomain.getRanges().addAll(eInputList);
    parameters.setBins(userDomain);
    return true;
  }
 else   if (min != 0 && max != 0 && numb != 0 && min < max) {
    Domain domain=DomainHelper.createContiguousClosedBinsIntoDomain(""String_Node_Str"",numb,min,max);
    parameters.setBins(domain);
    return true;
  }
 else {
    parameters.setBins(null);
    return false;
  }
}",0.7956081081081081
140061,"@Override protected void addFieldsListeners(){
  minValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String mintxt=minValue.getText();
      String maxtxt=maxValue.getText();
      if (mintxt == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isRealNumberValue(mintxt)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
      }
 else       if (!maxtxt.equals(""String_Node_Str"") && CheckValueUtils.isAoverB(mintxt,maxtxt)) {
        updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
      }
 else {
        min=Double.parseDouble(mintxt);
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  maxValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String mintxt=minValue.getText();
      String maxtxt=maxValue.getText();
      if (maxtxt == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isRealNumberValue(maxtxt)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
      }
 else       if (!mintxt.equals(""String_Node_Str"") && CheckValueUtils.isAoverB(mintxt,maxtxt)) {
        updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
      }
 else {
        max=Double.parseDouble(maxtxt);
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  numbOfBins.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String numbtxt=numbOfBins.getText();
      if (numbtxt == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isNumberValue(numbtxt)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else {
        numb=Integer.parseInt(numbtxt);
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  isSetRange.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean flag=((Button)e.getSource()).getSelection();
      if (flag && numb > 0) {
        addSlice.setEnabled(true);
        delSlice.setEnabled(true);
        minValue.setEnabled(false);
        maxValue.setEnabled(false);
        numbOfBins.setEnabled(false);
        Domain customerDomin=DomainHelper.createContiguousClosedBinsIntoDomain(""String_Node_Str"",numb,min,max);
        tableViewer.setInput(customerDomin.getRanges());
      }
 else {
        addSlice.setEnabled(false);
        delSlice.setEnabled(false);
        minValue.setEnabled(true);
        maxValue.setEnabled(true);
        numbOfBins.setEnabled(true);
        tableViewer.setInput(""String_Node_Str"");
      }
    }
  }
);
  addSlice.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      if (tableViewer.getInput() instanceof List) {
        List<RangeRestriction> inputList=(List<RangeRestriction>)tableViewer.getInput();
        RangeRestriction newRange=DomainHelper.createRealRangeRestriction(0,0);
        inputList.add(newRange);
        tableViewer.setInput(inputList);
      }
    }
  }
);
  delSlice.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      boolean flag=!tableViewer.getSelection().isEmpty();
      if (flag) {
        IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
        RangeRestriction range=(RangeRestriction)selection.getFirstElement();
        if (tableViewer.getInput() instanceof List) {
          List<RangeRestriction> inputList=(List<RangeRestriction>)tableViewer.getInput();
          inputList.remove(range);
          tableViewer.setInput(inputList);
        }
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  minValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String mintxt=minValue.getText();
      String maxtxt=maxValue.getText();
      if (mintxt == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isRealNumberValue(mintxt)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
      }
 else       if (!maxtxt.equals(""String_Node_Str"") && CheckValueUtils.isAoverB(mintxt,maxtxt)) {
        updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  maxValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String mintxt=minValue.getText();
      String maxtxt=maxValue.getText();
      if (maxtxt == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isRealNumberValue(maxtxt)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
      }
 else       if (!mintxt.equals(""String_Node_Str"") && CheckValueUtils.isAoverB(mintxt,maxtxt)) {
        updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  numbOfBins.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String numbtxt=numbOfBins.getText();
      if (numbtxt == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isNumberValue(numbtxt)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  isSetRange.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean flag=((Button)e.getSource()).getSelection();
      boolean validSelect=!CheckValueUtils.isEmpty(numbOfBins.getText(),minValue.getText(),maxValue.getText());
      if (flag && validSelect) {
        addSlice.setEnabled(true);
        delSlice.setEnabled(true);
        minValue.setEnabled(false);
        maxValue.setEnabled(false);
        numbOfBins.setEnabled(false);
        int numb=Integer.parseInt(numbOfBins.getText());
        double min=Double.parseDouble(minValue.getText());
        double max=Double.parseDouble(maxValue.getText());
        Domain customerDomin=DomainHelper.createContiguousClosedBinsIntoDomain(""String_Node_Str"",numb,min,max);
        tableViewer.setInput(customerDomin.getRanges());
      }
 else {
        addSlice.setEnabled(false);
        delSlice.setEnabled(false);
        minValue.setEnabled(true);
        maxValue.setEnabled(true);
        numbOfBins.setEnabled(true);
        tableViewer.setInput(""String_Node_Str"");
      }
    }
  }
);
  addSlice.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      if (tableViewer.getInput() instanceof List) {
        List<RangeRestriction> inputList=(List<RangeRestriction>)tableViewer.getInput();
        RangeRestriction newRange=DomainHelper.createRealRangeRestriction(0,0);
        inputList.add(newRange);
        tableViewer.setInput(inputList);
      }
    }
  }
);
  delSlice.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      boolean flag=!tableViewer.getSelection().isEmpty();
      if (flag) {
        IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
        RangeRestriction range=(RangeRestriction)selection.getFirstElement();
        if (tableViewer.getInput() instanceof List) {
          List<RangeRestriction> inputList=(List<RangeRestriction>)tableViewer.getInput();
          inputList.remove(range);
          tableViewer.setInput(inputList);
        }
      }
    }
  }
);
}",0.828113063407181
140062,"public void modifyText(ModifyEvent e){
  String numbtxt=numbOfBins.getText();
  if (numbtxt == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
  }
 else   if (!CheckValueUtils.isNumberValue(numbtxt)) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
  }
 else {
    numb=Integer.parseInt(numbtxt);
    updateStatus(IStatus.OK,MSG_OK);
  }
}","public void modifyText(ModifyEvent e){
  String numbtxt=numbOfBins.getText();
  if (numbtxt == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
  }
 else   if (!CheckValueUtils.isNumberValue(numbtxt)) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
  }
 else {
    updateStatus(IStatus.OK,MSG_OK);
  }
}",0.9469026548672568
140063,"@SuppressWarnings(""String_Node_Str"") @Override public boolean performFinish(){
  Object inputList=tableViewer.getInput();
  Domain userDomain=DomainHelper.createDomain(""String_Node_Str"");
  if (inputList != null && (inputList instanceof List)) {
    List<RangeRestriction> eInputList=(List<RangeRestriction>)inputList;
    userDomain.getRanges().addAll(eInputList);
    parameters.setBins(userDomain);
    return true;
  }
 else   if (min != 0 && max != 0 && numb != 0 && min < max) {
    Domain domain=DomainHelper.createContiguousClosedBinsIntoDomain(""String_Node_Str"",numb,min,max);
    parameters.setBins(domain);
    return true;
  }
 else {
    parameters.setBins(null);
    return false;
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean performFinish(){
  if (minValue.getText().equals(""String_Node_Str"") || maxValue.getText().equals(""String_Node_Str"") || numbOfBins.getText().equals(""String_Node_Str"")) {
    parameters.setBins(null);
  }
 else {
    double min=Double.parseDouble(minValue.getText());
    double max=Double.parseDouble(maxValue.getText());
    int numb=Integer.parseInt(numbOfBins.getText());
    Object inputList=tableViewer.getInput();
    Domain domain=DomainHelper.createDomain(""String_Node_Str"");
    if (inputList != null && (inputList instanceof List)) {
      List<RangeRestriction> eInputList=(List<RangeRestriction>)inputList;
      domain.getRanges().addAll(eInputList);
      parameters.setBins(domain);
    }
 else {
      domain=DomainHelper.createContiguousClosedBinsIntoDomain(""String_Node_Str"",numb,min,max);
      parameters.setBins(domain);
    }
  }
  return true;
}",0.585635359116022
140064,"@Override protected void addFieldsListeners(){
  lowerText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=lowerText.getText();
      if (!CheckValueUtils.isNumberWithNegativeValue(min)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  higherText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String max=higherText.getText();
      if (!CheckValueUtils.isNumberWithNegativeValue(max)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  lowerText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=lowerText.getText();
      String max=higherText.getText();
      if (!min.equals(""String_Node_Str"") && !CheckValueUtils.isNumberWithNegativeValue(min)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else       if (CheckValueUtils.isAoverB(min,max)) {
        updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  higherText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String max=higherText.getText();
      String min=lowerText.getText();
      if (!max.equals(""String_Node_Str"") && !CheckValueUtils.isNumberWithNegativeValue(max)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else       if (CheckValueUtils.isAoverB(min,max)) {
        updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
}",0.7767416346681295
140065,"public void modifyText(ModifyEvent e){
  String max=higherText.getText();
  if (!CheckValueUtils.isNumberWithNegativeValue(max)) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
  }
 else {
    updateStatus(IStatus.OK,MSG_OK);
  }
}","public void modifyText(ModifyEvent e){
  String max=higherText.getText();
  String min=lowerText.getText();
  if (!max.equals(""String_Node_Str"") && !CheckValueUtils.isNumberWithNegativeValue(max)) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
  }
 else   if (CheckValueUtils.isAoverB(min,max)) {
    updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
  }
 else {
    updateStatus(IStatus.OK,MSG_OK);
  }
}",0.7145038167938931
140066,"@Override protected boolean checkFieldsValue(){
  String min=lowerText.getText();
  String max=higherText.getText();
  if (CheckValueUtils.isAoverB(min,max)) {
    updateStatus(IStatus.ERROR,LOWER_LESS_HIGHER);
  }
 else {
    updateStatus(IStatus.OK,MSG_OK);
    return true;
  }
  return false;
}","@Override protected boolean checkFieldsValue(){
  return false;
}",0.3581267217630854
140067,"@Override public boolean performFinish(){
  if (!checkFieldsValue()) {
    return false;
  }
  String min=lowerText.getText();
  String max=higherText.getText();
  if (""String_Node_Str"".equals(min) && ""String_Node_Str"".equals(max)) {
    parameters.setDataValidDomain(null);
  }
 else {
    IndicatorHelper.setDataThreshold(parameters,min,max);
    Indicator indicator=(Indicator)parameters.eContainer();
    IndicatorHelper.propagateDataThresholdsInChildren(indicator);
  }
  return true;
}","@Override public boolean performFinish(){
  String min=lowerText.getText();
  String max=higherText.getText();
  if (""String_Node_Str"".equals(min) && ""String_Node_Str"".equals(max)) {
    parameters.setDataValidDomain(null);
  }
 else {
    IndicatorHelper.setDataThreshold(parameters,min,max);
    Indicator indicator=(Indicator)parameters.eContainer();
    IndicatorHelper.propagateDataThresholdsInChildren(indicator);
  }
  return true;
}",0.945220193340494
140068,"/** 
 * DOC Zqin Comment method ""runInDQViewer"". this method open DQ responsitory view and run the specified query.
 * @param tdDataProvider
 * @param query
 */
public void runInDQViewer(TdDataProvider tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  SQLExplorerPlugin sqlexplorer=SQLExplorerPlugin.getDefault();
  Collection<Alias> aliases=sqlexplorer.getAliasManager().getAliases();
  TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  TdProviderConnection providerConnection=tdPc.getObject();
  String url=providerConnection.getConnectionString();
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + editorName + ""String_Node_Str"");
      input.setUser(alias.getDefaultUser());
      try {
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        ExecSQLAction execSQLAction=new ExecSQLAction(editorPart);
        execSQLAction.run();
        break;
      }
 catch (      PartInitException e) {
        ExceptionHandler.process(e);
      }
    }
  }
}","/** 
 * DOC Zqin Comment method ""runInDQViewer"". this method open DQ responsitory view and run the specified query.
 * @param tdDataProvider
 * @param query
 */
public void runInDQViewer(TdDataProvider tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  TdProviderConnection providerConnection=tdPc.getObject();
  String url=providerConnection.getConnectionString();
  SQLExplorerPlugin sqlexplorer=SQLExplorerPlugin.getDefault();
  Collection<Alias> aliases=sqlexplorer.getAliasManager().getAliases();
  if (aliases.isEmpty()) {
    new ChangePerspectiveAction(PluginConstant.SE_ID).run();
  }
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + editorName + ""String_Node_Str"");
      input.setUser(alias.getDefaultUser());
      try {
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        ExecSQLAction execSQLAction=new ExecSQLAction(editorPart);
        execSQLAction.run();
        break;
      }
 catch (      PartInitException e) {
        ExceptionHandler.process(e);
      }
    }
  }
}",0.8756830601092896
140069,"public DuplicateCWMResourceAction(IFile[] files){
  super(""String_Node_Str"");
  this.files=files;
}","public DuplicateCWMResourceAction(IFile[] files){
  super(""String_Node_Str"");
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.EDIT_COPY));
  this.files=files;
}",0.7360594795539034
140070,"public void createControl(Composite parent){
  Composite comp=new Composite(parent,SWT.NONE);
  comp.setLayout(new GridLayout());
  comp.setLayoutData(new GridData(GridData.FILL_BOTH));
  AbstractIndicatorForm.setParameters(parameters);
  FreqTimeSliceForm timeSliceForm=new FreqTimeSliceForm(comp,SWT.NONE);
  timeSliceForm.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  timeSliceForm.setListener(listener);
  setControl(comp);
}","public void createControl(Composite parent){
  Composite comp=new Composite(parent,SWT.NONE);
  comp.setLayout(new GridLayout());
  comp.setLayoutData(new GridData(GridData.FILL_BOTH));
  FreqTimeSliceForm timeSliceForm=new FreqTimeSliceForm(comp,SWT.NONE,parameters);
  timeSliceForm.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  timeSliceForm.setListener(listener);
  setControl(comp);
}",0.9261904761904762
140071,"public AbstractIndicatorForm[] createForm(Composite parent,ICheckListener listener,FormEnum[] formTypes){
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
    indicatorUnit.getIndicator().setParameters(parameters);
  }
  AbstractIndicatorForm.setParameters(parameters);
  AbstractIndicatorForm.setSqltype(indicatorUnit.getParentColumn().getTdColumn().getJavaType());
  AbstractIndicatorForm[] froms=new AbstractIndicatorForm[formTypes.length];
  for (int i=0; i < formTypes.length; i++) {
    AbstractIndicatorForm form=IndicatorFormFactory.createForm(parent,formTypes[i]);
    form.setListener(listener);
    froms[i]=form;
  }
  return froms;
}","public AbstractIndicatorForm[] createForm(Composite parent,ICheckListener listener,FormEnum[] formTypes){
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
    indicatorUnit.getIndicator().setParameters(parameters);
  }
  AbstractIndicatorForm[] froms=new AbstractIndicatorForm[formTypes.length];
  for (int i=0; i < formTypes.length; i++) {
    AbstractIndicatorForm form=IndicatorFormFactory.createForm(parent,formTypes[i],parameters);
    form.setListener(listener);
    froms[i]=form;
  }
  return froms;
}",0.6501766784452296
140072,"public static AbstractIndicatorForm createForm(Composite parent,FormEnum formEnum){
  AbstractIndicatorForm form=null;
switch (formEnum) {
case BinsDesignerForm:
    form=new BinsDesignerForm(parent,SWT.NONE);
  break;
case TextLengthForm:
form=new TextLengthForm(parent,SWT.NONE);
break;
case FreqTextLengthForm:
form=new FreqTextLengthForm(parent,SWT.NONE);
break;
case TextParametersForm:
form=new TextParametersForm(parent,SWT.NONE);
break;
case DataThresholdsForm:
form=new DataThresholdsForm(parent,SWT.NONE);
break;
case TimeSlicesForm:
form=new TimeSlicesForm(parent,SWT.NONE);
break;
case FreqBinsDesignerForm:
form=new FreqBinsDesignerForm(parent,SWT.NONE);
break;
case FreqTextParametersForm:
form=new FreqTextParametersForm(parent,SWT.NONE);
break;
case FreqTimeSliceForm:
form=new FreqTimeSliceForm(parent,SWT.NONE);
break;
case IndicatorThresholdsForm:
form=new IndicatorThresholdsForm(parent,SWT.NONE);
break;
case NumbericNominalForm:
form=new NumbericNominalForm(parent,SWT.NONE);
break;
case ExpectedValueForm:
form=new ExpectedValueForm(parent,SWT.NONE);
break;
default :
}
return form;
}","public static AbstractIndicatorForm createForm(Composite parent,FormEnum formEnum,IndicatorParameters parameters){
  AbstractIndicatorForm form=null;
switch (formEnum) {
case BinsDesignerForm:
    form=new BinsDesignerForm(parent,SWT.NONE,parameters);
  break;
case TextLengthForm:
form=new TextLengthForm(parent,SWT.NONE,parameters);
break;
case FreqTextLengthForm:
form=new FreqTextLengthForm(parent,SWT.NONE,parameters);
break;
case TextParametersForm:
form=new TextParametersForm(parent,SWT.NONE,parameters);
break;
case DataThresholdsForm:
form=new DataThresholdsForm(parent,SWT.NONE,parameters);
break;
case TimeSlicesForm:
form=new TimeSlicesForm(parent,SWT.NONE,parameters);
break;
case FreqBinsDesignerForm:
form=new FreqBinsDesignerForm(parent,SWT.NONE,parameters);
break;
case FreqTextParametersForm:
form=new FreqTextParametersForm(parent,SWT.NONE,parameters);
break;
case FreqTimeSliceForm:
form=new FreqTimeSliceForm(parent,SWT.NONE,parameters);
break;
case IndicatorThresholdsForm:
form=new IndicatorThresholdsForm(parent,SWT.NONE,parameters);
break;
case NumbericNominalForm:
form=new NumbericNominalForm(parent,SWT.NONE,parameters);
break;
case ExpectedValueForm:
form=new ExpectedValueForm(parent,SWT.NONE,parameters);
break;
default :
}
return form;
}",0.931426167437947
140073,"/** 
 * DOC zqin AbstractIndicatorForm constructor comment.
 * @param parent
 * @param style
 */
public AbstractIndicatorForm(Composite parent,int style){
  super(parent,style);
}","/** 
 * DOC Administrator AbstractIndicatorForm constructor comment.
 * @param parent
 * @param style
 * @param parameters
 */
public AbstractIndicatorForm(Composite parent,int style,IndicatorParameters parameters){
  super(parent,style);
  this.parameters=parameters;
}",0.779510022271715
140074,"public BinsDesignerForm(Composite parent,int style){
  super(parent,style);
  setupForm();
}","public BinsDesignerForm(Composite parent,int style,IndicatorParameters parameters){
  super(parent,style,parameters);
  setupForm();
}",0.8141592920353983
140075,"public DataThresholdsForm(Composite parent,int style){
  super(parent,style);
  setupForm();
}","public DataThresholdsForm(Composite parent,int style,IndicatorParameters parameters){
  super(parent,style,parameters);
  setupForm();
}",0.8173913043478261
140076,"/** 
 * DOC zqin ExpectedValueForm constructor comment.
 * @param parent
 * @param style
 * @param parameter
 */
public ExpectedValueForm(Composite parent,int style){
  super(parent,style);
  setupForm();
}","/** 
 * DOC zqin ExpectedValueForm constructor comment.
 * @param parent
 * @param style
 * @param parameter
 */
public ExpectedValueForm(Composite parent,int style,IndicatorParameters parameters){
  super(parent,style,parameters);
  setupForm();
}",0.9074889867841408
140077,"@Override protected void addFields(){
  Group group=new Group(this,SWT.NONE);
  group.setLayout(new GridLayout(2,false));
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  group.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData gdText=new GridData(GridData.FILL_HORIZONTAL);
  Label lowerLabel=new Label(group,SWT.NONE);
  lowerLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  lowerText=new Text(group,SWT.BORDER);
  lowerText.setLayoutData(gdText);
  Label higherLabel=new Label(group,SWT.NONE);
  higherLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  higherText=new Text(group,SWT.BORDER);
  higherText.setLayoutData(gdText);
  if (!(parameters.eContainer() instanceof RowCountIndicator) && !Java2SqlType.isDateInSQL(sqltype)) {
    Group pGroup=new Group(this,SWT.NONE);
    pGroup.setLayout(new GridLayout(2,false));
    pGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    pGroup.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    Label pLower=new Label(pGroup,SWT.NONE);
    pLower.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    pLowerText=new Text(pGroup,SWT.BORDER);
    pLowerText.setLayoutData(gdText);
    Label pHigher=new Label(pGroup,SWT.NONE);
    pHigher.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    pHigherText=new Text(pGroup,SWT.BORDER);
    pHigherText.setLayoutData(gdText);
    setPercentUIEnable();
  }
}","@Override protected void addFields(){
  Group group=new Group(this,SWT.NONE);
  group.setLayout(new GridLayout(2,false));
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  group.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData gdText=new GridData(GridData.FILL_HORIZONTAL);
  Label lowerLabel=new Label(group,SWT.NONE);
  lowerLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  lowerText=new Text(group,SWT.BORDER);
  lowerText.setLayoutData(gdText);
  Label higherLabel=new Label(group,SWT.NONE);
  higherLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  higherText=new Text(group,SWT.BORDER);
  higherText.setLayoutData(gdText);
  if (!isOptionForRowCount && !isRangeForDate) {
    Group pGroup=new Group(this,SWT.NONE);
    pGroup.setLayout(new GridLayout(2,false));
    pGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    pGroup.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    Label pLower=new Label(pGroup,SWT.NONE);
    pLower.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    pLowerText=new Text(pGroup,SWT.BORDER);
    pLowerText.setLayoutData(gdText);
    Label pHigher=new Label(pGroup,SWT.NONE);
    pHigher.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    pHigherText=new Text(pGroup,SWT.BORDER);
    pHigherText.setLayoutData(gdText);
    setPercentUIEnable();
  }
}",0.9594689028651292
140078,"public IndicatorThresholdsForm(Composite parent,int style){
  super(parent,style);
  setupForm();
}","public IndicatorThresholdsForm(Composite parent,int style,IndicatorParameters parameters){
  super(parent,style,parameters);
  Indicator currentIndicator=(Indicator)parameters.eContainer();
  int sqltype=((TdColumn)currentIndicator.getAnalyzedElement()).getJavaType();
  IndicatorEnum currentIndicatorType=IndicatorEnum.findIndicatorEnum(currentIndicator.eClass());
  isRangeForDate=Java2SqlType.isDateInSQL(sqltype) && currentIndicatorType.isAChildOf(IndicatorEnum.RangeIndicatorEnum);
  isOptionForRowCount=currentIndicatorType == IndicatorEnum.RowCountIndicatorEnum;
  setupForm();
}",0.2598540145985401
140079,"private void setPercentUIEnable(){
  IEditorPart editor=CorePlugin.getDefault().getCurrentActiveEditor();
  ColumnMasterDetailsPage masterPage=null;
  AnalysisEditor anaEditor=null;
  if (editor != null) {
    anaEditor=(AnalysisEditor)editor;
    if (anaEditor.getMasterPage() != null) {
      masterPage=(ColumnMasterDetailsPage)anaEditor.getMasterPage();
    }
  }
  if (masterPage != null) {
    canUsed=AnalysisHelper.containsRowCount(masterPage.getAnalysisHandler().getAnalysis());
  }
  pLowerText.setEnabled(canUsed);
  pHigherText.setEnabled(canUsed);
}","private void setPercentUIEnable(){
  IEditorPart editor=CorePlugin.getDefault().getCurrentActiveEditor();
  ColumnMasterDetailsPage masterPage=null;
  AnalysisEditor anaEditor=null;
  if (editor != null) {
    anaEditor=(AnalysisEditor)editor;
    if (anaEditor.getMasterPage() != null) {
      masterPage=(ColumnMasterDetailsPage)anaEditor.getMasterPage();
    }
  }
  if (masterPage != null) {
    isContainRowCount=AnalysisHelper.containsRowCount(masterPage.getAnalysisHandler().getAnalysis());
  }
  pLowerText.setEnabled(isContainRowCount);
  pHigherText.setEnabled(isContainRowCount);
}",0.9376083188908144
140080,"@Override protected void addUtilsButtonListeners(){
  if (Java2SqlType.isDateInSQL(sqltype)) {
    lowerText.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        DateTimeDialog dialog=new DateTimeDialog(null);
        if (Window.OK == dialog.open()) {
          lowerText.setText(dialog.getSelectDate());
        }
      }
    }
);
    higherText.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        DateTimeDialog dialog=new DateTimeDialog(null);
        if (Window.OK == dialog.open()) {
          higherText.setText(dialog.getSelectDate());
        }
      }
    }
);
  }
}","@Override protected void addUtilsButtonListeners(){
  if (isRangeForDate) {
    lowerText.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        DateTimeDialog dialog=new DateTimeDialog(null);
        if (Window.OK == dialog.open()) {
          lowerText.setText(dialog.getSelectDate());
        }
      }
    }
);
    higherText.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        DateTimeDialog dialog=new DateTimeDialog(null);
        if (Window.OK == dialog.open()) {
          higherText.setText(dialog.getSelectDate());
        }
      }
    }
);
  }
}",0.9648466716529543
140081,"@Override protected void addFieldsListeners(){
  lowerText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=lowerText.getText();
      String max=higherText.getText();
      if (!CheckValueUtils.isEmpty(min)) {
        if (Java2SqlType.isDateInSQL(sqltype)) {
          if (!CheckValueUtils.isDateValue(min)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_DATE);
          }
        }
 else {
          if (!CheckValueUtils.isNumberWithNegativeValue(min)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
          }
        }
        if (!CheckValueUtils.isEmpty(max) && CheckValueUtils.isAoverB(min,max)) {
          updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
        }
 else {
          updateStatus(IStatus.OK,MSG_OK);
        }
      }
 else {
        updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
      }
    }
  }
);
  higherText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=lowerText.getText();
      String max=higherText.getText();
      if (!CheckValueUtils.isEmpty(max)) {
        if (Java2SqlType.isDateInSQL(sqltype)) {
          if (!CheckValueUtils.isDateValue(max)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_DATE);
          }
        }
 else {
          if (!CheckValueUtils.isNumberWithNegativeValue(max)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
          }
        }
        if (!CheckValueUtils.isEmpty(min) && CheckValueUtils.isAoverB(min,max)) {
          updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
        }
 else {
          updateStatus(IStatus.OK,MSG_OK);
        }
      }
 else {
        updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
      }
    }
  }
);
  if (canUsed) {
    pLowerText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String pmin=pLowerText.getText();
        String pmax=pHigherText.getText();
        if (!CheckValueUtils.isEmpty(pmin)) {
          if (!CheckValueUtils.isRealNumberValue(pmin)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
          }
 else           if (CheckValueUtils.isOutRange(MIN,MAX,pmin)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_INDICATOR_VALUE_OUT_OF_RANGE);
          }
 else           if (!CheckValueUtils.isEmpty(pmax) && CheckValueUtils.isAoverB(pmin,pmax)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
 else {
          updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
        }
      }
    }
);
    pHigherText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String pmin=pLowerText.getText();
        String pmax=pHigherText.getText();
        if (!CheckValueUtils.isEmpty(pmax)) {
          if (!CheckValueUtils.isRealNumberValue(pmax)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
          }
 else           if (CheckValueUtils.isOutRange(MIN,MAX,pmax)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_INDICATOR_VALUE_OUT_OF_RANGE);
          }
 else           if (!CheckValueUtils.isEmpty(pmin) && CheckValueUtils.isAoverB(pmin,pmax)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
 else {
          updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
        }
      }
    }
);
  }
}","@Override protected void addFieldsListeners(){
  lowerText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=lowerText.getText();
      String max=higherText.getText();
      if (!CheckValueUtils.isEmpty(min)) {
        if (isRangeForDate) {
          if (!CheckValueUtils.isDateValue(min)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_DATE);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
 else         if (!CheckValueUtils.isNumberWithNegativeValue(min)) {
          updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
        }
 else         if (!CheckValueUtils.isEmpty(max) && CheckValueUtils.isAoverB(min,max)) {
          updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
        }
 else {
          updateStatus(IStatus.OK,MSG_OK);
        }
      }
 else {
        updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
      }
    }
  }
);
  higherText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=lowerText.getText();
      String max=higherText.getText();
      if (!CheckValueUtils.isEmpty(max)) {
        if (isRangeForDate) {
          if (!CheckValueUtils.isDateValue(max)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_DATE);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
 else         if (!CheckValueUtils.isNumberWithNegativeValue(max)) {
          updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
        }
 else         if (!CheckValueUtils.isEmpty(min) && CheckValueUtils.isAoverB(min,max)) {
          updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
        }
 else {
          updateStatus(IStatus.OK,MSG_OK);
        }
      }
 else {
        updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
      }
    }
  }
);
  if (isContainRowCount) {
    pLowerText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String pmin=pLowerText.getText();
        String pmax=pHigherText.getText();
        if (!CheckValueUtils.isEmpty(pmin)) {
          if (!CheckValueUtils.isRealNumberValue(pmin)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
          }
 else           if (CheckValueUtils.isOutRange(MIN,MAX,pmin)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_INDICATOR_VALUE_OUT_OF_RANGE);
          }
 else           if (!CheckValueUtils.isEmpty(pmax) && CheckValueUtils.isAoverB(pmin,pmax)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
 else {
          updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
        }
      }
    }
);
    pHigherText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String pmin=pLowerText.getText();
        String pmax=pHigherText.getText();
        if (!CheckValueUtils.isEmpty(pmax)) {
          if (!CheckValueUtils.isRealNumberValue(pmax)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
          }
 else           if (CheckValueUtils.isOutRange(MIN,MAX,pmax)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_INDICATOR_VALUE_OUT_OF_RANGE);
          }
 else           if (!CheckValueUtils.isEmpty(pmin) && CheckValueUtils.isAoverB(pmin,pmax)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
 else {
          updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
        }
      }
    }
);
  }
}",0.9526952695269528
140082,"@Override protected void initialize(){
  String[] indicatorThreshold=IndicatorHelper.getIndicatorThreshold(parameters);
  if (indicatorThreshold != null) {
    lowerText.setText(indicatorThreshold[0]);
    higherText.setText(indicatorThreshold[1]);
  }
  String[] indicatorPersentThreshold=IndicatorHelper.getIndicatorThresholdInPercent(parameters);
  if (indicatorPersentThreshold != null && canUsed) {
    pLowerText.setText(indicatorPersentThreshold[0]);
    pHigherText.setText(indicatorPersentThreshold[1]);
  }
}","@Override protected void initialize(){
  String[] indicatorThreshold=IndicatorHelper.getIndicatorThreshold(parameters);
  if (indicatorThreshold != null) {
    lowerText.setText(indicatorThreshold[0]);
    higherText.setText(indicatorThreshold[1]);
  }
  String[] indicatorPersentThreshold=IndicatorHelper.getIndicatorThresholdInPercent(parameters);
  if (indicatorPersentThreshold != null && isContainRowCount) {
    pLowerText.setText(indicatorPersentThreshold[0]);
    pHigherText.setText(indicatorPersentThreshold[1]);
  }
}",0.977055449330784
140083,"@Override public boolean performFinish(){
  boolean isMinEmpty=CheckValueUtils.isEmpty(lowerText.getText());
  boolean isMaxEmpty=CheckValueUtils.isEmpty(higherText.getText());
  if (canUsed) {
    boolean isPerMinEmpty=CheckValueUtils.isEmpty(pLowerText.getText());
    boolean isPerMaxEmpty=CheckValueUtils.isEmpty(pHigherText.getText());
    if (isMinEmpty && isMaxEmpty && isPerMinEmpty&& isPerMaxEmpty) {
      parameters.setIndicatorValidDomain(null);
    }
 else {
      if (isMinEmpty && isMaxEmpty) {
        removeRange(VALUE_THRESHOLD);
      }
 else {
        IndicatorHelper.setIndicatorThreshold(parameters,lowerText.getText(),higherText.getText());
      }
      if (isPerMinEmpty && isPerMaxEmpty) {
        removeRange(PERCENTAGE_THRESHOLD);
      }
 else {
        IndicatorHelper.setIndicatorThresholdInPercent(parameters,pLowerText.getText(),pHigherText.getText());
      }
    }
  }
 else {
    if (isMinEmpty && isMaxEmpty) {
      parameters.setIndicatorValidDomain(null);
    }
 else {
      IndicatorHelper.setIndicatorThreshold(parameters,lowerText.getText(),higherText.getText());
    }
  }
  return true;
}","@Override public boolean performFinish(){
  boolean isMinEmpty=CheckValueUtils.isEmpty(lowerText.getText());
  boolean isMaxEmpty=CheckValueUtils.isEmpty(higherText.getText());
  if (isContainRowCount) {
    boolean isPerMinEmpty=CheckValueUtils.isEmpty(pLowerText.getText());
    boolean isPerMaxEmpty=CheckValueUtils.isEmpty(pHigherText.getText());
    if (isMinEmpty && isMaxEmpty && isPerMinEmpty&& isPerMaxEmpty) {
      parameters.setIndicatorValidDomain(null);
    }
 else {
      if (isMinEmpty && isMaxEmpty) {
        removeRange(VALUE_THRESHOLD);
      }
 else {
        IndicatorHelper.setIndicatorThreshold(parameters,lowerText.getText(),higherText.getText());
      }
      if (isPerMinEmpty && isPerMaxEmpty) {
        removeRange(PERCENTAGE_THRESHOLD);
      }
 else {
        IndicatorHelper.setIndicatorThresholdInPercent(parameters,pLowerText.getText(),pHigherText.getText());
      }
    }
  }
 else {
    if (isMinEmpty && isMaxEmpty) {
      parameters.setIndicatorValidDomain(null);
    }
 else {
      IndicatorHelper.setIndicatorThreshold(parameters,lowerText.getText(),higherText.getText());
    }
  }
  return true;
}",0.9894644424934153
140084,"/** 
 * DOC zqin NumbericNominalForm constructor comment.
 * @param parent
 * @param style
 * @param parameter
 */
public NumbericNominalForm(Composite parent,int style){
  super(parent,style);
  setupForm();
}","/** 
 * DOC zqin NumbericNominalForm constructor comment.
 * @param parent
 * @param style
 * @param parameter
 */
public NumbericNominalForm(Composite parent,int style,IndicatorParameters parameters){
  super(parent,style,parameters);
  setupForm();
}",0.9090909090909092
140085,"private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean con=false;
      if (e.item instanceof TreeItem) {
        TreeItem item=(TreeItem)e.item;
        if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
          tree.setMenu(null);
          return;
        }
 else         if (item.getData(INDICATOR_UNIT_KEY) != null) {
          IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
          IndicatorEnum type=indicatorUnit.getType();
          con=IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0;
        }
      }
      createTreeMenu(tree,con);
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
}","private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean con=false;
      if (e.item instanceof TreeItem) {
        TreeItem item=(TreeItem)e.item;
        if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
          tree.setMenu(null);
          return;
        }
 else         if (item.getData(INDICATOR_UNIT_KEY) != null) {
          IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
          IndicatorEnum type=indicatorUnit.getType();
          con=IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0;
        }
      }
      createTreeMenu(tree,con);
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      if (isDirty()) {
        masterPage.doSave(null);
      }
      TreeItem item=tree.getSelection()[0];
      if (item != null) {
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object columnobj=item.getData(COLUMN_INDICATOR_KEY);
        if (columnobj != null && indicatorobj == null) {
          openIndicatorSelectDialog(null);
        }
 else         if (columnobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(null,item);
        }
      }
    }
  }
);
}",0.8448145344436033
140086,"public void setElements(final ColumnIndicator[] elements){
  this.tree.dispose();
  this.tree=createTree(this.parentComp);
  tree.setData(VIEWER_KEY,this);
  this.columnIndicators=elements;
  addItemElements(elements);
  this.tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem item=tree.getSelection()[0];
      if (item != null) {
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object columnobj=item.getData(COLUMN_INDICATOR_KEY);
        if (columnobj != null && indicatorobj == null) {
          openIndicatorSelectDialog(null);
        }
 else         if (columnobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(null,item);
        }
      }
    }
  }
);
}","public void setElements(final ColumnIndicator[] elements){
  this.tree.dispose();
  this.tree=createTree(this.parentComp);
  tree.setData(VIEWER_KEY,this);
  this.columnIndicators=elements;
  addItemElements(elements);
}",0.4417670682730923
140087,"@Override public void mouseDoubleClick(MouseEvent e){
  TreeItem item=tree.getSelection()[0];
  if (item != null) {
    Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
    Object columnobj=item.getData(COLUMN_INDICATOR_KEY);
    if (columnobj != null && indicatorobj == null) {
      openIndicatorSelectDialog(null);
    }
 else     if (columnobj != null && indicatorobj != null) {
      openIndicatorOptionDialog(null,item);
    }
  }
}","@Override public void mouseDoubleClick(MouseEvent e){
  if (isDirty()) {
    masterPage.doSave(null);
  }
  TreeItem item=tree.getSelection()[0];
  if (item != null) {
    Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
    Object columnobj=item.getData(COLUMN_INDICATOR_KEY);
    if (columnobj != null && indicatorobj == null) {
      openIndicatorSelectDialog(null);
    }
 else     if (columnobj != null && indicatorobj != null) {
      openIndicatorOptionDialog(null,item);
    }
  }
}",0.9445628997867804
140088,"private boolean checkRange(String inString){
  String[] definedRange=getDefinedRange(inString);
  if (definedRange != null && definedRange.length >= 2) {
    range=""String_Node_Str"" + definedRange[0] + ""String_Node_Str""+ definedRange[1]+ ""String_Node_Str"";
    int sqltype=((TdColumn)indicator.getAnalyzedElement()).getJavaType();
    if (Java2SqlType.isDateInSQL(sqltype)) {
      try {
        SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
        Date min=format.parse(definedRange[0]);
        Date max=format.parse(definedRange[1]);
        Date dValue=format.parse(value);
        return dValue.after(max) || dValue.before(min);
      }
 catch (      Exception e) {
        e.printStackTrace();
        return false;
      }
    }
 else {
      Double min=StringFormatUtil.formatDouble(definedRange[0]);
      Double max=StringFormatUtil.formatDouble(definedRange[1]);
      Double dValue=inString != null ? StringFormatUtil.parseDouble(inString) : Double.NaN;
      if (min == null || Double.isNaN(min)) {
        min=Double.NEGATIVE_INFINITY;
      }
      if (max == null || Double.isNaN(max)) {
        max=Double.POSITIVE_INFINITY;
      }
      return dValue < min || dValue > max;
    }
  }
  return false;
}","private boolean checkRange(String inString){
  String[] definedRange=getDefinedRange(inString);
  if (definedRange != null && definedRange.length >= 2) {
    range=""String_Node_Str"" + definedRange[0] + ""String_Node_Str""+ definedRange[1]+ ""String_Node_Str"";
    int sqltype=((TdColumn)indicator.getAnalyzedElement()).getJavaType();
    if (Java2SqlType.isDateInSQL(sqltype) && indicator.eContainer() instanceof RangeIndicator) {
      try {
        SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
        Date dValue=format.parse(value);
        if (""String_Node_Str"".equals(definedRange[0])) {
          Date max=format.parse(definedRange[1]);
          range=""String_Node_Str"" + definedRange[1] + ""String_Node_Str"";
          return dValue.after(max);
        }
 else         if (""String_Node_Str"".equals(definedRange[1])) {
          Date min=format.parse(definedRange[0]);
          range=""String_Node_Str"" + definedRange[0] + ""String_Node_Str"";
          return dValue.before(min);
        }
 else {
          Date min=format.parse(definedRange[0]);
          Date max=format.parse(definedRange[1]);
          return dValue.after(max) || dValue.before(min);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        return false;
      }
    }
 else {
      Double min=StringFormatUtil.formatDouble(definedRange[0]);
      Double max=StringFormatUtil.formatDouble(definedRange[1]);
      Double dValue=inString != null ? StringFormatUtil.parseDouble(inString) : Double.NaN;
      if (min == null || Double.isNaN(min)) {
        min=Double.NEGATIVE_INFINITY;
      }
      if (max == null || Double.isNaN(max)) {
        max=Double.POSITIVE_INFINITY;
      }
      return dValue < min || dValue > max;
    }
  }
  return false;
}",0.8112769485903815
140089,"@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=""String_Node_Str"";
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  elementIndics=this.elementToIndicators.values().iterator().next();
  if (elementIndics.isEmpty()) {
    String msg=""String_Node_Str"" + dataProvider;
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  ConnectionIndicator connectionIndicator=getConnectionIndicator();
  this.resetCounts(connectionIndicator);
  List<TdCatalog> catalogs=DataProviderHelper.getTdCatalogs(dataProvider);
  if (catalogs.isEmpty()) {
    List<TdSchema> schemata=DataProviderHelper.getTdSchema(dataProvider);
    for (    TdSchema tdSchema : schemata) {
      evalSchemaIndic(tdSchema,ok);
    }
  }
 else {
    for (    TdCatalog tdCatalog : catalogs) {
      String catName=tdCatalog.getName();
      connection.setCatalog(catName);
      CatalogIndicator catalogIndic=SchemaFactory.eINSTANCE.createCatalogIndicator();
      this.addToConnectionIndicator(catalogIndic);
      List<TdSchema> schemas=CatalogHelper.getSchemas(tdCatalog);
      if (schemas.isEmpty()) {
        evalCatalogIndic(catalogIndic,tdCatalog,ok);
      }
 else {
        catalogIndic.setAnalyzedElement(tdCatalog);
        for (        TdSchema tdSchema : schemas) {
          SchemaIndicator schemaIndic=SchemaFactory.eINSTANCE.createSchemaIndicator();
          evalSchemaIndicLow(catalogIndic,schemaIndic,tdCatalog,tdSchema,ok);
        }
        catalogIndic.setSchemaCount(schemas.size());
      }
    }
  }
  if (log.isDebugEnabled()) {
    printCounts(connectionIndicator);
  }
  return ok;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=""String_Node_Str"";
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  elementIndics=this.elementToIndicators.values().iterator().next();
  if (elementIndics.isEmpty()) {
    String msg=""String_Node_Str"" + dataProvider;
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  ConnectionIndicator connectionIndicator=getConnectionIndicator();
  this.resetCounts(connectionIndicator);
  List<TdCatalog> catalogs=DataProviderHelper.getTdCatalogs(dataProvider);
  if (catalogs.isEmpty()) {
    List<TdSchema> schemata=DataProviderHelper.getTdSchema(dataProvider);
    for (    TdSchema tdSchema : schemata) {
      evalSchemaIndic(tdSchema,ok);
    }
  }
 else {
    for (    TdCatalog tdCatalog : catalogs) {
      String catName=tdCatalog.getName();
      try {
        connection.setCatalog(catName);
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + sqlStatement,e);
      }
      CatalogIndicator catalogIndic=SchemaFactory.eINSTANCE.createCatalogIndicator();
      this.addToConnectionIndicator(catalogIndic);
      List<TdSchema> schemas=CatalogHelper.getSchemas(tdCatalog);
      if (schemas.isEmpty()) {
        evalCatalogIndic(catalogIndic,tdCatalog,ok);
      }
 else {
        catalogIndic.setAnalyzedElement(tdCatalog);
        for (        TdSchema tdSchema : schemas) {
          SchemaIndicator schemaIndic=SchemaFactory.eINSTANCE.createSchemaIndicator();
          evalSchemaIndicLow(catalogIndic,schemaIndic,tdCatalog,tdSchema,ok);
        }
        catalogIndic.setSchemaCount(schemas.size());
      }
    }
  }
  if (log.isDebugEnabled()) {
    printCounts(connectionIndicator);
  }
  return ok;
}",0.9695499865265428
140090,"private boolean checkRange(String inString){
  Double[] definedRange=getDefinedRange(inString);
  if (definedRange != null) {
    Double min=definedRange[0];
    Double max=definedRange[1];
    Double dValue=inString != null ? StringFormatUtil.parseDouble(inString) : Double.NaN;
    if (min == null || Double.isNaN(min)) {
      min=Double.NEGATIVE_INFINITY;
    }
    if (max == null || Double.isNaN(max)) {
      max=Double.POSITIVE_INFINITY;
    }
    if (dValue < min || dValue > max) {
      if (inString.indexOf('%') > 0) {
        range=""String_Node_Str"" + StringFormatUtil.formatPersent(min / 100) + ""String_Node_Str""+ StringFormatUtil.formatPersent(max / 100)+ ""String_Node_Str"";
      }
 else {
        range=""String_Node_Str"" + min + ""String_Node_Str""+ max+ ""String_Node_Str"";
      }
      return true;
    }
  }
  return false;
}","private boolean checkRange(String inString){
  String[] definedRange=getDefinedRange(inString);
  if (definedRange != null && definedRange.length >= 2) {
    range=""String_Node_Str"" + definedRange[0] + ""String_Node_Str""+ definedRange[1]+ ""String_Node_Str"";
    int sqltype=((TdColumn)indicator.getAnalyzedElement()).getJavaType();
    if (Java2SqlType.isDateInSQL(sqltype)) {
      try {
        Date min=DateFormat.getDateInstance().parse(definedRange[0]);
        Date max=DateFormat.getDateInstance().parse(definedRange[1]);
        Date dValue=DateFormat.getDateInstance().parse(value);
        return dValue.after(max) || dValue.before(min);
      }
 catch (      Exception e) {
        e.printStackTrace();
        return false;
      }
    }
 else {
      Double min=StringFormatUtil.formatDouble(definedRange[0]);
      Double max=StringFormatUtil.formatDouble(definedRange[1]);
      Double dValue=inString != null ? StringFormatUtil.parseDouble(inString) : Double.NaN;
      if (min == null || Double.isNaN(min)) {
        min=Double.NEGATIVE_INFINITY;
      }
      if (max == null || Double.isNaN(max)) {
        max=Double.POSITIVE_INFINITY;
      }
      return dValue < min || dValue > max;
    }
  }
  return false;
}",0.3439306358381503
140091,"protected Double[] getDefinedRange(String inString){
  boolean flag=inString.indexOf('%') > 0;
  String[] threshold=IndicatorHelper.getDataThreshold(indicator);
  if (threshold == null) {
    if (flag) {
      threshold=IndicatorHelper.getIndicatorThresholdInPercent(indicator);
    }
 else {
      threshold=IndicatorHelper.getIndicatorThreshold(indicator);
    }
  }
  if (threshold != null) {
    Double[] returnDB=new Double[threshold.length];
    for (int i=0; i < threshold.length; i++) {
      returnDB[i]=StringFormatUtil.formatDouble(threshold[i]);
    }
    return returnDB;
  }
  return null;
}","protected String[] getDefinedRange(String inString){
  boolean flag=inString.indexOf('%') > 0;
  String[] threshold=IndicatorHelper.getDataThreshold(indicator);
  if (threshold == null) {
    if (flag) {
      threshold=IndicatorHelper.getIndicatorThresholdInPercent(indicator);
    }
 else {
      threshold=IndicatorHelper.getIndicatorThreshold(indicator);
    }
  }
  return threshold;
}",0.7376884422110552
140092,"public ICustomerDataset getCustomerDataset(){
  Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  sqltype=units.get(0).getParentColumn().getTdColumn().getJavaType();
  for (  IndicatorUnit unit : units) {
    if (Java2SqlType.isNumbericInSQL(sqltype)) {
      String value=unit.getValue().toString();
      map.put(unit.getType(),Double.parseDouble(value));
    }
    ChartDataEntity entity=new ChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(unit.getIndicatorName());
    entity.setValue(String.valueOf(unit.getValue()));
    customerdataset.addDataEntity(entity);
  }
  if (map.containsKey(IndicatorEnum.MaxValueIndicatorEnum) && map.containsKey(IndicatorEnum.MinValueIndicatorEnum)) {
    Double range=map.get(IndicatorEnum.MaxValueIndicatorEnum) - map.get(IndicatorEnum.MinValueIndicatorEnum);
    ChartDataEntity entity=new ChartDataEntity(null,IndicatorEnum.RangeIndicatorEnum.getLabel(),range.toString());
    customerdataset.addDataEntity(entity);
  }
  if (map.containsKey(IndicatorEnum.UpperQuartileIndicatorEnum) && map.containsKey(IndicatorEnum.LowerQuartileIndicatorEnum)) {
    Double quartile=map.get(IndicatorEnum.UpperQuartileIndicatorEnum) - map.get(IndicatorEnum.LowerQuartileIndicatorEnum);
    ChartDataEntity entity=new ChartDataEntity(null,IndicatorEnum.IQRIndicatorEnum.getLabel(),quartile.toString());
    customerdataset.addDataEntity(entity);
  }
  if (isIntact()) {
    CustomerDefaultBAWDataset dataset=new CustomerDefaultBAWDataset();
    BoxAndWhiskerItem item=ChartDatasetUtils.createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
    List zerolist=new ArrayList();
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.addDataEntity(customerdataset.getDataEntities());
    return dataset;
  }
 else {
    for (    IndicatorEnum indicatorEnum : map.keySet()) {
      customerdataset.addValue(map.get(indicatorEnum),""String_Node_Str"",indicatorEnum.getLabel());
    }
    return customerdataset;
  }
}","public ICustomerDataset getCustomerDataset(){
  Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    if (Java2SqlType.isNumbericInSQL(sqltype)) {
      String value=unit.getValue().toString();
      map.put(unit.getType(),Double.parseDouble(value));
    }
    ChartDataEntity entity=new ChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(unit.getIndicatorName());
    entity.setValue(String.valueOf(unit.getValue()));
    customerdataset.addDataEntity(entity);
  }
  if (map.containsKey(IndicatorEnum.MaxValueIndicatorEnum) && map.containsKey(IndicatorEnum.MinValueIndicatorEnum)) {
    Double range=map.get(IndicatorEnum.MaxValueIndicatorEnum) - map.get(IndicatorEnum.MinValueIndicatorEnum);
    ChartDataEntity entity=new ChartDataEntity(null,IndicatorEnum.RangeIndicatorEnum.getLabel(),range.toString());
    customerdataset.addDataEntity(entity);
  }
  if (map.containsKey(IndicatorEnum.UpperQuartileIndicatorEnum) && map.containsKey(IndicatorEnum.LowerQuartileIndicatorEnum)) {
    Double quartile=map.get(IndicatorEnum.UpperQuartileIndicatorEnum) - map.get(IndicatorEnum.LowerQuartileIndicatorEnum);
    ChartDataEntity entity=new ChartDataEntity(null,IndicatorEnum.IQRIndicatorEnum.getLabel(),quartile.toString());
    customerdataset.addDataEntity(entity);
  }
  if (isIntact()) {
    CustomerDefaultBAWDataset dataset=new CustomerDefaultBAWDataset();
    BoxAndWhiskerItem item=ChartDatasetUtils.createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
    List zerolist=new ArrayList();
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.add(zerolist,""String_Node_Str"",""String_Node_Str"");
    dataset.addDataEntity(customerdataset.getDataEntities());
    return dataset;
  }
 else {
    for (    IndicatorEnum indicatorEnum : map.keySet()) {
      customerdataset.addValue(map.get(indicatorEnum),""String_Node_Str"",indicatorEnum.getLabel());
    }
    return customerdataset;
  }
}",0.986969471332837
140093,"public SummaryStatisticsState(List<IndicatorUnit> units){
  super(units);
}","public SummaryStatisticsState(List<IndicatorUnit> units){
  super(units);
  if (units != null && !units.isEmpty()) {
    sqltype=units.get(0).getParentColumn().getTdColumn().getJavaType();
  }
}",0.5576208178438662
140094,"@Override protected void addFields(){
  Group group=new Group(this,SWT.NONE);
  group.setLayout(new GridLayout(2,false));
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  group.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData gdText=new GridData(GridData.FILL_HORIZONTAL);
  Label lowerLabel=new Label(group,SWT.NONE);
  lowerLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  lowerText=new Text(group,SWT.BORDER);
  lowerText.setLayoutData(gdText);
  Label higherLabel=new Label(group,SWT.NONE);
  higherLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  higherText=new Text(group,SWT.BORDER);
  higherText.setLayoutData(gdText);
  if (!(parameters.eContainer() instanceof RowCountIndicator)) {
    Group pGroup=new Group(this,SWT.NONE);
    pGroup.setLayout(new GridLayout(2,false));
    pGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    pGroup.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    Label pLower=new Label(pGroup,SWT.NONE);
    pLower.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    pLowerText=new Text(pGroup,SWT.BORDER);
    pLowerText.setLayoutData(gdText);
    Label pHigher=new Label(pGroup,SWT.NONE);
    pHigher.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    pHigherText=new Text(pGroup,SWT.BORDER);
    pHigherText.setLayoutData(gdText);
    setPercentUIEnable();
  }
}","@Override protected void addFields(){
  Group group=new Group(this,SWT.NONE);
  group.setLayout(new GridLayout(2,false));
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  group.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData gdText=new GridData(GridData.FILL_HORIZONTAL);
  Label lowerLabel=new Label(group,SWT.NONE);
  lowerLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  lowerText=new Text(group,SWT.BORDER);
  lowerText.setLayoutData(gdText);
  Label higherLabel=new Label(group,SWT.NONE);
  higherLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  higherText=new Text(group,SWT.BORDER);
  higherText.setLayoutData(gdText);
  if (!(parameters.eContainer() instanceof RowCountIndicator) && !Java2SqlType.isDateInSQL(sqltype)) {
    Group pGroup=new Group(this,SWT.NONE);
    pGroup.setLayout(new GridLayout(2,false));
    pGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    pGroup.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    Label pLower=new Label(pGroup,SWT.NONE);
    pLower.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    pLowerText=new Text(pGroup,SWT.BORDER);
    pLowerText.setLayoutData(gdText);
    Label pHigher=new Label(pGroup,SWT.NONE);
    pHigher.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    pHigherText=new Text(pGroup,SWT.BORDER);
    pHigherText.setLayoutData(gdText);
    setPercentUIEnable();
  }
}",0.98679638637943
140095,"/** 
 * DOC Zqin Comment method ""runInDQViewer"". this method open DQ responsitory view and run the specified query.
 * @param tdDataProvider
 * @param query
 */
public void runInDQViewer(TdDataProvider tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  SQLExplorerPlugin sqlexplorer=SQLExplorerPlugin.getDefault();
  Collection<Alias> aliases=sqlexplorer.getAliasManager().getAliases();
  TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  TdProviderConnection providerConnection=tdPc.getObject();
  String url=providerConnection.getConnectionString();
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + editorName + ""String_Node_Str"");
      input.setUser(alias.getDefaultUser());
      try {
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        ExecSQLAction execSQLAction=new ExecSQLAction(editorPart);
        execSQLAction.run();
      }
 catch (      PartInitException e) {
        ExceptionHandler.process(e);
      }
    }
  }
}","/** 
 * DOC Zqin Comment method ""runInDQViewer"". this method open DQ responsitory view and run the specified query.
 * @param tdDataProvider
 * @param query
 */
public void runInDQViewer(TdDataProvider tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  SQLExplorerPlugin sqlexplorer=SQLExplorerPlugin.getDefault();
  Collection<Alias> aliases=sqlexplorer.getAliasManager().getAliases();
  TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  TdProviderConnection providerConnection=tdPc.getObject();
  String url=providerConnection.getConnectionString();
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + editorName + ""String_Node_Str"");
      input.setUser(alias.getDefaultUser());
      try {
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        ExecSQLAction execSQLAction=new ExecSQLAction(editorPart);
        execSQLAction.run();
        break;
      }
 catch (      PartInitException e) {
        ExceptionHandler.process(e);
      }
    }
  }
}",0.9946827366182204
140096,"protected Section creatMetadataSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),true,""String_Node_Str"");
  Composite labelButtonClient=toolkit.createComposite(section);
  labelButtonClient.setLayout(new GridLayout(2,false));
  Label label=toolkit.createLabel(labelButtonClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  label.setLayoutData(new GridData());
  nameText=toolkit.createText(labelButtonClient,null,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(nameText);
  label=toolkit.createLabel(labelButtonClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  label.setLayoutData(new GridData());
  purposeText=toolkit.createText(labelButtonClient,null,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(purposeText);
  label=toolkit.createLabel(labelButtonClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  label.setLayoutData(new GridData());
  descriptionText=toolkit.createText(labelButtonClient,null,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(descriptionText);
  label=toolkit.createLabel(labelButtonClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  authorText=toolkit.createText(labelButtonClient,null,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(authorText);
  label=toolkit.createLabel(labelButtonClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  statusCombo=new CCombo(labelButtonClient,SWT.BORDER);
  statusCombo.setEditable(false);
  for (  DevelopmentStatus status : DevelopmentStatus.values()) {
    statusCombo.add(status.getLiteral());
  }
  initMetaTextFied();
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      fireTextChange();
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      fireTextChange();
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      fireTextChange();
    }
  }
);
  authorText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      fireTextChange();
    }
  }
);
  statusCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      fireTextChange();
    }
  }
);
  section.setClient(labelButtonClient);
  return section;
}","protected Section creatMetadataSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),true,""String_Node_Str"");
  Composite labelButtonClient=toolkit.createComposite(section);
  labelButtonClient.setLayout(new GridLayout(2,false));
  Label label=toolkit.createLabel(labelButtonClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  label.setLayoutData(new GridData());
  nameText=toolkit.createText(labelButtonClient,null,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(nameText);
  ((GridData)nameText.getLayoutData()).widthHint=META_FIELD_WIDTH;
  label=toolkit.createLabel(labelButtonClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  label.setLayoutData(new GridData());
  purposeText=toolkit.createText(labelButtonClient,null,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(purposeText);
  ((GridData)purposeText.getLayoutData()).widthHint=META_FIELD_WIDTH;
  label=toolkit.createLabel(labelButtonClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  label.setLayoutData(new GridData());
  descriptionText=toolkit.createText(labelButtonClient,null,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(descriptionText);
  ((GridData)descriptionText.getLayoutData()).widthHint=META_FIELD_WIDTH;
  label=toolkit.createLabel(labelButtonClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  authorText=toolkit.createText(labelButtonClient,null,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(authorText);
  ((GridData)authorText.getLayoutData()).widthHint=META_FIELD_WIDTH;
  label=toolkit.createLabel(labelButtonClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  statusCombo=new CCombo(labelButtonClient,SWT.BORDER);
  statusCombo.setEditable(false);
  for (  DevelopmentStatus status : DevelopmentStatus.values()) {
    statusCombo.add(status.getLiteral());
  }
  initMetaTextFied();
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  authorText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  statusCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  section.setClient(labelButtonClient);
  return section;
}",0.9001130795326046
140097,"public void modifyText(ModifyEvent e){
  setDirty(true);
  fireTextChange();
}","public void modifyText(ModifyEvent e){
  setDirty(true);
}",0.8529411764705882
140098,"public void modifyText(ModifyEvent e){
  setDirty(true);
  fireTextChange();
}","public void modifyText(ModifyEvent e){
  setDirty(true);
}",0.8529411764705882
140099,"/** 
 * @param form
 * @param toolkit
 * @param topComp
 */
void createInformationSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),false,DefaultMessagesImpl.getString(""String_Node_Str""));
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout(2,false));
  Label loginLabel=new Label(sectionClient,SWT.NONE);
  loginLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  loginText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(loginText);
  Label passwordLabel=new Label(sectionClient,SWT.NONE);
  passwordLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  passwordText=new Text(sectionClient,SWT.BORDER | SWT.PASSWORD);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(passwordText);
  TdProviderConnection connection=DataProviderHelper.getTdProviderConnection(tdDataProvider).getObject();
  String loginValue=TaggedValueHelper.getValue(PluginConstant.USER_PROPERTY,connection);
  loginText.setText(loginValue == null ? PluginConstant.EMPTY_STRING : loginValue);
  String passwordValue=TaggedValueHelper.getValue(org.talend.dq.PluginConstant.PASSWORD_PROPERTY,connection);
  passwordText.setText(passwordValue == null ? PluginConstant.EMPTY_STRING : passwordValue);
  Label urlLabel=new Label(sectionClient,SWT.NONE);
  urlLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  urlText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(urlText);
  TypedReturnCode<TdProviderConnection> trc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  String urlValue=(trc.isOk()) ? trc.getObject().getConnectionString() : PluginConstant.EMPTY_STRING;
  urlText.setText(urlValue == null ? PluginConstant.EMPTY_STRING : urlValue);
  urlText.setEnabled(false);
  ModifyListener listener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      fireTextChange();
    }
  }
;
  loginText.addModifyListener(listener);
  passwordText.addModifyListener(listener);
  section.setClient(sectionClient);
}","/** 
 * @param form
 * @param toolkit
 * @param topComp
 */
void createInformationSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,DefaultMessagesImpl.getString(""String_Node_Str""),false,DefaultMessagesImpl.getString(""String_Node_Str""));
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout(2,false));
  Label loginLabel=new Label(sectionClient,SWT.NONE);
  loginLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  loginText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(loginText);
  Label passwordLabel=new Label(sectionClient,SWT.NONE);
  passwordLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  passwordText=new Text(sectionClient,SWT.BORDER | SWT.PASSWORD);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(passwordText);
  TdProviderConnection connection=DataProviderHelper.getTdProviderConnection(tdDataProvider).getObject();
  String loginValue=TaggedValueHelper.getValue(PluginConstant.USER_PROPERTY,connection);
  loginText.setText(loginValue == null ? PluginConstant.EMPTY_STRING : loginValue);
  String passwordValue=TaggedValueHelper.getValue(org.talend.dq.PluginConstant.PASSWORD_PROPERTY,connection);
  passwordText.setText(passwordValue == null ? PluginConstant.EMPTY_STRING : passwordValue);
  Label urlLabel=new Label(sectionClient,SWT.NONE);
  urlLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  urlText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(urlText);
  TypedReturnCode<TdProviderConnection> trc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  String urlValue=(trc.isOk()) ? trc.getObject().getConnectionString() : PluginConstant.EMPTY_STRING;
  urlText.setText(urlValue == null ? PluginConstant.EMPTY_STRING : urlValue);
  urlText.setEnabled(false);
  ModifyListener listener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
;
  loginText.addModifyListener(listener);
  passwordText.addModifyListener(listener);
  section.setClient(sectionClient);
}",0.9945528824330458
140100,"/** 
 * DOC rli Comment method ""ceatePatternDefinitionComp"".
 * @param form
 * @param section
 */
private Composite createPatternDefinitionComp(){
  Composite newComp=toolkit.createComposite(patternDefinitionSection);
  newComp.setLayout(new GridLayout());
  componentsComp=new Composite(newComp,SWT.NONE);
  componentsComp.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(componentsComp);
  EList<PatternComponent> components=this.pattern.getComponents();
  for (int i=0; i < components.size(); i++) {
    RegularExpression regularExpress=(RegularExpression)components.get(i);
    creatNewExpressLine(regularExpress);
  }
  createAddButton(newComp);
  patternDefinitionSection.setClient(newComp);
  return newComp;
}","/** 
 * DOC rli Comment method ""ceatePatternDefinitionComp"".
 * @param form
 * @param section
 */
private Composite createPatternDefinitionComp(){
  Composite newComp=toolkit.createComposite(patternDefinitionSection);
  newComp.setLayout(new GridLayout());
  componentsComp=new Composite(newComp,SWT.NONE);
  componentsComp.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(componentsComp);
  EList<PatternComponent> components=this.pattern.getComponents();
  for (int i=0; i < components.size(); i++) {
    RegularExpression regularExpress=(RegularExpression)components.get(i);
    RegularExpressionImpl newRegularExpress=(RegularExpressionImpl)PatternFactory.eINSTANCE.createRegularExpression();
    Expression newExpression=CoreFactory.eINSTANCE.createExpression();
    newExpression.setBody(regularExpress.getExpression().getBody());
    newExpression.setLanguage(regularExpress.getExpression().getLanguage());
    newRegularExpress.setExpression(newExpression);
    tempPatternComponents.add(newRegularExpress);
    creatNewExpressLine(newRegularExpress);
  }
  createAddButton(newComp);
  patternDefinitionSection.setClient(newComp);
  return newComp;
}",0.7606196901549226
140101,"private void creatNewExpressLine(RegularExpression regularExpress){
  final Composite expressComp=new Composite(componentsComp,SWT.NONE);
  expressComp.setLayout(new GridLayout(10,false));
  final CCombo combo=new CCombo(expressComp,SWT.BORDER);
  combo.setEditable(false);
  combo.setItems(remainDBTypeList.toArray(new String[remainDBTypeList.size()]));
  final RegularExpression finalRegExpress=regularExpress;
  String language=regularExpress.getExpression().getLanguage();
  String body=regularExpress.getExpression().getBody();
  if (language == null) {
    combo.setText(remainDBTypeList.get(0));
  }
 else {
    combo.setText(PatternLanguageType.findNameByLanguage(language));
  }
  GridDataFactory.fillDefaults().span(2,1).grab(false,false).applyTo(combo);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String lang=combo.getText();
      finalRegExpress.getExpression().setLanguage(PatternLanguageType.findLanguageByName(lang));
      setDirty(true);
    }
  }
);
  final Text patternText=new Text(expressComp,SWT.BORDER);
  patternText.setText(body == null ? PluginConstant.EMPTY_STRING : body);
  GridDataFactory.fillDefaults().span(6,1).grab(true,false).applyTo(patternText);
  patternText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      finalRegExpress.getExpression().setBody(patternText.getText());
      setDirty(true);
    }
  }
);
  Button delButton=new Button(expressComp,SWT.NONE);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(delButton);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      tempPatternComponents.remove(finalRegExpress);
      expressComp.dispose();
      patternDefinitionSectionComp.layout();
      form.reflow(true);
      setDirty(true);
    }
  }
);
  if (expressionType != null && expressionType.equals(ExpressionType.REGEXP.getName())) {
    Button testPatternButton=new Button(expressComp,SWT.NONE);
    testPatternButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    testPatternButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(testPatternButton);
    testPatternButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        PatternTestView patternTestView=(PatternTestView)CorePlugin.getDefault().findView(PatternTestView.ID);
        patternTestView.setPatternExpression(PatternMasterDetailsPage.this,pattern,finalRegExpress);
      }
    }
);
  }
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(expressComp);
}","private void creatNewExpressLine(RegularExpression regularExpress){
  final Composite expressComp=new Composite(componentsComp,SWT.NONE);
  expressComp.setLayout(new GridLayout(10,false));
  final CCombo combo=new CCombo(expressComp,SWT.BORDER);
  combo.setEditable(false);
  combo.setItems(remainDBTypeList.toArray(new String[remainDBTypeList.size()]));
  final RegularExpression finalRegExpress=regularExpress;
  String language=regularExpress.getExpression().getLanguage();
  String body=regularExpress.getExpression().getBody();
  if (language == null) {
    combo.setText(remainDBTypeList.get(0));
  }
 else {
    combo.setText(PatternLanguageType.findNameByLanguage(language));
  }
  GridDataFactory.fillDefaults().span(2,1).grab(false,false).applyTo(combo);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String lang=combo.getText();
      finalRegExpress.getExpression().setLanguage(PatternLanguageType.findLanguageByName(lang));
      setDirty(true);
    }
  }
);
  final Text patternText=new Text(expressComp,SWT.BORDER);
  patternText.setText(body == null ? PluginConstant.EMPTY_STRING : body);
  GridDataFactory.fillDefaults().span(6,1).grab(true,false).applyTo(patternText);
  ((GridData)patternText.getLayoutData()).widthHint=600;
  patternText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      finalRegExpress.getExpression().setBody(patternText.getText());
      setDirty(true);
    }
  }
);
  Button delButton=new Button(expressComp,SWT.NONE);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(delButton);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      tempPatternComponents.remove(finalRegExpress);
      expressComp.dispose();
      patternDefinitionSectionComp.layout();
      form.reflow(true);
      setDirty(true);
    }
  }
);
  if (expressionType != null && expressionType.equals(ExpressionType.REGEXP.getName())) {
    Button testPatternButton=new Button(expressComp,SWT.NONE);
    testPatternButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    testPatternButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
    GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(testPatternButton);
    testPatternButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        PatternTestView patternTestView=(PatternTestView)CorePlugin.getDefault().findView(PatternTestView.ID);
        patternTestView.setPatternExpression(PatternMasterDetailsPage.this,pattern,finalRegExpress);
      }
    }
);
  }
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(expressComp);
}",0.9902813299232736
140102,"/** 
 * DOC rli Comment method ""reset"".
 */
private void reset(){
  String[] supportTypes=PatternLanguageType.getAllLanguageTypes();
  allDBTypeList=new ArrayList<String>();
  allDBTypeList.addAll(Arrays.asList(supportTypes));
  if (tempPatternComponents == null) {
    tempPatternComponents=new ArrayList<PatternComponent>();
  }
 else {
    tempPatternComponents.clear();
  }
  tempPatternComponents.addAll(pattern.getComponents());
  remainDBTypeList=new ArrayList<String>();
  remainDBTypeList.addAll(allDBTypeList);
}","/** 
 * DOC rli Comment method ""reset"".
 */
private void reset(){
  String[] supportTypes=PatternLanguageType.getAllLanguageTypes();
  allDBTypeList=new ArrayList<String>();
  allDBTypeList.addAll(Arrays.asList(supportTypes));
  if (tempPatternComponents == null) {
    tempPatternComponents=new ArrayList<PatternComponent>();
  }
 else {
    tempPatternComponents.clear();
  }
  remainDBTypeList=new ArrayList<String>();
  remainDBTypeList.addAll(allDBTypeList);
}",0.9422492401215804
140103,"public void createContent(Composite parent){
  parent.setLayout(new GridLayout(2,false));
  dataFilterText=new Text(parent,SWT.BORDER | SWT.MULTI);
  DataFilterDND.installDND(dataFilterText);
  dataFilterText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  dataFilterText.setText(stringDataFilter == null ? PluginConstant.EMPTY_STRING : stringDataFilter);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(dataFilterText);
  ((GridData)dataFilterText.getLayoutData()).heightHint=150;
  dataFilterText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      propertyChangeSupport.firePropertyChange(PluginConstant.DATAFILTER_PROPERTY,null,dataFilterText.getText());
    }
  }
);
  Composite buttonsComp=new Composite(parent,SWT.None);
  GridDataFactory.fillDefaults().span(1,1).applyTo(buttonsComp);
  buttonsComp.setLayout(new GridLayout(1,true));
  buttonsComp.setVisible(true);
  Button button=new Button(buttonsComp,SWT.None);
  button.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(button);
}","public void createContent(Composite parent){
  parent.setLayout(new GridLayout());
  dataFilterText=new Text(parent,SWT.BORDER | SWT.MULTI);
  DataFilterDND.installDND(dataFilterText);
  dataFilterText.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  dataFilterText.setText(stringDataFilter == null ? PluginConstant.EMPTY_STRING : stringDataFilter);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(dataFilterText);
  ((GridData)dataFilterText.getLayoutData()).heightHint=150;
  dataFilterText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      propertyChangeSupport.firePropertyChange(PluginConstant.DATAFILTER_PROPERTY,null,dataFilterText.getText());
    }
  }
);
}",0.7908189880020866
140104,"public static void addMenuAndTip(final TableViewer tbViewer,final IDataExplorer explorer,final Analysis analysis){
  final Table table=tbViewer.getTable();
  tbViewer.getTable().addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (e.button == 3) {
        StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
        ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
        final Indicator indicator=dataEntity.getIndicator();
        if (indicator != null) {
          Menu menu=new Menu(table.getShell(),SWT.POP_UP);
          table.setMenu(menu);
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.addListener(SWT.Selection,new Listener(){
              public void handleEvent(              Event event){
                TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                String query=itemEntity.getQuery();
                String editorName=indicator.getName();
                CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
              }
            }
);
            if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator)) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.setText(""String_Node_Str"");
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                public void widgetSelected(                SelectionEvent e){
                  createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
          createPatternFlag++;
          menu.setVisible(true);
        }
      }
    }
  }
);
  addTooltipOnTableItem(table);
}","public static void addMenuAndTip(final TableViewer tbViewer,final IDataExplorer explorer,final Analysis analysis){
  final Table table=tbViewer.getTable();
  tbViewer.getTable().addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (e.button == 3) {
        StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
        ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
        if (dataEntity == null) {
          return;
        }
        final Indicator indicator=dataEntity.getIndicator();
        if (indicator != null) {
          Menu menu=new Menu(table.getShell(),SWT.POP_UP);
          table.setMenu(menu);
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.addListener(SWT.Selection,new Listener(){
              public void handleEvent(              Event event){
                TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
                String query=itemEntity.getQuery();
                String editorName=indicator.getName();
                CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
              }
            }
);
            if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator)) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.setText(""String_Node_Str"");
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                public void widgetSelected(                SelectionEvent e){
                  createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
          createPatternFlag++;
          menu.setVisible(true);
        }
      }
    }
  }
);
  addTooltipOnTableItem(table);
}",0.9867123874839264
140105,"@Override public void mouseDown(MouseEvent e){
  if (e.button == 3) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    final Indicator indicator=dataEntity.getIndicator();
    if (indicator != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addListener(SWT.Selection,new Listener(){
          public void handleEvent(          Event event){
            TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
            String query=itemEntity.getQuery();
            String editorName=indicator.getName();
            CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
          }
        }
);
        if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator)) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.setText(""String_Node_Str"");
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            public void widgetSelected(            SelectionEvent e){
              createPattern(analysis,itemEntity,pattTransformer);
            }
          }
);
        }
      }
      createPatternFlag++;
      menu.setVisible(true);
    }
  }
}","@Override public void mouseDown(MouseEvent e){
  if (e.button == 3) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    if (dataEntity == null) {
      return;
    }
    final Indicator indicator=dataEntity.getIndicator();
    if (indicator != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addListener(SWT.Selection,new Listener(){
          public void handleEvent(          Event event){
            TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
            String query=itemEntity.getQuery();
            String editorName=indicator.getName();
            CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
          }
        }
);
        if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator)) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.setText(""String_Node_Str"");
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            public void widgetSelected(            SelectionEvent e){
              createPattern(analysis,itemEntity,pattTransformer);
            }
          }
);
        }
      }
      createPatternFlag++;
      menu.setVisible(true);
    }
  }
}",0.9868628481345244
140106,"@Override protected TableStructureEntity getTableStructure(){
  TableStructureEntity entity=new TableStructureEntity();
  entity.setFieldNames(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  entity.setFieldWidths(new Integer[]{200,150,150});
  return entity;
}","@Override protected TableStructureEntity getTableStructure(){
  TableStructureEntity entity=new TableStructureEntity();
  entity.setFieldNames(new String[]{""String_Node_Str"",""String_Node_Str""});
  entity.setFieldWidths(new Integer[]{200,300});
  return entity;
}",0.9523809523809524
140107,"public static boolean patternRule(IndicatorEnum indicatorType,TdColumn column){
  int javaType=column.getJavaType();
  DataminingType dataminingType=MetadataHelper.getDataminingType(column);
  if (dataminingType == null) {
    dataminingType=MetadataHelper.getDefaultDataminingType(javaType);
  }
switch (indicatorType) {
case CountsIndicatorEnum:
case RowCountIndicatorEnum:
    return true;
case NullCountIndicatorEnum:
  return true;
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
return true;
case BlankCountIndicatorEnum:
case TextIndicatorEnum:
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
if (Java2SqlType.isTextInSQL(javaType)) {
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.UNSTRUCTURED_TEXT) {
  return true;
}
}
break;
case ModeIndicatorEnum:
case FrequencyIndicatorEnum:
case LowFrequencyIndicatorEnum:
case PatternFreqIndicatorEnum:
case PatternLowFreqIndicatorEnum:
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
case MeanIndicatorEnum:
case MedianIndicatorEnum:
case BoxIIndicatorEnum:
case IQRIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
case RangeIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
if (Java2SqlType.isDateInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
default :
return false;
}
return false;
}","public static boolean patternRule(IndicatorEnum indicatorType,TdColumn column){
  int javaType=column.getJavaType();
  DataminingType dataminingType=MetadataHelper.getDataminingType(column);
  if (dataminingType == null) {
    dataminingType=MetadataHelper.getDefaultDataminingType(javaType);
  }
switch (indicatorType) {
case CountsIndicatorEnum:
case RowCountIndicatorEnum:
    return true;
case NullCountIndicatorEnum:
  return true;
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
return true;
case BlankCountIndicatorEnum:
case TextIndicatorEnum:
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
if (Java2SqlType.isTextInSQL(javaType)) {
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.UNSTRUCTURED_TEXT) {
  return true;
}
}
break;
case ModeIndicatorEnum:
case FrequencyIndicatorEnum:
case LowFrequencyIndicatorEnum:
case PatternFreqIndicatorEnum:
case PatternLowFreqIndicatorEnum:
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
case MeanIndicatorEnum:
case MedianIndicatorEnum:
case BoxIIndicatorEnum:
case IQRIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case RangeIndicatorEnum:
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType) || Java2SqlType.isDateInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
default :
return false;
}
return false;
}",0.9699338544798556
140108,"/** 
 * Method ""addSeriesToXYZDataset"" adds a new series of data to the given dataset.
 * @param dataset a dataset
 * @param keyOfDataset the series key of the data series
 */
public void addSeriesToGanttDataset(TaskSeriesCollection ganttDataset,String keyOfDataset){
  TaskSeries series=new TaskSeries(keyOfDataset);
  for (  T key : keyToVal.keySet()) {
    final Date[] date=keyToVal.get(key);
    series.add(new Task(((MultipleKey)key).toString(),new SimpleTimePeriod(date[0],date[1])));
    MultiMapHelper.addUniqueObjectToListMap(keyOfDataset,key.toString(),this.seriesKeyToLabel);
  }
  ganttDataset.add(series);
}","/** 
 * Method ""addSeriesToXYZDataset"" adds a new series of data to the given dataset.
 * @param dataset a dataset
 * @param keyOfDataset the series key of the data series
 */
public void addSeriesToGanttDataset(TaskSeriesCollection ganttDataset,String keyOfDataset){
  TaskSeries series=new TaskSeries(keyOfDataset);
  for (  MultipleKey key : keyToVal.keySet()) {
    final Date[] date=keyToVal.get(key);
    series.add(new Task(((MultipleKey)key).toString(),new SimpleTimePeriod(date[0],date[1])));
    MultiMapHelper.addUniqueObjectToListMap(keyOfDataset,key.toString(),this.seriesKeyToLabel);
  }
  ganttDataset.add(series);
}",0.9904153354632588
140109,"/** 
 * DOC scorreia Comment method ""createKey"".
 * @param nominalColumns
 * @return
 */
private static String createKey(EList<Column> nominalColumns,int idx){
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < idx; i++) {
    builder.append(nominalColumns.get(i).getName()).append(""String_Node_Str"");
  }
  return builder.toString();
}","/** 
 * Method ""createKey"" creates a key with the concatenation of the values of the first n columns of the given list.
 * @param nominalColumns
 * @param n
 * @return a key
 */
private static String createKey(EList<Column> nominalColumns,int n){
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < n; i++) {
    builder.append(nominalColumns.get(i).getName()).append(""String_Node_Str"");
  }
  return builder.toString();
}",0.8050955414012739
140110,"/** 
 * DOC scorreia Comment method ""fillDataset"".
 * @param nominalColumns
 * @param listRows
 * @param firstNumericColumnIdx
 * @param dataset
 */
private static Map<String,ValueAggregator> fillDataset(final EList<Column> nominalColumns,final List<Object[]> listRows,final int firstNumericColumnIdx){
  Map<String,ValueAggregator> valueAggregators=new HashMap<String,ValueAggregator>();
  int xPos=firstNumericColumnIdx;
  int yPos=firstNumericColumnIdx + 1;
  int zPos=firstNumericColumnIdx + 2;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    for (    Object[] row : listRows) {
      final Object xobj=row[xPos];
      final Double xValue=xobj != null ? Double.valueOf(String.valueOf(xobj)) : null;
      final Object yobj=row[yPos];
      final Double yValue=yobj != null ? Double.valueOf(String.valueOf(yobj)) : null;
      final Object zobj=row[zPos];
      final Double zValue=zobj != null ? Double.valueOf(String.valueOf(zobj)) : null;
      ValueAggregator valueAggregator=valueAggregators.get(key);
      if (valueAggregator == null) {
        valueAggregator=new ValueAggregator();
        valueAggregators.put(key,valueAggregator);
      }
      MultipleKey multipleKey=new MultipleKey(row,i);
      valueAggregator.addValue(multipleKey,new Double[]{xValue,yValue,zValue});
    }
  }
  return valueAggregators;
}","/** 
 * Method ""fillDataset"" fills in the data sets.
 * @param nominalColumns the nominal columns
 * @param listRows the rows (=result set)
 * @param firstNumericColumnIdx the index of the first numeric column
 * @return a map [key -> aggregated values] where identifies a level of aggregation
 */
private static Map<String,ValueAggregator> fillDataset(final EList<Column> nominalColumns,final List<Object[]> listRows,final int firstNumericColumnIdx){
  Map<String,ValueAggregator> valueAggregators=new HashMap<String,ValueAggregator>();
  int xPos=firstNumericColumnIdx;
  int yPos=firstNumericColumnIdx + 1;
  int zPos=firstNumericColumnIdx + 2;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    for (    Object[] row : listRows) {
      final Object xobj=row[xPos];
      final Double xValue=xobj != null ? Double.valueOf(String.valueOf(xobj)) : null;
      final Object yobj=row[yPos];
      final Double yValue=yobj != null ? Double.valueOf(String.valueOf(yobj)) : null;
      final Object zobj=row[zPos];
      final Double zValue=zobj != null ? Double.valueOf(String.valueOf(zobj)) : null;
      ValueAggregator valueAggregator=valueAggregators.get(key);
      if (valueAggregator == null) {
        valueAggregator=new ValueAggregator();
        valueAggregators.put(key,valueAggregator);
      }
      MultipleKey multipleKey=new MultipleKey(row,i);
      valueAggregator.addValue(multipleKey,new Double[]{xValue,yValue,zValue});
    }
  }
  return valueAggregators;
}",0.915546363322992
140111,"/** 
 */
private static Map<String,DateValueAggregate> fillGanttDataset(final EList<Column> nominalColumns,final List<Object[]> listRows,final int firstNumericColumnIdx){
  Map<String,DateValueAggregate> valueAggregators=new HashMap<String,DateValueAggregate>();
  int minPos=firstNumericColumnIdx;
  int maxPos=firstNumericColumnIdx + 1;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    for (    Object[] row : listRows) {
      final Object minObj=row[minPos];
      final Object maxobj=row[maxPos];
      DateValueAggregate valueAggregator=valueAggregators.get(key);
      if (valueAggregator == null) {
        valueAggregator=new DateValueAggregate();
        valueAggregators.put(key,valueAggregator);
      }
      MultipleKey multipleKey=new MultipleKey(row,i);
      valueAggregator.addValue(multipleKey,new Date[]{(Date)minObj,(Date)maxobj});
    }
  }
  return valueAggregators;
}","/** 
 */
private static Map<String,DateValueAggregate> fillGanttDataset(final EList<Column> nominalColumns,final List<Object[]> listRows,final int firstDateColumnIdx){
  Map<String,DateValueAggregate> valueAggregators=new HashMap<String,DateValueAggregate>();
  int minPos=firstDateColumnIdx;
  int maxPos=firstDateColumnIdx + 1;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    for (    Object[] row : listRows) {
      final Object minObj=row[minPos];
      final Date minDate=minObj != null ? (Date)minObj : null;
      final Object maxobj=row[maxPos];
      final Date maxDate=maxobj != null ? (Date)maxobj : null;
      DateValueAggregate valueAggregator=valueAggregators.get(key);
      if (valueAggregator == null) {
        valueAggregator=new DateValueAggregate();
        valueAggregators.put(key,valueAggregator);
      }
      MultipleKey multipleKey=new MultipleKey(row,i);
      valueAggregator.addValue(multipleKey,new Date[]{minDate,maxDate});
    }
  }
  return valueAggregators;
}",0.8958228485153498
140112,"/** 
 */
public void addValue(T key,Date[] values){
  Date[] dates=keyToVal.get(key);
  if (dates == null) {
    dates=new Date[values.length];
    Arrays.fill(dates,new Date());
  }
  for (int i=0; i < values.length; i++) {
    Date d=values[i];
    if (d == null) {
      nullResults.add(key);
      return;
    }
    dates[i]=d;
  }
  keyToVal.put(key,dates);
}","public void addValue(MultipleKey key,Date[] values){
}",0.2057416267942583
140113,"/** 
 * Method ""addSeriesToXYZDataset"" adds a new series of data to the given dataset.
 * @param dataset a dataset
 * @param keyOfDataset the series key of the data series
 */
public void addSeriesToXYZDataset(DefaultXYZDataset dataset,String keyOfDataset){
  final int size=keyToVal.size();
  double[] xDouble=new double[size];
  double[] yDouble=new double[size];
  double[] zDouble=new double[size];
  int i=0;
  for (  MultipleKey key : keyToVal.keySet()) {
    final Double[] doubles=keyToVal.get(key);
    xDouble[i]=doubles[0] / doubles[1];
    yDouble[i]=doubles[1];
    zDouble[i]=doubles[2];
    MultiMapHelper.addUniqueObjectToListMap(keyOfDataset,key.toString(),this.seriesKeyToLabel);
    i++;
  }
  double[][] data=new double[][]{xDouble,yDouble,zDouble};
  dataset.addSeries(keyOfDataset,data);
}","/** 
 * Method ""addSeriesToXYZDataset"" adds a new series of data to the given dataset.
 * @param dataset a dataset
 * @param keyOfDataset the series key of the data series
 */
public void addSeriesToXYZDataset(DefaultXYZDataset dataset,String keyOfDataset){
  final int size=keyToVal.size();
  double[] xDouble=new double[size];
  double[] yDouble=new double[size];
  double[] zDouble=new double[size];
  int i=0;
  for (  MultipleKey key : keyToVal.keySet()) {
    final Double[] doubles=keyToVal.get(key);
    xDouble[i]=doubles[0];
    yDouble[i]=doubles[1];
    zDouble[i]=doubles[2];
    MultiMapHelper.addUniqueObjectToListMap(keyOfDataset,key.toString(),this.seriesKeyToLabel);
    i++;
  }
  double[][] data=new double[][]{xDouble,yDouble,zDouble};
  dataset.addSeries(keyOfDataset,data);
}",0.9919204474829086
140114,"/** 
 * DOC scorreia Comment method ""fillDataset"".
 * @param nominalColumns
 * @param listRows
 * @param firstNumericColumnIdx
 * @param dataset
 */
private static Map<String,ValueAggregator> fillDataset(final EList<Column> nominalColumns,final List<Object[]> listRows,final int firstNumericColumnIdx){
  Map<String,ValueAggregator> valueAggregators=new HashMap<String,ValueAggregator>();
  int xPos=firstNumericColumnIdx;
  int yPos=firstNumericColumnIdx + 1;
  int zPos=firstNumericColumnIdx + 2;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    for (    Object[] row : listRows) {
      final Double xValue=Double.valueOf(String.valueOf(row[xPos]));
      final Double yValue=Double.valueOf(String.valueOf(row[yPos]));
      final Double zValue=Double.valueOf(String.valueOf(row[zPos]));
      ValueAggregator valueAggregator=valueAggregators.get(key);
      if (valueAggregator == null) {
        valueAggregator=new ValueAggregator();
        valueAggregators.put(key,valueAggregator);
      }
      MultipleKey multipleKey=new MultipleKey(row,i);
      valueAggregator.addValue(multipleKey,xValue,yValue,zValue);
    }
  }
  return valueAggregators;
}","/** 
 * DOC scorreia Comment method ""fillDataset"".
 * @param nominalColumns
 * @param listRows
 * @param firstNumericColumnIdx
 * @param dataset
 */
private static Map<String,ValueAggregator> fillDataset(final EList<Column> nominalColumns,final List<Object[]> listRows,final int firstNumericColumnIdx){
  Map<String,ValueAggregator> valueAggregators=new HashMap<String,ValueAggregator>();
  int xPos=firstNumericColumnIdx;
  int yPos=firstNumericColumnIdx + 1;
  int zPos=firstNumericColumnIdx + 2;
  for (int i=nominalColumns.size(); i > 0; i--) {
    String key=createKey(nominalColumns,i);
    for (    Object[] row : listRows) {
      final Object xobj=row[xPos];
      final Double xValue=xobj != null ? Double.valueOf(String.valueOf(xobj)) : null;
      final Object yobj=row[yPos];
      final Double yValue=yobj != null ? Double.valueOf(String.valueOf(yobj)) : null;
      final Object zobj=row[zPos];
      final Double zValue=zobj != null ? Double.valueOf(String.valueOf(zobj)) : null;
      ValueAggregator valueAggregator=valueAggregators.get(key);
      if (valueAggregator == null) {
        valueAggregator=new ValueAggregator();
        valueAggregators.put(key,valueAggregator);
      }
      MultipleKey multipleKey=new MultipleKey(row,i);
      valueAggregator.addValue(multipleKey,new Double[]{xValue,yValue,zValue});
    }
  }
  return valueAggregators;
}",0.8621223857474826
140115,"/** 
 * DOC scorreia Comment method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=quote(tdColumn.getName());
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getTextIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=quote(ColumnHelper.getColumnSetFullName(tdColumn));
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        colName=dbms().getPatternFinderDefaultFunction(colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=instantiateSqlExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}","/** 
 * DOC scorreia Comment method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=quote(tdColumn.getName());
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getTextIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=quote(ColumnHelper.getColumnSetFullName(tdColumn));
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        colName=dbms().getPatternFinderDefaultFunction(colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=instantiateSqlExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}",0.9937597503900156
140116,"/** 
 * DOC scorreia Comment method ""getCompletedString"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param whereExpression
 * @throws AnalysisExecutionException
 */
private String getCompletedStringForQuantiles(Indicator indicator,Expression sqlExpression,String colName,String table,List<String> whereExpression) throws AnalysisExecutionException {
  String catalogOrSchema=getCatalogOrSchemaName(indicator.getAnalyzedElement());
  long count=getCount(cachedAnalysis,colName,table,catalogOrSchema,whereExpression);
  if (count == -1) {
    throw new AnalysisExecutionException(""String_Node_Str"" + dbms().toQualifiedName(catalogOrSchema,null,colName));
  }
  if (count == 0) {
    this.errorMessage=""String_Node_Str"" + dbms().toQualifiedName(catalogOrSchema,null,colName);
    throw new AnalysisExecutionException(errorMessage);
  }
  Long midleCount=getLimitFirstArg(indicator,count);
  Integer nbRow=getNbReturnedRows(indicator,count);
  long nPlusSkip=midleCount + nbRow;
  return dbms().fillGenericQueryWithColumnTableLimitOffset(sqlExpression.getBody(),colName,table,String.valueOf(nbRow),String.valueOf(midleCount),String.valueOf(nPlusSkip));
}","/** 
 * DOC scorreia Comment method ""getCompletedString"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param whereExpression
 * @throws AnalysisExecutionException
 */
private String getCompletedStringForQuantiles(Indicator indicator,Expression sqlExpression,String colName,String table,List<String> whereExpression) throws AnalysisExecutionException {
  String catalogOrSchema=getCatalogOrSchemaName(indicator.getAnalyzedElement());
  long count=getCount(cachedAnalysis,colName,table,catalogOrSchema,whereExpression);
  if (count == -1) {
    throw new AnalysisExecutionException(""String_Node_Str"" + dbms().toQualifiedName(catalogOrSchema,null,colName));
  }
  if (count == 0) {
    this.errorMessage=""String_Node_Str"" + dbms().toQualifiedName(catalogOrSchema,null,colName);
    throw new AnalysisExecutionException(errorMessage);
  }
  Long midleCount=getOffsetInLimit(indicator,count);
  Integer nbRow=getNbReturnedRows(indicator,count);
  long nPlusSkip=midleCount + nbRow;
  return dbms().fillGenericQueryWithColumnTableLimitOffset(sqlExpression.getBody(),colName,table,String.valueOf(nbRow),String.valueOf(midleCount),String.valueOf(nPlusSkip));
}",0.9932716568544996
140117,"/** 
 * DOC scorreia Comment method ""getNbReturnedRows"".
 * @param indicator
 * @param count
 * @return
 */
private Integer getNbReturnedRows(Indicator indicator,long count){
  if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getMedianIndicator())) {
    boolean isEven=count % 2 == 0;
    return (isEven) ? 2 : 1;
  }
  return 1;
}","/** 
 * DOC scorreia Comment method ""getNbReturnedRows"".
 * @param indicator
 * @param count
 * @return
 */
private Integer getNbReturnedRows(Indicator indicator,long count){
  if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getMedianIndicator())) {
    boolean isEven=count % 2 == 0;
    return (isEven) ? 2 : 1;
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    return (count % 4) == 0 ? 2 : 1;
  }
  return 1;
}",0.7364939360529217
140118,"/** 
 * DOC Zqin Comment method ""runInDQViewer"". this method open DQ responsitory view and run the specified query.
 * @param tdDataProvider
 * @param query
 */
public void runInDQViewer(TdDataProvider tdDataProvider,String query){
  SQLExplorerPlugin sqlexplorer=SQLExplorerPlugin.getDefault();
  Collection<Alias> aliases=sqlexplorer.getAliasManager().getAliases();
  TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  TdProviderConnection providerConnection=tdPc.getObject();
  String url=providerConnection.getConnectionString();
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + SQLExplorerPlugin.getDefault().getEditorSerialNo() + ""String_Node_Str"");
      input.setUser(alias.getDefaultUser());
      try {
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        ExecSQLAction execSQLAction=new ExecSQLAction(editorPart);
        execSQLAction.run();
      }
 catch (      PartInitException e) {
        ExceptionHandler.process(e);
      }
    }
  }
}","/** 
 * DOC Zqin Comment method ""runInDQViewer"". this method open DQ responsitory view and run the specified query.
 * @param tdDataProvider
 * @param query
 */
public void runInDQViewer(TdDataProvider tdDataProvider,String query,String editorName){
  if (editorName == null) {
    editorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  SQLExplorerPlugin sqlexplorer=SQLExplorerPlugin.getDefault();
  Collection<Alias> aliases=sqlexplorer.getAliasManager().getAliases();
  TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  TdProviderConnection providerConnection=tdPc.getObject();
  String url=providerConnection.getConnectionString();
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + editorName + ""String_Node_Str"");
      input.setUser(alias.getDefaultUser());
      try {
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        ExecSQLAction execSQLAction=new ExecSQLAction(editorPart);
        execSQLAction.run();
      }
 catch (      PartInitException e) {
        ExceptionHandler.process(e);
      }
    }
  }
}",0.9295982307408772
140119,"@Override public void run(){
  new ChangePerspectiveAction(PluginConstant.SE_ID).run();
  TdDataProvider tdDataProvider=DataProviderHelper.getDataProvider(table);
  String qualifiedName=ColumnSetNameHelper.getColumnSetQualifiedName(tdDataProvider,table);
  String query=""String_Node_Str"" + qualifiedName;
  CorePlugin.getDefault().runInDQViewer(tdDataProvider,query);
}","@Override public void run(){
  new ChangePerspectiveAction(PluginConstant.SE_ID).run();
  TdDataProvider tdDataProvider=DataProviderHelper.getDataProvider(table);
  String qualifiedName=ColumnSetNameHelper.getColumnSetQualifiedName(tdDataProvider,table);
  String query=""String_Node_Str"" + qualifiedName;
  CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,null);
}",0.993270524899058
140120,"public void chartMouseClicked(ChartMouseEvent event){
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    IDataEntity dataEntity=(IDataEntity)cateEntity.getDataset();
    ChartDataEntity currentDataEntity=null;
    ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
    if (dataEntities.length == 1) {
      currentDataEntity=dataEntities[0];
    }
 else {
      for (      ChartDataEntity entity : dataEntities) {
switch (chartType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
case PATTERN_FREQUENCE_STATISTICS:
case PATTERN_LOW_FREQUENCE_STATISTICS:
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
        break;
default :
      if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
        currentDataEntity=entity;
      }
  }
}
}
PopupMenu menu=new PopupMenu(DefaultMessagesImpl.getString(""String_Node_Str""));
if (currentDataEntity != null) {
final Indicator currentIndicator=currentDataEntity.getIndicator();
int createPatternFlag=0;
MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartType,analysis,currentDataEntity);
for (final MenuItemEntity itemEntity : itemEntities) {
  MenuItem item=new MenuItem(itemEntity.getLabel());
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          ChartTableFactory.viewRecordInDataExplorer(analysis,currentIndicator,itemEntity.getQuery());
        }
      }
);
    }
  }
);
  menu.add(item);
  if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
    MenuItem itemCreatePatt=new MenuItem(""String_Node_Str"");
    final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
    itemCreatePatt.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
          }
        }
);
      }
    }
);
    menu.add(itemCreatePatt);
  }
}
chartPanel.add(menu);
menu.show(chartPanel,event.getTrigger().getX(),event.getTrigger().getY());
createPatternFlag++;
}
}
}","public void chartMouseClicked(ChartMouseEvent event){
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    IDataEntity dataEntity=(IDataEntity)cateEntity.getDataset();
    ChartDataEntity currentDataEntity=null;
    ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
    if (dataEntities.length == 1) {
      currentDataEntity=dataEntities[0];
    }
 else {
      for (      ChartDataEntity entity : dataEntities) {
switch (chartType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
case PATTERN_FREQUENCE_STATISTICS:
case PATTERN_LOW_FREQUENCE_STATISTICS:
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
        break;
default :
      if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
        currentDataEntity=entity;
      }
  }
}
}
PopupMenu menu=new PopupMenu(DefaultMessagesImpl.getString(""String_Node_Str""));
if (currentDataEntity != null) {
final Indicator currentIndicator=currentDataEntity.getIndicator();
int createPatternFlag=0;
MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartType,analysis,currentDataEntity);
for (final MenuItemEntity itemEntity : itemEntities) {
  MenuItem item=new MenuItem(itemEntity.getLabel());
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
          String query=itemEntity.getQuery();
          String editorName=currentIndicator.getName();
          CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
        }
      }
);
    }
  }
);
  menu.add(item);
  if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
    MenuItem itemCreatePatt=new MenuItem(""String_Node_Str"");
    final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
    itemCreatePatt.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
          }
        }
);
      }
    }
);
    menu.add(itemCreatePatt);
  }
}
chartPanel.add(menu);
menu.show(chartPanel,event.getTrigger().getX(),event.getTrigger().getY());
createPatternFlag++;
}
}
}",0.7001153402537486
140121,"private void addMouseListenerForChart(final ChartPanel chartPanel,final EIndicatorChartType chartType,final Analysis analysis){
  chartPanel.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        IDataEntity dataEntity=(IDataEntity)cateEntity.getDataset();
        ChartDataEntity currentDataEntity=null;
        ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
        if (dataEntities.length == 1) {
          currentDataEntity=dataEntities[0];
        }
 else {
          for (          ChartDataEntity entity : dataEntities) {
switch (chartType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
case PATTERN_FREQUENCE_STATISTICS:
case PATTERN_LOW_FREQUENCE_STATISTICS:
              if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
                currentDataEntity=entity;
              }
            break;
default :
          if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
      }
    }
  }
  PopupMenu menu=new PopupMenu(DefaultMessagesImpl.getString(""String_Node_Str""));
  if (currentDataEntity != null) {
    final Indicator currentIndicator=currentDataEntity.getIndicator();
    int createPatternFlag=0;
    MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartType,analysis,currentDataEntity);
    for (    final MenuItemEntity itemEntity : itemEntities) {
      MenuItem item=new MenuItem(itemEntity.getLabel());
      item.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent arg0){
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              ChartTableFactory.viewRecordInDataExplorer(analysis,currentIndicator,itemEntity.getQuery());
            }
          }
);
        }
      }
);
      menu.add(item);
      if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
        MenuItem itemCreatePatt=new MenuItem(""String_Node_Str"");
        final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
        itemCreatePatt.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
              }
            }
);
          }
        }
);
        menu.add(itemCreatePatt);
      }
    }
    chartPanel.add(menu);
    menu.show(chartPanel,event.getTrigger().getX(),event.getTrigger().getY());
    createPatternFlag++;
  }
}
}
public void chartMouseMoved(ChartMouseEvent event){
}
}
);
}","private void addMouseListenerForChart(final ChartPanel chartPanel,final EIndicatorChartType chartType,final Analysis analysis){
  chartPanel.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        IDataEntity dataEntity=(IDataEntity)cateEntity.getDataset();
        ChartDataEntity currentDataEntity=null;
        ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
        if (dataEntities.length == 1) {
          currentDataEntity=dataEntities[0];
        }
 else {
          for (          ChartDataEntity entity : dataEntities) {
switch (chartType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
case PATTERN_FREQUENCE_STATISTICS:
case PATTERN_LOW_FREQUENCE_STATISTICS:
              if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
                currentDataEntity=entity;
              }
            break;
default :
          if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
      }
    }
  }
  PopupMenu menu=new PopupMenu(DefaultMessagesImpl.getString(""String_Node_Str""));
  if (currentDataEntity != null) {
    final Indicator currentIndicator=currentDataEntity.getIndicator();
    int createPatternFlag=0;
    MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartType,analysis,currentDataEntity);
    for (    final MenuItemEntity itemEntity : itemEntities) {
      MenuItem item=new MenuItem(itemEntity.getLabel());
      item.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent arg0){
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
              String query=itemEntity.getQuery();
              String editorName=currentIndicator.getName();
              CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
            }
          }
);
        }
      }
);
      menu.add(item);
      if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
        MenuItem itemCreatePatt=new MenuItem(""String_Node_Str"");
        final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
        itemCreatePatt.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
              }
            }
);
          }
        }
);
        menu.add(itemCreatePatt);
      }
    }
    chartPanel.add(menu);
    menu.show(chartPanel,event.getTrigger().getX(),event.getTrigger().getY());
    createPatternFlag++;
  }
}
}
public void chartMouseMoved(ChartMouseEvent event){
}
}
);
}",0.9376816273813368
140122,"public void run(){
  for (  ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
    final JFreeChart chart=chartData.getChart();
    if (chart != null) {
      GridData gd=new GridData(GridData.FILL_BOTH);
      gd.widthHint=420;
      gd.heightHint=230;
      ChartUtils.createAWTSWTComp(composite,gd,chart);
    }
  }
}","public void run(){
  for (  ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
    JFreeChart chart=chartData.getChart();
    if (chart != null) {
      ChartUtils.createAWTSWTComp(comp,new GridData(GridData.FILL_BOTH),chart);
    }
  }
}",0.7444794952681388
140123,"public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  List<Composite> previewChartList=new ArrayList<Composite>();
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + column.getName());
    exComp.setLayout(new GridLayout());
    exComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    exComp.setData(columnIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"") + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              for (              ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
                final JFreeChart chart=chartData.getChart();
                if (chart != null) {
                  GridData gd=new GridData(GridData.FILL_BOTH);
                  gd.widthHint=420;
                  gd.heightHint=230;
                  ChartUtils.createAWTSWTComp(composite,gd,chart);
                }
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        getChartComposite().layout();
        form.reflow(true);
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}","public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  List<Composite> previewChartList=new ArrayList<Composite>();
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"") + column.getName());
    exComp.setLayout(new GridLayout());
    exComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    exComp.setData(columnIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"") + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().syncExec(new Runnable(){
            public void run(){
              for (              ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
                JFreeChart chart=chartData.getChart();
                if (chart != null) {
                  ChartUtils.createAWTSWTComp(comp,new GridData(GridData.FILL_BOTH),chart);
                }
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        getChartComposite().layout();
        form.reflow(true);
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}",0.9611262870350914
140124,"/** 
 * DOC Zqin Comment method ""showSelectedElements"".
 * @param newTree
 */
private void showSelectedElements(Tree newTree){
  TreeItem[] selection=newTree.getSelection();
  for (  TreeItem item : selection) {
    IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
    ColumnIndicator columnIndicator=(ColumnIndicator)item.getData(COLUMN_INDICATOR_KEY);
    if (columnIndicator != null && indicatorUnit == null) {
      new ChangePerspectiveAction(PluginConstant.SE_ID).run();
      TdColumn column=columnIndicator.getTdColumn();
      TdDataProvider dataprovider=DataProviderHelper.getTdDataProvider(column);
      ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(column);
      String tableName=ColumnSetNameHelper.getColumnSetQualifiedName(dataprovider,columnSetOwner);
      String columnName=ColumnHelper.getFullName(column);
      String query=""String_Node_Str"" + columnName + ""String_Node_Str""+ tableName;
      CorePlugin.getDefault().runInDQViewer(dataprovider,query);
    }
  }
}","/** 
 * DOC Zqin Comment method ""showSelectedElements"".
 * @param newTree
 */
private void showSelectedElements(Tree newTree){
  TreeItem[] selection=newTree.getSelection();
  for (  TreeItem item : selection) {
    IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
    ColumnIndicator columnIndicator=(ColumnIndicator)item.getData(COLUMN_INDICATOR_KEY);
    if (columnIndicator != null && indicatorUnit == null) {
      new ChangePerspectiveAction(PluginConstant.SE_ID).run();
      TdColumn column=columnIndicator.getTdColumn();
      TdDataProvider dataprovider=DataProviderHelper.getTdDataProvider(column);
      ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(column);
      String tableName=ColumnSetNameHelper.getColumnSetQualifiedName(dataprovider,columnSetOwner);
      String columnName=ColumnHelper.getFullName(column);
      String query=""String_Node_Str"" + columnName + ""String_Node_Str""+ tableName;
      CorePlugin.getDefault().runInDQViewer(dataprovider,query,null);
    }
  }
}",0.997564539698003
140125,"public static void createTable(Composite parent,ChartWithData inputObject,final Analysis analysis){
  final TableViewer tbViewer=new TableViewer(parent,SWT.BORDER | SWT.FULL_SELECTION);
  final Table table=tbViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  GridData gd=new GridData();
  gd.heightHint=220;
  gd.widthHint=500;
  gd.verticalAlignment=SWT.BEGINNING;
  table.setLayoutData(gd);
  String[] names=null;
  Integer[] widths=null;
  final EIndicatorChartType chartTableType=inputObject.getChartType();
switch (chartTableType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
case PATTERN_FREQUENCE_STATISTICS:
case PATTERN_LOW_FREQUENCE_STATISTICS:
    names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  widths=new Integer[]{200,150,150};
break;
case MODE_INDICATOR:
names=new String[]{""String_Node_Str""};
widths=new Integer[]{500};
break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,75,75,75,75};
break;
case SIMPLE_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,150,150};
break;
case TEXT_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
case SUMMARY_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
default :
}
createTableColumnStructure(names,widths,table);
tbViewer.setLabelProvider(ChartTableProviderFactory.createLabelProvider(chartTableType));
tbViewer.setContentProvider(ChartTableProviderFactory.createContentProvider(chartTableType));
tbViewer.setInput(inputObject);
tbViewer.getTable().addMouseListener(new MouseAdapter(){
@Override public void mouseDown(MouseEvent e){
if (e.button == 3) {
StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
final Indicator indicator=dataEntity.getIndicator();
if (indicator != null) {
Menu menu=new Menu(table.getShell(),SWT.POP_UP);
table.setMenu(menu);
int createPatternFlag=0;
MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartTableType,analysis,dataEntity);
for (final MenuItemEntity itemEntity : itemEntities) {
MenuItem item=new MenuItem(menu,SWT.PUSH);
item.setText(itemEntity.getLabel());
item.setImage(itemEntity.getIcon());
item.addListener(SWT.Selection,new Listener(){
public void handleEvent(Event event){
viewRecordInDataExplorer(analysis,indicator,itemEntity.getQuery());
}
}
);
if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator)) && createPatternFlag == 0) {
MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
itemCreatePatt.setText(""String_Node_Str"");
itemCreatePatt.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
createPattern(analysis,itemEntity,pattTransformer);
}
}
);
}
}
createPatternFlag++;
menu.setVisible(true);
}
}
}
}
);
addTooltipOnTableItem(table);
}","public static void createTable(Composite parent,ChartWithData inputObject,final Analysis analysis){
  final TableViewer tbViewer=new TableViewer(parent,SWT.BORDER | SWT.FULL_SELECTION);
  final Table table=tbViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  GridData gd=new GridData();
  gd.heightHint=220;
  gd.widthHint=500;
  gd.verticalAlignment=SWT.BEGINNING;
  table.setLayoutData(gd);
  String[] names=null;
  Integer[] widths=null;
  final EIndicatorChartType chartTableType=inputObject.getChartType();
switch (chartTableType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
case PATTERN_FREQUENCE_STATISTICS:
case PATTERN_LOW_FREQUENCE_STATISTICS:
    names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  widths=new Integer[]{200,150,150};
break;
case MODE_INDICATOR:
names=new String[]{""String_Node_Str""};
widths=new Integer[]{500};
break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,75,75,75,75};
break;
case SIMPLE_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,150,150};
break;
case TEXT_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
case SUMMARY_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
default :
}
createTableColumnStructure(names,widths,table);
tbViewer.setLabelProvider(ChartTableProviderFactory.createLabelProvider(chartTableType));
tbViewer.setContentProvider(ChartTableProviderFactory.createContentProvider(chartTableType));
tbViewer.setInput(inputObject);
tbViewer.getTable().addMouseListener(new MouseAdapter(){
@Override public void mouseDown(MouseEvent e){
if (e.button == 3) {
StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
final Indicator indicator=dataEntity.getIndicator();
if (indicator != null) {
Menu menu=new Menu(table.getShell(),SWT.POP_UP);
table.setMenu(menu);
int createPatternFlag=0;
MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartTableType,analysis,dataEntity);
for (final MenuItemEntity itemEntity : itemEntities) {
MenuItem item=new MenuItem(menu,SWT.PUSH);
item.setText(itemEntity.getLabel());
item.setImage(itemEntity.getIcon());
item.addListener(SWT.Selection,new Listener(){
public void handleEvent(Event event){
TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
String query=itemEntity.getQuery();
String editorName=indicator.getName();
CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
}
}
);
if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator)) && createPatternFlag == 0) {
MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
itemCreatePatt.setText(""String_Node_Str"");
itemCreatePatt.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
createPattern(analysis,itemEntity,pattTransformer);
}
}
);
}
}
createPatternFlag++;
menu.setVisible(true);
}
}
}
}
);
addTooltipOnTableItem(table);
}",0.9540298507462688
140126,"@Override public void mouseDown(MouseEvent e){
  if (e.button == 3) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    final Indicator indicator=dataEntity.getIndicator();
    if (indicator != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartTableType,analysis,dataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addListener(SWT.Selection,new Listener(){
          public void handleEvent(          Event event){
            viewRecordInDataExplorer(analysis,indicator,itemEntity.getQuery());
          }
        }
);
        if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator)) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.setText(""String_Node_Str"");
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            public void widgetSelected(            SelectionEvent e){
              createPattern(analysis,itemEntity,pattTransformer);
            }
          }
);
        }
      }
      createPatternFlag++;
      menu.setVisible(true);
    }
  }
}","@Override public void mouseDown(MouseEvent e){
  if (e.button == 3) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    final Indicator indicator=dataEntity.getIndicator();
    if (indicator != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartTableType,analysis,dataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addListener(SWT.Selection,new Listener(){
          public void handleEvent(          Event event){
            TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
            String query=itemEntity.getQuery();
            String editorName=indicator.getName();
            CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
          }
        }
);
        if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator)) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.setText(""String_Node_Str"");
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            public void widgetSelected(            SelectionEvent e){
              createPattern(analysis,itemEntity,pattTransformer);
            }
          }
);
        }
      }
      createPatternFlag++;
      menu.setVisible(true);
    }
  }
}",0.9033352176370832
140127,"/** 
 * Create a AWT_SWT bridge composite for displaying the <CODE>ChartPanel</CODE>.
 * @param composite
 * @param gd
 * @param chartPanel
 */
public static ChartPanel createAWTSWTComp(final Composite composite,GridData gd,JFreeChart chart){
  Composite frameComp=new Composite(composite,SWT.EMBEDDED);
  frameComp.setLayout(new GridLayout());
  frameComp.setLayoutData(gd);
  Frame frame=SWT_AWT.new_Frame(frameComp);
  frame.setLayout(new java.awt.GridLayout());
  ChartPanel chartPanel=new ChartPanel(chart);
  frame.add(chartPanel);
  frame.pack();
  frame.validate();
  return chartPanel;
}","/** 
 * Create a AWT_SWT bridge composite for displaying the <CODE>ChartPanel</CODE>.
 * @param composite
 * @param gd
 * @param chartPanel
 */
public static ChartPanel createAWTSWTComp(Composite composite,GridData gd,JFreeChart chart){
  ChartPanel chartPanel=new ChartPanel(chart);
  Composite frameComp=new Composite(composite,SWT.EMBEDDED);
  frameComp.setLayout(new GridLayout());
  frameComp.setLayoutData(gd);
  frameComp.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_GRAY));
  Frame frame=SWT_AWT.new_Frame(frameComp);
  frame.setLayout(new java.awt.GridLayout());
  frame.add(chartPanel);
  frame.validate();
  return chartPanel;
}",0.8112
140128,"public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){
  if (!getItemVisible(series,item)) {
    return;
  }
  PlotOrientation orientation=plot.getOrientation();
  double x=dataset.getXValue(series,item);
  double y=dataset.getYValue(series,item);
  double z=Double.NaN;
  if (dataset instanceof XYZDataset) {
    XYZDataset xyzData=(XYZDataset)dataset;
    z=xyzData.getZValue(series,item);
  }
  if (!Double.isNaN(z)) {
    z+=1;
    RectangleEdge domainAxisLocation=plot.getDomainAxisEdge();
    RectangleEdge rangeAxisLocation=plot.getRangeAxisEdge();
    double transX=domainAxis.valueToJava2D(x,dataArea,domainAxisLocation);
    double transY=rangeAxis.valueToJava2D(y,dataArea,rangeAxisLocation);
    double transDomain=0.0;
    double transRange=0.0;
    double zero;
switch (getScaleType()) {
case SCALE_ON_DOMAIN_AXIS:
      zero=domainAxis.valueToJava2D(0.0,dataArea,domainAxisLocation);
    transDomain=domainAxis.valueToJava2D(z,dataArea,domainAxisLocation) - zero;
  transRange=transDomain;
break;
case SCALE_ON_RANGE_AXIS:
zero=rangeAxis.valueToJava2D(0.0,dataArea,rangeAxisLocation);
transRange=zero - rangeAxis.valueToJava2D(z,dataArea,rangeAxisLocation);
transDomain=transRange;
break;
default :
double zero1=domainAxis.valueToJava2D(0.0,dataArea,domainAxisLocation);
double zero2=rangeAxis.valueToJava2D(0.0,dataArea,rangeAxisLocation);
transDomain=domainAxis.valueToJava2D(z,dataArea,domainAxisLocation) - zero1;
transRange=zero2 - rangeAxis.valueToJava2D(z,dataArea,rangeAxisLocation);
}
transDomain=Math.abs(transDomain);
transRange=Math.abs(transRange);
Ellipse2D circle=null;
if (orientation == PlotOrientation.VERTICAL) {
circle=new Ellipse2D.Double(transX - transDomain / 2.0,transY - transRange / 2.0,transDomain,transRange);
}
 else if (orientation == PlotOrientation.HORIZONTAL) {
circle=new Ellipse2D.Double(transY - transRange / 2.0,transX - transDomain / 2.0,transRange,transDomain);
}
g2.setPaint(getItemPaint(series,item));
g2.fill(circle);
g2.setStroke(getItemOutlineStroke(series,item));
g2.setPaint(getItemOutlinePaint(series,item));
g2.draw(circle);
if (isItemLabelVisible(series,item)) {
if (orientation == PlotOrientation.VERTICAL) {
drawItemLabel(g2,orientation,dataset,series,item,transX,transY,false);
}
 else if (orientation == PlotOrientation.HORIZONTAL) {
drawItemLabel(g2,orientation,dataset,series,item,transY,transX,false);
}
}
EntityCollection entities=null;
if (info != null) {
entities=info.getOwner().getEntityCollection();
if (entities != null && circle.intersects(dataArea)) {
addEntity(entities,circle,dataset,series,item,circle.getCenterX(),circle.getCenterY());
}
}
int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);
int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);
updateCrosshairValues(crosshairState,x,y,domainAxisIndex,rangeAxisIndex,transX,transY,orientation);
}
}","public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){
  if (!getItemVisible(series,item)) {
    return;
  }
  PlotOrientation orientation=plot.getOrientation();
  double x=dataset.getXValue(series,item);
  double y=dataset.getYValue(series,item);
  double z=Double.NaN;
  if (dataset instanceof XYZDataset) {
    XYZDataset xyzData=(XYZDataset)dataset;
    z=xyzData.getZValue(series,item);
  }
  if (!Double.isNaN(z)) {
    RectangleEdge domainAxisLocation=plot.getDomainAxisEdge();
    RectangleEdge rangeAxisLocation=plot.getRangeAxisEdge();
    double transX=domainAxis.valueToJava2D(x,dataArea,domainAxisLocation);
    double transY=rangeAxis.valueToJava2D(y,dataArea,rangeAxisLocation);
    double transDomain=0.0;
    double transRange=0.0;
    double zero;
switch (getScaleType()) {
case SCALE_ON_DOMAIN_AXIS:
      zero=domainAxis.valueToJava2D(0.0,dataArea,domainAxisLocation);
    transDomain=domainAxis.valueToJava2D(z,dataArea,domainAxisLocation) - zero;
  transRange=transDomain;
break;
case SCALE_ON_RANGE_AXIS:
zero=rangeAxis.valueToJava2D(0.0,dataArea,rangeAxisLocation);
transRange=zero - rangeAxis.valueToJava2D(z,dataArea,rangeAxisLocation);
transDomain=transRange;
break;
default :
double zero1=domainAxis.valueToJava2D(0.0,dataArea,domainAxisLocation);
double zero2=rangeAxis.valueToJava2D(0.0,dataArea,rangeAxisLocation);
transDomain=domainAxis.valueToJava2D(z,dataArea,domainAxisLocation) - zero1;
transRange=zero2 - rangeAxis.valueToJava2D(z,dataArea,rangeAxisLocation);
}
transDomain=Math.abs(transDomain);
transRange=Math.abs(transRange);
double diag=Math.sqrt(dataArea.getHeight() * dataArea.getHeight() + dataArea.getWidth() * dataArea.getWidth());
transDomain+=diag / 100;
transRange+=diag / 100;
Ellipse2D circle=null;
if (orientation == PlotOrientation.VERTICAL) {
circle=new Ellipse2D.Double(transX - transDomain / 2.0,transY - transRange / 2.0,transDomain,transRange);
}
 else if (orientation == PlotOrientation.HORIZONTAL) {
circle=new Ellipse2D.Double(transY - transRange / 2.0,transX - transDomain / 2.0,transRange,transDomain);
}
g2.setPaint(getItemPaint(series,item));
g2.fill(circle);
g2.setStroke(getItemOutlineStroke(series,item));
g2.setPaint(getItemOutlinePaint(series,item));
g2.draw(circle);
if (isItemLabelVisible(series,item)) {
if (orientation == PlotOrientation.VERTICAL) {
drawItemLabel(g2,orientation,dataset,series,item,transX,transY,false);
}
 else if (orientation == PlotOrientation.HORIZONTAL) {
drawItemLabel(g2,orientation,dataset,series,item,transY,transX,false);
}
}
EntityCollection entities=null;
if (info != null) {
entities=info.getOwner().getEntityCollection();
if (entities != null && circle.intersects(dataArea)) {
addEntity(entities,circle,dataset,series,item,circle.getCenterX(),circle.getCenterY());
}
}
int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);
int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);
updateCrosshairValues(crosshairState,x,y,domainAxisIndex,rangeAxisIndex,transX,transY,orientation);
}
}",0.9723792602164432
140129,"/** 
 * DOC scorreia Comment method ""createBubbleChart"".
 * @param indic
 * @param numericColumn TODO
 * @return
 */
public static JFreeChart createBubbleChart(final ColumnSetMultiValueIndicator indic,Column numericColumn){
  final Map<String,ValueAggregator> createXYZDatasets=ChartDatasetFactory.createXYZDatasets(indic,numericColumn);
  DefaultXYZDataset dataset=new DefaultXYZDataset();
  final Iterator<String> iterator=createXYZDatasets.keySet().iterator();
  while (iterator.hasNext()) {
    final String next=iterator.next();
    createXYZDatasets.get(next).addSeriesToXYZDataset(dataset,next);
  }
  String chartName=""String_Node_Str"" + numericColumn.getName() + ""String_Node_Str"";
  JFreeChart chart=TopChartFactory.createBubbleChart(chartName,""String_Node_Str"",""String_Node_Str"",dataset,PlotOrientation.HORIZONTAL,true,false,true);
  final XYPlot plot=(XYPlot)chart.getPlot();
  final XYItemRenderer renderer=plot.getRenderer();
  renderer.setBaseToolTipGenerator(new StandardXYZToolTipGenerator(){
    @Override protected Object[] createItemArray(    XYZDataset dset,    int series,    int item){
      final Comparable<?> seriesKey=dset.getSeriesKey(series);
      final String seriesK=String.valueOf(seriesKey);
      final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
      String label=valueAggregator.getLabels(seriesK).get(item);
      final Object[] itemArray=super.createItemArray(dset,series,item);
      itemArray[0]=label;
      return itemArray;
    }
  }
);
  return chart;
}","/** 
 * Method ""createBubbleChart"".
 * @param indic the indicator
 * @param numericColumn the analyzed numeric column
 * @return the bubble chart
 */
public static JFreeChart createBubbleChart(final ColumnSetMultiValueIndicator indic,Column numericColumn){
  final Map<String,ValueAggregator> createXYZDatasets=ChartDatasetFactory.createXYZDatasets(indic,numericColumn);
  DefaultXYZDataset dataset=new DefaultXYZDataset();
  final Iterator<String> iterator=createXYZDatasets.keySet().iterator();
  while (iterator.hasNext()) {
    final String next=iterator.next();
    createXYZDatasets.get(next).addSeriesToXYZDataset(dataset,next);
  }
  String chartName=""String_Node_Str"" + numericColumn.getName() + ""String_Node_Str"";
  JFreeChart chart=TopChartFactory.createBubbleChart(chartName,""String_Node_Str"",""String_Node_Str"",dataset,PlotOrientation.HORIZONTAL,true,false,true);
  final XYPlot plot=(XYPlot)chart.getPlot();
  final XYItemRenderer renderer=plot.getRenderer();
  renderer.setBaseToolTipGenerator(new StandardXYZToolTipGenerator(){
    @Override protected Object[] createItemArray(    XYZDataset dset,    int series,    int item){
      final Comparable<?> seriesKey=dset.getSeriesKey(series);
      final String seriesK=String.valueOf(seriesKey);
      final ValueAggregator valueAggregator=createXYZDatasets.get(seriesKey);
      String label=valueAggregator.getLabels(seriesK).get(item);
      final Object[] itemArray=super.createItemArray(dset,series,item);
      itemArray[0]=label;
      return itemArray;
    }
  }
);
  return chart;
}",0.9723577235772358
140130,"/** 
 * DOC scorreia Comment method ""instantiateQuery"".
 * @param indicator
 */
private void instantiateQuery(Indicator indicator){
  if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
    ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
    final EList<Column> analyzedColumns=colSetMultValIndicator.getAnalyzedColumns();
    final EList<String> numericFunctions=initializeNumericFunctions(colSetMultValIndicator);
    final EList<String> dateFunctions=initializeDateFunctions(colSetMultValIndicator);
    List<String> nominalColumns=new ArrayList<String>();
    for (    Column column : colSetMultValIndicator.getNominalColumns()) {
      nominalColumns.add(column.getName());
    }
    List<String> computedColumns=new ArrayList<String>();
    for (    Column column : colSetMultValIndicator.getNumericColumns()) {
      for (      String f : numericFunctions) {
        computedColumns.add(replaceVariablesLow(f,column.getName()));
      }
    }
    for (    Column column : colSetMultValIndicator.getDateColumns()) {
      for (      String f : numericFunctions) {
        computedColumns.add(replaceVariablesLow(f,column.getName()));
      }
    }
    computedColumns.add(colSetMultValIndicator.getCountAll());
    String selectItems=createSelect(nominalColumns,computedColumns);
    final Expression sqlGenericExpression=dbms().getSqlExpression(indicator.getIndicatorDefinition());
    String grpByClause=createGroupBy(nominalColumns);
    String tableName=getTableName(analyzedColumns);
    String sqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),selectItems,tableName,grpByClause);
    String stringDataFilter=AnalysisHelper.getStringDataFilter(cachedAnalysis);
    if (stringDataFilter == null) {
      stringDataFilter=""String_Node_Str"";
    }
    sqlExpr=dbms().addWhereToStatement(sqlExpr,stringDataFilter);
    indicator.setInstantiatedExpression(BooleanExpressionHelper.createExpression(sqlGenericExpression.getLanguage(),sqlExpr));
  }
}","/** 
 * DOC scorreia Comment method ""instantiateQuery"".
 * @param indicator
 */
private void instantiateQuery(Indicator indicator){
  if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
    ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
    final EList<Column> analyzedColumns=colSetMultValIndicator.getAnalyzedColumns();
    final EList<String> numericFunctions=initializeNumericFunctions(colSetMultValIndicator);
    final EList<String> dateFunctions=initializeDateFunctions(colSetMultValIndicator);
    List<String> nominalColumns=new ArrayList<String>();
    for (    Column column : colSetMultValIndicator.getNominalColumns()) {
      nominalColumns.add(column.getName());
    }
    List<String> computedColumns=new ArrayList<String>();
    for (    Column column : colSetMultValIndicator.getNumericColumns()) {
      for (      String f : numericFunctions) {
        computedColumns.add(replaceVariablesLow(f,column.getName()));
      }
    }
    for (    Column column : colSetMultValIndicator.getDateColumns()) {
      for (      String f : dateFunctions) {
        computedColumns.add(replaceVariablesLow(f,column.getName()));
      }
    }
    computedColumns.add(colSetMultValIndicator.getCountAll());
    String selectItems=createSelect(nominalColumns,computedColumns);
    final Expression sqlGenericExpression=dbms().getSqlExpression(indicator.getIndicatorDefinition());
    String grpByClause=createGroupBy(nominalColumns);
    String tableName=getTableName(analyzedColumns);
    String sqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),selectItems,tableName,grpByClause);
    String stringDataFilter=AnalysisHelper.getStringDataFilter(cachedAnalysis);
    if (stringDataFilter == null) {
      stringDataFilter=""String_Node_Str"";
    }
    sqlExpr=dbms().addWhereToStatement(sqlExpr,stringDataFilter);
    indicator.setInstantiatedExpression(BooleanExpressionHelper.createExpression(sqlGenericExpression.getLanguage(),sqlExpr));
  }
}",0.9973602111831054
140131,"protected void evalSchemaIndicLow(final ConnectionIndicator connectionIndicator,final CatalogIndicator catalogIndic,final SchemaIndicator schemaIndic,final TdCatalog tdCatalog,final TdSchema tdSchema,ReturnCode ok) throws SQLException {
  boolean hasSchema=tdSchema != null;
  boolean hasCatalog=tdCatalog != null;
  String catName=hasCatalog ? tdCatalog.getName() : null;
  String schemaName=hasSchema ? tdSchema.getName() : null;
  schemaIndic.setAnalyzedElement(hasSchema ? tdSchema : tdCatalog);
  TableBuilder tableBuilder=new TableBuilder(connection);
  int tableCount=0;
  List<? extends NamedColumnSet> tables=tableBuilder.getColumnSets(catName,schemaName,tablePattern);
  for (  NamedColumnSet t : tables) {
    tableCount++;
    evalAllCounts(catName,schemaName,t,schemaIndic,true,ok);
  }
  schemaIndic.setTableCount(tableCount);
  ViewBuilder viewBuilder=new ViewBuilder(connection);
  int viewCount=0;
  List<? extends NamedColumnSet> views=viewBuilder.getColumnSets(catName,schemaName,viewPattern);
  for (  NamedColumnSet t : views) {
    viewCount++;
    evalAllCounts(catName,schemaName,t,schemaIndic,false,ok);
  }
  schemaIndic.setViewCount(viewCount);
  if (hasCatalog && hasSchema) {
    this.addToConnectionIndicator(connectionIndicator,catalogIndic);
    catalogIndic.addSchemaIndicator(schemaIndic);
    catalogIndic.setTableCount(catalogIndic.getTableCount() + tableCount);
    catalogIndic.setTableRowCount(catalogIndic.getTableRowCount() + schemaIndic.getTableRowCount());
    catalogIndic.setViewRowCount(catalogIndic.getViewRowCount() + schemaIndic.getViewRowCount());
  }
 else   if (!hasCatalog) {
    this.addToConnectionIndicator(connectionIndicator,schemaIndic);
  }
 else   if (!hasSchema) {
    if (SchemaPackage.eINSTANCE.getCatalogIndicator().equals(schemaIndic.eClass())) {
      this.addToConnectionIndicator(connectionIndicator,schemaIndic);
    }
 else {
      log.error(""String_Node_Str"");
    }
  }
}","protected void evalSchemaIndicLow(final ConnectionIndicator connectionIndicator,final CatalogIndicator catalogIndic,final SchemaIndicator schemaIndic,final TdCatalog tdCatalog,final TdSchema tdSchema,ReturnCode ok) throws SQLException {
  boolean hasSchema=tdSchema != null;
  boolean hasCatalog=tdCatalog != null;
  String catName=hasCatalog ? tdCatalog.getName() : null;
  String schemaName=hasSchema ? tdSchema.getName() : null;
  schemaIndic.setAnalyzedElement(hasSchema ? tdSchema : tdCatalog);
  TableBuilder tableBuilder=new TableBuilder(connection);
  int tableCount=0;
  final String[] tablePatterns=tablePattern != null && tablePattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.tablePattern,FILTER_SEP) : new String[]{this.tablePattern};
  for (  String pat : tablePatterns) {
    String trimPat=pat != null ? pat.trim() : pat;
    List<? extends NamedColumnSet> tables=tableBuilder.getColumnSets(catName,schemaName,trimPat);
    for (    NamedColumnSet t : tables) {
      tableCount++;
      evalAllCounts(catName,schemaName,t,schemaIndic,true,ok);
    }
  }
  schemaIndic.setTableCount(tableCount);
  ViewBuilder viewBuilder=new ViewBuilder(connection);
  int viewCount=0;
  final String[] viewPatterns=viewPattern != null && viewPattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.viewPattern,FILTER_SEP) : new String[]{this.viewPattern};
  for (  String pat : viewPatterns) {
    String trimPat=pat != null ? pat.trim() : pat;
    List<? extends NamedColumnSet> views=viewBuilder.getColumnSets(catName,schemaName,trimPat);
    for (    NamedColumnSet t : views) {
      viewCount++;
      evalAllCounts(catName,schemaName,t,schemaIndic,false,ok);
    }
  }
  schemaIndic.setViewCount(viewCount);
  if (hasCatalog && hasSchema) {
    this.addToConnectionIndicator(connectionIndicator,catalogIndic);
    catalogIndic.addSchemaIndicator(schemaIndic);
    catalogIndic.setTableCount(catalogIndic.getTableCount() + tableCount);
    catalogIndic.setTableRowCount(catalogIndic.getTableRowCount() + schemaIndic.getTableRowCount());
    catalogIndic.setViewRowCount(catalogIndic.getViewRowCount() + schemaIndic.getViewRowCount());
  }
 else   if (!hasCatalog) {
    this.addToConnectionIndicator(connectionIndicator,schemaIndic);
  }
 else   if (!hasSchema) {
    if (SchemaPackage.eINSTANCE.getCatalogIndicator().equals(schemaIndic.eClass())) {
      this.addToConnectionIndicator(connectionIndicator,schemaIndic);
    }
 else {
      log.error(""String_Node_Str"");
    }
  }
}",0.8326987681970884
140132,"/** 
 * DOC scorreia Comment method ""queryOnTable"".
 * @param catalog
 * @param schema
 * @param schemaIndic
 * @param tablesSet
 * @param tableCube
 * @param ok
 * @throws SQLException
 */
private void evalAllCounts(String catalog,String schema,NamedColumnSet t,SchemaIndicator schemaIndic,boolean isTable,ReturnCode ok) throws SQLException {
  String quCatalog=catalog == null ? null : dbms().quote(catalog);
  String quSchema=schema == null ? null : dbms().quote(schema);
  String quTable=dbms().quote(t.getName());
  if (isTable) {
    long rowCount=getRowCounts(quCatalog,quSchema,quTable);
    schemaIndic.setTableRowCount(schemaIndic.getTableRowCount() + rowCount);
    int pkCount=getPKCount(quCatalog,quSchema,quTable);
    schemaIndic.setKeyCount(schemaIndic.getKeyCount() + pkCount);
    int idxCount=getIndexCount(quCatalog,quSchema,quTable);
    schemaIndic.setIndexCount(schemaIndic.getIndexCount() + idxCount);
    createTableIndicator(t,schemaIndic,rowCount,pkCount,idxCount);
  }
 else {
    long rowCount=getRowCounts(quCatalog,quSchema,quTable);
    schemaIndic.setViewRowCount(schemaIndic.getViewRowCount() + rowCount);
    createViewIndicator(t,schemaIndic,rowCount);
  }
}","/** 
 * DOC scorreia Comment method ""queryOnTable"".
 * @param catalog
 * @param schema
 * @param schemaIndic
 * @param tablesSet
 * @param tableCube
 * @param ok
 * @throws SQLException
 */
private void evalAllCounts(String catalog,String schema,NamedColumnSet t,SchemaIndicator schemaIndic,boolean isTable,ReturnCode ok) throws SQLException {
  String quCatalog=catalog == null ? null : dbms().quote(catalog);
  String quSchema=schema == null ? null : dbms().quote(schema);
  final String table=t.getName();
  String quTable=dbms().quote(table);
  if (isTable) {
    long rowCount=getRowCounts(quCatalog,quSchema,quTable);
    schemaIndic.setTableRowCount(schemaIndic.getTableRowCount() + rowCount);
    int pkCount=getPKCount(catalog,schema,table);
    schemaIndic.setKeyCount(schemaIndic.getKeyCount() + pkCount);
    int idxCount=getIndexCount(catalog,schema,table);
    schemaIndic.setIndexCount(schemaIndic.getIndexCount() + idxCount);
    createTableIndicator(t,schemaIndic,rowCount,pkCount,idxCount);
  }
 else {
    long rowCount=getRowCounts(quCatalog,quSchema,quTable);
    schemaIndic.setViewRowCount(schemaIndic.getViewRowCount() + rowCount);
    createViewIndicator(t,schemaIndic,rowCount);
  }
}",0.9484193011647256
140133,"/** 
 * DOC scorreia Comment method ""getPKCount"".
 * @param quCatalog
 * @param quSchema
 * @param quTable
 * @param pkCount
 * @return
 * @throws SQLException
 */
private int getPKCount(String quCatalog,String quSchema,String quTable) throws SQLException {
  int pkCount=0;
  ResultSet pk=null;
  try {
    pk=getConnection().getMetaData().getPrimaryKeys(quCatalog,quSchema,quTable);
  }
 catch (  SQLException e1) {
    log.warn(""String_Node_Str"" + this.dbms().toQualifiedName(quCatalog,quSchema,quTable) + ""String_Node_Str""+ e1.getLocalizedMessage(),e1);
    reloadConnectionAfterException(quCatalog);
  }
  if (pk != null) {
    while (pk.next()) {
      pkCount+=1;
    }
    pk.close();
  }
  return pkCount;
}","/** 
 * DOC scorreia Comment method ""getPKCount"".
 * @param catalog
 * @param schema
 * @param table
 * @param pkCount
 * @return
 * @throws SQLException
 */
private int getPKCount(String catalog,String schema,String table) throws SQLException {
  int pkCount=0;
  ResultSet pk=null;
  try {
    pk=getConnection().getMetaData().getPrimaryKeys(catalog,schema,table);
  }
 catch (  SQLException e1) {
    log.warn(""String_Node_Str"" + this.dbms().toQualifiedName(catalog,schema,table) + ""String_Node_Str""+ e1.getLocalizedMessage(),e1);
    reloadConnectionAfterException(catalog);
  }
  if (pk != null) {
    while (pk.next()) {
      pkCount+=1;
    }
    pk.close();
  }
  return pkCount;
}",0.9630156472261736
140134,"/** 
 * DOC scorreia Comment method ""getIndexCount"".
 * @param quCatalog
 * @param quSchema
 * @param quTable
 * @param idxCount
 * @return
 * @throws SQLException
 */
private int getIndexCount(String quCatalog,String quSchema,String quTable) throws SQLException {
  int idxCount=0;
  ResultSet idx=null;
  try {
    idx=getConnection().getMetaData().getIndexInfo(quCatalog,quSchema,quTable,false,false);
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"" + this.dbms().toQualifiedName(quCatalog,quSchema,quTable) + ""String_Node_Str""+ e.getLocalizedMessage(),e);
    reloadConnectionAfterException(quCatalog);
  }
  if (idx != null) {
    while (idx.next()) {
      idxCount+=1;
    }
    idx.close();
  }
  return idxCount;
}","/** 
 * DOC scorreia Comment method ""getIndexCount"".
 * @param catalog
 * @param schema
 * @param table
 * @param idxCount
 * @return
 * @throws SQLException
 */
private int getIndexCount(String catalog,String schema,String table) throws SQLException {
  int idxCount=0;
  ResultSet idx=null;
  try {
    idx=getConnection().getMetaData().getIndexInfo(catalog,schema,table,false,false);
  }
 catch (  SQLException e) {
    log.warn(""String_Node_Str"" + this.dbms().toQualifiedName(catalog,schema,table) + ""String_Node_Str""+ e.getLocalizedMessage(),e);
    reloadConnectionAfterException(catalog);
  }
  if (idx != null) {
    while (idx.next()) {
      idxCount+=1;
    }
    idx.close();
  }
  return idxCount;
}",0.8910344827586207
140135,"public static void createTable(Composite parent,ChartWithData inputObject,final Analysis analysis){
  final TableViewer tbViewer=new TableViewer(parent,SWT.BORDER | SWT.FULL_SELECTION);
  final Table table=tbViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  GridData gd=new GridData();
  gd.heightHint=220;
  gd.widthHint=500;
  gd.verticalAlignment=SWT.BEGINNING;
  table.setLayoutData(gd);
  String[] names=null;
  Integer[] widths=null;
  final EIndicatorChartType chartTableType=inputObject.getChartType();
switch (chartTableType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
case PATTERN_FREQUENCE_STATISTICS:
case PATTERN_LOW_FREQUENCE_STATISTICS:
    names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  widths=new Integer[]{200,150,150};
break;
case MODE_INDICATOR:
names=new String[]{""String_Node_Str""};
widths=new Integer[]{500};
break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,75,75,75,75};
break;
case SIMPLE_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,150,150};
break;
case TEXT_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
case SUMMARY_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
default :
}
createTableColumnStructure(names,widths,table);
tbViewer.setLabelProvider(ChartTableProviderFactory.createLabelProvider(chartTableType));
tbViewer.setContentProvider(ChartTableProviderFactory.createContentProvider(chartTableType));
tbViewer.setInput(inputObject);
tbViewer.getTable().addMouseListener(new MouseAdapter(){
@Override public void mouseDown(MouseEvent e){
if (e.button == 3) {
StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
final Indicator indicator=dataEntity.getIndicator();
if (indicator != null) {
Menu menu=new Menu(table.getShell(),SWT.POP_UP);
table.setMenu(menu);
int createPatternFlag=0;
MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartTableType,analysis,dataEntity);
for (final MenuItemEntity itemEntity : itemEntities) {
MenuItem item=new MenuItem(menu,SWT.PUSH);
item.setText(itemEntity.getLabel());
item.setImage(itemEntity.getIcon());
item.addListener(SWT.Selection,new Listener(){
public void handleEvent(Event event){
viewRecordInDataExplorer(analysis,indicator,itemEntity.getQuery());
}
}
);
if ((indicator.getName().trim().equals(""String_Node_Str"") || indicator.getName().trim().equals(""String_Node_Str"")) && createPatternFlag == 0) {
MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
itemCreatePatt.setText(""String_Node_Str"");
itemCreatePatt.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
createPattern(analysis,itemEntity,pattTransformer);
}
}
);
}
}
createPatternFlag++;
menu.setVisible(true);
}
}
}
}
);
addTooltipOnTableItem(table);
}","public static void createTable(Composite parent,ChartWithData inputObject,final Analysis analysis){
  final TableViewer tbViewer=new TableViewer(parent,SWT.BORDER | SWT.FULL_SELECTION);
  final Table table=tbViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  GridData gd=new GridData();
  gd.heightHint=220;
  gd.widthHint=500;
  gd.verticalAlignment=SWT.BEGINNING;
  table.setLayoutData(gd);
  String[] names=null;
  Integer[] widths=null;
  final EIndicatorChartType chartTableType=inputObject.getChartType();
switch (chartTableType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
case PATTERN_FREQUENCE_STATISTICS:
case PATTERN_LOW_FREQUENCE_STATISTICS:
    names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  widths=new Integer[]{200,150,150};
break;
case MODE_INDICATOR:
names=new String[]{""String_Node_Str""};
widths=new Integer[]{500};
break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,75,75,75,75};
break;
case SIMPLE_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,150,150};
break;
case TEXT_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
case SUMMARY_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
default :
}
createTableColumnStructure(names,widths,table);
tbViewer.setLabelProvider(ChartTableProviderFactory.createLabelProvider(chartTableType));
tbViewer.setContentProvider(ChartTableProviderFactory.createContentProvider(chartTableType));
tbViewer.setInput(inputObject);
tbViewer.getTable().addMouseListener(new MouseAdapter(){
@Override public void mouseDown(MouseEvent e){
if (e.button == 3) {
StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
final Indicator indicator=dataEntity.getIndicator();
if (indicator != null) {
Menu menu=new Menu(table.getShell(),SWT.POP_UP);
table.setMenu(menu);
int createPatternFlag=0;
MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartTableType,analysis,dataEntity);
for (final MenuItemEntity itemEntity : itemEntities) {
MenuItem item=new MenuItem(menu,SWT.PUSH);
item.setText(itemEntity.getLabel());
item.setImage(itemEntity.getIcon());
item.addListener(SWT.Selection,new Listener(){
public void handleEvent(Event event){
viewRecordInDataExplorer(analysis,indicator,itemEntity.getQuery());
}
}
);
if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator)) && createPatternFlag == 0) {
MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
itemCreatePatt.setText(""String_Node_Str"");
itemCreatePatt.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
createPattern(analysis,itemEntity,pattTransformer);
}
}
);
}
}
createPatternFlag++;
menu.setVisible(true);
}
}
}
}
);
addTooltipOnTableItem(table);
}",0.9750114977770964
140136,"@Override public void mouseDown(MouseEvent e){
  if (e.button == 3) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    final Indicator indicator=dataEntity.getIndicator();
    if (indicator != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartTableType,analysis,dataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addListener(SWT.Selection,new Listener(){
          public void handleEvent(          Event event){
            viewRecordInDataExplorer(analysis,indicator,itemEntity.getQuery());
          }
        }
);
        if ((indicator.getName().trim().equals(""String_Node_Str"") || indicator.getName().trim().equals(""String_Node_Str"")) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.setText(""String_Node_Str"");
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            public void widgetSelected(            SelectionEvent e){
              createPattern(analysis,itemEntity,pattTransformer);
            }
          }
);
        }
      }
      createPatternFlag++;
      menu.setVisible(true);
    }
  }
}","@Override public void mouseDown(MouseEvent e){
  if (e.button == 3) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    final Indicator indicator=dataEntity.getIndicator();
    if (indicator != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartTableType,analysis,dataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addListener(SWT.Selection,new Listener(){
          public void handleEvent(          Event event){
            viewRecordInDataExplorer(analysis,indicator,itemEntity.getQuery());
          }
        }
);
        if (((indicator instanceof PatternFreqIndicator || indicator instanceof PatternLowFreqIndicator)) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.setText(""String_Node_Str"");
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            public void widgetSelected(            SelectionEvent e){
              createPattern(analysis,itemEntity,pattTransformer);
            }
          }
);
        }
      }
      createPatternFlag++;
      menu.setVisible(true);
    }
  }
}",0.7903759398496241
140137,"public static void createTable(Composite parent,ChartWithData inputObject,final Analysis analysis){
  final TableViewer tbViewer=new TableViewer(parent,SWT.BORDER | SWT.FULL_SELECTION);
  final Table table=tbViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  GridData gd=new GridData();
  gd.heightHint=220;
  gd.widthHint=500;
  gd.verticalAlignment=SWT.BEGINNING;
  table.setLayoutData(gd);
  String[] names=null;
  Integer[] widths=null;
  final EIndicatorChartType chartTableType=inputObject.getChartType();
switch (chartTableType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
case PATTERN_FREQUENCE_STATISTICS:
case PATTERN_LOW_FREQUENCE_STATISTICS:
    names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  widths=new Integer[]{200,150,150};
break;
case MODE_INDICATOR:
names=new String[]{""String_Node_Str""};
widths=new Integer[]{500};
break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,75,75,75,75};
break;
case SIMPLE_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,150,150};
break;
case TEXT_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
case SUMMARY_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
default :
}
createTableColumnStructure(names,widths,table);
tbViewer.setLabelProvider(ChartTableProviderFactory.createLabelProvider(chartTableType));
tbViewer.setContentProvider(ChartTableProviderFactory.createContentProvider(chartTableType));
tbViewer.setInput(inputObject);
tbViewer.getTable().addMouseListener(new MouseAdapter(){
@Override public void mouseDown(MouseEvent e){
if (e.button == 3) {
StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
final Indicator indicator=dataEntity.getIndicator();
if (indicator != null) {
Menu menu=new Menu(table.getShell(),SWT.POP_UP);
table.setMenu(menu);
int createPatternFlag=0;
MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartTableType,analysis,dataEntity);
for (final MenuItemEntity itemEntity : itemEntities) {
MenuItem item=new MenuItem(menu,SWT.PUSH);
item.setText(itemEntity.getLabel());
item.setImage(itemEntity.getIcon());
item.addListener(SWT.Selection,new Listener(){
public void handleEvent(Event event){
viewRecordInDataExplorer(analysis,indicator,itemEntity.getQuery());
}
}
);
if (createPatternFlag == 0) {
MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
itemCreatePatt.setText(""String_Node_Str"");
itemCreatePatt.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
createPattern(analysis,itemEntity,pattTransformer);
}
}
);
}
}
createPatternFlag++;
menu.setVisible(true);
}
}
}
}
);
addTooltipOnTableItem(table);
}","public static void createTable(Composite parent,ChartWithData inputObject,final Analysis analysis){
  final TableViewer tbViewer=new TableViewer(parent,SWT.BORDER | SWT.FULL_SELECTION);
  final Table table=tbViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  GridData gd=new GridData();
  gd.heightHint=220;
  gd.widthHint=500;
  gd.verticalAlignment=SWT.BEGINNING;
  table.setLayoutData(gd);
  String[] names=null;
  Integer[] widths=null;
  final EIndicatorChartType chartTableType=inputObject.getChartType();
switch (chartTableType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
case PATTERN_FREQUENCE_STATISTICS:
case PATTERN_LOW_FREQUENCE_STATISTICS:
    names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  widths=new Integer[]{200,150,150};
break;
case MODE_INDICATOR:
names=new String[]{""String_Node_Str""};
widths=new Integer[]{500};
break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,75,75,75,75};
break;
case SIMPLE_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,150,150};
break;
case TEXT_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
case SUMMARY_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
default :
}
createTableColumnStructure(names,widths,table);
tbViewer.setLabelProvider(ChartTableProviderFactory.createLabelProvider(chartTableType));
tbViewer.setContentProvider(ChartTableProviderFactory.createContentProvider(chartTableType));
tbViewer.setInput(inputObject);
tbViewer.getTable().addMouseListener(new MouseAdapter(){
@Override public void mouseDown(MouseEvent e){
if (e.button == 3) {
StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
final Indicator indicator=dataEntity.getIndicator();
if (indicator != null) {
Menu menu=new Menu(table.getShell(),SWT.POP_UP);
table.setMenu(menu);
int createPatternFlag=0;
MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartTableType,analysis,dataEntity);
for (final MenuItemEntity itemEntity : itemEntities) {
MenuItem item=new MenuItem(menu,SWT.PUSH);
item.setText(itemEntity.getLabel());
item.setImage(itemEntity.getIcon());
item.addListener(SWT.Selection,new Listener(){
public void handleEvent(Event event){
viewRecordInDataExplorer(analysis,indicator,itemEntity.getQuery());
}
}
);
if ((indicator.getName().trim().equals(""String_Node_Str"") || indicator.getName().trim().equals(""String_Node_Str"")) && createPatternFlag == 0) {
MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
itemCreatePatt.setText(""String_Node_Str"");
itemCreatePatt.addSelectionListener(new SelectionAdapter(){
public void widgetSelected(SelectionEvent e){
createPattern(analysis,itemEntity,pattTransformer);
}
}
);
}
}
createPatternFlag++;
menu.setVisible(true);
}
}
}
}
);
addTooltipOnTableItem(table);
}",0.9822595704948646
140138,"@Override public void mouseDown(MouseEvent e){
  if (e.button == 3) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    final Indicator indicator=dataEntity.getIndicator();
    if (indicator != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartTableType,analysis,dataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addListener(SWT.Selection,new Listener(){
          public void handleEvent(          Event event){
            viewRecordInDataExplorer(analysis,indicator,itemEntity.getQuery());
          }
        }
);
        if (createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.setText(""String_Node_Str"");
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            public void widgetSelected(            SelectionEvent e){
              createPattern(analysis,itemEntity,pattTransformer);
            }
          }
);
        }
      }
      createPatternFlag++;
      menu.setVisible(true);
    }
  }
}","@Override public void mouseDown(MouseEvent e){
  if (e.button == 3) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    final Indicator indicator=dataEntity.getIndicator();
    if (indicator != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartTableType,analysis,dataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addListener(SWT.Selection,new Listener(){
          public void handleEvent(          Event event){
            viewRecordInDataExplorer(analysis,indicator,itemEntity.getQuery());
          }
        }
);
        if ((indicator.getName().trim().equals(""String_Node_Str"") || indicator.getName().trim().equals(""String_Node_Str"")) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.setText(""String_Node_Str"");
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            public void widgetSelected(            SelectionEvent e){
              createPattern(analysis,itemEntity,pattTransformer);
            }
          }
);
        }
      }
      createPatternFlag++;
      menu.setVisible(true);
    }
  }
}",0.9646840148698884
140139,"public void chartMouseClicked(ChartMouseEvent event){
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    IDataEntity dataEntity=(IDataEntity)cateEntity.getDataset();
    ChartDataEntity currentDataEntity=null;
    ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
    if (dataEntities.length == 1) {
      currentDataEntity=dataEntities[0];
    }
 else {
      for (      ChartDataEntity entity : dataEntities) {
switch (chartType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
case PATTERN_FREQUENCE_STATISTICS:
case PATTERN_LOW_FREQUENCE_STATISTICS:
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
        break;
default :
      if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
        currentDataEntity=entity;
      }
  }
}
}
PopupMenu menu=new PopupMenu(DefaultMessagesImpl.getString(""String_Node_Str""));
if (currentDataEntity != null) {
final Indicator currentIndicator=currentDataEntity.getIndicator();
int createPatternFlag=0;
MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartType,analysis,currentDataEntity);
for (final MenuItemEntity itemEntity : itemEntities) {
  MenuItem item=new MenuItem(itemEntity.getLabel());
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          ChartTableFactory.viewRecordInDataExplorer(analysis,currentIndicator,itemEntity.getQuery());
        }
      }
);
    }
  }
);
  menu.add(item);
  if (createPatternFlag == 0) {
    MenuItem itemCreatePatt=new MenuItem(""String_Node_Str"");
    final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
    itemCreatePatt.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
          }
        }
);
      }
    }
);
    menu.add(itemCreatePatt);
  }
}
chartPanel.add(menu);
menu.show(chartPanel,event.getTrigger().getX(),event.getTrigger().getY());
createPatternFlag++;
}
}
}","public void chartMouseClicked(ChartMouseEvent event){
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    IDataEntity dataEntity=(IDataEntity)cateEntity.getDataset();
    ChartDataEntity currentDataEntity=null;
    ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
    if (dataEntities.length == 1) {
      currentDataEntity=dataEntities[0];
    }
 else {
      for (      ChartDataEntity entity : dataEntities) {
switch (chartType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
case PATTERN_FREQUENCE_STATISTICS:
case PATTERN_LOW_FREQUENCE_STATISTICS:
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
        break;
default :
      if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
        currentDataEntity=entity;
      }
  }
}
}
PopupMenu menu=new PopupMenu(DefaultMessagesImpl.getString(""String_Node_Str""));
if (currentDataEntity != null) {
final Indicator currentIndicator=currentDataEntity.getIndicator();
int createPatternFlag=0;
MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartType,analysis,currentDataEntity);
for (final MenuItemEntity itemEntity : itemEntities) {
  MenuItem item=new MenuItem(itemEntity.getLabel());
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          ChartTableFactory.viewRecordInDataExplorer(analysis,currentIndicator,itemEntity.getQuery());
        }
      }
);
    }
  }
);
  menu.add(item);
  if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
    MenuItem itemCreatePatt=new MenuItem(""String_Node_Str"");
    final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
    itemCreatePatt.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
          }
        }
);
      }
    }
);
    menu.add(itemCreatePatt);
  }
}
chartPanel.add(menu);
menu.show(chartPanel,event.getTrigger().getX(),event.getTrigger().getY());
createPatternFlag++;
}
}
}",0.9776959279721712
140140,"private void addMouseListenerForChart(final ChartPanel chartPanel,final EIndicatorChartType chartType,final Analysis analysis){
  chartPanel.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        IDataEntity dataEntity=(IDataEntity)cateEntity.getDataset();
        ChartDataEntity currentDataEntity=null;
        ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
        if (dataEntities.length == 1) {
          currentDataEntity=dataEntities[0];
        }
 else {
          for (          ChartDataEntity entity : dataEntities) {
switch (chartType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
case PATTERN_FREQUENCE_STATISTICS:
case PATTERN_LOW_FREQUENCE_STATISTICS:
              if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
                currentDataEntity=entity;
              }
            break;
default :
          if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
      }
    }
  }
  PopupMenu menu=new PopupMenu(DefaultMessagesImpl.getString(""String_Node_Str""));
  if (currentDataEntity != null) {
    final Indicator currentIndicator=currentDataEntity.getIndicator();
    int createPatternFlag=0;
    MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartType,analysis,currentDataEntity);
    for (    final MenuItemEntity itemEntity : itemEntities) {
      MenuItem item=new MenuItem(itemEntity.getLabel());
      item.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent arg0){
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              ChartTableFactory.viewRecordInDataExplorer(analysis,currentIndicator,itemEntity.getQuery());
            }
          }
);
        }
      }
);
      menu.add(item);
      if (createPatternFlag == 0) {
        MenuItem itemCreatePatt=new MenuItem(""String_Node_Str"");
        final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
        itemCreatePatt.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
              }
            }
);
          }
        }
);
        menu.add(itemCreatePatt);
      }
    }
    chartPanel.add(menu);
    menu.show(chartPanel,event.getTrigger().getX(),event.getTrigger().getY());
    createPatternFlag++;
  }
}
}
public void chartMouseMoved(ChartMouseEvent event){
}
}
);
}","private void addMouseListenerForChart(final ChartPanel chartPanel,final EIndicatorChartType chartType,final Analysis analysis){
  chartPanel.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        IDataEntity dataEntity=(IDataEntity)cateEntity.getDataset();
        ChartDataEntity currentDataEntity=null;
        ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
        if (dataEntities.length == 1) {
          currentDataEntity=dataEntities[0];
        }
 else {
          for (          ChartDataEntity entity : dataEntities) {
switch (chartType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
case PATTERN_FREQUENCE_STATISTICS:
case PATTERN_LOW_FREQUENCE_STATISTICS:
              if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
                currentDataEntity=entity;
              }
            break;
default :
          if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
      }
    }
  }
  PopupMenu menu=new PopupMenu(DefaultMessagesImpl.getString(""String_Node_Str""));
  if (currentDataEntity != null) {
    final Indicator currentIndicator=currentDataEntity.getIndicator();
    int createPatternFlag=0;
    MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartType,analysis,currentDataEntity);
    for (    final MenuItemEntity itemEntity : itemEntities) {
      MenuItem item=new MenuItem(itemEntity.getLabel());
      item.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent arg0){
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              ChartTableFactory.viewRecordInDataExplorer(analysis,currentIndicator,itemEntity.getQuery());
            }
          }
);
        }
      }
);
      menu.add(item);
      if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
        MenuItem itemCreatePatt=new MenuItem(""String_Node_Str"");
        final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
        itemCreatePatt.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
              }
            }
);
          }
        }
);
        menu.add(itemCreatePatt);
      }
    }
    chartPanel.add(menu);
    menu.show(chartPanel,event.getTrigger().getX(),event.getTrigger().getY());
    createPatternFlag++;
  }
}
}
public void chartMouseMoved(ChartMouseEvent event){
}
}
);
}",0.9814215101414692
140141,"private void showTip(TableItem item,String msg){
  if (tip != null && !tip.isDisposed()) {
    tip.dispose();
  }
  tip=new Shell(shell,SWT.ON_TOP | SWT.TOOL);
  tip.setLayout(new FillLayout());
  label=new Label(tip,SWT.NONE);
  label.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
  label.setData(""String_Node_Str"",item);
  label.setText(msg);
  label.addListener(SWT.MouseExit,labelListener);
  label.addListener(SWT.MouseDown,labelListener);
  Point size=tip.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  Rectangle rect=item.getBounds(1);
  Point pt=table.toDisplay(rect.x,rect.y);
  tip.setBounds(pt.x + 10,pt.y + 10,size.x,size.y);
  tip.setVisible(true);
}","private void showTip(TableItem item,String msg){
  if (tip != null && !tip.isDisposed()) {
    tip.dispose();
  }
  tip=new Shell(shell,SWT.ON_TOP | SWT.TOOL);
  tip.setLayout(new FillLayout());
  label=new Label(tip,SWT.NONE);
  label.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
  label.setData(""String_Node_Str"",item);
  label.setText(msg);
  label.addListener(SWT.MouseExit,labelListener);
  label.addListener(SWT.MouseDown,labelListener);
  Point size=tip.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  Rectangle rect=item.getBounds(1);
  Point pt=table.toDisplay(rect.x,rect.y);
  tip.setBounds(pt.x + 10,pt.y + 18,size.x,size.y);
  tip.setVisible(true);
}",0.9985486211901308
140142,"private static void addTooltipOnTableItem(final Table table){
  table.setToolTipText(""String_Node_Str"");
  final Shell shell=new Shell(PlatformUI.getWorkbench().getDisplay());
  shell.setLayout(new FillLayout());
  final Listener labelListener=new Listener(){
    public void handleEvent(    Event event){
      Label label=(Label)event.widget;
      Shell shell=label.getShell();
switch (event.type) {
case SWT.MouseDown:
        Event e=new Event();
      e.item=(TableItem)label.getData(""String_Node_Str"");
    table.setSelection(new TableItem[]{(TableItem)e.item});
  table.notifyListeners(SWT.Selection,e);
case SWT.MouseExit:
shell.dispose();
break;
default :
break;
}
}
}
;
Listener tableListener=new Listener(){
Shell tip=null;
Label label=null;
public void handleEvent(Event event){
switch (event.type) {
case SWT.Dispose:
case SWT.KeyDown:
case SWT.MouseMove:
if (tip == null) {
break;
}
tip.dispose();
tip=null;
label=null;
break;
case SWT.MouseHover:
TableItem item=table.getItem(new Point(event.x,event.y));
if (item != null) {
ChartDataEntity entity=(ChartDataEntity)item.getData();
String rangeAsString=entity.getRangeAsString();
if (rangeAsString != null) {
showTip(item,rangeAsString);
}
}
default :
break;
}
}
private void showTip(TableItem item,String msg){
if (tip != null && !tip.isDisposed()) {
tip.dispose();
}
tip=new Shell(shell,SWT.ON_TOP | SWT.TOOL);
tip.setLayout(new FillLayout());
label=new Label(tip,SWT.NONE);
label.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
label.setData(""String_Node_Str"",item);
label.setText(msg);
label.addListener(SWT.MouseExit,labelListener);
label.addListener(SWT.MouseDown,labelListener);
Point size=tip.computeSize(SWT.DEFAULT,SWT.DEFAULT);
Rectangle rect=item.getBounds(1);
Point pt=table.toDisplay(rect.x,rect.y);
tip.setBounds(pt.x + 10,pt.y + 10,size.x,size.y);
tip.setVisible(true);
}
}
;
table.addListener(SWT.Dispose,tableListener);
table.addListener(SWT.KeyDown,tableListener);
table.addListener(SWT.MouseMove,tableListener);
table.addListener(SWT.MouseHover,tableListener);
}","private static void addTooltipOnTableItem(final Table table){
  table.setToolTipText(""String_Node_Str"");
  final Shell shell=new Shell(PlatformUI.getWorkbench().getDisplay());
  shell.setLayout(new FillLayout());
  final Listener labelListener=new Listener(){
    public void handleEvent(    Event event){
      Label label=(Label)event.widget;
      Shell shell=label.getShell();
switch (event.type) {
case SWT.MouseDown:
        Event e=new Event();
      e.item=(TableItem)label.getData(""String_Node_Str"");
    table.setSelection(new TableItem[]{(TableItem)e.item});
  table.notifyListeners(SWT.Selection,e);
case SWT.MouseExit:
shell.dispose();
break;
default :
break;
}
}
}
;
Listener tableListener=new Listener(){
Shell tip=null;
Label label=null;
public void handleEvent(Event event){
switch (event.type) {
case SWT.Dispose:
case SWT.KeyDown:
case SWT.MouseMove:
if (tip == null) {
break;
}
tip.dispose();
tip=null;
label=null;
break;
case SWT.MouseHover:
TableItem item=table.getItem(new Point(event.x,event.y));
if (item != null) {
ChartDataEntity entity=(ChartDataEntity)item.getData();
String rangeAsString=entity.getRangeAsString();
if (rangeAsString != null) {
showTip(item,rangeAsString);
}
}
default :
break;
}
}
private void showTip(TableItem item,String msg){
if (tip != null && !tip.isDisposed()) {
tip.dispose();
}
tip=new Shell(shell,SWT.ON_TOP | SWT.TOOL);
tip.setLayout(new FillLayout());
label=new Label(tip,SWT.NONE);
label.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
label.setData(""String_Node_Str"",item);
label.setText(msg);
label.addListener(SWT.MouseExit,labelListener);
label.addListener(SWT.MouseDown,labelListener);
Point size=tip.computeSize(SWT.DEFAULT,SWT.DEFAULT);
Rectangle rect=item.getBounds(1);
Point pt=table.toDisplay(rect.x,rect.y);
tip.setBounds(pt.x + 10,pt.y + 18,size.x,size.y);
tip.setVisible(true);
}
}
;
table.addListener(SWT.Dispose,tableListener);
table.addListener(SWT.KeyDown,tableListener);
table.addListener(SWT.MouseMove,tableListener);
table.addListener(SWT.MouseHover,tableListener);
}",0.9995187680461982
140143,"/** 
 * DOC Zqin Comment method ""isEmpty"".
 * @param strs
 * @return
 */
public static boolean isEmpty(String... strs){
  if (strs == null) {
    return false;
  }
  for (  String str : strs) {
    if (""String_Node_Str"".equals(str.trim())) {
      return true;
    }
  }
  return false;
}","/** 
 * DOC Zqin Comment method ""isEmpty"".
 * @param strs
 * @return
 */
public static boolean isEmpty(String... strs){
  if (strs == null) {
    return false;
  }
  for (  String str : strs) {
    if (str == null) {
      return true;
    }
 else     if (""String_Node_Str"".equals(str.trim())) {
      return true;
    }
  }
  return false;
}",0.9142857142857144
140144,"@Override protected boolean checkFieldsValue(){
  String min, max;
  String pmin, pmax;
  if (canUsed) {
    min=lowerText.getText();
    max=higherText.getText();
    pmin=pLowerText.getText();
    pmax=pHigherText.getText();
    boolean flag=false;
    if (!CheckValueUtils.isEmpty(min,max)) {
      flag=checkFinished(min,max);
    }
    if (!CheckValueUtils.isEmpty(pmin,pmax)) {
      flag=flag && checkFinished(pmin,pmax);
    }
    return flag;
  }
 else {
    min=lowerText.getText();
    max=higherText.getText();
    if (!CheckValueUtils.isEmpty(min,max)) {
      return checkFinished(min,max);
    }
  }
  return false;
}","@Override protected boolean checkFieldsValue(){
  return false;
}",0.1865136298421807
140145,"@Override protected void addFieldsListeners(){
  lowerText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=lowerText.getText();
      if (!CheckValueUtils.isNumberWithNegativeValue(min)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  higherText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String max=higherText.getText();
      if (!CheckValueUtils.isNumberWithNegativeValue(max)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
  }
);
  if (canUsed) {
    pLowerText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        checkInput(pLowerText.getText());
      }
    }
);
    pHigherText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        checkInput(pHigherText.getText());
      }
    }
);
  }
}","@Override protected void addFieldsListeners(){
  lowerText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=lowerText.getText();
      String max=higherText.getText();
      if (!CheckValueUtils.isEmpty(min)) {
        if (!CheckValueUtils.isNumberWithNegativeValue(min)) {
          updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
        }
 else         if (!CheckValueUtils.isEmpty(max) && CheckValueUtils.isAoverB(min,max)) {
          updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
        }
 else {
          updateStatus(IStatus.OK,MSG_OK);
        }
      }
 else {
        updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
      }
    }
  }
);
  higherText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=lowerText.getText();
      String max=higherText.getText();
      if (!CheckValueUtils.isEmpty(max)) {
        if (!CheckValueUtils.isNumberWithNegativeValue(max)) {
          updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
        }
 else         if (!CheckValueUtils.isEmpty(min) && CheckValueUtils.isAoverB(min,max)) {
          updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
        }
 else {
          updateStatus(IStatus.OK,MSG_OK);
        }
      }
 else {
        updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
      }
    }
  }
);
  if (canUsed) {
    pLowerText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String pmin=pLowerText.getText();
        String pmax=pHigherText.getText();
        if (!CheckValueUtils.isEmpty(pmin)) {
          if (!CheckValueUtils.isRealNumberValue(pmin)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
          }
 else           if (CheckValueUtils.isOutRange(MIN,MAX,pmin)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_INDICATOR_VALUE_OUT_OF_RANGE);
          }
 else           if (!CheckValueUtils.isEmpty(pmax) && CheckValueUtils.isAoverB(pmin,pmax)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
 else {
          updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
        }
      }
    }
);
    pHigherText.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        String pmin=pLowerText.getText();
        String pmax=pHigherText.getText();
        if (!CheckValueUtils.isEmpty(pmax)) {
          if (!CheckValueUtils.isRealNumberValue(pmax)) {
            updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
          }
 else           if (CheckValueUtils.isOutRange(MIN,MAX,pmax)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_INDICATOR_VALUE_OUT_OF_RANGE);
          }
 else           if (!CheckValueUtils.isEmpty(pmin) && CheckValueUtils.isAoverB(pmin,pmax)) {
            updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
          }
 else {
            updateStatus(IStatus.OK,MSG_OK);
          }
        }
 else {
          updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
        }
      }
    }
);
  }
}",0.4793814432989691
140146,"public void modifyText(ModifyEvent e){
  checkInput(pHigherText.getText());
}","public void modifyText(ModifyEvent e){
  String pmin=pLowerText.getText();
  String pmax=pHigherText.getText();
  if (!CheckValueUtils.isEmpty(pmax)) {
    if (!CheckValueUtils.isRealNumberValue(pmax)) {
      updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
    }
 else     if (CheckValueUtils.isOutRange(MIN,MAX,pmax)) {
      updateStatus(IStatus.ERROR,UIMessages.MSG_INDICATOR_VALUE_OUT_OF_RANGE);
    }
 else     if (!CheckValueUtils.isEmpty(pmin) && CheckValueUtils.isAoverB(pmin,pmax)) {
      updateStatus(IStatus.ERROR,UIMessages.MSG_LOWER_LESS_HIGHER);
    }
 else {
      updateStatus(IStatus.OK,MSG_OK);
    }
  }
 else {
    updateStatus(IStatus.OK,UIMessages.MSG_INDICATOR_WIZARD);
  }
}",0.1335044929396662
140147,"@Override public boolean performFinish(){
  if (checkFieldsValue()) {
    String min=lowerText.getText();
    String max=higherText.getText();
    if (!CheckValueUtils.isEmpty(min,max)) {
      IndicatorHelper.setIndicatorThreshold(parameters,min,max);
    }
    if (canUsed) {
      String pmin=pLowerText.getText();
      String pmax=pHigherText.getText();
      if (!CheckValueUtils.isEmpty(pmin,pmax)) {
        IndicatorHelper.setIndicatorThresholdInPercent(parameters,pmin,pmax);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean performFinish(){
  boolean isMinEmpty=CheckValueUtils.isEmpty(lowerText.getText());
  boolean isMaxEmpty=CheckValueUtils.isEmpty(higherText.getText());
  if (canUsed) {
    boolean isPerMinEmpty=CheckValueUtils.isEmpty(pLowerText.getText());
    boolean isPerMaxEmpty=CheckValueUtils.isEmpty(pHigherText.getText());
    if (isMinEmpty && isMaxEmpty && isPerMinEmpty&& isPerMaxEmpty) {
      parameters.setIndicatorValidDomain(null);
    }
 else {
      if (isMinEmpty && isMaxEmpty) {
        removeRange(VALUE_THRESHOLD);
      }
 else {
        IndicatorHelper.setIndicatorThreshold(parameters,lowerText.getText(),higherText.getText());
      }
      if (isPerMinEmpty && isPerMaxEmpty) {
        removeRange(PERCENTAGE_THRESHOLD);
      }
 else {
        IndicatorHelper.setIndicatorThresholdInPercent(parameters,pLowerText.getText(),pHigherText.getText());
      }
    }
  }
 else {
    if (isMinEmpty && isMaxEmpty) {
      parameters.setIndicatorValidDomain(null);
    }
 else {
      IndicatorHelper.setIndicatorThreshold(parameters,lowerText.getText(),higherText.getText());
    }
  }
  return true;
}",0.2368421052631578
140148,"private void createTechnicalDetail(EObject fe){
  Label idLab=new Label(tContainer,SWT.NONE);
  idLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  newText(tContainer,ResourceHelper.getUUID(fe));
  Label pathLab=new Label(tContainer,SWT.NONE);
  pathLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  newText(tContainer,fe.eResource().getURI().path());
}","private void createTechnicalDetail(IFile fe){
  EObject object=getEObject(fe);
  if (object != null) {
    createTechnicalDetail(object);
  }
}",0.2395437262357414
140149,"public void selectionChanged(IWorkbenchPart part,ISelection selection){
  clearContainer();
  boolean is=true;
  if (part instanceof DQRespositoryView) {
    StructuredSelection sel=(StructuredSelection)selection;
    Object fe=sel.getFirstElement();
    if (fe instanceof IFile) {
      IFile fe2=(IFile)fe;
      is=createFileDetail(is,fe2);
    }
 else     if (fe instanceof TdCatalog) {
      TdCatalog catalog=(TdCatalog)fe;
      createTdCatalogDetail(catalog);
      is=false;
    }
 else     if (fe instanceof TdSchema) {
      TdSchema schema=(TdSchema)fe;
      createTdSchemaDetail(schema);
      is=false;
    }
 else     if ((fe instanceof TdTable) || fe instanceof TdView) {
      ModelElement element=(ModelElement)fe;
      createTdTVDetail(element);
      is=false;
    }
 else     if (fe instanceof TdColumn) {
      TdColumn column=(TdColumn)fe;
      createTdColumn(column);
      is=false;
    }
    if (switchFlag) {
      if (fe instanceof EObject) {
        createTechnicalDetail((EObject)fe);
      }
 else {
        createExtDefault();
      }
    }
  }
 else   if (part instanceof CommonFormEditor) {
    CommonFormEditor editor=(CommonFormEditor)part;
    IEditorInput editorInput=editor.getEditorInput();
    if (editorInput instanceof IFileEditorInput) {
      IFileEditorInput input=(IFileEditorInput)editorInput;
      IFile file=input.getFile();
      is=createFileDetail(is,file);
    }
  }
  if (is) {
    createDefault();
  }
  gContainer.layout();
  if (tContainer != null) {
    tContainer.layout();
  }
}","public void selectionChanged(IWorkbenchPart part,ISelection selection){
  clearContainer();
  boolean is=true;
  if (part instanceof DQRespositoryView) {
    StructuredSelection sel=(StructuredSelection)selection;
    Object fe=sel.getFirstElement();
    if (fe instanceof IFile) {
      IFile fe2=(IFile)fe;
      is=createFileDetail(is,fe2);
    }
 else     if (fe instanceof TdCatalog) {
      TdCatalog catalog=(TdCatalog)fe;
      createTdCatalogDetail(catalog);
      is=false;
    }
 else     if (fe instanceof TdSchema) {
      TdSchema schema=(TdSchema)fe;
      createTdSchemaDetail(schema);
      is=false;
    }
 else     if ((fe instanceof TdTable) || fe instanceof TdView) {
      ModelElement element=(ModelElement)fe;
      createTdTVDetail(element);
      is=false;
    }
 else     if (fe instanceof TdColumn) {
      TdColumn column=(TdColumn)fe;
      createTdColumn(column);
      is=false;
    }
    if (switchFlag) {
      if (fe instanceof EObject) {
        createTechnicalDetail((EObject)fe);
      }
 else       if (fe instanceof IFile) {
        createTechnicalDetail((IFile)fe);
      }
 else {
        createExtDefault();
      }
    }
  }
 else   if (part instanceof CommonFormEditor) {
    CommonFormEditor editor=(CommonFormEditor)part;
    IEditorInput editorInput=editor.getEditorInput();
    if (editorInput instanceof IFileEditorInput) {
      IFileEditorInput input=(IFileEditorInput)editorInput;
      IFile file=input.getFile();
      is=createFileDetail(is,file);
    }
  }
  if (is) {
    createDefault();
  }
  gContainer.layout();
  if (tContainer != null) {
    tContainer.layout();
  }
}",0.9719685039370078
140150,"@Override public void createPartControl(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  gContainer=new Group(composite,SWT.NONE);
  gContainer.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridLayout layout=new GridLayout(2,false);
  GridData data=new GridData(GridData.FILL_BOTH);
  gContainer.setLayout(layout);
  gContainer.setLayoutData(data);
  if (switchFlag) {
    tContainer=new Group(composite,SWT.NONE);
    tContainer.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tContainer.setLayout(new GridLayout(2,false));
    tContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
    createExtDefault();
  }
  createDefault();
  getSite().getWorkbenchWindow().getSelectionService().addSelectionListener(this);
}","@Override public void createPartControl(Composite parent){
  Composite comp=new Composite(parent,SWT.NONE);
  comp.setLayout(new FillLayout());
  ScrolledComposite scomp=new ScrolledComposite(comp,SWT.H_SCROLL | SWT.V_SCROLL);
  scomp.setLayout(new FillLayout());
  Composite composite=new Composite(scomp,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  scomp.setExpandHorizontal(true);
  scomp.setExpandVertical(true);
  scomp.setMinWidth(400);
  scomp.setMinHeight(300);
  scomp.setContent(composite);
  gContainer=new Group(composite,SWT.NONE);
  gContainer.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridLayout layout=new GridLayout(2,false);
  GridData data=new GridData(GridData.FILL_BOTH);
  gContainer.setLayout(layout);
  gContainer.setLayoutData(data);
  if (switchFlag) {
    tContainer=new Group(composite,SWT.NONE);
    tContainer.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tContainer.setLayout(new GridLayout(2,false));
    tContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
    createExtDefault();
  }
  createDefault();
  getSite().getWorkbenchWindow().getSelectionService().addSelectionListener(this);
}",0.8267045454545454
140151,"private String getTextRowsStatement(){
  String lang=dbmsLanguage.getDbmsName();
  Expression instantiatedExpression=this.indicator.getInstantiatedExpressions(lang);
  String instantiatedSQL=instantiatedExpression.getBody();
  String clause=""String_Node_Str"" + this.columnName + ""String_Node_Str""+ dbmsLanguage.equal()+ ""String_Node_Str""+ instantiatedSQL+ ""String_Node_Str"";
  return getRowsStatement(clause);
}","private String getTextRowsStatement(){
  String lang=dbmsLanguage.getDbmsName();
  Expression instantiatedExpression=this.indicator.getInstantiatedExpressions(lang);
  String instantiatedSQL=instantiatedExpression.getBody();
  String clause=dbmsLanguage.charLength(this.columnName) + dbmsLanguage.equal() + ""String_Node_Str""+ instantiatedSQL+ ""String_Node_Str"";
  return getRowsStatement(clause);
}",0.7836835599505563
140152,"@Override public String getPatternFinderDefaultFunction(String expression){
  return ""String_Node_Str"" + expression + ""String_Node_Str""+ ""String_Node_Str"";
}","@Override public String getPatternFinderDefaultFunction(String expression){
  return ""String_Node_Str"" + expression + ""String_Node_Str""+ NUM+ UPPER+ LOWER+ ""String_Node_Str""+ ""String_Node_Str""+ NUM.length()+ ""String_Node_Str""+ UPPER.length()+ ""String_Node_Str""+ LOWER.length()+ ""String_Node_Str"";
}",0.6901098901098901
140153,"@Override public String getPatternFinderDefaultFunction(String expression){
  return ""String_Node_Str"" + expression + ""String_Node_Str""+ ""String_Node_Str"";
}","@Override public String getPatternFinderDefaultFunction(String expression){
  return ""String_Node_Str"" + expression + ""String_Node_Str""+ NUM+ UPPER+ LOWER+ ""String_Node_Str""+ ""String_Node_Str""+ NUM.length()+ ""String_Node_Str""+ UPPER.length()+ ""String_Node_Str""+ LOWER.length()+ ""String_Node_Str"";
}",0.6901098901098901
140154,"/** 
 * DOC Zqin Comment method ""getRangeAsString"".
 * @return retrun the message when indicator value out the defined range.
 */
public String getRangeAsString(){
  StringBuilder msg=new StringBuilder();
  if (indicator != null) {
    IndicatorEnum indicatorEnum=IndicatorEnum.findIndicatorEnum(indicator.eClass());
    if (indicatorEnum == IndicatorEnum.ModeIndicatorEnum) {
      msg.append(""String_Node_Str"" + IndicatorHelper.getExpectedValue(indicator) + ""String_Node_Str"");
    }
 else     if (indicatorEnum == IndicatorEnum.BoxIIndicatorEnum) {
      if (isOutOfRange(getValue())) {
        Double[] dRange=getDefinedRange(getValue());
        range=""String_Node_Str"" + dRange[0] + ""String_Node_Str""+ dRange[1]+ ""String_Node_Str"";
        msg.append(""String_Node_Str"" + range);
      }
    }
 else {
      if (isOutOfRange(getValue())) {
        Double[] dRange=getDefinedRange(getValue());
        range=""String_Node_Str"" + dRange[0] + ""String_Node_Str""+ dRange[1]+ ""String_Node_Str"";
        msg.append(""String_Node_Str"" + range);
        msg.append(""String_Node_Str"");
      }
      if (isOutOfRange(getPersent())) {
        Double[] dRange=getDefinedRange(getPersent());
        range=""String_Node_Str"" + StringFormatUtil.formatPersent(dRange[0] / 100) + ""String_Node_Str""+ StringFormatUtil.formatPersent(dRange[1] / 100)+ ""String_Node_Str"";
        msg.append(""String_Node_Str"" + range);
      }
    }
  }
  return msg.length() == 0 ? null : msg.toString();
}","/** 
 * DOC Zqin Comment method ""getRangeAsString"".
 * @return retrun the message when indicator value out the defined range.
 */
public String getRangeAsString(){
  StringBuilder msg=new StringBuilder();
  if (indicator != null) {
    IndicatorEnum indicatorEnum=IndicatorEnum.findIndicatorEnum(indicator.eClass());
    if (indicatorEnum == IndicatorEnum.ModeIndicatorEnum) {
      msg.append(""String_Node_Str"" + IndicatorHelper.getExpectedValue(indicator) + ""String_Node_Str"");
    }
 else     if (indicatorEnum == IndicatorEnum.BoxIIndicatorEnum) {
      if (isOutOfRange(getValue())) {
        msg.append(""String_Node_Str"" + range);
      }
    }
 else {
      if (isOutOfRange(getValue())) {
        msg.append(""String_Node_Str"" + range);
        msg.append(""String_Node_Str"");
      }
      if (isOutOfRange(getPersent())) {
        msg.append(""String_Node_Str"" + range);
      }
    }
  }
  return msg.length() == 0 ? null : msg.toString();
}",0.6057851239669422
140155,"private boolean checkRange(String inString){
  Double[] definedRange=getDefinedRange(inString);
  if (definedRange != null) {
    Double min=definedRange[0];
    Double max=definedRange[1];
    Double dValue=inString != null ? StringFormatUtil.parseDouble(inString) : Double.NaN;
    if (min == null || Double.isNaN(min)) {
      min=Double.NEGATIVE_INFINITY;
    }
    if (max == null || Double.isNaN(max)) {
      max=Double.POSITIVE_INFINITY;
    }
    if (dValue < min || dValue > max) {
      return true;
    }
  }
  return false;
}","private boolean checkRange(String inString){
  Double[] definedRange=getDefinedRange(inString);
  if (definedRange != null) {
    Double min=definedRange[0];
    Double max=definedRange[1];
    Double dValue=inString != null ? StringFormatUtil.parseDouble(inString) : Double.NaN;
    if (min == null || Double.isNaN(min)) {
      min=Double.NEGATIVE_INFINITY;
    }
    if (max == null || Double.isNaN(max)) {
      max=Double.POSITIVE_INFINITY;
    }
    if (dValue < min || dValue > max) {
      if (inString.indexOf('%') > 0) {
        range=""String_Node_Str"" + StringFormatUtil.formatPersent(min / 100) + ""String_Node_Str""+ StringFormatUtil.formatPersent(max / 100)+ ""String_Node_Str"";
      }
 else {
        range=""String_Node_Str"" + min + ""String_Node_Str""+ max+ ""String_Node_Str"";
      }
      return true;
    }
  }
  return false;
}",0.7603186097031137
140156,"@Override public String getRangeAsString(){
  StringBuilder msg=new StringBuilder();
  if (isOutOfRange(getNumMatch()) || isOutOfRange(getNumNoMatch())) {
    Double[] dRange=getDefinedRange(getNumMatch());
    String range=""String_Node_Str"" + dRange[0] + ""String_Node_Str""+ dRange[1]+ ""String_Node_Str"";
    msg.append(""String_Node_Str"" + range);
    msg.append(""String_Node_Str"");
  }
  if (isOutOfRange(getPerMatch()) || isOutOfRange(getPerNoMatch())) {
    Double[] dRange=getDefinedRange(getPerMatch());
    String range=""String_Node_Str"" + StringFormatUtil.formatPersent(dRange[0] / 100) + ""String_Node_Str""+ StringFormatUtil.formatPersent(dRange[1] / 100)+ ""String_Node_Str"";
    msg.append(""String_Node_Str"" + range);
  }
  return msg.length() == 0 ? null : msg.toString();
}","@Override public String getRangeAsString(){
  StringBuilder msg=new StringBuilder();
  if (isOutOfRange(getNumMatch()) || isOutOfRange(getNumNoMatch())) {
    msg.append(""String_Node_Str"" + range);
    msg.append(""String_Node_Str"");
  }
  if (isOutOfRange(getPerMatch()) || isOutOfRange(getPerNoMatch())) {
    msg.append(""String_Node_Str"" + range);
  }
  return msg.length() == 0 ? null : msg.toString();
}",0.4974789915966386
140157,"public GenericSQLHandler replaceLimitOffset(String colName,String table,String limitRow,String offset,String limitRowPlusOffset){
  this.replaceColumnTable(colName,table);
  sqlString=this.sqlString.replaceAll(LIMIT_ROW,limitRow).replaceAll(LIMIT_OFFSET,offset).replaceAll(LIMIT_ROW_PLUS_OFFSET,limitRowPlusOffset);
  return this;
}","public GenericSQLHandler replaceLimitOffset(String colName,String table,String limitRow,String offset,String limitRowPlusOffset){
  this.replaceColumnTable(colName,table);
  sqlString=this.sqlString.replace(LIMIT_ROW,limitRow).replace(LIMIT_OFFSET,offset).replace(LIMIT_ROW_PLUS_OFFSET,limitRowPlusOffset);
  return this;
}",0.9862595419847328
140158,"public GenericSQLHandler replacePattern(String regexp){
  sqlString=sqlString.replaceAll(PATTERN_EXPRESSION,regexp);
  return this;
}","public GenericSQLHandler replacePattern(String regexp){
  sqlString=sqlString.replace(PATTERN_EXPRESSION,regexp);
  return this;
}",0.988593155893536
140159,"public GenericSQLHandler replaceTable(String table){
  sqlString=sqlString.replaceAll(TABLE_NAME,table);
  return this;
}","public GenericSQLHandler replaceTable(String table){
  sqlString=sqlString.replace(TABLE_NAME,table);
  return this;
}",0.98744769874477
140160,"public GenericSQLHandler replaceAndClause(String whereClause){
  sqlString=sqlString.replaceAll(AND_WHERE_CLAUSE,whereClause);
  return this;
}","public GenericSQLHandler replaceAndClause(String whereClause){
  sqlString=sqlString.replace(AND_WHERE_CLAUSE,whereClause);
  return this;
}",0.9893992932862192
140161,"public GenericSQLHandler replaceWithJoin(String tableNameA,String tableNameB,String joinClause,String whereClause){
  sqlString=sqlString.replaceAll(TABLE_NAME,tableNameA).replaceAll(TABLE_NAME2,tableNameB).replaceAll(JOIN_CLAUSE,joinClause).replaceAll(WHERE_CLAUSE,whereClause);
  return this;
}","public GenericSQLHandler replaceWithJoin(String tableNameA,String tableNameB,String joinClause,String whereClause){
  sqlString=sqlString.replace(TABLE_NAME,tableNameA).replace(TABLE_NAME2,tableNameB).replace(JOIN_CLAUSE,joinClause).replace(WHERE_CLAUSE,whereClause);
  return this;
}",0.9793103448275862
140162,"public GenericSQLHandler replaceGroupByAlias(String groupByAliases){
  sqlString=sqlString.replaceAll(GROUP_BY_ALIAS,groupByAliases);
  return this;
}","public GenericSQLHandler replaceGroupByAlias(String groupByAliases){
  sqlString=sqlString.replace(GROUP_BY_ALIAS,groupByAliases);
  return this;
}",0.98989898989899
140163,"public GenericSQLHandler replaceWhere(String whereClause){
  sqlString=sqlString.replaceAll(WHERE_CLAUSE,whereClause);
  return this;
}","public GenericSQLHandler replaceWhere(String whereClause){
  sqlString=sqlString.replace(WHERE_CLAUSE,whereClause);
  return this;
}",0.9887640449438202
140164,"public GenericSQLHandler replaceColumn(String columns){
  sqlString=sqlString.replaceAll(COLUMN_NAMES,columns);
  return this;
}","public GenericSQLHandler replaceColumn(String columns){
  sqlString=sqlString.replace(COLUMN_NAMES,columns);
  return this;
}",0.9881422924901184
140165,"static IDataEntity createDataset(EIndicatorChartType chartType,List<IndicatorUnit> indicatorUnitList){
  CustomerDataset dataset=new CustomerDataset();
  for (int index=0; index < indicatorUnitList.size(); index++) {
    IndicatorUnit unit=indicatorUnitList.get(index);
    IndicatorCommonUtil.compositeIndicatorMap(unit);
  }
switch (chartType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
case PATTERN_FREQUENCE_STATISTICS:
case PATTERN_LOW_FREQUENCE_STATISTICS:
    for (    IndicatorUnit unit : indicatorUnitList) {
      if (unit.isExcuted()) {
        FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
        if (chartType == EIndicatorChartType.FREQUENCE_STATISTICS || chartType == EIndicatorChartType.PATTERN_FREQUENCE_STATISTICS) {
          ComparatorsFactory.sort(frequencyExt,ComparatorsFactory.FREQUENCY_COMPARATOR_ID);
        }
        if (chartType == EIndicatorChartType.LOW_FREQUENCE_STATISTICS || chartType == EIndicatorChartType.PATTERN_LOW_FREQUENCE_STATISTICS) {
          ComparatorsFactory.sort(frequencyExt,ComparatorsFactory.LOW_FREQUENCY_COMPARATOR_ID);
        }
        int numOfShown=frequencyExt.length;
        IndicatorParameters parameters=unit.getIndicator().getParameters();
        if (parameters != null) {
          if (parameters.getTopN() < frequencyExt.length) {
            numOfShown=parameters.getTopN();
          }
        }
        for (int i=0; i < numOfShown; i++) {
          final FrequencyExt freqExt=frequencyExt[i];
          final String keyLabel=String.valueOf(freqExt.getKey());
          dataset.addValue(freqExt.getValue(),""String_Node_Str"",keyLabel);
          ChartDataEntity entity=new ChartDataEntity();
          entity.setIndicator(unit.getIndicator());
          entity.setLabelNull(freqExt.getKey() == null);
          entity.setLabel(keyLabel);
          entity.setValue(String.valueOf(freqExt.getValue()));
          entity.setPercent(String.valueOf(freqExt.getFrequency()));
          dataset.addDataEntity(entity);
        }
      }
    }
  break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
for (IndicatorUnit unit : indicatorUnitList) {
  if (unit.isExcuted()) {
    String label=unit.getIndicatorName();
    PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
    double notMathCount=patternExt.getNotMatchingValueCount();
    double machCount=patternExt.getMatchingValueCount();
    dataset.addValue(machCount,""String_Node_Str"",label);
    dataset.addValue(notMathCount,""String_Node_Str"",label);
    PatternChartDataEntity patternEntity=new PatternChartDataEntity();
    patternEntity.setIndicator(unit.getIndicator());
    patternEntity.setLabel(unit.getIndicatorName());
    patternEntity.setNumMatch(String.valueOf(machCount));
    patternEntity.setNumNoMatch(String.valueOf(notMathCount));
    dataset.addDataEntity(patternEntity);
  }
}
break;
case TEXT_STATISTICS:
ComparatorsFactory.sort(indicatorUnitList,ComparatorsFactory.TEXT_STATISTICS_COMPARATOR_ID);
case SIMPLE_STATISTICS:
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
double value=Double.parseDouble(unit.getValue().toString());
String label=unit.getIndicatorName();
dataset.addValue(value,label,""String_Node_Str"");
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(String.valueOf(value));
entity.setPercent(String.valueOf(value / unit.getIndicator().getCount()));
dataset.addDataEntity(entity);
}
}
break;
case MODE_INDICATOR:
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
String label=unit.getIndicatorName();
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(unit.getValue().toString());
dataset.addDataEntity(entity);
}
}
break;
case SUMMARY_STATISTICS:
CustomerBoxDataset defaultDataset=new CustomerBoxDataset();
Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
double doubleValue=Double.parseDouble(unit.getValue().toString());
map.put(unit.getType(),doubleValue);
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(unit.getIndicatorName());
entity.setValue(String.valueOf(unit.getValue()));
defaultDataset.addDataEntity(entity);
dataset.addDataEntity(entity);
}
}
if (map.size() == 6) {
dataset=null;
BoxAndWhiskerItem item=createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
defaultDataset.add(item,""String_Node_Str"",""String_Node_Str"");
Double range=map.get(IndicatorEnum.MaxValueIndicatorEnum) - map.get(IndicatorEnum.MinValueIndicatorEnum);
Double quartile=map.get(IndicatorEnum.UpperQuartileIndicatorEnum) - map.get(IndicatorEnum.LowerQuartileIndicatorEnum);
defaultDataset.addDataEntity(new ChartDataEntity(null,IndicatorEnum.RangeIndicatorEnum.getLabel(),range.toString()));
defaultDataset.addDataEntity(new ChartDataEntity(null,IndicatorEnum.IQRIndicatorEnum.getLabel(),quartile.toString()));
return defaultDataset;
}
 else {
defaultDataset=null;
for (IndicatorEnum indicatorEnum : map.keySet()) {
dataset.addValue(map.get(indicatorEnum),""String_Node_Str"",indicatorEnum.getLabel());
}
}
break;
default :
return null;
}
return dataset;
}","static IDataEntity createDataset(EIndicatorChartType chartType,List<IndicatorUnit> indicatorUnitList){
  CustomerDataset dataset=new CustomerDataset();
  for (int index=0; index < indicatorUnitList.size(); index++) {
    IndicatorUnit unit=indicatorUnitList.get(index);
    IndicatorCommonUtil.compositeIndicatorMap(unit);
  }
switch (chartType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
case PATTERN_FREQUENCE_STATISTICS:
case PATTERN_LOW_FREQUENCE_STATISTICS:
    for (    IndicatorUnit unit : indicatorUnitList) {
      if (unit.isExcuted()) {
        FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
        if (chartType == EIndicatorChartType.FREQUENCE_STATISTICS || chartType == EIndicatorChartType.PATTERN_FREQUENCE_STATISTICS) {
          ComparatorsFactory.sort(frequencyExt,ComparatorsFactory.FREQUENCY_COMPARATOR_ID);
        }
        if (chartType == EIndicatorChartType.LOW_FREQUENCE_STATISTICS || chartType == EIndicatorChartType.PATTERN_LOW_FREQUENCE_STATISTICS) {
          ComparatorsFactory.sort(frequencyExt,ComparatorsFactory.LOW_FREQUENCY_COMPARATOR_ID);
        }
        int numOfShown=frequencyExt.length;
        IndicatorParameters parameters=unit.getIndicator().getParameters();
        if (parameters != null) {
          if (parameters.getTopN() < frequencyExt.length) {
            numOfShown=parameters.getTopN();
          }
        }
        for (int i=0; i < numOfShown; i++) {
          final FrequencyExt freqExt=frequencyExt[i];
          final String keyLabel=String.valueOf(freqExt.getKey());
          dataset.addValue(freqExt.getValue(),""String_Node_Str"",keyLabel);
          ChartDataEntity entity=new ChartDataEntity();
          entity.setIndicator(unit.getIndicator());
          entity.setLabelNull(freqExt.getKey() == null);
          entity.setLabel(keyLabel);
          entity.setValue(String.valueOf(freqExt.getValue()));
          entity.setPercent(String.valueOf(freqExt.getFrequency()));
          dataset.addDataEntity(entity);
        }
      }
    }
  break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
for (IndicatorUnit unit : indicatorUnitList) {
  if (unit.isExcuted()) {
    String label=unit.getIndicatorName();
    PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
    double notMathCount=patternExt.getNotMatchingValueCount();
    double machCount=patternExt.getMatchingValueCount();
    dataset.addValue(machCount,""String_Node_Str"",label);
    dataset.addValue(notMathCount,""String_Node_Str"",label);
    PatternChartDataEntity patternEntity=new PatternChartDataEntity();
    patternEntity.setIndicator(unit.getIndicator());
    patternEntity.setLabel(unit.getIndicatorName());
    patternEntity.setNumMatch(String.valueOf(machCount));
    patternEntity.setNumNoMatch(String.valueOf(notMathCount));
    dataset.addDataEntity(patternEntity);
  }
}
break;
case TEXT_STATISTICS:
ComparatorsFactory.sort(indicatorUnitList,ComparatorsFactory.TEXT_STATISTICS_COMPARATOR_ID);
case SIMPLE_STATISTICS:
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
double value=Double.parseDouble(unit.getValue().toString());
String label=unit.getIndicatorName();
dataset.addValue(value,label,""String_Node_Str"");
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(String.valueOf(value));
entity.setPercent(String.valueOf(value / unit.getIndicator().getCount()));
dataset.addDataEntity(entity);
}
}
break;
case MODE_INDICATOR:
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
String label=unit.getIndicatorName();
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(unit.getValue().toString());
dataset.addDataEntity(entity);
}
}
break;
case SUMMARY_STATISTICS:
CustomerBoxDataset defaultDataset=new CustomerBoxDataset();
Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
double doubleValue=Double.parseDouble(unit.getValue().toString());
map.put(unit.getType(),doubleValue);
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(unit.getIndicatorName());
entity.setValue(String.valueOf(unit.getValue()));
defaultDataset.addDataEntity(entity);
dataset.addDataEntity(entity);
}
}
if (map.containsKey(IndicatorEnum.MaxValueIndicatorEnum) && map.containsKey(IndicatorEnum.MinValueIndicatorEnum)) {
Double range=map.get(IndicatorEnum.MaxValueIndicatorEnum) - map.get(IndicatorEnum.MinValueIndicatorEnum);
ChartDataEntity entity=new ChartDataEntity(null,IndicatorEnum.RangeIndicatorEnum.getLabel(),range.toString());
defaultDataset.addDataEntity(entity);
dataset.addDataEntity(entity);
}
if (map.containsKey(IndicatorEnum.UpperQuartileIndicatorEnum) && map.containsKey(IndicatorEnum.LowerQuartileIndicatorEnum)) {
Double quartile=map.get(IndicatorEnum.UpperQuartileIndicatorEnum) - map.get(IndicatorEnum.LowerQuartileIndicatorEnum);
ChartDataEntity entity=new ChartDataEntity(null,IndicatorEnum.IQRIndicatorEnum.getLabel(),quartile.toString());
defaultDataset.addDataEntity(entity);
dataset.addDataEntity(entity);
}
if (map.size() == 6) {
dataset=null;
BoxAndWhiskerItem item=createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
defaultDataset.add(item,""String_Node_Str"",""String_Node_Str"");
return defaultDataset;
}
 else {
defaultDataset=null;
for (IndicatorEnum indicatorEnum : map.keySet()) {
dataset.addValue(map.get(indicatorEnum),""String_Node_Str"",indicatorEnum.getLabel());
}
}
break;
default :
return null;
}
return dataset;
}",0.8870066363953895
140166,"private void openAddDialog(){
  NewUDFFunctionDialog dialog=new NewUDFFunctionDialog(getShell());
  if (Window.OK == dialog.open()) {
    entityList.add(dialog.getFunctionEntity());
    listViewer.setInput(entityList);
  }
}","private void openAddDialog(){
  NewUDFFunctionDialog dialog=new NewUDFFunctionDialog(getShell(),entityList);
  if (Window.OK == dialog.open()) {
    entityList.add(dialog.getFunctionEntity());
    tableViewer.setInput(entityList);
  }
}",0.9565217391304348
140167,"@SuppressWarnings(""String_Node_Str"") @Override public boolean performOk(){
  super.performOk();
  for (  FunctionEntity entity : entityList) {
    final String language=entity.getLanguage();
    final String function=entity.getFunction();
    ResourcesPlugin.getPlugin().getPluginPreferences().setValue(language,function);
    DefinitionHandler.getInstance().updateRegex(language,function);
  }
  DefinitionHandler.getInstance().saveResource();
  return true;
}","@Override public boolean performOk(){
  super.performOk();
  for (  FunctionEntity entity : entityList) {
    ResourcesPlugin.getPlugin().getPluginPreferences().setValue(entity.getLanguage(),entity.getFunction());
    DefinitionHandler.getInstance().updateRegex(entity.getLanguage(),entity.getFunction());
  }
  DefinitionHandler.getInstance().saveResource();
  return true;
}",0.4563918757467144
140168,"private void openEditDialog(){
  StructuredSelection selection=(StructuredSelection)listViewer.getSelection();
  if (selection == null) {
    return;
  }
  FunctionEntity entity=(FunctionEntity)selection.getFirstElement();
  NewUDFFunctionDialog dialog=new NewUDFFunctionDialog(getShell(),entity);
  dialog.open();
  listViewer.refresh();
}","private void openEditDialog(){
  StructuredSelection selection=(StructuredSelection)tableViewer.getSelection();
  if (selection.isEmpty()) {
    return;
  }
  FunctionEntity entity=(FunctionEntity)selection.getFirstElement();
  NewUDFFunctionDialog dialog=new NewUDFFunctionDialog(getShell(),entity,entityList);
  dialog.open();
  tableViewer.refresh();
}",0.3597122302158273
140169,"private void doRemove(){
  StructuredSelection selection=(StructuredSelection)listViewer.getSelection();
  if (selection.isEmpty()) {
    return;
  }
  FunctionEntity entity=(FunctionEntity)selection.getFirstElement();
  entityList.remove(entity);
  listViewer.setInput(entityList);
  ResourcesPlugin.getPlugin().getPluginPreferences().setValue(entity.getLanguage(),""String_Node_Str"");
}","private void doRemove(){
  StructuredSelection selection=(StructuredSelection)tableViewer.getSelection();
  if (selection.isEmpty()) {
    return;
  }
  FunctionEntity entity=(FunctionEntity)selection.getFirstElement();
  entityList.remove(entity);
  tableViewer.refresh();
  ResourcesPlugin.getPlugin().getPluginPreferences().setValue(entity.getLanguage(),""String_Node_Str"");
}",0.9411764705882352
140170,"@Override protected Control createContents(Composite parent){
  Composite mainComposite=new Composite(parent,SWT.NONE);
  mainComposite.setLayout(new GridLayout());
  mainComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label header=new Label(mainComposite,SWT.WRAP);
  header.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  gd.widthHint=500;
  header.setLayoutData(gd);
  Composite composite=new Composite(mainComposite,SWT.NONE);
  composite.setLayout(new GridLayout(2,false));
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  listViewer=new ListViewer(composite,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(listViewer.getList());
  listViewer.setLabelProvider(new MyLabelProvider());
  listViewer.setContentProvider(new MyContentProvider());
  listViewer.setInput(entityList);
  Composite btnBox=new Composite(composite,SWT.NONE);
  btnBox.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(btnBox);
  addBTN=createPushButton(btnBox,""String_Node_Str"");
  editBTN=createPushButton(btnBox,""String_Node_Str"");
  removeBTN=createPushButton(btnBox,""String_Node_Str"");
  return mainComposite;
}","@Override protected Control createContents(Composite parent){
  Composite mainComposite=new Composite(parent,SWT.NONE);
  mainComposite.setLayout(new GridLayout());
  mainComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label header=new Label(mainComposite,SWT.WRAP);
  header.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  gd.widthHint=500;
  header.setLayoutData(gd);
  Composite composite=new Composite(mainComposite,SWT.NONE);
  composite.setLayout(new GridLayout(2,false));
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  tableViewer=new TableViewer(composite,SWT.BORDER | SWT.FULL_SELECTION);
  Table table=tableViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(table);
  TableColumn column1=new TableColumn(table,SWT.NONE);
  column1.setText(""String_Node_Str"");
  column1.setWidth(450);
  TableColumn column2=new TableColumn(table,SWT.NONE);
  column2.setText(""String_Node_Str"");
  column2.setWidth(150);
  tableViewer.setLabelProvider(new MyLabelProvider());
  tableViewer.setContentProvider(new MyContentProvider());
  tableViewer.setInput(entityList);
  Composite btnBox=new Composite(composite,SWT.NONE);
  btnBox.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(btnBox);
  addBTN=createPushButton(btnBox,""String_Node_Str"");
  editBTN=createPushButton(btnBox,""String_Node_Str"");
  removeBTN=createPushButton(btnBox,""String_Node_Str"");
  return mainComposite;
}",0.8489258489258489
140171,"public void modifyText(ModifyEvent e){
  entity.setFunction(functionName.getText());
}","public void modifyText(ModifyEvent e){
  setErrorMessage(null);
  entity.setFunction(functionName.getText());
  setCanFinished(true);
}",0.7782805429864253
140172,"@Override public void widgetSelected(SelectionEvent e){
  entity.setLanguage(((Combo)e.getSource()).getText());
}","@Override public void widgetSelected(SelectionEvent e){
  entity.setLanguage(languageType.getText());
  setCanFinished(true);
}",0.7833333333333333
140173,"public NewUDFFunctionDialog(Shell parentShell,FunctionEntity entity){
  super(parentShell);
  this.entity=entity;
}","public NewUDFFunctionDialog(Shell parentShell,FunctionEntity entity,List<FunctionEntity> entityList){
  super(parentShell);
  this.entity=entity != null ? entity : new FunctionEntity();
  String[] temp=new String[entityList.size()];
  for (int i=0; i < entityList.size(); i++) {
    temp[i]=entityList.get(i).getLanguage();
  }
  this.existedLanguage=temp;
}",0.4778012684989429
140174,"@Override protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(2,false));
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label nameLab=new Label(composite,SWT.NONE);
  nameLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  functionName=new Text(composite,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(functionName);
  if (this.entity.getFunction() != null) {
    functionName.setText(this.entity.getFunction());
  }
  functionName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      entity.setFunction(functionName.getText());
    }
  }
);
  Label typeLab=new Label(composite,SWT.NONE);
  typeLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  languageType=new Combo(composite,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(languageType);
  languageType.setItems(SupportDBUrlStore.getInstance().getDBLanguages());
  if (this.entity.getLanguage() != null) {
    languageType.setText(this.entity.getLanguage());
  }
  languageType.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      entity.setLanguage(((Combo)e.getSource()).getText());
    }
  }
);
  setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(2,false));
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label nameLab=new Label(composite,SWT.NONE);
  nameLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  functionName=new Text(composite,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(functionName);
  if (this.entity.getFunction() != null) {
    functionName.setText(this.entity.getFunction());
  }
  functionName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setErrorMessage(null);
      entity.setFunction(functionName.getText());
      setCanFinished(true);
    }
  }
);
  Label typeLab=new Label(composite,SWT.NONE);
  typeLab.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  languageType=new CCombo(composite,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(languageType);
  String[] allLanguage=SupportDBUrlStore.getInstance().getDBLanguages();
  String[] validLanguages=getValidLanguage(allLanguage,existedLanguage);
  languageType.setItems(validLanguages);
  languageType.setEditable(false);
  if (this.entity.getLanguage() != null) {
    languageType.setText(this.entity.getLanguage());
  }
  languageType.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      entity.setLanguage(languageType.getText());
      setCanFinished(true);
    }
  }
);
  setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  return composite;
}",0.8968975242870574
140175,"@Override public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (!canSave()) {
    return;
  }
  try {
    saveAnalysis();
    this.isDirty=false;
  }
 catch (  DataprofilerCoreException e) {
    ExceptionHandler.process(e,Level.ERROR);
    e.printStackTrace();
  }
}","@Override public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (!canSave()) {
    return;
  }
  try {
    saveAnalysis();
    this.isDirty=false;
    this.runBtn.setEnabled(this.canRun());
  }
 catch (  DataprofilerCoreException e) {
    ExceptionHandler.process(e,Level.ERROR);
    e.printStackTrace();
  }
}",0.930756843800322
140176,"protected void firePropertyChange(final int propertyId){
  super.firePropertyChange(propertyId);
  isRefreshResultPage=true;
}","protected void firePropertyChange(final int propertyId){
  super.firePropertyChange(propertyId);
  if (propertyId == IEditorPart.PROP_DIRTY) {
    if (isDirty() && this.getMasterPage() != null) {
      Button runButton=((AbstractAnalysisMetadataPage)this.getMasterPage()).getRunButton();
      if (runButton != null) {
        runButton.setEnabled(false);
      }
    }
  }
  isRefreshResultPage=true;
}",0.4763705103969754
140177,"@Override protected void createFormContent(IManagedForm managedForm){
  this.form=managedForm.getForm();
  Composite body=form.getBody();
  body.setLayout(new GridLayout());
  SashForm sForm=new SashForm(body,SWT.NULL);
  sForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp=toolkit.createComposite(sForm);
  topComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp.setLayout(new GridLayout());
  metadataSection=creatMetadataSection(form,topComp);
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  createAnalysisColumnsSection(form,topComp);
  createDataFilterSection(form,topComp);
  Composite previewComp=toolkit.createComposite(sForm);
  previewComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewComp.setLayout(new GridLayout());
  createPreviewSection(form,previewComp);
  GridData gdBtn=new GridData();
  gdBtn.horizontalAlignment=SWT.CENTER;
  gdBtn.horizontalSpan=2;
  gdBtn.widthHint=120;
  runBtn=toolkit.createButton(form.getBody(),DefaultMessagesImpl.getString(""String_Node_Str""),SWT.NONE);
  runBtn.setLayoutData(gdBtn);
  runBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new RunAnalysisAction(ColumnMasterDetailsPage.this).run();
    }
  }
);
}","@Override protected void createFormContent(IManagedForm managedForm){
  this.form=managedForm.getForm();
  Composite body=form.getBody();
  body.setLayout(new GridLayout());
  SashForm sForm=new SashForm(body,SWT.NULL);
  sForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp=toolkit.createComposite(sForm);
  topComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp.setLayout(new GridLayout());
  metadataSection=creatMetadataSection(form,topComp);
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  createAnalysisColumnsSection(form,topComp);
  createDataFilterSection(form,topComp);
  Composite previewComp=toolkit.createComposite(sForm);
  previewComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  previewComp.setLayout(new GridLayout());
  createPreviewSection(form,previewComp);
  runButton=createRunButton(form);
}",0.8149048197650871
140178,"public void fireRuningItemChanged(boolean status){
  this.runBtn.setEnabled(status);
  if (status) {
    ((AnalysisEditor)getEditor()).setRefreshResultPage(true);
    refreshChart();
  }
}","public void fireRuningItemChanged(boolean status){
  this.runButton.setEnabled(status);
  if (status) {
    ((AnalysisEditor)getEditor()).setRefreshResultPage(true);
    refreshChart();
  }
}",0.992084432717678
140179,"@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  form=managedForm.getForm();
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  createAnalyzedColumnSetsSection(topComp);
}","@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  form=managedForm.getForm();
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  createAnalyzedColumnSetsSection(topComp);
  createRunButton(form);
  this.setDirty(false);
}",0.9451287793952968
140180,"private void createAnalyzedColumnSetsSection(Composite parentComp){
  Section columnsComparisonSection=this.createSection(form,parentComp,DefaultMessagesImpl.getString(""String_Node_Str""),false,null);
  Composite sectionClient=toolkit.createComposite(columnsComparisonSection);
  sectionClient.setLayout(new GridLayout());
  checkComputeButton=new Button(sectionClient,SWT.CHECK);
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  layoutData.horizontalAlignment=SWT.CENTER;
  checkComputeButton.setLayoutData(layoutData);
  checkComputeButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  checkComputeButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  checkComputeButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setDirty(true);
    }
  }
);
  SashForm sashForm=new SashForm(sectionClient,SWT.NULL);
  sashForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite leftComp=toolkit.createComposite(sashForm);
  leftComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  leftComp.setLayout(new GridLayout());
  this.createSectionPart(leftComp,columnListA,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  Composite rightComp=toolkit.createComposite(sashForm);
  rightComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  rightComp.setLayout(new GridLayout());
  this.createSectionPart(rightComp,columnListB,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  columnsComparisonSection.setClient(sectionClient);
}","private void createAnalyzedColumnSetsSection(Composite parentComp){
  Section columnsComparisonSection=this.createSection(form,parentComp,DefaultMessagesImpl.getString(""String_Node_Str""),false,null);
  Composite sectionClient=toolkit.createComposite(columnsComparisonSection);
  sectionClient.setLayout(new GridLayout());
  checkComputeButton=new Button(sectionClient,SWT.CHECK);
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  layoutData.horizontalAlignment=SWT.CENTER;
  checkComputeButton.setLayoutData(layoutData);
  checkComputeButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  checkComputeButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  checkComputeButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      setDirty(true);
    }
  }
);
  checkComputeButton.setSelection(analysis.getParameters().getDeactivatedIndicators().size() != 0);
  SashForm sashForm=new SashForm(sectionClient,SWT.NULL);
  sashForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite leftComp=toolkit.createComposite(sashForm);
  leftComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  leftComp.setLayout(new GridLayout());
  this.createSectionPart(leftComp,columnListA,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  Composite rightComp=toolkit.createComposite(sashForm);
  rightComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  rightComp.setLayout(new GridLayout());
  this.createSectionPart(rightComp,columnListB,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  columnsComparisonSection.setClient(sectionClient);
}",0.9702558001189768
140181,"@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  final ScrolledForm form=managedForm.getForm();
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  createAnalysisParamSection(form,topComp);
  createAnalysisSummarySection(form,topComp);
  createStatisticalSection(form,topComp);
  GridData gdBtn=new GridData();
  gdBtn.horizontalAlignment=SWT.CENTER;
  gdBtn.horizontalSpan=2;
  gdBtn.widthHint=120;
  Button runBtn=toolkit.createButton(form.getBody(),DefaultMessagesImpl.getString(""String_Node_Str""),SWT.NONE);
  runBtn.setLayoutData(gdBtn);
  runBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new RunAnalysisAction(ConnectionMasterDetailsPage.this).run();
    }
  }
);
}","@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  final ScrolledForm form=managedForm.getForm();
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  this.metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  createAnalysisParamSection(form,topComp);
  createAnalysisSummarySection(form,topComp);
  createStatisticalSection(form,topComp);
  createRunButton(form);
}",0.6873385012919897
140182,"@Override public String replaceNullsWithString(String colName,String replacement){
  return ""String_Node_Str"" + colName + ""String_Node_Str""+ replacement+ ""String_Node_Str"";
}","@Override public String replaceNullsWithString(String colName,String replacement){
  if (""String_Node_Str"".equals(replacement)) {
    return colName;
  }
  return ""String_Node_Str"" + colName + ""String_Node_Str""+ replacement+ ""String_Node_Str"";
}",0.4200477326968974
140183,"/** 
 * DOC rli Comment method ""ceatePatternDefinitionComp"".
 * @param form
 * @param section
 */
private Composite createPatternDefinitionComp(){
  Composite newComp=toolkit.createComposite(patternDefinitionSection);
  newComp.setLayout(new GridLayout());
  Label label=new Label(newComp,SWT.WRAP);
  label.setText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  componentsComp=new Composite(newComp,SWT.NONE);
  componentsComp.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(componentsComp);
  EList<PatternComponent> components=this.pattern.getComponents();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    creatNewExpressLine(regularExpress);
  }
  createAddButton(newComp);
  patternDefinitionSection.setClient(newComp);
  return newComp;
}","/** 
 * DOC rli Comment method ""ceatePatternDefinitionComp"".
 * @param form
 * @param section
 */
private Composite createPatternDefinitionComp(){
  Composite newComp=toolkit.createComposite(patternDefinitionSection);
  newComp.setLayout(new GridLayout());
  componentsComp=new Composite(newComp,SWT.NONE);
  componentsComp.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(componentsComp);
  EList<PatternComponent> components=this.pattern.getComponents();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    creatNewExpressLine(regularExpress);
  }
  createAddButton(newComp);
  patternDefinitionSection.setClient(newComp);
  return newComp;
}",0.7870206489675516
140184,"private void creatNewExpressLine(RegularExpressionImpl regularExpress){
  final Composite expressComp=new Composite(componentsComp,SWT.NONE);
  expressComp.setLayout(new GridLayout(10,true));
  final CCombo combo=new CCombo(expressComp,SWT.BORDER);
  combo.setEditable(false);
  combo.setItems(remainDBTypeList.toArray(new String[remainDBTypeList.size()]));
  final RegularExpressionImpl finalRegExpress=regularExpress;
  String language=regularExpress.getExpression().getLanguage();
  if (language == null) {
    if (this.remainDBTypeList.contains(ALL_DATABASE_TYPE)) {
      combo.setText(ALL_DATABASE_TYPE);
    }
 else {
      combo.setText(remainDBTypeList.get(0));
    }
  }
 else {
    String supportLanguage=language.equalsIgnoreCase(SQL) ? ALL_DATABASE_TYPE : language;
    combo.setText(supportLanguage);
  }
  GridDataFactory.fillDefaults().span(2,1).grab(true,false).applyTo(combo);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String lang=combo.getText().equalsIgnoreCase(ALL_DATABASE_TYPE) ? SQL : combo.getText();
      finalRegExpress.getExpression().setLanguage(lang);
      setDirty(true);
    }
  }
);
  final Text patternText=new Text(expressComp,SWT.BORDER);
  patternText.setText(regularExpress.getExpression().getBody() == null ? PluginConstant.EMPTY_STRING : regularExpress.getExpression().getBody());
  GridDataFactory.fillDefaults().span(6,1).grab(true,false).applyTo(patternText);
  patternText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      finalRegExpress.getExpression().setBody(patternText.getText());
      setDirty(true);
    }
  }
);
  Button delButton=new Button(expressComp,SWT.NONE);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setToolTipText(""String_Node_Str"");
  GridDataFactory.fillDefaults().span(1,1).grab(true,false).applyTo(delButton);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      tempPatternComponents.remove(finalRegExpress);
      expressComp.dispose();
      patternDefinitionSectionComp.layout();
      form.reflow(true);
      setDirty(true);
    }
  }
);
  Button testPatternButton=new Button(expressComp,SWT.NONE);
  testPatternButton.setText(""String_Node_Str"");
  testPatternButton.setToolTipText(""String_Node_Str"");
  GridDataFactory.fillDefaults().span(1,1).grab(true,false).applyTo(testPatternButton);
  testPatternButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      PatternTestView patternTestView=(PatternTestView)CorePlugin.getDefault().findView(PatternTestView.ID);
      patternTestView.setPatternExpression(PatternMasterDetailsPage.this,pattern,finalRegExpress);
    }
  }
);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(expressComp);
}","private void creatNewExpressLine(RegularExpressionImpl regularExpress){
  final Composite expressComp=new Composite(componentsComp,SWT.NONE);
  expressComp.setLayout(new GridLayout(10,false));
  final CCombo combo=new CCombo(expressComp,SWT.BORDER);
  combo.setEditable(false);
  combo.setItems(remainDBTypeList.toArray(new String[remainDBTypeList.size()]));
  final RegularExpressionImpl finalRegExpress=regularExpress;
  String language=regularExpress.getExpression().getLanguage();
  if (language == null) {
    if (this.remainDBTypeList.contains(ALL_DATABASE_TYPE)) {
      combo.setText(ALL_DATABASE_TYPE);
    }
 else {
      combo.setText(remainDBTypeList.get(0));
    }
  }
 else {
    String supportLanguage=language.equalsIgnoreCase(SQL) ? ALL_DATABASE_TYPE : language;
    combo.setText(supportLanguage);
  }
  GridDataFactory.fillDefaults().span(2,1).grab(false,false).applyTo(combo);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String lang=combo.getText().equalsIgnoreCase(ALL_DATABASE_TYPE) ? SQL : combo.getText();
      finalRegExpress.getExpression().setLanguage(lang);
      setDirty(true);
    }
  }
);
  final Text patternText=new Text(expressComp,SWT.BORDER);
  patternText.setText(regularExpress.getExpression().getBody() == null ? PluginConstant.EMPTY_STRING : regularExpress.getExpression().getBody());
  GridDataFactory.fillDefaults().span(6,1).grab(true,false).applyTo(patternText);
  patternText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      finalRegExpress.getExpression().setBody(patternText.getText());
      setDirty(true);
    }
  }
);
  Button delButton=new Button(expressComp,SWT.NONE);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setToolTipText(""String_Node_Str"");
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(delButton);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      tempPatternComponents.remove(finalRegExpress);
      expressComp.dispose();
      patternDefinitionSectionComp.layout();
      form.reflow(true);
      setDirty(true);
    }
  }
);
  Button testPatternButton=new Button(expressComp,SWT.NONE);
  testPatternButton.setText(""String_Node_Str"");
  testPatternButton.setToolTipText(""String_Node_Str"");
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(testPatternButton);
  testPatternButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      PatternTestView patternTestView=(PatternTestView)CorePlugin.getDefault().findView(PatternTestView.ID);
      patternTestView.setPatternExpression(PatternMasterDetailsPage.this,pattern,finalRegExpress);
    }
  }
);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(expressComp);
}",0.9952005485087418
140185,"private void creatPatternDefinitionSection(Composite topCmp){
  patternDefinitionSection=createSection(form,topCmp,""String_Node_Str"",false,null);
  patternDefinitionSectionComp=createPatternDefinitionComp();
}","private void creatPatternDefinitionSection(Composite topCmp){
  patternDefinitionSection=createSection(form,topCmp,""String_Node_Str"",false,null);
  Label label=new Label(patternDefinitionSection,SWT.WRAP);
  label.setText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  patternDefinitionSection.setDescriptionControl(label);
  patternDefinitionSectionComp=createPatternDefinitionComp();
}",0.5040916530278232
140186,"@SuppressWarnings(""String_Node_Str"") private String getFreqRowsStatement(){
  String clause=""String_Node_Str"";
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  int javaType=column.getJavaType();
  if (Java2SqlType.isTextInSQL(javaType)) {
    clause=getDefaultQuotedStatement(""String_Node_Str"");
  }
 else   if (Java2SqlType.isDateInSQL(javaType)) {
    IndicatorParameters parameters=indicator.getParameters();
    DateGrain dateGrain=parameters.getDateParameters().getDateAggregationType();
switch (dateGrain) {
case DAY:
      clause=dbmsLanguage.extractDay(this.columnName) + dbmsLanguage.equal() + getDayCharacters(entity.getLabel());
case WEEK:
    if (clause.length() == 0) {
      clause=concatWhereClause(clause,dbmsLanguage.extractWeek(this.columnName) + dbmsLanguage.equal() + getWeekCharacters(entity.getLabel()));
    }
case MONTH:
  clause=concatWhereClause(clause,dbmsLanguage.extractMonth(this.columnName) + dbmsLanguage.equal() + getMonthCharacters(dateGrain,entity.getLabel()));
case QUARTER:
if (clause.length() == 0) {
  clause=concatWhereClause(clause,dbmsLanguage.extractQuarter(this.columnName) + dbmsLanguage.equal() + getQuarterCharacters(entity.getLabel()));
}
case YEAR:
clause=concatWhereClause(clause,dbmsLanguage.extractYear(this.columnName) + dbmsLanguage.equal() + getYearCharacters(entity.getLabel()));
break;
case NONE:
default :
clause=getDefaultQuotedStatement(""String_Node_Str"");
break;
}
}
 else if (Java2SqlType.isNumbericInSQL(javaType)) {
IndicatorParameters parameters=indicator.getParameters();
if (parameters != null) {
Domain bins=parameters.getBins();
if (bins != null) {
final EList<RangeRestriction> ranges=bins.getRanges();
for (RangeRestriction rangeRestriction : ranges) {
if (entity.getLabel() != null && entity.getLabel().equals(rangeRestriction.getName())) {
clause=createWhereClause(rangeRestriction);
break;
}
}
}
}
}
 else {
clause=getDefaultQuotedStatement(""String_Node_Str"");
}
return ""String_Node_Str"" + getFullyQualifiedTableName(column) + dbmsLanguage.where()+ inBrackets(clause)+ dbmsLanguage.and()+ inBrackets(getDataFilterClause());
}","@SuppressWarnings(""String_Node_Str"") private String getFreqRowsStatement(){
  String clause=""String_Node_Str"";
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  int javaType=column.getJavaType();
  if (Java2SqlType.isTextInSQL(javaType)) {
    clause=getDefaultQuotedStatement(""String_Node_Str"");
  }
 else   if (Java2SqlType.isDateInSQL(javaType)) {
    IndicatorParameters parameters=indicator.getParameters();
    DateGrain dateGrain=parameters.getDateParameters().getDateAggregationType();
switch (dateGrain) {
case DAY:
      clause=dbmsLanguage.extractDay(this.columnName) + dbmsLanguage.equal() + getDayCharacters(entity.getLabel());
case WEEK:
    if (clause.length() == 0) {
      clause=concatWhereClause(clause,dbmsLanguage.extractWeek(this.columnName) + dbmsLanguage.equal() + getWeekCharacters(entity.getLabel()));
    }
case MONTH:
  clause=concatWhereClause(clause,dbmsLanguage.extractMonth(this.columnName) + dbmsLanguage.equal() + getMonthCharacters(dateGrain,entity.getLabel()));
case QUARTER:
if (clause.length() == 0) {
  clause=concatWhereClause(clause,dbmsLanguage.extractQuarter(this.columnName) + dbmsLanguage.equal() + getQuarterCharacters(entity.getLabel()));
}
case YEAR:
clause=concatWhereClause(clause,dbmsLanguage.extractYear(this.columnName) + dbmsLanguage.equal() + getYearCharacters(entity.getLabel()));
break;
case NONE:
default :
clause=getDefaultQuotedStatement(""String_Node_Str"");
break;
}
}
 else if (Java2SqlType.isNumbericInSQL(javaType)) {
IndicatorParameters parameters=indicator.getParameters();
if (parameters != null) {
Domain bins=parameters.getBins();
if (bins != null) {
final EList<RangeRestriction> ranges=bins.getRanges();
for (RangeRestriction rangeRestriction : ranges) {
if (entity.getLabel() != null && entity.getLabel().equals(rangeRestriction.getName())) {
clause=createWhereClause(rangeRestriction);
break;
}
}
}
}
}
 else {
clause=getDefaultQuotedStatement(""String_Node_Str"");
}
return ""String_Node_Str"" + getFullyQualifiedTableName(column) + dbmsLanguage.where()+ inBrackets(clause)+ andDataFilterClause();
}",0.9909351145038168
140187,"/** 
 * TODO zqin use this method in a menu "". View invalid rows"" Method ""getInvalidRowsStatement"".
 * @return the query to get the invalid rows (or null when all rows are valid)
 */
private String getInvalidRowsStatement(){
  double value=Double.valueOf(entity.getValue());
  String whereClause=null;
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    String where1=null;
    Domain domain=parameters.getIndicatorValidDomain();
    if (domain != null) {
      where1=getWhereInvalidClause(value,domain);
    }
    String where2=null;
    domain=parameters.getDataValidDomain();
    if (domain != null) {
      where2=getWhereInvalidClause(value,domain);
    }
    if (where1 != null) {
      whereClause=where1;
      if (where2 != null) {
        whereClause+=dbmsLanguage.or() + where2;
      }
    }
 else     if (where2 != null) {
      whereClause=where2;
    }
  }
  return whereClause != null ? ""String_Node_Str"" + getFullyQualifiedTableName(column) + dbmsLanguage.where()+ inBrackets(whereClause)+ dbmsLanguage.and()+ inBrackets(getDataFilterClause()) : null;
}","/** 
 * TODO zqin use this method in a menu "". View invalid rows"" Method ""getInvalidRowsStatement"".
 * @return the query to get the invalid rows (or null when all rows are valid)
 */
private String getInvalidRowsStatement(){
  double value=Double.valueOf(entity.getValue());
  String whereClause=null;
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    String where1=null;
    Domain domain=parameters.getIndicatorValidDomain();
    if (domain != null) {
      where1=getWhereInvalidClause(value,domain);
    }
    String where2=null;
    domain=parameters.getDataValidDomain();
    if (domain != null) {
      where2=getWhereInvalidClause(value,domain);
    }
    if (where1 != null) {
      whereClause=where1;
      if (where2 != null) {
        whereClause+=dbmsLanguage.or() + where2;
      }
    }
 else     if (where2 != null) {
      whereClause=where2;
    }
  }
  return whereClause != null ? ""String_Node_Str"" + getFullyQualifiedTableName(column) + dbmsLanguage.where()+ inBrackets(whereClause)+ andDataFilterClause() : null;
}",0.9835497835497836
140188,"protected String getFullyQualifiedTableName(Column column){
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(column);
  return dbmsLanguage.toQualifiedName(null,dbmsLanguage.quote(ColumnSetHelper.getParentCatalogOrSchema(columnSetOwner).getName()),dbmsLanguage.quote(columnSetOwner.getName()));
}","protected String getFullyQualifiedTableName(Column column){
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(column);
  return dbmsLanguage.toQualifiedName(null,ColumnSetHelper.getParentCatalogOrSchema(columnSetOwner).getName(),columnSetOwner.getName());
}",0.852233676975945
140189,"public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
switch (this.indicatorEnum) {
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case BlankCountIndicatorEnum:
    map.put(MENU_VIEW_ROWS,getRowsStatement());
  break;
case UniqueIndicatorEnum:
map.put(MENU_VIEW_ROWS,getRowsStatementWithSubQuery());
map.put(MENU_VIEW_VALUES,getValuesStatement(this.columnName));
break;
case DistinctCountIndicatorEnum:
map.put(MENU_VIEW_VALUES,getDistinctValuesStatement(this.columnName));
break;
case DuplicateCountIndicatorEnum:
map.put(MENU_VIEW_ROWS,getRowsStatementWithSubQuery());
map.put(MENU_VIEW_VALUES,getValuesStatement(""String_Node_Str""));
break;
default :
}
return map;
}","public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
switch (this.indicatorEnum) {
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case BlankCountIndicatorEnum:
    map.put(MENU_VIEW_ROWS,getRowsStatement());
  break;
case UniqueIndicatorEnum:
map.put(MENU_VIEW_ROWS,getRowsStatementWithSubQuery());
map.put(MENU_VIEW_VALUES,getValuesStatement(this.columnName));
break;
case DistinctCountIndicatorEnum:
map.put(MENU_VIEW_VALUES,getDistinctValuesStatement(this.columnName));
break;
case DuplicateCountIndicatorEnum:
map.put(MENU_VIEW_ROWS,getRowsStatementWithSubQuery());
map.put(MENU_VIEW_VALUES,getValuesStatement(this.columnName));
break;
default :
}
return map;
}",0.9624478442280946
140190,"/** 
 * Method ""quote"".
 * @param sqlIdentifier the SQL identifier to quote
 * @return the sqlIdentifier quoted.
 */
public String quote(String sqlIdentifier){
  return dbQuoteString + sqlIdentifier + dbQuoteString;
}","/** 
 * Method ""quote"".
 * @param sqlIdentifier the SQL identifier to quote
 * @return the sqlIdentifier quoted.
 */
public String quote(String sqlIdentifier){
  String quotedSqlIdentifier=sqlIdentifier;
  if (!quotedSqlIdentifier.startsWith(dbQuoteString)) {
    quotedSqlIdentifier=dbQuoteString + quotedSqlIdentifier;
  }
  if (!quotedSqlIdentifier.endsWith(dbQuoteString)) {
    quotedSqlIdentifier=quotedSqlIdentifier + dbQuoteString;
  }
  return quotedSqlIdentifier;
}",0.5520231213872833
140191,"public String toQualifiedName(String catalog,String schema,String table){
  StringBuffer qualName=new StringBuffer();
  if (catalog != null && catalog.length() > 0) {
    qualName.append(catalog);
    qualName.append(DOT);
  }
  if (schema != null && schema.length() > 0) {
    qualName.append(schema);
    qualName.append(DOT);
  }
  qualName.append(table);
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",catalog,schema,table,qualName));
  }
  return qualName.toString();
}","public String toQualifiedName(String catalog,String schema,String table){
  StringBuffer qualName=new StringBuffer();
  if (catalog != null && catalog.length() > 0) {
    qualName.append(this.quote(catalog));
    qualName.append(DOT);
  }
  if (schema != null && schema.length() > 0) {
    qualName.append(this.quote(schema));
    qualName.append(DOT);
  }
  qualName.append(this.quote(table));
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",catalog,schema,table,qualName));
  }
  return qualName.toString();
}",0.9328214971209212
140192,"static IDataEntity createDataset(EIndicatorChartType chartType,List<IndicatorUnit> indicatorUnitList){
  CustomerDataset dataset=new CustomerDataset();
  for (int index=0; index < indicatorUnitList.size(); index++) {
    IndicatorUnit unit=indicatorUnitList.get(index);
    IndicatorCommonUtil.compositeIndicatorMap(unit);
  }
switch (chartType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
    for (    IndicatorUnit unit : indicatorUnitList) {
      if (unit.isExcuted()) {
        FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
        Arrays.sort(frequencyExt);
        int numOfShown=frequencyExt.length;
        IndicatorParameters parameters=unit.getIndicator().getParameters();
        if (parameters != null) {
          if (parameters.getTopN() < frequencyExt.length) {
            numOfShown=parameters.getTopN();
          }
        }
        for (int i=0; i < numOfShown; i++) {
          dataset.addValue(frequencyExt[i].getValue(),""String_Node_Str"",String.valueOf(frequencyExt[i].getKey()));
          ChartDataEntity entity=new ChartDataEntity();
          entity.setIndicator(unit.getIndicator());
          entity.setLabel(String.valueOf(frequencyExt[i].getKey()));
          entity.setValue(String.valueOf(frequencyExt[i].getValue()));
          entity.setPercent(String.valueOf(frequencyExt[i].getFrequency()));
          dataset.addDataEntity(entity);
        }
      }
    }
  break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
for (IndicatorUnit unit : indicatorUnitList) {
  if (unit.isExcuted()) {
    String label=unit.getIndicatorName();
    PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
    double notMathCount=patternExt.getNotMatchingValueCount();
    double machCount=patternExt.getMatchingValueCount();
    dataset.addValue(machCount,""String_Node_Str"",label);
    dataset.addValue(notMathCount,""String_Node_Str"",label);
    PatternChartDataEntity patternEntity=new PatternChartDataEntity();
    patternEntity.setIndicator(unit.getIndicator());
    patternEntity.setLabel(unit.getIndicatorName());
    patternEntity.setNumMatch(String.valueOf(machCount));
    patternEntity.setNumNoMatch(String.valueOf(notMathCount));
    dataset.addDataEntity(patternEntity);
  }
}
break;
case TEXT_STATISTICS:
ComparatorsFactory.sort(indicatorUnitList,ComparatorsFactory.TEXT_STATISTICS_COMPARATOR_ID);
case SIMPLE_STATISTICS:
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
double value=Double.parseDouble(unit.getValue().toString());
String label=unit.getIndicatorName();
dataset.addValue(value,label,""String_Node_Str"");
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(String.valueOf(value));
entity.setPercent(String.valueOf(value / unit.getIndicator().getCount()));
dataset.addDataEntity(entity);
}
}
break;
case MODE_INDICATOR:
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
String label=unit.getIndicatorName();
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(unit.getValue().toString());
dataset.addDataEntity(entity);
}
}
break;
case SUMMARY_STATISTICS:
CustomerBoxDataset defaultDataset=new CustomerBoxDataset();
Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
double doubleValue=Double.parseDouble(unit.getValue().toString());
map.put(unit.getType(),doubleValue);
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(unit.getIndicatorName());
entity.setValue(String.valueOf(unit.getValue()));
dataset.addDataEntity(entity);
defaultDataset.addDataEntity(entity);
}
}
if (map.size() != 6) {
for (IndicatorEnum indicatorEnum : map.keySet()) {
dataset.addValue(map.get(indicatorEnum),""String_Node_Str"",indicatorEnum.getLabel());
}
}
 else {
BoxAndWhiskerItem item=createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
defaultDataset.add(item,""String_Node_Str"",""String_Node_Str"");
return defaultDataset;
}
break;
default :
return null;
}
return dataset;
}","static IDataEntity createDataset(EIndicatorChartType chartType,List<IndicatorUnit> indicatorUnitList){
  CustomerDataset dataset=new CustomerDataset();
  for (int index=0; index < indicatorUnitList.size(); index++) {
    IndicatorUnit unit=indicatorUnitList.get(index);
    IndicatorCommonUtil.compositeIndicatorMap(unit);
  }
switch (chartType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
    for (    IndicatorUnit unit : indicatorUnitList) {
      if (unit.isExcuted()) {
        FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
        if (chartType == EIndicatorChartType.FREQUENCE_STATISTICS) {
          ComparatorsFactory.sort(frequencyExt,ComparatorsFactory.FREQUENCY_COMPARATOR_ID);
        }
        if (chartType == EIndicatorChartType.LOW_FREQUENCE_STATISTICS) {
          ComparatorsFactory.sort(frequencyExt,ComparatorsFactory.LOW_FREQUENCY_COMPARATOR_ID);
        }
        int numOfShown=frequencyExt.length;
        IndicatorParameters parameters=unit.getIndicator().getParameters();
        if (parameters != null) {
          if (parameters.getTopN() < frequencyExt.length) {
            numOfShown=parameters.getTopN();
          }
        }
        for (int i=0; i < numOfShown; i++) {
          dataset.addValue(frequencyExt[i].getValue(),""String_Node_Str"",String.valueOf(frequencyExt[i].getKey()));
          ChartDataEntity entity=new ChartDataEntity();
          entity.setIndicator(unit.getIndicator());
          entity.setLabel(String.valueOf(frequencyExt[i].getKey()));
          entity.setValue(String.valueOf(frequencyExt[i].getValue()));
          entity.setPercent(String.valueOf(frequencyExt[i].getFrequency()));
          dataset.addDataEntity(entity);
        }
      }
    }
  break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
for (IndicatorUnit unit : indicatorUnitList) {
  if (unit.isExcuted()) {
    String label=unit.getIndicatorName();
    PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
    double notMathCount=patternExt.getNotMatchingValueCount();
    double machCount=patternExt.getMatchingValueCount();
    dataset.addValue(machCount,""String_Node_Str"",label);
    dataset.addValue(notMathCount,""String_Node_Str"",label);
    PatternChartDataEntity patternEntity=new PatternChartDataEntity();
    patternEntity.setIndicator(unit.getIndicator());
    patternEntity.setLabel(unit.getIndicatorName());
    patternEntity.setNumMatch(String.valueOf(machCount));
    patternEntity.setNumNoMatch(String.valueOf(notMathCount));
    dataset.addDataEntity(patternEntity);
  }
}
break;
case TEXT_STATISTICS:
ComparatorsFactory.sort(indicatorUnitList,ComparatorsFactory.TEXT_STATISTICS_COMPARATOR_ID);
case SIMPLE_STATISTICS:
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
double value=Double.parseDouble(unit.getValue().toString());
String label=unit.getIndicatorName();
dataset.addValue(value,label,""String_Node_Str"");
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(String.valueOf(value));
entity.setPercent(String.valueOf(value / unit.getIndicator().getCount()));
dataset.addDataEntity(entity);
}
}
break;
case MODE_INDICATOR:
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
String label=unit.getIndicatorName();
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(unit.getValue().toString());
dataset.addDataEntity(entity);
}
}
break;
case SUMMARY_STATISTICS:
CustomerBoxDataset defaultDataset=new CustomerBoxDataset();
Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
double doubleValue=Double.parseDouble(unit.getValue().toString());
map.put(unit.getType(),doubleValue);
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(unit.getIndicatorName());
entity.setValue(String.valueOf(unit.getValue()));
dataset.addDataEntity(entity);
defaultDataset.addDataEntity(entity);
}
}
if (map.size() != 6) {
for (IndicatorEnum indicatorEnum : map.keySet()) {
dataset.addValue(map.get(indicatorEnum),""String_Node_Str"",indicatorEnum.getLabel());
}
}
 else {
BoxAndWhiskerItem item=createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
defaultDataset.add(item,""String_Node_Str"",""String_Node_Str"");
return defaultDataset;
}
break;
default :
return null;
}
return dataset;
}",0.5848131604749973
140193,"static JFreeChart createChart(EIndicatorChartType chartType,IDataEntity dataset){
  CategoryDataset cDataset=(CategoryDataset)dataset;
switch (chartType) {
case FREQUENCE_STATISTICS:
    return createBarChart(chartType.getLiteral(),cDataset);
case PATTERN_MATCHING:
case SQL_PATTERN_MATCHING:
  return createStacked3DBarChart(chartType.getLiteral(),cDataset);
case SUMMARY_STATISTICS:
if (dataset instanceof BoxAndWhiskerCategoryDataset) {
  BoxAndWhiskerCategoryDataset bDataset=(BoxAndWhiskerCategoryDataset)dataset;
  return createBoxAndWhiskerChart(chartType.getLiteral(),bDataset);
}
return create3DBarChart(chartType.getLiteral(),cDataset,false);
case SIMPLE_STATISTICS:
case TEXT_STATISTICS:
return create3DBarChart(chartType.getLiteral(),cDataset,true);
default :
return null;
}
}","static JFreeChart createChart(EIndicatorChartType chartType,IDataEntity dataset){
  CategoryDataset cDataset=(CategoryDataset)dataset;
switch (chartType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
    return createBarChart(chartType.getLiteral(),cDataset);
case PATTERN_MATCHING:
case SQL_PATTERN_MATCHING:
  return createStacked3DBarChart(chartType.getLiteral(),cDataset);
case SUMMARY_STATISTICS:
if (dataset instanceof BoxAndWhiskerCategoryDataset) {
  BoxAndWhiskerCategoryDataset bDataset=(BoxAndWhiskerCategoryDataset)dataset;
  return createBoxAndWhiskerChart(chartType.getLiteral(),bDataset);
}
return create3DBarChart(chartType.getLiteral(),cDataset,false);
case SIMPLE_STATISTICS:
case TEXT_STATISTICS:
return create3DBarChart(chartType.getLiteral(),cDataset,true);
default :
return null;
}
}",0.9807093963907902
140194,"public static void compositeIndicatorMap(IndicatorUnit indicatorUnit){
  Color tempColor=null;
  Object tempObject=null;
  IndicatorEnum type=indicatorUnit.getType();
  Indicator indicator=indicatorUnit.getIndicator();
  if (!indicator.getInstantiatedExpressions().isEmpty()) {
switch (type) {
case RowCountIndicatorEnum:
      tempColor=COLOR_ROW_COUNT;
    tempObject=((RowCountIndicator)indicator).getCount();
  break;
case NullCountIndicatorEnum:
tempColor=COLOR_NULL_COUNT;
tempObject=((NullCountIndicator)indicator).getNullCount();
break;
case DistinctCountIndicatorEnum:
tempColor=COLOR_DISTIN_CTCOUNT;
tempObject=((DistinctCountIndicator)indicator).getDistinctValueCount();
break;
case UniqueIndicatorEnum:
tempColor=COLOR_UNIQUE_COUNT;
tempObject=(((UniqueCountIndicator)indicator).getUniqueValueCount());
break;
case DuplicateCountIndicatorEnum:
tempColor=COLOR_DUPLICATE_COUNT;
tempObject=((DuplicateCountIndicator)indicator).getDuplicateValueCount();
break;
case BlankCountIndicatorEnum:
tempColor=COLOR_BLANKCOUNT;
tempObject=((BlankCountIndicator)indicator).getBlankCount();
break;
case MinLengthIndicatorEnum:
tempColor=COLOR_MIN_LENGTH;
tempObject=((MinLengthIndicator)indicator).getLength();
break;
case MaxLengthIndicatorEnum:
tempColor=COLOR_MAX_LENGTH;
tempObject=((MaxLengthIndicator)indicator).getLength();
break;
case AverageLengthIndicatorEnum:
tempColor=COLOR_AVERAGE_LENGTH;
tempObject=((AverageLengthIndicator)indicator).getAverageLength();
break;
case FrequencyIndicatorEnum:
case LowFrequencyIndicatorEnum:
FrequencyIndicator frequency=(FrequencyIndicator)indicator;
Set<Object> valueSet=frequency.getDistinctValues();
if (valueSet == null) {
break;
}
FrequencyExt[] frequencyExt=new FrequencyExt[valueSet.size()];
int i=0;
for (Object o : valueSet) {
frequencyExt[i]=new FrequencyExt();
frequencyExt[i].setKey(o);
frequencyExt[i].setValue(frequency.getCount(o));
frequencyExt[i].setFrequency(frequency.getFrequency(o));
i++;
}
tempColor=null;
tempObject=frequencyExt;
break;
case MeanIndicatorEnum:
tempColor=null;
tempObject=((MeanIndicator)indicator).getMean();
break;
case MedianIndicatorEnum:
tempColor=null;
tempObject=((MedianIndicator)indicator).getMedian();
break;
case MinValueIndicatorEnum:
tempColor=null;
tempObject=((MinValueIndicator)indicator).getValue();
break;
case MaxValueIndicatorEnum:
tempColor=null;
tempObject=((MaxValueIndicator)indicator).getValue();
break;
case LowerQuartileIndicatorEnum:
tempColor=null;
tempObject=((LowerQuartileIndicator)indicator).getValue();
break;
case UpperQuartileIndicatorEnum:
tempColor=null;
tempObject=((UpperQuartileIndicator)indicator).getValue();
break;
case RegexpMatchingIndicatorEnum:
case SqlPatternMatchingIndicatorEnum:
tempColor=null;
PatternMatchingExt patternExt=new PatternMatchingExt();
patternExt.setMatchingValueCount(((PatternMatchingIndicator)indicator).getMatchingValueCount());
patternExt.setNotMatchingValueCount(((PatternMatchingIndicator)indicator).getNotMatchingValueCount());
tempObject=patternExt;
break;
case ModeIndicatorEnum:
tempColor=null;
tempObject=((ModeIndicator)indicator).getMode();
default :
}
indicatorUnit.setExcuted(true);
indicatorUnit.setColor(tempColor);
indicatorUnit.setValue(tempObject);
}
}","public static void compositeIndicatorMap(IndicatorUnit indicatorUnit){
  Object tempObject=null;
  IndicatorEnum type=indicatorUnit.getType();
  Indicator indicator=indicatorUnit.getIndicator();
  if (!indicator.getInstantiatedExpressions().isEmpty()) {
switch (type) {
case RowCountIndicatorEnum:
      tempObject=((RowCountIndicator)indicator).getCount();
    break;
case NullCountIndicatorEnum:
  tempObject=((NullCountIndicator)indicator).getNullCount();
break;
case DistinctCountIndicatorEnum:
tempObject=((DistinctCountIndicator)indicator).getDistinctValueCount();
break;
case UniqueIndicatorEnum:
tempObject=(((UniqueCountIndicator)indicator).getUniqueValueCount());
break;
case DuplicateCountIndicatorEnum:
tempObject=((DuplicateCountIndicator)indicator).getDuplicateValueCount();
break;
case BlankCountIndicatorEnum:
tempObject=((BlankCountIndicator)indicator).getBlankCount();
break;
case MinLengthIndicatorEnum:
tempObject=((MinLengthIndicator)indicator).getLength();
break;
case MaxLengthIndicatorEnum:
tempObject=((MaxLengthIndicator)indicator).getLength();
break;
case AverageLengthIndicatorEnum:
tempObject=((AverageLengthIndicator)indicator).getAverageLength();
break;
case FrequencyIndicatorEnum:
case LowFrequencyIndicatorEnum:
FrequencyIndicator frequency=(FrequencyIndicator)indicator;
Set<Object> valueSet=frequency.getDistinctValues();
if (valueSet == null) {
break;
}
FrequencyExt[] frequencyExt=new FrequencyExt[valueSet.size()];
int i=0;
for (Object o : valueSet) {
frequencyExt[i]=new FrequencyExt();
frequencyExt[i].setKey(o);
frequencyExt[i].setValue(frequency.getCount(o));
frequencyExt[i].setFrequency(frequency.getFrequency(o));
i++;
}
tempObject=frequencyExt;
break;
case MeanIndicatorEnum:
tempObject=((MeanIndicator)indicator).getMean();
break;
case MedianIndicatorEnum:
tempObject=((MedianIndicator)indicator).getMedian();
break;
case MinValueIndicatorEnum:
tempObject=((MinValueIndicator)indicator).getValue();
break;
case MaxValueIndicatorEnum:
tempObject=((MaxValueIndicator)indicator).getValue();
break;
case LowerQuartileIndicatorEnum:
tempObject=((LowerQuartileIndicator)indicator).getValue();
break;
case UpperQuartileIndicatorEnum:
tempObject=((UpperQuartileIndicator)indicator).getValue();
break;
case RegexpMatchingIndicatorEnum:
case SqlPatternMatchingIndicatorEnum:
PatternMatchingExt patternExt=new PatternMatchingExt();
patternExt.setMatchingValueCount(((PatternMatchingIndicator)indicator).getMatchingValueCount());
patternExt.setNotMatchingValueCount(((PatternMatchingIndicator)indicator).getNotMatchingValueCount());
tempObject=patternExt;
break;
case ModeIndicatorEnum:
tempObject=((ModeIndicator)indicator).getMode();
default :
}
indicatorUnit.setExcuted(true);
indicatorUnit.setValue(tempObject);
}
}",0.6954340190667335
140195,"public static void createTable(Composite parent,ChartWithData inputObject,final Analysis analysis){
  TableViewer tbViewer=new TableViewer(parent,SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
  final Table table=tbViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  GridData gd=new GridData();
  gd.heightHint=220;
  gd.widthHint=500;
  gd.verticalAlignment=SWT.BEGINNING;
  table.setLayoutData(gd);
  String[] names=null;
  Integer[] widths=null;
  final EIndicatorChartType chartTableType=inputObject.getChartType();
switch (chartTableType) {
case FREQUENCE_STATISTICS:
    names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  widths=new Integer[]{200,150,150};
break;
case MODE_INDICATOR:
names=new String[]{""String_Node_Str""};
widths=new Integer[]{500};
break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,75,75,75,75};
break;
case SIMPLE_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,150,150};
break;
case TEXT_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
case SUMMARY_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
default :
}
createTableColumnStructure(names,widths,table);
tbViewer.setLabelProvider(ChartTableProviderFactory.createLabelProvider(chartTableType));
tbViewer.setContentProvider(ChartTableProviderFactory.createContentProvider(chartTableType));
tbViewer.setInput(inputObject);
tbViewer.addSelectionChangedListener(new ISelectionChangedListener(){
public void selectionChanged(SelectionChangedEvent event){
StructuredSelection selection=(StructuredSelection)event.getSelection();
ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
final Indicator indicator=dataEntity.getIndicator();
Menu menu=new Menu(table.getShell(),SWT.POP_UP);
table.setMenu(menu);
MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartTableType,analysis,dataEntity);
for (final MenuItemEntity itemEntity : itemEntities) {
MenuItem item=new MenuItem(menu,SWT.PUSH);
item.setText(itemEntity.getLabel());
item.setImage(itemEntity.getIcon());
item.addListener(SWT.Selection,new Listener(){
public void handleEvent(Event event){
viewRecordInDataExplorer(analysis,indicator,itemEntity.getQuery());
}
}
);
}
menu.setVisible(true);
}
}
);
addTooltipOnTableItem(table);
}","public static void createTable(Composite parent,ChartWithData inputObject,final Analysis analysis){
  TableViewer tbViewer=new TableViewer(parent,SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
  final Table table=tbViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  GridData gd=new GridData();
  gd.heightHint=220;
  gd.widthHint=500;
  gd.verticalAlignment=SWT.BEGINNING;
  table.setLayoutData(gd);
  String[] names=null;
  Integer[] widths=null;
  final EIndicatorChartType chartTableType=inputObject.getChartType();
switch (chartTableType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
    names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  widths=new Integer[]{200,150,150};
break;
case MODE_INDICATOR:
names=new String[]{""String_Node_Str""};
widths=new Integer[]{500};
break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,75,75,75,75};
break;
case SIMPLE_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,150,150};
break;
case TEXT_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
case SUMMARY_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
default :
}
createTableColumnStructure(names,widths,table);
tbViewer.setLabelProvider(ChartTableProviderFactory.createLabelProvider(chartTableType));
tbViewer.setContentProvider(ChartTableProviderFactory.createContentProvider(chartTableType));
tbViewer.setInput(inputObject);
tbViewer.addSelectionChangedListener(new ISelectionChangedListener(){
public void selectionChanged(SelectionChangedEvent event){
StructuredSelection selection=(StructuredSelection)event.getSelection();
ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
final Indicator indicator=dataEntity.getIndicator();
Menu menu=new Menu(table.getShell(),SWT.POP_UP);
table.setMenu(menu);
MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartTableType,analysis,dataEntity);
for (final MenuItemEntity itemEntity : itemEntities) {
MenuItem item=new MenuItem(menu,SWT.PUSH);
item.setText(itemEntity.getLabel());
item.setImage(itemEntity.getIcon());
item.addListener(SWT.Selection,new Listener(){
public void handleEvent(Event event){
viewRecordInDataExplorer(analysis,indicator,itemEntity.getQuery());
}
}
);
}
menu.setVisible(true);
}
}
);
addTooltipOnTableItem(table);
}",0.9940165991121404
140196,"static ITableLabelProvider createLabelProvider(EIndicatorChartType chartType){
switch (chartType) {
case FREQUENCE_STATISTICS:
    return new FrequencyLabelProvider();
case MODE_INDICATOR:
  return new ModeLabelProvider();
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
return new PatternLabelProvider();
case TEXT_STATISTICS:
case SIMPLE_STATISTICS:
return new SimpleLabelProvider();
case SUMMARY_STATISTICS:
return new SummaryLabelProvider();
default :
return new BaseChartTableLabelProvider();
}
}","static ITableLabelProvider createLabelProvider(EIndicatorChartType chartType){
switch (chartType) {
case MODE_INDICATOR:
    return new ModeLabelProvider();
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
  return new PatternLabelProvider();
case SUMMARY_STATISTICS:
return new SummaryLabelProvider();
default :
return new BaseChartTableLabelProvider();
}
}",0.7819025522041764
140197,"@Override public boolean performFinish(){
  try {
    IndicatorParameters parameters=indicator.getParameters();
    if (parameters == null) {
      isDirty=true;
      parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
      indicator.setParameters(parameters);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    TextParameters textParameters=parameters.getTextParameter();
    for (    AbstractIndicatorParameter formParam : AbstractIndicatorForm.getParameters()) {
      if (!ParamCompareFactory.compare(parameters,formParam)) {
        isDirty=true;
switch (formParam.getFormEnum()) {
case BinsDesignerForm:
          BinsDesignerParameter tempParam=(BinsDesignerParameter)formParam;
        int numOfShown=tempParam.getNumOfShown();
      Domain domain=tempParam.getUserDomian();
    if (domain.getRanges().size() == 0) {
      parameters.setBins(null);
    }
 else {
      parameters.setBins(domain);
    }
  parameters.setTopN(numOfShown);
break;
case TextParametersForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextParameter textParam=(TextParameter)formParam;
textParameters.setIgnoreCase(textParam.isIngoreCase());
parameters.setTopN(textParam.getNumOfShown());
break;
case TextLengthForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextLengthParameter lengthParam=(TextLengthParameter)formParam;
textParameters.setUseBlank(lengthParam.isUseBlank());
textParameters.setUseNulls(lengthParam.isUseNull());
break;
case DataThresholdsForm:
DataThresholdsParameter dataParam=(DataThresholdsParameter)formParam;
String min1=dataParam.getMinThreshold();
String max1=dataParam.getMaxThreshold();
if (""String_Node_Str"".equals(min1) && ""String_Node_Str"".equals(max1)) {
parameters.setDataValidDomain(null);
}
 else {
IndicatorHelper.setDataThreshold(indicator,min1,max1);
IndicatorHelper.propagateDataThresholdsInChildren(indicator);
}
break;
case IndicatorThresholdsForm:
IndicatorThresholdsParameter indiParam=(IndicatorThresholdsParameter)formParam;
String min2=indiParam.getMinThreshold();
String max2=indiParam.getMaxThreshold();
if (""String_Node_Str"".equals(min2) && ""String_Node_Str"".equals(max2)) {
parameters.setIndicatorValidDomain(null);
}
 else {
IndicatorHelper.setIndicatorThreshold(parameters,min2,max2);
}
break;
case TimeSlicesForm:
TimeSlicesParameter timeParam=(TimeSlicesParameter)formParam;
DateGrain dateGrain=DateGrain.get(timeParam.getDataUnit());
dateParameters.setDateAggregationType(dateGrain);
parameters.setTopN(timeParam.getNumOfShown());
break;
case NumbericNominalForm:
NumbericNominalParameter numbParam=(NumbericNominalParameter)formParam;
parameters.setTopN(numbParam.getNumberOfShown());
break;
case ExpectedValueForm:
ExpectedValueParameter expectedParam=(ExpectedValueParameter)formParam;
IndicatorHelper.setIndicatorExpectedValue(parameters,expectedParam.getExpectedValue());
break;
default :
}
}
}
return true;
}
 catch (Exception e) {
e.printStackTrace();
}
return false;
}","@Override public boolean performFinish(){
  try {
    IndicatorParameters parameters=indicator.getParameters();
    if (parameters == null) {
      isDirty=true;
      parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
      indicator.setParameters(parameters);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    TextParameters textParameters=parameters.getTextParameter();
    for (    AbstractIndicatorParameter formParam : AbstractIndicatorForm.getParameters()) {
      if (!ParamCompareFactory.compare(parameters,formParam)) {
        isDirty=true;
switch (formParam.getFormEnum()) {
case BinsDesignerForm:
          BinsDesignerParameter tempParam=(BinsDesignerParameter)formParam;
        int numOfShown=tempParam.getNumOfShown();
      Domain domain=tempParam.getUserDomian();
    if (domain.getRanges().size() == 0) {
      parameters.setBins(null);
    }
 else {
      parameters.setBins(domain);
    }
  parameters.setTopN(numOfShown);
break;
case TextParametersForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextParameter textParam=(TextParameter)formParam;
textParameters.setIgnoreCase(textParam.isIngoreCase());
parameters.setTopN(textParam.getNumOfShown());
break;
case TextLengthForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextLengthParameter lengthParam=(TextLengthParameter)formParam;
textParameters.setUseBlank(lengthParam.isUseBlank());
textParameters.setUseNulls(lengthParam.isUseNull());
break;
case DataThresholdsForm:
DataThresholdsParameter dataParam=(DataThresholdsParameter)formParam;
String min1=dataParam.getMinThreshold();
String max1=dataParam.getMaxThreshold();
if (""String_Node_Str"".equals(min1) && ""String_Node_Str"".equals(max1)) {
parameters.setDataValidDomain(null);
IndicatorHelper.propagateDataThresholdsInChildren(indicator);
}
 else {
IndicatorHelper.setDataThreshold(indicator,min1,max1);
IndicatorHelper.propagateDataThresholdsInChildren(indicator);
}
break;
case IndicatorThresholdsForm:
IndicatorThresholdsParameter indiParam=(IndicatorThresholdsParameter)formParam;
String min2=indiParam.getMinThreshold();
String max2=indiParam.getMaxThreshold();
if (""String_Node_Str"".equals(min2) && ""String_Node_Str"".equals(max2)) {
parameters.setIndicatorValidDomain(null);
}
 else {
IndicatorHelper.setIndicatorThreshold(parameters,min2,max2);
}
break;
case TimeSlicesForm:
TimeSlicesParameter timeParam=(TimeSlicesParameter)formParam;
DateGrain dateGrain=DateGrain.get(timeParam.getDataUnit());
dateParameters.setDateAggregationType(dateGrain);
parameters.setTopN(timeParam.getNumOfShown());
break;
case NumbericNominalForm:
NumbericNominalParameter numbParam=(NumbericNominalParameter)formParam;
parameters.setTopN(numbParam.getNumberOfShown());
break;
case ExpectedValueForm:
ExpectedValueParameter expectedParam=(ExpectedValueParameter)formParam;
IndicatorHelper.setIndicatorExpectedValue(parameters,expectedParam.getExpectedValue());
break;
default :
}
}
}
return true;
}
 catch (Exception e) {
e.printStackTrace();
}
return false;
}",0.9902851770604826
140198,"/** 
 * Method ""propagateDataThresholdsInChildren"" will propage the data threshold to the indicator if the given indicator is a BoxIndicator (Otherwise, nothing is done).
 * @param indicator an instance of BoxIndicator
 */
public static void propagateDataThresholdsInChildren(Indicator indicator){
  if (IndicatorsPackage.eINSTANCE.getBoxIndicator().equals(indicator.eClass())) {
    BoxIndicator boxIndicator=(BoxIndicator)indicator;
    String[] dataThreshold=IndicatorHelper.getDataThreshold(boxIndicator);
    if (dataThreshold == null) {
      dataThreshold=new String[2];
    }
    RangeIndicator rangeIndicator=boxIndicator.getRangeIndicator();
    setDataThresholds(rangeIndicator,dataThreshold);
    IQRIndicator iqr=boxIndicator.getIQR();
    setDataThresholds(iqr,dataThreshold);
    setDataThreshold(boxIndicator.getMeanIndicator(),dataThreshold[0],dataThreshold[1]);
    setDataThreshold(boxIndicator.getMedianIndicator(),dataThreshold[0],dataThreshold[1]);
  }
}","/** 
 * Method ""propagateDataThresholdsInChildren"" will propage the data threshold to the indicator if the given indicator is a BoxIndicator (Otherwise, nothing is done).
 * @param indicator an instance of BoxIndicator
 */
public static void propagateDataThresholdsInChildren(Indicator indicator){
  if (IndicatorsPackage.eINSTANCE.getBoxIndicator().equals(indicator.eClass())) {
    BoxIndicator boxIndicator=(BoxIndicator)indicator;
    String[] dataThreshold=IndicatorHelper.getDataThreshold(boxIndicator);
    if (dataThreshold == null) {
      final EList<Indicator> allChildIndicators=boxIndicator.getAllChildIndicators();
      for (      Indicator ind : allChildIndicators) {
        clearDataThresholds(ind);
      }
      return;
    }
    RangeIndicator rangeIndicator=boxIndicator.getRangeIndicator();
    setDataThresholds(rangeIndicator,dataThreshold);
    IQRIndicator iqr=boxIndicator.getIQR();
    setDataThresholds(iqr,dataThreshold);
    setDataThreshold(boxIndicator.getMeanIndicator(),dataThreshold[0],dataThreshold[1]);
    setDataThreshold(boxIndicator.getMedianIndicator(),dataThreshold[0],dataThreshold[1]);
  }
}",0.8987701040681173
140199,"/** 
 * DOC scorreia Comment method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=quote(tdColumn.getName());
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getTextIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=quote(ColumnHelper.getColumnSetFullName(tdColumn));
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || indicatorEclass.isSuperTypeOf(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        colName=dbms().getPatternFinderDefaultFunction(colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=instantiateSqlExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}","/** 
 * DOC scorreia Comment method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=quote(tdColumn.getName());
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getTextIndicator().isSuperTypeOf(indicatorEclass)) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
    }
  }
  final ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(tdColumn);
  String schemaName=getQuotedSchemaName(columnSetOwner);
  String table=quote(ColumnHelper.getColumnSetFullName(tdColumn));
  String catalogName=getQuotedCatalogName(columnSetOwner);
  if (catalogName == null && schemaName != null) {
    final TdSchema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final TdCatalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  table=dbms().toQualifiedName(catalogName,schemaName,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || indicatorEclass.isSuperTypeOf(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)|| indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        colName=dbms().getPatternFinderDefaultFunction(colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=instantiateSqlExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}",0.9939712036314632
140200,"private static JFreeChart createStacked3DBarChart(String titile,CategoryDataset dataset){
  JFreeChart chart=ChartFactory.createStackedBarChart3D(null,null,""String_Node_Str"",dataset,PlotOrientation.VERTICAL,true,false,false);
  CategoryPlot plot=chart.getCategoryPlot();
  BarRenderer renderer=(BarRenderer)plot.getRenderer();
  renderer.setSeriesPaint(0,Color.GREEN);
  renderer.setSeriesPaint(1,Color.RED);
  renderer.setBaseItemLabelsVisible(true);
  renderer.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator(""String_Node_Str"",NumberFormat.getIntegerInstance(),new DecimalFormat(""String_Node_Str"")));
  renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER));
  NumberAxis axis=(NumberAxis)plot.getRangeAxis();
  axis.setNumberFormatOverride(NumberFormat.getPercentInstance());
  axis.setUpperMargin(0.05f);
  axis.setLowerMargin(0.01f);
  return chart;
}","private static JFreeChart createStacked3DBarChart(String titile,CategoryDataset dataset){
  JFreeChart chart=ChartFactory.createStackedBarChart3D(null,null,""String_Node_Str"",dataset,PlotOrientation.VERTICAL,true,false,false);
  CategoryPlot plot=chart.getCategoryPlot();
  StackedBarRenderer3D renderer=(StackedBarRenderer3D)plot.getRenderer();
  renderer.setSeriesPaint(0,Color.GREEN);
  renderer.setSeriesPaint(1,Color.RED);
  renderer.setBaseItemLabelsVisible(true);
  renderer.setRenderAsPercentages(true);
  renderer.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator(""String_Node_Str"",NumberFormat.getIntegerInstance(),new DecimalFormat(""String_Node_Str"")));
  renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER));
  NumberAxis axis=(NumberAxis)plot.getRangeAxis();
  axis.setNumberFormatOverride(NumberFormat.getPercentInstance());
  axis.setUpperMargin(0.05f);
  axis.setLowerMargin(0.01f);
  return chart;
}",0.9690937663698272
140201,"public String addWhereToSqlStringStatement(String completedSqlString,List<String> whereExpressions) throws ParseException {
  TypedReturnCode<String> trc=this.prepareQuery(completedSqlString);
  String query=trc.getObject();
  String where=this.buildWhereExpression(whereExpressions);
  if ((where != null && where.trim().length() != 0) || completedSqlString.contains(AND_WHERE_CLAUSE)) {
    query=this.addWhereToStatement(query,where);
  }
  this.finalizeQuery(query);
  return query;
}","public String addWhereToSqlStringStatement(String completedSqlString,List<String> whereExpressions) throws ParseException {
  TypedReturnCode<String> trc=this.prepareQuery(completedSqlString);
  String query=trc.getObject();
  String where=this.buildWhereExpression(whereExpressions);
  if ((where != null && where.trim().length() != 0) || completedSqlString.contains(AND_WHERE_CLAUSE)) {
    query=this.addWhereToStatement(query,where);
  }
  return this.finalizeQuery(query);
}",0.9762150982419856
140202,"public String getValidRowsStatement() throws TalendException {
  if (this.indicator == null || !(this.indicator instanceof PatternMatchingIndicator)) {
    throw new TalendException(""String_Node_Str"" + analysis.getName());
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString((PatternMatchingIndicator)this.indicator);
  String regexCmp=dbmsLanguage.regexLike(indicator.getAnalyzedElement().getName(),regexPatternString);
  return getRowsStatement(regexCmp);
}","public String getValidRowsStatement() throws TalendException {
  if (this.indicator == null || !(this.indicator instanceof PatternMatchingIndicator)) {
    throw new TalendException(""String_Node_Str"" + analysis.getName());
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString((PatternMatchingIndicator)this.indicator);
  final String columnName=dbmsLanguage.quote(indicator.getAnalyzedElement().getName());
  String regexCmp=dbmsLanguage.regexLike(columnName,regexPatternString);
  return getRowsStatement(regexCmp);
}",0.8707753479125249
140203,"public String getInvalidRowsStatement() throws TalendException {
  if (this.indicator == null || !(this.indicator instanceof PatternMatchingIndicator)) {
    throw new TalendException(""String_Node_Str"" + analysis.getName());
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString((PatternMatchingIndicator)this.indicator);
  String columnName=indicator.getAnalyzedElement().getName();
  String regexCmp=dbmsLanguage.regexNotLike(columnName,regexPatternString);
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  return getRowsStatement(regexCmp + nullClause);
}","public String getInvalidRowsStatement() throws TalendException {
  if (this.indicator == null || !(this.indicator instanceof PatternMatchingIndicator)) {
    throw new TalendException(""String_Node_Str"" + analysis.getName());
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString((PatternMatchingIndicator)this.indicator);
  String columnName=dbmsLanguage.quote(indicator.getAnalyzedElement().getName());
  String regexCmp=dbmsLanguage.regexNotLike(columnName,regexPatternString);
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  return getRowsStatement(regexCmp + nullClause);
}",0.9836065573770492
140204,"public String getValue(){
  return value;
}","public String getValue(){
  return StringFormatUtil.format(value,StringFormatUtil.NUMBER).toString();
}",0.589041095890411
140205,"public String getPersent(){
  if (percent != null) {
    return percent;
  }
 else {
    Double d=Double.parseDouble(getValue()) / indicator.getCount().doubleValue();
    return String.valueOf(d);
  }
}","public String getPersent(){
  return StringFormatUtil.format(percent,StringFormatUtil.PERCENT).toString();
}",0.3290322580645161
140206,"public String getPerMatch(){
  Double match=Double.parseDouble(getNumMatch());
  return String.valueOf(match / getSum());
}","public String getPerMatch(){
  Double match=Double.parseDouble(getNumMatch());
  return StringFormatUtil.format(match / getSum(),StringFormatUtil.PERCENT).toString();
}",0.8041237113402062
140207,"public String getPerNoMatch(){
  Double nomatch=Double.parseDouble(getNumNoMatch());
  return String.valueOf(nomatch / getSum());
}","public String getPerNoMatch(){
  Double nomatch=Double.parseDouble(getNumNoMatch());
  return StringFormatUtil.format(nomatch / getSum(),StringFormatUtil.PERCENT).toString();
}",0.8143322475570033
140208,"/** 
 * DOC scorreia Comment method ""getValueFields"".
 * @param value2freq
 * @return
 */
private Object getValueFields(Object[] value2freq){
  int nbFields=value2freq.length;
  if (nbFields == 2) {
    return value2freq[0];
  }
  StringBuffer buf=new StringBuffer();
  if (nbFields == 3) {
    Object year=value2freq[0];
    buf.append(format4digit(year));
    Object quarter=value2freq[1];
    buf.append(String.valueOf(quarter));
    return buf.toString();
  }
  if (nbFields == 4) {
    buf.append(format4digit(value2freq[0]));
    buf.append(format2digit(value2freq[2]));
    return buf.toString();
  }
  if (nbFields == 5) {
    Object year=value2freq[0];
    buf.append(format4digit(year));
    Object month=String.valueOf(value2freq[2]);
    buf.append(format2digit(month));
    String week=String.valueOf(value2freq[3]);
    buf.append(format1digit(week));
    return buf.toString();
  }
  if (nbFields == 6) {
    Object year=value2freq[0];
    buf.append(format4digit(year));
    Object month=String.valueOf(value2freq[2]);
    buf.append(format2digit(month));
    String day=String.valueOf(value2freq[4]);
    buf.append(format2digit(day));
    return buf.toString();
  }
  return null;
}","/** 
 * DOC scorreia Comment method ""getValueFields"".
 * @param value2freq
 * @return
 */
private Object getValueFields(Object[] value2freq){
  int nbFields=value2freq.length;
  if (nbFields == 2) {
    return value2freq[0];
  }
  StringBuffer buf=new StringBuffer();
  if (nbFields == 3) {
    Object year=value2freq[0];
    buf.append(format4digit(year));
    Object quarter=value2freq[1];
    buf.append(String.valueOf(quarter));
    return buf.toString();
  }
  if (nbFields == 4) {
    buf.append(format4digit(value2freq[0]));
    buf.append(format2digit(value2freq[2]));
    return buf.toString();
  }
  if (nbFields == 5) {
    Object year=value2freq[0];
    buf.append(format4digit(year));
    Object month=String.valueOf(value2freq[2]);
    buf.append(format2digit(month));
    String week=String.valueOf(value2freq[3]);
    buf.append(format2digit(week));
    return buf.toString();
  }
  if (nbFields == 6) {
    Object year=value2freq[0];
    buf.append(format4digit(year));
    Object month=String.valueOf(value2freq[2]);
    buf.append(format2digit(month));
    String day=String.valueOf(value2freq[4]);
    buf.append(format2digit(day));
    return buf.toString();
  }
  return null;
}",0.9991666666666666
140209,"public Map<String,String> getQueryMap();","/** 
 * DOC Zqin Comment method ""getQueryMap"".
 * @return
 */
public Map<String,String> getQueryMap();",0.5633802816901409
140210,public void setEnitty(ChartDataEntity entity);,"/** 
 * DOC Zqin Comment method ""setEnitty"".
 * @param entity
 */
public void setEnitty(ChartDataEntity entity);",0.5822784810126582
140211,"public static IIndicatorNode[] buildIndicatorCategory(){
  if (indicatorCategoryNodes != null) {
    return indicatorCategoryNodes;
  }
  IndicatorCategoryNode simpleCategoryNode=new IndicatorCategoryNode(IndicatorEnum.CountsIndicatorEnum);
  IndicatorCategoryNode textCategoryNode=new IndicatorCategoryNode(IndicatorEnum.TextIndicatorEnum);
  IndicatorCategoryNode boxCategoryNode=new IndicatorCategoryNode(IndicatorEnum.BoxIIndicatorEnum);
  IndicatorEnum[] advanceIndicatorEnums=new IndicatorEnum[]{IndicatorEnum.ModeIndicatorEnum,IndicatorEnum.FrequencyIndicatorEnum};
  IndicatorCategoryNode advanceCategoryNode=new IndicatorCategoryNode(""String_Node_Str"",advanceIndicatorEnums);
  indicatorCategoryNodes=new IndicatorCategoryNode[]{simpleCategoryNode,textCategoryNode,boxCategoryNode,advanceCategoryNode};
  return indicatorCategoryNodes;
}","public static IIndicatorNode[] buildIndicatorCategory(){
  if (indicatorCategoryNodes != null) {
    return indicatorCategoryNodes;
  }
  IndicatorCategoryNode simpleCategoryNode=new IndicatorCategoryNode(IndicatorEnum.CountsIndicatorEnum);
  IndicatorCategoryNode textCategoryNode=new IndicatorCategoryNode(IndicatorEnum.TextIndicatorEnum);
  IndicatorCategoryNode boxCategoryNode=new IndicatorCategoryNode(IndicatorEnum.BoxIIndicatorEnum);
  IndicatorEnum[] patternFinderEnums=new IndicatorEnum[]{IndicatorEnum.PatternFreqIndicatorEnum,IndicatorEnum.PatternLowFreqIndicatorEnum};
  IndicatorCategoryNode patternFinderCategoryNode=new IndicatorCategoryNode(""String_Node_Str"",patternFinderEnums);
  IndicatorEnum[] advanceIndicatorEnums=new IndicatorEnum[]{IndicatorEnum.ModeIndicatorEnum,IndicatorEnum.FrequencyIndicatorEnum,IndicatorEnum.LowFrequencyIndicatorEnum};
  IndicatorCategoryNode advanceCategoryNode=new IndicatorCategoryNode(""String_Node_Str"",advanceIndicatorEnums);
  indicatorCategoryNodes=new IndicatorCategoryNode[]{simpleCategoryNode,textCategoryNode,boxCategoryNode,patternFinderCategoryNode,advanceCategoryNode};
  return indicatorCategoryNodes;
}",0.8256333830104322
140212,"public static Object createSliceFormData(double min,double max,double numb){
  List<SliceEntity> returnList=new ArrayList<SliceEntity>();
  DecimalFormat format=(DecimalFormat)DecimalFormat.getNumberInstance();
  format.applyPattern(""String_Node_Str"");
  double mod=(max - min) / numb;
  for (int i=1; i < numb + 1; i++) {
    SliceEntity entity=new SliceEntity();
    entity.setLowValue(format.format(min));
    min=min + mod;
    entity.setHighValue(format.format(min));
    returnList.add(entity);
  }
  return returnList;
}","public static Object createSliceFormData(double min,double max,double numb){
  List<SliceEntity> returnList=new ArrayList<SliceEntity>();
  double mod=(max - min) / numb;
  for (int i=1; i < numb + 1; i++) {
    SliceEntity entity=new SliceEntity();
    entity.setLowValue(StringFormatUtil.format(min,StringFormatUtil.NUMBER).toString());
    min=min + mod;
    entity.setHighValue(StringFormatUtil.format(min,StringFormatUtil.NUMBER).toString());
    returnList.add(entity);
  }
  return returnList;
}",0.7580174927113703
140213,"private void createResultDataComposite(final Composite comp,final ColumnIndicator columnIndicator){
  if (columnIndicator.getIndicators().length != 0) {
    final TdColumn column=columnIndicator.getTdColumn();
    IRunnableWithProgress rwp=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            for (            ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,true)) {
              ExpandableComposite subComp=toolkit.createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
              subComp.setText(chartData.getChartType().getLiteral());
              subComp.setLayoutData(new GridData(GridData.FILL_BOTH));
              final Composite composite=toolkit.createComposite(subComp,SWT.NULL);
              composite.setLayout(new GridLayout(2,false));
              composite.setLayoutData(new GridData(GridData.FILL_BOTH));
              final Analysis analysis=masterPage.getAnalysisHandler().getAnalysis();
              ChartTableFactory.createTable(composite,chartData,analysis);
              final JFreeChart chart=chartData.getChart();
              final EIndicatorChartType chartType=chartData.getChartType();
              if (chart != null) {
                Composite frameComp=toolkit.createComposite(composite,SWT.EMBEDDED);
                frameComp.setLayout(new GridLayout());
                GridData gd=new GridData();
                gd.heightHint=230;
                gd.widthHint=460;
                if (chartData.getChartType() == EIndicatorChartType.SUMMARY_STATISTICS) {
                  gd=new GridData();
                  gd.heightHint=500;
                  gd.widthHint=150;
                }
                frameComp.setLayoutData(gd);
                Frame frame=SWT_AWT.new_Frame(frameComp);
                frame.setLayout(new java.awt.GridLayout());
                ChartPanel chartPanel=new ChartPanel(chart);
                addMouseListenerForChart(chartPanel,chartType,analysis);
                frame.add(chartPanel);
                frame.pack();
                frame.validate();
              }
              subComp.setClient(composite);
              subComp.addExpansionListener(new ExpansionAdapter(){
                @Override public void expansionStateChanged(                ExpansionEvent e){
                  form.reflow(true);
                }
              }
);
            }
          }
        }
);
        monitor.done();
      }
    }
;
    try {
      new ProgressMonitorDialog(null).run(true,false,rwp);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}","private void createResultDataComposite(final Composite comp,final ColumnIndicator columnIndicator){
  if (columnIndicator.getIndicators().length != 0) {
    final TdColumn column=columnIndicator.getTdColumn();
    IRunnableWithProgress rwp=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            for (            ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,true)) {
              ExpandableComposite subComp=toolkit.createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
              subComp.setText(chartData.getChartType().getLiteral());
              subComp.setLayoutData(new GridData(GridData.FILL_BOTH));
              final Composite composite=toolkit.createComposite(subComp,SWT.NULL);
              composite.setLayout(new GridLayout(2,false));
              composite.setLayoutData(new GridData(GridData.FILL_BOTH));
              final Analysis analysis=masterPage.getAnalysisHandler().getAnalysis();
              ChartTableFactory.createTable(composite,chartData,analysis);
              final JFreeChart chart=chartData.getChart();
              final EIndicatorChartType chartType=chartData.getChartType();
              if (chart != null) {
                Composite frameComp=toolkit.createComposite(composite,SWT.EMBEDDED);
                frameComp.setLayout(new GridLayout());
                GridData gd=new GridData();
                gd.heightHint=230;
                gd.widthHint=460;
                if (chartData.getChartType() == EIndicatorChartType.SUMMARY_STATISTICS) {
                  gd=new GridData();
                  gd.heightHint=450;
                  gd.widthHint=150;
                }
                frameComp.setLayoutData(gd);
                Frame frame=SWT_AWT.new_Frame(frameComp);
                frame.setLayout(new java.awt.GridLayout());
                ChartPanel chartPanel=new ChartPanel(chart);
                addMouseListenerForChart(chartPanel,chartType,analysis);
                frame.add(chartPanel);
                frame.pack();
                frame.validate();
              }
              subComp.setClient(composite);
              subComp.addExpansionListener(new ExpansionAdapter(){
                @Override public void expansionStateChanged(                ExpansionEvent e){
                  form.reflow(true);
                }
              }
);
            }
          }
        }
);
        monitor.done();
      }
    }
;
    try {
      new ProgressMonitorDialog(null).run(true,false,rwp);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}",0.999657651489216
140214,"public void chartMouseClicked(ChartMouseEvent event){
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    IDataEntity dataEntity=(IDataEntity)cateEntity.getDataset();
    ChartDataEntity currentDataEntity=null;
    for (    ChartDataEntity entity : dataEntity.getDataEntities()) {
      if (chartType == EIndicatorChartType.FREQUENCE_STATISTICS) {
        if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
          currentDataEntity=entity;
        }
      }
 else {
        if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
          currentDataEntity=entity;
        }
      }
    }
    PopupMenu menu=new PopupMenu(""String_Node_Str"");
    if (currentDataEntity != null) {
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartType,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(itemEntity.getLabel());
        item.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent arg0){
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                ChartTableFactory.viewRecordInDataExplorer(analysis,currentIndicator,itemEntity.getQuery());
              }
            }
);
          }
        }
);
        menu.add(item);
      }
      chartPanel.add(menu);
      menu.show(chartPanel,event.getTrigger().getX(),event.getTrigger().getY());
    }
  }
}","public void chartMouseClicked(ChartMouseEvent event){
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    IDataEntity dataEntity=(IDataEntity)cateEntity.getDataset();
    ChartDataEntity currentDataEntity=null;
    ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
    if (dataEntities.length == 1) {
      currentDataEntity=dataEntities[0];
    }
 else {
      for (      ChartDataEntity entity : dataEntities) {
        if (chartType == EIndicatorChartType.FREQUENCE_STATISTICS) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
        }
 else {
          if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
        }
      }
    }
    PopupMenu menu=new PopupMenu(""String_Node_Str"");
    if (currentDataEntity != null) {
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartType,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(itemEntity.getLabel());
        item.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent arg0){
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                ChartTableFactory.viewRecordInDataExplorer(analysis,currentIndicator,itemEntity.getQuery());
              }
            }
);
          }
        }
);
        menu.add(item);
      }
      chartPanel.add(menu);
      menu.show(chartPanel,event.getTrigger().getX(),event.getTrigger().getY());
    }
  }
}",0.934416715031921
140215,"private void addMouseListenerForChart(final ChartPanel chartPanel,final EIndicatorChartType chartType,final Analysis analysis){
  chartPanel.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        IDataEntity dataEntity=(IDataEntity)cateEntity.getDataset();
        ChartDataEntity currentDataEntity=null;
        for (        ChartDataEntity entity : dataEntity.getDataEntities()) {
          if (chartType == EIndicatorChartType.FREQUENCE_STATISTICS) {
            if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
        PopupMenu menu=new PopupMenu(""String_Node_Str"");
        if (currentDataEntity != null) {
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartType,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(itemEntity.getLabel());
            item.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent arg0){
                Display.getDefault().asyncExec(new Runnable(){
                  public void run(){
                    ChartTableFactory.viewRecordInDataExplorer(analysis,currentIndicator,itemEntity.getQuery());
                  }
                }
);
              }
            }
);
            menu.add(item);
          }
          chartPanel.add(menu);
          menu.show(chartPanel,event.getTrigger().getX(),event.getTrigger().getY());
        }
      }
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}","private void addMouseListenerForChart(final ChartPanel chartPanel,final EIndicatorChartType chartType,final Analysis analysis){
  chartPanel.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        IDataEntity dataEntity=(IDataEntity)cateEntity.getDataset();
        ChartDataEntity currentDataEntity=null;
        ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
        if (dataEntities.length == 1) {
          currentDataEntity=dataEntities[0];
        }
 else {
          for (          ChartDataEntity entity : dataEntities) {
            if (chartType == EIndicatorChartType.FREQUENCE_STATISTICS) {
              if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
                currentDataEntity=entity;
              }
            }
 else {
              if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
                currentDataEntity=entity;
              }
            }
          }
        }
        PopupMenu menu=new PopupMenu(""String_Node_Str"");
        if (currentDataEntity != null) {
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartType,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(itemEntity.getLabel());
            item.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent arg0){
                Display.getDefault().asyncExec(new Runnable(){
                  public void run(){
                    ChartTableFactory.viewRecordInDataExplorer(analysis,currentIndicator,itemEntity.getQuery());
                  }
                }
);
              }
            }
);
            menu.add(item);
          }
          chartPanel.add(menu);
          menu.show(chartPanel,event.getTrigger().getX(),event.getTrigger().getY());
        }
      }
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}",0.9455970493314892
140216,"static IDataEntity createDataset(EIndicatorChartType chartType,List<IndicatorUnit> indicatorUnitList){
  CustomerDataset dataset=new CustomerDataset();
  for (int index=0; index < indicatorUnitList.size(); index++) {
    IndicatorUnit unit=indicatorUnitList.get(index);
    IndicatorCommonUtil.compositeIndicatorMap(unit);
  }
switch (chartType) {
case FREQUENCE_STATISTICS:
    for (    IndicatorUnit unit : indicatorUnitList) {
      if (unit.isExcuted()) {
        FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
        Arrays.sort(frequencyExt);
        int numOfShown=frequencyExt.length;
        IndicatorParameters parameters=unit.getIndicator().getParameters();
        if (parameters != null) {
          if (parameters.getTopN() < frequencyExt.length) {
            numOfShown=parameters.getTopN();
          }
        }
        for (int i=0; i < numOfShown; i++) {
          dataset.addValue(frequencyExt[i].getValue(),""String_Node_Str"",String.valueOf(frequencyExt[i].getKey()));
          ChartDataEntity entity=new ChartDataEntity();
          entity.setIndicator(unit.getIndicator());
          entity.setLabel(String.valueOf(frequencyExt[i].getKey()));
          entity.setValue(String.valueOf(frequencyExt[i].getValue()));
          dataset.addDataEntity(entity);
        }
      }
    }
  break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
for (IndicatorUnit unit : indicatorUnitList) {
  if (unit.isExcuted()) {
    String label=unit.getIndicatorName();
    PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
    double notMathCount=patternExt.getNotMatchingValueCount();
    double machCount=patternExt.getMatchingValueCount();
    dataset.addValue(machCount,""String_Node_Str"",label);
    dataset.addValue(notMathCount,""String_Node_Str"",label);
    PatternChartDataEntity patternEntity=new PatternChartDataEntity();
    patternEntity.setIndicator(unit.getIndicator());
    patternEntity.setLabel(unit.getIndicatorName());
    patternEntity.setNumMatch(String.valueOf(machCount));
    patternEntity.setNumNoMatch(String.valueOf(notMathCount));
    dataset.addDataEntity(patternEntity);
  }
}
break;
case TEXT_STATISTICS:
ComparatorsFactory.sort(indicatorUnitList,ComparatorsFactory.TEXT_STATISTICS_COMPARATOR_ID);
case SIMPLE_STATISTICS:
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
double value=Double.parseDouble(unit.getValue().toString());
String label=unit.getIndicatorName();
dataset.addValue(value,label,""String_Node_Str"");
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(String.valueOf(value));
dataset.addDataEntity(entity);
}
}
break;
case SUMMARY_STATISTICS:
CustomerBoxDataset defaultDataset=new CustomerBoxDataset();
Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
double doubleValue=Double.parseDouble(unit.getValue().toString());
map.put(unit.getType(),doubleValue);
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(unit.getIndicatorName());
entity.setValue(String.valueOf(unit.getValue()));
dataset.addDataEntity(entity);
defaultDataset.addDataEntity(entity);
}
}
if (map.size() != 6) {
for (IndicatorEnum indicatorEnum : map.keySet()) {
dataset.addValue(map.get(indicatorEnum),""String_Node_Str"",indicatorEnum.getLabel());
}
}
 else {
BoxAndWhiskerItem item=createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
defaultDataset.add(item,""String_Node_Str"",""String_Node_Str"");
return defaultDataset;
}
default :
return null;
}
return dataset;
}","static IDataEntity createDataset(EIndicatorChartType chartType,List<IndicatorUnit> indicatorUnitList){
  CustomerDataset dataset=new CustomerDataset();
  for (int index=0; index < indicatorUnitList.size(); index++) {
    IndicatorUnit unit=indicatorUnitList.get(index);
    IndicatorCommonUtil.compositeIndicatorMap(unit);
  }
switch (chartType) {
case FREQUENCE_STATISTICS:
    for (    IndicatorUnit unit : indicatorUnitList) {
      if (unit.isExcuted()) {
        FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
        Arrays.sort(frequencyExt);
        int numOfShown=frequencyExt.length;
        IndicatorParameters parameters=unit.getIndicator().getParameters();
        if (parameters != null) {
          if (parameters.getTopN() < frequencyExt.length) {
            numOfShown=parameters.getTopN();
          }
        }
        for (int i=0; i < numOfShown; i++) {
          dataset.addValue(frequencyExt[i].getValue(),""String_Node_Str"",String.valueOf(frequencyExt[i].getKey()));
          ChartDataEntity entity=new ChartDataEntity();
          entity.setIndicator(unit.getIndicator());
          entity.setLabel(String.valueOf(frequencyExt[i].getKey()));
          entity.setValue(String.valueOf(frequencyExt[i].getValue()));
          entity.setPercent(String.valueOf(frequencyExt[i].getFrequency()));
          dataset.addDataEntity(entity);
        }
      }
    }
  break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
for (IndicatorUnit unit : indicatorUnitList) {
  if (unit.isExcuted()) {
    String label=unit.getIndicatorName();
    PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
    double notMathCount=patternExt.getNotMatchingValueCount();
    double machCount=patternExt.getMatchingValueCount();
    dataset.addValue(machCount,""String_Node_Str"",label);
    dataset.addValue(notMathCount,""String_Node_Str"",label);
    PatternChartDataEntity patternEntity=new PatternChartDataEntity();
    patternEntity.setIndicator(unit.getIndicator());
    patternEntity.setLabel(unit.getIndicatorName());
    patternEntity.setNumMatch(String.valueOf(machCount));
    patternEntity.setNumNoMatch(String.valueOf(notMathCount));
    dataset.addDataEntity(patternEntity);
  }
}
break;
case TEXT_STATISTICS:
ComparatorsFactory.sort(indicatorUnitList,ComparatorsFactory.TEXT_STATISTICS_COMPARATOR_ID);
case SIMPLE_STATISTICS:
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
double value=Double.parseDouble(unit.getValue().toString());
String label=unit.getIndicatorName();
dataset.addValue(value,label,""String_Node_Str"");
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(String.valueOf(value));
entity.setPercent(String.valueOf(value / unit.getIndicator().getCount()));
dataset.addDataEntity(entity);
}
}
break;
case MODE_INDICATOR:
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
String label=unit.getIndicatorName();
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(unit.getValue().toString());
dataset.addDataEntity(entity);
}
}
break;
case SUMMARY_STATISTICS:
CustomerBoxDataset defaultDataset=new CustomerBoxDataset();
Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
double doubleValue=Double.parseDouble(unit.getValue().toString());
map.put(unit.getType(),doubleValue);
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(unit.getIndicatorName());
entity.setValue(String.valueOf(unit.getValue()));
dataset.addDataEntity(entity);
defaultDataset.addDataEntity(entity);
}
}
if (map.size() != 6) {
for (IndicatorEnum indicatorEnum : map.keySet()) {
dataset.addValue(map.get(indicatorEnum),""String_Node_Str"",indicatorEnum.getLabel());
}
}
 else {
BoxAndWhiskerItem item=createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
defaultDataset.add(item,""String_Node_Str"",""String_Node_Str"");
return defaultDataset;
}
default :
return null;
}
return dataset;
}",0.9420970266040688
140217,"public static void compositeIndicatorMap(IndicatorUnit indicatorUnit){
  Color tempColor=null;
  Object tempObject=null;
  IndicatorEnum type=indicatorUnit.getType();
  Indicator indicator=indicatorUnit.getIndicator();
  if (!indicator.getInstantiatedExpressions().isEmpty()) {
switch (type) {
case RowCountIndicatorEnum:
      tempColor=COLOR_ROW_COUNT;
    tempObject=((RowCountIndicator)indicator).getCount();
  break;
case NullCountIndicatorEnum:
tempColor=COLOR_NULL_COUNT;
tempObject=((NullCountIndicator)indicator).getNullCount();
break;
case DistinctCountIndicatorEnum:
tempColor=COLOR_DISTIN_CTCOUNT;
tempObject=((DistinctCountIndicator)indicator).getDistinctValueCount();
break;
case UniqueIndicatorEnum:
tempColor=COLOR_UNIQUE_COUNT;
tempObject=(((UniqueCountIndicator)indicator).getUniqueValueCount());
break;
case DuplicateCountIndicatorEnum:
tempColor=COLOR_DUPLICATE_COUNT;
tempObject=((DuplicateCountIndicator)indicator).getDuplicateValueCount();
break;
case BlankCountIndicatorEnum:
tempColor=COLOR_BLANKCOUNT;
tempObject=((BlankCountIndicator)indicator).getBlankCount();
break;
case MinLengthIndicatorEnum:
tempColor=COLOR_MIN_LENGTH;
tempObject=((MinLengthIndicator)indicator).getLength();
break;
case MaxLengthIndicatorEnum:
tempColor=COLOR_MAX_LENGTH;
tempObject=((MaxLengthIndicator)indicator).getLength();
break;
case AverageLengthIndicatorEnum:
tempColor=COLOR_AVERAGE_LENGTH;
tempObject=TextFormatFactory.createStandardNumber(((AverageLengthIndicator)indicator).getAverageLength());
break;
case FrequencyIndicatorEnum:
FrequencyIndicator frequency=(FrequencyIndicator)indicator;
Set<Object> valueSet=frequency.getDistinctValues();
if (valueSet == null) {
break;
}
FrequencyExt[] frequencyExt=new FrequencyExt[valueSet.size()];
int i=0;
for (Object o : valueSet) {
frequencyExt[i]=new FrequencyExt();
frequencyExt[i].setKey(o);
frequencyExt[i].setValue(frequency.getCount(o));
frequencyExt[i].setFrequency(frequency.getFrequency(o));
i++;
}
tempColor=null;
tempObject=frequencyExt;
break;
case MeanIndicatorEnum:
tempColor=null;
tempObject=TextFormatFactory.createStandardNumber(((MeanIndicator)indicator).getMean());
break;
case MedianIndicatorEnum:
tempColor=null;
tempObject=TextFormatFactory.createStandardNumber(((MedianIndicator)indicator).getMedian());
break;
case MinValueIndicatorEnum:
tempColor=null;
tempObject=((MinValueIndicator)indicator).getValue();
break;
case MaxValueIndicatorEnum:
tempColor=null;
tempObject=((MaxValueIndicator)indicator).getValue();
break;
case LowerQuartileIndicatorEnum:
tempColor=null;
tempObject=((LowerQuartileIndicator)indicator).getValue();
break;
case UpperQuartileIndicatorEnum:
tempColor=null;
tempObject=((UpperQuartileIndicator)indicator).getValue();
break;
case RegexpMatchingIndicatorEnum:
case SqlPatternMatchingIndicatorEnum:
tempColor=null;
PatternMatchingExt patternExt=new PatternMatchingExt();
patternExt.setMatchingValueCount(((PatternMatchingIndicator)indicator).getMatchingValueCount());
patternExt.setNotMatchingValueCount(((PatternMatchingIndicator)indicator).getNotMatchingValueCount());
tempObject=patternExt;
break;
case ModeIndicatorEnum:
tempColor=null;
tempObject=((ModeIndicator)indicator).getMode();
default :
}
indicatorUnit.setExcuted(true);
indicatorUnit.setColor(tempColor);
indicatorUnit.setValue(tempObject);
}
}","public static void compositeIndicatorMap(IndicatorUnit indicatorUnit){
  Color tempColor=null;
  Object tempObject=null;
  IndicatorEnum type=indicatorUnit.getType();
  Indicator indicator=indicatorUnit.getIndicator();
  if (!indicator.getInstantiatedExpressions().isEmpty()) {
switch (type) {
case RowCountIndicatorEnum:
      tempColor=COLOR_ROW_COUNT;
    tempObject=((RowCountIndicator)indicator).getCount();
  break;
case NullCountIndicatorEnum:
tempColor=COLOR_NULL_COUNT;
tempObject=((NullCountIndicator)indicator).getNullCount();
break;
case DistinctCountIndicatorEnum:
tempColor=COLOR_DISTIN_CTCOUNT;
tempObject=((DistinctCountIndicator)indicator).getDistinctValueCount();
break;
case UniqueIndicatorEnum:
tempColor=COLOR_UNIQUE_COUNT;
tempObject=(((UniqueCountIndicator)indicator).getUniqueValueCount());
break;
case DuplicateCountIndicatorEnum:
tempColor=COLOR_DUPLICATE_COUNT;
tempObject=((DuplicateCountIndicator)indicator).getDuplicateValueCount();
break;
case BlankCountIndicatorEnum:
tempColor=COLOR_BLANKCOUNT;
tempObject=((BlankCountIndicator)indicator).getBlankCount();
break;
case MinLengthIndicatorEnum:
tempColor=COLOR_MIN_LENGTH;
tempObject=((MinLengthIndicator)indicator).getLength();
break;
case MaxLengthIndicatorEnum:
tempColor=COLOR_MAX_LENGTH;
tempObject=((MaxLengthIndicator)indicator).getLength();
break;
case AverageLengthIndicatorEnum:
tempColor=COLOR_AVERAGE_LENGTH;
tempObject=((AverageLengthIndicator)indicator).getAverageLength();
break;
case FrequencyIndicatorEnum:
FrequencyIndicator frequency=(FrequencyIndicator)indicator;
Set<Object> valueSet=frequency.getDistinctValues();
if (valueSet == null) {
break;
}
FrequencyExt[] frequencyExt=new FrequencyExt[valueSet.size()];
int i=0;
for (Object o : valueSet) {
frequencyExt[i]=new FrequencyExt();
frequencyExt[i].setKey(o);
frequencyExt[i].setValue(frequency.getCount(o));
frequencyExt[i].setFrequency(frequency.getFrequency(o));
i++;
}
tempColor=null;
tempObject=frequencyExt;
break;
case MeanIndicatorEnum:
tempColor=null;
tempObject=((MeanIndicator)indicator).getMean();
break;
case MedianIndicatorEnum:
tempColor=null;
tempObject=((MedianIndicator)indicator).getMedian();
break;
case MinValueIndicatorEnum:
tempColor=null;
tempObject=((MinValueIndicator)indicator).getValue();
break;
case MaxValueIndicatorEnum:
tempColor=null;
tempObject=((MaxValueIndicator)indicator).getValue();
break;
case LowerQuartileIndicatorEnum:
tempColor=null;
tempObject=((LowerQuartileIndicator)indicator).getValue();
break;
case UpperQuartileIndicatorEnum:
tempColor=null;
tempObject=((UpperQuartileIndicator)indicator).getValue();
break;
case RegexpMatchingIndicatorEnum:
case SqlPatternMatchingIndicatorEnum:
tempColor=null;
PatternMatchingExt patternExt=new PatternMatchingExt();
patternExt.setMatchingValueCount(((PatternMatchingIndicator)indicator).getMatchingValueCount());
patternExt.setNotMatchingValueCount(((PatternMatchingIndicator)indicator).getNotMatchingValueCount());
tempObject=patternExt;
break;
case ModeIndicatorEnum:
tempColor=null;
tempObject=((ModeIndicator)indicator).getMode();
default :
}
indicatorUnit.setExcuted(true);
indicatorUnit.setColor(tempColor);
indicatorUnit.setValue(tempObject);
}
}",0.981549815498155
140218,"public IndicatorUnit(IndicatorEnum type,Indicator indicator,ColumnIndicator parentColumn){
  this.type=type;
  this.indicator=indicator;
  this.indicatorName=type.getLabel();
  this.parentColumn=parentColumn;
}","public IndicatorUnit(IndicatorEnum type,Indicator indicator,ColumnIndicator parentColumn){
  this.type=type;
  this.indicator=indicator;
  this.indicatorName=indicator.getName();
  this.parentColumn=parentColumn;
}",0.9481132075471698
140219,"/** 
 * Getter for value.
 * @return the value
 */
public Object getValue(){
  return this.value;
}","/** 
 * Getter for value.
 * @return the value
 */
public Object getValue(){
  return StringFormatUtil.format(this.value,StringFormatUtil.NUMBER);
}",0.8016194331983806
140220,"public static void createTable(Composite parent,ChartWithData inputObject,final Analysis analysis){
  TableViewer tbViewer=new TableViewer(parent,SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
  final Table table=tbViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  String[] names=null;
  Integer[] widths=null;
  final EIndicatorChartType chartTableType=inputObject.getChartType();
switch (chartTableType) {
case FREQUENCE_STATISTICS:
    names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  widths=new Integer[]{200,150,150};
break;
case MODE_INDICATOR:
names=new String[]{""String_Node_Str""};
widths=new Integer[]{500};
break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,75,75,75,75};
break;
case SIMPLE_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,150,150};
break;
case TEXT_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
case SUMMARY_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
default :
}
createTableColumnStructure(names,widths,table);
tbViewer.setLabelProvider(ChartTableProviderFactory.createLabelProvider(chartTableType));
tbViewer.setContentProvider(ChartTableProviderFactory.createContentProvider(chartTableType));
tbViewer.setInput(inputObject);
tbViewer.addSelectionChangedListener(new ISelectionChangedListener(){
public void selectionChanged(SelectionChangedEvent event){
StructuredSelection selection=(StructuredSelection)event.getSelection();
ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
final Indicator indicator=dataEntity.getIndicator();
Menu menu=new Menu(table.getShell(),SWT.POP_UP);
table.setMenu(menu);
MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartTableType,analysis,dataEntity);
for (final MenuItemEntity itemEntity : itemEntities) {
MenuItem item=new MenuItem(menu,SWT.PUSH);
item.setText(itemEntity.getLabel());
item.setImage(itemEntity.getIcon());
item.addListener(SWT.Selection,new Listener(){
public void handleEvent(Event event){
viewRecordInDataExplorer(analysis,indicator,itemEntity.getQuery());
}
}
);
}
menu.setVisible(true);
}
}
);
addTooltipOnTableItem(table);
}","public static void createTable(Composite parent,ChartWithData inputObject,final Analysis analysis){
  TableViewer tbViewer=new TableViewer(parent,SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
  final Table table=tbViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  GridData gd=new GridData();
  gd.heightHint=220;
  gd.widthHint=500;
  gd.verticalAlignment=SWT.BEGINNING;
  table.setLayoutData(gd);
  String[] names=null;
  Integer[] widths=null;
  final EIndicatorChartType chartTableType=inputObject.getChartType();
switch (chartTableType) {
case FREQUENCE_STATISTICS:
    names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  widths=new Integer[]{200,150,150};
break;
case MODE_INDICATOR:
names=new String[]{""String_Node_Str""};
widths=new Integer[]{500};
break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,75,75,75,75};
break;
case SIMPLE_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,150,150};
break;
case TEXT_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
case SUMMARY_STATISTICS:
names=new String[]{""String_Node_Str"",""String_Node_Str""};
widths=new Integer[]{200,300};
break;
default :
}
createTableColumnStructure(names,widths,table);
tbViewer.setLabelProvider(ChartTableProviderFactory.createLabelProvider(chartTableType));
tbViewer.setContentProvider(ChartTableProviderFactory.createContentProvider(chartTableType));
tbViewer.setInput(inputObject);
tbViewer.addSelectionChangedListener(new ISelectionChangedListener(){
public void selectionChanged(SelectionChangedEvent event){
StructuredSelection selection=(StructuredSelection)event.getSelection();
ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
final Indicator indicator=dataEntity.getIndicator();
Menu menu=new Menu(table.getShell(),SWT.POP_UP);
table.setMenu(menu);
MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(chartTableType,analysis,dataEntity);
for (final MenuItemEntity itemEntity : itemEntities) {
MenuItem item=new MenuItem(menu,SWT.PUSH);
item.setText(itemEntity.getLabel());
item.setImage(itemEntity.getIcon());
item.addListener(SWT.Selection,new Listener(){
public void handleEvent(Event event){
viewRecordInDataExplorer(analysis,indicator,itemEntity.getQuery());
}
}
);
}
menu.setVisible(true);
}
}
);
addTooltipOnTableItem(table);
}",0.9718004338394792
140221,"public static MenuItemEntity[] generate(EIndicatorChartType chartTableType,Analysis analysis,ChartDataEntity entity){
  IDataExplorer explorer=null;
switch (chartTableType) {
case FREQUENCE_STATISTICS:
    explorer=new FrequencyStatisticsExplorer();
  break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
explorer=new PatternExplorer();
break;
case SIMPLE_STATISTICS:
explorer=new SimpleStatisticsExplorer();
break;
case TEXT_STATISTICS:
explorer=new TextStatisticsExplorer();
break;
case SUMMARY_STATISTICS:
explorer=new SummaryStastictisExplorer();
break;
default :
}
explorer.setAnalysis(analysis);
explorer.setEnitty(entity);
Map<String,String> queryMap=explorer.getQueryMap();
List<MenuItemEntity> retrunList=new ArrayList<MenuItemEntity>();
for (String key : queryMap.keySet()) {
MenuItemEntity itemEntity=new MenuItemEntity(key,null,queryMap.get(key));
retrunList.add(itemEntity);
}
return retrunList.toArray(new MenuItemEntity[queryMap.size()]);
}","public static MenuItemEntity[] generate(EIndicatorChartType chartTableType,Analysis analysis,ChartDataEntity entity){
  IDataExplorer explorer=null;
switch (chartTableType) {
case FREQUENCE_STATISTICS:
    explorer=new FrequencyStatisticsExplorer();
  break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
explorer=new PatternExplorer();
break;
case SIMPLE_STATISTICS:
explorer=new SimpleStatisticsExplorer();
break;
case TEXT_STATISTICS:
explorer=new TextStatisticsExplorer();
break;
case SUMMARY_STATISTICS:
explorer=new SummaryStastictisExplorer();
break;
default :
}
if (explorer != null) {
explorer.setAnalysis(analysis);
explorer.setEnitty(entity);
Map<String,String> queryMap=explorer.getQueryMap();
List<MenuItemEntity> retrunList=new ArrayList<MenuItemEntity>();
for (String key : queryMap.keySet()) {
MenuItemEntity itemEntity=new MenuItemEntity(key,null,queryMap.get(key));
retrunList.add(itemEntity);
}
return retrunList.toArray(new MenuItemEntity[queryMap.size()]);
}
 else {
return new MenuItemEntity[0];
}
}",0.966733870967742
140222,"public void modify(Object element,String property,Object value){
  TableItem item=(TableItem)element;
  SliceEntity entity=(SliceEntity)item.getData();
  if (property.equals(""String_Node_Str"")) {
    entity.setLowValue(value.toString());
    parameter.setBinsData(tableViewer.getInput());
  }
 else   if (property.equals(""String_Node_Str"")) {
    entity.setHighValue(value.toString());
    parameter.setBinsData(tableViewer.getInput());
  }
  try {
    TextFormatFactory.createLocalFormatValue(value);
    updateStatus(IStatus.OK,MSG_OK);
  }
 catch (  Exception e) {
    updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
  }
  tableViewer.refresh();
}","public void modify(Object element,String property,Object value){
  TableItem item=(TableItem)element;
  SliceEntity entity=(SliceEntity)item.getData();
  if (property.equals(""String_Node_Str"")) {
    entity.setLowValue(value.toString());
    parameter.setBinsData(tableViewer.getInput());
  }
 else   if (property.equals(""String_Node_Str"")) {
    entity.setHighValue(value.toString());
    parameter.setBinsData(tableViewer.getInput());
  }
  if (CheckValueUtils.isRealNumberValue(value.toString())) {
    updateStatus(IStatus.OK,MSG_OK);
  }
 else {
    updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
  }
  tableViewer.refresh();
}",0.8935508935508936
140223,"@SuppressWarnings(""String_Node_Str"") public Domain getUserDomian(){
  if (getBinsData() != null) {
    List<SliceEntity> tableData=(List<SliceEntity>)getBinsData();
    Domain userDomain=DomainHelper.createDomain(""String_Node_Str"");
    for (    SliceEntity entity : tableData) {
      try {
        double min=TextFormatFactory.createLocalFormatValue(entity.getLowValue()).doubleValue();
        double max=TextFormatFactory.createLocalFormatValue(entity.getHighValue()).doubleValue();
        RangeRestriction rangeRestriction=DomainHelper.createRealRangeRestriction(min,max);
        userDomain.getRanges().add(rangeRestriction);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
    return userDomain;
  }
  return DomainHelper.createContiguousClosedBinsIntoDomain(""String_Node_Str"",getNumOfBins(),getMinValue(),getMaxValue());
}","@SuppressWarnings(""String_Node_Str"") public Domain getUserDomian(){
  if (getBinsData() != null) {
    List<SliceEntity> tableData=(List<SliceEntity>)getBinsData();
    Domain userDomain=DomainHelper.createDomain(""String_Node_Str"");
    for (    SliceEntity entity : tableData) {
      try {
        double min=Double.valueOf(entity.getLowValue());
        double max=Double.valueOf(entity.getHighValue());
        RangeRestriction rangeRestriction=DomainHelper.createRealRangeRestriction(min,max);
        userDomain.getRanges().add(rangeRestriction);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
    return userDomain;
  }
  return DomainHelper.createContiguousClosedBinsIntoDomain(""String_Node_Str"",getNumOfBins(),getMinValue(),getMaxValue());
}",0.9168704156479216
140224,"public void run(){
  for (  ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
    final JFreeChart chart=chartData.getChart();
    if (chart != null) {
      Composite frameComp=toolkit.createComposite(composite,SWT.EMBEDDED);
      frameComp.setLayout(new GridLayout());
      GridData gd=new GridData();
      gd.heightHint=230;
      gd.widthHint=460;
      if (chartData.getChartType() == EIndicatorChartType.SUMMARY_STATISTICS) {
        gd=new GridData();
        gd.heightHint=500;
        gd.widthHint=150;
      }
      frameComp.setLayoutData(gd);
      Frame frame=SWT_AWT.new_Frame(frameComp);
      frame.setLayout(new java.awt.GridLayout());
      frame.add(new ChartPanel(chart));
      frame.validate();
    }
  }
}","public void run(){
  for (  ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
    final JFreeChart chart=chartData.getChart();
    if (chart != null) {
      Composite frameComp=toolkit.createComposite(comp,SWT.EMBEDDED);
      frameComp.setLayout(new GridLayout());
      GridData gd=new GridData();
      gd.heightHint=230;
      gd.widthHint=460;
      if (chartData.getChartType() == EIndicatorChartType.SUMMARY_STATISTICS && chartData.getEnity().length == 6) {
        gd=new GridData();
        gd.heightHint=400;
        gd.widthHint=150;
      }
      frameComp.setLayoutData(gd);
      Frame frame=SWT_AWT.new_Frame(frameComp);
      frame.setLayout(new java.awt.GridLayout());
      frame.add(new ChartPanel(chart));
      frame.validate();
    }
  }
}",0.9726288987905792
140225,"public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  List<Composite> previewChartList=new ArrayList<Composite>();
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(""String_Node_Str"" + column.getName());
    exComp.setLayout(new GridLayout());
    exComp.setData(columnIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              for (              ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
                final JFreeChart chart=chartData.getChart();
                if (chart != null) {
                  Composite frameComp=toolkit.createComposite(composite,SWT.EMBEDDED);
                  frameComp.setLayout(new GridLayout());
                  GridData gd=new GridData();
                  gd.heightHint=230;
                  gd.widthHint=460;
                  if (chartData.getChartType() == EIndicatorChartType.SUMMARY_STATISTICS) {
                    gd=new GridData();
                    gd.heightHint=500;
                    gd.widthHint=150;
                  }
                  frameComp.setLayoutData(gd);
                  Frame frame=SWT_AWT.new_Frame(frameComp);
                  frame.setLayout(new java.awt.GridLayout());
                  frame.add(new ChartPanel(chart));
                  frame.validate();
                }
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        getChartComposite().layout();
        form.reflow(true);
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}","public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  List<Composite> previewChartList=new ArrayList<Composite>();
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(""String_Node_Str"" + column.getName());
    exComp.setLayout(new GridLayout());
    exComp.setData(columnIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              for (              ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
                final JFreeChart chart=chartData.getChart();
                if (chart != null) {
                  Composite frameComp=toolkit.createComposite(comp,SWT.EMBEDDED);
                  frameComp.setLayout(new GridLayout());
                  GridData gd=new GridData();
                  gd.heightHint=230;
                  gd.widthHint=460;
                  if (chartData.getChartType() == EIndicatorChartType.SUMMARY_STATISTICS && chartData.getEnity().length == 6) {
                    gd=new GridData();
                    gd.heightHint=400;
                    gd.widthHint=150;
                  }
                  frameComp.setLayoutData(gd);
                  Frame frame=SWT_AWT.new_Frame(frameComp);
                  frame.setLayout(new java.awt.GridLayout());
                  frame.add(new ChartPanel(chart));
                  frame.validate();
                }
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        getChartComposite().layout();
        form.reflow(true);
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}",0.9925256387971492
140226,"static IDataEntity createDataset(EIndicatorChartType chartType,List<IndicatorUnit> indicatorUnitList){
  CustomerDataset dataset=new CustomerDataset();
  for (int index=0; index < indicatorUnitList.size(); index++) {
    IndicatorUnit unit=indicatorUnitList.get(index);
    IndicatorCommonUtil.compositeIndicatorMap(unit);
  }
switch (chartType) {
case FREQUENCE_STATISTICS:
    for (    IndicatorUnit unit : indicatorUnitList) {
      if (unit.isExcuted()) {
        FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
        Arrays.sort(frequencyExt);
        int numOfShown=frequencyExt.length;
        IndicatorParameters parameters=unit.getIndicator().getParameters();
        if (parameters != null) {
          if (parameters.getTopN() < frequencyExt.length) {
            numOfShown=parameters.getTopN();
          }
        }
        for (int i=0; i < numOfShown; i++) {
          dataset.addValue(frequencyExt[i].getValue(),""String_Node_Str"",String.valueOf(frequencyExt[i].getKey()));
          ChartDataEntity entity=new ChartDataEntity();
          entity.setIndicator(unit.getIndicator());
          entity.setLabel(String.valueOf(frequencyExt[i].getKey()));
          entity.setValue(String.valueOf(frequencyExt[i].getValue()));
          entity.setPercent(String.valueOf(frequencyExt[i].getFrequency()));
          dataset.addDataEntity(entity);
        }
      }
    }
  break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
for (IndicatorUnit unit : indicatorUnitList) {
  if (unit.isExcuted()) {
    String label=unit.getIndicatorName();
    PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
    double notMathCount=patternExt.getNotMatchingValueCount();
    double machCount=patternExt.getMatchingValueCount();
    dataset.addValue(machCount,""String_Node_Str"",label);
    dataset.addValue(notMathCount,""String_Node_Str"",label);
    PatternChartDataEntity patternEntity=new PatternChartDataEntity();
    patternEntity.setIndicator(unit.getIndicator());
    patternEntity.setLabel(unit.getIndicatorName());
    patternEntity.setNumMatch(String.valueOf(machCount));
    patternEntity.setNumNoMatch(String.valueOf(notMathCount));
    dataset.addDataEntity(patternEntity);
  }
}
break;
case TEXT_STATISTICS:
ComparatorsFactory.sort(indicatorUnitList,ComparatorsFactory.TEXT_STATISTICS_COMPARATOR_ID);
case SIMPLE_STATISTICS:
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
double value=Double.parseDouble(unit.getValue().toString());
String label=unit.getIndicatorName();
dataset.addValue(value,label,""String_Node_Str"");
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(String.valueOf(value));
entity.setPercent(String.valueOf(value / unit.getIndicator().getCount()));
dataset.addDataEntity(entity);
}
}
break;
case MODE_INDICATOR:
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
String label=unit.getIndicatorName();
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(unit.getValue().toString());
dataset.addDataEntity(entity);
}
}
break;
case SUMMARY_STATISTICS:
CustomerBoxDataset defaultDataset=new CustomerBoxDataset();
Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
double doubleValue=Double.parseDouble(unit.getValue().toString());
map.put(unit.getType(),doubleValue);
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(unit.getIndicatorName());
entity.setValue(String.valueOf(unit.getValue()));
dataset.addDataEntity(entity);
defaultDataset.addDataEntity(entity);
}
}
if (map.size() != 6) {
for (IndicatorEnum indicatorEnum : map.keySet()) {
dataset.addValue(map.get(indicatorEnum),""String_Node_Str"",indicatorEnum.getLabel());
}
}
 else {
BoxAndWhiskerItem item=createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
defaultDataset.add(item,""String_Node_Str"",""String_Node_Str"");
return defaultDataset;
}
default :
return null;
}
return dataset;
}","static IDataEntity createDataset(EIndicatorChartType chartType,List<IndicatorUnit> indicatorUnitList){
  CustomerDataset dataset=new CustomerDataset();
  for (int index=0; index < indicatorUnitList.size(); index++) {
    IndicatorUnit unit=indicatorUnitList.get(index);
    IndicatorCommonUtil.compositeIndicatorMap(unit);
  }
switch (chartType) {
case FREQUENCE_STATISTICS:
case LOW_FREQUENCE_STATISTICS:
    for (    IndicatorUnit unit : indicatorUnitList) {
      if (unit.isExcuted()) {
        FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
        Arrays.sort(frequencyExt);
        int numOfShown=frequencyExt.length;
        IndicatorParameters parameters=unit.getIndicator().getParameters();
        if (parameters != null) {
          if (parameters.getTopN() < frequencyExt.length) {
            numOfShown=parameters.getTopN();
          }
        }
        for (int i=0; i < numOfShown; i++) {
          dataset.addValue(frequencyExt[i].getValue(),""String_Node_Str"",String.valueOf(frequencyExt[i].getKey()));
          ChartDataEntity entity=new ChartDataEntity();
          entity.setIndicator(unit.getIndicator());
          entity.setLabel(String.valueOf(frequencyExt[i].getKey()));
          entity.setValue(String.valueOf(frequencyExt[i].getValue()));
          entity.setPercent(String.valueOf(frequencyExt[i].getFrequency()));
          dataset.addDataEntity(entity);
        }
      }
    }
  break;
case SQL_PATTERN_MATCHING:
case PATTERN_MATCHING:
for (IndicatorUnit unit : indicatorUnitList) {
  if (unit.isExcuted()) {
    String label=unit.getIndicatorName();
    PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
    double notMathCount=patternExt.getNotMatchingValueCount();
    double machCount=patternExt.getMatchingValueCount();
    dataset.addValue(machCount,""String_Node_Str"",label);
    dataset.addValue(notMathCount,""String_Node_Str"",label);
    PatternChartDataEntity patternEntity=new PatternChartDataEntity();
    patternEntity.setIndicator(unit.getIndicator());
    patternEntity.setLabel(unit.getIndicatorName());
    patternEntity.setNumMatch(String.valueOf(machCount));
    patternEntity.setNumNoMatch(String.valueOf(notMathCount));
    dataset.addDataEntity(patternEntity);
  }
}
break;
case TEXT_STATISTICS:
ComparatorsFactory.sort(indicatorUnitList,ComparatorsFactory.TEXT_STATISTICS_COMPARATOR_ID);
case SIMPLE_STATISTICS:
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
double value=Double.parseDouble(unit.getValue().toString());
String label=unit.getIndicatorName();
dataset.addValue(value,label,""String_Node_Str"");
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(String.valueOf(value));
entity.setPercent(String.valueOf(value / unit.getIndicator().getCount()));
dataset.addDataEntity(entity);
}
}
break;
case MODE_INDICATOR:
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
String label=unit.getIndicatorName();
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(label);
entity.setValue(unit.getValue().toString());
dataset.addDataEntity(entity);
}
}
break;
case SUMMARY_STATISTICS:
CustomerBoxDataset defaultDataset=new CustomerBoxDataset();
Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
for (IndicatorUnit unit : indicatorUnitList) {
if (unit.isExcuted()) {
double doubleValue=Double.parseDouble(unit.getValue().toString());
map.put(unit.getType(),doubleValue);
ChartDataEntity entity=new ChartDataEntity();
entity.setIndicator(unit.getIndicator());
entity.setLabel(unit.getIndicatorName());
entity.setValue(String.valueOf(unit.getValue()));
dataset.addDataEntity(entity);
defaultDataset.addDataEntity(entity);
}
}
if (map.size() != 6) {
for (IndicatorEnum indicatorEnum : map.keySet()) {
dataset.addValue(map.get(indicatorEnum),""String_Node_Str"",indicatorEnum.getLabel());
}
}
 else {
BoxAndWhiskerItem item=createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
defaultDataset.add(item,""String_Node_Str"",""String_Node_Str"");
return defaultDataset;
}
break;
default :
return null;
}
return dataset;
}",0.995694538862452
140227,"static JFreeChart createChart(EIndicatorChartType chartType,IDataEntity dataset){
  CategoryDataset cDataset=(CategoryDataset)dataset;
switch (chartType) {
case FREQUENCE_STATISTICS:
    return createBarChart(chartType.getLiteral(),cDataset);
case PATTERN_MATCHING:
case SQL_PATTERN_MATCHING:
  return createStacked3DBarChart(chartType.getLiteral(),cDataset);
case SUMMARY_STATISTICS:
if (dataset instanceof BoxAndWhiskerCategoryDataset) {
  BoxAndWhiskerCategoryDataset bDataset=(BoxAndWhiskerCategoryDataset)dataset;
  return createBoxAndWhiskerChart(chartType.getLiteral(),bDataset);
}
return create3DBarChart(chartType.getLiteral(),cDataset,true);
case SIMPLE_STATISTICS:
case TEXT_STATISTICS:
return create3DBarChart(chartType.getLiteral(),cDataset,true);
default :
return null;
}
}","static JFreeChart createChart(EIndicatorChartType chartType,IDataEntity dataset){
  CategoryDataset cDataset=(CategoryDataset)dataset;
switch (chartType) {
case FREQUENCE_STATISTICS:
    return createBarChart(chartType.getLiteral(),cDataset);
case PATTERN_MATCHING:
case SQL_PATTERN_MATCHING:
  return createStacked3DBarChart(chartType.getLiteral(),cDataset);
case SUMMARY_STATISTICS:
if (dataset instanceof BoxAndWhiskerCategoryDataset) {
  BoxAndWhiskerCategoryDataset bDataset=(BoxAndWhiskerCategoryDataset)dataset;
  return createBoxAndWhiskerChart(chartType.getLiteral(),bDataset);
}
return create3DBarChart(chartType.getLiteral(),cDataset,false);
case SIMPLE_STATISTICS:
case TEXT_STATISTICS:
return create3DBarChart(chartType.getLiteral(),cDataset,true);
default :
return null;
}
}",0.9955555555555556
140228,"public Map<EIndicatorChartType,List<IndicatorUnit>> getIndicatorComposite(){
  List<IndicatorUnit> simpleList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> textList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> frequencyList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> summaryList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> patternList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> sqlPatternList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> modelIndicatorList=new ArrayList<IndicatorUnit>();
  for (  IndicatorUnit one : indicatorUnits) {
switch (one.getType()) {
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
case BlankCountIndicatorEnum:
      simpleList.add(one);
    break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
  textList.add(one);
break;
case FrequencyIndicatorEnum:
frequencyList.add(one);
break;
case MeanIndicatorEnum:
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
case MedianIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
summaryList.add(one);
break;
case RegexpMatchingIndicatorEnum:
patternList.add(one);
break;
case SqlPatternMatchingIndicatorEnum:
sqlPatternList.add(one);
break;
case ModeIndicatorEnum:
modelIndicatorList.add(one);
break;
default :
}
}
separatedMap.put(EIndicatorChartType.SIMPLE_STATISTICS,simpleList);
separatedMap.put(EIndicatorChartType.TEXT_STATISTICS,textList);
separatedMap.put(EIndicatorChartType.FREQUENCE_STATISTICS,frequencyList);
separatedMap.put(EIndicatorChartType.SUMMARY_STATISTICS,summaryList);
separatedMap.put(EIndicatorChartType.PATTERN_MATCHING,patternList);
separatedMap.put(EIndicatorChartType.SQL_PATTERN_MATCHING,sqlPatternList);
separatedMap.put(EIndicatorChartType.MODE_INDICATOR,modelIndicatorList);
return separatedMap;
}","public Map<EIndicatorChartType,List<IndicatorUnit>> getIndicatorComposite(){
  List<IndicatorUnit> simpleList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> textList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> frequencyList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> lowFrequencyList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> summaryList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> patternList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> sqlPatternList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> modelIndicatorList=new ArrayList<IndicatorUnit>();
  for (  IndicatorUnit one : indicatorUnits) {
switch (one.getType()) {
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
case BlankCountIndicatorEnum:
      simpleList.add(one);
    break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
  textList.add(one);
break;
case FrequencyIndicatorEnum:
frequencyList.add(one);
break;
case LowFrequencyIndicatorEnum:
lowFrequencyList.add(one);
break;
case MeanIndicatorEnum:
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
case MedianIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
summaryList.add(one);
break;
case RegexpMatchingIndicatorEnum:
patternList.add(one);
break;
case SqlPatternMatchingIndicatorEnum:
sqlPatternList.add(one);
break;
case ModeIndicatorEnum:
modelIndicatorList.add(one);
break;
default :
}
}
separatedMap.put(EIndicatorChartType.SIMPLE_STATISTICS,simpleList);
separatedMap.put(EIndicatorChartType.TEXT_STATISTICS,textList);
separatedMap.put(EIndicatorChartType.FREQUENCE_STATISTICS,frequencyList);
separatedMap.put(EIndicatorChartType.LOW_FREQUENCE_STATISTICS,lowFrequencyList);
separatedMap.put(EIndicatorChartType.SUMMARY_STATISTICS,summaryList);
separatedMap.put(EIndicatorChartType.PATTERN_MATCHING,patternList);
separatedMap.put(EIndicatorChartType.SQL_PATTERN_MATCHING,sqlPatternList);
separatedMap.put(EIndicatorChartType.MODE_INDICATOR,modelIndicatorList);
return separatedMap;
}",0.9467513434294088
140229,"public static void compositeIndicatorMap(IndicatorUnit indicatorUnit){
  Color tempColor=null;
  Object tempObject=null;
  IndicatorEnum type=indicatorUnit.getType();
  Indicator indicator=indicatorUnit.getIndicator();
  if (!indicator.getInstantiatedExpressions().isEmpty()) {
switch (type) {
case RowCountIndicatorEnum:
      tempColor=COLOR_ROW_COUNT;
    tempObject=((RowCountIndicator)indicator).getCount();
  break;
case NullCountIndicatorEnum:
tempColor=COLOR_NULL_COUNT;
tempObject=((NullCountIndicator)indicator).getNullCount();
break;
case DistinctCountIndicatorEnum:
tempColor=COLOR_DISTIN_CTCOUNT;
tempObject=((DistinctCountIndicator)indicator).getDistinctValueCount();
break;
case UniqueIndicatorEnum:
tempColor=COLOR_UNIQUE_COUNT;
tempObject=(((UniqueCountIndicator)indicator).getUniqueValueCount());
break;
case DuplicateCountIndicatorEnum:
tempColor=COLOR_DUPLICATE_COUNT;
tempObject=((DuplicateCountIndicator)indicator).getDuplicateValueCount();
break;
case BlankCountIndicatorEnum:
tempColor=COLOR_BLANKCOUNT;
tempObject=((BlankCountIndicator)indicator).getBlankCount();
break;
case MinLengthIndicatorEnum:
tempColor=COLOR_MIN_LENGTH;
tempObject=((MinLengthIndicator)indicator).getLength();
break;
case MaxLengthIndicatorEnum:
tempColor=COLOR_MAX_LENGTH;
tempObject=((MaxLengthIndicator)indicator).getLength();
break;
case AverageLengthIndicatorEnum:
tempColor=COLOR_AVERAGE_LENGTH;
tempObject=((AverageLengthIndicator)indicator).getAverageLength();
break;
case FrequencyIndicatorEnum:
FrequencyIndicator frequency=(FrequencyIndicator)indicator;
Set<Object> valueSet=frequency.getDistinctValues();
if (valueSet == null) {
break;
}
FrequencyExt[] frequencyExt=new FrequencyExt[valueSet.size()];
int i=0;
for (Object o : valueSet) {
frequencyExt[i]=new FrequencyExt();
frequencyExt[i].setKey(o);
frequencyExt[i].setValue(frequency.getCount(o));
frequencyExt[i].setFrequency(frequency.getFrequency(o));
i++;
}
tempColor=null;
tempObject=frequencyExt;
break;
case MeanIndicatorEnum:
tempColor=null;
tempObject=((MeanIndicator)indicator).getMean();
break;
case MedianIndicatorEnum:
tempColor=null;
tempObject=((MedianIndicator)indicator).getMedian();
break;
case MinValueIndicatorEnum:
tempColor=null;
tempObject=((MinValueIndicator)indicator).getValue();
break;
case MaxValueIndicatorEnum:
tempColor=null;
tempObject=((MaxValueIndicator)indicator).getValue();
break;
case LowerQuartileIndicatorEnum:
tempColor=null;
tempObject=((LowerQuartileIndicator)indicator).getValue();
break;
case UpperQuartileIndicatorEnum:
tempColor=null;
tempObject=((UpperQuartileIndicator)indicator).getValue();
break;
case RegexpMatchingIndicatorEnum:
case SqlPatternMatchingIndicatorEnum:
tempColor=null;
PatternMatchingExt patternExt=new PatternMatchingExt();
patternExt.setMatchingValueCount(((PatternMatchingIndicator)indicator).getMatchingValueCount());
patternExt.setNotMatchingValueCount(((PatternMatchingIndicator)indicator).getNotMatchingValueCount());
tempObject=patternExt;
break;
case ModeIndicatorEnum:
tempColor=null;
tempObject=((ModeIndicator)indicator).getMode();
default :
}
indicatorUnit.setExcuted(true);
indicatorUnit.setColor(tempColor);
indicatorUnit.setValue(tempObject);
}
}","public static void compositeIndicatorMap(IndicatorUnit indicatorUnit){
  Color tempColor=null;
  Object tempObject=null;
  IndicatorEnum type=indicatorUnit.getType();
  Indicator indicator=indicatorUnit.getIndicator();
  if (!indicator.getInstantiatedExpressions().isEmpty()) {
switch (type) {
case RowCountIndicatorEnum:
      tempColor=COLOR_ROW_COUNT;
    tempObject=((RowCountIndicator)indicator).getCount();
  break;
case NullCountIndicatorEnum:
tempColor=COLOR_NULL_COUNT;
tempObject=((NullCountIndicator)indicator).getNullCount();
break;
case DistinctCountIndicatorEnum:
tempColor=COLOR_DISTIN_CTCOUNT;
tempObject=((DistinctCountIndicator)indicator).getDistinctValueCount();
break;
case UniqueIndicatorEnum:
tempColor=COLOR_UNIQUE_COUNT;
tempObject=(((UniqueCountIndicator)indicator).getUniqueValueCount());
break;
case DuplicateCountIndicatorEnum:
tempColor=COLOR_DUPLICATE_COUNT;
tempObject=((DuplicateCountIndicator)indicator).getDuplicateValueCount();
break;
case BlankCountIndicatorEnum:
tempColor=COLOR_BLANKCOUNT;
tempObject=((BlankCountIndicator)indicator).getBlankCount();
break;
case MinLengthIndicatorEnum:
tempColor=COLOR_MIN_LENGTH;
tempObject=((MinLengthIndicator)indicator).getLength();
break;
case MaxLengthIndicatorEnum:
tempColor=COLOR_MAX_LENGTH;
tempObject=((MaxLengthIndicator)indicator).getLength();
break;
case AverageLengthIndicatorEnum:
tempColor=COLOR_AVERAGE_LENGTH;
tempObject=((AverageLengthIndicator)indicator).getAverageLength();
break;
case FrequencyIndicatorEnum:
case LowFrequencyIndicatorEnum:
FrequencyIndicator frequency=(FrequencyIndicator)indicator;
Set<Object> valueSet=frequency.getDistinctValues();
if (valueSet == null) {
break;
}
FrequencyExt[] frequencyExt=new FrequencyExt[valueSet.size()];
int i=0;
for (Object o : valueSet) {
frequencyExt[i]=new FrequencyExt();
frequencyExt[i].setKey(o);
frequencyExt[i].setValue(frequency.getCount(o));
frequencyExt[i].setFrequency(frequency.getFrequency(o));
i++;
}
tempColor=null;
tempObject=frequencyExt;
break;
case MeanIndicatorEnum:
tempColor=null;
tempObject=((MeanIndicator)indicator).getMean();
break;
case MedianIndicatorEnum:
tempColor=null;
tempObject=((MedianIndicator)indicator).getMedian();
break;
case MinValueIndicatorEnum:
tempColor=null;
tempObject=((MinValueIndicator)indicator).getValue();
break;
case MaxValueIndicatorEnum:
tempColor=null;
tempObject=((MaxValueIndicator)indicator).getValue();
break;
case LowerQuartileIndicatorEnum:
tempColor=null;
tempObject=((LowerQuartileIndicator)indicator).getValue();
break;
case UpperQuartileIndicatorEnum:
tempColor=null;
tempObject=((UpperQuartileIndicator)indicator).getValue();
break;
case RegexpMatchingIndicatorEnum:
case SqlPatternMatchingIndicatorEnum:
tempColor=null;
PatternMatchingExt patternExt=new PatternMatchingExt();
patternExt.setMatchingValueCount(((PatternMatchingIndicator)indicator).getMatchingValueCount());
patternExt.setNotMatchingValueCount(((PatternMatchingIndicator)indicator).getNotMatchingValueCount());
tempObject=patternExt;
break;
case ModeIndicatorEnum:
tempColor=null;
tempObject=((ModeIndicator)indicator).getMode();
default :
}
indicatorUnit.setExcuted(true);
indicatorUnit.setColor(tempColor);
indicatorUnit.setValue(tempObject);
}
}",0.9950124688279302
140230,"public static boolean patternRule(IndicatorEnum indicatorType,TdColumn column){
  int javaType=column.getJavaType();
  DataminingType dataminingType=MetadataHelper.getDataminingType(column);
  if (dataminingType == null) {
    dataminingType=MetadataHelper.getDefaultDataminingType(javaType);
  }
switch (indicatorType) {
case CountsIndicatorEnum:
case RowCountIndicatorEnum:
    return true;
case NullCountIndicatorEnum:
  return true;
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
return true;
case BlankCountIndicatorEnum:
case TextIndicatorEnum:
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
if (Java2SqlType.isTextInSQL(javaType)) {
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.UNSTRUCTURED_TEXT) {
  return true;
}
}
break;
case ModeIndicatorEnum:
case FrequencyIndicatorEnum:
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
case MeanIndicatorEnum:
case MedianIndicatorEnum:
case BoxIIndicatorEnum:
case IQRIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
case RangeIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
if (!Java2SqlType.isDateInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
default :
return false;
}
return false;
}","public static boolean patternRule(IndicatorEnum indicatorType,TdColumn column){
  int javaType=column.getJavaType();
  DataminingType dataminingType=MetadataHelper.getDataminingType(column);
  if (dataminingType == null) {
    dataminingType=MetadataHelper.getDefaultDataminingType(javaType);
  }
switch (indicatorType) {
case CountsIndicatorEnum:
case RowCountIndicatorEnum:
    return true;
case NullCountIndicatorEnum:
  return true;
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
return true;
case BlankCountIndicatorEnum:
case TextIndicatorEnum:
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
if (Java2SqlType.isTextInSQL(javaType)) {
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.UNSTRUCTURED_TEXT) {
  return true;
}
}
break;
case ModeIndicatorEnum:
case FrequencyIndicatorEnum:
case LowFrequencyIndicatorEnum:
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
case MeanIndicatorEnum:
case MedianIndicatorEnum:
case BoxIIndicatorEnum:
case IQRIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
case RangeIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
if (!Java2SqlType.isDateInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
default :
return false;
}
return false;
}",0.9897567221510885
140231,"/** 
 * DOC scorreia Comment method ""getPatterns"".
 * @param indicator
 * @return the patterns or null if none has been found
 */
private List<String> getPatterns(Indicator indicator){
  List<String> patternStrings=new ArrayList<String>();
  Domain dataValidDomain=indicator.getParameters().getDataValidDomain();
  if (dataValidDomain == null) {
    return patternStrings;
  }
  EList<Pattern> patterns=dataValidDomain.getPatterns();
  for (  Pattern pattern : patterns) {
    String regexp=this.dbmsLanguage.getRegexp(pattern);
    if (regexp != null) {
      patternStrings.add(regexp);
    }
  }
  return patternStrings;
}","/** 
 * DOC scorreia Comment method ""getPatterns"".
 * @param indicator
 * @return the patterns or null if none has been found
 */
private List<String> getPatterns(Indicator indicator){
  List<String> patternStrings=new ArrayList<String>();
  Domain dataValidDomain=indicator.getParameters().getDataValidDomain();
  if (dataValidDomain == null) {
    return patternStrings;
  }
  EList<Pattern> patterns=dataValidDomain.getPatterns();
  for (  Pattern pattern : patterns) {
    String regexp=this.dbms().getRegexp(pattern);
    if (regexp != null) {
      patternStrings.add(regexp);
    }
  }
  return patternStrings;
}",0.9919614147909968
140232,"/** 
 * DOC scorreia Comment method ""getFinalSqlStringStatement"".
 * @param dataFilterExpression
 * @param whereExpression
 * @param completedSqlString
 * @return
 * @throws ParseException
 */
private String addWhereToSqlStringStatement(List<String> whereExpressions,String completedSqlString) throws ParseException {
  TypedReturnCode<String> trc=dbms().prepareQuery(completedSqlString);
  String query=trc.getObject();
  String where=dbms().buildWhereExpression(whereExpressions);
  if (where != null && where.trim().length() != 0) {
    query=dbms().addWhereToStatement(query,where);
  }
  query=dbms().finalizeQuery(query);
  return query;
}","/** 
 * DOC scorreia Comment method ""getFinalSqlStringStatement"".
 * @param dataFilterExpression
 * @param whereExpression
 * @param completedSqlString
 * @return
 * @throws ParseException
 */
private String addWhereToSqlStringStatement(List<String> whereExpressions,String completedSqlString) throws ParseException {
  return dbms().addWhereToSqlStringStatement(completedSqlString,whereExpressions);
}",0.6781279847182426
140233,"/** 
 * DOC scorreia Comment method ""getCompletedString"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param whereExpression
 * @throws AnalysisExecutionException
 */
private String getCompletedStringForQuantiles(Indicator indicator,Expression sqlExpression,String colName,String table,List<String> whereExpression) throws AnalysisExecutionException {
  String catalogOrSchema=getCatalogOrSchemaName(indicator.getAnalyzedElement());
  long count=getCount(cachedAnalysis,colName,table,catalogOrSchema,whereExpression);
  if (count == -1) {
    throw new AnalysisExecutionException(""String_Node_Str"" + dbms().toQualifiedName(catalogOrSchema,null,colName));
  }
  Long midleCount=getLimitFirstArg(indicator,count);
  Integer nbRow=getNbReturnedRows(indicator,count);
  return MessageFormat.format(sqlExpression.getBody(),colName,table,String.valueOf(midleCount),String.valueOf(nbRow));
}","/** 
 * DOC scorreia Comment method ""getCompletedString"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param whereExpression
 * @throws AnalysisExecutionException
 */
private String getCompletedStringForQuantiles(Indicator indicator,Expression sqlExpression,String colName,String table,List<String> whereExpression) throws AnalysisExecutionException {
  String catalogOrSchema=getCatalogOrSchemaName(indicator.getAnalyzedElement());
  long count=getCount(cachedAnalysis,colName,table,catalogOrSchema,whereExpression);
  if (count == -1) {
    throw new AnalysisExecutionException(""String_Node_Str"" + dbms().toQualifiedName(catalogOrSchema,null,colName));
  }
  if (count == 0) {
    this.errorMessage=""String_Node_Str"" + dbms().toQualifiedName(catalogOrSchema,null,colName);
    throw new AnalysisExecutionException(errorMessage);
  }
  Long midleCount=getLimitFirstArg(indicator,count);
  Integer nbRow=getNbReturnedRows(indicator,count);
  long nPlusSkip=midleCount + nbRow;
  return MessageFormat.format(sqlExpression.getBody(),colName,table,String.valueOf(midleCount),String.valueOf(nbRow),nPlusSkip);
}",0.8920096852300242
140234,"public String addWhereToSqlStringStatement(String completedSqlString,List<String> whereExpressions) throws ParseException {
  TypedReturnCode<String> trc=this.prepareQuery(completedSqlString);
  String query=trc.getObject();
  String where=this.buildWhereExpression(whereExpressions);
  if (where != null && where.trim().length() != 0) {
    query=this.addWhereToStatement(query,where);
  }
  this.finalizeQuery(query);
  return query;
}","public String addWhereToSqlStringStatement(String completedSqlString,List<String> whereExpressions) throws ParseException {
  TypedReturnCode<String> trc=this.prepareQuery(completedSqlString);
  String query=trc.getObject();
  String where=this.buildWhereExpression(whereExpressions);
  if ((where != null && where.trim().length() != 0) || completedSqlString.contains(AND_WHERE_CLAUSE)) {
    query=this.addWhereToStatement(query,where);
  }
  this.finalizeQuery(query);
  return query;
}",0.9448648648648648
140235,"/** 
 * Method ""addWhereToStatement"".
 * @param statement a statement already prepared for parsing
 * @param whereClause
 * @return the new statement
 */
public String addWhereToStatement(String statement,String whereClause){
  if (!isTooComplexForZql(statement)) {
    try {
      ZQuery query=this.parseQuery(statement);
      if (whereClause != null) {
        if (StringUtils.isNotBlank(whereClause)) {
          String safeWhereClause=replaceUnsupportedQuotes(whereClause);
          ZqlParser filterParser=getZqlParser();
          filterParser.initParser(new ByteArrayInputStream(safeWhereClause.getBytes()));
          ZExp currentWhere=query.getWhere();
          ZExp whereExpression=filterParser.readExpression();
          if (currentWhere != null && whereExpression != null) {
            ZExpression finalWhereExpression=new ZExpression(and(),currentWhere,whereExpression);
            query.addWhere(finalWhereExpression);
          }
 else {
            if (whereExpression != null) {
              query.addWhere(whereExpression);
            }
          }
        }
      }
      return query.toString();
    }
 catch (    ParseException e) {
      log.warn(""String_Node_Str"" + statement + ""String_Node_Str""+ e,e);
    }
  }
  if (statement.contains(""String_Node_Str"") && statement.contains(""String_Node_Str"")) {
    int insertIdx=statement.indexOf(""String_Node_Str"");
    StringBuilder finalQuery=new StringBuilder().append(statement.substring(0,insertIdx)).append(where()).append(surroundWithSpaces(whereClause)).append(statement.substring(insertIdx));
    return finalQuery.toString();
  }
  String op=statement.toUpperCase().contains(where()) ? and() : where();
  String finalQuery=statement + op + whereClause;
  log.warn(""String_Node_Str"" + finalQuery);
  return finalQuery;
}","/** 
 * Method ""addWhereToStatement"".
 * @param statement a statement already prepared for parsing
 * @param whereClause
 * @return the new statement
 */
public String addWhereToStatement(String statement,String whereClause){
  if (!isTooComplexForZql(statement)) {
    try {
      ZQuery query=this.parseQuery(statement);
      if (whereClause != null) {
        if (StringUtils.isNotBlank(whereClause)) {
          String safeWhereClause=replaceUnsupportedQuotes(whereClause);
          ZqlParser filterParser=getZqlParser();
          filterParser.initParser(new ByteArrayInputStream(safeWhereClause.getBytes()));
          ZExp currentWhere=query.getWhere();
          ZExp whereExpression=filterParser.readExpression();
          if (currentWhere != null && whereExpression != null) {
            ZExpression finalWhereExpression=new ZExpression(and(),currentWhere,whereExpression);
            query.addWhere(finalWhereExpression);
          }
 else {
            if (whereExpression != null) {
              query.addWhere(whereExpression);
            }
          }
        }
      }
      return query.toString();
    }
 catch (    ParseException e) {
      log.warn(""String_Node_Str"" + statement + ""String_Node_Str""+ e,e);
    }
  }
  if (statement.contains(""String_Node_Str"") && statement.contains(""String_Node_Str"")) {
    int insertIdx=statement.indexOf(""String_Node_Str"");
    StringBuilder finalQuery=new StringBuilder().append(statement.substring(0,insertIdx)).append(where()).append(surroundWithSpaces(whereClause)).append(statement.substring(insertIdx));
    return finalQuery.toString();
  }
  if (statement.contains(AND_WHERE_CLAUSE)) {
    whereClause=whereClause.length() != 0 ? and() + whereClause : whereClause;
    return statement.replaceAll(AND_WHERE_CLAUSE,whereClause);
  }
  String op=statement.toUpperCase().contains(where()) ? and() : where();
  String finalQuery=statement + op + whereClause;
  log.warn(""String_Node_Str"" + finalQuery);
  return finalQuery;
}",0.9493670886075948
140236,"/** 
 * DOC scorreia Comment method ""isTooComplexForZql"".
 * @param statement
 * @return
 */
private boolean isTooComplexForZql(String statement){
  return statement.contains(""String_Node_Str"") && statement.contains(""String_Node_Str"");
}","/** 
 * DOC scorreia Comment method ""isTooComplexForZql"".
 * @param statement
 * @return
 */
private boolean isTooComplexForZql(String statement){
  return statement.contains(""String_Node_Str"") && statement.contains(""String_Node_Str"") || statement.contains(AND_WHERE_CLAUSE);
}",0.9221789883268484
140237,"public String addWhereToSqlStringStatement(String completedSqlString,List<String> whereExpressions) throws ParseException {
  TypedReturnCode<String> trc=this.prepareQuery(completedSqlString);
  String query=trc.getObject();
  String where=this.buildWhereExpression(whereExpressions);
  if (where != null && where.trim().length() != 0) {
    query=this.addWhereToStatement(query,where);
  }
  return query;
}","public String addWhereToSqlStringStatement(String completedSqlString,List<String> whereExpressions) throws ParseException {
  TypedReturnCode<String> trc=this.prepareQuery(completedSqlString);
  String query=trc.getObject();
  String where=this.buildWhereExpression(whereExpressions);
  if (where != null && where.trim().length() != 0) {
    query=this.addWhereToStatement(query,where);
  }
  this.finalizeQuery(query);
  return query;
}",0.9656804733727812
140238,"/** 
 * Method ""addWhereToStatement"".
 * @param statement a statement already prepared for parsing
 * @param whereClause
 * @return the new statement
 */
public String addWhereToStatement(String statement,String whereClause){
  if (!isTooComplexForZql(statement)) {
    try {
      ZQuery query=this.parseQuery(statement);
      if (whereClause != null) {
        if (StringUtils.isNotBlank(whereClause)) {
          ZqlParser filterParser=getZqlParser();
          filterParser.initParser(new ByteArrayInputStream(whereClause.getBytes()));
          ZExp currentWhere=query.getWhere();
          ZExp whereExpression=filterParser.readExpression();
          if (currentWhere != null && whereExpression != null) {
            ZExpression finalWhereExpression=new ZExpression(and(),currentWhere,whereExpression);
            query.addWhere(finalWhereExpression);
          }
 else {
            if (whereExpression != null) {
              query.addWhere(whereExpression);
            }
          }
        }
      }
      return query.toString();
    }
 catch (    ParseException e) {
      log.warn(""String_Node_Str"" + statement + ""String_Node_Str""+ e,e);
    }
  }
  if (statement.contains(""String_Node_Str"") && statement.contains(""String_Node_Str"")) {
    int insertIdx=statement.indexOf(""String_Node_Str"");
    StringBuilder finalQuery=new StringBuilder().append(statement.substring(0,insertIdx)).append(where()).append(surroundWithSpaces(whereClause)).append(statement.substring(insertIdx));
    return finalQuery.toString();
  }
  String op=statement.toUpperCase().contains(where()) ? and() : where();
  String finalQuery=statement + op + whereClause;
  log.warn(""String_Node_Str"" + finalQuery);
  return finalQuery;
}","/** 
 * Method ""addWhereToStatement"".
 * @param statement a statement already prepared for parsing
 * @param whereClause
 * @return the new statement
 */
public String addWhereToStatement(String statement,String whereClause){
  if (!isTooComplexForZql(statement)) {
    try {
      ZQuery query=this.parseQuery(statement);
      if (whereClause != null) {
        if (StringUtils.isNotBlank(whereClause)) {
          String safeWhereClause=replaceUnsupportedQuotes(whereClause);
          ZqlParser filterParser=getZqlParser();
          filterParser.initParser(new ByteArrayInputStream(safeWhereClause.getBytes()));
          ZExp currentWhere=query.getWhere();
          ZExp whereExpression=filterParser.readExpression();
          if (currentWhere != null && whereExpression != null) {
            ZExpression finalWhereExpression=new ZExpression(and(),currentWhere,whereExpression);
            query.addWhere(finalWhereExpression);
          }
 else {
            if (whereExpression != null) {
              query.addWhere(whereExpression);
            }
          }
        }
      }
      return query.toString();
    }
 catch (    ParseException e) {
      log.warn(""String_Node_Str"" + statement + ""String_Node_Str""+ e,e);
    }
  }
  if (statement.contains(""String_Node_Str"") && statement.contains(""String_Node_Str"")) {
    int insertIdx=statement.indexOf(""String_Node_Str"");
    StringBuilder finalQuery=new StringBuilder().append(statement.substring(0,insertIdx)).append(where()).append(surroundWithSpaces(whereClause)).append(statement.substring(insertIdx));
    return finalQuery.toString();
  }
  String op=statement.toUpperCase().contains(where()) ? and() : where();
  String finalQuery=statement + op + whereClause;
  log.warn(""String_Node_Str"" + finalQuery);
  return finalQuery;
}",0.977866061293984
140239,"@Override protected String replaceUnsupportedQuotes(String safeZqlString){
  return safeZqlString.replace(""String_Node_Str"",""String_Node_Str"");
}","@Override protected String replaceUnsupportedQuotes(String safeZqlString){
  return safeZqlString.replace(MYSQL_IDENTIFIER_QUOTE,""String_Node_Str"");
}",0.8949152542372881
140240,"/** 
 * DOC qzhang Comment method ""doSetInput"".
 */
public void doSetInput(){
  List<CatalogIndicator> indicatorList=null;
  if (this.connectionAnalysis.getResults().getIndicators().size() > 0) {
    ConnectionIndicator conIndicator=(ConnectionIndicator)connectionAnalysis.getResults().getIndicators().get(0);
    indicatorList=conIndicator.getCatalogIndicators();
  }
 else {
    indicatorList=new ArrayList<CatalogIndicator>();
  }
  statisticalViewer.setInput(indicatorList);
  refreshSumSection();
}","/** 
 * DOC qzhang Comment method ""doSetInput"".
 */
public void doSetInput(){
  List<CatalogIndicator> indicatorList=null;
  if (this.connectionAnalysis.getResults().getIndicators().size() > 0) {
    ConnectionIndicator conIndicator=(ConnectionIndicator)connectionAnalysis.getResults().getIndicators().get(0);
    indicatorList=conIndicator.getCatalogIndicators();
    if (indicatorList.size() == 0) {
      statisticalViewer.setInput(conIndicator.getSchemaIndicators());
    }
 else {
      List<SchemaIndicator> schemaIndicators=new ArrayList<SchemaIndicator>();
      schemaIndicators.addAll(conIndicator.getSchemaIndicators());
      schemaIndicators.addAll(indicatorList);
      statisticalViewer.setInput(schemaIndicators);
    }
  }
 else {
    indicatorList=new ArrayList<CatalogIndicator>();
  }
  refreshSumSection();
}",0.7252252252252253
140241,"/** 
 * DOC scorreia Comment method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=quote(tdColumn.getName());
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges());
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank()) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
    }
  }
  String table=quote(ColumnHelper.getColumnSetFullName(tdColumn));
  String catalogName=getQuotedCatalogName(tdColumn);
  table=dbms().toQualifiedName(catalogName,null,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || indicatorEclass.isSuperTypeOf(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        String genericSQL=sqlGenericExpression.getBody();
        int beginIndex=genericSQL.indexOf(dbms().orderBy());
        if (beginIndex != -1) {
          int lastIndex=genericSQL.lastIndexOf(dbms().desc());
          String orderByClause=genericSQL.substring(beginIndex,lastIndex);
          completedSqlString=completedSqlString + orderByClause + dbms().desc();
        }
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        colName=dbms().getPatternFinderDefaultFunction(colName);
      }
      completedSqlString=replaceVariablesLow(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUniqueCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getDuplicateCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + language + ""String_Node_Str""+ completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=instantiateSqlExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}","/** 
 * DOC scorreia Comment method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=quote(tdColumn.getName());
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges());
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank()) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
    }
  }
  String table=quote(ColumnHelper.getColumnSetFullName(tdColumn));
  String catalogName=getQuotedCatalogName(tdColumn);
  table=dbms().toQualifiedName(catalogName,null,table);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || indicatorEclass.isSuperTypeOf(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        colName=dbms().getPatternFinderDefaultFunction(colName);
      }
      completedSqlString=replaceVariablesLow(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUniqueCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getDuplicateCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + language + ""String_Node_Str""+ completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=instantiateSqlExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}",0.6747120131651124
140242,"/** 
 * Open a compare editor UI, will clear the information which hasn't relationship with current selected level first(For example: if we compare the catalog level, will clear it's table(view) from every catalog), then will compare current level object.
 * @param rightResource
 * @param oldDataProviderFile
 * @return
 * @throws ReloadCompareException
 */
private DiffModel openDiffCompareEditor(Resource leftResource,Resource rightResource,Map<String,Object> options) throws ReloadCompareException {
  MatchModel match=null;
  try {
    match=MatchService.doResourceMatch(leftResource,rightResource,options);
  }
 catch (  InterruptedException e) {
    throw new ReloadCompareException(e);
  }
  final DiffModel diff=DiffService.doDiff(match);
  final ModelInputSnapshot snapshot=DiffFactory.eINSTANCE.createModelInputSnapshot();
  snapshot.setDate(Calendar.getInstance().getTime());
  snapshot.setMatch(match);
  snapshot.setDiff(diff);
  IFile createDiffResourceFile=DQStructureComparer.getDiffResourceFile();
  try {
    ModelUtils.save(snapshot,createDiffResourceFile.getFullPath().toString());
  }
 catch (  IOException e) {
    throw new ReloadCompareException(e);
  }
  new ModelCompareEditorLauncher().open(createDiffResourceFile.getLocation());
  return diff;
}","/** 
 * Open a compare editor UI, will clear the information which hasn't relationship with current selected level first(For example: if we compare the catalog level, will clear it's table(view) from every catalog), then will compare current level object.
 * @param rightResource
 * @param oldDataProviderFile
 * @return
 * @throws ReloadCompareException
 */
private DiffModel openDiffCompareEditor(Resource leftResource,Resource rightResource,Map<String,Object> options) throws ReloadCompareException {
  MatchModel match=null;
  try {
    match=MatchService.doResourceMatch(leftResource,rightResource,options);
  }
 catch (  InterruptedException e) {
    throw new ReloadCompareException(e);
  }
  final DiffModel diff=DiffService.doDiff(match);
  final ModelInputSnapshot snapshot=DiffFactory.eINSTANCE.createModelInputSnapshot();
  snapshot.setDate(Calendar.getInstance().getTime());
  snapshot.setMatch(match);
  snapshot.setDiff(diff);
  IFile createDiffResourceFile=DQStructureComparer.getDiffResourceFile();
  try {
    final String fullPath=createDiffResourceFile.getLocation().toOSString();
    ModelUtils.save(snapshot,fullPath);
  }
 catch (  IOException e) {
    throw new ReloadCompareException(e);
  }
  new ModelCompareEditorLauncher().open(createDiffResourceFile.getLocation());
  return diff;
}",0.954369682907966
140243,"/** 
 */
private void updateButtonState(){
  boolean complete=true;
  complete&=(this.connectionURL != null && this.connectionURL.trim().length() > 0 && this.userid != null && this.userid.trim().length() > 0);
  if (checkButton != null) {
    checkButton.setEnabled(complete);
  }
  setPageComplete(complete);
}","/** 
 */
private void updateButtonState(){
  boolean complete=true;
  complete&=(this.connectionURL != null && this.connectionURL.trim().length() > 0 && ((this.userid != null && this.userid.trim().length() > 0) || SupportDBUrlType.MSSQLDEFAULTURL.getDBKey().equals(SupportDBUrlStore.getInstance().getDBPameterProperties(connectionURL).getProperty(org.talend.dq.PluginConstant.DBTYPE_PROPERTY))));
  if (checkButton != null) {
    checkButton.setEnabled(complete);
  }
  setPageComplete(complete);
}",0.7688504326328801
140244,"/** 
 * DOC scorreia Comment method ""getQualifiedName"".
 * @param tdDataProvider
 * @return
 */
private String getTableQualifiedName(TdDataProvider tdDataProvider){
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(tdDataProvider);
  Package catalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(table);
  String schemaname=catalogOrSchema != null ? catalogOrSchema.getName() : null;
  return dbmsLanguage.toQualifiedName(null,schemaname,table.getName());
}","/** 
 * DOC scorreia Comment method ""getQualifiedName"".
 * @param tdDataProvider
 * @return
 */
private String getTableQualifiedName(TdDataProvider tdDataProvider){
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(tdDataProvider);
  Package catalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(table);
  if (catalogOrSchema == null) {
    return table.getName();
  }
  String catalogName=null;
  String schemaName=null;
  if (catalogOrSchema != null && RelationalPackage.eINSTANCE.getTdSchema().equals(catalogOrSchema.eClass())) {
    schemaName=catalogOrSchema.getName();
    TdCatalog parentCatalog=CatalogHelper.getParentCatalog(catalogOrSchema);
    if (parentCatalog != null) {
      catalogName=parentCatalog.getName();
    }
  }
 else {
    catalogName=catalogOrSchema.getName();
  }
  return dbmsLanguage.toQualifiedName(catalogName,schemaName,table.getName());
}",0.635036496350365
140245,"@Override public void run(){
  ChangePerspectiveAction perspectiveAction=new ChangePerspectiveAction(PluginConstant.SE_ID);
  perspectiveAction.run();
  SQLExplorerPlugin default1=SQLExplorerPlugin.getDefault();
  Collection<Alias> aliases=default1.getAliasManager().getAliases();
  TdDataProvider tdDataProvider=DataProviderHelper.getDataProvider(table);
  TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  TdProviderConnection providerConnection=tdPc.getObject();
  String url=providerConnection.getConnectionString();
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      String qualifiedName=getTableQualifiedName(tdDataProvider);
      String query=""String_Node_Str"" + qualifiedName;
      SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + SQLExplorerPlugin.getDefault().getEditorSerialNo() + ""String_Node_Str"");
      input.setUser(alias.getDefaultUser());
      try {
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        ExecSQLAction execSQLAction=new ExecSQLAction(editorPart);
        execSQLAction.run();
      }
 catch (      PartInitException e) {
        e.printStackTrace();
      }
    }
  }
}","@Override public void run(){
  ChangePerspectiveAction perspectiveAction=new ChangePerspectiveAction(PluginConstant.SE_ID);
  perspectiveAction.run();
  SQLExplorerPlugin default1=SQLExplorerPlugin.getDefault();
  Collection<Alias> aliases=default1.getAliasManager().getAliases();
  TdDataProvider tdDataProvider=DataProviderHelper.getDataProvider(table);
  TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  TdProviderConnection providerConnection=tdPc.getObject();
  String url=providerConnection.getConnectionString();
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      String qualifiedName=getTableQualifiedName(tdDataProvider);
      String query=""String_Node_Str"" + qualifiedName;
      SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + SQLExplorerPlugin.getDefault().getEditorSerialNo() + ""String_Node_Str"");
      input.setUser(alias.getDefaultUser());
      try {
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor((IEditorInput)input,SQLEditor.class.getName());
        editorPart.setText(query);
        ExecSQLAction execSQLAction=new ExecSQLAction(editorPart);
        execSQLAction.run();
      }
 catch (      PartInitException e) {
        log.error(e,e);
      }
    }
  }
}",0.98898756660746
140246,"/** 
 * DOC qzhang Comment method ""getClassDriver"".
 * @param driverClassName
 * @return
 * @throws IllegalAccessException
 * @throws InstantiationException
 * @throws ClassNotFoundException
 */
public static Driver getClassDriver(String driverClassName) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  SQLExplorerPlugin sqlExplorerPlugin=SQLExplorerPlugin.getDefault();
  Driver driver=null;
  if (sqlExplorerPlugin != null) {
    net.sourceforge.sqlexplorer.dbproduct.DriverManager driverModel=sqlExplorerPlugin.getDriverModel();
    try {
      Collection<ManagedDriver> drivers=driverModel.getDrivers();
      for (      ManagedDriver managedDriver : drivers) {
        LinkedList<String> jars=managedDriver.getJars();
        for (        String string : jars) {
          File file=new File(string);
          if (file.exists()) {
            MyURLClassLoader cl;
            cl=new MyURLClassLoader(file.toURL());
            try {
              Class clazz=cl.findClass(driverClassName);
              if (clazz != null) {
                driver=(Driver)clazz.newInstance();
                break;
              }
            }
 catch (            ClassNotFoundException e) {
            }
          }
        }
      }
    }
 catch (    MalformedURLException e) {
    }
  }
  if (driver == null) {
    driver=(Driver)Class.forName(driverClassName).newInstance();
  }
  return driver;
}","/** 
 * DOC qzhang Comment method ""getClassDriver"".
 * @param driverClassName
 * @return
 * @throws IllegalAccessException
 * @throws InstantiationException
 * @throws ClassNotFoundException
 */
public static Driver getClassDriver(String driverClassName) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  SQLExplorerPlugin sqlExplorerPlugin=SQLExplorerPlugin.getDefault();
  Driver driver=null;
  if (sqlExplorerPlugin != null) {
    net.sourceforge.sqlexplorer.dbproduct.DriverManager driverModel=sqlExplorerPlugin.getDriverModel();
    try {
      Collection<ManagedDriver> drivers=driverModel.getDrivers();
      for (      ManagedDriver managedDriver : drivers) {
        LinkedList<String> jars=managedDriver.getJars();
        List<URL> urls=new ArrayList<URL>();
        for (int i=0; i < jars.size(); i++) {
          File file=new File(jars.get(i));
          if (file.exists()) {
            urls.add(file.toURL());
          }
        }
        if (!urls.isEmpty()) {
          try {
            MyURLClassLoader cl;
            cl=new MyURLClassLoader(urls.toArray(new URL[0]));
            Class clazz=cl.findClass(driverClassName);
            if (clazz != null) {
              driver=(Driver)clazz.newInstance();
              return driver;
            }
          }
 catch (          ClassNotFoundException e) {
          }
        }
      }
    }
 catch (    MalformedURLException e) {
    }
  }
  if (driver == null) {
    driver=(Driver)Class.forName(driverClassName).newInstance();
  }
  return driver;
}",0.8935030140656397
140247,"private String extract(DateGrain dateGrain,String colName){
  if (is(MYSQL)) {
    return dateGrain.getName() + surroundWith('(',colName,')');
  }
  if (is(ORACLE)) {
    String toNumberToChar=""String_Node_Str"";
switch (dateGrain.getValue()) {
case DateGrain.DAY_VALUE:
      return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.WEEK_VALUE:
    return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.MONTH_VALUE:
  return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.QUARTER_VALUE:
return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.YEAR_VALUE:
return toNumberToChar + colName + ""String_Node_Str"";
default :
}
}
if (is(MSSQL)) {
return ""String_Node_Str"" + dateGrain.getName() + ""String_Node_Str""+ colName+ ""String_Node_Str"";
}
if (is(POSTGRESQL)) {
return ""String_Node_Str"" + dateGrain + from()+ colName+ ""String_Node_Str"";
}
return ""String_Node_Str"" + dateGrain + from()+ colName+ ""String_Node_Str"";
}","private String extract(DateGrain dateGrain,String colName){
  if (is(MYSQL) || is(DB2)) {
    return dateGrain.getName() + surroundWith('(',colName,')');
  }
  if (is(ORACLE)) {
    String toNumberToChar=""String_Node_Str"";
switch (dateGrain.getValue()) {
case DateGrain.DAY_VALUE:
      return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.WEEK_VALUE:
    return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.MONTH_VALUE:
  return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.QUARTER_VALUE:
return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.YEAR_VALUE:
return toNumberToChar + colName + ""String_Node_Str"";
default :
}
}
if (is(MSSQL)) {
return ""String_Node_Str"" + dateGrain.getName() + ""String_Node_Str""+ colName+ ""String_Node_Str"";
}
if (is(POSTGRESQL)) {
return ""String_Node_Str"" + dateGrain + from()+ colName+ ""String_Node_Str"";
}
return ""String_Node_Str"" + dateGrain + from()+ colName+ ""String_Node_Str"";
}",0.9943211151264842
140248,"private static String getToolTipMsg(Indicator indicator,String currentValue){
  IndicatorEnum indicatorEnum=IndicatorEnum.findIndicatorEnum(indicator.eClass());
  StringBuilder msg=new StringBuilder();
switch (indicatorEnum) {
case ModeIndicatorEnum:
    String expectedValue=IndicatorHelper.getExpectedValue(indicator);
  Boolean ignoreCaseOption=IndicatorHelper.ignoreCaseOption(indicator) == null ? false : IndicatorHelper.ignoreCaseOption(indicator);
boolean areSame=StringUtils.equals(currentValue,expectedValue) || (ignoreCaseOption && StringUtils.equalsIgnoreCase(currentValue,expectedValue));
if (!areSame) {
msg.append(""String_Node_Str"" + expectedValue + ""String_Node_Str"");
}
break;
default :
String[] dataThreshold=IndicatorHelper.getDataThreshold(indicator);
if (dataThreshold != null) {
String range=getRange(currentValue,dataThreshold);
if (range != null) {
msg.append(""String_Node_Str"" + range);
}
}
String[] indicatorThreshold=IndicatorHelper.getIndicatorThreshold(indicator);
if (indicatorThreshold != null) {
if (msg.length() != 0) {
msg.append('\n');
}
String range=getRange(currentValue,indicatorThreshold);
if (range != null) {
msg.append(""String_Node_Str"" + range);
}
}
break;
}
return msg.length() == 0 ? null : msg.toString();
}","private static String getToolTipMsg(Indicator indicator,String currentValue){
  IndicatorEnum indicatorEnum=IndicatorEnum.findIndicatorEnum(indicator.eClass());
  StringBuilder msg=new StringBuilder();
switch (indicatorEnum) {
case ModeIndicatorEnum:
    String expectedValue=IndicatorHelper.getExpectedValue(indicator);
  if (expectedValue != null) {
    Boolean ignoreCaseOption=IndicatorHelper.ignoreCaseOption(indicator) == null ? false : IndicatorHelper.ignoreCaseOption(indicator);
    boolean areSame=StringUtils.equals(currentValue,expectedValue) || (ignoreCaseOption && StringUtils.equalsIgnoreCase(currentValue,expectedValue));
    if (!areSame) {
      msg.append(""String_Node_Str"" + expectedValue + ""String_Node_Str"");
    }
  }
break;
default :
String[] dataThreshold=IndicatorHelper.getDataThreshold(indicator);
if (dataThreshold != null) {
String range=getRange(currentValue,dataThreshold);
if (range != null) {
msg.append(""String_Node_Str"" + range);
}
}
String[] indicatorThreshold=IndicatorHelper.getIndicatorThreshold(indicator);
if (indicatorThreshold != null) {
if (msg.length() != 0) {
msg.append('\n');
}
String range=getRange(currentValue,indicatorThreshold);
if (range != null) {
msg.append(""String_Node_Str"" + range);
}
}
break;
}
return msg.length() == 0 ? null : msg.toString();
}",0.978507229386479
140249,"@Override public boolean performFinish(){
  try {
    IndicatorParameters parameters=indicator.getParameters();
    if (parameters == null) {
      isDirty=true;
      parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
      indicator.setParameters(parameters);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    TextParameters textParameters=parameters.getTextParameter();
    for (    AbstractIndicatorParameter formParam : AbstractIndicatorForm.getParameters()) {
      if (!ParamCompareFactory.compare(parameters,formParam)) {
        isDirty=true;
switch (formParam.getFormEnum()) {
case BinsDesignerForm:
          BinsDesignerParameter tempParam=(BinsDesignerParameter)formParam;
        int numOfShown=tempParam.getNumOfShown();
      Domain domain=tempParam.getUserDomian();
    if (domain.getRanges().size() == 0) {
      parameters.setBins(null);
    }
 else {
      parameters.setBins(domain);
    }
  parameters.setTopN(numOfShown);
break;
case TextParametersForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextParameter textParam=(TextParameter)formParam;
textParameters.setIgnoreCase(textParam.isIngoreCase());
parameters.setTopN(textParam.getNumOfShown());
break;
case TextLengthForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextLengthParameter lengthParam=(TextLengthParameter)formParam;
textParameters.setUseBlank(lengthParam.isUseBlank());
textParameters.setUseNulls(lengthParam.isUseNull());
break;
case DataThresholdsForm:
DataThresholdsParameter dataParam=(DataThresholdsParameter)formParam;
String min1=dataParam.getMinThreshold();
String max1=dataParam.getMaxThreshold();
if (""String_Node_Str"".equals(min1) && ""String_Node_Str"".equals(max1)) {
parameters.setDataValidDomain(null);
}
 else {
IndicatorHelper.setDataThreshold(indicator,min1,max1);
IndicatorHelper.propagateDataThresholdsInChildren(indicator);
}
break;
case IndicatorThresholdsForm:
IndicatorThresholdsParameter indiParam=(IndicatorThresholdsParameter)formParam;
String min2=indiParam.getMinThreshold();
String max2=indiParam.getMaxThreshold();
if (""String_Node_Str"".equals(min2) && ""String_Node_Str"".equals(max2)) {
parameters.setIndicatorValidDomain(null);
}
 else {
IndicatorHelper.setIndicatorThreshold(parameters,min2,max2);
}
break;
case TimeSlicesForm:
TimeSlicesParameter timeParam=(TimeSlicesParameter)formParam;
DateGrain dateGrain=DateGrain.get(timeParam.getDataUnit());
dateParameters.setDateAggregationType(dateGrain);
parameters.setTopN(timeParam.getNumOfShown());
break;
case NumbericNominalForm:
NumbericNominalParameter numbParam=(NumbericNominalParameter)formParam;
parameters.setTopN(numbParam.getNumberOfShown());
break;
case ExpectedValueForm:
ExpectedValueParameter expectedParam=(ExpectedValueParameter)formParam;
IndicatorHelper.setIndicatorExpectedValue(parameters,expectedParam.getExpectedValue());
default :
}
}
}
return true;
}
 catch (Exception e) {
e.printStackTrace();
}
return false;
}","@Override public boolean performFinish(){
  try {
    IndicatorParameters parameters=indicator.getParameters();
    if (parameters == null) {
      isDirty=true;
      parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
      indicator.setParameters(parameters);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    TextParameters textParameters=parameters.getTextParameter();
    for (    AbstractIndicatorParameter formParam : AbstractIndicatorForm.getParameters()) {
      if (!ParamCompareFactory.compare(parameters,formParam)) {
        isDirty=true;
switch (formParam.getFormEnum()) {
case BinsDesignerForm:
          BinsDesignerParameter tempParam=(BinsDesignerParameter)formParam;
        int numOfShown=tempParam.getNumOfShown();
      Domain domain=tempParam.getUserDomian();
    if (domain.getRanges().size() == 0) {
      parameters.setBins(null);
    }
 else {
      parameters.setBins(domain);
    }
  parameters.setTopN(numOfShown);
break;
case TextParametersForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextParameter textParam=(TextParameter)formParam;
textParameters.setIgnoreCase(textParam.isIngoreCase());
parameters.setTopN(textParam.getNumOfShown());
break;
case TextLengthForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextLengthParameter lengthParam=(TextLengthParameter)formParam;
textParameters.setUseBlank(lengthParam.isUseBlank());
textParameters.setUseNulls(lengthParam.isUseNull());
break;
case DataThresholdsForm:
DataThresholdsParameter dataParam=(DataThresholdsParameter)formParam;
String min1=dataParam.getMinThreshold();
String max1=dataParam.getMaxThreshold();
if (""String_Node_Str"".equals(min1) && ""String_Node_Str"".equals(max1)) {
parameters.setDataValidDomain(null);
}
 else {
IndicatorHelper.setDataThreshold(indicator,min1,max1);
IndicatorHelper.propagateDataThresholdsInChildren(indicator);
}
break;
case IndicatorThresholdsForm:
IndicatorThresholdsParameter indiParam=(IndicatorThresholdsParameter)formParam;
String min2=indiParam.getMinThreshold();
String max2=indiParam.getMaxThreshold();
if (""String_Node_Str"".equals(min2) && ""String_Node_Str"".equals(max2)) {
parameters.setIndicatorValidDomain(null);
}
 else {
IndicatorHelper.setIndicatorThreshold(parameters,min2,max2);
}
break;
case TimeSlicesForm:
TimeSlicesParameter timeParam=(TimeSlicesParameter)formParam;
DateGrain dateGrain=DateGrain.get(timeParam.getDataUnit());
dateParameters.setDateAggregationType(dateGrain);
parameters.setTopN(timeParam.getNumOfShown());
break;
case NumbericNominalForm:
NumbericNominalParameter numbParam=(NumbericNominalParameter)formParam;
parameters.setTopN(numbParam.getNumberOfShown());
break;
case ExpectedValueForm:
ExpectedValueParameter expectedParam=(ExpectedValueParameter)formParam;
IndicatorHelper.setIndicatorExpectedValue(parameters,expectedParam.getExpectedValue());
break;
default :
}
}
}
return true;
}
 catch (Exception e) {
e.printStackTrace();
}
return false;
}",0.9988911769364804
140250,"/** 
 * Method ""parseQuery"".
 * @param queryString
 * @return the parsed query. When boolean isOk() is true, this means that the finalizeQuery must called (for examplefor handling the MySQL LIMIT clause). When false, calling finalizeQuery() is not needed (but it won't hurt to call it).
 * @throws ParseException
 */
private ZQuery parseQuery(final String queryString) throws ParseException {
  String safeZqlString=queryString;
  safeZqlString=closeStatement(safeZqlString);
  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(safeZqlString.getBytes());
  ZqlParser parser=getZqlParser();
  parser.initParser(byteArrayInputStream);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + safeZqlString);
  }
  ZQuery zQuery=(ZQuery)parser.readStatement();
  return zQuery;
}","/** 
 * Method ""parseQuery"".
 * @param queryString
 * @return the parsed query. When boolean isOk() is true, this means that the finalizeQuery must called (for examplefor handling the MySQL LIMIT clause). When false, calling finalizeQuery() is not needed (but it won't hurt to call it).
 * @throws ParseException
 */
private ZQuery parseQuery(final String queryString) throws ParseException {
  invalidZqlQualifiedTableName=get2dotTableName(queryString);
  String safeZqlString=invalidZqlQualifiedTableName != null ? queryString.replace(invalidZqlQualifiedTableName,TMP_TABLE_NAME) : queryString;
  safeZqlString=replaceUnsupportedQuotes(safeZqlString);
  safeZqlString=closeStatement(safeZqlString);
  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(safeZqlString.getBytes());
  ZqlParser parser=getZqlParser();
  parser.initParser(byteArrayInputStream);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + safeZqlString);
  }
  ZQuery zQuery=(ZQuery)parser.readStatement();
  return zQuery;
}",0.8427397260273972
140251,"/** 
 * Method ""quote"".
 * @param sqlIdentifier the SQL identifier to quote
 * @return the sqlIdentifier quoted.
 */
public String quote(String sqlIdentifier){
  if (is(MYSQL)) {
    return sqlIdentifier;
  }
  return dbQuoteString + sqlIdentifier + dbQuoteString;
}","/** 
 * Method ""quote"".
 * @param sqlIdentifier the SQL identifier to quote
 * @return the sqlIdentifier quoted.
 */
public String quote(String sqlIdentifier){
  return dbQuoteString + sqlIdentifier + dbQuoteString;
}",0.8985507246376812
140252,"public String toQualifiedName(String catalog,String schema,String table){
  if (is(MSSQL)) {
    catalog=""String_Node_Str"";
  }
  if (is(SYBASE_ASE)) {
    catalog=""String_Node_Str"";
  }
  StringBuffer qualName=new StringBuffer();
  if (catalog != null && catalog.length() > 0) {
    qualName.append(catalog);
    qualName.append(DOT);
  }
  if (schema != null && schema.length() > 0) {
    qualName.append(schema);
    qualName.append(DOT);
  }
  qualName.append(table);
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",catalog,schema,table,qualName));
  }
  return qualName.toString();
}","public String toQualifiedName(String catalog,String schema,String table){
  if (is(MSSQL)) {
    schema=quote(""String_Node_Str"");
  }
  if (is(SYBASE_ASE)) {
    schema=quote(""String_Node_Str"");
  }
  StringBuffer qualName=new StringBuffer();
  if (catalog != null && catalog.length() > 0 && !is(POSTGRESQL)) {
    qualName.append(catalog);
    qualName.append(DOT);
  }
  if (schema != null && schema.length() > 0) {
    qualName.append(schema);
    qualName.append(DOT);
  }
  qualName.append(table);
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",catalog,schema,table,qualName));
  }
  return qualName.toString();
}",0.953285827395091
140253,"public String getDbQuoteString(){
  return this.dbQuoteString;
}","/** 
 * Method ""getDbQuoteString"".
 * @return the quote identifier string set in this object.
 */
public String getDbQuoteString(){
  return this.dbQuoteString;
}",0.5663716814159292
140254,"/** 
 * Method ""finalizeQuery"" must be called after prepareQuery().
 * @param query the query to finalize
 * @return the final query.
 */
public String finalizeQuery(String query){
  StringBuffer buf=new StringBuffer();
  buf.append(query.toString());
  if (containsLimitClause) {
    buf.append(""String_Node_Str"" + withoutLimit[1]);
  }
  containsLimitClause=false;
  return buf.toString();
}","/** 
 * Method ""finalizeQuery"" must be called after prepareQuery().
 * @param query the query to finalize
 * @return the final query.
 */
public String finalizeQuery(String query){
  StringBuffer buf=new StringBuffer();
  buf.append(query.toString());
  if (containsLimitClause) {
    buf.append(""String_Node_Str"" + withoutLimit[1]);
  }
  containsLimitClause=false;
  String fquery=buf.toString();
  if (invalidZqlQualifiedTableName != null) {
    return fquery.replace(TMP_TABLE_NAME,this.invalidZqlQualifiedTableName);
  }
  return fquery;
}",0.7897545357524013
140255,"/** 
 * Method ""getQuoteIdentifier"".
 * @return hard coded quote identifier string.
 */
public String getQuoteIdentifier(){
  if (is(MYSQL)) {
    return ""String_Node_Str"";
  }
  if (is(ORACLE)) {
    return ""String_Node_Str"";
  }
  if (is(POSTGRESQL)) {
    return ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}","/** 
 * Method ""getQuoteIdentifier"" returns the hard coded quote identifier string. You should call  {@link #getDbQuoteString()} instead.
 * @return hard coded quote identifier string.
 */
public String getQuoteIdentifier(){
  if (is(MYSQL)) {
    return ""String_Node_Str"";
  }
  if (is(ORACLE)) {
    return ""String_Node_Str"";
  }
  if (is(POSTGRESQL)) {
    return ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}",0.8629579375848032
140256,"public Properties getDBPameterProperties(String connectionStr){
  Properties paramProperties=new Properties();
  String matchSubStr=connectionStr.substring(0,8);
  Set<Object> s=PROP.keySet();
  Iterator<Object> it=s.iterator();
  while (it.hasNext()) {
    String id=(String)it.next();
    String value=PROP.getProperty(id);
    if (value.contains(matchSubStr)) {
      paramProperties.setProperty(PluginConstant.DBTYPE_PROPERTY,id);
      MessageFormat mf=new MessageFormat(value);
      Object[] parseResult=mf.parse(connectionStr,new ParsePosition(0));
      paramProperties.setProperty(PluginConstant.HOSTNAME_PROPERTY,(String)parseResult[0]);
      paramProperties.setProperty(PluginConstant.PORT_PROPERTY,(String)parseResult[1]);
      break;
    }
  }
  return paramProperties;
}","public Properties getDBPameterProperties(String connectionStr){
  Properties paramProperties=new Properties();
  String matchSubStr=connectionStr.substring(0,8);
  Set<Object> s=PROP.keySet();
  Iterator<Object> it=s.iterator();
  while (it.hasNext()) {
    String id=(String)it.next();
    String value=PROP.getProperty(id);
    if (value.contains(matchSubStr)) {
      paramProperties.setProperty(PluginConstant.DBTYPE_PROPERTY,id);
      MessageFormat mf=new MessageFormat(value);
      Object[] parseResult=mf.parse(connectionStr,new ParsePosition(0));
      if (parseResult != null) {
        paramProperties.setProperty(PluginConstant.HOSTNAME_PROPERTY,(String)parseResult[0]);
        paramProperties.setProperty(PluginConstant.PORT_PROPERTY,(String)parseResult[1]);
        break;
      }
    }
  }
  return paramProperties;
}",0.9413942011104256
140257,"static void addMenuToTableItem(final Table table,final Indicator indicaotr){
  Menu menu=new Menu(table.getShell(),SWT.POP_UP);
  table.setMenu(menu);
  MenuItem item=new MenuItem(menu,SWT.PUSH);
  item.setText(""String_Node_Str"");
  item.setImage(ImageLib.getImage(ImageLib.EXPLORE_IMAGE));
  item.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      IEditorPart activeEditor=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
      AnalysisEditor editor=(AnalysisEditor)activeEditor;
      ColumnMasterDetailsPage page=(ColumnMasterDetailsPage)editor.getMasterPage();
      Analysis analysis=page.getAnalysisHandler().getAnalysis();
      if (analysis != null) {
        PatternExplorer patternExplorer=new PatternExplorer();
        patternExplorer.setIndicator(indicaotr);
        patternExplorer.setAnalysis(analysis);
        String query=patternExplorer.getInvalidRowsStatement();
        new ChangePerspectiveAction(PluginConstant.SE_ID).run();
        Collection<Alias> aliases=SQLExplorerPlugin.getDefault().getAliasManager().getAliases();
        TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
        if (tdDataProvider != null) {
          TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
          TdProviderConnection providerConnection=tdPc.getObject();
          String url=providerConnection.getConnectionString();
          for (          Alias alias : aliases) {
            if (alias.getUrl().equals(url)) {
              SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + indicaotr.getName() + ""String_Node_Str"");
              input.setUser(alias.getDefaultUser());
              try {
                IWorkbenchPage workPage=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
                SQLEditor editorPart=(SQLEditor)workPage.openEditor((IEditorInput)input,SQLEditor.class.getName());
                editorPart.setText(query);
                ExecSQLAction execSQLAction=new ExecSQLAction(editorPart);
                execSQLAction.run();
              }
 catch (              PartInitException e) {
                e.printStackTrace();
              }
            }
          }
        }
      }
    }
  }
);
}","static void addMenuToTableItem(final Table table,final Indicator indicaotr){
  Menu menu=new Menu(table.getShell(),SWT.POP_UP);
  table.setMenu(menu);
  MenuItem item=new MenuItem(menu,SWT.PUSH);
  item.setText(""String_Node_Str"");
  item.setImage(ImageLib.getImage(ImageLib.EXPLORE_IMAGE));
  item.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      IEditorPart activeEditor=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
      AnalysisEditor editor=(AnalysisEditor)activeEditor;
      ColumnMasterDetailsPage page=(ColumnMasterDetailsPage)editor.getMasterPage();
      Analysis analysis=page.getAnalysisHandler().getAnalysis();
      if (analysis != null) {
        PatternExplorer patternExplorer=new PatternExplorer();
        patternExplorer.setIndicator(indicaotr);
        patternExplorer.setAnalysis(analysis);
        String query=patternExplorer.getInvalidRowsStatement();
        new ChangePerspectiveAction(PluginConstant.SE_ID).run();
        Collection<Alias> aliases=SQLExplorerPlugin.getDefault().getAliasManager().getAliases();
        TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
        if (tdDataProvider != null) {
          TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
          TdProviderConnection providerConnection=tdPc.getObject();
          String url=providerConnection.getConnectionString();
          for (          Alias alias : aliases) {
            if (alias.getUrl().equals(url)) {
              SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + indicaotr.getName() + ""String_Node_Str"");
              input.setUser(alias.getDefaultUser());
              try {
                IWorkbenchPage workPage=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
                SQLEditor editorPart=(SQLEditor)workPage.openEditor((IEditorInput)input,SQLEditor.class.getName());
                editorPart.setText(query);
                ExecSQLAction execSQLAction=new ExecSQLAction(editorPart);
                execSQLAction.run();
              }
 catch (              PartInitException e) {
                e.printStackTrace();
              }
            }
          }
        }
      }
    }
  }
);
  menu.setVisible(true);
}",0.9947970863683664
140258,"static void addMenuToTableItem(final Table table,final Indicator indicaotr){
  Menu menu=new Menu(table.getShell(),SWT.POP_UP);
  table.setMenu(menu);
  MenuItem item=new MenuItem(menu,SWT.PUSH);
  item.setText(""String_Node_Str"");
  item.setImage(ImageLib.getImage(ImageLib.EXPLORE_IMAGE));
  item.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      IEditorPart activeEditor=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
      AnalysisEditor editor=(AnalysisEditor)activeEditor;
      ColumnMasterDetailsPage page=(ColumnMasterDetailsPage)editor.getMasterPage();
      Analysis analysis=page.getAnalysisHandler().getAnalysis();
      if (analysis != null) {
        PatternExplorer patternExplorer=new PatternExplorer();
        patternExplorer.setIndicator(indicaotr);
        patternExplorer.setAnalysis(analysis);
        String query=patternExplorer.getInvalidRowsStatement();
        new ChangePerspectiveAction(PluginConstant.SE_ID).run();
        Collection<Alias> aliases=SQLExplorerPlugin.getDefault().getAliasManager().getAliases();
        TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
        if (tdDataProvider != null) {
          TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
          TdProviderConnection providerConnection=tdPc.getObject();
          String url=providerConnection.getConnectionString();
          for (          Alias alias : aliases) {
            if (alias.getUrl().equals(url)) {
              SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + indicaotr.getName() + ""String_Node_Str"");
              input.setUser(alias.getDefaultUser());
              try {
                IWorkbenchPage workPage=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
                SQLEditor editorPart=(SQLEditor)workPage.openEditor((IEditorInput)input,SQLEditor.class.getName());
                editorPart.setText(query);
                ExecSQLAction execSQLAction=new ExecSQLAction(editorPart);
                execSQLAction.run();
              }
 catch (              PartInitException e) {
                e.printStackTrace();
              }
            }
          }
        }
      }
    }
  }
);
  menu.setVisible(true);
}","static void addMenuToTableItem(final Table table,final Indicator indicaotr){
  Menu menu=new Menu(table.getShell(),SWT.POP_UP);
  table.setMenu(menu);
  MenuItem item=new MenuItem(menu,SWT.PUSH);
  item.setText(""String_Node_Str"");
  item.setImage(ImageLib.getImage(ImageLib.EXPLORE_IMAGE));
  item.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      IEditorPart activeEditor=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
      AnalysisEditor editor=(AnalysisEditor)activeEditor;
      ColumnMasterDetailsPage page=(ColumnMasterDetailsPage)editor.getMasterPage();
      Analysis analysis=page.getAnalysisHandler().getAnalysis();
      if (analysis != null) {
        PatternExplorer patternExplorer=new PatternExplorer();
        patternExplorer.setIndicator(indicaotr);
        patternExplorer.setAnalysis(analysis);
        String query=patternExplorer.getInvalidRowsStatement();
        new ChangePerspectiveAction(PluginConstant.SE_ID).run();
        Collection<Alias> aliases=SQLExplorerPlugin.getDefault().getAliasManager().getAliases();
        TdDataProvider tdDataProvider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(analysis.getContext().getConnection());
        if (tdDataProvider != null) {
          TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
          TdProviderConnection providerConnection=tdPc.getObject();
          String url=providerConnection.getConnectionString();
          for (          Alias alias : aliases) {
            if (alias.getUrl().equals(url)) {
              SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + indicaotr.getName() + ""String_Node_Str"");
              input.setUser(alias.getDefaultUser());
              try {
                IWorkbenchPage workPage=SQLExplorerPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
                SQLEditor editorPart=(SQLEditor)workPage.openEditor((IEditorInput)input,SQLEditor.class.getName());
                editorPart.setText(query);
                ExecSQLAction execSQLAction=new ExecSQLAction(editorPart);
                execSQLAction.run();
                break;
              }
 catch (              PartInitException e) {
                e.printStackTrace();
              }
            }
          }
        }
      }
    }
  }
);
  menu.setVisible(true);
}",0.995260663507109
140259,"public String isNotBlank(String colName){
  if (is(MSSQL)) {
    return ""String_Node_Str"" + colName + ""String_Node_Str""+ notEqual()+ ""String_Node_Str"";
  }
  if (is(ORACLE)) {
    return ""String_Node_Str"" + colName + ""String_Node_Str""+ isNull();
  }
  return ""String_Node_Str"" + colName + ""String_Node_Str""+ notEqual()+ ""String_Node_Str"";
}","/** 
 * Method ""isNotBlank"".
 * @param colName a column name
 * @return the expression saying that the given column is not blank.
 */
public String isNotBlank(String colName){
  if (is(MSSQL)) {
    return ""String_Node_Str"" + colName + ""String_Node_Str""+ notEqual()+ ""String_Node_Str"";
  }
  if (is(ORACLE)) {
    return ""String_Node_Str"" + colName + ""String_Node_Str""+ isNotNull();
  }
  return ""String_Node_Str"" + colName + ""String_Node_Str""+ notEqual()+ ""String_Node_Str"";
}",0.8323133414932681
140260,"/** 
 * Method ""addWhereToStatement"".
 * @param statement a statement already prepared for parsing
 * @param whereClause
 * @return the new statement
 */
public String addWhereToStatement(String statement,String whereClause){
  try {
    ZQuery query=this.parseQuery(statement);
    if (whereClause != null) {
      if (StringUtils.isNotBlank(whereClause)) {
        ZqlParser filterParser=new ZqlParser();
        filterParser.initParser(new ByteArrayInputStream(whereClause.getBytes()));
        ZExp currentWhere=query.getWhere();
        ZExp whereExpression=filterParser.readExpression();
        if (currentWhere != null && whereExpression != null) {
          ZExpression finalWhereExpression=new ZExpression(and(),currentWhere,whereExpression);
          query.addWhere(finalWhereExpression);
        }
 else {
          if (whereExpression != null) {
            query.addWhere(whereExpression);
          }
        }
      }
    }
    return query.toString();
  }
 catch (  ParseException e) {
    log.error(e,e);
  }
  String finalQuery=statement + where() + whereClause;
  log.error(""String_Node_Str"" + finalQuery);
  return finalQuery;
}","/** 
 * Method ""addWhereToStatement"".
 * @param statement a statement already prepared for parsing
 * @param whereClause
 * @return the new statement
 */
public String addWhereToStatement(String statement,String whereClause){
  try {
    ZQuery query=this.parseQuery(statement);
    if (whereClause != null) {
      if (StringUtils.isNotBlank(whereClause)) {
        ZqlParser filterParser=new ZqlParser();
        filterParser.initParser(new ByteArrayInputStream(whereClause.getBytes()));
        ZExp currentWhere=query.getWhere();
        ZExp whereExpression=filterParser.readExpression();
        if (currentWhere != null && whereExpression != null) {
          ZExpression finalWhereExpression=new ZExpression(and(),currentWhere,whereExpression);
          query.addWhere(finalWhereExpression);
        }
 else {
          if (whereExpression != null) {
            query.addWhere(whereExpression);
          }
        }
      }
    }
    return query.toString();
  }
 catch (  ParseException e) {
    log.warn(e,e);
  }
  String op=statement.toUpperCase().contains(where()) ? and() : where();
  String finalQuery=statement + op + whereClause;
  log.warn(""String_Node_Str"" + finalQuery);
  return finalQuery;
}",0.9577345731191884
140261,"/** 
 * Method ""initDbmsFunctions"" initialize functions specific to DBMS. This is needed for ZQLParser which does not know all available functions.
 * @param dbms
 * @return the initialized map of functions with their number of parameters.
 */
private Map<String,Integer> initDbmsFunctions(String dbms){
  Map<String,Integer> functions=new HashMap<String,Integer>();
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  if (is(SQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(MYSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    for (    DateGrain grain : DateGrain.values()) {
      functions.put(grain.getName(),1);
    }
  }
  if (is(ORACLE)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",3);
  }
  if (is(POSTGRESQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
  }
  if (is(MSSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(DB2)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(SYBASE_ASE)) {
  }
  return functions;
}","/** 
 * Method ""initDbmsFunctions"" initialize functions specific to DBMS. This is needed for ZQLParser which does not know all available functions.
 * @param dbms
 * @return the initialized map of functions with their number of parameters.
 */
private Map<String,Integer> initDbmsFunctions(String dbms){
  Map<String,Integer> functions=new HashMap<String,Integer>();
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  if (is(SQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(MYSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    for (    DateGrain grain : DateGrain.values()) {
      functions.put(grain.getName(),1);
    }
  }
  if (is(ORACLE)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",3);
  }
  if (is(POSTGRESQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
  }
  if (is(MSSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(DB2)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(SYBASE_ASE)) {
  }
  return functions;
}",0.9866888519134775
140262,"private static String getToolTipMsg(Indicator indicator,String currentValue){
  IndicatorEnum indicatorEnum=IndicatorEnum.findIndicatorEnum(indicator.eClass());
  StringBuilder msg=new StringBuilder();
switch (indicatorEnum) {
case ModeIndicatorEnum:
    String expectedValue=IndicatorHelper.getExpectedValue(indicator);
  boolean areSame=StringUtils.equals(currentValue,expectedValue) || (IndicatorHelper.ignoreCaseOption(indicator) && StringUtils.equalsIgnoreCase(currentValue,expectedValue));
if (!areSame) {
  msg.append(""String_Node_Str"" + expectedValue + ""String_Node_Str"");
}
break;
default :
String[] dataThreshold=IndicatorHelper.getDataThreshold(indicator);
if (dataThreshold != null) {
String range=getRange(currentValue,dataThreshold);
if (range != null) {
msg.append(""String_Node_Str"" + range);
}
}
String[] indicatorThreshold=IndicatorHelper.getIndicatorThreshold(indicator);
if (indicatorThreshold != null) {
if (msg.length() != 0) {
msg.append('\n');
}
String range=getRange(currentValue,indicatorThreshold);
if (range != null) {
msg.append(""String_Node_Str"" + range);
}
}
break;
}
return msg.length() == 0 ? null : msg.toString();
}","private static String getToolTipMsg(Indicator indicator,String currentValue){
  IndicatorEnum indicatorEnum=IndicatorEnum.findIndicatorEnum(indicator.eClass());
  StringBuilder msg=new StringBuilder();
switch (indicatorEnum) {
case ModeIndicatorEnum:
    String expectedValue=IndicatorHelper.getExpectedValue(indicator);
  Boolean ignoreCaseOption=IndicatorHelper.ignoreCaseOption(indicator) == null ? false : IndicatorHelper.ignoreCaseOption(indicator);
boolean areSame=StringUtils.equals(currentValue,expectedValue) || (ignoreCaseOption && StringUtils.equalsIgnoreCase(currentValue,expectedValue));
if (!areSame) {
msg.append(""String_Node_Str"" + expectedValue + ""String_Node_Str"");
}
break;
default :
String[] dataThreshold=IndicatorHelper.getDataThreshold(indicator);
if (dataThreshold != null) {
String range=getRange(currentValue,dataThreshold);
if (range != null) {
msg.append(""String_Node_Str"" + range);
}
}
String[] indicatorThreshold=IndicatorHelper.getIndicatorThreshold(indicator);
if (indicatorThreshold != null) {
if (msg.length() != 0) {
msg.append('\n');
}
String range=getRange(currentValue,indicatorThreshold);
if (range != null) {
msg.append(""String_Node_Str"" + range);
}
}
break;
}
return msg.length() == 0 ? null : msg.toString();
}",0.932944606413994
140263,"private static void removeReportComponent(ImpactNode[] impactNodes){
  ReportsSwitch<TdReport> mySwitch=new ReportsSwitch<TdReport>(){
    public TdReport caseTdReport(    TdReport object){
      return object;
    }
  }
;
  TdReport report=null;
  for (  ImpactNode node : impactNodes) {
    report=mySwitch.doSwitch(node.getNodeElement());
    if (report != null && node.getChildren().length > 0) {
      List<Analysis> anaList=new ArrayList<Analysis>();
      for (      ModelElement element : node.getChildren()) {
        anaList.add((Analysis)element);
      }
      ReportHelper.removeAnalyses(report,anaList);
    }
  }
}","private static void removeReportComponent(ImpactNode[] impactNodes){
  ReportsSwitch<TdReport> mySwitch=new ReportsSwitch<TdReport>(){
    public TdReport caseTdReport(    TdReport object){
      return object;
    }
  }
;
  TdReport report=null;
  for (  ImpactNode node : impactNodes) {
    report=mySwitch.doSwitch(node.getNodeElement());
    if (report != null && node.getChildren().length > 0) {
      List<Analysis> anaList=new ArrayList<Analysis>();
      for (      ModelElement element : node.getChildren()) {
        anaList.add((Analysis)element);
      }
      ReportHelper.removeAnalyses(report,anaList);
      DependenciesHandler.getInstance().removeDependenciesBetweenModels(report,anaList);
    }
  }
}",0.9339272457312546
140264,"/** 
 * Method ""supportNonIntegerConstantInGroupBy"".
 * @return true if expression like ""GROUP BY 'toto'"" are supported
 */
public boolean supportNonIntegerConstantInGroupBy(){
  if (is(POSTGRESQL)) {
    return false;
  }
  return true;
}","/** 
 * Method ""supportNonIntegerConstantInGroupBy"".
 * @return true if expression like ""GROUP BY 'toto'"" are supported
 */
public boolean supportNonIntegerConstantInGroupBy(){
  if (is(POSTGRESQL) || is(MSSQL)) {
    return false;
  }
  return true;
}",0.9735234215885948
140265,"private String getAlias(String colName,DateGrain dateAggregationType){
  return ""String_Node_Str"" + unquote(colName) + dateAggregationType.getName()+ ""String_Node_Str"";
}","private String getAlias(String colName,DateGrain dateAggregationType){
  if (dbms().supportAliasesInGroupBy()) {
    return ""String_Node_Str"" + unquote(colName) + dateAggregationType.getName()+ ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.7906976744186046
140266,"/** 
 * DOC scorreia Comment method ""getCompletedSingleSelect"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param whereExpression
 * @param range
 * @return
 * @throws ParseException
 */
private String getCompletedSingleSelect(Indicator indicator,String sqlGenericExpression,String colName,String table,List<String> whereExpression,String range) throws ParseException {
  String completedRange=replaceVariables(range,colName,table);
  String rangeColumn=""String_Node_Str"" + completedRange + ""String_Node_Str"";
  String rangeColumnInGroupBy=dbms().supportNonIntegerConstantInGroupBy() ? rangeColumn : ""String_Node_Str"";
  String completedSqlString=replaceVariablesLow(sqlGenericExpression,rangeColumn,table,rangeColumnInGroupBy);
  List<String> allWheresForSingleSelect=new ArrayList<String>(whereExpression);
  completedSqlString=addWhereToSqlStringStatement(allWheresForSingleSelect,completedSqlString);
  completedSqlString=replaceCountByZeroCount(completedSqlString,completedRange);
  return completedSqlString;
}","/** 
 * DOC scorreia Comment method ""getCompletedSingleSelect"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param whereExpression
 * @param range
 * @return
 * @throws ParseException
 */
private String getCompletedSingleSelect(Indicator indicator,String sqlGenericExpression,String colName,String table,List<String> whereExpression,String range) throws ParseException {
  String completedRange=replaceVariables(range,colName,table);
  String rangeColumn=""String_Node_Str"" + completedRange + ""String_Node_Str"";
  String singleQuery=removeGroupBy(sqlGenericExpression);
  String completedSqlString=replaceVariablesLow(singleQuery,rangeColumn,table);
  List<String> allWheresForSingleSelect=new ArrayList<String>(whereExpression);
  completedSqlString=addWhereToSqlStringStatement(allWheresForSingleSelect,completedSqlString);
  completedSqlString=replaceCountByZeroCount(completedSqlString,completedRange);
  return completedSqlString;
}",0.9156388751850024
140267,"@Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object target){
  if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
    return Status.CANCEL_STATUS;
  }
  IResource[] resources=null;
  TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
  if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
    resources=getSelectedResources();
  }
 else   if (ResourceTransfer.getInstance().isSupportedType(currentTransfer)) {
    resources=(IResource[])aDropTargetEvent.data;
  }
  if ((target instanceof IFile)) {
    TdReport findReport=RepResourceFileHelper.getInstance().findReport(((IFile)target));
    List<Analysis> analyses=ReportHelper.getAnalyses(findReport);
    Map<String,Analysis> resourcesMap=new HashMap<String,Analysis>();
    for (    Analysis ana : analyses) {
      String uriString=ana.eResource().getURI().toString();
      resourcesMap.put(uriString,ana);
    }
    if (resources != null && resources.length > 0) {
      List<Analysis> anaList=new ArrayList<Analysis>();
      for (      IResource res : resources) {
        Analysis findAnalysis=AnaResourceFileHelper.getInstance().findAnalysis((IFile)res);
        if (findAnalysis != null) {
          String uriKey=findAnalysis.eResource().getURI().toString();
          if (resourcesMap.containsKey(uriKey)) {
            findReport.getComponent().remove(resourcesMap.get(uriKey));
          }
          anaList.add(findAnalysis);
        }
      }
      ReportHelper.addAnalyses(anaList,findReport);
      RepResourceFileHelper.getInstance().save(findReport);
    }
  }
 else   if (resources != null && (target instanceof IFolder)) {
    IFolder folder=(IFolder)target;
    for (    IResource res : resources) {
      if (res.getType() != IResource.FILE) {
        return null;
      }
      if (folder.equals(res.getParent())) {
        continue;
      }
      String name=res.getName();
      IFile fileRes=(IFile)res;
      IFile movedIFile=folder.getFile(name);
      if (!DQStructureManager.getInstance().getModelElementSuffixs().contains(fileRes.getFileExtension())) {
        try {
          fileRes.move(movedIFile.getFullPath(),false,null);
          fileRes.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
          folder.refreshLocal(IResource.DEPTH_INFINITE,null);
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
        return Status.OK_STATUS;
      }
      IContainer srcParent=fileRes.getParent();
      URI srcUri=URI.createPlatformResourceURI((fileRes).getFullPath().toString(),false);
      Resource resource=EMFSharedResources.getInstance().getResource(srcUri,true);
      if (resource != null) {
        URI desUri=URI.createPlatformResourceURI(folder.getFullPath().toString(),false);
        EMFSharedResources.getInstance().saveToUri(resource,desUri);
      }
      try {
        fileRes.delete(true,null);
        ModelElementFileFactory.getResourceFileMap(fileRes).setResourcesNumberChanged(true);
        srcParent.refreshLocal(IResource.DEPTH_INFINITE,null);
        folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      }
 catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
      movedIFile=folder.getFile(name);
    }
  }
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return null;
}","@Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object target){
  if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
    return Status.CANCEL_STATUS;
  }
  IResource[] resources=null;
  TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
  if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
    resources=getSelectedResources();
  }
 else   if (ResourceTransfer.getInstance().isSupportedType(currentTransfer)) {
    resources=(IResource[])aDropTargetEvent.data;
  }
  if ((target instanceof IFile)) {
    TdReport findReport=RepResourceFileHelper.getInstance().findReport(((IFile)target));
    List<Analysis> analyses=ReportHelper.getAnalyses(findReport);
    Map<String,Analysis> resourcesMap=new HashMap<String,Analysis>();
    for (    Analysis ana : analyses) {
      String uriString=ana.eResource().getURI().toString();
      resourcesMap.put(uriString,ana);
    }
    if (resources != null && resources.length > 0) {
      List<Analysis> anaList=new ArrayList<Analysis>();
      for (      IResource res : resources) {
        Analysis findAnalysis=AnaResourceFileHelper.getInstance().findAnalysis((IFile)res);
        if (findAnalysis != null) {
          String uriKey=findAnalysis.eResource().getURI().toString();
          if (resourcesMap.containsKey(uriKey)) {
            findReport.removeAnalysis(resourcesMap.get(uriKey));
          }
          anaList.add(findAnalysis);
        }
      }
      ReportHelper.addAnalyses(anaList,findReport);
      RepResourceFileHelper.getInstance().save(findReport);
    }
  }
 else   if (resources != null && (target instanceof IFolder)) {
    IFolder folder=(IFolder)target;
    for (    IResource res : resources) {
      if (res.getType() != IResource.FILE) {
        return null;
      }
      if (folder.equals(res.getParent())) {
        continue;
      }
      String name=res.getName();
      IFile fileRes=(IFile)res;
      IFile movedIFile=folder.getFile(name);
      if (!DQStructureManager.getInstance().getModelElementSuffixs().contains(fileRes.getFileExtension())) {
        try {
          fileRes.move(movedIFile.getFullPath(),false,null);
          fileRes.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
          folder.refreshLocal(IResource.DEPTH_INFINITE,null);
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
        return Status.OK_STATUS;
      }
      IContainer srcParent=fileRes.getParent();
      URI srcUri=URI.createPlatformResourceURI((fileRes).getFullPath().toString(),false);
      Resource resource=EMFSharedResources.getInstance().getResource(srcUri,true);
      if (resource != null) {
        URI desUri=URI.createPlatformResourceURI(folder.getFullPath().toString(),false);
        EMFSharedResources.getInstance().saveToUri(resource,desUri);
      }
      try {
        fileRes.delete(true,null);
        ModelElementFileFactory.getResourceFileMap(fileRes).setResourcesNumberChanged(true);
        srcParent.refreshLocal(IResource.DEPTH_INFINITE,null);
        folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      }
 catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
      movedIFile=folder.getFile(name);
    }
  }
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return null;
}",0.9960761517221334
140268,"private static ChartDataEntity[] getDataEnityFromUnits(List<IndicatorUnit> unitList){
  List<ChartDataEntity> list=new ArrayList<ChartDataEntity>();
  for (  IndicatorUnit unit : unitList) {
    if (unit.isExcuted()) {
      ChartDataEntity entity;
switch (unit.getType()) {
case FrequencyIndicatorEnum:
        FrequencyExt[] freqExt=(FrequencyExt[])unit.getValue();
      for (      FrequencyExt one : freqExt) {
        entity=new ChartDataEntity();
        entity.setLabel(String.valueOf(one.getKey()));
        entity.setValue(String.valueOf(one.getValue()));
        entity.setPercent(String.valueOf(one.getFrequency()));
        entity.setIndicator(unit.getIndicator());
        list.add(entity);
      }
    entity=new ChartDataEntity();
  FrequencyIndicator freqIndicator=(FrequencyIndicator)unit.getIndicator();
entity.setLabel(FrequencyIndicator.OTHER);
entity.setValue(freqIndicator.getCount(FrequencyIndicator.OTHER).toString());
entity.setPercent(freqIndicator.getFrequency(FrequencyIndicator.OTHER).toString());
entity.setIndicator(freqIndicator);
list.add(entity);
break;
case RegexpMatchingIndicatorEnum:
case SqlPatternMatchingIndicatorEnum:
PatternMatchingExt patnExt=(PatternMatchingExt)unit.getValue();
PatternMatchingIndicator patternIndicator=(PatternMatchingIndicator)unit.getIndicator();
PatternChartDataEntity patternEntity=new PatternChartDataEntity();
patternEntity.setLabel(unit.getIndicatorName());
patternEntity.setNumMatch(String.valueOf(patnExt.getMatchingValueCount()));
patternEntity.setNumNoMatch(String.valueOf(patnExt.getNotMatchingValueCount()));
Double total=patternIndicator.getMatchingValueCount().doubleValue() + patternIndicator.getNotMatchingValueCount().doubleValue();
Double percentMatch=total > 0 ? patternIndicator.getMatchingValueCount().doubleValue() * 100 / total : Double.NaN;
patternEntity.setValue(String.valueOf(percentMatch));
patternEntity.setIndicator(patternIndicator);
list.add(patternEntity);
break;
default :
entity=new ChartDataEntity();
entity.setLabel(unit.getIndicatorName());
entity.setValue(unit.getValue().toString());
entity.setIndicator(unit.getIndicator());
list.add(entity);
}
}
}
return list.toArray(new ChartDataEntity[list.size()]);
}","private static ChartDataEntity[] getDataEnityFromUnits(List<IndicatorUnit> unitList){
  List<ChartDataEntity> list=new ArrayList<ChartDataEntity>();
  for (  IndicatorUnit unit : unitList) {
    if (unit.isExcuted()) {
      ChartDataEntity entity;
switch (unit.getType()) {
case FrequencyIndicatorEnum:
        FrequencyExt[] freqExt=(FrequencyExt[])unit.getValue();
      for (      FrequencyExt one : freqExt) {
        entity=new ChartDataEntity();
        entity.setLabel(String.valueOf(one.getKey()));
        entity.setValue(String.valueOf(one.getValue()));
        entity.setPercent(String.valueOf(one.getFrequency()));
        entity.setIndicator(unit.getIndicator());
        list.add(entity);
      }
    entity=new ChartDataEntity();
  FrequencyIndicator freqIndicator=(FrequencyIndicator)unit.getIndicator();
entity.setLabel(FrequencyIndicator.OTHER);
entity.setValue(freqIndicator.getCount(FrequencyIndicator.OTHER).toString());
entity.setPercent(freqIndicator.getFrequency(FrequencyIndicator.OTHER).toString());
entity.setIndicator(freqIndicator);
list.add(entity);
break;
case RegexpMatchingIndicatorEnum:
case SqlPatternMatchingIndicatorEnum:
PatternMatchingExt patnExt=(PatternMatchingExt)unit.getValue();
PatternMatchingIndicator patternIndicator=(PatternMatchingIndicator)unit.getIndicator();
PatternChartDataEntity patternEntity=new PatternChartDataEntity();
patternEntity.setLabel(unit.getIndicatorName());
patternEntity.setNumMatch(String.valueOf(patnExt.getMatchingValueCount()));
patternEntity.setNumNoMatch(String.valueOf(patnExt.getNotMatchingValueCount()));
Double total=patternIndicator.getMatchingValueCount().doubleValue() + patternIndicator.getNotMatchingValueCount().doubleValue();
Double percentMatch=total > 0 ? patternIndicator.getMatchingValueCount().doubleValue() * 100 / total : Double.NaN;
patternEntity.setValue(String.valueOf(percentMatch));
patternEntity.setIndicator(patternIndicator);
list.add(patternEntity);
break;
default :
entity=new ChartDataEntity();
entity.setLabel(unit.getIndicatorName());
entity.setValue(String.valueOf(unit.getValue()));
entity.setIndicator(unit.getIndicator());
list.add(entity);
}
}
}
return list.toArray(new ChartDataEntity[list.size()]);
}",0.994352834876892
140269,"/** 
 * Method ""addWhereToStatement"".
 * @param statement a statement already prepared for parsing
 * @param whereClause
 * @return the new statement
 */
public String addWhereToStatement(String statement,String whereClause){
  try {
    ZQuery query=this.parseQuery(statement);
    if (whereClause != null) {
      if (StringUtils.isNotBlank(whereClause)) {
        ZqlParser filterParser=new ZqlParser();
        filterParser.initParser(new ByteArrayInputStream(whereClause.getBytes()));
        ZExp currentWhere=query.getWhere();
        ZExp whereExpression=filterParser.readExpression();
        if (currentWhere != null && whereExpression != null) {
          ZExpression finalWhereExpression=new ZExpression(and(),currentWhere,whereExpression);
          query.addWhere(finalWhereExpression);
        }
 else {
          if (whereExpression != null) {
            query.addWhere(whereExpression);
          }
        }
      }
    }
    return query.toString();
  }
 catch (  ParseException e) {
    log.warn(e,e);
  }
  String op=statement.toUpperCase().contains(where()) ? and() : where();
  String finalQuery=statement + op + whereClause;
  log.warn(""String_Node_Str"" + finalQuery);
  return finalQuery;
}","/** 
 * Method ""addWhereToStatement"".
 * @param statement a statement already prepared for parsing
 * @param whereClause
 * @return the new statement
 */
public String addWhereToStatement(String statement,String whereClause){
  if (!isTooComplexForZql(statement)) {
    try {
      ZQuery query=this.parseQuery(statement);
      if (whereClause != null) {
        if (StringUtils.isNotBlank(whereClause)) {
          ZqlParser filterParser=new ZqlParser();
          filterParser.initParser(new ByteArrayInputStream(whereClause.getBytes()));
          ZExp currentWhere=query.getWhere();
          ZExp whereExpression=filterParser.readExpression();
          if (currentWhere != null && whereExpression != null) {
            ZExpression finalWhereExpression=new ZExpression(and(),currentWhere,whereExpression);
            query.addWhere(finalWhereExpression);
          }
 else {
            if (whereExpression != null) {
              query.addWhere(whereExpression);
            }
          }
        }
      }
      return query.toString();
    }
 catch (    ParseException e) {
      log.warn(""String_Node_Str"" + statement + ""String_Node_Str""+ e,e);
    }
  }
  if (statement.contains(""String_Node_Str"") && statement.contains(""String_Node_Str"")) {
    int insertIdx=statement.indexOf(""String_Node_Str"");
    StringBuilder finalQuery=new StringBuilder().append(statement.substring(0,insertIdx)).append(where()).append(surroundWithSpaces(whereClause)).append(statement.substring(insertIdx));
    return finalQuery.toString();
  }
  String op=statement.toUpperCase().contains(where()) ? and() : where();
  String finalQuery=statement + op + whereClause;
  log.warn(""String_Node_Str"" + finalQuery);
  return finalQuery;
}",0.7779666780006801
140270,"/** 
 * Method ""initDbmsFunctions"" initialize functions specific to DBMS. This is needed for ZQLParser which does not know all available functions.
 * @param dbms
 * @return the initialized map of functions with their number of parameters.
 */
private Map<String,Integer> initDbmsFunctions(String dbms){
  Map<String,Integer> functions=new HashMap<String,Integer>();
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  if (is(SQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(MYSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    for (    DateGrain grain : DateGrain.values()) {
      functions.put(grain.getName(),1);
    }
  }
  if (is(ORACLE)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",3);
  }
  if (is(POSTGRESQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
  }
  if (is(MSSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(DB2)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(SYBASE_ASE)) {
  }
  return functions;
}","/** 
 * Method ""initDbmsFunctions"" initialize functions specific to DBMS. This is needed for ZQLParser which does not know all available functions.
 * @param dbms
 * @return the initialized map of functions with their number of parameters.
 */
private Map<String,Integer> initDbmsFunctions(String dbms){
  Map<String,Integer> functions=new HashMap<String,Integer>();
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  if (is(SQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(MYSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    for (    DateGrain grain : DateGrain.values()) {
      functions.put(grain.getName(),1);
    }
  }
  if (is(ORACLE)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",3);
  }
  if (is(POSTGRESQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
  }
  if (is(MSSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(DB2)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(SYBASE_ASE)) {
  }
  return functions;
}",0.987034035656402
140271,"/** 
 * Method ""removeAnalyses"".
 * @param report
 * @param analyses analyses to remove from the report
 * @return true if the analyses list of the report changed as a result of the call.
 */
public static boolean removeAnalyses(TdReport report,Collection<Analysis> analyses){
  return report.getComponent().removeAll(analyses);
}","/** 
 * Method ""removeAnalyses"".
 * @param report
 * @param analyses analyses to remove from the report
 * @return true if the analyses list of the report changed as a result of the call.
 */
public static boolean removeAnalyses(TdReport report,Collection<Analysis> analyses){
  boolean removed=true;
  for (  Analysis analysis : analyses) {
    if (!report.removeAnalysis(analysis)) {
      removed=false;
    }
  }
  return removed;
}",0.762402088772846
140272,"/** 
 * Method ""addAnalyses"".
 * @param analyses a collection of analyses.
 * @param report a report (must not be null)
 * @return true if the analysis list changed as a result of the call.
 */
public static boolean addAnalyses(Collection<Analysis> analyses,TdReport report){
  return report.getComponent().addAll(analyses);
}","/** 
 * Method ""addAnalyses"".
 * @param analyses a collection of analyses.
 * @param report a report (must not be null)
 * @return true if the analysis list changed as a result of the call.
 */
public static boolean addAnalyses(Collection<Analysis> analyses,TdReport report){
  boolean added=true;
  for (  Analysis analysis : analyses) {
    if (!report.addAnalysis(analysis)) {
      added=false;
    }
  }
  return added;
}",0.773936170212766
140273,"public void createControl(Composite parent){
  if (getParameter().getFolderProvider().isNull()) {
    FolderProvider defaultFolder=new FolderProvider();
    defaultFolder.setFolderResource(getStoredFolder());
    getParameter().setFolderProvider(defaultFolder);
  }
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(""String_Node_Str"");
  nameText=new Text(container,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label purposeLab=new Label(container,SWT.NONE);
  purposeLab.setText(""String_Node_Str"");
  purposeText=new Text(container,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label descriptionLab=new Label(container,SWT.NONE);
  descriptionLab.setText(""String_Node_Str"");
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(container,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  Label authorLab=new Label(container,SWT.NONE);
  authorLab.setText(""String_Node_Str"");
  authorText=new Text(container,SWT.BORDER);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label statusLab=new Label(container,SWT.NONE);
  statusLab.setText(""String_Node_Str"");
  statusText=new CCombo(container,SWT.BORDER);
  statusText.setText(DevelopmentStatus.DRAFT.getLiteral());
  statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  statusText.setEditable(false);
  for (  DevelopmentStatus status : DevelopmentStatus.values()) {
    statusText.add(status.getLiteral());
  }
  Label pathLab=new Label(container,SWT.NONE);
  pathLab.setText(""String_Node_Str"");
  Composite pathContainer=new Composite(container,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  button=new Button(pathContainer,SWT.PUSH);
  button.setText(""String_Node_Str"");
  createExtendedControl(container);
  addListeners();
  setControl(container);
}","public void createControl(Composite parent){
  if (getParameter().getFolderProvider() == null || getParameter().getFolderProvider().isNull()) {
    FolderProvider defaultFolder=new FolderProvider();
    defaultFolder.setFolderResource(getStoredFolder());
    getParameter().setFolderProvider(defaultFolder);
  }
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(""String_Node_Str"");
  nameText=new Text(container,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label purposeLab=new Label(container,SWT.NONE);
  purposeLab.setText(""String_Node_Str"");
  purposeText=new Text(container,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label descriptionLab=new Label(container,SWT.NONE);
  descriptionLab.setText(""String_Node_Str"");
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(container,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  Label authorLab=new Label(container,SWT.NONE);
  authorLab.setText(""String_Node_Str"");
  authorText=new Text(container,SWT.BORDER);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label statusLab=new Label(container,SWT.NONE);
  statusLab.setText(""String_Node_Str"");
  statusText=new CCombo(container,SWT.BORDER);
  statusText.setText(DevelopmentStatus.DRAFT.getLiteral());
  statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  statusText.setEditable(false);
  for (  DevelopmentStatus status : DevelopmentStatus.values()) {
    statusText.add(status.getLiteral());
  }
  Label pathLab=new Label(container,SWT.NONE);
  pathLab.setText(""String_Node_Str"");
  Composite pathContainer=new Composite(container,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  button=new Button(pathContainer,SWT.PUSH);
  button.setText(""String_Node_Str"");
  createExtendedControl(container);
  addListeners();
  setControl(container);
}",0.9908946951702295
140274,"@Override protected EObject getSavedReloadObject() throws ReloadCompareException {
  Package selectedPackage=(Package)selectedObj;
  List<TdCatalog> tdCatalogs=DataProviderHelper.getTdCatalogs(this.tempReloadProvider);
  for (  TdCatalog catalog : tdCatalogs) {
    if (selectedPackage.getName().equals(catalog.getName())) {
      return catalog;
    }
  }
  List<TdSchema> tdSchemas=DataProviderHelper.getTdSchema(this.tempReloadProvider);
  for (  TdSchema schema : tdSchemas) {
    if (selectedPackage.getName().equals(schema.getName())) {
      return schema;
    }
  }
  throw new ReloadCompareException(""String_Node_Str"" + selectedPackage.getName());
}","@Override protected EObject getSavedReloadObject() throws ReloadCompareException {
  Package selectedPackage=(Package)selectedObj;
  return findMatchPackage(selectedPackage);
}",0.3860911270983213
140275,"@Override protected EObject getSavedReloadObject() throws ReloadCompareException {
  ColumnSet selectedColumnSet=(ColumnSet)selectedObj;
  Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema((ColumnSet)selectedObj);
  TdCatalog oldCatalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(parentCatalogOrSchema);
  Package toReloadPackage=null;
  if (oldCatalog != null) {
    List<TdCatalog> tdCatalogs=DataProviderHelper.getTdCatalogs(this.tempReloadProvider);
    for (    TdCatalog catalog : tdCatalogs) {
      if (parentCatalogOrSchema.getName().equals(catalog.getName())) {
        toReloadPackage=catalog;
      }
    }
  }
 else {
    List<TdSchema> tdSchemas=DataProviderHelper.getTdSchema(this.tempReloadProvider);
    for (    TdSchema schema : tdSchemas) {
      if (parentCatalogOrSchema.getName().equals(schema.getName())) {
        toReloadPackage=schema;
      }
    }
  }
  if (toReloadPackage == null) {
    throw new ReloadCompareException(""String_Node_Str"" + selectedColumnSet.getName());
  }
  TdTable oldTable=SwitchHelpers.TABLE_SWITCH.doSwitch(selectedColumnSet);
  if (oldTable != null) {
    List<TdTable> tables=PackageHelper.getTables(toReloadPackage);
    for (    TdTable table : tables) {
      if (oldTable.getName().equals(table.getName())) {
        return table;
      }
    }
  }
 else {
    List<TdView> views=PackageHelper.getViews(toReloadPackage);
    for (    TdView view : views) {
      if (selectedColumnSet.getName().equals(view.getName())) {
        return view;
      }
    }
  }
  throw new ReloadCompareException(""String_Node_Str"" + selectedColumnSet.getName());
}","@Override protected EObject getSavedReloadObject() throws ReloadCompareException {
  ColumnSet selectedColumnSet=(ColumnSet)selectedObj;
  Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema((ColumnSet)selectedObj);
  Package toReloadPackage=findMatchPackage(parentCatalogOrSchema);
  TdTable oldTable=SwitchHelpers.TABLE_SWITCH.doSwitch(selectedColumnSet);
  if (oldTable != null) {
    List<TdTable> tables=PackageHelper.getTables(toReloadPackage);
    for (    TdTable table : tables) {
      if (oldTable.getName().equals(table.getName())) {
        return table;
      }
    }
  }
 else {
    List<TdView> views=PackageHelper.getViews(toReloadPackage);
    for (    TdView view : views) {
      if (selectedColumnSet.getName().equals(view.getName())) {
        return view;
      }
    }
  }
  throw new ReloadCompareException(""String_Node_Str"" + selectedColumnSet.getName());
}",0.6738010305192231
140276,"public void run(IProgressMonitor monitor) throws InvocationTargetException {
  IComparisonLevel creatComparisonLevel=ComparisonLevelFactory.creatComparisonLevel(selectedObject);
  try {
    creatComparisonLevel.reloadCurrentLevelElement();
  }
 catch (  ReloadCompareException e) {
    throw new InvocationTargetException(e);
  }
}","public void run(){
  try {
    creatComparisonLevel.reloadCurrentLevelElement();
  }
 catch (  ReloadCompareException e) {
    e.printStackTrace();
  }
}",0.5826446280991735
140277,"/** 
 * Method ""getTopNQuery"".
 * @param query
 * @param n
 * @return the n first row of the given query
 */
public String getTopNQuery(String query,int n){
  if (is(ORACLE)) {
    return ""String_Node_Str"" + query + ""String_Node_Str""+ n;
  }
  if (is(MYSQL)) {
    return query + ""String_Node_Str"" + n;
  }
  if (is(DB2)) {
    return query + ""String_Node_Str"" + n+ ""String_Node_Str"";
  }
  return query;
}","/** 
 * Method ""getTopNQuery"".
 * @param query
 * @param n
 * @return the n first row of the given query
 */
public String getTopNQuery(String query,int n){
  if (is(ORACLE)) {
    return ""String_Node_Str"" + query + ""String_Node_Str""+ n;
  }
  if (is(MYSQL) || is(POSTGRESQL)) {
    return query + ""String_Node_Str"" + n;
  }
  if (is(DB2)) {
    return query + ""String_Node_Str"" + n+ ""String_Node_Str"";
  }
  return query;
}",0.9783132530120482
140278,"/** 
 * DOC scorreia Comment method ""getDateAggregatedCompletedString"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param dataFilterExpression
 * @param dateAggregationType
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private String getDateAggregatedCompletedString(Expression sqlExpression,String colName,String table,DateGrain dateAggregationType){
  int nbExtractedColumns=0;
  String result=""String_Node_Str"";
  String aliases=""String_Node_Str"";
  String alias;
switch (dateAggregationType) {
case DAY:
    alias=getAlias(colName,DateGrain.DAY);
  result=dbms().extractDay(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case WEEK:
alias=getAlias(colName,DateGrain.WEEK);
result=dbms().extractWeek(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case MONTH:
alias=getAlias(colName,DateGrain.MONTH);
result=dbms().extractMonth(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case QUARTER:
alias=getAlias(colName,DateGrain.QUARTER);
result=dbms().extractQuarter(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case YEAR:
alias=getAlias(colName,DateGrain.YEAR);
result=dbms().extractYear(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
break;
case NONE:
result=colName;
nbExtractedColumns++;
break;
default :
break;
}
String sql=replaceVariablesLow(sqlExpression.getBody(),result,table,aliases);
return sql;
}","/** 
 * DOC scorreia Comment method ""getDateAggregatedCompletedString"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param dataFilterExpression
 * @param dateAggregationType
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private String getDateAggregatedCompletedString(Expression sqlExpression,String colName,String table,DateGrain dateAggregationType){
  int nbExtractedColumns=0;
  String result=""String_Node_Str"";
  String aliases=""String_Node_Str"";
  String alias;
switch (dateAggregationType) {
case DAY:
    alias=getAlias(colName,DateGrain.DAY);
  result=dbms().extractDay(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case WEEK:
alias=getAlias(colName,DateGrain.WEEK);
result=dbms().extractWeek(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case MONTH:
alias=getAlias(colName,DateGrain.MONTH);
result=dbms().extractMonth(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case QUARTER:
alias=getAlias(colName,DateGrain.QUARTER);
result=dbms().extractQuarter(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case YEAR:
alias=getAlias(colName,DateGrain.YEAR);
result=dbms().extractYear(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
break;
case NONE:
result=colName;
nbExtractedColumns++;
break;
default :
break;
}
String groupByAliases=dbms().supportAliasesInGroupBy() ? aliases : result;
String sql=replaceVariablesLow(sqlExpression.getBody(),result,table,groupByAliases);
return sql;
}",0.9736842105263158
140279,"private String getAlias(String colName,DateGrain dateAggregationType){
  if (dbms().supportAliasesInGroupBy()) {
    return ""String_Node_Str"" + unquote(colName) + dateAggregationType.getName()+ ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","private String getAlias(String colName,DateGrain dateAggregationType){
  return ""String_Node_Str"" + unquote(colName) + dateAggregationType.getName()+ ""String_Node_Str"";
}",0.7906976744186046
140280,"/** 
 * DOC scorreia Comment method ""getCompletedSingleSelect"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param whereExpression
 * @param range
 * @return
 * @throws ParseException
 */
private String getCompletedSingleSelect(Indicator indicator,String sqlGenericExpression,String colName,String table,List<String> whereExpression,String range) throws ParseException {
  String completedRange=replaceVariables(range,colName,table);
  String rangeColumn=""String_Node_Str"" + completedRange + ""String_Node_Str"";
  String completedSqlString=replaceVariablesLow(sqlGenericExpression,rangeColumn,table,rangeColumn);
  List<String> allWheresForSingleSelect=new ArrayList<String>(whereExpression);
  completedSqlString=addWhereToSqlStringStatement(allWheresForSingleSelect,completedSqlString);
  completedSqlString=replaceCountByZeroCount(completedSqlString,completedRange);
  return completedSqlString;
}","/** 
 * DOC scorreia Comment method ""getCompletedSingleSelect"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param whereExpression
 * @param range
 * @return
 * @throws ParseException
 */
private String getCompletedSingleSelect(Indicator indicator,String sqlGenericExpression,String colName,String table,List<String> whereExpression,String range) throws ParseException {
  String completedRange=replaceVariables(range,colName,table);
  String rangeColumn=""String_Node_Str"" + completedRange + ""String_Node_Str"";
  String rangeColumnInGroupBy=dbms().supportNonIntegerConstantInGroupBy() ? rangeColumn : ""String_Node_Str"";
  String completedSqlString=replaceVariablesLow(sqlGenericExpression,rangeColumn,table,rangeColumnInGroupBy);
  List<String> allWheresForSingleSelect=new ArrayList<String>(whereExpression);
  completedSqlString=addWhereToSqlStringStatement(allWheresForSingleSelect,completedSqlString);
  completedSqlString=replaceCountByZeroCount(completedSqlString,completedRange);
  return completedSqlString;
}",0.9407035175879396
140281,"public static boolean patternRule(IndicatorEnum indicatorType,TdColumn column){
  int javaType=column.getJavaType();
  DataminingType dataminingType=MetadataHelper.getDataminingType(column);
  if (dataminingType == null) {
    dataminingType=MetadataHelper.getDefaultDataminingType(javaType);
  }
switch (indicatorType) {
case CountsIndicatorEnum:
case RowCountIndicatorEnum:
    return true;
case NullCountIndicatorEnum:
  return true;
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
return true;
case BlankCountIndicatorEnum:
case TextIndicatorEnum:
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
if (Java2SqlType.isTextInSQL(javaType)) {
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.UNSTRUCTURED_TEXT) {
  return true;
}
}
break;
case ModeIndicatorEnum:
case FrequencyIndicatorEnum:
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
case MeanIndicatorEnum:
case MedianIndicatorEnum:
case BoxIIndicatorEnum:
case IQRIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
case RangeIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
default :
return false;
}
return false;
}","public static boolean patternRule(IndicatorEnum indicatorType,TdColumn column){
  int javaType=column.getJavaType();
  DataminingType dataminingType=MetadataHelper.getDataminingType(column);
  if (dataminingType == null) {
    dataminingType=MetadataHelper.getDefaultDataminingType(javaType);
  }
switch (indicatorType) {
case CountsIndicatorEnum:
case RowCountIndicatorEnum:
    return true;
case NullCountIndicatorEnum:
  return true;
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
return true;
case BlankCountIndicatorEnum:
case TextIndicatorEnum:
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
if (Java2SqlType.isTextInSQL(javaType)) {
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.UNSTRUCTURED_TEXT) {
  return true;
}
}
break;
case ModeIndicatorEnum:
case FrequencyIndicatorEnum:
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
case MeanIndicatorEnum:
case MedianIndicatorEnum:
case BoxIIndicatorEnum:
case IQRIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
case RangeIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
if (!Java2SqlType.isDateInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
default :
return false;
}
return false;
}",0.985231375123072
140282,"private String extract(DateGrain dateGrain,String colName){
  if (is(MYSQL)) {
    return dateGrain.getName() + surroundWith('(',colName,')');
  }
  if (is(ORACLE)) {
    String toNumberToChar=""String_Node_Str"";
switch (dateGrain.getValue()) {
case DateGrain.DAY_VALUE:
      return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.WEEK_VALUE:
    return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.MONTH_VALUE:
  return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.QUARTER_VALUE:
return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.YEAR_VALUE:
return toNumberToChar + colName + ""String_Node_Str"";
default :
}
}
if (is(MSSQL)) {
return ""String_Node_Str"" + dateGrain.getName() + ""String_Node_Str""+ colName+ ""String_Node_Str"";
}
return ""String_Node_Str"" + dateGrain + from()+ colName+ ""String_Node_Str"";
}","private String extract(DateGrain dateGrain,String colName){
  if (is(MYSQL)) {
    return dateGrain.getName() + surroundWith('(',colName,')');
  }
  if (is(ORACLE)) {
    String toNumberToChar=""String_Node_Str"";
switch (dateGrain.getValue()) {
case DateGrain.DAY_VALUE:
      return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.WEEK_VALUE:
    return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.MONTH_VALUE:
  return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.QUARTER_VALUE:
return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.YEAR_VALUE:
return toNumberToChar + colName + ""String_Node_Str"";
default :
}
}
if (is(MSSQL)) {
return ""String_Node_Str"" + dateGrain.getName() + ""String_Node_Str""+ colName+ ""String_Node_Str"";
}
if (is(POSTGRESQL)) {
return ""String_Node_Str"" + dateGrain + from()+ colName+ ""String_Node_Str"";
}
return ""String_Node_Str"" + dateGrain + from()+ colName+ ""String_Node_Str"";
}",0.90311986863711
140283,"@Override public boolean checkFieldsValue(){
  if (nameText.getText() == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
    return false;
  }
  if (!CheckValueUtils.isPatternValue(nameText.getText())) {
    if (type != null) {
switch (type) {
case SQL_LIKE:
        updateStatus(IStatus.ERROR,SQLERROR_MESSAGE);
default :
      updateStatus(IStatus.ERROR,ERROR_MESSAGE);
  }
}
 else {
  updateStatus(IStatus.ERROR,ERROR_MESSAGE);
}
return false;
}
updateStatus(IStatus.OK,MSG_OK);
return true;
}","@Override public boolean checkFieldsValue(){
  if (nameText.getText() == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
    return false;
  }
  if (!CheckValueUtils.isPatternValue(nameText.getText())) {
    if (type != null) {
switch (type) {
case SQL_LIKE:
        updateStatus(IStatus.ERROR,SQLERROR_MESSAGE);
      break;
default :
    updateStatus(IStatus.ERROR,ERROR_MESSAGE);
}
}
 else {
updateStatus(IStatus.ERROR,ERROR_MESSAGE);
}
return false;
}
updateStatus(IStatus.OK,MSG_OK);
return true;
}",0.9815712900096992
140284,"private void fillDbUrlMap(){
  supportDBUrlMap.put(SupportDBUrlType.MYSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MYSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MSSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MSSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.DB2DEFAULTURL.getDBKey(),SupportDBUrlType.DB2DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.POSTGRESQLEFAULTURL.getDBKey(),SupportDBUrlType.POSTGRESQLEFAULTURL);
}","private void fillDbUrlMap(){
  supportDBUrlMap.put(SupportDBUrlType.MYSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MYSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSIDDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSIDDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEWITHSERVICENAMEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.MSSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MSSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.DB2DEFAULTURL.getDBKey(),SupportDBUrlType.DB2DEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.POSTGRESQLEFAULTURL.getDBKey(),SupportDBUrlType.POSTGRESQLEFAULTURL);
}",0.8803905614320586
140285,"public static boolean patternRule(IndicatorEnum indicatorType,TdColumn column){
  int javaType=column.getJavaType();
  DataminingType dataminingType=MetadataHelper.getDataminingType(column);
  if (dataminingType == null) {
    dataminingType=MetadataHelper.getDefaultDataminingType(javaType);
  }
switch (indicatorType) {
case CountsIndicatorEnum:
case RowCountIndicatorEnum:
    return true;
case NullCountIndicatorEnum:
  return true;
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
return true;
case BlankCountIndicatorEnum:
case TextIndicatorEnum:
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
if (Java2SqlType.isTextInSQL(javaType)) {
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.UNSTRUCTURED_TEXT) {
  return true;
}
}
break;
case ModeIndicatorEnum:
case FrequencyIndicatorEnum:
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
case MeanIndicatorEnum:
case MedianIndicatorEnum:
case BoxIIndicatorEnum:
case IQRIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
case RangeIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType) || Java2SqlType.isDateInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
default :
return false;
}
return false;
}","public static boolean patternRule(IndicatorEnum indicatorType,TdColumn column){
  int javaType=column.getJavaType();
  DataminingType dataminingType=MetadataHelper.getDataminingType(column);
  if (dataminingType == null) {
    dataminingType=MetadataHelper.getDefaultDataminingType(javaType);
  }
switch (indicatorType) {
case CountsIndicatorEnum:
case RowCountIndicatorEnum:
    return true;
case NullCountIndicatorEnum:
  return true;
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
return true;
case BlankCountIndicatorEnum:
case TextIndicatorEnum:
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
if (Java2SqlType.isTextInSQL(javaType)) {
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.UNSTRUCTURED_TEXT) {
  return true;
}
}
break;
case ModeIndicatorEnum:
case FrequencyIndicatorEnum:
if (dataminingType == DataminingType.NOMINAL || dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
case MeanIndicatorEnum:
case MedianIndicatorEnum:
case BoxIIndicatorEnum:
case IQRIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
case RangeIndicatorEnum:
if (Java2SqlType.isNumbericInSQL(javaType)) {
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
}
break;
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
if (dataminingType == DataminingType.INTERVAL) {
return true;
}
break;
default :
return false;
}
return false;
}",0.9875
140286,"/** 
 * Create a new IndicatorUnit according to indicatorEnum and indicator, if the parameter indicator is null, will create a new indicator .
 * @param indicatorEnum
 * @param indicator
 * @return
 */
private IndicatorUnit createPlainIndicatorUnit(IndicatorEnum indicatorEnum,Indicator indicator){
  if (indicator == null) {
    IndicatorsFactory factory=IndicatorsFactory.eINSTANCE;
    indicator=(Indicator)factory.create(indicatorEnum.getIndicatorType());
    int sqlType=this.tdColumn.getJavaType();
    if (indicatorEnum == IndicatorEnum.FrequencyIndicatorEnum && Java2SqlType.isDateInSQL(sqlType)) {
      IndicatorParameters parameters=indicator.getParameters();
      if (parameters == null) {
        parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
        indicator.setParameters(parameters);
      }
      DateParameters dateParameters=parameters.getDateParameters();
      if (dateParameters == null) {
        dateParameters=IndicatorsFactory.eINSTANCE.createDateParameters();
        parameters.setDateParameters(dateParameters);
      }
    }
  }
  IndicatorUnit indicatorUnit=new IndicatorUnit(indicatorEnum,indicator,this);
  this.plainIndicatorUnitMap.put(indicatorEnum,indicatorUnit);
  return indicatorUnit;
}","/** 
 * Create a new IndicatorUnit according to indicatorEnum and indicator, if the parameter indicator is null, will create a new indicator .
 * @param indicatorEnum
 * @param indicator
 * @return
 */
private IndicatorUnit createPlainIndicatorUnit(IndicatorEnum indicatorEnum,Indicator indicator){
  if (indicator == null) {
    IndicatorsFactory factory=IndicatorsFactory.eINSTANCE;
    indicator=(Indicator)factory.create(indicatorEnum.getIndicatorType());
    if (!DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator)) {
      log.error(""String_Node_Str"" + indicator.getName());
    }
    int sqlType=this.tdColumn.getJavaType();
    if (indicatorEnum == IndicatorEnum.FrequencyIndicatorEnum && Java2SqlType.isDateInSQL(sqlType)) {
      IndicatorParameters parameters=indicator.getParameters();
      if (parameters == null) {
        parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
        indicator.setParameters(parameters);
      }
      DateParameters dateParameters=parameters.getDateParameters();
      if (dateParameters == null) {
        dateParameters=IndicatorsFactory.eINSTANCE.createDateParameters();
        parameters.setDateParameters(dateParameters);
      }
    }
  }
  IndicatorUnit indicatorUnit=new IndicatorUnit(indicatorEnum,indicator,this);
  this.plainIndicatorUnitMap.put(indicatorEnum,indicatorUnit);
  return indicatorUnit;
}",0.9437523593808984
140287,"protected void addCheckedListener(){
  getTreeViewer().addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      if (event.getChecked()) {
        getTreeViewer().setSubtreeChecked(event.getElement(),true);
        if (event.getElement() instanceof ColumnSet) {
          handleColumnsChecked((ColumnSet)event.getElement(),true);
        }
      }
 else {
        getTreeViewer().setSubtreeChecked(event.getElement(),false);
        if (event.getElement() instanceof ColumnSet) {
          handleColumnsChecked((ColumnSet)event.getElement(),false);
        }
      }
    }
  }
);
  getTableViewer().addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      if (event.getElement() instanceof TdColumn) {
        handleColumnChecked((TdColumn)event.getElement(),event.getChecked());
      }
    }
  }
);
}","protected void addCheckedListener(){
  getTreeViewer().addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      ColumnSelectionViewer columnViewer=(ColumnSelectionViewer)event.getSource();
      TreePath treePath=new TreePath(new Object[]{event.getElement()});
      columnViewer.setSelection(new TreeSelection(treePath));
      if (event.getChecked()) {
        getTreeViewer().setSubtreeChecked(event.getElement(),true);
        if (event.getElement() instanceof ColumnSet) {
          setOutput(event.getElement());
          handleColumnsChecked((ColumnSet)event.getElement(),true);
        }
      }
 else {
        getTreeViewer().setSubtreeChecked(event.getElement(),false);
        if (event.getElement() instanceof ColumnSet) {
          setOutput(event.getElement());
          handleColumnsChecked((ColumnSet)event.getElement(),false);
        }
      }
    }
  }
);
  getTableViewer().addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      if (event.getElement() instanceof TdColumn) {
        handleColumnChecked((TdColumn)event.getElement(),event.getChecked());
      }
    }
  }
);
}",0.8621484555094514
140288,"/** 
 * DOC scorreia Comment method ""getTableComment"".
 * @param tableName
 * @param tablesSet
 * @return
 * @throws SQLException
 */
private String getTableComment(String tableName,ResultSet tablesSet) throws SQLException {
  String tableComment=tablesSet.getString(GetTable.REMARKS.name());
  if (tableComment == null) {
    String selectRemarkOnTable=dbms.getSelectRemarkOnTable(tableName);
    if (selectRemarkOnTable != null) {
      tableComment=executeGetCommentStatement(selectRemarkOnTable);
    }
  }
  return tableComment;
}","/** 
 * DOC scorreia Comment method ""getTableComment"".
 * @param tableName
 * @param tablesSet
 * @return
 * @throws SQLException
 */
private String getTableComment(String tableName,ResultSet tablesSet) throws SQLException {
  String tableComment=tablesSet.getString(GetTable.REMARKS.name());
  if (StringUtils.isBlank(tableComment)) {
    String selectRemarkOnTable=dbms.getSelectRemarkOnTable(tableName);
    if (selectRemarkOnTable != null) {
      tableComment=executeGetCommentStatement(selectRemarkOnTable);
    }
  }
  return tableComment;
}",0.951061865189289
140289,"/** 
 * DOC scorreia Comment method ""getOrderBy"".
 * @param sqlStatement
 * @return
 */
public String getOrderBy(String sqlStatement){
  ZqlParser zqlParser=getZqlParser();
  zqlParser.initParser(new ByteArrayInputStream(sqlStatement.getBytes()));
  try {
    ZQuery zQuery=(ZQuery)zqlParser.readStatement();
    if (zQuery == null) {
      return null;
    }
    Vector orderBy=zQuery.getOrderBy();
    if (orderBy == null || orderBy.size() != 1) {
      return null;
    }
    return orderBy.get(0).toString();
  }
 catch (  ParseException e) {
    log.error(e,e);
  }
  return null;
}","/** 
 * DOC scorreia Comment method ""getOrderBy"".
 * @param sqlStatement
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public String getOrderBy(String sqlStatement){
  ZqlParser zqlParser=getZqlParser();
  zqlParser.initParser(new ByteArrayInputStream(sqlStatement.getBytes()));
  try {
    ZQuery zQuery=(ZQuery)zqlParser.readStatement();
    if (zQuery == null) {
      return null;
    }
    Vector orderBy=zQuery.getOrderBy();
    if (orderBy == null || orderBy.size() != 1) {
      return null;
    }
    return orderBy.get(0).toString();
  }
 catch (  ParseException e) {
    log.error(e,e);
  }
  return null;
}",0.9694467382328654
140290,"/** 
 * Method ""finalizeQuery"" must be called after parseQuery().
 * @param zQuery
 * @return the final query string
 * @deprecated use this{@link #finalizeQuery(String)} instead
 */
private String finalizeQuery(ZQuery zQuery){
  StringBuffer buf=new StringBuffer();
  buf.append(zQuery.toString());
  if (containsLimitClause) {
    buf.append(""String_Node_Str"" + withoutLimit[1]);
  }
  return buf.toString();
}","/** 
 * Method ""finalizeQuery"" must be called after prepareQuery().
 * @param query the query to finalize
 * @return the final query.
 */
public String finalizeQuery(String query){
  StringBuffer buf=new StringBuffer();
  buf.append(query.toString());
  if (containsLimitClause) {
    buf.append(""String_Node_Str"" + withoutLimit[1]);
  }
  containsLimitClause=false;
  return buf.toString();
}",0.653416149068323
140291,"private void initializeIndicator(Indicator indicator,TdColumn column){
  indicator.setAnalyzedElement(column);
  boolean definitionSet=DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ definitionSet);
  }
  if (indicator instanceof CompositeIndicator) {
    for (    Indicator child : ((CompositeIndicator)indicator).getChildIndicators()) {
      initializeIndicator(child,column);
    }
  }
}","private void initializeIndicator(Indicator indicator,TdColumn column){
  indicator.setAnalyzedElement(column);
  if (indicator.getIndicatorDefinition() == null) {
    DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator);
  }
  if (indicator instanceof CompositeIndicator) {
    for (    Indicator child : ((CompositeIndicator)indicator).getChildIndicators()) {
      initializeIndicator(child,column);
    }
  }
}",0.6973821989528796
140292,"/** 
 * DOC scorreia Comment method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=quote(tdColumn.getName());
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicator.eClass())) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicator.eClass().getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges());
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank()) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
    }
  }
  String table=quote(ColumnHelper.getColumnSetFullName(tdColumn));
  String catalogName=getQuotedCatalogName(tdColumn);
  table=dbms().toQualifiedName(catalogName,null,table);
  String completedSqlString=null;
  if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        String genericSQL=sqlGenericExpression.getBody();
        int beginIndex=genericSQL.indexOf(dbms().orderBy());
        if (beginIndex != -1) {
          int lastIndex=genericSQL.lastIndexOf(dbms().desc());
          String orderByClause=genericSQL.substring(beginIndex,lastIndex);
          completedSqlString=completedSqlString + orderByClause + dbms().desc();
        }
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if ((dateAggregationType != null) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      completedSqlString=replaceVariablesLow(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUniqueCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getDuplicateCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicator.eClass())) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + language + ""String_Node_Str""+ completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=instantiateSqlExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}","/** 
 * DOC scorreia Comment method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=quote(tdColumn.getName());
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName() + ""String_Node_Str"");
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicator.eClass())) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicator.eClass().getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges());
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank()) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
    }
  }
  String table=quote(ColumnHelper.getColumnSetFullName(tdColumn));
  String catalogName=getQuotedCatalogName(tdColumn);
  table=dbms().toQualifiedName(catalogName,null,table);
  String completedSqlString=null;
  if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        String genericSQL=sqlGenericExpression.getBody();
        int beginIndex=genericSQL.indexOf(dbms().orderBy());
        if (beginIndex != -1) {
          int lastIndex=genericSQL.lastIndexOf(dbms().desc());
          String orderByClause=genericSQL.substring(beginIndex,lastIndex);
          completedSqlString=completedSqlString + orderByClause + dbms().desc();
        }
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if ((dateAggregationType != null) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      completedSqlString=replaceVariablesLow(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUniqueCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getDuplicateCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicator.eClass())) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + language + ""String_Node_Str""+ completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=instantiateSqlExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}",0.9985871715173776
140293,"public Object getParent(Object element){
  if (element instanceof EObject) {
    EObject eObj=(EObject)element;
    ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(eObj);
    if (columnSet != null) {
      IFolderNode folderNode=FolderNodeHelper.getFolderNode(EObjectHelper.getParent((ColumnSet)element),columnSet);
      return folderNode;
    }
    Package packageValue=SwitchHelpers.Package_SWITCH.doSwitch(eObj);
    if (packageValue != null) {
      TdDataProvider tdDataProvider=DataProviderHelper.getTdDataProvider(packageValue);
      IFile findCorrespondingFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(tdDataProvider);
      return findCorrespondingFile;
    }
  }
 else   if (element instanceof IFolderNode) {
    return ((IFolderNode)element).getParent();
  }
 else   if (element instanceof IResource) {
    return ((IResource)element).getParent();
  }
  return super.getParent(element);
}","public Object getParent(Object element){
  if (element instanceof EObject) {
    EObject eObj=(EObject)element;
    ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(eObj);
    if (columnSet != null) {
      IFolderNode folderNode=FolderNodeHelper.getFolderNode(EObjectHelper.getParent((ColumnSet)element),columnSet);
      return folderNode;
    }
    Package packageValue=SwitchHelpers.PACKAGE_SWITCH.doSwitch(eObj);
    if (packageValue != null) {
      TdDataProvider tdDataProvider=DataProviderHelper.getTdDataProvider(packageValue);
      IFile findCorrespondingFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(tdDataProvider);
      return findCorrespondingFile;
    }
  }
 else   if (element instanceof IFolderNode) {
    return ((IFolderNode)element).getParent();
  }
 else   if (element instanceof IResource) {
    return ((IResource)element).getParent();
  }
  return super.getParent(element);
}",0.9935553168635876
140294,"public Object getParent(Object element){
  if (element instanceof EObject) {
    EObject eObj=(EObject)element;
    ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(eObj);
    if (columnSet != null) {
      IFolderNode folderNode=FolderNodeHelper.getFolderNode(EObjectHelper.getParent((ColumnSet)element),columnSet);
      return folderNode;
    }
    Package packageValue=SwitchHelpers.PACKAGE_SWITCH.doSwitch(eObj);
    if (packageValue != null) {
      TdDataProvider tdDataProvider=DataProviderHelper.getTdDataProvider(packageValue);
      IFile findCorrespondingFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(tdDataProvider);
      return findCorrespondingFile;
    }
  }
 else   if (element instanceof IFolderNode) {
    return ((IFolderNode)element).getParent();
  }
 else   if (element instanceof IResource) {
    return ((IResource)element).getParent();
  }
  return super.getParent(element);
}","public Object getParent(Object element){
  if (element instanceof EObject) {
    EObject eObj=(EObject)element;
    ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(eObj);
    if (columnSet != null) {
      IFolderNode folderNode=FolderNodeHelper.getFolderNode(EObjectHelper.getParent((ColumnSet)element),columnSet);
      return folderNode;
    }
    Package packageValue=SwitchHelpers.PACKAGE_SWITCH.doSwitch(eObj);
    TdCatalog parentCatalog=CatalogHelper.getParentCatalog(packageValue);
    if (parentCatalog != null) {
      return parentCatalog;
    }
    if (packageValue != null) {
      TdDataProvider tdDataProvider=DataProviderHelper.getTdDataProvider(packageValue);
      IFile findCorrespondingFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(tdDataProvider);
      return findCorrespondingFile;
    }
  }
 else   if (element instanceof IFolderNode) {
    return ((IFolderNode)element).getParent();
  }
 else   if (element instanceof IResource) {
    return ((IResource)element).getParent();
  }
  return super.getParent(element);
}",0.9266100848726908
140295,"private IndicatorUnit createSpecialIndicatorUnit(IndicatorEnum indicatorEnum,Indicator indicator){
  if (indicator == null) {
    IndicatorsFactory factory=IndicatorsFactory.eINSTANCE;
    indicator=(Indicator)factory.create(indicatorEnum.getIndicatorType());
  }
  if (!flatIndicatorEnumList.contains(indicatorEnum)) {
    this.flatIndicatorEnumList.add(indicatorEnum);
  }
  if (this.specialIndicatorUnitList == null) {
    this.specialIndicatorUnitList=new ArrayList<IndicatorUnit>();
  }
  IndicatorUnit indicatorUnit=new IndicatorUnit(indicatorEnum,indicator,this);
  specialIndicatorUnitList.add(indicatorUnit);
  return indicatorUnit;
}","private IndicatorUnit createSpecialIndicatorUnit(IndicatorEnum indicatorEnum,Indicator indicator){
  if (indicator == null) {
    IndicatorsFactory factory=IndicatorsFactory.eINSTANCE;
    indicator=(Indicator)factory.create(indicatorEnum.getIndicatorType());
    if (!DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator)) {
      log.error(""String_Node_Str"" + indicator.getName());
    }
  }
  if (!flatIndicatorEnumList.contains(indicatorEnum)) {
    this.flatIndicatorEnumList.add(indicatorEnum);
  }
  if (this.specialIndicatorUnitList == null) {
    this.specialIndicatorUnitList=new ArrayList<IndicatorUnit>();
  }
  IndicatorUnit indicatorUnit=new IndicatorUnit(indicatorEnum,indicator,this);
  specialIndicatorUnitList.add(indicatorUnit);
  return indicatorUnit;
}",0.8961672473867596
140296,"/** 
 * DOC qzhang Comment method ""createIndicatorUnit"".
 * @param pfile
 * @param columnIndicator
 * @param analysis
 * @return
 */
public static IndicatorUnit createIndicatorUnit(IFile pfile,ColumnIndicator columnIndicator,Analysis analysis){
  Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(pfile);
  RegularExpression expression=(RegularExpression)pattern.getComponents().get(0);
  PatternMatchingIndicator patternMatchingIndicator=PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
  if (ExpressionType.SQL_LIKE.getName().equals(expression.getExpressionType())) {
    patternMatchingIndicator=PatternIndicatorFactory.createSqlPatternMatchingIndicator(pattern);
  }
  IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
  IndicatorUnit addIndicatorUnit=columnIndicator.addSpecialIndicator(type,patternMatchingIndicator);
  DependenciesHandler.getInstance().setUsageDependencyOn(analysis,pattern);
  return addIndicatorUnit;
}","/** 
 * DOC qzhang Comment method ""createIndicatorUnit"".
 * @param pfile
 * @param columnIndicator
 * @param analysis
 * @return
 */
public static IndicatorUnit createIndicatorUnit(IFile pfile,ColumnIndicator columnIndicator,Analysis analysis){
  Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(pfile);
  RegularExpression expression=(RegularExpression)pattern.getComponents().get(0);
  PatternMatchingIndicator patternMatchingIndicator=(ExpressionType.SQL_LIKE.getName().equals(expression.getExpressionType())) ? PatternIndicatorFactory.createSqlPatternMatchingIndicator(pattern) : PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
  if (!DefinitionHandler.getInstance().setDefaultIndicatorDefinition(patternMatchingIndicator)) {
    log.error(""String_Node_Str"" + patternMatchingIndicator.getName());
  }
  IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
  IndicatorUnit addIndicatorUnit=columnIndicator.addSpecialIndicator(type,patternMatchingIndicator);
  DependenciesHandler.getInstance().setUsageDependencyOn(analysis,pattern);
  return addIndicatorUnit;
}",0.8424015009380863
140297,"protected List<Indicator> addIndicator(List<Indicator> predefinedIndicators,IndicatorEnum indicatorEnum,TdColumn column){
  IndicatorsFactory factory=IndicatorsFactory.eINSTANCE;
  if (indicatorEnum.getChildren() != null) {
    for (    IndicatorEnum oneEnum : indicatorEnum.getChildren()) {
      if (ColumnIndicatorRule.patternRule(oneEnum,column)) {
        Indicator indicator=(Indicator)factory.create(oneEnum.getIndicatorType());
        predefinedIndicators.add(indicator);
      }
    }
  }
 else {
    Indicator indicator=(Indicator)factory.create(indicatorEnum.getIndicatorType());
    predefinedIndicators.add(indicator);
  }
  return predefinedIndicators;
}","protected List<Indicator> addIndicator(List<Indicator> predefinedIndicators,IndicatorEnum indicatorEnum,TdColumn column){
  IndicatorsFactory factory=IndicatorsFactory.eINSTANCE;
  if (indicatorEnum.getChildren() != null) {
    for (    IndicatorEnum oneEnum : indicatorEnum.getChildren()) {
      if (ColumnIndicatorRule.patternRule(oneEnum,column)) {
        Indicator indicator=(Indicator)factory.create(oneEnum.getIndicatorType());
        if (!DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator)) {
          log.error(""String_Node_Str"" + indicator.getName());
        }
        predefinedIndicators.add(indicator);
      }
    }
  }
 else {
    Indicator indicator=(Indicator)factory.create(indicatorEnum.getIndicatorType());
    predefinedIndicators.add(indicator);
  }
  return predefinedIndicators;
}",0.8925950633755837
140298,"/** 
 * Method ""getParentCatalog"" returns a Catalog if the element is directly owned by a catalog.
 * @param element (can be null)
 * @return the Catalog or null
 */
public static TdCatalog getParentCatalog(ModelElement element){
  if (element == null) {
    return null;
  }
  return SwitchHelpers.CATALOG_SWITCH.doSwitch(element.getNamespace());
}","/** 
 * Method ""getParentCatalog"" returns a Catalog if the element is directly owned by a catalog.
 * @param element (can be null)
 * @return the Catalog or null
 */
public static TdCatalog getParentCatalog(ModelElement element){
  Namespace namespace=element.getNamespace();
  if (element == null || namespace == null) {
    return null;
  }
  return SwitchHelpers.CATALOG_SWITCH.doSwitch(namespace);
}",0.8696808510638298
140299,"private boolean savePattern(){
  this.pattern.getComponents().clear();
  this.pattern.getComponents().addAll(tempPatternComponents);
  TaggedValueHelper.setValidStatus(true,pattern);
  EList<PatternComponent> components=this.pattern.getComponents();
  List<String> existLanguage=new ArrayList<String>();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    String language=regularExpress.getExpression().getLanguage();
    if ((regularExpress.getExpression().getBody() == null) || (!regularExpress.getExpression().getBody().matches(""String_Node_Str""))) {
      MessageDialog.openWarning(null,""String_Node_Str"",""String_Node_Str"");
      return false;
    }
    if (existLanguage.contains(language)) {
      MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"" + language);
      return false;
    }
 else {
      existLanguage.add(language);
    }
  }
  EMFUtil.saveSingleResource(pattern.eResource());
  return true;
}","private boolean savePattern(){
  if (tempPatternComponents.size() == 0) {
    MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"" + pattern.getName() + ""String_Node_Str"");
    return false;
  }
  this.pattern.getComponents().clear();
  this.pattern.getComponents().addAll(tempPatternComponents);
  TaggedValueHelper.setValidStatus(true,pattern);
  EList<PatternComponent> components=this.pattern.getComponents();
  List<String> existLanguage=new ArrayList<String>();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    String language=regularExpress.getExpression().getLanguage();
    if ((regularExpress.getExpression().getBody() == null) || (!regularExpress.getExpression().getBody().matches(""String_Node_Str""))) {
      MessageDialog.openWarning(null,""String_Node_Str"",""String_Node_Str"");
      return false;
    }
    if (existLanguage.contains(language)) {
      MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"" + language);
      return false;
    }
 else {
      existLanguage.add(language);
    }
  }
  EMFUtil.saveSingleResource(pattern.eResource());
  return true;
}",0.9198542805100182
140300,"public void widgetSelected(SelectionEvent e){
  IIndicatorNode indicatorNode=((IIndicatorNode)e.item.getData(INDICATORITEM));
  if (indicatorNode == null) {
    purposeLabel.setText(PURPOSE + ((TreeItem)e.item).getText());
    descriptionLabel.setText(DESCRIPTION + ((TreeItem)e.item).getText());
    return;
  }
  Indicator indicator=indicatorNode.getIndicatorInstance();
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  purposeLabel.setText(PURPOSE + TaggedValueHelper.getPurpose(indicatorDefinition));
  String description=DESCRIPTION + TaggedValueHelper.getDescription(indicatorDefinition);
  description=splitLongString(description);
  descriptionLabel.setText(description);
}","@Override public void widgetSelected(SelectionEvent e){
  IIndicatorNode indicatorNode=((IIndicatorNode)e.item.getData(INDICATORITEM));
  if (indicatorNode == null) {
    purposeLabel.setText(PURPOSE + ((TreeItem)e.item).getText());
    descriptionLabel.setText(DESCRIPTION + ((TreeItem)e.item).getText());
    return;
  }
  Indicator indicator=indicatorNode.getIndicatorInstance();
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  purposeLabel.setText(PURPOSE + TaggedValueHelper.getPurpose(indicatorDefinition));
  String description=DESCRIPTION + TaggedValueHelper.getDescription(indicatorDefinition);
  description=splitLongString(description);
  descriptionLabel.setText(description);
}",0.99302649930265
140301,"protected Control createDialogArea(Composite parent){
  Composite comp=(Composite)super.createDialogArea(parent);
  Tree tree=new TooltipTree(comp,SWT.BORDER){
    protected String getItemTooltipText(    TreeItem item){
      if (item.getData(INDICATORITEM) == null) {
        return item.getText();
      }
      IndicatorDefinition indicatorDefinition=((IIndicatorNode)item.getData(INDICATORITEM)).getIndicatorInstance().getIndicatorDefinition();
      String description=TaggedValueHelper.getDescription(indicatorDefinition);
      return description.equals(PluginConstant.EMPTY_STRING) ? item.getText() : description;
    }
  }
;
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(tree);
  ((GridData)tree.getLayoutData()).widthHint=650;
  ((GridData)tree.getLayoutData()).heightHint=380;
  createTreeStructure(tree);
  tree.setLinesVisible(true);
  tree.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      IIndicatorNode indicatorNode=((IIndicatorNode)e.item.getData(INDICATORITEM));
      if (indicatorNode == null) {
        purposeLabel.setText(PURPOSE + ((TreeItem)e.item).getText());
        descriptionLabel.setText(DESCRIPTION + ((TreeItem)e.item).getText());
        return;
      }
      Indicator indicator=indicatorNode.getIndicatorInstance();
      IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
      purposeLabel.setText(PURPOSE + TaggedValueHelper.getPurpose(indicatorDefinition));
      String description=DESCRIPTION + TaggedValueHelper.getDescription(indicatorDefinition);
      description=splitLongString(description);
      descriptionLabel.setText(description);
    }
    private String splitLongString(    String longString){
      if (longString.length() > ROW_MAX_LENGTH) {
        char space=' ';
        for (int i=ROW_MAX_LENGTH; i > 0; i--) {
          if (longString.charAt(i) == space) {
            String substring1=longString.substring(0,i);
            String lineSeparator=System.getProperty(""String_Node_Str"",""String_Node_Str"");
            String substring2=longString.substring(i,longString.length());
            substring2=splitLongString(substring2);
            longString=substring1 + lineSeparator + substring2;
            break;
          }
        }
      }
      return longString;
    }
  }
);
  tree.pack();
  purposeLabel=new Label(comp,SWT.NULL);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(purposeLabel);
  descriptionLabel=new Label(comp,SWT.NULL);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(descriptionLabel);
  ((GridData)descriptionLabel.getLayoutData()).heightHint=40;
  comp.layout();
  return comp;
}","protected Control createDialogArea(Composite parent){
  Composite comp=(Composite)super.createDialogArea(parent);
  Tree tree=new TooltipTree(comp,SWT.BORDER){
    protected String getItemTooltipText(    TreeItem item){
      if (item.getData(INDICATORITEM) == null) {
        return item.getText();
      }
      IndicatorDefinition indicatorDefinition=((IIndicatorNode)item.getData(INDICATORITEM)).getIndicatorInstance().getIndicatorDefinition();
      String description=TaggedValueHelper.getDescription(indicatorDefinition);
      return description.equals(PluginConstant.EMPTY_STRING) ? item.getText() : description;
    }
  }
;
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(tree);
  ((GridData)tree.getLayoutData()).widthHint=650;
  ((GridData)tree.getLayoutData()).heightHint=380;
  createTreeStructure(tree);
  tree.setLinesVisible(true);
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      IIndicatorNode indicatorNode=((IIndicatorNode)e.item.getData(INDICATORITEM));
      if (indicatorNode == null) {
        purposeLabel.setText(PURPOSE + ((TreeItem)e.item).getText());
        descriptionLabel.setText(DESCRIPTION + ((TreeItem)e.item).getText());
        return;
      }
      Indicator indicator=indicatorNode.getIndicatorInstance();
      IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
      purposeLabel.setText(PURPOSE + TaggedValueHelper.getPurpose(indicatorDefinition));
      String description=DESCRIPTION + TaggedValueHelper.getDescription(indicatorDefinition);
      description=splitLongString(description);
      descriptionLabel.setText(description);
    }
    private String splitLongString(    String longString){
      if (longString.length() > ROW_MAX_LENGTH) {
        char space=' ';
        for (int i=ROW_MAX_LENGTH; i > 0; i--) {
          if (longString.charAt(i) == space) {
            String substring1=longString.substring(0,i);
            String lineSeparator=System.getProperty(""String_Node_Str"",""String_Node_Str"");
            String substring2=longString.substring(i,longString.length());
            substring2=splitLongString(substring2);
            longString=substring1 + lineSeparator + substring2;
            break;
          }
        }
      }
      return longString;
    }
  }
);
  tree.pack();
  purposeLabel=new Label(comp,SWT.NULL);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(purposeLabel);
  descriptionLabel=new Label(comp,SWT.NULL);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(descriptionLabel);
  ((GridData)descriptionLabel.getLayoutData()).heightHint=40;
  comp.layout();
  return comp;
}",0.9848375451263538
140302,"@Override public void shellActivated(ShellEvent e){
  Point point=e.widget.getDisplay().getCursorLocation();
  IContext context=HelpSystem.getContext(HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_SELECTOR_HELP_ID);
  PlatformUI.getWorkbench().getHelpSystem().displayContext(context,point.x + 15,point.y);
}","@Override public void shellActivated(ShellEvent e){
  dialog.getShell().setFocus();
  IContext context=HelpSystem.getContext(HelpPlugin.INDICATOR_SELECTOR_HELP_ID);
  PlatformUI.getWorkbench().getHelpSystem().displayHelp(context);
}",0.6268656716417911
140303,"public void openIndicatorSelectDialog(Shell shell){
  IndicatorSelectDialog dialog=new IndicatorSelectDialog(shell,""String_Node_Str"",columnIndicators);
  dialog.create();
  dialog.getShell().addShellListener(new ShellAdapter(){
    @Override public void shellActivated(    ShellEvent e){
      Point point=e.widget.getDisplay().getCursorLocation();
      IContext context=HelpSystem.getContext(HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_SELECTOR_HELP_ID);
      PlatformUI.getWorkbench().getHelpSystem().displayContext(context,point.x + 15,point.y);
    }
  }
);
  if (dialog.open() == Window.OK) {
    ColumnIndicator[] result=dialog.getResult();
    for (    ColumnIndicator columnIndicator : result) {
      columnIndicator.storeTempIndicator();
    }
    this.setElements(result);
    return;
  }
}","public void openIndicatorSelectDialog(Shell shell){
  final IndicatorSelectDialog dialog=new IndicatorSelectDialog(shell,""String_Node_Str"",columnIndicators);
  dialog.create();
  dialog.getShell().addShellListener(new ShellAdapter(){
    @Override public void shellActivated(    ShellEvent e){
      dialog.getShell().setFocus();
      IContext context=HelpSystem.getContext(HelpPlugin.INDICATOR_SELECTOR_HELP_ID);
      PlatformUI.getWorkbench().getHelpSystem().displayHelp(context);
    }
  }
);
  if (dialog.open() == Window.OK) {
    ColumnIndicator[] result=dialog.getResult();
    for (    ColumnIndicator columnIndicator : result) {
      columnIndicator.storeTempIndicator();
    }
    this.setElements(result);
    return;
  }
}",0.9077922077922078
140304,"public void showHelp(){
  String href=getFormEnum().getHelpHref();
  if (href != null && href.endsWith(""String_Node_Str"")) {
    Point point=getShell().getDisplay().getCursorLocation();
    IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
    IHelpResource[] relatedTopics=context.getRelatedTopics();
    IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
    helpSystem.displayContext(context,point.x + 15,point.y);
    ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
    if (lastActiveInstance != null) {
      lastActiveInstance.showURL(href);
    }
  }
}","public void showHelp(){
  String href=getFormEnum().getHelpHref();
  ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
  if (lastActiveInstance != null) {
    lastActiveInstance.showURL(href);
  }
}",0.2867052023121387
140305,"private void showHelp(){
  if (activeCount < 2 && href != null && href.endsWith(""String_Node_Str"")) {
    Point point=getShell().getDisplay().getCursorLocation();
    IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
    IHelpResource[] relatedTopics=context.getRelatedTopics();
    IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
    helpSystem.displayContext(context,point.x + 15,point.y);
    activeCount++;
    ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
    if (lastActiveInstance != null) {
      lastActiveInstance.showURL(href);
    }
  }
}","private void showHelp(){
  getShell().setFocus();
  IContext context=HelpSystem.getContext(HelpPlugin.INDICATOR_OPTION_HELP_ID);
  IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
  helpSystem.displayHelp(context);
  ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
  if (lastActiveInstance != null) {
    lastActiveInstance.showURL(href);
  }
}",0.1642512077294686
140306,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayout(new FillLayout());
  tabFolder=new TabFolder(container,SWT.FLAT);
  tabFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Object formObject=e.item.getData();
      if (formObject != null) {
        AbstractIndicatorForm form=(AbstractIndicatorForm)formObject;
        form.showHelp();
      }
    }
  }
);
  FormEnum[] forms=FormEnum.getForms(this.indicatorUnit);
  if (forms != null) {
    setControl(createView(FormFactory.createForm(tabFolder,listener,forms,paramMap)));
  }
  if (getControl() != null) {
    try {
      PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(),HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayout(new FillLayout());
  tabFolder=new TabFolder(container,SWT.FLAT);
  tabFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Object formObject=e.item.getData();
      if (formObject != null) {
        AbstractIndicatorForm form=(AbstractIndicatorForm)formObject;
        form.showHelp();
      }
    }
  }
);
  FormEnum[] forms=FormEnum.getForms(this.indicatorUnit);
  if (forms != null) {
    setControl(createView(FormFactory.createForm(tabFolder,listener,forms,paramMap)));
  }
}",0.8482932996207333
140307,"/** 
 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
 */
public void createControl(Composite parent){
  ((GridData)parent.getLayoutData()).widthHint=520;
  ((GridData)parent.getLayoutData()).heightHint=280;
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  container.setLayout(layout);
  Label subTitleLabel=new Label(container,SWT.NONE);
  subTitleLabel.setText(""String_Node_Str"");
  clufText=new Text(container,SWT.MULTI | SWT.WRAP | SWT.V_SCROLL| SWT.H_SCROLL| SWT.LEFT| SWT.BORDER);
  clufText.setBackground(new Color(null,255,255,255));
  clufText.setEditable(false);
  String license=getLicense();
  clufText.setText(license);
  GridData data=new GridData(GridData.FILL_BOTH);
  clufText.setLayoutData(data);
  setControl(container);
  setPageComplete(true);
}","/** 
 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
 */
public void createControl(Composite parent){
  ((GridData)parent.getLayoutData()).widthHint=520;
  ((GridData)parent.getLayoutData()).heightHint=280;
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  container.setLayout(layout);
  Label subTitleLabel=new Label(container,SWT.NONE);
  subTitleLabel.setText(""String_Node_Str"");
  clufText=new Text(container,SWT.MULTI | SWT.WRAP | SWT.V_SCROLL| SWT.H_SCROLL| SWT.LEFT| SWT.BORDER);
  Color color=new Color(null,255,255,255);
  clufText.setBackground(color);
  color.dispose();
  clufText.setEditable(false);
  String license=getLicense();
  clufText.setText(license);
  GridData data=new GridData(GridData.FILL_BOTH);
  clufText.setLayoutData(data);
  setControl(container);
  setPageComplete(true);
}",0.9513574660633484
140308,"public static IComparisonLevel creatComparisonLevel(Object selectedObject){
  IComparisonLevel comparisonLevel=null;
  if (selectedObject instanceof AbstractDatabaseFolderNode) {
    AbstractDatabaseFolderNode dbFolderNode=(AbstractDatabaseFolderNode)selectedObject;
    EObject theEObject=dbFolderNode.getParent();
    TdCatalog ctatlogSwtich=SwitchHelpers.CATALOG_SWITCH.doSwitch(theEObject);
    if (ctatlogSwtich != null) {
      comparisonLevel=new CatalogSchemaComparisonLevel(ctatlogSwtich);
    }
    ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(theEObject);
    if (columnSet != null) {
      comparisonLevel=new TableViewComparisonLevel(columnSet);
    }
  }
 else   if (selectedObject instanceof IFile) {
    comparisonLevel=new DataProviderComparisonLevel(selectedObject);
  }
 else {
    comparisonLevel=null;
  }
  return comparisonLevel;
}","public static IComparisonLevel creatComparisonLevel(Object selectedObject){
  IComparisonLevel comparisonLevel=null;
  if (selectedObject instanceof AbstractDatabaseFolderNode) {
    AbstractDatabaseFolderNode dbFolderNode=(AbstractDatabaseFolderNode)selectedObject;
    EObject theEObject=dbFolderNode.getParent();
    Package ctatlogSwtich=SwitchHelpers.PACKAGE_SWITCH.doSwitch(theEObject);
    if (ctatlogSwtich != null) {
      comparisonLevel=new CatalogSchemaComparisonLevel(ctatlogSwtich);
    }
    ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(theEObject);
    if (columnSet != null) {
      comparisonLevel=new TableViewComparisonLevel(columnSet);
    }
  }
 else   if (selectedObject instanceof IFile) {
    comparisonLevel=new DataProviderComparisonLevel(selectedObject);
  }
 else {
    comparisonLevel=null;
  }
  return comparisonLevel;
}",0.9873417721518988
140309,"@Override protected void handleRemoveElement(RemoveModelElement removeElement){
  ColumnSet removeColumnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(removeElement.getLeftElement());
  if (removeColumnSet == null) {
    return;
  }
  popRemoveElementConfirm();
  PackageHelper.removeColumnSet(removeColumnSet,(TdCatalog)selectedObj);
}","@Override protected void handleRemoveElement(RemoveModelElement removeElement){
  ColumnSet removeColumnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(removeElement.getLeftElement());
  if (removeColumnSet == null) {
    return;
  }
  popRemoveElementConfirm();
  PackageHelper.removeColumnSet(removeColumnSet,(Package)selectedObj);
}",0.978978978978979
140310,"@Override protected void handleAddElement(AddModelElement addElement){
  EObject rightElement=addElement.getRightElement();
  ColumnSet columnSetSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(rightElement);
  if (columnSetSwitch != null) {
    TdCatalog catalog=(TdCatalog)selectedObj;
    PackageHelper.addColumnSet(columnSetSwitch,catalog);
  }
}","@Override protected void handleAddElement(AddModelElement addElement){
  EObject rightElement=addElement.getRightElement();
  ColumnSet columnSetSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(rightElement);
  if (columnSetSwitch != null) {
    Package catalog=(Package)selectedObj;
    PackageHelper.addColumnSet(columnSetSwitch,catalog);
  }
}",0.9538904899135446
140311,"@Override protected boolean compareWithReloadObject(EObject reloadedObj) throws ReloadCompareException {
  Package catalogSchemaObj=(Package)reloadedObj;
  try {
    TdCatalog catalogObj=SwitchHelpers.CATALOG_SWITCH.doSwitch(catalogSchemaObj);
    if (catalogObj != null) {
      List<TdTable> tables=DqRepositoryViewService.getTables(tempReloadProvider,catalogObj,null,true);
      CatalogHelper.addTables(tables,catalogObj);
      List<TdView> views=DqRepositoryViewService.getViews(tempReloadProvider,catalogObj,null,true);
      CatalogHelper.addViews(views,catalogObj);
    }
 else {
      List<TdTable> tables=DqRepositoryViewService.getTables(tempReloadProvider,(Schema)catalogSchemaObj,null,true);
      SchemaHelper.addTables(tables,(Schema)catalogSchemaObj);
      List<TdView> views=DqRepositoryViewService.getViews(tempReloadProvider,(Schema)catalogSchemaObj,null,true);
      SchemaHelper.addViews(views,(Schema)catalogSchemaObj);
    }
  }
 catch (  TalendException e1) {
    throw new ReloadCompareException(e1);
  }
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(MatchOptions.OPTION_IGNORE_XMI_ID,true);
  MatchModel match=null;
  try {
    match=MatchService.doContentMatch((Package)selectedObj,catalogSchemaObj,options);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return false;
  }
  final DiffModel diff=DiffService.doDiff(match,false);
  EList<DiffElement> ownedElements=diff.getOwnedElements();
  for (  DiffElement de : ownedElements) {
    handleSubDiffElement(de);
  }
  return true;
}","@Override protected boolean compareWithReloadObject(EObject reloadedObj) throws ReloadCompareException {
  Package catalogSchemaObj=(Package)reloadedObj;
  try {
    TdCatalog catalogObj=SwitchHelpers.CATALOG_SWITCH.doSwitch(catalogSchemaObj);
    TdSchema schemaObj=SwitchHelpers.SCHEMA_SWITCH.doSwitch(catalogSchemaObj);
    if (catalogObj != null) {
      List<TdTable> tables=DqRepositoryViewService.getTables(tempReloadProvider,catalogObj,null,true);
      CatalogHelper.addTables(tables,catalogObj);
      List<TdView> views=DqRepositoryViewService.getViews(tempReloadProvider,catalogObj,null,true);
      CatalogHelper.addViews(views,catalogObj);
    }
 else     if (schemaObj != null) {
      List<TdTable> tables=DqRepositoryViewService.getTables(tempReloadProvider,schemaObj,null,true);
      SchemaHelper.addTables(tables,schemaObj);
      List<TdView> views=DqRepositoryViewService.getViews(tempReloadProvider,schemaObj,null,true);
      SchemaHelper.addViews(views,schemaObj);
    }
 else {
      List<TdTable> tables=DqRepositoryViewService.getTables(tempReloadProvider,(Schema)catalogSchemaObj,null,true);
      SchemaHelper.addTables(tables,(Schema)catalogSchemaObj);
      List<TdView> views=DqRepositoryViewService.getViews(tempReloadProvider,(Schema)catalogSchemaObj,null,true);
      SchemaHelper.addViews(views,(Schema)catalogSchemaObj);
    }
  }
 catch (  TalendException e1) {
    throw new ReloadCompareException(e1);
  }
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(MatchOptions.OPTION_IGNORE_XMI_ID,true);
  MatchModel match=null;
  try {
    match=MatchService.doContentMatch((Package)selectedObj,catalogSchemaObj,options);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return false;
  }
  final DiffModel diff=DiffService.doDiff(match,false);
  EList<DiffElement> ownedElements=diff.getOwnedElements();
  for (  DiffElement de : ownedElements) {
    handleSubDiffElement(de);
  }
  return true;
}",0.8826689284704552
140312,"/** 
 * Method ""saveInFiles"". Calling this method without having called this.  {@link #storeInResourceSet(EObject,String)}will do nothing. If objects are dependent on each other, each object must be stored in a resource set first before trying to save them in a file.
 * @return true if CWM objects have been saved in file.
 */
public boolean saveInFiles(){
  return emfUtil.save();
}","/** 
 * Method ""saveInFiles"". Calling this method without having called this.  {@link #storeInResourceSet(EObject,String)}will do nothing. If objects are dependent on each other, each object must be stored in a resource set first before trying to save them in a file.
 * @return true if CWM objects have been saved in file.
 */
boolean saveInFiles(){
  return emfUtil.save();
}",0.990801576872536
140313,"public String toQualifiedName(String catalog,String schema,String table){
  if (is(MSSQL)) {
    schema=""String_Node_Str"";
  }
  if (is(SYBASE_ASE)) {
    schema=""String_Node_Str"";
  }
  StringBuffer qualName=new StringBuffer();
  if (catalog != null && catalog.length() > 0) {
    qualName.append(catalog);
    qualName.append(DOT);
  }
  if (schema != null && schema.length() > 0) {
    qualName.append(schema);
    qualName.append(DOT);
  }
  qualName.append(table);
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",catalog,schema,table,qualName));
  }
  return qualName.toString();
}","public String toQualifiedName(String catalog,String schema,String table){
  if (is(MSSQL)) {
    catalog=""String_Node_Str"";
  }
  if (is(SYBASE_ASE)) {
    catalog=""String_Node_Str"";
  }
  StringBuffer qualName=new StringBuffer();
  if (catalog != null && catalog.length() > 0) {
    qualName.append(catalog);
    qualName.append(DOT);
  }
  if (schema != null && schema.length() > 0) {
    qualName.append(schema);
    qualName.append(DOT);
  }
  qualName.append(table);
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",catalog,schema,table,qualName));
  }
  return qualName.toString();
}",0.9788617886178862
140314,"public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  List<Composite> previewChartList=new ArrayList<Composite>();
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(""String_Node_Str"" + column.getName());
    exComp.setLayout(new GridLayout());
    exComp.setData(columnIndicator);
    addExpandableCompositeListener(exComp);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              for (              ChartWithData chart : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
                if (chart.getImageDescriptor() != null) {
                  ImageHyperlink image=toolkit.createImageHyperlink(comp,SWT.WRAP);
                  image.setImage(chart.getImageDescriptor().createImage());
                  if (chart.getChartNamedType().equals(CompositeIndicator.SUMMARY_STATISTICS)) {
                    ColumnAnalysisResultPage.addShowDefinition(image);
                  }
                }
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}","public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  List<Composite> previewChartList=new ArrayList<Composite>();
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(""String_Node_Str"" + column.getName());
    exComp.setLayout(new GridLayout());
    exComp.setData(columnIndicator);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              for (              ChartWithData chart : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
                if (chart.getImageDescriptor() != null) {
                  ImageHyperlink image=toolkit.createImageHyperlink(comp,SWT.WRAP);
                  image.setImage(chart.getImageDescriptor().createImage());
                  if (chart.getChartNamedType().equals(CompositeIndicator.SUMMARY_STATISTICS)) {
                    ColumnAnalysisResultPage.addShowDefinition(image);
                  }
                }
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        getChartComposite().layout();
        form.reflow(true);
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}",0.9353105523318288
140315,"private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean con=false;
      if (getTheSuitedComposite(e) != null) {
        getTheSuitedComposite(e).setFocus();
      }
      if (e.item instanceof TreeItem) {
        TreeItem item=(TreeItem)e.item;
        if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
          tree.setMenu(null);
          return;
        }
 else         if (item.getData(INDICATOR_UNIT_KEY) != null) {
          IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
          IndicatorEnum type=indicatorUnit.getType();
          con=IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0;
        }
      }
      createTreeMenu(tree,con);
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      if (getTheSuitedComposite(e) != null) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      masterPage.getForm().reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      if (getTheSuitedComposite(e) != null) {
        getTheSuitedComposite(e).setExpanded(true);
      }
      masterPage.getForm().reflow(true);
    }
  }
);
}","private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean con=false;
      if (e.item instanceof TreeItem) {
        TreeItem item=(TreeItem)e.item;
        if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
          tree.setMenu(null);
          return;
        }
 else         if (item.getData(INDICATOR_UNIT_KEY) != null) {
          IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
          IndicatorEnum type=indicatorUnit.getType();
          con=IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0;
        }
      }
      createTreeMenu(tree,con);
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
}",0.7049934296977661
140316,"@Override public void treeExpanded(TreeEvent e){
  if (getTheSuitedComposite(e) != null) {
    getTheSuitedComposite(e).setExpanded(true);
  }
  masterPage.getForm().reflow(true);
}","@Override public void treeExpanded(TreeEvent e){
  ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
  ScrolledForm form=masterPage.getForm();
  Composite comp=masterPage.getChartComposite();
  if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
    theSuitedComposite.setExpanded(true);
  }
  comp.layout();
  form.reflow(true);
}",0.3926605504587156
140317,"@Override public void widgetSelected(SelectionEvent e){
  boolean con=false;
  if (getTheSuitedComposite(e) != null) {
    getTheSuitedComposite(e).setFocus();
  }
  if (e.item instanceof TreeItem) {
    TreeItem item=(TreeItem)e.item;
    if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
      tree.setMenu(null);
      return;
    }
 else     if (item.getData(INDICATOR_UNIT_KEY) != null) {
      IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
      IndicatorEnum type=indicatorUnit.getType();
      con=IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0;
    }
  }
  createTreeMenu(tree,con);
}","@Override public void widgetSelected(SelectionEvent e){
  boolean con=false;
  if (e.item instanceof TreeItem) {
    TreeItem item=(TreeItem)e.item;
    if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
      tree.setMenu(null);
      return;
    }
 else     if (item.getData(INDICATOR_UNIT_KEY) != null) {
      IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
      IndicatorEnum type=indicatorUnit.getType();
      con=IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0;
    }
  }
  createTreeMenu(tree,con);
}",0.9348314606741572
140318,"@Override public void treeCollapsed(TreeEvent e){
  if (getTheSuitedComposite(e) != null) {
    getTheSuitedComposite(e).setExpanded(false);
  }
  masterPage.getForm().reflow(true);
}","@Override public void treeCollapsed(TreeEvent e){
  ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
  ScrolledForm form=masterPage.getForm();
  Composite comp=masterPage.getChartComposite();
  if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
    getTheSuitedComposite(e).setExpanded(false);
  }
  comp.layout();
  form.reflow(true);
}",0.4440433212996389
140319,"private Analysis readFromFile(IFile file){
  this.remove(file);
  Resource fileResource=getFileResource(file);
  Analysis analysis=retireAnalysis(fileResource);
  if (analysis != null) {
    AnalysisEntity entity=new AnalysisEntity(analysis);
    allAnalysisMap.put(file,entity);
  }
  return analysis;
}","private Analysis readFromFile(IFile file){
  this.remove(file);
  Resource fileResource=getFileResource(file);
  Iterator<IFile> fileIterator=allAnalysisMap.keySet().iterator();
  while (fileIterator.hasNext()) {
    IFile key=fileIterator.next();
    AnalysisEntity entity=allAnalysisMap.get(key);
    Resource resourceObj=entity.getAnalysis().eResource();
    if (resourceObj == fileResource) {
      registedResourceMap.remove(key);
      allAnalysisMap.remove(key);
      break;
    }
  }
  Analysis analysis=retireAnalysis(fileResource);
  if (analysis != null) {
    AnalysisEntity entity=new AnalysisEntity(analysis);
    allAnalysisMap.put(file,entity);
  }
  return analysis;
}",0.6141414141414141
140320,"/** 
 * DOC rli Comment method ""readFromFile"".
 * @param file
 * @return
 */
private TypedReturnCode<TdDataProvider> readFromFile(IFile file){
  TypedReturnCode<TdDataProvider> rc;
  this.remove(file);
  rc=new TypedReturnCode<TdDataProvider>();
  Resource resource=getFileResource(file);
  findTdProvider(file,rc,resource);
  return rc;
}","/** 
 * DOC rli Comment method ""readFromFile"".
 * @param file
 * @return
 */
private TypedReturnCode<TdDataProvider> readFromFile(IFile file){
  TypedReturnCode<TdDataProvider> rc;
  this.remove(file);
  rc=new TypedReturnCode<TdDataProvider>();
  Resource resource=getFileResource(file);
  Iterator<IFile> fileIterator=providerMap.keySet().iterator();
  while (fileIterator.hasNext()) {
    IFile key=fileIterator.next();
    TypedReturnCode<TdDataProvider> returnValue=providerMap.get(key);
    Resource resourceObj=returnValue.getObject().eResource();
    if (resourceObj == resource) {
      registedResourceMap.remove(key);
      providerMap.remove(key);
      break;
    }
  }
  retireTdProvider(file,rc,resource);
  return rc;
}",0.6201117318435754
140321,"private TdReport readFromFile(IFile file){
  this.remove(file);
  Resource fileResource=getFileResource(file);
  TdReport report=retireReport(fileResource);
  if (report != null) {
    allRepMap.put(file,report);
  }
  return report;
}","private TdReport readFromFile(IFile file){
  this.remove(file);
  Resource fileResource=getFileResource(file);
  Iterator<IFile> fileIterator=allRepMap.keySet().iterator();
  while (fileIterator.hasNext()) {
    IFile key=fileIterator.next();
    TdReport rePort=allRepMap.get(key);
    Resource resourceObj=rePort.eResource();
    if (resourceObj == fileResource) {
      registedResourceMap.remove(key);
      allRepMap.remove(key);
      break;
    }
  }
  TdReport report=retireReport(fileResource);
  if (report != null) {
    allRepMap.put(file,report);
  }
  return report;
}",0.5752753977968176
140322,"public Object getParent(Object element){
  if (element instanceof EObject) {
    EObject eObj=(EObject)element;
    ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(eObj);
    if (columnSet != null) {
      IFolderNode folderNode=FolderNodeHelper.getFolderNode(EObjectHelper.getParent((ColumnSet)element),columnSet);
      return folderNode;
    }
    URI uri=eObj.eResource().getURI();
    Path path=new Path(uri.path());
    String fileName=path.lastSegment();
    IFolder connectionsFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.METADATA).getFolder(DQStructureManager.DB_CONNECTIONS);
    IFile resourceFile=connectionsFolder.getFile(fileName);
    return resourceFile;
  }
 else   if (element instanceof IFolderNode) {
    return ((IFolderNode)element).getParent();
  }
 else   if (element instanceof IResource) {
    return ((IResource)element).getParent();
  }
  return super.getParent(element);
}","public Object getParent(Object element){
  if (element instanceof EObject) {
    EObject eObj=(EObject)element;
    ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(eObj);
    if (columnSet != null) {
      IFolderNode folderNode=FolderNodeHelper.getFolderNode(EObjectHelper.getParent((ColumnSet)element),columnSet);
      return folderNode;
    }
    Package packageValue=SwitchHelpers.Package_SWITCH.doSwitch(eObj);
    if (packageValue != null) {
      TdDataProvider tdDataProvider=DataProviderHelper.getTdDataProvider(packageValue);
      IFile findCorrespondingFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(tdDataProvider);
      return findCorrespondingFile;
    }
  }
 else   if (element instanceof IFolderNode) {
    return ((IFolderNode)element).getParent();
  }
 else   if (element instanceof IResource) {
    return ((IResource)element).getParent();
  }
  return super.getParent(element);
}",0.5963791267305645
140323,"public Object[] getElements(Object inputElement){
  if (inputElement instanceof ColumnSet) {
    EObject eObj=(EObject)inputElement;
    ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(eObj);
    if (columnSet != null) {
      TdColumn[] columns=EObjectHelper.getColumns(columnSet);
      if (columns.length <= 0) {
        Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
        if (parentCatalogOrSchema == null) {
          return null;
        }
        TdDataProvider provider=DataProviderHelper.getTdDataProvider(parentCatalogOrSchema);
        if (provider == null) {
          return null;
        }
        try {
          List<TdColumn> columnList=DqRepositoryViewService.getColumns(provider,columnSet,null,true);
          columns=columnList.toArray(new TdColumn[columnList.size()]);
          ColumnSetHelper.addColumns(columnSet,columnList);
        }
 catch (        TalendException e) {
          MessageBoxExceptionHandler.process(e);
        }
        EMFSharedResources.getSharedEmfUtil().saveResource(provider.eResource());
      }
      return sort(columns,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
  }
  return null;
}","public Object[] getElements(Object inputElement){
  if (inputElement instanceof ColumnSet) {
    EObject eObj=(EObject)inputElement;
    ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(eObj);
    if (columnSet != null) {
      TdColumn[] columns=EObjectHelper.getColumns(columnSet);
      if (columns.length <= 0) {
        Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
        if (parentCatalogOrSchema == null) {
          return null;
        }
        TdDataProvider provider=DataProviderHelper.getTdDataProvider(parentCatalogOrSchema);
        if (provider == null) {
          return null;
        }
        try {
          List<TdColumn> columnList=DqRepositoryViewService.getColumns(provider,columnSet,null,true);
          columns=columnList.toArray(new TdColumn[columnList.size()]);
          ColumnSetHelper.addColumns(columnSet,columnList);
        }
 catch (        TalendException e) {
          MessageBoxExceptionHandler.process(e);
        }
        PrvResourceFileHelper.getInstance().save(provider);
      }
      return sort(columns,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
  }
  return null;
}",0.9638047138047138
140324,"@Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object target){
  if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
    return Status.CANCEL_STATUS;
  }
  IResource[] resources=null;
  TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
  if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
    resources=getSelectedResources();
  }
 else   if (ResourceTransfer.getInstance().isSupportedType(currentTransfer)) {
    resources=(IResource[])aDropTargetEvent.data;
  }
  if ((target instanceof IFile)) {
    TdReport findReport=RepResourceFileHelper.getInstance().findReport(((IFile)target));
    List<Analysis> analyses=ReportHelper.getAnalyses(findReport);
    Map<String,Analysis> resourcesMap=new HashMap<String,Analysis>();
    for (    Analysis ana : analyses) {
      String uriString=ana.eResource().getURI().toString();
      resourcesMap.put(uriString,ana);
    }
    if (resources != null && resources.length > 0) {
      List<Analysis> anaList=new ArrayList<Analysis>();
      for (      IResource res : resources) {
        Analysis findAnalysis=AnaResourceFileHelper.getInstance().findAnalysis((IFile)res);
        if (findAnalysis != null) {
          String uriKey=findAnalysis.eResource().getURI().toString();
          if (resourcesMap.containsKey(uriKey)) {
            findReport.getComponent().remove(resourcesMap.get(uriKey));
          }
          anaList.add(findAnalysis);
        }
      }
      ReportHelper.addAnalyses(anaList,findReport);
      RepResourceFileHelper.getInstance().save(findReport);
    }
  }
 else   if (resources != null && (target instanceof IFolder)) {
    IFolder folder=(IFolder)target;
    for (    IResource res : resources) {
      if (res.getType() != IResource.FILE) {
        return null;
      }
      String name=res.getName();
      IFile fileRes=(IFile)res;
      IFile movedIFile=folder.getFile(name);
      if (!DQStructureManager.getInstance().getModelElementSuffixs().contains(fileRes.getFileExtension())) {
        try {
          fileRes.move(movedIFile.getFullPath(),false,null);
          fileRes.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
          folder.refreshLocal(IResource.DEPTH_INFINITE,null);
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
        return Status.OK_STATUS;
      }
      IContainer srcParent=fileRes.getParent();
      URI srcUri=URI.createPlatformResourceURI((fileRes).getFullPath().toString(),false);
      Resource resource=EMFSharedResources.getInstance().getResource(srcUri,true);
      if (resource != null) {
        URI desUri=URI.createPlatformResourceURI(folder.getFullPath().toString(),false);
        EMFSharedResources.getInstance().saveToUri(resource,desUri);
      }
      try {
        fileRes.delete(true,null);
        ModelElementFileFactory.getResourceFileMap(fileRes).setResourcesNumberChanged(true);
        srcParent.refreshLocal(IResource.DEPTH_INFINITE,null);
        folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      }
 catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
      movedIFile=folder.getFile(name);
    }
  }
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return null;
}","@Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object target){
  if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
    return Status.CANCEL_STATUS;
  }
  IResource[] resources=null;
  TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
  if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
    resources=getSelectedResources();
  }
 else   if (ResourceTransfer.getInstance().isSupportedType(currentTransfer)) {
    resources=(IResource[])aDropTargetEvent.data;
  }
  if ((target instanceof IFile)) {
    TdReport findReport=RepResourceFileHelper.getInstance().findReport(((IFile)target));
    List<Analysis> analyses=ReportHelper.getAnalyses(findReport);
    Map<String,Analysis> resourcesMap=new HashMap<String,Analysis>();
    for (    Analysis ana : analyses) {
      String uriString=ana.eResource().getURI().toString();
      resourcesMap.put(uriString,ana);
    }
    if (resources != null && resources.length > 0) {
      List<Analysis> anaList=new ArrayList<Analysis>();
      for (      IResource res : resources) {
        Analysis findAnalysis=AnaResourceFileHelper.getInstance().findAnalysis((IFile)res);
        if (findAnalysis != null) {
          String uriKey=findAnalysis.eResource().getURI().toString();
          if (resourcesMap.containsKey(uriKey)) {
            findReport.getComponent().remove(resourcesMap.get(uriKey));
          }
          anaList.add(findAnalysis);
        }
      }
      ReportHelper.addAnalyses(anaList,findReport);
      RepResourceFileHelper.getInstance().save(findReport);
    }
  }
 else   if (resources != null && (target instanceof IFolder)) {
    IFolder folder=(IFolder)target;
    for (    IResource res : resources) {
      if (res.getType() != IResource.FILE) {
        return null;
      }
      if (folder.equals(res.getParent())) {
        continue;
      }
      String name=res.getName();
      IFile fileRes=(IFile)res;
      IFile movedIFile=folder.getFile(name);
      if (!DQStructureManager.getInstance().getModelElementSuffixs().contains(fileRes.getFileExtension())) {
        try {
          fileRes.move(movedIFile.getFullPath(),false,null);
          fileRes.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
          folder.refreshLocal(IResource.DEPTH_INFINITE,null);
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
        return Status.OK_STATUS;
      }
      IContainer srcParent=fileRes.getParent();
      URI srcUri=URI.createPlatformResourceURI((fileRes).getFullPath().toString(),false);
      Resource resource=EMFSharedResources.getInstance().getResource(srcUri,true);
      if (resource != null) {
        URI desUri=URI.createPlatformResourceURI(folder.getFullPath().toString(),false);
        EMFSharedResources.getInstance().saveToUri(resource,desUri);
      }
      try {
        fileRes.delete(true,null);
        ModelElementFileFactory.getResourceFileMap(fileRes).setResourcesNumberChanged(true);
        srcParent.refreshLocal(IResource.DEPTH_INFINITE,null);
        folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      }
 catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
      movedIFile=folder.getFile(name);
    }
  }
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return null;
}",0.9897330595482546
140325,"/** 
 * Method ""initDbmsFunctions"" initialize functions specific to DBMS. This is needed for ZQLParser which does not know all available functions.
 * @param dbms
 * @return the initialized map of functions with their number of parameters.
 */
private Map<String,Integer> initDbmsFunctions(String dbms){
  Map<String,Integer> functions=new HashMap<String,Integer>();
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  if (is(SQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(MYSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    for (    DateGrain grain : DateGrain.values()) {
      functions.put(grain.getName(),1);
    }
  }
  if (is(ORACLE)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
  }
  if (is(POSTGRESQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(MSSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(DB2)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(SYBASE_ASE)) {
  }
  return functions;
}","/** 
 * Method ""initDbmsFunctions"" initialize functions specific to DBMS. This is needed for ZQLParser which does not know all available functions.
 * @param dbms
 * @return the initialized map of functions with their number of parameters.
 */
private Map<String,Integer> initDbmsFunctions(String dbms){
  Map<String,Integer> functions=new HashMap<String,Integer>();
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  if (is(SQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(MYSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    for (    DateGrain grain : DateGrain.values()) {
      functions.put(grain.getName(),1);
    }
  }
  if (is(ORACLE)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
  }
  if (is(POSTGRESQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(MSSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(DB2)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(SYBASE_ASE)) {
  }
  return functions;
}",0.8448753462603878
140326,"private ZqlParser getZqlParser(){
  ZqlParser parser=new ZqlParser();
  for (  String fnct : this.dbmsFunctions.keySet()) {
    parser.addCustomFunction(fnct,this.dbmsFunctions.get(fnct));
  }
  return parser;
}","/** 
 * Method ""getZqlParser"".
 * @return a new parser with predefined functions.
 */
private ZqlParser getZqlParser(){
  ZqlParser parser=new ZqlParser();
  for (  String fnct : this.dbmsFunctions.keySet()) {
    parser.addCustomFunction(fnct,this.dbmsFunctions.get(fnct));
  }
  return parser;
}",0.8307086614173228
140327,"public ReloadDatabaseAction(Object selectedNode){
  super(""String_Node_Str"");
  this.selectedObject=selectedNode;
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.UPDATE_IMAGE));
}","public ReloadDatabaseAction(Object selectedNode,String menuText){
  super(menuText);
  this.selectedObject=selectedNode;
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.UPDATE_IMAGE));
}",0.8987012987012987
140328,"public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  menu.add(new ReloadDatabaseAction(obj));
}","public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  String menuText=RELOADDATABASE_MENUTEXT;
  if (obj instanceof IFolderNode) {
    IFolderNode folderNode=(IFolderNode)obj;
switch (folderNode.getFolderNodeType()) {
case IFolderNode.TABLEFOLDER_NODE_TYPE:
      menuText=RELOADTABLES_MENUTEXT;
    break;
case IFolderNode.VIEWFOLDER_NODE_TYPE:
  menuText=RELOADVIEWS_MENUTEXT;
break;
case IFolderNode.COLUMNFOLDER_NODE_TYPE:
menuText=RELOADCOLUMNS_MENUTEXT;
break;
default :
}
}
menu.add(new ReloadDatabaseAction(obj,menuText));
}",0.4158163265306122
140329,"public String getPerMatch(){
  Double match=Double.parseDouble(getNumMatch());
  return match * 100 / getSum() + ""String_Node_Str"";
}","public String getPerMatch(){
  Double match=Double.parseDouble(getNumMatch());
  return TextFormatFactory.createStandardPercent(match / getSum());
}",0.7615658362989324
140330,"public String getPerNoMatch(){
  Double nomatch=Double.parseDouble(getNumNoMatch());
  return nomatch * 100 / getSum() + ""String_Node_Str"";
}","public String getPerNoMatch(){
  Double nomatch=Double.parseDouble(getNumNoMatch());
  return TextFormatFactory.createStandardPercent(nomatch / getSum());
}",0.7744107744107744
140331,"public void createContent(Composite parent){
  parent.setLayout(new GridLayout(3,true));
  dataFilterText=new Text(parent,SWT.BORDER | SWT.MULTI);
  dataFilterText.setText(stringDataFilter == null ? PluginConstant.EMPTY_STRING : stringDataFilter);
  GridDataFactory.fillDefaults().span(2,3).align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(dataFilterText);
  ((GridData)dataFilterText.getLayoutData()).heightHint=150;
  dataFilterText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      propertyChangeSupport.firePropertyChange(PluginConstant.DATAFILTER_PROPERTY,null,dataFilterText.getText());
    }
  }
);
  Composite buttonsComp=new Composite(parent,SWT.None);
  GridDataFactory.fillDefaults().span(1,1).applyTo(buttonsComp);
  buttonsComp.setLayout(new GridLayout(1,true));
  buttonsComp.setVisible(false);
  Button button=new Button(buttonsComp,SWT.None);
  button.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().span(1,1).align(SWT.FILL,SWT.TOP).applyTo(button);
}","public void createContent(Composite parent){
  parent.setLayout(new GridLayout(3,true));
  dataFilterText=new Text(parent,SWT.BORDER | SWT.MULTI);
  dataFilterText.setToolTipText(""String_Node_Str"" + ""String_Node_Str"");
  dataFilterText.setText(stringDataFilter == null ? PluginConstant.EMPTY_STRING : stringDataFilter);
  GridDataFactory.fillDefaults().span(2,3).align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(dataFilterText);
  ((GridData)dataFilterText.getLayoutData()).heightHint=150;
  dataFilterText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      propertyChangeSupport.firePropertyChange(PluginConstant.DATAFILTER_PROPERTY,null,dataFilterText.getText());
    }
  }
);
  Composite buttonsComp=new Composite(parent,SWT.None);
  GridDataFactory.fillDefaults().span(1,1).applyTo(buttonsComp);
  buttonsComp.setLayout(new GridLayout(1,true));
  buttonsComp.setVisible(false);
  Button button=new Button(buttonsComp,SWT.None);
  button.setText(""String_Node_Str"");
  GridDataFactory.fillDefaults().span(1,1).align(SWT.FILL,SWT.TOP).applyTo(button);
}",0.966728280961183
140332,"/** 
 * Method ""getRealValue"" converts object into double.
 * @param javaType
 * @param object
 * @return
 */
private Double getRealValue(int javaType,String object){
  if (Java2SqlType.isDateInSQL(javaType)) {
    Date date=null;
switch (javaType) {
case Types.TIMESTAMP:
      date=java.sql.Timestamp.valueOf(object);
    break;
case Types.DATE:
  date=java.sql.Date.valueOf(object);
break;
case Types.TIME:
date=java.sql.Time.valueOf(object);
break;
default :
break;
}
return date != null ? Double.valueOf(date.getTime()) : Double.NaN;
}
return Double.valueOf(object);
}","@Override public Double getRealValue(){
  return median;
}",0.1489698890649762
140333,"@Override protected void addFieldsListeners(){
  nullBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      parameter.setUseNull(nullBtn.getSelection());
    }
  }
);
  blankBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      parameter.setUseBlank(blankBtn.getSelection());
    }
  }
);
}","@Override protected void addFieldsListeners(){
  nullBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      updateStatus(IStatus.OK,MSG_OK);
      parameter.setUseNull(nullBtn.getSelection());
    }
  }
);
  blankBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      updateStatus(IStatus.OK,MSG_OK);
      parameter.setUseBlank(blankBtn.getSelection());
    }
  }
);
}",0.9148471615720524
140334,"@Override public void widgetSelected(SelectionEvent e){
  parameter.setUseBlank(blankBtn.getSelection());
}","@Override public void widgetSelected(SelectionEvent e){
  updateStatus(IStatus.OK,MSG_OK);
  parameter.setUseBlank(blankBtn.getSelection());
}",0.8594377510040161
140335,"/** 
 * Method ""initDbmsFunctions"" initialize functions specific to DBMS. This is needed for ZQLParser which does not know all available functions.
 * @param dbms
 * @return the initialized map of functions with their number of parameters.
 */
private Map<String,Integer> initDbmsFunctions(String dbms){
  Map<String,Integer> functions=new HashMap<String,Integer>();
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  if (is(SQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(MYSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    for (    DateGrain grain : DateGrain.values()) {
      functions.put(grain.getName(),1);
    }
  }
  if (is(ORACLE)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
  }
  if (is(POSTGRESQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(MSSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(DB2)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(SYBASE_ASE)) {
  }
  return functions;
}","/** 
 * Method ""initDbmsFunctions"" initialize functions specific to DBMS. This is needed for ZQLParser which does not know all available functions.
 * @param dbms
 * @return the initialized map of functions with their number of parameters.
 */
private Map<String,Integer> initDbmsFunctions(String dbms){
  Map<String,Integer> functions=new HashMap<String,Integer>();
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  if (is(SQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(MYSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    for (    DateGrain grain : DateGrain.values()) {
      functions.put(grain.getName(),1);
    }
  }
  if (is(ORACLE)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",3);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",3);
  }
  if (is(POSTGRESQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
  }
  if (is(MSSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(DB2)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(SYBASE_ASE)) {
  }
  return functions;
}",0.8257425742574257
140336,"/** 
 * DOC scorreia Comment method ""getDateAggregatedCompletedString"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param dataFilterExpression
 * @param dateAggregationType
 * @return
 */
private String getDateAggregatedCompletedString(Expression sqlExpression,String colName,String table,DateGrain dateAggregationType){
  int nbExtractedColumns=0;
  String result=""String_Node_Str"";
  String aliases=""String_Node_Str"";
  String alias;
switch (dateAggregationType) {
case DAY:
    alias=getAlias(colName,DateGrain.DAY);
  result=dbms().extractDay(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case WEEK:
alias=getAlias(colName,DateGrain.WEEK);
result=dbms().extractWeek(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case MONTH:
alias=getAlias(colName,DateGrain.MONTH);
result=dbms().extractMonth(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case QUARTER:
alias=getAlias(colName,DateGrain.QUARTER);
result=dbms().extractQuarter(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case YEAR:
alias=getAlias(colName,DateGrain.YEAR);
result=dbms().extractYear(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
break;
case NONE:
result=colName;
nbExtractedColumns++;
break;
default :
break;
}
String sql=replaceVariablesLow(sqlExpression.getBody(),result,table,aliases);
return sql;
}","/** 
 * DOC scorreia Comment method ""getDateAggregatedCompletedString"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param dataFilterExpression
 * @param dateAggregationType
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private String getDateAggregatedCompletedString(Expression sqlExpression,String colName,String table,DateGrain dateAggregationType){
  int nbExtractedColumns=0;
  String result=""String_Node_Str"";
  String aliases=""String_Node_Str"";
  String alias;
switch (dateAggregationType) {
case DAY:
    alias=getAlias(colName,DateGrain.DAY);
  result=dbms().extractDay(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case WEEK:
alias=getAlias(colName,DateGrain.WEEK);
result=dbms().extractWeek(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case MONTH:
alias=getAlias(colName,DateGrain.MONTH);
result=dbms().extractMonth(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case QUARTER:
alias=getAlias(colName,DateGrain.QUARTER);
result=dbms().extractQuarter(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case YEAR:
alias=getAlias(colName,DateGrain.YEAR);
result=dbms().extractYear(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
break;
case NONE:
result=colName;
nbExtractedColumns++;
break;
default :
break;
}
String sql=replaceVariablesLow(sqlExpression.getBody(),result,table,aliases);
return sql;
}",0.9879596485519035
140337,"/** 
 * DOC scorreia Comment method ""getCompletedSingleSelect"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param whereExpression
 * @param range
 * @return
 * @throws ParseException
 */
private String getCompletedSingleSelect(Indicator indicator,String sqlGenericExpression,String colName,String table,List<String> whereExpression,String range) throws ParseException {
  String completedRange=replaceVariables(range,colName,table);
  String rangeColumn=""String_Node_Str"" + completedRange + ""String_Node_Str"";
  String completedSqlString=replaceVariablesLow(sqlGenericExpression,rangeColumn,table,rangeColumn);
  List<String> allWheresForSingleSelect=new ArrayList<String>(whereExpression);
  allWheresForSingleSelect.add(completedRange);
  return addWhereToSqlStringStatement(allWheresForSingleSelect,completedSqlString);
}","/** 
 * DOC scorreia Comment method ""getCompletedSingleSelect"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param whereExpression
 * @param range
 * @return
 * @throws ParseException
 */
private String getCompletedSingleSelect(Indicator indicator,String sqlGenericExpression,String colName,String table,List<String> whereExpression,String range) throws ParseException {
  String completedRange=replaceVariables(range,colName,table);
  String rangeColumn=""String_Node_Str"" + completedRange + ""String_Node_Str"";
  String completedSqlString=replaceVariablesLow(sqlGenericExpression,rangeColumn,table,rangeColumn);
  List<String> allWheresForSingleSelect=new ArrayList<String>(whereExpression);
  completedSqlString=addWhereToSqlStringStatement(allWheresForSingleSelect,completedSqlString);
  completedSqlString=replaceCountByZeroCount(completedSqlString,completedRange);
  return completedSqlString;
}",0.8576195773081201
140338,"@Override public void run(){
  if (page == null) {
    AnalysisEditor editor=(AnalysisEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
    if (editor != null) {
      page=(ColumnMasterDetailsPage)editor.getMasterPage();
    }
  }
  if (page.isDirty()) {
    try {
      page.saveAnalysis();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  page.refreshChart(page.getManagedForm().getForm());
}","@Override public void run(){
  if (page == null) {
    AnalysisEditor editor=(AnalysisEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
    if (editor != null) {
      page=(ColumnMasterDetailsPage)editor.getMasterPage();
    }
  }
  if (page.isDirty()) {
    try {
      page.saveAnalysis();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  page.refreshChart();
}",0.96536312849162
140339,"@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(""String_Node_Str"" + analysis.getName() + ""String_Node_Str"",IProgressMonitor.UNKNOWN);
  final ReturnCode executed=AnalysisExecutorSelector.executeAnalysis(finalAnalysis);
  monitor.done();
  AnaResourceFileHelper.getInstance().save(finalAnalysis);
  if (page != null) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        if (page instanceof ColumnMasterDetailsPage) {
          ColumnMasterDetailsPage columnMasterPage=(ColumnMasterDetailsPage)page;
          columnMasterPage.refreshChart(columnMasterPage.getForm());
        }
 else         if (page instanceof ConnectionMasterDetailsPage) {
          ConnectionMasterDetailsPage connDetailsPage=(ConnectionMasterDetailsPage)page;
          connDetailsPage.doSetInput();
        }
      }
    }
);
  }
  if (executed.isOk()) {
    if (log.isInfoEnabled()) {
      int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
      log.info(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    }
    return Status.OK_STATUS;
  }
 else {
    int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
    log.warn(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MessageDialogWithToggle.openError(null,""String_Node_Str"",""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed.getMessage());
      }
    }
);
    return Status.CANCEL_STATUS;
  }
}","@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(""String_Node_Str"" + analysis.getName() + ""String_Node_Str"",IProgressMonitor.UNKNOWN);
  final ReturnCode executed=AnalysisExecutorSelector.executeAnalysis(finalAnalysis);
  monitor.done();
  AnaResourceFileHelper.getInstance().save(finalAnalysis);
  if (page != null) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        if (page instanceof ColumnMasterDetailsPage && page.isActive()) {
          ColumnMasterDetailsPage columnMasterPage=(ColumnMasterDetailsPage)page;
          columnMasterPage.refreshChart();
        }
 else         if (page instanceof ConnectionMasterDetailsPage) {
          ConnectionMasterDetailsPage connDetailsPage=(ConnectionMasterDetailsPage)page;
          connDetailsPage.doSetInput();
        }
      }
    }
);
  }
  if (executed.isOk()) {
    if (log.isInfoEnabled()) {
      int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
      log.info(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    }
    return Status.OK_STATUS;
  }
 else {
    int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
    log.warn(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MessageDialogWithToggle.openError(null,""String_Node_Str"",""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed.getMessage());
      }
    }
);
    return Status.CANCEL_STATUS;
  }
}",0.9878542510121456
140340,"@Override protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  if (isRefreshResultPage && columnResultPage != null && newPageIndex == columnResultPage.getIndex()) {
    ((ColumnAnalysisResultPage)columnResultPage).refresh((ColumnMasterDetailsPage)getMasterPage());
    isRefreshResultPage=false;
  }
}","@Override protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  if (getMasterPage().isDirty()) {
    getMasterPage().doSave(null);
  }
  if (isRefreshResultPage && columnResultPage != null && newPageIndex == columnResultPage.getIndex()) {
    ((ColumnAnalysisResultPage)columnResultPage).refresh((ColumnMasterDetailsPage)getMasterPage());
    isRefreshResultPage=false;
  }
}",0.9001367989056087
140341,"/** 
 * DOC zqin Comment method ""refreshChart"".
 * @param form
 */
public void refreshChart(ScrolledForm form){
  if (chartComposite != null) {
    try {
      for (      Control control : chartComposite.getChildren()) {
        control.dispose();
      }
      createPreviewCharts(form,chartComposite,true);
      chartComposite.layout();
      form.reflow(true);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}","/** 
 * DOC zqin Comment method ""refreshChart"".
 * @param form
 */
public void refreshChart(){
  if (chartComposite != null) {
    try {
      for (      Control control : chartComposite.getChildren()) {
        control.dispose();
      }
      createPreviewCharts(form,chartComposite,true);
      chartComposite.layout();
      getForm().reflow(true);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}",0.9652777777777778
140342,"/** 
 * Method ""setReportType"".
 * @param report the report object to update
 * @param reportType the report type to set
 * @param jrxmlFullPath the full path to the jxrxml file (can be null when the type of report is different from theUSER_DEFINED)
 * @return true if everything is set correctly, false otherwise.
 */
public static boolean setReportType(TdReport report,ReportType reportType,String jrxmlFullPath){
  boolean ok=true;
switch (reportType) {
case MAIN:
case EVOLUTION:
    report.setInputJrxml(reportType.getJrxmlFilename());
  report.setReportType(reportType.getLabel());
break;
case USER_MADE:
report.setReportType(reportType.getLabel());
report.setInputJrxml(jrxmlFullPath);
if (StringUtils.isBlank(jrxmlFullPath)) {
log.error(""String_Node_Str"" + jrxmlFullPath);
ok=false;
}
break;
default :
ok=false;
break;
}
return ok;
}","/** 
 * Method ""setReportType"".
 * @param report the report object to update
 * @param reportType the report type to set
 * @param jrxmlFullPath the full path to the jxrxml file (can be null when the type of report is different from theUSER_DEFINED)
 * @return true if everything is set correctly, false otherwise.
 */
public static boolean setReportType(TdReport report,ReportType reportType,String jrxmlFullPath){
  boolean ok=true;
switch (reportType) {
case MAIN:
case EVOLUTION:
    report.setInputJrxml(reportType.getJrxmlFilename());
  report.setReportType(reportType.getLabel());
break;
case USER_MADE:
report.setReportType(reportType.getLabel());
report.setInputJrxml(jrxmlFullPath);
if (StringUtils.isBlank(jrxmlFullPath)) {
ok=false;
}
break;
default :
ok=false;
break;
}
return ok;
}",0.9718826405867972
140343,"@Override public boolean storeSqlResults(List<Object[]> objects){
  int nbColumns=2;
  if (hasDateGrainParameter()) {
    DateGrain dategrain=getParameters().getDateParameters().getDateAggregationType();
switch (dategrain) {
case DAY:
      nbColumns++;
case WEEK:
    nbColumns++;
case MONTH:
  nbColumns++;
case QUARTER:
nbColumns++;
case YEAR:
break;
default :
break;
}
}
if (objects.isEmpty()) {
log.error(""String_Node_Str"");
return false;
}
if (!checkResults(objects,nbColumns)) {
return false;
}
HashMap<Object,Long> mapVal2Freq=new HashMap<Object,Long>();
boolean debug=log.isDebugEnabled();
StringBuffer matrix=debug ? new StringBuffer() : null;
for (Object[] value2freq : objects) {
if (value2freq.length != nbColumns) {
log.error(""String_Node_Str"");
return false;
}
Object value=getValueFields(value2freq);
Long freq=Long.valueOf(String.valueOf(value2freq[nbColumns - 1]));
mapVal2Freq.put(value,freq);
if (debug) {
matrix.append(""String_Node_Str"").append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(""String_Node_Str"").append(freq);
}
}
if (debug) {
log.debug(matrix);
}
this.setValueToFreq(mapVal2Freq);
return true;
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean storeSqlResults(List<Object[]> objects){
  int nbColumns=2;
  if (hasDateGrainParameter()) {
    DateGrain dategrain=getParameters().getDateParameters().getDateAggregationType();
switch (dategrain) {
case DAY:
      nbColumns++;
case WEEK:
    nbColumns++;
case MONTH:
  nbColumns++;
case QUARTER:
nbColumns++;
case YEAR:
break;
default :
break;
}
}
if (objects.isEmpty()) {
if (log.isInfoEnabled()) {
log.info(""String_Node_Str"" + ""String_Node_Str"");
}
this.setValueToFreq(new HashMap<Object,Long>());
return true;
}
if (!checkResults(objects,nbColumns)) {
return false;
}
HashMap<Object,Long> mapVal2Freq=new HashMap<Object,Long>();
boolean debug=log.isDebugEnabled();
StringBuffer matrix=debug ? new StringBuffer() : null;
for (Object[] value2freq : objects) {
if (value2freq.length != nbColumns) {
log.error(""String_Node_Str"");
return false;
}
Object value=getValueFields(value2freq);
Long freq=Long.valueOf(String.valueOf(value2freq[nbColumns - 1]));
mapVal2Freq.put(value,freq);
if (debug) {
matrix.append(""String_Node_Str"").append(""String_Node_Str"").append(value).append(""String_Node_Str"").append(""String_Node_Str"").append(freq);
}
}
if (debug) {
log.debug(matrix);
}
this.setValueToFreq(mapVal2Freq);
return true;
}",0.9264887063655032
140344,"public static AbstractIndicatorForm[] createForm(Composite parent,ICheckListener listener,FormEnum[] formTypes,Map<FormEnum,AbstractIndicatorParameter> paramMap){
  List<AbstractIndicatorForm> list=new ArrayList<AbstractIndicatorForm>();
  AbstractIndicatorForm form=null;
  AbstractIndicatorParameter parameter=null;
  for (  FormEnum oneType : formTypes) {
switch (oneType) {
case BinsDesignerForm:
      parameter=paramMap.get(FormEnum.BinsDesignerForm);
    if (parameter == null) {
      parameter=new BinsDesignerParameter();
    }
  form=new BinsDesignerForm(parent,SWT.NONE,parameter);
form.setListener(listener);
list.add(form);
break;
case TextLengthForm:
parameter=paramMap.get(FormEnum.TextLengthForm);
if (parameter == null) {
parameter=new TextLengthParameter();
}
form=new TextLengthForm(parent,SWT.NONE,parameter);
form.setListener(listener);
list.add(form);
break;
case TextParametersForm:
parameter=paramMap.get(FormEnum.TextParametersForm);
if (parameter == null) {
parameter=new TextParameter();
}
form=new TextParametersForm(parent,SWT.NONE,parameter);
form.setListener(listener);
list.add(form);
break;
case DataThresholdsForm:
parameter=paramMap.get(FormEnum.DataThresholdsForm);
if (parameter == null) {
parameter=new DataThresholdsParameter();
}
form=new DataThresholdsForm(parent,SWT.NONE,parameter);
form.setListener(listener);
list.add(form);
break;
case TimeSlicesForm:
parameter=paramMap.get(FormEnum.TimeSlicesForm);
if (parameter == null) {
parameter=new TimeSlicesParameter();
}
form=new TimeSlicesForm(parent,SWT.NONE,parameter);
form.setListener(listener);
list.add(form);
break;
case FreqBinsDesignerForm:
parameter=paramMap.get(FormEnum.BinsDesignerForm);
if (parameter == null) {
parameter=new BinsDesignerParameter();
}
form=new FreqBinsDesignerForm(parent,SWT.NONE,parameter);
form.setListener(listener);
list.add(form);
break;
case FreqTextParametersForm:
parameter=paramMap.get(FormEnum.TextParametersForm);
if (parameter == null) {
parameter=new TextParameter();
}
form=new FreqTextParametersForm(parent,SWT.NONE,parameter);
form.setListener(listener);
list.add(form);
break;
case FreqTimeSliceForm:
parameter=paramMap.get(FormEnum.TimeSlicesForm);
if (parameter == null) {
parameter=new TimeSlicesParameter();
}
form=new FreqTimeSliceForm(parent,SWT.NONE,parameter);
form.setListener(listener);
list.add(form);
break;
case IndicatorThresholdsForm:
parameter=paramMap.get(FormEnum.IndicatorThresholdsForm);
if (parameter == null) {
parameter=new IndicatorThresholdsParameter();
}
form=new IndicatorThresholdsForm(parent,SWT.NONE,parameter);
form.setListener(listener);
list.add(form);
break;
case NumbericNominalForm:
parameter=paramMap.get(FormEnum.NumbericNominalForm);
if (parameter == null) {
parameter=new NumbericNominalParameter();
}
form=new NumbericNominalForm(parent,SWT.NONE,parameter);
form.setListener(listener);
list.add(form);
break;
case ExpectedValueForm:
parameter=paramMap.get(FormEnum.ExpectedValueForm);
if (parameter == null) {
parameter=new ExpectedValueParameter();
}
form=new ExpectedValueForm(parent,SWT.NONE,parameter);
form.setListener(listener);
list.add(form);
break;
default :
}
}
return list.toArray(new AbstractIndicatorForm[list.size()]);
}","public static AbstractIndicatorForm[] createForm(Composite parent,ICheckListener listener,FormEnum[] formTypes,Map<FormEnum,AbstractIndicatorParameter> paramMap){
  List<AbstractIndicatorForm> list=new ArrayList<AbstractIndicatorForm>();
  AbstractIndicatorForm form=null;
  AbstractIndicatorParameter parameter=null;
  for (  FormEnum oneType : formTypes) {
switch (oneType) {
case BinsDesignerForm:
      parameter=paramMap.get(FormEnum.BinsDesignerForm);
    if (parameter == null) {
      parameter=new BinsDesignerParameter();
    }
  form=new BinsDesignerForm(parent,SWT.NONE,parameter);
break;
case TextLengthForm:
parameter=paramMap.get(FormEnum.TextLengthForm);
if (parameter == null) {
parameter=new TextLengthParameter();
}
form=new TextLengthForm(parent,SWT.NONE,parameter);
break;
case TextParametersForm:
parameter=paramMap.get(FormEnum.TextParametersForm);
if (parameter == null) {
parameter=new TextParameter();
}
form=new TextParametersForm(parent,SWT.NONE,parameter);
break;
case DataThresholdsForm:
parameter=paramMap.get(FormEnum.DataThresholdsForm);
if (parameter == null) {
parameter=new DataThresholdsParameter();
}
form=new DataThresholdsForm(parent,SWT.NONE,parameter);
break;
case TimeSlicesForm:
parameter=paramMap.get(FormEnum.TimeSlicesForm);
if (parameter == null) {
parameter=new TimeSlicesParameter();
}
form=new TimeSlicesForm(parent,SWT.NONE,parameter);
break;
case FreqBinsDesignerForm:
parameter=paramMap.get(FormEnum.BinsDesignerForm);
if (parameter == null) {
parameter=new BinsDesignerParameter();
}
form=new FreqBinsDesignerForm(parent,SWT.NONE,parameter);
break;
case FreqTextParametersForm:
parameter=paramMap.get(FormEnum.TextParametersForm);
if (parameter == null) {
parameter=new TextParameter();
}
form=new FreqTextParametersForm(parent,SWT.NONE,parameter);
break;
case FreqTimeSliceForm:
parameter=paramMap.get(FormEnum.TimeSlicesForm);
if (parameter == null) {
parameter=new TimeSlicesParameter();
}
form=new FreqTimeSliceForm(parent,SWT.NONE,parameter);
break;
case IndicatorThresholdsForm:
parameter=paramMap.get(FormEnum.IndicatorThresholdsForm);
if (parameter == null) {
parameter=new IndicatorThresholdsParameter();
}
form=new IndicatorThresholdsForm(parent,SWT.NONE,parameter);
break;
case NumbericNominalForm:
parameter=paramMap.get(FormEnum.NumbericNominalForm);
if (parameter == null) {
parameter=new NumbericNominalParameter();
}
form=new NumbericNominalForm(parent,SWT.NONE,parameter);
break;
case ExpectedValueForm:
parameter=paramMap.get(FormEnum.ExpectedValueForm);
if (parameter == null) {
parameter=new ExpectedValueParameter();
}
form=new ExpectedValueForm(parent,SWT.NONE,parameter);
break;
default :
}
form.setListener(listener);
list.add(form);
}
return list.toArray(new AbstractIndicatorForm[list.size()]);
}",0.9202535869202536
140345,"private void initWizard(){
  if (!AbstractIndicatorForm.isParametersEmpty()) {
    AbstractIndicatorForm.emptyParameterList();
  }
  IndicatorParameters indicatorParam=indicator.getParameters();
  if (indicatorParam != null) {
    NumbericNominalParameter numbericNominalParameter=new NumbericNominalParameter();
    numbericNominalParameter.setNumberOfShown(indicatorParam.getTopN());
    paramMap.put(FormEnum.NumbericNominalForm,numbericNominalParameter);
    if (indicatorParam.getTextParameter() != null) {
      TextParameter textParam=new TextParameter();
      textParam.setIngoreCase(indicatorParam.getTextParameter().isIgnoreCase());
      textParam.setNumOfShown(indicatorParam.getTopN());
      TextLengthParameter textLengthParam=new TextLengthParameter();
      textLengthParam.setUseBlank(indicatorParam.getTextParameter().isUseBlank());
      textLengthParam.setUseNull(indicatorParam.getTextParameter().isUseNulls());
      paramMap.put(FormEnum.TextParametersForm,textParam);
      paramMap.put(FormEnum.TextLengthForm,textLengthParam);
    }
    if (IndicatorHelper.getDataThreshold(indicator) != null) {
      DataThresholdsParameter dataParam=new DataThresholdsParameter();
      dataParam.setMinThreshold(IndicatorHelper.getDataThreshold(indicator)[0]);
      dataParam.setMaxThreshold(IndicatorHelper.getDataThreshold(indicator)[1]);
      paramMap.put(FormEnum.DataThresholdsForm,dataParam);
    }
    if (IndicatorHelper.getIndicatorThreshold(indicator) != null) {
      IndicatorThresholdsParameter indicatorThresholdsParam=new IndicatorThresholdsParameter();
      indicatorThresholdsParam.setMinThreshold(IndicatorHelper.getIndicatorThreshold(indicator)[0]);
      indicatorThresholdsParam.setMaxThreshold(IndicatorHelper.getIndicatorThreshold(indicator)[1]);
      paramMap.put(FormEnum.IndicatorThresholdsForm,indicatorThresholdsParam);
    }
    if (IndicatorHelper.getExpectedValue(indicator) != null) {
      ExpectedValueParameter expectedParam=new ExpectedValueParameter();
      expectedParam.setExpectedValue(IndicatorHelper.getExpectedValue(indicator));
      paramMap.put(FormEnum.ExpectedValueForm,expectedParam);
    }
    Domain domain=indicatorParam.getBins();
    if (domain != null) {
      BinsDesignerParameter binsParam=new BinsDesignerParameter();
      binsParam.setDomain(domain);
      binsParam.setMaxValue(DomainHelper.getMaxBinValue(domain));
      binsParam.setMinValue(DomainHelper.getMinBinValue(domain));
      binsParam.setNumOfBins(DomainHelper.getNumberOfBins(domain));
      binsParam.setNumOfShown(indicatorParam.getTopN());
      paramMap.put(FormEnum.BinsDesignerForm,binsParam);
    }
    if (indicatorParam.getDateParameters() != null) {
      TimeSlicesParameter timeParam=new TimeSlicesParameter();
      timeParam.setDataUnit(indicatorParam.getDateParameters().getDateAggregationType().getLiteral());
      timeParam.setNumOfShown(indicatorParam.getTopN());
      paramMap.put(FormEnum.TimeSlicesForm,timeParam);
    }
  }
}","private void initWizard(){
  if (!AbstractIndicatorForm.isParametersEmpty()) {
    AbstractIndicatorForm.emptyParameterList();
  }
  IndicatorParameters indicatorParam=indicator.getParameters();
  if (indicatorParam != null) {
    int topN=indicatorParam.getTopN();
    NumbericNominalParameter numbericNominalParameter=new NumbericNominalParameter();
    numbericNominalParameter.setNumberOfShown(topN);
    BinsDesignerParameter binsParam=new BinsDesignerParameter();
    binsParam.setNumOfShown(topN);
    TimeSlicesParameter timeParam=new TimeSlicesParameter();
    timeParam.setNumOfShown(topN);
    paramMap.put(FormEnum.NumbericNominalForm,numbericNominalParameter);
    if (indicatorParam.getTextParameter() != null) {
      TextParameter textParam=new TextParameter();
      textParam.setIngoreCase(indicatorParam.getTextParameter().isIgnoreCase());
      textParam.setNumOfShown(topN);
      TextLengthParameter textLengthParam=new TextLengthParameter();
      textLengthParam.setUseBlank(indicatorParam.getTextParameter().isUseBlank());
      textLengthParam.setUseNull(indicatorParam.getTextParameter().isUseNulls());
      paramMap.put(FormEnum.TextParametersForm,textParam);
      paramMap.put(FormEnum.TextLengthForm,textLengthParam);
    }
    if (IndicatorHelper.getDataThreshold(indicator) != null) {
      DataThresholdsParameter dataParam=new DataThresholdsParameter();
      dataParam.setMinThreshold(IndicatorHelper.getDataThreshold(indicator)[0]);
      dataParam.setMaxThreshold(IndicatorHelper.getDataThreshold(indicator)[1]);
      paramMap.put(FormEnum.DataThresholdsForm,dataParam);
    }
    if (IndicatorHelper.getIndicatorThreshold(indicator) != null) {
      IndicatorThresholdsParameter indicatorThresholdsParam=new IndicatorThresholdsParameter();
      indicatorThresholdsParam.setMinThreshold(IndicatorHelper.getIndicatorThreshold(indicator)[0]);
      indicatorThresholdsParam.setMaxThreshold(IndicatorHelper.getIndicatorThreshold(indicator)[1]);
      paramMap.put(FormEnum.IndicatorThresholdsForm,indicatorThresholdsParam);
    }
    if (IndicatorHelper.getExpectedValue(indicator) != null) {
      ExpectedValueParameter expectedParam=new ExpectedValueParameter();
      expectedParam.setExpectedValue(IndicatorHelper.getExpectedValue(indicator));
      paramMap.put(FormEnum.ExpectedValueForm,expectedParam);
    }
    Domain domain=indicatorParam.getBins();
    if (domain != null) {
      binsParam.setDomain(domain);
      binsParam.setMaxValue(DomainHelper.getMaxBinValue(domain));
      binsParam.setMinValue(DomainHelper.getMinBinValue(domain));
      binsParam.setNumOfBins(DomainHelper.getNumberOfBins(domain));
    }
    paramMap.put(FormEnum.BinsDesignerForm,binsParam);
    if (indicatorParam.getDateParameters() != null) {
      timeParam.setDataUnit(indicatorParam.getDateParameters().getDateAggregationType().getLiteral());
    }
    paramMap.put(FormEnum.TimeSlicesForm,timeParam);
  }
}",0.7764864409634495
140346,"@Override public boolean performFinish(){
  try {
    IndicatorParameters parameters=indicator.getParameters();
    if (parameters == null) {
      isDirty=true;
      parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
      indicator.setParameters(parameters);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    TextParameters textParameters=parameters.getTextParameter();
    for (    AbstractIndicatorParameter formParam : AbstractIndicatorForm.getParameters()) {
      if (!ParamCompareFactory.compare(parameters,formParam)) {
        isDirty=true;
switch (formParam.getFormEnum()) {
case BinsDesignerForm:
          BinsDesignerParameter tempParam=(BinsDesignerParameter)formParam;
        int numOfShown=tempParam.getNumOfShown();
      Domain domain=tempParam.getUserDomian();
    if (domain.getRanges().size() == 0) {
      parameters.setBins(null);
    }
 else {
      parameters.setBins(domain);
    }
  parameters.setTopN(numOfShown);
break;
case TextParametersForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextParameter textParam=(TextParameter)formParam;
textParameters.setIgnoreCase(textParam.isIngoreCase());
parameters.setTopN(textParam.getNumOfShown());
break;
case TextLengthForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextLengthParameter lengthParam=(TextLengthParameter)formParam;
textParameters.setUseBlank(lengthParam.isUseBlank());
textParameters.setUseNulls(lengthParam.isUseNull());
break;
case DataThresholdsForm:
DataThresholdsParameter dataParam=(DataThresholdsParameter)formParam;
String min1=dataParam.getMinThreshold();
String max1=dataParam.getMaxThreshold();
IndicatorHelper.setDataThreshold(indicator,min1,max1);
IndicatorHelper.propagateDataThresholdsInChildren(indicator);
break;
case IndicatorThresholdsForm:
IndicatorThresholdsParameter indiParam=(IndicatorThresholdsParameter)formParam;
String min2=indiParam.getMinThreshold();
String max2=indiParam.getMaxThreshold();
IndicatorHelper.setIndicatorThreshold(parameters,min2,max2);
break;
case TimeSlicesForm:
TimeSlicesParameter timeParam=(TimeSlicesParameter)formParam;
DateGrain dateGrain=DateGrain.get(timeParam.getDataUnit());
dateParameters.setDateAggregationType(dateGrain);
parameters.setTopN(timeParam.getNumOfShown());
break;
case NumbericNominalForm:
NumbericNominalParameter numbParam=(NumbericNominalParameter)formParam;
parameters.setTopN(numbParam.getNumberOfShown());
break;
case ExpectedValueForm:
ExpectedValueParameter expectedParam=(ExpectedValueParameter)formParam;
IndicatorHelper.setIndicatorExpectedValue(parameters,expectedParam.getExpectedValue());
default :
}
}
}
return true;
}
 catch (Exception e) {
e.printStackTrace();
}
return false;
}","@Override public boolean performFinish(){
  try {
    IndicatorParameters parameters=indicator.getParameters();
    if (parameters == null) {
      isDirty=true;
      parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
      indicator.setParameters(parameters);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    TextParameters textParameters=parameters.getTextParameter();
    for (    AbstractIndicatorParameter formParam : AbstractIndicatorForm.getParameters()) {
      if (!ParamCompareFactory.compare(parameters,formParam)) {
        isDirty=true;
switch (formParam.getFormEnum()) {
case BinsDesignerForm:
          BinsDesignerParameter tempParam=(BinsDesignerParameter)formParam;
        int numOfShown=tempParam.getNumOfShown();
      Domain domain=tempParam.getUserDomian();
    if (domain.getRanges().size() == 0) {
      parameters.setBins(null);
    }
 else {
      parameters.setBins(domain);
    }
  parameters.setTopN(numOfShown);
break;
case TextParametersForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextParameter textParam=(TextParameter)formParam;
textParameters.setIgnoreCase(textParam.isIngoreCase());
parameters.setTopN(textParam.getNumOfShown());
break;
case TextLengthForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextLengthParameter lengthParam=(TextLengthParameter)formParam;
textParameters.setUseBlank(lengthParam.isUseBlank());
textParameters.setUseNulls(lengthParam.isUseNull());
break;
case DataThresholdsForm:
DataThresholdsParameter dataParam=(DataThresholdsParameter)formParam;
String min1=dataParam.getMinThreshold();
String max1=dataParam.getMaxThreshold();
if (""String_Node_Str"".equals(min1) && ""String_Node_Str"".equals(max1)) {
parameters.setDataValidDomain(null);
}
 else {
IndicatorHelper.setDataThreshold(indicator,min1,max1);
IndicatorHelper.propagateDataThresholdsInChildren(indicator);
}
break;
case IndicatorThresholdsForm:
IndicatorThresholdsParameter indiParam=(IndicatorThresholdsParameter)formParam;
String min2=indiParam.getMinThreshold();
String max2=indiParam.getMaxThreshold();
if (""String_Node_Str"".equals(min2) && ""String_Node_Str"".equals(max2)) {
parameters.setIndicatorValidDomain(null);
}
 else {
IndicatorHelper.setIndicatorThreshold(parameters,min2,max2);
}
break;
case TimeSlicesForm:
TimeSlicesParameter timeParam=(TimeSlicesParameter)formParam;
DateGrain dateGrain=DateGrain.get(timeParam.getDataUnit());
dateParameters.setDateAggregationType(dateGrain);
parameters.setTopN(timeParam.getNumOfShown());
break;
case NumbericNominalForm:
NumbericNominalParameter numbParam=(NumbericNominalParameter)formParam;
parameters.setTopN(numbParam.getNumberOfShown());
break;
case ExpectedValueForm:
ExpectedValueParameter expectedParam=(ExpectedValueParameter)formParam;
IndicatorHelper.setIndicatorExpectedValue(parameters,expectedParam.getExpectedValue());
default :
}
}
}
return true;
}
 catch (Exception e) {
e.printStackTrace();
}
return false;
}",0.9592341970622216
140347,"public String toQualifiedName(String catalog,String schema,String table){
  if (is(MSSQL)) {
    schema=""String_Node_Str"";
  }
  StringBuffer qualName=new StringBuffer();
  if (catalog != null && catalog.length() > 0) {
    qualName.append(catalog);
    qualName.append(DOT);
  }
  if (schema != null && schema.length() > 0) {
    qualName.append(schema);
    qualName.append(DOT);
  }
  qualName.append(table);
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",catalog,schema,table,qualName));
  }
  return qualName.toString();
}","public String toQualifiedName(String catalog,String schema,String table){
  if (is(MSSQL)) {
    schema=""String_Node_Str"";
  }
  if (is(SYBASE_ASE)) {
    schema=""String_Node_Str"";
  }
  StringBuffer qualName=new StringBuffer();
  if (catalog != null && catalog.length() > 0) {
    qualName.append(catalog);
    qualName.append(DOT);
  }
  if (schema != null && schema.length() > 0) {
    qualName.append(schema);
    qualName.append(DOT);
  }
  qualName.append(table);
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",catalog,schema,table,qualName));
  }
  return qualName.toString();
}",0.9504273504273504
140348,"/** 
 * Method ""initDbmsFunctions"" initialize functions specific to DBMS. This is needed for ZQLParser which does not know all available functions.
 * @param dbms
 * @return the initialized map of functions with their number of parameters.
 */
private Map<String,Integer> initDbmsFunctions(String dbms){
  Map<String,Integer> functions=new HashMap<String,Integer>();
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  if (is(SQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(MYSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    for (    DateGrain grain : DateGrain.values()) {
      functions.put(grain.getName(),1);
    }
  }
  if (is(ORACLE)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
  }
  if (is(POSTGRESQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(MSSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(DB2)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(SYBASE)) {
  }
  return functions;
}","/** 
 * Method ""initDbmsFunctions"" initialize functions specific to DBMS. This is needed for ZQLParser which does not know all available functions.
 * @param dbms
 * @return the initialized map of functions with their number of parameters.
 */
private Map<String,Integer> initDbmsFunctions(String dbms){
  Map<String,Integer> functions=new HashMap<String,Integer>();
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  if (is(SQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(MYSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    for (    DateGrain grain : DateGrain.values()) {
      functions.put(grain.getName(),1);
    }
  }
  if (is(ORACLE)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
  }
  if (is(POSTGRESQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(MSSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(DB2)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",1);
  }
  if (is(SYBASE_ASE)) {
  }
  return functions;
}",0.9986868023637556
140349,"/** 
 * DOC scorreia Comment method ""getPatterns"".
 * @param indicator
 * @return the patterns or null if none has been found
 */
private List<String> getPatterns(Indicator indicator){
  List<String> patternStrings=new ArrayList<String>();
  Domain dataValidDomain=indicator.getParameters().getDataValidDomain();
  if (dataValidDomain == null) {
    return patternStrings;
  }
  EList<Pattern> patterns=dataValidDomain.getPatterns();
  for (  Pattern pattern : patterns) {
    EList<PatternComponent> components=pattern.getComponents();
    for (    PatternComponent patternComponent : components) {
      Expression expression=dbms().getExpression(patternComponent);
      if (expression != null) {
        String body=expression.getBody();
        patternStrings.add(body);
      }
    }
  }
  return patternStrings;
}","/** 
 * DOC scorreia Comment method ""getPatterns"".
 * @param indicator
 * @return the patterns or null if none has been found
 */
private List<String> getPatterns(Indicator indicator){
  List<String> patternStrings=new ArrayList<String>();
  Domain dataValidDomain=indicator.getParameters().getDataValidDomain();
  if (dataValidDomain == null) {
    return patternStrings;
  }
  EList<Pattern> patterns=dataValidDomain.getPatterns();
  for (  Pattern pattern : patterns) {
    String regexp=this.dbmsLanguage.getRegexp(pattern);
    if (regexp != null) {
      patternStrings.add(regexp);
    }
  }
  return patternStrings;
}",0.7238754325259515
140350,"protected String getRowsStatement(String regexpCmp){
  String lang=dbmsLanguage.getDbmsName();
  Expression instantiatedExpression=this.indicator.getInstantiatedExpressions(lang);
  String instantiatedSQL=instantiatedExpression.getBody();
  if (instantiatedSQL == null) {
    log.error(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ analysis.getName());
    return null;
  }
  int b=instantiatedSQL.indexOf(this.dbmsLanguage.from());
  String fromClause=instantiatedSQL.substring(b);
  String where=fromClause.contains(dbmsLanguage.where()) ? dbmsLanguage.and() : dbmsLanguage.where();
  return SELECT + fromClause + where+ regexpCmp;
}","/** 
 * Method ""getRowsStatement"".
 * @param whereClause the WHERE clause of the statement
 * @return the full SELECT statement with the WHERE clause
 */
protected String getRowsStatement(String whereClause){
  String lang=dbmsLanguage.getDbmsName();
  Expression instantiatedExpression=this.indicator.getInstantiatedExpressions(lang);
  String instantiatedSQL=instantiatedExpression.getBody();
  if (instantiatedSQL == null) {
    log.error(""String_Node_Str"" + indicator.getName() + ""String_Node_Str""+ analysis.getName());
    return null;
  }
  int b=instantiatedSQL.indexOf(this.dbmsLanguage.from());
  String fromClause=instantiatedSQL.substring(b);
  String where=fromClause.contains(dbmsLanguage.where()) ? dbmsLanguage.and() : dbmsLanguage.where();
  return SELECT + fromClause + where+ whereClause;
}",0.8189300411522634
140351,"public String getValidRowsStatement() throws TalendException {
  if (this.indicator == null || !(this.indicator instanceof PatternMatchingIndicator)) {
    throw new TalendException(""String_Node_Str"" + analysis.getName());
  }
  String regexPatternString=IndicatorHelper.getRegexPatternString((PatternMatchingIndicator)this.indicator);
  String regexCmp=dbmsLanguage.regexLike(indicator.getAnalyzedElement().getName(),regexPatternString);
  return getRowsStatement(regexCmp);
}","public String getValidRowsStatement() throws TalendException {
  if (this.indicator == null || !(this.indicator instanceof PatternMatchingIndicator)) {
    throw new TalendException(""String_Node_Str"" + analysis.getName());
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString((PatternMatchingIndicator)this.indicator);
  String regexCmp=dbmsLanguage.regexLike(indicator.getAnalyzedElement().getName(),regexPatternString);
  return getRowsStatement(regexCmp);
}",0.9716088328075708
140352,"public String getInvalidRowsStatement(){
  String regexPatternString=IndicatorHelper.getRegexPatternString((PatternMatchingIndicator)this.indicator);
  String regexCmp=dbmsLanguage.regexNotLike(indicator.getAnalyzedElement().getName(),regexPatternString);
  return getRowsStatement(regexCmp);
}","public String getInvalidRowsStatement(){
  String regexPatternString=dbmsLanguage.getRegexPatternString((PatternMatchingIndicator)this.indicator);
  String columnName=indicator.getAnalyzedElement().getName();
  String regexCmp=dbmsLanguage.regexNotLike(columnName,regexPatternString);
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  return getRowsStatement(regexCmp + nullClause);
}",0.5297450424929179
140353,"@Override public void run(){
  DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
  TreeSelection treeSelection=(TreeSelection)findView.getCommonViewer().getSelection();
  TreePath[] paths=treeSelection.getPaths();
  TdReport parentReport;
  List<Analysis> analysisList;
  Analysis analysisObj=null;
  Map<TdReport,List<Analysis>> removeMap=new HashMap<TdReport,List<Analysis>>();
  for (int i=0; i < paths.length; i++) {
    Object lastSegment=paths[i].getLastSegment();
    if (!(lastSegment instanceof Analysis)) {
      return;
    }
    analysisObj=(Analysis)lastSegment;
    IFolderNode folderNode=(IFolderNode)paths[i].getSegment(paths[i].getSegmentCount() - 2);
    parentReport=(TdReport)folderNode.getParent();
    analysisList=removeMap.get(parentReport);
    if (analysisList == null) {
      analysisList=new ArrayList<Analysis>();
      analysisList.add(analysisObj);
      removeMap.put(parentReport,analysisList);
    }
 else {
      analysisList.add(analysisObj);
    }
  }
  if (analysisObj == null) {
    return;
  }
  String message=paths.length > 1 ? ""String_Node_Str"" + paths.length + ""String_Node_Str"" : ""String_Node_Str"" + analysisObj.getName() + ""String_Node_Str"";
  boolean openConfirm=MessageDialog.openConfirm(null,""String_Node_Str"",message);
  if (openConfirm) {
    Iterator<TdReport> iterator=removeMap.keySet().iterator();
    while (iterator.hasNext()) {
      TdReport report=iterator.next();
      ReportHelper.removeAnalyses(report,removeMap.get(report));
      RepResourceFileHelper.getInstance().save(report);
      List<Resource> modifiedResources=DependenciesHandler.getInstance().clearDependencies(report);
      for (int i=0; i < modifiedResources.size(); i++) {
        EMFUtil.saveSingleResource(modifiedResources.get(i));
      }
    }
    IFolder reportsFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.DATA_PROFILING).getFolder(DQStructureManager.REPORTS);
    try {
      reportsFolder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    findView.getCommonViewer().refresh();
  }
}","@Override public void run(){
  DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
  TreeSelection treeSelection=(TreeSelection)findView.getCommonViewer().getSelection();
  TreePath[] paths=treeSelection.getPaths();
  TdReport parentReport;
  List<Analysis> analysisList;
  Analysis analysisObj=null;
  Map<TdReport,List<Analysis>> removeMap=new HashMap<TdReport,List<Analysis>>();
  for (int i=0; i < paths.length; i++) {
    Object lastSegment=paths[i].getLastSegment();
    if (!(lastSegment instanceof Analysis)) {
      return;
    }
    analysisObj=(Analysis)lastSegment;
    IFolderNode folderNode=(IFolderNode)paths[i].getSegment(paths[i].getSegmentCount() - 2);
    parentReport=(TdReport)folderNode.getParent();
    analysisList=removeMap.get(parentReport);
    if (analysisList == null) {
      analysisList=new ArrayList<Analysis>();
      analysisList.add(analysisObj);
      removeMap.put(parentReport,analysisList);
    }
 else {
      analysisList.add(analysisObj);
    }
  }
  if (analysisObj == null) {
    return;
  }
  String message=paths.length > 1 ? ""String_Node_Str"" + paths.length + ""String_Node_Str"" : ""String_Node_Str"" + analysisObj.getName() + ""String_Node_Str"";
  boolean openConfirm=MessageDialog.openConfirm(null,""String_Node_Str"",message);
  if (openConfirm) {
    Iterator<TdReport> iterator=removeMap.keySet().iterator();
    while (iterator.hasNext()) {
      TdReport report=iterator.next();
      ReportHelper.removeAnalyses(report,removeMap.get(report));
      List<Resource> modifiedResources=DependenciesHandler.getInstance().removeDependenciesBetweenModels(report,removeMap.get(report));
      for (int i=0; i < modifiedResources.size(); i++) {
        EMFUtil.saveSingleResource(modifiedResources.get(i));
      }
      RepResourceFileHelper.getInstance().save(report);
    }
    IFolder reportsFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.DATA_PROFILING).getFolder(DQStructureManager.REPORTS);
    try {
      reportsFolder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    findView.getCommonViewer().refresh();
  }
}",0.9608021877848678
140354,"@Override protected void addFields(){
  this.setLayout(new GridLayout());
  Group group=new Group(this,SWT.NONE);
  group.setLayout(new GridLayout(DateGrain.VALUES.size() / 2,true));
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  group.setText(""String_Node_Str"");
  for (  DateGrain oneDate : DateGrain.VALUES) {
    btn=new Button(group,SWT.RADIO);
    btn.setText(oneDate.getLiteral());
    btn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        parameter.setDataUnit(btn.getText());
      }
    }
);
    allBtns.add(btn);
  }
}","@Override protected void addFields(){
  this.setLayout(new GridLayout());
  Group group=new Group(this,SWT.NONE);
  group.setLayout(new GridLayout(DateGrain.VALUES.size() / 2,true));
  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  group.setText(""String_Node_Str"");
  for (  DateGrain oneDate : DateGrain.VALUES) {
    btn=new Button(group,SWT.RADIO);
    btn.setText(oneDate.getLiteral());
    btn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        parameter.setDataUnit(btn.getText());
        updateStatus(IStatus.OK,MSG_OK);
      }
    }
);
    allBtns.add(btn);
  }
}",0.9678935003915426
140355,"@Override protected TdDataProvider findDataProvider(){
  return DataProviderHelper.getTdDataProvider((Package)selectedObj);
}","@Override protected TdDataProvider findDataProvider(){
  TdDataProvider provider=DataProviderHelper.getTdDataProvider((Package)selectedObj);
  IFile file=PrvResourceFileHelper.getInstance().findCorrespondingFile(provider);
  TdDataProvider synchronizedProvider=PrvResourceFileHelper.getInstance().readFromFile(file).getObject();
  List<TdCatalog> tdCatalogs=DataProviderHelper.getTdCatalogs(synchronizedProvider);
  for (  TdCatalog catalog : tdCatalogs) {
    if (((Package)selectedObj).getName().equals(catalog.getName())) {
      selectedObj=catalog;
    }
  }
  return synchronizedProvider;
}",0.3273231622746186
140356,"@Override protected TdDataProvider findDataProvider(){
  TypedReturnCode<TdDataProvider> returnVlaue=PrvResourceFileHelper.getInstance().getTdProvider((IFile)selectedObj);
  return returnVlaue.getObject();
}","@Override protected TdDataProvider findDataProvider(){
  TypedReturnCode<TdDataProvider> returnVlaue=PrvResourceFileHelper.getInstance().readFromFile((IFile)selectedObj);
  return returnVlaue.getObject();
}",0.9394673123486684
140357,"@Override protected TdDataProvider findDataProvider(){
  Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema((ColumnSet)selectedObj);
  return DataProviderHelper.getTdDataProvider(parentCatalogOrSchema);
}","@Override protected TdDataProvider findDataProvider(){
  ColumnSet columnSet=(ColumnSet)selectedObj;
  Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
  TdDataProvider provider=DataProviderHelper.getTdDataProvider(parentCatalogOrSchema);
  IFile file=PrvResourceFileHelper.getInstance().findCorrespondingFile(provider);
  TdDataProvider synchronizedProvider=PrvResourceFileHelper.getInstance().readFromFile(file).getObject();
  List<TdCatalog> tdCatalogs=DataProviderHelper.getTdCatalogs(synchronizedProvider);
  TdCatalog newCatalog=null;
  for (  TdCatalog catalog : tdCatalogs) {
    if (parentCatalogOrSchema.getName().equals(catalog.getName())) {
      newCatalog=catalog;
    }
  }
  List<TdTable> tables=CatalogHelper.getTables(newCatalog);
  for (  TdTable table : tables) {
    if (columnSet.getName().equals(table.getName())) {
      selectedObj=table;
    }
  }
  List<TdView> views=CatalogHelper.getViews(newCatalog);
  for (  TdView view : views) {
    if (columnSet.getName().equals(view.getName())) {
      selectedObj=view;
    }
  }
  return synchronizedProvider;
}",0.2132736763609246
140358,"public void deleteResource(){
  final IResource[] resources=getSelectedResourcesArray();
  if (!checkDeleteContent(resources)) {
    return;
  }
  EObjectHelper.removeDependencys(resources);
  CorePlugin.getDefault().refreshWorkSpace();
  DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
  findView.getCommonViewer().refresh();
  Job deletionCheckJob=new Job(""String_Node_Str""){
    protected IStatus run(    IProgressMonitor monitor){
      if (resources.length == 0) {
        return Status.CANCEL_STATUS;
      }
      scheduleDeleteJob(resources);
      return Status.OK_STATUS;
    }
    public boolean belongsTo(    Object family){
      if (""String_Node_Str"".equals(family)) {
        return true;
      }
      return super.belongsTo(family);
    }
  }
;
  deletionCheckJob.schedule();
}","public void deleteResource(){
  final IResource[] resources=getSelectedResourcesArray();
  List<IContainer> parentList=new ArrayList<IContainer>();
  for (  IResource resource : resources) {
    parentList.add(resource.getParent());
  }
  if (!checkDeleteContent(resources)) {
    return;
  }
  EObjectHelper.removeDependencys(resources);
  Job deletionCheckJob=new Job(""String_Node_Str""){
    protected IStatus run(    IProgressMonitor monitor){
      if (resources.length == 0) {
        return Status.CANCEL_STATUS;
      }
      scheduleDeleteJob(resources);
      return Status.OK_STATUS;
    }
    public boolean belongsTo(    Object family){
      if (""String_Node_Str"".equals(family)) {
        return true;
      }
      return super.belongsTo(family);
    }
  }
;
  deletionCheckJob.schedule();
  for (  IContainer container : parentList) {
    try {
      container.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
  DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
  findView.getCommonViewer().refresh();
}",0.661639014580191
140359,"@Override public void run(){
  boolean conf=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"");
  if (conf) {
    try {
      obj.delete(true,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  boolean conf=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"");
  if (conf) {
    try {
      obj.delete(true,null);
      obj.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
      DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
      findView.getCommonViewer().refresh();
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}",0.7144719687092569
140360,"@Override public boolean performFinish(){
  try {
    IndicatorParameters parameters=indicator.getParameters();
    if (parameters == null) {
      isDirty=true;
      parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
      indicator.setParameters(parameters);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    TextParameters textParameters=parameters.getTextParameter();
    for (    AbstractIndicatorParameter formParam : AbstractIndicatorForm.getParameters()) {
      if (!ParamCompareFactory.compare(parameters,formParam)) {
        isDirty=true;
switch (formParam.getFormEnum()) {
case BinsDesignerForm:
          BinsDesignerParameter tempParam=(BinsDesignerParameter)formParam;
        int numOfShown=tempParam.getNumOfShown();
      Domain domain=tempParam.getUserDomian();
    if (domain.getRanges().size() > 0) {
      parameters.setBins(domain);
    }
  parameters.setTopN(numOfShown);
break;
case TextParametersForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextParameter textParam=(TextParameter)formParam;
textParameters.setIgnoreCase(textParam.isIngoreCase());
parameters.setTopN(textParam.getNumOfShown());
break;
case TextLengthForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextLengthParameter lengthParam=(TextLengthParameter)formParam;
textParameters.setUseBlank(lengthParam.isUseBlank());
textParameters.setUseNulls(lengthParam.isUseNull());
break;
case DataThresholdsForm:
DataThresholdsParameter dataParam=(DataThresholdsParameter)formParam;
String min1=dataParam.getMinThreshold();
String max1=dataParam.getMaxThreshold();
IndicatorHelper.setDataThreshold(indicator,min1,max1);
IndicatorHelper.propagateDataThresholdsInChildren(indicator);
break;
case IndicatorThresholdsForm:
IndicatorThresholdsParameter indiParam=(IndicatorThresholdsParameter)formParam;
String min2=indiParam.getMinThreshold();
String max2=indiParam.getMaxThreshold();
IndicatorHelper.setIndicatorThreshold(parameters,min2,max2);
break;
case TimeSlicesForm:
TimeSlicesParameter timeParam=(TimeSlicesParameter)formParam;
DateGrain dateGrain=DateGrain.get(timeParam.getDataUnit());
dateParameters.setDateAggregationType(dateGrain);
parameters.setTopN(timeParam.getNumOfShown());
break;
case NumbericNominalForm:
NumbericNominalParameter numbParam=(NumbericNominalParameter)formParam;
parameters.setTopN(numbParam.getNumberOfShown());
break;
case ExpectedValueForm:
ExpectedValueParameter expectedParam=(ExpectedValueParameter)formParam;
IndicatorHelper.setIndicatorExpectedValue(parameters,expectedParam.getExpectedValue());
default :
}
}
}
return true;
}
 catch (Exception e) {
e.printStackTrace();
}
return false;
}","@Override public boolean performFinish(){
  try {
    IndicatorParameters parameters=indicator.getParameters();
    if (parameters == null) {
      isDirty=true;
      parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
      indicator.setParameters(parameters);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    TextParameters textParameters=parameters.getTextParameter();
    for (    AbstractIndicatorParameter formParam : AbstractIndicatorForm.getParameters()) {
      if (!ParamCompareFactory.compare(parameters,formParam)) {
        isDirty=true;
switch (formParam.getFormEnum()) {
case BinsDesignerForm:
          BinsDesignerParameter tempParam=(BinsDesignerParameter)formParam;
        int numOfShown=tempParam.getNumOfShown();
      Domain domain=tempParam.getUserDomian();
    if (domain.getRanges().size() == 0) {
      parameters.setBins(null);
    }
 else {
      parameters.setBins(domain);
    }
  parameters.setTopN(numOfShown);
break;
case TextParametersForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextParameter textParam=(TextParameter)formParam;
textParameters.setIgnoreCase(textParam.isIngoreCase());
parameters.setTopN(textParam.getNumOfShown());
break;
case TextLengthForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextLengthParameter lengthParam=(TextLengthParameter)formParam;
textParameters.setUseBlank(lengthParam.isUseBlank());
textParameters.setUseNulls(lengthParam.isUseNull());
break;
case DataThresholdsForm:
DataThresholdsParameter dataParam=(DataThresholdsParameter)formParam;
String min1=dataParam.getMinThreshold();
String max1=dataParam.getMaxThreshold();
IndicatorHelper.setDataThreshold(indicator,min1,max1);
IndicatorHelper.propagateDataThresholdsInChildren(indicator);
break;
case IndicatorThresholdsForm:
IndicatorThresholdsParameter indiParam=(IndicatorThresholdsParameter)formParam;
String min2=indiParam.getMinThreshold();
String max2=indiParam.getMaxThreshold();
IndicatorHelper.setIndicatorThreshold(parameters,min2,max2);
break;
case TimeSlicesForm:
TimeSlicesParameter timeParam=(TimeSlicesParameter)formParam;
DateGrain dateGrain=DateGrain.get(timeParam.getDataUnit());
dateParameters.setDateAggregationType(dateGrain);
parameters.setTopN(timeParam.getNumOfShown());
break;
case NumbericNominalForm:
NumbericNominalParameter numbParam=(NumbericNominalParameter)formParam;
parameters.setTopN(numbParam.getNumberOfShown());
break;
case ExpectedValueForm:
ExpectedValueParameter expectedParam=(ExpectedValueParameter)formParam;
IndicatorHelper.setIndicatorExpectedValue(parameters,expectedParam.getExpectedValue());
default :
}
}
}
return true;
}
 catch (Exception e) {
e.printStackTrace();
}
return false;
}",0.9915004336513444
140361,"public List<IFile> findCorrespondingFile(List<RenderedObject> renderObjs){
  this.getAllAnalysis();
  List<IFile> fileList=new ArrayList<IFile>();
  for (int i=0; i < renderObjs.size(); i++) {
    if (this.registedResourceMap.containsValue(renderObjs.get(i).eResource())) {
      Iterator<IFile> iterator=this.registedResourceMap.keySet().iterator();
      while (iterator.hasNext()) {
        IFile next=iterator.next();
        if (registedResourceMap.get(next) == renderObjs.get(i).eResource()) {
          fileList.add(next);
        }
      }
    }
  }
  return fileList;
}","public List<IFile> findCorrespondingFile(List<RenderedObject> renderObjs){
  this.getAllAnalysis();
  List<IFile> fileList=new ArrayList<IFile>();
  for (int i=0; i < renderObjs.size(); i++) {
    Iterator<IFile> iterator=this.registedResourceMap.keySet().iterator();
    Resource renderObjResource=renderObjs.get(i).eResource();
    while (iterator.hasNext()) {
      IFile next=iterator.next();
      if (registedResourceMap.get(next).getURI().toString().equals(renderObjResource.getURI().toString())) {
        fileList.add(next);
        break;
      }
    }
  }
  return fileList;
}",0.7570815450643776
140362,"public Collection<AnalysisEntity> getAllAnalysis(){
  if (resourceChanged) {
    this.clear();
    IFolder defaultAnalysFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(PluginConstant.DATA_PROFILING_PROJECTNAME).getFolder(DQStructureManager.ANALYSIS);
    try {
      searchAllAnalysis(defaultAnalysFolder);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    resourceChanged=false;
  }
  return allAnalysisMap.values();
}","public Collection<AnalysisEntity> getAllAnalysis(){
  if (resourcesNumberChanged) {
    IFolder defaultAnalysFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(PluginConstant.DATA_PROFILING_PROJECTNAME).getFolder(DQStructureManager.ANALYSIS);
    try {
      searchAllAnalysis(defaultAnalysFolder);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    resourcesNumberChanged=false;
  }
  return allAnalysisMap.values();
}",0.9646017699115044
140363,"public Analysis readFromFile(IFile file){
  registedResourceMap.remove(file);
  Resource fileResource=getFileResource(file);
  Analysis analysis=retireAnalysis(fileResource);
  if (analysis != null) {
    AnalysisEntity entity=new AnalysisEntity(analysis);
    allAnalysisMap.put(file,entity);
  }
  return analysis;
}","public Analysis readFromFile(IFile file){
  this.remove(file);
  Resource fileResource=getFileResource(file);
  Analysis analysis=retireAnalysis(fileResource);
  if (analysis != null) {
    AnalysisEntity entity=new AnalysisEntity(analysis);
    allAnalysisMap.put(file,entity);
  }
  return analysis;
}",0.9629629629629628
140364,"public ReturnCode save(Analysis analysis){
  AnalysisWriter writer=new AnalysisWriter();
  ReturnCode saved=writer.save(analysis);
  if (saved.isOk()) {
    setResourceChanged(true);
  }
  return saved;
}","public ReturnCode save(Analysis analysis){
  AnalysisWriter writer=new AnalysisWriter();
  ReturnCode saved=writer.save(analysis);
  return saved;
}",0.8409090909090909
140365,"/** 
 * DOC xy Comment method ""findPathAnalysis"".
 * @param file
 * @return
 */
public Analysis findAnalysis(IFile file){
  AnalysisEntity analysisEntity=allAnalysisMap.get(file);
  if (analysisEntity != null) {
    return analysisEntity.getAnalysis();
  }
  Resource fileResource=getFileResource(file);
  Analysis analysis=retireAnalysis(fileResource);
  if (analysis != null) {
    AnalysisEntity entity=new AnalysisEntity(analysis);
    allAnalysisMap.put(file,entity);
  }
  return analysis;
}","/** 
 * DOC xy Comment method ""findPathAnalysis"".
 * @param file
 * @return
 */
public Analysis findAnalysis(IFile file){
  AnalysisEntity analysisEntity=allAnalysisMap.get(file);
  if (analysisEntity != null) {
    return analysisEntity.getAnalysis();
  }
  return readFromFile(file);
}",0.6964285714285714
140366,"@SuppressWarnings(""String_Node_Str"") private static ModelElement getModelElement(IFile file){
  ModelElement findModelElement=null;
  if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PROV)) {
    TypedReturnCode<TdDataProvider> returnValue=PrvResourceFileHelper.getInstance().readFromFile(file);
    findModelElement=returnValue.getObject();
    NeedSaveDataProviderHelper.remove(findModelElement.eResource().getURI().path());
  }
 else   if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.ANA)) {
    findModelElement=AnaResourceFileHelper.getInstance().readFromFile(file);
  }
 else   if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
    findModelElement=RepResourceFileHelper.getInstance().readFromFile(file);
    if (findModelElement == null) {
      return findModelElement;
    }
    List<Resource> modifiedResources=new ArrayList<Resource>();
    for (    RenderedObject renderedObj : ((TdReport)findModelElement).getComponent()) {
      EList<Dependency> supplierDependencies=renderedObj.getSupplierDependency();
      for (      Dependency dependency : supplierDependencies) {
        EList<ModelElement> client=dependency.getClient();
        for (        ModelElement modelElement : client) {
          Resource clientResource=modelElement.eResource();
          URI resURI=clientResource.getURI();
          if (resURI.toString().equals(findModelElement.eResource().getURI().toString())) {
            modifiedResources.add(renderedObj.eResource());
            AnaResourceFileHelper.getInstance().clear();
          }
        }
        client.clear();
      }
    }
    EMFUtil util=EMFSharedResources.getSharedEmfUtil();
    for (    Resource resource : modifiedResources) {
      util.saveSingleResource(resource);
    }
  }
 else   if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
    findModelElement=PatternResourceFileHelper.getInstance().findPattern(file);
  }
  return findModelElement;
}","@SuppressWarnings(""String_Node_Str"") private static ModelElement getModelElement(IFile file){
  ModelElement findModelElement=null;
  if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PROV)) {
    TypedReturnCode<TdDataProvider> returnValue=PrvResourceFileHelper.getInstance().readFromFile(file);
    findModelElement=returnValue.getObject();
  }
 else   if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.ANA)) {
    findModelElement=AnaResourceFileHelper.getInstance().readFromFile(file);
  }
 else   if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
    findModelElement=RepResourceFileHelper.getInstance().readFromFile(file);
    if (findModelElement == null) {
      return findModelElement;
    }
    List<Resource> modifiedResources=new ArrayList<Resource>();
    for (    RenderedObject renderedObj : ((TdReport)findModelElement).getComponent()) {
      EList<Dependency> supplierDependencies=renderedObj.getSupplierDependency();
      for (      Dependency dependency : supplierDependencies) {
        EList<ModelElement> client=dependency.getClient();
        for (        ModelElement modelElement : client) {
          Resource clientResource=modelElement.eResource();
          URI resURI=clientResource.getURI();
          if (resURI.toString().equals(findModelElement.eResource().getURI().toString())) {
            modifiedResources.add(renderedObj.eResource());
            AnaResourceFileHelper.getInstance().clear();
          }
        }
        client.clear();
      }
    }
    EMFUtil util=EMFSharedResources.getSharedEmfUtil();
    for (    Resource resource : modifiedResources) {
      util.saveSingleResource(resource);
    }
  }
 else   if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
    findModelElement=PatternResourceFileHelper.getInstance().findPattern(file);
  }
  return findModelElement;
}",0.9779163419069888
140367,"/** 
 * DOC zqin Comment method ""getAllAnalysis"".
 * @return
 */
public Collection<Pattern> getAllPatternes(){
  if (resourceChanged) {
    patternsMap.clear();
    IFolder defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.PATTERNS);
    try {
      searchAllPatternes(defaultPatternFolder);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    resourceChanged=false;
  }
  return patternsMap.values();
}","/** 
 * DOC zqin Comment method ""getAllAnalysis"".
 * @return
 */
public Collection<Pattern> getAllPatternes(){
  if (resourcesNumberChanged) {
    IFolder defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.PATTERNS);
    try {
      searchAllPatternes(defaultPatternFolder);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    resourcesNumberChanged=false;
  }
  return patternsMap.values();
}",0.9611166500498504
140368,"/** 
 * DOC qzhang Comment method ""getPatternFile"".
 * @param pattern
 */
public IFile getPatternFile(Pattern pattern){
  IFile file=null;
  if (resourceChanged) {
    patternsMap.clear();
    IFolder defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.PATTERNS);
    try {
      searchAllPatternes(defaultPatternFolder);
      defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.SQL_PATTERNS);
      searchAllPatternes(defaultPatternFolder);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    resourceChanged=false;
  }
  Set<IFile> keySet=patternsMap.keySet();
  for (  IFile file2 : keySet) {
    Pattern pattern2=patternsMap.get(file2);
    RegularExpression e2=(RegularExpression)pattern.getComponents().get(0);
    RegularExpression e=(RegularExpression)pattern2.getComponents().get(0);
    String et=e.getExpressionType();
    String et2=e2.getExpressionType();
    if (pattern2.getName().equals(pattern.getName())) {
      boolean b=et == null && et2 == null;
      b=b || (et != null && et.equals(et2));
      if (b) {
        file=file2;
      }
    }
  }
  return file;
}","/** 
 * DOC qzhang Comment method ""getPatternFile"".
 * @param pattern
 */
public IFile getPatternFile(Pattern pattern){
  IFile file=null;
  if (resourcesNumberChanged) {
    IFolder defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.PATTERNS);
    try {
      searchAllPatternes(defaultPatternFolder);
      defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.SQL_PATTERNS);
      searchAllPatternes(defaultPatternFolder);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    resourcesNumberChanged=false;
  }
  Set<IFile> keySet=patternsMap.keySet();
  for (  IFile file2 : keySet) {
    Pattern pattern2=patternsMap.get(file2);
    RegularExpression e2=(RegularExpression)pattern.getComponents().get(0);
    RegularExpression e=(RegularExpression)pattern2.getComponents().get(0);
    String et=e.getExpressionType();
    String et2=e2.getExpressionType();
    if (pattern2.getName().equals(pattern.getName())) {
      boolean b=et == null && et2 == null;
      b=b || (et != null && et.equals(et2));
      if (b) {
        file=file2;
      }
    }
  }
  return file;
}",0.9845176657403732
140369,"@SuppressWarnings(""String_Node_Str"") public boolean save(Pattern pattern){
  EMFUtil sharedEmfUtil=EMFSharedResources.getSharedEmfUtil();
  boolean saved=sharedEmfUtil.saveSingleResource(pattern.eResource());
  if (saved) {
    setResourceChanged(true);
  }
  return saved;
}","@SuppressWarnings(""String_Node_Str"") public boolean save(Pattern pattern){
  EMFUtil sharedEmfUtil=EMFSharedResources.getSharedEmfUtil();
  boolean saved=sharedEmfUtil.saveSingleResource(pattern.eResource());
  return saved;
}",0.8542914171656687
140370,"public IFile findCorrespondingFile(TdDataProvider provider){
  Iterator<IFile> iterator=this.providerMap.keySet().iterator();
  while (iterator.hasNext()) {
    IFile next=iterator.next();
    TypedReturnCode<TdDataProvider> typedReturnCode=providerMap.get(next);
    if (provider == typedReturnCode.getObject()) {
      return next;
    }
  }
  return null;
}","public IFile findCorrespondingFile(TdDataProvider provider){
  Iterator<IFile> iterator=this.providerMap.keySet().iterator();
  while (iterator.hasNext()) {
    IFile next=iterator.next();
    TypedReturnCode<TdDataProvider> typedReturnCode=providerMap.get(next);
    if (ResourceHelper.areSame(provider,typedReturnCode.getObject())) {
      return next;
    }
  }
  return null;
}",0.9392712550607288
140371,"/** 
 * DOC rli Comment method ""readFromFile"".
 * @param file
 * @return
 */
public TypedReturnCode<TdDataProvider> readFromFile(IFile file){
  TypedReturnCode<TdDataProvider> rc;
  registedResourceMap.remove(file);
  rc=new TypedReturnCode<TdDataProvider>();
  Resource resource=getFileResource(file);
  findTdProvider(file,rc,resource);
  return rc;
}","/** 
 * DOC rli Comment method ""readFromFile"".
 * @param file
 * @return
 */
public TypedReturnCode<TdDataProvider> readFromFile(IFile file){
  TypedReturnCode<TdDataProvider> rc;
  this.remove(file);
  rc=new TypedReturnCode<TdDataProvider>();
  Resource resource=getFileResource(file);
  findTdProvider(file,rc,resource);
  return rc;
}",0.9667149059334298
140372,"public TdReport readFromFile(IFile file){
  registedResourceMap.remove(file);
  Resource fileResource=getFileResource(file);
  TdReport report=retireReport(fileResource);
  if (report != null) {
    allRepMap.put(file,report);
  }
  return report;
}","public TdReport readFromFile(IFile file){
  this.remove(file);
  Resource fileResource=getFileResource(file);
  TdReport report=retireReport(fileResource);
  if (report != null) {
    allRepMap.put(file,report);
  }
  return report;
}",0.2236024844720497
140373,"public ReturnCode save(TdReport report){
  ReportWriter writer=new ReportWriter();
  ReturnCode saved=writer.save(report);
  if (saved.isOk()) {
    setResourceChanged(true);
  }
  return saved;
}","public ReturnCode save(TdReport report){
  ReportWriter writer=new ReportWriter();
  ReturnCode saved=writer.save(report);
  return saved;
}",0.8333333333333334
140374,"public TdReport findReport(IFile file){
  TdReport report=allRepMap.get(file);
  if (report != null) {
    return report;
  }
  Resource fileResource=getFileResource(file);
  report=retireReport(fileResource);
  if (report != null) {
    allRepMap.put(file,report);
  }
  return report;
}","public TdReport findReport(IFile file){
  TdReport report=allRepMap.get(file);
  if (report != null) {
    return report;
  }
  return readFromFile(file);
}",0.6576576576576577
140375,"public Collection<TdReport> getAllReports(){
  allRepMap.clear();
  IFolder defaultAnalysFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(PluginConstant.DATA_PROFILING_PROJECTNAME).getFolder(DQStructureManager.REPORTS);
  try {
    searchAllReports(defaultAnalysFolder);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  return allRepMap.values();
}","public Collection<TdReport> getAllReports(){
  IFolder defaultAnalysFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(PluginConstant.DATA_PROFILING_PROJECTNAME).getFolder(DQStructureManager.REPORTS);
  try {
    searchAllReports(defaultAnalysFolder);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  return allRepMap.values();
}",0.9710344827586208
140376,"private boolean checkDeleteContent(IResource[] selectedResources){
  List<ModelElement> modelElementList=new ArrayList<ModelElement>();
  IFile file;
  ModelElement modelElement;
  boolean otherFilesExistFlag=false;
  String otherFileName=null;
  boolean anaMessageFlag=false, repMessageFlag=false;
  String dialogMessage;
  for (  IResource res : selectedResources) {
    if (!(res instanceof IFile)) {
      continue;
    }
 else {
      file=(IFile)res;
    }
    if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PROV)) {
      TypedReturnCode<TdDataProvider> returnValue=PrvResourceFileHelper.getInstance().getTdProvider(file);
      modelElement=returnValue.getObject();
      modelElementList.add(modelElement);
      anaMessageFlag=true;
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.ANA)) {
      modelElement=AnaResourceFileHelper.getInstance().findAnalysis(file);
      modelElementList.add(modelElement);
      repMessageFlag=true;
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      modelElementList.add(pattern);
      anaMessageFlag=true;
    }
 else {
      otherFilesExistFlag=true;
      if (res.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
        TdReport findReport=RepResourceFileHelper.getInstance().findReport(file);
        otherFileName=findReport.getName();
      }
 else {
        otherFileName=file.getName();
      }
    }
  }
  if (modelElementList.size() > 0 && !otherFilesExistFlag) {
    if (anaMessageFlag && repMessageFlag) {
      dialogMessage=""String_Node_Str"";
    }
 else     if (anaMessageFlag) {
      dialogMessage=""String_Node_Str"";
    }
 else {
      dialogMessage=""String_Node_Str"";
    }
    int showDialog=DeleteModelElementConfirmDialog.showDialog(null,modelElementList.toArray(new ModelElement[modelElementList.size()]),dialogMessage);
    isDeleteContent=showDialog == Window.OK;
  }
 else   if (otherFilesExistFlag) {
    isDeleteContent=popConfirmDialog(otherFileName,selectedResources);
  }
  return isDeleteContent;
}","private boolean checkDeleteContent(IResource[] selectedResources){
  List<ModelElement> modelElementList=new ArrayList<ModelElement>();
  IFile file;
  ModelElement modelElement;
  boolean otherFilesExistFlag=false;
  String otherFileName=null;
  boolean anaMessageFlag=false, repMessageFlag=false;
  String dialogMessage;
  for (  IResource res : selectedResources) {
    if (!(res instanceof IFile)) {
      continue;
    }
 else {
      file=(IFile)res;
    }
    if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PROV)) {
      TypedReturnCode<TdDataProvider> returnValue=PrvResourceFileHelper.getInstance().readFromFile(file);
      modelElement=returnValue.getObject();
      modelElementList.add(modelElement);
      anaMessageFlag=true;
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.ANA)) {
      modelElement=AnaResourceFileHelper.getInstance().readFromFile(file);
      modelElementList.add(modelElement);
      repMessageFlag=true;
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      modelElementList.add(pattern);
      anaMessageFlag=true;
    }
 else {
      otherFilesExistFlag=true;
      if (res.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
        TdReport findReport=RepResourceFileHelper.getInstance().findReport(file);
        otherFileName=findReport.getName();
      }
 else {
        otherFileName=file.getName();
      }
    }
  }
  if (modelElementList.size() > 0 && !otherFilesExistFlag) {
    if (anaMessageFlag && repMessageFlag) {
      dialogMessage=""String_Node_Str"";
    }
 else     if (anaMessageFlag) {
      dialogMessage=""String_Node_Str"";
    }
 else {
      dialogMessage=""String_Node_Str"";
    }
    int showDialog=DeleteModelElementConfirmDialog.showDialog(null,modelElementList.toArray(new ModelElement[modelElementList.size()]),dialogMessage);
    isDeleteContent=showDialog == Window.OK;
  }
 else   if (otherFilesExistFlag) {
    isDeleteContent=popConfirmDialog(otherFileName,selectedResources);
  }
  return isDeleteContent;
}",0.9885860703470768
140377,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  analysisHandler.clearAnalysis();
  ColumnIndicator[] columnIndicators=treeViewer.getColumnIndicator();
  TdDataProvider tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  if (columnIndicators != null) {
    if (columnIndicators.length != 0) {
      tdProvider=EObjectHelper.getTdDataProvider(columnIndicators[0].getTdColumn());
      analysis.getContext().setConnection(tdProvider);
    }
    for (    ColumnIndicator columnIndicator : columnIndicators) {
      analysisHandler.addIndicator(columnIndicator.getTdColumn(),columnIndicator.getIndicators());
      DataminingType type=MetadataHelper.getDataminingType(columnIndicator.getTdColumn());
      if (type == null) {
        type=MetadataHelper.getDefaultDataminingType(columnIndicator.getTdColumn().getJavaType());
      }
      analysisHandler.setDatamingType(type.getLiteral(),columnIndicator.getTdColumn());
    }
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  ReturnCode saved=AnaResourceFileHelper.getInstance().save(analysis);
  if (saved.isOk()) {
    if (tdProvider != null) {
      DqRepositoryViewService.saveOpenDataProvider(tdProvider);
    }
    AnaResourceFileHelper.getInstance().setResourceChanged(true);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ urlString+ ""String_Node_Str""+ saved.getMessage());
  }
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  analysisHandler.clearAnalysis();
  ColumnIndicator[] columnIndicators=treeViewer.getColumnIndicator();
  TdDataProvider tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  if (columnIndicators != null) {
    if (columnIndicators.length != 0) {
      tdProvider=EObjectHelper.getTdDataProvider(columnIndicators[0].getTdColumn());
      analysis.getContext().setConnection(tdProvider);
    }
    for (    ColumnIndicator columnIndicator : columnIndicators) {
      analysisHandler.addIndicator(columnIndicator.getTdColumn(),columnIndicator.getIndicators());
      DataminingType type=MetadataHelper.getDataminingType(columnIndicator.getTdColumn());
      if (type == null) {
        type=MetadataHelper.getDefaultDataminingType(columnIndicator.getTdColumn().getJavaType());
      }
      analysisHandler.setDatamingType(type.getLiteral(),columnIndicator.getTdColumn());
    }
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  ReturnCode saved=AnaResourceFileHelper.getInstance().save(analysis);
  if (saved.isOk()) {
    if (tdProvider != null) {
      DqRepositoryViewService.saveOpenDataProvider(tdProvider);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ urlString+ ""String_Node_Str""+ saved.getMessage());
  }
}",0.98094688221709
140378,"@SuppressWarnings(""String_Node_Str"") @Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object target){
  if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
    return Status.CANCEL_STATUS;
  }
  IResource[] resources=null;
  TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
  if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
    resources=getSelectedResources();
  }
 else   if (ResourceTransfer.getInstance().isSupportedType(currentTransfer)) {
    resources=(IResource[])aDropTargetEvent.data;
  }
  if ((target instanceof IFile)) {
    TdReport findReport=RepResourceFileHelper.getInstance().findReport(((IFile)target));
    List<Analysis> analyses=ReportHelper.getAnalyses(findReport);
    Map<String,Analysis> resourcesMap=new HashMap<String,Analysis>();
    for (    Analysis ana : analyses) {
      String uriString=ana.eResource().getURI().toString();
      resourcesMap.put(uriString,ana);
    }
    if (resources != null && resources.length > 0) {
      List<Analysis> anaList=new ArrayList<Analysis>();
      for (      IResource res : resources) {
        Analysis findAnalysis=AnaResourceFileHelper.getInstance().findAnalysis((IFile)res);
        if (findAnalysis != null) {
          String uriKey=findAnalysis.eResource().getURI().toString();
          if (resourcesMap.containsKey(uriKey)) {
            findReport.getComponent().remove(resourcesMap.get(uriKey));
          }
          anaList.add(findAnalysis);
        }
      }
      ReportHelper.addAnalyses(anaList,findReport);
      RepResourceFileHelper.getInstance().save(findReport);
    }
  }
 else   if ((target instanceof IFolder)) {
    IFolder folder=(IFolder)target;
    for (    IResource res : resources) {
      if (res.getType() != IResource.FILE) {
        return null;
      }
      String name=res.getName();
      IFile fileRes=(IFile)res;
      IFile movedIFile=folder.getFile(name);
      if (!DQStructureManager.getInstance().getModelElementSuffixs().contains(fileRes.getFileExtension())) {
        try {
          fileRes.move(movedIFile.getFullPath(),false,null);
          fileRes.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
          folder.refreshLocal(IResource.DEPTH_INFINITE,null);
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
        return Status.OK_STATUS;
      }
      IContainer srcParent=fileRes.getParent();
      URI srcUri=URI.createPlatformResourceURI((fileRes).getFullPath().toString(),false);
      ResourceSet rs=EMFSharedResources.getSharedEmfUtil().getResourceSet();
      Resource resource=rs.getResource(srcUri,true);
      if (resource != null) {
        URI desUri=URI.createPlatformResourceURI(folder.getFullPath().toString(),false);
        EMFUtil.saveToUri(resource,desUri);
      }
      try {
        fileRes.delete(true,null);
        srcParent.refreshLocal(IResource.DEPTH_INFINITE,null);
        folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      }
 catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
      movedIFile=folder.getFile(name);
    }
  }
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object target){
  if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
    return Status.CANCEL_STATUS;
  }
  IResource[] resources=null;
  TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
  if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
    resources=getSelectedResources();
  }
 else   if (ResourceTransfer.getInstance().isSupportedType(currentTransfer)) {
    resources=(IResource[])aDropTargetEvent.data;
  }
  if ((target instanceof IFile)) {
    TdReport findReport=RepResourceFileHelper.getInstance().findReport(((IFile)target));
    List<Analysis> analyses=ReportHelper.getAnalyses(findReport);
    Map<String,Analysis> resourcesMap=new HashMap<String,Analysis>();
    for (    Analysis ana : analyses) {
      String uriString=ana.eResource().getURI().toString();
      resourcesMap.put(uriString,ana);
    }
    if (resources != null && resources.length > 0) {
      List<Analysis> anaList=new ArrayList<Analysis>();
      for (      IResource res : resources) {
        Analysis findAnalysis=AnaResourceFileHelper.getInstance().findAnalysis((IFile)res);
        if (findAnalysis != null) {
          String uriKey=findAnalysis.eResource().getURI().toString();
          if (resourcesMap.containsKey(uriKey)) {
            findReport.getComponent().remove(resourcesMap.get(uriKey));
          }
          anaList.add(findAnalysis);
        }
      }
      ReportHelper.addAnalyses(anaList,findReport);
      RepResourceFileHelper.getInstance().save(findReport);
    }
  }
 else   if ((target instanceof IFolder)) {
    IFolder folder=(IFolder)target;
    for (    IResource res : resources) {
      if (res.getType() != IResource.FILE) {
        return null;
      }
      String name=res.getName();
      IFile fileRes=(IFile)res;
      IFile movedIFile=folder.getFile(name);
      if (!DQStructureManager.getInstance().getModelElementSuffixs().contains(fileRes.getFileExtension())) {
        try {
          fileRes.move(movedIFile.getFullPath(),false,null);
          fileRes.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
          folder.refreshLocal(IResource.DEPTH_INFINITE,null);
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
        return Status.OK_STATUS;
      }
      IContainer srcParent=fileRes.getParent();
      URI srcUri=URI.createPlatformResourceURI((fileRes).getFullPath().toString(),false);
      ResourceSet rs=EMFSharedResources.getSharedEmfUtil().getResourceSet();
      Resource resource=rs.getResource(srcUri,true);
      if (resource != null) {
        URI desUri=URI.createPlatformResourceURI(folder.getFullPath().toString(),false);
        EMFUtil.saveToUri(resource,desUri);
      }
      try {
        fileRes.delete(true,null);
        ModelElementFileFactory.getResourceFileMap(fileRes).setResourcesNumberChanged(true);
        srcParent.refreshLocal(IResource.DEPTH_INFINITE,null);
        folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      }
 catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
      movedIFile=folder.getFile(name);
    }
  }
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return null;
}",0.9861833308572278
140379,"protected IFile createEmptyAnalysisFile() throws DataprofilerCoreException {
  AnalysisBuilder analysisBuilder=new AnalysisBuilder();
  boolean analysisInitialized=analysisBuilder.initializeAnalysis(analysisName,analysisType);
  if (!analysisInitialized) {
    throw new DataprofilerCoreException(analysisName + ""String_Node_Str"");
  }
  Analysis analysis=analysisBuilder.getAnalysis();
  fillAnalysisBuilder(analysisBuilder);
  AnalysisWriter writer=new AnalysisWriter();
  TypedReturnCode<IFile> saved=writer.createAnalysisFile(analysis,folderResource);
  IFile file;
  if (saved.isOk()) {
    log.info(""String_Node_Str"" + folderResource.getFullPath().toString());
    file=saved.getObject();
    Resource anaResource=analysis.eResource();
    AnaResourceFileHelper.getInstance().register(file,anaResource);
    AnaResourceFileHelper.getInstance().setResourceChanged(true);
  }
 else {
    throw new DataprofilerCoreException(""String_Node_Str"" + folderResource.getFullPath().toString() + ""String_Node_Str""+ saved.getMessage());
  }
  CorePlugin.getDefault().refreshWorkSpace();
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return file;
}","protected IFile createEmptyAnalysisFile() throws DataprofilerCoreException {
  AnalysisBuilder analysisBuilder=new AnalysisBuilder();
  boolean analysisInitialized=analysisBuilder.initializeAnalysis(analysisName,analysisType);
  if (!analysisInitialized) {
    throw new DataprofilerCoreException(analysisName + ""String_Node_Str"");
  }
  Analysis analysis=analysisBuilder.getAnalysis();
  fillAnalysisBuilder(analysisBuilder);
  AnalysisWriter writer=new AnalysisWriter();
  TypedReturnCode<IFile> saved=writer.createAnalysisFile(analysis,folderResource);
  IFile file;
  if (saved.isOk()) {
    log.info(""String_Node_Str"" + folderResource.getFullPath().toString());
    file=saved.getObject();
    Resource anaResource=analysis.eResource();
    AnaResourceFileHelper.getInstance().register(file,anaResource);
    AnaResourceFileHelper.getInstance().setResourcesNumberChanged(true);
  }
 else {
    throw new DataprofilerCoreException(""String_Node_Str"" + folderResource.getFullPath().toString() + ""String_Node_Str""+ saved.getMessage());
  }
  CorePlugin.getDefault().refreshWorkSpace();
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return file;
}",0.9970990468296728
140380,"protected IFile createEmptyAnalysisFile() throws DataprofilerCoreException {
  AnalysisBuilder analysisBuilder=new AnalysisBuilder();
  boolean analysisInitialized=analysisBuilder.initializeAnalysis(analysisName,analysisType);
  if (!analysisInitialized) {
    throw new DataprofilerCoreException(analysisName + ""String_Node_Str"");
  }
  Analysis analysis=analysisBuilder.getAnalysis();
  fillAnalysisBuilder(analysisBuilder);
  AnalysisWriter writer=new AnalysisWriter();
  TypedReturnCode<IFile> saved=writer.createAnalysisFile(analysis,folderResource);
  IFile file;
  if (saved.isOk()) {
    log.info(""String_Node_Str"" + folderResource.getFullPath().toString());
    file=saved.getObject();
    AnaResourceFileHelper.getInstance().clear();
    Resource anaResource=analysis.eResource();
    AnaResourceFileHelper.getInstance().register(file,anaResource);
    AnaResourceFileHelper.getInstance().setResourceChanged(true);
  }
 else {
    throw new DataprofilerCoreException(""String_Node_Str"" + folderResource.getFullPath().toString() + ""String_Node_Str""+ saved.getMessage());
  }
  EList<Domain> dataFilters=analysisBuilder.getAnalysis().getParameters().getDataFilter();
  if ((parameter.getTableFilter() != null) && (!parameter.getTableFilter().equals(PluginConstant.EMPTY_STRING))) {
    DomainHelper.setDataFilterTablePattern(dataFilters,parameter.getTableFilter());
  }
  if ((parameter.getViewFilter() != null) && (!parameter.getViewFilter().equals(PluginConstant.EMPTY_STRING))) {
    DomainHelper.setDataFilterViewPattern(dataFilters,parameter.getViewFilter());
  }
  DependenciesHandler.getInstance().setDependencyOn(analysisBuilder.getAnalysis(),analysisBuilder.getAnalysis().getContext().getConnection());
  ReturnCode save=AnaResourceFileHelper.getInstance().save(analysisBuilder.getAnalysis());
  if (save.isOk()) {
    log.info(""String_Node_Str"" + analysisBuilder.getAnalysis().getFileName());
  }
  CorePlugin.getDefault().refreshWorkSpace();
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return file;
}","protected IFile createEmptyAnalysisFile() throws DataprofilerCoreException {
  AnalysisBuilder analysisBuilder=new AnalysisBuilder();
  boolean analysisInitialized=analysisBuilder.initializeAnalysis(analysisName,analysisType);
  if (!analysisInitialized) {
    throw new DataprofilerCoreException(analysisName + ""String_Node_Str"");
  }
  Analysis analysis=analysisBuilder.getAnalysis();
  fillAnalysisBuilder(analysisBuilder);
  AnalysisWriter writer=new AnalysisWriter();
  TypedReturnCode<IFile> saved=writer.createAnalysisFile(analysis,folderResource);
  IFile file;
  if (saved.isOk()) {
    log.info(""String_Node_Str"" + folderResource.getFullPath().toString());
    file=saved.getObject();
    AnaResourceFileHelper.getInstance().clear();
    Resource anaResource=analysis.eResource();
    AnaResourceFileHelper.getInstance().register(file,anaResource);
    AnaResourceFileHelper.getInstance().setResourcesNumberChanged(true);
  }
 else {
    throw new DataprofilerCoreException(""String_Node_Str"" + folderResource.getFullPath().toString() + ""String_Node_Str""+ saved.getMessage());
  }
  EList<Domain> dataFilters=analysisBuilder.getAnalysis().getParameters().getDataFilter();
  if ((parameter.getTableFilter() != null) && (!parameter.getTableFilter().equals(PluginConstant.EMPTY_STRING))) {
    DomainHelper.setDataFilterTablePattern(dataFilters,parameter.getTableFilter());
  }
  if ((parameter.getViewFilter() != null) && (!parameter.getViewFilter().equals(PluginConstant.EMPTY_STRING))) {
    DomainHelper.setDataFilterViewPattern(dataFilters,parameter.getViewFilter());
  }
  DependenciesHandler.getInstance().setDependencyOn(analysisBuilder.getAnalysis(),analysisBuilder.getAnalysis().getContext().getConnection());
  ReturnCode save=AnaResourceFileHelper.getInstance().save(analysisBuilder.getAnalysis());
  if (save.isOk()) {
    log.info(""String_Node_Str"" + analysisBuilder.getAnalysis().getFileName());
  }
  CorePlugin.getDefault().refreshWorkSpace();
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return file;
}",0.9983225497244188
140381,"/** 
 * This method is called when 'Finish' button is pressed in the wizard. Save metadata close Lock Strategy and close wizard.
 */
public boolean performFinish(){
  TypedReturnCode<TdDataProvider> rc=ConnectionService.createConnection(this.connectionParam);
  if (!rc.isOk()) {
    MessageDialog.openInformation(getShell(),""String_Node_Str"",""String_Node_Str"" + rc.getMessage());
    return false;
  }
  TdDataProvider dataProvider=rc.getObject();
  IFile returnFile=DqRepositoryViewService.saveDataProviderAndStructure(dataProvider,this.connectionParam.getFolderProvider());
  if (returnFile != null) {
    CorePlugin.getDefault().refreshWorkSpace();
    ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
    CorePlugin.getDefault().openEditor(returnFile,ConnectionEditor.class.getName());
  }
  return true;
}","/** 
 * This method is called when 'Finish' button is pressed in the wizard. Save metadata close Lock Strategy and close wizard.
 */
public boolean performFinish(){
  TypedReturnCode<TdDataProvider> rc=ConnectionService.createConnection(this.connectionParam);
  if (!rc.isOk()) {
    MessageDialog.openInformation(getShell(),""String_Node_Str"",""String_Node_Str"" + rc.getMessage());
    return false;
  }
  TdDataProvider dataProvider=rc.getObject();
  IFile returnFile=DqRepositoryViewService.saveDataProviderAndStructure(dataProvider,this.connectionParam.getFolderProvider());
  PrvResourceFileHelper.getInstance().register(returnFile,dataProvider.eResource());
  if (returnFile != null) {
    CorePlugin.getDefault().refreshWorkSpace();
    ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
    CorePlugin.getDefault().openEditor(returnFile,ConnectionEditor.class.getName());
  }
  return true;
}",0.9532710280373832
140382,"public DataprofilerCoreException(String message){
  super(message);
}","public DataprofilerCoreException(Throwable cause){
  super(cause);
}",0.7883211678832117
140383,"/** 
 * Utility method. Method ""saveSingleResource"" saves the given resource only. This method is a helper for saving quickly a given resource. It does not saved the related resources. This could result in an exception when other related resources should be saved with this resource.
 * @param resource the resource to save
 * @return true if no problem
 */
public static boolean saveSingleResource(Resource resource){
  EMFUtil util=new EMFUtil();
  util.getResourceSet().getResources().add(resource);
  boolean save=util.save();
  if (!save) {
    log.warn(""String_Node_Str"" + util.getLastErrorMessage());
  }
  return save;
}","/** 
 * Utility method. Method ""saveSingleResource"" saves the given resource only. This method is a helper for saving quickly a given resource. It does not saved the related resources. This could result in an exception when other related resources should be saved with this resource.
 * @param resource the resource to save
 * @return true if no problem
 */
public static boolean saveSingleResource(Resource resource){
  boolean save=true;
  try {
    Map<String,Object> options=new HashMap<String,Object>();
    options.put(XMIResource.OPTION_DECLARE_XML,Boolean.TRUE);
    options.put(XMIResource.OPTION_ENCODING,ENCODING);
    resource.save(options);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + resource.getURI());
    }
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + resource.getURI().toString(),e);
    save=false;
  }
  return save;
}",0.6556291390728477
140384,"protected void saveReloadResult(){
  DqRepositoryViewService.saveOpenDataProvider(this.oldDataProvider);
}","protected void saveReloadResult(){
  PrvResourceFileHelper.getInstance().save(oldDataProvider);
}",0.6798029556650246
140385,"@Override protected TdDataProvider findDataProvider(){
  TdDataProvider provider=DataProviderHelper.getTdDataProvider((Package)selectedObj);
  IFile file=PrvResourceFileHelper.getInstance().findCorrespondingFile(provider);
  TdDataProvider synchronizedProvider=PrvResourceFileHelper.getInstance().readFromFile(file).getObject();
  List<TdCatalog> tdCatalogs=DataProviderHelper.getTdCatalogs(synchronizedProvider);
  for (  TdCatalog catalog : tdCatalogs) {
    if (((Package)selectedObj).getName().equals(catalog.getName())) {
      selectedObj=catalog;
    }
  }
  return synchronizedProvider;
}","@Override protected TdDataProvider findDataProvider(){
  TdDataProvider provider=DataProviderHelper.getTdDataProvider((Package)selectedObj);
  return provider;
}",0.4227212681638045
140386,"@Override protected void saveReloadResult(){
  IFile selectedFile=(IFile)selectedObj;
  DqRepositoryViewService.saveDataProviderResource(oldDataProvider,(IFolder)selectedFile.getParent(),selectedFile);
  PrvResourceFileHelper.getInstance().remove(selectedFile);
  PrvResourceFileHelper.getInstance().register(selectedFile,oldDataProvider.eResource());
}","@Override protected void saveReloadResult(){
  DqRepositoryViewService.saveOpenDataProvider(oldDataProvider,true);
}",0.4690831556503198
140387,"@Override protected TdDataProvider findDataProvider(){
  TypedReturnCode<TdDataProvider> returnVlaue=PrvResourceFileHelper.getInstance().readFromFile((IFile)selectedObj);
  return returnVlaue.getObject();
}","@Override protected TdDataProvider findDataProvider(){
  TypedReturnCode<TdDataProvider> returnVlaue=PrvResourceFileHelper.getInstance().findProvider((IFile)selectedObj);
  return returnVlaue.getObject();
}",0.941747572815534
140388,"protected void handleRemoveElement(RemoveModelElement removeElement){
  Package removePackage=packageSwitch.doSwitch(removeElement.getLeftElement());
  if (removePackage == null) {
    return;
  }
  popRemoveElementConfirm();
  oldDataProvider.getDataPackage().remove(removePackage);
}","protected void handleRemoveElement(RemoveModelElement removeElement){
  Package removePackage=packageSwitch.doSwitch(removeElement.getLeftElement());
  if (removePackage == null) {
    return;
  }
  popRemoveElementConfirm();
  oldDataProvider.getDataPackage().remove(removePackage);
  oldDataProvider.eResource().getContents().remove(removePackage);
}",0.8948194662480377
140389,"protected void createTempConnectionFile() throws ReloadCompareException {
  IFile findCorrespondingFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(oldDataProvider);
  if (findCorrespondingFile == null) {
    throw new ReloadCompareException(""String_Node_Str"" + oldDataProvider.getName());
  }
  IFile tempConnectionFile=DQStructureComparer.copyCurrentResourceFile(findCorrespondingFile);
  URI uri=URI.createPlatformResourceURI(tempConnectionFile.getFullPath().toString(),false);
  ResourceSet rs=new EMFUtil().getResourceSet();
  Resource resource=rs.getResource(uri,true);
  Collection<TdDataProvider> tdDataProviders=DataProviderHelper.getTdDataProviders(resource.getContents());
  if (tdDataProviders.isEmpty()) {
    throw new ReloadCompareException(""String_Node_Str"" + tempConnectionFile.getLocation().toFile().getAbsolutePath());
  }
  if (tdDataProviders.size() > 1) {
    throw new ReloadCompareException(""String_Node_Str"" + tdDataProviders.size() + ""String_Node_Str""+ tempConnectionFile.getLocation().toFile().getAbsolutePath());
  }
  tempReloadProvider=tdDataProviders.iterator().next();
}","protected void createTempConnectionFile() throws ReloadCompareException {
  IFile findCorrespondingFile=PrvResourceFileHelper.getInstance().findCorrespondingFile(oldDataProvider);
  if (findCorrespondingFile == null) {
    throw new ReloadCompareException(""String_Node_Str"" + oldDataProvider.getName());
  }
  IFile tempConnectionFile=DQStructureComparer.copyCurrentResourceFile(findCorrespondingFile);
  URI uri=URI.createPlatformResourceURI(tempConnectionFile.getFullPath().toString(),false);
  Resource resource=EMFSharedResources.getInstance().getResource(uri,true);
  Collection<TdDataProvider> tdDataProviders=DataProviderHelper.getTdDataProviders(resource.getContents());
  if (tdDataProviders.isEmpty()) {
    throw new ReloadCompareException(""String_Node_Str"" + tempConnectionFile.getLocation().toFile().getAbsolutePath());
  }
  if (tdDataProviders.size() > 1) {
    throw new ReloadCompareException(""String_Node_Str"" + tdDataProviders.size() + ""String_Node_Str""+ tempConnectionFile.getLocation().toFile().getAbsolutePath());
  }
  tempReloadProvider=tdDataProviders.iterator().next();
}",0.9579755987347492
140390,"@Override protected TdDataProvider findDataProvider(){
  ColumnSet columnSet=(ColumnSet)selectedObj;
  Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
  TdDataProvider provider=DataProviderHelper.getTdDataProvider(parentCatalogOrSchema);
  IFile file=PrvResourceFileHelper.getInstance().findCorrespondingFile(provider);
  TdDataProvider synchronizedProvider=PrvResourceFileHelper.getInstance().readFromFile(file).getObject();
  List<TdCatalog> tdCatalogs=DataProviderHelper.getTdCatalogs(synchronizedProvider);
  TdCatalog newCatalog=null;
  for (  TdCatalog catalog : tdCatalogs) {
    if (parentCatalogOrSchema.getName().equals(catalog.getName())) {
      newCatalog=catalog;
    }
  }
  List<TdTable> tables=CatalogHelper.getTables(newCatalog);
  for (  TdTable table : tables) {
    if (columnSet.getName().equals(table.getName())) {
      selectedObj=table;
    }
  }
  List<TdView> views=CatalogHelper.getViews(newCatalog);
  for (  TdView view : views) {
    if (columnSet.getName().equals(view.getName())) {
      selectedObj=view;
    }
  }
  return synchronizedProvider;
}","@Override protected TdDataProvider findDataProvider(){
  ColumnSet columnSet=(ColumnSet)selectedObj;
  Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
  TdDataProvider provider=DataProviderHelper.getTdDataProvider(parentCatalogOrSchema);
  return provider;
}",0.3914893617021276
140391,"/** 
 * Method ""deleteCopiedResourceFile"".
 * @return true if temporary file "".refresh.prv"" has been deleted (or did not exist)
 */
public static boolean deleteCopiedResourceFile(){
  boolean retValue=false;
  IFolder folder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.METADATA).getFolder(DQStructureManager.DB_CONNECTIONS);
  String fileName=TEMP_PRV_FILE;
  IFile file=folder.getFile(fileName);
  if (file.exists()) {
    try {
      file.delete(true,new NullProgressMonitor());
      retValue=true;
    }
 catch (    CoreException e) {
      log.warn(""String_Node_Str"" + fileName,e);
      retValue=false;
    }
  }
 else {
    retValue=true;
  }
  return retValue;
}","/** 
 * Method ""deleteCopiedResourceFile"".
 * @return true if temporary file "".refresh.prv"" has been deleted (or did not exist)
 */
public static boolean deleteCopiedResourceFile(){
  boolean retValue=false;
  IFolder folder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.METADATA).getFolder(DQStructureManager.DB_CONNECTIONS);
  String fileName=TEMP_PRV_FILE;
  IFile file=folder.getFile(fileName);
  if (file.exists()) {
    URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
    EMFSharedResources.getInstance().unloadResource(uri.toString());
    try {
      file.delete(true,new NullProgressMonitor());
      retValue=true;
    }
 catch (    CoreException e) {
      log.warn(""String_Node_Str"" + fileName,e);
      retValue=false;
    }
  }
 else {
    retValue=true;
  }
  return retValue;
}",0.9034348671419312
140392,"public ReloadCompareException(String message){
  super(message);
}","public ReloadCompareException(Throwable cause){
  super(cause);
}",0.7786259541984732
140393,"/** 
 * @param oldDataProvider
 */
protected boolean compareWithReloadObject(EObject reloadedObj){
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(MatchOptions.OPTION_IGNORE_XMI_ID,true);
  MatchModel match=null;
  try {
    match=MatchService.doMatch(oldDataProvider,reloadedObj,options);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return false;
  }
  final DiffModel diff=DiffService.doDiff(match);
  EList<DiffElement> ownedElements=diff.getOwnedElements();
  for (  DiffElement de : ownedElements) {
    EList<DiffElement> subDiffElements=de.getSubDiffElements();
    for (    DiffElement difElement : subDiffElements) {
      handleDiffPackageElement(difElement);
    }
  }
  return true;
}","/** 
 * @param oldDataProvider
 */
protected boolean compareWithReloadObject(EObject reloadedObj) throws ReloadCompareException {
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(MatchOptions.OPTION_IGNORE_XMI_ID,true);
  MatchModel match=null;
  try {
    match=MatchService.doMatch(oldDataProvider,reloadedObj,options);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return false;
  }
  final DiffModel diff=DiffService.doDiff(match);
  EList<DiffElement> ownedElements=diff.getOwnedElements();
  for (  DiffElement de : ownedElements) {
    EList<DiffElement> subDiffElements=de.getSubDiffElements();
    for (    DiffElement difElement : subDiffElements) {
      handleDiffPackageElement(difElement);
    }
  }
  return true;
}",0.979645436638214
140394,"@Override protected boolean compareWithReloadObject(EObject reloadedObj){
  Package catalogSchemaObj=(Package)reloadedObj;
  try {
    TdCatalog catalogObj=SwitchHelpers.CATALOG_SWITCH.doSwitch(catalogSchemaObj);
    if (catalogObj != null) {
      List<TdTable> tables=DqRepositoryViewService.getTables(tempReloadProvider,catalogObj,null,true);
      CatalogHelper.addTables(tables,catalogObj);
      List<TdView> views=DqRepositoryViewService.getViews(tempReloadProvider,catalogObj,null,true);
      CatalogHelper.addViews(views,catalogObj);
    }
 else {
      List<TdTable> tables=DqRepositoryViewService.getTables(tempReloadProvider,(Schema)catalogSchemaObj,null,true);
      SchemaHelper.addTables(tables,(Schema)catalogSchemaObj);
      List<TdView> views=DqRepositoryViewService.getViews(tempReloadProvider,(Schema)catalogSchemaObj,null,true);
      SchemaHelper.addViews(views,(Schema)catalogSchemaObj);
    }
  }
 catch (  TalendException e1) {
    e1.printStackTrace();
    ExceptionHandler.process(e1);
  }
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(MatchOptions.OPTION_IGNORE_XMI_ID,true);
  MatchModel match=null;
  try {
    match=MatchService.doContentMatch((Package)selectedObj,catalogSchemaObj,options);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return false;
  }
  final DiffModel diff=DiffService.doDiff(match,false);
  EList<DiffElement> ownedElements=diff.getOwnedElements();
  for (  DiffElement de : ownedElements) {
    handleSubDiffElement(de);
  }
  return true;
}","@Override protected boolean compareWithReloadObject(EObject reloadedObj) throws ReloadCompareException {
  Package catalogSchemaObj=(Package)reloadedObj;
  try {
    TdCatalog catalogObj=SwitchHelpers.CATALOG_SWITCH.doSwitch(catalogSchemaObj);
    if (catalogObj != null) {
      List<TdTable> tables=DqRepositoryViewService.getTables(tempReloadProvider,catalogObj,null,true);
      CatalogHelper.addTables(tables,catalogObj);
      List<TdView> views=DqRepositoryViewService.getViews(tempReloadProvider,catalogObj,null,true);
      CatalogHelper.addViews(views,catalogObj);
    }
 else {
      List<TdTable> tables=DqRepositoryViewService.getTables(tempReloadProvider,(Schema)catalogSchemaObj,null,true);
      SchemaHelper.addTables(tables,(Schema)catalogSchemaObj);
      List<TdView> views=DqRepositoryViewService.getViews(tempReloadProvider,(Schema)catalogSchemaObj,null,true);
      SchemaHelper.addViews(views,(Schema)catalogSchemaObj);
    }
  }
 catch (  TalendException e1) {
    throw new ReloadCompareException(e1);
  }
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(MatchOptions.OPTION_IGNORE_XMI_ID,true);
  MatchModel match=null;
  try {
    match=MatchService.doContentMatch((Package)selectedObj,catalogSchemaObj,options);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return false;
  }
  final DiffModel diff=DiffService.doDiff(match,false);
  EList<DiffElement> ownedElements=diff.getOwnedElements();
  for (  DiffElement de : ownedElements) {
    handleSubDiffElement(de);
  }
  return true;
}",0.9694435509810228
140395,"@Override protected boolean compareWithReloadObject(EObject reloadedObj){
  ColumnSet columnSet=(ColumnSet)reloadedObj;
  List<TdColumn> columns=null;
  try {
    columns=DqRepositoryViewService.getColumns(tempReloadProvider,columnSet,null,true);
  }
 catch (  TalendException e1) {
    e1.printStackTrace();
  }
  ColumnSetHelper.setColumns(columnSet,columns);
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(MatchOptions.OPTION_IGNORE_XMI_ID,true);
  MatchModel match=null;
  try {
    match=MatchService.doContentMatch((ColumnSet)selectedObj,columnSet,options);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return false;
  }
  final DiffModel diff=DiffService.doDiff(match,false);
  EList<DiffElement> ownedElements=diff.getOwnedElements();
  for (  DiffElement de : ownedElements) {
    handleSubDiffElement(de);
  }
  return true;
}","@Override protected boolean compareWithReloadObject(EObject reloadedObj) throws ReloadCompareException {
  ColumnSet columnSet=(ColumnSet)reloadedObj;
  List<TdColumn> columns=null;
  try {
    columns=DqRepositoryViewService.getColumns(tempReloadProvider,columnSet,null,true);
  }
 catch (  TalendException e1) {
    throw new ReloadCompareException(e1);
  }
  ColumnSetHelper.setColumns(columnSet,columns);
  Map<String,Object> options=new HashMap<String,Object>();
  options.put(MatchOptions.OPTION_IGNORE_XMI_ID,true);
  MatchModel match=null;
  try {
    match=MatchService.doContentMatch((ColumnSet)selectedObj,columnSet,options);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    return false;
  }
  final DiffModel diff=DiffService.doDiff(match,false);
  EList<DiffElement> ownedElements=diff.getOwnedElements();
  for (  DiffElement de : ownedElements) {
    handleSubDiffElement(de);
  }
  return true;
}",0.9554700384826827
140396,"public void run(IProgressMonitor monitor) throws InvocationTargetException {
  IComparisonLevel creatComparisonLevel=ComparisonLevelFactory.creatComparisonLevel(selectedObject);
  try {
    creatComparisonLevel.reloadCurrentLevelElement();
  }
 catch (  ReloadCompareException e) {
    log.error(e,e);
  }
}","public void run(IProgressMonitor monitor) throws InvocationTargetException {
  IComparisonLevel creatComparisonLevel=ComparisonLevelFactory.creatComparisonLevel(selectedObject);
  try {
    creatComparisonLevel.reloadCurrentLevelElement();
  }
 catch (  ReloadCompareException e) {
    throw new InvocationTargetException(e);
  }
}",0.927899686520376
140397,"/** 
 * Method ""saveOpenDataProvider"" saves a Data provider which has already a resource (has already been saved once).
 * @param dataProvider the data provider to save
 * @return true if saved without any problem.
 */
public static ReturnCode saveOpenDataProvider(TdDataProvider dataProvider){
}","/** 
 * Method ""saveOpenDataProvider"" saves a Data provider which has already a resource (has already been saved once).
 * @param dataProvider the data provider to save
 * @return true if saved without any problem.
 */
public static ReturnCode saveOpenDataProvider(TdDataProvider dataProvider,boolean addPackage){
}",0.9689034369885434
140398,"/** 
 * Method ""readFromFile"".
 * @param file the file to read
 * @return the Data provider if found.
 */
private static TypedReturnCode<TdDataProvider> readFromFile(IFile file){
  TypedReturnCode<TdDataProvider> rc=new TypedReturnCode<TdDataProvider>();
  EMFUtil util=EMFSharedResources.getSharedEmfUtil();
  ResourceSet rs=util.getResourceSet();
  Resource r=rs.getResource(URI.createPlatformResourceURI(file.getFullPath().toString(),false),true);
  Collection<TdDataProvider> tdDataProviders=DataProviderHelper.getTdDataProviders(r.getContents());
  if (tdDataProviders.isEmpty()) {
    rc.setReturnCode(""String_Node_Str"" + file.getFullPath().toString(),false);
  }
  if (tdDataProviders.size() > 1) {
    rc.setReturnCode(""String_Node_Str"" + tdDataProviders.size() + ""String_Node_Str""+ file.getFullPath().toString(),false);
  }
  TdDataProvider prov=tdDataProviders.iterator().next();
  rc.setObject(prov);
  return rc;
}","/** 
 * Method ""readFromFile"".
 * @param file the file to read
 * @return the Data provider if found.
 */
private static TypedReturnCode<TdDataProvider> readFromFile(IFile file){
  TypedReturnCode<TdDataProvider> rc=new TypedReturnCode<TdDataProvider>();
  Resource r=EMFSharedResources.getInstance().getResource(URI.createPlatformResourceURI(file.getFullPath().toString(),false),true);
  Collection<TdDataProvider> tdDataProviders=DataProviderHelper.getTdDataProviders(r.getContents());
  if (tdDataProviders.isEmpty()) {
    rc.setReturnCode(""String_Node_Str"" + file.getFullPath().toString(),false);
  }
  if (tdDataProviders.size() > 1) {
    rc.setReturnCode(""String_Node_Str"" + tdDataProviders.size() + ""String_Node_Str""+ file.getFullPath().toString(),false);
  }
  TdDataProvider prov=tdDataProviders.iterator().next();
  rc.setObject(prov);
  return rc;
}",0.941834451901566
140399,"public void modify(Object element,String property,Object value){
  TableItem item=(TableItem)element;
  SliceEntity entity=(SliceEntity)item.getData();
  if (property.equals(""String_Node_Str"")) {
    entity.setLowValue(value.toString());
    parameter.setBinsData(tableViewer.getInput());
  }
 else   if (property.equals(""String_Node_Str"")) {
    entity.setHighValue(value.toString());
    parameter.setBinsData(tableViewer.getInput());
  }
  try {
    TextFormatFactory.createLocalFormatValue(value);
    updateStatus(IStatus.OK,MSG_OK);
  }
 catch (  Exception e) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
  }
  tableViewer.refresh();
}","public void modify(Object element,String property,Object value){
  TableItem item=(TableItem)element;
  SliceEntity entity=(SliceEntity)item.getData();
  if (property.equals(""String_Node_Str"")) {
    entity.setLowValue(value.toString());
    parameter.setBinsData(tableViewer.getInput());
  }
 else   if (property.equals(""String_Node_Str"")) {
    entity.setHighValue(value.toString());
    parameter.setBinsData(tableViewer.getInput());
  }
  try {
    TextFormatFactory.createLocalFormatValue(value);
    updateStatus(IStatus.OK,MSG_OK);
  }
 catch (  Exception e) {
    updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
  }
  tableViewer.refresh();
}",0.9961508852963818
140400,"@Override protected void addFieldsListeners(){
  minValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=minValue.getText();
      if (min == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isNumberValue(min)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
        parameter.setMinValue(Double.valueOf(min));
      }
    }
  }
);
  maxValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String max=maxValue.getText();
      if (max == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isNumberValue(max)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
        parameter.setMaxValue(Double.valueOf(max));
      }
    }
  }
);
  numbOfBins.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String numb=numbOfBins.getText();
      if (numb == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isNumberValue(numb)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
        parameter.setNumOfBins(Integer.parseInt(numb));
      }
    }
  }
);
  isSetRange.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean flag=((Button)e.getSource()).getSelection();
      double numb=Double.parseDouble(numbOfBins.getText());
      double min=Double.parseDouble(minValue.getText());
      double max=Double.parseDouble(maxValue.getText());
      if (flag && numb > 0) {
        addSlice.setEnabled(true);
        delSlice.setEnabled(true);
        minValue.setEnabled(false);
        maxValue.setEnabled(false);
        numbOfBins.setEnabled(false);
        tableViewer.setInput(ViewerDataFactory.createSliceFormData(min,max,numb));
        parameter.setBinsData(tableViewer.getInput());
      }
 else {
        addSlice.setEnabled(false);
        delSlice.setEnabled(false);
        minValue.setEnabled(true);
        maxValue.setEnabled(true);
        numbOfBins.setEnabled(true);
        tableViewer.setInput(""String_Node_Str"");
      }
    }
  }
);
  addSlice.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      if (tableViewer.getInput() instanceof List) {
        List<SliceEntity> inputList=(List<SliceEntity>)tableViewer.getInput();
        SliceEntity newEntity=new SliceEntity();
        inputList.add(newEntity);
        tableViewer.setInput(inputList);
      }
    }
  }
);
  delSlice.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      boolean flag=!tableViewer.getSelection().isEmpty();
      if (flag) {
        IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
        SliceEntity entity=(SliceEntity)selection.getFirstElement();
        if (tableViewer.getInput() instanceof List) {
          List<SliceEntity> inputList=(List<SliceEntity>)tableViewer.getInput();
          inputList.remove(entity);
          tableViewer.setInput(inputList);
        }
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  minValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=minValue.getText();
      if (min == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isRealNumberValue(min)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
        parameter.setMinValue(Double.valueOf(min));
      }
    }
  }
);
  maxValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String max=maxValue.getText();
      if (max == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isRealNumberValue(max)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
        parameter.setMaxValue(Double.valueOf(max));
      }
    }
  }
);
  numbOfBins.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String numb=numbOfBins.getText();
      if (numb == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isNumberValue(numb)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
        parameter.setNumOfBins(Integer.parseInt(numb));
      }
    }
  }
);
  isSetRange.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean flag=((Button)e.getSource()).getSelection();
      double numb=Double.parseDouble(numbOfBins.getText());
      double min=Double.parseDouble(minValue.getText());
      double max=Double.parseDouble(maxValue.getText());
      if (flag && numb > 0) {
        addSlice.setEnabled(true);
        delSlice.setEnabled(true);
        minValue.setEnabled(false);
        maxValue.setEnabled(false);
        numbOfBins.setEnabled(false);
        tableViewer.setInput(ViewerDataFactory.createSliceFormData(min,max,numb));
        parameter.setBinsData(tableViewer.getInput());
      }
 else {
        addSlice.setEnabled(false);
        delSlice.setEnabled(false);
        minValue.setEnabled(true);
        maxValue.setEnabled(true);
        numbOfBins.setEnabled(true);
        tableViewer.setInput(""String_Node_Str"");
      }
    }
  }
);
  addSlice.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      if (tableViewer.getInput() instanceof List) {
        List<SliceEntity> inputList=(List<SliceEntity>)tableViewer.getInput();
        SliceEntity newEntity=new SliceEntity();
        inputList.add(newEntity);
        tableViewer.setInput(inputList);
      }
    }
  }
);
  delSlice.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      boolean flag=!tableViewer.getSelection().isEmpty();
      if (flag) {
        IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
        SliceEntity entity=(SliceEntity)selection.getFirstElement();
        if (tableViewer.getInput() instanceof List) {
          List<SliceEntity> inputList=(List<SliceEntity>)tableViewer.getInput();
          inputList.remove(entity);
          tableViewer.setInput(inputList);
        }
      }
    }
  }
);
}",0.3377105338281473
140401,"public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IFile) {
    IFile file=(IFile)parentElement;
    if (file.getName().endsWith(PluginConstant.ANA_SUFFIX)) {
      Analysis analysis=(Analysis)AnaResourceFileHelper.getInstance().getFileResource(file).getContents().get(0);
      EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
      AnaElementFolderNode folderNode=new AnaElementFolderNode(analysedElements);
      return new Object[]{folderNode};
    }
    parentElement=PrvResourceFileHelper.getInstance().getFileResource(file);
  }
 else   if (parentElement instanceof IFolderNode) {
    IFolderNode folerNode=(IFolderNode)parentElement;
    folerNode.loadChildren();
    if (folerNode.getChildren() == null) {
      return new Object[0];
    }
    if (folerNode.getChildrenType() == IFolderNode.MODELELEMENT_TYPE) {
      return ComparatorsFactory.sort(folerNode.getChildren(),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
 else {
      return ComparatorsFactory.sort(folerNode.getChildren(),ComparatorsFactory.FILE_RESOURCE_COMPARATOR_ID);
    }
  }
 else   if (SwitchHelpers.CATALOG_SWITCH.doSwitch((EObject)parentElement) != null) {
    if (CatalogHelper.getSchemas(SwitchHelpers.CATALOG_SWITCH.doSwitch((EObject)parentElement)).size() > 0) {
      return ComparatorsFactory.sort(super.getChildren(parentElement),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
 else {
      return FolderNodeHelper.getFolderNodes((EObject)parentElement);
    }
  }
 else {
    return FolderNodeHelper.getFolderNodes((EObject)parentElement);
  }
  return ComparatorsFactory.sort(super.getChildren(parentElement),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
}","public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IFile) {
    IFile file=(IFile)parentElement;
    if (file.getName().endsWith(PluginConstant.ANA_SUFFIX)) {
      Analysis analysis=(Analysis)AnaResourceFileHelper.getInstance().findAnalysis(file);
      EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
      AnaElementFolderNode folderNode=new AnaElementFolderNode(analysedElements);
      return new Object[]{folderNode};
    }
    parentElement=PrvResourceFileHelper.getInstance().getFileResource(file);
  }
 else   if (parentElement instanceof IFolderNode) {
    IFolderNode folerNode=(IFolderNode)parentElement;
    folerNode.loadChildren();
    if (folerNode.getChildren() == null) {
      return new Object[0];
    }
    if (folerNode.getChildrenType() == IFolderNode.MODELELEMENT_TYPE) {
      return ComparatorsFactory.sort(folerNode.getChildren(),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
 else {
      return ComparatorsFactory.sort(folerNode.getChildren(),ComparatorsFactory.FILE_RESOURCE_COMPARATOR_ID);
    }
  }
 else   if (SwitchHelpers.CATALOG_SWITCH.doSwitch((EObject)parentElement) != null) {
    if (CatalogHelper.getSchemas(SwitchHelpers.CATALOG_SWITCH.doSwitch((EObject)parentElement)).size() > 0) {
      return ComparatorsFactory.sort(super.getChildren(parentElement),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
 else {
      return FolderNodeHelper.getFolderNodes((EObject)parentElement);
    }
  }
 else {
    return FolderNodeHelper.getFolderNodes((EObject)parentElement);
  }
  return ComparatorsFactory.sort(super.getChildren(parentElement),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
}",0.9831199068684516
140402,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(1,true);
  container.setLayout(gdLayout);
  PatternFilter filter=new PatternFilter();
  FilteredTree tree=new FilteredTree(container,SWT.NONE,filter);
  typeTreeViewer=tree.getViewer();
  typeTreeViewer.setContentProvider(new AnalysisTypeContentProvider());
  typeTreeViewer.setLabelProvider(new AnalysisTypeLabelProvider());
  typeTreeViewer.setInput(ViewerDataFactory.createTreeData());
  addListeners();
  setControl(container);
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(1,true);
  container.setLayout(gdLayout);
  PatternFilter filter=new PatternFilter();
  FilteredTree tree=new FilteredTree(container,SWT.BORDER,filter);
  typeTreeViewer=tree.getViewer();
  typeTreeViewer.setContentProvider(new AnalysisTypeContentProvider());
  typeTreeViewer.setLabelProvider(new AnalysisTypeLabelProvider());
  typeTreeViewer.setInput(ViewerDataFactory.createTreeData());
  addListeners();
  setControl(container);
}",0.9947368421052633
140403,"/** 
 * DOC scorreia Comment method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=quote(tdColumn.getName());
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicator.eClass().getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition));
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges());
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank()) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
    }
  }
  String table=quote(ColumnHelper.getColumnSetFullName(tdColumn));
  String catalogName=getQuotedCatalogName(tdColumn);
  table=dbms().toQualifiedName(catalogName,null,table);
  String completedSqlString=null;
  if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        String genericSQL=sqlGenericExpression.getBody();
        int beginIndex=genericSQL.indexOf(dbms().orderBy());
        if (beginIndex != -1) {
          int lastIndex=genericSQL.lastIndexOf(dbms().desc());
          String orderByClause=genericSQL.substring(beginIndex,lastIndex);
          completedSqlString=completedSqlString + orderByClause + dbms().desc();
        }
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if ((dateAggregationType != null) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      completedSqlString=replaceVariablesLow(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUniqueCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getDuplicateCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicator.eClass())) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + language + ""String_Node_Str""+ completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=instantiateSqlExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}","/** 
 * DOC scorreia Comment method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=quote(tdColumn.getName());
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicator.eClass())) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str"");
    }
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicator.eClass().getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition)+ ""String_Node_Str"");
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges());
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank()) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
    }
  }
  String table=quote(ColumnHelper.getColumnSetFullName(tdColumn));
  String catalogName=getQuotedCatalogName(tdColumn);
  table=dbms().toQualifiedName(catalogName,null,table);
  String completedSqlString=null;
  if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        String genericSQL=sqlGenericExpression.getBody();
        int beginIndex=genericSQL.indexOf(dbms().orderBy());
        if (beginIndex != -1) {
          int lastIndex=genericSQL.lastIndexOf(dbms().desc());
          String orderByClause=genericSQL.substring(beginIndex,lastIndex);
          completedSqlString=completedSqlString + orderByClause + dbms().desc();
        }
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if ((dateAggregationType != null) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      completedSqlString=replaceVariablesLow(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUniqueCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getDuplicateCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicator.eClass())) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + language + ""String_Node_Str""+ completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=instantiateSqlExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}",0.9860124811706478
140404,"/** 
 * DOC scorreia Comment method ""getUnionCompletedString"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param whereExpression
 * @param rangeStrings
 * @return
 * @throws ParseException
 */
private String getUnionCompletedString(Indicator indicator,Expression sqlExpression,String colName,String table,List<String> whereExpression,List<String> rangeStrings) throws ParseException {
  StringBuffer buf=new StringBuffer();
  final int last=rangeStrings.size();
  String sqlGenericExpression=sqlExpression.getBody();
  for (int i=0; i < last; i++) {
    String singleSelect=getCompletedSingleSelect(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings.get(i));
    buf.append('(');
    buf.append(singleSelect);
    buf.append(')');
    if (i != last - 1) {
      buf.append(dbms().unionAll());
    }
  }
  return buf.toString();
}","/** 
 * DOC scorreia Comment method ""getUnionCompletedString"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param whereExpression
 * @param rangeStrings
 * @return
 * @throws ParseException
 */
private String getUnionCompletedString(Indicator indicator,Expression sqlExpression,String colName,String table,List<String> whereExpression,List<String> rangeStrings) throws ParseException {
  StringBuffer buf=new StringBuffer();
  final int last=rangeStrings.size();
  String sqlGenericExpression=sqlExpression.getBody();
  int idxOfOrderBY=sqlGenericExpression.indexOf(""String_Node_Str"");
  String orderBy=(idxOfOrderBY != -1) ? sqlGenericExpression.substring(idxOfOrderBY) : ""String_Node_Str"";
  String singleStatement=(idxOfOrderBY != -1) ? sqlGenericExpression.substring(0,idxOfOrderBY) : sqlGenericExpression;
  for (int i=0; i < last; i++) {
    String singleSelect=getCompletedSingleSelect(indicator,singleStatement,colName,table,whereExpression,rangeStrings.get(i));
    buf.append('(');
    buf.append(singleSelect);
    buf.append(')');
    if (i != last - 1) {
      buf.append(dbms().unionAll());
    }
  }
  if (idxOfOrderBY != -1) {
    buf.append(orderBy);
  }
  return buf.toString();
}",0.8028235294117647
140405,"@Override public void run(){
  IWorkbenchWindow aww=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  IWorkbenchPage ap=aww.getActivePage();
  ChangePerspectiveAction action=new ChangePerspectiveAction(SE_ID);
  action.run();
  IPath location=ResourcesPlugin.getWorkspace().getRoot().getLocation();
  for (  IFile file : folder) {
    String portableString=location.append(DQStructureManager.LIBRARIES).append(DQStructureManager.SOURCE_FILES).append(file.getName()).toPortableString();
    try {
      ap.openEditor(new SQLEditorInput(new File(portableString)),""String_Node_Str"");
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  IWorkbenchWindow aww=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  IWorkbenchPage ap=aww.getActivePage();
  ChangePerspectiveAction action=new ChangePerspectiveAction(SE_ID);
  action.run();
  IPath location=ResourcesPlugin.getWorkspace().getRoot().getLocation();
  for (  IFile file : folder) {
    String portableString=location.append(file.getFullPath()).toPortableString();
    try {
      ap.openEditor(new SQLEditorInput(new File(portableString)),""String_Node_Str"");
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
  }
}",0.9181890389197775
140406,"@Override public boolean performFinish(){
  try {
    IndicatorParameters parameters=indicator.getParameters();
    if (parameters == null) {
      isDirty=true;
      parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
      indicator.setParameters(parameters);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    TextParameters textParameters=parameters.getTextParameter();
    for (    AbstractIndicatorParameter formParam : AbstractIndicatorForm.getParameters()) {
      if (!ParamCompareFactory.compare(parameters,formParam)) {
        isDirty=true;
switch (formParam.getFormEnum()) {
case BinsDesignerForm:
          BinsDesignerParameter tempParam=(BinsDesignerParameter)formParam;
        int numOfBin=tempParam.getNumOfBins();
      int numOfShown=tempParam.getNumOfShown();
    double min=tempParam.getMinValue();
  double max=tempParam.getMaxValue();
Domain domain=tempParam.getUserDomian();
if (domain == null) {
domain=DomainHelper.createContiguousClosedBinsIntoDomain(""String_Node_Str"",numOfBin,min,max);
}
parameters.setBins(domain);
parameters.setTopN(numOfShown);
break;
case TextParametersForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextParameter textParam=(TextParameter)formParam;
textParameters.setIgnoreCase(textParam.isIngoreCase());
parameters.setTopN(textParam.getNumOfShown());
break;
case TextLengthForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextLengthParameter lengthParam=(TextLengthParameter)formParam;
textParameters.setUseBlank(lengthParam.isUseBlank());
textParameters.setUseNulls(lengthParam.isUseNull());
break;
case DataThresholdsForm:
DataThresholdsParameter dataParam=(DataThresholdsParameter)formParam;
String min1=dataParam.getMinThreshold();
String max1=dataParam.getMaxThreshold();
IndicatorHelper.setDataThreshold(indicator,min1,max1);
IndicatorHelper.propagateDataThresholdsInChildren(indicator);
break;
case IndicatorThresholdsForm:
IndicatorThresholdsParameter indiParam=(IndicatorThresholdsParameter)formParam;
String min2=indiParam.getMinThreshold();
String max2=indiParam.getMaxThreshold();
IndicatorHelper.setIndicatorThreshold(parameters,min2,max2);
break;
case TimeSlicesForm:
TimeSlicesParameter timeParam=(TimeSlicesParameter)formParam;
DateGrain dateGrain=DateGrain.get(timeParam.getDataUnit());
dateParameters.setDateAggregationType(dateGrain);
parameters.setTopN(timeParam.getNumOfShown());
break;
case NumbericNominalForm:
NumbericNominalParameter numbParam=(NumbericNominalParameter)formParam;
parameters.setTopN(numbParam.getNumberOfShown());
break;
case ExpectedValueForm:
ExpectedValueParameter expectedParam=(ExpectedValueParameter)formParam;
IndicatorHelper.setIndicatorExpectedValue(parameters,expectedParam.getExpectedValue());
default :
}
}
}
return true;
}
 catch (Exception e) {
e.printStackTrace();
}
return false;
}","@Override public boolean performFinish(){
  try {
    IndicatorParameters parameters=indicator.getParameters();
    if (parameters == null) {
      isDirty=true;
      parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
      indicator.setParameters(parameters);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    TextParameters textParameters=parameters.getTextParameter();
    for (    AbstractIndicatorParameter formParam : AbstractIndicatorForm.getParameters()) {
      if (!ParamCompareFactory.compare(parameters,formParam)) {
        isDirty=true;
switch (formParam.getFormEnum()) {
case BinsDesignerForm:
          BinsDesignerParameter tempParam=(BinsDesignerParameter)formParam;
        int numOfShown=tempParam.getNumOfShown();
      Domain domain=tempParam.getUserDomian();
    if (domain.getRanges().size() > 0) {
      parameters.setBins(domain);
    }
  parameters.setTopN(numOfShown);
break;
case TextParametersForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextParameter textParam=(TextParameter)formParam;
textParameters.setIgnoreCase(textParam.isIngoreCase());
parameters.setTopN(textParam.getNumOfShown());
break;
case TextLengthForm:
if (textParameters == null) {
textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
parameters.setTextParameter(textParameters);
}
TextLengthParameter lengthParam=(TextLengthParameter)formParam;
textParameters.setUseBlank(lengthParam.isUseBlank());
textParameters.setUseNulls(lengthParam.isUseNull());
break;
case DataThresholdsForm:
DataThresholdsParameter dataParam=(DataThresholdsParameter)formParam;
String min1=dataParam.getMinThreshold();
String max1=dataParam.getMaxThreshold();
IndicatorHelper.setDataThreshold(indicator,min1,max1);
IndicatorHelper.propagateDataThresholdsInChildren(indicator);
break;
case IndicatorThresholdsForm:
IndicatorThresholdsParameter indiParam=(IndicatorThresholdsParameter)formParam;
String min2=indiParam.getMinThreshold();
String max2=indiParam.getMaxThreshold();
IndicatorHelper.setIndicatorThreshold(parameters,min2,max2);
break;
case TimeSlicesForm:
TimeSlicesParameter timeParam=(TimeSlicesParameter)formParam;
DateGrain dateGrain=DateGrain.get(timeParam.getDataUnit());
dateParameters.setDateAggregationType(dateGrain);
parameters.setTopN(timeParam.getNumOfShown());
break;
case NumbericNominalForm:
NumbericNominalParameter numbParam=(NumbericNominalParameter)formParam;
parameters.setTopN(numbParam.getNumberOfShown());
break;
case ExpectedValueForm:
ExpectedValueParameter expectedParam=(ExpectedValueParameter)formParam;
IndicatorHelper.setIndicatorExpectedValue(parameters,expectedParam.getExpectedValue());
default :
}
}
}
return true;
}
 catch (Exception e) {
e.printStackTrace();
}
return false;
}",0.9311631061376738
140407,"public static boolean compare(IndicatorParameters indicatorParam,AbstractIndicatorParameter formParam){
  boolean same=true;
  TextParameters textParameters=indicatorParam.getTextParameter();
  DateParameters dateParameters=indicatorParam.getDateParameters();
switch (formParam.getFormEnum()) {
case BinsDesignerForm:
    BinsDesignerParameter binsParam=(BinsDesignerParameter)formParam;
  Domain newDomain=binsParam.getUserDomian();
Domain oldDomain=indicatorParam.getBins();
if (newDomain == null) {
newDomain=DomainHelper.createContiguousClosedBinsIntoDomain(""String_Node_Str"",binsParam.getNumOfBins(),binsParam.getMinValue(),binsParam.getMaxValue());
}
if (oldDomain != null) {
EList<RangeRestriction> ranges=oldDomain.getRanges();
EList<RangeRestriction> ranges2=newDomain.getRanges();
if (ranges.size() != ranges2.size()) {
same=false;
}
for (int i=0; i < ranges2.size() && same; i++) {
RangeRestriction d2=ranges2.get(i);
RangeRestriction d1=ranges.get(i);
double v1=((RealNumberValue)d1.getLowerValue()).getValue();
double v2=((RealNumberValue)d2.getLowerValue()).getValue();
if (v1 != v2) {
  same=false;
  break;
}
v1=((RealNumberValue)d1.getUpperValue()).getValue();
v2=((RealNumberValue)d2.getUpperValue()).getValue();
if (v1 != v2) {
  same=false;
  break;
}
}
}
 else {
same=false;
}
if (indicatorParam.getTopN() != binsParam.getNumOfShown()) {
same=false;
}
break;
case TextLengthForm:
TextLengthParameter lengthParam=(TextLengthParameter)formParam;
if (textParameters == null || textParameters.isUseBlank() != lengthParam.isUseBlank() || textParameters.isUseNulls() != lengthParam.isUseNull()) {
same=false;
}
break;
case TextParametersForm:
TextParameter textParam=(TextParameter)formParam;
if (textParameters == null || textParameters.isIgnoreCase() != textParam.isIngoreCase() || indicatorParam.getTopN() != textParam.getNumOfShown()) {
same=false;
}
break;
case DataThresholdsForm:
same=checkDomain(formParam,indicatorParam.getDataValidDomain());
break;
case IndicatorThresholdsForm:
same=checkDomain(formParam,indicatorParam.getIndicatorValidDomain());
break;
case TimeSlicesForm:
TimeSlicesParameter timeParam=(TimeSlicesParameter)formParam;
DateGrain dateGrain=DateGrain.get(timeParam.getDataUnit());
if (dateParameters == null || dateGrain.compareTo(dateParameters.getDateAggregationType()) != 0 || timeParam.getNumOfShown() != indicatorParam.getTopN()) {
same=false;
}
break;
case NumbericNominalForm:
NumbericNominalParameter numbParam=(NumbericNominalParameter)formParam;
same=indicatorParam.getTopN() == numbParam.getNumberOfShown();
break;
case ExpectedValueForm:
ExpectedValueParameter expParam=(ExpectedValueParameter)formParam;
String oldValue=IndicatorHelper.getExpectedValue(indicatorParam);
String newValue=expParam.getExpectedValue();
if (oldValue != null && newValue != null) {
same=newValue.equals(oldValue);
}
 else {
same=false;
}
break;
default :
}
return same;
}","public static boolean compare(IndicatorParameters indicatorParam,AbstractIndicatorParameter formParam){
  boolean same=true;
  TextParameters textParameters=indicatorParam.getTextParameter();
  DateParameters dateParameters=indicatorParam.getDateParameters();
switch (formParam.getFormEnum()) {
case BinsDesignerForm:
    BinsDesignerParameter binsParam=(BinsDesignerParameter)formParam;
  Domain newDomain=binsParam.getUserDomian();
Domain oldDomain=indicatorParam.getBins();
if (oldDomain != null) {
EList<RangeRestriction> ranges=oldDomain.getRanges();
EList<RangeRestriction> ranges2=newDomain.getRanges();
if (ranges.size() != ranges2.size()) {
  same=false;
}
for (int i=0; i < ranges2.size() && same; i++) {
  RangeRestriction d2=ranges2.get(i);
  RangeRestriction d1=ranges.get(i);
  double v1=((RealNumberValue)d1.getLowerValue()).getValue();
  double v2=((RealNumberValue)d2.getLowerValue()).getValue();
  if (v1 != v2) {
    same=false;
    break;
  }
  v1=((RealNumberValue)d1.getUpperValue()).getValue();
  v2=((RealNumberValue)d2.getUpperValue()).getValue();
  if (v1 != v2) {
    same=false;
    break;
  }
}
}
 else {
same=false;
}
if (indicatorParam.getTopN() != binsParam.getNumOfShown()) {
same=false;
}
break;
case TextLengthForm:
TextLengthParameter lengthParam=(TextLengthParameter)formParam;
if (textParameters == null || textParameters.isUseBlank() != lengthParam.isUseBlank() || textParameters.isUseNulls() != lengthParam.isUseNull()) {
same=false;
}
break;
case TextParametersForm:
TextParameter textParam=(TextParameter)formParam;
if (textParameters == null || textParameters.isIgnoreCase() != textParam.isIngoreCase() || indicatorParam.getTopN() != textParam.getNumOfShown()) {
same=false;
}
break;
case DataThresholdsForm:
same=checkDomain(formParam,indicatorParam.getDataValidDomain());
break;
case IndicatorThresholdsForm:
same=checkDomain(formParam,indicatorParam.getIndicatorValidDomain());
break;
case TimeSlicesForm:
TimeSlicesParameter timeParam=(TimeSlicesParameter)formParam;
DateGrain dateGrain=DateGrain.get(timeParam.getDataUnit());
if (dateParameters == null || dateGrain.compareTo(dateParameters.getDateAggregationType()) != 0 || timeParam.getNumOfShown() != indicatorParam.getTopN()) {
same=false;
}
break;
case NumbericNominalForm:
NumbericNominalParameter numbParam=(NumbericNominalParameter)formParam;
same=indicatorParam.getTopN() == numbParam.getNumberOfShown();
break;
case ExpectedValueForm:
ExpectedValueParameter expParam=(ExpectedValueParameter)formParam;
String oldValue=IndicatorHelper.getExpectedValue(indicatorParam);
String newValue=expParam.getExpectedValue();
if (oldValue != null && newValue != null) {
same=newValue.equals(oldValue);
}
 else {
same=false;
}
break;
default :
}
return same;
}",0.8992576882290562
140408,"@SuppressWarnings(""String_Node_Str"") public Domain getUserDomian(){
  if (getBinsData() != null) {
    List<SliceEntity> tableData=(List<SliceEntity>)getBinsData();
    Domain userDomain=DomainHelper.createDomain(""String_Node_Str"");
    for (    SliceEntity entity : tableData) {
      try {
        double min=TextFormatFactory.createLocalFormatValue(entity.getLowValue()).doubleValue();
        double max=TextFormatFactory.createLocalFormatValue(entity.getHighValue()).doubleValue();
        RangeRestriction rangeRestriction=DomainHelper.createRealRangeRestriction(min,max);
        userDomain.getRanges().add(rangeRestriction);
      }
 catch (      Exception e) {
      }
    }
    return userDomain;
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public Domain getUserDomian(){
  if (getBinsData() != null) {
    List<SliceEntity> tableData=(List<SliceEntity>)getBinsData();
    Domain userDomain=DomainHelper.createDomain(""String_Node_Str"");
    for (    SliceEntity entity : tableData) {
      try {
        double min=TextFormatFactory.createLocalFormatValue(entity.getLowValue()).doubleValue();
        double max=TextFormatFactory.createLocalFormatValue(entity.getHighValue()).doubleValue();
        RangeRestriction rangeRestriction=DomainHelper.createRealRangeRestriction(min,max);
        userDomain.getRanges().add(rangeRestriction);
      }
 catch (      Exception e) {
      }
    }
    return userDomain;
  }
  return DomainHelper.createContiguousClosedBinsIntoDomain(""String_Node_Str"",getNumOfBins(),getMinValue(),getMaxValue());
}",0.9263292761050608
140409,"private void processRowButtonSelect(boolean selection,List<Button> rowButtons){
  if (selection) {
    for (    Button btn : rowButtons) {
      ColumnIndicator columnIndicator=(ColumnIndicator)btn.getData(COLUMNINDICATORFLAG);
      IIndicatorNode node=(IIndicatorNode)btn.getData();
      if (ColumnIndicatorRule.match(node,columnIndicator)) {
        btn.setSelection(true);
        columnIndicator.addTempIndicatorEnum(node.getIndicatorEnum());
      }
    }
  }
 else {
    for (    Button btn : rowButtons) {
      ColumnIndicator columnIndicator=(ColumnIndicator)btn.getData(COLUMNINDICATORFLAG);
      IIndicatorNode node=(IIndicatorNode)btn.getData();
      btn.setSelection(false);
      columnIndicator.removeTempIndicatorEnum(node.getIndicatorEnum());
    }
  }
}","private void processRowButtonSelect(boolean selection,List<Button> rowButtons){
  for (  Button btn : rowButtons) {
    ColumnIndicator columnIndicator=(ColumnIndicator)btn.getData(COLUMNINDICATORFLAG);
    IIndicatorNode node=(IIndicatorNode)btn.getData();
    IndicatorEnum indicatorEnum=node.getIndicatorEnum();
    if (selection && ColumnIndicatorRule.match(node,columnIndicator)) {
      btn.setSelection(true);
      if (indicatorEnum != null) {
        columnIndicator.addTempIndicatorEnum(node.getIndicatorEnum());
      }
    }
 else {
      btn.setSelection(false);
      columnIndicator.removeTempIndicatorEnum(node.getIndicatorEnum());
    }
  }
}",0.6122733612273361
140410,"protected TdColumn[] getColumns(){
  Object obj=getSelection().getFirstElement();
  if (obj instanceof TdColumn) {
    TdColumn[] column=new TdColumn[getSelection().size()];
    for (int i=0; i < getSelection().size(); i++) {
      column[i]=(TdColumn)getSelection().toArray()[i];
    }
    return column;
  }
  if (obj instanceof ColumnSet) {
    List<TdColumn> list=new ArrayList<TdColumn>();
    Object[] selections=getSelection().toArray();
    for (    Object currentObj : selections) {
      ColumnSet columnSet=(ColumnSet)currentObj;
      if (ColumnSetHelper.getColumns(columnSet).size() > 0) {
        list.addAll(ColumnSetHelper.getColumns(columnSet));
      }
 else {
        Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
        TdDataProvider provider=DataProviderHelper.getTdDataProvider(parentCatalogOrSchema);
        try {
          list.addAll(DqRepositoryViewService.getColumns(provider,columnSet,null,true));
          NeedSaveDataProviderHelper.register(provider.eResource().getURI().path(),provider);
        }
 catch (        TalendException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
    }
    return list.toArray(new TdColumn[list.size()]);
  }
  return null;
}","protected TdColumn[] getColumns(){
  Object obj=getSelection().getFirstElement();
  if (obj instanceof TdColumn) {
    TdColumn[] column=new TdColumn[getSelection().size()];
    for (int i=0; i < getSelection().size(); i++) {
      column[i]=(TdColumn)getSelection().toArray()[i];
    }
    return column;
  }
  if (obj instanceof ColumnSet) {
    List<TdColumn> list=new ArrayList<TdColumn>();
    Object[] selections=getSelection().toArray();
    for (    Object currentObj : selections) {
      ColumnSet columnSet=(ColumnSet)currentObj;
      if (ColumnSetHelper.getColumns(columnSet).size() > 0) {
        list.addAll(ColumnSetHelper.getColumns(columnSet));
      }
 else {
        Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
        TdDataProvider provider=DataProviderHelper.getTdDataProvider(parentCatalogOrSchema);
        try {
          List<TdColumn> columns=DqRepositoryViewService.getColumns(provider,columnSet,null,true);
          ColumnSetHelper.addColumns(columnSet,columns);
          list.addAll(columns);
          NeedSaveDataProviderHelper.register(provider.eResource().getURI().path(),provider);
        }
 catch (        TalendException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
    }
    NeedSaveDataProviderHelper.saveAllDataProvider();
    return list.toArray(new TdColumn[list.size()]);
  }
  return null;
}",0.9228453142642078
140411,"public DQRespositoryView(){
  super();
  CorePlugin.getDefault().checkDQStructure();
}","public DQRespositoryView(){
  super();
  CorePlugin.getDefault().checkDQStructure();
  CorePlugin.getDefault().setRespositoryView(this);
}",0.7678571428571429
140412,"/** 
 * @param form
 * @param toolkit
 * @param topComp
 */
void createInformationSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,""String_Node_Str"",false,""String_Node_Str"");
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout(2,false));
  Label loginLabel=new Label(sectionClient,SWT.NONE);
  loginLabel.setText(""String_Node_Str"");
  loginText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(loginText);
  Label passwordLabel=new Label(sectionClient,SWT.NONE);
  passwordLabel.setText(""String_Node_Str"");
  passwordText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(passwordText);
  TdProviderConnection connection=DataProviderHelper.getTdProviderConnection(tdDataProvider).getObject();
  String loginValue=TaggedValueHelper.getValue(PluginConstant.USER_PROPERTY,connection);
  loginText.setText(loginValue == null ? PluginConstant.EMPTY_STRING : loginValue);
  String passwordValue=TaggedValueHelper.getValue(PluginConstant.PASSWORD_PROPERTY,connection);
  passwordText.setText(passwordValue == null ? PluginConstant.EMPTY_STRING : passwordValue);
  Label urlLabel=new Label(sectionClient,SWT.NONE);
  urlLabel.setText(""String_Node_Str"");
  urlText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(urlText);
  TypedReturnCode<TdProviderConnection> trc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  String urlValue=(trc.isOk()) ? trc.getObject().getConnectionString() : PluginConstant.EMPTY_STRING;
  urlText.setText(urlValue == null ? PluginConstant.EMPTY_STRING : urlValue);
  urlText.setEnabled(false);
  ModifyListener listener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      fireTextChange();
    }
  }
;
  loginText.addModifyListener(listener);
  passwordText.addModifyListener(listener);
  section.setClient(sectionClient);
}","/** 
 * @param form
 * @param toolkit
 * @param topComp
 */
void createInformationSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,""String_Node_Str"",false,""String_Node_Str"");
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout(2,false));
  Label loginLabel=new Label(sectionClient,SWT.NONE);
  loginLabel.setText(""String_Node_Str"");
  loginText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(loginText);
  Label passwordLabel=new Label(sectionClient,SWT.NONE);
  passwordLabel.setText(""String_Node_Str"");
  passwordText=new Text(sectionClient,SWT.BORDER | SWT.PASSWORD);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(passwordText);
  TdProviderConnection connection=DataProviderHelper.getTdProviderConnection(tdDataProvider).getObject();
  String loginValue=TaggedValueHelper.getValue(PluginConstant.USER_PROPERTY,connection);
  loginText.setText(loginValue == null ? PluginConstant.EMPTY_STRING : loginValue);
  String passwordValue=TaggedValueHelper.getValue(PluginConstant.PASSWORD_PROPERTY,connection);
  passwordText.setText(passwordValue == null ? PluginConstant.EMPTY_STRING : passwordValue);
  Label urlLabel=new Label(sectionClient,SWT.NONE);
  urlLabel.setText(""String_Node_Str"");
  urlText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(urlText);
  TypedReturnCode<TdProviderConnection> trc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  String urlValue=(trc.isOk()) ? trc.getObject().getConnectionString() : PluginConstant.EMPTY_STRING;
  urlText.setText(urlValue == null ? PluginConstant.EMPTY_STRING : urlValue);
  urlText.setEnabled(false);
  ModifyListener listener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      fireTextChange();
    }
  }
;
  loginText.addModifyListener(listener);
  passwordText.addModifyListener(listener);
  section.setClient(sectionClient);
}",0.9963208241353936
140413,"public Collection<AnalysisEntity> getAllAnalysis(){
  if (resourceChanged) {
    allAnalysisMap.clear();
    IFolder defaultAnalysFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(PluginConstant.DATA_PROFILING_PROJECTNAME).getFolder(DQStructureManager.ANALYSIS);
    try {
      searchAllAnalysis(defaultAnalysFolder);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    resourceChanged=false;
  }
  return allAnalysisMap.values();
}","public Collection<AnalysisEntity> getAllAnalysis(){
  if (resourceChanged) {
    this.clear();
    IFolder defaultAnalysFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(PluginConstant.DATA_PROFILING_PROJECTNAME).getFolder(DQStructureManager.ANALYSIS);
    try {
      searchAllAnalysis(defaultAnalysFolder);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    resourceChanged=false;
  }
  return allAnalysisMap.values();
}",0.9803921568627452
140414,"private static CategoryDataset createSummaryDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();
  if (isCreate) {
    Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
    for (    IndicatorUnit indicatorUnit : indicatorUnitList) {
      IndicatorCommonUtil.compositeIndicatorMap(indicatorUnit);
      if (indicatorUnit.isExcuted()) {
        double doubleValue=Double.valueOf(indicatorUnit.getValue().toString());
        map.put(indicatorUnit.getType(),doubleValue);
      }
    }
    if (map.size() != 6) {
      DefaultCategoryDataset barDataset=new DefaultCategoryDataset();
      if (map.get(IndicatorEnum.MinValueIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MinValueIndicatorEnum),""String_Node_Str"",IndicatorEnum.MinValueIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.LowerQuartileIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.LowerQuartileIndicatorEnum),""String_Node_Str"",IndicatorEnum.LowerQuartileIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MeanIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MeanIndicatorEnum),""String_Node_Str"",IndicatorEnum.MeanIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MedianIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MedianIndicatorEnum),""String_Node_Str"",IndicatorEnum.MedianIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.UpperQuartileIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.UpperQuartileIndicatorEnum),""String_Node_Str"",IndicatorEnum.UpperQuartileIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MaxValueIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MaxValueIndicatorEnum),""String_Node_Str"",IndicatorEnum.MaxValueIndicatorEnum.getLabel());
      }
      renderer3d.setSeriesPaint(0,Color.RED);
      return barDataset;
    }
    BoxAndWhiskerItem item=createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    BoxAndWhiskerItem item=createBoxAndWhiskerItem(40.0,45.0,30.0,60.0,15.0,75.0,null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
  }
  return dataset;
}","private static CategoryDataset createSummaryDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();
  if (isCreate) {
    Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
    for (    IndicatorUnit indicatorUnit : indicatorUnitList) {
      IndicatorCommonUtil.compositeIndicatorMap(indicatorUnit);
      if (indicatorUnit.isExcuted()) {
        double doubleValue=Double.parseDouble(indicatorUnit.getValue().toString());
        map.put(indicatorUnit.getType(),doubleValue);
      }
    }
    if (map.size() != 6) {
      DefaultCategoryDataset barDataset=new DefaultCategoryDataset();
      if (map.get(IndicatorEnum.MinValueIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MinValueIndicatorEnum),""String_Node_Str"",IndicatorEnum.MinValueIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.LowerQuartileIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.LowerQuartileIndicatorEnum),""String_Node_Str"",IndicatorEnum.LowerQuartileIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MeanIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MeanIndicatorEnum),""String_Node_Str"",IndicatorEnum.MeanIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MedianIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MedianIndicatorEnum),""String_Node_Str"",IndicatorEnum.MedianIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.UpperQuartileIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.UpperQuartileIndicatorEnum),""String_Node_Str"",IndicatorEnum.UpperQuartileIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MaxValueIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MaxValueIndicatorEnum),""String_Node_Str"",IndicatorEnum.MaxValueIndicatorEnum.getLabel());
      }
      renderer3d.setSeriesPaint(0,Color.RED);
      return barDataset;
    }
    BoxAndWhiskerItem item=createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    BoxAndWhiskerItem item=createBoxAndWhiskerItem(40.0,45.0,30.0,60.0,15.0,75.0,null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
  }
  return dataset;
}",0.9965999244427654
140415,"public static String createStandardNumber(Object input){
  DecimalFormat format=(DecimalFormat)DecimalFormat.getNumberInstance();
  format.applyPattern(""String_Node_Str"");
  try {
    return format.format(new Double(input.toString()));
  }
 catch (  Exception ne) {
    return ""String_Node_Str"";
  }
}","public static Number createStandardNumber(Object input){
  DecimalFormat format=(DecimalFormat)DecimalFormat.getNumberInstance();
  format.applyPattern(""String_Node_Str"");
  try {
    return format.parse(format.format(new Double(input.toString())));
  }
 catch (  Exception ne) {
    return 0;
  }
}",0.9266666666666666
140416,"@SuppressWarnings(""String_Node_Str"") public Domain getUserDomian(){
  if (getBinsData() != null) {
    List<SliceEntity> tableData=(List<SliceEntity>)getBinsData();
    Domain userDomain=DomainHelper.createDomain(""String_Node_Str"");
    for (    SliceEntity entity : tableData) {
      double min=Double.parseDouble(entity.getLowValue());
      double max=Double.parseDouble(entity.getHighValue());
      RangeRestriction rangeRestriction=DomainHelper.createRealRangeRestriction(min,max);
      userDomain.getRanges().add(rangeRestriction);
    }
    return userDomain;
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public Domain getUserDomian(){
  if (getBinsData() != null) {
    List<SliceEntity> tableData=(List<SliceEntity>)getBinsData();
    Domain userDomain=DomainHelper.createDomain(""String_Node_Str"");
    for (    SliceEntity entity : tableData) {
      double min=TextFormatFactory.createLocalFormatValue(entity.getLowValue()).doubleValue();
      double max=TextFormatFactory.createLocalFormatValue(entity.getHighValue()).doubleValue();
      RangeRestriction rangeRestriction=DomainHelper.createRealRangeRestriction(min,max);
      userDomain.getRanges().add(rangeRestriction);
    }
    return userDomain;
  }
  return null;
}",0.8881789137380192
140417,"public CreateUserFolderAction(){
  super(""String_Node_Str"");
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.FOLDER_NEW_IMAGE));
}","public CreateUserFolderAction(){
  super(""String_Node_Str"");
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.FOLDER_NEW_IMAGE));
  setId(""String_Node_Str"");
}",0.9090909090909092
140418,"@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(""String_Node_Str"" + analysis.getName() + ""String_Node_Str"",IProgressMonitor.UNKNOWN);
  final ReturnCode executed=AnalysisExecutorSelector.executeAnalysis(finalAnalysis);
  monitor.done();
  if (executed.isOk()) {
    if (log.isInfoEnabled()) {
      int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
      log.info(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    }
    AnaResourceFileHelper.getInstance().save(finalAnalysis);
    if (page != null) {
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          if (page instanceof ColumnMasterDetailsPage) {
            ColumnMasterDetailsPage columnMasterPage=(ColumnMasterDetailsPage)page;
            columnMasterPage.refreshChart(columnMasterPage.getForm());
          }
 else           if (page instanceof ConnectionMasterDetailsPage) {
            ConnectionMasterDetailsPage connDetailsPage=(ConnectionMasterDetailsPage)page;
            connDetailsPage.doSetInput();
          }
        }
      }
);
    }
    return Status.OK_STATUS;
  }
 else {
    int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
    log.warn(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MessageDialogWithToggle.openError(null,""String_Node_Str"",""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed.getMessage());
      }
    }
);
    return Status.CANCEL_STATUS;
  }
}","@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(""String_Node_Str"" + analysis.getName() + ""String_Node_Str"",IProgressMonitor.UNKNOWN);
  final ReturnCode executed=AnalysisExecutorSelector.executeAnalysis(finalAnalysis);
  monitor.done();
  AnaResourceFileHelper.getInstance().save(finalAnalysis);
  if (page != null) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        if (page instanceof ColumnMasterDetailsPage) {
          ColumnMasterDetailsPage columnMasterPage=(ColumnMasterDetailsPage)page;
          columnMasterPage.refreshChart(columnMasterPage.getForm());
        }
 else         if (page instanceof ConnectionMasterDetailsPage) {
          ConnectionMasterDetailsPage connDetailsPage=(ConnectionMasterDetailsPage)page;
          connDetailsPage.doSetInput();
        }
      }
    }
);
  }
  if (executed.isOk()) {
    if (log.isInfoEnabled()) {
      int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
      log.info(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    }
    return Status.OK_STATUS;
  }
 else {
    int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
    log.warn(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MessageDialogWithToggle.openError(null,""String_Node_Str"",""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed.getMessage());
      }
    }
);
    return Status.CANCEL_STATUS;
  }
}",0.672367717797969
140419,"private void createAnalysisSummarySection(ScrolledForm form,Composite topComp){
  Section summarySection=this.createSection(form,topComp,""String_Node_Str"",false,null);
  Composite sectionClient=toolkit.createComposite(summarySection);
  sectionClient.setLayout(new GridLayout(2,false));
  Composite leftComp=new Composite(sectionClient,SWT.NONE);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(leftComp);
  leftComp.setLayout(new GridLayout());
  Composite rightComp=new Composite(sectionClient,SWT.NONE);
  rightComp.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,true).applyTo(rightComp);
  EList<ModelElement> analysedElements=this.connectionAnalysis.getContext().getAnalysedElements();
  tdDataProvider=null;
  if (analysedElements.size() > 0) {
    tdDataProvider=(TdDataProvider)analysedElements.get(0);
  }
  TdProviderConnection providerConnection=DataProviderHelper.getTdProviderConnection(tdDataProvider).getObject();
  String connectionStr=providerConnection.getConnectionString();
  Properties pameterProperties=SupportDBUrlStore.getInstance().getDBPameterProperties(connectionStr);
  String labelContent=pameterProperties.getProperty(PluginConstant.DBTYPE_PROPERTY);
  Label leftLabel=new Label(leftComp,SWT.NONE);
  leftLabel.setText(""String_Node_Str"" + (labelContent == null ? PluginConstant.EMPTY_STRING : labelContent));
  leftLabel.setLayoutData(new GridData());
  leftLabel=new Label(leftComp,SWT.NONE);
  labelContent=pameterProperties.getProperty(PluginConstant.HOSTNAME_PROPERTY);
  leftLabel.setText(""String_Node_Str"" + (labelContent == null ? PluginConstant.EMPTY_STRING : labelContent));
  leftLabel.setLayoutData(new GridData());
  leftLabel=new Label(leftComp,SWT.NONE);
  labelContent=pameterProperties.getProperty(PluginConstant.PORT_PROPERTY);
  leftLabel.setText(""String_Node_Str"" + (labelContent == null ? PluginConstant.EMPTY_STRING : labelContent));
  leftLabel.setLayoutData(new GridData());
  leftLabel=new Label(leftComp,SWT.NONE);
  labelContent=TaggedValueHelper.getValue(PluginConstant.USER_PROPERTY,providerConnection);
  leftLabel.setText(""String_Node_Str"" + (labelContent == null ? PluginConstant.EMPTY_STRING : labelContent));
  leftLabel.setLayoutData(new GridData());
  List<TdCatalog> tdCatalogs=DataProviderHelper.getTdCatalogs(tdDataProvider);
  List<TdSchema> tdSchema=DataProviderHelper.getTdSchema(tdDataProvider);
  leftLabel=new Label(leftComp,SWT.NONE);
  leftLabel.setText(""String_Node_Str"" + tdCatalogs.size());
  leftLabel.setLayoutData(new GridData());
  leftLabel=new Label(leftComp,SWT.NONE);
  leftLabel.setText(""String_Node_Str"" + tdSchema.size());
  leftLabel.setLayoutData(new GridData());
  ExecutionInformations resultMetadata=connectionAnalysis.getResults().getResultMetadata();
  Label rightLabel=new Label(rightComp,SWT.NONE);
  rightLabel.setText(""String_Node_Str"" + getFormatDateStr(connectionAnalysis.getCreationDate()));
  rightLabel.setLayoutData(new GridData());
  rightLabel=new Label(rightComp,SWT.NONE);
  rightLabel.setText(""String_Node_Str"" + getFormatDateStr(resultMetadata.getExecutionDate()));
  rightLabel.setLayoutData(new GridData());
  rightLabel=new Label(rightComp,SWT.NONE);
  rightLabel.setText(""String_Node_Str"" + resultMetadata.getExecutionDuration() / 1000.0d + ""String_Node_Str"");
  rightLabel.setLayoutData(new GridData());
  rightLabel=new Label(rightComp,SWT.NONE);
  String executeStatus=(resultMetadata.isLastRunOk() ? ""String_Node_Str"" : ""String_Node_Str"");
  rightLabel.setText(""String_Node_Str"" + (resultMetadata.getExecutionNumber() == 0 ? PluginConstant.EMPTY_STRING : executeStatus));
  rightLabel.setLayoutData(new GridData());
  rightLabel=new Label(rightComp,SWT.NONE);
  rightLabel.setText(""String_Node_Str"" + resultMetadata.getExecutionNumber());
  rightLabel.setLayoutData(new GridData());
  rightLabel=new Label(rightComp,SWT.NONE);
  rightLabel.setText(""String_Node_Str"" + getFormatDateStr(resultMetadata.getExecutionDate()));
  rightLabel.setLayoutData(new GridData());
  sectionClient.layout();
  summarySection.setClient(sectionClient);
}","private void createAnalysisSummarySection(ScrolledForm form,Composite topComp){
  Section summarySection=this.createSection(form,topComp,""String_Node_Str"",false,null);
  sumSectionClient=toolkit.createComposite(summarySection);
  sumSectionClient.setLayout(new GridLayout(2,false));
  refreshSumSection();
  summarySection.setClient(sumSectionClient);
}",0.126012601260126
140420,"/** 
 * DOC qzhang Comment method ""doSetInput"".
 */
public void doSetInput(){
  List<CatalogIndicator> indicatorList=null;
  if (this.connectionAnalysis.getResults().getIndicators().size() > 0) {
    ConnectionIndicator conIndicator=(ConnectionIndicator)connectionAnalysis.getResults().getIndicators().get(0);
    indicatorList=conIndicator.getCatalogIndicators();
  }
 else {
    indicatorList=new ArrayList<CatalogIndicator>();
  }
  statisticalViewer.setInput(indicatorList);
}","/** 
 * DOC qzhang Comment method ""doSetInput"".
 */
public void doSetInput(){
  List<CatalogIndicator> indicatorList=null;
  if (this.connectionAnalysis.getResults().getIndicators().size() > 0) {
    ConnectionIndicator conIndicator=(ConnectionIndicator)connectionAnalysis.getResults().getIndicators().get(0);
    indicatorList=conIndicator.getCatalogIndicators();
  }
 else {
    indicatorList=new ArrayList<CatalogIndicator>();
  }
  statisticalViewer.setInput(indicatorList);
  refreshSumSection();
}",0.9766022380467956
140421,"/** 
 * Method ""listTdDataProviders"" list all the connections in the given folder.
 * @param folder the path to the folder containing TdDataProviders
 * @return the list of all TdDataProviders in the folder (never null).
 */
public static List<TdDataProvider> listTdDataProviders(IFolder folder){
  ArrayList<TdDataProvider> providers=new ArrayList<TdDataProvider>();
  IResource[] members=null;
  try {
    members=folder.members();
  }
 catch (  CoreException e) {
    e.printStackTrace();
    return new ArrayList<TdDataProvider>();
  }
  for (  IResource res : members) {
    if ((res instanceof IFile) && (FactoriesUtil.PROV.equals(res.getFileExtension()))) {
      TypedReturnCode<TdDataProvider> rc=readFromFile((IFile)res);
      if (rc.isOk()) {
        TdDataProvider dataProvider=rc.getObject();
        providers.add(dataProvider);
      }
 else {
        log.warn(rc.getMessage());
      }
    }
  }
  return providers;
}","/** 
 * Method ""listTdDataProviders"" list all the connections in the given folder.
 * @param folder the path to the folder containing TdDataProviders
 * @param containSubFolders if it contains all sub folders.
 * @return the list of all TdDataProviders in the folder (never null).
 */
public static List<TdDataProvider> listTdDataProviders(IFolder folder,boolean containSubFolders){
  ArrayList<TdDataProvider> providers=new ArrayList<TdDataProvider>();
  IResource[] members=null;
  try {
    members=folder.members();
  }
 catch (  CoreException e) {
    e.printStackTrace();
    return new ArrayList<TdDataProvider>();
  }
  for (  IResource res : members) {
    if ((res instanceof IFile) && (FactoriesUtil.PROV.equals(res.getFileExtension()))) {
      TypedReturnCode<TdDataProvider> rc=readFromFile((IFile)res);
      if (rc.isOk()) {
        TdDataProvider dataProvider=rc.getObject();
        providers.add(dataProvider);
      }
 else {
        log.warn(rc.getMessage());
      }
    }
 else {
      if (containSubFolders && (res instanceof IFolder)) {
        providers.addAll(listTdDataProviders((IFolder)res,containSubFolders));
      }
    }
  }
  return providers;
}",0.8836329233680227
140422,"/** 
 * DOC qzhang Comment method ""activeData"".
 */
public void activeData(){
  if (SE_ID.equals(perspectiveId)) {
    IFolder folder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.METADATA).getFolder(DQStructureManager.DB_CONNECTIONS);
    List<TdDataProvider> listTdDataProviders=DqRepositoryViewService.listTdDataProviders(folder);
    SQLExplorerPlugin default1=SQLExplorerPlugin.getDefault();
    AliasManager aliasManager=default1.getAliasManager();
    aliasManager.getAliases().clear();
    Set<User> users=new HashSet<User>();
    try {
      aliasManager.closeAllConnections();
    }
 catch (    ExplorerException e1) {
      log.error(e1,e1);
    }
    for (    TdDataProvider tdDataProvider : listTdDataProviders) {
      TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
      TdProviderConnection providerConnection=tdPc.getObject();
      String url=providerConnection.getConnectionString();
      Alias alias=new Alias(tdDataProvider.getName());
      String user=TaggedValueHelper.getValue(""String_Node_Str"",providerConnection);
      String password=TaggedValueHelper.getValue(""String_Node_Str"",providerConnection);
      User previousUser=new User(user,password);
      alias.setDefaultUser(previousUser);
      alias.setAutoLogon(false);
      alias.setConnectAtStartup(true);
      alias.setUrl(url);
      ManagedDriver manDr=default1.getDriverModel().getDriver(EDriverName.getId(providerConnection.getDriverClassName()));
      alias.setDriver(manDr);
      try {
        aliasManager.addAlias(alias);
      }
 catch (      ExplorerException e) {
        log.error(e,e);
      }
      users.add(previousUser);
    }
    aliasManager.modelChanged();
  }
}","/** 
 * DOC qzhang Comment method ""activeData"".
 */
public void activeData(){
  if (SE_ID.equals(perspectiveId)) {
    IFolder folder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.METADATA).getFolder(DQStructureManager.DB_CONNECTIONS);
    List<TdDataProvider> listTdDataProviders=DqRepositoryViewService.listTdDataProviders(folder,true);
    SQLExplorerPlugin default1=SQLExplorerPlugin.getDefault();
    AliasManager aliasManager=default1.getAliasManager();
    aliasManager.getAliases().clear();
    Set<User> users=new HashSet<User>();
    try {
      aliasManager.closeAllConnections();
    }
 catch (    ExplorerException e1) {
      log.error(e1,e1);
    }
    for (    TdDataProvider tdDataProvider : listTdDataProviders) {
      TypedReturnCode<TdProviderConnection> tdPc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
      TdProviderConnection providerConnection=tdPc.getObject();
      String url=providerConnection.getConnectionString();
      Alias alias=new Alias(tdDataProvider.getName());
      String user=TaggedValueHelper.getValue(""String_Node_Str"",providerConnection);
      String password=TaggedValueHelper.getValue(""String_Node_Str"",providerConnection);
      User previousUser=new User(user,password);
      alias.setDefaultUser(previousUser);
      alias.setAutoLogon(false);
      alias.setConnectAtStartup(true);
      alias.setUrl(url);
      ManagedDriver manDr=default1.getDriverModel().getDriver(EDriverName.getId(providerConnection.getDriverClassName()));
      alias.setDriver(manDr);
      try {
        aliasManager.addAlias(alias);
      }
 catch (      ExplorerException e) {
        log.error(e,e);
      }
      users.add(previousUser);
    }
    aliasManager.modelChanged();
  }
}",0.9985767150583548
140423,"public static boolean compare(IndicatorParameters indicatorParam,AbstractIndicatorParameter formParam){
  boolean same=true;
  TextParameters textParameters=indicatorParam.getTextParameter();
  DateParameters dateParameters=indicatorParam.getDateParameters();
switch (formParam.getFormEnum()) {
case BinsDesignerForm:
    BinsDesignerParameter binsParam=(BinsDesignerParameter)formParam;
  Domain newDomain=binsParam.getUserDomian();
Domain oldDomain=indicatorParam.getBins();
if (oldDomain != null) {
EList<RangeRestriction> ranges=oldDomain.getRanges();
EList<RangeRestriction> ranges2=newDomain.getRanges();
if (ranges.size() != ranges2.size()) {
  same=false;
}
for (int i=0; i < ranges2.size() && same; i++) {
  RangeRestriction d2=ranges2.get(i);
  RangeRestriction d1=ranges.get(i);
  double v1=((RealNumberValue)d1.getLowerValue()).getValue();
  double v2=((RealNumberValue)d2.getLowerValue()).getValue();
  if (v1 != v2) {
    same=false;
    break;
  }
  v1=((RealNumberValue)d1.getUpperValue()).getValue();
  v2=((RealNumberValue)d2.getUpperValue()).getValue();
  if (v1 != v2) {
    same=false;
    break;
  }
}
}
 else {
same=false;
}
if (indicatorParam.getTopN() != binsParam.getNumOfShown()) {
same=false;
}
break;
case TextLengthForm:
TextLengthParameter lengthParam=(TextLengthParameter)formParam;
if (textParameters == null || textParameters.isUseBlank() != lengthParam.isUseBlank() || textParameters.isUseNulls() != lengthParam.isUseNull()) {
same=false;
}
break;
case TextParametersForm:
TextParameter textParam=(TextParameter)formParam;
if (textParameters == null || textParameters.isIgnoreCase() != textParam.isIngoreCase() || indicatorParam.getTopN() != textParam.getNumOfShown()) {
same=false;
}
break;
case DataThresholdsForm:
same=checkDomain(formParam,indicatorParam.getDataValidDomain());
break;
case IndicatorThresholdsForm:
same=checkDomain(formParam,indicatorParam.getIndicatorValidDomain());
break;
case TimeSlicesForm:
TimeSlicesParameter timeParam=(TimeSlicesParameter)formParam;
DateGrain dateGrain=DateGrain.get(timeParam.getDataUnit());
if (dateParameters == null || dateGrain.compareTo(dateParameters.getDateAggregationType()) != 0 || timeParam.getNumOfShown() != indicatorParam.getTopN()) {
same=false;
}
break;
case NumbericNominalForm:
NumbericNominalParameter numbParam=(NumbericNominalParameter)formParam;
same=indicatorParam.getTopN() == numbParam.getNumberOfShown();
break;
case ExpectedValueForm:
ExpectedValueParameter expParam=(ExpectedValueParameter)formParam;
String oldValue=IndicatorHelper.getExpectedValue(indicatorParam);
String newValue=expParam.getExpectedValue();
if (oldValue != null && newValue != null) {
same=newValue.equals(oldValue);
}
 else {
same=false;
}
break;
default :
}
return same;
}","public static boolean compare(IndicatorParameters indicatorParam,AbstractIndicatorParameter formParam){
  boolean same=true;
  TextParameters textParameters=indicatorParam.getTextParameter();
  DateParameters dateParameters=indicatorParam.getDateParameters();
switch (formParam.getFormEnum()) {
case BinsDesignerForm:
    BinsDesignerParameter binsParam=(BinsDesignerParameter)formParam;
  Domain newDomain=binsParam.getUserDomian();
Domain oldDomain=indicatorParam.getBins();
if (newDomain == null) {
newDomain=DomainHelper.createContiguousClosedBinsIntoDomain(""String_Node_Str"",binsParam.getNumOfBins(),binsParam.getMinValue(),binsParam.getMaxValue());
}
if (oldDomain != null) {
EList<RangeRestriction> ranges=oldDomain.getRanges();
EList<RangeRestriction> ranges2=newDomain.getRanges();
if (ranges.size() != ranges2.size()) {
same=false;
}
for (int i=0; i < ranges2.size() && same; i++) {
RangeRestriction d2=ranges2.get(i);
RangeRestriction d1=ranges.get(i);
double v1=((RealNumberValue)d1.getLowerValue()).getValue();
double v2=((RealNumberValue)d2.getLowerValue()).getValue();
if (v1 != v2) {
  same=false;
  break;
}
v1=((RealNumberValue)d1.getUpperValue()).getValue();
v2=((RealNumberValue)d2.getUpperValue()).getValue();
if (v1 != v2) {
  same=false;
  break;
}
}
}
 else {
same=false;
}
if (indicatorParam.getTopN() != binsParam.getNumOfShown()) {
same=false;
}
break;
case TextLengthForm:
TextLengthParameter lengthParam=(TextLengthParameter)formParam;
if (textParameters == null || textParameters.isUseBlank() != lengthParam.isUseBlank() || textParameters.isUseNulls() != lengthParam.isUseNull()) {
same=false;
}
break;
case TextParametersForm:
TextParameter textParam=(TextParameter)formParam;
if (textParameters == null || textParameters.isIgnoreCase() != textParam.isIngoreCase() || indicatorParam.getTopN() != textParam.getNumOfShown()) {
same=false;
}
break;
case DataThresholdsForm:
same=checkDomain(formParam,indicatorParam.getDataValidDomain());
break;
case IndicatorThresholdsForm:
same=checkDomain(formParam,indicatorParam.getIndicatorValidDomain());
break;
case TimeSlicesForm:
TimeSlicesParameter timeParam=(TimeSlicesParameter)formParam;
DateGrain dateGrain=DateGrain.get(timeParam.getDataUnit());
if (dateParameters == null || dateGrain.compareTo(dateParameters.getDateAggregationType()) != 0 || timeParam.getNumOfShown() != indicatorParam.getTopN()) {
same=false;
}
break;
case NumbericNominalForm:
NumbericNominalParameter numbParam=(NumbericNominalParameter)formParam;
same=indicatorParam.getTopN() == numbParam.getNumberOfShown();
break;
case ExpectedValueForm:
ExpectedValueParameter expParam=(ExpectedValueParameter)formParam;
String oldValue=IndicatorHelper.getExpectedValue(indicatorParam);
String newValue=expParam.getExpectedValue();
if (oldValue != null && newValue != null) {
same=newValue.equals(oldValue);
}
 else {
same=false;
}
break;
default :
}
return same;
}",0.9544008483563096
140424,"public static Number createLocalFormatValue(Object input){
  DecimalFormat format=(DecimalFormat)DecimalFormat.getInstance(Locale.getDefault());
  try {
    return format.parse(input.toString());
  }
 catch (  ParseException e) {
    e.printStackTrace();
    return 0;
  }
}","public static Number createLocalFormatValue(Object input) throws ParseException {
  DecimalFormat format=(DecimalFormat)DecimalFormat.getInstance(Locale.getDefault());
  return format.parse(input.toString());
}",0.7727272727272727
140425,"public void modify(Object element,String property,Object value){
  TableItem item=(TableItem)element;
  SliceEntity entity=(SliceEntity)item.getData();
  if (property.equals(""String_Node_Str"")) {
    entity.setLowValue(value.toString());
    parameter.setBinsData(tableViewer.getInput());
  }
 else   if (property.equals(""String_Node_Str"")) {
    entity.setHighValue(value.toString());
    parameter.setBinsData(tableViewer.getInput());
  }
  tableViewer.refresh();
}","public void modify(Object element,String property,Object value){
  TableItem item=(TableItem)element;
  SliceEntity entity=(SliceEntity)item.getData();
  if (property.equals(""String_Node_Str"")) {
    entity.setLowValue(value.toString());
    parameter.setBinsData(tableViewer.getInput());
  }
 else   if (property.equals(""String_Node_Str"")) {
    entity.setHighValue(value.toString());
    parameter.setBinsData(tableViewer.getInput());
  }
  try {
    TextFormatFactory.createLocalFormatValue(value);
    updateStatus(IStatus.OK,MSG_OK);
  }
 catch (  Exception e) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
  }
  tableViewer.refresh();
}",0.8312387791741472
140426,"@SuppressWarnings(""String_Node_Str"") public Domain getUserDomian(){
  if (getBinsData() != null) {
    List<SliceEntity> tableData=(List<SliceEntity>)getBinsData();
    Domain userDomain=DomainHelper.createDomain(""String_Node_Str"");
    for (    SliceEntity entity : tableData) {
      double min=TextFormatFactory.createLocalFormatValue(entity.getLowValue()).doubleValue();
      double max=TextFormatFactory.createLocalFormatValue(entity.getHighValue()).doubleValue();
      RangeRestriction rangeRestriction=DomainHelper.createRealRangeRestriction(min,max);
      userDomain.getRanges().add(rangeRestriction);
    }
    return userDomain;
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public Domain getUserDomian(){
  if (getBinsData() != null) {
    List<SliceEntity> tableData=(List<SliceEntity>)getBinsData();
    Domain userDomain=DomainHelper.createDomain(""String_Node_Str"");
    for (    SliceEntity entity : tableData) {
      try {
        double min=TextFormatFactory.createLocalFormatValue(entity.getLowValue()).doubleValue();
        double max=TextFormatFactory.createLocalFormatValue(entity.getHighValue()).doubleValue();
        RangeRestriction rangeRestriction=DomainHelper.createRealRangeRestriction(min,max);
        userDomain.getRanges().add(rangeRestriction);
      }
 catch (      Exception e) {
      }
    }
    return userDomain;
  }
  return null;
}",0.953203743700504
140427,"private void createResultDataComposite(final Composite comp,final ColumnIndicator columnIndicator){
  if (columnIndicator.getIndicators().length != 0) {
    final TdColumn column=columnIndicator.getTdColumn();
    IRunnableWithProgress rwp=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            for (            ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,true)) {
              ExpandableComposite subComp=toolkit.createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
              subComp.setText(chartData.getChartNamedType());
              Composite composite=toolkit.createComposite(subComp);
              composite.setLayout(new GridLayout(2,false));
              composite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
              ChartTableFactory.createTable(composite,chartData);
              ImageDescriptor imageDescriptor=chartData.getImageDescriptor();
              if (imageDescriptor != null) {
                ImageHyperlink image=toolkit.createImageHyperlink(composite,SWT.WRAP);
                image.setImage(imageDescriptor.createImage());
              }
              subComp.setClient(composite);
              subComp.addExpansionListener(new ExpansionAdapter(){
                @Override public void expansionStateChanged(                ExpansionEvent e){
                  form.reflow(true);
                }
              }
);
            }
          }
        }
);
        monitor.done();
      }
    }
;
    try {
      new ProgressMonitorDialog(null).run(true,false,rwp);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}","private void createResultDataComposite(final Composite comp,final ColumnIndicator columnIndicator){
  if (columnIndicator.getIndicators().length != 0) {
    final TdColumn column=columnIndicator.getTdColumn();
    IRunnableWithProgress rwp=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            for (            ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,true)) {
              ExpandableComposite subComp=toolkit.createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
              subComp.setText(chartData.getChartNamedType());
              Composite composite=toolkit.createComposite(subComp);
              composite.setLayout(new GridLayout(2,false));
              composite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
              ChartTableFactory.createTable(composite,chartData);
              ImageDescriptor imageDescriptor=chartData.getImageDescriptor();
              if (imageDescriptor != null) {
                ImageHyperlink image=toolkit.createImageHyperlink(composite,SWT.WRAP);
                image.setImage(imageDescriptor.createImage());
                if (chartData.getChartNamedType().equals(CompositeIndicator.SUMMARY_STATISTICS)) {
                  addShowDefinition(image);
                }
              }
              subComp.setClient(composite);
              subComp.addExpansionListener(new ExpansionAdapter(){
                @Override public void expansionStateChanged(                ExpansionEvent e){
                  form.reflow(true);
                }
              }
);
            }
          }
        }
);
        monitor.done();
      }
    }
;
    try {
      new ProgressMonitorDialog(null).run(true,false,rwp);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}",0.9607221273481336
140428,"public void run(){
  for (  ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,true)) {
    ExpandableComposite subComp=toolkit.createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
    subComp.setText(chartData.getChartNamedType());
    Composite composite=toolkit.createComposite(subComp);
    composite.setLayout(new GridLayout(2,false));
    composite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
    ChartTableFactory.createTable(composite,chartData);
    ImageDescriptor imageDescriptor=chartData.getImageDescriptor();
    if (imageDescriptor != null) {
      ImageHyperlink image=toolkit.createImageHyperlink(composite,SWT.WRAP);
      image.setImage(imageDescriptor.createImage());
    }
    subComp.setClient(composite);
    subComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        form.reflow(true);
      }
    }
);
  }
}","public void run(){
  for (  ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,true)) {
    ExpandableComposite subComp=toolkit.createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
    subComp.setText(chartData.getChartNamedType());
    Composite composite=toolkit.createComposite(subComp);
    composite.setLayout(new GridLayout(2,false));
    composite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
    ChartTableFactory.createTable(composite,chartData);
    ImageDescriptor imageDescriptor=chartData.getImageDescriptor();
    if (imageDescriptor != null) {
      ImageHyperlink image=toolkit.createImageHyperlink(composite,SWT.WRAP);
      image.setImage(imageDescriptor.createImage());
      if (chartData.getChartNamedType().equals(CompositeIndicator.SUMMARY_STATISTICS)) {
        addShowDefinition(image);
      }
    }
    subComp.setClient(composite);
    subComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        form.reflow(true);
      }
    }
);
  }
}",0.9395477618827872
140429,"public void run(){
  for (  ChartWithData chart : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
    if (chart.getImageDescriptor() != null) {
      ImageHyperlink image=toolkit.createImageHyperlink(comp,SWT.WRAP);
      image.setImage(chart.getImageDescriptor().createImage());
      image.setToolTipText(""String_Node_Str"");
      image.addHyperlinkListener(new HyperlinkAdapter(){
        public void linkActivated(        HyperlinkEvent e){
          try {
            WebBrowserEditor.open(new WebBrowserEditorInput(new URL(""String_Node_Str"")));
          }
 catch (          MalformedURLException e1) {
            e1.printStackTrace();
          }
        }
      }
);
    }
  }
}","public void run(){
  for (  ChartWithData chart : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
    if (chart.getImageDescriptor() != null) {
      ImageHyperlink image=toolkit.createImageHyperlink(comp,SWT.WRAP);
      image.setImage(chart.getImageDescriptor().createImage());
      if (chart.getChartNamedType().equals(CompositeIndicator.SUMMARY_STATISTICS)) {
        ColumnAnalysisResultPage.addShowDefinition(image);
      }
    }
  }
}",0.5637931034482758
140430,"public void linkActivated(HyperlinkEvent e){
  try {
    WebBrowserEditor.open(new WebBrowserEditorInput(new URL(""String_Node_Str"")));
  }
 catch (  MalformedURLException e1) {
    e1.printStackTrace();
  }
}","public void linkActivated(HyperlinkEvent e){
  for (  Control control : chartComposite.getChildren()) {
    control.dispose();
  }
  boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
  if (!analysisStatue) {
    boolean returnCode=MessageDialog.openConfirm(null,""String_Node_Str"",""String_Node_Str"");
    if (returnCode) {
      new RunAnalysisAction().run();
      message.setVisible(false);
    }
 else {
      createPreviewCharts(form,chartComposite,false);
      message.setText(""String_Node_Str"" + ""String_Node_Str"");
      message.setVisible(true);
    }
  }
 else {
    createPreviewCharts(form,chartComposite,true);
  }
  chartComposite.layout();
  form.reflow(true);
}",0.1795918367346938
140431,"public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  List<Composite> previewChartList=new ArrayList<Composite>();
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(""String_Node_Str"" + column.getName());
    exComp.setLayout(new GridLayout());
    exComp.setData(columnIndicator);
    addExpandableCompositeListener(exComp);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              for (              ChartWithData chart : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
                if (chart.getImageDescriptor() != null) {
                  ImageHyperlink image=toolkit.createImageHyperlink(comp,SWT.WRAP);
                  image.setImage(chart.getImageDescriptor().createImage());
                  image.setToolTipText(""String_Node_Str"");
                  image.addHyperlinkListener(new HyperlinkAdapter(){
                    public void linkActivated(                    HyperlinkEvent e){
                      try {
                        WebBrowserEditor.open(new WebBrowserEditorInput(new URL(""String_Node_Str"")));
                      }
 catch (                      MalformedURLException e1) {
                        e1.printStackTrace();
                      }
                    }
                  }
);
                }
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}","public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  List<Composite> previewChartList=new ArrayList<Composite>();
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(""String_Node_Str"" + column.getName());
    exComp.setLayout(new GridLayout());
    exComp.setData(columnIndicator);
    addExpandableCompositeListener(exComp);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              for (              ChartWithData chart : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
                if (chart.getImageDescriptor() != null) {
                  ImageHyperlink image=toolkit.createImageHyperlink(comp,SWT.WRAP);
                  image.setImage(chart.getImageDescriptor().createImage());
                  if (chart.getChartNamedType().equals(CompositeIndicator.SUMMARY_STATISTICS)) {
                    ColumnAnalysisResultPage.addShowDefinition(image);
                  }
                }
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
    exComp.setExpanded(true);
    exComp.setClient(comp);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}",0.7154673283705542
140432,"/** 
 * Fill the node context menu with all the correct actions.
 * @see org.eclipse.ui.actions.ActionGroup#fillContextMenu(org.eclipse.jface.action.IMenuManager)
 */
public void fillContextMenu(IMenuManager menu){
  ConnectionsView view=SQLExplorerPlugin.getDefault().getConnectionsView();
  Object[] selection=(view == null) ? null : view.getSelected();
  if (selection == null || selection.length != 1) {
    return;
  }
  if (selection[0] instanceof Alias) {
    Alias alias=(Alias)selection[0];
    addAction(menu,new NewEditorAction());
    addAction(menu,new ConnectAliasAction());
    menu.add(new Separator());
    for (    User user : alias.getUsers())     if (!user.isAutoCommit()) {
      addAction(menu,new CommitAction());
      addAction(menu,new RollbackAction());
      menu.add(new Separator());
      break;
    }
  }
 else   if (selection[0] instanceof User) {
    User user=(User)selection[0];
    addAction(menu,new NewEditorAction());
    addAction(menu,new ConnectAliasAction());
    menu.add(new Separator());
    if (!user.isAutoCommit()) {
      addAction(menu,new CommitAction());
      addAction(menu,new RollbackAction());
      menu.add(new Separator());
    }
  }
 else   if (selection[0] instanceof SQLConnection) {
    SQLConnection connection=(SQLConnection)selection[0];
    addAction(menu,new NewEditorAction());
    menu.add(new Separator());
    if (!connection.getUser().isAutoCommit()) {
      addAction(menu,new CommitAction());
      addAction(menu,new RollbackAction());
      menu.add(new Separator());
    }
  }
}","/** 
 * Fill the node context menu with all the correct actions.
 * @see org.eclipse.ui.actions.ActionGroup#fillContextMenu(org.eclipse.jface.action.IMenuManager)
 */
public void fillContextMenu(IMenuManager menu){
  ConnectionsView view=SQLExplorerPlugin.getDefault().getConnectionsView();
  Object[] selection=(view == null) ? null : view.getSelected();
  if (selection == null || selection.length != 1) {
    return;
  }
  if (selection[0] instanceof Alias) {
    Alias alias=(Alias)selection[0];
    addAction(menu,new NewEditorAction());
    addAction(menu,new NewDatabaseStructureViewAction());
    addAction(menu,new ConnectAliasAction());
    menu.add(new Separator());
    for (    User user : alias.getUsers())     if (!user.isAutoCommit()) {
      addAction(menu,new CommitAction());
      addAction(menu,new RollbackAction());
      menu.add(new Separator());
      break;
    }
  }
 else   if (selection[0] instanceof User) {
    User user=(User)selection[0];
    addAction(menu,new NewEditorAction());
    addAction(menu,new NewDatabaseStructureViewAction());
    addAction(menu,new ConnectAliasAction());
    menu.add(new Separator());
    if (!user.isAutoCommit()) {
      addAction(menu,new CommitAction());
      addAction(menu,new RollbackAction());
      menu.add(new Separator());
    }
  }
 else   if (selection[0] instanceof SQLConnection) {
    SQLConnection connection=(SQLConnection)selection[0];
    addAction(menu,new NewEditorAction());
    addAction(menu,new NewDatabaseStructureViewAction());
    menu.add(new Separator());
    if (!connection.getUser().isAutoCommit()) {
      addAction(menu,new CommitAction());
      addAction(menu,new RollbackAction());
      menu.add(new Separator());
    }
  }
}",0.9392466585662212
140433,"/** 
 * DOC qzhang Comment method ""initAllDrivers"".
 */
private void initAllDrivers(){
  DriverManager driverModel=getDriverModel();
  Collection<ManagedDriver> drivers=driverModel.getDrivers();
  for (  ManagedDriver mand : drivers) {
    String id2=mand.getId();
    EDriverName[] values=EDriverName.values();
    for (    EDriverName supportDBUrlType : values) {
      if (id2.equals(supportDBUrlType.getSqlEid())) {
        mand.setJars(supportDBUrlType.getJars());
        mand.setDriverClassName(supportDBUrlType.getDbDriver());
        try {
          mand.registerSQLDriver();
        }
 catch (        Exception e) {
        }
        break;
      }
    }
  }
}","/** 
 * DOC qzhang Comment method ""initAllDrivers"".
 */
private void initAllDrivers(){
  DriverManager driverModel=getDriverModel();
  Collection<ManagedDriver> drivers=driverModel.getDrivers();
  for (  ManagedDriver mand : drivers) {
    String id2=mand.getId();
    EDriverName[] values=EDriverName.values();
    for (    EDriverName supportDBUrlType : values) {
      if (id2.equals(supportDBUrlType.getSqlEid())) {
        LinkedList<String> jars=mand.getJars();
        if (jars.isEmpty()) {
          mand.setJars(supportDBUrlType.getJars());
        }
        mand.setDriverClassName(supportDBUrlType.getDbDriver());
        try {
          mand.registerSQLDriver();
        }
 catch (        Exception e) {
        }
        break;
      }
    }
  }
}",0.9370629370629372
140434,"protected synchronized Class findClass(String className) throws ClassNotFoundException {
  Class cls=(Class)_classes.get(className);
  if (cls == null) {
    cls=super.findClass(className);
    _classes.put(className,cls);
  }
  return cls;
}","public synchronized Class findClass(String className) throws ClassNotFoundException {
  Class cls=(Class)_classes.get(className);
  if (cls == null) {
    cls=super.findClass(className);
    _classes.put(className,cls);
  }
  return cls;
}",0.972972972972973
140435,"/** 
 * Method ""getTypeSystem"". Method this.  {@link #retrieveDeployedSystemInformations()} should be called beforegetting the type system.
 * @return the TypeSystem that defines the datatypes supported by the software system.
 */
public TypeSystem getTypeSystem(){
  if (softwareSystemBuilder == null) {
    return null;
  }
  return softwareSystemBuilder.getTypeSystem();
}","/** 
 * Method ""getTypeSystem"". Method this.  {@link #retrieveDeployedSystemInformations()} should be called before gettingthe type system.
 * @return the TypeSystem that defines the datatypes supported by the software system.
 */
public TypeSystem getTypeSystem(){
  if (softwareSystemBuilder == null) {
    return null;
  }
  return softwareSystemBuilder.getTypeSystem();
}",0.9786666666666668
140436,"/** 
 * Method ""connect"". Opens a connection by using the DriverManager class. It is of the responsability of the caller to close it correctly.
 * @param dbUrl the url
 * @param driverClassName
 * @param props
 * @return true if the connection is opened.
 * @throws SQLException
 */
private boolean connectLow(String dbUrl,String driverClassName,Properties props) throws SQLException {
  boolean ok=true;
  try {
    driver=(Driver)Class.forName(driverClassName).newInstance();
    DriverManager.registerDriver(driver);
    connection=DriverManager.getConnection(dbUrl,props);
    this.providerConnection=DatabaseContentRetriever.getProviderConnection(dbUrl,driverClassName,props,connection);
  }
 catch (  InstantiationException e) {
    log.error(e);
    ok=false;
  }
catch (  IllegalAccessException e) {
    log.error(e);
    ok=false;
  }
catch (  ClassNotFoundException e) {
    log.error(e);
    ok=false;
  }
  return ok;
}","/** 
 * Method ""connect"". Opens a connection by using the DriverManager class. It is of the responsability of the caller to close it correctly.
 * @param dbUrl the url
 * @param driverClassName
 * @param props
 * @return true if the connection is opened.
 * @throws SQLException
 */
private boolean connectLow(String dbUrl,String driverClassName,Properties props) throws SQLException {
  boolean ok=true;
  try {
    driver=ConnectionUtils.getClassDriver(driverClassName);
    connection=driver.connect(dbUrl,props);
    this.providerConnection=DatabaseContentRetriever.getProviderConnection(dbUrl,driverClassName,props,connection);
  }
 catch (  InstantiationException e) {
    log.error(e);
    ok=false;
  }
catch (  IllegalAccessException e) {
    log.error(e);
    ok=false;
  }
catch (  ClassNotFoundException e) {
    log.error(e);
    ok=false;
  }
  return ok;
}",0.9112097669256382
140437,"protected boolean isAccessWith(TdDataProvider dp){
  if (dataprovider == null) {
    dataprovider=dp;
    return true;
  }
  if (dataprovider.equals(dp) || ResourceHelper.getUUID(dataprovider) == ResourceHelper.getUUID(dp)) {
    return true;
  }
  return false;
}","protected boolean isAccessWith(TdDataProvider dp){
  if (dataprovider == null) {
    dataprovider=dp;
    return true;
  }
  if (dataprovider.equals(dp) || StringUtils.equals(ResourceHelper.getUUID(dataprovider),ResourceHelper.getUUID(dp))) {
    return true;
  }
  return false;
}",0.9541284403669724
140438,"@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(""String_Node_Str"" + analysis.getName() + ""String_Node_Str"",IProgressMonitor.UNKNOWN);
  final ReturnCode executed=AnalysisExecutorSelector.executeAnalysis(finalAnalysis);
  monitor.done();
  if (executed.isOk()) {
    if (log.isInfoEnabled()) {
      int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
      log.info(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    }
    AnaResourceFileHelper.getInstance().save(finalAnalysis);
    if (page != null && page instanceof ColumnMasterDetailsPage) {
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          ColumnMasterDetailsPage columnMasterPage=(ColumnMasterDetailsPage)page;
          columnMasterPage.refreshChart(columnMasterPage.getForm());
        }
      }
);
    }
    return Status.OK_STATUS;
  }
 else {
    int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
    log.warn(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MessageDialogWithToggle.openError(null,""String_Node_Str"",""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed.getMessage());
      }
    }
);
    return Status.CANCEL_STATUS;
  }
}","@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(""String_Node_Str"" + analysis.getName() + ""String_Node_Str"",IProgressMonitor.UNKNOWN);
  final ReturnCode executed=AnalysisExecutorSelector.executeAnalysis(finalAnalysis);
  monitor.done();
  if (executed.isOk()) {
    if (log.isInfoEnabled()) {
      int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
      log.info(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    }
    AnaResourceFileHelper.getInstance().save(finalAnalysis);
    if (page != null) {
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          if (page instanceof ColumnMasterDetailsPage) {
            ColumnMasterDetailsPage columnMasterPage=(ColumnMasterDetailsPage)page;
            columnMasterPage.refreshChart(columnMasterPage.getForm());
          }
 else           if (page instanceof ConnectionMasterDetailsPage) {
            ConnectionMasterDetailsPage connDetailsPage=(ConnectionMasterDetailsPage)page;
            connDetailsPage.doSetInput();
          }
        }
      }
);
    }
    return Status.OK_STATUS;
  }
 else {
    int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
    log.warn(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MessageDialogWithToggle.openError(null,""String_Node_Str"",""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed.getMessage());
      }
    }
);
    return Status.CANCEL_STATUS;
  }
}",0.9059490084985836
140439,"private void createStatisticalSection(ScrolledForm form,Composite topComp){
  Section statisticalSection=this.createSection(form,topComp,""String_Node_Str"",false,null);
  Composite sectionClient=toolkit.createComposite(statisticalSection);
  sectionClient.setLayout(new GridLayout());
  TableViewer statisticalViewer=new TableViewer(sectionClient,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
  Table table=statisticalViewer.getTable();
  table.setHeaderVisible(true);
  table.setBackgroundMode(SWT.INHERIT_FORCE);
  table.setLinesVisible(true);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(table);
  List<CatalogIndicator> indicatorList=null;
  if (this.connectionAnalysis.getResults().getIndicators().size() > 0) {
    ConnectionIndicator conIndicator=(ConnectionIndicator)connectionAnalysis.getResults().getIndicators().get(0);
    indicatorList=conIndicator.getCatalogIndicators();
  }
 else {
    indicatorList=new ArrayList<CatalogIndicator>();
  }
  List<TdCatalog> catalogs=DataProviderHelper.getTdCatalogs(tdDataProvider);
  boolean containSchema=false;
  for (  TdCatalog catalog : catalogs) {
    List<TdSchema> schemas=CatalogHelper.getSchemas(catalog);
    if (schemas.size() > 0) {
      containSchema=true;
      break;
    }
  }
  AbstractStatisticalViewerProvider provider;
  if (catalogs.size() > 0 && containSchema) {
    createCatalogSchemaColumns(table);
    provider=new CatalogSchemaViewerProvier();
    final TableViewer createSecondStatisticalTable=createSecondStatisticalTable(sectionClient);
    statisticalViewer.addSelectionChangedListener(new ISelectionChangedListener(){
      public void selectionChanged(      SelectionChangedEvent event){
        StructuredSelection selection=(StructuredSelection)event.getSelection();
        CatalogIndicator firstElement=(CatalogIndicator)selection.getFirstElement();
        createSecondStatisticalTable.setInput(firstElement.getSchemaIndicators());
        createSecondStatisticalTable.getTable().setVisible(true);
      }
    }
);
  }
 else {
    if (catalogs.size() > 0) {
      createCatalogTableColumns(table);
      provider=new CatalogViewerProvier();
    }
 else {
      createSchemaTableColumns(table);
      provider=new SchemaViewerProvier();
    }
  }
  statisticalViewer.setLabelProvider(provider);
  statisticalViewer.setContentProvider(provider);
  statisticalViewer.setInput(indicatorList);
  sectionClient.layout();
  statisticalSection.setClient(sectionClient);
}","private void createStatisticalSection(ScrolledForm form,Composite topComp){
  Section statisticalSection=this.createSection(form,topComp,""String_Node_Str"",false,null);
  Composite sectionClient=toolkit.createComposite(statisticalSection);
  sectionClient.setLayout(new GridLayout());
  statisticalViewer=new TableViewer(sectionClient,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
  Table table=statisticalViewer.getTable();
  table.setHeaderVisible(true);
  table.setBackgroundMode(SWT.INHERIT_FORCE);
  table.setLinesVisible(true);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(table);
  List<TdCatalog> catalogs=DataProviderHelper.getTdCatalogs(tdDataProvider);
  boolean containSchema=false;
  for (  TdCatalog catalog : catalogs) {
    List<TdSchema> schemas=CatalogHelper.getSchemas(catalog);
    if (schemas.size() > 0) {
      containSchema=true;
      break;
    }
  }
  AbstractStatisticalViewerProvider provider;
  if (catalogs.size() > 0 && containSchema) {
    createCatalogSchemaColumns(table);
    provider=new CatalogSchemaViewerProvier();
    final TableViewer createSecondStatisticalTable=createSecondStatisticalTable(sectionClient);
    statisticalViewer.addSelectionChangedListener(new ISelectionChangedListener(){
      public void selectionChanged(      SelectionChangedEvent event){
        StructuredSelection selection=(StructuredSelection)event.getSelection();
        CatalogIndicator firstElement=(CatalogIndicator)selection.getFirstElement();
        createSecondStatisticalTable.setInput(firstElement.getSchemaIndicators());
        createSecondStatisticalTable.getTable().setVisible(true);
      }
    }
);
  }
 else {
    if (catalogs.size() > 0) {
      createCatalogTableColumns(table);
      provider=new CatalogViewerProvier();
    }
 else {
      createSchemaTableColumns(table);
      provider=new SchemaViewerProvier();
    }
  }
  statisticalViewer.setLabelProvider(provider);
  statisticalViewer.setContentProvider(provider);
  doSetInput();
  sectionClient.layout();
  statisticalSection.setClient(sectionClient);
}",0.9126760563380282
140440,"@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  final ScrolledForm form=managedForm.getForm();
  form.setText(""String_Node_Str"");
  this.metadataSection.setText(""String_Node_Str"");
  this.metadataSection.setDescription(""String_Node_Str"");
  createAnalysisParamSection(form,topComp);
  createAnalysisSummarySection(form,topComp);
  createStatisticalSection(form,topComp);
}","@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  final ScrolledForm form=managedForm.getForm();
  form.setText(""String_Node_Str"");
  this.metadataSection.setText(""String_Node_Str"");
  this.metadataSection.setDescription(""String_Node_Str"");
  createAnalysisParamSection(form,topComp);
  createAnalysisSummarySection(form,topComp);
  createStatisticalSection(form,topComp);
  GridData gdBtn=new GridData();
  gdBtn.horizontalAlignment=SWT.CENTER;
  gdBtn.horizontalSpan=2;
  gdBtn.widthHint=120;
  Button runBtn=toolkit.createButton(form.getBody(),""String_Node_Str"",SWT.NONE);
  runBtn.setLayoutData(gdBtn);
  runBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new RunAnalysisAction().run();
    }
  }
);
}",0.6844583987441131
140441,"/** 
 * Method ""setDataFilterPattern"".
 * @param dataFilters a list of data filters
 * @param type
 * @param domainName
 * @param filterPattern
 * @return
 */
private static Domain setDataFilterPattern(final Collection<Domain> dataFilters,PatternType type,DomainType domainName,String filterPattern){
  RegularExpression filterExpr=BooleanExpressionHelper.createRegularExpression(null,filterPattern);
  for (  Domain domain : dataFilters) {
    if (!domainName.label.equals(domain.getName())) {
      continue;
    }
    boolean exists=false;
    EList<Pattern> patterns=domain.getPatterns();
    for (    Pattern pattern : patterns) {
      if (type.equals(pattern.getName())) {
        exists=true;
        pattern.getComponents().clear();
        pattern.getComponents().add(filterExpr);
      }
    }
    if (!exists) {
      addPatternToDomain(domain,filterExpr,filterPattern,type);
    }
    return domain;
  }
  Domain domain=DomainFactory.eINSTANCE.createDomain();
  dataFilters.add(domain);
  domain.setName(domainName.label);
  addPatternToDomain(domain,filterExpr,filterPattern,type);
  return domain;
}","/** 
 * Method ""setDataFilterPattern"".
 * @param dataFilters a list of data filters
 * @param type
 * @param domainName
 * @param filterPattern
 * @return
 */
private static Domain setDataFilterPattern(final Collection<Domain> dataFilters,PatternType type,DomainType domainName,String filterPattern){
  RegularExpression filterExpr=BooleanExpressionHelper.createRegularExpression(null,filterPattern);
  for (  Domain domain : dataFilters) {
    if (!domainName.label.equals(domain.getName())) {
      continue;
    }
    boolean exists=false;
    EList<Pattern> patterns=domain.getPatterns();
    for (    Pattern pattern : patterns) {
      if (type.label.equals(pattern.getName())) {
        exists=true;
        pattern.getComponents().clear();
        pattern.getComponents().add(filterExpr);
      }
    }
    if (!exists) {
      addPatternToDomain(domain,filterExpr,filterPattern,type);
    }
    return domain;
  }
  Domain domain=DomainFactory.eINSTANCE.createDomain();
  dataFilters.add(domain);
  domain.setName(domainName.label);
  addPatternToDomain(domain,filterExpr,filterPattern,type);
  return domain;
}",0.9973142345568488
140442,"private void creatPatternDefinitionSection(ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,""String_Node_Str"",false,null);
  sectionComp=toolkit.createComposite(section);
  sectionComp.setLayout(new GridLayout());
  componentsComp=new Composite(sectionComp,SWT.NONE);
  componentsComp.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(componentsComp);
  EList<PatternComponent> components=this.pattern.getComponents();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    creatNewExpressLine(form,regularExpress);
  }
  createAddButton(form);
  section.setClient(sectionComp);
}","private void creatPatternDefinitionSection(ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,""String_Node_Str"",false,null);
  sectionComp=toolkit.createComposite(section);
  sectionComp.setLayout(new GridLayout());
  Label label=new Label(sectionComp,SWT.WRAP);
  label.setText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  componentsComp=new Composite(sectionComp,SWT.NONE);
  componentsComp.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(componentsComp);
  EList<PatternComponent> components=this.pattern.getComponents();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    creatNewExpressLine(form,regularExpress);
  }
  createAddButton(form);
  section.setClient(sectionComp);
}",0.9245861434702636
140443,"/** 
 * Open all connections that have the 'open on startup property'. This method should be called from within the UI thread!
 */
public void startDefaultConnections(ConnectionsView connectionsView){
  this.connectionsView=connectionsView;
  if (_defaultConnectionsStarted)   return;
  String fontDesc=getPluginPreferences().getString(IConstants.FONT);
  FontData fontData=null;
  try {
    try {
      fontData=new FontData(fontDesc);
    }
 catch (    IllegalArgumentException e) {
      fontData=new FontData(""String_Node_Str"");
    }
    PreferenceConverter.setValue(getPreferenceStore(),IConstants.FONT,fontData);
  }
 catch (  IllegalArgumentException e) {
    error(""String_Node_Str"",e);
  }
  boolean openEditor=SQLExplorerPlugin.getDefault().getPluginPreferences().getBoolean(IConstants.AUTO_OPEN_EDITOR);
  DatabaseStructureView dbView=null;
  IWorkbenchSite site=connectionsView.getSite();
  if (site.getPage() != null)   dbView=(DatabaseStructureView)site.getPage().findView(DatabaseStructureView.class.getName());
  for (  Alias alias : aliasManager.getAliases()) {
    if (alias.isConnectAtStartup() && alias.isAutoLogon() && alias.getDefaultUser() != null) {
      if (dbView != null)       try {
        dbView.addUser(alias.getDefaultUser());
      }
 catch (      SQLCannotConnectException e) {
      }
      if (openEditor) {
        SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + SQLExplorerPlugin.getDefault().getEditorSerialNo() + ""String_Node_Str"");
        input.setUser(alias.getDefaultUser());
        try {
          site.getPage().openEditor(input,SQLEditor.class.getName());
        }
 catch (        PartInitException e) {
          SQLExplorerPlugin.error(""String_Node_Str"",e);
        }
      }
    }
  }
  _defaultConnectionsStarted=true;
}","/** 
 * Open all connections that have the 'open on startup property'. This method should be called from within the UI thread!
 */
public void startDefaultConnections(ConnectionsView connectionsView){
  this.connectionsView=connectionsView;
  if (_defaultConnectionsStarted)   return;
  String fontDesc=getPluginPreferences().getString(IConstants.FONT);
  FontData fontData=null;
  try {
    try {
      fontData=new FontData(fontDesc);
    }
 catch (    IllegalArgumentException e) {
      fontData=new FontData(""String_Node_Str"");
    }
    PreferenceConverter.setValue(getPreferenceStore(),IConstants.FONT,fontData);
  }
 catch (  IllegalArgumentException e) {
    error(""String_Node_Str"",e);
  }
  boolean openEditor=SQLExplorerPlugin.getDefault().getPluginPreferences().getBoolean(IConstants.AUTO_OPEN_EDITOR);
  DatabaseStructureView dbView=null;
  IWorkbenchSite site=connectionsView.getSite();
  if (site.getPage() != null)   dbView=(DatabaseStructureView)site.getPage().findView(DatabaseStructureView.class.getName());
  for (  Alias alias : aliasManager.getAliases()) {
    if (alias.isConnectAtStartup() && alias.isAutoLogon() && alias.getDefaultUser() != null) {
      if (dbView != null)       try {
        dbView.addUser(alias.getDefaultUser());
      }
 catch (      SQLCannotConnectException e) {
      }
      if (openEditor) {
        SQLEditorInput input=new SQLEditorInput(SQL_EDITOR + SQLExplorerPlugin.getDefault().getEditorSerialNo() + SQL);
        input.setUser(alias.getDefaultUser());
        try {
          site.getPage().openEditor(input,SQLEditor.class.getName());
        }
 catch (        PartInitException e) {
          SQLExplorerPlugin.error(""String_Node_Str"",e);
        }
      }
    }
  }
  _defaultConnectionsStarted=true;
}",0.9873346467773711
140444,"@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  final IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(root);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (IProject.class.isInstance(element)) {
        return ""String_Node_Str"".equals(((IProject)element).getName());
      }
 else       if (IFolder.class.isInstance(element)) {
        IPath path=new Path(""String_Node_Str"");
        IPath projectRelativePath=((IFolder)element).getProjectRelativePath();
        return path.isPrefixOf(projectRelativePath);
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null)     progressMonitor.setCanceled(true);
    return;
  }
  Object elements=dialog.getResult()[0];
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(getTitle());
    if (filePath == null) {
      if (progressMonitor != null)       progressMonitor.setCanceled(true);
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      createIFile(progressMonitor,file,getViewer().getDocument().get());
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success)       setInput(newInput);
    }
    if (progressMonitor != null)     progressMonitor.setCanceled(!success);
  }
}","@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  final IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(root);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (IProject.class.isInstance(element)) {
        return ""String_Node_Str"".equals(((IProject)element).getName());
      }
 else       if (IFolder.class.isInstance(element)) {
        IPath path=new Path(""String_Node_Str"");
        IPath projectRelativePath=((IFolder)element).getProjectRelativePath();
        return path.isPrefixOf(projectRelativePath);
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null)     progressMonitor.setCanceled(true);
    return;
  }
  Object elements=dialog.getResult()[0];
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(getTitle());
    if (filePath == null) {
      if (progressMonitor != null)       progressMonitor.setCanceled(true);
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    if (file.exists() && SQLExplorerPlugin.isEditorSerialName(filePath.lastSegment())) {
      InputDialog inputDialog=new InputDialog(getSite().getShell(),""String_Node_Str"",""String_Node_Str"",filePath.lastSegment(),null);
      if (inputDialog.open() == InputDialog.CANCEL) {
        return;
      }
 else {
        IPath lseg=filePath.removeLastSegments(1);
        IPath append=lseg.append(inputDialog.getValue());
        file=workspace.getRoot().getFile(append);
      }
    }
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      createIFile(progressMonitor,file,getViewer().getDocument().get());
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success)       setInput(newInput);
    }
    if (progressMonitor != null)     progressMonitor.setCanceled(!success);
  }
}",0.783910847988856
140445,"private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (getTheSuitedComposite(e) != null) {
        getTheSuitedComposite(e).setFocus();
      }
      if (e.item instanceof TreeItem) {
        TreeItem item=(TreeItem)e.item;
        if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
          tree.setMenu(null);
          return;
        }
      }
      tree.setMenu(menu);
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      if (getTheSuitedComposite(e) != null) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      masterPage.getForm().reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      if (getTheSuitedComposite(e) != null) {
        getTheSuitedComposite(e).setExpanded(true);
      }
      masterPage.getForm().reflow(true);
    }
  }
);
}","private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean con=false;
      if (getTheSuitedComposite(e) != null) {
        getTheSuitedComposite(e).setFocus();
      }
      if (e.item instanceof TreeItem) {
        TreeItem item=(TreeItem)e.item;
        if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
          tree.setMenu(null);
          return;
        }
 else         if (item.getData(INDICATOR_UNIT_KEY) != null) {
          IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
          IndicatorEnum type=indicatorUnit.getType();
          con=IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0;
        }
      }
      createTreeMenu(tree,con);
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      if (getTheSuitedComposite(e) != null) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      masterPage.getForm().reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      if (getTheSuitedComposite(e) != null) {
        getTheSuitedComposite(e).setExpanded(true);
      }
      masterPage.getForm().reflow(true);
    }
  }
);
}",0.8228279386712095
140446,"@Override public void widgetSelected(SelectionEvent e){
  if (getTheSuitedComposite(e) != null) {
    getTheSuitedComposite(e).setFocus();
  }
  if (e.item instanceof TreeItem) {
    TreeItem item=(TreeItem)e.item;
    if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
      tree.setMenu(null);
      return;
    }
  }
  tree.setMenu(menu);
}","@Override public void widgetSelected(SelectionEvent e){
  boolean con=false;
  if (getTheSuitedComposite(e) != null) {
    getTheSuitedComposite(e).setFocus();
  }
  if (e.item instanceof TreeItem) {
    TreeItem item=(TreeItem)e.item;
    if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
      tree.setMenu(null);
      return;
    }
 else     if (item.getData(INDICATOR_UNIT_KEY) != null) {
      IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
      IndicatorEnum type=indicatorUnit.getType();
      con=IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0;
    }
  }
  createTreeMenu(tree,con);
}",0.6280834914611005
140447,"/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new Tree(parent,SWT.MULTI | SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(true);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  column1.setText(""String_Node_Str"");
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(100);
  column2.setText(""String_Node_Str"");
  TreeColumn column3=new TreeColumn(newTree,SWT.CENTER);
  column3.setWidth(100);
  column3.setText(""String_Node_Str"");
  TreeColumn column4=new TreeColumn(newTree,SWT.CENTER);
  column4.setWidth(120);
  column4.setText(""String_Node_Str"");
  parent.layout();
  menu=new Menu(newTree);
  MenuItem deleteMenuItem=new MenuItem(menu,SWT.CASCADE);
  deleteMenuItem.setText(""String_Node_Str"");
  deleteMenuItem.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  deleteMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      removeSelectedElements(newTree);
    }
  }
);
  newTree.setMenu(menu);
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
    }
  }
;
  parent.setData(AbstractMetadataFormPage.ACTION_HANDLER,actionHandler);
  ColumnViewerDND.installDND(newTree);
  this.addTreeListener(newTree);
  return newTree;
}","/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new Tree(parent,SWT.MULTI | SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(true);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  column1.setText(""String_Node_Str"");
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(100);
  column2.setText(""String_Node_Str"");
  TreeColumn column3=new TreeColumn(newTree,SWT.CENTER);
  column3.setWidth(100);
  column3.setText(""String_Node_Str"");
  TreeColumn column4=new TreeColumn(newTree,SWT.CENTER);
  column4.setWidth(120);
  column4.setText(""String_Node_Str"");
  parent.layout();
  createTreeMenu(newTree,false);
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
    }
  }
;
  parent.setData(AbstractMetadataFormPage.ACTION_HANDLER,actionHandler);
  ColumnViewerDND.installDND(newTree);
  this.addTreeListener(newTree);
  return newTree;
}",0.8491493383742911
140448,"public String isNotBlank(String colName){
  if (is(MSSQL)) {
    return ""String_Node_Str"" + colName + ""String_Node_Str""+ notEqual()+ ""String_Node_Str"";
  }
  return ""String_Node_Str"" + colName + ""String_Node_Str""+ notEqual()+ ""String_Node_Str"";
}","public String isNotBlank(String colName){
  if (is(MSSQL)) {
    return ""String_Node_Str"" + colName + ""String_Node_Str""+ notEqual()+ ""String_Node_Str"";
  }
  if (is(ORACLE)) {
    return ""String_Node_Str"" + colName + ""String_Node_Str""+ isNull();
  }
  return ""String_Node_Str"" + colName + ""String_Node_Str""+ notEqual()+ ""String_Node_Str"";
}",0.8395904436860068
140449,"/** 
 * DOC scorreia Comment method ""getCompletedSingleSelect"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param whereExpression
 * @param range
 * @return
 * @throws ParseException
 */
private String getCompletedSingleSelect(Indicator indicator,String sqlGenericExpression,String colName,String table,List<String> whereExpression,String range) throws ParseException {
  String completedRange=replaceVariables(range,colName,table);
  String rangeColumn=""String_Node_Str"" + completedRange + ""String_Node_Str"";
  String completedSqlString=replaceVariables(sqlGenericExpression,rangeColumn,table);
  List<String> allWheresForSingleSelect=new ArrayList<String>(whereExpression);
  allWheresForSingleSelect.add(completedRange);
  return addWhereToSqlStringStatement(allWheresForSingleSelect,completedSqlString);
}","/** 
 * DOC scorreia Comment method ""getCompletedSingleSelect"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param whereExpression
 * @param range
 * @return
 * @throws ParseException
 */
private String getCompletedSingleSelect(Indicator indicator,String sqlGenericExpression,String colName,String table,List<String> whereExpression,String range) throws ParseException {
  String completedRange=replaceVariables(range,colName,table);
  String rangeColumn=""String_Node_Str"" + completedRange + ""String_Node_Str"";
  String completedSqlString=replaceVariablesLow(sqlGenericExpression,rangeColumn,table,rangeColumn);
  List<String> allWheresForSingleSelect=new ArrayList<String>(whereExpression);
  allWheresForSingleSelect.add(completedRange);
  return addWhereToSqlStringStatement(allWheresForSingleSelect,completedSqlString);
}",0.9912229373902868
140450,"/** 
 * DOC scorreia Comment method ""getConnection"".
 * @param analysis
 * @param schema
 * @return
 */
protected TypedReturnCode<Connection> getConnection(Analysis analysis){
  TypedReturnCode<Connection> rc=new TypedReturnCode<Connection>();
  DataManager datamanager=analysis.getContext().getConnection();
  if (datamanager == null) {
    rc.setReturnCode(""String_Node_Str"" + analysis.getName(),false);
    return rc;
  }
  TdDataProvider dataprovider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(datamanager);
  if (dataprovider == null) {
    rc.setReturnCode(""String_Node_Str"" + datamanager.getName() + ""String_Node_Str""+ analysis.getName(),false);
    return rc;
  }
  TypedReturnCode<TdProviderConnection> providerConnection=DataProviderHelper.getTdProviderConnection(dataprovider);
  if (!providerConnection.isOk()) {
    rc.setReturnCode(providerConnection.getMessage(),false);
    return rc;
  }
  TypedReturnCode<Connection> connection=JavaSqlFactory.createConnection(providerConnection.getObject());
  if (!connection.isOk()) {
    rc.setReturnCode(connection.getMessage(),false);
    return rc;
  }
  rc.setObject(connection.getObject());
  return rc;
}","/** 
 * DOC scorreia Comment method ""getConnection"".
 * @param analysis
 * @param schema
 * @return
 */
protected TypedReturnCode<Connection> getConnection(Analysis analysis){
  TypedReturnCode<Connection> rc=new TypedReturnCode<Connection>();
  DataManager datamanager=analysis.getContext().getConnection();
  if (datamanager == null) {
    rc.setReturnCode(""String_Node_Str"" + analysis.getName(),false);
    return rc;
  }
  TdDataProvider dataprovider=SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(datamanager);
  if (dataprovider == null) {
    rc.setReturnCode(""String_Node_Str"" + datamanager.getName() + ""String_Node_Str""+ analysis.getName(),false);
    return rc;
  }
  TypedReturnCode<Connection> connection=JavaSqlFactory.createConnection(dataprovider);
  if (!connection.isOk()) {
    rc.setReturnCode(connection.getMessage(),false);
    return rc;
  }
  rc.setObject(connection.getObject());
  return rc;
}",0.8065290446471436
140451,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof EObject) {
    EObject eObj=(EObject)element;
    if (SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(eObj) != null || dependencySwitch.doSwitch(eObj) != null) {
      return false;
    }
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    return file.getFileExtension() != null;
  }
  return true;
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (parentElement instanceof TreePath) {
    TreePath path=(TreePath)parentElement;
    if (path.getLastSegment() instanceof AnaElementFolderNode) {
      return true;
    }
  }
  if (element instanceof EObject) {
    EObject eObj=(EObject)element;
    if (SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(eObj) != null || dependencySwitch.doSwitch(eObj) != null) {
      return false;
    }
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    return file.getFileExtension() != null;
  }
  return true;
}",0.8279158699808795
140452,"public String getText(Object element){
  if (element instanceof AbstractFolderNode) {
    if (((IFolderNode)element).getChildren() != null) {
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + ((IFolderNode)element).getChildren().length+ ""String_Node_Str"";
    }
    return ((IFolderNode)element).getName();
  }
  if (element instanceof Pattern) {
    Pattern pattern=(Pattern)element;
    RegularExpression patternComponent=(RegularExpression)pattern.getComponents().get(0);
    return patternComponent.getExpression().getBody();
  }
  return super.getText(element);
}","public String getText(Object element){
  if (element instanceof AbstractFolderNode) {
    if (((IFolderNode)element).getChildren() != null) {
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + ((IFolderNode)element).getChildren().length+ ""String_Node_Str"";
    }
    return ((IFolderNode)element).getName();
  }
  if (element instanceof Pattern) {
    Pattern pattern=(Pattern)element;
    RegularExpression patternComponent=(RegularExpression)pattern.getComponents().get(0);
    return patternComponent.getExpression().getBody();
  }
 else   if (element instanceof TdDataProvider) {
    return ((TdDataProvider)element).getName();
  }
  return super.getText(element);
}",0.8939512961508248
140453,"public Image getImage(Object element){
  if (element instanceof IFolderNode) {
    return ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
  }
  return super.getImage(element);
}","public Image getImage(Object element){
  if (element instanceof IFolderNode) {
    return ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
  }
 else   if (element instanceof TdDataProvider) {
    return ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
  }
  return super.getImage(element);
}",0.7625272331154684
140454,"public void saveAnalysis() throws DataprofilerCoreException {
  if (this.domain == null) {
    domain=DomainFactory.eINSTANCE.createDomain();
    domain.setName(DomainHelper.ANALYSIS_DATA_FILTER);
  }
  List<Domain> domains=new ArrayList<Domain>();
  domains.add(domain);
  if (!this.tableFilterText.getText().equals(PluginConstant.EMPTY_STRING)) {
    DomainHelper.setDataFilterTablePattern(domains,tableFilterText.getText());
  }
  if (!this.viewFilterText.getText().equals(PluginConstant.EMPTY_STRING)) {
    DomainHelper.setDataFilterViewPattern(domains,viewFilterText.getText());
  }
  connectionAnalysis.getParameters().getDataFilter().add(domain);
  ReturnCode save=AnaResourceFileHelper.getInstance().save(connectionAnalysis);
  if (save.isOk()) {
    log.info(""String_Node_Str"" + connectionAnalysis.getFileName());
  }
}","public void saveAnalysis() throws DataprofilerCoreException {
  EList<Domain> dataFilters=connectionAnalysis.getParameters().getDataFilter();
  if (!this.tableFilterText.getText().equals(PluginConstant.EMPTY_STRING)) {
    DomainHelper.setDataFilterTablePattern(dataFilters,tableFilterText.getText());
  }
  if (!this.viewFilterText.getText().equals(PluginConstant.EMPTY_STRING)) {
    DomainHelper.setDataFilterViewPattern(dataFilters,viewFilterText.getText());
  }
  ReturnCode save=AnaResourceFileHelper.getInstance().save(connectionAnalysis);
  if (save.isOk()) {
    log.info(""String_Node_Str"" + connectionAnalysis.getFileName());
  }
}",0.7687074829931972
140455,"private void createAnalysisParamSection(ScrolledForm form,Composite topComp){
  Section statisticalSection=this.createSection(form,topComp,""String_Node_Str"",false,null);
  Composite sectionClient=toolkit.createComposite(statisticalSection);
  Pattern tablePattern=null;
  Pattern viewPattern=null;
  if (this.connectionAnalysis.getParameters().getDataFilter().size() > 0) {
    domain=connectionAnalysis.getParameters().getDataFilter().get(0);
    for (    Pattern patttern : domain.getPatterns()) {
      if (patttern.getName().equals(TABLE_PATTERN_NAME)) {
        tablePattern=patttern;
      }
 else {
        viewPattern=patttern;
      }
    }
  }
  sectionClient.setLayout(new GridLayout(2,false));
  Label tableFilterLabel=new Label(sectionClient,SWT.None);
  tableFilterLabel.setText(""String_Node_Str"");
  tableFilterLabel.setLayoutData(new GridData());
  tableFilterText=new Text(sectionClient,SWT.BORDER);
  tableFilterText.setText(tablePattern == null ? PluginConstant.EMPTY_STRING : ((RegularExpressionImpl)tablePattern.getComponents().get(0)).getExpression().getBody());
  GridDataFactory.fillDefaults().grab(true,false).applyTo(tableFilterText);
  tableFilterText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  Label viewFilterLabel=new Label(sectionClient,SWT.None);
  viewFilterLabel.setText(""String_Node_Str"");
  viewFilterLabel.setLayoutData(new GridData());
  viewFilterText=new Text(sectionClient,SWT.BORDER);
  viewFilterText.setText(viewPattern == null ? PluginConstant.EMPTY_STRING : ((RegularExpressionImpl)viewPattern.getComponents().get(0)).getExpression().getBody());
  GridDataFactory.fillDefaults().grab(true,false).applyTo(viewFilterText);
  viewFilterText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  statisticalSection.setClient(sectionClient);
}","private void createAnalysisParamSection(ScrolledForm form,Composite topComp){
  Section statisticalSection=this.createSection(form,topComp,""String_Node_Str"",false,null);
  Composite sectionClient=toolkit.createComposite(statisticalSection);
  sectionClient.setLayout(new GridLayout(2,false));
  Label tableFilterLabel=new Label(sectionClient,SWT.None);
  tableFilterLabel.setText(""String_Node_Str"");
  tableFilterLabel.setLayoutData(new GridData());
  tableFilterText=new Text(sectionClient,SWT.BORDER);
  EList<Domain> dataFilters=connectionAnalysis.getParameters().getDataFilter();
  String tablePattern=DomainHelper.getTablePattern(dataFilters);
  tableFilterText.setText(tablePattern == null ? PluginConstant.EMPTY_STRING : tablePattern);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(tableFilterText);
  tableFilterText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  Label viewFilterLabel=new Label(sectionClient,SWT.None);
  viewFilterLabel.setText(""String_Node_Str"");
  viewFilterLabel.setLayoutData(new GridData());
  viewFilterText=new Text(sectionClient,SWT.BORDER);
  String viewPattern=DomainHelper.getViewPattern(dataFilters);
  viewFilterText.setText(viewPattern == null ? PluginConstant.EMPTY_STRING : viewPattern);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(viewFilterText);
  viewFilterText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  statisticalSection.setClient(sectionClient);
}",0.7813477395507534
140456,"private void createStatisticalSection(ScrolledForm form,Composite topComp){
  Section statisticalSection=this.createSection(form,topComp,""String_Node_Str"",false,null);
  Composite sectionClient=toolkit.createComposite(statisticalSection);
  sectionClient.setLayout(new GridLayout());
  TableViewer statisticalViewer=new TableViewer(sectionClient,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  Table table=statisticalViewer.getTable();
  table.setHeaderVisible(true);
  table.setBackgroundMode(SWT.INHERIT_FORCE);
  table.setLinesVisible(true);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(table);
  List<? extends SchemaIndicator> indicatorList=null;
  if (this.connectionAnalysis.getResults().getIndicators().size() > 0) {
    ConnectionIndicator conIndicator=(ConnectionIndicator)connectionAnalysis.getResults().getIndicators().get(0);
    indicatorList=conIndicator.getCatalogIndicators();
  }
 else {
    indicatorList=new ArrayList<SchemaIndicator>();
  }
  List<TdCatalog> catalogs=DataProviderHelper.getTdCatalogs(tdDataProvider);
  AbstractStatisticalViewerProvider provider;
  if (catalogs.size() > 0) {
    createCatalogTableColumns(table);
    provider=new CatalogViewerProvier();
  }
 else {
    createSchemaTableColumns(table);
    provider=new SchemaViewerProvier();
  }
  statisticalViewer.setLabelProvider(provider);
  statisticalViewer.setContentProvider(provider);
  statisticalViewer.setInput(indicatorList);
  sectionClient.layout();
  statisticalSection.setClient(sectionClient);
}","private void createStatisticalSection(ScrolledForm form,Composite topComp){
  Section statisticalSection=this.createSection(form,topComp,""String_Node_Str"",false,null);
  Composite sectionClient=toolkit.createComposite(statisticalSection);
  sectionClient.setLayout(new GridLayout());
  TableViewer statisticalViewer=new TableViewer(sectionClient,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER| SWT.FULL_SELECTION);
  Table table=statisticalViewer.getTable();
  table.setHeaderVisible(true);
  table.setBackgroundMode(SWT.INHERIT_FORCE);
  table.setLinesVisible(true);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(table);
  List<? extends SchemaIndicator> indicatorList=null;
  if (this.connectionAnalysis.getResults().getIndicators().size() > 0) {
    ConnectionIndicator conIndicator=(ConnectionIndicator)connectionAnalysis.getResults().getIndicators().get(0);
    indicatorList=conIndicator.getCatalogIndicators();
  }
 else {
    indicatorList=new ArrayList<SchemaIndicator>();
  }
  List<TdCatalog> catalogs=DataProviderHelper.getTdCatalogs(tdDataProvider);
  List<TdSchema> tdSchemas=DataProviderHelper.getTdSchema(tdDataProvider);
  AbstractStatisticalViewerProvider provider;
  if (catalogs.size() > 0 && tdSchemas.size() > 0) {
    createSchemaTableColumns(table);
    provider=new CatalogViewerProvier();
  }
 else {
    if (catalogs.size() > 0) {
      createCatalogTableColumns(table);
      provider=new CatalogViewerProvier();
    }
 else {
      createSchemaTableColumns(table);
      provider=new SchemaViewerProvier();
    }
  }
  statisticalViewer.setLabelProvider(provider);
  statisticalViewer.setContentProvider(provider);
  statisticalViewer.setInput(indicatorList);
  sectionClient.layout();
  statisticalSection.setClient(sectionClient);
}",0.9258600237247924
140457,"private IFile createEmptyAnalysisFile() throws DataprofilerCoreException {
  AnalysisBuilder analysisBuilder=new AnalysisBuilder();
  boolean analysisInitialized=analysisBuilder.initializeAnalysis(analysisName,analysisType);
  if (!analysisInitialized) {
    throw new DataprofilerCoreException(analysisName + ""String_Node_Str"");
  }
  Analysis analysis=analysisBuilder.getAnalysis();
  fillAnalysisBuilder(analysisBuilder);
  AnalysisWriter writer=new AnalysisWriter();
  TypedReturnCode<IFile> saved=writer.createAnalysisFile(analysis,folderResource);
  IFile file;
  if (saved.isOk()) {
    log.info(""String_Node_Str"" + folderResource.getFullPath().toString());
    file=saved.getObject();
    Resource anaResource=analysis.eResource();
    AnaResourceFileHelper.getInstance().register(file,anaResource);
    AnaResourceFileHelper.getInstance().setResourceChanged(true);
  }
 else {
    throw new DataprofilerCoreException(""String_Node_Str"" + folderResource.getFullPath().toString() + ""String_Node_Str""+ saved.getMessage());
  }
  CorePlugin.getDefault().refreshWorkSpace();
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return file;
}","protected IFile createEmptyAnalysisFile() throws DataprofilerCoreException {
  AnalysisBuilder analysisBuilder=new AnalysisBuilder();
  boolean analysisInitialized=analysisBuilder.initializeAnalysis(analysisName,analysisType);
  if (!analysisInitialized) {
    throw new DataprofilerCoreException(analysisName + ""String_Node_Str"");
  }
  Analysis analysis=analysisBuilder.getAnalysis();
  fillAnalysisBuilder(analysisBuilder);
  AnalysisWriter writer=new AnalysisWriter();
  TypedReturnCode<IFile> saved=writer.createAnalysisFile(analysis,folderResource);
  IFile file;
  if (saved.isOk()) {
    log.info(""String_Node_Str"" + folderResource.getFullPath().toString());
    file=saved.getObject();
    Resource anaResource=analysis.eResource();
    AnaResourceFileHelper.getInstance().register(file,anaResource);
    AnaResourceFileHelper.getInstance().setResourceChanged(true);
  }
 else {
    throw new DataprofilerCoreException(""String_Node_Str"" + folderResource.getFullPath().toString() + ""String_Node_Str""+ saved.getMessage());
  }
  CorePlugin.getDefault().refreshWorkSpace();
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return file;
}",0.995008319467554
140458,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.heightHint=70;
  Label inforLabel=new Label(container,SWT.BORDER);
  inforLabel.setText(defaultInfor);
  inforLabel.setLayoutData(gd);
  Composite subContainer=new Composite(container,SWT.NONE);
  GridLayout subLayout=new GridLayout(2,false);
  subContainer.setLayout(subLayout);
  subContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label labelTable=new Label(subContainer,SWT.NONE);
  labelTable.setText(""String_Node_Str"");
  tableFilter=new Text(subContainer,SWT.BORDER);
  tableFilter.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  tableFilter.setText(""String_Node_Str"");
  tableFilter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      ((ConnectionAnalysisParameter)getConnectionParams()).setViewFilter(tableFilter.getText());
    }
  }
);
  Label labelView=new Label(subContainer,SWT.NONE);
  labelView.setText(""String_Node_Str"");
  viewFilter=new Text(subContainer,SWT.BORDER);
  viewFilter.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  viewFilter.setText(""String_Node_Str"");
  viewFilter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      ((ConnectionAnalysisParameter)getConnectionParams()).setViewFilter(viewFilter.getText());
    }
  }
);
  setControl(container);
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayout(new GridLayout());
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.heightHint=70;
  Label inforLabel=new Label(container,SWT.BORDER);
  inforLabel.setText(defaultInfor);
  inforLabel.setLayoutData(gd);
  Composite subContainer=new Composite(container,SWT.NONE);
  GridLayout subLayout=new GridLayout(2,false);
  subContainer.setLayout(subLayout);
  subContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label labelTable=new Label(subContainer,SWT.NONE);
  labelTable.setText(""String_Node_Str"");
  tableFilter=new Text(subContainer,SWT.BORDER);
  tableFilter.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  tableFilter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      ((ConnectionAnalysisParameter)getConnectionParams()).setTableFilter(tableFilter.getText());
    }
  }
);
  Label labelView=new Label(subContainer,SWT.NONE);
  labelView.setText(""String_Node_Str"");
  viewFilter=new Text(subContainer,SWT.BORDER);
  viewFilter.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  viewFilter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      ((ConnectionAnalysisParameter)getConnectionParams()).setViewFilter(viewFilter.getText());
    }
  }
);
  setControl(container);
}",0.9682977257064094
140459,"@Override protected void fillAnalysisBuilder(AnalysisBuilder analysisBuilder){
  ConnectionAnalysisParameter parameters=(ConnectionAnalysisParameter)getAnalysisParameter();
  TdDataProvider tdProvider=parameters.getTdDataProvider();
  this.analysisBuilder=analysisBuilder;
  analysisBuilder.setAnalysisConnection(tdProvider);
  ConnectionIndicator indicator=SchemaFactory.eINSTANCE.createConnectionIndicator();
  indicator.setAnalyzedElement(tdProvider);
  List<TdSchema> tdSchemas=DataProviderHelper.getTdSchema(tdProvider);
  for (  TdSchema schema : tdSchemas) {
    SchemaIndicator createSchemaIndicator=SchemaFactory.eINSTANCE.createSchemaIndicator();
    createSchemaIndicator.setAnalyzedElement(schema);
    indicator.addSchemaIndicator(createSchemaIndicator);
  }
  List<TdCatalog> tdCatalogs=DataProviderHelper.getTdCatalogs(tdProvider);
  for (  TdCatalog tdCatalog : tdCatalogs) {
    SchemaIndicator createSchemaIndicator=SchemaFactory.eINSTANCE.createSchemaIndicator();
    createSchemaIndicator.setAnalyzedElement(tdCatalog);
    indicator.addSchemaIndicator(createSchemaIndicator);
  }
  analysisBuilder.addElementToAnalyze(tdProvider,indicator);
  super.fillAnalysisBuilder(analysisBuilder);
}","@Override protected void fillAnalysisBuilder(AnalysisBuilder analysisBuilder){
  ConnectionAnalysisParameter parameters=(ConnectionAnalysisParameter)getAnalysisParameter();
  TdDataProvider tdProvider=parameters.getTdDataProvider();
  analysisBuilder.setAnalysisConnection(tdProvider);
  ConnectionIndicator indicator=SchemaFactory.eINSTANCE.createConnectionIndicator();
  indicator.setAnalyzedElement(tdProvider);
  List<TdSchema> tdSchemas=DataProviderHelper.getTdSchema(tdProvider);
  for (  TdSchema schema : tdSchemas) {
    SchemaIndicator createSchemaIndicator=SchemaFactory.eINSTANCE.createSchemaIndicator();
    createSchemaIndicator.setAnalyzedElement(schema);
    indicator.addSchemaIndicator(createSchemaIndicator);
  }
  List<TdCatalog> tdCatalogs=DataProviderHelper.getTdCatalogs(tdProvider);
  for (  TdCatalog tdCatalog : tdCatalogs) {
    SchemaIndicator createSchemaIndicator=SchemaFactory.eINSTANCE.createSchemaIndicator();
    createSchemaIndicator.setAnalyzedElement(tdCatalog);
    indicator.addSchemaIndicator(createSchemaIndicator);
  }
  analysisBuilder.addElementToAnalyze(tdProvider,indicator);
  super.fillAnalysisBuilder(analysisBuilder);
}",0.2514718250630782
140460,"public void run(){
  for (  ChartWithData chart : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
    ImageHyperlink image=toolkit.createImageHyperlink(comp,SWT.WRAP);
    image.setImage(chart.getImageDescriptor().createImage());
  }
}","public void run(){
  for (  ChartWithData chart : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
    if (chart.getImageDescriptor() != null) {
      ImageHyperlink image=toolkit.createImageHyperlink(comp,SWT.WRAP);
      image.setImage(chart.getImageDescriptor().createImage());
    }
  }
}",0.8992805755395683
140461,"public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  List<Composite> previewChartList=new ArrayList<Composite>();
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(""String_Node_Str"" + column.getName());
    exComp.setLayout(new GridLayout());
    exComp.setData(columnIndicator);
    addExpandableCompositeListener(exComp);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              for (              ChartWithData chart : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
                ImageHyperlink image=toolkit.createImageHyperlink(comp,SWT.WRAP);
                image.setImage(chart.getImageDescriptor().createImage());
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
      if (!exComp.isDisposed()) {
        exComp.setExpanded(true);
      }
    }
    exComp.setClient(comp);
    exComp.addExpansionListener(new ExpansionAdapter(){
      public void expansionStateChanged(      ExpansionEvent e){
        form.reflow(true);
      }
    }
);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}","public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  List<Composite> previewChartList=new ArrayList<Composite>();
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(""String_Node_Str"" + column.getName());
    exComp.setLayout(new GridLayout());
    exComp.setData(columnIndicator);
    addExpandableCompositeListener(exComp);
    previewChartList.add(exComp);
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              for (              ChartWithData chart : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
                if (chart.getImageDescriptor() != null) {
                  ImageHyperlink image=toolkit.createImageHyperlink(comp,SWT.WRAP);
                  image.setImage(chart.getImageDescriptor().createImage());
                }
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
      if (!exComp.isDisposed()) {
        exComp.setExpanded(true);
      }
    }
    exComp.setClient(comp);
    exComp.addExpansionListener(new ExpansionAdapter(){
      public void expansionStateChanged(      ExpansionEvent e){
        form.reflow(true);
      }
    }
);
  }
  if (!previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
}",0.9820224719101124
140462,"private static CategoryDataset createSimpleDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  if (isCreate) {
    for (int index=0; index < indicatorUnitList.size(); index++) {
      IndicatorUnit unit=indicatorUnitList.get(index);
      IndicatorCommonUtil.compositeIndicatorMap(unit);
      Object object=unit.getValue();
      String label=unit.getIndicatorName();
      if (object != null && !unit.getIndicator().getInstantiatedExpressions().isEmpty()) {
        String valueStr=String.valueOf(object);
        double value=Double.parseDouble(valueStr);
        renderer3d.setSeriesPaint(index,unit.getColor());
        dataset.addValue(value,label,""String_Node_Str"");
      }
    }
  }
 else {
    for (    IndicatorUnit indicator : indicatorUnitList) {
      dataset.addValue(150,indicator.getIndicatorName(),""String_Node_Str"");
    }
  }
  return dataset;
}","private static CategoryDataset createSimpleDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  if (isCreate) {
    for (int index=0; index < indicatorUnitList.size(); index++) {
      IndicatorUnit unit=indicatorUnitList.get(index);
      IndicatorCommonUtil.compositeIndicatorMap(unit);
      if (unit.isExcuted()) {
        double value=Double.parseDouble(unit.getValue().toString());
        String label=unit.getIndicatorName();
        renderer3d.setSeriesPaint(index,unit.getColor());
        dataset.addValue(value,label,""String_Node_Str"");
      }
    }
  }
 else {
    for (    IndicatorUnit indicator : indicatorUnitList) {
      dataset.addValue(150,indicator.getIndicatorName(),""String_Node_Str"");
    }
  }
  return dataset;
}",0.8363636363636363
140463,"private static ChartDataEntity[] getDataEnityFromUnits(List<IndicatorUnit> unitList){
  List<ChartDataEntity> list=new ArrayList<ChartDataEntity>();
  for (  IndicatorUnit unit : unitList) {
    if (unit.getType() == IndicatorEnum.FrequencyIndicatorEnum) {
      FrequencyExt[] freqExt=(FrequencyExt[])unit.getValue();
      for (      FrequencyExt one : freqExt) {
        ChartDataEntity entity=new ChartDataEntity();
        entity.setLabel(one.getKey().toString());
        entity.setValue(String.valueOf(one.getValue()));
        entity.setPercent(String.valueOf(one.getFrequency()));
        entity.setIndicator(unit.getIndicator());
        list.add(entity);
      }
      ChartDataEntity entity=new ChartDataEntity();
      FrequencyIndicator freqIndicator=(FrequencyIndicator)unit.getIndicator();
      entity.setLabel(FrequencyIndicator.OTHER);
      entity.setValue(freqIndicator.getCount(FrequencyIndicator.OTHER).toString());
      entity.setPercent(freqIndicator.getFrequency(FrequencyIndicator.OTHER).toString());
      entity.setIndicator(freqIndicator);
      list.add(entity);
    }
 else     if (unit.getType() == IndicatorEnum.RegexpMatchingIndicatorEnum || unit.getType() == IndicatorEnum.SqlPatternMatchingIndicatorEnum) {
      PatternMatchingExt patnExt=(PatternMatchingExt)unit.getValue();
      PatternChartDataEntity entity=new PatternChartDataEntity();
      entity.setLabel(unit.getIndicatorName());
      entity.setNumMatch(String.valueOf(patnExt.getMatchingValueCount()));
      entity.setNumNoMatch(String.valueOf(patnExt.getNotMatchingValueCount()));
      entity.setIndicator(unit.getIndicator());
      list.add(entity);
    }
 else {
      if (unit.getValue() != null) {
        ChartDataEntity entity=new ChartDataEntity();
        entity.setLabel(unit.getIndicatorName());
        entity.setValue(unit.getValue().toString());
        entity.setIndicator(unit.getIndicator());
        list.add(entity);
      }
    }
  }
  return list.toArray(new ChartDataEntity[list.size()]);
}","private static ChartDataEntity[] getDataEnityFromUnits(List<IndicatorUnit> unitList){
  List<ChartDataEntity> list=new ArrayList<ChartDataEntity>();
  for (  IndicatorUnit unit : unitList) {
    if (unit.isExcuted()) {
      ChartDataEntity entity;
switch (unit.getType()) {
case FrequencyIndicatorEnum:
        FrequencyExt[] freqExt=(FrequencyExt[])unit.getValue();
      for (      FrequencyExt one : freqExt) {
        entity=new ChartDataEntity();
        entity.setLabel(one.getKey().toString());
        entity.setValue(String.valueOf(one.getValue()));
        entity.setPercent(String.valueOf(one.getFrequency()));
        entity.setIndicator(unit.getIndicator());
        list.add(entity);
      }
    entity=new ChartDataEntity();
  FrequencyIndicator freqIndicator=(FrequencyIndicator)unit.getIndicator();
entity.setLabel(FrequencyIndicator.OTHER);
entity.setValue(freqIndicator.getCount(FrequencyIndicator.OTHER).toString());
entity.setPercent(freqIndicator.getFrequency(FrequencyIndicator.OTHER).toString());
entity.setIndicator(freqIndicator);
list.add(entity);
break;
case RegexpMatchingIndicatorEnum:
case SqlPatternMatchingIndicatorEnum:
PatternMatchingExt patnExt=(PatternMatchingExt)unit.getValue();
PatternChartDataEntity patternEntity=new PatternChartDataEntity();
patternEntity.setLabel(unit.getIndicatorName());
patternEntity.setNumMatch(String.valueOf(patnExt.getMatchingValueCount()));
patternEntity.setNumNoMatch(String.valueOf(patnExt.getNotMatchingValueCount()));
patternEntity.setIndicator(unit.getIndicator());
list.add(patternEntity);
break;
default :
entity=new ChartDataEntity();
entity.setLabel(unit.getIndicatorName());
entity.setValue(unit.getValue().toString());
entity.setIndicator(unit.getIndicator());
list.add(entity);
}
}
}
return list.toArray(new ChartDataEntity[list.size()]);
}",0.5435122459614382
140464,"private static CategoryDataset createFrequenceDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  for (  IndicatorUnit indicatorUnit : indicatorUnitList) {
    IndicatorCommonUtil.compositeIndicatorMap(indicatorUnit);
    Object object=indicatorUnit.getValue();
    if (object != null) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])object;
      Arrays.sort(frequencyExt);
      if (isCreate) {
        int numOfShown=frequencyExt.length;
        IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
        if (parameters != null) {
          if (parameters.getTopN() < frequencyExt.length) {
            numOfShown=parameters.getTopN();
          }
        }
        for (int i=0; i < numOfShown; i++) {
          dataset.addValue(frequencyExt[i].getValue(),""String_Node_Str"",String.valueOf(frequencyExt[i].getKey()));
        }
      }
 else {
        dataset.addValue(70,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(150,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(180,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(185,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(224,""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
  return dataset;
}","private static CategoryDataset createFrequenceDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  for (  IndicatorUnit indicatorUnit : indicatorUnitList) {
    IndicatorCommonUtil.compositeIndicatorMap(indicatorUnit);
    if (indicatorUnit.isExcuted()) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])indicatorUnit.getValue();
      Arrays.sort(frequencyExt);
      if (isCreate) {
        int numOfShown=frequencyExt.length;
        IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
        if (parameters != null) {
          if (parameters.getTopN() < frequencyExt.length) {
            numOfShown=parameters.getTopN();
          }
        }
        for (int i=0; i < numOfShown; i++) {
          dataset.addValue(frequencyExt[i].getValue(),""String_Node_Str"",String.valueOf(frequencyExt[i].getKey()));
        }
      }
 else {
        dataset.addValue(70,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(150,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(180,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(185,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(224,""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
  return dataset;
}",0.9647326507394768
140465,"private static CategoryDataset createPatternMatchDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  if (isCreate) {
    int i=0;
    for (    IndicatorUnit unit : indicatorUnitList) {
      IndicatorCommonUtil.compositeIndicatorMap(unit);
      String label=unit.getIndicatorName();
      if (unit.getValue() != null) {
        PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
        double notMathCount=patternExt.getNotMatchingValueCount();
        double machCount=patternExt.getMatchingValueCount();
        dataset.addValue(machCount,""String_Node_Str"",label);
        dataset.addValue(notMathCount,""String_Node_Str"",label);
      }
 else {
        dataset.addValue(0,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(0,""String_Node_Str"",""String_Node_Str"");
      }
      i++;
    }
  }
 else {
    dataset.addValue(0.23,""String_Node_Str"",""String_Node_Str"");
    dataset.addValue(0.77,""String_Node_Str"",""String_Node_Str"");
  }
  return dataset;
}","private static CategoryDataset createPatternMatchDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  if (isCreate) {
    int i=0;
    for (    IndicatorUnit unit : indicatorUnitList) {
      IndicatorCommonUtil.compositeIndicatorMap(unit);
      String label=unit.getIndicatorName();
      if (unit.isExcuted()) {
        PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
        double notMathCount=patternExt.getNotMatchingValueCount();
        double machCount=patternExt.getMatchingValueCount();
        dataset.addValue(machCount,""String_Node_Str"",label);
        dataset.addValue(notMathCount,""String_Node_Str"",label);
      }
      i++;
    }
  }
 else {
    dataset.addValue(0.23,""String_Node_Str"",""String_Node_Str"");
    dataset.addValue(0.77,""String_Node_Str"",""String_Node_Str"");
  }
  return dataset;
}",0.8572879634332148
140466,"private static CategoryDataset createSummaryDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();
  boolean isValide=true;
  if (isCreate) {
    Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
    for (    IndicatorUnit indicatorUnit : indicatorUnitList) {
      try {
        IndicatorCommonUtil.compositeIndicatorMap(indicatorUnit);
      }
 catch (      RuntimeException re) {
        isValide=false;
      }
      Object object=indicatorUnit.getValue();
      if (object != null && isValide) {
        String strValue=String.valueOf(object);
        double doubleValue=Double.valueOf(strValue);
        map.put(indicatorUnit.getType(),doubleValue);
      }
    }
    if (map.size() != 6) {
      DefaultCategoryDataset barDataset=new DefaultCategoryDataset();
      if (map.get(IndicatorEnum.MinValueIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MinValueIndicatorEnum),""String_Node_Str"",IndicatorEnum.MinValueIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.LowerQuartileIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.LowerQuartileIndicatorEnum),""String_Node_Str"",IndicatorEnum.LowerQuartileIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MeanIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MeanIndicatorEnum),""String_Node_Str"",IndicatorEnum.MeanIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MedianIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MedianIndicatorEnum),""String_Node_Str"",IndicatorEnum.MedianIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.UpperQuartileIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.UpperQuartileIndicatorEnum),""String_Node_Str"",IndicatorEnum.UpperQuartileIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MaxValueIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MaxValueIndicatorEnum),""String_Node_Str"",IndicatorEnum.MaxValueIndicatorEnum.getLabel());
      }
      renderer3d.setSeriesPaint(0,Color.RED);
      return barDataset;
    }
    BoxAndWhiskerItem item=createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    BoxAndWhiskerItem item=createBoxAndWhiskerItem(40.0,45.0,30.0,60.0,15.0,75.0,null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
  }
  return dataset;
}","private static CategoryDataset createSummaryDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();
  boolean isValide=true;
  if (isCreate) {
    Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
    for (    IndicatorUnit indicatorUnit : indicatorUnitList) {
      IndicatorCommonUtil.compositeIndicatorMap(indicatorUnit);
      if (indicatorUnit.isExcuted() && isValide) {
        String strValue=String.valueOf(indicatorUnit.getValue());
        double doubleValue=Double.valueOf(strValue);
        map.put(indicatorUnit.getType(),doubleValue);
      }
    }
    if (map.size() != 6) {
      DefaultCategoryDataset barDataset=new DefaultCategoryDataset();
      if (map.get(IndicatorEnum.MinValueIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MinValueIndicatorEnum),""String_Node_Str"",IndicatorEnum.MinValueIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.LowerQuartileIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.LowerQuartileIndicatorEnum),""String_Node_Str"",IndicatorEnum.LowerQuartileIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MeanIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MeanIndicatorEnum),""String_Node_Str"",IndicatorEnum.MeanIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MedianIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MedianIndicatorEnum),""String_Node_Str"",IndicatorEnum.MedianIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.UpperQuartileIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.UpperQuartileIndicatorEnum),""String_Node_Str"",IndicatorEnum.UpperQuartileIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MaxValueIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MaxValueIndicatorEnum),""String_Node_Str"",IndicatorEnum.MaxValueIndicatorEnum.getLabel());
      }
      renderer3d.setSeriesPaint(0,Color.RED);
      return barDataset;
    }
    BoxAndWhiskerItem item=createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    BoxAndWhiskerItem item=createBoxAndWhiskerItem(40.0,45.0,30.0,60.0,15.0,75.0,null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
  }
  return dataset;
}",0.503063063063063
140467,"public static void compositeIndicatorMap(IndicatorUnit indicatorUnit){
  Color tempColor=null;
  Object tempObject=null;
  IndicatorEnum type=indicatorUnit.getType();
  Indicator indicator=indicatorUnit.getIndicator();
switch (type) {
case RowCountIndicatorEnum:
    tempColor=COLOR_ROW_COUNT;
  tempObject=((RowCountIndicator)indicator).getCount();
break;
case NullCountIndicatorEnum:
tempColor=COLOR_NULL_COUNT;
tempObject=((NullCountIndicator)indicator).getNullCount();
break;
case DistinctCountIndicatorEnum:
tempColor=COLOR_DISTIN_CTCOUNT;
tempObject=((DistinctCountIndicator)indicator).getDistinctValueCount();
break;
case UniqueIndicatorEnum:
tempColor=COLOR_UNIQUE_COUNT;
tempObject=(((UniqueCountIndicator)indicator).getUniqueValueCount());
break;
case DuplicateCountIndicatorEnum:
tempColor=COLOR_DUPLICATE_COUNT;
tempObject=((DuplicateCountIndicator)indicator).getDuplicateValueCount();
break;
case BlankCountIndicatorEnum:
tempColor=COLOR_BLANKCOUNT;
tempObject=((BlankCountIndicator)indicator).getBlankCount();
break;
case MinLengthIndicatorEnum:
tempColor=COLOR_MIN_LENGTH;
tempObject=((MinLengthIndicator)indicator).getLength();
break;
case MaxLengthIndicatorEnum:
tempColor=COLOR_MAX_LENGTH;
tempObject=((MaxLengthIndicator)indicator).getLength();
break;
case AverageLengthIndicatorEnum:
tempColor=COLOR_AVERAGE_LENGTH;
tempObject=((AverageLengthIndicator)indicator).getAverageLength();
break;
case FrequencyIndicatorEnum:
FrequencyIndicator frequency=(FrequencyIndicator)indicator;
Set<Object> valueSet=frequency.getDistinctValues();
if (valueSet == null) {
break;
}
FrequencyExt[] frequencyExt=new FrequencyExt[valueSet.size()];
int i=0;
for (Object o : valueSet) {
frequencyExt[i]=new FrequencyExt();
frequencyExt[i].setKey(o);
frequencyExt[i].setValue(frequency.getCount(o));
frequencyExt[i].setFrequency(frequency.getFrequency(o));
i++;
}
tempColor=null;
tempObject=frequencyExt;
break;
case MeanIndicatorEnum:
tempColor=null;
tempObject=((MeanIndicator)indicator).getMean();
break;
case MedianIndicatorEnum:
tempColor=null;
tempObject=((MedianIndicator)indicator).getMedian();
break;
case MinValueIndicatorEnum:
tempColor=null;
tempObject=((MinValueIndicator)indicator).getValue();
break;
case MaxValueIndicatorEnum:
tempColor=null;
tempObject=((MaxValueIndicator)indicator).getValue();
break;
case LowerQuartileIndicatorEnum:
tempColor=null;
tempObject=((LowerQuartileIndicator)indicator).getValue();
break;
case UpperQuartileIndicatorEnum:
tempColor=null;
tempObject=((UpperQuartileIndicator)indicator).getValue();
break;
case RegexpMatchingIndicatorEnum:
case SqlPatternMatchingIndicatorEnum:
tempColor=null;
PatternMatchingExt patternExt=new PatternMatchingExt();
patternExt.setMatchingValueCount(((PatternMatchingIndicator)indicator).getMatchingValueCount());
patternExt.setNotMatchingValueCount(((PatternMatchingIndicator)indicator).getNotMatchingValueCount());
tempObject=patternExt;
break;
case ModeIndicatorEnum:
tempColor=null;
tempObject=((ModeIndicator)indicator).getMode();
default :
}
indicatorUnit.setColor(tempColor);
indicatorUnit.setValue(tempObject);
}","public static void compositeIndicatorMap(IndicatorUnit indicatorUnit){
  Color tempColor=null;
  Object tempObject=null;
  IndicatorEnum type=indicatorUnit.getType();
  Indicator indicator=indicatorUnit.getIndicator();
  if (!indicator.getInstantiatedExpressions().isEmpty()) {
switch (type) {
case RowCountIndicatorEnum:
      tempColor=COLOR_ROW_COUNT;
    tempObject=((RowCountIndicator)indicator).getCount();
  break;
case NullCountIndicatorEnum:
tempColor=COLOR_NULL_COUNT;
tempObject=((NullCountIndicator)indicator).getNullCount();
break;
case DistinctCountIndicatorEnum:
tempColor=COLOR_DISTIN_CTCOUNT;
tempObject=((DistinctCountIndicator)indicator).getDistinctValueCount();
break;
case UniqueIndicatorEnum:
tempColor=COLOR_UNIQUE_COUNT;
tempObject=(((UniqueCountIndicator)indicator).getUniqueValueCount());
break;
case DuplicateCountIndicatorEnum:
tempColor=COLOR_DUPLICATE_COUNT;
tempObject=((DuplicateCountIndicator)indicator).getDuplicateValueCount();
break;
case BlankCountIndicatorEnum:
tempColor=COLOR_BLANKCOUNT;
tempObject=((BlankCountIndicator)indicator).getBlankCount();
break;
case MinLengthIndicatorEnum:
tempColor=COLOR_MIN_LENGTH;
tempObject=((MinLengthIndicator)indicator).getLength();
break;
case MaxLengthIndicatorEnum:
tempColor=COLOR_MAX_LENGTH;
tempObject=((MaxLengthIndicator)indicator).getLength();
break;
case AverageLengthIndicatorEnum:
tempColor=COLOR_AVERAGE_LENGTH;
tempObject=((AverageLengthIndicator)indicator).getAverageLength();
break;
case FrequencyIndicatorEnum:
FrequencyIndicator frequency=(FrequencyIndicator)indicator;
Set<Object> valueSet=frequency.getDistinctValues();
if (valueSet == null) {
break;
}
FrequencyExt[] frequencyExt=new FrequencyExt[valueSet.size()];
int i=0;
for (Object o : valueSet) {
frequencyExt[i]=new FrequencyExt();
frequencyExt[i].setKey(o);
frequencyExt[i].setValue(frequency.getCount(o));
frequencyExt[i].setFrequency(frequency.getFrequency(o));
i++;
}
tempColor=null;
tempObject=frequencyExt;
break;
case MeanIndicatorEnum:
tempColor=null;
tempObject=((MeanIndicator)indicator).getMean();
break;
case MedianIndicatorEnum:
tempColor=null;
tempObject=((MedianIndicator)indicator).getMedian();
break;
case MinValueIndicatorEnum:
tempColor=null;
tempObject=((MinValueIndicator)indicator).getValue();
break;
case MaxValueIndicatorEnum:
tempColor=null;
tempObject=((MaxValueIndicator)indicator).getValue();
break;
case LowerQuartileIndicatorEnum:
tempColor=null;
tempObject=((LowerQuartileIndicator)indicator).getValue();
break;
case UpperQuartileIndicatorEnum:
tempColor=null;
tempObject=((UpperQuartileIndicator)indicator).getValue();
break;
case RegexpMatchingIndicatorEnum:
case SqlPatternMatchingIndicatorEnum:
tempColor=null;
PatternMatchingExt patternExt=new PatternMatchingExt();
patternExt.setMatchingValueCount(((PatternMatchingIndicator)indicator).getMatchingValueCount());
patternExt.setNotMatchingValueCount(((PatternMatchingIndicator)indicator).getNotMatchingValueCount());
tempObject=patternExt;
break;
case ModeIndicatorEnum:
tempColor=null;
tempObject=((ModeIndicator)indicator).getMode();
default :
}
indicatorUnit.setExcuted(true);
indicatorUnit.setColor(tempColor);
indicatorUnit.setValue(tempObject);
}
}",0.9794749403341289
140468,"private String extract(DateGrain dateGrain,String colName){
  if (is(MYSQL)) {
    return dateGrain.getName() + surroundWith('(',colName,')');
  }
  if (is(ORACLE)) {
    String toNumberToChar=""String_Node_Str"";
switch (dateGrain.getValue()) {
case DateGrain.DAY_VALUE:
      return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.WEEK_VALUE:
    return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.MONTH_VALUE:
  return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.QUARTER_VALUE:
return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.YEAR_VALUE:
return toNumberToChar + colName + ""String_Node_Str"";
default :
}
}
return ""String_Node_Str"" + dateGrain + from()+ colName+ ""String_Node_Str"";
}","private String extract(DateGrain dateGrain,String colName){
  if (is(MYSQL)) {
    return dateGrain.getName() + surroundWith('(',colName,')');
  }
  if (is(ORACLE)) {
    String toNumberToChar=""String_Node_Str"";
switch (dateGrain.getValue()) {
case DateGrain.DAY_VALUE:
      return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.WEEK_VALUE:
    return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.MONTH_VALUE:
  return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.QUARTER_VALUE:
return toNumberToChar + colName + ""String_Node_Str"";
case DateGrain.YEAR_VALUE:
return toNumberToChar + colName + ""String_Node_Str"";
default :
}
}
if (is(MSSQL)) {
return ""String_Node_Str"" + dateGrain.getName() + ""String_Node_Str""+ colName+ ""String_Node_Str"";
}
return ""String_Node_Str"" + dateGrain + from()+ colName+ ""String_Node_Str"";
}",0.8741475511469312
140469,"private String getAlias(String colName,DateGrain dateAggregationType){
  return ""String_Node_Str"" + colName + dateAggregationType.getName();
}","private String getAlias(String colName,DateGrain dateAggregationType){
  if (dbms().supportAliasesInGroupBy()) {
    return ""String_Node_Str"" + unquote(colName) + dateAggregationType.getName()+ ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.7064676616915423
140470,"@Override protected void addFields(){
  this.setLayout(new GridLayout(2,false));
  GridData gdText=new GridData(GridData.FILL_HORIZONTAL);
  Label minValueText=new Label(this,SWT.NONE);
  minValueText.setText(""String_Node_Str"");
  minValue=new Text(this,SWT.BORDER);
  minValue.setLayoutData(gdText);
  Label maxValueText=new Label(this,SWT.NONE);
  maxValueText.setText(""String_Node_Str"");
  maxValue=new Text(this,SWT.BORDER);
  maxValue.setLayoutData(gdText);
  Label numOfBinsText=new Label(this,SWT.NONE);
  numOfBinsText.setText(""String_Node_Str"");
  GridData gdTxt=new GridData();
  gdTxt.widthHint=50;
  numbOfBins=new Text(this,SWT.BORDER);
  numbOfBins.setLayoutData(gdTxt);
  Composite rangeComp=new Composite(this,SWT.NONE);
  rangeComp.setLayout(new GridLayout());
  GridData gdComp=new GridData(GridData.FILL_BOTH);
  gdComp.horizontalSpan=2;
  rangeComp.setLayoutData(gdComp);
  isSetRange=new Button(rangeComp,SWT.CHECK);
  isSetRange.setText(""String_Node_Str"");
  tableViewer=new TableViewer(rangeComp,SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
  tableViewer.setLabelProvider(new BinsLableProvider());
  tableViewer.setContentProvider(new BinsContentProvider());
  Table table=tableViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  GridData tableData=new GridData(GridData.FILL_HORIZONTAL);
  tableData.heightHint=80;
  table.setLayoutData(tableData);
  TableColumn column1=new TableColumn(table,SWT.NONE);
  column1.setText(""String_Node_Str"");
  column1.setWidth(150);
  column1.setAlignment(SWT.CENTER);
  TableColumn column2=new TableColumn(table,SWT.NONE);
  column2.setWidth(150);
  column2.setText(""String_Node_Str"");
  column2.setAlignment(SWT.CENTER);
  TableColumn column3=new TableColumn(table,SWT.NONE);
  column3.setWidth(150);
  column3.setText(""String_Node_Str"");
  column3.setAlignment(SWT.CENTER);
  tableViewer.setColumnProperties(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  CellEditor[] cellEditor=new CellEditor[3];
  cellEditor[0]=new TextCellEditor(table);
  cellEditor[1]=null;
  cellEditor[2]=new TextCellEditor(table);
  tableViewer.setCellEditors(cellEditor);
  tableViewer.setCellModifier(new SliceCellModifier());
  GridData gd=new GridData();
  gd.horizontalAlignment=SWT.CENTER;
  Composite operationBTNComp=new Composite(rangeComp,SWT.NONE);
  operationBTNComp.setLayout(new FillLayout());
  operationBTNComp.setLayoutData(gd);
  addSlice=new Button(operationBTNComp,SWT.NONE);
  addSlice.setText(""String_Node_Str"");
  addSlice.setEnabled(false);
  delSlice=new Button(operationBTNComp,SWT.NONE);
  delSlice.setText(""String_Node_Str"");
  delSlice.setEnabled(false);
}","@Override protected void addFields(){
  this.setLayout(new GridLayout(2,false));
  GridData gdText=new GridData(GridData.FILL_HORIZONTAL);
  Label minValueText=new Label(this,SWT.NONE);
  minValueText.setText(""String_Node_Str"");
  minValue=new Text(this,SWT.BORDER);
  minValue.setLayoutData(gdText);
  Label maxValueText=new Label(this,SWT.NONE);
  maxValueText.setText(""String_Node_Str"");
  maxValue=new Text(this,SWT.BORDER);
  maxValue.setLayoutData(gdText);
  Label numOfBinsText=new Label(this,SWT.NONE);
  numOfBinsText.setText(""String_Node_Str"");
  GridData gdTxt=new GridData();
  gdTxt.widthHint=50;
  numbOfBins=new Text(this,SWT.BORDER);
  numbOfBins.setLayoutData(gdTxt);
  Composite rangeComp=new Composite(this,SWT.NONE);
  rangeComp.setLayout(new GridLayout());
  GridData gdComp=new GridData(GridData.FILL_BOTH);
  gdComp.horizontalSpan=2;
  rangeComp.setLayoutData(gdComp);
  isSetRange=new Button(rangeComp,SWT.CHECK);
  isSetRange.setText(""String_Node_Str"");
  tableViewer=new TableViewer(rangeComp,SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
  tableViewer.setLabelProvider(new BinsLableProvider());
  tableViewer.setContentProvider(new BinsContentProvider());
  Table table=tableViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  GridData tableData=new GridData(GridData.FILL_HORIZONTAL);
  tableData.heightHint=80;
  table.setLayoutData(tableData);
  TableColumn column1=new TableColumn(table,SWT.NONE);
  column1.setText(""String_Node_Str"");
  column1.setWidth(150);
  column1.setAlignment(SWT.CENTER);
  TableColumn column2=new TableColumn(table,SWT.NONE);
  column2.setWidth(150);
  column2.setText(""String_Node_Str"");
  column2.setAlignment(SWT.CENTER);
  TableColumn column3=new TableColumn(table,SWT.NONE);
  column3.setWidth(150);
  column3.setText(""String_Node_Str"");
  column3.setAlignment(SWT.CENTER);
  tableViewer.setColumnProperties(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  CellEditor[] cellEditor=new CellEditor[3];
  cellEditor[0]=new TextCellEditor(table);
  cellEditor[1]=null;
  cellEditor[2]=new TextCellEditor(table);
  tableViewer.setCellEditors(cellEditor);
  tableViewer.setCellModifier(new SliceCellModifier());
  GridData gd=new GridData();
  gd.horizontalAlignment=SWT.CENTER;
  Composite operationBTNComp=new Composite(rangeComp,SWT.NONE);
  operationBTNComp.setLayout(new FillLayout());
  operationBTNComp.setLayoutData(gd);
  addSlice=new Button(operationBTNComp,SWT.NONE);
  addSlice.setImage(ImageLib.getImage(ImageLib.ADD_ACTION));
  addSlice.setEnabled(false);
  delSlice=new Button(operationBTNComp,SWT.NONE);
  delSlice.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delSlice.setEnabled(false);
}",0.975763182238668
140471,"@Override protected void addFieldsListeners(){
  minValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=minValue.getText();
      if (min == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isRealNumberValue(min)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
        parameter.setMinValue(Double.valueOf(min));
      }
    }
  }
);
  maxValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String max=maxValue.getText();
      if (max == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isRealNumberValue(max)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
        parameter.setMaxValue(Double.valueOf(max));
      }
    }
  }
);
  numbOfBins.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String numb=numbOfBins.getText();
      if (numb == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isNumberValue(numb)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
        parameter.setNumOfBins(Integer.parseInt(numb));
      }
    }
  }
);
  isSetRange.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean flag=((Button)e.getSource()).getSelection();
      double numb=Double.parseDouble(numbOfBins.getText());
      double min=Double.parseDouble(minValue.getText());
      double max=Double.parseDouble(maxValue.getText());
      if (flag && numb > 0) {
        addSlice.setEnabled(true);
        delSlice.setEnabled(true);
        tableViewer.setInput(ViewerDataFactory.createSliceFormData(min,max,numb));
        parameter.setBinsData(tableViewer.getInput());
      }
 else {
        tableViewer.setInput(""String_Node_Str"");
      }
    }
  }
);
  addSlice.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      if (tableViewer.getInput() instanceof List) {
        List<SliceEntity> inputList=(List<SliceEntity>)tableViewer.getInput();
        SliceEntity newEntity=new SliceEntity();
        inputList.add(newEntity);
        tableViewer.setInput(inputList);
      }
    }
  }
);
  delSlice.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      boolean flag=!tableViewer.getSelection().isEmpty();
      if (flag) {
        IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
        SliceEntity entity=(SliceEntity)selection.getFirstElement();
        if (tableViewer.getInput() instanceof List) {
          List<SliceEntity> inputList=(List<SliceEntity>)tableViewer.getInput();
          inputList.remove(entity);
          tableViewer.setInput(inputList);
        }
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  minValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String min=minValue.getText();
      if (min == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isNumberValue(min)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
        parameter.setMinValue(Double.valueOf(min));
      }
    }
  }
);
  maxValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String max=maxValue.getText();
      if (max == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isNumberValue(max)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
        parameter.setMaxValue(Double.valueOf(max));
      }
    }
  }
);
  numbOfBins.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String numb=numbOfBins.getText();
      if (numb == ""String_Node_Str"") {
        updateStatus(IStatus.ERROR,MSG_EMPTY);
      }
 else       if (!CheckValueUtils.isNumberValue(numb)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
        parameter.setNumOfBins(Integer.parseInt(numb));
      }
    }
  }
);
  isSetRange.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean flag=((Button)e.getSource()).getSelection();
      double numb=Double.parseDouble(numbOfBins.getText());
      double min=Double.parseDouble(minValue.getText());
      double max=Double.parseDouble(maxValue.getText());
      if (flag && numb > 0) {
        addSlice.setEnabled(true);
        delSlice.setEnabled(true);
        minValue.setEnabled(false);
        maxValue.setEnabled(false);
        numbOfBins.setEnabled(false);
        tableViewer.setInput(ViewerDataFactory.createSliceFormData(min,max,numb));
        parameter.setBinsData(tableViewer.getInput());
      }
 else {
        addSlice.setEnabled(false);
        delSlice.setEnabled(false);
        minValue.setEnabled(true);
        maxValue.setEnabled(true);
        numbOfBins.setEnabled(true);
        tableViewer.setInput(""String_Node_Str"");
      }
    }
  }
);
  addSlice.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      if (tableViewer.getInput() instanceof List) {
        List<SliceEntity> inputList=(List<SliceEntity>)tableViewer.getInput();
        SliceEntity newEntity=new SliceEntity();
        inputList.add(newEntity);
        tableViewer.setInput(inputList);
      }
    }
  }
);
  delSlice.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      boolean flag=!tableViewer.getSelection().isEmpty();
      if (flag) {
        IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
        SliceEntity entity=(SliceEntity)selection.getFirstElement();
        if (tableViewer.getInput() instanceof List) {
          List<SliceEntity> inputList=(List<SliceEntity>)tableViewer.getInput();
          inputList.remove(entity);
          tableViewer.setInput(inputList);
        }
      }
    }
  }
);
}",0.953585242487355
140472,"public void modifyText(ModifyEvent e){
  String numb=numbOfBins.getText();
  if (numb == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
  }
 else   if (!CheckValueUtils.isNumberValue(numb)) {
    updateStatus(IStatus.ERROR,MSG_ONLY_REAL_NUMBER);
  }
 else {
    updateStatus(IStatus.OK,MSG_OK);
    parameter.setNumOfBins(Integer.parseInt(numb));
  }
}","public void modifyText(ModifyEvent e){
  String numb=numbOfBins.getText();
  if (numb == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
  }
 else   if (!CheckValueUtils.isNumberValue(numb)) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
  }
 else {
    updateStatus(IStatus.OK,MSG_OK);
    parameter.setNumOfBins(Integer.parseInt(numb));
  }
}",0.9931787175989086
140473,"@Override protected void initialize(){
  minValue.setText(String.valueOf(parameter.getMinValue()));
  maxValue.setText(String.valueOf(parameter.getMaxValue()));
  numbOfBins.setText(String.valueOf(parameter.getNumOfBins()));
}","@Override protected void initialize(){
  minValue.setText(String.valueOf(parameter.getMinValue()));
  maxValue.setText(String.valueOf(parameter.getMaxValue()));
  numbOfBins.setText(String.valueOf(parameter.getNumOfBins()));
  if (parameter.getBinsDataFromExsitingDomain().size() > 0) {
    addSlice.setEnabled(true);
    delSlice.setEnabled(true);
    minValue.setEnabled(false);
    maxValue.setEnabled(false);
    numbOfBins.setEnabled(false);
    isSetRange.setSelection(true);
    tableViewer.setInput(parameter.getBinsDataFromExsitingDomain());
  }
}",0.578005115089514
140474,"private void initWizard(){
  if (!AbstractIndicatorForm.isParametersEmpty()) {
    AbstractIndicatorForm.emptyParameterList();
  }
  IndicatorParameters indicatorParam=indicatorUnit.getIndicator().getParameters();
  if (indicatorParam != null) {
    TextParameters textParameters=indicatorParam.getTextParameter();
    if (textParameters != null) {
      TextParameter textParam=new TextParameter();
      textParam.setIngoreCase(textParameters.isIgnoreCase());
      textParam.setNumOfShown(indicatorParam.getTopN());
      TextLengthParameter textLengthParam=new TextLengthParameter();
      textLengthParam.setUseBlank(textParameters.isUseBlank());
      textLengthParam.setUseNull(textParameters.isUseNulls());
      paramMap.put(FormEnum.TextParametersForm,textParam);
      paramMap.put(FormEnum.TextLengthForm,textLengthParam);
    }
    if (IndicatorHelper.getDataThreshold(indicator) != null) {
      DataThresholdsParameter dataParam=new DataThresholdsParameter();
      dataParam.setMinThreshold(IndicatorHelper.getDataThreshold(indicator)[0]);
      dataParam.setMaxThreshold(IndicatorHelper.getDataThreshold(indicator)[1]);
      paramMap.put(FormEnum.DataThresholdsForm,dataParam);
    }
    if (IndicatorHelper.getIndicatorThreshold(indicator) != null) {
      IndicatorThresholdsParameter indicatorThresholdsParam=new IndicatorThresholdsParameter();
      indicatorThresholdsParam.setMinThreshold(IndicatorHelper.getIndicatorThreshold(indicator)[0]);
      indicatorThresholdsParam.setMaxThreshold(IndicatorHelper.getIndicatorThreshold(indicator)[1]);
      paramMap.put(FormEnum.IndicatorThresholdsForm,indicatorThresholdsParam);
    }
    if (indicatorParam.getBins() != null) {
      BinsDesignerParameter binsParam=new BinsDesignerParameter();
      binsParam.setMaxValue(DomainHelper.getMaxBinValue(indicatorParam.getBins()));
      binsParam.setMinValue(DomainHelper.getMinBinValue(indicatorParam.getBins()));
      binsParam.setNumOfBins(DomainHelper.getNumberOfBins(indicatorParam.getBins()));
      binsParam.setNumOfShown(indicatorParam.getTopN());
      paramMap.put(FormEnum.BinsDesignerForm,binsParam);
    }
    if (indicatorParam.getDateParameters() != null) {
      TimeSlicesParameter timeParam=new TimeSlicesParameter();
      timeParam.setDataUnit(indicatorParam.getDateParameters().getDateAggregationType().getLiteral());
      timeParam.setNumOfShown(indicatorParam.getTopN());
      paramMap.put(FormEnum.TimeSlicesForm,timeParam);
    }
  }
}","private void initWizard(){
  if (!AbstractIndicatorForm.isParametersEmpty()) {
    AbstractIndicatorForm.emptyParameterList();
  }
  IndicatorParameters indicatorParam=indicatorUnit.getIndicator().getParameters();
  if (indicatorParam != null) {
    TextParameters textParameters=indicatorParam.getTextParameter();
    if (textParameters != null) {
      TextParameter textParam=new TextParameter();
      textParam.setIngoreCase(textParameters.isIgnoreCase());
      textParam.setNumOfShown(indicatorParam.getTopN());
      TextLengthParameter textLengthParam=new TextLengthParameter();
      textLengthParam.setUseBlank(textParameters.isUseBlank());
      textLengthParam.setUseNull(textParameters.isUseNulls());
      paramMap.put(FormEnum.TextParametersForm,textParam);
      paramMap.put(FormEnum.TextLengthForm,textLengthParam);
    }
    if (IndicatorHelper.getDataThreshold(indicator) != null) {
      DataThresholdsParameter dataParam=new DataThresholdsParameter();
      dataParam.setMinThreshold(IndicatorHelper.getDataThreshold(indicator)[0]);
      dataParam.setMaxThreshold(IndicatorHelper.getDataThreshold(indicator)[1]);
      paramMap.put(FormEnum.DataThresholdsForm,dataParam);
    }
    if (IndicatorHelper.getIndicatorThreshold(indicator) != null) {
      IndicatorThresholdsParameter indicatorThresholdsParam=new IndicatorThresholdsParameter();
      indicatorThresholdsParam.setMinThreshold(IndicatorHelper.getIndicatorThreshold(indicator)[0]);
      indicatorThresholdsParam.setMaxThreshold(IndicatorHelper.getIndicatorThreshold(indicator)[1]);
      paramMap.put(FormEnum.IndicatorThresholdsForm,indicatorThresholdsParam);
    }
    Domain domain=indicatorParam.getBins();
    if (domain != null) {
      BinsDesignerParameter binsParam=new BinsDesignerParameter();
      binsParam.setDomain(domain);
      binsParam.setMaxValue(DomainHelper.getMaxBinValue(domain));
      binsParam.setMinValue(DomainHelper.getMinBinValue(domain));
      binsParam.setNumOfBins(DomainHelper.getNumberOfBins(domain));
      binsParam.setNumOfShown(indicatorParam.getTopN());
      paramMap.put(FormEnum.BinsDesignerForm,binsParam);
    }
    if (indicatorParam.getDateParameters() != null) {
      TimeSlicesParameter timeParam=new TimeSlicesParameter();
      timeParam.setDataUnit(indicatorParam.getDateParameters().getDateAggregationType().getLiteral());
      timeParam.setNumOfShown(indicatorParam.getTopN());
      paramMap.put(FormEnum.TimeSlicesForm,timeParam);
    }
  }
}",0.939424431475146
140475,"@SuppressWarnings(""String_Node_Str"") public Domain getUserDomian(){
  if (getBinsData() != null) {
    List<SliceEntity> tableData=(List<SliceEntity>)getBinsData();
    Domain domain=DomainHelper.createDomain(""String_Node_Str"");
    for (    SliceEntity entity : tableData) {
      double min=Double.parseDouble(entity.getLowValue());
      double max=Double.parseDouble(entity.getHighValue());
      RangeRestriction rangeRestriction=DomainHelper.createRealRangeRestriction(min,max);
      domain.getRanges().add(rangeRestriction);
    }
    return domain;
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public Domain getUserDomian(){
  if (getBinsData() != null) {
    List<SliceEntity> tableData=(List<SliceEntity>)getBinsData();
    Domain userDomain=DomainHelper.createDomain(""String_Node_Str"");
    for (    SliceEntity entity : tableData) {
      double min=Double.parseDouble(entity.getLowValue());
      double max=Double.parseDouble(entity.getHighValue());
      RangeRestriction rangeRestriction=DomainHelper.createRealRangeRestriction(min,max);
      userDomain.getRanges().add(rangeRestriction);
    }
    return userDomain;
  }
  return null;
}",0.9845890410958904
140476,"private static Domain setDataFilterPattern(final Collection<Domain> dataFilters,String type,String tablePattern){
  RegularExpression tableFilter=BooleanExpressionHelper.createRegularExpression(null,tablePattern);
  for (  Domain domain : dataFilters) {
    if (!ANALYSIS_DATA_FILTER.equals(domain.getName())) {
      continue;
    }
    boolean exists=false;
    EList<Pattern> patterns=domain.getPatterns();
    for (    Pattern pattern : patterns) {
      if (type.equals(pattern.getName())) {
        exists=true;
        pattern.getComponents().clear();
        pattern.getComponents().add(tableFilter);
      }
    }
    if (!exists) {
      addPatternToDomain(domain,tableFilter,tablePattern);
    }
    return domain;
  }
  Domain domain=DomainFactory.eINSTANCE.createDomain();
  dataFilters.add(domain);
  domain.setName(ANALYSIS_DATA_FILTER);
  addPatternToDomain(domain,tableFilter,tablePattern);
  return domain;
}","private static Domain setDataFilterPattern(final Collection<Domain> dataFilters,String type,String tablePattern){
  RegularExpression tableFilter=BooleanExpressionHelper.createRegularExpression(null,tablePattern);
  for (  Domain domain : dataFilters) {
    if (!ANALYSIS_DATA_FILTER.equals(domain.getName())) {
      continue;
    }
    boolean exists=false;
    EList<Pattern> patterns=domain.getPatterns();
    for (    Pattern pattern : patterns) {
      if (type.equals(pattern.getName())) {
        exists=true;
        pattern.getComponents().clear();
        pattern.getComponents().add(tableFilter);
      }
    }
    if (!exists) {
      addPatternToDomain(domain,tableFilter,tablePattern,type);
    }
    return domain;
  }
  Domain domain=DomainFactory.eINSTANCE.createDomain();
  dataFilters.add(domain);
  domain.setName(ANALYSIS_DATA_FILTER);
  addPatternToDomain(domain,tableFilter,tablePattern,type);
  return domain;
}",0.9946294307196564
140477,"/** 
 * DOC scorreia Comment method ""addPatternToDomain"".
 * @param domain
 * @param tableFilter
 * @param tablePattern
 */
private static void addPatternToDomain(Domain domain,RegularExpression tableFilter,String tablePattern){
  Pattern pattern=createPattern(tablePattern);
  pattern.setName(TABLE_PATTERN);
  pattern.getComponents().add(tableFilter);
  domain.getPatterns().add(pattern);
}","/** 
 * DOC scorreia Comment method ""addPatternToDomain"".
 * @param domain
 * @param tableFilter
 * @param tablePattern
 */
private static void addPatternToDomain(Domain domain,RegularExpression tableFilter,String tablePattern,String type){
  Pattern pattern=createPattern(tablePattern);
  pattern.setName(type);
  pattern.getComponents().add(tableFilter);
  domain.getPatterns().add(pattern);
}",0.963151207115629
140478,"@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  TaggedValueHelper.setAuthor(pattern,AbstractWizardPage.getConnectionParams().getAuthor());
  TaggedValueHelper.setDescription(AbstractWizardPage.getConnectionParams().getDescription(),pattern);
  TaggedValueHelper.setPurpose(AbstractWizardPage.getConnectionParams().getPurpose(),pattern);
  TaggedValueHelper.setDevStatus(pattern,DevelopmentStatus.get(AbstractWizardPage.getConnectionParams().getStatus()));
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  String cl=mPage2.getComboLang();
  expression.setLanguage(cl);
  regularExpr.setExpression(expression);
  regularExpr.setExpressionType(type.getName());
  pattern.getComponents().add(regularExpr);
  EMFUtil util=EMFSharedResources.getSharedEmfUtil();
  String fname=DqRepositoryViewService.createFilename(name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  IFolder folderResource=AbstractWizardPage.getConnectionParams().getFolderProvider().getFolderResource();
  IFile file=folderResource.getFile(fname);
  location=file.getFullPath();
  if (file.exists()) {
    log.error(""String_Node_Str"" + name + ""String_Node_Str""+ file.getFullPath()+ ""String_Node_Str"");
    return false;
  }
  util.addPoolToResourceSet(file.getFullPath().toString(),pattern);
  util.saveLastResource();
  return true;
}","@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  TaggedValueHelper.setAuthor(pattern,AbstractWizardPage.getConnectionParams().getAuthor());
  TaggedValueHelper.setDescription(AbstractWizardPage.getConnectionParams().getDescription(),pattern);
  TaggedValueHelper.setPurpose(AbstractWizardPage.getConnectionParams().getPurpose(),pattern);
  TaggedValueHelper.setDevStatus(pattern,DevelopmentStatus.get(AbstractWizardPage.getConnectionParams().getStatus()));
  TaggedValueHelper.setValidStatus(true,pattern);
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  String cl=mPage2.getComboLang();
  expression.setLanguage(cl);
  regularExpr.setExpression(expression);
  regularExpr.setExpressionType(type.getName());
  pattern.getComponents().add(regularExpr);
  EMFUtil util=EMFSharedResources.getSharedEmfUtil();
  String fname=DqRepositoryViewService.createFilename(name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  IFolder folderResource=AbstractWizardPage.getConnectionParams().getFolderProvider().getFolderResource();
  IFile file=folderResource.getFile(fname);
  location=file.getFullPath();
  if (file.exists()) {
    log.error(""String_Node_Str"" + name + ""String_Node_Str""+ file.getFullPath()+ ""String_Node_Str"");
    return false;
  }
  util.addPoolToResourceSet(file.getFullPath().toString(),pattern);
  util.saveLastResource();
  return true;
}",0.984875983061101
140479,"/** 
 * This adds   {@link org.eclipse.emf.edit.command.CommandParameter}s describing the children that can be created under this object. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors,Object object){
  super.collectNewChildDescriptors(newChildDescriptors,object);
}","/** 
 * This adds   {@link org.eclipse.emf.edit.command.CommandParameter}s describing the children that can be created under this object. <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors,Object object){
  super.collectNewChildDescriptors(newChildDescriptors,object);
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,DomainFactory.eINSTANCE.createDomain()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,AnalysisFactory.eINSTANCE.createAnalysis()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,AnalysisFactory.eINSTANCE.createAnalysisContext()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,AnalysisFactory.eINSTANCE.createAnalysisParameters()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,AnalysisFactory.eINSTANCE.createAnalysisResult()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,ReportsFactory.eINSTANCE.createTdReport()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,ReportsFactory.eINSTANCE.createPresentationParameter()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createRowCountIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createSumIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createMeanIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createCompositeIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createRangeIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createBoxIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createFrequencyIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createBlankCountIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createMedianIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createValueIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createMinValueIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createMaxValueIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createModeIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createNullCountIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createDistinctCountIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createUniqueCountIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createDuplicateCountIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createIQRIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createTextIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createLengthIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createMinLengthIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createMaxLengthIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createAverageLengthIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createLowerQuartileIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createUpperQuartileIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createCountsIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createSqlPatternMatchingIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorsFactory.eINSTANCE.createRegexpMatchingIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,SchemaFactory.eINSTANCE.createSchemaIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,SchemaFactory.eINSTANCE.createTableIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,SchemaFactory.eINSTANCE.createCatalogIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,SchemaFactory.eINSTANCE.createConnectionIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,DefinitionFactory.eINSTANCE.createIndicatorsDefinitions()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,DefinitionFactory.eINSTANCE.createIndicatorDefinition()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,DefinitionFactory.eINSTANCE.createIndicatorCategory()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,IndicatorSqlFactory.eINSTANCE.createSqlIndicator()));
  newChildDescriptors.add(createChildParameter(CorePackage.Literals.NAMESPACE__OWNED_ELEMENT,PatternFactory.eINSTANCE.createPattern()));
}",0.1007271747912739
140480,"@Override protected void addFieldsListeners(){
  lowerText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String lowerStr=lowerText.getText();
      String higherStr=higherText.getText();
      if (lowerStr != ""String_Node_Str"" && !CheckValueUtils.isNumberWithNegativeValue(lowerStr)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else       if (lowerStr != ""String_Node_Str"" && higherStr != ""String_Node_Str"" && Double.valueOf(lowerStr) > Double.valueOf(higherStr)) {
        updateStatus(IStatus.ERROR,""String_Node_Str"");
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
      parameter.setMinThreshold(lowerStr);
    }
  }
);
  higherText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String lowerStr=lowerText.getText();
      String higherStr=higherText.getText();
      if (higherStr != ""String_Node_Str"" && !CheckValueUtils.isNumberWithNegativeValue(higherStr)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else       if (lowerStr != ""String_Node_Str"" && higherStr != ""String_Node_Str"" && Double.valueOf(lowerStr) > Double.valueOf(higherStr)) {
        updateStatus(IStatus.ERROR,""String_Node_Str"");
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
      parameter.setMaxThreshold(higherText.getText());
    }
  }
);
}","@Override protected void addFieldsListeners(){
  lowerText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String lowerStr=lowerText.getText();
      String higherStr=higherText.getText();
      if (lowerStr != ""String_Node_Str"" && !CheckValueUtils.isNumberWithNegativeValue(lowerStr)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else       if (!lowerStr.equals(""String_Node_Str"") && !higherStr.equals(""String_Node_Str"") && Double.valueOf(lowerStr) > Double.valueOf(higherStr)) {
        updateStatus(IStatus.ERROR,""String_Node_Str"");
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
      parameter.setMinThreshold(lowerStr);
    }
  }
);
  higherText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String lowerStr=lowerText.getText();
      String higherStr=higherText.getText();
      if (higherStr != ""String_Node_Str"" && !CheckValueUtils.isNumberWithNegativeValue(higherStr)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else       if (lowerStr != ""String_Node_Str"" && higherStr != ""String_Node_Str"" && Double.valueOf(lowerStr) > Double.valueOf(higherStr)) {
        updateStatus(IStatus.ERROR,""String_Node_Str"");
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
      parameter.setMaxThreshold(higherText.getText());
    }
  }
);
}",0.9597989949748744
140481,"@Override protected void addFieldsListeners(){
  lowerText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String lowerStr=lowerText.getText();
      String higherStr=higherText.getText();
      if (lowerStr != ""String_Node_Str"" && !CheckValueUtils.isNumberWithNegativeValue(lowerStr)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else       if (!lowerStr.equals(""String_Node_Str"") && !higherStr.equals(""String_Node_Str"") && Double.valueOf(lowerStr) > Double.valueOf(higherStr)) {
        updateStatus(IStatus.ERROR,""String_Node_Str"");
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
      parameter.setMinThreshold(lowerStr);
    }
  }
);
  higherText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String lowerStr=lowerText.getText();
      String higherStr=higherText.getText();
      if (higherStr != ""String_Node_Str"" && !CheckValueUtils.isNumberWithNegativeValue(higherStr)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else       if (lowerStr != ""String_Node_Str"" && higherStr != ""String_Node_Str"" && Double.valueOf(lowerStr) > Double.valueOf(higherStr)) {
        updateStatus(IStatus.ERROR,""String_Node_Str"");
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
      parameter.setMaxThreshold(higherText.getText());
    }
  }
);
}","@Override protected void addFieldsListeners(){
  lowerText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String lowerStr=lowerText.getText();
      String higherStr=higherText.getText();
      if (!lowerStr.equals(""String_Node_Str"") && !CheckValueUtils.isNumberWithNegativeValue(lowerStr)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else       if (!lowerStr.equals(""String_Node_Str"") && !higherStr.equals(""String_Node_Str"") && Double.valueOf(lowerStr) > Double.valueOf(higherStr)) {
        updateStatus(IStatus.ERROR,""String_Node_Str"");
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
      parameter.setMinThreshold(lowerStr);
    }
  }
);
  higherText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String lowerStr=lowerText.getText();
      String higherStr=higherText.getText();
      if (!higherStr.equals(""String_Node_Str"") && !CheckValueUtils.isNumberWithNegativeValue(higherStr)) {
        updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
      }
 else       if (!lowerStr.equals(""String_Node_Str"") && !higherStr.equals(""String_Node_Str"") && Double.valueOf(lowerStr) > Double.valueOf(higherStr)) {
        updateStatus(IStatus.ERROR,""String_Node_Str"");
      }
 else {
        updateStatus(IStatus.OK,MSG_OK);
      }
      parameter.setMaxThreshold(higherText.getText());
    }
  }
);
}",0.920623671155209
140482,"public void modifyText(ModifyEvent e){
  String lowerStr=lowerText.getText();
  String higherStr=higherText.getText();
  if (higherStr != ""String_Node_Str"" && !CheckValueUtils.isNumberWithNegativeValue(higherStr)) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
  }
 else   if (lowerStr != ""String_Node_Str"" && higherStr != ""String_Node_Str"" && Double.valueOf(lowerStr) > Double.valueOf(higherStr)) {
    updateStatus(IStatus.ERROR,""String_Node_Str"");
  }
 else {
    updateStatus(IStatus.OK,MSG_OK);
  }
  parameter.setMaxThreshold(higherText.getText());
}","public void modifyText(ModifyEvent e){
  String lowerStr=lowerText.getText();
  String higherStr=higherText.getText();
  if (!higherStr.equals(""String_Node_Str"") && !CheckValueUtils.isNumberWithNegativeValue(higherStr)) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
  }
 else   if (!lowerStr.equals(""String_Node_Str"") && !higherStr.equals(""String_Node_Str"") && Double.valueOf(lowerStr) > Double.valueOf(higherStr)) {
    updateStatus(IStatus.ERROR,""String_Node_Str"");
  }
 else {
    updateStatus(IStatus.OK,MSG_OK);
  }
  parameter.setMaxThreshold(higherText.getText());
}",0.8453427065026362
140483,"private static CategoryDataset createSimpleDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  if (isCreate) {
    for (int index=0; index < indicatorUnitList.size(); index++) {
      IndicatorUnit unit=indicatorUnitList.get(index);
      IndicatorCommonUtil.compositeIndicatorMap(unit);
      Object object=unit.getValue();
      String label=unit.getIndicatorName();
      if (object == null) {
        dataset.addValue(0,label,""String_Node_Str"");
      }
 else {
        String valueStr=String.valueOf(object);
        double value=Double.parseDouble(valueStr);
        renderer3d.setSeriesPaint(index,unit.getColor());
        dataset.addValue(value,label,""String_Node_Str"");
      }
    }
  }
 else {
    for (    IndicatorUnit indicator : indicatorUnitList) {
      dataset.addValue(150,indicator.getIndicatorName(),""String_Node_Str"");
    }
  }
  return dataset;
}","private static CategoryDataset createSimpleDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  if (isCreate) {
    for (int index=0; index < indicatorUnitList.size(); index++) {
      IndicatorUnit unit=indicatorUnitList.get(index);
      IndicatorCommonUtil.compositeIndicatorMap(unit);
      Object object=unit.getValue();
      String label=unit.getIndicatorName();
      if (object != null && !unit.getIndicator().getInstantiatedExpressions().isEmpty()) {
        String valueStr=String.valueOf(object);
        double value=Double.parseDouble(valueStr);
        renderer3d.setSeriesPaint(index,unit.getColor());
        dataset.addValue(value,label,""String_Node_Str"");
      }
    }
  }
 else {
    for (    IndicatorUnit indicator : indicatorUnitList) {
      dataset.addValue(150,indicator.getIndicatorName(),""String_Node_Str"");
    }
  }
  return dataset;
}",0.922832980972516
140484,"private static ChartDataEntity[] getDataEnityFromUnits(List<IndicatorUnit> unitList){
  List<ChartDataEntity> list=new ArrayList<ChartDataEntity>();
  for (  IndicatorUnit unit : unitList) {
    if (unit.getType() == IndicatorEnum.FrequencyIndicatorEnum) {
      FrequencyExt[] freqExt=(FrequencyExt[])unit.getValue();
      for (      FrequencyExt one : freqExt) {
        ChartDataEntity entity=new ChartDataEntity();
        entity.setLabel(one.getKey().toString());
        entity.setValue(one.getValue().toString());
        entity.setPercent(one.getFrequency().toString());
        entity.setIndicator(unit.getIndicator());
        list.add(entity);
      }
      ChartDataEntity entity=new ChartDataEntity();
      FrequencyIndicator freqIndicator=(FrequencyIndicator)unit.getIndicator();
      entity.setLabel(FrequencyIndicator.OTHER);
      entity.setValue(freqIndicator.getCount(FrequencyIndicator.OTHER).toString());
      entity.setPercent(freqIndicator.getFrequency(FrequencyIndicator.OTHER).toString());
      entity.setIndicator(freqIndicator);
      list.add(entity);
    }
 else     if (unit.getType() == IndicatorEnum.RegexpMatchingIndicatorEnum || unit.getType() == IndicatorEnum.SqlPatternMatchingIndicatorEnum) {
      PatternMatchingExt patnExt=(PatternMatchingExt)unit.getValue();
      PatternChartDataEntity entity=new PatternChartDataEntity();
      entity.setLabel(unit.getIndicatorName());
      entity.setNumMatch(String.valueOf(patnExt.getMatchingValueCount()));
      entity.setNumNoMatch(String.valueOf(patnExt.getNotMatchingValueCount()));
      entity.setIndicator(unit.getIndicator());
      list.add(entity);
    }
 else {
      ChartDataEntity entity=new ChartDataEntity();
      entity.setLabel(unit.getIndicatorName());
      entity.setValue(unit.getValue().toString());
      entity.setIndicator(unit.getIndicator());
      list.add(entity);
    }
  }
  return list.toArray(new ChartDataEntity[list.size()]);
}","private static ChartDataEntity[] getDataEnityFromUnits(List<IndicatorUnit> unitList){
  List<ChartDataEntity> list=new ArrayList<ChartDataEntity>();
  for (  IndicatorUnit unit : unitList) {
    if (unit.getType() == IndicatorEnum.FrequencyIndicatorEnum) {
      FrequencyExt[] freqExt=(FrequencyExt[])unit.getValue();
      for (      FrequencyExt one : freqExt) {
        ChartDataEntity entity=new ChartDataEntity();
        entity.setLabel(one.getKey().toString());
        entity.setValue(String.valueOf(one.getValue()));
        entity.setPercent(String.valueOf(one.getFrequency()));
        entity.setIndicator(unit.getIndicator());
        list.add(entity);
      }
      ChartDataEntity entity=new ChartDataEntity();
      FrequencyIndicator freqIndicator=(FrequencyIndicator)unit.getIndicator();
      entity.setLabel(FrequencyIndicator.OTHER);
      entity.setValue(freqIndicator.getCount(FrequencyIndicator.OTHER).toString());
      entity.setPercent(freqIndicator.getFrequency(FrequencyIndicator.OTHER).toString());
      entity.setIndicator(freqIndicator);
      list.add(entity);
    }
 else     if (unit.getType() == IndicatorEnum.RegexpMatchingIndicatorEnum || unit.getType() == IndicatorEnum.SqlPatternMatchingIndicatorEnum) {
      PatternMatchingExt patnExt=(PatternMatchingExt)unit.getValue();
      PatternChartDataEntity entity=new PatternChartDataEntity();
      entity.setLabel(unit.getIndicatorName());
      entity.setNumMatch(String.valueOf(patnExt.getMatchingValueCount()));
      entity.setNumNoMatch(String.valueOf(patnExt.getNotMatchingValueCount()));
      entity.setIndicator(unit.getIndicator());
      list.add(entity);
    }
 else {
      if (unit.getValue() != null) {
        ChartDataEntity entity=new ChartDataEntity();
        entity.setLabel(unit.getIndicatorName());
        entity.setValue(unit.getValue().toString());
        entity.setIndicator(unit.getIndicator());
        list.add(entity);
      }
    }
  }
  return list.toArray(new ChartDataEntity[list.size()]);
}",0.9291656163347618
140485,"private static CategoryDataset createFrequenceDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  for (  IndicatorUnit indicatorUnit : indicatorUnitList) {
    Object object=null;
    try {
      IndicatorCommonUtil.compositeIndicatorMap(indicatorUnit);
      object=indicatorUnit.getValue();
    }
 catch (    UnsupportedOperationException ue) {
      object=null;
    }
    if (object != null) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])object;
      Arrays.sort(frequencyExt);
      if (isCreate) {
        int numOfShown=frequencyExt.length;
        IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
        if (parameters != null) {
          if (parameters.getTopN() < frequencyExt.length) {
            numOfShown=parameters.getTopN();
          }
        }
        for (int i=0; i < numOfShown; i++) {
          dataset.addValue(frequencyExt[i].getValue(),""String_Node_Str"",String.valueOf(frequencyExt[i].getKey()));
        }
      }
 else {
        dataset.addValue(70,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(150,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(180,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(185,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(224,""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
  return dataset;
}","private static CategoryDataset createFrequenceDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  for (  IndicatorUnit indicatorUnit : indicatorUnitList) {
    IndicatorCommonUtil.compositeIndicatorMap(indicatorUnit);
    Object object=indicatorUnit.getValue();
    if (object != null) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])object;
      Arrays.sort(frequencyExt);
      if (isCreate) {
        int numOfShown=frequencyExt.length;
        IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
        if (parameters != null) {
          if (parameters.getTopN() < frequencyExt.length) {
            numOfShown=parameters.getTopN();
          }
        }
        for (int i=0; i < numOfShown; i++) {
          dataset.addValue(frequencyExt[i].getValue(),""String_Node_Str"",String.valueOf(frequencyExt[i].getKey()));
        }
      }
 else {
        dataset.addValue(70,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(150,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(180,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(185,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(224,""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
  return dataset;
}",0.9087617668356264
140486,"private static CategoryDataset createSummaryDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();
  if (isCreate) {
    Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
    for (    IndicatorUnit indicatorUnit : indicatorUnitList) {
      Object object=null;
      try {
        IndicatorCommonUtil.compositeIndicatorMap(indicatorUnit);
        object=indicatorUnit.getValue();
      }
 catch (      Exception ue) {
        ue.printStackTrace();
        object=null;
      }
      if (object != null) {
        String strValue=String.valueOf(object);
        double doubleValue=Double.valueOf(strValue);
        map.put(indicatorUnit.getType(),doubleValue);
      }
 else {
        map.put(indicatorUnit.getType(),Double.valueOf(0));
      }
    }
    if (map.size() != 6) {
      DefaultCategoryDataset barDataset=new DefaultCategoryDataset();
      if (map.get(IndicatorEnum.MinValueIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MinValueIndicatorEnum),""String_Node_Str"",IndicatorEnum.MinValueIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.LowerQuartileIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.LowerQuartileIndicatorEnum),""String_Node_Str"",IndicatorEnum.LowerQuartileIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MeanIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MeanIndicatorEnum),""String_Node_Str"",IndicatorEnum.MeanIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MedianIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MedianIndicatorEnum),""String_Node_Str"",IndicatorEnum.MedianIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.UpperQuartileIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.UpperQuartileIndicatorEnum),""String_Node_Str"",IndicatorEnum.UpperQuartileIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MaxValueIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MaxValueIndicatorEnum),""String_Node_Str"",IndicatorEnum.MaxValueIndicatorEnum.getLabel());
      }
      renderer3d.setSeriesPaint(0,Color.RED);
      return barDataset;
    }
    BoxAndWhiskerItem item=createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    BoxAndWhiskerItem item=createBoxAndWhiskerItem(40.0,45.0,30.0,60.0,15.0,75.0,null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
  }
  return dataset;
}","private static CategoryDataset createSummaryDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();
  boolean isValide=true;
  if (isCreate) {
    Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
    for (    IndicatorUnit indicatorUnit : indicatorUnitList) {
      try {
        IndicatorCommonUtil.compositeIndicatorMap(indicatorUnit);
      }
 catch (      RuntimeException re) {
        isValide=false;
      }
      Object object=indicatorUnit.getValue();
      if (object != null && isValide) {
        String strValue=String.valueOf(object);
        double doubleValue=Double.valueOf(strValue);
        map.put(indicatorUnit.getType(),doubleValue);
      }
    }
    if (map.size() != 6) {
      DefaultCategoryDataset barDataset=new DefaultCategoryDataset();
      if (map.get(IndicatorEnum.MinValueIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MinValueIndicatorEnum),""String_Node_Str"",IndicatorEnum.MinValueIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.LowerQuartileIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.LowerQuartileIndicatorEnum),""String_Node_Str"",IndicatorEnum.LowerQuartileIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MeanIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MeanIndicatorEnum),""String_Node_Str"",IndicatorEnum.MeanIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MedianIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MedianIndicatorEnum),""String_Node_Str"",IndicatorEnum.MedianIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.UpperQuartileIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.UpperQuartileIndicatorEnum),""String_Node_Str"",IndicatorEnum.UpperQuartileIndicatorEnum.getLabel());
      }
      if (map.get(IndicatorEnum.MaxValueIndicatorEnum) != null) {
        barDataset.addValue(map.get(IndicatorEnum.MaxValueIndicatorEnum),""String_Node_Str"",IndicatorEnum.MaxValueIndicatorEnum.getLabel());
      }
      renderer3d.setSeriesPaint(0,Color.RED);
      return barDataset;
    }
    BoxAndWhiskerItem item=createBoxAndWhiskerItem(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    BoxAndWhiskerItem item=createBoxAndWhiskerItem(40.0,45.0,30.0,60.0,15.0,75.0,null);
    dataset.add(item,""String_Node_Str"",""String_Node_Str"");
  }
  return dataset;
}",0.502962704775183
140487,"/** 
 * Getter for value.
 * @return the value
 */
public Long getValue(){
  return this.value;
}","/** 
 * Getter for value.
 * @return the value
 */
public long getValue(){
  return this.value;
}",0.9896907216494846
140488,"public Double getFrequency(){
  return frequency;
}","public double getFrequency(){
  return frequency;
}",0.9803921568627452
140489,"/** 
 * Sets the value.
 * @param value the value to set
 */
public void setValue(Long value){
  this.value=value;
}","/** 
 * Sets the value.
 * @param value the value to set
 */
public void setValue(long value){
  this.value=value;
}",0.9913793103448276
140490,"public void setFrequency(Double frequency){
  this.frequency=frequency;
}","public void setFrequency(double frequency){
  this.frequency=frequency;
}",0.9863013698630136
140491,"/** 
 * DOC qzhang Comment method ""isPatternValid"".
 * @param pattern
 * @return
 */
public static boolean isPatternValid(Pattern pattern){
  boolean valid=true;
  EList<PatternComponent> components=pattern.getComponents();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    String body=regularExpress.getExpression().getBody();
    valid=((body != null) && (body.matches(""String_Node_Str"")));
    if (!valid) {
      break;
    }
 else {
      if (body.charAt(0) == '^') {
        body=""String_Node_Str"" + body.substring(1);
      }
 else {
        body=""String_Node_Str"" + body;
      }
      regularExpress.getExpression().setBody(body);
    }
  }
  return valid;
}","/** 
 * DOC qzhang Comment method ""isPatternValid"".
 * @param pattern
 * @return
 */
public static boolean isPatternValid(Pattern pattern){
  boolean valid=true;
  EList<PatternComponent> components=pattern.getComponents();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    String body=regularExpress.getExpression().getBody();
    valid=((body != null) && (body.matches(""String_Node_Str"")));
    if (!valid) {
      break;
    }
 else {
      body=""String_Node_Str"" + body;
      regularExpress.getExpression().setBody(body);
    }
  }
  return valid;
}",0.8204758471521268
140492,"public void doSave(IProgressMonitor monitor){
  this.isDirty=false;
  firePropertyChange(IEditorPart.PROP_DIRTY);
  CorePlugin.getDefault().refreshWorkSpace();
}","public void doSave(IProgressMonitor monitor){
  refreshDQView();
  this.isDirty=false;
  firePropertyChange(IEditorPart.PROP_DIRTY);
  CorePlugin.getDefault().refreshWorkSpace();
}",0.9442815249266864
140493,"public void doSave(IProgressMonitor monitor){
  if (columnMasterPage != null && columnMasterPage.isDirty()) {
    columnMasterPage.doSave(monitor);
  }
  if (connectionMasterPage != null && connectionMasterPage.isDirty()) {
    connectionMasterPage.doSave(monitor);
  }
  IFile efile=((FileEditorInput)getEditorInput()).getFile();
  refreshDQView(efile);
  super.doSave(monitor);
}","public void doSave(IProgressMonitor monitor){
  if (columnMasterPage != null && columnMasterPage.isDirty()) {
    columnMasterPage.doSave(monitor);
  }
  if (connectionMasterPage != null && connectionMasterPage.isDirty()) {
    connectionMasterPage.doSave(monitor);
  }
  super.doSave(monitor);
}",0.8183161004431314
140494,"void createAnalysisColumnsSection(final ScrolledForm form,Composite anasisDataComp){
  Section section=createSection(form,anasisDataComp,""String_Node_Str"",false,null);
  Composite topComp=toolkit.createComposite(section);
  topComp.setLayout(new GridLayout());
  Hyperlink clmnBtn=toolkit.createHyperlink(topComp,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(clmnBtn);
  clmnBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      openColumnsSelectionDialog();
    }
  }
);
  Hyperlink indcBtn=toolkit.createHyperlink(topComp,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(indcBtn);
  indcBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      treeViewer.openIndicatorSelectDialog(null);
    }
  }
);
  Composite tree=toolkit.createComposite(topComp,SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(tree);
  tree.setLayout(new GridLayout());
  ((GridData)tree.getLayoutData()).heightHint=TREE_MAX_LENGTH;
  treeViewer=new AnalysisColumnTreeViewer(tree,this);
  treeViewer.setDirty(false);
  treeViewer.addPropertyChangeListener(this);
  section.setClient(topComp);
}","void createAnalysisColumnsSection(final ScrolledForm form,Composite anasisDataComp){
  Section section=createSection(form,anasisDataComp,""String_Node_Str"",false,null);
  Composite topComp=toolkit.createComposite(section);
  topComp.setLayout(new GridLayout());
  Hyperlink clmnBtn=toolkit.createHyperlink(topComp,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(clmnBtn);
  clmnBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      openColumnsSelectionDialog();
    }
  }
);
  Hyperlink indcBtn=toolkit.createHyperlink(topComp,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(indcBtn);
  indcBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      treeViewer.openIndicatorSelectDialog(null);
    }
  }
);
  Composite tree=toolkit.createComposite(topComp,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(tree);
  tree.setLayout(new GridLayout());
  ((GridData)tree.getLayoutData()).heightHint=TREE_MAX_LENGTH;
  treeViewer=new AnalysisColumnTreeViewer(tree,this);
  treeViewer.setDirty(false);
  treeViewer.addPropertyChangeListener(this);
  section.setClient(topComp);
}",0.9977116704805492
140495,"/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new Tree(parent,SWT.MULTI);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(false);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(80);
  TreeColumn column3=new TreeColumn(newTree,SWT.CENTER);
  column3.setWidth(120);
  TreeColumn column4=new TreeColumn(newTree,SWT.CENTER);
  column4.setWidth(120);
  parent.layout();
  menu=new Menu(newTree);
  MenuItem deleteMenuItem=new MenuItem(menu,SWT.CASCADE);
  deleteMenuItem.setText(""String_Node_Str"");
  deleteMenuItem.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  deleteMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      removeSelectedElements(newTree);
    }
  }
);
  newTree.setMenu(menu);
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
    }
  }
;
  parent.setData(AbstractMetadataFormPage.ACTION_HANDLER,actionHandler);
  ColumnViewerDND.installDND(newTree);
  this.addTreeListener(newTree);
  return newTree;
}","/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new Tree(parent,SWT.MULTI | SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(true);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  column1.setText(""String_Node_Str"");
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(100);
  column2.setText(""String_Node_Str"");
  TreeColumn column3=new TreeColumn(newTree,SWT.CENTER);
  column3.setWidth(100);
  column3.setText(""String_Node_Str"");
  TreeColumn column4=new TreeColumn(newTree,SWT.CENTER);
  column4.setWidth(120);
  column4.setText(""String_Node_Str"");
  parent.layout();
  menu=new Menu(newTree);
  MenuItem deleteMenuItem=new MenuItem(menu,SWT.CASCADE);
  deleteMenuItem.setText(""String_Node_Str"");
  deleteMenuItem.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  deleteMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      removeSelectedElements(newTree);
    }
  }
);
  newTree.setMenu(menu);
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
    }
  }
;
  parent.setData(AbstractMetadataFormPage.ACTION_HANDLER,actionHandler);
  ColumnViewerDND.installDND(newTree);
  this.addTreeListener(newTree);
  return newTree;
}",0.8901368901368901
140496,"@SuppressWarnings(""String_Node_Str"") @Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object target){
  if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
    return Status.CANCEL_STATUS;
  }
  IResource[] resources=null;
  TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
  if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
    resources=getSelectedResources();
  }
 else   if (ResourceTransfer.getInstance().isSupportedType(currentTransfer)) {
    resources=(IResource[])aDropTargetEvent.data;
  }
  if ((target instanceof IFile)) {
    TdReport findReport=RepResourceFileHelper.getInstance().findReport(((IFile)target));
    if (resources != null && resources.length > 0) {
      List<Analysis> anaList=new ArrayList<Analysis>();
      for (      IResource res : resources) {
        Analysis findAnalysis=AnaResourceFileHelper.getInstance().findAnalysis((IFile)res);
        if (findAnalysis != null) {
          anaList.add(findAnalysis);
        }
      }
      ReportHelper.addAnalyses(anaList,findReport);
      RepResourceFileHelper.getInstance().save(findReport);
    }
  }
 else   if ((target instanceof IFolder)) {
    IFolder folder=(IFolder)target;
    for (    IResource res : resources) {
      if (res.getType() != IResource.FILE) {
        return null;
      }
      String name=res.getName();
      IFile fileRes=(IFile)res;
      IFile movedIFile=folder.getFile(name);
      if (!DQStructureManager.getInstance().getModelElementSuffixs().contains(fileRes.getFileExtension())) {
        try {
          fileRes.move(movedIFile.getFullPath(),false,null);
          fileRes.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
          folder.refreshLocal(IResource.DEPTH_INFINITE,null);
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
        return Status.OK_STATUS;
      }
      List<ModelElement> oldDependencySuppliers=EObjectHelper.getDependencySuppliers(fileRes);
      List<ModelElement> oldDependencyClients=EObjectHelper.getDependencyClients(fileRes);
      EObjectHelper.removeDependencys(new IResource[]{fileRes});
      IContainer srcParent=fileRes.getParent();
      URI srcUri=URI.createPlatformResourceURI((fileRes).getFullPath().toString(),false);
      ResourceSet rs=EMFSharedResources.getSharedEmfUtil().getResourceSet();
      Resource resource=rs.getResource(srcUri,true);
      if (resource != null) {
        URI desUri=URI.createPlatformResourceURI(folder.getFullPath().toString(),false);
        EMFUtil.changeUri(resource,desUri);
        EMFSharedResources.getSharedEmfUtil().saveSingleResource(resource);
      }
      try {
        fileRes.delete(true,null);
        srcParent.refreshLocal(IResource.DEPTH_INFINITE,null);
        folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      }
 catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
      movedIFile=folder.getFile(name);
      EObjectHelper.addDependenciesForFile(movedIFile,oldDependencySuppliers);
      EObjectHelper.addDependenciesForFile(movedIFile,oldDependencyClients);
      for (      ModelElement element : oldDependencySuppliers) {
        EMFSharedResources.getSharedEmfUtil().saveSingleResource(element.eResource());
      }
      for (      ModelElement element : oldDependencyClients) {
        EMFSharedResources.getSharedEmfUtil().saveSingleResource(element.eResource());
      }
    }
  }
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object target){
  if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
    return Status.CANCEL_STATUS;
  }
  IResource[] resources=null;
  TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
  if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
    resources=getSelectedResources();
  }
 else   if (ResourceTransfer.getInstance().isSupportedType(currentTransfer)) {
    resources=(IResource[])aDropTargetEvent.data;
  }
  if ((target instanceof IFile)) {
    TdReport findReport=RepResourceFileHelper.getInstance().findReport(((IFile)target));
    if (resources != null && resources.length > 0) {
      List<Analysis> anaList=new ArrayList<Analysis>();
      for (      IResource res : resources) {
        Analysis findAnalysis=AnaResourceFileHelper.getInstance().findAnalysis((IFile)res);
        if (findAnalysis != null) {
          anaList.add(findAnalysis);
        }
      }
      ReportHelper.addAnalyses(anaList,findReport);
      RepResourceFileHelper.getInstance().save(findReport);
    }
  }
 else   if ((target instanceof IFolder)) {
    IFolder folder=(IFolder)target;
    for (    IResource res : resources) {
      if (res.getType() != IResource.FILE) {
        return null;
      }
      String name=res.getName();
      IFile fileRes=(IFile)res;
      IFile movedIFile=folder.getFile(name);
      if (!DQStructureManager.getInstance().getModelElementSuffixs().contains(fileRes.getFileExtension())) {
        try {
          fileRes.move(movedIFile.getFullPath(),false,null);
          fileRes.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
          folder.refreshLocal(IResource.DEPTH_INFINITE,null);
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
        return Status.OK_STATUS;
      }
      List<ModelElement> oldDependencySuppliers=EObjectHelper.getDependencySuppliers(fileRes);
      List<ModelElement> oldDependencyClients=EObjectHelper.getDependencyClients(fileRes);
      EObjectHelper.removeDependencys(new IResource[]{fileRes});
      IContainer srcParent=fileRes.getParent();
      URI srcUri=URI.createPlatformResourceURI((fileRes).getFullPath().toString(),false);
      ResourceSet rs=EMFSharedResources.getSharedEmfUtil().getResourceSet();
      Resource resource=rs.getResource(srcUri,true);
      if (resource != null) {
        URI desUri=URI.createPlatformResourceURI(folder.getFullPath().toString(),false);
        EMFUtil.changeUri(resource,desUri);
        EMFSharedResources.getSharedEmfUtil().saveSingleResource(resource);
      }
      try {
        fileRes.delete(true,null);
        srcParent.refreshLocal(IResource.DEPTH_INFINITE,null);
        folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      }
 catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
      movedIFile=folder.getFile(name);
      EObjectHelper.addDependenciesForFile(movedIFile,oldDependencySuppliers);
      EObjectHelper.addDependenciesForModelElement(movedIFile,oldDependencyClients);
      for (      ModelElement element : oldDependencySuppliers) {
        EMFSharedResources.getSharedEmfUtil().saveSingleResource(element.eResource());
      }
      for (      ModelElement element : oldDependencyClients) {
        EMFSharedResources.getSharedEmfUtil().saveSingleResource(element.eResource());
      }
    }
  }
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return null;
}",0.9978028014281792
140497,"public String getExecuteDuration(){
  return analysis.getResults().getResultMetadata().getExecutionDuration() / 100 + ""String_Node_Str"";
}","public String getExecuteDuration(){
  return resultMetadata.getExecutionDuration() / 100 + ""String_Node_Str"";
}",0.8835341365461847
140498,"public String getSchemaNames(){
  String str=""String_Node_Str"";
  for (  ColumnSet columnSet : getColumnSets()) {
    Package schema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
    if (schema != null) {
      str=str + schema.getName() + ""String_Node_Str"";
    }
  }
  return str;
}","public String getSchemaNames(){
  String str=""String_Node_Str"";
  for (  ColumnSet columnSet : getColumnSets()) {
    try {
      Package schema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
      if (schema != null) {
        str=str + schema.getName() + ""String_Node_Str"";
      }
    }
 catch (    NullPointerException ne) {
      return null;
    }
  }
  return str;
}",0.8059701492537313
140499,"/** 
 * Method ""setAnalysis"".
 * @param columnAnalysis the analysis to set
 */
public void setAnalysis(Analysis columnAnalysis){
  this.analysis=columnAnalysis;
}","/** 
 * Method ""setAnalysis"".
 * @param columnAnalysis the analysis to set
 */
public void setAnalysis(Analysis columnAnalysis){
  this.analysis=columnAnalysis;
  this.resultMetadata=columnAnalysis.getResults().getResultMetadata();
}",0.8202531645569621
140500,"public String getExecuteStatus(){
  if (analysis.getResults().getResultMetadata().isLastRunOk()) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","public String getExecuteStatus(){
  if (resultMetadata.isLastRunOk()) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"" + resultMetadata.getMessage();
  }
}",0.8338028169014085
140501,"public String getExecuteData(){
  if (analysis.getResults().getResultMetadata().getExecutionDate() != null) {
    DateFormat format=DateFormat.getDateInstance(DateFormat.DEFAULT);
    return format.format(analysis.getResults().getResultMetadata().getExecutionDate());
  }
 else {
    return ""String_Node_Str"";
  }
}","public String getExecuteData(){
  if (resultMetadata.getExecutionDate() != null) {
    DateFormat format=DateFormat.getDateInstance(DateFormat.DEFAULT);
    return format.format(resultMetadata.getExecutionDate());
  }
 else {
    return ""String_Node_Str"";
  }
}",0.8993055555555556
140502,"public String getExecuteNumber(){
  return String.valueOf(analysis.getResults().getResultMetadata().getExecutionNumber());
}","public String getExecuteNumber(){
  return String.valueOf(resultMetadata.getExecutionNumber());
}",0.8687782805429864
140503,"public String getCatalogNames(){
  String str=""String_Node_Str"";
  for (  ColumnSet columnSet : getColumnSets()) {
    Package schema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
    if (schema != null) {
      try {
        Package catalog=ColumnSetHelper.getParentCatalogOrSchema(schema);
        if (catalog != null) {
          str=str + catalog.getName() + ""String_Node_Str"";
        }
      }
 catch (      NullPointerException ne) {
        return ""String_Node_Str"";
      }
    }
  }
  return str;
}","public String getCatalogNames(){
  String str=""String_Node_Str"";
  for (  ColumnSet columnSet : getColumnSets()) {
    Package schema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
    if (schema != null) {
      try {
        Package catalog=ColumnSetHelper.getParentCatalogOrSchema(schema);
        if (catalog != null) {
          str=str + catalog.getName() + ""String_Node_Str"";
        }
      }
 catch (      NullPointerException ne) {
        return null;
      }
    }
  }
  return str;
}",0.9793510324483776
140504,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      IndicatorUnit indicatorUnit=(IndicatorUnit)((Label)e.getSource()).getData();
      IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicatorUnit);
      String href=FormEnum.getFirstFormHelpHref(indicatorUnit);
      OpeningHelpWizardDialog optionDialog=new OpeningHelpWizardDialog(null,wizard,href);
      optionDialog.create();
      if (Window.OK == optionDialog.open()) {
        setDirty(wizard.isDirty());
        createIndicatorParameters(indicatorItem,indicatorUnit);
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      IndicatorUnit indicatorUnit=(IndicatorUnit)((Label)e.getSource()).getData();
      IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicatorUnit);
      if (FormEnum.isExsitingForm(indicatorUnit)) {
        String href=FormEnum.getFirstFormHelpHref(indicatorUnit);
        OpeningHelpWizardDialog optionDialog=new OpeningHelpWizardDialog(null,wizard,href);
        optionDialog.create();
        if (Window.OK == optionDialog.open()) {
          setDirty(wizard.isDirty());
          createIndicatorParameters(indicatorItem,indicatorUnit);
        }
      }
 else {
        MessageDialogWithToggle.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
}",0.9656632884586296
140505,"@Override protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  if (isRefreshResultPage && columnResultPage != null && newPageIndex == columnResultPage.getIndex()) {
    ((ColumnAnalysisResultPage)columnResultPage).refresh((ColumnMasterDetailsPage)getMasterPage());
  }
  isRefreshResultPage=false;
}","@Override protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  if (isRefreshResultPage && columnResultPage != null && newPageIndex == columnResultPage.getIndex()) {
    ((ColumnAnalysisResultPage)columnResultPage).refresh((ColumnMasterDetailsPage)getMasterPage());
    isRefreshResultPage=false;
  }
}",0.9085365853658536
140506,"private void createResultDataComposite(final Composite comp,final ColumnIndicator columnIndicator){
  if (columnIndicator.getIndicators().length != 0) {
    final TdColumn column=columnIndicator.getTdColumn();
    IRunnableWithProgress rwp=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            for (            ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,true)) {
              ExpandableComposite subComp=toolkit.createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
              subComp.setText(chartData.getChartNamedType());
              Composite composite=toolkit.createComposite(subComp);
              composite.setLayout(new GridLayout(2,false));
              composite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
              ChartTableFactory.createTable(composite,chartData);
              ImageHyperlink image=toolkit.createImageHyperlink(composite,SWT.WRAP);
              image.setImage(chartData.getImageDescriptor().createImage());
              subComp.setClient(composite);
              subComp.addExpansionListener(new ExpansionAdapter(){
                @Override public void expansionStateChanged(                ExpansionEvent e){
                  form.reflow(true);
                }
              }
);
            }
          }
        }
);
        monitor.done();
      }
    }
;
    try {
      new ProgressMonitorDialog(null).run(true,false,rwp);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}","private void createResultDataComposite(final Composite comp,final ColumnIndicator columnIndicator){
  if (columnIndicator.getIndicators().length != 0) {
    final TdColumn column=columnIndicator.getTdColumn();
    IRunnableWithProgress rwp=new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            for (            ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,true)) {
              ExpandableComposite subComp=toolkit.createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
              subComp.setText(chartData.getChartNamedType());
              Composite composite=toolkit.createComposite(subComp);
              composite.setLayout(new GridLayout(2,false));
              composite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
              ChartTableFactory.createTable(composite,chartData);
              ImageDescriptor imageDescriptor=chartData.getImageDescriptor();
              if (imageDescriptor != null) {
                ImageHyperlink image=toolkit.createImageHyperlink(composite,SWT.WRAP);
                image.setImage(imageDescriptor.createImage());
              }
              subComp.setClient(composite);
              subComp.addExpansionListener(new ExpansionAdapter(){
                @Override public void expansionStateChanged(                ExpansionEvent e){
                  form.reflow(true);
                }
              }
);
            }
          }
        }
);
        monitor.done();
      }
    }
;
    try {
      new ProgressMonitorDialog(null).run(true,false,rwp);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}",0.9433070866141732
140507,"public void run(){
  for (  ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,true)) {
    ExpandableComposite subComp=toolkit.createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
    subComp.setText(chartData.getChartNamedType());
    Composite composite=toolkit.createComposite(subComp);
    composite.setLayout(new GridLayout(2,false));
    composite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
    ChartTableFactory.createTable(composite,chartData);
    ImageHyperlink image=toolkit.createImageHyperlink(composite,SWT.WRAP);
    image.setImage(chartData.getImageDescriptor().createImage());
    subComp.setClient(composite);
    subComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        form.reflow(true);
      }
    }
);
  }
}","public void run(){
  for (  ChartWithData chartData : IndicatorChartFactory.createChart(columnIndicator,true)) {
    ExpandableComposite subComp=toolkit.createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
    subComp.setText(chartData.getChartNamedType());
    Composite composite=toolkit.createComposite(subComp);
    composite.setLayout(new GridLayout(2,false));
    composite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
    ChartTableFactory.createTable(composite,chartData);
    ImageDescriptor imageDescriptor=chartData.getImageDescriptor();
    if (imageDescriptor != null) {
      ImageHyperlink image=toolkit.createImageHyperlink(composite,SWT.WRAP);
      image.setImage(imageDescriptor.createImage());
    }
    subComp.setClient(composite);
    subComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        form.reflow(true);
      }
    }
);
  }
}",0.8864809081527347
140508,"public Map<String,List<IndicatorUnit>> getIndicatorComposite(){
  List<IndicatorUnit> simpleList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> textList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> frequencyList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> summaryList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> patternList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> sqlPatternList=new ArrayList<IndicatorUnit>();
  for (  IndicatorUnit one : indicatorUnits) {
switch (one.getType()) {
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
case BlankCountIndicatorEnum:
      simpleList.add(one);
    break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
  textList.add(one);
break;
case FrequencyIndicatorEnum:
frequencyList.add(one);
break;
case MeanIndicatorEnum:
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
case MedianIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
summaryList.add(one);
break;
case RegexpMatchingIndicatorEnum:
patternList.add(one);
break;
case SqlPatternMatchingIndicatorEnum:
sqlPatternList.add(one);
break;
default :
}
}
separatedMap.put(SIMPLE_STATISTICS,simpleList);
separatedMap.put(TEXT_STATISTICS,textList);
separatedMap.put(FREQUENCE_STATISTICS,frequencyList);
separatedMap.put(SUMMARY_STATISTICS,summaryList);
separatedMap.put(PATTERN_MATCHING,patternList);
separatedMap.put(SQL_PATTERN_MATCHING,sqlPatternList);
return separatedMap;
}","public Map<String,List<IndicatorUnit>> getIndicatorComposite(){
  List<IndicatorUnit> simpleList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> textList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> frequencyList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> summaryList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> patternList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> sqlPatternList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> modelIndicatorList=new ArrayList<IndicatorUnit>();
  for (  IndicatorUnit one : indicatorUnits) {
switch (one.getType()) {
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
case BlankCountIndicatorEnum:
      simpleList.add(one);
    break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
  textList.add(one);
break;
case FrequencyIndicatorEnum:
frequencyList.add(one);
break;
case MeanIndicatorEnum:
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
case MedianIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
summaryList.add(one);
break;
case RegexpMatchingIndicatorEnum:
patternList.add(one);
break;
case SqlPatternMatchingIndicatorEnum:
sqlPatternList.add(one);
break;
case ModeIndicatorEnum:
modelIndicatorList.add(one);
break;
default :
}
}
separatedMap.put(SIMPLE_STATISTICS,simpleList);
separatedMap.put(TEXT_STATISTICS,textList);
separatedMap.put(FREQUENCE_STATISTICS,frequencyList);
separatedMap.put(SUMMARY_STATISTICS,summaryList);
separatedMap.put(PATTERN_MATCHING,patternList);
separatedMap.put(SQL_PATTERN_MATCHING,sqlPatternList);
separatedMap.put(MODE_INDICATOR,modelIndicatorList);
return separatedMap;
}",0.9450354609929078
140509,"public static List<ChartWithData> createChart(ColumnIndicator column,boolean isCreate){
  CompositeIndicator compositeIndicator=new CompositeIndicator(column);
  Map<String,List<IndicatorUnit>> separatedMap=compositeIndicator.getIndicatorComposite();
  List<IndicatorUnit> simpleUnitList=separatedMap.get(CompositeIndicator.SIMPLE_STATISTICS);
  List<IndicatorUnit> textUnitList=separatedMap.get(CompositeIndicator.TEXT_STATISTICS);
  List<IndicatorUnit> frequencyUnitList=separatedMap.get(CompositeIndicator.FREQUENCE_STATISTICS);
  List<IndicatorUnit> summaryUnitList=separatedMap.get(CompositeIndicator.SUMMARY_STATISTICS);
  List<IndicatorUnit> patternUnitList=separatedMap.get(CompositeIndicator.PATTERN_MATCHING);
  List<IndicatorUnit> sqlPatternUnitList=separatedMap.get(CompositeIndicator.SQL_PATTERN_MATCHING);
  List<ChartWithData> returnFiles=new ArrayList<ChartWithData>();
  if (!simpleUnitList.isEmpty()) {
    CategoryDataset dataset=createSimpleDataset(simpleUnitList,isCreate);
    ImageDescriptor imageDescriptor=create3DBarChart(CompositeIndicator.SIMPLE_STATISTICS,dataset,true);
    ChartWithData chart=new ChartWithData(CompositeIndicator.SIMPLE_STATISTICS,imageDescriptor,getDataEnityFromUnits(simpleUnitList));
    returnFiles.add(chart);
  }
  if (!textUnitList.isEmpty()) {
    CategoryDataset dataset=createTextedDataset(textUnitList,isCreate);
    ImageDescriptor imageDescriptor=create3DBarChart(CompositeIndicator.TEXT_STATISTICS,dataset,true);
    ChartWithData chart=new ChartWithData(CompositeIndicator.TEXT_STATISTICS,imageDescriptor,getDataEnityFromUnits(textUnitList));
    returnFiles.add(chart);
  }
  if (!frequencyUnitList.isEmpty()) {
    CategoryDataset dataset=createFrequenceDataset(frequencyUnitList,isCreate);
    ImageDescriptor imageDescriptor=createBarChart(CompositeIndicator.FREQUENCE_STATISTICS,dataset);
    ChartWithData chart=new ChartWithData(CompositeIndicator.FREQUENCE_STATISTICS,imageDescriptor,getDataEnityFromUnits(frequencyUnitList));
    returnFiles.add(chart);
  }
  if (!summaryUnitList.isEmpty()) {
    CategoryDataset dataset=createSummaryDataset(summaryUnitList,isCreate);
    if (dataset instanceof BoxAndWhiskerCategoryDataset) {
      ImageDescriptor imageDescriptor=createBoxAndWhiskerChart(CompositeIndicator.SUMMARY_STATISTICS,(BoxAndWhiskerCategoryDataset)dataset);
      ChartWithData chart=new ChartWithData(CompositeIndicator.SUMMARY_STATISTICS,imageDescriptor,getDataEnityFromUnits(summaryUnitList));
      returnFiles.add(chart);
    }
 else {
      ImageDescriptor imageDescriptor=create3DBarChart(CompositeIndicator.SUMMARY_STATISTICS,dataset,false);
      ChartWithData chart=new ChartWithData(CompositeIndicator.SUMMARY_STATISTICS,imageDescriptor,getDataEnityFromUnits(summaryUnitList));
      returnFiles.add(chart);
    }
  }
  if (!patternUnitList.isEmpty()) {
    CategoryDataset dataset=createPatternMatchDataset(patternUnitList,isCreate);
    ImageDescriptor imageDescriptor=createStacked3DBarChart(CompositeIndicator.PATTERN_MATCHING,dataset);
    ChartWithData chart=new ChartWithData(CompositeIndicator.PATTERN_MATCHING,imageDescriptor,getDataEnityFromUnits(patternUnitList));
    returnFiles.add(chart);
  }
  if (!sqlPatternUnitList.isEmpty()) {
    CategoryDataset dataset=createPatternMatchDataset(sqlPatternUnitList,isCreate);
    ImageDescriptor imageDescriptor=createStacked3DBarChart(CompositeIndicator.SQL_PATTERN_MATCHING,dataset);
    ChartWithData chart=new ChartWithData(CompositeIndicator.SQL_PATTERN_MATCHING,imageDescriptor,getDataEnityFromUnits(sqlPatternUnitList));
    returnFiles.add(chart);
  }
  return returnFiles;
}","public static List<ChartWithData> createChart(ColumnIndicator column,boolean isCreate){
  CompositeIndicator compositeIndicator=new CompositeIndicator(column);
  Map<String,List<IndicatorUnit>> separatedMap=compositeIndicator.getIndicatorComposite();
  List<IndicatorUnit> simpleUnitList=separatedMap.get(CompositeIndicator.SIMPLE_STATISTICS);
  List<IndicatorUnit> textUnitList=separatedMap.get(CompositeIndicator.TEXT_STATISTICS);
  List<IndicatorUnit> frequencyUnitList=separatedMap.get(CompositeIndicator.FREQUENCE_STATISTICS);
  List<IndicatorUnit> summaryUnitList=separatedMap.get(CompositeIndicator.SUMMARY_STATISTICS);
  List<IndicatorUnit> patternUnitList=separatedMap.get(CompositeIndicator.PATTERN_MATCHING);
  List<IndicatorUnit> sqlPatternUnitList=separatedMap.get(CompositeIndicator.SQL_PATTERN_MATCHING);
  List<IndicatorUnit> modeIndicatorUnitList=separatedMap.get(CompositeIndicator.MODE_INDICATOR);
  List<ChartWithData> returnFiles=new ArrayList<ChartWithData>();
  if (!simpleUnitList.isEmpty()) {
    CategoryDataset dataset=createSimpleDataset(simpleUnitList,isCreate);
    ImageDescriptor imageDescriptor=create3DBarChart(CompositeIndicator.SIMPLE_STATISTICS,dataset,true);
    ChartWithData chart=new ChartWithData(CompositeIndicator.SIMPLE_STATISTICS,imageDescriptor,getDataEnityFromUnits(simpleUnitList));
    returnFiles.add(chart);
  }
  if (!textUnitList.isEmpty()) {
    CategoryDataset dataset=createTextedDataset(textUnitList,isCreate);
    ImageDescriptor imageDescriptor=create3DBarChart(CompositeIndicator.TEXT_STATISTICS,dataset,true);
    ChartWithData chart=new ChartWithData(CompositeIndicator.TEXT_STATISTICS,imageDescriptor,getDataEnityFromUnits(textUnitList));
    returnFiles.add(chart);
  }
  if (!frequencyUnitList.isEmpty()) {
    CategoryDataset dataset=createFrequenceDataset(frequencyUnitList,isCreate);
    ImageDescriptor imageDescriptor=createBarChart(CompositeIndicator.FREQUENCE_STATISTICS,dataset);
    ChartWithData chart=new ChartWithData(CompositeIndicator.FREQUENCE_STATISTICS,imageDescriptor,getDataEnityFromUnits(frequencyUnitList));
    returnFiles.add(chart);
  }
  if (!summaryUnitList.isEmpty()) {
    CategoryDataset dataset=createSummaryDataset(summaryUnitList,isCreate);
    if (dataset instanceof BoxAndWhiskerCategoryDataset) {
      ImageDescriptor imageDescriptor=createBoxAndWhiskerChart(CompositeIndicator.SUMMARY_STATISTICS,(BoxAndWhiskerCategoryDataset)dataset);
      ChartWithData chart=new ChartWithData(CompositeIndicator.SUMMARY_STATISTICS,imageDescriptor,getDataEnityFromUnits(summaryUnitList));
      returnFiles.add(chart);
    }
 else {
      ImageDescriptor imageDescriptor=create3DBarChart(CompositeIndicator.SUMMARY_STATISTICS,dataset,false);
      ChartWithData chart=new ChartWithData(CompositeIndicator.SUMMARY_STATISTICS,imageDescriptor,getDataEnityFromUnits(summaryUnitList));
      returnFiles.add(chart);
    }
  }
  if (!patternUnitList.isEmpty()) {
    CategoryDataset dataset=createPatternMatchDataset(patternUnitList,isCreate);
    ImageDescriptor imageDescriptor=createStacked3DBarChart(CompositeIndicator.PATTERN_MATCHING,dataset);
    ChartWithData chart=new ChartWithData(CompositeIndicator.PATTERN_MATCHING,imageDescriptor,getDataEnityFromUnits(patternUnitList));
    returnFiles.add(chart);
  }
  if (!sqlPatternUnitList.isEmpty()) {
    CategoryDataset dataset=createPatternMatchDataset(sqlPatternUnitList,isCreate);
    ImageDescriptor imageDescriptor=createStacked3DBarChart(CompositeIndicator.SQL_PATTERN_MATCHING,dataset);
    ChartWithData chart=new ChartWithData(CompositeIndicator.SQL_PATTERN_MATCHING,imageDescriptor,getDataEnityFromUnits(sqlPatternUnitList));
    returnFiles.add(chart);
  }
  if (!modeIndicatorUnitList.isEmpty()) {
    for (    IndicatorUnit unit : modeIndicatorUnitList) {
      IndicatorCommonUtil.compositeIndicatorMap(unit);
    }
    ChartWithData chart=new ChartWithData(CompositeIndicator.MODE_INDICATOR,null,getDataEnityFromUnits(modeIndicatorUnitList));
    returnFiles.add(chart);
  }
  return returnFiles;
}",0.942615484710475
140510,"private static ChartDataEntity[] getDataEnityFromUnits(List<IndicatorUnit> unitList){
  List<ChartDataEntity> list=new ArrayList<ChartDataEntity>();
  for (  IndicatorUnit unit : unitList) {
    if (unit.getType() == IndicatorEnum.FrequencyIndicatorEnum) {
      FrequencyExt[] freqExt=(FrequencyExt[])unit.getValue();
      for (      FrequencyExt one : freqExt) {
        ChartDataEntity entity=new ChartDataEntity();
        entity.setLabel(one.getKey().toString());
        entity.setValue(one.getValue().toString());
        entity.setIndicator(unit.getIndicator());
        list.add(entity);
      }
    }
 else     if (unit.getType() == IndicatorEnum.RegexpMatchingIndicatorEnum || unit.getType() == IndicatorEnum.SqlPatternMatchingIndicatorEnum) {
      PatternMatchingExt patnExt=(PatternMatchingExt)unit.getValue();
      PatternChartDataEntity entity=new PatternChartDataEntity();
      entity.setLabel(unit.getIndicatorName());
      entity.setNumMatch(String.valueOf(patnExt.getMatchingValueCount()));
      entity.setNumNoMatch(String.valueOf(patnExt.getNotMatchingValueCount()));
      entity.setIndicator(unit.getIndicator());
      list.add(entity);
    }
 else {
      ChartDataEntity entity=new ChartDataEntity();
      entity.setLabel(unit.getIndicatorName());
      entity.setValue(unit.getValue().toString());
      entity.setIndicator(unit.getIndicator());
      list.add(entity);
    }
  }
  return list.toArray(new ChartDataEntity[list.size()]);
}","private static ChartDataEntity[] getDataEnityFromUnits(List<IndicatorUnit> unitList){
  List<ChartDataEntity> list=new ArrayList<ChartDataEntity>();
  for (  IndicatorUnit unit : unitList) {
    if (unit.getType() == IndicatorEnum.FrequencyIndicatorEnum) {
      FrequencyExt[] freqExt=(FrequencyExt[])unit.getValue();
      for (      FrequencyExt one : freqExt) {
        ChartDataEntity entity=new ChartDataEntity();
        entity.setLabel(one.getKey().toString());
        entity.setValue(one.getValue().toString());
        entity.setPercent(one.getFrequency().toString());
        entity.setIndicator(unit.getIndicator());
        list.add(entity);
      }
      ChartDataEntity entity=new ChartDataEntity();
      FrequencyIndicator freqIndicator=(FrequencyIndicator)unit.getIndicator();
      entity.setLabel(FrequencyIndicator.OTHER);
      entity.setValue(freqIndicator.getCount(FrequencyIndicator.OTHER).toString());
      entity.setPercent(freqIndicator.getFrequency(FrequencyIndicator.OTHER).toString());
      entity.setIndicator(freqIndicator);
      list.add(entity);
    }
 else     if (unit.getType() == IndicatorEnum.RegexpMatchingIndicatorEnum || unit.getType() == IndicatorEnum.SqlPatternMatchingIndicatorEnum) {
      PatternMatchingExt patnExt=(PatternMatchingExt)unit.getValue();
      PatternChartDataEntity entity=new PatternChartDataEntity();
      entity.setLabel(unit.getIndicatorName());
      entity.setNumMatch(String.valueOf(patnExt.getMatchingValueCount()));
      entity.setNumNoMatch(String.valueOf(patnExt.getNotMatchingValueCount()));
      entity.setIndicator(unit.getIndicator());
      list.add(entity);
    }
 else {
      ChartDataEntity entity=new ChartDataEntity();
      entity.setLabel(unit.getIndicatorName());
      entity.setValue(unit.getValue().toString());
      entity.setIndicator(unit.getIndicator());
      list.add(entity);
    }
  }
  return list.toArray(new ChartDataEntity[list.size()]);
}",0.8600642711072158
140511,"public static void compositeIndicatorMap(IndicatorUnit indicatorUnit){
  Color tempColor=null;
  Object tempObject=null;
  IndicatorEnum type=indicatorUnit.getType();
  Indicator indicator=indicatorUnit.getIndicator();
switch (type) {
case RowCountIndicatorEnum:
    tempColor=COLOR_ROW_COUNT;
  tempObject=((RowCountIndicator)indicator).getCount();
break;
case NullCountIndicatorEnum:
tempColor=COLOR_NULL_COUNT;
tempObject=((NullCountIndicator)indicator).getNullCount();
break;
case DistinctCountIndicatorEnum:
tempColor=COLOR_DISTIN_CTCOUNT;
tempObject=((DistinctCountIndicator)indicator).getDistinctValueCount();
break;
case UniqueIndicatorEnum:
tempColor=COLOR_UNIQUE_COUNT;
tempObject=(((UniqueCountIndicator)indicator).getUniqueValueCount());
break;
case DuplicateCountIndicatorEnum:
tempColor=COLOR_DUPLICATE_COUNT;
tempObject=((DuplicateCountIndicator)indicator).getDuplicateValueCount();
break;
case BlankCountIndicatorEnum:
tempColor=COLOR_BLANKCOUNT;
tempObject=((BlankCountIndicator)indicator).getBlankCount();
break;
case MinLengthIndicatorEnum:
tempColor=COLOR_MIN_LENGTH;
tempObject=((MinLengthIndicator)indicator).getLength();
break;
case MaxLengthIndicatorEnum:
tempColor=COLOR_MAX_LENGTH;
tempObject=((MaxLengthIndicator)indicator).getLength();
break;
case AverageLengthIndicatorEnum:
tempColor=COLOR_AVERAGE_LENGTH;
tempObject=((AverageLengthIndicator)indicator).getAverageLength();
break;
case FrequencyIndicatorEnum:
FrequencyIndicator frequency=(FrequencyIndicator)indicator;
Set<Object> valueSet=frequency.getDistinctValues();
if (valueSet == null) {
break;
}
FrequencyExt[] frequencyExt=new FrequencyExt[valueSet.size()];
int i=0;
for (Object o : valueSet) {
frequencyExt[i]=new FrequencyExt();
frequencyExt[i].setKey(o);
frequencyExt[i].setValue(frequency.getCount(o));
i++;
}
tempColor=null;
tempObject=frequencyExt;
break;
case MeanIndicatorEnum:
tempColor=null;
tempObject=((MeanIndicator)indicator).getMean();
break;
case MedianIndicatorEnum:
tempColor=null;
tempObject=((MedianIndicator)indicator).getMedian();
break;
case MinValueIndicatorEnum:
tempColor=null;
tempObject=((MinValueIndicator)indicator).getValue();
break;
case MaxValueIndicatorEnum:
tempColor=null;
tempObject=((MaxValueIndicator)indicator).getValue();
break;
case LowerQuartileIndicatorEnum:
tempColor=null;
tempObject=((LowerQuartileIndicator)indicator).getValue();
break;
case UpperQuartileIndicatorEnum:
tempColor=null;
tempObject=((UpperQuartileIndicator)indicator).getValue();
break;
case RegexpMatchingIndicatorEnum:
case SqlPatternMatchingIndicatorEnum:
tempColor=null;
PatternMatchingExt patternExt=new PatternMatchingExt();
patternExt.setMatchingValueCount(((PatternMatchingIndicator)indicator).getMatchingValueCount());
patternExt.setNotMatchingValueCount(((PatternMatchingIndicator)indicator).getNotMatchingValueCount());
tempObject=patternExt;
default :
}
indicatorUnit.setColor(tempColor);
indicatorUnit.setValue(tempObject);
}","public static void compositeIndicatorMap(IndicatorUnit indicatorUnit){
  Color tempColor=null;
  Object tempObject=null;
  IndicatorEnum type=indicatorUnit.getType();
  Indicator indicator=indicatorUnit.getIndicator();
switch (type) {
case RowCountIndicatorEnum:
    tempColor=COLOR_ROW_COUNT;
  tempObject=((RowCountIndicator)indicator).getCount();
break;
case NullCountIndicatorEnum:
tempColor=COLOR_NULL_COUNT;
tempObject=((NullCountIndicator)indicator).getNullCount();
break;
case DistinctCountIndicatorEnum:
tempColor=COLOR_DISTIN_CTCOUNT;
tempObject=((DistinctCountIndicator)indicator).getDistinctValueCount();
break;
case UniqueIndicatorEnum:
tempColor=COLOR_UNIQUE_COUNT;
tempObject=(((UniqueCountIndicator)indicator).getUniqueValueCount());
break;
case DuplicateCountIndicatorEnum:
tempColor=COLOR_DUPLICATE_COUNT;
tempObject=((DuplicateCountIndicator)indicator).getDuplicateValueCount();
break;
case BlankCountIndicatorEnum:
tempColor=COLOR_BLANKCOUNT;
tempObject=((BlankCountIndicator)indicator).getBlankCount();
break;
case MinLengthIndicatorEnum:
tempColor=COLOR_MIN_LENGTH;
tempObject=((MinLengthIndicator)indicator).getLength();
break;
case MaxLengthIndicatorEnum:
tempColor=COLOR_MAX_LENGTH;
tempObject=((MaxLengthIndicator)indicator).getLength();
break;
case AverageLengthIndicatorEnum:
tempColor=COLOR_AVERAGE_LENGTH;
tempObject=((AverageLengthIndicator)indicator).getAverageLength();
break;
case FrequencyIndicatorEnum:
FrequencyIndicator frequency=(FrequencyIndicator)indicator;
Set<Object> valueSet=frequency.getDistinctValues();
if (valueSet == null) {
break;
}
FrequencyExt[] frequencyExt=new FrequencyExt[valueSet.size()];
int i=0;
for (Object o : valueSet) {
frequencyExt[i]=new FrequencyExt();
frequencyExt[i].setKey(o);
frequencyExt[i].setValue(frequency.getCount(o));
frequencyExt[i].setFrequency(frequency.getFrequency(o));
i++;
}
tempColor=null;
tempObject=frequencyExt;
break;
case MeanIndicatorEnum:
tempColor=null;
tempObject=((MeanIndicator)indicator).getMean();
break;
case MedianIndicatorEnum:
tempColor=null;
tempObject=((MedianIndicator)indicator).getMedian();
break;
case MinValueIndicatorEnum:
tempColor=null;
tempObject=((MinValueIndicator)indicator).getValue();
break;
case MaxValueIndicatorEnum:
tempColor=null;
tempObject=((MaxValueIndicator)indicator).getValue();
break;
case LowerQuartileIndicatorEnum:
tempColor=null;
tempObject=((LowerQuartileIndicator)indicator).getValue();
break;
case UpperQuartileIndicatorEnum:
tempColor=null;
tempObject=((UpperQuartileIndicator)indicator).getValue();
break;
case RegexpMatchingIndicatorEnum:
case SqlPatternMatchingIndicatorEnum:
tempColor=null;
PatternMatchingExt patternExt=new PatternMatchingExt();
patternExt.setMatchingValueCount(((PatternMatchingIndicator)indicator).getMatchingValueCount());
patternExt.setNotMatchingValueCount(((PatternMatchingIndicator)indicator).getNotMatchingValueCount());
tempObject=patternExt;
case ModeIndicatorEnum:
tempColor=null;
tempObject=((ModeIndicator)indicator).getMode();
default :
}
indicatorUnit.setColor(tempColor);
indicatorUnit.setValue(tempObject);
}",0.9757716561566544
140512,"public IndicatorUnit(IndicatorEnum type,Indicator indicator,ColumnIndicator parentColumn){
  this.type=type;
  this.indicator=indicator;
  this.indicatorName=indicator.getName();
  this.parentColumn=parentColumn;
}","public IndicatorUnit(IndicatorEnum type,Indicator indicator,ColumnIndicator parentColumn){
  this.type=type;
  this.indicator=indicator;
  this.indicatorName=type.getLabel();
  this.parentColumn=parentColumn;
}",0.9481132075471698
140513,"public String getPersent(){
  if (indicator != null) {
    DecimalFormat format=(DecimalFormat)DecimalFormat.getPercentInstance();
    format.applyPattern(""String_Node_Str"");
    double persent;
    if (indicator instanceof FrequencyIndicator) {
      FrequencyIndicator freIndicator=(FrequencyIndicator)indicator;
      persent=Double.parseDouble(getValue()) / freIndicator.getValueToFreq().size();
    }
 else {
      persent=Double.parseDouble(getValue()) / indicator.getCount().doubleValue();
    }
    return persent == 0 ? ""String_Node_Str"" : format.format(persent);
  }
  return ""String_Node_Str"";
}","public String getPersent(){
  DecimalFormat format=(DecimalFormat)DecimalFormat.getPercentInstance();
  format.applyPattern(""String_Node_Str"");
  if (percent != null) {
    return percent.equals(""String_Node_Str"") ? ""String_Node_Str"" : format.format(Double.valueOf(percent));
  }
 else {
    percent=format.format(Double.parseDouble(getValue()) / indicator.getCount().doubleValue());
    return percent.equals(""String_Node_Str"") ? ""String_Node_Str"" : percent;
  }
}",0.1512605042016806
140514,"public static void createTable(Composite parent,ChartWithData inputObject){
  TableViewer tbViewer=new TableViewer(parent,SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
  Table table=tbViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  if (inputObject.getChartNamedType().equals(CompositeIndicator.SIMPLE_STATISTICS) || inputObject.getChartNamedType().equals(CompositeIndicator.TEXT_STATISTICS)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(150);
    TableColumn column3=new TableColumn(table,SWT.NONE);
    column3.setText(""String_Node_Str"");
    column3.setWidth(150);
    tbViewer.setLabelProvider(new SimpleLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else   if (inputObject.getChartNamedType().equals(CompositeIndicator.FREQUENCE_STATISTICS)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(150);
    TableColumn column3=new TableColumn(table,SWT.NONE);
    column3.setText(""String_Node_Str"");
    column3.setWidth(150);
    tbViewer.setLabelProvider(new FrequencyLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else   if (inputObject.getChartNamedType().equals(CompositeIndicator.SUMMARY_STATISTICS)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(300);
    tbViewer.setLabelProvider(new SummaryLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else   if (inputObject.getChartNamedType().equals(CompositeIndicator.PATTERN_MATCHING) || inputObject.getChartNamedType().equals(CompositeIndicator.SQL_PATTERN_MATCHING)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(75);
    TableColumn column3=new TableColumn(table,SWT.NONE);
    column3.setText(""String_Node_Str"");
    column3.setWidth(75);
    TableColumn column4=new TableColumn(table,SWT.NONE);
    column4.setText(""String_Node_Str"");
    column4.setWidth(75);
    TableColumn column5=new TableColumn(table,SWT.NONE);
    column5.setText(""String_Node_Str"");
    column5.setWidth(75);
    tbViewer.setLabelProvider(new PatternLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else {
    tbViewer.setLabelProvider(new LabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
  tbViewer.setInput(inputObject);
}","public static void createTable(Composite parent,ChartWithData inputObject){
  TableViewer tbViewer=new TableViewer(parent,SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
  Table table=tbViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  if (inputObject.getChartNamedType().equals(CompositeIndicator.SIMPLE_STATISTICS)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(150);
    TableColumn column3=new TableColumn(table,SWT.NONE);
    column3.setText(""String_Node_Str"");
    column3.setWidth(150);
    tbViewer.setLabelProvider(new SimpleLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else   if (inputObject.getChartNamedType().equals(CompositeIndicator.TEXT_STATISTICS)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(300);
    tbViewer.setLabelProvider(new SimpleLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else   if (inputObject.getChartNamedType().equals(CompositeIndicator.FREQUENCE_STATISTICS)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(150);
    TableColumn column3=new TableColumn(table,SWT.NONE);
    column3.setText(""String_Node_Str"");
    column3.setWidth(150);
    tbViewer.setLabelProvider(new FrequencyLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else   if (inputObject.getChartNamedType().equals(CompositeIndicator.SUMMARY_STATISTICS)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(300);
    tbViewer.setLabelProvider(new SummaryLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else   if (inputObject.getChartNamedType().equals(CompositeIndicator.PATTERN_MATCHING) || inputObject.getChartNamedType().equals(CompositeIndicator.SQL_PATTERN_MATCHING)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(75);
    TableColumn column3=new TableColumn(table,SWT.NONE);
    column3.setText(""String_Node_Str"");
    column3.setWidth(75);
    TableColumn column4=new TableColumn(table,SWT.NONE);
    column4.setText(""String_Node_Str"");
    column4.setWidth(75);
    TableColumn column5=new TableColumn(table,SWT.NONE);
    column5.setText(""String_Node_Str"");
    column5.setWidth(75);
    tbViewer.setLabelProvider(new PatternLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else   if (inputObject.getChartNamedType().equals(CompositeIndicator.MODE_INDICATOR)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setAlignment(SWT.CENTER);
    column1.setWidth(500);
    tbViewer.setLabelProvider(new ModeLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else {
    tbViewer.setLabelProvider(new LabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
  tbViewer.setInput(inputObject);
}",0.8694162979877266
140515,"public String getColumnText(Object element,int columnIndex){
  PatternChartDataEntity entity=(PatternChartDataEntity)element;
switch (columnIndex) {
case 0:
    return entity.getLabel();
case 1:
  return entity.getPerMatch();
case 2:
return entity.getPerNoMatch();
case 3:
return entity.getNumMatch();
case 4:
return entity.getNumNoMatch();
default :
return ""String_Node_Str"";
}
}","@Override public String getColumnText(Object element,int columnIndex){
  ChartDataEntity entity=(ChartDataEntity)element;
  return entity.getValue();
}",0.519774011299435
140516,"private void createSummarySection(Composite parent){
  Section section=createSection(form,parent,""String_Node_Str"",true,null);
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout(2,false));
  sectionClient.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite databaseComp=toolkit.createComposite(sectionClient);
  databaseComp.setLayout(new GridLayout(2,false));
  databaseComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  ColumnAnalysisHandler handler=this.masterPage.getAnalysisHandler();
  toolkit.createLabel(databaseComp,""String_Node_Str"");
  toolkit.createLabel(databaseComp,handler.getConnectionName());
  toolkit.createLabel(databaseComp,""String_Node_Str"");
  toolkit.createLabel(databaseComp,handler.getCatalogNames());
  toolkit.createLabel(databaseComp,""String_Node_Str"");
  toolkit.createLabel(databaseComp,handler.getSchemaNames());
  toolkit.createLabel(databaseComp,""String_Node_Str"");
  toolkit.createLabel(databaseComp,handler.getTableNames());
  Composite executionComp=toolkit.createComposite(sectionClient);
  executionComp.setLayout(new GridLayout(2,false));
  executionComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getExecuteData());
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getExecuteDuration());
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getExecuteStatus());
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getExecuteNumber());
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getErrorMessage()).setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  section.setClient(sectionClient);
}","private void createSummarySection(Composite parent){
  Section section=createSection(form,parent,""String_Node_Str"",true,null);
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout(2,false));
  sectionClient.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite databaseComp=toolkit.createComposite(sectionClient);
  databaseComp.setLayout(new GridLayout(2,false));
  GridData databaseCompData=new GridData(GridData.FILL_HORIZONTAL);
  databaseCompData.verticalAlignment=GridData.BEGINNING;
  databaseComp.setLayoutData(databaseCompData);
  ColumnAnalysisHandler handler=this.masterPage.getAnalysisHandler();
  toolkit.createLabel(databaseComp,""String_Node_Str"");
  toolkit.createLabel(databaseComp,handler.getConnectionName());
  if (handler.isCatalogExisting()) {
    toolkit.createLabel(databaseComp,""String_Node_Str"");
    toolkit.createLabel(databaseComp,handler.getCatalogNames());
  }
  if (handler.isSchemaExisting()) {
    toolkit.createLabel(databaseComp,""String_Node_Str"");
    toolkit.createLabel(databaseComp,handler.getSchemaNames());
  }
  toolkit.createLabel(databaseComp,""String_Node_Str"");
  toolkit.createLabel(databaseComp,handler.getTableNames());
  Composite executionComp=toolkit.createComposite(sectionClient);
  executionComp.setLayout(new GridLayout(2,false));
  GridData executionCompData=new GridData(GridData.FILL_HORIZONTAL);
  executionCompData.verticalAlignment=GridData.BEGINNING;
  executionComp.setLayoutData(executionCompData);
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getExecuteData());
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getExecuteDuration());
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getExecuteStatus()).setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getExecuteNumber());
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getLastExecutionNumberOk());
  section.setClient(sectionClient);
}",0.8626887131560029
140517,"public String getPersent(){
  return persent;
}","public String getPersent(){
  if (indicator != null) {
    DecimalFormat format=(DecimalFormat)DecimalFormat.getPercentInstance();
    format.applyPattern(""String_Node_Str"");
    double persent;
    if (indicator instanceof FrequencyIndicator) {
      FrequencyIndicator freIndicator=(FrequencyIndicator)indicator;
      persent=Double.parseDouble(getValue()) / freIndicator.getValueToFreq().size();
    }
 else {
      persent=Double.parseDouble(getValue()) / indicator.getCount().doubleValue();
    }
    return persent == 0 ? ""String_Node_Str"" : format.format(persent);
  }
  return ""String_Node_Str"";
}",0.0949464012251148
140518,"public ChartWithData(String chartNamedType,ImageDescriptor imageDescriptor,ChartDataEntity[] enity){
  this.chartNamedType=chartNamedType;
  this.imageDescriptor=imageDescriptor;
  this.enity=enity;
  if (chartNamedType != CompositeIndicator.PATTERN_MATCHING) {
    this.computered();
  }
}","public ChartWithData(String chartNamedType,ImageDescriptor imageDescriptor,ChartDataEntity[] enity){
  this.chartNamedType=chartNamedType;
  this.imageDescriptor=imageDescriptor;
  this.enity=enity;
}",0.8163265306122449
140519,"private Double getSum(){
  Double match=Double.parseDouble(getNumMatch());
  Double nomatch=Double.parseDouble(getNumNoMatch());
  return match + nomatch;
}","private Double getSum(){
  return getIndicator().getCount().doubleValue();
}",0.3620689655172414
140520,"protected ImageDescriptor decorateImage(ImageDescriptor input,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
      Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
      ImageDescriptor imageDescriptor=ImageLib.getImageDescriptor(ImageLib.PATTERN_REG);
      if (findPattern != null) {
        boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
        if (!validStatus) {
          ImageDescriptor warnImg=PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJS_WARN_TSK);
          DecorationOverlayIcon icon=new DecorationOverlayIcon(imageDescriptor.createImage(),warnImg,IDecoration.BOTTOM_RIGHT);
          imageDescriptor=icon;
        }
      }
      return imageDescriptor;
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
      return ImageLib.getImageDescriptor(ImageLib.REPORT_OBJECT);
    }
  }
  if (element instanceof IProject) {
    if (DQStructureManager.METADATA.equals(((IProject)element).getName())) {
      return ImageLib.getImageDescriptor(ImageLib.METADATA);
    }
  }
 else   if (element instanceof IFolder) {
    if (DQStructureManager.DB_CONNECTIONS.equals(((IFolder)element).getName())) {
      return ImageLib.getImageDescriptor(ImageLib.CONNECTION);
    }
  }
  return super.decorateImage(input,element);
}","protected ImageDescriptor decorateImage(ImageDescriptor input,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
      Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
      ImageDescriptor imageDescriptor=ImageLib.getImageDescriptor(ImageLib.PATTERN_REG);
      if (findPattern != null) {
        boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
        if (!validStatus) {
          ImageDescriptor warnImg=PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJS_WARN_TSK);
          DecorationOverlayIcon icon=new DecorationOverlayIcon(imageDescriptor.createImage(),warnImg,IDecoration.BOTTOM_RIGHT);
          imageDescriptor=icon;
        }
      }
      return imageDescriptor;
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
      return ImageLib.getImageDescriptor(ImageLib.REPORT_OBJECT);
    }
  }
  if (element instanceof IProject) {
    if (DQStructureManager.METADATA.equals(((IProject)element).getName())) {
      return ImageLib.getImageDescriptor(ImageLib.METADATA);
    }
 else     if (DQStructureManager.LIBRARIES.equals(((IProject)element).getName())) {
      return ImageLib.getImageDescriptor(ImageLib.LIBRARIES);
    }
  }
 else   if (element instanceof IFolder) {
    if (DQStructureManager.DB_CONNECTIONS.equals(((IFolder)element).getName())) {
      return ImageLib.getImageDescriptor(ImageLib.CONNECTION);
    }
  }
  return super.decorateImage(input,element);
}",0.9503592423252776
140521,"protected void firePropertyChange(final int propertyId){
  super.firePropertyChange(propertyId);
}","protected void firePropertyChange(final int propertyId){
  super.firePropertyChange(propertyId);
  isRefreshResultPage=true;
}",0.875
140522,"@Override protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  if (columnResultPage != null && newPageIndex == columnResultPage.getIndex()) {
    ((ColumnAnalysisResultPage)columnResultPage).refresh((ColumnMasterDetailsPage)getMasterPage());
  }
}","@Override protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  if (isRefreshResultPage && columnResultPage != null && newPageIndex == columnResultPage.getIndex()) {
    ((ColumnAnalysisResultPage)columnResultPage).refresh((ColumnMasterDetailsPage)getMasterPage());
  }
  isRefreshResultPage=false;
}",0.9136212624584718
140523,"private void createSummarySection(Composite parent){
  Section section=createSection(form,parent,""String_Node_Str"",true,null);
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout(2,false));
  sectionClient.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite databaseComp=toolkit.createComposite(sectionClient);
  databaseComp.setLayout(new GridLayout(2,false));
  GridData databaseCompData=new GridData(GridData.FILL_HORIZONTAL);
  databaseCompData.verticalAlignment=GridData.BEGINNING;
  databaseComp.setLayoutData(databaseCompData);
  ColumnAnalysisHandler handler=this.masterPage.getAnalysisHandler();
  toolkit.createLabel(databaseComp,""String_Node_Str"");
  toolkit.createLabel(databaseComp,handler.getConnectionName());
  if (handler.isCatalogExisting()) {
    toolkit.createLabel(databaseComp,""String_Node_Str"");
    toolkit.createLabel(databaseComp,handler.getCatalogNames());
  }
  if (handler.isSchemaExisting()) {
    toolkit.createLabel(databaseComp,""String_Node_Str"");
    toolkit.createLabel(databaseComp,handler.getSchemaNames());
  }
  toolkit.createLabel(databaseComp,""String_Node_Str"");
  toolkit.createLabel(databaseComp,handler.getTableNames());
  Composite executionComp=toolkit.createComposite(sectionClient);
  executionComp.setLayout(new GridLayout(2,false));
  GridData executionCompData=new GridData(GridData.FILL_HORIZONTAL);
  executionCompData.verticalAlignment=GridData.BEGINNING;
  executionComp.setLayoutData(executionCompData);
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getExecuteData());
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getExecuteDuration());
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getExecuteStatus()).setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getExecuteNumber());
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getLastExecutionNumberOk());
  section.setClient(sectionClient);
}","private void createSummarySection(Composite parent){
  Section section=createSection(form,parent,""String_Node_Str"",true,null);
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout(2,false));
  sectionClient.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite databaseComp=toolkit.createComposite(sectionClient);
  databaseComp.setLayout(new GridLayout(2,false));
  GridData databaseCompData=new GridData(GridData.FILL_HORIZONTAL);
  databaseCompData.verticalAlignment=GridData.BEGINNING;
  databaseComp.setLayoutData(databaseCompData);
  ColumnAnalysisHandler handler=this.masterPage.getAnalysisHandler();
  toolkit.createLabel(databaseComp,""String_Node_Str"");
  toolkit.createLabel(databaseComp,handler.getConnectionName());
  if (handler.isCatalogExisting()) {
    toolkit.createLabel(databaseComp,""String_Node_Str"");
    toolkit.createLabel(databaseComp,handler.getCatalogNames());
  }
  if (handler.isSchemaExisting()) {
    toolkit.createLabel(databaseComp,""String_Node_Str"");
    toolkit.createLabel(databaseComp,handler.getSchemaNames());
  }
  toolkit.createLabel(databaseComp,""String_Node_Str"");
  toolkit.createLabel(databaseComp,handler.getTableNames());
  Composite executionComp=toolkit.createComposite(sectionClient);
  executionComp.setLayout(new GridLayout(2,false));
  GridData executionCompData=new GridData(GridData.FILL_HORIZONTAL);
  executionCompData.verticalAlignment=GridData.BEGINNING;
  executionComp.setLayoutData(executionCompData);
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getExecuteData());
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getExecuteDuration());
  toolkit.createLabel(executionComp,""String_Node_Str"");
  if (handler.getResultMetadata().isLastRunOk()) {
    toolkit.createLabel(executionComp,""String_Node_Str"");
  }
 else {
    toolkit.createLabel(executionComp,""String_Node_Str"" + handler.getResultMetadata().getMessage()).setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  }
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getExecuteNumber());
  toolkit.createLabel(executionComp,""String_Node_Str"");
  toolkit.createLabel(executionComp,handler.getLastExecutionNumberOk());
  section.setClient(sectionClient);
}",0.957983193277311
140524,"@Override public boolean performFinish(){
  Set<String> names=getAllPatternNames();
  String xlsFile=page.getXLSFile();
  boolean skip=page.getSkip();
  boolean rename=page.getRename();
  try {
    File file=new File(xlsFile);
    WorkbookSettings settings=new WorkbookSettings();
    settings.setEncoding(""String_Node_Str"");
    Workbook rwb=Workbook.getWorkbook(file,settings);
    Sheet[] sheets=rwb.getSheets();
    for (    Sheet sheet : sheets) {
      int rows=sheet.getRows();
      for (int i=1; i < rows; i++) {
        Cell[] row=sheet.getRow(i);
        Cell cell=row[0];
        if (CellType.LABEL.equals(cell.getType())) {
          String contents=cell.getContents();
          if (names.contains(contents)) {
            if (skip) {
              continue;
            }
            if (rename) {
              contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
            }
          }
          Pattern pattern=PatternResourceFileHelper.getInstance().createPattern(contents,row[6].getContents(),row[2].getContents(),row[1].getContents(),DevelopmentStatus.DRAFT.getLiteral());
          addComponents(pattern,row[3].getContents(),row[4].getContents(),row[5].getContents());
          EMFUtil util=EMFSharedResources.getSharedEmfUtil();
          String fname=DqRepositoryViewService.createFilename(contents,NewSourcePatternActionProvider.EXTENSION_PATTERN);
          IFile pfile=folder.getFile(fname);
          util.addPoolToResourceSet(pfile.getFullPath().toString(),pattern);
          util.saveLastResource();
          names.add(contents);
        }
      }
    }
  }
 catch (  BiffException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return true;
}","@Override public boolean performFinish(){
  Set<String> names=getAllPatternNames();
  String xlsFile=page.getXLSFile();
  boolean skip=page.getSkip();
  boolean rename=page.getRename();
  try {
    File file=new File(xlsFile);
    WorkbookSettings settings=new WorkbookSettings();
    settings.setEncoding(""String_Node_Str"");
    Workbook rwb=Workbook.getWorkbook(file,settings);
    Sheet[] sheets=rwb.getSheets();
    for (    Sheet sheet : sheets) {
      int rows=sheet.getRows();
      for (int i=1; i < rows; i++) {
        Cell[] row=sheet.getRow(i);
        Cell cell=row[0];
        if (CellType.LABEL.equals(cell.getType())) {
          String contents=cell.getContents();
          if (names.contains(contents)) {
            if (skip) {
              continue;
            }
            if (rename) {
              contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
            }
          }
          Pattern pattern=PatternResourceFileHelper.getInstance().createPattern(contents,row[6].getContents(),row[2].getContents(),row[1].getContents(),DevelopmentStatus.DRAFT.getLiteral());
          addComponents(pattern,row[3].getContents(),row[4].getContents(),row[5].getContents());
          boolean validStatus=PatternUtilities.isPatternValid(pattern);
          TaggedValueHelper.setValidStatus(validStatus,pattern);
          EMFUtil util=EMFSharedResources.getSharedEmfUtil();
          String fname=DqRepositoryViewService.createFilename(contents,NewSourcePatternActionProvider.EXTENSION_PATTERN);
          IFile pfile=folder.getFile(fname);
          util.addPoolToResourceSet(pfile.getFullPath().toString(),pattern);
          util.saveLastResource();
          names.add(contents);
        }
      }
    }
  }
 catch (  BiffException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return true;
}",0.9621442387399834
140525,"private void addItemElements(final ColumnIndicator[] elements){
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    final ColumnIndicator columnIndicator=(ColumnIndicator)elements[i];
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    String columnName=columnIndicator.getTdColumn().getName();
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ columnIndicator.getTdColumn().getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,columnIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(columnIndicator.getTdColumn());
    if (dataminingType == null) {
      dataminingType=MetadataHelper.getDefaultDataminingType(columnIndicator.getTdColumn().getJavaType());
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),columnIndicator.getTdColumn());
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    Button addPatternBtn=new Button(tree,SWT.NONE);
    addPatternBtn.setText(""String_Node_Str"");
    addPatternBtn.pack();
    addPatternBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
        IProject defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES);
        dialog.setInput(defaultPatternFolder);
        dialog.addFilter(new ViewerFilter(){
          @Override public boolean select(          Viewer viewer,          Object parentElement,          Object element){
            if (element instanceof IFile) {
              IFile file=(IFile)element;
              if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
                return true;
              }
            }
 else             if (element instanceof IFolder) {
              IFolder folder=(IFolder)element;
              return PatternUtilities.isLibraiesSubfolder(folder,DQStructureManager.PATTERNS,DQStructureManager.SQL_PATTERNS);
            }
            return false;
          }
        }
);
        dialog.setContainerMode(true);
        dialog.setTitle(""String_Node_Str"");
        dialog.setMessage(""String_Node_Str"");
        dialog.setSize(80,30);
        dialog.create();
        if (dialog.open() == Window.OK) {
          for (          Object obj : dialog.getResult()) {
            if (obj instanceof IFile) {
              IFile file=(IFile)obj;
              IndicatorUnit addIndicatorUnit=PatternUtilities.createIndicatorUnit(file,columnIndicator,getAnalysis());
              createOneUnit(treeItem,addIndicatorUnit);
              setDirty(true);
            }
          }
        }
      }
    }
);
    addPatternEditor.minimumWidth=WIDTH1_CELL;
    addPatternEditor.setEditor(addPatternBtn,treeItem,2);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(""String_Node_Str"");
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(columnIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(columnIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=WIDTH1_CELL;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,3);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor,addPatternEditor});
    if (columnIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,columnIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}","private void addItemElements(final ColumnIndicator[] elements){
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    final ColumnIndicator columnIndicator=(ColumnIndicator)elements[i];
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    String columnName=columnIndicator.getTdColumn().getName();
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ columnIndicator.getTdColumn().getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,columnIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(columnIndicator.getTdColumn());
    if (dataminingType == null) {
      dataminingType=MetadataHelper.getDefaultDataminingType(columnIndicator.getTdColumn().getJavaType());
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),columnIndicator.getTdColumn());
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    Button addPatternBtn=new Button(tree,SWT.NONE);
    addPatternBtn.setText(""String_Node_Str"");
    addPatternBtn.pack();
    addPatternBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
        IProject defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES);
        dialog.setInput(defaultPatternFolder);
        dialog.setValidator(new ISelectionStatusValidator(){
          public IStatus validate(          Object[] selection){
            IStatus status=Status.OK_STATUS;
            for (            Object patte : selection) {
              if (patte instanceof IFile) {
                IFile file=(IFile)patte;
                if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
                  Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
                  boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
                  if (!validStatus) {
                    status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,""String_Node_Str"");
                  }
                }
              }
            }
            return status;
          }
        }
);
        dialog.addFilter(new ViewerFilter(){
          @Override public boolean select(          Viewer viewer,          Object parentElement,          Object element){
            if (element instanceof IFile) {
              IFile file=(IFile)element;
              if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
                return true;
              }
            }
 else             if (element instanceof IFolder) {
              IFolder folder=(IFolder)element;
              return PatternUtilities.isLibraiesSubfolder(folder,DQStructureManager.PATTERNS,DQStructureManager.SQL_PATTERNS);
            }
            return false;
          }
        }
);
        dialog.setContainerMode(true);
        dialog.setTitle(""String_Node_Str"");
        dialog.setMessage(""String_Node_Str"");
        dialog.setSize(80,30);
        dialog.create();
        if (dialog.open() == Window.OK) {
          for (          Object obj : dialog.getResult()) {
            if (obj instanceof IFile) {
              IFile file=(IFile)obj;
              IndicatorUnit addIndicatorUnit=PatternUtilities.createIndicatorUnit(file,columnIndicator,getAnalysis());
              createOneUnit(treeItem,addIndicatorUnit);
              setDirty(true);
            }
          }
        }
      }
    }
);
    addPatternEditor.minimumWidth=WIDTH1_CELL;
    addPatternEditor.setEditor(addPatternBtn,treeItem,2);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(""String_Node_Str"");
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(columnIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(columnIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=WIDTH1_CELL;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,3);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor,addPatternEditor});
    if (columnIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,columnIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}",0.9205521768510474
140526,"@Override public Image getImage(Object element){
  if (element instanceof IFolder) {
    return ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
  }
  if (element instanceof IFile) {
    return ImageLib.getImage(ImageLib.PATTERN_REG);
  }
  return null;
}","@Override public Image getImage(Object element){
  if (element instanceof IFolder) {
    return ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
  }
  if (element instanceof IFile) {
    Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern((IFile)element);
    boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
    ImageDescriptor imageDescriptor=ImageLib.getImageDescriptor(ImageLib.PATTERN_REG);
    if (!validStatus) {
      ImageDescriptor warnImg=PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJS_WARN_TSK);
      DecorationOverlayIcon icon=new DecorationOverlayIcon(imageDescriptor.createImage(),warnImg,IDecoration.BOTTOM_RIGHT);
      imageDescriptor=icon;
    }
    return imageDescriptor.createImage();
  }
  return null;
}",0.444022770398482
140527,"private boolean savePattern(){
  this.pattern.getComponents().clear();
  this.pattern.getComponents().addAll(tempPatternComponents);
  EList<PatternComponent> components=this.pattern.getComponents();
  List<String> existLanguage=new ArrayList<String>();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    String language=regularExpress.getExpression().getLanguage();
    if ((regularExpress.getExpression().getBody() == null) || (!regularExpress.getExpression().getBody().matches(""String_Node_Str""))) {
      MessageDialog.openWarning(null,""String_Node_Str"",""String_Node_Str"");
      return false;
    }
    if (existLanguage.contains(language)) {
      MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"" + language);
      return false;
    }
 else {
      existLanguage.add(language);
    }
  }
  EMFUtil.saveSingleResource(pattern.eResource());
  return true;
}","private boolean savePattern(){
  this.pattern.getComponents().clear();
  this.pattern.getComponents().addAll(tempPatternComponents);
  TaggedValueHelper.setValidStatus(true,pattern);
  EList<PatternComponent> components=this.pattern.getComponents();
  List<String> existLanguage=new ArrayList<String>();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    String language=regularExpress.getExpression().getLanguage();
    if ((regularExpress.getExpression().getBody() == null) || (!regularExpress.getExpression().getBody().matches(""String_Node_Str""))) {
      MessageDialog.openWarning(null,""String_Node_Str"",""String_Node_Str"");
      return false;
    }
    if (existLanguage.contains(language)) {
      MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"" + language);
      return false;
    }
 else {
      existLanguage.add(language);
    }
  }
  EMFUtil.saveSingleResource(pattern.eResource());
  return true;
}",0.9746192893401016
140528,"protected ImageDescriptor decorateImage(ImageDescriptor input,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
      return ImageLib.getImageDescriptor(ImageLib.PATTERN_REG);
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
      return ImageLib.getImageDescriptor(ImageLib.REPORT_OBJECT);
    }
  }
  if (element instanceof IProject) {
    if (DQStructureManager.METADATA.equals(((IProject)element).getName())) {
      return ImageLib.getImageDescriptor(ImageLib.METADATA);
    }
  }
 else   if (element instanceof IFolder) {
    if (DQStructureManager.DB_CONNECTIONS.equals(((IFolder)element).getName())) {
      return ImageLib.getImageDescriptor(ImageLib.CONNECTION);
    }
  }
  return super.decorateImage(input,element);
}","protected ImageDescriptor decorateImage(ImageDescriptor input,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
      Pattern findPattern=PatternResourceFileHelper.getInstance().findPattern(file);
      ImageDescriptor imageDescriptor=ImageLib.getImageDescriptor(ImageLib.PATTERN_REG);
      if (findPattern != null) {
        boolean validStatus=TaggedValueHelper.getValidStatus(findPattern);
        if (!validStatus) {
          ImageDescriptor warnImg=PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJS_WARN_TSK);
          DecorationOverlayIcon icon=new DecorationOverlayIcon(imageDescriptor.createImage(),warnImg,IDecoration.BOTTOM_RIGHT);
          imageDescriptor=icon;
        }
      }
      return imageDescriptor;
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
      return ImageLib.getImageDescriptor(ImageLib.REPORT_OBJECT);
    }
  }
  if (element instanceof IProject) {
    if (DQStructureManager.METADATA.equals(((IProject)element).getName())) {
      return ImageLib.getImageDescriptor(ImageLib.METADATA);
    }
  }
 else   if (element instanceof IFolder) {
    if (DQStructureManager.DB_CONNECTIONS.equals(((IFolder)element).getName())) {
      return ImageLib.getImageDescriptor(ImageLib.CONNECTION);
    }
  }
  return super.decorateImage(input,element);
}",0.7423655913978494
140529,"private DQStructureManager(){
}","private DQStructureManager(){
  init();
}",0.8611111111111112
140530,"/** 
 * Copy the files from srcPath to destination folder.
 * @param srcPath The path name in which to look. The path is always relative to the root of this bundle and maybegin with &quot;/&quot;. A path value of &quot;/&quot; indicates the root of this bundle.
 * @param srcPath
 * @param recurse If <code>true</code>, recurse into subdirectories(contains directories). Otherwise only returnentries from the specified path.
 * @param desFolder
 * @throws IOException
 * @throws CoreException
 */
@SuppressWarnings(""String_Node_Str"") private void copyFilesToFolder(String srcPath,boolean recurse,IFolder desFolder) throws IOException, CoreException {
  Enumeration paths=null;
  paths=CorePlugin.getDefault().getBundle().getEntryPaths(srcPath);
  if (paths == null) {
    return;
  }
  while (paths.hasMoreElements()) {
    String nextElement=(String)paths.nextElement();
    String currentPath=""String_Node_Str"" + nextElement;
    URL resourceURL=CorePlugin.getDefault().getBundle().getEntry(currentPath);
    URL fileURL=null;
    File file=null;
    try {
      fileURL=FileLocator.toFileURL(resourceURL);
      file=new File(fileURL.getFile());
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (file.isDirectory() && recurse) {
      if (file.getName().startsWith(""String_Node_Str"")) {
        continue;
      }
      IFolder folder=desFolder.getFolder(file.getName());
      if (!folder.exists()) {
        folder.create(true,true,null);
      }
      copyFilesToFolder(currentPath,recurse,folder);
      continue;
    }
    String fileName=new Path(fileURL.getPath()).lastSegment();
    InputStream openStream=null;
    openStream=fileURL.openStream();
    copyFileToFolder(openStream,fileName,desFolder);
  }
}","/** 
 * Copy the files from srcPath to destination folder.
 * @param srcPath The path name in which to look. The path is always relative to the root of this bundle and maybegin with &quot;/&quot;. A path value of &quot;/&quot; indicates the root of this bundle.
 * @param srcPath
 * @param recurse If <code>true</code>, recurse into subdirectories(contains directories). Otherwise only returnentries from the specified path.
 * @param desFolder
 * @throws IOException
 * @throws CoreException
 */
@SuppressWarnings(""String_Node_Str"") private void copyFilesToFolder(String srcPath,boolean recurse,IFolder desFolder) throws IOException, CoreException {
  Enumeration paths=null;
  paths=CorePlugin.getDefault().getBundle().getEntryPaths(srcPath);
  if (paths == null) {
    return;
  }
  while (paths.hasMoreElements()) {
    String nextElement=(String)paths.nextElement();
    String currentPath=""String_Node_Str"" + nextElement;
    URL resourceURL=CorePlugin.getDefault().getBundle().getEntry(currentPath);
    URL fileURL=null;
    File file=null;
    try {
      fileURL=FileLocator.toFileURL(resourceURL);
      file=new File(fileURL.getFile());
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (file.isDirectory() && recurse) {
      if (file.getName().startsWith(""String_Node_Str"")) {
        continue;
      }
      IFolder folder=desFolder.getFolder(file.getName());
      if (!folder.exists()) {
        folder.create(true,true,null);
      }
      folder.setPersistentProperty(FOLDER_CLASSIFY_KEY,desFolder.getPersistentProperty(FOLDER_CLASSIFY_KEY));
      copyFilesToFolder(currentPath,recurse,folder);
      continue;
    }
    String fileName=new Path(fileURL.getPath()).lastSegment();
    InputStream openStream=null;
    openStream=fileURL.openStream();
    copyFileToFolder(openStream,fileName,desFolder);
  }
}",0.9694104560622916
140531,"public boolean createDQStructure(){
  Shell shell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
  try {
    IProject project=this.createNewProject(DATA_PROFILING,shell);
    this.createNewFoler(project,ANALYSIS);
    this.createNewFoler(project,REPORTS);
    project=this.createNewProject(LIBRARIES,shell);
    IFolder patternFolder=this.createNewFoler(project,PATTERNS);
    this.createNewFoler(project,SQL_PATTERNS);
    this.copyFilesToFolder(PATTERN_PATH,true,patternFolder);
    IFolder sqlSourceFolder=this.createNewFoler(project,SOURCE_FILES);
    this.copyFilesToFolder(DEMO_PATH,true,sqlSourceFolder);
    project=this.createNewProject(METADATA,shell);
    this.createNewFoler(project,DB_CONNECTIONS);
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return false;
  }
  return true;
}","public boolean createDQStructure(){
  Shell shell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
  try {
    IProject project=this.createNewProject(DATA_PROFILING,shell);
    IFolder createNewFoler=this.createNewFoler(project,ANALYSIS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,ANALYSIS_FOLDER_PROPERTY);
    createNewFoler=this.createNewFoler(project,REPORTS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,REPORT_FOLDER_PROPERTY);
    project=this.createNewProject(LIBRARIES,shell);
    createNewFoler=this.createNewFoler(project,PATTERNS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,PATTERNS_FOLDER_PROPERTY);
    this.copyFilesToFolder(PATTERN_PATH,true,createNewFoler);
    createNewFoler=this.createNewFoler(project,SQL_PATTERNS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,SQLPATTERNS_FOLDER_PROPERTY);
    createNewFoler=this.createNewFoler(project,SOURCE_FILES);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,SOURCEFILES_FOLDER_PROPERTY);
    this.copyFilesToFolder(DEMO_PATH,true,createNewFoler);
    project=this.createNewProject(METADATA,shell);
    createNewFoler=this.createNewFoler(project,DB_CONNECTIONS);
    createNewFoler.setPersistentProperty(FOLDER_CLASSIFY_KEY,DBCONNECTION_FOLDER_PROPERTY);
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return false;
  }
  return true;
}",0.4508050089445438
140532,"private IFolder createNewFoler(IProject project,String folderName) throws CoreException {
  IFolder desFolder=project.getFolder(folderName);
  if (!desFolder.exists()) {
    desFolder.create(false,true,null);
  }
  desFolder.setPersistentProperty(FOLDER_FIRM_KEY,FOLDER_FIRM_PROPERTY);
  return desFolder;
}","private IFolder createNewFoler(IProject project,String folderName) throws CoreException {
  IFolder desFolder=project.getFolder(folderName);
  if (!desFolder.exists()) {
    desFolder.create(false,true,null);
  }
  desFolder.setPersistentProperty(FOLDER_READONLY_KEY,FOLDER_READONLY_PROPERTY);
  return desFolder;
}",0.9614147909967846
140533,"/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof IFolder) {
    currentSelection=(IFolder)obj;
    try {
      if (currentSelection.getPersistentProperty(DQStructureManager.FOLDER_FIRM_KEY) != null) {
        return;
      }
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  DeleteFolderAction createSubFolderAction=new DeleteFolderAction(currentSelection);
  menu.add(createSubFolderAction);
}","/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof IFolder) {
    currentSelection=(IFolder)obj;
    try {
      if (currentSelection.getPersistentProperty(DQStructureManager.FOLDER_READONLY_KEY) != null) {
        return;
      }
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  DeleteFolderAction createSubFolderAction=new DeleteFolderAction(currentSelection);
  menu.add(createSubFolderAction);
}",0.9917763157894736
140534,"@Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object target){
  if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
    return Status.CANCEL_STATUS;
  }
  IResource[] resources=null;
  TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
  if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
    resources=getSelectedResources();
  }
 else   if (ResourceTransfer.getInstance().isSupportedType(currentTransfer)) {
    resources=(IResource[])aDropTargetEvent.data;
  }
  if ((target instanceof IFile)) {
    TdReport findReport=RepResourceFileHelper.getInstance().findReport(((IFile)target));
    if (resources != null && resources.length > 0) {
      List<Analysis> anaList=new ArrayList<Analysis>();
      for (      IResource res : resources) {
        Analysis findAnalysis=AnaResourceFileHelper.getInstance().findAnalysis((IFile)res);
        if (findAnalysis != null) {
          anaList.add(findAnalysis);
        }
      }
      ReportHelper.addAnalyses(anaList,findReport);
      RepResourceFileHelper.getInstance().save(findReport);
    }
  }
 else   if ((target instanceof IFolder)) {
    IFolder folder=(IFolder)target;
    for (    IResource res : resources) {
      if (res.getType() != IResource.FILE) {
        return null;
      }
      String name=res.getName();
      IFile fileRes=(IFile)res;
      IFile movedIFile=folder.getFile(name);
      List<ModelElement> oldDependencySuppliers=EObjectHelper.getDependencySuppliers(fileRes);
      EObjectHelper.removeDependencys(new IResource[]{fileRes});
      IContainer srcParent=fileRes.getParent();
      URI srcUri=URI.createPlatformResourceURI((fileRes).getFullPath().toString(),false);
      ResourceSet rs=EMFSharedResources.getSharedEmfUtil().getResourceSet();
      Resource resource=rs.getResource(srcUri,true);
      if (resource != null) {
        URI desUri=URI.createPlatformResourceURI(folder.getFullPath().toString(),false);
        EMFUtil.changeUri(resource,desUri);
      }
      try {
        fileRes.move(movedIFile.getFullPath(),true,null);
        srcParent.refreshLocal(IResource.DEPTH_INFINITE,null);
        folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      }
 catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
      EObjectHelper.addDependenciesForFile(movedIFile,oldDependencySuppliers);
      for (      ModelElement element : oldDependencySuppliers) {
        EMFSharedResources.getSharedEmfUtil().saveSingleResource(element.eResource());
      }
    }
  }
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object target){
  if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
    return Status.CANCEL_STATUS;
  }
  IResource[] resources=null;
  TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
  if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
    resources=getSelectedResources();
  }
 else   if (ResourceTransfer.getInstance().isSupportedType(currentTransfer)) {
    resources=(IResource[])aDropTargetEvent.data;
  }
  if ((target instanceof IFile)) {
    TdReport findReport=RepResourceFileHelper.getInstance().findReport(((IFile)target));
    if (resources != null && resources.length > 0) {
      List<Analysis> anaList=new ArrayList<Analysis>();
      for (      IResource res : resources) {
        Analysis findAnalysis=AnaResourceFileHelper.getInstance().findAnalysis((IFile)res);
        if (findAnalysis != null) {
          anaList.add(findAnalysis);
        }
      }
      ReportHelper.addAnalyses(anaList,findReport);
      RepResourceFileHelper.getInstance().save(findReport);
    }
  }
 else   if ((target instanceof IFolder)) {
    IFolder folder=(IFolder)target;
    for (    IResource res : resources) {
      if (res.getType() != IResource.FILE) {
        return null;
      }
      String name=res.getName();
      IFile fileRes=(IFile)res;
      IFile movedIFile=folder.getFile(name);
      if (!DQStructureManager.getInstance().getModelElementSuffixs().contains(fileRes.getFileExtension())) {
        try {
          fileRes.move(movedIFile.getFullPath(),false,null);
          fileRes.getParent().refreshLocal(IResource.DEPTH_INFINITE,null);
          folder.refreshLocal(IResource.DEPTH_INFINITE,null);
        }
 catch (        CoreException e) {
          ExceptionHandler.process(e);
        }
        return Status.OK_STATUS;
      }
      List<ModelElement> oldDependencySuppliers=EObjectHelper.getDependencySuppliers(fileRes);
      List<ModelElement> oldDependencyClients=EObjectHelper.getDependencyClients(fileRes);
      EObjectHelper.removeDependencys(new IResource[]{fileRes});
      IContainer srcParent=fileRes.getParent();
      URI srcUri=URI.createPlatformResourceURI((fileRes).getFullPath().toString(),false);
      ResourceSet rs=EMFSharedResources.getSharedEmfUtil().getResourceSet();
      Resource resource=rs.getResource(srcUri,true);
      if (resource != null) {
        URI desUri=URI.createPlatformResourceURI(folder.getFullPath().toString(),false);
        EMFUtil.changeUri(resource,desUri);
        EMFSharedResources.getSharedEmfUtil().saveSingleResource(resource);
      }
      try {
        fileRes.delete(true,null);
        srcParent.refreshLocal(IResource.DEPTH_INFINITE,null);
        folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      }
 catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
      movedIFile=folder.getFile(name);
      EObjectHelper.addDependenciesForFile(movedIFile,oldDependencySuppliers);
      EObjectHelper.addDependenciesForFile(movedIFile,oldDependencyClients);
      for (      ModelElement element : oldDependencySuppliers) {
        EMFSharedResources.getSharedEmfUtil().saveSingleResource(element.eResource());
      }
      for (      ModelElement element : oldDependencyClients) {
        EMFSharedResources.getSharedEmfUtil().saveSingleResource(element.eResource());
      }
    }
  }
  ((DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID)).getCommonViewer().refresh();
  return null;
}",0.8472178560201195
140535,"@Override public IStatus validateDrop(Object target,int operation,TransferData transferType){
  if (!(target instanceof IResource)) {
    return Status.CANCEL_STATUS;
  }
  IResource targetRes=(IResource)target;
  for (  IResource res : getSelectedResources()) {
    if (res.getType() == IResource.FILE) {
      if (targetRes.getType() == IResource.FOLDER) {
        return Status.OK_STATUS;
      }
 else       if (res.getName().endsWith(PluginConstant.ANA_SUFFIX) && (targetRes.getType() == IResource.FILE)) {
        IFile tfile=(IFile)targetRes;
        if (tfile.getFileExtension().equals(FactoriesUtil.REP)) {
          return Status.OK_STATUS;
        }
      }
    }
  }
  return Status.CANCEL_STATUS;
}","@Override public IStatus validateDrop(Object target,int operation,TransferData transferType){
  if (!(target instanceof IResource)) {
    return Status.CANCEL_STATUS;
  }
  IResource targetRes=(IResource)target;
  for (  IResource res : getSelectedResources()) {
    if (res.getType() == IResource.FILE) {
      if ((targetRes.getType() == IResource.FOLDER)) {
        IFolder targetFolder=(IFolder)targetRes;
        IFolder sourceFolder=(IFolder)res.getParent();
        try {
          if (sourceFolder.getPersistentProperty(DQStructureManager.FOLDER_CLASSIFY_KEY).equals(targetFolder.getPersistentProperty(DQStructureManager.FOLDER_CLASSIFY_KEY))) {
            return Status.OK_STATUS;
          }
        }
 catch (        CoreException e) {
          e.printStackTrace();
        }
      }
 else       if (res.getName().endsWith(PluginConstant.ANA_SUFFIX) && (targetRes.getType() == IResource.FILE)) {
        IFile tfile=(IFile)targetRes;
        if (tfile.getFileExtension().equals(FactoriesUtil.REP)) {
          return Status.OK_STATUS;
        }
      }
    }
  }
  return Status.CANCEL_STATUS;
}",0.7817482133040132
140536,"/** 
 * @see org.eclipse.jface.wizard.Wizard#performFinish()
 */
@Override public boolean performFinish(){
  String folderName=mainPage.getName();
  if (defaultLabel == null) {
    IFolder folder=ResourcesPlugin.getWorkspace().getRoot().getFolder(path);
    IFolder newFolder=folder.getFolder(folderName);
    try {
      newFolder.create(false,true,null);
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
      findView.getCommonViewer().refresh();
      findView.getCommonViewer().setExpandedState(newFolder,true);
    }
 catch (    CoreException e) {
      MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
      ExceptionHandler.process(e);
      return false;
    }
  }
  return true;
}","/** 
 * @see org.eclipse.jface.wizard.Wizard#performFinish()
 */
@Override public boolean performFinish(){
  String folderName=mainPage.getName();
  if (defaultLabel == null) {
    IFolder folder=ResourcesPlugin.getWorkspace().getRoot().getFolder(path);
    IFolder newFolder=folder.getFolder(folderName);
    try {
      newFolder.create(false,true,null);
      newFolder.setPersistentProperty(DQStructureManager.FOLDER_CLASSIFY_KEY,folder.getPersistentProperty(DQStructureManager.FOLDER_CLASSIFY_KEY));
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
      findView.getCommonViewer().refresh();
      findView.getCommonViewer().setExpandedState(newFolder,true);
    }
 catch (    CoreException e) {
      MessageDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"");
      ExceptionHandler.process(e);
      return false;
    }
  }
  return true;
}",0.918232044198895
140537,"public void selectionChanged(IWorkbenchPart part,ISelection selection){
  clearContainer();
  boolean is=true;
  if (part instanceof DQRespositoryView) {
    StructuredSelection sel=(StructuredSelection)selection;
    Object fe=sel.getFirstElement();
    if (fe instanceof IFile) {
      IFile fe2=(IFile)fe;
      if (fe2.getFileExtension().equals(FactoriesUtil.PROV)) {
        TypedReturnCode<TdDataProvider> tdProvider=PrvResourceFileHelper.getInstance().getTdProvider(fe2);
        TdDataProvider dataProvider=tdProvider.getObject();
        createDataProviderDetail(dataProvider);
        is=false;
      }
 else       if (fe2.getFileExtension().equals(FactoriesUtil.PATTERN)) {
        Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(fe2);
        createPatternDetail(pattern);
        is=false;
      }
 else       if (fe2.getFileExtension().equals(FactoriesUtil.ANA)) {
        Analysis ana=AnaResourceFileHelper.getInstance().findAnalysis(fe2);
        createAnaysisDetail(ana);
        is=false;
      }
 else       if (fe2.getFileExtension().equals(FactoriesUtil.REP)) {
        TdReport rep=RepResourceFileHelper.getInstance().findReport(fe2);
        createReportDetail(rep);
        is=false;
      }
 else       if (fe2.getFileExtension().equals(FactoriesUtil.SQL)) {
        createSqlFileDetail(fe2);
        is=false;
      }
    }
 else     if (fe instanceof TdCatalog) {
      TdCatalog catalog=(TdCatalog)fe;
      createTdCatalogDetail(catalog);
      is=false;
    }
 else     if (fe instanceof TdSchema) {
      TdSchema schema=(TdSchema)fe;
      createTdSchemaDetail(schema);
      is=false;
    }
 else     if ((fe instanceof TdTable) || fe instanceof TdView) {
      ModelElement element=(ModelElement)fe;
      createTdTVDetail(element);
      is=false;
    }
 else     if (fe instanceof TdColumn) {
      TdColumn column=(TdColumn)fe;
      createTdColumn(column);
      is=false;
    }
  }
  if (is) {
    createDefault();
  }
  container.layout();
}","public void selectionChanged(IWorkbenchPart part,ISelection selection){
  clearContainer();
  boolean is=true;
  if (part instanceof DQRespositoryView) {
    StructuredSelection sel=(StructuredSelection)selection;
    Object fe=sel.getFirstElement();
    if (fe instanceof IFile) {
      IFile fe2=(IFile)fe;
      is=createFileDetail(is,fe2);
    }
 else     if (fe instanceof TdCatalog) {
      TdCatalog catalog=(TdCatalog)fe;
      createTdCatalogDetail(catalog);
      is=false;
    }
 else     if (fe instanceof TdSchema) {
      TdSchema schema=(TdSchema)fe;
      createTdSchemaDetail(schema);
      is=false;
    }
 else     if ((fe instanceof TdTable) || fe instanceof TdView) {
      ModelElement element=(ModelElement)fe;
      createTdTVDetail(element);
      is=false;
    }
 else     if (fe instanceof TdColumn) {
      TdColumn column=(TdColumn)fe;
      createTdColumn(column);
      is=false;
    }
  }
 else   if (part instanceof CommonFormEditor) {
    CommonFormEditor editor=(CommonFormEditor)part;
    IEditorInput editorInput=editor.getEditorInput();
    if (editorInput instanceof IFileEditorInput) {
      IFileEditorInput input=(IFileEditorInput)editorInput;
      IFile file=input.getFile();
      is=createFileDetail(is,file);
    }
  }
  if (is) {
    createDefault();
  }
  container.layout();
}",0.2037871956717764
140538,"private void addTreeListener(Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (getTheSuitedComposite(e) != null) {
        getTheSuitedComposite(e).setFocus();
      }
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      if (getTheSuitedComposite(e) != null) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      masterPage.getForm().reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      if (getTheSuitedComposite(e) != null) {
        getTheSuitedComposite(e).setExpanded(true);
      }
      masterPage.getForm().reflow(true);
    }
  }
);
}","private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (getTheSuitedComposite(e) != null) {
        getTheSuitedComposite(e).setFocus();
      }
      if (e.item instanceof TreeItem) {
        TreeItem item=(TreeItem)e.item;
        if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
          tree.setMenu(null);
          return;
        }
      }
      tree.setMenu(menu);
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      if (getTheSuitedComposite(e) != null) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      masterPage.getForm().reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      if (getTheSuitedComposite(e) != null) {
        getTheSuitedComposite(e).setExpanded(true);
      }
      masterPage.getForm().reflow(true);
    }
  }
);
}",0.8621291448516579
140539,"@Override public void widgetSelected(SelectionEvent e){
  if (getTheSuitedComposite(e) != null) {
    getTheSuitedComposite(e).setFocus();
  }
}","@Override public void widgetSelected(SelectionEvent e){
  if (getTheSuitedComposite(e) != null) {
    getTheSuitedComposite(e).setFocus();
  }
  if (e.item instanceof TreeItem) {
    TreeItem item=(TreeItem)e.item;
    if (DATA_PARAM.equals(item.getData(DATA_PARAM))) {
      tree.setMenu(null);
      return;
    }
  }
  tree.setMenu(menu);
}",0.5913757700205339
140540,"/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new Tree(parent,SWT.MULTI);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(false);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(80);
  TreeColumn column3=new TreeColumn(newTree,SWT.CENTER);
  column3.setWidth(120);
  TreeColumn column4=new TreeColumn(newTree,SWT.CENTER);
  column4.setWidth(120);
  parent.layout();
  Menu menu=new Menu(newTree);
  MenuItem deleteMenuItem=new MenuItem(menu,SWT.CASCADE);
  deleteMenuItem.setText(""String_Node_Str"");
  deleteMenuItem.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  deleteMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      removeSelectedElements(newTree);
    }
  }
);
  newTree.setMenu(menu);
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
    }
  }
;
  parent.setData(AbstractMetadataFormPage.ACTION_HANDLER,actionHandler);
  ColumnViewerDND.installDND(newTree);
  this.addTreeListener(newTree);
  return newTree;
}","/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new Tree(parent,SWT.MULTI);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(false);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(80);
  TreeColumn column3=new TreeColumn(newTree,SWT.CENTER);
  column3.setWidth(120);
  TreeColumn column4=new TreeColumn(newTree,SWT.CENTER);
  column4.setWidth(120);
  parent.layout();
  menu=new Menu(newTree);
  MenuItem deleteMenuItem=new MenuItem(menu,SWT.CASCADE);
  deleteMenuItem.setText(""String_Node_Str"");
  deleteMenuItem.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  deleteMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      removeSelectedElements(newTree);
    }
  }
);
  newTree.setMenu(menu);
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
    }
  }
;
  parent.setData(AbstractMetadataFormPage.ACTION_HANDLER,actionHandler);
  ColumnViewerDND.installDND(newTree);
  this.addTreeListener(newTree);
  return newTree;
}",0.9981405727036072
140541,"/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  TreeItem[] items=indicatorItem.getItems();
  if (indicatorItem != null && !indicatorItem.isDisposed()) {
    for (    TreeItem treeItem : items) {
      if (DATA_PARAM.equals(treeItem.getData(DATA_PARAM))) {
        treeItem.dispose();
      }
    }
  }
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  TreeItem iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + parameters.getTopN());
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
  iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"");
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + tParameter.isUseBlank());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + tParameter.isIgnoreCase());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + tParameter.isUseNulls());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"");
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + dParameters.getDateAggregationType().getName() + ""String_Node_Str"");
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  Domain dataValidDomain=parameters.getDataValidDomain();
  if (dataValidDomain != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"" + (dataValidDomain != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  Domain indicatorValidDomain=parameters.getIndicatorValidDomain();
  if (indicatorValidDomain != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"" + (indicatorValidDomain != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  Domain bins=parameters.getBins();
  if (bins != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"" + (bins != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
}","/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  TreeItem[] items=indicatorItem.getItems();
  if (indicatorItem != null && !indicatorItem.isDisposed()) {
    for (    TreeItem treeItem : items) {
      if (DATA_PARAM.equals(treeItem.getData(DATA_PARAM))) {
        treeItem.dispose();
      }
    }
  }
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  TreeItem iParamItem;
  if (indicatorUnit.getType() == IndicatorEnum.FrequencyIndicatorEnum) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"" + parameters.getTopN());
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"");
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + tParameter.isUseBlank());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + tParameter.isIgnoreCase());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + tParameter.isUseNulls());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"");
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + dParameters.getDateAggregationType().getName() + ""String_Node_Str"");
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem.setData(DATA_PARAM,DATA_PARAM);
  }
  Domain dataValidDomain=parameters.getDataValidDomain();
  if (dataValidDomain != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"" + (dataValidDomain != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  Domain indicatorValidDomain=parameters.getIndicatorValidDomain();
  if (indicatorValidDomain != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"" + (indicatorValidDomain != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  Domain bins=parameters.getBins();
  if (bins != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"" + (bins != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
}",0.9559504255636851
140542,"/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  TreeItem[] items=indicatorItem.getItems();
  if (indicatorItem != null && !indicatorItem.isDisposed()) {
    for (    TreeItem treeItem : items) {
      if (DATA_PARAM.equals(treeItem.getData(DATA_PARAM))) {
        treeItem.dispose();
      }
    }
  }
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  TreeItem iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + parameters.getTopN());
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
  iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"");
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + tParameter.isUseBlank());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + tParameter.isIgnoreCase());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + tParameter.isUseNulls());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"");
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + dParameters.getDateAggregationType().getName() + ""String_Node_Str"");
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getDataValidDomain() != null));
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
  iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getIndicatorValidDomain() != null));
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
  iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getBins() != null));
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
  iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
}","/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  TreeItem[] items=indicatorItem.getItems();
  if (indicatorItem != null && !indicatorItem.isDisposed()) {
    for (    TreeItem treeItem : items) {
      if (DATA_PARAM.equals(treeItem.getData(DATA_PARAM))) {
        treeItem.dispose();
      }
    }
  }
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  TreeItem iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + parameters.getTopN());
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
  iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"");
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + tParameter.isUseBlank());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + tParameter.isIgnoreCase());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + tParameter.isUseNulls());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"");
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + dParameters.getDateAggregationType().getName() + ""String_Node_Str"");
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  Domain dataValidDomain=parameters.getDataValidDomain();
  if (dataValidDomain != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"" + (dataValidDomain != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  Domain indicatorValidDomain=parameters.getIndicatorValidDomain();
  if (indicatorValidDomain != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"" + (indicatorValidDomain != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  Domain bins=parameters.getBins();
  if (bins != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"" + (bins != null));
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
}",0.9430102289332684
140543,"@Override public boolean performFinish(){
  try {
    IndicatorParameters paramters=indicatorUnit.getIndicator().getParameters();
    if (paramters == null) {
      isDirty=true;
      paramters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
      indicatorUnit.getIndicator().setParameters(paramters);
    }
    TextParameters textParameters=paramters.getTextParameter();
    if (textParameters == null) {
      isDirty=true;
      textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
      paramters.setTextParameter(textParameters);
    }
    for (    AbstractIndicatorParameter parameter : AbstractIndicatorForm.getParameters()) {
      if (parameter.getFormEnum() == FormEnum.BinsDesignerForm) {
        BinsDesignerParameter tempParam=(BinsDesignerParameter)parameter;
        int numOfBin=tempParam.getNumOfBins();
        int numOfShown=tempParam.getNumOfShown();
        double min=tempParam.getMinValue();
        double max=tempParam.getMaxValue();
        Domain domain=DomainHelper.createContiguousClosedBinsIntoDomain(""String_Node_Str"",numOfBin,min,max);
        Domain bins=paramters.getBins();
        boolean same=true;
        if (bins != null) {
          EList<RangeRestriction> ranges=bins.getRanges();
          EList<RangeRestriction> ranges2=domain.getRanges();
          if (ranges.size() != ranges2.size()) {
            same=false;
          }
          for (int i=0; i < ranges2.size() && same; i++) {
            RangeRestriction d2=ranges2.get(i);
            RangeRestriction d1=ranges.get(i);
            double v1=((RealNumberValue)d1.getLowerValue()).getValue();
            double v2=((RealNumberValue)d2.getLowerValue()).getValue();
            if (v1 != v2) {
              same=false;
              break;
            }
            v1=((RealNumberValue)d1.getUpperValue()).getValue();
            v2=((RealNumberValue)d2.getUpperValue()).getValue();
            if (v1 != v2) {
              same=false;
              break;
            }
          }
        }
 else         if (!domain.getRanges().isEmpty()) {
          same=false;
        }
        if (paramters.getTopN() != tempParam.getNumOfShown()) {
          same=false;
        }
        if (!same) {
          isDirty=true;
          paramters.setBins(domain);
          paramters.setTopN(numOfShown);
        }
      }
      if (parameter.getFormEnum() == FormEnum.TextParametersForm) {
        TextParameter tempParam=(TextParameter)parameter;
        int numOfShown=paramters.getTopN();
        if (textParameters.isIgnoreCase() != tempParam.isIngoreCase() || numOfShown != tempParam.getNumOfShown()) {
          isDirty=true;
          textParameters.setIgnoreCase(tempParam.isIngoreCase());
          paramters.setTopN(tempParam.getNumOfShown());
        }
      }
      if (parameter.getFormEnum() == FormEnum.TextLengthForm) {
        TextLengthParameter tempParam=(TextLengthParameter)parameter;
        if (textParameters.isUseBlank() != tempParam.isUseBlank()) {
          isDirty=true;
          textParameters.setUseBlank(tempParam.isUseBlank());
        }
        if (textParameters.isUseNulls() != tempParam.isUseNull()) {
          isDirty=true;
          textParameters.setUseNulls(tempParam.isUseNull());
        }
      }
      if (parameter.getFormEnum() == FormEnum.DataThresholdsForm) {
        DataThresholdsParameter tempParam=(DataThresholdsParameter)parameter;
        String min=tempParam.getMinThreshold();
        String max=tempParam.getMaxThreshold();
        isDirty=indicatorUnit.getIndicator().getParameters() == null;
        if (!isDirty) {
          Domain validDomain=paramters.getDataValidDomain();
          isDirty=validDomain == null;
          if (!isDirty) {
            int size=validDomain.getRanges().size();
            isDirty=size != 1;
            if (!isDirty) {
              RangeRestriction rr=validDomain.getRanges().get(0);
              TextValue lv=(TextValue)rr.getLowerValue();
              TextValue uv=(TextValue)rr.getUpperValue();
              if (!min.equals(lv.getValue())) {
                isDirty=true;
              }
              if (!max.equals(uv.getValue())) {
                isDirty=true;
              }
            }
          }
        }
        if (isDirty) {
          IndicatorHelper.setDataThreshold(indicatorUnit.getIndicator(),min,max);
        }
      }
      if (parameter.getFormEnum() == FormEnum.IndicatorThresholdsForm) {
        IndicatorThresholdsParameter tempParam=(IndicatorThresholdsParameter)parameter;
        String min=tempParam.getMinThreshold();
        String max=tempParam.getMaxThreshold();
        isDirty=indicatorUnit.getIndicator().getParameters() == null;
        if (!isDirty) {
          Domain validDomain=paramters.getDataValidDomain();
          isDirty=validDomain == null;
          if (!isDirty) {
            int size=validDomain.getRanges().size();
            isDirty=size != 1;
            if (!isDirty) {
              RangeRestriction rr=validDomain.getRanges().get(0);
              TextValue lv=(TextValue)rr.getLowerValue();
              TextValue uv=(TextValue)rr.getUpperValue();
              if (!min.equals(lv.getValue())) {
                isDirty=true;
              }
              if (!max.equals(uv.getValue())) {
                isDirty=true;
              }
            }
          }
        }
        if (isDirty) {
          IndicatorHelper.setIndicatorThreshold(indicator.getParameters(),min,max);
        }
      }
      if (parameter.getFormEnum() == FormEnum.TimeSlicesForm) {
        DateParameters dateParameters=paramters.getDateParameters();
        if (dateParameters == null) {
          dateParameters=IndicatorsFactory.eINSTANCE.createDateParameters();
          paramters.setDateParameters(dateParameters);
          isDirty=true;
        }
        TimeSlicesParameter tempParam=(TimeSlicesParameter)parameter;
        DateGrain dateGrain=DateGrain.get(tempParam.getDataUnit());
        int numOfShown=paramters.getTopN();
        if (dateGrain.compareTo(dateParameters.getDateAggregationType()) != 0 || numOfShown != tempParam.getNumOfShown()) {
          isDirty=true;
          numOfShown=tempParam.getNumOfShown();
          dateParameters.setDateAggregationType(dateGrain);
          paramters.setTopN(numOfShown);
        }
      }
    }
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}","@Override public boolean performFinish(){
  try {
    IndicatorParameters paramters=indicatorUnit.getIndicator().getParameters();
    if (paramters == null) {
      isDirty=true;
      paramters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
      indicatorUnit.getIndicator().setParameters(paramters);
    }
    TextParameters textParameters=paramters.getTextParameter();
    for (    AbstractIndicatorParameter parameter : AbstractIndicatorForm.getParameters()) {
      if (parameter.getFormEnum() == FormEnum.BinsDesignerForm) {
        BinsDesignerParameter tempParam=(BinsDesignerParameter)parameter;
        int numOfBin=tempParam.getNumOfBins();
        int numOfShown=tempParam.getNumOfShown();
        double min=tempParam.getMinValue();
        double max=tempParam.getMaxValue();
        Domain domain=DomainHelper.createContiguousClosedBinsIntoDomain(""String_Node_Str"",numOfBin,min,max);
        Domain bins=paramters.getBins();
        boolean same=true;
        if (bins != null) {
          EList<RangeRestriction> ranges=bins.getRanges();
          EList<RangeRestriction> ranges2=domain.getRanges();
          if (ranges.size() != ranges2.size()) {
            same=false;
          }
          for (int i=0; i < ranges2.size() && same; i++) {
            RangeRestriction d2=ranges2.get(i);
            RangeRestriction d1=ranges.get(i);
            double v1=((RealNumberValue)d1.getLowerValue()).getValue();
            double v2=((RealNumberValue)d2.getLowerValue()).getValue();
            if (v1 != v2) {
              same=false;
              break;
            }
            v1=((RealNumberValue)d1.getUpperValue()).getValue();
            v2=((RealNumberValue)d2.getUpperValue()).getValue();
            if (v1 != v2) {
              same=false;
              break;
            }
          }
        }
 else         if (!domain.getRanges().isEmpty()) {
          same=false;
        }
        if (paramters.getTopN() != tempParam.getNumOfShown()) {
          same=false;
        }
        if (!same) {
          isDirty=true;
          paramters.setBins(domain);
          paramters.setTopN(numOfShown);
        }
      }
      if (parameter.getFormEnum() == FormEnum.TextParametersForm) {
        if (textParameters == null) {
          isDirty=true;
          textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
          paramters.setTextParameter(textParameters);
        }
        TextParameter tempParam=(TextParameter)parameter;
        int numOfShown=paramters.getTopN();
        if (textParameters.isIgnoreCase() != tempParam.isIngoreCase() || numOfShown != tempParam.getNumOfShown()) {
          isDirty=true;
          textParameters.setIgnoreCase(tempParam.isIngoreCase());
          paramters.setTopN(tempParam.getNumOfShown());
        }
      }
      if (parameter.getFormEnum() == FormEnum.TextLengthForm) {
        if (textParameters == null) {
          isDirty=true;
          textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
          paramters.setTextParameter(textParameters);
        }
        TextLengthParameter tempParam=(TextLengthParameter)parameter;
        if (textParameters.isUseBlank() != tempParam.isUseBlank()) {
          isDirty=true;
          textParameters.setUseBlank(tempParam.isUseBlank());
        }
        if (textParameters.isUseNulls() != tempParam.isUseNull()) {
          isDirty=true;
          textParameters.setUseNulls(tempParam.isUseNull());
        }
      }
      if (parameter.getFormEnum() == FormEnum.DataThresholdsForm) {
        DataThresholdsParameter tempParam=(DataThresholdsParameter)parameter;
        String min=tempParam.getMinThreshold();
        String max=tempParam.getMaxThreshold();
        isDirty=indicatorUnit.getIndicator().getParameters() == null;
        if (!isDirty) {
          Domain validDomain=paramters.getDataValidDomain();
          isDirty=validDomain == null;
          if (!isDirty) {
            int size=validDomain.getRanges().size();
            isDirty=size != 1;
            if (!isDirty) {
              RangeRestriction rr=validDomain.getRanges().get(0);
              TextValue lv=(TextValue)rr.getLowerValue();
              TextValue uv=(TextValue)rr.getUpperValue();
              if (!min.equals(lv.getValue())) {
                isDirty=true;
              }
              if (!max.equals(uv.getValue())) {
                isDirty=true;
              }
            }
          }
        }
        if (isDirty) {
          IndicatorHelper.setDataThreshold(indicatorUnit.getIndicator(),min,max);
        }
      }
      if (parameter.getFormEnum() == FormEnum.IndicatorThresholdsForm) {
        IndicatorThresholdsParameter tempParam=(IndicatorThresholdsParameter)parameter;
        String min=tempParam.getMinThreshold();
        String max=tempParam.getMaxThreshold();
        isDirty=indicatorUnit.getIndicator().getParameters() == null;
        if (!isDirty) {
          Domain validDomain=paramters.getDataValidDomain();
          isDirty=validDomain == null;
          if (!isDirty) {
            int size=validDomain.getRanges().size();
            isDirty=size != 1;
            if (!isDirty) {
              RangeRestriction rr=validDomain.getRanges().get(0);
              TextValue lv=(TextValue)rr.getLowerValue();
              TextValue uv=(TextValue)rr.getUpperValue();
              if (!min.equals(lv.getValue())) {
                isDirty=true;
              }
              if (!max.equals(uv.getValue())) {
                isDirty=true;
              }
            }
          }
        }
        if (isDirty) {
          IndicatorHelper.setIndicatorThreshold(indicator.getParameters(),min,max);
        }
      }
      if (parameter.getFormEnum() == FormEnum.TimeSlicesForm) {
        DateParameters dateParameters=paramters.getDateParameters();
        if (dateParameters == null) {
          dateParameters=IndicatorsFactory.eINSTANCE.createDateParameters();
          paramters.setDateParameters(dateParameters);
          isDirty=true;
        }
        TimeSlicesParameter tempParam=(TimeSlicesParameter)parameter;
        DateGrain dateGrain=DateGrain.get(tempParam.getDataUnit());
        int numOfShown=paramters.getTopN();
        if (dateGrain.compareTo(dateParameters.getDateAggregationType()) != 0 || numOfShown != tempParam.getNumOfShown()) {
          isDirty=true;
          numOfShown=tempParam.getNumOfShown();
          dateParameters.setDateAggregationType(dateGrain);
          paramters.setTopN(numOfShown);
        }
      }
    }
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}",0.2361589708247186
140544,"/** 
 * Method ""initDbmsFunctions"" initialize functions specific to DBMS. This is needed for ZQLParser which does not know all available functions.
 * @param dbms
 * @return the initialized map of functions with their number of parameters.
 */
private Map<String,Integer> initDbmsFunctions(String dbms){
  Map<String,Integer> functions=new HashMap<String,Integer>();
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  if (is(SQL)) {
    functions.put(""String_Node_Str"",1);
  }
  if (is(MYSQL)) {
    functions.put(""String_Node_Str"",1);
    for (    DateGrain grain : DateGrain.values()) {
      functions.put(grain.getName(),1);
    }
  }
  if (is(ORACLE)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
  }
  return functions;
}","/** 
 * Method ""initDbmsFunctions"" initialize functions specific to DBMS. This is needed for ZQLParser which does not know all available functions.
 * @param dbms
 * @return the initialized map of functions with their number of parameters.
 */
private Map<String,Integer> initDbmsFunctions(String dbms){
  Map<String,Integer> functions=new HashMap<String,Integer>();
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  functions.put(""String_Node_Str"",1);
  if (is(SQL)) {
    functions.put(""String_Node_Str"",1);
  }
  if (is(MYSQL)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    for (    DateGrain grain : DateGrain.values()) {
      functions.put(grain.getName(),1);
    }
  }
  if (is(ORACLE)) {
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
    functions.put(""String_Node_Str"",1);
    functions.put(""String_Node_Str"",2);
  }
  return functions;
}",0.9608993157380256
140545,"/** 
 * DOC scorreia Comment method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=quote(tdColumn.getName());
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  sqlGenericExpression=getSqlExpression(indicatorDefinition,language);
  if (sqlGenericExpression == null) {
    log.warn(""String_Node_Str"" + language + ""String_Node_Str""+ indicatorDefinition.getName());
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + dbms().getDefaultLanguage());
    }
    sqlGenericExpression=getSqlExpression(indicatorDefinition,dbms().getDefaultLanguage());
  }
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicator.eClass().getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition));
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges());
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank()) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
    }
  }
  String table=quote(ColumnHelper.getColumnSetFullName(tdColumn));
  String catalogName=getCatalogName(tdColumn);
  table=dbms().toQualifiedName(catalogName,null,table);
  String completedSqlString=null;
  if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        String genericSQL=sqlGenericExpression.getBody();
        int beginIndex=genericSQL.indexOf(dbms().orderBy());
        if (beginIndex != -1) {
          int lastIndex=genericSQL.lastIndexOf(dbms().desc());
          String orderByClause=genericSQL.substring(beginIndex,lastIndex);
          completedSqlString=completedSqlString + orderByClause + dbms().desc();
        }
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if ((dateAggregationType != null) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUniqueCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getDuplicateCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicator.eClass())) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + language + ""String_Node_Str""+ completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=instantiateSqlExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}","/** 
 * DOC scorreia Comment method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=quote(tdColumn.getName());
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  sqlGenericExpression=getSqlExpression(indicatorDefinition,language);
  if (sqlGenericExpression == null) {
    log.warn(""String_Node_Str"" + language + ""String_Node_Str""+ indicatorDefinition.getName());
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + dbms().getDefaultLanguage());
    }
    sqlGenericExpression=getSqlExpression(indicatorDefinition,dbms().getDefaultLanguage());
  }
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicator.eClass().getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition));
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges());
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank()) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
    }
  }
  String table=quote(ColumnHelper.getColumnSetFullName(tdColumn));
  String catalogName=getCatalogName(tdColumn);
  table=dbms().toQualifiedName(catalogName,null,table);
  String completedSqlString=null;
  if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        String genericSQL=sqlGenericExpression.getBody();
        int beginIndex=genericSQL.indexOf(dbms().orderBy());
        if (beginIndex != -1) {
          int lastIndex=genericSQL.lastIndexOf(dbms().desc());
          String orderByClause=genericSQL.substring(beginIndex,lastIndex);
          completedSqlString=completedSqlString + orderByClause + dbms().desc();
        }
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if ((dateAggregationType != null) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      completedSqlString=replaceVariablesLow(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUniqueCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getDuplicateCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicator.eClass())) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + language + ""String_Node_Str""+ completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=instantiateSqlExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}",0.982278129126416
140546,"@Override public void run(){
  CreatePatternWizard fileWizard=new CreatePatternWizard(folder,type);
  IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
  IHelpResource[] relatedTopics=context.getRelatedTopics();
  String href=relatedTopics[0].getHref();
switch (type) {
case SQL_LIKE:
    href=relatedTopics[1].getHref();
  break;
default :
break;
}
WizardDialog dialog=new CheatSheetWizardDialog(Display.getDefault().getActiveShell(),fileWizard,href);
fileWizard.setWindowTitle(getText());
if (WizardDialog.OK == dialog.open()) {
try {
folder.refreshLocal(IResource.DEPTH_INFINITE,null);
IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(fileWizard.getLocation());
PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new FileEditorInput(file),PluginConstant.PATTERN_EDITOR);
}
 catch (CoreException e) {
e.printStackTrace();
}
}
}","@Override public void run(){
  CreatePatternWizard fileWizard=new CreatePatternWizard(folder,type);
  IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
  IHelpResource[] relatedTopics=context.getRelatedTopics();
  String href=relatedTopics[0].getHref();
switch (type) {
case SQL_LIKE:
    href=relatedTopics[1].getHref();
  break;
default :
break;
}
WizardDialog dialog=new OpeningHelpWizardDialog(Display.getDefault().getActiveShell(),fileWizard,href);
fileWizard.setWindowTitle(getText());
if (WizardDialog.OK == dialog.open()) {
try {
folder.refreshLocal(IResource.DEPTH_INFINITE,null);
IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(fileWizard.getLocation());
PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new FileEditorInput(file),PluginConstant.PATTERN_EDITOR);
}
 catch (CoreException e) {
e.printStackTrace();
}
}
}",0.9882747068676716
140547,"@Override public void run(){
  ImportPatternsWizard wizard=new ImportPatternsWizard(folder);
  WizardDialog dialog=new CheatSheetWizardDialog(Display.getDefault().getActiveShell(),wizard,""String_Node_Str"");
  wizard.setWindowTitle(getText());
  if (WizardDialog.OK == dialog.open()) {
    try {
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  ImportPatternsWizard wizard=new ImportPatternsWizard(folder);
  WizardDialog dialog=new OpeningHelpWizardDialog(Display.getDefault().getActiveShell(),wizard,""String_Node_Str"");
  wizard.setWindowTitle(getText());
  if (WizardDialog.OK == dialog.open()) {
    try {
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}",0.9754959159859976
140548,"@Override protected WizardDialog getPredefinedDialog(){
  CreateNewAnalysisWizard wizard=new CreateNewAnalysisWizard(true,AnalysisType.MULTIPLE_COLUMN);
  wizard.setForcePreviousAndNextButtons(true);
  TimeSliceOptionPage page=new TimeSliceOptionPage();
  wizard.setOtherPages(new WizardPage[]{page});
  return new CheatSheetWizardDialog(null,wizard,FormEnum.TimeSlicesForm.getHelpHref(),page);
}","@Override protected WizardDialog getPredefinedDialog(){
  CreateNewAnalysisWizard wizard=new CreateNewAnalysisWizard(true,AnalysisType.MULTIPLE_COLUMN);
  wizard.setForcePreviousAndNextButtons(true);
  TimeSliceOptionPage page=new TimeSliceOptionPage();
  wizard.setOtherPages(new WizardPage[]{page});
  return new OpeningHelpWizardDialog(null,wizard,FormEnum.TimeSlicesForm.getHelpHref(),page);
}",0.9735182849936947
140549,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      IndicatorUnit indicatorUnit=(IndicatorUnit)((Label)e.getSource()).getData();
      IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicatorUnit);
      String href=FormEnum.getFirstFormHelpHref(indicatorUnit);
      CheatSheetWizardDialog optionDialog=new CheatSheetWizardDialog(null,wizard,href);
      optionDialog.create();
      if (Window.OK == optionDialog.open()) {
        setDirty(wizard.isDirty());
        createIndicatorParameters(indicatorItem,indicatorUnit);
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      IndicatorUnit indicatorUnit=(IndicatorUnit)((Label)e.getSource()).getData();
      IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicatorUnit);
      String href=FormEnum.getFirstFormHelpHref(indicatorUnit);
      OpeningHelpWizardDialog optionDialog=new OpeningHelpWizardDialog(null,wizard,href);
      optionDialog.create();
      if (Window.OK == optionDialog.open()) {
        setDirty(wizard.isDirty());
        createIndicatorParameters(indicatorItem,indicatorUnit);
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
}",0.9934660858743
140550,"@Override protected WizardDialog getPredefinedDialog(){
  String helpID=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
  CreateNewAnalysisWizard wizard=new CreateNewAnalysisWizard(true,AnalysisType.MULTIPLE_COLUMN);
  wizard.setForcePreviousAndNextButtons(true);
  TimeSliceOptionPage page=new TimeSliceOptionPage();
  wizard.setOtherPages(new WizardPage[]{page});
  Indicator indicator=(Indicator)IndicatorsFactory.eINSTANCE.create(IndicatorEnum.FrequencyIndicatorEnum.getIndicatorType());
  ColumnIndicator columnIndicator=new ColumnIndicator(getColumns()[0]);
  IndicatorUnit indicatorUnit=new IndicatorUnit(IndicatorEnum.FrequencyIndicatorEnum,indicator,columnIndicator);
  return HelpUtils.injectHelpForOnePage(getStandardAnalysisWizardDialog(),wizard,helpID,indicatorUnit,page);
}","@Override protected WizardDialog getPredefinedDialog(){
  CreateNewAnalysisWizard wizard=new CreateNewAnalysisWizard(true,AnalysisType.MULTIPLE_COLUMN);
  wizard.setForcePreviousAndNextButtons(true);
  TimeSliceOptionPage page=new TimeSliceOptionPage();
  wizard.setOtherPages(new WizardPage[]{page});
  return new CheatSheetWizardDialog(null,wizard,FormEnum.TimeSlicesForm.getHelpHref(),page);
}",0.5288702928870292
140551,"@Override public void expansionStateChanging(ExpansionEvent e){
  TreeItem theSuitedTreeItem=getTheSuitedTreeItem(getTreeViewer().getTree().getItems(),composite);
  if (e.getState()) {
    if (theSuitedTreeItem != null) {
      theSuitedTreeItem.setExpanded(true);
    }
  }
 else {
    if (theSuitedTreeItem != null) {
      theSuitedTreeItem.setExpanded(false);
    }
  }
  getTreeViewer().getTree().setSelection(theSuitedTreeItem);
}","@Override public void expansionStateChanging(ExpansionEvent e){
  TreeItem theSuitedTreeItem=getTheSuitedTreeItem(getTreeViewer().getTree().getItems(),composite);
  if (e.getState()) {
    if (theSuitedTreeItem != null) {
      theSuitedTreeItem.setExpanded(true);
    }
  }
 else {
    if (theSuitedTreeItem != null) {
      theSuitedTreeItem.setExpanded(false);
    }
  }
  getTreeViewer().getTree().layout();
  getTreeViewer().getTree().setSelection(theSuitedTreeItem);
}",0.9582417582417584
140552,"private void addExpandableCompositeListener(final ExpandableComposite composite){
  composite.addExpansionListener(new ExpansionAdapter(){
    @Override public void expansionStateChanging(    ExpansionEvent e){
      TreeItem theSuitedTreeItem=getTheSuitedTreeItem(getTreeViewer().getTree().getItems(),composite);
      if (e.getState()) {
        if (theSuitedTreeItem != null) {
          theSuitedTreeItem.setExpanded(true);
        }
      }
 else {
        if (theSuitedTreeItem != null) {
          theSuitedTreeItem.setExpanded(false);
        }
      }
      getTreeViewer().getTree().setSelection(theSuitedTreeItem);
    }
  }
);
}","private void addExpandableCompositeListener(final ExpandableComposite composite){
  composite.addExpansionListener(new ExpansionAdapter(){
    @Override public void expansionStateChanging(    ExpansionEvent e){
      TreeItem theSuitedTreeItem=getTheSuitedTreeItem(getTreeViewer().getTree().getItems(),composite);
      if (e.getState()) {
        if (theSuitedTreeItem != null) {
          theSuitedTreeItem.setExpanded(true);
        }
      }
 else {
        if (theSuitedTreeItem != null) {
          theSuitedTreeItem.setExpanded(false);
        }
      }
      getTreeViewer().getTree().layout();
      getTreeViewer().getTree().setSelection(theSuitedTreeItem);
    }
  }
);
}",0.9682299546142208
140553,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator);
      String helpID=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
      WizardDialog dialog=new WizardDialog(null,wizard);
      WizardDialog dialogWithHelp=HelpUtils.injectHelp(dialog,wizard,helpID,indicator);
      if (dialogWithHelp != null) {
        if (Window.OK == dialogWithHelp.open()) {
          setDirty(wizard.isDirty());
          createIndicatorParameters(indicatorItem,indicator);
        }
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      IndicatorUnit indicatorUnit=(IndicatorUnit)((Label)e.getSource()).getData();
      IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicatorUnit);
      String href=FormEnum.getFirstFormHelpHref(indicatorUnit);
      CheatSheetWizardDialog optionDialog=new CheatSheetWizardDialog(null,wizard,href);
      optionDialog.create();
      if (Window.OK == optionDialog.open()) {
        setDirty(wizard.isDirty());
        createIndicatorParameters(indicatorItem,indicatorUnit);
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
}",0.8899448191293685
140554,public abstract String getFormName();,"public String getFormName(){
  return getFormEnum().getFormName();
}",0.5333333333333333
140555,"/** 
 * Copy the files from srcPath to destination folder.
 * @param srcPath The path name in which to look. The path is always relative to the root of this bundle and maybegin with &quot;/&quot;. A path value of &quot;/&quot; indicates the root of this bundle.
 * @param srcPath
 * @param recurse If <code>true</code>, recurse into subdirectories(contains directories). Otherwise only returnentries from the specified path.
 * @param desFolder
 * @throws IOException
 * @throws CoreException
 */
@SuppressWarnings(""String_Node_Str"") private void copyFilesToFolder(String srcPath,boolean recurse,IFolder desFolder) throws IOException, CoreException {
  Enumeration paths=null;
  paths=CorePlugin.getDefault().getBundle().getEntryPaths(srcPath);
  if (paths == null) {
    return;
  }
  while (paths.hasMoreElements()) {
    String nextElement=(String)paths.nextElement();
    String currentPath=""String_Node_Str"" + nextElement;
    URL resourceURL=CorePlugin.getDefault().getBundle().getEntry(currentPath);
    URL fileURL=null;
    File file=null;
    try {
      fileURL=FileLocator.toFileURL(resourceURL);
      file=new File(fileURL.getFile());
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (file.isDirectory() && recurse) {
      if (file.getName().startsWith(""String_Node_Str"")) {
        continue;
      }
      IFolder folder=desFolder.getFolder(file.getName());
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      copyFilesToFolder(currentPath,recurse,folder);
      continue;
    }
    String fileName=new Path(fileURL.getPath()).lastSegment();
    InputStream openStream=null;
    openStream=fileURL.openStream();
    copyFileToFolder(openStream,fileName,desFolder);
  }
}","/** 
 * Copy the files from srcPath to destination folder.
 * @param srcPath The path name in which to look. The path is always relative to the root of this bundle and maybegin with &quot;/&quot;. A path value of &quot;/&quot; indicates the root of this bundle.
 * @param srcPath
 * @param recurse If <code>true</code>, recurse into subdirectories(contains directories). Otherwise only returnentries from the specified path.
 * @param desFolder
 * @throws IOException
 * @throws CoreException
 */
@SuppressWarnings(""String_Node_Str"") private void copyFilesToFolder(String srcPath,boolean recurse,IFolder desFolder) throws IOException, CoreException {
  Enumeration paths=null;
  paths=CorePlugin.getDefault().getBundle().getEntryPaths(srcPath);
  if (paths == null) {
    return;
  }
  while (paths.hasMoreElements()) {
    String nextElement=(String)paths.nextElement();
    String currentPath=""String_Node_Str"" + nextElement;
    URL resourceURL=CorePlugin.getDefault().getBundle().getEntry(currentPath);
    URL fileURL=null;
    File file=null;
    try {
      fileURL=FileLocator.toFileURL(resourceURL);
      file=new File(fileURL.getFile());
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (file.isDirectory() && recurse) {
      if (file.getName().startsWith(""String_Node_Str"")) {
        continue;
      }
      IFolder folder=desFolder.getFolder(file.getName());
      if (!folder.exists()) {
        folder.create(true,true,null);
      }
      copyFilesToFolder(currentPath,recurse,folder);
      continue;
    }
    String fileName=new Path(fileURL.getPath()).lastSegment();
    InputStream openStream=null;
    openStream=fileURL.openStream();
    copyFileToFolder(openStream,fileName,desFolder);
  }
}",0.9979925437338688
140556,"private IFolder createNewFoler(IProject project,String folderName) throws CoreException {
  IFolder desFolder=project.getFolder(folderName);
  if (!desFolder.exists()) {
    desFolder.create(false,true,null);
  }
  ResourceAttributes resAttr=new ResourceAttributes();
  resAttr.setReadOnly(true);
  desFolder.setResourceAttributes(resAttr);
  return desFolder;
}","private IFolder createNewFoler(IProject project,String folderName) throws CoreException {
  IFolder desFolder=project.getFolder(folderName);
  if (!desFolder.exists()) {
    desFolder.create(false,true,null);
  }
  desFolder.setPersistentProperty(FOLDER_FIRM_KEY,FOLDER_FIRM_PROPERTY);
  return desFolder;
}",0.6576980568011959
140557,"/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof IFolder) {
    currentSelection=(IFolder)obj;
    if (currentSelection.getResourceAttributes().isReadOnly()) {
      return;
    }
  }
  DeleteFolderAction createSubFolderAction=new DeleteFolderAction(currentSelection);
  menu.add(createSubFolderAction);
}","/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
public void fillContextMenu(IMenuManager menu){
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof IFolder) {
    currentSelection=(IFolder)obj;
    try {
      if (currentSelection.getPersistentProperty(DQStructureManager.FOLDER_FIRM_KEY) != null) {
        return;
      }
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  DeleteFolderAction createSubFolderAction=new DeleteFolderAction(currentSelection);
  menu.add(createSubFolderAction);
}",0.5656565656565656
140558,"public AnalysisColumnTreeViewer(Composite parent,ColumnMasterDetailsPage masterPage){
  this(parent);
  this.masterPage=masterPage;
  this.setElements(masterPage.getCurrentColumnIndicators());
  this.addTreeListener(this.tree);
  this.setDirty(false);
}","public AnalysisColumnTreeViewer(Composite parent,ColumnMasterDetailsPage masterPage){
  this(parent);
  this.masterPage=masterPage;
  this.setElements(masterPage.getCurrentColumnIndicators());
  this.setDirty(false);
}",0.9256900212314224
140559,"/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new Tree(parent,SWT.MULTI);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(false);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(80);
  TreeColumn column3=new TreeColumn(newTree,SWT.CENTER);
  column3.setWidth(120);
  TreeColumn column4=new TreeColumn(newTree,SWT.CENTER);
  column4.setWidth(120);
  parent.layout();
  Menu menu=new Menu(newTree);
  MenuItem deleteMenuItem=new MenuItem(menu,SWT.CASCADE);
  deleteMenuItem.setText(""String_Node_Str"");
  deleteMenuItem.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  deleteMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      removeSelectedElements(newTree);
    }
  }
);
  newTree.setMenu(menu);
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
    }
  }
;
  parent.setData(AbstractMetadataFormPage.ACTION_HANDLER,actionHandler);
  ColumnViewerDND.installDND(newTree);
  return newTree;
}","/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new Tree(parent,SWT.MULTI);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(false);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(80);
  TreeColumn column3=new TreeColumn(newTree,SWT.CENTER);
  column3.setWidth(120);
  TreeColumn column4=new TreeColumn(newTree,SWT.CENTER);
  column4.setWidth(120);
  parent.layout();
  Menu menu=new Menu(newTree);
  MenuItem deleteMenuItem=new MenuItem(menu,SWT.CASCADE);
  deleteMenuItem.setText(""String_Node_Str"");
  deleteMenuItem.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  deleteMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      removeSelectedElements(newTree);
    }
  }
);
  newTree.setMenu(menu);
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
    }
  }
;
  parent.setData(AbstractMetadataFormPage.ACTION_HANDLER,actionHandler);
  ColumnViewerDND.installDND(newTree);
  this.addTreeListener(newTree);
  return newTree;
}",0.9875986471251408
140560,"private ExpandableComposite getTheSuitedComposite(SelectionEvent e){
  Object obj=e.item.getData(COLUMN_INDICATOR_KEY);
  if (obj instanceof ColumnIndicator) {
    ColumnIndicator columnIndicator=(ColumnIndicator)obj;
    for (    Composite comp : masterPage.getPreviewChartCompsites()) {
      if (comp.getData() == columnIndicator) {
        return (ExpandableComposite)comp;
      }
    }
  }
  return null;
}","private ExpandableComposite getTheSuitedComposite(SelectionEvent e){
  Composite[] previewChartCompsites=masterPage.getPreviewChartCompsites();
  if (previewChartCompsites == null) {
    return null;
  }
  Object obj=e.item.getData(COLUMN_INDICATOR_KEY);
  if (obj instanceof ColumnIndicator) {
    ColumnIndicator columnIndicator=(ColumnIndicator)obj;
    for (    Composite comp : previewChartCompsites) {
      if (comp.getData() == columnIndicator) {
        return (ExpandableComposite)comp;
      }
    }
  }
  return null;
}",0.7571580063626723
140561,"public Color getForeground(Object element,int columnIndex){
  ChartDataEntity entity=null;
  if (element instanceof PatternChartDataEntity) {
    entity=(PatternChartDataEntity)element;
  }
 else {
    entity=(ChartDataEntity)element;
  }
switch (columnIndex) {
case 1:
    String min=IndicatorHelper.getIndicatorThreshold(entity.getIndicator())[0];
  String max=IndicatorHelper.getIndicatorThreshold(entity.getIndicator())[1];
String currentValue=getColumnText(entity,columnIndex);
if (min != null && max != null && currentValue != null) {
if (Double.valueOf(max) < Double.valueOf(currentValue) || Double.valueOf(currentValue) < Double.valueOf(min)) {
  return Display.getDefault().getSystemColor(SWT.COLOR_RED);
}
break;
}
default :
}
return null;
}","public Color getForeground(Object element,int columnIndex){
  ChartDataEntity entity=null;
  if (element instanceof PatternChartDataEntity) {
    entity=(PatternChartDataEntity)element;
  }
 else {
    entity=(ChartDataEntity)element;
  }
  String[] indicatorThreshold=IndicatorHelper.getIndicatorThreshold(entity.getIndicator());
  if (indicatorThreshold != null) {
switch (columnIndex) {
case 1:
      String min=indicatorThreshold[0];
    String max=indicatorThreshold[1];
  String currentValue=getColumnText(entity,columnIndex);
if (min != null && max != null && currentValue != null) {
  if (Double.valueOf(max) < Double.valueOf(currentValue) || Double.valueOf(currentValue) < Double.valueOf(min)) {
    return Display.getDefault().getSystemColor(SWT.COLOR_RED);
  }
  break;
}
default :
}
}
return null;
}",0.8348271446862996
140562,"/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  TreeItem[] items=indicatorItem.getItems();
  if (indicatorItem != null && !indicatorItem.isDisposed()) {
    for (    TreeItem treeItem : items) {
      if (DATA_PARAM.equals(treeItem.getData(DATA_PARAM))) {
        treeItem.dispose();
      }
    }
  }
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  TreeItem iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + parameters.getTopN());
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    tParamItem.setData(DATA_PARAM,DATA_PARAM);
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseBlank());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isIgnoreCase());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseNulls());
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    tParamItem.setData(DATA_PARAM,DATA_PARAM);
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + dParameters.getDateAggregationType().getName() + ""String_Node_Str"");
  }
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getDataValidDomain() != null));
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getIndicatorValidDomain() != null));
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getBins() != null));
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
}","/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  TreeItem[] items=indicatorItem.getItems();
  if (indicatorItem != null && !indicatorItem.isDisposed()) {
    for (    TreeItem treeItem : items) {
      if (DATA_PARAM.equals(treeItem.getData(DATA_PARAM))) {
        treeItem.dispose();
      }
    }
  }
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  TreeItem iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + parameters.getTopN());
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
  iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"");
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + tParameter.isUseBlank());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + tParameter.isIgnoreCase());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + tParameter.isUseNulls());
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    iParamItem=new TreeItem(indicatorItem,SWT.NONE);
    iParamItem.setText(0,""String_Node_Str"");
    iParamItem.setData(DATA_PARAM,DATA_PARAM);
    iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
    TreeItem subParamItem=new TreeItem(iParamItem,SWT.NONE);
    subParamItem.setText(""String_Node_Str"" + dParameters.getDateAggregationType().getName() + ""String_Node_Str"");
    subParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  }
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getDataValidDomain() != null));
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
  iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getIndicatorValidDomain() != null));
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
  iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getBins() != null));
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
  iParamItem.setImage(0,ImageLib.getImage(ImageLib.OPTION));
}",0.8484386900228484
140563,"/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  TreeItem[] items=indicatorItem.getItems();
  if (indicatorItem != null && !indicatorItem.isDisposed()) {
    for (    TreeItem treeItem : items) {
      treeItem.dispose();
    }
  }
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  TreeItem iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + parameters.getTopN());
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseBlank());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isIgnoreCase());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseNulls());
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + dParameters.getDateAggregationType().getName() + ""String_Node_Str"");
  }
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getDataValidDomain() != null));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getIndicatorValidDomain() != null));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getBins() != null));
}","/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  TreeItem[] items=indicatorItem.getItems();
  if (indicatorItem != null && !indicatorItem.isDisposed()) {
    for (    TreeItem treeItem : items) {
      if (DATA_PARAM.equals(treeItem.getData(DATA_PARAM))) {
        treeItem.dispose();
      }
    }
  }
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  TreeItem iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + parameters.getTopN());
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    tParamItem.setData(DATA_PARAM,DATA_PARAM);
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseBlank());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isIgnoreCase());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseNulls());
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    tParamItem.setData(DATA_PARAM,DATA_PARAM);
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + dParameters.getDateAggregationType().getName() + ""String_Node_Str"");
  }
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getDataValidDomain() != null));
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getIndicatorValidDomain() != null));
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getBins() != null));
  iParamItem.setData(DATA_PARAM,DATA_PARAM);
}",0.9186896064105584
140564,"/** 
 * DOC qzhang Comment method ""setTdDataProvider"".
 */
private void setTdDataProvider(){
  ConnectionAnalysisParameter connectionParams=(ConnectionAnalysisParameter)AbstractAnalysisWizardPage.getConnectionParams();
  if (connectionParams.getTdDataProvider() == null) {
    TypedReturnCode<TdDataProvider> tdProvider=PrvResourceFileHelper.getInstance().getTdProvider(file);
    TdDataProvider dataProvider=tdProvider.getObject();
    connectionParams.setTdDataProvider(dataProvider);
  }
}","/** 
 * DOC qzhang Comment method ""setTdDataProvider"".
 */
private void setTdDataProvider(){
  ConnectionAnalysisParameter connectionParams=(ConnectionAnalysisParameter)AbstractAnalysisWizardPage.getConnectionParams();
  file=(IFile)getSelection().getFirstElement();
  TypedReturnCode<TdDataProvider> tdProvider=PrvResourceFileHelper.getInstance().getTdProvider(file);
  TdDataProvider dataProvider=tdProvider.getObject();
  connectionParams.setTdDataProvider(dataProvider);
}",0.8925619834710744
140565,"/** 
 * DOC qzhang Comment method ""getAllPatternNames"".
 * @return
 * @throws CoreException
 */
private Set<String> getAllPatternNames(){
  Set<String> list=new HashSet<String>();
  try {
    for (    IResource resource : folder.members()) {
      if (resource instanceof IFile) {
        Pattern fr=PatternResourceFileHelper.getInstance().findPattern((IFile)resource);
        list.add(fr.getName());
      }
    }
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  return list;
}","/** 
 * DOC qzhang Comment method ""getAllPatternNames"".
 * @return
 * @throws CoreException
 */
private Set<String> getAllPatternNames(){
  Set<String> list=new HashSet<String>();
  try {
    for (    IResource resource : folder.members()) {
      if (resource instanceof IFile) {
        Pattern fr=PatternResourceFileHelper.getInstance().findPattern((IFile)resource);
        if (fr != null) {
          list.add(fr.getName());
        }
      }
    }
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  return list;
}",0.9629629629629628
140566,"private void createChildrenNode(Tree tree,TreeItemContainer parentItem,TreeColumn[] treeColumns,IIndicatorNode[] branchNodes){
  for (int i=0; i < branchNodes.length; i++) {
    final TreeItemContainer treeItem;
    if (parentItem == null) {
      treeItem=new TreeItemContainer(tree,SWT.NONE,treeColumns.length);
    }
 else {
      treeItem=new TreeItemContainer(parentItem,SWT.NONE,treeColumns.length);
    }
    TreeEditor editor;
    Button checkButton;
    Button rowCheckButton=null;
    Button commonCheckButton;
    List<Button> rowButtonList=new ArrayList<Button>();
    for (int j=0; j < treeColumns.length; j++) {
      if (j == 0) {
        treeItem.setText(0,branchNodes[i].getLabel());
        if (branchNodes[i].getIndicatorEnum() != null) {
          treeItem.setData(INDICATORITEM,branchNodes[i]);
        }
        continue;
      }
 else       if (j == 1 && treeColumns.length > 2) {
        editor=new TreeEditor(tree);
        rowCheckButton=new Button(tree,SWT.CHECK);
        rowCheckButton.addSelectionListener(new SelectionAdapter(){
          @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(          SelectionEvent e){
            Button currentRowBtn=(Button)e.getSource();
            if (currentRowBtn.getSelection()) {
              for (              Button btn : (List<Button>)currentRowBtn.getData(ROWINDICATORFLAG)) {
                ColumnIndicator columnIndicator=(ColumnIndicator)btn.getData(COLUMNINDICATORFLAG);
                IIndicatorNode node=(IIndicatorNode)btn.getData();
                if (ColumnIndicatorRule.match(node,columnIndicator)) {
                  btn.setSelection(true);
                  columnIndicator.addTempIndicatorEnum(node.getIndicatorEnum());
                }
              }
            }
 else {
              for (              Button btn : (List<Button>)currentRowBtn.getData(ROWINDICATORFLAG)) {
                ColumnIndicator columnIndicator=(ColumnIndicator)btn.getData(COLUMNINDICATORFLAG);
                IIndicatorNode node=(IIndicatorNode)btn.getData();
                btn.setSelection(false);
                columnIndicator.removeTempIndicatorEnum(node.getIndicatorEnum());
              }
            }
          }
        }
);
        commonCheckButton=rowCheckButton;
      }
 else {
        editor=new TreeEditor(tree);
        checkButton=new Button(tree,SWT.CHECK);
        checkButton.setData(branchNodes[i]);
        if (((ColumnIndicator)treeColumns[j].getData()).contains(branchNodes[i].getIndicatorEnum())) {
          checkButton.setSelection(true);
        }
        final ColumnIndicator currentColumnIndicator=(ColumnIndicator)treeColumns[j].getData();
        checkButton.setEnabled(ColumnIndicatorRule.match(branchNodes[i],currentColumnIndicator));
        checkButton.addSelectionListener(new ButtonSelectionListener(j,treeItem,branchNodes[i].getIndicatorEnum(),currentColumnIndicator));
        checkButton.setData(COLUMNINDICATORFLAG,currentColumnIndicator);
        commonCheckButton=checkButton;
        rowButtonList.add(checkButton);
      }
      commonCheckButton.pack();
      editor.minimumWidth=commonCheckButton.getSize().x;
      editor.horizontalAlignment=SWT.CENTER;
      editor.setEditor(commonCheckButton,treeItem,j);
      treeItem.setButton(j,commonCheckButton);
    }
    if (rowCheckButton != null) {
      rowCheckButton.setData(ROWINDICATORFLAG,rowButtonList);
    }
    if (branchNodes[i].hasChildren()) {
      createChildrenNode(tree,treeItem,treeColumns,branchNodes[i].getChildren());
    }
    treeItem.setExpanded(true);
  }
}","private void createChildrenNode(Tree tree,TreeItemContainer parentItem,TreeColumn[] treeColumns,IIndicatorNode[] branchNodes){
  for (int i=0; i < branchNodes.length; i++) {
    final TreeItemContainer treeItem;
    if (parentItem == null) {
      treeItem=new TreeItemContainer(tree,SWT.NONE,treeColumns.length);
    }
 else {
      treeItem=new TreeItemContainer(parentItem,SWT.NONE,treeColumns.length);
    }
    TreeEditor editor;
    Button checkButton;
    Button rowCheckButton=null;
    Button commonCheckButton;
    List<Button> rowButtonList=new ArrayList<Button>();
    for (int j=0; j < treeColumns.length; j++) {
      if (j == 0) {
        treeItem.setText(0,branchNodes[i].getLabel());
        if (branchNodes[i].getIndicatorEnum() != null) {
          treeItem.setData(INDICATORITEM,branchNodes[i]);
        }
        continue;
      }
 else       if (j == 1 && treeColumns.length > 2) {
        editor=new TreeEditor(tree);
        rowCheckButton=new Button(tree,SWT.CHECK);
        rowCheckButton.addSelectionListener(new RowSelectButtonListener(j,treeItem,branchNodes[i].getIndicatorEnum(),null));
        commonCheckButton=rowCheckButton;
      }
 else {
        editor=new TreeEditor(tree);
        checkButton=new Button(tree,SWT.CHECK);
        checkButton.setData(branchNodes[i]);
        if (((ColumnIndicator)treeColumns[j].getData()).contains(branchNodes[i].getIndicatorEnum())) {
          checkButton.setSelection(true);
        }
        final ColumnIndicator currentColumnIndicator=(ColumnIndicator)treeColumns[j].getData();
        checkButton.setEnabled(ColumnIndicatorRule.match(branchNodes[i],currentColumnIndicator));
        checkButton.addSelectionListener(new ButtonSelectionListener(j,treeItem,branchNodes[i].getIndicatorEnum(),currentColumnIndicator));
        checkButton.setData(COLUMNINDICATORFLAG,currentColumnIndicator);
        commonCheckButton=checkButton;
        rowButtonList.add(checkButton);
      }
      commonCheckButton.pack();
      editor.minimumWidth=commonCheckButton.getSize().x;
      editor.horizontalAlignment=SWT.CENTER;
      editor.setEditor(commonCheckButton,treeItem,j);
      treeItem.setButton(j,commonCheckButton);
    }
    if (rowCheckButton != null) {
      boolean allChecked=true;
      rowCheckButton.setData(ROWINDICATORFLAG,rowButtonList);
      for (      Button btn : rowButtonList) {
        if (!btn.getSelection()) {
          allChecked=false;
        }
      }
      rowCheckButton.setSelection(allChecked);
    }
    if (branchNodes[i].hasChildren()) {
      createChildrenNode(tree,treeItem,treeColumns,branchNodes[i].getChildren());
    }
    treeItem.setExpanded(true);
  }
}",0.7663043478260869
140567,"/** 
 * handle the parent button selection..
 * @param selection
 */
private void processParentSelection(TreeItemContainer treeItem,boolean selection){
  TreeItem parentItem=treeItem.getParentItem();
  if (parentItem != null && selection) {
    boolean allSelection=true;
    for (    TreeItem item : parentItem.getItems()) {
      allSelection=((TreeItemContainer)item).getButton(index).getSelection();
      if (!allSelection) {
        return;
      }
    }
    Button parentItemButton=((TreeItemContainer)parentItem).getButton(index);
    parentItemButton.setSelection(selection);
    IndicatorEnum enumData=((IIndicatorNode)parentItemButton.getData()).getIndicatorEnum();
    if (enumData != null) {
      currentColumnIndicator.addTempIndicatorEnum(enumData);
    }
    processParentSelection((TreeItemContainer)parentItem,selection);
  }
 else   if (parentItem != null && !selection) {
    Button parentItemButton=((TreeItemContainer)parentItem).getButton(index);
    parentItemButton.setSelection(selection);
    currentColumnIndicator.removeTempIndicatorEnum(((IIndicatorNode)parentItemButton.getData()).getIndicatorEnum());
    processParentSelection((TreeItemContainer)parentItem,selection);
  }
}","/** 
 * handle the parent button selection..
 * @param selection
 */
protected void processParentSelection(TreeItemContainer treeItem,boolean selection){
  TreeItem parentItem=treeItem.getParentItem();
  if (parentItem != null && selection) {
    boolean allSelection=true;
    for (    TreeItem item : parentItem.getItems()) {
      allSelection=((TreeItemContainer)item).getButton(index).getSelection();
      if (!allSelection) {
        return;
      }
    }
    Button parentItemButton=((TreeItemContainer)parentItem).getButton(index);
    parentItemButton.setSelection(selection);
    IndicatorEnum enumData=((IIndicatorNode)parentItemButton.getData()).getIndicatorEnum();
    if (enumData != null) {
      currentColumnIndicator.addTempIndicatorEnum(enumData);
    }
    processParentSelection((TreeItemContainer)parentItem,selection);
  }
 else   if (parentItem != null && !selection) {
    Button parentItemButton=((TreeItemContainer)parentItem).getButton(index);
    parentItemButton.setSelection(selection);
    currentColumnIndicator.removeTempIndicatorEnum(((IIndicatorNode)parentItemButton.getData()).getIndicatorEnum());
    processParentSelection((TreeItemContainer)parentItem,selection);
  }
}",0.9950372208436724
140568,"@SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(SelectionEvent e){
  Button currentRowBtn=(Button)e.getSource();
  if (currentRowBtn.getSelection()) {
    for (    Button btn : (List<Button>)currentRowBtn.getData(ROWINDICATORFLAG)) {
      ColumnIndicator columnIndicator=(ColumnIndicator)btn.getData(COLUMNINDICATORFLAG);
      IIndicatorNode node=(IIndicatorNode)btn.getData();
      if (ColumnIndicatorRule.match(node,columnIndicator)) {
        btn.setSelection(true);
        columnIndicator.addTempIndicatorEnum(node.getIndicatorEnum());
      }
    }
  }
 else {
    for (    Button btn : (List<Button>)currentRowBtn.getData(ROWINDICATORFLAG)) {
      ColumnIndicator columnIndicator=(ColumnIndicator)btn.getData(COLUMNINDICATORFLAG);
      IIndicatorNode node=(IIndicatorNode)btn.getData();
      btn.setSelection(false);
      columnIndicator.removeTempIndicatorEnum(node.getIndicatorEnum());
    }
  }
}","public void widgetSelected(SelectionEvent e){
  IIndicatorNode indicatorNode=((IIndicatorNode)e.item.getData(INDICATORITEM));
  if (indicatorNode == null) {
    purposeLabel.setText(PURPOSE + ((TreeItem)e.item).getText());
    descriptionLabel.setText(DESCRIPTION + ((TreeItem)e.item).getText());
    return;
  }
  Indicator indicator=indicatorNode.getIndicatorInstance();
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  purposeLabel.setText(PURPOSE + TaggedValueHelper.getPurpose(indicatorDefinition));
  String description=DESCRIPTION + TaggedValueHelper.getDescription(indicatorDefinition);
  description=splitLongString(description);
  descriptionLabel.setText(description);
}",0.0835857056329497
140569,"/** 
 * handle the children button selection.
 */
private void processChildrenSelection(final TreeItemContainer treeItem,final int index,boolean selection){
  Button itemButton;
  for (  TreeItem childItem : treeItem.getItems()) {
    itemButton=((TreeItemContainer)childItem).getButton(index);
    if (itemButton.isEnabled()) {
      itemButton.setSelection(selection);
    }
 else {
      return;
    }
    if (selection) {
      currentColumnIndicator.addTempIndicatorEnum(((IIndicatorNode)itemButton.getData()).getIndicatorEnum());
    }
 else {
      currentColumnIndicator.removeTempIndicatorEnum(((IIndicatorNode)itemButton.getData()).getIndicatorEnum());
    }
    processChildrenSelection((TreeItemContainer)childItem,index,selection);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected void processChildrenSelection(TreeItemContainer treeItem,int index,boolean selection){
  Button itemButton;
  for (  TreeItem childItem : treeItem.getItems()) {
    TreeItemContainer childItemContainer=(TreeItemContainer)childItem;
    itemButton=childItemContainer.getButton(index);
    if (itemButton.isEnabled()) {
      itemButton.setSelection(selection);
    }
 else {
      return;
    }
    processRowButtonSelect(selection,(List<Button>)itemButton.getData(ROWINDICATORFLAG));
    processChildrenSelection((TreeItemContainer)childItem,index,selection);
  }
}",0.6122448979591837
140570,"private ButtonSelectionListener(int index,TreeItemContainer treeItemContainer,IndicatorEnum indicatorEnum,ColumnIndicator currentColumnIndicator){
  this.index=index;
  this.treeItemContainer=treeItemContainer;
  this.indicatorEnum=indicatorEnum;
  this.currentColumnIndicator=currentColumnIndicator;
}","protected ButtonSelectionListener(int index,TreeItemContainer treeItemContainer,IndicatorEnum indicatorEnum,ColumnIndicator currentColumnIndicator){
  this.index=index;
  this.treeItemContainer=treeItemContainer;
  this.indicatorEnum=indicatorEnum;
  this.currentColumnIndicator=currentColumnIndicator;
}",0.9801980198019802
140571,"public Map<String,List<IndicatorUnit>> getIndicatorComposite(){
  List<IndicatorUnit> simpleList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> textList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> frequencyList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> summaryList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> patternList=new ArrayList<IndicatorUnit>();
  for (  IndicatorUnit one : indicatorUnits) {
switch (one.getType()) {
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
case BlankCountIndicatorEnum:
      simpleList.add(one);
    break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
  textList.add(one);
break;
case FrequencyIndicatorEnum:
frequencyList.add(one);
break;
case MeanIndicatorEnum:
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
case MedianIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
summaryList.add(one);
break;
case RegexpMatchingIndicatorEnum:
patternList.add(one);
break;
default :
}
}
separatedMap.put(SIMPLE_STATISTICS,simpleList);
separatedMap.put(TEXT_STATISTICS,textList);
separatedMap.put(FREQUENCE_STATISTICS,frequencyList);
separatedMap.put(SUMMARY_STATISTICS,summaryList);
separatedMap.put(PATTERN_MATCHING,patternList);
return separatedMap;
}","public Map<String,List<IndicatorUnit>> getIndicatorComposite(){
  List<IndicatorUnit> simpleList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> textList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> frequencyList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> summaryList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> patternList=new ArrayList<IndicatorUnit>();
  List<IndicatorUnit> sqlPatternList=new ArrayList<IndicatorUnit>();
  for (  IndicatorUnit one : indicatorUnits) {
switch (one.getType()) {
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
case BlankCountIndicatorEnum:
      simpleList.add(one);
    break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
  textList.add(one);
break;
case FrequencyIndicatorEnum:
frequencyList.add(one);
break;
case MeanIndicatorEnum:
case MinValueIndicatorEnum:
case MaxValueIndicatorEnum:
case MedianIndicatorEnum:
case LowerQuartileIndicatorEnum:
case UpperQuartileIndicatorEnum:
summaryList.add(one);
break;
case RegexpMatchingIndicatorEnum:
patternList.add(one);
break;
case SqlPatternMatchingIndicatorEnum:
sqlPatternList.add(one);
break;
default :
}
}
separatedMap.put(SIMPLE_STATISTICS,simpleList);
separatedMap.put(TEXT_STATISTICS,textList);
separatedMap.put(FREQUENCE_STATISTICS,frequencyList);
separatedMap.put(SUMMARY_STATISTICS,summaryList);
separatedMap.put(PATTERN_MATCHING,patternList);
separatedMap.put(SQL_PATTERN_MATCHING,sqlPatternList);
return separatedMap;
}",0.9354194407456724
140572,"public static List<ChartWithData> createChart(ColumnIndicator column,boolean isCreate){
  CompositeIndicator compositeIndicator=new CompositeIndicator(column);
  Map<String,List<IndicatorUnit>> separatedMap=compositeIndicator.getIndicatorComposite();
  List<IndicatorUnit> simpleUnitList=separatedMap.get(CompositeIndicator.SIMPLE_STATISTICS);
  List<IndicatorUnit> textUnitList=separatedMap.get(CompositeIndicator.TEXT_STATISTICS);
  List<IndicatorUnit> frequencyUnitList=separatedMap.get(CompositeIndicator.FREQUENCE_STATISTICS);
  List<IndicatorUnit> summaryUnitList=separatedMap.get(CompositeIndicator.SUMMARY_STATISTICS);
  List<IndicatorUnit> patternUnitList=separatedMap.get(CompositeIndicator.PATTERN_MATCHING);
  List<ChartWithData> returnFiles=new ArrayList<ChartWithData>();
  if (!simpleUnitList.isEmpty()) {
    CategoryDataset dataset=createSimpleDataset(simpleUnitList,isCreate);
    ImageDescriptor imageDescriptor=create3DBarChart(CompositeIndicator.SIMPLE_STATISTICS,dataset,true);
    ChartWithData chart=new ChartWithData(CompositeIndicator.SIMPLE_STATISTICS,imageDescriptor,getDataEnityFromUnits(simpleUnitList));
    returnFiles.add(chart);
  }
  if (!textUnitList.isEmpty()) {
    CategoryDataset dataset=createTextedDataset(textUnitList,isCreate);
    ImageDescriptor imageDescriptor=create3DBarChart(CompositeIndicator.TEXT_STATISTICS,dataset,true);
    ChartWithData chart=new ChartWithData(CompositeIndicator.TEXT_STATISTICS,imageDescriptor,getDataEnityFromUnits(textUnitList));
    returnFiles.add(chart);
  }
  if (!frequencyUnitList.isEmpty()) {
    CategoryDataset dataset=createFrequenceDataset(frequencyUnitList,isCreate);
    ImageDescriptor imageDescriptor=createBarChart(CompositeIndicator.FREQUENCE_STATISTICS,dataset);
    ChartWithData chart=new ChartWithData(CompositeIndicator.FREQUENCE_STATISTICS,imageDescriptor,getDataEnityFromUnits(frequencyUnitList));
    returnFiles.add(chart);
  }
  if (!summaryUnitList.isEmpty()) {
    CategoryDataset dataset=createSummaryDataset(summaryUnitList,isCreate);
    if (dataset instanceof BoxAndWhiskerCategoryDataset) {
      ImageDescriptor imageDescriptor=createBoxAndWhiskerChart(CompositeIndicator.SUMMARY_STATISTICS,(BoxAndWhiskerCategoryDataset)dataset);
      ChartWithData chart=new ChartWithData(CompositeIndicator.SUMMARY_STATISTICS,imageDescriptor,getDataEnityFromUnits(summaryUnitList));
      returnFiles.add(chart);
    }
 else {
      ImageDescriptor imageDescriptor=create3DBarChart(CompositeIndicator.SUMMARY_STATISTICS,dataset,false);
      ChartWithData chart=new ChartWithData(CompositeIndicator.SUMMARY_STATISTICS,imageDescriptor,getDataEnityFromUnits(summaryUnitList));
      returnFiles.add(chart);
    }
  }
  if (!patternUnitList.isEmpty()) {
    CategoryDataset dataset=createPatternMatchDataset(patternUnitList,isCreate);
    ImageDescriptor imageDescriptor=createStacked3DBarChart(CompositeIndicator.PATTERN_MATCHING,dataset);
    ChartWithData chart=new ChartWithData(CompositeIndicator.PATTERN_MATCHING,imageDescriptor,getDataEnityFromUnits(patternUnitList));
    returnFiles.add(chart);
  }
  return returnFiles;
}","public static List<ChartWithData> createChart(ColumnIndicator column,boolean isCreate){
  CompositeIndicator compositeIndicator=new CompositeIndicator(column);
  Map<String,List<IndicatorUnit>> separatedMap=compositeIndicator.getIndicatorComposite();
  List<IndicatorUnit> simpleUnitList=separatedMap.get(CompositeIndicator.SIMPLE_STATISTICS);
  List<IndicatorUnit> textUnitList=separatedMap.get(CompositeIndicator.TEXT_STATISTICS);
  List<IndicatorUnit> frequencyUnitList=separatedMap.get(CompositeIndicator.FREQUENCE_STATISTICS);
  List<IndicatorUnit> summaryUnitList=separatedMap.get(CompositeIndicator.SUMMARY_STATISTICS);
  List<IndicatorUnit> patternUnitList=separatedMap.get(CompositeIndicator.PATTERN_MATCHING);
  List<IndicatorUnit> sqlPatternUnitList=separatedMap.get(CompositeIndicator.SQL_PATTERN_MATCHING);
  List<ChartWithData> returnFiles=new ArrayList<ChartWithData>();
  if (!simpleUnitList.isEmpty()) {
    CategoryDataset dataset=createSimpleDataset(simpleUnitList,isCreate);
    ImageDescriptor imageDescriptor=create3DBarChart(CompositeIndicator.SIMPLE_STATISTICS,dataset,true);
    ChartWithData chart=new ChartWithData(CompositeIndicator.SIMPLE_STATISTICS,imageDescriptor,getDataEnityFromUnits(simpleUnitList));
    returnFiles.add(chart);
  }
  if (!textUnitList.isEmpty()) {
    CategoryDataset dataset=createTextedDataset(textUnitList,isCreate);
    ImageDescriptor imageDescriptor=create3DBarChart(CompositeIndicator.TEXT_STATISTICS,dataset,true);
    ChartWithData chart=new ChartWithData(CompositeIndicator.TEXT_STATISTICS,imageDescriptor,getDataEnityFromUnits(textUnitList));
    returnFiles.add(chart);
  }
  if (!frequencyUnitList.isEmpty()) {
    CategoryDataset dataset=createFrequenceDataset(frequencyUnitList,isCreate);
    ImageDescriptor imageDescriptor=createBarChart(CompositeIndicator.FREQUENCE_STATISTICS,dataset);
    ChartWithData chart=new ChartWithData(CompositeIndicator.FREQUENCE_STATISTICS,imageDescriptor,getDataEnityFromUnits(frequencyUnitList));
    returnFiles.add(chart);
  }
  if (!summaryUnitList.isEmpty()) {
    CategoryDataset dataset=createSummaryDataset(summaryUnitList,isCreate);
    if (dataset instanceof BoxAndWhiskerCategoryDataset) {
      ImageDescriptor imageDescriptor=createBoxAndWhiskerChart(CompositeIndicator.SUMMARY_STATISTICS,(BoxAndWhiskerCategoryDataset)dataset);
      ChartWithData chart=new ChartWithData(CompositeIndicator.SUMMARY_STATISTICS,imageDescriptor,getDataEnityFromUnits(summaryUnitList));
      returnFiles.add(chart);
    }
 else {
      ImageDescriptor imageDescriptor=create3DBarChart(CompositeIndicator.SUMMARY_STATISTICS,dataset,false);
      ChartWithData chart=new ChartWithData(CompositeIndicator.SUMMARY_STATISTICS,imageDescriptor,getDataEnityFromUnits(summaryUnitList));
      returnFiles.add(chart);
    }
  }
  if (!patternUnitList.isEmpty()) {
    CategoryDataset dataset=createPatternMatchDataset(patternUnitList,isCreate);
    ImageDescriptor imageDescriptor=createStacked3DBarChart(CompositeIndicator.PATTERN_MATCHING,dataset);
    ChartWithData chart=new ChartWithData(CompositeIndicator.PATTERN_MATCHING,imageDescriptor,getDataEnityFromUnits(patternUnitList));
    returnFiles.add(chart);
  }
  if (!sqlPatternUnitList.isEmpty()) {
    CategoryDataset dataset=createPatternMatchDataset(sqlPatternUnitList,isCreate);
    ImageDescriptor imageDescriptor=createStacked3DBarChart(CompositeIndicator.SQL_PATTERN_MATCHING,dataset);
    ChartWithData chart=new ChartWithData(CompositeIndicator.SQL_PATTERN_MATCHING,imageDescriptor,getDataEnityFromUnits(sqlPatternUnitList));
    returnFiles.add(chart);
  }
  return returnFiles;
}",0.9249889036839768
140573,"private static ChartDataEntity[] getDataEnityFromUnits(List<IndicatorUnit> unitList){
  List<ChartDataEntity> list=new ArrayList<ChartDataEntity>();
  for (  IndicatorUnit unit : unitList) {
    if (unit.getType() == IndicatorEnum.FrequencyIndicatorEnum) {
      FrequencyExt[] freqExt=(FrequencyExt[])unit.getValue();
      for (      FrequencyExt one : freqExt) {
        ChartDataEntity entity=new ChartDataEntity();
        entity.setLabel(one.getKey().toString());
        entity.setValue(one.getValue().toString());
        entity.setIndicator(unit.getIndicator());
        list.add(entity);
      }
    }
 else     if (unit.getType() == IndicatorEnum.RegexpMatchingIndicatorEnum) {
      PatternMatchingExt patnExt=(PatternMatchingExt)unit.getValue();
      PatternChartDataEntity entity=new PatternChartDataEntity();
      entity.setLabel(unit.getIndicatorName());
      entity.setNumMatch(String.valueOf(patnExt.getMatchingValueCount()));
      entity.setNumNoMatch(String.valueOf(patnExt.getNotMatchingValueCount()));
      entity.setIndicator(unit.getIndicator());
      list.add(entity);
    }
 else {
      ChartDataEntity entity=new ChartDataEntity();
      entity.setLabel(unit.getIndicatorName());
      entity.setValue(unit.getValue().toString());
      entity.setIndicator(unit.getIndicator());
      list.add(entity);
    }
  }
  return list.toArray(new ChartDataEntity[list.size()]);
}","private static ChartDataEntity[] getDataEnityFromUnits(List<IndicatorUnit> unitList){
  List<ChartDataEntity> list=new ArrayList<ChartDataEntity>();
  for (  IndicatorUnit unit : unitList) {
    if (unit.getType() == IndicatorEnum.FrequencyIndicatorEnum) {
      FrequencyExt[] freqExt=(FrequencyExt[])unit.getValue();
      for (      FrequencyExt one : freqExt) {
        ChartDataEntity entity=new ChartDataEntity();
        entity.setLabel(one.getKey().toString());
        entity.setValue(one.getValue().toString());
        entity.setIndicator(unit.getIndicator());
        list.add(entity);
      }
    }
 else     if (unit.getType() == IndicatorEnum.RegexpMatchingIndicatorEnum || unit.getType() == IndicatorEnum.SqlPatternMatchingIndicatorEnum) {
      PatternMatchingExt patnExt=(PatternMatchingExt)unit.getValue();
      PatternChartDataEntity entity=new PatternChartDataEntity();
      entity.setLabel(unit.getIndicatorName());
      entity.setNumMatch(String.valueOf(patnExt.getMatchingValueCount()));
      entity.setNumNoMatch(String.valueOf(patnExt.getNotMatchingValueCount()));
      entity.setIndicator(unit.getIndicator());
      list.add(entity);
    }
 else {
      ChartDataEntity entity=new ChartDataEntity();
      entity.setLabel(unit.getIndicatorName());
      entity.setValue(unit.getValue().toString());
      entity.setIndicator(unit.getIndicator());
      list.add(entity);
    }
  }
  return list.toArray(new ChartDataEntity[list.size()]);
}",0.9767118526242614
140574,"public static void compositeIndicatorMap(IndicatorUnit indicatorUnit){
  Color tempColor=null;
  Object tempObject=null;
  IndicatorEnum type=indicatorUnit.getType();
  Indicator indicator=indicatorUnit.getIndicator();
switch (type) {
case RowCountIndicatorEnum:
    tempColor=COLOR_ROW_COUNT;
  tempObject=((RowCountIndicator)indicator).getCount();
break;
case NullCountIndicatorEnum:
tempColor=COLOR_NULL_COUNT;
tempObject=((NullCountIndicator)indicator).getNullCount();
break;
case DistinctCountIndicatorEnum:
tempColor=COLOR_DISTIN_CTCOUNT;
tempObject=((DistinctCountIndicator)indicator).getDistinctValueCount();
break;
case UniqueIndicatorEnum:
tempColor=COLOR_UNIQUE_COUNT;
tempObject=(((UniqueCountIndicator)indicator).getUniqueValueCount());
break;
case DuplicateCountIndicatorEnum:
tempColor=COLOR_DUPLICATE_COUNT;
tempObject=((DuplicateCountIndicator)indicator).getDuplicateValueCount();
break;
case BlankCountIndicatorEnum:
tempColor=COLOR_BLANKCOUNT;
tempObject=((BlankCountIndicator)indicator).getBlankCount();
break;
case MinLengthIndicatorEnum:
tempColor=COLOR_MIN_LENGTH;
tempObject=((MinLengthIndicator)indicator).getLength();
break;
case MaxLengthIndicatorEnum:
tempColor=COLOR_MAX_LENGTH;
tempObject=((MaxLengthIndicator)indicator).getLength();
break;
case AverageLengthIndicatorEnum:
tempColor=COLOR_AVERAGE_LENGTH;
tempObject=((AverageLengthIndicator)indicator).getAverageLength();
break;
case FrequencyIndicatorEnum:
FrequencyIndicator frequency=(FrequencyIndicator)indicator;
Set<Object> valueSet=frequency.getDistinctValues();
if (valueSet == null) {
break;
}
FrequencyExt[] frequencyExt=new FrequencyExt[valueSet.size()];
int i=0;
for (Object o : valueSet) {
frequencyExt[i]=new FrequencyExt();
frequencyExt[i].setKey(o);
frequencyExt[i].setValue(frequency.getCount(o));
i++;
}
tempColor=null;
tempObject=frequencyExt;
break;
case MeanIndicatorEnum:
tempColor=null;
tempObject=((MeanIndicator)indicator).getMean();
break;
case MedianIndicatorEnum:
tempColor=null;
tempObject=((MedianIndicator)indicator).getMedian();
break;
case MinValueIndicatorEnum:
tempColor=null;
tempObject=((MinValueIndicator)indicator).getValue();
break;
case MaxValueIndicatorEnum:
tempColor=null;
tempObject=((MaxValueIndicator)indicator).getValue();
break;
case LowerQuartileIndicatorEnum:
tempColor=null;
tempObject=((LowerQuartileIndicator)indicator).getValue();
break;
case UpperQuartileIndicatorEnum:
tempColor=null;
tempObject=((UpperQuartileIndicator)indicator).getValue();
break;
case RegexpMatchingIndicatorEnum:
tempColor=null;
PatternMatchingExt patternExt=new PatternMatchingExt();
patternExt.setMatchingValueCount(((PatternMatchingIndicator)indicator).getMatchingValueCount());
patternExt.setNotMatchingValueCount(((PatternMatchingIndicator)indicator).getNotMatchingValueCount());
tempObject=patternExt;
default :
}
indicatorUnit.setColor(tempColor);
indicatorUnit.setValue(tempObject);
}","public static void compositeIndicatorMap(IndicatorUnit indicatorUnit){
  Color tempColor=null;
  Object tempObject=null;
  IndicatorEnum type=indicatorUnit.getType();
  Indicator indicator=indicatorUnit.getIndicator();
switch (type) {
case RowCountIndicatorEnum:
    tempColor=COLOR_ROW_COUNT;
  tempObject=((RowCountIndicator)indicator).getCount();
break;
case NullCountIndicatorEnum:
tempColor=COLOR_NULL_COUNT;
tempObject=((NullCountIndicator)indicator).getNullCount();
break;
case DistinctCountIndicatorEnum:
tempColor=COLOR_DISTIN_CTCOUNT;
tempObject=((DistinctCountIndicator)indicator).getDistinctValueCount();
break;
case UniqueIndicatorEnum:
tempColor=COLOR_UNIQUE_COUNT;
tempObject=(((UniqueCountIndicator)indicator).getUniqueValueCount());
break;
case DuplicateCountIndicatorEnum:
tempColor=COLOR_DUPLICATE_COUNT;
tempObject=((DuplicateCountIndicator)indicator).getDuplicateValueCount();
break;
case BlankCountIndicatorEnum:
tempColor=COLOR_BLANKCOUNT;
tempObject=((BlankCountIndicator)indicator).getBlankCount();
break;
case MinLengthIndicatorEnum:
tempColor=COLOR_MIN_LENGTH;
tempObject=((MinLengthIndicator)indicator).getLength();
break;
case MaxLengthIndicatorEnum:
tempColor=COLOR_MAX_LENGTH;
tempObject=((MaxLengthIndicator)indicator).getLength();
break;
case AverageLengthIndicatorEnum:
tempColor=COLOR_AVERAGE_LENGTH;
tempObject=((AverageLengthIndicator)indicator).getAverageLength();
break;
case FrequencyIndicatorEnum:
FrequencyIndicator frequency=(FrequencyIndicator)indicator;
Set<Object> valueSet=frequency.getDistinctValues();
if (valueSet == null) {
break;
}
FrequencyExt[] frequencyExt=new FrequencyExt[valueSet.size()];
int i=0;
for (Object o : valueSet) {
frequencyExt[i]=new FrequencyExt();
frequencyExt[i].setKey(o);
frequencyExt[i].setValue(frequency.getCount(o));
i++;
}
tempColor=null;
tempObject=frequencyExt;
break;
case MeanIndicatorEnum:
tempColor=null;
tempObject=((MeanIndicator)indicator).getMean();
break;
case MedianIndicatorEnum:
tempColor=null;
tempObject=((MedianIndicator)indicator).getMedian();
break;
case MinValueIndicatorEnum:
tempColor=null;
tempObject=((MinValueIndicator)indicator).getValue();
break;
case MaxValueIndicatorEnum:
tempColor=null;
tempObject=((MaxValueIndicator)indicator).getValue();
break;
case LowerQuartileIndicatorEnum:
tempColor=null;
tempObject=((LowerQuartileIndicator)indicator).getValue();
break;
case UpperQuartileIndicatorEnum:
tempColor=null;
tempObject=((UpperQuartileIndicator)indicator).getValue();
break;
case RegexpMatchingIndicatorEnum:
case SqlPatternMatchingIndicatorEnum:
tempColor=null;
PatternMatchingExt patternExt=new PatternMatchingExt();
patternExt.setMatchingValueCount(((PatternMatchingIndicator)indicator).getMatchingValueCount());
patternExt.setNotMatchingValueCount(((PatternMatchingIndicator)indicator).getNotMatchingValueCount());
tempObject=patternExt;
default :
}
indicatorUnit.setColor(tempColor);
indicatorUnit.setValue(tempObject);
}",0.9880178021225609
140575,"public static void createTable(Composite parent,ChartWithData inputObject){
  TableViewer tbViewer=new TableViewer(parent,SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
  Table table=tbViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  if (inputObject.getChartNamedType().equals(CompositeIndicator.SIMPLE_STATISTICS) || inputObject.getChartNamedType().equals(CompositeIndicator.TEXT_STATISTICS)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(150);
    TableColumn column3=new TableColumn(table,SWT.NONE);
    column3.setText(""String_Node_Str"");
    column3.setWidth(150);
    tbViewer.setLabelProvider(new SimpleLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else   if (inputObject.getChartNamedType().equals(CompositeIndicator.FREQUENCE_STATISTICS)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(150);
    TableColumn column3=new TableColumn(table,SWT.NONE);
    column3.setText(""String_Node_Str"");
    column3.setWidth(150);
    tbViewer.setLabelProvider(new FrequencyLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else   if (inputObject.getChartNamedType().equals(CompositeIndicator.SUMMARY_STATISTICS)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(300);
    tbViewer.setLabelProvider(new SummaryLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else   if (inputObject.getChartNamedType().equals(CompositeIndicator.PATTERN_MATCHING)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(75);
    TableColumn column3=new TableColumn(table,SWT.NONE);
    column3.setText(""String_Node_Str"");
    column3.setWidth(75);
    TableColumn column4=new TableColumn(table,SWT.NONE);
    column4.setText(""String_Node_Str"");
    column4.setWidth(75);
    TableColumn column5=new TableColumn(table,SWT.NONE);
    column5.setText(""String_Node_Str"");
    column5.setWidth(75);
    tbViewer.setLabelProvider(new PatternLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else {
    tbViewer.setLabelProvider(new LabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
  tbViewer.setInput(inputObject);
}","public static void createTable(Composite parent,ChartWithData inputObject){
  TableViewer tbViewer=new TableViewer(parent,SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
  Table table=tbViewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  if (inputObject.getChartNamedType().equals(CompositeIndicator.SIMPLE_STATISTICS) || inputObject.getChartNamedType().equals(CompositeIndicator.TEXT_STATISTICS)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(150);
    TableColumn column3=new TableColumn(table,SWT.NONE);
    column3.setText(""String_Node_Str"");
    column3.setWidth(150);
    tbViewer.setLabelProvider(new SimpleLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else   if (inputObject.getChartNamedType().equals(CompositeIndicator.FREQUENCE_STATISTICS)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(150);
    TableColumn column3=new TableColumn(table,SWT.NONE);
    column3.setText(""String_Node_Str"");
    column3.setWidth(150);
    tbViewer.setLabelProvider(new FrequencyLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else   if (inputObject.getChartNamedType().equals(CompositeIndicator.SUMMARY_STATISTICS)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(300);
    tbViewer.setLabelProvider(new SummaryLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else   if (inputObject.getChartNamedType().equals(CompositeIndicator.PATTERN_MATCHING) || inputObject.getChartNamedType().equals(CompositeIndicator.SQL_PATTERN_MATCHING)) {
    TableColumn column1=new TableColumn(table,SWT.NONE);
    column1.setText(""String_Node_Str"");
    column1.setWidth(200);
    TableColumn column2=new TableColumn(table,SWT.NONE);
    column2.setText(""String_Node_Str"");
    column2.setWidth(75);
    TableColumn column3=new TableColumn(table,SWT.NONE);
    column3.setText(""String_Node_Str"");
    column3.setWidth(75);
    TableColumn column4=new TableColumn(table,SWT.NONE);
    column4.setText(""String_Node_Str"");
    column4.setWidth(75);
    TableColumn column5=new TableColumn(table,SWT.NONE);
    column5.setText(""String_Node_Str"");
    column5.setWidth(75);
    tbViewer.setLabelProvider(new PatternLabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
 else {
    tbViewer.setLabelProvider(new LabelProvider());
    tbViewer.setContentProvider(new CommonContenteProvider());
  }
  tbViewer.setInput(inputObject);
}",0.986536901865369
140576,"private void computered(){
  double sum=0;
  for (  ChartDataEntity oneEntity : this.enity) {
    sum=sum + Double.valueOf(oneEntity.getValue());
  }
  for (  ChartDataEntity oneEntity : this.enity) {
    Double doub=Double.valueOf(oneEntity.getValue()) / sum;
    DecimalFormat format=(DecimalFormat)DecimalFormat.getPercentInstance();
    format.applyPattern(""String_Node_Str"");
    oneEntity.setPersent(format.format(doub));
  }
}","private void computered(){
  double sum=0;
  for (  ChartDataEntity oneEntity : this.enity) {
    if (oneEntity.getValue() != null) {
      sum=sum + Double.valueOf(oneEntity.getValue());
    }
  }
  for (  ChartDataEntity oneEntity : this.enity) {
    if (sum != 0) {
      Double doub=Double.valueOf(oneEntity.getValue()) / sum;
      DecimalFormat format=(DecimalFormat)DecimalFormat.getPercentInstance();
      format.applyPattern(""String_Node_Str"");
      oneEntity.setPersent(format.format(doub));
    }
 else {
      oneEntity.setPersent(""String_Node_Str"");
    }
  }
}",0.8523290386521308
140577,"public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(""String_Node_Str"" + column.getName());
    exComp.setLayout(new GridLayout());
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              for (              ChartWithData chart : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
                ImageHyperlink image=toolkit.createImageHyperlink(comp,SWT.WRAP);
                image.setImage(chart.getImageDescriptor().createImage());
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
      exComp.setExpanded(true);
    }
    exComp.setClient(comp);
    exComp.addExpansionListener(new ExpansionAdapter(){
      public void expansionStateChanged(      ExpansionEvent e){
        form.reflow(true);
      }
    }
);
  }
}","public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(""String_Node_Str"" + column.getName());
    exComp.setLayout(new GridLayout());
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              for (              ChartWithData chart : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
                ImageHyperlink image=toolkit.createImageHyperlink(comp,SWT.WRAP);
                image.setImage(chart.getImageDescriptor().createImage());
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
      if (!exComp.isDisposed()) {
        exComp.setExpanded(true);
      }
    }
    exComp.setClient(comp);
    exComp.addExpansionListener(new ExpansionAdapter(){
      public void expansionStateChanged(      ExpansionEvent e){
        form.reflow(true);
      }
    }
);
  }
}",0.988088792636708
140578,"public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(""String_Node_Str"" + column.getName());
    exComp.setLayout(new GridLayout());
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              for (              ChartWithData chart : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
                ImageHyperlink image=toolkit.createImageHyperlink(comp,SWT.WRAP);
                image.setImage(chart.getImageDescriptor().createImage());
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(null).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
      exComp.setExpanded(true);
    }
    exComp.setClient(comp);
    exComp.addExpansionListener(new ExpansionAdapter(){
      public void expansionStateChanged(      ExpansionEvent e){
        form.reflow(true);
      }
    }
);
  }
}","public void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  for (  final ColumnIndicator columnIndicator : this.treeViewer.getColumnIndicator()) {
    final TdColumn column=columnIndicator.getTdColumn();
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(""String_Node_Str"" + column.getName());
    exComp.setLayout(new GridLayout());
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              for (              ChartWithData chart : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
                ImageHyperlink image=toolkit.createImageHyperlink(comp,SWT.WRAP);
                image.setImage(chart.getImageDescriptor().createImage());
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(getSite().getShell()).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
      exComp.setExpanded(true);
    }
    exComp.setClient(comp);
    exComp.addExpansionListener(new ExpansionAdapter(){
      public void expansionStateChanged(      ExpansionEvent e){
        form.reflow(true);
      }
    }
);
  }
}",0.9933957072096864
140579,"@Override public void loadChildren(){
  ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(this.getParent());
  if (columnSet != null) {
    List<TdColumn> columnList=ColumnSetHelper.getColumns(columnSet);
    if (columnList.size() > 0) {
      this.setLoaded(true);
      this.setChildren(columnList.toArray());
      return;
    }
    Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
    if (parentCatalogOrSchema == null) {
      return;
    }
    TdDataProvider provider=DataProviderHelper.getTdDataProvider(parentCatalogOrSchema);
    if (provider == null) {
      return;
    }
    try {
      columnList=DqRepositoryViewService.getColumns(provider,columnSet,null,true);
    }
 catch (    TalendException e) {
      MessageBoxExceptionHandler.process(e);
    }
    ColumnSetHelper.addColumns(columnSet,columnList);
    this.setChildren(columnList.toArray());
    NeedSaveDataProviderHelper.register(provider.eResource().getURI().path(),provider);
    this.setLoaded(true);
  }
}","@Override public void loadChildren(){
  ColumnSet columnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(this.getParent());
  if (columnSet != null) {
    List<TdColumn> columnList=ColumnSetHelper.getColumns(columnSet);
    if (columnList.size() > 0) {
      this.setChildren(columnList.toArray());
      return;
    }
    Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnSet);
    if (parentCatalogOrSchema == null) {
      return;
    }
    TdDataProvider provider=DataProviderHelper.getTdDataProvider(parentCatalogOrSchema);
    if (provider == null) {
      return;
    }
    try {
      columnList=DqRepositoryViewService.getColumns(provider,columnSet,null,true);
    }
 catch (    TalendException e) {
      MessageBoxExceptionHandler.process(e);
    }
    ColumnSetHelper.addColumns(columnSet,columnList);
    this.setChildren(columnList.toArray());
    NeedSaveDataProviderHelper.register(provider.eResource().getURI().path(),provider);
  }
}",0.973026973026973
140580,"@SuppressWarnings(""String_Node_Str"") public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IContainer) {
    IContainer container=((IContainer)parentElement);
    IResource[] members=null;
    try {
      members=container.members();
    }
 catch (    CoreException e) {
      log.error(""String_Node_Str"" + container.getLocation());
    }
    if (container.equals(ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.METADATA).getFolder(DQStructureManager.DB_CONNECTIONS))) {
      ComparatorsFactory.sort(members,ComparatorsFactory.FILEMODEL_COMPARATOR_ID);
    }
    return members;
  }
 else   if (parentElement instanceof NamedColumnSet) {
    return null;
  }
 else   if (parentElement instanceof NamedColumnSetFolderNode) {
    NamedColumnSetFolderNode folerNode=(NamedColumnSetFolderNode)parentElement;
    if (!(folerNode.isLoaded())) {
      folerNode.loadChildren();
    }
    Object[] children=folerNode.getChildren();
    if (children != null && children.length > 0) {
      if (!(children[0] instanceof ColumnSet)) {
        return children;
      }
      for (int i=0; i < children.length; i++) {
        ColumnSet columnSet=(ColumnSet)children[i];
        ColumnSetKey key=new ColumnSetKey(columnSet);
        if (columnSetCheckedMap.containsKey(key)) {
          currentCheckedColumnSet.add(columnSet);
        }
      }
    }
    return ComparatorsFactory.sort(children,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
  }
  return super.getChildren(parentElement);
}","@SuppressWarnings(""String_Node_Str"") public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IContainer) {
    IContainer container=((IContainer)parentElement);
    IResource[] members=null;
    try {
      members=container.members();
    }
 catch (    CoreException e) {
      log.error(""String_Node_Str"" + container.getLocation());
    }
    if (container.equals(ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.METADATA).getFolder(DQStructureManager.DB_CONNECTIONS))) {
      ComparatorsFactory.sort(members,ComparatorsFactory.FILEMODEL_COMPARATOR_ID);
    }
    return members;
  }
 else   if (parentElement instanceof NamedColumnSet) {
    return null;
  }
 else   if (parentElement instanceof NamedColumnSetFolderNode) {
    NamedColumnSetFolderNode folerNode=(NamedColumnSetFolderNode)parentElement;
    folerNode.loadChildren();
    Object[] children=folerNode.getChildren();
    if (children != null && children.length > 0) {
      if (!(children[0] instanceof ColumnSet)) {
        return children;
      }
      for (int i=0; i < children.length; i++) {
        ColumnSet columnSet=(ColumnSet)children[i];
        ColumnSetKey key=new ColumnSetKey(columnSet);
        if (columnSetCheckedMap.containsKey(key)) {
          currentCheckedColumnSet.add(columnSet);
        }
      }
    }
    return ComparatorsFactory.sort(children,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
  }
  return super.getChildren(parentElement);
}",0.9698175787728026
140581,"@Override public void treeExpanded(TreeEvent e){
  TreeItem item=(TreeItem)e.item;
  if (!item.getText().endsWith(""String_Node_Str"")) {
    Object obj=item.getData();
    if (obj instanceof TableFolderNode || obj instanceof ViewFolderNode || obj instanceof ColumnFolderNode) {
      item.setText(item.getText() + ""String_Node_Str"" + item.getItemCount()+ ""String_Node_Str"");
      getCommonViewer().getTree().layout();
    }
  }
  super.treeExpanded(e);
}","@Override public void treeExpanded(TreeEvent e){
  TreeItem item=(TreeItem)e.item;
  if (!item.getText().endsWith(""String_Node_Str"")) {
    Object obj=item.getData();
    if (obj instanceof TableFolderNode || obj instanceof ViewFolderNode || obj instanceof ColumnFolderNode) {
      item.setText(item.getText() + ""String_Node_Str"" + item.getItemCount()+ ""String_Node_Str"");
    }
  }
  super.treeExpanded(e);
}",0.949074074074074
140582,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  this.addViewerFilter(EMFObjFilter.FILTER_ID);
  this.addViewerFilter(ReportingFilter.FILTER_ID);
  adjustFilter();
  activateContext();
  this.getCommonViewer().setSorter(null);
  this.getCommonViewer().getTree().addTreeListener(new TreeAdapter(){
    @Override public void treeExpanded(    TreeEvent e){
      TreeItem item=(TreeItem)e.item;
      if (!item.getText().endsWith(""String_Node_Str"")) {
        Object obj=item.getData();
        if (obj instanceof TableFolderNode || obj instanceof ViewFolderNode || obj instanceof ColumnFolderNode) {
          item.setText(item.getText() + ""String_Node_Str"" + item.getItemCount()+ ""String_Node_Str"");
          getCommonViewer().getTree().layout();
        }
      }
      super.treeExpanded(e);
    }
  }
);
  this.getCommonViewer().getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      Tree tree=(Tree)e.getSource();
      Point point=new Point(e.x,e.y);
      TreeItem item=tree.getItem(point);
      if (item != null && !item.getText().endsWith(""String_Node_Str"")) {
        Object obj=item.getData();
        if (obj instanceof AbstractFolderNode) {
          AbstractFolderNode node=(AbstractFolderNode)obj;
          node.loadChildren();
          Object[] children=node.getChildren();
          if (children != null) {
            item.setText(item.getText() + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
          }
          getCommonViewer().getTree().layout();
        }
      }
      super.mouseDoubleClick(e);
    }
  }
);
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  this.addViewerFilter(EMFObjFilter.FILTER_ID);
  this.addViewerFilter(ReportingFilter.FILTER_ID);
  adjustFilter();
  activateContext();
  this.getCommonViewer().setSorter(null);
  this.getCommonViewer().getTree().addTreeListener(new TreeAdapter(){
    @Override public void treeExpanded(    TreeEvent e){
      TreeItem item=(TreeItem)e.item;
      if (!item.getText().endsWith(""String_Node_Str"")) {
        Object obj=item.getData();
        if (obj instanceof TableFolderNode || obj instanceof ViewFolderNode || obj instanceof ColumnFolderNode) {
          item.setText(item.getText() + ""String_Node_Str"" + item.getItemCount()+ ""String_Node_Str"");
        }
      }
      super.treeExpanded(e);
    }
  }
);
  this.getCommonViewer().getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      Tree tree=(Tree)e.getSource();
      Point point=new Point(e.x,e.y);
      TreeItem item=tree.getItem(point);
      if (item != null) {
        Object obj=item.getData();
        if (obj instanceof AbstractFolderNode) {
          AbstractFolderNode node=(AbstractFolderNode)obj;
          node.loadChildren();
          Object[] children=node.getChildren();
          if (children != null) {
            if (item.getText().indexOf(""String_Node_Str"") > 0) {
              item.setText(item.getText().substring(0,item.getText().indexOf(""String_Node_Str"")) + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
            }
 else {
              item.setText(item.getText() + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
            }
          }
        }
      }
      super.mouseDoubleClick(e);
    }
  }
);
}",0.8431486880466472
140583,"@Override public void mouseDoubleClick(MouseEvent e){
  Tree tree=(Tree)e.getSource();
  Point point=new Point(e.x,e.y);
  TreeItem item=tree.getItem(point);
  if (item != null && !item.getText().endsWith(""String_Node_Str"")) {
    Object obj=item.getData();
    if (obj instanceof AbstractFolderNode) {
      AbstractFolderNode node=(AbstractFolderNode)obj;
      node.loadChildren();
      Object[] children=node.getChildren();
      if (children != null) {
        item.setText(item.getText() + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
      }
      getCommonViewer().getTree().layout();
    }
  }
  super.mouseDoubleClick(e);
}","@Override public void mouseDoubleClick(MouseEvent e){
  Tree tree=(Tree)e.getSource();
  Point point=new Point(e.x,e.y);
  TreeItem item=tree.getItem(point);
  if (item != null) {
    Object obj=item.getData();
    if (obj instanceof AbstractFolderNode) {
      AbstractFolderNode node=(AbstractFolderNode)obj;
      node.loadChildren();
      Object[] children=node.getChildren();
      if (children != null) {
        if (item.getText().indexOf(""String_Node_Str"") > 0) {
          item.setText(item.getText().substring(0,item.getText().indexOf(""String_Node_Str"")) + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
        }
 else {
          item.setText(item.getText() + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
        }
      }
    }
  }
  super.mouseDoubleClick(e);
}",0.682825484764543
140584,"public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IFile) {
    IFile file=(IFile)parentElement;
    if (file.getName().endsWith(PluginConstant.REP_SUFFIX)) {
      TdReport findReport=RepResourceFileHelper.getInstance().findReport(file);
      Object[] array=ReportHelper.getAnalyses(findReport).toArray();
      return ComparatorsFactory.sort(array,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
    parentElement=PrvResourceFileHelper.getInstance().getFileResource(file);
  }
 else   if (parentElement instanceof IFolderNode) {
    IFolderNode folerNode=(IFolderNode)parentElement;
    if (!(folerNode.isLoaded())) {
      folerNode.loadChildren();
    }
    return ComparatorsFactory.sort(folerNode.getChildren(),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
  }
 else   if (SwitchHelpers.CATALOG_SWITCH.doSwitch((EObject)parentElement) != null) {
    if (CatalogHelper.getSchemas(SwitchHelpers.CATALOG_SWITCH.doSwitch((EObject)parentElement)).size() > 0) {
      return ComparatorsFactory.sort(super.getChildren(parentElement),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
 else {
      return FolderNodeHelper.getFolderNodes((EObject)parentElement);
    }
  }
 else {
    return FolderNodeHelper.getFolderNodes((EObject)parentElement);
  }
  return ComparatorsFactory.sort(super.getChildren(parentElement),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
}","public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IFile) {
    IFile file=(IFile)parentElement;
    if (file.getName().endsWith(PluginConstant.REP_SUFFIX)) {
      TdReport findReport=RepResourceFileHelper.getInstance().findReport(file);
      Object[] array=ReportHelper.getAnalyses(findReport).toArray();
      return ComparatorsFactory.sort(array,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
    parentElement=PrvResourceFileHelper.getInstance().getFileResource(file);
  }
 else   if (parentElement instanceof IFolderNode) {
    IFolderNode folerNode=(IFolderNode)parentElement;
    folerNode.loadChildren();
    return ComparatorsFactory.sort(folerNode.getChildren(),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
  }
 else   if (SwitchHelpers.CATALOG_SWITCH.doSwitch((EObject)parentElement) != null) {
    if (CatalogHelper.getSchemas(SwitchHelpers.CATALOG_SWITCH.doSwitch((EObject)parentElement)).size() > 0) {
      return ComparatorsFactory.sort(super.getChildren(parentElement),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
 else {
      return FolderNodeHelper.getFolderNodes((EObject)parentElement);
    }
  }
 else {
    return FolderNodeHelper.getFolderNodes((EObject)parentElement);
  }
  return ComparatorsFactory.sort(super.getChildren(parentElement),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
}",0.9845045045045046
140585,"public TimeSliceOptionPage(){
  super(""String_Node_Str"");
  setTitle(""String_Node_Str"");
  setDescription(""String_Node_Str"");
  patameter=new TimeSlicesParameter();
  patameter.setDataUnit(DateGrain.YEAR.getLiteral());
}","public TimeSliceOptionPage(){
  super(""String_Node_Str"");
  setTitle(""String_Node_Str"");
  setDescription(""String_Node_Str"");
  patameter=new TimeSlicesParameter();
  patameter.setDataUnit(DateGrain.YEAR.getLiteral());
  this.listener=new AbstractForm.ICheckListener(){
    public void checkPerformed(    AbstractForm source){
      if (source.isStatusOnError()) {
        TimeSliceOptionPage.this.setPageComplete(false);
        setErrorMessage(source.getStatus());
      }
 else {
        TimeSliceOptionPage.this.setPageComplete(true);
        setErrorMessage(null);
        setMessage(source.getStatus(),source.getStatusLevel());
      }
    }
  }
;
}",0.5028571428571429
140586,"public void createControl(Composite parent){
  Composite comp=new Composite(parent,SWT.NONE);
  comp.setLayout(new GridLayout());
  comp.setLayoutData(new GridData(GridData.FILL_BOTH));
  FreqTimeSliceForm timeSliceForm=new FreqTimeSliceForm(comp,SWT.NONE);
  timeSliceForm.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  timeSliceForm.setParameter(patameter);
  setControl(comp);
}","public void createControl(Composite parent){
  Composite comp=new Composite(parent,SWT.NONE);
  comp.setLayout(new GridLayout());
  comp.setLayoutData(new GridData(GridData.FILL_BOTH));
  FreqTimeSliceForm timeSliceForm=new FreqTimeSliceForm(comp,SWT.NONE);
  timeSliceForm.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  timeSliceForm.setParameter(patameter);
  timeSliceForm.setListener(listener);
  setControl(comp);
}",0.9524969549330086
140587,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis);
      String helpID=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
      WizardDialog dialog=new WizardDialog(null,wizard);
      int open=HelpUtils.injectHelp(dialog,wizard,helpID,indicator).open();
      if (Window.OK == open) {
        setDirty(wizard.isDirty());
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis);
      String helpID=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
      WizardDialog dialog=new WizardDialog(null,wizard);
      WizardDialog dialogWithHelp=HelpUtils.injectHelp(dialog,wizard,helpID,indicator);
      if (dialogWithHelp != null) {
        if (Window.OK == dialogWithHelp.open()) {
          setDirty(wizard.isDirty());
        }
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
}",0.9804238796311276
140588,"/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  TreeItem iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + parameters.getTopN());
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseBlank());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isIgnoreCase());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseNulls());
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + dParameters.getDateAggregationType().getName() + ""String_Node_Str"");
  }
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getDataValidDomain() != null));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getIndicatorValidDomain() != null));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getBins() != null));
  tree.getColumn(0).pack();
}","/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  TreeItem[] items=indicatorItem.getItems();
  for (  TreeItem treeItem : items) {
    treeItem.dispose();
  }
  TreeItem iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + parameters.getTopN());
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseBlank());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isIgnoreCase());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseNulls());
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + dParameters.getDateAggregationType().getName() + ""String_Node_Str"");
  }
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getDataValidDomain() != null));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getIndicatorValidDomain() != null));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getBins() != null));
  tree.getColumn(0).pack();
}",0.969959404600812
140589,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis);
      String helpID=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
      WizardDialog dialog=new WizardDialog(null,wizard);
      WizardDialog dialogWithHelp=HelpUtils.injectHelp(dialog,wizard,helpID,indicator);
      if (dialogWithHelp != null) {
        if (Window.OK == dialogWithHelp.open()) {
          setDirty(wizard.isDirty());
        }
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters != null) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorParameters(indicatorItem,parameters);
  }
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis);
      String helpID=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
      WizardDialog dialog=new WizardDialog(null,wizard);
      WizardDialog dialogWithHelp=HelpUtils.injectHelp(dialog,wizard,helpID,indicator);
      if (dialogWithHelp != null) {
        if (Window.OK == dialogWithHelp.open()) {
          setDirty(wizard.isDirty());
          createIndicatorParameters(indicatorItem,indicator);
        }
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  createIndicatorParameters(indicatorItem,indicatorUnit);
}",0.9575129533678756
140590,"/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorParameters parameters){
  TreeItem iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + parameters.getTopN());
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseBlank());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isIgnoreCase());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseNulls());
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + dParameters.getDateAggregationType().getName() + ""String_Node_Str"");
  }
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getDataValidDomain() != null));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getIndicatorValidDomain() != null));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getBins() != null));
  tree.getColumn(0).pack();
}","/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  TreeItem iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + parameters.getTopN());
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseBlank());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isIgnoreCase());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseNulls());
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + dParameters.getDateAggregationType().getName() + ""String_Node_Str"");
  }
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getDataValidDomain() != null));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getIndicatorValidDomain() != null));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getBins() != null));
  tree.getColumn(0).pack();
}",0.9647806004618936
140591,"protected ImageDescriptor decorateImage(ImageDescriptor input,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
      return ImageLib.getImageDescriptor(ImageLib.REPORT_OBJECT);
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
      return ImageLib.getImageDescriptor(ImageLib.PATTERN_REG);
    }
  }
  return super.decorateImage(input,element);
}","protected ImageDescriptor decorateImage(ImageDescriptor input,Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
      return ImageLib.getImageDescriptor(ImageLib.REPORT_OBJECT);
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
      return ImageLib.getImageDescriptor(ImageLib.PATTERN_REG);
    }
  }
  if (element instanceof IProject) {
    if (DQStructureManager.METADATA.equals(((IProject)element).getName())) {
      return ImageLib.getImageDescriptor(ImageLib.METADATA);
    }
  }
 else   if (element instanceof IFolder) {
    if (DQStructureManager.DB_CONNECTIONS.equals(((IFolder)element).getName())) {
      return ImageLib.getImageDescriptor(ImageLib.CONNECTION);
    }
  }
  return super.decorateImage(input,element);
}",0.6995581737849779
140592,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof EObject) {
    EObject eObj=(EObject)element;
    if (SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(eObj) != null || dependencySwitch.doSwitch(eObj) != null) {
      return false;
    }
  }
  return true;
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof EObject) {
    EObject eObj=(EObject)element;
    if (SwitchHelpers.TDDATAPROVIDER_SWITCH.doSwitch(eObj) != null || dependencySwitch.doSwitch(eObj) != null) {
      return false;
    }
  }
 else   if (element instanceof IFile) {
    IFile file=(IFile)element;
    return file.getFileExtension() != null;
  }
  return true;
}",0.8085676037483266
140593,"public void treeExpanded(TreeExpansionEvent event){
  TreeViewer viewer=(TreeViewer)event.getSource();
  if (viewer.getSelection() == null) {
    return;
  }
  AnalysisTypeNode node=(AnalysisTypeNode)((IStructuredSelection)viewer.getSelection()).getFirstElement();
  updateAnalysisNode(node);
}","public void treeExpanded(TreeExpansionEvent event){
  TreeViewer viewer=(TreeViewer)event.getSource();
  if (viewer.getSelection() == null) {
    return;
  }
  AnalysisTypeNode node=(AnalysisTypeNode)((IStructuredSelection)viewer.getSelection()).getFirstElement();
  if (node == null) {
    return;
  }
 else {
    updateAnalysisNode(node);
  }
}",0.91875
140594,"protected void addListeners(){
  typeName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String filterString=((Text)e.getSource()).getText();
      if (filterString != ""String_Node_Str"") {
        filter.setTypeName(filterString);
        analysisTypes.addFilter(filter);
      }
 else {
        ViewerFilter[] filters=analysisTypes.getFilters();
        for (        ViewerFilter one : filters) {
          analysisTypes.removeFilter(one);
        }
        analysisTypes.refresh(true);
      }
    }
  }
);
  typeName.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      typeName.setText(""String_Node_Str"");
    }
  }
);
  analysisTypes.addTreeListener(new ITreeViewerListener(){
    public void treeCollapsed(    TreeExpansionEvent event){
    }
    public void treeExpanded(    TreeExpansionEvent event){
      TreeViewer viewer=(TreeViewer)event.getSource();
      if (viewer.getSelection() == null) {
        return;
      }
      AnalysisTypeNode node=(AnalysisTypeNode)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      updateAnalysisNode(node);
    }
  }
);
  analysisTypes.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      AnalysisTypeNode node=(AnalysisTypeNode)((IStructuredSelection)event.getSelection()).getFirstElement();
      if (node != null) {
        updateAnalysisNode(node);
      }
    }
  }
);
  analysisTypes.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      AnalysisTypeNode node=(AnalysisTypeNode)((IStructuredSelection)event.getSelection()).getFirstElement();
      if (node.getParent() == null) {
        analysisTypes.expandToLevel(node,1);
      }
 else {
        advanceToNextPageOrFinish();
      }
    }
  }
);
}","protected void addListeners(){
  typeName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String filterString=((Text)e.getSource()).getText();
      if (filterString != ""String_Node_Str"") {
        filter.setTypeName(filterString);
        analysisTypes.addFilter(filter);
      }
 else {
        ViewerFilter[] filters=analysisTypes.getFilters();
        for (        ViewerFilter one : filters) {
          analysisTypes.removeFilter(one);
        }
        analysisTypes.refresh(true);
      }
    }
  }
);
  typeName.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      typeName.setText(""String_Node_Str"");
    }
  }
);
  analysisTypes.addTreeListener(new ITreeViewerListener(){
    public void treeCollapsed(    TreeExpansionEvent event){
    }
    public void treeExpanded(    TreeExpansionEvent event){
      TreeViewer viewer=(TreeViewer)event.getSource();
      if (viewer.getSelection() == null) {
        return;
      }
      AnalysisTypeNode node=(AnalysisTypeNode)((IStructuredSelection)viewer.getSelection()).getFirstElement();
      if (node == null) {
        return;
      }
 else {
        updateAnalysisNode(node);
      }
    }
  }
);
  analysisTypes.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      AnalysisTypeNode node=(AnalysisTypeNode)((IStructuredSelection)event.getSelection()).getFirstElement();
      if (node != null) {
        updateAnalysisNode(node);
      }
    }
  }
);
  analysisTypes.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      AnalysisTypeNode node=(AnalysisTypeNode)((IStructuredSelection)event.getSelection()).getFirstElement();
      if (node.getParent() == null) {
        analysisTypes.expandToLevel(node,1);
      }
 else {
        advanceToNextPageOrFinish();
      }
    }
  }
);
}",0.9824651882413616
140595,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis);
      String helpID=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
      WizardDialog dialog=new WizardDialog(null,wizard);
      WizardDialog dialogWithHelp=HelpUtils.injectHelp(dialog,wizard,helpID,indicator);
      if (dialogWithHelp != null) {
        if (Window.OK == dialogWithHelp.open()) {
          setDirty(wizard.isDirty());
        }
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis);
      String helpID=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
      WizardDialog dialog=new WizardDialog(null,wizard);
      WizardDialog dialogWithHelp=HelpUtils.injectHelp(dialog,wizard,helpID,indicator);
      if (dialogWithHelp != null) {
        if (Window.OK == dialogWithHelp.open()) {
          setDirty(wizard.isDirty());
        }
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters != null) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorParameters(indicatorItem,parameters);
  }
}",0.9645817633760362
140596,"private void fillDbUrlMap(){
  supportDBUrlMap.put(SupportDBUrlType.MYSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MYSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEDEFAULTURL);
}","private void fillDbUrlMap(){
  supportDBUrlMap.put(SupportDBUrlType.MYSQLDEFAULTURL.getDBKey(),SupportDBUrlType.MYSQLDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.ORACLEDEFAULTURL.getDBKey(),SupportDBUrlType.ORACLEDEFAULTURL);
  supportDBUrlMap.put(SupportDBUrlType.POSTGRESQLEFAULTURL.getDBKey(),SupportDBUrlType.POSTGRESQLEFAULTURL);
}",0.8110918544194108
140597,"public void doSave(IProgressMonitor monitor){
  if (masterPage.isDirty()) {
    masterPage.doSave(monitor);
  }
  super.doSave(monitor);
}","public void doSave(IProgressMonitor monitor){
  if (masterPage.isDirty()) {
    masterPage.doSave(monitor);
  }
  super.doSave(monitor);
  IFile efile=((FileEditorInput)getEditorInput()).getFile();
  refreshDQView(efile);
}",0.7645429362880887
140598,"public void modifyText(ModifyEvent e){
  setPageComplete(true);
}","public void modifyText(ModifyEvent e){
  checkFieldsValue();
  if (isStatusOnValid()) {
    setPageComplete(true);
  }
}",0.7027027027027027
140599,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(""String_Node_Str"");
  nameText=new Text(container,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  setControl(container);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setPageComplete(true);
    }
  }
);
  if (getControl() != null) {
    try {
      PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(),HelpPlugin.PATTERN_CONTEXT_HELP_ID);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  nameLab=new Label(container,SWT.NONE);
  nameLab.setText(""String_Node_Str"");
  String[] types=SupportDBUrlStore.getInstance().getDBTypes();
  comboLang=new Combo(container,SWT.BORDER);
  comboLang.setItems(types);
  comboLang.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (types.length > 0) {
    comboLang.select(0);
  }
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(""String_Node_Str"");
  nameText=new Text(container,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  setControl(container);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkFieldsValue();
      if (isStatusOnValid()) {
        setPageComplete(true);
      }
    }
  }
);
  if (getControl() != null) {
    try {
      PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(),HelpPlugin.PATTERN_CONTEXT_HELP_ID);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  nameLab=new Label(container,SWT.NONE);
  nameLab.setText(""String_Node_Str"");
  String[] types=SupportDBUrlStore.getInstance().getDBTypes();
  comboLang=new Combo(container,SWT.BORDER);
  comboLang.setItems(types);
  comboLang.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (types.length > 0) {
    comboLang.select(0);
  }
}",0.9707039790118058
140600,"@Override public boolean checkFieldsValue(){
  if (nameText.getText() == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
    return false;
  }
  if (!CheckValueUtils.isStringValue(nameText.getText())) {
    updateStatus(IStatus.ERROR,MSG_ONLY_CHAR);
    return false;
  }
  updateStatus(IStatus.OK,MSG_OK);
  return super.checkFieldsValue();
}","@Override public boolean checkFieldsValue(){
  if (nameText.getText().trim() == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
    return false;
  }
  if (nameText.getText().contains(""String_Node_Str"")) {
    updateStatus(IStatus.ERROR,MSG_INVALID);
    return false;
  }
  updateStatus(IStatus.OK,MSG_OK);
  return super.checkFieldsValue();
}",0.8595271210013908
140601,"protected void addListeners(){
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkFieldsValue();
      if (isStatusOnValid()) {
        metadata.put(IParameterConstant.ANALYSIS_NAME,nameText.getText());
        getConnectionParams().setMetadate(metadata);
      }
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (purposeText.getText().length() != 0) {
        metadata.put(IParameterConstant.ANALYSIS_PURPOSE,purposeText.getText());
        getConnectionParams().setMetadate(metadata);
      }
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionText.getText().length() != 0) {
        metadata.put(IParameterConstant.ANALYSIS_DESCRIPTION,descriptionText.getText());
        getConnectionParams().setMetadate(metadata);
      }
    }
  }
);
  authorText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkFieldsValue();
      if (isStatusOnValid()) {
        metadata.put(IParameterConstant.ANALYSIS_AUTHOR,authorText.getText());
        getConnectionParams().setMetadate(metadata);
      }
    }
  }
);
  statusText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String selected=((CCombo)e.getSource()).getText();
      metadata.put(IParameterConstant.ANALYSIS_STATUS,selected);
      getConnectionParams().setMetadate(metadata);
    }
  }
);
}","protected void addListeners(){
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkFieldsValue();
      if (isStatusOnValid()) {
        metadata.put(IParameterConstant.ANALYSIS_NAME,nameText.getText());
        getConnectionParams().setMetadate(metadata);
      }
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (purposeText.getText().length() != 0) {
        metadata.put(IParameterConstant.ANALYSIS_PURPOSE,purposeText.getText());
        getConnectionParams().setMetadate(metadata);
      }
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionText.getText().length() != 0) {
        metadata.put(IParameterConstant.ANALYSIS_DESCRIPTION,descriptionText.getText());
        getConnectionParams().setMetadate(metadata);
      }
    }
  }
);
  authorText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      metadata.put(IParameterConstant.ANALYSIS_AUTHOR,authorText.getText());
      getConnectionParams().setMetadate(metadata);
    }
  }
);
  statusText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String selected=((CCombo)e.getSource()).getText();
      metadata.put(IParameterConstant.ANALYSIS_STATUS,selected);
      getConnectionParams().setMetadate(metadata);
    }
  }
);
}",0.9773547751887102
140602,"@Override protected boolean checkFieldsValue(){
  if (lowerText.getText() == ""String_Node_Str"" || higherText.getText() == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
    return false;
  }
  if (!CheckValueUtils.isNumberValue(lowerText.getText()) || !CheckValueUtils.isNumberValue(higherText.getText())) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
    return false;
  }
  updateStatus(IStatus.OK,MSG_OK);
  return true;
}","@Override protected boolean checkFieldsValue(){
  if (lowerText.getText() == ""String_Node_Str"" || higherText.getText() == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
    return false;
  }
  if (!CheckValueUtils.isNumberWithNegativeValue(lowerText.getText()) || !CheckValueUtils.isNumberWithNegativeValue(higherText.getText())) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
    return false;
  }
  updateStatus(IStatus.OK,MSG_OK);
  return true;
}",0.9738562091503268
140603,"@Override protected boolean checkFieldsValue(){
  if (numberTxt.getText() == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
    return false;
  }
  if (!CheckValueUtils.isNumberValue(numberTxt.getText())) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
    return false;
  }
  updateStatus(IStatus.OK,MSG_OK);
  return super.checkFieldsValue();
}","@Override protected boolean checkFieldsValue(){
  if (numberTxt.getText() == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
    return false;
  }
  if (!CheckValueUtils.isNumberOfShownValue(numberTxt.getText())) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
    return false;
  }
  updateStatus(IStatus.OK,MSG_OK);
  return super.checkFieldsValue();
}",0.9905277401894452
140604,"@Override protected boolean checkFieldsValue(){
  if (numberTxt.getText() == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
    return false;
  }
  if (!CheckValueUtils.isNumberValue(numberTxt.getText())) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
    return false;
  }
  updateStatus(IStatus.OK,MSG_OK);
  return true;
}","@Override protected boolean checkFieldsValue(){
  if (numberTxt.getText() == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
    return false;
  }
  if (!CheckValueUtils.isNumberOfShownValue(numberTxt.getText())) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
    return false;
  }
  updateStatus(IStatus.OK,MSG_OK);
  return true;
}",0.9899856938483548
140605,"@Override protected boolean checkFieldsValue(){
  if (numberTxt.getText() == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
    return false;
  }
  if (!CheckValueUtils.isNumberValue(numberTxt.getText())) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
    return false;
  }
  updateStatus(IStatus.OK,MSG_OK);
  return true;
}","@Override protected boolean checkFieldsValue(){
  if (numberTxt.getText() == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,MSG_EMPTY);
    return false;
  }
  if (!CheckValueUtils.isNumberOfShownValue(numberTxt.getText())) {
    updateStatus(IStatus.ERROR,MSG_ONLY_NUMBER);
    return false;
  }
  updateStatus(IStatus.OK,MSG_OK);
  return true;
}",0.9899856938483548
140606,"/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  TreeItem[] items=indicatorItem.getItems();
  for (  TreeItem treeItem : items) {
    treeItem.dispose();
  }
  TreeItem iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + parameters.getTopN());
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseBlank());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isIgnoreCase());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseNulls());
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + dParameters.getDateAggregationType().getName() + ""String_Node_Str"");
  }
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getDataValidDomain() != null));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getIndicatorValidDomain() != null));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getBins() != null));
  tree.getColumn(0).pack();
}","/** 
 * DOC qzhang Comment method ""createIndicatorParameters"".
 * @param indicatorItem
 * @param parameters
 */
private void createIndicatorParameters(TreeItem indicatorItem,IndicatorUnit indicatorUnit){
  TreeItem[] items=indicatorItem.getItems();
  if (indicatorItem != null && !indicatorItem.isDisposed()) {
    for (    TreeItem treeItem : items) {
      treeItem.dispose();
    }
  }
  IndicatorParameters parameters=indicatorUnit.getIndicator().getParameters();
  if (parameters == null) {
    return;
  }
  TreeItem iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + parameters.getTopN());
  TextParameters tParameter=parameters.getTextParameter();
  if (tParameter != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseBlank());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isIgnoreCase());
    item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + tParameter.isUseNulls());
  }
  DateParameters dParameters=parameters.getDateParameters();
  if (dParameters != null) {
    final TreeItem tParamItem=new TreeItem(indicatorItem,SWT.NONE);
    tParamItem.setText(0,""String_Node_Str"");
    TreeItem item=new TreeItem(tParamItem,SWT.NONE);
    item.setText(""String_Node_Str"" + dParameters.getDateAggregationType().getName() + ""String_Node_Str"");
  }
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getDataValidDomain() != null));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getIndicatorValidDomain() != null));
  iParamItem=new TreeItem(indicatorItem,SWT.NONE);
  iParamItem.setText(0,""String_Node_Str"" + (parameters.getBins() != null));
}",0.9075804776739356
140607,"protected void fillAnalysisBuilder(AnalysisBuilder analysisBuilder){
  ConnectionAnalysisParameter parameters=(ConnectionAnalysisParameter)getAnalysisParameter();
  TdDataProvider tdProvider=parameters.getTdDataProvider();
  analysisBuilder.setAnalysisConnection(tdProvider);
  ConnectionIndicator indicator=SchemaFactory.eINSTANCE.createConnectionIndicator();
  indicator.setAnalyzedElement(tdProvider);
  List<TdSchema> tdSchemas=DataProviderHelper.getTdSchema(tdProvider);
  for (  TdSchema schema : tdSchemas) {
    SchemaIndicator createSchemaIndicator=SchemaFactory.eINSTANCE.createSchemaIndicator();
    createSchemaIndicator.setAnalyzedElement(schema);
    indicator.addSchemaIndicator(createSchemaIndicator);
  }
  List<TdCatalog> tdCatalogs=DataProviderHelper.getTdCatalogs(tdProvider);
  for (  TdCatalog tdCatalog : tdCatalogs) {
    SchemaIndicator createSchemaIndicator=SchemaFactory.eINSTANCE.createSchemaIndicator();
    createSchemaIndicator.setAnalyzedElement(tdCatalog);
    indicator.addSchemaIndicator(createSchemaIndicator);
  }
  analysisBuilder.addElementToAnalyze(tdProvider,indicator);
  super.fillAnalysisBuilder(analysisBuilder);
}","@Override protected void fillAnalysisBuilder(AnalysisBuilder analysisBuilder){
  ConnectionAnalysisParameter parameters=(ConnectionAnalysisParameter)getAnalysisParameter();
  TdDataProvider tdProvider=parameters.getTdDataProvider();
  this.analysisBuilder=analysisBuilder;
  analysisBuilder.setAnalysisConnection(tdProvider);
  ConnectionIndicator indicator=SchemaFactory.eINSTANCE.createConnectionIndicator();
  indicator.setAnalyzedElement(tdProvider);
  List<TdSchema> tdSchemas=DataProviderHelper.getTdSchema(tdProvider);
  for (  TdSchema schema : tdSchemas) {
    SchemaIndicator createSchemaIndicator=SchemaFactory.eINSTANCE.createSchemaIndicator();
    createSchemaIndicator.setAnalyzedElement(schema);
    indicator.addSchemaIndicator(createSchemaIndicator);
  }
  List<TdCatalog> tdCatalogs=DataProviderHelper.getTdCatalogs(tdProvider);
  for (  TdCatalog tdCatalog : tdCatalogs) {
    SchemaIndicator createSchemaIndicator=SchemaFactory.eINSTANCE.createSchemaIndicator();
    createSchemaIndicator.setAnalyzedElement(tdCatalog);
    indicator.addSchemaIndicator(createSchemaIndicator);
  }
  analysisBuilder.addElementToAnalyze(tdProvider,indicator);
  super.fillAnalysisBuilder(analysisBuilder);
}",0.9788851351351352
140608,"/** 
 * DOC scorreia Comment method ""getDateAggregatedCompletedString"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param dataFilterExpression
 * @param dateAggregationType
 * @return
 */
private String getDateAggregatedCompletedString(Expression sqlExpression,String colName,String table,DateGrain dateAggregationType){
  int nbExtractedColumns=0;
  String result=""String_Node_Str"";
switch (dateAggregationType) {
case DAY:
    result=dbms().extractDay(colName) + comma(result);
  nbExtractedColumns++;
case WEEK:
result=dbms().extractWeek(colName) + comma(result);
nbExtractedColumns++;
case MONTH:
result=dbms().extractMonth(colName) + comma(result);
nbExtractedColumns++;
case QUARTER:
result=dbms().extractQuarter(colName) + comma(result);
nbExtractedColumns++;
case YEAR:
result=dbms().extractYear(colName) + comma(result);
nbExtractedColumns++;
break;
case NONE:
result=colName;
nbExtractedColumns++;
break;
default :
break;
}
String sql=replaceVariables(sqlExpression.getBody(),result,table);
return sql;
}","/** 
 * DOC scorreia Comment method ""getDateAggregatedCompletedString"".
 * @param indicator
 * @param sqlExpression
 * @param colName
 * @param table
 * @param dataFilterExpression
 * @param dateAggregationType
 * @return
 */
private String getDateAggregatedCompletedString(Expression sqlExpression,String colName,String table,DateGrain dateAggregationType){
  int nbExtractedColumns=0;
  String result=""String_Node_Str"";
  String aliases=""String_Node_Str"";
  String alias;
switch (dateAggregationType) {
case DAY:
    alias=getAlias(colName,DateGrain.DAY);
  result=dbms().extractDay(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case WEEK:
alias=getAlias(colName,DateGrain.WEEK);
result=dbms().extractWeek(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case MONTH:
alias=getAlias(colName,DateGrain.MONTH);
result=dbms().extractMonth(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case QUARTER:
alias=getAlias(colName,DateGrain.QUARTER);
result=dbms().extractQuarter(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
case YEAR:
alias=getAlias(colName,DateGrain.YEAR);
result=dbms().extractYear(colName) + alias + comma(result);
aliases=alias + comma(aliases);
nbExtractedColumns++;
break;
case NONE:
result=colName;
nbExtractedColumns++;
break;
default :
break;
}
String sql=replaceVariablesLow(sqlExpression.getBody(),result,table,aliases);
return sql;
}",0.6645914396887159
140609,"/** 
 * Method ""replaceVariables"".
 * @param sqlGenericString a string with 2 parameters {0} and {1}
 * @param column the string that replaces the {0} parameter
 * @param table the string that replaces the {1} parameter
 * @return the string with the given parameters
 */
private String replaceVariables(String sqlGenericString,String column,String table){
  Object[] arguments={column,table};
  String toFormat=surroundSingleQuotes(sqlGenericString);
  return MessageFormat.format(toFormat,arguments);
}","/** 
 * Method ""replaceVariables"".
 * @param sqlGenericString a string with 2 parameters {0} and {1}
 * @param column the string that replaces the {0} parameter
 * @param table the string that replaces the {1} parameter
 * @return the string with the given parameters
 */
private String replaceVariables(String sqlGenericString,String column,String table){
  Object[] arguments={column,table};
  return replaceVariablesLow(sqlGenericString,arguments);
}",0.8714733542319749
140610,"@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  TaggedValueHelper.setAuthor(pattern,AbstractWizardPage.getConnectionParams().getAuthor());
  TaggedValueHelper.setDescription(AbstractWizardPage.getConnectionParams().getDescription(),pattern);
  TaggedValueHelper.setPurpose(AbstractWizardPage.getConnectionParams().getPurpose(),pattern);
  TaggedValueHelper.setDevStatus(pattern,DevelopmentStatus.get(AbstractWizardPage.getConnectionParams().getStatus()));
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  String cl=mPage2.getComboLang();
  expression.setLanguage(cl);
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  EMFUtil util=EMFSharedResources.getSharedEmfUtil();
  String fname=DqRepositoryViewService.createFilename(name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  IFolder folderResource=AbstractWizardPage.getConnectionParams().getFolderProvider().getFolderResource();
  IFile file=folderResource.getFile(fname);
  location=file.getFullPath();
  if (file.exists()) {
    log.error(""String_Node_Str"" + name + ""String_Node_Str""+ file.getFullPath()+ ""String_Node_Str"");
    return false;
  }
  util.addPoolToResourceSet(file.getFullPath().toString(),pattern);
  util.saveLastResource();
  return true;
}","@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  TaggedValueHelper.setAuthor(pattern,AbstractWizardPage.getConnectionParams().getAuthor());
  TaggedValueHelper.setDescription(AbstractWizardPage.getConnectionParams().getDescription(),pattern);
  TaggedValueHelper.setPurpose(AbstractWizardPage.getConnectionParams().getPurpose(),pattern);
  TaggedValueHelper.setDevStatus(pattern,DevelopmentStatus.get(AbstractWizardPage.getConnectionParams().getStatus()));
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  String cl=mPage2.getComboLang();
  expression.setLanguage(cl);
  regularExpr.setExpression(expression);
  regularExpr.setExpressionType(type.getName());
  pattern.getComponents().add(regularExpr);
  EMFUtil util=EMFSharedResources.getSharedEmfUtil();
  String fname=DqRepositoryViewService.createFilename(name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  IFolder folderResource=AbstractWizardPage.getConnectionParams().getFolderProvider().getFolderResource();
  IFile file=folderResource.getFile(fname);
  location=file.getFullPath();
  if (file.exists()) {
    log.error(""String_Node_Str"" + name + ""String_Node_Str""+ file.getFullPath()+ ""String_Node_Str"");
    return false;
  }
  util.addPoolToResourceSet(file.getFullPath().toString(),pattern);
  util.saveLastResource();
  return true;
}",0.9847209229809792
140611,"/** 
 * DOC qzhang ImportPatternsAction constructor comment.
 */
public ImportPatternsAction(IFolder folder){
  setText(""String_Node_Str"");
  this.folder=folder;
}","/** 
 * DOC qzhang ImportPatternsAction constructor comment.
 */
public ImportPatternsAction(IFolder folder){
  setText(""String_Node_Str"");
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.PATTERN_REG));
  this.folder=folder;
}",0.8170426065162907
140612,"/** 
 * DOC qzhang Comment method ""addComponents"".
 * @param pattern
 * @param reg
 * @param mysql
 * @param string
 */
private void addComponents(Pattern pattern,String reg,String mysql,String oracle){
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  expression.setBody(reg);
  expression.setLanguage(""String_Node_Str"");
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  expression=CoreFactory.eINSTANCE.createExpression();
  expression.setBody(mysql);
  expression.setLanguage(""String_Node_Str"");
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  expression=CoreFactory.eINSTANCE.createExpression();
  expression.setBody(oracle);
  expression.setLanguage(""String_Node_Str"");
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
}","/** 
 * DOC qzhang Comment method ""addComponents"".
 * @param pattern
 * @param reg
 * @param mysql
 * @param string
 */
private void addComponents(Pattern pattern,String reg,String mysql,String oracle){
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  expression.setBody(reg);
  expression.setLanguage(""String_Node_Str"");
  regularExpr.setExpression(expression);
  regularExpr.setExpressionType(ExpressionType.REGEXP.getName());
  pattern.getComponents().add(regularExpr);
  regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  expression=CoreFactory.eINSTANCE.createExpression();
  expression.setBody(mysql);
  expression.setLanguage(""String_Node_Str"");
  regularExpr.setExpression(expression);
  regularExpr.setExpressionType(ExpressionType.REGEXP.getName());
  pattern.getComponents().add(regularExpr);
  regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  expression=CoreFactory.eINSTANCE.createExpression();
  expression.setBody(oracle);
  expression.setLanguage(""String_Node_Str"");
  regularExpr.setExpression(expression);
  regularExpr.setExpressionType(ExpressionType.REGEXP.getName());
  pattern.getComponents().add(regularExpr);
}",0.915456874466268
140613,"@Override public void widgetSelected(SelectionEvent e){
  CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
  IFolder defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.PATTERNS);
  dialog.setInput(defaultPatternFolder);
  dialog.setContainerMode(true);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setSize(80,30);
  dialog.create();
  if (dialog.open() == Window.OK) {
    for (    Object obj : dialog.getResult()) {
      if (obj instanceof IFile) {
        IFile file=(IFile)obj;
        Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
        PatternMatchingIndicator patternMatchingIndicator=PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
        DependenciesHandler.getInstance().setDependencyOn(patternMatchingIndicator,pattern);
        IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
        IndicatorUnit addIndicatorUnit=columnIndicator.addSpecialIndicator(type,patternMatchingIndicator);
        createOneUnit(treeItem,addIndicatorUnit);
        setDirty(true);
      }
    }
  }
}","@Override public void widgetSelected(SelectionEvent e){
  CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
  IProject defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES);
  dialog.setInput(defaultPatternFolder);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFile) {
        IFile file=(IFile)element;
        if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
          return true;
        }
      }
 else       if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        return PatternUtilities.isLibraiesSubfolder(folder,DQStructureManager.PATTERNS,DQStructureManager.SQL_PATTERNS);
      }
      return false;
    }
  }
);
  dialog.setContainerMode(true);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setSize(80,30);
  dialog.create();
  if (dialog.open() == Window.OK) {
    for (    Object obj : dialog.getResult()) {
      if (obj instanceof IFile) {
        IFile file=(IFile)obj;
        IndicatorUnit addIndicatorUnit=PatternUtilities.createIndicatorUnit(file,columnIndicator,analysis);
        createOneUnit(treeItem,addIndicatorUnit);
        setDirty(true);
      }
    }
  }
}",0.5446461652463875
140614,"@Override public String getText(Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
    return pattern.getName();
  }
  if (element instanceof IFolder) {
    return ((IFolder)element).getName();
  }
  return ""String_Node_Str"";
}","@Override public String getText(Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
    if (pattern != null) {
      return pattern.getName();
    }
  }
  if (element instanceof IFolder) {
    return ((IFolder)element).getName();
  }
  return ""String_Node_Str"";
}",0.9506346967559944
140615,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis);
      String helpID=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
      WizardDialog dialog=new WizardDialog(null,wizard);
      WizardDialog dialogWithHelp=HelpUtils.injectHelp(dialog,wizard,helpID,indicator);
      if (dialogWithHelp != null) {
        if (Window.OK == dialogWithHelp.open()) {
          setDirty(wizard.isDirty());
        }
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0 || IndicatorEnum.SqlPatternMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis);
      String helpID=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
      WizardDialog dialog=new WizardDialog(null,wizard);
      WizardDialog dialogWithHelp=HelpUtils.injectHelp(dialog,wizard,helpID,indicator);
      if (dialogWithHelp != null) {
        if (Window.OK == dialogWithHelp.open()) {
          setDirty(wizard.isDirty());
        }
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
}",0.9889415481832544
140616,"private void addItemElements(final ColumnIndicator[] elements){
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    final ColumnIndicator columnIndicator=(ColumnIndicator)elements[i];
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    String columnName=columnIndicator.getTdColumn().getName();
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ columnIndicator.getTdColumn().getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,columnIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(columnIndicator.getTdColumn());
    if (dataminingType == null) {
      dataminingType=MetadataHelper.getDefaultDataminingType(columnIndicator.getTdColumn().getJavaType());
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),columnIndicator.getTdColumn());
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    Button addPatternBtn=new Button(tree,SWT.NONE);
    addPatternBtn.setText(""String_Node_Str"");
    addPatternBtn.pack();
    addPatternBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
        IFolder defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.PATTERNS);
        dialog.setInput(defaultPatternFolder);
        dialog.setContainerMode(true);
        dialog.setTitle(""String_Node_Str"");
        dialog.setMessage(""String_Node_Str"");
        dialog.setSize(80,30);
        dialog.create();
        if (dialog.open() == Window.OK) {
          for (          Object obj : dialog.getResult()) {
            if (obj instanceof IFile) {
              IFile file=(IFile)obj;
              Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
              PatternMatchingIndicator patternMatchingIndicator=PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
              DependenciesHandler.getInstance().setDependencyOn(patternMatchingIndicator,pattern);
              IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
              IndicatorUnit addIndicatorUnit=columnIndicator.addSpecialIndicator(type,patternMatchingIndicator);
              createOneUnit(treeItem,addIndicatorUnit);
              setDirty(true);
            }
          }
        }
      }
    }
);
    addPatternEditor.minimumWidth=WIDTH1_CELL;
    addPatternEditor.setEditor(addPatternBtn,treeItem,2);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(""String_Node_Str"");
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(columnIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(columnIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=WIDTH1_CELL;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,3);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor,addPatternEditor});
    if (columnIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,columnIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}","private void addItemElements(final ColumnIndicator[] elements){
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    final ColumnIndicator columnIndicator=(ColumnIndicator)elements[i];
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    String columnName=columnIndicator.getTdColumn().getName();
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ columnIndicator.getTdColumn().getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,columnIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(columnIndicator.getTdColumn());
    if (dataminingType == null) {
      dataminingType=MetadataHelper.getDefaultDataminingType(columnIndicator.getTdColumn().getJavaType());
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),columnIndicator.getTdColumn());
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    Button addPatternBtn=new Button(tree,SWT.NONE);
    addPatternBtn.setText(""String_Node_Str"");
    addPatternBtn.pack();
    addPatternBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
        IProject defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES);
        dialog.setInput(defaultPatternFolder);
        dialog.addFilter(new ViewerFilter(){
          @Override public boolean select(          Viewer viewer,          Object parentElement,          Object element){
            if (element instanceof IFile) {
              IFile file=(IFile)element;
              if (FactoriesUtil.PATTERN.equals(file.getFileExtension())) {
                return true;
              }
            }
 else             if (element instanceof IFolder) {
              IFolder folder=(IFolder)element;
              return PatternUtilities.isLibraiesSubfolder(folder,DQStructureManager.PATTERNS,DQStructureManager.SQL_PATTERNS);
            }
            return false;
          }
        }
);
        dialog.setContainerMode(true);
        dialog.setTitle(""String_Node_Str"");
        dialog.setMessage(""String_Node_Str"");
        dialog.setSize(80,30);
        dialog.create();
        if (dialog.open() == Window.OK) {
          for (          Object obj : dialog.getResult()) {
            if (obj instanceof IFile) {
              IFile file=(IFile)obj;
              IndicatorUnit addIndicatorUnit=PatternUtilities.createIndicatorUnit(file,columnIndicator,analysis);
              createOneUnit(treeItem,addIndicatorUnit);
              setDirty(true);
            }
          }
        }
      }
    }
);
    addPatternEditor.minimumWidth=WIDTH1_CELL;
    addPatternEditor.setEditor(addPatternBtn,treeItem,2);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(""String_Node_Str"");
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(columnIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(columnIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=WIDTH1_CELL;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,3);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor,addPatternEditor});
    if (columnIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,columnIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}",0.8558219546285346
140617,"@Override public void widgetSelected(SelectionEvent e){
  ElementTreeSelectionDialog dialog=new ElementTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
  IFolder defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.PATTERNS);
  dialog.setInput(defaultPatternFolder);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setSize(80,30);
  dialog.create();
  if (dialog.open() == Window.OK) {
    for (    Object obj : dialog.getResult()) {
      IFile file=(IFile)obj;
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      PatternMatchingIndicator patternMatchingIndicator=PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
      DependenciesHandler.getInstance().setDependencyOn(patternMatchingIndicator,pattern);
      IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
      IndicatorUnit addIndicatorUnit=columnIndicator.addSpecialIndicator(type,patternMatchingIndicator);
      createOneUnit(treeItem,addIndicatorUnit);
      setDirty(true);
    }
  }
}","@Override public void widgetSelected(SelectionEvent e){
  CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
  IFolder defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.PATTERNS);
  dialog.setInput(defaultPatternFolder);
  dialog.setContainerMode(true);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setSize(80,30);
  dialog.create();
  if (dialog.open() == Window.OK) {
    for (    Object obj : dialog.getResult()) {
      if (obj instanceof IFile) {
        IFile file=(IFile)obj;
        Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
        PatternMatchingIndicator patternMatchingIndicator=PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
        DependenciesHandler.getInstance().setDependencyOn(patternMatchingIndicator,pattern);
        IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
        IndicatorUnit addIndicatorUnit=columnIndicator.addSpecialIndicator(type,patternMatchingIndicator);
        createOneUnit(treeItem,addIndicatorUnit);
        setDirty(true);
      }
    }
  }
}",0.9363599513579246
140618,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis){
        @Override public void dispose(){
          activeCount=0;
          super.dispose();
        }
      }
;
      try {
        WizardDialog dialog=new WizardDialog(null,wizard){
          @SuppressWarnings(""String_Node_Str"") @Override public void openTray(          DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
            super.openTray(tray);
            if (tray instanceof HelpTray) {
              HelpTray helpTray=(HelpTray)tray;
              ReusableHelpPart helpPart=helpTray.getHelpPart();
              helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
            }
          }
        }
;
        dialog.setPageSize(300,400);
        dialog.create();
        dialog.getShell().addShellListener(new ShellAdapter(){
          @Override public void shellActivated(          ShellEvent e){
            String string=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
            if (activeCount < 2) {
              Point point=e.widget.getDisplay().getCursorLocation();
              IContext context=HelpSystem.getContext(string);
              IHelpResource[] relatedTopics=context.getRelatedTopics();
              for (              IHelpResource topic : relatedTopics) {
                topic.getLabel();
                topic.getHref();
              }
              IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
              helpSystem.displayContext(context,point.x + 15,point.y);
              activeCount++;
              ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
              if (lastActiveInstance != null) {
                String href=IndicatorParameterTypes.getHref(indicator);
                if (href != null) {
                  lastActiveInstance.showURL(href);
                }
              }
            }
          }
        }
);
        int open=dialog.open();
        if (Window.OK == open) {
          setDirty(wizard.isDirty());
        }
      }
 catch (      AssertionFailedException ex) {
        MessageDialogWithToggle.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis);
      String helpID=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
      WizardDialog dialog=new WizardDialog(null,wizard);
      int open=HelpUtils.injectWithHelp(dialog,wizard,helpID,indicator).open();
      if (Window.OK == open) {
        setDirty(wizard.isDirty());
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
}",0.732031054345104
140619,"public void setElements(final ColumnIndicator[] elements){
  this.tree.dispose();
  this.tree=createTree(this.parentComp);
  tree.setData(VIEWER_KEY,this);
  this.columnIndicators=elements;
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    final ColumnIndicator columnIndicator=(ColumnIndicator)elements[i];
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    String columnName=columnIndicator.getTdColumn().getName();
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ columnIndicator.getTdColumn().getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,columnIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(columnIndicator.getTdColumn());
    if (dataminingType == null) {
      dataminingType=MetadataHelper.getDefaultDataminingType(columnIndicator.getTdColumn().getJavaType());
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),columnIndicator.getTdColumn());
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    Button addPatternBtn=new Button(tree,SWT.NONE);
    addPatternBtn.setText(""String_Node_Str"");
    addPatternBtn.pack();
    addPatternBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        ElementTreeSelectionDialog dialog=new ElementTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
        IFolder defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.PATTERNS);
        dialog.setInput(defaultPatternFolder);
        dialog.setTitle(""String_Node_Str"");
        dialog.setMessage(""String_Node_Str"");
        dialog.setSize(80,30);
        dialog.create();
        if (dialog.open() == Window.OK) {
          for (          Object obj : dialog.getResult()) {
            IFile file=(IFile)obj;
            Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
            PatternMatchingIndicator patternMatchingIndicator=PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
            DependenciesHandler.getInstance().setDependencyOn(patternMatchingIndicator,pattern);
            IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
            IndicatorUnit addIndicatorUnit=columnIndicator.addSpecialIndicator(type,patternMatchingIndicator);
            createOneUnit(treeItem,addIndicatorUnit);
            setDirty(true);
          }
        }
      }
    }
);
    addPatternEditor.minimumWidth=WIDTH1_CELL;
    addPatternEditor.setEditor(addPatternBtn,treeItem,2);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(""String_Node_Str"");
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(columnIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(columnIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=WIDTH1_CELL;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,3);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor,addPatternEditor});
    if (columnIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,columnIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}","public void setElements(final ColumnIndicator[] elements){
  this.tree.dispose();
  this.tree=createTree(this.parentComp);
  tree.setData(VIEWER_KEY,this);
  this.columnIndicators=elements;
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    final ColumnIndicator columnIndicator=(ColumnIndicator)elements[i];
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    String columnName=columnIndicator.getTdColumn().getName();
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ columnIndicator.getTdColumn().getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,columnIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(columnIndicator.getTdColumn());
    if (dataminingType == null) {
      dataminingType=MetadataHelper.getDefaultDataminingType(columnIndicator.getTdColumn().getJavaType());
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),columnIndicator.getTdColumn());
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    Button addPatternBtn=new Button(tree,SWT.NONE);
    addPatternBtn.setText(""String_Node_Str"");
    addPatternBtn.pack();
    addPatternBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
        IFolder defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.PATTERNS);
        dialog.setInput(defaultPatternFolder);
        dialog.setContainerMode(true);
        dialog.setTitle(""String_Node_Str"");
        dialog.setMessage(""String_Node_Str"");
        dialog.setSize(80,30);
        dialog.create();
        if (dialog.open() == Window.OK) {
          for (          Object obj : dialog.getResult()) {
            if (obj instanceof IFile) {
              IFile file=(IFile)obj;
              Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
              PatternMatchingIndicator patternMatchingIndicator=PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
              DependenciesHandler.getInstance().setDependencyOn(patternMatchingIndicator,pattern);
              IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
              IndicatorUnit addIndicatorUnit=columnIndicator.addSpecialIndicator(type,patternMatchingIndicator);
              createOneUnit(treeItem,addIndicatorUnit);
              setDirty(true);
            }
          }
        }
      }
    }
);
    addPatternEditor.minimumWidth=WIDTH1_CELL;
    addPatternEditor.setEditor(addPatternBtn,treeItem,2);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(""String_Node_Str"");
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(columnIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(columnIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=WIDTH1_CELL;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,3);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor,addPatternEditor});
    if (columnIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,columnIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}",0.9810174639331816
140620,"@Override public Image getImage(Object element){
  return ImageLib.getImage(ImageLib.PATTERN_REG);
}","@Override public Image getImage(Object element){
  if (element instanceof IFolder) {
    return ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
  }
  if (element instanceof IFile) {
    return ImageLib.getImage(ImageLib.PATTERN_REG);
  }
  return null;
}",0.5681818181818182
140621,"public void setElements(final ColumnIndicator[] elements){
  this.tree.dispose();
  this.tree=createTree(this.parentComp);
  tree.setData(VIEWER_KEY,this);
  this.columnIndicators=elements;
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    final ColumnIndicator columnIndicator=(ColumnIndicator)elements[i];
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    String columnName=columnIndicator.getTdColumn().getName();
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ columnIndicator.getTdColumn().getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,columnIndicator);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(columnIndicator.getTdColumn());
    if (dataminingType == null) {
      dataminingType=MetadataHelper.getDefaultDataminingType(columnIndicator.getTdColumn().getJavaType());
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),columnIndicator.getTdColumn());
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor addPatternEditor=new TreeEditor(tree);
    Button addPatternBtn=new Button(tree,SWT.NONE);
    addPatternBtn.setText(""String_Node_Str"");
    addPatternBtn.pack();
    addPatternBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        CheckedTreeSelectionDialog dialog=new CheckedTreeSelectionDialog(null,new PatternLabelProvider(),new WorkbenchContentProvider());
        IFolder defaultPatternFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.PATTERNS);
        dialog.setInput(defaultPatternFolder);
        dialog.setContainerMode(true);
        dialog.setTitle(""String_Node_Str"");
        dialog.setMessage(""String_Node_Str"");
        dialog.setSize(80,30);
        dialog.create();
        if (dialog.open() == Window.OK) {
          for (          Object obj : dialog.getResult()) {
            if (obj instanceof IFile) {
              IFile file=(IFile)obj;
              Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
              PatternMatchingIndicator patternMatchingIndicator=PatternIndicatorFactory.createRegexpMatchingIndicator(pattern);
              DependenciesHandler.getInstance().setDependencyOn(patternMatchingIndicator,pattern);
              IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
              IndicatorUnit addIndicatorUnit=columnIndicator.addSpecialIndicator(type,patternMatchingIndicator);
              createOneUnit(treeItem,addIndicatorUnit);
              setDirty(true);
            }
          }
        }
      }
    }
);
    addPatternEditor.minimumWidth=WIDTH1_CELL;
    addPatternEditor.setEditor(addPatternBtn,treeItem,2);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(""String_Node_Str"");
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(columnIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(columnIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=WIDTH1_CELL;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,3);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor,addPatternEditor});
    if (columnIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,columnIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}","public void setElements(final ColumnIndicator[] elements){
  this.tree.dispose();
  this.tree=createTree(this.parentComp);
  tree.setData(VIEWER_KEY,this);
  this.columnIndicators=elements;
  addItemElements(elements);
}",0.079033579033579
140622,"public void addElements(final ColumnIndicator[] elements){
  ColumnIndicator[] newsArray=new ColumnIndicator[this.columnIndicators.length + elements.length];
  System.arraycopy(this.columnIndicators,0,newsArray,0,this.columnIndicators.length);
  for (int i=0; i < elements.length; i++) {
    newsArray[this.columnIndicators.length + i]=elements[i];
  }
  this.setElements(newsArray);
}","public void addElements(final ColumnIndicator[] elements){
  ColumnIndicator[] newsArray=new ColumnIndicator[this.columnIndicators.length + elements.length];
  System.arraycopy(this.columnIndicators,0,newsArray,0,this.columnIndicators.length);
  for (int i=0; i < elements.length; i++) {
    newsArray[this.columnIndicators.length + i]=elements[i];
  }
  this.columnIndicators=newsArray;
  this.addItemElements(elements);
}",0.9232673267326732
140623,"@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  if (preDo()) {
    WizardDialog dialog=new WizardDialog(null,getPredefinedWizard());
    dialog.setPageSize(500,340);
    if (dialog.open() == Window.OK) {
      getMasterPage().getTreeViewer().addElements(getPredefinedColumnIndicator());
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  if (preDo()) {
    WizardDialog dialog=getPredefinedDialog();
    dialog.setPageSize(500,340);
    if (dialog.open() == Window.OK) {
      getMasterPage().getTreeViewer().addElements(getPredefinedColumnIndicator());
    }
  }
}",0.9233278955954324
140624,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis);
      String helpID=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
      WizardDialog dialog=new WizardDialog(null,wizard);
      int open=HelpUtils.injectWithHelp(dialog,wizard,helpID,indicator).open();
      if (Window.OK == open) {
        setDirty(wizard.isDirty());
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.RegexpMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis);
      String helpID=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
      WizardDialog dialog=new WizardDialog(null,wizard);
      int open=HelpUtils.injectHelp(dialog,wizard,helpID,indicator).open();
      if (Window.OK == open) {
        setDirty(wizard.isDirty());
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,3);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
}",0.9993449066491976
140625,"public static Dialog injectWithHelp(WizardDialog dialog,Wizard wizard,String helpID){
  return injectWithHelp(dialog,wizard,helpID,null);
}","public static Dialog injectWithHelp(WizardDialog dialog,Wizard wizard,String helpID){
  return injectHelp(dialog,wizard,helpID,null);
}",0.9854014598540146
140626,"@SuppressWarnings(""String_Node_Str"") @Override public void openTray(DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
  super.openTray(tray);
  if (tray instanceof HelpTray) {
    HelpTray helpTray=(HelpTray)tray;
    ReusableHelpPart helpPart=helpTray.getHelpPart();
    helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void openTray(DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
  super.openTray(tray);
  if (tray instanceof HelpTray) {
    HelpTray helpTray=(HelpTray)tray;
    helpPart=helpTray.getHelpPart();
    helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
  }
}",0.9769959404600812
140627,"@Override public void run(){
  CreatePatternWizard fileWizard=new CreatePatternWizard(folder){
    public void dispose(){
      activeCount=0;
      super.dispose();
    }
  }
;
  WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),fileWizard){
    public void openTray(    DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
      super.openTray(tray);
      if (tray instanceof HelpTray) {
        HelpTray helpTray=(HelpTray)tray;
        ReusableHelpPart helpPart=helpTray.getHelpPart();
        helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
      }
    }
  }
;
  fileWizard.setWindowTitle(getText());
  dialog.create();
  dialog.getShell().addShellListener(new ShellAdapter(){
    public void shellActivated(    ShellEvent e){
      if (activeCount < 2) {
        Point point=e.widget.getDisplay().getCursorLocation();
        IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
        IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
        helpSystem.displayContext(context,point.x + 15,point.y);
        activeCount++;
        ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
        if (lastActiveInstance != null) {
          IHelpResource[] relatedTopics=context.getRelatedTopics();
          String href=relatedTopics[0].getHref();
          lastActiveInstance.showURL(href);
        }
      }
    }
  }
);
  if (WizardDialog.OK == dialog.open()) {
    try {
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(fileWizard.getLocation());
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new FileEditorInput(file),PluginConstant.PATTERN_EDITOR);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  CreatePatternWizard fileWizard=new CreatePatternWizard(folder,type){
    public void dispose(){
      activeCount=0;
      super.dispose();
    }
  }
;
  WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),fileWizard){
    public void openTray(    DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
      super.openTray(tray);
      if (tray instanceof HelpTray) {
        HelpTray helpTray=(HelpTray)tray;
        ReusableHelpPart helpPart=helpTray.getHelpPart();
        helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
      }
    }
  }
;
  fileWizard.setWindowTitle(getText());
  dialog.create();
  dialog.getShell().addShellListener(new ShellAdapter(){
    public void shellActivated(    ShellEvent e){
      if (activeCount < 2) {
        Point point=e.widget.getDisplay().getCursorLocation();
        IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
        IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
        helpSystem.displayContext(context,point.x + 15,point.y);
        activeCount++;
        ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
        if (lastActiveInstance != null) {
          IHelpResource[] relatedTopics=context.getRelatedTopics();
          String href=relatedTopics[0].getHref();
switch (type) {
case SQL_LIKE:
            href=relatedTopics[1].getHref();
          break;
default :
        break;
    }
    lastActiveInstance.showURL(href);
  }
}
}
}
);
if (WizardDialog.OK == dialog.open()) {
try {
folder.refreshLocal(IResource.DEPTH_INFINITE,null);
IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(fileWizard.getLocation());
PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new FileEditorInput(file),PluginConstant.PATTERN_EDITOR);
}
 catch (CoreException e) {
e.printStackTrace();
}
}
}",0.9489240342234898
140628,"public void shellActivated(ShellEvent e){
  if (activeCount < 2) {
    Point point=e.widget.getDisplay().getCursorLocation();
    IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
    IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
    helpSystem.displayContext(context,point.x + 15,point.y);
    activeCount++;
    ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
    if (lastActiveInstance != null) {
      IHelpResource[] relatedTopics=context.getRelatedTopics();
      String href=relatedTopics[0].getHref();
      lastActiveInstance.showURL(href);
    }
  }
}","public void shellActivated(ShellEvent e){
  if (activeCount < 2) {
    Point point=e.widget.getDisplay().getCursorLocation();
    IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
    IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
    helpSystem.displayContext(context,point.x + 15,point.y);
    activeCount++;
    ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
    if (lastActiveInstance != null) {
      IHelpResource[] relatedTopics=context.getRelatedTopics();
      String href=relatedTopics[0].getHref();
switch (type) {
case SQL_LIKE:
        href=relatedTopics[1].getHref();
      break;
default :
    break;
}
lastActiveInstance.showURL(href);
}
}
}",0.9135446685878964
140629,"/** 
 * DOC qzhang AddSqlFileAction constructor comment.
 * @param folder
 */
public CreatePatternAction(IFolder folder){
  setText(""String_Node_Str"");
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.PATTERN_REG));
  this.folder=folder;
}","/** 
 * DOC qzhang AddSqlFileAction constructor comment.
 * @param folder
 * @param type
 */
public CreatePatternAction(IFolder folder,ExpressionType type){
switch (type) {
case SQL_LIKE:
    setText(""String_Node_Str"");
  break;
default :
setText(""String_Node_Str"");
break;
}
setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.PATTERN_REG));
this.folder=folder;
this.type=type;
}",0.7784810126582279
140630,"/** 
 * DOC qzhang CreateSqlFileWizard constructor comment.
 * @param folder
 */
public CreatePatternWizard(IFolder folder){
  this.folder=folder;
}","/** 
 * DOC qzhang CreateSqlFileWizard constructor comment.
 * @param folder
 * @param type
 */
public CreatePatternWizard(IFolder folder,ExpressionType type){
  this.folder=folder;
  this.type=type;
}",0.8481375358166189
140631,"@Override public void addPages(){
  mPage=new CreatePatternWizardPage1(folder);
  AbstractWizardPage.setConnectionParams(new ConnectionParameter());
  mPage.setTitle(""String_Node_Str"");
  mPage.setDescription(""String_Node_Str"");
  mPage.setPageComplete(false);
  mPage2=new CreatePatternWizardPage2();
  mPage2.setTitle(""String_Node_Str"");
  mPage2.setDescription(""String_Node_Str"");
  mPage2.setPageComplete(false);
  addPage(mPage);
  addPage(mPage2);
}","@Override public void addPages(){
  String s=""String_Node_Str"";
switch (type) {
case SQL_LIKE:
    s=""String_Node_Str"";
  break;
default :
break;
}
mPage=new CreatePatternWizardPage1(folder);
AbstractWizardPage.setConnectionParams(new ConnectionParameter());
mPage.setTitle(s + ""String_Node_Str"");
mPage.setDescription(""String_Node_Str"");
mPage.setPageComplete(false);
mPage2=new CreatePatternWizardPage2();
mPage2.setTitle(s + ""String_Node_Str"");
mPage2.setDescription(""String_Node_Str"");
mPage2.setPageComplete(false);
addPage(mPage);
addPage(mPage2);
}",0.8158415841584158
140632,"public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  List<IFile> selectedFiles=new ArrayList<IFile>();
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      selectedFolderName=((IFolder)obj).getName();
      if (selectedFolderName.equals(DQStructureManager.PATTERNS)) {
        menu.add(new CreatePatternAction((IFolder)obj));
      }
    }
 else     if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (file.getFileExtension().equalsIgnoreCase(EXTENSION_PATTERN)) {
      }
    }
  }
  boolean isSelectFile=computeSelectedFiles(treeSelection,selectedFiles);
  if (!isSelectFile && !selectedFiles.isEmpty()) {
  }
}","public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  List<IFile> selectedFiles=new ArrayList<IFile>();
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      selectedFolderName=((IFolder)obj).getName();
      ExpressionType type=null;
      if (selectedFolderName.equals(DQStructureManager.PATTERNS)) {
        type=ExpressionType.REGEXP;
      }
 else       if (selectedFolderName.equals(DQStructureManager.SQL_PATTERNS)) {
        type=ExpressionType.SQL_LIKE;
      }
      if (type != null) {
        menu.add(new CreatePatternAction((IFolder)obj,type));
      }
    }
 else     if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (file.getFileExtension().equalsIgnoreCase(EXTENSION_PATTERN)) {
      }
    }
  }
  boolean isSelectFile=computeSelectedFiles(treeSelection,selectedFiles);
  if (!isSelectFile && !selectedFiles.isEmpty()) {
  }
}",0.8704430734716769
140633,"@Override public void addPages(){
  mPage=new CreateSqlFileWizardPage();
  AbstractWizardPage.setConnectionParams(new ConnectionParameter());
  mPage.setTitle(""String_Node_Str"");
  mPage.setDescription(""String_Node_Str"");
  mPage.setPageComplete(false);
  addPage(mPage);
}","@Override public void addPages(){
  mPage=new CreateSqlFileWizardPage(folder);
  AbstractWizardPage.setConnectionParams(new ConnectionParameter());
  mPage.setTitle(""String_Node_Str"");
  mPage.setDescription(""String_Node_Str"");
  mPage.setPageComplete(false);
  addPage(mPage);
}",0.9891304347826086
140634,"/** 
 * DOC qzhang CreateSqlFileWizardPage constructor comment.
 */
public CreateSqlFileWizardPage(){
  metadata=new HashMap<String,String>();
  setPageComplete(false);
}","/** 
 * DOC qzhang CreateSqlFileWizardPage constructor comment.
 * @param folder
 */
public CreateSqlFileWizardPage(IFolder folder){
  metadata=new HashMap<String,String>();
  setPageComplete(false);
  defaultFolderProviderRes=folder;
}",0.8374384236453202
140635,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(""String_Node_Str"");
  nameText=new Text(container,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label pathLab=new Label(container,SWT.NONE);
  pathLab.setText(""String_Node_Str"");
  Composite pathContainer=new Composite(container,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  button=new Button(pathContainer,SWT.PUSH);
  button.setText(""String_Node_Str"");
  defaultFolderProviderRes=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.SOURCE_FILES);
  pathText.setText(defaultFolderProviderRes.getFullPath().toString());
  setControl(container);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      metadata.put(IParameterConstant.ANALYSIS_NAME,nameText.getText());
      getConnectionParams().setMetadate(metadata);
      setPageComplete(true);
    }
  }
);
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      openFolderSelectionDialog(DQStructureManager.LIBRARIES,DQStructureManager.SOURCE_FILES);
    }
  }
);
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(""String_Node_Str"");
  nameText=new Text(container,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label pathLab=new Label(container,SWT.NONE);
  pathLab.setText(""String_Node_Str"");
  Composite pathContainer=new Composite(container,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  button=new Button(pathContainer,SWT.PUSH);
  button.setText(""String_Node_Str"");
  pathText.setText(defaultFolderProviderRes.getFullPath().toString());
  setControl(container);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      metadata.put(IParameterConstant.ANALYSIS_NAME,nameText.getText());
      getConnectionParams().setMetadate(metadata);
      setPageComplete(true);
    }
  }
);
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      openFolderSelectionDialog(DQStructureManager.LIBRARIES,DQStructureManager.SOURCE_FILES);
    }
  }
);
}",0.6664676022693341
140636,"@Override protected void createFormContent(IManagedForm managedForm){
  final ScrolledForm form=managedForm.getForm();
  Composite body=form.getBody();
  body.setLayout(new GridLayout(2,false));
  topComp=toolkit.createComposite(body);
  GridData anasisData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  topComp.setLayoutData(anasisData);
  topComp.setLayout(new GridLayout(1,false));
  metadataSection=creatMetadataSection(form,topComp);
}","@Override protected void createFormContent(IManagedForm managedForm){
  final ScrolledForm form=managedForm.getForm();
  Composite body=form.getBody();
  body.setLayout(new GridLayout());
  topComp=toolkit.createComposite(body);
  GridData anasisData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  topComp.setLayoutData(anasisData);
  topComp.setLayout(new GridLayout(1,false));
  metadataSection=creatMetadataSection(form,topComp);
}",0.992529348986126
140637,"@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  final ScrolledForm form=managedForm.getForm();
  form.setText(""String_Node_Str"");
  metadataSection.setText(""String_Node_Str"");
  metadataSection.setDescription(""String_Node_Str"");
  createAnalysisColumnsSection(form,topComp);
  createDataFilterSection(form,topComp);
  Composite body=form.getBody();
  Composite previewComp=toolkit.createComposite(body);
  GridData previewData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  previewComp.setLayoutData(previewData);
  previewComp.setLayout(new GridLayout());
  createPreviewSection(form,previewComp);
  GridData gdBtn=new GridData();
  gdBtn.horizontalAlignment=SWT.CENTER;
  gdBtn.horizontalSpan=2;
  gdBtn.widthHint=120;
  Button runBtn=toolkit.createButton(form.getBody(),""String_Node_Str"",SWT.NONE);
  runBtn.setLayoutData(gdBtn);
  runBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new RunAnalysisAction().run();
      while (!RunAnalysisAction.finishFlag) {
        try {
          Thread.sleep(3000);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
      refreshChart(form);
    }
  }
);
}","@Override protected void createFormContent(IManagedForm managedForm){
  final ScrolledForm form=managedForm.getForm();
  Composite body=form.getBody();
  body.setLayout(new GridLayout(2,false));
  topComp=toolkit.createComposite(body);
  GridData anasisData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  topComp.setLayoutData(anasisData);
  topComp.setLayout(new GridLayout(1,false));
  metadataSection=creatMetadataSection(form,topComp);
  form.setText(""String_Node_Str"");
  metadataSection.setText(""String_Node_Str"");
  metadataSection.setDescription(""String_Node_Str"");
  createAnalysisColumnsSection(form,topComp);
  createDataFilterSection(form,topComp);
  Composite previewComp=toolkit.createComposite(body);
  GridData previewData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  previewComp.setLayoutData(previewData);
  previewComp.setLayout(new GridLayout());
  createPreviewSection(form,previewComp);
  GridData gdBtn=new GridData();
  gdBtn.horizontalAlignment=SWT.CENTER;
  gdBtn.horizontalSpan=2;
  gdBtn.widthHint=120;
  Button runBtn=toolkit.createButton(form.getBody(),""String_Node_Str"",SWT.NONE);
  runBtn.setLayoutData(gdBtn);
  runBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new RunAnalysisAction().run();
      while (!RunAnalysisAction.finishFlag) {
        try {
          Thread.sleep(3000);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
      refreshChart(form);
    }
  }
);
}",0.6888196607822776
140638,"/** 
 * @param editor
 * @param id
 * @param title
 */
public ConnectionMasterDetailsPage(FormEditor editor,String id,String title){
  super(editor,id,title);
}","public ConnectionMasterDetailsPage(FormEditor editor,String id,String title){
  super(editor,id,title);
}",0.7924528301886793
140639,"@Override public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  savePattern();
  this.isDirty=false;
}","@Override public void doSave(IProgressMonitor monitor){
  super.doSave(monitor);
  if (savePattern()) {
    this.isDirty=false;
  }
}",0.9448818897637796
140640,"protected void createFormContent(IManagedForm managedForm){
  final ScrolledForm form=managedForm.getForm();
  Composite body=form.getBody();
  form.setText(""String_Node_Str"");
  body.setLayout(new GridLayout());
  topComp=toolkit.createComposite(body);
  GridData anasisData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  topComp.setLayoutData(anasisData);
  topComp.setLayout(new GridLayout(1,false));
  metadataSection=creatMetadataSection(form,topComp);
  metadataSection.setText(""String_Node_Str"");
  metadataSection.setDescription(""String_Node_Str"");
  creatPatternDefinitionSection(form,topComp);
}","protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  final ScrolledForm form=managedForm.getForm();
  form.setText(""String_Node_Str"");
  metadataSection.setText(""String_Node_Str"");
  metadataSection.setDescription(""String_Node_Str"");
  creatPatternDefinitionSection(form,topComp);
}",0.2461220268872802
140641,"private void savePattern(){
  this.pattern.getComponents().clear();
  this.pattern.getComponents().addAll(tempPatternComponents);
  EMFUtil.saveSingleResource(pattern.eResource());
}","private boolean savePattern(){
  this.pattern.getComponents().clear();
  this.pattern.getComponents().addAll(tempPatternComponents);
  EList<PatternComponent> components=this.pattern.getComponents();
  List<String> existLanguage=new ArrayList<String>();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    String language=regularExpress.getExpression().getLanguage();
    if ((regularExpress.getExpression().getBody() == null) || (!regularExpress.getExpression().getBody().matches(""String_Node_Str""))) {
      MessageDialog.openWarning(null,""String_Node_Str"",""String_Node_Str"");
      return false;
    }
    if (existLanguage.contains(language)) {
      MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"" + language);
      return false;
    }
 else {
      existLanguage.add(language);
    }
  }
  EMFUtil.saveSingleResource(pattern.eResource());
  return true;
}",0.3064798598949212
140642,"@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(""String_Node_Str"" + analysis.getName() + ""String_Node_Str"",IProgressMonitor.UNKNOWN);
  final ReturnCode executed=finalExec.execute(finalAnalysis);
  monitor.done();
  if (executed.isOk()) {
    if (log.isInfoEnabled()) {
      int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
      log.info(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    }
    AnaResourceFileHelper.getInstance().save(finalAnalysis);
    return Status.OK_STATUS;
  }
 else {
    int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
    log.warn(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MessageDialogWithToggle.openError(null,""String_Node_Str"",""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed.getMessage());
      }
    }
);
    return Status.CANCEL_STATUS;
  }
}","@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(""String_Node_Str"" + analysis.getName() + ""String_Node_Str"",IProgressMonitor.UNKNOWN);
  final ReturnCode executed=finalExec.execute(finalAnalysis);
  monitor.done();
  if (executed.isOk()) {
    if (log.isInfoEnabled()) {
      int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
      log.info(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    }
    AnaResourceFileHelper.getInstance().save(finalAnalysis);
    if (page != null) {
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          page.refreshChart(page.getForm());
        }
      }
);
    }
    return Status.OK_STATUS;
  }
 else {
    int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
    log.warn(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MessageDialogWithToggle.openError(null,""String_Node_Str"",""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed.getMessage());
      }
    }
);
    return Status.CANCEL_STATUS;
  }
}",0.9364161849710982
140643,"@Override public void widgetSelected(SelectionEvent e){
  new RunAnalysisAction().run();
  while (!RunAnalysisAction.finishFlag) {
    try {
      Thread.sleep(3000);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  refreshChart(form);
}","@Override public void widgetSelected(SelectionEvent e){
  new RunAnalysisAction().run();
}",0.5113636363636364
140644,"@Override protected void createFormContent(IManagedForm managedForm){
  final ScrolledForm form=managedForm.getForm();
  Composite body=form.getBody();
  body.setLayout(new GridLayout(2,false));
  topComp=toolkit.createComposite(body);
  GridData anasisData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  topComp.setLayoutData(anasisData);
  topComp.setLayout(new GridLayout(1,false));
  metadataSection=creatMetadataSection(form,topComp);
  form.setText(""String_Node_Str"");
  metadataSection.setText(""String_Node_Str"");
  metadataSection.setDescription(""String_Node_Str"");
  createAnalysisColumnsSection(form,topComp);
  createDataFilterSection(form,topComp);
  Composite previewComp=toolkit.createComposite(body);
  GridData previewData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  previewComp.setLayoutData(previewData);
  previewComp.setLayout(new GridLayout());
  createPreviewSection(form,previewComp);
  GridData gdBtn=new GridData();
  gdBtn.horizontalAlignment=SWT.CENTER;
  gdBtn.horizontalSpan=2;
  gdBtn.widthHint=120;
  Button runBtn=toolkit.createButton(form.getBody(),""String_Node_Str"",SWT.NONE);
  runBtn.setLayoutData(gdBtn);
  runBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new RunAnalysisAction().run();
      while (!RunAnalysisAction.finishFlag) {
        try {
          Thread.sleep(3000);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
      refreshChart(form);
    }
  }
);
}","@Override protected void createFormContent(IManagedForm managedForm){
  this.form=managedForm.getForm();
  Composite body=form.getBody();
  body.setLayout(new GridLayout(2,false));
  topComp=toolkit.createComposite(body);
  GridData anasisData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  topComp.setLayoutData(anasisData);
  topComp.setLayout(new GridLayout(1,false));
  metadataSection=creatMetadataSection(form,topComp);
  form.setText(""String_Node_Str"");
  metadataSection.setText(""String_Node_Str"");
  metadataSection.setDescription(""String_Node_Str"");
  createAnalysisColumnsSection(form,topComp);
  createDataFilterSection(form,topComp);
  Composite previewComp=toolkit.createComposite(body);
  GridData previewData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  previewComp.setLayoutData(previewData);
  previewComp.setLayout(new GridLayout());
  createPreviewSection(form,previewComp);
  GridData gdBtn=new GridData();
  gdBtn.horizontalAlignment=SWT.CENTER;
  gdBtn.horizontalSpan=2;
  gdBtn.widthHint=120;
  Button runBtn=toolkit.createButton(form.getBody(),""String_Node_Str"",SWT.NONE);
  runBtn.setLayoutData(gdBtn);
  runBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new RunAnalysisAction().run();
    }
  }
);
}",0.9192124915139172
140645,"public void linkActivated(HyperlinkEvent e){
  for (  Control control : chartComposite.getChildren()) {
    control.dispose();
  }
  boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
  if (!analysisStatue) {
    boolean returnCode=MessageDialog.openConfirm(null,""String_Node_Str"",""String_Node_Str"");
    if (returnCode) {
      new RunAnalysisAction().run();
      createPreviewCharts(form,chartComposite,true);
      message.setVisible(false);
    }
 else {
      createPreviewCharts(form,chartComposite,false);
      message.setText(""String_Node_Str"" + ""String_Node_Str"");
      message.setVisible(true);
    }
  }
 else {
    createPreviewCharts(form,chartComposite,true);
  }
  chartComposite.layout();
  form.reflow(true);
}","public void linkActivated(HyperlinkEvent e){
  for (  Control control : chartComposite.getChildren()) {
    control.dispose();
  }
  boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
  if (!analysisStatue) {
    boolean returnCode=MessageDialog.openConfirm(null,""String_Node_Str"",""String_Node_Str"");
    if (returnCode) {
      new RunAnalysisAction().run();
      message.setVisible(false);
    }
 else {
      createPreviewCharts(form,chartComposite,false);
      message.setText(""String_Node_Str"" + ""String_Node_Str"");
      message.setVisible(true);
    }
  }
 else {
    createPreviewCharts(form,chartComposite,true);
  }
  chartComposite.layout();
  form.reflow(true);
}",0.9668127739511584
140646,"public void refreshChart(ScrolledForm form){
  if (chartComposite != null) {
    try {
      for (      Control control : chartComposite.getChildren()) {
        control.dispose();
      }
      createPreviewCharts(form,chartComposite,true);
      chartComposite.layout();
      form.reflow(true);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}","/** 
 * DOC zqin Comment method ""refreshChart"".
 * @param form
 */
public void refreshChart(ScrolledForm form){
  if (chartComposite != null) {
    try {
      for (      Control control : chartComposite.getChildren()) {
        control.dispose();
      }
      createPreviewCharts(form,chartComposite,true);
      chartComposite.layout();
      form.reflow(true);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}",0.9171817058096416
140647,"void createPreviewSection(final ScrolledForm form,Composite parent){
  Section section=createSection(form,parent,""String_Node_Str"",true,""String_Node_Str"");
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  ImageHyperlink refreshBtn=toolkit.createImageHyperlink(sectionClient,SWT.NONE);
  refreshBtn.setText(""String_Node_Str"");
  refreshBtn.setImage(ImageLib.getImage(ImageLib.SECTION_PREVIEW));
  final Label message=toolkit.createLabel(sectionClient,""String_Node_Str"");
  message.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  message.setVisible(false);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(sectionClient);
  chartComposite=toolkit.createComposite(sectionClient);
  chartComposite.setLayout(new GridLayout());
  chartComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Analysis analysis=analysisHandler.getAnalysis();
  refreshBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      for (      Control control : chartComposite.getChildren()) {
        control.dispose();
      }
      boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
      if (!analysisStatue) {
        boolean returnCode=MessageDialog.openConfirm(null,""String_Node_Str"",""String_Node_Str"");
        if (returnCode) {
          new RunAnalysisAction().run();
          createPreviewCharts(form,chartComposite,true);
          message.setVisible(false);
        }
 else {
          createPreviewCharts(form,chartComposite,false);
          message.setText(""String_Node_Str"" + ""String_Node_Str"");
          message.setVisible(true);
        }
      }
 else {
        createPreviewCharts(form,chartComposite,true);
      }
      chartComposite.layout();
      form.reflow(true);
    }
  }
);
  section.setClient(sectionClient);
}","void createPreviewSection(final ScrolledForm form,Composite parent){
  Section section=createSection(form,parent,""String_Node_Str"",true,""String_Node_Str"");
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  ImageHyperlink refreshBtn=toolkit.createImageHyperlink(sectionClient,SWT.NONE);
  refreshBtn.setText(""String_Node_Str"");
  refreshBtn.setImage(ImageLib.getImage(ImageLib.SECTION_PREVIEW));
  final Label message=toolkit.createLabel(sectionClient,""String_Node_Str"");
  message.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  message.setVisible(false);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(sectionClient);
  chartComposite=toolkit.createComposite(sectionClient);
  chartComposite.setLayout(new GridLayout());
  chartComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Analysis analysis=analysisHandler.getAnalysis();
  refreshBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      for (      Control control : chartComposite.getChildren()) {
        control.dispose();
      }
      boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
      if (!analysisStatue) {
        boolean returnCode=MessageDialog.openConfirm(null,""String_Node_Str"",""String_Node_Str"");
        if (returnCode) {
          new RunAnalysisAction().run();
          message.setVisible(false);
        }
 else {
          createPreviewCharts(form,chartComposite,false);
          message.setText(""String_Node_Str"" + ""String_Node_Str"");
          message.setVisible(true);
        }
      }
 else {
        createPreviewCharts(form,chartComposite,true);
      }
      chartComposite.layout();
      form.reflow(true);
    }
  }
);
  section.setClient(sectionClient);
}",0.9857606794903824
140648,"@Override public void addPages(){
  mPage=new CreatePatternWizardPage1();
  AbstractWizardPage.setConnectionParams(new ConnectionParameter());
  mPage.setTitle(""String_Node_Str"");
  mPage.setDescription(""String_Node_Str"");
  mPage.setPageComplete(false);
  mPage2=new CreatePatternWizardPage2();
  AbstractWizardPage.setConnectionParams(new ConnectionParameter());
  mPage2.setTitle(""String_Node_Str"");
  mPage2.setDescription(""String_Node_Str"");
  mPage2.setPageComplete(false);
  addPage(mPage);
  addPage(mPage2);
}","@Override public void addPages(){
  mPage=new CreatePatternWizardPage1(folder);
  AbstractWizardPage.setConnectionParams(new ConnectionParameter());
  mPage.setTitle(""String_Node_Str"");
  mPage.setDescription(""String_Node_Str"");
  mPage.setPageComplete(false);
  mPage2=new CreatePatternWizardPage2();
  mPage2.setTitle(""String_Node_Str"");
  mPage2.setDescription(""String_Node_Str"");
  mPage2.setPageComplete(false);
  addPage(mPage);
  addPage(mPage2);
}",0.9229188078108942
140649,"@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  TaggedValueHelper.setAuthor(pattern,AbstractWizardPage.getConnectionParams().getAuthor());
  TaggedValueHelper.setDescription(AbstractWizardPage.getConnectionParams().getDescription(),pattern);
  TaggedValueHelper.setPurpose(AbstractWizardPage.getConnectionParams().getPurpose(),pattern);
  TaggedValueHelper.setDevStatus(pattern,DevelopmentStatus.get(AbstractWizardPage.getConnectionParams().getStatus()));
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  String cl=mPage2.getComboLang();
  expression.setLanguage(cl);
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  EMFUtil util=EMFSharedResources.getSharedEmfUtil();
  String fname=DqRepositoryViewService.createFilename(name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  IFile file=folder.getFile(fname);
  location=file.getFullPath();
  if (file.exists()) {
    log.error(""String_Node_Str"" + name + ""String_Node_Str""+ file.getFullPath()+ ""String_Node_Str"");
    return false;
  }
  util.addPoolToResourceSet(file.getFullPath().toString(),pattern);
  util.saveLastResource();
  return true;
}","@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  TaggedValueHelper.setAuthor(pattern,AbstractWizardPage.getConnectionParams().getAuthor());
  TaggedValueHelper.setDescription(AbstractWizardPage.getConnectionParams().getDescription(),pattern);
  TaggedValueHelper.setPurpose(AbstractWizardPage.getConnectionParams().getPurpose(),pattern);
  TaggedValueHelper.setDevStatus(pattern,DevelopmentStatus.get(AbstractWizardPage.getConnectionParams().getStatus()));
  IFolder folderResource=AbstractWizardPage.getConnectionParams().getFolderProvider().getFolderResource();
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  String cl=mPage2.getComboLang();
  expression.setLanguage(cl);
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  EMFUtil util=EMFSharedResources.getSharedEmfUtil();
  String fname=DqRepositoryViewService.createFilename(name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  IFile file=folderResource.getFile(fname);
  location=file.getFullPath();
  if (file.exists()) {
    log.error(""String_Node_Str"" + name + ""String_Node_Str""+ file.getFullPath()+ ""String_Node_Str"");
    return false;
  }
  util.addPoolToResourceSet(file.getFullPath().toString(),pattern);
  util.saveLastResource();
  return true;
}",0.9622083470259613
140650,"@Override public void setVisible(boolean visible){
  if (defaultFolderProviderRes != null) {
    FolderProvider defaultFolder=new FolderProvider();
    defaultFolder.setFolderResource(defaultFolderProviderRes);
    getConnectionParams().setFolderProvider(defaultFolder);
  }
  super.setVisible(visible);
}","@Override public void setVisible(boolean visible){
  if (defaultFolderProviderRes != null) {
    FolderProvider folderProvider=getConnectionParams().getFolderProvider();
    if (folderProvider == null) {
      folderProvider=new FolderProvider();
    }
    folderProvider.setFolderResource(defaultFolderProviderRes);
    getConnectionParams().setFolderProvider(folderProvider);
  }
  super.setVisible(visible);
}",0.7670850767085077
140651,"/** 
 * DOC qzhang CreateSqlFileWizardPage constructor comment.
 */
public CreatePatternWizardPage1(){
  metadata=new HashMap<String,String>();
  setPageComplete(false);
}","/** 
 * DOC qzhang CreatePatternWizardPage1 constructor comment.
 * @param folder
 */
public CreatePatternWizardPage1(IFolder folder){
  this();
  this.defaultFolderProviderRes=folder;
}",0.6554621848739496
140652,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayout(new FillLayout());
  super.createControl(container);
  defaultFolderProviderRes=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.PATTERNS);
  pathText.setText(defaultFolderProviderRes.getFullPath().toString());
  setControl(container);
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      openFolderSelectionDialog(DQStructureManager.LIBRARIES,DQStructureManager.PATTERNS);
    }
  }
);
  if (getControl() != null) {
    try {
      PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(),HelpPlugin.PATTERN_CONTEXT_HELP_ID);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayout(new FillLayout());
  super.createControl(container);
  pathText.setText(defaultFolderProviderRes.getFullPath().toString());
  setControl(container);
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      openFolderSelectionDialog(DQStructureManager.LIBRARIES,DQStructureManager.PATTERNS);
    }
  }
);
  if (getControl() != null) {
    try {
      PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(),HelpPlugin.PATTERN_CONTEXT_HELP_ID);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.6266751754945756
140653,"@Override public void setVisible(boolean visible){
  if (defaultFolderProviderRes != null) {
    FolderProvider defaultFolder=new FolderProvider();
    defaultFolder.setFolderResource(defaultFolderProviderRes);
    getConnectionParams().setFolderProvider(defaultFolder);
  }
  super.setVisible(visible);
}","@Override public void setVisible(boolean visible){
  if (defaultFolderProviderRes != null) {
    FolderProvider folderProvider=getConnectionParams().getFolderProvider();
    if (folderProvider == null) {
      folderProvider=new FolderProvider();
    }
    folderProvider.setFolderResource(defaultFolderProviderRes);
    getConnectionParams().setFolderProvider(folderProvider);
  }
  super.setVisible(visible);
}",0.7670850767085077
140654,"@Override public void run(){
  CreatePatternWizard fileWizard=new CreatePatternWizard(folder){
    public void dispose(){
      activeCount=0;
      super.dispose();
    }
  }
;
  WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),fileWizard){
    public void openTray(    DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
      super.openTray(tray);
      if (tray instanceof HelpTray) {
        HelpTray helpTray=(HelpTray)tray;
        ReusableHelpPart helpPart=helpTray.getHelpPart();
        helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
      }
    }
  }
;
  fileWizard.setWindowTitle(getText());
  dialog.create();
  dialog.getShell().addShellListener(new ShellAdapter(){
    public void shellActivated(    ShellEvent e){
      if (activeCount < 2) {
        Point point=e.widget.getDisplay().getCursorLocation();
        IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
        IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
        helpSystem.displayContext(context,point.x + 15,point.y);
        activeCount++;
        ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
        if (lastActiveInstance != null) {
          IHelpResource[] relatedTopics=context.getRelatedTopics();
          String href=relatedTopics[0].getHref();
          lastActiveInstance.showURL(href);
        }
      }
    }
  }
);
  if (WizardDialog.OK == dialog.open()) {
    try {
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      IFile file=folder.getFile(fileWizard.getLocation().lastSegment());
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new FileEditorInput(file),PluginConstant.PATTERN_EDITOR);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  CreatePatternWizard fileWizard=new CreatePatternWizard(folder){
    public void dispose(){
      activeCount=0;
      super.dispose();
    }
  }
;
  WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),fileWizard){
    public void openTray(    DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
      super.openTray(tray);
      if (tray instanceof HelpTray) {
        HelpTray helpTray=(HelpTray)tray;
        ReusableHelpPart helpPart=helpTray.getHelpPart();
        helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
      }
    }
  }
;
  fileWizard.setWindowTitle(getText());
  dialog.create();
  dialog.getShell().addShellListener(new ShellAdapter(){
    public void shellActivated(    ShellEvent e){
      if (activeCount < 2) {
        Point point=e.widget.getDisplay().getCursorLocation();
        IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
        IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
        helpSystem.displayContext(context,point.x + 15,point.y);
        activeCount++;
        ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
        if (lastActiveInstance != null) {
          IHelpResource[] relatedTopics=context.getRelatedTopics();
          String href=relatedTopics[0].getHref();
          lastActiveInstance.showURL(href);
        }
      }
    }
  }
);
  if (WizardDialog.OK == dialog.open()) {
    try {
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(fileWizard.getLocation());
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new FileEditorInput(file),PluginConstant.PATTERN_EDITOR);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}",0.9841101694915254
140655,"@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  TaggedValueHelper.setAuthor(pattern,AbstractWizardPage.getConnectionParams().getAuthor());
  TaggedValueHelper.setDescription(AbstractWizardPage.getConnectionParams().getDescription(),pattern);
  TaggedValueHelper.setPurpose(AbstractWizardPage.getConnectionParams().getPurpose(),pattern);
  TaggedValueHelper.setDevStatus(pattern,DevelopmentStatus.get(AbstractWizardPage.getConnectionParams().getStatus()));
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  String cl=mPage2.getComboLang();
  expression.setLanguage(cl);
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  EMFUtil util=EMFSharedResources.getSharedEmfUtil();
  location=folder.getLocation();
  String fname=DqRepositoryViewService.createFilename(name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  IFile file=folder.getFile(fname);
  if (file.exists()) {
    log.error(""String_Node_Str"" + name + ""String_Node_Str""+ file.getFullPath()+ ""String_Node_Str"");
    return false;
  }
  util.addPoolToResourceSet(file.getFullPath().toString(),pattern);
  util.saveLastResource();
  return true;
}","@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  TaggedValueHelper.setAuthor(pattern,AbstractWizardPage.getConnectionParams().getAuthor());
  TaggedValueHelper.setDescription(AbstractWizardPage.getConnectionParams().getDescription(),pattern);
  TaggedValueHelper.setPurpose(AbstractWizardPage.getConnectionParams().getPurpose(),pattern);
  TaggedValueHelper.setDevStatus(pattern,DevelopmentStatus.get(AbstractWizardPage.getConnectionParams().getStatus()));
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  String cl=mPage2.getComboLang();
  expression.setLanguage(cl);
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  EMFUtil util=EMFSharedResources.getSharedEmfUtil();
  String fname=DqRepositoryViewService.createFilename(name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  IFile file=folder.getFile(fname);
  location=file.getFullPath();
  if (file.exists()) {
    log.error(""String_Node_Str"" + name + ""String_Node_Str""+ file.getFullPath()+ ""String_Node_Str"");
    return false;
  }
  util.addPoolToResourceSet(file.getFullPath().toString(),pattern);
  util.saveLastResource();
  return true;
}",0.9781569965870308
140656,"public void run(){
  parentCreate();
  fViewer.setCheckedElements(getInitialElementSelections().toArray());
  updateOKStatus();
}","public void run(){
  parentCreate();
  fViewer.setCheckedElements(getInitialElementSelections().toArray());
  fViewer.getTree().addTreeListener(new TreeAdapter(){
    @Override public void treeExpanded(    TreeEvent e){
      TreeItem item=(TreeItem)e.item;
      if (!item.getText().endsWith(""String_Node_Str"")) {
        Object obj=item.getData();
        if (obj instanceof TableFolderNode || obj instanceof ViewFolderNode || obj instanceof ColumnFolderNode) {
          item.setText(item.getText() + ""String_Node_Str"" + item.getItemCount()+ ""String_Node_Str"");
          fViewer.getTree().layout();
        }
      }
      super.treeExpanded(e);
    }
  }
);
  updateOKStatus();
}",0.3173431734317343
140657,"public void create(){
  BusyIndicator.showWhile(null,new Runnable(){
    public void run(){
      parentCreate();
      fViewer.setCheckedElements(getInitialElementSelections().toArray());
      updateOKStatus();
    }
  }
);
}","public void create(){
  BusyIndicator.showWhile(null,new Runnable(){
    public void run(){
      parentCreate();
      fViewer.setCheckedElements(getInitialElementSelections().toArray());
      fViewer.getTree().addTreeListener(new TreeAdapter(){
        @Override public void treeExpanded(        TreeEvent e){
          TreeItem item=(TreeItem)e.item;
          if (!item.getText().endsWith(""String_Node_Str"")) {
            Object obj=item.getData();
            if (obj instanceof TableFolderNode || obj instanceof ViewFolderNode || obj instanceof ColumnFolderNode) {
              item.setText(item.getText() + ""String_Node_Str"" + item.getItemCount()+ ""String_Node_Str"");
              fViewer.getTree().layout();
            }
          }
          super.treeExpanded(e);
        }
      }
);
      updateOKStatus();
    }
  }
);
}",0.4262910798122066
140658,"public String getText(Object element){
  if (element instanceof IContainer) {
    return ((IContainer)element).getName();
  }
 else   if (element instanceof IFolderNode) {
    IFolderNode node=((IFolderNode)element);
    if (node.isLoaded()) {
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + ((IFolderNode)element).getChildren().length+ ""String_Node_Str"";
    }
 else {
      return ((IFolderNode)element).getName();
    }
  }
  String text=super.getText(element);
  if (text.endsWith(PluginConstant.PRV_SUFFIX)) {
    IFile file=(IFile)element;
    TypedReturnCode<TdDataProvider> rc=PrvResourceFileHelper.getInstance().getTdProvider(file);
    String decorateText=PluginConstant.EMPTY_STRING;
    if (rc.isOk()) {
      decorateText=rc.getObject().getName();
    }
 else {
      log.warn(rc.getMessage());
    }
    return decorateText;
  }
  if (element instanceof TdTable) {
    text=text + ""String_Node_Str"" + TableHelper.getColumns((TdTable)element).size()+ ""String_Node_Str"";
  }
  if (element instanceof TdView) {
    text=text + ""String_Node_Str"" + ViewHelper.getColumns((TdView)element).size()+ ""String_Node_Str"";
  }
  return text;
}","public String getText(Object element){
  if (element instanceof IContainer) {
    return ((IContainer)element).getName();
  }
 else   if (element instanceof IFolderNode) {
    return ((IFolderNode)element).getName();
  }
  String text=super.getText(element);
  if (text.endsWith(PluginConstant.PRV_SUFFIX)) {
    IFile file=(IFile)element;
    TypedReturnCode<TdDataProvider> rc=PrvResourceFileHelper.getInstance().getTdProvider(file);
    String decorateText=PluginConstant.EMPTY_STRING;
    if (rc.isOk()) {
      decorateText=rc.getObject().getName();
    }
 else {
      log.warn(rc.getMessage());
    }
    return decorateText;
  }
  return text;
}",0.6736378646119978
140659,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  this.addViewerFilter(EMFObjFilter.FILTER_ID);
  this.addViewerFilter(ReportingFilter.FILTER_ID);
  adjustFilter();
  activateContext();
  this.getCommonViewer().setSorter(null);
  this.getCommonViewer().getTree().addTreeListener(new TreeAdapter(){
    @Override public void treeExpanded(    TreeEvent e){
      TreeItem item=(TreeItem)e.item;
      if (!item.getText().endsWith(""String_Node_Str"")) {
        Object obj=item.getData();
        if (obj instanceof TableFolderNode || obj instanceof ViewFolderNode || obj instanceof ColumnFolderNode) {
          item.setText(item.getText() + ""String_Node_Str"" + item.getItemCount()+ ""String_Node_Str"");
          getCommonViewer().getTree().layout();
        }
      }
      super.treeExpanded(e);
    }
  }
);
  this.getCommonViewer().getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      Tree tree=(Tree)e.getSource();
      Point point=new Point(e.x,e.y);
      TreeItem item=tree.getItem(point);
      if (!item.getText().endsWith(""String_Node_Str"")) {
        Object obj=item.getData();
        if (obj instanceof AbstractFolderNode) {
          AbstractFolderNode node=(AbstractFolderNode)obj;
          node.loadChildren();
          Object[] children=node.getChildren();
          if (children != null) {
            item.setText(item.getText() + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
          }
          getCommonViewer().getTree().layout();
        }
      }
      super.mouseDoubleClick(e);
    }
  }
);
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  this.addViewerFilter(EMFObjFilter.FILTER_ID);
  this.addViewerFilter(ReportingFilter.FILTER_ID);
  adjustFilter();
  activateContext();
  this.getCommonViewer().setSorter(null);
  this.getCommonViewer().getTree().addTreeListener(new TreeAdapter(){
    @Override public void treeExpanded(    TreeEvent e){
      TreeItem item=(TreeItem)e.item;
      if (!item.getText().endsWith(""String_Node_Str"")) {
        Object obj=item.getData();
        if (obj instanceof TableFolderNode || obj instanceof ViewFolderNode || obj instanceof ColumnFolderNode) {
          item.setText(item.getText() + ""String_Node_Str"" + item.getItemCount()+ ""String_Node_Str"");
          getCommonViewer().getTree().layout();
        }
      }
      super.treeExpanded(e);
    }
  }
);
  this.getCommonViewer().getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      Tree tree=(Tree)e.getSource();
      Point point=new Point(e.x,e.y);
      TreeItem item=tree.getItem(point);
      if (item != null && !item.getText().endsWith(""String_Node_Str"")) {
        Object obj=item.getData();
        if (obj instanceof AbstractFolderNode) {
          AbstractFolderNode node=(AbstractFolderNode)obj;
          node.loadChildren();
          Object[] children=node.getChildren();
          if (children != null) {
            item.setText(item.getText() + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
          }
          getCommonViewer().getTree().layout();
        }
      }
      super.mouseDoubleClick(e);
    }
  }
);
}",0.9951485748938752
140660,"@Override public void mouseDoubleClick(MouseEvent e){
  Tree tree=(Tree)e.getSource();
  Point point=new Point(e.x,e.y);
  TreeItem item=tree.getItem(point);
  if (!item.getText().endsWith(""String_Node_Str"")) {
    Object obj=item.getData();
    if (obj instanceof AbstractFolderNode) {
      AbstractFolderNode node=(AbstractFolderNode)obj;
      node.loadChildren();
      Object[] children=node.getChildren();
      if (children != null) {
        item.setText(item.getText() + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
      }
      getCommonViewer().getTree().layout();
    }
  }
  super.mouseDoubleClick(e);
}","@Override public void mouseDoubleClick(MouseEvent e){
  Tree tree=(Tree)e.getSource();
  Point point=new Point(e.x,e.y);
  TreeItem item=tree.getItem(point);
  if (item != null && !item.getText().endsWith(""String_Node_Str"")) {
    Object obj=item.getData();
    if (obj instanceof AbstractFolderNode) {
      AbstractFolderNode node=(AbstractFolderNode)obj;
      node.loadChildren();
      Object[] children=node.getChildren();
      if (children != null) {
        item.setText(item.getText() + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
      }
      getCommonViewer().getTree().layout();
    }
  }
  super.mouseDoubleClick(e);
}",0.987460815047022
140661,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  this.addViewerFilter(EMFObjFilter.FILTER_ID);
  this.addViewerFilter(ReportingFilter.FILTER_ID);
  adjustFilter();
  activateContext();
  this.getCommonViewer().setSorter(null);
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  this.addViewerFilter(EMFObjFilter.FILTER_ID);
  this.addViewerFilter(ReportingFilter.FILTER_ID);
  adjustFilter();
  activateContext();
  this.getCommonViewer().setSorter(null);
  this.getCommonViewer().getTree().addTreeListener(new TreeAdapter(){
    @Override public void treeExpanded(    TreeEvent e){
      TreeItem item=(TreeItem)e.item;
      if (!item.getText().endsWith(""String_Node_Str"")) {
        Object obj=item.getData();
        if (obj instanceof TableFolderNode || obj instanceof ViewFolderNode || obj instanceof ColumnFolderNode) {
          item.setText(item.getText() + ""String_Node_Str"" + item.getItemCount()+ ""String_Node_Str"");
          getCommonViewer().getTree().layout();
        }
      }
      super.treeExpanded(e);
    }
  }
);
  this.getCommonViewer().getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      Tree tree=(Tree)e.getSource();
      Point point=new Point(e.x,e.y);
      TreeItem item=tree.getItem(point);
      if (!item.getText().endsWith(""String_Node_Str"")) {
        Object obj=item.getData();
        if (obj instanceof AbstractFolderNode) {
          AbstractFolderNode node=(AbstractFolderNode)obj;
          node.loadChildren();
          Object[] children=node.getChildren();
          if (children != null) {
            item.setText(item.getText() + ""String_Node_Str"" + children.length+ ""String_Node_Str"");
          }
          getCommonViewer().getTree().layout();
        }
      }
      super.mouseDoubleClick(e);
    }
  }
);
}",0.2870563674321503
140662,"public String getText(Object element){
  if (element instanceof TableFolderNode) {
    TableFolderNode node=(TableFolderNode)element;
    Package catalogOrSchema=PackageHelper.getCatalogOrSchema(node.getParent());
    return ((IFolderNode)element).getName() + ""String_Node_Str"" + PackageHelper.getTables(catalogOrSchema).size()+ ""String_Node_Str"";
  }
  if (element instanceof ViewFolderNode) {
    ViewFolderNode node=(ViewFolderNode)element;
    Package catalogOrSchema=PackageHelper.getCatalogOrSchema(node.getParent());
    return ((IFolderNode)element).getName() + ""String_Node_Str"" + PackageHelper.getViews(catalogOrSchema).size()+ ""String_Node_Str"";
  }
  if (element instanceof ColumnFolderNode) {
    ColumnFolderNode node=(ColumnFolderNode)element;
    ColumnSet table=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(node.getParent());
    return ((IFolderNode)element).getName() + ""String_Node_Str"" + ColumnSetHelper.getColumns(table).size()+ ""String_Node_Str"";
  }
  if (element instanceof Pattern) {
    Pattern pattern=(Pattern)element;
    RegularExpression patternComponent=(RegularExpression)pattern.getComponents().get(0);
    return patternComponent.getExpression().getBody();
  }
  return super.getText(element);
}","public String getText(Object element){
  if (element instanceof TableFolderNode || element instanceof ViewFolderNode || element instanceof ColumnFolderNode) {
    return ((IFolderNode)element).getName();
  }
  if (element instanceof Pattern) {
    Pattern pattern=(Pattern)element;
    RegularExpression patternComponent=(RegularExpression)pattern.getComponents().get(0);
    return patternComponent.getExpression().getBody();
  }
  return super.getText(element);
}",0.4598108747044917
140663,"/** 
 * Copy the files from srcPath to destination folder.
 * @param srcPath The path name in which to look. The path is always relative to the root of this bundle and maybegin with &quot;/&quot;. A path value of &quot;/&quot; indicates the root of this bundle.
 * @param srcPath
 * @param recurse If <code>true</code>, recurse into subdirectories(contains directories). Otherwise only returnentries from the specified path.
 * @param desFolder
 * @throws IOException
 * @throws CoreException
 */
@SuppressWarnings(""String_Node_Str"") private void copyFilesToFolder(String srcPath,boolean recurse,IFolder desFolder) throws IOException, CoreException {
  Enumeration paths=null;
  paths=CorePlugin.getDefault().getBundle().getEntryPaths(srcPath);
  while (paths.hasMoreElements()) {
    String nextElement=(String)paths.nextElement();
    String currentPath=""String_Node_Str"" + nextElement;
    URL resourceURL=CorePlugin.getDefault().getBundle().getEntry(currentPath);
    URL fileURL=null;
    File file=null;
    try {
      fileURL=FileLocator.toFileURL(resourceURL);
      file=new File(fileURL.getFile());
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (file.isDirectory() && recurse) {
      if (file.getName().startsWith(""String_Node_Str"")) {
        continue;
      }
      IFolder folder=desFolder.getFolder(file.getName());
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      copyFilesToFolder(currentPath,recurse,folder);
      continue;
    }
    String fileName=new Path(fileURL.getPath()).lastSegment();
    InputStream openStream=null;
    openStream=fileURL.openStream();
    copyFileToFolder(openStream,fileName,desFolder);
  }
}","/** 
 * Copy the files from srcPath to destination folder.
 * @param srcPath The path name in which to look. The path is always relative to the root of this bundle and maybegin with &quot;/&quot;. A path value of &quot;/&quot; indicates the root of this bundle.
 * @param srcPath
 * @param recurse If <code>true</code>, recurse into subdirectories(contains directories). Otherwise only returnentries from the specified path.
 * @param desFolder
 * @throws IOException
 * @throws CoreException
 */
@SuppressWarnings(""String_Node_Str"") private void copyFilesToFolder(String srcPath,boolean recurse,IFolder desFolder) throws IOException, CoreException {
  Enumeration paths=null;
  paths=CorePlugin.getDefault().getBundle().getEntryPaths(srcPath);
  if (paths == null) {
    return;
  }
  while (paths.hasMoreElements()) {
    String nextElement=(String)paths.nextElement();
    String currentPath=""String_Node_Str"" + nextElement;
    URL resourceURL=CorePlugin.getDefault().getBundle().getEntry(currentPath);
    URL fileURL=null;
    File file=null;
    try {
      fileURL=FileLocator.toFileURL(resourceURL);
      file=new File(fileURL.getFile());
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (file.isDirectory() && recurse) {
      if (file.getName().startsWith(""String_Node_Str"")) {
        continue;
      }
      IFolder folder=desFolder.getFolder(file.getName());
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      copyFilesToFolder(currentPath,recurse,folder);
      continue;
    }
    String fileName=new Path(fileURL.getPath()).lastSegment();
    InputStream openStream=null;
    openStream=fileURL.openStream();
    copyFileToFolder(openStream,fileName,desFolder);
  }
}",0.9886923746013336
140664,"protected void createPart(Composite parent){
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  parent.setLayout(layout);
  boolean compositeEnable=!(dbType.getHostName() == null);
  Label label=new Label(parent,SWT.NONE);
  label.setText(""String_Node_Str"");
  final Text hostNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
  hostNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (compositeEnable) {
    hostNameText.setText(dbType.getHostName());
  }
  label.setEnabled(compositeEnable);
  hostNameText.setEnabled(compositeEnable);
  compositeEnable=!(dbType.getPort() == null);
  label=new Label(parent,SWT.NONE);
  label.setText(""String_Node_Str"");
  final Text portText=new Text(parent,SWT.BORDER | SWT.SINGLE);
  portText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (compositeEnable) {
    portText.setText(dbType.getPort());
  }
  label.setEnabled(compositeEnable);
  portText.setEnabled(compositeEnable);
  compositeEnable=!(dbType.getDBName() == null);
  label=new Label(parent,SWT.NONE);
  label.setText(""String_Node_Str"");
  final Text databaseNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
  databaseNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (compositeEnable) {
    databaseNameText.setText(dbType.getDBName());
  }
  label.setEnabled(compositeEnable);
  databaseNameText.setEnabled(compositeEnable);
  compositeEnable=!(dbType.getParamSeprator() == null);
  label=new Label(parent,SWT.NONE);
  label.setText(""String_Node_Str"");
  final Text parameterText=new Text(parent,SWT.BORDER | SWT.SINGLE);
  parameterText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  parameterText.setText(PluginConstant.EMPTY_STRING);
  parameterText.setEnabled(compositeEnable);
  label.setEnabled(compositeEnable);
  parameterText.setEnabled(compositeEnable);
  compositeEnable=!(dbType.getDataSource() == null);
  label=new Label(parent,SWT.NONE);
  label.setText(""String_Node_Str"");
  final Text dataSourceText=new Text(parent,SWT.BORDER | SWT.SINGLE);
  dataSourceText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (compositeEnable) {
    dataSourceText.setText(dbType.getDataSource());
  }
  label.setEnabled(compositeEnable);
  dataSourceText.setEnabled(compositeEnable);
  label=new Label(parent,SWT.NONE);
  label.setText(""String_Node_Str"");
  urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
  urlText.setEditable(false);
  urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  urlText.setText(getConnectionURL());
  dataSourceText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
      urlText.setText(getConnectionURL());
    }
  }
);
  hostNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
      urlText.setText(getConnectionURL());
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
      urlText.setText(getConnectionURL());
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      Long portValue=null;
      try {
        portValue=new Long(portText.getText());
      }
 catch (      NumberFormatException e1) {
      }
      if (portValue == null || portValue <= 0) {
        portText.setText(PluginConstant.EMPTY_STRING);
      }
    }
  }
);
  databaseNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
      urlText.setText(getConnectionURL());
      SupportDBUrlStore.getInstance().changeAllDBNmae(databaseNameText.getText());
    }
  }
);
  parameterText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
      urlText.setText(getConnectionURL());
    }
  }
);
}","protected void createPart(Composite parent){
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  parent.setLayout(layout);
  boolean compositeEnable=!(dbType.getHostName() == null);
  Label label=new Label(parent,SWT.NONE);
  label.setText(""String_Node_Str"");
  final Text hostNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
  hostNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (compositeEnable) {
    hostNameText.setText(dbType.getHostName());
  }
  label.setEnabled(compositeEnable);
  hostNameText.setEnabled(compositeEnable);
  compositeEnable=!(dbType.getPort() == null);
  label=new Label(parent,SWT.NONE);
  label.setText(""String_Node_Str"");
  final Text portText=new Text(parent,SWT.BORDER | SWT.SINGLE);
  portText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (compositeEnable) {
    portText.setText(dbType.getPort());
  }
  label.setEnabled(compositeEnable);
  portText.setEnabled(compositeEnable);
  compositeEnable=!(dbType.getDBName() == null);
  label=new Label(parent,SWT.NONE);
  label.setText(""String_Node_Str"");
  final Text databaseNameText=new Text(parent,SWT.BORDER | SWT.SINGLE);
  databaseNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (compositeEnable) {
    databaseNameText.setText(dbType.getDBName());
  }
  label.setEnabled(compositeEnable);
  databaseNameText.setEnabled(compositeEnable);
  compositeEnable=!(dbType.getParamSeprator() == null);
  label=new Label(parent,SWT.NONE);
  label.setText(""String_Node_Str"");
  final Text parameterText=new Text(parent,SWT.BORDER | SWT.SINGLE);
  parameterText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (dbType.getParamSeprator() != null) {
    parameterText.setText(PluginConstant.DEFAULT_PARAMETERS);
  }
 else {
    parameterText.setText(PluginConstant.EMPTY_STRING);
  }
  parameterText.setEnabled(compositeEnable);
  label.setEnabled(compositeEnable);
  parameterText.setEnabled(compositeEnable);
  compositeEnable=!(dbType.getDataSource() == null);
  label=new Label(parent,SWT.NONE);
  label.setText(""String_Node_Str"");
  final Text dataSourceText=new Text(parent,SWT.BORDER | SWT.SINGLE);
  dataSourceText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (compositeEnable) {
    dataSourceText.setText(dbType.getDataSource());
  }
  label.setEnabled(compositeEnable);
  dataSourceText.setEnabled(compositeEnable);
  label=new Label(parent,SWT.NONE);
  label.setText(""String_Node_Str"");
  urlText=new Text(parent,SWT.BORDER | SWT.SINGLE);
  urlText.setEditable(false);
  urlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  urlText.setText(getConnectionURL());
  dataSourceText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
      urlText.setText(getConnectionURL());
    }
  }
);
  hostNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
      urlText.setText(getConnectionURL());
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
      urlText.setText(getConnectionURL());
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      Long portValue=null;
      try {
        portValue=new Long(portText.getText());
      }
 catch (      NumberFormatException e1) {
      }
      if (portValue == null || portValue <= 0) {
        portText.setText(PluginConstant.EMPTY_STRING);
      }
    }
  }
);
  databaseNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
      urlText.setText(getConnectionURL());
      SupportDBUrlStore.getInstance().changeAllDBNmae(databaseNameText.getText());
    }
  }
);
  parameterText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setConnectionURL(SupportDBUrlStore.getInstance().getDBUrl(dbType.getDBKey(),hostNameText.getText(),portText.getText(),databaseNameText.getText(),dataSourceText.getText(),parameterText.getText()));
      urlText.setText(getConnectionURL());
    }
  }
);
}",0.9873443769935178
140665,"/** 
 * Copy the files from srcPath to destination folder.
 * @param srcPath The path name in which to look. The path is always relative to the root of this bundle and maybegin with &quot;/&quot;. A path value of &quot;/&quot; indicates the root of this bundle.
 * @param srcFilePattern The file name pattern for selecting entries in the specified path. The pattern is onlymatched against the last element of the entry path and it supports substring matching, as specified in the Filter specification, using the wildcard character (&quot;*&quot;). If null is specified, this is equivalent to &quot;*&quot; and matches all files.
 * @param recurse If <code>true</code>, recurse into subdirectories. Otherwise only return entries from thespecified path.
 * @param desFolder The destination folder.
 * @throws IOException
 * @throws CoreException
 */
@SuppressWarnings(""String_Node_Str"") private void copyFilesToFolder(String srcPath,String srcFilePattern,boolean recurse,IFolder desFolder) throws IOException, CoreException {
  Enumeration patterns=null;
  patterns=CorePlugin.getDefault().getBundle().findEntries(srcPath,srcFilePattern,recurse);
  while (patterns.hasMoreElements()) {
    URL nextElement=(URL)patterns.nextElement();
    URL fileURL=null;
    try {
      fileURL=FileLocator.toFileURL(nextElement);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    String fileName=new Path(fileURL.getPath()).lastSegment();
    InputStream openStream=null;
    openStream=fileURL.openStream();
    copyFileToFolder(openStream,fileName,desFolder);
  }
}","/** 
 * Copy the files from srcPath to destination folder.
 * @param srcPath The path name in which to look. The path is always relative to the root of this bundle and maybegin with &quot;/&quot;. A path value of &quot;/&quot; indicates the root of this bundle.
 * @param srcPath
 * @param recurse If <code>true</code>, recurse into subdirectories(contains directories). Otherwise only returnentries from the specified path.
 * @param desFolder
 * @throws IOException
 * @throws CoreException
 */
@SuppressWarnings(""String_Node_Str"") private void copyFilesToFolder(String srcPath,boolean recurse,IFolder desFolder) throws IOException, CoreException {
  Enumeration paths=null;
  paths=CorePlugin.getDefault().getBundle().getEntryPaths(srcPath);
  while (paths.hasMoreElements()) {
    String nextElement=(String)paths.nextElement();
    String currentPath=""String_Node_Str"" + nextElement;
    URL resourceURL=CorePlugin.getDefault().getBundle().getEntry(currentPath);
    URL fileURL=null;
    File file=null;
    try {
      fileURL=FileLocator.toFileURL(resourceURL);
      file=new File(fileURL.getFile());
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (file.isDirectory() && recurse) {
      if (file.getName().startsWith(""String_Node_Str"")) {
        continue;
      }
      IFolder folder=desFolder.getFolder(file.getName());
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      copyFilesToFolder(currentPath,recurse,folder);
      continue;
    }
    String fileName=new Path(fileURL.getPath()).lastSegment();
    InputStream openStream=null;
    openStream=fileURL.openStream();
    copyFileToFolder(openStream,fileName,desFolder);
  }
}",0.6550777676120768
140666,"public boolean createDQStructure(){
  Shell shell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
  try {
    IProject project=this.createNewProject(DATA_PROFILING,shell);
    this.createNewFoler(project,ANALYSIS);
    this.createNewFoler(project,REPORTS);
    project=this.createNewProject(LIBRARIES,shell);
    IFolder patternFolder=this.createNewFoler(project,PATTERNS);
    this.copyFilesToFolder(PATTERN_PATH,PluginConstant.PATTERN_SUFFIX,true,patternFolder);
    IFolder sqlSourceFolder=this.createNewFoler(project,SOURCE_FILES);
    this.copyFilesToFolder(DEMO_PATH,PluginConstant.SQL_SUFFIX,true,sqlSourceFolder);
    project=this.createNewProject(METADATA,shell);
    this.createNewFoler(project,DB_CONNECTIONS);
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return false;
  }
  return true;
}","public boolean createDQStructure(){
  Shell shell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
  try {
    IProject project=this.createNewProject(DATA_PROFILING,shell);
    this.createNewFoler(project,ANALYSIS);
    this.createNewFoler(project,REPORTS);
    project=this.createNewProject(LIBRARIES,shell);
    IFolder patternFolder=this.createNewFoler(project,PATTERNS);
    this.copyFilesToFolder(PATTERN_PATH,true,patternFolder);
    IFolder sqlSourceFolder=this.createNewFoler(project,SOURCE_FILES);
    this.copyFilesToFolder(DEMO_PATH,true,sqlSourceFolder);
    project=this.createNewProject(METADATA,shell);
    this.createNewFoler(project,DB_CONNECTIONS);
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return false;
  }
  return true;
}",0.9652173913043478
140667,"public boolean createDQStructure(){
  Shell shell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
  try {
    IProject project=this.createNewProject(DATA_PROFILING,shell);
    this.createNewFoler(project,ANALYSIS);
    this.createNewFoler(project,REPORTS);
    project=this.createNewProject(LIBRARIES,shell);
    IFolder patternFolder=this.createNewFoler(project,PATTERNS);
    this.copyFilesToFolder(PATTERN_PATH,true,patternFolder);
    IFolder sqlSourceFolder=this.createNewFoler(project,SOURCE_FILES);
    this.copyFilesToFolder(DEMO_PATH,true,sqlSourceFolder);
    project=this.createNewProject(METADATA,shell);
    this.createNewFoler(project,DB_CONNECTIONS);
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return false;
  }
  return true;
}","public boolean createDQStructure(){
  Shell shell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
  try {
    IProject project=this.createNewProject(DATA_PROFILING,shell);
    this.createNewFoler(project,ANALYSIS);
    this.createNewFoler(project,REPORTS);
    project=this.createNewProject(LIBRARIES,shell);
    IFolder patternFolder=this.createNewFoler(project,PATTERNS);
    IFolder sqlPatternFolder=this.createNewFoler(project,SQL_PATTERNS);
    this.copyFilesToFolder(PATTERN_PATH,true,patternFolder);
    IFolder sqlSourceFolder=this.createNewFoler(project,SOURCE_FILES);
    this.copyFilesToFolder(DEMO_PATH,true,sqlSourceFolder);
    project=this.createNewProject(METADATA,shell);
    this.createNewFoler(project,DB_CONNECTIONS);
  }
 catch (  Exception ex) {
    ExceptionHandler.process(ex);
    return false;
  }
  return true;
}",0.955719557195572
140668,"@Override public void setVisible(boolean visible){
  if (defaultFolderProviderRes != null) {
    FolderProvider folderProvider=getConnectionParams().getFolderProvider();
    if (folderProvider == null) {
      folderProvider=new FolderProvider();
    }
    folderProvider.setFolderResource(defaultFolderProviderRes);
    getConnectionParams().setFolderProvider(folderProvider);
  }
  super.setVisible(visible);
}","@Override public void setVisible(boolean visible){
  if (defaultFolderProviderRes != null) {
    FolderProvider folderProvider=getConnectionParams().getFolderProvider();
    if (folderProvider == null) {
      folderProvider=new FolderProvider();
    }
    if (folderProvider.getFolderResource() == null) {
      folderProvider.setFolderResource(defaultFolderProviderRes);
    }
    getConnectionParams().setFolderProvider(folderProvider);
  }
  super.setVisible(visible);
}",0.8871331828442438
140669,"@Override public IStatus validateDrop(Object target,int operation,TransferData transferType){
  for (  IResource res : getSelectedResources()) {
    if (res instanceof IFile) {
      IFile file=(IFile)res;
      if (file.getFileExtension().equals(FactoriesUtil.SQL)) {
        if (target instanceof IFolder) {
          IFolder folder=(IFolder)target;
          IPath path=new Path(DQStructureManager.LIBRARIES);
          path=path.append(DQStructureManager.SOURCE_FILES);
          IPath fullPath=folder.getFullPath();
          if (path.isPrefixOf(fullPath)) {
            dropSql=true;
            return Status.OK_STATUS;
          }
        }
      }
      if (!res.getName().endsWith(PluginConstant.ANA_SUFFIX)) {
        if (target instanceof IFile) {
          IFile tfile=(IFile)target;
          if (tfile.getFileExtension().equals(FactoriesUtil.REP)) {
            dropRep=true;
            return Status.OK_STATUS;
          }
        }
      }
    }
  }
  return Status.CANCEL_STATUS;
}","@Override public IStatus validateDrop(Object target,int operation,TransferData transferType){
  for (  IResource res : getSelectedResources()) {
    if (res instanceof IFile) {
      IFile file=(IFile)res;
      if (file.getFileExtension().equals(FactoriesUtil.SQL)) {
        if (target instanceof IFolder) {
          IFolder folder=(IFolder)target;
          IPath path=new Path(DQStructureManager.LIBRARIES);
          path=path.append(DQStructureManager.SOURCE_FILES);
          IPath fullPath=folder.getFullPath();
          if (path.isPrefixOf(fullPath)) {
            dropSql=true;
            return Status.OK_STATUS;
          }
        }
      }
      if (res.getName().endsWith(PluginConstant.ANA_SUFFIX)) {
        if (target instanceof IFile) {
          IFile tfile=(IFile)target;
          if (tfile.getFileExtension().equals(FactoriesUtil.REP)) {
            dropRep=true;
            return Status.OK_STATUS;
          }
        }
      }
    }
  }
  return Status.CANCEL_STATUS;
}",0.9994997498749376
140670,"@SuppressWarnings(""String_Node_Str"") protected void openFolderSelectionDialog(String projectName,String folderName){
  final Class[] acceptedClasses=new Class[]{IProject.class,IFolder.class};
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  ArrayList rejectedElements=new ArrayList();
  if (projectName != null) {
    IProject theProject=root.getProject(projectName);
    IProject[] allProjects=root.getProjects();
    for (int i=0; i < allProjects.length; i++) {
      if (!allProjects[i].equals(theProject)) {
        rejectedElements.add(allProjects[i]);
      }
    }
    if (folderName != null) {
      try {
        IResource[] resourse=theProject.members();
        for (        IResource one : resourse) {
          if (one.getType() == IResource.FOLDER && !one.getName().equals(folderName)) {
            rejectedElements.add(one);
          }
        }
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
  ViewerFilter filter=new TypedViewerFilter(acceptedClasses,rejectedElements.toArray());
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(getShell(),lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(root);
  dialog.addFilter(filter);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.OK) {
    Object elements=dialog.getResult()[0];
    IResource elem=(IResource)elements;
    if (elem instanceof IFolder) {
      pathText.setText(elem.getFullPath().toString());
      FolderProvider provider=new FolderProvider();
      provider.setFolderResource((IFolder)elem);
      getConnectionParams().setFolderProvider(provider);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") protected void openFolderSelectionDialog(String projectName,String folderName){
  final Class[] acceptedClasses=new Class[]{IProject.class,IFolder.class};
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  ArrayList rejectedElements=new ArrayList();
  if (projectName != null) {
    IProject theProject=root.getProject(projectName);
    IProject[] allProjects=root.getProjects();
    for (int i=0; i < allProjects.length; i++) {
      if (!allProjects[i].equals(theProject)) {
        rejectedElements.add(allProjects[i]);
      }
    }
    if (folderName != null) {
      try {
        IResource[] resourse=theProject.members();
        for (        IResource one : resourse) {
          if (one.getType() == IResource.FOLDER && !one.getName().equals(folderName)) {
            rejectedElements.add(one);
          }
        }
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
  ViewerFilter filter=new TypedViewerFilter(acceptedClasses,rejectedElements.toArray());
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(getShell(),lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(root);
  dialog.addFilter(filter);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.OK) {
    Object elements=dialog.getResult()[0];
    IResource elem=(IResource)elements;
    if (elem instanceof IFolder) {
      pathText.setText(elem.getFullPath().toString());
      getConnectionParams().getFolderProvider().setFolderResource((IFolder)elem);
    }
  }
}",0.9634009009009008
140671,"@Override public void run(){
  if (page.isDirty()) {
    try {
      page.saveAnalysis();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  page.refreshChart(page.getManagedForm().getForm());
}","@Override public void run(){
  if (page == null) {
    AnalysisEditor editor=(AnalysisEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
    if (editor != null) {
      page=(ColumnMasterDetailsPage)editor.getMasterPage();
    }
  }
  if (page.isDirty()) {
    try {
      page.saveAnalysis();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  page.refreshChart(page.getManagedForm().getForm());
}",0.6342182890855457
140672,"public RefreshChartAction() throws Exception {
  super(""String_Node_Str"");
  AnalysisEditor editor=(AnalysisEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
  if (editor != null) {
    page=(ColumnMasterDetailsPage)editor.getMasterPage();
  }
 else {
    throw new Exception(""String_Node_Str"");
  }
}","public RefreshChartAction(){
  super(""String_Node_Str"");
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.SECTION_PREVIEW));
}",0.3534303534303534
140673,"public RunAnalysisAction(){
  super(""String_Node_Str"");
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.REFRESH_IMAGE));
  setDisabledImageDescriptor(ImageLib.getImageDescriptor(ImageLib.RUN_DISABLE));
}","public RunAnalysisAction(boolean toolbar){
  this();
  this.toolbar=toolbar;
}",0.3230240549828179
140674,"public static ImageDescriptor createStacked3DBarChart(String titile,CategoryDataset dataset){
  JFreeChart chart=ChartFactory.createStackedBarChart3D(null,null,""String_Node_Str"",dataset,PlotOrientation.VERTICAL,true,false,false);
  CategoryPlot plot=chart.getCategoryPlot();
  BarRenderer renderer=(BarRenderer)plot.getRenderer();
  renderer.setSeriesPaint(0,Color.RED);
  renderer.setSeriesPaint(1,Color.GREEN);
  renderer.setBaseItemLabelsVisible(true);
  renderer.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator(""String_Node_Str"",NumberFormat.getIntegerInstance(),new DecimalFormat(""String_Node_Str"")));
  renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER));
  NumberAxis axis=(NumberAxis)plot.getRangeAxis();
  axis.setNumberFormatOverride(NumberFormat.getPercentInstance());
  axis.setUpperMargin(0.05f);
  axis.setLowerMargin(0.01f);
  try {
    return ChartUtils.convertToImage(chart,CHART_WIDTH,CHART_HEIGHT);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","public static ImageDescriptor createStacked3DBarChart(String titile,CategoryDataset dataset){
  JFreeChart chart=ChartFactory.createStackedBarChart3D(null,null,""String_Node_Str"",dataset,PlotOrientation.VERTICAL,true,false,false);
  CategoryPlot plot=chart.getCategoryPlot();
  BarRenderer renderer=(BarRenderer)plot.getRenderer();
  renderer.setSeriesPaint(0,Color.GREEN);
  renderer.setSeriesPaint(1,Color.RED);
  renderer.setBaseItemLabelsVisible(true);
  renderer.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator(""String_Node_Str"",NumberFormat.getIntegerInstance(),new DecimalFormat(""String_Node_Str"")));
  renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER));
  NumberAxis axis=(NumberAxis)plot.getRangeAxis();
  axis.setNumberFormatOverride(NumberFormat.getPercentInstance());
  axis.setUpperMargin(0.05f);
  axis.setLowerMargin(0.01f);
  try {
    return ChartUtils.convertToImage(chart,CHART_WIDTH,CHART_HEIGHT);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0.962406015037594
140675,"private static CategoryDataset createPatternMatchDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  if (isCreate) {
    int i=0;
    for (    IndicatorUnit unit : indicatorUnitList) {
      IndicatorCommonUtil.compositeIndicatorMap(unit);
      String label=unit.getIndicatorName();
      if (unit.getValue() != null) {
        PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
        double notMathCount=patternExt.getNotMatchingValueCount();
        double machCount=patternExt.getMatchingValueCount();
        dataset.addValue(notMathCount / (notMathCount + machCount),""String_Node_Str"",label);
        dataset.addValue(machCount / (notMathCount + machCount),""String_Node_Str"",label);
      }
 else {
        dataset.addValue(0,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(0,""String_Node_Str"",""String_Node_Str"");
      }
      i++;
    }
  }
 else {
    dataset.addValue(0.23,""String_Node_Str"",""String_Node_Str"");
    dataset.addValue(0.77,""String_Node_Str"",""String_Node_Str"");
  }
  return dataset;
}","private static CategoryDataset createPatternMatchDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  if (isCreate) {
    int i=0;
    for (    IndicatorUnit unit : indicatorUnitList) {
      IndicatorCommonUtil.compositeIndicatorMap(unit);
      String label=unit.getIndicatorName();
      if (unit.getValue() != null) {
        PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
        double notMathCount=patternExt.getNotMatchingValueCount();
        double machCount=patternExt.getMatchingValueCount();
        dataset.addValue(machCount / (notMathCount + machCount),""String_Node_Str"",label);
        dataset.addValue(notMathCount / (notMathCount + machCount),""String_Node_Str"",label);
      }
 else {
        dataset.addValue(0,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(0,""String_Node_Str"",""String_Node_Str"");
      }
      i++;
    }
  }
 else {
    dataset.addValue(0.23,""String_Node_Str"",""String_Node_Str"");
    dataset.addValue(0.77,""String_Node_Str"",""String_Node_Str"");
  }
  return dataset;
}",0.932082216264522
140676,"public void partBroughtToTop(IWorkbenchPart part){
  if (part instanceof AnalysisEditor) {
    runAnalysisAction.setEnabled(true);
  }
 else {
    runAnalysisAction.setEnabled(false);
  }
}","public void partBroughtToTop(IWorkbenchPart part){
  if (part instanceof AnalysisEditor) {
    runAnalysisAction.setEnabled(true);
    refreshChartAction.setEnabled(true);
  }
 else {
    runAnalysisAction.setEnabled(false);
    refreshChartAction.setEnabled(false);
  }
}",0.8199566160520607
140677,"@Override protected void fillCoolBar(ICoolBarManager coolBar){
  IToolBarManager toolbar=new ToolBarManager(SWT.FLAT | SWT.RIGHT);
  coolBar.add(new ToolBarContributionItem(toolbar,""String_Node_Str""));
  toolbar.add(ActionFactory.SAVE.create(window));
  toolbar.add(new ChangePerspectiveAction(true));
  runAnalysisAction=new RunAnalysisAction();
  toolbar.add(runAnalysisAction);
  final IWorkbenchWindow activeWorkbenchWindow=getActionBarConfigurer().getWindowConfigurer().getWindow();
  if (activeWorkbenchWindow != null) {
    activeWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      public void partActivated(      IWorkbenchPart part){
        boolean isEnable=false;
        if (part instanceof AnalysisEditor) {
          isEnable=true;
        }
 else {
          IWorkbenchPage activePage=activeWorkbenchWindow.getActivePage();
          if (activePage != null) {
            IEditorPart activeEditor=activePage.getActiveEditor();
            if (activeEditor instanceof AnalysisEditor) {
              isEnable=true;
            }
          }
        }
        runAnalysisAction.setEnabled(isEnable);
      }
      public void partBroughtToTop(      IWorkbenchPart part){
        if (part instanceof AnalysisEditor) {
          runAnalysisAction.setEnabled(true);
        }
 else {
          runAnalysisAction.setEnabled(false);
        }
      }
      public void partClosed(      IWorkbenchPart part){
      }
      public void partDeactivated(      IWorkbenchPart part){
      }
      public void partOpened(      IWorkbenchPart part){
      }
    }
);
  }
}","@Override protected void fillCoolBar(ICoolBarManager coolBar){
  IToolBarManager toolbar=new ToolBarManager(SWT.FLAT | SWT.RIGHT);
  coolBar.add(new ToolBarContributionItem(toolbar,""String_Node_Str""));
  toolbar.add(new ChangePerspectiveAction(true));
  toolbar.add(ActionFactory.SAVE.create(window));
  runAnalysisAction=new RunAnalysisAction(true);
  toolbar.add(runAnalysisAction);
  refreshChartAction=new RefreshChartAction();
  toolbar.add(refreshChartAction);
  final IWorkbenchWindow activeWorkbenchWindow=getActionBarConfigurer().getWindowConfigurer().getWindow();
  if (activeWorkbenchWindow != null) {
    activeWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      public void partActivated(      IWorkbenchPart part){
        boolean isEnable=false;
        if (part instanceof AnalysisEditor) {
          isEnable=true;
        }
 else {
          IWorkbenchPage activePage=activeWorkbenchWindow.getActivePage();
          if (activePage != null) {
            IEditorPart activeEditor=activePage.getActiveEditor();
            if (activeEditor instanceof AnalysisEditor) {
              isEnable=true;
            }
          }
        }
        runAnalysisAction.setEnabled(isEnable);
        refreshChartAction.setEnabled(isEnable);
      }
      public void partBroughtToTop(      IWorkbenchPart part){
        if (part instanceof AnalysisEditor) {
          runAnalysisAction.setEnabled(true);
          refreshChartAction.setEnabled(true);
        }
 else {
          runAnalysisAction.setEnabled(false);
          refreshChartAction.setEnabled(false);
        }
      }
      public void partClosed(      IWorkbenchPart part){
      }
      public void partDeactivated(      IWorkbenchPart part){
      }
      public void partOpened(      IWorkbenchPart part){
      }
    }
);
  }
}",0.875
140678,"public void partActivated(IWorkbenchPart part){
  boolean isEnable=false;
  if (part instanceof AnalysisEditor) {
    isEnable=true;
  }
 else {
    IWorkbenchPage activePage=activeWorkbenchWindow.getActivePage();
    if (activePage != null) {
      IEditorPart activeEditor=activePage.getActiveEditor();
      if (activeEditor instanceof AnalysisEditor) {
        isEnable=true;
      }
    }
  }
  runAnalysisAction.setEnabled(isEnable);
}","public void partActivated(IWorkbenchPart part){
  boolean isEnable=false;
  if (part instanceof AnalysisEditor) {
    isEnable=true;
  }
 else {
    IWorkbenchPage activePage=activeWorkbenchWindow.getActivePage();
    if (activePage != null) {
      IEditorPart activeEditor=activePage.getActiveEditor();
      if (activeEditor instanceof AnalysisEditor) {
        isEnable=true;
      }
    }
  }
  runAnalysisAction.setEnabled(isEnable);
  refreshChartAction.setEnabled(isEnable);
}",0.9535135135135137
140679,"@Override public void run(){
  CreatePatternWizard fileWizard=new CreatePatternWizard(folder){
    public void dispose(){
      activeCount=0;
      super.dispose();
    }
  }
;
  WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),fileWizard){
    public void openTray(    DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
      super.openTray(tray);
      if (tray instanceof HelpTray) {
        HelpTray helpTray=(HelpTray)tray;
        ReusableHelpPart helpPart=helpTray.getHelpPart();
        helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
      }
    }
  }
;
  fileWizard.setWindowTitle(getText());
  dialog.create();
  dialog.getShell().addShellListener(new ShellAdapter(){
    public void shellActivated(    ShellEvent e){
      if (activeCount < 2) {
        Point point=e.widget.getDisplay().getCursorLocation();
        IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
        IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
        helpSystem.displayContext(context,point.x + 15,point.y);
        activeCount++;
        ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
        if (lastActiveInstance != null) {
          IHelpResource[] relatedTopics=context.getRelatedTopics();
          String href=relatedTopics[0].getHref();
          lastActiveInstance.showURL(href);
        }
      }
    }
  }
);
  if (WizardDialog.OK == dialog.open()) {
    try {
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  CreatePatternWizard fileWizard=new CreatePatternWizard(folder){
    public void dispose(){
      activeCount=0;
      super.dispose();
    }
  }
;
  WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),fileWizard){
    public void openTray(    DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
      super.openTray(tray);
      if (tray instanceof HelpTray) {
        HelpTray helpTray=(HelpTray)tray;
        ReusableHelpPart helpPart=helpTray.getHelpPart();
        helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
      }
    }
  }
;
  fileWizard.setWindowTitle(getText());
  dialog.create();
  dialog.getShell().addShellListener(new ShellAdapter(){
    public void shellActivated(    ShellEvent e){
      if (activeCount < 2) {
        Point point=e.widget.getDisplay().getCursorLocation();
        IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
        IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
        helpSystem.displayContext(context,point.x + 15,point.y);
        activeCount++;
        ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
        if (lastActiveInstance != null) {
          IHelpResource[] relatedTopics=context.getRelatedTopics();
          String href=relatedTopics[0].getHref();
          lastActiveInstance.showURL(href);
        }
      }
    }
  }
);
  if (WizardDialog.OK == dialog.open()) {
    try {
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      IFile file=folder.getFile(fileWizard.getLocation().lastSegment());
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new FileEditorInput(file),PluginConstant.PATTERN_EDITOR);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}",0.938683243854196
140680,"@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  TaggedValueHelper.setAuthor(pattern,AbstractWizardPage.getConnectionParams().getAuthor());
  TaggedValueHelper.setDescription(AbstractWizardPage.getConnectionParams().getDescription(),pattern);
  TaggedValueHelper.setPurpose(AbstractWizardPage.getConnectionParams().getPurpose(),pattern);
  TaggedValueHelper.setDevStatus(pattern,DevelopmentStatus.get(AbstractWizardPage.getConnectionParams().getStatus()));
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  String cl=mPage2.getComboLang();
  expression.setLanguage(cl);
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  EMFUtil util=EMFSharedResources.getSharedEmfUtil();
  IPath location=folder.getLocation();
  String fname=DqRepositoryViewService.createFilename(folder.getName(),name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  location=location.removeLastSegments(1);
  location=location.append(fname);
  util.addPoolToResourceSet(new File(location.toPortableString()),pattern);
  util.saveLastResource();
  return true;
}","@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  TaggedValueHelper.setAuthor(pattern,AbstractWizardPage.getConnectionParams().getAuthor());
  TaggedValueHelper.setDescription(AbstractWizardPage.getConnectionParams().getDescription(),pattern);
  TaggedValueHelper.setPurpose(AbstractWizardPage.getConnectionParams().getPurpose(),pattern);
  TaggedValueHelper.setDevStatus(pattern,DevelopmentStatus.get(AbstractWizardPage.getConnectionParams().getStatus()));
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  String cl=mPage2.getComboLang();
  expression.setLanguage(cl);
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  EMFUtil util=EMFSharedResources.getSharedEmfUtil();
  location=folder.getLocation();
  String fname=DqRepositoryViewService.createFilename(folder.getName(),name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  location=location.removeLastSegments(1);
  location=location.append(fname);
  util.addPoolToResourceSet(new File(location.toPortableString()),pattern);
  util.saveLastResource();
  return true;
}",0.99784327821711
140681,"private boolean checkDeleteContent(IResource[] selectedResources){
  List<ModelElement> modelElementList=new ArrayList<ModelElement>();
  IFile file;
  ModelElement modelElement;
  boolean otherFilesExistFlag=false;
  String otherFileName=null;
  boolean anaMessageFlag=false, repMessageFlag=false, patternMessageFlag=false;
  String dialogMessage;
  for (  IResource res : selectedResources) {
    if (!(res instanceof IFile)) {
      continue;
    }
 else {
      file=(IFile)res;
    }
    if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PROV)) {
      TypedReturnCode<TdDataProvider> returnValue=PrvResourceFileHelper.getInstance().readFromFile(file);
      modelElement=returnValue.getObject();
      modelElementList.add(modelElement);
      anaMessageFlag=true;
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.ANA)) {
      modelElement=AnaResourceFileHelper.getInstance().findAnalysis(file);
      modelElementList.add(modelElement);
      repMessageFlag=true;
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      modelElementList.add(pattern);
      patternMessageFlag=true;
    }
 else {
      otherFilesExistFlag=true;
      if (res.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
        TdReport findReport=RepResourceFileHelper.getInstance().findReport(file);
        otherFileName=findReport.getName();
      }
 else {
        otherFileName=file.getName();
      }
    }
  }
  if (modelElementList.size() > 0 && !otherFilesExistFlag) {
    if (anaMessageFlag && repMessageFlag) {
      dialogMessage=""String_Node_Str"";
    }
 else     if (anaMessageFlag) {
      dialogMessage=""String_Node_Str"";
    }
 else     if (patternMessageFlag) {
      dialogMessage=""String_Node_Str"";
    }
 else {
      dialogMessage=""String_Node_Str"";
    }
    int showDialog=DeleteModelElementConfirmDialog.showDialog(null,modelElementList.toArray(new ModelElement[modelElementList.size()]),dialogMessage);
    isDeleteContent=showDialog == Window.OK;
  }
 else   if (otherFilesExistFlag) {
    isDeleteContent=popConfirmDialog(otherFileName,selectedResources);
  }
  return isDeleteContent;
}","private boolean checkDeleteContent(IResource[] selectedResources){
  List<ModelElement> modelElementList=new ArrayList<ModelElement>();
  IFile file;
  ModelElement modelElement;
  boolean otherFilesExistFlag=false;
  String otherFileName=null;
  boolean anaMessageFlag=false, repMessageFlag=false;
  String dialogMessage;
  for (  IResource res : selectedResources) {
    if (!(res instanceof IFile)) {
      continue;
    }
 else {
      file=(IFile)res;
    }
    if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PROV)) {
      TypedReturnCode<TdDataProvider> returnValue=PrvResourceFileHelper.getInstance().readFromFile(file);
      modelElement=returnValue.getObject();
      modelElementList.add(modelElement);
      anaMessageFlag=true;
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.ANA)) {
      modelElement=AnaResourceFileHelper.getInstance().findAnalysis(file);
      modelElementList.add(modelElement);
      repMessageFlag=true;
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PATTERN)) {
      Pattern pattern=PatternResourceFileHelper.getInstance().findPattern(file);
      modelElementList.add(pattern);
      anaMessageFlag=true;
    }
 else {
      otherFilesExistFlag=true;
      if (res.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
        TdReport findReport=RepResourceFileHelper.getInstance().findReport(file);
        otherFileName=findReport.getName();
      }
 else {
        otherFileName=file.getName();
      }
    }
  }
  if (modelElementList.size() > 0 && !otherFilesExistFlag) {
    if (anaMessageFlag && repMessageFlag) {
      dialogMessage=""String_Node_Str"";
    }
 else     if (anaMessageFlag) {
      dialogMessage=""String_Node_Str"";
    }
 else {
      dialogMessage=""String_Node_Str"";
    }
    int showDialog=DeleteModelElementConfirmDialog.showDialog(null,modelElementList.toArray(new ModelElement[modelElementList.size()]),dialogMessage);
    isDeleteContent=showDialog == Window.OK;
  }
 else   if (otherFilesExistFlag) {
    isDeleteContent=popConfirmDialog(otherFileName,selectedResources);
  }
  return isDeleteContent;
}",0.9734272087213264
140682,"@Override public void widgetSelected(SelectionEvent e){
  new RunAnalysisAction().run();
  refreshChart(form);
}","@Override public void widgetSelected(SelectionEvent e){
  new RunAnalysisAction().run();
  while (!RunAnalysisAction.finishFlag) {
    try {
      Thread.sleep(3000);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  refreshChart(form);
}",0.5882352941176471
140683,"@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  final ScrolledForm form=managedForm.getForm();
  form.setText(""String_Node_Str"");
  metadataSection.setText(""String_Node_Str"");
  metadataSection.setDescription(""String_Node_Str"");
  createAnalysisColumnsSection(form,topComp);
  createDataFilterSection(form,topComp);
  Composite body=form.getBody();
  Composite previewComp=toolkit.createComposite(body);
  GridData previewData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  previewComp.setLayoutData(previewData);
  previewComp.setLayout(new GridLayout());
  createPreviewSection(form,previewComp);
  GridData gdBtn=new GridData();
  gdBtn.horizontalAlignment=SWT.CENTER;
  gdBtn.horizontalSpan=2;
  gdBtn.widthHint=120;
  Button runBtn=toolkit.createButton(form.getBody(),""String_Node_Str"",SWT.NONE);
  runBtn.setLayoutData(gdBtn);
  runBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new RunAnalysisAction().run();
      refreshChart(form);
    }
  }
);
}","@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  final ScrolledForm form=managedForm.getForm();
  form.setText(""String_Node_Str"");
  metadataSection.setText(""String_Node_Str"");
  metadataSection.setDescription(""String_Node_Str"");
  createAnalysisColumnsSection(form,topComp);
  createDataFilterSection(form,topComp);
  Composite body=form.getBody();
  Composite previewComp=toolkit.createComposite(body);
  GridData previewData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  previewComp.setLayoutData(previewData);
  previewComp.setLayout(new GridLayout());
  createPreviewSection(form,previewComp);
  GridData gdBtn=new GridData();
  gdBtn.horizontalAlignment=SWT.CENTER;
  gdBtn.horizontalSpan=2;
  gdBtn.widthHint=120;
  Button runBtn=toolkit.createButton(form.getBody(),""String_Node_Str"",SWT.NONE);
  runBtn.setLayoutData(gdBtn);
  runBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new RunAnalysisAction().run();
      while (!RunAnalysisAction.finishFlag) {
        try {
          Thread.sleep(3000);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
      refreshChart(form);
    }
  }
);
}",0.9176276771004942
140684,"private static CategoryDataset createPatternMatchDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  if (isCreate) {
    int i=0;
    for (    IndicatorUnit unit : indicatorUnitList) {
      IndicatorCommonUtil.compositeIndicatorMap(unit);
      String label=unit.getIndicatorName();
      if (unit.getValue() != null) {
        PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
        double notMathCount=patternExt.getNotMatchingValueCount();
        double machCount=patternExt.getMatchingValueCount();
        dataset.addValue(notMathCount / (notMathCount + machCount),""String_Node_Str"",String.valueOf(label + i));
        dataset.addValue(machCount / (notMathCount + machCount),""String_Node_Str"",String.valueOf(label + i));
      }
 else {
        dataset.addValue(0,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(0,""String_Node_Str"",""String_Node_Str"");
      }
      i++;
    }
  }
 else {
    dataset.addValue(0.23,""String_Node_Str"",""String_Node_Str"");
    dataset.addValue(0.77,""String_Node_Str"",""String_Node_Str"");
  }
  return dataset;
}","private static CategoryDataset createPatternMatchDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  if (isCreate) {
    int i=0;
    for (    IndicatorUnit unit : indicatorUnitList) {
      IndicatorCommonUtil.compositeIndicatorMap(unit);
      String label=unit.getIndicatorName();
      if (unit.getValue() != null) {
        PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
        double notMathCount=patternExt.getNotMatchingValueCount();
        double machCount=patternExt.getMatchingValueCount();
        dataset.addValue(notMathCount / (notMathCount + machCount),""String_Node_Str"",label);
        dataset.addValue(machCount / (notMathCount + machCount),""String_Node_Str"",label);
      }
 else {
        dataset.addValue(0,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(0,""String_Node_Str"",""String_Node_Str"");
      }
      i++;
    }
  }
 else {
    dataset.addValue(0.23,""String_Node_Str"",""String_Node_Str"");
    dataset.addValue(0.77,""String_Node_Str"",""String_Node_Str"");
  }
  return dataset;
}",0.935908691834943
140685,"public static IFolderNode[] getFolderNode(EObject eObject){
  IFolderNode[] folderNodes=catalogFolderNodeMap.get(eObject);
  if (folderNodes != null) {
    return folderNodes;
  }
 else   if (SwitchHelpers.CATALOG_SWITCH.doSwitch(eObject) != null) {
    return createTableViewNodes(eObject);
  }
 else   if (SwitchHelpers.SCHEMA_SWITCH.doSwitch(eObject) != null) {
    return createTableViewNodes(eObject);
  }
 else   if (SwitchHelpers.TABLE_SWITCH.doSwitch(eObject) != null) {
    return createColumFolderNodes(eObject);
  }
 else   if (SwitchHelpers.VIEW_SWITCH.doSwitch(eObject) != null) {
    return createColumFolderNodes(eObject);
  }
  return folderNodes;
}","public static IFolderNode getFolderNode(EObject eObject,ColumnSet columnSet){
  IFolderNode[] folderNodes=catalogFolderNodeMap.get(eObject);
  if (folderNodes == null) {
    folderNodes=createTableViewNodes(eObject);
  }
  TdTable doSwitch=SwitchHelpers.TABLE_SWITCH.doSwitch(columnSet);
  if (doSwitch != null) {
    return folderNodes[0];
  }
 else {
    return folderNodes[1];
  }
}",0.4895238095238095
140686,"private void initCheckedColumn(ColumnIndicator[] columnIndicators){
  for (int i=0; i < columnIndicators.length; i++) {
    columnIndicators[i].getTdColumn().eContainer();
    ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(columnIndicators[i].getTdColumn());
    ColumnSetKey columnSetKey=new ColumnSetKey(columnSetOwner);
    ColumnCheckedMap columnCheckedMap=columnSetCheckedMap.get(columnSetKey);
    if (columnCheckedMap == null) {
      columnCheckedMap=new ColumnCheckedMap();
      this.columnSetCheckedMap.put(columnSetKey,columnCheckedMap);
    }
    columnCheckedMap.putColumnChecked(columnIndicators[i].getTdColumn(),Boolean.TRUE);
  }
}","private void initCheckedColumn(ColumnIndicator[] columnIndicators){
  List<ColumnSet> columnSetList=new ArrayList<ColumnSet>();
  for (int i=0; i < columnIndicators.length; i++) {
    columnIndicators[i].getTdColumn().eContainer();
    ColumnSet columnSetOwner=ColumnHelper.getColumnSetOwner(columnIndicators[i].getTdColumn());
    if (!columnSetList.contains(columnSetOwner)) {
      columnSetList.add(columnSetOwner);
    }
    ColumnSetKey columnSetKey=new ColumnSetKey(columnSetOwner);
    ColumnCheckedMap columnCheckedMap=columnSetCheckedMap.get(columnSetKey);
    if (columnCheckedMap == null) {
      columnCheckedMap=new ColumnCheckedMap();
      this.columnSetCheckedMap.put(columnSetKey,columnCheckedMap);
    }
    columnCheckedMap.putColumnChecked(columnIndicators[i].getTdColumn(),Boolean.TRUE);
  }
  this.setInitialElementSelections(columnSetList);
}",0.8627708470124754
140687,"public void run(){
  parentCreate();
  fViewer.setCheckedElements(getInitialElementSelections().toArray());
  if (fExpandedElements != null) {
    fViewer.setExpandedElements(fExpandedElements);
  }
  updateOKStatus();
}","public void run(){
  parentCreate();
  fViewer.setCheckedElements(getInitialElementSelections().toArray());
  updateOKStatus();
}",0.7392550143266475
140688,"public void create(){
  BusyIndicator.showWhile(null,new Runnable(){
    public void run(){
      parentCreate();
      fViewer.setCheckedElements(getInitialElementSelections().toArray());
      if (fExpandedElements != null) {
        fViewer.setExpandedElements(fExpandedElements);
      }
      updateOKStatus();
    }
  }
);
}","public void create(){
  BusyIndicator.showWhile(null,new Runnable(){
    public void run(){
      parentCreate();
      fViewer.setCheckedElements(getInitialElementSelections().toArray());
      updateOKStatus();
    }
  }
);
}",0.8150807899461401
140689,"/** 
 * Add the checked listener for treeviewer or tableviewer.
 */
protected void addCheckedListener(){
  fViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      if (event.getChecked()) {
        fViewer.setSubtreeChecked(event.getElement(),true);
      }
 else {
        fViewer.setSubtreeChecked(event.getElement(),false);
      }
    }
  }
);
}","/** 
 * Add the checked listener for treeviewer or tableviewer.
 */
protected void addCheckedListener(){
}",0.4
140690,"/** 
 * Creates the tree viewer.
 * @param parent the parent composite
 * @return the tree viewer
 */
protected CheckboxTreeViewer createFirstPart(Composite parent){
  if (fContainerMode) {
    fViewer=new ContainerCheckedTreeViewer(parent,SWT.BORDER){
      protected void handleTreeExpand(      TreeEvent event){
        super.handleTreeExpand(event);
        checkElementChecked();
      }
    }
;
  }
 else {
    fViewer=new CheckboxTreeViewer(parent,SWT.BORDER){
      protected void handleTreeExpand(      TreeEvent event){
        super.handleTreeExpand(event);
        checkElementChecked();
      }
    }
;
  }
  fViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  applyDialogFont(fViewer.getTree());
  fViewer.setContentProvider(fContentProvider);
  fViewer.setLabelProvider(fLabelProvider);
  fViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      updateOKStatus();
    }
  }
);
  fViewer.setComparator(fComparator);
  if (fFilters != null) {
    for (int i=0; i != fFilters.size(); i++) {
      fViewer.addFilter((ViewerFilter)fFilters.get(i));
    }
  }
  fViewer.setInput(fInput);
  fViewer.addSelectionChangedListener(this);
  return fViewer;
}","/** 
 * Creates the tree viewer.
 * @param parent the parent composite
 * @return the tree viewer
 */
protected CheckboxTreeViewer createFirstPart(Composite parent){
  if (fContainerMode) {
    fViewer=new ContainerCheckedTreeViewer(parent,SWT.BORDER);
  }
 else {
    fViewer=new CheckboxTreeViewer(parent,SWT.BORDER){
      protected void handleTreeExpand(      TreeEvent event){
        super.handleTreeExpand(event);
      }
    }
;
  }
  fViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  applyDialogFont(fViewer.getTree());
  fViewer.setContentProvider(fContentProvider);
  fViewer.setLabelProvider(fLabelProvider);
  fViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      updateOKStatus();
    }
  }
);
  fViewer.setComparator(fComparator);
  if (fFilters != null) {
    for (int i=0; i != fFilters.size(); i++) {
      fViewer.addFilter((ViewerFilter)fFilters.get(i));
    }
  }
  fViewer.setInput(fInput);
  fViewer.addSelectionChangedListener(this);
  return fViewer;
}",0.9230769230769232
140691,"protected void handleTreeExpand(TreeEvent event){
  super.handleTreeExpand(event);
  checkElementChecked();
}","protected void handleTreeExpand(TreeEvent event){
  super.handleTreeExpand(event);
}",0.8704663212435233
140692,"/** 
 * Constructs an instance of <code>ElementTreeSelectionDialog</code>.
 * @param parent The shell to parent from.
 * @param labelProvider the label provider to render the entries
 * @param contentProvider the content provider to evaluate the tree structure
 */
@SuppressWarnings(""String_Node_Str"") public TwoPartCheckSelectionDialog(Shell parent,String message){
  super(parent);
  setResult(new ArrayList(0));
  setStatusLineAboveButtons(true);
  fContainerMode=false;
  fExpandedElements=null;
  int shellStyle=getShellStyle();
  setShellStyle(shellStyle | SWT.MAX | SWT.RESIZE);
  setMessage(message);
  initProvider();
}","/** 
 * Constructs an instance of <code>ElementTreeSelectionDialog</code>.
 * @param parent The shell to parent from.
 * @param labelProvider the label provider to render the entries
 * @param contentProvider the content provider to evaluate the tree structure
 */
@SuppressWarnings(""String_Node_Str"") public TwoPartCheckSelectionDialog(Shell parent,String message){
  super(parent);
  setResult(new ArrayList(0));
  setStatusLineAboveButtons(true);
  fContainerMode=true;
  fExpandedElements=null;
  int shellStyle=getShellStyle();
  setShellStyle(shellStyle | SWT.MAX | SWT.RESIZE);
  setMessage(message);
  initProvider();
}",0.994422310756972
140693,"public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IFile) {
    IFile file=(IFile)parentElement;
    if (file.getName().endsWith(PluginConstant.REP_SUFFIX)) {
      TdReport findReport=RepResourceFileHelper.getInstance().findReport(file);
      Object[] array=ReportHelper.getAnalyses(findReport).toArray();
      return ComparatorsFactory.sort(array,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
    parentElement=PrvResourceFileHelper.getInstance().getFileResource(file);
  }
 else   if (parentElement instanceof IFolderNode) {
    IFolderNode folerNode=(IFolderNode)parentElement;
    if (!(folerNode.isLoaded())) {
      folerNode.loadChildren();
    }
    return ComparatorsFactory.sort(folerNode.getChildren(),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
  }
 else   if (SwitchHelpers.CATALOG_SWITCH.doSwitch((EObject)parentElement) != null) {
    if (CatalogHelper.getSchemas(SwitchHelpers.CATALOG_SWITCH.doSwitch((EObject)parentElement)).size() > 0) {
      return ComparatorsFactory.sort(super.getChildren(parentElement),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
 else {
      return FolderNodeHelper.getFolderNode((EObject)parentElement);
    }
  }
 else {
    return FolderNodeHelper.getFolderNode((EObject)parentElement);
  }
  return ComparatorsFactory.sort(super.getChildren(parentElement),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
}","public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IFile) {
    IFile file=(IFile)parentElement;
    if (file.getName().endsWith(PluginConstant.REP_SUFFIX)) {
      TdReport findReport=RepResourceFileHelper.getInstance().findReport(file);
      Object[] array=ReportHelper.getAnalyses(findReport).toArray();
      return ComparatorsFactory.sort(array,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
    parentElement=PrvResourceFileHelper.getInstance().getFileResource(file);
  }
 else   if (parentElement instanceof IFolderNode) {
    IFolderNode folerNode=(IFolderNode)parentElement;
    if (!(folerNode.isLoaded())) {
      folerNode.loadChildren();
    }
    return ComparatorsFactory.sort(folerNode.getChildren(),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
  }
 else   if (SwitchHelpers.CATALOG_SWITCH.doSwitch((EObject)parentElement) != null) {
    if (CatalogHelper.getSchemas(SwitchHelpers.CATALOG_SWITCH.doSwitch((EObject)parentElement)).size() > 0) {
      return ComparatorsFactory.sort(super.getChildren(parentElement),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
 else {
      return FolderNodeHelper.getFolderNodes((EObject)parentElement);
    }
  }
 else {
    return FolderNodeHelper.getFolderNodes((EObject)parentElement);
  }
  return ComparatorsFactory.sort(super.getChildren(parentElement),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
}",0.9992897727272728
140694,"@Override protected void createFormContent(IManagedForm managedForm){
  final ScrolledForm form=managedForm.getForm();
  Composite body=form.getBody();
  form.setText(""String_Node_Str"");
  body.setLayout(new GridLayout(2,true));
  topComp=toolkit.createComposite(body);
  GridData anasisData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  topComp.setLayoutData(anasisData);
  topComp.setLayout(new GridLayout(1,false));
  metadataSection=creatMetadataSection(form,topComp);
}","@Override protected void createFormContent(IManagedForm managedForm){
  final ScrolledForm form=managedForm.getForm();
  Composite body=form.getBody();
  body.setLayout(new GridLayout(2,true));
  topComp=toolkit.createComposite(body);
  GridData anasisData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  topComp.setLayoutData(anasisData);
  topComp.setLayout(new GridLayout(1,false));
  metadataSection=creatMetadataSection(form,topComp);
}",0.9641760491299898
140695,"@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  final ScrolledForm form=managedForm.getForm();
  metadataSection.setText(""String_Node_Str"");
  metadataSection.setDescription(""String_Node_Str"");
  createAnalysisColumnsSection(form,topComp);
  createDataFilterSection(form,topComp);
  Composite body=form.getBody();
  Composite previewComp=toolkit.createComposite(body);
  GridData previewData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  previewComp.setLayoutData(previewData);
  previewComp.setLayout(new GridLayout());
  createPreviewSection(form,previewComp);
  GridData gdBtn=new GridData();
  gdBtn.horizontalAlignment=SWT.CENTER;
  gdBtn.horizontalSpan=2;
  gdBtn.widthHint=120;
  Button runBtn=toolkit.createButton(form.getBody(),""String_Node_Str"",SWT.NONE);
  runBtn.setLayoutData(gdBtn);
  runBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new RunAnalysisAction().run();
      refreshChart(form);
    }
  }
);
}","@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  final ScrolledForm form=managedForm.getForm();
  form.setText(""String_Node_Str"");
  metadataSection.setText(""String_Node_Str"");
  metadataSection.setDescription(""String_Node_Str"");
  createAnalysisColumnsSection(form,topComp);
  createDataFilterSection(form,topComp);
  Composite body=form.getBody();
  Composite previewComp=toolkit.createComposite(body);
  GridData previewData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  previewComp.setLayoutData(previewData);
  previewComp.setLayout(new GridLayout());
  createPreviewSection(form,previewComp);
  GridData gdBtn=new GridData();
  gdBtn.horizontalAlignment=SWT.CENTER;
  gdBtn.horizontalSpan=2;
  gdBtn.widthHint=120;
  Button runBtn=toolkit.createButton(form.getBody(),""String_Node_Str"",SWT.NONE);
  runBtn.setLayoutData(gdBtn);
  runBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new RunAnalysisAction().run();
      refreshChart(form);
    }
  }
);
}",0.9841700587969244
140696,"@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  final ScrolledForm form=managedForm.getForm();
  this.metadataSection.setText(""String_Node_Str"");
  this.metadataSection.setDescription(""String_Node_Str"");
  createInformationSection(form,topComp);
  Button checkBtn=toolkit.createButton(topComp,""String_Node_Str"",SWT.NONE);
  GridData gd=new GridData();
  gd.verticalSpan=20;
  gd.horizontalAlignment=SWT.CENTER;
  checkBtn.setLayoutData(gd);
  checkBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ReturnCode code=checkDBConnection();
      if (code.isOk()) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
 else {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"" + code.getMessage());
      }
    }
  }
);
}","@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  final ScrolledForm form=managedForm.getForm();
  form.setText(""String_Node_Str"");
  this.metadataSection.setText(""String_Node_Str"");
  this.metadataSection.setDescription(""String_Node_Str"");
  createInformationSection(form,topComp);
  Button checkBtn=toolkit.createButton(topComp,""String_Node_Str"",SWT.NONE);
  GridData gd=new GridData();
  gd.verticalSpan=20;
  gd.horizontalAlignment=SWT.CENTER;
  checkBtn.setLayoutData(gd);
  checkBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ReturnCode code=checkDBConnection();
      if (code.isOk()) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
 else {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"" + code.getMessage());
      }
    }
  }
);
}",0.9811929070392262
140697,"@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(""String_Node_Str"" + analysis.getName() + ""String_Node_Str"",IProgressMonitor.UNKNOWN);
  try {
    Thread.sleep(5000);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  final ReturnCode executed=finalExec.execute(finalAnalysis);
  monitor.done();
  if (executed.isOk()) {
    if (log.isInfoEnabled()) {
      int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
      log.info(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    }
    AnaResourceFileHelper.getInstance().save(finalAnalysis);
    return Status.OK_STATUS;
  }
 else {
    int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
    log.warn(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MessageDialogWithToggle.openError(null,""String_Node_Str"",""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed.getMessage());
      }
    }
);
    return Status.CANCEL_STATUS;
  }
}","@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(""String_Node_Str"" + analysis.getName() + ""String_Node_Str"",IProgressMonitor.UNKNOWN);
  final ReturnCode executed=finalExec.execute(finalAnalysis);
  monitor.done();
  if (executed.isOk()) {
    if (log.isInfoEnabled()) {
      int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
      log.info(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    }
    AnaResourceFileHelper.getInstance().save(finalAnalysis);
    return Status.OK_STATUS;
  }
 else {
    int executionDuration=analysis.getResults().getResultMetadata().getExecutionDuration();
    log.warn(""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed+ ""String_Node_Str""+ FORMAT_SECONDS.format(Double.valueOf(executionDuration) / 1000)+ ""String_Node_Str"");
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        MessageDialogWithToggle.openError(null,""String_Node_Str"",""String_Node_Str"" + finalAnalysis.getName() + ""String_Node_Str""+ executed.getMessage());
      }
    }
);
    return Status.CANCEL_STATUS;
  }
}",0.9664429530201344
140698,"@Override protected boolean check(Analysis analysis){
  if (analysis.getContext().getAnalysedElements().size() == 0) {
    if (analysis.getContext().getConnection() == null) {
      this.errorMessage=""String_Node_Str"";
      return false;
    }
    this.errorMessage=""String_Node_Str"";
    return false;
  }
  if (analysis != null) {
    ColumnAnalysisHandler analysisHandler=new ColumnAnalysisHandler();
    analysisHandler.setAnalysis(analysis);
    for (    ModelElement node : analysis.getContext().getAnalysedElements()) {
      TdColumn column=SwitchHelpers.COLUMN_SWITCH.doSwitch(node);
      if (analysisHandler.getIndicators(column).size() == 0) {
        this.errorMessage=""String_Node_Str"" + ""String_Node_Str"";
        return false;
      }
    }
  }
  return super.check(analysis);
}","@Override protected boolean check(final Analysis analysis){
  if (analysis == null) {
    this.errorMessage=""String_Node_Str"";
    return false;
  }
  if (!super.check(analysis)) {
    return false;
  }
  AnalysisContext context=analysis.getContext();
  if (context == null) {
    this.errorMessage=""String_Node_Str"" + analysis.getName();
    return false;
  }
  if (context.getAnalysedElements().size() == 0) {
    this.errorMessage=""String_Node_Str"";
    return false;
  }
  if (context.getConnection() == null) {
    this.errorMessage=""String_Node_Str"";
    return false;
  }
  ColumnAnalysisHandler analysisHandler=new ColumnAnalysisHandler();
  analysisHandler.setAnalysis(analysis);
  for (  ModelElement node : context.getAnalysedElements()) {
    TdColumn column=SwitchHelpers.COLUMN_SWITCH.doSwitch(node);
    if (analysisHandler.getIndicators(column).size() == 0) {
      this.errorMessage=""String_Node_Str"" + ""String_Node_Str"";
      return false;
    }
    TdDataProvider dp=DataProviderHelper.getTdDataProvider(column);
    if (!isAccessWith(dp)) {
      this.errorMessage=""String_Node_Str"" + column.getName() + ""String_Node_Str""+ dataprovider.getName()+ ""String_Node_Str"";
      return false;
    }
  }
  return true;
}",0.3491124260355029
140699,"/** 
 * DOC scorreia Comment method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=quote(tdColumn.getName());
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  sqlGenericExpression=getSqlExpression(indicatorDefinition,language);
  if (sqlGenericExpression == null) {
    log.warn(""String_Node_Str"" + language + ""String_Node_Str""+ indicatorDefinition.getName());
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + dbms().getDefaultLanguage());
    }
    sqlGenericExpression=getSqlExpression(indicatorDefinition,dbms().getDefaultLanguage());
  }
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicator.eClass().getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition));
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges());
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank()) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
    }
  }
  String table=quote(ColumnHelper.getColumnSetFullName(tdColumn));
  String catalogName=getCatalogName(tdColumn);
  table=dbms().toQualifiedName(catalogName,null,table);
  String completedSqlString=null;
  if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        String genericSQL=sqlGenericExpression.getBody();
        int beginIndex=genericSQL.indexOf(dbms().orderBy());
        if (beginIndex != -1) {
          int lastIndex=genericSQL.lastIndexOf(dbms().desc());
          String orderByClause=genericSQL.substring(beginIndex,lastIndex);
          completedSqlString=completedSqlString + orderByClause + dbms().desc();
        }
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUniqueCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getDuplicateCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator())) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + language + ""String_Node_Str""+ completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=instantiateSqlExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}","/** 
 * DOC scorreia Comment method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  String colName=quote(tdColumn.getName());
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(""String_Node_Str"" + colName + ""String_Node_Str""+ buf.toString().trim()+ ""String_Node_Str"");
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition=indicator.getIndicatorDefinition();
  if (indicatorDefinition == null) {
    return traceError(""String_Node_Str"" + indicator.getName());
  }
  sqlGenericExpression=getSqlExpression(indicatorDefinition,language);
  if (sqlGenericExpression == null) {
    log.warn(""String_Node_Str"" + language + ""String_Node_Str""+ indicatorDefinition.getName());
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + dbms().getDefaultLanguage());
    }
    sqlGenericExpression=getSqlExpression(indicatorDefinition,dbms().getDefaultLanguage());
  }
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    return traceError(""String_Node_Str"" + (indicator.getName() != null ? indicator.getName() : indicator.eClass().getName()) + ""String_Node_Str""+ ResourceHelper.getUUID(indicatorDefinition));
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges());
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank()) {
        whereExpression.add(dbms().isNotBlank(colName));
      }
      if (textParameter.isUseNulls()) {
        colName=dbms().replaceNullsWithString(colName,""String_Node_Str"");
      }
    }
  }
  String table=quote(ColumnHelper.getColumnSetFullName(tdColumn));
  String catalogName=getCatalogName(tdColumn);
  table=dbms().toQualifiedName(catalogName,null,table);
  String completedSqlString=null;
  if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
    int topN=indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        String genericSQL=sqlGenericExpression.getBody();
        int beginIndex=genericSQL.indexOf(dbms().orderBy());
        if (beginIndex != -1) {
          int lastIndex=genericSQL.lastIndexOf(dbms().desc());
          String orderByClause=genericSQL.substring(beginIndex,lastIndex);
          completedSqlString=completedSqlString + orderByClause + dbms().desc();
        }
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if ((dateAggregationType != null) && Java2SqlType.isDateInSQL(tdColumn.getJavaType())) {
      completedSqlString=getDateAggregatedCompletedString(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getUniqueCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getDuplicateCountIndicator())) {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
    completedSqlString=dbms().countRowInSubquery(completedSqlString,""String_Node_Str"");
  }
 else   if (indicator.eClass().equals(IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator())) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(""String_Node_Str"" + language + ""String_Node_Str""+ indicator.getName());
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + language + ""String_Node_Str""+ completedSqlString);
  }
  String finalQuery=completedSqlString;
  Expression instantiateSqlExpression=instantiateSqlExpression(language,finalQuery);
  indicator.setInstantiatedExpression(instantiateSqlExpression);
  return true;
}",0.9962264150943396
140700,"@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  expression.setLanguage(""String_Node_Str"");
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  EMFUtil util=EMFSharedResources.getSharedEmfUtil();
  IPath location=folder.getLocation();
  String fname=DqRepositoryViewService.createFilename(folder.getName(),name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  location=location.removeLastSegments(1);
  location=location.append(fname);
  util.addPoolToResourceSet(new File(location.toPortableString()),pattern);
  util.saveLastResource();
  return true;
}","@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  TaggedValueHelper.setAuthor(pattern,AbstractWizardPage.getConnectionParams().getAuthor());
  TaggedValueHelper.setDescription(AbstractWizardPage.getConnectionParams().getDescription(),pattern);
  TaggedValueHelper.setPurpose(AbstractWizardPage.getConnectionParams().getPurpose(),pattern);
  TaggedValueHelper.setDevStatus(pattern,DevelopmentStatus.get(AbstractWizardPage.getConnectionParams().getStatus()));
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  String cl=mPage2.getComboLang();
  expression.setLanguage(cl);
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  EMFUtil util=EMFSharedResources.getSharedEmfUtil();
  IPath location=folder.getLocation();
  String fname=DqRepositoryViewService.createFilename(folder.getName(),name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  location=location.removeLastSegments(1);
  location=location.append(fname);
  util.addPoolToResourceSet(new File(location.toPortableString()),pattern);
  util.saveLastResource();
  return true;
}",0.7871077184054284
140701,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(""String_Node_Str"");
  nameText=new Text(container,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label pathLab=new Label(container,SWT.NONE);
  pathLab.setText(""String_Node_Str"");
  Composite pathContainer=new Composite(container,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  button=new Button(pathContainer,SWT.PUSH);
  button.setText(""String_Node_Str"");
  defaultFolderProviderRes=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.PATTERNS);
  pathText.setText(defaultFolderProviderRes.getFullPath().toString());
  setControl(container);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      metadata.put(IParameterConstant.ANALYSIS_NAME,nameText.getText());
      getConnectionParams().setMetadate(metadata);
      setPageComplete(true);
    }
  }
);
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      openFolderSelectionDialog(DQStructureManager.LIBRARIES,DQStructureManager.PATTERNS);
    }
  }
);
  if (getControl() != null) {
    try {
      PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(),HelpPlugin.PATTERN_CONTEXT_HELP_ID);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayout(new FillLayout());
  super.createControl(container);
  defaultFolderProviderRes=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.PATTERNS);
  pathText.setText(defaultFolderProviderRes.getFullPath().toString());
  setControl(container);
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      openFolderSelectionDialog(DQStructureManager.LIBRARIES,DQStructureManager.PATTERNS);
    }
  }
);
  if (getControl() != null) {
    try {
      PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(),HelpPlugin.PATTERN_CONTEXT_HELP_ID);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.5694000709975151
140702,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(""String_Node_Str"");
  nameText=new Text(container,SWT.BORDER | SWT.MULTI | SWT.H_SCROLL| SWT.V_SCROLL);
  nameText.setLayoutData(new GridData(GridData.FILL_BOTH));
  setControl(container);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setPageComplete(true);
    }
  }
);
  if (getControl() != null) {
    try {
      PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(),HelpPlugin.PATTERN_CONTEXT_HELP_ID);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(""String_Node_Str"");
  nameText=new Text(container,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  setControl(container);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setPageComplete(true);
    }
  }
);
  if (getControl() != null) {
    try {
      PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(),HelpPlugin.PATTERN_CONTEXT_HELP_ID);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  nameLab=new Label(container,SWT.NONE);
  nameLab.setText(""String_Node_Str"");
  String[] types=SupportDBUrlStore.getInstance().getDBTypes();
  comboLang=new Combo(container,SWT.BORDER);
  comboLang.setItems(types);
  comboLang.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (types.length > 0) {
    comboLang.select(0);
  }
}",0.7960354720918101
140703,"@Override protected void fillCoolBar(ICoolBarManager coolBar){
  IToolBarManager toolbar=new ToolBarManager(SWT.FLAT | SWT.RIGHT);
  coolBar.add(new ToolBarContributionItem(toolbar,""String_Node_Str""));
  toolbar.add(new ChangePerspectiveAction(true));
}","@Override protected void fillCoolBar(ICoolBarManager coolBar){
  IToolBarManager toolbar=new ToolBarManager(SWT.FLAT | SWT.RIGHT);
  coolBar.add(new ToolBarContributionItem(toolbar,""String_Node_Str""));
  toolbar.add(ActionFactory.SAVE.create(window));
  toolbar.add(new ChangePerspectiveAction(true));
}",0.9100719424460432
140704,"protected void makeActions(IWorkbenchWindow window){
  exitAction=ActionFactory.QUIT.create(window);
  register(exitAction);
  colseAction=ActionFactory.CLOSE.create(window);
  colseAllAction=ActionFactory.CLOSE_ALL.create(window);
  saveAction=ActionFactory.SAVE.create(window);
  register(saveAction);
  saveAllAction=ActionFactory.SAVE_ALL.create(window);
  register(saveAllAction);
  register(ActionFactory.DELETE.create(window));
  preferenceAction=ActionFactory.PREFERENCES.create(window);
  register(preferenceAction);
  welcomeAction=ActionFactory.INTRO.create(window);
  register(welcomeAction);
  helpAction=ActionFactory.HELP_CONTENTS.create(window);
  register(helpAction);
  aboutAction=ActionFactory.ABOUT.create(window);
  register(aboutAction);
  resetPerspectiveAction=ActionFactory.RESET_PERSPECTIVE.create(window);
  register(resetPerspectiveAction);
}","protected void makeActions(IWorkbenchWindow window){
  this.window=window;
  exitAction=ActionFactory.QUIT.create(window);
  register(exitAction);
  colseAction=ActionFactory.CLOSE.create(window);
  colseAllAction=ActionFactory.CLOSE_ALL.create(window);
  saveAction=ActionFactory.SAVE.create(window);
  register(saveAction);
  saveAllAction=ActionFactory.SAVE_ALL.create(window);
  register(saveAllAction);
  register(ActionFactory.DELETE.create(window));
  preferenceAction=ActionFactory.PREFERENCES.create(window);
  register(preferenceAction);
  welcomeAction=ActionFactory.INTRO.create(window);
  register(welcomeAction);
  helpAction=ActionFactory.HELP_CONTENTS.create(window);
  register(helpAction);
  aboutAction=ActionFactory.ABOUT.create(window);
  register(aboutAction);
  resetPerspectiveAction=ActionFactory.RESET_PERSPECTIVE.create(window);
  register(resetPerspectiveAction);
}",0.9875283446712018
140705,"public DeleteCWMResourceAction(){
  super(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  this.shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.ACTION_DELETE));
}","public DeleteCWMResourceAction(){
  super(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  this.shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.DELETE_ACTION));
}",0.9732824427480916
140706,"public RemoveAnalysisAction(){
  super(""String_Node_Str"");
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.ACTION_DELETE));
}","public RemoveAnalysisAction(){
  super(""String_Node_Str"");
  setImageDescriptor(ImageLib.getImageDescriptor(ImageLib.DELETE_ACTION));
}",0.9481481481481482
140707,"/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new Tree(parent,SWT.MULTI);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(false);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(80);
  TreeColumn column3=new TreeColumn(newTree,SWT.CENTER);
  column3.setWidth(120);
  parent.layout();
  Menu menu=new Menu(newTree);
  MenuItem deleteMenuItem=new MenuItem(menu,SWT.CASCADE);
  deleteMenuItem.setText(""String_Node_Str"");
  deleteMenuItem.setImage(ImageLib.getImage(ImageLib.ACTION_DELETE));
  deleteMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      removeSelectedElements(newTree);
    }
  }
);
  newTree.setMenu(menu);
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
    }
  }
;
  parent.setData(AbstractFormPage.ACTION_HANDLER,actionHandler);
  PatternDNDFactory.installDND(newTree);
  return newTree;
}","/** 
 * @param parent
 */
private Tree createTree(Composite parent){
  final Tree newTree=new Tree(parent,SWT.MULTI);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(newTree);
  newTree.setHeaderVisible(false);
  TreeColumn column1=new TreeColumn(newTree,SWT.CENTER);
  column1.setWidth(190);
  TreeColumn column2=new TreeColumn(newTree,SWT.CENTER);
  column2.setWidth(80);
  TreeColumn column3=new TreeColumn(newTree,SWT.CENTER);
  column3.setWidth(120);
  parent.layout();
  Menu menu=new Menu(newTree);
  MenuItem deleteMenuItem=new MenuItem(menu,SWT.CASCADE);
  deleteMenuItem.setText(""String_Node_Str"");
  deleteMenuItem.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  deleteMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      removeSelectedElements(newTree);
    }
  }
);
  newTree.setMenu(menu);
  AbstractAnalysisActionHandler actionHandler=new AbstractAnalysisActionHandler(parent){
    @Override protected void handleRemove(){
      removeSelectedElements(newTree);
    }
  }
;
  parent.setData(AbstractFormPage.ACTION_HANDLER,actionHandler);
  PatternDNDFactory.installDND(newTree);
  return newTree;
}",0.9942903752039152
140708,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.PatternMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis){
        @Override public void dispose(){
          activeCount=0;
          super.dispose();
        }
      }
;
      try {
        WizardDialog dialog=new WizardDialog(null,wizard){
          @Override public void openTray(          DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
            super.openTray(tray);
            if (tray instanceof HelpTray) {
              HelpTray helpTray=(HelpTray)tray;
              ReusableHelpPart helpPart=helpTray.getHelpPart();
              helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
            }
          }
        }
;
        dialog.setPageSize(300,400);
        dialog.create();
        dialog.getShell().addShellListener(new ShellAdapter(){
          @Override public void shellActivated(          ShellEvent e){
            String string=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
            if (activeCount < 2) {
              Point point=e.widget.getDisplay().getCursorLocation();
              IContext context=HelpSystem.getContext(string);
              IHelpResource[] relatedTopics=context.getRelatedTopics();
              for (              IHelpResource topic : relatedTopics) {
                topic.getLabel();
                topic.getHref();
              }
              IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
              helpSystem.displayContext(context,point.x + 15,point.y);
              activeCount++;
              ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
              if (lastActiveInstance != null) {
                String href=IndicatorParameterTypes.getHref(indicator);
                if (href != null) {
                  lastActiveInstance.showURL(href);
                }
              }
            }
          }
        }
);
        int open=dialog.open();
        if (Window.OK == open) {
          setDirty(wizard.isDirty());
        }
      }
 catch (      AssertionFailedException ex) {
        MessageDialogWithToggle.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.ACTION_DELETE));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,2);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=indicatorUnit.getIndicatorName();
  if (IndicatorEnum.PatternMatchingIndicatorEnum.compareTo(type) == 0) {
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis){
        @Override public void dispose(){
          activeCount=0;
          super.dispose();
        }
      }
;
      try {
        WizardDialog dialog=new WizardDialog(null,wizard){
          @Override public void openTray(          DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
            super.openTray(tray);
            if (tray instanceof HelpTray) {
              HelpTray helpTray=(HelpTray)tray;
              ReusableHelpPart helpPart=helpTray.getHelpPart();
              helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
            }
          }
        }
;
        dialog.setPageSize(300,400);
        dialog.create();
        dialog.getShell().addShellListener(new ShellAdapter(){
          @Override public void shellActivated(          ShellEvent e){
            String string=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
            if (activeCount < 2) {
              Point point=e.widget.getDisplay().getCursorLocation();
              IContext context=HelpSystem.getContext(string);
              IHelpResource[] relatedTopics=context.getRelatedTopics();
              for (              IHelpResource topic : relatedTopics) {
                topic.getLabel();
                topic.getHref();
              }
              IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
              helpSystem.displayContext(context,point.x + 15,point.y);
              activeCount++;
              ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
              if (lastActiveInstance != null) {
                String href=IndicatorParameterTypes.getHref(indicator);
                if (href != null) {
                  lastActiveInstance.showURL(href);
                }
              }
            }
          }
        }
);
        int open=dialog.open();
        if (Window.OK == open) {
          setDirty(wizard.isDirty());
        }
      }
 catch (      AssertionFailedException ex) {
        MessageDialogWithToggle.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,2);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
}",0.9985699693564862
140709,"public void setElements(final ColumnIndicator[] elements){
  this.tree.dispose();
  this.tree=createTree(this.parentComp);
  this.columnIndicators=elements;
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    final ColumnIndicator columnIndicator=(ColumnIndicator)elements[i];
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    String columnName=columnIndicator.getTdColumn().getName();
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ columnIndicator.getTdColumn().getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,columnIndicator);
    treeItem.setData(VIEWER_KEY,this);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(columnIndicator.getTdColumn());
    if (dataminingType == null) {
      dataminingType=MetadataHelper.getDefaultDataminingType(columnIndicator.getTdColumn().getJavaType());
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),columnIndicator.getTdColumn());
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.ACTION_DELETE));
    delLabel.setToolTipText(""String_Node_Str"");
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(columnIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(columnIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=WIDTH1_CELL;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,2);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor});
    if (columnIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,columnIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}","public void setElements(final ColumnIndicator[] elements){
  this.tree.dispose();
  this.tree=createTree(this.parentComp);
  this.columnIndicators=elements;
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    final ColumnIndicator columnIndicator=(ColumnIndicator)elements[i];
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    String columnName=columnIndicator.getTdColumn().getName();
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ columnIndicator.getTdColumn().getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,columnIndicator);
    treeItem.setData(VIEWER_KEY,this);
    TreeEditor comboEditor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    DataminingType dataminingType=MetadataHelper.getDataminingType(columnIndicator.getTdColumn());
    if (dataminingType == null) {
      dataminingType=MetadataHelper.getDefaultDataminingType(columnIndicator.getTdColumn().getJavaType());
    }
    if (dataminingType == null) {
      combo.select(0);
    }
 else {
      combo.setText(dataminingType.getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        MetadataHelper.setDataminingType(DataminingType.get(combo.getText()),columnIndicator.getTdColumn());
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    comboEditor.minimumWidth=WIDTH1_CELL;
    comboEditor.setEditor(combo,treeItem,1);
    TreeEditor delLabelEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
    delLabel.setToolTipText(""String_Node_Str"");
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(columnIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(columnIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    delLabelEditor.minimumWidth=WIDTH1_CELL;
    delLabelEditor.horizontalAlignment=SWT.CENTER;
    delLabelEditor.setEditor(delLabel,treeItem,2);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{comboEditor,delLabelEditor});
    if (columnIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,columnIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}",0.9975541579315164
140710,"public void widgetSelected(SelectionEvent e){
  tempPatternComponents.remove(finalRegExpress);
  expressComp.dispose();
  sectionComp.layout();
  setDirty(true);
}","public void widgetSelected(SelectionEvent e){
  tempPatternComponents.remove(finalRegExpress);
  expressComp.dispose();
  sectionComp.layout();
  form.reflow(true);
  setDirty(true);
}",0.9394812680115274
140711,"private void creatNewExpressLine(RegularExpressionImpl regularExpress){
  final Composite expressComp=new Composite(componentsComp,SWT.NONE);
  expressComp.setLayout(new GridLayout(10,true));
  final CCombo combo=new CCombo(expressComp,SWT.BORDER);
  combo.setEditable(false);
  combo.setItems(allDBTypes);
  final RegularExpressionImpl finalRegExpress=regularExpress;
  String language=regularExpress.getExpression().getLanguage();
  if (language == null) {
    combo.setText(ALL_DATABASE_TYPE);
  }
 else {
    combo.setText(language.equalsIgnoreCase(SQL) ? ALL_DATABASE_TYPE : language);
  }
  GridDataFactory.fillDefaults().span(2,1).grab(true,false).applyTo(combo);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String language=combo.getText().equalsIgnoreCase(ALL_DATABASE_TYPE) ? SQL : combo.getText();
      finalRegExpress.getExpression().setLanguage(language);
      setDirty(true);
    }
  }
);
  final Text patternText=new Text(expressComp,SWT.BORDER);
  patternText.setText(regularExpress.getExpression().getBody() == null ? PluginConstant.EMPTY_STRING : regularExpress.getExpression().getBody());
  GridDataFactory.fillDefaults().span(7,1).grab(true,false).applyTo(patternText);
  patternText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      finalRegExpress.getExpression().setBody(patternText.getText());
      setDirty(true);
    }
  }
);
  Button delButton=new Button(expressComp,SWT.NONE);
  delButton.setText(""String_Node_Str"");
  delButton.setToolTipText(""String_Node_Str"");
  GridDataFactory.fillDefaults().span(1,1).grab(true,false).applyTo(delButton);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      tempPatternComponents.remove(finalRegExpress);
      expressComp.dispose();
      sectionComp.layout();
      setDirty(true);
    }
  }
);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(expressComp);
}","private void creatNewExpressLine(final ScrolledForm form,RegularExpressionImpl regularExpress){
  final Composite expressComp=new Composite(componentsComp,SWT.NONE);
  expressComp.setLayout(new GridLayout(10,true));
  final CCombo combo=new CCombo(expressComp,SWT.BORDER);
  combo.setEditable(false);
  combo.setItems(allDBTypes);
  final RegularExpressionImpl finalRegExpress=regularExpress;
  String language=regularExpress.getExpression().getLanguage();
  if (language == null) {
    combo.setText(ALL_DATABASE_TYPE);
  }
 else {
    combo.setText(language.equalsIgnoreCase(SQL) ? ALL_DATABASE_TYPE : language);
  }
  GridDataFactory.fillDefaults().span(2,1).grab(true,false).applyTo(combo);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String language=combo.getText().equalsIgnoreCase(ALL_DATABASE_TYPE) ? SQL : combo.getText();
      finalRegExpress.getExpression().setLanguage(language);
      setDirty(true);
    }
  }
);
  final Text patternText=new Text(expressComp,SWT.BORDER);
  patternText.setText(regularExpress.getExpression().getBody() == null ? PluginConstant.EMPTY_STRING : regularExpress.getExpression().getBody());
  GridDataFactory.fillDefaults().span(7,1).grab(true,false).applyTo(patternText);
  patternText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      finalRegExpress.getExpression().setBody(patternText.getText());
      setDirty(true);
    }
  }
);
  Button delButton=new Button(expressComp,SWT.NONE);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setToolTipText(""String_Node_Str"");
  GridDataFactory.fillDefaults().span(1,1).grab(true,false).applyTo(delButton);
  delButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      tempPatternComponents.remove(finalRegExpress);
      expressComp.dispose();
      sectionComp.layout();
      form.reflow(true);
      setDirty(true);
    }
  }
);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(expressComp);
}",0.9725565719788156
140712,"private void createAddButton(final ScrolledForm form){
  final Button addButton=new Button(sectionComp,SWT.NONE);
  addButton.setText(""String_Node_Str"");
  addButton.setToolTipText(""String_Node_Str"");
  GridData gdButton=new GridData();
  gdButton.horizontalAlignment=SWT.CENTER;
  gdButton.widthHint=65;
  addButton.setLayoutData(gdButton);
  addButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Expression expression=CoreFactory.eINSTANCE.createExpression();
      expression.setLanguage(SQL);
      RegularExpressionImpl newRegularExpress=(RegularExpressionImpl)PatternFactory.eINSTANCE.createRegularExpression();
      newRegularExpress.setExpression(expression);
      creatNewExpressLine(newRegularExpress);
      tempPatternComponents.add(newRegularExpress);
      form.reflow(true);
      setDirty(true);
    }
  }
);
}","private void createAddButton(final ScrolledForm form){
  final Button addButton=new Button(sectionComp,SWT.NONE);
  addButton.setImage(ImageLib.getImage(ImageLib.ADD_ACTION));
  addButton.setToolTipText(""String_Node_Str"");
  GridData labelGd=new GridData();
  labelGd.horizontalAlignment=SWT.CENTER;
  labelGd.widthHint=65;
  addButton.setLayoutData(labelGd);
  addButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Expression expression=CoreFactory.eINSTANCE.createExpression();
      expression.setLanguage(SQL);
      RegularExpressionImpl newRegularExpress=(RegularExpressionImpl)PatternFactory.eINSTANCE.createRegularExpression();
      newRegularExpress.setExpression(expression);
      creatNewExpressLine(form,newRegularExpress);
      tempPatternComponents.add(newRegularExpress);
      form.reflow(true);
      setDirty(true);
    }
  }
);
}",0.8995002776235425
140713,"private void creatPatternDefinitionSection(ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,""String_Node_Str"",false,null);
  sectionComp=toolkit.createComposite(section);
  sectionComp.setLayout(new GridLayout());
  componentsComp=new Composite(sectionComp,SWT.NONE);
  componentsComp.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(componentsComp);
  EList<PatternComponent> components=this.pattern.getComponents();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    creatNewExpressLine(regularExpress);
  }
  createAddButton(form);
  section.setClient(sectionComp);
}","private void creatPatternDefinitionSection(ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,""String_Node_Str"",false,null);
  sectionComp=toolkit.createComposite(section);
  sectionComp.setLayout(new GridLayout());
  componentsComp=new Composite(sectionComp,SWT.NONE);
  componentsComp.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(componentsComp);
  EList<PatternComponent> components=this.pattern.getComponents();
  for (int i=0; i < components.size(); i++) {
    RegularExpressionImpl regularExpress=(RegularExpressionImpl)components.get(i);
    creatNewExpressLine(form,regularExpress);
  }
  createAddButton(form);
  section.setClient(sectionComp);
}",0.9966733200266136
140714,"@Override protected void initialize(){
  if (parameter == null) {
    parameter=new TextLengthParameter();
  }
 else {
    nullBtn.setSelection(parameter.isUseNull());
    blankBtn.setSelection(parameter.isUseBlank());
  }
}","@Override protected void initialize(){
  if (parameter == null) {
    parameter=new TextLengthParameter();
    parameter.setUseBlank(true);
  }
  nullBtn.setSelection(parameter.isUseNull());
  blankBtn.setSelection(parameter.isUseBlank());
}",0.8946236559139785
140715,"public String getText(Object element){
  if (element instanceof TableFolderNode) {
    TableFolderNode node=(TableFolderNode)element;
    if (node.isLoaded()) {
      Package catalogOrSchema=PackageHelper.getCatalogOrSchema(node.getParent());
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + PackageHelper.getTables(catalogOrSchema).size()+ ""String_Node_Str"";
    }
 else {
      return ((IFolderNode)element).getName();
    }
  }
  if (element instanceof ViewFolderNode) {
    ViewFolderNode node=(ViewFolderNode)element;
    if (node.isLoaded()) {
      Package catalogOrSchema=PackageHelper.getCatalogOrSchema(node.getParent());
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + PackageHelper.getViews(catalogOrSchema).size()+ ""String_Node_Str"";
    }
 else {
      return ((IFolderNode)element).getName();
    }
  }
  if (element instanceof ColumnFolderNode) {
    ColumnFolderNode node=(ColumnFolderNode)element;
    if (node.isLoaded()) {
      ColumnSet table=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(node.getParent());
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + ColumnSetHelper.getColumns(table).size()+ ""String_Node_Str"";
    }
 else {
      return ((IFolderNode)element).getName();
    }
  }
  if (element instanceof Pattern) {
    Pattern pattern=(Pattern)element;
    RegularExpression patternComponent=(RegularExpression)pattern.getComponents().get(0);
    return patternComponent.getExpression().getBody();
  }
  return super.getText(element);
}","public String getText(Object element){
  if (element instanceof TableFolderNode) {
    TableFolderNode node=(TableFolderNode)element;
    Package catalogOrSchema=PackageHelper.getCatalogOrSchema(node.getParent());
    return ((IFolderNode)element).getName() + ""String_Node_Str"" + PackageHelper.getTables(catalogOrSchema).size()+ ""String_Node_Str"";
  }
  if (element instanceof ViewFolderNode) {
    ViewFolderNode node=(ViewFolderNode)element;
    Package catalogOrSchema=PackageHelper.getCatalogOrSchema(node.getParent());
    return ((IFolderNode)element).getName() + ""String_Node_Str"" + PackageHelper.getViews(catalogOrSchema).size()+ ""String_Node_Str"";
  }
  if (element instanceof ColumnFolderNode) {
    ColumnFolderNode node=(ColumnFolderNode)element;
    ColumnSet table=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(node.getParent());
    return ((IFolderNode)element).getName() + ""String_Node_Str"" + ColumnSetHelper.getColumns(table).size()+ ""String_Node_Str"";
  }
  if (element instanceof Pattern) {
    Pattern pattern=(Pattern)element;
    RegularExpression patternComponent=(RegularExpression)pattern.getComponents().get(0);
    return patternComponent.getExpression().getBody();
  }
  return super.getText(element);
}",0.715429403202329
140716,"@SuppressWarnings(""String_Node_Str"") public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IContainer) {
    IContainer container=((IContainer)parentElement);
    IResource[] members=null;
    try {
      members=container.members();
    }
 catch (    CoreException e) {
      log.error(""String_Node_Str"" + container.getLocation());
    }
    if (container.equals(ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.METADATA).getFolder(DQStructureManager.DB_CONNECTIONS))) {
      sort(members,ComparatorsFactory.FILEMODEL_COMPARATOR_ID);
    }
    return members;
  }
 else   if (parentElement instanceof NamedColumnSet) {
    return null;
  }
 else   if (parentElement instanceof NamedColumnSetFolderNode) {
    NamedColumnSetFolderNode folerNode=(NamedColumnSetFolderNode)parentElement;
    if (!(folerNode.isLoaded())) {
      folerNode.loadChildren();
    }
    Object[] children=folerNode.getChildren();
    if (children != null && children.length > 0) {
      if (!(children[0] instanceof ColumnSet)) {
        return children;
      }
      for (int i=0; i < children.length; i++) {
        ColumnSet columnSet=(ColumnSet)children[i];
        ColumnSetKey key=new ColumnSetKey(columnSet);
        if (columnSetCheckedMap.containsKey(key)) {
          currentCheckedColumnSet.add(columnSet);
        }
      }
    }
    return sort(children,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
  }
  return super.getChildren(parentElement);
}","@SuppressWarnings(""String_Node_Str"") public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IContainer) {
    IContainer container=((IContainer)parentElement);
    IResource[] members=null;
    try {
      members=container.members();
    }
 catch (    CoreException e) {
      log.error(""String_Node_Str"" + container.getLocation());
    }
    if (container.equals(ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.METADATA).getFolder(DQStructureManager.DB_CONNECTIONS))) {
      ComparatorsFactory.sort(members,ComparatorsFactory.FILEMODEL_COMPARATOR_ID);
    }
    return members;
  }
 else   if (parentElement instanceof NamedColumnSet) {
    return null;
  }
 else   if (parentElement instanceof NamedColumnSetFolderNode) {
    NamedColumnSetFolderNode folerNode=(NamedColumnSetFolderNode)parentElement;
    if (!(folerNode.isLoaded())) {
      folerNode.loadChildren();
    }
    Object[] children=folerNode.getChildren();
    if (children != null && children.length > 0) {
      if (!(children[0] instanceof ColumnSet)) {
        return children;
      }
      for (int i=0; i < children.length; i++) {
        ColumnSet columnSet=(ColumnSet)children[i];
        ColumnSetKey key=new ColumnSetKey(columnSet);
        if (columnSetCheckedMap.containsKey(key)) {
          currentCheckedColumnSet.add(columnSet);
        }
      }
    }
    return ComparatorsFactory.sort(children,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
  }
  return super.getChildren(parentElement);
}",0.9874172185430464
140717,"private static CategoryDataset createTextedDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  return createSimpleDataset(indicatorUnitList,isCreate);
}","private static CategoryDataset createTextedDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  ComparatorsFactory.sort(indicatorUnitList,ComparatorsFactory.TEXT_STATISTICS_COMPARATOR_ID);
  return createSimpleDataset(indicatorUnitList,isCreate);
}",0.7785547785547785
140718,"public int compare(Object arg0,Object arg1){
  if (arg0 == null || arg1 == null) {
    return 0;
  }
  String name0=((ModelElement)arg0).getName();
  String name1=((ModelElement)arg1).getName();
  if (name0 == null || name1 == null) {
    return 0;
  }
  return name0.compareTo(name1);
}","@Override public int compare(IndicatorUnit o1,IndicatorUnit o2){
  IndicatorCommonUtil.compositeIndicatorMap(o1);
  IndicatorCommonUtil.compositeIndicatorMap(o2);
  double value1=Double.parseDouble(String.valueOf(o1.getValue()));
  double value2=Double.parseDouble(String.valueOf(o2.getValue()));
  if (value1 <= value2) {
    return -1;
  }
 else {
    return 1;
  }
}",0.0884146341463414
140719,"@SuppressWarnings(""String_Node_Str"") public static Comparator buildComparator(int comparatorId){
switch (comparatorId) {
case FILEMODEL_COMPARATOR_ID:
    return new FileModelComparator();
case MODELELEMENT_COMPARATOR_ID:
  return new ModelElementComparator();
default :
return new ModelElementComparator();
}
}","@SuppressWarnings(""String_Node_Str"") public static Comparator buildComparator(int comparatorId){
switch (comparatorId) {
case FILEMODEL_COMPARATOR_ID:
    return new FileModelComparator();
case MODELELEMENT_COMPARATOR_ID:
  return new ModelElementComparator();
case TEXT_STATISTICS_COMPARATOR_ID:
return new TextStatisticsComparator();
default :
return new ModelElementComparator();
}
}",0.8923959827833573
140720,"public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IFile) {
    IFile file=(IFile)parentElement;
    if (file.getName().endsWith(PluginConstant.REP_SUFFIX)) {
      TdReport findReport=RepResourceFileHelper.getInstance().findReport(file);
      Object[] array=ReportHelper.getAnalyses(findReport).toArray();
      return sort(array,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
    parentElement=PrvResourceFileHelper.getInstance().getFileResource(file);
  }
 else   if (parentElement instanceof IFolderNode) {
    IFolderNode folerNode=(IFolderNode)parentElement;
    if (!(folerNode.isLoaded())) {
      folerNode.loadChildren();
    }
    return sort(folerNode.getChildren(),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
  }
 else   if (SwitchHelpers.CATALOG_SWITCH.doSwitch((EObject)parentElement) != null) {
    if (CatalogHelper.getSchemas(SwitchHelpers.CATALOG_SWITCH.doSwitch((EObject)parentElement)).size() > 0) {
      return sort(super.getChildren(parentElement),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
 else {
      return FolderNodeHelper.getFolderNode((EObject)parentElement);
    }
  }
 else {
    return FolderNodeHelper.getFolderNode((EObject)parentElement);
  }
  return sort(super.getChildren(parentElement),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
}","public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IFile) {
    IFile file=(IFile)parentElement;
    if (file.getName().endsWith(PluginConstant.REP_SUFFIX)) {
      TdReport findReport=RepResourceFileHelper.getInstance().findReport(file);
      Object[] array=ReportHelper.getAnalyses(findReport).toArray();
      return ComparatorsFactory.sort(array,ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
    parentElement=PrvResourceFileHelper.getInstance().getFileResource(file);
  }
 else   if (parentElement instanceof IFolderNode) {
    IFolderNode folerNode=(IFolderNode)parentElement;
    if (!(folerNode.isLoaded())) {
      folerNode.loadChildren();
    }
    return ComparatorsFactory.sort(folerNode.getChildren(),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
  }
 else   if (SwitchHelpers.CATALOG_SWITCH.doSwitch((EObject)parentElement) != null) {
    if (CatalogHelper.getSchemas(SwitchHelpers.CATALOG_SWITCH.doSwitch((EObject)parentElement)).size() > 0) {
      return ComparatorsFactory.sort(super.getChildren(parentElement),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
    }
 else {
      return FolderNodeHelper.getFolderNode((EObject)parentElement);
    }
  }
 else {
    return FolderNodeHelper.getFolderNode((EObject)parentElement);
  }
  return ComparatorsFactory.sort(super.getChildren(parentElement),ComparatorsFactory.MODELELEMENT_COMPARATOR_ID);
}",0.9722425127830532
140721,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayout(new FillLayout());
  tabFolder=new TabFolder(container,SWT.FLAT);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  DataminingType dataminingType=MetadataHelper.getDataminingType(parentColumn.getTdColumn());
  if (dataminingType == null) {
    dataminingType=MetadataHelper.getDefaultDataminingType(parentColumn.getTdColumn().getJavaType());
  }
  if (indicator != null) {
    int sqlType=parentColumn.getTdColumn().getJavaType();
switch (indicator.getType()) {
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
      if (Java2SqlType.isTextInSQL(sqlType)) {
        setControl(createView(new TextParametersForm(tabFolder,SWT.NONE)));
      }
    break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
  setControl(createView(new TextLengthForm(tabFolder,SWT.NONE)));
break;
case FrequencyIndicatorEnum:
if (dataminingType == DataminingType.INTERVAL) {
if (Java2SqlType.isNumbericInSQL(sqlType)) {
  setControl(createView(new FrequBinsDesignerForm(tabFolder,SWT.NONE)));
}
if (Java2SqlType.isDateInSQL(sqlType)) {
  setControl(createView(new FrequTimeSliceForm(tabFolder,SWT.NONE)));
}
}
 else if (Java2SqlType.isTextInSQL(sqlType)) {
setControl(createView(new FrequTextParametersForm(tabFolder,SWT.NONE)));
}
break;
case ModeIndicatorEnum:
if (dataminingType == DataminingType.INTERVAL) {
if (Java2SqlType.isNumbericInSQL(sqlType)) {
setControl(createView(new BinsDesignerForm(tabFolder,SWT.NONE)));
}
}
 else if (Java2SqlType.isTextInSQL(sqlType)) {
setControl(createView(new TextParametersForm(tabFolder,SWT.NONE)));
}
break;
case BoxIIndicatorEnum:
setControl(createView(new DataThresholdsForm(tabFolder,SWT.NONE)));
break;
default :
}
}
if (getControl() != null) {
try {
PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(),HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID);
}
 catch (Exception e) {
e.printStackTrace();
}
}
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  container.setLayout(new FillLayout());
  tabFolder=new TabFolder(container,SWT.FLAT);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  DataminingType dataminingType=MetadataHelper.getDataminingType(parentColumn.getTdColumn());
  if (dataminingType == null) {
    dataminingType=MetadataHelper.getDefaultDataminingType(parentColumn.getTdColumn().getJavaType());
  }
  if (indicator != null) {
    int sqlType=parentColumn.getTdColumn().getJavaType();
switch (indicator.getType()) {
case DistinctCountIndicatorEnum:
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
      if (Java2SqlType.isTextInSQL(sqlType)) {
        setControl(createView(new TextParametersForm(tabFolder,SWT.NONE)));
      }
    break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case AverageLengthIndicatorEnum:
  setControl(createView(new TextLengthForm(tabFolder,SWT.NONE)));
break;
case FrequencyIndicatorEnum:
if (dataminingType == DataminingType.INTERVAL) {
if (Java2SqlType.isNumbericInSQL(sqlType)) {
  setControl(createView(new FreqBinsDesignerForm(tabFolder,SWT.NONE)));
}
if (Java2SqlType.isDateInSQL(sqlType)) {
  setControl(createView(new FreqTimeSliceForm(tabFolder,SWT.NONE)));
}
}
 else if (Java2SqlType.isTextInSQL(sqlType)) {
setControl(createView(new FreqTextParametersForm(tabFolder,SWT.NONE)));
}
break;
case ModeIndicatorEnum:
if (dataminingType == DataminingType.INTERVAL) {
if (Java2SqlType.isNumbericInSQL(sqlType)) {
setControl(createView(new BinsDesignerForm(tabFolder,SWT.NONE)));
}
}
 else if (Java2SqlType.isTextInSQL(sqlType)) {
setControl(createView(new TextParametersForm(tabFolder,SWT.NONE)));
}
break;
case BoxIIndicatorEnum:
setControl(createView(new DataThresholdsForm(tabFolder,SWT.NONE)));
break;
default :
}
}
if (getControl() != null) {
try {
PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(),HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID);
}
 catch (Exception e) {
e.printStackTrace();
}
}
}",0.9992751872432954
140722,"/** 
 * qzhang FolderSelectionDialog constructor comment.
 * @param parent
 * @param labelProvider
 * @param contentProvider
 */
public FolderSelectionDialog(Shell parent,ILabelProvider labelProvider,ITreeContentProvider contentProvider){
  super(parent,labelProvider,contentProvider);
  setComparator(new ResourceComparator(ResourceComparator.NAME));
}","/** 
 * qzhang FolderSelectionDialog constructor comment.
 * @param parent
 * @param labelProvider
 * @param contentProvider
 */
public FolderSelectionDialog(Shell parent,ILabelProvider labelProvider,ITreeContentProvider contentProvider){
  super(parent,labelProvider,contentProvider);
  setComparator(new ResourceComparator(ResourceComparator.NAME));
  setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      if (selection.length == 1) {
        if (selection[0] instanceof IFolder) {
          IFolder folder=(IFolder)selection[0];
          IPath projectRelativePath=folder.getProjectRelativePath();
          if (""String_Node_Str"".equals(folder.getProject().getName())) {
            IPath path=new Path(""String_Node_Str"");
            if (path.isPrefixOf(projectRelativePath)) {
              return Status.OK_STATUS;
            }
          }
        }
      }
      return new Status(IStatus.ERROR,SQLExplorerPlugin.PLUGIN_ID,""String_Node_Str"");
    }
  }
);
}",0.5157048940832725
140723,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (IProject.class.isInstance(element)) {
    return ""String_Node_Str"".equals(((IProject)element).getName());
  }
 else   if (IFolder.class.isInstance(element)) {
    return ""String_Node_Str"".equals(((IFolder)element).getName());
  }
  return false;
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (IProject.class.isInstance(element)) {
    return ""String_Node_Str"".equals(((IProject)element).getName());
  }
 else   if (IFolder.class.isInstance(element)) {
    IPath path=new Path(""String_Node_Str"");
    IPath projectRelativePath=((IFolder)element).getProjectRelativePath();
    return path.isPrefixOf(projectRelativePath);
  }
  return false;
}",0.7612903225806451
140724,"@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  final IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(root);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (IProject.class.isInstance(element)) {
        return ""String_Node_Str"".equals(((IProject)element).getName());
      }
 else       if (IFolder.class.isInstance(element)) {
        return ""String_Node_Str"".equals(((IFolder)element).getName());
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null)     progressMonitor.setCanceled(true);
    return;
  }
  Object elements=dialog.getResult()[0];
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(getTitle());
    if (filePath == null) {
      if (progressMonitor != null)       progressMonitor.setCanceled(true);
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      createIFile(progressMonitor,file,getViewer().getDocument().get());
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success)       setInput(newInput);
    }
    if (progressMonitor != null)     progressMonitor.setCanceled(!success);
  }
}","@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  final IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(root);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (IProject.class.isInstance(element)) {
        return ""String_Node_Str"".equals(((IProject)element).getName());
      }
 else       if (IFolder.class.isInstance(element)) {
        IPath path=new Path(""String_Node_Str"");
        IPath projectRelativePath=((IFolder)element).getProjectRelativePath();
        return path.isPrefixOf(projectRelativePath);
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null)     progressMonitor.setCanceled(true);
    return;
  }
  Object elements=dialog.getResult()[0];
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(getTitle());
    if (filePath == null) {
      if (progressMonitor != null)       progressMonitor.setCanceled(true);
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      createIFile(progressMonitor,file,getViewer().getDocument().get());
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success)       setInput(newInput);
    }
    if (progressMonitor != null)     progressMonitor.setCanceled(!success);
  }
}",0.9706966815447312
140725,"public ColumnsSelectionDialog(Shell parent,ColumnIndicator[] columnIndicators,String message){
  super(parent,message);
  addFirstPartFilters();
  this.setInput(ResourcesPlugin.getWorkspace().getRoot());
  columnSetCheckedMap=new HashMap<ColumnSetKey,ColumnCheckedMap>();
  initCheckedColumn(columnIndicators);
}","public ColumnsSelectionDialog(Shell parent,String title,ColumnIndicator[] columnIndicators,String message){
  super(parent,message);
  addFirstPartFilters();
  this.setInput(ResourcesPlugin.getWorkspace().getRoot());
  columnSetCheckedMap=new HashMap<ColumnSetKey,ColumnCheckedMap>();
  initCheckedColumn(columnIndicators);
  this.setTitle(title);
}",0.9440242057488654
140726,"/** 
 * @param parentShell
 */
public IndicatorSelectDialog(Shell parentShell,String title,ColumnIndicator[] columnIndicators){
  super(parentShell);
  this.columnIndicators=columnIndicators;
  this.setShellStyle(SWT.MAX | SWT.RESIZE);
}","/** 
 * @param parentShell
 */
public IndicatorSelectDialog(Shell parentShell,String title,ColumnIndicator[] columnIndicators){
  super(parentShell);
  this.title=title;
  this.columnIndicators=columnIndicators;
  this.setShellStyle(SWT.MAX | SWT.RESIZE);
}",0.9595141700404858
140727,"void createAnalysisColumnsSection(final ScrolledForm form,Composite anasisDataComp){
  Section section=createSection(form,anasisDataComp,""String_Node_Str"",false,null);
  Composite topComp=toolkit.createComposite(section);
  topComp.setLayout(new GridLayout());
  Hyperlink clmnBtn=toolkit.createHyperlink(topComp,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(clmnBtn);
  clmnBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      openColumnsSelectionDialog();
    }
  }
);
  Hyperlink indcBtn=toolkit.createHyperlink(topComp,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(indcBtn);
  indcBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      treeViewer.openIndicatorSelectDialog(getSite().getShell());
    }
  }
);
  Composite tree=toolkit.createComposite(topComp,SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(tree);
  tree.setLayout(new GridLayout());
  ((GridData)tree.getLayoutData()).heightHint=TREE_MAX_LENGTH;
  treeViewer=new AnalysisColumnTreeViewer(tree,currentColumnIndicators,analysisHandler.getAnalysis());
  treeViewer.setDirty(false);
  treeViewer.addPropertyChangeListener(this);
  section.setClient(topComp);
}","void createAnalysisColumnsSection(final ScrolledForm form,Composite anasisDataComp){
  Section section=createSection(form,anasisDataComp,""String_Node_Str"",false,null);
  Composite topComp=toolkit.createComposite(section);
  topComp.setLayout(new GridLayout());
  Hyperlink clmnBtn=toolkit.createHyperlink(topComp,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(clmnBtn);
  clmnBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      openColumnsSelectionDialog();
    }
  }
);
  Hyperlink indcBtn=toolkit.createHyperlink(topComp,""String_Node_Str"",SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(indcBtn);
  indcBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      treeViewer.openIndicatorSelectDialog(null);
    }
  }
);
  Composite tree=toolkit.createComposite(topComp,SWT.BORDER);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(tree);
  tree.setLayout(new GridLayout());
  ((GridData)tree.getLayoutData()).heightHint=TREE_MAX_LENGTH;
  treeViewer=new AnalysisColumnTreeViewer(tree,currentColumnIndicators,analysisHandler.getAnalysis());
  treeViewer.setDirty(false);
  treeViewer.addPropertyChangeListener(this);
  section.setClient(topComp);
}",0.9912344777209642
140728,"/** 
 */
public void openColumnsSelectionDialog(){
  ColumnIndicator[] columnIndicator=treeViewer.getColumnIndicator();
  ColumnsSelectionDialog dialog=new ColumnsSelectionDialog(getSite().getShell(),columnIndicator,""String_Node_Str"");
  if (dialog.open() == Window.OK) {
    Object[] columns=dialog.getResult();
    treeViewer.setInput(columns);
    return;
  }
}","/** 
 */
public void openColumnsSelectionDialog(){
  ColumnIndicator[] columnIndicator=treeViewer.getColumnIndicator();
  ColumnsSelectionDialog dialog=new ColumnsSelectionDialog(null,""String_Node_Str"",columnIndicator,""String_Node_Str"");
  if (dialog.open() == Window.OK) {
    Object[] columns=dialog.getResult();
    treeViewer.setInput(columns);
    return;
  }
}",0.9424657534246575
140729,"/** 
 * Create a new IndicatorUnit according to indicatorEnum and indicator, if the parameter indicator is null, will create a new indicator .
 * @param indicatorEnum
 * @param indicator
 * @return
 */
private IndicatorUnit createPlainIndicatorUnit(IndicatorEnum indicatorEnum,Indicator indicator){
  if (indicator == null) {
    IndicatorsFactory factory=IndicatorsFactory.eINSTANCE;
    indicator=(Indicator)factory.create(indicatorEnum.getIndicatorType());
    if (indicatorEnum == IndicatorEnum.FrequencyIndicatorEnum) {
      IndicatorParameters parameters=indicator.getParameters();
      if (parameters == null) {
        parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
        indicator.setParameters(parameters);
      }
      DateParameters dateParameters=parameters.getDateParameters();
      if (dateParameters == null) {
        dateParameters=IndicatorsFactory.eINSTANCE.createDateParameters();
        parameters.setDateParameters(dateParameters);
      }
    }
  }
  IndicatorUnit indicatorUnit=new IndicatorUnit(indicatorEnum,indicator,this);
  this.plainIndicatorUnitMap.put(indicatorEnum,indicatorUnit);
  return indicatorUnit;
}","/** 
 * Create a new IndicatorUnit according to indicatorEnum and indicator, if the parameter indicator is null, will create a new indicator .
 * @param indicatorEnum
 * @param indicator
 * @return
 */
private IndicatorUnit createPlainIndicatorUnit(IndicatorEnum indicatorEnum,Indicator indicator){
  if (indicator == null) {
    IndicatorsFactory factory=IndicatorsFactory.eINSTANCE;
    indicator=(Indicator)factory.create(indicatorEnum.getIndicatorType());
    int sqlType=this.tdColumn.getJavaType();
    if (indicatorEnum == IndicatorEnum.FrequencyIndicatorEnum && Java2SqlType.isDateInSQL(sqlType)) {
      IndicatorParameters parameters=indicator.getParameters();
      if (parameters == null) {
        parameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
        indicator.setParameters(parameters);
      }
      DateParameters dateParameters=parameters.getDateParameters();
      if (dateParameters == null) {
        dateParameters=IndicatorsFactory.eINSTANCE.createDateParameters();
        parameters.setDateParameters(dateParameters);
      }
    }
  }
  IndicatorUnit indicatorUnit=new IndicatorUnit(indicatorEnum,indicator,this);
  this.plainIndicatorUnitMap.put(indicatorEnum,indicatorUnit);
  return indicatorUnit;
}",0.9660876757650952
140730,"private void removeDependencys(IResource[] resources){
  for (  IResource selectedObj : resources) {
    IFile file=((IFile)selectedObj);
    ModelElement elementToDelete=null;
    if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PROV)) {
      TypedReturnCode<TdDataProvider> returnValue=PrvResourceFileHelper.getInstance().readFromFile(file);
      elementToDelete=returnValue.getObject();
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.ANA)) {
      elementToDelete=AnaResourceFileHelper.getInstance().findAnalysis(file);
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
      elementToDelete=RepResourceFileHelper.getInstance().findReport(file);
    }
    if (elementToDelete != null) {
      List<Resource> modifiedResources=DependenciesHandler.getInstance().clearDependencies(elementToDelete);
      EMFUtil util=EMFUtil.getInstance();
      util.getResourceSet().getResources().addAll(modifiedResources);
      if (!util.save()) {
        log.warn(""String_Node_Str"" + util.getLastErrorMessage());
      }
    }
  }
  CorePlugin.getDefault().refreshWorkSpace();
  DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
  findView.getCommonViewer().refresh();
}","private void removeDependencys(IResource[] resources){
  for (  IResource selectedObj : resources) {
    IFile file=((IFile)selectedObj);
    ModelElement elementToDelete=null;
    if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PROV)) {
      TypedReturnCode<TdDataProvider> returnValue=PrvResourceFileHelper.getInstance().readFromFile(file);
      elementToDelete=returnValue.getObject();
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.ANA)) {
      elementToDelete=AnaResourceFileHelper.getInstance().findAnalysis(file);
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
      elementToDelete=RepResourceFileHelper.getInstance().findReport(file);
    }
    if (elementToDelete != null) {
      List<Resource> modifiedResources=DependenciesHandler.getInstance().clearDependencies(elementToDelete);
      EMFUtil util=EMFUtil.getInstance();
      for (      Resource resource : modifiedResources) {
        util.saveSingleResource(resource);
      }
    }
  }
  CorePlugin.getDefault().refreshWorkSpace();
  DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
  findView.getCommonViewer().refresh();
}",0.903945795137505
140731,"@Override public void run(){
  DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
  TreeSelection treeSelection=(TreeSelection)findView.getCommonViewer().getSelection();
  TreePath[] paths=treeSelection.getPaths();
  TdReport parentReport;
  List<Analysis> analysisList;
  Analysis analysisObj=null;
  Map<TdReport,List<Analysis>> removeMap=new HashMap<TdReport,List<Analysis>>();
  for (int i=0; i < paths.length; i++) {
    Object lastSegment=paths[i].getLastSegment();
    if (!(lastSegment instanceof Analysis)) {
      return;
    }
    analysisObj=(Analysis)lastSegment;
    IFile fileSegment=(IFile)paths[i].getSegment(paths[i].getSegmentCount() - 2);
    parentReport=RepResourceFileHelper.getInstance().findReport(fileSegment);
    analysisList=removeMap.get(parentReport);
    if (analysisList == null) {
      analysisList=new ArrayList<Analysis>();
      analysisList.add(analysisObj);
      removeMap.put(parentReport,analysisList);
    }
 else {
      analysisList.add(analysisObj);
    }
  }
  if (analysisObj == null) {
    return;
  }
  String message=paths.length > 1 ? ""String_Node_Str"" + paths.length + ""String_Node_Str"" : ""String_Node_Str"" + analysisObj.getName() + ""String_Node_Str"";
  boolean openConfirm=MessageDialog.openConfirm(null,""String_Node_Str"",message);
  if (openConfirm) {
    Iterator<TdReport> iterator=removeMap.keySet().iterator();
    while (iterator.hasNext()) {
      TdReport report=iterator.next();
      ReportHelper.removeAnalyses(report,removeMap.get(report));
      RepResourceFileHelper.getInstance().save(report);
      List<Resource> modifiedResources=DependenciesHandler.getInstance().clearDependencies(report);
      EMFUtil util=EMFUtil.getInstance();
      util.getResourceSet().getResources().addAll(modifiedResources);
      if (!util.save()) {
        log.warn(""String_Node_Str"" + util.getLastErrorMessage());
      }
    }
    IFolder reportsFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.DATA_PROFILING).getFolder(DQStructureManager.REPORTS);
    try {
      reportsFolder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    findView.getCommonViewer().refresh();
  }
}","@Override public void run(){
  DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
  TreeSelection treeSelection=(TreeSelection)findView.getCommonViewer().getSelection();
  TreePath[] paths=treeSelection.getPaths();
  TdReport parentReport;
  List<Analysis> analysisList;
  Analysis analysisObj=null;
  Map<TdReport,List<Analysis>> removeMap=new HashMap<TdReport,List<Analysis>>();
  for (int i=0; i < paths.length; i++) {
    Object lastSegment=paths[i].getLastSegment();
    if (!(lastSegment instanceof Analysis)) {
      return;
    }
    analysisObj=(Analysis)lastSegment;
    IFile fileSegment=(IFile)paths[i].getSegment(paths[i].getSegmentCount() - 2);
    parentReport=RepResourceFileHelper.getInstance().findReport(fileSegment);
    analysisList=removeMap.get(parentReport);
    if (analysisList == null) {
      analysisList=new ArrayList<Analysis>();
      analysisList.add(analysisObj);
      removeMap.put(parentReport,analysisList);
    }
 else {
      analysisList.add(analysisObj);
    }
  }
  if (analysisObj == null) {
    return;
  }
  String message=paths.length > 1 ? ""String_Node_Str"" + paths.length + ""String_Node_Str"" : ""String_Node_Str"" + analysisObj.getName() + ""String_Node_Str"";
  boolean openConfirm=MessageDialog.openConfirm(null,""String_Node_Str"",message);
  if (openConfirm) {
    Iterator<TdReport> iterator=removeMap.keySet().iterator();
    while (iterator.hasNext()) {
      TdReport report=iterator.next();
      ReportHelper.removeAnalyses(report,removeMap.get(report));
      RepResourceFileHelper.getInstance().save(report);
      List<Resource> modifiedResources=DependenciesHandler.getInstance().clearDependencies(report);
      EMFUtil util=EMFUtil.getInstance();
      for (int i=0; i < modifiedResources.size(); i++) {
        util.saveSingleResource(modifiedResources.get(i));
      }
    }
    IFolder reportsFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.DATA_PROFILING).getFolder(DQStructureManager.REPORTS);
    try {
      reportsFolder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    findView.getCommonViewer().refresh();
  }
}",0.948092280390417
140732,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  analysisHandler.clearAnalysis();
  ColumnIndicator[] columnIndicators=treeViewer.getColumnIndicator();
  TdDataProvider tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  if (columnIndicators != null) {
    if (columnIndicators.length != 0) {
      tdProvider=EObjectHelper.getTdDataProvider(columnIndicators[0].getTdColumn());
      analysis.getContext().setConnection(tdProvider);
    }
    for (    ColumnIndicator columnIndicator : columnIndicators) {
      analysisHandler.addIndicator(columnIndicator.getTdColumn(),columnIndicator.getIndicators());
      analysisHandler.setDatamingType(columnIndicator.getDataminingType().getLiteral(),columnIndicator.getTdColumn());
    }
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  boolean modifiedResourcesSaved=analysisHandler.saveModifiedResources();
  if (!modifiedResourcesSaved) {
    log.error(""String_Node_Str"");
  }
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  ReturnCode saved=AnaResourceFileHelper.getInstance().save(analysis);
  if (saved.isOk()) {
    if (tdProvider != null) {
      DqRepositoryViewService.saveOpenDataProvider(tdProvider);
    }
    AnaResourceFileHelper.getInstance().setResourceChanged(true);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ urlString+ ""String_Node_Str""+ saved.getMessage());
  }
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  analysisHandler.clearAnalysis();
  ColumnIndicator[] columnIndicators=treeViewer.getColumnIndicator();
  TdDataProvider tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  if (columnIndicators != null) {
    if (columnIndicators.length != 0) {
      tdProvider=EObjectHelper.getTdDataProvider(columnIndicators[0].getTdColumn());
      analysis.getContext().setConnection(tdProvider);
    }
    for (    ColumnIndicator columnIndicator : columnIndicators) {
      analysisHandler.addIndicator(columnIndicator.getTdColumn(),columnIndicator.getIndicators());
      analysisHandler.setDatamingType(columnIndicator.getDataminingType().getLiteral(),columnIndicator.getTdColumn());
    }
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  String urlString=analysis.eResource() != null ? analysis.eResource().getURI().toFileString() : PluginConstant.EMPTY_STRING;
  ReturnCode saved=AnaResourceFileHelper.getInstance().save(analysis);
  if (saved.isOk()) {
    if (tdProvider != null) {
      DqRepositoryViewService.saveOpenDataProvider(tdProvider);
    }
    AnaResourceFileHelper.getInstance().setResourceChanged(true);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + urlString + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ urlString+ ""String_Node_Str""+ saved.getMessage());
  }
}",0.9559136515658256
140733,"@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  expression.setLanguage(""String_Node_Str"");
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  EMFUtil util=EMFSharedResources.getSharedEmfUtil();
  IPath location=folder.getLocation();
  location=location.append(name);
  location=location.addFileExtension(NewSourcePatternActionProvider.EXTENSION_PATTERN);
  util.addPoolToResourceSet(new File(location.toPortableString()),pattern);
  util.save();
  return true;
}","@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  expression.setLanguage(""String_Node_Str"");
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  EMFUtil util=EMFSharedResources.getSharedEmfUtil();
  IPath location=folder.getLocation();
  String fname=DqRepositoryViewService.createFilename(folder.getName(),name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  location=location.removeLastSegments(1);
  location=location.append(fname);
  util.addPoolToResourceSet(new File(location.toPortableString()),pattern);
  util.save();
  return true;
}",0.8841295991213619
140734,"protected String decorateText(String input,Object element){
  if (input.endsWith(PluginConstant.PRV_SUFFIX)) {
    IFile fileElement=(IFile)element;
    TypedReturnCode<TdDataProvider> rc=PrvResourceFileHelper.getInstance().getTdProvider(fileElement);
    String decorateText=PluginConstant.EMPTY_STRING;
    if (rc.isOk()) {
      decorateText=rc.getObject().getName();
    }
 else {
      log.warn(rc.getMessage());
    }
    return decorateText;
  }
 else   if (input.endsWith(PluginConstant.ANA_SUFFIX)) {
    IFile fileElement=(IFile)element;
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + (fileElement).getLocation());
    }
    Analysis analysis=AnaResourceFileHelper.getInstance().findAnalysis(fileElement);
    if (analysis != null) {
      Date executionDate=analysis.getResults().getResultMetadata().getExecutionDate();
      String executeInfo=executionDate == null ? ""String_Node_Str"" : PluginConstant.PARENTHESIS_LEFT + DateFormatUtils.getSimpleDateString(executionDate) + PluginConstant.PARENTHESIS_RIGHT;
      return analysis.getName() + PluginConstant.SPACE_STRING + executeInfo;
    }
  }
 else   if (input.endsWith(PluginConstant.REP_SUFFIX)) {
    IFile fileElement=(IFile)element;
    TdReport findReport=RepResourceFileHelper.getInstance().findReport(fileElement);
    return findReport.getName();
  }
 else   if (input.endsWith(NewSourcePatternActionProvider.EXTENSION_PATTERN)) {
    IPath path=new Path(input);
    path=path.removeFileExtension();
    return path.toString();
  }
  return super.decorateText(input,element);
}","protected String decorateText(String input,Object element){
  if (input.endsWith(PluginConstant.PRV_SUFFIX)) {
    IFile fileElement=(IFile)element;
    TypedReturnCode<TdDataProvider> rc=PrvResourceFileHelper.getInstance().getTdProvider(fileElement);
    String decorateText=PluginConstant.EMPTY_STRING;
    if (rc.isOk()) {
      decorateText=rc.getObject().getName();
    }
 else {
      log.warn(rc.getMessage());
    }
    return decorateText;
  }
 else   if (input.endsWith(PluginConstant.ANA_SUFFIX)) {
    IFile fileElement=(IFile)element;
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + (fileElement).getLocation());
    }
    Analysis analysis=AnaResourceFileHelper.getInstance().findAnalysis(fileElement);
    if (analysis != null) {
      Date executionDate=analysis.getResults().getResultMetadata().getExecutionDate();
      String executeInfo=executionDate == null ? ""String_Node_Str"" : PluginConstant.PARENTHESIS_LEFT + DateFormatUtils.getSimpleDateString(executionDate) + PluginConstant.PARENTHESIS_RIGHT;
      return analysis.getName() + PluginConstant.SPACE_STRING + executeInfo;
    }
  }
 else   if (input.endsWith(PluginConstant.REP_SUFFIX)) {
    IFile fileElement=(IFile)element;
    TdReport findReport=RepResourceFileHelper.getInstance().findReport(fileElement);
    return findReport.getName();
  }
 else   if (input.endsWith(NewSourcePatternActionProvider.EXTENSION_PATTERN)) {
    IFile file=(IFile)element;
    Pattern pattern=PatternDNDFactory.getPattern(file);
    return pattern.getName();
  }
  return super.decorateText(input,element);
}",0.9077117572692794
140735,"/** 
 * Method ""saveSingleResource"" saves the given resource only. This method is a helper for saving quickly a given resource. It does not saved the related resources. This could result in an exception when other related resources should be saved with this resource.
 * @param resource the resource to save
 * @return true if no problem
 */
public boolean saveSingleResource(Resource resource){
  EMFUtil util=new EMFUtil();
  util.getResourceSet().getResources().add(resource);
  return util.save();
}","/** 
 * Method ""saveSingleResource"" saves the given resource only. This method is a helper for saving quickly a given resource. It does not saved the related resources. This could result in an exception when other related resources should be saved with this resource.
 * @param resource the resource to save
 * @return true if no problem
 */
public boolean saveSingleResource(Resource resource){
  EMFUtil util=new EMFUtil();
  util.getResourceSet().getResources().add(resource);
  boolean save=util.save();
  if (!save) {
    log.warn(""String_Node_Str"" + util.getLastErrorMessage());
  }
  return save;
}",0.8953068592057761
140736,"/** 
 * Method ""saveResource"" saves the given resource. This method is a helper for saving quickly a given resource and all its related resources (if any).
 * @param resource the resource to save
 * @return true if no problem
 */
public boolean saveResource(Resource resource){
  ResourceSet resourceSet=resource.getResourceSet();
  EMFUtil util=new EMFUtil();
  if (resourceSet != null) {
    util.setResourceSet(resourceSet);
    return util.save();
  }
  util.getResourceSet().getResources().add(resource);
  return util.save();
}","/** 
 * Method ""saveResource"" saves the given resource. This method is a helper for saving quickly a given resource and all its related resources (if any).
 * @param resource the resource to save
 * @return true if no problem
 */
public boolean saveResource(Resource resource){
  return saveSingleResource(resource);
}",0.6886016451233843
140737,"public boolean saveModifiedResources(){
  EMFUtil util=EMFUtil.getInstance();
  util.getResourceSet().getResources().addAll(this.modifiedResources);
  return util.save();
}","public boolean saveModifiedResources(){
  EMFUtil util=EMFUtil.getInstance();
  boolean saveFlag=true;
  Iterator<Resource> iterator=modifiedResources.iterator();
  while (iterator.hasNext()) {
    saveFlag=util.saveSingleResource(iterator.next());
    if (!saveFlag) {
      break;
    }
  }
  return saveFlag;
}",0.4371134020618556
140738,"/** 
 * DOC rli Comment method ""addAnaResourceOfReport"".
 * @param report
 * @param util
 */
private void addAnaResourceOfReport(TdReport report,EMFUtil util){
  for (  Analysis ana : ReportHelper.getAnalyses(report)) {
    TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(report,ana);
    if (dependencyReturn.isOk()) {
      util.getResourceSet().getResources().add(ana.eResource());
    }
  }
}","/** 
 * DOC rli Comment method ""addAnaResourceOfReport"".
 * @param report
 * @param util
 */
private void addAnaResourceOfReport(TdReport report,EMFUtil util){
  for (  Analysis ana : ReportHelper.getAnalyses(report)) {
    TypedReturnCode<Dependency> dependencyReturn=DependenciesHandler.getInstance().setDependencyOn(report,ana);
    if (dependencyReturn.isOk()) {
      util.saveSingleResource(ana.eResource());
    }
  }
}",0.9413118527042578
140739,"private static AnalysisCategories loadFromFile(){
  EMFUtil util=EMFUtil.getInstance();
  String pathName=""String_Node_Str"";
  URI uri=URI.createPlatformPluginURI(pathName,false);
  Resource catFile=null;
  try {
    catFile=util.getResourceSet().getResource(uri,true);
  }
 catch (  RuntimeException e) {
    log.error(e.getMessage());
  }
  if (catFile == null) {
    catFile=util.getResourceSet().getResource(URI.createFileURI(""String_Node_Str"" + File.separator + pathName),true);
  }
  if (catFile == null) {
    log.error(""String_Node_Str"" + pathName + ""String_Node_Str""+ uri);
    return null;
  }
  EList<EObject> contents=catFile.getContents();
  if (contents == null) {
    log.error(""String_Node_Str"" + uri);
    return null;
  }
  CategorySwitch<AnalysisCategories> catSwitch=new CategorySwitch<AnalysisCategories>(){
    @Override public AnalysisCategories caseAnalysisCategories(    AnalysisCategories object){
      return object;
    }
  }
;
  return catSwitch.doSwitch(contents.get(0));
}","private static AnalysisCategories loadFromFile(){
  String pathName=""String_Node_Str"";
  URI uri=URI.createPlatformPluginURI(pathName,false);
  Resource catFile=null;
  ResourceSetImpl resourceSetImpl=new ResourceSetImpl();
  try {
    catFile=resourceSetImpl.getResource(uri,true);
  }
 catch (  RuntimeException e) {
    log.error(e.getMessage());
  }
  if (catFile == null) {
    catFile=resourceSetImpl.getResource(URI.createFileURI(""String_Node_Str"" + File.separator + pathName),true);
  }
  if (catFile == null) {
    log.error(""String_Node_Str"" + pathName + ""String_Node_Str""+ uri);
    return null;
  }
  EList<EObject> contents=catFile.getContents();
  if (contents == null) {
    log.error(""String_Node_Str"" + uri);
    return null;
  }
  CategorySwitch<AnalysisCategories> catSwitch=new CategorySwitch<AnalysisCategories>(){
    @Override public AnalysisCategories caseAnalysisCategories(    AnalysisCategories object){
      return object;
    }
  }
;
  return catSwitch.doSwitch(contents.get(0));
}",0.91712158808933
140740,"/** 
 * ADDED scorreia Method ""computeDistinctValues"".
 * @return the distinct values
 */
private Set<Object> computeDistinctValues(){
  Set<Object> keySet=this.valueToFreq.keySet();
  this.setDistinctValueCount(Long.valueOf(keySet.size()));
  distinctComputed=true;
  return keySet;
}","/** 
 * ADDED scorreia Method ""computeDistinctValues"" updates the distinctValues field and set distinctComputed field to true.
 */
private void computeDistinctValues(){
  this.distinctValues=this.valueToFreq.keySet();
  this.setDistinctValueCount(Long.valueOf(distinctValues.size()));
  distinctComputed=true;
}",0.6140939597315436
140741,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public Set<Object> getDistinctValues(){
  if (!distinctComputed) {
    distinctValues=computeDistinctValues();
  }
  return distinctValues;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public Set<Object> getDistinctValues(){
  if (!distinctComputed) {
    computeDistinctValues();
  }
  return distinctValues;
}",0.964200477326969
140742,"/** 
 * DOC scorreia Comment method ""getValueFields"".
 * @param value2freq
 * @return
 */
private Object getValueFields(Object[] value2freq){
  int nbFields=value2freq.length;
  if (nbFields == 2) {
    return value2freq[0];
  }
  StringBuffer buf=new StringBuffer();
  if (nbFields == 3) {
    Object year=value2freq[0];
    buf.append(year != null ? F4_DIGIT.format(year) : ""String_Node_Str"");
    Object quarter=value2freq[1];
    buf.append(String.valueOf(quarter));
    return buf.toString();
  }
  if (nbFields == 4) {
    Object year=value2freq[0];
    buf.append(year != null ? F4_DIGIT.format(year) : ""String_Node_Str"");
    Object month=String.valueOf(value2freq[2]);
    buf.append(month != null ? F2_DIGIT.format(month) : ""String_Node_Str"");
    return buf.toString();
  }
  if (nbFields == 5) {
    Object year=value2freq[0];
    buf.append(year != null ? F4_DIGIT.format(year) : ""String_Node_Str"");
    Object month=String.valueOf(value2freq[2]);
    buf.append(month != null ? F2_DIGIT.format(month) : ""String_Node_Str"");
    String week=String.valueOf(value2freq[3]);
    buf.append(week != null ? week : ""String_Node_Str"");
    return buf.toString();
  }
  if (nbFields == 6) {
    Object year=value2freq[0];
    buf.append(year != null ? F4_DIGIT.format(year) : ""String_Node_Str"");
    Object month=String.valueOf(value2freq[2]);
    buf.append(month != null ? F2_DIGIT.format(month) : ""String_Node_Str"");
    String day=String.valueOf(value2freq[4]);
    buf.append(day != null ? F2_DIGIT.format(day) : ""String_Node_Str"");
    return buf.toString();
  }
  return null;
}","/** 
 * DOC scorreia Comment method ""getValueFields"".
 * @param value2freq
 * @return
 */
private Object getValueFields(Object[] value2freq){
  int nbFields=value2freq.length;
  if (nbFields == 2) {
    return value2freq[0];
  }
  StringBuffer buf=new StringBuffer();
  if (nbFields == 3) {
    Object year=value2freq[0];
    buf.append(format4digit(year));
    Object quarter=value2freq[1];
    buf.append(String.valueOf(quarter));
    return buf.toString();
  }
  if (nbFields == 4) {
    buf.append(format4digit(value2freq[0]));
    buf.append(format2digit(value2freq[2]));
    return buf.toString();
  }
  if (nbFields == 5) {
    Object year=value2freq[0];
    buf.append(format4digit(year));
    Object month=String.valueOf(value2freq[2]);
    buf.append(format2digit(month));
    String week=String.valueOf(value2freq[3]);
    buf.append(format1digit(week));
    return buf.toString();
  }
  if (nbFields == 6) {
    Object year=value2freq[0];
    buf.append(format4digit(year));
    Object month=String.valueOf(value2freq[2]);
    buf.append(format2digit(month));
    String day=String.valueOf(value2freq[4]);
    buf.append(format2digit(day));
    return buf.toString();
  }
  return null;
}",0.6504123341699534
140743,"public static void main(String[] args){
  TypedProperties connectionParams=PropertiesLoader.getProperties(THAT,""String_Node_Str"");
  String driverClassName=connectionParams.getProperty(""String_Node_Str"");
  String dbUrl=connectionParams.getProperty(""String_Node_Str"");
  DBConnect connector=new DBConnect(dbUrl,driverClassName,connectionParams);
  try {
    TimeTracer tt=new TimeTracer(""String_Node_Str"",log);
    tt.start();
    FolderProvider folderProvider=new FolderProvider();
    folderProvider.setFolder(new File(""String_Node_Str""));
    initializeConnection(connector,folderProvider);
    tt.end(""String_Node_Str"");
    TdProviderConnection providerConnection=connector.getProviderConnection();
    TypedReturnCode<Connection> rc=JavaSqlFactory.createConnection(providerConnection);
    if (!rc.isOk()) {
      log.error(rc.getMessage());
      return;
    }
    boolean ok=false;
    Collection<TdCatalog> catalogs=connector.getCatalogs();
    Connection connection=rc.getObject();
    for (    TdCatalog tdCatalog : catalogs) {
      List<TdSchema> schemas=CatalogHelper.getSchemas(tdCatalog);
      for (      TdSchema tdSchema : schemas) {
        List<TdTable> tables=SchemaHelper.getTables(tdSchema);
        if (tables.isEmpty()) {
          List<TdTable> tablesWithAllColumns=DatabaseContentRetriever.getTablesWithColumns(tdCatalog.getName(),tdSchema.getName(),null,connection);
          ok=SchemaHelper.addTables(tablesWithAllColumns,tdSchema);
        }
      }
      List<TdTable> tables=CatalogHelper.getTables(tdCatalog);
      if (tables.isEmpty()) {
        List<TdTable> tablesWithAllColumns=DatabaseContentRetriever.getTablesWithColumns(tdCatalog.getName(),null,null,connection);
        ok=CatalogHelper.addTables(tablesWithAllColumns,tdCatalog);
        Resource resource=tdCatalog.eResource();
        if (resource == null) {
          log.error(""String_Node_Str"");
        }
        for (        TdTable tdTable : tablesWithAllColumns) {
          List<TdColumn> columns=TableHelper.getColumns(tdTable);
          for (          TdColumn tdColumn : columns) {
            if (resource != null) {
              Classifier type=tdColumn.getType();
              if (type != null) {
                resource.getContents().add(type);
              }
            }
          }
        }
      }
    }
    if (!ok) {
      log.error(""String_Node_Str"");
    }
 else {
      log.info(""String_Node_Str"");
    }
    connection.close();
    EMFUtil util=new EMFUtil();
    ResourceSet resourceSet=providerConnection.eResource().getResourceSet();
    util.setResourceSet(resourceSet);
    util.save();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  TypedProperties connectionParams=PropertiesLoader.getProperties(THAT,""String_Node_Str"");
  String driverClassName=connectionParams.getProperty(""String_Node_Str"");
  String dbUrl=connectionParams.getProperty(""String_Node_Str"");
  DBConnect connector=new DBConnect(dbUrl,driverClassName,connectionParams);
  try {
    TimeTracer tt=new TimeTracer(""String_Node_Str"",log);
    tt.start();
    FolderProvider folderProvider=new FolderProvider();
    folderProvider.setFolder(new File(""String_Node_Str""));
    initializeConnection(connector,folderProvider);
    tt.end(""String_Node_Str"");
    TdProviderConnection providerConnection=connector.getProviderConnection();
    TypedReturnCode<Connection> rc=JavaSqlFactory.createConnection(providerConnection);
    if (!rc.isOk()) {
      log.error(rc.getMessage());
      return;
    }
    boolean ok=false;
    Collection<TdCatalog> catalogs=connector.getCatalogs();
    Connection connection=rc.getObject();
    for (    TdCatalog tdCatalog : catalogs) {
      List<TdSchema> schemas=CatalogHelper.getSchemas(tdCatalog);
      for (      TdSchema tdSchema : schemas) {
        List<TdTable> tables=SchemaHelper.getTables(tdSchema);
        if (tables.isEmpty()) {
          List<TdTable> tablesWithAllColumns=DatabaseContentRetriever.getTablesWithColumns(tdCatalog.getName(),tdSchema.getName(),null,connection);
          ok=SchemaHelper.addTables(tablesWithAllColumns,tdSchema);
        }
      }
      List<TdTable> tables=CatalogHelper.getTables(tdCatalog);
      if (tables.isEmpty()) {
        List<TdTable> tablesWithAllColumns=DatabaseContentRetriever.getTablesWithColumns(tdCatalog.getName(),null,null,connection);
        ok=CatalogHelper.addTables(tablesWithAllColumns,tdCatalog);
        Resource resource=tdCatalog.eResource();
        if (resource == null) {
          log.error(""String_Node_Str"");
        }
        for (        TdTable tdTable : tablesWithAllColumns) {
          List<TdColumn> columns=TableHelper.getColumns(tdTable);
          for (          TdColumn tdColumn : columns) {
            if (resource != null) {
              Classifier type=tdColumn.getType();
              if (type != null) {
                resource.getContents().add(type);
              }
            }
          }
        }
      }
    }
    if (!ok) {
      log.error(""String_Node_Str"");
    }
 else {
      log.info(""String_Node_Str"");
    }
    connection.close();
    EMFUtil util=EMFUtil.getInstance();
    ResourceSet resourceSet=providerConnection.eResource().getResourceSet();
    util.setResourceSet(resourceSet);
    util.save();
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}",0.9970227018980276
140744,"/** 
 * Method ""readFromFile"".
 * @param file the file to read
 * @return the Data provider if found.
 */
private static TypedReturnCode<TdDataProvider> readFromFile(File file){
  TypedReturnCode<TdDataProvider> rc=new TypedReturnCode<TdDataProvider>();
  EMFUtil util=new EMFUtil();
  ResourceSet rs=util.getResourceSet();
  Resource r=rs.getResource(URI.createFileURI(file.getAbsolutePath()),true);
  Collection<TdDataProvider> tdDataProviders=DataProviderHelper.getTdDataProviders(r.getContents());
  if (tdDataProviders.isEmpty()) {
    rc.setReturnCode(""String_Node_Str"" + file.getAbsolutePath(),false);
  }
  if (tdDataProviders.size() > 1) {
    rc.setReturnCode(""String_Node_Str"" + tdDataProviders.size() + ""String_Node_Str""+ file.getAbsolutePath(),false);
  }
  TdDataProvider prov=tdDataProviders.iterator().next();
  rc.setObject(prov);
  return rc;
}","/** 
 * Method ""readFromFile"".
 * @param file the file to read
 * @return the Data provider if found.
 */
private static TypedReturnCode<TdDataProvider> readFromFile(File file){
  TypedReturnCode<TdDataProvider> rc=new TypedReturnCode<TdDataProvider>();
  EMFUtil util=EMFUtil.getInstance();
  ResourceSet rs=util.getResourceSet();
  Resource r=rs.getResource(URI.createFileURI(file.getAbsolutePath()),true);
  Collection<TdDataProvider> tdDataProviders=DataProviderHelper.getTdDataProviders(r.getContents());
  if (tdDataProviders.isEmpty()) {
    rc.setReturnCode(""String_Node_Str"" + file.getAbsolutePath(),false);
  }
  if (tdDataProviders.size() > 1) {
    rc.setReturnCode(""String_Node_Str"" + tdDataProviders.size() + ""String_Node_Str""+ file.getAbsolutePath(),false);
  }
  TdDataProvider prov=tdDataProviders.iterator().next();
  rc.setObject(prov);
  return rc;
}",0.9907621247113164
140745,"public boolean saveModifiedResources(){
  EMFUtil util=new EMFUtil();
  util.getResourceSet().getResources().addAll(this.modifiedResources);
  return util.save();
}","public boolean saveModifiedResources(){
  EMFUtil util=EMFUtil.getInstance();
  util.getResourceSet().getResources().addAll(this.modifiedResources);
  return util.save();
}",0.9523809523809524
140746,"private static AnalysisCategories loadFromFile(){
  EMFUtil util=new EMFUtil();
  String pathName=""String_Node_Str"";
  URI uri=URI.createPlatformPluginURI(pathName,false);
  Resource catFile=null;
  try {
    catFile=util.getResourceSet().getResource(uri,true);
  }
 catch (  RuntimeException e) {
    log.error(e.getMessage());
  }
  if (catFile == null) {
    catFile=util.getResourceSet().getResource(URI.createFileURI(""String_Node_Str"" + File.separator + pathName),true);
  }
  if (catFile == null) {
    log.error(""String_Node_Str"" + pathName + ""String_Node_Str""+ uri);
    return null;
  }
  EList<EObject> contents=catFile.getContents();
  if (contents == null) {
    log.error(""String_Node_Str"" + uri);
    return null;
  }
  CategorySwitch<AnalysisCategories> catSwitch=new CategorySwitch<AnalysisCategories>(){
    @Override public AnalysisCategories caseAnalysisCategories(    AnalysisCategories object){
      return object;
    }
  }
;
  return catSwitch.doSwitch(contents.get(0));
}","private static AnalysisCategories loadFromFile(){
  EMFUtil util=EMFUtil.getInstance();
  String pathName=""String_Node_Str"";
  URI uri=URI.createPlatformPluginURI(pathName,false);
  Resource catFile=null;
  try {
    catFile=util.getResourceSet().getResource(uri,true);
  }
 catch (  RuntimeException e) {
    log.error(e.getMessage());
  }
  if (catFile == null) {
    catFile=util.getResourceSet().getResource(URI.createFileURI(""String_Node_Str"" + File.separator + pathName),true);
  }
  if (catFile == null) {
    log.error(""String_Node_Str"" + pathName + ""String_Node_Str""+ uri);
    return null;
  }
  EList<EObject> contents=catFile.getContents();
  if (contents == null) {
    log.error(""String_Node_Str"" + uri);
    return null;
  }
  CategorySwitch<AnalysisCategories> catSwitch=new CategorySwitch<AnalysisCategories>(){
    @Override public AnalysisCategories caseAnalysisCategories(    AnalysisCategories object){
      return object;
    }
  }
;
  return catSwitch.doSwitch(contents.get(0));
}",0.992
140747,"private Resource getResourceFromFile(){
  EMFUtil util=new EMFUtil();
  Resource definitionsFile=null;
  URI uri=URI.createPlatformResourceURI(WORKSPACE_PATH + FILENAME,false);
  try {
    definitionsFile=util.getResourceSet().getResource(uri,false);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + uri);
    }
  }
 catch (  RuntimeException e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  if (definitionsFile == null) {
    needCopy=true;
    uri=URI.createPlatformPluginURI(PLUGIN_PATH,false);
    try {
      definitionsFile=util.getResourceSet().getResource(uri,true);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + uri);
      }
    }
 catch (    RuntimeException e) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
  if (definitionsFile == null) {
    definitionsFile=util.getResourceSet().getResource(URI.createFileURI(""String_Node_Str"" + File.separator + PLUGIN_PATH),true);
  }
  if (definitionsFile == null) {
    log.error(""String_Node_Str"" + PLUGIN_PATH + ""String_Node_Str""+ uri);
    return null;
  }
  return definitionsFile;
}","private Resource getResourceFromFile(){
  EMFUtil util=EMFUtil.getInstance();
  Resource definitionsFile=null;
  URI uri=URI.createPlatformResourceURI(WORKSPACE_PATH + FILENAME,false);
  try {
    definitionsFile=util.getResourceSet().getResource(uri,false);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + uri);
    }
  }
 catch (  RuntimeException e) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + e.getMessage(),e);
    }
  }
  if (definitionsFile == null) {
    needCopy=true;
    uri=URI.createPlatformPluginURI(PLUGIN_PATH,false);
    try {
      definitionsFile=util.getResourceSet().getResource(uri,true);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + uri);
      }
    }
 catch (    RuntimeException e) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
  if (definitionsFile == null) {
    definitionsFile=util.getResourceSet().getResource(URI.createFileURI(""String_Node_Str"" + File.separator + PLUGIN_PATH),true);
  }
  if (definitionsFile == null) {
    log.error(""String_Node_Str"" + PLUGIN_PATH + ""String_Node_Str""+ uri);
    return null;
  }
  return definitionsFile;
}",0.9933774834437086
140748,"public Resource copyDefinitionsIntoFolder(URI destinationUri){
  Resource resource=getIndicatorsDefinitions().eResource();
  EMFUtil.changeUri(resource,destinationUri);
  if (EMFUtil.saveResource(resource)) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + resource.getURI());
    }
  }
 else {
    log.error(""String_Node_Str"" + resource.getURI());
  }
  return resource;
}","public Resource copyDefinitionsIntoFolder(URI destinationUri){
  Resource resource=getIndicatorsDefinitions().eResource();
  EMFUtil.getInstance().changeUri(resource,destinationUri);
  if (EMFUtil.getInstance().saveResource(resource)) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + resource.getURI());
    }
  }
 else {
    log.error(""String_Node_Str"" + resource.getURI());
  }
  return resource;
}",0.965432098765432
140749,"/** 
 * DOC scorreia Comment method ""createPatternMatchingIndicator"".
 * @return
 */
private PatternMatchingIndicator createPatternMatchingIndicator(){
  PatternMatchingIndicator patternMatchingIndicator=IndicatorsFactory.eINSTANCE.createPatternMatchingIndicator();
  IndicatorParameters indicParams=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  Domain validData=DomainFactory.eINSTANCE.createDomain();
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  pattern.setName(""String_Node_Str"");
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  expression.setBody(REGEXP);
  expression.setLanguage(""String_Node_Str"");
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  validData.getPatterns().add(pattern);
  indicParams.setDataValidDomain(validData);
  patternMatchingIndicator.setParameters(indicParams);
  EMFUtil util=new EMFUtil();
  util.addPoolToResourceSet(new File(""String_Node_Str""),pattern);
  util.save();
  return patternMatchingIndicator;
}","/** 
 * DOC scorreia Comment method ""createPatternMatchingIndicator"".
 * @return
 */
private PatternMatchingIndicator createPatternMatchingIndicator(){
  PatternMatchingIndicator patternMatchingIndicator=IndicatorsFactory.eINSTANCE.createPatternMatchingIndicator();
  IndicatorParameters indicParams=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  Domain validData=DomainFactory.eINSTANCE.createDomain();
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  pattern.setName(""String_Node_Str"");
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  expression.setBody(REGEXP);
  expression.setLanguage(""String_Node_Str"");
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  validData.getPatterns().add(pattern);
  indicParams.setDataValidDomain(validData);
  patternMatchingIndicator.setParameters(indicParams);
  EMFUtil util=EMFUtil.getInstance();
  util.addPoolToResourceSet(new File(""String_Node_Str""),pattern);
  util.save();
  return patternMatchingIndicator;
}",0.9928251121076234
140750,"/** 
 * DOC scorreia Comment method ""main"".
 * @param args
 */
public static void main(String[] args){
  TypedProperties connectionParams=PropertiesLoader.getProperties(IndicatorEvaluator.class,""String_Node_Str"");
  String driverClassName=connectionParams.getProperty(""String_Node_Str"");
  String dbUrl=connectionParams.getProperty(""String_Node_Str"");
  try {
    Connection connection=ConnectionUtils.createConnection(dbUrl,driverClassName,connectionParams);
    TdDataProvider dataProvider=new TestAnalysisCreation().getDataManager();
    String catalog=""String_Node_Str"";
    ConnectionEvaluator evaluator=new ConnectionEvaluator();
    evaluator.setConnection(connection);
    ConnectionIndicator connectionIndicator=SchemaFactory.eINSTANCE.createConnectionIndicator();
    evaluator.storeIndicator(dataProvider,connectionIndicator);
    String sql=createSql(catalog);
    ReturnCode rc=evaluator.evaluateIndicators(sql,false);
    if (!rc.isOk()) {
      System.err.println(""String_Node_Str"" + rc.getMessage());
    }
    File file=new File(""String_Node_Str"" + IndicatorsPackage.eNAME);
    EMFUtil util=new EMFUtil();
    if (!util.addPoolToResourceSet(file.toURI().toString(),connectionIndicator)) {
      System.err.println(util.getLastErrorMessage());
    }
    File dp=new File(""String_Node_Str"");
    FolderProvider fProv=new FolderProvider();
    fProv.setFolder(dp);
    DqRepositoryViewService.saveDataProviderAndStructure(dataProvider,fProv);
    util.save();
    ConnectionUtils.closeConnection(connection);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
}","/** 
 * DOC scorreia Comment method ""main"".
 * @param args
 */
public static void main(String[] args){
  TypedProperties connectionParams=PropertiesLoader.getProperties(IndicatorEvaluator.class,""String_Node_Str"");
  String driverClassName=connectionParams.getProperty(""String_Node_Str"");
  String dbUrl=connectionParams.getProperty(""String_Node_Str"");
  try {
    Connection connection=ConnectionUtils.createConnection(dbUrl,driverClassName,connectionParams);
    TdDataProvider dataProvider=new TestAnalysisCreation().getDataManager();
    String catalog=""String_Node_Str"";
    ConnectionEvaluator evaluator=new ConnectionEvaluator();
    evaluator.setConnection(connection);
    ConnectionIndicator connectionIndicator=SchemaFactory.eINSTANCE.createConnectionIndicator();
    evaluator.storeIndicator(dataProvider,connectionIndicator);
    String sql=createSql(catalog);
    ReturnCode rc=evaluator.evaluateIndicators(sql,false);
    if (!rc.isOk()) {
      System.err.println(""String_Node_Str"" + rc.getMessage());
    }
    File file=new File(""String_Node_Str"" + IndicatorsPackage.eNAME);
    EMFUtil util=EMFUtil.getInstance();
    if (!util.addPoolToResourceSet(file.toURI().toString(),connectionIndicator)) {
      System.err.println(util.getLastErrorMessage());
    }
    File dp=new File(""String_Node_Str"");
    FolderProvider fProv=new FolderProvider();
    fProv.setFolder(dp);
    DqRepositoryViewService.saveDataProviderAndStructure(dataProvider,fProv);
    util.save();
    ConnectionUtils.closeConnection(connection);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
}",0.9955257270693512
140751,"/** 
 * DOC scorreia Comment method ""main"".
 * @param args
 */
public static void main(String[] args){
  TypedProperties connectionParams=PropertiesLoader.getProperties(IndicatorEvaluator.class,""String_Node_Str"");
  String driverClassName=connectionParams.getProperty(""String_Node_Str"");
  String dbUrl=connectionParams.getProperty(""String_Node_Str"");
  try {
    TimeTracer tt=new TimeTracer(""String_Node_Str"",null);
    tt.start();
    Connection connection=ConnectionUtils.createConnection(dbUrl,driverClassName,connectionParams);
    String database=""String_Node_Str"";
    String tableName=""String_Node_Str"";
    String[] columnsArray=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    List<String> columns=Arrays.asList(columnsArray);
    File file=new File(""String_Node_Str"" + IndicatorsPackage.eNAME);
    EMFUtil util=new EMFUtil();
    Resource resource=util.getResourceSet().createResource(URI.createFileURI(file.getAbsolutePath()));
    rContents=resource.getContents();
    evaluator.setConnection(connection);
    RowCountIndicator rowCountIndicator=IndicatorsFactory.eINSTANCE.createRowCountIndicator();
    NullCountIndicator nullCountIndicator=IndicatorsFactory.eINSTANCE.createNullCountIndicator();
    DistinctCountIndicator distinctCountIndicator=IndicatorsFactory.eINSTANCE.createDistinctCountIndicator();
    DistinctCountIndicator distinctCountIndicator2=IndicatorsFactory.eINSTANCE.createDistinctCountIndicator();
    UniqueCountIndicator uniqueCountIndicator=IndicatorsFactory.eINSTANCE.createUniqueCountIndicator();
    DuplicateCountIndicator duplicateCountIndicator=IndicatorsFactory.eINSTANCE.createDuplicateCountIndicator();
    BlankCountIndicator blankCountIndicator=IndicatorsFactory.eINSTANCE.createBlankCountIndicator();
    MinLengthIndicator minLengthIndicator=IndicatorsFactory.eINSTANCE.createMinLengthIndicator();
    MaxLengthIndicator maxLengthIndicator=IndicatorsFactory.eINSTANCE.createMaxLengthIndicator();
    AverageLengthIndicator averageLengthIndicator=IndicatorsFactory.eINSTANCE.createAverageLengthIndicator();
    AverageLengthIndicator averageLengthIndicator2=IndicatorsFactory.eINSTANCE.createAverageLengthIndicator();
    ModeIndicator modeIndicator=IndicatorsFactory.eINSTANCE.createModeIndicator();
    FrequencyIndicator textFrequencyIndicator=IndicatorsFactory.eINSTANCE.createFrequencyIndicator();
    MeanIndicator doubleMeanIndicator=IndicatorsFactory.eINSTANCE.createMeanIndicator();
    MeanIndicator integerMeanIndicator=IndicatorsFactory.eINSTANCE.createMeanIndicator();
    MedianIndicator medianIndicator=IndicatorsFactory.eINSTANCE.createMedianIndicator();
    SumIndicator integerSumIndicator=IndicatorsFactory.eINSTANCE.createSumIndicator();
    addIndicator(columnsArray[0],medianIndicator);
    addIndicator(columnsArray[1],doubleMeanIndicator);
    addIndicator(columnsArray[2],blankCountIndicator);
    addIndicator(columnsArray[5],nullCountIndicator);
    addIndicator(columnsArray[3],rowCountIndicator);
    addIndicator(columnsArray[5],integerSumIndicator);
    addIndicator(columnsArray[5],integerMeanIndicator);
    addIndicator(columnsArray[2],averageLengthIndicator);
    addIndicator(columnsArray[3],averageLengthIndicator2);
    addIndicator(columnsArray[3],minLengthIndicator);
    addIndicator(columnsArray[3],maxLengthIndicator);
    String selectCols=sqlSelectColumns(database,tableName,columns);
    QueryExpression queryExpression=DatatypesFactory.eINSTANCE.createQueryExpression();
    queryExpression.setBody(selectCols);
    queryExpression.setLanguage(""String_Node_Str"");
    tt.start(""String_Node_Str"");
    evaluator.setFetchSize(10000);
    evaluator.evaluateIndicators(selectCols);
    tt.end(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + medianIndicator.getMedian());
    System.out.println(""String_Node_Str"" + textFrequencyIndicator.getUniqueValueCount());
    System.out.println(""String_Node_Str"" + textFrequencyIndicator.getDistinctValueCount());
    for (    String col : columns) {
      printIndicators(evaluator.getIndicators(col));
    }
    tt.start(""String_Node_Str"");
    util.save();
    tt.end(""String_Node_Str"" + file.getAbsolutePath());
    tt.end();
    CwmResource cwmR=(CwmResource)resource;
    String id=cwmR.getID(medianIndicator);
    System.out.println(""String_Node_Str"" + EcoreUtil.getID(medianIndicator));
    System.out.println(""String_Node_Str"" + id);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
}","/** 
 * DOC scorreia Comment method ""main"".
 * @param args
 */
public static void main(String[] args){
  TypedProperties connectionParams=PropertiesLoader.getProperties(IndicatorEvaluator.class,""String_Node_Str"");
  String driverClassName=connectionParams.getProperty(""String_Node_Str"");
  String dbUrl=connectionParams.getProperty(""String_Node_Str"");
  try {
    TimeTracer tt=new TimeTracer(""String_Node_Str"",null);
    tt.start();
    Connection connection=ConnectionUtils.createConnection(dbUrl,driverClassName,connectionParams);
    String database=""String_Node_Str"";
    String tableName=""String_Node_Str"";
    String[] columnsArray=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    List<String> columns=Arrays.asList(columnsArray);
    File file=new File(""String_Node_Str"" + IndicatorsPackage.eNAME);
    EMFUtil util=EMFUtil.getInstance();
    Resource resource=util.getResourceSet().createResource(URI.createFileURI(file.getAbsolutePath()));
    rContents=resource.getContents();
    evaluator.setConnection(connection);
    RowCountIndicator rowCountIndicator=IndicatorsFactory.eINSTANCE.createRowCountIndicator();
    NullCountIndicator nullCountIndicator=IndicatorsFactory.eINSTANCE.createNullCountIndicator();
    DistinctCountIndicator distinctCountIndicator=IndicatorsFactory.eINSTANCE.createDistinctCountIndicator();
    DistinctCountIndicator distinctCountIndicator2=IndicatorsFactory.eINSTANCE.createDistinctCountIndicator();
    UniqueCountIndicator uniqueCountIndicator=IndicatorsFactory.eINSTANCE.createUniqueCountIndicator();
    DuplicateCountIndicator duplicateCountIndicator=IndicatorsFactory.eINSTANCE.createDuplicateCountIndicator();
    BlankCountIndicator blankCountIndicator=IndicatorsFactory.eINSTANCE.createBlankCountIndicator();
    MinLengthIndicator minLengthIndicator=IndicatorsFactory.eINSTANCE.createMinLengthIndicator();
    MaxLengthIndicator maxLengthIndicator=IndicatorsFactory.eINSTANCE.createMaxLengthIndicator();
    AverageLengthIndicator averageLengthIndicator=IndicatorsFactory.eINSTANCE.createAverageLengthIndicator();
    AverageLengthIndicator averageLengthIndicator2=IndicatorsFactory.eINSTANCE.createAverageLengthIndicator();
    ModeIndicator modeIndicator=IndicatorsFactory.eINSTANCE.createModeIndicator();
    FrequencyIndicator textFrequencyIndicator=IndicatorsFactory.eINSTANCE.createFrequencyIndicator();
    MeanIndicator doubleMeanIndicator=IndicatorsFactory.eINSTANCE.createMeanIndicator();
    MeanIndicator integerMeanIndicator=IndicatorsFactory.eINSTANCE.createMeanIndicator();
    MedianIndicator medianIndicator=IndicatorsFactory.eINSTANCE.createMedianIndicator();
    SumIndicator integerSumIndicator=IndicatorsFactory.eINSTANCE.createSumIndicator();
    addIndicator(columnsArray[0],medianIndicator);
    addIndicator(columnsArray[1],doubleMeanIndicator);
    addIndicator(columnsArray[2],blankCountIndicator);
    addIndicator(columnsArray[5],nullCountIndicator);
    addIndicator(columnsArray[3],rowCountIndicator);
    addIndicator(columnsArray[5],integerSumIndicator);
    addIndicator(columnsArray[5],integerMeanIndicator);
    addIndicator(columnsArray[2],averageLengthIndicator);
    addIndicator(columnsArray[3],averageLengthIndicator2);
    addIndicator(columnsArray[3],minLengthIndicator);
    addIndicator(columnsArray[3],maxLengthIndicator);
    String selectCols=sqlSelectColumns(database,tableName,columns);
    QueryExpression queryExpression=DatatypesFactory.eINSTANCE.createQueryExpression();
    queryExpression.setBody(selectCols);
    queryExpression.setLanguage(""String_Node_Str"");
    tt.start(""String_Node_Str"");
    evaluator.setFetchSize(10000);
    evaluator.evaluateIndicators(selectCols);
    tt.end(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + medianIndicator.getMedian());
    System.out.println(""String_Node_Str"" + textFrequencyIndicator.getUniqueValueCount());
    System.out.println(""String_Node_Str"" + textFrequencyIndicator.getDistinctValueCount());
    for (    String col : columns) {
      printIndicators(evaluator.getIndicators(col));
    }
    tt.start(""String_Node_Str"");
    util.save();
    tt.end(""String_Node_Str"" + file.getAbsolutePath());
    tt.end();
    CwmResource cwmR=(CwmResource)resource;
    String id=cwmR.getID(medianIndicator);
    System.out.println(""String_Node_Str"" + EcoreUtil.getID(medianIndicator));
    System.out.println(""String_Node_Str"" + id);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
}",0.9983100971694128
140752,"/** 
 * DOC scorreia Comment method ""main"".
 * @param args
 */
public static void main(String[] args){
  EMFUtil util=new EMFUtil();
  File file=new File(""String_Node_Str"" + IndicatorsPackage.eNAME);
  System.out.println(""String_Node_Str"" + file.getAbsolutePath());
  ResourceSet rs=util.getResourceSet();
  Resource r=rs.getResource(URI.createFileURI(file.getAbsolutePath()),true);
  EList<EObject> contents=r.getContents();
  if (contents.isEmpty()) {
    System.err.println(""String_Node_Str"" + r);
  }
  System.out.println(""String_Node_Str"" + contents.size());
  IndicatorsSwitch<FrequencyIndicator> mySwitch=new IndicatorsSwitch<FrequencyIndicator>(){
    @Override public FrequencyIndicator caseFrequencyIndicator(    FrequencyIndicator object){
      return object;
    }
  }
;
  for (  EObject object : contents) {
    FrequencyIndicator freqI=mySwitch.doSwitch(object);
    if (freqI != null) {
      Long uniqueValueCount=freqI.getUniqueValueCount();
      System.out.println(""String_Node_Str"" + uniqueValueCount);
      EList<Object> uniqueValues=freqI.getUniqueValues();
      for (      Object data : uniqueValues) {
        System.out.println(""String_Node_Str"" + data + ""String_Node_Str""+ freqI.getCount(data));
      }
    }
  }
}","/** 
 * DOC scorreia Comment method ""main"".
 * @param args
 */
public static void main(String[] args){
  EMFUtil util=EMFUtil.getInstance();
  File file=new File(""String_Node_Str"" + IndicatorsPackage.eNAME);
  System.out.println(""String_Node_Str"" + file.getAbsolutePath());
  ResourceSet rs=util.getResourceSet();
  Resource r=rs.getResource(URI.createFileURI(file.getAbsolutePath()),true);
  EList<EObject> contents=r.getContents();
  if (contents.isEmpty()) {
    System.err.println(""String_Node_Str"" + r);
  }
  System.out.println(""String_Node_Str"" + contents.size());
  IndicatorsSwitch<FrequencyIndicator> mySwitch=new IndicatorsSwitch<FrequencyIndicator>(){
    @Override public FrequencyIndicator caseFrequencyIndicator(    FrequencyIndicator object){
      return object;
    }
  }
;
  for (  EObject object : contents) {
    FrequencyIndicator freqI=mySwitch.doSwitch(object);
    if (freqI != null) {
      Long uniqueValueCount=freqI.getUniqueValueCount();
      System.out.println(""String_Node_Str"" + uniqueValueCount);
      EList<Object> uniqueValues=freqI.getUniqueValues();
      for (      Object data : uniqueValues) {
        System.out.println(""String_Node_Str"" + data + ""String_Node_Str""+ freqI.getCount(data));
      }
    }
  }
}",0.9935897435897436
140753,"/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  final IndicatorEnum indicatorEnum=indicatorUnit.getType();
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  indicatorItem.setText(0,indicatorUnit.getType().getLabel());
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis){
        @Override public void dispose(){
          activeCount=0;
          super.dispose();
        }
      }
;
      try {
        WizardDialog dialog=new WizardDialog(null,wizard){
          @Override public void openTray(          DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
            super.openTray(tray);
            if (tray instanceof HelpTray) {
              HelpTray helpTray=(HelpTray)tray;
              ReusableHelpPart helpPart=helpTray.getHelpPart();
              helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
            }
          }
        }
;
        dialog.setPageSize(300,400);
        dialog.create();
        dialog.getShell().addShellListener(new ShellAdapter(){
          @Override public void shellActivated(          ShellEvent e){
            String string=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
            if (activeCount < 2) {
              Point point=e.widget.getDisplay().getCursorLocation();
              IContext context=HelpSystem.getContext(string);
              IHelpResource[] relatedTopics=context.getRelatedTopics();
              for (              IHelpResource topic : relatedTopics) {
                topic.getLabel();
                topic.getHref();
              }
              IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
              helpSystem.displayContext(context,point.x + 15,point.y);
              activeCount++;
              ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
              if (lastActiveInstance != null) {
                String href=IndicatorParameterTypes.getHref(indicator);
                if (href != null) {
                  lastActiveInstance.showURL(href);
                }
              }
            }
          }
        }
);
        int open=dialog.open();
        if (Window.OK == open) {
          setDirty(wizard.isDirty());
        }
      }
 catch (      AssertionFailedException ex) {
        MessageDialogWithToggle.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.ACTION_DELETE));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,2);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
}","/** 
 * DOC qzhang Comment method ""createOneUnit"".
 * @param treeItem
 * @param indicatorUnit
 */
public void createOneUnit(final TreeItem treeItem,IndicatorUnit indicatorUnit){
  final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
  final IndicatorUnit unit=indicatorUnit;
  IndicatorEnum type=indicatorUnit.getType();
  final IndicatorEnum indicatorEnum=type;
  indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
  indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
  indicatorItem.setData(VIEWER_KEY,this);
  String label=type.getLabel();
  if (IndicatorEnum.PatternMatchingIndicatorEnum.compareTo(type) == 0) {
    PatternMatchingIndicator pindicator=(PatternMatchingIndicator)unit.getIndicator();
    IndicatorParameters parameters=pindicator.getParameters();
    if (parameters != null) {
      label=parameters.getDataValidDomain().getPatterns().get(0).getName();
    }
    indicatorItem.setImage(0,ImageLib.getImage(ImageLib.PATTERN_REG));
  }
  indicatorItem.setText(0,label);
  TreeEditor optionEditor;
  optionEditor=new TreeEditor(tree);
  Label optionLabel=new Label(tree,SWT.NONE);
  optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
  optionLabel.setToolTipText(""String_Node_Str"");
  optionLabel.pack();
  optionLabel.setData(indicatorUnit);
  optionLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
      final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis){
        @Override public void dispose(){
          activeCount=0;
          super.dispose();
        }
      }
;
      try {
        WizardDialog dialog=new WizardDialog(null,wizard){
          @Override public void openTray(          DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
            super.openTray(tray);
            if (tray instanceof HelpTray) {
              HelpTray helpTray=(HelpTray)tray;
              ReusableHelpPart helpPart=helpTray.getHelpPart();
              helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
            }
          }
        }
;
        dialog.setPageSize(300,400);
        dialog.create();
        dialog.getShell().addShellListener(new ShellAdapter(){
          @Override public void shellActivated(          ShellEvent e){
            String string=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
            if (activeCount < 2) {
              Point point=e.widget.getDisplay().getCursorLocation();
              IContext context=HelpSystem.getContext(string);
              IHelpResource[] relatedTopics=context.getRelatedTopics();
              for (              IHelpResource topic : relatedTopics) {
                topic.getLabel();
                topic.getHref();
              }
              IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
              helpSystem.displayContext(context,point.x + 15,point.y);
              activeCount++;
              ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
              if (lastActiveInstance != null) {
                String href=IndicatorParameterTypes.getHref(indicator);
                if (href != null) {
                  lastActiveInstance.showURL(href);
                }
              }
            }
          }
        }
);
        int open=dialog.open();
        if (Window.OK == open) {
          setDirty(wizard.isDirty());
        }
      }
 catch (      AssertionFailedException ex) {
        MessageDialogWithToggle.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  optionEditor.minimumWidth=WIDTH1_CELL;
  optionEditor.horizontalAlignment=SWT.CENTER;
  optionEditor.setEditor(optionLabel,indicatorItem,1);
  TreeEditor delEditor=new TreeEditor(tree);
  Label delLabel=new Label(tree,SWT.NONE);
  delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  delLabel.setImage(ImageLib.getImage(ImageLib.ACTION_DELETE));
  delLabel.setToolTipText(""String_Node_Str"");
  delLabel.pack();
  delLabel.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
      deleteIndicatorItems(columnIndicator,unit);
      if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
        setElements(columnIndicators);
      }
 else {
        removeItemBranch(indicatorItem);
      }
    }
  }
);
  delEditor.minimumWidth=WIDTH1_CELL;
  delEditor.horizontalAlignment=SWT.CENTER;
  delEditor.setEditor(delLabel,indicatorItem,2);
  indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
  if (indicatorEnum.hasChildren()) {
    indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
    createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
  }
}",0.9404471544715448
140754,"/** 
 * DOC qzhang Comment method ""getPattern"".
 * @param fe
 * @return
 */
protected static Pattern getPattern(IFile file){
  EMFUtil util=EMFUtil.getInstance();
  Resource resource=util.getResourceSet().getResource(URI.createPlatformResourceURI(file.getFullPath().toString()),true);
  Pattern pattern=(Pattern)EcoreUtil.getObjectByType(resource.getContents(),PatternPackage.eINSTANCE.getPattern());
  return pattern;
}","/** 
 * DOC qzhang Comment method ""getPattern"".
 * @param fe
 * @return
 */
public static Pattern getPattern(IFile file){
  EMFUtil util=EMFUtil.getInstance();
  Resource resource=util.getResourceSet().getResource(URI.createPlatformResourceURI(file.getFullPath().toString()),true);
  Pattern pattern=(Pattern)EcoreUtil.getObjectByType(resource.getContents(),PatternPackage.eINSTANCE.getPattern());
  return pattern;
}",0.984468339307049
140755,"public String getText(Object element){
  if (element instanceof TableFolderNode) {
    TableFolderNode node=(TableFolderNode)element;
    if (node.isLoaded()) {
      Package catalogOrSchema=PackageHelper.getCatalogOrSchema(node.getParent());
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + PackageHelper.getTables(catalogOrSchema).size()+ ""String_Node_Str"";
    }
 else {
      return ((IFolderNode)element).getName();
    }
  }
  if (element instanceof ViewFolderNode) {
    ViewFolderNode node=(ViewFolderNode)element;
    if (node.isLoaded()) {
      Package catalogOrSchema=PackageHelper.getCatalogOrSchema(node.getParent());
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + PackageHelper.getViews(catalogOrSchema).size()+ ""String_Node_Str"";
    }
 else {
      return ((IFolderNode)element).getName();
    }
  }
  if (element instanceof ColumnFolderNode) {
    ColumnFolderNode node=(ColumnFolderNode)element;
    if (node.isLoaded()) {
      ColumnSet table=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(node.getParent());
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + ColumnSetHelper.getColumns(table).size()+ ""String_Node_Str"";
    }
 else {
      return ((IFolderNode)element).getName();
    }
  }
  return super.getText(element);
}","public String getText(Object element){
  if (element instanceof TableFolderNode) {
    TableFolderNode node=(TableFolderNode)element;
    if (node.isLoaded()) {
      Package catalogOrSchema=PackageHelper.getCatalogOrSchema(node.getParent());
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + PackageHelper.getTables(catalogOrSchema).size()+ ""String_Node_Str"";
    }
 else {
      return ((IFolderNode)element).getName();
    }
  }
  if (element instanceof ViewFolderNode) {
    ViewFolderNode node=(ViewFolderNode)element;
    if (node.isLoaded()) {
      Package catalogOrSchema=PackageHelper.getCatalogOrSchema(node.getParent());
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + PackageHelper.getViews(catalogOrSchema).size()+ ""String_Node_Str"";
    }
 else {
      return ((IFolderNode)element).getName();
    }
  }
  if (element instanceof ColumnFolderNode) {
    ColumnFolderNode node=(ColumnFolderNode)element;
    if (node.isLoaded()) {
      ColumnSet table=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(node.getParent());
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + ColumnSetHelper.getColumns(table).size()+ ""String_Node_Str"";
    }
 else {
      return ((IFolderNode)element).getName();
    }
  }
  if (element instanceof Pattern) {
    Pattern pattern=(Pattern)element;
    RegularExpression patternComponent=(RegularExpression)pattern.getComponents().get(0);
    return patternComponent.getExpression().getBody();
  }
  return super.getText(element);
}",0.9208939340191558
140756,"@Override public Object[] getChildren(Object element){
  if (needSortContainers.contains(element)) {
    return sort(super.getChildren(element));
  }
  return super.getChildren(element);
}","@Override public Object[] getChildren(Object element){
  if (element instanceof IFile) {
    IFile file=(IFile)element;
    if (file.getName().endsWith(NewSourcePatternActionProvider.EXTENSION_PATTERN)) {
      Pattern pattern=PatternDNDFactory.getPattern(file);
      return new Object[]{pattern};
    }
  }
  if (needSortContainers.contains(element)) {
    return sort(super.getChildren(element));
  }
  return super.getChildren(element);
}",0.5968253968253968
140757,"@Override public void drop(DropTargetEvent event){
  super.drop(event);
  IFile fe=(IFile)((StructuredSelection)commonViewer.getSelection()).getFirstElement();
  Pattern pattern=getPattern(fe);
  TreeItem item=(TreeItem)event.item;
  ColumnIndicator data=(ColumnIndicator)item.getData(AnalysisColumnTreeViewer.COLUMN_INDICATOR_KEY);
  PatternMatchingIndicator patternMatchingIndicator=IndicatorsFactory.eINSTANCE.createPatternMatchingIndicator();
  IndicatorParameters indicParams=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  Domain validData=DomainFactory.eINSTANCE.createDomain();
  validData.getPatterns().add(pattern);
  indicParams.setDataValidDomain(validData);
  patternMatchingIndicator.setParameters(indicParams);
  IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
  data.addIndicator(type,patternMatchingIndicator);
  AnalysisColumnTreeViewer viewer=(AnalysisColumnTreeViewer)item.getData(AnalysisColumnTreeViewer.VIEWER_KEY);
  viewer.createOneUnit(item,data.getIndicatorUnit(type));
  viewer.setDirty(true);
}","@Override public void drop(DropTargetEvent event){
  super.drop(event);
  IFile fe=(IFile)((StructuredSelection)commonViewer.getSelection()).getFirstElement();
  Pattern pattern=getPattern(fe);
  TreeItem item=(TreeItem)event.item;
  ColumnIndicator data=(ColumnIndicator)item.getData(AnalysisColumnTreeViewer.COLUMN_INDICATOR_KEY);
  PatternMatchingIndicator patternMatchingIndicator=IndicatorsFactory.eINSTANCE.createPatternMatchingIndicator();
  IndicatorParameters indicParams=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  Domain validData=DomainFactory.eINSTANCE.createDomain();
  validData.getPatterns().add(pattern);
  indicParams.setDataValidDomain(validData);
  patternMatchingIndicator.setParameters(indicParams);
  IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
  data.addPatternIndicator(type,patternMatchingIndicator);
  AnalysisColumnTreeViewer viewer=(AnalysisColumnTreeViewer)item.getData(AnalysisColumnTreeViewer.VIEWER_KEY);
  viewer.createOneUnit(item,data.getIndicatorUnit(type));
  viewer.setDirty(true);
}",0.9967487227124942
140758,"@Override public void dragOperationChanged(DropTargetEvent event){
  super.dragOperationChanged(event);
  event.feedback=DND.FEEDBACK_EXPAND;
  doDropValidation(event);
}","@Override public void dragOperationChanged(DropTargetEvent event){
  super.dragOperationChanged(event);
  event.feedback=DND.FEEDBACK_EXPAND;
  doDropValidation(event,commonViewer);
}",0.963172804532578
140759,"/** 
 * DOC qzhang Comment method ""installDND"".
 */
public static void installDND(Tree targetControl){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  DQRespositoryView findView=(DQRespositoryView)activePage.findView(DQRespositoryView.ID);
  final CommonViewer commonViewer=findView.getCommonViewer();
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  Transfer[] transfers=new Transfer[]{transfer};
  DropTarget dropTarget=new DropTarget(targetControl,operations);
  dropTarget.setTransfer(transfers);
  dropTarget.addDropListener(new TreeDropTargetEffect(targetControl){
    @Override public void dragEnter(    DropTargetEvent event){
      super.dragEnter(event);
      event.feedback=DND.FEEDBACK_EXPAND;
      doDropValidation(event);
    }
    @Override public void dragOperationChanged(    DropTargetEvent event){
      super.dragOperationChanged(event);
      event.feedback=DND.FEEDBACK_EXPAND;
      doDropValidation(event);
    }
    @Override public void dragOver(    DropTargetEvent event){
      super.dragOver(event);
      doDropValidation(event);
    }
    @Override public void dropAccept(    DropTargetEvent event){
      super.dropAccept(event);
      doDropValidation(event);
    }
    @Override public void drop(    DropTargetEvent event){
      super.drop(event);
      IFile fe=(IFile)((StructuredSelection)commonViewer.getSelection()).getFirstElement();
      Pattern pattern=getPattern(fe);
      TreeItem item=(TreeItem)event.item;
      ColumnIndicator data=(ColumnIndicator)item.getData(AnalysisColumnTreeViewer.COLUMN_INDICATOR_KEY);
      PatternMatchingIndicator patternMatchingIndicator=IndicatorsFactory.eINSTANCE.createPatternMatchingIndicator();
      IndicatorParameters indicParams=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
      Domain validData=DomainFactory.eINSTANCE.createDomain();
      validData.getPatterns().add(pattern);
      indicParams.setDataValidDomain(validData);
      patternMatchingIndicator.setParameters(indicParams);
      IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
      data.addIndicator(type,patternMatchingIndicator);
      AnalysisColumnTreeViewer viewer=(AnalysisColumnTreeViewer)item.getData(AnalysisColumnTreeViewer.VIEWER_KEY);
      viewer.createOneUnit(item,data.getIndicatorUnit(type));
      viewer.setDirty(true);
    }
  }
);
}","/** 
 * DOC qzhang Comment method ""installDND"".
 */
public static void installDND(final Tree targetControl){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  DQRespositoryView findView=(DQRespositoryView)activePage.findView(DQRespositoryView.ID);
  final CommonViewer commonViewer=findView.getCommonViewer();
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  Transfer[] transfers=new Transfer[]{transfer};
  DropTarget dropTarget=new DropTarget(targetControl,operations);
  dropTarget.setTransfer(transfers);
  dropTarget.addDropListener(new TreeDropTargetEffect(targetControl){
    @Override public void dragEnter(    DropTargetEvent event){
      super.dragEnter(event);
      event.feedback=DND.FEEDBACK_EXPAND;
      doDropValidation(event,commonViewer);
    }
    @Override public void dragOperationChanged(    DropTargetEvent event){
      super.dragOperationChanged(event);
      event.feedback=DND.FEEDBACK_EXPAND;
      doDropValidation(event,commonViewer);
    }
    @Override public void dragOver(    DropTargetEvent event){
      super.dragOver(event);
      doDropValidation(event,commonViewer);
    }
    @Override public void dropAccept(    DropTargetEvent event){
      super.dropAccept(event);
      doDropValidation(event,commonViewer);
    }
    @Override public void drop(    DropTargetEvent event){
      super.drop(event);
      IFile fe=(IFile)((StructuredSelection)commonViewer.getSelection()).getFirstElement();
      Pattern pattern=getPattern(fe);
      TreeItem item=(TreeItem)event.item;
      ColumnIndicator data=(ColumnIndicator)item.getData(AnalysisColumnTreeViewer.COLUMN_INDICATOR_KEY);
      PatternMatchingIndicator patternMatchingIndicator=IndicatorsFactory.eINSTANCE.createPatternMatchingIndicator();
      IndicatorParameters indicParams=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
      Domain validData=DomainFactory.eINSTANCE.createDomain();
      validData.getPatterns().add(pattern);
      indicParams.setDataValidDomain(validData);
      patternMatchingIndicator.setParameters(indicParams);
      IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
      data.addPatternIndicator(type,patternMatchingIndicator);
      AnalysisColumnTreeViewer viewer=(AnalysisColumnTreeViewer)item.getData(AnalysisColumnTreeViewer.VIEWER_KEY);
      viewer.createOneUnit(item,data.getIndicatorUnit(type));
      viewer.setDirty(true);
    }
  }
);
}",0.9871159563924676
140760,"@Override public void dragEnter(DropTargetEvent event){
  super.dragEnter(event);
  event.feedback=DND.FEEDBACK_EXPAND;
  doDropValidation(event);
}","@Override public void dragEnter(DropTargetEvent event){
  super.dragEnter(event);
  event.feedback=DND.FEEDBACK_EXPAND;
  doDropValidation(event,commonViewer);
}",0.9579288025889968
140761,"@Override public void dropAccept(DropTargetEvent event){
  super.dropAccept(event);
  doDropValidation(event);
}","@Override public void dropAccept(DropTargetEvent event){
  super.dropAccept(event);
  doDropValidation(event,commonViewer);
}",0.9451476793248944
140762,"@Override public void dragOver(DropTargetEvent event){
  super.dragOver(event);
  doDropValidation(event);
}","@Override public void dragOver(DropTargetEvent event){
  super.dragOver(event);
  doDropValidation(event,commonViewer);
}",0.9432314410480348
140763,"/** 
 * DOC qzhang Comment method ""doDropValidation"".
 * @param event
 */
protected static void doDropValidation(DropTargetEvent event){
  if (event.detail != DND.DROP_NONE) {
    lastValidOperation=event.detail;
  }
  Object data=event.item.getData(AnalysisColumnTreeViewer.INDICATOR_UNIT_KEY);
  if (data != null) {
    event.detail=DND.DROP_NONE;
  }
 else {
    event.detail=lastValidOperation;
  }
}","/** 
 * DOC qzhang Comment method ""doDropValidation"".
 * @param event
 * @param commonViewer
 */
protected static void doDropValidation(DropTargetEvent event,CommonViewer commonViewer){
  if (event.detail != DND.DROP_NONE) {
    lastValidOperation=event.detail;
  }
  boolean is=true;
  Object firstElement=((StructuredSelection)commonViewer.getSelection()).getFirstElement();
  if (firstElement instanceof IFile) {
    IFile fe=(IFile)firstElement;
    if (NewSourcePatternActionProvider.EXTENSION_PATTERN.equals(fe.getFileExtension())) {
      Pattern pattern=getPattern(fe);
      if (pattern != null) {
        is=false;
      }
    }
  }
  if (event.item == null || is) {
    event.detail=DND.DROP_NONE;
  }
 else {
    Object data=event.item.getData(AnalysisColumnTreeViewer.INDICATOR_UNIT_KEY);
    if (data != null) {
      event.detail=DND.DROP_NONE;
    }
 else {
      event.detail=lastValidOperation;
    }
  }
}",0.608433734939759
140764,"/** 
 * DOC xy Comment method ""createResource"".
 * @param absolutePath
 * @return
 */
protected Resource getPathResource(String absolutePath){
  Resource res=registedResourceMap.get(absolutePath);
  if (res != null) {
    return res;
  }
  EMFUtil util=new EMFUtil();
  URI uri=URI.createFileURI(absolutePath);
  ResourceSet rs=util.getResourceSet();
  Resource resource=rs.getResource(uri,true);
  this.registedResourceMap.put(absolutePath,resource);
  return resource;
}","/** 
 * DOC xy Comment method ""createResource"".
 * @param absolutePath
 * @return
 */
protected Resource getPathResource(String absolutePath){
  Resource res=registedResourceMap.get(absolutePath);
  if (res != null) {
    return res;
  }
  URI uri=URI.createFileURI(absolutePath);
  ResourceSet rs=EMFUtil.getInstance().getResourceSet();
  Resource resource=rs.getResource(uri,true);
  this.registedResourceMap.put(absolutePath,resource);
  return resource;
}",0.631578947368421
140765,"@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  expression.setLanguage(""String_Node_Str"");
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  EMFUtil util=new EMFUtil();
  IPath location=folder.getLocation();
  location=location.append(name);
  location=location.addFileExtension(NewSourcePatternActionProvider.EXTENSION_PATTERN);
  util.addPoolToResourceSet(new File(location.toPortableString()),pattern);
  util.save();
  return true;
}","@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  expression.setLanguage(""String_Node_Str"");
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  EMFUtil util=EMFUtil.getInstance();
  IPath location=folder.getLocation();
  location=location.append(name);
  location=location.addFileExtension(NewSourcePatternActionProvider.EXTENSION_PATTERN);
  util.addPoolToResourceSet(new File(location.toPortableString()),pattern);
  util.save();
  return true;
}",0.9905771495877504
140766,"/** 
 * DOC qzhang Comment method ""getPattern"".
 * @param fe
 * @return
 */
protected static Pattern getPattern(IFile file){
  EMFUtil util=new EMFUtil();
  Resource resource=util.getResourceSet().getResource(URI.createPlatformResourceURI(file.getFullPath().toString()),true);
  Pattern pattern=(Pattern)EcoreUtil.getObjectByType(resource.getContents(),PatternPackage.eINSTANCE.getPattern());
  return pattern;
}","/** 
 * DOC qzhang Comment method ""getPattern"".
 * @param fe
 * @return
 */
protected static Pattern getPattern(IFile file){
  EMFUtil util=EMFUtil.getInstance();
  Resource resource=util.getResourceSet().getResource(URI.createPlatformResourceURI(file.getFullPath().toString()),true);
  Pattern pattern=(Pattern)EcoreUtil.getObjectByType(resource.getContents(),PatternPackage.eINSTANCE.getPattern());
  return pattern;
}",0.9807692307692308
140767,"private void removeDependencys(IResource[] resources){
  for (  IResource selectedObj : resources) {
    IFile file=((IFile)selectedObj);
    ModelElement elementToDelete=null;
    if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PROV)) {
      TypedReturnCode<TdDataProvider> returnValue=PrvResourceFileHelper.getInstance().readFromFile(file);
      elementToDelete=returnValue.getObject();
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.ANA)) {
      elementToDelete=AnaResourceFileHelper.getInstance().findAnalysis(file);
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
      elementToDelete=RepResourceFileHelper.getInstance().findReport(file);
    }
    if (elementToDelete != null) {
      List<Resource> modifiedResources=DependenciesHandler.getInstance().clearDependencies(elementToDelete);
      EMFUtil util=new EMFUtil();
      util.getResourceSet().getResources().addAll(modifiedResources);
      if (!util.save()) {
        log.warn(""String_Node_Str"" + util.getLastErrorMessage());
      }
    }
  }
  CorePlugin.getDefault().refreshWorkSpace();
  DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
  findView.getCommonViewer().refresh();
}","private void removeDependencys(IResource[] resources){
  for (  IResource selectedObj : resources) {
    IFile file=((IFile)selectedObj);
    ModelElement elementToDelete=null;
    if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.PROV)) {
      TypedReturnCode<TdDataProvider> returnValue=PrvResourceFileHelper.getInstance().readFromFile(file);
      elementToDelete=returnValue.getObject();
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.ANA)) {
      elementToDelete=AnaResourceFileHelper.getInstance().findAnalysis(file);
    }
 else     if (file.getFileExtension().equalsIgnoreCase(FactoriesUtil.REP)) {
      elementToDelete=RepResourceFileHelper.getInstance().findReport(file);
    }
    if (elementToDelete != null) {
      List<Resource> modifiedResources=DependenciesHandler.getInstance().clearDependencies(elementToDelete);
      EMFUtil util=EMFUtil.getInstance();
      util.getResourceSet().getResources().addAll(modifiedResources);
      if (!util.save()) {
        log.warn(""String_Node_Str"" + util.getLastErrorMessage());
      }
    }
  }
  CorePlugin.getDefault().refreshWorkSpace();
  DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
  findView.getCommonViewer().refresh();
}",0.9937548790007806
140768,"@Override public void run(){
  DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
  TreeSelection treeSelection=(TreeSelection)findView.getCommonViewer().getSelection();
  TreePath[] paths=treeSelection.getPaths();
  TdReport parentReport;
  List<Analysis> analysisList;
  Analysis analysisObj=null;
  Map<TdReport,List<Analysis>> removeMap=new HashMap<TdReport,List<Analysis>>();
  for (int i=0; i < paths.length; i++) {
    Object lastSegment=paths[i].getLastSegment();
    if (!(lastSegment instanceof Analysis)) {
      return;
    }
    analysisObj=(Analysis)lastSegment;
    IFile fileSegment=(IFile)paths[i].getSegment(paths[i].getSegmentCount() - 2);
    parentReport=RepResourceFileHelper.getInstance().findReport(fileSegment);
    analysisList=removeMap.get(parentReport);
    if (analysisList == null) {
      analysisList=new ArrayList<Analysis>();
      analysisList.add(analysisObj);
      removeMap.put(parentReport,analysisList);
    }
 else {
      analysisList.add(analysisObj);
    }
  }
  if (analysisObj == null) {
    return;
  }
  String message=paths.length > 1 ? ""String_Node_Str"" + paths.length + ""String_Node_Str"" : ""String_Node_Str"" + analysisObj.getName() + ""String_Node_Str"";
  boolean openConfirm=MessageDialog.openConfirm(null,""String_Node_Str"",message);
  if (openConfirm) {
    Iterator<TdReport> iterator=removeMap.keySet().iterator();
    while (iterator.hasNext()) {
      TdReport report=iterator.next();
      ReportHelper.removeAnalyses(report,removeMap.get(report));
      RepResourceFileHelper.getInstance().save(report);
      List<Resource> modifiedResources=DependenciesHandler.getInstance().clearDependencies(report);
      EMFUtil util=new EMFUtil();
      util.getResourceSet().getResources().addAll(modifiedResources);
      if (!util.save()) {
        log.warn(""String_Node_Str"" + util.getLastErrorMessage());
      }
    }
    IFolder reportsFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.DATA_PROFILING).getFolder(DQStructureManager.REPORTS);
    try {
      reportsFolder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    findView.getCommonViewer().refresh();
  }
}","@Override public void run(){
  DQRespositoryView findView=(DQRespositoryView)CorePlugin.getDefault().findView(DQRespositoryView.ID);
  TreeSelection treeSelection=(TreeSelection)findView.getCommonViewer().getSelection();
  TreePath[] paths=treeSelection.getPaths();
  TdReport parentReport;
  List<Analysis> analysisList;
  Analysis analysisObj=null;
  Map<TdReport,List<Analysis>> removeMap=new HashMap<TdReport,List<Analysis>>();
  for (int i=0; i < paths.length; i++) {
    Object lastSegment=paths[i].getLastSegment();
    if (!(lastSegment instanceof Analysis)) {
      return;
    }
    analysisObj=(Analysis)lastSegment;
    IFile fileSegment=(IFile)paths[i].getSegment(paths[i].getSegmentCount() - 2);
    parentReport=RepResourceFileHelper.getInstance().findReport(fileSegment);
    analysisList=removeMap.get(parentReport);
    if (analysisList == null) {
      analysisList=new ArrayList<Analysis>();
      analysisList.add(analysisObj);
      removeMap.put(parentReport,analysisList);
    }
 else {
      analysisList.add(analysisObj);
    }
  }
  if (analysisObj == null) {
    return;
  }
  String message=paths.length > 1 ? ""String_Node_Str"" + paths.length + ""String_Node_Str"" : ""String_Node_Str"" + analysisObj.getName() + ""String_Node_Str"";
  boolean openConfirm=MessageDialog.openConfirm(null,""String_Node_Str"",message);
  if (openConfirm) {
    Iterator<TdReport> iterator=removeMap.keySet().iterator();
    while (iterator.hasNext()) {
      TdReport report=iterator.next();
      ReportHelper.removeAnalyses(report,removeMap.get(report));
      RepResourceFileHelper.getInstance().save(report);
      List<Resource> modifiedResources=DependenciesHandler.getInstance().clearDependencies(report);
      EMFUtil util=EMFUtil.getInstance();
      util.getResourceSet().getResources().addAll(modifiedResources);
      if (!util.save()) {
        log.warn(""String_Node_Str"" + util.getLastErrorMessage());
      }
    }
    IFolder reportsFolder=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.DATA_PROFILING).getFolder(DQStructureManager.REPORTS);
    try {
      reportsFolder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    findView.getCommonViewer().refresh();
  }
}",0.996480422349318
140769,"public void addPatternIndicator(IndicatorEnum indicatorEnum,Indicator indicator){
  this.flatIndicatorEnumList.add(indicatorEnum);
  IndicatorUnit createIndicatorUnit=this.createIndicatorUnit(indicatorEnum,indicator);
  int size=currentindicatorUnits.length;
  IndicatorUnit[] newUnits=new IndicatorUnit[size + 1];
  System.arraycopy(currentindicatorUnits,0,newUnits,0,size);
  newUnits[size]=createIndicatorUnit;
  this.currentindicatorUnits=newUnits;
}","public void addPatternIndicator(IndicatorEnum indicatorEnum,Indicator indicator){
  this.flatIndicatorEnumList.add(indicatorEnum);
  IndicatorUnit createIndicatorUnit=this.createIndicatorUnit(indicatorEnum,indicator);
  int size=0;
  if (currentindicatorUnits != null) {
    size=currentindicatorUnits.length;
  }
  IndicatorUnit[] newUnits=new IndicatorUnit[size + 1];
  if (currentindicatorUnits != null) {
    System.arraycopy(currentindicatorUnits,0,newUnits,0,size);
  }
  newUnits[size]=createIndicatorUnit;
  this.currentindicatorUnits=newUnits;
}",0.9007936507936508
140770,"/** 
 * Method ""saveSingleResource"" saves the given resource only. This method is a helper for saving quickly a given resource. It does not saved the related resources. This could result in an exception when other related resources should be saved with this resource.
 * @param resource the resource to save
 * @return true if no problem
 */
public static boolean saveSingleResource(Resource resource){
  EMFUtil util=new EMFUtil();
  util.getResourceSet().getResources().add(resource);
  return util.save();
}","/** 
 * Method ""saveSingleResource"" saves the given resource only. This method is a helper for saving quickly a given resource. It does not saved the related resources. This could result in an exception when other related resources should be saved with this resource.
 * @param resource the resource to save
 * @return true if no problem
 */
public boolean saveSingleResource(Resource resource){
  EMFUtil util=new EMFUtil();
  util.getResourceSet().getResources().add(resource);
  return util.save();
}",0.9930898321816388
140771,"/** 
 * Changes the uri of the given resource. The new uri is formed with the name of the input resource's uri appended to the path outputUri.
 * @param res the input resource
 * @param destinationUri the destination directory
 * @return the new uri.
 */
public static URI changeUri(Resource res,URI destinationUri){
  URI uri=res.getURI();
  URI newUri=destinationUri.appendSegment(uri.lastSegment());
  res.setURI(newUri);
  return newUri;
}","/** 
 * Changes the uri of the given resource. The new uri is formed with the name of the input resource's uri appended to the path outputUri.
 * @param res the input resource
 * @param destinationUri the destination directory
 * @return the new uri.
 */
public URI changeUri(Resource res,URI destinationUri){
  URI uri=res.getURI();
  URI newUri=destinationUri.appendSegment(uri.lastSegment());
  res.setURI(newUri);
  return newUri;
}",0.9920364050056882
140772,"/** 
 * This CTOR initializes all packages and create a resource set.
 * @param fileExtensions the list of extensions (without the dot).
 */
public EMFUtil(){
  options=new HashMap<String,Object>();
  options.put(XMIResource.OPTION_DECLARE_XML,Boolean.TRUE);
  options.put(XMIResource.OPTION_ENCODING,ENCODING);
  resourceSet=new ResourceSetImpl();
}","/** 
 * This CTOR initializes all packages and create a resource set.
 * @param fileExtensions the list of extensions (without the dot).
 */
private EMFUtil(){
  initialize();
  options=new HashMap<String,Object>();
  options.put(XMIResource.OPTION_DECLARE_XML,Boolean.TRUE);
  options.put(XMIResource.OPTION_ENCODING,ENCODING);
  resourceSet=new ResourceSetImpl();
}",0.9623430962343096
140773,"/** 
 * Method ""initialize"" initializes EMF factories, packages and file extensions.
 */
private static void initialize(){
  FactoriesUtil.initializeAllFactories();
  FactoriesUtil.initializeAllPackages();
  Resource.Factory.Registry reg=Resource.Factory.Registry.INSTANCE;
  final Collection<String> fileExtensions=FactoriesUtil.getExtensions();
  Map<String,Object> m=reg.getExtensionToFactoryMap();
  for (  String extension : fileExtensions) {
    m.put(extension,new CwmResourceFactory());
  }
}","/** 
 * Method ""initialize"" initializes EMF factories, packages and file extensions.
 */
private void initialize(){
  FactoriesUtil.initializeAllFactories();
  FactoriesUtil.initializeAllPackages();
  Resource.Factory.Registry reg=Resource.Factory.Registry.INSTANCE;
  final Collection<String> fileExtensions=FactoriesUtil.getExtensions();
  Map<String,Object> m=reg.getExtensionToFactoryMap();
  for (  String extension : fileExtensions) {
    m.put(extension,new CwmResourceFactory());
  }
}",0.9929506545820744
140774,"/** 
 * Method ""saveResource"" saves the given resource. This method is a helper for saving quickly a given resource and all its related resources (if any).
 * @param resource the resource to save
 * @return true if no problem
 */
public static boolean saveResource(Resource resource){
  ResourceSet resourceSet=resource.getResourceSet();
  EMFUtil util=new EMFUtil();
  if (resourceSet != null) {
    util.setResourceSet(resourceSet);
    return util.save();
  }
  util.getResourceSet().getResources().add(resource);
  return util.save();
}","/** 
 * Method ""saveResource"" saves the given resource. This method is a helper for saving quickly a given resource and all its related resources (if any).
 * @param resource the resource to save
 * @return true if no problem
 */
public boolean saveResource(Resource resource){
  ResourceSet resourceSet=resource.getResourceSet();
  EMFUtil util=new EMFUtil();
  if (resourceSet != null) {
    util.setResourceSet(resourceSet);
    return util.save();
  }
  util.getResourceSet().getResources().add(resource);
  return util.save();
}",0.9934762348555451
140775,"protected String decorateText(String input,Object element){
  if (input.endsWith(PluginConstant.PRV_SUFFIX)) {
    IFile fileElement=(IFile)element;
    TypedReturnCode<TdDataProvider> rc=PrvResourceFileHelper.getInstance().getTdProvider(fileElement);
    String decorateText=PluginConstant.EMPTY_STRING;
    if (rc.isOk()) {
      decorateText=rc.getObject().getName();
    }
 else {
      log.warn(rc.getMessage());
    }
    return decorateText;
  }
 else   if (input.endsWith(PluginConstant.ANA_SUFFIX)) {
    IFile fileElement=(IFile)element;
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + (fileElement).getLocation());
    }
    Analysis analysis=AnaResourceFileHelper.getInstance().findAnalysis(fileElement);
    if (analysis != null) {
      Date executionDate=analysis.getResults().getResultMetadata().getExecutionDate();
      String executeInfo=executionDate == null ? ""String_Node_Str"" : PluginConstant.PARENTHESIS_LEFT + DateFormatUtils.getSimpleDateString(executionDate) + PluginConstant.PARENTHESIS_RIGHT;
      return analysis.getName() + PluginConstant.SPACE_STRING + executeInfo;
    }
  }
 else   if (input.endsWith(PluginConstant.REP_SUFFIX)) {
    IFile fileElement=(IFile)element;
    TdReport findReport=RepResourceFileHelper.getInstance().findReport(fileElement);
    return findReport.getName();
  }
  return super.decorateText(input,element);
}","protected String decorateText(String input,Object element){
  if (input.endsWith(PluginConstant.PRV_SUFFIX)) {
    IFile fileElement=(IFile)element;
    TypedReturnCode<TdDataProvider> rc=PrvResourceFileHelper.getInstance().getTdProvider(fileElement);
    String decorateText=PluginConstant.EMPTY_STRING;
    if (rc.isOk()) {
      decorateText=rc.getObject().getName();
    }
 else {
      log.warn(rc.getMessage());
    }
    return decorateText;
  }
 else   if (input.endsWith(PluginConstant.ANA_SUFFIX)) {
    IFile fileElement=(IFile)element;
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + (fileElement).getLocation());
    }
    Analysis analysis=AnaResourceFileHelper.getInstance().findAnalysis(fileElement);
    if (analysis != null) {
      Date executionDate=analysis.getResults().getResultMetadata().getExecutionDate();
      String executeInfo=executionDate == null ? ""String_Node_Str"" : PluginConstant.PARENTHESIS_LEFT + DateFormatUtils.getSimpleDateString(executionDate) + PluginConstant.PARENTHESIS_RIGHT;
      return analysis.getName() + PluginConstant.SPACE_STRING + executeInfo;
    }
  }
 else   if (input.endsWith(PluginConstant.REP_SUFFIX)) {
    IFile fileElement=(IFile)element;
    TdReport findReport=RepResourceFileHelper.getInstance().findReport(fileElement);
    return findReport.getName();
  }
 else   if (input.endsWith(NewSourcePatternActionProvider.EXTENSION_PATTERN)) {
    IPath path=new Path(input);
    path=path.removeFileExtension();
    return path.toString();
  }
  return super.decorateText(input,element);
}",0.922713466081674
140776,"public void run(){
}","public void run(){
  CorePlugin.getDefault().openEditor(currentSelection,ConnectionEditor.class.getName());
}",0.3100775193798449
140777,"@Override public void run(){
  new CreateNewAnalysisAction().run(null,null);
  AnalysisEditor editor=(AnalysisEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
  if (editor != null) {
    ColumnMasterDetailsPage page=(ColumnMasterDetailsPage)editor.getMasterPage();
    if (allColumns.size() != 0) {
      page.getTreeViewer().setInput(allColumns.toArray());
      this.allColumns.clear();
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  new CreateNewAnalysisAction().run(null,null);
  AnalysisEditor editor=(AnalysisEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
  if (editor != null) {
    ColumnMasterDetailsPage page=(ColumnMasterDetailsPage)editor.getMasterPage();
    if (!this.selection.isEmpty()) {
      TdColumn[] columns=new TdColumn[selection.size()];
      Iterator it=this.selection.iterator();
      int i=0;
      while (it.hasNext()) {
        columns[i]=(TdColumn)it.next();
        i++;
      }
      page.getTreeViewer().setInput(columns);
    }
  }
}",0.708675799086758
140778,"@SuppressWarnings(""String_Node_Str"") @Override public void fillContextMenu(IMenuManager menu){
  TreeSelection currentSelection=((TreeSelection)this.getContext().getSelection());
  Iterator iterator=currentSelection.iterator();
  while (iterator.hasNext()) {
    TdColumn column=(TdColumn)iterator.next();
    analyzeColumnAction.addColumn(column);
  }
  menu.add(analyzeColumnAction);
}","@SuppressWarnings(""String_Node_Str"") @Override public void fillContextMenu(IMenuManager menu){
  TreeSelection currentSelection=((TreeSelection)this.getContext().getSelection());
  analyzeColumnAction.setColumnSelection(currentSelection);
  menu.add(analyzeColumnAction);
}",0.7242424242424242
140779,"@Override public void run(){
  CreatePatternWizard fileWizard=new CreatePatternWizard(folder){
    public void dispose(){
      activeCount=0;
      super.dispose();
    }
  }
;
  WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),fileWizard){
    public void openTray(    DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
      super.openTray(tray);
      if (tray instanceof HelpTray) {
        HelpTray helpTray=(HelpTray)tray;
        ReusableHelpPart helpPart=helpTray.getHelpPart();
        helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
      }
    }
    @Override protected void nextPressed(){
      super.nextPressed();
      ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
      if (lastActiveInstance != null) {
        IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
        IHelpResource[] relatedTopics=context.getRelatedTopics();
        String href=relatedTopics[0].getHref();
        lastActiveInstance.showURL(href);
      }
    }
  }
;
  fileWizard.setWindowTitle(getText());
  dialog.create();
  dialog.getShell().addShellListener(new ShellAdapter(){
    public void shellActivated(    ShellEvent e){
      if (activeCount < 2) {
        Point point=e.widget.getDisplay().getCursorLocation();
        IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
        IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
        helpSystem.displayContext(context,point.x + 15,point.y);
        activeCount++;
      }
    }
  }
);
  if (WizardDialog.OK == dialog.open()) {
    try {
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  CreatePatternWizard fileWizard=new CreatePatternWizard(folder){
    public void dispose(){
      activeCount=0;
      super.dispose();
    }
  }
;
  WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),fileWizard){
    public void openTray(    DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
      super.openTray(tray);
      if (tray instanceof HelpTray) {
        HelpTray helpTray=(HelpTray)tray;
        ReusableHelpPart helpPart=helpTray.getHelpPart();
        helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
      }
    }
  }
;
  fileWizard.setWindowTitle(getText());
  dialog.create();
  dialog.getShell().addShellListener(new ShellAdapter(){
    public void shellActivated(    ShellEvent e){
      if (activeCount < 2) {
        Point point=e.widget.getDisplay().getCursorLocation();
        IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
        IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
        helpSystem.displayContext(context,point.x + 15,point.y);
        activeCount++;
        ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
        if (lastActiveInstance != null) {
          IHelpResource[] relatedTopics=context.getRelatedTopics();
          String href=relatedTopics[0].getHref();
          lastActiveInstance.showURL(href);
        }
      }
    }
  }
);
  if (WizardDialog.OK == dialog.open()) {
    try {
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}",0.6326707000864304
140780,"public void shellActivated(ShellEvent e){
  if (activeCount < 2) {
    Point point=e.widget.getDisplay().getCursorLocation();
    IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
    IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
    helpSystem.displayContext(context,point.x + 15,point.y);
    activeCount++;
  }
}","public void shellActivated(ShellEvent e){
  if (activeCount < 2) {
    Point point=e.widget.getDisplay().getCursorLocation();
    IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
    IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
    helpSystem.displayContext(context,point.x + 15,point.y);
    activeCount++;
    ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
    if (lastActiveInstance != null) {
      IHelpResource[] relatedTopics=context.getRelatedTopics();
      String href=relatedTopics[0].getHref();
      lastActiveInstance.showURL(href);
    }
  }
}",0.7283464566929134
140781,"public static ImageDescriptor createBarChart(String titile,CategoryDataset dataset){
  JFreeChart chart=ChartFactory.createBarChart(null,titile,""String_Node_Str"",dataset,PlotOrientation.HORIZONTAL,false,false,false);
  CategoryPlot plot=chart.getCategoryPlot();
  plot.setForegroundAlpha(0.50f);
  try {
    return ChartUtils.convertToImage(chart,CHART_WIDTH,CHART_HEIGHT);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","public static ImageDescriptor createBarChart(String titile,CategoryDataset dataset){
  JFreeChart chart=ChartFactory.createBarChart(null,titile,""String_Node_Str"",dataset,PlotOrientation.HORIZONTAL,false,false,false);
  CategoryPlot plot=chart.getCategoryPlot();
  try {
    return ChartUtils.convertToImage(chart,CHART_WIDTH,CHART_HEIGHT);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0.9605568445475638
140782,"public static List<ImageDescriptor> createChart(ColumnIndicator column,boolean isCreate){
  CompositeIndicator compositeIndicator=new CompositeIndicator(column);
  Map<String,List<IndicatorUnit>> separatedMap=compositeIndicator.getIndicatorComposite();
  List<ImageDescriptor> returnFiles=new ArrayList<ImageDescriptor>();
  if (separatedMap.get(CompositeIndicator.SIMPLE_STATISTICS).size() != 0) {
    CategoryDataset dataset=createSimpleDataset(separatedMap.get(CompositeIndicator.SIMPLE_STATISTICS),isCreate);
    returnFiles.add(create3DBarChart(CompositeIndicator.SIMPLE_STATISTICS,dataset,true));
  }
  if (separatedMap.get(CompositeIndicator.TEXT_STATISTICS).size() != 0) {
    CategoryDataset dataset=createTextedDataset(separatedMap.get(CompositeIndicator.TEXT_STATISTICS),isCreate);
    returnFiles.add(create3DBarChart(CompositeIndicator.TEXT_STATISTICS,dataset,true));
  }
  if (separatedMap.get(CompositeIndicator.FREQUENCE_STATISTICS).size() != 0) {
    CategoryDataset dataset=createFrequenceDataset(separatedMap.get(CompositeIndicator.FREQUENCE_STATISTICS),isCreate);
    returnFiles.add(createBarChart(CompositeIndicator.FREQUENCE_STATISTICS,dataset));
  }
  if (separatedMap.get(CompositeIndicator.SUMMARY_STATISTICS).size() != 0) {
    CategoryDataset dataset=createSummaryDataset(separatedMap.get(CompositeIndicator.SUMMARY_STATISTICS),isCreate);
    if (dataset instanceof BoxAndWhiskerCategoryDataset) {
      returnFiles.add(createBoxAndWhiskerChart(CompositeIndicator.SUMMARY_STATISTICS,(BoxAndWhiskerCategoryDataset)dataset));
    }
 else {
      returnFiles.add(create3DBarChart(CompositeIndicator.SUMMARY_STATISTICS,dataset,false));
    }
  }
  if (separatedMap.get(CompositeIndicator.PATTERN_MATCHING).size() != 0) {
    CategoryDataset dataset=createPatternMatchDataset(separatedMap.get(CompositeIndicator.PATTERN_MATCHING),isCreate);
    returnFiles.add(createStackedBarChart(CompositeIndicator.PATTERN_MATCHING,dataset));
  }
  return returnFiles;
}","public static List<ImageDescriptor> createChart(ColumnIndicator column,boolean isCreate){
  CompositeIndicator compositeIndicator=new CompositeIndicator(column);
  Map<String,List<IndicatorUnit>> separatedMap=compositeIndicator.getIndicatorComposite();
  List<ImageDescriptor> returnFiles=new ArrayList<ImageDescriptor>();
  if (separatedMap.get(CompositeIndicator.SIMPLE_STATISTICS).size() != 0) {
    CategoryDataset dataset=createSimpleDataset(separatedMap.get(CompositeIndicator.SIMPLE_STATISTICS),isCreate);
    returnFiles.add(create3DBarChart(CompositeIndicator.SIMPLE_STATISTICS,dataset,true));
  }
  if (separatedMap.get(CompositeIndicator.TEXT_STATISTICS).size() != 0) {
    CategoryDataset dataset=createTextedDataset(separatedMap.get(CompositeIndicator.TEXT_STATISTICS),isCreate);
    returnFiles.add(create3DBarChart(CompositeIndicator.TEXT_STATISTICS,dataset,true));
  }
  if (separatedMap.get(CompositeIndicator.FREQUENCE_STATISTICS).size() != 0) {
    CategoryDataset dataset=createFrequenceDataset(separatedMap.get(CompositeIndicator.FREQUENCE_STATISTICS),isCreate);
    returnFiles.add(createBarChart(CompositeIndicator.FREQUENCE_STATISTICS,dataset));
  }
  if (separatedMap.get(CompositeIndicator.SUMMARY_STATISTICS).size() != 0) {
    CategoryDataset dataset=createSummaryDataset(separatedMap.get(CompositeIndicator.SUMMARY_STATISTICS),isCreate);
    if (dataset instanceof BoxAndWhiskerCategoryDataset) {
      returnFiles.add(createBoxAndWhiskerChart(CompositeIndicator.SUMMARY_STATISTICS,(BoxAndWhiskerCategoryDataset)dataset));
    }
 else {
      returnFiles.add(create3DBarChart(CompositeIndicator.SUMMARY_STATISTICS,dataset,false));
    }
  }
  if (separatedMap.get(CompositeIndicator.PATTERN_MATCHING).size() != 0) {
    CategoryDataset dataset=createPatternMatchDataset(separatedMap.get(CompositeIndicator.PATTERN_MATCHING),isCreate);
    returnFiles.add(createStacked3DBarChart(CompositeIndicator.PATTERN_MATCHING,dataset));
  }
  return returnFiles;
}",0.9994952044422007
140783,"private static CategoryDataset createPatternMatchDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  if (isCreate) {
    for (    IndicatorUnit unit : indicatorUnitList) {
      IndicatorCommonUtil.compositeIndicatorMap(unit);
      String label=unit.getIndicatorName();
      if (unit.getValue() != null) {
        PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
        double notMathCount=patternExt.getNotMatchingValueCount();
        double machCount=patternExt.getMatchingValueCount();
        dataset.addValue(notMathCount / (notMathCount + machCount),""String_Node_Str"",label);
        dataset.addValue(machCount / (notMathCount + machCount),""String_Node_Str"",label);
      }
 else {
        dataset.addValue(0,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(0,""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
 else {
    dataset.addValue(0.23,""String_Node_Str"",""String_Node_Str"");
    dataset.addValue(0.77,""String_Node_Str"",""String_Node_Str"");
  }
  return dataset;
}","private static CategoryDataset createPatternMatchDataset(List<IndicatorUnit> indicatorUnitList,boolean isCreate){
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  if (isCreate) {
    int i=0;
    for (    IndicatorUnit unit : indicatorUnitList) {
      IndicatorCommonUtil.compositeIndicatorMap(unit);
      String label=unit.getIndicatorName();
      if (unit.getValue() != null) {
        PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
        double notMathCount=patternExt.getNotMatchingValueCount();
        double machCount=patternExt.getMatchingValueCount();
        dataset.addValue(notMathCount / (notMathCount + machCount),""String_Node_Str"",String.valueOf(label + i));
        dataset.addValue(machCount / (notMathCount + machCount),""String_Node_Str"",String.valueOf(label + i));
      }
 else {
        dataset.addValue(0,""String_Node_Str"",""String_Node_Str"");
        dataset.addValue(0,""String_Node_Str"",""String_Node_Str"");
      }
      i++;
    }
  }
 else {
    dataset.addValue(0.23,""String_Node_Str"",""String_Node_Str"");
    dataset.addValue(0.77,""String_Node_Str"",""String_Node_Str"");
  }
  return dataset;
}",0.9716060337178348
140784,"@Override public void run(){
  CreatePatternWizard fileWizard=new CreatePatternWizard(folder);
  WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),fileWizard);
  fileWizard.setWindowTitle(getText());
  if (WizardDialog.OK == dialog.open()) {
    try {
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  CreatePatternWizard fileWizard=new CreatePatternWizard(folder){
    public void dispose(){
      activeCount=0;
      super.dispose();
    }
  }
;
  WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),fileWizard){
    public void openTray(    DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
      super.openTray(tray);
      if (tray instanceof HelpTray) {
        HelpTray helpTray=(HelpTray)tray;
        ReusableHelpPart helpPart=helpTray.getHelpPart();
        helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
      }
    }
    @Override protected void nextPressed(){
      super.nextPressed();
      ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
      if (lastActiveInstance != null) {
        IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
        IHelpResource[] relatedTopics=context.getRelatedTopics();
        String href=relatedTopics[0].getHref();
        lastActiveInstance.showURL(href);
      }
    }
  }
;
  fileWizard.setWindowTitle(getText());
  dialog.create();
  dialog.getShell().addShellListener(new ShellAdapter(){
    public void shellActivated(    ShellEvent e){
      if (activeCount < 2) {
        Point point=e.widget.getDisplay().getCursorLocation();
        IContext context=HelpSystem.getContext(HelpPlugin.PATTERN_CONTEXT_HELP_ID);
        IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
        helpSystem.displayContext(context,point.x + 15,point.y);
        activeCount++;
      }
    }
  }
);
  if (WizardDialog.OK == dialog.open()) {
    try {
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}",0.3630630630630631
140785,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(""String_Node_Str"");
  nameText=new Text(container,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label pathLab=new Label(container,SWT.NONE);
  pathLab.setText(""String_Node_Str"");
  Composite pathContainer=new Composite(container,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  button=new Button(pathContainer,SWT.PUSH);
  button.setText(""String_Node_Str"");
  defaultFolderProviderRes=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.PATTERNS);
  pathText.setText(defaultFolderProviderRes.getFullPath().toString());
  setControl(container);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      metadata.put(IParameterConstant.ANALYSIS_NAME,nameText.getText());
      getConnectionParams().setMetadate(metadata);
      setPageComplete(true);
    }
  }
);
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      openFolderSelectionDialog(DQStructureManager.LIBRARIES,DQStructureManager.PATTERNS);
    }
  }
);
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(""String_Node_Str"");
  nameText=new Text(container,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label pathLab=new Label(container,SWT.NONE);
  pathLab.setText(""String_Node_Str"");
  Composite pathContainer=new Composite(container,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  button=new Button(pathContainer,SWT.PUSH);
  button.setText(""String_Node_Str"");
  defaultFolderProviderRes=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.PATTERNS);
  pathText.setText(defaultFolderProviderRes.getFullPath().toString());
  setControl(container);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      metadata.put(IParameterConstant.ANALYSIS_NAME,nameText.getText());
      getConnectionParams().setMetadate(metadata);
      setPageComplete(true);
    }
  }
);
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      openFolderSelectionDialog(DQStructureManager.LIBRARIES,DQStructureManager.PATTERNS);
    }
  }
);
  if (getControl() != null) {
    try {
      PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(),HelpPlugin.PATTERN_CONTEXT_HELP_ID);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9416531604538088
140786,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(""String_Node_Str"");
  nameText=new Text(container,SWT.BORDER | SWT.MULTI | SWT.H_SCROLL| SWT.V_SCROLL);
  nameText.setLayoutData(new GridData(GridData.FILL_BOTH));
  setControl(container);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setPageComplete(true);
    }
  }
);
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  GridLayout gdLayout=new GridLayout(2,false);
  container.setLayout(gdLayout);
  GridData data;
  Label nameLab=new Label(container,SWT.NONE);
  nameLab.setText(""String_Node_Str"");
  nameText=new Text(container,SWT.BORDER | SWT.MULTI | SWT.H_SCROLL| SWT.V_SCROLL);
  nameText.setLayoutData(new GridData(GridData.FILL_BOTH));
  setControl(container);
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setPageComplete(true);
    }
  }
);
  if (getControl() != null) {
    try {
      PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(),HelpPlugin.PATTERN_CONTEXT_HELP_ID);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.8454935622317596
140787,"@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  new CreateNewAnalysisAction().run(null,null);
  AnalysisEditor editor=(AnalysisEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
  if (editor != null) {
    ColumnMasterDetailsPage page=(ColumnMasterDetailsPage)editor.getMasterPage();
    if (!this.selection.isEmpty()) {
      TdColumn[] columns=new TdColumn[selection.size()];
      Iterator it=this.selection.iterator();
      int i=0;
      while (it.hasNext()) {
        columns[i]=(TdColumn)it.next();
        i++;
      }
      page.getTreeViewer().setInput(columns);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  if (openStandardAnalysisDialog(true,AnalysisType.MULTIPLE_COLUMN) == Window.OK) {
    AnalysisEditor editor=(AnalysisEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
    if (editor != null) {
      ColumnMasterDetailsPage page=(ColumnMasterDetailsPage)editor.getMasterPage();
      if (!this.selection.isEmpty()) {
        TdColumn[] columns=new TdColumn[selection.size()];
        Iterator it=this.selection.iterator();
        int i=0;
        while (it.hasNext()) {
          columns[i]=(TdColumn)it.next();
          i++;
        }
        page.getTreeViewer().setInput(columns);
      }
    }
  }
}",0.8843338213762811
140788,"/** 
 * Method ""getBigDecimal"" converts object into big decimal.
 * @param javaType
 * @param object
 * @return
 */
private Double getRealValue(int javaType,String object){
  if (Java2SqlType.isDateInSQL(javaType)) {
    Date date=java.sql.Date.valueOf(object);
    return Double.valueOf(date.getTime());
  }
  return Double.valueOf(object);
}","/** 
 * Method ""getRealValue"" converts object into double.
 * @param javaType
 * @param object
 * @return
 */
private Double getRealValue(int javaType,String object){
  if (Java2SqlType.isDateInSQL(javaType)) {
    Date date=null;
switch (javaType) {
case Types.TIMESTAMP:
      date=java.sql.Timestamp.valueOf(object);
    break;
case Types.DATE:
  date=java.sql.Date.valueOf(object);
break;
case Types.TIME:
date=java.sql.Time.valueOf(object);
break;
default :
break;
}
return date != null ? Double.valueOf(date.getTime()) : Double.NaN;
}
return Double.valueOf(object);
}",0.6550218340611353
140789,"/** 
 * This method will get IndicatorUnit from indicatorUnitMap, if can't get exist object, it will be create a new IndicatorUnit.
 * @param indicatorEnum
 * @return
 */
private IndicatorUnit getIndicatorUnit(IndicatorEnum indicatorEnum){
  IndicatorUnit indicatorUnit=this.indicatorUnitMap.get(indicatorEnum);
  if (indicatorUnit == null) {
    indicatorUnit=createIndicatorUnit(indicatorEnum,null);
  }
  return indicatorUnit;
}","/** 
 * This method will get IndicatorUnit from indicatorUnitMap, if can't get exist object, it will be create a new IndicatorUnit.
 * @param indicatorEnum
 * @return
 */
public IndicatorUnit getIndicatorUnit(IndicatorEnum indicatorEnum){
  IndicatorUnit indicatorUnit=this.indicatorUnitMap.get(indicatorEnum);
  if (indicatorUnit == null) {
    indicatorUnit=createIndicatorUnit(indicatorEnum,null);
  }
  return indicatorUnit;
}",0.9872241579558652
140790,"@Override public void drop(DropTargetEvent event){
  super.drop(event);
  IFile fe=(IFile)((StructuredSelection)commonViewer.getSelection()).getFirstElement();
  Pattern pattern=getPattern(fe);
  TreeItem item=(TreeItem)event.item;
  ColumnIndicator data=(ColumnIndicator)item.getData(AnalysisColumnTreeViewer.COLUMN_INDICATOR_KEY);
  PatternMatchingIndicator patternMatchingIndicator=IndicatorsFactory.eINSTANCE.createPatternMatchingIndicator();
  IndicatorParameters indicParams=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  Domain validData=DomainFactory.eINSTANCE.createDomain();
  validData.getPatterns().add(pattern);
  indicParams.setDataValidDomain(validData);
  patternMatchingIndicator.setParameters(indicParams);
  IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
  data.addIndicator(type,patternMatchingIndicator);
  IndicatorUnit indicatorUnit=new IndicatorUnit(type,patternMatchingIndicator,data);
  AnalysisColumnTreeViewer viewer=(AnalysisColumnTreeViewer)item.getData(AnalysisColumnTreeViewer.VIEWER_KEY);
  viewer.createOneUnit(item,indicatorUnit);
  viewer.setDirty(true);
}","@Override public void drop(DropTargetEvent event){
  super.drop(event);
  IFile fe=(IFile)((StructuredSelection)commonViewer.getSelection()).getFirstElement();
  Pattern pattern=getPattern(fe);
  TreeItem item=(TreeItem)event.item;
  ColumnIndicator data=(ColumnIndicator)item.getData(AnalysisColumnTreeViewer.COLUMN_INDICATOR_KEY);
  PatternMatchingIndicator patternMatchingIndicator=IndicatorsFactory.eINSTANCE.createPatternMatchingIndicator();
  IndicatorParameters indicParams=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  Domain validData=DomainFactory.eINSTANCE.createDomain();
  validData.getPatterns().add(pattern);
  indicParams.setDataValidDomain(validData);
  patternMatchingIndicator.setParameters(indicParams);
  IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
  data.addIndicator(type,patternMatchingIndicator);
  AnalysisColumnTreeViewer viewer=(AnalysisColumnTreeViewer)item.getData(AnalysisColumnTreeViewer.VIEWER_KEY);
  viewer.createOneUnit(item,data.getIndicatorUnit(type));
  viewer.setDirty(true);
}",0.9544429409111412
140791,"/** 
 * DOC qzhang Comment method ""installDND"".
 */
public static void installDND(Tree targetControl){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  DQRespositoryView findView=(DQRespositoryView)activePage.findView(DQRespositoryView.ID);
  final CommonViewer commonViewer=findView.getCommonViewer();
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  Transfer[] transfers=new Transfer[]{transfer};
  DropTarget dropTarget=new DropTarget(targetControl,operations);
  dropTarget.setTransfer(transfers);
  dropTarget.addDropListener(new TreeDropTargetEffect(targetControl){
    @Override public void dragEnter(    DropTargetEvent event){
      super.dragEnter(event);
      event.feedback=DND.FEEDBACK_EXPAND;
      doDropValidation(event);
    }
    @Override public void dragOperationChanged(    DropTargetEvent event){
      super.dragOperationChanged(event);
      event.feedback=DND.FEEDBACK_EXPAND;
      doDropValidation(event);
    }
    @Override public void dragOver(    DropTargetEvent event){
      super.dragOver(event);
      doDropValidation(event);
    }
    @Override public void dropAccept(    DropTargetEvent event){
      super.dropAccept(event);
      doDropValidation(event);
    }
    @Override public void drop(    DropTargetEvent event){
      super.drop(event);
      IFile fe=(IFile)((StructuredSelection)commonViewer.getSelection()).getFirstElement();
      Pattern pattern=getPattern(fe);
      TreeItem item=(TreeItem)event.item;
      ColumnIndicator data=(ColumnIndicator)item.getData(AnalysisColumnTreeViewer.COLUMN_INDICATOR_KEY);
      PatternMatchingIndicator patternMatchingIndicator=IndicatorsFactory.eINSTANCE.createPatternMatchingIndicator();
      IndicatorParameters indicParams=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
      Domain validData=DomainFactory.eINSTANCE.createDomain();
      validData.getPatterns().add(pattern);
      indicParams.setDataValidDomain(validData);
      patternMatchingIndicator.setParameters(indicParams);
      IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
      data.addIndicator(type,patternMatchingIndicator);
      IndicatorUnit indicatorUnit=new IndicatorUnit(type,patternMatchingIndicator,data);
      AnalysisColumnTreeViewer viewer=(AnalysisColumnTreeViewer)item.getData(AnalysisColumnTreeViewer.VIEWER_KEY);
      viewer.createOneUnit(item,indicatorUnit);
      viewer.setDirty(true);
    }
  }
);
}","/** 
 * DOC qzhang Comment method ""installDND"".
 */
public static void installDND(Tree targetControl){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  DQRespositoryView findView=(DQRespositoryView)activePage.findView(DQRespositoryView.ID);
  final CommonViewer commonViewer=findView.getCommonViewer();
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  Transfer[] transfers=new Transfer[]{transfer};
  DropTarget dropTarget=new DropTarget(targetControl,operations);
  dropTarget.setTransfer(transfers);
  dropTarget.addDropListener(new TreeDropTargetEffect(targetControl){
    @Override public void dragEnter(    DropTargetEvent event){
      super.dragEnter(event);
      event.feedback=DND.FEEDBACK_EXPAND;
      doDropValidation(event);
    }
    @Override public void dragOperationChanged(    DropTargetEvent event){
      super.dragOperationChanged(event);
      event.feedback=DND.FEEDBACK_EXPAND;
      doDropValidation(event);
    }
    @Override public void dragOver(    DropTargetEvent event){
      super.dragOver(event);
      doDropValidation(event);
    }
    @Override public void dropAccept(    DropTargetEvent event){
      super.dropAccept(event);
      doDropValidation(event);
    }
    @Override public void drop(    DropTargetEvent event){
      super.drop(event);
      IFile fe=(IFile)((StructuredSelection)commonViewer.getSelection()).getFirstElement();
      Pattern pattern=getPattern(fe);
      TreeItem item=(TreeItem)event.item;
      ColumnIndicator data=(ColumnIndicator)item.getData(AnalysisColumnTreeViewer.COLUMN_INDICATOR_KEY);
      PatternMatchingIndicator patternMatchingIndicator=IndicatorsFactory.eINSTANCE.createPatternMatchingIndicator();
      IndicatorParameters indicParams=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
      Domain validData=DomainFactory.eINSTANCE.createDomain();
      validData.getPatterns().add(pattern);
      indicParams.setDataValidDomain(validData);
      patternMatchingIndicator.setParameters(indicParams);
      IndicatorEnum type=IndicatorEnum.findIndicatorEnum(patternMatchingIndicator.eClass());
      data.addIndicator(type,patternMatchingIndicator);
      AnalysisColumnTreeViewer viewer=(AnalysisColumnTreeViewer)item.getData(AnalysisColumnTreeViewer.VIEWER_KEY);
      viewer.createOneUnit(item,data.getIndicatorUnit(type));
      viewer.setDirty(true);
    }
  }
);
}",0.9792284866468842
140792,"/** 
 * Remove the selected elements(eg:TdColumn or Indicator) from tree.
 * @param newTree
 */
private void removeSelectedElements(final Tree newTree){
  TreeItem[] selection=newTree.getSelection();
  for (  TreeItem item : selection) {
    IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_VALUE);
    if (indicatorUnit != null) {
      deleteIndicatorItems((ColumnIndicator)item.getData(COLUMN_INDICATOR_VALUE),indicatorUnit);
    }
 else {
      deleteColumnItems((ColumnIndicator)item.getData(COLUMN_INDICATOR_VALUE));
    }
  }
  setElements(columnIndicators);
}","/** 
 * Remove the selected elements(eg:TdColumn or Indicator) from tree.
 * @param newTree
 */
private void removeSelectedElements(final Tree newTree){
  TreeItem[] selection=newTree.getSelection();
  boolean branchIndicatorExist=false;
  for (  TreeItem item : selection) {
    IndicatorUnit indicatorUnit=(IndicatorUnit)item.getData(INDICATOR_UNIT_KEY);
    if (indicatorUnit != null) {
      deleteIndicatorItems((ColumnIndicator)item.getData(COLUMN_INDICATOR_KEY),indicatorUnit);
    }
 else {
      deleteColumnItems((ColumnIndicator)item.getData(COLUMN_INDICATOR_KEY));
    }
    if (item.getParentItem() != null && item.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
      branchIndicatorExist=true;
      continue;
    }
 else {
      removeItemBranch(item);
    }
  }
  if (branchIndicatorExist) {
    setElements(columnIndicators);
  }
}",0.7944636678200692
140793,"public void setElements(final ColumnIndicator[] elements){
  this.tree.dispose();
  this.tree=createTree(this.parentComp);
  this.columnIndicators=elements;
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    final ColumnIndicator columnIndicator=(ColumnIndicator)elements[i];
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    String columnName=columnIndicator.getTdColumn().getName();
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ columnIndicator.getTdColumn().getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_VALUE,columnIndicator);
    TreeEditor editor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    if (columnIndicator.getDataminingType() == null) {
      combo.select(0);
    }
 else {
      combo.setText(columnIndicator.getDataminingType().getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        columnIndicator.setDataminingType(DataminingType.get(combo.getText()));
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    editor.minimumWidth=WIDTH1_CELL;
    editor.setEditor(combo,treeItem,1);
    editor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.ACTION_DELETE));
    delLabel.setToolTipText(""String_Node_Str"");
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(columnIndicator);
        setElements(columnIndicators);
      }
    }
);
    editor.minimumWidth=WIDTH1_CELL;
    editor.horizontalAlignment=SWT.CENTER;
    editor.setEditor(delLabel,treeItem,2);
    if (columnIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,columnIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}","public void setElements(final ColumnIndicator[] elements){
  this.tree.dispose();
  this.tree=createTree(this.parentComp);
  this.columnIndicators=elements;
  for (int i=0; i < elements.length; i++) {
    final TreeItem treeItem=new TreeItem(tree,SWT.NONE);
    final ColumnIndicator columnIndicator=(ColumnIndicator)elements[i];
    treeItem.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
    String columnName=columnIndicator.getTdColumn().getName();
    treeItem.setText(0,columnName != null ? columnName + PluginConstant.SPACE_STRING + PluginConstant.PARENTHESIS_LEFT+ columnIndicator.getTdColumn().getSqlDataType().getName()+ PluginConstant.PARENTHESIS_RIGHT : ""String_Node_Str"");
    treeItem.setData(COLUMN_INDICATOR_KEY,columnIndicator);
    TreeEditor editor=new TreeEditor(tree);
    final CCombo combo=new CCombo(tree,SWT.BORDER);
    for (    DataminingType type : DataminingType.values()) {
      combo.add(type.getLiteral());
    }
    if (columnIndicator.getDataminingType() == null) {
      combo.select(0);
    }
 else {
      combo.setText(columnIndicator.getDataminingType().getLiteral());
    }
    combo.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        columnIndicator.setDataminingType(DataminingType.get(combo.getText()));
        setDirty(true);
      }
    }
);
    combo.setEditable(false);
    editor.minimumWidth=WIDTH1_CELL;
    editor.setEditor(combo,treeItem,1);
    editor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.ACTION_DELETE));
    delLabel.setToolTipText(""String_Node_Str"");
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        deleteColumnItems(columnIndicator);
        if (treeItem.getParentItem() != null && treeItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(columnIndicators);
        }
 else {
          removeItemBranch(treeItem);
        }
      }
    }
);
    editor.minimumWidth=WIDTH1_CELL;
    editor.horizontalAlignment=SWT.CENTER;
    editor.setEditor(delLabel,treeItem,2);
    treeItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{editor});
    if (columnIndicator.hasIndicators()) {
      createIndicatorItems(treeItem,columnIndicator.getIndicatorUnits());
    }
    treeItem.setExpanded(true);
  }
  this.setDirty(true);
}",0.9347553324968632
140794,"@Override public void mouseDown(MouseEvent e){
  ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_VALUE);
  deleteIndicatorItems(columnIndicator,typeMapping);
  setElements(columnIndicators);
}","@Override public void mouseDown(MouseEvent e){
  ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
  deleteIndicatorItems(columnIndicator,unit);
  if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
    setElements(columnIndicators);
  }
 else {
    removeItemBranch(indicatorItem);
  }
}",0.474025974025974
140795,"private void createIndicatorItems(final TreeItem treeItem,IndicatorUnit[] indicatorTypeMappings){
  for (  IndicatorUnit indicatorMapping : indicatorTypeMappings) {
    final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
    final IndicatorUnit typeMapping=indicatorMapping;
    final IndicatorEnum indicatorEnum=indicatorMapping.getType();
    indicatorItem.setData(COLUMN_INDICATOR_VALUE,treeItem.getData(COLUMN_INDICATOR_VALUE));
    indicatorItem.setData(INDICATOR_UNIT_VALUE,typeMapping);
    indicatorItem.setText(0,indicatorMapping.getType().getLabel());
    TreeEditor editor;
    editor=new TreeEditor(tree);
    Label optionLabel=new Label(tree,SWT.NONE);
    optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
    optionLabel.setToolTipText(""String_Node_Str"");
    optionLabel.pack();
    optionLabel.setData(indicatorMapping);
    optionLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
        final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis){
          @Override public void dispose(){
            activeCount=0;
            super.dispose();
          }
        }
;
        try {
          WizardDialog dialog=new WizardDialog(null,wizard){
            @Override public void openTray(            DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
              super.openTray(tray);
              if (tray instanceof HelpTray) {
                HelpTray helpTray=(HelpTray)tray;
                ReusableHelpPart helpPart=helpTray.getHelpPart();
                helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
              }
            }
          }
;
          dialog.setPageSize(300,400);
          dialog.create();
          dialog.getShell().addShellListener(new ShellAdapter(){
            @Override public void shellActivated(            ShellEvent e){
              String string=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
              if (activeCount < 2) {
                Point point=e.widget.getDisplay().getCursorLocation();
                IContext context=HelpSystem.getContext(string);
                IHelpResource[] relatedTopics=context.getRelatedTopics();
                for (                IHelpResource topic : relatedTopics) {
                  topic.getLabel();
                  topic.getHref();
                }
                IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
                helpSystem.displayContext(context,point.x + 15,point.y);
                activeCount++;
                ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
                if (lastActiveInstance != null) {
                  String href=IndicatorParameterTypes.getHref(indicator);
                  if (href != null) {
                    lastActiveInstance.showURL(href);
                  }
                }
              }
            }
          }
);
          int open=dialog.open();
          if (Window.OK == open) {
            setDirty(wizard.isDirty());
          }
        }
 catch (        AssertionFailedException ex) {
          MessageDialogWithToggle.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
);
    editor.minimumWidth=WIDTH1_CELL;
    editor.horizontalAlignment=SWT.CENTER;
    editor.setEditor(optionLabel,indicatorItem,1);
    editor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.ACTION_DELETE));
    delLabel.setToolTipText(""String_Node_Str"");
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_VALUE);
        deleteIndicatorItems(columnIndicator,typeMapping);
        setElements(columnIndicators);
      }
    }
);
    editor.minimumWidth=WIDTH1_CELL;
    editor.horizontalAlignment=SWT.CENTER;
    editor.setEditor(delLabel,indicatorItem,2);
    if (indicatorEnum.hasChildren()) {
      indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_VALUE));
      createIndicatorItems(indicatorItem,indicatorMapping.getChildren());
    }
  }
}","private void createIndicatorItems(final TreeItem treeItem,IndicatorUnit[] indicatorUnits){
  for (  IndicatorUnit indicatorUnit : indicatorUnits) {
    final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
    final IndicatorUnit unit=indicatorUnit;
    final IndicatorEnum indicatorEnum=indicatorUnit.getType();
    indicatorItem.setData(COLUMN_INDICATOR_KEY,treeItem.getData(COLUMN_INDICATOR_KEY));
    indicatorItem.setData(INDICATOR_UNIT_KEY,unit);
    indicatorItem.setText(0,indicatorUnit.getType().getLabel());
    TreeEditor optionEditor;
    optionEditor=new TreeEditor(tree);
    Label optionLabel=new Label(tree,SWT.NONE);
    optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
    optionLabel.setToolTipText(""String_Node_Str"");
    optionLabel.pack();
    optionLabel.setData(indicatorUnit);
    optionLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
        final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis){
          @Override public void dispose(){
            activeCount=0;
            super.dispose();
          }
        }
;
        try {
          WizardDialog dialog=new WizardDialog(null,wizard){
            @Override public void openTray(            DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
              super.openTray(tray);
              if (tray instanceof HelpTray) {
                HelpTray helpTray=(HelpTray)tray;
                ReusableHelpPart helpPart=helpTray.getHelpPart();
                helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
              }
            }
          }
;
          dialog.setPageSize(300,400);
          dialog.create();
          dialog.getShell().addShellListener(new ShellAdapter(){
            @Override public void shellActivated(            ShellEvent e){
              String string=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
              if (activeCount < 2) {
                Point point=e.widget.getDisplay().getCursorLocation();
                IContext context=HelpSystem.getContext(string);
                IHelpResource[] relatedTopics=context.getRelatedTopics();
                for (                IHelpResource topic : relatedTopics) {
                  topic.getLabel();
                  topic.getHref();
                }
                IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
                helpSystem.displayContext(context,point.x + 15,point.y);
                activeCount++;
                ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
                if (lastActiveInstance != null) {
                  String href=IndicatorParameterTypes.getHref(indicator);
                  if (href != null) {
                    lastActiveInstance.showURL(href);
                  }
                }
              }
            }
          }
);
          int open=dialog.open();
          if (Window.OK == open) {
            setDirty(wizard.isDirty());
          }
        }
 catch (        AssertionFailedException ex) {
          MessageDialogWithToggle.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
);
    optionEditor.minimumWidth=WIDTH1_CELL;
    optionEditor.horizontalAlignment=SWT.CENTER;
    optionEditor.setEditor(optionLabel,indicatorItem,1);
    TreeEditor delEditor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.ACTION_DELETE));
    delLabel.setToolTipText(""String_Node_Str"");
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_KEY);
        deleteIndicatorItems(columnIndicator,unit);
        if (indicatorItem.getParentItem() != null && indicatorItem.getParentItem().getData(INDICATOR_UNIT_KEY) != null) {
          setElements(columnIndicators);
        }
 else {
          removeItemBranch(indicatorItem);
        }
      }
    }
);
    delEditor.minimumWidth=WIDTH1_CELL;
    delEditor.horizontalAlignment=SWT.CENTER;
    delEditor.setEditor(delLabel,indicatorItem,2);
    indicatorItem.setData(ITEM_EDITOR_KEY,new TreeEditor[]{optionEditor,delEditor});
    if (indicatorEnum.hasChildren()) {
      indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_KEY));
      createIndicatorItems(indicatorItem,indicatorUnit.getChildren());
    }
  }
}",0.9096321496916862
140796,"/** 
 * Handle the category IndicatorEnum.
 */
private void processCategoryIndicator(){
  List<IndicatorEnum> categoryEnumList=new ArrayList<IndicatorEnum>();
  listCopy(categoryEnumList,flatIndicatorEnumList);
  Iterator<IndicatorEnum> iterator=flatIndicatorEnumList.iterator();
  List<IndicatorEnum> currentCountsChildren=new ArrayList<IndicatorEnum>();
  while (iterator.hasNext()) {
    IndicatorEnum indEnum=iterator.next();
    if (countsEnumChildren.contains(indEnum)) {
      currentCountsChildren.add(indEnum);
      continue;
    }
    if ((indEnum != IndicatorEnum.CountsIndicatorEnum) && indEnum.hasChildren()) {
      for (      IndicatorEnum childrenEnum : indEnum.getChildren()) {
        categoryEnumList.remove(childrenEnum);
      }
    }
  }
  if (currentCountsChildren.size() == countsEnumChildren.size()) {
    categoryEnumList.removeAll(currentCountsChildren);
  }
 else {
    categoryEnumList.remove(IndicatorEnum.CountsIndicatorEnum);
  }
  currentindicatorUnits=createCategoryIndicatorUnits(categoryEnumList.toArray(new IndicatorEnum[categoryEnumList.size()]));
}","/** 
 * Handle the category IndicatorEnum.
 */
private void processCategoryIndicator(){
  List<IndicatorEnum> categoryEnumList=new ArrayList<IndicatorEnum>();
  listCopy(categoryEnumList,flatIndicatorEnumList);
  Iterator<IndicatorEnum> iterator=flatIndicatorEnumList.iterator();
  List<IndicatorEnum> currentCountsChildren=new ArrayList<IndicatorEnum>();
  while (iterator.hasNext()) {
    IndicatorEnum indEnum=iterator.next();
    if (countsEnumChildren.contains(indEnum)) {
      currentCountsChildren.add(indEnum);
      continue;
    }
    if ((indEnum != IndicatorEnum.CountsIndicatorEnum) && indEnum.hasChildren()) {
      for (      IndicatorEnum childrenEnum : indEnum.getChildren()) {
        categoryEnumList.remove(childrenEnum);
      }
    }
  }
  if (currentCountsChildren.size() == countsEnumChildren.size() && flatIndicatorEnumList.contains(IndicatorEnum.CountsIndicatorEnum)) {
    categoryEnumList.removeAll(currentCountsChildren);
  }
 else {
    categoryEnumList.remove(IndicatorEnum.CountsIndicatorEnum);
  }
  currentindicatorUnits=createCategoryIndicatorUnits(categoryEnumList.toArray(new IndicatorEnum[categoryEnumList.size()]));
}",0.9692650334075724
140797,"private void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  for (  ModelElement modelElement : analysisHandler.getAnalyzedColumns()) {
    final TdColumn column=SwitchHelpers.COLUMN_SWITCH.doSwitch(modelElement);
    final Collection<Indicator> indicators=analysisHandler.getIndicatorLeaves(column);
    final ColumnIndicator columnIndicator=new ColumnIndicator(column);
    columnIndicator.setIndicators(indicators.toArray(new Indicator[indicators.size()]));
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(""String_Node_Str"" + column.getName());
    exComp.setLayout(new GridLayout());
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              for (              ImageDescriptor descriptor : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
                ImageHyperlink image=toolkit.createImageHyperlink(comp,SWT.WRAP);
                image.setImage(descriptor.createImage());
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(null).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
      exComp.setExpanded(true);
    }
    exComp.setClient(comp);
    exComp.addExpansionListener(new ExpansionAdapter(){
      public void expansionStateChanged(      ExpansionEvent e){
        form.reflow(true);
      }
    }
);
  }
}","private void createPreviewCharts(final ScrolledForm form,final Composite composite,final boolean isCreate){
  for (  ModelElement modelElement : analysisHandler.getAnalyzedColumns()) {
    final TdColumn column=SwitchHelpers.COLUMN_SWITCH.doSwitch(modelElement);
    final Collection<Indicator> indicators=analysisHandler.getIndicators(column);
    final ColumnIndicator columnIndicator=new ColumnIndicator(column);
    columnIndicator.setIndicators(indicators.toArray(new Indicator[indicators.size()]));
    ExpandableComposite exComp=toolkit.createExpandableComposite(composite,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    exComp.setText(""String_Node_Str"" + column.getName());
    exComp.setLayout(new GridLayout());
    final Composite comp=toolkit.createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (columnIndicator.getIndicators().length != 0) {
      IRunnableWithProgress rwp=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"" + column.getName(),IProgressMonitor.UNKNOWN);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              for (              ImageDescriptor descriptor : IndicatorChartFactory.createChart(columnIndicator,isCreate)) {
                ImageHyperlink image=toolkit.createImageHyperlink(comp,SWT.WRAP);
                image.setImage(descriptor.createImage());
              }
            }
          }
);
          monitor.done();
        }
      }
;
      try {
        new ProgressMonitorDialog(null).run(true,false,rwp);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
      exComp.setExpanded(true);
    }
    exComp.setClient(comp);
    exComp.addExpansionListener(new ExpansionAdapter(){
      public void expansionStateChanged(      ExpansionEvent e){
        form.reflow(true);
      }
    }
);
  }
}",0.9987831589194452
140798,"/** 
 * @param form
 * @param toolkit
 * @param topComp
 */
void createInformationSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,""String_Node_Str"",false,""String_Node_Str"");
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout(2,false));
  Label loginLabel=new Label(sectionClient,SWT.NONE);
  loginLabel.setText(""String_Node_Str"");
  loginText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(loginText);
  Label passwordLabel=new Label(sectionClient,SWT.NONE);
  passwordLabel.setText(""String_Node_Str"");
  passwordText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(passwordText);
  String loginValue=TaggedValueHelper.getValue(USER_TAG,tdDataProvider);
  loginText.setText(loginValue == null ? PluginConstant.EMPTY_STRING : loginValue);
  String passwordValue=TaggedValueHelper.getValue(PASSWORD_TAG,tdDataProvider);
  passwordText.setText(passwordValue == null ? PluginConstant.EMPTY_STRING : passwordValue);
  Label urlLabel=new Label(sectionClient,SWT.NONE);
  urlLabel.setText(""String_Node_Str"");
  Text urlText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(urlText);
  TypedReturnCode<TdProviderConnection> trc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  String urlValue=(trc.isOk()) ? trc.getObject().getConnectionString() : PluginConstant.EMPTY_STRING;
  urlText.setText(urlValue == null ? PluginConstant.EMPTY_STRING : urlValue);
  urlText.setEnabled(false);
  ModifyListener listener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      fireTextChange();
    }
  }
;
  loginText.addModifyListener(listener);
  passwordText.addModifyListener(listener);
  section.setClient(sectionClient);
}","/** 
 * @param form
 * @param toolkit
 * @param topComp
 */
void createInformationSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,""String_Node_Str"",false,""String_Node_Str"");
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout(2,false));
  Label loginLabel=new Label(sectionClient,SWT.NONE);
  loginLabel.setText(""String_Node_Str"");
  loginText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(loginText);
  Label passwordLabel=new Label(sectionClient,SWT.NONE);
  passwordLabel.setText(""String_Node_Str"");
  passwordText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(passwordText);
  TdProviderConnection connection=DataProviderHelper.getTdProviderConnection(tdDataProvider).getObject();
  String loginValue=TaggedValueHelper.getValue(USER_TAG,connection);
  loginText.setText(loginValue == null ? PluginConstant.EMPTY_STRING : loginValue);
  String passwordValue=TaggedValueHelper.getValue(PASSWORD_TAG,connection);
  passwordText.setText(passwordValue == null ? PluginConstant.EMPTY_STRING : passwordValue);
  Label urlLabel=new Label(sectionClient,SWT.NONE);
  urlLabel.setText(""String_Node_Str"");
  urlText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(urlText);
  TypedReturnCode<TdProviderConnection> trc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  String urlValue=(trc.isOk()) ? trc.getObject().getConnectionString() : PluginConstant.EMPTY_STRING;
  urlText.setText(urlValue == null ? PluginConstant.EMPTY_STRING : urlValue);
  urlText.setEnabled(false);
  Button checkBtn=toolkit.createButton(sectionClient,""String_Node_Str"",SWT.NONE);
  GridData gd=new GridData();
  gd.horizontalSpan=2;
  gd.verticalSpan=20;
  gd.horizontalAlignment=SWT.CENTER;
  checkBtn.setLayoutData(gd);
  checkBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ReturnCode code=checkDBConnection();
      if (code.isOk()) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
 else {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"" + code.getMessage());
      }
    }
  }
);
  ModifyListener listener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      fireTextChange();
    }
  }
;
  loginText.addModifyListener(listener);
  passwordText.addModifyListener(listener);
  section.setClient(sectionClient);
}",0.8252212389380531
140799,"@Override protected void fireTextChange(){
  this.tdDataProvider.setName(nameText.getText());
  TaggedValueHelper.setPurpose(purposeText.getText(),this.tdDataProvider);
  TaggedValueHelper.setDescription(descriptionText.getText(),this.tdDataProvider);
  TaggedValueHelper.setAuthor(this.tdDataProvider,authorText.getText());
  TaggedValueHelper.setDevStatus(this.tdDataProvider,DevelopmentStatus.get(statusCombo.getText()));
  TaggedValueHelper.setTaggedValue(tdDataProvider,USER_TAG,loginText.getText());
  TaggedValueHelper.setTaggedValue(tdDataProvider,PASSWORD_TAG,passwordText.getText());
}","@Override protected void fireTextChange(){
  this.tdDataProvider.setName(nameText.getText());
  TaggedValueHelper.setPurpose(purposeText.getText(),this.tdDataProvider);
  TaggedValueHelper.setDescription(descriptionText.getText(),this.tdDataProvider);
  TaggedValueHelper.setAuthor(this.tdDataProvider,authorText.getText());
  TaggedValueHelper.setDevStatus(this.tdDataProvider,DevelopmentStatus.get(statusCombo.getText()));
  TdProviderConnection connection=DataProviderHelper.getTdProviderConnection(tdDataProvider).getObject();
  TaggedValueHelper.setTaggedValue(connection,USER_TAG,loginText.getText());
  TaggedValueHelper.setTaggedValue(connection,PASSWORD_TAG,passwordText.getText());
}",0.8416149068322981
140800,"public String getText(Object element){
  if (element instanceof TableFolderNode) {
    TableFolderNode node=(TableFolderNode)element;
    if (node.isLoaded()) {
      Package catalogOrSchema=PackageHelper.getCatalogOrSchema(node.getParent());
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + PackageHelper.getTables(catalogOrSchema).size()+ ""String_Node_Str"";
    }
 else {
      return ((IFolderNode)element).getName();
    }
  }
  if (element instanceof ViewFolderNode) {
    ViewFolderNode node=(ViewFolderNode)element;
    if (node.isLoaded()) {
      Package catalogOrSchema=PackageHelper.getCatalogOrSchema(node.getParent());
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + PackageHelper.getViews(catalogOrSchema).size()+ ""String_Node_Str"";
    }
 else {
      return ((IFolderNode)element).getName();
    }
  }
  if (element instanceof ColumnFolderNode) {
    ColumnFolderNode node=(ColumnFolderNode)element;
    if (node.isLoaded()) {
      TdTable table=SwitchHelpers.TABLE_SWITCH.doSwitch(node.getParent());
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + TableHelper.getColumns(table).size()+ ""String_Node_Str"";
    }
 else {
      return ((IFolderNode)element).getName();
    }
  }
  return super.getText(element);
}","public String getText(Object element){
  if (element instanceof TableFolderNode) {
    TableFolderNode node=(TableFolderNode)element;
    if (node.isLoaded()) {
      Package catalogOrSchema=PackageHelper.getCatalogOrSchema(node.getParent());
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + PackageHelper.getTables(catalogOrSchema).size()+ ""String_Node_Str"";
    }
 else {
      return ((IFolderNode)element).getName();
    }
  }
  if (element instanceof ViewFolderNode) {
    ViewFolderNode node=(ViewFolderNode)element;
    if (node.isLoaded()) {
      Package catalogOrSchema=PackageHelper.getCatalogOrSchema(node.getParent());
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + PackageHelper.getViews(catalogOrSchema).size()+ ""String_Node_Str"";
    }
 else {
      return ((IFolderNode)element).getName();
    }
  }
  if (element instanceof ColumnFolderNode) {
    ColumnFolderNode node=(ColumnFolderNode)element;
    if (node.isLoaded()) {
      ColumnSet table=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(node.getParent());
      return ((IFolderNode)element).getName() + ""String_Node_Str"" + ColumnSetHelper.getColumns(table).size()+ ""String_Node_Str"";
    }
 else {
      return ((IFolderNode)element).getName();
    }
  }
  return super.getText(element);
}",0.9833655705996132
140801,"@Override public void run(){
  IWorkbenchWindow aww=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  CreatePatternWizard fileWizard=new CreatePatternWizard(folder);
  WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),fileWizard);
  fileWizard.setWindowTitle(getText());
  if (WizardDialog.OK == dialog.open()) {
    try {
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  CreatePatternWizard fileWizard=new CreatePatternWizard(folder);
  WizardDialog dialog=new WizardDialog(Display.getDefault().getActiveShell(),fileWizard);
  fileWizard.setWindowTitle(getText());
  if (WizardDialog.OK == dialog.open()) {
    try {
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}",0.9141583054626532
140802,"@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  expression.setLanguage(""String_Node_Str"");
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  System.out.println(""String_Node_Str"" + name + ""String_Node_Str""+ expr);
  EMFUtil util=new EMFUtil();
  IPath location=folder.getLocation();
  location=location.append(name);
  location=location.addFileExtension(""String_Node_Str"");
  System.out.println(location);
  util.addPoolToResourceSet(new File(location.toPortableString()),pattern);
  util.save();
  return true;
}","@Override public boolean performFinish(){
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  String name=AbstractWizardPage.getConnectionParams().getName();
  pattern.setName(name);
  RegularExpression regularExpr=PatternFactory.eINSTANCE.createRegularExpression();
  Expression expression=CoreFactory.eINSTANCE.createExpression();
  String expr=mPage2.getNameText().getText();
  expression.setBody(expr);
  expression.setLanguage(""String_Node_Str"");
  regularExpr.setExpression(expression);
  pattern.getComponents().add(regularExpr);
  EMFUtil util=new EMFUtil();
  IPath location=folder.getLocation();
  location=location.append(name);
  location=location.addFileExtension(NewSourcePatternActionProvider.EXTENSION_PATTERN);
  util.addPoolToResourceSet(new File(location.toPortableString()),pattern);
  util.save();
  return true;
}",0.8838526912181303
140803,"@Override public void run(){
  IFolder sourceFiles=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.SOURCE_FILES);
  for (  IFile file : folder) {
    if (MessageDialog.openConfirm(new Shell(),""String_Node_Str"",""String_Node_Str"" + file.getName())) {
      try {
        if (file.exists()) {
          file.delete(true,null);
        }
        sourceFiles.refreshLocal(IResource.DEPTH_INFINITE,null);
      }
 catch (      CoreException e) {
        e.printStackTrace();
      }
    }
  }
}","@Override public void run(){
  IFolder sourceFiles=ResourcesPlugin.getWorkspace().getRoot().getProject(DQStructureManager.LIBRARIES).getFolder(DQStructureManager.SOURCE_FILES);
  for (  IFile file : folder) {
    if (MessageDialog.openConfirm(new Shell(),""String_Node_Str"",""String_Node_Str"" + file.getName())) {
      try {
        if (file.exists()) {
          file.delete(true,null);
        }
      }
 catch (      CoreException e) {
        e.printStackTrace();
      }
    }
  }
  try {
    sourceFiles.refreshLocal(IResource.DEPTH_INFINITE,null);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
}",0.8938356164383562
140804,"/** 
 * DOC qzhang Comment method ""computeSelectedFiles"".
 * @param treeSelection
 * @param selectedFiles
 * @return
 */
public static boolean computeSelectedFiles(TreeSelection treeSelection,List<IFile> selectedFiles){
  boolean isSelectFile=false;
  Iterator iterator=treeSelection.iterator();
  while (iterator.hasNext()) {
    Object obj=iterator.next();
    if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (file.getFileExtension().equalsIgnoreCase(""String_Node_Str"")) {
        selectedFiles.add(file);
      }
    }
 else {
      isSelectFile=true;
      break;
    }
  }
  return isSelectFile;
}","/** 
 * DOC qzhang Comment method ""computeSelectedFiles"".
 * @param treeSelection
 * @param selectedFiles
 * @return
 */
public static boolean computeSelectedFiles(TreeSelection treeSelection,List<IFile> selectedFiles){
  boolean isSelectFile=false;
  Iterator iterator=treeSelection.iterator();
  while (iterator.hasNext()) {
    Object obj=iterator.next();
    if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (file.getFileExtension().equalsIgnoreCase(EXTENSION_PATTERN)) {
        selectedFiles.add(file);
      }
    }
 else {
      isSelectFile=true;
      break;
    }
  }
  return isSelectFile;
}",0.9758064516129032
140805,"public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  List<IFile> selectedFiles=new ArrayList<IFile>();
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      selectedFolderName=((IFolder)obj).getName();
      if (selectedFolderName.equals(DQStructureManager.PATTERNS)) {
        menu.add(new CreatePatternAction((IFolder)obj));
      }
    }
 else     if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (file.getFileExtension().equalsIgnoreCase(""String_Node_Str"")) {
        menu.add(new RenameSqlFileAction((IFile)obj));
      }
    }
  }
  boolean isSelectFile=computeSelectedFiles(treeSelection,selectedFiles);
  if (!isSelectFile && !selectedFiles.isEmpty()) {
    menu.add(new OpenSqlFileAction(selectedFiles));
    menu.add(new DeleteSqlFileAction(selectedFiles));
  }
}","public void fillContextMenu(IMenuManager menu){
  TreeSelection treeSelection=((TreeSelection)this.getContext().getSelection());
  List<IFile> selectedFiles=new ArrayList<IFile>();
  if (treeSelection.size() == 1) {
    Object obj=treeSelection.getFirstElement();
    if (obj instanceof IFolder) {
      selectedFolderName=((IFolder)obj).getName();
      if (selectedFolderName.equals(DQStructureManager.PATTERNS)) {
        menu.add(new CreatePatternAction((IFolder)obj));
      }
    }
 else     if (obj instanceof IFile) {
      IFile file=(IFile)obj;
      if (file.getFileExtension().equalsIgnoreCase(EXTENSION_PATTERN)) {
      }
    }
  }
  boolean isSelectFile=computeSelectedFiles(treeSelection,selectedFiles);
  if (!isSelectFile && !selectedFiles.isEmpty()) {
    menu.add(new DeletePatternAction(selectedFiles));
  }
}",0.9077532541029996
140806,"protected void addPages(){
  masterPage=new ConnnectionInfoPage(this,""String_Node_Str"",""String_Node_Str"");
  try {
    addPage(masterPage);
  }
 catch (  PartInitException e) {
    ExceptionHandler.process(e,Level.ERROR);
  }
}","protected void addPages(){
  masterPage=new ConnnectionInfoPage(this,""String_Node_Str"",""String_Node_Str"");
  try {
    addPage(masterPage);
  }
 catch (  PartInitException e) {
    MessageBoxExceptionHandler.process(e);
  }
}",0.9513274336283186
140807,"/** 
 * @param form
 * @param toolkit
 * @param topComp
 */
void createInformationSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,""String_Node_Str"",false,""String_Node_Str"");
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout(2,false));
  Label loginLabel=new Label(sectionClient,SWT.NONE);
  loginLabel.setText(""String_Node_Str"");
  loginText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(loginText);
  Label passwordLabel=new Label(sectionClient,SWT.NONE);
  passwordLabel.setText(""String_Node_Str"");
  passwordText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(passwordText);
  TdProviderConnection connection=DataProviderHelper.getTdProviderConnection(tdDataProvider).getObject();
  String loginValue=TaggedValueHelper.getValue(USER_TAG,connection);
  loginText.setText(loginValue == null ? PluginConstant.EMPTY_STRING : loginValue);
  String passwordValue=TaggedValueHelper.getValue(PASSWORD_TAG,connection);
  passwordText.setText(passwordValue == null ? PluginConstant.EMPTY_STRING : passwordValue);
  Label urlLabel=new Label(sectionClient,SWT.NONE);
  urlLabel.setText(""String_Node_Str"");
  urlText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(urlText);
  TypedReturnCode<TdProviderConnection> trc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  String urlValue=(trc.isOk()) ? trc.getObject().getConnectionString() : PluginConstant.EMPTY_STRING;
  urlText.setText(urlValue == null ? PluginConstant.EMPTY_STRING : urlValue);
  urlText.setEnabled(false);
  Button checkBtn=toolkit.createButton(sectionClient,""String_Node_Str"",SWT.NONE);
  GridData gd=new GridData();
  gd.horizontalSpan=2;
  gd.verticalSpan=20;
  gd.horizontalAlignment=SWT.CENTER;
  checkBtn.setLayoutData(gd);
  checkBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ReturnCode code=checkDBConnection();
      if (code.isOk()) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
 else {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"" + code.getMessage());
      }
    }
  }
);
  ModifyListener listener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      fireTextChange();
    }
  }
;
  loginText.addModifyListener(listener);
  passwordText.addModifyListener(listener);
  section.setClient(sectionClient);
}","/** 
 * @param form
 * @param toolkit
 * @param topComp
 */
void createInformationSection(final ScrolledForm form,Composite topComp){
  Section section=createSection(form,topComp,""String_Node_Str"",false,""String_Node_Str"");
  Composite sectionClient=toolkit.createComposite(section);
  sectionClient.setLayout(new GridLayout(2,false));
  Label loginLabel=new Label(sectionClient,SWT.NONE);
  loginLabel.setText(""String_Node_Str"");
  loginText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(loginText);
  Label passwordLabel=new Label(sectionClient,SWT.NONE);
  passwordLabel.setText(""String_Node_Str"");
  passwordText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(passwordText);
  TdProviderConnection connection=DataProviderHelper.getTdProviderConnection(tdDataProvider).getObject();
  String loginValue=TaggedValueHelper.getValue(USER_TAG,connection);
  loginText.setText(loginValue == null ? PluginConstant.EMPTY_STRING : loginValue);
  String passwordValue=TaggedValueHelper.getValue(PASSWORD_TAG,connection);
  passwordText.setText(passwordValue == null ? PluginConstant.EMPTY_STRING : passwordValue);
  Label urlLabel=new Label(sectionClient,SWT.NONE);
  urlLabel.setText(""String_Node_Str"");
  urlText=new Text(sectionClient,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(urlText);
  TypedReturnCode<TdProviderConnection> trc=DataProviderHelper.getTdProviderConnection(tdDataProvider);
  String urlValue=(trc.isOk()) ? trc.getObject().getConnectionString() : PluginConstant.EMPTY_STRING;
  urlText.setText(urlValue == null ? PluginConstant.EMPTY_STRING : urlValue);
  urlText.setEnabled(false);
  ModifyListener listener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
      fireTextChange();
    }
  }
;
  loginText.addModifyListener(listener);
  passwordText.addModifyListener(listener);
  section.setClient(sectionClient);
}",0.8632126598742683
140808,"@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  final ScrolledForm form=managedForm.getForm();
  this.metadataSection.setText(""String_Node_Str"");
  this.metadataSection.setDescription(""String_Node_Str"");
  createInformationSection(form,topComp);
}","@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  final ScrolledForm form=managedForm.getForm();
  this.metadataSection.setText(""String_Node_Str"");
  this.metadataSection.setDescription(""String_Node_Str"");
  createInformationSection(form,topComp);
  Button checkBtn=toolkit.createButton(topComp,""String_Node_Str"",SWT.NONE);
  GridData gd=new GridData();
  gd.verticalSpan=20;
  gd.horizontalAlignment=SWT.CENTER;
  checkBtn.setLayoutData(gd);
  checkBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ReturnCode code=checkDBConnection();
      if (code.isOk()) {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"");
      }
 else {
        MessageDialog.openInformation(null,""String_Node_Str"",""String_Node_Str"" + code.getMessage());
      }
    }
  }
);
}",0.5081699346405228
140809,"private void createIndicatorItems(final TreeItem treeItem,IndicatorUnit[] indicatorTypeMappings){
  for (  IndicatorUnit indicatorMapping : indicatorTypeMappings) {
    final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
    final IndicatorUnit typeMapping=indicatorMapping;
    final IndicatorEnum indicatorEnum=indicatorMapping.getType();
    indicatorItem.setData(COLUMN_INDICATOR_VALUE,treeItem.getData(COLUMN_INDICATOR_VALUE));
    indicatorItem.setData(INDICATOR_UNIT_VALUE,typeMapping);
    indicatorItem.setText(0,indicatorMapping.getType().getLabel());
    TreeEditor editor;
    if (indicatorEnum.hasChildren()) {
      editor=new TreeEditor(tree);
      Label optionLabel=new Label(tree,SWT.NONE);
      optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
      optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
      optionLabel.setToolTipText(""String_Node_Str"");
      optionLabel.pack();
      optionLabel.setData(indicatorMapping);
      optionLabel.addMouseListener(new MouseAdapter(){
        @Override public void mouseDown(        MouseEvent e){
          final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
          final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis){
            @Override public void dispose(){
              activeCount=0;
              super.dispose();
            }
          }
;
          try {
            WizardDialog dialog=new WizardDialog(null,wizard){
              @Override public void openTray(              DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
                super.openTray(tray);
                if (tray instanceof HelpTray) {
                  HelpTray helpTray=(HelpTray)tray;
                  ReusableHelpPart helpPart=helpTray.getHelpPart();
                  helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
                }
              }
            }
;
            dialog.setPageSize(300,400);
            dialog.create();
            dialog.getShell().addShellListener(new ShellAdapter(){
              @Override public void shellActivated(              ShellEvent e){
                String string=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
                if (activeCount < 2) {
                  Point point=e.widget.getDisplay().getCursorLocation();
                  IContext context=HelpSystem.getContext(string);
                  IHelpResource[] relatedTopics=context.getRelatedTopics();
                  for (                  IHelpResource topic : relatedTopics) {
                    topic.getLabel();
                    topic.getHref();
                  }
                  IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
                  helpSystem.displayContext(context,point.x + 15,point.y);
                  activeCount++;
                  ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
                  if (lastActiveInstance != null) {
                    String href=IndicatorParameterTypes.getHref(indicator);
                    if (href != null) {
                      lastActiveInstance.showURL(href);
                    }
                  }
                }
              }
            }
);
            int open=dialog.open();
            if (Window.OK == open) {
              setDirty(wizard.isDirty());
            }
          }
 catch (          AssertionFailedException ex) {
            MessageDialogWithToggle.openInformation(null,""String_Node_Str"",""String_Node_Str"");
          }
        }
      }
);
      editor.minimumWidth=WIDTH1_CELL;
      editor.horizontalAlignment=SWT.CENTER;
      editor.setEditor(optionLabel,indicatorItem,1);
    }
    editor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.ACTION_DELETE));
    delLabel.setToolTipText(""String_Node_Str"");
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_VALUE);
        deleteIndicatorItems(columnIndicator,typeMapping);
        setElements(columnIndicators);
      }
    }
);
    editor.minimumWidth=WIDTH1_CELL;
    editor.horizontalAlignment=SWT.CENTER;
    editor.setEditor(delLabel,indicatorItem,2);
    if (indicatorEnum.hasChildren()) {
      indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_VALUE));
      createIndicatorItems(indicatorItem,indicatorMapping.getChildren());
    }
  }
}","private void createIndicatorItems(final TreeItem treeItem,IndicatorUnit[] indicatorTypeMappings){
  for (  IndicatorUnit indicatorMapping : indicatorTypeMappings) {
    final TreeItem indicatorItem=new TreeItem(treeItem,SWT.NONE);
    final IndicatorUnit typeMapping=indicatorMapping;
    final IndicatorEnum indicatorEnum=indicatorMapping.getType();
    indicatorItem.setData(COLUMN_INDICATOR_VALUE,treeItem.getData(COLUMN_INDICATOR_VALUE));
    indicatorItem.setData(INDICATOR_UNIT_VALUE,typeMapping);
    indicatorItem.setText(0,indicatorMapping.getType().getLabel());
    TreeEditor editor;
    editor=new TreeEditor(tree);
    Label optionLabel=new Label(tree,SWT.NONE);
    optionLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    optionLabel.setImage(ImageLib.getImage(ImageLib.INDICATOR_OPTION));
    optionLabel.setToolTipText(""String_Node_Str"");
    optionLabel.pack();
    optionLabel.setData(indicatorMapping);
    optionLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        final IndicatorUnit indicator=(IndicatorUnit)((Label)e.getSource()).getData();
        final IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicator,analysis){
          @Override public void dispose(){
            activeCount=0;
            super.dispose();
          }
        }
;
        try {
          WizardDialog dialog=new WizardDialog(null,wizard){
            @Override public void openTray(            DialogTray tray) throws IllegalStateException, UnsupportedOperationException {
              super.openTray(tray);
              if (tray instanceof HelpTray) {
                HelpTray helpTray=(HelpTray)tray;
                ReusableHelpPart helpPart=helpTray.getHelpPart();
                helpPart.getForm().getForm().notifyListeners(SWT.Activate,new Event());
              }
            }
          }
;
          dialog.setPageSize(300,400);
          dialog.create();
          dialog.getShell().addShellListener(new ShellAdapter(){
            @Override public void shellActivated(            ShellEvent e){
              String string=HelpPlugin.PLUGIN_ID + HelpPlugin.INDICATOR_OPTION_HELP_ID;
              if (activeCount < 2) {
                Point point=e.widget.getDisplay().getCursorLocation();
                IContext context=HelpSystem.getContext(string);
                IHelpResource[] relatedTopics=context.getRelatedTopics();
                for (                IHelpResource topic : relatedTopics) {
                  topic.getLabel();
                  topic.getHref();
                }
                IWorkbenchHelpSystem helpSystem=PlatformUI.getWorkbench().getHelpSystem();
                helpSystem.displayContext(context,point.x + 15,point.y);
                activeCount++;
                ReusableHelpPart lastActiveInstance=ReusableHelpPart.getLastActiveInstance();
                if (lastActiveInstance != null) {
                  String href=IndicatorParameterTypes.getHref(indicator);
                  if (href != null) {
                    lastActiveInstance.showURL(href);
                  }
                }
              }
            }
          }
);
          int open=dialog.open();
          if (Window.OK == open) {
            setDirty(wizard.isDirty());
          }
        }
 catch (        AssertionFailedException ex) {
          MessageDialogWithToggle.openInformation(null,""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
);
    editor.minimumWidth=WIDTH1_CELL;
    editor.horizontalAlignment=SWT.CENTER;
    editor.setEditor(optionLabel,indicatorItem,1);
    editor=new TreeEditor(tree);
    Label delLabel=new Label(tree,SWT.NONE);
    delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
    delLabel.setImage(ImageLib.getImage(ImageLib.ACTION_DELETE));
    delLabel.setToolTipText(""String_Node_Str"");
    delLabel.pack();
    delLabel.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        ColumnIndicator columnIndicator=(ColumnIndicator)treeItem.getData(COLUMN_INDICATOR_VALUE);
        deleteIndicatorItems(columnIndicator,typeMapping);
        setElements(columnIndicators);
      }
    }
);
    editor.minimumWidth=WIDTH1_CELL;
    editor.horizontalAlignment=SWT.CENTER;
    editor.setEditor(delLabel,indicatorItem,2);
    if (indicatorEnum.hasChildren()) {
      indicatorItem.setData(treeItem.getData(COLUMN_INDICATOR_VALUE));
      createIndicatorItems(indicatorItem,indicatorMapping.getChildren());
    }
  }
}",0.9704967278189036
140810,"/** 
 * Handle the category IndicatorEnum.
 */
private void processCategoryIndicator(){
  List<IndicatorEnum> categoryEnumList=new ArrayList<IndicatorEnum>();
  listCopy(categoryEnumList,flatIndicatorEnumList);
  Iterator<IndicatorEnum> iterator=flatIndicatorEnumList.iterator();
  while (iterator.hasNext()) {
    IndicatorEnum indEnum=iterator.next();
    if (indEnum.hasChildren()) {
      for (      IndicatorEnum childrenEnum : indEnum.getChildren()) {
        categoryEnumList.remove(childrenEnum);
      }
    }
  }
  currentindicatorUnits=createCategoryIndicatorUnits(categoryEnumList.toArray(new IndicatorEnum[categoryEnumList.size()]));
}","/** 
 * Handle the category IndicatorEnum.
 */
private void processCategoryIndicator(){
  List<IndicatorEnum> categoryEnumList=new ArrayList<IndicatorEnum>();
  listCopy(categoryEnumList,flatIndicatorEnumList);
  Iterator<IndicatorEnum> iterator=flatIndicatorEnumList.iterator();
  List<IndicatorEnum> currentCountsChildren=new ArrayList<IndicatorEnum>();
  while (iterator.hasNext()) {
    IndicatorEnum indEnum=iterator.next();
    if (countsEnumChildren.contains(indEnum)) {
      currentCountsChildren.add(indEnum);
      continue;
    }
    if ((indEnum != IndicatorEnum.CountsIndicatorEnum) && indEnum.hasChildren()) {
      for (      IndicatorEnum childrenEnum : indEnum.getChildren()) {
        categoryEnumList.remove(childrenEnum);
      }
    }
  }
  if (currentCountsChildren.size() == countsEnumChildren.size()) {
    categoryEnumList.removeAll(currentCountsChildren);
  }
 else {
    categoryEnumList.remove(IndicatorEnum.CountsIndicatorEnum);
  }
  currentindicatorUnits=createCategoryIndicatorUnits(categoryEnumList.toArray(new IndicatorEnum[categoryEnumList.size()]));
}",0.7235023041474654
140811,"/** 
 * Get an appropriate ImageRepresentationHandler for the specified image segment.
 * @param segment the image segment specifying the image characteristics tobe read.
 * @return a handler for the segment, or null if an appropriate handlercould not be found.
 */
public static ImageRepresentationHandler forImageSegment(final ImageSegment segment){
switch (segment.getImageRepresentation()) {
case NOTFORDISPLAY:
    return new NoDisplayImageRepresentationHandler();
case MONOCHROME:
  return getMonoImageRepresentationHandler(segment,0);
case RGBTRUECOLOUR:
return getRgbImageRepresentationHandler(segment);
case MULTIBAND:
return getHandlerForMultiband(segment);
case RGBLUT:
return getRgbLUTImageRepresentationHandler(segment,0);
default :
return null;
}
}","/** 
 * Get an appropriate ImageRepresentationHandler for the specified image segment.
 * @param segment the image segment specifying the image characteristics tobe read.
 * @return a handler for the segment, or a ""no render"" handler if anappropriate handler could not be found.
 */
public static ImageRepresentationHandler forImageSegment(final ImageSegment segment){
switch (segment.getImageRepresentation()) {
case MONOCHROME:
    return getMonoImageRepresentationHandler(segment,0);
case RGBTRUECOLOUR:
  return getRgbImageRepresentationHandler(segment);
case MULTIBAND:
return getHandlerForMultiband(segment);
case RGBLUT:
return getRgbLUTImageRepresentationHandler(segment,0);
case NOTFORDISPLAY:
default :
return new NoDisplayImageRepresentationHandler();
}
}",0.8363874345549738
140812,"@Override public BufferedImage createBufferedImage(int width,int height){
  return new BufferedImage(width,height,BufferedImage.TYPE_BYTE_GRAY);
}","@Override public final BufferedImage createBufferedImage(final int width,final int height){
  return new BufferedImage(width,height,BufferedImage.TYPE_BYTE_GRAY);
}",0.9419354838709676
140813,"@Override public void renderPadPixel(ImageMask imageMask,DataBuffer data,int pixelIndex){
  return;
}","@Override public final void renderPadPixel(final ImageMask imageMask,final DataBuffer data,final int pixelIndex){
  return;
}",0.8938053097345132
140814,"@Override public void renderPixelBand(DataBuffer dataBuffer,int pixelIndex,ImageInputStream imageInputStream,int bandIndex) throws IOException {
  return;
}","@Override public void renderPixelBand(final DataBuffer dataBuffer,final int pixelIndex,final ImageInputStream imageInputStream,final int bandIndex) throws IOException {
}",0.8957055214723927
140815,"private void readBaseHeaderDataExtensionSegmentParts() throws ParseException {
  readNUMDES();
  for (int i=0; i < numberDataExtensionSegments; ++i) {
    readLDSH();
    readLD();
  }
}","private void readBaseHeaderDataExtensionSegmentParts() throws ParseException {
  readNUMDES();
  for (int i=0; i < numberDataExtensionSegments; ++i) {
    readLDSH(i);
    readLD(i);
  }
}",0.9946524064171124
140816,"private void readLDSH() throws ParseException {
  nitf.getDataExtensionSegmentSubHeaderLengths().add(reader.readBytesAsInteger(NitfConstants.LDSH_LENGTH));
}","private void readLDSH(final int i) throws ParseException {
  if (i < nitf.getDataExtensionSegmentDataLengths().size()) {
    nitf.getDataExtensionSegmentSubHeaderLengths().set(i,reader.readBytesAsInteger(NitfConstants.LDSH_LENGTH));
  }
 else {
    nitf.getDataExtensionSegmentSubHeaderLengths().add(reader.readBytesAsInteger(NitfConstants.LDSH_LENGTH));
  }
}",0.5918762088974855
140817,"private void readLD() throws ParseException {
  nitf.getDataExtensionSegmentDataLengths().add(reader.readBytesAsInteger(NitfConstants.LD_LENGTH));
}","private void readLD(final int i) throws ParseException {
  if (i < nitf.getDataExtensionSegmentDataLengths().size()) {
    nitf.getDataExtensionSegmentDataLengths().set(i,reader.readBytesAsInteger(NitfConstants.LD_LENGTH));
  }
 else {
    nitf.getDataExtensionSegmentDataLengths().add(reader.readBytesAsInteger(NitfConstants.LD_LENGTH));
  }
}",0.5853658536585366
140818,"/** 
 * Read the data extension segment data. The reader is assumed to be positioned at the end of the segment header before this call, and will be positioned at the start of the next header after this call.
 * @param dataExtensionSegmentHeader the header for the data extension segment that is to be read
 * @param reader the reader to use to read the data.
 * @throws ParseException on failure.
 */
protected final void readDataExtensionSegmentData(final NitfDataExtensionSegmentHeader dataExtensionSegmentHeader,final NitfReader reader) throws ParseException {
  if (dataExtensionSegmentHeader.getDataExtensionSegmentDataLength() > 0) {
    if (dataExtensionSegmentHeader.isTreOverflow(reader.getFileType())) {
      TreCollectionParser treCollectionParser=new TreCollectionParser();
      TreCollection overflowTres=treCollectionParser.parse(reader,dataExtensionSegmentHeader.getDataExtensionSegmentDataLength());
      dataExtensionSegmentHeader.mergeTREs(overflowTres);
    }
 else {
      dataExtensionSegmentData.add(reader.readBytesRaw(dataExtensionSegmentHeader.getDataExtensionSegmentDataLength()));
    }
  }
}","/** 
 * Read the data extension segment data. The reader is assumed to be positioned at the end of the segment header before this call, and will be positioned at the start of the next header after this call.
 * @param dataExtensionSegmentHeader the header for the data extension segment that is to be read
 * @param reader the reader to use to read the data.
 * @throws ParseException on failure.
 */
protected final void readDataExtensionSegmentData(final NitfDataExtensionSegmentHeader dataExtensionSegmentHeader,final NitfReader reader) throws ParseException {
  if (dataExtensionSegmentHeader.getDataExtensionSegmentDataLength() > 0) {
    if (dataExtensionSegmentHeader.isTreOverflow(reader.getFileType())) {
      TreCollectionParser treCollectionParser=new TreCollectionParser();
      TreCollection overflowTres=treCollectionParser.parse(reader,dataExtensionSegmentHeader.getDataExtensionSegmentDataLength());
      dataExtensionSegmentHeader.mergeTREs(overflowTres);
    }
 else     if (!""String_Node_Str"".equals(dataExtensionSegmentHeader.getIdentifier().trim())) {
      dataExtensionSegmentData.add(reader.readBytesRaw(dataExtensionSegmentHeader.getDataExtensionSegmentDataLength()));
    }
  }
}",0.9630901287553648
140819,"public NitfDataExtensionSegmentNode(final ChildSegmentKey key) throws ParseException {
  super(Children.LEAF);
  childKey=key;
  DeferredSegmentParseStrategy parseStrategy=childKey.getParseStrategy();
  header=parseStrategy.getDataExtensionSegmentHeader(childKey.getIndex());
  setDisplayName(""String_Node_Str"" + header.getIdentifier());
}","public NitfDataExtensionSegmentNode(final ChildSegmentKey key) throws ParseException {
  super(Children.LEAF);
  childKey=key;
  DeferredSegmentParseStrategy parseStrategy=childKey.getParseStrategy();
  header=parseStrategy.getDataExtensionSegmentHeader(childKey.getIndex());
  setDisplayName(""String_Node_Str"" + getFriendlyName());
}",0.9479940564635958
140820,"private boolean shouldOutputTREs(){
  if (shouldOutputFileTREs() || shouldOutputImageTREs() || shouldOutputDESTREs()) {
    return true;
  }
 else {
    return false;
  }
}","private boolean shouldOutputTREs(){
  return shouldOutputFileTREs() || shouldOutputImageTREs() || shouldOutputDESTREs();
}",0.7891156462585034
140821,"static private String cleanupNumberString(double fieldVal){
  if (fieldVal == (int)fieldVal) {
    return String.format(""String_Node_Str"",(int)fieldVal);
  }
  String naiveString=String.format(""String_Node_Str"",fieldVal);
  if (naiveString.contains(""String_Node_Str"")) {
    return naiveString.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (naiveString.contains(""String_Node_Str"")) {
    return naiveString.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  return naiveString;
}","private static String cleanupNumberString(double fieldVal){
  if (fieldVal == (int)fieldVal) {
    return String.format(""String_Node_Str"",(int)fieldVal);
  }
  String naiveString=String.format(""String_Node_Str"",fieldVal);
  if (naiveString.contains(""String_Node_Str"")) {
    return naiveString.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (naiveString.contains(""String_Node_Str"")) {
    return naiveString.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  return naiveString;
}",0.9840319361277444
140822,"private void outputRPCs() throws IOException {
  TreeMap<String,String> rpc=new TreeMap<String,String>();
  if (segment1 != null) {
    TreCollection treCollection=segment1.getTREsRawStructure();
    for (    Tre tre : treCollection.getTREs()) {
      if (tre.getName().equals(""String_Node_Str"")) {
        for (        TreEntry entry : tre.getEntries()) {
          if (entry.getName().equals(""String_Node_Str"")) {
            continue;
          }
          if (entry.getName().equals(""String_Node_Str"") || entry.getName().equals(""String_Node_Str"")) {
            continue;
          }
          if (entry.getFieldValue() != null) {
            if (entry.getName().equals(""String_Node_Str"") || entry.getName().equals(""String_Node_Str"") || entry.getName().equals(""String_Node_Str"")|| entry.getName().equals(""String_Node_Str"")) {
            }
 else {
              Integer rpcValue=Integer.parseInt(entry.getFieldValue());
              rpc.put(entry.getName(),rpcValue.toString());
            }
          }
 else           if ((entry.getGroups() != null) && (!entry.getGroups().isEmpty())) {
            StringBuilder builder=new StringBuilder();
            for (            TreGroup group : entry.getGroups()) {
              for (              TreEntry groupEntry : group.getEntries()) {
                try {
                  double fieldVal=Double.parseDouble(groupEntry.getFieldValue());
                  builder.append(cleanupNumberString(fieldVal));
                  builder.append(""String_Node_Str"");
                }
 catch (                NumberFormatException e) {
                  builder.append(String.format(""String_Node_Str"",groupEntry.getFieldValue()));
                }
              }
            }
          }
        }
        try {
          double longOff=Double.parseDouble(tre.getFieldValue(""String_Node_Str""));
          double longScale=Double.parseDouble(tre.getFieldValue(""String_Node_Str""));
          double longMin=longOff - (longScale / 2.0);
          double longMax=longOff + (longScale / 2.0);
          rpc.put(""String_Node_Str"",cleanupNumberString(longMax));
          rpc.put(""String_Node_Str"",cleanupNumberString(longMin));
          double latOff=Double.parseDouble(tre.getFieldValue(""String_Node_Str""));
          double latScale=Double.parseDouble(tre.getFieldValue(""String_Node_Str""));
          double latMin=latOff - (latScale / 2.0);
          double latMax=latOff + (latScale / 2.0);
          rpc.put(""String_Node_Str"",cleanupNumberString(latMax));
          rpc.put(""String_Node_Str"",cleanupNumberString(latMin));
        }
 catch (        ParseException e) {
          e.printStackTrace();
        }
      }
    }
  }
  if (!rpc.keySet().isEmpty()) {
    out.write(""String_Node_Str"");
    for (    String tagname : rpc.keySet()) {
      out.write(String.format(""String_Node_Str"",tagname,rpc.get(tagname)));
    }
  }
}","private void outputRPCs() throws IOException {
  Map<String,String> rpc=new TreeMap<String,String>();
  if (segment1 != null) {
    TreCollection treCollection=segment1.getTREsRawStructure();
    for (    Tre tre : treCollection.getTREs()) {
      if (tre.getName().equals(""String_Node_Str"")) {
        for (        TreEntry entry : tre.getEntries()) {
          if (entry.getName().equals(""String_Node_Str"")) {
            continue;
          }
          if (entry.getName().equals(""String_Node_Str"") || entry.getName().equals(""String_Node_Str"")) {
            continue;
          }
          if (entry.getFieldValue() != null) {
            if (entry.getName().equals(""String_Node_Str"") || entry.getName().equals(""String_Node_Str"") || entry.getName().equals(""String_Node_Str"")|| entry.getName().equals(""String_Node_Str"")) {
            }
 else {
              Integer rpcValue=Integer.parseInt(entry.getFieldValue());
              rpc.put(entry.getName(),rpcValue.toString());
            }
          }
 else           if ((entry.getGroups() != null) && (!entry.getGroups().isEmpty())) {
            StringBuilder builder=new StringBuilder();
            for (            TreGroup group : entry.getGroups()) {
              for (              TreEntry groupEntry : group.getEntries()) {
                try {
                  double fieldVal=Double.parseDouble(groupEntry.getFieldValue());
                  builder.append(cleanupNumberString(fieldVal));
                  builder.append(""String_Node_Str"");
                }
 catch (                NumberFormatException e) {
                  builder.append(String.format(""String_Node_Str"",groupEntry.getFieldValue()));
                }
              }
            }
          }
        }
        try {
          double longOff=Double.parseDouble(tre.getFieldValue(""String_Node_Str""));
          double longScale=Double.parseDouble(tre.getFieldValue(""String_Node_Str""));
          double longMin=longOff - (longScale / 2.0);
          double longMax=longOff + (longScale / 2.0);
          rpc.put(""String_Node_Str"",cleanupNumberString(longMax));
          rpc.put(""String_Node_Str"",cleanupNumberString(longMin));
          double latOff=Double.parseDouble(tre.getFieldValue(""String_Node_Str""));
          double latScale=Double.parseDouble(tre.getFieldValue(""String_Node_Str""));
          double latMin=latOff - (latScale / 2.0);
          double latMax=latOff + (latScale / 2.0);
          rpc.put(""String_Node_Str"",cleanupNumberString(latMax));
          rpc.put(""String_Node_Str"",cleanupNumberString(latMin));
        }
 catch (        ParseException e) {
          e.printStackTrace();
        }
      }
    }
  }
  if (!rpc.keySet().isEmpty()) {
    out.write(""String_Node_Str"");
    for (    String tagname : rpc.keySet()) {
      out.write(String.format(""String_Node_Str"",tagname,rpc.get(tagname)));
    }
  }
}",0.9993048314216196
140823,"private int getParameterListLength(int commandHeader) throws IOException {
  int parameterListLength=(commandHeader & 0x001F);
  if (parameterListLength == 31) {
    int longFormWord2=dataReader.readUnsignedShort();
    if ((longFormWord2 & 0x8000) == 0x8000) {
      System.out.println(""String_Node_Str"");
    }
    parameterListLength=longFormWord2 & 0x7FFF;
  }
  return parameterListLength;
}","private int getParameterListLength(int commandHeader) throws IOException {
  int parameterListLength=commandHeader & 0x001F;
  if (parameterListLength == 31) {
    int longFormWord2=dataReader.readUnsignedShort();
    if ((longFormWord2 & 0x8000) == 0x8000) {
      System.out.println(""String_Node_Str"");
    }
    parameterListLength=longFormWord2 & 0x7FFF;
  }
  return parameterListLength;
}",0.9974683544303796
140824,"@Override public boolean matches(final CgmIdentifier cgmIdentifier){
  return ((cgmIdentifier.getClassIdentifier() == cgmIdent.getClassIdentifier()) && (cgmIdentifier.getElementIdentifier() == cgmIdent.getElementIdentifier()));
}","@Override public boolean matches(final CgmIdentifier cgmIdentifier){
  return (cgmIdentifier.getClassIdentifier() == cgmIdent.getClassIdentifier()) && (cgmIdentifier.getElementIdentifier() == cgmIdent.getElementIdentifier());
}",0.9956140350877192
140825,"public final byte[] getLabelData(){
  return data;
}","public final String getLabelData(){
  return data;
}",0.903846153846154
140826,"public final void setLabelData(final byte[] labelData){
  data=labelData;
}","public final void setLabelData(final String labelData){
  data=labelData;
}",0.9333333333333332
140827,"private void readLabelData() throws ParseException {
  if (lengthOfLabel == 0) {
    return;
  }
  if (shouldParseLabelData) {
    segment.setLabelData(reader.readBytesRaw(lengthOfLabel));
  }
 else {
    reader.skip(lengthOfLabel);
  }
}","private void readLabelData() throws ParseException {
  if (lengthOfLabel == 0) {
    return;
  }
  if (shouldParseLabelData) {
    segment.setLabelData(reader.readBytes(lengthOfLabel));
  }
 else {
    reader.skip(lengthOfLabel);
  }
}",0.9936575052854124
140828,"public RGBColour(final byte[] rgb){
  red=rgb[0];
  green=rgb[1];
  blue=rgb[2];
}","public RGBColour(final byte r,final byte g,final byte b){
  red=r;
  green=g;
  blue=b;
}",0.7602339181286549
140829,"@Test public void testU1123() throws IOException, ParseException {
  final String nitf20File=""String_Node_Str"";
  assertNotNull(""String_Node_Str"",getClass().getResource(nitf20File));
  InputStream is=getClass().getResourceAsStream(nitf20File);
  NitfFile file=new NitfFile();
  file.parse(is,EnumSet.allOf(ParseOption.class));
  assertEquals(FileType.NITF_TWO_ZERO,file.getFileType());
  assertEquals(1,file.getComplexityLevel());
  assertEquals(""String_Node_Str"",file.getStandardType());
  assertEquals(""String_Node_Str"",file.getOriginatingStationId());
  assertEquals(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"").format(file.getFileDateTime()));
  assertEquals(""String_Node_Str"",file.getFileTitle());
  NitfFileSecurityMetadata securityMetadata=file.getFileSecurityMetadata();
  assertUnclasAndEmpty(securityMetadata);
  assertEquals(""String_Node_Str"",securityMetadata.getDowngradeDateOrSpecialCase());
  assertEquals(""String_Node_Str"",securityMetadata.getDowngradeEvent());
  assertEquals(""String_Node_Str"",file.getFileSecurityMetadata().getFileCopyNumber());
  assertEquals(""String_Node_Str"",file.getFileSecurityMetadata().getFileNumberOfCopies());
  assertEquals(""String_Node_Str"",file.getOriginatorsName());
  assertEquals(""String_Node_Str"",file.getOriginatorsPhoneNumber());
  assertEquals(5,file.getNumberOfImageSegments());
  assertEquals(0,file.getNumberOfGraphicSegments());
  assertEquals(4,file.getNumberOfSymbolSegments());
  assertEquals(4,file.getNumberOfLabelSegments());
  assertEquals(1,file.getNumberOfTextSegments());
  assertEquals(0,file.getNumberOfDataExtensionSegments());
  NitfImageSegment imageSegment1=file.getImageSegment(1);
  assertNotNull(imageSegment1);
  assertEquals(""String_Node_Str"",imageSegment1.getImageIdentifier1());
  assertEquals(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"").format(imageSegment1.getImageDateTime()));
  assertEquals(""String_Node_Str"",imageSegment1.getImageIdentifier2());
  assertEquals(""String_Node_Str"",imageSegment1.getImageTargetId());
  assertUnclasAndEmpty(imageSegment1.getSecurityMetadata());
  assertEquals(""String_Node_Str"",imageSegment1.getImageSource());
  assertEquals(1024L,imageSegment1.getNumberOfRows());
  assertEquals(1024L,imageSegment1.getNumberOfColumns());
  assertEquals(PixelValueType.INTEGER,imageSegment1.getPixelValueType());
  assertEquals(ImageRepresentation.MONOCHROME,imageSegment1.getImageRepresentation());
  assertEquals(ImageCategory.VISUAL,imageSegment1.getImageCategory());
  assertEquals(8,imageSegment1.getActualBitsPerPixelPerBand());
  assertEquals(PixelJustification.RIGHT,imageSegment1.getPixelJustification());
  assertEquals(ImageCoordinatesRepresentation.NONE,imageSegment1.getImageCoordinatesRepresentation());
  assertEquals(0,imageSegment1.getNumberOfImageComments());
  assertEquals(ImageCompression.NOTCOMPRESSED,imageSegment1.getImageCompression());
  assertEquals(1,imageSegment1.getNumBands());
  NitfImageBand band1=imageSegment1.getImageBand(1);
  assertNotNull(band1);
  assertEquals(""String_Node_Str"",band1.getImageRepresentation());
  assertEquals(""String_Node_Str"",band1.getSubCategory());
  assertEquals(0,band1.getNumLUTs());
  assertEquals(0,band1.getNumLUTEntries());
  assertEquals(ImageMode.BLOCKINTERLEVE,imageSegment1.getImageMode());
  assertEquals(1,imageSegment1.getNumberOfBlocksPerRow());
  assertEquals(1,imageSegment1.getNumberOfBlocksPerColumn());
  assertEquals(1024,imageSegment1.getNumberOfPixelsPerBlockHorizontal());
  assertEquals(1024,imageSegment1.getNumberOfPixelsPerBlockVertical());
  assertEquals(8,imageSegment1.getNumberOfBitsPerPixelPerBand());
  assertEquals(1,imageSegment1.getImageDisplayLevel());
  assertEquals(0,imageSegment1.getImageAttachmentLevel());
  assertEquals(0,imageSegment1.getImageLocationRow());
  assertEquals(0,imageSegment1.getImageLocationColumn());
  assertEquals(""String_Node_Str"",imageSegment1.getImageMagnification());
  assertEquals(1.0,imageSegment1.getImageMagnificationAsDouble(),0.00000001);
  NitfImageSegment imageSegment2=file.getImageSegment(2);
  assertNotNull(imageSegment2);
  assertEquals(""String_Node_Str"",imageSegment2.getImageIdentifier1());
  assertEquals(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"").format(imageSegment2.getImageDateTime()));
  assertEquals(""String_Node_Str"",imageSegment2.getImageIdentifier2());
  assertEquals(""String_Node_Str"",imageSegment2.getImageTargetId());
  assertUnclasAndEmpty(imageSegment2.getSecurityMetadata());
  assertEquals(""String_Node_Str"",imageSegment2.getImageSource());
  assertEquals(64L,imageSegment2.getNumberOfRows());
  assertEquals(64L,imageSegment2.getNumberOfColumns());
  assertEquals(PixelValueType.INTEGER,imageSegment2.getPixelValueType());
  assertEquals(ImageRepresentation.MONOCHROME,imageSegment2.getImageRepresentation());
  assertEquals(ImageCategory.VISUAL,imageSegment2.getImageCategory());
  assertEquals(1,imageSegment2.getActualBitsPerPixelPerBand());
  assertEquals(PixelJustification.RIGHT,imageSegment2.getPixelJustification());
  assertEquals(ImageCoordinatesRepresentation.NONE,imageSegment2.getImageCoordinatesRepresentation());
  assertEquals(0,imageSegment2.getNumberOfImageComments());
  assertEquals(ImageCompression.BILEVEL,imageSegment2.getImageCompression());
  assertEquals(1,imageSegment2.getNumBands());
  band1=imageSegment2.getImageBand(1);
  assertNotNull(band1);
  assertEquals(""String_Node_Str"",band1.getImageRepresentation());
  assertEquals(""String_Node_Str"",band1.getSubCategory());
  assertEquals(0,band1.getNumLUTs());
  assertEquals(0,band1.getNumLUTEntries());
  assertEquals(ImageMode.BLOCKINTERLEVE,imageSegment2.getImageMode());
  assertEquals(1,imageSegment2.getNumberOfBlocksPerRow());
  assertEquals(1,imageSegment2.getNumberOfBlocksPerColumn());
  assertEquals(64,imageSegment2.getNumberOfPixelsPerBlockHorizontal());
  assertEquals(64,imageSegment2.getNumberOfPixelsPerBlockVertical());
  assertEquals(1,imageSegment2.getNumberOfBitsPerPixelPerBand());
  assertEquals(8,imageSegment2.getImageDisplayLevel());
  assertEquals(2,imageSegment2.getImageAttachmentLevel());
  assertEquals(150,imageSegment2.getImageLocationRow());
  assertEquals(0,imageSegment2.getImageLocationColumn());
  assertEquals(""String_Node_Str"",imageSegment2.getImageMagnification());
  NitfImageSegment imageSegment3=file.getImageSegment(3);
  assertNotNull(imageSegment3);
  assertEquals(""String_Node_Str"",imageSegment3.getImageIdentifier1());
  assertEquals(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"").format(imageSegment3.getImageDateTime()));
  assertEquals(""String_Node_Str"",imageSegment3.getImageIdentifier2());
  assertEquals(""String_Node_Str"",imageSegment3.getImageTargetId());
  assertUnclasAndEmpty(imageSegment3.getSecurityMetadata());
  assertEquals(""String_Node_Str"",imageSegment3.getImageSource());
  assertEquals(64L,imageSegment3.getNumberOfRows());
  assertEquals(64L,imageSegment3.getNumberOfColumns());
  assertEquals(PixelValueType.INTEGER,imageSegment3.getPixelValueType());
  assertEquals(ImageRepresentation.MONOCHROME,imageSegment3.getImageRepresentation());
  assertEquals(ImageCategory.VISUAL,imageSegment3.getImageCategory());
  assertEquals(8,imageSegment3.getActualBitsPerPixelPerBand());
  assertEquals(PixelJustification.RIGHT,imageSegment3.getPixelJustification());
  assertEquals(ImageCoordinatesRepresentation.NONE,imageSegment3.getImageCoordinatesRepresentation());
  assertEquals(9,imageSegment3.getNumberOfImageComments());
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(1));
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(2));
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(3));
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(4));
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(5));
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(6));
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(7));
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(8));
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(9));
  assertEquals(ImageCompression.NOTCOMPRESSED,imageSegment3.getImageCompression());
  assertEquals(1,imageSegment3.getNumBands());
  band1=imageSegment3.getImageBand(1);
  assertNotNull(band1);
  assertEquals(""String_Node_Str"",band1.getImageRepresentation());
  assertEquals(""String_Node_Str"",band1.getSubCategory());
  assertEquals(0,band1.getNumLUTs());
  assertEquals(0,band1.getNumLUTEntries());
  assertEquals(ImageMode.BLOCKINTERLEVE,imageSegment3.getImageMode());
  assertEquals(1,imageSegment3.getNumberOfBlocksPerRow());
  assertEquals(1,imageSegment3.getNumberOfBlocksPerColumn());
  assertEquals(64,imageSegment3.getNumberOfPixelsPerBlockHorizontal());
  assertEquals(64,imageSegment3.getNumberOfPixelsPerBlockVertical());
  assertEquals(8,imageSegment3.getNumberOfBitsPerPixelPerBand());
  assertEquals(12,imageSegment3.getImageDisplayLevel());
  assertEquals(11,imageSegment3.getImageAttachmentLevel());
  assertEquals(10,imageSegment3.getImageLocationRow());
  assertEquals(10,imageSegment3.getImageLocationColumn());
  assertEquals(""String_Node_Str"",imageSegment3.getImageMagnification());
  NitfImageSegment imageSegment4=file.getImageSegment(4);
  assertNotNull(imageSegment4);
  assertEquals(""String_Node_Str"",imageSegment4.getImageIdentifier1());
  assertEquals(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"").format(imageSegment4.getImageDateTime()));
  assertEquals(""String_Node_Str"",imageSegment4.getImageIdentifier2());
  assertEquals(""String_Node_Str"",imageSegment4.getImageTargetId());
  assertUnclasAndEmpty(imageSegment4.getSecurityMetadata());
  assertEquals(""String_Node_Str"",imageSegment4.getImageSource());
  assertEquals(191L,imageSegment4.getNumberOfRows());
  assertEquals(231L,imageSegment4.getNumberOfColumns());
  assertEquals(PixelValueType.INTEGER,imageSegment4.getPixelValueType());
  assertEquals(ImageRepresentation.MONOCHROME,imageSegment4.getImageRepresentation());
  assertEquals(ImageCategory.VISUAL,imageSegment4.getImageCategory());
  assertEquals(8,imageSegment4.getActualBitsPerPixelPerBand());
  assertEquals(PixelJustification.RIGHT,imageSegment4.getPixelJustification());
  assertEquals(ImageCoordinatesRepresentation.NONE,imageSegment4.getImageCoordinatesRepresentation());
  assertEquals(0,imageSegment4.getNumberOfImageComments());
  assertEquals(ImageCompression.JPEG,imageSegment4.getImageCompression());
  assertEquals(1,imageSegment4.getNumBands());
  band1=imageSegment4.getImageBand(1);
  assertNotNull(band1);
  assertEquals(""String_Node_Str"",band1.getImageRepresentation());
  assertEquals(""String_Node_Str"",band1.getSubCategory());
  assertEquals(0,band1.getNumLUTs());
  assertEquals(0,band1.getNumLUTEntries());
  assertEquals(ImageMode.BLOCKINTERLEVE,imageSegment4.getImageMode());
  assertEquals(1,imageSegment4.getNumberOfBlocksPerRow());
  assertEquals(1,imageSegment4.getNumberOfBlocksPerColumn());
  assertEquals(231,imageSegment4.getNumberOfPixelsPerBlockHorizontal());
  assertEquals(191,imageSegment4.getNumberOfPixelsPerBlockVertical());
  assertEquals(8,imageSegment4.getNumberOfBitsPerPixelPerBand());
  assertEquals(5,imageSegment4.getImageDisplayLevel());
  assertEquals(1,imageSegment4.getImageAttachmentLevel());
  assertEquals(40,imageSegment4.getImageLocationRow());
  assertEquals(220,imageSegment4.getImageLocationColumn());
  assertEquals(""String_Node_Str"",imageSegment4.getImageMagnification());
  NitfImageSegment imageSegment5=file.getImageSegment(5);
  assertNotNull(imageSegment5);
  assertEquals(""String_Node_Str"",imageSegment5.getImageIdentifier1());
  assertEquals(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"").format(imageSegment5.getImageDateTime()));
  assertEquals(""String_Node_Str"",imageSegment5.getImageIdentifier2());
  assertEquals(""String_Node_Str"",imageSegment5.getImageTargetId());
  assertUnclasAndEmpty(imageSegment5.getSecurityMetadata());
  assertEquals(""String_Node_Str"",imageSegment5.getImageSource());
  assertEquals(73L,imageSegment5.getNumberOfRows());
  assertEquals(181L,imageSegment5.getNumberOfColumns());
  assertEquals(PixelValueType.INTEGER,imageSegment5.getPixelValueType());
  assertEquals(ImageRepresentation.MONOCHROME,imageSegment5.getImageRepresentation());
  assertEquals(ImageCategory.VISUAL,imageSegment5.getImageCategory());
  assertEquals(8,imageSegment5.getActualBitsPerPixelPerBand());
  assertEquals(PixelJustification.RIGHT,imageSegment5.getPixelJustification());
  assertEquals(ImageCoordinatesRepresentation.NONE,imageSegment5.getImageCoordinatesRepresentation());
  assertEquals(9,imageSegment5.getNumberOfImageComments());
  assertEquals(""String_Node_Str"",imageSegment5.getImageComment(1));
  assertEquals(""String_Node_Str"",imageSegment5.getImageComment(9));
  assertEquals(ImageCompression.JPEG,imageSegment5.getImageCompression());
  assertEquals(1,imageSegment5.getNumBands());
  band1=imageSegment5.getImageBand(1);
  assertNotNull(band1);
  assertEquals(""String_Node_Str"",band1.getImageRepresentation());
  assertEquals(""String_Node_Str"",band1.getSubCategory());
  assertEquals(0,band1.getNumLUTs());
  assertEquals(0,band1.getNumLUTEntries());
  assertEquals(ImageMode.BLOCKINTERLEVE,imageSegment5.getImageMode());
  assertEquals(1,imageSegment5.getNumberOfBlocksPerRow());
  assertEquals(1,imageSegment5.getNumberOfBlocksPerColumn());
  assertEquals(181,imageSegment5.getNumberOfPixelsPerBlockHorizontal());
  assertEquals(73,imageSegment5.getNumberOfPixelsPerBlockVertical());
  assertEquals(8,imageSegment5.getNumberOfBitsPerPixelPerBand());
  assertEquals(2,imageSegment5.getImageDisplayLevel());
  assertEquals(1,imageSegment5.getImageAttachmentLevel());
  assertEquals(65,imageSegment5.getImageLocationRow());
  assertEquals(30,imageSegment5.getImageLocationColumn());
  assertEquals(""String_Node_Str"",imageSegment5.getImageMagnification());
  NitfSymbolSegment symbolSegment1=file.getSymbolSegment(1);
  assertNotNull(symbolSegment1);
  NitfTextSegment textSegment=file.getTextSegment(1);
  assertNotNull(textSegment);
  assertEquals(""String_Node_Str"",textSegment.getTextIdentifier());
  assertEquals(0,textSegment.getTextAttachmentLevel());
  assertEquals(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"").format(textSegment.getTextDateTime()));
  assertEquals(""String_Node_Str"",textSegment.getTextTitle());
  NitfSecurityMetadata textSecurityMetadata=textSegment.getSecurityMetadata();
  assertUnclasAndEmpty(textSecurityMetadata);
  assertEquals(""String_Node_Str"",textSecurityMetadata.getDowngradeDateOrSpecialCase());
  assertEquals(""String_Node_Str"",textSecurityMetadata.getDowngradeEvent());
  assertEquals(TextFormat.BASICCHARACTERSET,textSegment.getTextFormat());
  assertEquals(""String_Node_Str"",textSegment.getTextData());
  is.close();
}","@Test public void testU1123() throws IOException, ParseException {
  final String nitf20File=""String_Node_Str"";
  assertNotNull(""String_Node_Str"",getClass().getResource(nitf20File));
  InputStream is=getClass().getResourceAsStream(nitf20File);
  NitfFile file=new NitfFile();
  file.parse(is,EnumSet.allOf(ParseOption.class));
  assertEquals(FileType.NITF_TWO_ZERO,file.getFileType());
  assertEquals(1,file.getComplexityLevel());
  assertEquals(""String_Node_Str"",file.getStandardType());
  assertEquals(""String_Node_Str"",file.getOriginatingStationId());
  assertEquals(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"").format(file.getFileDateTime()));
  assertEquals(""String_Node_Str"",file.getFileTitle());
  NitfFileSecurityMetadata securityMetadata=file.getFileSecurityMetadata();
  assertUnclasAndEmpty(securityMetadata);
  assertEquals(""String_Node_Str"",securityMetadata.getDowngradeDateOrSpecialCase());
  assertEquals(""String_Node_Str"",securityMetadata.getDowngradeEvent());
  assertEquals(""String_Node_Str"",file.getFileSecurityMetadata().getFileCopyNumber());
  assertEquals(""String_Node_Str"",file.getFileSecurityMetadata().getFileNumberOfCopies());
  assertEquals(""String_Node_Str"",file.getOriginatorsName());
  assertEquals(""String_Node_Str"",file.getOriginatorsPhoneNumber());
  assertEquals(5,file.getNumberOfImageSegments());
  assertEquals(0,file.getNumberOfGraphicSegments());
  assertEquals(4,file.getNumberOfSymbolSegments());
  assertEquals(4,file.getNumberOfLabelSegments());
  assertEquals(1,file.getNumberOfTextSegments());
  assertEquals(0,file.getNumberOfDataExtensionSegments());
  NitfImageSegment imageSegment1=file.getImageSegment(1);
  assertNotNull(imageSegment1);
  assertEquals(""String_Node_Str"",imageSegment1.getImageIdentifier1());
  assertEquals(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"").format(imageSegment1.getImageDateTime()));
  assertEquals(""String_Node_Str"",imageSegment1.getImageIdentifier2());
  assertEquals(""String_Node_Str"",imageSegment1.getImageTargetId());
  assertUnclasAndEmpty(imageSegment1.getSecurityMetadata());
  assertEquals(""String_Node_Str"",imageSegment1.getImageSource());
  assertEquals(1024L,imageSegment1.getNumberOfRows());
  assertEquals(1024L,imageSegment1.getNumberOfColumns());
  assertEquals(PixelValueType.INTEGER,imageSegment1.getPixelValueType());
  assertEquals(ImageRepresentation.MONOCHROME,imageSegment1.getImageRepresentation());
  assertEquals(ImageCategory.VISUAL,imageSegment1.getImageCategory());
  assertEquals(8,imageSegment1.getActualBitsPerPixelPerBand());
  assertEquals(PixelJustification.RIGHT,imageSegment1.getPixelJustification());
  assertEquals(ImageCoordinatesRepresentation.NONE,imageSegment1.getImageCoordinatesRepresentation());
  assertEquals(0,imageSegment1.getNumberOfImageComments());
  assertEquals(ImageCompression.NOTCOMPRESSED,imageSegment1.getImageCompression());
  assertEquals(1,imageSegment1.getNumBands());
  NitfImageBand band1=imageSegment1.getImageBand(1);
  assertNotNull(band1);
  assertEquals(""String_Node_Str"",band1.getImageRepresentation());
  assertEquals(""String_Node_Str"",band1.getSubCategory());
  assertEquals(0,band1.getNumLUTs());
  assertEquals(0,band1.getNumLUTEntries());
  assertEquals(ImageMode.BLOCKINTERLEVE,imageSegment1.getImageMode());
  assertEquals(1,imageSegment1.getNumberOfBlocksPerRow());
  assertEquals(1,imageSegment1.getNumberOfBlocksPerColumn());
  assertEquals(1024,imageSegment1.getNumberOfPixelsPerBlockHorizontal());
  assertEquals(1024,imageSegment1.getNumberOfPixelsPerBlockVertical());
  assertEquals(8,imageSegment1.getNumberOfBitsPerPixelPerBand());
  assertEquals(1,imageSegment1.getImageDisplayLevel());
  assertEquals(0,imageSegment1.getImageAttachmentLevel());
  assertEquals(0,imageSegment1.getImageLocationRow());
  assertEquals(0,imageSegment1.getImageLocationColumn());
  assertEquals(""String_Node_Str"",imageSegment1.getImageMagnification());
  assertEquals(1.0,imageSegment1.getImageMagnificationAsDouble(),0.00000001);
  NitfImageSegment imageSegment2=file.getImageSegment(2);
  assertNotNull(imageSegment2);
  assertEquals(""String_Node_Str"",imageSegment2.getImageIdentifier1());
  assertEquals(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"").format(imageSegment2.getImageDateTime()));
  assertEquals(""String_Node_Str"",imageSegment2.getImageIdentifier2());
  assertEquals(""String_Node_Str"",imageSegment2.getImageTargetId());
  assertUnclasAndEmpty(imageSegment2.getSecurityMetadata());
  assertEquals(""String_Node_Str"",imageSegment2.getImageSource());
  assertEquals(64L,imageSegment2.getNumberOfRows());
  assertEquals(64L,imageSegment2.getNumberOfColumns());
  assertEquals(PixelValueType.INTEGER,imageSegment2.getPixelValueType());
  assertEquals(ImageRepresentation.MONOCHROME,imageSegment2.getImageRepresentation());
  assertEquals(ImageCategory.VISUAL,imageSegment2.getImageCategory());
  assertEquals(1,imageSegment2.getActualBitsPerPixelPerBand());
  assertEquals(PixelJustification.RIGHT,imageSegment2.getPixelJustification());
  assertEquals(ImageCoordinatesRepresentation.NONE,imageSegment2.getImageCoordinatesRepresentation());
  assertEquals(0,imageSegment2.getNumberOfImageComments());
  assertEquals(ImageCompression.BILEVEL,imageSegment2.getImageCompression());
  assertEquals(1,imageSegment2.getNumBands());
  band1=imageSegment2.getImageBand(1);
  assertNotNull(band1);
  assertEquals(""String_Node_Str"",band1.getImageRepresentation());
  assertEquals(""String_Node_Str"",band1.getSubCategory());
  assertEquals(0,band1.getNumLUTs());
  assertEquals(0,band1.getNumLUTEntries());
  assertEquals(ImageMode.BLOCKINTERLEVE,imageSegment2.getImageMode());
  assertEquals(1,imageSegment2.getNumberOfBlocksPerRow());
  assertEquals(1,imageSegment2.getNumberOfBlocksPerColumn());
  assertEquals(64,imageSegment2.getNumberOfPixelsPerBlockHorizontal());
  assertEquals(64,imageSegment2.getNumberOfPixelsPerBlockVertical());
  assertEquals(1,imageSegment2.getNumberOfBitsPerPixelPerBand());
  assertEquals(8,imageSegment2.getImageDisplayLevel());
  assertEquals(2,imageSegment2.getImageAttachmentLevel());
  assertEquals(150,imageSegment2.getImageLocationRow());
  assertEquals(0,imageSegment2.getImageLocationColumn());
  assertEquals(""String_Node_Str"",imageSegment2.getImageMagnification());
  NitfImageSegment imageSegment3=file.getImageSegment(3);
  assertNotNull(imageSegment3);
  assertEquals(""String_Node_Str"",imageSegment3.getImageIdentifier1());
  assertEquals(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"").format(imageSegment3.getImageDateTime()));
  assertEquals(""String_Node_Str"",imageSegment3.getImageIdentifier2());
  assertEquals(""String_Node_Str"",imageSegment3.getImageTargetId());
  assertUnclasAndEmpty(imageSegment3.getSecurityMetadata());
  assertEquals(""String_Node_Str"",imageSegment3.getImageSource());
  assertEquals(64L,imageSegment3.getNumberOfRows());
  assertEquals(64L,imageSegment3.getNumberOfColumns());
  assertEquals(PixelValueType.INTEGER,imageSegment3.getPixelValueType());
  assertEquals(ImageRepresentation.MONOCHROME,imageSegment3.getImageRepresentation());
  assertEquals(ImageCategory.VISUAL,imageSegment3.getImageCategory());
  assertEquals(8,imageSegment3.getActualBitsPerPixelPerBand());
  assertEquals(PixelJustification.RIGHT,imageSegment3.getPixelJustification());
  assertEquals(ImageCoordinatesRepresentation.NONE,imageSegment3.getImageCoordinatesRepresentation());
  assertEquals(9,imageSegment3.getNumberOfImageComments());
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(1));
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(2));
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(3));
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(4));
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(5));
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(6));
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(7));
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(8));
  assertEquals(""String_Node_Str"",imageSegment3.getImageComment(9));
  assertEquals(ImageCompression.NOTCOMPRESSED,imageSegment3.getImageCompression());
  assertEquals(1,imageSegment3.getNumBands());
  band1=imageSegment3.getImageBand(1);
  assertNotNull(band1);
  assertEquals(""String_Node_Str"",band1.getImageRepresentation());
  assertEquals(""String_Node_Str"",band1.getSubCategory());
  assertEquals(0,band1.getNumLUTs());
  assertEquals(0,band1.getNumLUTEntries());
  assertEquals(ImageMode.BLOCKINTERLEVE,imageSegment3.getImageMode());
  assertEquals(1,imageSegment3.getNumberOfBlocksPerRow());
  assertEquals(1,imageSegment3.getNumberOfBlocksPerColumn());
  assertEquals(64,imageSegment3.getNumberOfPixelsPerBlockHorizontal());
  assertEquals(64,imageSegment3.getNumberOfPixelsPerBlockVertical());
  assertEquals(8,imageSegment3.getNumberOfBitsPerPixelPerBand());
  assertEquals(12,imageSegment3.getImageDisplayLevel());
  assertEquals(11,imageSegment3.getImageAttachmentLevel());
  assertEquals(10,imageSegment3.getImageLocationRow());
  assertEquals(10,imageSegment3.getImageLocationColumn());
  assertEquals(""String_Node_Str"",imageSegment3.getImageMagnification());
  NitfImageSegment imageSegment4=file.getImageSegment(4);
  assertNotNull(imageSegment4);
  assertEquals(""String_Node_Str"",imageSegment4.getImageIdentifier1());
  assertEquals(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"").format(imageSegment4.getImageDateTime()));
  assertEquals(""String_Node_Str"",imageSegment4.getImageIdentifier2());
  assertEquals(""String_Node_Str"",imageSegment4.getImageTargetId());
  assertUnclasAndEmpty(imageSegment4.getSecurityMetadata());
  assertEquals(""String_Node_Str"",imageSegment4.getImageSource());
  assertEquals(191L,imageSegment4.getNumberOfRows());
  assertEquals(231L,imageSegment4.getNumberOfColumns());
  assertEquals(PixelValueType.INTEGER,imageSegment4.getPixelValueType());
  assertEquals(ImageRepresentation.MONOCHROME,imageSegment4.getImageRepresentation());
  assertEquals(ImageCategory.VISUAL,imageSegment4.getImageCategory());
  assertEquals(8,imageSegment4.getActualBitsPerPixelPerBand());
  assertEquals(PixelJustification.RIGHT,imageSegment4.getPixelJustification());
  assertEquals(ImageCoordinatesRepresentation.NONE,imageSegment4.getImageCoordinatesRepresentation());
  assertEquals(0,imageSegment4.getNumberOfImageComments());
  assertEquals(ImageCompression.JPEG,imageSegment4.getImageCompression());
  assertEquals(1,imageSegment4.getNumBands());
  band1=imageSegment4.getImageBand(1);
  assertNotNull(band1);
  assertEquals(""String_Node_Str"",band1.getImageRepresentation());
  assertEquals(""String_Node_Str"",band1.getSubCategory());
  assertEquals(0,band1.getNumLUTs());
  assertEquals(0,band1.getNumLUTEntries());
  assertEquals(ImageMode.BLOCKINTERLEVE,imageSegment4.getImageMode());
  assertEquals(1,imageSegment4.getNumberOfBlocksPerRow());
  assertEquals(1,imageSegment4.getNumberOfBlocksPerColumn());
  assertEquals(231,imageSegment4.getNumberOfPixelsPerBlockHorizontal());
  assertEquals(191,imageSegment4.getNumberOfPixelsPerBlockVertical());
  assertEquals(8,imageSegment4.getNumberOfBitsPerPixelPerBand());
  assertEquals(5,imageSegment4.getImageDisplayLevel());
  assertEquals(1,imageSegment4.getImageAttachmentLevel());
  assertEquals(40,imageSegment4.getImageLocationRow());
  assertEquals(220,imageSegment4.getImageLocationColumn());
  assertEquals(""String_Node_Str"",imageSegment4.getImageMagnification());
  NitfImageSegment imageSegment5=file.getImageSegment(5);
  assertNotNull(imageSegment5);
  assertEquals(""String_Node_Str"",imageSegment5.getImageIdentifier1());
  assertEquals(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"").format(imageSegment5.getImageDateTime()));
  assertEquals(""String_Node_Str"",imageSegment5.getImageIdentifier2());
  assertEquals(""String_Node_Str"",imageSegment5.getImageTargetId());
  assertUnclasAndEmpty(imageSegment5.getSecurityMetadata());
  assertEquals(""String_Node_Str"",imageSegment5.getImageSource());
  assertEquals(73L,imageSegment5.getNumberOfRows());
  assertEquals(181L,imageSegment5.getNumberOfColumns());
  assertEquals(PixelValueType.INTEGER,imageSegment5.getPixelValueType());
  assertEquals(ImageRepresentation.MONOCHROME,imageSegment5.getImageRepresentation());
  assertEquals(ImageCategory.VISUAL,imageSegment5.getImageCategory());
  assertEquals(8,imageSegment5.getActualBitsPerPixelPerBand());
  assertEquals(PixelJustification.RIGHT,imageSegment5.getPixelJustification());
  assertEquals(ImageCoordinatesRepresentation.NONE,imageSegment5.getImageCoordinatesRepresentation());
  assertEquals(9,imageSegment5.getNumberOfImageComments());
  assertEquals(""String_Node_Str"",imageSegment5.getImageComment(1));
  assertEquals(""String_Node_Str"",imageSegment5.getImageComment(9));
  assertEquals(ImageCompression.JPEG,imageSegment5.getImageCompression());
  assertEquals(1,imageSegment5.getNumBands());
  band1=imageSegment5.getImageBand(1);
  assertNotNull(band1);
  assertEquals(""String_Node_Str"",band1.getImageRepresentation());
  assertEquals(""String_Node_Str"",band1.getSubCategory());
  assertEquals(0,band1.getNumLUTs());
  assertEquals(0,band1.getNumLUTEntries());
  assertEquals(ImageMode.BLOCKINTERLEVE,imageSegment5.getImageMode());
  assertEquals(1,imageSegment5.getNumberOfBlocksPerRow());
  assertEquals(1,imageSegment5.getNumberOfBlocksPerColumn());
  assertEquals(181,imageSegment5.getNumberOfPixelsPerBlockHorizontal());
  assertEquals(73,imageSegment5.getNumberOfPixelsPerBlockVertical());
  assertEquals(8,imageSegment5.getNumberOfBitsPerPixelPerBand());
  assertEquals(2,imageSegment5.getImageDisplayLevel());
  assertEquals(1,imageSegment5.getImageAttachmentLevel());
  assertEquals(65,imageSegment5.getImageLocationRow());
  assertEquals(30,imageSegment5.getImageLocationColumn());
  assertEquals(""String_Node_Str"",imageSegment5.getImageMagnification());
  NitfSymbolSegment symbolSegment1=file.getSymbolSegment(1);
  assertNotNull(symbolSegment1);
  assertEquals(""String_Node_Str"",symbolSegment1.getSymbolIdentifier());
  assertEquals(""String_Node_Str"",symbolSegment1.getSymbolName());
  assertUnclasAndEmpty(symbolSegment1.getSecurityMetadata());
  assertEquals(""String_Node_Str"",symbolSegment1.getSecurityMetadata().getDowngradeDateOrSpecialCase());
  assertEquals(""String_Node_Str"",symbolSegment1.getSecurityMetadata().getDowngradeEvent());
  assertEquals(""String_Node_Str"",symbolSegment1.getSymbolType());
  assertEquals(SymbolColour.ZERO_TRANSPARENT_ONE_BLACK,symbolSegment1.getSymbolColour());
  assertEquals(7,symbolSegment1.getNumberOfLinesPerSymbol());
  assertEquals(7,symbolSegment1.getNumberOfPixelsPerLine());
  assertEquals(0,symbolSegment1.getLineWidth());
  assertEquals(1,symbolSegment1.getNumberOfBitsPerPixel());
  assertEquals(3,symbolSegment1.getSymbolDisplayLevel());
  assertEquals(1,symbolSegment1.getSymbolAttachmentLevel());
  assertEquals(62,symbolSegment1.getSymbolLocationRow());
  assertEquals(170,symbolSegment1.getSymbolLocationColumn());
  assertEquals(0,symbolSegment1.getSymbolLocation2Row());
  assertEquals(0,symbolSegment1.getSymbolLocation2Column());
  assertEquals(""String_Node_Str"",symbolSegment1.getSymbolNumber());
  assertEquals(0,symbolSegment1.getSymbolRotation());
  assertEquals(7,symbolSegment1.getSymbolData().length);
  NitfSymbolSegment symbolSegment2=file.getSymbolSegment(2);
  assertNotNull(symbolSegment2);
  assertEquals(""String_Node_Str"",symbolSegment2.getSymbolIdentifier());
  assertEquals(""String_Node_Str"",symbolSegment2.getSymbolName());
  assertUnclasAndEmpty(symbolSegment2.getSecurityMetadata());
  assertEquals(""String_Node_Str"",symbolSegment2.getSecurityMetadata().getDowngradeDateOrSpecialCase());
  assertEquals(""String_Node_Str"",symbolSegment2.getSecurityMetadata().getDowngradeEvent());
  assertEquals(""String_Node_Str"",symbolSegment2.getSymbolType());
  assertEquals(SymbolColour.ZERO_TRANSPARENT_ONE_BLACK,symbolSegment2.getSymbolColour());
  assertEquals(18,symbolSegment2.getNumberOfLinesPerSymbol());
  assertEquals(35,symbolSegment2.getNumberOfPixelsPerLine());
  assertEquals(0,symbolSegment2.getLineWidth());
  assertEquals(1,symbolSegment2.getNumberOfBitsPerPixel());
  assertEquals(7,symbolSegment2.getSymbolDisplayLevel());
  assertEquals(5,symbolSegment2.getSymbolAttachmentLevel());
  assertEquals(100,symbolSegment2.getSymbolLocationRow());
  assertEquals(100,symbolSegment2.getSymbolLocationColumn());
  assertEquals(0,symbolSegment2.getSymbolLocation2Row());
  assertEquals(0,symbolSegment2.getSymbolLocation2Column());
  assertEquals(""String_Node_Str"",symbolSegment2.getSymbolNumber());
  assertEquals(0,symbolSegment2.getSymbolRotation());
  assertEquals(79,symbolSegment2.getSymbolData().length);
  NitfSymbolSegment symbolSegment3=file.getSymbolSegment(3);
  assertNotNull(symbolSegment3);
  assertEquals(""String_Node_Str"",symbolSegment3.getSymbolIdentifier());
  assertEquals(""String_Node_Str"",symbolSegment3.getSymbolName());
  assertUnclasAndEmpty(symbolSegment3.getSecurityMetadata());
  assertEquals(""String_Node_Str"",symbolSegment3.getSecurityMetadata().getDowngradeDateOrSpecialCase());
  assertEquals(""String_Node_Str"",symbolSegment3.getSecurityMetadata().getDowngradeEvent());
  assertEquals(""String_Node_Str"",symbolSegment3.getSymbolType());
  assertEquals(SymbolColour.ZERO_TRANSPARENT_ONE_BLACK,symbolSegment3.getSymbolColour());
  assertEquals(18,symbolSegment3.getNumberOfLinesPerSymbol());
  assertEquals(35,symbolSegment3.getNumberOfPixelsPerLine());
  assertEquals(0,symbolSegment3.getLineWidth());
  assertEquals(1,symbolSegment3.getNumberOfBitsPerPixel());
  assertEquals(9,symbolSegment3.getSymbolDisplayLevel());
  assertEquals(8,symbolSegment3.getSymbolAttachmentLevel());
  assertEquals(25,symbolSegment3.getSymbolLocationRow());
  assertEquals(25,symbolSegment3.getSymbolLocationColumn());
  assertEquals(0,symbolSegment3.getSymbolLocation2Row());
  assertEquals(0,symbolSegment3.getSymbolLocation2Column());
  assertEquals(""String_Node_Str"",symbolSegment3.getSymbolNumber());
  assertEquals(0,symbolSegment3.getSymbolRotation());
  assertEquals(79,symbolSegment3.getSymbolData().length);
  NitfSymbolSegment symbolSegment4=file.getSymbolSegment(4);
  assertNotNull(symbolSegment4);
  assertEquals(""String_Node_Str"",symbolSegment4.getSymbolIdentifier());
  assertEquals(""String_Node_Str"",symbolSegment4.getSymbolName());
  assertUnclasAndEmpty(symbolSegment4.getSecurityMetadata());
  assertEquals(""String_Node_Str"",symbolSegment4.getSecurityMetadata().getDowngradeDateOrSpecialCase());
  assertEquals(""String_Node_Str"",symbolSegment4.getSecurityMetadata().getDowngradeEvent());
  assertEquals(""String_Node_Str"",symbolSegment4.getSymbolType());
  assertEquals(SymbolColour.ZERO_TRANSPARENT_ONE_BLACK,symbolSegment4.getSymbolColour());
  assertEquals(17,symbolSegment4.getNumberOfLinesPerSymbol());
  assertEquals(35,symbolSegment4.getNumberOfPixelsPerLine());
  assertEquals(0,symbolSegment4.getLineWidth());
  assertEquals(1,symbolSegment4.getNumberOfBitsPerPixel());
  assertEquals(11,symbolSegment4.getSymbolDisplayLevel());
  assertEquals(1,symbolSegment4.getSymbolAttachmentLevel());
  assertEquals(400,symbolSegment4.getSymbolLocationRow());
  assertEquals(400,symbolSegment4.getSymbolLocationColumn());
  assertEquals(0,symbolSegment4.getSymbolLocation2Row());
  assertEquals(0,symbolSegment4.getSymbolLocation2Column());
  assertEquals(""String_Node_Str"",symbolSegment4.getSymbolNumber());
  assertEquals(0,symbolSegment4.getSymbolRotation());
  assertEquals(75,symbolSegment4.getSymbolData().length);
  NitfLabelSegment labelSegment1=file.getLabelSegment(1);
  assertNotNull(labelSegment1);
  assertEquals(""String_Node_Str"",labelSegment1.getLabelIdentifier());
  assertUnclasAndEmpty(labelSegment1.getSecurityMetadata());
  assertEquals(""String_Node_Str"",labelSegment1.getSecurityMetadata().getDowngradeDateOrSpecialCase());
  assertEquals(""String_Node_Str"",labelSegment1.getSecurityMetadata().getDowngradeEvent());
  assertEquals(20,labelSegment1.getLabelLocationRow());
  assertEquals(160,labelSegment1.getLabelLocationColumn());
  assertEquals(0,labelSegment1.getLabelCellWidth());
  assertEquals(0,labelSegment1.getLabelCellHeight());
  assertEquals(4,labelSegment1.getLabelDisplayLevel());
  assertEquals(2,labelSegment1.getLabelAttachmentLevel());
  assertEquals(1,labelSegment1.getLabelTextColour().getRed());
  assertEquals(1,labelSegment1.getLabelTextColour().getGreen());
  assertEquals(1,labelSegment1.getLabelTextColour().getBlue());
  assertEquals(0,labelSegment1.getLabelBackgroundColour().getRed());
  assertEquals(0,labelSegment1.getLabelBackgroundColour().getGreen());
  assertEquals(0,labelSegment1.getLabelBackgroundColour().getBlue());
  assertEquals(""String_Node_Str"",labelSegment1.getLabelData());
  NitfLabelSegment labelSegment2=file.getLabelSegment(2);
  assertNotNull(labelSegment2);
  assertEquals(""String_Node_Str"",labelSegment2.getLabelIdentifier());
  assertUnclasAndEmpty(labelSegment2.getSecurityMetadata());
  assertEquals(""String_Node_Str"",labelSegment2.getSecurityMetadata().getDowngradeDateOrSpecialCase());
  assertEquals(""String_Node_Str"",labelSegment2.getSecurityMetadata().getDowngradeEvent());
  assertEquals(100,labelSegment2.getLabelLocationRow());
  assertEquals(100,labelSegment2.getLabelLocationColumn());
  assertEquals(0,labelSegment2.getLabelCellWidth());
  assertEquals(0,labelSegment2.getLabelCellHeight());
  assertEquals(6,labelSegment2.getLabelDisplayLevel());
  assertEquals(5,labelSegment2.getLabelAttachmentLevel());
  assertEquals(1,labelSegment2.getLabelTextColour().getRed());
  assertEquals(1,labelSegment2.getLabelTextColour().getGreen());
  assertEquals(1,labelSegment2.getLabelTextColour().getBlue());
  assertEquals(0,labelSegment2.getLabelBackgroundColour().getRed());
  assertEquals(0,labelSegment2.getLabelBackgroundColour().getGreen());
  assertEquals(0,labelSegment2.getLabelBackgroundColour().getBlue());
  assertEquals(""String_Node_Str"",labelSegment2.getLabelData());
  NitfLabelSegment labelSegment3=file.getLabelSegment(3);
  assertNotNull(labelSegment3);
  assertEquals(""String_Node_Str"",labelSegment3.getLabelIdentifier());
  assertUnclasAndEmpty(labelSegment3.getSecurityMetadata());
  assertEquals(""String_Node_Str"",labelSegment3.getSecurityMetadata().getDowngradeDateOrSpecialCase());
  assertEquals(""String_Node_Str"",labelSegment3.getSecurityMetadata().getDowngradeEvent());
  assertEquals(-20,labelSegment3.getLabelLocationRow());
  assertEquals(-20,labelSegment3.getLabelLocationColumn());
  assertEquals(0,labelSegment3.getLabelCellWidth());
  assertEquals(0,labelSegment3.getLabelCellHeight());
  assertEquals(10,labelSegment3.getLabelDisplayLevel());
  assertEquals(9,labelSegment3.getLabelAttachmentLevel());
  assertEquals(1,labelSegment3.getLabelTextColour().getRed());
  assertEquals(1,labelSegment3.getLabelTextColour().getGreen());
  assertEquals(1,labelSegment3.getLabelTextColour().getBlue());
  assertEquals(0,labelSegment3.getLabelBackgroundColour().getRed());
  assertEquals(0,labelSegment3.getLabelBackgroundColour().getGreen());
  assertEquals(0,labelSegment3.getLabelBackgroundColour().getBlue());
  assertEquals(""String_Node_Str"",labelSegment3.getLabelData());
  NitfLabelSegment labelSegment4=file.getLabelSegment(4);
  assertNotNull(labelSegment4);
  assertEquals(""String_Node_Str"",labelSegment4.getLabelIdentifier());
  assertUnclasAndEmpty(labelSegment4.getSecurityMetadata());
  assertEquals(""String_Node_Str"",labelSegment4.getSecurityMetadata().getDowngradeDateOrSpecialCase());
  assertEquals(""String_Node_Str"",labelSegment4.getSecurityMetadata().getDowngradeEvent());
  assertEquals(0,labelSegment4.getLabelLocationRow());
  assertEquals(25,labelSegment4.getLabelLocationColumn());
  assertEquals(0,labelSegment4.getLabelCellWidth());
  assertEquals(0,labelSegment4.getLabelCellHeight());
  assertEquals(13,labelSegment4.getLabelDisplayLevel());
  assertEquals(11,labelSegment4.getLabelAttachmentLevel());
  assertEquals(1,labelSegment4.getLabelTextColour().getRed());
  assertEquals(1,labelSegment4.getLabelTextColour().getGreen());
  assertEquals(1,labelSegment4.getLabelTextColour().getBlue());
  assertEquals(0,labelSegment4.getLabelBackgroundColour().getRed());
  assertEquals(0,labelSegment4.getLabelBackgroundColour().getGreen());
  assertEquals(0,labelSegment4.getLabelBackgroundColour().getBlue());
  assertEquals(""String_Node_Str"",labelSegment4.getLabelData());
  NitfTextSegment textSegment=file.getTextSegment(1);
  assertNotNull(textSegment);
  assertEquals(""String_Node_Str"",textSegment.getTextIdentifier());
  assertEquals(0,textSegment.getTextAttachmentLevel());
  assertEquals(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"").format(textSegment.getTextDateTime()));
  assertEquals(""String_Node_Str"",textSegment.getTextTitle());
  NitfSecurityMetadata textSecurityMetadata=textSegment.getSecurityMetadata();
  assertUnclasAndEmpty(textSecurityMetadata);
  assertEquals(""String_Node_Str"",textSecurityMetadata.getDowngradeDateOrSpecialCase());
  assertEquals(""String_Node_Str"",textSecurityMetadata.getDowngradeEvent());
  assertEquals(TextFormat.BASICCHARACTERSET,textSegment.getTextFormat());
  assertEquals(""String_Node_Str"",textSegment.getTextData());
  is.close();
}",0.7393168785838943
140830,"private void readCLEVEL() throws ParseException {
  nitfComplexityLevel=reader.readBytesAsInteger(CLEVEL_LENGTH);
  if ((nitfComplexityLevel < MIN_COMPLEXITY_LEVEL) || (nitfComplexityLevel > MAX_COMPLEXITY_LEVEL)) {
    throw new ParseException(String.format(""String_Node_Str"",nitfComplexityLevel),reader.numBytesRead);
  }
}","private void readCLEVEL() throws ParseException {
  nitfComplexityLevel=reader.readBytesAsInteger(CLEVEL_LENGTH);
  if ((nitfComplexityLevel < MIN_COMPLEXITY_LEVEL) || (nitfComplexityLevel > MAX_COMPLEXITY_LEVEL)) {
    throw new ParseException(String.format(""String_Node_Str"",nitfComplexityLevel),reader.getNumBytesRead());
  }
}",0.9893129770992366
140831,"/** 
 * Set latitude and longitude from Degrees/Minutes/Seconds string /param dms string representation in MIL-STD-2500C ddmmssXdddmmssY form
 */
public void setFromDMS(String dms) throws ParseException {
  if (dms.length() != ""String_Node_Str"".length()) {
    throw new ParseException(""String_Node_Str"",0);
  }
  String latDegrees=dms.substring(0,2);
  String latMinutes=dms.substring(2,4);
  String latSeconds=dms.substring(4,6);
  String latNS=dms.substring(6,7);
  String lonDegrees=dms.substring(7,10);
  String lonMinutes=dms.substring(10,12);
  String lonSeconds=dms.substring(12,14);
  String lonEW=dms.substring(14,15);
  if ((!latNS.equals(""String_Node_Str"")) && (!latNS.equals(""String_Node_Str""))) {
    throw new ParseException(String.format(""String_Node_Str"",latNS,dms),6);
  }
  if ((!lonEW.equals(""String_Node_Str"")) && (!lonEW.equals(""String_Node_Str""))) {
    throw new ParseException(String.format(""String_Node_Str"",lonEW,dms),14);
  }
  try {
    lat=buildDecimalDegrees(latDegrees,latMinutes,latSeconds);
    if (latNS == ""String_Node_Str"") {
      lat=-1 * lat;
    }
    lon=buildDecimalDegrees(lonDegrees,lonMinutes,lonSeconds);
    if (lonEW == ""String_Node_Str"") {
      lon=-1 * lon;
    }
  }
 catch (  NumberFormatException ex) {
    throw new ParseException(String.format(""String_Node_Str"",dms),0);
  }
}","/** 
 * Set latitude and longitude from Degrees/Minutes/Seconds string /param dms string representation in MIL-STD-2500C ddmmssXdddmmssY form
 */
public void setFromDMS(String dms) throws ParseException {
  if (dms.length() != ""String_Node_Str"".length()) {
    throw new ParseException(""String_Node_Str"",0);
  }
  String latDegrees=dms.substring(0,2);
  String latMinutes=dms.substring(2,4);
  String latSeconds=dms.substring(4,6);
  String latNS=dms.substring(6,7);
  String lonDegrees=dms.substring(7,10);
  String lonMinutes=dms.substring(10,12);
  String lonSeconds=dms.substring(12,14);
  String lonEW=dms.substring(14,15);
  if ((!latNS.equals(""String_Node_Str"")) && (!latNS.equals(""String_Node_Str""))) {
    throw new ParseException(String.format(""String_Node_Str"",latNS,dms),6);
  }
  if ((!lonEW.equals(""String_Node_Str"")) && (!lonEW.equals(""String_Node_Str""))) {
    throw new ParseException(String.format(""String_Node_Str"",lonEW,dms),14);
  }
  try {
    lat=buildDecimalDegrees(latDegrees,latMinutes,latSeconds);
    if (latNS.equals(""String_Node_Str"")) {
      lat=-1.0 * lat;
    }
    lon=buildDecimalDegrees(lonDegrees,lonMinutes,lonSeconds);
    if (lonEW.equals(""String_Node_Str"")) {
      lon=-1.0 * lon;
    }
  }
 catch (  NumberFormatException ex) {
    throw new ParseException(String.format(""String_Node_Str"",dms),0);
  }
}",0.9634328358208956
140832,"public List<Change> getDiffedChanges() throws VcsException {
  final List<Change> result=new ArrayList<Change>();
  for (  Map.Entry<String,StringBuilder> e : myPatches.entrySet()) {
    final File file=new File(myBase,e.getKey().trim());
    final ContentRevision after=createAfter(file,FileStatus.MODIFIED);
    final String newContent=new DiffUtil().execute(after.getContent(),e.getValue().toString(),file.getName());
    final ContentRevision before=new SimpleContentRevision(newContent,new FilePathImpl(file,false),""String_Node_Str"");
    result.add(new Change(before,after));
  }
  return result;
}","public List<Change> getDiffedChanges() throws VcsException {
  File wcRoot=RootUtil.getWcRoot(myBase);
  wcRoot=wcRoot == null ? myBase : wcRoot;
  final List<Change> result=new ArrayList<Change>();
  for (  Map.Entry<String,StringBuilder> e : myPatches.entrySet()) {
    final File file=new File(wcRoot,e.getKey().trim());
    final ContentRevision after=createAfter(file,FileStatus.MODIFIED);
    final String newContent=new DiffUtil().execute(after.getContent(),e.getValue().toString(),file.getName());
    final ContentRevision before=new SimpleContentRevision(newContent,new FilePathImpl(file,false),""String_Node_Str"");
    result.add(new Change(before,after));
  }
  return result;
}",0.9249806651198764
140833,"@DELETE @Path(""String_Node_Str"") @Consumes(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") public Comment deleteComment(@PathParam(""String_Node_Str"") int id){
  Comment ret=phoneCatalog.incLike(id);
  return ret;
}","@DELETE @Path(""String_Node_Str"") @Consumes(""String_Node_Str"") @RolesAllowed(""String_Node_Str"") public Comment deleteComment(@PathParam(""String_Node_Str"") int id){
  Comment ret=phoneCatalog.deleteComment(id);
  return ret;
}",0.9547511312217196
140834,"public static void main(String[] args){
  String outputDir=""String_Node_Str"";
  try {
    SeedableRandomPool pool=null;
    try {
      FAnovaOptions fanovaOpts=new FAnovaOptions();
      JCommander jcom;
      ;
      args=StateFactoryOptions.processScenarioStateRestore(args);
      ScenarioOptions scenarioOptions=fanovaOpts.scenOpts;
      try {
        jcom=JCommanderHelper.parseCheckingForHelpAndVersion(args,fanovaOpts);
        String runGroupName=fanovaOpts.getRunGroupName();
        scenarioOptions.makeOutputDirectory(runGroupName);
        outputDir=scenarioOptions.outputDirectory + File.separator + runGroupName;
        fanovaOpts.loggingOptions.initializeLogging(outputDir,fanovaOpts.seedOptions.numRun);
      }
  finally {
        log=LoggerFactory.getLogger(FAnovaExecutor.class);
      }
      VersionTracker.logVersions();
      for (      String name : jcom.getParameterFilesToRead()) {
        log.info(""String_Node_Str"",name);
      }
      if (fanovaOpts.rfOptions.logModel == null) {
switch (fanovaOpts.scenOpts.runObj) {
case RUNTIME:
          fanovaOpts.rfOptions.logModel=true;
        break;
case QUALITY:
      fanovaOpts.rfOptions.logModel=false;
  }
}
StateFactory sf=new LegacyStateFactory(null,fanovaOpts.stateFactoryOptions.restoreStateFrom);
AlgorithmExecutionConfig execConfig=scenarioOptions.algoExecOptions.getAlgorithmExecutionConfigSkipDirCheck();
ParamConfigurationSpace configSpace=execConfig.getParamFile();
List<ProblemInstance> instances=scenarioOptions.getTrainingAndTestProblemInstances(new File(""String_Node_Str"").getAbsolutePath(),0,0,true,false,false,false).getTrainingInstances().getInstances();
RunHistory rh=new ThreadSafeRunHistoryWrapper(new NewRunHistory(scenarioOptions.intraInstanceObj,scenarioOptions.interInstanceObj,scenarioOptions.runObj));
if (fanovaOpts.stateFactoryOptions.restoreIteration == null) {
  throw new ParameterException(""String_Node_Str"");
}
StateDeserializer sd=sf.getStateDeserializer(""String_Node_Str"",fanovaOpts.stateFactoryOptions.restoreIteration,configSpace,instances,execConfig,rh);
pool=fanovaOpts.seedOptions.getSeedableRandomPool();
if (fanovaOpts.numTrainingSamples > 0) {
  List<AlgorithmRun> algorithmRuns=rh.getAlgorithmRuns();
  Integer[] indices=new Integer[algorithmRuns.size()];
  for (int i=0; i < algorithmRuns.size(); i++) {
    indices[i]=i;
  }
  List<Integer> shuffledIndices=Arrays.asList(indices);
  Collections.shuffle(shuffledIndices,pool.getRandom(""String_Node_Str""));
  RunHistory subsampledRH=new ThreadSafeRunHistoryWrapper(new NewRunHistory(scenarioOptions.intraInstanceObj,scenarioOptions.interInstanceObj,scenarioOptions.runObj));
  for (int i=0; i < fanovaOpts.numTrainingSamples; i++) {
    subsampledRH.append(algorithmRuns.get(shuffledIndices.get(i)));
  }
  rh=subsampledRH;
}
FunctionalANOVAModelBuilder famb=new FunctionalANOVAModelBuilder();
famb.learnModel(instances,rh,configSpace,fanovaOpts.rfOptions,fanovaOpts.mbOptions,scenarioOptions,true,pool);
boolean compareToDef=fanovaOpts.compare.equals(Improvements.DEFAULT) ? true : false;
double quantile=fanovaOpts.compare.equals(Improvements.QUANTILE) ? fanovaOpts.quantileToCompare : -1;
if (fanovaOpts.mode.equals(""String_Node_Str"")) {
  FunctionalANOVAVarianceDecompose favd=new FunctionalANOVAVarianceDecompose(famb.getRandomForest(),rh.getAlgorithmRuns(),configSpace,pool.getRandom(""String_Node_Str""),compareToDef,quantile,fanovaOpts.rfOptions.logModel);
  FanovaRemote remote=new FanovaRemote(favd,new IPCMechanism(""String_Node_Str"",fanovaOpts.port),configSpace);
  remote.run();
}
 else {
  FunctionalANOVARunner.decomposeVariance(famb.getRandomForest(),rh.getAlgorithmRuns(),configSpace,pool.getRandom(""String_Node_Str""),compareToDef,quantile,fanovaOpts.computePairwiseInteration,outputDir,fanovaOpts.rfOptions.logModel,fanovaOpts.plotMarginals);
}
}
  finally {
if (pool != null) {
  pool.logUsage();
}
}
}
 catch (ParameterException e) {
System.out.println(e);
log.error(e.getMessage());
if (log.isDebugEnabled()) {
log.error(""String_Node_Str"",e);
}
}
catch (Exception e) {
e.printStackTrace();
}
}","public static void main(String[] args){
  String outputDir=""String_Node_Str"";
  try {
    SeedableRandomPool pool=null;
    try {
      FAnovaOptions fanovaOpts=new FAnovaOptions();
      JCommander jcom;
      ;
      args=StateFactoryOptions.processScenarioStateRestore(args);
      ScenarioOptions scenarioOptions=fanovaOpts.scenOpts;
      try {
        jcom=JCommanderHelper.parseCheckingForHelpAndVersion(args,fanovaOpts);
        String runGroupName=fanovaOpts.getRunGroupName();
        scenarioOptions.makeOutputDirectory(runGroupName);
        outputDir=scenarioOptions.outputDirectory + File.separator + runGroupName;
        fanovaOpts.loggingOptions.initializeLogging(outputDir,fanovaOpts.seedOptions.numRun);
      }
  finally {
        log=LoggerFactory.getLogger(FAnovaExecutor.class);
      }
      VersionTracker.logVersions();
      for (      String name : jcom.getParameterFilesToRead()) {
        log.info(""String_Node_Str"",name);
      }
      if (fanovaOpts.rfOptions.logModel == null) {
switch (fanovaOpts.scenOpts.runObj) {
case RUNTIME:
          fanovaOpts.rfOptions.logModel=true;
        break;
case QUALITY:
      fanovaOpts.rfOptions.logModel=false;
  }
}
StateFactory sf=new LegacyStateFactory(null,fanovaOpts.stateFactoryOptions.restoreStateFrom);
AlgorithmExecutionConfig execConfig=scenarioOptions.algoExecOptions.getAlgorithmExecutionConfigSkipDirCheck();
ParamConfigurationSpace configSpace=execConfig.getParamFile();
List<ProblemInstance> instances=scenarioOptions.getTrainingAndTestProblemInstances(new File(""String_Node_Str"").getAbsolutePath(),0,0,true,false,false,false).getTrainingInstances().getInstances();
RunHistory rh=new ThreadSafeRunHistoryWrapper(new NewRunHistory(scenarioOptions.intraInstanceObj,scenarioOptions.interInstanceObj,scenarioOptions.runObj));
if (fanovaOpts.stateFactoryOptions.restoreIteration == null) {
  throw new ParameterException(""String_Node_Str"");
}
StateDeserializer sd=sf.getStateDeserializer(""String_Node_Str"",fanovaOpts.stateFactoryOptions.restoreIteration,configSpace,instances,execConfig,rh);
pool=fanovaOpts.seedOptions.getSeedableRandomPool();
if (fanovaOpts.numTrainingSamples > 0) {
  List<AlgorithmRun> algorithmRuns=rh.getAlgorithmRuns();
  Integer[] indices=new Integer[algorithmRuns.size()];
  for (int i=0; i < algorithmRuns.size(); i++) {
    indices[i]=i;
  }
  List<Integer> shuffledIndices=Arrays.asList(indices);
  Collections.shuffle(shuffledIndices,pool.getRandom(""String_Node_Str""));
  RunHistory subsampledRH=new ThreadSafeRunHistoryWrapper(new NewRunHistory(scenarioOptions.intraInstanceObj,scenarioOptions.interInstanceObj,scenarioOptions.runObj));
  for (int i=0; i < fanovaOpts.numTrainingSamples; i++) {
    subsampledRH.append(algorithmRuns.get(shuffledIndices.get(i)));
  }
  rh=subsampledRH;
}
System.out.println(""String_Node_Str"");
System.out.println(fanovaOpts.rfOptions.splitMin);
FunctionalANOVAModelBuilder famb=new FunctionalANOVAModelBuilder();
famb.learnModel(instances,rh,configSpace,fanovaOpts.rfOptions,fanovaOpts.mbOptions,scenarioOptions,true,pool);
boolean compareToDef=fanovaOpts.compare.equals(Improvements.DEFAULT) ? true : false;
double quantile=fanovaOpts.compare.equals(Improvements.QUANTILE) ? fanovaOpts.quantileToCompare : -1;
if (fanovaOpts.mode.equals(""String_Node_Str"")) {
  FunctionalANOVAVarianceDecompose favd=new FunctionalANOVAVarianceDecompose(famb.getRandomForest(),rh.getAlgorithmRuns(),configSpace,pool.getRandom(""String_Node_Str""),compareToDef,quantile,fanovaOpts.rfOptions.logModel);
  FanovaRemote remote=new FanovaRemote(favd,new IPCMechanism(""String_Node_Str"",fanovaOpts.port),configSpace);
  remote.run();
}
 else {
  FunctionalANOVARunner.decomposeVariance(famb.getRandomForest(),rh.getAlgorithmRuns(),configSpace,pool.getRandom(""String_Node_Str""),compareToDef,quantile,fanovaOpts.computePairwiseInteration,outputDir,fanovaOpts.rfOptions.logModel,fanovaOpts.plotMarginals);
}
}
  finally {
if (pool != null) {
  pool.logUsage();
}
}
}
 catch (ParameterException e) {
System.out.println(e);
log.error(e.getMessage());
if (log.isDebugEnabled()) {
log.error(""String_Node_Str"",e);
}
}
catch (Exception e) {
e.printStackTrace();
}
}",0.9891041162227604
140835,"public static void decomposeVariance(RandomForest existingForest,List<AlgorithmRun> testRuns,ParamConfigurationSpace configSpace,Random rand,boolean compareToDef,double quantileToCompareTo,boolean computePairwiseInteraction,String outputDir,boolean logModel,boolean plotMarginals) throws IOException, InterruptedException {
  RandomForest forest=ModelEvaluation.extractMarginalForest(existingForest,testRuns,configSpace,rand,compareToDef,quantileToCompareTo);
  RandomForestPreprocessor.preprocessRandomForest(forest,configSpace);
  DecimalFormat decim=new DecimalFormat(""String_Node_Str"");
  DecimalFormat decim2=new DecimalFormat(""String_Node_Str"");
  String s;
  double timeForComputingMainEffects=0;
  double timeForComputingBinaryEffects=0;
  HashMap<HashSet<Integer>,Double> totalFractionsExplained=new HashMap<HashSet<Integer>,Double>();
  double sumOfFractionsOfBinaries=0;
  int numDim=configSpace.getCategoricalSize().length;
  double[][] allObservations=new double[numDim][];
  double[][] allIntervalSizes=new double[numDim][];
  for (int numTree=0; numTree < forest.Trees.length; numTree++) {
    HashSet<Integer> allVariableIndices=new HashSet<Integer>();
    for (int j=0; j < configSpace.getCategoricalSize().length; j++) {
      allVariableIndices.add(new Integer(j));
    }
    double thisTreeTotalVariance=RandomForestPreprocessor.computeTotalVarianceOfRegressionTree(forest.Trees[numTree],configSpace);
    if (thisTreeTotalVariance == 0.0) {
      s=""String_Node_Str"" + numTree + ""String_Node_Str"";
      log.info(s);
      continue;
    }
    s=""String_Node_Str"" + numTree + ""String_Node_Str""+ thisTreeTotalVariance;
    log.info(s);
    double thisTreeFractionOfVarianceExplainedByMarginals=0;
    HashMap<HashSet<Integer>,Double> thisTreeVarianceContributions=new HashMap<HashSet<Integer>,Double>();
    HashMap<Integer,Double> singleVarianceContributions=new HashMap<Integer,Double>();
    double marg;
    long start=System.nanoTime();
    for (int dim=0; dim < numDim; dim++) {
      int numVals=configSpace.getCategoricalSize()[dim];
      if (numVals > 0) {
        allObservations[dim]=new double[numVals];
        allIntervalSizes[dim]=new double[numVals];
        for (int valIndex=0; valIndex < numVals; valIndex++) {
          allObservations[dim][valIndex]=valIndex;
          allIntervalSizes[dim][valIndex]=1.0 / numVals;
        }
      }
 else {
        List<Double> splitPoints=new ArrayList<Double>();
        for (int node_index=0; node_index < forest.Trees[numTree].var.length; node_index++) {
          if (forest.Trees[numTree].var[node_index] == dim + 1) {
            splitPoints.add(forest.Trees[numTree].cut[node_index]);
          }
        }
        splitPoints.add(0.0);
        splitPoints.add(1.0);
        Collections.sort(splitPoints);
        if (splitPoints.size() == 2) {
          allObservations[dim]=new double[0];
          allIntervalSizes[dim]=new double[0];
        }
 else {
          allObservations[dim]=new double[splitPoints.size() - 1];
          allIntervalSizes[dim]=new double[splitPoints.size() - 1];
          for (int lowerIntervalId=0; lowerIntervalId < splitPoints.size() - 1; lowerIntervalId++) {
            allObservations[dim][lowerIntervalId]=(splitPoints.get(lowerIntervalId) + splitPoints.get(lowerIntervalId + 1)) / 2;
            allIntervalSizes[dim][lowerIntervalId]=splitPoints.get(lowerIntervalId + 1) - splitPoints.get(lowerIntervalId);
          }
        }
      }
    }
    for (int dim=0; dim < numDim; dim++) {
      int[] indicesOfObservations=new int[1];
      indicesOfObservations[0]=dim;
      ArrayList<Double> as=new ArrayList<Double>();
      double weightedSum=0, weightedSumOfSquares=0;
      for (int valIndex=0; valIndex < allObservations[dim].length; valIndex++) {
        double[] observations=new double[1];
        observations[0]=allObservations[dim][valIndex];
        log.debug(""String_Node_Str"" + numTree + ""String_Node_Str""+ dim+ ""String_Node_Str""+ observations[0]);
        marg=forest.Trees[numTree].marginalPerformance(indicesOfObservations,observations);
        log.debug(""String_Node_Str"" + numTree + ""String_Node_Str""+ dim+ ""String_Node_Str""+ marg);
        as.add(marg);
        double intervalSize=allIntervalSizes[dim][valIndex];
        weightedSum+=marg * intervalSize;
        weightedSumOfSquares+=marg * marg * intervalSize;
      }
      double thisMarginalVarianceContribution=weightedSumOfSquares - weightedSum * weightedSum;
      log.debug(""String_Node_Str"" + numTree + ""String_Node_Str""+ thisMarginalVarianceContribution);
      double thisMarginalFractionOfVarianceExplained=thisMarginalVarianceContribution / thisTreeTotalVariance * 100;
      if (Double.isNaN(thisMarginalFractionOfVarianceExplained)) {
        throw new RuntimeException(""String_Node_Str"");
      }
      thisTreeFractionOfVarianceExplainedByMarginals+=thisMarginalFractionOfVarianceExplained;
      s=""String_Node_Str"" + numTree + ""String_Node_Str""+ decim.format(thisMarginalFractionOfVarianceExplained)+ ""String_Node_Str""+ configSpace.getParameterNames().get(dim);
      log.info(s);
      HashSet<Integer> set=new HashSet<Integer>();
      set.add(dim);
      thisTreeVarianceContributions.put(set,thisMarginalVarianceContribution);
      singleVarianceContributions.put(dim,thisMarginalVarianceContribution);
    }
    double thisTreeTimeForComputingMainEffects=(System.nanoTime() - start) * 1.0e-9;
    timeForComputingMainEffects+=thisTreeTimeForComputingMainEffects;
    s=""String_Node_Str"" + numTree + ""String_Node_Str""+ ""String_Node_Str""+ thisTreeFractionOfVarianceExplainedByMarginals+ ""String_Node_Str""+ thisTreeTimeForComputingMainEffects+ ""String_Node_Str"";
    log.info(s);
    double thisTreeFractionOfVarianceExplainedByBinaries=0;
    double thisTreeTimeForComputingBinaryEffects=0;
    if (computePairwiseInteraction) {
      for (int dim1=0; dim1 < numDim; dim1++) {
        for (int dim2=dim1 + 1; dim2 < numDim; dim2++) {
          int[] indicesOfObservations=new int[2];
          indicesOfObservations[0]=dim1;
          ArrayList<Double> as=new ArrayList<Double>();
          indicesOfObservations[1]=dim2;
          double weightedSum=0, weightedSumOfSquares=0;
          for (int valIndex1=0; valIndex1 < allObservations[dim1].length; valIndex1++) {
            for (int valIndex2=0; valIndex2 < allObservations[dim2].length; valIndex2++) {
              double[] observations=new double[2];
              observations[0]=allObservations[dim1][valIndex1];
              observations[1]=allObservations[dim2][valIndex2];
              double intervalSize1=allIntervalSizes[dim1][valIndex1];
              double intervalSize2=allIntervalSizes[dim2][valIndex2];
              marg=forest.Trees[numTree].marginalPerformance(indicesOfObservations,observations);
              weightedSum+=marg * intervalSize1 * intervalSize2;
              weightedSumOfSquares+=marg * marg * intervalSize1* intervalSize2;
              s=""String_Node_Str"" + configSpace.getParameterNames().get(dim1) + ""String_Node_Str""+ observations[0]+ ""String_Node_Str""+ configSpace.getParameterNames().get(dim2)+ ""String_Node_Str""+ observations[1]+ ""String_Node_Str""+ marg;
              as.add(marg);
            }
          }
          double thisBinaryVarianceContribution=weightedSumOfSquares - weightedSum * weightedSum;
          thisBinaryVarianceContribution-=singleVarianceContributions.get(dim1);
          thisBinaryVarianceContribution-=singleVarianceContributions.get(dim2);
          log.debug(""String_Node_Str"" + dim1 + ""String_Node_Str""+ singleVarianceContributions.get(dim1));
          log.debug(""String_Node_Str"" + dim2 + ""String_Node_Str""+ singleVarianceContributions.get(dim2));
          double thisBinaryFractionOfVarianceExplained=thisBinaryVarianceContribution / thisTreeTotalVariance * 100;
          thisTreeFractionOfVarianceExplainedByBinaries+=thisBinaryFractionOfVarianceExplained;
          s=decim.format(thisBinaryFractionOfVarianceExplained) + ""String_Node_Str"" + configSpace.getParameterNames().get(dim1)+ ""String_Node_Str""+ configSpace.getParameterNames().get(dim2);
          log.debug(s);
          HashSet<Integer> set=new HashSet<Integer>();
          set.add(dim1);
          set.add(dim2);
          thisTreeVarianceContributions.put(set,thisBinaryVarianceContribution);
        }
      }
      thisTreeTimeForComputingBinaryEffects=(System.nanoTime() - start) * 1.0e-9 - thisTreeTimeForComputingMainEffects;
      timeForComputingBinaryEffects+=thisTreeTimeForComputingBinaryEffects;
      s=""String_Node_Str"" + numTree + ""String_Node_Str""+ ""String_Node_Str""+ thisTreeFractionOfVarianceExplainedByBinaries+ ""String_Node_Str""+ thisTreeTimeForComputingBinaryEffects+ ""String_Node_Str"";
      log.info(s);
    }
    double tmpThisTreeFractionExplained=0;
    for (    HashSet<Integer> indexSet : thisTreeVarianceContributions.keySet()) {
      double previousFractionExplained=0;
      if (numTree > 0) {
        previousFractionExplained=totalFractionsExplained.get(indexSet);
      }
      double thisFractionExplained=thisTreeVarianceContributions.get(indexSet) / thisTreeTotalVariance * 100;
      log.debug(""String_Node_Str"" + indexSet.toString() + ""String_Node_Str""+ numTree+ ""String_Node_Str""+ thisTreeVarianceContributions.get(indexSet));
      log.debug(""String_Node_Str"" + numTree + ""String_Node_Str""+ thisTreeTotalVariance);
      tmpThisTreeFractionExplained+=thisFractionExplained;
      totalFractionsExplained.put(indexSet,previousFractionExplained + 1.0 / forest.Trees.length * thisFractionExplained);
      log.debug(""String_Node_Str"" + numTree + ""String_Node_Str""+ totalFractionsExplained.get(indexSet));
    }
    log.debug(tmpThisTreeFractionExplained + ""String_Node_Str"");
  }
  double tmpFractionExplained=0;
  for (  HashSet<Integer> indexSet : totalFractionsExplained.keySet()) {
    tmpFractionExplained+=totalFractionsExplained.get(indexSet);
  }
  log.debug(tmpFractionExplained + ""String_Node_Str"");
  double sumOfFractionsOfMarginals=0;
  for (  HashSet<Integer> indexSet : totalFractionsExplained.keySet()) {
    if (indexSet.size() == 1) {
      sumOfFractionsOfMarginals+=totalFractionsExplained.get(indexSet);
    }
  }
  s=""String_Node_Str"" + sumOfFractionsOfMarginals + ""String_Node_Str"";
  log.info(s);
  if (computePairwiseInteraction) {
    sumOfFractionsOfBinaries=0;
    for (    HashSet<Integer> indexSet : totalFractionsExplained.keySet()) {
      if (indexSet.size() == 2) {
        sumOfFractionsOfBinaries+=totalFractionsExplained.get(indexSet);
      }
    }
    s=""String_Node_Str"" + sumOfFractionsOfBinaries + ""String_Node_Str"";
    log.info(s);
  }
  s=""String_Node_Str"" + decim.format(sumOfFractionsOfMarginals) + ""String_Node_Str""+ decim.format(timeForComputingMainEffects)+ ""String_Node_Str""+ decim.format(sumOfFractionsOfBinaries)+ ""String_Node_Str""+ decim.format(timeForComputingBinaryEffects)+ ""String_Node_Str"";
  log.info(s);
  ArrayList<String> paramNamesOrderByMarginalVarianceExplained=new ArrayList<String>();
  int idx=0;
  ArrayList<Map.Entry<HashSet,Double>> list=sortedKeysByValue(totalFractionsExplained);
  int numMaxEffectsToPrint=30;
  s=""String_Node_Str"" + numMaxEffectsToPrint + ""String_Node_Str"";
  log.info(s);
  for (  Map.Entry<HashSet,Double> entry : list) {
    HashSet<Integer> set=entry.getKey();
    numMaxEffectsToPrint--;
    if (set.size() == 1) {
      Integer varIndex=(Integer)set.toArray()[0];
      String parameterName=configSpace.getParameterNames().get(varIndex);
      paramNamesOrderByMarginalVarianceExplained.add(parameterName);
      if (numMaxEffectsToPrint > 0) {
        s=decim2.format(entry.getValue()) + ""String_Node_Str"" + parameterName;
        log.info(s);
      }
    }
 else     if (set.size() == 2) {
      Integer varIndex1=(Integer)set.toArray()[0];
      Integer varIndex2=(Integer)set.toArray()[1];
      String varName1=configSpace.getParameterNames().get(varIndex1);
      String varName2=configSpace.getParameterNames().get(varIndex2);
      if (numMaxEffectsToPrint > 0) {
        s=decim2.format(entry.getValue()) + ""String_Node_Str"" + varName1+ ""String_Node_Str""+ varName2;
        log.info(s);
      }
    }
  }
  String allSingleMarginalsOutputFile=outputDir + ""String_Node_Str"";
  PrintWriter writer=null;
  try {
    writer=new PrintWriter(allSingleMarginalsOutputFile,""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (plotMarginals) {
    log.info(""String_Node_Str"");
    for (int dim=0; dim < numDim; dim++) {
      String parameterName=configSpace.getParameterNames().get(dim);
      String parameterFileName=parameterName.replace('/','_');
      double[] valuesToPredictFor;
      if (configSpace.getCategoricalSize()[dim] > 0) {
        valuesToPredictFor=allObservations[dim];
      }
 else {
        int numVals=11;
        valuesToPredictFor=new double[numVals];
        for (int valIndex=0; valIndex < numVals; valIndex++) {
          valuesToPredictFor[valIndex]=(valIndex + 0.0) / (numVals - 1);
        }
      }
      String singleMarginalOutputFile=outputDir + ""String_Node_Str"" + parameterFileName+ ""String_Node_Str"";
      PrintWriter singleWriter=null;
      try {
        singleWriter=new PrintWriter(singleMarginalOutputFile,""String_Node_Str"");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      int[] indicesOfObservations=new int[1];
      indicesOfObservations[0]=dim;
      for (int valIndex=0; valIndex < valuesToPredictFor.length; valIndex++) {
        double[] observations=new double[1];
        observations[0]=valuesToPredictFor[valIndex];
        ArrayList<Double> margs=new ArrayList<Double>();
        for (int numTree=0; numTree < forest.Trees.length; numTree++) {
          margs.add(forest.Trees[numTree].marginalPerformance(indicesOfObservations,observations));
        }
        double avg=0;
        for (        Double marg : margs) {
          avg+=marg / margs.size();
        }
        double std=0;
        for (        Double marg : margs) {
          std+=Math.pow(marg - avg,2) / margs.size();
        }
        std=Math.sqrt(std);
        if (configSpace.getCategoricalSize()[dim] > 0) {
          writer.println(configSpace.getValuesMap().get(parameterName).get(valIndex) + ""String_Node_Str"" + avg+ ""String_Node_Str""+ std);
          singleWriter.println(valIndex + ""String_Node_Str"" + configSpace.getValuesMap().get(parameterName).get(valIndex)+ ""String_Node_Str""+ avg+ ""String_Node_Str""+ std);
        }
 else {
          writer.println(valuesToPredictFor[valIndex] + ""String_Node_Str"" + avg+ ""String_Node_Str""+ std);
          Map<String,NormalizedRange> normalizeRangeMap=configSpace.getNormalizedRangeMap();
          NormalizedRange normalizedRange=normalizeRangeMap.get(parameterName);
          singleWriter.println(valIndex + ""String_Node_Str"" + normalizedRange.unnormalizeValue(valuesToPredictFor[valIndex])+ ""String_Node_Str""+ avg+ ""String_Node_Str""+ std);
        }
      }
      writer.println();
      singleWriter.close();
      String gnuplotFile=outputDir + ""String_Node_Str"" + parameterFileName+ ""String_Node_Str"";
      singleWriter=null;
      try {
        singleWriter=new PrintWriter(gnuplotFile,""String_Node_Str"");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      singleWriter.println(""String_Node_Str"");
      singleWriter.println(""String_Node_Str"");
      String pdfFilename=outputDir + ""String_Node_Str"" + parameterFileName+ ""String_Node_Str"";
      singleWriter.println(""String_Node_Str"" + pdfFilename + ""String_Node_Str"");
      singleWriter.println(""String_Node_Str"");
      singleWriter.println(""String_Node_Str"");
      singleWriter.println(""String_Node_Str"" + singleMarginalOutputFile + ""String_Node_Str"");
      singleWriter.println(""String_Node_Str"" + singleMarginalOutputFile + ""String_Node_Str"");
      singleWriter.close();
      String cmd=""String_Node_Str"" + gnuplotFile;
      Process p=Runtime.getRuntime().exec(cmd);
      p.waitFor();
    }
    writer.close();
    log.info(""String_Node_Str"" + allSingleMarginalsOutputFile);
    log.info(""String_Node_Str"");
    String texFile=outputDir + ""String_Node_Str"";
    writer=null;
    try {
      writer=new PrintWriter(texFile,""String_Node_Str"");
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    int count=0;
    for (    String parameterName : paramNamesOrderByMarginalVarianceExplained) {
      String parameterFileName=parameterName.replace('/','_');
      int indexOfParameter=configSpace.getParameterNamesInAuthorativeOrder().indexOf(parameterName);
      HashSet<Integer> set=new HashSet<Integer>();
      set.add(indexOfParameter);
      double fractionExplainedByThisMarginal=totalFractionsExplained.get(set);
      writer.println(""String_Node_Str"");
      writer.println(""String_Node_Str"");
      String singleMarginalOutputFile=outputDir + ""String_Node_Str"" + parameterFileName+ ""String_Node_Str"";
      writer.println(""String_Node_Str"" + singleMarginalOutputFile + ""String_Node_Str"");
      writer.println(""String_Node_Str"" + parameterName.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ decim2.format(fractionExplainedByThisMarginal)+ ""String_Node_Str""+ parameterName+ ""String_Node_Str"");
      writer.println(""String_Node_Str"");
      writer.println(""String_Node_Str"");
      if (count++ % 4 == 0)       writer.println(""String_Node_Str"");
    }
    writer.println(""String_Node_Str"");
    writer.close();
    String cmd=""String_Node_Str"" + texFile + ""String_Node_Str"";
    log.info(""String_Node_Str"" + cmd);
  }
  log.info(""String_Node_Str"");
}","public static void decomposeVariance(RandomForest existingForest,List<AlgorithmRun> testRuns,ParamConfigurationSpace configSpace,Random rand,boolean compareToDef,double quantileToCompareTo,boolean computePairwiseInteraction,String outputDir,boolean logModel,boolean plotMarginals) throws IOException, InterruptedException {
  RandomForest forest=ModelEvaluation.extractMarginalForest(existingForest,testRuns,configSpace,rand,compareToDef,quantileToCompareTo);
  RandomForestPreprocessor.preprocessRandomForest(forest,configSpace);
  DecimalFormat decim=new DecimalFormat(""String_Node_Str"");
  DecimalFormat decim2=new DecimalFormat(""String_Node_Str"");
  String s;
  double timeForComputingMainEffects=0;
  double timeForComputingBinaryEffects=0;
  HashMap<HashSet<Integer>,Double> totalFractionsExplained=new HashMap<HashSet<Integer>,Double>();
  double sumOfFractionsOfBinaries=0;
  int numDim=configSpace.getCategoricalSize().length;
  double[][] allObservations=new double[numDim][];
  double[][] allIntervalSizes=new double[numDim][];
  for (int numTree=0; numTree < forest.Trees.length; numTree++) {
    HashSet<Integer> allVariableIndices=new HashSet<Integer>();
    for (int j=0; j < configSpace.getCategoricalSize().length; j++) {
      allVariableIndices.add(new Integer(j));
    }
    double thisTreeTotalVariance=RandomForestPreprocessor.computeTotalVarianceOfRegressionTree(forest.Trees[numTree],configSpace);
    if (thisTreeTotalVariance == 0.0) {
      s=""String_Node_Str"" + numTree + ""String_Node_Str"";
      log.info(s);
      continue;
    }
    s=""String_Node_Str"" + numTree + ""String_Node_Str""+ thisTreeTotalVariance;
    log.info(s);
    double thisTreeFractionOfVarianceExplainedByMarginals=0;
    HashMap<HashSet<Integer>,Double> thisTreeVarianceContributions=new HashMap<HashSet<Integer>,Double>();
    HashMap<Integer,Double> singleVarianceContributions=new HashMap<Integer,Double>();
    double marg;
    long start=System.nanoTime();
    for (int dim=0; dim < numDim; dim++) {
      int numVals=configSpace.getCategoricalSize()[dim];
      if (numVals > 0) {
        allObservations[dim]=new double[numVals];
        allIntervalSizes[dim]=new double[numVals];
        for (int valIndex=0; valIndex < numVals; valIndex++) {
          allObservations[dim][valIndex]=valIndex;
          allIntervalSizes[dim][valIndex]=1.0 / numVals;
        }
      }
 else {
        List<Double> splitPoints=new ArrayList<Double>();
        for (int node_index=0; node_index < forest.Trees[numTree].var.length; node_index++) {
          if (forest.Trees[numTree].var[node_index] == dim + 1) {
            splitPoints.add(forest.Trees[numTree].cut[node_index]);
          }
        }
        splitPoints.add(0.0);
        splitPoints.add(1.0);
        Collections.sort(splitPoints);
        allObservations[dim]=new double[splitPoints.size() - 1];
        allIntervalSizes[dim]=new double[splitPoints.size() - 1];
        for (int lowerIntervalId=0; lowerIntervalId < splitPoints.size() - 1; lowerIntervalId++) {
          allObservations[dim][lowerIntervalId]=(splitPoints.get(lowerIntervalId) + splitPoints.get(lowerIntervalId + 1)) / 2;
          allIntervalSizes[dim][lowerIntervalId]=splitPoints.get(lowerIntervalId + 1) - splitPoints.get(lowerIntervalId);
        }
      }
    }
    for (int dim=0; dim < numDim; dim++) {
      int[] indicesOfObservations=new int[1];
      indicesOfObservations[0]=dim;
      ArrayList<Double> as=new ArrayList<Double>();
      double weightedSum=0, weightedSumOfSquares=0;
      for (int valIndex=0; valIndex < allObservations[dim].length; valIndex++) {
        double[] observations=new double[1];
        observations[0]=allObservations[dim][valIndex];
        log.debug(""String_Node_Str"" + numTree + ""String_Node_Str""+ dim+ ""String_Node_Str""+ observations[0]);
        marg=forest.Trees[numTree].marginalPerformance(indicesOfObservations,observations);
        log.debug(""String_Node_Str"" + numTree + ""String_Node_Str""+ dim+ ""String_Node_Str""+ marg);
        as.add(marg);
        double intervalSize=allIntervalSizes[dim][valIndex];
        weightedSum+=marg * intervalSize;
        weightedSumOfSquares+=marg * marg * intervalSize;
      }
      double thisMarginalVarianceContribution=weightedSumOfSquares - weightedSum * weightedSum;
      log.debug(""String_Node_Str"" + numTree + ""String_Node_Str""+ thisMarginalVarianceContribution);
      double thisMarginalFractionOfVarianceExplained=thisMarginalVarianceContribution / thisTreeTotalVariance * 100;
      if (Double.isNaN(thisMarginalFractionOfVarianceExplained)) {
        throw new RuntimeException(""String_Node_Str"");
      }
      thisTreeFractionOfVarianceExplainedByMarginals+=thisMarginalFractionOfVarianceExplained;
      s=""String_Node_Str"" + numTree + ""String_Node_Str""+ decim.format(thisMarginalFractionOfVarianceExplained)+ ""String_Node_Str""+ configSpace.getParameterNames().get(dim);
      log.info(s);
      HashSet<Integer> set=new HashSet<Integer>();
      set.add(dim);
      thisTreeVarianceContributions.put(set,thisMarginalVarianceContribution);
      singleVarianceContributions.put(dim,thisMarginalVarianceContribution);
    }
    double thisTreeTimeForComputingMainEffects=(System.nanoTime() - start) * 1.0e-9;
    timeForComputingMainEffects+=thisTreeTimeForComputingMainEffects;
    s=""String_Node_Str"" + numTree + ""String_Node_Str""+ ""String_Node_Str""+ thisTreeFractionOfVarianceExplainedByMarginals+ ""String_Node_Str""+ thisTreeTimeForComputingMainEffects+ ""String_Node_Str"";
    log.info(s);
    double thisTreeFractionOfVarianceExplainedByBinaries=0;
    double thisTreeTimeForComputingBinaryEffects=0;
    if (computePairwiseInteraction) {
      for (int dim1=0; dim1 < numDim; dim1++) {
        for (int dim2=dim1 + 1; dim2 < numDim; dim2++) {
          int[] indicesOfObservations=new int[2];
          indicesOfObservations[0]=dim1;
          ArrayList<Double> as=new ArrayList<Double>();
          indicesOfObservations[1]=dim2;
          double weightedSum=0, weightedSumOfSquares=0;
          for (int valIndex1=0; valIndex1 < allObservations[dim1].length; valIndex1++) {
            for (int valIndex2=0; valIndex2 < allObservations[dim2].length; valIndex2++) {
              double[] observations=new double[2];
              observations[0]=allObservations[dim1][valIndex1];
              observations[1]=allObservations[dim2][valIndex2];
              double intervalSize1=allIntervalSizes[dim1][valIndex1];
              double intervalSize2=allIntervalSizes[dim2][valIndex2];
              marg=forest.Trees[numTree].marginalPerformance(indicesOfObservations,observations);
              weightedSum+=marg * intervalSize1 * intervalSize2;
              weightedSumOfSquares+=marg * marg * intervalSize1* intervalSize2;
              s=""String_Node_Str"" + configSpace.getParameterNames().get(dim1) + ""String_Node_Str""+ observations[0]+ ""String_Node_Str""+ configSpace.getParameterNames().get(dim2)+ ""String_Node_Str""+ observations[1]+ ""String_Node_Str""+ marg;
              as.add(marg);
            }
          }
          double thisBinaryVarianceContribution=weightedSumOfSquares - weightedSum * weightedSum;
          thisBinaryVarianceContribution-=singleVarianceContributions.get(dim1);
          thisBinaryVarianceContribution-=singleVarianceContributions.get(dim2);
          log.debug(""String_Node_Str"" + dim1 + ""String_Node_Str""+ singleVarianceContributions.get(dim1));
          log.debug(""String_Node_Str"" + dim2 + ""String_Node_Str""+ singleVarianceContributions.get(dim2));
          double thisBinaryFractionOfVarianceExplained=thisBinaryVarianceContribution / thisTreeTotalVariance * 100;
          thisTreeFractionOfVarianceExplainedByBinaries+=thisBinaryFractionOfVarianceExplained;
          s=decim.format(thisBinaryFractionOfVarianceExplained) + ""String_Node_Str"" + configSpace.getParameterNames().get(dim1)+ ""String_Node_Str""+ configSpace.getParameterNames().get(dim2);
          log.debug(s);
          HashSet<Integer> set=new HashSet<Integer>();
          set.add(dim1);
          set.add(dim2);
          thisTreeVarianceContributions.put(set,thisBinaryVarianceContribution);
        }
      }
      thisTreeTimeForComputingBinaryEffects=(System.nanoTime() - start) * 1.0e-9 - thisTreeTimeForComputingMainEffects;
      timeForComputingBinaryEffects+=thisTreeTimeForComputingBinaryEffects;
      s=""String_Node_Str"" + numTree + ""String_Node_Str""+ ""String_Node_Str""+ thisTreeFractionOfVarianceExplainedByBinaries+ ""String_Node_Str""+ thisTreeTimeForComputingBinaryEffects+ ""String_Node_Str"";
      log.info(s);
    }
    double tmpThisTreeFractionExplained=0;
    for (    HashSet<Integer> indexSet : thisTreeVarianceContributions.keySet()) {
      double previousFractionExplained=0;
      if (numTree > 0) {
        previousFractionExplained=totalFractionsExplained.get(indexSet);
      }
      double thisFractionExplained=thisTreeVarianceContributions.get(indexSet) / thisTreeTotalVariance * 100;
      log.debug(""String_Node_Str"" + indexSet.toString() + ""String_Node_Str""+ numTree+ ""String_Node_Str""+ thisTreeVarianceContributions.get(indexSet));
      log.debug(""String_Node_Str"" + numTree + ""String_Node_Str""+ thisTreeTotalVariance);
      tmpThisTreeFractionExplained+=thisFractionExplained;
      totalFractionsExplained.put(indexSet,previousFractionExplained + 1.0 / forest.Trees.length * thisFractionExplained);
      log.debug(""String_Node_Str"" + numTree + ""String_Node_Str""+ totalFractionsExplained.get(indexSet));
    }
    log.debug(tmpThisTreeFractionExplained + ""String_Node_Str"");
  }
  double tmpFractionExplained=0;
  for (  HashSet<Integer> indexSet : totalFractionsExplained.keySet()) {
    tmpFractionExplained+=totalFractionsExplained.get(indexSet);
  }
  log.debug(tmpFractionExplained + ""String_Node_Str"");
  double sumOfFractionsOfMarginals=0;
  for (  HashSet<Integer> indexSet : totalFractionsExplained.keySet()) {
    if (indexSet.size() == 1) {
      sumOfFractionsOfMarginals+=totalFractionsExplained.get(indexSet);
    }
  }
  s=""String_Node_Str"" + sumOfFractionsOfMarginals + ""String_Node_Str"";
  log.info(s);
  if (computePairwiseInteraction) {
    sumOfFractionsOfBinaries=0;
    for (    HashSet<Integer> indexSet : totalFractionsExplained.keySet()) {
      if (indexSet.size() == 2) {
        sumOfFractionsOfBinaries+=totalFractionsExplained.get(indexSet);
      }
    }
    s=""String_Node_Str"" + sumOfFractionsOfBinaries + ""String_Node_Str"";
    log.info(s);
  }
  s=""String_Node_Str"" + decim.format(sumOfFractionsOfMarginals) + ""String_Node_Str""+ decim.format(timeForComputingMainEffects)+ ""String_Node_Str""+ decim.format(sumOfFractionsOfBinaries)+ ""String_Node_Str""+ decim.format(timeForComputingBinaryEffects)+ ""String_Node_Str"";
  log.info(s);
  ArrayList<String> paramNamesOrderByMarginalVarianceExplained=new ArrayList<String>();
  int idx=0;
  ArrayList<Map.Entry<HashSet,Double>> list=sortedKeysByValue(totalFractionsExplained);
  int numMaxEffectsToPrint=30;
  s=""String_Node_Str"" + numMaxEffectsToPrint + ""String_Node_Str"";
  log.info(s);
  for (  Map.Entry<HashSet,Double> entry : list) {
    HashSet<Integer> set=entry.getKey();
    numMaxEffectsToPrint--;
    if (set.size() == 1) {
      Integer varIndex=(Integer)set.toArray()[0];
      String parameterName=configSpace.getParameterNames().get(varIndex);
      paramNamesOrderByMarginalVarianceExplained.add(parameterName);
      if (numMaxEffectsToPrint > 0) {
        s=decim2.format(entry.getValue()) + ""String_Node_Str"" + parameterName;
        log.info(s);
      }
    }
 else     if (set.size() == 2) {
      Integer varIndex1=(Integer)set.toArray()[0];
      Integer varIndex2=(Integer)set.toArray()[1];
      String varName1=configSpace.getParameterNames().get(varIndex1);
      String varName2=configSpace.getParameterNames().get(varIndex2);
      if (numMaxEffectsToPrint > 0) {
        s=decim2.format(entry.getValue()) + ""String_Node_Str"" + varName1+ ""String_Node_Str""+ varName2;
        log.info(s);
      }
    }
  }
  String allSingleMarginalsOutputFile=outputDir + ""String_Node_Str"";
  PrintWriter writer=null;
  try {
    writer=new PrintWriter(allSingleMarginalsOutputFile,""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (plotMarginals) {
    log.info(""String_Node_Str"");
    for (int dim=0; dim < numDim; dim++) {
      String parameterName=configSpace.getParameterNames().get(dim);
      String parameterFileName=parameterName.replace('/','_');
      double[] valuesToPredictFor;
      if (configSpace.getCategoricalSize()[dim] > 0) {
        valuesToPredictFor=allObservations[dim];
      }
 else {
        int numVals=11;
        valuesToPredictFor=new double[numVals];
        for (int valIndex=0; valIndex < numVals; valIndex++) {
          valuesToPredictFor[valIndex]=(valIndex + 0.0) / (numVals - 1);
        }
      }
      String singleMarginalOutputFile=outputDir + ""String_Node_Str"" + parameterFileName+ ""String_Node_Str"";
      PrintWriter singleWriter=null;
      try {
        singleWriter=new PrintWriter(singleMarginalOutputFile,""String_Node_Str"");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      int[] indicesOfObservations=new int[1];
      indicesOfObservations[0]=dim;
      for (int valIndex=0; valIndex < valuesToPredictFor.length; valIndex++) {
        double[] observations=new double[1];
        observations[0]=valuesToPredictFor[valIndex];
        ArrayList<Double> margs=new ArrayList<Double>();
        for (int numTree=0; numTree < forest.Trees.length; numTree++) {
          margs.add(forest.Trees[numTree].marginalPerformance(indicesOfObservations,observations));
        }
        double avg=0;
        for (        Double marg : margs) {
          avg+=marg / margs.size();
        }
        double std=0;
        for (        Double marg : margs) {
          std+=Math.pow(marg - avg,2) / margs.size();
        }
        std=Math.sqrt(std);
        if (configSpace.getCategoricalSize()[dim] > 0) {
          writer.println(configSpace.getValuesMap().get(parameterName).get(valIndex) + ""String_Node_Str"" + avg+ ""String_Node_Str""+ std);
          singleWriter.println(valIndex + ""String_Node_Str"" + configSpace.getValuesMap().get(parameterName).get(valIndex)+ ""String_Node_Str""+ avg+ ""String_Node_Str""+ std);
        }
 else {
          writer.println(valuesToPredictFor[valIndex] + ""String_Node_Str"" + avg+ ""String_Node_Str""+ std);
          Map<String,NormalizedRange> normalizeRangeMap=configSpace.getNormalizedRangeMap();
          NormalizedRange normalizedRange=normalizeRangeMap.get(parameterName);
          singleWriter.println(valIndex + ""String_Node_Str"" + normalizedRange.unnormalizeValue(valuesToPredictFor[valIndex])+ ""String_Node_Str""+ avg+ ""String_Node_Str""+ std);
        }
      }
      writer.println();
      singleWriter.close();
      String gnuplotFile=outputDir + ""String_Node_Str"" + parameterFileName+ ""String_Node_Str"";
      singleWriter=null;
      try {
        singleWriter=new PrintWriter(gnuplotFile,""String_Node_Str"");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      singleWriter.println(""String_Node_Str"");
      singleWriter.println(""String_Node_Str"");
      String pdfFilename=outputDir + ""String_Node_Str"" + parameterFileName+ ""String_Node_Str"";
      singleWriter.println(""String_Node_Str"" + pdfFilename + ""String_Node_Str"");
      singleWriter.println(""String_Node_Str"");
      singleWriter.println(""String_Node_Str"");
      singleWriter.println(""String_Node_Str"" + singleMarginalOutputFile + ""String_Node_Str"");
      singleWriter.println(""String_Node_Str"" + singleMarginalOutputFile + ""String_Node_Str"");
      singleWriter.close();
      String cmd=""String_Node_Str"" + gnuplotFile;
      Process p=Runtime.getRuntime().exec(cmd);
      p.waitFor();
    }
    writer.close();
    log.info(""String_Node_Str"" + allSingleMarginalsOutputFile);
    log.info(""String_Node_Str"");
    String texFile=outputDir + ""String_Node_Str"";
    writer=null;
    try {
      writer=new PrintWriter(texFile,""String_Node_Str"");
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"");
    int count=0;
    for (    String parameterName : paramNamesOrderByMarginalVarianceExplained) {
      String parameterFileName=parameterName.replace('/','_');
      int indexOfParameter=configSpace.getParameterNamesInAuthorativeOrder().indexOf(parameterName);
      HashSet<Integer> set=new HashSet<Integer>();
      set.add(indexOfParameter);
      double fractionExplainedByThisMarginal=totalFractionsExplained.get(set);
      writer.println(""String_Node_Str"");
      writer.println(""String_Node_Str"");
      String singleMarginalOutputFile=outputDir + ""String_Node_Str"" + parameterFileName+ ""String_Node_Str"";
      writer.println(""String_Node_Str"" + singleMarginalOutputFile + ""String_Node_Str"");
      writer.println(""String_Node_Str"" + parameterName.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ decim2.format(fractionExplainedByThisMarginal)+ ""String_Node_Str""+ parameterName+ ""String_Node_Str"");
      writer.println(""String_Node_Str"");
      writer.println(""String_Node_Str"");
      if (count++ % 4 == 0)       writer.println(""String_Node_Str"");
    }
    writer.println(""String_Node_Str"");
    writer.close();
    String cmd=""String_Node_Str"" + texFile + ""String_Node_Str"";
    log.info(""String_Node_Str"" + cmd);
  }
  log.info(""String_Node_Str"");
}",0.9814504413900994
140836,"/** 
 * Method run
 */
public void run(){
  try {
    active=true;
    HTTPProxyHost=System.getProperty(""String_Node_Str"");
    if ((HTTPProxyHost != null) && HTTPProxyHost.equals(""String_Node_Str"")) {
      HTTPProxyHost=null;
    }
    if (HTTPProxyHost != null) {
      String tmp=System.getProperty(""String_Node_Str"");
      if ((tmp != null) && tmp.equals(""String_Node_Str"")) {
        tmp=null;
      }
      if (tmp == null) {
        HTTPProxyPort=80;
      }
 else {
        HTTPProxyPort=Integer.parseInt(tmp);
      }
    }
    if (inSocket != null) {
      fromHost=(inSocket.getInetAddress()).getHostName();
    }
 else {
      fromHost=""String_Node_Str"";
    }
    String dateformat=TCPMon.getMessage(""String_Node_Str"",""String_Node_Str"");
    DateFormat df=new SimpleDateFormat(dateformat);
    time=df.format(new Date());
    int count=listener.connections.size();
    listener.tableModel.insertRow(count + 1,new Object[]{TCPMon.getMessage(""String_Node_Str"",""String_Node_Str""),time,fromHost,listener.hostField.getText(),""String_Node_Str""});
    listener.connections.add(this);
    inputText=new JTextArea(null,null,20,80);
    inputScroll=new JScrollPane(inputText);
    outputText=new JTextArea(null,null,20,80);
    outputScroll=new JScrollPane(outputText);
    ListSelectionModel lsm=listener.connectionTable.getSelectionModel();
    if ((count == 0) || (lsm.getLeadSelectionIndex() == 0)) {
      listener.outPane.setVisible(false);
      int divLoc=listener.outPane.getDividerLocation();
      listener.setLeft(inputScroll);
      listener.setRight(outputScroll);
      listener.removeButton.setEnabled(false);
      listener.removeAllButton.setEnabled(true);
      listener.saveButton.setEnabled(true);
      listener.resendButton.setEnabled(true);
      listener.outPane.setDividerLocation(divLoc);
      listener.outPane.setVisible(true);
    }
    String targetHost=listener.hostField.getText();
    int targetPort=Integer.parseInt(listener.tPortField.getText());
    int listenPort=Integer.parseInt(listener.portField.getText());
    InputStream tmpIn1=inputStream;
    OutputStream tmpOut1=null;
    InputStream tmpIn2=null;
    OutputStream tmpOut2=null;
    if (tmpIn1 == null) {
      tmpIn1=inSocket.getInputStream();
    }
    if (inSocket != null) {
      tmpOut1=inSocket.getOutputStream();
    }
    String bufferedData=null;
    StringBuffer buf=null;
    int index=listener.connections.indexOf(this);
    if (listener.isProxyBox.isSelected() || (HTTPProxyHost != null)) {
      byte[] b=new byte[1];
      buf=new StringBuffer();
      String s;
      for (; ; ) {
        int len;
        len=tmpIn1.read(b,0,1);
        if (len == -1) {
          break;
        }
        s=new String(b);
        buf.append(s);
        if (b[0] != '\n') {
          continue;
        }
        break;
      }
      bufferedData=buf.toString();
      inputText.append(bufferedData);
      if (bufferedData.startsWith(""String_Node_Str"") || bufferedData.startsWith(""String_Node_Str"") || bufferedData.startsWith(""String_Node_Str"")|| bufferedData.startsWith(""String_Node_Str"")) {
        int start, end;
        URL url;
        start=bufferedData.indexOf(' ') + 1;
        while (bufferedData.charAt(start) == ' ') {
          start++;
        }
        end=bufferedData.indexOf(' ',start);
        String urlString=bufferedData.substring(start,end);
        if (urlString.charAt(0) == '/') {
          urlString=urlString.substring(1);
        }
        if (listener.isProxyBox.isSelected()) {
          url=new URL(urlString);
          targetHost=url.getHost();
          targetPort=url.getPort();
          if (targetPort == -1) {
            targetPort=80;
          }
          listener.tableModel.setValueAt(targetHost,index + 1,TCPMon.OUTHOST_COLUMN);
          bufferedData=bufferedData.substring(0,start) + url.getFile() + bufferedData.substring(end);
        }
 else {
          url=new URL(""String_Node_Str"" + targetHost + ""String_Node_Str""+ targetPort+ ""String_Node_Str""+ urlString);
          listener.tableModel.setValueAt(targetHost,index + 1,TCPMon.OUTHOST_COLUMN);
          bufferedData=bufferedData.substring(0,start) + url.toExternalForm() + bufferedData.substring(end);
          targetHost=HTTPProxyHost;
          targetPort=HTTPProxyPort;
        }
      }
    }
 else {
      byte[] b1=new byte[1];
      buf=new StringBuffer();
      String s1;
      String lastLine=null;
      for (; ; ) {
        int len;
        len=tmpIn1.read(b1,0,1);
        if (len == -1) {
          break;
        }
        s1=new String(b1);
        buf.append(s1);
        if (b1[0] != '\n') {
          continue;
        }
        String line=buf.toString();
        buf.setLength(0);
        if (line.startsWith(""String_Node_Str"")) {
          String newHost=""String_Node_Str"" + targetHost + ""String_Node_Str""+ listenPort+ ""String_Node_Str"";
          bufferedData=bufferedData.concat(newHost);
          break;
        }
        if (bufferedData == null) {
          bufferedData=line;
        }
 else {
          bufferedData=bufferedData.concat(line);
        }
        if (line.equals(""String_Node_Str"")) {
          break;
        }
        if (""String_Node_Str"".equals(lastLine) && line.equals(""String_Node_Str"")) {
          break;
        }
        lastLine=line;
      }
      if (bufferedData != null) {
        inputText.append(bufferedData);
        int idx=(bufferedData.length() < 50) ? bufferedData.length() : 50;
        s1=bufferedData.substring(0,idx);
        int i=s1.indexOf('\n');
        if (i > 0) {
          s1=s1.substring(0,i - 1);
        }
        s1=s1 + ""String_Node_Str"" + ""String_Node_Str"";
        s1=s1.substring(0,51);
        listener.tableModel.setValueAt(s1,index + 1,TCPMon.REQ_COLUMN);
      }
    }
    if (targetPort == -1) {
      targetPort=80;
    }
    outSocket=new Socket(targetHost,targetPort);
    tmpIn2=outSocket.getInputStream();
    tmpOut2=outSocket.getOutputStream();
    if (bufferedData != null) {
      byte[] b=bufferedData.getBytes();
      tmpOut2.write(b);
      slowLink.pump(b.length);
    }
    boolean format=listener.xmlFormatBox.isSelected();
    rr1=new SocketRR(this,inSocket,tmpIn1,outSocket,tmpOut2,inputText,format,listener.tableModel,index + 1,""String_Node_Str"",slowLink);
    SlowLinkSimulator responseLink=new SlowLinkSimulator(slowLink);
    rr2=new SocketRR(this,outSocket,tmpIn2,inSocket,tmpOut1,outputText,format,null,0,""String_Node_Str"",responseLink);
    while ((rr1 != null) || (rr2 != null)) {
      if (rr2 != null) {
        listener.tableModel.setValueAt(rr2.getElapsed(),1 + index,TCPMon.ELAPSED_COLUMN);
      }
      if ((null != rr1) && rr1.isDone()) {
        if ((index >= 0) && (rr2 != null)) {
          listener.tableModel.setValueAt(TCPMon.getMessage(""String_Node_Str"",""String_Node_Str""),1 + index,TCPMon.STATE_COLUMN);
        }
        rr1=null;
      }
      if ((null != rr2) && rr2.isDone()) {
        if ((index >= 0) && (rr1 != null)) {
          listener.tableModel.setValueAt(TCPMon.getMessage(""String_Node_Str"",""String_Node_Str""),1 + index,TCPMon.STATE_COLUMN);
        }
        rr2=null;
      }
synchronized (this) {
        this.wait(100);
      }
    }
    active=false;
    if (index >= 0) {
      listener.tableModel.setValueAt(TCPMon.getMessage(""String_Node_Str"",""String_Node_Str""),1 + index,TCPMon.STATE_COLUMN);
    }
  }
 catch (  Exception e) {
    StringWriter st=new StringWriter();
    PrintWriter wr=new PrintWriter(st);
    int index=listener.connections.indexOf(this);
    if (index >= 0) {
      listener.tableModel.setValueAt(TCPMon.getMessage(""String_Node_Str"",""String_Node_Str""),1 + index,TCPMon.STATE_COLUMN);
    }
    e.printStackTrace(wr);
    wr.close();
    if (outputText != null) {
      outputText.append(st.toString());
    }
 else {
      System.out.println(st.toString());
    }
    halt();
  }
}","/** 
 * Method run
 */
public void run(){
  try {
    active=true;
    HTTPProxyHost=System.getProperty(""String_Node_Str"");
    if ((HTTPProxyHost != null) && HTTPProxyHost.equals(""String_Node_Str"")) {
      HTTPProxyHost=null;
    }
    if (HTTPProxyHost != null) {
      String tmp=System.getProperty(""String_Node_Str"");
      if ((tmp != null) && tmp.equals(""String_Node_Str"")) {
        tmp=null;
      }
      if (tmp == null) {
        HTTPProxyPort=80;
      }
 else {
        HTTPProxyPort=Integer.parseInt(tmp);
      }
    }
    if (inSocket != null) {
      fromHost=(inSocket.getInetAddress()).getHostName();
    }
 else {
      fromHost=""String_Node_Str"";
    }
    String dateformat=TCPMon.getMessage(""String_Node_Str"",""String_Node_Str"");
    DateFormat df=new SimpleDateFormat(dateformat);
    time=df.format(new Date());
    int count=listener.connections.size();
    listener.tableModel.insertRow(count + 1,new Object[]{TCPMon.getMessage(""String_Node_Str"",""String_Node_Str""),time,fromHost,listener.hostField.getText(),""String_Node_Str""});
    listener.connections.add(this);
    inputText=new JTextArea(null,null,20,80);
    inputScroll=new JScrollPane(inputText);
    outputText=new JTextArea(null,null,20,80);
    outputScroll=new JScrollPane(outputText);
    ListSelectionModel lsm=listener.connectionTable.getSelectionModel();
    if ((count == 0) || (lsm.getLeadSelectionIndex() == 0)) {
      listener.outPane.setVisible(false);
      int divLoc=listener.outPane.getDividerLocation();
      listener.setLeft(inputScroll);
      listener.setRight(outputScroll);
      listener.removeButton.setEnabled(false);
      listener.removeAllButton.setEnabled(true);
      listener.saveButton.setEnabled(true);
      listener.resendButton.setEnabled(true);
      listener.outPane.setDividerLocation(divLoc);
      listener.outPane.setVisible(true);
    }
    String targetHost=listener.hostField.getText();
    int targetPort=Integer.parseInt(listener.tPortField.getText());
    int listenPort=Integer.parseInt(listener.portField.getText());
    InputStream tmpIn1=inputStream;
    OutputStream tmpOut1=null;
    InputStream tmpIn2=null;
    OutputStream tmpOut2=null;
    if (tmpIn1 == null) {
      tmpIn1=inSocket.getInputStream();
    }
    if (inSocket != null) {
      tmpOut1=inSocket.getOutputStream();
    }
    String bufferedData=null;
    StringBuffer buf=null;
    int index=listener.connections.indexOf(this);
    if (listener.isProxyBox.isSelected() || (HTTPProxyHost != null)) {
      byte[] b=new byte[1];
      buf=new StringBuffer();
      String s;
      for (; ; ) {
        int len;
        len=tmpIn1.read(b,0,1);
        if (len == -1) {
          break;
        }
        s=new String(b);
        buf.append(s);
        if (b[0] != '\n') {
          continue;
        }
        break;
      }
      bufferedData=buf.toString();
      inputText.append(bufferedData);
      if (bufferedData.startsWith(""String_Node_Str"") || bufferedData.startsWith(""String_Node_Str"") || bufferedData.startsWith(""String_Node_Str"")|| bufferedData.startsWith(""String_Node_Str"")) {
        int start, end;
        URL url;
        start=bufferedData.indexOf(' ') + 1;
        while (bufferedData.charAt(start) == ' ') {
          start++;
        }
        end=bufferedData.indexOf(' ',start);
        String urlString=bufferedData.substring(start,end);
        if (urlString.charAt(0) == '/') {
          urlString=urlString.substring(1);
        }
        if (listener.isProxyBox.isSelected()) {
          url=new URL(urlString);
          targetHost=url.getHost();
          targetPort=url.getPort();
          if (targetPort == -1) {
            targetPort=80;
          }
          listener.tableModel.setValueAt(targetHost,index + 1,TCPMon.OUTHOST_COLUMN);
          bufferedData=bufferedData.substring(0,start) + url.getFile() + bufferedData.substring(end);
        }
 else {
          url=new URL(""String_Node_Str"" + targetHost + ""String_Node_Str""+ targetPort+ ""String_Node_Str""+ urlString);
          listener.tableModel.setValueAt(targetHost,index + 1,TCPMon.OUTHOST_COLUMN);
          bufferedData=bufferedData.substring(0,start) + url.toExternalForm() + bufferedData.substring(end);
          targetHost=HTTPProxyHost;
          targetPort=HTTPProxyPort;
        }
      }
    }
 else {
      byte[] b1=new byte[1];
      buf=new StringBuffer();
      String s1;
      String lastLine=null;
      for (; ; ) {
        int len;
        len=tmpIn1.read(b1,0,1);
        if (len == -1) {
          break;
        }
        s1=new String(b1);
        buf.append(s1);
        if (b1[0] != '\n') {
          continue;
        }
        String line=buf.toString();
        buf.setLength(0);
        if (line.startsWith(""String_Node_Str"")) {
          String newHost=""String_Node_Str"" + targetHost + ""String_Node_Str""+ targetPort+ ""String_Node_Str"";
          bufferedData=bufferedData.concat(newHost);
          break;
        }
        if (bufferedData == null) {
          bufferedData=line;
        }
 else {
          bufferedData=bufferedData.concat(line);
        }
        if (line.equals(""String_Node_Str"")) {
          break;
        }
        if (""String_Node_Str"".equals(lastLine) && line.equals(""String_Node_Str"")) {
          break;
        }
        lastLine=line;
      }
      if (bufferedData != null) {
        inputText.append(bufferedData);
        int idx=(bufferedData.length() < 50) ? bufferedData.length() : 50;
        s1=bufferedData.substring(0,idx);
        int i=s1.indexOf('\n');
        if (i > 0) {
          s1=s1.substring(0,i - 1);
        }
        s1=s1 + ""String_Node_Str"" + ""String_Node_Str"";
        s1=s1.substring(0,51);
        listener.tableModel.setValueAt(s1,index + 1,TCPMon.REQ_COLUMN);
      }
    }
    if (targetPort == -1) {
      targetPort=80;
    }
    outSocket=new Socket(targetHost,targetPort);
    tmpIn2=outSocket.getInputStream();
    tmpOut2=outSocket.getOutputStream();
    if (bufferedData != null) {
      byte[] b=bufferedData.getBytes();
      tmpOut2.write(b);
      slowLink.pump(b.length);
    }
    boolean format=listener.xmlFormatBox.isSelected();
    rr1=new SocketRR(this,inSocket,tmpIn1,outSocket,tmpOut2,inputText,format,listener.tableModel,index + 1,""String_Node_Str"",slowLink);
    SlowLinkSimulator responseLink=new SlowLinkSimulator(slowLink);
    rr2=new SocketRR(this,outSocket,tmpIn2,inSocket,tmpOut1,outputText,format,null,0,""String_Node_Str"",responseLink);
    while ((rr1 != null) || (rr2 != null)) {
      if (rr2 != null) {
        listener.tableModel.setValueAt(rr2.getElapsed(),1 + index,TCPMon.ELAPSED_COLUMN);
      }
      if ((null != rr1) && rr1.isDone()) {
        if ((index >= 0) && (rr2 != null)) {
          listener.tableModel.setValueAt(TCPMon.getMessage(""String_Node_Str"",""String_Node_Str""),1 + index,TCPMon.STATE_COLUMN);
        }
        rr1=null;
      }
      if ((null != rr2) && rr2.isDone()) {
        if ((index >= 0) && (rr1 != null)) {
          listener.tableModel.setValueAt(TCPMon.getMessage(""String_Node_Str"",""String_Node_Str""),1 + index,TCPMon.STATE_COLUMN);
        }
        rr2=null;
      }
synchronized (this) {
        this.wait(100);
      }
    }
    active=false;
    if (index >= 0) {
      listener.tableModel.setValueAt(TCPMon.getMessage(""String_Node_Str"",""String_Node_Str""),1 + index,TCPMon.STATE_COLUMN);
    }
  }
 catch (  Exception e) {
    StringWriter st=new StringWriter();
    PrintWriter wr=new PrintWriter(st);
    int index=listener.connections.indexOf(this);
    if (index >= 0) {
      listener.tableModel.setValueAt(TCPMon.getMessage(""String_Node_Str"",""String_Node_Str""),1 + index,TCPMon.STATE_COLUMN);
    }
    e.printStackTrace(wr);
    wr.close();
    if (outputText != null) {
      outputText.append(st.toString());
    }
 else {
      System.out.println(st.toString());
    }
    halt();
  }
}",0.9992373204525232
140837,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.fragment_main);
  Logger.d(TAG,""String_Node_Str"");
  mTextView=(TextView)findViewById(R.id.textViewReportScanResults);
  if (savedInstanceState != null) {
    mTextViewContents=savedInstanceState.getCharSequence(CustomConstants.Payloads.PAYLOAD_1.toString());
    isScanRunning=savedInstanceState.getBoolean(CustomConstants.Payloads.PAYLOAD_2.toString(),false);
    mButtonState=savedInstanceState.getBoolean(CustomConstants.Payloads.PAYLOAD_3.toString(),true);
  }
  mButton=(Button)findViewById(R.id.buttonStartScanningMain);
  mButton.setEnabled(false);
  mBluetoothUtils=new BluetoothUtils(this);
  registerMonitorTask();
  registerResponseReceiver();
  SuperActivityToast.cancelAllSuperActivityToasts();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.fragment_main);
  Logger.d(TAG,""String_Node_Str"");
  mTextView=(TextView)findViewById(R.id.textViewReportScanResults);
  if (savedInstanceState != null) {
    mTextViewContents=savedInstanceState.getCharSequence(CustomConstants.Payloads.PAYLOAD_1.toString());
    isScanRunning=savedInstanceState.getBoolean(CustomConstants.Payloads.PAYLOAD_2.toString(),false);
    mButtonState=savedInstanceState.getBoolean(CustomConstants.Payloads.PAYLOAD_3.toString(),true);
    isToastScanningNowShown=savedInstanceState.getBoolean(CustomConstants.Payloads.PAYLOAD_4.toString(),false);
    isToastStoppingScanShown=savedInstanceState.getBoolean(CustomConstants.Payloads.PAYLOAD_5.toString(),false);
  }
  mButton=(Button)findViewById(R.id.buttonStartScanningMain);
  mButton.setEnabled(false);
  mBluetoothUtils=new BluetoothUtils(this);
  registerMonitorTask();
  registerResponseReceiver();
  SuperActivityToast.cancelAllSuperActivityToasts();
}",0.8813916710595677
140838,"@Override protected void onPause(){
  SuperActivityToast.cancelAllSuperActivityToasts();
  new ScanProcess().cancelServiceAlarm(this);
  Logger.d(TAG,""String_Node_Str"");
  super.onPause();
}","@Override protected void onPause(){
  SuperActivityToast.cancelAllSuperActivityToasts();
  new ScanProcess().cancelService(this);
  Logger.d(TAG,""String_Node_Str"");
  super.onPause();
}",0.9866666666666668
140839,"@Override public void onReceive(Context context,Intent intent){
  Logger.d(TAG,""String_Node_Str"");
  if (intent.getAction().equalsIgnoreCase(CustomConstants.Broadcasts.BROADCAST_1.getString())) {
    Logger.i(TAG,""String_Node_Str"");
    SuperActivityToast.cancelAllSuperActivityToasts();
    isScanRunning=true;
    mSuperActivityToast=ToastUtils.makeProgressToast(MainActivity.this,mSuperActivityToast,mToastString1);
    mButton.setText(getResources().getString(R.string.label_stop_scanning));
  }
 else   if (intent.getAction().equalsIgnoreCase(CustomConstants.Broadcasts.BROADCAST_2.getString())) {
    Logger.i(TAG,""String_Node_Str"");
    SuperActivityToast.cancelAllSuperActivityToasts();
    ToastUtils.makeInfoToast(MainActivity.this,mToastString2);
    mButton.setEnabled(true);
  }
}","@Override public void onReceive(Context context,Intent intent){
  Logger.d(TAG,""String_Node_Str"");
  if (intent.getAction().equalsIgnoreCase(CustomConstants.Broadcasts.BROADCAST_1.getString())) {
    Logger.i(TAG,""String_Node_Str"");
    SuperActivityToast.cancelAllSuperActivityToasts();
    isScanRunning=true;
    isToastScanningNowShown=true;
    mSuperActivityToast=ToastUtils.makeProgressToast(MainActivity.this,mSuperActivityToast,mToastStringScanningNow);
    mButton.setText(getResources().getString(R.string.label_stop_scanning));
  }
 else   if (intent.getAction().equalsIgnoreCase(CustomConstants.Broadcasts.BROADCAST_2.getString())) {
    Logger.i(TAG,""String_Node_Str"");
    SuperActivityToast.cancelAllSuperActivityToasts();
    isToastScanningNowShown=false;
    ToastUtils.makeInfoToast(MainActivity.this,mToastStringScanFinished);
    mButton.setEnabled(true);
  }
}",0.9439140811455848
140840,"@Override protected void onResume(){
  super.onResume();
  SuperActivityToast.cancelAllSuperActivityToasts();
  if (!mBluetoothUtils.isBluetoothLeSupported()) {
    mSuperActivityToast=ToastUtils.makeWarningToast(this,mToastString4);
  }
 else {
    if (!mBluetoothUtils.isBluetoothOn()) {
      new ScanProcess().cancelServiceAlarm(this);
      mBluetoothUtils.askUserToEnableBluetoothIfNeeded();
    }
    if (mBluetoothUtils.isBluetoothOn() && mBluetoothUtils.isBluetoothLeSupported()) {
      Logger.i(TAG,""String_Node_Str"");
      mButton.setEnabled(mButtonState);
      if (!mButtonState) {
        mButton.setText(getResources().getString(R.string.label_stop_scanning));
      }
      if (isScanRunning && mButtonState) {
        Logger.d(TAG,""String_Node_Str"");
        new ScanProcess().scanForIBeacons(MainActivity.this,mScanTime,mGapTime);
      }
 else       if (!isScanRunning && !mButtonState) {
        mSuperActivityToast=ToastUtils.makeProgressToast(this,mSuperActivityToast,mToastString5);
      }
      if (mTextViewContents != null && !mTextViewContents.equals(""String_Node_Str"")) {
        mTextView.setText(mTextViewContents);
      }
    }
 else {
      mSuperActivityToast=ToastUtils.makeProgressToast(this,mSuperActivityToast,mToastString3);
    }
  }
}","@Override protected void onResume(){
  super.onResume();
  SuperActivityToast.cancelAllSuperActivityToasts();
  if (!mBluetoothUtils.isBluetoothLeSupported()) {
    mSuperActivityToast=ToastUtils.makeWarningToast(this,mToastStringNoLE);
  }
 else {
    if (!mBluetoothUtils.isBluetoothOn()) {
      new ScanProcess().cancelService(this);
      mBluetoothUtils.askUserToEnableBluetoothIfNeeded();
    }
    if (mBluetoothUtils.isBluetoothOn() && mBluetoothUtils.isBluetoothLeSupported()) {
      Logger.i(TAG,""String_Node_Str"");
      mButton.setEnabled(mButtonState);
      if (isScanRunning && mButtonState) {
        Logger.d(TAG,""String_Node_Str"");
        new ScanProcess().scanForIBeacons(MainActivity.this,mScanTime,mGapTime);
      }
      if (isToastScanningNowShown) {
        mSuperActivityToast=ToastUtils.makeProgressToast(this,mSuperActivityToast,mToastStringScanningNow);
      }
      if (mTextViewContents != null && !mTextViewContents.equals(""String_Node_Str"")) {
        mTextView.setText(mTextViewContents);
      }
    }
 else {
      mSuperActivityToast=ToastUtils.makeProgressToast(this,mSuperActivityToast,mToastStringEnableLE);
    }
  }
}",0.6636624334289226
140841,"public void onClickStartScanning(View view){
  Logger.d(TAG,""String_Node_Str"");
  SuperActivityToast.cancelAllSuperActivityToasts();
  if (isScanRunning) {
    mButton.setEnabled(false);
    new ScanProcess().cancelServiceAlarm(this);
    mSuperActivityToast=ToastUtils.makeProgressToast(this,mSuperActivityToast,mToastString5);
    mButton.setText(getResources().getString(R.string.label_start_scanning));
    isScanRunning=false;
  }
 else {
    new ScanProcess().scanForIBeacons(MainActivity.this,mScanTime,mGapTime);
  }
}","public void onClickStartScanning(View view){
  Logger.d(TAG,""String_Node_Str"");
  SuperActivityToast.cancelAllSuperActivityToasts();
  if (isScanRunning) {
    new ScanProcess().cancelService(this);
    isToastScanningNowShown=false;
    mSuperActivityToast=ToastUtils.makeInfoToast(this,mToastStringScanInterrupted);
    mButton.setText(getResources().getString(R.string.label_start_scanning));
    isScanRunning=false;
  }
 else {
    new ScanProcess().scanForIBeacons(MainActivity.this,mScanTime,mGapTime);
  }
}",0.5878962536023055
140842,"@Override protected void onSaveInstanceState(Bundle outState){
  outState.putCharSequence(CustomConstants.Payloads.PAYLOAD_1.toString(),mTextViewContents);
  outState.putBoolean(CustomConstants.Payloads.PAYLOAD_2.toString(),isScanRunning);
  outState.putBoolean(CustomConstants.Payloads.PAYLOAD_3.toString(),mButton.isEnabled());
  super.onSaveInstanceState(outState);
}","@Override protected void onSaveInstanceState(Bundle outState){
  outState.putCharSequence(CustomConstants.Payloads.PAYLOAD_1.toString(),mTextViewContents);
  outState.putBoolean(CustomConstants.Payloads.PAYLOAD_2.toString(),isScanRunning);
  outState.putBoolean(CustomConstants.Payloads.PAYLOAD_3.toString(),mButton.isEnabled());
  outState.putBoolean(CustomConstants.Payloads.PAYLOAD_4.toString(),isToastScanningNowShown);
  outState.putBoolean(CustomConstants.Payloads.PAYLOAD_5.toString(),isToastStoppingScanShown);
  super.onSaveInstanceState(outState);
}",0.7965554359526372
140843,"/** 
 * / Takes 2 time variables and starts a Scan Service 
 * @param context Context calling this method
 * @param scanDurationTime Scan duration in milliseconds
 * @param scanGapTime Time between consecutive scans in milliseconds
 */
public void scanForIBeacons(Context context,int scanDurationTime,int scanGapTime){
  Logger.d(TAG,""String_Node_Str"");
  Logger.d(TAG,""String_Node_Str"" + scanDurationTime);
  Logger.d(TAG,""String_Node_Str"" + scanGapTime);
  this.cancelServiceAlarm(context);
  Singleton.getInstance().setNumberOfScans(0);
  Intent serviceIntent=new Intent(context,ScanService.class);
  serviceIntent.putExtra(CustomConstants.Payloads.PAYLOAD_1.getString(),scanDurationTime);
  serviceIntent.putExtra(CustomConstants.Payloads.PAYLOAD_2.getString(),scanGapTime);
  Logger.d(TAG,""String_Node_Str"");
  context.startService(serviceIntent);
}","/** 
 * / Takes 2 time variables and starts a Scan Service 
 * @param context Context calling this method
 * @param scanDurationTime Scan duration in milliseconds
 * @param scanGapTime Time between consecutive scans in milliseconds
 */
public void scanForIBeacons(Context context,int scanDurationTime,int scanGapTime){
  if (!isAlarmUp(context)) {
    Logger.d(TAG,""String_Node_Str"");
    Logger.d(TAG,""String_Node_Str"" + scanDurationTime);
    Logger.d(TAG,""String_Node_Str"" + scanGapTime);
    this.cancelService(context);
    Singleton.getInstance().setNumberOfScans(0);
    Intent serviceIntent=new Intent(context,ScanService.class);
    serviceIntent.putExtra(CustomConstants.Payloads.PAYLOAD_1.getString(),scanDurationTime);
    serviceIntent.putExtra(CustomConstants.Payloads.PAYLOAD_2.getString(),scanGapTime);
    Logger.d(TAG,""String_Node_Str"");
    context.startService(serviceIntent);
  }
 else {
    Logger.e(TAG,""String_Node_Str"");
  }
}",0.9407202216066484
140844,"public void onClickStartScanning(View view){
  Logger.d(TAG,""String_Node_Str"");
  new ScanProcess().cancelServiceAlarm(this);
  Logger.d(TAG,""String_Node_Str"");
  IntentFilter mIntentFilter=new IntentFilter(CustomConstants.Broadcasts.BROADCAST_1.getString());
  mScanReceiver=new ResponseReceiver();
  Logger.d(TAG,""String_Node_Str"");
  LocalBroadcastManager.getInstance(this).registerReceiver(mScanReceiver,mIntentFilter);
  new ScanProcess().scanForIBeacons(MainActivity.this,mScanTime,mGapTime);
}","public void onClickStartScanning(View view){
  Logger.d(TAG,""String_Node_Str"");
  Logger.d(TAG,""String_Node_Str"");
  IntentFilter mIntentFilter=new IntentFilter(CustomConstants.Broadcasts.BROADCAST_1.getString());
  mScanReceiver=new ResponseReceiver();
  Logger.d(TAG,""String_Node_Str"");
  LocalBroadcastManager.getInstance(this).registerReceiver(mScanReceiver,mIntentFilter);
  new ScanProcess().scanForIBeacons(MainActivity.this,mScanTime,mGapTime);
}",0.9517819706498952
140845,"/** 
 * / Takes 2 time variables and starts a Scan Service 
 * @param context Context calling this method
 * @param scanDurationTime Scan duration in milliseconds
 * @param scanGapTime Time between consecutive scans in milliseconds
 */
public void scanForIBeacons(Context context,int scanDurationTime,int scanGapTime){
  Logger.d(TAG,""String_Node_Str"");
  Logger.d(TAG,""String_Node_Str"" + scanDurationTime);
  Logger.d(TAG,""String_Node_Str"" + scanGapTime);
  Singleton.getInstance().setNumberOfScans(0);
  Intent serviceIntent=new Intent(context,ScanService.class);
  serviceIntent.putExtra(CustomConstants.Payloads.PAYLOAD_1.getString(),scanDurationTime);
  serviceIntent.putExtra(CustomConstants.Payloads.PAYLOAD_2.getString(),scanGapTime);
  Logger.d(TAG,""String_Node_Str"");
  context.startService(serviceIntent);
}","/** 
 * / Takes 2 time variables and starts a Scan Service 
 * @param context Context calling this method
 * @param scanDurationTime Scan duration in milliseconds
 * @param scanGapTime Time between consecutive scans in milliseconds
 */
public void scanForIBeacons(Context context,int scanDurationTime,int scanGapTime){
  Logger.d(TAG,""String_Node_Str"");
  Logger.d(TAG,""String_Node_Str"" + scanDurationTime);
  Logger.d(TAG,""String_Node_Str"" + scanGapTime);
  this.cancelServiceAlarm(context);
  Singleton.getInstance().setNumberOfScans(0);
  Intent serviceIntent=new Intent(context,ScanService.class);
  serviceIntent.putExtra(CustomConstants.Payloads.PAYLOAD_1.getString(),scanDurationTime);
  serviceIntent.putExtra(CustomConstants.Payloads.PAYLOAD_2.getString(),scanGapTime);
  Logger.d(TAG,""String_Node_Str"");
  context.startService(serviceIntent);
}",0.9784688995215312
140846,"@Override public Object[] getConstructorArgs(){
  Object[][] workerConfiguration=new Object[sparqls + updates][];
  int i=0;
  for (  SPARQLWorkerConfig config : sparqlWorkers) {
    workerConfiguration[i++]=config.asConstructorArgs();
  }
  for (  UPDATEWorkerConfig config : updateWorkers) {
    workerConfiguration[i++]=config.asConstructorArgs();
  }
  constructorArgs=new Object[7];
  constructorArgs[0]=type ? typeValue : null;
  constructorArgs[1]=!type ? typeValue : null;
  constructorArgs[2]=workerConfiguration;
  List<String> qhConstructorTmp=new LinkedList<String>();
  qhConstructorTmp.add(0,qhClassName);
  if (qhConstructor != null)   qhConstructorTmp.addAll(qhConstructor);
  constructorArgs[3]=qhConstructorTmp.toArray(new String[]{});
  constructorArgs[4]=warmupTime;
  constructorArgs[5]=warmupQueries;
  constructorArgs[6]=warmupUpdates;
  return constructorArgs;
}","@Override public Object[] getConstructorArgs(){
  Object[][] workerConfiguration=new Object[sparqls + updates][];
  int i=0;
  for (  SPARQLWorkerConfig config : sparqlWorkers) {
    workerConfiguration[i++]=config.asConstructorArgs();
  }
  for (  UPDATEWorkerConfig config : updateWorkers) {
    workerConfiguration[i++]=config.asConstructorArgs();
  }
  constructorArgs=new Object[7];
  constructorArgs[0]=type ? typeValue : null;
  constructorArgs[1]=!type ? typeValue : null;
  constructorArgs[2]=workerConfiguration;
  constructorArgs[3]=getQHConstructor();
  constructorArgs[4]=warmupTime;
  constructorArgs[5]=warmupQueries;
  constructorArgs[6]=warmupUpdates;
  return constructorArgs;
}",0.6763590391908976
140847,"@Override public Configuration getSubConfiguration(String taskID){
  Configuration conf=new CompositeConfiguration();
  List<String> workersConstr=new LinkedList<String>();
  int i=0;
  for (  SPARQLWorkerConfig config : sparqlWorkers) {
    workersConstr.add(""String_Node_Str"" + i);
    conf.addProperty(""String_Node_Str"" + i,config.asConstructorArgs());
    i++;
  }
  i=0;
  for (  UPDATEWorkerConfig config : updateWorkers) {
    workersConstr.add(""String_Node_Str"" + i);
    conf.addProperty(""String_Node_Str"" + i,config.asConstructorArgs());
    i++;
  }
  String[] constructor=new String[7];
  if (type) {
    conf.addProperty(taskID + ""String_Node_Str"",typeValue);
    constructor[0]=taskID + ""String_Node_Str"";
  }
 else {
    conf.addProperty(taskID + ""String_Node_Str"",typeValue);
    constructor[1]=taskID + ""String_Node_Str"";
  }
  List<String> qhConstructorTmp=new LinkedList<String>();
  qhConstructorTmp.add(0,qhClassName);
  if (qhConstructor != null)   qhConstructorTmp.addAll(qhConstructor);
  conf.addProperty(taskID + ""String_Node_Str"",qhConstructorTmp.toArray(new String[]{}));
  qhConstructorTmp.clear();
  constructor[2]=taskID + ""String_Node_Str"";
  conf.addProperty(taskID + ""String_Node_Str"",workersConstr.toArray());
  constructor[3]=taskID + ""String_Node_Str"";
  conf.addProperty(taskID + ""String_Node_Str"",warmupTime);
  constructor[4]=taskID + ""String_Node_Str"";
  conf.addProperty(taskID + ""String_Node_Str"",warmupQueries);
  constructor[5]=taskID + ""String_Node_Str"";
  conf.addProperty(taskID + ""String_Node_Str"",warmupUpdates);
  constructor[6]=taskID + ""String_Node_Str"";
  conf.addProperty(taskID + ""String_Node_Str"",constructor);
  return conf;
}","@Override public Configuration getSubConfiguration(String taskID){
  Configuration conf=new CompositeConfiguration();
  List<String> workersConstr=new LinkedList<String>();
  int i=0;
  for (  SPARQLWorkerConfig config : sparqlWorkers) {
    workersConstr.add(""String_Node_Str"" + i);
    conf.addProperty(""String_Node_Str"" + i,config.asConstructorArgs());
    i++;
  }
  i=0;
  for (  UPDATEWorkerConfig config : updateWorkers) {
    workersConstr.add(""String_Node_Str"" + i);
    conf.addProperty(""String_Node_Str"" + i,config.asConstructorArgs());
    i++;
  }
  String[] constructor=new String[7];
  if (type) {
    conf.addProperty(taskID + ""String_Node_Str"",typeValue);
    constructor[0]=taskID + ""String_Node_Str"";
  }
 else {
    conf.addProperty(taskID + ""String_Node_Str"",typeValue);
    constructor[1]=taskID + ""String_Node_Str"";
  }
  conf.addProperty(taskID + ""String_Node_Str"",getQHConstructor());
  qhConstructorTmp.clear();
  constructor[2]=taskID + ""String_Node_Str"";
  conf.addProperty(taskID + ""String_Node_Str"",workersConstr.toArray());
  constructor[3]=taskID + ""String_Node_Str"";
  conf.addProperty(taskID + ""String_Node_Str"",warmupTime);
  constructor[4]=taskID + ""String_Node_Str"";
  conf.addProperty(taskID + ""String_Node_Str"",warmupQueries);
  constructor[5]=taskID + ""String_Node_Str"";
  conf.addProperty(taskID + ""String_Node_Str"",warmupUpdates);
  constructor[6]=taskID + ""String_Node_Str"";
  conf.addProperty(taskID + ""String_Node_Str"",constructor);
  return conf;
}",0.908747640025173
140848,"/** 
 * starts the config
 * @throws IOException 
 * @throws ExecuteException 
 */
public void start() throws ExecuteException, IOException {
  TaskController controller=new TaskController();
  DataGeneratorController dataController=new DataGeneratorController();
  String suiteID=generateSuiteID();
  Integer expID=0;
  String[] datasetsIDV=config.getStringArray(COMMON.CONFIG_DATASETS);
  String[] connectionsIDV=config.getStringArray(COMMON.CONFIG_CONNECTIONS);
  String[] tasksIDV=config.getStringArray(COMMON.CONFIG_TASKS);
  for (  String datasetIDV : datasetsIDV) {
    String datasetID=config.getString(datasetIDV + CONSTANTS.NAME_SUFFIX);
    String dataGenClass=config.getString(datasetIDV + CONSTANTS.DATA_GENERATOR_CLASS_NAME);
    String[] dataGenConstructorArgs=config.getStringArray(datasetIDV + CONSTANTS.CONSTRUCTOR_ARGS);
    expID++;
    Properties dataProperties=new Properties();
    if (dataGenClass != null) {
      dataProperties.put(COMMON.DATAGEN_CLASS_NAME,dataGenClass);
      if (dataGenConstructorArgs != null)       dataProperties.put(COMMON.DATAGEN_CONSTRUCTOR_ARGS,dataGenConstructorArgs);
      dataController.start(dataProperties);
    }
    Integer taskID=0;
    for (    String conIDV : connectionsIDV) {
      String conID=config.getString(conIDV + CONSTANTS.NAME_SUFFIX);
      String service=config.getString(conIDV + CONSTANTS.SERVICE_SUFFIX);
      String updateService=config.getString(conIDV + CONSTANTS.UPDATE_SERVICE_SUFFIX);
      String user=null, pwd=null;
      if (config.containsKey(conIDV + CONSTANTS.SERVICE_USER) && config.containsKey(conIDV + CONSTANTS.SERVICE_PASSWORD)) {
        user=config.getString(conIDV + CONSTANTS.SERVICE_USER);
        pwd=config.getString(conIDV + CONSTANTS.SERVICE_PASSWORD);
      }
      for (      String taskIDV : tasksIDV) {
        taskID++;
        Properties taskProperties=new Properties();
        String[] ids=new String[]{suiteID,suiteID + ""String_Node_Str"" + expID,suiteID + ""String_Node_Str"" + expID+ ""String_Node_Str""+ taskID.toString(),datasetID,conID};
        List<Object> constructor=new LinkedList<Object>();
        List<Object> classes=new LinkedList<Object>();
        constructor.add(ids);
        classes.add(String[].class);
        constructor.add(new String[]{service,updateService,user,pwd});
        classes.add(String[].class);
        Configuration taskConfig=createTaskConfig(config,taskIDV);
        taskProperties.put(""String_Node_Str"",taskConfig);
        taskProperties.put(COMMON.CLASS_NAME,config.getString(taskIDV + CONSTANTS.CLASS_SUFFIX));
        taskProperties.put(COMMON.CONSTRUCTOR_ARGS,constructor.toArray());
        taskProperties.put(COMMON.CONSTRUCTOR_ARGS_CLASSES,classes.toArray(new Class[]{}));
        String[] args=new String[]{datasetID,conID,taskID + ""String_Node_Str""};
        if (config.containsKey(CONSTANTS.PRE_SCRIPT_HOOK))         ScriptExecutor.exec(config.getString(CONSTANTS.PRE_SCRIPT_HOOK),args);
        controller.startTask(taskProperties);
        if (config.containsKey(CONSTANTS.POST_SCRIPT_HOOK))         ScriptExecutor.exec(config.getString(CONSTANTS.POST_SCRIPT_HOOK),args);
      }
    }
  }
}","/** 
 * starts the config
 * @throws IOException 
 * @throws ExecuteException 
 */
public void start() throws ExecuteException, IOException {
  TaskController controller=new TaskController();
  DataGeneratorController dataController=new DataGeneratorController();
  String suiteID=generateSuiteID();
  Integer expID=0;
  String[] datasetsIDV=config.getStringArray(COMMON.CONFIG_DATASETS);
  String[] connectionsIDV=config.getStringArray(COMMON.CONFIG_CONNECTIONS);
  String[] tasksIDV=config.getStringArray(COMMON.CONFIG_TASKS);
  for (  String datasetIDV : datasetsIDV) {
    String datasetID=config.getString(datasetIDV + CONSTANTS.NAME_SUFFIX);
    String dataGenClass=config.getString(datasetIDV + CONSTANTS.DATA_GENERATOR_CLASS_NAME);
    String[] dataGenConstructorArgs=config.getStringArray(datasetIDV + CONSTANTS.CONSTRUCTOR_ARGS);
    expID++;
    Properties dataProperties=new Properties();
    if (dataGenClass != null) {
      dataProperties.put(COMMON.DATAGEN_CLASS_NAME,dataGenClass);
      if (dataGenConstructorArgs != null)       dataProperties.put(COMMON.DATAGEN_CONSTRUCTOR_ARGS,dataGenConstructorArgs);
      dataController.start(dataProperties);
    }
    Integer taskID=0;
    for (    String conIDV : connectionsIDV) {
      String conID=config.getString(conIDV + CONSTANTS.NAME_SUFFIX);
      String service=config.getString(conIDV + CONSTANTS.SERVICE_SUFFIX);
      String updateService=config.getString(conIDV + CONSTANTS.UPDATE_SERVICE_SUFFIX);
      String user=null;
      String pwd=null;
      if (config.containsKey(conIDV + CONSTANTS.SERVICE_USER) && config.containsKey(conIDV + CONSTANTS.SERVICE_PASSWORD)) {
        user=config.getString(conIDV + CONSTANTS.SERVICE_USER);
        pwd=config.getString(conIDV + CONSTANTS.SERVICE_PASSWORD);
      }
      for (      String taskIDV : tasksIDV) {
        taskID++;
        Properties taskProperties=new Properties();
        String[] ids=new String[]{suiteID,suiteID + ""String_Node_Str"" + expID,suiteID + ""String_Node_Str"" + expID+ ""String_Node_Str""+ taskID.toString(),datasetID,conID};
        List<Object> constructor=new LinkedList<Object>();
        List<Object> classes=new LinkedList<Object>();
        constructor.add(ids);
        classes.add(String[].class);
        constructor.add(new String[]{service,updateService,user,pwd});
        classes.add(String[].class);
        Configuration taskConfig=createTaskConfig(config,taskIDV);
        taskProperties.put(""String_Node_Str"",taskConfig);
        taskProperties.put(COMMON.CLASS_NAME,config.getString(taskIDV + CONSTANTS.CLASS_SUFFIX));
        taskProperties.put(COMMON.CONSTRUCTOR_ARGS,constructor.toArray());
        taskProperties.put(COMMON.CONSTRUCTOR_ARGS_CLASSES,classes.toArray(new Class[]{}));
        String[] args=new String[]{datasetID,conID,taskID + ""String_Node_Str""};
        if (config.containsKey(CONSTANTS.PRE_SCRIPT_HOOK))         ScriptExecutor.exec(config.getString(CONSTANTS.PRE_SCRIPT_HOOK),args);
        controller.startTask(taskProperties);
        if (config.containsKey(CONSTANTS.POST_SCRIPT_HOOK))         ScriptExecutor.exec(config.getString(CONSTANTS.POST_SCRIPT_HOOK),args);
      }
    }
  }
}",0.997629208155524
140849,"private void setCredentials(UpdateProcessor exec){
  if (exec instanceof UpdateProcessRemote) {
    if (user != null && !user.isEmpty() && password != null && !password.isEmpty()) {
      CredentialsProvider provider=new BasicCredentialsProvider();
      provider.setCredentials(new AuthScope(AuthScope.ANY_HOST,AuthScope.ANY_PORT),new UsernamePasswordCredentials(user,password));
      HttpContext httpContext=new BasicHttpContext();
      httpContext.setAttribute(HttpClientContext.CREDS_PROVIDER,provider);
      ((UpdateProcessRemote)exec).setHttpContext(httpContext);
      HttpClient test=((UpdateProcessRemote)exec).getClient();
      System.out.println(test);
    }
  }
}","private void setCredentials(UpdateProcessor exec){
  if (exec instanceof UpdateProcessRemote && user != null && !user.isEmpty() && password != null && !password.isEmpty()) {
    CredentialsProvider provider=new BasicCredentialsProvider();
    provider.setCredentials(new AuthScope(AuthScope.ANY_HOST,AuthScope.ANY_PORT),new UsernamePasswordCredentials(user,password));
    HttpContext httpContext=new BasicHttpContext();
    httpContext.setAttribute(HttpClientContext.CREDS_PROVIDER,provider);
    ((UpdateProcessRemote)exec).setHttpContext(httpContext);
    HttpClient test=((UpdateProcessRemote)exec).getClient();
    System.out.println(test);
  }
}",0.9729323308270676
140850,"/** 
 * starts the config
 * @throws IOException 
 * @throws ExecuteException 
 */
public void start() throws ExecuteException, IOException {
  TaskController controller=new TaskController();
  DataGeneratorController dataController=new DataGeneratorController();
  String suiteID=generateSuiteID();
  Integer expID=0;
  String[] datasetsIDV=config.getStringArray(COMMON.CONFIG_DATASETS);
  String[] connectionsIDV=config.getStringArray(COMMON.CONFIG_CONNECTIONS);
  String[] tasksIDV=config.getStringArray(COMMON.CONFIG_TASKS);
  for (  String datasetIDV : datasetsIDV) {
    String datasetID=config.getString(datasetIDV + CONSTANTS.NAME_SUFFIX);
    String dataGenClass=config.getString(datasetIDV + CONSTANTS.DATA_GENERATOR_CLASS_NAME);
    String[] dataGenConstructorArgs=config.getStringArray(datasetIDV + CONSTANTS.CONSTRUCTOR_ARGS);
    expID++;
    Properties dataProperties=new Properties();
    if (dataGenClass != null) {
      dataProperties.put(COMMON.DATAGEN_CLASS_NAME,dataGenClass);
      if (dataGenConstructorArgs != null)       dataProperties.put(COMMON.DATAGEN_CONSTRUCTOR_ARGS,dataGenConstructorArgs);
      dataController.start(dataProperties);
    }
    Integer taskID=0;
    for (    String conIDV : connectionsIDV) {
      String conID=config.getString(conIDV + CONSTANTS.NAME_SUFFIX);
      String service=config.getString(conIDV + CONSTANTS.SERVICE_SUFFIX);
      String updateService=config.getString(conIDV + CONSTANTS.UPDATE_SERVICE_SUFFIX);
      String user=null;
      String pwd=null;
      if (config.containsKey(conIDV + CONSTANTS.SERVICE_USER) && config.containsKey(conIDV + CONSTANTS.SERVICE_PASSWORD)) {
        user=config.getString(conIDV + CONSTANTS.SERVICE_USER);
        pwd=config.getString(conIDV + CONSTANTS.SERVICE_PASSWORD);
      }
      for (      String taskIDV : tasksIDV) {
        taskID++;
        Properties taskProperties=new Properties();
        String[] ids=new String[]{suiteID,suiteID + ""String_Node_Str"" + expID,suiteID + ""String_Node_Str"" + expID+ ""String_Node_Str""+ taskID.toString(),datasetID,conID};
        List<Object> constructor=new LinkedList<Object>();
        List<Object> classes=new LinkedList<Object>();
        constructor.add(ids);
        classes.add(String[].class);
        constructor.add(new String[]{service,updateService,user,pwd});
        classes.add(String[].class);
        Configuration taskConfig=createTaskConfig(config,taskIDV);
        taskProperties.put(""String_Node_Str"",taskConfig);
        taskProperties.put(COMMON.CLASS_NAME,config.getString(taskIDV + CONSTANTS.CLASS_SUFFIX));
        taskProperties.put(COMMON.CONSTRUCTOR_ARGS,constructor.toArray());
        taskProperties.put(COMMON.CONSTRUCTOR_ARGS_CLASSES,classes.toArray(new Class[]{}));
        String[] args=new String[]{datasetID,conID,taskID + ""String_Node_Str""};
        if (config.containsKey(COMMON.PRE_SCRIPT_HOOK))         ScriptExecutor.exec(config.getString(COMMON.PRE_SCRIPT_HOOK),args);
        controller.startTask(taskProperties);
        if (config.containsKey(COMMON.POST_SCRIPT_HOOK))         ScriptExecutor.exec(config.getString(COMMON.POST_SCRIPT_HOOK),args);
      }
    }
  }
}","/** 
 * starts the config
 * @throws IOException 
 * @throws ExecuteException 
 */
public void start() throws ExecuteException, IOException {
  TaskController controller=new TaskController();
  DataGeneratorController dataController=new DataGeneratorController();
  String suiteID=generateSuiteID();
  Integer expID=0;
  String[] datasetsIDV=config.getStringArray(COMMON.CONFIG_DATASETS);
  String[] connectionsIDV=config.getStringArray(COMMON.CONFIG_CONNECTIONS);
  String[] tasksIDV=config.getStringArray(COMMON.CONFIG_TASKS);
  for (  String datasetIDV : datasetsIDV) {
    String datasetID=config.getString(datasetIDV + CONSTANTS.NAME_SUFFIX);
    String dataGenClass=config.getString(datasetIDV + CONSTANTS.DATA_GENERATOR_CLASS_NAME);
    String[] dataGenConstructorArgs=config.getStringArray(datasetIDV + CONSTANTS.CONSTRUCTOR_ARGS);
    expID++;
    Properties dataProperties=new Properties();
    if (dataGenClass != null) {
      dataProperties.put(COMMON.DATAGEN_CLASS_NAME,dataGenClass);
      if (dataGenConstructorArgs != null)       dataProperties.put(COMMON.DATAGEN_CONSTRUCTOR_ARGS,dataGenConstructorArgs);
      dataController.start(dataProperties);
    }
    Integer taskID=0;
    for (    String conIDV : connectionsIDV) {
      String conID=config.getString(conIDV + CONSTANTS.NAME_SUFFIX);
      String service=config.getString(conIDV + CONSTANTS.SERVICE_SUFFIX);
      String updateService=config.getString(conIDV + CONSTANTS.UPDATE_SERVICE_SUFFIX);
      String user=null;
      String pwd=null;
      if (config.containsKey(conIDV + CONSTANTS.SERVICE_USER) && config.containsKey(conIDV + CONSTANTS.SERVICE_PASSWORD)) {
        user=config.getString(conIDV + CONSTANTS.SERVICE_USER);
        pwd=config.getString(conIDV + CONSTANTS.SERVICE_PASSWORD);
      }
      for (      String taskIDV : tasksIDV) {
        taskID++;
        Properties taskProperties=new Properties();
        String[] ids=new String[]{suiteID,suiteID + ""String_Node_Str"" + expID,suiteID + ""String_Node_Str"" + expID+ ""String_Node_Str""+ taskID.toString(),datasetID,conID};
        List<Object> constructor=new LinkedList<Object>();
        List<Object> classes=new LinkedList<Object>();
        constructor.add(ids);
        classes.add(String[].class);
        constructor.add(new String[]{service,updateService,user,pwd});
        classes.add(String[].class);
        Configuration taskConfig=createTaskConfig(config,taskIDV);
        taskProperties.put(""String_Node_Str"",taskConfig);
        taskProperties.put(COMMON.CLASS_NAME,config.getString(taskIDV + CONSTANTS.CLASS_SUFFIX));
        taskProperties.put(COMMON.CONSTRUCTOR_ARGS,constructor.toArray());
        taskProperties.put(COMMON.CONSTRUCTOR_ARGS_CLASSES,classes.toArray(new Class[]{}));
        String[] args=new String[]{datasetID,conID,taskID + ""String_Node_Str""};
        if (config.containsKey(CONSTANTS.PRE_SCRIPT_HOOK))         ScriptExecutor.exec(config.getString(CONSTANTS.PRE_SCRIPT_HOOK),args);
        controller.startTask(taskProperties);
        if (config.containsKey(CONSTANTS.POST_SCRIPT_HOOK))         ScriptExecutor.exec(config.getString(CONSTANTS.POST_SCRIPT_HOOK),args);
      }
    }
  }
}",0.993046776232617
140851,"private String[] getQHConstructor(){
  List<String> qhConstructorTmp=new LinkedList<String>();
  qhConstructorTmp.add(0,qhClassName);
  if (qhConstructorTmp != null)   qhConstructorTmp.addAll(qhConstructor);
  return qhConstructorTmp.toArray(new String[]{});
}","private String[] getQHConstructor(){
  List<String> qhConstructorTmp=new LinkedList<String>();
  qhConstructorTmp.add(0,qhClassName);
  if (qhConstructor != null) {
    for (    String str : qhConstructor) {
      if (str != null)       qhConstructorTmp.add(str);
    }
  }
  return qhConstructorTmp.toArray(new String[]{});
}",0.8225255972696246
140852,"private void cachedFile(Integer index,String connID,File f,Integer extraLength,Triple[] data){
  List<String> header;
  try (BufferedReader reader=new BufferedReader(new FileReader(f))){
    String[] headerArr=reader.readLine().split(SEPERATOR);
    header=Arrays.asList(headerArr);
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + f.getName(),e);
    return;
  }
  StringBuilder dataString=new StringBuilder();
  dataString.append(connID).append(SEPERATOR);
  String[] ordered=new String[data.length - extraLength];
  for (index=extraLength; index < data.length; index++) {
    Triple triple=data[index];
    String key=triple.getPredicate();
    int j=header.indexOf(key) - 1;
    ordered[j]=triple.getObject().toString();
  }
  for (index=0; index < ordered.length - 1; index++) {
    dataString.append(ordered[index]).append(SEPERATOR);
  }
  if (ordered.length != 0)   dataString.append(ordered[index]);
  try (PrintWriter pw=new PrintWriter(new FileOutputStream(f,true))){
    pw.println(dataString.toString());
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + f.getAbsolutePath(),e);
    return;
  }
}","private void cachedFile(String connID,File f,Integer extraLength,Triple[] data){
  Integer index=0;
  List<String> header;
  try (BufferedReader reader=new BufferedReader(new FileReader(f))){
    String[] headerArr=reader.readLine().split(SEPERATOR);
    header=Arrays.asList(headerArr);
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + f.getName(),e);
    return;
  }
  StringBuilder dataString=new StringBuilder();
  dataString.append(connID).append(SEPERATOR);
  String[] ordered=new String[data.length - extraLength];
  for (index=extraLength; index < data.length; index++) {
    Triple triple=data[index];
    String key=triple.getPredicate();
    int j=header.indexOf(key) - 1;
    ordered[j]=triple.getObject().toString();
  }
  for (index=0; index < ordered.length - 1; index++) {
    dataString.append(ordered[index]).append(SEPERATOR);
  }
  if (ordered.length != 0)   dataString.append(ordered[index]);
  try (PrintWriter pw=new PrintWriter(new FileOutputStream(f,true))){
    pw.println(dataString.toString());
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + f.getAbsolutePath(),e);
    return;
  }
}",0.9856334349151068
140853,"private void uncachedFile(Integer index,String connID,File f,Integer extraLength,String extraHash,Triple[] data){
  try {
    f.createNewFile();
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + f.getAbsolutePath(),e);
    return;
  }
  StringBuilder headerString=new StringBuilder();
  headerString.append(""String_Node_Str"").append(SEPERATOR);
  StringBuilder dataString=new StringBuilder();
  dataString.append(connID).append(SEPERATOR);
  for (index=extraLength; index < data.length - 1; index++) {
    Triple triple=data[index];
    headerString.append(triple.getPredicate()).append(SEPERATOR);
    dataString.append(triple.getObject()).append(SEPERATOR);
  }
  if (data.length != 0) {
    Triple triple=data[index];
    headerString.append(triple.getPredicate());
    dataString.append(triple.getObject());
  }
  try (PrintWriter pw=new PrintWriter(new FileOutputStream(f,true))){
    pw.println(headerString.toString());
    pw.println(dataString.toString());
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + f.getAbsolutePath(),e);
    return;
  }
  taskFileExists.add(extraHash.toString());
}","private void uncachedFile(String connID,File f,Integer extraLength,String extraHash,Triple[] data){
  Integer index=0;
  try {
    f.createNewFile();
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + f.getAbsolutePath(),e);
    return;
  }
  StringBuilder headerString=new StringBuilder();
  headerString.append(""String_Node_Str"").append(SEPERATOR);
  StringBuilder dataString=new StringBuilder();
  dataString.append(connID).append(SEPERATOR);
  for (index=extraLength; index < data.length - 1; index++) {
    Triple triple=data[index];
    headerString.append(triple.getPredicate()).append(SEPERATOR);
    dataString.append(triple.getObject()).append(SEPERATOR);
  }
  if (data.length != 0) {
    Triple triple=data[index];
    headerString.append(triple.getPredicate());
    dataString.append(triple.getObject());
  }
  try (PrintWriter pw=new PrintWriter(new FileOutputStream(f,true))){
    pw.println(headerString.toString());
    pw.println(dataString.toString());
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + f.getAbsolutePath(),e);
    return;
  }
  taskFileExists.add(extraHash);
}",0.980599647266314
140854,"@Override public void addData(Properties meta,Triple[] data){
  String taskID=meta.getProperty(COMMON.EXPERIMENT_TASK_ID_KEY);
  String[] strArr=taskToDir.get(taskID);
  StringBuilder dir=new StringBuilder(strArr[0]);
  Integer extraLength=(Integer)meta.get(CONSTANTS.LENGTH_EXTRA_META_KEY);
  Integer index=0;
  StringBuilder extraHash=createExtraHash(index,extraLength,data);
  File f=getFileForExtraHash(taskID,dir,meta,extraHash.toString());
  String connID=strArr[1];
  if (f.exists()) {
    cachedFile(index,connID,f,extraLength,data);
  }
 else {
    uncachedFile(index,connID,f,extraLength,extraHash.toString(),data);
  }
}","@Override public void addData(Properties meta,Triple[] data){
  String taskID=meta.getProperty(COMMON.EXPERIMENT_TASK_ID_KEY);
  String[] strArr=taskToDir.get(taskID);
  StringBuilder dir=new StringBuilder(strArr[0]);
  Integer extraLength=(Integer)meta.get(CONSTANTS.LENGTH_EXTRA_META_KEY);
  StringBuilder extraHash=new StringBuilder();
  createExtraHash(extraHash,extraLength,data);
  File f=getFileForExtraHash(dir,meta,extraHash.toString());
  String connID=strArr[1];
  if (f.exists()) {
    cachedFile(connID,f,extraLength,data);
  }
 else {
    uncachedFile(connID,f,extraLength,extraHash.toString(),data);
  }
}",0.9400479616306956
140855,"private File getFileForExtraHash(String taskID,StringBuilder dir,Properties meta,String extraHash){
  dir.append(meta.get(COMMON.METRICS_PROPERTIES_KEY));
  File dir1=new File(dir.toString());
  dir1.mkdirs();
  String fileName=""String_Node_Str"";
  if (extraHash.length() != 0) {
    fileName=extraHash.toString();
  }
 else {
    fileName=meta.get(COMMON.METRICS_PROPERTIES_KEY).toString();
  }
  File f=new File(dir.toString() + File.separator + fileName+ SUFFIX);
  return f;
}","private File getFileForExtraHash(StringBuilder dir,Properties meta,String extraHash){
  dir.append(meta.get(COMMON.METRICS_PROPERTIES_KEY));
  File dir1=new File(dir.toString());
  dir1.mkdirs();
  String fileName=""String_Node_Str"";
  if (extraHash.length() != 0) {
    fileName=extraHash;
  }
 else {
    fileName=meta.get(COMMON.METRICS_PROPERTIES_KEY).toString();
  }
  File f=new File(dir.toString() + File.separator + fileName+ SUFFIX);
  return f;
}",0.9732620320855616
140856,"private StringBuilder createExtraHash(Integer index,Integer extraLength,Triple[] data){
  StringBuilder extraHash=new StringBuilder();
  for (; index < extraLength - 1; index++) {
    extraHash.append(data[index].getPredicate().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"").append(data[index].getObject().toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"");
  }
  if (extraLength != 0) {
    extraHash.append(data[index].getPredicate().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"").append(data[index].getObject().toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  }
  return extraHash;
}","private int createExtraHash(StringBuilder extraHash,Integer extraLength,Triple[] data){
  int index=0;
  for (; index < extraLength - 1; index++) {
    extraHash.append(data[index].getPredicate().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"").append(data[index].getObject().toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"");
  }
  if (extraLength != 0) {
    extraHash.append(data[index].getPredicate().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"").append(data[index].getObject().toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  }
  return index;
}",0.9357907253269916
140857,"/** 
 * Will create a T Object from a Constructor Object created by the class name and the constructor arguments, and an Array which states each  Constructor Object Class
 * @param className The Class Name of the Implemented T Object
 * @param constructorArgs constructor arguments (must be Strings), can be safely null
 * @param constructorClasses The class of each constructor argument
 * @return The T Object created by the Constructor using theconstructor args
 */
@SuppressWarnings(""String_Node_Str"") public T create(String className,Object[] constructorArgs,Class<?>[] constructorClasses){
  if (className == null) {
    return null;
  }
  Class<? extends T> clazz;
  try {
    clazz=(Class<? extends T>)ClassLoader.getSystemClassLoader().loadClass(className);
  }
 catch (  ClassNotFoundException e1) {
    LOGGER.error(""String_Node_Str"" + className + ""String_Node_Str"",e1);
    return null;
  }
  Object[] constructorArgs2=constructorArgs;
  if (constructorArgs == null) {
    constructorArgs2=new Object[0];
  }
  if (constructorClasses == null) {
    constructorClasses=new Class[constructorArgs2.length];
    for (int i=0; i < constructorClasses.length; i++) {
      constructorClasses[i]=String.class;
    }
  }
  try {
    Constructor<? extends T> constructor=clazz.getConstructor(constructorClasses);
    return constructor.newInstance(constructorArgs2);
  }
 catch (  InstantiationException|IllegalAccessException|IllegalArgumentException|InvocationTargetException|NoSuchMethodException|SecurityException e) {
    LOGGER.error(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"",e);
    return null;
  }
}","/** 
 * Will create a T Object from a Constructor Object created by the class name and the constructor arguments, and an Array which states each  Constructor Object Class
 * @param className The Class Name of the Implemented T Object
 * @param constructorArgs constructor arguments (must be Strings), can be safely null
 * @param constructorClasses The class of each constructor argument
 * @return The T Object created by the Constructor using theconstructor args
 */
@SuppressWarnings(""String_Node_Str"") public T create(String className,Object[] constructorArgs,Class<?>[] constructorClasses){
  Object[] constructorArgs2=constructorArgs;
  if (className == null) {
    return null;
  }
  Class<? extends T> clazz;
  try {
    clazz=(Class<? extends T>)ClassLoader.getSystemClassLoader().loadClass(className);
  }
 catch (  ClassNotFoundException e1) {
    LOGGER.error(""String_Node_Str"" + className + ""String_Node_Str"",e1);
    return null;
  }
  if (constructorArgs2 == null) {
    constructorArgs2=new Object[0];
  }
  if (constructorClasses == null) {
    constructorClasses=new Class[constructorArgs2.length];
    for (int i=0; i < constructorClasses.length; i++) {
      constructorClasses[i]=String.class;
    }
  }
  try {
    Constructor<? extends T> constructor=clazz.getConstructor(constructorClasses);
    return constructor.newInstance(constructorArgs2);
  }
 catch (  InstantiationException|IllegalAccessException|IllegalArgumentException|InvocationTargetException|NoSuchMethodException|SecurityException e) {
    LOGGER.error(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"",e);
    return null;
  }
}",0.9701446598953524
140858,"public FileStorage(String rootDir){
  this.rootDir=rootDir;
}","/** 
 * @param rootDir
 */
public FileStorage(String rootDir){
  this.rootDir=rootDir;
}",0.8187919463087249
140859,"@Override public void addData(Properties meta,Triple[] data){
  String taskID=meta.getProperty(COMMON.EXPERIMENT_TASK_ID_KEY);
  String[] strArr=taskToDir.get(taskID);
  StringBuilder dir=new StringBuilder(strArr[0]);
  dir.append(meta.get(COMMON.METRICS_PROPERTIES_KEY));
  File dir1=new File(dir.toString());
  dir1.mkdirs();
  Integer extraLength=(Integer)meta.get(CONSTANTS.LENGTH_EXTRA_META_KEY);
  StringBuilder extraHash=new StringBuilder();
  int i=0;
  for (; i < extraLength - 1; i++) {
    extraHash.append(data[i].getPredicate().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"").append(data[i].getObject().toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"");
  }
  if (extraLength != 0) {
    extraHash.append(data[i].getPredicate().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"").append(data[i].getObject().toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  }
  String fileName=""String_Node_Str"";
  if (extraHash.length() != 0) {
    fileName=extraHash.toString();
  }
 else {
    fileName=meta.get(COMMON.METRICS_PROPERTIES_KEY).toString();
  }
  File f=new File(dir.toString() + File.separator + fileName+ SUFFIX);
  String connID=strArr[1];
  if (f.exists()) {
    List<String> header;
    try (BufferedReader reader=new BufferedReader(new FileReader(f))){
      String[] headerArr=reader.readLine().split(SEPERATOR);
      header=Arrays.asList(headerArr);
    }
 catch (    IOException e) {
      LOGGER.error(""String_Node_Str"" + f.getName(),e);
      return;
    }
    StringBuilder dataString=new StringBuilder();
    dataString.append(connID).append(SEPERATOR);
    String[] ordered=new String[data.length - extraLength];
    for (i=extraLength; i < data.length; i++) {
      Triple triple=data[i];
      String key=triple.getPredicate();
      int j=header.indexOf(key) - 1;
      ordered[j]=triple.getObject().toString();
    }
    for (i=0; i < ordered.length - 1; i++) {
      dataString.append(ordered[i]).append(SEPERATOR);
    }
    if (ordered.length != 0)     dataString.append(ordered[i]);
    try (PrintWriter pw=new PrintWriter(new FileOutputStream(f,true))){
      pw.println(dataString.toString());
    }
 catch (    IOException e) {
      LOGGER.error(""String_Node_Str"" + f.getAbsolutePath(),e);
      return;
    }
  }
 else {
    try {
      f.createNewFile();
    }
 catch (    IOException e) {
      LOGGER.error(""String_Node_Str"" + f.getAbsolutePath(),e);
      return;
    }
    StringBuilder headerString=new StringBuilder();
    headerString.append(""String_Node_Str"").append(SEPERATOR);
    StringBuilder dataString=new StringBuilder();
    dataString.append(connID).append(SEPERATOR);
    for (i=extraLength; i < data.length - 1; i++) {
      Triple triple=data[i];
      headerString.append(triple.getPredicate()).append(SEPERATOR);
      dataString.append(triple.getObject()).append(SEPERATOR);
    }
    if (data.length != 0) {
      Triple triple=data[i];
      headerString.append(triple.getPredicate());
      dataString.append(triple.getObject());
    }
    try (PrintWriter pw=new PrintWriter(new FileOutputStream(f,true))){
      pw.println(headerString.toString());
      pw.println(dataString.toString());
    }
 catch (    IOException e) {
      LOGGER.error(""String_Node_Str"" + f.getAbsolutePath(),e);
      return;
    }
    taskFileExists.add(extraHash.toString());
  }
}","@Override public void addData(Properties meta,Triple[] data){
  String taskID=meta.getProperty(COMMON.EXPERIMENT_TASK_ID_KEY);
  String[] strArr=taskToDir.get(taskID);
  StringBuilder dir=new StringBuilder(strArr[0]);
  Integer extraLength=(Integer)meta.get(CONSTANTS.LENGTH_EXTRA_META_KEY);
  Integer index=0;
  StringBuilder extraHash=createExtraHash(index,extraLength,data);
  File f=getFileForExtraHash(taskID,dir,meta,extraHash.toString());
  String connID=strArr[1];
  if (f.exists()) {
    cachedFile(index,connID,f,extraLength,data);
  }
 else {
    uncachedFile(index,connID,f,extraLength,extraHash.toString(),data);
  }
}",0.1897326709250059
140860,"public void recv() throws InstantiationException, IllegalAccessException, IOException, TimeoutException, IguanaException, InterruptedException {
  Config.getInstance(""String_Node_Str"");
  ExperimentManager em=new ExperimentManagerTest();
  IConsumer consume=new DefaultConsumer(em);
  String host=Config.getInstance().getString(COMMON.CONSUMER_HOST_KEY);
  String queueName=COMMON.CORE2RP_QUEUE_NAME;
  consume.init(host,queueName);
  Thread.sleep(2000);
  assertEquals(ConsumerTest.p.getProperty(""String_Node_Str""),""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  consume.close();
}","public void recv(IConsumer consume) throws InstantiationException, IllegalAccessException, IOException, TimeoutException, IguanaException, InterruptedException {
  Config.getInstance(""String_Node_Str"");
  String host=Config.getInstance().getString(COMMON.CONSUMER_HOST_KEY);
  String queueName=COMMON.CORE2RP_QUEUE_NAME;
  consume.init(host,queueName);
  Thread.sleep(2000);
}",0.7379239465570401
140861,"@Test public void main() throws InstantiationException, IllegalAccessException, IOException, TimeoutException, IguanaException, InterruptedException {
  Config.getInstance(""String_Node_Str"");
  ConsumerTest ct=new ConsumerTest();
  ct.send();
  Thread.sleep(2000);
  ct.recv();
}","@Test public void main() throws InstantiationException, IllegalAccessException, IOException, TimeoutException, IguanaException, InterruptedException {
  Config.getInstance(""String_Node_Str"");
  ConsumerTest ct=new ConsumerTest();
  Properties p=new Properties();
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  ct.send(p);
  Thread.sleep(2000);
  ExperimentManager em=new ExperimentManagerTest();
  IConsumer consume=new DefaultConsumer(em);
  ct.recv(consume);
  assertEquals(ConsumerTest.p.getProperty(""String_Node_Str""),""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  consume.close();
}",0.6083052749719416
140862,"public void send() throws IOException, TimeoutException {
  ConnectionFactory factory=new ConnectionFactory();
  factory.setHost(""String_Node_Str"");
  Connection connection=factory.newConnection();
  Channel channel=connection.createChannel();
  channel.queueDeclare(COMMON.CORE2RP_QUEUE_NAME,false,false,false,null);
  Properties p=new Properties();
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  ObjectOutputStream oos=new ObjectOutputStream(bos);
  oos.writeObject(p);
  oos.flush();
  oos.close();
  bos.close();
  byte[] data=bos.toByteArray();
  channel.basicPublish(""String_Node_Str"",COMMON.CORE2RP_QUEUE_NAME,null,data);
}","public void send(Properties p) throws IOException, TimeoutException {
  ConnectionFactory factory=new ConnectionFactory();
  factory.setHost(""String_Node_Str"");
  Connection connection=factory.newConnection();
  Channel channel=connection.createChannel();
  channel.queueDeclare(COMMON.CORE2RP_QUEUE_NAME,false,false,false,null);
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  ObjectOutputStream oos=new ObjectOutputStream(bos);
  oos.writeObject(p);
  oos.flush();
  oos.close();
  bos.close();
  byte[] data=bos.toByteArray();
  channel.basicPublish(""String_Node_Str"",COMMON.CORE2RP_QUEUE_NAME,null,data);
}",0.9248291571753986
140863,"/** 
 * Saves a FEASIBLE Output to Query Per line
 * @param input FEASIBLE QUery list
 * @param queriesFile Output file
 * @throws IOException
 */
public void saveFeasibleToInstances(String input,String queriesFile) throws IOException {
  List<String[]> qs=QueryHandler.getFeasibleToList(input,Logger.getGlobal());
  PrintWriter pw=new PrintWriter(queriesFile);
  for (int i=0; i < qs.size() - 1; i++) {
    pw.println(qs.get(i)[0]);
  }
  pw.print(qs.get(qs.size() - 1)[0]);
  pw.close();
}","/** 
 * Saves a FEASIBLE Output to Query Per line
 * @param input FEASIBLE QUery list
 * @param queriesFile Output file
 * @throws IOException
 */
public void saveFeasibleToInstances(String input,String queriesFile) throws IOException {
  List<String[]> qs=QueryHandlerImpl.getFeasibleToList(input,Logger.getGlobal());
  PrintWriter pw=new PrintWriter(queriesFile);
  for (int i=0; i < qs.size() - 1; i++) {
    pw.println(qs.get(i)[0]);
  }
  pw.print(qs.get(qs.size() - 1)[0]);
  pw.close();
}",0.995943204868154
140864,"/** 
 * This will simply load the file by blocks of x rows, then sort them in-memory, and write the result to a bunch of temporary files that have to be merged later. Modified by M.Morsey I added a call to a function to normalize the _query, by renaming all _query variables, in order to make similar queries that use different variables counted as same _query.
 * @param file some flat  file
 * @param cmp the comparator to use
 * @param renameVariables should variables be renamed as ?var1 ,...
 * @return a list of temporary flat files
 * @throws IOException Signals that an IOException has occurred.
 */
public static List<File> sortInBatch(File file,Comparator<String> cmp,boolean renameVariables) throws IOException {
  List<File> files=new ArrayList<File>();
  BufferedReader fbr;
  long blocksize;
  if (renameVariables) {
    String normalizedFilename=normalizeFileVariables(file);
    File normalizedFile=new File(normalizedFilename);
    fbr=new BufferedReader(new FileReader(normalizedFile));
    blocksize=estimateBestSizeOfBlocks(normalizedFile);
  }
 else {
    fbr=new BufferedReader(new FileReader(file));
    blocksize=estimateBestSizeOfBlocks(file);
  }
  try {
    List<String> tmplist=new ArrayList<String>();
    String line=""String_Node_Str"";
    try {
      while (line != null) {
        long currentblocksize=0;
        while ((currentblocksize < blocksize) && ((line=fbr.readLine()) != null)) {
          tmplist.add(line);
          currentblocksize+=line.length() * 2;
        }
        files.add(sortAndSave(tmplist,cmp));
        tmplist.clear();
      }
    }
 catch (    EOFException oef) {
      if (tmplist.size() > 0) {
        files.add(sortAndSave(tmplist,cmp));
        tmplist.clear();
      }
    }
  }
  finally {
    fbr.close();
  }
  return files;
}","/** 
 * This will simply load the file by blocks of x rows, then sort them in-memory, and write the result to a bunch of temporary files that have to be merged later. Modified by M.Morsey I added a call to a function to normalize the _query, by renaming all _query variables, in order to make similar queries that use different variables counted as same _query.
 * @param file some flat  file
 * @param cmp the comparator to use
 * @param renameVariables should variables be renamed as ?var1 ,...
 * @return a list of temporary flat files
 * @throws IOException Signals that an IOException has occurred.
 */
public static List<File> sortInBatch(File file,Comparator<String> cmp,boolean renameVariables) throws IOException {
  List<File> files=new ArrayList<File>();
  BufferedReader fbr;
  long blocksize;
  if (renameVariables) {
    String normalizedFilename=normalizeFileVariables(file);
    File normalizedFile=new File(normalizedFilename);
    fbr=new BufferedReader(new FileReader(normalizedFile));
    blocksize=estimateBestSizeOfBlocks(normalizedFile);
  }
 else {
    fbr=new BufferedReader(new FileReader(file));
    blocksize=estimateBestSizeOfBlocks(file);
  }
  try {
    List<String> tmplist=new ArrayList<String>();
    String line=""String_Node_Str"";
    try {
      while (line != null) {
        long currentblocksize=0;
        while ((currentblocksize < blocksize) && ((line=fbr.readLine()) != null)) {
          if (line.trim().isEmpty()) {
            continue;
          }
          tmplist.add(line);
          currentblocksize+=line.length() * 2;
        }
        files.add(sortAndSave(tmplist,cmp));
        tmplist.clear();
      }
    }
 catch (    EOFException oef) {
      if (tmplist.size() > 0) {
        files.add(sortAndSave(tmplist,cmp));
        tmplist.clear();
      }
    }
  }
  finally {
    fbr.close();
  }
  return files;
}",0.9800600928708004
140865,"@Override public int compare(String s1,String s2){
  s1=s1.trim();
  s2=s2.trim();
  s1=s1.replace(""String_Node_Str"",""String_Node_Str"");
  s2=s2.replace(""String_Node_Str"",""String_Node_Str"");
  String[] cmp1=s1.split(""String_Node_Str"");
  for (int k=3; k < cmp1.length; k++) {
    cmp1[2]+=""String_Node_Str"" + cmp1[k];
  }
  String[] cmp2=s2.split(""String_Node_Str"");
  for (int k=3; k < cmp2.length; k++) {
    cmp2[2]+=""String_Node_Str"" + cmp2[k];
  }
  int ret=cmp1[0].compareTo(cmp2[0]);
  if (ret == 0) {
    int t1=0, t2=0;
    if (cmp1[1].equals(CoherenceMetrics.TYPE_STRING)) {
      t1=-1;
    }
    if (cmp2[1].equals(CoherenceMetrics.TYPE_STRING)) {
      t2=1;
    }
    if (t1 == -1 && t2 == 1) {
      ret=0;
    }
 else     if (t1 == -1 || t2 == 1) {
      ret=t1 + t2;
    }
 else {
      ret=cmp1[1].compareTo(cmp2[1]);
    }
  }
  if (ret == 0) {
    ret=cmp1[2].compareTo(cmp2[2]);
  }
  return ret;
}","@Override public int compare(String s1,String s2){
  s1=s1.trim();
  s2=s2.trim();
  s1=s1.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
  s2=s2.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").trim();
  String[] cmp1=s1.split(""String_Node_Str"");
  if (cmp1.length < 2) {
    System.out.println(""String_Node_Str"" + cmp1[0]);
  }
  for (int k=3; k < cmp1.length; k++) {
    cmp1[2]+=""String_Node_Str"" + cmp1[k];
  }
  String[] cmp2=s2.split(""String_Node_Str"");
  for (int k=3; k < cmp2.length; k++) {
    cmp2[2]+=""String_Node_Str"" + cmp2[k];
  }
  int ret=cmp1[0].compareTo(cmp2[0]);
  if (ret == 0) {
    int t1=0, t2=0;
    if (cmp1[1].equals(CoherenceMetrics.TYPE_STRING)) {
      t1=-1;
    }
    if (cmp2[1].equals(CoherenceMetrics.TYPE_STRING)) {
      t2=1;
    }
    if (t1 == -1 && t2 == 1) {
      ret=0;
    }
 else     if (t1 == -1 || t2 == 1) {
      ret=t1 + t2;
    }
 else {
      ret=cmp1[1].compareTo(cmp2[1]);
    }
  }
  if (ret == 0) {
    ret=cmp1[2].compareTo(cmp2[2]);
  }
  return ret;
}",0.8537549407114624
140866,"/** 
 * Converts the encoded queries in a given logfile to queries
 * @param pw the Printwriter to use to write the queries
 * @param input the logfile
 */
public static void logToQueries(PrintWriter pw,File input,Boolean onlyComplexQueries,Map<String,Long> map){
  FileInputStream fis=null;
  BufferedReader br=null;
  String line;
  try {
    fis=new FileInputStream(input);
    br=new BufferedReader(new InputStreamReader(fis,Charset.forName(""String_Node_Str"")));
    while ((line=br.readLine()) != null) {
      int index=line.indexOf(""String_Node_Str"");
      int lastIndex=line.indexOf(""String_Node_Str"",index + 1);
      line=line.substring(index,lastIndex);
      String graph=null;
      Pattern p=Pattern.compile(""String_Node_Str"");
      Matcher m=p.matcher(line);
      if (m.find()) {
        String complete=m.group();
        graph=complete.substring(complete.indexOf(""String_Node_Str"") + 1,complete.lastIndexOf(""String_Node_Str""));
        graph=URLDecoder.decode(graph,""String_Node_Str"");
      }
      line=line.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      if ((index=line.indexOf(""String_Node_Str"")) >= 0)       line=line.substring(0,index);
      try {
        line=URLDecoder.decode(line,""String_Node_Str"");
      }
 catch (      Exception e) {
        log.warning(""String_Node_Str"" + line);
        LogHandler.writeStackTrace(log,e,Level.WARNING);
      }
      line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
      line=queryVarRename(line);
      Query q=QuerySorter.isSPARQL(line);
      try {
        if (q == null && !QuerySorter.isSPARQLUpdate(line)) {
          throw new QueryException();
        }
        Byte[] features=LogSolution.getFeatureVector(line,LogSolution.getFeatures());
        int count=LogSolution.countTriplesInQuery(line);
        String feat2=""String_Node_Str"";
        for (int i=0; i < features.length - 1; i++) {
          feat2+=features[i] + ""String_Node_Str"";
        }
        feat2+=features[features.length - 1];
        Long n=map.get(feat2 + ""String_Node_Str"" + count);
        if (n == null)         n=0L;
        map.put(features + ""String_Node_Str"" + count,n + 1);
        if (q != null) {
          if (graph != null) {
            q.addGraphURI(graph);
          }
          line=q.toString().replace(""String_Node_Str"",""String_Node_Str"");
        }
        if (onlyComplexQueries) {
          if (countTriplesInQuery(line) <= 1) {
            continue;
          }
          Boolean cont=false;
          for (          String feat : getFeatures()) {
            if (line.contains(feat)) {
              cont=true;
              break;
            }
          }
          if (!cont)           continue;
        }
        pw.println(line.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 catch (      QueryException e) {
      }
    }
    pw.flush();
  }
 catch (  IOException e) {
    LogHandler.writeStackTrace(log,e,Level.SEVERE);
  }
 finally {
    try {
      fis.close();
      br.close();
    }
 catch (    IOException e) {
      LogHandler.writeStackTrace(log,e,Level.SEVERE);
    }
  }
}","/** 
 * Converts the encoded queries in a given logfile to queries
 * @param pw the Printwriter to use to write the queries
 * @param input the logfile
 */
public static void logToQueries(PrintWriter pw,File input,Boolean onlyComplexQueries,Map<String,Long> map){
  FileInputStream fis=null;
  BufferedReader br=null;
  String line;
  try {
    fis=new FileInputStream(input);
    br=new BufferedReader(new InputStreamReader(fis,Charset.forName(""String_Node_Str"")));
    while ((line=br.readLine()) != null) {
      int index=line.indexOf(""String_Node_Str"");
      int lastIndex=line.indexOf(""String_Node_Str"",index + 1);
      String line2=line.substring(index,lastIndex);
      String graph=null;
      Pattern p=Pattern.compile(""String_Node_Str"");
      Matcher m=p.matcher(line2);
      if (m.find()) {
        String complete=m.group();
        graph=complete.substring(complete.indexOf(""String_Node_Str"") + 1,complete.lastIndexOf(""String_Node_Str""));
        graph=URLDecoder.decode(graph,""String_Node_Str"");
      }
      List<String> tokens=Arrays.asList(line.split(""String_Node_Str""));
      String prequery=""String_Node_Str"";
      for (int j=0; j < tokens.size(); j++) {
        if (tokens.get(j).contains(""String_Node_Str"")) {
          prequery=tokens.get(j).replaceFirst(""String_Node_Str"",""String_Node_Str"");
        }
      }
      line=prequery.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if ((index=line.indexOf(""String_Node_Str"")) >= 0)       line=line.substring(0,index);
      try {
        line=URLDecoder.decode(line,""String_Node_Str"");
      }
 catch (      Exception e) {
        log.warning(""String_Node_Str"" + line);
        LogHandler.writeStackTrace(log,e,Level.WARNING);
      }
      line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
      line=queryVarRename(line);
      Query q=QuerySorter.isSPARQL(line);
      try {
        if (q == null && !QuerySorter.isSPARQLUpdate(line)) {
          throw new QueryException();
        }
        Byte[] features=LogSolution.getFeatureVector(line,LogSolution.getFeatures());
        int count=LogSolution.countTriplesInQuery(line);
        String feat2=""String_Node_Str"";
        for (int i=0; i < features.length - 1; i++) {
          feat2+=features[i] + ""String_Node_Str"";
        }
        feat2+=features[features.length - 1];
        Long n=map.get(feat2 + ""String_Node_Str"" + count);
        if (n == null)         n=0L;
        map.put(features + ""String_Node_Str"" + count,n + 1);
        if (q != null) {
          if (graph != null) {
            q.addGraphURI(graph);
          }
          line=q.toString().replace(""String_Node_Str"",""String_Node_Str"");
        }
        if (onlyComplexQueries) {
          if (countTriplesInQuery(line) <= 1) {
            continue;
          }
          Boolean cont=false;
          for (          String feat : getFeatures()) {
            if (line.contains(feat)) {
              cont=true;
              break;
            }
          }
          if (!cont)           continue;
        }
        pw.println(line.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 catch (      QueryException e) {
      }
    }
    pw.flush();
  }
 catch (  IOException e) {
    LogHandler.writeStackTrace(log,e,Level.SEVERE);
  }
 finally {
    try {
      fis.close();
      br.close();
    }
 catch (    IOException e) {
      LogHandler.writeStackTrace(log,e,Level.SEVERE);
    }
  }
}",0.9469753547423452
140867,"@Override public void cluster(String logsPath,String queries) throws IOException {
  String start=DateFormat.getDateTimeInstance().format(new Date());
  Calendar calS=Calendar.getInstance();
  log.info(""String_Node_Str"" + start);
  new File(PATH).mkdir();
  String queriesFile=PATH + ""String_Node_Str"";
  String structs=PATH + ""String_Node_Str"";
  String freqFile=PATH + ""String_Node_Str"";
  String sortedFreqFile=PATH + ""String_Node_Str"";
  String freqFileQ=PATH + ""String_Node_Str"";
  String sortedFreqFileQ=PATH + ""String_Node_Str"";
  String clusterOutput=PATH + ""String_Node_Str"";
  String simFile=PATH + ""String_Node_Str"";
  String queriesStruct=PATH + ""String_Node_Str"";
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  LogSolution.logsToQueries(logsPath,queriesFile,false);
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  LogSolution.patternsToFrequents(queriesFile,freqFileQ,thresholdQueries);
  LogSolution.sortFrequents(freqFileQ,sortedFreqFileQ);
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  log.info(""String_Node_Str"");
  LogSolution.queriesToStructure(queriesFile,structs);
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  LogSolution.patternsToFrequents(structs,freqFile,thresholdStructs);
  LogSolution.sortFrequents(freqFile,sortedFreqFile);
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  log.info(""String_Node_Str"");
  LogSolution.similarity(sortedFreqFile,simFile,delta);
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  log.info(""String_Node_Str"");
  LogSolution.structsToFreqQueries(sortedFreqFile,sortedFreqFileQ,queriesStruct);
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  log.info(""String_Node_Str"");
  LogCluster.borderFlow(harden,threshold,testOne,heuristic,caching,minNodes,queriesStruct,simFile,clusterOutput,queries);
  String end=DateFormat.getDateTimeInstance().format(new Date());
  Calendar calE=Calendar.getInstance();
  log.info(""String_Node_Str"" + end);
  log.info(""String_Node_Str"" + EmailHandler.getWellFormatDateDiff(calS,calE));
}","@Override public void cluster(String logsPath,String queries) throws IOException {
  String start=DateFormat.getDateTimeInstance().format(new Date());
  Calendar calS=Calendar.getInstance();
  log.info(""String_Node_Str"" + start);
  new File(PATH).mkdir();
  String queriesFile=PATH + ""String_Node_Str"";
  String structs=PATH + ""String_Node_Str"";
  String freqFile=PATH + ""String_Node_Str"";
  String sortedFreqFile=PATH + ""String_Node_Str"";
  String freqFileQ=PATH + ""String_Node_Str"";
  String sortedFreqFileQ=PATH + ""String_Node_Str"";
  String clusterOutput=PATH + ""String_Node_Str"";
  String simFile=PATH + ""String_Node_Str"";
  String queriesStruct=PATH + ""String_Node_Str"";
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  LogSolution.logsToQueries(logsPath,queriesFile,false);
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  LogSolution.patternsToFrequents(queriesFile,freqFileQ,thresholdQueries);
  LogSolution.sortFrequents(freqFileQ,sortedFreqFileQ);
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  log.info(""String_Node_Str"");
  LogSolution.queriesToStructure(queriesFile,structs);
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  LogSolution.patternsToFrequents(structs,freqFile,thresholdStructs);
  LogSolution.sortFrequents(freqFile,sortedFreqFile);
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  log.info(""String_Node_Str"");
  LogCluster.executeLimes(sortedFreqFile);
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  log.info(""String_Node_Str"");
  LogSolution.structsToFreqQueries(sortedFreqFile,sortedFreqFileQ,queriesStruct);
  log.info(""String_Node_Str"" + DateFormat.getDateTimeInstance().format(new Date()));
  log.info(""String_Node_Str"");
  LogCluster.borderFlow(harden,threshold,testOne,heuristic,caching,minNodes,queriesStruct,simFile,clusterOutput,queries);
  String end=DateFormat.getDateTimeInstance().format(new Date());
  Calendar calE=Calendar.getInstance();
  log.info(""String_Node_Str"" + end);
  log.info(""String_Node_Str"" + EmailHandler.getWellFormatDateDiff(calS,calE));
}",0.9827765096493049
140868,"/** 
 * NTRIPLE File to an insert or delete query.
 * @param file the file
 * @param insert if query should be insert (true) or delete (false)
 * @param graphUri the graph to use (can be null)
 * @return the query
 */
public static String ntToQuery(File file,Boolean insert,String graphUri){
  String query=""String_Node_Str"";
  query=""String_Node_Str"";
  if (!insert) {
    query=""String_Node_Str"";
  }
  if (graphUri != null) {
    query+=""String_Node_Str"" + graphUri + ""String_Node_Str"";
  }
  Model m=ModelFactory.createDefaultModel();
  m.read(file.toURI().toString());
  String lines=GraphHandler.GraphToSPARQLString(m.getGraph());
  lines=lines.substring(1,lines.length() - 1);
  query+=lines;
  if (graphUri != null) {
    query+=""String_Node_Str"";
  }
  query+=""String_Node_Str"";
  if (insert)   query+=""String_Node_Str"";
  return query;
}","/** 
 * NTRIPLE File to an insert or delete query.
 * @param file the file
 * @param insert if query should be insert (true) or delete (false)
 * @param graphUri the graph to use (can be null)
 * @return the query
 */
public static String ntToQuery(File file,Boolean insert,String graphUri){
  String query=""String_Node_Str"";
  query=""String_Node_Str"";
  if (!insert) {
    query=""String_Node_Str"";
  }
  if (graphUri != null) {
    query+=""String_Node_Str"" + graphUri + ""String_Node_Str"";
  }
  Model m=ModelFactory.createDefaultModel();
  m.read(file.toURI().toString());
  String lines=GraphHandler.GraphToSPARQLString(m.getGraph());
  lines=lines.substring(1,lines.length() - 1);
  query+=lines;
  if (graphUri != null) {
    query+=""String_Node_Str"";
  }
  query+=""String_Node_Str"";
  if (insert)   query+=""String_Node_Str"";
  System.out.println(query);
  return query;
}",0.9831688914683692
140869,"@Override public void start() throws IOException {
  log=Logger.getLogger(StressTestcase.class.getName());
  LogHandler.initLogFileHandler(log,StressTestcase.class.getSimpleName());
  Map<String,QueryTestcase> threadPool=new HashMap<String,QueryTestcase>();
  log.info(""String_Node_Str"");
  long timeLimit=Long.parseLong(String.valueOf(props.get(""String_Node_Str"")));
  String queryPatterns=String.valueOf(props.get(""String_Node_Str""));
  for (  Object key : props.keySet()) {
    if (key == null || props.get(key) == null)     continue;
    propsUpdate.put(key,props.get(key));
  }
  String updateStrategy=String.valueOf(props.get(""String_Node_Str""));
  int limit=0;
  try {
    limit=Integer.parseInt(String.valueOf(props.get(""String_Node_Str"")));
  }
 catch (  Exception e) {
    limit=5000;
  }
  String ldpath=null;
  try {
    ldpath=String.valueOf(props.get(""String_Node_Str""));
    propsUpdate.put(""String_Node_Str"",props.getProperty(""String_Node_Str""));
  }
 catch (  Exception e) {
  }
  QueryTestcase.initQH(queryPatterns,updateStrategy,ldpath,limit,log);
  ExecutorService executor=Executors.newFixedThreadPool(users + updateUsers);
  for (Integer i=0; i < users; i++) {
    SPARQLQueryTestcase qt=new SPARQLQueryTestcase();
    qt.setRandomNumber(i + 1);
    qt.setConnection(con);
    qt.setCurrentDBName(currentDBName);
    qt.setCurrentPercent(percent);
    qt.setProperties(props);
    Log.info(""String_Node_Str"" + i + ""String_Node_Str"");
    executor.execute(qt);
    threadPool.put(""String_Node_Str"" + i,qt);
  }
  for (int i=users; i < updateUsers + users; i++) {
    LiveDataQueryTestcase qt=new LiveDataQueryTestcase();
    qt.setConnection(con);
    qt.setCurrentDBName(currentDBName);
    qt.setCurrentPercent(percent);
    qt.setProperties(propsUpdate);
    if (propsUpdate.containsKey(""String_Node_Str"")) {
      qt.setAmount(Integer.parseInt(String.valueOf(propsUpdate.get(""String_Node_Str""))));
    }
    qt.setStrategyRandom(i);
    qt.setStrategy(String.valueOf(propsUpdate.get(""String_Node_Str"")));
    log.info(""String_Node_Str"" + (i - users) + ""String_Node_Str"");
    executor.execute(qt);
    threadPool.put(""String_Node_Str"" + i,qt);
  }
  executor.shutdown();
  long time=new Date().getTime();
  while (new Date().getTime() - time < timeLimit) {
  }
  for (  String t : threadPool.keySet()) {
    threadPool.get(t).sendEndSignal();
  }
  while (!executor.isTerminated()) {
  }
  log.info(""String_Node_Str"");
  Collection<Collection<ResultSet>> results=new LinkedList<Collection<ResultSet>>();
  Collection<Collection<ResultSet>> results2=new LinkedList<Collection<ResultSet>>();
  for (  String t : threadPool.keySet()) {
    if (t.startsWith(""String_Node_Str""))     results2.add(threadPool.get(t).getResults());
 else     results.add(threadPool.get(t).getResults());
  }
  log.info(""String_Node_Str"");
  int user=0;
  for (  Collection<ResultSet> resultsUser : results) {
    for (    ResultSet result : resultsUser) {
      String file=new File(result.getFileName()).getName();
      file=file.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
      if (user < users)       file=file.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + user;
 else       file=file.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + (user);
      result.setFileName(File.separator + file);
      try {
        result.save();
      }
 catch (      IOException e) {
        log.severe(""String_Node_Str"");
        LogHandler.writeStackTrace(log,e,Level.SEVERE);
      }
    }
    resU.addAll(resultsUser);
    user++;
  }
  user=0;
  for (  Collection<ResultSet> resultsUser : results2) {
    for (    ResultSet result : resultsUser) {
      String file=new File(result.getFileName()).getName();
      file=file.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
      if (user < users)       file=file.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + user;
 else       file=file.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + (user);
      result.setFileName(File.separator + file);
      try {
        result.save();
      }
 catch (      IOException e) {
        log.severe(""String_Node_Str"");
        LogHandler.writeStackTrace(log,e,Level.SEVERE);
      }
    }
    resUU.addAll(resultsUser);
    user++;
  }
  String dir=Benchmark.TEMP_RESULT_FILE_NAME + File.separator + StressTestcase.class.getName();
  new File(dir).mkdirs();
  for (  ResultSet result : res) {
    result.setFileName(dir + File.separator + result.getFileName().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"");
    try {
      result.save();
    }
 catch (    IOException e) {
      log.severe(""String_Node_Str"");
      LogHandler.writeStackTrace(log,e,Level.SEVERE);
    }
  }
  log.info(""String_Node_Str"");
}","@Override public void start() throws IOException {
  log=Logger.getLogger(StressTestcase.class.getName());
  LogHandler.initLogFileHandler(log,StressTestcase.class.getSimpleName());
  Map<String,QueryTestcase> threadPool=new HashMap<String,QueryTestcase>();
  log.info(""String_Node_Str"");
  long timeLimit=Long.parseLong(String.valueOf(props.get(""String_Node_Str"")));
  String queryPatterns=String.valueOf(props.get(""String_Node_Str""));
  for (  Object key : props.keySet()) {
    if (key == null || props.get(key) == null)     continue;
    propsUpdate.put(key,props.get(key));
  }
  String updateStrategy=String.valueOf(props.get(""String_Node_Str""));
  int limit=0;
  try {
    limit=Integer.parseInt(String.valueOf(props.get(""String_Node_Str"")));
  }
 catch (  Exception e) {
    limit=5000;
  }
  String ldpath=null;
  try {
    ldpath=String.valueOf(props.get(""String_Node_Str""));
    propsUpdate.put(""String_Node_Str"",props.getProperty(""String_Node_Str""));
  }
 catch (  Exception e) {
  }
  QueryTestcase.initQH(queryPatterns,updateStrategy,ldpath,limit,log);
  ExecutorService executor=Executors.newFixedThreadPool(users + updateUsers);
  for (Integer i=0; i < users; i++) {
    SPARQLQueryTestcase qt=new SPARQLQueryTestcase();
    qt.setRandomNumber(i + 1);
    qt.setConnection(con);
    qt.setCurrentDBName(currentDBName);
    qt.setCurrentPercent(percent);
    qt.setProperties(props);
    Log.info(""String_Node_Str"" + i + ""String_Node_Str"");
    executor.execute(qt);
    threadPool.put(""String_Node_Str"" + i,qt);
  }
  for (int i=users; i < updateUsers + users; i++) {
    LiveDataQueryTestcase qt=new LiveDataQueryTestcase();
    qt.setConnection(con);
    qt.setCurrentDBName(currentDBName);
    qt.setCurrentPercent(percent);
    qt.setProperties(propsUpdate);
    if (propsUpdate.containsKey(""String_Node_Str"")) {
      qt.setAmount(Integer.parseInt(String.valueOf(propsUpdate.get(""String_Node_Str""))));
    }
    qt.setStrategyRandom(i);
    qt.setStrategy(String.valueOf(propsUpdate.get(""String_Node_Str"")));
    log.info(""String_Node_Str"" + (i - users) + ""String_Node_Str"");
    executor.execute(qt);
    threadPool.put(""String_Node_Str"" + i,qt);
  }
  executor.shutdown();
  long time=new Date().getTime();
  while (new Date().getTime() - time < timeLimit) {
  }
  for (  String t : threadPool.keySet()) {
    threadPool.get(t).sendEndSignal();
  }
  while (!executor.isTerminated()) {
  }
  log.info(""String_Node_Str"");
  Collection<Collection<ResultSet>> results=new LinkedList<Collection<ResultSet>>();
  Collection<Collection<ResultSet>> results2=new LinkedList<Collection<ResultSet>>();
  for (  String t : threadPool.keySet()) {
    if (t.startsWith(""String_Node_Str""))     results2.add(threadPool.get(t).getResults());
 else     results.add(threadPool.get(t).getResults());
  }
  log.info(""String_Node_Str"");
  int user=0;
  for (  Collection<ResultSet> resultsUser : results) {
    for (    ResultSet result : resultsUser) {
      String file=new File(result.getFileName()).getName();
      file=file.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
      if (user < users + updateUsers)       file=file.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + user;
 else       file=file.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + (user);
      result.setFileName(File.separator + file);
      try {
        result.save();
      }
 catch (      IOException e) {
        log.severe(""String_Node_Str"");
        LogHandler.writeStackTrace(log,e,Level.SEVERE);
      }
    }
    resU.addAll(resultsUser);
    user++;
  }
  user=0;
  for (  Collection<ResultSet> resultsUser : results2) {
    for (    ResultSet result : resultsUser) {
      String file=new File(result.getFileName()).getName();
      file=file.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
      if (user < users)       file=file.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + user;
 else       file=file.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + (user);
      result.setFileName(File.separator + file);
      try {
        result.save();
      }
 catch (      IOException e) {
        log.severe(""String_Node_Str"");
        LogHandler.writeStackTrace(log,e,Level.SEVERE);
      }
    }
    resUU.addAll(resultsUser);
    user++;
  }
  String dir=Benchmark.TEMP_RESULT_FILE_NAME + File.separator + StressTestcase.class.getName();
  new File(dir).mkdirs();
  for (  ResultSet result : res) {
    result.setFileName(dir + File.separator + result.getFileName().replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"");
    try {
      result.save();
    }
 catch (    IOException e) {
      log.severe(""String_Node_Str"");
      LogHandler.writeStackTrace(log,e,Level.SEVERE);
    }
  }
  log.info(""String_Node_Str"");
}",0.9985534201281256
140870,"/** 
 * Converts the encoded queries in a given logfile to queries
 * @param pw the Printwriter to use to write the queries
 * @param input the logfile
 */
public static void logToQueries(PrintWriter pw,File input,Boolean onlyComplexQueries,Map<String,Long> map){
  FileInputStream fis=null;
  BufferedReader br=null;
  String line;
  try {
    fis=new FileInputStream(input);
    br=new BufferedReader(new InputStreamReader(fis,Charset.forName(""String_Node_Str"")));
    while ((line=br.readLine()) != null) {
      int index=line.indexOf(""String_Node_Str"");
      int lastIndex=line.indexOf(""String_Node_Str"",index + 1);
      String line2=line.substring(index,lastIndex);
      String graph=null;
      Pattern p=Pattern.compile(""String_Node_Str"");
      Matcher m=p.matcher(line2);
      if (m.find()) {
        String complete=m.group();
        graph=complete.substring(complete.indexOf(""String_Node_Str"") + 1,complete.lastIndexOf(""String_Node_Str""));
        graph=URLDecoder.decode(graph,""String_Node_Str"");
      }
      List<String> tokens=Arrays.asList(line.split(""String_Node_Str""));
      String prequery=""String_Node_Str"";
      for (int j=0; j < tokens.size(); j++) {
        if (tokens.get(j).contains(""String_Node_Str"")) {
          prequery=tokens.get(j).replaceFirst(""String_Node_Str"",""String_Node_Str"");
        }
      }
      line=prequery.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if ((index=line.indexOf(""String_Node_Str"")) >= 0)       line=line.substring(0,index);
      try {
        line=URLDecoder.decode(line,""String_Node_Str"");
      }
 catch (      Exception e) {
        log.warning(""String_Node_Str"" + line);
        LogHandler.writeStackTrace(log,e,Level.WARNING);
      }
      line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
      line=queryVarRename(line);
      Query q=QuerySorter.isSPARQL(line);
      try {
        if (q == null && !QuerySorter.isSPARQLUpdate(line)) {
          throw new QueryException();
        }
        Byte[] features=LogSolution.getFeatureVector(line,LogSolution.getFeatures());
        int count=LogSolution.countTriplesInQuery(line);
        String feat2=""String_Node_Str"";
        for (int i=0; i < features.length - 1; i++) {
          feat2+=features[i] + ""String_Node_Str"";
        }
        feat2+=features[features.length - 1];
        Long n=map.get(feat2 + ""String_Node_Str"" + count);
        if (n == null)         n=0L;
        map.put(features + ""String_Node_Str"" + count,n + 1);
        if (q != null) {
          if (graph != null) {
            q.addGraphURI(graph);
          }
          line=q.toString().replace(""String_Node_Str"",""String_Node_Str"");
        }
        if (onlyComplexQueries) {
          if (countTriplesInQuery(line) <= 1) {
            continue;
          }
          Boolean cont=false;
          for (          String feat : getFeatures()) {
            if (line.contains(feat)) {
              cont=true;
              break;
            }
          }
          if (!cont)           continue;
        }
        pw.println(line.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 catch (      QueryException e) {
      }
    }
    pw.flush();
  }
 catch (  IOException e) {
    LogHandler.writeStackTrace(log,e,Level.SEVERE);
  }
 finally {
    try {
      fis.close();
      br.close();
    }
 catch (    IOException e) {
      LogHandler.writeStackTrace(log,e,Level.SEVERE);
    }
  }
}","/** 
 * Converts the encoded queries in a given logfile to queries
 * @param pw the Printwriter to use to write the queries
 * @param input the logfile
 */
public static void logToQueries(PrintWriter pw,File input,Boolean onlyComplexQueries,Map<String,Long> map){
  FileInputStream fis=null;
  BufferedReader br=null;
  String line;
  try {
    fis=new FileInputStream(input);
    br=new BufferedReader(new InputStreamReader(fis,Charset.forName(""String_Node_Str"")));
    while ((line=br.readLine()) != null) {
      int index=line.indexOf(""String_Node_Str"");
      int lastIndex=line.indexOf(""String_Node_Str"",index + 1);
      String line2=line.substring(index,lastIndex);
      String graph=null;
      Pattern p=Pattern.compile(""String_Node_Str"");
      Matcher m=p.matcher(line2);
      if (m.find()) {
        String complete=m.group();
        graph=complete.substring(complete.indexOf(""String_Node_Str"") + 1,complete.lastIndexOf(""String_Node_Str""));
        graph=URLDecoder.decode(graph,""String_Node_Str"");
      }
      List<String> tokens=Arrays.asList(line.split(""String_Node_Str""));
      String prequery=""String_Node_Str"";
      for (int j=0; j < tokens.size(); j++) {
        if (tokens.get(j).contains(""String_Node_Str"")) {
          prequery=tokens.get(j).replaceFirst(""String_Node_Str"",""String_Node_Str"");
        }
      }
      line=prequery.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if ((index=line.indexOf(""String_Node_Str"")) >= 0)       line=line.substring(0,index);
      try {
        line=URLDecoder.decode(line,""String_Node_Str"");
      }
 catch (      Exception e) {
        log.warning(""String_Node_Str"" + line);
        LogHandler.writeStackTrace(log,e,Level.WARNING);
      }
      line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
      line=queryVarRename(line);
      Query q=QuerySorter.isSPARQL(line);
      try {
        if (q == null && !QuerySorter.isSPARQLUpdate(line)) {
          log.warning(""String_Node_Str"" + line);
          QueryException e=new QueryException();
          LogHandler.writeStackTrace(log,e,Level.WARNING);
          continue;
        }
        if (q != null) {
          if (graph != null) {
            q.addGraphURI(graph);
          }
          line=q.toString().replace(""String_Node_Str"",""String_Node_Str"");
          Byte[] features=LogSolution.getFeatureVector(line,LogSolution.getFeatures());
          int count=LogSolution.countTriplesInQuery(line);
          String feat2=""String_Node_Str"";
          for (int i=0; i < features.length - 1; i++) {
            feat2+=features[i] + ""String_Node_Str"";
          }
          feat2+=features[features.length - 1];
          Long n=map.get(feat2 + ""String_Node_Str"" + count);
          if (n == null)           n=0L;
          map.put(features + ""String_Node_Str"" + count,n + 1);
          if (q != null) {
            if (graph != null) {
              q.addGraphURI(graph);
            }
            line=q.toString().replace(""String_Node_Str"",""String_Node_Str"");
          }
          if (onlyComplexQueries) {
            if (countTriplesInQuery(line) <= 1) {
              continue;
            }
            Boolean cont=false;
            for (            String feat : getFeatures()) {
              if (line.contains(feat)) {
                cont=true;
                break;
              }
            }
            if (!cont)             continue;
          }
          pw.println(line.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
      }
 catch (      Exception e) {
      }
    }
    pw.flush();
  }
 catch (  IOException e) {
    LogHandler.writeStackTrace(log,e,Level.SEVERE);
  }
 finally {
    try {
      fis.close();
      br.close();
    }
 catch (    IOException e) {
      LogHandler.writeStackTrace(log,e,Level.SEVERE);
    }
  }
}",0.8016194331983806
140871,"public static void parseSPARQL(String query){
  if (counter > 30) {
    log.warning(""String_Node_Str"" + query);
    SPARQLquery=null;
    return;
  }
  counter++;
  try {
    SPARQLParser sp=SPARQLParser.createParser(Syntax.syntaxSPARQL_11);
    Query q=sp.parse(QueryFactory.create(),query);
    SPARQLquery=q;
  }
 catch (  QueryParseException e) {
    if (e.getMessage().contains(""String_Node_Str"")) {
      Pattern p=Pattern.compile(""String_Node_Str"");
      Matcher m=p.matcher(e.getMessage());
      String prefix=""String_Node_Str"";
      String suffix=""String_Node_Str"";
      if (m.find()) {
        prefix=m.group(1);
        suffix=m.group(2);
      }
 else {
        log.warning(""String_Node_Str"" + query);
        LogHandler.writeStackTrace(log,e,Level.WARNING);
        SPARQLquery=null;
      }
      if (prefix.toLowerCase().equals(""String_Node_Str"")) {
        query=query.replaceAll(""String_Node_Str"" + prefix + ""String_Node_Str""+ suffix+ ""String_Node_Str"",""String_Node_Str"");
        isSPARQL(query);
      }
 else       if (CopyOfPrefixes.prefixes.containsKey(prefix.toLowerCase())) {
        String onePrefix=CopyOfPrefixes.prefixes.get(prefix.toLowerCase());
        String prefix2=""String_Node_Str"" + prefix.toLowerCase() + ""String_Node_Str""+ onePrefix+ ""String_Node_Str""+ query;
        isSPARQL(prefix2);
      }
    }
 else     if (e.getMessage().contains(""String_Node_Str"")) {
      if (query.toLowerCase().contains(""String_Node_Str"")) {
        query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
        isSPARQL(query);
      }
 else {
        log.warning(""String_Node_Str"" + query);
        LogHandler.writeStackTrace(log,e,Level.WARNING);
        SPARQLquery=null;
      }
    }
 else {
      log.warning(""String_Node_Str"" + query);
      LogHandler.writeStackTrace(log,e,Level.WARNING);
      SPARQLquery=null;
    }
  }
}","public static void parseSPARQL(String query){
  if (counter > 30) {
    log.warning(""String_Node_Str"" + query);
    SPARQLquery=null;
    return;
  }
  counter++;
  try {
    SPARQLParser sp=SPARQLParser.createParser(Syntax.syntaxSPARQL_11);
    Query q=sp.parse(QueryFactory.create(),query);
    SPARQLquery=q;
  }
 catch (  QueryParseException e) {
    if (e.getMessage().contains(""String_Node_Str"")) {
      Pattern p=Pattern.compile(""String_Node_Str"");
      Matcher m=p.matcher(e.getMessage());
      String prefix=""String_Node_Str"";
      String suffix=""String_Node_Str"";
      if (m.find()) {
        prefix=m.group(1);
        suffix=m.group(2);
      }
 else {
        log.warning(""String_Node_Str"" + query);
        LogHandler.writeStackTrace(log,e,Level.WARNING);
        SPARQLquery=null;
      }
      if (prefix.toLowerCase().equals(""String_Node_Str"")) {
        query=query.replaceAll(""String_Node_Str"" + prefix + ""String_Node_Str""+ suffix+ ""String_Node_Str"",""String_Node_Str"");
        isSPARQL(query);
      }
 else       if (CopyOfPrefixes.prefixes.containsKey(prefix.toLowerCase())) {
        String onePrefix=CopyOfPrefixes.prefixes.get(prefix.toLowerCase());
        String prefix2=""String_Node_Str"" + prefix.toLowerCase() + ""String_Node_Str""+ onePrefix+ ""String_Node_Str""+ query;
        isSPARQL(prefix2);
      }
    }
 else     if (e.getMessage().contains(""String_Node_Str"")) {
      if (query.toLowerCase().contains(""String_Node_Str"")) {
        query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
        isSPARQL(query);
      }
 else {
        log.warning(""String_Node_Str"" + query);
        LogHandler.writeStackTrace(log,e,Level.WARNING);
        SPARQLquery=null;
      }
    }
 else {
      log.warning(""String_Node_Str"" + query);
      LogHandler.writeStackTrace(log,e,Level.WARNING);
      SPARQLquery=null;
    }
  }
catch (  Exception e) {
    log.warning(""String_Node_Str"" + query);
    LogHandler.writeStackTrace(log,e,Level.WARNING);
    SPARQLquery=null;
  }
}",0.9620449264136328
140872,"public static Query isSPARQL(String query){
  counter=0;
  parseSPARQL(query);
  if (SPARQLquery != null) {
    return SPARQLquery;
  }
 else {
    return null;
  }
}","public static Query isSPARQL(String query){
  parseSPARQL(query);
  if (SPARQLquery != null) {
    counter=0;
    return SPARQLquery;
  }
 else {
    counter=0;
    return null;
  }
}",0.8767908309455588
140873,"public static void parseSPARQL(String query){
  if (counter > 40) {
    log.warning(""String_Node_Str"" + query);
    SPARQLquery=null;
  }
  counter++;
  try {
    SPARQLParser sp=SPARQLParser.createParser(Syntax.syntaxSPARQL_11);
    Query q=sp.parse(QueryFactory.create(),query);
    SPARQLquery=q;
  }
 catch (  QueryParseException e) {
    if (e.getMessage().contains(""String_Node_Str"")) {
      Pattern p=Pattern.compile(""String_Node_Str"");
      Matcher m=p.matcher(e.getMessage());
      String prefix=""String_Node_Str"";
      String suffix=""String_Node_Str"";
      if (m.find()) {
        prefix=m.group(1);
        suffix=m.group(2);
      }
 else {
        log.warning(""String_Node_Str"" + query);
        LogHandler.writeStackTrace(log,e,Level.WARNING);
        SPARQLquery=null;
      }
      if (prefix.toLowerCase().equals(""String_Node_Str"")) {
        query=query.replaceAll(""String_Node_Str"" + prefix + ""String_Node_Str""+ suffix+ ""String_Node_Str"",""String_Node_Str"");
        isSPARQL(query);
      }
 else       if (CopyOfPrefixes.prefixes.containsKey(prefix.toLowerCase())) {
        String onePrefix=CopyOfPrefixes.prefixes.get(prefix.toLowerCase());
        String prefix2=""String_Node_Str"" + prefix.toLowerCase() + ""String_Node_Str""+ onePrefix+ ""String_Node_Str""+ query;
        isSPARQL(prefix2);
      }
    }
 else     if (e.getMessage().contains(""String_Node_Str"")) {
      if (query.toLowerCase().contains(""String_Node_Str"")) {
        query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
        isSPARQL(query);
      }
 else {
        log.warning(""String_Node_Str"" + query);
        LogHandler.writeStackTrace(log,e,Level.WARNING);
        SPARQLquery=null;
      }
    }
 else {
      log.warning(""String_Node_Str"" + query);
      LogHandler.writeStackTrace(log,e,Level.WARNING);
      SPARQLquery=null;
    }
  }
}","public static void parseSPARQL(String query){
  if (counter > 30) {
    log.warning(""String_Node_Str"" + query);
    SPARQLquery=null;
    return;
  }
  counter++;
  try {
    SPARQLParser sp=SPARQLParser.createParser(Syntax.syntaxSPARQL_11);
    Query q=sp.parse(QueryFactory.create(),query);
    SPARQLquery=q;
  }
 catch (  QueryParseException e) {
    if (e.getMessage().contains(""String_Node_Str"")) {
      Pattern p=Pattern.compile(""String_Node_Str"");
      Matcher m=p.matcher(e.getMessage());
      String prefix=""String_Node_Str"";
      String suffix=""String_Node_Str"";
      if (m.find()) {
        prefix=m.group(1);
        suffix=m.group(2);
      }
 else {
        log.warning(""String_Node_Str"" + query);
        LogHandler.writeStackTrace(log,e,Level.WARNING);
        SPARQLquery=null;
      }
      if (prefix.toLowerCase().equals(""String_Node_Str"")) {
        query=query.replaceAll(""String_Node_Str"" + prefix + ""String_Node_Str""+ suffix+ ""String_Node_Str"",""String_Node_Str"");
        isSPARQL(query);
      }
 else       if (CopyOfPrefixes.prefixes.containsKey(prefix.toLowerCase())) {
        String onePrefix=CopyOfPrefixes.prefixes.get(prefix.toLowerCase());
        String prefix2=""String_Node_Str"" + prefix.toLowerCase() + ""String_Node_Str""+ onePrefix+ ""String_Node_Str""+ query;
        isSPARQL(prefix2);
      }
    }
 else     if (e.getMessage().contains(""String_Node_Str"")) {
      if (query.toLowerCase().contains(""String_Node_Str"")) {
        query=query.replaceAll(""String_Node_Str"",""String_Node_Str"");
        isSPARQL(query);
      }
 else {
        log.warning(""String_Node_Str"" + query);
        LogHandler.writeStackTrace(log,e,Level.WARNING);
        SPARQLquery=null;
      }
    }
 else {
      log.warning(""String_Node_Str"" + query);
      LogHandler.writeStackTrace(log,e,Level.WARNING);
      SPARQLquery=null;
    }
  }
}",0.996230479267636
140874,"public static void mainLoop(List<String> ids,String pathToXMLFile) throws ClassNotFoundException, SAXException, IOException, ParserConfigurationException, SQLException, InterruptedException {
  Integer dbCount=0;
  String[] randFiles=null;
  if (Boolean.valueOf(config.get(""String_Node_Str""))) {
    String file=config.get(""String_Node_Str"");
    randFiles=getDatasetFiles(refCon,file);
  }
 else {
    randFiles=Config.getRandomFiles(rootNode);
  }
  for (int i=0; i < percents.size(); i++) {
    ResultSet upload=new ResultSet();
    for (    String db : ids) {
      log.info(""String_Node_Str"" + db + ""String_Node_Str""+ percents.get(i));
      Connection con=ConnectionFactory.createConnection(dbNode,db);
      if (Boolean.valueOf(config.get(""String_Node_Str""))) {
        con.dropGraph(config.get(""String_Node_Str""));
      }
      if (testcases.containsKey(UploadTestcase.class.getName())) {
        log.info(""String_Node_Str"" + db + ""String_Node_Str""+ percents.get(i));
        UploadTestcase ut=new UploadTestcase();
        Properties up=testcases.get(UploadTestcase.class.getName());
        up.setProperty(""String_Node_Str"",randFiles[i]);
        ut.setProperties(up);
        ut.setConnection(con);
        ut.setCurrentDBName(db);
        Collection<ResultSet> uploadRes=new LinkedList<ResultSet>();
        uploadRes.add(upload);
        ut.addCurrentResults(uploadRes);
        ut.start();
        upload=ut.getResults().iterator().next();
        log.info(""String_Node_Str"" + db + ""String_Node_Str""+ percents.get(i));
      }
      try {
        if (config.get(""String_Node_Str"") != null && config.get(""String_Node_Str"") != null) {
          warmup(con,String.valueOf(config.get(""String_Node_Str"")),Long.valueOf(config.get(""String_Node_Str"")));
          log.info(""String_Node_Str"");
        }
      }
 catch (      Exception e) {
        log.info(""String_Node_Str"");
      }
      log.info(""String_Node_Str"");
      start(con,db,String.valueOf(percents.get(i)));
      if (Boolean.valueOf(config.get(""String_Node_Str""))) {
        log.info(""String_Node_Str"" + config.get(""String_Node_Str""));
        con.dropGraph(config.get(""String_Node_Str""));
      }
      dbCount++;
    }
    upload.setFileName(""String_Node_Str"" + percents.get(i));
    upload.save();
  }
  for (  String key : results.keySet()) {
    for (    ResultSet res : results.get(key)) {
      log.info(""String_Node_Str"");
      String testCase=key.split(""String_Node_Str"")[0];
      testCase.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String[] fileName=res.getFileName().split(File.separator);
      res.setFileName(""String_Node_Str"" + File.separator + RESULT_FILE_NAME+ File.separator+ testCase+ File.separator+ fileName[fileName.length - 1]);
      res.save();
      res.saveAsPNG();
      log.info(""String_Node_Str"");
    }
  }
}","public static void mainLoop(List<String> ids,String pathToXMLFile) throws ClassNotFoundException, SAXException, IOException, ParserConfigurationException, SQLException, InterruptedException {
  Integer dbCount=0;
  String[] randFiles=null;
  if (Boolean.valueOf(config.get(""String_Node_Str""))) {
    String file=config.get(""String_Node_Str"");
    randFiles=getDatasetFiles(refCon,file);
  }
 else {
    randFiles=Config.getRandomFiles(rootNode);
  }
  for (int i=0; i < percents.size(); i++) {
    ResultSet upload=new ResultSet();
    for (    String db : ids) {
      log.info(""String_Node_Str"" + db + ""String_Node_Str""+ percents.get(i));
      Connection con=ConnectionFactory.createConnection(dbNode,db);
      if (Boolean.valueOf(config.get(""String_Node_Str""))) {
        con.dropGraph(config.get(""String_Node_Str""));
      }
      if (testcases.containsKey(UploadTestcase.class.getName())) {
        log.info(""String_Node_Str"" + db + ""String_Node_Str""+ percents.get(i));
        UploadTestcase ut=new UploadTestcase();
        Properties up=testcases.get(UploadTestcase.class.getName());
        up.setProperty(""String_Node_Str"",randFiles[i]);
        ut.setProperties(up);
        ut.setConnection(con);
        ut.setCurrentDBName(db);
        Collection<ResultSet> uploadRes=new LinkedList<ResultSet>();
        uploadRes.add(upload);
        ut.addCurrentResults(uploadRes);
        ut.start();
        upload=ut.getResults().iterator().next();
        upload.setFileName(Benchmark.TEMP_RESULT_FILE_NAME + ""String_Node_Str"" + percents.get(i));
        results.put(""String_Node_Str"",ut.getResults());
        log.info(""String_Node_Str"" + db + ""String_Node_Str""+ percents.get(i));
      }
      try {
        if (config.get(""String_Node_Str"") != null && config.get(""String_Node_Str"") != null) {
          log.info(""String_Node_Str"");
          warmup(con,String.valueOf(config.get(""String_Node_Str"")),Long.valueOf(config.get(""String_Node_Str"")));
          log.info(""String_Node_Str"");
        }
      }
 catch (      Exception e) {
        log.info(""String_Node_Str"");
      }
      log.info(""String_Node_Str"");
      start(con,db,String.valueOf(percents.get(i)));
      if (Boolean.valueOf(config.get(""String_Node_Str""))) {
        log.info(""String_Node_Str"" + config.get(""String_Node_Str""));
        con.dropGraph(config.get(""String_Node_Str""));
      }
      dbCount++;
    }
    upload.save();
  }
  for (  String key : results.keySet()) {
    for (    ResultSet res : results.get(key)) {
      log.info(""String_Node_Str"");
      String testCase=key.split(""String_Node_Str"")[0];
      testCase.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String fileSep=File.separator;
      if (fileSep.equals(""String_Node_Str"")) {
        fileSep=File.separator + File.separator;
      }
      String[] fileName=res.getFileName().split(fileSep);
      new File(""String_Node_Str"" + File.separator + RESULT_FILE_NAME+ File.separator+ testCase+ File.separator).mkdirs();
      res.setFileName(""String_Node_Str"" + File.separator + RESULT_FILE_NAME+ File.separator+ testCase+ File.separator+ fileName[fileName.length - 1]);
      res.save();
      res.saveAsPNG();
    }
  }
  log.info(""String_Node_Str"");
}",0.5337087957594832
140875,"public static void sendIfEnd(){
  if (!end) {
    try {
      EmailHandler.sendBadNews(""String_Node_Str"",ZipUtils.folderToZip(""String_Node_Str"" + File.separator + Benchmark.RESULT_FILE_NAME,""String_Node_Str"" + File.separator + Benchmark.RESULT_FILE_NAME+ ""String_Node_Str""));
    }
 catch (    Exception e) {
      log.warning(""String_Node_Str"");
      LogHandler.writeStackTrace(log,e,Level.WARNING);
    }
  }
}","public static void sendIfEnd(){
  if (!end && mail) {
    try {
      EmailHandler.sendBadNews(""String_Node_Str"",ZipUtils.folderToZip(""String_Node_Str"" + File.separator + Benchmark.RESULT_FILE_NAME,""String_Node_Str"" + File.separator + Benchmark.RESULT_FILE_NAME+ ""String_Node_Str""));
    }
 catch (    Exception e) {
      log.warning(""String_Node_Str"");
      LogHandler.writeStackTrace(log,e,Level.WARNING);
    }
  }
}",0.9904076738609112
140876,"private static String[] rankAndChoose(File freqQueries,File input,File output,Integer minNodes) throws IOException {
  FileInputStream fis=null;
  BufferedReader br=null;
  output.createNewFile();
  PrintWriter pw=new PrintWriter(output);
  String line;
  String[] feat=LogSolution.getFeatures();
  Integer[] momFreq=new Integer[feat.length];
  String[] momQueries=new String[feat.length];
  try {
    fis=new FileInputStream(input);
    br=new BufferedReader(new InputStreamReader(fis,Charset.forName(""String_Node_Str"")));
    while ((line=br.readLine()) != null) {
      String[] cluster=line.split(""String_Node_Str"")[1].replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (cluster.length < minNodes) {
        continue;
      }
      Integer freq=LogSolution.getFreqSum(cluster,freqQueries);
      cluster=queryIDListToQueries(clusterToID(cluster),freqQueries);
      for (int i=0; i < feat.length; i++) {
        if (momFreq[i] >= freq) {
          continue;
        }
        for (int j=0; j < cluster.length; j++) {
          if (cluster[j].replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").contains(feat[i])) {
            momFreq[i]=freq;
            momQueries[i]=cluster[j];
            break;
          }
        }
      }
    }
    int k;
    for (k=0; k < momQueries.length - 1; k++) {
      pw.println(momQueries[k]);
    }
    pw.print(momQueries[k + 1]);
    pw.close();
  }
 catch (  IOException e) {
    LogHandler.writeStackTrace(log,e,Level.SEVERE);
  }
 finally {
    try {
      fis.close();
      br.close();
    }
 catch (    IOException e) {
      LogHandler.writeStackTrace(log,e,Level.SEVERE);
    }
  }
  return momQueries;
}","private static String[] rankAndChoose(File freqQueries,File input,File output,Integer minNodes) throws IOException {
  FileInputStream fis=null;
  BufferedReader br=null;
  output.createNewFile();
  PrintWriter pw=new PrintWriter(output);
  String line;
  String[] feat=LogSolution.getFeatures();
  Integer[] momFreq=new Integer[feat.length];
  for (int i=0; i < feat.length; i++) {
    momFreq[i]=0;
  }
  String[] momQueries=new String[feat.length];
  try {
    fis=new FileInputStream(input);
    br=new BufferedReader(new InputStreamReader(fis,Charset.forName(""String_Node_Str"")));
    while ((line=br.readLine()) != null) {
      if (line.isEmpty()) {
        continue;
      }
      String[] cluster=line.split(""String_Node_Str"")[1].replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (cluster.length < minNodes) {
        continue;
      }
      Integer freq=LogSolution.getFreqSum(cluster,freqQueries);
      cluster=queryIDListToQueries(clusterToID(cluster),freqQueries);
      for (int i=0; i < feat.length; i++) {
        if (momFreq[i] >= freq) {
          continue;
        }
        for (int j=0; j < cluster.length; j++) {
          try {
            if (cluster[j] == null) {
              continue;
            }
            if (cluster[j].replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").contains(feat[i])) {
              momFreq[i]=freq;
              momQueries[i]=cluster[j];
              break;
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
    }
    int k;
    for (k=0; k < momQueries.length - 1; k++) {
      if (momQueries[k] != null) {
        pw.println(momQueries[k]);
      }
 else {
        log.info(""String_Node_Str"" + feat[k]);
      }
    }
    pw.print(momQueries[k]);
    pw.close();
  }
 catch (  IOException e) {
    LogHandler.writeStackTrace(log,e,Level.SEVERE);
  }
 finally {
    try {
      fis.close();
      br.close();
    }
 catch (    IOException e) {
      LogHandler.writeStackTrace(log,e,Level.SEVERE);
    }
  }
  return momQueries;
}",0.8832644628099173
140877,"private static String[] queryIDListToQueries(LinkedList<Integer> queryList,File input) throws IOException {
  FileInputStream fis=null;
  BufferedReader br=null;
  String line=""String_Node_Str"";
  String[] ret=new String[queryList.size()];
  Collections.sort(queryList);
  Collections.reverse(queryList);
  try {
    fis=new FileInputStream(input);
    br=new BufferedReader(new InputStreamReader(fis,Charset.forName(""String_Node_Str"")));
    int i=0, j=0, t=0;
    j=queryList.get(t);
    while ((line=br.readLine()) != null) {
      if (j == i) {
        line=line.substring(0,line.lastIndexOf(""String_Node_Str""));
        ret[t]=PatternSolution.queryToPattern(line);
        j=queryList.get(++t);
      }
      i++;
    }
  }
 catch (  IOException e) {
    LogHandler.writeStackTrace(log,e,Level.SEVERE);
  }
 finally {
    try {
      fis.close();
      br.close();
    }
 catch (    IOException e) {
      LogHandler.writeStackTrace(log,e,Level.SEVERE);
    }
  }
  return ret;
}","private static String[] queryIDListToQueries(LinkedList<Integer> queryList,File input) throws IOException {
  FileInputStream fis=null;
  BufferedReader br=null;
  String line=""String_Node_Str"";
  String[] ret=new String[queryList.size()];
  Collections.sort(queryList);
  try {
    fis=new FileInputStream(input);
    br=new BufferedReader(new InputStreamReader(fis,Charset.forName(""String_Node_Str"")));
    int i=0, j=0, t=0;
    while ((line=br.readLine()) != null) {
      j=queryList.get(t);
      if (j == i) {
        line=line.substring(0,line.lastIndexOf(""String_Node_Str""));
        ret[t]=PatternSolution.queryToPattern(line);
        t++;
        if (t == queryList.size()) {
          break;
        }
      }
      i++;
    }
  }
 catch (  IOException e) {
    LogHandler.writeStackTrace(log,e,Level.SEVERE);
  }
 finally {
    try {
      fis.close();
      br.close();
    }
 catch (    IOException e) {
      LogHandler.writeStackTrace(log,e,Level.SEVERE);
    }
  }
  return ret;
}",0.9147755925365608
140878,"public static Integer getFreqSum(String[] cluster,File freqQueries){
  FileInputStream fis=null;
  BufferedReader br=null;
  String line=""String_Node_Str"";
  int q=0;
  List<String> cl=Arrays.asList(cluster);
  Integer ret=0;
  try {
    fis=new FileInputStream(freqQueries);
    br=new BufferedReader(new InputStreamReader(fis,Charset.forName(""String_Node_Str"")));
    while ((line=br.readLine()) != null && cl.isEmpty()) {
      if (line.isEmpty()) {
        continue;
      }
      for (      String qID : cl) {
        if (qID.equals(""String_Node_Str"" + q)) {
          ret+=Integer.parseInt(line.substring(line.lastIndexOf(""String_Node_Str"") + 1,line.length()));
          cl.remove(qID);
          break;
        }
      }
      q++;
    }
  }
 catch (  IOException e) {
    LogHandler.writeStackTrace(log,e,Level.SEVERE);
  }
 finally {
    try {
      fis.close();
      br.close();
    }
 catch (    IOException e) {
      LogHandler.writeStackTrace(log,e,Level.SEVERE);
    }
  }
  return ret;
}","public static Integer getFreqSum(String[] cluster,File freqQueries){
  FileInputStream fis=null;
  BufferedReader br=null;
  String line=""String_Node_Str"";
  int q=1;
  ArrayList<String> cl=new ArrayList<String>(Arrays.asList(cluster));
  Integer ret=0;
  try {
    fis=new FileInputStream(freqQueries);
    br=new BufferedReader(new InputStreamReader(fis,Charset.forName(""String_Node_Str"")));
    while ((line=br.readLine()) != null && !cl.isEmpty()) {
      if (line.isEmpty()) {
        continue;
      }
      for (      String qID : cl) {
        if (qID.equals(""String_Node_Str"" + q)) {
          ret+=Integer.parseInt(line.substring(line.lastIndexOf(""String_Node_Str"") + 1));
          cl.remove(qID);
          break;
        }
      }
      q++;
    }
  }
 catch (  IOException e) {
    LogHandler.writeStackTrace(log,e,Level.SEVERE);
  }
 finally {
    try {
      fis.close();
      br.close();
    }
 catch (    IOException e) {
      LogHandler.writeStackTrace(log,e,Level.SEVERE);
    }
  }
  return ret;
}",0.9619753086419752
140879,"public static void logToPatterns(PrintWriter pw,File input){
  FileInputStream fis=null;
  BufferedReader br=null;
  String line;
  try {
    fis=new FileInputStream(input);
    br=new BufferedReader(new InputStreamReader(fis,Charset.forName(""String_Node_Str"")));
    while ((line=br.readLine()) != null) {
      int index=line.indexOf(""String_Node_Str"");
      int lastIndex=line.indexOf(""String_Node_Str"",index + 1);
      line=line.substring(index,lastIndex);
      line=line.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      if ((index=line.indexOf(""String_Node_Str"")) >= 0)       line=line.substring(0,index);
      line=URLDecoder.decode(line,""String_Node_Str"");
      line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
      line=queryVarRename(line);
      try {
        QueryFactory.create(line);
        pw.println(line.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 catch (      QueryException e) {
        log.info(""String_Node_Str"" + line + ""String_Node_Str""+ e);
      }
    }
    pw.flush();
  }
 catch (  IOException e) {
    LogHandler.writeStackTrace(log,e,Level.SEVERE);
  }
 finally {
    try {
      fis.close();
      br.close();
    }
 catch (    IOException e) {
      LogHandler.writeStackTrace(log,e,Level.SEVERE);
    }
  }
}","public static void logToPatterns(PrintWriter pw,File input){
  FileInputStream fis=null;
  BufferedReader br=null;
  String line;
  try {
    fis=new FileInputStream(input);
    br=new BufferedReader(new InputStreamReader(fis,Charset.forName(""String_Node_Str"")));
    while ((line=br.readLine()) != null) {
      int index=line.indexOf(""String_Node_Str"");
      int lastIndex=line.indexOf(""String_Node_Str"",index + 1);
      line=line.substring(index,lastIndex);
      line=line.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      if ((index=line.indexOf(""String_Node_Str"")) >= 0)       line=line.substring(0,index);
      line=URLDecoder.decode(line,""String_Node_Str"");
      line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
      line=queryVarRename(line);
      try {
        QueryFactory.create(line);
        pw.println(line.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
 catch (      QueryException e) {
      }
    }
    pw.flush();
  }
 catch (  IOException e) {
    LogHandler.writeStackTrace(log,e,Level.SEVERE);
  }
 finally {
    try {
      fis.close();
      br.close();
    }
 catch (    IOException e) {
      LogHandler.writeStackTrace(log,e,Level.SEVERE);
    }
  }
}",0.9749157618869336
140880,"public static Collection<String> findLiterals(String query){
  Collection<String> ret=new HashSet<String>();
  String regex=""String_Node_Str"";
  String q=query;
  q=q.replaceAll(""String_Node_Str"",""String_Node_Str"");
  Pattern p=Pattern.compile(regex,Pattern.UNICODE_CHARACTER_CLASS);
  Matcher m=p.matcher(q);
  while (m.find()) {
    String literal=m.group();
    int index=literal.indexOf(""String_Node_Str"",3) + 3;
    if (literal.length() > index) {
      if (literal.charAt(index + 1) == '@') {
        index=literal.substring(index + 1).indexOf(""String_Node_Str"");
      }
 else       if (literal.substring(index + 1,index + 3) == ""String_Node_Str"") {
        index=literal.substring(index + 1).indexOf(""String_Node_Str"") + 1;
      }
    }
    literal=literal.substring(0,index);
    ret.add(literal);
    q=q.replace(literal,""String_Node_Str"");
    m=p.matcher(q);
  }
  regex=""String_Node_Str"";
  p=Pattern.compile(regex,Pattern.UNICODE_CHARACTER_CLASS);
  m=p.matcher(q);
  while (m.find()) {
    String literal=m.group();
    literal=literal.substring(0,literal.length() - 1);
    ret.add(literal);
    q=q.replace(literal,""String_Node_Str"");
  }
  regex=""String_Node_Str"";
  p=Pattern.compile(regex,Pattern.UNICODE_CHARACTER_CLASS);
  m=p.matcher(q);
  while (m.find()) {
    String literal=m.group();
    literal=literal.substring(0,literal.length() - 1);
    ret.add(literal);
  }
  return ret;
}","public static Collection<String> findLiterals(String query){
  Collection<String> ret=new HashSet<String>();
  String regex=""String_Node_Str"";
  String q=query;
  q=q.replaceAll(""String_Node_Str"",""String_Node_Str"");
  Pattern p=Pattern.compile(regex,Pattern.UNICODE_CHARACTER_CLASS);
  Matcher m=p.matcher(q);
  while (m.find()) {
    String literal=m.group();
    int index=literal.indexOf(""String_Node_Str"",3) + 3;
    if (literal.length() > index) {
      if (literal.charAt(index + 1) == '@') {
        index=literal.substring(index + 1).indexOf(""String_Node_Str"");
      }
 else       if (literal.substring(index + 1,index + 3) == ""String_Node_Str"") {
        index=literal.substring(index + 1).indexOf(""String_Node_Str"") + 1;
      }
    }
    literal=literal.substring(0,index);
    ret.add(literal);
    q=q.replace(literal,""String_Node_Str"");
    m=p.matcher(q);
  }
  regex=""String_Node_Str"";
  p=Pattern.compile(regex,Pattern.UNICODE_CHARACTER_CLASS);
  m=p.matcher(q);
  while (m.find()) {
    String literal=m.group();
    literal=literal.substring(0,literal.length() - 1);
    ret.add(literal);
    q=q.replace(literal,""String_Node_Str"");
  }
  regex=""String_Node_Str"";
  p=Pattern.compile(regex,Pattern.UNICODE_CHARACTER_CLASS);
  m=p.matcher(q.replaceAll(""String_Node_Str"",""String_Node_Str""));
  while (m.find()) {
    String literal=m.group();
    literal=literal.substring(0,literal.length() - 1);
    ret.add(literal);
  }
  return ret;
}",0.983251919050942
140881,"public static void main(String[] argc){
  String test=""String_Node_Str"";
  System.out.println(test);
  System.out.println(queryIRIsToVars(test,0));
  System.out.println(queryToPattern(test));
}","public static void main(String[] argc){
  String test=""String_Node_Str"";
  test=""String_Node_Str"";
  System.out.println(test);
  System.out.println(queryIRIsToVars(test,0));
  System.out.println(queryToPattern(test));
}",0.9368932038834952
140882,"private void init(String queriesFile) throws IOException {
  rand=new Random(2);
  File f=new File(failedQueries);
  if (f.exists())   f.delete();
  List<String> queryPatterns=Files.readAllLines(Paths.get(queriesFile),Charset.forName(""String_Node_Str""));
  int i=0;
  for (  String p : queryPatterns) {
    if (p.isEmpty()) {
      continue;
    }
    if ((p.toLowerCase().contains(""String_Node_Str"") || p.toLowerCase().contains(""String_Node_Str"") || p.toLowerCase().contains(""String_Node_Str"")|| p.toLowerCase().contains(""String_Node_Str""))) {
      valuesToCSV(p,String.valueOf(i));
    }
 else {
      updatePattern(p,String.valueOf(i));
    }
    i++;
  }
}","private void init(String queriesFile) throws IOException {
  rand=new Random(2);
  File f=new File(failedQueries);
  if (f.exists())   f.delete();
  List<String> queryPatterns=Files.readAllLines(Paths.get(queriesFile),Charset.forName(""String_Node_Str""));
  int i=0;
  for (  String p : queryPatterns) {
    if (p.isEmpty()) {
      continue;
    }
    String test=""String_Node_Str"" + p.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"");
    if ((test.contains(""String_Node_Str"") || test.contains(""String_Node_Str"") || test.contains(""String_Node_Str"")|| test.contains(""String_Node_Str""))) {
      valuesToCSV(p,String.valueOf(i));
    }
 else {
      System.out.println(test);
      System.out.println(p);
      updatePattern(p,String.valueOf(i));
    }
    i++;
  }
}",0.7430555555555556
140883,"private int valuesToCSV(String pattern,String fileName) throws IOException {
  String query=String.valueOf(pattern);
  int ret=0;
  try {
    new File(path).mkdirs();
    File failed=new File(failedQueries + ""String_Node_Str"");
    failed.createNewFile();
    File f=new File(path + fileName + ""String_Node_Str"");
    f.createNewFile();
    PrintWriter pwfailed=new PrintWriter(new FileOutputStream(failed,true));
    PrintWriter pw=new PrintWriter(new OutputStreamWriter(new FileOutputStream(f),StandardCharsets.UTF_8),true);
    String q=selectPattern(query);
    ResultSet res=con.execute(q);
    Boolean result=false;
    while (res.next()) {
      result=true;
      ResultSetMetaData rsmd=res.getMetaData();
      int columns=rsmd.getColumnCount();
      String line=""String_Node_Str"";
      List<Object> vars=new LinkedList<Object>();
      for (int i=1; i <= columns; i++) {
        Object current=res.getObject(i);
        Node cur=TripleStoreHandler.implToNode(current);
        vars.add(GraphHandler.NodeToSPARQLString(cur));
      }
      line=patternToQuery(pattern,vars);
      pw.write(line);
      pw.println();
      ret++;
    }
    pw.close();
    if (!result) {
      pwfailed.write(pattern);
      pwfailed.println();
      f.delete();
    }
    pwfailed.close();
    return ret;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return ret;
  }
}","private int valuesToCSV(String pattern,String fileName) throws IOException {
  String query=String.valueOf(pattern);
  int ret=0;
  try {
    new File(path).mkdirs();
    File failed=new File(failedQueries + ""String_Node_Str"");
    failed.createNewFile();
    File f=new File(path + fileName + ""String_Node_Str"");
    f.createNewFile();
    PrintWriter pwfailed=new PrintWriter(new FileOutputStream(failed,true));
    PrintWriter pw=new PrintWriter(new OutputStreamWriter(new FileOutputStream(f),StandardCharsets.UTF_8),true);
    String q=selectPattern(query);
    ResultSet res=null;
    if (!QuerySorter.isSPARQL(q)) {
    }
 else {
      res=con.execute(q);
    }
    Boolean result=false;
    if (res != null) {
      while (res.next()) {
        result=true;
        ResultSetMetaData rsmd=res.getMetaData();
        int columns=rsmd.getColumnCount();
        String line=""String_Node_Str"";
        List<Object> vars=new LinkedList<Object>();
        for (int i=1; i <= columns; i++) {
          Object current=res.getObject(i);
          if (current == null) {
            vars.add(""String_Node_Str"");
            continue;
          }
          Node cur=TripleStoreHandler.implToNode(current);
          vars.add(GraphHandler.NodeToSPARQLString(cur));
        }
        line=patternToQuery(pattern,vars);
        pw.write(line);
        pw.println();
        ret++;
      }
    }
    pw.close();
    if (!result) {
      pwfailed.write(pattern);
      pwfailed.println();
      f.delete();
    }
    pwfailed.close();
    return ret;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return ret;
  }
}",0.5947210157033077
140884,"private static HashMap<String,List<String>> queryMixesPerHour(Connection con,HashMap<String,List<String>> queries,HashMap<String,List<String>> map){
  List<String> row2=new ArrayList<String>();
  log.info(""String_Node_Str"");
  Long time=0L;
  Long count=0L;
  String query=""String_Node_Str"";
  Random gen=new Random(1);
  Random gen2=new Random(2);
  while (time <= 3600000) {
    Integer querySetNumber=(int)(gen.nextDouble() * (queries.size()));
    Iterator<String> it=queries.keySet().iterator();
    String setNumber=""String_Node_Str"";
    for (Integer i=0; i <= querySetNumber; i++) {
      setNumber=it.next();
    }
    List<String> querySet=queries.get(setNumber);
    query=querySet.get((int)(gen2.nextDouble() * (querySet.size())));
    Date start=new Date();
    try {
      con.select(query);
    }
 catch (    SQLException e) {
      log.warning(""String_Node_Str"" + query + ""String_Node_Str"");
      continue;
    }
    Date end=new Date();
    count++;
    time+=end.getTime() - start.getTime();
  }
  row2.add(count.toString());
  log.fine(""String_Node_Str"");
  map.put(""String_Node_Str"",row2);
  return map;
}","private static HashMap<String,List<String>> queryMixesPerHour(Connection con,HashMap<String,List<String>> queries,String graphURI,String fromGraph,HashMap<String,List<String>> map){
  List<String> row2=new ArrayList<String>();
  log.info(""String_Node_Str"");
  Long time=0L;
  Long count=0L;
  String query=""String_Node_Str"";
  Random gen=new Random(1);
  Random gen2=new Random(2);
  while (time <= 3600000) {
    Integer querySetNumber=(int)(gen.nextDouble() * (queries.size()));
    Iterator<String> it=queries.keySet().iterator();
    String setNumber=""String_Node_Str"";
    for (Integer i=0; i <= querySetNumber; i++) {
      setNumber=it.next();
    }
    List<String> querySet=queries.get(setNumber);
    query=querySet.get((int)(gen2.nextDouble() * (querySet.size()))).replace(""String_Node_Str"" + graphURI + ""String_Node_Str"",""String_Node_Str"" + fromGraph + ""String_Node_Str"");
    ;
    Date start=new Date();
    try {
      con.select(query);
    }
 catch (    SQLException e) {
      log.warning(""String_Node_Str"" + query + ""String_Node_Str"");
      continue;
    }
    Date end=new Date();
    count++;
    time+=end.getTime() - start.getTime();
  }
  row2.add(count.toString());
  log.fine(""String_Node_Str"");
  map.put(""String_Node_Str"",row2);
  return map;
}",0.9387244685285536
140885,"/** 
 * Starten den Benchmark und testet die Zeit der Queries
 * @param con Connection zum Triplestore
 * @param queries Die SPARQL Anfragen als Strings
 * @param logName Log Name welcher fürs Loggen benutzt werden soll
 * @param fromGraph Named Graph welcher benutzt wird
 * @return gibt Liste mit gemessenen Parametern zurück zu jeweiligem Test
 */
public static HashMap<String,List<String>> start(Connection con,HashMap<String,List<String>> queries,String logName,String graphURI,String fromGraph){
  HashMap<String,List<String>> map=new HashMap<String,List<String>>();
  map=queriesPerSecond(con,queries,graphURI,fromGraph,map);
  map=queryMixesPerHour(con,queries,map);
  return map;
}","/** 
 * Starten den Benchmark und testet die Zeit der Queries
 * @param con Connection zum Triplestore
 * @param queries Die SPARQL Anfragen als Strings
 * @param logName Log Name welcher fürs Loggen benutzt werden soll
 * @param fromGraph Named Graph welcher benutzt wird
 * @return gibt Liste mit gemessenen Parametern zurück zu jeweiligem Test
 */
public static HashMap<String,List<String>> start(Connection con,HashMap<String,List<String>> queries,String logName,String graphURI,String fromGraph){
  HashMap<String,List<String>> map=new HashMap<String,List<String>>();
  map=queriesPerSecond(con,queries,graphURI,fromGraph,map);
  map=queryMixesPerHour(con,queries,graphURI,fromGraph,map);
  return map;
}",0.9864188706218728
140886,"public static void mainLoop(List<String> ids,String pathToXMLFile) throws ClassNotFoundException, SAXException, IOException, ParserConfigurationException, SQLException, InterruptedException {
  Integer dbCount=0;
  String[] randFiles=null;
  if (Boolean.valueOf(config.get(""String_Node_Str""))) {
    randFiles=getDatasetFiles(refCon);
  }
 else {
    randFiles=Config.getRandomFiles(rootNode);
  }
  for (int i=0; i < percents.size(); i++) {
    ResultSet upload=new ResultSet();
    for (    String db : ids) {
      log.info(""String_Node_Str"" + db + ""String_Node_Str""+ percents.get(i));
      Connection con=ConnectionFactory.createConnection(dbNode,db);
      if (Boolean.valueOf(config.get(""String_Node_Str""))) {
        con.dropGraph(config.get(""String_Node_Str""));
      }
      if (testcases.containsKey(UploadTestcase.class.getName())) {
        log.info(""String_Node_Str"" + db + ""String_Node_Str""+ percents.get(i));
        UploadTestcase ut=new UploadTestcase();
        Properties up=testcases.get(UploadTestcase.class.getName());
        up.setProperty(""String_Node_Str"",randFiles[i]);
        ut.setProperties(up);
        ut.setConnection(con);
        ut.setCurrentDBName(db);
        Collection<ResultSet> uploadRes=new LinkedList<ResultSet>();
        uploadRes.add(upload);
        ut.addCurrentResults(uploadRes);
        ut.start();
        upload=ut.getResults().iterator().next();
        log.info(""String_Node_Str"" + db + ""String_Node_Str""+ percents.get(i));
      }
      try {
        if (config.get(""String_Node_Str"") != null && config.get(""String_Node_Str"") != null) {
          warmup(con,String.valueOf(config.get(""String_Node_Str"")),Long.valueOf(config.get(""String_Node_Str"")));
          log.info(""String_Node_Str"");
        }
      }
 catch (      Exception e) {
        log.info(""String_Node_Str"");
      }
      log.info(""String_Node_Str"");
      start(con,db,String.valueOf(percents.get(i)));
      if (Boolean.valueOf(config.get(""String_Node_Str""))) {
        log.info(""String_Node_Str"" + config.get(""String_Node_Str""));
        con.dropGraph(config.get(""String_Node_Str""));
      }
      dbCount++;
    }
    upload.setFileName(""String_Node_Str"" + percents.get(i));
    upload.save();
  }
  for (  String key : results.keySet()) {
    for (    ResultSet res : results.get(key)) {
      log.info(""String_Node_Str"");
      String testCase=key.split(""String_Node_Str"")[0];
      testCase.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String[] fileName=res.getFileName().split(File.separator);
      res.setFileName(""String_Node_Str"" + File.separator + RESULT_FILE_NAME+ File.separator+ testCase+ File.separator+ fileName[fileName.length - 1]);
      res.save();
      res.saveAsPNG();
      log.info(""String_Node_Str"");
    }
  }
}","public static void mainLoop(List<String> ids,String pathToXMLFile) throws ClassNotFoundException, SAXException, IOException, ParserConfigurationException, SQLException, InterruptedException {
  Integer dbCount=0;
  String[] randFiles=null;
  if (Boolean.valueOf(config.get(""String_Node_Str""))) {
    String file=config.get(""String_Node_Str"");
    randFiles=getDatasetFiles(refCon,file);
  }
 else {
    randFiles=Config.getRandomFiles(rootNode);
  }
  for (int i=0; i < percents.size(); i++) {
    ResultSet upload=new ResultSet();
    for (    String db : ids) {
      log.info(""String_Node_Str"" + db + ""String_Node_Str""+ percents.get(i));
      Connection con=ConnectionFactory.createConnection(dbNode,db);
      if (Boolean.valueOf(config.get(""String_Node_Str""))) {
        con.dropGraph(config.get(""String_Node_Str""));
      }
      if (testcases.containsKey(UploadTestcase.class.getName())) {
        log.info(""String_Node_Str"" + db + ""String_Node_Str""+ percents.get(i));
        UploadTestcase ut=new UploadTestcase();
        Properties up=testcases.get(UploadTestcase.class.getName());
        up.setProperty(""String_Node_Str"",randFiles[i]);
        ut.setProperties(up);
        ut.setConnection(con);
        ut.setCurrentDBName(db);
        Collection<ResultSet> uploadRes=new LinkedList<ResultSet>();
        uploadRes.add(upload);
        ut.addCurrentResults(uploadRes);
        ut.start();
        upload=ut.getResults().iterator().next();
        log.info(""String_Node_Str"" + db + ""String_Node_Str""+ percents.get(i));
      }
      try {
        if (config.get(""String_Node_Str"") != null && config.get(""String_Node_Str"") != null) {
          warmup(con,String.valueOf(config.get(""String_Node_Str"")),Long.valueOf(config.get(""String_Node_Str"")));
          log.info(""String_Node_Str"");
        }
      }
 catch (      Exception e) {
        log.info(""String_Node_Str"");
      }
      log.info(""String_Node_Str"");
      start(con,db,String.valueOf(percents.get(i)));
      if (Boolean.valueOf(config.get(""String_Node_Str""))) {
        log.info(""String_Node_Str"" + config.get(""String_Node_Str""));
        con.dropGraph(config.get(""String_Node_Str""));
      }
      dbCount++;
    }
    upload.setFileName(""String_Node_Str"" + percents.get(i));
    upload.save();
  }
  for (  String key : results.keySet()) {
    for (    ResultSet res : results.get(key)) {
      log.info(""String_Node_Str"");
      String testCase=key.split(""String_Node_Str"")[0];
      testCase.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String[] fileName=res.getFileName().split(File.separator);
      res.setFileName(""String_Node_Str"" + File.separator + RESULT_FILE_NAME+ File.separator+ testCase+ File.separator+ fileName[fileName.length - 1]);
      res.save();
      res.saveAsPNG();
      log.info(""String_Node_Str"");
    }
  }
}",0.9907142857142858
140887,"private static String[] getDatasetFiles(Connection con){
  String[] ret=new String[percents.size()];
  new File(""String_Node_Str"" + File.separator).mkdir();
  String fileName=""String_Node_Str"" + File.separator + ""String_Node_Str"";
  log.info(""String_Node_Str"");
  TripleStoreHandler.writeDatasetToFile(con,config.get(""String_Node_Str""),fileName);
  for (int i=0; i < percents.size(); i++) {
    if (percents.get(i) == 1.0) {
      ret[i]=fileName;
      continue;
    }
    String outputFile=""String_Node_Str"" + File.separator + ""String_Node_Str""+ i * 100 + ""String_Node_Str"";
    DataGenerator.generateData(con,config.get(""String_Node_Str""),fileName,outputFile,config.get(""String_Node_Str""),percents.get(i));
    log.info(""String_Node_Str"" + percents.get(i) * 100 + ""String_Node_Str"");
  }
  return ret;
}","private static String[] getDatasetFiles(Connection con,String hundredFile){
  String[] ret=new String[percents.size()];
  new File(""String_Node_Str"" + File.separator).mkdir();
  String fileName=hundredFile;
  if (hundredFile == null || !(new File(hundredFile).exists())) {
    fileName=""String_Node_Str"" + File.separator + ""String_Node_Str"";
    log.info(""String_Node_Str"");
    TripleStoreHandler.writeDatasetToFile(con,config.get(""String_Node_Str""),fileName);
  }
  for (int i=0; i < percents.size(); i++) {
    if (percents.get(i) == 1.0) {
      ret[i]=fileName;
      continue;
    }
    String outputFile=""String_Node_Str"" + File.separator + ""String_Node_Str""+ i * 100 + ""String_Node_Str"";
    DataGenerator.generateData(con,config.get(""String_Node_Str""),fileName,outputFile,config.get(""String_Node_Str""),percents.get(i));
    log.info(""String_Node_Str"" + percents.get(i) * 100 + ""String_Node_Str"");
  }
  return ret;
}",0.8307336799537839
140888,"public static String queryIRIsToVars(String query){
  String ret=query;
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.UNICODE_CHARACTER_CLASS);
  Matcher m=p.matcher(ret);
  int i=1;
  while (m.find()) {
    ret.replace(m.group(),""String_Node_Str"" + i);
    i++;
  }
  return ret;
}","private static String queryIRIsToVars(String query,int literals){
  String ret=query;
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.UNICODE_CHARACTER_CLASS);
  Matcher m=p.matcher(ret);
  int i=1, count=0;
  while (m.find() && count < 2) {
    count++;
  }
  if (count == 0) {
    return ""String_Node_Str"" + ret;
  }
  if (count < 2 && literals == 0) {
    if (m.find(0)) {
      String gr=m.group();
      ret=ret.replace(gr.substring(gr.lastIndexOf(""String_Node_Str"")),""String_Node_Str"");
    }
    return ""String_Node_Str"" + ret;
  }
  m.find(0);
  do {
    String gr=m.group();
    ret=ret.replace(gr.substring(gr.lastIndexOf(""String_Node_Str"")),""String_Node_Str"" + i + ""String_Node_Str"");
    i++;
  }
 while (m.find());
  return i + ""String_Node_Str"" + ret;
}",0.4496707431796801
140889,"public static String queryToPattern(String query){
  String pattern=query;
  int i=1;
  Collection<String> literals=findLiterals(query);
  if (literals.size() == 0) {
    return query;
  }
  if (literals.size() == 1) {
    if (literalInFilterClause(query,literals.iterator().next())) {
      return query;
    }
    return query.replace(literals.iterator().next(),""String_Node_Str"");
  }
  for (  String literal : literals) {
    if (literalInFilterClause(query,literal)) {
      continue;
    }
    pattern=pattern.replace(literal,""String_Node_Str"" + i + ""String_Node_Str"");
    i++;
  }
  return pattern;
}","public static String queryToPattern(String query){
  String pattern=query;
  int i=1;
  Collection<String> literals=findLiterals(query);
  pattern=queryIRIsToVars(pattern,literals.size());
  i=Integer.parseInt(pattern.substring(0,pattern.indexOf(""String_Node_Str"")));
  pattern=pattern.substring(pattern.indexOf(""String_Node_Str"") + 1);
  if (literals.size() == 0) {
    return pattern;
  }
  if (i + literals.size() == 1) {
    if (literalInFilterClause(query,literals.iterator().next())) {
      return pattern;
    }
    return query.replace(literals.iterator().next(),""String_Node_Str"");
  }
  for (  String literal : literals) {
    if (literalInFilterClause(query,literal)) {
      continue;
    }
    pattern=pattern.replace(literal,""String_Node_Str"" + i + ""String_Node_Str"");
    i++;
  }
  return pattern;
}",0.8384831460674157
140890,"public static void main(String[] argc){
  String test=""String_Node_Str"";
  System.out.println(test);
  System.out.println(queryToPattern(test));
}","public static void main(String[] argc){
  String test=""String_Node_Str"";
  System.out.println(test);
  System.out.println(queryIRIsToVars(test,0));
  System.out.println(queryToPattern(test));
}",0.8613569321533924
140891,"public static HashMap<String,String> getParameter(Node root) throws ParserConfigurationException, SAXException, IOException {
  ConfigParser cp=ConfigParser.getParser(root);
  HashMap<String,String> map=new HashMap<String,String>();
  try {
    Element logCluster=cp.getElementAt(""String_Node_Str"",0);
    map.put(""String_Node_Str"",logCluster.getAttribute(""String_Node_Str""));
    map.put(""String_Node_Str"",logCluster.getAttribute(""String_Node_Str""));
    map.put(""String_Node_Str"",logCluster.getAttribute(""String_Node_Str""));
  }
 catch (  Exception e) {
  }
  cp.setNode((Element)root);
  Element benchmark=(Element)cp.getElementAt(""String_Node_Str"",0);
  map.put(""String_Node_Str"",benchmark.getAttribute(""String_Node_Str""));
  map.put(""String_Node_Str"",cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str""));
  cp.setNode(benchmark);
  String pgnprocess=""String_Node_Str"";
  try {
    pgnprocess=cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str"");
    cp.setNode(benchmark);
    map.put(""String_Node_Str"",cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str""));
    cp.setNode(benchmark);
    map.put(""String_Node_Str"",cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str""));
    cp.setNode(benchmark);
    map.put(""String_Node_Str"",cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str""));
    cp.setNode(benchmark);
  }
 catch (  Exception e) {
    pgnprocess=""String_Node_Str"";
  }
  map.put(""String_Node_Str"",pgnprocess);
  cp.setNode(benchmark);
  String outputFormat=""String_Node_Str"";
  try {
    outputFormat=cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str"");
  }
 catch (  Exception e) {
    outputFormat=""String_Node_Str"";
  }
  map.put(""String_Node_Str"",outputFormat);
  cp.setNode(benchmark);
  String graph;
  try {
    graph=cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str"");
  }
 catch (  Exception e) {
    graph=null;
  }
  map.put(""String_Node_Str"",graph);
  cp.setNode(benchmark);
  map.put(""String_Node_Str"",cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str""));
  cp.setNode(benchmark);
  String limit=""String_Node_Str"";
  try {
    limit=cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str"");
  }
 catch (  Exception e) {
    limit=""String_Node_Str"";
  }
  map.put(""String_Node_Str"",limit);
  cp.setNode(benchmark);
  Element testDB=cp.getElementAt(""String_Node_Str"",0);
  map.put(""String_Node_Str"",testDB.getAttribute(""String_Node_Str""));
  map.put(""String_Node_Str"",testDB.getAttribute(""String_Node_Str""));
  cp.setNode(benchmark);
  Element rand=cp.getElementAt(""String_Node_Str"",0);
  map.put(""String_Node_Str"",rand.getAttribute(""String_Node_Str""));
  map.put(""String_Node_Str"",rand.getAttribute(""String_Node_Str""));
  cp.setNode(benchmark);
  try {
    Element warmup=cp.getElementAt(""String_Node_Str"",0);
    map.put(""String_Node_Str"",warmup.getAttribute(""String_Node_Str""));
    map.put(""String_Node_Str"",warmup.getAttribute(""String_Node_Str""));
  }
 catch (  Exception e) {
  }
  cp.setNode(benchmark);
  map.put(""String_Node_Str"",cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str""));
  new File(map.get(""String_Node_Str"")).mkdirs();
  return map;
}","public static HashMap<String,String> getParameter(Node root) throws ParserConfigurationException, SAXException, IOException {
  ConfigParser cp=ConfigParser.getParser(root);
  HashMap<String,String> map=new HashMap<String,String>();
  try {
    Element logCluster=cp.getElementAt(""String_Node_Str"",0);
    map.put(""String_Node_Str"",logCluster.getAttribute(""String_Node_Str""));
    map.put(""String_Node_Str"",logCluster.getAttribute(""String_Node_Str""));
    map.put(""String_Node_Str"",logCluster.getAttribute(""String_Node_Str""));
  }
 catch (  Exception e) {
  }
  cp.setNode((Element)root);
  Element benchmark=(Element)cp.getElementAt(""String_Node_Str"",0);
  map.put(""String_Node_Str"",benchmark.getAttribute(""String_Node_Str""));
  map.put(""String_Node_Str"",cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str""));
  cp.setNode(benchmark);
  String pgnprocess=""String_Node_Str"";
  try {
    pgnprocess=cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str"");
    cp.setNode(benchmark);
    map.put(""String_Node_Str"",cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str""));
    cp.setNode(benchmark);
    map.put(""String_Node_Str"",cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str""));
    cp.setNode(benchmark);
    map.put(""String_Node_Str"",cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str""));
    cp.setNode(benchmark);
  }
 catch (  Exception e) {
    pgnprocess=""String_Node_Str"";
  }
  map.put(""String_Node_Str"",pgnprocess);
  cp.setNode(benchmark);
  String outputFormat=""String_Node_Str"";
  try {
    outputFormat=cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str"");
  }
 catch (  Exception e) {
    outputFormat=""String_Node_Str"";
  }
  map.put(""String_Node_Str"",outputFormat);
  cp.setNode(benchmark);
  String graph;
  try {
    graph=cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str"");
  }
 catch (  Exception e) {
    graph=null;
  }
  map.put(""String_Node_Str"",graph);
  cp.setNode(benchmark);
  map.put(""String_Node_Str"",cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str""));
  cp.setNode(benchmark);
  String limit=""String_Node_Str"";
  try {
    limit=cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str"");
  }
 catch (  Exception e) {
    limit=""String_Node_Str"";
  }
  map.put(""String_Node_Str"",limit);
  cp.setNode(benchmark);
  Element testDB=cp.getElementAt(""String_Node_Str"",0);
  map.put(""String_Node_Str"",testDB.getAttribute(""String_Node_Str""));
  map.put(""String_Node_Str"",testDB.getAttribute(""String_Node_Str""));
  cp.setNode(benchmark);
  Element rand=cp.getElementAt(""String_Node_Str"",0);
  map.put(""String_Node_Str"",rand.getAttribute(""String_Node_Str""));
  map.put(""String_Node_Str"",rand.getAttribute(""String_Node_Str""));
  map.put(""String_Node_Str"",rand.getAttribute(""String_Node_Str""));
  cp.setNode(benchmark);
  try {
    Element warmup=cp.getElementAt(""String_Node_Str"",0);
    map.put(""String_Node_Str"",warmup.getAttribute(""String_Node_Str""));
    map.put(""String_Node_Str"",warmup.getAttribute(""String_Node_Str""));
  }
 catch (  Exception e) {
  }
  cp.setNode(benchmark);
  map.put(""String_Node_Str"",cp.getElementAt(""String_Node_Str"",0).getAttribute(""String_Node_Str""));
  new File(map.get(""String_Node_Str"")).mkdirs();
  return map;
}",0.9897725538085788
140892,"/** 
 * @param args
 */
public static void main(String[] args){
  if (System.console() == null) {
    args=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  }
  execute(args);
}","/** 
 * @param args
 */
public static void main(String[] args){
  if (System.console() == null) {
    args=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  }
  execute(args);
}",0.9230769230769232
140893,"public void detectAndMergeMultiwords(MultiwordChecker multiwordChecker){
  List<Word> mergedWords=multiwordChecker.checkMultiwords(sentenceWords);
  for (  Word mergedWord : mergedWords) {
    if (mergedWord.isMultiword()) {
      List<Word> composingWords=mergedWord.getComposingWords();
      for (      Word innerWord : composingWords) {
        Iterator<WordToWordRelation> governorRels=governorWordRelationMap.get(innerWord.getSpanSignature()).iterator();
        while (governorRels.hasNext()) {
          WordToWordRelation rel=governorRels.next();
          rel.setSourceWord(mergedWord);
          if (!composingWords.contains(rel.getTargetWord()) && !rel.getSourceWord().isSameWordInTheSentenceThan(rel.getTargetWord())) {
            governorWordRelationMap.put(mergedWord.getSpanSignature(),rel);
          }
        }
        log.debug(""String_Node_Str"" + innerWord);
        governorWordRelationMap.removeAll(innerWord);
        Iterator<WordToWordRelation> dependentRels=dependentWordRelationMap.get(innerWord.getSpanSignature()).iterator();
        while (dependentRels.hasNext()) {
          WordToWordRelation rel=dependentRels.next();
          rel.setTargetWord(mergedWord);
          if (!composingWords.contains(rel.getSourceWord()) && !rel.getSourceWord().isSameWordInTheSentenceThan(rel.getTargetWord())) {
            dependentWordRelationMap.put(mergedWord.getSpanSignature(),rel);
          }
        }
        log.debug(""String_Node_Str"" + innerWord);
        dependentWordRelationMap.removeAll(innerWord);
      }
    }
  }
  this.sentenceWords=mergedWords;
  populateSpanToWorNumberMap();
}","public void detectAndMergeMultiwords(MultiwordChecker multiwordChecker){
  List<Word> mergedWords=multiwordChecker.checkMultiwords(sentenceWords);
  for (  Word mergedWord : mergedWords) {
    if (mergedWord.isMultiword()) {
      List<Word> composingWords=mergedWord.getComposingWords();
      for (      Word innerWord : composingWords) {
        Iterator<WordToWordRelation> governorRels=governorWordRelationMap.get(innerWord.getSpanSignature()).iterator();
        while (governorRels.hasNext()) {
          WordToWordRelation rel=governorRels.next();
          rel.setSourceWord(mergedWord);
          if (!composingWords.contains(rel.getTargetWord()) && !rel.getSourceWord().isSameWordInTheSentenceThan(rel.getTargetWord())) {
            governorWordRelationMap.put(mergedWord.getSpanSignature(),rel);
          }
        }
        log.debug(""String_Node_Str"" + innerWord);
        governorWordRelationMap.removeAll(innerWord);
        Iterator<WordToWordRelation> dependentRels=dependentWordRelationMap.get(innerWord.getSpanSignature()).iterator();
        while (dependentRels.hasNext()) {
          WordToWordRelation rel=dependentRels.next();
          rel.setTargetWord(mergedWord);
          if (!composingWords.contains(rel.getSourceWord()) && !rel.getSourceWord().isSameWordInTheSentenceThan(rel.getTargetWord())) {
            dependentWordRelationMap.put(mergedWord.getSpanSignature(),rel);
          }
        }
        log.debug(""String_Node_Str"" + innerWord);
        dependentWordRelationMap.removeAll(innerWord);
      }
    }
  }
  this.sentenceWords=mergedWords;
  populateSpanToWordNumberMap();
}",0.9996914532551682
140894,"public Integer getWordNumber(Word word){
  if (spanToWordNumberMap == null) {
    populateSpanToWorNumberMap();
  }
  Integer wordNumber=spanToWordNumberMap.get(word.getSpanSignature());
  if (wordNumber == null) {
    log.debug(""String_Node_Str"" + word + ""String_Node_Str""+ spanToWordNumberMap+ ""String_Node_Str""+ sentenceWords);
    log.warn(""String_Node_Str"" + governorWordRelationMap.size() + ""String_Node_Str""+ dependentWordRelationMap.size()+ ""String_Node_Str""+ sentenceWords.size());
  }
  return wordNumber;
}","public Integer getWordNumber(Word word){
  if (spanToWordNumberMap == null) {
    populateSpanToWordNumberMap();
  }
  Integer wordNumber=spanToWordNumberMap.get(word.getSpanSignature());
  if (wordNumber == null) {
    log.debug(""String_Node_Str"" + word + ""String_Node_Str""+ spanToWordNumberMap+ ""String_Node_Str""+ sentenceWords);
    log.warn(""String_Node_Str"" + governorWordRelationMap.size() + ""String_Node_Str""+ dependentWordRelationMap.size()+ ""String_Node_Str""+ sentenceWords.size());
  }
  return wordNumber;
}",0.9990338164251208
140895,"public static Word createMultiword(List<Word> singleWords){
  StringBuffer composedWordForm=new StringBuffer();
  StringBuffer composedLemma=new StringBuffer();
  PartOfSpeech composedPosTag=PartOfSpeech.MULTIWORD;
  for (  Word singleWord : singleWords) {
    composedWordForm.append(singleWord.wordForm);
    composedWordForm.append(""String_Node_Str"");
    composedLemma.append(singleWord.getLemma());
    composedLemma.append(""String_Node_Str"");
  }
  Word word=new Word(composedWordForm.toString().trim(),composedLemma.toString().trim(),composedPosTag,singleWords.get(0).span.begin,singleWords.get(singleWords.size() - 1).span.end,singleWords);
  return word;
}","public static Word createMultiword(List<Word> singleWords){
  StringBuffer composedWordForm=new StringBuffer();
  StringBuffer composedLemma=new StringBuffer();
  PartOfSpeech composedPosTag=determineMultiwordPartOfSpeech(singleWords);
  for (  Word singleWord : singleWords) {
    composedWordForm.append(singleWord.wordForm);
    composedWordForm.append(""String_Node_Str"");
    composedLemma.append(singleWord.getLemma());
    composedLemma.append(""String_Node_Str"");
  }
  Word word=new Word(composedWordForm.toString().trim(),composedLemma.toString().trim(),composedPosTag,singleWords.get(0).span.begin,singleWords.get(singleWords.size() - 1).span.end,singleWords);
  return word;
}",0.9696521095484826
140896,"@Override public byte[] put(byte[] k,byte[] v){
  final long hash=Hash.murmurHash(k);
  final long dataPtr=writeKeyVal(k,v);
synchronized (lockForHash(hash)) {
    final SearchResult sr=locateRecord(k,hash);
    if (sr.val != null) {
      RecordPtr.overwrite(sr.foundMapper,sr.foundPos,hash,dataPtr,k.length,v.length);
    }
 else     if (sr.freeMapper != null) {
      RecordPtr.overwrite(sr.freeMapper,sr.freePos,hash,dataPtr,k.length,v.length);
      size.incrementAndGet();
    }
 else {
      final RecordPtr recPtr=new RecordPtr(hash,dataPtr,k.length,v.length);
      final long bucketPos=allocateSecondaryBucket(sr.lastBucketMapper,sr.lastBucketPos);
      writeRecordsToBucketChain(bucketPos,sr.lastBucketMapper,Arrays.asList(new RecordPtr[]{recPtr}));
      size.incrementAndGet();
    }
    return sr.val;
  }
}","@Override public byte[] put(byte[] k,byte[] v){
  final long hash=Hash.murmurHash(k);
  final long dataPtr=writeKeyVal(k,v);
synchronized (lockForHash(hash)) {
    final SearchResult sr=locateRecord(k,hash);
    if (sr.val != null) {
      RecordPtr.overwrite(sr.foundMapper,sr.foundPos,hash,dataPtr,k.length,v.length);
    }
 else     if (sr.freeMapper != null) {
      RecordPtr.overwrite(sr.freeMapper,sr.freePos,hash,dataPtr,k.length,v.length);
      size.incrementAndGet();
    }
 else {
      final RecordPtr recPtr=new RecordPtr(hash,dataPtr,k.length,v.length);
      final long bucketPos=allocateSecondaryBucket(sr.lastBucketMapper,sr.lastBucketPos);
      writeRecordsToBucketChain(bucketPos,secondaryMapper,Arrays.asList(new RecordPtr[]{recPtr}));
      size.incrementAndGet();
    }
    return sr.val;
  }
}",0.9878048780487804
140897,"private SearchResult locateRecord(byte[] k,long hash){
  final SearchResult out=new SearchResult();
  final long idx=idxForHash(hash);
  final int startSubIdx=subIdxForHash(hash);
  MMapper mapper=primaryMapper;
  long bucketPos=idxToPos(idx);
  long nextBucketPos=getNextBucketPos(bucketPos,mapper);
  if (findInBucket(mapper,hash,k,bucketPos,startSubIdx,out))   return out;
  mapper=secondaryMapper;
  while (nextBucketPos != 0) {
    bucketPos=nextBucketPos;
    nextBucketPos=getNextBucketPos(bucketPos,mapper);
    if (findInBucket(mapper,hash,k,bucketPos,startSubIdx,out))     return out;
  }
  out.lastBucketMapper=mapper;
  out.lastBucketPos=bucketPos;
  return out;
}","private SearchResult locateRecord(byte[] k,long hash){
  final SearchResult out=new SearchResult();
  final long idx=idxForHash(hash);
  final int startSubIdx=subIdxForHash(hash);
  MMapper mapper=primaryMapper;
  long bucketPos=idxToPos(idx);
  long nextBucketPos=getNextBucketPos(bucketPos,mapper);
  if (findInBucket(mapper,hash,k,bucketPos,startSubIdx,out))   return out;
  while (nextBucketPos != 0) {
    mapper=secondaryMapper;
    bucketPos=nextBucketPos;
    nextBucketPos=getNextBucketPos(bucketPos,mapper);
    if (findInBucket(mapper,hash,k,bucketPos,startSubIdx,out))     return out;
  }
  out.lastBucketMapper=mapper;
  out.lastBucketPos=bucketPos;
  return out;
}",0.9527326440177252
140898,"@Override protected void rehashIdx(long idx){
  final long keepIdx=idx, moveIdx=idx + tableLength;
  final ArrayList<RecordPtr> keepBuckets=new ArrayList<RecordPtr>();
  final ArrayList<RecordPtr> moveBuckets=new ArrayList<RecordPtr>();
  long keepBucketPos=idxToPos(idx);
  long moveBucketPos=idxToPos(moveIdx);
{
    final ArrayList<RecordPtr> allBuckets=new ArrayList<RecordPtr>();
    accumRecordsInBucketChain(keepBucketPos,primaryMapper,allBuckets);
    for (    final RecordPtr recPtr : allBuckets) {
      final long newIdx=recPtr.hash & (tableLength + tableLength - 1L);
      if (newIdx == keepIdx)       keepBuckets.add(recPtr);
 else       if (newIdx == moveIdx)       keepBuckets.add(recPtr);
 else       throw new IllegalStateException(""String_Node_Str"");
    }
  }
  writeRecordsToBucketChain(keepBucketPos,primaryMapper,keepBuckets);
  writeRecordsToBucketChain(moveBucketPos,primaryMapper,moveBuckets);
}","@Override protected void rehashIdx(long idx){
  final long keepIdx=idx, moveIdx=idx + tableLength;
  final ArrayList<RecordPtr> keepBuckets=new ArrayList<RecordPtr>();
  final ArrayList<RecordPtr> moveBuckets=new ArrayList<RecordPtr>();
  long keepBucketPos=idxToPos(idx);
  long moveBucketPos=idxToPos(moveIdx);
{
    final ArrayList<RecordPtr> allBuckets=new ArrayList<RecordPtr>();
    accumRecordsInBucketChain(keepBucketPos,primaryMapper,allBuckets);
    for (    final RecordPtr recPtr : allBuckets) {
      final long newIdx=recPtr.hash & (tableLength + tableLength - 1L);
      if (newIdx == keepIdx)       keepBuckets.add(recPtr);
 else       if (newIdx == moveIdx)       moveBuckets.add(recPtr);
 else       throw new IllegalStateException(""String_Node_Str"");
    }
  }
  writeRecordsToBucketChain(keepBucketPos,primaryMapper,keepBuckets);
  writeRecordsToBucketChain(moveBucketPos,primaryMapper,moveBuckets);
}",0.995656894679696
140899,"public Grid convolveToHalfSize(Grid grid){
  final int rows=grid.getRows();
  final int cols=grid.getCols();
  if (cols < 4 || rows < 4) {
    return null;
  }
  final int newCols=cols / 2 + cols % 2;
  final int newRows=rows / 2 + rows % 2;
  Grid convGrid=new Grid(newCols,newRows,grid.getCellSize() * 2);
  convGrid.setWest(grid.getWest());
  convGrid.setSouth(grid.getSouth());
  convGrid.setPrjFileContent(grid.getPrjFileContent());
  for (int c=0; c < cols; c+=2) {
    float g=this.convolveBorder(grid,c,0);
    convGrid.setValue(g,c / 2,0);
    g=this.convolveBorder(grid,c,rows - 1);
    convGrid.setValue(g,c / 2,rows / 2 - 1 + rows % 2);
  }
  for (int r=0; r < rows; r+=2) {
    float g=this.convolveBorder(grid,0,r);
    convGrid.setValue(g,0,r / 2);
    g=this.convolveBorder(grid,cols - 1,r);
    convGrid.setValue(g,cols / 2 - 1 + cols % 2,r / 2);
  }
  for (int r=2; r < rows - 2; r+=2) {
    for (int c=2; c < cols - 2; c+=2) {
      final float g=this.convolve(grid,c,r);
      convGrid.setValue(g,c / 2,r / 2);
    }
  }
  return convGrid;
}","public Grid convolveToHalfSize(Grid grid){
  final int cols=grid.getCols();
  final int rows=grid.getRows();
  int[] newDimension=nextSmallerSize(cols,rows);
  if (newDimension == null) {
    return null;
  }
  final int newCols=newDimension[0];
  final int newRows=newDimension[1];
  Grid convGrid=new Grid(newCols,newRows,grid.getCellSize() * 2);
  convGrid.setWest(grid.getWest());
  convGrid.setSouth(grid.getSouth());
  convGrid.setPrjFileContent(grid.getPrjFileContent());
  for (int c=0; c < cols; c+=2) {
    float g=this.convolveBorder(grid,c,0);
    convGrid.setValue(g,c / 2,0);
    g=this.convolveBorder(grid,c,rows - 1);
    convGrid.setValue(g,c / 2,rows / 2 - 1 + rows % 2);
  }
  for (int r=0; r < rows; r+=2) {
    float g=this.convolveBorder(grid,0,r);
    convGrid.setValue(g,0,r / 2);
    g=this.convolveBorder(grid,cols - 1,r);
    convGrid.setValue(g,cols / 2 - 1 + cols % 2,r / 2);
  }
  for (int r=2; r < rows - 2; r+=2) {
    for (int c=2; c < cols - 2; c+=2) {
      final float g=this.convolve(grid,c,r);
      convGrid.setValue(g,c / 2,r / 2);
    }
  }
  return convGrid;
}",0.8552935737401757
140900,"/** 
 * Returns the dimensions of all Gaussian pyramid levels that are created when the constructor of this class is called with the passed grid.
 * @param grid
 * @return two dimensional array: cols x rows of largest level, cols x rowsof second level, etc.
 */
public static int[][] getPyramidSizeForGrid(Grid grid){
  assert(grid != null);
  int nbrPyramidLevels=getPyramidLevelsForGrid(grid);
  int[][] dimensions=new int[nbrPyramidLevels][2];
  int cols=grid.getCols();
  int rows=grid.getRows();
  for (int i=0; i < nbrPyramidLevels; i++) {
    if (validDimension(cols,rows) == false) {
      break;
    }
    dimensions[i][0]=cols;
    dimensions[i][1]=rows;
    cols/=2;
    rows/=2;
  }
  return dimensions;
}","/** 
 * Returns the dimensions of all Gaussian pyramid levels that are created when the constructor of this class is called with the passed grid.
 * @param grid
 * @return two dimensional array: cols x rows of largest level, cols x rowsof second level, etc.
 */
public static int[][] getPyramidSizeForGrid(Grid grid){
  assert(grid != null);
  ArrayList<int[]> dimensions=new ArrayList<>();
  int[] dim={grid.getCols(),grid.getRows()};
  dimensions.add(dim);
  for (; ; ) {
    dim=Convolution5x5.nextSmallerSize(dim[0],dim[1]);
    if (dim == null) {
      break;
    }
    dimensions.add(dim);
  }
  return dimensions.toArray(new int[dimensions.size()][2]);
}",0.5674891146589259
140901,"/** 
 * Returns the number of levels in a Gaussian pyramid for a given grid.
 * @param grid
 * @return number of levels
 */
public static int getPyramidLevelsForGrid(Grid grid){
  assert(grid != null);
  int cols=grid.getCols();
  int rows=grid.getRows();
  int nbrPyramidLevels=0;
  for (; ; ) {
    if (validDimension(cols,rows) == false) {
      break;
    }
    ++nbrPyramidLevels;
    cols/=2;
    rows/=2;
  }
  return nbrPyramidLevels;
}","/** 
 * Returns the number of levels in a Gaussian pyramid for a given grid.
 * @param grid
 * @return number of levels
 */
public static int getPyramidLevelsForGrid(Grid grid){
  return getPyramidSizeForGrid(grid).length;
}",0.5688622754491018
140902,"public GaussianPyramid(Grid grid){
  ArrayList<Grid> grids=new ArrayList<>();
  grids.add(grid);
  Convolution5x5 conv=new Convolution5x5();
  for (; ; ) {
    if (grid == null) {
      break;
    }
    int cols=grid.getCols() / 2;
    int rows=grid.getRows() / 2;
    if (validDimension(cols,rows) == false) {
      break;
    }
    grid=conv.convolveToHalfSize(grid);
    grids.add(grid);
  }
  pyramid=grids.toArray(new Grid[grids.size()]);
}","public GaussianPyramid(Grid grid){
  ArrayList<Grid> grids=new ArrayList<>();
  grids.add(grid);
  Convolution5x5 conv=new Convolution5x5();
  for (; ; ) {
    grid=conv.convolveToHalfSize(grid);
    if (grid == null) {
      break;
    }
 else {
      grids.add(grid);
    }
  }
  pyramid=grids.toArray(new Grid[grids.size()]);
}",0.655483870967742
140903,"/** 
 * Read a grid from a stream in ESRI ASCII format.
 * @param input The stream to read from. The stream is closed at the end.
 * @param progressIndicator A WorkerProgress to inform about the progress.
 * @return The read grid.
 * @throws java.io.IOException
 */
public Grid read(InputStream input,ProgressIndicator progressIndicator) throws IOException {
  if (progressIndicator != null) {
    progressIndicator.startProgress();
  }
  BufferedReader br=null;
  try {
    InputStreamReader in=new InputStreamReader(input);
    br=new BufferedReader(in);
    GridHeaderImporter header=new GridHeaderImporter();
    String firstGridLine=header.readHeader(br,true);
    if (header.isValid() == false) {
      throw new IOException(""String_Node_Str"");
    }
    Grid grid=new Grid(header.getCols(),header.getRows(),header.getCellSize());
    grid.setWest(header.getWest());
    grid.setSouth(header.getSouth());
    BlockingQueue<String> q=new LinkedBlockingQueue<>(64);
    q.put(firstGridLine);
    Producer producer=new Producer(q,br);
    Thread producerThread=new Thread(producer);
    producerThread.start();
    Consumer consumer=new Consumer(q,grid,header.getNoDataValue(),progressIndicator);
    Thread consumerThread=new Thread(consumer);
    consumerThread.start();
    try {
      producerThread.join();
    }
 catch (    InterruptedException ex) {
      consumerThread.interrupt();
    }
    consumerThread.join();
    return grid;
  }
 catch (  InterruptedException ex) {
    return null;
  }
 finally {
    try {
      if (br != null) {
        br.close();
      }
    }
 catch (    IOException exc) {
    }
    if (producerConsumerException != null) {
      throw new IOException(producerConsumerException);
    }
  }
}","/** 
 * Read a grid from a stream in ESRI ASCII format.
 * @param input The stream to read from. The stream is closed at the end.
 * @param progressIndicator A WorkerProgress to inform about the progress.
 * @return The read grid.
 * @throws java.io.IOException
 */
public Grid read(InputStream input,ProgressIndicator progressIndicator) throws IOException {
  if (progressIndicator != null) {
    progressIndicator.startProgress();
  }
  BufferedReader br=null;
  try {
    InputStreamReader in=new InputStreamReader(input);
    br=new BufferedReader(in);
    GridHeaderImporter header=new GridHeaderImporter();
    String firstGridLine=header.readHeader(br);
    if (header.isValid() == false) {
      throw new IOException(""String_Node_Str"");
    }
    Grid grid=new Grid(header.getCols(),header.getRows(),header.getCellSize());
    grid.setWest(header.getWest());
    grid.setSouth(header.getSouth());
    BlockingQueue<String> q=new LinkedBlockingQueue<>(64);
    q.put(firstGridLine);
    Producer producer=new Producer(q,br);
    Thread producerThread=new Thread(producer);
    producerThread.start();
    Consumer consumer=new Consumer(q,grid,header.getNoDataValue(),progressIndicator);
    Thread consumerThread=new Thread(consumer);
    consumerThread.start();
    try {
      producerThread.join();
    }
 catch (    InterruptedException ex) {
      consumerThread.interrupt();
    }
    consumerThread.join();
    return grid;
  }
 catch (  InterruptedException ex) {
    return null;
  }
 finally {
    try {
      if (br != null) {
        br.close();
      }
    }
 catch (    IOException exc) {
    }
    if (producerConsumerException != null) {
      throw new IOException(producerConsumerException);
    }
  }
}",0.998556165174704
140904,"protected boolean isValid(){
  return cols > 0 && rows > 0 && cellSize > 0 && !Double.isNaN(west) && !Double.isNaN(south);
}","/** 
 * Returns whether valid values have been found in the header.
 * @return true if the header has been successfully read and if it containsvalid values.
 */
protected boolean isValid(){
  return cols > 0 && rows > 0 && cellSize > 0 && !Double.isNaN(west) && !Double.isNaN(south);
}",0.6063569682151589
140905,"String readHeader(BufferedReader reader,boolean stopOnFirstUnknownLine) throws IOException {
  cols=rows=0;
  west=south=cellSize=Double.NaN;
  noDataValue=Float.NaN;
  String line;
  while ((line=reader.readLine()) != null) {
    StringTokenizer tokenizer=new StringTokenizer(line,""String_Node_Str"");
    String str=tokenizer.nextToken().trim().toLowerCase();
    if (str.equals(""String_Node_Str"")) {
      cols=Integer.parseInt(tokenizer.nextToken());
    }
 else     if (str.equals(""String_Node_Str"")) {
      rows=Integer.parseInt(tokenizer.nextToken());
    }
 else     if (str.equals(""String_Node_Str"") || str.equals(""String_Node_Str"")) {
      west=Double.parseDouble(tokenizer.nextToken());
    }
 else     if (str.equals(""String_Node_Str"") || str.equals(""String_Node_Str"")) {
      south=Double.parseDouble(tokenizer.nextToken());
    }
 else     if (str.equals(""String_Node_Str"")) {
      cellSize=Double.parseDouble(tokenizer.nextToken());
    }
 else     if (str.startsWith(""String_Node_Str"")) {
      noDataValue=Float.parseFloat(tokenizer.nextToken());
    }
 else {
      if (stopOnFirstUnknownLine) {
        return line;
      }
    }
  }
  return null;
}","/** 
 * Reads header line-by-line until the first grid line or an unknown header line is encountered.
 * @param reader read from this
 * @return The first grid line or the unknown header line.
 * @throws IOException
 */
String readHeader(BufferedReader reader) throws IOException {
  cols=rows=0;
  west=south=cellSize=Double.NaN;
  noDataValue=Float.NaN;
  boolean xCornerCoordinates=false, yCornerCoordinates=false;
  String line;
  while ((line=reader.readLine()) != null) {
    StringTokenizer tokenizer=new StringTokenizer(line,""String_Node_Str"");
    String str=tokenizer.nextToken().trim().toLowerCase();
    if (str.equals(""String_Node_Str"")) {
      cols=Integer.parseInt(tokenizer.nextToken());
    }
 else     if (str.equals(""String_Node_Str"")) {
      rows=Integer.parseInt(tokenizer.nextToken());
    }
 else     if (str.equals(""String_Node_Str"")) {
      west=Double.parseDouble(tokenizer.nextToken());
    }
 else     if (str.equals(""String_Node_Str"")) {
      west=Double.parseDouble(tokenizer.nextToken());
      xCornerCoordinates=true;
    }
 else     if (str.equals(""String_Node_Str"")) {
      south=Double.parseDouble(tokenizer.nextToken());
    }
 else     if (str.equals(""String_Node_Str"")) {
      south=Double.parseDouble(tokenizer.nextToken());
      yCornerCoordinates=true;
    }
 else     if (str.equals(""String_Node_Str"")) {
      cellSize=Double.parseDouble(tokenizer.nextToken());
    }
 else     if (str.startsWith(""String_Node_Str"")) {
      noDataValue=Float.parseFloat(tokenizer.nextToken());
    }
 else {
      if (xCornerCoordinates) {
        west+=cellSize / 2;
      }
      if (yCornerCoordinates) {
        south+=cellSize / 2;
      }
      return line;
    }
  }
  cols=rows=0;
  west=south=cellSize=Double.NaN;
  return null;
}",0.7257298031228785
140906,"/** 
 * Constructor for the JFrame. Initializes components and sets up the default color gradient.
 * @param model model object
 */
public MainWindow(Model model){
  this.model=model;
  initRecentDocumentsMenu();
  initComponents();
  MenuKeysDispatcher.setupDialogActions(menuBar);
  GUIUtil.zoomMenuCommands(zoomInAction,zoomOutAction,getRootPane());
  progressPanel=new ProgressPanel();
  progressPanel.setOpaque(false);
  setGlassPane(progressPanel);
  progressPanel.setVisible(false);
  TabStop[] tabs=new TabStop[1];
  tabs[0]=new TabStop(80,TabStop.ALIGN_DECIMAL,TabStop.LEAD_NONE);
  TabSet tabset=new TabSet(tabs);
  StyleContext sc=StyleContext.getDefaultStyleContext();
  AttributeSet aset=sc.addAttribute(SimpleAttributeSet.EMPTY,StyleConstants.TabSet,tabset);
  infoTextPane.setParagraphAttributes(aset,false);
  showDebugMenuWhenAssertionsAreEnabled();
  navigableImagePanel.setInfoString(""String_Node_Str"");
  Color focusColor=new Color(190,230,255);
  Border border=javax.swing.BorderFactory.createLineBorder(focusColor,4);
  new FileDrop(null,navigableImagePanel,border,new FileDrop.Listener(){
    @Override public void filesDropped(    java.io.File[] files){
      try {
        int maxNbrFilesToScan=Math.min(files.length,100);
        for (int i=0; i < maxNbrFilesToScan; i++) {
          String filePath=files[i].getCanonicalPath();
          if (EsriASCIIGridReader.canRead(filePath)) {
            openGrid(filePath);
          }
        }
      }
 catch (      IOException ex) {
        ErrorDialog.showErrorDialog(OPEN_ERROR_MESSAGE,""String_Node_Str"",ex,navigableImagePanel.getParent());
      }
    }
  }
);
  navigableImagePanel.addPropertyChangeListener(new PropertyChangeListener(){
    final String outOfGrid=""String_Node_Str"";
    final DecimalFormat valFormat=new DecimalFormat(""String_Node_Str"");
    final DecimalFormat slopeFormat=new DecimalFormat(""String_Node_Str"");
    @Override public void propertyChange(    PropertyChangeEvent evt){
      if (""String_Node_Str"".equals(evt.getPropertyName())) {
        int gridCol=-1, gridRow=-1;
        double x=Double.NaN, y=Double.NaN;
        boolean validXY=false;
        int r=-1, g=-1, b=-1;
        float v=Float.NaN;
        double slope=Double.NaN;
        if (evt.getNewValue() != null && model.hasGrid()) {
          assert(evt.getNewValue() instanceof Point2D.Double);
          Grid grid=model.getGrid();
          Point2D pt=(Point2D.Double)evt.getNewValue();
          double xPerc=pt.getX();
          double yPerc=pt.getY();
          if (xPerc < 0) {
            gridCol=-1;
          }
 else           if (xPerc >= 100) {
            gridCol=grid.getCols() - 1;
          }
 else {
            gridCol=(int)(xPerc / 100 * grid.getCols());
          }
          if (yPerc < 0) {
            gridRow=-1;
          }
 else           if (yPerc >= 100) {
            gridRow=grid.getRows() - 1;
          }
 else {
            gridRow=(int)(yPerc / 100 * grid.getRows());
          }
          x=grid.getWest() + xPerc / 100 * grid.getWidth();
          y=grid.getNorth() - yPerc / 100 * grid.getHeight();
          validXY=Double.isFinite(x) && Double.isFinite(y);
          BufferedImage image=navigableImagePanel.getImage();
          if (image != null) {
            int imageCol=(int)(xPerc / 100 * (image.getWidth() - 1));
            int imageRow=(int)(yPerc / 100 * (image.getHeight() - 1));
            int argb=image.getRGB(imageCol,imageRow);
            Color color=new Color(argb,true);
            r=color.getRed();
            g=color.getGreen();
            b=color.getBlue();
          }
          v=grid.getValue(gridCol,gridRow);
          slope=Math.toDegrees(Math.atan(grid.get8NeighborGradient(gridCol,gridRow)));
        }
        StringBuilder sb=new StringBuilder();
        if (model.isGeneralizing()) {
          sb.append(""String_Node_Str"");
          sb.append(Float.isFinite(v) ? valFormat.format(v) : (validXY ? ""String_Node_Str"" : outOfGrid));
          sb.append(""String_Node_Str"");
          v=model.getFilteredGrid().getValue(gridCol,gridRow);
          sb.append(Float.isFinite(v) ? valFormat.format(v) : (validXY ? ""String_Node_Str"" : outOfGrid));
        }
 else {
          sb.append(""String_Node_Str"");
          sb.append(Float.isFinite(v) ? valFormat.format(v) : (validXY ? ""String_Node_Str"" : outOfGrid));
        }
        if (r >= 0) {
          if (r == g && g == b) {
            sb.append(""String_Node_Str"").append(r);
          }
 else {
            sb.append(""String_Node_Str"").append(r).append(""String_Node_Str"");
            sb.append(g).append(""String_Node_Str"").append(b);
          }
        }
 else {
          boolean rgb=false;
          if (infoTextPane.getText() != null) {
            rgb=infoTextPane.getText().contains(""String_Node_Str"");
          }
          sb.append(""String_Node_Str"").append(rgb ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(outOfGrid);
        }
        sb.append(""String_Node_Str"");
        boolean validSlope=Double.isFinite(slope);
        sb.append(validSlope ? slopeFormat.format(slope) : outOfGrid);
        if (validSlope) {
          sb.append(""String_Node_Str"");
        }
        boolean spherical=model.hasGrid() && model.getGrid().isCellSizeInSphericalCoordinates();
        DecimalFormat xyFormat=validXY ? new DecimalFormat(spherical ? ""String_Node_Str"" : ""String_Node_Str"") : null;
        sb.append(""String_Node_Str"");
        sb.append(xyFormat != null ? xyFormat.format(x) : outOfGrid);
        sb.append(""String_Node_Str"");
        sb.append(xyFormat != null ? xyFormat.format(y) : outOfGrid);
        boolean validCell=model.hasGrid() && gridCol >= 0 && gridCol < model.getGrid().getCols() && gridRow >= 0 && gridRow < model.getGrid().getRows();
        sb.append(""String_Node_Str"").append(validCell ? gridCol + 1 : outOfGrid);
        sb.append(""String_Node_Str"").append(validCell ? gridRow + 1 : outOfGrid);
        infoTextPane.setText(sb.toString());
      }
    }
  }
);
}","/** 
 * Constructor for the JFrame. Initializes components and sets up the default color gradient.
 * @param model model object
 */
public MainWindow(Model model){
  this.model=model;
  initRecentDocumentsMenu();
  initComponents();
  MenuKeysDispatcher.setupDialogActions(menuBar);
  GUIUtil.zoomMenuCommands(zoomInAction,zoomOutAction,getRootPane());
  progressPanel=new ProgressPanel();
  progressPanel.setOpaque(false);
  setGlassPane(progressPanel);
  progressPanel.setVisible(false);
  TabStop[] tabs=new TabStop[1];
  tabs[0]=new TabStop(80,TabStop.ALIGN_DECIMAL,TabStop.LEAD_NONE);
  TabSet tabset=new TabSet(tabs);
  StyleContext sc=StyleContext.getDefaultStyleContext();
  AttributeSet aset=sc.addAttribute(SimpleAttributeSet.EMPTY,StyleConstants.TabSet,tabset);
  infoTextPane.setParagraphAttributes(aset,false);
  showDebugMenuWhenAssertionsAreEnabled();
  navigableImagePanel.setInfoString(""String_Node_Str"");
  Color focusColor=new Color(190,230,255);
  Border border=javax.swing.BorderFactory.createLineBorder(focusColor,4);
  new FileDrop(null,navigableImagePanel,border,new FileDrop.Listener(){
    @Override public void filesDropped(    java.io.File[] files){
      try {
        int maxNbrFilesToScan=Math.min(files.length,100);
        for (int i=0; i < maxNbrFilesToScan; i++) {
          String filePath=files[i].getCanonicalPath();
          if (EsriASCIIGridReader.canRead(filePath)) {
            openGrid(filePath);
          }
        }
      }
 catch (      IOException ex) {
        ErrorDialog.showErrorDialog(OPEN_ERROR_MESSAGE,""String_Node_Str"",ex,navigableImagePanel.getParent());
      }
    }
  }
);
  navigableImagePanel.addPropertyChangeListener(new PropertyChangeListener(){
    final String outOfGrid=""String_Node_Str"";
    final DecimalFormat valFormat=new DecimalFormat(""String_Node_Str"");
    final DecimalFormat slopeFormat=new DecimalFormat(""String_Node_Str"");
    @Override public void propertyChange(    PropertyChangeEvent evt){
      if (""String_Node_Str"".equals(evt.getPropertyName())) {
        int gridCol=-1, gridRow=-1;
        double x=Double.NaN, y=Double.NaN;
        boolean validXY=false;
        int r=-1, g=-1, b=-1;
        float val=Float.NaN, filteredVal=Float.NaN;
        double slope=Double.NaN;
        if (evt.getNewValue() != null && model.hasGrid()) {
          assert(evt.getNewValue() instanceof Point2D.Double);
          Grid grid=model.getGrid();
          Point2D pt=(Point2D.Double)evt.getNewValue();
          double xPerc=pt.getX();
          double yPerc=pt.getY();
          if (xPerc < 0) {
            gridCol=-1;
          }
 else           if (xPerc >= 100) {
            gridCol=grid.getCols() - 1;
          }
 else {
            gridCol=(int)(xPerc / 100 * grid.getCols());
          }
          if (yPerc < 0) {
            gridRow=-1;
          }
 else           if (yPerc >= 100) {
            gridRow=grid.getRows() - 1;
          }
 else {
            gridRow=(int)(yPerc / 100 * grid.getRows());
          }
          x=grid.getWest() + xPerc / 100 * grid.getWidth();
          y=grid.getNorth() - yPerc / 100 * grid.getHeight();
          validXY=Double.isFinite(x) && Double.isFinite(y);
          BufferedImage image=navigableImagePanel.getImage();
          if (image != null) {
            int imageCol=(int)(xPerc / 100 * (image.getWidth() - 1));
            int imageRow=(int)(yPerc / 100 * (image.getHeight() - 1));
            int argb=image.getRGB(imageCol,imageRow);
            Color color=new Color(argb,true);
            r=color.getRed();
            g=color.getGreen();
            b=color.getBlue();
          }
          val=grid.getValue(gridCol,gridRow);
          filteredVal=model.getFilteredGrid().getValue(gridCol,gridRow);
          slope=Math.toDegrees(Math.atan(grid.get8NeighborGradient(gridCol,gridRow)));
        }
        StringBuilder sb=new StringBuilder();
        if (model.isGeneralizing()) {
          sb.append(""String_Node_Str"");
          sb.append(Float.isFinite(val) ? valFormat.format(val) : (validXY ? ""String_Node_Str"" : outOfGrid));
          sb.append(""String_Node_Str"");
          sb.append(Float.isFinite(filteredVal) ? valFormat.format(filteredVal) : (validXY ? ""String_Node_Str"" : outOfGrid));
        }
 else {
          sb.append(""String_Node_Str"");
          sb.append(Float.isFinite(val) ? valFormat.format(val) : (validXY ? ""String_Node_Str"" : outOfGrid));
        }
        if (r >= 0) {
          if (r == g && g == b) {
            sb.append(""String_Node_Str"").append(r);
          }
 else {
            sb.append(""String_Node_Str"").append(r).append(""String_Node_Str"");
            sb.append(g).append(""String_Node_Str"").append(b);
          }
        }
 else {
          boolean rgb=false;
          if (infoTextPane.getText() != null) {
            rgb=infoTextPane.getText().contains(""String_Node_Str"");
          }
          sb.append(""String_Node_Str"").append(rgb ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(outOfGrid);
        }
        sb.append(""String_Node_Str"");
        boolean validSlope=Double.isFinite(slope);
        sb.append(validSlope ? slopeFormat.format(slope) : outOfGrid);
        if (validSlope) {
          sb.append(""String_Node_Str"");
        }
        boolean spherical=model.hasGrid() && model.getGrid().isCellSizeInSphericalCoordinates();
        DecimalFormat xyFormat=validXY ? new DecimalFormat(spherical ? ""String_Node_Str"" : ""String_Node_Str"") : null;
        sb.append(""String_Node_Str"");
        sb.append(xyFormat != null ? xyFormat.format(x) : outOfGrid);
        sb.append(""String_Node_Str"");
        sb.append(xyFormat != null ? xyFormat.format(y) : outOfGrid);
        boolean validCell=model.hasGrid() && gridCol >= 0 && gridCol < model.getGrid().getCols() && gridRow >= 0 && gridRow < model.getGrid().getRows();
        sb.append(""String_Node_Str"").append(validCell ? gridCol + 1 : outOfGrid);
        sb.append(""String_Node_Str"").append(validCell ? gridRow + 1 : outOfGrid);
        infoTextPane.setText(sb.toString());
      }
    }
  }
);
}",0.9762279466578316
140907,"@Override protected void operateCell(Grid src,Grid dst,int col,int row){
  int nCols=src.getCols();
  int nRows=src.getRows();
  if (maskGrid.getValue(col,row) == maskValue) {
    float total=0;
    int counter=0;
    for (int i=0; i < 9; i++) {
      int c=col + DX[i];
      int r=row + DY[i];
      if (c >= 0 && c < nCols && r >= 0 && r < nRows) {
        float v=src.getValue(c,r);
        if (!Float.isNaN(v)) {
          ++counter;
          total+=v;
        }
      }
    }
    dst.setValue(total / counter,col,row);
  }
}","@Override protected void operateCell(Grid src,Grid dst,int col,int row){
  int nCols=src.getCols();
  int nRows=src.getRows();
  if (maskGrid.getValue(col,row) == maskValue) {
    float total=0;
    int counter=0;
    for (int i=0; i < 9; i++) {
      int c=col + DX[i];
      int r=row + DY[i];
      if (c >= 0 && c < nCols && r >= 0 && r < nRows) {
        float v=src.getValue(c,r);
        if (!Float.isNaN(v)) {
          ++counter;
          total+=v;
        }
      }
    }
    dst.setValue(counter == 0 ? Float.NaN : total / counter,col,row);
  }
}",0.975206611570248
140908,"/** 
 * Diffuses the values defined along the lines to the entire destGrid.
 * @param destGrid destination grid
 */
public void diffuse(Grid destGrid){
  float lineValue=0;
  float leftSideMaskValue=1;
  float rightSideMaskValue=2;
  if (lines == null) {
    JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    return;
  }
  Grid linesMaskGrid=Grid.shallowCopy(destGrid);
  linesMaskGrid.fill(Float.NaN);
  drawLinesToGrid(linesMaskGrid,true,lineValue,true);
  int nbrLines=lines.getNumGeometries();
  double west=destGrid.getWest();
  double north=destGrid.getNorth();
  double cellSize=destGrid.getCellSize();
  int nCols=destGrid.getCols();
  int nRows=destGrid.getRows();
  for (int lineID=0; lineID < nbrLines; lineID++) {
    LineString ridgeline=(LineString)lines.getGeometryN(lineID);
    for (int pointID=1; pointID < ridgeline.getNumPoints() - 1; pointID++) {
      Point currentPoint=ridgeline.getPointN(pointID);
      Point nextPoint=ridgeline.getPointN(pointID + 1);
      Point prevPoint=ridgeline.getPointN(pointID - 1);
      float color=leftSideMaskValue;
      final int prevID;
      int currentCol=(int)((currentPoint.getX() - west) / cellSize);
      int currentRow=(int)((north - currentPoint.getY()) / cellSize);
      int nextCol=(int)((nextPoint.getX() - west) / cellSize);
      int nextRow=(int)((north - nextPoint.getY()) / cellSize);
      int prevCol=(int)((prevPoint.getX() - west) / cellSize);
      int prevRow=(int)((north - prevPoint.getY()) / cellSize);
      int dx=prevCol - currentCol;
      int dy=prevRow - currentRow;
      prevID=ID[dy + 1][dx + 1];
      for (int i=prevID + 1; i < prevID + 7; i++) {
        int c=currentCol + DX[i];
        int r=currentRow + DY[i];
        if (c == nextCol && r == nextRow) {
          color=rightSideMaskValue;
        }
 else {
          boolean insideGrid=c >= 0 && r >= 0 && c < nCols && r < nRows;
          if (insideGrid && linesMaskGrid.getValue(c,r) != lineValue) {
            linesMaskGrid.setValue(color,c,r);
          }
        }
      }
    }
  }
  linesMaskGrid=new DilationOperator(leftSideMaskValue).operate(linesMaskGrid);
  linesMaskGrid=new DilationOperator(rightSideMaskValue).operate(linesMaskGrid);
  linesMaskGrid=new DilationOperator(leftSideMaskValue).operate(linesMaskGrid);
  linesMaskGrid=new DilationOperator(rightSideMaskValue).operate(linesMaskGrid);
  linesMaskGrid=new ReplaceValueOperator(lineValue,rightSideMaskValue).operate(linesMaskGrid);
  linesMaskGrid=new DilationOperator(leftSideMaskValue).operate(linesMaskGrid);
  Grid rightSideGrid=Grid.shallowCopy(linesMaskGrid);
  rightSideGrid.fill(Float.NaN);
  drawLinesToGrid(rightSideGrid,false,-1,true);
  Grid leftSideGrid=Grid.shallowCopy(linesMaskGrid);
  leftSideGrid.fill(Float.NaN);
  drawLinesToGrid(leftSideGrid,false,-1,false);
  Grid linesGrid=Grid.shallowCopy(linesMaskGrid);
  linesGrid.fill(Float.NaN);
  new MeanFilter(linesMaskGrid,rightSideMaskValue).operate(rightSideGrid,linesGrid);
  new MeanFilter(linesMaskGrid,leftSideMaskValue).operate(leftSideGrid,linesGrid);
  int smoothingIterations=100;
  linesGrid=new MultigridDiffusor(smoothingIterations).diffuse(linesGrid);
  new CopyOperator().operate(linesGrid,destGrid);
}","/** 
 * Diffuses the values defined along the lines to the entire destGrid.
 * @param destGrid destination grid
 */
public void diffuse(Grid destGrid){
  float lineValue=0;
  float leftSideMaskValue=1;
  float rightSideMaskValue=2;
  if (lines == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Grid linesMaskGrid=Grid.shallowCopy(destGrid);
  linesMaskGrid.fill(Float.NaN);
  drawLinesToGrid(linesMaskGrid,true,lineValue,true);
  int nbrLines=lines.getNumGeometries();
  double west=destGrid.getWest();
  double north=destGrid.getNorth();
  double cellSize=destGrid.getCellSize();
  int nCols=destGrid.getCols();
  int nRows=destGrid.getRows();
  for (int lineID=0; lineID < nbrLines; lineID++) {
    LineString ridgeline=(LineString)lines.getGeometryN(lineID);
    for (int pointID=1; pointID < ridgeline.getNumPoints() - 1; pointID++) {
      Point currentPoint=ridgeline.getPointN(pointID);
      Point nextPoint=ridgeline.getPointN(pointID + 1);
      Point prevPoint=ridgeline.getPointN(pointID - 1);
      float color=leftSideMaskValue;
      final int prevID;
      int currentCol=(int)((currentPoint.getX() - west) / cellSize);
      int currentRow=(int)((north - currentPoint.getY()) / cellSize);
      int nextCol=(int)((nextPoint.getX() - west) / cellSize);
      int nextRow=(int)((north - nextPoint.getY()) / cellSize);
      int prevCol=(int)((prevPoint.getX() - west) / cellSize);
      int prevRow=(int)((north - prevPoint.getY()) / cellSize);
      int dx=prevCol - currentCol;
      int dy=prevRow - currentRow;
      prevID=ID[dy + 1][dx + 1];
      for (int i=prevID + 1; i < prevID + 7; i++) {
        int c=currentCol + DX[i];
        int r=currentRow + DY[i];
        if (c == nextCol && r == nextRow) {
          color=rightSideMaskValue;
        }
 else {
          boolean insideGrid=c >= 0 && r >= 0 && c < nCols && r < nRows;
          if (insideGrid && linesMaskGrid.getValue(c,r) != lineValue) {
            linesMaskGrid.setValue(color,c,r);
          }
        }
      }
    }
  }
  linesMaskGrid=new DilationOperator(leftSideMaskValue).operate(linesMaskGrid);
  linesMaskGrid=new DilationOperator(rightSideMaskValue).operate(linesMaskGrid);
  linesMaskGrid=new DilationOperator(leftSideMaskValue).operate(linesMaskGrid);
  linesMaskGrid=new DilationOperator(rightSideMaskValue).operate(linesMaskGrid);
  linesMaskGrid=new ReplaceValueOperator(lineValue,rightSideMaskValue).operate(linesMaskGrid);
  linesMaskGrid=new DilationOperator(leftSideMaskValue).operate(linesMaskGrid);
  Grid rightSideGrid=Grid.shallowCopy(linesMaskGrid);
  rightSideGrid.fill(Float.NaN);
  drawLinesToGrid(rightSideGrid,false,-1,true);
  Grid leftSideGrid=Grid.shallowCopy(linesMaskGrid);
  leftSideGrid.fill(Float.NaN);
  drawLinesToGrid(leftSideGrid,false,-1,false);
  Grid linesGrid=Grid.shallowCopy(linesMaskGrid);
  linesGrid.fill(Float.NaN);
  new MeanFilter(linesMaskGrid,rightSideMaskValue).operate(rightSideGrid,linesGrid);
  new MeanFilter(linesMaskGrid,leftSideMaskValue).operate(leftSideGrid,linesGrid);
  int smoothingIterations=100;
  linesGrid=new MultigridDiffusor(smoothingIterations).diffuse(linesGrid);
  new CopyOperator().operate(linesGrid,destGrid);
}",0.98114956736712
140909,"@Override protected float valueForPoint(LineString line,int pointID,boolean rightSide){
  double illuminationAngle=illuminationDirection(line,pointID);
  double illuminationX=Math.cos(illuminationAngle);
  double illuminationY=Math.sin(illuminationAngle);
  if (pointID == line.getNumPoints() - 1) {
    pointID--;
  }
  Point p1=line.getPointN(pointID);
  Point p2=line.getPointN(pointID + 1);
  double dx=p2.getX() - p1.getX();
  double dy=p2.getY() - p1.getY();
  double length=Math.sqrt(dx * dx + dy * dy);
  double dirX=dx / length;
  double dirY=dy / length;
  if (Double.isNaN(dirX) || Double.isNaN(dirY)) {
    return Float.NaN;
  }
  double temp=dx;
  if (rightSide) {
    dx=-dy;
    dy=temp;
  }
 else {
    dx=dy;
    dy=-temp;
  }
  double cosAngle=(dx * illuminationX) + (dy * illuminationY);
  double aspectShade=(cosAngle + 1) / 2;
  int gray=(int)Math.round(255 * aspectShade);
  Number ridgeLineFlag=line.getAttribute(""String_Node_Str"");
  if (ridgeLineFlag != null) {
    gray=255 - gray;
  }
  return gray;
}","@Override protected float valueForPoint(LineString line,int pointID,boolean rightSide){
  double illuminationAngle=illuminationDirection(line,pointID);
  double illuminationX=Math.cos(illuminationAngle);
  double illuminationY=Math.sin(illuminationAngle);
  if (pointID == line.getNumPoints() - 1) {
    pointID--;
  }
  Point p1=line.getPointN(pointID);
  Point p2=line.getPointN(pointID + 1);
  double dx=p2.getX() - p1.getX();
  double dy=p2.getY() - p1.getY();
  double length=Math.sqrt(dx * dx + dy * dy);
  double dirX=dx / length;
  double dirY=dy / length;
  if (Double.isNaN(dirX) || Double.isNaN(dirY)) {
    return Float.NaN;
  }
  double temp=dirX;
  if (rightSide) {
    dirX=-dirY;
    dirY=temp;
  }
 else {
    dirX=dirY;
    dirY=-temp;
  }
  double cosAngle=(dirX * illuminationX) + (dirY * illuminationY);
  double aspectShade=(cosAngle + 1) / 2;
  int gray=(int)Math.round(255 * aspectShade);
  Number ridgeLineFlag=line.getAttribute(""String_Node_Str"");
  if (ridgeLineFlag != null) {
    gray=255 - gray;
  }
  return gray;
}",0.9672131147540984
140910,"/** 
 * Write an image to a file using the fileFormat at filePath. Also writes a world file and a projection file. This is called by doInBackground, so derived classes must not access the Event Dispatching Thread.
 * @param image image to write
 * @param grid a world file will be written such that the image covers thearea of this grid.
 * @throws Exception typically an IOException when the file cannot bewritten.
 */
protected void writeImage(BufferedImage image,Grid grid) throws Exception {
  File file=null;
  try {
    setIndeterminate(true);
    String fileName=FileUtils.getFileName(filePath);
    setMessage(""String_Node_Str"" + fileName + ""String_Node_Str"");
    file=new File(filePath);
    ImageIO.write(image,fileFormat,file);
    String worldFilePath=WorldFileExporter.constructPath(filePath);
    double cellSize=grid.getCellSize();
    double west=grid.getWest() - cellSize / 2;
    double north=grid.getNorth() + cellSize / 2;
    WorldFileExporter.writeWorldFile(worldFilePath,cellSize,west,north);
    WKTProjectionFile.write(grid.getPrjFileContent(),filePath);
  }
 catch (  IOException exc) {
    if (file != null && file.exists()) {
      file.delete();
    }
    throw exc;
  }
}","/** 
 * Write an image to a file using the fileFormat at filePath. Also writes a world file and a projection file. This is called by doInBackground, so the method is final such that derived classes do not access the Event Dispatching Thread.
 * @param image image to write
 * @param grid a world file will be written such that the image covers thearea of this grid.
 * @throws Exception typically an IOException when the file cannot bewritten.
 */
final protected void writeImage(BufferedImage image,Grid grid) throws Exception {
  File file=null;
  try {
    setIndeterminate(true);
    String fileName=FileUtils.getFileName(filePath);
    setMessage(""String_Node_Str"" + fileName + ""String_Node_Str"");
    file=new File(filePath);
    ImageIO.write(image,fileFormat,file);
    String worldFilePath=WorldFileExporter.constructPath(filePath);
    double cellSize=grid.getCellSize();
    double west=grid.getWest() - cellSize / 2;
    double north=grid.getNorth() + cellSize / 2;
    WorldFileExporter.writeWorldFile(worldFilePath,cellSize,west,north);
    WKTProjectionFile.write(grid.getPrjFileContent(),filePath);
  }
 catch (  IOException exc) {
    if (file != null && file.exists()) {
      file.delete();
    }
    throw exc;
  }
}",0.9827727645611156
140911,"/** 
 * Constructor for the JFrame. Initializes components and sets up the default color gradient.
 * @param model model object
 */
public MainWindow(Model model){
  this.model=model;
  initRecentDocumentsMenu();
  initComponents();
  MenuKeysDispatcher.setupDialogActions(menuBar);
  GUIUtil.zoomMenuCommands(zoomInAction,zoomOutAction,getRootPane());
  progressPanel=new ProgressPanel();
  progressPanel.setOpaque(false);
  setGlassPane(progressPanel);
  progressPanel.setVisible(false);
  TabStop[] tabs=new TabStop[1];
  tabs[0]=new TabStop(80,TabStop.ALIGN_DECIMAL,TabStop.LEAD_NONE);
  TabSet tabset=new TabSet(tabs);
  StyleContext sc=StyleContext.getDefaultStyleContext();
  AttributeSet aset=sc.addAttribute(SimpleAttributeSet.EMPTY,StyleConstants.TabSet,tabset);
  infoTextPane.setParagraphAttributes(aset,false);
  showDebugMenuWhenAssertionsAreEnabled();
  navigableImagePanel.setInfoString(""String_Node_Str"");
  Color focusColor=new Color(190,230,255);
  Border border=javax.swing.BorderFactory.createLineBorder(focusColor,4);
  new FileDrop(null,navigableImagePanel,border,new FileDrop.Listener(){
    @Override public void filesDropped(    java.io.File[] files){
      try {
        int maxNbrFilesToScan=Math.min(files.length,100);
        for (int i=0; i < maxNbrFilesToScan; i++) {
          String filePath=files[i].getCanonicalPath();
          if (EsriASCIIGridReader.canRead(filePath)) {
            openGrid(filePath);
          }
        }
      }
 catch (      IOException ex) {
        ErrorDialog.showErrorDialog(OPEN_ERROR_MESSAGE,""String_Node_Str"",ex,navigableImagePanel.getParent());
      }
    }
  }
);
  navigableImagePanel.addPropertyChangeListener(new PropertyChangeListener(){
    final String outOfGrid=""String_Node_Str"";
    final DecimalFormat valFormat=new DecimalFormat(""String_Node_Str"");
    final DecimalFormat slopeFormat=new DecimalFormat(""String_Node_Str"");
    @Override public void propertyChange(    PropertyChangeEvent evt){
      if (""String_Node_Str"".equals(evt.getPropertyName())) {
        int gridCol=-1, gridRow=-1;
        double x=Double.NaN, y=Double.NaN;
        boolean validXY=false;
        int r=-1, g=-1, b=-1;
        float v=Float.NaN;
        double slope=Double.NaN;
        if (evt.getNewValue() != null && model.hasGrid()) {
          assert(evt.getNewValue() instanceof Point2D.Double);
          Grid grid=model.getGrid();
          Point2D pt=(Point2D.Double)evt.getNewValue();
          double xPerc=pt.getX();
          double yPerc=pt.getY();
          gridCol=(int)(xPerc / 100 * (grid.getCols() - 1));
          gridRow=(int)(yPerc / 100 * (grid.getRows() - 1));
          x=grid.getWest() + xPerc / 100 * grid.getWidth();
          y=grid.getNorth() - yPerc / 100 * grid.getHeight();
          validXY=Double.isFinite(x) && Double.isFinite(y);
          BufferedImage image=navigableImagePanel.getImage();
          if (image != null) {
            int imageCol=(int)(xPerc / 100 * (image.getWidth() - 1));
            int imageRow=(int)(yPerc / 100 * (image.getHeight() - 1));
            int argb=image.getRGB(imageCol,imageRow);
            Color color=new Color(argb,true);
            r=color.getRed();
            g=color.getGreen();
            b=color.getBlue();
          }
          v=grid.getValue(gridCol,gridRow);
          slope=Math.toDegrees(Math.atan(grid.get8NeighborGradient(gridCol,gridRow)));
        }
        StringBuilder sb=new StringBuilder();
        if (model.isGeneralizing()) {
          sb.append(""String_Node_Str"");
          sb.append(Float.isFinite(v) ? valFormat.format(v) : (validXY ? ""String_Node_Str"" : outOfGrid));
          sb.append(""String_Node_Str"");
          v=model.getFilteredGrid().getValue(gridCol,gridRow);
          sb.append(Float.isFinite(v) ? valFormat.format(v) : (validXY ? ""String_Node_Str"" : outOfGrid));
        }
 else {
          sb.append(""String_Node_Str"");
          sb.append(Float.isFinite(v) ? valFormat.format(v) : (validXY ? ""String_Node_Str"" : outOfGrid));
        }
        if (r >= 0) {
          if (r == g && g == b) {
            sb.append(""String_Node_Str"").append(r);
          }
 else {
            sb.append(""String_Node_Str"").append(r).append(""String_Node_Str"");
            sb.append(g).append(""String_Node_Str"").append(b);
          }
        }
 else {
          boolean rgb=false;
          if (infoTextPane.getText() != null) {
            rgb=infoTextPane.getText().contains(""String_Node_Str"");
          }
          sb.append(""String_Node_Str"").append(rgb ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(outOfGrid);
        }
        sb.append(""String_Node_Str"");
        boolean validSlope=Double.isFinite(slope);
        sb.append(validSlope ? slopeFormat.format(slope) : outOfGrid);
        if (validSlope) {
          sb.append(""String_Node_Str"");
        }
        boolean spherical=model.hasGrid() && model.getGrid().isCellSizeInSphericalCoordinates();
        DecimalFormat xyFormat=validXY ? new DecimalFormat(spherical ? ""String_Node_Str"" : ""String_Node_Str"") : null;
        sb.append(""String_Node_Str"");
        sb.append(xyFormat != null ? xyFormat.format(x) : outOfGrid);
        sb.append(""String_Node_Str"");
        sb.append(xyFormat != null ? xyFormat.format(y) : outOfGrid);
        boolean validCell=model.hasGrid() && gridCol >= 0 && gridCol < model.getGrid().getCols() && gridRow >= 0 && gridRow < model.getGrid().getRows();
        sb.append(""String_Node_Str"").append(validCell ? gridCol + 1 : outOfGrid);
        sb.append(""String_Node_Str"").append(validCell ? gridRow + 1 : outOfGrid);
        infoTextPane.setText(sb.toString());
      }
    }
  }
);
}","/** 
 * Constructor for the JFrame. Initializes components and sets up the default color gradient.
 * @param model model object
 */
public MainWindow(Model model){
  this.model=model;
  initRecentDocumentsMenu();
  initComponents();
  MenuKeysDispatcher.setupDialogActions(menuBar);
  GUIUtil.zoomMenuCommands(zoomInAction,zoomOutAction,getRootPane());
  progressPanel=new ProgressPanel();
  progressPanel.setOpaque(false);
  setGlassPane(progressPanel);
  progressPanel.setVisible(false);
  TabStop[] tabs=new TabStop[1];
  tabs[0]=new TabStop(80,TabStop.ALIGN_DECIMAL,TabStop.LEAD_NONE);
  TabSet tabset=new TabSet(tabs);
  StyleContext sc=StyleContext.getDefaultStyleContext();
  AttributeSet aset=sc.addAttribute(SimpleAttributeSet.EMPTY,StyleConstants.TabSet,tabset);
  infoTextPane.setParagraphAttributes(aset,false);
  showDebugMenuWhenAssertionsAreEnabled();
  navigableImagePanel.setInfoString(""String_Node_Str"");
  Color focusColor=new Color(190,230,255);
  Border border=javax.swing.BorderFactory.createLineBorder(focusColor,4);
  new FileDrop(null,navigableImagePanel,border,new FileDrop.Listener(){
    @Override public void filesDropped(    java.io.File[] files){
      try {
        int maxNbrFilesToScan=Math.min(files.length,100);
        for (int i=0; i < maxNbrFilesToScan; i++) {
          String filePath=files[i].getCanonicalPath();
          if (EsriASCIIGridReader.canRead(filePath)) {
            openGrid(filePath);
          }
        }
      }
 catch (      IOException ex) {
        ErrorDialog.showErrorDialog(OPEN_ERROR_MESSAGE,""String_Node_Str"",ex,navigableImagePanel.getParent());
      }
    }
  }
);
  navigableImagePanel.addPropertyChangeListener(new PropertyChangeListener(){
    final String outOfGrid=""String_Node_Str"";
    final DecimalFormat valFormat=new DecimalFormat(""String_Node_Str"");
    final DecimalFormat slopeFormat=new DecimalFormat(""String_Node_Str"");
    @Override public void propertyChange(    PropertyChangeEvent evt){
      if (""String_Node_Str"".equals(evt.getPropertyName())) {
        int gridCol=-1, gridRow=-1;
        double x=Double.NaN, y=Double.NaN;
        boolean validXY=false;
        int r=-1, g=-1, b=-1;
        float v=Float.NaN;
        double slope=Double.NaN;
        if (evt.getNewValue() != null && model.hasGrid()) {
          assert(evt.getNewValue() instanceof Point2D.Double);
          Grid grid=model.getGrid();
          Point2D pt=(Point2D.Double)evt.getNewValue();
          double xPerc=pt.getX();
          double yPerc=pt.getY();
          if (xPerc < 0) {
            gridCol=-1;
          }
 else           if (xPerc >= 100) {
            gridCol=grid.getCols() - 1;
          }
 else {
            gridCol=(int)(xPerc / 100 * grid.getCols());
          }
          if (yPerc < 0) {
            gridRow=-1;
          }
 else           if (yPerc >= 100) {
            gridRow=grid.getRows() - 1;
          }
 else {
            gridRow=(int)(yPerc / 100 * grid.getRows());
          }
          x=grid.getWest() + xPerc / 100 * grid.getWidth();
          y=grid.getNorth() - yPerc / 100 * grid.getHeight();
          validXY=Double.isFinite(x) && Double.isFinite(y);
          BufferedImage image=navigableImagePanel.getImage();
          if (image != null) {
            int imageCol=(int)(xPerc / 100 * (image.getWidth() - 1));
            int imageRow=(int)(yPerc / 100 * (image.getHeight() - 1));
            int argb=image.getRGB(imageCol,imageRow);
            Color color=new Color(argb,true);
            r=color.getRed();
            g=color.getGreen();
            b=color.getBlue();
          }
          v=grid.getValue(gridCol,gridRow);
          slope=Math.toDegrees(Math.atan(grid.get8NeighborGradient(gridCol,gridRow)));
        }
        StringBuilder sb=new StringBuilder();
        if (model.isGeneralizing()) {
          sb.append(""String_Node_Str"");
          sb.append(Float.isFinite(v) ? valFormat.format(v) : (validXY ? ""String_Node_Str"" : outOfGrid));
          sb.append(""String_Node_Str"");
          v=model.getFilteredGrid().getValue(gridCol,gridRow);
          sb.append(Float.isFinite(v) ? valFormat.format(v) : (validXY ? ""String_Node_Str"" : outOfGrid));
        }
 else {
          sb.append(""String_Node_Str"");
          sb.append(Float.isFinite(v) ? valFormat.format(v) : (validXY ? ""String_Node_Str"" : outOfGrid));
        }
        if (r >= 0) {
          if (r == g && g == b) {
            sb.append(""String_Node_Str"").append(r);
          }
 else {
            sb.append(""String_Node_Str"").append(r).append(""String_Node_Str"");
            sb.append(g).append(""String_Node_Str"").append(b);
          }
        }
 else {
          boolean rgb=false;
          if (infoTextPane.getText() != null) {
            rgb=infoTextPane.getText().contains(""String_Node_Str"");
          }
          sb.append(""String_Node_Str"").append(rgb ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(outOfGrid);
        }
        sb.append(""String_Node_Str"");
        boolean validSlope=Double.isFinite(slope);
        sb.append(validSlope ? slopeFormat.format(slope) : outOfGrid);
        if (validSlope) {
          sb.append(""String_Node_Str"");
        }
        boolean spherical=model.hasGrid() && model.getGrid().isCellSizeInSphericalCoordinates();
        DecimalFormat xyFormat=validXY ? new DecimalFormat(spherical ? ""String_Node_Str"" : ""String_Node_Str"") : null;
        sb.append(""String_Node_Str"");
        sb.append(xyFormat != null ? xyFormat.format(x) : outOfGrid);
        sb.append(""String_Node_Str"");
        sb.append(xyFormat != null ? xyFormat.format(y) : outOfGrid);
        boolean validCell=model.hasGrid() && gridCol >= 0 && gridCol < model.getGrid().getCols() && gridRow >= 0 && gridRow < model.getGrid().getRows();
        sb.append(""String_Node_Str"").append(validCell ? gridCol + 1 : outOfGrid);
        sb.append(""String_Node_Str"").append(validCell ? gridRow + 1 : outOfGrid);
        infoTextPane.setText(sb.toString());
      }
    }
  }
);
}",0.9056021929073154
140912,"protected void updateGUI(){
  updateLICSharpeningSliderLabels(licNormalsSharpeningLimitSlider,licNormalsSharpeningLimitLabel);
  updateLICSharpeningSliderLabels(licHeightsSharpeningLimitSlider,licHeightsSharpeningLimitLabel);
  flatAreasSlopeSlider.setValue((int)Math.round(model.flatAreasMinSlope * 10));
  flatAreasMinAreaSizeSpinner.setValue(model.flatAreasMinSize);
  flatAreasMaxHolesSizeSpinner.setValue(model.flatAreasMaxHolesSize);
  flatAreasBreachFillingIterationsSpinner.setValue(model.flatAreasBreachFillingIterations);
  flatAreasColorButton.setColor(new Color(model.flatAreasARGB,true));
  licNormalsFilterSizeSlider.setValue((int)Math.round(model.licNormalsFilterSize * 20));
  licNormalsIterationsSlider.setValue(model.licNormalsIterations);
  licNormalsCarvingSlider.setValue(model.licNormalsCarving);
  licNormalsBlurSlider.setValue((int)Math.round(model.licNormalsGaussianBlurRadius));
  licNormalsSharpeningSlider.setValue((int)Math.round(model.licNormalsSharpening * 100));
  licNormalsSharpeningLimitSlider.setValue((int)Math.round(model.getLicNormalsSharpeningLimit() * 100));
  licNormals4NeighborsRadioButton.setSelected(model.licNormalsNeighbors == Model.LICNeighbors.LIC_4);
  licNormalsLowQualityRadioButton.setSelected(model.licNormalsBoxFilter);
  licNormalsShowFlatAreasCheckBox.setSelected(model.foregroundVisualization == Model.ForegroundVisualization.FLAT_AREAS_MASK);
  licNormalsFlatAreasCheckBox.setSelected(model.licNormalsApplyFlatAreasMask);
  licHeightsFilterSizeSlider.setValue((int)Math.round(model.licHeightsFilterSize * 20));
  licHeightsIterationsSlider.setValue(model.licHeightsIterations);
  licHeightsBlurSlider.setValue((int)Math.round(model.licHeightsGaussianBlurRadius));
  licHeightsSharpeningSlider.setValue((int)Math.round(model.licHeightsSharpening * 100));
  licHeightsSharpeningLimitSlider.setValue((int)Math.round(model.licHeightsSharpeningLimit * 100));
  generalizationGaussianBlurRadiusSlider.setValue((int)Math.round(model.generalizationGaussianBlurRadius * 10));
  azimuthSlider.setValue(model.getAzimuth());
  localIlluminationCheckBox.setSelected(model.isLocalLightDirection());
  zenithSlider.setValue(model.zenith);
  ambientLightSlider.setValue((int)Math.round(model.ambientLight * 100));
  localIlluminationLevelOfDetailSlider.setValue((int)Math.round(model.getMaxBranchLengthThreshold()) * 1000);
  localIlluminationDouglasPeuckerToleranceSlider.setValue((int)Math.round(model.getDouglasPeuckerTolerancePx()));
  localIlluminationMaxAdjustmentSlider.setValue((int)Math.round(model.getLocalLightDirectionMaxAdjustmentDeg()));
  localIlluminationMinLineLengthSlider.setValue(model.getLocalLightDirectionMinLineLengthPx());
switch (model.foregroundVisualization) {
case NONE:
    overlayComboBox.setSelectedIndex(0);
  break;
case FLAT_AREAS_MASK:
overlayComboBox.setSelectedIndex(1);
break;
case ILLUMINATED_CONTOURS:
overlayComboBox.setSelectedIndex(2);
break;
case SHADED_CONTOURS:
overlayComboBox.setSelectedIndex(3);
break;
}
contoursShadowLineWidthHighValueField.setValue(model.contoursShadowWidthHigh);
contoursShadowLineWidthLowValueField.setValue(model.contoursShadowWidthLow);
contoursIlluminatedLineWidthHighValueField.setValue(model.contoursIlluminatedWidthHigh);
contoursIlluminatedLineWidthLowValueField.setValue(model.contoursIlluminatedWidthLow);
contoursMinLineWidthSlider.setValue((int)Math.round(model.contoursMinWidth * 10));
contoursMinDistanceSlider.setValue((int)Math.round(model.contoursMinDist * 10));
contoursGradientSlider.setValue(model.contoursGradientAngle);
contoursIntervalTextBox.setValue(model.contoursInterval);
contoursDespeckleSlider.setValue((int)Math.round(model.contoursAspectGaussBlur * 20D));
contoursTransitionSlider.setValue(model.contoursTransitionAngle);
verticalExaggerationFormattedTextField.setValue(model.shadingVerticalExaggeration);
colorGradientSlider.setValues(model.colorRamp.colorPositions,model.colorRamp.colors);
solidColorButton.setColor(model.solidColor);
planObliqueSlider.setValue(model.planObliqueAngle);
int nbrLaplacianBands=model.getLaplacianBandsCount();
localGridHighPassSlider.setEnabled(nbrLaplacianBands > 0);
if (nbrLaplacianBands > 0) {
localGridHighPassSlider.setMaximum(nbrLaplacianBands * 10);
java.util.Hashtable labels=localGridHighPassSlider.createStandardLabels(10);
java.util.Enumeration e=labels.elements();
while (e.hasMoreElements()) {
javax.swing.JComponent comp=(javax.swing.JComponent)e.nextElement();
if (comp instanceof javax.swing.JLabel) {
javax.swing.JLabel label=(javax.swing.JLabel)(comp);
String str=Integer.toString(Integer.parseInt(label.getText()) / 10);
label.setText(str);
}
}
localGridHighPassSlider.setLabelTable(labels);
}
localGridHighPassSlider.setValue((int)Math.round(model.getLocalGridHighPassWeight() * 10));
localGridStandardDeviationFilterSizeSlider.setValue(model.getLocalGridStandardDeviationLevels());
colorPopupMenu.removeAll();
for (ColorRamp cr : model.predefinedColorRamps) {
JMenuItem colorMenuItem=new JMenuItem(cr.name);
colorMenuItem.addActionListener(new java.awt.event.ActionListener(){
@Override public void actionPerformed(java.awt.event.ActionEvent evt){
JMenuItem menuItem=(JMenuItem)evt.getSource();
model.selectColorRamp(menuItem.getText());
colorGradientSlider.setValues(model.colorRamp.colorPositions,model.colorRamp.colors);
renderImage(REGULAR);
}
}
);
colorPopupMenu.add(colorMenuItem);
}
contoursIlluminatedColorButton.setColor(new Color(model.contoursIlluminatedColor));
contoursShadowedColorButton.setColor(new Color(model.contoursShadowedColor));
int exp=(int)Math.round(model.getColorLUTRenderer().getExponentP() * 10);
idwExponentSlider.setValue(exp);
idwRadioButton.setSelected(model.getColorLUTRenderer().isUseIDW());
if (model.getGeneralization() == Model.Generalization.EQUALIZER) {
Component[] sliders=equalizerSlidersPanel.getComponents();
int nbrSliders=sliders.length;
int nbrBands=model.getLaplacianBandsCount();
for (int i=0; i < nbrSliders; i++) {
JSlider slider=(JSlider)sliders[i];
slider.setEnabled(i < nbrBands);
if (i >= nbrBands) {
setSliderValueWithoutTriggeringEvent(slider,100);
}
}
}
updateVisualizationPanelsVisibility();
updateFilterPanelsVisibility();
}","protected void updateGUI(){
  updateLICSharpeningSliderLabels(licNormalsSharpeningLimitSlider,licNormalsSharpeningLimitLabel);
  updateLICSharpeningSliderLabels(licHeightsSharpeningLimitSlider,licHeightsSharpeningLimitLabel);
  flatAreasSlopeSlider.setValue((int)Math.round(model.flatAreasMinSlope * 10));
  flatAreasMinAreaSizeSpinner.setValue(model.flatAreasMinSize);
  flatAreasMaxHolesSizeSpinner.setValue(model.flatAreasMaxHolesSize);
  flatAreasBreachFillingIterationsSpinner.setValue(model.flatAreasBreachFillingIterations);
  flatAreasColorButton.setColor(new Color(model.flatAreasARGB,true));
  licNormalsFilterSizeSlider.setValue((int)Math.round(model.licNormalsFilterSize * 20));
  licNormalsIterationsSlider.setValue(model.licNormalsIterations);
  licNormalsCarvingSlider.setValue(model.licNormalsCarving);
  licNormalsBlurSlider.setValue((int)Math.round(model.licNormalsGaussianBlurRadius));
  licNormalsSharpeningSlider.setValue((int)Math.round(model.licNormalsSharpening * 100));
  licNormalsSharpeningLimitSlider.setValue((int)Math.round(model.getLicNormalsSharpeningLimit() * 100));
  licNormals4NeighborsRadioButton.setSelected(model.licNormalsNeighbors == Model.LICNeighbors.LIC_4);
  licNormalsLowQualityRadioButton.setSelected(model.licNormalsBoxFilter);
  licNormalsShowFlatAreasCheckBox.setSelected(model.foregroundVisualization == Model.ForegroundVisualization.FLAT_AREAS_MASK);
  licNormalsFlatAreasCheckBox.setSelected(model.licNormalsApplyFlatAreasMask);
  licHeightsFilterSizeSlider.setValue((int)Math.round(model.licHeightsFilterSize * 20));
  licHeightsIterationsSlider.setValue(model.licHeightsIterations);
  licHeightsBlurSlider.setValue((int)Math.round(model.licHeightsGaussianBlurRadius));
  licHeightsSharpeningSlider.setValue((int)Math.round(model.licHeightsSharpening * 100));
  licHeightsSharpeningLimitSlider.setValue((int)Math.round(model.licHeightsSharpeningLimit * 100));
  generalizationGaussianBlurRadiusSlider.setValue((int)Math.round(model.generalizationGaussianBlurRadius * 10));
  azimuthSlider.setValue(model.getAzimuth());
  localIlluminationCheckBox.setSelected(model.isLocalLightDirection());
  zenithSlider.setValue(model.zenith);
  ambientLightSlider.setValue((int)Math.round(model.ambientLight * 100));
  localIlluminationLevelOfDetailSlider.setValue((int)Math.round(model.getMaxBranchLengthThreshold() * 1000));
  localIlluminationDouglasPeuckerToleranceSlider.setValue((int)Math.round(model.getDouglasPeuckerTolerancePx()));
  localIlluminationMaxAdjustmentSlider.setValue((int)Math.round(model.getLocalLightDirectionMaxAdjustmentDeg()));
  localIlluminationMinLineLengthSlider.setValue(model.getLocalLightDirectionMinLineLengthPx());
switch (model.foregroundVisualization) {
case NONE:
    overlayComboBox.setSelectedIndex(0);
  break;
case FLAT_AREAS_MASK:
overlayComboBox.setSelectedIndex(1);
break;
case ILLUMINATED_CONTOURS:
overlayComboBox.setSelectedIndex(2);
break;
case SHADED_CONTOURS:
overlayComboBox.setSelectedIndex(3);
break;
}
contoursShadowLineWidthHighValueField.setValue(model.contoursShadowWidthHigh);
contoursShadowLineWidthLowValueField.setValue(model.contoursShadowWidthLow);
contoursIlluminatedLineWidthHighValueField.setValue(model.contoursIlluminatedWidthHigh);
contoursIlluminatedLineWidthLowValueField.setValue(model.contoursIlluminatedWidthLow);
contoursMinLineWidthSlider.setValue((int)Math.round(model.contoursMinWidth * 10));
contoursMinDistanceSlider.setValue((int)Math.round(model.contoursMinDist * 10));
contoursGradientSlider.setValue(model.contoursGradientAngle);
contoursIntervalTextBox.setValue(model.contoursInterval);
contoursDespeckleSlider.setValue((int)Math.round(model.contoursAspectGaussBlur * 20D));
contoursTransitionSlider.setValue(model.contoursTransitionAngle);
verticalExaggerationFormattedTextField.setValue(model.shadingVerticalExaggeration);
colorGradientSlider.setValues(model.colorRamp.colorPositions,model.colorRamp.colors);
solidColorButton.setColor(model.solidColor);
planObliqueSlider.setValue(model.planObliqueAngle);
int nbrLaplacianBands=model.getLaplacianBandsCount();
localGridHighPassSlider.setEnabled(nbrLaplacianBands > 0);
if (nbrLaplacianBands > 0) {
localGridHighPassSlider.setMaximum(nbrLaplacianBands * 10);
java.util.Hashtable labels=localGridHighPassSlider.createStandardLabels(10);
java.util.Enumeration e=labels.elements();
while (e.hasMoreElements()) {
javax.swing.JComponent comp=(javax.swing.JComponent)e.nextElement();
if (comp instanceof javax.swing.JLabel) {
javax.swing.JLabel label=(javax.swing.JLabel)(comp);
String str=Integer.toString(Integer.parseInt(label.getText()) / 10);
label.setText(str);
}
}
localGridHighPassSlider.setLabelTable(labels);
}
localGridHighPassSlider.setValue((int)Math.round(model.getLocalGridHighPassWeight() * 10));
localGridStandardDeviationFilterSizeSlider.setValue(model.getLocalGridStandardDeviationLevels());
colorPopupMenu.removeAll();
for (ColorRamp cr : model.predefinedColorRamps) {
JMenuItem colorMenuItem=new JMenuItem(cr.name);
colorMenuItem.addActionListener(new java.awt.event.ActionListener(){
@Override public void actionPerformed(java.awt.event.ActionEvent evt){
JMenuItem menuItem=(JMenuItem)evt.getSource();
model.selectColorRamp(menuItem.getText());
colorGradientSlider.setValues(model.colorRamp.colorPositions,model.colorRamp.colors);
renderImage(REGULAR);
}
}
);
colorPopupMenu.add(colorMenuItem);
}
contoursIlluminatedColorButton.setColor(new Color(model.contoursIlluminatedColor));
contoursShadowedColorButton.setColor(new Color(model.contoursShadowedColor));
int exp=(int)Math.round(model.getColorLUTRenderer().getExponentP() * 10);
idwExponentSlider.setValue(exp);
idwRadioButton.setSelected(model.getColorLUTRenderer().isUseIDW());
if (model.getGeneralization() == Model.Generalization.EQUALIZER) {
Component[] sliders=equalizerSlidersPanel.getComponents();
int nbrSliders=sliders.length;
int nbrBands=model.getLaplacianBandsCount();
for (int i=0; i < nbrSliders; i++) {
JSlider slider=(JSlider)sliders[i];
slider.setEnabled(i < nbrBands);
if (i >= nbrBands) {
setSliderValueWithoutTriggeringEvent(slider,100);
}
}
}
updateVisualizationPanelsVisibility();
updateFilterPanelsVisibility();
}",0.9998383446492078
140913,"/** 
 * Bilinear interpolation. See http://www.geovista.psu.edu/sites/geocomp99/Gc99/082/gc_082.htm ""What's the point? Interpolation and extrapolation with a regular grid DEM""
 * @param x horizontal coordinate
 * @param y vertical coordinate
 * @return interpolated value
 */
public final float getBilinearInterpol(double x,double y){
  float h1, h2, h3, h4;
  final int rows=grid.length;
  final int cols=grid[0].length;
  final double north=south + (rows - 1) * cellSize;
  final double dx=(x - west) / cellSize;
  final int col=(int)(dx);
  final int row=(int)((north - y) / cellSize);
  if (col < 0 || col > cols - 1 || row < 0 || row > rows - 1) {
    return Float.NaN;
  }
  if (col == cols - 1) {
    if (row == rows - 1) {
      return grid[rows - 1][cols - 1];
    }
    return verticalBilinearInterpol(y,row,col);
  }
  if (row == rows - 1) {
    float leftH=grid[row][col];
    float rightH=grid[row][col + 1];
    return (float)(dx * (rightH - leftH) + leftH);
  }
  final double relX=dx - col;
  final double relY=(y - south) / cellSize - rows + row + 2;
  h1=grid[row + 1][col];
  h2=grid[row + 1][col + 1];
  h3=grid[row][col];
  h4=grid[row][col + 1];
  return (float)(h1 + (h2 - h1) * relX + (h3 - h1) * relY + (h1 - h2 - h3 + h4) * relX * relY);
}","/** 
 * Bilinear interpolation. See http://www.geovista.psu.edu/sites/geocomp99/Gc99/082/gc_082.htm ""What's the point? Interpolation and extrapolation with a regular grid DEM""
 * @param x horizontal coordinate
 * @param y vertical coordinate
 * @return interpolated value
 */
public final float getBilinearInterpol(double x,double y){
  float h1, h2, h3, h4;
  final int rows=grid.length;
  final int cols=grid[0].length;
  final double north=south + (rows - 1) * cellSize;
  final double dx=(x - west) / cellSize;
  final int col=(int)(dx);
  final int row=(int)((north - y) / cellSize);
  if (col < 0 || col > cols - 1 || row < 0 || row > rows - 1) {
    return Float.NaN;
  }
  if (col == cols - 1) {
    if (row == rows - 1) {
      return grid[rows - 1][cols - 1];
    }
    return verticalBilinearInterpol(y,row,col);
  }
  if (row == rows - 1) {
    float leftH=grid[row][col];
    float rightH=grid[row][col + 1];
    return (float)((dx - col) * (rightH - leftH) + leftH);
  }
  final double relX=dx - col;
  final double relY=(y - south) / cellSize - rows + row + 2;
  h1=grid[row + 1][col];
  h2=grid[row + 1][col + 1];
  h3=grid[row][col];
  h4=grid[row][col + 1];
  return (float)(h1 + (h2 - h1) * relX + (h3 - h1) * relY + (h1 - h2 - h3 + h4) * relX * relY);
}",0.9968479117415288
140914,"/** 
 * Creates a new instance of Grid.
 * @param cols The number of vertical columns in the new grid.
 * @param rows The number of horizontal rows in the new grid.
 * @param cellSize The size between two rows or columns.
 */
public Grid(int cols,int rows,double cellSize){
  this(cols,rows);
  if (cols < 3 || rows < 3) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (cellSize <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.cellSize=cellSize;
}","/** 
 * Creates a new instance of Grid.
 * @param cols The number of vertical columns in the new grid.
 * @param rows The number of horizontal rows in the new grid.
 * @param cellSize The size between two rows or columns.
 */
public Grid(int cols,int rows,double cellSize){
  this(cols,rows);
  if (cellSize <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.cellSize=cellSize;
}",0.8287292817679558
140915,"private float verticalBilinearInterpol(double y,int topRow,int col){
  float topH=grid[topRow][col];
  float bottomH=grid[topRow + 1][col];
  double w=(getNorth() - y) / cellSize;
  return (float)(w * (topH - bottomH) + bottomH);
}","private float verticalBilinearInterpol(double y,int topRow,int col){
  float topH=grid[topRow][col];
  float bottomH=grid[topRow + 1][col];
  double w=(getNorth() - y) % cellSize;
  return (float)(w * (topH - bottomH) + bottomH);
}",0.9956709956709956
140916,"private double illuminationAzimuth(double dx,double dy){
  final double illuminationAzimuth=Math.toRadians(model.getAzimuth());
  double illuminationAngle=illuminationAzimuth;
  final double maxDeviation=Math.toRadians(30);
  double aspect=Math.atan2(dx,-dy);
  if (aspect < 0) {
    aspect+=Math.PI;
  }
  double angleDiff=illuminationAngle - aspect;
  if (angleDiff <= 0) {
    angleDiff+=Math.PI;
  }
  double angleAdjustment;
  if (angleDiff >= Math.PI / 2) {
    angleAdjustment=-maxDeviation / (Math.PI / 2) * angleDiff + 2 * maxDeviation;
  }
 else {
    angleAdjustment=-maxDeviation / (Math.PI / 2) * angleDiff;
  }
  return illuminationAngle + angleAdjustment;
}","/** 
 * Computes an adjusted illumination angle for a given line orientation.
 * @param dx
 * @param dy
 * @return
 */
private double illuminationAzimuth(double dx,double dy){
  final double illuminationAzimuth=Math.toRadians(model.getAzimuth());
  double illuminationAngle=Math.PI / 2 - illuminationAzimuth;
  illuminationAngle=GeometryUtils.trimAngle(illuminationAngle);
  double aspect=Math.atan2(dx,-dy);
  if (aspect < 0) {
    aspect+=Math.PI;
  }
  double angleDiff=illuminationAngle - aspect;
  if (angleDiff <= 0) {
    angleDiff+=Math.PI;
  }
  double maxDeviation=Math.toRadians(30);
  double angleAdjustment;
  if (angleDiff >= Math.PI / 2) {
    angleAdjustment=-maxDeviation / (Math.PI / 2) * angleDiff + 2 * maxDeviation;
  }
 else {
    angleAdjustment=-maxDeviation / (Math.PI / 2) * angleDiff;
  }
  double adjustedAngle=illuminationAngle + angleAdjustment;
  return Math.PI / 2 - adjustedAngle;
}",0.7838689350976685
140917,"public LightDirectionInterpolationOperator(Model model,GeometryCollection lines){
  this.model=model;
  genDirectionPoints(lines);
}","public LightDirectionInterpolationOperator(Model model,GeometryCollection lines){
  this.model=model;
  model.lightDirectionPoints=new GeometryCollection();
  for (int i=0; i < lines.getNumGeometries(); ++i) {
    LineString line=(LineString)lines.getGeometryN(i);
    for (int pointNum=0; pointNum < line.getNumPoints() - 1; ++pointNum) {
      Point p0=line.getPointN(pointNum);
      Point p1=line.getPointN(pointNum + 1);
      double dx=p1.getX() - p0.getX();
      double dy=p1.getY() - p0.getY();
      double length=Math.sqrt(dx * dx + dy * dy);
      double dirX=dx / length;
      double dirY=dy / length;
      if (Double.isNaN(dirX) || Double.isNaN(dirY)) {
        continue;
      }
      double lineOrientation=Math.atan2(dy,dx);
      System.out.println(Math.toDegrees(lineOrientation));
      double lightDir=illuminationAzimuth(dirX,dirY);
      double x=p0.getX() + dx / 2;
      double y=p0.getY() + dy / 2;
      DirectionPoint dirPoint=new DirectionPoint(x,y,lightDir);
      model.lightDirectionPoints.addGeometry(dirPoint);
    }
  }
}",0.2016806722689075
140918,"@Override public void paint(Graphics2D g2d,double west,double north,double scale){
  double x=getX();
  double y=getY();
  double dx=Math.sin(azimuthRad) * LINE_LENGTH_PX / 2 / scale;
  double dy=Math.cos(azimuthRad) * LINE_LENGTH_PX / 2 / scale;
  double x0=x - dx;
  double y0=y - dy;
  double x1=x + dx;
  double y1=y + dy;
  GeneralPath.Double path=new GeneralPath.Double();
  path.moveTo(scale * (x0 - west),scale * (north - y0));
  path.lineTo(scale * (x1 - west),scale * (north - y1));
  g2d.draw(path);
  double a0x=-ARROW_WIDTH_PX / 2 / scale;
  double a0y=(LINE_LENGTH_PX - ARROW_LENGTH_PX) / 2 / scale;
  double a1x=0;
  double a1y=LINE_LENGTH_PX / 2 / scale;
  double a2x=ARROW_WIDTH_PX / 2 / scale;
  double a2y=(LINE_LENGTH_PX - ARROW_LENGTH_PX) / 2 / scale;
  double cos=Math.cos(-azimuthRad);
  double sin=Math.sin(-azimuthRad);
  double b0x=cos * a0x - sin * a0y;
  double b0y=sin * a0x + cos * a0y;
  double b1x=cos * a1x - sin * a1y;
  double b1y=sin * a1x + cos * a1y;
  double b2x=cos * a2x - sin * a2y;
  double b2y=sin * a2x + cos * a2y;
  path=new GeneralPath.Double();
  path.moveTo(scale * (x + b0x - west),scale * (north - (b0y + y)));
  path.lineTo(scale * (x + b1x - west),scale * (north - (b1y + y)));
  path.lineTo(scale * (x + b2x - west),scale * (north - (b2y + y)));
  g2d.draw(path);
}","@Override public void paint(Graphics2D g2d,double west,double north,double scale){
  double x=getX();
  double y=getY();
  double dx=Math.sin(azimuthRad) * LINE_LENGTH_PX / 2 / scale;
  double dy=Math.cos(azimuthRad) * LINE_LENGTH_PX / 2 / scale;
  double x0=x - dx;
  double y0=y - dy;
  double x1=x + dx;
  double y1=y + dy;
  GeneralPath.Double path=new GeneralPath.Double();
  path.moveTo(scale * (x0 - west),scale * (north - y0));
  path.lineTo(scale * (x1 - west),scale * (north - y1));
  g2d.draw(path);
  double a0x=-ARROW_WIDTH_PX / 2 / scale;
  double a0y=(LINE_LENGTH_PX - ARROW_LENGTH_PX) / 2 / scale;
  double a1x=0;
  double a1y=LINE_LENGTH_PX / 2 / scale;
  double a2x=ARROW_WIDTH_PX / 2 / scale;
  double a2y=(LINE_LENGTH_PX - ARROW_LENGTH_PX) / 2 / scale;
  double cos=Math.cos(Math.PI - azimuthRad);
  double sin=Math.sin(Math.PI - azimuthRad);
  double b0x=cos * a0x - sin * a0y;
  double b0y=sin * a0x + cos * a0y;
  double b1x=cos * a1x - sin * a1y;
  double b1y=sin * a1x + cos * a1y;
  double b2x=cos * a2x - sin * a2y;
  double b2y=sin * a2x + cos * a2y;
  path=new GeneralPath.Double();
  path.moveTo(scale * (x + b0x - west),scale * (north - (b0y + y)));
  path.lineTo(scale * (x + b1x - west),scale * (north - (b1y + y)));
  path.lineTo(scale * (x + b2x - west),scale * (north - (b2y + y)));
  g2d.draw(path);
}",0.9917231000752446
140919,"/** 
 * Computes the branch length of grid point 1 at x1/y1 with point 2 at x2/y2. The branch length is the distance along the flow path starting at point 1 to the point of intersection with the flow path starting at point 2. The length of the flow path of point 2 does not influence the branch length. If point 1 is on the flow path starting at point 2, then the branch length is 0. If the flow path of point 1 ends in a sink or at the border of the grid, then the branch length is the length of the flow line to this end point. If the flow path starting at point 2 ends in a sink or at the border of the grid, then the flow line of point 1 is followed until it ends in a sink or at the border of the grid, and the branch length is the length of this flow line.
 * @param travelled an empty set for storing the points of both flow paths
 * @param dir the directions of flow (using D8 implementation)
 * @param x1 x of point 1 for which the branch length is computed
 * @param y1 y of point 1 for which the branch length is computed
 * @param x2 x of point 2
 * @param y2 y of point 2
 * @return branch length for vertex point 1 at x1/y1. Units are cells.
 */
private float branchLength(HashMap<Integer,Float> travelled,Grid dir,int x1,int y1,int x2,int y2){
}","/** 
 * Computes the branch length of grid point 1 at x1/y1 with point 2 at x2/y2. The branch length is the distance along the flow path starting at point 1 to the point of intersection with the flow path starting at point 2. The length of the flow path of point 2 does not influence the branch length. If point 1 is on the flow path starting at point 2, then the branch length is 0. If the flow path of point 1 ends in a sink or at the border of the grid, then the branch length is the length of the flow line to this end point. If the flow path starting at point 2 ends in a sink or at the border of the grid, then the flow line of point 1 is followed until it ends in a sink or at the border of the grid, and the branch length is the length of this flow line.
 * @param travelled an empty set for storing the points of both flow paths
 * @param dir the directions of flow (using D8 implementation)
 * @param x1 x of point 1 for which the branch length is computed
 * @param y1 y of point 1 for which the branch length is computed
 * @param x2 x of point 2
 * @param y2 y of point 2
 * @return branch length for vertex point 1 at x1/y1. Units are cells.
 */
private float branchLength(HashMap<Integer,Float> travelled,Grid dir,int x1,int y1,int x2,int y2){
  float length=0;
  final int nCols=dir.getCols();
  final int nRows=dir.getRows();
  int direction1, direction2;
  boolean path2Ended=false;
  int idx1, idx2;
  while (true) {
    idx1=x1 + y1 * nCols;
    if (travelled.containsKey(idx1)) {
      return length;
    }
    travelled.put(idx1,length);
    if (!path2Ended) {
      idx2=x2 + y2 * nCols;
      if (travelled.containsKey(idx2)) {
        return travelled.get(idx2);
      }
      travelled.put(idx2,null);
    }
    direction1=(int)dir.getValue(x1,y1);
    x1+=this.dX[direction1];
    y1+=this.dY[direction1];
    if (direction1 % 2 == 0) {
      length+=1.4142136;
    }
 else {
      length+=1;
    }
    if (direction1 == 4 || x1 == 0 || y1 == 0 || x1 == nCols - 1 || y1 == nRows - 1) {
      return length;
    }
    if (!path2Ended) {
      direction2=(int)dir.getValue(x2,y2);
      x2+=this.dX[direction2];
      y2+=this.dY[direction2];
      path2Ended=direction2 == 4;
      path2Ended|=x2 == 0 || y2 == 0 || x2 == nCols - 1 || y2 == nRows - 1;
    }
  }
}",0.7100591715976331
140920,"private void renderGeometryCollection(GeometryCollection features,Color color,float lineWidth){
  if (features != null) {
    Graphics2D g2d=(Graphics2D)displayImage.getGraphics();
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    g2d.setColor(color);
    double scale=displayImage.getWidth() / (model.getGrid().getEast() - model.getGrid().getWest());
    System.out.println(""String_Node_Str"" + scale);
    g2d.setStroke(new BasicStroke(lineWidth * (displayImage.getWidth() / model.getGrid().getCols())));
    double west=model.getGrid().getWest();
    double north=model.getGrid().getNorth();
    features.paint(g2d,west,north,scale);
  }
}","private void renderGeometryCollection(GeometryCollection features,Color color,float lineWidth){
  if (features != null) {
    Graphics2D g2d=(Graphics2D)displayImage.getGraphics();
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    g2d.setColor(color);
    double scale=displayImage.getWidth() / (model.getGrid().getEast() - model.getGrid().getWest());
    float strokeWidth=lineWidth * (displayImage.getWidth() / model.getGrid().getCols());
    g2d.setStroke(new BasicStroke(strokeWidth,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER));
    double west=model.getGrid().getWest();
    double north=model.getGrid().getNorth();
    features.paint(g2d,west,north,scale);
  }
}",0.782051282051282
140921,"public void dev(BufferedImage img){
  FlowDirectionOperator mblDop=new FlowDirectionOperator();
  Grid dir=mblDop.operate(model.getFilteredGrid());
  MaximumBranchLengthOperator mblOp=new MaximumBranchLengthOperator();
  Grid mbl=mblOp.operate(dir);
  BinaryThresholdOperator thresholder=new BinaryThresholdOperator(100);
  Grid thresholded=thresholder.operate(mbl);
  SkeletonizerOperator mblSkel=new SkeletonizerOperator();
  Grid skeleton=thresholded;
  do {
    mblSkel.operate(skeleton,null);
  }
 while (!mblSkel.isDone());
  Grid resultGrid=skeleton;
  new GridToImageOperator(resultGrid,img).operate(resultGrid);
}","public void dev(BufferedImage img){
  FlowDirectionOperator mblDop=new FlowDirectionOperator();
  Grid dir=mblDop.operate(model.getFilteredGrid());
  MaximumBranchLengthsOperator mblOp=new MaximumBranchLengthsOperator();
  Grid mbl=mblOp.operate(dir);
  BinaryThresholdOperator thresholder=new BinaryThresholdOperator(100);
  Grid thresholded=thresholder.operate(mbl);
  SkeletonizerOperator mblSkel=new SkeletonizerOperator();
  Grid skeleton=thresholded;
  skeleton=mblSkel.operate(skeleton);
  Grid resultGrid=skeleton;
  new GridToImageOperator(resultGrid,img).operate(resultGrid);
}",0.7990074441687345
140922,"/** 
 * Multi-threaded operation. Requires a direction grid created with FlowDirectionOperator.
 * @param dir the direction grid
 * @param dst a grid to store maximum branch lengths
 */
@Override protected void operate(Grid dir,Grid dst,int startRow,int endRow){
  final int nCols=dir.getCols();
  final int nRows=dir.getRows();
  int adjI, adjJ;
  int[] allowedDirs={2,5,7,8};
  HashMap<Integer,Float> travelled=new HashMap<>(nRows + nCols);
  for (int row=startRow; row < endRow; ++row) {
    if (reportProgress(startRow,endRow,row) == false) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      float maxBranchLength=0;
      for (      int n : allowedDirs) {
        adjI=this.dY[n] + row;
        adjJ=this.dX[n] + col;
        if (adjI >= 0 && adjJ >= 0 && adjI < nRows && adjJ < nCols) {
          float l=branchLength(travelled,dir,col,row,adjJ,adjI);
          travelled.clear();
          if (l > maxBranchLength) {
            maxBranchLength=l;
          }
        }
      }
      dst.setValue(maxBranchLength,col,row);
    }
  }
}","/** 
 * Multi-threaded operation. Requires a direction grid created with FlowDirectionOperator.
 * @param dir the direction grid
 * @param dst a grid to store maximum branch lengths
 */
@Override protected void operate(Grid dir,Grid dst,int startRow,int endRow){
  final int nCols=dir.getCols();
  final int nRows=dir.getRows();
  int adjI, adjJ;
  int[] allowedDirs={0,1,2,3,5,6,7,8};
  HashMap<Integer,Float> travelled=new HashMap<>(nRows + nCols);
  for (int row=startRow; row < endRow; ++row) {
    if (reportProgress(startRow,endRow,row) == false) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      float maxBranchLength=0;
      for (      int n : allowedDirs) {
        adjI=this.dY[n] + row;
        adjJ=this.dX[n] + col;
        if (adjI >= 0 && adjJ >= 0 && adjI < nRows && adjJ < nCols) {
          float l=branchLength(travelled,dir,col,row,adjJ,adjI);
          travelled.clear();
          if (l > maxBranchLength) {
            maxBranchLength=l;
          }
        }
      }
      dst.setValue(maxBranchLength,col,row);
    }
  }
}",0.9962406015037594
140923,"private void updateMaxBranchLengthGrid(ProgressIndicator progressIndicator){
  if (localLightDirection) {
    boolean initialIgnoreProgress=progressIndicator.isIgnoreProgress();
    try {
      FlowDirectionOperator flowDirectionOp=new FlowDirectionOperator();
      flowDirectionOp.setProgressIndicator(progressIndicator);
      progressIndicator.setIgnoreProgress(true);
      progressIndicator.setMessage(""String_Node_Str"");
      Grid flowDirections=flowDirectionOp.operate(generalizedGrid);
      if (generalizedGrid.sameGeometry(maxBranchLenghtsGrid) == false) {
        maxBranchLenghtsGrid=Grid.shallowCopy(generalizedGrid);
      }
      MaximumBranchLengthOperator mbl=new MaximumBranchLengthOperator();
      mbl.setProgressIndicator(progressIndicator);
      progressIndicator.setIgnoreProgress(false);
      progressIndicator.setMessage(""String_Node_Str"");
      mbl.operate(flowDirections,maxBranchLenghtsGrid);
    }
  finally {
      progressIndicator.setIgnoreProgress(initialIgnoreProgress);
    }
  }
}","private void updateMaxBranchLengthGrid(ProgressIndicator progressIndicator){
  if (localLightDirection) {
    boolean initialIgnoreProgress=progressIndicator.isIgnoreProgress();
    try {
      FlowDirectionOperator flowDirectionOp=new FlowDirectionOperator();
      flowDirectionOp.setProgressIndicator(progressIndicator);
      progressIndicator.setIgnoreProgress(true);
      progressIndicator.setMessage(""String_Node_Str"");
      Grid flowDirections=flowDirectionOp.operate(generalizedGrid);
      if (generalizedGrid.sameGeometry(maxBranchLenghtsGrid) == false) {
        maxBranchLenghtsGrid=Grid.shallowCopy(generalizedGrid);
      }
      MaximumBranchLengthsOperator mbl=new MaximumBranchLengthsOperator();
      mbl.setProgressIndicator(progressIndicator);
      progressIndicator.setIgnoreProgress(false);
      progressIndicator.setMessage(""String_Node_Str"");
      mbl.operate(flowDirections,maxBranchLenghtsGrid);
    }
  finally {
      progressIndicator.setIgnoreProgress(initialIgnoreProgress);
    }
  }
}",0.9990215264187868
140924,"public void dev(BufferedImage img){
  FlowDirectionOperator mblDop=new FlowDirectionOperator();
  Grid dir=mblDop.operate(model.getFilteredGrid());
  MaximumBranchLengthsOperator mblOp=new MaximumBranchLengthsOperator();
  Grid mbl=mblOp.operate(dir);
  BinaryThresholdOperator thresholder=new BinaryThresholdOperator(100);
  Grid thresholded=thresholder.operate(mbl);
  SkeletonizerOperator mblSkel=new SkeletonizerOperator();
  Grid skeleton=thresholded;
  skeleton=mblSkel.operate(skeleton);
  Grid resultGrid=skeleton;
  new GridToImageOperator(resultGrid,img).operate(resultGrid);
}","public void dev(BufferedImage img){
  FlowDirectionOperator mblDop=new FlowDirectionOperator();
  Grid dir=mblDop.operate(model.getFilteredGrid());
  MaximumBranchLengthOperator mblOp=new MaximumBranchLengthOperator();
  Grid mbl=mblOp.operate(dir);
  BinaryThresholdOperator thresholder=new BinaryThresholdOperator(100);
  Grid thresholded=thresholder.operate(mbl);
  SkeletonizerOperator mblSkel=new SkeletonizerOperator();
  Grid skeleton=thresholded;
  do {
    mblSkel.operate(skeleton,null);
  }
 while (!mblSkel.isDone());
  Grid resultGrid=skeleton;
  new GridToImageOperator(resultGrid,img).operate(resultGrid);
}",0.9528535980148884
140925,"/** 
 * Multi-threaded operation. Requires a direction grid created with FlowDirectionOperator.
 * @param dir the direction grid
 * @param dst a grid to store maximum branch lengths
 */
@Override protected void operate(Grid dir,Grid dst,int startRow,int endRow){
  final int nCols=dir.getCols();
  final int nRows=dir.getRows();
  int adjI, adjJ;
  int[] allowedDirs={0,1,2,3,5,6,7,8};
  HashMap<Integer,Float> travelled=new HashMap<>(nRows + nCols);
  for (int row=startRow; row < endRow; ++row) {
    if (reportProgress(startRow,endRow,row) == false) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      float maxBranchLength=0;
      for (      int n : allowedDirs) {
        adjI=this.dY[n] + row;
        adjJ=this.dX[n] + col;
        if (adjI >= 0 && adjJ >= 0 && adjI < nRows && adjJ < nCols) {
          float l=branchLength(travelled,dir,col,row,adjJ,adjI);
          travelled.clear();
          if (l > maxBranchLength) {
            maxBranchLength=l;
          }
        }
      }
      dst.setValue(maxBranchLength,col,row);
    }
  }
}","/** 
 * Multi-threaded operation. Requires a direction grid created with FlowDirectionOperator.
 * @param dir the direction grid
 * @param dst a grid to store maximum branch lengths
 */
@Override protected void operate(Grid dir,Grid dst,int startRow,int endRow){
  final int nCols=dir.getCols();
  final int nRows=dir.getRows();
  int adjI, adjJ;
  int[] allowedDirs={2,5,7,8};
  HashMap<Integer,Float> travelled=new HashMap<>(nRows + nCols);
  for (int row=startRow; row < endRow; ++row) {
    if (reportProgress(startRow,endRow,row) == false) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      float maxBranchLength=0;
      for (      int n : allowedDirs) {
        adjI=this.dY[n] + row;
        adjJ=this.dX[n] + col;
        if (adjI >= 0 && adjJ >= 0 && adjI < nRows && adjJ < nCols) {
          float l=branchLength(travelled,dir,col,row,adjJ,adjI);
          travelled.clear();
          if (l > maxBranchLength) {
            maxBranchLength=l;
          }
        }
      }
      dst.setValue(maxBranchLength,col,row);
    }
  }
}",0.9962406015037594
140926,"protected void nextIteration(Grid grid){
  lastIterationChangedGrid=false;
  rotateG3=false;
  super.operate(grid,null);
  rotateG3=true;
  super.operate(grid,null);
}","protected void nextIteration(Grid grid){
  final int nCols=grid.getCols();
  final int nRows=grid.getRows();
  grid.setRowValue(0f,0);
  grid.setRowValue(0f,nRows - 1);
  grid.setColValue(0f,0);
  grid.setColValue(0f,nCols - 1);
  lastIterationChangedGrid=false;
  rotateG3=false;
  skippedRows.clear();
  super.operate(grid,null);
  for (  Integer row : skippedRows) {
    lastIterationChangedGrid|=operateRow(grid,row);
  }
  rotateG3=true;
  skippedRows.clear();
  super.operate(grid,null);
  for (  Integer row : skippedRows) {
    lastIterationChangedGrid|=operateRow(grid,row);
  }
}",0.3121693121693121
140927,"private double illuminationAzimuth(double dx,double dy){
  final double illuminationAngle=Math.toRadians(model.getAzimuth());
  final double maxDeviation=Math.toRadians(30);
  double aspect=Math.atan2(dx,-dy);
  if (aspect < 0) {
    aspect+=Math.PI;
  }
  double angleDiff=illuminationAngle - aspect;
  if (angleDiff <= 0) {
    angleDiff+=Math.PI;
  }
  double angleAdjustment=-maxDeviation / (Math.PI / 2) * angleDiff;
  if (angleDiff >= Math.PI / 2) {
    angleAdjustment=-maxDeviation / (Math.PI / 2) * angleDiff + 2 * maxDeviation;
  }
  return illuminationAngle + angleAdjustment;
}","private double illuminationAzimuth(double dx,double dy){
  final double illuminationAzimuth=Math.toRadians(model.getAzimuth());
  final double maxDeviation=Math.toRadians(30);
  double aspect=Math.atan2(dx,-dy);
  if (aspect < 0) {
    aspect+=Math.PI;
  }
  double angleDiff=illuminationAzimuth - aspect;
  if (angleDiff <= 0) {
    angleDiff+=Math.PI;
  }
  double angleAdjustment;
  if (angleDiff >= Math.PI / 2) {
    angleAdjustment=-maxDeviation / (Math.PI / 2) * angleDiff + 2 * maxDeviation;
  }
 else {
    angleAdjustment=-maxDeviation / (Math.PI / 2) * angleDiff;
  }
  return illuminationAzimuth - angleAdjustment;
}",0.8315529991783073
140928,"public DirectionPoint(double x,double y,double azimuthDeg){
  this.x=x;
  this.y=y;
  this.azimuthDeg=azimuthDeg;
  this.dirX=Math.sin(Math.toRadians(azimuthDeg));
  this.dirY=Math.cos(Math.toRadians(azimuthDeg));
}","public DirectionPoint(double x,double y,double azimuthRad){
  this.x=x;
  this.y=y;
  this.azimuthRad=azimuthRad;
  this.dirX=Math.sin(azimuthRad);
  this.dirY=Math.cos(azimuthRad);
}",0.8442211055276382
140929,"@Override protected void operateCell(Grid ignore,Grid dst,int col,int row){
  double x=dst.getWest() + col * dst.getCellSize();
  double y=dst.getNorth() - row * dst.getCellSize();
  double sumWeight=0;
  double totalX=0;
  double totalY=0;
  for (  DirectionPoint point : referencePoints) {
    double dx=point.x - x;
    double dy=point.y - y;
    double distance=Math.sqrt(dx * dx + dy * dy);
    double weight=1d / distance;
    sumWeight+=weight;
    totalX+=weight * point.dirX;
    totalY+=weight * point.dirY;
  }
  totalX/=sumWeight;
  totalY/=sumWeight;
  double dir=Math.toDegrees(Math.atan2(totalY,totalX));
  double azimuth=90 - dir;
  dst.setValue(azimuth,col,row);
}","@Override protected void operateCell(Grid ignore,Grid dst,int col,int row){
  double x=dst.getWest() + col * dst.getCellSize();
  double y=dst.getNorth() - row * dst.getCellSize();
  double sumWeight=0;
  double totalX=0;
  double totalY=0;
  for (  DirectionPoint point : referencePoints) {
    double dx=point.x - x;
    double dy=point.y - y;
    double distance=Math.sqrt(dx * dx + dy * dy);
    if (distance < 0.0000001) {
      totalX=point.dirX;
      totalY=point.dirY;
      sumWeight=1;
      break;
    }
    double weight=1d / (distance * distance);
    sumWeight+=weight;
    totalX+=weight * point.dirX;
    totalY+=weight * point.dirY;
  }
  totalX/=sumWeight;
  totalY/=sumWeight;
  double dir=Math.toDegrees(Math.atan2(totalY,totalX));
  double azimuth=90 - dir;
  dst.setValue(azimuth,col,row);
}",0.8735785953177257
140930,"public void genDirectionPoints(GeometryCollection lines){
  for (int lineNumber=0; lineNumber < lines.getNumGeometries(); ++lineNumber) {
    Geometry line=lines.getGeometryN(lineNumber);
    LineString line2=(LineString)line;
    for (int pointNum=0; pointNum < line2.getNumPoints() - 1; ++pointNum) {
      Point point=line2.getPointN(pointNum);
      lineDirection(line2,pointNum,dirXY);
      double lightDir=illuminationAzimuth(dirXY[0],dirXY[1]);
      DirectionPoint dirPoint=new DirectionPoint(point.getX(),point.getY(),lightDir);
      referencePoints.add(dirPoint);
    }
  }
}","private void genDirectionPoints(GeometryCollection lines){
  DouglasPeucker dp=new DouglasPeucker(50);
  lines=dp.simplify(lines);
  for (int i=0; i < lines.getNumGeometries(); ++i) {
    LineString line=(LineString)lines.getGeometryN(i);
    for (int pointNum=0; pointNum < line.getNumPoints() - 1; ++pointNum) {
      Point p0=line.getPointN(pointNum);
      Point p1=line.getPointN(pointNum + 1);
      double dx=p0.getX() - p1.getX();
      double dy=p0.getY() - p1.getY();
      double length=Math.sqrt(dx * dx + dy * dy);
      double dirX=dx / length;
      double dirY=dy / length;
      double lightDir=illuminationAzimuth(dirX,dirY);
      if (Double.isNaN(lightDir)) {
        continue;
      }
      DirectionPoint dirPoint=new DirectionPoint(p0.getX(),p0.getY(),lightDir);
      referencePoints.add(dirPoint);
    }
  }
}",0.4067558057705841
140931,"/** 
 * Constructor for the JFrame. Initializes components and sets up the default color gradient.
 * @param model model object
 */
public MainWindow(Model model){
  this.model=model;
  initRecentDocumentsMenu();
  initComponents();
  MenuKeysDispatcher.setupDialogActions(menuBar);
  GUIUtil.zoomMenuCommands(zoomInAction,zoomOutAction,getRootPane());
  progressPanel=new ProgressPanel();
  progressPanel.setOpaque(false);
  setGlassPane(progressPanel);
  progressPanel.setVisible(false);
  showDebugMenuWhenAssertionsAreEnabled();
  navigableImagePanel.setInfoString(""String_Node_Str"");
  Color focusColor=new Color(190,230,255);
  Border border=javax.swing.BorderFactory.createLineBorder(focusColor,4);
  new FileDrop(null,navigableImagePanel,border,new FileDrop.Listener(){
    @Override public void filesDropped(    java.io.File[] files){
      for (      File file : files) {
        try {
          openGrid(file.getCanonicalPath());
        }
 catch (        IOException ex) {
          ErrorDialog.showErrorDialog(OPEN_ERROR_MESSAGE,""String_Node_Str"",ex,navigableImagePanel.getParent());
        }
      }
    }
  }
);
}","/** 
 * Constructor for the JFrame. Initializes components and sets up the default color gradient.
 * @param model model object
 */
public MainWindow(Model model){
  this.model=model;
  initRecentDocumentsMenu();
  initComponents();
  MenuKeysDispatcher.setupDialogActions(menuBar);
  GUIUtil.zoomMenuCommands(zoomInAction,zoomOutAction,getRootPane());
  progressPanel=new ProgressPanel();
  progressPanel.setOpaque(false);
  setGlassPane(progressPanel);
  progressPanel.setVisible(false);
  showDebugMenuWhenAssertionsAreEnabled();
  navigableImagePanel.setInfoString(""String_Node_Str"");
  Color focusColor=new Color(190,230,255);
  Border border=javax.swing.BorderFactory.createLineBorder(focusColor,4);
  new FileDrop(null,navigableImagePanel,border,new FileDrop.Listener(){
    @Override public void filesDropped(    java.io.File[] files){
      try {
        int maxNbrFilesToScan=Math.min(files.length,100);
        for (int i=0; i < maxNbrFilesToScan; i++) {
          String filePath=files[i].getCanonicalPath();
          if (EsriASCIIGridReader.canRead(filePath)) {
            openGrid(filePath);
          }
        }
      }
 catch (      IOException ex) {
        ErrorDialog.showErrorDialog(OPEN_ERROR_MESSAGE,""String_Node_Str"",ex,navigableImagePanel.getParent());
      }
    }
  }
);
}",0.8778280542986425
140932,"@Override public void filesDropped(java.io.File[] files){
  for (  File file : files) {
    try {
      openGrid(file.getCanonicalPath());
    }
 catch (    IOException ex) {
      ErrorDialog.showErrorDialog(OPEN_ERROR_MESSAGE,""String_Node_Str"",ex,navigableImagePanel.getParent());
    }
  }
}","@Override public void filesDropped(java.io.File[] files){
  try {
    int maxNbrFilesToScan=Math.min(files.length,100);
    for (int i=0; i < maxNbrFilesToScan; i++) {
      String filePath=files[i].getCanonicalPath();
      if (EsriASCIIGridReader.canRead(filePath)) {
        openGrid(filePath);
      }
    }
  }
 catch (  IOException ex) {
    ErrorDialog.showErrorDialog(OPEN_ERROR_MESSAGE,""String_Node_Str"",ex,navigableImagePanel.getParent());
  }
}",0.6194926568758344
140933,"@Override public void done(){
  if (isCancelled()) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        closeGUI();
      }
    }
);
    return;
  }
 else {
    closeGUI();
  }
  try {
    Grid grid=get();
    model.setGrid(grid);
  }
 catch (  InterruptedException|CancellationException e) {
  }
catch (  Throwable e) {
    closeGUI();
    String msg=""String_Node_Str"";
    if (e instanceof OutOfMemoryError) {
      msg+=""String_Node_Str"";
    }
 else {
      msg+=""String_Node_Str"";
    }
    msg+=""String_Node_Str"";
    ErrorDialog.showErrorDialog(msg,""String_Node_Str"",e,frame);
  }
}","@Override public void done(){
  if (isCancelled()) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        closeGUI();
      }
    }
);
    return;
  }
 else {
    closeGUI();
  }
  try {
    Grid grid=get();
    model.setGrid(grid);
    successfullyImportedGrid=true;
  }
 catch (  InterruptedException|CancellationException e) {
  }
catch (  Throwable e) {
    closeGUI();
    String msg=""String_Node_Str"";
    if (e instanceof OutOfMemoryError) {
      msg+=""String_Node_Str"";
    }
 else {
      msg+=""String_Node_Str"";
    }
    msg+=""String_Node_Str"";
    ErrorDialog.showErrorDialog(msg,""String_Node_Str"",e,frame);
  }
}",0.9728892331525948
140934,"/** 
 * Initializes localLightDirectionGrid with interpolated light directions.
 */
public void updateLocalLightDirectionGrid(ProgressIndicator progressIndicator){
  if (localLightAzimuth) {
    if (maxBranchLenghtsGrid == null) {
      updateMaxBranchLengthGrid(progressIndicator);
    }
    GridMinMaxOperator minMaxOp=new GridMinMaxOperator();
    minMaxOp.setProgressIndicator(progressIndicator);
    float[] minMax=minMaxOp.findMinMax(maxBranchLenghtsGrid);
    float threshold=(float)(maxBranchLengthThreshold * (minMax[1] - minMax[0]) + minMax[0]);
    BinaryThresholdOperator thresholder=new BinaryThresholdOperator(threshold);
    thresholder.setProgressIndicator(progressIndicator);
    Grid thresholded=thresholder.operate(maxBranchLenghtsGrid);
    SkeletonizerOperator skeletonizer=new SkeletonizerOperator();
    skeletonizer.setProgressIndicator(progressIndicator);
    Grid skeleton=thresholded;
    do {
      skeletonizer.operate(skeleton,null);
    }
 while (!skeletonizer.isDone());
    MBLBranchPoints tracer=new MBLBranchPoints();
    tracer.setProgressIndicator(progressIndicator);
    GeometryCollection ridgelines=new GeometryCollection();
    tracer.operate(skeleton,ridgelines);
    LightDirectionInterpolationOperator lightOperator=new LightDirectionInterpolationOperator(this,ridgelines);
    lightOperator.setProgressIndicator(progressIndicator);
    localLightDirectionGrid=Grid.shallowCopy(generalizedGrid);
    Grid ignored=localLightDirectionGrid;
    lightOperator.operate(ignored,localLightDirectionGrid);
  }
 else {
    localLightDirectionGrid=null;
  }
}","/** 
 * Initializes localLightDirectionGrid with interpolated light directions.
 */
public void updateLocalLightDirectionGrid(ProgressIndicator progressIndicator){
  if (localLightAzimuth) {
    if (maxBranchLenghtsGrid == null) {
      updateMaxBranchLengthGrid(progressIndicator);
    }
    GridMinMaxOperator minMaxOp=new GridMinMaxOperator();
    minMaxOp.setProgressIndicator(progressIndicator);
    float[] minMax=minMaxOp.findMinMax(maxBranchLenghtsGrid);
    float threshold=(float)(maxBranchLengthThreshold * (minMax[1] - minMax[0]) + minMax[0]);
    BinaryThresholdOperator thresholder=new BinaryThresholdOperator(threshold);
    thresholder.setProgressIndicator(progressIndicator);
    Grid thresholded=thresholder.operate(maxBranchLenghtsGrid);
    SkeletonizerOperator skeletonizer=new SkeletonizerOperator();
    skeletonizer.setProgressIndicator(progressIndicator);
    Grid skeleton=thresholded;
    do {
      skeletonizer.operate(skeleton,null);
    }
 while (!skeletonizer.isDone());
    LinesTracingOperator tracer=new LinesTracingOperator();
    tracer.setProgressIndicator(progressIndicator);
    tracer.operate(skeleton,null);
    GeometryCollection lines=tracer.getLines();
    LightDirectionInterpolationOperator lightOperator=new LightDirectionInterpolationOperator(this,lines);
    lightOperator.setProgressIndicator(progressIndicator);
    localLightDirectionGrid=Grid.shallowCopy(generalizedGrid);
    Grid ignored=localLightDirectionGrid;
    lightOperator.operate(ignored,localLightDirectionGrid);
  }
 else {
    localLightDirectionGrid=null;
  }
}",0.8458871730223763
140935,"@Override public void run(){
  try {
    final int nCols=grid.getCols();
    final int nRows=grid.getRows();
    final int nbrValues=nRows * nCols;
    do {
      String str=queue.take();
      if (EOF.equals(str)) {
        if (counter != nbrValues) {
          throw new IOException(""String_Node_Str"");
        }
        break;
      }
      StringTokenizer tokenizer=new StringTokenizer(str,""String_Node_Str"");
      while (tokenizer.hasMoreTokens() && !Thread.currentThread().isInterrupted() && producerConsumerException == null) {
        int col=counter % nCols;
        int row=counter / nCols;
        ++counter;
        if (counter > nbrValues) {
          throw new IOException(""String_Node_Str"");
        }
        String token=tokenizer.nextToken();
        try {
          float v=Float.parseFloat(token);
          grid.setValue(v == noDataValue ? Float.NaN : v,col,row);
        }
 catch (        NumberFormatException exc) {
          throw new IllegalArgumentException(""String_Node_Str"" + token + ""String_Node_Str"",exc);
        }
      }
      if (progressIndicator != null) {
        int row=counter / nCols;
        int perc=(int)((row + 1d) / nRows * 100);
        if (!progressIndicator.progress(perc)) {
          counter=nbrValues;
          break;
        }
      }
    }
 while (counter < nbrValues && !Thread.currentThread().isInterrupted() && producerConsumerException == null);
  }
 catch (  Throwable ex) {
    producerConsumerException=ex;
  }
}","@Override public void run(){
  try {
    final int nCols=grid.getCols();
    final int nRows=grid.getRows();
    final int nbrValues=nRows * nCols;
    do {
      String str=queue.take();
      if (EOF.equals(str)) {
        if (counter != nbrValues) {
          throw new IOException(""String_Node_Str"");
        }
        break;
      }
      StringTokenizer tokenizer=new StringTokenizer(str,""String_Node_Str"");
      while (tokenizer.hasMoreTokens() && !Thread.currentThread().isInterrupted() && producerConsumerException == null) {
        int col=counter % nCols;
        int row=counter / nCols;
        ++counter;
        if (counter > nbrValues) {
          throw new IOException(""String_Node_Str"");
        }
        String token=tokenizer.nextToken();
        try {
          float v=Float.parseFloat(token);
          grid.setValue(v == noDataValue ? Float.NaN : v,col,row);
        }
 catch (        NumberFormatException exc) {
          throw new IllegalArgumentException(""String_Node_Str"" + token + ""String_Node_Str"",exc);
        }
      }
      if (progressIndicator != null) {
        int row=counter / nCols;
        int perc=(int)(100d * row / nRows);
        if (!progressIndicator.progress(perc)) {
          counter=nbrValues;
          break;
        }
      }
    }
 while (counter < nbrValues && !Thread.currentThread().isInterrupted() && producerConsumerException == null);
  }
 catch (  Throwable ex) {
    producerConsumerException=ex;
  }
}",0.9877800407331976
140936,"public static void export(Grid grid,String filePath,int nbrDecimals,ProgressIndicator progressIndicator) throws IOException {
  PrintWriter writer=null;
  try {
    DecimalFormat df=new DecimalFormat();
    df.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));
    df.setMinimumFractionDigits(0);
    df.setMaximumFractionDigits(nbrDecimals);
    df.setGroupingUsed(false);
    writer=new PrintWriter(new BufferedWriter(new FileWriter(filePath)));
    String voidValueStr=Float.toString(findVoidValue(grid));
    String lineSeparator=System.getProperty(""String_Node_Str"");
    writer.write(""String_Node_Str"" + grid.getCols() + lineSeparator);
    writer.write(""String_Node_Str"" + grid.getRows() + lineSeparator);
    writer.write(""String_Node_Str"" + grid.getWest() + lineSeparator);
    writer.write(""String_Node_Str"" + grid.getSouth() + lineSeparator);
    writer.write(""String_Node_Str"" + grid.getCellSize() + lineSeparator);
    writer.write(""String_Node_Str"" + voidValueStr + lineSeparator);
    int nRows=grid.getRows();
    int nCols=grid.getCols();
    for (int row=0; row < nRows; ++row) {
      if (progressIndicator != null) {
        int progress=(int)Math.round(100d * (row + 1f) / nRows);
        if (progressIndicator.progress(progress) == false) {
          new File(filePath).delete();
          return;
        }
      }
      for (int col=0; col < nCols; ++col) {
        if (col % 1000 == 0) {
          if (progressIndicator != null && progressIndicator.isCancelled()) {
            new File(filePath).delete();
            return;
          }
        }
        float v=grid.getValue(col,row);
        if (Float.isNaN(v)) {
          writer.write(voidValueStr);
        }
 else {
          writer.write(df.format(v));
        }
        writer.write(""String_Node_Str"");
      }
      writer.write(lineSeparator);
    }
    WKTProjectionFile.write(grid.getPrjFileContent(),filePath);
  }
 catch (  Throwable exc) {
    if (writer != null) {
      writer.close();
      writer=null;
    }
    new File(filePath).delete();
    throw exc;
  }
 finally {
    if (writer != null) {
      writer.close();
    }
  }
}","public static void export(Grid grid,String filePath,int nbrDecimals,ProgressIndicator progressIndicator) throws IOException {
  PrintWriter writer=null;
  try {
    DecimalFormat df=new DecimalFormat();
    df.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));
    df.setMinimumFractionDigits(0);
    df.setMaximumFractionDigits(nbrDecimals);
    df.setGroupingUsed(false);
    writer=new PrintWriter(new BufferedWriter(new FileWriter(filePath)));
    String voidValueStr=Float.toString(findVoidValue(grid));
    String lineSeparator=System.getProperty(""String_Node_Str"");
    writer.write(""String_Node_Str"" + grid.getCols() + lineSeparator);
    writer.write(""String_Node_Str"" + grid.getRows() + lineSeparator);
    writer.write(""String_Node_Str"" + grid.getWest() + lineSeparator);
    writer.write(""String_Node_Str"" + grid.getSouth() + lineSeparator);
    writer.write(""String_Node_Str"" + grid.getCellSize() + lineSeparator);
    writer.write(""String_Node_Str"" + voidValueStr + lineSeparator);
    int nRows=grid.getRows();
    int nCols=grid.getCols();
    for (int row=0; row < nRows; ++row) {
      if (progressIndicator != null) {
        int progress=(int)Math.round(100d * (row + 1) / nRows);
        if (progressIndicator.progress(progress) == false) {
          new File(filePath).delete();
          return;
        }
      }
      for (int col=0; col < nCols; ++col) {
        if (col % 1000 == 0) {
          if (progressIndicator != null && progressIndicator.isCancelled()) {
            new File(filePath).delete();
            return;
          }
        }
        float v=grid.getValue(col,row);
        if (Float.isNaN(v)) {
          writer.write(voidValueStr);
        }
 else {
          writer.write(df.format(v));
        }
        writer.write(""String_Node_Str"");
      }
      writer.write(lineSeparator);
    }
    WKTProjectionFile.write(grid.getPrjFileContent(),filePath);
  }
 catch (  Throwable exc) {
    if (writer != null) {
      writer.close();
      writer=null;
    }
    new File(filePath).delete();
    throw exc;
  }
 finally {
    if (writer != null) {
      writer.close();
    }
  }
}",0.999766191255553
140937,"@Override protected void operateCell(Grid src,Grid dst,int col,int row){
  dst.setValue(Math.random(),col,row);
}","@Override protected void operateCell(Grid src,Grid dst,int col,int row){
  float val=(float)(src.getValue(col,row) + Math.random() * 500);
  dst.setValue(val,col,row);
}",0.7163120567375887
140938,"/** 
 * Paints the panel and its image at the current zoom level, location, and interpolation method dependent on the image scale.</p>
 * @param g the <code>Graphics</code> context for painting
 */
@Override protected void paintComponent(Graphics g){
  super.paintComponent(g);
  if (image == null) {
    return;
  }
  if (scale <= 0.0) {
    autoZoom();
  }
  if (isHighQualityRendering()) {
    Rectangle rect=getImageClipBounds();
    if (rect == null || rect.width == 0 || rect.height == 0) {
      return;
    }
    BufferedImage subimage=image.getSubimage(rect.x,rect.y,rect.width,rect.height);
    Graphics2D g2=(Graphics2D)g;
    BufferedImage scaledImage=ImageUtils.getScaledInstance(subimage,Math.min((int)(subimage.getWidth() * scale),getWidth()),Math.min((int)(subimage.getHeight() * scale),getHeight()),INTERPOLATION_TYPE,true);
    g2.drawImage(scaledImage,Math.max(0,originX),Math.max(0,originY),null);
  }
 else {
    g.drawImage(image,originX,originY,getScreenImageWidth(),getScreenImageHeight(),null);
  }
  if (isNavigationImageEnabled()) {
    g.drawImage(navigationImage,0,0,getScreenNavImageWidth(),getScreenNavImageHeight(),null);
    drawZoomAreaOutline(g);
  }
}","/** 
 * Paints the panel and its image at the current zoom level, location, and interpolation method dependent on the image scale.</p>
 * @param g the <code>Graphics</code> context for painting
 */
@Override protected void paintComponent(Graphics g){
  super.paintComponent(g);
  if (image == null) {
    return;
  }
  if (scale <= 0.0) {
    autoZoom();
  }
  if (isHighQualityRendering()) {
    Rectangle rect=getImageClipBounds();
    if (rect == null || rect.width == 0 || rect.height == 0) {
      return;
    }
    BufferedImage subimage=image.getSubimage(rect.x,rect.y,rect.width,rect.height);
    Graphics2D g2=(Graphics2D)g;
    try {
      BufferedImage scaledImage=ImageUtils.getScaledInstance(subimage,Math.min((int)(subimage.getWidth() * scale),getWidth()),Math.min((int)(subimage.getHeight() * scale),getHeight()),INTERPOLATION_TYPE,true);
      g2.drawImage(scaledImage,Math.max(0,originX),Math.max(0,originY),null);
    }
 catch (    OutOfMemoryError ignore) {
      System.err.println(""String_Node_Str"");
      BufferedImage scaledImage=ImageUtils.getScaledInstance(subimage,Math.min((int)(subimage.getWidth() * 0.5),getWidth()),Math.min((int)(subimage.getHeight() * 0.5),getHeight()),INTERPOLATION_TYPE,true);
      g2.drawImage(scaledImage,Math.max(0,originX),Math.max(0,originY),rect.width * 2,rect.height * 2,null);
    }
  }
 else {
    g.drawImage(image,originX,originY,getScreenImageWidth(),getScreenImageHeight(),null);
  }
  if (isNavigationImageEnabled()) {
    g.drawImage(navigationImage,0,0,getScreenNavImageWidth(),getScreenNavImageHeight(),null);
    drawZoomAreaOutline(g);
  }
}",0.8481600571632726
140939,"private void equalizerResetButtonActionPerformed(java.awt.event.ActionEvent evt){
  for (  Component comp : equalizerSlidersPanel.getComponents()) {
    setSliderValueWithoutTriggeringEvent((JSlider)comp,100);
  }
  generalizeAndRender();
}","private void equalizerResetButtonActionPerformed(java.awt.event.ActionEvent evt){
  for (  Component comp : equalizerSlidersPanel.getComponents()) {
    setSliderValueWithoutTriggeringEvent((JSlider)comp,100);
  }
  int nbrFrequencyBands=model.getNbrEqualizerBands();
  for (int i=0; i < nbrFrequencyBands; i++) {
    model.setEqualizerWeight(i,1);
  }
  generalizeAndRender();
}",0.7754442649434572
140940,"/** 
 * Creates a slider for the equalizer GUI.
 * @param frequencyBand id of the equalizer frequency band
 * @return the new slider
 */
private JSlider createEqualizerSlider(int frequencyBand){
  JSlider jSlider=new javax.swing.JSlider();
  jSlider.setMajorTickSpacing(25);
  jSlider.setMinorTickSpacing(5);
  jSlider.setOrientation(javax.swing.JSlider.VERTICAL);
  Dimension dim=jSlider.getPreferredSize();
  dim.height=160;
  dim.width=29;
  jSlider.setPreferredSize(dim);
  jSlider.setPaintTicks(true);
  jSlider.setValue(100);
  jSlider.setMaximum(100);
  jSlider.setMinimum(0);
  jSlider.setName(Integer.toString(frequencyBand));
  jSlider.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      JSlider slider=(JSlider)e.getSource();
      if (!slider.getValueIsAdjusting()) {
        int frequencyBand=Integer.parseInt(slider.getName());
        float w=slider.getValue() / 100f;
        if (w != model.getGeneralizationEqualizerWeight(frequencyBand)) {
          model.setGeneralizationEqualizerWeight(frequencyBand,w);
          generalizeAndRender();
        }
      }
    }
  }
);
  return jSlider;
}","/** 
 * Creates a slider for the equalizer GUI.
 * @param frequencyBand id of the equalizer frequency band
 * @return the new slider
 */
private JSlider createEqualizerSlider(int frequencyBand){
  JSlider jSlider=new javax.swing.JSlider();
  jSlider.setMajorTickSpacing(25);
  jSlider.setMinorTickSpacing(5);
  jSlider.setOrientation(javax.swing.JSlider.VERTICAL);
  Dimension dim=jSlider.getPreferredSize();
  dim.height=160;
  dim.width=29;
  jSlider.setPreferredSize(dim);
  jSlider.setPaintTicks(true);
  jSlider.setValue(100);
  jSlider.setMaximum(100);
  jSlider.setMinimum(0);
  jSlider.setName(Integer.toString(frequencyBand));
  jSlider.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      JSlider slider=(JSlider)e.getSource();
      if (!slider.getValueIsAdjusting()) {
        int frequencyBand=Integer.parseInt(slider.getName());
        float w=slider.getValue() / 100f;
        if (w != model.getEqualizerWeight(frequencyBand)) {
          model.setEqualizerWeight(frequencyBand,w);
          generalizeAndRender();
        }
      }
    }
  }
);
  return jSlider;
}",0.987794245858762
140941,"/** 
 * Read a grid from a stream in ESRI ASCII format.
 * @param input The stream to read from. The stream is closed at the end.
 * @param progressIndicator A WorkerProgress to inform about the progress.
 * @return The read grid.
 * @throws java.io.IOException
 */
public Grid read(InputStream input,ProgressIndicator progressIndicator) throws IOException {
  if (progressIndicator != null) {
    progressIndicator.startProgress();
  }
  BufferedReader br=null;
  try {
    InputStreamReader in=new InputStreamReader(input);
    br=new BufferedReader(in);
    GridHeaderImporter header=new GridHeaderImporter();
    String firstGridLine=header.readHeader(br,true);
    Grid grid=new Grid(header.getCols(),header.getRows(),header.getCellSize());
    grid.setWest(header.getWest());
    grid.setSouth(header.getSouth());
    BlockingQueue<String> q=new LinkedBlockingQueue<>(64);
    q.put(firstGridLine);
    Producer producer=new Producer(q,br);
    Thread producerThread=new Thread(producer);
    producerThread.start();
    Consumer consumer=new Consumer(q,grid,header.getNoDataValue(),progressIndicator);
    Thread consumerThread=new Thread(consumer);
    consumerThread.start();
    try {
      producerThread.join();
    }
 catch (    InterruptedException ex) {
      consumerThread.interrupt();
    }
    consumerThread.join();
    return grid;
  }
 catch (  InterruptedException ex) {
    return null;
  }
 finally {
    try {
      if (br != null) {
        br.close();
      }
    }
 catch (    IOException exc) {
    }
    if (producerConsumerException != null) {
      throw new IOException(producerConsumerException);
    }
  }
}","/** 
 * Read a grid from a stream in ESRI ASCII format.
 * @param input The stream to read from. The stream is closed at the end.
 * @param progressIndicator A WorkerProgress to inform about the progress.
 * @return The read grid.
 * @throws java.io.IOException
 */
public Grid read(InputStream input,ProgressIndicator progressIndicator) throws IOException {
  if (progressIndicator != null) {
    progressIndicator.startProgress();
  }
  BufferedReader br=null;
  try {
    InputStreamReader in=new InputStreamReader(input);
    br=new BufferedReader(in);
    GridHeaderImporter header=new GridHeaderImporter();
    String firstGridLine=header.readHeader(br,true);
    if (header.isValid() == false) {
      throw new IOException(""String_Node_Str"");
    }
    Grid grid=new Grid(header.getCols(),header.getRows(),header.getCellSize());
    grid.setWest(header.getWest());
    grid.setSouth(header.getSouth());
    BlockingQueue<String> q=new LinkedBlockingQueue<>(64);
    q.put(firstGridLine);
    Producer producer=new Producer(q,br);
    Thread producerThread=new Thread(producer);
    producerThread.start();
    Consumer consumer=new Consumer(q,grid,header.getNoDataValue(),progressIndicator);
    Thread consumerThread=new Thread(consumer);
    consumerThread.start();
    try {
      producerThread.join();
    }
 catch (    InterruptedException ex) {
      consumerThread.interrupt();
    }
    consumerThread.join();
    return grid;
  }
 catch (  InterruptedException ex) {
    return null;
  }
 finally {
    try {
      if (br != null) {
        br.close();
      }
    }
 catch (    IOException exc) {
    }
    if (producerConsumerException != null) {
      throw new IOException(producerConsumerException);
    }
  }
}",0.9730530056262956
140942,"/** 
 * Set the grid.
 * @param grid The new grid.
 */
public void setGrid(Grid grid){
  this.grid=grid;
  gridMinMax=grid.getMinMax();
}","/** 
 * Set the grid. This should be followed by a call to filterGrid().
 * @param grid The new grid.
 */
public void setGrid(Grid grid){
  this.grid=grid;
  gridMinMax=grid.getMinMax();
}",0.8430769230769231
140943,"/** 
 * Creates a new BufferedImage
 * @param scale Scale factor by which the created image will be larger thanthe generalized grid.
 * @return A new image or null
 */
public BufferedImage createDestinationImage(int scale){
  if (backgroundVisualization == ColorVisualization.BIVARIATE) {
    Grid grid1=bivariateColorRender.getAttribute1Grid();
    if (grid1 != null) {
      return new BufferedImage(grid1.getCols(),grid1.getRows(),BufferedImage.TYPE_INT_ARGB);
    }
  }
  if (generalizedGrid == null) {
    return null;
  }
  int cols=generalizedGrid.getCols() * scale;
  int rows=generalizedGrid.getRows() * scale;
  return new BufferedImage(cols,rows,BufferedImage.TYPE_INT_ARGB);
}","/** 
 * Creates a new BufferedImage
 * @param scale Scale factor by which the created image will be larger thanthe grid.
 * @return A new image or null
 */
public BufferedImage createDestinationImage(int scale){
  assert(scale > 0);
  if (backgroundVisualization == ColorVisualization.BIVARIATE) {
    Grid grid1=bivariateColorRender.getAttribute1Grid();
    if (grid1 != null) {
      return new BufferedImage(grid1.getCols(),grid1.getRows(),BufferedImage.TYPE_INT_ARGB);
    }
  }
  if (grid == null) {
    return null;
  }
  int cols=grid.getCols() * scale;
  int rows=grid.getRows() * scale;
  return new BufferedImage(cols,rows,BufferedImage.TYPE_INT_ARGB);
}",0.9511834319526628
140944,"public void initDisplayImage(){
  GraphicsDevice gd=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
  int screenWidth=gd.getDisplayMode().getWidth();
  int screenHeight=gd.getDisplayMode().getHeight();
  int imageScaleFactor=1;
  Dimension dim=model.getGridDimensionForDisplay();
  double heightRatio=(double)screenHeight / dim.getHeight();
  double widthRatio=(double)screenWidth / dim.getWidth();
  double maxRatio=Math.max(heightRatio,widthRatio);
  if (maxRatio > 1) {
    imageScaleFactor=(int)Math.ceil(maxRatio);
  }
  BufferedImage image=model.createDestinationImage(imageScaleFactor);
  navigableImagePanel.setImage(image);
  navigableImagePanel.setPixelScale(1d / imageScaleFactor);
  navigableImagePanel.autoZoom();
}","public void initDisplayImage(){
  GraphicsDevice gd=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
  int screenWidth=gd.getDisplayMode().getWidth();
  int screenHeight=gd.getDisplayMode().getHeight();
  int imageScaleFactor=1;
  Dimension dim=model.getGridDimensionForDisplay();
  double heightRatio=(double)screenHeight / dim.getHeight();
  double widthRatio=(double)screenWidth / dim.getWidth();
  double maxRatio=Math.max(heightRatio,widthRatio);
  if (maxRatio > 1) {
    imageScaleFactor=(int)Math.ceil(maxRatio);
  }
  BufferedImage image=model.createDestinationImage(imageScaleFactor);
  if (image != null) {
    navigableImagePanel.setImage(image);
    navigableImagePanel.setPixelScale(1d / imageScaleFactor);
    navigableImagePanel.autoZoom();
  }
}",0.9786407766990292
140945,"public BufferedImage getImage(){
  return navigableImagePanel.getImage();
}","public BufferedImage getImage(){
  BufferedImage displayImage=navigableImagePanel.getImage();
  if (displayImage == null) {
    initDisplayImage();
  }
  return navigableImagePanel.getImage();
}",0.5576208178438662
140946,"@Override protected void operate(Grid src,Grid dst,int startRow,int endRow){
  if (src == null) {
    throw new IllegalArgumentException();
  }
  final int filterSize=filterSize();
  final int halfFilterSize=filterSize / 2;
  final int cols=src.getCols();
  final int rows=src.getRows();
  float[][] srcGrid=src.getGrid();
  float[][] dstGrid=dst.getGrid();
  float[] weights=laplacianPyramid.createConstantWeights(0);
  for (int i=0; i < Math.min(levels,weights.length); i++) {
    weights[i]=1;
  }
  Grid highPassGrid=laplacianPyramid.sumLevels(weights,true);
  for (int row=startRow; row < halfFilterSize; row++) {
    for (int col=0; col < cols; col++) {
      operateBorder(src,dst,col,row,highPassGrid);
    }
  }
  for (int row=rows - halfFilterSize; row < endRow; row++) {
    for (int col=0; col < cols; col++) {
      operateBorder(src,dst,col,row,highPassGrid);
    }
  }
  startRow=Math.max(halfFilterSize,startRow);
  endRow=Math.min(src.getRows() - halfFilterSize,endRow);
  for (int col=0; col < halfFilterSize; col++) {
    for (int row=startRow; row < endRow; row++) {
      operateBorder(src,dst,col,row,highPassGrid);
    }
  }
  for (int col=cols - halfFilterSize; col < cols; col++) {
    for (int row=startRow; row < endRow; row++) {
      operateBorder(src,dst,col,row,highPassGrid);
    }
  }
  final float npts=filterSize * filterSize;
  for (int row=startRow; row < endRow; row++) {
    float[] dstRow=dstGrid[row];
    for (int col=halfFilterSize; col < cols - halfFilterSize; col++) {
      float sqDif=0;
      for (int r=row - halfFilterSize; r <= row + halfFilterSize; r++) {
        float[] srcRow=srcGrid[r];
        for (int c=col - halfFilterSize; c <= col + halfFilterSize; c++) {
          float dif=highPassGrid.getValue(c,r);
          sqDif+=dif * dif;
        }
      }
      float std=(float)Math.sqrt(sqDif / npts);
      dstRow[col]=std;
    }
  }
}","@Override protected void operate(Grid src,Grid dst,int startRow,int endRow){
  if (src == null) {
    throw new IllegalArgumentException();
  }
  final int filterSize=filterSize();
  final int halfFilterSize=filterSize / 2;
  final int cols=src.getCols();
  final int rows=src.getRows();
  float[][] srcGrid=src.getGrid();
  float[][] dstGrid=dst.getGrid();
  for (int row=startRow; row < halfFilterSize; row++) {
    for (int col=0; col < cols; col++) {
      operateBorder(src,dst,col,row,highPassGrid);
    }
  }
  for (int row=rows - halfFilterSize; row < endRow; row++) {
    for (int col=0; col < cols; col++) {
      operateBorder(src,dst,col,row,highPassGrid);
    }
  }
  startRow=Math.max(halfFilterSize,startRow);
  endRow=Math.min(src.getRows() - halfFilterSize,endRow);
  for (int col=0; col < halfFilterSize; col++) {
    for (int row=startRow; row < endRow; row++) {
      operateBorder(src,dst,col,row,highPassGrid);
    }
  }
  for (int col=cols - halfFilterSize; col < cols; col++) {
    for (int row=startRow; row < endRow; row++) {
      operateBorder(src,dst,col,row,highPassGrid);
    }
  }
  final float npts=filterSize * filterSize;
  for (int row=startRow; row < endRow; row++) {
    float[] dstRow=dstGrid[row];
    for (int col=halfFilterSize; col < cols - halfFilterSize; col++) {
      float sqDif=0;
      for (int r=row - halfFilterSize; r <= row + halfFilterSize; r++) {
        float[] srcRow=srcGrid[r];
        for (int c=col - halfFilterSize; c <= col + halfFilterSize; c++) {
          float dif=highPassGrid.getValue(c,r);
          sqDif+=dif * dif;
        }
      }
      float std=(float)Math.sqrt(sqDif / npts);
      dstRow[col]=std;
    }
  }
}",0.2249511582472788
140947,"public GridStandardDeviationOperator(int levels,LaplacianPyramid laplacianPyramid){
  this.levels=levels;
  this.laplacianPyramid=laplacianPyramid;
}","public GridStandardDeviationOperator(int levels,LaplacianPyramid laplacianPyramid){
  this.levels=levels;
  float[] weights=laplacianPyramid.createConstantWeights(0);
  for (int i=0; i < Math.min(levels,weights.length); i++) {
    weights[i]=1;
  }
  highPassGrid=laplacianPyramid.sumLevels(weights,true);
}",0.631578947368421
140948,"private void filterComboBoxItemStateChanged(java.awt.event.ItemEvent evt){
  if (evt.getStateChange() == ItemEvent.SELECTED) {
switch (filterComboBox.getSelectedIndex()) {
case 0:
      model.setGeneralization(Model.Generalization.NONE);
    break;
case 1:
  model.setGeneralization(Model.Generalization.GAUSSIAN_BLUR);
break;
case 2:
model.setGeneralization(Model.Generalization.EQUALIZER);
break;
case 3:
model.setGeneralization(Model.Generalization.LOCAL);
break;
case 4:
model.setGeneralization(Model.Generalization.LIC_HEIGHTS);
GridLICOperator.method=GridLICOperator.GeneralizationLICMethod.GAUSSIAN_CURVED_SAMPLING2_SHARPENING;
break;
case 5:
model.setGeneralization(Model.Generalization.LIC_NORMALS);
GridLICOperator.method=GridLICOperator.GeneralizationLICMethod.LIC_NORMALS;
break;
}
updateFilterPanelsVisibility();
updateGeneralizationGUIEnabledState();
generalizeAndRender();
}
}","private void filterComboBoxItemStateChanged(java.awt.event.ItemEvent evt){
  if (evt.getStateChange() == ItemEvent.SELECTED) {
switch (filterComboBox.getSelectedIndex()) {
case 0:
      model.setGeneralization(Model.Generalization.NONE);
    break;
case 1:
  model.setGeneralization(Model.Generalization.GAUSSIAN_BLUR);
break;
case 2:
model.setGeneralization(Model.Generalization.EQUALIZER);
break;
case 3:
model.setGeneralization(Model.Generalization.LOCAL);
break;
case 4:
model.setGeneralization(Model.Generalization.LIC_HEIGHTS);
GridLICOperator.method=GridLICOperator.GeneralizationLICMethod.GAUSSIAN_CURVED_SAMPLING2_SHARPENING;
break;
case 5:
model.setGeneralization(Model.Generalization.LIC_NORMALS);
GridLICOperator.method=GridLICOperator.GeneralizationLICMethod.LIC_NORMALS;
break;
}
updateFilterPanelsVisibility();
updateGUI();
generalizeAndRender();
}
}",0.9851936218678816
140949,"public SettingsPanel(){
  initComponents();
  updateGeneralizationGUIEnabledState();
  planObliquePanel.setVisible(false);
  for (int i=0; i < 8; i++) {
    equalizerSlidersPanel.add(createEqualizerSlider(i));
  }
}","public SettingsPanel(){
  initComponents();
  planObliquePanel.setVisible(false);
  for (int i=0; i < 8; i++) {
    equalizerSlidersPanel.add(createEqualizerSlider(i));
  }
}",0.8946015424164524
140950,"private void licNormalsSharpeningSliderStateChanged(javax.swing.event.ChangeEvent evt){
  if (licNormalsSharpeningSlider.getValueIsAdjusting() == false && model.licNormalsSharpening != licNormalsSharpeningSlider.getValue() / 100d) {
    model.licNormalsSharpening=licNormalsSharpeningSlider.getValue() / 100d;
    updateGeneralizationGUIEnabledState();
    generalizeAndRender();
  }
}","private void licNormalsSharpeningSliderStateChanged(javax.swing.event.ChangeEvent evt){
  if (licNormalsSharpeningSlider.getValueIsAdjusting() == false && model.licNormalsSharpening != licNormalsSharpeningSlider.getValue() / 100d) {
    model.licNormalsSharpening=licNormalsSharpeningSlider.getValue() / 100d;
    generalizeAndRender();
  }
}",0.9105914718019256
140951,"private void licHeightsSharpeningSliderStateChanged(javax.swing.event.ChangeEvent evt){
  if (licHeightsSharpeningSlider.getValueIsAdjusting() == false && model.licHeightsSharpening != licHeightsSharpeningSlider.getValue() / 100d) {
    model.licHeightsSharpening=licHeightsSharpeningSlider.getValue() / 100d;
    updateGeneralizationGUIEnabledState();
    generalizeAndRender();
  }
}","private void licHeightsSharpeningSliderStateChanged(javax.swing.event.ChangeEvent evt){
  if (licHeightsSharpeningSlider.getValueIsAdjusting() == false && model.licHeightsSharpening != licHeightsSharpeningSlider.getValue() / 100d) {
    model.licHeightsSharpening=licHeightsSharpeningSlider.getValue() / 100d;
    generalizeAndRender();
  }
}",0.9105914718019256
140952,"protected void updateGUI(){
  updateLICSharpeningSliderLabels(licNormalsSharpeningLimitSlider,licNormalsSharpeningLimitLabel);
  updateLICSharpeningSliderLabels(licHeightsSharpeningLimitSlider,licHeightsSharpeningLimitLabel);
  flatAreasSlopeSlider.setValue((int)Math.round(model.flatAreasMinSlope * 10));
  flatAreasMinAreaSizeSpinner.setValue(model.flatAreasMinSize);
  flatAreasMaxHolesSizeSpinner.setValue(model.flatAreasMaxHolesSize);
  flatAreasBreachFillingIterationsSpinner.setValue(model.flatAreasBreachFillingIterations);
  flatAreasColorButton.setColor(new Color(model.flatAreasARGB,true));
  licNormalsFilterSizeSlider.setValue((int)Math.round(model.licNormalsFilterSize * 20));
  licNormalsIterationsSlider.setValue(model.licNormalsIterations);
  licNormalsCarvingSlider.setValue(model.licNormalsCarving);
  licNormalsBlurSlider.setValue((int)Math.round(model.licNormalsGaussianBlurRadius));
  licNormalsSharpeningSlider.setValue((int)Math.round(model.licNormalsSharpening * 100));
  licNormalsSharpeningLimitSlider.setValue((int)Math.round(model.getLicNormalsSharpeningLimit() * 100));
  licNormalsShowFlatAreasCheckBox.setSelected(model.foregroundVisualization == Model.ForegroundVisualization.FLAT_AREAS_MASK);
  licNormalsFlatAreasCheckBox.setSelected(model.licNormalsApplyFlatAreasMask);
  licHeightsFilterSizeSlider.setValue((int)Math.round(model.licHeightsFilterSize * 20));
  licHeightsIterationsSlider.setValue(model.licHeightsIterations);
  licHeightsBlurSlider.setValue((int)Math.round(model.licHeightsGaussianBlurRadius));
  licHeightsSharpeningSlider.setValue((int)Math.round(model.licHeightsSharpening * 100));
  licHeightsSharpeningLimitSlider.setValue((int)Math.round(model.licHeightsSharpeningLimit * 100));
  generalizationGaussianBlurRadiusSlider.setValue((int)Math.round(model.generalizationGaussianBlurRadius * 10));
  azimuthSlider.setValue(model.azimuth);
  zenithSlider.setValue(model.zenith);
  ambientLightSlider.setValue((int)Math.round(model.ambientLight * 100));
switch (model.foregroundVisualization) {
case NONE:
    overlayComboBox.setSelectedIndex(0);
  break;
case FLAT_AREAS_MASK:
overlayComboBox.setSelectedIndex(1);
break;
case ILLUMINATED_CONTOURS:
overlayComboBox.setSelectedIndex(2);
break;
case SHADED_CONTOURS:
overlayComboBox.setSelectedIndex(3);
break;
}
contoursShadowLineWidthHighValueField.setValue(model.contoursShadowWidthHigh);
contoursShadowLineWidthLowValueField.setValue(model.contoursShadowWidthLow);
contoursIlluminatedLineWidthHighValueField.setValue(model.contoursIlluminatedWidthHigh);
contoursIlluminatedLineWidthLowValueField.setValue(model.contoursIlluminatedWidthLow);
contoursMinLineWidthSlider.setValue((int)Math.round(model.contoursMinWidth * 10));
contoursMinDistanceSlider.setValue((int)Math.round(model.contoursMinDist * 10));
contoursGradientSlider.setValue(model.contoursGradientAngle);
contoursIntervalTextBox.setValue(model.contoursInterval);
contoursDespeckleSlider.setValue((int)Math.round(model.contoursAspectGaussBlur * 20D));
contoursTransitionSlider.setValue(model.contoursTransitionAngle);
verticalExaggerationFormattedTextField.setValue(model.shadingVerticalExaggeration);
colorGradientSlider.setValues(model.colorRamp.colorPositions,model.colorRamp.colors);
solidColorButton.setColor(model.solidColor);
planObliqueSlider.setValue(model.planObliqueAngle);
int nbrLaplacianBands=model.getLaplacianBandsCount();
localGridHighPassSlider.setEnabled(nbrLaplacianBands > 0);
if (nbrLaplacianBands > 0) {
localGridHighPassSlider.setMaximum(nbrLaplacianBands * 10);
java.util.Hashtable labels=localGridHighPassSlider.createStandardLabels(10);
java.util.Enumeration e=labels.elements();
while (e.hasMoreElements()) {
javax.swing.JComponent comp=(javax.swing.JComponent)e.nextElement();
if (comp instanceof javax.swing.JLabel) {
javax.swing.JLabel label=(javax.swing.JLabel)(comp);
String str=Integer.toString(Integer.parseInt(label.getText()) / 10);
label.setText(str);
}
}
localGridHighPassSlider.setLabelTable(labels);
}
localGridHighPassSlider.setValue((int)Math.round(model.getLocalGridHighPassWeight() * 10));
localGridStandardDeviationFilterSizeSlider.setValue(model.getLocalGridStandardDeviationLevels());
colorPopupMenu.removeAll();
for (ColorRamp cr : model.predefinedColorRamps) {
JMenuItem colorMenuItem=new JMenuItem(cr.name);
colorMenuItem.addActionListener(new java.awt.event.ActionListener(){
@Override public void actionPerformed(java.awt.event.ActionEvent evt){
JMenuItem menuItem=(JMenuItem)evt.getSource();
model.selectColorRamp(menuItem.getText());
colorGradientSlider.setValues(model.colorRamp.colorPositions,model.colorRamp.colors);
renderImage(REGULAR);
}
}
);
colorPopupMenu.add(colorMenuItem);
}
contoursIlluminatedColorButton.setColor(new Color(model.contoursIlluminatedColor));
contoursShadowedColorButton.setColor(new Color(model.contoursShadowedColor));
int exp=(int)Math.round(model.getColorLUTRenderer().getExponentP() * 10);
idwExponentSlider.setValue(exp);
idwRadioButton.setSelected(model.getColorLUTRenderer().isUseIDW());
updateVisualizationPanelsVisibility();
updateGeneralizationGUIEnabledState();
updateFilterPanelsVisibility();
}","protected void updateGUI(){
  updateLICSharpeningSliderLabels(licNormalsSharpeningLimitSlider,licNormalsSharpeningLimitLabel);
  updateLICSharpeningSliderLabels(licHeightsSharpeningLimitSlider,licHeightsSharpeningLimitLabel);
  flatAreasSlopeSlider.setValue((int)Math.round(model.flatAreasMinSlope * 10));
  flatAreasMinAreaSizeSpinner.setValue(model.flatAreasMinSize);
  flatAreasMaxHolesSizeSpinner.setValue(model.flatAreasMaxHolesSize);
  flatAreasBreachFillingIterationsSpinner.setValue(model.flatAreasBreachFillingIterations);
  flatAreasColorButton.setColor(new Color(model.flatAreasARGB,true));
  licNormalsFilterSizeSlider.setValue((int)Math.round(model.licNormalsFilterSize * 20));
  licNormalsIterationsSlider.setValue(model.licNormalsIterations);
  licNormalsCarvingSlider.setValue(model.licNormalsCarving);
  licNormalsBlurSlider.setValue((int)Math.round(model.licNormalsGaussianBlurRadius));
  licNormalsSharpeningSlider.setValue((int)Math.round(model.licNormalsSharpening * 100));
  licNormalsSharpeningLimitSlider.setValue((int)Math.round(model.getLicNormalsSharpeningLimit() * 100));
  licNormalsShowFlatAreasCheckBox.setSelected(model.foregroundVisualization == Model.ForegroundVisualization.FLAT_AREAS_MASK);
  licNormalsFlatAreasCheckBox.setSelected(model.licNormalsApplyFlatAreasMask);
  licHeightsFilterSizeSlider.setValue((int)Math.round(model.licHeightsFilterSize * 20));
  licHeightsIterationsSlider.setValue(model.licHeightsIterations);
  licHeightsBlurSlider.setValue((int)Math.round(model.licHeightsGaussianBlurRadius));
  licHeightsSharpeningSlider.setValue((int)Math.round(model.licHeightsSharpening * 100));
  licHeightsSharpeningLimitSlider.setValue((int)Math.round(model.licHeightsSharpeningLimit * 100));
  generalizationGaussianBlurRadiusSlider.setValue((int)Math.round(model.generalizationGaussianBlurRadius * 10));
  azimuthSlider.setValue(model.azimuth);
  zenithSlider.setValue(model.zenith);
  ambientLightSlider.setValue((int)Math.round(model.ambientLight * 100));
switch (model.foregroundVisualization) {
case NONE:
    overlayComboBox.setSelectedIndex(0);
  break;
case FLAT_AREAS_MASK:
overlayComboBox.setSelectedIndex(1);
break;
case ILLUMINATED_CONTOURS:
overlayComboBox.setSelectedIndex(2);
break;
case SHADED_CONTOURS:
overlayComboBox.setSelectedIndex(3);
break;
}
contoursShadowLineWidthHighValueField.setValue(model.contoursShadowWidthHigh);
contoursShadowLineWidthLowValueField.setValue(model.contoursShadowWidthLow);
contoursIlluminatedLineWidthHighValueField.setValue(model.contoursIlluminatedWidthHigh);
contoursIlluminatedLineWidthLowValueField.setValue(model.contoursIlluminatedWidthLow);
contoursMinLineWidthSlider.setValue((int)Math.round(model.contoursMinWidth * 10));
contoursMinDistanceSlider.setValue((int)Math.round(model.contoursMinDist * 10));
contoursGradientSlider.setValue(model.contoursGradientAngle);
contoursIntervalTextBox.setValue(model.contoursInterval);
contoursDespeckleSlider.setValue((int)Math.round(model.contoursAspectGaussBlur * 20D));
contoursTransitionSlider.setValue(model.contoursTransitionAngle);
verticalExaggerationFormattedTextField.setValue(model.shadingVerticalExaggeration);
colorGradientSlider.setValues(model.colorRamp.colorPositions,model.colorRamp.colors);
solidColorButton.setColor(model.solidColor);
planObliqueSlider.setValue(model.planObliqueAngle);
int nbrLaplacianBands=model.getLaplacianBandsCount();
localGridHighPassSlider.setEnabled(nbrLaplacianBands > 0);
if (nbrLaplacianBands > 0) {
localGridHighPassSlider.setMaximum(nbrLaplacianBands * 10);
java.util.Hashtable labels=localGridHighPassSlider.createStandardLabels(10);
java.util.Enumeration e=labels.elements();
while (e.hasMoreElements()) {
javax.swing.JComponent comp=(javax.swing.JComponent)e.nextElement();
if (comp instanceof javax.swing.JLabel) {
javax.swing.JLabel label=(javax.swing.JLabel)(comp);
String str=Integer.toString(Integer.parseInt(label.getText()) / 10);
label.setText(str);
}
}
localGridHighPassSlider.setLabelTable(labels);
}
localGridHighPassSlider.setValue((int)Math.round(model.getLocalGridHighPassWeight() * 10));
localGridStandardDeviationFilterSizeSlider.setValue(model.getLocalGridStandardDeviationLevels());
colorPopupMenu.removeAll();
for (ColorRamp cr : model.predefinedColorRamps) {
JMenuItem colorMenuItem=new JMenuItem(cr.name);
colorMenuItem.addActionListener(new java.awt.event.ActionListener(){
@Override public void actionPerformed(java.awt.event.ActionEvent evt){
JMenuItem menuItem=(JMenuItem)evt.getSource();
model.selectColorRamp(menuItem.getText());
colorGradientSlider.setValues(model.colorRamp.colorPositions,model.colorRamp.colors);
renderImage(REGULAR);
}
}
);
colorPopupMenu.add(colorMenuItem);
}
contoursIlluminatedColorButton.setColor(new Color(model.contoursIlluminatedColor));
contoursShadowedColorButton.setColor(new Color(model.contoursShadowedColor));
int exp=(int)Math.round(model.getColorLUTRenderer().getExponentP() * 10);
idwExponentSlider.setValue(exp);
idwRadioButton.setSelected(model.getColorLUTRenderer().isUseIDW());
if (model.getGeneralization() == Model.Generalization.EQUALIZER) {
Component[] sliders=equalizerSlidersPanel.getComponents();
int nbrSliders=sliders.length;
int nbrBands=model.getLaplacianBandsCount();
for (int i=0; i < nbrSliders; i++) {
JSlider slider=(JSlider)sliders[i];
slider.setEnabled(i < nbrBands);
if (i >= nbrBands) {
setSliderValueWithoutTriggeringEvent(slider,100);
}
}
}
updateVisualizationPanelsVisibility();
updateFilterPanelsVisibility();
}",0.9560645888096132
140953,"public GridExporterWorker(Grid grid,Frame frame,String filePath,String dialogTitle,String message){
  super(frame,dialogTitle,message);
  this.grid=grid;
  this.filePath=filePath;
}","public GridExporterWorker(Grid grid,Frame frame,String filePath,String dialogTitle,String message){
  super(frame,dialogTitle,message);
  this.grid=grid;
  this.frame=frame;
  this.filePath=filePath;
}",0.9476439790575916
140954,"@Override public void done(){
  if (isCancelled()) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        closeGUI();
      }
    }
);
    return;
  }
 else {
    closeGUI();
  }
  try {
    get();
  }
 catch (  InterruptedException|CancellationException e) {
  }
catch (  Throwable e) {
    String msg=""String_Node_Str"";
    ErrorDialog.showErrorDialog(msg,""String_Node_Str"",e,null);
  }
}","@Override public void done(){
  if (isCancelled()) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        closeGUI();
      }
    }
);
    return;
  }
 else {
    closeGUI();
  }
  try {
    get();
  }
 catch (  InterruptedException|CancellationException e) {
  }
catch (  Throwable e) {
    String msg=""String_Node_Str"";
    ErrorDialog.showErrorDialog(msg,""String_Node_Str"",e,frame);
  }
}",0.9707602339181286
140955,"public ContoursExporterWorker(Model model,String filePath,String imageFileFormat,int scale,Frame frame,String dialogTitle,String message){
  super(frame,dialogTitle,message);
  this.filePath=filePath;
  this.imageFileFormat=imageFileFormat;
  this.model=model;
  this.scale=scale;
}","public ContoursExporterWorker(Model model,String filePath,String imageFileFormat,int scale,Frame frame,String dialogTitle,String message){
  super(frame,dialogTitle,message);
  this.filePath=filePath;
  this.imageFileFormat=imageFileFormat;
  this.model=model;
  this.scale=scale;
  this.frame=frame;
}",0.9657534246575342
140956,"@Override public void done(){
  if (isCancelled()) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        closeGUI();
      }
    }
);
    return;
  }
 else {
    closeGUI();
  }
  try {
    get();
    String worldFilePath=WorldFileExporter.constructPath(filePath);
    Grid grid=model.getFilteredGrid();
    double cellSize=grid.getCellSize() / scale;
    double west=grid.getWest() - cellSize / 2;
    double north=grid.getNorth() + cellSize / 2;
    WorldFileExporter.writeWorldFile(worldFilePath,cellSize,west,north);
    WKTProjectionFile.write(grid.getPrjFileContent(),filePath);
  }
 catch (  ExecutionException e) {
    new File(filePath).delete();
    String msg=""String_Node_Str"";
    String title=""String_Node_Str"";
    ErrorDialog.showErrorDialog(msg,title,e,null);
  }
catch (  InterruptedException|CancellationException e) {
  }
catch (  IOException exc) {
    new File(filePath).delete();
  }
 finally {
    closeGUI();
  }
}","@Override public void done(){
  if (isCancelled()) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        closeGUI();
      }
    }
);
    return;
  }
 else {
    closeGUI();
  }
  try {
    get();
    String worldFilePath=WorldFileExporter.constructPath(filePath);
    Grid grid=model.getFilteredGrid();
    double cellSize=grid.getCellSize() / scale;
    double west=grid.getWest() - cellSize / 2;
    double north=grid.getNorth() + cellSize / 2;
    WorldFileExporter.writeWorldFile(worldFilePath,cellSize,west,north);
    WKTProjectionFile.write(grid.getPrjFileContent(),filePath);
  }
 catch (  ExecutionException e) {
    new File(filePath).delete();
    String msg=""String_Node_Str"";
    String title=""String_Node_Str"";
    ErrorDialog.showErrorDialog(msg,title,e,frame);
  }
catch (  InterruptedException|CancellationException e) {
  }
catch (  IOException exc) {
    new File(filePath).delete();
  }
 finally {
    closeGUI();
  }
}",0.99539641943734
140957,"private void bivariate(int startRow,int endRow){
  final int nCols=dstImage.getWidth();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    if (bivariateColorRenderer.hasGrids() == false) {
      for (int col=0; col < nCols; ++col) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
    }
 else {
      for (int col=0; col < nCols; ++col) {
        int argb=bivariateColorRenderer.renderPixel(col,row);
        imageBuffer[row * nCols + col]=argb;
      }
    }
  }
}","private void bivariate(int startRow,int endRow){
  final int nCols=dstImage.getWidth();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    if (bivariateColorRenderer.hasGrids() == false) {
      for (int col=0; col < nCols; ++col) {
        if (col % CANCEL_CHECK == 0 && isCancelled()) {
          return;
        }
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
    }
 else {
      for (int col=0; col < nCols; ++col) {
        if (col % CANCEL_CHECK == 0 && isCancelled()) {
          return;
        }
        int argb=bivariateColorRenderer.renderPixel(col,row);
        imageBuffer[row * nCols + col]=argb;
      }
    }
  }
}",0.8761061946902655
140958,"private void hypsometricShading(Grid grid,int startRow,int endRow){
  final int nCols=grid.getCols();
  final int nRows=grid.getRows();
  final float[][] gr=grid.getGrid();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      final double gray=shade(gr,col,row,nCols,nRows);
      if (Double.isNaN(gray)) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
 else {
        final float v=gr[row][col];
        final int argb=getLinearRGB(v,minElev,maxElev,(float)(gray / 255d));
        imageBuffer[row * nCols + col]=argb;
      }
    }
  }
}","private void hypsometricShading(Grid grid,int startRow,int endRow){
  final int nCols=grid.getCols();
  final int nRows=grid.getRows();
  final float[][] gr=grid.getGrid();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      if (col % CANCEL_CHECK == 0 && isCancelled()) {
        return;
      }
      final double gray=shade(gr,col,row,nCols,nRows);
      if (Double.isNaN(gray)) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
 else {
        final float v=gr[row][col];
        final int argb=getLinearRGB(v,minElev,maxElev,(float)(gray / 255d));
        imageBuffer[row * nCols + col]=argb;
      }
    }
  }
}",0.948
140959,"private void slope(Grid grid,int startRow,int endRow){
  final int nCols=dstImage.getWidth();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      final float gradient=(float)grid.get8NeighborGradient(col,row);
      if (Float.isNaN(gradient)) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
 else {
        final int argb=getLinearRGB(gradient,0,1,1);
        imageBuffer[row * nCols + col]=argb;
      }
    }
  }
}","private void slope(Grid grid,int startRow,int endRow){
  final int nCols=dstImage.getWidth();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      if (col % CANCEL_CHECK == 0 && isCancelled()) {
        return;
      }
      final float gradient=(float)grid.get8NeighborGradient(col,row);
      if (Float.isNaN(gradient)) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
 else {
        final int argb=getLinearRGB(gradient,0,1,1);
        imageBuffer[row * nCols + col]=argb;
      }
    }
  }
}",0.9379968203497616
140960,"private void bivariateShading(Grid grid,int startRow,int endRow){
  if (grid == null) {
    return;
  }
  final int nCols=dstImage.getWidth();
  final int nRows=grid.getRows();
  final float[][] gr=grid.getGrid();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    if (bivariateColorRenderer.hasGrids() == false) {
      for (int col=0; col < nCols; ++col) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
    }
 else {
      for (int col=0; col < nCols; ++col) {
        int gray=(int)shade(gr,col,row,nCols,nRows);
        if (Double.isNaN(gray)) {
          imageBuffer[row * nCols + col]=VOID_COLOR;
          continue;
        }
        int rgb=bivariateColorRenderer.renderPixel(col,row);
        if (rgb == VOID_COLOR) {
          imageBuffer[row * nCols + col]=VOID_COLOR;
          continue;
        }
        int r=(rgb & 0xFF0000) >> 16;
        int g=(rgb & 0xFF00) >> 8;
        int b=rgb & 0xFF;
        r=r * gray / 255;
        g=g * gray / 255;
        b=b * gray / 255;
        imageBuffer[row * nCols + col]=b | (g << 8) | (r << 16)| 0xFF000000;
      }
    }
  }
}","private void bivariateShading(Grid grid,int startRow,int endRow){
  if (grid == null) {
    return;
  }
  final int nCols=dstImage.getWidth();
  final int nRows=grid.getRows();
  final float[][] gr=grid.getGrid();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    if (bivariateColorRenderer.hasGrids() == false) {
      for (int col=0; col < nCols; ++col) {
        if (col % CANCEL_CHECK == 0 && isCancelled()) {
          return;
        }
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
    }
 else {
      for (int col=0; col < nCols; ++col) {
        if (col % CANCEL_CHECK == 0 && isCancelled()) {
          return;
        }
        int gray=(int)shade(gr,col,row,nCols,nRows);
        if (Double.isNaN(gray)) {
          imageBuffer[row * nCols + col]=VOID_COLOR;
          continue;
        }
        int rgb=bivariateColorRenderer.renderPixel(col,row);
        if (rgb == VOID_COLOR) {
          imageBuffer[row * nCols + col]=VOID_COLOR;
          continue;
        }
        int r=(rgb & 0xFF0000) >> 16;
        int g=(rgb & 0xFF00) >> 8;
        int b=rgb & 0xFF;
        r=r * gray / 255;
        g=g * gray / 255;
        b=b * gray / 255;
        imageBuffer[row * nCols + col]=b | (g << 8) | (r << 16)| 0xFF000000;
      }
    }
  }
}",0.9352850539291218
140961,"private void profileCurvature(Grid grid,int startRow,int endRow){
  final int nCols=dstImage.getWidth();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      final float profileCurvature=GridProfileCurvatureOperator.getProfileCurvature(grid,col,row,3);
      if (Float.isNaN(profileCurvature)) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
 else {
        final int argb=getLinearRGB(profileCurvature,0,1,1);
        imageBuffer[row * nCols + col]=argb;
      }
    }
  }
}","private void profileCurvature(Grid grid,int startRow,int endRow){
  final int nCols=dstImage.getWidth();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      if (col % CANCEL_CHECK == 0 && isCancelled()) {
        return;
      }
      final float profileCurvature=GridProfileCurvatureOperator.getProfileCurvature(grid,col,row,3);
      if (Float.isNaN(profileCurvature)) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
 else {
        final int argb=getLinearRGB(profileCurvature,0,1,1);
        imageBuffer[row * nCols + col]=argb;
      }
    }
  }
}",0.9432314410480348
140962,"private void grayShading(Grid grid,int startRow,int endRow){
  final float[][] gridArray=grid.getGrid();
  final int nCols=dstImage.getWidth();
  final int nRows=dstImage.getHeight();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      final double gray=shade(gridArray,col,row,nCols,nRows);
      if (Double.isNaN(gray)) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
 else {
        final int g=(int)gray;
        imageBuffer[row * nCols + col]=g | (g << 8) | (g << 16)| 0xFF000000;
      }
    }
  }
}","private void grayShading(Grid grid,int startRow,int endRow){
  final float[][] gridArray=grid.getGrid();
  final int nCols=dstImage.getWidth();
  final int nRows=dstImage.getHeight();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      if (col % CANCEL_CHECK == 0 && isCancelled()) {
        return;
      }
      final double gray=shade(gridArray,col,row,nCols,nRows);
      if (Double.isNaN(gray)) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
 else {
        final int g=(int)gray;
        imageBuffer[row * nCols + col]=g | (g << 8) | (g << 16)| 0xFF000000;
      }
    }
  }
}",0.945682451253482
140963,"private void expositionElevationShading(Grid grid,int startRow,int endRow){
  final float[][] gridArray=grid.getGrid();
  final int nCols=dstImage.getWidth();
  final int nRows=dstImage.getHeight();
  final int[] imageBuffer=imageBuffer(dstImage);
  float[] minMax=grid.getMinMax();
  final double minVal=minMax[0];
  final double maxVal=minMax[1];
  final double range=maxVal - minVal;
  float[] hsb=new float[3];
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      final double gray=shade(gridArray,col,row,nCols,nRows);
      if (Double.isNaN(gray)) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
 else {
        final double v=grid.getValue(col,row);
        int argb=colorLUT.getColor(gray / 255d,(v - minVal) / range);
        int red=(argb >> 16) & 0xFF;
        int green=(argb >> 8) & 0xFF;
        int blue=argb & 0xFF;
        Color.RGBtoHSB(red,green,blue,hsb);
        argb=Color.HSBtoRGB(hsb[0],hsb[1],(float)(gray / 255d));
        imageBuffer[row * nCols + col]=argb;
      }
    }
  }
}","private void expositionElevationShading(Grid grid,int startRow,int endRow){
  final float[][] gridArray=grid.getGrid();
  final int nCols=dstImage.getWidth();
  final int nRows=dstImage.getHeight();
  final int[] imageBuffer=imageBuffer(dstImage);
  float[] minMax=grid.getMinMax();
  final double minVal=minMax[0];
  final double maxVal=minMax[1];
  final double range=maxVal - minVal;
  float[] hsb=new float[3];
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      if (col % CANCEL_CHECK == 0 && isCancelled()) {
        return;
      }
      final double gray=shade(gridArray,col,row,nCols,nRows);
      if (Double.isNaN(gray)) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
 else {
        final double v=grid.getValue(col,row);
        int argb=colorLUT.getColor(gray / 255d,(v - minVal) / range);
        int red=(argb >> 16) & 0xFF;
        int green=(argb >> 8) & 0xFF;
        int blue=argb & 0xFF;
        Color.RGBtoHSB(red,green,blue,hsb);
        argb=Color.HSBtoRGB(hsb[0],hsb[1],(float)(gray / 255d));
        imageBuffer[row * nCols + col]=argb;
      }
    }
  }
}",0.9666095890410958
140964,"private void aspect(Grid grid,int startRow,int endRow){
  final int nCols=dstImage.getWidth();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      final float aspect=(float)grid.getAspect(col,row);
      if (Float.isNaN(aspect)) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
 else {
        final int argb=getLinearRGB(aspect,(float)-Math.PI,(float)Math.PI,1);
        imageBuffer[row * nCols + col]=argb;
      }
    }
  }
}","private void aspect(Grid grid,int startRow,int endRow){
  final int nCols=dstImage.getWidth();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      if (col % CANCEL_CHECK == 0 && isCancelled()) {
        return;
      }
      final float aspect=(float)grid.getAspect(col,row);
      if (Float.isNaN(aspect)) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
 else {
        final int argb=getLinearRGB(aspect,(float)-Math.PI,(float)Math.PI,1);
        imageBuffer[row * nCols + col]=argb;
      }
    }
  }
}",0.9390625
140965,"private void expositionShading(Grid grid,int startRow,int endRow){
  final float[][] gridArray=grid.getGrid();
  final int nCols=dstImage.getWidth();
  final int nRows=dstImage.getHeight();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      final double gray=shade(gridArray,col,row,nCols,nRows);
      if (Double.isNaN(gray)) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
 else {
        final int argb=getLinearRGB((float)gray,0,255,1f);
        imageBuffer[row * nCols + col]=argb;
      }
    }
  }
}","private void expositionShading(Grid grid,int startRow,int endRow){
  final float[][] gridArray=grid.getGrid();
  final int nCols=dstImage.getWidth();
  final int nRows=dstImage.getHeight();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    for (int col=0; col < nCols; ++col) {
      if (col % CANCEL_CHECK == 0 && isCancelled()) {
        return;
      }
      final double gray=shade(gridArray,col,row,nCols,nRows);
      if (Double.isNaN(gray)) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
 else {
        final int argb=getLinearRGB((float)gray,0,255,1f);
        imageBuffer[row * nCols + col]=argb;
      }
    }
  }
}",0.9458333333333332
140966,"private void hypsometric(Grid grid,int startRow,int endRow){
  final int nCols=dstImage.getWidth();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    float[] gridRow=grid.getGrid()[row];
    for (int col=0; col < nCols; ++col) {
      final float v=gridRow[col];
      if (Float.isNaN(v)) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
 else {
        final int argb=getLinearRGB(v,minElev,maxElev,1);
        imageBuffer[row * nCols + col]=argb;
      }
    }
  }
}","private void hypsometric(Grid grid,int startRow,int endRow){
  final int nCols=dstImage.getWidth();
  final int[] imageBuffer=imageBuffer(dstImage);
  for (int row=startRow; row < endRow; ++row) {
    if (!reportProgress(startRow,endRow,row)) {
      return;
    }
    float[] gridRow=grid.getGrid()[row];
    for (int col=0; col < nCols; ++col) {
      if (col % CANCEL_CHECK == 0 && isCancelled()) {
        return;
      }
      final float v=gridRow[col];
      if (Float.isNaN(v)) {
        imageBuffer[row * nCols + col]=VOID_COLOR;
      }
 else {
        final int argb=getLinearRGB(v,minElev,maxElev,1);
        imageBuffer[row * nCols + col]=argb;
      }
    }
  }
}",0.938871473354232
140967,"@Override public void done(){
  try {
    get();
    String worldFilePath=WorldFileExporter.constructPath(filePath);
    Grid grid=model.getFilteredGrid();
    double cellSize=grid.getCellSize() / scale;
    double west=grid.getWest() - cellSize / 2;
    double north=grid.getNorth() + cellSize / 2;
    WorldFileExporter.writeWorldFile(worldFilePath,cellSize,west,north);
    WKTProjectionFile.write(grid.getPrjFileContent(),filePath);
  }
 catch (  ExecutionException e) {
    new File(filePath).delete();
    String msg=""String_Node_Str"";
    String title=""String_Node_Str"";
    JOptionPane.showMessageDialog(getContentPane(),msg,title,JOptionPane.ERROR_MESSAGE);
  }
catch (  InterruptedException|CancellationException e) {
  }
catch (  IOException exc) {
    new File(filePath).delete();
  }
 finally {
    completeProgress();
  }
}","@Override public void done(){
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      completeProgress();
    }
  }
);
  if (isCancelled()) {
    return;
  }
  try {
    get();
    String worldFilePath=WorldFileExporter.constructPath(filePath);
    Grid grid=model.getFilteredGrid();
    double cellSize=grid.getCellSize() / scale;
    double west=grid.getWest() - cellSize / 2;
    double north=grid.getNorth() + cellSize / 2;
    WorldFileExporter.writeWorldFile(worldFilePath,cellSize,west,north);
    WKTProjectionFile.write(grid.getPrjFileContent(),filePath);
  }
 catch (  ExecutionException e) {
    new File(filePath).delete();
    String msg=""String_Node_Str"";
    String title=""String_Node_Str"";
    JOptionPane.showMessageDialog(getContentPane(),msg,title,JOptionPane.ERROR_MESSAGE);
  }
catch (  InterruptedException|CancellationException e) {
  }
catch (  IOException exc) {
    new File(filePath).delete();
  }
 finally {
    completeProgress();
  }
}",0.9147540983606556
140968,"/** 
 * Render an image and write it to a file, while a progress dialog with a cancel button is displayed.
 * @param filePath file to write to.
 * @param scale The final image will be this many times larger than thegrid.
 */
private void exportContours(final String filePath,final String imageFormat,final int scale){
  String dialogTitle=""String_Node_Str"";
  SwingWorkerWithProgressIndicatorDialog worker;
  worker=new SwingWorkerWithProgressIndicatorDialog<Void>(this,dialogTitle,""String_Node_Str""){
    @Override public void done(){
      try {
        get();
        String worldFilePath=WorldFileExporter.constructPath(filePath);
        Grid grid=model.getFilteredGrid();
        double cellSize=grid.getCellSize() / scale;
        double west=grid.getWest() - cellSize / 2;
        double north=grid.getNorth() + cellSize / 2;
        WorldFileExporter.writeWorldFile(worldFilePath,cellSize,west,north);
        WKTProjectionFile.write(grid.getPrjFileContent(),filePath);
      }
 catch (      ExecutionException e) {
        new File(filePath).delete();
        String msg=""String_Node_Str"";
        String title=""String_Node_Str"";
        JOptionPane.showMessageDialog(getContentPane(),msg,title,JOptionPane.ERROR_MESSAGE);
      }
catch (      InterruptedException|CancellationException e) {
      }
catch (      IOException exc) {
        new File(filePath).delete();
      }
 finally {
        completeProgress();
      }
    }
    @Override protected Void doInBackground() throws Exception {
      start();
      IlluminatedContoursOperator op;
      boolean illuminated=(model.foregroundVisualization == ForegroundVisualization.ILLUMINATED_CONTOURS);
      op=model.setupIlluminatedContoursOperator(illuminated);
      int w=model.getFilteredGrid().getCols() * scale;
      int h=model.getFilteredGrid().getRows() * scale;
      BufferedImage image=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);
      op.renderToImage(image,model.getFilteredGrid(),model.computeFilteredGradientGrid(),this);
      if (!isCancelled()) {
        setCancellable(false);
        setIndeterminate(true);
        File file=new File(filePath);
        setMessage(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
        ImageIO.write(image,imageFormat,file);
      }
      return null;
    }
  }
;
  worker.setIndeterminate(false);
  worker.setMessage(""String_Node_Str"");
  worker.execute();
}","/** 
 * Render an image and write it to a file, while a progress dialog with a cancel button is displayed.
 * @param filePath file to write to.
 * @param scale The final image will be this many times larger than thegrid.
 */
private void exportContours(final String filePath,final String imageFormat,final int scale){
  String dialogTitle=""String_Node_Str"";
  SwingWorkerWithProgressIndicatorDialog worker;
  worker=new SwingWorkerWithProgressIndicatorDialog<Void>(this,dialogTitle,""String_Node_Str""){
    @Override public void done(){
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          completeProgress();
        }
      }
);
      if (isCancelled()) {
        return;
      }
      try {
        get();
        String worldFilePath=WorldFileExporter.constructPath(filePath);
        Grid grid=model.getFilteredGrid();
        double cellSize=grid.getCellSize() / scale;
        double west=grid.getWest() - cellSize / 2;
        double north=grid.getNorth() + cellSize / 2;
        WorldFileExporter.writeWorldFile(worldFilePath,cellSize,west,north);
        WKTProjectionFile.write(grid.getPrjFileContent(),filePath);
      }
 catch (      ExecutionException e) {
        new File(filePath).delete();
        String msg=""String_Node_Str"";
        String title=""String_Node_Str"";
        JOptionPane.showMessageDialog(getContentPane(),msg,title,JOptionPane.ERROR_MESSAGE);
      }
catch (      InterruptedException|CancellationException e) {
      }
catch (      IOException exc) {
        new File(filePath).delete();
      }
 finally {
        completeProgress();
      }
    }
    @Override protected Void doInBackground() throws Exception {
      start();
      IlluminatedContoursOperator op;
      boolean illuminated=(model.foregroundVisualization == ForegroundVisualization.ILLUMINATED_CONTOURS);
      op=model.setupIlluminatedContoursOperator(illuminated);
      int w=model.getFilteredGrid().getCols() * scale;
      int h=model.getFilteredGrid().getRows() * scale;
      BufferedImage image=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);
      op.renderToImage(image,model.getFilteredGrid(),model.computeFilteredGradientGrid(),this);
      if (!isCancelled()) {
        setCancellable(false);
        setIndeterminate(true);
        File file=new File(filePath);
        setMessage(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
        ImageIO.write(image,imageFormat,file);
      }
      return null;
    }
  }
;
  worker.setIndeterminate(false);
  worker.setMessage(""String_Node_Str"");
  worker.execute();
}",0.9622641509433962
140969,"/** 
 * Computes normal vector at x/y. Uses bilinear interpolation, and samples the grid at cell size distance.
 * @param grid
 * @param x
 * @param y
 * @param normal normal on output, not used on input
 * @return false if the values around x/y are void and a normal cannot becomputed.
 */
private boolean normal(Grid grid,double x,double y,double normal[]){
  double d=grid.getCellSize();
  double w=grid.getBilinearInterpol(x - d,y);
  double e=grid.getBilinearInterpol(x + d,y);
  double s=grid.getBilinearInterpol(x,y - d);
  double n=grid.getBilinearInterpol(x,y + d);
  double nx=w - e;
  double ny=s - n;
  double nz=2 * grid.getProjectedCellSize();
  double nL=Math.sqrt(nx * nx + ny * ny + nz * nz);
  normal[0]=nx / nL;
  normal[1]=ny / nL;
  normal[2]=nz / nL;
  return Double.isNaN(nx) == false;
}","/** 
 * Computes normal vector at x/y. Uses bilinear interpolation, and samples the grid at cell size distance.
 * @param grid
 * @param x
 * @param y
 * @param normal normal on output, not used on input
 * @return false if the values around x/y are void and a normal cannot becomputed.
 */
private boolean normal(Grid grid,double x,double y,double normal[]){
  double d=grid.getCellSize();
  double w=grid.getBilinearInterpol(x - d,y);
  double e=grid.getBilinearInterpol(x + d,y);
  double s=grid.getBilinearInterpol(x,y - d);
  double n=grid.getBilinearInterpol(x,y + d);
  double nx=w - e;
  double ny=s - n;
  double nz=2 * grid.getProjectedCellSize();
  double nL=Math.sqrt(nx * nx + ny * ny + nz * nz);
  normal[0]=nx / nL;
  normal[1]=ny / nL;
  normal[2]=nz / nL;
  return Double.isNaN(nx) == false && Double.isNaN(ny) == false;
}",0.9824135839902972
140970,"/** 
 * Line integral convolution of normal vectors with uniform sampling distance and Gaussian weights along a line of steepest slope in uphill and downhill direction.
 * @param grid scalar field
 * @param row start position row
 * @param col start position column
 */
private void lic(SlopeLineIterator iter,Grid src,int row,int col){
  double cellSize=src.getCellSize();
  double x=src.getWest() + cellSize * col;
  double y=src.getNorth() - cellSize * row;
  if (isFlat(col,row)) {
    nzGrid.setValue(1f,col,row);
    return;
  }
  double w=src.getValue(col - 1,row);
  double e=src.getValue(col + 1,row);
  double s=src.getValue(col,row + 1);
  double n=src.getValue(col,row - 1);
  double cntrNx=w - e;
  double cntrNy=s - n;
  double cntrNZ=2 * src.getProjectedCellSize();
  double nL=Math.sqrt(cntrNx * cntrNx + cntrNy * cntrNy + cntrNZ * cntrNZ);
  cntrNx/=nL;
  cntrNy/=nL;
  cntrNZ/=nL;
  if (Double.isNaN(cntrNx)) {
    nzGrid.setValue(1f,col,row);
    return;
  }
  double centralW=gaussianWeights[0];
  double downhillTotalW=0;
  double uphillTotalW=0;
  double uphillNx=0, uphillNy=0, uphillNz=0;
  double downhillNx=0, downhillNy=0, downhillNz=0;
  double[] normal=new double[3];
  iter.reset(x,y);
  float cntrVal=src.getValue(col,row);
  double relativeVal=(cntrVal - min) / (max - min);
  double uphillWeightScale=uphillWeightScale(relativeVal);
  int hl=(int)Math.ceil(halfLineLength);
  for (int i=1; i <= hl; i++) {
    if (iter.nextUphill() == false) {
      break;
    }
    if (normal(src,iter.getX(),iter.getY(),normal) == false) {
      break;
    }
    double weight=gaussianWeights[i] * uphillWeightScale;
    uphillTotalW+=weight;
    uphillNx+=weight * normal[0];
    uphillNy+=weight * normal[1];
    uphillNz+=weight * normal[2];
  }
  iter.reset(x,y);
  for (int i=1; i <= hl; i++) {
    if (iter.nextDownhill() == false) {
      break;
    }
    if (normal(src,iter.getX(),iter.getY(),normal) == false) {
      break;
    }
    double weight=gaussianWeights[i];
    downhillTotalW+=weight;
    downhillNx+=weight * normal[0];
    downhillNy+=weight * normal[1];
    downhillNz+=weight * normal[2];
  }
  double totalW=centralW + downhillTotalW + uphillTotalW;
  double nx=(centralW * cntrNx + downhillNx + uphillNx) / totalW;
  double ny=(centralW * cntrNy + downhillNy + uphillNy) / totalW;
  double nz=(centralW * cntrNZ + downhillNz + uphillNz) / totalW;
  nxGrid.setValue(nx,col,row);
  nyGrid.setValue(ny,col,row);
  nzGrid.setValue(nz,col,row);
}","/** 
 * Line integral convolution of normal vectors with uniform sampling distance and Gaussian weights along a line of steepest slope in uphill and downhill direction.
 * @param grid scalar field
 * @param row start position row
 * @param col start position column
 */
private void lic(SlopeLineIterator iter,Grid src,int row,int col){
  double cellSize=src.getCellSize();
  double x=src.getWest() + cellSize * col;
  double y=src.getNorth() - cellSize * row;
  if (isFlat(col,row)) {
    nzGrid.setValue(1f,col,row);
    return;
  }
  double w=src.getValue(col - 1,row);
  double e=src.getValue(col + 1,row);
  double s=src.getValue(col,row + 1);
  double n=src.getValue(col,row - 1);
  double cntrNx=w - e;
  double cntrNy=s - n;
  double cntrNZ=2 * src.getProjectedCellSize();
  double nL=Math.sqrt(cntrNx * cntrNx + cntrNy * cntrNy + cntrNZ * cntrNZ);
  cntrNx/=nL;
  cntrNy/=nL;
  cntrNZ/=nL;
  if (Double.isNaN(cntrNx) || Double.isNaN(cntrNy)) {
    nzGrid.setValue(1f,col,row);
    return;
  }
  double centralW=gaussianWeights[0];
  double downhillTotalW=0;
  double uphillTotalW=0;
  double uphillNx=0, uphillNy=0, uphillNz=0;
  double downhillNx=0, downhillNy=0, downhillNz=0;
  double[] normal=new double[3];
  iter.reset(x,y);
  float cntrVal=src.getValue(col,row);
  double relativeVal=(cntrVal - min) / (max - min);
  double uphillWeightScale=uphillWeightScale(relativeVal);
  int hl=(int)Math.ceil(halfLineLength);
  for (int i=1; i <= hl; i++) {
    if (iter.nextUphill() == false) {
      break;
    }
    if (normal(src,iter.getX(),iter.getY(),normal) == false) {
      break;
    }
    double weight=gaussianWeights[i] * uphillWeightScale;
    uphillTotalW+=weight;
    uphillNx+=weight * normal[0];
    uphillNy+=weight * normal[1];
    uphillNz+=weight * normal[2];
  }
  iter.reset(x,y);
  for (int i=1; i <= hl; i++) {
    if (iter.nextDownhill() == false) {
      break;
    }
    if (normal(src,iter.getX(),iter.getY(),normal) == false) {
      break;
    }
    double weight=gaussianWeights[i];
    downhillTotalW+=weight;
    downhillNx+=weight * normal[0];
    downhillNy+=weight * normal[1];
    downhillNz+=weight * normal[2];
  }
  double totalW=centralW + downhillTotalW + uphillTotalW;
  double nx=(centralW * cntrNx + downhillNx + uphillNx) / totalW;
  double ny=(centralW * cntrNy + downhillNy + uphillNy) / totalW;
  double nz=(centralW * cntrNZ + downhillNz + uphillNz) / totalW;
  nxGrid.setValue(nx,col,row);
  nyGrid.setValue(ny,col,row);
  nzGrid.setValue(nz,col,row);
}",0.9952
140971,"/** 
 * Reads a .prj file with information about the coordinate reference.
 * @param gridFilePath path to the grid file
 * @return the content of the .prj file or null if the .prj cannot be found
 */
public static String readPrjFile(String gridFilePath){
  String prjFilePath=FileUtils.replaceExtension(gridFilePath,""String_Node_Str"",3);
  File prjFile=new File(prjFilePath);
  if (prjFile.exists() && prjFile.length() > 0 && prjFile.length() < 10 * 1024) {
    BufferedReader br=null;
    try {
      br=new BufferedReader(new FileReader(prjFile));
      StringBuilder sb=new StringBuilder();
      String line=br.readLine();
      while (line != null) {
        sb.append(line);
        line=br.readLine();
      }
      return sb.toString();
    }
 catch (    Exception ex) {
      Logger.getLogger(EsriASCIIGridReader.class.getName()).log(Level.WARNING,null,ex);
    }
 finally {
      try {
        if (br != null) {
          br.close();
        }
      }
 catch (      IOException ex) {
        Logger.getLogger(EsriASCIIGridReader.class.getName()).log(Level.WARNING,null,ex);
      }
    }
  }
  return null;
}","/** 
 * Reads a .prj file with information about the coordinate reference.
 * @param gridFilePath path to the grid file
 * @return the content of the .prj file or null if the .prj cannot be found
 */
public static String readPrjFile(String gridFilePath){
  String prjFilePath=FileUtils.replaceExtension(gridFilePath,""String_Node_Str"",3);
  File prjFile=new File(prjFilePath);
  if (prjFile.exists() && prjFile.length() > 0 && prjFile.length() < 10 * 1024) {
    BufferedReader br=null;
    try {
      br=new BufferedReader(new FileReader(prjFile));
      StringBuilder sb=new StringBuilder();
      String line=br.readLine();
      while (line != null) {
        line=line.trim();
        sb.append(line);
        sb.append(System.lineSeparator());
        line=br.readLine();
      }
      return sb.toString();
    }
 catch (    Exception ex) {
      Logger.getLogger(EsriASCIIGridReader.class.getName()).log(Level.WARNING,null,ex);
    }
 finally {
      try {
        if (br != null) {
          br.close();
        }
      }
 catch (      IOException ex) {
        Logger.getLogger(EsriASCIIGridReader.class.getName()).log(Level.WARNING,null,ex);
      }
    }
  }
  return null;
}",0.9579175704989152
140972,"/** 
 * Set the elevation grid.
 * @param grid The new grid.
 */
public void setGrid(Grid grid,ProgressIndicator progressIndicator){
  this.grid=grid;
  gridMinMax=grid.getMinMax();
  GaussianPyramid gaussianPyramid=new GaussianPyramid(grid);
  laplacianPyramid=new LaplacianPyramid();
  laplacianPyramid.createPyramid(gaussianPyramid.getPyramid());
  updateGeneralizedGrid(progressIndicator);
  localGridModel.setGrid(generalizedGrid,gridMinMax,laplacianPyramid);
}","/** 
 * Set the elevation grid.
 * @param grid The new grid.
 */
public void setGrid(Grid grid,ProgressIndicator progressIndicator){
  this.grid=grid;
  gridMinMax=grid.getMinMax();
  GaussianPyramid gaussianPyramid=new GaussianPyramid(grid);
  laplacianPyramid=new LaplacianPyramid();
  laplacianPyramid.createPyramid(gaussianPyramid.getPyramid());
  setGeneralizedGrid(generalizeGrid(progressIndicator));
  localGridModel.setGrid(generalizedGrid,gridMinMax,laplacianPyramid);
}",0.9735449735449736
140973,"/** 
 * Returns the generalized grid.
 * @return the generalizedGrid
 */
public Grid getGeneralizedGrid(){
  return generalizedGrid;
}","/** 
 * Returns the generalized grid.
 * @return the genGrid
 */
public Grid getGeneralizedGrid(){
  return generalizedGrid;
}",0.9692307692307692
140974,"/** 
 * @param generalizationLICSharpening thegeneralizationLICSharpening to set
 */
public void setGeneralizationLICSharpening(double generalizationLICSharpening){
  this.generalizationLICSharpening=generalizationLICSharpening;
}","/** 
 * @param generalizationLICSharpening the generalizationLICSharpening to set
 */
public void setGeneralizationLICSharpening(double generalizationLICSharpening){
  this.generalizationLICSharpening=generalizationLICSharpening;
}",0.9978308026030368
140975,"/** 
 * @param generalizationLICRoundingLimit the generalizationLICRoundingLimit to set
 */
public void setGeneralizationLICRoundingLimit(double generalizationLICRoundingLimit){
  assert(generalizationLICRoundingLimit >= 0 && generalizationLICRoundingLimit <= 1);
  this.generalizationLICRoundingLimit=generalizationLICRoundingLimit;
}","/** 
 * @param generalizationLICRoundingLimit the generalizationLICRoundingLimitto set
 */
public void setGeneralizationLICRoundingLimit(double generalizationLICRoundingLimit){
  assert(generalizationLICRoundingLimit >= 0 && generalizationLICRoundingLimit <= 1);
  this.generalizationLICRoundingLimit=generalizationLICRoundingLimit;
}",0.9985052316890882
140976,"private void generalizationCheckBoxActionPerformed(java.awt.event.ActionEvent evt){
  model.setGeneralizing(generalizationCheckBox.isSelected());
  updateGeneralizationGUIEnabledState();
  generalizeAndRender();
}","private void generalizationCheckBoxActionPerformed(java.awt.event.ActionEvent evt){
  readGeneralizationGUI(null);
}",0.6747720364741642
140977,"@Override public void run(){
  if (generalizer != null) {
    generalizer.cancel();
  }
  updateGeneralizationGUIEnabledState();
  if (slider.getValueIsAdjusting() == false) {
    model.setGeneralizationLICSize(generalizationLICSizeSlider.getValue() / 10d);
    model.setGeneralizationLICSharpening(generalizationLICSharpeningSlider.getValue() / 100d);
    model.setGeneralizationLICMinSlopeDeg(generalizationLICMinimumSlopeSlider.getValue());
    model.setGeneralizationLICIterations(generalizationLICIterationsSlider.getValue());
    model.setGeneralizationLICSharpeningLimit(generalizationLICSharpeningLimitSlider.getValue() / 100d);
    generalizeAndRender();
  }
}","@Override public void run(){
  if (generalizer != null) {
    generalizer.cancel();
  }
  if (slider == null || slider.getValueIsAdjusting() == false) {
    model.setGeneralizing(generalizationCheckBox.isSelected());
    model.setGeneralizationLICSize(generalizationLICSizeSlider.getValue() / 10d);
    model.setGeneralizationLICSharpening(generalizationLICSharpeningSlider.getValue() / 100d);
    model.setGeneralizationLICMinSlopeDeg(generalizationLICMinimumSlopeSlider.getValue());
    model.setGeneralizationLICIterations(generalizationLICIterationsSlider.getValue());
    model.setGeneralizationLICSharpeningLimit(generalizationLICSharpeningLimitSlider.getValue() / 100d);
    generalizeAndRender();
  }
  updateGeneralizationGUIEnabledState();
}",0.8535211267605634
140978,"protected Generalizer(ProgressPanel progressPanel){
  super(progressPanel);
  this.setIndeterminate(false);
  this.setCancellable(true);
  this.setMessage(""String_Node_Str"");
}","protected Generalizer(ProgressPanel progressPanel){
  super(progressPanel);
  this.setIndeterminate(false);
  this.setCancellable(false);
  this.setMessage(""String_Node_Str"");
}",0.980169971671388
140979,"private void readGeneralizationGUI(final JSlider slider){
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      if (generalizer != null) {
        generalizer.cancel();
      }
      updateGeneralizationGUIEnabledState();
      if (slider.getValueIsAdjusting() == false) {
        model.setGeneralizationLICSize(generalizationLICSizeSlider.getValue() / 10d);
        model.setGeneralizationLICSharpening(generalizationLICSharpeningSlider.getValue() / 100d);
        model.setGeneralizationLICMinSlopeDeg(generalizationLICMinimumSlopeSlider.getValue());
        model.setGeneralizationLICIterations(generalizationLICIterationsSlider.getValue());
        model.setGeneralizationLICSharpeningLimit(generalizationLICSharpeningLimitSlider.getValue() / 100d);
        generalizeAndRender();
      }
    }
  }
);
}","private void readGeneralizationGUI(final JSlider slider){
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      if (generalizer != null) {
        generalizer.cancel();
      }
      if (slider == null || slider.getValueIsAdjusting() == false) {
        model.setGeneralizing(generalizationCheckBox.isSelected());
        model.setGeneralizationLICSize(generalizationLICSizeSlider.getValue() / 10d);
        model.setGeneralizationLICSharpening(generalizationLICSharpeningSlider.getValue() / 100d);
        model.setGeneralizationLICMinSlopeDeg(generalizationLICMinimumSlopeSlider.getValue());
        model.setGeneralizationLICIterations(generalizationLICIterationsSlider.getValue());
        model.setGeneralizationLICSharpeningLimit(generalizationLICSharpeningLimitSlider.getValue() / 100d);
        generalizeAndRender();
      }
      updateGeneralizationGUIEnabledState();
    }
  }
);
}",0.875
140980,"private void generalizationCheckBoxActionPerformed(java.awt.event.ActionEvent evt){
  readGeneralizationGUI(null);
}","private void generalizationCheckBoxActionPerformed(java.awt.event.ActionEvent evt){
  updateGeneralizationGUIEnabledState();
  model.setGeneralizing(generalizationCheckBox.isSelected());
  if (generalizationCheckBox.isSelected()) {
    generalizeAndRender();
  }
}",0.5631578947368421
140981,"private void updateGeneralizationGUIEnabledState(){
  boolean f=model == null ? false : model.isGeneralizing();
  boolean isSharpening=generalizationLICSharpeningSlider.getValue() > 0;
  generalizationMaxLevelsSpinner.setEnabled(f);
  generalizationDetailSlider.setEnabled(f);
  generalizationDetaiIsLabel.setEnabled(f);
  generalizationLICSizeSlider.setEnabled(f);
  generalizationLICIterationsSlider.setEnabled(f);
  generalizationLICSharpeningSlider.setEnabled(f);
  generalizationLICSharpeningLimitSlider.setEnabled(f && isSharpening);
  generalizationLICMinimumSlopeSlider.setEnabled(f);
  generalizationFilterSizeLabel.setEnabled(f);
  generalizationIterationsLabel.setEnabled(f);
  generalizationSharpeningLabel.setEnabled(f);
  generalizationSharpeningLimitLabel.setEnabled(f && isSharpening);
  generalizationMinSlopeLabel.setEnabled(f);
  generalizationLargeLandformRemovalLabel.setEnabled(f);
  generalizationSmallDetailsRemovalLabel.setEnabled(f);
  updateSharpeningSliderLabels();
}","private void updateGeneralizationGUIEnabledState(){
  boolean f=generalizationCheckBox.isSelected();
  boolean isSharpening=generalizationLICSharpeningSlider.getValue() > 0;
  generalizationMaxLevelsSpinner.setEnabled(f);
  generalizationDetailSlider.setEnabled(f);
  generalizationDetaiIsLabel.setEnabled(f);
  generalizationLICSizeSlider.setEnabled(f);
  generalizationLICIterationsSlider.setEnabled(f);
  generalizationLICSharpeningSlider.setEnabled(f);
  generalizationLICSharpeningLimitSlider.setEnabled(f && isSharpening);
  generalizationLICMinimumSlopeSlider.setEnabled(f);
  generalizationFilterSizeLabel.setEnabled(f);
  generalizationIterationsLabel.setEnabled(f);
  generalizationSharpeningLabel.setEnabled(f);
  generalizationSharpeningLimitLabel.setEnabled(f && isSharpening);
  generalizationMinSlopeLabel.setEnabled(f);
  generalizationLargeLandformRemovalLabel.setEnabled(f);
  generalizationSmallDetailsRemovalLabel.setEnabled(f);
  updateSharpeningSliderLabels();
}",0.9610914603335018
140982,"private void readGeneralizationGUI(final JSlider slider){
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      if (generalizer != null) {
        generalizer.cancel();
      }
      if (slider == null || slider.getValueIsAdjusting() == false) {
        model.setGeneralizing(generalizationCheckBox.isSelected());
        model.setGeneralizationLICSize(generalizationLICSizeSlider.getValue() / 10d);
        model.setGeneralizationLICSharpening(generalizationLICSharpeningSlider.getValue() / 100d);
        model.setGeneralizationLICMinSlopeDeg(generalizationLICMinimumSlopeSlider.getValue());
        model.setGeneralizationLICIterations(generalizationLICIterationsSlider.getValue());
        model.setGeneralizationLICSharpeningLimit(generalizationLICSharpeningLimitSlider.getValue() / 100d);
        generalizeAndRender();
      }
      updateGeneralizationGUIEnabledState();
    }
  }
);
}","private void readGeneralizationGUI(JSlider slider){
  updateGeneralizationGUIEnabledState();
  model.setGeneralizing(generalizationCheckBox.isSelected());
  if (slider != null && slider.getValueIsAdjusting() == false) {
    model.setGeneralizationLICSize(generalizationLICSizeSlider.getValue() / 10d);
    model.setGeneralizationLICSharpening(generalizationLICSharpeningSlider.getValue() / 100d);
    model.setGeneralizationLICMinSlopeDeg(generalizationLICMinimumSlopeSlider.getValue());
    model.setGeneralizationLICIterations(generalizationLICIterationsSlider.getValue());
    model.setGeneralizationLICSharpeningLimit(generalizationLICSharpeningLimitSlider.getValue() / 100d);
    generalizeAndRender();
  }
}",0.7591687041564792
140983,"public void modelChanged(){
  settingsPanel.updateImage(SettingsPanel.RenderSpeed.REGULAR);
  settingsPanel.updateGUI();
}","/** 
 * Updates the generalization, visualization and the GUI after the grid values have been changed.
 */
public void modelChanged(){
  settingsPanel.getModel().updateGeneralizedGrid();
  settingsPanel.updateImage(SettingsPanel.RenderSpeed.REGULAR);
  settingsPanel.updateGUI();
}",0.5856079404466501
140984,"/** 
 * @param illuminated
 * @param shadowWidthLow
 * @param shadowWidthHigh
 * @param illuminatedWidthLow
 * @param minWidth
 * @param illuminatedWidthHigh
 * @param azimuth
 * @param interval
 * @param gradientAngle
 * @param illluminatedGray
 * @param aspectGaussBlur
 * @param transitionAngle
 * @param gridMinMax
 */
public IlluminatedContoursOperator(boolean illuminated,double shadowWidthLow,double shadowWidthHigh,double illuminatedWidthLow,double illuminatedWidthHigh,double minWidth,double azimuth,double interval,int gradientAngle,int illluminatedGray,double aspectGaussBlur,int transitionAngle,float[] gridMinMax){
  this.illuminated=illuminated;
  this.shadowWidthLow=shadowWidthLow;
  this.shadowWidthHigh=shadowWidthHigh;
  this.illuminatedWidthLow=illuminatedWidthLow;
  this.illuminatedWidthHigh=illuminatedWidthHigh;
  this.minWidth=minWidth;
  this.azimuth=azimuth;
  this.interval=interval;
  this.gradientAngle=gradientAngle;
  this.illluminatedGray=illluminatedGray;
  this.aspectGaussBlur=aspectGaussBlur;
  this.transitionAngle=transitionAngle;
  this.gridMin=gridMinMax[0];
  this.gridMax=gridMinMax[1];
}","/** 
 * @param illuminated
 * @param shadowWidthLow
 * @param shadowWidthHigh
 * @param illuminatedWidthLow
 * @param minWidth
 * @param illuminatedWidthHigh
 * @param azimuth
 * @param interval
 * @param gradientAngle
 * @param illluminatedGray
 * @param aspectGaussBlur
 * @param transitionAngle
 * @param gridMinMax
 */
public IlluminatedContoursOperator(boolean illuminated,double shadowWidthLow,double shadowWidthHigh,double illuminatedWidthLow,double illuminatedWidthHigh,double minWidth,double azimuth,double interval,int gradientAngle,int illluminatedGray,double aspectGaussBlur,int transitionAngle,float[] gridMinMax){
  this.illuminated=illuminated;
  this.shadowWidthLow=shadowWidthLow;
  this.shadowWidthHigh=shadowWidthHigh;
  this.illuminatedWidthLow=illuminatedWidthLow;
  this.illuminatedWidthHigh=illuminatedWidthHigh;
  this.minWidth=minWidth;
  this.azimuth=azimuth;
  this.interval=Math.abs(interval);
  this.gradientAngle=gradientAngle;
  this.illluminatedGray=illluminatedGray;
  this.aspectGaussBlur=aspectGaussBlur;
  this.transitionAngle=transitionAngle;
  this.gridMin=gridMinMax[0];
  this.gridMax=gridMinMax[1];
}",0.9955985915492958
140985,"/** 
 * Compute the gray value for the illuminated contour line image
 * @param elevation Elevation of the point.
 * @param aspect Aspect of the point
 * @param slope Slope of the point.
 * @param cellSize
 * @return Gray value between 0 and 255.
 */
public int computeGray(double elevation,double aspect,double slope,double cellSize){
  double illumination=90 - azimuth;
  double angleDiff=smallestAngleDiff(illumination,aspect);
  double w=(gridMax - elevation) / (gridMax - gridMin);
  double shadowWidth=shadowWidthLow * w + shadowWidthHigh * (1d - w);
  double illiminatedWidth=illuminatedWidthLow * w + illuminatedWidthHigh * (1d - w);
  double a;
  if (illuminated) {
    double trad=transitionAngle / 180. * Math.PI;
    double arad=angleDiff / 180. * Math.PI;
    if (angleDiff > transitionAngle) {
      a=shadowWidth * slope * cellSize;
      double m=(Math.PI / 2) / (Math.PI - trad);
      double c=(Math.PI / 2) - m * trad;
      arad=arad * m + c;
      a*=Math.abs(Math.cos(arad));
    }
 else {
      a=illiminatedWidth * slope * cellSize;
      arad=arad / trad * (Math.PI / 2);
      a*=Math.abs(Math.cos(arad));
    }
  }
 else {
    a=shadowWidth * slope * cellSize;
    a*=Math.abs(Math.sin(angleDiff / 180 * Math.PI / 2));
  }
  a=Math.max(minWidth * slope * cellSize,a);
  double dist=Math.abs(elevation) % interval;
  if (dist > a) {
    dist=interval - dist;
  }
  if (a > dist) {
    if (!illuminated || angleDiff >= (transitionAngle + gradientAngle)) {
      return 0;
    }
 else     if (angleDiff <= (transitionAngle - gradientAngle)) {
      return illuminated ? illluminatedGray : 0;
    }
 else {
      double d=transitionAngle + gradientAngle - angleDiff;
      return (int)(d / (2. * gradientAngle) * 255.);
    }
  }
  return CONTOURS_TRANSPARENT;
}","/** 
 * Compute the gray value for the illuminated contour line image
 * @param elevation Elevation of the point.
 * @param aspect Aspect of the point
 * @param slope Slope of the point.
 * @param cellSize
 * @return Gray value between 0 and 255.
 */
public int computeGray(double elevation,double aspect,double slope,double cellSize){
  double illumination=90 - azimuth;
  double angleDiff=smallestAngleDiff(illumination,aspect);
  double w=(gridMax - elevation) / (gridMax - gridMin);
  double shadowWidth=shadowWidthLow * w + shadowWidthHigh * (1d - w);
  double illiminatedWidth=illuminatedWidthLow * w + illuminatedWidthHigh * (1d - w);
  double a;
  if (illuminated) {
    double trad=transitionAngle / 180. * Math.PI;
    double arad=angleDiff / 180. * Math.PI;
    if (angleDiff > transitionAngle) {
      a=shadowWidth * slope * cellSize;
      double m=(Math.PI / 2) / (Math.PI - trad);
      double c=(Math.PI / 2) - m * trad;
      arad=arad * m + c;
      a*=Math.abs(Math.cos(arad));
    }
 else {
      a=illiminatedWidth * slope * cellSize;
      arad=arad / trad * (Math.PI / 2);
      a*=Math.abs(Math.cos(arad));
    }
  }
 else {
    a=shadowWidth * slope * cellSize;
    a*=Math.abs(Math.sin(angleDiff / 180 * Math.PI / 2));
  }
  a=Math.max(minWidth * slope * cellSize,a);
  double zDist=Math.abs(elevation) % interval;
  if (zDist > interval / 2) {
    zDist=interval - zDist;
  }
  if (a > zDist) {
    if (!illuminated || angleDiff >= (transitionAngle + gradientAngle)) {
      return 0;
    }
 else     if (angleDiff <= (transitionAngle - gradientAngle)) {
      return illuminated ? illluminatedGray : 0;
    }
 else {
      double d=transitionAngle + gradientAngle - angleDiff;
      return (int)(d / (2. * gradientAngle) * 255.);
    }
  }
  return CONTOURS_TRANSPARENT;
}",0.992191857222532
140986,"/** 
 * Compute the gray value for the illuminated contour line image
 * @param elevation Elevation of the point.
 * @param aspect Aspect of the point.
 * @param slope Slope of the point.
 * @param cellSize
 * @return Gray value between 0 and 255.
 */
public int computeGray(double elevation,double aspect,double slope,double cellSize){
  double angleDiff=getAngleDifference(azimuth,aspect);
  double a;
  if (angleDiff > 90) {
    a=shadowWidth * slope * cellSize;
  }
 else {
    a=illuminatedWidth * slope * cellSize;
  }
  if (tanaka) {
    a*=Math.abs(Math.cos(angleDiff / 180 * Math.PI));
  }
  a=Math.max(minWidth * slope * cellSize,a);
  double dist=elevation % interval;
  if (dist > a) {
    dist=interval - dist;
  }
  if (a > dist) {
    if (angleDiff >= (90 + gradientAngle)) {
      return 0;
    }
 else     if (angleDiff <= (90 - gradientAngle)) {
      return illuminated ? illluminatedGray : 0;
    }
 else     if (angleDiff > (90 - gradientAngle) && angleDiff < (90 + gradientAngle)) {
      return (int)((angleDiff - (90 - gradientAngle)) / ((90 + gradientAngle) - (90 - gradientAngle)) * (-255) + 255);
    }
  }
  return CONTOURS_TRANSPARENT;
}","/** 
 * Compute the gray value for the illuminated contour line image
 * @param elevation Elevation of the point.
 * @param aspect Aspect of the point.
 * @param slope Slope of the point.
 * @param cellSize
 * @return Gray value between 0 and 255.
 */
public int computeGray(double elevation,double aspect,double slope,double cellSize){
  double angleDiff=getAngleDifference(azimuth,aspect);
  double a;
  if (angleDiff > 90) {
    a=shadowWidth * slope * cellSize;
  }
 else {
    a=illuminatedWidth * slope * cellSize;
  }
  if (tanaka) {
    a*=Math.abs(Math.cos(angleDiff / 180 * Math.PI));
  }
  a=Math.max(minWidth * slope * cellSize,a);
  double dist=Math.abs(elevation) % interval;
  if (dist > a) {
    dist=interval - dist;
  }
  if (a > dist) {
    if (angleDiff >= (90 + gradientAngle)) {
      return 0;
    }
 else     if (angleDiff <= (90 - gradientAngle)) {
      return illuminated ? illluminatedGray : 0;
    }
 else     if (angleDiff > (90 - gradientAngle) && angleDiff < (90 + gradientAngle)) {
      return (int)((angleDiff - (90 - gradientAngle)) / ((90 + gradientAngle) - (90 - gradientAngle)) * (-255) + 255);
    }
  }
  return CONTOURS_TRANSPARENT;
}",0.995730145175064
140987,"@Override protected void operate(Grid src,Grid dst,int startRow,int endRow){
  for (int row=startRow; row < endRow; ++row) {
    float[] srcArray=src.getGrid()[row];
    float[] dstArray=src.getGrid()[row];
    System.arraycopy(srcArray,0,dstArray,0,srcArray.length);
  }
}","@Override protected void operate(Grid src,Grid dst,int startRow,int endRow){
  for (int row=startRow; row < endRow; ++row) {
    float[] srcArray=src.getGrid()[row];
    float[] dstArray=dst.getGrid()[row];
    System.arraycopy(srcArray,0,dstArray,0,srcArray.length);
  }
}",0.989010989010989
140988,"/** 
 * Create the MultiQC report using docker.
 * @param dockerImage docker image to use
 * @param inputDirectory input directory
 * @param multiQCReportFile output report
 * @param projectName project name
 * @throws IOException if an error occurs while creating the report
 * @throws EoulsanException if MultiQC execution fails
 */
private static void createMultiQCReportWithDocker(final String dockerImage,final File inputDirectory,final File multiQCReportFile,final String projectName,final File temporaryDirectory) throws IOException, EoulsanException {
  SimpleProcess process=DockerManager.getInstance().createImageInstance(dockerImage);
  File executionDirectory=multiQCReportFile.getParentFile();
  File stdoutFile=new File(executionDirectory,""String_Node_Str"");
  File stderrFile=new File(executionDirectory,""String_Node_Str"");
  List<File> filesUsed=new ArrayList<>();
  filesUsed.add(executionDirectory);
  filesUsed.add(temporaryDirectory);
  filesUsed.add(multiQCReportFile);
  for (  File f : inputDirectory.listFiles()) {
    if (!f.getName().startsWith(""String_Node_Str"") && Files.isSymbolicLink(f.toPath())) {
      filesUsed.add(f.toPath().toRealPath().toFile());
    }
  }
  final int exitValue=process.execute(createMultiQCOptions(inputDirectory,multiQCReportFile,projectName),executionDirectory,temporaryDirectory,stdoutFile,stderrFile,filesUsed.toArray(new File[filesUsed.size()]));
  if (exitValue > 0) {
    throw new EoulsanException(""String_Node_Str"" + exitValue);
  }
}","/** 
 * Create the MultiQC report using docker.
 * @param dockerImage docker image to use
 * @param inputDirectory input directory
 * @param multiQCReportFile output report
 * @param projectName project name
 * @throws IOException if an error occurs while creating the report
 * @throws EoulsanException if MultiQC execution fails
 */
private static void createMultiQCReportWithDocker(final String dockerImage,final File inputDirectory,final File multiQCReportFile,final String projectName,final File temporaryDirectory) throws IOException, EoulsanException {
  SimpleProcess process=DockerManager.getInstance().createImageInstance(dockerImage);
  File executionDirectory=multiQCReportFile.getParentFile();
  File stdoutFile=new File(executionDirectory,""String_Node_Str"");
  File stderrFile=new File(executionDirectory,""String_Node_Str"");
  List<File> filesUsed=new ArrayList<>();
  filesUsed.add(executionDirectory);
  filesUsed.add(temporaryDirectory);
  filesUsed.add(multiQCReportFile);
  for (  File f : inputDirectory.listFiles()) {
    if (!f.getName().startsWith(""String_Node_Str"")) {
      filesUsed.add(f);
    }
  }
  final int exitValue=process.execute(createMultiQCOptions(inputDirectory,multiQCReportFile,projectName),executionDirectory,temporaryDirectory,stdoutFile,stderrFile,filesUsed.toArray(new File[filesUsed.size()]));
  if (exitValue > 0) {
    throw new EoulsanException(""String_Node_Str"" + exitValue);
  }
}",0.9607374530556504
140989,"/** 
 * Save genome description.
 * @param file output file
 */
public void save(final File file) throws FileNotFoundException, IOException {
  checkNotNull(file,""String_Node_Str"");
  save(FileUtils.createOutputStream(file));
}","/** 
 * Save genome description.
 * @param file output file
 */
public void save(final File file) throws IOException {
  checkNotNull(file,""String_Node_Str"");
  save(FileUtils.createOutputStream(file));
}",0.9466357308584686
140990,"/** 
 * Save the annotation.
 * @param outputFile Output file
 */
public void save(final File outputFile) throws FileNotFoundException, IOException {
  if (outputFile == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  save(FileUtils.createOutputStream(outputFile));
}","/** 
 * Save the annotation.
 * @param outputFile Output file
 */
public void save(final File outputFile) throws IOException {
  if (outputFile == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  save(FileUtils.createOutputStream(outputFile));
}",0.9584086799276672
140991,"/** 
 * Load the annotation.
 * @param inputFile input file
 */
public void load(final File inputFile) throws FileNotFoundException, IOException {
  if (inputFile == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  load(FileUtils.createInputStream(inputFile));
}","/** 
 * Load the annotation.
 * @param inputFile input file
 */
public void load(final File inputFile) throws IOException {
  if (inputFile == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  load(FileUtils.createInputStream(inputFile));
}",0.9574861367837338
140992,"@Override public int compareTo(final GenomicInterval e){
  if (e == null) {
    return -1;
  }
  if (!getChromosome().equals(e.getChromosome())) {
    return getChromosome().compareTo(e.getChromosome());
  }
  final int startComp=Integer.compare(this.start,e.getStart());
  if (startComp != 0) {
    return startComp;
  }
  return ((Integer)this.end).compareTo(e.getEnd());
}","@Override public int compareTo(final GenomicInterval e){
  if (e == null) {
    return -1;
  }
  if (!getChromosome().equals(e.getChromosome())) {
    return getChromosome().compareTo(e.getChromosome());
  }
  final int startComp=Integer.compare(this.start,e.getStart());
  if (startComp != 0) {
    return startComp;
  }
  return Integer.compare(this.end,e.getEnd());
}",0.9664429530201344
140993,"@Override public boolean hasNext(){
  if (this.end) {
    return false;
  }
  this.nextCallDone=false;
  if (!this.reuse) {
    this.result=new ReadSequence();
  }
  String line=null;
  try {
    while ((line=this.reader.readLine()) != null) {
      final String trim=line.trim();
      if (""String_Node_Str"".equals(trim)) {
        continue;
      }
      this.result.parse(trim);
      this.result.setId(++this.count);
      return true;
    }
    this.sb.setLength(0);
    this.end=true;
    return false;
  }
 catch (  IOException e) {
    this.ioException=e;
    this.end=true;
    return false;
  }
}","@Override public boolean hasNext(){
  if (this.end) {
    return false;
  }
  this.nextCallDone=false;
  if (!this.reuse) {
    this.result=new ReadSequence();
  }
  String line=null;
  try {
    while ((line=this.reader.readLine()) != null) {
      final String trim=line.trim();
      if (""String_Node_Str"".equals(trim)) {
        continue;
      }
      this.result.parse(trim);
      this.result.setId(++this.count);
      return true;
    }
    this.end=true;
    return false;
  }
 catch (  IOException e) {
    this.ioException=e;
    this.end=true;
    return false;
  }
}",0.9780775716694772
140994,"public void initialize(InputSplit genericSplit,TaskAttemptContext context) throws IOException {
  FileSplit split=(FileSplit)genericSplit;
  Configuration job=context.getConfiguration();
  this.maxLineLength=job.getInt(MAX_LINE_LENGTH,Integer.MAX_VALUE);
  start=split.getStart();
  end=start + split.getLength();
  final Path file=split.getPath();
  final FileSystem fs=file.getFileSystem(job);
  fileIn=fs.open(file);
  CompressionCodec codec=new CompressionCodecFactory(job).getCodec(file);
  if (null != codec) {
    isCompressedInput=true;
    decompressor=CodecPool.getDecompressor(codec);
    if (codec instanceof SplittableCompressionCodec) {
      final SplitCompressionInputStream cIn=((SplittableCompressionCodec)codec).createInputStream(fileIn,decompressor,start,end,SplittableCompressionCodec.READ_MODE.BYBLOCK);
      in=new CompressedSplitFastqLineReader(cIn,job,this.recordDelimiterBytes);
      start=cIn.getAdjustedStart();
      end=cIn.getAdjustedEnd();
      filePosition=cIn;
    }
 else {
      in=new SplitLineReader(codec.createInputStream(fileIn,decompressor),job,this.recordDelimiterBytes);
      filePosition=fileIn;
    }
  }
 else {
    fileIn.seek(start);
    in=new SplitLineReader(fileIn,job,this.recordDelimiterBytes);
    filePosition=fileIn;
  }
  if (start != 0) {
    start+=in.readLine(new Text(),0,maxBytesToConsume(start));
  }
  this.pos=start;
}","public void initialize(InputSplit genericSplit,TaskAttemptContext context) throws IOException {
  FileSplit split=(FileSplit)genericSplit;
  Configuration job=context.getConfiguration();
  this.maxLineLength=job.getInt(MAX_LINE_LENGTH,Integer.MAX_VALUE);
  start=split.getStart();
  end=start + split.getLength();
  final Path file=split.getPath();
  final FileSystem fs=file.getFileSystem(job);
  final FSDataInputStream fileIn=fs.open(file);
  CompressionCodec codec=new CompressionCodecFactory(job).getCodec(file);
  if (null != codec) {
    isCompressedInput=true;
    decompressor=CodecPool.getDecompressor(codec);
    if (codec instanceof SplittableCompressionCodec) {
      final SplitCompressionInputStream cIn=((SplittableCompressionCodec)codec).createInputStream(fileIn,decompressor,start,end,SplittableCompressionCodec.READ_MODE.BYBLOCK);
      in=new CompressedSplitFastqLineReader(cIn,job,this.recordDelimiterBytes);
      start=cIn.getAdjustedStart();
      end=cIn.getAdjustedEnd();
      filePosition=cIn;
    }
 else {
      in=new SplitLineReader(codec.createInputStream(fileIn,decompressor),job,this.recordDelimiterBytes);
      filePosition=fileIn;
    }
  }
 else {
    fileIn.seek(start);
    in=new SplitLineReader(fileIn,job,this.recordDelimiterBytes);
    filePosition=fileIn;
  }
  if (start != 0) {
    start+=in.readLine(new Text(),0,maxBytesToConsume(start));
  }
  this.pos=start;
}",0.9914285714285714
140995,"/** 
 * Constructor.
 * @param mapperName mapper name
 * @param executor executor
 * @param temporaryDirectory temporary directory
 * @param pairedEnd paired-end mode
 * @throws IOException if en error occurs
 */
protected MapperProcess(final String mapperName,MapperExecutor executor,final File temporaryDirectory,final boolean pairedEnd,final boolean threadForRead1) throws IOException {
  requireNonNull(mapperName,""String_Node_Str"");
  requireNonNull(executor,""String_Node_Str"");
  requireNonNull(temporaryDirectory,""String_Node_Str"");
  try {
    this.mapperName=mapperName;
    this.uuid=UUID.randomUUID().toString();
    this.executor=executor;
    this.pairedEnd=pairedEnd;
    final File tmpDir=temporaryDirectory;
    this.pipeFile1=new File(tmpDir,""String_Node_Str"" + uuid + ""String_Node_Str"");
    this.pipeFile2=new File(tmpDir,""String_Node_Str"" + uuid + ""String_Node_Str"");
    this.writer1=threadForRead1 ? new FastqWriterThread(this.pipeFile1,""String_Node_Str"") : new FastqWriterNoThread(this.pipeFile1);
    this.writer2=pairedEnd ? new FastqWriterThread(this.pipeFile2,""String_Node_Str"") : null;
    addFilesToRemove(this.pipeFile1,this.pipeFile2);
    additionalInit();
    startProcess(tmpDir);
  }
 catch (  InterruptedException e) {
    throw new IOException(e);
  }
}","/** 
 * Constructor.
 * @param mapperName mapper name
 * @param executor executor
 * @param temporaryDirectory temporary directory
 * @param pairedEnd paired-end mode
 * @throws IOException if en error occurs
 */
protected MapperProcess(final String mapperName,MapperExecutor executor,final File temporaryDirectory,final boolean pairedEnd,final boolean threadForRead1) throws IOException {
  requireNonNull(mapperName,""String_Node_Str"");
  requireNonNull(executor,""String_Node_Str"");
  requireNonNull(temporaryDirectory,""String_Node_Str"");
  try {
    this.mapperName=mapperName;
    this.uuid=UUID.randomUUID().toString();
    this.executor=executor;
    this.pairedEnd=pairedEnd;
    this.pipeFile1=new File(temporaryDirectory,""String_Node_Str"" + uuid + ""String_Node_Str"");
    this.pipeFile2=new File(temporaryDirectory,""String_Node_Str"" + uuid + ""String_Node_Str"");
    this.writer1=threadForRead1 ? new FastqWriterThread(this.pipeFile1,""String_Node_Str"") : new FastqWriterNoThread(this.pipeFile1);
    this.writer2=pairedEnd ? new FastqWriterThread(this.pipeFile2,""String_Node_Str"") : null;
    addFilesToRemove(this.pipeFile1,this.pipeFile2);
    additionalInit();
    startProcess(temporaryDirectory);
  }
 catch (  InterruptedException e) {
    throw new IOException(e);
  }
}",0.965034965034965
140996,"/** 
 * Format a GFFEntry in GFF3 or GTF format.
 * @param e the entry
 * @param gtfFormat true if the entry is in GTF format
 * @return the entry in the correct format
 */
private static final String formatEntry(final GFFEntry e,final boolean gtfFormat){
  if (gtfFormat) {
    return e.toGTF();
  }
  return e.toGFF3();
}","/** 
 * Format a GFFEntry in GFF3 or GTF format.
 * @param e the entry
 * @param gtfFormat true if the entry is in GTF format
 * @return the entry in the correct format
 */
private static String formatEntry(final GFFEntry e,final boolean gtfFormat){
  if (gtfFormat) {
    return e.toGTF();
  }
  return e.toGFF3();
}",0.990625
140997,"/** 
 * Compare 2 Version object.
 * @param version Version to compare.
 * @return a negative integer, zero, or a positive integer as this object isless than, equal to, or greater than the specified object.
 */
@Override public int compareTo(final Version version){
  if (version == null) {
    return 1;
  }
  final int compMajor=Integer.compare(getMajor(),version.getMajor());
  if (compMajor != 0) {
    return compMajor;
  }
  final int compMinor=Integer.valueOf(getMinor()).compareTo(version.getMinor());
  if (compMinor != 0) {
    return compMinor;
  }
  final int compRevision=Integer.valueOf(getRevision()).compareTo(version.getRevision());
  if (compRevision != 0) {
    return compRevision;
  }
  return getType().compareTo(version.getType());
}","/** 
 * Compare 2 Version object.
 * @param version Version to compare.
 * @return a negative integer, zero, or a positive integer as this object isless than, equal to, or greater than the specified object.
 */
@Override public int compareTo(final Version version){
  if (version == null) {
    return 1;
  }
  final int compMajor=Integer.compare(getMajor(),version.getMajor());
  if (compMajor != 0) {
    return compMajor;
  }
  final int compMinor=Integer.compare(getMinor(),version.getMinor());
  if (compMinor != 0) {
    return compMinor;
  }
  final int compRevision=Integer.compare(getRevision(),version.getRevision());
  if (compRevision != 0) {
    return compRevision;
  }
  return getType().compareTo(version.getType());
}",0.948993288590604
140998,"/** 
 * Constructor.
 * @param format format of the data
 */
protected AbstractData(final DataFormat format){
  checkNotNull(format,""String_Node_Str"");
synchronized (this.getClass()) {
    this.id=++instanceCount;
  }
  this.name=""String_Node_Str"" + (++instanceCount);
  this.format=format;
}","/** 
 * Constructor.
 * @param format format of the data
 */
protected AbstractData(final DataFormat format){
  checkNotNull(format,""String_Node_Str"");
synchronized (AbstractData.class) {
    this.id=++instanceCount;
  }
  this.name=""String_Node_Str"" + (++instanceCount);
  this.format=format;
}",0.5792163543441227
140999,"/** 
 * Initialize the settings of the Workflow.
 */
private void initializeSettings(){
  final CommandWorkflowModel c=this.workflowCommand;
  final Set<Parameter> globalParameters=c.getGlobalParameters();
  final Settings settings=EoulsanRuntime.getSettings();
  getLogger().info(""String_Node_Str"" + globalParameters);
  for (  Parameter p : globalParameters) {
    settings.setSetting(p.getName(),p.getStringValue());
  }
  DataFormatRegistry.getInstance().reload();
}","/** 
 * Initialize the settings of the Workflow.
 */
private void initializeSettings(){
  final Set<Parameter> globalParameters=this.workflowCommand.getGlobalParameters();
  final Settings settings=EoulsanRuntime.getSettings();
  getLogger().info(""String_Node_Str"" + globalParameters);
  for (  Parameter p : globalParameters) {
    settings.setSetting(p.getName(),p.getStringValue());
  }
  DataFormatRegistry.getInstance().reload();
}",0.8940397350993378
141000,"/** 
 * Create an OutputStream for the DataFile. The output stream will not automatically compress data.
 * @return an OutputStream object
 * @throws IOException if an error occurs while creating the DataFile
 */
public OutputStream rawCreate() throws IOException {
  return getProtocol().putData(this,this.md == null ? null : this.md);
}","/** 
 * Create an OutputStream for the DataFile. The output stream will not automatically compress data.
 * @return an OutputStream object
 * @throws IOException if an error occurs while creating the DataFile
 */
public OutputStream rawCreate() throws IOException {
  return getProtocol().putData(this,this.md);
}",0.9615975422427036
